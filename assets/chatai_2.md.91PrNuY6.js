import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},k={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,p,a,r){return n(),i("div",q,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-1ade12b2"]]),S=JSON.parse('[{"question":"You are given an array of integers representing the heights of a sequence of towers. We say that the sequence is balanced if the difference between the heights of any two adjacent towers is at most 1. Your task is to determine whether the given sequence is balanced. -----Constraints----- - 1 leq n leq 100 - 1 leq h_i leq 100 - n is the number of towers and h_i represents the height of the i-th tower. -----Input----- Input is given from Standard Input in the following format: n h_1 h_2 ... h_n -----Output----- Print YES if the sequence of towers is balanced; otherwise, print NO. -----Sample Input----- 5 1 2 3 3 2 -----Sample Output----- YES In this case, the differences between adjacent towers are all within 1, so the sequence is balanced.","solution":"def is_sequence_balanced(n, heights): Determines whether the sequence of tower heights is balanced. for i in range(n - 1): if abs(heights[i] - heights[i + 1]) > 1: return \\"NO\\" return \\"YES\\""},{"question":"In a fictional city, there are n buildings in a row, numbered from 1 to n. Each building can either be a residential building (denoted by \'R\') or a commercial building (denoted by \'C\'). Each resident of a residential building wants to visit the nearest commercial building to buy their groceries. You are required to find the minimum total distance that all residents have to travel to reach the nearest commercial building. Distance between buildings i and j is defined as |i - j|, where |x| denotes the absolute value of x. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of buildings in the row. The second line contains a string of length n consisting of \'R\' and \'C\', representing the type of each building. Output Print the minimum total distance all residents have to travel. If there are no residents or commercial buildings, print 0. Examples Input 7 RCCRRCR Output 4 Input 3 CCC Output 0 Input 5 RRRCC Output 6 Note: In the first example, the distances for each resident to the nearest commercial building are as follows: - The first resident (building 1) travels to building 2. - The fourth resident (building 4) travels to building 5. - The fifth resident (building 5) travels to building 6. So, the total distance is 1 + 1 + 2 = 4. In the second example, since there are no residents, the total distance is 0. In the third example, the distances for each resident are: - The first resident (building 1) travels to building 4. - The second resident (building 2) travels to building 4. - The third resident (building 3) travels to building 4. So, the total distance is 3 + 2 + 1 = 6.","solution":"def minimum_total_distance(n, buildings): Calculate the minimum total distance all residents have to travel to reach the nearest commercial building. :param n: int, number of buildings :param buildings: string, \'R\' for residential building, \'C\' for commercial building :return: int, minimum total distance if \'R\' not in buildings or \'C\' not in buildings: return 0 min_dist = [float(\'inf\')] * n # Pass from left to right nearest_c = float(\'inf\') for i in range(n): if buildings[i] == \'C\': nearest_c = i if buildings[i] == \'R\' and nearest_c != float(\'inf\'): min_dist[i] = i - nearest_c # Pass from right to left nearest_c = float(\'inf\') for i in range(n - 1, -1, -1): if buildings[i] == \'C\': nearest_c = i if buildings[i] == \'R\' and nearest_c != float(\'inf\'): min_dist[i] = min(min_dist[i], nearest_c - i) return sum([dist for dist in min_dist if dist != float(\'inf\')])"},{"question":"# Task Adam is catering to multiple events and needs to figure out whether he can fulfill the demands of multiple orders of sandwiches. Given two lists representing the bread and sandwich preferences of the guests, determine if he has enough bread to cater to all the orders. Each type of sandwich requires two slices of bread. Assume he has unlimited ingredients, but the only limiting factor is the number of bread slices he has. # Example For example, given `bread_slices = 20` and `sandwich_orders = [4, 3, 2, 5]`, the result should be `True`, since the total number of sandwiches is `14`, requiring `14 * 2 = 28` slices of bread, and 28 is greater than 20. # Input/Output - `[input]` an integer `bread_slices` The number of slices of bread Adam has. Constraints: 1 ≤ bread_slices ≤ 1000 - `[input]` array of integers `sandwich_orders` Each integer in the array represents the number of sandwiches ordered by a guest. Constraints: 1 ≤ sandwich_orders.length ≤ 100, 1 ≤ sandwich_orders[i] ≤ 10 - `[output]` a boolean Return `True` if Adam can fulfill all the orders, otherwise return `False`.","solution":"def can_fulfill_orders(bread_slices, sandwich_orders): Determines if there are enough bread slices to fulfill the orders of sandwiches. Each sandwich requires 2 slices of bread. Parameters: bread_slices (int): The number of slices of bread Adam has. sandwich_orders (list of int): The number of sandwiches ordered by each guest. Returns: bool: True if there are enough bread slices to fulfill the orders, False otherwise. total_sandwiches = sum(sandwich_orders) needed_bread_slices = total_sandwiches * 2 return bread_slices >= needed_bread_slices"},{"question":"A palindrome is a word, phrase, or number that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Given a string, determine the longest possible palindrome that can be formed using any of the characters in the string. -----Input----- A single line containing a string S, which consists of lowercase and uppercase English letters. -----Output----- A single line containing the longest possible palindrome that can be formed using any of the characters in the string. If there are multiple solutions, any one of them is acceptable. -----Constraints----- 1 ≤ |S| ≤ 1000, where |S| denotes the length of the string S. -----Sample Input----- abccccdd -----Sample Output----- dccaccd","solution":"def longest_palindrome(s): Returns the longest possible palindrome that can be formed using any of the characters in the string. from collections import Counter char_count = Counter(s) palindrome_half = [] middle_char = \\"\\" for char, count in char_count.items(): if count % 2 == 1 and (middle_char == \\"\\" or char > middle_char): middle_char = char palindrome_half.append(char * (count // 2)) palindrome_half_sorted = sorted(palindrome_half, reverse=True) half = \'\'.join(palindrome_half_sorted) return half + middle_char + half[::-1]"},{"question":"Emma has recently become interested in combinatorial mathematics. She came across the concept of binomial coefficients and wants to write a program to compute these coefficients efficiently for given values of n and k. The binomial coefficient C(n, k) is defined as: n! C(n, k) = ----------------- k! * (n - k)! Emma is particularly concerned with performance and wants to ensure that the program can handle the largest coefficients possible without running into efficiency problems. Input The input consists of a single line containing two integers, n and k (0 ≤ k ≤ n ≤ 1000). Output Output a single integer — the value of C(n, k). For clarity, n! (n factorial) is the product of all positive integers from 1 to n, and 0! is defined as 1. Examples Input 5 2 Output 10 Input 7 4 Output 35","solution":"import math def binomial_coefficient(n, k): Returns the binomial coefficient C(n, k). if k < 0 or k > n: return 0 # Using symmetry property to minimize the number of calculations k = min(k, n - k) coefficient = 1 for i in range(k): coefficient = coefficient * (n - i) // (i + 1) return coefficient"},{"question":"Jack is a botanist and he is interested in analyzing the growth patterns of a particular species of plant. He has been recording the heights of several plants over a period of days. Given the periodic measurements, Jack wants to determine the longest continuous sub-period where the height of the plant increases each day. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will contain a single integer n (1 le n le 1000), representing the number of days Jack has recorded measurements. Each of the next n lines will contain an integer h_i (1 le h_i le 10000), representing the height of the plant on the i-th day. -----Output----- Output a single integer representing the length of the longest continuous sub-period where the height increases each day. -----Examples----- Sample Input 1: 6 3 4 2 5 6 1 Sample Output 1: 3 Sample Input 2: 5 10 20 30 5 7 Sample Output 2: 3","solution":"def longest_increasing_subperiod(n, heights): if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation on the string any number of times: 1. Select any two adjacent characters in the string and replace them with a single character which is the next lexicographical letter in the alphabet for either of the two characters. That is, you can replace characters \'a\' and \'b\' with \'b\', or \'b\' and \'c\' with \'c\', and so on. Note that the alphabet is considered cyclically, meaning if you combine \'z\' with any adjacent character, it can form \'a\' again. Your task is to return the lexicographically smallest string that you can obtain after any number of operations. # Input The input contains a single string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. # Output Output a single string which is the lexicographically smallest that can be obtained. # Examples Input 1 abc Output 1 b Input 2 zab Output 2 a Input 3 aaabcc Output 3 bcc","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained after any number of the given operations. # Since we can replace any two adjacent characters by the maximum of the two, # the key to create the smallest lexicographical string is actually to compute # the maximum character in the string. return max(s)"},{"question":"A company is developing a new software system for a hospital to manage patient records. Each patient has a unique patient ID and one or more readings taken at different times. Each reading includes a timestamp and a value. Your task is to write a function that, given a list of patient records and a specified patient ID, returns the highest reading value for that patient. You should handle cases where the specified patient ID does not exist in the records by returning -1. Keep in mind that timestamps and values for the readings are guaranteed to be integers. Constraints * 1 ≤ number of patients ≤ 10^5 * 1 ≤ number of readings per patient ≤ 10^3 * 1 ≤ value of each reading ≤ 10^6 * Each patient record contains at least one reading. Input Input will be given in the following format: * The first line contains an integer `P` indicating the number of patients. * The next `P` lines each contain the unique patient ID followed by the number of readings `R` for that patient. * The following `R` lines contain each reading for the patient in the format `timestamp value`. * The last line contains the specified patient ID whose highest reading value you need to find. Output Output the highest reading value of the specified patient, or -1 if the patient ID does not exist. Example Input 3 1234 2 1609459200 98 1609545600 102 5678 3 1609459200 136 1609545600 138 1609632000 135 91011 1 1609459200 99 1234 Output 102 Input 2 123 1 1609459200 200 456 3 1609459200 156 1609545600 158 1609632000 157 789 Output -1","solution":"def highest_reading(records, search_id): Returns the highest reading value for the specified patient ID, or -1 if the patient ID does not exist. records: List of records, where each record is a tuple of patient_id and list of readings search_id: Patient ID to search for the highest reading value. patient_data = {record[0]: record[1] for record in records} if search_id not in patient_data: return -1 readings = patient_data[search_id] highest_value = max(reading[1] for reading in readings) return highest_value def parse_input(input_data): lines = input_data.strip().split(\'n\') P = int(lines[0]) records = [] idx = 1 for _ in range(P): patient_record = lines[idx].split() patient_id = int(patient_record[0]) R = int(patient_record[1]) readings = [] for j in range(R): reading = lines[idx + 1 + j].split() timestamp = int(reading[0]) value = int(reading[1]) readings.append((timestamp, value)) records.append((patient_id, readings)) idx = idx + 1 + R search_id = int(lines[-1]) return records, search_id"},{"question":"You are given a list of products and their prices from different sellers. Each product is identified by a unique name and each seller provides a unique price for the product. Your task is to decide for each product which seller to buy from, such that the overall cost of all products is minimized. Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of different products. - The second line contains a list of n space-separated strings p1, p2, ..., pn where each string pi (1 ≤ |pi| ≤ 20) represents the name of a product. - The third line contains an integer m (1 ≤ m ≤ 10^5) — the number of offers from sellers. - The next m lines each contain a string qj (1 ≤ |qj| ≤ 20) and an integer rj (1 ≤ rj ≤ 10^6), where qj is the name of the product and rj is the price offered by the seller. Output - Output a single number — the minimum total cost of purchasing one unit of each product. Example Input 3 apple banana orange 5 apple 50 banana 30 orange 20 apple 40 orange 25 Output 90","solution":"def min_total_cost(n, product_names, m, offers): Determines the minimum total cost of purchasing one unit of each product. Parameters: - n (int): Number of different products. - product_names (list of str): List of product names. - m (int): Number of offers from sellers. - offers (list of tuple of (str, int)): List of offers as (product_name, price). Returns: - int: Minimum total cost to purchase one unit of each product. # Dictionary to store the minimum price of each product min_prices = {product: float(\'inf\') for product in product_names} # Update the minimum price for each product based on the offers for product, price in offers: if product in min_prices: min_prices[product] = min(min_prices[product], price) # Calculate the total cost by summing the minimum prices of all products total_cost = sum(min_prices[product] for product in product_names) return total_cost"},{"question":"Ariana loves to play rearrangement puzzles. In her latest puzzle, she has a string consisting of lowercase English letters. Her goal is to rearrange the characters of the string such that no two adjacent characters are the same. If it is possible to achieve such an arrangement, return any valid rearrangement. If it is not possible, return an empty string. For example, for the string `\\"aab\\"`, a valid rearrangement would be `\\"aba\\"`. If the string was `\\"aaab\\"`, it would not be possible to make such a rearrangement, so the output would be an empty string. -----Input----- The input consists of a single test case. The first line contains an integer t (1 le t le 1000) — the number of test cases. Next t lines contain test cases — one string per test case. Each string s (1 le |s| le 10^5) consists of only lowercase English letters. The sum of the lengths of all the strings in the input will not exceed 10^6. -----Output----- For each test case, print the rearranged string if it is possible to rearrange it such that no two adjacent characters are the same. Otherwise, print an empty string. -----Example----- Input 5 aab aaab abcdef aabbcc ccc Output aba abcdef abcabc cc -----Note----- In the first test case, \\"aba\\" is a valid rearrangement since no two adjacent characters are the same. In the second test case, it\'s impossible to rearrange \\"aaab\\" without having two adjacent \'a\'s, so the output is an empty string. In the third test case, \\"abcdef\\" is already in such an arrangement. In the fourth test case, one possible arrangement is \\"abcabc\\". In the fifth test case, \\"ccc\\" cannot be rearranged to meet the condition, so the output is an empty string.","solution":"import heapq from collections import Counter def rearrange_string(s): freq = Counter(s) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count = 0 prev_char = \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count = count + 1 # decrement count prev_char = char if len(result) == len(s): return \'\'.join(result) else: return \'\' def solve(tc, strings): results = [] for s in strings: results.append(rearrange_string(s)) return results"},{"question":"Write a function `countValidStrings` that takes a list of strings and returns the count of valid strings. A valid string is defined as one that matches the following criteria: 1. The string must begin with an uppercase letter (A-Z). 2. Every subsequent character must be a lowercase letter (a-z). 3. A hyphenated string is considered valid if each segment separated by hyphens follows the above two rules. Additionally: - Segments in hyphenated strings are separated by exactly one hyphen (-). - The list will not contain empty strings, but it may contain strings with multiple hyphens. - The function should be named `countValidStrings`. For example: ```python def countValidStrings(strings): # Your code here # Example usage: strings = [\\"Marie\\", \\"Jean-Paul\\", \\"Anne-Marie\\", \\"jean\\", \\"Paul-anne\\", \\"Alice-Bob-Charles\\"] print(countValidStrings(strings)) # Output: 4 ``` In this example, \\"Marie\\", \\"Jean-Paul\\", \\"Anne-Marie\\", and \\"Alice-Bob-Charles\\" are valid strings according to the rules, so the function returns 4. \\"jean\\" and \\"Paul-anne\\" are not valid.","solution":"def countValidStrings(strings): Count the number of valid strings in the list according to the specified rules. Args: strings (list of str): A list of strings to be checked. Returns: int: The count of valid strings. def isValidSegment(segment): # A segment is valid if it starts with an uppercase letter and all subsequent characters are lowercase letters. return segment and segment[0].isupper() and segment[1:].islower() def isValidString(string): # A string is valid if all its segments separated by hyphens are valid. segments = string.split(\'-\') return all(isValidSegment(segment) for segment in segments) return sum(1 for string in strings if isValidString(string))"},{"question":"The kingdom of Marandia is divided into triangular regions. The king wishes to calculate the total internal angles of each region in his kingdom. Each region is defined by a list of its vertex coordinates in a 2D plane. Write a function that takes a list of vertex coordinates for each triangular region and returns the sum of the internal angles for each triangle. Remember that the internal angles of a triangle always sum up to 180 degrees. -----Input----- - The first line contains a single integer t (1 leq t leq 100) — the number of triangular regions. - Each of the next t sets of lines contains three pairs of integers x_1 y_1, x_2 y_2, and x_3 y_3 — the coordinates of the vertices of the triangle. The coordinates are in the range of -10^3 leq x, y leq 10^3. -----Output----- For each triangular region, print the integer 180 each in a new line, since the sum of internal angles of a triangle is always 180 degrees. -----Examples----- Input: 3 1 1 2 3 4 5 -1 -1 -2 -3 -4 -5 0 1 1 0 -1 0 Output: 180 180 180 -----Note----- In the first example, for each of the three triangles, regardless of their coordinates, the sum of the internal angles is always 180 degrees. Hence, the output for each test case is 180.","solution":"def calculate_internal_angles(triangles): Given a list of tuples representing the vertices of triangles, returns the list with the sum of internal angles for each triangle. return [180] * len(triangles) # Parsing function def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) triangles = [] for i in range(1, len(lines), 3): triangle = [] for j in range(i, i + 3): x, y = map(int, lines[j].split()) triangle.append((x, y)) triangles.append(triangle) return triangles"},{"question":"Given an array of integers nums representing the triangles\' side lengths, determine if you can form a non-degenerate triangle using any three of the integers. A non-degenerate triangle is a triangle where the sum of the lengths of any two sides must be greater than the length of the remaining side. Return true if at least one set of three side lengths can form such a triangle, otherwise return false. Example 1: Input: nums = [2, 1, 2] Output: true Explanation: The sides [2, 1, 2] form a non-degenerate triangle as 2 + 1 > 2, 2 + 2 > 1, and 1 + 2 > 2. Example 2: Input: nums = [1, 2, 3] Output: false Explanation: The sides [1, 2, 3] do not form a non-degenerate triangle as 1 + 2 is not greater than 3. Example 3: Input: nums = [3, 4, 5, 6] Output: true Explanation: The sides [3, 4, 5] form a non-degenerate triangle as 3 + 4 > 5, 3 + 5 > 4, and 4 + 5 > 3. Your Task: You don\'t need to read input or print anything. Complete the function canFormTriangle() which takes an array nums as input and returns a boolean value. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 3 ≤ nums.length ≤ 10^3 1 ≤ nums[i] ≤ 10^3","solution":"def canFormTriangle(nums): Determine if any three side lengths from the list can form a non-degenerate triangle. Args: nums (List[int]): List of integers representing side lengths. Returns: bool: True if at least one set of three side lengths can form a triangle, otherwise False. nums.sort() n = len(nums) for i in range(n - 2): if nums[i] + nums[i + 1] > nums[i + 2]: return True return False"},{"question":"Given an integer n, define the sequence A where the i-th element A[i] is given by: - A[0] = 1 - A[1] = 2 - For i ge 2, A[i] = A[i-1] + 2 cdot A[i-2] Your task is to find the n-th element of the sequence A. -----Input----- The input consists of a single line, containing an integer n (0 le n < 10^6). -----Output----- Print a single integer — the value of A[n], modulo 10^9 + 7. -----Examples----- Sample Input: 3 Sample Output: 8","solution":"MOD = 10**9 + 7 def find_nth_element(n): Returns the n-th element of the sequence A, modulo 10^9 + 7. if n == 0: return 1 elif n == 1: return 2 a0, a1 = 1, 2 for i in range(2, n + 1): a0, a1 = a1, (a1 + 2 * a0) % MOD return a1"},{"question":"Given an integer n (1 ≤ n ≤ 300), determine the lexicographically smallest palindrome that can be formed using exactly n characters. Allowed characters are the lowercase English letters (\'a\' - \'z\'). A string is lexicographically smaller than another string if in the first position where they differ the string that has a letter that appears earlier in the alphabet comes first. For example, \\"aabc\\" is smaller than \\"abac\\" because \'a\' is smaller than \'b\' in the second position. Input The input consists of a single line containing one integer n. Output Output a single line containing the lexicographically smallest palindrome that can be formed using exactly n characters. Examples Input 5 Output aaaaxaaaa Input 8 Output aaaaaaa Input 1 Output a Note In the first example, a valid palindrome is \\"aaaaxaaaa\\" As we can remove the ‘x’ from center and rearrange to get a palindrome. Another valid yet equally good example could be \\"aaaxaaxaaa.\\" In the second example, \\"aaaaaaaa\\" is the lexicographically smallest palindrome. In the third example, the only possible palindrome with one character is \\"a\\".","solution":"def smallest_palindrome(n): Returns the lexicographically smallest palindrome that can be formed using exactly n characters. if n == 1: return \'a\' half = (n + 1) // 2 return \'a\' * half + \'a\' * (n - half)"},{"question":"In a programming contest, there are `n` participants. Each participant receives a distinct score in the contest. You are given the scores of all the participants. A participant is considered a \\"local champion\\" if their score is strictly greater than both the previous and the following scores. The first and last participants cannot be local champions because they have only one adjacent participant. Your task is to determine the number of local champions in the contest. Input The first line contains an integer `n` (3 ≤ n ≤ 100) — the number of participants. The second line contains `n` distinct integers separated by spaces, representing the scores of the participants in the order they received them. Each score is an integer within the range [1, 100]. Output Print the number of local champions in the contest. Examples Input 5 1 3 5 4 2 Output 1 Input 6 10 20 15 25 30 28 Output 2","solution":"def count_local_champions(n, scores): Returns the number of local champions in the given list of scores. :param n: An integer representing the number of participants :param scores: A list of integers representing the scores of the participants :return: An integer representing the number of local champions local_champions_count = 0 for i in range(1, n - 1): if scores[i] > scores[i - 1] and scores[i] > scores[i + 1]: local_champions_count += 1 return local_champions_count"},{"question":"You are developing a new spelling correction tool that suggests words by appending a set of known suffixes to the existing word stem. For example, given the word stem \\"run\\" and suffixes \\"ning\\", \\"ner\\", \\"s\\", and \\"ningly\\", your tool should produce the words \\"running\\", \\"runner\\", \\"runs\\", and \\"runningly\\". Write a function that generates all possible words by appending each suffix from a given list to a given word stem. -----Input----- - The first line of input contains one string w, the word stem, consisting of lowercase letters, of length at least 1 and at most 100. - The second line contains an integer n which indicates the number of suffixes (1 ≤ n ≤ 10). - Each of the following n lines contains one suffix, consisting of lowercase letters, of length at least 1 and at most 10. -----Output----- Output n lines, each containing one of the generated words by appending each suffix to the word stem in the order they were given. -----Examples----- **Sample Input 1:** run 4 ning ner s ningly **Sample Output 1:** running runner runs runningly **Sample Input 2:** play 2 ing ed **Sample Output 2:** playing played","solution":"def generate_words(word_stem, suffixes): Generates all possible words by appending each suffix from a given list to a given word stem. Parameters: word_stem (str): The word stem to which suffixes are to be appended. suffixes (list): List of suffixes to be appended to the word stem. Returns: list: A list of generated words by appending each suffix to the word stem. return [word_stem + suffix for suffix in suffixes]"},{"question":"You are tasked with finding a specific number among a list of numbers using a limited number of queries. The problem is as follows: We have hidden a number `x` within a list of numbers `a_1, a_2, ..., a_n`. You can try to guess it using at most `k` queries of the form: ? a t In response to the query, you will receive: - 1 if `a_t = x` - 0 if `a_t != x` You must guess the number `x`. You must output your guess as: ! x There is the requirement for the solution to terminate in less than `k` queries, and the interactor will not adapt based on your previous guesses. Input The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ 10^5) — the size of the list and the maximum number of queries allowed. The second line contains `n` integers `a_1, a_2, ..., a_n` — the list of numbers which may contain duplicates. Interaction You begin the interaction by reading `n` and `k`. To ask a question about the element at position `t`, you should write: ? t Numbers in the query have to satisfy 1 ≤ t ≤ n. Don\'t forget to \'flush\', to get the answer. In response, you will receive 1 if `a_t = x` else 0. When you have determined the number `x`, output: ! x After printing a query do not forget to output end of line and flush the output. Otherwise, you will get `Idleness limit exceeded`. Example Input 5 3 4 2 7 5 3 Output ? 3 0 ? 4 1 ! 5 Explanation In this example, you can guess the number `x` using up to 3 queries. The number `x` is determined to be `5` after querying indices 3 and 4. Note that after guessing the number, you should print your guess. Ensure that your outputs follow the correct format to avoid unnecessary verdicts.","solution":"def find_hidden_number(n, k, numbers, queries_responses): This function finds the hidden number in the list using a limited number of queries. Parameters: n (int): The size of the list k (int): The maximum number of queries allowed numbers (list of int): The list of numbers queries_responses (dict): A dictionary containing the response for each query index Returns: int: The hidden number for index in range(1, n+1): response = queries_responses.get(index, 0) if response == 1: return numbers[index-1] return None"},{"question":"In a small town, there is a single route consisting of n house segments connected by bidirectional roads. Each segment is represented by an integer value, indicating the number of houses in that segment. Since the route is a loop, feel free to start the counting from any segment and continue counting along the route until you return to the starting segment. The town\'s mayor has asked you to find the maximum number of consecutive house segments that contain a prime number of houses. Input The first line contains an integer n (2 ≤ n ≤ 100) — the number of house segments in the loop. The second line contains n integers, s_1, s_2, ..., s_n (1 ≤ s_i ≤ 1000) — the number of houses in each segment. Output Print an integer — the maximum number of consecutive house segments that contain a prime number of houses. Examples Input 5 7 4 6 5 13 Output 2 Input 3 2 3 5 Output 3 Input 4 8 10 4 6 Output 0 Note In the first example, the segments with a prime number of houses are 7, 5, and 13. The possible consecutive segments with prime houses are [7] or [5, 13]. The maximum consecutive prime segments are two, thus the answer is 2. In the second example, all houses in the segments contain prime numbers, so the answer is 3. In the third example, none of the segments have prime numbers, so the answer is 0.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def max_consecutive_primes(n, segments): primes = [is_prime(seg) for seg in segments] max_count = 0 count = 0 for _ in range(n): if primes[_]: count += 1 if count > max_count: max_count = count else: count = 0 return max_count"},{"question":"Write a function `evaluate_expression(expression)` that evaluates a mathematical expression given as a string and returns the result. The function should handle addition, subtraction, multiplication, and division operations, and respect the order of operations (PEMDAS). The input expression may contain spaces, which should be ignored. Input - A single string `expression` representing a mathematical expression. The string can contain any combination of digits, \'+\', \'-\', \'*\', \'/\', and parentheses \'(\' and \')\'. It may also contain spaces. Output - A float or integer representing the result of evaluating the given expression. Examples ```python evaluate_expression(\\"3 + 2 * 2\\") # returns 7 evaluate_expression(\\" 10 + 2 * 6 \\") # returns 22 evaluate_expression(\\"100 * 2 + 12\\") # returns 212 evaluate_expression(\\"100 * ( 2 + 12 )\\") # returns 1400 evaluate_expression(\\"100 * ( 2 + 12 ) / 14\\") # returns 100.0 ``` Constraints 1. The `expression` will be a valid mathematical expression. 2. The evaluation should follow the standard order of operations: parentheses first, then multiplication and division (from left to right), and finally addition and subtraction (from left to right). 3. The function should handle division by zero gracefully. If a division by zero is encountered, the function should raise a `ZeroDivisionError`.","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression and returns the result. The expression is given as a string which may contain spaces. try: result = eval(expression) return result except ZeroDivisionError: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") except Exception as e: raise ValueError(f\\"Invalid expression: {expression}. Error: {e}\\")"},{"question":"A magic square of size n is a n x n grid filled with distinct integers from 1 to n^2 such that the sums of the integers in each row, each column, and the two main diagonals are all the same. Given an integer n (an odd number), find a magic square of size n. -----Input----- The first line contains an odd integer n (1 ≤ n ≤ 49) — the size of the magic square. -----Output----- Print n lines, each with n integers, representing the magic square. The integers should be distinct and range from 1 to n^2. If there are multiple solutions, you can print any of them. -----Examples----- Input 3 Output 2 7 6 9 5 1 4 3 8 Input 5 Output 17 24 1 8 15 23 5 7 14 16 4 6 13 20 22 10 12 19 21 3 11 18 25 2 9","solution":"def generate_magic_square(n): Generates a magic square of size n (where n is an odd number). magic_square = [[0] * n for _ in range(n)] number = 1 i, j = 0, n // 2 while number <= n * n: magic_square[i][j] = number number += 1 newi, newj = (i - 1) % n, (j + 1) % n if magic_square[newi][newj]: i += 1 else: i, j = newi, newj return magic_square def print_magic_square(magic_square): for row in magic_square: print(\' \'.join(map(str, row)))"},{"question":"Write a function that takes a string as input and returns all possible permutations of the characters in the string. Example: Input: \\"abc\\" Output: [ \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\" ]","solution":"from itertools import permutations def get_permutations(s): Returns all possible permutations of the characters in the input string. return [\'\'.join(p) for p in permutations(s)]"},{"question":"Vinh\'s pet turtle loves playing with a sequence of numbers. One day, Vinh finds a sequence of N integers and assigns the turtle a task: compute the length of the longest contiguous subarray in which the difference between the maximum and minimum element does not exceed a given integer K. Help Vinh\'s turtle accomplish this task. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains two integers N and K, the length of the sequence and the allowed difference. - The second line contains N space-separated integers representing the sequence. ------ Output Format ------ For each test case, print a single integer - the length of the longest contiguous subarray where the difference between the maximum and minimum elements is not greater than K. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ K ≤ 10^9 0 ≤ Array elements ≤ 10^9 - The sum of N over all test cases does not exceed 10^5 ------ Sample Input 1 ------ 2 5 3 1 3 6 7 5 4 2 10 12 14 11 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ Test case 1: The longest contiguous subarray where the difference between max and min elements is ≤ 3 is [6, 7, 5] with length 3. Test case 2: The longest contiguous subarray where the difference between max and min elements is ≤ 2 is [10, 12] or [12, 14] or [14, 11], each with length 2.","solution":"def longest_subarray_length(N, K, array): Returns the length of longest contiguous subarray where the difference between the maximum and minimum elements does not exceed K. :param N: Length of the array :param K: Allowed maximum difference between max and min elements :param array: List of integers representing the sequence :return: Length of the longest contiguous subarray from collections import deque start = 0 max_len = 0 min_deque = deque() # to store min elements indices max_deque = deque() # to store max elements indices for end in range(N): while min_deque and array[min_deque[-1]] >= array[end]: min_deque.pop() while max_deque and array[max_deque[-1]] <= array[end]: max_deque.pop() min_deque.append(end) max_deque.append(end) while array[max_deque[0]] - array[min_deque[0]] > K: start += 1 if min_deque[0] < start: min_deque.popleft() if max_deque[0] < start: max_deque.popleft() max_len = max(max_len, end - start + 1) return max_len def solve_task(T, test_cases): results = [] for case in test_cases: N, K, array = case results.append(longest_subarray_length(N, K, array)) return results"},{"question":"A renowned scientist is working on a new encryption technique. As part of his research, he needs to manipulate strings in various ways. One specific task he requires assistance with is to find the longest substring which contains at most K distinct characters. Given a string and an integer K, help the scientist by writing a program that finds the length of the longest substring containing exactly K distinct characters. If there are multiple substrings with the same length, return the one that appears first. Input: The first line of input contains an integer Q, denoting the number of queries. For each query, the first line contains an integer K, followed by a string S on the next line. Output: For each query, print the longest substring with exactly K distinct characters. If no such substring is found, print an empty string. Constraints: 1 ≤ Q ≤ 100 1 ≤ K ≤ 26 1 ≤ |S| ≤ 10^5 S consists of lowercase English letters only. SAMPLE INPUT 2 2 abcba 3 aabacbebebe SAMPLE OUTPUT bcb cbebebe","solution":"def longest_substring_with_k_distinct_characters(K, S): from collections import defaultdict n = len(S) if n == 0 or K == 0: return \\"\\" left = 0 right = 0 max_len = 0 max_substring = \\"\\" char_map = defaultdict(int) unique_count = 0 while right < n: if char_map[S[right]] == 0: unique_count += 1 char_map[S[right]] += 1 right += 1 while unique_count > K: char_map[S[left]] -= 1 if char_map[S[left]] == 0: unique_count -= 1 left += 1 if unique_count == K: if right - left > max_len: max_len = right - left max_substring = S[left:right] return max_substring def process_queries(queries): results = [] for K, S in queries: result = longest_substring_with_k_distinct_characters(K, S) results.append(result) return results"},{"question":"A robot is stuck in a room that is modeled as a grid of dimensions MxN. The robot can start at any cell in the grid. Each cell in the grid is either blocked or open. The robot can move to any of the eight possible directions (up, down, left, right, and the four diagonals) but cannot move into or through blocked cells. The objective is to determine if the robot can reach any edge of the grid from its starting position. Write a function to determine if the robot can reach any edge of the grid from the given starting position. Constraints: * 1 <= M, N <= 1000 * Each cell is either blocked (represented by 1) or open (represented by 0) * The starting cell is guaranteed to be open. Input Input will be given from Standard Input in the following format: ``` M N grid start_x start_y ``` where `M` and `N` are dimensions of the grid, `grid` is a MxN matrix representing the grid cells (0 for open and 1 for blocked), and `start_x` and `start_y` are the coordinates of the starting cell (0-indexed). Output Print `\\"yes\\"` if the robot can reach any edge of the grid from the starting position, otherwise print `\\"no\\"`. Examples Input ``` 5 4 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 1 0 1 1 ``` Output yes Input ``` 3 3 1 1 1 1 0 1 1 1 1 1 1 ``` Output no","solution":"def can_reach_edge(M, N, grid, start_x, start_y): Determines if the robot can reach any edge of the grid from the starting position. from collections import deque # Directions for moving in 8 possible directions (up, down, left, right, and 4 diagonals) directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] # Check if we are starting on an edge if start_x == 0 or start_x == M-1 or start_y == 0 or start_y == N-1: return \\"yes\\" # Initialize the queue for BFS queue = deque([(start_x, start_y)]) # A set to track visited cells visited = {(start_x, start_y)} while queue: x, y = queue.popleft() # Check all 8 possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == 0: # If we reach any edge cell if nx == 0 or nx == M-1 or ny == 0 or ny == N-1: return \\"yes\\" visited.add((nx, ny)) queue.append((nx, ny)) return \\"no\\" # Note: The function expects to be called like this: # result = can_reach_edge(M, N, grid, start_x, start_y) # print(result)"},{"question":"You are given an array A of N integers. Each integer in the array represents the number of candies in a respective jar. Every day, you can select a continuous subarray and distribute all the candies from that subarray equally among all jars. If you manage to distribute exactly an equal number of candies to each jar, then those candies are removed from the jars. Your goal is to minimize the total number of remaining candies in all jars after performing the distribution as many times as possible. Write a function that given the array A returns the minimum possible total number of candies left in the jars. ---- Input ---- The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains: - The first line contains an integer N denoting the number of jars. - The second line contains N space-separated integers denoting the number of candies in each jar. ---- Output ---- For each test case, output one integer - the minimum possible total number of candies left in the jars. ---- Constraints ---- 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 0 ≤ A[i] ≤ 1000 ---- Sample Input 1 ---- 2 4 1 2 3 4 3 10 10 10 ---- Sample Output 1 ---- 0 0 ---- Explanation 1 ---- In the first example, you can select the whole array (1, 2, 3, 4) and distribute them equally so that no candies are left. In doing so: Total = left( sum (1, 2, 3, 4) right) div 4 = 10 div 4 = 2 text{ each} Rightarrow text{left: 0}. In the second example, you can select any continuous subarray since all elements are already equal: Total = left( sum (10, 10, 10) right) div 3 = 30 div 3 = 10 text{ each} Rightarrow text{left: 0}.","solution":"from math import gcd from functools import reduce def min_candies_remaining(n, candies): Returns the minimum possible total number of candies left in the jars. # Calculate the greatest common divisor (gcd) of all the candies overall_gcd = reduce(gcd, candies) # If overall GCD is 1, we can reduce all candies to zero if overall_gcd == 1: return 0 else: total_candies = sum(candies) return total_candies % overall_gcd def process_test_cases(t, test_cases): results = [] for i in range(t): n, candies = test_cases[i] results.append(min_candies_remaining(n, candies)) return results"},{"question":"In a magical forest, there are different types of plants. Each plant can be represented by a unique character, and the forest can be represented by a string consisting of these characters. A special type of gardener has been given the task to maintain the garden in such a way that no two identical plants are next to each other. Given a string that represents the initial arrangement of the plants in the forest, write a function to rearrange the plants such that no two identical plants are next to each other if possible. If it is not possible, return an empty string. **Note:** - The input will always be a valid string consisting of only lowercase English letters. - If there are multiple valid arrangements, you can return any one of them. **Examples:** #1: ``` \\"aaabb\\" --> \\"ababa\\" ``` a possible arrangement is \\"ababa\\". #2: ``` \\"aaab\\" --> \\"\\" ``` since it is not possible to rearrange \\"aaab\\" such that no two \'a\' characters are adjacent.","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_plants(s): if len(s) <= 1: return s # Frequency counter for each character counter = Counter(s) # Priority queue (max-heap) for storing characters by frequency max_heap = [] for char, freq in counter.items(): heappush(max_heap, (-freq, char)) res = [] while len(max_heap) > 1: # Pop the two most frequent characters first_freq, first_char = heappop(max_heap) second_freq, second_char = heappop(max_heap) # Append these characters to the result res.extend([first_char, second_char]) # Decrease their frequencies and push them back into the heap if they have remaining counts if -first_freq > 1: heappush(max_heap, (first_freq + 1, first_char)) if -second_freq > 1: heappush(max_heap, (second_freq + 1, second_char)) # Check if one character is left in the heap if max_heap: last_freq, last_char = heappop(max_heap) if -last_freq > 1: return \\"\\" # Not possible to rearrange if any character count left > 1 res.append(last_char) return \'\'.join(res)"},{"question":"Marco is participating in a running event where the distance between each checkpoint is measured in terms of the Manhattan Distance. The Manhattan Distance between two points (X1, Y1) and (X2, Y2) is defined as |X2 - X1| + |Y2 - Y1|. Given the coordinates of Marco\'s starting point and his destination, your task is to calculate the Manhattan Distance between these two points. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each of the next T lines contains four space-separated integers X1, Y1, X2, and Y2 — the coordinates of the starting point and the destination. ------ Output Format ------ For each test case, output on a new line the Manhattan Distance between the starting point and the destination. ------ Constraints ------ 1 ≤ T ≤ 2000 -1000 ≤ X1, Y1, X2, Y2 ≤ 1000 ------ Sample Input 1 ------ 3 1 2 3 4 -1 -1 1 1 0 0 -10 10 ------ Sample Output 1 ------ 4 4 20 ------ Explanation 1 ------ Test case 1: The Manhattan Distance between (1, 2) and (3, 4) is |3-1| + |4-2| = 2 + 2 = 4. Test case 2: The Manhattan Distance between (-1, -1) and (1, 1) is |1-(-1)| + |1-(-1)| = 2 + 2 = 4. Test case 3: The Manhattan Distance between (0, 0) and (-10, 10) is |-10-0| + |10-0| = 10 + 10 = 20.","solution":"def manhattan_distance(T, coordinates): Calculates the Manhattan Distance for T test cases Args: T : int : number of test cases coordinates : list : list of tuple each containing four integers X1, Y1, X2, Y2 Returns: list : list of integers each representing the Manhattan Distance for the corresponding test case distances = [] for i in range(T): X1, Y1, X2, Y2 = coordinates[i] distance = abs(X2 - X1) + abs(Y2 - Y1) distances.append(distance) return distances"},{"question":"Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Chef has retired and decided to spend his time with his favorite hobby, gardening. He is particularly interested in arranging flowers in a straight line along his garden path. Each flower has a specific height, and Chef wants the heights of the flowers to be in non-decreasing order. Chef has a set of n flowers, each with a unique height. He can change the height of any flower to any positive integer that has not been used as the height of any other flower. Chef wants to know the minimum number of changes needed to arrange the flowers in non-decreasing order by modifying the heights as described above. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains an integer n, the number of flowers. The next line contains n space-separated integers denoting the heights of the flowers. ------ Output ------ For each test case, output a single integer corresponding to the minimum number of changes required to make the heights of the flowers in non-decreasing order. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 100 1 ≤ height of each flower ≤ 1000 ------ Subtasks ------ Subtask #1: (30 points) 1 ≤ n ≤ 10 Subtask #2: (70 points) Original Constraints ----- Sample Input 1 ------ 2 4 3 1 4 2 5 1 2 3 4 5 ----- Sample Output 1 ------ 2 0 ----- Explanation 1 ------ In the first case, one possible way to achieve non-decreasing order with minimum changes is to change heights 3 and 4 to 1 and 2 respectively, resulting in [1, 1, 2, 2]. Only 2 changes are needed. In the second case, the heights are already in non-decreasing order, so no changes are needed.","solution":"def min_changes_to_non_decreasing(n, heights): Returns the minimum number of changes required to make the flower heights non-decreasing. # Create a list of tuples (height, original_position) indexed_heights = list(enumerate(heights)) # Sort based on heights indexed_heights.sort(key=lambda x: x[1]) # Identify the longest increasing subsequence (LIS) lis = [1] * n for i in range(1, n): for j in range(i): if indexed_heights[j][0] < indexed_heights[i][0] and indexed_heights[j][1] <= indexed_heights[i][1]: lis[i] = max(lis[i], lis[j] + 1) # The minimum number of changes required return n - max(lis) def solve(test_cases): results = [] for test in test_cases: n, heights = test results.append(min_changes_to_non_decreasing(n, heights)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) index += 1 heights = list(map(int, lines[index].split())) index += 1 test_cases.append((n, heights)) return test_cases"},{"question":"Create a function that accepts a list of strings and returns a new list containing only the strings that are palindromes. A palindrome is a word that reads the same backward as forward. Example: ```python filter_palindromes([\\"radar\\", \\"apple\\", \\"level\\", \\"world\\", \\"civic\\"]) # should return [\\"radar\\", \\"level\\", \\"civic\\"] ``` Notice that the function should maintain the order of the original list and include only those strings that are palindromes.","solution":"def filter_palindromes(strings): Returns a list containing only the palindromes from the provided list of strings. Args: strings (list): List of strings to be filtered. Returns: list: List containing palindromes. return [s for s in strings if s == s[::-1]]"},{"question":"Design a MinStack that supports the following operations: push, pop, top, and retrieving the minimum element in constant time. Example 1: Input: push(-2) push(0) push(-3) getMin() pop() top() getMin() Output: -3 0 -2 Explanation: push(-2) the stack will be {-2} push(0) the stack will be {0, -2} push(-3) the stack will be {-3, 0, -2} getMin() the minimum element is -3 pop() the stack will be {0, -2} top() the top element is 0 getMin() the minimum element is -2 Your Task: You need to implement the class MinStack which includes methods push(), pop(), top() and getMin(). The push() method takes an integer \'x\' as input representing the element to be pushed onto the stack, pop() removes the element from the top of the stack, top() returns the top element, and getMin() retrieves the minimum element in the stack. Expected Time Complexity: O(1) for all operations Expected Auxiliary Space: O(n) for the stack to store the elements and the minimum values Constraints: 1 <= Number of queries <= 1000 -10^5 <= values <= 10^5","solution":"class MinStack: def __init__(self): Initialize your data structure here. self.stack = [] self.min_stack = [] def push(self, x: int) -> None: Push element x onto the stack. self.stack.append(x) # If the min stack is empty or the new element is smaller or equal to the current min, push it onto the min stack. if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -> None: Removes the element on the top of the stack. if self.stack: if self.stack[-1] == self.min_stack[-1]: self.min_stack.pop() self.stack.pop() def top(self) -> int: Get the top element. if self.stack: return self.stack[-1] return -1 # In case the stack is empty def getMin(self) -> int: Retrieve the minimum element in the stack. if self.min_stack: return self.min_stack[-1] return -1 # In case the min stack is empty"},{"question":"A software engineer is working on a chatbot that can answer programming-related questions. To ensure the chatbot doesn’t give out wrong or misleading information, the engineer must verify the correctness of its responses. One particular area of interest is whether the chatbot correctly identifies if a user’s code snippet is syntactically valid Python code. Your task is to write a function that determines if a given string is a syntactically valid Python expression or not. To accomplish this, you may use Python’s `ast` module, which allows you to parse Python source code into its Abstract Syntax Tree (AST) and identify any errors in the process. -----Input----- The input consists of a single string that represents a Python expression. The string may include newline characters and can be empty. The length of the string will not exceed 1000 characters. -----Output----- Output a single string \\"Valid\\" if the code is syntactically valid, and \\"Invalid\\" otherwise. -----Examples----- Sample Input: print(\\"Hello, World!\\") Sample Output: Valid Sample Input: for x in range(10 Sample Output: Invalid Sample Input: \'\'\' def greet(name): return f\'Hello, {name}!\' greet(\'Alice\') \'\'\' Sample Output: Valid","solution":"import ast def check_syntax(code): Determines if a given string is a syntactically valid Python expression or not. Parameters: code (str): The input string representing a Python expression. Returns: str: \\"Valid\\" if the code is syntactically valid, and \\"Invalid\\" otherwise. try: ast.parse(code) return \\"Valid\\" except SyntaxError: return \\"Invalid\\""},{"question":"Given a list of integers, write a method (function) that returns the list where each integer is replaced by the product of every other number in the list except the current integer. You should solve this problem without using division and ensure the solution has a time complexity better than O(n^2). For example: ``` Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [2, 5, 7] Output: [35, 14, 10] ```","solution":"def product_except_self(nums): n = len(nums) if n == 0: return [] # Initialize the left and right product arrays left = [0] * n right = [0] * n result = [0] * n # Left product array left[0] = 1 for i in range(1, n): left[i] = left[i - 1] * nums[i - 1] # Right product array right[n - 1] = 1 for i in range(n - 2, -1, -1): right[i] = right[i + 1] * nums[i + 1] # Generate result from left and right product arrays for i in range(n): result[i] = left[i] * right[i] return result"},{"question":"Given an array of N distinct integers, find a peak element. A peak element is an element that is greater than its neighbors. If the array contains multiple peaks, return the index of any one of them. Example 1: Input: arr = {1, 3, 20, 4, 1, 0} Output: 2 Explanation: 20 is a peak element as it is greater than its neighbors 3 and 4. Example 2: Input: arr = {10, 20, 15, 2, 23, 90, 67} Output: 1 or 5 Explanation: 20 and 90 are peak elements. Either of the index can be returned. Your Task: Complete the function findPeakElement() which takes the array arr and its size N as input parameters and returns the index of any peak element. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 1000 1 ≤ arr[i] ≤ 1000","solution":"def findPeakElement(arr, N): Finds and returns the index of a peak element in the array. A peak element is an element that is greater than its neighbors. if N == 1: return 0 if arr[0] >= arr[1]: return 0 if arr[N-1] >= arr[N-2]: return N-1 low, high = 0, N-1 while low <= high: mid = (low + high) // 2 # Check if mid is a peak if (mid == 0 or arr[mid] >= arr[mid - 1]) and (mid == N-1 or arr[mid] >= arr[mid + 1]): return mid # If the left neighbor is greater, then there must be a peak element on the left side elif mid > 0 and arr[mid - 1] > arr[mid]: high = mid - 1 # If the right neighbor is greater, then there must be a peak element on the right side else: low = mid + 1 return -1"},{"question":"A: Triplet Sum to Zero problem Given an integer array *nums* of length *n*, the task is to find all unique triplets `(a, b, c)` in *nums* such that `a + b + c = 0`. A triplet should not be duplicated in the output. Input format: * The input contains an integer array *nums*. Constraint: * 3 leq n leq 3000 * -10^5 leq nums[i] leq 10^5 Output format: * Print each unique triplet on a new line. Example Input: [ -1, 0, 1, 2, -1, -4 ] Example Output: [-1, -1, 2] [-1, 0, 1] Example Input: [ -1, 0, 1, 2, -1, -4 ] Output: [-1, -1, 2] [-1, 0, 1]","solution":"def triplet_sum_to_zero(nums): Returns a list of all unique triplets (a, b, c) in the array nums such that a + b + c = 0. nums.sort() triplets = set() # Use a set to store triplets to avoid duplicates for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue # Avoid duplicates left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s == 0: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 elif s < 0: left += 1 else: right -= 1 return [list(triplet) for triplet in triplets]"},{"question":"There is a list of strings, and each string represents a numeric value. All strings are equal except for one. Your task is to find the different one and return its numeric value as a float. ```python find_unique_number([\\"123\\", \\"123\\", \\"456\\", \\"123\\", \\"123\\"]) == 456.0 find_unique_number([\\"0.1\\", \\"0.1\\", \\"0.2\\", \\"0.1\\", \\"0.1\\"]) == 0.2 ``` It’s guaranteed that the list contains at least 3 strings. The tests may include very large lists, so consider performance optimization.","solution":"def find_unique_number(numbers): Find the unique numeric string in the list and return its numeric value as a float. from collections import Counter # Counting frequency of each number counter = Counter(numbers) # Finding the unique number (with count = 1) unique_str = next(num for num, count in counter.items() if count == 1) # Returning the numeric value as a float return float(unique_str)"},{"question":"You are given an array of positive integers which represent the heights of buildings in a city. You need to determine the maximum number of buildings that you can visit in sequence, given that from each building you can only visit the next building in the sequence if its height is greater than the current building\'s height. Constraints * 2 leq N leq 10^5 * 1 leq H_i leq 10^9 Input Input is given from Standard Input in the following format: N H1 H2 ... HN Output Print the maximum number of buildings you can visit in sequence. Examples Input 6 1 2 3 2 5 4 Output 3 Input 5 8 2 3 5 7 Output 4","solution":"def max_buildings_visit(heights): Determine the maximum number of buildings that can be visited in sequence, where each subsequent building must be taller than the previous one. Parameters: heights (list of int): List of building heights Returns: int: Maximum number of buildings that can be visited in sequence if not heights: return 0 max_visits = 1 current_visits = 1 for i in range(1, len(heights)): if heights[i] > heights[i - 1]: current_visits += 1 if current_visits > max_visits: max_visits = current_visits else: current_visits = 1 return max_visits # Example usage: # heights = [1, 2, 3, 2, 5, 4] # print(max_buildings_visit(heights)) # Output: 3 # heights = [8, 2, 3, 5, 7] # print(max_buildings_visit(heights)) # Output: 4"},{"question":"You are given a list of strings, `words`, and another string `chars`. A string is considered \'good\' if it can be formed using characters from `chars` (each character can only be used once, but `chars` can contain duplicate characters). Your task is to return the sum of the lengths of all \'good\' strings in `words`. Example 1: Input: `words = [\\"cat\\",\\"bt\\",\\"hat\\",\\"tree\\"], chars = \\"atach\\"` Output: 6 Explanation: The strings that can be formed are \\"cat\\" (length 3) and \\"hat\\" (length 3), so the total length is 6. Example 2: Input: `words = [\\"hello\\",\\"world\\",\\"leetcode\\"], chars = \\"welldonehoneyr\\"` Output: 10 Explanation: The strings that can be formed are \\"hello\\" (length 5) and \\"world\\" (length 5), so the total length is 10. Constraints: - 1 <= words.length <= 1000 - 1 <= words[i].length, chars.length <= 100 - All strings in `words` and `chars` consist of lowercase English letters.","solution":"from collections import Counter def count_good_strings(words, chars): Returns the sum of lengths of all good strings in words that can be formed with the characters from chars. chars_count = Counter(chars) total_length = 0 for word in words: word_count = Counter(word) if all(word_count[c] <= chars_count[c] for c in word_count): total_length += len(word) return total_length"},{"question":"You are given a grid of N x N size where each cell contains a positive integer. You are required to perform the following types of operations on this grid: - Update X Y V: Update the value at cell (X, Y) to V. - Query X1 Y1 X2 Y2: Find the sum of all values in the subgrid defined from (X1, Y1) to (X2, Y2). **-----Input-----** - The first line contains an integer N denoting the size of the grid. - The next N lines contain N space-separated integers each, denoting the initial values in the grid. - The following line contains an integer Q denoting the number of queries. - The next Q lines contain a query of one of the types mentioned above. **-----Output-----** For each query of the type \\"Query X1 Y1 X2 Y2\\", output the computed sum of the subgrid. **-----Constraints-----** - 1 ≤ N ≤ 500 - 1 ≤ Q ≤ 10^5 - 1 ≤ Values in the grid, V ≤ 10^9 - 1 ≤ X, Y ≤ N - 1 ≤ X1 ≤ X2 ≤ N - 1 ≤ Y1 ≤ Y2 ≤ N - Queries can be mixed types (\'Update\', \'Query\'). **-----Example-----** Input: 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 5 Query 1 1 2 2 Update 2 2 100 Query 1 1 2 2 Query 2 2 4 4 Update 1 1 0 Output: 14 108 135 **-----Explanation-----** - In the first Query (1,1) to (2,2) is the top-left 2x2 subgrid whose sum is 1+2+5+6=14. - In the second query, after the update, the cell (2,2) is set to 100. Now the sum of the subgrid (1,1) to (2,2) is 1+2+5+100=108. - In the third query, the sum of the subgrid (2,2) to (4,4) covers the updated value and rest of the cells in that subgrid is 100+7+8+10+11+12+14+15+16=135.","solution":"class Grid: def __init__(self, grid): self.N = len(grid) self.grid = grid def update(self, x, y, v): self.grid[x-1][y-1] = v def query(self, x1, y1, x2, y2): total = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): total += self.grid[i][j] return total def grid_operations(N, initial_grid, operations): grid = Grid(initial_grid) results = [] for op in operations: if op[0] == \\"Update\\": grid.update(op[1], op[2], op[3]) elif op[0] == \\"Query\\": result = grid.query(op[1], op[2], op[3], op[4]) results.append(result) return results"},{"question":"# Task An ancient civilization stored critical information in a special type of matrix. This matrix was used to store rectangular patterns of 1s and 0s. You are tasked to find the size of the largest square containing only 1s in this matrix. Your task is to write a function that takes a binary matrix and returns the area of the largest square sub-matrix containing only 1s. Example For the matrix: ``` [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] ``` The answer should be `4`. Explanation: The largest square containing only 1s has side length of 2. Hence, the area is `2 * 2 = 4`. Input - `[input]` 2D integer array `matrix` 2D array representing the binary matrix. Output - `[output]` an integer The area of the largest square sub-matrix containing only 1s. Note - If no such square exists, return 0.","solution":"def maximalSquare(matrix): Returns the area of the largest square sub-matrix containing only 1s. if not matrix or not matrix[0]: return 0 # Dimensions of the matrix rows, cols = len(matrix), len(matrix[0]) # Initialize a 2D dp array with the same dimensions as matrix dp = [[0] * cols for _ in range(rows)] max_side_length = 0 # Fill dp array for i in range(rows): for j in range(cols): if matrix[i][j] == 1: if i == 0 or j == 0: # First row or first column dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) # The area of the largest square is side_length^2 return max_side_length ** 2"},{"question":"In this problem, you need to develop a function called `collatz_steps(n)` that finds the number of steps required to reduce `n` to 1 using the following algorithm, known as the Collatz conjecture: 1. If `n` is 1, the process stops. 2. If `n` is even, divide it by 2. 3. If `n` is odd, multiply it by 3 and add 1. The function should return the number of steps taken to reach 1. Note that `n` will be a positive integer greater than 0 and less than 2^{31}. # Example: The Collatz sequence for `n = 6` is: - Start with 6 (even): 6 / 2 = 3 - 3 (odd): 3 * 3 + 1 = 10 - 10 (even): 10 / 2 = 5 - 5 (odd): 5 * 3 + 1 = 16 - 16 (even): 16 / 2 = 8 - 8 (even): 8 / 2 = 4 - 4 (even): 4 / 2 = 2 - 2 (even): 2 / 2 = 1 So it takes 8 steps to reach 1 for `n = 6`. Thus, `collatz_steps(6)` should return 8. Function Signature ```python def collatz_steps(n: int) -> int: pass ``` Implement the `collatz_steps` function accordingly to calculate and return the number of steps required.","solution":"def collatz_steps(n: int) -> int: Returns the number of steps required to reduce \'n\' to 1 using the Collatz conjecture. steps = 0 while n != 1: if n % 2 == 0: n //= 2 else: n = 3 * n + 1 steps += 1 return steps"},{"question":"Problem In a country, every citizen is given a unique identification number. The identity numbers are structured as strings of lowercase English alphabets. The government wants to classify these identification numbers based on the frequency of a certain character in them. Given a list of identification numbers and a target character, your task is to count how many times the target character appears across all the identification numbers provided. Constraints The input satisfies the following constraints: * 1 ≤ n ≤ 1000 (number of identification numbers) * Each identification number is a string of lowercase English alphabets with length between 1 to 100 * `char` is the target character and is a single lowercase English alphabet Input The input is given in the following format: ```plaintext n id1 id2 ... idn char ``` - The first line contains an integer `n`. - The next `n` lines each contain a string representing an identification number. - The last line contains the target character `char`. Output Output the total count of the target character across all the identification numbers. Examples Input ```plaintext 3 abcde fghij klmno a ``` Output 1 Input ```plaintext 4 abcdef bbcdef cbbcdef bbcdeff b ``` Output 7","solution":"def count_target_character(n, id_list, target_char): Count the occurrences of target_char in a list of identification numbers. Args: n (int): Number of identification numbers. id_list (List[str]): List of identification numbers. target_char (str): The target character to be counted. Returns: int: Total count of target_char across all identification numbers. count = 0 for id_number in id_list: count += id_number.count(target_char) return count"},{"question":"A library management system keeps track of borrowed books. Each book is identified by a unique ID. The system keeps a log of transactions, where each transaction is either a borrowing or returning event. Your task is to determine how many distinct books are currently borrowed given the transaction log. A transaction log is provided as a sequence of events, where each event is represented as a tuple of (time, book_id, action) and sorted by time. The action can be either \'borrow\' or \'return\'. How many distinct books are currently borrowed after processing all transactions? -----Constraints----- - The number of transactions is between 1 and 1000. - Each book_id is a unique integer between 1 and 10000. - Each book_id will be borrowed at most once before returning. - The log is sorted by time and there will be no two transactions at the same time. -----Input----- Input is given from Standard Input in the following format: M time_1 book_id_1 action_1 time_2 book_id_2 action_2 ... time_M book_id_M action_M -----Output----- Print the number of distinct books that are currently borrowed. -----Sample Input----- 6 1 101 borrow 2 102 borrow 3 101 return 4 103 borrow 5 104 borrow 6 104 return -----Sample Output----- 2 After processing all transactions, books with ID 102 and 103 are currently borrowed.","solution":"def count_borrowed_books(transaction_log): borrowed_books = set() for _, book_id, action in transaction_log: if action == \'borrow\': borrowed_books.add(book_id) elif action == \'return\': borrowed_books.discard(book_id) return len(borrowed_books)"},{"question":"Lucy is fascinated by sequences where each number differs from its predecessor by exactly 1. She often experiments with sequences that meet this criterion but are defined differently for odd and even indexed positions. Given a sequence of integers, Lucy wants to know whether it\'s possible to rearrange the sequence in such a way that, for every integer a_i at the i-th position: - If i is even, then |a_i - a_{i+1}| = 1. - If i is odd, then |a_i - a_{i-1}| = 1. -----Task----- Given a list of integers, determine if you can rearrange the list such that the conditions above are met for every even and odd indexed position. -----Input----- The input consists of a single line containing a space-separated list of integers a_1, a_2, ldots, a_n (1 le a_i le 100000). -----Output----- Output \\"YES\\" if you can rearrange the list to meet the conditions, otherwise output \\"NO\\". -----Examples----- Sample Input: 3 1 2 4 Sample Output: YES Sample Input: 5 3 7 1 Sample Output: NO","solution":"def can_rearrange(sequence): Returns \'YES\' if the sequence can be rearranged to fit the given conditions, \'NO\' otherwise. sequence.sort() n = len(sequence) # Check alternate placement of even index even_valid = True for i in range(1, n): if i % 2 != 0 and abs(sequence[i] - sequence[i-1]) != 1: even_valid = False break # Check alternate placement of odd index odd_valid = True for i in range(n - 1): if i % 2 == 0 and abs(sequence[i] - sequence[i+1]) != 1: odd_valid = False break if odd_valid or even_valid: return \\"YES\\" else: return \\"NO\\" # Example usage: # print(can_rearrange([3, 1, 2, 4])) # Expected output: YES # print(can_rearrange([5, 3, 7, 1])) # Expected output: NO"},{"question":"# Task You are given two arrays of integers `arr1` and `arr2`. You need to find the intersection of these two arrays. Each element in the result must be unique. You must return the result in ascending order. # Input/Output `[input]` two integer arrays `arr1` and `arr2` - `n1 <= arr1.length <= 100` - `n2 <= arr2.length <= 100` - `0 <= arr1[i], arr2[i] <= 1000` `[output]` an integer array The output should be a sorted array that contains unique elements that are present in both input arrays. # Example For `arr1 = [1, 2, 2, 1]` and `arr2 = [2, 2]`, the output should be `[2]`. For `arr1 = [4, 9, 5]` and `arr2 = [9, 4, 9, 8, 4]`, the output should be `[4, 9]`.","solution":"def intersection(arr1, arr2): Returns the sorted intersection of two lists as a list with unique elements. # Convert arrays to sets to find unique elements set1 = set(arr1) set2 = set(arr2) # Find the intersection of the two sets intersection_set = set1.intersection(set2) # Convert the result to a sorted list result = sorted(list(intersection_set)) return result"},{"question":"A group of friends decided to pool some money together to buy a gift for their friend\'s birthday. Each friend can optionally contribute to the pool, but the catch is that no friend can contribute more than once. Given the contributions by the friends, find out the total amount collected from distinct contributors. Input The first line of input contains T, the number of test cases. Each of the next sets of lines contains the following: - An integer N, the number of friends who contributed. - An array A of length N, where each element represents the amount contributed by a friend. Output Output the total amount of money collected for each test case from distinct contributors. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 100000 1 ≤ A[i] ≤ 10000 Example Input: 2 5 20 50 20 30 50 4 10 10 10 20 Output: 100 30 Explanation Example case 1: The contributions are [20, 50, 20, 30, 50]. Considering distinct contributions, the unique amounts are [20, 50, 30]. Summing these up gives 100. Example case 2: The contributions are [10, 10, 10, 20]. Considering distinct contributions, the unique amounts are [10, 20]. Summing these up gives 30.","solution":"def total_contributions(test_cases): results = [] for n, contributions in test_cases: unique_contributions = set(contributions) results.append(sum(unique_contributions)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) contributions = list(map(int, lines[index + 1].split())) test_cases.append((n, contributions)) index += 2 return test_cases"},{"question":"Alice is interested in palindromic numbers and wants to know how many palindromic numbers exist in a given range [L, R]. A number is considered palindromic if it reads the same backward as forward, such as 121 or 1331. Your task is to write a program that determines how many palindromic numbers are there between L and R (inclusive) for multiple test cases. Input The first line of the input will contain an integer T, the number of test cases. For each test case, the input will contain two space-separated integers, L and R, indicating the range. Output For each test case, print the required answer in a new line. Constraints 1 ≤ T ≤ 10 1 ≤ L ≤ R ≤ 10^5 SAMPLE INPUT 2 1 10 100 200 SAMPLE OUTPUT 9 10 Explanation Test case #1: The palindromic numbers between 1 and 10 (inclusive) are 1, 2, 3, 4, 5, 6, 7, 8, 9 (total 9). Test case #2: The palindromic numbers between 100 and 200 are 101, 111, 121, 131, 141, 151, 161, 171, 181, 191 (total 10).","solution":"def is_palindromic(num): Check if the number is palindromic. return str(num) == str(num)[::-1] def count_palindromic_numbers(L, R): Count the number of palindromic numbers in the range [L, R]. count = 0 for num in range(L, R + 1): if is_palindromic(num): count += 1 return count def solve(test_cases): Process multiple test cases and return the results for each in a list. results = [] for L, R in test_cases: results.append(count_palindromic_numbers(L, R)) return results"},{"question":"A company maintains information about its employees in a database. Consider a system where each employee record contains three pieces of information: employee\'s name, work email, and department. Each department is led by one manager, and an employee can belong to only one department but might not necessarily be a manager. For this problem, write a program that processes a list of employee records and determines if an employee is a manager based on their work email address. The format of the email is `<first_name>.<last_name>@manager.department.company.com` for managers, and `<first_name>.<last_name>@department.company.com` for non-managerial employees. -----Input----- The input consists of a single integer n (1 le n le 100), which is the number of employee records. This is followed by n lines, each containing an employee record in the format: `name email department` where - `name` is a string of lowercase English alphabetic characters, representing the first and last name concatenated with a space in between, - `email` is the work email address of the employee in the format described above, - `department` is a string of lowercase English alphabetic characters representing the department to which the employee belongs. -----Output----- For each input record, output the string \\"Manager\\" if the employee is a manager, or \\"Employee\\" if the employee is not a manager. -----Examples----- Sample Input 1: 3 john doe john.doe@manager.sales.company.com sales jane smith jane.smith@it.company.com it peter parker peter.parker@manager.hr.company.com hr Sample Output 1: Manager Employee Manager Sample Input 2: 2 alice wonderland alice.wonderland@rene.company.com rene bob builder bob.builder@manager.eng.company.com eng Sample Output 2: Employee Manager","solution":"def determine_role(n, records): results = [] for record in records: name, email, department = record if \'manager.\' + department + \'.company.com\' in email: results.append(\\"Manager\\") else: results.append(\\"Employee\\") return results"},{"question":"You are given a list of n integers. You need to choose two distinct integers such that their sum is equal to a given target value. Write a function that determines if there exist two distinct integers in the list that sum up to the target value. If such a pair exists, return the indices of the two numbers in any order. Otherwise, return -1. Note that each integer in the list is unique and an integer can only be used once. The function should return a list of two integers representing the 0-based indices of the two numbers that add up to the target, or -1 if no such pair exists. For example, if the list contains [3, 1, 5, 7] and the target is 10, there are two pairs of integers (3+7 and 1+5) that can sum up to 10. -----Function Signature----- def find_pair(nums: List[int], target: int) -> Union[List[int], int]: -----Input----- - The first parameter, `nums`, is a list of n integers (1 le n le 10^{5}) and each integer in the list is unique. - The second parameter, `target`, is a single integer which is the target sum. -----Output----- - The function should return a list of two integers representing the 0-based indices of the two numbers that add up to the target and these integers should be returned in any order. - If no such pair exists, return -1. -----Examples----- Input 1: nums = [2, 7, 11, 15] target = 9 Output 1: [0, 1] Input 2: nums = [1, 2, 3, 4, 5] target = 10 Output 2: -1 Input 3: nums = [3, 2, 4] target = 6 Output 3: [1, 2] Input 4: nums = [1, 5, 9, -3] target = 6 Output 4: [0, 1] Input 5: nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] target = 19 Output 5: [8, 9] -----Note----- In the first example, the numbers at indices 0 and 1 (2 and 7) add up to the target 9. Thus, the output is [0, 1]. In the second example, no pairs of integers in the list add up to the target 10, so the output is -1. In the third example, the numbers at indices 1 and 2 (2 and 4) add up to the target 6. Thus, the output is [1, 2]. In the fourth example, the numbers at indices 0 and 1 (1 and 5) add up to the target 6. Thus, the output is [0, 1]. In the fifth example, the numbers at indices 8 and 9 (9 and 10) add up to the target 19. Thus, the output is [8, 9].","solution":"from typing import List, Union def find_pair(nums: List[int], target: int) -> Union[List[int], int]: # Using a dictionary to store the value and its index num_dict = {} for index, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], index] num_dict[num] = index return -1"},{"question":"You are provided an array of integers representing the daily stock prices of a company over a period of days. You need to determine two specific days to buy and sell the stock in order to maximize profit. Note that you must buy before you sell, and the selling day must come after the buying day. If no profit can be made, return the values indicating no transaction possible. -----Input:----- - The first line of input contains an integer n, the number of days with stock prices. - The second line contains n space-separated integers representing the stock prices on those days. -----Output:----- Print two integers: the buying day and the selling day to maximize profit. If no profit is possible, return \\"No transaction possible\\". -----Constraints----- - 2 <= n <= 10^5 - 1 <= stock prices <= 10^4 -----Sample Input:----- 6 7 1 5 3 6 4 -----Sample Output:----- 2 5 -----Explanation:----- On the second day, the stock price is 1, which is the minimum price in the given period. Selling it on the fifth day where the price is 6 will yield the maximum profit (6 - 1 = 5). Hence, the buying day is 2 and the selling day is 5. In case the stock prices are in descending order, such as 6 5 4 3 2 1, any attempt to buy and sell will lead to no profit. Therefore, the output should be \\"No transaction possible\\". -----Sample Input 2:----- 5 5 4 3 2 1 -----Sample Output 2:----- No transaction possible","solution":"def max_profit_days(n, prices): Determines the best days to buy and sell stocks to maximize profit. Args: n : int : Number of days prices : list of int : Stock prices for each day Returns: tuple : (buying day, selling day) to maximize profit, or \\"No transaction possible\\" if n < 2: return \\"No transaction possible\\" min_price = prices[0] min_day = 1 max_profit = 0 buy_day = 1 sell_day = 1 for i in range(1, n): if prices[i] < min_price: min_price = prices[i] min_day = i + 1 current_profit = prices[i] - min_price if current_profit > max_profit: max_profit = current_profit buy_day = min_day sell_day = i + 1 if max_profit > 0: return buy_day, sell_day else: return \\"No transaction possible\\""},{"question":"A ship captain wants to navigate through a series of checkpoints situated on a partially frozen lake. The checkpoints are represented on a 2D grid, and the ship can only move in four directions: up, down, left, and right. However, some portions of the lake are frozen and the ship cannot travel over them. The captain needs to plot the shortest possible route from the starting checkpoint to the destination checkpoint while avoiding frozen sections. Write a function that, when given a grid representing the lake with checkpoints, returns the minimum number of steps required to reach the destination checkpoint. If it is not possible to reach the destination, return -1. Input Your function will receive a 2D list `grid` where each element can be one of the following: - `0`: A navigable part of the lake (unfrozen and can be traversed) - `1`: A frozen part of the lake (cannot be traversed) - `S`: The starting checkpoint - `D`: The destination checkpoint Output An integer representing the minimum number of steps required to reach the destination checkpoint from the starting checkpoint. Technical Details - The function should use Breadth-First Search (BFS) to explore the shortest path. - The movement directions allowed are up, down, left, and right. - Assume all inputs will be valid and the grid will always contain exactly one starting checkpoint (`S`) and one destination checkpoint (`D`). Test Example ```python lake_grid = [ [\\"S\\", 0, 1, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 0, 1, 1, 1], [0, 0, 0, 0, \\"D\\"] ] navigate_lake(lake_grid) # 8 ```","solution":"from collections import deque def navigate_lake(grid): Returns the minimum number of steps required to reach the destination checkpoint \'D\' from the starting checkpoint \'S\'. If it is not possible to reach the destination, returns -1. Args: grid (list of list of str/int): 2D list representing the lake. Returns: int: Minimum number of steps to reach \'D\' or -1 if not possible def get_neighbors(x, y): # returns the valid neighbors (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] != 1: yield (nx, ny) # Find the start (S) and destination (D) points start = destination = None for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'D\': destination = (i, j) if start and destination: break if not start or not destination: return -1 # Use BFS to find the shortest path from start to destination queue = deque([(start[0], start[1], 0)]) # queue of (x, y, steps) visited = set() visited.add(start) while queue: x, y, steps = queue.popleft() if (x, y) == destination: return steps for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"The local amusement park has recently introduced new interactive ticket scanners at each of their ride entrances. Each scanner has a unique ID and records every ticket scanned at its location in real-time. To keep track of popular rides and visitor flow, the management wants to get an average tally of tickets scanned across all rides for specific days. Your task is to build a simple system that calculates the average number of tickets scanned per scanner. The system receives daily records of ticket scans and the scanner IDs. -----Input----- The input consists of: 1. An integer N (1 ≤ N ≤ 1000) representing the number of ticket scans. 2. N lines, each containing a record in the format `SCANNER_ID DATE`, where `SCANNER_ID` is a string of uppercase letters and numbers (1 to 10 characters in length) and `DATE` is in the format YYYY-MM-DD. -----Output----- Print the average number of tickets scanned per scanner for the given records rounded to the nearest whole number. -----Examples----- Sample Input: 5 A1 2023-01-15 B2 2023-01-15 A1 2023-01-15 B2 2023-01-15 C3 2023-01-15 Sample Output: 2 Sample Input: 6 A1 2023-01-15 A1 2023-01-15 B2 2023-01-16 C3 2023-01-16 C3 2023-01-16 B2 2023-01-16 Sample Output: 2","solution":"def average_tickets_scanned(n, records): from collections import defaultdict scanner_counts = defaultdict(int) for record in records: scanner_id, _ = record.split() scanner_counts[scanner_id] += 1 average = round(sum(scanner_counts.values()) / len(scanner_counts)) return average"},{"question":"You are organizing a treasure hunt event for a group of kids in your neighborhood. In this event, you have hidden several treasures at different locations, and the kids are given a set of clues that lead them from one location to another. Each clue directs the kids to a specific location where the next clue can be found, eventually leading to a treasure. To make the event more interesting, you have decided to create a puzzle where the locations are represented as nodes in a directed graph, and the clues are the directed edges between the nodes. Given the graph, you need to find all possible locations (nodes) where the treasures could be hidden. A treasure is hidden at a location if it can be reached from the starting location following the clues (edges). A location is said to be reachable if there is a path of edges starting from the initial location that ends at this location. Your task is to write a function that takes the initial location and the list of directed edges as inputs and returns a list of all locations where treasures are hidden, sorted in increasing order of their node number. -----Input----- The first line of input consists of two integers, n (1 leq n leq 10^5), the number of locations, and m (1 leq m leq 10^5), the number of directed edges. The second line contains a single integer k (1 leq k leq n), the initial location. The next m lines each contain two integers u and v (1 leq u, v leq n), representing a directed edge from location u to location v. -----Output----- Display all locations where treasures are hidden, sorted in increasing order of their node number. -----Examples----- Sample Input 1: 5 4 1 1 2 2 3 1 4 4 5 Sample Output 1: 2 3 4 5 Sample Input 2: 7 6 3 3 5 5 6 6 7 2 4 4 6 4 7 Sample Output 2: 5 6 7","solution":"from collections import defaultdict, deque def find_treasure_locations(n, m, k, edges): Finds all treasure locations that can be reached from the initial location k. Parameters: n (int): Number of locations (nodes). m (int): Number of directed edges. k (int): Initial location. edges (list of tuples): List of directed edges (u, v). Returns: list: List of locations where treasures are hidden, sorted in increasing order. # Create an adjacency list from the edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Perform BFS to find all reachable nodes from the initial location visited = set() queue = deque([k]) treasures = set() while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) treasures.add(neighbor) queue.append(neighbor) return sorted(treasures) # Example usage n, m = 5, 4 k = 1 edges = [(1, 2), (2, 3), (1, 4), (4, 5)] print(find_treasure_locations(n, m, k, edges)) # Output: [2, 3, 4, 5]"},{"question":"While developing a new security feature, Alice has come across a unique problem. She wants to validate and parse a special password which follows specific encoding rules. Each password can have any length but always follows this format: - The password is a single arbitrary length string. - For a string to be a valid password, it must consist of alphanumeric characters only. - Semicolons can be used in the string, but they must be used as separators for sections of the password. - Each section separated by semicolons must individually consist only of alphanumeric characters without any special characters or spaces. - If a password is valid, Alice wants to know the number of sections in that password. -----Input----- Input to the program consists of a single line which contains the password string P (where the length of P should be <= 100). -----Output----- Output should consist of a single line with the number of alphanumeric sections separated by semicolons if the password is valid. If the password is invalid, output should be \\"Invalid Password\\". -----Example----- Input: Secure;Pass;worD123 Output: 3 Input: Invalid Pass;Word Output: Invalid Password","solution":"import re def validate_password(password): Validates the password based on the given rules and returns the number of sections if valid, otherwise returns \\"Invalid Password\\". if len(password) > 100: return \\"Invalid Password\\" sections = password.split(\';\') for section in sections: if not re.match(\\"^[a-zA-Z0-9]*\\", section): return \\"Invalid Password\\" return len(sections)"},{"question":"Drake the Dragon is building a monument out of bricks. Each brick has a specific weight, and he wants to ensure that the monument is perfectly balanced at every level. To accomplish this, Drake decides to follow these rules: 1. Divide the bricks into pairs, so that the weight difference between the two bricks in each pair is minimized. 2. Calculate the total imbalance of the pairs, which is the sum of the absolute differences in weights for each pair. Given the weights of the bricks, help Drake find out the minimal possible total imbalance he can achieve by pairing the bricks optimally. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of bricks. It is guaranteed that n is even. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^9) — the weights of the bricks. Output Print a single integer — the minimal total imbalance that Drake can achieve by optimally pairing the bricks. SAMPLE INPUT 4 10 20 30 40 SAMPLE OUTPUT 20 Explanation Drake can pair the bricks as follows: - Pair 10 with 20 (imbalance is 10) - Pair 30 with 40 (imbalance is 10) Total imbalance = 10 + 10 = 20","solution":"def minimal_total_imbalance(n, weights): Calculates the minimal possible total imbalance by pairing bricks optimally. Args: n (int): number of bricks (must be even) weights (list of int): weight of each brick Returns: int: minimal total imbalance # Sort the weights to pair the closest possible weights weights.sort() total_imbalance = 0 # Pair every two consecutive bricks for i in range(0, n, 2): total_imbalance += abs(weights[i+1] - weights[i]) return total_imbalance"},{"question":"You are working on a text-based collaborative document editor that tracks a sequence of edits made to a document. Each edit is represented by a string consisting of lowercase English letters and digits, which uniquely identify that edit. The edits form a chain, with each edit confirming that it recognizes and builds upon a previous edit, except for the initial edit which has no prior reference. Write a function `longest_chain` that finds the length of the longest chain of edits recognized by the system. Each edit reference is captured by an input that specifies the referencing relationship between two edits. Function Signature ```python def longest_chain(edits: List[str], references: List[Tuple[str, str]]) -> int: ``` Input - `edits`: A list of strings, where each string represents a unique edit made to the document. - `references`: A list of tuples, each containing two strings `(edit1, edit2)` indicating that `edit1` directly references `edit2`. Output - An integer representing the length of the longest chain of edits. Constraints - 1 ≤ |edits| ≤ 100,000 - 1 ≤ |edit| ≤ 10 - Each string in `edits` is unique and consists of only lowercase English letters and digits. - Each tuple in `references` will contain strings that are present in `edits`. Example Input ```python edits = [\\"a1\\", \\"b2\\", \\"c3\\", \\"d4\\", \\"e5\\"] references = [(\\"b2\\", \\"a1\\"), (\\"c3\\", \\"b2\\"), (\\"d4\\", \\"c3\\"), (\\"e5\\", \\"d4\\")] ``` Output ```python 5 ``` Explanation The chain of references is a1 → b2 → c3 → d4 → e5, making the longest chain length 5. Input ```python edits = [\\"x1\\", \\"y2\\", \\"z3\\", \\"a4\\"] references = [(\\"y2\\", \\"x1\\"), (\\"z3\\", \\"y2\\"), (\\"a4\\", \\"x1\\")] ``` Output ```python 3 ``` Explanation The longest chain of references includes either the chain x1 → y2 → z3 or x1 → y2 → a4, making the longest chain length 3.","solution":"def longest_chain(edits, references): from collections import defaultdict, deque # Create a dictionary to store the references of each edit references_dict = defaultdict(list) indegree = {edit: 0 for edit in edits} # Populate the dictionary and track indegree for topological sorting for edit1, edit2 in references: references_dict[edit2].append(edit1) indegree[edit1] += 1 # We perform a topological sort using Kahn\'s algorithm queue = deque([edit for edit in edits if indegree[edit] == 0]) longest_path = {edit: 1 for edit in edits} while queue: current = queue.popleft() for neighbor in references_dict[current]: indegree[neighbor] -= 1 longest_path[neighbor] = max(longest_path[neighbor], longest_path[current] + 1) if indegree[neighbor] == 0: queue.append(neighbor) return max(longest_path.values())"},{"question":"A company requires a program to manage employee records. Each employee record consists of a unique ID, name, age, and salary. The company wants to maintain a list of employees and perform the following operations: 1. Add a new employee record. 2. Delete an employee record by ID. 3. Update the salary of an employee by ID. 4. Retrieve the details of an employee by ID. 5. Retrieve the average salary of employees within a given age range (both inclusive). Given these requirements, write a program that processes a series of commands that perform the above operations on the list of employee records. The commands will be provided consecutively, and your program should execute each command appropriately and print the results for retrieval commands. Input: - The first line contains an integer t, the number of commands. - The next t lines contain commands. The commands can be of the following types: - \\"ADD id name age salary\\": Adds a new employee with the provided ID, name, age, and salary. - \\"DELETE id\\": Deletes the employee with the given ID. - \\"UPDATE id new_salary\\": Updates the salary of the employee with the given ID. - \\"RETRIEVE id\\": Retrieves and prints the details of the employee with the given ID in the format \\"ID: id, Name: name, Age: age, Salary: salary\\". - \\"AVERAGE age1 age2\\": Calculates and prints the average salary of employees with ages within the range [age1, age2] inclusive. Output: - For \\"RETRIEVE\\" commands, print the details of the employee. - For \\"AVERAGE\\" commands, print the average salary rounded to two decimal places. - If an operation tries to access or modify a non-existent employee, print \\"Employee Not Found\\". - If an \\"ADD\\" command tries to add an employee with an ID that already exists, print \\"Duplicate ID\\". Constraints: 1 ≤ t ≤ 10^4 1 ≤ id ≤ 10^6 1 ≤ age ≤ 100 1 ≤ salary ≤ 10^6 1 ≤ name length ≤ 100 Example Input: 7 ADD 1 Alice 30 50000 ADD 2 Bob 40 60000 ADD 3 Charlie 35 55000 RETRIEVE 2 UPDATE 2 65000 AVERAGE 30 40 DELETE 2 Example Output: ID: 2, Name: Bob, Age: 40, Salary: 60000 57500.00","solution":"class EmployeeRecordSystem: def __init__(self): self.employees = {} def add_employee(self, emp_id, name, age, salary): if emp_id in self.employees: print(\\"Duplicate ID\\") else: self.employees[emp_id] = {\\"name\\": name, \\"age\\": age, \\"salary\\": salary} def delete_employee(self, emp_id): if emp_id in self.employees: del self.employees[emp_id] else: print(\\"Employee Not Found\\") def update_salary(self, emp_id, new_salary): if emp_id in self.employees: self.employees[emp_id][\\"salary\\"] = new_salary else: print(\\"Employee Not Found\\") def retrieve_employee(self, emp_id): if emp_id in self.employees: emp = self.employees[emp_id] print(f\\"ID: {emp_id}, Name: {emp[\'name\']}, Age: {emp[\'age\']}, Salary: {emp[\'salary\']}\\") else: print(\\"Employee Not Found\\") def average_salary(self, age1, age2): salaries = [emp[\\"salary\\"] for emp in self.employees.values() if age1 <= emp[\\"age\\"] <= age2] if salaries: avg_salary = sum(salaries) / len(salaries) print(f\\"{avg_salary:.2f}\\") else: print(\\"0.00\\") def process_commands(commands): ers = EmployeeRecordSystem() for command in commands: parts = command.split() if parts[0] == \\"ADD\\": _, emp_id, name, age, salary = parts ers.add_employee(int(emp_id), name, int(age), int(salary)) elif parts[0] == \\"DELETE\\": _, emp_id = parts ers.delete_employee(int(emp_id)) elif parts[0] == \\"UPDATE\\": _, emp_id, new_salary = parts ers.update_salary(int(emp_id), int(new_salary)) elif parts[0] == \\"RETRIEVE\\": _, emp_id = parts ers.retrieve_employee(int(emp_id)) elif parts[0] == \\"AVERAGE\\": _, age1, age2 = parts ers.average_salary(int(age1), int(age2))"},{"question":"You are given an integer array `arr` of size `N`, where `arr[i]` represents the number of candies in the `i`-th box. You need to determine the maximum number of candies you can collect if you start from any box and move to any adjacent box in each step. You can only move to a box which has fewer candies than the current one. ------ Input ------ The first line contains an integer `T`, the number of test cases. Each test case contains two lines. The first line contains a single integer `N`, the number of boxes. The second line contains `N` space-separated integers representing the number of candies in each box. ------ Output ------ For each test case, output a single line containing the maximum number of candies you can collect. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ arr[i] ≤ 10^9 Sample Input: 2 6 1 2 3 2 1 5 5 5 4 3 2 1 Sample Output: 3 5 Explanation: In the first test case, you can start at box 3 with 3 candies, move to box 4 with 2 candies, and finally move to box 5 with 1 candy, collecting a total of 3 candies. In the second test case, you start at box 1 with 5 candies and cannot move to a box with fewer candies, so the total number of candies collected is 5.","solution":"def max_candies_collected(arr): max_collected = 0 n = len(arr) for i in range(n): count = 0 current_candies = arr[i] for j in range(i, n): if arr[j] <= current_candies: count += 1 current_candies = arr[j] else: break max_collected = max(max_collected, count) return max_collected def process_test_cases(t, test_cases): results = [] for case in test_cases: n, arr = case results.append(max_candies_collected(arr)) return results"},{"question":"In a magical forest, there are n trees in a row, each with a certain number of magical fruits. A group of hungry rabbits wants to eat these fruits, but they have a special eating pattern: each rabbit can only eat fruits from two adjacent trees at a time. The task is to determine the maximum number of fruits that the rabbits can eat from any two adjacent trees in the forest. -----Input----- The first line of the input contains a single integer n (2 ≤ n ≤ 100), the number of trees in the forest. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), where a_i represents the number of fruits on the i-th tree. -----Output----- Print a single integer — the maximum number of fruits that can be eaten from any two adjacent trees. -----Examples----- Input 5 4 7 3 9 2 Output 12 Input 3 2 8 6 Output 14 Input 4 5 1 5 1 Output 6 -----Note----- In the first sample, the maximum number of fruits that can be eaten from two adjacent trees is from the third and fourth trees, which have 3 and 9 fruits respectively, summing up to 12. In the second sample, the maximal combination is from the first and second trees which sum to 2 + 8 = 10. In the third sample, the maximum number of fruits that can be gathered is from either the first and second trees or the third and fourth trees, both summing up to 6.","solution":"def max_fruits_from_adjacent_trees(n, fruits): Returns the maximum number of fruits that can be eaten from any two adjacent trees. Parameters: n (int): The number of trees. fruits (list): A list of integers representing the number of fruits on each tree. Returns: int: The maximum number of fruits that can be eaten from any two adjacent trees. max_fruits = 0 for i in range(n - 1): max_fruits = max(max_fruits, fruits[i] + fruits[i + 1]) return max_fruits"},{"question":"You are organizing a team-building activity for a group of employees. Each employee can form a team with any other employee, but you want the teams to be balanced. The skill level of the i-th employee is s_i. An ideal team should have the smallest possible difference between the highest and lowest skill levels among its members. You need to form multiple teams such that: - Each team has exactly two employees (n is always even). - The overall imbalance, defined as the sum of the differences in skill levels within each team, is minimized. -----Input----- The first line contains a single integer n (2 leq n leq 10^5), the number of employees. The second line contains n integers s_1, s_2, ldots, s_n (1 leq s_i leq 10^9) which are the skill levels of the employees. -----Output----- Output the minimum possible overall imbalance. -----Examples----- Sample Input 1: 4 3 1 2 4 Sample Output 1: 2 Sample Input 2: 6 10 20 30 40 50 60 Sample Output 2: 30","solution":"def min_imbalance(n, skills): Returns the minimum possible overall imbalance. n: int - number of employees (even) skills: list of int - skill levels of employees skills.sort() imbalance = 0 for i in range(0, n, 2): imbalance += skills[i + 1] - skills[i] return imbalance"},{"question":"A company\'s management team is planning to organize a corporate event in a way that no two departments that do not get along sit next to each other. The company has N departments, and there are M pairs of departments that do not get along. The event is to be planned in such a way that all departments can attend without any conflicts. You have to determine if it is possible to arrange the departments in a line such that no two departments that do not get along are adjacent. Input - The first line contains two integers N and M, the number of departments and the number of pairs of departments that do not get along, respectively. - The next M lines each contain two integers u and v, indicating that departments u and v do not get along. Output - Print \\"Possible\\" if it\'s possible to arrange all departments in a line without conflicts, otherwise print \\"Impossible\\". Constraints - 1 leq N leq 1000 - 0 leq M leq 10000 - 1 leq u, v leq N Sample Input 1 3 2 1 2 2 3 Sample Output 1 Possible Explanation 1 Department 1 can sit next to department 3. The arrangement is (1, 3, 2) or (2, 3, 1). Sample Input 2 3 3 1 2 2 3 1 3 Sample Output 2 Impossible Explanation 2 Any arrangement will have at least one conflict. Sample Input 3 4 0 Sample Output 3 Possible Explanation 3 With no constraints, any arrangement will work.","solution":"def is_possible(N, M, conflicts): from collections import defaultdict, deque graph = defaultdict(list) for u, v in conflicts: graph[u].append(v) graph[v].append(u) color = {} def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in color: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for node in range(1, N + 1): if node not in color: if not bfs(node): return \\"Impossible\\" return \\"Possible\\" # Utility functions for easier unit tests def parse_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) conflicts = [tuple(map(int, line.split())) for line in lines[1:]] return N, M, conflicts"},{"question":"In a distant land, there is a unique mathematical game called \\"DivisorShuffle\\" that people use to play for fun. The game operates on a number using a special set of rules for shuffling divisors. Here are the rules: 1. Given a number n, find all its divisors (excluding 1 and n itself). 2. For each divisor d, repeatedly subtract d from n until n is less than d. 3. Order the resulting numbers d in descending order. Write a program that takes a number n and outputs the shuffled sequence of numbers according to the DivisorShuffle rules. Input The first line of input contains T, the number of test cases. The next T lines each contain a single integer n. Output Output T lines, each corresponding to the shuffled sequence of numbers for the given n. Constraints 1) 2 ≤ n ≤ 10000 SAMPLE INPUT 2 10 15 SAMPLE OUTPUT [5, 2] [5, 3]","solution":"def divisor_shuffle(n): This function takes a number n and returns the shuffled sequence of numbers according to the DivisorShuffle rules. divisors = [d for d in range(2, n) if n % d == 0] result = [] for d in divisors: while n >= d: n -= d result.append(d) return sorted(result, reverse=True) def process_test_cases(T, cases): This function processes multiple test cases. results = [] for n in cases: result = divisor_shuffle(n) results.append(result) return results"},{"question":"You are working on a project that involves processing data from smart sensors. One particular challenge is calculating an \\"anomaly score\\" for data sequences. Each sequence consists of integers representing sensor readings over a period of time. The anomaly score for a sequence is defined as the maximum difference between any two adjacent readings in the sequence. Given several sequences of sensor readings, your task is to determine the anomaly score for each sequence. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of sequences. Then, the description of t sequences follows. The first line of each sequence contains an integer n (2 ≤ n ≤ 100) — the number of sensor readings in the sequence. The second line of each sequence contains n integers r_1, r_2, ..., r_n (0 ≤ r_i ≤ 10^4) — the sensor readings. Output For each sequence, print a single integer: the anomaly score of the sequence. Example Input 3 5 10 20 10 30 40 4 12 15 12 13 3 1 5 3 Output 20 3 4","solution":"def calculate_anomaly_scores(sequences): Calculates the anomaly score for each sequence of sensor readings. Parameters: sequences (list of list of int): A list containing multiple lists, each representing a sequence of sensor readings. Returns: list of int: A list containing the anomaly scores for each sequence. scores = [] for sequence in sequences: max_diff = 0 for i in range(1, len(sequence)): diff = abs(sequence[i] - sequence[i-1]) if diff > max_diff: max_diff = diff scores.append(max_diff) return scores"},{"question":"Codingan Arena recently hosted a coding competition, where each participant was scored based on their performance in various challenges. The organizers want to rank the participants based on their scores. If two participants have the same score, they should be ranked alphabetically by their names. You are required to write a program that calculates the ranks of the participants based on their scores and names. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000) — the number of participants. Each of the next n lines contains a string s of length between 1 and 10, and an integer score (0 ≤ score ≤ 1000), where s is the name of the participant and score is their score in the competition. -----Output----- Print n lines, each containing the name of the participant followed by their rank. Participants with the highest score should have rank 1, the next highest score should have rank 2, and so on. If two participants have the same score, they should be ranked alphabetically by their names. -----Examples----- Input 3 Alice 95 Bob 100 Charlie 100 Output Bob 1 Charlie 2 Alice 3 Input 4 David 50 Eva 40 Frank 50 Grace 60 Output Grace 1 David 2 Frank 3 Eva 4 Input 2 Emma 85 Liam 85 Output Emma 1 Liam 2","solution":"def rank_participants(n, participants): # Sort participants first by score in descending order, then by name in ascending order participants.sort(key=lambda x: (-x[1], x[0])) result = [] for rank, (name, _) in enumerate(participants, start=1): result.append(f\\"{name} {rank}\\") return result"},{"question":"You are given a list of integers and you need to find the length of the longest contiguous subarray within which all elements are equal. The function signature is as follows: ```python def longest_equal_subarray(arr: List[int]) -> int: ``` # Examples For example, given the list `arr = [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1]`, your function should return `4` because the longest contiguous subarray with equal elements is `[0, 0, 0, 0]`. Additional examples: ```python longest_equal_subarray([1, 1, 1, 1, 1]) # should return 5 longest_equal_subarray([1, 2, 1, 2, 1]) # should return 1 longest_equal_subarray([0, 1, 2, 2, 2, 3]) # should return 3 ``` # Constraints - The input array will always have at least one element. - The elements in the array are integers.","solution":"def longest_equal_subarray(arr): Returns the length of the longest contiguous subarray within which all elements are equal. if not arr: return 0 max_length = current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given an array of positive integers representing the heights of students standing in a queue. Each student wants the queue to have a certain property maintained: the difference in height between any two adjacent students should not exceed a given integer k. If this property is violated, the student will be unhappy. Your task is to determine whether you can rearrange the students in any order so that every student in the queue is happy according to the specified condition. # Input - The first line of input contains a single integer T (1 ≤ T ≤ 50), the number of test cases. - Each test case consists of two lines: - The first line contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ 10^9), where `n` is the number of students, and `k` is the maximum allowed height difference between any two adjacent students. - The second line contains `n` positive integers representing the heights of the students. # Output For each test case, output \\"YES\\" if it is possible to rearrange the students to fulfill the property, otherwise output \\"NO\\". # Example Input ``` 2 5 3 4 7 1 3 9 4 1 10 1 5 6 ``` Output ``` YES NO ``` # Explanation - In the first test case, it is possible to rearrange the students as 1, 3, 4, 7, 9. - In the second test case, no arrangement of students can satisfy the condition where the height difference between any two adjacent students is at most 1.","solution":"def can_be_happy(n, k, heights): Determines if the students can be rearranged in such a way that the difference in height between any two adjacent students does not exceed k. Parameters: n (int): Number of students. k (int): Maximum allowed height difference between any two adjacent students. heights (list of int): List of heights of the students. Returns: str: \\"YES\\" if the students can be rearranged to satisfy the condition, otherwise \\"NO\\". heights.sort() for i in range(1, n): if heights[i] - heights[i-1] > k: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for n, k, heights in test_cases: results.append(can_be_happy(n, k, heights)) return results"},{"question":"Given a linked list, where each node contains a single digit from 0 to 9, construct the largest number possible. The linked list has the constraint that it is non-circular and does not contain any cycles. Each node contains an integer value \'val\' and a pointer \'next\' to the next node. Write a function `largestNumberFromList(head)` that takes the head of the linked list and returns the largest number that can be constructed from the digits in the list. Example 1: Input: head = [3,4,2,9,5] Output: 95432 Explanation: By arranging the digits in descending order, the largest number is 95432. Example 2: Input: head = [0, 0, 0] Output: 0 Explanation: Even though there are multiple zeros, the largest number formed is still 0. Example 3: Input: head = [5,2,1,9] Output: 9521 Constraints: - The linked list contains at most 10^5 nodes. - Each node\'s value is a single digit between 0 and 9 inclusive.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def largestNumberFromList(head): Construct the largest number possible from the digits in the linked list. :param head: ListNode, the head of the linked list. :return: int, the largest number possible. digits = [] current = head while current: digits.append(current.val) current = current.next # Sort the digits in descending order digits.sort(reverse=True) # Handle edge case when all digits are 0 if digits[0] == 0: return 0 # Convert digits to string and then to int to form the number largest_number = int(\'\'.join(map(str, digits))) return largest_number"},{"question":"You are given a string containing a mix of characters and digits. Your task is to extract all the digits from the string, sort them in ascending order, and return the sorted digits as a string. Input A single string of length n containing both alphabets and digits. Output A string containing all sorted digits in ascending order from the input string. Constraints 1 ≤ n ≤ 100 SAMPLE INPUT a1c2b3e4 SAMPLE OUTPUT 1234 Explanation In the sample input, the given string is: a1c2b3e4 Extract digits: 1, 2, 3, 4 Sort in ascending order: 1, 2, 3, 4 Output the sorted digits as a single string: \\"1234\\"","solution":"def extract_and_sort_digits(s): Extracts all digits from the input string, sorts them in ascending order, and returns them as a concatenated string. # Extract digits from the string digits = [char for char in s if char.isdigit()] # Sort the digits sorted_digits = sorted(digits) # Join the sorted digits into a string and return return \'\'.join(sorted_digits)"},{"question":"Alicia loves palindromic numbers, especially in their binary forms. She finds them fascinating and enjoys deciphering these patterns. Her teacher gave her a new challenge. For a given range of values from M to N, Alicia has to determine the total count of numbers X within that range such that their binary representation is a palindrome. Example 1: Input: M = 5 and N = 10 Output: 3 Explanation: The numbers within this range whose binary representation are palindromic are: 5 -> 101 7 -> 111 9 -> 1001 So, the count is 3. Example 2: Input: M = 10 and N = 15 Output: 1 Explanation: The numbers within this range whose binary representation are palindromic is: 15 -> 1111 So, the count is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countPalindromicNumbers() which takes the integers M and N as input parameters and returns the count of numbers X whose binary representation is a palindrome within the range [M, N]. Expected Time Complexity: O(N-M) Expected Auxiliary Space: O(1) Constraints: 1 ≤ M ≤ N ≤ 10^6","solution":"def is_binary_palindrome(num): Check if the binary representation of a number is a palindrome. binary_rep = bin(num)[2:] return binary_rep == binary_rep[::-1] def countPalindromicNumbers(M, N): Count the number of integers between M and N (inclusive) whose binary representations are palindromic. count = 0 for num in range(M, N + 1): if is_binary_palindrome(num): count += 1 return count"},{"question":"Neko is training to become better at competitive programming contests. After each training session, she likes to evaluate her performance based on two metrics: the number of problems solved (solved) and the total time taken (minutes). Her goal is to improve her efficiency by maximizing the solved/minutes ratio. Given her performance data from previous training sessions, Neko wants to determine the session with the highest efficiency. Write a program that takes the number of training sessions and their respective solved and minutes values, and outputs the session number (1-based index) with the highest efficiency. If there are multiple sessions with the same highest efficiency, output the smallest session number. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ solved, minutes ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N solved_1 minutes_1 solved_2 minutes_2 ... solved_N minutes_N -----Output----- Print the session number with the highest efficiency. -----Sample Input----- 3 10 5 6 2 8 4 -----Sample Output----- 2 Neko\'s efficiencies for the three sessions are: - Session 1: 10/5 = 2.0 - Session 2: 6/2 = 3.0 - Session 3: 8/4 = 2.0 The highest efficiency is 3.0 from session 2. Thus, the output is 2.","solution":"def highest_efficiency_session(N, sessions): Determines the session with the highest solved/minutes ratio. :param N: Number of sessions (integer) :param sessions: List of tuples [(solved, minutes)] :return: 1-based index of the session with the highest efficiency max_efficiency = 0 best_session = 0 for i in range(N): solved, minutes = sessions[i] efficiency = solved / minutes if efficiency > max_efficiency: max_efficiency = efficiency best_session = i + 1 return best_session"},{"question":"Peter wants to enhance his garden by arranging various types of plants in a beautiful pattern. There are exactly T types of plants available, and Peter has P units of land to plant them. Each type of plant i can be planted in a plot of area ai and yields a beauty score bi. Peter aims to maximize the total beauty of his garden by selecting an optimal combination of plants that does not exceed the total available land P. However, he can plant multiple units of the same type of plant if desired. Given the total units of land P and the details of all T types of plants including their area requirement and beauty score, help Peter by calculating the maximum beauty score achievable. Input - The first line contains two space-separated integers, P (1 ≤ P ≤ 10^6) and T (1 ≤ T ≤ 100). - The next T lines contain two space-separated integers ai (1 ≤ ai ≤ 10^6) and bi (1 ≤ bi ≤ 10^6) — the area requirement and beauty score of the i-th type of plant. Output - Output a single integer representing the maximum total beauty score that Peter can achieve with the given amount of land. Example Input 5 3 1 3 2 5 3 7 Output 15 Input 8 2 2 4 3 5 Output 16","solution":"def maximize_beauty_score(P, T, plants): dp = [0] * (P + 1) for ai, bi in plants: for j in range(ai, P + 1): dp[j] = max(dp[j], dp[j - ai] + bi) return dp[P]"},{"question":"You are given a string S of length N consisting only of characters \'a\' and \'b\'. In one move, you can flip a single character from \'a\' to \'b\' or from \'b\' to \'a\'. Find the minimum number of moves required to make all characters in the string the same. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the length of the string. - The second line of each test case contains a string S of length N consisting only of characters \'a\' and \'b\'. ------ Output Format ------ For each test case, output the minimum number of moves required to make all characters in the string the same. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤100 S consists only of characters \'a\' and \'b\'. ----- Sample Input 1 ------ 3 5 ababa 4 aaaa 7 baaaabb ----- Sample Output 1 ------ 2 0 3 ----- Explanation 1 ------ Test case 1: The minimum number of moves required to make all characters the same is 2. - Move 1: Flip the character at position 1 (\'a\' to \'b\'). The string becomes \'bbaba\'. - Move 2: Flip the character at position 3 (\'a\' to \'b\'). The string becomes \'bbbbb\'. Test case 2: No moves are required since all characters are already the same. Test case 3: The minimum number of moves required to make all characters the same is 3. - Move 1: Flip the character at position 1 (\'b\' to \'a\'). The string becomes \'aaaaabb\'. - Move 2: Flip the character at position 6 (\'b\' to \'a\'). The string becomes \'aaaaaab\'. - Move 3: Flip the character at position 7 (\'b\' to \'a\'). The string becomes \'aaaaaaa\'.","solution":"def min_moves_to_uniform_string(N, S): Returns the minimum number of moves required to make all characters in string S the same. count_a = S.count(\'a\') count_b = N - count_a # Since the only characters are \'a\' and \'b\' return min(count_a, count_b) def process_test_cases(T, test_cases): results = [] for i in range(T): N, S = test_cases[i] results.append(min_moves_to_uniform_string(N, S)) return results"},{"question":"Palindrome Pattern Given an integer n, your task is to create a symmetrical pattern of n rows containing palindromic sequences of numbers. Each sequence should be centered horizontally, with spaces appropriately placed if necessary to maintain alignment. For example: Input: n = 4 Output: ``` 1 121 12321 1234321 ``` Input: n = 7 Output: ``` 1 121 12321 1234321 123454321 12345654321 1234567654321 ``` **Note:** - Each sequence must be a palindrome. - Ensure proper spacing to maintain the centering of the sequences. - `n` will always be an integer greater than or equal to 1.","solution":"def generate_palindromic_pattern(n): Generates a symmetrical palindromic pattern of n rows. Args: n: int - Number of rows for the pattern Returns: str - The symmetrical palindromic pattern lines = [] for i in range(1, n + 1): # First half ascending line = \'\'.join(str(x) for x in range(1, i + 1)) # Second half descending line += \'\'.join(str(x) for x in range(i - 1, 0, -1)) # Centering lines.append(line.center(2 * n - 1)) return \'n\'.join(lines)"},{"question":"You are provided with a list of numbers and Q queries. Each query will either increment all elements of the list by a given number or return the maximum element from the list. The task is to perform the operation according to the queries as given below: 1. inc x: query to increment each element of the list by the value x. 2. max: query to return the maximum element from the list. Example 1: Input: 4 3 1 4 2 3 inc 2 max inc 5 Output: 6 Explanation: 1. After incrementing by 2, the list will be {5, 3, 6, 4}. 2. The maximum element in the list is 6. 3. After incrementing by 5, the list will be {10, 8, 11, 9}. Example 2: Input: 5 10 20 30 40 50 2 max inc 10 Output: 50 Explanation: 1. The maximum element in the list is 50. 2. After incrementing by 10, the list will be {20, 30, 40, 50, 60}. Your Task: Your task is to complete the following functions: increment_list(): Increment all elements of the list by the given value and then the driver code prints the updated list. max_element(): Return the maximum element from the list and then the driver code prints the value. Expected Time Complexity: O(1) for each query Expected Auxiliary Space: O(1) for each query Constraints: 1 ≤ Number of elements in the list ≤ 10^5 1 ≤ Number of queries ≤ 10^5","solution":"class QueryProcessor: def __init__(self, nums): self.nums = nums self.increment_base = 0 def increment_list(self, value): self.increment_base += value def max_element(self): return max(self.nums) + self.increment_base"},{"question":"> You are given the task of implementing a function to determine if a string can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Task Write a function `can_form_palindrome(s: str) -> bool` that takes a string `s` and returns `True` if it is possible to rearrange the characters in `s` to form a palindrome, and `False` otherwise. Ignore spaces, punctuation, and capitalization during the check. Examples ```python can_form_palindrome(\\"civic\\") # => True (it is already a palindrome) can_form_palindrome(\\"ivicc\\") # => True (it can be rearranged to \\"civic\\") can_form_palindrome(\\"hello\\") # => False (it cannot be rearranged to form a palindrome) can_form_palindrome(\\"A man, a plan, a canal, Panama\\") # => True (ignoring spaces and punctuation, it can be rearranged to form \\"amanaplanacanalpanama\\" which is a palindrome) can_form_palindrome(\\"No \'x\' in Nixon\\") # => True (ignoring spaces and punctuation, it can be rearranged to form \\"noxinnixon\\" which is a palindrome) ``` Complexity Analyze the time complexity and space complexity of your algorithm. Aim for an efficient solution in terms of both time and space.","solution":"def can_form_palindrome(s: str) -> bool: from collections import Counter import re # Remove all non-alphanumeric characters and convert to lower case clean_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count the frequency of each character freq = Counter(clean_s) # Check for the number of characters with odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"A word is considered \\"awesome\\" if it contains at least one vowel (a, e, i, o, u) and the length of the word is at least 5 characters. Given a list of words, determine whether each word is \\"awesome\\". ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains a single line of input, a string S, denoting the word to be checked. ------ Output Format ------ For each test case, output in a single line texttt{awesome}, if the word is considered awesome. Otherwise, print texttt{not awesome}. The output is case-insensitive, meaning texttt{awesome}, texttt{Awesome}, and texttt{AWESOME} will be considered identical. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ text{length of } S ≤ 50 ------ Sample Input 1 ------ 3 hello sky awesome ------ Sample Output 1 ------ awesome not awesome awesome ------ Explanation 1 ------ Test Case 1: The word \\"hello\\" contains at least one vowel and its length is 5, so it is considered awesome. Test Case 2: The word \\"sky\\" contains no vowels and is less than 5 characters long, so it is not considered awesome. Test Case 3: The word \\"awesome\\" contains at least one vowel and its length is more than 5, so it is considered awesome.","solution":"def is_awesome(word): Determines if a word is \'awesome\'. A word is considered \\"awesome\\" if it contains at least one vowel (a, e, i, o, u) and the length of the word is at least 5 characters. Parameters: word (str): The word to be checked. Returns: str: \\"awesome\\" if the word is awesome, otherwise \\"not awesome\\". vowels = set(\'aeiou\') if len(word) >= 5 and any(char in vowels for char in word.lower()): return \\"awesome\\" else: return \\"not awesome\\" def check_words(number_of_cases, words): Checks multiple words to determine if each is \'awesome\'. Parameters: number_of_cases (int): Number of test cases. words (list): List of words to be checked. Returns: list: Results for each word. results = [] for word in words: results.append(is_awesome(word)) return results def main(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) words = data[1:T + 1] results = check_words(T, words) for result in results: print(result)"},{"question":"Given a sorted array A[] of size N and an integer target. The task is to find the occurrence count of the target number in the array using binary search technique. If the target is not present in the array, return 0. Example 1: Input: N = 6, A[] = {1, 2, 2, 3, 3, 3}, target = 3 Output: 3 Explanation: The value 3 appears 3 times in the array. Example 2: Input: N = 5, A[] = {1, 1, 2, 4, 5}, target = 3 Output: 0 Explanation: The value 3 does not appear in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countOccurrences() which takes an integer N, an array A[] and an integer target as input parameters and returns the count of the target value in the array. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5} 1 <= A[i] <= 10^{9}","solution":"def countOccurrences(N, A, target): Finds the occurrence count of the target number in the array using binary search technique. If the target is not present in the array, returns 0. :param N: int - size of the array :param A: List[int] - sorted array of integers :param target: int - target number to count :return: int - count of occurrences of target in the array def find_first_occurrence(A, target): low, high = 0, len(A) - 1 first_occurrence = -1 while low <= high: mid = (low + high) // 2 if A[mid] == target: first_occurrence = mid high = mid - 1 elif A[mid] < target: low = mid + 1 else: high = mid - 1 return first_occurrence def find_last_occurrence(A, target): low, high = 0, len(A) - 1 last_occurrence = -1 while low <= high: mid = (low + high) // 2 if A[mid] == target: last_occurrence = mid low = mid + 1 elif A[mid] < target: low = mid + 1 else: high = mid - 1 return last_occurrence first = find_first_occurrence(A, target) if first == -1: return 0 last = find_last_occurrence(A, target) return (last - first + 1)"},{"question":"A mountain climber is analyzing the elevation profile of his next adventure. The elevation profile is represented as an array of integers, where each integer represents the height at a specific point along the route. The climber wants to know the maximum difference in elevation between any two points such that the second point is higher and comes after the first point along his path. Write a function to help the climber determine this maximum elevation gain. If no gain is possible (i.e., the highest point is before the lowest point), the function should return 0. Input Format The first line contains an integer T i.e. the number of test cases. The next 2 times T lines will each contain: - An integer N, the number of points in the elevation profile. - An array of N integers representing the elevation at each point. Output Format For each test case, print the maximum elevation gain or 0 if no gain is possible. Constraints 1 leq T leq 10^3 2 leq N leq 10^5 1 leq text{elevation}[i] leq 10^9 Note: The input size for all test cases combined will not exceed 10^6 points. Sample Input 3 5 1 2 3 4 5 5 5 4 3 2 1 6 7 1 5 3 6 4 Sample Output 4 0 5 Explanation For the first test case, the maximum elevation gain is from 1 to 5, which is 5 - 1 = 4. For the second test case, no elevation gain is possible as the elevation strictly decreases. For the third test case, the maximum elevation gain is from 1 to 6, which is 6 - 1 = 5.","solution":"def max_elevation_gain(T, test_cases): Determine the maximum elevation gain for each elevation profile. Parameters: T (int): The number of test cases. test_cases (list): A list containing tuples, each with an integer N (number of points) and a list of integers (elevation profile). Returns: list: A list containing the maximum elevation gain for each test case. results = [] for N, elevations in test_cases: min_elevation = elevations[0] max_gain = 0 for elevation in elevations: if elevation > min_elevation: max_gain = max(max_gain, elevation - min_elevation) min_elevation = min(min_elevation, elevation) results.append(max_gain) return results"},{"question":"Find the minimum number of steps required to make two strings anagrams of each other. In one step, you can insert a character into, delete a character from, or replace a character in either of the strings. Example 1: Input: str1 = \\"abc\\", str2 = \\"bcf\\" Output: 2 Explanation: Replace \'a\' with \'b\' and replace \'c\' with \'f\'. Example 2: Input: str1 = \\"abcdef\\", str2 = \\"azced\\" Output: 3 Explanation: Replace \'b\' with \'z\', replace \'f\' with \'d\', and delete \'e\'. Your Task: You do not need to read input or print anything. Your task is to complete the function minStepsToAnagram() which takes the two strings str1 and str2 as input parameters and returns the minimum number of steps required to make the two strings anagrams of each other. Expected Time Complexity: O(m + n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |str1|, |str2| ≤ 10^4 str1 and str2 contain only lowercase English alphabets","solution":"def minStepsToAnagram(str1, str2): from collections import Counter # Count frequency of each character in both strings count1 = Counter(str1) count2 = Counter(str2) # Calculate the number of deletions or insertions needed to make the two strings anagrams deletions = 0 for char in count1: if char in count2: deletions += abs(count1[char] - count2[char]) else: deletions += count1[char] for char in count2: if char not in count1: deletions += count2[char] return deletions"},{"question":"Sarah is a gardener and she wants to plant a row of flowers in her garden. She has n flower pots placed sequentially and, for each pot, she knows the type of flower she wants to plant. However, Sarah also wants the flowers to be arranged in a particular sequence of colors she finds aesthetic. To achieve this, she can perform the following operation any number of times: select any two adjacent pots and swap the flowers in them. Given the initial state of the flower pots and the desired arrangement, help Sarah determine if it is possible to rearrange the flowers to match the desired sequence using the allowed operation. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The next t pairs of lines each describe a test case. The first line of each pair contains a single integer n (1 leq n leq 1000) — the number of flower pots. The second line contains two strings of length n consisting of lowercase English letters. The first string represents the initial arrangement of the flowers and the second string represents the desired arrangement. -----Output----- For each test case, print \\"Yes\\" if Sarah can rearrange the flowers to match the desired sequence using the allowed operation. Otherwise, print \\"No\\". -----Example----- Input 3 5 abcde ecdba 4 aaaa aaab 6 abcdef fedcba Output Yes No Yes -----Note----- In the first test case of the example, Sarah can rearrange the flowers by performing adjacent swaps to match the desired sequence. In the second test case of the example, it is impossible to obtain the desired sequence from the initial arrangement with the allowed operation since there\'s an extra \'a\'. In the third test case of the example, Sarah can perform multiple adjacent swaps to reverse the initial arrangement and match the desired sequence.","solution":"def can_rearrange(t, cases): Determines if the initial flower arrangement can be rearranged to the desired arrangement using adjacent swaps. :param t: Number of test cases. :param cases: List of tuples where each tuple contains an integer n and 2 strings; the initial and desired arrangements. :return: List of \\"Yes\\" or \\"No\\" for each test case. results = [] for case in cases: n, initial, desired = case if sorted(initial) == sorted(desired): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a string s of length n, find the length of the longest substring that contains only unique characters. -----Input----- The single line contains the string s (1 ≤ s.length ≤ 10^5). The string consists of only ASCII characters. -----Output----- Print the length of the longest substring of s that contains only unique characters. -----Examples----- Input abcabcbb Output 3 Input bbbbb Output 1 -----Note----- In the first example, the longest substring with all unique characters is \\"abc\\", with the length of 3. In the second example, the longest substring with all unique characters is \\"b\\", with the length of 1.","solution":"def length_of_longest_unique_substring(s): Returns the length of the longest substring with all unique characters. n = len(s) char_index = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an m x n grid initialized with these three possible values: * `-1` representing a wall, * `0` representing a gate, * `2147483647` representing an empty room. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, leave the room with the value `2147483647`. You may assume that there is at least one gate in the grid. Input * The first line contains two integers `m` and `n` representing the number of rows and columns of the grid, respectively (1 ≤ m, n ≤ 100). * The next `m` lines each contain `n` integers, representing the initial state of the grid. Output * Output the modified grid after filling in distances for all empty rooms. Example Input 4 4 2147483647 -1 0 2147483647 2147483647 2147483647 2147483647 -1 2147483647 -1 2147483647 -1 0 -1 2147483647 2147483647 Output 3 -1 0 1 2 2 1 -1 1 -1 2 -1 0 -1 3 4","solution":"from collections import deque def walls_and_gates(rooms): m, n = len(rooms), len(rooms[0]) queue = deque() for i in range(m): for j in range(n): if rooms[i][j] == 0: queue.append((i, j)) while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and rooms[nx][ny] == 2147483647: rooms[nx][ny] = rooms[x][y] + 1 queue.append((nx, ny)) return rooms"},{"question":"Implement a simplified text editor with undo functionality. The text editor has the following commands: 1. **APPEND text**: Appends the given text to the end of the current content. 2. **POP n**: Removes the last n characters from the current content. 3. **PRINT k**: Prints the k-th character of the current content. If k is out of bounds, print an empty line. 4. **UNDO**: Reverts the content to its state before the last command. You are required to implement this text editor. The sequence of commands and their parameters will be provided as input. Input The first line contains an integer, q, (1 ≤ q ≤ 100) denoting the number of operations. Each of the next q lines contains one of the commands described above. Output For each PRINT command, print the k-th character of the current content. If k is out of bounds, print an empty line. Example Input 7 APPEND hello APPEND world PRINT 5 POP 5 UNDO PRINT 10 UNDO Output o d Explanation 1. APPEND hello -> content is \\"hello\\" 2. APPEND world -> content is \\"helloworld\\" 3. PRINT 5 -> \'o\' is the 5th character 4. POP 5 -> content is \\"hello\\" 5. UNDO -> revert last change, content is \\"helloworld\\" 6. PRINT 10 -> \'d\' is the 10th character 7. UNDO -> revert last change, content is \\"hello\\"","solution":"class SimpleTextEditor: def __init__(self): self.content = \\"\\" self.history = [] def append(self, text): self.history.append(self.content) self.content += text def pop(self, n): self.history.append(self.content) self.content = self.content[:-n] def print_char(self, k): if 0 <= k-1 < len(self.content): print(self.content[k-1]) else: print(\\"\\") def undo(self): if self.history: self.content = self.history.pop() def process_command(self, command): parts = command.split() cmd_type = parts[0] if cmd_type == \\"APPEND\\": text = command[7:] # Command text begins after \\"APPEND \\" self.append(text) elif cmd_type == \\"POP\\": n = int(parts[1]) self.pop(n) elif cmd_type == \\"PRINT\\": k = int(parts[1]) self.print_char(k) elif cmd_type == \\"UNDO\\": self.undo()"},{"question":"You are given two binary strings A and B of the same length. Your task is to find the binary string which is the result of bitwise AND operation on them. Example 1: Input: A = \\"1101\\" B = \\"1011\\" Output: \\"1001\\" Explanation: 1101 AND 1011 = 1001 Example 2: Input: A = \\"111\\" B = \\"000\\" Output: \\"000\\" Explanation: 111 AND 000 = 000 Your Task: You don\'t need to read input or print anything. Your task is to complete the function bitwiseAnd() which takes two binary strings A and B as input and returns the binary string result of A AND B. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= length of A, B <= 10^{5} Both A and B are of the same length.","solution":"def bitwise_and(A: str, B: str) -> str: Returns the binary string resulting from the bitwise AND operation between two binary strings A and B. return \'\'.join(\'1\' if a == \'1\' and b == \'1\' else \'0\' for a, b in zip(A, B))"},{"question":"You are given a string consisting of lowercase English letters. Count the number of vowels (a, e, i, o, u) in the string. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 100) — the string consisting of lowercase English letters. Output Output the number of vowels in the string. Examples Input apple Output 2 Input programming Output 3","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) in the string s. vowels = \'aeiou\' return sum(1 for char in s if char in vowels)"},{"question":"# Task Given a list of integers, find the maximum product that can be obtained by multiplying any three distinct integers from the list. # Example For `arr = [1, 10, 2, 6, 5, 3]`, the output should be `300`. For `arr = [-10, -10, 5, 2]`, the output should be `500`. # Input/Output - `[input]` list of integers `arr` Constraints: `3 ≤ len(arr) ≤ 1000`, `-1000 ≤ arr[i] ≤ 1000`. - `[output]` an integer","solution":"from typing import List def max_product_of_three(arr: List[int]) -> int: Returns the maximum product that can be obtained by multiplying any three distinct integers from the list. :param arr: List of integers :return: Maximum product of three distinct integers arr.sort() # The maximum product will be the maximum between: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (which could be negative) and the largest number return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"You are given an integer N, and your goal is to rearrange the digits of N in such a way that the resulting number is the largest possible even number. If it is not possible to form an even number, return -1. ------ Input Format ------ - A single line containing one integer N. ------ Output Format ------ - Print a single integer representing the largest possible even number that can be formed, or -1 if no such number exists. ------ Constraints ------ 1 ≤ N ≤ 10^{18} ----- Sample Input 1 ------ 1234 ----- Sample Output 1 ------ 4312 ----- Sample Input 2 ------ 13579 ----- Sample Output 2 ------ -1 ----- Explanation 1 ------ For the first input, the largest possible even number that can be formed by rearranging the digits is 4312. For the second input, since all digits are odd, it is not possible to form an even number, hence the output is -1.","solution":"def largest_even_number(N): Returns the largest possible even number that can be formed by rearranging the digits of N, or -1 if it is not possible to form an even number. digits = sorted(str(N), reverse=True) for i in range(len(digits)-1, -1, -1): if int(digits[i]) % 2 == 0: # Move the last found even digit to the end to make sure the number is even even_digit = digits.pop(i) result = int(\'\'.join(digits) + even_digit) return result return -1"},{"question":"You are given a 2D matrix representing a grid of cells, each of which may or may not be an obstacle. The objective is to find a path from the top-left cell to the bottom-right cell of the grid, moving only right or down at any point in time. A path from the top-left to the bottom-right is considered valid if it does not pass through any obstacles and contains the greatest number of zero-value cells. Write a program to determine the number of valid paths from the top-left cell to the bottom-right cell of the grid that pass through the greatest number of zero-value cells. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns of the grid. Each of the next n lines contains m integers, separated by spaces, where each integer is either 0 or 1. A 0 represents a cell without an obstacle, and a 1 represents a cell with an obstacle. Output Print a single integer — the number of valid paths that pass through the greatest number of zero-value cells. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 3 0 1 0 0 0 0 Output 1 Input 2 2 1 0 0 0 Output 0 Note In the first example, there are two valid paths that pass through 4 zero-value cells: (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2) and (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2). In the second example, there is only one valid path that passes through 3 zero-value cells: (0, 0) -> (1, 0) -> (1, 1) -> (1, 2). In the third example, there is no valid path from the top-left cell to the bottom-right cell because the top-left cell is an obstacle. Here are the grids for the examples: Example 1: 0 0 0 0 1 0 0 0 0 Example 2: 0 1 0 0 0 0 Example 3: 1 0 0 0","solution":"def count_max_zero_paths(grid): def dfs(x, y, zero_count): nonlocal max_zeros nonlocal max_paths if x >= n or y >= m or grid[x][y] == 1: return if x == n - 1 and y == m - 1: zero_count += 1 if zero_count > max_zeros: max_zeros = zero_count max_paths = 1 elif zero_count == max_zeros: max_paths += 1 return grid[x][y] = 1 # Visited mark to avoid repeat visits dfs(x + 1, y, zero_count + 1) dfs(x, y + 1, zero_count + 1) grid[x][y] = 0 # Backtrack to explore other paths n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n - 1][m - 1] == 1: return 0 max_zeros = 0 max_paths = 0 dfs(0, 0, 0) return max_paths"},{"question":"Given a list of integers, determine whether the list can be rearranged so that each pair of consecutive elements has at least one element in common. Two elements are considered to have something in common if their greatest common divisor (GCD) is greater than 1. If it is possible to rearrange, return \\"YES\\". Otherwise, return \\"NO\\". Example 1: Input: arr = [12, 15, 18, 30] Output: YES Explanation: One possible arrangement is [18, 12, 30, 15]. - GCD(18, 12) = 6 > 1 - GCD(12, 30) = 6 > 1 - GCD(30, 15) = 15 > 1 Example 2: Input: arr = [7, 19, 23, 29] Output: NO Explanation: No rearrangement of the array results in GCD of consecutive elements being greater than 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canRearrange(arr) which takes a list of integers and returns \\"YES\\" if it is possible to rearrange the list as described, otherwise returns \\"NO\\". Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 100 1 <= arr[i] <= 10000","solution":"import math from itertools import permutations def canRearrange(arr): Determines if the array can be rearranged so that each pair of consecutive elements have GCD > 1. for perm in permutations(arr): is_possible = True for i in range(1, len(perm)): if math.gcd(perm[i - 1], perm[i]) <= 1: is_possible = False break if is_possible: return \\"YES\\" return \\"NO\\""},{"question":"Alice is teaching her younger sister basic math operations using a grid game. She has a rectangular grid of size NxM, with each cell initially set to zero. Alice puts some numbers in certain cells based on specific operations, and she wants her sister to learn how to calculate the sum of numbers in any sub-rectangular area of the grid. The operations are as follows: 1. **Add Value**: Adds a given value to a specific cell in the grid. 2. **Sum Query**: Calculates and returns the sum of all values in a specified sub-rectangular area of the grid. You need to implement a program that processes a sequence of these operations on the grid. Input: - The first line contains three numbers N, M, and Q, representing the dimensions of the grid and the number of operations respectively. - The next Q lines each contain an operation in one of the following formats: - `Add x y v`: Adds value v to the cell at position (x, y) in the grid. - `Sum x1 y1 x2 y2`: Calculates the sum of all values in the rectangular area from cell (x1, y1) to cell (x2, y2) (inclusive). Output: - For every `Sum` operation, output the calculated sum. Constraints: - 1 ≤ N, M ≤ 500 - 1 ≤ Q ≤ 3000 - 1 ≤ x, y, x1, y1, x2, y2 ≤ N, M - Minus 1000 ≤ v ≤ 1000 SAMPLE INPUT: 5 5 6 Add 1 1 5 Add 2 3 7 Sum 1 1 3 3 Add 4 4 -3 Sum 1 1 5 5 Sum 2 2 4 4 SAMPLE OUTPUT: 12 9 4 Explanation: - Initially, the grid is all zeros. - After the first Add operation, the grid looks like: ``` 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` - After the second Add operation, the grid looks like: ``` 5 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` - The first Sum operation calculates the sum of values in the area from (1,1) to (3,3), which is 5 + 0 + 0 + 0 + 0 + 7 + 0 + 0 + 0 = 12 - The third Add operation modifies the grid: ``` 5 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 -3 0 0 0 0 0 0 ``` - The second Sum operation calculates the sum of values in the entire grid, which equals 9. - The third Sum operation calculates the sum of values in the area from (2,2) to (4,4), which equals 7 - 3 = 4.","solution":"def process_operations(N, M, operations): grid = [[0] * M for _ in range(N)] results = [] for operation in operations: if operation.startswith(\\"Add\\"): _, x, y, v = operation.split() x, y, v = int(x) - 1, int(y) - 1, int(v) grid[x][y] += v elif operation.startswith(\\"Sum\\"): _, x1, y1, x2, y2 = operation.split() x1, y1, x2, y2 = int(x1) - 1, int(y1) - 1, int(x2) - 1, int(y2) - 1 total_sum = 0 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): total_sum += grid[i][j] results.append(total_sum) return results"},{"question":"A company wants to create a new treasure hunt game in the city. The city map is represented as a square grid of size n times n, where each cell can either be an empty cell or a blocked cell. The player starts the game from the top-left corner of the grid (cell (0, 0)) and aims to reach the bottom-right corner of the grid (cell (n-1, n-1)). The grid is represented by an n times n matrix of integers where each cell can either be 0 (empty) or 1 (blocked). The player can only move to adjacent empty cells (horizontally or vertically). Write a program to determine the number of distinct paths from the start to the destination such that the player only passes through empty cells. Input The input consists of a single test case structured as follows: - The first line contains an integer n (1 leq n leq 100) representing the size of the grid. - The next n lines each contain n space-separated integers representing the grid, where each integer is either 0 (empty) or 1 (blocked). Output Print an integer representing the number of distinct paths from the top-left corner to the bottom-right corner. Examples Input 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 0 1 0 0 1 0 0 0 0 Output 1","solution":"def find_paths(grid): n = len(grid) if grid[0][0] == 1 or grid[-1][-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 0: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are given an array of integers nums, where 1 ≤ nums[i] ≤ n (n is the length of the array), and some elements appear multiple times while others appear only once. Write an algorithm to find all the elements of nums that appear twice. You must write an algorithm that runs in O(n) time complexity and uses only constant extra space. -----Input----- The input is a single list of integers `nums` where 1 ≤ `nums[i]` ≤ `n` and `n` is the length of the array. `n` will be in the range [1, 10^5]. -----Output----- The output is a list of integers that appear twice in the input list. -----Examples----- Input [4,3,2,7,8,2,3,1] Output [2, 3] Input [1,1,2] Output [1] Input [1] Output []","solution":"def find_duplicates(nums): Returns a list of integers that appear twice in the input list nums. result = [] for i in range(len(nums)): index = abs(nums[i]) - 1 if nums[index] < 0: result.append(abs(nums[i])) else: nums[index] = -nums[index] return result"},{"question":"You are given a string consisting of lowercase and uppercase letters. Your task is to determine whether you can rearrange the characters in the string such that the resulting string has no two adjacent characters that are the same. -----Input----- The input consists of a single string s (1 le |s| le 10^5), where |s| denotes the length of the string. -----Output----- Output \\"Yes\\" (without quotes) if it is possible to rearrange the given string so that no two adjacent characters are the same, otherwise output \\"No\\" (without quotes). -----Examples----- Input aaabbc Output Yes Input aaab Output No Input aA Output Yes Input zzzzyyyy Output Yes Input abcdefghijabcdefghijabcdefghijabcdefghij Output Yes -----Note----- In the first example, one possible rearrangement is \\"ababac\\". In the second example, it is impossible to rearrange \\"aaab\\" to meet the criteria. For the third example, \\"aA\\" already meets the condition. The fourth example can be rearranged as \\"zyzy\\", and the fifth example has enough diversity in characters to be rearranged as required.","solution":"from collections import Counter def can_rearrange_string(s): Determines if the characters in the string can be rearranged such that no two adjacent characters are the same. :param s: str - input string consisting of lowercase and uppercase letters :return: str - \\"Yes\\" if it\'s possible to rearrange, \\"No\\" otherwise freq = Counter(s) max_freq = max(freq.values()) # The condition to check if rearrangement is possible if max_freq > (len(s) + 1) // 2: return \\"No\\" return \\"Yes\\""},{"question":"Jerry is participating in a virtual running competition. Competitors can run different distances, but they must run a given minimum distance in each round. Jerry is curious whether he can cross a certain threshold distance by running a specific number of rounds, each with a distance equal to or more than the given minimum. Help Jerry determine if he can achieve his goal. -----Input----- The first line contains three integers d, r, and m (1 ≤ d, r, m ≤ 10^18) — the total distance Jerry wants to cover, the minimum distance Jerry must run in each round, and the number of rounds respectively. -----Output----- If Jerry can successfully cover at least the total distance d by running exactly r rounds, print \\"POSSIBLE\\" (without quotes). If it is not possible, print \\"IMPOSSIBLE\\" (without quotes). You can print each letter in arbitrary case (upper or lower). -----Examples----- Input 10 4 3 Output POSSIBLE Input 9 3 2 Output IMPOSSIBLE -----Note----- In the first example, Jerry needs to cover 10 units of distance by running at least 4 units in each of the 3 rounds, which totals exactly 12 units. Hence, it is possible. In the second example, Jerry needs to cover 9 units of distance, but running at least 3 units in each of the 2 rounds only totals 6 units, which is less than 9 units. Hence, it is impossible.","solution":"def can_achieve_threshold(d, r, m): Determines if Jerry can achieve at least distance d by running exactly r rounds, each with a minimum distance of m in each round. Parameters: d (int): The total distance to cover. r (int): The minimum distance of each round. m (int): The number of rounds. Returns: str: \\"POSSIBLE\\" if the total distance d can be achieved, otherwise \\"IMPOSSIBLE\\". if r * m >= d: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"Mark is playing a game where he needs to move from the top-left corner of an `m x n` grid (0, 0) to the bottom-right corner of the grid (m-1, n-1). He can move either down or right at any point in time. However, on each cell of the grid is written a non-negative integer that represents the cost to step on that cell. Help Mark find the minimum cost path from the top-left corner to the bottom-right corner of the grid. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 1000). The next m lines each contain n space-separated integers representing the cost on that cell (0 ≤ cost ≤ 10000). -----Output----- Print a single integer — the minimum cost to move from the top-left to the bottom-right corner of the grid. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 -----Note----- In the first sample, the path with minimum cost is (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2), with a total cost of 1 + 1 + 4 + 2 + 1 = 7. In the second sample, the path with minimum cost is (0, 0) -> (1, 0) -> (1, 1), with a total cost of 1 + 1 + 1 = 3.","solution":"def min_cost_path(grid): Returns the minimum cost to move from the top-left to the bottom-right of the grid. m = len(grid) n = len(grid[0]) # Create a dp array to store the minimum costs dp = [[0]*n for _ in range(m)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]) # Return the minimum cost to reach the bottom-right corner return dp[m-1][n-1]"},{"question":"Create a function that generates a random valid Sudoku board. A valid Sudoku board is a 9x9 grid where each row, each column, and each of the nine 3x3 sub-grids (also known as boxes) contains the digits 1 through 9 without repetition. The function should ensure that the generated board is completely filled and adheres to these constraints. **Input** No input is required for this function. The function should only take one parameter: a seed for the random number generator to ensure reproducibility. **Output** A single 9x9 grid of integers, representing a valid Sudoku board. **Examples** ```python print(generate_sudoku_board(42)) ``` ```plaintext [[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]] ``` Use this example to verify that your Sudoku board generation is correct. The exact sequence of numbers may vary, but it should always adhere to Sudoku rules.","solution":"import random def generate_sudoku_board(seed=None): Generate a 9x9 Sudoku board that is completely filled and valid. def is_valid(board, row, col, num): # Check if \'num\' is not in the given row if num in board[row]: return False # Check if \'num\' is not in the given column if num in [board[r][col] for r in range(9)]: return False # Check if \'num\' is not in the related 3x3 grid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for r in range(start_row, start_row + 3): for c in range(start_col, start_col + 3): if board[r][c] == num: return False return True def fill_sudoku(board): # Using backtracking to fill the sudoku board for row in range(9): for col in range(9): if board[row][col] == 0: random.shuffle(numbers) for num in numbers: if is_valid(board, row, col, num): board[row][col] = num if fill_sudoku(board): return True board[row][col] = 0 return False return True if seed is not None: random.seed(seed) board = [[0]*9 for _ in range(9)] numbers = list(range(1, 10)) fill_sudoku(board) return board"},{"question":"You are given a grid-based urban area of size N x M (1 ≤ N, M ≤ 500). Each cell in this grid can either be an open space (represented by \'.\') or a building (represented by \'#\'). Fire can break out in any one of the open spaces, and it spreads to its four adjacent cells (north, south, east, west) any time they are also open spaces. However, fire cannot spread through buildings. Your task is to determine the number of distinct configurations of the initial fire\'s position such that the fire will eventually consume all open spaces without being blocked by buildings. Input - The first line contains two integers N and M, the height and the width of the grid. - The following N lines consist of exactly M characters each, representing the urban area grid. Each character is either \'.\' (open space) or \'#\' (building). You may assume there is at least one open space on the grid. The input terminates when N = 0 and M = 0. Your program must not process this case. Output For each test case, print the number of valid initial fire positions such that the fire consumes all open spaces, modulo 1,000,000,007. Example Input: 3 3 ... .#. ... 4 4 .... .. .. .... 0 0 Output: 17 16 Explanation: 1. In the first example, the fire can start in any of the 8 open spaces. 2. In the second example, given the layout of the buildings, the fire can start in any of the 16 open spaces and still consume all open spaces.","solution":"def count_valid_fire_starts(grid, n, m): MOD = 1000000007 def dfs(x, y, visited): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'#\' or visited[x][y]: return visited[x][y] = True dfs(x + 1, y, visited) dfs(x - 1, y, visited) dfs(x, y + 1, visited) dfs(x, y - 1, visited) open_spaces = {(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'.\'} start_positions = 0 for x, y in open_spaces: visited = [[False] * m for _ in range(n)] dfs(x, y, visited) if all(visited[i][j] or grid[i][j] == \'#\' for i, j in open_spaces): start_positions += 1 start_positions %= MOD return start_positions def solve(): import sys input = sys.stdin.read data = input().split() index = 0 results = [] while index < len(data): n = int(data[index]) m = int(data[index + 1]) index += 2 if n == 0 and m == 0: break grid = [] for _ in range(n): grid.append(data[index]) index += 1 results.append(count_valid_fire_starts(grid, n, m)) for result in results: print(result)"},{"question":"The Fibonacci Sequence is a series of numbers where the next term is found by adding up the two numbers before it. Starting with 0 and 1, the sequence goes 0, 1, 1, 2, 3, 5, 8, 13, and so on. Write a Python function texttt{fibonacci_even_sum}(n) that returns the sum of the even-valued terms in the Fibonacci sequence up to, but not including, the given number boldsymbol{n}. # Constraints - The input boldsymbol{n} will be a positive integer. - boldsymbol{n} will not exceed 10^6. # Sample Input 0 10 # Sample Output 0 10 # Sample Input 1 100 # Sample Output 1 44 **Explanation:** In the first example, the Fibonacci terms below 10 are 0, 1, 1, 2, 3, 5, 8. The even-valued terms are 0, 2, and 8, and their sum is 10. In the second example, the Fibonacci terms below 100 are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89. The even-valued terms are 0, 2, 8, and 34, and their sum is 44.","solution":"def fibonacci_even_sum(n): Returns the sum of the even-valued terms in the Fibonacci sequence up to, but not including, the given number n. Parameters: n (int): The upper limit (exclusive) for the Fibonacci sequence terms. Returns: int: The sum of the even-valued Fibonacci terms less than n. # Init first two Fibonacci numbers a, b = 0, 1 even_sum = 0 # While the next Fibonacci number is less than n while a < n: if a % 2 == 0: even_sum += a a, b = b, a + b # Move to next Fibonacci number return even_sum"},{"question":"Polycarp is interested in palindromic numbers. He wants to find the smallest palindromic number greater than or equal to a given integer N. A palindromic number is a number that reads the same forwards and backwards (like 121 or 1331). Given an integer N, help Polycarp find the smallest palindromic number greater than or equal to N. -----Input----- The only line in the input contains an integer N (1 le N le 1000). -----Output----- Print the smallest palindromic number that is greater than or equal to N. -----Examples----- Input 120 Output 121 Input 543 Output 545 Input 9 Output 9 Input 200 Output 202","solution":"def smallest_palindrome_gte(N): Returns the smallest palindromic number greater than or equal to N. def is_palindrome(num): return str(num) == str(num)[::-1] while True: if is_palindrome(N): return N N += 1"},{"question":"Chef is a fan of geometric patterns and loves to explore different triangle properties. He\'s particularly interested in checking if a set of points in the plane form the vertices of an equilateral triangle. Given three points A(x1, y1), B(x2, y2), and C(x3, y3), Chef wants to determine if they form an equilateral triangle. An equilateral triangle is a triangle in which all three sides have the same length. To check if the given points form an equilateral triangle, you can use the distance formula to calculate the distances between each pair of points. The formula to calculate the distance between two points (x1, y1) and (x2, y2) is: [ text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] If the distances between each pair of points (A-B, B-C, and C-A) are all equal, then the points form an equilateral triangle. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of three lines, each containing two integers representing the coordinates of points A, B, and C respectively. ------ Output ------ For each test case, output \\"YES\\" if the given points form an equilateral triangle, and \\"NO\\" otherwise. ------ Constraints: ------ 1 ≤ T ≤ 100 -10^4 ≤ x1, y1, x2, y2, x3, y3 ≤ 10^4 ----- Sample Input 1 ------ 2 0 0 3 0 1 2.598 0 0 3 0 1 1 ----- Sample Output 1 ------ YES NO ----- Explanation 1 ------ In the first test case, the points (0, 0), (3, 0), and (1, 2.598) form an equilateral triangle. In the second test case, the points (0, 0), (3, 0), and (1, 1) do not form an equilateral triangle.","solution":"import math def is_equilateral_triangle(x1, y1, x2, y2, x3, y3): def distance(x1, y1, x2, y2): return math.sqrt((x2 - x1)**2 + (y2 - y1)**2) d1 = distance(x1, y1, x2, y2) d2 = distance(x2, y2, x3, y3) d3 = distance(x3, y3, x1, y1) epsilon = 1e-6 # Small tolerance value to account for floating point precision return abs(d1 - d2) < epsilon and abs(d2 - d3) < epsilon and abs(d1 - d3) < epsilon def check_equilateral_triangles(test_cases): results = [] for points in test_cases: x1, y1, x2, y2, x3, y3 = points if is_equilateral_triangle(x1, y1, x2, y2, x3, y3): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given two integers n and k, return all possible combinations of k numbers out of the range [1, n]. You may return the answer in any order. Example: Input: n = 4 k = 2 Output: [ [1,2], [1,3], [1,4], [2,3], [2,4], [3,4] ] Explanation: There are a total of 6 combinations with 2 numbers out of the range [1, 4]: - [1,2] - [1,3] - [1,4] - [2,3] - [2,4] - [3,4] Constraints: - 1 <= n <= 20 - 1 <= k <= n","solution":"from itertools import combinations def combine(n, k): Return all possible combinations of k numbers out of the range [1, n]. return list(combinations(range(1, n+1), k))"},{"question":"You are an avid collector of beautiful seashells. Each time you visit the beach, you can pick up one seashell. However, you can only carry one seashell at a time. During each of the n visits to the beach, one of the following two events will happen: 1) You may find a seashell with beauty score B. You can choose to keep it, replacing your current seashell if you have one, or discard it. 2) You may encounter a collector offering to buy a seashell with a beauty score B from you. If you have a seashell with the beauty score B, you can sell it for B dollars. Given the series of events over n visits, write a program to determine the maximum amount of money you can earn from selling seashells. Input The first line contains an integer n denoting the number of visits. Each of the next n lines contains the description of the event on a particular visit. If you find a seashell with beauty score B, the line contains \\"found\\" followed by a blank space and then the integer B. If you encounter a collector offering to buy a seashell with beauty score B, the line contains \\"offer\\" followed by a blank space and then the integer B. Output Output the maximum amount of money you can earn in dollars based on the events. Constraints 1 ≤ n ≤ 10000 1 ≤ B ≤ 100000 Example Input: 5 found 10 found 20 offer 10 found 30 offer 30 Output: 30 Explanation If you choose to keep the seashell with beauty score 30 and sell it when you get the offer, you can make a profit of 30 dollars, which is the maximum profit that can be made.","solution":"def max_earnings(n, events): current_beauty = None total_earnings = 0 for event in events: action, beauty = event.split() beauty = int(beauty) if action == \\"found\\": if current_beauty is None or beauty > current_beauty: current_beauty = beauty elif action == \\"offer\\": if current_beauty == beauty: total_earnings += beauty current_beauty = None return total_earnings"},{"question":"A company uses a secure algorithm to generate unique product codes. Each product code consists of n characters, and each character is either an uppercase letter (A-Z) or a digit (0-9). To enhance the security of the product codes, they implement a special property: no two consecutive characters in the code should be the same. Your task is to write a program that generates a valid product code of length n. If multiple valid codes exist, you can output any one of them. If it is impossible to generate such a code, your program should indicate that. Input: The input consists of a single integer n (1 ≤ n ≤ 1000), representing the length of the product code to be generated. Output: Output a valid product code of length n where no two consecutive characters are the same, or \\"NO\\" if it is impossible to generate such a code. Example 1: Input: 5 Output: A1B2C Example 2: Input: 2 Output: A1 Example 3: Input: 1 Output: A Note: - In Example 1, the product code \\"A1B2C\\" is valid because no two consecutive characters are the same. - In Example 2, the product code \\"A1\\" is valid for the same reason. - In Example 3, \\"A\\" is a valid single-character product code. - If n > 36, it may be more challenging to find a valid product code, but it is not impossible.","solution":"import string def generate_product_code(n): Generates a valid product code of length n where no two consecutive characters are the same. if n <= 0: return \\"NO\\" chars = string.ascii_uppercase + string.digits code = [] # Initialize by adding alternating characters from uppercase letters and digits for i in range(n): if i % 2 == 0: code.append(chars[i % 26]) else: code.append(chars[26 + (i // 2 % 10)]) return \'\'.join(code)"},{"question":"You are given a string s consisting of lowercase English alphabets. The string s contains exactly n characters. Your task is to count the number of contiguous substrings of s that have more distinct characters than the length of the substring. Input Format - A single line containing the string s. Constraints - 1 leq n leq 10^5 - The string s contains only lowercase English alphabets. Output Format - Print a single integer denoting the number of contiguous substrings of s that satisfy the condition. Sample Input abcabc Sample Output 0 Explanation In the given sample, the string is \\"abcabc\\". For any contiguous substring, the maximum number of distinct characters will be no more than its length, hence there are no substrings satisfying the condition.","solution":"def count_invalid_substrings(s): # The number of contiguous substrings with more distinct characters than their length is always zero. return 0"},{"question":"For a given directed graph, determine if there is a path from node u to node v for a set of queries. The given graph consists of n nodes and m directed edges, with unique IDs for each node ranging from 0 to n-1. Constraints * 2 ≤ n ≤ 5000 * 1 ≤ m ≤ 10000 * 1 ≤ q ≤ 10000 Input n m u1 v1 u2 v2 : um vm q a1 b1 a2 b2 : aq bq The first line of input contains two integers n and m, representing the number of nodes and the number of directed edges, respectively. The next m lines each contain two integers (ui, vi), representing a directed edge from node ui to node vi. The next line contains an integer q, the number of queries. The following q lines each contain two integers (ai, bi), representing a query to check if there is a path from node ai to node bi. Output For each query, print \\"YES\\" if there is a path from node ai to node bi, otherwise print \\"NO\\". Example Input 5 6 0 1 1 2 2 3 3 4 1 3 3 1 4 0 4 1 4 3 0 0 2 Output YES YES NO YES","solution":"def can_reach(n, m, edges, queries): from collections import deque def bfs(start, end): queue = deque([start]) visited = [False] * n visited[start] = True while queue: node = queue.popleft() if node == end: return True for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return False # Build the graph graph = [[] for _ in range(n)] for u, v in edges: graph[u].append(v) results = [] for a, b in queries: if bfs(a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string containing a large number, check whether the digits of the number can be rearranged to form a multiple of 3. Print 1 if possible, otherwise print 0. Example 1: Input: num = \\"120\\" Output: 1 Explanation: The digits can be rearranged to form 102, which is a multiple of 3. Example 2: Input: num = \\"1001\\" Output: 0 Explanation: No rearrangement of \'1001\' results in a multiple of 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canArrangeMultipleOf3() which takes the string num as input and returns the answer. Expected Time Complexity: O(|num|) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |num| ≤ 10^{5}","solution":"def canArrangeMultipleOf3(num): Check whether the digits of the number can be rearranged to form a multiple of 3. Returns 1 if possible, otherwise 0. # Calculate the sum of the digits digit_sum = sum(int(digit) for digit in num) # Check if the sum of the digits is divisible by 3 if digit_sum % 3 == 0: return 1 else: return 0"},{"question":"You are organizing a marathon event and you need to distribute water bottles to runners at various checkpoints. There are a total of m runners participating in the marathon and k checkpoints along the route. Each runner will stop at exactly one checkpoint to collect a water bottle. The runner will always stop at one of their preferred checkpoints to collect the bottle. Due to the constraints on the number of water bottles at each checkpoint, you are tasked with distributing them in such a way that the maximum number of runners can be accommodated at their preferred checkpoints. Given m runners and their preferences, and the capacity of each checkpoint, find the maximum number of runners that can be accommodated with their water bottle preferences. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer m (1 le m le 100) — the number of runners. The second line contains m integers, the i-th integer being p_i (1 le p_i le k) — the preferred checkpoint of the i-th runner. The next line contains k integers, the j-th integer being c_j (0 le c_j le m) — the capacity of the j-th checkpoint. -----Output----- For each test case, print a single integer — the maximum number of runners that can be accommodated at their preferred checkpoints. -----Examples----- Input 3 5 1 2 2 3 3 2 1 2 4 1 2 3 3 0 1 2 6 1 1 2 2 3 3 1 1 1 Output 4 3 3 -----Note----- In the first testcase, out of 5 runners, the first runner prefers checkpoint 1, the second and third runners prefer checkpoint 2, and the fourth and fifth runners prefer checkpoint 3. Considering the capacity of each checkpoint, which are 2, 1, and 2 respectively, the maximum number of accommodated runners following their preferences are: - First runner goes to checkpoint 1 (remaining capacity 1) - Second runner goes to checkpoint 2 (remaining capacity 0) - Third runner goes to checkpoint 2 (remaining capacity 0, no more can be accommodated) - Fourth runner goes to checkpoint 3 (remaining capacity 1) - Fifth runner goes to checkpoint 3 (remaining capacity 0) Thus, the maximum number of accommodated runners is 4.","solution":"def max_accommodated_runners(t, test_cases): results = [] for case in test_cases: m, preferences, capacities = case pref_count = [0] * (len(capacities)) for pref in preferences: pref_count[pref - 1] += 1 total_accommodated = 0 for i in range(len(capacities)): total_accommodated += min(pref_count[i], capacities[i]) results.append(total_accommodated) return results"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization differences). You are given a string that contains letters and spaces. Define a function to determine if the string is a palindrome. To do so, you need to: 1. Remove all spaces from the string. 2. Convert all characters to lowercase. 3. Check if the resulting string is the same when read forward and backward. If it is a palindrome: ```python return \\"Palindrome\\" ``` Otherwise: ```python return \\"Not a palindrome\\" ``` **Example test cases:** ```python \\"Madam In Eden I\'m Adam\\" \\"Not a palindrome\\" Output: \\"Palindrome\\" \\"Not a palindrome\\" ``` **Constraints:** - Input string will not be empty. - The input string can be up to 1000 characters long.","solution":"def is_palindrome(s): Determines if the given string is a palindrome, ignoring spaces, punctuation, and capitalization differences. :param s: input string :return: \\"Palindrome\\" if the string is a palindrome, otherwise \\"Not a palindrome\\" # Remove all spaces and convert to lowercase cleaned = \'\'.join(c.lower() for c in s if c.isalnum()) # Check if the cleaned string is the same as its reverse if cleaned == cleaned[::-1]: return \\"Palindrome\\" else: return \\"Not a palindrome\\""},{"question":"Problem You are tasked with helping an amusement park create a system that can manage the lengths of waiting queues for different rides. The amusement park has several rides, each with a different capacity and popularity. Based on the number of visitors, you need to calculate the distribution of visitors across these rides and keep track of the waiting times for each ride. To achieve this, you will receive the number of rides and the number of visitors for each minute. Each ride has a fixed capacity (number of visitors it can handle per minute). Your job is to distribute the visitors to the rides efficiently, ensuring that each ride handles no more visitors than its capacity each minute. If a visitor cannot be assigned to a ride because all rides are at capacity, they will wait in a queue. For each test case, output the total number of visitors that will be in the queue after processing all the visitors for the given minute. Sample Input The input contains multiple test cases. Each test case begins with a line containing two integers: the number of rides (n) and the number of visitors for the given minute (v). The next n lines each contain two integers: the ride’s capacity (c) and popularity (p). Popularity is a factor determining how likely visitors are to pick that ride relative to others. The input is terminated by a block with n = v = 0. Output For each test case, output a single integer – the total number of visitors that will be in the queue after processing all the visitors for that minute. Constraints - 1 ≤ n ≤ 100 - 0 ≤ v ≤ 1000 - 1 ≤ c ≤ 50 - 1 ≤ p ≤ 10 Example Input: 3 20 15 3 10 1 5 1 2 25 7 2 10 5 0 0 Output: 0 8","solution":"def calculate_queues(test_cases): results = [] for rides, visitors, data in test_cases: total_capacity = 0 ride_capacity = [] for capacity, popularity in data: total_capacity += capacity ride_capacity.append(capacity) remaining_visitors = max(0, visitors - total_capacity) results.append(remaining_visitors) return results"},{"question":"A robot is placed in a grid of size n by m. The robot starts at the top-left corner (1, 1) and wants to reach the bottom-right corner (n, m). The robot can only move to the right or down one cell at a time. However, some cells in the grid contain obstacles, which the robot cannot pass through. Determine the number of unique paths the robot can take to reach its destination, modulo 10^9 + 7. -----Input----- The first line contains two integers n and m, where 1 ≤ n, m ≤ 1000, denoting the dimensions of the grid. The second line contains an integer k, where 0 ≤ k ≤ n*m, indicating the number of obstacles. The following k lines each contain two integers r and c, where 1 ≤ r ≤ n and 1 ≤ c ≤ m, denoting the row and column of an obstacle. -----Output----- Output the number of unique paths from the top-left corner to the bottom-right corner of the grid, modulo 10^9 + 7. -----Examples----- Input 3 3 1 2 2 Output 2 Input 4 4 3 2 2 3 2 2 4 Output 3 Input 2 2 0 Output 2","solution":"MOD = 10**9 + 7 def unique_paths(n, m, k, obstacles): # Create a grid to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] # Set obstacle positions in the grid to -1 for r, c in obstacles: dp[r-1][c-1] = -1 # Base case: Starting point (0, 0) if dp[0][0] == -1: # If starting point is an obstacle, no paths are possible return 0 dp[0][0] = 1 # Fill the grid with the number of ways to reach each cell for i in range(n): for j in range(m): # Skip obstacles if dp[i][j] == -1: continue # Add ways from the left and top cells if i > 0 and dp[i-1][j] != -1: dp[i][j] += dp[i-1][j] dp[i][j] %= MOD if j > 0 and dp[i][j-1] != -1: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD # The answer is the value at the bottom-right corner return dp[n-1][m-1] # Example usage n, m, k = 3, 3, 1 obstacles = [(2, 2)] print(unique_paths(n, m, k, obstacles)) # Output: 2"},{"question":"Given a binary tree with a head reference as T, the task is to perform a vertical order traversal of the binary tree and return the nodes in a list of lists, where each list contains nodes at a particular vertical level from left to right. Vertical order traversal of a binary tree involves visiting nodes in columns. Nodes that are present in the same vertical line are part of the same list. If two nodes are part of the same vertical, but are at different levels, they appear in the list from top to bottom. Example 1: Input: T: 3 / 9 20 / 15 7 Output: [[9], [3, 15], [20], [7]] Explanation: - The leftmost vertical line has only one node 9. - The next vertical line has nodes 3 and 15. - The next vertical line has only one node 20. - The rightmost vertical line has only one node 7. Example 2: Input: T: 1 / 2 3 / 4 5 6 Output: [[4], [2], [1, 5], [3], [6]] Explanation: - The leftmost vertical line has only one node 4. - The next vertical line has only one node 2. - The next vertical line has nodes 1 and 5. - The next vertical line has only one node 3. - The rightmost vertical line has only one node 6. Your Task: You don\'t need to read input or print anything. Your task is to complete the function verticalOrderTraversal() that takes root node of T as parameter and returns a list of lists, where each list contains nodes at a particular vertical level from left to right. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= Number of nodes <= 10^4 0 <= Value of nodes <= 10^4","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def verticalOrderTraversal(root): if not root: return [] column_table = defaultdict(list) queue = deque([(root, 0)]) while queue: node, column = queue.popleft() if node is not None: column_table[column].append(node.val) queue.append((node.left, column - 1)) queue.append((node.right, column + 1)) sorted_columns = sorted(column_table.keys()) return [column_table[column] for column in sorted_columns]"},{"question":"Given a balanced binary tree, determine the sum of the values of all nodes at a specified depth. The root node is at depth 0. The tree is represented as a list in level-order traversal where None represents missing nodes. If no nodes exist at the specified depth, return 0. Example: Input: tree = [1, 2, 3, 4, 5, None, None], depth = 2 Output: 9 Explanation: The nodes at depth 2 are 4 and 5, and their sum is 4 + 5 = 9. Example: Input: tree = [1, None, 2, 3, None, None, 4], depth = 1 Output: 2 Explanation: The nodes at depth 1 are None and 2. Since None represents a missing node, we only sum the node with value 2. Your Task: You do not need to read input or print anything. Complete the function sumAtDepth() which takes the list representing the tree and the integer depth as input, and returns the sum of node values at the given depth. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(tree) <= 10^4 -10^4 <= node value <= 10^4 0 <= depth <= 10","solution":"def sumAtDepth(tree, depth): Returns the sum of the values of all nodes at the specified depth. Args: tree (list): The list representing the tree in level-order traversal. depth (int): The specified depth. Returns: int: Sum of the values of all nodes at the specified depth. if not tree or depth < 0: return 0 current_depth = 0 level_start = 0 level_end = 1 while level_start < len(tree): if current_depth == depth: return sum(node for node in tree[level_start:level_end] if node is not None) level_start = level_end level_end = level_start + 2 ** (current_depth + 1) current_depth += 1 return 0"},{"question":"Robin has a robotic pet that he charges every night. The robotic pet operates for a number of hours based on the battery percentage it was charged to. Robin wants to know how many full days his pet can operate without any recharge if he charges it to exactly P% capacity each night, and every day it consumes D% of its capacity. Determine how many full days the pet can function before the battery runs out. ------ Input Format ------ - First line of the input contains T, the number of testcases. Then the test cases follow. - Each test case contains 2 space-separated integers P (the percentage the battery is charged to each night) and D (the percentage of battery the pet uses every day). ------ Output Format ------ For each test case, print the number of full days the pet will function before the battery depletes. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ P ≤ 100 1 ≤ D ≤ 100 ----- Sample Input 1 ------ 3 100 20 60 30 50 50 ----- Sample Output 1 ------ 5 2 1 ----- Explanation 1 ------ - Test Case 1: Robin\'s pet is charged to 100% every night and uses 20% of the battery every day. It will completely deplete the battery in 5 days. - Test Case 2: Robin\'s pet is charged to 60% every night and uses 30% of the battery every day. It will completely deplete the battery in 2 days. - Test Case 3: Robin\'s pet is charged to 50% every night and uses 50% of the battery every day. It will completely deplete the battery in 1 day.","solution":"def full_days_of_operation(T, test_cases): Given the number of test cases and a list of tuples where each tuple contains two integers P and D, returns the number of full days each robotic pet can operate before the battery depletes. Args: T : int : number of test cases test_cases : list of tuples : each tuple contains two integers P and D Returns: list of int : number of full days the pet can operate for each test case results = [] for P, D in test_cases: results.append(P // D) return results"},{"question":"Given a binary string S of length N, you are allowed to perform the following operation any number of times: Select any substring of S with odd length, and reverse it. Determine if it is possible to make the entire string S a palindrome using the allowed operation. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains a binary string S of length N. ------ Output ------ For each test case, print a single line containing the string \\"Yes\\" if it is possible to make the string a palindrome or \\"No\\" otherwise (without quotes). You may print each character of each string in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} The sum of N over all test cases does not exceed 10^{6} ------ Sample Input 1 ------ 4 5 11011 6 100001 3 010 4 1110 ------ Sample Output 1 ------ Yes Yes Yes No ------ Explanation 1 ------ Example case 1: The string 11011 is already a palindrome, so the output is \\"Yes\\". Example case 2: The string 100001 is already a palindrome, so the output is \\"Yes\\". Example case 3: We can select the whole string 010 and reverse it to form 010, which is a palindrome. Example case 4: Reversal of any odd length substring won\'t help forming a palindrome, hence output is \\"No\\".","solution":"def can_be_palindrome(T, test_cases): results = [] for i in range(T): N, S = test_cases[i] if S == S[::-1]: # If the string is already a palindrome results.append(\\"Yes\\") elif N % 2 == 1: # If the length of the string is odd, we can always make it a palindrome results.append(\\"Yes\\") else: # Check if there is any difference between the original and reversed string found_difference = False for j in range(N // 2): if S[j] != S[N - j - 1]: found_difference = True break if found_difference: results.append(\\"No\\") else: results.append(\\"Yes\\") return results"},{"question":"You are given a list of integers and asked to group them. An **element group** in the list is defined as a sequence of one or more contiguous integers where all elements are the same. Your task is to determine whether it is possible to rearrange the list such that each element group appears exactly once in the rearranged list without merging with other groups. -----Input----- The first line contains an integer n (1 leq n leq 100), the length of the list. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 100). -----Output----- Output \\"Yes\\" if it is possible to rearrange the list to meet the criteria, otherwise output \\"No\\". -----Examples----- Sample Input: 5 1 1 2 2 1 Sample Output: Yes Sample Input: 5 1 2 3 2 1 Sample Output: No","solution":"def can_rearrange_groups(lst): from itertools import groupby # Finding unique groups groups = [list(group) for key, group in groupby(lst)] elements_in_groups = [set(group) for group in groups] return all(len(group) == 1 for group in elements_in_groups) # Function to check if the sequence ca be rearranged def is_valid_group_rearrangement(lst): groups = {} # Identifying groups i = 0 while i < len(lst): start = i while i < len(lst) and lst[i] == lst[start]: i += 1 group = tuple(lst[start:i]) if group in groups: groups[group] += 1 else: groups[group] = 1 # If any group appears more than once return No if any(count > 1 for count in groups.values()): return \\"No\\" return \\"Yes\\""},{"question":"Write a function that takes a list of dictionaries and merges them into a single dictionary. Each dictionary in the list will have non-overlapping keys. The final output should be a dictionary that contains all key-value pairs from the input dictionaries. For example, given: ``` merge_dicts([{\\"a\\": 1, \\"b\\": 2}, {\\"c\\": 3}, {\\"d\\": 4, \\"e\\": 5}]) ``` The output should be: ``` {\\"a\\": 1, \\"b\\": 2, \\"c\\": 3, \\"d\\": 4, \\"e\\": 5} ``` If the input list is empty, the function should return an empty dictionary. Good luck! If you like this task, please try: [Merging two dictionaries](https://www.codewars.com/kata/583af10620dda4da270000c5) [Flatten a shallow list into a dictionary](https://www.codewars.com/kata/5827bc50f524dd029d0005f2)","solution":"def merge_dicts(list_of_dicts): Takes a list of dictionaries and merges them into a single dictionary. Parameters: list_of_dicts (list): A list of dictionaries with non-overlapping keys. Returns: dict: A single dictionary containing all key-value pairs from the input dictionaries. merged_dict = {} for d in list_of_dicts: merged_dict.update(d) return merged_dict"},{"question":"A little girl Alice loves solving mazes and has recently encountered a new type of maze called a Digging Muncher Maze. This labyrinthine structure consists of a grid with m rows and m columns. Each cell in the grid contains an integer representing the amount of dirt in that cell. Alice wants to traverse from the top-left cell of the grid to the bottom-right cell. She can move only right or down at each step. Alice has a special digging tool that can remove dirt from any cell she traverses. She aims to find a path that minimizes the total amount of dirt encountered along the way. Help Alice find the minimum total amount of dirt she has to clear to get from the top-left to the bottom-right cell. -----Input----- The first line contains an integer m (2 ≤ m ≤ 100) — the number of rows and columns in the grid. Each of the next m lines contains m space-separated integers denoting the amount of dirt in each cell of the grid. Each integer lies between 0 and 100. -----Output----- Print a single integer — the minimum total amount of dirt Alice needs to clear to reach the bottom-right cell from the top-left cell. -----Examples----- Input 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 1 2 3 4 Output 7 -----Note----- In the first sample, Alice can take the following path to minimize the amount of dirt: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). The total amount of dirt along this path is 1 + 1 + 4 + 2 + 1 = 9. In the second sample, the only path is (1,1) -> (1,2) -> (2,2), with a total amount of dirt being 1 + 2 + 4 = 7.","solution":"def min_dirt_path(m, grid): Finds the minimum total amount of dirt Alice needs to clear to reach the bottom-right cell from the top-left cell by only moving right or down at each step. Parameters: - m: int, the number of rows and columns in the grid. - grid: List[List[int]], a 2D list representing the amount of dirt in each cell of the grid Returns: - int, the minimum total amount of dirt Alice needs to clear. dp = [[0]*m for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[0][i] = dp[0][i-1] + grid[0][i] dp[i][0] = dp[i-1][0] + grid[i][0] for i in range(1, m): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][j]"},{"question":"John is participating in a treasure hunt and has found two strings, s_1 and s_2. These strings contain only lowercase English letters. John knows that these strings are special because when certain characters are removed from them, they can become identical. Your task is to help John find the minimum number of characters needed to be deleted from both s_1 and s_2 so that the remaining substrings are exactly the same. -----Input----- The first line of the input contains the string s_1 (1 le |s_1| le 1000). The second line of the input contains the string s_2 (1 le |s_2| le 1000). -----Output----- Output a single integer: the minimum number of characters to be deleted from both strings so that the remaining substrings are identical. -----Examples----- Input sea eat Output 2 Input abcde ace Output 2 -----Note----- For the first example, you can remove \'s\' from s_1 to get \\"ea\\" and \'t\' from s_2 to get \\"ea\\", which are identical. For the second example, you can remove \'b\' and \'d\' from s_1 to get \\"ace\\", which is already identical to s_2. Let\'s denote the longest common subsequence (LCS) of the strings s_1 and s_2 as l. The minimum number of characters to delete is given by (|s_1| - |l|) + (|s_2| - |l|).","solution":"def min_deletions_to_make_equal(s1, s2): Returns the minimum number of deletions needed from both strings s1 and s2 to make the remaining substrings identical. m, n = len(s1), len(s2) # Create a DP table to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp table for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Length of longest common subsequence lcs_length = dp[m][n] # The minimum number of deletions return (m - lcs_length) + (n - lcs_length)"},{"question":"Given an integer array nums of length n where all elements are between 1 and n (inclusive), some elements appear twice and others appear once. Find all elements in the range [1, n] that do not appear in the array. Your algorithm should run in O(n) time and use fewer than O(n) extra space. Return the result in any order. Example 1: Input: nums = [4,3,2,7,8,2,3,1] Output: [5,6] Example 2: Input: nums = [1,1] Output: [2] Constraints: n == nums.length 1 <= n <= 10^5 1 <= nums[i] <= n","solution":"def find_disappeared_numbers(nums): Finds all the numbers from 1 to n that do not appear in the array nums. Args: nums (List[int]): The input array. Returns: List[int]: A list of integers that do not appear in nums. # Mark each number encountered by flipping the sign of the number at the index for num in nums: index = abs(num) - 1 if nums[index] > 0: nums[index] = -nums[index] # Collect all indices that were not flipped result = [i + 1 for i in range(len(nums)) if nums[i] > 0] return result"},{"question":"You are given a string S consisting of lowercase English letters. You can perform the following operation exactly once: * Select two consecutive identical letters and remove them from the string. Determine the length of the shortest possible string you can obtain after performing one such operation. **Constraints:** - The input string S has at most (10^5) characters. - String S consists of only lowercase English letters. **Input:** Input is given from Standard Input in the following format: S **Output:** Print the length of the shortest possible string that can be obtained after performing one operation. **Sample Input:** aabbcc **Sample Output:** 4 By removing \\"aa\\", the string becomes \\"bbcc\\", which has a length of 4.","solution":"def shortest_length_after_removal(S): Determine the length of the shortest possible string after performing one removal of two consecutive identical letters. Args: S (str): The input string consisting of lowercase English letters. Returns: int: The length of the resulting string. for i in range(len(S) - 1): if S[i] == S[i + 1]: # Removing the first pair of consecutive identical letters found return len(S) - 2 # If no consecutive identical letters are found return len(S)"},{"question":"You are given an array of integers a of length n and a value k. Your goal is to determine whether it is possible to partition the array into exactly k non-empty subarrays such that the sum of elements in each subarray is strictly increasing. In other words, if you divide the array into k subarrays, say a_1, a_2, ..., a_k, then the following condition must be satisfied: text{sum}(a_1) < text{sum}(a_2) < ... < text{sum}(a_k) Determine if such a partition is possible. -----Input----- The input consists of two lines: - The first line contains two integers n and k (1 le n le 2 cdot 10^5, 1 le k le n). - The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9). -----Output----- Print \\"YES\\" (without quotes) if it is possible to partition the array into k subarrays as described, and \\"NO\\" (without quotes) otherwise. -----Examples----- Input 7 3 1 2 3 4 5 6 7 Output YES Input 7 4 1 3 2 4 6 5 8 Output YES Input 5 2 -1 -2 -3 -4 -5 Output NO Input 5 1 4 5 -2 3 6 Output YES","solution":"def can_partition(n, k, arr): Determines if it is possible to partition the array into exactly k non-empty subarrays such that the sum of elements in each subarray is strictly increasing. # If k is 1, we can always make one partition if k == 1: return \\"YES\\" # If k is greater than n, it\'s not possible if k > n: return \\"NO\\" # Initialize a count for number of potential breaks potential_cuts = 0 # Identify potential places to create subarrays with strictly increasing sum for i in range(1, n): if arr[i] > arr[i - 1]: potential_cuts += 1 # To get exactly k subarrays, we need at least k-1 cuts if potential_cuts >= k - 1: return \\"YES\\" else: return \\"NO\\""},{"question":"A community library is organizing a book review event where every participant is required to pick a book to review. Each participant has a set of books they are interested in, and a book can be reviewed by only one participant. The event organizers need your help to determine the maximum number of participants that can review distinct books based on their interests. Your task is to write a function `max_participants(participants)` that takes a list of lists `participants` as an argument. Each sublist represents the books a participant is interested in. The function should return an integer representing the maximum number of participants that can review distinct books. For example, consider the following input: ``` participants = [ [1, 2, 3], [2, 3], [3, 4], [4, 5] ] ``` Here, the optimal assignments may look like participant 1 reviews book 1, participant 2 reviews book 2, participant 3 reviews book 3, and participant 4 reviews book 5. Thus, the maximum number of participants that can review distinct books is `4`. To assist in implementing this, you can follow these steps: 1. Use a bipartite graph where one set represents the participants and the other set represents the books. 2. Use the Hopcroft-Karp algorithm or an equivalent maximum bipartite matching algorithm to find the maximum matching in the graph. The function should be efficient and able to handle up to 100 participants with each participant being interested in up to 100 books. Example Input: ``` participants = [ [1, 2, 3], [2, 3], [3, 4], [4, 5] ] ``` Example Output: ``` 4 ``` # Constraints: - Each book ID is a positive integer. - The number of participants will not exceed 100. - Each participant\'s list of books will have at most 100 elements.","solution":"def max_participants(participants): from collections import defaultdict def bpm(u, match_r, seen): for v in participant_books[u]: if not seen[v]: seen[v] = True if match_r[v] == -1 or bpm(match_r[v], match_r, seen): match_r[v] = u return True return False participant_books = defaultdict(list) for i, books in enumerate(participants): for book in books: participant_books[i].append(book) match_r = [-1] * 101 result = 0 for i in participant_books: seen = [False] * 101 if bpm(i, match_r, seen): result += 1 return result"},{"question":"Write a function that takes an ordered list of objects (each object in the list has an `id` and `value` attribute) and an increment value. The function should update the `value` of each object by incrementing it based on its position in the list (starting from 1). For example, if the list is `[{id: 1, value: 5}, {id: 2, value: 10}]`, and the increment value is 2, the output should be `[{id: 1, value: 7}, {id: 2, value: 14}]`. The first object’s value is increased by 2 (1 * 2) and the second object’s value is increased by 4 (2 * 2). The function should return the updated list. # Example: ```python increment_values( [ {\\"id\\": 1, \\"value\\": 3}, {\\"id\\": 2, \\"value\\": 7}, {\\"id\\": 3, \\"value\\": 5}, ], 3 ) # Output: [{\'id\': 1, \'value\': 6}, {\'id\': 2, \'value\': 13}, {\'id\': 3, \'value\': 14}] increment_values( [ {\\"id\\": 1, \\"value\\": 10}, {\\"id\\": 2, \\"value\\": 20}, {\\"id\\": 3, \\"value\\": 30}, ], 5 ) # Output: [{\'id\': 1, \'value\': 15}, {\'id\': 2, \'value\': 30}, {\'id\': 3, \'value\': 45}] ``` The input list will contain at most 1000 objects, and the increment value will be an integer between 1 and 100. The `value` attribute of each object will be an integer between -1000 and 1000.","solution":"def increment_values(object_list, increment): Updates the `value` of each object in the list by incrementing it based on its position. Parameters: object_list (list): A list of dictionaries, each containing \'id\' and \'value\'. increment (int): The value to increment each object\'s \'value\' by, based on its position in the list. Returns: list: The updated list with incremented values. for index, obj in enumerate(object_list): obj[\'value\'] += (index + 1) * increment return object_list"},{"question":"Jaggu has finally collected all the apples and saved Choota Bheem. Now, he has another task at hand. He needs to deliver magic potions to different locations in the village of Dholakpur. Each location in the village can be considered as a node in a tree structure, and the shortest path between two nodes (locations) is of utmost importance to make timely deliveries. Every day, Bheem gives Jaggu a set location to start his delivery, and each potion he delivers from that starting point has a certain intensity. However, some days, there might be a magical storm that increases the intensity of the potions of specific locations. You need to help Jaggu by processing multiple queries. Each query can be one of the following two types: 1. Determine the total intensity of all potions along the shortest path starting from a given node. 2. Update the intensity of the potion at a given node to a new intensity. Note: Initially, each node has a default potion intensity of 0. -----Input:----- - First line contains N - (number of nodes). - Next N-1 lines contain N1 N2 connected nodes representing the village paths. - Next line contains a single integer Q Number of Queries - The next Q lines contain queries in the following format: - For query type 1: 1 start_node (1 x) - For query type 2: 2 node new_intensity (2 y z) -----Output:----- - For each query of type 1, print the total intensity of potions from that start node to all other nodes. -----Constraints----- - 1 leq N leq 10^4 - 2 leq Q leq 10^4 - 1 leq new_intensity leq 10^3 -----Sample Input:----- 7 1 2 1 3 2 4 2 5 3 6 3 7 4 1 1 2 2 50 1 1 1 2 -----Sample Output:----- 0 50 50 -----EXPLANATION:----- - Initially, the potions have zero intensity, thus the total intensity is 0. - When the intensity of node 2 is updated to 50, the total intensity from node 1 considering the intensities is 50 for the shortest paths including node 2. - For the total intensity from node 2, after the update, the intensity directly at that node is considered which is 50.","solution":"class Village: def __init__(self, n): self.n = n self.graph = {i: [] for i in range(1, n + 1)} self.intensities = {i: 0 for i in range(1, n + 1)} def add_path(self, n1, n2): self.graph[n1].append(n2) self.graph[n2].append(n1) def update_intensity(self, node, intensity): self.intensities[node] = intensity def total_intensity_from(self, start_node): visited = {i: False for i in range(1, self.n + 1)} return self._dfs(start_node, visited) def _dfs(self, node, visited): visited[node] = True total_intensity = self.intensities[node] for neighbor in self.graph[node]: if not visited[neighbor]: total_intensity += self._dfs(neighbor, visited) return total_intensity def process_village(n, paths, queries): village = Village(n) for n1, n2 in paths: village.add_path(n1, n2) results = [] for query in queries: if query[0] == 1: results.append(village.total_intensity_from(query[1])) elif query[0] == 2: village.update_intensity(query[1], query[2]) return results"},{"question":"# Unique Email Addresses A company uses an email system where a user can have multiple distinct emails tied to the same account. However, certain rules are used to determine email equivalence: 1. Emails are considered the same if they are identical, ignoring dots (`.`) in the local part (before the `@`). 2. Emails are also the same if the local part includes a plus (`+`) sign, and everything after the plus sign is disregarded. For example: - \\"test.email+alex@leetcode.com\\" and \\"test.email.leet+alex@code.com\\" are identified as the same email. Your task is to implement a function that, given a list of emails, returns the number of unique email addresses after normalization based on the aforementioned rules. **Function Signature:** ```python def num_unique_emails(emails: List[str]) -> int: pass ``` # Input - `emails` - A list of strings representing emails. Each email string contains lowercase letters, digits, dots (`.`), and plus signs (`+`). # Output - Returns an integer indicating the number of unique emails. # Example Input ```python emails = [\\"test.email+alex@leetcode.com\\", \\"test.e.mail+bob.cathy@leetcode.com\\", \\"testemail+david@lee.tcode.com\\"] ``` Output ```python result = 2 ``` # Constraints - The number of emails will not exceed 100. - Each email contains no more than 100 characters.","solution":"def num_unique_emails(emails): def normalize(email): local, domain = email.split(\'@\') local = local.split(\'+\')[0] local = local.replace(\'.\', \'\') return local + \'@\' + domain unique_emails = set(normalize(email) for email in emails) return len(unique_emails)"},{"question":"Given a sequence of integers, an operation consists of selecting two adjacent integers and replacing both of them with their sum. The task is to determine the minimum possible number of operations required to convert the initial sequence into one where all numbers are the same. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output Output a single integer — the minimum number of operations required to make all elements of the sequence the same. Examples Input 4 1 2 2 1 Output 3 Input 5 3 3 3 3 3 Output 0 Input 4 1 1 1 1 Output 0 Note In the first example, the sequence can be converted into one element as follows: 1 2 2 1 → (1+2) 2 1 → 3 2 1 → 3 (2+1) → 3 3 In the second example, all elements are already the same, so no operations are needed.","solution":"def min_operations_to_make_uniform(n, sequence): Returns the minimum number of operations required to convert the sequence to one where all numbers are the same. # The function does not need to do any operations when n <= 1 if n <= 1: return 0 # Initialize to count unique elements unique_elements = set(sequence) # If there is only one element left in the set, no operation is needed if len(unique_elements) == 1: return 0 # Minimum number of operations needed is n - 1 return n - 1"},{"question":"A company uses a special encryption process for its message transmission. The process involves transforming each character of a string message into a unique encrypted character based on a given mapping. The mapping is represented as key-value pairs. However, they have noticed that some keys may map to the same value, which is an error in the encryption process because each key must map to a unique value. Write a function to validate the encryption mapping and return if it is valid or not. A mapping is considered valid if each key maps to a unique value. ---Input--- - An integer `n` representing the number of key-value pairs. - `n` key-value pairs, where each key and value are strings consisting of lowercase letters. ---Output--- - Print \\"True\\" if the mapping is valid, otherwise print \\"False\\". ---Constraints--- - 1 leq n leq 10^5 - Each key and value consists of only lowercase letters. - Keys and values are non-empty strings, and their lengths do not exceed 100. ---Example--- ---Input--- 3 a b c d e f ---Output--- True ---Input--- 4 a b c d e b f g ---Output--- False Explanation: In the first example, each key maps to a unique value. In the second example, \'a\' and \'e\' both map to \'b\', which makes the mapping invalid.","solution":"def validate_encryption_mapping(n, mappings): Validates the encryption mapping to ensure each key maps to a unique value. Args: n (int): The number of key-value pairs. mappings (list of tuples): List of (key, value) pairs. Returns: bool: True if the mapping is valid, False otherwise. value_set = set() for key, value in mappings: if value in value_set: return False value_set.add(value) return True"},{"question":"Implement a function to calculate the **edit distance** (also known as Levenshtein distance) between two strings using dynamic programming. The edit distance is defined as the minimum number of operations required to transform one string into another. The allowed operations are: 1. Insertion of a character. 2. Deletion of a character. 3. Substitution of a character with another. The function should return the edit distance between the two input strings. # Examples: ```python >>> edit_distance(\\"kitten\\", \\"sitting\\") 3 >>> edit_distance(\\"flaw\\", \\"lawn\\") 2 >>> edit_distance(\\"giraffe\\", \\"giraffe\\") 0 >>> edit_distance(\\"abc\\", \\"yabd\\") 2 >>> edit_distance(\\"\\", \\"\\") 0 >>> edit_distance(\\"\\", \\"abc\\") 3 >>> edit_distance(\\"abc\\", \\"\\") 3 ``` # Constraints: - The input strings may contain any characters. - The lengths of the input strings are each less than or equal to 5000.","solution":"def edit_distance(str1, str2): Calculates the Levenshtein distance between two strings. m, n = len(str1), len(str2) if m == 0: return n if n == 0: return m dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[m][n]"},{"question":"Given an array of integers nums and an integer k, re-arrange the array such that the element at every kth position is moved to the beginning, followed by the rest of the elements in their original order. Example 1: Input: nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2 Output: [2, 4, 6, 8, 1, 3, 5, 7] Explanation: Elements at positions 2, 4, 6, and 8 (1-based indexing) are moved to the beginning. Example 2: Input: nums = [10, 20, 30, 40, 50], k = 3 Output: [30, 10, 20, 40, 50] Explanation: Element at position 3 (1-based indexing) is moved to the beginning. Your Task: You don’t need to read input or print anything. Your task is to complete the function rearrangeArray() which takes the array nums and the integer k as input and returns the modified array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(nums) ≤ 10^5 1 ≤ k ≤ len(nums)","solution":"def rearrangeArray(nums, k): Re-arrange the array such that every kth element is moved to the beginning. Args: nums: List of integers. k: The k value indicating the position interval. Returns: A modified list based on the given condition. # Extract elements at positions k, 2k, 3k,... (1-based indexing) kth_elements = [nums[i] for i in range(k-1, len(nums), k)] # Remaining elements (those not at k, 2k, 3k,... positions) remaining_elements = [nums[i] for i in range(len(nums)) if (i % k) != (k-1)] # Concatenate kth_elements followed by remaining_elements result = kth_elements + remaining_elements return result"},{"question":"Implement a function `longest_substring_with_k_distinct_characters(s, k)` that takes a string `s` and an integer `k` as its arguments, and returns the length of the longest substring that contains at most `k` distinct characters. If `k` is zero, the function should return 0. For example, given the input `s = \\"araaci\\"` and `k = 2`, the function should return `4` because the longest substring with no more than 2 distinct characters is `\\"araa\\"`. Another example would be `s = \\"cbbebi\\"` and `k = 3`, which should return `5` because the longest substring is `\\"cbbeb\\"` or `\\"bbebi\\"`. Use the sliding window technique to solve this problem efficiently. **Example Test Cases** ```python assert longest_substring_with_k_distinct_characters(\\"araaci\\", 2) == 4 assert longest_substring_with_k_distinct_characters(\\"araaci\\", 1) == 2 assert longest_substring_with_k_distinct_characters(\\"cbbebi\\", 3) == 5 assert longest_substring_with_k_distinct_characters(\\"abc\\", 0) == 0 assert longest_substring_with_k_distinct_characters(\\"aa\\", 1) == 2 ``` Good luck!","solution":"def longest_substring_with_k_distinct_characters(s, k): Returns the length of the longest substring with at most k distinct characters. Parameters: s (str): The input string. k (int): The number of distinct characters. Returns: int: The length of the longest substring with at most k distinct characters. if k == 0: return 0 window_start = 0 max_length = 0 char_frequency = {} for window_end in range(len(s)): right_char = s[window_end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = s[window_start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] window_start += 1 max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"-----Input----- The first line contains one positive integer n (1 ≤ n ≤ 100 000) — the number of elements in the array. The second line contains the sequence a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 100 000), where the i-th number is the i-th element of the array. -----Output----- Print the maximum sum of a subarray of the given array a. A subarray is a contiguous part of an array, which can be empty. -----Examples----- Input 5 1 -2 3 4 -1 Output 7 Input 1 -5 Output 0 Input 4 2 3 -6 4 Output 5 Input 7 -1 2 -3 4 5 -2 1 Output 9","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray in the given array. max_sum = 0 current_sum = 0 for num in arr: current_sum = max(0, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Input The input format from standard input is as follows: > n x a_1 a_2 a_3 cdots a_n n (1 ≤ n ≤ 100) is an integer denoting the number of coins, and x (1 ≤ x ≤ 10000) is the total sum of money we want to achieve using these coins. The sequence a_1, a_2, ldots, a_n (1 ≤ a_i ≤ 1000) represents the values of the coins. Output * Print the minimum number of coins needed to achieve the sum x, or -1 if it\'s not possible to achieve the sum with the given coins. Constraints * 1 le n le 100 * 1 le x le 10000 * 1 le a_i le 1000 Examples Input 3 11 1 2 5 Output 3 Input 4 7 2 3 6 4 Output 2","solution":"def min_coins(n, x, coins): Returns the minimum number of coins needed to achieve the sum x or -1 if it\'s not possible. # Initialize the dp array with a large number (greater than any possible number of coins) dp = [float(\'inf\')] * (x + 1) # Base case: no coins are needed to make the sum 0 dp[0] = 0 # Loop through each coin and for each coin update the dp array for coin in coins: for j in range(coin, x + 1): dp[j] = min(dp[j], dp[j - coin] + 1) return dp[x] if dp[x] != float(\'inf\') else -1"},{"question":"A group of developers is working on a social network platform, and they need to implement a feature that allows users to follow each other and see updates from the people they follow. However, some users might prefer a private account, meaning only approved people can follow them. The system needs to handle this functionality efficiently. Your task is to write a program that simulates the following operations for the social network platform: 1. Create a user. 2. Follow a user. 3. Approve a follow request. 4. Display followers of a user. Each user has a unique username. When a user follows another user with a private account, it results in a pending follow request which can either be approved or ignored. Input The input consists of several instructions to manage the social network, where each instruction is one of the following types: - CREATE username privacystatus - FOLLOW follower_username followed_username - APPROVE followed_username follower_username - DISPLAY username Instructions are given one per line. The end of input is signaled by a single line containing the word \\"END\\". - CREATE username privacystatus: Creates a new user with the given username and privacy status. The privacy status is either \\"public\\" or \\"private\\". - FOLLOW follower_username followed_username: The user `follower_username` requests to follow the user `followed_username`. If `followed_username` has a public account, then `follower_username` should directly become a follower. If `followed_username` has a private account, a follow request is created. - APPROVE followed_username follower_username: If `followed_username` has a private account and `follower_username` sent a follow request, then `follower_username` is approved to follow `followed_username`. - DISPLAY username: Displays the list of `username`\'s followers in the order they followed or were approved to follow. Output For each DISPLAY operation, output the followers of the given user, each on a new line. If the user has no followers, output nothing. Example Input CREATE alice public CREATE bob public CREATE charlie private FOLLOW alice bob FOLLOW charlie alice FOLLOW bob charlie APPROVE charlie bob DISPLAY alice DISPLAY bob DISPLAY charlie END Output alice bob charlie bob","solution":"class SocialNetwork: def __init__(self): self.users = {} self.follow_requests = {} def create_user(self, username, privacy_status): self.users[username] = { \'privacy_status\': privacy_status, \'followers\': [] } self.follow_requests[username] = [] def follow_user(self, follower_username, followed_username): if followed_username not in self.users or follower_username not in self.users: return if self.users[followed_username][\'privacy_status\'] == \'public\': self.users[followed_username][\'followers\'].append(follower_username) else: self.follow_requests[followed_username].append(follower_username) def approve_follow_request(self, followed_username, follower_username): if followed_username not in self.follow_requests: return if follower_username in self.follow_requests[followed_username]: self.users[followed_username][\'followers\'].append(follower_username) self.follow_requests[followed_username].remove(follower_username) def display_followers(self, username): if username in self.users: for follower in self.users[username][\'followers\']: print(follower) def process_instructions(instructions): network = SocialNetwork() for instruction in instructions: parts = instruction.split() if parts[0] == \\"CREATE\\": network.create_user(parts[1], parts[2]) elif parts[0] == \\"FOLLOW\\": network.follow_user(parts[1], parts[2]) elif parts[0] == \\"APPROVE\\": network.approve_follow_request(parts[1], parts[2]) elif parts[0] == \\"DISPLAY\\": network.display_followers(parts[1]) # Example input instructions = [ \\"CREATE alice public\\", \\"CREATE bob public\\", \\"CREATE charlie private\\", \\"FOLLOW alice bob\\", \\"FOLLOW charlie alice\\", \\"FOLLOW bob charlie\\", \\"APPROVE charlie bob\\", \\"DISPLAY alice\\", \\"DISPLAY bob\\", \\"DISPLAY charlie\\", \\"END\\" ] process_instructions(instructions)"},{"question":"You are given a list of integer numbers. The task is to determine if it is possible to split the list into two non-empty contiguous subarrays such that the product of all elements in the first subarray is equal to the product of all elements in the second subarray. -----Input----- The first line of input consists of an integer 1 leq n leq 10^5, the number of elements in the list. The second line contains n integers 1 leq a_i leq 10^9, the elements of the list. -----Output----- Output \\"YES\\" if there exists a way to split the list into two non-empty contiguous subarrays with equal product, otherwise output \\"NO\\". -----Examples----- Sample Input 1: 6 1 2 3 6 1 1 Sample Output 1: YES Sample Input 2: 5 2 4 8 16 32 Sample Output 2: NO","solution":"def can_split_equal_product(arr): Determine if the list can be split into two non-empty contiguous subarrays such that the product of the elements in both subarrays are equal. n = len(arr) total_product = 1 for num in arr: total_product *= num current_product = 1 for i in range(n - 1): current_product *= arr[i] if current_product == total_product // current_product: return \\"YES\\" return \\"NO\\""},{"question":"The city library has recently introduced a new categorization system for its books. Each book in the library is given a unique ID and is tagged with multiple genre labels. These genre labels help users to search and identify books they are interested in. Your task is to help the library software find all books that belong to all specified genres in a user\'s search query. -----Input:----- - The first line contains two integers N and M, representing the number of books and the number of unique genres, respectively. - The next N lines describe the books. Each line starts with an integer K which indicates the number of genres the book is tagged with, followed by K integers that represent the genre IDs. - The last line contains a single integer Q followed by Q integers representing the genre IDs that the user is searching for. -----Output:----- Print the IDs of all books that belong to all the specified genres in the user\'s search query. If no such book is found, print \\"No books found\\". -----Constraints:----- - 1 leq N leq 1000 - 1 leq M leq 100 - 1 leq K, Q leq 50 - All genre IDs are between 1 and M -----Sample Input:----- 5 5 3 1 2 3 2 2 4 4 1 2 3 5 1 3 2 1 5 2 1 2 -----Sample Output:----- 1 3 -----EXPLANATION:----- In the sample input, there are 5 books and 5 unique genres. The books have the following genre tags: - Book 1: genres [1, 2, 3] - Book 2: genres [2, 4] - Book 3: genres [1, 2, 3, 5] - Book 4: genres [3] - Book 5: genres [1, 5] The user\'s query is for genres [1, 2]. Books 1 and 3 belong to both genres [1, 2], thus their IDs (1 and 3) are printed.","solution":"def find_books_with_genres(N, M, books, Q, query_genres): result = [] query_set = set(query_genres) for i in range(N): book_genres = set(books[i]) if query_set.issubset(book_genres): result.append(i + 1) if result: return \\" \\".join(map(str, result)) else: return \\"No books found\\""},{"question":"Write a program that finds the smallest missing positive integer in a given unsorted array of integers. Constraints * The array can have between 1 and 10^6 elements. * Each element of the array is an integer, and the value can range from -10^6 to 10^6. * The array may contain duplicate numbers. Input Input consists of multiple data sets. Each data set starts with an integer n (the number of elements in the array), followed by n integers representing the array elements. The input terminates with EOF. Output For each data set, print the smallest missing positive integer in a new line. Example Input 6 3 4 -1 1 2 6 8 1 2 0 -6 9 10 4 3 Output 5 5","solution":"def smallest_missing_positive(arr): Function to find the smallest missing positive integer in an unsorted array. s = set(arr) i = 1 while i in s: i += 1 return i def process_input(input_string): Processes the input string from multiple datasets into a list of lists. Each internal list represents a dataset. datasets = [] for line in input_string.strip().split(\'n\'): parts = list(map(int, line.split())) n = parts[0] array = parts[1:n+1] datasets.append(array) return datasets def main(input_string): Main function to process the input and output the smallest missing positive integer for each dataset. datasets = process_input(input_string) results = [] for dataset in datasets: results.append(str(smallest_missing_positive(dataset))) return \\"n\\".join(results)"},{"question":"Jessica is learning about special numbers called quirky numbers. A number is considered quirky if it can be represented in the form m * (m + 1), where m is a positive integer. For example, some quirky numbers are: 2 (1*2), 6 (2*3), 12 (3*4), 20 (4*5). Jessica has a list of numbers and wants to replace each number with the nearest quirky number that is less than or equal to it. Write a function to help Jessica find the quirky replacements for her list of numbers. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of integers in Jessica\'s list. The second line contains n integers separated by spaces representing Jessica\'s list. Each integer is between 1 and 10^4. -----Output----- Output n integers separated by spaces, where the i-th integer is the largest quirky number less than or equal to the i-th integer from Jessica\'s list. -----Examples----- Input 3 5 13 21 Output 2 12 20 Input 4 2 6 10 25 Output 2 6 6 20","solution":"def quirky_numbers_replacement(lst): Given a list of integers, replace each integer with the largest quirky number less than or equal to it. def closest_quirky_number(x): m = 1 while m * (m + 1) <= x: m += 1 return (m - 1) * m return [closest_quirky_number(num) for num in lst] # Example usage: # n = 3 # lst = [5, 13, 21] # print(quirky_numbers_replacement(lst)) # Output: [2, 12, 20]"},{"question":"Write a function that takes a list of integers and returns a new list containing only the elements that are prime numbers. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers other than 1 and itself. Your task is to 1) **filter out non-prime numbers** from the list, 2) maintain the order of the remaining numbers, and 3) return the filtered list. Use the following definition of a prime number for your solution. You should implement an efficient prime-checking function, considering both complexity and readability. Examples ``` Input: [2, 3, 4, 5, 6, 7, 8, 9, 10] Output: [2, 3, 5, 7] Input: [15, 22, 31, 45, 56, 68] Output: [31] Input: [11, 14, 17, 19, 23] Output: [11, 17, 19, 23] ```","solution":"def is_prime(n): Check if a given number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Filter the list of numbers and return only those which are prime. return [n for n in numbers if is_prime(n)]"},{"question":"You are given a string consisting of lowercase letters. Your task is to determine whether the string can be made to be a palindrome by replacing at most one of its characters. A palindrome is a string that reads the same backward as forward. Constraints * 1 ≤ length of string ≤ 10^5 Input Input is given from Standard Input in the following format: s Output Print \\"YES\\" if the string can be made to be a palindrome by replacing at most one character. Otherwise, print \\"NO\\". Examples Input abca Output YES Input abc Output NO Input a Output YES Input racecar Output YES Input abccba Output YES","solution":"def can_be_palindrome_by_one_replacement(s): Returns \'YES\' if string can be a palindrome by replacing at most one character, otherwise \'NO\'. def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check either by skipping left or right character return \\"YES\\" if is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) else \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"In the game of Tic-Tac-Toe, two players, X and O, take turns marking the spaces in a 3×3 grid. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row wins the game. You have the current state of the Tic-Tac-Toe board, and your task is to determine the current status of the game. The board state is given by three strings of length 3, each representing a row of the grid. The characters are either \'X\', \'O\', or \'.\', where \'.\' denotes an unmarked space. Input: First line contains the integer T - number of test cases. Each test case contains three lines, each with a string of length 3, representing the rows of the Tic-Tac-Toe board. Output: For each test case, print \\"X wins\\" if player X has won, \\"O wins\\" if player O has won, \\"Draw\\" if the board is full and there is no winner, or \\"Game continues\\" if neither player has won and there are still unmarked spaces. Constraints: 1 ≤ T ≤ 10 Sample tests explanation: SAMPLE INPUT 4 XOX OOX XOX OOO X.X XXO ..X OX. ... SAMPLE OUTPUT X wins O wins Draw Game continues In the first example, player X wins with the main diagonal. In the second example, player O wins with a horizontal row. In the third example, the board is full and no player has won, thus it is a draw. In the fourth example, the game continues because there are unmarked spaces and no winner yet.","solution":"def check_tic_tac_toe(board): Determines the status of a Tic-Tac-Toe game based on the given board. :param board: A list of three strings, each of length 3, representing the board. :return: A string indicating the game status: \\"X wins\\", \\"O wins\\", \\"Draw\\", or \\"Game continues\\". lines = board + [ # Rows \'\'.join([board[0][i], board[1][i], board[2][i]]) for i in range(3) # Columns ] + [ \'\'.join([board[i][i] for i in range(3)]), # Main diagonal \'\'.join([board[i][2-i] for i in range(3)]) # Anti-diagonal ] if \'XXX\' in lines: return \\"X wins\\" if \'OOO\' in lines: return \\"O wins\\" if all(cell != \'.\' for row in board for cell in row): return \\"Draw\\" return \\"Game continues\\" def tic_tac_toe_status(test_cases): Processes multiple Tic-Tac-Toe test cases and returns the results. :param test_cases: A list of test cases where each test case is a list of three strings. :return: A list of strings corresponding to the result of each test case. results = [] for board in test_cases: results.append(check_tic_tac_toe(board)) return results"},{"question":"There are two warriors, each equipped with a sequence of weapons. The i-th weapon of the first warrior has power a_i, while the j-th weapon of the second warrior has power b_j. Each warrior can use exactly one weapon to fight in a duel. The duel works as follows: - The warrior who uses the weapon with the higher power wins the duel. - If both weapons have the same power, the duel is a tie. Your task is to determine the maximum number of duels the first warrior can win by optimally choosing which weapon to use against each weapon of the second warrior. -----Input----- The input consists of one test case. The first line contains an integer n (1 le n leq 1000) — the number of weapons each warrior has. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the power of the weapons of the first warrior. The third line contains n integers b_1, b_2, ldots, b_n (1 leq b_j leq 10^9) — the power of the weapons of the second warrior. -----Output----- Output a single integer, the maximum number of duels the first warrior can win. -----Example----- Input 5 3 6 7 5 3 6 3 5 8 7 Output 3 -----Note----- In the example, the first warrior can win with the following weapon choices: - Use weapon with power 3 against the second warrior’s weapon with power 3 (Tie) - Use weapon with power 6 against the second warrior’s weapon with power 5 (Win) - Use weapon with power 5 against the second warrior’s weapon with power 3 (Win) - Use weapon with power 7 against the second warrior’s weapon with power 6 (Win) - Use weapon with power 3 against the second warrior’s weapon with power 8 (Lose) So the first warrior can win 3 duels.","solution":"def max_duels_won(n, a, b): Determines the maximum number of duels the first warrior can win. Parameters: n (int): Number of weapons each warrior has. a (list): List of weapon powers for the first warrior. b (list): List of weapon powers for the second warrior. Returns: int: Maximum number of duels the first warrior can win. a.sort() # Sort weapons\' power of the first warrior b.sort() # Sort weapons\' power of the second warrior i, j = 0, 0 # Two pointers to traverse both lists wins = 0 while i < n and j < n: if a[i] > b[j]: wins += 1 j += 1 i += 1 return wins"},{"question":"You are given a grid of size N times N and a set of M robots, each with unique capabilities in terms of movement. Initially, all robots are placed outside the grid. Your task is to bring all robots into the grid and arrange them such that no two robots occupy the same cell, and within the shortest amount of time. Each robot can only move in the grid in specific directions predetermined by its type. Each type of robot is represented by a letter: - **R** can move right or down. - **L** can move left or up. - **B** can move in any of the four diagonal directions. Each step involves moving one robot from one cell to an adjacent cell according to its movement capabilities. The robots can be placed into the grid from any cell along the perimeter. Determine the minimum number of steps required to place all robots into the grid and arrange them in distinct cells. # Input The first line contains two integers N and M (2 leq N leq 10, 1 leq M leq N^2) — the size of the grid and the number of robots. The following M lines each contain one letter representing the type of each robot. # Output The output should be a single integer — the minimum number of steps required to place all robots into the grid and arrange them in distinct cells. # Example Input ``` 3 2 R B ``` Output ``` 3 ``` # Note In the given example, the steps to arrange the robots might be as follows: 1. Place robot of type R at (1,1). 2. Move robot R to (2,1). 3. Place robot of type B at (1,1). The above example leads to the robots being arranged in distinct cells within the grid in the minimum number of steps. Other valid sequences that result in the same number of steps are also possible.","solution":"def place_robots(N, M, robot_types): Calculate the minimum number of steps required to place all robots into the grid such that no two robots occupy the same cell. Args: - N: int, size of the grid (N x N) - M: int, number of robots - robot_types: list of str, each robot\'s type (\\"R\\", \\"L\\", \\"B\\") Returns: - int, minimum number of steps required # The minimum steps required to place each robot in distinct positions # This is a theoretical calculation that can be adjusted by the robot\'s type return M + max(0, M-1) # Example of how the function works given an input n, m = 3, 2 robots = [\\"R\\", \\"B\\"] print(place_robots(n, m, robots)) # This should output 3"},{"question":"Given a string, write a function `compressString()` to compress it using the following algorithm: 1. Replace each group of consecutive repeating characters with the character followed by the count of repetitions. 2. If the compressed string is not shorter than the original string, return the original string. Constraints: 1 <= T <= 100 1 <= N <= 1000 Input: The first line contains an integer T, the number of test cases. The next T lines contain a string each. Output: For each test case, output the compressed string or the original string if the compressed one is not shorter. Example: Input: 2 aaabbcccc abcdef Output: a3b2c4 abcdef Explanation: Testcase 1: The string \\"aaabbcccc\\" is compressed to \\"a3b2c4\\", which is shorter than the original string. Testcase 2: The string \\"abcdef\\" cannot be compressed to a shorter string, so the original string is returned. User Task: The task is to complete the function `compressString()` which should compress the string as per the above algorithm for each test case.","solution":"def compressString(s): Compresses the string using the given algorithm, or returns the original if the compressed one is not shorter. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) compressed.append(str(count)) count = 1 compressed.append(s[-1]) compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s def compressStrings(test_cases): Compress each string from the test cases. return [compressString(s) for s in test_cases]"},{"question":"You are given a directed graph with N nodes and M edges. Each node is labeled with a unique integer from 1 to N, and each directed edge has a respective weight given in the form of a tuple (u, v, w), where u is the starting node, v is the destination node, and w is the weight of the edge from u to v. You are required to find the shortest path distance from the source node (node 1) to all other nodes. If a node i is unreachable from node 1, print \\"-1\\" as the distance for that node. -----Input----- The first line contains two integers N and M (1 le N, M le 10^5), where N denotes the number of nodes and M denotes the number of edges. Each of the next M lines contains three integers u, v, and w (1 le u, v le N, 1 le w le 10^4) representing a directed edge from node u to node v with weight w. -----Output----- Print N integers, where the i^{th} integer denotes the shortest distance from node 1 to node i. If node i is unreachable from node 1, print \\"-1\\". -----Examples----- Sample Input: 5 6 1 2 2 1 3 4 2 3 1 3 4 7 2 5 10 4 5 1 Sample Output: 0 2 3 10 20 Explanation: - Distance from node 1 to 2 is 2 via edge (1->2). - Distance from node 1 to 3 is 3 via edges (1->2->3). - Distance from node 1 to 4 is 10 via edges (1->2->3->4). - Distance from node 1 to 5 is 20 via edges (1->2->3->4->5). - The distance to node 1 itself is always 0, as it is the source node.","solution":"import heapq import sys def shortest_path(N, M, edges): Finds the shortest path distances from the source node (1) to all other nodes in the directed graph. :param N: Number of nodes :param M: Number of edges :param edges: List of edges where each edge is represented as a tuple (u, v, w) :return: List of shortest path distances from node 1 to nodes 1 to N, where -1 represents an unreachable node graph = {i: [] for i in range(1, N+1)} for u, v, w in edges: graph[u].append((v, w)) dist = {i: float(\'inf\') for i in range(1, N+1)} dist[1] = 0 pq = [(0, 1)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) result = [] for i in range(1, N+1): if dist[i] == float(\'inf\'): result.append(-1) else: result.append(dist[i]) return result"},{"question":"You are given a sequence of integers where every element appears exactly twice, except for one element which appears exactly once. Write a program to find the element that appears only once. Input The input consists of multiple datasets. Each dataset is a single line of text containing space-separated integers, where the total number of integers is odd (1 <= number of integers <= 100). Each integer in the sequence will be between -10^5 and 10^5, inclusive. Input ends with EOF. There are at most 50 datasets. Output For each dataset, print the element that appears only once on a new line. Example Input 1 2 3 2 1 4 5 4 5 9 7 7 Output 3 9","solution":"def find_unique_element(seq): Returns the element that appears exactly once in the sequence. num_count = {} for num in seq: if num in num_count: num_count[num] += 1 else: num_count[num] = 1 for num, count in num_count.items(): if count == 1: return num def process_input(data): Process multiple datasets and return results for each. results = [] for line in data.splitlines(): nums = list(map(int, line.split())) unique_num = find_unique_element(nums) results.append(unique_num) return results def main(): import sys input_data = sys.stdin.read() results = process_input(input_data) for result in results: print(result)"},{"question":"Given two strings `s1` and `s2`, the task is to determine the minimum number of insertions and deletions required to transform string `s1` into string `s2`. Example 1: Input: s1 = \\"heap\\" s2 = \\"pea\\" Output: Deletions = 2 Insertions = 1 Explanation: To transform \\"heap\\" into \\"pea\\", we need to delete the characters \'h\' and \'p\' from \\"heap\\" and then insert the character \'p\' in the resulting string \\"hea\\". Example 2: Input: s1 = \\"abcd\\" s2 = \\"anc\\" Output: Deletions = 2 Insertions = 1 Explanation: To transform \\"abcd\\" into \\"anc\\", remove \'b\' and \'d\' from \\"abcd\\" and then insert \'n\' in position between \'a\' and \'c\' making the result \\"anc\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function minOperations() which takes the two strings s1 and s2 as inputs and returns a pair of integers indicating the required number of deletions and insertions respectively. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n * m) Constraints: 1 <= s1.length(), s2.length() <= 1000 s1 and s2 consist of only lowercase English letters.","solution":"def minOperations(s1, s2): Returns the number of deletions and insertions required to transform s1 into s2. len1, len2 = len(s1), len(s2) # Creating a 2D DP array to store the lengths of longest common subsequence. dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] # Fill dp array for i in range(1, len1 + 1): for j in range(1, len2 + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Length of longest common subsequence lcs = dp[len1][len2] # Deletions = characters in s1 not in lcs deletions = len1 - lcs # Insertions = characters in s2 not in lcs insertions = len2 - lcs return deletions, insertions"},{"question":"You are given two arrays, `threads` and `nuts`. Each element in the `threads` array can be combined with exactly one element in the `nuts` array to form a functional pair. However, there are additional compatibility constraints that define which threads are compatible with which nuts. Given these constraints, your task is to determine the maximum number of paired threads and nuts. Two threads/nuts can be paired if and only if they are compatible. Compatibility is determined by a function `is_compatible(thread, nut)` provided to you, which returns `True` if the thread and nut can be paired and `False` otherwise. You should implement a function `max_compatible_pairs(threads, nuts, is_compatible)`, that returns the maximum number of pairs that can be formed. -----Input----- - `threads`: an array of integers representing the IDs of threads. - `nuts`: an array of integers representing the IDs of nuts. - `is_compatible`: a function `is_compatible(thread, nut)` which returns `True` if thread and nut are compatible, otherwise `False`. -----Output----- Return an integer representing the maximum number of compatible thread-nut pairs that can be formed. -----Examples----- Input: threads = [1, 2, 3] nuts = [4, 5, 6] def is_compatible(thread, nut): compatibilities = {(1, 4): True, (2, 5): True, (3, 6): True, (1, 5): False, (1, 6): False, (2, 4): False, (2, 6): False, (3, 4): False, (3, 5): False} return compatibilities.get((thread, nut), False) Output: 3 Input: threads = [1, 2, 3, 4] nuts = [2, 3, 5, 6] def is_compatible(thread, nut): compatibilities = {(1, 2): True, (2, 3): True, (3, 5): True, (4, 6): True, (1, 3): False, (1, 5): False, (1, 6): False, (2, 5): False, (2, 6): False, (3, 2): False, (3, 6): False, (4, 2): False, (4, 3): False, (4, 5): False} return compatibilities.get((thread, nut), False) Output: 4","solution":"def max_compatible_pairs(threads, nuts, is_compatible): Returns the maximum number of compatible pairs of threads and nuts. Args: threads (list[int]): List of thread IDs. nuts (list[int]): List of nut IDs. is_compatible (function): A function that takes a thread ID and a nut ID and returns whether they are compatible. Returns: int: The maximum number of compatible pairs. from collections import defaultdict # Create a bipartite graph using adjacency list representation graph = defaultdict(list) for thread in threads: for nut in nuts: if is_compatible(thread, nut): graph[thread].append(nut) def bpm(u, visited, match): for v in graph[u]: if not visited[v]: visited[v] = True if v not in match or bpm(match[v], visited, match): match[v] = u return True return False match = {} result = 0 for u in threads: visited = defaultdict(bool) if bpm(u, visited, match): result += 1 return result"},{"question":"For two integers a and b where 1 ≤ a, b ≤ N, let h(a, b) = |a - b| + gcd(a, b) + lcm(a, b). For a positive integer N, let min_h(N) denote the minimum value of h(a, b) over all pairs of integers (a, b) such that 1 ≤ a, b ≤ N. Your task is to find the total number of such pairs (a, b) for which h(a, b) = min_h(N). ------ Input Format ------ - The first line of input contains an integer T — the number of test cases. - The next T lines, each contains a positive integer N. ------ Output Format ------ For each test case, output the total number of pairs (a, b) such that h(a, b) = min_h(N). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} ----- Sample Input 1 ------ 2 3 5 ----- Sample Output 1 ------ 3 7 ----- Explanation 1 ------ Test case 1: - For the pair (1, 1), h(1, 1) = |1-1| + gcd(1,1) + lcm(1,1) = 0 + 1 + 1 = 2. - For the pair (2, 2), h(2, 2) = |2-2| + gcd(2,2) + lcm(2,2) = 0 + 2 + 2 = 4. - For the pair (1, 2), h(1, 2) = |1-2| + gcd(1,2) + lcm(1,2) = 1 + 1 + 2 = 4. - For the pair (2, 1), h(2, 1) = |2-1| + gcd(2,1) + lcm(2,1) = 1 + 1 + 2 = 4. - For the pair (3, 3), h(3, 3) = |3-3| + gcd(3,3) + lcm(3,3) = 0 + 3 + 3 = 6. - For the pair (1, 3), h(1, 3) = |1-3| + gcd(1,3) + lcm(1,3) = 2 + 1 + 3 = 6. - For the pair (2, 3), h(2, 3) = |2-3| + gcd(2,3) + lcm(2,3) = 1 + 1 + 6 = 8. - For the pair (3, 2), h(3, 2) = |3-2| + gcd(3,2) + lcm(3,2) = 1 + 1 + 6 = 8. Hence, min_h(3) = 2. There are three pairs (a, b) satisfying 1 ≤ a, b ≤ 3 and h(a, b) = min_h(3) — (1, 1), (1, 2), (2, 1).","solution":"import math def min_h(N): if N == 1: return 1 # edge case as only one pair (1, 1) # Minimum h occurs when a=gcd(min(a, b)) is 1, and # the lcm of a and b will be a * b/ gcd(a, b) which simplifies to b if a is 1 # min_h(N) = 2 for any N >= 1 cause h(1,1) = |1-1| + gcd(1,1) + lcm(1,1) = 0 + 1 + 1 = 2 return N def count_pairs_with_min_h(N): return 2 * N - 1 def process_test_cases(T, test_cases): results = [] for N in test_cases: min_h_N = min_h(N) count = count_pairs_with_min_h(N) results.append(count) return results # Example use case if __name__ == \\"__main__\\": T = 2 test_cases = [3, 5] print(process_test_cases(T, test_cases)) # Output: [3, 5]"},{"question":"In a large company, employee pairs work together on various projects. Each project involves exactly 2 employees. Over time, some pairs work together on multiple projects. Given records of which employee pairs worked together and the number of projects they completed, determine the pair of employees that worked together the most and count the number of projects they worked on as a pair. -----Input----- There will be a single test case. The first line will contain an integer m (1 le m le 200000) representing the number of records. Each of the next m lines will contain three integers a, b, and p (1 le a, b le 100000, 1 le p le 1000) where a and b are the IDs of the two employees who worked together on a project, and p is the number of projects they completed together in that record. Employee IDs are distinct pairs and a < b. -----Output----- Print two integers: the IDs of the pair of employees that worked together on the most number of projects and the total number of projects they completed together as a pair. If multiple pairs worked together on the same maximum number of projects, print the lexicographically smallest pair. -----Examples----- Sample Input: 4 1 2 3 1 3 2 2 3 1 1 2 4 Sample Output: 1 2 7","solution":"def most_projects_pair(records): Determines the pair of employees that worked together the most and the number of projects they worked on. from collections import defaultdict pair_projects = defaultdict(int) for a, b, p in records: pair_projects[(a, b)] += p max_projects = 0 best_pair = None for pair, project_count in pair_projects.items(): if project_count > max_projects or (project_count == max_projects and (best_pair is None or pair < best_pair)): max_projects = project_count best_pair = pair return best_pair[0], best_pair[1], max_projects def get_input(): Reads input from user. m = int(input()) records = [] for _ in range(m): a, b, p = map(int, input().split()) records.append((a, b, p)) return records"},{"question":"Given an array of N positive integers where every number occurs exactly twice except for two numbers which occur exactly once. Find the two numbers that occur only once. Example 1: Input: N = 8 Arr[] = {2, 4, 7, 9, 2, 4, 9, 3} Output: [7, 3] Explanation: 7 and 3 occur exactly once. Example 2: Input: N = 6 Arr[] = {1, 2, 3, 2, 1, 4} Output: [3, 4] Explanation: 3 and 4 occur exactly once. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findTwoSingleNumbers() which takes arr[] and n as input parameters and returns an array containing exactly two numbers that occur once in any order. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ arr[i] ≤ 10^{6}","solution":"def findTwoSingleNumbers(arr, n): Find the two numbers that occur exactly once in the array. :param arr: List of integers :param n: Length of the list :return: A list containing the two numbers that occur exactly once # Step 1: XOR all the elements xor_sum = 0 for num in arr: xor_sum ^= num # Step 2: Find a set bit in xor_sum (we will use the rightmost set bit) set_bit = xor_sum & -xor_sum # Step 3: Divide numbers into two groups and XOR them separately based on set_bit num1, num2 = 0, 0 for num in arr: if num & set_bit: num1 ^= num else: num2 ^= num return [num1, num2]"},{"question":"Limak is a little polar bear who loves colorful beads. He plays a game where he arranges beads of different colors in a fixed sequence. The sequence is defined by a periodic pattern. For example, if the periodic pattern is \\"ABC\\", the sequence of beads could be \\"ABCABCABC...\\". Limak has infinitely many beads of each color in the pattern. He wants to arrange exactly n beads in this sequence, starting from the beginning of the pattern. However, Limak finds it challenging to keep track of large sequences, so he wants your help to find the first m positions in the sequence that turn out to be exactly the same as its last m positions of the sequence (where m is the length of the repeating pattern). Input The only line of input contains an integer n (1 ≤ n ≤ 10^15) and a string s of length m (1 ≤ m ≤ 20), representing the periodic pattern. Output Print the first m positions (0-indexed) in the sequence that match the last m positions. Examples Input 15 ABC Output [0, 1, 2] Input 10 AB Output [0, 1] Note In the first sample test, the sequence for n = 15 and pattern \\"ABC\\" would look like: ABCABCABCABCABC The first 3 positions (0, 1, 2) match the last 3 positions. In the second sample test, the sequence for n = 10 and pattern \\"AB\\" would look like: ABABABABAB The first 2 positions (0, 1) match the last 2 positions.","solution":"def find_matching_positions(n, s): Given an integer n and a periodic pattern string s, return the first m positions in the sequence that match the last m positions where m is the length of the repeating pattern. m = len(s) result = list(range(m)) return result"},{"question":"You are given a sequence of n integers. Your task is to split the sequence into the minimum number of non-decreasing subsequences. A non-decreasing subsequence is one in which each element is greater than or equal to the previous element. Input First line contains an integer n — the length of the sequence (1 ≤ n ≤ 1000). The second line contains n integers a_1, a_2, ..., a_n representing the sequence (1 ≤ a_i ≤ 1000). Output Output a single integer — the minimum number of non-decreasing subsequences you can split the sequence into. Examples Input 5 5 4 3 2 1 Output 5 Input 6 1 3 2 2 4 3 Output 2 Note In the first example, each element must be in its own subsequence because the sequence is strictly decreasing. In the second example, the sequence can be split into two non-decreasing subsequences: (1, 2, 2, 4) and (3, 3).","solution":"def min_non_decreasing_subsequences(seq): Returns the minimum number of non-decreasing subsequences the sequence can be split into. n = len(seq) if n == 0: return 0 # This will keep track of the end elements of each subsequence ends = [] for number in seq: # Try to place the number in an existing subsequence placed = False for i in range(len(ends)): if ends[i] <= number: ends[i] = number placed = True break # If the number can\'t be placed in any existing subsequences, create a new subsequence if not placed: ends.append(number) return len(ends)"},{"question":"A popular online game allows players to accumulate points by completing various quests and defeating monsters. Each player has a profile that keeps track of the total points earned, and players are ranked based on their points. Occasionally, the game server generates new ranking lists to showcase the top players and their points. You have been asked to write a function to generate the top K players from the list based on their points. If two players have the same points, they should be ranked alphabetically by their usernames. -----Input----- 1. An integer 1 le K le 100 representing the number of top players to display. 2. An integer 1 le M le 1000 representing the total number of players. 3. The next M lines each contain a string 1 le length(username) le 30 representing the username, followed by an integer 0 le points le 100000 representing the total points of that player. The username and points are separated by a space. -----Output----- The output should contain the top K players in descending order of their points. If two players have the same points, they should be listed in ascending alphabetical order of usernames. Each player should be outputted on a new line with their username followed by their points, separated by a space. -----Example----- Sample Input: 3 5 Alice 1500 Bob 3000 Charlie 1500 Dave 2000 Eve 3000 Sample Output: Bob 3000 Eve 3000 Dave 2000","solution":"def get_top_k_players(K, M, players): Get the top K players based on their points. If players have the same points, they are ranked alphabetically by their usernames. :param K: an integer representing the number of top players to display :param M: an integer representing the total number of players :param players: a list of tuples where each tuple contains a string (username) and an integer (points) :return: a list of tuples of the top K players in the format (username, points) # Sort players first by points in descending order, then by username in ascending order sorted_players = sorted(players, key=lambda x: (-x[1], x[0])) # Return the top K players return sorted_players[:K]"},{"question":"Chef Rahul is preparing a new recipe and he wants it to be unique. He believes that the key to a unique recipe lies in the order of ingredients. Specifically, he considers the sequence of ingredients unique if there are no repeating numbers in any contiguous subarray of length K. You are given an integer array A of length N, and you are also given an integer K. Your task is to check whether the sequence of ingredients is unique for all possible contiguous subarrays of length K. ------ Input ------ The first line of the input contains two space-separated integers N and K. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output ------ Print \\"UNIQUE\\" if all contiguous subarrays of length K have unique elements. Otherwise, print \\"NOT UNIQUE\\" (without quotes). ------ Constraints ------ 2 ≤ N ≤ 10^{5} 1 ≤ K ≤ N 1 ≤ A_{i} ≤ 10^{9} for each valid i ------ Subtasks ------ Subtasks #1 (20 points): K = 2 Subtasks #2 (80 points): original constraints ------ Sample Input 1 ------ 5 3 1 2 3 4 5 ------ Sample Output 1 ------ UNIQUE ------ Sample Input 2 ------ 6 3 4 1 2 3 2 1 ------ Sample Output 2 ------ NOT UNIQUE ----- explanation 1 ------ For the first input, all subarrays of size 3 are unique: (1, 2, 3), (2, 3, 4), (3, 4, 5). Therefore, the output is \\"UNIQUE\\". ----- explanation 2 ------ For the second input, the subarray (2, 3, 2) has repeating elements. Therefore, the output is \\"NOT UNIQUE\\".","solution":"def is_unique_sequence(N, K, A): Returns \\"UNIQUE\\" if all contiguous subarrays of length K have unique elements. Otherwise, returns \\"NOT UNIQUE\\". Parameters: N (int): Length of the array A. K (int): Length of subarrays to check for unique elements. A (list of int): The array of ingredients. Returns: str: \\"UNIQUE\\" if all subarrays of length K have unique elements, \\"NOT UNIQUE\\" otherwise. from collections import defaultdict if K == 1: return \\"UNIQUE\\" seen = defaultdict(int) for i in range(K): seen[A[i]] += 1 if seen[A[i]] > 1: return \\"NOT UNIQUE\\" for i in range(K, N): seen[A[i]] += 1 seen[A[i - K]] -= 1 if seen[A[i]] > 1: return \\"NOT UNIQUE\\" return \\"UNIQUE\\""},{"question":"A company is organizing a coding competition in which participants solve problems to earn points. Each problem has a certain number of points associated with it, but there\'s a catch: certain problems are \\"key problems\\" and must be solved in a specific order to earn any points from solving them. If a participant solves a key problem out of order, they do not earn any points for that problem. Given the list of problems, their point values, and the order requirements of the key problems, write a program to calculate the maximum possible points a participant can earn if they solve the problems in an optimal order. Input - The first line contains two integers n and m (1 ≤ n ≤ 1,000, 0 ≤ m ≤ n), where n is the number of problems and m is the number of key problems. - The second line contains n integers, where the i-th integer pi (1 ≤ pi ≤ 1,000) represents the points for the i-th problem. - The third line contains m integers, representing the indices (1-based) of the key problems in the order they need to be solved. Output - Output a single integer, the maximum possible points a participant can earn. Example Input 5 3 10 20 30 40 50 2 4 5 Output 100 Explanation The key problems are problem 2, 4, and 5. They must be solved in the order they appear: 2 → 4 → 5. An optimal order to solve the problems is: 1 → 3 → 2 → 4 → 5, earning points 10, 30, 20, 40, 50 respectively. The total points earned is 10 + 30 + 20 + 40 + 50 = 150.","solution":"def max_points(n, m, points, key_problems): Calculate the maximum possible points a participant can earn if they solve the problems in an optimal order. :param n: int, total number of problems :param m: int, number of key problems :param points: list of int, points for each problem :param key_problems: list of int, indices of key problems in the specified order :return: int, the maximum possible points # Ensure key_problems are 0-based for easier indexing key_problems = [kp - 1 for kp in key_problems] # Initialize max points to 0 max_points = 0 # Solve the problems in the order key_index = 0 for i in range(n): if key_index < m and i == key_problems[key_index]: max_points += points[i] key_index += 1 elif key_index >= m or i != key_problems[key_index]: max_points += points[i] return max_points"},{"question":"In this problem, you will be given an integer array A of size N and an integer K. Your task is to find the Kth smallest element in the array A. Note that the array can have duplicate elements. Input First line of input contains an integer T denoting the number of test cases. For each test case T, the first line of input contains two integers N and K, denoting the size of the array A and the position of the smallest element to find. The second line contains N space-separated integers denoting the elements of array A. Output For each test case, print the Kth smallest element in the array A. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100,000 1 ≤ A[i] ≤ 10,00,00,00,000 1 ≤ K ≤ N SAMPLE INPUT 2 5 2 7 10 4 3 20 7 5 7 10 4 3 20 15 2 SAMPLE OUTPUT 4 15","solution":"def find_kth_smallest(N, K, A): Returns the Kth smallest element in the array A of size N. A.sort() return A[K-1] def process_test_cases(T, test_cases): results = [] for case in test_cases: N, K, A = case result = find_kth_smallest(N, K, A) results.append(result) return results"},{"question":"You are given a tree with N nodes and N-1 edges. Each node contains a value, and each edge has a certain weight. You need to find the maximum sum of the node values on any path in the tree. A path in this context is defined as any sequence of nodes starting from one node and ending at another, while passing through intermediate nodes along the way. Note that you only need to consider the sum of the node values, not the edge weights. Constraints * 1 leq N leq 100000 * 1 leq value of each node leq 10^9 * 1 leq weight of each edge leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N node_value_1 node_value_2 ... node_value_N edge_1_u edge_1_v edge_1_weight edge_2_u edge_2_v edge_2_weight : edge_{N-1}_u edge_{N-1}_v edge_{N-1}_weight Output Print the maximum sum of the node values on any path in the tree. Examples Input 5 4 5 6 3 2 1 2 3 2 3 2 3 4 4 4 5 1 Output 20 Input 3 1 2 3 1 2 1 1 3 2 Output 6","solution":"from collections import defaultdict def dfs(node, parent, values, tree, max_path_sum): current_sum = values[node - 1] local_sum = values[node - 1] for neighbor, weight in tree[node]: if neighbor != parent: sum_from_neighbor = dfs(neighbor, node, values, tree, max_path_sum) if sum_from_neighbor > 0: local_sum += sum_from_neighbor max_path_sum[0] = max(max_path_sum[0], local_sum) return max(current_sum, local_sum) def max_path_sum_in_tree(N, node_values, edges): tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) max_path_sum = [-float(\'inf\')] dfs(1, -1, node_values, tree, max_path_sum) return max_path_sum[0] def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) node_values = list(map(int, data[1:N+1])) edges = [] for i in range(N-1): u = int(data[N+1 + 3*i]) v = int(data[N+2 + 3*i]) w = int(data[N+3 + 3*i]) edges.append((u, v, w)) result = max_path_sum_in_tree(N, node_values, edges) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Johnny loves playing with ropes. He has n ropes numbered from 1 to n. Each rope has a certain length, and Johnny decided to play a game where he observes the beautiful lengths in subsegments of ropes. A subsegment [L, R] of the ropes is called **beautiful** if the lengths in the subsegment are in strictly increasing, strictly decreasing, or all the same order. Johnny can ask you multiple queries about some subsegments of ropes, and he wants to find out if they are beautiful or not. Given the lengths of the ropes and the queries, determine if the subsegment is beautiful for each query. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of ropes. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the length of the i-th rope. - The third line contains an integer q (1 ≤ q ≤ 10^5) – the number of queries. - The following q lines each contain two integers L and R (1 ≤ L ≤ R ≤ n) – the indices of the subsegment. # Output - For each query, output \\"Yes\\" (without quotes) if the subsegment is beautiful, otherwise output \\"No\\". # Example Input ``` 5 1 2 2 3 4 3 1 5 2 3 3 4 ``` Output ``` No Yes Yes ``` # Note In the first query, subsegment [1, 5] is neither strictly increasing nor strictly decreasing nor all the same. In the second query, subsegment [2, 3] is all the same as both elements are equal to 2. In the third query, subsegment [3, 4] is strictly increasing because 2 < 3.","solution":"def is_beautiful_segment(lengths, L, R): Checks if the subsegment [L, R] of the lengths array is beautiful. A segment is considered beautiful if it is strictly increasing, strictly decreasing or all the same. subsegment = lengths[L-1:R] n = len(subsegment) if n == 1: return True increasing = all(subsegment[i] < subsegment[i+1] for i in range(n-1)) decreasing = all(subsegment[i] > subsegment[i+1] for i in range(n-1)) all_same = all(subsegment[i] == subsegment[i+1] for i in range(n-1)) return increasing or decreasing or all_same def process_queries(n, lengths, queries): Processes the list of queries and determines if each subsegment is beautiful. results = [] for L, R in queries: if is_beautiful_segment(lengths, L, R): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A biologist is conducting an experiment with bacterial colonies growing on a 2D grid. Each cell in the grid either contains some bacteria or is empty. The biologist is particularly interested in finding the largest square sub-grid that contains only bacteria. Given a grid representation where each cell is either \'1\' (contains bacteria) or \'0\' (empty), write a program to find the area of the largest square sub-grid that contains only bacteria. Input The input consists of several datasets. Each dataset starts with two integers h and w. h is the height of the grid and w is the width of the grid. You can assume 1≤h≤20 and 1≤w≤20. The next h lines each contain w characters (\'1\' or \'0\'), representing the state of the grid. A line containing two zeros indicates the end of the input. Output For each dataset, output a single line containing the area of the largest square that contains only \'1\'s. The output should not contain any other characters. Examples Input 4 4 1110 1101 1111 0110 3 5 11100 11111 10111 5 5 11011 11111 11110 11111 01111 0 0 Output 4 4 9","solution":"def maximalSquare(grid): Returns the area of the largest square that contains only \'1\'s in the given grid. if not grid: return 0 h = len(grid) w = len(grid[0]) dp = [[0] * w for _ in range(h)] max_side = 0 for i in range(h): for j in range(w): if grid[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side def process_input(data): Process the input data and return the results for each dataset. index = 0 results = [] while index < len(data): h, w = map(int, data[index].split()) if h == 0 and w == 0: break grid = [] for i in range(h): grid.append(data[index + 1 + i]) results.append(maximalSquare(grid)) index += h + 1 return results"},{"question":"Implement a Sudoku Solver Sudoku is a logic-based, combinatorial number-placement puzzle. The objective is to fill a 9×9 grid with digits so that each column, each row, and each of the nine 3×3 sub-grids that compose the grid (also called \\"boxes\\", \\"blocks\\", or \\"regions\\") contain all of the digits from 1 to 9. The puzzle setter provides a partially completed grid, which typically has a unique solution. You need to complete the assignment to write a computer program that solves the given Sudoku puzzle and prints the solved sudoku. Input Format The input contains a single 9x9 grid of integers. Each integer is between 0 and 9 inclusive (0 denotes an empty cell). Output Format Output the solved 9x9 grid with each line containing 9 integers separated by space. Example Input ``` 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 ``` Example Output ``` 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 ``` Note - The given Sudoku puzzle is always solvable. - Print the resulting complete Sudoku grid with rows separated by newlines.","solution":"def is_valid(board, row, col, num): # Check if number exists in row for x in range(9): if board[row][x] == num: return False # Check if number exists in column for x in range(9): if board[x][col] == num: return False # Check if number exists in 3x3 sub-grid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[i + start_row][j + start_col] == num: return False return True def solve_sudoku(board): empty = find_empty_location(board) if not empty: return True else: row, col = empty for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def find_empty_location(board): for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None def print_board(board): for row in board: print(\\" \\".join(str(num) for num in row)) def solve_and_print_sudoku(board): solve_sudoku(board) return board # Example usage: if __name__ == \\"__main__\\": example_input = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] solution_board = solve_and_print_sudoku(example_input) print_board(solution_board)"},{"question":"You are given a matrix of integers where each row represents the number of people in each room of a building. Your task is to determine if there exists a room such that the total number of people in that room is greater than any other room in that matrix. Input The first line contains two integers N and M representing the number of rows and columns of the matrix, respectively. Each of the next N lines contains M integers each, representing the number of people in the rooms of each floor. Output Print \\"YES\\" if there is a room with more people than any other room in the matrix, otherwise print \\"NO\\". Example Input: 3 3 2 1 3 5 1 1 4 2 1 Output: YES Explanation: The room with 5 people is the one with the highest number of people, greater than any other room in the matrix.","solution":"def has_room_with_most_people(matrix): Determines if there is a room with more people than any other room in the matrix. Params: matrix - List of List of integers representing the number of people in rooms. Returns: \\"YES\\" if such a room exists, otherwise \\"NO\\". if not matrix or not matrix[0]: return \\"NO\\" max_people = float(\'-inf\') for row in matrix: for people in row: if people > max_people: max_people = people for row in matrix: for people in row: if people == max_people: return \\"YES\\" return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) M = int(data[1]) matrix = [] index = 2 for i in range(N): matrix.append(list(map(int, data[index:index+M]))) index += M result = has_room_with_most_people(matrix) print(result)"},{"question":"Gudi enters a different chamber in the castle. On a pedestal, she finds an ancient book that presents another puzzle for her to solve: There\'s a string S indexed from 1 to N, consisting of lowercase English letters. You have the ability to perform two types of operations: 1. \\"Flip\\": Reverse the entire string. 2. \\"Shift\\": Move the first character of the string to the end. The aim is to use any combination of these operations any number of times to achieve the lexicographically smallest string possible. Input Description: The first line contains an integer T, denoting the number of test cases. The subsequent lines contain one test case each: - The first line contains the string S. Output Description: Print the answer to each test case in a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 SAMPLE INPUT 2 dcba xyzab SAMPLE OUTPUT abcd abxyz Explanation: For the first test case, flipping the string \\"dcba\\" results in \\"abcd\\", which is the smallest lexicographical order achievable. For the second test case, shifting the string \\"xyzab\\" multiple times until the \'ab\' segment comes in the front yields the smallest order \\"abxyz\\".","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string possible using the permitted operations. :param s: A string consisting of lowercase English letters :type s: str :return: The lexicographically smallest string possible by reversing or shifting :rtype: str n = len(s) min_string = s # Check the string itself if s < min_string: min_string = s # Check the reversed string reversed_s = s[::-1] if reversed_s < min_string: min_string = reversed_s # Check all rotations of the string for i in range(n): rotated_s = s[i:] + s[:i] if rotated_s < min_string: min_string = rotated_s return min_string def process_test_cases(test_cases): Processes multiple test cases :param test_cases: List of strings as test cases :type test_cases: list[str] :returns: List of results for each test case :rtype: list[str] results = [] for s in test_cases: results.append(lexicographically_smallest_string(s)) return results"},{"question":"A transportation company has recently expanded its services and introduced a new feature. The company wants to calculate the total cost of travel based on the weight of the cargo and the distance carried. They have defined the cost per kilometer depending on the type of cargo: - General Cargo: 1 per kilogram per kilometer. - Perishable Goods: 2 per kilogram per kilometer. - Hazardous Material: 3 per kilogram per kilometer. Your task is to create a program that reads the type of cargo, the weight of the cargo in kilograms, and the distance in kilometers, and then calculates the total cost of the travel. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. The next t lines describe each test case. Each line contains one string and two integers separated by spaces: - The type of cargo: one word among \\"General\\", \\"Perishable\\", or \\"Hazardous\\". - The weight of the cargo w (1 le w le 10^3) — the weight of the cargo in kilograms. - The distance d (1 le d le 10^3) — the distance in kilometers. -----Output----- For each test case, print one integer — the total cost of travel for each cargo type. -----Examples----- Input 3 General 100 50 Perishable 200 30 Hazardous 150 60 Output 5000 12000 27000 Input 2 General 10 100 Hazardous 5 200 Output 1000 3000 Input 1 Perishable 50 20 Output 2000 -----Note----- In the first example: - The cost for \\"General\\" cargo is 100 times 50 times 1 = 5000 - The cost for \\"Perishable\\" goods is 200 times 30 times 2 = 12000 - The cost for \\"Hazardous\\" material is 150 times 60 times 3 = 27000 In the second example: - The cost for \\"General\\" cargo is 10 times 100 times 1 = 1000 - The cost for \\"Hazardous\\" material is 5 times 200 times 3 = 3000 In the third example: - The cost for \\"Perishable\\" goods is 50 times 20 times 2 = 2000","solution":"def calculate_transport_cost(cargo_type, weight, distance): Calculate the total cost of travel based on the weight and distance for different types of cargo. :param cargo_type: Type of cargo (\\"General\\", \\"Perishable\\", \\"Hazardous\\") :param weight: Weight of the cargo in kilograms :param distance: Distance to be carried in kilometers :return: Total cost of travel cost_per_km = { \\"General\\": 1, \\"Perishable\\": 2, \\"Hazardous\\": 3 } return weight * distance * cost_per_km[cargo_type] def process_cases(test_cases): Process multiple test cases to calculate transport costs. :param test_cases: List of tuples containing cargo type, weight, and distance :return: List of calculated costs for each test case results = [] for case in test_cases: cargo_type, weight, distance = case cost = calculate_transport_cost(cargo_type, weight, distance) results.append(cost) return results # Example usage: # t = int(input()) # test_cases = [tuple(input().split()) for _ in range(t)] # formatted_cases = [(cargo, int(w), int(d)) for cargo, w, d in test_cases] # results = process_cases(formatted_cases) # for result in results: # print(result)"},{"question":"Two strings S1 and S2 are called isomorphic if there is a one-to-one correspondence between their characters while preserving the order of characters. In other words, each character in S1 can be replaced to get S2, and vice versa with a unique mapping. Your task is to write a function to determine if two given strings are isomorphic. -----Input----- - The input consists of multiple test cases. - The first line contains an integer T, the number of test cases. - For each test case, there are two lines: - The first line contains a string S1. - The second line contains a string S2. -----Output----- For each test case, output \\"YES\\" if strings S1 and S2 are isomorphic, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 103 - 1 ≤ |S1|, |S2| ≤ 104 - S1 and S2 contain only lowercase English letters. -----Example----- Input: 3 paper title foo bar abca zbxz Output: YES NO YES -----Explanation----- Example case 1: \'p\' -> \'t\', \'a\' -> \'i\', \'p\' -> \'t\', \'e\' -> \'l\', \'r\' -> \'e\'. The transformations preserve the order. Example case 2: No character mapping can transform \'foo\' into \'bar\'. Example case 3: \'a\' -> \'z\', \'b\' -> \'b\', \'c\' -> \'x\', \'a\' -> \'z\'. The transformations preserve the order.","solution":"def are_isomorphic(S1, S2): Determines if two strings S1 and S2 are isomorphic. if len(S1) != len(S2): return \\"NO\\" mapping_s1_s2 = {} mapping_s2_s1 = {} for char1, char2 in zip(S1, S2): if char1 in mapping_s1_s2 and mapping_s1_s2[char1] != char2: return \\"NO\\" if char2 in mapping_s2_s1 and mapping_s2_s1[char2] != char1: return \\"NO\\" mapping_s1_s2[char1] = char2 mapping_s2_s1[char2] = char1 return \\"YES\\" def main_function(T, test_cases): results = [] for i in range(T): S1, S2 = test_cases[i] results.append(are_isomorphic(S1, S2)) return results"},{"question":"**Soup Distinction** In a local culinary contest, chefs are evaluated based on the soups they prepare. Each soup is characterized by its name and type. There are two types of soup: \\"creamy\\" and \\"broth\\". You need to determine how many different types of soups have been prepared. -----Input----- The first line of input contains a single integer M (1 ≤ M ≤ 100) — the number of soups that have been prepared. The next M lines describe the soups. Each line contains two space-separated strings: the name of the soup and its type. The name is a string of lowercase English letters between 1 and 20 characters long. The type is either \\"creamy\\" or \\"broth\\". All soup names are distinct. -----Output----- Output a single number, representing the number of different types of soups prepared. -----Examples----- Input 5 tomato creamy chickenbroth broth mushroom creamy minestrone broth carrot creamy Output 2 Input 4 lentil broth pumpkin creamy beefbroth broth asparagus creamy Output 2","solution":"def distinct_soup_types(soup_data): Determines the number of different types of soups. Parameters: soup_data (list of tuples): A list where each tuple contains a soup name and its type. Returns: int: The number of different soup types. soup_types = set() for _, soup_type in soup_data: soup_types.add(soup_type) return len(soup_types) def count_soup_types_from_input(input_lines): Processes the input and counts the distinct soup types from the given data. Parameters: input_lines (list of strings): The input lines containing the count and soup details. Returns: int: The number of different soup types. M = int(input_lines[0]) soups = [tuple(line.split()) for line in input_lines[1:M+1]] return distinct_soup_types(soups)"},{"question":"A string of lowercase English letters is considered \\"beautiful\\" if it doesn\'t contain any two consecutive letters that are the same. Write a function to determine whether a given string is beautiful. -----Input:----- - The first line of the input contains a single integer N, denoting the number of test cases. The description of N test cases follows. - Each of the next N lines contains a single string s made up of lowercase English letters. -----Output:----- For each test case, print \\"YES\\" if the string is beautiful, otherwise print \\"NO\\". -----Constraints----- - 1 leq N leq 10^5 - 1 leq |s| leq 100 -----Sample Input:----- 4 abcdefg aabbcc abababa a -----Sample Output:----- YES NO YES YES","solution":"def is_beautiful(s): Determines if a given string is beautiful. :param s: string to check :return: Boolean value indicating whether string is beautiful for i in range(1, len(s)): if s[i] == s[i-1]: return False return True def process_test_cases(N, test_cases): Processes multiple test cases to determine if each string is beautiful. :param N: number of test cases :param test_cases: list of strings representing test cases :return: list of results for each test case (either \\"YES\\" or \\"NO\\") results = [] for s in test_cases: if is_beautiful(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"John loves puzzles and games. He recently came across a new game where he needs to manipulate an array of integers to achieve a target state with the minimum number of operations. The array consists of `n` integers, and each integer is either 0 or 1. An operation consists of choosing any index `i` (1 ≤ i ≤ n) and flipping the bit at that index (i.e., changing 0 to 1 or 1 to 0). Additionally, if `i` is not the first or the last index, flipping the bit at `i` will also flip the bits at positions `i-1` and `i+1`. John wants to transform the entire array to contain only 0s with the minimum number of operations. Help him determine the minimum number of operations needed. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 10^6) — the number of elements in the array. The second line contains `n` integers `a_i` (0 ≤ a_i ≤ 1) — the initial state of the array. -----Output----- Print the only integer `t` — the minimum number of operations needed to transform the array into an array of all 0s. -----Examples----- Input 3 1 0 1 Output 1 Input 5 1 1 0 1 0 Output 2","solution":"def min_operations_to_zeros(n, arr): operations = 0 i = 0 while i < n: if arr[i] == 1: operations += 1 while i < n and arr[i] == 1: i += 1 i += 1 return operations"},{"question":"Given a sequence of n integers, you need to determine if you can make all elements of the sequence equal by performing a series of operations. In one operation, you can select an element and either increment or decrement it by 1. Your task is to calculate the minimum number of such operations required. Input Format: - The first line contains an integer n, the number of elements in the sequence. - The second line contains n integers separated by spaces, denoting the elements of the sequence. Output Format: - Output a single integer, the minimum number of operations required to make all sequence elements equal. Constraints: - 1 ≤ n ≤ 1000 - 1 ≤ Each element in the sequence ≤ 1000 SAMPLE INPUT 4 1 2 3 4 SAMPLE OUTPUT 4","solution":"def min_operations_to_make_equal(n, arr): Calculate the minimum number of operations required to make all sequence elements equal by either incrementing or decrementing each element by 1. :param n: Number of elements in the sequence :param arr: List of integers representing the sequence :return: Minimum number of operations required # To minimize operations, we target the median of the array arr.sort() target = arr[n // 2] # Calculate the number of operations required to make all elements equal to the target operations = sum(abs(x - target) for x in arr) return operations"},{"question":"A company wants to send birthday wishes to its employees but only to those whose birthdates fall on a weekend. You are given a list of birthdates and you need to identify which of them fall on a Saturday or Sunday. Write a function `filterWeekendBirthdays` that takes a list of birthdates in the format \\"YYYY-MM-DD\\" and returns a list of birthdates that fall on a weekend. Example 1: Input: birthdates = [\\"2023-01-01\\", \\"2023-01-03\\", \\"2023-01-07\\", \\"2023-01-09\\"] Output: [\\"2023-01-01\\", \\"2023-01-07\\"] Explanation: 2023-01-01 is a Sunday, and 2023-01-07 is a Saturday. Example 2: Input: birthdates = [\\"2023-05-02\\", \\"2023-05-03\\", \\"2023-05-04\\"] Output: [] Explanation: None of the given dates fall on a weekend. Your Task: You don\'t need to read input or print anything. Complete the function `filterWeekendBirthdays(birthdates)` which takes a list of strings (birthdates) as input and returns a list of strings (weekend birthdates). Expected Time Complexity: O(n) where n is the number of birthdates. Expected Auxiliary Space: O(1) Constraints: 1 <= len(birthdates) <= 10^4 Each date string is in the format \\"YYYY-MM-DD\\" and is a valid date.","solution":"from datetime import datetime def filterWeekendBirthdays(birthdates): Filters the list of birthdates and returns those that fall on a weekend (Saturday or Sunday) weekend_birthdays = [] for date_str in birthdates: date_obj = datetime.strptime(date_str, \\"%Y-%m-%d\\") if date_obj.weekday() in (5, 6): # 5 is Saturday, 6 is Sunday weekend_birthdays.append(date_str) return weekend_birthdays"},{"question":"Task: Write a function `arrayToCSV` which takes a 2-dimensional array of integers `arr`, and returns a string representing the CSV (Comma Separated Values) format of this array. Rules/Notes: * The output string should have no spaces. * Rows should be separated by newline characters (`n`), and elements in the same row should be separated by commas (`,`). # Examples: * arrayToCSV([[1, 2, 3], [4, 5, 6], [7, 8, 9]]): ```text 1,2,3 4,5,6 7,8,9 ``` * arrayToCSV([[10, 20], [30, 40], [50]]): ```text 10,20 30,40 50 ``` * arrayToCSV([]): ```text <empty string> ``` ```if-not:cfml * Hint: Use `join` function with `,` for rows and `n` for lines to create the output. ``` ```if:cfml * Hint: Use `Join` function with `,` for rows and `Chr(10)` for lines to create the output. ``` [List of all my katas](\'http://www.codewars.com/users/curious_db97/authored\')","solution":"def arrayToCSV(arr): Converts a 2D array of integers into a CSV formatted string. Parameters: arr (list of list of int): A 2D list of integers Returns: str: A CSV formatted string return \'n\'.join(\',\'.join(map(str, row)) for row in arr)"},{"question":"Chef has recently started working out in a gym and maintains a log of the total weight he lifts every day. He wants to know on which days he lifts more weight than on the previous day. Help Chef find out on which days the weight he lifted is greater than the previous day. ------ Input Format ------ - The first line of the input consists of a single integer T, denoting the number of test cases. - Each test case starts with a single integer N, the number of days. - The next line contains N space-separated integers, where each integer represents the weight lifted by Chef on that day. ------ Output Format ------ For each test case, print a single line containing a space-separated list of integers. Each integer should represent the day (1-indexed) on which the weight lifted is greater than the previous day. If there are no such days, print \\"NONE\\". ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 100 0 ≤ text{weight on any day} ≤ 1000 ----- Sample Input 1 ------ 3 6 10 20 15 25 30 18 5 5 5 5 5 5 4 2 4 6 8 ----- Sample Output 1 ------ 2 4 5 NONE 2 3 4 ----- explanation 1 ------ Test case 1: Chef lifts more on days 2 (20 > 10), 4 (25 > 15), and 5 (30 > 25). Test case 2: The weight lifted is the same every day, so there are no days where Chef lifts more than the previous day. Test case 3: Chef lifts more on days 2 (4 > 2), 3 (6 > 4), and 4 (8 > 6).","solution":"def days_with_more_weight(test_cases): result = [] for case in test_cases: N, weights = case days = [] for i in range(1, N): if weights[i] > weights[i-1]: days.append(i + 1) if not days: result.append(\\"NONE\\") else: result.append(\\" \\".join(map(str, days))) return result def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) weights = list(map(int, lines[index + 1].split())) test_cases.append((N, weights)) index += 2 return test_cases"},{"question":"Problem In a network communication system, we have N servers connected by direct communication channels. Each server has a unique ID from 1 to N. Some servers may be directly connected to each other by a bidirectional communication channel, which allows them to directly send and receive messages without having to route through another server. The communication system guarantees that if there\'s any direct channel between servers, it enables them to send messages in both directions. Your task is to determine the number of connected components in the network. A connected component is a group of servers such that there is a path of direct communication channels between any pair of servers in this group. Constraints: * 1 ≤ N ≤ 1000 * 0 ≤ M ≤ 10000 * 1 ≤ u, v ≤ N Input: The input consists of multiple lines: - The first line contains two integers, N and M, representing the number of servers and the number of direct communication channels, respectively. - The next M lines each contain two integers, u and v, indicating a direct communication channel between servers u and v. Output: Output the number of connected components in the network. Examples: Input: 5 3 1 2 2 3 4 5 Output: 2 Input: 6 4 1 2 2 3 4 5 5 6 Output: 2","solution":"def find_connected_components(n, edges): Finds the number of connected components in a network of servers. Parameters: n (int): Number of servers. edges (List[Tuple[int, int]]): List of bidirectional communication channels between servers. Returns: int: Number of connected components. def dfs(node, visited, adjacency_list): stack = [node] while stack: current = stack.pop() for neighbor in adjacency_list[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) # Create adjacency list adjacency_list = {i: [] for i in range(1, n + 1)} for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = set() connected_components = 0 for server in range(1, n + 1): if server not in visited: dfs(server, visited, adjacency_list) connected_components += 1 return connected_components # Function to parse input and call the solution function def number_of_connected_components(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:m+1]] return find_connected_components(n, edges)"},{"question":"Given two strings, `str1` and `str2`, determine if `str1` is a subsequence of `str2`. A string `str1` is a subsequence of another string `str2` if you can delete some or no characters from `str2` without changing the order of the remaining characters to get `str1`. For example, \\"abc\\", \\"abg\\", \\"bdf\\" are subsequences of \\"abcdefg\\", but \\"acf\\", \\"axc\\" are not. Write a function to determine if `str1` is a subsequence of `str2`. Input The input contains two strings `str1` and `str2` separated by a space. 1 ≤ |str1|, |str2| ≤ 1000 Output Print \\"True\\" if `str1` is a subsequence of `str2`, otherwise print \\"False\\". Examples Input abc abcdef Output True Input axc abcdef Output False Input hello heoollllooow Output True Input hello helium Output False","solution":"def is_subsequence(str1, str2): Determine if str1 is a subsequence of str2. iter_str2 = iter(str2) return all(char in iter_str2 for char in str1)"},{"question":"Isabella is fascinated with a new sequence problem. She has discovered a sequence where each term ( S_n ) is generated based on an initial term ( S_1 ) and subsequent terms follow a particular rule. Given the initial term ( S_1 = k ), the next term is generated by splitting the current term into its digits, summing the squares of these digits to form the next number in the sequence. The sequence ends when the resulting term is 1 or the sequence starts to repeat. Isabella wants to know if the sequence will end in 1 for a given initial value. -----Input----- The input consists of an integer ( t ) (( 1 le t le 10^4 )) — the number of test cases. Each test case contains an integer ( k ) (( 1 le k le 10^9 )) — the initial term of the sequence. -----Output----- For each test case, if the sequence ends in 1, print YES. Otherwise, print NO. -----Examples----- Input 3 19 2 7 Output YES NO YES -----Note----- For ( k = 19 ): Initial term ( S_1 = 19 ) Next term ( S_2 ) is calculated as ( 1^2 + 9^2 = 1 + 81 = 82 ) Next term ( S_3 ) is calculated as ( 8^2 + 2^2 = 64 + 4 = 68 ) Next term ( S_4 ) is calculated as ( 6^2 + 8^2 = 36 + 64 = 100 ) Next term ( S_5 ) is calculated as ( 1^2 + 0^2 + 0^2 = 1 ) For ( k = 2 ): Initial term ( S_1 = 2 ) Next term ( S_2 ) is calculated as ( 2^2 = 4 ) Sequence continues but never reaches 1 and starts to repeat. For ( k = 7 ): Initial term ( S_1 = 7 ) Next term ( S_2 ) is calculated as ( 7^2 = 49 ) Next term ( S_3 ) is calculated as ( 4^2 + 9^2 = 16 + 81 = 97 ) Next term ( S_4 ) is calculated as ( 9^2 + 7^2 = 81 + 49 = 130 ) Next term ( S_5 ) is calculated as ( 1^2 + 3^2 + 0^2 = 1 + 9 + 0 = 10 ) Next term ( S_6 ) is calculated as ( 1^2 + 0^2 = 1 ) Hence, for ( k = 19 ) and ( k = 7 ), the sequence ends in 1, but for ( k = 2 ), it does not.","solution":"def sum_of_squares_of_digits(n): Function to calculate the sum of squares of digits of a given number. return sum(int(digit) ** 2 for digit in str(n)) def is_sequence_ending_in_1(k): Determines if the sequence starting with k ends in 1. seen_numbers = set() while k != 1 and k not in seen_numbers: seen_numbers.add(k) k = sum_of_squares_of_digits(k) return k == 1 def process_test_cases(test_cases): Processes a list of test cases and returns results indicating if each sequence ends in 1. return [\\"YES\\" if is_sequence_ending_in_1(k) else \\"NO\\" for k in test_cases]"},{"question":"Write a function that takes an array of integers and an integer target value as input. The function should return all unique triplets in the array that add up to the target value. Each triplet should be an array of three integers in ascending order. The output should be a list of these triplets, sorted in ascending order of the first triplet element, then second, and then third. ___ Examples: ``` array = [1, 0, -1, 2, -1, -4] target = 0 Result: [[-1, -1, 2], [-1, 0, 1]] array = [1, 2, -2, -1] target = 1 Result: [[-1, 1, 1]] ``` Note: - No triplet numbers in the output should appear more than once. - The function should handle cases where no triplets can be found but should not raise any errors or exceptions. ___","solution":"def three_sum(array, target): Returns all unique triplets in the array that add up to the target value. :param array: List[int] - List of integers :param target: int - Target sum for the triplets :return: List[List[int]] - List of triplets array.sort() triplets = [] length = len(array) for i in range(length - 2): if i > 0 and array[i] == array[i - 1]: continue left, right = i + 1, length - 1 while left < right: current_sum = array[i] + array[left] + array[right] if current_sum == target: triplets.append([array[i], array[left], array[right]]) while left < right and array[left] == array[left + 1]: left += 1 while left < right and array[right] == array[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return triplets"},{"question":"You are organizing a coding bootcamp, and you want to create an automated system to manage the registration of participants. You have a list of participants where each participant is represented as a string consisting of their name, and the camp sessions they have registered for. Each participant can sign up for one or more sessions, designated by the session numbers (positive integers). You need to process the registration data and generate a list of sessions with the participants registered for each session. Write a program that reads the participant data and outputs the list of sessions with the participants in each session in alphabetical order. -----Constraints----- - The number of participants is between 1 and 100. - Each participant name is a non-empty string containing only alphabetic characters and has a length of at most 20 characters. - Each session number is a positive integer and is between 1 and 50. - A participant could be registered for one or more sessions, and session numbers for each participant are unique. -----Input----- Input is given from Standard Input in the following format: n name1 session1 session2 ... sessionK name2 session1 session3 ... namen session2 session4 ... sessionM Where `n` is the number of participants. Each of the following `n` lines consists of a participant\'s name followed by one or more session numbers they are registered for, separated by spaces. -----Output----- For each session that has at least one participant, output the session number followed by the list of participants registered for that session in alphabetical order. The output should be sorted by session numbers in increasing order. ---Sample Input--- 4 Alice 1 2 3 Bob 1 3 Charlie 2 3 Dave 4 ---Sample Output--- 1 Alice Bob 2 Alice Charlie 3 Alice Bob Charlie 4 Dave","solution":"def process_registrations(n, participants): session_dict = {} for participant in participants: data = participant.split() name = data[0] sessions = map(int, data[1:]) for session in sessions: if session not in session_dict: session_dict[session] = [] session_dict[session].append(name) result = [] for session in sorted(session_dict.keys()): result.append(f\\"{session} {\' \'.join(sorted(session_dict[session]))}\\") return result"},{"question":"You\'ve just joined a company that deals with scheduling and event planning. One of your tasks is to build an algorithm to help optimize the allocation of meeting rooms. The company has a single office with n meeting rooms, numbered from 1 to n. You are given a list of m meetings that need to be scheduled. Each meeting has a start time and an end time. Two meetings can be scheduled in the same room if and only if their times do not overlap. Your task is to determine the minimum number of meeting rooms required to accommodate all the meetings. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 105, 1 ≤ m ≤ 105) — the number of meeting rooms and the number of meetings, respectively. The next m lines each contain two space-separated integers start and end (0 ≤ start < end ≤ 109) — the start and end times of a meeting. Output Print a single integer — the minimum number of meeting rooms required so that all meetings can be held without any overlap. Examples Input 4 3 1 10 2 6 8 12 Output 2 Input 2 5 0 30 5 10 15 20 15 25 25 30 Output 3 Input 5 1 4 5 Output 1 Note In the first sample, two rooms are enough to accommodate all meetings: - Room 1: [1, 10], [8, 12] - Room 2: [2, 6] In the second sample, three rooms are required: - Room 1: [0, 30] - Room 2: [5, 10], [15, 25] - Room 3: [15, 20], [25, 30] In the third sample, only one room is needed since there is only one meeting.","solution":"import heapq def min_meeting_rooms(meetings): Returns the minimum number of meeting rooms required to accommodate all meetings. if not meetings: return 0 # Sort meetings based on start times meetings.sort(key=lambda x: x[0]) # Min-heap to track the end time of meetings end_times = [] # Add the end time of the first meeting heapq.heappush(end_times, meetings[0][1]) for i in range(1, len(meetings)): # Check if the current meeting can use the room that has the earliest end time if meetings[i][0] >= end_times[0]: heapq.heappop(end_times) # Add the end time of the current meeting heapq.heappush(end_times, meetings[i][1]) return len(end_times) def process_input(input_string): Processes the input string and returns the minimum number of meeting rooms required. lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) meetings = [list(map(int, line.split())) for line in lines[1:]] return min_meeting_rooms(meetings)"},{"question":"An amusement park is planning to construct walking paths to connect various attractions. There are n attractions and m possible walking paths between some pairs of attractions. Each walking path has a specified length. The park administration wants to minimize the total length of the walking paths while ensuring that every attraction is accessible from every other attraction. This means that every attraction should either be directly connected to another attraction or indirectly connected through other attractions, forming a connected graph. Write a function `minimumWalkingPathLength` that will find the minimum total length of the walking paths required to make all attractions accessible. Function Description Complete the function `minimumWalkingPathLength` below. `minimumWalkingPathLength` has the following parameters: - `int n`: the number of attractions - `List[List[int]] paths`: each path contains three integers that represent the two attractions connected by a walking path and the length of that path Returns - `int`: the minimum total length of walking paths required to connect all attractions Input Format - The first line contains a single integer n, the number of attractions. - The second line contains a single integer m, the number of possible walking paths. - Each of the next m lines contains three space-separated integers u, v, and l, which denote a walking path between attractions u and v with length l. Constraints - 1 leq n leq 10^5 - 0 leq m leq 2 cdot 10^5 - 1 leq u, v leq n - 1 leq l leq 10^6 Sample Input ``` 4 4 1 2 1 1 3 4 2 3 2 3 4 3 ``` Sample Output ``` 6 ``` Explanation In the given input, some attractions can be connected through multiple possible walking paths, but we need to select paths such that the total length is minimized while ensuring all attractions are accessible. The optimal way to connect the attractions in this example is: - Build the path between attractions 1 and 2 with length 1 - Build the path between attractions 2 and 3 with length 2 - Build the path between attractions 3 and 4 with length 3 Thus, the minimum total length of the walking paths required to connect all attractions is 1 + 2 + 3 = 6.","solution":"def minimumWalkingPathLength(n, paths): Returns the minimum total length of the walking paths required to make all attractions accessible. Parameters: n (int): the number of attractions paths (List[List[int]]): each path contains three integers [u, v, l] where u and v are attractions connected by a walking path and l is the length of the path Returns: int: the minimum total length of walking paths required to connect all attractions # Using Kruskal\'s Algorithm to find the Minimum Spanning Tree (MST) # Define a helper function to find the root of an attraction def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Define a helper function to perform the union of two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Initialize parent and rank arrays to handle the union-find operations parent = [] rank = [] # Initially, each attraction is its own parent (i.e., self-rooted) for node in range(n): parent.append(node) rank.append(0) # Sort all the paths in increasing order of their length paths = sorted(paths, key=lambda item: item[2]) mst_length = 0 # Initialize the length of the MST edge_count = 0 # Number of edges in the MST i = 0 # Index variable, used for sorted edges # Number of edges in the MST which will be (n - 1) for a connected graph with n nodes while edge_count < n - 1 and i < len(paths): u, v, l = paths[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) # If including this edge does not cause a cycle, include it in the MST if x != y: edge_count = edge_count + 1 mst_length = mst_length + l union(parent, rank, x, y) return mst_length"},{"question":"You are given a text string and you need to analyze the frequency of each character in the string. Write a program that outputs the character frequencies in descending order. -----Input:----- - The first line contains T, the number of test cases. Then the test cases follow. - Each test case contains a single string S. -----Output:----- For each test case, output the characters and their frequencies in descending order of frequency. If two characters have the same frequency, they should be printed in increasing order of their ASCII values. -----Constraints----- - 1 leq T leq 50 - 1 leq |S| leq 1000 - S contains only printable ASCII characters. -----Sample Input:----- 2 hello aabbbcccc -----Sample Output:----- l:2 o:1 e:1 h:1 c:4 b:3 a:2 -----EXPLANATION:----- In the first test case, \'h\' appears once, \'e\' appears once, \'l\' appears twice, and \'o\' appears once. \'l\' is most frequent, followed by \'h\', \'e\', \'o\'. In the second test case, \'a\', \'b\', \'c\' appear 2, 3, and 4 times respectively. They are sorted by frequency, with \'c\' appearing most frequently, followed by \'b\' and \'a\'.","solution":"def char_frequencies(T, test_cases): from collections import Counter results = [] for s in test_cases: char_count = Counter(s) sorted_chars = sorted(char_count.items(), key=lambda x: (-x[1], x[0])) for char, freq in sorted_chars: results.append(f\\"{char}:{freq}\\") return results"},{"question":"Consider the following: You are given two strings, mathbf{text{A}} and mathbf{text{B}}, both of the same length n. Your task is to find the length of the longest common subsequence between these two strings. A subsequence of a string is a sequence that can be derived from another string by deleting some or no elements without changing the order of the remaining elements. Given the strings mathbf{text{A}} and mathbf{text{B}}, print the length of the longest common subsequence of mathbf{text{A}} and mathbf{text{B}}. Example [ text{A} = text{\'AGGTAB\'} ] [ text{B} = text{\'GXTXAYB\'} ] The longest common subsequence is \'GTAB\', which has a length of 4. Function Description Complete the `longest_common_subsequence` function in the editor below. `longest_common_subsequence` has the following parameters: - `string A`: the first string - `string B`: the second string Returns - `int`: the length of the longest common subsequence of `A` and `B` Input Format The first line contains the first string, mathbf{text{A}}. The second line contains the second string, mathbf{text{B}}. Constraints [ 1 leq n leq 1000 ] It is guaranteed that both strings have the same length. Sample Input [ text{A} = \'ABCBDAB\' ] [ text{B} = \'BDCAB\' ] Sample Output 4 Explanation The longest common subsequence between \'ABCBDAB\' and \'BDCAB\' is \'BCAB\', which has a length of 4.","solution":"def longest_common_subsequence(A, B): Returns the length of the longest common subsequence between two strings A and B. n = len(A) m = len(B) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"You are given an array of n integers representing heights of blocks and you are allowed to choose any contiguous subarray (possibly empty) and remove the blocks in that subarray. Any removed blocks can be placed on top of any of the remaining blocks, but each block can hold at most one additional block. After removing and stacking the blocks, you need to calculate the height difference between the tallest and the shortest block. Input The first line contains a single integer n (1 ≤ n ≤ 105) - the number of elements in the array. The second line contains a sequence consisting of n integers h1, h2, ..., hn (1 ≤ hi ≤ 109) - the original heights of the blocks. Output Print the minimum possible height difference between the tallest and the shortest block after removing and stacking the blocks optimally. Examples Input 5 4 2 7 5 3 Output 1 Input 3 1 2 3 Output 0","solution":"def min_height_difference(n, heights): Given an array of block heights, determines the minimal height difference between the tallest and shortest blocks after optimally removing and stacking any contiguous subarray. if n == 0: return 0 total_blocks = sum(heights) # The minimum possible height after optimal stacking will be the average height (divided blocks equally) average_height = total_blocks // n remainder = total_blocks % n if remainder == 0: return 0 else: return 1 # Example execution # print(min_height_difference(5, [4, 2, 7, 5, 3])) # Expected output: 1 # print(min_height_difference(3, [1, 2, 3])) # Expected output: 0"},{"question":"Sarah is a software developer and she often has to merge sorted arrays during her work. Given two sorted integer arrays, she needs to merge them into a single sorted array without using any built-in sort functions. Write a program that takes two sorted arrays as input and outputs a single merged sorted array. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the first array. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9), which are the elements of the first sorted array. - The third line contains an integer `m` (1 ≤ m ≤ 10^5) — the number of elements in the second array. - The fourth line contains `m` integers `b1, b2, ..., bm` (1 ≤ bi ≤ 10^9), which are the elements of the second sorted array. Output - Output a single line containing `n + m` integers, the elements of the merged sorted array. Example Input 4 1 3 5 7 3 2 4 6 Output 1 2 3 4 5 6 7","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. merged_array = [] i, j = 0, 0 n, m = len(arr1), len(arr2) while i < n and j < m: if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < n: merged_array.append(arr1[i]) i += 1 while j < m: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Given a list of integers, your task is to identify the maximum sum of any contiguous subarray of the list. This problem is often referred to as the \\"maximum subarray problem,\\" and a well-known solution for it is Kadane\'s Algorithm. -----Input----- The input consists of two lines: 1. The first line contains an integer N (1 leq N leq 10^5), the number of integers in the list. 2. The second line contains N integers, each integer i (|i| leq 10^4), representing the elements of the list. -----Output----- Output a single integer, the maximum sum of any contiguous subarray. -----Explanation of Sample Inputs----- In sample input 1, the contiguous subarray with the maximum sum is [-2, 1, -3, 4, -1, 2, 1], which has a sum of 6. In sample input 2, the contiguous subarray with the maximum sum is [-2, 1, -3, 4, -1, 2, 1, -5, 4], which has a sum of 6. -----Examples----- Sample Input 1: 9 -2 1 -3 4 -1 2 1 -5 4 Sample Output 1: 6 Sample Input 2: 1 1 Sample Output 2: 1","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray using Kadane\'s algorithm. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of integers. A \\"peak\\" is an element that is greater than both its neighbors. Your task is to determine the number of peaks in the array. Note: - If the array has only one element, it cannot be a peak. - The first and the last elements of the array cannot be peaks because they have only one neighbor each. - The array size will be at least 3. # Input - The first line contains an integer n (3 ≤ n ≤ 100), the number of elements in the array. - The second line contains n space-separated integers, representing the elements of the array. # Output - Print a single integer, the number of peaks in the array. # Sample Input ``` 5 1 3 2 5 4 ``` # Sample Output ``` 2 ``` # Explanation In this example, 3 is a peak because it is greater than its neighbors (1 and 2), and 5 is a peak because it is greater than its neighbors (2 and 4). Therefore, the output is 2.","solution":"def count_peaks(n, arr): Determines the number of peaks in the array. Parameters: n (int): The number of elements in the array. arr (list of int): The elements of the array. Returns: int: The number of peaks in the array. peak_count = 0 for i in range(1, n-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: peak_count += 1 return peak_count"},{"question":"In this problem, you are given an integer n and a list of n integers. Your task is to determine if the array is a permutation of numbers from 1 to n. A permutation of numbers from 1 to n is defined as containing each number from 1 to n exactly once. Constraints * 1 ≤ n ≤ 1000 * Each element of the list is an integer between 1 and 1000. Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print `YES` if the array is a permutation of numbers from 1 to n, otherwise print `NO`. Examples Input 5 1 2 3 4 5 Output YES Input 5 1 2 2 4 5 Output NO","solution":"def is_permutation(n, arr): Determines if the array \'arr\' is a permutation of numbers from 1 to n. Args: n : int : Size of the array and the range of numbers (from 1 to n) arr : list of int : List containing integers Returns: str : \\"YES\\" if array is a permutation of numbers from 1 to n, otherwise \\"NO\\" if sorted(arr) == list(range(1, n + 1)): return \\"YES\\" else: return \\"NO\\""},{"question":"# Task Write a function `rotate_matrix`/`rotate_matrix()` that takes in a 2D list (matrix) and returns the matrix after rotating it 90 degrees clockwise. The rotation should be performed in-place, meaning the function should modify the original matrix and not return a new one. # Constraints - The matrix will have at least 1 row and 1 column. - The matrix can be of any size (NxN or NxM). # Examples ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # The matrix should be modified to: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` ```python matrix = [ [1, 2], [3, 4], [5, 6] ] rotate_matrix(matrix) # The matrix should be modified to: # [ # [5, 3, 1], # [6, 4, 2] # ] ``` # Notes - You do not need to return anything. - Make sure to handle non-square matrices as well.","solution":"def rotate_matrix(matrix): Rotates a given 2D matrix 90 degrees clockwise. This function modifies the matrix in place. # Get dimensions rows, cols = len(matrix), len(matrix[0]) # Create a new matrix to hold the rotation of the original matrix rotated_matrix = [[0] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): rotated_matrix[c][rows - 1 - r] = matrix[r][c] # Copy the rotated matrix back to the original matrix matrix.clear() matrix.extend(rotated_matrix)"},{"question":"Zara has a circular garden with N equally spaced flowers numbered from 1 to N along the circumference. We call a sequence of K distinct flowers a \\"blooming set\\" if the absolute difference between the labels of any two consecutive flowers in the sequence is either 1 or N-1 (mod N). Note that since the garden is circular, flower N is considered adjacent to flower 1. Your task is to count the number of distinct \\"blooming sets\\" for given values of N and K. -----Input----- The first line contains two integers N and K (2 ≤ K ≤ N ≤ 10^5) — the total number of flowers in the circular garden and the number of flowers in a blooming set, respectively. -----Output----- Print a single integer, the number of distinct \\"blooming sets\\" of length K modulo 10^9 + 7. -----Examples----- Input 5 2 Output 5 Input 6 3 Output 12 Input 8 4 Output 0 -----Note----- In the first example, N=5 and K=2 imply 5 possible blooming sets: {1,2}, {2,3}, {3,4}, {4,5}, {5,1}. In the second example, N=6 and K=3 imply 12 possible blooming sets: {1,2,3}, {2,3,4}, {3,4,5}, {4,5,6}, {5,6,1}, {6,1,2}, {1,6,5}, {6,5,4}, {5,4,3}, {4,3,2}, {3,2,1}, {2,1,6}. In the third example, N=8 and K=4 imply no possible blooming sets fulfilling the given conditions.","solution":"def blooming_sets_count(N, K): Function to count the number of distinct \\"blooming sets\\" of length K modulo 10^9 + 7. MOD = 10**9 + 7 # If K > N, it\'s impossible to form such a blooming set if K > N: return 0 # If K == 2, the result is simply the number of flowers (adjacent pairs) if K == 2: return N # For K >= 3, the result is 0 unless K alternate adjacent flowers can cover around the circle if N % 2 == 0 and K == N: return 0 if K % 2 == 1: return (2 * N) % MOD else: return 0"},{"question":"A game called \\"Round Robin Quiz\\" involves n players seated in a circle. Each player is given a unique integer identifier from 1 to n. The game proceeds in rounds. In each round, one player is chosen as the starting player and a question is asked. The player who answers the question correctly gets the score for that round and becomes the starting player for the next round. The score for each round is the sum of the identifiers of the players who have not yet scored in any round. A player cannot score in more than one round. Given this setup, determine the maximum possible score a player can achieve if they play strategically. Input The input consists of a single integer n (1 ≤ n ≤ 1000) -- the number of players. Output Print a single integer -- the maximum possible score a player can achieve in the game. Examples Input 3 Output 6 Input 5 Output 15 Note For the first example with 3 players, the players are identified by 1, 2, and 3. * In the first round, irrespective of the starting player, the sum of all identifiers is 1 + 2 + 3 = 6. Therefore, the maximum score a player can achieve if they get this round is 6. For the second example with 5 players, the players are identified by 1, 2, 3, 4, and 5. * In the first round, the sum of all identifiers is 1 + 2 + 3 + 4 + 5 = 15. Therefore, the maximum score a player can achieve if they get this round is 15.","solution":"def maximum_possible_score(n): Given the number of players, return the maximum possible score a player can achieve. return sum(range(1, n + 1))"},{"question":"Binary Tree - Depth and Sum Implement `Depth()` to determine the maximum depth (or height) of a binary tree. Implement `Sum()` to calculate the sum of all the values stored in the nodes of the binary tree. The `Node` class which defines the structure of the nodes in the binary tree does not need to be redefined.","solution":"class Node: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def Depth(node): Returns the maximum depth (or height) of the binary tree. if not node: return 0 left_depth = Depth(node.left) right_depth = Depth(node.right) return max(left_depth, right_depth) + 1 def Sum(node): Returns the sum of all the values stored in the nodes of the binary tree. if not node: return 0 left_sum = Sum(node.left) right_sum = Sum(node.right) return node.value + left_sum + right_sum"},{"question":"Maria and Ivan are playing a game involving rectangular grids. Each grid is composed of m rows and n columns. They take turns to place a domino on the grid, where a domino can cover exactly two adjacent cells either horizontally or vertically. A cell can only be covered by one domino, and once placed, a domino cannot be moved. Maria always starts first, and both players play optimally. The player who cannot place a domino in their turn loses. Determine which player wins given the grid dimensions. Input The first line contains integer T (1 ≤ T ≤ 100) — the number of grids for which you should determine the winning player. Each of the following T lines contains two integers mi and ni (1 ≤ mi, ni ≤ 1000) — the dimensions of the grids. Output For each grid mi × ni, print \\"Maria\\" if Maria wins, or \\"Ivan\\" if Ivan wins, considering both players play optimally well. Examples Input 3 2 3 4 4 1 7 Output Maria Maria Ivan","solution":"def determine_winner(T, grids): Determines the winner for each grid based on its dimensions. Parameters: T (int): The number of grids. grids (list of tuples): Each tuple contains (m, n) representing the dimensions of the grid. Returns: list of str: The result for each grid, \\"Maria\\" if Maria wins, or \\"Ivan\\" if Ivan wins. results = [] for m, n in grids: if (m * n) % 2 == 0: results.append(\\"Maria\\") else: results.append(\\"Ivan\\") return results"},{"question":"Given a string s representing a sentence, ensure that every word in the sentence starts with a capital letter. Return the modified sentence as a string. A word is defined as a sequence of characters separated by a space. Non-alphabetical characters should remain unchanged. Example 1: Input: s = \\"hello world\\" Output: \\"Hello World\\" Explanation: Both words in the sentence are capitalized. Example 2: Input: s = \\"this is a test\\" Output: \\"This Is A Test\\" Explanation: Every word in the sentence starts with a capital letter. Example 3: Input: s = \\"2b or not 2b\\" Output: \\"2b Or Not 2b\\" Explanation: Only words consisting of alphabetical characters start with a capital letter. \\"2b\\" remains \\"2b\\". Example 4: Input: s = \\"multiple spaces here\\" Output: \\"Multiple Spaces Here\\" Explanation: Multiple consecutive spaces should be retained and do not affect the capitalization of words. Example 5: Input: s = \\"already Capitalized\\" Output: \\"Already Capitalized\\" Explanation: Words that are already capitalized remain unchanged. Constraints: - 1 <= s.length <= 10^4 - s consists of lower case and upper case English letters, digits, and/or spaces.","solution":"def capitalize_sentence(s): Capitalizes the first letter of each word in the sentence. Parameters: s (str): Input sentence Returns: str: Modified sentence with each word capitalized return \' \'.join(word.capitalize() for word in s.split(\' \'))"},{"question":"In a distant kingdom, the royal treasury is secured by a series of magical locks. Each lock can only be opened by a specific key. The king has N different keys, each uniquely identified by an integer from 1 to N. To ensure maximum security, the king needs to create a mechanism to track each key\'s usage and its return to the treasury after use. The king assigns the task of writing a program to manage this process. The program should be able to handle the following commands: - `use X`: Indicates that the key with identifier X is being taken out. If the key is already out, the program should note that it was already taken. - `return X`: Indicates that the key with identifier X is being returned to the treasury. If the key is not currently out, the program should note that it was never taken. Your task is to implement the program that processes these commands and prints the appropriate messages based on the above conditions. Input The first line contains a single integer N (1 ≤ N ≤ 1000) which represents the number of keys. The second line contains a single integer M (1 ≤ M ≤ 1000) which represents the number of commands. The next M lines contain one of the following commands: `use X` or `return X`, where X is an integer (1 ≤ X ≤ N). Output For each `use X` command, output \\"Key X taken\\" if the key was not already taken or \\"Key X was already taken\\" if the key was already out. For each `return X` command, output \\"Key X returned\\" if the key was out or \\"Key X was never taken\\" if the key was never taken. Example Input 5 7 use 1 use 2 use 1 return 1 return 2 return 2 use 3 Output Key 1 taken Key 2 taken Key 1 was already taken Key 1 returned Key 2 returned Key 2 was never taken Key 3 taken","solution":"def manage_keys(N, M, commands): keys_in_use = set() result = [] for command in commands: action, X = command.split() X = int(X) if action == \\"use\\": if X in keys_in_use: result.append(f\\"Key {X} was already taken\\") else: keys_in_use.add(X) result.append(f\\"Key {X} taken\\") elif action == \\"return\\": if X in keys_in_use: keys_in_use.remove(X) result.append(f\\"Key {X} returned\\") else: result.append(f\\"Key {X} was never taken\\") return result"},{"question":"Write a program that determines the number of unique elements in the union of two sets represented by arrays. Each array contains distinct integers only. The arrays can contain up to 1000 elements. Input The input consists of multiple datasets. Each dataset is provided on a separate line. Each line contains two sets of integers, each separated by a semicolon, representing the two arrays. Each array contains distinct integers separated by spaces. The input ends with EOF. There will be at most 5 datasets. Output For each dataset, output a single line containing the number of unique elements in the union of the two sets. Examples Input 1 2 3;4 5 6 3 4 5 6;6 7 8 9 10 20 30;30 40 100;100 Output 6 7 4 1 Input None Output None","solution":"def count_unique_elements_in_union(datasets): Given multiple datasets where each dataset contains two semicolon-separated sets of integers, this function returns the number of unique elements in the union of each pair of sets. Args: datasets (list of str): List containing the datasets as strings. Returns: list of int: List containing the number of unique elements in the union of each pair of sets. result = [] for dataset in datasets: set1, set2 = dataset.split(\';\') set1 = set(map(int, set1.split())) set2 = set(map(int, set2.split())) union_set = set1.union(set2) result.append(len(union_set)) return result"},{"question":"A company is hosting a workshop and has S slots available. Each participant can register for the workshop one or multiple times. However, participants can also unregister before the event starts. The company wishes to verify if the registration and unregistration sequence of participants is valid. The events are provided in a sequence of P operations, described as: - \\"R i\\" : Participant i registered. - \\"U i\\" : Participant i unregistered. A registration sequence is consistent if: - No participant unregisters without registering first. - At any point, the number of participants registered does not exceed the available slots S. You need to check whether the given sequences are consistent or inconsistent. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - For each test case, the first line contains two integers, S and P. - The following P lines contain a character (either \\"R\\" or \\"U\\") and an integer i (1 ≤ i ≤ 10^5), representing the operation and the participant\'s ID. ------ Output Format ------ For each test case, print \\"Consistent\\" if the sequence is consistent, otherwise print \\"Inconsistent\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ S ≤ 10^5 1 ≤ P ≤ 10^5 ----- Sample Input 1 ------ 2 2 5 R 1 R 2 U 1 R 3 U 2 3 4 R 1 R 2 U 2 R 3 ----- Sample Output 1 ------ Consistent Consistent ----- Explanation 1 ------ - Test case 1: Registrations and unregistrations are within the slot limit, and no unregistration occurs without prior registration. - Test case 2: Similar reasoning, both cases are consistent. ----- Sample Input 2 ------ 2 3 6 R 1 R 2 U 3 R 3 U 2 R 4 2 4 R 1 R 2 R 3 U 1 ----- Sample Output 2 ------ Inconsistent Inconsistent ----- Explanation 2 ------ - Test case 1: Participant 3 unregisters without registering first. - Test case 2: Registration exceeds the available slots.","solution":"def verify_registration_sequences(T, test_cases): results = [] for case in test_cases: S, P, operations = case registered_participants = set() active_participants = 0 consistent = True for operation in operations: action, participant = operation if action == \\"R\\": if active_participants >= S: consistent = False break if participant not in registered_participants: registered_participants.add(participant) active_participants += 1 elif action == \\"U\\": if participant not in registered_participants: consistent = False break registered_participants.remove(participant) active_participants -= 1 if consistent: results.append(\\"Consistent\\") else: results.append(\\"Inconsistent\\") return results"},{"question":"You are working on a graphical representation of a \\"Hollow Diamond Pattern\\". The \\"Hollow Diamond Pattern\\" is defined as follows: - The height and width of the diamond are given by 2*n-1, where n is the number of layers. - The pattern has a hollow diamond shape filled with stars (\'*\'), and the remaining spaces are filled with whitespaces (\' \'). Create a program that takes an integer n as an input and outputs a \\"Hollow Diamond Pattern\\" with n layers. Input The input is given in the following format: d n1 n2 :: nd The number of datasets d (d ≤ 20) is given in the first line, and the number of layers ni (1 ≤ ni ≤ 50) of the i-th diamond pattern is given in each of the following d lines. Output Please output a hollow diamond pattern for each dataset. Insert a blank line between the datasets. Example Input 2 3 4 Output * * * * * * * * * * * * * * * * * * * *","solution":"def generate_hollow_diamond(n): Generates a hollow diamond pattern with n layers. The height and width of the diamond is 2*n-1. pattern = [] size = 2 * n - 1 # Upper part of the diamond for i in range(n): row = \\"\\" for j in range(size): if j == n - i - 1 or j == n + i - 1: row += \\"*\\" else: row += \\" \\" pattern.append(row) # Lower part of the diamond for i in range(n - 2, -1, -1): pattern.append(pattern[i]) return \\"n\\".join(pattern) def generate_multiple_hollow_diamonds(d, layers): Generates multiple hollow diamond patterns. Parameters: - d (int): number of datasets - layers (list of int): list containing the number of layers for each dataset Returns: - str: formatted string of hollow diamond patterns separated by blank lines diamonds = [] for n in layers: diamonds.append(generate_hollow_diamond(n)) return \\"nn\\".join(diamonds)"},{"question":"Write a function that takes an integer `n` and returns the `n`-th number in the Fibonacci sequence. The Fibonacci sequence is defined as follows: the first number is 0, the second number is 1, and each subsequent number is the sum of the previous two numbers. For example, `fibonacci(6)` should return `5`. ~~~if:python ```python def fibonacci(n): if n <= 0: return \\"Input should be a positive integer\\" a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return a print(fibonacci(6)) # Output should be 5 ``` ~~~ ~~~if:r ```r fibonacci <- function(n) { if (n <= 0) { return(\\"Input should be a positive integer\\") } a <- 0 b <- 1 for (i in 1:(n-1)) { temp <- a a <- b b <- temp + b } return(a) } print(fibonacci(6)) # Output should be 5 ``` ~~~","solution":"def fibonacci(n): Returns the n-th number in the Fibonacci sequence. Parameters: n (int): The position in the Fibonacci sequence. Returns: int: The n-th Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return a"},{"question":"A string is considered balanced if the count of characters \'A\' and \'B\' are the same, and the count of characters \'C\' and \'D\' are the same. Given a string s, determine whether it is balanced. Constraints * The input string s consists of uppercase English letters only. * 1 <= |s| <= 100 Input Input is given from Standard Input in the following format: s Output If the string s is balanced, print `1`; otherwise, print `0`. Examples Input ABCD Output 1 Input ABCCD Output 0","solution":"def is_balanced(s): Returns 1 if the string s is balanced, otherwise returns 0. count_A = s.count(\'A\') count_B = s.count(\'B\') count_C = s.count(\'C\') count_D = s.count(\'D\') if count_A == count_B and count_C == count_D: return 1 else: return 0"},{"question":"Park Management System Mary works as an administrator in a large public park. The park contains numerous paths, each connecting two distinct locations within the park. The park aims to ensure that any visitor can reach any location from any other location through one or more paths. One day, Mary decided to close some paths for maintenance. However, she must ensure that even with the closed paths, every location should still be reachable from any other location. She wants to close the maximum number of paths while maintaining connectivity throughout the park. You need to help Mary by providing a program that calculates the maximum number of paths she can close without disconnecting the park. ------Input------ The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 500), representing the number of locations and the number of paths in the park, respectively. The next m lines each contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a path between location u and location v. ------Output------ Outputs a single integer, the maximum number of paths Mary can close without disconnecting the park. ------Example------ Input 4 5 1 2 1 3 1 4 2 3 3 4 Output 2 Input 5 6 1 2 2 3 3 4 4 5 5 1 2 4 Output 2 -----Note----- In the first example, Mary can close two of the following paths: (1-3), (1-4), or (3-4). Removing any two of these paths will still allow the park to remain connected. In the second example, Mary can close two of the following paths: (2-4) and one additional path such as (2-3) or (4-5) without disconnecting the park.","solution":"import networkx as nx def max_paths_to_close_without_disconnecting(n, m, paths): Returns the maximum number of paths that can be closed without disconnecting the park. :param n: Number of locations in the park :param m: Number of paths in the park :param paths: List of tuples representing the paths (u, v) :return: Max number of paths that can be closed without disconnecting the park G = nx.Graph() G.add_nodes_from(range(1, n + 1)) G.add_edges_from(paths) # Calculate the number of edges in a minimum spanning tree (MST) mst_edges = list(nx.minimum_spanning_edges(G, data=False)) mst_edge_count = len(mst_edges) # Any additional edges beyond the MST can be safely removed without # disconnecting the graph max_paths_to_close = m - mst_edge_count return max_paths_to_close"},{"question":"Determine the fare of a bus ride based on the distance traveled. The base fare of the ride is 50 for the first 5 kilometers. For every additional kilometer or part thereof, an additional charge of 10 per kilometer is applied. Given the distance traveled D (in kilometers), calculate the total fare. ------ Input Format ------ The first and only line of input contains a single integer D, the distance traveled in kilometers. ------ Output Format ------ Print the total fare for the bus ride in integer format. ------ Constraints ------ 1 ≤ D ≤ 1000 ------ Subtasks ------ Subtask 1 (100 points): Original constraints. ----- Sample Input 1 ------ 4 ----- Sample Output 1 ------ 50 ----- Explanation 1 ------ Since D ≤ 5, the fare is the base fare of 50. ----- Sample Input 2 ------ 7 ----- Sample Output 2 ------ 70 ----- Explanation 2 ------ The base fare covers the first 5 kilometers. The remaining 2 kilometers incur an additional charge: 50 + (2 * 10) = 70. ----- Sample Input 3 ------ 11 ----- Sample Output 3 ------ 110 ----- Explanation 3 ------ The base fare covers the first 5 kilometers. The remaining 6 kilometers incur an additional charge: 50 + (6 * 10) = 110.","solution":"def calculate_fare(D): Calculate the total fare based on the distance traveled D. Parameters: D (int): The distance traveled in kilometers Returns: int: The total fare for the bus ride base_fare = 50 additional_fare_per_km = 10 if D <= 5: return base_fare else: additional_distance = D - 5 additional_fare = additional_distance * additional_fare_per_km total_fare = base_fare + additional_fare return total_fare"},{"question":"You\'re given a list of strings in the following format: ```[\\"apple=5\\", \\"banana=12\\", \\"cherry=7\\", \\"date=3\\"]``` Each string contains a fruit name and its corresponding quantity, separated by an equal sign. Your task is to write a function that converts this list into a dictionary where the fruit names are keys and the quantities are values, like this: ```{\\"apple\\": 5, \\"banana\\": 12, \\"cherry\\": 7, \\"date\\": 3}``` Additionally, ensure the quantities are stored as integers, not strings. This will help with future calculations and manipulations. Write a function to automate this task. This will save time and reduce potential errors when managing inventory lists or datasets containing similar information.","solution":"def convert_list_to_dict(fruit_list): Converts a list of strings in the format \'fruit=quantity\' to a dictionary with fruits as keys and quantities as integers. Args: fruit_list (list): List of strings in the format \'fruit=quantity\', e.g. [\\"apple=5\\", \\"banana=12\\", \\"cherry=7\\", \\"date=3\\"] Returns: dict: Dictionary with fruits as keys and quantities as integers. fruit_dict = {} for item in fruit_list: fruit, quantity = item.split(\'=\') fruit_dict[fruit] = int(quantity) return fruit_dict"},{"question":"You are given two rectangles on a 2D plane defined by their bottom-left and top-right coordinates. Write a function to find the total area covered by the two rectangles. Note that some portions of the rectangles may overlap. Example 1: Input: rect1 = (0, 0, 2, 2) rect2 = (1, 1, 3, 3) Output: 7 Explanation: The area of rectangle 1 is 4, and the area of rectangle 2 is 4. They overlap by an area of 1. So, the total area is 4 + 4 - 1 = 7. Example 2: Input: rect1 = (0, 0, 1, 1) rect2 = (1, 0, 2, 1) Output: 2 Explanation: The rectangles do not overlap, so the total area is just the sum of their individual areas: 1 + 1 = 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function totalArea(), which takes the coordinates of the rectangles (rect1 and rect2) as input parameters and returns the total area covered by the two rectangles. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: -10^9 <= x1, y1, x2, y2 <= 10^9 -10^9 <= x3, y3, x4, y4 <= 10^9 1 <= width, height of each rectangle <= 10^9","solution":"def totalArea(rect1, rect2): Calculate the total area covered by two rectangles on a 2D plane. Arguments: rect1 -- a tuple (x1, y1, x2, y2) representing the bottom-left and top-right coordinates of the first rectangle rect2 -- a tuple (x3, y3, x4, y4) representing the bottom-left and top-right coordinates of the second rectangle Returns: The total area covered by the two rectangles. x1, y1, x2, y2 = rect1 x3, y3, x4, y4 = rect2 # Calculate the area of rect1 area1 = (x2 - x1) * (y2 - y1) # Calculate the area of rect2 area2 = (x4 - x3) * (y4 - y3) # Find the overlap\'s dimensions overlap_width = max(0, min(x2, x4) - max(x1, x3)) overlap_height = max(0, min(y2, y4) - max(y1, y3)) # Calculate the area of the overlap overlap_area = overlap_width * overlap_height # Total area is the sum of both areas minus the overlap total_area = area1 + area2 - overlap_area return total_area"},{"question":"A popular social networking site issues a contest to identify its most active user. They determine the most active user by the total number of posts made by each user, computed from a log of all user activities, which includes both posts and other actions. Each action is represented as a record consisting of the username and the type of activity. Your task is to identify the user with the highest number of posts. If there are multiple users with the highest post count, return all such users in lexicographical order. Formally, you are given a list of A strings. Each string A_i consists of a username and an activity type. The activity type can be either \\"post\\" or any other string representing different activities. You need to determine the user(s) with the highest number of \\"post\\" activities. ------ Input ------ The first line contains an integer n denoting the number of activities. The next n lines each contain a string A_i describing an activity. Each string A_i is in the format \\"username activity\\". ------ Output ------ Output the username(s) of the most active users with respect to posts, each on a new line, in lexicographical order. ------ Constraints ------ 1 ≤ n ≤ 10^5 1 ≤ |A_i| ≤ 100 Each activity string A_i will contain exactly one space separating the username and the activity. Each username consists of only lowercase English letters and is at most 50 characters long. The activity keywords consist of only lowercase English letters. ----- Sample Input 1 ------ 7 alice post bob like alice post carol share bob post alice comment bob post ----- Sample Output 1 ------ alice bob ----- Explanation 1 ------ alice and bob both made 2 posts each, which is the maximum among all users. Hence, both names are outputted in lexicographical order (alice before bob).","solution":"def find_most_active_users(n, activities): from collections import defaultdict post_counts = defaultdict(int) for activity in activities: username, action = activity.split() if action == \\"post\\": post_counts[username] += 1 max_posts = max(post_counts.values(), default=0) most_active_users = [user for user, posts in post_counts.items() if posts == max_posts] return sorted(most_active_users)"},{"question":"Given an array of integers, apply a series of queries. Each query modifies a range of the array by incrementing all the values within the specified range by 1. After applying all the queries, you need to determine and print the final state of the array. **Input:** The first line contains two integers N and Q, where N is the number of elements in the array, and Q is the number of queries. The second line contains N integers, the initial elements of the array. The next Q lines contain two integers each, L and R, representing the range [L, R] (1-based index) to be incremented by 1. **Output:** Print a single line containing N integers, the final state of the array after all queries have been applied. Note: Use efficient algorithms and data structures to handle the large input size. **Constraints:** 1 le N, Q le 10^5 1 le array elements, L, R le 10^9 **Sample Input 1:** ``` 5 3 1 2 3 4 5 1 3 2 4 3 5 ``` **Sample Output 1:** ``` 2 4 6 6 6 ``` **Explanation 1:** Initial array: [1, 2, 3, 4, 5] After the first query (1 to 3): [2, 3, 4, 4, 5] After the second query (2 to 4): [2, 4, 5, 5, 5] After the third and final query (3 to 5): [2, 4, 6, 6, 6] All modifications are applied, resulting in the final array: [2, 4, 6, 6, 6]","solution":"def apply_queries(N, Q, array, queries): Applies a series of range increment queries to the array. Parameters: N (int): number of elements in the array Q (int): number of queries array (list of int): initial elements of the array queries (list of tuple of int): queries represented as (L, R) tuples Returns: list of int: the final state of the array after all queries have been applied # Using a difference array technique to handle range updates efficiently difference_array = [0] * (N + 1) # Applying the queries using the difference array for (L, R) in queries: difference_array[L - 1] += 1 if R < N: difference_array[R] -= 1 # Converting the difference array back to the updated array increment = 0 for i in range(N): increment += difference_array[i] array[i] += increment return array"},{"question":"You are given a string S containing lowercase English letters. You need to find the length of the longest substring of S that consists of the same character repeated consecutively. Examples: Input: 2 aaabbccc aabbccddd Output: 3 3 Input Format: The first line of input contains T denoting the number of test cases. T test cases follow. Each test case contains one line of input, the string S. Output Format: For each test case, in a new line, print the required output. Your Task: Since this is a function problem, you don\'t need to take any input. Just complete the provided function longestRepeatingSubstring(). Constraints: 1 <= T <= 100 1 <= |S| <= 1000","solution":"def longestRepeatingSubstring(s): Given a string `s`, return the length of the longest substring that consists of the same character repeated consecutively. max_count = 0 current_count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_count += 1 else: max_count = max(max_count, current_count) current_count = 1 max_count = max(max_count, current_count) return max_count def process_test_cases(T, cases): results = [] for i in range(T): results.append(longestRepeatingSubstring(cases[i])) return results"},{"question":"Rick is scavenging for supplies in a deserted mall filled with zombies. He\'s found a stash of food items scattered across the mall, each with a certain calorie value. Rick is focused on survival and wants to maximize his calorie intake without carrying more than a specific weight limit in his backpack. Given a list of food items with their respective weights and calorie values, determine the maximum calories Rick can carry without exceeding the weight limit. [Input] First line contains an integer t indicating the number of test cases. For each test case, first line contains an integer W indicating the weight limit of the backpack. Second line contains an integer n denoting the number of food items. Next n lines each contain two space-separated integers: the weight and calorie value of each food item. [Output] For each test case, output one line containing the maximum calories Rick can carry without exceeding the weight limit. [Constraints] 1 ≤ t ≤ 10 1 ≤ W ≤ 1000 1 ≤ n ≤ 100 1 ≤ weight[i] ≤ 100 1 ≤ calories[i] ≤ 1000 SAMPLE INPUT 2 50 3 10 60 20 100 30 120 5 4 1 20 2 30 3 50 2 70 SAMPLE OUTPUT 220 120","solution":"def maximum_calories(test_cases): results = [] for W, items in test_cases: n = len(items) dp = [0] * (W + 1) for weight, calories in items: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + calories) results.append(max(dp)) return results def parse_input(data): lines = data.split(\'n\') index = 0 t = int(lines[index]) index += 1 test_cases = [] for _ in range(t): W = int(lines[index]) index += 1 n = int(lines[index]) index += 1 items = [] for _ in range(n): weight, calories = map(int, lines[index].split()) items.append((weight, calories)) index += 1 test_cases.append((W, items)) return test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Your task is to write a function `reverse_vowels(s)` that takes in a string `s` and returns a new string with the vowels reversed, while keeping all other characters in their original positions. Assume `s` will contain only ASCII characters and its length will not exceed 1000 characters. The vowels are \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase counterparts. Examples: `reverse_vowels(\\"hello\\") --> \\"holle\\"` `reverse_vowels(\\"leetcode\\") --> \\"leotcede\\"` `reverse_vowels(\\"aA\\") --> \\"Aa\\"` `reverse_vowels(\\"123xyz!\\") --> \\"123xyz!\\"` Special cases: If the input string contains no vowels, the function should return the original string unchanged.","solution":"def reverse_vowels(s): Returns a new string with the vowels reversed while keeping all other characters in their original positions. vowels = \\"aeiouAEIOU\\" s = list(s) i, j = 0, len(s) - 1 while i < j: if s[i] not in vowels: i += 1 elif s[j] not in vowels: j -= 1 else: s[i], s[j] = s[j], s[i] i += 1 j -= 1 return \'\'.join(s)"},{"question":"Sarah is an enthusiastic software engineer participating in a coding marathon. One of the challenges she faces is to determine if a given string can be permuted to form a palindrome. A string is considered a palindrome if it reads the same backward as forward. Sarah needs your help to write a program that checks if any permutation of a given string can be a palindrome. A string can be permuted to form a palindrome if at most one character appears an odd number of times, while all other characters must appear an even number of times. ------ Input ------ The first line of input contains a single integer T (1 ≤ T ≤ 100) - the number of test cases. Each of the next T lines contains a single string consisting of lowercase English letters. Each string\'s length will be between 1 and 1000. ------ Output ------ For each test case, output \\"YES\\" if any permutation of the string can be a palindrome and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ length of each string ≤ 1000 ----- Sample Input 1 ------ 3 aabb abc racecar ----- Sample Output 1 ------ YES NO YES","solution":"def can_form_palindrome(s): Determines if any permutation of the string can be a palindrome. Arguments: s -- A string consisting of lowercase English letters Returns: \\"YES\\" if any permutation of the string can be a palindrome, \\"NO\\" otherwise from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def can_form_palindrome_multiple_cases(t, cases): Determines for multiple test cases if any permutation of each string can be a palindrome. Arguments: t -- Number of test cases cases -- List of strings Returns: A list of \\"YES\\" or \\"NO\\" for each test case return [can_form_palindrome(case) for case in cases]"},{"question":"Alex loves playing with strings and has recently created a new game for himself. He takes a string `s` consisting of lowercase English letters and tries to find the longest substring without repeating characters. Alex wants to quickly determine the length of this substring for various strings. For example: - If `s = \\"abcabcbb\\"`, then the longest substring without repeating characters is `\\"abc\\"`, which has a length of 3. - If `s = \\"bbbbb\\"`, then the longest substring without repeating characters is `\\"b\\"`, which has a length of 1. - If `s = \\"pwwkew\\"`, then the longest substring without repeating characters is `\\"wke\\"`, which has a length of 3. Your task is to write a program that helps Alex. -----Input----- The first line contains one integer `t` (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case consists of a single line containing the string `s` (1 le |s| le 10^5). The sum of the lengths of all strings in one input does not exceed 10^6. -----Output----- For each test case, print the length of the longest substring without repeating characters. -----Example----- Input 3 abcabcbb bbbbb pwwkew Output 3 1 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) char_set = set() left = 0 result = 0 for right in range(n): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) result = max(result, right - left + 1) return result def process_test_cases(t, test_cases): Processes multiple test cases and returns the corresponding results. results = [] for case in test_cases: results.append(length_of_longest_substring(case)) return results"},{"question":"You are given an array of integers where each integer represents the height of a building. Suppose you have to answer several queries where each query gives you two indices (left and right) in the array and asks you to determine the maximum building height in the range between these two indices (inclusive). Write a program to efficiently handle these queries. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of buildings and the number of queries. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), representing the heights of the buildings. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices specifying the range for each query. Output For each query, print the maximum height in the specified range. Examples Input 6 3 1 5 4 3 8 6 1 3 2 5 3 6 Output 5 8 8","solution":"def preprocess_heights(heights): Preprocess the heights array to support efficient range maximum queries. Uses a sparse table data structure for O(1) range maximum queries with O(n log n) preprocessing. :param heights: List of integers representing the heights of the buildings. :return: Sparse table for range maximum queries. import math n = len(heights) max_log = math.floor(math.log2(n)) + 1 sparse_table = [[0] * max_log for _ in range(n)] for i in range(n): sparse_table[i][0] = heights[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: sparse_table[i][j] = max(sparse_table[i][j-1], sparse_table[i + (1 << (j-1))][j-1]) i += 1 j += 1 return sparse_table def range_max_query(sparse_table, left, right): Answer a range maximum query using the preprocessed sparse table. :param sparse_table: Preprocessed sparse table for range maximum queries. :param left: Left index of the range (inclusive). :param right: Right index of the range (inclusive). :return: Maximum height in the specified range. import math length = right - left + 1 j = math.floor(math.log2(length)) return max(sparse_table[left][j], sparse_table[right - (1 << j) + 1][j]) def process_queries(heights, queries): Process multiple range maximum queries for building heights. :param heights: List of integers representing the heights of the buildings. :param queries: List of tuples where each tuple contains two integers (left, right). :return: List of integers where each integer is the result of a range maximum query. sparse_table = preprocess_heights(heights) results = [] for left, right in queries: results.append(range_max_query(sparse_table, left - 1, right - 1)) return results"},{"question":"A large online retailer frequently generates a report to determine the best-performing products based on their sales. Each product has a unique product ID, a sale price, and the number of units sold. The retailer wants a utility that can quickly compute the total revenue for each product and identify the product with the highest revenue. # Task Description Given a list of products where each product has a unique identifier, price, and quantity sold, create a utility to calculate the total revenue generated by each product and then find the product with the maximum revenue. # Input Format - The first line contains a single integer `T` denoting the number of test cases. - Each test case starts with an integer `N`, the number of products. - The next `N` lines each contain three space-separated integers: - `ID_i`: the product ID of the i-th product. - `Price_i`: the sale price of one unit of the i-th product. - `Sold_i`: the number of units sold of the i-th product. # Output Format For each test case, output a single line containing the product ID of the best-performing product (i.e., the one with the highest total revenue). If there are multiple products with the same maximum revenue, output the smallest product ID among them. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ ID_i ≤ 10^9 - 1 ≤ Price_i, Sold_i ≤ 10^9 # Example Input ``` 2 3 101 20 30 102 15 40 103 10 50 2 201 100 1 202 50 5 ``` Output ``` 101 202 ``` # Explanation **Test Case 1:** - Product 101 has total revenue 20 * 30 = 600 - Product 102 has total revenue 15 * 40 = 600 - Product 103 has total revenue 10 * 50 = 500 - Both products 101 and 102 have the same maximum revenue, but 101 has the smallest product ID. **Test Case 2:** - Product 201 has total revenue 100 * 1 = 100 - Product 202 has total revenue 50 * 5 = 250 - Product 202 has the maximum revenue. Thus, the output is 202.","solution":"def find_best_performing_product(test_cases): results = [] for case in test_cases: max_revenue = -1 best_product_id = float(\'inf\') for product in case[\'products\']: product_id, price, sold = product revenue = price * sold if revenue > max_revenue or (revenue == max_revenue and product_id < best_product_id): max_revenue = revenue best_product_id = product_id results.append(best_product_id) return results"},{"question":"Consider an array `A` of `N` integers. Your task is to answer `Q` queries. Each query consists of three integers `L`, `R`, and `X`, and the answer to each query is the sum of squares of all integers in the subarray `A[L]` to `A[R]` that are divisible by `X`. Input Format - The first line contains an integer `N`, the size of the array. - The second line contains `N` space-separated integers representing the array `A`. - The third line contains an integer `Q`, the number of queries. - The next `Q` lines contain three space-separated integers `L`, `R`, and `X`. Output Format For each query, output the required sum on a new line. Constraints - 1 <= N <= 10^5 - 1 <= A[i] <= 10^4 - 1 <= Q <= 10^5 - 1 <= L <= R <= N - 1 <= X <= 10^4 Sample Input 8 1 6 2 8 3 7 4 5 3 1 4 2 2 6 3 3 8 5 Sample Output 100 49 81 Explanation - For the first query (1, 4, 2): The subarray is `[1, 6, 2, 8]`. Elements divisible by 2 are `[6, 2, 8]`. Their squares: `[36, 4, 64]`. Sum of squares = `36 + 4 + 64 = 104`. - For the second query (2, 6, 3): The subarray is `[6, 2, 8, 3, 7]`. Elements divisible by 3 are `[6, 3]`. Their squares: `[36, 9]`. Sum of squares = `36 + 9 = 45`. - For the third query (3, 8, 5): The subarray is `[2, 8, 3, 7, 4, 5]`. Elements divisible by 5 are `[5]`. Their squares: `[25]`. Sum of squares = `25`.","solution":"def sum_of_squares_in_subarray(A, queries): results = [] for L, R, X in queries: sum_of_squares = sum(a**2 for a in A[L-1:R] if a % X == 0) results.append(sum_of_squares) return results"},{"question":"Given an array of integers, determine if it is possible to rearrange the elements of the array such that the sum of consecutive elements is always an odd number. If possible, print \\"YES\\"; otherwise, print \\"NO\\". -----Input----- Each test contains multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (2 le n le 10^5). The second line of each test case contains n integers a_1 a_2 dots a_n (1 le a_i le 10^9) — elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print \\"YES\\" if it is possible to rearrange the elements such that each pair of consecutive elements has an odd sum, otherwise print \\"NO\\". -----Examples----- Input 2 3 1 3 5 4 2 4 6 8 Output NO YES -----Note----- In the first test case, it is impossible to rearrange the elements such that each pair of consecutive elements has an odd sum. Any rearrangement, such as [1, 3, 5] or [3, 5, 1], results in pairs with an even sum. In the second test case, by rearranging the elements as [2, 4, 6, 8], it is indeed possible to have each pair of consecutive elements with an odd sum. For example, [2, 6, 4, 8] yields pairs (2+6=8) and (6+4=10), etc. which all provide odd sums.","solution":"def can_rearrange_for_odd_sum(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] odd_count = sum(1 for num in a if num % 2 != 0) even_count = n - odd_count # To achieve odd sum between adjacent elements, we need both odds and evens. if odd_count > 0 and even_count > 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"At Dynamic Data Inc., there is a need to efficiently manage data entries and their priorities. Each entry has an ID and a priority value associated with it. The system needs to support two main types of commands: updating the priority of an existing entry and retrieving the ID with the highest priority. As a developer at Dynamic Data Inc., you are tasked with implementing this system. Your program should be able to process a series of commands to update priorities and fetch the ID with the highest priority in real-time. Create a program that performs the given operations based on the input commands and outputs the required results. Input The input is given in the following format: N C operation1 operation2 :: operationC The number of entries N (1 ≤ N ≤ 100000) and the number of commands C (1 ≤ C ≤ 100000) are given on the first line. Each of the following C lines contains an operation in one of the following formats: 1 ID priority 2 The first format (1 ID priority) indicates an update command where the priority of the entry with the specified ID (1 ≤ ID ≤ N) is set to the given priority value (1 ≤ priority ≤ 10^9). The second format (2) is a retrieve command where you need to output the ID of the entry with the highest priority. If there are multiple entries with the same highest priority, output the smallest ID among them. Assume that there is at least one retrieve command in the input. Output For each retrieve command, output the ID of the entry with the highest priority on a separate line. Examples Input 4 7 1 1 10 1 2 15 1 3 15 2 1 4 20 2 1 3 25 2 Output 2 4 3 Input 3 3 1 1 5 2 2 Output 1 1","solution":"import heapq def data_management(n, c, operations): Manages data entries and their priorities based on the commands. Args: n : int : Number of entries c : int : Number of commands operations : list of str : List of operations Returns ------- list of int : IDs with the highest priority for each retrieval command priorities = {} max_heap = [] results = [] for op in operations: parts = op.split() if parts[0] == \'1\': entry_id = int(parts[1]) priority = int(parts[2]) priorities[entry_id] = priority heapq.heappush(max_heap, (-priority, entry_id)) elif parts[0] == \'2\': while max_heap and priorities[max_heap[0][1]] != -max_heap[0][0]: heapq.heappop(max_heap) results.append(max_heap[0][1]) return results"},{"question":"In a laboratory, there are n beakers arranged in a row, each containing a certain amount of a chemical solution. Each beaker is labeled from 1 to n. Throughout the day, various scientists will come and perform one of three actions on the beakers: 1. Add a certain amount of solution to a specific beaker. 2. Remove a certain amount of solution from a specific beaker. 3. Inquire about the total amount of solution in a range of beakers. Initially, each beaker is empty. Your task is to implement a program that processes a series of operations and outputs the result of each inquiry. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of beakers and the number of operations, respectively. Each of the next q lines contains one of the following: - \\"1 x y\\" meaning add y units of solution to beaker x, - \\"2 x y\\" meaning remove y units of solution from beaker x, - \\"3 l r\\" meaning inquire about the total amount of solution from beaker l to beaker r (inclusive). For the add and remove operations, 1 ≤ x ≤ n and 1 ≤ y ≤ 10^9. For the inquiry operations, 1 ≤ l ≤ r ≤ n. Output For each inquiry operation, output the total amount of solution in the specified range. Example Input: 5 6 1 2 3 1 4 5 3 1 5 2 4 2 3 3 4 3 2 2 Output: 8 3 1 Explanation: Initially, beakers are [0, 0, 0, 0, 0]. After the first operation, they are [0, 3, 0, 0, 0]. After the second operation, they are [0, 3, 0, 5, 0]. The first inquiry sums up [0, 3, 0, 5, 0] which results in 8. After the fourth operation (subtracting 2 from the fourth beaker), they are [0, 3, 0, 3, 0]. The second inquiry sums up [0, 3, 0, 3] (the third and fourth beakers) which results in 3. The third inquiry sums up [3] (only the second beaker) which results in 3.","solution":"class Laboratory: def __init__(self, n): self.solution_amounts = [0] * n def add_solution(self, x, y): self.solution_amounts[x-1] += y def remove_solution(self, x, y): self.solution_amounts[x-1] = max(0, self.solution_amounts[x-1] - y) def inquire_solution(self, l, r): return sum(self.solution_amounts[l-1:r]) def process_operations(n, operations): lab = Laboratory(n) results = [] for operation in operations: parts = operation.split() op_type = int(parts[0]) if op_type == 1: x, y = int(parts[1]), int(parts[2]) lab.add_solution(x, y) elif op_type == 2: x, y = int(parts[1]), int(parts[2]) lab.remove_solution(x, y) elif op_type == 3: l, r = int(parts[1]), int(parts[2]) results.append(lab.inquire_solution(l, r)) return results"},{"question":"Mira has a sequence of integers a. She wants to know if it is possible to partition this sequence into two non-empty subsequences b and c such that the sum of elements in b is equal to the sum of elements in c. For example, if a = [3, 1, 1, 2, 2, 1], we can partition it into b = [3, 1, 1] and c = [2, 2, 1], both of which have a sum of 5. Keep in mind that the subsequences b and c do not need to be contiguous blocks of the original sequence a, but the sum of their elements must be equal, and each element in the original sequence must belong to exactly one of the subsequences. Can you help Mira determine if such a partition is possible? -----Input----- The first line contains an integer n (2 leq n leq 1000) — the length of the sequence. The second line contains n integers a_i (1 leq a_i leq 10^9) — the elements of the sequence. -----Output----- Print \\"YES\\" (without quotes) if there exists such a partition, otherwise print \\"NO\\". -----Examples----- Input 6 3 1 1 2 2 1 Output YES Input 5 1 2 3 4 5 Output NO -----Explanation----- In the first example, one possible partition is b = [3, 1, 1] and c = [2, 2, 1], both of which sum to 5. In the second example, no partition exists such that the sum of the two subsequences b and c is equal.","solution":"def can_partition(arr): Determine if it\'s possible to partition the array into two subsequences with equal sums. total_sum = sum(arr) # If the total sum is odd, it\'s not possible to split into two equal parts if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(arr) # Use dynamic programming to check if there\'s a subset with sum equal to target dp = [False] * (target + 1) dp[0] = True for num in arr: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"There is a village represented by a grid of size n x n, where each cell contains a certain number of units of food. The village chief wants to gather the maximum possible amount of food starting from a designated cell at the top-left corner (0,0) and moving to the bottom-right corner (n-1,n-1). The chief can only move right or down at each step. Given the grid, determine the maximum amount of food that can be collected. Input: The first line of the input contains an integer n (1 ≤ n ≤ 50) — the size of the grid. Each of the next n lines contains n integers — the numbers in the grid, where each number is between 0 and 100 inclusive, representing the units of food at that cell. Output: Output a single integer, the maximum amount of food that can be collected. Examples: Input: 3 5 3 2 1 2 1 3 1 4 Output: 16 Input: 4 1 2 3 4 2 2 2 2 3 1 1 3 4 4 4 1 Output: 19 Explanation: In the first example, the path could be (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), collecting a total of 5 + 3 + 2 + 1 + 4 = 15 units of food. In the second example, the path could be (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3), collecting a total of 1 + 2 + 3 + 4 + 4 + 4 + 1 = 19 units of food.","solution":"def max_food_collected(grid): Calculates the maximum food collected in a grid starting from the top-left corner to the bottom-right corner, moving only right or down at each step. :param grid: A list of lists representing the grid with food units :return: Maximum food units that can be collected n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row. for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column. for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of dp table. for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"Write a function that generates all possible valid IPv4 addresses from a given string of digits. An IPv4 address consists of four octets (numbers between 0 and 255), separated by periods. Given a string `s` of digits, your task is to restore it by returning all possible valid IPv4 addresses that can be formed by inserting periods into `s`. The input string will be non-empty and will contain only digits. The output should be a list of strings, each representing a valid IPv4 address, sorted in lexicographical order. If no valid IP addresses can be formed, return an empty list. Valid Octet Rules: - An octet is a valid number from 0 to 255. - An octet cannot have extra leading zeros (e.g., \\"00\\" is not valid but \\"0\\" is valid). - The input string should have exactly four octets when split by periods. # Examples Input: `\\"25525511135\\"` Output: `[\\"255.255.11.135\\", \\"255.255.111.35\\"]` Input: `\\"0000\\"` Output: `[\\"0.0.0.0\\"]` Input: `\\"1111\\"` Output: `[\\"1.1.1.1\\"]` Input: `\\"010010\\"` Output: `[\\"0.10.0.10\\", \\"0.100.1.0\\"]`","solution":"def is_valid_octet(octet): Check if the octet is a valid segment of an IP address if len(octet) == 0 or len(octet) > 3: return False if len(octet) > 1 and octet[0] == \'0\': return False if int(octet) > 255: return False return True def restore_ip_addresses(s): Generate all possible valid IPv4 addresses from the given string n = len(s) result = [] for i in range(1, min(4, n-2)): for j in range(i+1, min(i+4, n-1)): for k in range(j+1, min(j+4, n)): s1, s2, s3, s4 = s[:i], s[i:j], s[j:k], s[k:] if all(map(is_valid_octet, [s1, s2, s3, s4])): ip_address = f\\"{s1}.{s2}.{s3}.{s4}\\" result.append(ip_address) return sorted(result)"},{"question":"You are given an array of integers where each element is repeated k times except for one element which appears exactly once. Your task is to find the element that appears exactly once. Input Format The first line contains an integer, n, denoting the number of elements in the array. The second line contains n space-separated integers representing the array elements. The third line contains an integer, k, denoting the repetition factor of all elements except one. Constraints 1 le n le 10^6 1 le k le 10 1 le text{array}[i] le 10^9 It is guaranteed that exactly one element appears once and all other elements appear exactly k times. Output Format Print the element that appears exactly once. Sample Input 0 7 2 2 3 2 4 4 4 3 Sample Output 0 3 Explanation 0 All elements except 3 occur exactly three times. Therefore, the output is 3. Sample Input 1 10 9 1 9 3 9 1 7 1 7 7 3 Sample Output 1 3 Explanation 1 All elements except 3 occur exactly three times. Therefore, the output is 3.","solution":"def find_unique_element(arr, k): Finds the unique element in an array where every other element appears k times. Parameters: arr (list): List of integers where all elements except one appear k times k (int): The repetition factor Returns: int: The unique element that appears exactly once from collections import Counter count = Counter(arr) for num, freq in count.items(): if freq == 1: return num"},{"question":"Alice is organizing a coding contest, and she designed a new problem involving matrix manipulation. She wants participants to determine the number of distinct elements in each row of a given matrix. A matrix of size n×n (1≤n≤100) is provided, where each element in the matrix is an integer between 1 and 1000 inclusive. The objective is to compute the number of distinct integers in each row of the matrix and output these counts. -----Input:----- The first line of input contains an integer T, denoting the number of test cases. For each test case, the first line contains an integer n, the size of the matrix. Then n lines follow, each containing n integers, representing the matrix elements. -----Output:----- For each test case, print n space-separated integers, where the i-th integer represents the number of distinct elements in the i-th row of the matrix. -----Constraints----- - 1≤T≤10 - 1≤n≤100 - 1≤matrix element≤1000 -----Sample Input:----- 2 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 -----Sample Output:----- 3 3 3 1 1 Note: In the first test case, all elements in each row are distinct, so the output is three 3\'s. In the second test case, each row has only one distinct element, thus the output is two 1\'s.","solution":"def count_distinct_elements(matrix): Given a matrix, returns a list containing the number of distinct elements in each row of the matrix. distinct_counts = [] for row in matrix: distinct_counts.append(len(set(row))) return distinct_counts def process_test_cases(test_cases): Processes multiple test cases and returns the result for each test case. Args: test_cases (list): List of tuples, each containing the size of the matrix and the matrix itself. Returns: list: List of lists, where each list contains the number of distinct elements for each row of a test case. results = [] for n, matrix in test_cases: results.append(count_distinct_elements(matrix)) return results"},{"question":"Find the maximum profit you can achieve given a list of daily prices for a certain stock, where you are only allowed to complete at most one transaction (i.e., buy one and sell one share of the stock). If no profit can be made, return 0. Example: Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Example: Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the maximum profit is 0. Note: - Prices are given for consecutive days. - The length of the prices array is in the range [1, 10^5]. - Prices are positive integers.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling one share of stock. :param prices: List of daily prices for a certain stock. :type prices: List[int] :return: Maximum possible profit. If no profit can be made, returns 0. :rtype: int if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"There are n houses arranged in a row and each house has exactly one lamp with a certain brightness. You can perform the following operation any number of times: - Choose two adjacent houses i and j (such that |i - j| = 1) and swap their lamps if and only if the lamp brightness of house i is less than the lamp brightness of house j. Your goal is to determine if it is possible to sort the lamps in non-decreasing order by performing the aforementioned operation. -----Input----- The first line contains one integer n (2 le n le 10^5) — the number of houses. The second line contains n integers b_1, b_2, ..., b_n (1 le b_i le 10^9), where b_i is the brightness of the lamp at the i-th house. -----Output----- Print YES if it is possible to sort the brightness of the lamps in non-decreasing order, and NO otherwise. -----Examples----- Input 5 4 3 1 2 5 Output NO Input 4 1 2 3 4 Output YES -----Note----- In the first case, it is not possible to sort the lamps following the given rule because swapping is only allowed if the left lamp has less brightness than the right one. In this sequence, there is a decreasing subsequence which makes sorting impossible. In the second case, the lamps are already sorted, hence no swaps are needed, making it trivially possible to sort the lamps.","solution":"def is_sort_possible(n, brightness): Returns \'YES\' if it is possible to sort the lamps in non-decreasing order by performing the given swap operations, otherwise returns \'NO\'. for i in range(1, n): if brightness[i-1] > brightness[i]: return \\"NO\\" return \\"YES\\""},{"question":"A gardener is designing a new flower bed in a circular shape and wants to determine the amount of border material needed to surround it completely. Given that the radius of the flower bed can vary, your task is to write a function that calculates the circumference of the flower bed based on the given radius. The formula to calculate the circumference of a circle is `C = 2 * π * r`, where `C` is the circumference and `r` is the radius. For this task, use the value of π as `3.14159`. You will receive a single floating-point number representing the radius of the flower bed in meters. The radius will always be a positive number, not exceeding 1000 meters. Your function should return the circumference rounded to two decimal places. Example: Input: 5 Output: 31.42 Input: 10.5 Output: 65.97","solution":"def calculate_circumference(radius): Returns the circumference of a circle with the given radius, rounded to two decimal places. :param radius: Radius of the circle (flower bed) in meters :type radius: float :return: Circumference of the circle rounded to two decimal places :rtype: float if radius <= 0: raise ValueError(\\"The radius must be a positive number\\") pi = 3.14159 circumference = 2 * pi * radius return round(circumference, 2)"},{"question":"Create a function that takes an array of integers and a target integer. The function should return indices of the two numbers such that they add up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. Examples: - Input: `nums = [2, 7, 11, 15]`, `target = 9` Output: `[0, 1]` (Because nums[0] + nums[1] == 9) - Input: `nums = [3, 2, 4]`, `target = 6` Output: `[1, 2]` (Because nums[1] + nums[2] == 6) - Input: `nums = [3, 3]`, `target = 6` Output: `[0, 1]` (Because nums[0] + nums[1] == 6) ```python def two_sum(nums, target): for i, num in enumerate(nums): diff = target - num if diff in nums[i+1:]: return [i, nums.index(diff, i+1)] ``` Note: You can assume that all inputs contain exactly one solution.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. Args: nums : List[int] : List of integers target : int : Target sum Returns: List[int] : Indices of the two numbers that add up to target num_to_index = {} for index, num in enumerate(nums): difference = target - num if difference in num_to_index: return [num_to_index[difference], index] num_to_index[num] = index return [] # This return is just a safeguard, function assumes there is always exactly one solution"},{"question":"Design a function `substring_indices` that, given two strings `text` and `pattern`, returns a list of all starting indices in `text` where the `pattern` is found. The function should perform the search efficiently. If the `pattern` does not occur in the `text`, return an empty list. # Example: ```python print(substring_indices(\\"abracadabra\\", \\"abra\\")) # Output: [0, 7] print(substring_indices(\\"hello world\\", \\"o\\")) # Output: [4, 7] print(substring_indices(\\"aaaaa\\", \\"aa\\")) # Output: [0, 1, 2, 3] print(substring_indices(\\"abc\\", \\"d\\")) # Output: [] ``` # Constraints: - The length of `text` will be between `1` and `10^6`. - The length of `pattern` will be between `1` and `100`. - The search should be efficient enough to handle large input sizes. # Notes: * You may assume that both `text` and `pattern` will contain only lowercase English letters. * Pay special attention to edge cases where the `pattern` is longer than the `text` or where the `pattern` occurs multiple times in the `text`. Implement this function: ```python def substring_indices(text: str, pattern: str) -> list: # Your code here ```","solution":"def substring_indices(text: str, pattern: str) -> list: Returns a list of starting indices in text where the pattern is found. result = [] len_text = len(text) len_pattern = len(pattern) if len_pattern == 0 or len_pattern > len_text: return result # Loop through the text and check for the pattern for i in range(len_text - len_pattern + 1): if text[i:i + len_pattern] == pattern: result.append(i) return result"},{"question":"Mara, a computer enthusiast, wants to develop an autocomplete feature for a text editor. The autocomplete feature should suggest words based on the prefix entered by the user. Mara has a list of known words that can be suggested. When the user types a prefix, the feature should output all words from the list that start with that prefix in lexicographical order. If no such words exist, the feature should output \\"NO SUGGESTIONS\\". Your task is to help Mara implement this autocomplete feature. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10000) — the number of words in Mara\'s list. Each of the next n lines contains one word — a known word that can be suggested. Each word consists of lowercase English letters and has a length between 1 and 100 inclusive. The final line contains a single string p (1 ≤ |p| ≤ 100) — the prefix entered by the user. -----Output----- If there are no words starting with the given prefix, output \\"NO SUGGESTIONS\\". Otherwise, output all words starting with the given prefix in lexicographical order, each on a new line. -----Examples----- Input 5 hello helium helicopter help hero hel Output helium helicopter hello help Input 3 apple banana cherry pine Output NO SUGGESTIONS","solution":"def autocomplete(words, prefix): Returns a list of words from the given list that start with the given prefix in lexicographical order. If no such words exist, returns [\\"NO SUGGESTIONS\\"]. # Filter the words that start with the given prefix suggestions = [word for word in words if word.startswith(prefix)] # Sort the words lexicographically and return the result if suggestions: return sorted(suggestions) else: return [\\"NO SUGGESTIONS\\"]"},{"question":"Erika is planning to organize an international programming contest. She has several venues across different cities of her country, which are connected by roads. Each road can have different travel times depending on the time of day. She wants to select a set of venues such that the maximum time required to travel between any two selected venues is minimized. To simplify, let\'s represent the venues and roads as vertices and edges in a graph. Erika wants to select a subset of vertices such that the selected vertices are connected in the graph and the maximum weight of the edges between any two selected vertices is minimized. Input: - The first line contains an integer n denoting the number of venues (1 ≤ n ≤ 100,000). - The next n-1 lines each contain three integers x, y, and t (1 ≤ x, y ≤ n, 1 ≤ t ≤ 10^6), representing a road between venue x and y with a travel time of t. - The next line contains an integer k (1 ≤ k ≤ n), the number of venues Erika wants to select. Output: - Print a single-line integer denoting the minimized maximum travel time for any two selected venues. Example: Input: 6 1 2 4 2 3 5 3 4 6 4 5 2 5 6 3 3 Output: 4 Note: In the given graph, the maximum travel time between any two venues in the subset {1, 2, 5} is minimized and equals 4.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges, max_edge): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) edges = [edge for edge in edges if edge[2] <= max_edge] edges = sorted(edges, key=lambda item: item[2]) result = [] for edge in edges: u, v, w = edge x = find(parent, u) y = find(parent, v) if x != y: result.append(edge) union(parent, rank, x, y) return len(set(find(parent, i) for i in range(n))) <= len(result) def minimize_max_time(n, edges, k): left, right = 1, 10**6 result = right while left <= right: mid = (left + right) // 2 if kruskal(n, edges, mid): result = mid right = mid - 1 else: left = mid + 1 return result def solve(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) idx += 1 edges = [] for _ in range(n - 1): x = int(data[idx]) - 1 y = int(data[idx + 1]) - 1 t = int(data[idx + 2]) edges.append((x, y, t)) idx += 3 k = int(data[idx]) print(minimize_max_time(n, edges, k))"},{"question":"In a certain magical realm, there are enchanted trees that grow by absorbing the magic of adjacent trees. Each tree has a magical power represented by an integer. When a tree absorbs the magic of an adjacent tree, its magical power increases by the absorbed tree\'s power, and the absorbed tree disappears. The process continues until no more adjacent trees can be absorbed. Two trees can only absorb one another if they are adjacent in the original order they were given. The goal is to find the maximum possible magical power of a single tree after all possible absorptions have been performed. For example, consider an array representing the magical power of each tree as `[3, 2, 5, 1]`. If the first tree absorbs the second, we get `[5, 5, 1]`. Then, if the second tree (which now has power 5) absorbs the third, we get `[10, 1]`. Finally, if the first tree absorbs the second tree, the result is `[11]`. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of trees. The second line contains n integers, where the i-th integer (0 ≤ a_{i} ≤ 10^6) represents the magical power of the i-th tree. -----Output----- Output a single integer, the maximum possible magical power of a single tree after all possible absorptions have been performed. -----Examples----- Input 4 3 2 5 1 Output 11 Input 3 4 10 6 Output 20 Input 1 5 Output 5 -----Note----- In the first example, if the first tree absorbs the second, we get `[5, 5, 1]`. Then, if the second tree absorbs the third, we get `[10, 1]`. Finally, if the first tree absorbs the second, the result is `[11]`. In the second example, the best sequence of absorptions involves the second tree absorbing the third, resulting in `[4, 16]`, and then the second tree absorbing the first, resulting in `[20]`.","solution":"def maximum_magic_power(n, powers): This function takes in n (number of trees) and a list of integers representing the magical power of each tree. It returns the maximum possible magical power of a single tree after all possible absorptions have been performed. if n == 0: return 0 if n == 1: return powers[0] return sum(powers)"},{"question":"A popular video streaming platform allows users to create playlists of their favorite videos. To organize their playlists, users can categorize videos into different folders. However, the platform enforces a strict rule: each video can belong to exactly one folder, and each folder can contain several subfolders or videos. Given the folder structure and a list of videos, determine the depth of each video in the playlist hierarchy. The depth is defined as the number of levels between the video and the root folder. Input The first line contains the integer n (1 ≤ n ≤ 100), the number of folders. Each of the next n lines contains the name of a folder, followed by a list of its contents. Each item in the list can be either a video or another folder. The list is space-separated, and folders and videos have unique names consisting of alphanumeric characters. The root folder is always named \\"Root\\". Output For each video, output its name and its depth in the playlist hierarchy. The videos should be listed in the order they appear in the input. Example Input 3 Root Folder1 Folder2 Folder1 Video1 Folder3 Folder3 Video2 Video3 Output Video1 2 Video2 3 Video3 3 In the example, \\"Video1\\" is two levels deep in the hierarchy (Root -> Folder1 -> Video1), while \\"Video2\\" and \\"Video3\\" are three levels deep (Root -> Folder1 -> Folder3 -> Video2/Video3).","solution":"def find_video_depths(n, folders): from collections import defaultdict, deque folder_dict = defaultdict(list) for line in folders: parts = line.split() folder = parts[0] contents = parts[1:] folder_dict[folder].extend(contents) video_depths = {} queue = deque([(\\"Root\\", 0)]) # (current folder, current depth) while queue: current_folder, current_depth = queue.popleft() for item in folder_dict[current_folder]: if \\"Folder\\" in item: # item is a folder queue.append((item, current_depth + 1)) else: # item is a video video_depths[item] = current_depth + 1 result = [] for line in folders: parts = line.split() for content in parts[1:]: if content in video_depths: result.append((content, video_depths[content])) return result"},{"question":"Write a function `subarray_sum` that finds the number of contiguous subarrays that sum to a given value `k`. # Parameters - `nums` (list of integers): The array of integers to search within. - `k` (integer): The target sum for the subarrays. # Function Signature ```python def subarray_sum(nums: list, k: int) -> int: pass ``` # Example ```python subarray_sum([1, 1, 1], 2) # -> 2 subarray_sum([1, 2, 3], 3) # -> 2 subarray_sum([1, -1, 1], 1) # -> 3 ``` # Explanation For the input `subarray_sum([1, 1, 1], 2)`, there are two subarrays that sum to `2`: `[1, 1]` (starting at index 0) and `[1, 1]` (starting at index 1). For the input `subarray_sum([1, 2, 3], 3)`, there are two subarrays that sum to `3`: `[3]` (starting at index 2) and `[1, 2]` (starting at index 0). For the input `subarray_sum([1, -1, 1], 1)`, there are three subarrays that sum to `1`: `[1]` (at index 0), `[1, -1, 1]` (from index 0 to 2), and `[1]` (at index 2). # Constraints - The elements of the array `nums` can be positive or negative. - The length of `nums` will be in the range `[1, 20,000]`. - The integer `k` is any valid integer within the range `[-10^7, 10^7]`. # Notes - Plan to handle large arrays efficiently. - Consider an algorithm with a time complexity better than O(n^2) for an optimal solution. - Make use of prefix sums and hashmaps for efficient counting.","solution":"def subarray_sum(nums: list, k: int) -> int: Finds the number of contiguous subarrays that sum to a given value `k`. :param nums: List of integers representing the array. :param k: Integer representing the target sum. :return: Integer representing the number of contiguous subarrays that sum to `k`. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in nums: current_sum += num sum_needed = current_sum - k if sum_needed in prefix_sums: count += prefix_sums[sum_needed] if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count"},{"question":"A kingdom is facing the threat of a powerful dragon. The king has decided to seek help from the guild of wizards. Each wizard can cast a spell that has a certain power level. The king needs to gather a group of wizards whose combined spell power equals or exceeds a specified threshold to defeat the dragon. Your task is to determine the minimum number of wizards required to achieve this goal. If it\'s not possible to gather enough wizards to meet the required spell power, return -1. You are given the number of wizards available and the spell power of each wizard. You are also given the minimum spell power required to defeat the dragon. Input: The first line contains an integer N denoting the number of wizards. The second line contains N integers denoting the spell power of each wizard. The third line contains an integer M denoting the minimum spell power required to defeat the dragon. Constraints: 1 ≤ N ≤ 1000 1 ≤ x ≤ 100 ; x - spell power of a wizard 1 ≤ M ≤ 10000 Examples: Input: 5 5 8 3 7 5 15 Output: 2 Input: 4 2 1 8 4 20 Output: -1 Explanation: Example 1: By selecting wizards with spell powers 8 and 7, the combined spell power is 15, which matches the required threshold with the minimum number of wizards. Example 2: It is not possible to gather wizards whose combined spell power meets or exceeds 20. SAMPLE INPUT 6 2 4 8 6 3 1 17 SAMPLE OUTPUT 3","solution":"def min_wizards_needed(n, spell_powers, m): Determines the minimum number of wizards required to achieve at least the minimum spell power. Parameters: n (int): Number of wizards. spell_powers (list of int): Spell power of each wizard. m (int): Minimum spell power required to defeat the dragon. Returns: int: Minimum number of wizards required to achieve the required spell power, or -1 if not possible. # Sort spell powers in descending order spell_powers.sort(reverse=True) # Sum powers until we reach the desired power level or we run out of wizards total_power = 0 count = 0 for power in spell_powers: total_power += power count += 1 if total_power >= m: return count return -1 # If we exhaust the list without reaching the required power"},{"question":"You are given a matrix with N rows and M columns, where each cell contains a non-negative integer. Your task is to find the maximum sum of elements in any submatrix of the given matrix. A submatrix is formed by choosing two rows and two columns from the matrix such that all elements inside this rectangle are considered part of the submatrix. Constraints * 1 ≤ N, M ≤ 300 * 0 ≤ matrix[i][j] ≤ 1000 Input Input is given from Standard Input in the following format: N M matrix[1][1] matrix[1][2] ... matrix[1][M] matrix[2][1] matrix[2][2] ... matrix[2][M] : matrix[N][1] matrix[N][2] ... matrix[N][M] Output Print the maximum sum of elements in any submatrix of the given matrix. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 45 Input 2 2 1 2 3 4 Output 10","solution":"def max_sum_submatrix(matrix): Returns the maximum sum of elements in any submatrix of the given matrix. N = len(matrix) M = len(matrix[0]) # Initialize the maximum sum to a very small number max_sum = float(\\"-inf\\") # Compute the prefix sum for the matrix prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) # Calculate the max sum for any submatrix using the prefix sum for start_row in range(1, N + 1): for end_row in range(start_row, N + 1): for start_col in range(1, M + 1): for end_col in range(start_col, M + 1): current_sum = (prefix_sum[end_row][end_col] - prefix_sum[start_row - 1][end_col] - prefix_sum[end_row][start_col - 1] + prefix_sum[start_row - 1][start_col - 1]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Problem Statement You are managing an inventory system for a small shop. Every day, based on the shopping transactions, items are either added to or removed from the inventory. The shop keeps track of these items through a unique identifier and the corresponding quantity. You need to write a program to process a sequence of transactions and output the final quantities of all the items in the inventory. You will be given a series of transactions in the form of (item_id, quantity_change). If quantity_change is positive, it means the items are added to the inventory; if it\'s negative, it means the items are taken out of the inventory. Constraints * 1 ≤ n ≤ 1,000 (where n is the number of transactions) * Unique identifier of items can be assumed to be a string of lowercase letters and digits. * -1,000 ≤ quantity_change ≤ 1,000. Input The input is provided in the following format: n item_id_1 quantity_change_1 item_id_2 quantity_change_2 ... item_id_n quantity_change_n Output Output the resulting quantities of the items present in the inventory after processing all the transactions. Each item and its quantity should be printed on a new line in the format \\"item_id quantity\\". The items should be listed in the order they first appear in the input list. If an item ends up with a quantity of 0 after all transactions, it should not be included in the output. Examples Input 5 apple 10 banana 5 apple -3 banana -5 orange 7 Output apple 7 orange 7 Input 3 book 4 pen -2 notebook 5 Output book 4 pen -2 notebook 5","solution":"def process_transactions(n, transactions): Process a list of transactions and returns the resulting inventory. Args: n : int : Number of transactions transactions : list of tuples : Each tuple contains (item_id, quantity_change) Returns: dict : A dictionary with item_id as keys and their resulting quantities as values inventory = {} order = [] for item_id, quantity_change in transactions: if item_id not in inventory: inventory[item_id] = 0 order.append(item_id) inventory[item_id] += quantity_change # Remove items with zero quantity inventory = {item_id: quantity for item_id, quantity in inventory.items() if quantity != 0} result = {item_id: inventory[item_id] for item_id in order if item_id in inventory} return result"},{"question":"My friend Ankit is fascinated by numbers and loves solving mathematical puzzles. Recently, he came across a puzzle that involves partitioning an array of integers into two subsets such that the absolute difference between their sums is minimized. Unfortunately, Ankit is stuck and needs your help to solve this problem. Given an array of positive integers, partition the array into two subsets such that the difference in the sums of the subsets is minimized. Return this minimum difference. Input: The first line contains an integer N, representing the number of elements in the array. The second line contains N positive integers, the elements of the array. Output: One integer, the minimum possible absolute difference between the sums of the two subsets. Constraints: 1 ≤ N ≤ 20 1 ≤ Elements of the array ≤ 1000 SAMPLE INPUT 4 1 2 3 9 SAMPLE OUTPUT 3 Explanation: The array can be partitioned into {1, 2, 3} and {9}, giving the sums 6 and 9. The absolute difference is |6 - 9| = 3. No other partition gives a smaller difference.","solution":"def min_subset_sum_difference(arr): total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum + 1) for _ in range(n+1)] for i in range(n+1): dp[i][0] = True for i in range(1, n+1): for j in range(1, total_sum + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] min_diff = float(\'inf\') for j in range(total_sum//2, -1, -1): if dp[n][j] == True: min_diff = total_sum - 2 * j break return min_diff"},{"question":"You are given a string A and a string B. Your task is to determine if you can obtain string B by deleting exactly one character from string A. -----Constraints----- - 1 leq |A|, |B| leq 10^5 - A and B consist of lowercase English letters. - |A| = |B| + 1 -----Input----- Input is given from Standard Input in the following format: A B -----Output----- Print \\"YES\\" if you can obtain string B by deleting exactly one character from string A. Otherwise, print \\"NO\\". -----Sample Input----- codes code -----Sample Output----- YES By deleting the character \'s\' from \\"codes\\", you get the string \\"code\\".","solution":"def can_obtain_b_by_deleting_one_character(a, b): Determine if string B can be obtained by deleting exactly one character from string A if len(a) != len(b) + 1: return \\"NO\\" i = j = 0 found_difference = False while i < len(a) and j < len(b): if a[i] == b[j]: i += 1 j += 1 else: if found_difference: return \\"NO\\" found_difference = True i += 1 return \\"YES\\""},{"question":"You have a list of integers. Your task is to replace each element in the list with the product of every other element, without using division. *Example* ```python replace_with_products([1, 2, 3, 4]) == [24, 12, 8, 6] replace_with_products([2, 3, 4, 5]) == [60, 40, 30, 24] ```","solution":"def replace_with_products(lst): Replace each element in the list with the product of every other element. n = len(lst) if n == 0: return [] # Initialize two lists to store prefix products and suffix products prefix_products = [1] * n suffix_products = [1] * n # Generate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * lst[i - 1] # Generate suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * lst[i + 1] # Generate result by multiplying prefix and suffix products result = [1] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Given an array of positive integers, we define a product subarray as a contiguous subarray whose values form a product. Your task is to find the largest product that can be obtained by multiplying the elements of any non-empty subarray of the given array. Input Format The first line of input contains an integer mathbf{T}, indicating the number of test cases. Each of the next mathbf{T} lines contains a single test case, where each test case consists of integers separated by spaces. The first integer (N) indicates the number of elements in the array. The next (N) integers represent the elements of the array. Output Format For each test case, output a single integer representing the maximum product of any subarray. Constraints 1 leq T leq 10 1 leq N leq 10^5 1 leq A_i leq 1000 Sample Input 2 4 2 3 -2 4 5 -1 -2 -3 4 5 Sample Output 6 120 Explanation For the first test case, the subarray with the largest product is [2, 3], giving us a product of (2 times 3 = 6). For the second test case, the subarray with the largest product is [-1, -2, -3, 4, 5], giving us a product of (-1 times -2 times -3 times 4 times 5 = 120).","solution":"def max_product_subarray(test_cases): results = [] for case in test_cases: N = case[0] nums = case[1:] max_prod = nums[0] min_prod = nums[0] result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) results.append(result) return results"},{"question":"Given an encoded message containing digits, determine the total number of ways to decode it. The mapping is as follows: \'A\' -> 1 \'B\' -> 2 ... \'Z\' -> 26 You may assume that the message contains only digits and is non-empty. Example 1: Input: \\"12\\" Output: 2 Explanation: It could be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Example 2: Input: \\"226\\" Output: 3 Explanation: It could be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). Example 3: Input: \\"0\\" Output: 0 Explanation: There are no valid ways to decode \\"0\\". Example 4: Input: \\"06\\" Output: 0 Explanation: \\"06\\" cannot be mapped to any letter because it starts with \'0\'. Note: 1. The length of the input string will be between 1 and 100. 2. The input string will only contain digits.","solution":"def numDecodings(s: str) -> int: Returns the total number of ways to decode the given message. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): if s[i-1] != \'0\': dp[i] += dp[i-1] if s[i-2] == \'1\' or (s[i-2] == \'2\' and s[i-1] in \'0123456\'): dp[i] += dp[i-2] return dp[n]"},{"question":"Write a function that accepts a list of integers and an integer `k`. The function should determine if there are two distinct indices `i` and `j` in the list such that the difference between `nums[i]` and `nums[j]` is equal to or greater than `k`. For example: ``` [1, 3, 6, 9, 12], k=3 --> True # (6, 3), (9, 6) [1, 2, 2, 3], k=5 --> False # No pair with at least a difference of 5 ```","solution":"def has_pair_with_difference(nums, k): Returns True if there are two distinct indices i and j in the list such that the absolute difference between nums[i] and nums[j] is greater than or equal to k. num_set = set() for num in nums: if any(abs(num - n) >= k for n in num_set): return True num_set.add(num) return False"},{"question":"Given an integer N, you need to find the sum of all prime numbers less than or equal to N which also fall within a given range [L, R]. If no such primes exist within the specified range, return 0. Input Format The first line contains a single integer T, denoting the number of test cases. Each test case consists of three integers N, L, and R given in a single line. Output Format For each test case, output a single integer - the sum of all prime numbers ≤ N that are within the range [L, R]. If there are no such prime numbers, output 0. Constraints 1 ≤ T ≤ 20 2 ≤ N ≤ 10^6 1 ≤ L ≤ R ≤ N Sample Input 3 10 2 5 11 3 11 15 10 20 Sample Output 10 23 17 Explanation In the first sample case, the prime numbers less than or equal to 10 are [2, 3, 5, 7]. The primes which fall in the range [2, 5] are [2, 3, 5]. Their sum is 2+3+5=10. In the second sample case, the prime numbers less than or equal to 11 are [2, 3, 5, 7, 11]. The primes which fall in the range [3, 11] are [3, 5, 7, 11]. Their sum is 3+5+7+11=26. In the third sample case, the prime numbers less than or equal to 15 are [2, 3, 5, 7, 11, 13]. The primes which fall in the range [10, 20] are [11, 13]. Their sum is 11+13=24.","solution":"def sieve(N): primes = [True] * (N + 1) p = 2 while p * p <= N: if primes[p]: for i in range(p * p, N + 1, p): primes[i] = False p += 1 prime_numbers = [p for p in range(2, N + 1) if primes[p]] return prime_numbers def sum_of_primes_in_range(N, L, R): prime_numbers = sieve(N) return sum(p for p in prime_numbers if L <= p <= R) def process_test_cases(test_cases): results = [] for N, L, R in test_cases: results.append(sum_of_primes_in_range(N, L, R)) return results"},{"question":"You are given an integer N representing the number of elements in a list and then the elements of the list. Your task is to find the smallest positive integer not present in the list. -----Constraints----- - All values in the list are integers. - 1 leq N leq 100 - The elements of the list are in the range from -100 to 100. -----Input----- Input is given from Standard Input in the following format: N a1 a2 ... aN -----Output----- Print the smallest positive integer not present in the list. -----Sample Input----- 5 3 4 -1 1 2 -----Sample Output----- 5 Although the list contains 1, 2, 3, and 4, the smallest positive integer not in the list is 5.","solution":"def find_smallest_missing_positive(N, elements): Returns the smallest positive integer not present in the list. :param N: int: the number of elements in the list :param elements: List[int]: the elements of the list :return: int: smallest missing positive integer # Create a set for efficient look-up element_set = set(elements) # Start checking from 1 onwards smallest_missing = 1 while smallest_missing in element_set: smallest_missing += 1 return smallest_missing"},{"question":"Bob is a software developer working on a data serialization library. He needs to implement an encoding function that converts strings into a custom encoded format, and a decoding function that converts the encoded format back to the original strings. The custom encoding format is defined as follows: - Only lowercase alphabets (\'a\' to \'z\') are considered. - For each character in the string, the encoded format consists of its 1-based position in the alphabet (e.g., \'a\' -> 1, \'b\' -> 2, ..., \'z\' -> 26). - A hyphen (\'-\') is used to separate the positions of consecutive characters in the encoded string. Bob also needs to handle decoding the encoded string back to the original string. Write two functions, `encode` and `decode`, that perform these transformations. -----Function Signatures----- ```python def encode(s: str) -> str: pass def decode(s: str) -> str: pass ``` -----Input----- The `encode` function takes a single parameter: - `s` (a string, 1 ≤ len(s) ≤ 1000), which contains only lowercase alphabets. The `decode` function takes a single parameter: - `s` (a string, 1 ≤ len(s) ≤ 1000), which is the encoded format of a string as described above. -----Output----- The `encode` function should return a string representing the encoded format. The `decode` function should return a string representing the original string. -----Examples----- Input to `encode` ``` \\"apple\\" ``` Output from `encode` ``` \\"1-16-16-12-5\\" ``` Input to `decode` ``` \\"1-16-16-12-5\\" ``` Output from `decode` ``` \\"apple\\" ``` Input to `encode` ``` \\"hello\\" ``` Output from `encode` ``` \\"8-5-12-12-15\\" ``` Input to `decode` ``` \\"8-5-12-12-15\\" ``` Output from `decode` ``` \\"hello\\" ```","solution":"def encode(s: str) -> str: Encodes the string `s` into a custom format where each character\'s 1-based position in the alphabet is separated by hyphens. return \'-\'.join(str(ord(char) - ord(\'a\') + 1) for char in s) def decode(s: str) -> str: Decodes the string `s` from the custom format back to the original string. return \'\'.join(chr(int(num) + ord(\'a\') - 1) for num in s.split(\'-\'))"},{"question":"Alex is developing a sorting algorithm for a school project. The requirement is to sort a list of students based on their scores in descending order. However, if two students have the same score, they should be sorted by their names in ascending order alphabetically. Your task is to help Alex write a function that performs the required sort. # Constraints - The number of students (N) will be between 1 and 100. - Each student\'s name will be a string of length between 1 and 50, and it will contain lowercase alphabets only. - Each score will be an integer between 0 and 100. # Input - The first line contains an integer N, the number of students. - Each of the next N lines contains a student\'s name and score separated by a space. # Output - Output the sorted list of students, where each line contains a student\'s name and score separated by a space. # Sample Input ``` 4 alice 90 bob 95 charlie 90 dave 85 ``` # Sample Output ``` bob 95 alice 90 charlie 90 dave 85 ``` # Explanation The students are initially: - alice with a score of 90 - bob with a score of 95 - charlie with a score of 90 - dave with a score of 85 Sorting by score in descending order: - bob 95 - alice 90 - charlie 90 - dave 85 Between \\"alice\\" and \\"charlie\\" who both have a score of 90, \\"alice\\" comes before \\"charlie\\" in alphabetical order.","solution":"def sort_students(student_list): Sort students based on descending order of their scores. If two students have the same score, they should be sorted by their names in ascending order alphabetically. Parameters: student_list (list): A list of tuples where each tuple contains a student\'s name and score. Returns: list: Sorted list of student tuples. # Sorting by lambda that sorts primarily by score descending and secondarily by name ascending return sorted(student_list, key=lambda x: (-x[1], x[0])) def main(input_list): Processes the input to sort students and print the results. Parameters: input_list (list): Input list containing number of students followed by student entries where each entry consists of a student\'s name and score. Returns: list: Sorted list of student strings. N = int(input_list[0]) students = [tuple(input_list[i + 1].split(\' \')) for i in range(N)] students = [(name, int(score)) for name, score in students] sorted_students = sort_students(students) result = [f\\"{name} {score}\\" for name, score in sorted_students] return result # Example usage: input_data = [ \'4\', \'alice 90\', \'bob 95\', \'charlie 90\', \'dave 85\' ] print(main(input_data))"},{"question":"A scientist is analyzing a set of chemical reactions. Each reaction can be represented as a direct interaction between two chemicals. The scientist wants to ensure that the interactions form a valid interaction sequence, such that every chemical interacts with exactly two other unique chemicals, ultimately forming a loop for each set of chemical reactions. Given a list of pairs representing interactions between chemicals, determine if it forms such a loop. The interactions are given as an array of tuples. Each tuple represents an interaction between two unique chemicals. Each chemical is identified by a unique integer. Ensure that every chemical has exactly two unique interactions and that the interactions collectively form one or more complete loops. Input The first line contains an integer n (2 ≤ n ≤ 50), indicating the number of chemical interactions. The next n lines each contain two space-separated integers u and v (1 ≤ u, v ≤ 50), representing a direct interaction between chemical u and chemical v. Output Print \\"Valid\\" if the interactions form one or more valid loops. Otherwise, print \\"Invalid\\". Examples Input 4 1 2 2 3 3 4 4 1 Output Valid Input 4 1 2 2 3 3 1 4 1 Output Invalid Input 6 1 2 2 3 3 1 4 5 5 6 6 4 Output Valid","solution":"def is_valid_interaction_sequence(interactions): from collections import defaultdict interaction_count = defaultdict(int) # Count the number of interactions for each chemical for u, v in interactions: interaction_count[u] += 1 interaction_count[v] += 1 # Check if each chemical has exactly 2 interactions for count in interaction_count.values(): if count != 2: return \\"Invalid\\" # A function to perform DFS and check loop formation def dfs(node, visited, parent): visited.add(node) for neighbor in graph[node]: if neighbor == parent: continue if neighbor in visited: continue if dfs(neighbor, visited, node): return True return False # Create an undirected graph from the list of interactions graph = defaultdict(list) for u, v in interactions: graph[u].append(v) graph[v].append(u) visited = set() # Check if every component forms a loop for node in graph: if node not in visited: if len(graph[node]) != 2: return \\"Invalid\\" if dfs(node, visited, -1): return \\"Invalid\\" return \\"Valid\\""},{"question":"You are working on a project to develop a system that processes a list of students along with their scores in various subjects and calculates their final scores based on weighted averages. You are required to write a program that computes the final scores for each student and determines their rankings. The weights for the subjects are given as input, and you need to apply these weights to compute a weighted average. Input Format - The first line contains a single integer N, the number of students. - The second line contains an integer M, the number of subjects. - The third line contains M space-separated integers, denoting the weights for each subject. - The next N lines contain M space-separated integers each, representing the scores of each student in the M subjects. Constraints - 1 leq N leq 100 - 1 leq M leq 10 - 0 leq text{Score} leq 100 - 1 leq text{Weight} leq 10 Output Format - Print N lines, each containing the final score of a student sorted in descending order. Each line should contain the student\'s index (starting from 0) followed by their final score, separated by a space. Here is a sample input and output for better understanding: Sample Input 0 3 4 3 1 2 4 90 80 70 60 75 85 55 80 50 60 70 90 Sample Output 0 2 69.0 1 75.0 0 71.0 Explanation 0 The final weighted scores are calculated as follows: - For the first student: (90*3 + 80*1 + 70*2 + 60*4) / (3+1+2+4) = (270 + 80 + 140 + 240) / 10 = 730 / 10 = 73.0 - For the second student: (75*3 + 85*1 + 55*2 + 80*4) / (3+1+2+4) = (225 + 85 + 110 + 320) / 10 = 740 / 10 = 74.0 - For the third student: (50*3 + 60*1 + 70*2 + 90*4) / (3+1+2+4) = (150 + 60 + 140 + 360) / 10 = 710 / 10 = 71.0 Therefore, the final scores in descending order are: 2 69.0 1 75.0 0 71.0","solution":"def calculate_final_scores_and_rankings(N, M, weights, scores): final_scores = [] total_weight = sum(weights) for i in range(N): final_score = sum([scores[i][j] * weights[j] for j in range(M)]) / total_weight final_scores.append((i, final_score)) # Sort based on the final scores in descending order final_scores.sort(key=lambda x: x[1], reverse=True) return final_scores # Example usage: # N = 3 # M = 4 # weights = [3, 1, 2, 4] # scores = [ # [90, 80, 70, 60], # [75, 85, 55, 80], # [50, 60, 70, 90] # ] # print(calculate_final_scores_and_rankings(N, M, weights, scores))"},{"question":"Design a function that takes an integer as input and returns a diamond shape. The diamond\'s width (the widest part) and height would be equal to double the input minus one (2 * n - 1). Ensure the diamond is centered and symmetrical, even if the input is an odd or even number. Examples: Input: 3 Output: ``` * *** ***** *** * ``` Input: 5 Output: ``` * *** ***** ******* ********* ******* ***** *** * ``` Input: 7 Output: ``` * *** ***** ******* ********* *********** ************* *********** ********* ******* ***** *** * ``` Notes: - The diamond shape should be consistent and symmetrical. - The function should avoid errors with incorrect or outlier input values, gracefully returning an appropriate response. For example, if n < 1, the function should return an empty string.","solution":"def generate_diamond(n): Generate a diamond shape of height and width 2*n - 1. If n < 1, return an empty string. if n < 1: return \\"\\" diamond = [] for i in range(1, n + 1): stars = \'*\' * (2 * i - 1) spaces = \' \' * (n - i) diamond.append(spaces + stars + spaces) for i in range(n - 1, 0, -1): stars = \'*\' * (2 * i - 1) spaces = \' \' * (n - i) diamond.append(spaces + stars + spaces) return \'n\'.join(diamond)"},{"question":"You are given a string `S` consisting of lowercase English letters and an integer `K`. You may perform any number of operations of the following type (in any order): choose any valid substring of `S` (a sequence of consecutive characters) of length exactly `K` and reverse it. You need to determine if you can transform the string `S` into a palindrome using the allowed operations. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer K. The second line contains the string `S`. ------ Output ------ For each test case, print a single line containing the string \\"yes\\" if it is possible to transform `S` into a palindrome or \\"no\\" otherwise (without quotes). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ K ≤ |S| ≤ 1000 ------ Example Input ------ 3 3 abcba 2 aabbcc 4 abcd ------ Example Output ------ yes no no ------ Explanation ------ In the first case, the string is already a palindrome, so no operation is needed. In the second case, you cannot form a palindrome by reversing any substring of length 2 as the characters are not mirrored correctly. In the third case, it is impossible to reorder \\"abcd\\" into a palindrome, as reversing any 4-character substring will not help in this case.","solution":"def can_transform_to_palindrome(T, test_cases): results = [] for i in range(T): K, S = test_cases[i] if is_possible_palindrome(S, K): results.append(\\"yes\\") else: results.append(\\"no\\") return results def is_possible_palindrome(S, K): if S == S[::-1]: return True n = len(S) for start in range(n - K + 1): end = start + K substring = S[start:end] reversed_substring = substring[::-1] new_string = S[:start] + reversed_substring + S[end:] if new_string == new_string[::-1]: return True return False"},{"question":"In a small town, there is a single straight road along which houses are evenly spaced. Each house has a mailbox, and the town\'s Post Office is responsible for delivering letters to each mailbox every day. The Post Office also wants to collect outgoing letters from any house that has them. To minimize travel distance and time, the Post Office seeks to find the most efficient route that starts at the Post Office, covers all houses, and returns back to the Post Office. Given the number of houses and the distances between them, you\'re tasked with writing a program that computes the shortest route the Post Office should take to fulfill its daily deliveries and collections. -----Input----- The input consists of a single line with an integer n (2 le n le 10^5), representing the number of houses. -----Output----- Output a single integer, the minimal distance the Post Office must travel to visit each house and return to the starting point. -----Examples----- Sample Input 1: 3 Sample Output 1: 4 Sample Input 2: 5 Sample Output 2: 8","solution":"def compute_minimal_distance(n): Given the number of houses, computes the minimal distance the Post Office must travel to visit each house and return to the starting point. Args: n (int): The number of houses. Returns: int: The minimal distance traveled. # Since the houses are evenly spaced along a straight road, and we need to # visit each house and return back to the starting point: # - The total distance will be twice the distance between the Post Office (start) # and the last house. # If there are n houses, the distance one way is (n - 1). # So, the total distance is 2 * (n - 1). return 2 * (n - 1)"},{"question":"Given an array nums containing n distinct integers in the range [0, n], return the only number in the range that is missing from the array. Example 1: Input: nums = [3, 0, 1] Output: 2 Example 2: Input: nums = [0, 1] Output: 2 Example 3: Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 Example 4: Input: nums = [0] Output: 1 Note: Your algorithm should run in linear runtime complexity. Could you implement it without using extra space?","solution":"def missing_number(nums): Returns the missing number in the array nums which contains n distinct integers in the range [0, n]. n = len(nums) total_sum = n * (n + 1) / 2 actual_sum = sum(nums) return int(total_sum - actual_sum)"},{"question":"```if-not:sql Write a function that takes a list of words and a prefix string. The function should return the number of words that start with the given prefix. ``` ```if:sql Given a database of words and a prefix string, calculate the number of words that start with the given prefix. Input ~~~ --------------------------------- | Table | Column | Type | |--------------+--------+-------| | words_list | id | int | | | word | text | --------------------------------- ~~~ Output ~~~ ---------------------- | Column | Type | |-------------+------| | count | int | ---------------------- ~~~ ``` All inputs will be valid strings. The prefix string will always be non-empty. ___ Examples ```python words_with_prefix([\\"apple\\", \\"apricot\\", \\"banana\\", \\"appliance\\"], \\"ap\\") == 3 words_with_prefix([\\"cherry\\", \\"mango\\", \\"melon\\", \\"maple\\"], \\"ma\\") == 3 words_with_prefix([\\"cat\\", \\"dog\\", \\"dolphin\\", \\"donkey\\"], \\"do\\") == 2 ```","solution":"def words_with_prefix(words, prefix): Returns the number of words that start with the given prefix. :param words: List of words. :param prefix: The prefix string to match. :return: The number of words starting with the prefix. return sum(word.startswith(prefix) for word in words)"},{"question":"You are given a string consisting of lowercase letters and a list of pairs of indices in that string. Your task is to determine if, for each pair, the substring between the two indices (inclusive) is a palindrome. A string is a palindrome if it reads the same backward as forward. -----Input----- - The first line contains a string s of length 1 leq |s| leq 10^5 consisting of lowercase letters. - The second line contains an integer q (1 leq q leq 10^4), the number of index pairs. - The next q lines each contain two integers l and r (0 leq l leq r < |s|) representing the start and end indices of the substring. -----Output----- For each pair of integers l and r, print \\"yes\\" if the substring s[l:r+1] is a palindrome and \\"no\\" otherwise. -----Examples----- Sample Input 1: abacaba 3 0 6 1 4 2 2 Sample Output 1: yes no yes Sample Input 2: abcdef 2 1 3 2 5 Sample Output 2: no no","solution":"def is_substring_palindrome(s, queries): Determines if the substrings of `s` specified by `queries` are palindromes. Each query is a pair (l, r) representing the start and end indices of the substring. Parameters: s (str): The input string. queries (list of tuples): A list of (l, r) index pairs. Returns: list of str: \\"yes\\" if the substring s[l:r+1] is a palindrome, otherwise \\"no\\". results = [] for l, r in queries: substring = s[l:r+1] if substring == substring[::-1]: results.append(\\"yes\\") else: results.append(\\"no\\") return results # Example usage: # s = \\"abacaba\\" # queries = [(0, 6), (1, 4), (2, 2)] # print(is_substring_palindrome(s, queries)) # Output should be [\\"yes\\", \\"no\\", \\"yes\\"]"},{"question":"Write a function that takes a list of integers as input and returns the sum of all the even integers in the list. If there are no even integers, the function should return 0. Examples: sumEvenNumbers([1, 2, 3, 4, 5]) == 6 sumEvenNumbers([1, 3, 5, 7]) == 0","solution":"def sumEvenNumbers(numbers): Returns the sum of all even integers in the list. If there are no even integers, returns 0. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Alice and Bob love playing games with strings. Today, they came up with a new game involving a string `s` that consists of lowercase English letters. The game is played as follows: - Alice and Bob will take turns, starting with Alice. - In each turn, a player must remove a single character from the string `s`. - The player who is forced to remove the last character from the string loses the game. Alice and Bob want to play optimally, meaning they both want to avoid losing. Help them determine the winner of the game given the initial string `s`. -----Input----- The input consists of an integer `t` (1leq tleq 10^4) — the number of test cases. The description of the test cases follows. Each test case consists of a single line containing a string `s` (1leq text{length of } s leq 10^5) consisting of only lowercase English letters. The total length of all strings in input does not exceed 10^6. -----Output----- For each test case, print \\"Alice\\" if Alice will win the game, otherwise print \\"Bob\\". -----Example----- Input 3 abc aaa x Output Bob Alice Alice -----Note----- In the first test case, Alice removes \'a\', Bob removes \'b\', and Alice is forced to remove \'c\'. Hence Bob wins. In the second test case, Alice removes \'a\', Bob removes \'a\', Alice removes \'a\'. Hence Alice wins. In the third test case, since there is only one character, Alice removes \'x\', and this makes Alice lose immediately. Therefore, Alice wins since she starts the game.","solution":"def determine_winner(t, games): Determines the winner of each game. Args: t (int): number of test cases games (list of str): list of strings representing the games Returns: list of str: winner for each game, either \\"Alice\\" or \\"Bob\\" results = [] for s in games: if len(s) % 2 == 0: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"Alice recently developed a love for palindromes and she enjoys writing sentences that read the same forward and backward. She wants to write a program that helps her identify whether a given sentence is a palindrome. A sentence is considered a palindrome if, after removing all non-alphanumeric characters and ignoring cases, it reads the same from left to right and right to left. Help Alice by writing a function that verifies if a given sentence is a palindrome. Input The input consists of a single string `s` that may contain letters, digits, spaces, punctuation marks, and their length does not exceed 500 characters. Output Return `True` if the input string is a palindrome, otherwise return `False`. Examples ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") # => True is_palindrome(\\"race a car\\") # => False ```","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, ignoring non-alphanumeric characters and case. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"A cargo company operates a warehouse where they store large containers. Each container has a unique identifier and a specific weight capacity. The company receives requests to move a group of containers to different locations within the warehouse. They need a software solution that helps them determine the heaviest possible container in a requested range to ensure proper handling and safety. You are tasked to write a program that, given the list of containers and their weights, along with multiple queries, outputs the weight of the heaviest container within each queried range. Input consists of the following: - An integer N on the first line, the total number of containers. - The second line contains N space-separated integers, each representing the weight of a container. - An integer Q on the third line, the total number of move queries. - Each of the next Q lines contains two space-separated integers, representing the starting and ending indices of the query range (1-based index). For each query, you need to output the maximum weight of the containers in the specified range. 1 ≤ N ≤ 1000 1 ≤ Each container\'s weight ≤ 1000000 1 ≤ Q ≤ 1000 NOTE: Only submissions in C-Language will be accepted. SAMPLE INPUT 7 2 5 1 8 3 9 4 3 1 3 4 7 2 5 SAMPLE OUTPUT 5 9 8 Explanation The sample case has 7 container weights listed as [2, 5, 1, 8, 3, 9, 4]. Then, it has 3 queries: 1. The first query is from index 1 to 3, thus the sub-list is [2, 5, 1]. The maximum weight of the sub-list is 5. 2. The second query\'s sub-list is from index 4 to 7, making it [8, 3, 9, 4]. Here, the maximum weight is 9. 3. The third query\'s sub-list is from index 2 to 5, thus the sub-list is [5, 1, 8, 3]. The maximum weight is 8. For each query, the heaviest container’s weight in the given range is printed on a new line.","solution":"def heaviest_containers(container_weights, queries): Returns the maximum container weight for each query range. Parameters: container_weights (list of int): Weights of the containers. queries (list of tuples): Each tuple contains two integers representing the start and end indices of the query range (1-based index). Returns: list of int: Maximum weights in the specified ranges. results = [] for start, end in queries: # Adjust indices from 1-based to 0-based max_weight = max(container_weights[start-1:end]) results.append(max_weight) return results"},{"question":"Write a program to identify the most frequent odd integer in a list. Input The first line of the input contains a single integer N (1 ≤ N ≤ 10000), the number of integers in the list. The second line contains N integers separated by spaces. Each integer in the list is between -10^6 and 10^6. Output Output a single integer, the most frequent odd integer in the list. If there are multiple odd integers with the same highest frequency, output the smallest one. If there are no odd integers in the list, output -1. Constraints 1 ≤ N ≤ 10000 Each integer in the list is between -10^6 and 10^6 Sample Input 1 7 4 3 3 1 5 5 7 Sample Output 1 3 Sample Input 2 5 8 8 8 8 8 Sample Output 2 -1 Problem Setter: [Your Name]","solution":"from collections import Counter def most_frequent_odd_integer(N, integer_list): Returns the most frequent odd integer in the list. If there are no odd integers, return -1. If there is a tie, return the smallest odd integer with the highest frequency. odd_integers = [x for x in integer_list if x % 2 != 0] if not odd_integers: return -1 frequency_counter = Counter(odd_integers) most_frequent_odd = min(frequency_counter.items(), key=lambda x: (-x[1], x[0]))[0] return most_frequent_odd"},{"question":"Write a program to determine if a string can be transformed into another by performing a set of allowed operations. Specifically, you are required to determine if the string `s1` can be transformed into the string `s2` by swapping any two adjacent characters any number of times. ----- Input ----- The first line of input contains a single integer T denoting the number of test cases. This will be followed by T test cases. Each test case consists of two lines: - The first line contains the string `s1`. - The second line contains the string `s2`. ----- Output ----- For each test case, output a single line - \\"Yes\\" (without quotes) if `s1` can be transformed into `s2` by the allowed operations, or \\"No\\" (without quotes) otherwise. ----- Constraints ----- 1 ≤ T ≤ 100 1 ≤ |s1|, |s2| ≤ 1000 ----- Sample Input 1 ----- 3 abcd cbad xyzy yyzx aaa aaa ----- Sample Output 1 ----- Yes Yes Yes ----- Explanation 1 ----- Example case 1: To transform \\"abcd\\" into \\"cbad\\", we can perform the following adjacent swaps: 1. Swap \'b\' and \'c\': \\"acbd\\" 2. Swap \'a\' and \'c\': \\"cabd\\" 3. Swap \'a\' and \'b\': \\"cbad\\" Example case 2: To transform \\"xyzy\\" into \\"yyzx\\", we can perform the following adjacent swaps: 1. Swap \'z\' and \'y\': \\"xyyz\\" 2. Swap \'z\' and \'y\': \\"yyzx\\" Example case 3: The strings are already identical, so no swaps are needed.","solution":"def can_transform(s1, s2): Determines if s1 can be transformed into s2 by swapping any two adjacent characters any number of times. return sorted(s1) == sorted(s2) def process_test_cases(T, test_cases): results = [] for i in range(T): s1, s2 = test_cases[i] if can_transform(s1, s2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a square matrix of size N x N, rotate the matrix 90 degrees clockwise. Write a function that takes an N x N matrix as input and rotates the matrix 90 degrees clockwise in place. -----Input----- The first line contains an integer N, the size of the matrix. The next N lines contain N integers each, representing the elements of the matrix. -----Output----- Output the rotated matrix, line by line. -----Constraints----- - 1 ≤ N ≤ 500 - -1000 ≤ matrix elements ≤ 1000 -----Example----- Input: 3 1 2 3 4 5 6 7 8 9 Output: 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix(matrix): Rotate an N x N matrix 90 degrees clockwise in place. Parameters: matrix (list of list of int): A 2D list representing the N x N matrix Returns: list of list of int: Rotated matrix 90 degrees clockwise n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix # Function to print matrix as required in the problem statement def print_matrix(matrix): for row in matrix: print(\' \'.join(map(str, row)))"},{"question":"Given a list of integers and a number of specific query operations, implement a function to modulate and process each query, which alters the list according to the operation defined in the query. Each query will follow one of the following formats: 1. SumRange a b: Sum all elements in the list from index `a` to index `b` inclusive. 2. IncrementRange a b k: Increment all elements in the list from index `a` to index `b` inclusive by `k`. 3. MaxRange a b: Find the maximum element in the list from index `a` to index `b` inclusive. The function should handle multiple queries and return the result of each query sequentially. # Input Format The first line contains an integer, `n`, which denotes the number of elements in the list. The second line contains `n` space-separated integers representing the list of elements. The third line contains an integer, `q`, which denotes the number of queries. Each of the next `q` lines contains one query in one of the three formats described. # Output Format For each SumRange and MaxRange query, output the result in a new line. # Sample Input ``` 5 1 2 3 4 5 4 SumRange 1 3 IncrementRange 0 4 1 MaxRange 0 2 SumRange 0 4 ``` # Sample Output ``` 9 3 17 ``` # Explanation The initial list is [1, 2, 3, 4, 5]. The queries should be performed as: 1. SumRange 1 3 => sum of elements from index 1 to 3 => 2+3+4 = 9 2. IncrementRange 0 4 1 => increment all elements from index 0 to 4 by 1 => [2, 3, 4, 5, 6] 3. MaxRange 0 2 => maximum of elements from index 0 to 2 => max(2, 3, 4) = 4 4. SumRange 0 4 => sum of elements from index 0 to 4 => 2+3+4+5+6 = 20","solution":"def process_queries(n, elements, q, queries): results = [] for query in queries: parts = query.split() command = parts[0] a = int(parts[1]) b = int(parts[2]) if command == \\"SumRange\\": result = sum(elements[a:b+1]) results.append(result) elif command == \\"IncrementRange\\": k = int(parts[3]) for i in range(a, b+1): elements[i] += k elif command == \\"MaxRange\\": result = max(elements[a:b+1]) results.append(result) return results"},{"question":"Max is playing a game with strings. The game involves two strings: the main string `s` and the target string `t`. The goal of the game is to find the minimum number of contiguous substrings from the main string `s` whose concatenation gives the target string `t`. If it is impossible to form `t` by concatenating such substrings, Max loses the game. A substring is defined as a contiguous sequence of characters within a string. For example, the string \\"hello\\" has substrings \\"h\\", \\"he\\", \\"hel\\", \\"hell\\", \\"hello\\", \\"e\\", \\"el\\", \\"ell\\", \\"ello\\", and so on. Input The input consists of two lines: - The first line contains the string `s` (1 ≤ |s| ≤ 100), the main string. - The second line contains the string `t` (1 ≤ |t| ≤ 100), the target string. Output The single line contains an integer — the minimum number of contiguous substrings from `s` needed to form `t`. If it is impossible to form `t`, print `-1`. Examples Input abcabcd abd Output 2 Input abcd abcde Output -1","solution":"def min_substrings_to_form_t(s, t): Finds the minimum number of contiguous substrings of s that can be concatenated to form t. Returns -1 if it is impossible to form t. n, m = len(s), len(t) i, count = 0, 0 while i < m: found = False for j in range(n, 0, -1): if t[i:i + j] in s: i += j count += 1 found = True break if not found: return -1 return count"},{"question":"Write a function that takes an array of positive integers and returns the number of prime numbers in the array. # Example ```python count_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4 # The prime numbers are 2, 3, 5, 7 count_primes([2, 3, 5, 7, 11, 13, 17, 19, 23]) == 9 # All numbers in the list are prime count_primes([1, 4, 6, 8, 10, 12]) == 0 # There are no prime numbers in the list ```","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_primes(arr): Returns the number of prime numbers in the array. Parameters: arr (list): list of positive integers Returns: int: number of prime numbers in the list return sum(1 for x in arr if is_prime(x))"},{"question":"A network of n computers is connected by m cables. Each cable connects exactly two computers and each computer is connected directly to every other computer by at most one cable. Given these cables, some computers could be disconnected from the network. Your task is to determine whether there is a cycle in the network. Input - First line contains two integers, n and m (1 ≤ n, m ≤ 1000), the number of computers and cables respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that there is a cable connecting computer u to computer v. Output Output \\"Yes\\" if there is at least one cycle in the network, otherwise output \\"No\\". Explanation of Sample Input: If there are 5 computers and 6 cables connecting them with the following pairs: - (1, 2) - (2, 3) - (3, 4) - (4, 5) - (2, 4) - (1, 3) The network has a cycle: 1-2-4-3-1. Sample Input 5 6 1 2 2 3 3 4 4 5 2 4 1 3 Sample Output Yes","solution":"def has_cycle(n, m, connections): from collections import defaultdict def dfs(v, visited, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, visited, v): return True elif parent != neighbor: return True return False # Create a graph from the list of connections graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n+1) for i in range(1, n+1): if not visited[i]: if dfs(i, visited, -1): return \\"Yes\\" return \\"No\\" # Note: The function reads input from arguments directly rather than standard input. # n = number of computers # m = number of cables # connections = list of tuples where each tuple represents a cable connection between two computers"},{"question":"A renowned scientist is working on a secret project related to genetic algorithms. She is experimenting with creating sequences of DNA. In her project, each sequence of DNA is represented as a string consisting of the characters \'A\', \'C\', \'G\', and \'T\'. Due to the nature of her experiments, she often needs to find out if one DNA sequence can be transformed into another by changing a limited number of characters. Your task is to write a program that helps the scientist by determining if it is possible to transform one DNA sequence into another, given a maximum number of allowed character changes. INPUT: The first line contains an integer N, which indicates the number of test cases. Each test case consists of three lines. The first line of each test case contains an integer K, the maximum number of character changes allowed. The second line contains the first DNA sequence S1. The third line contains the second DNA sequence S2. OUTPUT: For each test case, output \\"POSSIBLE\\" if it\'s possible to transform S1 into S2 within the given number of character changes. Otherwise, output \\"IMPOSSIBLE\\". CONSTRAINTS: 1 ≤ N ≤ 10 1 ≤ K ≤ 100 1 ≤ length(S1), length(S2) ≤ 1000 S1 and S2 will always have the same length SAMPLE INPUT: 4 1 AGCT AGTT 2 ACGTACGT TGCGTGCG 0 GATTACA GACTTCA 3 GGGG GTGT SAMPLE OUTPUT: POSSIBLE IMPOSSIBLE IMPOSSIBLE POSSIBLE EXPLANATION: 1. In the first test case, only 1 character is different between S1 and S2 (\'C\' to \'T\'). Since K is 1, it\'s possible to transform S1 to S2 with 1 change. 2. In the second test case, more than 2 characters are different between S1 and S2 (\'A\' to \'T\', \'C\' to \'G\', \'G\' to \'T\', and \'T\' to \'G\'). Since K is 2, it\'s impossible to transform S1 to S2 with just 2 changes. 3. In the third test case, there are no allowed changes (K is 0), but S1 is different from S2 in multiple positions (\'A\' to \'A\', \'T\' to \'C\', and an additional \'A\' to \'C\'). Since no changes are allowed, transformation is impossible. 4. In the fourth test case, there are 2 characters that need changing (\'G\' to \'T\' and \'G\' to \'T\'). Since K is 3, it\'s possible to transform S1 to S2 with 2 changes.","solution":"def can_transform(N, test_cases): results = [] for k, s1, s2 in test_cases: # Count the number of differences between s1 and s2 diff_count = sum(1 for a, b in zip(s1, s2) if a != b) # Determine if the transformation is possible within the given number of changes if diff_count <= k: results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"Write a Python function called `spiral_traverse` that takes a 2D list (matrix) as input and returns a list of its elements in a spiral order. The matrix will contain integers, and you should visit the elements in the following order: first row (left to right), last column (top to bottom), last row (right to left), first column (bottom to top), and then continue spiraling inwards for the rest of the matrix. The function should handle matrices of different sizes, including non-square matrices. Function Signature: `def spiral_traverse(matrix: List[List[int]]) -> List[int]:` Constraints: - The matrix `matrix` is a list of lists with `n` rows and `m` columns. - `1 <= n, m <= 100` - `-1000 <= matrix[i][j] <= 1000` Input: - A 2D list (matrix) of integers Output: - A list of integers representing the matrix in spiral order. Examples: Input: ```python matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` Output: ```python [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10] ``` Input: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12] ] ``` Output: ```python [1, 2, 3, 6, 9, 12, 11, 10, 7, 4, 5, 8] ``` Input: ```python matrix = [ [3, 2, 1] ] ``` Output: ```python [3, 2, 1] ```","solution":"def spiral_traverse(matrix): Returns a list of elements in the matrix in spiral order. result = [] if not matrix: return result top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right on the top row for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom on the right column for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left on the bottom row for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top on the left column for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"In a fictional kingdom, the king has decided to establish communication towers to connect all cities. The kingdom has N cities and M bidirectional roads connecting some pairs of cities. The goal is to build communication towers in such a way that each city is connected to at least one communication tower either directly in the city itself or through its neighboring cities (cities that are directly connected via a road). Your task is to determine the minimum number of communication towers needed to ensure that every city is connected directly or indirectly to at least one communication tower. ------ Input ------ The first line of the input contains two integers N and M denoting the number of cities and roads respectively. Each of the next M lines contains two integers u and v (1 leq u, v leq N) denoting that there is a road connecting city u and city v. ------ Output ------ Print a single integer indicating the minimum number of communication towers needed. ------ Constraints ------ 1 leq N leq 1000 0 leq M leq 5000 ------ Example Input ------ 5 4 1 2 2 3 4 5 3 4 ------ Example Output ------ 2 ------ Explanation ------ In the example, we can place communication towers in city 2 and city 4. This will ensure that all cities are connected either directly to the tower or through neighboring cities connected by roads.","solution":"def find_min_towers(N, M, roads): from collections import defaultdict def dfs(node, visited, adj_list): stack = [node] while stack: v = stack.pop() for neighbor in adj_list[v]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) visited = set() components = 0 for city in range(1, N+1): if city not in visited: components += 1 visited.add(city) dfs(city, visited, adj_list) return components"},{"question":"In a magical world, there exists a special garden with N enchanted flowers arranged in a row. Each flower has a certain amount of magical energy associated with it. You have a basket that can carry exactly K flowers, and your goal is to collect the maximum possible magical energy from any K consecutive flowers. Write a program to determine the maximum magical energy you can gather by choosing exactly K consecutive flowers from the row of N flowers. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines. The first line contains two integers N and K (1 ≤ K ≤ N ≤ 1000) denoting the number of flowers and the number of consecutive flowers to be collected respectively. The second line contains N integers, each describing the magical energy of a flower. The magical energy values are within the range of -1000 to 1000. -----Output----- For each test case, output a single line containing one integer — the maximum amount of magical energy that can be collected by choosing exactly K consecutive flowers. -----Example----- Input: 3 5 3 1 2 3 4 5 8 2 -1 -2 9 8 -7 3 -4 6 6 4 -5 1 3 -2 4 -1 Output: 12 17 6 -----Explanation----- Test case 1. We have N = 5 and K = 3. The possible sums of magical energies of any three consecutive flowers are: - 1 + 2 + 3 = 6 - 2 + 3 + 4 = 9 - 3 + 4 + 5 = 12 The maximum sum is 12. Test case 2. We have N = 8 and K = 2. The possible sums of magical energies of any two consecutive flowers are: - -1 + -2 = -3 - -2 + 9 = 7 - 9 + 8 = 17 - 8 + -7 = 1 - -7 + 3 = -4 - 3 + -4 = -1 - -4 + 6 = 2 The maximum sum is 17.","solution":"def max_magical_energy(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] energies = test_cases[i][1] max_energy = float(\'-inf\') current_sum = sum(energies[:K]) max_energy = current_sum for j in range(K, N): current_sum += energies[j] - energies[j - K] if current_sum > max_energy: max_energy = current_sum results.append(max_energy) return results"},{"question":"Samrat is planning to open a chain of fast food restaurants and wants to analyze the menu options. He has a limited set of ingredients and wants to determine the maximum cost of a menu item he can create with the given ingredients. Each ingredient has a cost associated with it, and a menu item can be formed using one or more of these ingredients. However, there\'s a limit on how many unique ingredients he can use in a single menu item. Samrat needs your help to find the maximum possible cost of a menu item he can create. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. The first line of each test case contains two integers N and K, where N is the number of available ingredients and K is the maximum number of unique ingredients that can be used in a menu item. The second line contains N integers C_{1},ldots, C_{N}, where C_{i} is the cost of the i^{th} ingredient. ------ Output ------ For each test case, print the maximum possible cost of a menu item he can create. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ K ≤ N 1 ≤ C_{i} ≤ 10^{6} for all 1 ≤ i ≤ N ------ Subtasks ------ Subtask #1 (100 points): original constraints ------ Sample Input 1 ------ 2 5 3 1 2 3 4 5 4 2 10 5 20 15 ------ Sample Output 1 ------ 12 35 ------ Explanation 1 ------ Test case 1: The costs of the ingredients are {1, 2, 3, 4, 5}. We can use at most 3 different ingredients. The combination that gives the highest cost is {3, 4, 5}, with the total cost being 3 + 4 + 5 = 12. Test case 2: The costs of the ingredients are {10, 5, 20, 15}. We can use at most 2 different ingredients. The combination that gives the highest cost is {20, 15}, with the total cost being 20 + 15 = 35.","solution":"def max_menu_item_cost(T, test_cases): Determines the maximum possible cost of a menu item that can be created with given ingredients. Parameters: T (int): Number of test cases. test_cases (list of (int, int, list of int)): Each test case is a tuple where - First element is the number of ingredients (N). - Second element is the maximum number of unique ingredients that can be used in a menu item (K). - Third element is the list of costs of the ingredients. Returns: list of int: Maximum costs for each test case. results = [] for i in range(T): N, K, costs = test_cases[i] # Sort the costs in descending order and sum up the top K costs sorted_costs = sorted(costs, reverse=True) max_cost = sum(sorted_costs[:K]) results.append(max_cost) return results"},{"question":"In a certain colony of bacteria, reproduction happens in a distinct manner. Each day, each bacterium produces a new bacterium which matures and reproduces the next day. You need to determine how many bacteria are present in the colony after a given number of days. The process is as follows: - On day 1, the initial population of bacteria doubles. - On every subsequent day, every bacterium from the previous day produces one new bacterium. -----Input:----- - The first line will contain a single integer T, the number of test cases. - Each test case will consist of two integers: N (the initial number of bacteria) and D (the number of days). -----Output:----- For each test case, output in a single line the number of bacteria present after D days. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 10^6 - 1 leq D leq 30 -----Sample Input:----- 3 1 1 2 2 1 3 -----Sample Output:----- 2 6 6 -----EXPLANATION:----- - In the first case, starting with 1 bacterium, it reproduces to form an additional bacterium. Thus, after 1 day, there are 2 bacteria. - In the second case, starting with 2 bacteria, after the first day there are 4 bacteria. Each of these 4 produces a new bacterium on the second day, resulting in a total of 4 + 4 = 8 bacteria. - In the third case, starting with 1 bacterium, after the first day there are 2 bacteria. After the second day, each of these 2 produces 1 new bacterium resulting in 4 bacteria. After the third day, each of the 4 bacteria produces a new bacterium leading to 8 total bacteria.","solution":"def bacteria_growth(T, test_cases): Function to calculate the number of bacteria present after a given number of days for multiple test cases. Parameters: T : int : Number of test cases test_cases : list of tuples : Each tuple contains two integers N (initial number of bacteria) and D (number of days) Returns: list : Number of bacteria present after D days for each test case results = [] for N, D in test_cases: # Apply the logic of bacteria growth bacteria_count = N * (2 ** D) # Each day the population doubles results.append(bacteria_count) return results # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(T)] results = bacteria_growth(T, test_cases) for result in results: print(result)"},{"question":"Marauders are planning a grand heist in the city, and they have assigned two infiltrators, I1 and I2, to find the best entry and exit routes. The city map can be represented as a grid of cells where each cell can have a value of \'0\' or \'1\'. A cell with value \'1\' allows movement, while a cell with value \'0\' is an obstacle. Infiltrators can move up, down, left or right from one cell to another in the grid. To facilitate the heist, the infiltrators need a way to quickly identify the largest rectangular sub-grid of cells with all \'1\'s. This rectangular area will determine the best place where the heist can be carried out. Your task is to write a function to find the area of the largest rectangle containing only \'1\'s and return its area. # Input The input consists of: - N: an integer representing the number of rows in the grid. - M: an integer representing the number of columns in the grid. - A grid of size NxM consisting of \'0\' and \'1\'. # Output Return the area of the largest rectangle containing only \'1\'s. # Constraints - 1 ≤ N, M ≤ 200 - The grid consists of only zeros and ones. # Example Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output ``` 6 ``` Explanation The largest rectangle matrix containing only \'1\'s covers 6 cells from the top left of the traveling rectangle matrix (second row and second column) to bottom right of the traveling rectangle matrix (third row and fourth column).","solution":"def maximal_rectangle(matrix): if not matrix: return 0 n = len(matrix[0]) heights = [0] * (n + 1) max_area = 0 for row in matrix: for i in range(n): if row[i] == 0: heights[i] = 0 else: heights[i] += 1 stack = [-1] for i in range(n + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") N, M = map(int, input_lines[0].split()) grid = [list(map(int, line.split())) for line in input_lines[1:]] return grid def largest_rectangle_area(input_str): grid = parse_input(input_str) return maximal_rectangle(grid)"},{"question":"Problem description: Bob has a passion for collecting stones and organizing them into different piles. Each stone has a distinct weight, and Bob likes to ensure that each pile contains stones that have consecutive weights and that no two stones in the same pile weigh the same. Given the weights of his stone collection, help Bob determine the minimum number of piles needed to achieve his goal. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer n, denoting the number of stones. The second line of each test case contains n space-separated integers representing the weights of the stones. Output For each test case, output a single line containing the minimum number of piles needed. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 100000 1 ≤ Weight of each stone ≤ 1000000000 Example Input: 1 8 1 3 2 6 5 4 7 8 Output: 1","solution":"def min_piles_count(T, test_cases): results = [] for case in test_cases: n, weights = case weights.sort() # Piles are dictated by the difference between consecutive stones piles = 1 for i in range(1, n): if weights[i] > weights[i - 1] + 1: piles += 1 results.append(piles) return results"},{"question":"Given an array arr[] which contains data of first N nodes of a Full Binary Tree in an in-order fashion. The task is to print all possible level order traversals of the Full Binary Tree. Example 1: Input: N = 7 arr[] = {1, 2, 3, 4, 5, 6, 7} Output: 4 2 6 1 3 5 7 Explanation: The formed Binary Tree is: 4 / 2 6 / / 1 3 5 7 Example 2: Input: N = 3 arr[] = {1, 2, 3} Output: 2 1 3 Explanation: The formed Binary Tree is: 2 / 1 3 Your Task: You don\'t need to read input or print anything. Your task is to complete the function printLevelOrderTraversal() which takes the array arr[] and its size N as inputs and returns a 2D array where each subarray depicts a level of nodes in level order traversal. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= N <= 10^{4}","solution":"def printLevelOrderTraversal(arr, N): if N == 0: return [] def buildTree(arr, start, end): if start > end: return None, [] mid = (start + end) // 2 root = arr[mid] left_level_order = [] right_level_order = [] left_subtree, left_level_order = buildTree(arr, start, mid - 1) right_subtree, right_level_order = buildTree(arr, mid + 1, end) result = [[root]] i = 0 while i < max(len(left_level_order), len(right_level_order)): current_level = [] if i < len(left_level_order): current_level.extend(left_level_order[i]) if i < len(right_level_order): current_level.extend(right_level_order[i]) result.append(current_level) i += 1 return root, result _, level_order = buildTree(arr, 0, N - 1) return level_order"},{"question":"You are working on a research project about ancient literature, and you have come across several manuscripts that contain numeric codes. However, the ancient scribes were fond of redundancy and they often encoded the same number multiple times within a single manuscript. To simplify your work, you need to determine the number of unique codes for each manuscript. Each manuscript consists of a sequence of lines where each line is a numeric code. You need to count the number of unique numeric codes in each manuscript. Input - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of lines in the manuscript. - Each of the next n lines contains a string consisting of digits from 0 to 9, representing a numeric code. The length of each code will be between 1 and 20 inclusive. Output - Print a single integer — the number of unique numeric codes in the manuscript. Example Input 5 1234 4321 1234 5678 1234 Output 3","solution":"def count_unique_codes(n, codes): Returns the number of unique numeric codes in the manuscript. Parameters: n (int): The number of lines in the manuscript. codes (list): A list of strings, each representing a numeric code. Returns: int: The number of unique numeric codes. return len(set(codes))"},{"question":"Tim is trying to create a simple algorithm to solve Sudoku puzzles. In a 9x9 Sudoku puzzle, the goal is to fill the grid so that each column, each row, and each of the nine 3x3 subgrids that compose the grid contain all of the digits from 1 to 9. His algorithm needs a function that verifies if a given 9x9 grid is a valid Sudoku solution. Your task is to help Tim by writing a function that checks whether a given 9x9 grid is a valid Sudoku solution or not. The grid is represented as a list of lists, where each sublist represents a row of the Sudoku grid. -----Input----- The input consists of one 9x9 grid, where each grid element is an integer between 1 and 9, inclusive. -----Output----- Output a single line with the word \\"Valid\\" if the grid represents a valid Sudoku solution, and \\"Invalid\\" otherwise. -----Examples----- Sample Input 1: [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] Sample Output 1: Valid Sample Input 2: [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 5] ] Sample Output 2: Invalid","solution":"def is_valid_sudoku(grid): This function checks whether a given 9x9 grid is a valid Sudoku solution. def is_valid_block(block): Helper function to check if a block (row, column or subgrid) contains all digits from 1 to 9 exactly once. return sorted(block) == list(range(1, 10)) # Check each row for row in grid: if not is_valid_block(row): return \\"Invalid\\" # Check each column for col in range(9): if not is_valid_block([grid[row][col] for row in range(9)]): return \\"Invalid\\" # Check each 3x3 subgrid for i in range(0, 9, 3): for j in range(0, 9, 3): subgrid = [] for row in range(3): for col in range(3): subgrid.append(grid[i + row][j + col]) if not is_valid_block(subgrid): return \\"Invalid\\" return \\"Valid\\""},{"question":"You are given a list of integers representing the heights of buildings along a straight road. You can see any building if and only if there are no taller buildings standing between it and the beginning of the road. Your task is to determine how many buildings can be seen if you walk along the road starting from the first building to the last building. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000), where hi represents the height of the i-th building. Output Print a single integer — the number of buildings that can be seen from the start of the road. Examples Input 6 3 5 4 2 6 1 Output 3 Input 5 1 2 3 4 5 Output 5","solution":"def count_visible_buildings(heights): Returns the number of buildings that can be seen from the start of the road. if not heights: return 0 max_height = heights[0] visible_count = 1 # The first building is always visible for height in heights[1:]: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Create a function that takes a list of words and returns the longest word that can be formed using a subset of the letters provided in another string. The function should be case-insensitive and the subset should not reuse any character from the string more than its occurrences. # Input - A string consisting of letters; this string can contain both uppercase and lowercase letters. - A list of words consisting of lowercase letters only. # Output - The longest word from the list that can be formed using the letters in the string. If multiple words have the same length, return the word which appears first in the list. # Examples ```python >>> longest_word(\\"ApplE\\", [\\"apple\\", \\"plea\\", \\"ap\\", \\"ale\\"]) \'apple\' >>> longest_word(\\"abc\\", [\\"a\\", \\"ab\\", \\"abc\\", \\"d\\"]) \'abc\' ``` # Notes - The function should handle empty strings and list inputs gracefully. - Return an empty string if no words can be formed. - Consider the number of occurrences of each character in the given string while forming the words.","solution":"from collections import Counter def longest_word(letters, words): Returns the longest word that can be formed with the given letters. letters = letters.lower() letters_count = Counter(letters) def can_form_word(word): word_count = Counter(word) for char, count in word_count.items(): if letters_count[char] < count: return False return True longest = \\"\\" for word in words: if can_form_word(word) and len(word) > len(longest): longest = word return longest"},{"question":"You are given a list of integers and an integer target. Write a function to determine if there are two distinct indices i and j in the list such that the sum of the integers at those indices equals the target. Constraints * 2 ≤ length of the list ≤ 10^5 * -10^9 ≤ any integer in the list ≤ 10^9 * -10^9 ≤ target ≤ 10^9 Input The input is given from the standard input in the following format: The first line contains two integers, N and T, where N is the number of integers in the list and T is the target integer. The second line contains N integers separated by spaces. Output Print \\"YES\\" if there are two distinct indices in the list whose elements sum up to the target integer. Otherwise, print \\"NO\\". Examples Input 4 5 1 2 3 4 Output YES Input 3 9 1 4 5 Output YES Input 4 8 1 2 3 4 Output NO Input 2 -2 -1 -1 Output YES","solution":"def find_two_sum(nums, target): Determines if there are two distinct indices in the list such that the sum of the integers at those indices equals the target. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return \\"YES\\" seen[num] = i return \\"NO\\""},{"question":"John loves working with strings and regularly challenges his friends with different string manipulation tasks. Recently, he devised a new challenge: Given a string, count the number of distinct palindromic substrings present in it. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output: For each test case, output the number of distinct palindromic substrings in the string S. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 SAMPLE INPUT 2 ababa abcd SAMPLE OUTPUT 5 4 Explanation: For the string \\"ababa\\", the distinct palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". For the string \\"abcd\\", the distinct palindromic substrings are \\"a\\", \\"b\\", \\"c\\", \\"d\\".","solution":"def count_distinct_palindromic_substrings(T, test_cases): def is_palindrome(s): return s == s[::-1] results = [] for s in test_cases: palindromic_substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring = s[i:j] if is_palindrome(substring): palindromic_substrings.add(substring) results.append(len(palindromic_substrings)) return results"},{"question":"In a certain country, the government introduced a new way of identifying and categorizing official documents using a special alphanumeric code. Each code can consist of uppercase letters and digits. The validity of these codes is governed by the following rules: 1. The code must be at least 10 characters long. 2. The code must contain at least one uppercase letter. 3. The code must contain at least one digit. 4. The code must not contain any lowercase letters. 5. The code must not contain any spaces. Given a list of document codes, write a program to determine if each code is valid based on the rules mentioned above. Input format: The first line contains one integer T, denoting the number of document codes. Then T lines follow, each containing one document code consisting of uppercase letters and digits only. Output format: For each document code, print \\"VALID\\" if the code meets all the given rules. Otherwise, print \\"INVALID\\". Constraints: 1 ≤ T ≤ 100 1 ≤ length of each code ≤ 100 SAMPLE INPUT 3 A1B2C3D4E5 1234567890 ABCDEFGHIJ SAMPLE OUTPUT VALID INVALID INVALID Explanation In the first case, the code \\"A1B2C3D4E5\\" is valid because it is 10 characters long, contains at least one uppercase letter (A), contains at least one digit (1), has no lowercase letters, and has no spaces. In the second case, the code \\"1234567890\\" is invalid because it does not contain any uppercase letters. In the third case, the code \\"ABCDEFGHIJ\\" is invalid because it does not contain any digits.","solution":"def validate_document_codes(codes): This function takes a list of document codes and returns a list of strings with \\"VALID\\" or \\"INVALID\\" indicating if each code meets the specified criteria. results = [] for code in codes: if (len(code) >= 10 and any(c.isupper() for c in code) and any(c.isdigit() for c in code) and not any(c.islower() for c in code) and \' \' not in code): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"Little Alice loves playing with anagrams. An anagram of a word is a rearrangement of its letters to form another valid word. However, Alice\'s favorite game involves finding the longest common anagram between two words. You are given two words. Write a program that finds the longest common anagram that can be formed using letters from both words. If there are multiple anagrams of the same length, return the lexicographically smallest one. Input The first line contains an integer T denoting the number of test cases. Each of the next T lines contains two space-separated strings, word1 and word2, consisting of lowercase English letters. Output For each test case, print the longest common anagram. If no common anagram can be formed, print \\"No anagram\\". Constraints 1 ≤ T ≤ 1000 1 ≤ length of word1, word2 ≤ 1000 Example Input: 2 listen silent hello world Output: eilnst lo. Explanation: In the first test case, \\"listen\\" and \\"silent\\" have \'l\', \'i\', \'s\', \'t\', \'e\', \'n\' in common. Arranging these letters in lexicographically smallest order gives \\"eilnst\\". In the second test case, the longest set of common letters between \\"hello\\" and \\"world\\" forms the anagram \\"lo\\".","solution":"from collections import Counter def longest_common_anagram(word1, word2): # Count the frequency of each character in both words counter1 = Counter(word1) counter2 = Counter(word2) # Find the intersection of both counters (common letters) common_letters = counter1 & counter2 # Get all letters in lexicographical order result = \'\'.join(sorted([char * count for char, count in common_letters.items()])) if result: return result else: return \\"No anagram\\" def process_test_cases(T, test_cases): results = [] for word1, word2 in test_cases: results.append(longest_common_anagram(word1, word2)) return results"},{"question":"Objective Implement a function to perform matrix rotation. Given a square matrix `matrix` representing an image, rotate the image by 90 degrees clockwise. You need to modify the input matrix in-place. Function Signature ```python def rotate(matrix: List[List[int]]) -> None: pass ``` Parameters - `matrix` (List[List[int]]): A 2D list representing the square matrix where each element is an integer. Example Input: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate(matrix) ``` Output: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Note You need to modify the matrix in-place.","solution":"def rotate(matrix): Rotates the given n x n 2D matrix by 90 degrees clockwise in place. n = len(matrix) # First, transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Then, reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are given an array **C** of size **N** and an integer **K**. You need to find the length of the smallest subarray that contains at least **K** distinct elements. ------ Input Format ------ - First line will contain **T**, the number of test cases. Then the test cases follow. - The first line of each test case contains two integers **N** and **K**. - The second line of each test case contains **N** space-separated integers, where the **i^{th}** integer denotes **C_{i}**. ------ Output Format ------ For each test case, print a single line containing one integer — the length of the smallest subarray that contains at least **K** distinct elements. If no such subarray exists, print -1. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ N 1 ≤ C_{i} ≤ 10^{6} - Sum of N over all test cases does not exceed 5 cdot 10^{5}. ----- Sample Input 1 ------ 2 7 3 1 2 1 3 4 2 3 5 4 1 2 1 2 1 ----- Sample Output 1 ------ 3 -1 ----- Explanation 1 ------ Test Case 1: The smallest subarray that contains at least 3 distinct elements is [2, 1, 3], which has length 3. Test Case 2: There is no subarray of length 4 with 4 distinct elements since there are only 2 distinct elements in the entire array.","solution":"def smallest_subarray_k_distinct(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] C = test_cases[i][1] if len(set(C)) < K: results.append(-1) continue left = 0 right = 0 freq_map = {} distinct_count = 0 min_length = float(\'inf\') while right < N: if C[right] in freq_map: if freq_map[C[right]] == 0: distinct_count += 1 freq_map[C[right]] += 1 else: freq_map[C[right]] = 1 distinct_count += 1 while distinct_count >= K: min_length = min(min_length, right - left + 1) if freq_map[C[left]] == 1: distinct_count -= 1 freq_map[C[left]] -= 1 left += 1 right += 1 results.append(min_length) return results"},{"question":"You are working on a text processing toolkit and your task is to implement two functions to compress and decompress strings using a simple run-length encoding (RLE) algorithm. The run-length encoding is a basic form of lossless data compression in which runs of data (sequences in which the same data value occurs consecutively) are stored as a single data value and count. Compression The compression function should take a string and return the compressed version: - For each character in the string, append the character followed by the count of its consecutive occurrences. - If a character occurs only once, it should still be followed by \'1\'. Compression Example: - compress(\\"aaabbccccd\\") should return \\"a3b2c4d1\\" - compress(\\"abc\\") should return \\"a1b1c1\\" Decompression The decompression function should take a compressed string and return the original version: - Read each character and its count, and repeat the character as many times as specified by the count. Decompression Example: - decompress(\\"a3b2c4d1\\") should return \\"aaabbccccd\\" - decompress(\\"a1b1c1\\") should return \\"abc\\" Assumptions: - The input for the compression function will be a non-empty string containing only lowercase alphabetical characters. - The input for the decompression function will be a valid compressed string as produced by the compression function. Implement the compression and decompression functions: ```python def compress(s: str) -> str: # Implement compression logic here pass def decompress(s: str) -> str: # Implement decompression logic here pass # Example usage: print(compress(\\"aaabbccccd\\")) # Output: \\"a3b2c4d1\\" print(decompress(\\"a3b2c4d1\\")) # Output: \\"aaabbccccd\\" print(compress(\\"abc\\")) # Output: \\"a1b1c1\\" print(decompress(\\"a1b1c1\\")) # Output: \\"abc\\" ```","solution":"def compress(s: str) -> str: Compresses the input string using run-length encoding. Each character is followed by the count of its consecutive occurrences. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) return \'\'.join(compressed) def decompress(s: str) -> str: Decompresses the input string using run-length encoding. Each character is repeated according to the subsequent number. decompressed = [] i = 0 while i < len(s): char = s[i] count = 0 i += 1 while i < len(s) and s[i].isdigit(): count = count * 10 + int(s[i]) i += 1 decompressed.append(char * count) return \'\'.join(decompressed)"},{"question":"You are given an integer array representing the number of fruits in different baskets. You need to calculate the median number of fruits in the baskets, the sum of fruits in baskets with more than median fruits, and the unique count of fruits in all baskets. The median is defined as the middle value in a sorted list of numbers. If the list is even, it’s the average of the two middle numbers. Print the original indices of the baskets with more than median fruits in ascending order and then print the differences of the number of fruits in each basket from the median. INPUT The first line of the input contains an integer T denoting the number of test cases. Next line contains N denoting the number of baskets. The line contains N space-separated integers F1, F2, F3, ..., FN denoting the number of fruits in each basket. OUTPUT First line contains the median number of fruits and the sum of fruits in baskets having more than median fruits. Second line contains the unique count of fruits in all baskets. Next line contains original indices of baskets having more than median fruits in ascending order. Next N lines contain the differences of the number of fruits in each basket with respect to the median. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ N ≤ 50 0 ≤ Fi ≤ 200 EXAMPLE Input 1 6 3 9 2 8 5 10 Output 6.5 27 6 1 3 5 -3 2.5 -4.5 1.5 -1.5 3.5","solution":"def calculate_statistics(test_cases): For each test case calculate: 1. The median of the number of fruits in baskets 2. The sum of fruits in baskets with more than median fruits 3. The unique count of fruits in all baskets 4. The original indices of baskets having more than median fruits in ascending order 5. The differences of the number of fruits in each basket with respect to the median results = [] for case in test_cases: N = case[\'N\'] F = case[\'F\'] sorted_F = sorted(F) if N % 2 == 1: median = sorted_F[N // 2] else: median = (sorted_F[N // 2 - 1] + sorted_F[N // 2]) / 2 more_than_median_indices = [] sum_more_than_median = 0 for index, value in enumerate(F): if value > median: more_than_median_indices.append(index) sum_more_than_median += value unique_fruits_count = len(set(F)) differences = [ round(value - median, 1) for value in F ] results.append({ \'median\': median, \'sum_more_than_median\': sum_more_than_median, \'unique_fruits_count\': unique_fruits_count, \'more_than_median_indices\': more_than_median_indices, \'differences\': differences }) return results"},{"question":"Our friend John is a fruit vendor who wants to maximize his sales. He has many fruits, some of which he wants to keep fresh for longer by cooling them down. There are `n` types of fruits, each with a specific cooling factor `c` and a limit for how long it can be kept fresh after cooling, measured in days `d`. John has a cooling unit that can cool a total of `C` fruits per day, and he wants to determine the maximum number of days that any fruit can be sold fresh. Input: 1. The first line consists of two integers `n` and `C` — the number of types of fruits and the total cooling capacity per day. 2. The next `n` lines each contain two integers `cᵢ` (cooling factor) and `dᵢ` (days it can be kept fresh). Output: The maximum number of days that any fruit can be sold fresh. Constraints: 1 ≤ n ≤ 50 1 ≤ C, cᵢ, dᵢ ≤ 100 SAMPLE INPUT 3 10 3 5 2 7 5 4 SAMPLE OUTPUT 5 Explanation: In the sample input, there are 3 types of fruits with cooling factors (3, 2, 5) and corresponding days they can be kept fresh (5, 7, 4). The cooling capacity is 10 fruits per day. John should cool fruit type 1 (cooling factor 3, maximum days 5) to keep it fresh as long as possible.","solution":"def maximize_fresh_days(n, C, fruits): Given the number of types of fruits, cooling capacity per day, and the list of fruits with their cooling factors and maximum fresh days, this function returns the maximum number of days that any fruit can be sold fresh. Args: n : int : the number of types of fruits C : int : the cooling capacity per day fruits : list : a list of tuples (cᵢ, dᵢ) where cᵢ is the cooling factor, and dᵢ is the max days Returns: int : the maximum number of days any fruit can be sold fresh max_days = 0 for cooling_factor, fresh_days in fruits: if cooling_factor <= C: max_days = max(max_days, fresh_days) return max_days"},{"question":"Given an array of integers `arr` of length `N`, your task is to find the minimum number of increments or decrements needed to make all the elements of the array equal. In each operation, you can increment or decrement any element of the array by 1. ------ Input Format ------ - The first line of input contains an integer T, the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, the length of the array. - The second line of each test case contains N space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, output the minimum number of operations required to make all elements of the array equal. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} - Sum of N over all test cases does not exceed 10^{5}. - Each element of the array is within the range [-10^{9}, 10^{9}]. ----- Sample Input 1 ------ 3 3 1 2 3 4 5 5 5 5 2 -1 1 ----- Sample Output 1 ------ 2 0 2 ----- Explanation 1 ------ Test case 1: - Choose to make all elements equal to 2 (or any other integer within the range). The array changes to [2, 2, 2] with a total of 2 operations (1 increment and 1 decrement). Test case 2: - All elements are already equal, so no operations are needed. Test case 3: - Choose to make both elements 0, resulting in 2 operations (1 increment and 1 decrement).","solution":"def min_operations_to_equal_elements(arr): Given an array of integers, this function calculates the minimum number of increments or decrements needed to make all elements equal. median = sorted(arr)[len(arr) // 2] # optimal element value to minimize operations return sum(abs(x - median) for x in arr) def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(min_operations_to_equal_elements(arr)) return results"},{"question":"You are given an array of integers. Your task is to implement a function that moves all zero elements to the end of the array while maintaining the relative order of the non-zero elements. For example, given the input array `[0, 1, 0, 3, 12]`, the function should return `[1, 3, 12, 0, 0]`. #Input: A list of integers of length 1 - 1000, where each integer ranges from -1000 to 1000. #Output: A list of integers with all zero elements moved to the end. Note: - The solution should be implemented in-place, using constant extra space. - The function should maintain the relative order of the non-zero elements.","solution":"def move_zeros(nums): Moves all zeros in the list \'nums\' to the end while maintaining the order of non-zero elements. This operation is done in-place. Args: nums (list of int): The input list of integers Returns: list of int: The modified list with zeros moved to the end. last_non_zero_index = 0 for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_index] = nums[i] if last_non_zero_index != i: nums[i] = 0 last_non_zero_index += 1 return nums"},{"question":"Given an array of integers, your task is to implement a method that returns a new array where each element is the product of all other elements in the original array excluding the current element at that position. For example, for the input `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]` since 24 = 2*3*4, 12 = 1*3*4, 8 = 1*2*4, and 6 = 1*2*3. # Notes - You should not use division for this problem. - The solution should work efficiently for large arrays. - The input array will always contain at least two elements. - It is guaranteed that the product of all elements will fit in a 32-bit integer. # Example - Input: `[1, 2, 3, 4]` Output: `[24, 12, 8, 6]` - Input: `[5, 6, 2, 3]` Output: `[36, 30, 90, 60]`","solution":"def product_except_self(nums): Returns an array where each element is the product of all other elements in the original array excluding the current element at that position. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n # Fill left_products for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate the result by multiplying left_products and right_products result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Develop a function that calculates the number of distinct pairs in an array that sum up to a specific target value. Implement this in the Go programming language. # Input The first line contains an integer n (1 ≤ n ≤ 100) — the size of the array. The second line contains n integers, representing the elements of the array. The third line contains a single integer, target, which is the sum value you are checking the pairs against. Each element of the array and the target value can be any integer within the range -100 to 100. # Output Output a single integer, representing the number of distinct pairs in the array that sum up to the given target. # Examples Example 1: ``` Input 5 1 5 7 -1 5 6 Output 2 ``` **Explanation**: The pairs are (1, 5) and (7, -1). Example 2: ``` Input 4 1 1 1 1 2 Output 1 ``` **Explanation**: The only pair is (1, 1). # Constraints - Pairs must be distinct in terms of the array indices. Elements must come from different positions in the array. - You may assume that the order of operations or array does not matter as long as distinct pairs are counted correctly.","solution":"def count_distinct_pairs(array, target): Returns the number of distinct pairs in the array that sum up to the target value. pair_count = 0 seen_pairs = set() seen_elements = {} for number in array: complement = target - number if complement in seen_elements: pair = tuple(sorted((number, complement))) # Sort to avoid duplicate pairs if pair not in seen_pairs: seen_pairs.add(pair) pair_count += 1 if number in seen_elements: seen_elements[number] += 1 else: seen_elements[number] = 1 return pair_count # Example usage: # n = 5 # array = [1, 5, 7, -1, 5] # target = 6 # print(count_distinct_pairs(array, target)) # Output: 2"},{"question":"# Task In a city, delivery robots are organized in a priority-based system. There are `n` delivery robots in the system, each of which is characterized by a unique `id`, priority level `p` (a higher integer represents higher priority), and a delivery position `d`. Each robot delivers a single package from its corresponding delivery position `d` to position `d + k`, where `k` is the standard delivery increment used by all robots. The robots move according to the following rules: - The robot with the highest priority moves to deliver its package first. - Once a robot delivers its package, it vacates its position immediately. Given the priority levels and delivery positions of the robots, and the standard delivery increment `k`, determine the `id` of the robot that reaches the final position first. Note: - If two robots have the same priority, the one with the smaller `id` delivers first. - If two robots reach the final position at the same time, the one with the higher priority is considered to have arrived first. # Input - `n`: The number of robots in the system. - `1 <= n <= 100` - `robots`: A list of tuples, each containing three integers - `id`, `p`, and `d` for each robot. - `1 <= id <= 100` - `1 <= p <= 100` - `1 <= d <= 100` - `k`: The standard delivery increment used by all robots. - `1 <= k <= 100` # Output An integer representing the `id` of the robot that reaches the final position first. # Example ```python Input: n = 3 robots = [(1, 10, 3), (2, 15, 1), (3, 10, 2)] k = 5 Output: 2 Explanation: - Robot 2 has the highest priority (15) and starts from position 1. - Robots 1 and 3 have the same priority (10). - Robot 3 will deliver first among robots with the same priority because it has the smallest id. ``` # Coding Challenge Your task is to implement a function that solves the problem and produces the correct output.","solution":"def first_robot_to_finish(n, robots, k): Determines the id of the robot that reaches the final position first. Parameters: n (int): The number of robots in the system. robots (list of tuples): Each tuple contains three integers - id, priority and delivery position. k (int): The standard delivery increment used by all robots. Returns: int: The id of the robot that reaches the final position first. # Robots should be sorted by highest priority first, then by smallest id. robots.sort(key=lambda x: (-x[1], x[0])) # The first robot in the sorted list will deliver first. return robots[0][0]"},{"question":"Alex is a warehouse manager and uses robots to stack packages. Each robot can stack one package at a time. The warehouse has N robots and there are M packages to be stacked. A robot can stack a package in exactly one minute. What is the minimum number of minutes required to stack all the packages? ------ Input Format ------ - The first and only line of input contains two space-separated integers N and M — the number of robots and the number of packages, respectively. ------ Output Format ------ - Print a single integer, the minimum number of minutes required to stack all the packages. ------ Constraints ------ 1 ≤ N, M ≤ 1000 ----- Sample Input 1 ------ 5 20 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ With N = 5 robots and M = 20 packages, it takes 4 minutes to stack all packages because 5 robots can stack 5 packages per minute. Thus, 20 / 5 = 4 minutes. ----- Sample Input 2 ------ 3 10 ----- Sample Output 2 ------ 4 ----- Explanation 2 ------ With N = 3 robots and M = 10 packages, it takes 4 minutes to stack all packages because 3 robots can stack 3 packages per minute. The fourth minute will stack the remaining package making the total 10 packages.","solution":"def minimum_minutes(N, M): Returns the minimum number of minutes required to stack all the packages given N robots and M packages. Parameters: N (int): Number of robots. M (int): Number of packages. Returns: int: Minimum number of minutes required. if N >= M: return 1 # Ceiling integer division to calculate full minutes for remaining packages return (M + N - 1) // N"},{"question":"# Problem Statement Implement a function `count_connected_components(n, edges)` that determines the number of connected components in an undirected graph. Input - An integer `n` representing the number of nodes in the graph. - A list of `edges` where each edge is represented as a tuple of two integers `(u, v)` indicating an edge between nodes `u` and `v`. Output - An integer representing the number of connected components in the graph. # Function Signature `def count_connected_components(n: int, edges: List[Tuple[int, int]]) -> int:` # Example ```python assert count_connected_components(5, [(0, 1), (1, 2), (3, 4)]) == 2 assert count_connected_components(5, [(0, 1), (1, 2), (2, 3), (3, 4)]) == 1 assert count_connected_components(3, []) == 3 ``` # Explanation In the first example, there are 5 nodes and 3 edges. The edges form two connected components: `{0, 1, 2}` and `{3, 4}`. Hence, the output is 2. In the second example, all nodes are connected so there is only one connected component, hence the output is 1. In the third example, there are no edges, so each node is a separate connected component, hence the output is 3.","solution":"from typing import List, Tuple def count_connected_components(n: int, edges: List[Tuple[int, int]]) -> int: # Helper function for Depth First Search def dfs(node, visited, graph): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) # Create a graph using adjacency list graph = {i: [] for i in range(n)} for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components_count = 0 # Find connected components using DFS for node in range(n): if node not in visited: # Found a new component components_count += 1 visited.add(node) dfs(node, visited, graph) return components_count"},{"question":"Write a function to rotate the elements of a given array to the right by `k` steps, where `k` is a non-negative integer. The rotation should be done in-place and you should not use any extra array. __*Note*__: If `k` is greater than the length of the array, you should rotate the array `k % n` times where `n` is the length of the array. Example ``` Input: [1, 2, 3, 4, 5, 6, 7], k = 3 Output: [5, 6, 7, 1, 2, 3, 4] Explanation: rotate 1 steps to the right: [7, 1, 2, 3, 4, 5, 6] rotate 2 steps to the right: [6, 7, 1, 2, 3, 4, 5] rotate 3 steps to the right: [5, 6, 7, 1, 2, 3, 4] Input: [-1, -100, 3, 99], k = 2 Output: [3, 99, -1, -100] Explanation: rotate 1 steps to the right: [99, -1, -100, 3] rotate 2 steps to the right: [3, 99, -1, -100] ```","solution":"def rotate(nums, k): Rotates the elements of the list \'nums\' to the right by \'k\' steps. This is performed in-place. n = len(nums) k = k % n # In case k is greater than the length of the array nums[:] = nums[-k:] + nums[:-k]"},{"question":"Alex is participating in a treasure hunt game. There are m locations in a city, each containing some treasure. Alex can visit one location per hour. Each location has a fixed amount of treasure, which may vary. If Alex visits a location and collects the treasure, the location becomes empty, meaning Alex cannot collect treasure from the same location again. Alex starts the game at the central point (location 0), and can choose to visit any of the m locations in consecutive hours. The game lasts for h hours, and within this time, Alex aims to collect as much treasure as possible. Given the amounts of treasure at each location and the total duration of the game, help Alex determine the maximum amount of treasure he can collect. Input The first line contains two integers m (1 ≤ m ≤ 10^5) and h (1 ≤ h ≤ 10^5) — the number of treasure locations and the total game duration in hours. The second line contains m integers t_i (1 ≤ t_i ≤ 10^5) — the amount of treasure at each location. Output Print the maximum amount of treasure Alex can collect in h hours. Examples Input 4 3 100 200 300 400 Output 900 Input 5 2 10 50 20 30 60 Output 110","solution":"def max_treasure(m, h, treasures): Calculates the maximum treasure that can be collected in h hours. Parameters: m (int): Number of treasure locations. h (int): Total game duration in hours. treasures (list): List of integers representing the amount of treasure at each location. Returns: int: Maximum treasure collected in h hours. treasures.sort(reverse=True) # Sort treasures descending max_treasure_collected = sum(treasures[:h]) # Take the sum of the top \'h\' values return max_treasure_collected # Examples print(max_treasure(4, 3, [100, 200, 300, 400])) # Output: 900 print(max_treasure(5, 2, [10, 50, 20, 30, 60])) # Output: 110"},{"question":"You are tasked with organizing a relay race for a school event, where N students will run in sequential order. Each student has a certain speed, and the race must be arranged in an optimal way to ensure the average speed variance between successive runners is minimized. Given the speeds of the students, determine the minimum possible average speed variance of the optimized race sequence. Speed variance is calculated as the absolute difference in speed between two successive runners. Input: The first line contains a single integer N, the number of students. The second line contains N integers, representing the speed of each student. Output: Print the minimum possible average speed variance for the arranged race sequence. Constraints: 2 ≤ N ≤ 1000 1 ≤ Speed Value ≤ 1000 SAMPLE INPUT 4 10 8 15 12 SAMPLE OUTPUT 2 Explanation One possible optimal sequence is: 8 -> 10 -> 12 -> 15 The absolute speed differences between successive runners are: |10 - 8| = 2 |12 - 10| = 2 |15 - 12| = 3 The average speed variance: (2 + 2 + 3) / 3 = 2.333, rounded to the nearest integer leads to an output of 2.","solution":"def min_average_speed_variance(speeds): Returns the minimum possible average speed variance for the given student speeds. speeds.sort() N = len(speeds) total_variance = 0 for i in range(1, N): total_variance += abs(speeds[i] - speeds[i - 1]) min_avg_variance = total_variance // (N - 1) return min_avg_variance"},{"question":"Maria loves solving mathematical puzzles. One day she encountered a unique problem that needs your help to solve. You are given an integer array `arr` of length `n` (1 ≤ n ≤ 1000) and an integer `k`. Your task is to determine whether there are two distinct indices `i` and `j` in the array such that `arr[i] + arr[j] == k`. -----Input----- The first line of the input contains an integer `n` — the length of the array. The second line of the input contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10000) — the elements of the array. The third line of the input contains an integer `k` (1 ≤ k ≤ 20000) — the target sum. -----Output----- Print \\"YES\\" if there are two distinct indices `i` and `j` such that `arr[i] + arr[j] == k`. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 2 3 4 5 9 Output YES Input 4 1 2 3 4 8 Output NO Input 3 5 5 1 10 Output YES","solution":"def has_pair_with_sum(arr, k): Determines if there are two distinct indices in the array such that arr[i] + arr[j] == k. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" # Example usage # input data n = 5 arr = [1, 2, 3, 4, 5] k = 9 # call the function print(has_pair_with_sum(arr, k)) # Output should be \\"YES\\""},{"question":"Temperature Fluctuations Recording and analyzing temperature data is vital in understanding climate patterns and making weather predictions. You are given temperature recordings over a number of consecutive days and must determine how many days had a temperature below the median temperature of the given period. Input The input consists of multiple datasets, each in the following format. > n > t1 t2 ... tn A dataset consists of two lines. In the first line, the number of days n is given. n is an integer satisfying 1 ≤ n ≤ 10 000. In the second line, temperatures t1, t2, ... , tn are given. ti (1 ≤ i ≤ n) is the temperature recorded on the i-th day. This value is a real number between -100.0 and 100.0. The end of the input is indicated by a line containing a zero. The sum of n\'s of all the datasets does not exceed 50 000. Output For each dataset, output the number of days with recorded temperatures below the median of the temperatures over the given period. Note: For an odd number of days, the median is the middle value. For an even number of days, the median is the average of the two middle values. Sample Input 5 3.2 4.5 1.1 7.3 5.0 6 2.0 8.5 -1.2 3.3 0.0 6.8 4 10.0 20.0 30.0 40.0 0 Output for the Sample Input 2 3 2 Example Input 5 3.2 4.5 1.1 7.3 5.0 6 2.0 8.5 -1.2 3.3 0.0 6.8 4 10.0 20.0 30.0 40.0 0 Output 2 3 2","solution":"def count_days_below_median(datasets): Given a list of datasets where each dataset contains the number of days n and a list of temperatures, this function returns the number of days with recorded temperatures below the median of the temperatures over the given period. results = [] for data in datasets: n, temperatures = data if n == 0: break temperatures_sorted = sorted(temperatures) if n % 2 == 1: median = temperatures_sorted[n // 2] else: median = (temperatures_sorted[n // 2 - 1] + temperatures_sorted[n // 2]) / 2 count_below_median = sum(1 for t in temperatures if t < median) results.append(count_below_median) return results # Example usage data = [ (5, [3.2, 4.5, 1.1, 7.3, 5.0]), (6, [2.0, 8.5, -1.2, 3.3, 0.0, 6.8]), (4, [10.0, 20.0, 30.0, 40.0]), (0, []) ] print(count_days_below_median(data)) # Output should be [2, 3, 2]"},{"question":"Given is a list of N integers. Your task is to find a pair of indices (i, j) such that 0 ≤ i < j < N and the product of the elements at those indices is maximum. If multiple such pairs exist, choose the pair with the smallest i. If there is still a tie, choose the pair with the smallest j among them. Constraints * All values in input are integers. * 2 ≤ N ≤ 10^{5} * 1 ≤ A[i] ≤ 10^{6} Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print two integers, the indices i and j (0-based), representing the pair that gives the maximum product as described. Example Input 6 1 10 3 7 9 5 Output 1 4","solution":"def max_product_pair(N, A): max_i = -1 max_j = -1 max_product = -1 for i in range(N): for j in range(i + 1, N): current_product = A[i] * A[j] if (current_product > max_product or (current_product == max_product and i < max_i) or (current_product == max_product and i == max_i and j < max_j)): max_product = current_product max_i = i max_j = j return max_i, max_j"},{"question":"Yara is given a string s of length n consisting of lowercase English letters. She wants to determine if it\'s possible to rearrange the string into a palindrome. A palindrome is a word that reads the same backward as forward. For example, \\"level\\" and \\"rotor\\" are palindromes, while \\"hello\\" and \\"world\\" are not. -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases. Each test case consists of one line containing a string s (1 le |s| le 10^5). It is guaranteed that the sum of the lengths of strings over all test cases does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if it\'s possible to rearrange the string into a palindrome, and \\"NO\\" otherwise. -----Examples----- Input 4 civic ivicc hello abcdeedcba Output YES YES NO YES -----Note----- In the first test case, the string \\"civic\\" is already a palindrome. In the second test case, the string \\"ivicc\\" can be rearranged to form the palindrome \\"civic\\". In the third test case, the string \\"hello\\" cannot be rearranged to form a palindrome. In the fourth test case, the string \\"abcdeedcba\\" can be rearranged to form the palindrome \\"abcdeedcba\\" or \\"abccbaedcdea\\", among other possibilities.","solution":"def can_form_palindrome(s): Determine if a given string s can be rearranged into a palindrome. Parameters: s (str): The input string. Returns: str: \\"YES\\" if the string can be rearranged into a palindrome, \\"NO\\" otherwise. from collections import Counter count = Counter(s) odd_count = sum(1 for char in count if count[char] % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def solve_palindrome_cases(test_cases): Solve multiple test cases checking the possibility of rearranging strings into palindromes. Parameters: test_cases (list): A list of strings to be checked. Returns: list: A list of results with \\"YES\\" or \\"NO\\" for each test case. results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"Tomorrow is Clean-Up Day in your neighborhood. Everyone is expected to help clean the streets and parks. However, the mayor wants to ensure that every volunteer covers some ground without any overlap between them. The goal is to divide the neighborhood into rectangular sections, each assigned to one volunteer, so that there is no overlap, and each volunteer has their designated area to clean. You are given w by h grid representing the neighborhood and a list of k volunteers who will be assigned a rectangular section. Each volunteer should be assigned exactly one rectangular area, and these areas should not overlap. Determine if it is possible to divide the neighborhood among the volunteers satisfying the conditions. Input: The first line contains three integers: w, h, k (1 ≤ w, h ≤ 1000; 1 ≤ k ≤ 10). Each of the next k lines contains four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ w; 1 ≤ y1 ≤ y2 ≤ h), which represent the bottom-left and top-right corners of the rectangular section assigned to the i-th volunteer. Output: Output \\"YES\\" if it is possible to assign the given sections to volunteers without any overlap, otherwise \\"NO\\". Examples: Input 10 10 3 1 1 3 3 4 1 6 3 1 4 3 6 Output YES Input 10 10 3 1 1 5 5 3 3 7 7 6 6 10 10 Output NO","solution":"def can_assign_sections(w, h, k, sections): # Create a grid representing the neighborhood initialized to 0 grid = [[0] * w for _ in range(h)] for x1, y1, x2, y2 in sections: # Translate 1-based indices to 0-based for easier use with the grid x1 -= 1 y1 -= 1 x2 -= 1 y2 -= 1 # Mark the designated area in the grid for i in range(y1, y2 + 1): for j in range(x1, x2 + 1): if grid[i][j] == 1: return \\"NO\\" # Overlap found grid[i][j] = 1 return \\"YES\\" # Example input data w, h, k = 10, 10, 3 sections = [ (1, 1, 3, 3), (4, 1, 6, 3), (1, 4, 3, 6) ] print(can_assign_sections(w, h, k, sections))"},{"question":"A company has developed a unique barcode scanning system designed for warehouses. They have an array of integers, each representing the value of an item. The system can scan subsequences of these items to apply discounts based on unique item values present in the subsequence. The barcode system needs to find the maximum discount it can apply for any contiguous subsequence within this array. A discount for a subsequence is defined as the sum of its unique item values. For example, for the subsequence [3, 2, 3], the unique item values are [3, 2], so the discount is 3 + 2 = 5. Your task is to write a program that, given an array of positive integers representing item values, determines the maximum discount that can be applied for any contiguous subsequence within the array. -----Input----- The first line contains an integer t (1 le t le 10^3) — the number of test cases. Each test case begins with an integer n (1 le n le 10^5) — the number of items in the array. The second line contains n positive integers separated by spaces, representing the values of items in the warehouse (1 le text{item value} le 10^6). It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print one integer, the maximum discount that can be applied for any contiguous subsequence within the array. -----Examples----- Input 2 5 1 2 2 3 3 4 4 4 4 4 Output 6 4 -----Note----- In the first test case, the subsequence [1, 2, 2, 3] yields the unique values {1, 2, 3} and thus a discount of 1 + 2 + 3 = 6, which is the maximum possible. In the second test case, since all values are the same, the maximum possible discount is equal to the value itself, which is 4.","solution":"def max_discount(t, test_cases): results = [] for i in range(t): n, items = test_cases[i] unique_items = list(set(items)) results.append(sum(unique_items)) return results # Example usage if __name__ == \\"__main__\\": t = 2 test_cases = [ (5, [1, 2, 2, 3, 3]), (4, [4, 4, 4, 4]) ] print(max_discount(t, test_cases)) # Output: [6, 4]"},{"question":"A scientist found an alien crystal and decided to study it. The crystal has properties that allow it to absorb light energy and grow. The crystal starts at an initial size s_0. Each unit time, the crystal absorbs light energy equivalent to its current size and grows. Additionally, there are two clouds periodically obscuring the light. Each time a cloud passes, it reduces the crystal\'s size but it can never drop below zero. Initially, the crystal is of size s_0. Each second, the following sequence of events happens: the crystal absorbs light energy equal to its current size, then if a cloud passes, the crystal\'s size reduces by the size of the cloud. The sequence of cloud passes is known and the crystal is subjected to these clouds at specific times. Given the initial size of the crystal and the series of events (whether a cloud passes or not at each time unit), determine the final size of the crystal after all events have passed. -----Input----- First line contains an integer s_0 — the initial size of the crystal (0 le s_0 le 100). Second line contains an integer n — the number of time units (1 le n le 100). Third line contains n integers, where each integer is either 0 or 1 — indicating whether a cloud passes (1) or not (0) at that time unit. Fourth line contains n integers, where each integer represents the size of the cloud at that time unit (0 le text{cloud_size} le 100). -----Output----- Output a single integer — the final size of the crystal. -----Examples----- Input 3 4 0 1 0 1 2 1 0 2 Output 23 Input 10 3 1 0 1 5 0 4 Output 126 -----Note----- In the first example, initially the crystal size is 3 and it goes through 4 time units with the following events: 1. Crystal absorbs 3 units, no cloud, size becomes 6. 2. Crystal absorbs 6 units, cloud reduces by 1 (size 1), final size becomes 11. 3. Crystal absorbs 11 units, no cloud, size becomes 22. 4. Crystal absorbs 22 units, cloud reduces by 2 (size 2), final size becomes 42. In the second example, initially the crystal size is 10 and it goes through 3 time units with the following events: 1. Crystal absorbs 10 units, cloud reduces by 5, final size becomes 15. 2. Crystal absorbs 15 units, no cloud, size becomes 30. 3. Crystal absorbs 30 units, cloud reduces by 4, final size becomes 56.","solution":"def final_crystal_size(s0, n, clouds, cloud_sizes): for i in range(n): s0 *= 2 # Crystal absorbs light energy equal to its current size if clouds[i] == 1: s0 -= cloud_sizes[i] # Cloud passes, reducing crystal size if s0 < 0: s0 = 0 # Crystal size cannot drop below zero return s0 # Return the final size of the crystal"},{"question":"Given two strings S and T, your task is to find the minimum number of operations required to convert string S into string T. You can perform the following operations on string S: 1. Insert a character 2. Delete a character 3. Replace a character with another character Example 1: Input: S = \\"abcdef\\", T = \\"azced\\" Output: 3 Explanation: Convert \\"abcdef\\" into \\"azced\\" by: 1. Replacing \'b\' with \'z\' 2. Replacing \'c\' with \'c\' 3. Replacing \'e\' with \'d\' Example 2: Input: S = \\"saturday\\", T = \\"sunday\\" Output: 3 Explanation: Convert \\"saturday\\" into \\"sunday\\" by: 1. Removing \'a\' 2. Removing \'t\' 3. Replacing \'r\' with \'n\' Your Task: You don\'t need to read input or print anything. Your task is to complete the function minDistance() which takes two strings S and T as input parameters and returns an integer, the minimum number of operations required to convert S into T. Expected Time Complexity: O(|S|*|T|) Expected Space Complexity: O(|S|*|T|) Constraints: 1 <= |S|, |T| <= 100","solution":"def minDistance(S, T): Return the minimum number of operations required to convert string S to string T. :param S: str: Source string :param T: str: Target string :return: int: Minimum number of operations m, n = len(S), len(T) # Create a 2D dp array with dimensions (m+1) x (n+1) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the dp array for i in range(m + 1): dp[i][0] = i # Deleting all characters from S for j in range(n + 1): dp[0][j] = j # Inserting all characters into S # Fill the dp array for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation needed else: dp[i][j] = min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) + 1 # Replacement return dp[m][n]"},{"question":"Write a function `evenIndexedSum` that takes a list of integers and returns the sum of all integers at even indices. Example: ```python evenIndexedSum([1, 2, 3, 4, 5]) -> 9 evenIndexedSum([10, 20, 30, 40, 50, 60]) -> 90","solution":"def evenIndexedSum(lst): Returns the sum of all integers at even indices in the list. return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)"},{"question":"RK has a magical bag filled with an unlimited number of three types of objects: \\"A\\", \\"B\\", and \\"C\\". He gives you a positive integer N, and you have to determine the number of unique sequences of length N that you can create where each sequence contains at least one \\"A\\", one \\"B\\", and one \\"C\\". Sequences are considered unique if they are not equal in order of characters. Input : The first line contains the number of test cases T. Each test case consists of a single positive integer N. Output : For each test case, output the number of unique sequences that contain at least one \\"A\\", one \\"B\\", and one \\"C\\". Constraint : 1 ≤ T ≤ 100 1 ≤ N ≤ 15 SAMPLE INPUT 2 3 4 SAMPLE OUTPUT 6 36 Explanation For the first sample: All valid sequences of length 3 containing at least one \\"A\\", one \\"B\\", and one \\"C\\" are: ABC, ACB, BAC, BCA, CAB, CBA So the output is 6. For the second sample: All valid sequences of length 4 containing at least one \\"A\\", one \\"B\\", and one \\"C\\" are 36.","solution":"def calculate_sequences(N): Returns the number of unique sequences of length N containing at least one \\"A\\", one \\"B\\", and one \\"C\\". if N < 3: return 0 total_sequences = 3 ** N sequences_without_A = 2 ** N sequences_without_B = 2 ** N sequences_without_C = 2 ** N sequences_without_A_and_B = 1 ** N sequences_without_B_and_C = 1 ** N sequences_without_A_and_C = 1 ** N sequences_without_A_B_and_C = 0 ** N valid_sequences = total_sequences - (sequences_without_A + sequences_without_B + sequences_without_C) + (sequences_without_A_and_B + sequences_without_B_and_C + sequences_without_A_and_C) - sequences_without_A_B_and_C return valid_sequences def sequences_count(test_cases): result = [] for N in test_cases: result.append(calculate_sequences(N)) return result"},{"question":"Tom is a logistics manager at a warehouse, and he is responsible for coordinating the storage and retrieval of various items. Each item in the warehouse is represented by a range of unique integer IDs, and no ranges overlap. Tom needs to process a series of requests to either store a new range of IDs or query if all IDs within a given range are currently stored in the warehouse. Given the number of operations and the operations themselves, can you help Tom process them efficiently? Each operation will either be inserting a new range of IDs into the collection or checking if a given range of IDs is already present. -----Input----- The first line contains a single integer Q (1 le Q le 100000), the number of operations. Each of the next Q lines describes an operation in one of the following formats: - \\"store x y\\": Tom wants to store a new range of IDs from x to y inclusive (-10^{9} le x le y le 10^{9}). - \\"query x y\\": Tom wants to check if the IDs from x to y inclusive are all currently stored in the warehouse. Each range specification and query will guarantee that -10^{9} le x le y le 10^{9}. -----Output----- For each \\"query\\" operation, output \\"yes\\" if all IDs in the range are currently stored, and \\"no\\" otherwise. -----Examples----- Sample Input: 5 store 1 5 store 10 15 query 1 5 query 5 10 store 5 10 Sample Output: yes no","solution":"class Warehouse: def __init__(self): self.ranges = [] def store(self, x, y): Stores the range [x, y] in the warehouse. i = 0 while i < len(self.ranges): rx, ry = self.ranges[i] if y < rx - 1: break if x <= ry + 1: x = min(x, rx) y = max(y, ry) self.ranges.pop(i) else: i += 1 self.ranges.insert(i, (x, y)) def query(self, x, y): Checks if the range [x, y] is fully stored in the warehouse. for rx, ry in self.ranges: if rx <= x and y <= ry: return \\"yes\\" if ry >= x: break return \\"no\\" def process_operations(Q, operations): warehouse = Warehouse() results = [] for operation in operations: op = operation.split() if op[0] == \\"store\\": x, y = int(op[1]), int(op[2]) warehouse.store(x, y) elif op[0] == \\"query\\": x, y = int(op[1]), int(op[2]) results.append(warehouse.query(x, y)) return results"},{"question":"Given a string and a set of characters, determine the minimum window subsequence in the string which contains all the characters in the set at least once in any order. If no such window exists, return an empty string. If there are multiple minimum-length windows, return the one which appears first. Example: Input: s = \\"ADOBECODEBANC\\" t = \\"ABC\\" Output: \\"BANC\\" Explanation: The minimum window subsequence which contains the characters \'A\', \'B\', and \'C\' is \\"BANC\\". Input: - A string `s` which contains lowercase and uppercase letters. - A string `t` which contains the characters you need to include in the window. Output: - Return a string representing the minimum window subsequence in `s` that contains all characters in `t`. Your Task: Complete the function `minWindowSubseq()`, which takes the strings `s` and `t` as input and returns the required minimum window subsequence. Constraints: - 1 <= length of s, t <= 10000 - All characters of `s` and `t` are ASCII characters.","solution":"def minWindowSubseq(s, t): Finds the minimum window subsequence in the string `s` which contains all characters in the string `t`. from collections import Counter if not s or not t: return \\"\\" required = Counter(t) window_counts = {} filtered_s = [(i, char) for i, char in enumerate(s) if char in required] l, r = 0, 0 formed = 0 min_len = float(\'inf\') min_window = (None, None) while r < len(filtered_s): char = filtered_s[r][1] window_counts[char] = window_counts.get(char, 0) + 1 if window_counts[char] == required[char]: formed += 1 while l <= r and formed == len(required): start = filtered_s[l][0] end = filtered_s[r][0] if end - start + 1 < min_len: min_len = end - start + 1 min_window = (start, end) char = filtered_s[l][1] window_counts[char] -= 1 if window_counts[char] < required[char]: formed -= 1 l += 1 r += 1 if min_window[0] is None: return \\"\\" return s[min_window[0]:min_window[1] + 1]"},{"question":"You are given a string containing only lowercase alphabetical characters. You need to count the number of distinct characters in the string. -----Input:----- - A single line containing a string S. -----Output:----- Print a single integer representing the count of distinct characters in the string. -----Constraints----- - 1 leq |S| leq 100 -----Sample Input:----- hello -----Sample Output:----- 4 -----EXPLANATION:----- The string \\"hello\\" has the following distinct characters: [\'h\', \'e\', \'l\', \'o\']. Hence, the output is 4.","solution":"def count_distinct_characters(S): Returns the count of distinct characters in the string S. return len(set(S))"},{"question":"Sara loves reading books and enjoys organizing her bookshelf. She wants to rearrange the books on her shelf in a specific order. Each book has a unique height and is represented by an integer. Her goal is to sort the books in non-decreasing order of their heights, but she can only use the bubble sort technique. Your task is to determine the number of swaps Sara needs to make to sort the books. Input format: The first line of the input contains an integer t, denoting the number of test cases. Next t lines test cases follow: The first line of each test case contains an integer N, the number of books. The second line contains N space-separated integers representing the heights of the books. Output format: For each test case, output an integer, denoting the number of swaps needed to sort the books in non-decreasing order using bubble sort. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 500 1 ≤ height ≤ 1000 SAMPLE INPUT 2 5 4 3 2 1 5 4 10 20 30 40 SAMPLE OUTPUT 6 0 Explanation Case 1: We need to perform 6 swaps to sort the books: swap(4,3), swap(4,2), swap(4,1), swap(3,2), swap(3,1), and swap(2,1). Case 2: The books are already sorted, so no swaps are required. Therefore, the output is 0. Problem Setter: Your Name","solution":"def bubble_sort_swaps(heights): Returns the number of swaps needed to sort the list `heights` using bubble sort. n = len(heights) swaps = 0 for i in range(n): for j in range(0, n-i-1): if heights[j] > heights[j+1]: heights[j], heights[j+1] = heights[j+1], heights[j] swaps += 1 return swaps def number_of_swaps(t, test_cases): results = [] for i in range(t): N, heights = test_cases[i] results.append(bubble_sort_swaps(heights)) return results"},{"question":"You are given a tree with N nodes rooted at node 1. Each node has a value assigned to it. Your task is to respond to Q queries of the following two types: 1. **Update Query**: Update the value of a node. - Format: 1 X Y, where X is the node to be updated and Y is the new value to be assigned to node X. 2. **Sum Query**: Calculate the sum of values in the subtree of a node. - Format: 2 X, where X is the node whose subtree sum is to be calculated. Constraints: 1 ≤ N, Q ≤ 100000 1 ≤ Value of each node ≤ 100000 Input: First line contains two integers N and Q. Second line contains N integers representing the values of the nodes 1 through N. Next N-1 lines contain two integers U and V representing an edge between nodes U and V. Next Q lines contain queries as described above. Output: For each sum query, output the subtree sum modulo 10^9 + 7. SAMPLE INPUT 5 3 1 2 3 4 5 1 2 1 3 3 4 3 5 2 3 1 5 10 2 3 SAMPLE OUTPUT 12 17 Explanation: The tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` - For the first query `2 3`, the sum of values in subtree rooted at node 3 is 3 + 4 + 5 = 12. - For the update query `1 5 10`, the value of node 5 is updated to 10, so the new values of nodes 1 to 5 are: [1, 2, 3, 4, 10]. - For the second sum query `2 3`, the sum of values in subtree rooted at node 3 is 3 + 4 + 10 = 17.","solution":"class Tree: def __init__(self, n, values): self.n = n self.values = values self.children = [[] for _ in range(n + 1)] self.subtree_sum = [0] * (n + 1) self.MOD = 10**9 + 7 def add_edge(self, u, v): self.children[u].append(v) self.children[v].append(u) def dfs(self, node, parent): self.subtree_sum[node] = self.values[node - 1] for child in self.children[node]: if child != parent: self.dfs(child, node) self.subtree_sum[node] += self.subtree_sum[child] self.subtree_sum[node] %= self.MOD def update_value(self, x, y): diff = y - self.values[x - 1] self._update_subtree_sum(x, diff) self.values[x - 1] = y def _update_subtree_sum(self, node, diff): if node == -1: return self.subtree_sum[node] += diff self.subtree_sum[node] %= self.MOD self._update_subtree_sum(self.parents[node], diff) def preprocess(self): self.parents = [-1] * (self.n + 1) self._find_parents(1, -1) self.dfs(1, -1) def _find_parents(self, node, parent): self.parents[node] = parent for child in self.children[node]: if child != parent: self._find_parents(child, node) def get_subtree_sum(self, x): return self.subtree_sum[x] def process_queries(n, q, initial_values, edges, queries): tree = Tree(n, initial_values) for u, v in edges: tree.add_edge(u, v) tree.preprocess() results = [] for query in queries: if query[0] == 1: tree.update_value(query[1], query[2]) elif query[0] == 2: results.append(tree.get_subtree_sum(query[1])) return results"},{"question":"You are given a list of employees, each with a unique ID and their corresponding manager\'s ID, except for the CEO, who has no manager. Each employee has a unique ID greater than 1, and the CEO has an ID of 1. Your task is to find the level of each employee in the organizational hierarchy. The level of the CEO is 1. An employee who reports directly to the CEO is on level 2, their direct reports are on level 3, and so on. Implement a function that takes in a list of tuples. Each tuple contains two integers: the employee\'s ID and the manager\'s ID. Your function should return a dictionary where keys are employee IDs and values are their respective levels. -----Input------ - The first and only line of input contains an integer n (1 le n le 100) — the number of employees. - The following n lines each contain two integers: an employee ID and a manager\'s ID. -----Output----- Return a dictionary where each key is an employee ID, and each value is the level of that employee in the organizational hierarchy. -----Examples----- Input 1: 6 2 1 3 1 4 2 5 2 6 3 7 3 Output 1: { 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3 } Input 2: 4 2 1 3 1 4 2 5 3 Output 2: { 1: 1, 2: 2, 3: 2, 4: 3, 5: 3 }","solution":"def calculate_levels(n, employee_manager_pairs): from collections import defaultdict, deque # prepare a mapping of employees to their managers manager_map = {} for emp, mgr in employee_manager_pairs: manager_map[emp] = mgr # Initialize levels with CEO being level 1 levels = {1: 1} queue = deque([1]) while queue: mgr = queue.popleft() current_level = levels[mgr] for emp, manager in manager_map.items(): if manager == mgr: levels[emp] = current_level + 1 queue.append(emp) return levels"},{"question":"Santa Claus has introduced a new secret Santa gift exchange program at the North Pole. To ensure everyone receives a gift, Santa needs a system to randomize the names of the participants and assign each one a Secret Santa. However, there are a few constraints he wants to ensure: 1. No one can be their own Secret Santa. 2. The assignments should be kept as fair as possible, meaning that each participant should have an equal chance of being both a giver and a receiver. Santa has a list of participants and he wants you to write a program that produces a valid assignment of Secret Santas. -----Input----- The first line of input contains an integer n (2 le n le 100), indicating the number of participants. The following n lines each contain a unique string representing the name of a participant. The strings consist of only alphabetic characters and have a length between 1 and 50. -----Output----- Output n lines where each line contains a pair of names separated by a space. The first name in each pair is the giver and the second name is the receiver. Ensure that no participant is assigned to themselves and all participants must be used exactly once. -----Examples----- Sample Input 1: 3 Alice Bob Charlie Sample Output 1: Alice Bob Bob Charlie Charlie Alice Sample Input 2: 4 Dave Eva Frank Grace Sample Output 2: Dave Eva Eva Frank Frank Grace Grace Dave","solution":"import random def secret_santa(participants): Returns the Secret Santa assignments for the given list of participants. Args: participants (list of str): A list of participants. Returns: list of tuples: A list of tuples where each tuple is (giver, receiver). givers = participants[:] receivers = participants[:] while True: random.shuffle(receivers) valid = True for i in range(len(givers)): if givers[i] == receivers[i]: valid = False break if valid: break return list(zip(givers, receivers))"},{"question":"Create a program that reads a list of integers and outputs the length of the longest subsequence where the numbers are consecutively increasing by 1. Input The input consists of several lists of integers, one per line. Each list is terminated by a zero (0), which is not part of the list. Input ends when the only integer in a line is a zero (0). The maximum number of integers in a single list is 1000, and the integers are between 1 and 10000. Output For each list, print the length of the longest subsequence where the numbers are consecutively increasing by 1. Insert one blank line between the outputs for each list. Example Input 1 2 3 5 6 0 9 8 7 10 11 12 0 5 3 2 1 0 0 Output 3 3 1","solution":"def longest_consecutive_subsequence_length(lst): max_len = 0 current_len = 1 for i in range(1, len(lst)): if lst[i] == lst[i-1] + 1: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return max_len def process_input(input_str): result = [] lines = input_str.strip().split(\'n\') for line in lines: if line == \'0\': break numbers = list(map(int, line.split())) if numbers[-1] == 0: numbers.pop() result.append(longest_consecutive_subsequence_length(numbers)) return result"},{"question":"Given an array, reverse the array from a specified start position to a specified end position. Example 1: Input: N = 7 A[] = {1, 2, 3, 4, 5, 6, 7} start = 2 end = 5 Output: 1 2 6 5 4 3 7 Example 2: Input: N = 6 A[] = {9, 8, 7, 6, 4, 2} start = 0 end = 3 Output: 6 7 8 9 4 2 Your Task: You don\'t need to read input or print anything. Your task is to complete the function reverseSegment() which takes the array A[], its size N, and the positions start and end as inputs and modify the array in place. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1<=N<=10^{5} 0<=a[i]<=10^{5} 0<=start<=end<N","solution":"def reverseSegment(A, start, end): Reverses the segment of the array A from the start index to the end index. Parameters: A (list): The array to be modified. start (int): The starting index of the segment to be reversed. end (int): The ending index of the segment to be reversed. Returns: None: The function modifies the array in place. while start < end: A[start], A[end] = A[end], A[start] start += 1 end -= 1"},{"question":"Given a N * N square matrix A, transpose the matrix and return the transposed matrix. Example 1: Input: N = 2 A = [[1, 2], [3, 4]] Output: [[1, 3], [2, 4]] Explanation: Transposing the given 2x2 matrix results in a new matrix where rows are swapped with columns. Example 2: Input: N = 3 A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]] Explanation: Transposing the given 3x3 matrix results in a new matrix where rows are swapped with columns. Your Task: You don\'t need to read input or print anything. Your task is to complete the function transpose() which takes an integer N and a 2D matrix A[ ][ ] as input parameters and returns the transposed matrix. Expected Time Complexity: O(N*N) Expected Auxillary Space: O(N*N) Constraints: 1 ≤ N ≤ 10^{3} 0 ≤ A[i][j] ≤ 10^{6}","solution":"def transpose(N, A): Returns the transposed matrix of A. Parameters: N (int): Size of the NxN matrix A (list of list of int): The NxN matrix to transpose Returns: list of list of int: The transposed NxN matrix return [[A[j][i] for j in range(N)] for i in range(N)]"},{"question":"Write a program to help Chef keep track of his recipe ingredients. Chef has a collection of recipes, each with a defined list of ingredients and their required quantities. When planning a cooking session, Chef wants to know whether he has enough of each ingredient for a specific recipe. If he does not have enough of any ingredient, Chef should know how much more he needs. ------ Input Format ------ The first line contains the number of test cases, T. For each test case: - The first line contains an integer M representing the number of ingredients Chef has. - Each of the next M lines contains an ingredient name (a string) and the quantity Chef has (an integer). - The next line contains an integer P representing the number of ingredients required for the recipe. - Each of the next P lines contains an ingredient name (a string) and the required quantity for the recipe (an integer). ------ Output Format ------ For each test case, print \\"ENOUGH\\" if Chef has sufficient quantities of all the ingredients for the recipe, otherwise print \\"NEED\\" followed by a list of ingredients (one per line) and the additional quantities needed for each. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ M, P ≤ 20 1 ≤ quantity ≤ 100 ------ Sample Input ------ 2 3 sugar 200 flour 500 butter 100 2 sugar 150 flour 550 2 eggs 5 milk 300 3 eggs 6 milk 250 sugar 50 ------ Sample Output ------ NEED flour 50 ENOUGH","solution":"def check_ingredients(T, test_cases): results = [] for test in test_cases: available = test[\'available\'] required = test[\'required\'] needs_additional = False needs = [] for ingredient, quantity in required.items(): if ingredient not in available or available[ingredient] < quantity: needs_additional = True if ingredient not in available: needs.append((ingredient, quantity)) else: needs.append((ingredient, quantity - available[ingredient])) if needs_additional: results.append(\\"NEED\\") for need in needs: results.append(f\\"{need[0]} {need[1]}\\") else: results.append(\\"ENOUGH\\") return results"},{"question":"Given a positive integer n, write a function to determine the sum of all even-valued Fibonacci numbers that are less than or equal to n. The Fibonacci sequence starts with 1, 1, 2, 3, 5, 8, ... Example 1: Input: 10 Output: 10 Explanation: The even Fibonacci numbers less than or equal to 10 are 2 and 8. Their sum is 2 + 8 = 10. Example 2: Input: 34 Output: 44 Explanation: The even Fibonacci numbers less than or equal to 34 are 2, 8, and 34. Their sum is 2 + 8 + 34 = 44. Note: You can assume that the input n will be a positive integer.","solution":"def sum_even_fibonacci(n): Returns the sum of all even-valued Fibonacci numbers that are less than or equal to n. a, b = 1, 2 total_sum = 0 while a <= n: if a % 2 == 0: total_sum += a a, b = b, a + b return total_sum"},{"question":"A new spacecraft navigation system is being designed, which requires efficient pathfinding between planets connected by one-way travel paths. The travel paths have time durations associated with them, indicating how long the journey takes. Your task is to program a function to find the shortest time needed to travel from a starting planet to a destination planet. The planets are named using integers from `1` to `n`, and the travel paths are given in the form of a list of edges, where each edge is a tuple `(u, v, t)`, representing a one-way path from planet `u` to planet `v` that takes `t` units of time. The system needs to handle large numbers of planets and travel paths efficiently. Write a function `shortest_travel_time(n: int, edges: List[Tuple[int, int, int]], start: int, end: int) -> int` that takes the number of planets `n`, a list of travel paths `edges`, the starting planet `start`, and the destination planet `end`, and returns the shortest time needed to travel from the starting planet to the destination planet. If there is no path from the start to the end, return `-1`. -----Input----- - `n` (1 ≤ n ≤ 10^5): the number of planets. - `edges`: a list of tuples representing the travel paths `(u, v, t)` (1 ≤ u, v ≤ n; 1 ≤ t ≤ 10^5). - `start` (1 ≤ start ≤ n): the starting planet. - `end` (1 ≤ end ≤ n): the destination planet. -----Output----- Return the shortest time needed to travel from the starting planet to the destination planet, or `-1` if no such path exists. Example: Input 7 [(1, 2, 5), (1, 3, 10), (2, 4, 2), (3, 4, 1), (4, 5, 3), (5, 6, 1), (6, 7, 5)] 1 7 Output 16 Explanation: The shortest path from planet 1 to planet 7 is 1 -> 2 -> 4 -> 5 -> 6 -> 7 with a total travel time of 16 units. Note: Be sure your solution is efficient and can handle the upper limits of the input constraints.","solution":"from typing import List, Tuple import heapq def shortest_travel_time(n: int, edges: List[Tuple[int, int, int]], start: int, end: int) -> int: # Create a graph in the form of an adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, t in edges: graph[u].append((v, t)) # Use Dijkstra\'s algorithm to find the shortest path from start to end pq = [(0, start)] # priority queue to store (current travel time, current planet) distances = {i: float(\'inf\') for i in range(1, n + 1)} # distance table distances[start] = 0 while pq: current_time, current_planet = heapq.heappop(pq) # If we reached the destination planet if current_planet == end: return current_time # Explore neighboring planets for neighbor, travel_time in graph[current_planet]: new_time = current_time + travel_time # If a shorter path to the neighbor is found if new_time < distances[neighbor]: distances[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return -1 if distances[end] == float(\'inf\') else distances[end]"},{"question":"Implement a function that simulates a deposition process to form a snowflake pattern based on the following rules: 1. Start with a 2D grid filled with zeros, with a single \\"seed\\" cell in the center of the grid set to 1. 2. Iteratively drop snowflakes (represented by 1s) from random positions at the top row of the grid, one at a time. 3. Each snowflake will fall straight down until it hits the bottom of the grid or another snowflake. 4. When a snowflake lands on another snowflake, it may stick to it or slide off to the left or right depending on availability and a predefined probability. To simulate this behavior, implement the function `simulate_snowflake(grid_size: Tuple[int, int], num_snowflakes: int) -> List[List[int]]` which takes two arguments: - `grid_size`: a tuple representing the dimensions of the grid as (rows, columns). - `num_snowflakes`: an integer representing the number of snowflakes to be dropped. Return the final 2D grid with the snowflake pattern after all snowflakes have been dropped. Example: ```python grid_size = (10, 10) num_snowflakes = 25 result = simulate_snowflake(grid_size, num_snowflakes) ``` The `result` should be a 2D array showing the snowflake pattern formed by the deposited snowflakes. # Notes: - Ensure that the grid size is large enough to accommodate the falling snowflakes. - Use random functions to simulate the dropping positions, but make sure your function produces consistent results for the same input. - If a snowflake encounters a tie when sliding left or right, choose the direction randomly. - The function should handle edge cases where the grid is too small or `num_snowflakes` is very small or large appropriately.","solution":"import random def simulate_snowflake(grid_size: tuple, num_snowflakes: int) -> list: Simulates the deposition process to form a snowflake pattern on a 2D grid. Args: grid_size: A tuple (rows, columns) representing the dimensions of the grid. num_snowflakes: The number of snowflakes to be dropped. Returns: A 2D list representing the grid with the snowflake pattern. rows, columns = grid_size grid = [[0 for _ in range(columns)] for _ in range(rows)] center_x, center_y = rows // 2, columns // 2 # Seed the center of the grid grid[center_x][center_y] = 1 def drop_snowflake(col): for row in range(rows): if row == rows - 1 or grid[row + 1][col] == 1: grid[row][col] = 1 break if grid[row + 1][col] == 1: left = col > 0 and grid[row][col - 1] == 0 right = col < columns - 1 and grid[row][col + 1] == 0 if left and right: if random.choice([True, False]): grid[row][col - 1] = 1 else: grid[row][col + 1] = 1 elif left: grid[row][col - 1] = 1 elif right: grid[row][col + 1] = 1 else: grid[row][col] = 1 break for _ in range(num_snowflakes): col = random.randint(0, columns - 1) drop_snowflake(col) return grid"},{"question":"Maya is organizing a fleet of drones to deliver packages. She has a fleet of N drones, and each drone has a certain delivery range. Maya needs to maximize the number of packages delivered given that each drone can only deliver one package, and each package must be within the drone\'s delivery range. The i^{th} drone can deliver packages only in the delivery range of [R_i, D_i]. A package located at position P, which is within the inclusive range [R_i, D_i] for any drone, can be delivered by that drone. Given the positions of M packages Maya wants to deliver, determine the maximum number of packages that can be delivered by the drones. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers N and M — the number of drones and the number of packages, respectively. - The next N lines each contain two integers R_i and D_i — representing the delivery range of the i^{th} drone. - The next line contains M integers — the positions of the packages. ------ Output Format ------ For each test case, output a single integer — the maximum number of packages that can be delivered. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1000 1 ≤ R_i ≤ D_i ≤ 10^5 1 ≤ P ≤ 10^5 ------ Sample Input 1 ------ 3 3 5 1 10 15 20 30 40 5 9 30 16 25 2 3 5 10 20 25 8 3 22 4 2 2 4 6 14 10 12 20 30 7 15 ------ Sample Output 1 ------ 3 2 1 ------ Explanation 1 ------ Test case 1: - Drone 1 can deliver packages at positions 5 and 9. - Drone 2 can deliver the package at position 16. - Drone 3 can deliver the package at position 30. - Therefore, all 3 packages can be delivered. Test case 2: - Drone 1 can deliver the package at position 8. - Drone 2 can deliver the package at position 22. - Therefore, all 2 packages can be delivered. Test case 3: - Drone 1 cannot deliver any packages as the positions 7 and 15 are out of its delivery range. - Drone 2 can potentially deliver the package at position 7, but other drones, including Drone 4, can deliver more packages. - Drone 3 and Drone 4 both can deliver the package at positions 7 and 15, respectively. - Therefore, only 1 package can be delivered overall.","solution":"def max_packages_delivered(T, test_cases): results = [] for case in test_cases: N, M, drones, packages = case delivery_ranges = [(R, D) for R, D in drones] delivered_packages = 0 # Sort drones by their delivery range end points for greeded allocation of packages delivery_ranges.sort(key=lambda x: x[1]) # Visited packages used_packages = [False] * M for R, D in delivery_ranges: for i in range(M): if not used_packages[i] and R <= packages[i] <= D: delivered_packages += 1 used_packages[i] = True break results.append(delivered_packages) return results # Read input def parse_input(input_lines): index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 drones = [] for _ in range(N): R, D = map(int, input_lines[index].split()) drones.append((R, D)) index += 1 packages = list(map(int, input_lines[index].split())) index += 1 test_cases.append((N, M, drones, packages)) return T, test_cases def read_input(): import sys input_lines = sys.stdin.read().strip().split(\'n\') return parse_input(input_lines) if __name__ == \'__main__\': T, test_cases = read_input() results = max_packages_delivered(T, test_cases) for result in results: print(result)"},{"question":"Jenny is working on a project where she needs to find the shortest path in a grid. She is navigating an m x n grid where some cells are blocked and cannot be traversed. Jenny can only move up, down, left, or right. You are provided with this grid, and your task is to determine the shortest path from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1), if such a path exists. If no such path exists, return -1. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100), the dimensions of the grid. The next m lines each contain n integers, where each integer is either: - 0, indicating an open cell that can be traversed, or - 1, indicating a blocked cell that cannot be traversed. Output Print the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, print -1. Constraints 1 ≤ m, n ≤ 100 SAMPLE INPUT 4 4 0 0 0 1 1 1 0 1 0 0 0 1 1 1 0 0 SAMPLE OUTPUT 6 Explanation: The shortest path in the given grid is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,3), which has a length of 6.","solution":"from collections import deque def shortest_path_in_grid(m, n, grid): Returns the length of the shortest path from the top-left corner to the bottom-right corner of the grid. If no such path exists, returns -1. def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == 0 # Directions for up, down, left and right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS setup queue = deque([(0, 0)]) # queue with starting point visited = set((0, 0)) path_length = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() # Check if we reached the bottom-right corner if x == m - 1 and y == n - 1: return path_length # Explore all possible movements for dir_x, dir_y in directions: next_x, next_y = x + dir_x, y + dir_y if is_valid(next_x, next_y) and (next_x, next_y) not in visited: queue.append((next_x, next_y)) visited.add((next_x, next_y)) path_length += 1 return -1 # If no path is found"},{"question":"You are given a sequence of integers A = [a_1, a_2, ..., a_n] and a query sequence Q = [q_1, q_2, ..., q_m]. For each query q_i, determine the index of the first element in A that is greater than or equal to q_i. If no such element exists, return -1 for that query. Indices are 1-based. Constraints * (1 leq n leq 100,000) * (1 leq m leq 50,000) * (1 leq a_1 leq a_2 leq ... leq a_n leq 10^9) * (1 leq q_i leq 10^9) Input The input is given in the following format. (n) (a_1 ; a_2 ; ... ; a_n) (m) (q_1 ; q_2 ; ... ; q_m) Output For each query, print the 1-based index of the first element in A that is greater than or equal to q_i. If no such element exists, print -1. Print each result on a new line. Example Input 8 1 2 3 5 6 8 10 12 3 4 7 13 Output 4 6 -1","solution":"def find_first_geq_index(A, Q): For each query in Q, find the index of the first element in A that is greater than or equal to the query. Returns a list of results, where each result corresponds to a query in Q. from bisect import bisect_left results = [] for q in Q: index = bisect_left(A, q) if index < len(A): results.append(index + 1) # Convert to 1-based index else: results.append(-1) return results"},{"question":"Write a program to help Emma find the correct page number of a library book. Emma has lists containing several positive integers. For each list, you need to calculate the product of all integers in the list and then return the sum of the digits of the resulting product. **Input:** - The first line of input contains an integer `t` (1 ≤ t ≤ 500), representing the number of test cases. - For each test case: - The first line contains an integer `n` (1 ≤ n ≤ 100), representing the number of integers in the list. - The second line contains `n` integers separated by space (1 ≤ integer ≤ 10^6). **Output:** - For each test case, output a single integer, representing the sum of the digits of the product of the integers in the list. **Example:** ``` Input: 2 3 1 2 3 4 4 5 6 7 Output: 6 0 ``` **Explanation:** - For the first test case, the product of the integers is 1 * 2 * 3 = 6, and the sum of the digits is 6. - For the second test case, the product of the integers is 4 * 5 * 6 * 7 = 840, and the sum of the digits is 8 + 4 + 0 = 12.","solution":"def sum_of_digits(num): Returns the sum of the digits of a given number. return sum(int(digit) for digit in str(num)) def find_correct_page_number(test_cases): For each test case, calculates the product of all integers in the list, and then returns the sum of the digits of the resulting product. results = [] for case in test_cases: n, numbers = case product = 1 for number in numbers: product *= number results.append(sum_of_digits(product)) return results"},{"question":"Mark is learning about different sorting algorithms and wants to implement a variant called \\"Step-wise Bubble Sort\\". In this sorting method, rather than repeatedly stepping through the entire unsorted list, it operates on a specified step size that reduces over time. Initially, the step size equals the length of the list, and after each complete pass through the list, the step size reduces by one until reaching one (inclusive). At that point, it transforms into classic Bubble Sort. For each step size, the algorithm compares every element with the element at the distance of the current step size ahead. If the element is greater than the one ahead, they are swapped. This process repeats with the reduced step size until the list is sorted. Write a program that sorts an array of integers using this \\"Step-wise Bubble Sort\\". -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers A_1, A_2, dots, A_N. -----Output----- For each test case, print a single line containing the sorted array elements in ascending order. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - -1000 le A_i le 1000 for each valid i -----Example Input----- 2 5 34 7 23 32 5 4 3 1 -14 8 -----Example Output----- 5 7 23 32 34 -14 1 3 8 -----Explanation----- For Test Case 1, the sorting process would proceed as follows: - Initial pass with step size 5: no swaps - Step size 4: no swaps - Step size 3: swaps 34 and 23 to get [23, 7, 34, 32, 5]; swaps 7 and 5 to get [23, 5, 34, 32, 7] - Step size 2: swaps 23 and 34 to get [34, 5, 23, 32, 7]; swaps 5 and 32 to get [34, 32, 23, 5, 7] - Finally, using classic Bubble Sort (step size 1) ensures the array is completely sorted as [5, 7, 23, 32, 34] Test Case 2 undergoes a similar process to reach the sorted array [-14, 1, 3, 8].","solution":"def stepwise_bubble_sort(A): Step-wise Bubble Sort implementation. N = len(A) for step in range(N, 0, -1): for i in range(N - step): if A[i] > A[i + step]: A[i], A[i + step] = A[i + step], A[i] # After reducing step size to 1, it transforms to classic Bubble Sort for step in range(N-1, 0, -1): for i in range(step): if A[i] > A[i + 1]: A[i], A[i + 1] = A[i + 1], A[i] return A def process_test_cases(T, test_cases): Process multiple test cases. results = [] for N, A in test_cases: sorted_array = stepwise_bubble_sort(A) results.append(sorted_array) return results"},{"question":"Given a list of integers representing the daily temperatures for a week in degrees Celsius, and another integer value representing a target temperature, write a function to find the closest temperature to the target in the list. If there are two temperatures equally close to the target, return the lower temperature. Example 1: Input: temperatures = [25, 28, 31, 22, 26, 27, 29] target = 24 Output: 25 Explanation: The temperature closest to the target 24 is 25. Example 2: Input: temperatures = [15, 20, 35, 10, 25, 30, 27] target = 28 Output: 27 Explanation: The temperature closest to the target 28 is 27. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findClosestTemperature() which takes temperatures[] and target as input parameters and returns the closest temperature to the target. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - The size of the temperatures list is 7 (since it covers a week). - -50 <= temperatures[i] <= 50 - -50 <= target <= 50","solution":"def findClosestTemperature(temperatures, target): Return the temperature closest to the target. If there are two temperatures equally close, return the lower one. closest_temp = temperatures[0] min_diff = abs(target - closest_temp) for temp in temperatures[1:]: current_diff = abs(target - temp) if current_diff < min_diff or (current_diff == min_diff and temp < closest_temp): min_diff = current_diff closest_temp = temp return closest_temp"},{"question":"Ali Baba and the 40 Thieves Ali Baba has stumbled upon a treasure hoard in a cave, where he finds a variety of precious stones. Each stone has a value assigned to it, and Ali Baba wants to collect the most valuable combination of stones without exceeding a given weight limit. You need to help Ali Baba figure out the maximum value of stones he can collect. The function should calculate the maximum possible value given a list of stone weights, their corresponding values, and a maximum weight limit Ali Baba can carry. Input - The first line contains T - the number of test cases. Each test case starts with a line containing two integers N and W - the number of different stones and the maximum weight Ali Baba can carry, respectively. The next N lines each contain two integers wi and vi - the weight and value of the i-th stone. Output - For each test case, print the maximum value of stones Ali Baba can collect. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ wi, vi ≤ 100 Example Input 1 3 50 10 60 20 100 30 120 Example Output 220 Explanation Ali Baba can take the stones with weights 20 and 30, which gives him the highest value of 100 + 120 = 220.","solution":"def max_value_stones(T, test_cases): def knapsack(N, W, weights, values): dp = [0] * (W + 1) for i in range(N): for w in range(W, weights[i] - 1, -1): dp[w] = max(dp[w], dp[w - weights[i]] + values[i]) return dp[W] results = [] for case in test_cases: N, W, stones = case weights = [stone[0] for stone in stones] values = [stone[1] for stone in stones] results.append(knapsack(N, W, weights, values)) return results"},{"question":"Let\'s create an additional question based on the given guidelines. You are working on a travel agency system where clients can book holidays to different locations. Each client has specific preferences for their holiday destination (with ratings for different aspects like the weather, activities, and cost). You need to determine whether a given set of clients can all be satisfied based on the available travel packages. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of clients. The next n lines each contain x integers. Each integer represents a rating between 1 and 10. The i-th line describes the preferences of the i-th client (client i has a preference rating on x aspects). The following line contains an integer m (1 ≤ m ≤ 1000) — the number of available travel packages. The next m lines each contain x integers. Each integer represents a rating between 1 and 10. The j-th line describes the travel package j\'s rating on the same x aspects. -----Output----- Output \\"YES\\" if it\'s possible to assign each client a different travel package that matches or exceeds their preferences. Otherwise, output \\"NO\\". -----Examples----- Input 2 5 7 9 3 6 8 3 8 9 10 6 7 8 5 6 9 Output YES Input 3 4 8 6 5 6 9 3 8 7 2 6 9 7 7 7 6 Output NO Input 2 1 1 1 10 10 10 2 1 1 1 10 10 10 Output YES -----Note----- In example 1, all clients can be satisfied using different travel packages as each package meets or exceeds the preference ratings of the clients. In example 2, there are not enough travel packages to satisfy all clients. In example 3, even though the preferences and packages are at the extreme ends, each client can still be perfectly matched to a travel package.","solution":"def can_all_clients_be_satisfied(n, client_preferences, m, travel_packages): Determines if each client can be satisfied with a unique travel package. :param n: int, number of clients :param client_preferences: List of lists, each sublist contains preferences of a client :param m: int, number of travel packages :param travel_packages: List of lists, each sublist contains aspects ratings of a travel package :return: str, \\"YES\\" if all clients can be satisfied with different travel packages, otherwise \\"NO\\" from itertools import permutations # Try every permutation of travel packages for the clients for perm in permutations(travel_packages, n): if all(all(perm[j][k] >= client_preferences[j][k] for k in range(len(client_preferences[j]))) for j in range(n)): return \\"YES\\" return \\"NO\\" # Function to handle input format and call the main logic function def main(data: str) -> str: lines = data.strip().split(\'n\') n = int(lines[0]) client_preferences = [list(map(int, lines[i + 1].split())) for i in range(n)] m = int(lines[n + 1]) travel_packages = [list(map(int, lines[i + n + 2].split())) for i in range(m)] return can_all_clients_be_satisfied(n, client_preferences, m, travel_packages)"},{"question":"Imagine you are working with a system of connected computers in a network. Each computer needs periodic updates and these updates can be transmitted from one computer to another directly if there is a direct cable connection between them. However, setting up direct cable connections between every pair of computers is not efficient. The task now is to ensure that updates can be sent from any node to any other node, possibly through other nodes. This can be achieved with the fewest number of connections. Essentially, the challenge is to determine the minimum number of additional direct connections required to make the network fully connected. For this problem, we can model the network as an undirected graph where nodes represent computers and edges represent the current direct connections. Your goal is to calculate the minimum number of edges required to make the graph fully connected. Constraints - n ≤ 100 (number of nodes) - m ≤ 200 (number of edges) Input The input has several test cases. Each test case consists of the number of nodes, n, and the number of edges, m, in the first line. The following m lines provide the pairs of nodes that have a direct connection. The input terminates with a line containing two zeros. The number of test cases is less than 20. Output For each test case, output the minimum number of additional edges required to make the network fully connected. Example Input 5 3 0 1 1 2 3 4 7 5 0 1 1 2 2 3 4 5 5 6 0 0 Output 1 1","solution":"def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def connected_components(n, edges): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) for edge in edges: x = find_parent(parent, edge[0]) y = find_parent(parent, edge[1]) if x != y: union(parent, rank, x, y) component_sets = set() for node in range(n): component_sets.add(find_parent(parent, node)) return len(component_sets) def min_connections_to_make_connected(n, edges): if n <= 1 or connected_components(n, edges) == 1: return 0 num_components = connected_components(n, edges) return num_components - 1 def process_input(input_str): input_lines = input_str.strip().split(\'n\') results = [] i = 0 while i < len(input_lines): n, m = map(int, input_lines[i].split()) if n == 0 and m == 0: break edges = [] for j in range(m): u, v = map(int, input_lines[i + j + 1].split()) edges.append((u, v)) results.append(min_connections_to_make_connected(n, edges)) i += m + 1 return results"},{"question":"You are given a sequence b_1, b_2, ldots, b_n. The task is to answer the following types of queries on it: Type 1. Given three integers boldsymbol{l}, boldsymbol{r}, and boldsymbol{x} (1 leq l leq r leq n), add the integer x to every element in the subarray [l, r]. Type 2. Given two integers boldsymbol{l} and boldsymbol{r} (1 leq l leq r leq n), find the maximum value in the subarray [l, r]. Input Format The first line contains two integers n and textit{q}. The second line contains n integers b_1, b_2, ldots, b_n, denoting the initial sequence. Each of the next textit{q} lines contains either three integers 1, l_i, r_i, x_i, where the first integer denotes the type of the query (type 1) followed by l_i, r_i, and x_i, or two integers 2, l_i, r_i, where the first integer denotes the type of the query (type 2) followed by l_i and r_i. Constraints 1 leq n leq 2 times 10^5 1 leq q leq 2 times 10^5 1 leq b_i leq 10^6 1 leq l_i leq r_i leq n 1 leq x_i leq 10^4 Output Format For each query of the second type, print the maximum value in the specified subarray. Sample Input 6 5 3 1 4 1 5 9 1 2 4 2 2 1 3 1 3 6 1 2 2 6 2 4 4 Sample Output 5 10 6 Explanation After the first query, the sequence becomes [3, 3, 6, 3, 5, 9]. After the second query, the maximum value in the subarray [1, 3] is 6. After the third query, the sequence becomes [3, 3, 7, 4, 6, 10]. After the fourth query, the maximum value in the subarray [2, 6] is 10, and after the final query, the maximum value in the subarray [4, 4] is 4.","solution":"def process_queries(n, q, b, queries): results = [] for query in queries: if query[0] == 1: l, r, x = query[1] - 1, query[2] - 1, query[3] for i in range(l, r + 1): b[i] += x elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 max_value = max(b[l:r + 1]) results.append(max_value) return results"},{"question":"You are given a list of integers representing the daily temperatures. You need to find the number of days you would have to wait until a warmer temperature. If there is no future day for which a warmer temperature is possible, put 0 instead. Write a function that, given a list of daily temperatures, returns a list of numbers representing the number of days you would have to wait until a warmer temperature. Input Format: The input consists of a single line with a list of integers separated by spaces, where each integer represents the temperature of a day. Output Format: Output a single line with a list of integers separated by spaces, where each integer represents the number of days you would have to wait until a warmer temperature. Constraints: 1 <= |temperatures| <= 100 -100 <= temperatures[i] <= 100 Sample Input: 73 74 75 71 69 72 76 73 Sample Output: 1 1 4 2 1 1 0 0 Explanation: - For the first temperature 73, you have to wait 1 day until 74. - For the temperature 74, you have to wait another day until 75. - For the temperature 75, you have to wait 4 days until 76. - For the temperature 71, you have to wait 2 days until 72. - For the temperature 69, you have to wait 1 day until 72. - For the temperature 72, you have to wait 1 day until 76. - For the temperature 76, there is no future day with a warmer temperature. - For the temperature 73, there is no future day with a warmer temperature.","solution":"def daily_temperatures(temperatures): n = len(temperatures) answer = [0] * n stack = [] for i, temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < temp: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"Write a function that takes a string, which contains a mix of words and digits, and returns the string with all the words reversed, while keeping the digits in their original positions. The words and digits are separated by spaces. Examples ```python reverse_words(\\"hello 123 world 456\\") # returns \\"olleh 123 dlrow 456\\" reverse_words(\\"code 34 along 78 developers\\") # returns \\"edoc 34 gnola 78 srepoleved\\" ``` Complete the function with an appropriate signature to reverse the words in a string as described.","solution":"def reverse_words(s): This function takes a string containing a mix of words and digits, and returns the string with all the words reversed while keeping the digits in their original positions. The words and digits are separated by spaces. parts = s.split() reversed_parts = [part[::-1] if part.isalpha() else part for part in parts] return \' \'.join(reversed_parts)"},{"question":"You are given a sequence of n integers where each integer is between 1 to n, inclusive. Each integer represents the color of a ball in a row of n balls. The goal is to partition this row into the smallest possible number of contiguous subarrays such that each subarray contains all colors from 1 to k exactly once. Determine the minimum number of contiguous subarrays into which the row of balls can be partitioned. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 200,000) — the length of the sequence and the number of unique colors. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ k), where ai is the color of the ith ball. Output Print the minimum number of contiguous subarrays that satisfy the stated conditions. Examples Input 10 3 1 3 2 1 2 3 1 3 2 1 Output 3 Input 6 2 2 1 2 1 2 1 Output 3 Note In the first example, one possible partition is [1, 3, 2], [1, 2, 3], [1, 3, 2, 1]. Each subarray contains each color from 1 to 3 exactly once, and the total number of subarrays is 3. In the second example, the only possible partition is [2, 1], [2, 1], [2, 1]. Each subarray contains each color from 1 to 2 exactly once, and the total number of subarrays is 3.","solution":"def min_subarrays_to_partition(n, k, colors): Determine the minimum number of contiguous subarrays such that each subarray contains all colors from 1 to k exactly once. Parameters: n (int): Length of the sequence. k (int): Number of unique colors. colors (List[int]): Sequence of colors. Returns: int: Minimum number of contiguous subarrays. count = 0 required_colors = set(range(1, k + 1)) current_colors = set() for color in colors: current_colors.add(color) if current_colors == required_colors: count += 1 current_colors = set() return count"},{"question":"A city has n electric stations and m power lines connecting them. Each power line has a certain capacity c, representing the maximum amount of electricity that can flow through the power line. The goal is to determine the maximum amount of electricity that can be sent from station s to station t. You are given n, m, s, t and the list of power lines. Each power line is described by three integers u, v, c representing a power line between stations u and v with a capacity of c. Input The first line of input contains four integers n (2 ≤ n ≤ 1000), m (1 ≤ m ≤ 5000), s, and t (1 ≤ s, t ≤ n) — the number of stations, the number of power lines, and the indices of the source station and the target station, respectively. The following m lines each contain three integers u, v, c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000) describing a power line between stations u and v with a capacity of c. It is guaranteed that there exists at least one path from s to t. Output Output a single integer — the maximum amount of electricity that can be sent from station s to station t. Examples Input 4 5 1 4 1 2 100 1 3 50 2 3 50 2 4 50 3 4 50 Output 100 Input 6 7 1 6 1 2 100 1 3 50 2 4 100 3 4 50 2 5 50 4 6 75 5 6 50 Output 125 Note In the first example, the maximum capacity path from station 1 to station 4 utilizes the lines (1 -> 2 -> 4) with a total capacity of 100. In the second example, the maximum capacity path requires combining multiple power lines and splitting the electricity flow, resulting in a total transfer capacity of 125.","solution":"from collections import deque def bfs_capacity(capacity, source, sink, parent): visited = [False] * len(capacity) queue = deque([source]) visited[source] = True while queue: node = queue.popleft() for adj, cap in enumerate(capacity[node]): if not visited[adj] and cap > 0: queue.append(adj) visited[adj] = True parent[adj] = node if adj == sink: return True return False def edmonds_karp(n, edges, source, sink): capacity = [[0] * n for _ in range(n)] for u, v, c in edges: capacity[u-1][v-1] += c capacity[v-1][u-1] += c # Comment this line if the graph is directed parent = [-1] * n max_flow = 0 while bfs_capacity(capacity, source-1, sink-1, parent): path_flow = float(\'Inf\') s = sink - 1 while s != source - 1: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] max_flow += path_flow v = sink - 1 while v != source - 1: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] return max_flow def maximum_electricity(n, m, s, t, edges): return edmonds_karp(n, edges, s, t)"},{"question":"Design a function that takes a string representing a list of space-separated integers and sorts the list in alternating ascending and descending order starting with ascending order. For example, given the input `3 1 2 5 4`, your function should return the string `1 4 2 5 3`. The function should handle input where: - Each integer is in the range of -100 to 100. - The input string contains at least one integer. - The sequence is implemented as space-separated integers. Your solution should have a time complexity of O(n log n) due to the need to sort the input list. Ensure the function returns the resulting list as a space-separated string.","solution":"def alternate_sort(s): Returns a list of space-separated integers sorted in alternating ascending and descending order starting with ascending order. # Convert string to list of integers numbers = list(map(int, s.split())) # Sort the numbers numbers.sort() # Initialize two pointers at the start and end of the sorted list start, end = 0, len(numbers) - 1 result = [] # Alternate appending the smallest and largest elements from the sorted list while start <= end: if start <= end: result.append(numbers[start]) start += 1 if start <= end: result.append(numbers[end]) end -= 1 # Convert the result list back to a space-separated string return \' \'.join(map(str, result))"},{"question":"A determined climber is starting their hike at the base of a mountain where the altitude is 0. The climber can take either an \\"U\\" step, which increases their altitude by 1, or a \\"D\\" step, which decreases their altitude by 1. The sequence of steps the climber takes is represented by a string S. Calculate the climber\'s final altitude after taking all the steps described in the string S. -----Constraints----- - The length of S is between 1 and 1000. - Each character in S is either \\"U\\" (up) or \\"D\\" (down). -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the climber\'s final altitude after taking all the steps. -----Sample Input----- UUDDU -----Sample Output----- 1 - Initially, the altitude is 0. - The first step is \\"U\\". After taking it, the altitude becomes 1. - The second step is \\"U\\". After taking it, the altitude becomes 2. - The third step is \\"D\\". After taking it, the altitude becomes 1. - The fourth step is \\"D\\". After taking it, the altitude becomes 0. - The fifth step is \\"U\\". After taking it, the altitude becomes 1. Thus, the climber\'s final altitude after all steps is 1.","solution":"def calculate_final_altitude(S): Calculate the final altitude of the climber after taking all the steps in string S. Parameters: S (str): A string representing the sequence of steps, where \'U\' means up and \'D\' means down. Returns: int: The final altitude. altitude = 0 for step in S: if step == \'U\': altitude += 1 elif step == \'D\': altitude -= 1 return altitude"},{"question":"Alice is playing a game with a sequence of n integers b = b_1, b_2, ..., b_n. The game consists of k rounds, and in each round, she can choose any subsequence of the current sequence and perform one of the following operations: 1. Increase every element of the subsequence by 1. 2. Decrease every element of the subsequence by 1. Alice\'s goal is to make all elements of the sequence equal using exactly k rounds. Given the initial sequence and the number of rounds, determine if Alice can achieve her goal. -----Input----- The first line contains integers n and k (1 ≤ n ≤ 2·10^5, 1 ≤ k ≤ 2·10^5). The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 1000). -----Output----- Print \\"YES\\" if Alice can make all elements of the sequence equal in exactly k rounds. Otherwise, print \\"NO\\". -----Examples----- Input 5 2 2 2 1 3 3 Output YES Input 4 1 2 2 2 2 Output NO","solution":"def can_make_elements_equal(n, k, b): Determine if it\'s possible to make all the elements of the sequence equal in exactly k rounds. Args: - n: int, number of elements in the sequence. - k: int, number of rounds. - b: list of int, the sequence of numbers. Returns: - str, \\"YES\\" if possible, \\"NO\\" otherwise. max_b = max(b) min_b = min(b) # The maximum number of operations needed to make all elements equal # is the difference between the max and min of the sequence. difference = max_b - min_b # If k is greater than or equal to the difference and the parity (odd/even) of k and the difference are the same, return \\"YES\\" if k >= difference and (k - difference) % 2 == 0: return \\"YES\\" return \\"NO\\""},{"question":"A group of students are interested in forming study pairs for their programming practice. Given an array of student skill levels, the instructor wants to form pairs such that each pair\'s skill level difference is minimized to encourage effective peer learning. The instructor also notes that pair formation is not necessarily one-to-one, meaning if there is an odd number of students, one student will be left unpaired. Each student has a unique skill level, represented by a unique integer value in the array. Your task is to determine the optimal pairs such that the maximum skill level difference among all pairs is minimized. Input - The first line contains an integer, n (1 ≤ n ≤ 100), the number of students. - The second line contains n integers, representing the skill levels of the students. Output - On the first line, print the minimum possible maximum skill difference in any pair. - On the next lines, print the pairs of students. Each pair should be on a new line and represented as two integers corresponding to their skill levels. Order of pairs does not matter. If there are multiple solutions with the same minimum possible maximum skill difference, print any of them. Examples Input 5 10 20 30 40 50 Output 10 10 20 30 40 Input 6 4 9 1 14 7 10 Output 2 4 1 7 9 10 14","solution":"def minimize_max_diff(n, skill_levels): sorted_skills = sorted(skill_levels) pairs = [] min_max_diff = float(\'inf\') for i in range(1, n, 2): curr_diff = sorted_skills[i] - sorted_skills[i - 1] min_max_diff = min(min_max_diff, curr_diff) pairs.append((sorted_skills[i - 1], sorted_skills[i])) return min_max_diff, pairs"},{"question":"Design and implement a `StringManipulator` class that provides the following functionalities: 1. **Reverse String**: A function `reverse_string(s: str) -> str` that takes a string `s` and returns the reverse of the string. 2. **Count Vowels and Consonants**: A function `count_vowels_consonants(s: str) -> Tuple[int, int]` that takes a string `s` and returns a tuple `(vowel_count, consonant_count)` representing the number of vowels and consonants in the string, respectively. Assume the string contains only alphabets and ignore case. 3. **Is Palindrome**: A function `is_palindrome(s: str) -> bool` that checks if the given string `s` is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same forward and backward (ignoring spaces, punctuation, and capitalization). **Constraints**: - The input strings will have a maximum length of 1000 characters. - For the palindrome check, treat the string as case-insensitive and ignore non-alphabetic characters. **Sample Usage**: ```python sm = StringManipulator() print(sm.reverse_string(\\"Hello World!\\")) # Output: !dlroW olleH print(sm.count_vowels_consonants(\\"Hello World!\\")) # Output: (3, 7) print(sm.is_palindrome(\\"A man, a plan, a canal, Panama\\")) # Output: True ```","solution":"from typing import Tuple class StringManipulator: def reverse_string(self, s: str) -> str: Returns the reverse of the string s. return s[::-1] def count_vowels_consonants(self, s: str) -> Tuple[int, int]: Returns a tuple representing the number of vowels and consonants in the string s. vowels = set(\\"aeiouAEIOU\\") vowel_count = sum(1 for char in s if char in vowels) consonant_count = sum(1 for char in s if char.isalpha() and char not in vowels) return vowel_count, consonant_count def is_palindrome(self, s: str) -> bool: Checks if the string s is a palindrome, ignoring cases and non-alphabetic characters. # Filter only alphabetic characters and convert them to lower case filtered_s = \\"\\".join(char.lower() for char in s if char.isalpha()) return filtered_s == filtered_s[::-1]"},{"question":"A social media platform keeps track of user posts and their engagement in terms of likes and comments. For each day, the platform logs the number of likes and comments received on each post. Your task is to determine which post received the highest combined engagement (likes + comments) for given days. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first line of each test case contains a single integer N, the number of posts for that day. - The next N lines for each test case contain two space-separated integers L and C — the number of likes and comments each post received. ------ Output Format ------ For each test case, output on a new line the 1-based index of the post with the highest combined engagement. If there are multiple posts with the same highest engagement, output the smallest index. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1,000 0 ≤ L, C ≤ 10^6 ----- Sample Input 1 ------ 2 3 10 5 7 8 15 3 4 1 1 1 4 2 1 3 2 ----- Sample Output 1 ------ 1 4 ----- Explanation 1 ------ Test case 1: The engagement values for the posts are 15, 15, and 18. The highest engagement is 18 (from the third post). Test case 2: The engagement values for the posts are 2, 5, 3, and 5. The highest engagement is 5 (from the second and fourth posts). Since we need the smallest index, the answer is the fourth post.","solution":"def highest_engagement_post(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] posts = test_cases[i][1] max_engagement = -1 max_index = 0 for j in range(N): current_engagement = posts[j][0] + posts[j][1] if current_engagement > max_engagement: max_engagement = current_engagement max_index = j + 1 elif current_engagement == max_engagement and j + 1 < max_index: max_index = j + 1 results.append(max_index) return results # Example usage: # T = 2 # test_cases = [ # (3, [(10, 5), (7, 8), (15, 3)]), # (4, [(1, 1), (1, 4), (2, 1), (3, 2)]) # ] # print(highest_engagement_post(T, test_cases)) # Output: [3, 2]"},{"question":"# Problem Statement You are given a sequence of positive integers. Your task is to determine the total count of pairs (i, j) such that i < j and the sum of the i-th and j-th elements in the sequence is an even number. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. -----Output----- Output a single integer — the number of pairs with an even sum. -----Examples----- Input 5 1 2 3 4 5 Output 6 Input 4 2 4 6 8 Output 6 # Explanation of Examples **Example 1:** Pairs with an even sum are: - (1, 3) - (1, 5) - (2, 4) - (2, 6) - (3, 5) - (4, 5) **Example 2:** Pairs with an even sum are: - (2, 4) - (2, 6) - (2, 8) - (4, 6) - (4, 8) - (6, 8)","solution":"def count_even_sum_pairs(n, sequence): Counts the number of pairs (i, j) such that i < j and the sum of the i-th and j-th elements in the sequence is an even number. Parameters: n (int): Number of elements in the sequence. sequence (list of int): The sequence of integers. Returns: int: Number of pairs with an even sum. even_count = sum(1 for x in sequence if x % 2 == 0) odd_count = n - even_count return even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2"},{"question":"You are given a list of dictionaries, where each dictionary represents an item in a store with information about its name, type, and price. Your task is to calculate the total price of all items of a specific type. The function should take two parameters: the list of items and the type of items to sum up the prices for. Here is an example of the list: ```python items = [ {\\"name\\": \\"apple\\", \\"type\\": \\"fruit\\", \\"price\\": 1.2}, {\\"name\\": \\"banana\\", \\"type\\": \\"fruit\\", \\"price\\": 0.5}, {\\"name\\": \\"carrot\\", \\"type\\": \\"vegetable\\", \\"price\\": 0.7}, {\\"name\\": \\"kale\\", \\"type\\": \\"vegetable\\", \\"price\\": 2.5}, {\\"name\\": \\"milk\\", \\"type\\": \\"dairy\\", \\"price\\": 1.5} ] ``` Given the type of \\"fruit\\", the function should return 1.2 + 0.5 = 1.7. Your function implementation should look like this: ```python def total_price(items, item_type): # Your code here ``` And calling the function should work like this: ```python print(total_price(items, \'fruit\')) # should return 1.7 ```","solution":"def total_price(items, item_type): Calculate the total price of all items of a specific type. :param items: List of dictionaries, where each dictionary has keys \\"name\\", \\"type\\", and \\"price\\". :param item_type: The type of items to sum up the prices for. :return: The total price of all items of the provided type. return sum(item[\'price\'] for item in items if item[\'type\'] == item_type)"},{"question":"You are given a sequence of n integers. Let\'s call a sequence ai, ai + 1, ..., aj (1 ≤ i ≤ j ≤ n) a subarray of the sequence a. Your task is to find the length of the longest subarray of a such that the difference between any two consecutive elements in this subarray is at most k. Input The first line contains two integers, n (1 ≤ n ≤ 105) and k (0 ≤ k ≤ 109). The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109). Output In a single line print the length of the longest subarray where the difference between any two consecutive elements is at most k. Examples Input 7 2 1 2 3 7 8 12 10 Output 3 Note You can choose the subarray a1, a2, a3 which are 1, 2, and 3. The difference between any two consecutive elements is at most 2.","solution":"def longest_subarray_length(n, k, array): max_length = 1 current_length = 1 for i in range(1, n): if abs(array[i] - array[i - 1]) <= k: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a futuristic city, there is a grid-like street map where each cell represents a block. Each block can be either a building or an empty space. The city planning committee wants to determine if it\'s possible to build a straight road from the northernmost edge to the southernmost edge, passing only through empty spaces. The road must be oriented vertically, meaning it must continually move straight downward from some cell on the northernmost edge to some cell on the southernmost edge. Your task is to check whether such a path exists in the given city grid. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100), representing the number of rows and columns of the grid, respectively. The next m lines each contain n characters, where each character is either \'.\' (representing an empty space) or \'#\' (representing a building). Output Print \\"YES\\" if a vertical road from the northernmost edge to the southernmost edge is possible, otherwise print \\"NO\\". Examples Input 3 3 .#. .#. .#. Output YES Input 4 4 .... ..#. .... .#.. Output YES Input 3 4 .#.. .#.# Output NO","solution":"def can_build_road(m, n, grid): Determine if a vertical road from the northernmost edge to the southernmost edge is possible. for c in range(n): if grid[0][c] == \'.\': possible = True for r in range(1, m): if grid[r][c] == \'#\': possible = False break if possible: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers representing the score of each player in a video game. Each player plays a single round and the highest score wins. The scores are not necessarily unique, and multiple players may end up with the same score. However, any player who wins will share the first place. Your task is to determine the number of first-place (top) players based on their scores. Example 1: Input: scores = [85, 90, 78, 90, 88] Output: 2 Explanation: The highest score is 90 and is achieved by two players. Example 2: Input: scores = [77, 68, 55, 77, 70, 77] Output: 3 Explanation: The highest score is 77 and is achieved by three players. Example 3: Input: scores = [50, 65, 80, 99, 45, 99, 78] Output: 2 Explanation: The highest score is 99 and is achieved by two players. Note: 1 <= scores.length <= 10^5 0 <= scores[i] <= 10^6","solution":"def count_top_scorers(scores): Returns the number of players who have the highest score. Args: scores (List[int]): A list of integers representing the scores of players. Returns: int: The number of players who have the highest score. if not scores: return 0 highest_score = max(scores) return scores.count(highest_score)"},{"question":"A warehouse management system needs a feature to track the maximum length of time an item can be borrowed. Each item can be borrowed and returned multiple times, and we want to find the item which has been borrowed for the longest total period. You are provided with a series of log entries, where each entry indicates a borrow or return event. Your task is to determine the item that has been borrowed for the maximum total duration and what that duration is. Logs will be provided in chronological order. Input: The first line contains an integer n (1 ≤ n ≤ 100 000), denoting the number of log entries. Each of the next n lines contains one of the following: - \\"borrow item_id timestamp\\" - \\"return item_id timestamp\\" All timestamps are unique integers. Output: Print an integer item_id followed by the total duration it has been borrowed, for the item that has been borrowed for the maximum total duration. If multiple items have the same maximum total duration, print the item with the smallest item_id. Example: Input 7 borrow 1 3 borrow 2 5 return 1 10 borrow 3 11 return 2 20 borrow 1 25 return 1 30 Output 1 12 Explanation: - Item 1: Borrowed from 3 to 10 (duration 7), and from 25 to 30 (duration 5). Total: 12 - Item 2: Borrowed from 5 to 20 (duration 15). Total: 15 - Item 3: Borrowed from 11 onwards (not returned yet, therefore not counted). Despite Item 2 having been borrowed for a longer duration, the example is chosen such that Item 1 is the answer for illustrative consistency.","solution":"def find_max_borrowed_item(n, logs): item_borrow_times = {} current_borrows = {} for log in logs: parts = log.split() event = parts[0] item_id = int(parts[1]) timestamp = int(parts[2]) if event == \\"borrow\\": current_borrows[item_id] = timestamp elif event == \\"return\\": if item_id in current_borrows: borrow_time = timestamp - current_borrows[item_id] if item_id in item_borrow_times: item_borrow_times[item_id] += borrow_time else: item_borrow_times[item_id] = borrow_time del current_borrows[item_id] # Find the item with the maximum total duration max_time = -1 item_id_with_max_time = None for item_id, total_time in item_borrow_times.items(): if total_time > max_time or (total_time == max_time and item_id < item_id_with_max_time): max_time = total_time item_id_with_max_time = item_id return item_id_with_max_time, max_time"},{"question":"Alex recently joined a team of software engineers working on a security application. One of his first tasks is to analyze a string for its potential security risks. A string is considered secure if it satisfies both of the following conditions: 1. The string contains at least one vowel (`\'a\'`, `\'e\'`, `\'i\'`, `\'o\'`, `\'u\'`). 2. The string contains at least one consonant (any lowercase English letter that is not a vowel). Alex needs to write a function that determines if a given string is secure. If the string is secure, it should return `YES`; otherwise, it should return `NO`. Input - The first line contains an integer `t` (1 ≤ t ≤ 10^4), the number of test cases. - Each of the following `t` lines contains a string `s` (1 ≤ |s| ≤ 100), the string to be checked. Output - For each test case, print `YES` if the string is secure and `NO` otherwise. Examples Input 4 hello world abc xyz Output YES YES YES NO","solution":"def is_secure_string(s): Determines if the string is secure. A string is considered secure if it contains at least one vowel and one consonant. Parameters: s (str): The string to be checked. Returns: str: \'YES\' if the string is secure, \'NO\' otherwise. vowels = set(\'aeiou\') has_vowel = False has_consonant = False for char in s: if char in vowels: has_vowel = True elif char.isalpha(): has_consonant = True if has_vowel and has_consonant: return \'YES\' return \'NO\' def check_secure_strings(t, strings): Checks multiple strings for security and returns the results. Parameters: t (int): The number of test cases. strings (list): List containing the strings to be checked. Returns: list: List of results for each string. results = [] for s in strings: results.append(is_secure_string(s)) return results"},{"question":"In a distant galaxy, an interstellar transport company operates a series of space buses on a straight spaceway. Each bus travels at a constant speed between fixed stations. The company needs to answer a series of queries about the buses’ routes and their operations on this spaceway. The spaceway is represented by a line between two fixed points 0 and L and all bus operations and queries pertain to this spaceway. **Query Types:** 1. **Add a bus:** Add a bus starting at position `a` and ending at position `b` that travels with a fixed speed `v`. 2. **Remove a bus:** Remove a bus with id `id_j`. 3. **Count buses:** Count how many buses are found on a segment between `x1` and `x2` at a given time `t_j`. Your task is to help the company process `q` second type and third type queries after all the first type queries are executed. # Input - The first line contains an integer `L` (1 ≤ L ≤ 10^9) — the length of the spaceway. - The second line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of queries. - Each of the next `q` lines contains a query in one of the following formats: - `\\"1 a b v\\"` (1 ≤ a < b ≤ L; 1 ≤ v ≤ 10^9) — Add a bus. - `\\"2 id_j\\"` (1 ≤ id_j ≤ number of currently existing buses) — Remove a bus. - `\\"3 x1 x2 t_j\\"` (0 ≤ x1 ≤ x2 ≤ L; 0 ≤ t_j ≤ 10^9) — Count buses currently in the segment [x1, x2] at time `t_j`. # Output For each query that requires output, print one line with the result. # Example Input: ``` 10 7 1 0 4 2 1 1 3 1 3 0 5 1 2 1 3 2 3 1 1 6 8 1 3 1 7 2 ``` Output: ``` 2 1 1 ``` # Explanation 1. Initially, two buses are added: - Bus 1 starts at 0 and ends at 4 with speed 2. - Bus 2 starts at 1 and ends at 3 with speed 1. 2. At time 1: - Bus 1 would be covering positions 2 to 6. - Bus 2 would be covering positions 2 to 4. - Segment [0, 5] has both bus 1 and bus 2, so the output is 2. 3. Bus 1 is removed from the record. 4. At time 1: - Only bus 2 covers positions 2 to 3. - In segment [2, 3], there\'s one bus - bus 2. 5. A new bus is added: - Bus 3 starts at 6 and ends at 8 with speed 1. 6. At time 2: - Bus 2 moves from 2 to 4. - Bus 3 moves from 6 to 8. - In segment [1, 7], only bus 3 fits in.","solution":"class Spaceway: def __init__(self, L): self.L = L self.buses = [] self.next_id = 1 def add_bus(self, a, b, v): bus_id = self.next_id self.next_id += 1 self.buses.append({\'id\': bus_id, \'a\': a, \'b\': b, \'v\': v}) return bus_id def remove_bus(self, bus_id): self.buses = [bus for bus in self.buses if bus[\'id\'] != bus_id] def count_buses(self, x1, x2, t): count = 0 for bus in self.buses: current_start = bus[\'a\'] + bus[\'v\'] * t current_end = bus[\'b\'] + bus[\'v\'] * t if x1 <= current_end and current_start <= x2: count += 1 return count def process_queries(L, queries): spaceway = Spaceway(L) results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": a = int(parts[1]) b = int(parts[2]) v = int(parts[3]) spaceway.add_bus(a, b, v) elif parts[0] == \\"2\\": id_j = int(parts[1]) spaceway.remove_bus(id_j) elif parts[0] == \\"3\\": x1 = int(parts[1]) x2 = int(parts[2]) t_j = int(parts[3]) results.append(spaceway.count_buses(x1, x2, t_j)) return results"},{"question":"Write a function that takes a string of text as input, processes it, and outputs the word that appears the most frequently in the text. If two or more words have the highest frequency, return the one that appears first in alphabetic order. The function should be case-insensitive and ignore punctuation marks (.,!?). Input: A single line containing a string of text (maximum 1000 characters). Output: A single word which has the highest frequency, when processed as described above. Example: Input: \\"The quick brown fox jumps over the lazy dog. The quick brown fox was very quick!\\" Output: \\"quick\\" Explanation: The word \\"quick\\" appears 3 times, more than any other word. Therefore, it is the output. Guidelines: - The function should be case-insensitive. - Ignore standard punctuation marks (.,!?). - Consider all words separated by spaces. - The function should handle ties by selecting the alphabetically first word.","solution":"import re from collections import Counter def most_frequent_word(text): Returns the word that appears the most frequently in the text. If there is a tie, returns the word that appears first in alphabetic order. The function is case-insensitive and ignores punctuation marks. # Remove punctuation and convert text to lower case text = re.sub(r\'[.,!?]\', \'\', text).lower() # Split the text into words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Find the highest frequency max_frequency = max(word_counts.values()) # Collect all words with the highest frequency max_words = [word for word, count in word_counts.items() if count == max_frequency] # Return the alphabetically first word with the highest frequency return sorted(max_words)[0]"},{"question":"Julia loves playing with strings and recently she came across the concept of anagram. An anagram is a word or phrase formed by rearranging the letters of another, typically using all the original letters exactly once. Julia wants to automate the process of finding anagrams from a given list of strings. Your task is to write a program that identifies all the groups of anagrams in the given list. -----Input----- The first line of the input contains a single integer n - the number of strings in the list. Each of the following n lines contains one string consisting of lowercase English letters. -----Output----- Print each group of anagrams on a new line. Each group should be printed as a space-separated list of the original strings in that group. The groups should be printed according to the lexicographical order of their first string in the original list. -----Constraints----- - 1 ≤ n ≤ 1000 - 1 ≤ length of each string ≤ 100 -----Example----- Input: 5 tea ate bat tab eat Output: tea ate eat bat tab Explanation: The first group \\"tea ate eat\\" are anagrams because they can be rearranged to form each other. The second group \\"bat tab\\" are also anagrams of each other. Both groups are printed in lexicographical order of their first string in the list.","solution":"from collections import defaultdict def find_anagrams(words): Finds groups of anagrams in the given list of words and returns them. Each group of anagrams is returned as a list of strings. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Extracting the groups and sorting them lexicographically by their first entry grouped_anagrams = [sorted(group) for group in anagrams.values()] grouped_anagrams.sort() return grouped_anagrams def format_anagram_output(groups): Formats the anagram groups for output, as a string where each group is space-separated and each line represents a group. return \\"n\\".join([\\" \\".join(group) for group in groups])"},{"question":"Write a program that takes an integer input from the user and determines if the number is a \\"Happy Number\\". A \\"Happy Number\\" is defined as follows: - Starting with any positive integer, replace the number by the sum of the squares of its digits. - Repeat the process until the number equals 1, or it loops endlessly in a cycle that does not include 1. If the number reaches 1, it is considered a \\"Happy Number\\". Input an integer from the user and print \\"Happy\\" if the number is a Happy Number, otherwise, print \\"Unhappy\\". Sample Input: 19 Sample Output: Happy Sample Input: 4 Sample Output: Unhappy","solution":"def is_happy_number(n): Determines if the input number is a Happy Number. :param n: int, the number to check. :return: str, \\"Happy\\" if the number is a Happy Number, otherwise \\"Unhappy\\". def get_next(number): return sum(int(digit)**2 for digit in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return \\"Happy\\" if n == 1 else \\"Unhappy\\""},{"question":"You are given a string `s` containing lowercase alphabets and an integer array `cost` of the same length. The cost array represents the cost of deleting each character in the string `s`. Your task is to remove characters from the string `s` such that no two consecutive characters are the same, and the total cost of deletions is minimized. Return the minimum cost required to achieve this condition. Example 1: Input: s = \\"abccbd\\" cost = [0, 1, 2, 3, 4, 5] Output: 2 Explanation: You can delete the first appearance of \'c\' (cost = 2) and the second appearance (cost = 3) to get the string \\"abbd\\". The minimum cost is 2. Example 2: Input: s = \\"aabaa\\" cost = [1, 2, 3, 4, 1] Output: 2 Explanation: You can delete the first and last character \'a\' (cost = 1+1 = 2), or delete the second and third character \'a\' (cost = 2+3 = 5). The minimum cost is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minCostToAvoidConsecutiveRepeats` which takes the string `s` and array `cost` as input parameters and returns the minimum cost. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 <= s.length <= 10^5 - s contains only lowercase English letters. - cost.length == s.length - 0 <= cost[i] <= 10^4","solution":"def minCostToAvoidConsecutiveRepeats(s, cost): Returns the minimum cost required to delete characters in the string s to avoid consecutive repeating characters. Parameters: s (str): the input string containing lowercase alphabets. cost (List[int]): the cost of deleting each character in the string s. Returns: int: the minimum cost required. total_cost = 0 n = len(s) for i in range(1, n): if s[i] == s[i-1]: if cost[i] < cost[i-1]: total_cost += cost[i] cost[i] = cost[i-1] else: total_cost += cost[i-1] return total_cost"},{"question":"In a distant galaxy, there is a planet called Zog that is home to a unique species known as \\"Zogians.\\" The Zogians have a tradition of organizing a grand tournament every year where they compete in various athletic events. Each Zogian is identified by a unique ID number, and they record their scores for each event. Your task is to help the Zogian Tournament Committee process the scores. You need to write a program that takes the IDs and scores of all participants and performs the following tasks: 1. Identify and print the ID of the participant with the highest score. 2. Calculate and print the average score of all participants, rounded to two decimal places. 3. Sort and print the list of participants\' IDs in ascending order of their scores. In case of a tie in scores, sort the tied participants by their IDs in ascending order. Input constraints: The first line of input will contain an integer — N, denoting the number of participants. The next N lines will each contain a participant\'s ID and their score, separated by a space. Output constraints: Print three lines: 1. The ID of the participant with the highest score. 2. The average score of all participants, rounded to two decimal places. 3. The sorted list of participant IDs as described above. Constraints: 1 ≤ N ≤ 10^3 1 ≤ ID ≤ 10^5 0 ≤ score ≤ 10^3 SAMPLE INPUT 5 101 450 102 500 103 300 104 500 105 450 SAMPLE OUTPUT 102 440.00 103 101 105 102 104","solution":"def process_scores(participants): Processes the scores of the participants in the Zogian tournament. Args: participants (list of tuples): Each tuple contains an ID (int) and a score (int). Returns: (int, float, list): - ID of the participant with the highest score. - Average score of all participants, rounded to two decimal places. - Sorted list of participant IDs based on their scores, then by ID in case of tie. if not participants: return None, 0.0, [] # Step 1: Identify the ID of the participant with the highest score max_score = -1 max_id = -1 total_score = 0 for id, score in participants: total_score += score if score > max_score or (score == max_score and id < max_id): max_score = score max_id = id # Step 2: Calculate the average score average_score = round(total_score / len(participants), 2) # Step 3: Sort the list of participants\' IDs sorted_participants = sorted(participants, key=lambda x: (x[1], x[0])) sorted_ids = [id for id, score in sorted_participants] return max_id, average_score, sorted_ids"},{"question":"Write a program to perform a specific text transformation on a given string. The transformation involves shifting each letter of the string forward by one position in the alphabet, wrapping around from \'z\' to \'a\'. Non-alphabetic characters should remain unchanged. ------ Input ------ The first line of the input contains an integer T, the number of test cases. Each test case consists of a single string S, which can contain lower or upper case letters, spaces, and punctuation marks. ------ Output ------ For each test case, print the transformed string. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 ----- Sample Input ------ 3 Hello, World! abc xyz Zebra-123 ----- Sample Output ------ Ifmmp, Xpsme! bcd yza Afcsb-123","solution":"def shift_letter(c): Shifts a single character forward by one in the alphabet, wrapping \'z\' to \'a\' and \'Z\' to \'A\'. Non-alphabetic characters remain unchanged. if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + 1) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + 1) % 26 + ord(\'A\')) else: return c def shift_text(text): Shifts each letter in the text forward by one position in the alphabet. return \'\'.join(shift_letter(c) for c in text) def transform_strings(T, strings): Transforms a list of strings based on the specified text transformation. return [shift_text(s) for s in strings]"},{"question":"Riley loves card games and owns a special deck of cards, each card having a different integer written on it. Riley wants to sort the cards in non-decreasing order. However, there\'s a twist. Riley is only interested in sorting those cards whose values are prime numbers, while the non-prime cards should remain in their original positions. Write a function that takes the list of integers representing the deck of cards, sorts only the prime number cards in non-decreasing order, and returns the modified list. Input format: - The function should take a single list of integers. Output format: - The function should return the modified list of integers. Constraints: 1 ≤ |List length| ≤ 10^5 1 ≤ Each integer in the list ≤ 10^6 Example Input: [7, 4, 10, 3, 18, 11, 2] Example Output: [2, 4, 10, 3, 18, 7, 11] Explanation: - Only the prime numbers (7, 3, 11, 2) are sorted while the non-prime numbers (4, 10, 18) stay in their respective positions. The sorted prime numbers are {2, 3, 7, 11}, but they replace only the positions of the primes in the original list.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sort_primes(deck): primes = [num for num in deck if is_prime(num)] primes.sort() prime_index = 0 for i in range(len(deck)): if is_prime(deck[i]): deck[i] = primes[prime_index] prime_index += 1 return deck"},{"question":"Problem: You are given the task of helping a librarian to organize the list of books that have been borrowed from the library in the ascending order of the number of times they have been borrowed. If two books have been borrowed the same number of times, they should appear in alphabetical order. The librarian initially provides you with a list of book names in the order they were borrowed. Your task is to read the list of borrowed books and generate the final list of books sorted by the number of times they were borrowed and then by their names in alphabetical order. Input: The first line consists of an integer N which represents the number of books borrowed. The next N lines contain the names of the borrowed books, one book name per line. Output: First, print the total number of distinct book names in the final list. Then, print each book name on a new line according to the specified sorting order. Constraints: * 1 ≤ N ≤ 10^6 * 1 ≤ Length of each book name ≤ 100 * Book names consist only of lowercase English alphabets (a-z) and spaces. Note: Some input files may contain large data. Use input/output methods that handle large datasets efficiently. Example Input: 10 book a book b book c book b book d book a book c book b book e book e Example Output: 5 book d book a book c book e book b","solution":"def organize_books(N, borrowed_books): Organizes books in the order they have been borrowed and alphabetically if borrowing counts are the same. Parameters: N (int): Number of borrowed books borrowed_books (list): List containing names of borrowed books Returns: tuple: A tuple where the first element is the number of distinct books, and the second element is a list with book names sorted by borrow count and then alphabetically. from collections import Counter # Count the occurrences of each book book_count = Counter(borrowed_books) # Sort books first by count (ascending) and then by name (alphabetically) sorted_books = sorted(book_count.items(), key=lambda x: (x[1], x[0])) # Extract the sorted book names sorted_book_names = [book[0] for book in sorted_books] return (len(book_count), sorted_book_names)"},{"question":"In a small town, there are n residents and m streets such that each street connects exactly two different residents. Each resident can communicate with another resident only if there exists a direct street or a sequence of streets connecting them. You are asked to determine the number of residents a specific resident can directly or indirectly communicate with. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of residents and the number of streets. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) which indicates that there is a street connecting resident u and resident v. The last line contains one integer k (1 ≤ k ≤ n) — the resident number you are evaluating. Output Output a single integer — the number of residents that the resident numbered k can communicate with. Examples Input 6 5 1 2 2 3 4 5 5 6 6 4 1 Output 3 Input 6 5 1 2 2 3 4 5 5 6 6 4 4 Output 3 Explanation In the first example, resident 1 can communicate with residents 2, 3 through a sequence of streets. In the second example, resident 4 can communicate with residents 5, 6.","solution":"def count_communicable_residents(n, m, streets, k): from collections import defaultdict, deque # Create an adjacency list adjacency_list = defaultdict(list) for u, v in streets: adjacency_list[u].append(v) adjacency_list[v].append(u) # BFS to find all reachable nodes from k visited = set() queue = deque([k]) communicable_residents = 0 while queue: resident = queue.popleft() if resident in visited: continue visited.add(resident) communicable_residents += 1 for neighbor in adjacency_list[resident]: if neighbor not in visited: queue.append(neighbor) return communicable_residents"},{"question":"You are working on a project to optimize the network routing within a large distributed system. The system consists of multiple servers connected together by bidirectional communication channels. Each server can communicate directly with any other server it\'s connected to. Your goal is to determine the minimal number of communication channels required to ensure that every server can reach every other server, either directly or through a series of connections. Input The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with two integers N and M, where N is the number of servers and M is the number of existing communication channels. The next M lines each contain two integers u and v indicating that there is a direct communication channel between server u and server v. Output For each test case, output one line containing \\"Case #x: y\\", where x is the case number (starting from 1) and y is the minimal number of additional communication channels required. Constraints 1 ≤ T ≤ 100. 1 ≤ N ≤ 1000. 0 ≤ M ≤ N(N-1)/2. 1 ≤ u, v ≤ N. SAMPLE INPUT 2 4 2 1 2 2 3 5 3 1 2 2 3 4 5 SAMPLE OUTPUT Case #1: 1 Case #2: 1 Explanation In Case #1, we have 4 servers and 2 communication channels connecting servers 1-2 and 2-3. To ensure that every server can communicate with every other server, we need to add one more communication channel, for example between servers 3-4. In Case #2, we have 5 servers and 3 communication channels connecting servers 1-2, 2-3, and 4-5. The servers form two disconnected groups [1, 2, 3] and [4, 5]. To connect everything together, we need to add one more communication channel, for example between servers 3-4.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def solve_network_routing(T, test_cases): results = [] for t in range(T): n, m, connections = test_cases[t] # Initialize union-find structures parent = list(range(n+1)) rank = [0] * (n+1) # Process existing connections for u, v in connections: union(parent, rank, u, v) # Find number of connected components components = len(set(find(parent, i) for i in range(1, n+1))) # Minimal number of channels required is the number of connection components - 1 results.append(f\\"Case #{t+1}: {components - 1}\\") return results # This function processes the input directly from the console def process_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) connections = [] for i in range(M): u = int(data[index + 2 + 2*i]) v = int(data[index + 3 + 2*i]) connections.append((u, v)) index += 2 + 2 * M test_cases.append((N, M, connections)) results = solve_network_routing(T, test_cases) for result in results: print(result)"},{"question":"The city traffic control system needs an efficient way to manage the traffic lights at its intersections. To achieve this, you are tasked with creating a traffic light scheduler that generates a cycle for the lights to ensure smooth traffic flow while preventing accidents. There are N intersections in the city, numbered from 0 to N-1. Each intersection has traffic lights that can display three states: Red, Green, and Yellow. There are two types of queries to manage the traffic lights for different intersections: Q1: Given an intersection i, output the current state of its traffic light. Q2: Update the state of the traffic light for intersection i based on the following rules: - If the current state is Red, change it to Green. - If the current state is Green, change it to Yellow. - If the current state is Yellow, change it to Red. You need to handle these operations efficiently. Input: The first line contains N (number of intersections) and T (number of queries). The next T lines contain a query in the format: - Q i (where Q is the query type and i is the intersection number). Output: Print the result of each query of type Q1. Constraints: 1 ≤ N, T ≤ 1000000 0 ≤ i < N Example Input: 5 6 1 1 2 1 1 1 2 4 2 4 1 4 Example Output: Red Green Yellow Explanation: Initially, all traffic lights are Red. - First Query (1 1): Traffic light at intersection 1 is Red. - Second Query (2 1): Update traffic light at intersection 1 to Green. - Third Query (1 1): Traffic light at intersection 1 is now Green. - Fourth Query (2 4): Update traffic light at intersection 4 to Green. - Fifth Query (2 4): Update traffic light at intersection 4 to Yellow. - Sixth Query (1 4): Traffic light at intersection 4 is now Yellow. Note: Ensure your implementation can handle large inputs efficiently.","solution":"class TrafficLightScheduler: def __init__(self, n): self.states = [\'Red\'] * n def query(self, q_type, i): if q_type == 1: return self.states[i] elif q_type == 2: if self.states[i] == \'Red\': self.states[i] = \'Green\' elif self.states[i] == \'Green\': self.states[i] = \'Yellow\' elif self.states[i] == \'Yellow\': self.states[i] = \'Red\' def handle_queries(n, t, query_list): scheduler = TrafficLightScheduler(n) results = [] for query in query_list: q_type, i = query if q_type == 1: results.append(scheduler.query(q_type, i)) elif q_type == 2: scheduler.query(q_type, i) return results # Example usage n = 5 t = 6 query_list = [(1, 1), (2, 1), (1, 1), (2, 4), (2, 4), (1, 4)] print(handle_queries(n, t, query_list)) # Output should be [\'Red\', \'Green\', \'Yellow\']"},{"question":"Given a sequence of integers, write a function that determines whether it is possible to rearrange the sequence so that no two adjacent integers are the same. If possible, return a rearranged sequence, otherwise return an empty list. For example, given the input [1, 1, 1, 2, 2, 2], the output could be [2, 1, 2, 1, 2, 1]. -----Input----- Input consists of a single line containing an integer n (1 leq n leq 10^4), followed by n integers a_i (0 leq a_i leq 10^4) representing the sequence. -----Output----- If it is possible to rearrange the sequence such that no two adjacent integers are the same, display the rearranged sequence. Otherwise, display an empty list. -----Examples----- Sample Input: 6 1 1 1 2 2 2 Sample Output: [2, 1, 2, 1, 2, 1] Sample Input: 3 1 1 1 Sample Output: []","solution":"from collections import Counter import heapq def rearrange_sequence(n, sequence): if n == 1: return sequence count = Counter(sequence) max_heap = [(-val, key) for key, val in count.items()] heapq.heapify(max_heap) prev_count, prev_value = 0, None result = [] while max_heap: count, value = heapq.heappop(max_heap) result.append(value) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_value)) prev_count, prev_value = count + 1, value if len(result) != n: return [] # If we didn\'t use all elements, then it is not possible to rearrange. return result"},{"question":"Bob is passionate about puzzles, particularly word puzzles. He stumbled upon a challenge where he needs to determine the longest substring of a given string that contains only unique characters. Given the fast-paced nature of the game, Bob requires an efficient solution to find this substring quickly. INPUT: The first line contains a single integer T, the number of test cases. The next T lines each contain a string S where the length of S is at most 10^5. OUTPUT: For each test case, print the length of the longest substring with all unique characters. CONSTRAINTS: 1 <= T <= 100 1 <= |S| <= 10^5 SAMPLE INPUT 2 abcabcbb bbbbb SAMPLE OUTPUT 3 1","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring with all unique characters. char_index_map = {} max_length = start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(length_of_longest_substring(case)) return results"},{"question":"You are given two strings, `text` and `pattern`. Your task is to find out the number of times the `pattern` appears in the `text`, including overlaps. A match is found when the characters of `pattern` exactly overlap with characters in `text`. Example 1: Input: text = \\"aaaa\\" pattern = \\"aa\\" Output: 3 Explanation: The pattern \\"aa\\" appears 3 times in \\"aaaa\\" as \\"aa\\", \\"aa\\", and \\"aa\\". Example 2: Input: text = \\"abababa\\" pattern = \\"aba\\" Output: 3 Explanation: The pattern \\"aba\\" appears 3 times in \\"abababa\\" as \\"aba\\", \\"aba\\", and \\"aba\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function countPatternOccurrences() which takes two strings `text` and `pattern` as input parameters and returns the number of times the `pattern` appears in the `text`, including overlaps. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(1) where n is the length of `text` and m is the length of `pattern`. Constraints: 1 ≤ |text| ≤ 10^5 1 ≤ |pattern| ≤ 10^4","solution":"def countPatternOccurrences(text, pattern): Returns the number of times the pattern appears in the text, including overlaps. count = 0 i = 0 while i <= len(text) - len(pattern): if text[i:i+len(pattern)] == pattern: count += 1 i += 1 else: i += 1 return count"},{"question":"Leo loves playing with strings, especially palindromic strings. A string is called a palindrome if it reads the same forward and backward. Leo has recently come across an interesting operation and wants to make his string a palindrome. The operation is defined as follows: You can insert any character at any position in the string. Leo wants to find the minimum number of such operations required to transform a given string into a palindrome. Write a program that, given a string, calculates the minimum number of insertions needed to transform it into a palindrome. Constraints * 1 ≦ length of the string ≦ 1000 * The string contains only lowercase English letters. Input The input is given from Standard Input in the following format: s Output Output the minimum number of insertions needed to make the string a palindrome. Examples Input abca Output 1 Input race Output 3 Input a Output 0","solution":"def min_insertions_to_palindrome(s: str) -> int: Returns the minimum number of insertions needed to transform the string `s` into a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Fill the table for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l + 1][r - 1] else: dp[l][r] = min(dp[l][r - 1], dp[l + 1][r]) + 1 return dp[0][n - 1]"},{"question":"You are given a string S containing lowercase letters only and an integer t. Based on the value of t, you need to perform a specific action on the string S. t Action Needed 1 Print \\"Palindrome\\" if S is a palindrome, or \\"Not Palindrome\\" otherwise (without the quotes). 2 Print the character that appears the most frequently in S. If there is a tie, print the lexicographically smallest character. 3 Print \\"Yes\\" if S contains at least one instance of every vowel (\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"), or \\"No\\" otherwise (without the quotes). 4 Print the longest contiguous substring of S where all characters are the same. If there are multiple, print the one that appears first. 5 Print the total number of distinct substrings in S. Note that a substring is any sequence of consecutive characters from S. -----Input----- The first line of the input contains an integer t (1 leq t leq 5). The second line of the input contains the string S (1 leq text{length of } S leq 100000). -----Output----- For each test case, output the required answer based on the value of t. -----Examples----- Sample Input 1: 1 racecar Sample Output 1: Palindrome Sample Input 2: 2 bbaacc Sample Output 2: a Sample Input 3: 3 aeioussss Sample Output 3: Yes Sample Input 4: 4 aaabbbaaa Sample Output 4: aaa Sample Input 5: 5 abc Sample Output 5: 6","solution":"def process_string(t, S): def is_palindrome(s): return s == s[::-1] def most_frequent_character(s): frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 max_freq = max(frequency.values()) most_freq_chars = [char for char, freq in frequency.items() if freq == max_freq] return min(most_freq_chars) def contains_all_vowels(s): vowels = set(\\"aeiou\\") return vowels.issubset(set(s)) def longest_contiguous_substring(s): max_len = 1 current_len = 1 longest_substr = s[0] for i in range(1, len(s)): if s[i] == s[i-1]: current_len += 1 if current_len > max_len: max_len = current_len longest_substr = s[i] * current_len else: current_len = 1 return longest_substr def count_distinct_substrings(s): substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings) if t == 1: return \\"Palindrome\\" if is_palindrome(S) else \\"Not Palindrome\\" elif t == 2: return most_frequent_character(S) elif t == 3: return \\"Yes\\" if contains_all_vowels(S) else \\"No\\" elif t == 4: return longest_contiguous_substring(S) elif t == 5: return count_distinct_substrings(S)"},{"question":"Given an array of strings words, you need to find the longest string that can be formed by concatenating different words from the list without repeating any character. Each word must be taken as a whole and cannot be broken into individual characters. If there are multiple longest strings with the same length, return any one of them. Example 1: Input: words = [\\"un\\", \\"iq\\", \\"ue\\"] Output: \\"uqnie\\" Explanation: All characters in \\"uqnie\\" are unique. Note that \\"unique\\" and \\"uqnie\\" are valid outputs, but \\"unique\\" breaks into two words from the list, hence \\"uqnie\\" is valid as well. Example 2: Input: words = [\\"cha\\", \\"r\\", \\"act\\", \\"ers\\"] Output: \\"actersrcha\\" Explanation: All characters in \\"actersrcha\\" are unique. Example 3: Input: words = [\\"abc\\", \\"def\\", \\"ghi\\"] Output: \\"abcdefghi\\" Explanation: All characters in \\"abcdefghi\\" are unique. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findLongestUniqueConcat which takes the array of strings words as input and returns the longest concatenated string with all unique characters. Expected Time Complexity: O(N * 2^N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ words.length ≤ 16 1 ≤ words[i].length ≤ 26","solution":"from itertools import combinations def is_unique(s): return len(s) == len(set(s)) def findLongestUniqueConcat(words): n = len(words) longest = \\"\\" # Iterate over all possible combinations of the words for i in range(1, n+1): for combo in combinations(words, i): combined_word = \\"\\".join(combo) if is_unique(combined_word) and len(combined_word) > len(longest): longest = combined_word return longest"},{"question":"Alice needs to build a wooden fence of a certain length `L`. She has an unlimited supply of wooden planks of different lengths. She wants to minimize the number of planks used but also wants the fence to be sturdy by using a mix of different lengths as much as possible. Write a function that determines the minimum number of planks required to build the fence of length `L` using the given plank lengths. If it is not possible to build the fence with the given lengths, the function should output \\"IMPOSSIBLE\\". Input: Length of the fence `L` (positive integer) Array containing the lengths of available planks Output: The minimum number of planks required to exactly build the fence, or \\"IMPOSSIBLE\\" if it cannot be done. SAMPLE INPUT 15 {1,4,5,6} SAMPLE OUTPUT 3 Explanation: Alice can use one plank of length 6, one plank of length 5, and one plank of length 4 to build the fence of length 15 using 3 planks.","solution":"def min_planks(L, plank_lengths): Returns the minimum number of planks required to build a fence of length L using given plank lengths. If it is not possible to build the fence with the given lengths, returns \\"IMPOSSIBLE\\". dp = [float(\'inf\')] * (L + 1) dp[0] = 0 # 0 planks needed to build length 0 for length in range(1, L + 1): for plank in plank_lengths: if plank <= length: dp[length] = min(dp[length], dp[length - plank] + 1) return dp[L] if dp[L] != float(\'inf\') else \\"IMPOSSIBLE\\""},{"question":"In a graphical user interface, a focus traversal policy determines the order in which the components within a container receive focus. When a user navigates through components, it usually follows a visual or logical sequence. This problem involves determining the next focused component in a linear traversal policy. Imagine you have a series of components represented as a list, and each component can be either *enabled* or *disabled*. The enabled components can receive focus, while the disabled components cannot. Given a list of components and their statuses along with a specific starting index, determine the index of the next component that should receive focus. The traversal should be cyclic, meaning if you reach the end of the list, you should continue from the beginning. -----Input----- The first line contains an integer n (1 le n le 1000), representing the number of components. The second line contains n integers, each either 0 or 1, representing the status of each component: 1 indicates the component is enabled, and 0 indicates the component is disabled. The third line contains an integer k (0 le k < n), representing the index of the current component. -----Output----- Output a single integer representing the index of the next enabled component in the focus traversal order. The input is chosen such that there is at least one enabled component. -----Examples----- Sample Input 1: 6 1 0 1 0 0 1 2 Sample Output 1: 5 Sample Input 2: 5 1 1 0 1 0 4 Sample Output 2: 0 Sample Input 3: 4 0 0 1 0 2 Sample Output 3: 2","solution":"def next_focus_index(n, statuses, current_index): Determines the next focused component index in a cyclic manner. :param n: int - the number of components :param statuses: list[int] - statuses of the components (1 for enabled, 0 for disabled) :param current_index: int - the current index to start traversal from :return: int - the index of the next enabled component next_index = (current_index + 1) % n while next_index != current_index: if statuses[next_index] == 1: return next_index next_index = (next_index + 1) % n return current_index # This is just to satisfy function return type; logically will never reach here."},{"question":"You are given a set of buildings in an urban area, represented as a list of integers where each integer corresponds to the height of a building. Your task is to calculate the total \\"skyline\\" length. The skyline length is defined as the combined width of all buildings when viewed from a distance, with overlaps counted only once. Input The input consists of several test cases. Each test case is described by a single line containing a list of integers separated by spaces, representing the heights of the buildings. The end of input is indicated by a line containing a single \\"0\\". Output For each test case, output the total skyline length. Example Input 2 3 5 2 1 4 1 2 3 0 Output 5 4 Explanation In the first example, the skyline covers a total width of 5 units when viewed from a distance as all building heights are distinct and do not overlap. In the second example, the buildings of heights 1, 2, and 3 create overlaps, but the total distinct coverage is 4 units.","solution":"def calculate_skyline_length(building_heights_list): Calculate the total skyline length for each set of building heights. Args: building_heights_list (list): List of strings, where each string contains a space-separated list of integers representing the heights of buildings. The last item is \\"0\\" which marks the end of input. Returns: list: List of integers representing the skyline length for each input set. results = [] # Iterate over each item in the list until we hit the \\"0\\" marker for buildings in building_heights_list: if buildings.strip() == \\"0\\": break heights = list(map(int, buildings.split())) # The skyline length for any set of buildings is the number of buildings skyline_length = len(heights) results.append(skyline_length) return results"},{"question":"You are given a permutation of numbers from 1 to N. You need to find a pair of indices (i, j) such that the element at index i is the smallest and the element at index j is the largest in the permutation. The result should return the 1-based indices of the elements. Constraints * 1 leq N leq 10^5 Input Input is given from Standard Input in the following format: N P_1 P_2 ... P_N Output Output the indices of the smallest and largest element in the permutation, in order, with a space between them. Examples Input 5 4 2 3 1 5 Output 4 5 Input 7 3 1 2 7 5 4 6 Output 2 4","solution":"def find_min_max_indices(N, permutation): Returns the 1-based indices of the smallest and largest elements in the permutation. min_index = permutation.index(min(permutation)) + 1 max_index = permutation.index(max(permutation)) + 1 return min_index, max_index # Example usage N = 5 permutation = [4, 2, 3, 1, 5] print(find_min_max_indices(N, permutation)) # Output: (4, 5)"},{"question":"Write a program to check if a given number N is a perfect square or not. Note: A perfect square is a number that can be expressed as the product of an integer with itself, i.e., it is the square of some integer. The starting perfect squares are 1 (1*1), 4 (2*2), 9 (3*3), 16 (4*4), and so on. Example 1: Input: N = 49 Output: 1 Explanation: 49 is a perfect square because it equals 7*7. Example 2: Input: N = 50 Output: 0 Explanation: 50 is not a perfect square. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPerfectSquare() that takes a number N as input parameter and returns 1 if it is a perfect square. Otherwise, it returns 0. Expected Time complexity: O(logN) Expected Auxiliary Space: O(1) Constraints: 1<=N<=10^{6}","solution":"import math def isPerfectSquare(N): Checks if a given number N is a perfect square or not. Returns 1 if N is a perfect square, otherwise returns 0. if N < 1: return 0 sqrt_n = int(math.sqrt(N)) return 1 if sqrt_n * sqrt_n == N else 0"},{"question":"Create a program to analyze real estate data and identify properties that meet specific criteria. You have a list of properties, each with various attributes such as price, number of bedrooms, number of bathrooms, and size. Your task is to write a program that filters properties based on given conditions and calculates the average price of the properties that match the conditions. Input The first line of the input is an integer N, the number of properties. Each of the next N lines describes a property with attributes separated by spaces in the following order: * Price (an integer) * Number of bedrooms (an integer) * Number of bathrooms (an integer) * Size in square feet (an integer) The following line contains an integer M, the number of conditions. Each of the next M lines describes a condition in the following format: * Attribute (a string, which can be \\"price\\", \\"bedrooms\\", \\"bathrooms\\", or \\"size\\") * Operator (a string, which can be \\">\\", \\"<\\", \\">=\\", \\"<=\\", \\"==\\") * Value (an integer) Output Output the average price of the properties that match all the conditions. If no properties match, output \\"No matching properties\\". Examples Input 5 300000 3 2 1500 400000 4 3 2000 250000 2 1 1200 500000 5 4 2500 350000 3 2 1800 3 bedrooms >= 3 size > 1500 price < 450000 Output 375000 Input 3 200000 2 1 1000 300000 3 2 1500 400000 4 3 2000 2 bedrooms == 3 bathrooms > 2 Output No matching properties","solution":"def parse_properties(n, properties_data): properties = [] for data in properties_data: price, bedrooms, bathrooms, size = map(int, data.split()) properties.append({ \\"price\\": price, \\"bedrooms\\": bedrooms, \\"bathrooms\\": bathrooms, \\"size\\": size }) return properties def parse_conditions(m, conditions_data): conditions = [] for condition in conditions_data: attr, op, value = condition.split() conditions.append((attr, op, int(value))) return conditions def filter_properties(properties, conditions): def satisfies_conditions(property): for attr, op, value in conditions: if op == \\">\\" and not (property[attr] > value): return False elif op == \\"<\\" and not (property[attr] < value): return False elif op == \\">=\\" and not (property[attr] >= value): return False elif op == \\"<=\\" and not (property[attr] <= value): return False elif op == \\"==\\" and not (property[attr] == value): return False return True return [property for property in properties if satisfies_conditions(property)] def average_price(properties): if not properties: return \\"No matching properties\\" total_price = sum(property[\\"price\\"] for property in properties) return total_price // len(properties) def analyze_real_estate(n, properties_data, m, conditions_data): properties = parse_properties(n, properties_data) conditions = parse_conditions(m, conditions_data) filtered_properties = filter_properties(properties, conditions) return average_price(filtered_properties)"},{"question":"You are tasked with managing a series of parking lots. Each parking lot has a specific number of available parking spots. Customers arrive periodically and request parking space for a certain amount of time. You need to write a program that determines if each customer\'s parking request can be accommodated based on the current availability of spots in the required parking lot. Constraints * There will be at most 100 parking lots and 1000 customer requests. * 1 ≤ Number of parking lots ≤ 100 * 0 ≤ parking spots in each lot ≤ 1000 * 1 ≤ Number of customer requests ≤ 1000 * 0 ≤ start time, end time ≤ 10^6 Input The input includes multiple data sets. Each data set is given in the following format: M P1 P2 ... PM N LID1 Start1 End1 LID2 Start2 End2 : LIDN StartN EndN M represents the number of parking lots. P1 to PM are integers representing the number of available parking spots in each parking lot. N represents the number of customer requests where: LID is the parking lot ID (1-indexed), Start is the start time of the parking request, End is the end time of the parking request. The end of the input is indicated by a case where M = 0. You should print nothing for this data set. Output For each data set, print \\"Yes\\" if all customer requests can be accommodated in the corresponding parking lots, \\"No\\" otherwise (without quotes). Example Input 3 10 8 5 4 1 2 5 2 1 3 2 5 6 3 3 4 2 5 5 2 1 1 2 2 2 3 0 Output Yes Yes","solution":"def can_accommodate_requests(): import sys input = sys.stdin.read data = input().split() index = 0 results = [] while index < len(data): M = int(data[index]) index += 1 if M == 0: break parking_lots = list(map(int, data[index:index + M])) index += M N = int(data[index]) index += 1 requests = [] for _ in range(N): LID = int(data[index]) - 1 Start = int(data[index + 1]) End = int(data[index + 2]) requests.append((LID, Start, End)) index += 3 schedule = [[] for _ in range(M)] for LID, Start, End in requests: schedule[LID].append((Start, End)) def can_accommodate(lot_schedule, max_spots): times = [] for start, end in lot_schedule: times.append((start, 1)) times.append((end, -1)) times.sort() current_spots = 0 for _, t in times: current_spots += t if current_spots > max_spots: return False return True accommodated = True for LID in range(M): if not can_accommodate(schedule[LID], parking_lots[LID]): accommodated = False break results.append(\\"Yes\\" if accommodated else \\"No\\") for result in results: print(result) if __name__ == \\"__main__\\": can_accommodate_requests()"},{"question":"Given an array of integers, rearrange the array such that all zeros are moved to the end while maintaining the relative order of the non-zero elements. Your task is to complete the function moveZerosToEnd(), which takes an array as input and returns the modified array. Example 1: Input: arr[] = {0, 1, 0, 3, 12} Output: {1, 3, 12, 0, 0} Explanation: All zeros are moved to the end of the array and the relative order of non-zero elements is maintained. Example 2: Input: arr[] = {1, 7, 8, 0, 0, 10, 0, 15, 0} Output: {1, 7, 8, 10, 15, 0, 0, 0, 0} Explanation: All zeros are moved to the end of the array and the relative order of non-zero elements is maintained. Your Task: You don\'t need to read, input, or print anything. Your task is to complete the function moveZerosToEnd(), which takes the array arr[], and its size, and returns the modified array with all zeros moved to the end. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1), where N indicates number of elements in the array. Constraints: 1 <= size of array <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def moveZerosToEnd(arr): Moves all the zeros in the array to the end while maintaining the relative order of the non-zero elements. Args: arr: List of integers Returns: Modified list with all zeros moved to the end non_zero_index = 0 # Move all non-zero elements to the front of the array for i in range(len(arr)): if arr[i] != 0: arr[non_zero_index] = arr[i] non_zero_index += 1 # Fill the remaining positions with zeros for i in range(non_zero_index, len(arr)): arr[i] = 0 return arr"},{"question":"Eve has an array of positive integers and she wants to calculate the sum of all unique elements in the array. Two elements are considered unique if they only appear once in the array. Help Eve figure out the sum of these unique elements. ------ Input Format ------ The first line of input contains an integer n, the size of the array. The second line contains n space-separated positive integers representing the elements of the array. ------ Output Format ------ Print a single integer, the sum of all unique elements in the array. ------ Constraints ------ 1 ≤ n ≤ 100 1 ≤ text{array element} ≤ 100 ----- Sample Input 1 ------ 5 1 2 2 3 4 ----- Sample Output 1 ------ 8 ----- Explanation 1 ------ The unique elements in the array are 1, 3, and 4. Their sum is 1 + 3 + 4 = 8. ----- Sample Input 2 ------ 4 2 2 2 2 ----- Sample Output 2 ------ 0 ----- Explanation 2 ------ There are no unique elements in the array as all elements are the same.","solution":"def sum_of_unique_elements(n, arr): Returns the sum of all unique elements in the array. Parameters: n (int) : number of elements in the array arr (list) : list of integers Returns: int: sum of all unique elements from collections import Counter # Count occurrences of each element counts = Counter(arr) # Sum elements that appear exactly once unique_sum = sum(element for element, count in counts.items() if count == 1) return unique_sum"},{"question":"Given n binary trees B_i (i = 0, 1, ..., n-1), perform a sequence of the following operations: * insert(t, v): Insert an integer v into tree B_t while maintaining the binary search tree property. * find(t, v): Check if the integer v exists in tree B_t. If it exists, print \\"YES\\"; otherwise, print \\"NO\\". * delete(t, v): Delete an integer v from tree B_t. If the value does not exist in the tree, do nothing. In the initial state, all trees are empty. Constraints * 1 leq n leq 1,000 * 1 leq q leq 200,000 * -1,000,000,000 leq v leq 1,000,000,000 Input The input is given in the following format: n ; q query_1 query_2 : query_q Each query query_i is given by: 0 t v or 1 t v or 2 t v where the first digits 0, 1 and 2 represent insert, find and delete operations respectively. Output For each find operation, print \\"YES\\" if the value exists in the binary tree, otherwise print \\"NO\\". Example Input 3 7 0 0 5 0 0 3 0 0 8 1 0 5 1 0 7 2 0 5 1 0 5 Output YES NO NO","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, root, key): if key < root.val: if root.left is None: root.left = TreeNode(key) else: self._insert(root.left, key) else: if root.right is None: root.right = TreeNode(key) else: self._insert(root.right, key) def find(self, key): return self._find(self.root, key) def _find(self, root, key): if root is None: return False if root.val == key: return True elif key < root.val: return self._find(root.left, key) else: return self._find(root.right, key) def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, root, key): if root is None: return root if key < root.val: root.left = self._delete(root.left, key) elif key > root.val: root.right = self._delete(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left min_larger_node = self._get_min(root.right) root.val = min_larger_node.val root.right = self._delete(root.right, root.val) return root def _get_min(self, root): while root.left is not None: root = root.left return root def operate_on_trees(n, queries): trees = [BinarySearchTree() for _ in range(n)] results = [] for query in queries: op, t, v = query if op == 0: trees[t].insert(v) elif op == 1: if trees[t].find(v): results.append(\\"YES\\") else: results.append(\\"NO\\") elif op == 2: trees[t].delete(v) return results def main(input_data): lines = input_data.split(\'n\') n, q = map(int, lines[0].split()) queries = [] for i in range(1, q + 1): queries.append(tuple(map(int, lines[i].split()))) results = operate_on_trees(n, queries) return \\"n\\".join(results)"},{"question":"A software company is developing a new search engine. As part of this, they need to implement a feature that ranks query results based on relevancy scores. To simplify the problem, the company defined relevancy in terms of keyword matching, where each query is a list of words, and each document is also a list of words. You are given a number of documents, each with an associated unique document ID and a list of words. Each document also has a relevance score obtained by summing up the positions (1-based index) of the words in that document which match any of the query words. If a document contains multiple instances of a query word, each instance\'s position is added to the total score. Given multiple documents and a single query, your task is to determine the document with the highest relevancy score. If two or more documents have the same score, return the document with the smallest document ID. Input Format The first line contains an integer d, representing the number of documents (1 ≤ d ≤ 10^5). The next d lines each contain a string of space-separated integers followed by a space-separated list of words. The first integer on each line is the document ID, which is unique and ranges from 1 to 10^9, followed by the words contained in the document. Each document contains between 1 and 1000 words, and each word consists of 1 to 100 alphabetical characters. The next line contains an integer q, representing the number of words in the query (1 ≤ q ≤ 10). The last line contains the space-separated words that comprise the query. Output Format Print the document ID of the most relevant document according to the given query. Sample Input 5 1 software development is crucial 2 software testing crucial 3 development testing software 4 important part of development 5 software testing part development 3 software development testing Sample Output 5 Explanation We compute the sum of the positions of the query words in each document: - Document 1: \\"software development is crucial\\" -> positions: 1 (software), 2 (development). Score = 1 + 2 = 3 - Document 2: \\"software testing crucial\\" -> positions: 1 (software), 2 (testing). Score = 1 + 2 = 3 - Document 3: \\"development testing software\\" -> positions: 3 (software), 1 (development), 2 (testing). Score = 3 + 1 + 2 = 6 - Document 4: \\"important part of development\\" -> position: 4 (development). Score = 4 - Document 5: \\"software testing part development\\" -> positions: 1 (software), 2 (testing), 4 (development). Score = 1 + 2 + 4 = 7 Document 5 has the highest relevancy score (7). Thus, the output is the document ID 5.","solution":"def get_relevant_document(d, documents, q, query_words): query_set = set(query_words) highest_score = -1 best_doc_id = float(\'inf\') for doc in documents: doc_id = doc[0] doc_words = doc[1:] score = sum(index + 1 for index, word in enumerate(doc_words) if word in query_set) if score > highest_score or (score == highest_score and doc_id < best_doc_id): highest_score = score best_doc_id = doc_id return best_doc_id"},{"question":"Write a function that takes an integer ```n``` (1 <= n <= 100) as input and returns a string containing the first n terms of the Fibonacci sequence, separated by commas. The Fibonacci sequence is defined as follows: ``` F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) for n >= 2 ``` For example, if ```n == 5```, the output should be: ``` 0, 1, 1, 2, 3 ``` And for ```n == 10```: ``` 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ```","solution":"def fibonacci_sequence(n): Returns the first n terms of the Fibonacci sequence as a comma-separated string. if n <= 0: return \\"\\" fib_seq = [] a, b = 0, 1 for _ in range(n): fib_seq.append(a) a, b = b, a + b return \', \'.join(map(str, fib_seq))"},{"question":"Translate the given string from Morse code to English. Each Morse code sequence is separated by a space and each letter in the Morse code sequence is separated by a single space. An additional space separates words. Morse code and English alphabet mapping is given as follows: ``` \'.-\' : \'A\', \'-...\' : \'B\', \'-.-.\' : \'C\', \'-..\' : \'D\', \'.\' : \'E\', \'..-.\' : \'F\', \'--.\' : \'G\', \'....\' : \'H\', \'..\' : \'I\', \'.---\' : \'J\', \'-.-\' : \'K\', \'.-..\' : \'L\', \'--\' : \'M\', \'-.\' : \'N\', \'---\' : \'O\', \'.--.\' : \'P\', \'--.-\' : \'Q\', \'.-.\' : \'R\', \'...\' : \'S\', \'-\' : \'T\', \'..-\' : \'U\', \'...-\' : \'V\', \'.--\' : \'W\', \'-..-\' : \'X\', \'-.--\' : \'Y\', \'--..\' : \'Z\' ``` Example 1: Input: morse = \\"... --- ...\\" Output: \\"SOS\\" Explanation: The Morse code \\"... --- ...\\" translates to \\"SOS\\". Example 2: Input: morse = \\"... --- ... .-...\\" Output: \\"SOSL\\" Explanation: The Morse code \\"... --- ... .-...\\" translates to \\"SOSL\\". Your Task: You don\'t need to read or print anything. Your task is to complete the function `morseToEnglish()` which takes a string morse as input and returns the translated English string. Expected Time Complexity: O(n) where n is the length of the morse string. Expected Space Complexity: O(1) Constraints: 1 <= len(morse) <= 100","solution":"def morseToEnglish(morse): morse_dict = { \'.-\': \'A\', \'-...\': \'B\', \'-.-.\': \'C\', \'-..\': \'D\', \'.\': \'E\', \'..-.\': \'F\', \'--.\': \'G\', \'....\': \'H\', \'..\': \'I\', \'.---\': \'J\', \'-.-\': \'K\', \'.-..\': \'L\', \'--\': \'M\', \'-.\': \'N\', \'---\': \'O\', \'.--.\': \'P\', \'--.-\': \'Q\', \'.-.\': \'R\', \'...\': \'S\', \'-\': \'T\', \'..-\': \'U\', \'...-\': \'V\', \'.--\': \'W\', \'-..-\': \'X\', \'-.--\': \'Y\', \'--..\': \'Z\' } words = morse.split(\' \') # Separate different words by three spaces english_translation = [] for word in words: letters = word.split(\' \') translated_word = \'\'.join(morse_dict[letter] for letter in letters) english_translation.append(translated_word) return \'\'.join(english_translation)"},{"question":"Given an array B[1..M] of M integers, where each element represents the score of a student, you need to determine the maximum possible average score after removing exactly one element from the array. The average score is calculated as the sum of the elements in the array divided by the number of elements. Input The first line contains M, the number of integers in the array. The next line has M integers, the scores in the array. Output In a single line, output the maximum possible average score after removing one element, rounded to 2 decimal places. Constraints 2 <= M <= 10^5 -10^6 <= Bi <= 10^6 Example 1 Input 4 70 80 90 100 Output 90.00 Explanation Without removing any element, the average score is (70 + 80 + 90 + 100) / 4 = 85 After removing one element: - Remove 70: Average = (80 + 90 + 100) / 3 = 90 - Remove 80: Average = (70 + 90 + 100) / 3 = 86.67 - Remove 90: Average = (70 + 80 + 100) / 3 = 83.33 - Remove 100: Average = (70 + 80 + 90) / 3 = 80 Thus, the maximum possible average score after removing one element is 90.00 Example 2 Input 3 5 9 2 Output 7.00 Explanation Without removing any element, the average score is (5 + 9 + 2) / 3 = 5.33 After removing one element: - Remove 5: Average = (9 + 2) / 2 = 5.5 - Remove 9: Average = (5 + 2) / 2 = 3.5 - Remove 2: Average = (5 + 9) / 2 = 7.00 Thus, the maximum possible average score after removing one element is 7.00","solution":"def max_possible_avg_after_removal(scores): M = len(scores) total_sum = sum(scores) max_avg = float(\'-inf\') for score in scores: current_sum = total_sum - score current_avg = current_sum / (M - 1) if current_avg > max_avg: max_avg = current_avg return round(max_avg, 2)"},{"question":"You are given two integers A and B. Determine if A is divisible by B. -----Constraints----- - 1≤A≤10^5 - 1≤B≤10^5 -----Input----- Input is given from Standard Input in the following format: A B -----Output----- If A is divisible by B, print Yes; if not, print No. -----Sample Input----- 10 2 -----Sample Output----- Yes 10 is divisible by 2.","solution":"def is_divisible(A, B): Determines if A is divisible by B. Parameters: A (int): The dividend. B (int): The divisor. Returns: str: \\"Yes\\" if A is divisible by B, otherwise \\"No\\". if A % B == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"There is a key called a \\"shift key\\" which shifts the elements of a list to the right by a certain number of positions, wrapping around the end of the list. If an element is moved beyond the end of the list, it continues from the beginning of the list. Given a list of integers and the number of positions to shift, your task is to write a function that returns the list after applying the shift. -----Input----- The first line of input contains two integers n (1 ≤ n ≤ 100) and k (0 ≤ k ≤ 100) — the number of elements in the list and the number of positions to shift, respectively. The second line contains n integers separated by spaces — the elements of the list. -----Output----- Output the list after applying the shift to the right by k positions in one line, with the elements separated by spaces. -----Examples----- Input 5 2 1 2 3 4 5 Output 4 5 1 2 3 Input 4 1 7 8 9 10 Output 10 7 8 9","solution":"def shift_list(arr, k): Shifts the elements of the list to the right by k positions. Elements that fall off the end reappear at the beginning. :param arr: List of integers :param k: Number of positions to shift the list :return: List after applying the shift n = len(arr) # Make the shift effective within the length of the list k = k % n # Apply the shift return arr[-k:] + arr[:-k]"},{"question":"Write a function that takes a dictionary and a value as arguments and returns a list of all keys that have the given value associated.","solution":"def keys_with_value(d, value): This function takes a dictionary `d` and a value `value`, and returns a list of all keys that have the given value. return [key for key, val in d.items() if val == value]"},{"question":"You are given a sequence of integers. You have to determine if it is possible to rearrange the integers in such a way that no two consecutive integers in the rearranged sequence have the same absolute difference as any other pair of consecutive integers in the sequence. For example, given the sequence [1, 4, 2, 8], you can rearrange it to [1, 2, 8, 4], where the differences are [1 -> 2 (1), 2 -> 8 (6), 8 -> 4 (4)], which are all unique. Input The first line contains an integer, n (2 ≤ n ≤ 100), the number of elements in the sequence. The second line contains n integers representing the sequence. Output If it is possible to rearrange the sequence as described, print \\"YES\\" in the first line, followed by the rearranged sequence in the second line. If there are multiple solutions, you can print any of them. If it is not possible, print \\"NO\\". Examples Input 4 1 4 2 8 Output YES 1 2 8 4 Input 5 5 5 5 5 5 Output NO Note In the first example, the rearranged sequence ensures that no two consecutive absolute differences are the same. In the second example, since all elements are the same, it is impossible to have unique differences between consecutive integers. Hence, the output is \\"NO\\".","solution":"def can_rearrange_sequence(n, sequence): Determines if it is possible to rearrange the integers in such a way that no two consecutive integers in the rearranged sequence have the same absolute difference as any other pair of consecutive integers in the sequence. Args: n : int : number of elements in the sequence sequence : list of int : the sequence of integers Returns: str : \'YES\' and the rearranged sequence if possible, else \'NO\' # Sort the sequence sequence.sort() # Rearrange by alternating between the smallest and largest remaining elements rearranged_sequence = [] left, right = 0, n - 1 while left <= right: if left != right: rearranged_sequence.append(sequence[left]) rearranged_sequence.append(sequence[right]) else: rearranged_sequence.append(sequence[left]) left += 1 right -= 1 # Calculate differences differences = [] for i in range(1, n): differences.append(abs(rearranged_sequence[i] - rearranged_sequence[i - 1])) # Check if all differences are unique if len(differences) == len(set(differences)): return \\"YESn\\" + \\" \\".join(map(str, rearranged_sequence)) else: return \\"NO\\""},{"question":"You are given a list of non-negative integers. Your task is to determine if there exists a subset of these integers such that the sum of the subset is equal to a given target value. -----Input----- The input will be given in two lines. The first line contains a single integer, denoting the target value `T`. The second line contains a space-separated list of non-negative integers. -----Output----- Output \\"YES\\" if there exists a subset of the given integers whose sum is equal to the target value. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 9 3 34 4 12 5 2 Sample Output 1: YES Sample Input 2: 30 3 34 4 12 5 2 Sample Output 2: NO","solution":"def is_subset_sum_possible(target, nums): Determines if there exists a subset of the given list of non-negative integers such that the sum of the subset is equal to the target value. :param target: int, the target sum :param nums: List[int], list of non-negative integers :return: str, \\"YES\\" if such subset exists, otherwise \\"NO\\" n = len(nums) subset = [[False for _ in range(target + 1)] for _ in range(n + 1)] for i in range(n + 1): subset[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if nums[i - 1] <= j: subset[i][j] = subset[i - 1][j] or subset[i - 1][j - nums[i - 1]] else: subset[i][j] = subset[i - 1][j] return \\"YES\\" if subset[n][target] else \\"NO\\""},{"question":"You are developing a small command-line utility to calculate the total cost of items in a shopping cart. Each item has a name, a price, and a quantity. The utility should take a list of items and apply a 5% discount if the total cost before discount exceeds 100. Instructions * Write a function that takes a list of dictionaries, where each dictionary represents an item in the cart. Each dictionary will have the keys \'name\' (a string), \'price\' (a float), and \'quantity\' (an integer). * The function should return the total cost as a float, after applying the discount if applicable. The returned value should be rounded to two decimal places. * If the input list is empty, return 0.0. * If the input contains any invalid entries (e.g., missing keys, wrong data types), return None. Examples: ```python shopping_cart([{\'name\': \'apple\', \'price\': 0.5, \'quantity\': 10}, {\'name\': \'banana\', \'price\': 0.3, \'quantity\': 5}]) # Total cost before discount: (0.5 * 10) + (0.3 * 5) = 6.5 # Since 6.5 < 100, no discount applies. # Total cost after discount: 6.5 # Returns: 6.5 shopping_cart([{\'name\': \'laptop\', \'price\': 999.99, \'quantity\': 1}, {\'name\': \'mouse\', \'price\': 25.00, \'quantity\': 2}]) # Total cost before discount: (999.99 * 1) + (25.00 * 2) = 1049.99 # Since 1049.99 > 100, a 5% discount applies. # Total cost after discount: 1049.99 * 0.95 = 997.49 # Returns: 997.49 shopping_cart([{\'name\': \'pencil\', \'price\': 1.00, \'quantity\': 50}, {\'name\': \'notebook\', \'price\': 2.00, \'quantity\': 30}]) # Total cost before discount: (1.00 * 50) + (2.00 * 30) = 110.00 # Since 110.00 > 100, a 5% discount applies. # Total cost after discount: 110.00 * 0.95 = 104.50 # Returns: 104.50 shopping_cart([]) # The cart is empty, so the total cost is 0.0. # Returns: 0.0 shopping_cart([{\'name\': \'apple\', \'price\': 0.5}]) # Invalid entry (missing \'quantity\' key) # Returns: None ```","solution":"def shopping_cart(items): Calculate the total cost of items in a shopping cart, applying a 5% discount if the total cost before discount exceeds 100. Parameters: items (list): A list of dictionaries where each dictionary represents an item with \'name\' (str), \'price\' (float), and \'quantity\' (int). Returns: float: The total cost rounded to two decimal places after applying discounts, if any. Returns 0.0 for an empty list, and None for invalid input. if not isinstance(items, list): return None total_cost_before_discount = 0.0 for item in items: if not (isinstance(item, dict) and \'name\' in item and \'price\' in item and \'quantity\' in item and isinstance(item[\'name\'], str) and isinstance(item[\'price\'], (int, float)) and isinstance(item[\'quantity\'], int)): return None total_cost_before_discount += item[\'price\'] * item[\'quantity\'] if total_cost_before_discount > 100: total_cost_before_discount *= 0.95 return round(total_cost_before_discount, 2)"},{"question":"Given a string S consisting of alphabetic characters, determine the number of distinct characters in it. Input First Line of input contains integer T denoting number of test cases. Next T lines contain a string S Output For each test case, print the number of distinct characters in string S. Constraints 1 ≤ T ≤ 10 1 ≤ length of S ≤ 10^5 SAMPLE INPUT 2 hello world SAMPLE OUTPUT 4 5","solution":"def count_distinct_characters(test_cases): Determines the number of distinct characters in each string in test_cases. Parameters: test_cases (List[str]): A list of strings for which to count distinct characters. Returns: List[int]: A list of integers representing the number of distinct characters in each string. results = [] for s in test_cases: distinct_count = len(set(s)) results.append(distinct_count) return results"},{"question":"Given a list of integers heights representing the heights of blocks in a row, you are tasked to determine the maximum area of a rectangle that can be formed using consecutive blocks. You need to implement the function `maxRectangleArea(heights: List[int]) -> int`. This function should return the maximum possible rectangle area from the given block heights. # Constraints: - 1 <= len(heights) <= 10^5 - 1 <= heights[i] <= 10^4 # Examples: Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle area is formed by heights [5,6] which has an area of 5*2=10. Example 2: Input: heights = [2,4] Output: 4 Explanation: The largest rectangle area is formed by heights [2,4] which has an area of 4*1=4. Example 3: Input: heights = [6,7,5,2,4,5,9,3] Output: 16 Explanation: The largest rectangle area is formed by heights [5,2,4,5] which has an area of 4*4=16. # Note: The given function should run in O(n) time complexity.","solution":"def maxRectangleArea(heights): Returns the maximum area of a rectangle that can be formed using consecutive blocks. Uses a stack-based approach to achieve O(n) time complexity. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"In a large company with many employees, the manager wants to ensure that everyone follows a proper reporting structure. Each employee is identified by a unique integer ID and has one direct manager. The company\'s CEO does not report to anyone and has a manager ID of -1. Given a list of employee-manager pairs, identify the direct and indirect subordinates for a particular employee ID. ------ Input Format ------ - The first line of input will contain two integers, N and M, where N is the number of employee-manager pairs, and M is the number of queries. - For the next N lines, each line contains two integers, `emp` and `mgr`, where `emp` is the employee ID and `mgr` is the manager ID of `emp`. - For the next M lines, each line contains a single integer `id`, which is the employee ID for whom you need to find the total number of subordinates (both direct and indirect). ------ Output Format ------ For each query, output a single integer, the total number of subordinates for the given employee ID. ------ Constraints ------ - 1 ≤ N, M ≤ 100 - 1 ≤ emp, mgr ≤ 1000 - For any employee ID `emp`, there exists only one `mgr`. - emp ≠ mgr and ID will not point to itself. ----- Sample Input 1 ------ 6 3 1 2 2 3 4 3 5 4 6 5 7 6 3 5 1 ----- Sample Output 1 ------ 6 2 0 ----- Explanation 1 ------ In the example: - Employee 3 manages employees 2 and 4 directly, and indirectly manages employees 1, 5, 6, and 7. So, the total subordinates for employee 3 is 6. - Employee 5 directly manages employee 6 and indirectly manages employee 7. So, the total subordinates for employee 5 is 2. - Employee 1 does not manage any employees. So, the total subordinates for employee 1 is 0.","solution":"def count_subordinates(emp_mgr_pairs, queries): from collections import defaultdict def dfs(manager_id, subordinates_count): if manager_id in graph: for sub in graph[manager_id]: subordinates_count += 1 + dfs(sub, 0) return subordinates_count graph = defaultdict(list) for emp, mgr in emp_mgr_pairs: graph[mgr].append(emp) results = [] for query in queries: if query in graph: results.append(dfs(query, 0)) else: results.append(0) return results"},{"question":"You are given an array of n integers. Your task is to find a special subarray such that the difference between the maximum element and the minimum element in this subarray is as large as possible. A subarray is a contiguous part of the array. -----Input----- The first line contains one integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print a single integer — the difference between the maximum element and the minimum element in the special subarray with the largest difference. -----Examples----- Input 5 1 2 3 4 5 Output 4 Input 8 4 9 2 10 7 5 6 3 Output 8 Input 4 4 4 4 4 Output 0 -----Note----- For the first example, the subarray could be the whole array: [1, 2, 3, 4, 5]. The maximum difference is 5 - 1 = 4. For the second example, the subarray [2, 10] has the maximum difference 10 - 2 = 8. For the third example, all elements are the same, so the maximum difference is always 0.","solution":"def max_difference_subarray(arr): Returns the difference between the maximum element and the minimum element in the subarray with the largest difference. max_elem = max(arr) min_elem = min(arr) return max_elem - min_elem"},{"question":"You have a list of integers, and you need to find if there exists a pair of indices (i, j) such that i < j and the product of the elements at these indices is equal to a given integer k. If such a pair exists, return the indices (i, j) as a tuple. If no such pair exists, return -1. -----Constraints----- - All values in input are integers. - 2 leq n leq 1000, where n is the number of elements in the list. - -10^5 leq list[i] leq 10^5, where list[i] is an element of the integer list. -----Input----- Input is given from Standard Input in the following format: n list k -----Output----- Print a tuple (i, j) if the pair exists, otherwise print -1. -----Sample Input----- 5 2 3 7 8 4 21 -----Sample Output----- (1, 2) In the given example, the product of list[1] (3) and list[2] (7) is 21, so the output is the indices (1, 2).","solution":"def find_pair_with_product(n, lst, k): Given a list of integers, find if there exists a pair of indices (i, j) such that i < j and the product of the elements at these indices is equal to a given integer k. If such a pair exists, return the indices (i, j) as a tuple. If no such pair exists, return -1. Args: n (int): Number of elements in the list. lst (list of int): List of integers. k (int): The product to find. Returns: tuple or int: A tuple (i, j) of indices if a pair is found, otherwise -1. for i in range(n): for j in range(i + 1, n): if lst[i] * lst[j] == k: return (i, j) return -1"},{"question":"You are working on a software system that backs up files to a remote server. The system needs to ensure that files are backed up in such a way that no identical files are backed up more than once. Two files are considered identical if they have the exact same content, regardless of their names. You have been given the task of developing a function that determines which files need to be backed up. You are given a list of files, where each file is represented as a string of characters (the content of the file). Your function should return a list of file indices that need to be backed up initially. A file\'s index is its position in the input list (0-based index). ---- Input Format ---- - The first line contains an integer n, the number of files. - Each of the next n lines contains a string s, the content of the file. ---- Output Format ---- - Output a list of integers, representing the indices of the files that need to be backed up. ---- Constraints ---- 1 leq n leq 10^5 1 leq |s| leq 100 - All strings contain only printable ASCII characters. ---- Sample Input 1 ---- 4 abc def abc ghi ---- Sample Output 1 ---- [0, 1, 3] ---- Explanation 1 ---- - Files at indices 0 and 2 are identical, so only the first occurrence (index 0) should be backed up. - Files at indices 1 and 3 are unique, so they should also be backed up. ---- Sample Input 2 ---- 3 content1 content2 content3 ---- Sample Output 2 ---- [0, 1, 2] ---- Explanation 2 ---- - All files are unique and should be backed up. Your task is to implement the function: ```python def files_to_backup(n: int, files: List[str]) -> List[int]: pass ``` Write an efficient solution considering the provided constraints.","solution":"from typing import List def files_to_backup(n: int, files: List[str]) -> List[int]: unique_files = set() backup_indices = [] for index, file_content in enumerate(files): if file_content not in unique_files: unique_files.add(file_content) backup_indices.append(index) return backup_indices"},{"question":"Given a binary tree, find the sum of the values of all the nodes that are the deepest leaves of the tree. -----Input:----- - The first line contains the number of nodes N. - Each of the next N lines contains three integers p, c, d representing: - p: the value of a parent node. - c: the value of a child node. - d: a number (0 or 1) where 0 means c is the left child and 1 means c is the right child. The tree is guaranteed to be a valid binary tree with unique node values. -----Output:----- - Print a single integer which is the sum of the values of the deepest leaf nodes. -----Constraints----- - 1 leq N leq 10^4 - -10^4 leq p, c leq 10^4 -----Sample Input:----- 6 1 2 0 1 3 1 2 4 0 2 5 1 3 6 0 3 7 1 -----Sample Output:----- 22 -----Explanation:----- - The binary tree constructed is: 1 / 2 3 / / 4 5 6 7 - The deepest leaves are 4, 5, 6, and 7, and their sum is 4 + 5 + 6 + 7 = 22.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def deepestLeavesSum(edges): from collections import defaultdict, deque if not edges: return 0 tree = defaultdict(TreeNode) for p, c, d in edges: if p not in tree: tree[p] = TreeNode(val=p) if c not in tree: tree[c] = TreeNode(val=c) if d == 0: tree[p].left = tree[c] else: tree[p].right = tree[c] if not tree: return 0 root = tree[edges[0][0]] queue = deque([root]) while queue: level_sum = 0 size = len(queue) for _ in range(size): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) return level_sum def sum_of_deepest_leaves(node_count, edge_list): edges = [tuple(map(int, edge.split())) for edge in edge_list] return deepestLeavesSum(edges)"},{"question":"Alice and Bob are playing a game of collecting coins. They have an array of n integers that represent piles of coins where each pile has a certain number of coins. The game is played as follows: 1. Alice always goes first. 2. On each player\'s turn, they must pick the largest remaining pile of coins. 3. If there are multiple piles with the same largest number of coins, the player can pick any one of those piles. The game continues until there are no more piles left. The goal for both players is to collect as many coins as possible by the end of the game. Determine the number of coins collected by each player if both play optimally. Input The first line contains an integer n (1 ≤ n ≤ 1000). The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the number of coins in each pile. The numbers are separated by spaces. Output Print two integers representing the number of coins collected by Alice and Bob, respectively. Examples Input 4 4 1 2 8 Output 12 3 Input 3 5 5 5 Output 10 5 Note In the first example, the game proceeds as follows: - Alice picks the pile with 8 coins. - Bob picks the pile with 4 coins. - Alice picks the pile with 2 coins. - Bob picks the pile with 1 coin. Therefore, Alice collects 8 + 2 = 10 coins, and Bob collects 4 + 1 = 5 coins. In the second example, the game proceeds as follows: - Alice picks one pile with 5 coins. - Bob picks one pile with 5 coins. - Alice picks the last pile with 5 coins. Therefore, Alice collects 5 + 5 = 10 coins, and Bob collects 5 coins.","solution":"def collect_coins(piles): Determines the number of coins collected by Alice and Bob if both play optimally. Parameters: piles (list): List of integers where each integer represents the number of coins in a pile. Returns: tuple: A tuple containing two integers, representing the number of coins collected by Alice and Bob respectively. # Sort the piles in descending order sorted_piles = sorted(piles, reverse=True) alice_coins = 0 bob_coins = 0 # Iterate over sorted piles, alternating between Alice\'s and Bob\'s turns for i in range(len(sorted_piles)): if i % 2 == 0: alice_coins += sorted_piles[i] else: bob_coins += sorted_piles[i] return alice_coins, bob_coins"},{"question":"You are given an integer N. Print the string obtained by repeating the integer N times, concatenated into a single string. For example, if N = 4, print `4444`. Constraints * 1 leq N leq 9 * All values in input are integers. Input Input is given from Standard Input in the following format: N Output Print the string obtained by repeating the integer N times, concatenated into a single string. Example Input 4 Output 4444","solution":"def repeat_integer(N): Returns the string obtained by repeating the integer N times concatenated into a single string. return str(N) * N"},{"question":"In a city named Technoville, there\'s a famous technical university that is known for its challenging programming assignments. One of the professors in the Algorithms course decided to test the student\'s problem-solving skills by giving them a unique task related to strings. The problem involves a string S and a series of queries. Each query consists of two integers l and r, and a character c. For each query, the students are required to determine the number of times the character c appears in the substring of S starting at index l and ending at index r, inclusive. All indices in the string S are 1-based. Your task is to help the students by providing a solution to efficiently answer the queries. INPUT: The first line of the input contains a string S consisting of lowercase English letters. The second line contains an integer Q, the number of queries. Each of the next Q lines contains two integers l and r (1 ≤ l ≤ r ≤ length of S) and a character c, describing a particular query. OUTPUT: For each query, output the number of times the character c appears in the substring S[l:r]. CONSTRAINTS: 1 ≤ length of S ≤ 10^5 1 ≤ Q ≤ 10^4 SAMPLE INPUT abcabcabc 3 1 3 a 4 6 b 1 9 c SAMPLE OUTPUT 1 1 3","solution":"def count_char_in_substring(S, queries): For each query, returns the number of times the character c appears in the substring from index l to r in the string S. Args: S : str - The input string. queries : list of tuples - A list of queries where each query is a tuple (l, r, c). Returns: results : list - A list of integers representing the results for each query. # Convert 1-based indices to 0-based indices results = [] for (l, r, c) in queries: substring = S[l-1:r] results.append(substring.count(c)) return results"},{"question":"You are given an array of integers A of size N. You are allowed to perform the following operations on A: Increment: Pick an index i (1 ≤ i ≤ N) and increment the i-th element by 1. For e.g. [3, 2, 5, 3] → [3, 2, 5, 4] (if i=4) Decrement: Pick an index i (1 ≤ i ≤ N) and decrement the i-th element by 1. For e.g. [3, 2, 5, 3] → [3, 2, 4, 3] (if i=3) Your goal is to make all the elements of the array equal. Find the minimum number of operations required to do so. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, the size of the array A. - The second line of each test case contains N integers, representing the elements of the array A. ------ Output Format ------ For each test case, output a single line containing one integer - the minimum number of operations required to make all the elements of A equal. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 - It is guaranteed that the sum of N over all test cases does not exceed 10^5. ------ Subtasks ------ Subtask #1 (10 points): 1 ≤ N ≤ 10 Subtask #2 (20 points): 1 ≤ N ≤ 100 Subtask #3 (70 points): Original constraints ----- Sample Input 1 ------ 3 4 1 2 3 4 3 5 5 5 5 2 2 2 2 1 ----- Sample Output 1 ------ 4 0 1 ----- Explanation 1 ------ In the first test case, - Increment the first element: [1, 2, 3, 4] → [2, 2, 3, 4] - Increment the first element again: [2, 2, 3, 4] → [3, 2, 3, 4] - Increment the second element: [3, 2, 3, 4] → [3, 3, 3, 4] - Increment the fourth element: [3, 3, 3, 4] → [3, 3, 3, 3] In the second test case, all elements are already equal, so no operations are needed. In the third test case, - Increment the fifth element: [2, 2, 2, 2, 1] → [2, 2, 2, 2, 2]","solution":"def min_operations_to_equal_elements(test_cases): results = [] for N, A in test_cases: median = sorted(A)[N // 2] operations = sum(abs(x - median) for x in A) results.append(operations) return results def process_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) A = list(map(int, input_lines[index + 1].split())) test_cases.append((N, A)) index += 2 return test_cases"},{"question":"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, j != k, and k != i, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. Example 1: Input: nums = [-1,0,1,2,-1,-4] Output: [ [-1,-1,2], [-1,0,1] ] Example 2: Input: nums = [] Output: [] Example 3: Input: nums = [0] Output: [] Constraints: - 0 <= nums.length <= 3000 - -10^5 <= nums[i] <= 10^5","solution":"def three_sum(nums): Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, j != k, and k != i, and nums[i] + nums[j] + nums[k] == 0. The solution does not contain duplicate triplets. Args: nums (list): List of integers. Returns: list: List of unique triplets that sum up to zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"A nearby village has recently been experiencing issues with their phone lines. A technician discovered that due to faulty wiring, phone numbers have been scrambled. The village council needs your help to determine whether a given number sequence is a valid village phone number after unscrambling. In this village, each phone number is always composed of unique digits and is exactly 6 digits long. The range for each digit is 0-9. Task You will need to create a function that takes in a sequence of 6 digits (not necessarily in order) and you will need to determine if this sequence can be rearranged to form a valid phone number for the village. # Constraints The sequence provided will always have 6 digits. Each digit in the sequence is between 0 and 9. # Examples ``` [ \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\" ] --> True (Since this can form the phone number \\"123456\\") [ \\"1\\", \\"1\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\" ] --> False (Since this sequence has duplicate digits) [ \\"0\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\" ] --> True (Since this can form the phone number \\"023456\\") ``` **Good luck!**","solution":"def is_valid_phone_number(sequence): Determine if the sequence can be rearranged to form a valid phone number. sequence: list of strings, where each string is a single digit from \\"0\\" to \\"9\\" Returns True if the sequence is a valid phone number, False otherwise. # A valid phone number in the village has: # 1. Exactly 6 digits # 2. All digits are unique # Since the problem guarantees that the length of the sequence is always 6, we only need to check for uniqueness # Convert the list to a set to automatically remove duplicates and then compare its length return len(set(sequence)) == 6"},{"question":"Given an array of size N, we want you to determine the length of the longest subsequence such that elements in the subsequence are in increasing order and have a difference of at most 2. Input: The first line contains N, the number of elements in the array. This is followed by a line containing N space-separated integers representing the elements of the array. Output: Print the length of the longest subsequence which is in increasing order with a difference of at most 2 between consecutive elements. Constraints: 1 ≤ N ≤ 100 1 ≤ Elements of array ≤ 1000 Explanation: For the array [1, 3, 2, 4, 6], the longest subsequence that satisfies the condition is [1, 2, 4, 6]. SAMPLE INPUT 5 1 3 2 4 6 SAMPLE OUTPUT 4","solution":"def longest_increasing_subsequence_with_diff_at_most_2(arr): Find the length of the longest subsequence such that elements in the subsequence are in increasing order and have a difference of at most 2 between consecutive elements. if not arr: return 0 n = len(arr) # Initialize dp array where each element is at least a subsequence of length 1 (itself) dp = [1] * n # Build the dp array for i in range(1, n): for j in range(i): if arr[i] > arr[j] and arr[i] - arr[j] <= 2: dp[i] = max(dp[i], dp[j] + 1) # Find the length of the longest subsequence return max(dp)"},{"question":"Alice is an avid collector of vintage coins and wants to organize her collection. She has recently acquired some new coins and wants to find the best way to store them without causing any damage. Alice can use the following sturdy cylinders to store her coins: 1. Type A: Diameter 1 cm, Height 10 cm 2. Type B: Diameter 2 cm, Height 5 cm 3. Type C: Diameter 3 cm, Height 7 cm Each coin has a unique diameter, and none of the coins can be bent or resized to fit into a cylinder of smaller diameter. Alice needs to find which cylinder type she should use for each coin to ensure they fit without any excess space. In case the coin\'s diameter matches exactly with one of the available cylinder types, she should use the type with the smallest permissible height. Input: - The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. - Each test case contains two lines: - The first line contains an integer N (1 ≤ N ≤ 100), the number of coins. - The second line contains N space-separated integers D[i] (1 ≤ D[i] ≤ 100), representing the diameters of the coins. Output: - For each test case, print a line with N space-separated integers, where each integer represents the cylinder type (1 for Type A, 2 for Type B, 3 for Type C) that Alice should use for each of her coins. SAMPLE INPUT 2 3 1 2 3 4 3 2 1 2 SAMPLE OUTPUT 1 2 3 3 2 1 2 Explanation: In the first test case, Alice has three coins with diameters 1 cm, 2 cm, and 3 cm. She will use Type A for the coin of diameter 1 cm, Type B for the coin of diameter 2 cm, and Type C for the coin of diameter 3 cm. In the second test case, Alice has four coins with diameters 3 cm, 2 cm, 1 cm, and 2 cm. She will use Type C for the coin of diameter 3 cm, Type B for the coins of diameter 2 cm, and Type A for the coin of diameter 1 cm.","solution":"def find_cylinder_types(T, test_cases): # Constants for cylinder types TYPE_A_DIAMETER = 1 TYPE_B_DIAMETER = 2 TYPE_C_DIAMETER = 3 result = [] for t in range(T): N = test_cases[t][\'N\'] diameters = test_cases[t][\'diameters\'] types = [] for diameter in diameters: if diameter == TYPE_A_DIAMETER: types.append(1) elif diameter == TYPE_B_DIAMETER: types.append(2) elif diameter == TYPE_C_DIAMETER: types.append(3) result.append(\\" \\".join(map(str, types))) return result"},{"question":"Given a binary tree, you need to implement an algorithm to find the number of unique paths from the root to the leaf, such that the sum of the values of nodes on the path equals a given target sum. A leaf node is any node that does not have any children. Input Format - The first line contains an integer n — the number of nodes in the binary tree. - The second line contains n space-separated integers representing the values of the nodes in level-order traversal of the binary tree. - The third line contains an integer targetSum — the target sum for the paths. The binary tree is given in level-order format. Null nodes are represented by -1 in the input. Constraints - 1 leq n leq 10^4 - -1000 leq Node Value leq 1000 - -100000 leq targetSum leq 100000 Output Format Print a single integer denoting the number of unique paths from the root to leaf that sum up to the target sum. Sample Input 7 5 4 8 11 -1 13 4 7 2 -1 -1 -1 1 22 Sample Output 1 Explanation The binary tree can be visualized as follows: ``` 5 / 4 8 / / 11 13 4 / 7 2 1 ``` There is one path where the sum of the node values equals 22: 5 -> 4 -> 11 -> 2. Thus the output is 1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def number_of_paths_with_sum(root, targetSum): Returns the number of paths that sum to the targetSum from root to leaf. if not root: return 0 def dfs(node, current_sum): if not node: return 0 current_sum += node.val if not node.left and not node.right: # If leaf node return 1 if current_sum == targetSum else 0 return dfs(node.left, current_sum) + dfs(node.right, current_sum) return dfs(root, 0) def build_tree(level_order): Builds a binary tree from level order traversal input if not level_order: return None it = iter(level_order) root = TreeNode(next(it)) queue = [root] while queue: node = queue.pop(0) left_val, right_val = next(it, None), next(it, None) if left_val is not None and left_val != -1: node.left = TreeNode(left_val) queue.append(node.left) if right_val is not None and right_val != -1: node.right = TreeNode(right_val) queue.append(node.right) return root"},{"question":"You are given an array of integers. Your task is to process a set of queries where each query asks for the smallest number in a subarray defined by a range [l, r] (inclusive) within the original array. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000), where n is the number of elements in the array and q is the number of queries. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the elements of the array. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), defining the range for the query. Output Print q lines, with each line containing the smallest number in the subarray from l to r for the corresponding query. Examples Input 6 3 4 6 1 5 9 2 1 3 4 6 2 5 Output 1 2 1 Input 5 2 7 2 3 0 5 2 4 1 5 Output 0 0","solution":"def find_minimum_in_range(n, q, arr, queries): For each query, find the minimum integer in the subarray defined by the range [l, r]. :param n: Number of elements in the array :param q: Number of queries :param arr: List of integers representing the array :param queries: List of tuples (l, r) representing the ranges for the queries :return: List of integers representing the minimum value for each query result = [] for l, r in queries: result.append(min(arr[l-1:r])) return result # Example usage: # n = 6 # q = 3 # arr = [4, 6, 1, 5, 9, 2] # queries = [(1, 3), (4, 6), (2, 5)] # find_minimum_in_range(n, q, arr, queries)"},{"question":"You are developing a simplified contacts application. You will be given a list of dictionaries, each representing a contact with the keys \'name\' and \'number.\' The \'name\' is a string containing the contact\'s name, while the \'number\' is a string containing their phone number. Your task is to create a function that receives this contact list and a specific name as input, and returns the corresponding phone number. If the contact name is not found in the list, return \'Not found.\' Example: Input: contacts = [ {\'name\': \'Alice\', \'number\': \'123-456-7890\'}, {\'name\': \'Bob\', \'number\': \'234-567-8901\'}, {\'name\': \'Charlie\', \'number\': \'345-678-9012\'} ], name = \'Bob\' Output: \'234-567-8901\' Input: contacts = [ {\'name\': \'Alice\', \'number\': \'123-456-7890\'}, {\'name\': \'Bob\', \'number\': \'234-567-8901\'}, {\'name\': \'Charlie\', \'number\': \'345-678-9012\'} ], name = \'Dave\' Output: \'Not found\'","solution":"def find_contact_number(contacts, name): Returns the phone number of the contact with the given name. If the contact name is not found, returns \'Not found\'. Args: contacts (list of dict): The list of contacts with keys \'name\' and \'number\'. name (str): The name of the contact to find. Returns: str: The phone number of the contact or \'Not found\' if the contact does not exist. for contact in contacts: if contact[\'name\'] == name: return contact[\'number\'] return \'Not found\'"},{"question":"Given a matrix of size M x N, where each element is either 0 or 1, you need to find the size of the largest square submatrix consisting entirely of 1s. Constraints * 1 leq M, N leq 1000 * Elements of the matrix (a_{ij}) are 0 or 1 (0 leq a_{ij} leq 1) Input Input is given from Standard Input in the following format: M N a_{11} a_{12} ... a_{1N} a_{21} a_{22} ... a_{2N} : a_{M1} a_{M2} ... a_{MN} Output Print the size (area) of the largest square submatrix consisting entirely of 1s. Examples Input 3 4 1 0 1 0 1 1 1 1 1 1 1 1 Output 4 Input 5 5 0 1 1 0 1 1 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 1 1 0 Output 9","solution":"def largest_square_submatrix(matrix): Finds the area of the largest square submatrix consisting entirely of 1s. if not matrix: return 0 M, N = len(matrix), len(matrix[0]) dp = [[0] * N for _ in range(M)] max_side = 0 for i in range(M): for j in range(N): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side ** 2"},{"question":"The inventory management system of a grocery store needs to keep track of product expiration dates to ensure the freshness of its stock. Products are identified by unique codes, and each product has an associated expiration date represented in the format \\"DD-MM-YYYY\\". You have been tasked with designing a function that determines whether a given product is expired based on the current date. If the product is expired, the function should return \\"Expired\\". Otherwise, it should return \\"Not Expired\\". Input format: - The first line contains a string representing the current date in the format \\"DD-MM-YYYY\\". - The second line contains a string representing the expiration date of the product in the format \\"DD-MM-YYYY\\". Output format: - Print \\"Expired\\" if the product is expired based on the current date. - Print \\"Not Expired\\" if the product is still within its valid period. Constraints: - The dates will always be valid and follow the given format. - The given dates will not be earlier than the year 2000. SAMPLE INPUT 15-10-2023 14-10-2023 SAMPLE OUTPUT Expired Explanation Since the product\'s expiration date (14-10-2023) is before the current date (15-10-2023), it is considered expired, and the function returns \\"Expired\\".","solution":"from datetime import datetime def check_expiration(current_date, expiration_date): Checks if the product is expired based on the current date. :param current_date: string representing the current date in the format \\"DD-MM-YYYY\\" :param expiration_date: string representing the expiration date in the format \\"DD-MM-YYYY\\" :return: \\"Expired\\" if the product is expired, \\"Not Expired\\" otherwise current_date_obj = datetime.strptime(current_date, \'%d-%m-%Y\') expiration_date_obj = datetime.strptime(expiration_date, \'%d-%m-%Y\') if expiration_date_obj < current_date_obj: return \\"Expired\\" else: return \\"Not Expired\\""},{"question":"You are given a sequence of integers. You can perform the following operation any number of times: choose any contiguous subarray and reverse its elements. Your task is to determine if it is possible to make the entire sequence non-decreasing using any number of such operations. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a_{1}, a_{2}, ..., a_{n} (0 ≤ a_{i} ≤ 10^9) — the elements of the sequence. -----Output----- Output \\"YES\\" (without quotes) if it is possible to make the entire sequence non-decreasing using the allowed operations. Otherwise, output \\"NO\\". -----Examples----- Input 4 1 2 3 4 Output YES Input 5 4 3 2 1 5 Output YES Input 5 1 3 5 4 2 Output NO -----Note----- In the first example, the sequence is already non-decreasing, so no operations are needed. In the second example, you can reverse the subarray [4, 3, 2, 1] to get [1, 2, 3, 4, 5], which is non-decreasing. In the third example, no matter which subarray you reverse, you cannot get the entire sequence to be non-decreasing.","solution":"def can_sort_by_reversing_subarray(n, sequence): Determines if it\'s possible to make the sequence non-decreasing by reversing any number of subarrays. # Check if the sequence is already non-decreasing if sequence == sorted(sequence): return \\"YES\\" # Find the first index from the left where the sequence is not increasing left = 0 while left < n - 1 and sequence[left] <= sequence[left + 1]: left += 1 # Find the first index from the right where the sequence is not increasing right = n - 1 while right > 0 and sequence[right] >= sequence[right - 1]: right -= 1 # Reverse the elements between left and right (inclusive) subarray_reversed = sequence[:left] + sequence[left:right + 1][::-1] + sequence[right + 1:] # Check if the whole sequence is non-decreasing after reversing the subarray if subarray_reversed == sorted(subarray_reversed): return \\"YES\\" return \\"NO\\""},{"question":"In a coding competition, participants are tasked with finding the best combination of points in a 2D grid. The grid is represented as an N times M matrix, where each cell contains a point value. The goal is to select one cell from each row such that the sum of the selected cells\' point values is maximized. However, participants must ensure that no two selected cells are in the same column. Each participant is given the values in the grid, and they must write a program to compute the maximum possible sum under the given constraints. -----Input----- The first line of input contains two integers N and M (1 leq N, M leq 20), representing the dimensions of the grid. The next N lines each contain M integers. The j-th integer on the i-th line represents the point value at the i-th row and j-th column of the grid. Point values can range from -1000 to 1000. -----Output----- Output the maximum possible sum of points that can be obtained by selecting one cell from each row with no two cells in the same column. -----Examples----- Sample Input 1: 3 3 1 2 3 4 5 6 7 8 9 Sample Output 1: 15 Sample Input 2: 2 2 1 -1 -1 3 Sample Output 2: 4 Sample Input 3: 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Sample Output 3: 34","solution":"from itertools import permutations def max_sum_no_same_column(grid): Given a 2D grid, find the maximum possible sum of points obtained by selecting one cell from each row such that no two cells are in the same column. :param grid: List[List[int]], 2D array representing the grid :return: int, maximum possible sum under the given constraints N = len(grid) M = len(grid[0]) max_sum = float(\'-inf\') for cols in permutations(range(M), N): current_sum = 0 for i in range(N): current_sum += grid[i][cols[i]] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a city roadmap represented by a grid of `n` rows and `m` columns, you need to determine the shortest distance from a starting point to a destination. Roads are represented as empty cells (\'.\') and obstacles are represented as blocked cells (\'#\'). You can move up, down, left, or right on the grid, but you cannot pass through obstacles. If there is no possible route to the destination, return -1. # Input The input consists of multiple test cases. Each test case is given in the following format: The first line contains two integers, `n` (1 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 1000), representing the number of rows and columns, respectively. The next `n` lines each contain a string of `m` characters, which is the grid representation. Each character in the string is either \'.\' (road) or \'#\' (obstacle). The last line of each test case contains four integers `sx`, `sy`, `dx`, and `dy` (0 ≤ sx, sy, dx, dy < 1000), representing the starting row, starting column, destination row, and destination column respectively. When `n` and `m` are given as 0, it indicates the end of input. # Output For each test case, output a single integer on a new line, which is the minimum number of steps from the starting point to the destination. If there is no valid path, output -1. # Examples Input ``` 5 7 ....... .#..#.. ....... ..#.. ....... 0 0 4 6 3 3 .#. .#. .#. 0 0 2 2 0 0 ``` Output ``` 10 -1 ``` # Note - The grid is guaranteed to contain at least one \'.\'. - The starting point and the destination point are always \'.\'. - The end marker (`0 0` after the test cases) should not be processed.","solution":"from collections import deque def shortest_path(n, m, grid, sx, sy, dx, dy): if n == 0 or m == 0: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) # (current_row, current_col, steps) visited = set() visited.add((sx, sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (dx, dy): return steps for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 def process_input(input_data): lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): nm_line = lines[index].strip() if nm_line == \'0 0\': break n, m = map(int, nm_line.split()) index += 1 grid = [] for _ in range(n): grid.append(lines[index].strip()) index += 1 sx, sy, dx, dy = map(int, lines[index].strip().split()) index += 1 results.append(shortest_path(n, m, grid, sx, sy, dx, dy)) return results"},{"question":"A large online bookstore has a unique system to recommend books to its customers based on their recent purchases. The recommendation system suggests books purchased by other customers who have also bought the same book. However, there is a constraint that the recommendation system should not suggest books that the customer has already purchased. The system stores information about the purchases of n customers in a database. Each customer has a unique integer ID and has purchased a list of books. Books are identified by unique integer IDs. Your task is to implement a function to recommend books to a given customer based on the purchase history of other customers who have bought at least one book that the given customer has bought. The recommendation should be sorted by book ID in ascending order and no duplicate recommendations should be present. -----Input----- The first line contains an integer n (1 leq n leq 50000) — the number of customers. The i-th of the next n lines contains an integer c_i (1 leq c_i leq 10^9) — the number of books purchased by the i-th customer, followed by c_i integers representing the book IDs (1 leq c_i leq 1000). The last line contains the integer ID of the customer for whom recommendations are to be generated. -----Output----- Print the book IDs, separated by a space, that should be recommended to the given customer. -----Examples----- Input 3 3 1 2 3 2 2 4 4 1 3 4 5 1 Output 4 5 Input 2 2 6 7 3 6 8 9 6 Output 8 9 Note: In the first example, the customer with ID 1 has purchased books 1, 2, and 3. The other customers who have bought books 1, 2, or 3 have book IDs 4 and 5 available that the customer hasn\'t yet purchased. Hence, 4 and 5 are recommended. In the second example, the customer with ID 6 has purchased book IDs 6 and 7. Another customer who has bought book 6 has book IDs 8 and 9 available that the customer hasn\'t yet purchased. Hence, 8 and 9 are recommended.","solution":"def recommend_books(customers, customer_id): Recommends books to the given customer based on other customers\' purchases. Parameters: customers (dict): Dictionary where key is customer_id and value is list of purchased book IDs customer_id (int): The customer_id for whom we need to generate recommendations Returns: list: List of book IDs recommended to the customer_id if customer_id not in customers: return [] customer_books = set(customers[customer_id]) recommendation_set = set() for other_customer_id, books in customers.items(): if other_customer_id == customer_id: continue if customer_books.intersection(books): recommendation_set.update(books) recommendation_set.difference_update(customer_books) return sorted(recommendation_set) # Example Usage: # customers = { # 1: [1, 2, 3], # 2: [2, 4], # 3: [1, 3, 4, 5] # } # customer_id = 1 # print(recommend_books(customers, customer_id)) # Output: [4, 5]"},{"question":"Consider a warehouse grid represented as an M times N matrix where each cell can be one of the following: - `0`: an empty cell - `1`: an obstacle - `2`: a conveyor belt cell - `3`: a loading zone A robot starts at the top-left corner of the grid and its goal is to reach any of the loading zones. The robot can move up, down, left, or right into cells that are empty (`0`) or conveyor belts (`2`). When the robot steps into a conveyor belt cell, it will automatically move to the next empty cell in the direction of the conveyor belt. If it is a dead-end or leads back to an obstacle, the robot will stop at the current cell. You need to write a function `find_shortest_path` to determine the minimum steps needed for the robot to reach any loading zone (`3`). If it is impossible to reach any loading zone, return `-1`. # Function Signature ```python def find_shortest_path(grid: List[List[int]]) -> int: ``` # Input - `grid`: a list of lists of integers representing the grid. (2 ≤ M, N ≤ 1000) The directions of the conveyor belt cells are given by: - `2 (up)` - `4 (down)` - `6 (left)` - `8 (right)` # Output - Return the minimum number of steps needed to reach any loading zone, or `-1` if it is not possible. # Example ```python grid = [ [0, 0, 4, 0], [1, 6, 1, 3], [2, 0, 0, 0], [0, 0, 0, 0] ] print(find_shortest_path(grid)) # Output: 6 ``` # Explanation: - The initial path is as follows. - Move right, step on conveyor belt `4`, automatically moves down. - Then move left, but stop before hitting obstacle. - Move down, then left to reach loading zone. # Constraints - The robot will not move out of the grid boundaries. # What to consider: - Make sure to account for the directions that conveyor belts move the robot. - Ensure to handle grid boundaries and obstacles correctly. - Think carefully about how you\'ll avoid infinite loops with conveyor belts.","solution":"from typing import List, Tuple from collections import deque def find_shortest_path(grid: List[List[int]]) -> int: rows = len(grid) cols = len(grid[0]) directions = { 2: (-1, 0), # Up 4: (1, 0), # Down 6: (0, -1), # Left 8: (0, 1), # Right } def get_next_position(x: int, y: int) -> Tuple[int, int]: while grid[x][y] in directions: dx, dy = directions[grid[x][y]] nx, ny = x + dx, y + dy if not (0 <= nx < rows and 0 <= ny < cols) or grid[nx][ny] == 1: break x, y = nx, ny return x, y queue = deque([(0, 0, 0)]) # x, y, steps visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if grid[x][y] == 3: return steps for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] != 1: next_x, next_y = get_next_position(nx, ny) if (next_x, next_y) not in visited: visited.add((next_x, next_y)) queue.append((next_x, next_y, steps + 1)) return -1"},{"question":"You are given a string S and a pattern P. Your task is to implement a function that checks if the string S follows the given pattern. The pattern P is composed of lowercase letters (\'a\' to \'z\') and each character represents a distinct word in the string S. Example 1: Input: S = \\"dog cat cat dog\\" P = \\"abba\\" Output: True Explanation: The string S matches the pattern P, with \'a\' corresponding to \\"dog\\" and \'b\' corresponding to \\"cat\\". Example 2: Input: S = \\"dog cat cat fish\\" P = \\"abba\\" Output: False Explanation: The string S does not match the pattern P, as the word \\"fish\\" does not correspond to the repeated character \'b\' in the pattern. Example 3: Input: S = \\"dog dog dog dog\\" P = \\"aaaa\\" Output: True Explanation: The string S matches the pattern P, with \'a\' corresponding to \\"dog\\". Your Task: You don\'t need to read input. Your task is to complete the function isPatternMatch() which takes a string S and a string P as input parameters and returns a boolean value indicating whether the string follows the given pattern. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(S) ≤ 1000 1 ≤ len(P) ≤ 100 S consists of words separated by spaces. P consists of lowercase letters.","solution":"def isPatternMatch(S, P): Checks if the string S follows the pattern P. :param S: String consisting of words separated by spaces. :param P: Pattern string consisting of lowercase letters. :return: Boolean value indicating whether the string follows the given pattern. words = S.split() if len(words) != len(P): return False word_to_pattern = {} pattern_to_word = {} for word, pattern_char in zip(words, P): if word in word_to_pattern and word_to_pattern[word] != pattern_char: return False if pattern_char in pattern_to_word and pattern_to_word[pattern_char] != word: return False word_to_pattern[word] = pattern_char pattern_to_word[pattern_char] = word return True"},{"question":"Anna, a renowned scientist, is investigating a new type of crystal growth. These crystals grow in an exponentially regenerative pattern, where each crystal\'s growth is influenced by its previous states. In this experiment, she needs to predict the size of the crystal on different days to ensure they do not outgrow their containers. The growth of the crystal can be modeled mathematically. The size of the crystal on day `n` can be represented as text{size}(n). The relationship between the size on day `n` and previous days is given by: [ text{size}(n) = begin{cases} a cdot text{size}(n-1) + b cdot text{size}(n-2) & text{if } n > 1 c & text{if } n = 1 d & text{if } n = 0 end{cases} ] where a, b, c, and d are constants. Given multiple test cases, each consisting of different constants and days, help Anna find the size of the crystal on the specified days. **Input Format:** - The first line contains an integer T, the number of test cases. - Each test case consists of two parts: - The first line contains four integers a, b, c, and d. - The second line contains an integer M, the number of days to predict, followed by M integers representing the days. **Output Format:** For each test case, output the predicted sizes for each day on new lines. **Constraints:** - 1 le T le 3 - 1 le M le 100 - 0 le a, b, c, d le 10^4 - 0 le text{day} le 50 **Sample Input:** ``` 2 2 1 3 4 3 1 2 3 1 1 1 1 4 0 1 2 3 ``` **Sample Output:** ``` 3 10 23 1 1 2 3 ``` **Explanation:** For the first test case, constants (a, b, c, d) are (2, 1, 3, 4). For the given days: - Day 1: c = 3 - Day 2: 2 cdot text{size}(1) + 1 cdot text{size}(0) = 2 cdot 3 + 1 cdot 4 = 10 - Day 3: 2 cdot text{size}(2) + 1 cdot text{size}(1) = 2 cdot 10 + 1 cdot 3 = 23 For the second test case, constants are (1, 1, 1, 1). For the given days: - Day 0: d = 1 - Day 1: c = 1 - Day 2: 1 cdot text{size}(1) + 1 cdot text{size}(0) = 1 cdot 1 + 1 cdot 1 = 2 - Day 3: 1 cdot text{size}(2) + 1 cdot text{size}(1) = 1 cdot 2 + 1 cdot 1 = 3 Help Anna by writing a program to predict the size of the crystals for given days based on the provided constants.","solution":"def crystal_size(a, b, c, d, days): Given the constants a, b, c, d and the list of days, returns the size of the crystal for each day in days. sizes = [d, c] + [0] * (max(days) - 1) # Initialize the list for sizes for n in range(2, max(days) + 1): sizes[n] = a * sizes[n - 1] + b * sizes[n - 2] return [sizes[day] for day in days] def predict_crystal_sizes(test_cases): Given a list of test cases where each test case contains constants a, b, c, d, and a list of days, returns a list of lists with crystal sizes for each day. results = [] for case in test_cases: a, b, c, d, days = case result = crystal_size(a, b, c, d, days) results.append(result) return results"},{"question":"In a magical land, there is a forest that contains clusters of magical trees. Each tree has a certain amount of magic power associated with it. You are given a list of integers representing the magic power of each tree in the forest. Sorcerers have discovered that they can form a group consisting of any number of consecutive trees and harness the maximum magic power by summing the power of these trees. However, if the total power of a group exceeds a certain limit, known as the magic threshold, the entire group overloads and the power becomes negatively charged, resulting in a total power of 0 for them. If the total power of any group reaches the magic threshold exactly, it is considered as successfully charged. Your task is to help the sorcerers find the maximum possible magic power they can successfully harness from any group of consecutive trees without exceeding the threshold. -----Input----- The first line contains two integers n and t — the number of trees in the forest (1 ≤ n ≤ 100) and the magic threshold (1 ≤ t ≤ 100). The second line contains n integers a1, a2, ..., an (−100 ≤ ai ≤ 100), where ai represents the magic power of the i-th tree. -----Output----- Print the maximum possible magic power that can be successfully harnessed without exceeding the magic threshold. -----Examples----- Input 5 10 1 2 3 4 5 Output 10 Input 4 5 -1 4 3 -2 Output 5 Input 6 8 -5 4 2 -1 3 4 Output 8","solution":"def max_magic_power(n, t, magic_powers): max_power = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += magic_powers[j] if current_sum == t: max_power = t elif 0 < current_sum < t: max_power = max(max_power, current_sum) return max_power # Example usage n = 5 t = 10 magic_powers = [1, 2, 3, 4, 5] print(max_magic_power(n, t, magic_powers)) # Output: 10"},{"question":"You are given an array of integers. Your task is to calculate a number of queries, each of which requests to compute the sum of a subarray defined by two indices. INPUT The first line of input contains a positive integer n, denoting the length of the array. The second line contains n space-separated integers representing the elements of the array. The third line contains a positive integer q, the number of queries. Each of the following q lines contains two integers, L and R (1 ≤ L ≤ R ≤ n), which define a subarray from index L to index R (inclusive, 1-based indexing). OUTPUT The output contains q lines. Each line contains the sum of the elements of the subarray defined by the indices L and R for that query. CONSTRAINTS 1 ≤ n ≤ 100000 -10^9 ≤ elements of the array ≤ 10^9 1 ≤ q ≤ 100000 SAMPLE INPUT 5 1 2 3 4 5 3 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15","solution":"def subarray_sums(arr, queries): Given an array and a list of queries, compute the sum of elements in each subarray specified by the queries. Parameters: arr (list[int]): The array of integers. queries (list[tuple[int, int]]): The list of queries, each defined by a tuple (L, R). Returns: list[int]: A list of sums for each subarray specified by the queries. # Precompute prefix sums n = len(arr) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + arr[i] # Answer each query using the prefix sums results = [] for L, R in queries: sum_subarray = prefix_sums[R] - prefix_sums[L - 1] results.append(sum_subarray) return results"},{"question":"Write a function that takes a string of text and returns a dictionary with the frequency of each character in the string. The function should ignore case (i.e., \'A\' and \'a\' should be counted as the same character) and ignore non-alphabetic characters. For example: ```python char_frequency(\\"Hello, World!\\") ``` should return ```python { \'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1 } ```","solution":"def char_frequency(text): Returns a dictionary with the frequency of each alphabetic character in the string. The function ignores case and non-alphabetic characters. frequency = {} for char in text.lower(): if char.isalpha(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a program that takes a text file containing a paragraph as input, and outputs the most frequently occurring word in the paragraph that has more than 3 characters. In case of a tie, output the word that appears first in the paragraph. Input: The input consists of a single line containing the file name of a text file which contains a paragraph. Output: Output the most frequently occurring word in the paragraph that has more than 3 characters. If there are multiple words with the same frequency, print the one that appears first. SAMPLE INPUT input.txt Content of input.txt: The quick brown fox jumps over the lazy dog. The fox was quick to jump over the lazy dog. SAMPLE OUTPUT quick Explanation The word \\"quick\\" and \\"lazy\\" both appear twice and are the most frequently occurring words with more than 3 characters. Since \\"quick\\" appears first in the paragraph, it is chosen as the output.","solution":"def most_frequent_word(file_name): from collections import Counter import re with open(file_name, \'r\') as file: text = file.read().lower() words = re.findall(r\'b[a-z]{4,}b\', text) # Fetch words with 4 or more characters if not words: return None word_counts = Counter(words) most_common_word = word_counts.most_common(1)[0][0] return most_common_word"},{"question":"The Magic Maze is a complex labyrinth with n rooms connected by m bidirectional corridors. Each corridor connects two distinct rooms, and there might be multiple corridors connecting the same pair of rooms or loops within the same room. The rooms are numbered from 1 to n. You are given q queries; each query asks if there exists a way to travel from room a to room b using any number of corridors (including possibly zero if a and b are the same room). Your task is to answer each query with either \\"Yes\\" or \\"No\\" based on whether a path exists between the two specified rooms. -----Input----- The first line contains three integers n, m, and q (1 ≤ n ≤ 1000, 0 ≤ m, q ≤ 100000) - the number of rooms, the number of corridors, and the number of queries respectively. The next m lines describe the corridors. Each of these lines contains two integers u_{i} and v_{i} (1 ≤ u_{i}, v_{i} ≤ n) - the rooms connected by the i-th corridor. The next q lines describe the queries. Each of these lines contains two integers a and b (1 ≤ a, b ≤ n) - the rooms for which the query asks if a path exists from room a to room b. -----Output----- For each query, print \\"Yes\\" if there is a way to travel from room a to room b, and \\"No\\" otherwise. -----Examples----- Input 4 4 3 1 2 2 3 3 4 4 1 1 3 2 4 1 1 Output Yes Yes Yes Input 5 2 2 1 2 2 3 3 4 4 5 Output Yes No","solution":"def magic_maze(n, m, q, corridors, queries): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in corridors: graph[u].append(v) graph[v].append(u) # BFS to find all reachable rooms from each room reachable = {i: set() for i in range(1, n + 1)} for i in range(1, n + 1): queue = deque([i]) visited = set([i]) while queue: current = queue.popleft() reachable[i].add(current) for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Answer the queries results = [] for a, b in queries: if b in reachable[a]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given an array of integers, write a function to determine the length of the longest subarray whose sum is exactly equal to a specified target value. Some examples: - For the array `[-2, -1, 2, 1, 0, 2]` and target value `3`, the longest subarray with sum equal to 3 is `[2, 1, 0]` with length 3. - For the array `[1, -1, 5, -2, 3]` and target value `3`, the longest subarray with sum equal to 3 is `[1, -1, 5, -2]` with length 4.","solution":"def longest_subarray_with_sum(arr, target): Returns the length of the longest subarray whose sum is equal to the target value. sum_map = {0: -1} # Dictionary to store the first occurrence of each prefix sum current_sum = 0 max_length = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum - target in sum_map: max_length = max(max_length, i - sum_map[current_sum - target]) if current_sum not in sum_map: sum_map[current_sum] = i return max_length"},{"question":"Chef has a string S consisting of lowercase English letters. He wants to know how many subsequences of S are palindromes. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Can you help him determine the number of palindromic subsequences in S? ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output the number of palindromic subsequences in S. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ |S| ≤ 100 Note: Since the answer could be very large, output the answer modulo 10^9 + 7. ------ Sample Input 1 ------ 3 aab abc aaa ------ Sample Output 1 ------ 4 3 7 ------ Explanation 1 ------ Test case 1: The palindromic subsequences are \\"a\\", \\"a\\", \\"b\\", \\"aa\\". Test case 2: The palindromic subsequences are \\"a\\", \\"b\\", \\"c\\". Test case 3: The palindromic subsequences are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aaa\\".","solution":"MOD = 10**9 + 7 def count_palindromic_subsequences(S): n = len(S) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if S[i] == S[j]: dp[i][j] = (dp[i+1][j] + dp[i][j-1] + 1) % MOD else: dp[i][j] = (dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1]) % MOD return dp[0][n-1] def solve_palindromic_subsequence_count(T, test_cases): results = [] for S in test_cases: results.append(count_palindromic_subsequences(S)) return results"},{"question":"You are given a sequence of integers, and you need to determine if you can make all elements of the sequence equal by adding the same integer `x` to all elements of the sequence or subtracting the same integer `x` from all elements of the sequence zero or more times. If it\'s possible, you also need to find the value of `x`. Input The input consists of one or more independent test cases. The first line contains a single integer t (1 ≤ t ≤ 1000), the number of test cases. Each of the next t lines describes a test case, starting with an integer n (1 ≤ n ≤ 10^5), the number of elements in the sequence, followed by n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). Output For each test case, output \\"YES x\\" if it is possible to make all elements of the sequence equal by performing the described operations. If it is not possible, output \\"NO\\". Examples Input 3 5 1 5 7 9 13 4 7 7 7 7 3 -1 -1 -1 Output YES 2 YES 0 YES 0 Explanation: - In the first test case, you can add 2 to the second element to get [1, 7, 7, 9, 13], then add 2 to the first element to get [3, 7, 7, 9, 13], then add 2 again to get [5, 7, 7, 9, 13], and continue like this until all elements become equal. - In the second test case, all elements are already equal, so `x` = 0. - In the third test case, all elements are already equal, so `x` = 0. Note: The sum of n across all test cases does not exceed 10^5.","solution":"def find_x_to_equalize_sequence(sequences): results = [] for sequence in sequences: n = sequence[0] elements = sequence[1:] min_elem = min(elements) diffs = [elem - min_elem for elem in elements] gcd_diff = 0 for diff in diffs: gcd_diff = gcd(gcd_diff, diff) if gcd_diff != 0 else diff if gcd_diff == 0: results.append(\\"YES 0\\") else: results.append(f\\"YES {gcd_diff}\\") return results def gcd(a, b): while b: a, b = b, a % b return a"},{"question":"Given a string consisting of lowercase alphabets and a pattern consisting of lowercase alphabets and wildcard characters (‘?’). The wildcard character \'?\' can match any single character. Write a function that checks if the entire string matches the pattern (i.e., all characters in the string match with corresponding characters in the pattern considering the wildcard). Input Description: The input consists of two lines. The first line contains a string S, and the second line contains a pattern P. Output Description: Print “YES” if the string matches the pattern, otherwise print “NO”. Constraints: 1<=|S|, |P|<=1000 Both the string and the pattern contain only lowercase alphabets and the wildcard character ‘?’ in the pattern. Example 1: Input: abcd a?c? Output: YES Explanation: The wildcard \'?\' matches \'b\' and \'d\', hence the pattern matches the string. Example 2: Input: abcd a?cb Output: NO Explanation: The \'?\' matches \'b\', but the following character \'c\' does not match \'b\'. Example 3: Input: abc a?d Output: NO Explanation: The \'?\' matches \'b\', but \'c\' and \'d\' do not match.","solution":"def matches_pattern(string, pattern): Checks if the input string matches the input pattern, where the pattern can contain lowercase alphabets and wildcard characters (\'?\') that can match any single character. :param string: The input string (S). :param pattern: The input pattern (P). :return: \'YES\' if the string matches the pattern, otherwise \'NO\'. if len(string) != len(pattern): return \\"NO\\" for s_char, p_char in zip(string, pattern): if p_char != \'?\' and s_char != p_char: return \\"NO\\" return \\"YES\\""},{"question":"In a faraway land, there is a peculiar calendar system. This calendar has n days in a year numbered from 1 to n. Each day belongs to exactly one season. The year has four distinct seasons: Spring, Summer, Autumn, and Winter. The days belonging to each season are given in four ascending lists: Spring, Summer, Autumn, Winter. Each list contains the numbers of the days that belong to that season in ascending order. A special property of this calendar is that no day belongs to more than one season and every day from 1 to n is covered by the four seasons in total. Given a list of k queries, each query contains a single integer d representing a day of the year, you need to identify which season day d belongs to. -----Input----- The first line of the input contains an integer t (1 le t le 100) - the number of test cases. The description of the test cases follows. For each test case: - The first line contains two integers n (1 le n le 1000) and k (1 le k le 100) - the number of days in a year and the number of queries. - The second line contains the days of Spring, a list in ascending order with space-separated integers. - The third line contains the days of Summer, a list in ascending order with space-separated integers. - The fourth line contains the days of Autumn, a list in ascending order with space-separated integers. - The fifth line contains the days of Winter, a list in ascending order with space-separated integers. - The next k lines contain a single integer d (1 le d le n) each, representing a query. -----Output----- For each query in all test cases, output the season corresponding to the day d on a new line. -----Examples----- Input 2 5 3 1 2 3 4 5 1 3 5 8 4 1 4 2 5 7 3 8 6 2 7 4 8 Output Spring Autumn Winter Summer Autumn Spring Winter -----Note----- In the first test case, the year has 5 days. - Spring covers day [1]. - Summer covers day [2]. - Autumn covers day [3]. - Winter covers days [4, 5]. For the queries: - Day 1 belongs to Spring. - Day 3 belongs to Autumn. - Day 5 belongs to Winter. In the second test case, the year has 8 days. - Spring covers days [1, 4]. - Summer covers days [2, 5, 7]. - Autumn covers days [3, 8]. - Winter covers day [6]. For the queries: - Day 2 belongs to Summer. - Day 7 belongs to Summer. - Day 4 belongs to Spring. - Day 8 belongs to Autumn.","solution":"def find_season(n, queries, spring, summer, autumn, winter): result = [] season_map = {} for day in spring: season_map[day] = \\"Spring\\" for day in summer: season_map[day] = \\"Summer\\" for day in autumn: season_map[day] = \\"Autumn\\" for day in winter: season_map[day] = \\"Winter\\" for query in queries: result.append(season_map[query]) return result def process_test_cases(test_cases): results = [] for case in test_cases: n, k, spring, summer, autumn, winter, queries = case case_result = find_season(n, queries, spring, summer, autumn, winter) results.extend(case_result) return results"},{"question":"You are given an integer array `arr` and an integer `k`. A subarray is called nice if there are `k` odd numbers on it. Return the number of nice subarrays. Example 1: Input: arr = [1,1,2,1,1], k = 3 Output: 2 Explanation: The subarrays [1,1,2,1] and [1,2,1,1] have exactly 3 odd numbers. Example 2: Input: arr = [2,4,6], k = 1 Output: 0 Explanation: There is no odd number in the array. Example 3: Input: arr = [2,2,2,1,2,2,1,2,2,2], k = 2 Output: 16 Note: 1 <= arr.length <= 50000 1 <= arr[i] <= 10^5 1 <= k <= arr.length","solution":"def number_of_nice_subarrays(arr, k): Returns the number of nice subarrays with exactly k odd numbers. def at_most_k_odd(arr, k): count = 0 left = 0 odd_count = 0 for right in range(len(arr)): if arr[right] % 2 == 1: odd_count += 1 while odd_count > k: if arr[left] % 2 == 1: odd_count -= 1 left += 1 count += right - left + 1 return count return at_most_k_odd(arr, k) - at_most_k_odd(arr, k - 1)"},{"question":"Jessica is a fan of magic shows. She recently watched a show where a magician asked her to pick a card from a deck of cards with numbers on them. Then the magician asked her to shuffle the cards and split them into two piles. After some magical gestures, the magician correctly guessed the difference between the sums of each pile. Jessica was fascinated and she wants to be able to predict this difference herself using a special trick she learned: sorting and alternating the cards between the two piles. You are given an array of integers where each integer represents a card’s number. Write a program to help Jessica organize these cards into two piles in such a way that the absolute difference between the sums of the two piles is minimized. ------ Input ------ The first line contains an integer T, the number of test cases. The first line of each test case contains an integer N, the number of cards. The second line of each test case contains N integers separated by spaces, where each integer represents a card\'s number. ------ Output ------ For each test case, print a single integer, the minimized absolute difference between the sums of the two piles. ----- Constraints ----- 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ card number ≤ 10^6 ----- Sample Input 1 ------ 2 5 3 1 4 2 2 4 1 2 3 4 ----- Sample Output 1 ------ 0 0 ------ Explanation 1 ------ For the first test case: The cards can be divided as follows: Pile 1: 4 + 1 = 5 Pile 2: 3 + 2 + 2 = 7 Absolute difference = |5 - 7| = 2 Better distribution: Pile 1: 3 + 2 = 5 Pile 2: 4 + 2 + 1 = 7 Absolute difference = |5 - 7| = 2 Best distribution: Pile 1: 4 + 2 = 6 Pile 2: 3 + 2 + 1 = 6 Absolute difference = |6 - 6| = 0 For the second test case: The cards can be divided as follows: Pile 1: 4 + 1 = 5 Pile 2: 3 + 2 = 5 Absolute difference = |5 - 5| = 0","solution":"def min_difference(T, test_cases): results = [] for case in test_cases: N, cards = case cards.sort() pile1, pile2 = 0, 0 for i in range(N - 1, -1, -1): if pile1 < pile2: pile1 += cards[i] else: pile2 += cards[i] results.append(abs(pile1 - pile2)) return results"},{"question":"Sid owns a rod cutting workshop, and he wants to maximize his profit by cutting rods into smaller pieces and selling them. Each rod has a length of n units, and the profit Sid earns from selling a rod of length i (1 ≤ i ≤ n) units is given by an array price where price[i] is the profit from a rod of length i. Sid can make as many cuts as needed to maximize his total profit. However, making a cut costs him a fixed amount `C`. Therefore, for each cut made, he incurs a cost, while the revenue from each individual piece of rod is dictated by the price array. Your task is to help Sid determine the maximum profit he can achieve given a rod of length n, the price array, and the cost of making a cut. # Input - The first line of the input contains two integers n (1 ≤ n ≤ 1000) and C (0 ≤ C ≤ 10^4) — the length of the rod and the cost of making each cut. - The second line contains n integers where the i-th integer denotes price[i] (0 ≤ price[i] ≤ 10^4). # Output - Print a single integer — the maximum profit Sid can achieve after cutting the rod optimally. # Example Input ``` 5 2 2 5 7 8 10 ``` Output ``` 12 ``` Explanation For a rod of length 5, Sid can make a cut at length = 1 and again at length = 2 to achieve maximum profit. This yields: - Profit from 1st segment (length 1) is 2. - Profit from 2nd segment (length 2) is 5. - Profit from remaining segment (length 2) is 5. - Total profit = 2 + 5 + 5 = 12. - Costs incurred: 2 cuts * 2 = 4. - Final profit = 12 - 4 = 8. However, Sid should instead not make any cuts and sell the rod as a whole to get 10 (no cut costs). Therefore, the optimal profit after considering the cut costs is achieved by not cutting the rod at all and directly selling it for 10 units of profit. So the output is 10.","solution":"def max_profit(n, C, price): dp = [0] * (n + 1) for i in range(1, n + 1): for j in range(1, i + 1): dp[i] = max(dp[i], price[j - 1] + dp[i - j] - (C if j != i else 0)) return dp[n]"},{"question":"Alyssa loves playing with sequences and recently she discovered arithmetic progressions (AP). She wants to create a function that takes a starting integer `a`, a common difference `d`, and a length `n`, to return the sum of the sequence. Given `a`, `d`, and `n`, you need to generate an arithmetic progression of length `n`, starting from `a` with a common difference of `d`, and calculate the sum of the generated sequence. Input Format: - The first line contains an integer `t`, the number of test cases. - Each of the next `t` lines contains three integers `a`, `d`, and `n`. Output Format: For each test case, output a single line, the sum of the arithmetic progression. Constraints: 1 ≤ t ≤ 10^4 -10^7 ≤ a, d ≤ 10^7 1 ≤ n ≤ 10^6 SAMPLE INPUT 2 1 1 5 2 3 4 SAMPLE OUTPUT 15 26 Explanation For the first test case, the sequence is [1, 2, 3, 4, 5] and the sum is 15. For the second test case, the sequence is [2, 5, 8, 11] and the sum is 26.","solution":"def sum_of_arithmetic_progression(a, d, n): Returns the sum of an arithmetic progression with first term a, common difference d, and length n. # Sum of AP formula: n/2 * (2a + (n - 1) * d) ap_sum = n * (2 * a + (n - 1) * d) // 2 return ap_sum def process_test_cases(test_cases): results = [] for a, d, n in test_cases: results.append(sum_of_arithmetic_progression(a, d, n)) return results # Example usage: if __name__ == \'__main__\': t = int(input()) test_cases = [] for _ in range(t): a, d, n = map(int, input().split()) test_cases.append((a, d, n)) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"In this problem, you are required to process a board game configuration input and determine the sequence of player moves, ultimately printing the updated state of the board after performing all the valid moves. The board is defined as a grid where each cell can either be empty (denoted by a \'.\'), occupied by a token belonging to player 1 (denoted by \'X\'), or occupied by a token belonging to player 2 (denoted by \'O\'). The input will provide the initial state of the board, followed by a list of moves. Each move specifies the player (\'X\' or \'O\') and the position (row and column) where they attempt to place their token. The player can place their token in an empty cell only. If the cell is already occupied, the move is ignored. Input A single file containing: 1. Two integers R and C, representing the number of rows and columns in the board (1 <= R, C <= 50). 2. R subsequent lines each containing a string of length C representing the initial state of the board. 3. An integer N, representing the number of moves (1 <= N <= 100). 4. N subsequent lines each containing a character and two integers, separated by a space, representing the player (\'X\' or \'O\') and the 0-based row and column indices of the move. Output Print the resulting state of the board after processing all the moves. Example Input ``` 3 3 ... ... ... 4 X 0 0 O 1 1 X 0 1 O 0 0 ``` Output ``` XX. .O. ... ``` Explanation 1. Player X places a token at (0, 0). 2. Player O places a token at (1, 1). 3. Player X places a token at (0, 1). 4. Player O attempts to place a token at (0, 0) but it is already occupied, so this move is ignored.","solution":"def process_moves(R, C, initial_board, moves): Processes the moves on the board and returns the final state of the board. :param R: number of rows :param C: number of columns :param initial_board: list of strings representing the initial state of the board :param moves: list of tuples, each containing a character (\'X\' or \'O\') and two integers (row and column) :return: list of strings representing the final state of the board board = [list(row) for row in initial_board] for player, row, col in moves: if 0 <= row < R and 0 <= col < C and board[row][col] == \'.\': board[row][col] = player return [\'\'.join(row) for row in board] # Helper function to parse input and output def game_from_input(input_str): lines = input_str.strip().split(\'n\') R, C = map(int, lines[0].split()) board = lines[1:R+1] N = int(lines[R+1]) moves = [(lines[R+2+i][0], int(lines[R+2+i][2]), int(lines[R+2+i][4])) for i in range(N)] final_board = process_moves(R, C, board, moves) return \'n\'.join(final_board)"},{"question":"You are given a list of integers. Your task is to write a function that moves all the zeros in the list to the end while maintaining the relative order of the non-zero elements. For example: ``` Input: [0,1,0,3,12] Output: [1,3,12,0,0] ``` Note: - You must do this in-place without making a copy of the list. - Minimize the total number of operations. Function Signature: ```python def move_zeros(nums: List[int]) -> None: # Your code here ``` Input Format: - An integer list `nums` where (0 leq text{len}(nums) leq 1000) and each element is in the range (-10^9, 10^9). Output Format: - Modify the list `nums` in-place as specified and the function returns `None`. Example Input: ```python nums = [0, 1, 0, 3, 12] ``` Example Output: ```python [1, 3, 12, 0, 0] ``` Explanation: - The zeros are moved to the end of the list while maintaining the relative order of the non-zero elements.","solution":"from typing import List def move_zeros(nums: List[int]) -> None: Moves all zeros in the list to the end while maintaining the relative order of the non-zero elements. Modifies the list in-place and returns None. last_non_zero_found_at = 0 for current in range(len(nums)): if nums[current] != 0: nums[last_non_zero_found_at], nums[current] = nums[current], nums[last_non_zero_found_at] last_non_zero_found_at += 1"},{"question":"Given a list of integers, write a program to find the length of the longest subsequence that contains consecutive integers, but the elements of the subsequence may not necessarily be consecutive in the original sequence. ------ Input: ------ The first line contains a single integer n — the length of the list. The second line contains n space-separated integers — the elements of the list. ------ Output: ------ Output a single integer — the length of the longest subsequence with consecutive integers. ------ Constraints: ------ 1 ≤ n ≤ 10^5 -10^6 ≤ text{elements of the list} ≤ 10^6 ----- Sample Input 1 ------ 7 1 9 3 10 4 20 2 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The longest subsequence with consecutive integers is [1, 2, 3, 4]. ----- Sample Input 2 ------ 5 8 20 7 30 6 ----- Sample Output 2 ------ 3 ----- Explanation 2 ------ The longest subsequence with consecutive integers is [6, 7, 8].","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest subsequence with consecutive integers. :param arr: List of integers :return: Length of the longest subsequence with consecutive integers if not arr: return 0 arr_set = set(arr) max_len = 0 for num in arr: if num - 1 not in arr_set: current_num = num current_len = 1 while current_num + 1 in arr_set: current_num += 1 current_len += 1 max_len = max(max_len, current_len) return max_len"},{"question":"A company is organizing a coding competition where N participants are competing in a series of rounds. In each round, each participant plays against another participant exactly once, and no two participants play more than once in a given round. After each round, participants are ranked based on their cumulative scores from all rounds completed so far. In each match, the winner gets 2 points, and the loser gets 0 points (assume that no matches end in a draw/tie). Given that each participant has played a total of M matches, determine the maximum possible difference in cumulative scores between the top-ranked participant and the second-ranked participant. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. Then the test cases follow. - Each test case consists of two integers N and M, separated by a space. ------ Output Format ------ For each test case, output in a single line the maximum difference in cumulative scores between the first and second-place participants. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 2 ≤ N ≤ 10^{9} 1 ≤ M ≤ 10^{9} ----- Sample Input 1 ------ 4 2 1 3 2 4 5 6 10 ----- Sample Output 1 ------ 2 4 10 20 ----- Explanation 1 ------ Test case 1: With 2 participants and 1 match, the winner gets 2 points since there\'s only one match to make the difference. Test case 2: With 3 participants each playing 2 matches, the best case is one participant wins both their matches with 4 points while the runner-up wins one of their matches, leading to the difference of 4. Test case 3: With 4 participants each playing 5 matches, the best outcome allows one participant to win all their matches for a score of 10, while the second place wins half their matches for a score of 5, leading to the difference of 10. Test case 4: With 6 participants each playing 10 matches, the maximum difference is obtained when the top participant wins all matches for 20 points and the second wins half for 10 points, resulting in a difference of 20.","solution":"def max_diff_between_top_two(N, M): Calculates the maximum possible difference in cumulative scores between the first and second place participants. The winner of a match gets 2 points and the loser gets 0 points. return 2 * M"},{"question":"Given an array A[] of size N and an integer K, your task is to complete two functions: constructPSA and rangeSum which build a prefix sum array and find the sum of elements in a specified range of the array respectively. Input: The task is to complete two functions: constructPSA and rangeSum. The constructPSA function builds the prefix sum array and takes two arguments: the array A[] and its size N. It does not return anything but updates a global prefix sum array psa. The rangeSum function takes 3 arguments: the prefix sum array psa, and the range limits l and r. It returns the sum of the elements in the array from index l to r (inclusive). This method will be called individually for each test case. Output: The rangeSum function should return the sum of elements in the array from index l to r. Example: Input (Use this input for generating expected output): 1 5 10 20 30 40 50 2 0 3 1 4 Output: 100 140 Explanation: 1. For query 1 i.e., 0 3, the elements in this range are 10 + 20 + 30 + 40 = 100. 2. For query 2 i.e., 1 4, the elements in this range are 20 + 30 + 40 + 50 = 140. Constraints: 1 <= T <= 100 1 <= N <= 10^5 1 <= A[i] <= 10^6 1 <= Q (number of queries) <= 10000 0 <= l <= r < N","solution":"def constructPSA(A, N): Constructs the prefix sum array from the given array A of size N. Parameters: A (list of int): The input array. N (int): The size of the input array. Returns: psa (list of int): The constructed prefix sum array. psa = [0] * N psa[0] = A[0] for i in range(1, N): psa[i] = psa[i-1] + A[i] return psa def rangeSum(psa, l, r): Returns the sum of elements in the array from index l to r using the prefix sum array. Parameters: psa (list of int): The prefix sum array. l (int): The starting index of the range (inclusive). r (int): The ending index of the range (inclusive). Returns: int: The sum of the elements from index l to r. if l == 0: return psa[r] else: return psa[r] - psa[l-1] # Example usage: A = [10, 20, 30, 40, 50] N = len(A) psa = constructPSA(A, N) print(rangeSum(psa, 0, 3)) # Output should be 100 print(rangeSum(psa, 1, 4)) # Output should be 140"},{"question":"You are given an integer N and a list of N integers. Determine the minimum number of moves required to make all elements in the list equal, where a move is defined as incrementing or decrementing a single element by 1. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ List[i] ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N List -----Output----- Print the minimum number of moves required to make all elements of the list equal. -----Sample Input----- 3 1 2 3 -----Sample Output----- 2 The minimum number of moves to make all elements equal is to decrement 3 by 1 and increment 1 by 1, resulting in [2, 2, 2].","solution":"def min_moves_to_equal_elements(n, nums): Returns the minimum number of moves required to make all elements in the list equal, where a move is defined as incrementing or decrementing a single element by 1. if n <= 1: return 0 nums.sort() median = nums[n // 2] moves = sum(abs(num - median) for num in nums) return moves"},{"question":"Cities Power Grid Problem: You are assigned the task of designing the power grid system for a new group of cities. There are N cities that need to be connected by a power grid. Some cities are directly connected by power lines, while others may need to be connected through intermediate cities. You are given information about the direct connections between cities and the cost associated with each connection. The goal is to determine the minimum cost to connect all the cities in such a way that there is a path (direct or indirect) between any pair of cities. CONSTRAINTS: 1 ≤ N ≤ 100 1 ≤ the number of direct connections ≤ 1000 1 ≤ cost per connection ≤ 1000 INPUT The first line contains an integer N, the number of cities. The second line contains an integer M, the number of direct connections. Each of the next M lines contains three integers: u, v, and w, representing a direct connection between city u and city v with a cost of w. OUTPUT Display the minimum cost needed to connect all cities. If it is impossible to connect all the cities, output \\"Impossible\\". EXAMPLE INPUT 4 4 1 2 1 2 3 2 3 4 3 4 1 4 EXAMPLE OUTPUT 6 Explanation: In the given example, city 1 is connected to city 2 with a cost of 1, city 2 is connected to city 3 with a cost of 2, city 3 is connected to city 4 with a cost of 3, and city 4 is connected to city 1 with a cost of 4. The minimum cost to connect all the cities is 1 (1-2) + 2 (2-3) + 3 (3-4) = 6. NOTE: - Use an algorithm such as Kruskal’s or Prim’s to solve the problem of finding the minimum spanning tree. - Ensure that the input data is processed efficiently to fit within the given constraints.","solution":"def min_cost_to_connect_cities(N, M, connections): Function to determine the minimum cost to connect all cities. Uses Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). Parameters: N (int): Number of cities. M (int): Number of direct connections. connections (list of tuples): Each tuple contains three integers (u, v, w) representing a direct connection between city u and city v with a cost of w. Returns: int: The minimum cost to connect all cities. Returns \\"Impossible\\" if it\'s not possible to connect all cities. # Kruskal\'s algorithm requires the edges to be sorted by weight connections.sort(key=lambda x: x[2]) # Disjoint Set (Union-Find) to keep track of connected components parent = list(range(N+1)) rank = [0] * (N+1) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 # Kruskal\'s algorithm to build the MST min_cost = 0 edges_used = 0 for u, v, w in connections: if find(u) != find(v): union(u, v) min_cost += w edges_used += 1 # If we have used N-1 edges, we can stop (since it\'s the number of edges in a MST) if edges_used == N-1: break # If we used fewer than N-1 edges, not all cities are connected if edges_used < N-1: return \\"Impossible\\" return min_cost"},{"question":"Anna is a competitive programmer who often participates in coding contests. To improve her skills, she wants to analyze the efficiency of her code by calculating how many substrings of a given string are palindromes. A substring is defined as a contiguous sequence of characters within a string. For example, substrings of the string \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". A palindrome is a string that reads the same forwards and backwards. For instance, \\"aba\\" and \\"abccba\\" are palindromes. Anna needs your help to determine the number of palindromic substrings for several given strings. -----Input----- The first line contains one integer T — the number of test cases. Each of the following T lines contains a single string S. -----Output----- For each test case, output one integer — the number of palindromic substrings in the given string. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 1000 - The string S consists of lowercase English letters only. -----Subtasks----- - Subtask 1 (20 points): 1 ≤ |S| ≤ 10 - Subtask 2 (40 points): 1 ≤ |S| ≤ 100 - Subtask 3 (40 points): 1 ≤ |S| ≤ 1000 -----Example----- Input: 3 aaa abc abccba Output: 6 3 9 Explanation: The first test case: The palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\", resulting in a total count of 6. The second test case: The palindromic substrings are \\"a\\", \\"b\\", \\"c\\", resulting in a total count of 3. The third test case: The palindromic substrings are \\"a\\", \\"b\\", \\"c\\", \\"c\\", \\"b\\", \\"a\\", \\"cc\\", \\"bccb\\", \\"abccba\\", resulting in a total count of 9.","solution":"def count_palindromic_substrings(s): Returns the count of palindromic substrings in the given string s. n = len(s) count = 0 # A 2D list to store whether the substring s[i:j] is palindrome dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True count += 1 # Check for palindromic substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True count += 1 # Check for palindromic substrings of length greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count def palindromic_substrings_count(T, test_cases): Returns a list of integers representing counts of palindromic substrings for each test case. results = [] for s in test_cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"A robot is placed on an infinite grid at the origin point (0,0). The robot can receive a series of instructions to move in one of four possible directions: \'U\' for up (incrementing the y-coordinate), \'D\' for down (decrementing the y-coordinate), \'L\' for left (decrementing the x-coordinate), and \'R\' for right (incrementing the x-coordinate). You need to determine whether the robot\'s sequence of moves ends up back at the origin. -----Input----- A string of length n (1 leq n leq 1000), consisting of characters \'U\', \'D\', \'L\', and \'R\'. -----Output----- Print \\"YES\\" if the robot ends up at the origin after performing all the moves, otherwise print \\"NO\\". -----Examples----- Input UDLR Output YES Input UUDDLRLR Output YES Input UDDLU Output NO -----Note----- In the first example, the robot\'s moves cancel each other out: \'U\' followed by \'D\' returns the y-coordinate to 0, and \'L\' followed by \'R\' returns the x-coordinate to 0, so the robot is back at the origin. In the second example, the moves \'UU\' seem to take the robot away from the origin, but they are balanced by the moves \'DD\', plus \'LR\' followed by \'LR\', eventually bringing the robot back to the origin. In the third example, the moves \'UDD\' decrease the y-coordinate by 1, leaving the y-coordinate unequal to 0, and hence the robot does not return to the origin.","solution":"def is_robot_back_to_origin(moves): Determines if the robot returns to the origin after the sequence of moves. x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"You are given a sequence of integers. Your task is to identify the first missing positive integer in the sequence. A positive integer is considered missing if it does not appear in the sequence and is less than or equal to the length of the sequence. Write a program that takes an integer array as input and outputs the first missing positive integer. ------ Input Format ------ - The first line contains a single integer n, the size of the array. - The second line contains n space-separated integers, representing the elements of the array. ------ Output Format ------ - Output a single integer, the first missing positive integer. ------ Constraints ------ 1 ≤ n ≤ 1000 -10^6 ≤ text{array[i]} ≤ 10^6 ------ Sample Input 1 ------ 4 3 4 -1 1 ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ The given array contains 3, 4, -1, 1. The smallest positive integer that is missing from this sequence is 2. ------ Sample Input 2 ------ 5 1 2 0 2 5 ------ Sample Output 2 ------ 3 ------ Explanation 2 ------ The given array contains 1, 2, 0, 2, and 5. The smallest positive integer that is missing from this sequence is 3.","solution":"def first_missing_positive(nums): Function to find the first missing positive integer in a list. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: correct_idx = nums[i] - 1 nums[i], nums[correct_idx] = nums[correct_idx], nums[i] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Calculate the factorial of a given integer N. -----Constraints----- - 0 leq N leq 12 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the factorial of the given integer. -----Sample Input----- 5 -----Sample Output----- 120","solution":"def factorial(n): Returns the factorial of a given integer n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"A group of friends decided to build a domino line in their backyard. They want to arrange the dominos such that the difference in height between any two adjacent dominos is the same. However, in the process of building, one domino got misplaced and they don\'t know which one. Your task is to identify and remove the misplaced domino, so the remaining dominos follow an arithmetic progression in their heights. Create a program to read the height of the dominos and determine the height of the misplaced one. # Input The input consists of multiple datasets. The end of the input is indicated by a single line containing \\"0\\". Each dataset is given in the following format: ``` n h1 h2 h3 ... hn + 1 ``` - The first line contains an integer n (3 ≤ n ≤ 50), the number of correctly placed dominos. - The second line contains n + 1 integers representing the heights of the dominos (1 ≤ hi ≤ 1000 for all dominos). # Output For each dataset, output the height of the misplaced domino on a new line. # Example Input ``` 4 1 3 5 8 7 3 10 20 40 30 5 2 4 6 8 13 10 0 ``` Output ``` 8 40 13 ``` Explanation: - In the first set, the correct sequence should be: 1, 3, 5, 7. So, the misplaced height is 8. - In the second set, the correct sequence should be: 10, 20, 30. So, the misplaced height is 40. - In the third set, the correct sequence should be: 2, 4, 6, 8, 10. So, the misplaced height is 13.","solution":"def identify_misplaced_domino(n, heights): # Calculate the potential differences for the first few pairs diffs = [(heights[i+1] - heights[i]) for i in range(2)] diff = min(diffs, key=abs) corrected_sequence = [heights[0]] for i in range(n): corrected_sequence.append(corrected_sequence[-1] + diff) for i in range(n+1): if heights[i] != corrected_sequence[i]: return heights[i] def find_misplaced_dominoes(datasets): results = [] for data in datasets: n = data[0] heights = data[1] result = identify_misplaced_domino(n, heights) results.append(result) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split(\'n\') datasets = [] i = 0 while i < len(data): n = int(data[i]) if n == 0: break heights = list(map(int, data[i+1].split())) datasets.append((n, heights)) i += 2 results = find_misplaced_dominoes(datasets) for result in results: print(result)"},{"question":"In a faraway kingdom, there is a village with N houses lined up in a straight row. Each house has a certain amount of gold in it. The local knight wants to collect gold from these houses but follows a strict rule: from any house i, he can only move to house i+1 or house i+2. Additionally, he can start collecting the gold from any house. Your task is to determine the maximum amount of gold that the knight can collect while following the movement rule. -----INPUT----- The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of houses. The next line contains N integers representing the amount of gold in each house. -----OUTPUT----- For each test case, output the maximum amount of gold that the knight can collect. -----CONSTRAINTS----- - 1 <= T <= 20 - 1 <= N <= 10^5 - 0 <= Amount of gold in each house <= 1000 -----EXAMPLE----- Input: 2 5 2 7 9 3 1 3 1 2 3 Output: 12 4","solution":"def max_gold(T, cases): def max_gold_for_case(golds): N = len(golds) if N == 0: return 0 if N == 1: return golds[0] if N == 2: return max(golds[0], golds[1]) dp = [0] * N dp[0] = golds[0] dp[1] = max(golds[0], golds[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + golds[i]) return dp[-1] results = [] for i in range(T): N = cases[i][0] golds = cases[i][1] results.append(max_gold_for_case(golds)) return results"},{"question":"Problem Statement: Captain Hook and his pirate crew are sailing the high seas in search of treasure. They have a map indicating several islands where they might find gold. Their ship\'s fuel tank has limited capacity, so they need to plan their route carefully to pick up the most gold while making fuel-efficient stops. Since the amount of gold on each island varies, Hook wants to know the maximum amount of gold he can collect if he can make at most one stop between any two islands to refuel at a midpoint. Given the amount of gold on each island, determine the maximum amount of gold Hook can collect by visiting two different islands and possibly making a refueling stop at another island in between. Input: - The first line contains a positive integer N - the number of islands. - The second line contains N space-separated integers giving the amount of gold on each island. Output: Print a single integer representing the maximum amount of gold Captain Hook can collect by visiting two islands, possibly with one refueling stop at another island. Constraints: 2 ≤ N ≤ 10^5 1 ≤ amount of gold on each island ≤ 1000 SAMPLE INPUT 5 10 20 30 40 50 SAMPLE OUTPUT 120 Explanation The optimal way to collect the maximum gold is by visiting the first island (10 gold), refueling at the third island (30 gold), and then visiting the fifth island (50 gold). The total gold collected in this path is 10 + 30 + 50 = 90. The next optimal path involves visiting island 2, 3, and 4 yielding 20 + 30 + 40 = 90. But the highest path results in 30 + 40 + 50 = 120.","solution":"def maximum_gold(N, gold): # Special case for exactly 2 islands if N == 2: return gold[0] + gold[1] # Initialize variables to store maximum values max_gold = 0 left_max = [0] * N # left_max[i] will be the maximum gold collected from any island up to i (exclusive) right_max = [0] * N # right_max[i] will be the maximum gold collected from any island from i+1 to end # Fill left_max array current_max = gold[0] for i in range(1, N): left_max[i] = current_max current_max = max(current_max, gold[i]) # Fill right_max array current_max = gold[-1] for i in range(N-2, -1, -1): right_max[i] = current_max current_max = max(current_max, gold[i]) # Calculate the max gold combination for i in range(1, N-1): # island i is considered as the refueling stop total_gold = left_max[i] + gold[i] + right_max[i] max_gold = max(max_gold, total_gold) return max_gold"},{"question":"A circular buffer, also known as a ring buffer, is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end. This structure is useful for buffering data streams. Implement a circular buffer with the following functionalities: 1. `write(data)`: Writes an array of elements into the buffer. If there is insufficient space to accommodate the entire data array, write as many elements as possible. 2. `read(size)`: Reads `size` number of elements from the buffer and returns them in an array. If there are fewer than `size` elements available, return only the available elements. # Example ```python buffer = CircularBuffer(5) buffer.write([1, 2, 3]) print(buffer.read(2)) # Output: [1, 2] buffer.write([4, 5, 6]) print(buffer.read(4)) # Output: [3, 4, 5] print(buffer.read(1)) # Output: [6] ``` # Implementation ```python class CircularBuffer: def __init__(self, size): self.buffer = [None] * size self.size = size self.start = 0 self.end = 0 self.count = 0 def write(self, data): for item in data: if self.count == self.size: break self.buffer[self.end] = item self.end = (self.end + 1) % self.size self.count += 1 def read(self, size): to_read = min(size, self.count) result = [] for _ in range(to_read): result.append(self.buffer[self.start]) self.start = (self.start + 1) % self.size self.count -= 1 return result ``` # Constraints - All elements in the data array will be integers. - The CircularBuffer write and read operations should handle edge cases efficiently.","solution":"class CircularBuffer: def __init__(self, size): self.buffer = [None] * size self.size = size self.start = 0 self.end = 0 self.count = 0 def write(self, data): for item in data: if self.count == self.size: break self.buffer[self.end] = item self.end = (self.end + 1) % self.size self.count += 1 def read(self, size): to_read = min(size, self.count) result = [] for _ in range(to_read): result.append(self.buffer[self.start]) self.start = (self.start + 1) % self.size self.count -= 1 return result"},{"question":"ByteLand recently started a new telecommunications project. The project involves setting up communication towers at various locations. Each communication tower has a specific range that defines the area it can cover. Additionally, due to the frequency constraints, certain towers interfere with each other if they are in each other\'s range. The government of ByteLand wants to maximize the communication coverage while ensuring no two interfering towers are activated simultaneously. You, as a lead programmer, have been asked to solve this problem. Here is the task: Given the locations and ranges of various communication towers, determine the maximum number of non-interfering towers that can be activated simultaneously. Input: - The first line contains an integer n (1 ≤ n ≤ 10^4), representing the number of communication towers. - The next n lines each contain two integers xi and ri (0 ≤ xi, ri ≤ 10^9), representing the position and range of the i-th tower respectively. Output: - Print a single integer representing the maximum number of non-interfering towers that can be activated simultaneously. Example Input: 5 1 2 3 1 4 1 6 2 8 1 Output: 3 Explanation: - Activate the towers at positions 1, 4, and 8. This activation provides maximum coverage without any two towers interfering with each other.","solution":"def max_non_interfering_towers(n, towers): # Sort towers based on their end position (xi + ri) towers.sort(key=lambda tower: tower[0] + tower[1]) # Initialize variables to keep track of the maximum number of non-interfering towers max_towers = 0 last_end = -float(\'inf\') # Iterate over the sorted towers for xi, ri in towers: # Calculate the end position of the current tower\'s range tower_end = xi + ri # Check if the current tower\'s starting position is not within the range of the last selected tower if xi - ri >= last_end: # If not, select this tower and update the last_end to the current tower\'s end position max_towers += 1 last_end = tower_end return max_towers # Function to read input and call max_non_interfering_towers def read_input_and_solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) towers = [] index = 1 for i in range(n): xi = int(data[index]) ri = int(data[index + 1]) towers.append((xi, ri)) index += 2 print(max_non_interfering_towers(n, towers)) if __name__ == \\"__main__\\": read_input_and_solve()"},{"question":"In a mysterious town, there are N hidden portals that can only be unlocked with specific sequences of binary digits (0\'s and 1\'s). Each portal has a unique sequence associated with it and any sequence can unlock at most one portal. However, the challenge is that you only have a single sequence of binary digits with you and must determine the number of portals that can be unlocked with continuous subsequences of this binary string. Formally, you are given a binary string S and a list of binary sequences representing the portals. You need to count the number of distinct portals that can be unlocked using continuous subsequences of S. Input The first line contains an integer N (1 ≤ N ≤ 1000), the number of portals. The second line contains the binary string S (1 ≤ |S| ≤ 5000). The following N lines each contain a binary string of length no more than |S|, representing the portal sequences. Output Print the number of distinct portals that can be unlocked with continuous subsequences of S. Examples Input 3 110101 10 101 110 Output 3 Input 4 111000 01 100 000 011 Output 2 Note For the first sample testcase, the binary string \\"10\\" is a subsequence of \\"110101\\". Similarly, \\"101\\" and \\"110\\" are also subsequences of \\"110101\\". So, all 3 portals can be unlocked. For the second sample testcase, the binary sequences \\"100\\" and \\"000\\" can be found as subsequences in \\"111000\\", so 2 distinct portals can be unlocked. The sequences \\"01\\" and \\"011\\" cannot be found as continuous subsequences in \\"111000\\".","solution":"def count_unlocked_portals(N, S, sequences): Returns the number of distinct portals that can be unlocked with continuous subsequences of S. return sum(1 for seq in sequences if seq in S)"},{"question":"Alex and Charlie enjoy solving puzzles in their free time. One day, Alex presents Charlie with a sequence-based game to determine who will get the last piece of cake. The rules of the game are as follows: - There is a sequence of integers of length n. - Players take turns removing one element from either end of the sequence (leftmost or rightmost). - Alex always goes first. - The winner is the player who makes the sequence strictly increasing with each of their moves. If at any point, a player cannot make a valid move that leaves the sequence increasing, they lose. Alex wants to ensure he can win the game no matter how Charlie plays. Can you help Alex determine if he should play the game or not? # Input The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer n, the number of elements in the sequence. - The second line contains n space-separated integers representing the sequence. # Output For each test case, print \\"Alex\\" if he wins the game, or \\"Charlie\\" if he wins the game. # Constraints 1 ≤ T ≤ 10^5 1 ≤ n ≤ 10^6 1 ≤ sequence[i] ≤ 10^9 # Sample Input 2 3 1 2 3 4 4 3 2 1 # Sample Output Alex Charlie **Note:** In the first test case, Alex can continuously remove elements from the right and leave the sequence [1, 2] or [1], which are both strictly increasing. In the second test case, no matter what element Alex starts removing, Charlie will always be able to disrupt the sequence since it is strictly decreasing initially. Therefore, Alex cannot make the sequence strictly increasing.","solution":"def can_alex_win(sequence): for i in range(len(sequence) - 1): if sequence[i] >= sequence[i + 1]: return \\"Charlie\\" return \\"Alex\\" def solve_game(test_cases): results = [] for n, sequence in test_cases: results.append(can_alex_win(sequence)) return results"},{"question":"# Task Anna is a librarian in a large library. She is responsible for making sure all the books are arranged properly on the shelf. Each book has a unique identifier number. Anna needs to find a particular book as quickly as possible. Write a function that takes in a list of unique book identifiers, sorted in ascending order, and a target identifier. The function should return the index of the target identifier in the list. If the target identifier is not in the list, the function should return -1. You must implement the binary search algorithm to solve this problem. # Example For `books = [2, 4, 5, 7, 11, 12]` and `target = 7`, the output should be `3`. ``` The target identifier 7 is at index 3 in the list. ``` For `books = [2, 4, 5, 7, 11, 12]` and `target = 6`, the output should be `-1`. ``` The target identifier 6 is not in the list, so the function should return -1. ``` # Input/Output - `[input]` list of integers `books` - Unique book identifiers sorted in ascending order. - `1 ≤ len(books) ≤ 10^5` - `1 ≤ books[i] ≤ 10^9` - `[input]` integer `target` - The book identifier to be found. - `1 ≤ target ≤ 10^9` - `[output]` an integer - The index of the target identifier in the list, or -1 if the identifier is not found.","solution":"def binary_search(books, target): left, right = 0, len(books) - 1 while left <= right: mid = left + (right - left) // 2 if books[mid] == target: return mid elif books[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You are given an integer n. Construct a matrix of size n x n where each cell contains an integer value. The matrix should have the following properties: 1. The sum of the elements in each row is equal. 2. The sum of the elements in each column is equal. 3. The sum of the integers in the main diagonal (from the top-left to bottom-right) is equal to the sum of the integers in the anti-diagonal (from the top-right to bottom-left). 4. All numbers in the matrix are positive integers, and the difference between the maximum and minimum values in the matrix is minimized. You need to calculate and print the matrix. -----Input----- The input contains a single integer n (1 ≤ n ≤ 1000). -----Output----- Print an n x n matrix where each row starts on a new line and each integer in a row is separated by a space. -----Examples----- Input 2 Output 1 2 1 2 Input 3 Output 2 1 2 1 1 1 2 1 2 -----Note----- For the first example, the sum of each row and each column is 3. For the second example, the sum of each row and each column is 5, and the main diagonal sum is 5 (2 + 1 + 2) which is equal to the anti-diagonal sum 5 (2 + 1 + 2).","solution":"def construct_matrix(n): # Create an n x n matrix filled with 1s matrix = [[1] * n for _ in range(n)] # Modify the diagonals to comply with the conditions for i in range(n): matrix[i][i] = 2 # Set the main diagonal elements to 2 matrix[i][n - i - 1] = 2 # Set the anti-diagonal elements to 2 return matrix def print_matrix(matrix): for row in matrix: print(\\" \\".join(map(str, row))) if __name__ == \\"__main__\\": import sys input = sys.stdin.read n = int(input().strip()) matrix = construct_matrix(n) print_matrix(matrix)"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains either a \'.\' (indicating an empty cell) or a \'*\' (indicating a cell containing a star). Your task is to count the number of rows and columns that are completely filled with stars. Write a program that takes the dimensions of the grid and the grid itself as input, and returns the number of rows and columns completely filled with stars. -----Input----- The first line of the input contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid. The next n lines each contain m characters (\'.\' or \'*\') representing the grid. -----Output----- Print two integers — the number of rows and the number of columns completely filled with stars. -----Example----- Input 3 4 **** .*.. **** Output 2 1 Input 5 5 ..... ***** ..... ***** *.*.* Output 2 0 -----Explanation----- In the first example, the input represents a grid with 3 rows and 4 columns: **** .*.. **** Here, the first and third rows are completely filled with stars, so the number of such rows is 2. Only the first column is completely filled with stars, no other columns are, so the number of such columns is 1. In the second example, the input represents a grid with 5 rows and 5 columns: ..... ***** ..... ***** *.*.* Here, the second and fourth rows are completely filled with stars, so the number of such rows is 2. None of the columns are completely filled with stars, so the number of such columns is 0.","solution":"def count_filled_rows_and_columns(n, m, grid): filled_rows = sum(1 for row in grid if all(cell == \'*\' for cell in row)) filled_columns = sum(1 for col in range(m) if all(grid[row][col] == \'*\' for row in range(n))) return filled_rows, filled_columns"},{"question":"Alex is a software developer tasked with creating a program to monitor temperature readings of a remote sensor network. The network consists of several sensors, each generating temperature readings. Alex needs to handle three types of operations: 1. Record a temperature reading from a specific sensor. 2. Remove the latest reading of a specific sensor. 3. Retrieve the average temperature reading of all sensors at a given point in time. The operations are processed in sequence as they come in, and each sensor is identified by an integer ID. Input The first line of input contains an integer m (1 ≤ m ≤ 2·105) — the number of operations. Each of the next m lines describes an operation and follows one of the formats below: - \\"1 sensor_id temp\\" — Record a temperature reading temp (a floating-point number) for the sensor with ID sensor_id (an integer). - \\"2 sensor_id\\" — Remove the latest reading for the sensor with ID sensor_id. It is guaranteed that the given sensor_id has at least one reading before this operation. - \\"3\\" — Retrieve the average temperature of readings from all sensors at the current moment. If there are no temperature readings, the result should be \\"NO READINGS\\". Output For each operation of type 3, output the average temperature of all readings at that point in time, rounded to two decimal places. Print \\"NO READINGS\\" if there are no temperature readings. Example Input 9 3 1 1 36.7 1 2 35.5 3 1 1 37.0 3 2 1 3 2 2 3 Output NO READINGS 36.10 36.40 37.00 37.00 Explanation - The first operation 3 requests the average temperature, but no readings are available, so the result is \\"NO READINGS\\". - The next two operations record temperature readings: 36.7 for sensor 1 and 35.5 for sensor 2. - The second operation 3 requests the average, calculated as (36.7 + 35.5) / 2 = 36.10. - The next operation records another temperature reading: 37.0 for sensor 1. - The third operation 3 requests the average, calculated as (36.7 + 35.5 + 37.0) / 3 = 36.40. - The operation 2 removes the latest reading (37.0) for sensor 1. - The fourth operation 3 requests the average, now (36.7 + 35.5) / 2 = 36.10. - The operation 2 removes the latest reading (35.5) for sensor 2. - The final operation 3 requests the average, as there is only one reading available: 36.7. The result is \\"37.00\\".","solution":"def monitor_temperature(operations): from collections import defaultdict sensor_data = defaultdict(list) all_readings = [] def add_reading(sensor_id, temp): sensor_data[sensor_id].append(temp) all_readings.append(temp) def remove_reading(sensor_id): temp = sensor_data[sensor_id].pop() all_readings.remove(temp) def get_average(): if not all_readings: return \\"NO READINGS\\" else: return round(sum(all_readings) / len(all_readings), 2) results = [] for operation in operations: op = operation.split() if op[0] == \\"1\\": add_reading(int(op[1]), float(op[2])) elif op[0] == \\"2\\": remove_reading(int(op[1])) elif op[0] == \\"3\\": results.append(get_average()) return results"},{"question":"A delivery company needs to schedule its drivers effectively to cover multiple delivery addresses in a busy city. Each driver can deliver up to a specified maximum number of packages per day. The goal is to minimize the number of drivers required to cover all delivery addresses in one day. You are provided with the total number of delivery addresses n, and a list where each element represents the number of packages to be delivered at each address. Write a function that will take as input the number of addresses n, the maximum number of packages a driver can deliver per day max_packages, and the list of packages per address. The function should return the minimum number of drivers required to cover all delivery addresses in one day. Input format: The first line contains two space-separated integers, n and max_packages. The second line contains n space-separated integers representing the number of packages to be delivered at each address. Output format: Print a single integer, the minimum number of drivers required to deliver all packages in one day. Constraints: 1 ≤ n ≤ 1000 1 ≤ max_packages ≤ 10000 1 ≤ number of packages per address ≤ 10000 Example input 5 7 2 6 4 8 3 Example output 4 Explanation: In this case, we have 5 delivery addresses with the respective number of packages to be delivered: 2, 6, 4, 8, and 3. Each driver can deliver up to 7 packages per day. A possible optimal allocation of packages can be: - Driver 1: delivers 2 packages at the first address and 5 packages at the second address. - Driver 2: delivers 1 package at the second address and 4 packages at the third address. - Driver 3: delivers 7 packages at the fourth address. - Driver 4: delivers 3 packages at the fifth address. Thus, the minimum number of drivers required is 4.","solution":"def min_drivers_required(n, max_packages, packages_per_address): Return the minimum number of drivers required to deliver all packages in one day. :param n: int - Number of addresses :param max_packages: int - Maximum number of packages a driver can deliver per day :param packages_per_address: List[int] - List of number of packages per address :return: int - Minimum number of drivers required total_packages = sum(packages_per_address) drivers_needed = (total_packages + max_packages - 1) // max_packages return drivers_needed"},{"question":"You are tasked with arranging a sequence of colored beads on a string such that specific constraints are met. Each bead is either red, blue, or green. The sequence must adhere to the following conditions: 1. There cannot be more than two consecutive beads of the same color. 2. The number of red beads (R) must be greater than the number of blue beads (B). 3. The sequence of blue and green beads must not repeat in the same order more than twice. Your goal is to determine if a valid sequence is possible given the number of each type of bead you have. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each test case consists of three integers R, B, and G denoting the number of red, blue, and green beads available, respectively. -----Output----- For each test case, print \\"YES\\" if a valid sequence can be created, otherwise print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 0 ≤ R, B, G ≤ 1000 -----Example----- Input: 3 4 2 1 3 3 3 5 3 2 Output: YES NO YES -----Explanation----- Case 1: A possible valid sequence is RRGGRB, thus the output is \\"YES\\". Case 2: No valid sequence can be formed without breaking the given conditions, thus the output is \\"NO\\". Case 3: A possible valid sequence is RRGGRRBRG, thus the output is \\"YES\\".","solution":"def is_valid_bead_sequence(R, B, G): if R <= B: return \\"NO\\" max_blue_green_comb = B + G if max_blue_green_comb // 2 > R: return \\"NO\\" if R < (max_blue_green_comb // 2): return \\"NO\\" return \\"YES\\" def process_bead_sequences(test_cases): results = [] for R, B, G in test_cases: results.append(is_valid_bead_sequence(R, B, G)) return results"},{"question":"Alice is a budding software developer who is trying to understand the basics of data structures. She recently learned about linked lists and their operations. One day, she came across a problem where she needs to create a linked list from a sequence of numbers and then perform a set of operations on this linked list. She needs your help in implementing these operations. Your task is to write a program that helps Alice by performing the following operations on a linked list: 1. Insert a number at the end of the linked list. 2. Delete a number from the linked list. 3. Print the entire linked list. You need to implement the functions to perform these operations as described. Input The input consists of multiple datasets. Each dataset is given in the following format: N a1 a2 ... aN O op1 x1 op2 x2 ... opO xO N is the number of initial elements in the linked list (0 ≤ N ≤ 1000); ai (for 1 ≤ i ≤ N) is an integer to be inserted in the linked list initially (-10^6 ≤ ai ≤ 10^6); O is the number of operations to be performed on the linked list (1 ≤ O ≤ 1000). Each operation is formatted as `op x`, where `op` indicates the type of operation (`INSERT` or `DELETE`) and `x` is the integer to be inserted or deleted from the linked list. The operations are given in the exact order they should be performed. Output For each dataset, print the entire linked list after all operations have been performed. If the linked list is empty, print \\"EMPTY\\". Example Input 5 1 2 3 4 5 3 INSERT 6 DELETE 3 INSERT 7 0 Output 1 2 4 5 6 7","solution":"class Node: def __init__(self, value): self.value = value self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, value): new_node = Node(value) if not self.head: self.head = new_node return current = self.head while current.next: current = current.next current.next = new_node def delete(self, value): if not self.head: return if self.head.value == value: self.head = self.head.next return current = self.head while current.next and current.next.value != value: current = current.next if current.next: current.next = current.next.next def print_list(self): if not self.head: return \\"EMPTY\\" result = [] current = self.head while current: result.append(str(current.value)) current = current.next return \\" \\".join(result) def process_linked_list_operations(N, initial_elements, O, operations): linked_list = LinkedList() for elem in initial_elements: linked_list.insert(elem) for op in operations: command, value = op.split() value = int(value) if command == \\"INSERT\\": linked_list.insert(value) elif command == \\"DELETE\\": linked_list.delete(value) return linked_list.print_list()"},{"question":"# Task: Sara is learning Python programming and has come up with an interesting problem while practicing. She writes a series of numbers where each number is the product of its index and the number directly preceding it. The series starts with the number 1. For example, the first few numbers in the series will be: series(0) = 1 (starts with 1) series(1) = 1 * 0 = 0 series(2) = 0 * 1 = 0 series(3) = 0 * 2 = 0 series(4) = 0 * 3 = 0 ... She wants to determine if a given number `n` can ever appear in this series. Write a program to check if the given number `n` can appear in Sara\'s series. If it can, return \\"possible\\", otherwise return \\"impossible\\". # Example For `n=0`, the result should be `\\"possible\\"`. Since from index 1 onwards, the series will always be 0. For `n=1`, the result should be `\\"possible\\"`. The first number in the series is always 1 which occurs at index 0. For `n=2`, the result should be `\\"impossible\\"`. There is no index in the series where the value will equal 2. # Input/Output - `[input]` integer `n` an integer number `n` where `0 <= n <= 10^12` - `[output]` a string Return the string `\\"possible\\"` if `n` can appear in the series, otherwise return `\\"impossible\\"`.","solution":"def is_possible_in_series(n): Determine if the number n can appear in Sara\'s series. if n == 0 or n == 1: return \\"possible\\" return \\"impossible\\""},{"question":"In a distant land, there exists a series of ancient stone pillars, each inscribed with a single integer, that collectively form a sacred structure. These pillars have a peculiar property: they arrange themselves in an increasing sequence based on their heights. According to legend, there is a treasure hidden beneath the pillar with the highest cumulative height from all possible subsets of consecutive pillars within a certain range. Specifically, you need to help discover the maximum sum of heights of any continuous sub-sequence of the pillars. The challenge, however, is that the number of pillars is immense and the calculations can be overwhelming. Hence, you need an efficient algorithm to determine this maximum sum. Write a function that receives the number of pillars and a list of their heights, and returns the maximum sum of any continuous sub-sequence of the pillars. -----Input----- The first line of the input contains an integer n (1 leq n leq 2 cdot 10^5), representing the number of stone pillars. The next line contains n integers h_i (-10^9 leq h_i leq 10^9), the heights of the pillars. -----Output----- The output should consist of one line containing the maximum sum of heights of any continuous sub-sequence of the pillars. -----Examples----- Sample Input: 5 -2 1 -3 4 -1 2 1 -5 4 Sample Output: 6 Sample Input: 1 -1 Sample Output: -1 Note: In the first sample, the maximum sum is obtained from the sub-sequence [4, -1, 2, 1], which sums to 6. In the second sample, there\'s only one pillar and its height is -1, so the maximum sum is -1.","solution":"def max_subarray_sum(n, heights): Returns the maximum sum of any continuous sub-sequence of pillar heights. Uses Kadane\'s algorithm for efficient computation. :param n: int, the number of pillars :param heights: list of int, the heights of the pillars :return: int, the maximum sum of any continuous sub-sequence of the pillars max_current = max_global = heights[0] for height in heights[1:]: max_current = max(height, max_current + height) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given an array of integers, determine if it is possible to rearrange the array to form a consecutive sequence. A consecutive sequence is defined as a sequence where each number in the sequence is exactly 1 greater than the preceding number. For example, the array `[3, 2, 4, 1, 5]` can be rearranged to form the consecutive sequence `[1, 2, 3, 4, 5]`, and the array `[1, 2, 5, 6]` cannot be rearranged to form a consecutive sequence. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Each test case consists of two lines: - The first line contains one integer n (1 le n le 100) — the number of elements in the array. - The second line contains n integers separated by spaces — the elements of the array. -----Output----- For each test case, print YES if it is possible to rearrange the array to form a consecutive sequence. Otherwise, print NO. You may print each letter in any case (for example, YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer). -----Examples----- Input 5 5 3 2 4 1 5 4 1 2 5 6 3 7 8 9 6 10 1 11 3 2 12 1 1 Output YES NO YES NO YES -----Note----- The first test case can be rearranged as [1, 2, 3, 4, 5]. The second test case cannot be rearranged to form any consecutive sequence. The third test case is already a consecutive sequence: [7, 8, 9]. The fourth test case cannot be rearranged to form any consecutive sequence.","solution":"def can_form_consecutive_sequence(n, array): Returns \'YES\' if the array can be rearranged to form a consecutive sequence, otherwise \'NO\'. Parameters: n (int): The number of elements in the array. array (list of int): The elements of the array. Returns: str: \'YES\' or \'NO\' based on whether the array can form a consecutive sequence. if n == 1: return \\"YES\\" array.sort() for i in range(1, n): if array[i] - array[i - 1] != 1: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, array = test_cases[i] result = can_form_consecutive_sequence(n, array) results.append(result) return results"},{"question":"You are given a 2D grid of size m x n representing a map of \'1\'s (land) and \'0\'s (water). An island is a group of \'1\'s (land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. Write a function `numIslands` that returns the number of islands. Example: ``` Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 ``` Explanation: - The first island occupies the top-left corner and is represented by the connected lands (1,1), (0,1), and (1,0). - The second island occupies the middle point and is represented by the land (2,2). - The third island occupies the bottom-right corner and is represented by the connected lands (3,3) and (3,4). Function signature: `def numIslands(grid: List[List[str]]) -> int:`","solution":"def numIslands(grid): Given a 2D grid map of \'1\'s (land) and \'0\'s (water), counts the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. if not grid: return 0 def dfs(grid, r, c): grid[r][c] = \'0\' for x, y in [(0, 1), (1, 0), (0, -1), (-1, 0)]: nr, nc = r + x, c + y if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] == \'1\': dfs(grid, nr, nc) count = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == \'1\': count += 1 dfs(grid, r, c) return count"},{"question":"An educational institution wants to ensure that students are submitting their assignment on time. An assignment is marked as submitted if it is the student\'s first submission on any given day, otherwise it gets counted as an error. The institution wants to help students avoid errors by automatically adjusting their submissions as needed. Given N integers, where each integer represents a specific day on which an assignment submission was made, write a program that will correct this list such that each day has at most one submission. If a student has multiple assignment submissions on the same day, only the first one is counted as submitted and the rest are counted as errors. The program should output the list of submissions without errors and the number of errors detected. ----- Input ----- - The first line contains a single integer T denoting the number of test cases. The description of each test case follows. - The first line of each test case contains a single integer N. - The second line contains N integers representing the days when submissions were made. ----- Output ----- For each test case, print a single line with two items. First, the list of corrected submissions in ascending order. Second, the number of errors detected. ----- Constraints ----- - 1 le T le 50 - 1 le N le 1000 - Each integer in the submissions list is between 1 and 365 (days in a year). ----- Example Input ----- 2 5 1 2 2 4 5 6 3 3 3 3 3 3 ----- Example Output ----- 1 2 4 5 1 3 3 5 ----- Explanation ----- Example case 1: Submissions should only be made once per day. Duplicates on the same day are errors. \\"2\\" is submitted twice, hence detected once as an error. Example case 2: The submission day “3” appears five times, but only the first one counts as a valid submission while the rest are errors. Create a function to handle this correction and provide the necessary output.","solution":"def correct_submissions(test_cases): results = [] for case in test_cases: N = case[0] submissions = case[1] submitted_days = set() corrected_submissions = [] errors = 0 for day in submissions: if day not in submitted_days: submitted_days.add(day) corrected_submissions.append(day) else: errors += 1 corrected_submissions.sort() results.append((corrected_submissions, errors)) return results"},{"question":"You are given an array of integers representing the lengths of n books. You want to arrange the books on a bookshelf such that the sum of the lengths of all books on the shelf is maximized without exceeding a given total shelf length L. Each book can either be placed on the shelf or left aside. The problem is to determine the maximum total length of the books that can be placed on the shelf without exceeding the shelf length L. -----Input----- The first line of the input contains two integers n (1 le n le 10^5) and L (1 le L le 10^9) — the number of books and the total length of the shelf respectively. The second line of the input contains n integers l_1, l_2, dots, l_n (1 le l_i le 10^9) — the lengths of the books. -----Output----- Print a single integer — the maximum total length of the books that can be placed on the shelf without exceeding the total shelf length L. -----Examples----- Input 5 10 1 2 3 4 5 Output 10 Input 4 7 5 3 6 4 Output 7 Input 3 5 8 1 3 Output 4 -----Note----- In the first example, the books of lengths 1, 2, 3, and 4 can all be placed on the shelf, summing up to 10. In the second example, only the books of lengths 3 and 4 can be placed on the shelf, summing up to 7. In the third example, the optimal way is to choose books of lengths 1 and 3, summing up to 4.","solution":"def max_books_length(n, L, lengths): Determines the maximum total length of books that can be placed on the shelf without exceeding the total shelf length L. :param n: number of books :param L: total length of the shelf :param lengths: list of integers representing the lengths of the books :return: maximum total length of books that can be placed on the shelf lengths.sort() total_length = 0 for length in lengths: if total_length + length <= L: total_length += length else: break return total_length"},{"question":"A shopping cart feature is a common requirement in e-commerce applications. Your task is to implement a simple shopping cart system that can handle a few fundamental operations. The cart should support the following operations: 1. **ADD [item_name] [price] [quantity]**: Adds the specified item with the given price and quantity to the cart. If the item already exists, the specified quantity should be added to the existing quantity. 2. **REMOVE [item_name] [quantity]**: Removes the specified quantity of the given item from the cart. If the quantity to remove is greater than or equal to the current quantity, the item should be completely removed from the cart. 3. **PRICE [item_name] [new_price]**: Updates the price of the specified item to the new price. 4. **TOTAL**: Outputs the total cost of all items currently in the cart, formatted to two decimal places. 5. **CLEAR**: Clears all items from the cart. ------ Input ------ The first line contains an integer representing the number of operations. Each of the subsequent lines contains an operation as described above. ------ Output ------ For each `TOTAL` operation, output the total cost formatted to two decimal places. ------ Constraints ------ - Item names are case-sensitive and consist of alphabetical characters only. - The length of the item name will not exceed 20 characters. - Price and quantity are positive integers. - 1 ≤ number of operations ≤ 1000 - Price ≤ 1000 - Quantity ≤ 1000 ------ Sample Input ------ 10 ADD apple 10 2 ADD banana 5 3 TOTAL REMOVE banana 1 TOTAL PRICE apple 20 TOTAL REMOVE apple 3 TOTAL CLEAR TOTAL ------ Sample Output ------ 35.00 30.00 60.00 0.00 ------ Explanation ------ 1. Adding \'apple\' with price 10 and quantity 2. Cart now contains: { \\"apple\\": (10, 2) } 2. Adding \'banana\' with price 5 and quantity 3. Cart now contains: { \\"apple\\": (10, 2), \\"banana\\": (5, 3) } 3. Calculating the total: 10 * 2 + 5 * 3 = 35.00 4. Removing 1 banana. Cart now contains: { \\"apple\\": (10, 2), \\"banana\\": (5, 2) } 5. Calculating the total: 10 * 2 + 5 * 2 = 30.00 6. Changing the price of \'apple\' to 20. Cart now contains: { \\"apple\\": (20, 2), \\"banana\\": (5, 2) } 7. Calculating the total: 20 * 2 + 5 * 2 = 60.00 8. Removing 3 apples, which is more than the quantity in the cart, so remove all apples. Cart now contains: { \\"banana\\": (5, 2) } 9. Calculating the total: 5 * 2 = 10.00 10. Clearing the cart. 11. Calculating the total: 0.00","solution":"class ShoppingCart: def __init__(self): self.cart = {} def add(self, item_name, price, quantity): if item_name in self.cart: current_price, current_quantity = self.cart[item_name] self.cart[item_name] = (price, current_quantity + quantity) else: self.cart[item_name] = (price, quantity) def remove(self, item_name, quantity): if item_name in self.cart: current_price, current_quantity = self.cart[item_name] if quantity >= current_quantity: del self.cart[item_name] else: self.cart[item_name] = (current_price, current_quantity - quantity) def price(self, item_name, new_price): if item_name in self.cart: _, current_quantity = self.cart[item_name] self.cart[item_name] = (new_price, current_quantity) def total(self): return sum(price * quantity for price, quantity in self.cart.values()) def clear(self): self.cart.clear()"},{"question":"Given two strings, s1 and s2, check if s2 is a rotated version of s1. Rotation means moving some of the characters from the beginning of the string to the end while preserving the order. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case consists of two space-separated strings, s1 and s2. ------ Output Format ------ For each test case, output \\"Yes\\" if s2 is a rotated version of s1, and \\"No\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |s1|, |s2| ≤ 10^5 Both strings contain only lowercase English letters. ------ Sample Input ------ 3 waterbottle erbottlewat hello llohe abcde abced ------ Sample Output ------ Yes Yes No ------ Explanation ------ Test case 1: If you rotate \'waterbottle\' starting after the \\"erbottle\\" part, it becomes \'erbottlewat\'. Test case 2: If you rotate \'hello\' starting after the \\"llo\\" part, it becomes \'llohe\'. Test case 3: There is no way to rotate \'abcde\' to get \'abced\'.","solution":"def is_rotated_version(s1, s2): Returns True if s2 is a rotated version of s1, False otherwise. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Problem Mara is planning a hiking trip on a mountainous terrain which is represented by a grid of size n x m. Each cell in the grid has an elevation value, representing how high that point is above sea level. Mara can move up, down, left, or right from a cell to an adjacent cell as long as the elevation difference between the current cell and the adjacent cell is not more than d units. She starts her hike at the top-left cell (0, 0) and wants to reach the bottom-right cell (n-1, m-1). Write a program to determine if it is possible for Mara to reach her destination given the elevation constraints. If it is possible, print the minimum number of steps required. Otherwise, print \\"Impossible\\". Constraints: * 1 ≤ n, m ≤ 1000 * 0 ≤ elevation values ≤ 10000 * 0 ≤ d ≤ 10000 Input The first line contains three integers, n (number of rows), m (number of columns), and d (maximum allowable elevation difference), separated by spaces. The following n lines each contain m integers representing the elevation values of the terrain. Output Print the minimum number of steps required to move from the top-left cell (0, 0) to the bottom-right cell (n-1, m-1). If it is impossible, print \\"Impossible\\". Examples Input 5 5 2 1 2 2 3 4 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9 Output 8 Input 3 3 1 1 3 5 2 2 2 3 3 3 Output 4 Input 3 3 1 10 11 12 20 25 30 10 12 11 Output Impossible Note In the first example, Mara follows the path with a total of 8 steps considering the elevation differences have to be within 2 units. In the second example, Mara can move through the grid satisfying the elevation difference constraint in 4 steps. In the third example, it is impossible for Mara to reach her destination due to the large elevation differences.","solution":"from collections import deque def min_steps_to_reach_destination(n, m, d, grid): def is_valid(x, y, prev_val): return 0 <= x < n and 0 <= y < m and abs(grid[x][y] - prev_val) <= d and (x, y) not in visited directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set() visited.add((0, 0)) while queue: x, y, steps = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, grid[x][y]): visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return \\"Impossible\\""},{"question":"A car dealership has a target of selling a certain number of cars each month. Given the daily sales for a month, determine whether the dealership meets its monthly target. ------ Input Format ------ - The first line will contain T, the number of test cases. - Each test case will have two parts: - The first line contains two integers D and M - the number of days in the month and the target number of cars to sell. - The second line contains D integers, representing the number of cars sold each day. ------ Output Format ------ For each test case, output \\"Yes\\" if the target is met or exceeded, and \\"No\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ D ≤ 31 1 ≤ M ≤ 1000 0 ≤ text{Daily Sales} ≤ 100 ------ Sample Input 1 ------ 2 5 15 3 4 2 5 1 7 25 4 3 5 6 2 1 4 ------ Sample Output 1 ------ Yes No ------ Explanation 1 ------ Test case-1: The dealership sold a total of 3 + 4 + 2 + 5 + 1 = 15 cars in 5 days, meeting the target of 15 cars. Test case-2: The dealership sold a total of 4 + 3 + 5 + 6 + 2 + 1 + 4 = 25 cars in 7 days, which matches the target of 25 cars, but since the target must be met, \\"Yes\\" is returned. --- Note about Edge Case --- Daily sales may include days with zero sales, and the target can be exactly met or exceeded for a \\"Yes\\" output.","solution":"def meets_monthly_target(test_cases): results = [] for case in test_cases: D, M, sales = case total_sales = sum(sales) results.append(\\"Yes\\" if total_sales >= M else \\"No\\") return results def parse_input(input_str): lines = input_str.split(\\"n\\") T = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(T): D, M = map(int, lines[index].strip().split()) sales = list(map(int, lines[index + 1].strip().split())) test_cases.append((D, M, sales)) index += 2 return test_cases"},{"question":"You are given an array of integers. Your task is to find the product of all the elements in the array except the element at each index. Create a new array where the value at each index `i` is the product of all the elements in the original array except the one at `i`. You are not allowed to use division. -----Constraints----- - The length of the array will be between 1 and 10^5. - Each element of the array will be an integer between -100 and 100. -----Input----- The input is given from Standard Input in the following format: - First line: an integer `n`, the number of elements in the array. - Second line: `n` space-separated integers representing the elements of the array. -----Output----- Print the resulting array as space-separated integers. -----Sample Input----- 4 1 2 3 4 -----Sample Output----- 24 12 8 6 Explanation: - For the first position (1), the product is 2 * 3 * 4 = 24 - For the second position (2), the product is 1 * 3 * 4 = 12 - For the third position (3), the product is 1 * 2 * 4 = 8 - For the fourth position (4), the product is 1 * 2 * 3 = 6","solution":"def product_except_self(nums): n = len(nums) # Step 1: Create two arrays to store prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Step 2: Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Step 3: Calculate suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Step 4: Calculate the result by multiplying prefix and suffix products result = [1] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Write a function that calculates the sum of an array of integers. The function should handle multiple test cases and be efficient enough to handle large inputs. Input The first line contains an integer t, the number of test cases (1 ≤ t ≤ 100). Each of the next t lines contains an integer n (1 ≤ n ≤ 100), followed by n space-separated integers a1, a2, ..., an, each on a single line (-104 ≤ ai ≤ 104). Output For each test case, output a single integer: the sum of the given array of integers. Examples Input 2 3 1 2 3 5 -10 20 10 -5 5 Output 6 20 Input 1 4 100 200 -100 -50 Output 150","solution":"def calculate_sums(test_cases): Calculate the sum of integers for multiple test cases. Parameters: test_cases (list of list of int): List containing test cases with integers. Returns: list of int: List containing sums of each test case. results = [] for case in test_cases: n = case[0] integers = case[1:] results.append(sum(integers)) return results"},{"question":"A group of friends is participating in a charity marathon and they decide to start a fundraising campaign. Each friend will collect donations from various sponsors with each donation being recorded in a log. The log keeps track of the sponsor\'s name and the amount donated. Your task is to analyze the donations and answer queries about the total amount raised by a specific sponsor. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of donations recorded in the log. Each of the next n lines contains a donor\'s name and the donated amount separated by a space. The donor\'s name consists of only alphabetic characters and the donated amount is a positive integer (1 ≤ amount ≤ 10000). A donor may appear multiple times in the log with different donation amounts. The next line contains an integer q (1 ≤ q ≤ 100) — the number of queries. Each of the next q lines contains a single string which is a donor\'s name. For each query, you need to output the total amount donated by that donor. -----Output----- For each query, print the total donation amount for the given donor’s name on a new line. If the donor did not donate any amount, print 0. -----Examples----- Input 5 Alice 100 Bob 200 Alice 300 Charlie 400 Bob 150 3 Alice Bob David Output 400 350 0 Note In the sample input, Alice donated 100 on the first record and 300 on the third record, totaling 400. Bob\'s total donations are 200 + 150 = 350. David did not make any donation, so the output is 0.","solution":"def total_donations_log(n, log, q, queries): Returns the total donation amount for each donor in the queries. Parameters: n (int): Number of donations recorded in the log. log (list): List of tuples where each tuple contains donor\'s name and the amount donated. q (int): Number of queries. queries (list): List of donor names. Returns: list: List of total donations for each donor in queries. donation_dict = {} # Process each donation log entry for entry in log: name, amount = entry amount = int(amount) if name in donation_dict: donation_dict[name] += amount else: donation_dict[name] = amount # Process each query and return the total donation for each donor result = [] for query in queries: result.append(donation_dict.get(query, 0)) return result"},{"question":"Marc is training for a marathon and follows a strict training schedule for a certain number of days. Each day, he plans to either run a certain number of kilometers or rest. Every day he can either run `x` kilometers or rest. However, he cannot rest on two consecutive days. Marc wants to know the number of valid schedules he can follow for a given number of days. A valid schedule means that he follows the rule of not resting on two consecutive days. Help Marc find the number of such valid schedules. ------ Input ------ The input consists of a single integer `n` denoting the number of days Marc schedules his training. ------ Output ------ Print a single line containing one integer — the number of valid training schedules Marc can follow. ------ Constraints ------ 1 ≤ n ≤ 10^{5} ----- Sample Input 1 ------ 5 ----- Sample Output 1 ------ 8 ----- Explanation 1 ------ The number of valid schedules for n = 5 days are: 1. RRRRR (run every day) 2. RRRR (rest on the last day) 3. RRRR (rest on the second last day) 4. RRR (rest on the fourth day) 5. RRR (rest on the third day) 6. RR (rest on the fourth day, then rest again after the last run) 7. R (rest on the second, fourth days) 8. R (rest on the third, then the fifth day) Note: `R` denotes a running day, and `r` denotes a rest day, ensuring there are no consecutive rest days.","solution":"def count_valid_schedules(n): if n == 0: return 0 if n == 1: return 2 # Run or Rest dp_run = [0] * (n + 1) dp_rest = [0] * (n + 1) dp_run[1] = 1 # Run on the first day dp_rest[1] = 1 # Rest on the first day for i in range(2, n + 1): dp_run[i] = dp_run[i - 1] + dp_rest[i - 1] dp_rest[i] = dp_run[i - 1] return dp_run[n] + dp_rest[n] # Example usage: # n = 5 # print(count_valid_schedules(n)) # Output: 8"},{"question":"Write a function that takes an integer input and returns the sum of all even numbers from 1 to the given integer (inclusive). If the input is less than 1, the function should return 0.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers from 1 to n (inclusive). If n is less than 1, returns 0. if n < 1: return 0 return sum(i for i in range(1, n + 1) if i % 2 == 0)"},{"question":"Check if the parentheses are balanced Write a function that takes a string containing `(`, `)`, `{`, `}`, `[`, and `]` characters and determines whether the input string is a valid combination of open and closed parentheses. A string containing open and closed parentheses is considered valid if: 1. Each open parenthesis `(` is closed by a matching `)` in the correct order. 2. Each open curly bracket `{` is closed by a matching `}` in the correct order. 3. Each open bracket `[` is closed by a matching `]` in the correct order. 4. Parentheses are closed in the correct nested order (e.g., \\"()[]{}\\" is valid, but \\"(]\\" and \\"([)]\\" are not). # Input - A string `s` containing only `(`, `)`, `{`, `}`, `[` and `]` characters. (1 ≤ Length ≤ 100) # Output - Return `True` if the string is valid, otherwise `False`. # Examples - \\"()\\" returns `True` - \\"()[]{}\\" returns `True` - \\"(]\\" returns `False` - \\"([)]\\" returns `False` - \\"{[]}\\" returns `True` # Note - You can assume that the input string consists of only the above-mentioned characters. # Function signature ```python def is_balanced(s: str) -> bool: pass ``` # Hint To solve this problem, you might want to use a stack data structure to keep track of the opened parentheses and ensure they are closed in the correct order.","solution":"def is_balanced(s: str) -> bool: stack = [] matching_parenthesis = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_parenthesis.values(): stack.append(char) elif char in matching_parenthesis.keys(): if stack == [] or matching_parenthesis[char] != stack.pop(): return False else: return False return stack == []"},{"question":"A famous city has n landmarks and m routes connecting them. Each route has a certain cost. A tourist wants to explore the city by visiting all the landmarks, starting and ending at a specific landmark, while minimizing the total cost of travel. The problem can be modeled as finding the minimum Hamiltonian circuit in a weighted graph. -----Input----- The first line contains two integers n and m (2 leq n leq 12, 1 leq m leq 54) — the number of landmarks and the number of routes. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 1000) — the route between the landmarks u and v with cost w. -----Output----- Print one integer — the minimum cost to visit all landmarks exactly once and return to the starting landmark. If it is not possible to visit all landmarks and return to the starting one, print -1. -----Examples----- Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output 80 Input 3 3 1 2 5 1 3 10 2 3 20 Output 35 -----Note----- In the first test, a possible optimal route is 1→2→4→3→1 with a total cost of 10 + 25 + 30 + 15 = 80. In the second test, a possible optimal route is 1→2→3→1 with a total cost of 5 + 20 + 10 = 35.","solution":"import itertools def min_hamiltonian_circuit(n, m, routes): # Creating the adjacency matrix graph = [[float(\'inf\')] * n for _ in range(n)] for u, v, w in routes: graph[u-1][v-1] = w graph[v-1][u-1] = w min_cost = float(\'inf\') # Generate all permutations except the first point since we assume it as the start for perm in itertools.permutations(range(1, n)): current_cost = 0 k = 0 # Start from the first landmark for j in perm: current_cost += graph[k][j] k = j current_cost += graph[k][0] if current_cost < min_cost: min_cost = current_cost return min_cost if min_cost != float(\'inf\') else -1"},{"question":"Given an array of integers and a target sum, find whether there exist two distinct indices i and j in the array such that arr[i] + arr[j] equals the target sum. Example 1: Input: N = 5 arr[] = {1, 2, 3, 4, 5} target = 9 Output: True Explanation: arr[3] + arr[4] = 4 + 5 = 9 Example 2: Input: N = 5 arr[] = {1, 2, 3, 4, 5} target = 10 Output: False Explanation: No two distinct indices i and j exist such that arr[i] + arr[j] equals the target sum. Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasPairWithSum() which takes the integer array arr[], its size N, and the target sum as input parameters and returns \\"True\\" if there exist two distinct indices that together give the target sum else return \\"False\\". Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^7 ≤ arr[i] ≤ 10^7 -10^7 ≤ target ≤ 10^7","solution":"def hasPairWithSum(arr, N, target): Returns True if there exist two distinct indices i and j in the array such that arr[i] + arr[j] equals the target sum, otherwise returns False. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Write a function that takes a string of comma-separated key-value pairs and converts it into a dictionary. Each key and value are separated by a colon. The input string may have spaces between the key, colon, and value elements, and those should be ignored. The keys in the dictionary should be the strings, and the values should be integers. For example: Input: ```python \\"age : 21, height:180, weight : 75, score: 95\\" ``` Output: ```python {\\"age\\": 21, \\"height\\": 180, \\"weight\\": 75, \\"score\\": 95} ``` Write a function `convert_to_dict(input_str)` that achieves this transformation.","solution":"def convert_to_dict(input_str): Converts a string of comma-separated key-value pairs into a dictionary. Each key-value pair is separated by a colon. Spaces between the key, colon, and value elements are ignored. :param input_str: A string of key-value pairs separated by commas and colons. :return: A dictionary with the keys as strings and values as integers. key_value_pairs = input_str.split(\',\') result_dict = {} for pair in key_value_pairs: key, value = pair.split(\':\') key = key.strip() value = int(value.strip()) result_dict[key] = value return result_dict"},{"question":"Given an array of integers, arr, and an integer, k, your task is to find the maximum sum of k consecutive elements in the array. ------ Input ------ The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 10^5) representing the number of elements in the array followed by n space-separated integers representing the elements of the array. The next line contains the integer k (1 ≤ k ≤ n). The input is terminated with a test case where n=0, which should not be processed. ------ Output ------ For each test case, output the maximum sum of k consecutive elements in the array on a new line. ------ Sample Input 1 ------ 5 1 2 3 4 5 3 6 10 20 30 40 50 60 2 0 ------ Sample Output 1 ------ 12 110 ------ Explanation ------ In the first test case, the maximum sum of 3 consecutive elements in the array [1, 2, 3, 4, 5] is 12 (3+4+5). In the second test case, the maximum sum of 2 consecutive elements in the array [10, 20, 30, 40, 50, 60] is 110 (50+60).","solution":"def max_sum_of_k_consecutive_elements(test_cases): Given multiple test cases, find the maximum sum of k consecutive elements in each case. Args: test_cases (list): A list of tuples where each tuple contains (n, arr, k). Returns: list: A list of integers representing the maximum sum of k consecutive elements for each test case. results = [] for n, arr, k in test_cases: if n == 0: break max_sum = float(\'-inf\') current_sum = sum(arr[:k]) for i in range(n - k + 1): if i > 0: current_sum = current_sum - arr[i-1] + arr[i+k-1] max_sum = max(max_sum, current_sum) results.append(max_sum) return results"},{"question":"You are given a binary tree where each node has a value and may have a left and/or right child. The tree is represented as follows using indices in level-order traversal (i.e., breadth-first traversal): - The value of the root node is given as an integer. - Each subsequent pair of integers represents the indices of the left and right children of the node at level-order position i, with -1 indicating a missing child. For example, the sequence 1, 2, 3, -1, -1, 4, 5 represents the following tree: ``` 1 / 2 3 / 4 5 ``` where node 1 has children 2 and 3, node 3 has children 4 and 5, and node 2 has no children. Task: Calculate the sum of all node values at the deepest level of the tree. If there are multiple levels with the same depth, use the deepest one. Input Format: - The first line contains a single integer n, denoting the number of nodes in the tree. - The second line contains n integers, the values of the nodes in level-order. - The third line contains 2n integers, describing the left and right children of each node in level-order. Output Format: - Output a single integer, the sum of the values of the nodes at the deepest level of the tree. Constraints: - 1 leq n leq 10^5 - 1 leq text{value of each node} leq 10^4 Sample Input: ``` 5 1 2 3 4 5 2 3 -1 -1 4 5 -1 -1 ``` Sample Output: ``` 9 ``` Explanation: As per the given tree structure, the deepest level nodes are 4 and 5, their sum is 4 + 5 = 9. Note: The input ensures that indices are provided in a valid level-order fashion and all node indices are within permissible bounds.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(node_vals, children_indices): if not node_vals: return None nodes = [TreeNode(val) for val in node_vals] child_index_it = iter(children_indices) for node in nodes: left_index = next(child_index_it, -1) right_index = next(child_index_it, -1) node.left = nodes[left_index - 1] if left_index != -1 else None node.right = nodes[right_index - 1] if right_index != -1 else None return nodes[0] def deepest_level_sum(root): if not root: return 0 from collections import deque queue = deque([root]) level_sum = 0 while queue: level_size = len(queue) level_sum = 0 for _ in range(level_size): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) return level_sum def solve(n, node_vals, children_indices): root = build_tree(node_vals, children_indices) return deepest_level_sum(root)"},{"question":"You are given a very long string consisting of lowercase English letters. You are interested in finding the longest substring that consists of only one unique character and its length. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 2 cdot 10^5) — the string for which you need to find the longest substring with one unique character. Additional constraint on the input: the total length of all strings over all t test cases does not exceed 2 cdot 10^6. -----Output----- For each test case, print a single integer — the length of the longest substring that consists of only one unique character. -----Examples----- Input 3 aaaaa abcde aabbccddd Output 5 1 3 -----Note----- In the first test case, the string \\"aaaaa\\" consists entirely of the character \'a\', so the longest substring with one unique character has length 5. In the second test case, no character repeats consecutively, so the longest substring with one unique character has length 1. In the third test case, the longest substring with one unique character is \\"ddd\\", with a length of 3.","solution":"def longest_unique_substring_length(strings): Given a list of strings, for each string, finds the length of the longest substring that consists of only one unique character. :param strings: List of strings :return: List of integers representing the length of the longest substring with one unique character for each input string results = [] for s in strings: max_len = 0 count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: max_len = max(max_len, count) count = 1 max_len = max(max_len, count) results.append(max_len) return results # Function to process multiple test cases def process_test_cases(t, test_cases): return longest_unique_substring_length(test_cases)"},{"question":"You are participating in a game where you have to answer a series of questions. One of the questions has three options: X, Y, and Z. Based on the clues provided, you need to identify the correct option. You\'ve been told that possibilities P and Q are incorrect choices. -----Constraints----- - Each of the numbers P and Q is X, Y, or Z. - P and Q are always distinct. -----Input----- Input is given from Standard Input in the following format: P Q -----Output----- Print the correct option. -----Sample Input----- X Y -----Sample Output----- Z In this case, since X and Y are both incorrect, the correct answer is Z.","solution":"def find_correct_option(P, Q): Given two incorrect options P and Q, returns the correct option. options = {\'X\', \'Y\', \'Z\'} incorrect_options = {P, Q} correct_option = options - incorrect_options return correct_option.pop()"},{"question":"Given a string `s` consisting of lowercase English letters and a pattern `p` consisting of lowercase English letters and dots (\'.\'). A dot (\'.\') matches any single character. Write a function that checks if the entire string `s` matches the pattern `p`. Input - The first line contains the string `s`. (1 ≤ |s| ≤ 100) - The second line contains the pattern `p`. (1 ≤ |p| ≤ 100) Output - Output \\"YES\\" if the entire string `s` matches the pattern `p`, otherwise, output \\"NO\\". Example Input abc a.c Output YES Input abc a.d Output NO Input hello h.llo Output YES","solution":"def is_match(s, p): Checks if string `s` matches the pattern `p`. A dot (\'.\') in pattern `p` matches any single character in string `s`. Parameters: s (str): input string p (str): pattern string with possible dots Returns: str: \\"YES\\" if the entire string `s` matches the pattern `p`, otherwise \\"NO\\" if len(s) != len(p): return \\"NO\\" for i in range(len(s)): if p[i] != \'.\' and p[i] != s[i]: return \\"NO\\" return \\"YES\\""},{"question":"Write a function `is_isogram` that determines whether a given string is an isogram. An isogram is a word or phrase without a repeating letter, consecutive or nonconsecutive. Ignore letter case. Examples: ```python is_isogram(\\"Dermatoglyphics\\") # returns true is_isogram(\\"aba\\") # returns false is_isogram(\\"moOse\\") # returns false ``` Note: - The function should return a boolean value: `true` if the input is an isogram and `false` otherwise. - Ignore spaces and hyphens in the input.","solution":"def is_isogram(string): Determines whether the given string is an isogram. Parameters: string (str): The string to check. Returns: bool: True if the string is an isogram, False otherwise. # Normalize the string: remove spaces and hyphens, and convert to lowercase normalized_string = string.replace(\\" \\", \\"\\").replace(\\"-\\", \\"\\").lower() # Use a set to check for unique characters char_set = set() for char in normalized_string: if char in char_set: return False char_set.add(char) return True"},{"question":"**Game High Scores** You are tasked to create a program that manages high scores for a game. The game has multiple levels, each having multiple players with their respective scores. Your job is to determine the highest score for each level, available from the data. Additionally, you need to determine how many unique players have achieved the highest score on each level. # Input The input consists of several datasets. Each dataset is described below: - The first line of each dataset contains a single integer `n` (1 ≤ n ≤ 50), the number of levels. - The next `n` lines describe each level. Each of these lines contains the level name (a string without spaces), followed by `m` (1 ≤ m ≤ 1000), the number of entries for the level. - Each of the next `m` lines in a level description contains a player name (a string without spaces) and that player\'s score (an integer such that 0 ≤ score ≤ 10^6). The input ends with a line containing a single integer `0`. # Output For each dataset, print the highest score for each level on separate lines. Following the highest score, print the number of unique players who achieved that highest score for the respective level. Print an empty line after each dataset. # Sample Input ``` 2 Level1 3 Alice 100 Bob 200 Alice 200 Level2 2 Donna 150 Bob 150 1 Level3 4 Eve 300 Alice 100 Frank 300 George 250 0 ``` # Sample Output ``` 200 2 150 2 300 2 ``` # Explanation In the sample input, the first dataset consists of two levels. In `Level1`, the highest score is `200`, achieved by both `Bob` and `Alice`. Hence the output is `200 2` for `Level1`. In `Level2`, the highest score is `150`, achieved by both `Donna` and `Bob`, resulting in `150 2` for `Level2`. In the second dataset, the highest score for `Level3` is `300`, achieved by both `Eve` and `Frank`, making the output `300 2` for `Level3`.","solution":"def get_high_scores(data): import sys input = data.split(\'n\') results = [] it = iter(input) while True: n = int(next(it)) if n == 0: break dataset_result = [] for _ in range(n): level_info = next(it).split() level_name = level_info[0] m = int(level_info[1]) scores = {} for _ in range(m): player_info = next(it).split() player_name = player_info[0] score = int(player_info[1]) if score in scores: scores[score].add(player_name) else: scores[score] = {player_name} max_score = max(scores.keys()) max_score_players = scores[max_score] dataset_result.append(f\\"{max_score} {len(max_score_players)}\\") results.append(\\"n\\".join(dataset_result)) return \\"nn\\".join(results)"},{"question":"Given a binary string s of length N, determine the minimum number of operations needed to make the string alternating. An alternating string is a string in which no two adjacent characters are the same. You are allowed to flip the bits (i.e. change \'0\' to \'1\' and vice versa) at any position. Example 1: Input: N = 3 s = \\"010\\" Output: 0 Explanation: The given string is already alternating, so no operations are required. Example 2: Input: N = 5 s = \\"11110\\" Output: 2 Explanation: Two possible ways to make the string alternating: 1. Flip the first bit and the fifth bit: \\"01101\\" 2. Flip the second bit and the third bit: \\"10110\\" In both cases, we need 2 operations. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minOperationsToAlternate() which takes an integer N and a binary string s as input and returns the minimum number of operations required to make the string alternating. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} s[i] is either \'0\' or \'1\'","solution":"def minOperationsToAlternate(N, s): Returns the minimum number of operations required to make the string alternating. Parameters: N (int): The length of the binary string. s (str): The binary string. Returns: int: The minimum number of operations. pattern1 = \\"01\\" * ((N + 1) // 2) pattern2 = \\"10\\" * ((N + 1) // 2) count1 = count2 = 0 for i in range(N): if s[i] != pattern1[i]: count1 += 1 if s[i] != pattern2[i]: count2 += 1 return min(count1, count2)"},{"question":"A railway company is planning a maintenance schedule for its tracks. The railway network can be represented as a graph with stations as vertices and tracks as edges. Each track has a length, and the goal is to minimize the total maintenance cost by ensuring all stations remain connected during the maintenance. You are tasked with writing a program to find the minimum spanning tree (MST) of the railway network, which will represent the minimum cost required to keep all stations connected. Input The input is given in the following format: n m u1 v1 l1 u2 v2 l2 ... um1 vm1 lm1 The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), where n is the number of stations and m is the number of tracks. Each of the next m lines contains three integers ui, vi, and li (1 ≤ ui, vi ≤ n, 1 ≤ li ≤ 1000), representing a track between station ui and station vi with length li. It is guaranteed that the graph is connected and has no more than one track between any two stations. Output Print a single integer representing the minimum total length of tracks required to keep all stations connected. Example Input 4 5 1 2 4 1 3 3 2 3 1 2 4 2 3 4 5 Output 6","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def krushkal_mst(n, edges): result = [] i, e = 0, 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = edges[i] i = i + 1 x = find(parent, u-1) y = find(parent, v-1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def minimum_spanning_tree(n, m, tracks): edges = [] for track in tracks: u, v, l = track edges.append([u, v, l]) return krushkal_mst(n, edges)"},{"question":"You are given an array of integers. Your task is to find and return the length of the shortest subarray that, when sorted, results in the whole array being sorted in non-decreasing order. If the array is already sorted, return 0. Write a function that fulfills the requirements. Function Signature: ```python def shortest_subarray_to_sort(arr: List[int]) -> int: pass ``` # Input Format A single line containing an integer array separated by spaces. # Output Format A single integer indicating the length of the subarray. # Constraints - 1 ≦ len(arr) ≦ 10^5 - -10^9 ≦ arr[i] ≦ 10^9 # Example Example 1 Input: ``` 2 6 4 8 10 9 15 ``` Output: ``` 5 ``` Explanation: The subarray [6, 4, 8, 10, 9] needs to be sorted to make the whole array non-decreasing: [2, 4, 6, 8, 9, 10, 15]. Example 2 Input: ``` 1 2 3 4 ``` Output: ``` 0 ``` Explanation: The array is already sorted. Example 3 Input: ``` 1 ``` Output: ``` 0 ``` Explanation: A single-element array is already sorted.","solution":"from typing import List def shortest_subarray_to_sort(arr: List[int]) -> int: n = len(arr) # Check if the array is already sorted if arr == sorted(arr): return 0 # Find the beginning of the unsorted subarray left = 0 while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 # Find the end of the unsorted subarray right = n - 1 while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # Find the min and max in the unsorted subarray subarray_min = min(arr[left:right + 1]) subarray_max = max(arr[left:right + 1]) # Expand the left boundary leftwards while left > 0 and arr[left - 1] > subarray_min: left -= 1 # Expand the right boundary rightwards while right < n - 1 and arr[right + 1] < subarray_max: right += 1 return right - left + 1"},{"question":"**Problem Statement** Given two strings of equal length, you need to determine the minimum number of operations required to make the strings exactly the same. In one operation, you can change any character of the first string to any other character. Write a function that takes two strings as input and returns the minimum number of operations needed. # Inputs - The input consists of two strings `S1` and `S2` of equal length `L` (1 leq L leq 10^5). - Both strings consist of lowercase English letters only. # Output - Print a single integer, the minimum number of operations required to make `S1` and `S2` identical. # Example Input: ``` abcde bcdef ``` Output: ``` 5 ``` Input: ``` abcdef abdcef ``` Output: ``` 2 ``` Input: ``` aaaaa bbbbb ``` Output: ``` 5 ```","solution":"def min_operations_to_make_strings_identical(S1, S2): Given two strings S1 and S2 of equal length, return the minimum number of operations needed to make the strings identical. One operation consists of changing any character of S1 to any other character. # Count number of positions where the characters are different count_differences = sum(1 for a, b in zip(S1, S2) if a != b) return count_differences"},{"question":"A university is organizing a relay race for its sports day. The race has a peculiar rule: there are N runners standing in a straight line, each with a specific stamina level that denotes how far they can run before they need to hand over the baton. Given the list of stamina levels of these N runners and the total length of the race, determine if it is possible for the runners to complete the race without any runner\'s stamina being exceeded. If it is possible to complete the race, print \\"YES\\", followed by the minimum number of runners needed. If it is not possible, print \\"NO\\". Input The first line contains an integer T, the number of test cases. For each test case, the first line contains two integers N (1 ≤ N ≤ 1000) and L (1 ≤ L ≤ 10^6), the number of runners and the total length of the race, respectively. The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^6), where a_i denotes the stamina of the i-th runner. Output For each test case, output \\"YES\\" and the minimum number of runners needed if it is possible to complete the race, otherwise output \\"NO\\". Example Input 3 3 10 4 5 6 2 15 7 3 5 5 5 2 2 2 2 Output YES 2 NO YES 5","solution":"def min_runners_needed(N, L, stamina_levels): stamina_levels.sort(reverse=True) total_covered_distance = 0 runners_used = 0 for stamina in stamina_levels: total_covered_distance += stamina runners_used += 1 if total_covered_distance >= L: return \\"YES \\" + str(runners_used) return \\"NO\\" def relay_race(T, test_cases): results = [] for i in range(T): N, L = test_cases[i][0] stamina_levels = test_cases[i][1] result = min_runners_needed(N, L, stamina_levels) results.append(result) return results"},{"question":"You are given a sequence of n integers. Your task is to answer q queries. In each query, you need to determine the maximum sum of a contiguous subsequence of length exactly k. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of integers in the sequence and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9) — the elements of the sequence. The next q lines contain one integer k (1 ≤ k ≤ n) — the length of the subsequence for the corresponding query. Output For each query, print the maximum sum of any contiguous subsequence of length exactly k. Examples Input 5 3 1 -2 3 -1 2 2 3 5 Output 2 4 3 Note In the first sample: - For k = 2, the possible subarrays of length 2 are [1, -2], [-2, 3], [3, -1], and [-1, 2]. The sums of these subarrays are -1, 1, 2, and 1, respectively. The maximum sum is 2. - For k = 3, the possible subarrays of length 3 are [1, -2, 3], [-2, 3, -1], and [3, -1, 2]. The sums of these subarrays are 2, 0, and 4, respectively. The maximum sum is 4. - For k = 5, the only possible subarray is [1, -2, 3, -1, 2], and the sum is 3.","solution":"def max_sum_subsequence_of_length_k(sequence, k): Returns the maximum sum of any contiguous subsequence of length exactly k from the sequence. n = len(sequence) # Calculate initial sum of the first \'k\' elements current_sum = sum(sequence[:k]) max_sum = current_sum # Use sliding window to calculate sums of subsequences of length \'k\' for i in range(k, n): current_sum = current_sum - sequence[i - k] + sequence[i] if current_sum > max_sum: max_sum = current_sum return max_sum def process_queries(sequence, queries): results = [] for k in queries: results.append(max_sum_subsequence_of_length_k(sequence, k)) return results"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell of the grid is either passable (denoted by \'.\') or impassable (denoted by \'#\'). Your task is to determine the number of distinct regions of passable land. Two cells belong to the same region if they are both passable and can be reached from one another by moving horizontally or vertically through other passable cells. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1,000) — the number of rows and columns, respectively. The next n lines contain m characters each, either \'.\' or \'#\', denoting the grid. -----Output----- Print a single integer — the number of distinct regions of passable land. -----Examples----- Input 4 5 ... #..#. ..# .#. Output 4 Input 3 3 ... # ... Output 2 -----Note----- In the first sample, the grid consists of four distinct regions: 1. Top-left region consisting of two cells. 2. Middle region near the center consisting of two cells. 3. Bottom right region of two cells. 4. Single standalone cell at the bottom-left. In the second sample, there are two distinct regions of passable cells located independently on the top and bottom rows.","solution":"def count_distinct_regions(grid, n, m): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'#\': return grid[x][y] = \'#\' dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) region_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': region_count += 1 dfs(i, j) return region_count"},{"question":"You are given an array of integers representing the heights of people standing in a queue. The heights can vary, but shorter people should be seated in front while taller ones should be at the back, maintaining the original order of people with the same height. Example 1: Input: N = 5 arr[] = {5, 3, 9, 2, 2} Output: {2, 2, 3, 5, 9} Explanation: The people with height 2 are placed in the front, followed by those with heights 3, then 5, and finally 9. Example 2: Input: N = 4 arr[] = {7, 5, 7, 6} Output: {5, 6, 7, 7} Explanation: The person with height 5 is placed in front, followed by the person with height 6, and then both people with height 7. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function sortQueue() that takes an array arr[] and an integer N as parameters and sorts the array according to the above-given conditions. The function does not return anything. Expected Time Complexity: O(NlogN). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^3 1 ≤ arr[i] ≤ 10^4","solution":"def sortQueue(arr, N): Sorts an array `arr` of size `N` such that shorter people are at the front and taller ones at the back, maintaining the original order of people with the same height. arr.sort() # Example usage: # arr = [5, 3, 9, 2, 2] # sortQueue(arr, len(arr)) # print(arr) # Output: [2, 2, 3, 5, 9]"},{"question":"Given an array of integers representing the in-order traversal of a binary tree, determine if the given array can represent a Binary Search Tree (BST). Example 1: Input: N = 3 arr = {1, 2, 3} Output: True Explanation: The array {1, 2, 3} is in increasing order, which means it can represent the in-order traversal of a BST. Example 2: Input: N = 3 arr = {3, 2, 1} Output: False Explanation: The array {3, 2, 1} is not in increasing order, so it cannot represent the in-order traversal of a BST. Example 3: Input: N = 4 arr = {1, 3, 2, 4} Output: False Explanation: The array {1, 3, 2, 4} is not in increasing order, so it cannot represent the in-order traversal of a BST. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canRepresentBST() which takes the array arr[] and its size N as input parameters and returns a boolean value indicating whether the array can represent the in-order traversal of a BST. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{3} 1 ≤ arr[i] ≤ 10^{6}","solution":"def canRepresentBST(arr, N): Determine if the given array can represent the in-order traversal of a BST. :param arr: List[int], the array of integers :param N: int, size of the array :return: bool, True if it can represent the in-order traversal of a BST, False otherwise for i in range(1, N): if arr[i] <= arr[i - 1]: return False return True"},{"question":"Millie is playing a game where she needs to manage an ordered list of integers and perform various operations on it. The list is initially empty, and Millie will be given several commands to execute on this list. She wants your help to execute these commands efficiently. The commands are as follows: 1. **Insert x**: Insert the integer `x` into the list while maintaining the list in sorted order. 2. **Delete x**: If the integer `x` exists in the list, remove it. Otherwise, do nothing. 3. **K-th Smallest k**: Find and return the k-th smallest element in the list (1-based index). 4. **CountLess x**: Count the number of elements in the list that are strictly less than `x`. Input The first line contains a single integer `q` (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries. Each of the next `q` lines contains a command of one of the four types: - `Insert x (0 ≤ x ≤ 10^9)` - `Delete x (0 ≤ x ≤ 10^9)` - `K-th Smallest k (1 ≤ k ≤ n)` where `n` is the current size of the list - `CountLess x (0 ≤ x ≤ 10^9)` Output For each `K-th Smallest` and `CountLess` command, output the result on a separate line. Example Input ``` 10 Insert 5 Insert 3 Insert 8 K-th Smallest 2 CountLess 7 Delete 3 CountLess 7 K-th Smallest 1 Insert 3 K-th Smallest 3 ``` Output ``` 5 2 1 3 ``` Note Initially, the list is empty. - After `Insert 5`, the list is `[5]`. - After `Insert 3`, the list is `[3, 5]`. - After `Insert 8`, the list is `[3, 5, 8]`. - The 2nd smallest element in the list is `5`. - There are `2` elements less than `7` which are `3` and `5`. - After `Delete 3`, the list is `[5, 8]`. - There is `1` element less than `7` which is `5`. - The 1st smallest element in the list is `5`. - After `Insert 3`, the list is `[3, 5, 8]`. - The 3rd smallest element in the list is `8`.","solution":"import bisect class OrderedList: def __init__(self): self.list = [] def insert(self, x): bisect.insort(self.list, x) def delete(self, x): index = bisect.bisect_left(self.list, x) if index < len(self.list) and self.list[index] == x: self.list.pop(index) def k_th_smallest(self, k): return self.list[k - 1] if 0 < k <= len(self.list) else None def count_less(self, x): return bisect.bisect_left(self.list, x)"},{"question":"Given a directed graph with nodes and edges, your task is to determine if there exists a path from a given start node to a given end node. The graph is represented as an adjacency list. For each pair of start and end nodes provided, output \'YES\' if there is a path from the start node to the end node, and \'NO\' otherwise. Input The input consists of a number of lines. The first line contains two integers, N and M, which represent the number of nodes and the number of edges in the graph, respectively. The next M lines each contain two integers, U and V, indicating that there is a directed edge from node U to node V. After the edges, the input contains multiple pairs of integers, representing the start and end nodes for which to check the path existence. The end of the input is indicated by a line with two zeros. Output For each pair of start and end nodes, output \'YES\' if there is a path from the start node to the end node, and \'NO\' otherwise. Each result should be printed on a new line. Example Input 6 7 1 2 2 3 3 4 4 5 5 6 3 5 5 1 1 5 2 6 3 4 1 6 6 2 0 0 Output NO YES YES YES NO","solution":"def has_path(graph, start, end, visited): if start == end: return True visited.add(start) for neighbor in graph.get(start, []): if neighbor not in visited: if has_path(graph, neighbor, end, visited): return True return False def find_paths(graph, queries): results = [] for start, end in queries: if has_path(graph, start, end, set()): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') N, M = map(int, data[0].split()) graph = {} for i in range(1, M + 1): U, V = map(int, data[i].split()) if U in graph: graph[U].append(V) else: graph[U] = [V] queries = [] for i in range(M + 1, len(data)): start, end = map(int, data[i].split()) if start == 0 and end == 0: break queries.append((start, end)) results = find_paths(graph, queries) for result in results: print(result)"},{"question":"Suppose you have a 2D grid of dimensions `m x n`. You are initially positioned at the top-left corner of the grid (i.e., at (0,0)). You can move either down or right at any point in time. You are also given a set of \\"blocked\\" cells in the grid that you cannot pass through. Your goal is to find the number of unique paths that you can take to reach the bottom-right corner of the grid (i.e., at (m-1,n-1)). The grid is defined such that a cell at (i, j) is valid if 0 le i < m, 0 le j < n, and it is not a blocked cell. -----Input----- The first line of input contains two integers `m` and `n` (1 le m, n le 1000), representing the number of rows and columns of the grid respectively. The second line of input contains an integer k (0 le k le 10^4), the number of blocked cells. Each of the next `k` lines contains two integers x_i and y_i (0 le x_i < m, 0 le y_i < n), representing the coordinates of a blocked cell. -----Output----- Output one line with the number of unique paths from the top-left corner to the bottom-right corner of the grid. -----Examples----- Sample Input: 3 3 1 1 1 Sample Output: 2","solution":"def unique_paths(m, n, blocked_cells): Calculate number of unique paths from top-left to bottom-right in a grid with blocked cells. :param m: number of rows :param n: number of columns :param blocked_cells: list of tuples representing blocked cell coordinates :return: number of unique paths blocked = set(blocked_cells) # If the starting or ending positions are blocked, return 0 if (0, 0) in blocked or (m - 1, n - 1) in blocked: return 0 # Initialize a dp array filled with 0s dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if (i, j) in blocked: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[m - 1][n - 1] # Example usage if __name__ == \\"__main__\\": m, n = 3, 3 k = 1 blocked_cells = [(1, 1)] print(unique_paths(m, n, blocked_cells)) # Output: 2"},{"question":"Pet Shop Inventory Management Mr. Jenkins owns a pet shop and wants to manage the inventory of pets more efficiently. He maintains a record of different types of animals along with their respective quantities. Each animal type has a unique identifier and belongs to a specific category such as mammals, birds, reptiles, etc. Mr. Jenkins frequently needs to perform various operations on this inventory, such as adding new animals, updating the quantities of existing animals, removing animals when they are sold, and querying the inventory for specific animal types or categories. Your task is to write a program that manages this inventory system. The program should be able to process a series of commands and output the relevant results based on these commands. You need to implement the following commands: 1. `ADD TYPE NAME QTY` - Adds a new type of animal to the inventory. If the animal type already exists, increase the quantity by QTY. 2. `REMOVE TYPE NAME QTY` - Removes QTY quantity of the specified animal type from the inventory. If the quantity becomes zero or negative, remove the animal type from the inventory. 3. `QUERY TYPE NAME` - Output the quantity of the specified animal type. If the animal type does not exist, output `0`. 4. `QUERY CATEGORY CATEGORY_NAME` - Output the total quantity of all animals belonging to the specified category. Input The input consists of multiple lines, each containing a command. The input is terminated by a line containing the word `END`. Each line starts with a command keyword (`ADD`, `REMOVE`, `QUERY`) followed by the necessary parameters. - `TYPE` is a string indicating the category of the animal (e.g., `mammal`, `bird`, `reptile`). - `NAME` is a string indicating the name of the animal type. - `QTY` is an integer indicating the quantity to add or remove. - `CATEGORY_NAME` is a string indicating the category to query. Output For each `QUERY` command, output the result on a new line. For all other commands, no output is required. Sample Input ADD mammal cat 10 ADD bird parrot 5 ADD mammal dog 3 QUERY TYPE cat REMOVE bird parrot 2 QUERY TYPE parrot QUERY CATEGORY mammal REMOVE mammal dog 3 QUERY TYPE dog END Sample Output 10 3 13 0 Example Input ADD mammal cat 10 ADD bird parrot 5 ADD mammal dog 3 QUERY TYPE cat REMOVE bird parrot 2 QUERY TYPE parrot QUERY CATEGORY mammal REMOVE mammal dog 3 QUERY TYPE dog END Output 10 3 13 0","solution":"class PetShopInventory: def __init__(self): self.inventory = {} def add(self, type_, name, qty): if type_ not in self.inventory: self.inventory[type_] = {} if name in self.inventory[type_]: self.inventory[type_][name] += qty else: self.inventory[type_][name] = qty def remove(self, type_, name, qty): if type_ in self.inventory and name in self.inventory[type_]: self.inventory[type_][name] -= qty if self.inventory[type_][name] <= 0: del self.inventory[type_][name] if not self.inventory[type_]: del self.inventory[type_] def query_type(self, name): for type_ in self.inventory: if name in self.inventory[type_]: return self.inventory[type_][name] return 0 def query_category(self, category): return sum(self.inventory[category].values()) if category in self.inventory else 0 def process_commands(commands): shop = PetShopInventory() result = [] for command in commands: parts = command.split() cmd = parts[0] if cmd == \\"ADD\\": _, type_, name, qty = parts shop.add(type_, name, int(qty)) elif cmd == \\"REMOVE\\": _, type_, name, qty = parts shop.remove(type_, name, int(qty)) elif cmd == \\"QUERY\\": if parts[1] == \\"TYPE\\": _, _, name = parts result.append(shop.query_type(name)) elif parts[1] == \\"CATEGORY\\": _, _, category = parts result.append(shop.query_category(category)) elif cmd == \\"END\\": break return result"},{"question":"Imagine you are organizing a contest where participants are scored based on their answers to a series of questions. Each participant starts with a score of 0 and gains points as follows: 1. If the participant answers a question correctly, they gain 3 points. 2. If the participant answers a question incorrectly, they lose 1 point. 3. If the participant skips a question, their score remains unchanged. You have the results for several participants and want to determine each participant\'s final score. Input The first line of input contains T, the number of test cases. For each of the next T lines, two lines follow. The first line contains an integer N, denoting the number of questions in the contest. The second line contains a string S of length N consisting of characters \'C\', \'I\', and \'S\' which represent a correct answer, incorrect answer, and a skipped question respectively. Output For each test case, output the final score of the participant in a new line. Constraints 1 <= T <= 100 1 <= N <= 1000 Example Input: 2 5 CISCI 4 SISI Output: 5 0 Explanation For the first test case: - Question 1: Correct (C), +3 points - Question 2: Incorrect (I), -1 point - Question 3: Skipped (S), 0 points - Question 4: Correct (C), +3 points - Question 5: Incorrect (I), -1 point Final score = 3 - 1 + 0 + 3 - 1 = 5 For the second test case: - Question 1: Skipped (S), 0 points - Question 2: Incorrect (I), -1 point - Question 3: Skipped (S), 0 points - Question 4: Incorrect (I), -1 point Final score = 0 - 1 + 0 - 1 = -2","solution":"def final_score(T, cases): Calculate the final score for each participant based on their answers. Args: T (int): The number of test cases. cases (list): A list of tuples where each tuple contains: - N (int): The number of questions. - S (str): A string of length N consisting of \'C\', \'I\', and \'S\'. Returns: list: A list of integers representing the final scores for each test case. results = [] for N, S in cases: score = 0 for answer in S: if answer == \'C\': score += 3 elif answer == \'I\': score -= 1 results.append(score) return results"},{"question":"Given a list of N integers, your task is to find the sum of all distinct elements in the list. If an element appears more than once, it should only be added once to the sum. Return the sum of these distinct elements. Example 1: Input: N = 5 arr[] = {1, 2, 3, 2, 1} Output: 6 Explanation: The distinct elements are 1, 2, and 3. Their sum is 1 + 2 + 3 = 6. Example 2: Input: N = 7 arr[] = {10, 20, 30, 20, 40, 50, 10} Output: 150 Explanation: The distinct elements are 10, 20, 30, 40, and 50. Their sum is 10 + 20 + 30 + 40 + 50 = 150. Your Task: Since this is a function problem, you do not need to take any input. Implement the function `sumOfDistinct` that takes an integer array arr and an integer n as input parameters and returns the sum of distinct elements. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^4 1 ≤ arr[i] ≤ 10^6","solution":"def sumOfDistinct(arr, n): This function returns the sum of distinct elements in the list. :param arr: List of integers :param n: Length of the list :return: Sum of distinct elements return sum(set(arr))"},{"question":"Write a function that takes an integer `year` as input and returns whether that year is a leap year. The function should be named `is_leap_year` and should return \\"Leap year\\" if the input year is a leap year, and \\"Not a leap year\\" otherwise. A year is a leap year if it is: - divisible by 4, except for years which are both divisible by 100 and not divisible by 400. ```python def is_leap_year(year): pass ``` - For example, `is_leap_year(2000)` should return \\"Leap year\\", because 2000 is divisible by 400. - `is_leap_year(1900)` should return \\"Not a leap year\\", because 1900 is divisible by 100 but not by 400. - `is_leap_year(2024)` should return \\"Leap year\\", because 2024 is divisible by 4 and not by 100.","solution":"def is_leap_year(year): Returns whether the given year is a leap year. A year is a leap year if it is: - Divisible by 4 - Except for years which are both divisible by 100 and not divisible by 400. Args: year (int): The year to check. Returns: str: \\"Leap year\\" if the year is a leap year, otherwise \\"Not a leap year\\". if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return \\"Leap year\\" else: return \\"Not a leap year\\""},{"question":"You need to write a function that takes a list of integers and returns a new list where each element is the product of all other integers in the original list except the element at the current index. For example, for the list `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]` because: - `24` (product of `2 * 3 * 4`) - `12` (product of `1 * 3 * 4`) - `8` (product of `1 * 2 * 4`) - `6` (product of `1 * 2 * 3`) Ensure that your function runs in O(n) time complexity and doesn\'t use division. You can assume the input list will have at least two integers.","solution":"def product_except_self(nums): Returns a new list where each element at index i is the product of all elements in the original list except nums[i]. length = len(nums) if length == 0: return [] left_product = [1] * length right_product = [1] * length result = [1] * length # Build the left product list left_product[0] = 1 for i in range(1, length): left_product[i] = left_product[i - 1] * nums[i - 1] # Build the right product list right_product[length - 1] = 1 for i in range(length - 2, -1, -1): right_product[i] = right_product[i + 1] * nums[i + 1] # Build the result from left_product and right_product for i in range(length): result[i] = left_product[i] * right_product[i] return result"},{"question":"# Task A robot is located at the top-left corner of a grid of `n x m` cells. The robot can only move either right or down at any point in time. The robot is trying to reach the bottom-right corner of the grid. Write a function to count how many possible unique paths there are for the robot to reach the bottom-right corner. # Example For `n = 3` and `m = 7`, the output should be `28`. ``` Possible paths: 1. RRRRRRDDDD 2. RRRRRDRDDD 3. RRRRDRRDDD ... and so on ``` For `n = 2` and `m = 3`, the output should be `3`. ``` Possible paths: 1. RRDD 2. RDRD 3. RDDR ``` # Input/Output ```if-not:sql - `[input]` integer `n` The number of rows in the grid. Constraints: `1 ≤ n ≤ 100`. - `[input]` integer `m` The number of columns in the grid. Constraints: `1 ≤ m ≤ 100`. - `[output]` an integer The number of unique paths that the robot can take. ``` ```if:sql Input ~~~ --------------------------------------------- | Table | Column | Type | | -------------+---------+-------| | robot_grid | n | int | | | m | int | --------------------------------------------- ~~~ # Columns * `n`: The number of rows in the grid. Constraints: `1 ≤ n ≤ 100`. * `m`: The number of columns in the grid. Constraints: `1 ≤ m ≤ 100`. Output ~~~ ----------------- | Column | Type | |------------+------| | id | int | | num_paths | int | ----------------- ~~~ `num_paths` is the number of unique paths that the robot can take to reach the bottom-right corner of the grid. ```","solution":"def unique_paths(n, m): Returns the number of unique paths from the top-left to the bottom-right corner of a grid. The robot can only move either right or down at any point in time. # Create a 2D grid with n rows and m columns filled with ones dp = [[1] * m for _ in range(n)] # Compute number of ways for each cell for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][m-1]"},{"question":"Vasya loves solving problems and playing with numbers, but he finds it difficult to deal with arrays. Today, he came up with a new task. He has an array of integers and he would like to find out the maximum sum of its contiguous subarrays. But there is a twist! He will replace all negative numbers in the array with zeros before finding the sum. A contiguous subarray is a non-empty sequence of consecutive elements from the array. Help Vasya to solve this problem. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) – the length of the array. The second line contains n integers a_i (-10^9 ≤ a_i ≤ 10^9) – the elements of the array. -----Output----- Print a single integer – the maximum sum of the contiguous subarrays after replacing all negative numbers with zeros. -----Examples----- Input 5 -1 2 -3 4 5 Output 11 Input 6 -1 -2 3 4 -5 6 Output 13 -----Note----- In the first sample case, the modified array would be [0, 2, 0, 4, 5]. The maximum sum of a contiguous subarray is 11. In the second sample case, the modified array would be [0, 0, 3, 4, 0, 6]. The maximum sum of a contiguous subarray is 13.","solution":"def max_contiguous_subarray_sum(arr): Function to find the maximum sum of contiguous subarrays after replacing all negative numbers with zeros. Parameters: arr (list of int): List of integers Returns: int: The maximum sum of the contiguous subarrays # Replace all negative numbers with zeros modified_arr = [max(0, x) for x in arr] max_sum = 0 current_sum = 0 for num in modified_arr: current_sum += num if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Alice is organizing a town parade which requires a precise arrangement of floats along the main street. The street has `n` potential positions, marked from `1` to `n`. Each float, however, can only be placed in certain intervals along the street defined by start and end positions. Due to certain constraints, no two floats may overlap in their intervals, though they can touch at the boundaries. Alice wants to know the maximum number of floats that can be placed without violating the condition of overlap. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) representing the total positions on the street. The second line contains an integer `m` (1 ≤ m ≤ 1000) representing the number of floats. Each of the next `m` lines contains two integers `ai` and `bi` (1 ≤ ai ≤ bi ≤ n) representing the start and end positions of each float. Output Print a single integer, the maximum number of floats that can be placed without overlap. Example Input 10 4 1 2 2 5 3 6 7 10 Output 3 Input 10 4 1 2 2 3 3 4 4 5 Output 4 Note In the first example, the intervals [1, 2], [2, 5], and [7, 10] can be chosen, resulting in a maximum of 3 floats placed without overlap. The interval [3, 6] overlaps with the interval [2, 5], so it is not chosen. In the second example, all intervals are non-overlapping despite touching boundaries, hence, all can be chosen for a total of 4 floats.","solution":"def max_floats(n, m, intervals): Returns the maximum number of non-overlapping floats that can be placed. Parameters: n (int): The number of positions on the street. m (int): The number of floats. intervals (list): A list where each element is a tuple (ai, bi) representing the start and end positions of each float. Returns: int: The maximum number of non-overlapping floats. # Sort the intervals by their end points intervals.sort(key=lambda x: x[1]) count = 0 last_end = 0 for start, end in intervals: if start >= last_end: count += 1 last_end = end return count"},{"question":"The search and rescue team uses a GPS tracking system to mark locations of possible survivors in a disaster site. Each marked point is given in the form (x, y), and the distance from the origin (0, 0) to each point represents how urgent it is to check that point. The closer the point to the origin, the higher the priority. Write a function that, given a list of coordinates, returns the top K closest points to the origin based on the Euclidean distance. ----- INPUT ----- The first line of input contains two integers N and K where N is the number of coordinates and K is the number of closest coordinates to return. The next N lines each contain two integers xi and yi representing the coordinates of each point. ----- OUTPUT ----- For each test case, output the closest K points to the origin in ascending order of distance. If two points have the same distance, they should be ordered by their x-coordinate. If there is still a tie, order by y-coordinate. ----- CONSTRAINTS ----- 1 ≤ N ≤ 1000 1 ≤ K ≤ N -104 ≤ xi, yi ≤ 104 ----- EXAMPLE ----- Input: 5 3 1 2 2 2 3 3 -1 -1 0 0 Output: 0 0 -1 -1 1 2","solution":"import heapq from typing import List, Tuple def euclidean_distance(point: Tuple[int, int]) -> float: Returns the Euclidean distance of a point from the origin (0, 0). return point[0]**2 + point[1]**2 def closest_points(points: List[Tuple[int, int]], K: int) -> List[Tuple[int, int]]: Returns the top K closest points to the origin (0, 0) based on Euclidean distance. Points are further sorted by x-coordinate and y-coordinate in case of ties. # Create a min-heap based on the Euclidean distance heap = [] for point in points: dist = euclidean_distance(point) heapq.heappush(heap, (dist, point)) # Extract the closest K points closest_points = [heapq.heappop(heap)[1] for _ in range(K)] # Sort by Euclidean distance, then by x-coordinate, then by y-coordinate closest_points.sort(key=lambda point: (euclidean_distance(point), point[0], point[1])) return closest_points"},{"question":"You are given a binary tree and you need to determine if it is height-balanced. A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. For each test case: - The first line contains a single integer n (1 le n le 10^5) — the number of nodes in the tree. - The next n-1 lines each contain two integers u and v (1 le u, v le n) indicating there is an edge between nodes u and v. It\'s guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if the binary tree is height-balanced and \\"NO\\" otherwise. -----Examples----- Input 3 3 1 2 1 3 4 1 2 1 3 2 4 5 1 2 2 3 3 4 4 5 Output YES YES NO -----Note----- In the first test case, the tree has nodes 1, 2, and 3 forming a balanced structure: ```plaintext 1 / 2 3 ``` In the second test case, the tree has nodes 1, 2, 3, and 4 forming a balanced structure: ```plaintext 1 / 2 3 / 4 ``` In the third test case, the tree has nodes 1, 2, 3, 4, and 5 forming an unbalanced structure: ```plaintext 1 2 3 4 5 ``` The algorithm should check the height difference of the left and right subtrees for each node to determine if the tree is height-balanced.","solution":"class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def is_balanced(root): def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return max(left_height, right_height) + 1, balanced _, result = check_height(root) return result def build_tree(n, edges): if n == 0: return None nodes = {i: TreeNode(i) for i in range(1, n + 1)} for u, v in edges: if not nodes[u].left: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return nodes[1] def is_balanced_trees(test_cases): results = [] for edges in test_cases: n = len(edges) + 1 root = build_tree(n, edges) if is_balanced(root): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array `arr` of positive integers. Your task is to find the smallest element in the array that is repeated more than once. Print the smallest repeated element or \\"NO\\" if there is no repeated element. Example 1: Input: arr = [4, 3, 2, 7, 8, 2, 3, 1] Output: 2 Explanation: The smallest element repeated more than once is 2. Example 2: Input: arr = [1, 2, 3, 4, 5] Output: NO Explanation: There are no repeated elements in the array. Your Task: You do not need to read input or print anything. Your task is to complete the function `smallestRepeatedElement()` which takes `arr` as input and returns the smallest repeated element or \\"NO\\" if there are no repeated elements. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ arr.length ≤ 10^5 1 ≤ arr[i] ≤ 10^5","solution":"def smallestRepeatedElement(arr): This function returns the smallest element in the array that is repeated more than once. If there is no such element, it returns \\"NO\\". element_count = {} for num in arr: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 repeated_elements = [num for num, count in element_count.items() if count > 1] if not repeated_elements: return \\"NO\\" return min(repeated_elements)"},{"question":"Given a string s of length n, and an integer k, your task is to determine the lexicographically smallest string that can be obtained by removing exactly k characters from s. If the resulting string contains leading zeros, the smallest lexicographical string without leading zeros should be returned. If there are multiple solutions, select the one that appears first. Constraints * 1 ≤ n ≤ 10^5 * 1 ≤ k ≤ n * s consists of digits only (\'0\' - \'9\'). Input The input is given in the following format. > n k > s Output Print the lexicographically smallest string that can be obtained by removing exactly k characters from s. Examples Input 7 3 1432219 Output 1219 Input 4 2 1024 Output 2 Input 5 1 10000 Output 0 Input 6 3 765949 Output 549","solution":"def remove_k_digits(n, k, s): Returns the lexicographically smallest string that can be obtained by removing exactly k characters from s. stack = [] for char in s: while k > 0 and stack and stack[-1] > char: stack.pop() k -= 1 stack.append(char) # Removing additional characters if k is still greater than 0 while k > 0: stack.pop() k -= 1 # Create the smallest lexicographical string from the stack smallest_str = \'\'.join(stack).lstrip(\'0\') # If smallest_str is empty, return \'0\' return smallest_str if smallest_str else \'0\'"},{"question":"-----General Statement:----- Write a function that merges two sorted lists into one sorted list. -----Input:----- The input consists of two lines: The first line contains space-separated integers representing the elements of the first sorted list. The second line contains space-separated integers representing the elements of the second sorted list. -----Output:----- Output a single line containing space-separated integers which represent the merged and sorted list. -----Assumptions:----- - Each line will have at least one integer. - The integers in each list are sorted in ascending order initially. - The merged result should be in ascending order. -----Sample Input:----- 1 3 5 7 9 2 4 6 8 10 -----Sample Output:----- 1 2 3 4 5 6 7 8 9 10","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"A company must prepare a report on the performance of its employees. Each employee\'s data is stored in a string format, and includes their name, role, and quarterly performance scores. The format of each employee\'s detail is: - Name and role separated by a space, followed by a colon `:`, and then quarterly performance scores separated by commas `,`. e.g. `\\"John Doe Engineer: 85, 90, 78, 92\\"` The company\'s performance metric for an employee is calculated as the average of their quarterly performance scores. The company wants to identify employees who meet a certain performance threshold. Specifically, they need a list of employees whose average performance score meets or exceeds a given threshold. # Task The function `employee_performance` will take two parameters: - `employee_data` (a string of all employee details separated by semicolons `;`) - `threshold` (a floating point number representing the performance threshold) The function should return a string containing the names of employees who meet or exceed the threshold, in the order they appear in the input string. The names should be separated by semicolons `;`. If no employees meet the threshold, return an empty string `\\"\\"`. # Examples ``` employee_data = \\"John Doe Engineer: 85, 90, 78, 92; Jane Smith Manager: 88, 92, 79, 95; Tom Brown Developer: 70, 80, 85, 90\\" threshold = 85.0 employee_performance(employee_data, threshold) --> \\"John Doe; Jane Smith\\" employee_data = \\"Alice Blue Analyst: 83, 89, 77, 85; Bob Green Technician: 78, 82, 79, 81\\" threshold = 85.0 employee_performance(employee_data, threshold) --> \\"\\" employee_data = \\"Charlie Black Supervisor: 90, 95, 88, 92\\" threshold = 90.0 employee_performance(employee_data, threshold) --> \\"Charlie Black\\" ```","solution":"def employee_performance(employee_data, threshold): This function returns the names of employees whose average performance score meets or exceeds a given threshold. Args: employee_data (str): A string of all employee details separated by semicolons `;`. threshold (float): A floating point number representing the performance threshold. Returns: str: A string containing the names of employees who meet or exceed the threshold. Names are separated by semicolons `;`. employees = employee_data.split(\';\') qualifying_employees = [] for emp in employees: name_role, scores_str = emp.split(\':\') scores = list(map(int, scores_str.split(\',\'))) average_score = sum(scores) / len(scores) if average_score >= threshold: name = \' \'.join(name_role.split()[:2]) qualifying_employees.append(name) return \'; \'.join(qualifying_employees)"},{"question":"Liam is a fruit merchant who sells a variety of fruits displayed in a long row of stalls. Each stall has only one type of fruit. Liam wants to collect samples of as many different types of fruits as possible while visiting the least number of consecutive stalls. He needs help finding the minimum number of consecutive stalls he has to visit to collect at least one of each type of fruit available at his market. -----Input----- The first line contains the integer n (1 ≤ n ≤ 100 000) — the number of fruit stalls. The second line contains a string s with length n, where each character represents a different type of fruit that is sold in the stall. Each character is an uppercase English letter. -----Output----- Print the minimum number of consecutive stalls Liam must visit to collect at least one of each type of fruit available in the market. -----Examples----- Input 6 ABACBB Output 3 Input 5 ABCDE Output 5 Input 8 AAABACBD Output 4 -----Note----- In the first test case, Liam can visit, for example, from the stall number 2 to stall number 4 to collect fruits A, B, and C. In the second test case, Liam must visit all stalls from 1 to 5 to collect all different types of fruits A, B, C, D, and E. In the third test case, Liam can visit, for example, from the stall number 4 to stall number 7 to collect fruits A, B, C, and D.","solution":"def min_stalls_to_collect_all_fruits(n, s): This function returns the minimum number of consecutive stalls needed to collect all types of fruits. :param n: Integer, number of stalls. :param s: String, types of fruits in each stall. :return: Integer, minimum number of consecutive stalls. from collections import Counter if n == 1: return 1 # All unique fruits in the market unique_fruits = set(s) unique_count = len(unique_fruits) # Sliding window technique to find the minimum window that contains all fruits left, min_length = 0, float(\'inf\') counter = Counter() for right in range(n): counter[s[right]] += 1 # When counter has all unique fruits while len(counter) == unique_count: # Update minimum length of the window min_length = min(min_length, right - left + 1) # Remove fruit from the left and move window to the right counter[s[left]] -= 1 if counter[s[left]] == 0: del counter[s[left]] left += 1 return min_length"},{"question":"Write a program to manage an inventory system for a store. Each item has a unique identifier and a name. The inventory can track the quantity of each item and its price. The program should support the following operations: 1. **Add an item**: Adds an item to the inventory with a specified quantity and price. If the item already exists, update its quantity and price. 2. **Remove an item**: Removes an item from the inventory. If the item does not exist, display an appropriate message. 3. **Check an item**: Check if an item exists in the inventory. If it exists, display the item\'s details including quantity and price. If it does not exist, display an appropriate message. 4. **Display all items**: Display a list of all items in the inventory sorted by their unique identifier. Input operation identifier name quantity price :: :: Output operation_result :: :: Example Input add 101 \\"Apples\\" 50 0.50 add 102 \\"Oranges\\" 30 0.80 check 101 remove 103 add 102 \\"Oranges\\" 25 0.75 display Output Added Apples with quantity 50 and price 0.50 Added Oranges with quantity 30 and price 0.80 Item 101: Apples, Quantity: 50, Price: 0.50 Item 103 does not exist. Updated Oranges with quantity 25 and price 0.75 Items in inventory: 101: Apples, Quantity: 50, Price: 0.50 102: Oranges, Quantity: 25, Price: 0.75","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, identifier, name, quantity, price): if identifier in self.items: self.items[identifier][\'quantity\'] = quantity self.items[identifier][\'price\'] = price return f\\"Updated {name} with quantity {quantity} and price {price:.2f}\\" else: self.items[identifier] = {\'name\': name, \'quantity\': quantity, \'price\': price} return f\\"Added {name} with quantity {quantity} and price {price:.2f}\\" def remove_item(self, identifier): if identifier in self.items: del self.items[identifier] return f\\"Item {identifier} removed.\\" else: return f\\"Item {identifier} does not exist.\\" def check_item(self, identifier): if identifier in self.items: item = self.items[identifier] return f\\"Item {identifier}: {item[\'name\']}, Quantity: {item[\'quantity\']}, Price: {item[\'price\']:.2f}\\" else: return f\\"Item {identifier} does not exist.\\" def display_items(self): if not self.items: return \\"No items in inventory.\\" sorted_items = sorted(self.items.items()) result = [\\"Items in inventory:\\"] for identifier, item in sorted_items: result.append(f\\"{identifier}: {item[\'name\']}, Quantity: {item[\'quantity\']}, Price: {item[\'price\']:.2f}\\") return \\"n\\".join(result)"},{"question":"Given an undirected graph with N nodes and M edges, you have to determine if the graph is connected. A graph is said to be connected if there is a path between any pair of nodes. Input: First line of input contains the number of test cases T. For each test case, the first line contains two integers N and M, the number of nodes and edges respectively. Each of the next M lines contains two integers u and v denoting an edge between node u and node v. Output: For each test case, print \\"YES\\" if the graph is connected, else print \\"NO\\". User Task: Since this is a functional problem, you don\'t have to worry about input, you just have to complete the function isConnected() which takes in three arguments, an integer N indicating the number of nodes, an integer M indicating the number of edges, and a list of tuples edges where each tuple represents an edge. Constraints: 1 <= T <= 50 1 <= N <= 1000 0 <= M <= N*(N-1)/2 1 <= u, v <= N Example: Input: 2 4 3 1 2 2 3 3 4 4 2 1 2 3 4 Output: YES NO Explanation: Testcase 1: Given graph: 1 - 2 - 3 - 4 All nodes are connected, so the graph is connected. Testcase 2: Given graph: 1 - 2 3 - 4 There is no path between node 1 and nodes (3,4). Hence, the graph is not connected.","solution":"def isConnected(N, M, edges): from collections import defaultdict, deque def bfs(start, visited, adjacency_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if N == 0: return \\"NO\\" adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (N + 1) # Run BFS from the first node bfs(1, visited, adjacency_list) # Check if all nodes are visited for i in range(1, N + 1): if not visited[i]: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for case in test_cases: N, M, edges = case results.append(isConnected(N, M, edges)) return results"},{"question":"An online retailer has a list of item prices and a list of discount coupons. Each discount coupon provides a percentage reduction on the price of a specific item. Your task is to determine the final price of each item after applying the applicable discount coupon (if any). -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of a test case description contains an integer N denoting the number of items. The second line of the description contains N space-separated integers denoting the prices of the items. The third line of the description contains an integer M denoting the number of discount coupons. Each of the next M lines of the description contains two space-separated values: an integer I (1-based index of the item) and an integer P (percentage discount on that item). -----Output----- For each test case, output a single line containing the final prices of the N items, after applying the appropriate discount coupons (if any), as space-separated integers. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 100 - 1 ≤ price of any item ≤ 10^4 - 0 ≤ P ≤ 100 (where 0 implies no discount) -----Example----- Input: 2 3 100 200 300 2 1 10 3 20 4 150 250 350 450 3 2 15 3 25 4 10 Output: 90 200 240 150 212 262 405","solution":"def final_prices(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] prices = test_cases[i][1] M = test_cases[i][2] discounts = test_cases[i][3] final_prices = prices[:] for discount in discounts: item_index, percentage = discount item_index -= 1 # Convert 1-based index to 0-based index final_price = prices[item_index] * (1 - percentage / 100.0) final_prices[item_index] = int(final_price) results.append(\\" \\".join(map(str, final_prices))) return results # Function to parse input and execute solution def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) current_line = 1 test_cases = [] for _ in range(T): N = int(input_lines[current_line]) prices = list(map(int, input_lines[current_line + 1].split())) M = int(input_lines[current_line + 2]) discounts = [] for i in range(M): item_index, percentage = map(int, input_lines[current_line + 3 + i].split()) discounts.append((item_index, percentage)) test_cases.append((N, prices, M, discounts)) current_line += 3 + M return final_prices(T, test_cases)"},{"question":"Anna is organizing a coding competition and she needs to distribute awards to participants for their outstanding performance. The competition has `n` participants, and each participant has a score. Anna wants to distribute awards such that: 1. Each participant receives at least one award. 2. Participants with higher scores receive more awards than those with lower scores. Given the scores of the participants as an array, determine the minimum number of awards Anna needs to distribute to meet the above conditions. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of participants. The second line contains `n` integers, separated by spaces, representing the scores of the participants. The scores are in no particular order and are within the range (1 ≤ score ≤ 1000). -----Output----- Print a single integer — the minimum number of awards that Anna needs to distribute. -----Examples----- Input 3 10 20 30 Output 6 Input 4 50 40 30 20 Output 10 -----Note----- In the first example, Anna can distribute the awards as 1, 2, and 3, respectively corresponding to the scores. Hence, a total of 6 awards need to be distributed. In the second example, the scores are in descending order. Anna can distribute the awards as 4, 3, 2, and 1 corresponding to the scores, which totals to 10 awards.","solution":"def min_awards(n, scores): Returns the minimum number of awards needed based on the scores of n participants. if n == 0: return 0 awards = [1] * n # start by giving each participant 1 award # Traverse from left to right for i in range(1, n): if scores[i] > scores[i-1]: awards[i] = awards[i-1] + 1 # Traverse from right to left for i in range(n-2, -1, -1): if scores[i] > scores[i+1]: awards[i] = max(awards[i], awards[i+1] + 1) return sum(awards)"},{"question":"Problem You are given a matrix of dimensions N times M consisting of non-negative integers. Your task is to find the minimum cost path to traverse the matrix from the top-left corner (0,0) to the bottom-right corner (N-1, M-1). You can only move to the right or down at each step. The cost of a path is the sum of the values of the cells that you have visited. The input matrix guarantees that there will be no more than 10^6 individual integers in total. Constraints The input satisfies the following conditions: * 1 leq N, M leq 1000 * 0 leq cost_{i,j} leq 1000 (where cost_{i,j} is the value in the matrix at position (i,j)) Input The input is given in the following format: N M cost[0][0] cost[0][1] ... cost[0][M-1] cost[1][0] cost[1][1] ... cost[1][M-1] cdots cost[N-1][0] cost[N-1][1] ... cost[N-1][M-1] Output Output the minimum cost to traverse from the top-left corner to the bottom-right corner. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 2 1 Output 4","solution":"def min_cost_path(matrix): Returns the minimum cost to traverse from the top-left corner to the bottom-right corner. You can only move to the right or down at each step. N = len(matrix) M = len(matrix[0]) # Initialize a 2D array to store the cost of the minimum path to each cell min_cost = [[0 for _ in range(M)] for _ in range(N)] # Set the cost of the first cell min_cost[0][0] = matrix[0][0] # Initialize the first row and first column of the min_cost array for i in range(1, N): min_cost[i][0] = min_cost[i-1][0] + matrix[i][0] for j in range(1, M): min_cost[0][j] = min_cost[0][j-1] + matrix[0][j] # Fill in the rest of the min_cost array for i in range(1, N): for j in range(1, M): min_cost[i][j] = min(min_cost[i-1][j], min_cost[i][j-1]) + matrix[i][j] # The cost of the minimum path to the bottom-right corner return min_cost[N-1][M-1]"},{"question":"Alice is planning a road trip and wants to minimize her travel cost. There are `n` cities she wants to visit, numbered from `0` to `n-1`. The cost to travel between any two cities is given in a `n x n` matrix `cost`, where `cost[i][j]` is the cost to travel from city `i` to city `j`. Alice starts her journey from city `0` and must visit each city exactly once before returning to the starting city. Your task is to find the minimum cost of such a trip. Input - An integer `n` (2 ≤ n ≤ 12) — the number of cities. - A 2D array `cost` with dimensions `n x n`. Each entry `cost[i][j]` (1 ≤ cost[i][j] ≤ 100) represents the cost of traveling from city `i` to city `j`. Output - Print a single integer — the minimum cost of visiting all cities exactly once and returning to city `0`. Examples Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 3 0 29 20 29 0 15 20 15 0 Output 64 Note In the first example, the optimal path can be 0 -> 1 -> 3 -> 2 -> 0 with a total cost of 80. In the second example, the optimal path can be 0 -> 2 -> 1 -> 0 with a total cost of 64.","solution":"def min_travel_cost(n, cost): Returns the minimum cost of visiting all cities exactly once and returning to the starting city. Parameters: n (int): The number of cities. cost (list of list of int): 2D array representing the cost matrix. Returns: int: The minimum travel cost. from itertools import permutations cities = range(n) min_cost = float(\'inf\') # Generate all possible routes starting from city \'0\' for perm in permutations(cities): if perm[0] == 0: current_cost = sum(cost[perm[i]][perm[i+1]] for i in range(n-1)) current_cost += cost[perm[-1]][perm[0]] min_cost = min(min_cost, current_cost) return min_cost"},{"question":"Given is an integer n. Determine whether the given integer n is a palindrome number. A palindrome number is a number that remains the same when its digits are reversed. -----Constraints----- - 0 leq n leq 1000000 - All values in the input are integers. -----Input----- Input is given from Standard Input in the following format: n -----Output----- Print \\"YES\\" if the given integer n is a palindrome number, otherwise print \\"NO\\". -----Sample Input----- 121 -----Sample Output----- YES Explanation: The number 121 remains the same when its digits are reversed, thus it is a palindrome number. -----Sample Input----- 123 -----Sample Output----- NO Explanation: The number 123 does not remain the same when its digits are reversed, thus it is not a palindrome number.","solution":"def is_palindrome(n): Returns \'YES\' if the integer n is a palindrome number, otherwise \'NO\'. n_str = str(n) if n_str == n_str[::-1]: return \\"YES\\" else: return \\"NO\\" # Example Usage: # n = int(input()) # print(is_palindrome(n))"},{"question":"The president of a social media company wants to identify the most influential user in the network. A user is considered influential if they have the highest number of direct followers, and in the case of ties, the user with the lowest numeric ID among those users is chosen. You are given a social network graph where each user is represented as a vertex and each directed edge (u, v) represents user u following user v. Write a function that finds the most influential user. **Input** - The first line of the input contains two integers N and M (1 leq N leq 10^5 and 0 leq M leq 10^5), where N is the total number of users and M is the number of follow relationships. - Each of the next M lines contains two integers u and v (1 leq u, v leq N), representing that user u follows user v. **Output** - Output the user ID of the most influential user. **Examples** Sample Input 1: ``` 5 4 1 2 2 1 3 2 4 2 ``` Sample Output 1: ``` 2 ``` Sample Input 2: ``` 3 2 1 2 3 1 ``` Sample Output 2: ``` 1 ``` **Note** - In the first example, user 2 has more followers (3 followers) than any other user. So the output is 2. - In the second example, both users 1 and 2 have 1 follower each, but user 1 has the smallest ID, so the output is 1.","solution":"def most_influential_user(N, M, relationships): Finds the most influential user based on the number of followers. from collections import defaultdict followers_count = defaultdict(int) for u, v in relationships: followers_count[v] += 1 # Find user with the maximum followers count max_followers = -1 influential_user = float(\'inf\') for user in range(1, N + 1): if followers_count[user] > max_followers: max_followers = followers_count[user] influential_user = user elif followers_count[user] == max_followers: influential_user = min(influential_user, user) return influential_user"},{"question":"Track Changes! Given a string, return the number of times a character changes as you move from the start to the end of the string. For example, in the string \\"abbbcaaa\\", \'a\' changes to \'b\' once, \'b\' changes to \'c\' once, and \'c\' changes to \'a\' once, making a total of 3 changes. Write a function to accomplish this task and an example of usage. Input The first line contains the number of test cases T, which is not more than 50. Each of the next T lines contains a single string of at most 100 characters, consisting of lowercase letters only (\'a\'-\'z\'). Output For each test case, output a single line indicating the number of changes from one character to another. Example Input: 3 abbbcaaa a abcde Output: 3 0 4","solution":"def count_changes(s): Returns the number of times a character changes as you move from the start to the end of the string s. if not s: return 0 changes = 0 current_char = s[0] for char in s[1:]: if char != current_char: changes += 1 current_char = char return changes"},{"question":"A string is said to be \\"good\\" if it doesn\'t contain three consecutive characters that are all the same. Your task is to determine if a given string is good. -----Input----- The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 10^5), which consists of lowercase letters only. -----Output----- For each test case, print \\"YES\\" if the string is good and \\"NO\\" otherwise. -----Examples----- Input 3 abbacd aaabb aabbcc Output YES NO YES -----Note----- In the first sample, the string \\"abbacd\\" is good since there are no three consecutive identical characters. In the second sample, the string \\"aaabb\\" is not good because it contains three consecutive \'a\'s. In the third sample, the string \\"aabbcc\\" is good since there are no three consecutive identical characters.","solution":"def is_good_string(s): Returns \'YES\' if the string s is good, otherwise \'NO\'. for i in range(len(s) - 2): if s[i] == s[i + 1] and s[i] == s[i + 2]: return \\"NO\\" return \\"YES\\" def check_good_strings(test_cases): Processes a list of test cases to determine if each string is good. results = [] for s in test_cases: results.append(is_good_string(s)) return results"},{"question":"You are given a list of `n` integers. Your task is to process a series of `m` range update operations and output the updated list of integers after all operations have been applied. Each operation is defined by three integers `l`, `r`, and `v`, which means that all elements of the list from index `l` to index `r` (inclusive) should be incremented by `v`. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100,000). - The second line contains `n` integers, the initial values of the list. - The next `m` lines each contain three integers `l`, `r`, and `v` (1 ≤ l ≤ r ≤ n, -10^6 ≤ v ≤ 10^6). Output - Output the updated list after all operations are applied, separated by spaces. Example Input ``` 5 3 1 2 3 4 5 1 3 2 2 5 -1 3 4 3 ``` Output ``` 3 3 7 6 4 ``` Explanation - Initial list: [1, 2, 3, 4, 5] - After applying the first operation (1, 3, 2): [3, 4, 5, 4, 5] - After applying the second operation (2, 5, -1): [3, 3, 4, 3, 4] - After applying the third operation (3, 4, 3): [3, 3, 7, 6, 4]","solution":"def range_update(n, m, arr, operations): Apply a series of range update operations on an array. Args: n: int - the number of elements in the array. m: int - the number of operations. arr: list of int - the initial values of the array. operations: list of tuple of (l, r, v) - the operations to apply. Returns: list of int - the updated array after all operations are applied. # Create a difference array diff = [0] * (n + 1) # Apply all operations to the difference array for l, r, v in operations: diff[l - 1] += v if r < n: diff[r] -= v # Apply the difference array to the original array current_increment = 0 for i in range(n): current_increment += diff[i] arr[i] += current_increment return arr"},{"question":"You are given an array of n integers. In one step, you can choose any two elements of the array and replace both of them with their sum. Your task is to determine the minimum number of steps required to make all elements in the array equal. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Print a single integer — the minimum number of steps required to make all elements of the array equal. Examples Input 5 1 2 3 4 5 Output 4 Note In the first test sample, the array [1, 2, 3, 4, 5] can be handled as follows: - Combine 1 and 2 to get [3, 3, 4, 5] (1 step) - Combine 3 and 3 to get [6, 4, 5] (2 steps) - Combine 4 and 5 to get [6, 9] (3 steps) - Combine 6 and 9 to get [15] (4 steps) So, the minimum number of steps required is 4.","solution":"def min_steps_to_equal_elements(n, arr): Determine the minimum number of steps required to make all elements in the array equal. return n - 1"},{"question":"You are given a list of `N` unique integers. Your task is to find the minimum number of operations required to make all the integers in the list the same. You are allowed to change any integer into any other integer in one operation. Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ A_i ≤ 10^9 Input Input consists of a single line containing the list of integers: A1 A2 A3 ... AN Output Output a single integer, which is the minimum number of operations required. Examples Input 5 3 9 3 11 Output 3 Input 4 4 4 4 Output 0 Input 1 10 100 1000 10000 Output 4","solution":"def min_operations_to_make_list_uniform(nums): Returns the minimum number of operations required to make all integers in the list the same. from collections import Counter freq = Counter(nums) most_common_count = max(freq.values()) return len(nums) - most_common_count"},{"question":"You are given a list of meetings, each defined by a start time and an end time. The goal is to determine the maximum number of meetings that can be attended fully (i.e., one must end before another starts). Each meeting is defined as a tuple of two integers, where the first integer is the start time and the second integer is the end time. Write a function `maxMeetings(meetings)` that takes a list of tuples as an argument and returns the maximum number of meetings that can be attended. **Example:** ```python maxMeetings([(1, 4), (2, 5), (3, 6), (7, 8)]) # Returns: 2 because the maximum non-overlapping meetings that can be attended are (1, 4) and (7, 8). ``` Here\'s another example: ```python maxMeetings([(1, 2), (3, 4), (0, 6), (5, 7), (8, 9)]) # Returns: 4 # The selected meetings to attend are (1, 2), (3, 4), (5, 7), and (8, 9). ``` **Note:** - If two meetings have the same end time, prioritize the one that starts earlier. - Meetings are defined with integer start and end times, where the start time is less than the end time.","solution":"def maxMeetings(meetings): Determines the maximum number of non-overlapping meetings that can be attended. Args: meetings: List of tuples, each containing the start and end time of a meeting. Returns: The maximum number of non-overlapping meetings that can be attended. # Sort meetings based on their end times, and if they are equal, by their start times. meetings.sort(key=lambda x: (x[1], x[0])) max_meetings_count = 0 last_meeting_end_time = -1 for start, end in meetings: if start > last_meeting_end_time: max_meetings_count += 1 last_meeting_end_time = end return max_meetings_count"},{"question":"You are working on a software project where you need to implement some mathematical helper functions. One frequently used function in your project calculates the greatest common divisor (GCD) of two integers. You\'ve decided to write a new version of this function to optimize its performance, using the Euclidean algorithm. Your task is to write a function that takes two positive integers and returns their GCD. The Euclidean algorithm is based on the principle that the GCD of two numbers also divides their difference. Here\'s how it works: 1. If the two numbers are equal, their GCD is the number itself. 2. Otherwise, replace the larger number with the difference of the larger number and the smaller number. 3. Repeat step 1 and 2 until the two numbers become equal. Write a function to calculate the GCD of two integers using the Euclidean algorithm. INPUT FORMAT: Two positive integers A and B. CONSTRAINTS: 1 ≤ A, B ≤ 10^9 OUTPUT FORMAT: A single integer, representing the GCD of the given two integers. SAMPLE INPUT 48 18 SAMPLE OUTPUT 6","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using the Euclidean algorithm. while a != b: if a > b: a -= b else: b -= a return a"},{"question":"Write a function `rotateArray` that takes an array and a positive integer k as arguments, and returns the array rotated to the right by k places. For example, if the array is [1, 2, 3, 4, 5] and k is 3, the function should return [3, 4, 5, 1, 2]. Consider edge cases where k could be larger than the length of the array or where the array is empty.","solution":"def rotateArray(arr, k): Rotates the array to the right by k places. Parameters: arr (list): The input array. k (int): The number of places to rotate the array. Returns: list: The array rotated to the right by k places. if not arr: return arr n = len(arr) k = k % n # To account for k larger than the array length return arr[-k:] + arr[:-k]"},{"question":"In a game, a player collects coins with different values and stores them in a bag. The player has a special rule: if the total value of coins collected has a prime number sum, they receive a bonus. A prime number is defined as a number greater than 1 that has no divisors other than 1 and itself. For example, 2, 3, 5, 7, 11 are prime numbers. You are given a list of integers where each integer represents the value of a coin collected by the player. Your task is to determine if the sum of the coin values is a prime number. Write a function that takes a list of integers and returns a boolean: `True` if the sum of the values is a prime number, and `False` otherwise. ------ Input Format ------ - A single list of integers. ------ Output Format ------ - A single boolean value: `True` if the sum of the values is a prime number, else `False`. ------ Constraints ------ - The input list will contain 1 to 100 integers. - Each integer in the list will be between 1 and 1000. ------ Sample Input 1 ------ [2, 3, 5, 7] ------ Sample Output 1 ------ True ----- Explanation 1 ------ The sum of the coin values is 17, which is a prime number. Hence, the output is `True`. ------ Sample Input 2 ------ [1, 2, 3] ------ Sample Output 2 ------ False ----- Explanation 2 ------ The sum of the coin values is 6, which is not a prime number. Hence, the output is `False`.","solution":"def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_sum_prime(coin_values): Returns True if the sum of coin values is a prime number, False otherwise. total_sum = sum(coin_values) return is_prime(total_sum)"},{"question":"In a computer game, a player needs to collect a specific set of items. The items are placed in n distinct locations arranged in a linear sequence. The player can move from one location to the next and collect the item placed there. However, the player has a special power called \\"jump\\". When the player uses their jump power, they can move from their current location to any other location (not necessarily adjacent) and collect the item placed at the destination location. The jump can be used only once during the entire journey and not at the starting location. You are tasked with determining the minimum number of moves required for the player to collect all the items and reach the final location, either conventionally by moving to the next location or by using the jump power somewhere along the way. Input The first line contains one integer n (2 ≤ n ≤ 100) - the number of locations. The second line contains n integers, where the i-th integer (1 ≤ i ≤ n) denotes whether there is an item at location i (1 if there is an item, 0 otherwise). Output Output one integer - the minimum number of moves required for the player to collect all items and reach the final location. Examples Input 5 1 0 1 0 1 Output 4 Input 4 1 1 0 1 Output 3 Explanation: - In the first example, the player can move conventionally from location 1 to 2 (1 move), use the jump power to move from location 2 to 4 (1 jump), then move conventionally from location 4 to 5 (1 move). This requires a total of 2 moves plus the jump. Therefore, the minimum number of moves is 4 including the start and final steps. - In the second example, the player can move from 1 to 2 (1 move), from 2 to 3 using the jump (1 jump), then move conventionally from 3 to 4. This requires a total of 2 moves plus the jump. Therefore, the minimum number of moves is 3 including the start and final steps.","solution":"def min_moves_to_collect_items(n, items): Calculate the minimum number of moves required to collect all items and reach the final location. # Calculate total items to collect total_items = sum(items) # Starting position (first item is always collected) collected_items = items[0] moves = 0 # Traverse the locations collecting items for i in range(1, n): collected_items += items[i] moves += 1 # If all items are collected except the last move to reach final location if collected_items == total_items: return moves + (n - i - 1) # In the worst case the player needs to move through all n-1 positions plus one jump return n - 1"},{"question":"**Problem** You are given a space expedition to explore a series of newly discovered planets. Your task as the chief engineer is to manage the energy consumption of the expedition throughout its journey. There are different events that can happen during the expedition which affect the energy levels of the spaceship. These events are given in the form of queries: * `0 P E`: Move to the newly discovered planet P which consumes E amount of energy. * `1 E`: Consume E energy to perform an action on the current planet. * `2 E`: Replenish E energy at a space station. * `3`: Check the current energy level of the spaceship and output this value. Your goal is to simulate the expedition based on the recorded events. The spaceship starts with an initial amount of energy. Constraints * 1 ≤ Q ≤ 100000 (number of queries) * 1 ≤ E ≤ 109 (energy value) * Planets are identified by unique integers starting from 1. * There can never be more than one event occurring at the same time for the same planet. Input The input consists of multiple test cases. Each test case is provided as follows: * The first line contains two integers Q (number of queries) and initial energy, separated by a space. * The following Q lines contain the Q events described above. * The end of the input is indicated by two zeros. Output For each test case, for each event `3` that checks the current energy level, output the energy level on a new line. Print \\"end\\" at the end of each dataset. Example Input ``` 8 100 0 2 20 1 30 3 2 50 1 25 3 0 3 40 3 6 200 0 1 60 1 80 2 30 1 100 3 3 0 0 ``` Output ``` 50 75 35 end -10 -10 end ```","solution":"def manage_energy(input_data): index = 0 output = [] while index < len(input_data): Q, initial_energy = map(int, input_data[index].split()) if Q == 0 and initial_energy == 0: break # End of input energy = initial_energy index += 1 for _ in range(Q): event = input_data[index].split() index += 1 event_type = int(event[0]) if event_type == 0: planet = int(event[1]) energy_consumed = int(event[2]) energy -= energy_consumed elif event_type == 1: energy_consumed = int(event[1]) energy -= energy_consumed elif event_type == 2: energy_replenished = int(event[1]) energy += energy_replenished elif event_type == 3: output.append(str(energy)) output.append(\\"end\\") return output"},{"question":"You are given a list of integers which represents the scores obtained by students in a test. You need to find out the highest score and how many times that highest score was achieved. This problem is related to array handling and traversal. Input - The input consists of a single line of space-separated integers which represent the scores. Output - The output should be two integers: the highest score, and the number of times this score was obtained. Example Input: 45 67 89 89 89 56 67 Output: 89 3","solution":"def highest_score_and_count(scores_list): This function takes a list of integers representing scores and returns the highest score and the number of times the highest score was achieved. highest_score = max(scores_list) count = scores_list.count(highest_score) return highest_score, count"},{"question":"Alice and Bob are playing a game where they take turns cutting a chocolate bar with integer dimensions N times M. The bar is initially a whole, and on each turn, the player must make a single straight cut along the length or the width of any chocolate piece they choose. The player who cannot make a cut (i.e., when all pieces of chocolate are 1 times 1) loses the game. Given the initial dimensions of the chocolate bar, determine whether the starting player (Alice) will win or lose if both play optimally. -----Input:----- - First line contains an integer T, the number of test cases. Then follow T test cases. - Each test case consists of a single line containing two integers N and M, the dimensions of the chocolate bar. -----Output:----- For each test case, output \\"Alice\\" if the starting player will win the game, otherwise output \\"Bob\\". -----Constraints----- - 1 leq T leq 10^4 - 1 leq N, M leq 10^9 -----Sample Input:----- 2 3 4 7 5 -----Sample Output:----- Alice Bob -----EXPLANATION:----- In the first test case (3, 4), Alice can always make a move that forces Bob into a losing position. Hence, Alice will win if both play optimally. In the second test case (7, 5), no matter how Alice starts, Bob can always respond in a way that eventually forces Alice into a losing position. Hence, Bob will win if both play optimally.","solution":"def game_outcome(T, test_cases): Determines the outcome of the game for each test case. :param T: int, number of test cases :param test_cases: list of tuples, each tuple contains two integers N and M representing the dimensions of the chocolate bar :return: list of strings, \\"Alice\\" or \\"Bob\\" for each test case results = [] for N, M in test_cases: if N % 2 == 1 and M % 2 == 1: results.append(\\"Bob\\") else: results.append(\\"Alice\\") return results"},{"question":"There is a string `S` containing only lowercase alphabets. You are allowed to apply the following operation any number of times: You can choose any substring of `S` that is a palindrome and remove it. Your task is to determine if it\'s possible to completely remove the given string `S` by applying the above operation any number of times, or not. A palindrome is a string which reads the same forwards and backwards, for example, \\"aba\\" is a palindrome, but \\"abc\\" is not. Input : - The first line contains an integer `t`, the number of test cases. - Each of the next `t` lines contains a string `S`. Output : - For each test case, output \\"YES\\" if it is possible to completely remove the string `S` using the described operations, otherwise output \\"NO\\". Constraints : - 1 ≤ t ≤ 100 - 1 ≤ |S| ≤ 1000 ----- Sample Input 1 ----- 3 abba abc a ----- Sample Output 1 ----- YES NO YES ----- Explanation 1 ----- In the first test case, we can remove \\"abba\\", which is already a palindrome, in one operation. In the second test case, we cannot remove \\"abc\\" because it contains no palindromic substrings that span the whole length of the string after partial removals. In the third test case, \\"a\\" is already a palindrome and can be removed in one operation.","solution":"def can_remove_string(t, test_cases): results = [] for S in test_cases: if S == S[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string S, check whether the string is a Palindromic word or not. A word is called Palindromic if it reads the same backward as forward. Example 1: Input: S = \\"level\\" Output: Palindromic Explanation: The word \\"level\\" reads the same backward as forward, thus it is a palindromic word. Example 2: Input: S = \\"hello\\" Output: Not Palindromic Explanation: The word \\"hello\\" does not read the same backward as forward, thus it is not a palindromic word. Your Task: You don\'t need to read or print anything. Your task is to complete the function is_PalindromicWord() which takes a string S as input parameter and returns \\"Palindromic\\" if it is a palindromic word otherwise returns \\"Not Palindromic\\" (Without quotes). Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= len(S) <= 100","solution":"def is_PalindromicWord(S): Returns \\"Palindromic\\" if the given string S is a palindromic word, otherwise returns \\"Not Palindromic\\". if S == S[::-1]: return \\"Palindromic\\" else: return \\"Not Palindromic\\""},{"question":"Sarah is an editor for an online magazine and she often works with large texts. She finds it challenging to identify sentences within a text that are palindromes once punctuation and spacing are ignored. She has tasked you with creating a function that can determine whether a given sentence is a palindrome. A sentence is considered a palindrome if, after removing all non-alphanumeric characters and converting all alphabetic characters to lowercase, it reads the same forwards and backwards. Input The first line contains an integer T, the number of test cases. T test cases follow. Each test case consists of a single line containing a sentence S. Output For each test case, output a single line containing \\"YES\\" if the sentence is a palindrome and \\"NO\\" otherwise. Constraints 1 <= T <= 100 1 <= length(S) <= 1000 Example Input: 3 A man, a plan, a canal, Panama No lemon, no melon Hello, World! Output: YES YES NO","solution":"def is_palindrome_sentence(sentence): Check if the given sentence is a palindrome ignoring punctuation, spacing, and case. Parameters: sentence (str): The sentence to check. Returns: str: \\"YES\\" if the sentence is a palindrome, \\"NO\\" otherwise. # Filter out non-alphanumeric characters and convert to lowercase. filtered_sentence = \'\'.join(char.lower() for char in sentence if char.isalnum()) # Check if the filtered sentence reads the same forwards and backwards. if filtered_sentence == filtered_sentence[::-1]: return \\"YES\\" else: return \\"NO\\" def check_palindromes(T, sentences): Check if each sentence in the list is a palindrome. Parameters: T (int): The number of test cases. sentences (list of str): The sentences to check. Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each test case. return [is_palindrome_sentence(sentence) for sentence in sentences]"},{"question":"Write a function that takes an array of integers and a target integer, and determines if there are two distinct elements in the array, whose sum is equal to the target integer. Return a boolean (True or False). Example 1: Input: [2, 7, 11, 15], 9 Output: True (because 2 + 7 = 9) Example 2: Input: [3, 2, 4], 6 Output: True (because 2 + 4 = 6) Example 3: Input: [3, 3], 6 Output: True (because 3 + 3 = 6) Example 4: Input: [1, 2, 3], 7 Output: False (no two elements sum up to 7) Note: - The array contains at least one integer. - Each element in the array is a distinct value. - The function should run in linear time.","solution":"def has_two_sum(nums, target): Returns True if there are two distinct elements in the array whose sum is equal to the target integer; otherwise, returns False. :param nums: List of integers :param target: Target sum integer :return: Boolean indicating if there are two distinct elements whose sum equals the target integer seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"There is a forest with N trees in it. Each tree is uniquely identified by a positive integer ID from 1 to N. The trees form a connected, undirected graph with N-1 edges, making it a tree structure. There might be various artifacts buried beneath these trees. A treasure hunter, John, needs to dig under the trees to uncover as many artifacts as possible, but he can only dig under one tree at a time. John has a special device that hints at which tree likely has the most artifacts. This device, however, is not foolproof. John, being cautious, wants to make sure that if he starts digging under a particular tree, he won\'t miss an opportunity to find more artifacts. He wants you to help him find out if he can always make a better move from the tree he is currently digging under. More precisely, John needs to verify if there is a unique tree with the maximum number of artifacts. If such a tree exists, he should directly go to that tree. ------ Input: ------ The input consists of two parts. The first part is a list of N positive integers A_i representing the number of artifacts under the i-th tree. The second part is a list of N-1 edges, where each edge is represented by a pair of integers (u, v), which indicates there is a path between tree u and tree v. ------ Output: ------ If there is a unique tree with the maximum number of artifacts, print its ID. If there is not a unique such tree, print \\"No Unique Maximum\\". ----- Sample Input 1 ------ 5 2 4 4 6 6 1 2 1 3 2 4 2 5 ----- Sample Output 1 ------ No Unique Maximum ----- Sample Input 2 ------ 4 1 2 3 4 1 2 2 3 3 4 ----- Sample Output 2 ------ 4","solution":"def find_tree_with_unique_max_artifacts(artifacts, edges): Finds the unique tree with the maximum number of artifacts if it exists. Args: artifacts (list of int): A list where the ith element represents the number of artifacts under the tree with ID i+1. edges (list of tuples): A list of tuples where each tuple (u, v) represents an edge between tree u and tree v. Returns: int or str: Tree ID with the unique maximum number of artifacts, or \\"No Unique Maximum\\" if no such unique tree exists. max_artifacts = max(artifacts) max_count = artifacts.count(max_artifacts) if max_count > 1: return \\"No Unique Maximum\\" return artifacts.index(max_artifacts) + 1"},{"question":"Clear Comments Jorge is an enthusiastic programmer who always aims to write clear and understandable code. He believes in the power of comments for documenting his thought process. In this task, you are given a piece of Jorge\'s code along with a description of what it should do. Your goal is to explain what each function and significant code block does by adding comments. # Function: `array_gaps` Given a list of integers, `array_gaps` should return a new list that contains the gaps between each pair of consecutive integers in the original list. Example: ```python assert array_gaps([1, 3, 6, 10]) == [2, 3, 4] assert array_gaps([5, 5, 5, 5]) == [0, 0, 0] assert array_gaps([10, 7, 4, 0]) == [3, 3, 4] ``` Here\'s the function implementation: ```python def array_gaps(arr): gaps = [] # Initialize an empty list to store the gaps for i in range(len(arr) - 1): gap = abs(arr[i] - arr[i+1]) # Calculate the gap between consecutive elements gaps.append(gap) # Append the gap to the \'gaps\' list return gaps # Return the list of gaps # Example usage: print(array_gaps([1, 3, 6, 10])) # Output: [2, 3, 4] print(array_gaps([5, 5, 5, 5])) # Output: [0, 0, 0] print(array_gaps([10, 7, 4, 0])) # Output: [3, 3, 4] ``` # Task Rewrite the `array_gaps` function to include comments that explain each step and the purpose of the function in general. Ensure that anyone reviewing the code can understand both the overall functionality and the specific operations performed within the function.","solution":"def array_gaps(arr): Calculate the gaps between each pair of consecutive integers in the list. Args: arr (list of int): A list of integers. Returns: list of int: A list containing the absolute gaps between each pair of consecutive integers. gaps = [] # Initialize an empty list to store the gaps for i in range(len(arr) - 1): gap = abs(arr[i] - arr[i+1]) # Calculate the gap between consecutive elements gaps.append(gap) # Append the gap to the \'gaps\' list return gaps # Return the list of gaps # Example usage: print(array_gaps([1, 3, 6, 10])) # Output: [2, 3, 4] print(array_gaps([5, 5, 5, 5])) # Output: [0, 0, 0] print(array_gaps([10, 7, 4, 0])) # Output: [3, 3, 4]"},{"question":"You are given an array of different integers. A peak in an array is defined as an element which is strictly greater than its neighbors. The first and last elements of the array cannot be peaks because they don\'t have two neighbors. Your task is to find all the peaks in the array and return their values. Given an array of length n, where 3 ≤ n ≤ 2⋅10^5 and elements are distinct integers (each element is guaranteed to be unique), implement a function `find_peaks(arr)` that identifies the peaks in the array. # Function Signature ```python def find_peaks(arr: List[int]) -> List[int]: pass ``` # Input - A single list `arr` of n distinct integers, where 3 ≤ n ≤ 2⋅10^5. # Output - A list of integers representing the values of all peaks in the order they appear in the array. # Example Input: ```python arr = [10, 20, 15, 2, 23, 90, 67] ``` Output: ```python [20, 90] ``` Input: ```python arr = [1, 3, 20, 4, 1, 0] ``` Output: ```python [20] ``` # Note In the first example, the array `[10, 20, 15, 2, 23, 90, 67]` contains two peaks: 20 (since 20 > 10 and 20 > 15) and 90 (since 90 > 23 and 90 > 67). Hence, the output is `[20, 90]`. In the second example, the array `[1, 3, 20, 4, 1, 0]` contains only one peak: 20 (since 20 > 3 and 20 > 4). Therefore, the output is `[20]`.","solution":"from typing import List def find_peaks(arr: List[int]) -> List[int]: Identifies and returns a list of all peaks in the input array. peaks = [] for i in range(1, len(arr) - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peaks.append(arr[i]) return peaks"},{"question":"Write a function that determines the minimum number of swaps required to group all 1s in a binary array together. A swap can involve any two elements in the array. Return the minimum number of swaps needed. -----Constraints----- - The length of the binary array is between 1 and 10^5 (inclusive). - The array consists of only 0s and 1s. -----Input----- Input is given from Standard Input in the following format: n arr -----Output----- Print the minimum number of swaps required. -----Sample Input----- 8 [1, 0, 1, 0, 1, 0, 0, 1] -----Sample Output----- 2 For example, in the given array, we can group all 1s together with a minimum of 2 swaps: by moving the 1s at index 2 and 7 to indexes 3 and 4, respectively.","solution":"def min_swaps_to_group_ones(arr): Determines the minimum number of swaps needed to group all 1s in a binary array together. total_ones = arr.count(1) if total_ones == 0: return 0 min_swaps = float(\\"inf\\") current_zeros = 0 for i in range(len(arr)): if i >= total_ones: if arr[i - total_ones] == 0: current_zeros -= 1 if arr[i] == 0: current_zeros += 1 if i >= total_ones - 1: min_swaps = min(min_swaps, current_zeros) return min_swaps"},{"question":"You have been hired as a developer for an adventure game where players navigate through a grid. The grid is represented as an `n x m` matrix with `n` rows and `m` columns. Each cell in the matrix contains a character that can either be an obstacle (\'#\') or an open path (\'.\'). The player can move up, down, left, or right, but cannot move diagonally or through obstacles. Your task is to calculate the number of distinct paths from the top-left corner (1,1) to the bottom-right corner (n,m). The path should follow the given constraints: 1. The player can only move to a cell if it is an open path (\'.\'). 2. The player can move in four directions: up, down, left, or right. 3. The player cannot move outside the boundaries of the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) denoting the number of rows and the number of columns of the grid respectively. The next n lines each contain m characters specifying the grid, with each character being either \'.\' or \'#\'. Output Print the number of distinct paths from the top-left corner to the bottom-right corner. If there is no valid path, output 0. Examples Input 3 3 ... .#. ... Output 2 Input 3 3 .#. # .#. Output 0","solution":"def num_paths(grid, n, m): Find the number of distinct paths from top-left to bottom-right in a given grid. The grid contains \'.\' (open path) and \'#\' (obstacle). # If the starting or ending point is blocked, there\'s no path if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Create a DP table to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The value at the bottom right corner is the number of distinct paths return dp[n-1][m-1]"},{"question":"You are given a sequence of integers and an integer K. You need to determine if there are two distinct elements in the sequence whose sum is divisible by K. Write a function that checks for each test case if there are such two elements in the sequence. ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and K, where N is the number of elements in the sequence and K is the integer. The second line of each test case contains N space-separated integers representing the elements of the sequence. ------ Output ------ For each test case, print a single line containing \\"YES\\" if there are two elements whose sum is divisible by K, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^3 2 ≤ N ≤ 10^5 1 ≤ K ≤ 10^9 1 ≤ sequence[i] ≤ 10^9 The sum of N over all test cases does not exceed 5 * 10^5. ------ Sample Input 1 ------ 3 5 7 1 2 3 4 5 4 6 2 4 6 8 5 10 8 1 7 6 5 ------ Sample Output 1 ------ YES YES NO Explanation: - In the first test case, 3 + 4 = 7, which is divisible by K = 7. - In the second test case, 2 + 4 = 6, which is divisible by K = 6. - In the third test case, no two elements have a sum that is divisible by K = 10.","solution":"def check_sum_divisible(T, cases): results = [] for case in cases: N, K, sequence = case found = False remainders = {} for number in sequence: remainder = number % K if remainder in remainders: found = True break needed_remainder = (K - remainder) % K remainders[needed_remainder] = True results.append(\\"YES\\" if found else \\"NO\\") return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 cases = [] for _ in range(T): N = int(data[index]) K = int(data[index+1]) sequence = list(map(int, data[index+2:index+2+N])) cases.append((N, K, sequence)) index += 2 + N results = check_sum_divisible(T, cases) for result in results: print(result)"},{"question":"Given a non-negative integer n, your task is to rearrange its digits in such a way that you get the maximum possible integer. You cannot assume n is positive, but you can assume it does not start with a zero. Write a function `max_rearrangement(n)` that takes a non-negative integer n as input and returns another integer which is the maximum possible number that can be obtained by rearranging the digits of n. Example 1: Input: n = 213 Output: 321 Example 2: Input: n = 4455 Output: 5544 Example 3: Input: n = 1004 Output: 4100 Note: - 0 <= n <= 10^18 - The input number will not have leading zeros. - The output number must be the maximum possible integer that can be formed with the given digits.","solution":"def max_rearrangement(n): Returns the maximum possible integer that can be obtained by rearranging the digits of n. # Convert the number to a string to access its digits digits = str(n) # Sort the digits in decreasing order and join them to form a new number max_number = int(\'\'.join(sorted(digits, reverse=True))) return max_number"},{"question":"You are given an integer array a of length n. Your goal is to determine whether it is possible to transform this array into a non-decreasing array by performing the following operation at most once: - Select an element in the array and remove it. A non-decreasing array is an array where each element is less than or equal to the next one. For example, if you have an array a = [4, 2, 3], you can remove the first element (4) to get [2, 3], which is non-decreasing. However, if the array is a = [4, 2, 1], no single element removal will result in a non-decreasing array. Write a function that returns `true` if the array can be transformed into a non-decreasing array by removing exactly one element, and `false` otherwise. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (2 le n le 100) — the length of the array a. The second line contains n integers a_1, a_2, ldots, a_n (-10^3 le a_i le 10^3) — the elements of the array. -----Output----- For each test case, print `true` or `false`. -----Example----- Input 4 3 4 2 3 3 4 2 1 3 1 2 3 2 1 5 Output true false true true -----Note----- In the first test case, you can remove the first element (4) to get a non-decreasing array [2, 3]. In the second test case, you cannot get a non-decreasing array by removing any single element. For example, removing 4 yields [2, 1] and removing 2 or 1 does not result in a non-decreasing array either. In the third test case, the array is already non-decreasing, so no element needs to be removed. In the fourth test case, the array is already non-decreasing, so no element needs to be removed.","solution":"def can_be_non_decreasing(arr): Determines if the array can be made non-decreasing by removing at most one element. def is_non_decreasing(sub_arr): for i in range(len(sub_arr) - 1): if sub_arr[i] > sub_arr[i + 1]: return False return True # Check if already non-decreasing if is_non_decreasing(arr): return True # Try removing each element and check if it becomes non-decreasing for i in range(len(arr)): if is_non_decreasing(arr[:i] + arr[i + 1:]): return True return False def process_test_cases(test_cases): Processes test cases and returns the results. results = [] for arr in test_cases: results.append(can_be_non_decreasing(arr)) return results"},{"question":"Alex has recently started learning about string manipulation in Python and he came across a problem: Given a string, he needs to determine if the string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Alex isn\'t sure how to handle the case sensitivity and the non-alphanumeric characters, so he looks to you for help. Write a program to determine if a given string is a palindrome. Input The input contains a single line with a string s (1 ≤ length of s ≤ 1000), which can have spaces, punctuation, and mixed uppercase and lowercase letters. Output Print the word \\"YES\\" if the input string is a palindrome, or the word \\"NO\\" if it is not. Examples Input A man, a plan, a canal, Panama Output YES Input Hello, World! Output NO","solution":"import re def is_palindrome(s): Determines if the given string is a palindrome, ignoring spaces, punctuation, and case sensitivity. Args: s (str): The input string. Returns: str: \'YES\' if the input string is a palindrome, \'NO\' otherwise. # Remove non-alphanumeric characters and convert to lowercase clean_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is the same forwards and backwards if clean_s == clean_s[::-1]: return \'YES\' else: return \'NO\'"},{"question":"Determine the largest prime factor of a positive integer `n`. Random tests go up to `n = 1000000`. Examples ```python largest_prime_factor(4) == 2 # 2 is the largest prime factor of 4 (2 * 2) largest_prime_factor(15) == 5 # 5 is the largest prime factor of 15 (3 * 5) largest_prime_factor(44) == 11 # 11 is the largest prime factor of 44 (2^2 * 11) largest_prime_factor(97) == 97 # 97 itself is a prime number ```","solution":"def largest_prime_factor(n): Returns the largest prime factor of a positive integer n. def is_prime(num): if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True largest_prime = None # Check from smallest primes upward for i in range(2, int(n ** 0.5) + 1): while n % i == 0: largest_prime = i n //= i if n > 1: # if n is a prime number greater than the largest factor found largest_prime = n return largest_prime"},{"question":"In a galaxy far, far away, a certain planet called Zog has a unique calendar system. Their year consists of `d` days, and a week has `w` days. The residents of Zog want to figure out how the calendar for any given year would look, given the start day of the year. The days of the week on Zog are represented by integers from 1 to `w`. Write a program that prints the calendar for a given year in Zog. Each line of the output should represent a week, and each day should be shown as an integer from 1 to `d`. Input The input consists of three integers, separated by spaces: - `d` (1 ≤ d ≤ 1000) – the number of days in the year. - `w` (1 ≤ w ≤ 10) – the number of days in a week. - `s` (1 ≤ s ≤ w) – the start day of the year. Output Print the calendar for the given year. Each week should be on a new line. If a week is not complete, the remaining days should be represented by dots (`.`). Examples Input 15 7 3 Output . . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","solution":"def generate_calendar(d, w, s): Generates the Zog calendar as a list of strings, each representing a week. calendar = [] week = [\'.\'] * (s - 1 if s > 1 else 0) for day in range(1, d + 1): week.append(str(day)) if len(week) == w: calendar.append(\' \'.join(week)) week = [] if week: while len(week) < w: week.append(\'.\') calendar.append(\' \'.join(week)) return calendar def print_calendar(d, w, s): Prints the Zog calendar for a given year in the required format. calendar = generate_calendar(d, w, s) for week in calendar: print(week) # Example usage: # print_calendar(15, 7, 3)"},{"question":"Alex is a game developer working on a strategy game. In this game, players can construct various buildings to expand their empire. Each building takes a certain number of construction units (CU) to build. Alex wants to implement a feature where players can see the maximum number of any given type of building they can construct with their available CUs. Your task is to help Alex write a function `maxBuildings` that determines how many of each building can be built. You will be provided with an array representing the construction units required for each type of building and an integer representing the total available construction units. Function Signature: ```python def maxBuildings(cu_list: List[int], total_cu: int) -> List[int]: ``` # Input - `cu_list`: A list of integers where each integer represents the construction units required for a specific type of building. (1 ≤ len(cu_list) ≤ 1000, 1 ≤ cu_list[i] ≤ 1000) - `total_cu`: An integer representing the total available construction units. (1 ≤ total_cu ≤ 10^6) # Output - Return a list of integers where the i-th integer represents the maximum number of the i-th type of building that can be constructed. # Example Input ```python cu_list = [5, 10, 8] total_cu = 100 ``` Output ```python [20, 10, 12] ``` # Explanation - For the first building type, each costs 5 CUs, thus you can build 100 // 5 = 20 buildings. - For the second building type, each costs 10 CUs, thus you can build 100 // 10 = 10 buildings. - For the third building type, each costs 8 CUs, thus you can build 100 // 8 = 12 buildings.","solution":"from typing import List def maxBuildings(cu_list: List[int], total_cu: int) -> List[int]: Determines the maximum number of each type of building that can be constructed with the given total construction units (total_cu). Parameters: cu_list (List[int]): List of integers where each integer represents the construction units required for a specific type of building. total_cu (int): Total available construction units. Returns: List[int]: List of integers where the i-th element represents the maximum number of the i-th type of building that can be constructed. return [total_cu // cu for cu in cu_list]"},{"question":"Given a 2D grid of integers, each cell in the grid contains a value representing the cost to move past that cell. You can only move right or down from the top-left cell to the bottom-right cell. Write a function that finds the minimum cost to traverse from the top-left to the bottom-right corner of the grid. You are given the grid as a list of lists where grid[i][j] represents the cost of the cell at row i and column j. Example: Input: grid = [[1, 3, 1], [1, 5, 1], [4, 2, 1]] Output: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 minimizes the total cost to 7. Note: * The grid will have at most 500 rows and 500 columns. * Each cell in the grid will have a non-negative integer value. * Your function should run in O(mn) time where m and n are the number of rows and columns in the grid, respectively.","solution":"def min_path_cost(grid): Returns the minimum cost to traverse from the top-left to the bottom-right corner of the grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"A company is handling a large number of user requests and wants to improve the efficiency of their request processing system. They decide to prioritize certain requests based on multiple criteria. To aid in this task, they use a specific algorithm. The company receives a list of requests, each characterized by two integers: priority and duration. The higher the priority number, the higher the importance of that request. Similarly, the shorter the duration, the faster the request can be handled. To optimize the performance, they decided to handle requests considering both priority and duration. Given a list with n requests, each characterized by a tuple (priority, duration), their task is to sort the requests primarily by priority in descending order. For requests with the same priority, they should be sorted by duration in ascending order. Your task is to implement the sorting algorithm for the requests as described. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) denoting the number of requests. Each of the next n lines contains two space-separated integers p and d (1 ≤ p, d ≤ 10^5), representing the priority and duration of each request. -----Output----- Output n lines, each containing the priority and duration of the requests in the sorted order. -----Examples----- Input 3 1 5 2 2 2 1 Output 2 1 2 2 1 5 Input 4 3 4 4 1 4 3 2 2 Output 4 1 4 3 3 4 2 2 -----Note----- In the first sample, the requests are sorted by priority first. Requests with priority 2 appear before the one with priority 1. Among the requests with priority 2, the one with duration 1 comes before the one with duration 2. In the second sample, the list of requests with priority 4 comes first. Among these, the request with the shorter duration of 1 comes before the request with duration 3.","solution":"def sort_requests(requests): Sorts requests first by priority in descending order, then by duration in ascending order. Args: requests (list of tuple): List of tuples where each tuple contains (priority, duration) Returns: list of tuple: Sorted list of requests return sorted(requests, key=lambda x: (-x[0], x[1])) def process_requests(n, requests_list): Processes the input requests list and returns the sorted list. Args: n (int): Number of requests requests_list (list of tuple): List of tuples where each tuple contains (priority, duration) Returns: list of tuple: Sorted list of requests sorted_requests = sort_requests(requests_list) return sorted_requests"},{"question":"You are tasked with setting up a complex network system. The system consists of n servers arranged in a line numbered from 1 to n. Each server has a certain load capacity defined by an integer array `capacity` of length n, where the i-th element represents the load capacity of the i-th server. Each server is connected to the next one, forming a linear network. Your task is to process a series of q maintenance operations on this network. Each operation consists of two integers l and r (1 ≤ l ≤ r ≤ n), which represent the range of servers on which the operation is performed. During each operation, all servers in the range [l, r] are upgraded such that their load capacities are doubled. After each operation, you must determine the maximum load capacity among all servers. Write a program that processes all q maintenance operations and outputs the maximum load capacity of all servers after each operation. # Input Format The first line contains two integers n and q (1 ≤ n, q ≤ 100,000). The second line contains n integers representing the array `capacity` (1 ≤ capacity[i] ≤ 1,000,000). Next q lines contain the descriptions of the operations, each line contains two integers l and r (1 ≤ l ≤ r ≤ n), describing the i-th operation. # Output Format Output q lines. Each line should contain the maximum load capacity among all servers after the respective operation. # Example Input ``` 5 3 2 1 4 6 3 1 3 2 5 1 4 ``` Output ``` 8 12 24 ``` # Explanation - Initially, the capacities are `[2, 1, 4, 6, 3]`. - After the first operation (doubling capacities from 1 to 3), the capacities become `[4, 2, 8, 6, 3]`. The max capacity is 8. - After the second operation (doubling capacities from 2 to 5), the capacities become `[4, 4, 16, 12, 6]`. The max capacity is 16. - After the third operation (doubling capacities from 1 to 4), the capacities become `[8, 8, 32, 24, 6]`. The max capacity is 32.","solution":"def process_operations(n, q, capacity, operations): Process a series of maintenance operations on a network of servers and determine the max capacity after each operation. Args: n : int : number of servers q : int : number of operations capacity : list : initial load capacities of servers operations : list : list of tuples where each tuple contains two integers (l, r) Returns: List of maximum capacities after each operation. results = [] for l, r in operations: for i in range(l-1, r): capacity[i] *= 2 results.append(max(capacity)) return results"},{"question":"Given an array of positive integers, determine if there exist three distinct indices i, j, k such that the sum of the numbers at these indices equals a specified target value T. If such indices exist, print `YES`, otherwise print `NO`. -----Constraints----- - The array will have a length between 3 and 100 (inclusive). - Each integer in the array will be between 1 and 10^6. - T is a positive integer between 1 and 3 * 10^6. -----Input----- Input is given from Standard Input in the following format: - The first line contains an integer, T. - The second line contains a space-separated list of integers representing the array. -----Output----- Print `YES` if there exist three distinct indices i, j, k such that array[i] + array[j] + array[k] = T. Otherwise, print `NO`. -----Sample Input----- 15 1 2 3 4 5 6 7 -----Sample Output----- YES Explanation: The sum of the numbers at indices 0, 4, and 5 (i.e., 1 + 5 + 9) equals the target value 15. Hence, the output is `YES`.","solution":"def three_sum_exists(arr, T): Determine if there exist three distinct indices i, j, k such that arr[i] + arr[j] + arr[k] = T. n = len(arr) for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if arr[i] + arr[j] + arr[k] == T: return \\"YES\\" return \\"NO\\""},{"question":"Ana has a series of activities she needs to perform, but she can only do them if she can group them into pairs where the sum of their durations is even. An activity can be paired only once, and each pair must consist of two different activities. Each activity is represented by its duration in hours. Ana wants to find out the maximum number of such pairs she can form from a given list of activities. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains an integer N denoting the number of activities. The second line contains N space-separated integers a_{1}, a_{2}, ..., a_{N} where a_{i} denotes the duration of the i-th activity. ------ Output ------ For each test case, output a single integer denoting the maximum number of pairs that can be formed such that the sum of the durations in each pair is even. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ a_{i} ≤ 10^{9} ------ Sample Input 1 ------ 2 4 4 7 5 2 5 3 5 1 2 8 ------ Sample Output 1 ------ 2 2 ------ Explanation 1 ------ Example case 1: From the activities {4, 7, 5, 2}, we can form two pairs: (4, 2) and (7, 5), both of which have even sums, resulting in 2 pairs. Example case 2: From the activities {3, 5, 1, 2, 8}, possible pairs are (3, 5) and (1, 3) forming 2 pairs with even sums.","solution":"def max_pairs_even_sum(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] activities = test_cases[i][1] odd_count = sum(1 for x in activities if x % 2 != 0) even_count = N - odd_count pairs = min(odd_count, even_count) results.append(pairs) return results"},{"question":"In this problem, you need to help a scientist simulate the growth of a bacterial colony on a grid. The scientist provides a grid with cells that can be either occupied by bacteria or empty. Each second, the bacteria will spread to neighboring cells as per the following rules. - If a cell is occupied by bacteria, it will remain occupied. - If a cell is empty but has at least two neighboring cells occupied by bacteria (where neighboring cells are the ones sharing a common edge), it will become occupied by bacteria. You need to simulate the grid\'s state over a given number of seconds and then answer queries about the state of specific cells at specific times. # Input - The first line contains three integers n, m, t (1 leq n, m leq 1000, 1 leq t leq 100,000) representing the number of rows, columns, and the number of queries, respectively. - Each of the next n lines contains a string of length m, where \'0\' denotes an empty cell, and \'1\' denotes a cell occupied by bacteria. - Each of the next t lines contains three integers i, j, p (1 leq i leq n, 1 leq j leq m, 1 leq p leq 10^{18}), representing a query about the state of the cell in the i-th row and j-th column after p seconds. # Output - For each query, print \'1\' if the cell is occupied by bacteria after p seconds; otherwise, print \'0\'. # Examples Example 1 # Input ``` 4 4 3 0100 0010 1000 0000 2 2 1 3 3 2 1 1 1 ``` # Output ``` 1 0 0 ``` Example 2 # Input ``` 3 3 2 111 010 111 1 1 1 2 2 3 ``` # Output ``` 1 1 ``` # Explanation Example 1 The initial grid is: ``` 0100 0010 1000 0000 ``` - After 1 second: ``` 0110 0111 1110 0000 ``` The responses to the queries are as follows: - Query (2, 2, 1): The cell is \'1\' - Query (3, 3, 2): The cell is \'0\' - Query (1, 1, 1): The cell is \'0\' Example 2 The initial grid is: ``` 111 010 111 ``` - After 1 second: ``` 111 111 111 ``` The responses to the queries are as follows: - Query (1, 1, 1): The cell is \'1\' - Query (2, 2, 3): The cell is \'1\'","solution":"def bacterial_growth(grid, queries): n = len(grid) m = len(grid[0]) results = [] for i, j, t in queries: i -= 1 j -= 1 if grid[i][j] == \'1\': # If the cell is already occupied initially results.append(\'1\') else: # Calculate neighboring occupied cells neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)] count = 0 for x, y in neighbors: if 0 <= x < n and 0 <= y < m and grid[x][y] == \'1\': count += 1 if count >= 2: # Also considering if \'t\' is 1 or greater than or equal to (i + j) if t >= 1: results.append(\'1\') else: results.append(\'0\') else: results.append(\'0\') return results # Reading input and converting into suitable format def read_input(): import sys input = sys.stdin.read data = input().split() n, m, t = map(int, data[:3]) grid = data[3:3+n] query_data = data[3+n:] queries = [(int(query_data[i]), int(query_data[i+1]), int(query_data[i+2])) for i in range(0, len(query_data), 3)] return grid, queries if __name__ == \\"__main__\\": grid, queries = read_input() result = bacterial_growth(grid, queries) for res in result: print(res)"},{"question":"Create a function that takes an array of unique integers and returns an array of all possible subsets of the input array. The subsets should be in non-descending order, and the order of the subsets in the result array does not matter. For example: ``` subsets([1, 2, 3]) ``` should return: ``` [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]] ``` More examples in test cases. Good luck!","solution":"from itertools import combinations def subsets(nums): Returns an array of all possible subsets of the input array. Each subset is sorted in non-descending order. Order of subsets in the result array does not matter. subsets_list = [] nums = sorted(nums) for r in range(len(nums) + 1): for combo in combinations(nums, r): subsets_list.append(list(combo)) return subsets_list"},{"question":"You have been given a string of brackets consisting of different types of brackets: (), {}, []. Your task is to determine if the order of the brackets is valid. A valid sequence of brackets is one that is correctly open and closed, for example, \\"()\\", \\"{[]}\\", \\"([])\\". Input Format A single line containing the bracket string. Constraints 1 ≤ length of string ≤ 105 Each character of the string is one of \'(\', \')\', \'{\', \'}\', \'[\' or \']\'. Output Format A single line containing YES or NO in uppercase. SAMPLE INPUT {[()]} SAMPLE OUTPUT YES Explanation The provided samples are all valid sequences of brackets.","solution":"def is_valid_bracket_sequence(s): Determines if the given string of brackets is valid. :param s: A string containing the bracket sequence :return: \\"YES\\" if the bracket sequence is valid, \\"NO\\" otherwise stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if not stack or stack.pop() != bracket_map[char]: return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"A company wants to analyze the sales patterns of its products over several months. Each product has monthly sales data represented as a sequence of integers. They want to detect trends in the sales data such as increasing, decreasing, or fluctuating patterns. Write a program that determines the trend pattern for each product. -----Input----- The input for your program consists of multiple lines. The first line has an integer 1 le P le 100 indicating the number of products. Each subsequent line describes the sales data of a single product, starting with an integer 3 le m le 100 representing the number of months, followed by m integers s_1, s_2, ldots, s_m indicating the sales figures for those months. Sales figures are non-negative integers between 0 and 10,000 inclusive. -----Output----- For each product, print a single line indicating the trend of the sales data. The possible trends are: - “increasing” if each month’s sales are strictly higher than the preceding month. - “decreasing” if each month’s sales are strictly lower than the preceding month. - “fluctuating” if the sales data does not follow either of the above patterns. -----Examples----- Sample Input: 4 5 10 20 30 40 50 5 50 40 30 20 10 5 10 20 20 30 40 4 20 15 10 5 Sample Output: increasing decreasing fluctuating decreasing","solution":"def determine_trend(sales_data): Determines the trend of sales data. Parameters: sales_data (list of int): List of sales data across months Returns: str: The trend of the sales data (\'increasing\', \'decreasing\', \'fluctuating\') increasing = all(earlier < later for earlier, later in zip(sales_data, sales_data[1:])) decreasing = all(earlier > later for earlier, later in zip(sales_data, sales_data[1:])) if increasing: return \\"increasing\\" elif decreasing: return \\"decreasing\\" else: return \\"fluctuating\\" def analyze_sales_data(input_data): Analyzes the trends of multiple products\' sales data. Parameters: input_data (list of str): List with each element being a string representing the sales data of a product Returns: list of str: List of trends for each product result = [] for line in input_data: _, *sales_data = map(int, line.split()) result.append(determine_trend(sales_data)) return result"},{"question":"You are given a list of train arrival and departure timings at a railway station, and you need to determine the minimum number of platforms required at the station so that no train has to wait. Each train has a start time (arrival) and an end time (departure). If a train arrives exactly at the departure time of another train, there should be no conflict as the platform can be switched immediately. All timings will be given in the 24-hour format as integers. Input The first line contains an integer n, the number of trains (1 ≤ n ≤ 1000). The next n lines each contain two integers, ai and di (0 ≤ ai, di ≤ 2359, ai < di), representing the arrival and departure time of the i-th train. Output Print a single integer representing the minimal number of platforms required. Examples Input 3 900 910 940 1200 950 1120 Output 2 Input 4 1100 1130 1140 1150 1120 1135 1135 1145 Output 2 Note In the first example, the first and second train times do not overlap so they can share the same platform, but the third train overlaps with the first train, so we need another platform at that time. Hence, two platforms are required in total. In the second example, at 1130 hours we require two platforms because the first train departs at 1130 and the third and fourth trains are still there. After 1135, the first platform will free up and the fourth train can use that. Hence, two platforms are required in total.","solution":"def min_platforms_required(n, timings): arrival_times = sorted([a for a, d in timings]) departure_times = sorted([d for a, d in timings]) max_platforms = 0 current_platforms = 0 i, j = 0, 0 while i < n and j < n: if arrival_times[i] < departure_times[j]: current_platforms += 1 i += 1 max_platforms = max(max_platforms, current_platforms) else: current_platforms -= 1 j += 1 return max_platforms # Example usage: # n = 4 # timings = [(1100, 1130), (1140, 1150), (1120, 1135), (1135, 1145)] # print(min_platforms_required(n, timings))"},{"question":"John is an avid reader who loves to maintain a balanced reading routine. He likes to read one book at a time, start to finish, without leaving any pages unread. However, he has a peculiar habit: he reads books such that the total number of pages he reads in a session should be a perfect square number. Given a stack of books, each with a certain number of pages, John wants to know if he can select a group of consecutive books from the stack such that the total number of pages read is a perfect square. Your task is to help John determine if there is a group of consecutive books that he can read to achieve his goal. -----Input:----- - The first line contains an integer T representing the number of test cases. - Each test case starts with an integer N representing the number of books. - The next line contains a list of N integers, p[], where p[i] represents the number of pages in the i^{th} book. -----Output:----- - For each test case, print \\"Yes\\" if there exists a group of consecutive books whose total number of pages is a perfect square. Otherwise, print \\"No\\". -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 300 - 1 leq p[i] leq 10^4 -----Sample Input:----- 2 5 4 16 20 1 25 3 2 8 10 -----Sample Output:----- Yes No","solution":"import math def is_perfect_square(x): Helper function to determine if a number is a perfect square. if x < 0: return False root = int(math.isqrt(x)) return root * root == x def can_read_perfect_square_pages(T, test_cases): Function to determine if there exists a group of consecutive books whose total number of pages is a perfect square. Args: T (int): The number of test cases test_cases (list): List containing tuples with the number of books and their respective page counts Returns: list: List containing the result (\\"Yes\\" or \\"No\\") for each test case results = [] for i in range(T): N, pages = test_cases[i] found = False # Iterate over all possible subarrays for start in range(N): sum_pages = 0 for end in range(start, N): sum_pages += pages[end] if is_perfect_square(sum_pages): found = True break if found: break if found: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"problem A museum displays N unique objects, each having a distinct ID numbered from 1 to N. Each object has a value and a weight associated with it. The museum wants to select a subset of these objects to exhibit in a main hall display case, ensuring that the total weight of selected objects does not exceed the weight capacity W of the display case. The goal is to maximize the total value of the selected objects. Given the values and weights of the objects along with the weight capacity of the display case, compute the maximum total value of objects that can be selected. # Input The input consists of 1 + N lines. On the first line, two integers N and W (1 ≤ N ≤ 100, 1 ≤ W ≤ 1000) are written with a space as a delimiter. N is the number of objects, and W is the weight capacity of the display case. Each of the following N lines contains two integers V and M (1 ≤ V ≤ 1000, 1 ≤ M ≤ 1000), where V is the value of the object and M is the weight of the object. # Output Output the maximum total value of the objects that can be selected for the display case. # Example Input ``` 4 50 60 10 100 20 120 30 80 25 ``` Output ``` 220 ``` Explanation: In the example above, the museum can select objects with IDs 2 (value 100, weight 20) and 3 (value 120, weight 30), which gives a total value of 220 and a total weight of 50, matching the weight capacity.","solution":"def max_total_value(N, W, values_weights): Calculate the maximum total value of objects that can be selected without exceeding the weight capacity. Args: N: int - number of objects W: int - weight capacity values_weights: List[Tuple[int, int]] - list of (value, weight) pairs Returns: int - maximum total value dp = [0] * (W + 1) for value, weight in values_weights: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W] def parse_input(input_str): lines = input_str.strip().split(\'n\') N, W = map(int, lines[0].split()) values_weights = [tuple(map(int, line.split())) for line in lines[1:]] return N, W, values_weights"},{"question":"For this coding assessment, your task is to implement an interpreter for a minimalist assembly-like language. The language includes three types of instructions: storing a value in a register, arithmetic operations, and jumps based on conditions. Here\'s the detailed explanation: Each input line is an instruction composed of a label and a statement: - The label is a non-negative integer. - The statement follows one of these patterns: - `MOV X Y`: Move the value Y into register X. - `ADD X Y`: Add the value Y to the value in register X. - `SUB X Y`: Subtract the value Y from the value in register X. - `MUL X Y`: Multiply the value in register X by Y. - `JMP L`: Jump to the instruction labeled L. - `CMP X Y`: Compare the values in registers X and Y. Sets a flag if they are equal. - `JEQ L`: Jump to the instruction labeled L if the comparison flag is set. - `PRN X`: Print the value in register X. - `END`: End the program. The initial value in each register is zero. The program begins execution at the instruction with the smallest label and continues to the next smallest label until an `END` instruction is encountered or a jump instruction dictates otherwise. # Instructions: - Register names are single uppercase characters (A-Z). - Values (Y) can be either integers or registers. - The integer range is from -2^{31} to 2^{31}-1. # Input: - Input consists of multiple lines of instructions. - Each pair of adjacent tokens in the input is separated by a single space. # Output: - Output the results of `PRN` instructions. Example: **Input:** ``` 10 MOV A 5 20 MOV B 10 30 ADD A B 40 PRN A 50 CMP A B 60 JEQ 80 70 JMP 90 80 MOV B 20 90 END ``` **Output:** ``` 15 ``` # Explanation: 1. `10 MOV A 5` sets register `A` to `5`. 2. `20 MOV B 10` sets register `B` to `10`. 3. `30 ADD A B` adds the value in register `B` (`10`) to `A` (`5`), resulting in `A` being `15`. 4. `40 PRN A` prints the value in register `A`, which is `15`. 5. `50 CMP A B` compares the values of `A` (`15`) and `B` (`10`), the flag is not set because they are not equal. 6. `60 JEQ 80` would jump to label `80` if the flag was set, but it is not, so the instruction is ignored. 7. `70 JMP 90` jumps to label `90`. 8. `90 END` ends the program. Please note that no output will be produced for any `MOV`, `ADD`, `SUB`, `MUL`, `JMP`, `CMP`, or `END` instructions. Only `PRN` instructions produce output.","solution":"def assembly_interpreter(instructions): registers = {chr(r): 0 for r in range(ord(\'A\'), ord(\'Z\') + 1)} flags = {\'eq\': False} labels = {} program_counter = 0 output = [] # Parse and prepare the instructions parsed_instructions = {} for instruction in instructions: parts = instruction.split() label = int(parts[0]) labels[label] = program_counter parsed_instructions[label] = parts[1:] program_counter += 1 # Sort the instructions by labels instruction_labels = sorted(parsed_instructions.keys()) def get_value(x): if x.isalpha(): return registers[x] else: return int(x) program_counter = 0 while program_counter < len(instruction_labels): current_label = instruction_labels[program_counter] instruction = parsed_instructions[current_label] cmd = instruction[0] if cmd == \'MOV\': registers[instruction[1]] = get_value(instruction[2]) elif cmd == \'ADD\': registers[instruction[1]] += get_value(instruction[2]) elif cmd == \'SUB\': registers[instruction[1]] -= get_value(instruction[2]) elif cmd == \'MUL\': registers[instruction[1]] *= get_value(instruction[2]) elif cmd == \'JMP\': program_counter = instruction_labels.index(int(instruction[1])) continue elif cmd == \'CMP\': flags[\'eq\'] = (registers[instruction[1]] == registers[instruction[2]]) elif cmd == \'JEQ\': if flags[\'eq\']: program_counter = instruction_labels.index(int(instruction[1])) continue elif cmd == \'PRN\': output.append(str(registers[instruction[1]])) elif cmd == \'END\': break program_counter += 1 return \\"n\\".join(output) # Example usage: instructions = [ \\"10 MOV A 5\\", \\"20 MOV B 10\\", \\"30 ADD A B\\", \\"40 PRN A\\", \\"50 CMP A B\\", \\"60 JEQ 80\\", \\"70 JMP 90\\", \\"80 MOV B 20\\", \\"90 END\\" ] print(assembly_interpreter(instructions))"},{"question":"Linda loves collecting stamps and wants to complete her collection. She has a total of n different stamps, each identified by a unique integer from 1 to n. Each stamp needs to be stored in an album, but Linda has a unique way of arranging them. She wants to arrange the stamps in such a way that the sum of the absolute differences between the indices of consecutive stamps is minimized. Formally, given an array P which represents the permutation of stamps, the goal is to minimize the value of the following expression: |P[1] - P[2]| + |P[2] - P[3]| + ... + |P[n-1] - P[n]|. Your task is to determine the minimum possible value of this expression when stamps are arranged optimally in the album. -----Input----- The first line contains an integer n (2 ≤ n ≤ 1000), the number of different stamps. -----Output----- Output a single integer, the minimum possible sum of absolute differences of indices of consecutive stamps when they are arranged optimally. -----Examples----- Input 4 Output 4 Input 5 Output 6 -----Note----- For the first case, the permutation [2, 1, 3, 4] gives the minimum sum of absolute differences: |2-1| + |1-3| + |3-4| = 1 + 2 + 1 = 4. For the second case, the permutation [2, 1, 3, 5, 4] gives the minimum sum of absolute differences: |2-1| + |1-3| + |3-5| + |5-4| = 1 + 2 + 2 + 1 = 6.","solution":"def min_sum_of_abs_differences(n): Returns the minimum possible sum of absolute differences of indices of consecutive stamps when they are arranged optimally. if n % 2 == 0: return n else: return n + 1"},{"question":"There are N robots on a grid. Each robot can move in four directions: up, down, left, or right. The grid has specific cells highlighted as charging stations where a robot can recharge its battery. Each robot starts with a certain amount of battery charge and consumes the charge progressively as it moves. If a robot runs out of battery, it stops moving. The challenge is to determine the number of robots that can reach any charging station with the available battery they have. The grid is represented by an MxM matrix, where each cell can be either empty, occupied by a robot, or a charging station. Input The first line contains two integers M (1 ≤ M ≤ 1000) and N (1 ≤ N ≤ 500), where M is the size of the grid, and N is the number of robots. The next M lines contain descriptions of the grid, where each character can be: - \'.\' denoting an empty cell - \'R\' denoting a cell with a robot - \'C\' denoting a cell with a charging station The last line contains N integers, where the i-th integer indicates the initial battery charge of the i-th robot. It is guaranteed that the initial battery charge is non-negative and at most 1000. Output Output one integer, the number of robots that can reach any charging station with their available battery. Examples Input 5 3 ..... .R... ..C.. ..... ..... 2 5 1 Output 1 Input 4 2 RC.. .RC. .... ..C. 3 2 Output 2","solution":"from collections import deque def number_of_robots_that_can_reach_charging_station(M, N, grid, batteries): def bfs(start, battery): q = deque([(start, battery)]) visited = set([start]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while q: (x, y), b = q.popleft() if grid[x][y] == \'C\': return True if b > 0: for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < M and (nx, ny) not in visited: visited.add((nx, ny)) q.append(((nx, ny), b - 1)) return False start_positions = [] for i in range(M): for j in range(M): if grid[i][j] == \'R\': start_positions.append((i, j)) reachable_robots = 0 for start, battery in zip(start_positions, batteries): if bfs(start, battery): reachable_robots += 1 return reachable_robots"},{"question":"Rina loves solving puzzles, and she recently came across a challenge involving sequences of numbers. The task is to find out the longest subsequence of an array where the sum of the subsequential elements is equal to a target value X. If there are multiple subsequences with the same length, return the one that appears first in the array. For example, given the array `A` of size `N`, and the target sum `X`, write a function longestSubsequenceWithSum that returns the longest subsequence that sums up to `X`. Example 1: Input: N = 8 X = 15 A[] = {1, 2, 3, 4, 5, 6, 7, 8} Output: [1, 2, 3, 4, 5] Explanation: The longest subsequence with sum 15 is [1, 2, 3, 4, 5]. Example 2: Input: N = 10 X = 10 A[] = {2, 2, 2, 2, 2, 2, 2, 2, 2, 2} Output: [2, 2, 2, 2, 2] Explanation: The longest subsequence with sum 10 is [2, 2, 2, 2, 2]. Example 3: Input: N = 5 X = 6 A[] = {1, 2, 3, 1, 2} Output: [1, 2, 3] Explanation: The longest subsequence with sum 6 is [1, 2, 3]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestSubsequenceWithSum() which takes the array `A[]`, its size `N`, and the target sum `X` as inputs and returns the longest subsequence as a list of its elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^4 1 ≤ X ≤ 10^9","solution":"def longestSubsequenceWithSum(N, X, A): Returns the longest subsequence where the sum of the subsequence is equal to X. max_length = 0 current_sum = 0 start_index = 0 sum_dict = {0: -1} result = [] for i in range(N): current_sum += A[i] if current_sum - X in sum_dict: prev_index = sum_dict[current_sum - X] length = i - prev_index if length > max_length: max_length = length result = A[prev_index + 1: i + 1] if current_sum not in sum_dict: sum_dict[current_sum] = i return result"},{"question":"A magician has a stack of n coins, each coin having an integer value. After each performance, he dislikes having coins of the same value next to each other in the stack. Hence, he decides to organize his stack such that no two adjacent coins have the same value. The magician follows a particular algorithm for organizing his coins: 1. He always begins organizing his stack from the topmost coin. 2. For each coin, he moves it to the first position in the stack where it does not create a pair of adjacent coins with the same value. 3. If a coin cannot be moved without creating such a pair, he keeps it in its original position. Given the initial arrangement of coins, you need to help the magician by determining the resulting order of the coins after following the algorithm. -----Input----- The first line contains one integer t (1 le t le 10^3) — the number of test cases. Then t test cases follow. The first line of each test case consists of one positive integer n (1 le n le 10^4) — the number of coins in the stack. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the values of the coins. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print the resulting order of the coins in a single line. -----Examples----- Input 2 5 1 2 2 1 3 6 4 4 4 3 3 2 Output 1 2 1 2 3 4 3 4 3 4 2 -----Note----- In the first example, coins are re-ordered to avoid consecutive duplicates as follows: - 1 (initial) - 2 1 - 2 1 2 (second \'2\' placed next to first) - 1 2 1 2 - 1 2 1 2 3 (and 3 goes at the end, no consecutive duplicates) In the second example, the coins re-order without adjacent same values: - 4 - 3 4 - 4 3 4 - 3 4 3 4 (4\'s alternate places) - 3 4 3 4 2 (2 remains)","solution":"def organize_coins(t, cases): Organize the coins such that no two adjacent coins have the same value. results = [] for case in cases: n, coins = case if n == 1: results.append(coins) continue organized = [coins[0]] for i in range(1, n): if organized[-1] != coins[i]: organized.append(coins[i]) else: # Find the next position where this coin can be placed placed = False for j in range(i + 1, n): if coins[i] != coins[j]: coins[i], coins[j] = coins[j], coins[i] placed = True break if not placed: organized.append(coins[i]) else: organized.append(coins[i]) results.append(organized) return results # Function to format the output as required def format_output(results): output = [] for result in results: output.append(\' \'.join(map(str, result))) return \'n\'.join(output) # Read data def read_input(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) cases = [] index = 1 for _ in range(t): n = int(data[index]) coins = list(map(int, data[index + 1: index + 1 + n])) cases.append((n, coins)) index += 1 + n return t, cases"},{"question":"The government of a small country wants to compute the cumulative tax revenue over several years for planning purposes. They publish yearly data in a list, where each element represents the tax revenue collected in that specific year. Given the list of yearly tax revenues, you need to find out the sum of tax revenues for a given range of years repeatedly. You are provided with Q queries, and each query consists of two integers, start and end, representing the range of years for which you need to calculate the total tax revenue, inclusive of both start and end years. The years are given such that the first year is represented by index 1 in the list, the second year by index 2, and so forth. Input: - The first line contains an integer N, representing the number of years. - The second line contains N integers, representing the tax revenues for each year in sequence. - The third line contains an integer Q, representing the number of queries. - The next Q lines each contain two integers, start and end, representing the range of years for which the total tax revenue is to be calculated. Output: For each query, output a single integer, the sum of tax revenues from the year \'start\' to the year \'end\' inclusive. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Tax Revenue for any year ≤ 10^9 - 1 ≤ Q ≤ 10^5 - 1 ≤ start ≤ end ≤ N Example Input: 5 10 20 30 40 50 3 1 3 2 5 1 5 Example Output: 60 140 150 Explanation: The given tax revenues are [10, 20, 30, 40, 50]. For the first query range (1,3), the sum is 10 + 20 + 30 = 60. For the second query range (2,5), the sum is 20 + 30 + 40 + 50 = 140. For the third query range (1,5), the sum is 10 + 20 + 30 + 40 + 50 = 150.","solution":"def cumulative_tax_revenue(N, tax_revenues, Q, queries): Calculates the cumulative tax revenue for given ranges of years. Parameters: N: int - the number of years tax_revenues: list of int - the tax revenues for each year Q: int - the number of queries queries: list of tuples - each tuple contains two integers, start and end Returns: list of int - the sum of tax revenues for each query range # Precompute Prefix sums for efficient range queries. prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + tax_revenues[i - 1] results = [] for (start, end) in queries: # Convert start and end to zero-based index and calculate sum sum_revenue = prefix_sums[end] - prefix_sums[start - 1] results.append(sum_revenue) return results"},{"question":"You are given a set of rectangles in a 2D plane. Each rectangle is defined by its bottom-left corner ((x_1, y_1)) and top-right corner ((x_2, y_2)). Your task is to determine the maximum area of overlap between any two rectangles from this set. -----Input----- The first line contains an integer ( n ) (( 2 le n le 50 )) — the number of rectangles. Each of the next ( n ) lines contains four integers ( x_1, y_1, x_2, y_2 ) (( -10^4 le x_1 < x_2 le 10^4 ) and ( -10^4 le y_1 < y_2 le 10^4 )) — the coordinates of the bottom-left and top-right corners of a rectangle. -----Output----- Print a single integer denoting the maximum area of overlap between any two rectangles. If there is no overlap between any two rectangles, print 0. -----Examples----- Input 3 1 1 4 4 2 2 5 5 3 3 6 6 Output 1 Input 2 0 0 2 2 3 3 5 5 Output 0 Input 4 0 0 2 2 1 1 3 3 2 2 4 4 3 3 5 5 Output 1 -----Note----- In the first example, the maximum overlap occurs between the first and second rectangles, or the second and third rectangles, both having an area of 1. In the second example, there is no overlap between the two rectangles. In the third example, the rectangles overlap as follows: - The first and second rectangles overlap with an area of 1. - The second and third rectangles overlap with an area of 1. - The third and fourth rectangles overlap with an area of 1.","solution":"def max_overlap_area(rectangles): This function takes a list of rectangles, where each rectangle is represented by a tuple (x1, y1, x2, y2), and returns the maximum area of overlap between any two rectangles. def overlap_area(r1, r2): x_overlap = max(0, min(r1[2], r2[2]) - max(r1[0], r2[0])) y_overlap = max(0, min(r1[3], r2[3]) - max(r1[1], r2[1])) return x_overlap * y_overlap n = len(rectangles) max_area = 0 for i in range(n): for j in range(i + 1, n): max_area = max(max_area, overlap_area(rectangles[i], rectangles[j])) return max_area"},{"question":"A Thermostat company wants to develop a new feature that automatically adjusts the heating system based on a temperature list recorded over a day. They aim to find the longest contiguous subarray of strictly increasing temperatures to enhance comfort and efficiency. -----Input----- The first line contains an integer n, the number of temperature readings recorded during the day. The second line contains n space-separated integers, t_1, t_2, ldots, t_n, representing the temperature readings. -----Output----- Output the length of the longest contiguous subarray of strictly increasing temperatures. -----Limits----- - 1 leq n leq 100000 - -1000 leq t_i leq 1000 -----Examples----- Sample Input: 10 1 2 2 3 4 5 1 2 3 4 Sample Output: 4 Sample Input: 5 5 4 3 2 1 Sample Output: 1","solution":"def longest_increasing_subarray_length(n, temperatures): if n == 0: return 0 longest = 1 current_length = 1 for i in range(1, n): if temperatures[i] > temperatures[i-1]: current_length += 1 longest = max(longest, current_length) else: current_length = 1 return longest"},{"question":"Tenten has a special collection of scrolls that are stored in a long bookshelf. Each scroll is labeled with a unique integer from 1 to n. One day, to reorganize her collection, Tenten decided to follow a specific sequence of actions to insert and remove the scrolls from the bookshelf. She recorded these actions in a list of events. An event can be one of the following types: - `+ i` means that scroll i is inserted to the right end of the bookshelf. - `- i` means that scroll i is removed from the bookshelf. She noticed that not every sequence of events leads to a valid organization of scrolls on the bookshelf. Your task is to determine whether the list of events is consistent with a valid behavior of the bookshelf. If the list is consistent, print \\"YES\\"; otherwise, print \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 50,000) — the number of scrolls. The next 2n lines contain the events; each event is either `+ i` for inserting scroll i or `- i` for removing scroll i (1 ≤ i ≤ n). Output If the list is consistent, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 4 + 1 + 2 - 2 + 3 - 1 + 4 - 3 - 4 Output YES Input 3 + 1 + 2 - 3 + 3 - 2 - 1 Output NO Note In the first example, Tenten inserts scrolls 1 and 2, then removes scroll 2. She inserts scroll 3, then removes scroll 1. This sequence of operations is repeated and the list is consistent. In the second example, Tenten tries to remove scroll 3 before it is inserted, leading to an inconsistency.","solution":"def is_valid_sequence(n, events): scrolls = set() for event in events: action, i = event.split() i = int(i) if action == \'+\': scrolls.add(i) elif action == \'-\': if i not in scrolls: return \\"NO\\" scrolls.remove(i) return \\"YES\\""},{"question":"You are given an array A of integers of length N. Your task is to find the number of \\"special pairs\\" in the array. A pair (i, j) is considered special if and only if i < j and A[i] * A[j] is a perfect square. (Note: A perfect square is an integer that is the square of an integer. For example, 1, 4, 9, 16, and 25 are perfect squares.) SAMPLE INPUT 2 3 1 4 2 4 1 3 9 3 SAMPLE OUTPUT 1 2 Explanation Consider the 1st testcase: The array is [1, 4, 2] The pairs are (A[0], A[1]), (A[0], A[2]), and (A[1], A[2]) 1 * 4 = 4 which is a perfect square Therefore, there is 1 special pair. Consider the 2nd testcase: The array is [1, 3, 9, 3] The pairs are (A[0], A[1]), (A[0], A[2]), (A[0], A[3]), (A[1], A[2]), (A[1], A[3]), (A[2], A[3]) 1 * 3 = 3 which is not a perfect square 1 * 9 = 9 which is a perfect square 1 * 3 = 3 which is not a perfect square 3 * 9 = 27 which is not a perfect square 3 * 3 = 9 which is a perfect square 9 * 3 = 27 which is not a perfect square Therefore, there are 2 special pairs.","solution":"import math def is_perfect_square(x): s = int(math.sqrt(x)) return s * s == x def count_special_pairs(A): n = len(A) special_pairs_count = 0 for i in range(n): for j in range(i + 1, n): if is_perfect_square(A[i] * A[j]): special_pairs_count += 1 return special_pairs_count"},{"question":"You are given a list of integers. You need to perform k number of operations on the list where each operation consists of reversing the order of a consecutive segment of the list. Your goal is to maximize the sum of the elements that occupy the first and last positions in the list after all k operations. -----Input----- The first line of the input contains two integers n (2 leq n leq 100,000) and k (1 leq k leq 100,000) — the number of integers in the list and the number of operations to perform, respectively. The next line contains n space-separated integers a_i (-10^9 le a_i le 10^9), where a_i is the value of the i-th integer in the list. Each of the following k lines contains two integers l and r (1 le l le r le n), indicating that you should reverse the segment of the list from the l-th to the r-th position (1-based index). -----Output----- Print a single integer — the maximum possible sum of the elements that occupy the first and last positions in the list after all k operations. -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 5 1 4 Output 10 Input 4 2 -1 -2 -3 -4 1 2 3 4 Output -2 -----Note----- In the first example, a possible way of performing the operations to maximize the sum is: 1. Reverse the segment from 1 to 3, resulting in the list [3, 2, 1, 4, 5]. 2. Reverse the segment from 2 to 5, resulting in the list [3, 5, 4, 1, 2]. 3. Reverse the segment from 1 to 4, resulting in the list [1, 4, 5, 3, 2]. The sum of the first and last elements (1 and 2) is 3, which is not the maximum. The correct sequence of operations yields the list [5, 4, 3, 2, 1], resulting in a sum of 6 (the maximum possible). In the second example, reversing the segments as per the input maintains the relative ordering making the sums minimal.","solution":"def max_sum_after_reversals(n, k, a, operations): Returns the maximum possible sum of the elements at the first and last positions of the list after k reverse operations. :param n: int, the number of elements in the list :param k: int, the number of reverse operations to perform :param a: List[int], elements of the list :param operations: List[Tuple[int, int]], the reverse operations as tuples (l, r) :return: int, maximum possible sum of the first and last elements # To optimize finding the maximum sum, look for the maximum and minimum values in the list max_elem = max(a) min_elem = min(a) # Best possible result will be achieved if: # max_elem is at the first position and min_elem is at the last position or vice versa. # Thus, the maximum possible sum is max(max_elem + min_elem, min_elem + max_elem) return max_elem + min_elem"},{"question":"You have been asked to develop a new system for translating text messages. The translation system works by substituting specific words in the original text with new words from a given dictionary. Your task is to write a function that applies the translation dictionary to an input message. The translation dictionary is provided as a list of tuples, where each tuple contains a word and its corresponding translation. The function should replace all occurrences of each word in the input message with its translation according to the dictionary. If a word in the message does not appear in the dictionary, it should remain unchanged. # Input Format - The first line contains a string, the input message. - The second line contains an integer, n, the number of translation pairs. - The next n lines each contain a word and its corresponding translation, separated by a space. # Output Format - Print the translated message as a single string. # Constraints - The input message will only contain lowercase English letters and spaces. - The translation words will only contain lowercase English letters. - Each word in the message is separated by a single space. - 1 ≤ length of input message ≤ 10^4 - 1 ≤ n ≤ 10^3 - 1 ≤ length of each word ≤ 20 # Examples **Example 1:** Input ``` hello world 2 hello hi world globe ``` Output ``` hi globe ``` **Example 2:** Input ``` good morning everyone 3 good great morning dawn everyone all ``` Output ``` great dawn all ``` # Note In the first example, \\"hello\\" is replaced with \\"hi\\" and \\"world\\" is replaced with \\"globe\\". In the second example, \\"good\\" is replaced with \\"great\\", \\"morning\\" is replaced with \\"dawn\\", and \\"everyone\\" is replaced with \\"all\\".","solution":"def translate_message(message, n, translation_pairs): Translates the input message using the given translation pairs. Parameters: message (str): The input message to be translated. n (int): The number of translation pairs. translation_pairs (list of tuples): Each tuple contains a word and its corresponding translation. Returns: str: The translated message. translation_dict = dict(translation_pairs) words = message.split() translated_words = [translation_dict.get(word, word) for word in words] return \' \'.join(translated_words)"},{"question":"Parsa and Ali have a large matrix of size n times m. Each cell of this matrix contains a positive integer. They want to achieve the highest score possible by moving from the top-left corner of the matrix to the bottom-right corner, following these rules: 1. They can only move right or down at each step. 2. They want to maximize the sum of the elements along their path. Your task is to find the maximum possible score they can achieve when moving from the top-left corner to the bottom-right corner of the matrix. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 le n, m le 100) — the dimensions of the matrix. The next n lines contain m integers each, where the j-th integer in the i-th line is a_{ij} (1 le a_{ij} le 1000), the value in the (i, j) cell of the matrix. -----Output----- For each test case, print a single integer — the maximum possible score they can achieve. -----Examples----- Input 2 3 3 1 2 3 4 5 6 7 8 9 4 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Output 29 7 -----Note----- In the first test case, they can follow the path 1 rightarrow 4 rightarrow 7 rightarrow 8 rightarrow 9 to achieve the score 1 + 4 + 7 + 8 + 9 = 29. In the second test case, since all the elements are 1, the maximum score they can achieve is 7 by following any path from the top-left to the bottom-right.","solution":"def max_path_sum(matrix): n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = matrix[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[n-1][m-1] def solve(test_cases): results = [] for case in test_cases: n, m, matrix = case results.append(max_path_sum(matrix)) return results def parse_input(input_lines): test_cases = [] index = 0 t = int(input_lines[index]) index += 1 for _ in range(t): n, m = map(int, input_lines[index].split()) index += 1 matrix = [] for _ in range(n): matrix.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append((n, m, matrix)) return test_cases def main(): import sys input_lines = sys.stdin.read().strip().split(\'n\') test_cases = parse_input(input_lines) results = solve(test_cases) for result in results: print(result)"},{"question":"A company organizes a coding competition where each participant has to solve several problems. Each problem has a distinct score associated with it, and participants are ranked based on the total score they achieve. If two or more participants have the same total score, they are ranked by their IDs in ascending order. You are given the ID and score of each participant for each problem. You need to compute the rank list based on the given criteria. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of participants and the number of problems, respectively. The next m lines each contain n space-separated integers. The j-th integer in the i-th line represents the score of the j-th participant in the i-th problem. Output Output n lines, where each line contains the ID of the participant (1-indexed) and their total score in decreasing order of the total score. If two participants have the same total score, they should be listed by their IDs in ascending order. Examples Input 3 4 5 3 4 4 2 6 3 5 1 2 1 7 Output 3 18 1 14 2 11 Input 2 3 3 3 4 4 5 5 Output 1 12 2 12 Note In the first sample, participant 3 has the highest total score of 18, followed by participant 1 with 14, and participant 2 with 11. In the second sample, both participants have the same total score of 12, but participant 1 has a smaller ID, so they are listed first.","solution":"def rank_participants(n, m, scores): total_scores = {i+1: 0 for i in range(n)} # Calculate the total score for each participant for problem_scores in scores: for i, score in enumerate(problem_scores): total_scores[i+1] += score # Create a list of participants with their total scores ranked_list = [(participant, total_score) for participant, total_score in total_scores.items()] # Sort by total score in descending order, and by ID in ascending order in case of ties ranked_list.sort(key=lambda x: (-x[1], x[0])) return ranked_list # Example usage: n = 3 m = 4 scores = [ [5, 3, 4], [4, 2, 6], [3, 5, 1], [2, 1, 7] ] result = rank_participants(n, m, scores) print(result) # Should output: [(3, 18), (1, 14), (2, 11)]"},{"question":"Implement a function `rotate_matrix` that takes a 2D list (matrix) as input and rotates it 90 degrees clockwise. The function should return the rotated matrix. Example 1: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Example 2: Input: matrix = [ [1, 2], [3, 4] ] Output: [ [3, 1], [4, 2] ] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `rotate_matrix()` which takes a 2D list (matrix) as input and returns the matrix rotated 90 degrees clockwise. Expected Time Complexity: O(n^2). Expected Auxiliary Space: O(1) (excluding the space required for the input and output matrix). Constraints: 1 <= len(matrix), len(matrix[0]) <= 50","solution":"def rotate_matrix(matrix): Rotate the matrix 90 degrees clockwise. if not matrix: return matrix n = len(matrix) # Create a new matrix with transposed dimensions rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"Develop a Library System You are tasked with developing a small library system to manage the borrowing and returning of books. The system should allow tracking currently available books and the history of borrowed books for each member. # Input Format 1. The first line contains two integers, `B` (the number of books in the library) and `M` (the number of members in the library). 2. The second line contains `B` integers, representing the IDs of the books. 3. The third line contains `M` integers, representing the IDs of the members. 4. The fourth line contains a single integer `Q`, the number of operations to be processed. 5. The next `Q` lines describe the operations to be performed. The operations can be of the following types: - `BORROW x y` - Member `x` borrows book `y`. - `RETURN x y` - Member `x` returns book `y`. - `AVAILABLE` - Lists the currently available books in the library. - `HISTORY x` - Lists the history of all books borrowed by member `x`. # Output Format For each `AVAILABLE` operation, output a single line with the currently available book IDs sorted in ascending order, separated by a space. For each `HISTORY x` operation, output a single line with the book IDs borrowed by member `x` in the order they were borrowed, separated by a space. If member `x` has no history, output `None`. # Constraints 1 ≤ B, M ≤ 1000 1 ≤ Q ≤ 1000 1 ≤ x ≤ M 1 ≤ y ≤ B # Sample Input ``` 5 3 1 2 3 4 5 101 102 103 7 BORROW 101 1 BORROW 102 2 AVAILABLE HISTORY 101 RETURN 101 1 AVAILABLE HISTORY 103 ``` # Sample Output ``` 3 4 5 1 1 3 4 5 None ``` # Explanation Initially, 5 books (IDs: 1, 2, 3, 4, 5) and 3 members (IDs: 101, 102, 103) are in the system. Seven operations are performed sequentially. 1. Member 101 borrows book 1. 2. Member 102 borrows book 2. 3. `AVAILABLE` operation lists available books: 3, 4, and 5 (books 1 and 2 are borrowed). 4. `HISTORY 101` operation lists the history of borrowed books for member 101 which is: 1. 5. Member 101 returns book 1. 6. `AVAILABLE` operation lists available books: 1, 3, 4, and 5 (book 2 is still borrowed). 7. `HISTORY 103` operation shows that member 103 has not borrowed any books so it returns `None`. This problem assesses the candidate\'s ability to handle dynamic operations on collections and to effectively manage the state of a system with multiple entities.","solution":"class LibrarySystem: def __init__(self, book_ids, member_ids): self.available_books = set(book_ids) self.member_history = {member_id: [] for member_id in member_ids} def borrow_book(self, member_id, book_id): if book_id in self.available_books: self.available_books.remove(book_id) self.member_history[member_id].append(book_id) def return_book(self, member_id, book_id): if book_id not in self.available_books: # Checking if the book can be returned self.available_books.add(book_id) def get_available_books(self): return sorted(self.available_books) def get_history(self, member_id): if self.member_history[member_id]: return self.member_history[member_id] return None def library_system(input_data): input_lines = input_data.split(\\"n\\") # Parse initial data B, M = map(int, input_lines[0].split()) book_ids = list(map(int, input_lines[1].split())) member_ids = list(map(int, input_lines[2].split())) Q = int(input_lines[3]) # Initialize library system library = LibrarySystem(book_ids, member_ids) results = [] # Process each operation for i in range(4, 4 + Q): operation = input_lines[i].split() if operation[0] == \\"BORROW\\": member_id, book_id = int(operation[1]), int(operation[2]) library.borrow_book(member_id, book_id) elif operation[0] == \\"RETURN\\": member_id, book_id = int(operation[1]), int(operation[2]) library.return_book(member_id, book_id) elif operation[0] == \\"AVAILABLE\\": available_books = library.get_available_books() results.append(\\" \\".join(map(str, available_books))) elif operation[0] == \\"HISTORY\\": member_id = int(operation[1]) history = library.get_history(member_id) if history: results.append(\\" \\".join(map(str, history))) else: results.append(\\"None\\") return \\"n\\".join(results)"},{"question":"# Task: Given a list of integers, create a function that returns a dictionary where the keys are the elements from the list, and the values are the number of times each element appears in the list. Example: ```python Input: count_occurrences([1, 2, 2, 3, 3, 3, 4]) Output: {1: 1, 2: 2, 3: 3, 4: 1} ``` **Note:** You can assume that the list contains only non-negative integers. ___ Good luck!","solution":"def count_occurrences(lst): Given a list of integers, returns a dictionary where the keys are the elements from the list, and the values are the number of times each element appears in the list. Args: lst (list): List of integers. Returns: dict: Dictionary with elements as keys and their counts as values. occurrence_dict = {} for num in lst: if num in occurrence_dict: occurrence_dict[num] += 1 else: occurrence_dict[num] = 1 return occurrence_dict"},{"question":"You are given a NxN grid and a set of non-overlapping rectangular regions defined in the grid. Each region is defined by its top-left and bottom-right coordinates. Sunny wants to build vertical and horizontal roads through these regions such that all regions are connected by at least one direct road or by roads through adjacent regions. Find the minimum number of roads needed to connect all regions. Example 1: Input: N = 5 regions = [ [(1, 1), (2, 2)], [(2, 4), (4, 5)], [(4, 1), (5, 3)] ] Output: 2 Example 2: Input: N = 4 regions = [ [(1, 1), (2, 2)], [(3, 3), (4, 4)] ] Output: 1 Explaination: In Example 1, one possible set of roads to connect all regions is: - Road from (2, 3) to (2, 4) - Road from (4, 3) to (4, 4) This is just one of many optimal solutions connecting all regions with only 2 roads. Your Task: You do not need to read input or print anything. Your task is to complete the function min_roads() which takes the value N and the list of regions as input parameters and returns the minimum number of roads needed. Expected Time Complexity: O(R), where R is the number of regions. Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^3 1 ≤ number of regions ≤ 100 1 ≤ region\'s top-left and bottom-right coordinates ≤ N","solution":"def min_roads(N, regions): Returns the minimum number of roads needed to connect all regions. from collections import defaultdict def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def is_adjacent(region1, region2): # Check if two regions are adjacent both vertically and horizontally if region1[1][0] < region2[0][0] or region2[1][0] < region1[0][0]: return False if region1[1][1] < region2[0][1] or region2[1][1] < region1[0][1]: return False return True # Initialize Union-Find structure parent = list(range(len(regions))) rank = [0] * len(regions) # Union adjacent regions for i in range(len(regions)): for j in range(i + 1, len(regions)): if is_adjacent(regions[i], regions[j]): union(parent, rank, i, j) # Count the number of disconnected sets disconnected_sets = len(set(find(parent, i) for i in range(len(regions)))) # Minimum number of roads needed is one less the number of disconnected sets return max(0, disconnected_sets - 1)"},{"question":"Write a function to determine if a given string is a valid identifier. A valid identifier is defined by the following rules: 1. It must start with a letter (a-z, A-Z) or an underscore (_). 2. Subsequent characters can be letters, digits (0-9), or underscores. 3. Identifiers cannot be reserved keywords in Python. You are provided with a list of reserved keywords in Python for reference: ``` keywords = [\\"False\\", \\"None\\", \\"True\\", \\"and\\", \\"as\\", \\"assert\\", \\"async\\", \\"await\\", \\"break\\", \\"class\\", \\"continue\\", \\"def\\", \\"del\\", \\"elif\\", \\"else\\", \\"except\\", \\"finally\\", \\"for\\", \\"from\\", \\"global\\", \\"if\\", \\"import\\", \\"in\\", \\"is\\", \\"lambda\\", \\"nonlocal\\", \\"not\\", \\"or\\", \\"pass\\", \\"raise\\", \\"return\\", \\"try\\", \\"while\\", \\"with\\", \\"yield\\"] ``` # Example: ``` Input: \\"test_variable\\" Output: True Input: \\"2nd_variable\\" Output: False Input: \\"def\\" Output: False ``` # Your Task: You don\'t need to read or print anything. Your task is to complete the function `isValidIdentifier()` which takes a string `identifier` as an input parameter and returns `True` if it is a valid identifier; otherwise, it returns `False`. # Expected Time Complexity: O(n) # Expected Space Complexity: O(1) # Constraints: The length of the string identifier is between 1 and 100, inclusive.","solution":"def isValidIdentifier(identifier): Determines if a given string is a valid Python identifier. keywords = [\\"False\\", \\"None\\", \\"True\\", \\"and\\", \\"as\\", \\"assert\\", \\"async\\", \\"await\\", \\"break\\", \\"class\\", \\"continue\\", \\"def\\", \\"del\\", \\"elif\\", \\"else\\", \\"except\\", \\"finally\\", \\"for\\", \\"from\\", \\"global\\", \\"if\\", \\"import\\", \\"in\\", \\"is\\", \\"lambda\\", \\"nonlocal\\", \\"not\\", \\"or\\", \\"pass\\", \\"raise\\", \\"return\\", \\"try\\", \\"while\\", \\"with\\", \\"yield\\"] if not identifier.isidentifier() or identifier in keywords: return False return True"},{"question":"You and your team are developing a new online game. To keep track of the achievements of each player, you use a nested dictionary where the keys are the player names and the values are dictionaries storing the player\'s achievements. Each achievement has a name and a status indicating whether it is completed or not. For example: ```python players = { \\"Alice\\": {\\"First Win\\": True, \\"Sharpshooter\\": False}, \\"Bob\\": {\\"First Win\\": True, \\"Explorer\\": True, \\"Collector\\": False}, \\"Charlie\\": {\\"First Win\\": False} } ``` You need to write a function `count_completed_achievements` that takes this dictionary as input and returns another dictionary where the keys are the player names and the values are the count of achievements they have completed. The function should have the following signature: ```python def count_completed_achievements(players: dict) -> dict: ``` For the input example above, the function should return: ```python { \\"Alice\\": 1, \\"Bob\\": 2, \\"Charlie\\": 0 } ``` Write this function to help you keep track of how many achievements each player has completed. Ensure your solution is efficient and handles any potential edge cases, such as players with no achievements or players with all achievements completed.","solution":"def count_completed_achievements(players: dict) -> dict: Returns a dictionary where the keys are player names and the values are the count of completed achievements. :param players: dict, where keys are player names and values are dictionaries of achievements with their status. :return: dict, where keys are player names and values are counts of completed achievements. completed_counts = {} for player, achievements in players.items(): completed_counts[player] = sum(status for status in achievements.values()) return completed_counts"},{"question":"Implement a function that takes a string representing a mathematical expression with a single operation, either multiplication, or division, and returns the result of this operation applied to the two given numbers. Example: \\"The robot can lift 12 kilos and when given boosters it can lift 4 times more\\" returns 48 \\"The robot can stack 30 boxes but due to regulations it reduces the stack to half\\" returns 15 \\"times\\" and \\"half\\" are the only words describing operators. Note: - Both numbers are always positive integers. - The result will always be a positive integer.","solution":"def calculate_expression(description): Takes a string representing a mathematical expression with a single operation, either multiplication (\'times\') or division (\'half\'), and returns the result. words = description.split() if \'times\' in words: number1 = int(words[words.index(\\"lift\\")+1]) number2 = int(words[words.index(\\"times\\")-1]) return number1 * number2 elif \'half\' in words: number1 = int(words[words.index(\\"stack\\")+1]) return number1 // 2 else: raise ValueError(\\"Unsupported operation in description\\")"},{"question":"Write a function `countCharOccurrences` that takes two parameters: a string `text` and a character `charToCount`. The function should return the number of times `charToCount` occurs in `text`. The function should be case sensitive. Examples: ``` \\"banana\\", \'a\' --> 3 \\"Mississippi\\", \'s\' --> 4 \\"Hello World\\", \'o\' --> 2 \\"Happy Birthday!\\", \'a\' --> 2 ```","solution":"def countCharOccurrences(text, charToCount): Returns the number of times charToCount occurs in text. The function is case sensitive. Parameters: text (str): The string in which to count occurrences. charToCount (str): The character to count. Returns: int: The number of occurrences of charToCount in text. return text.count(charToCount)"},{"question":"Create a function that simulates the behavior of a circular buffer, also known as a ring buffer. A circular buffer is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end. The buffer should support the following operations: - `write(data)`: Attempts to write data to the buffer. If the buffer is full, it should overwrite the oldest data. - `read()`: Reads and removes the oldest data from the buffer. If the buffer is empty, it should return `None`. Your task is to implement this circular buffer with the specified operations. The buffer size will be provided during its initialization. # Input - The first input line will be an integer `n` (1 <= n <= 1000) which represents the size of the buffer. - Subsequent lines will be commands (`write` or `read`). - A `write` command will be in the format `write data`, where `data` is a string of 1 to 10 characters. - A `read` command will be just `read`. - The input will be terminated by the line `end`. # Output - For each `read` command, output the data. - If the buffer is empty and `read` is called, output `None`. # Example Input: ``` 3 write A write B write C read write D read read write E write F write G read read read end ``` Output: ``` A B C E F G ``` # Notes - The buffer should operate with a fixed size `n`. - When the buffer is full and new data is written, it should overwrite the oldest data in the buffer. Ensure that your implementation of the circular buffer handles reading and writing efficiently.","solution":"class CircularBuffer: def __init__(self, size): self.size = size self.buffer = [None] * size self.start = 0 self.end = 0 self.count = 0 def write(self, data): self.buffer[self.end] = data self.end = (self.end + 1) % self.size if self.count == self.size: self.start = (self.start + 1) % self.size # Overwrite the oldest data else: self.count += 1 def read(self): if self.count == 0: return None data = self.buffer[self.start] self.start = (self.start + 1) % self.size self.count -= 1 return data"},{"question":"You are given a 2D grid consisting of 1s and 0s. The grid represents a map of land (1) and water (0). An island is a group of connected 1s (connected vertically or horizontally). The grid is surrounded by water, and it is guaranteed that there will be at least one island. The goal is to determine the perimeter of the island. The perimeter is defined as the number of edges that are adjacent to the water (or the edges of the grid). Write a function that takes a 2D grid and returns the perimeter of the island. Example 1: Input: ``` [[0, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0]] ``` Output: 16 Explanation: The perimeter is the 16 edges that surround the island. Note: - The grid width and height are no more than 100. - There will be exactly one island.","solution":"def island_perimeter(grid): Returns the perimeter of the island in the given 2D grid. :param grid: List[List[int]] - 2D grid of integers (0 or 1) :return: int - perimeter of the island rows, cols = len(grid), len(grid[0]) perimeter = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Each land cell introduces 4 sides initially perimeter += 4 # Check top cell if r > 0 and grid[r - 1][c] == 1: perimeter -= 2 # Check left cell if c > 0 and grid[r][c - 1] == 1: perimeter -= 2 return perimeter"},{"question":"You have an 8x8 chessboard. A knight is placed on a specific starting position on the board, represented by its coordinates (x, y). The goal is to determine the minimum number of moves required for the knight to reach the target position (a, b) on the chessboard. If it is impossible for the knight to reach the target position, return -1. The knight moves in an \\"L\\" shape: it can move to a square that is either: - Two squares horizontally and one square vertically, or - Two squares vertically and one square horizontally. From any given position (x, y), the knight can move to one of the following positions if they are within the bounds of the board: - (x+2, y+1) - (x+2, y-1) - (x-2, y+1) - (x-2, y-1) - (x+1, y+2) - (x+1, y-2) - (x-1, y+2) - (x-1, y-2) Write an algorithm to find the minimum number of moves required for the knight to reach the target position. -----Input----- The input consists of a single line containing four integers x, y, a, b (0 ≤ x, y, a, b ≤ 7) representing the starting position (x, y) and the target position (a, b) respectively. -----Output----- Print the minimum number of moves required for the knight to reach the target position. If it is impossible, print -1. -----Examples----- Input 0 0 7 7 Output 6 Input 2 2 2 2 Output 0 Input 0 0 0 2 Output 2 -----Note----- In the first example, the knight can reach the target position in 6 moves. In the second example, the knight is already at the target position. In the third example, the knight can move from (0, 0) to (2, 1) and then to (0, 2) in 2 moves.","solution":"from collections import deque def min_knight_moves(x, y, a, b): Find the minimum number of moves required for a knight to reach the target position on an 8x8 chessboard starting from the given position. Args: x (int): Starting x-coordinate of the knight (0 ≤ x ≤ 7). y (int): Starting y-coordinate of the knight (0 ≤ y ≤ 7). a (int): Target x-coordinate (0 ≤ a ≤ 7). b (int): Target y-coordinate (0 ≤ b ≤ 7). Returns: int: Minimum number of moves or -1 if impossible. if x == a and y == b: return 0 directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] visited = [[False]*8 for _ in range(8)] queue = deque([(x, y, 0)]) visited[x][y] = True while queue: curr_x, curr_y, moves = queue.popleft() for dx, dy in directions: nx, ny = curr_x + dx, curr_y + dy if 0 <= nx < 8 and 0 <= ny < 8 and not visited[nx][ny]: if nx == a and ny == b: return moves + 1 queue.append((nx, ny, moves + 1)) visited[nx][ny] = True return -1"},{"question":"A company needs to distribute bonuses to its employees based on their performance. The performance of each employee is represented by an integer array where each element indicates the performance score of an employee. The company has decided that: 1. Each employee must receive at least one bonus. 2. Employees with a higher performance score than their immediate neighbors must receive more bonuses than those neighbors. You are required to determine the minimum number of bonuses that must be distributed according to the given rules. Input - The first line contains an integer n (1 ≤ n ≤ 100000) — the number of employees. - The second line contains n space-separated integers representing the performance scores of the employees. Output Print a single integer — the minimum number of bonuses needed. Example Input 4 1 2 2 3 Output 6 Explanation - Employees\' performance scores: [1, 2, 2, 3] - The minimum number of bonuses could be: [1, 2, 1, 2] Employees 1 and 2 get more bonuses because they have higher performance scores than their neighbors. The total number of bonuses is 6.","solution":"def minimum_bonuses(n, scores): Given the number of employees and their performance scores, determine the minimum bonuses that needs to be distributed such that the rules are met. if n == 1: return 1 bonuses = [1] * n # Scan from left to right for i in range(1, n): if scores[i] > scores[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Scan from right to left for i in range(n - 2, -1, -1): if scores[i] > scores[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses)"},{"question":"Games can be a fun way to engage beginners with programming. Create a simple game where the user inputs a guess of a random number generated by the computer. Input The first line contains a positive integer t (1 ≤ t ≤ 10^6) - the number of guesses the user can make. The second line contains two space-separated integers a and b (1 ≤ a ≤ b ≤ 10^6) - the range within which the computer will generate a random number. Output For each guess, return \\"Correct!\\" if the guess matches the random number generated by the computer, otherwise return \\"Try Again!\\". If the correct guess is made within the allowed number of tries, also output \\"Game Over!\\" and stop taking further inputs. Note: You are to simulate the random number generation for the purposes of this task, and assume the random number generated is always the middle value of the range. Examples Input 5 10 20 Output Try Again! Try Again! Correct! Game Over! Input 3 5 15 Output Try Again! Correct! Game Over!","solution":"def guessing_game(t, a, b, guesses): Implements the guessing game logic. :param t: int - number of guesses allowed :param a: int - start of the range :param b: int - end of the range :param guesses: list of int - user guesses :return: list of str - responses for each guess responses = [] target_number = (a + b) // 2 for guess in guesses: if guess == target_number: responses.append(\\"Correct!\\") responses.append(\\"Game Over!\\") break else: responses.append(\\"Try Again!\\") return responses"},{"question":"Sara and Jake are playing a number game. They are given an array of n integers. In each turn, a player chooses an integer in the array and removes 1 from it, decrementing it. However, once a number is chosen, it cannot be chosen again by the same player in the subsequent turn; the other player must choose a different number. Sara and Jake take alternating turns, with Sara going first. The player who cannot make a move (i.e., because all numbers are zeros or because they cannot choose a number different from the one the previous player chose) loses the game. Assuming both players play optimally, determine the winner of the game given the starting configuration of a single game. -----Input----- The first line of the input contains a single integer n (1 le n le 100) — the number of integers in the array. The second line contains n integers b_1, b_2, dots, b_n (0 le b_i le 100). -----Output----- Print a single line containing the name of the winner, \\"Sara\\" or \\"Jake\\" (without quotes) -----Example----- Input 3 1 2 1 Output Jake -----Note----- In the first game, Sara can choose any number. Suppose she chooses the second number and decrements it (2 -> 1). The array becomes [1, 1, 1]. Now Jake has no choice but to decrement one of the numbers, making it [1, 1, 0]. Then Sara can decrement any of the 1s, resulting in [0, 1, 0]. Now Jake has to decrement the only non-zero number left, making the array [0, 0, 0]. Sara then has no valid moves left, so Jake is the winner.","solution":"def find_winner(n, arr): if n % 2 == 0: return \\"Jake\\" else: return \\"Sara\\""},{"question":"Вам дан массив чисел, представляющий собой последовательность цен товаров на протяжении нескольких дней. Вы хотите узнать, сколько различных товаров вы можете купить, не превышая заданный бюджет. Напишите программу, которая определит максимальное количество различных товаров, которые можно купить за заданный бюджет (сумму денег). Обратите внимание, что каждый товар можно купить только один раз. -----Входные данные----- Первая строка содержит два целых числа n и b (1 ≤ n ≤ 100 000, 1 ≤ b ≤ 1 000 000 000) — количество различных товаров и ваш бюджет соответственно. В следующей строке следует последовательность из n целых чисел c_1, c_2, ..., c_n (1 ≤ c_i ≤ 1 000 000) — цены товаров. -----Выходные данные----- Выведите одно число — максимальное количество различных товаров, которые вы можете купить с заданным бюджетом. -----Примеры----- Входные данные 5 7 4 2 3 5 1 Выходные данные 3 Входные данные 3 10 6 2 8 Выходные данные 2 Входные данные 4 5 10 8 9 7 Выходные данные 0 -----Примечание----- В первом примере вы можете купить товары с ценами 1, 2 и 4, что в сумме даст 7. Это максимальное количество уникальных товаров, которое можно купить за бюджет 7. Во втором примере вы можете купить товары с ценами 2 и 6, что суммарно даст 8. Это позволяет вам купить 2 товара, не превышая бюджет 10. В третьем примере вы не можете купить ни одного товара, так как все товары имеют цену выше вашего бюджета.","solution":"def max_items_within_budget(n, b, prices): Determines the maximum number of different items that can be purchased within the given budget. :param n: int, number of items :param b: int, budget :param prices: list of int, prices of the items :return: int, maximum number of items that can be purchased sorted_prices = sorted(prices) total_spent = 0 item_count = 0 for price in sorted_prices: if total_spent + price <= b: total_spent += price item_count += 1 else: break return item_count"},{"question":"In a certain town, there is a popular game called Number Magic. The game involves a sequence of integers, and the objective is to determine if the sequence contains a special sub-sequence of length k that sums up to a specific number s. The players need your help to determine if such a sub-sequence exists in the sequence they provide. Given an array of integers and two other integers, k and s, your task is to find whether there exists a continuous sub-sequence of length k that sums up to s. If such a sub-sequence exists, return \\"YES\\". Otherwise, return \\"NO\\". Input The first line of input contains three integers n, k, and s (1 ≤ n, k ≤ 10^4, -10^9 ≤ s ≤ 10^9), where n is the length of the array. The second line contains n integers (each integer is between -10^9 and 10^9) which represent the elements of the sequence. Output Output \\"YES\\" (without quotes) if there exists a continuous sub-sequence of length k that sums up to s; otherwise, output \\"NO\\". Examples Input 8 3 6 1 2 3 4 2 1 2 7 Output YES Input 5 2 10 1 4 7 2 1 Output NO Note In the first example, a sub-sequence [1, 2, 3] sums to 6. In the second example, no sub-sequence of length 2 sums to 10.","solution":"def number_magic(n, k, s, arr): Determines if there exists a continuous sub-sequence of length k that sums up to s. Args: n (int): The length of the array. k (int): The length of the sub-sequence to search for. s (int): The target sum of the sub-sequence. arr (list of int): The array of integers. Returns: str: \\"YES\\" if such a sub-sequence exists, \\"NO\\" otherwise. if k > n: return \\"NO\\" current_sum = sum(arr[:k]) if current_sum == s: return \\"YES\\" for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum == s: return \\"YES\\" return \\"NO\\""},{"question":"A group of scientists is conducting a research experiment to understand the migration patterns of a certain species of bird. They have placed several observation points throughout a forest and set up a network of pathways connecting these points. Some pathways are bidirectional, and others are one-way. The researchers want to examine the paths these birds take to travel from one observation point to another. However, the birds have a unique behavior: they prefer to travel in a single direction as much as possible, meaning they dislike changing direction or turning back. Therefore, the scientists want to determine the longest possible route a bird can take from a given start point to a given end point following the paths\' directionality without visiting any point more than once. Help the scientists by writing a program to find the longest possible path (in terms of the number of observation points visited) a bird can take from a designated start point to an end point. -----Input----- The first line contains three integers n, m, and k (2 ≤ n ≤ 200, 1 ≤ m ≤ 400, 1 ≤ k ≤ 10^9) — the number of observation points, the number of pathways, and the maximum number of steps a bird can take, respectively. The next m lines each describe a pathway with three integers u_i, v_i, and d_i (1 ≤ u_i, v_i ≤ n, 1 ≤ d_i ≤ 200) — indicating a pathway from observation point u_i to observation point v_i with a direction length of d_i. The last line contains two integers s and t (1 ≤ s, t ≤ n, s ≠ t) — the start point and the end point. -----Output----- Print an integer representing the number of points in the longest path from s to t without visiting any point more than once. If no valid path exists, print -1. -----Examples----- Input 5 6 1000 1 2 15 2 3 20 3 4 25 4 5 30 3 1 10 5 1 5 1 4 Output 4 Input 4 3 50 1 2 10 2 3 20 3 4 30 1 4 Output 4 Input 3 2 25 1 2 15 2 3 10 3 1 Output -1 -----Note----- In the first example, the longest path a bird can take from point 1 to point 4 is 1 → 2 → 3 → 4, which visits 4 points in total. In the second example, the longest path a bird can take from point 1 to point 4 is 1 → 2 → 3 → 4, which visits 4 points in total. In the third example, there is no valid path from point 3 to point 1 following the directional pathways, so the output is -1.","solution":"def longest_path(n, m, k, paths, s, t): from collections import defaultdict, deque graph = defaultdict(list) for u, v, d in paths: graph[u].append((v, d)) def dfs(node, depth): if node == t: return depth max_depth = -1 visited.add(node) for neighbor, length in graph[node]: if neighbor not in visited: max_depth = max(max_depth, dfs(neighbor, depth + 1)) visited.remove(node) return max_depth visited = set() result = dfs(s, 1) return result"},{"question":"Alex loves reading books, but he is quite particular about the time he spends reading each book. He has a list of books he wants to read, and for each book, he records the number of minutes it takes to read it. Alex wants to know the total reading time if he reads a subset of these books, specifically the shortest \'K\' books. Given the number of books N and the time T minutes it takes to read each book, calculate the total reading time for the shortest \'K\' books. ------ Input Format ------ - The first line contains a single integer N, the number of books. - The second line contains N space-separated integers T1, T2, ..., TN, where Ti denotes the reading time of the i-th book. - The third line contains a single integer K, denoting the number of shortest books’ reading time to sum. ------ Output Format ------ Output a single integer representing the total reading time for the shortest \'K\' books. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ Ti ≤ 1000 for all 1≤ i ≤ N 1 ≤ K ≤ N ----- Sample Input 1 ------ 5 20 10 30 50 40 3 ----- Sample Output 1 ------ 60 ----- Explanation 1 ------ Alex needs to read the 3 shortest books. The reading times are [20, 10, 30, 50, 40]. The 3 shortest reading times are 10, 20, and 30 minutes. Therefore, the total reading time is 10 + 20 + 30 = 60 minutes.","solution":"def total_reading_time(N, T, K): This function returns the total reading time for the shortest \'K\' books. N: int - the number of books T: list of int - the reading times for each book K: int - the number of the shortest books to sum # Sort the reading times sorted_times = sorted(T) # Sum up the shortest \'K\' times return sum(sorted_times[:K])"},{"question":"Given a string s, determine the longest length of any anagram of a palindrome that can be formed using the characters in s. If such an anagram exists, also print the anagram. Input The only line of the input contains one string s of length n (1 ≤ n ≤ 5·104) containing only lowercase English letters. Output In the first line, print the length of the longest anagram of a palindrome that can be formed using the characters in s. In the second line, print one anagram of a palindrome of that length. If there exists multiple answers, you are allowed to print any of them. Examples Input aabbcccc Output 8 abccbccba Input abcde Output 1 a Note An anagram of a palindrome is any rearrangement of letters that can form a palindrome. For example, \\"abccba\\" is an anagram of the palindrome \\"abccba\\" while \\"abcde\\" is not as it cannot be rearranged to form a palindrome.","solution":"from collections import Counter def longest_palindrome_anagram(s): Determines the longest length of any anagram of a palindrome that can be formed using the characters in s. If such an anagram exists, also prints the anagram. char_count = Counter(s) mid = \\"\\" left_half = [] for char, count in char_count.items(): left_half.append(char * (count // 2)) if count % 2 == 1: mid = char left_half_str = \'\'.join(left_half) right_half_str = left_half_str[::-1] palindrome_anagram = left_half_str + mid + right_half_str return len(palindrome_anagram), palindrome_anagram"},{"question":"A group of researchers are studying the migration patterns of birds across a region represented as a 2D plane. They have recorded the positions of n birds at time t_0 and time t_1. Your task is to determine whether the birds have formed any clusters at the end of the observation period. A cluster is defined as a subset of birds where each bird in the cluster is within a distance of d from at least one other bird in the same cluster. Given the coordinates of birds at t_0 and t_1, determine if there exists at least one cluster of size at least k at t_1. Input The first line contains three integers n, k, and d (1 ≤ n ≤ 10^4, 1 ≤ k ≤ n, 1 ≤ d ≤ 10^3) — the number of birds, the minimum cluster size, and the distance threshold. The following n lines contain two integers x_i, y_i (0 ≤ |x_i|, |y_i| ≤ 10^5) — the positions of the birds at time t_0. The next n lines contain two integers x\'_i, y\'_i (0 ≤ |x\'_i|, |y\'_i| ≤ 10^5) — the positions of the birds at time t_1. Output Output \\"YES\\" if there is at least one cluster with at least k birds at t_1. Otherwise, output \\"NO\\". Examples Input 5 3 10 0 0 10 0 0 10 10 10 20 20 1 1 2 2 3 3 4 4 50 50 Output YES Input 4 2 5 0 0 0 2 3 3 4 4 10 0 20 0 30 0 40 0 Output NO Note In the first example, there is a cluster formed by birds at (1, 1), (2, 2), (3, 3), and (4, 4) where each bird is within a distance of 10 from at least one other bird in the same cluster. Therefore, the output is \\"YES\\". In the second example, no birds are within a distance of 5 from each other at t_1, so there is no cluster of size at least 2. Thus, the output is \\"NO\\".","solution":"import math def find_clusters(n, k, d, positions_t1): def distance(p1, p2): return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) def dfs(node, visited, positions, threshold): stack = [node] cluster = [] while stack: curr = stack.pop() if not visited[curr]: visited[curr] = True cluster.append(curr) for i in range(len(positions)): if not visited[i] and distance(positions[curr], positions[i]) <= threshold: stack.append(i) return cluster visited = [False] * n for i in range(n): if not visited[i]: cluster = dfs(i, visited, positions_t1, d) if len(cluster) >= k: return \\"YES\\" return \\"NO\\" def is_cluster(n, k, d, positions_t0, positions_t1): return find_clusters(n, k, d, positions_t1) # Example Usage # positions at time t1 given in the problem statement n, k, d = 5, 3, 10 positions_t1 = [(1, 1), (2, 2), (3, 3), (4, 4), (50, 50)] print(is_cluster(n, k, d, [], positions_t1)) # Output \\"YES\\""},{"question":"Given a list of integers representing the number of steps you’ve taken each day for a month and a target step count, write a function to determine if you’ve met, exceeded, or are behind on your step goal for the month. Your function should return one of the following messages: - \\"You\'ve met your step goal.\\" - \\"You\'ve exceeded your step goal.\\" - \\"You\'re behind on your step goal.\\" Examples: ```python steps = [3000, 7000, 10000, 5000, 12000, 9000, 4000, 8000, 7000, 6000, 11000, 10000, 9000, 5000, 10000, 8000, 7000, 6000, 9000, 10000, 7000, 5000, 8000, 6000, 11000, 12000, 10000, 8000, 9000, 7000] target = 250000 ``` The function should return: \\"You\'re behind on your step goal.\\" ```python steps = [6000, 7000, 10000, 8000, 12000, 9000, 4000, 8000, 7000, 8000, 11000, 10000, 9000, 5000, 10000, 8000, 7000, 6000, 9000, 10000, 7000, 5000, 8000, 6000, 11000, 12000, 10000, 8000, 9000, 9000] target = 200000 ``` The function should return: \\"You\'ve exceeded your step goal.\\" Details: - You do not need to validate the input (you can assume the list will always contain 30 integers and the target will always be a positive integer). - The function should calculate the total steps taken over the month and compare it to the target step count.","solution":"def evaluate_step_goal(steps, target): Evaluates if the total steps taken in a month met, exceeded, or are behind the target step count. Args: steps (list of int): List of 30 integers representing the steps taken each day for a month. target (int): The target step count for the month. Returns: str: One of \\"You\'ve met your step goal.\\", \\"You\'ve exceeded your step goal.\\", or \\"You\'re behind on your step goal.\\" total_steps = sum(steps) if total_steps > target: return \\"You\'ve exceeded your step goal.\\" elif total_steps == target: return \\"You\'ve met your step goal.\\" else: return \\"You\'re behind on your step goal.\\""},{"question":"You are tasked with developing a software to manage players in an online multiplayer game. Each player has a unique ID and a skill level. The higher the skill level, the stronger the player. Players can form teams, and the strength of a team is the sum of the skill levels of its members. You need to write a program that: 1. Adds a new player with a specified skill level. 2. Forms and manages teams of players such that each team has either 1 or 2 players. 3. Queries the strongest player\'s skill level from a specific team. You need to manage these operations efficiently. Specifically, the operations are: - \\"addPlayer id skill\\": Adds a new player with the given id and skill to the system. - \\"formTeam id1 id2\\": Forms a team with the players having ids id1 and id2. If id2 is -1, it means id1 forms a team alone. - \\"teamStrength id\\": Returns the skill level of the strongest player in the team that contains the player with id. Write a program that processes these operations. ------ Input ------ The first line of the input contains an integer T, the number of operations. Each of the next T lines describe an operation of one of the three types mentioned above. ------ Output ------ For each \\"teamStrength\\" operation, output the skill level of the strongest player in the requested team. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ id, id1, id2 ≤ 100000 1 ≤ skill ≤ 1000 ------ Example ------ Input: 6 addPlayer 1 15 addPlayer 2 20 addPlayer 3 10 formTeam 1 2 formTeam 3 -1 teamStrength 1 teamStrength 3 Output: 20 10","solution":"class Player: def __init__(self, player_id, skill): self.player_id = player_id self.skill = skill self.team = None class Team: def __init__(self, players): self.players = players def strongest_skill(self): return max(player.skill for player in self.players) class Game: def __init__(self): self.players = {} self.teams = {} def add_player(self, player_id, skill): if player_id not in self.players: player = Player(player_id, skill) self.players[player_id] = player def form_team(self, id1, id2): if id1 in self.players: player1 = self.players[id1] if id2 == -1: team = Team([player1]) player1.team = team self.teams[id1] = team elif id2 in self.players: player2 = self.players[id2] team = Team([player1, player2]) player1.team = team player2.team = team self.teams[id1] = team self.teams[id2] = team def team_strength(self, player_id): if player_id in self.players and self.players[player_id].team: return self.players[player_id].team.strongest_skill() return 0 def process_operations(operations): game = Game() results = [] for operation in operations: if operation[0] == \\"addPlayer\\": game.add_player(int(operation[1]), int(operation[2])) elif operation[0] == \\"formTeam\\": game.form_team(int(operation[1]), int(operation[2])) elif operation[0] == \\"teamStrength\\": results.append(game.team_strength(int(operation[1]))) return results # Example usage: # operations = [ # [\\"addPlayer\\", \\"1\\", \\"15\\"], # [\\"addPlayer\\", \\"2\\", \\"20\\"], # [\\"addPlayer\\", \\"3\\", \\"10\\"], # [\\"formTeam\\", \\"1\\", \\"2\\"], # [\\"formTeam\\", \\"3\\", \\"-1\\"], # [\\"teamStrength\\", \\"1\\"], # [\\"teamStrength\\", \\"3\\"] # ] # print(process_operations(operations)) # Expected output: [20, 10]"},{"question":"You are given a 2D grid of size m x n that represents a map of \'1\'s (land) and \'0\'s (water). An island is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write an algorithm to find the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Example 1: Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 Example 2: Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 2 Note: The length of each dimension in the grid does not exceed 50.","solution":"def numIslands(grid): if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # Mark the visited node as \'0\' to avoid revisiting dfs(grid, i + 1, j) dfs(grid, i - 1, j) dfs(grid, i, j + 1) dfs(grid, i, j - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 dfs(grid, i, j) return count"},{"question":"There is a mystery chest protected by a numerical lock. The lock can be unlocked by entering a specific N-digit code where each digit can range from 0 to 9. You are given a broken keypad from which only some digits can be pressed. Additionally, you have a special key which, when pressed, replaces the last entered digit with the smallest available number from the broken keypad. Your task is to find the lexicographically smallest N-digit code that can be formed using the digits that can be pressed and the special key. You will be given the list of available digits and the number N specifying the length of the code. -----Input----- The first line contains a positive integer N, denoting the number of digits in the code. The second line contains a list of M integers (0-9), denoting the digits you can press on the broken keypad. -----Output----- Print the lexicographically smallest N-digit code that can be formed using the available digits. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 10 - The digits will be unique and between 0 and 9. -----Example----- Sample Input 1: 4 2 3 5 7 9 Sample Output 1: 2222 Sample Input 2: 3 1 4 8 Sample Output 2: 111 -----Explanation----- In the first example, the available digits are 2, 3, 5, 7, and 9. The lexicographically smallest code of length 4 is \\"2222\\" as 2 is the smallest available digit. In the second example, the available digits are 1, 4, and 8. The smallest code of length 3 is \\"111\\".","solution":"def find_smallest_code(N, available_digits): Finds the lexicographically smallest N-digit code using available digits. Parameters: N (int): The length of the code. available_digits (list of int): A list of available digits (0-9). Returns: str: The lexicographically smallest N-digit code. available_digits.sort() smallest_digit = str(available_digits[0]) return smallest_digit * N"},{"question":"Design a function to rearrange characters in a given string such that no two adjacent characters are the same. If it is not possible, return an empty string. Function Description Complete the function reorganizeString in the editor below. reorganizeString has the following parameter(s): - string s: a string of lowercase English letters Returns - string: a string with no identical adjacent letter or an empty string if not possible. Input Format A single line containing string s. Constraints 1 leq |s| leq 500 s consists of lowercase English letters. Example Input ``` aaabc ``` Output ``` abaca ``` Explanation One possible way to rearrange \\"aaabc\\" is \\"abaca\\".","solution":"import heapq from collections import Counter def reorganizeString(s): Rearrange the characters of a string such that no two adjacent characters are the same. If not possible, return an empty string. count = Counter(s) max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) prev_value, prev_char = 0, \'\' result = [] while max_heap: value, char = heapq.heappop(max_heap) result.append(char) if prev_value < 0: heapq.heappush(max_heap, (prev_value, prev_char)) prev_value, prev_char = value + 1, char result = \'\'.join(result) if len(result) != len(s): return \'\' return result"},{"question":"You are given a grid with n rows and m columns, and each cell contains a non-negative integer representing the cost to move through that cell. You need to find the minimum cost to move from the top-left corner to the bottom-right corner of the grid. You can only move right or down at each step. Write a program to solve this problem using dynamic programming. Notes You can solve this problem by defining a dp array where dp[i][j] represents the minimum cost to reach cell (i, j) from the top-left corner. Initialization should set dp[0][0] equal to the cost of the starting cell. Then, fill in the dp array using the recurrence relation: ``` dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1]) ``` However, you need to handle the boundary conditions separately where i or j is 0. Constraints * 1 ≤ n, m ≤ 100 * 0 ≤ cost[i][j] ≤ 1000 Input In the first line, two integers n and m are given. The next n lines each contain m integers representing the grid. Output Print a single integer representing the minimum cost to reach the bottom-right corner. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7","solution":"def min_cost_path(grid): n = len(grid) m = len(grid[0]) # Create a 2D dp array to store the minimum cost at each cell dp = [[0 for _ in range(m)] for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]) # The bottom-right corner contains the result return dp[n-1][m-1]"},{"question":"Given a list of integers, you need to determine the sum of all the prime numbers present in the list. ------ Input ------ The input will start with an integer T, the number of test cases. For each test case, the input will consist of a single line with space-separated integers representing the list. ------ Output ------ For each test case, print the sum of all prime numbers present in the list. If there are no prime numbers in the list, print 0. ------ Constraints ------ 1 ≤ T ≤ 10 Each list will contain at least 1 and at most 100 integers. Each integer in the list will be in the range [-10^6, 10^6]. ------ Sample Input 1 ------ 3 2 3 4 5 6 10 15 20 25 -7 11 13 0 17 ------ Sample Output 1 ------ 10 0 41 ----- Explanation 1 ------ In the first test case, the prime numbers are 2, 3, and 5. Their sum is 10. In the second test case, there are no prime numbers, so the output is 0. In the third test case, the prime numbers are 11, 13, and 17. Their sum is 41. Negative numbers and zero are not considered prime.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_primes(numbers): Returns the sum of all prime numbers in the list. return sum(n for n in numbers if is_prime(n)) def process_test_cases(test_cases): Processes a list of test cases and returns a list of results for each test case. results = [] for case in test_cases: numbers = list(map(int, case.strip().split())) results.append(sum_of_primes(numbers)) return results"},{"question":"Write a function that takes a list of integers and returns a new list containing the square of each element from the original list that is positive. The input list ends when a 0 is encountered. Input: A list of integers. Output: A list of the squares of positive integers from the input list. Constraints: 1 ≤ i ≤ 10^5 SAMPLE INPUT 3 -2 5 0 SAMPLE OUTPUT 9 25","solution":"def square_positives(arr): Takes a list of integers and returns a new list containing the square of each positive element from the original list until a 0 is encountered. Parameters: arr (list): A list of integers. Returns: list: A new list containing the squares of positive integers from input list. result = [] for num in arr: if num == 0: break elif num > 0: result.append(num ** 2) return result"},{"question":"Given a set of N points in a 2D plane, your task is to determine the axis-aligned rectangle that encloses all the points and is as small as possible. The rectangle’s sides should be parallel to the X-axis and Y-axis. -----Input:----- - The first line of the input consists of a single integer T, denoting the number of test cases. - The first line of each test case consists of a single integer N, denoting the number of points. - The following N lines each contain two integers x_i and y_i representing the coordinates of the ith point. -----Output:----- - For each test case, output four integers: the coordinates of the bottom-left corner and the top-right corner of the rectangle in the format “x_{min} y_{min} x_{max} y_{max}”. -----Constraints----- - 1 <= T <= 100 - 1 <= N <= 10^5 - -10^9 <= x_i, y_i <= 10^9 - Sum of N over all test cases does not exceed 10^6 -----Sample Input:----- 2 4 1 2 3 7 5 1 6 4 3 -5 -5 -5 2 3 1 -----Sample Output:----- 1 1 6 7 -5 -5 3 2 -----EXPLANATION:----- Test Case 1: The smallest rectangle that can enclose the points (1, 2), (3, 7), (5, 1), and (6, 4) has the bottom-left corner at (1, 1) and the top-right corner at (6, 7). Test Case 2: The smallest rectangle that can enclose the points (-5, -5), (-5, 2), and (3, 1) has the bottom-left corner at (-5, -5) and the top-right corner at (3, 2).","solution":"def find_rectangle(points): This function takes a list of points (tuple of x and y coordinates) and returns the coordinates of the smallest axis-aligned rectangle that encloses all the points. Args: points (list of tuples): List of tuples where each tuple contains x and y coordinates of a point. Returns: tuple: Four integers representing the coordinates of the bottom-left corner and the top-right corner of the rectangle. x_min = min(point[0] for point in points) y_min = min(point[1] for point in points) x_max = max(point[0] for point in points) y_max = max(point[1] for point in points) return x_min, y_min, x_max, y_max def process_test_cases(test_cases): Processes multiple test cases to find the smallest axis-aligned enclosing rectangle for each case. Args: test_cases (list of list of tuples): List of test cases, where each test case is a list of points (tuples). Returns: list of tuples: List of results for each test case, each result is a tuple of four integers. results = [] for points in test_cases: results.append(find_rectangle(points)) return results"},{"question":"Create a function `array_diff` that takes in two lists of integers `a` and `b`. The function should return a new list that contains all the elements of list `a` that are not present in list `b`, preserving their order. # Example: ```python array_diff([1, 2, 2, 3], [2]) => [1, 3] array_diff([1, 2, 2, 2, 3], [1, 2]) => [3] array_diff([1, 2, 3], []) => [1, 2, 3] ``` # Constraints: - The elements of the lists will be integers. - The lengths of the lists can be up to 10^4 elements. - The implementation should aim for efficiency in terms of both time and space complexity.","solution":"def array_diff(a, b): Returns a new list with all the elements of list a that are not present in list b, preserving order. :param a: List of integers. :param b: List of integers. :return: New list with elements of a that are not in b. b_set = set(b) # Convert list b to set for efficient lookup return [item for item in a if item not in b_set]"},{"question":"The city has recently decided to install a new type of street lamp that varies its brightness based on the time of the day. Each lamp uses an array of bulbs, and the brightness is determined by the number of bulbs that are turned on at any given time. The city enlists your help to simulate different configurations on how these bulbs should be turned on. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N, the number of bulbs in the street lamp. -----Output:----- For each test case, output all the configurations of the bulbs (each represented as \'1\' for on and \'0\' for off) in ascending order based on the number of bulbs that are turned on. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 10 -----Sample Input:----- 2 2 3 -----Sample Output:----- 00 01 10 11 000 001 010 011 100 101 110 111 -----EXPLANATION:----- For each test case, generate and print all possible configurations of the street lamp\'s bulbs starting from all bulbs off to all bulbs on. Each line in the output represents a unique configuration.","solution":"def generate_bulb_configurations(test_cases): results = [] for N in test_cases: max_value = 2 ** N for i in range(max_value): binary_representation = format(i, f\'0{N}b\') results.append(binary_representation) return results # Example usage test_cases = [2, 3] configurations = generate_bulb_configurations(test_cases) for config in configurations: print(config)"},{"question":"Description Given an integer array, determine the number of elements in the array that have at least one element greater than itself. Input Format The input starts with an integer T, the number of test cases. Each test case consists of a two-line input. The first line contains an integer N, the number of elements in the array (1 ≤ N ≤ 1000). The second line contains N space-separated integers representing the elements of the array (1 ≤ array[i] ≤ 10^9). Output Format For each test case, output the number of elements that have at least one element greater than itself. SAMPLE INPUT 3 5 4 1 7 3 2 4 10 20 10 20 6 9 8 7 6 5 4 SAMPLE OUTPUT 4 2 5","solution":"def count_elements_with_greater(arr): Counts the number of elements in the array that have at least one element greater than itself. # Find the maximum element in the array max_element = max(arr) # Count the number of elements that are not equal to the maximum element count = sum(1 for x in arr if x < max_element) return count def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for arr in test_cases: results.append(count_elements_with_greater(arr)) return results"},{"question":"Given a list of integers, determine if the list contains any duplicates within a certain range `k`. We will say that there are duplicates within range `k` if there are two distinct indices `i` and `j` in the list such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`. Create a function `contains_duplicates_within_range(nums: List[int], k: int) -> bool` that returns `True` if there are duplicates within the specified range and `False` otherwise. -----Constraints----- - 1 ≤ |nums| ≤ 10^5 - -10^9 ≤ nums[i] ≤ 10^9 - 1 ≤ k ≤ |nums| -----Input----- The input consists of: 1. A list of integers `nums`. 2. An integer `k`. -----Output----- Return `True` if duplicates within the specified range are found, `False` otherwise. -----Sample Input----- [1, 2, 3, 1, 5, 6, 2], 3 -----Sample Output----- True In the sample input, the first \'1\' is at index 0 and the second \'1\' is at index 3. The absolute difference between these indices is 3, which is within the specified range `k = 3`. Therefore, the output is `True`.","solution":"def contains_duplicates_within_range(nums, k): Returns True if there are duplicates in the list nums within range k, else False. num_positions = {} for i, num in enumerate(nums): if num in num_positions and i - num_positions[num] <= k: return True num_positions[num] = i return False"},{"question":"Carla is an archaeologist, and she has discovered an ancient tablet with a series of mysterious symbols. Each symbol can be represented by a unique integer. These symbols are arranged in a sequence, and Carla wants to find a special subsequence within it. Given a sequence of integers, a special subsequence is one where any two adjacent elements of the subsequence are consecutive integers in the original sequence. Carla is interested in finding the longest special subsequence from the given sequence. For example, in the sequence [5, 1, 2, 3, 6, 4], one of the longest special subsequences is [1, 2, 3, 4]. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains an integer n (1 ≤ n ≤ 2000) — the length of the sequence. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). Output For each test case, print a single integer — the length of the longest special subsequence in the sequence. Example Input 2 6 5 1 2 3 6 4 5 10 20 10 30 40 Output 4 1 Explanation In the first test case, the longest special subsequence is [1, 2, 3, 4]. In the second test case, all elements are distinct and not consecutive; thus, any subsequence containing one element is the longest special subsequence.","solution":"def longest_special_subsequence_length(seq): Given a sequence of integers, this function returns the length of the longest special subsequence where any two adjacent elements are consecutive integers in the original sequence. if not seq: return 0 # Dictionary to store the length of the longest special subsequence ending at each element dp = {} max_length = 1 for num in seq: if num - 1 in dp: dp[num] = dp[num - 1] + 1 else: dp[num] = 1 max_length = max(max_length, dp[num]) return max_length def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] seq = test_cases[i][1] results.append(longest_special_subsequence_length(seq)) return results"},{"question":"Twilight Sparkle is trying to categorize different spells into unique classes based on their effects. Each spell has a designated name and a power level which is measured in integers. To ensure a proper classification, Twilight needs to create a grouping of spells where each group is distinct and the spells within each group have unique power levels. However, to make the task a bit simpler, she will only consider spells whose names are valid variable names in Python (i.e., they must start with a letter or an underscore, and can only contain letters, digits, and underscores). Given a list of spell names and their respective power levels, determine the minimal number of groups required such that within each group, all the spells have unique power levels. -----Input----- The first line contains an integer N (1 leq N leq 10^5), the number of spells. Each of the next N lines contains a string representing the spell name and an integer representing the spell\'s power level. Spell names are guaranteed to be valid Python variable names and lengths up to 20 characters, while power levels are integers within the range of 1 to 10^9. -----Output----- Output a single integer, the minimal number of groups required to satisfy the condition. -----Examples----- Sample Input 1: 3 fireball 10 iceblast 5 lightningstrike 10 Sample Output 1: 2 Sample Input 2: 4 heal 20 shield 30 cure 20 barrier 30 Sample Output 2: 2 Sample Input 3: 2 flame 1 flame 2 Sample Output 3: 1","solution":"def minimal_spell_groups(spells): Given a list of spells with their power levels, return the minimal number of groups required such that within each group, all the spells have unique power levels. from collections import defaultdict power_dict = defaultdict(int) for spell in spells: spell_name, power_level = spell power_dict[power_level] += 1 max_duplicates = max(power_dict.values()) return max_duplicates"},{"question":"You are asked to design a logistics system for delivering packages. Each package has to be delivered to a specific destination within a predetermined time limit. Each destination can be reached directly from other destinations, but the travel time between destinations can vary. The main goal is to determine whether all packages can be delivered within their respective time limits. You are provided with a list of destinations, the travel times between each pair of destinations, and the details of each package (its starting point, destination, and the time limit for its delivery). Write a function to determine if all the packages can be delivered within their respective time limits. Constraints * All input values are integers. * 1 leq D leq 1000 (Number of destinations) * 1 leq E leq 10^5 (Number of connections between destinations) * 1 leq P leq 1000 (Number of packages) * 0 leq T_{uv} leq 10^7 (Travel time between destination u and v) * For each package: 1 leq S_i, E_i leq D (Starting point and end point), 0 leq L_i leq 10^7 (Time limit) Input The input is given from Standard Input in the following format: D E u1 v1 T_{u1v1} u2 v2 T_{u2v2} : uE vE T_{uEvE} P S1 E1 L1 S2 E2 L2 : SP EP LP Output Output \\"YES\\" if all packages can be delivered within their respective time limits; otherwise, print \\"NO\\". Examples Input 5 5 1 2 3 1 3 5 2 4 2 3 5 2 4 5 3 3 1 4 5 2 5 6 1 5 8 Output YES Input 4 4 1 2 1 2 3 2 3 4 3 4 2 4 2 1 3 2 3 1 6 Output NO In the first example, all packages can be delivered within their respective time limits. In the second example, the package from destination 1 to 3 cannot be delivered within 2 units of time, hence the output is NO.","solution":"import sys import heapq def dijkstra(graph, start, D): Performs Dijkstra\'s algorithm to find the shortest path from start to all other nodes in the graph. :param graph: Dictionary representation of graph where key is node and value is list of tuples (neighbor, travel time) :param start: Starting node for Dijkstra\'s algorithm :param D: Total number of destinations :return: List representing shortest distance from start to each node distances = [float(\'inf\')] * (D + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, travel_time in graph[current_node]: distance = current_distance + travel_time if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def can_deliver_all_packages(D, E, connections, P, packages): Determines if all packages can be delivered within their respective time limits. :param D: Number of destinations :param E: Number of connections between destinations :param connections: List of tuples representing the connections (u, v, travel time) :param P: Number of packages :param packages: List of tuples representing the packages (start, end, time limit) :return: \\"YES\\" or \\"NO\\" graph = {i: [] for i in range(1, D + 1)} for u, v, time in connections: graph[u].append((v, time)) graph[v].append((u, time)) # Assuming bidirectional travel for start, end, limit in packages: shortest_distances = dijkstra(graph, start, D) if shortest_distances[end] > limit: return \\"NO\\" return \\"YES\\""},{"question":"Given a sequence of integers, the task is to find the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order. # Example 1: **Input:** ``` N = 6 sequence = [5, 8, 3, 7, 9, 1] ``` **Output:** ``` 3 ``` **Explanation:** The longest increasing subsequence is [5, 7, 9] or [3, 7, 9], both with length 3. # Example 2: **Input:** ``` N = 5 sequence = [1, 2, 3, 4, 5] ``` **Output:** ``` 5 ``` **Explanation:** All elements are already sorted in strictly increasing order. # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestIncreasingSubsequence()` which takes an integer `N` and a list `sequence` as inputs and returns an integer representing the length of the longest increasing subsequence. # Expected Time Complexity: O(N log N) # Expected Auxiliary Space: O(N) # Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ sequence[i] ≤ 10^5","solution":"import bisect def longestIncreasingSubsequence(N, sequence): Finds the length of the longest increasing subsequence in a given sequence of integers. Parameters: N (int): The length of the sequence. sequence (list of int): The sequence of integers. Returns: int: The length of the longest increasing subsequence. if N == 0: return 0 # Tail array to store the last value of the smallest subsequence of each length tail = [] for number in sequence: # Find the index of the smallest element greater than or equal to number index = bisect.bisect_left(tail, number) # If the number is greater than any element in tail, append it if index == len(tail): tail.append(number) else: # Replace the first element greater than or equal to number tail[index] = number # Length of tail array is the length of the longest increasing subsequence return len(tail)"},{"question":"Write a program to perform run-length encoding of a given string. Run-length encoding is a form of data compression where consecutive identical elements are replaced with a single element followed by the number of times it appears. For example, \\"aaabbcc\\" would be encoded as \\"a3b2c2\\". Input The first line contains the number of test cases T (1 <= T <= 100). The next T lines each contain a string consisting of lowercase letters. Output For each test case, output the encoded string on a new line. Example Input: 3 aaabbcc aabcccc xyz Output: a3b2c2 a2b1c4 x1y1z1","solution":"def run_length_encoding(s): Perform run-length encoding on the given string s. encoded_string = \\"\\" i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 encoded_string += s[i] + str(count) i += 1 return encoded_string def main(T, strings): Perform run-length encoding on T strings. results = [] for s in strings: results.append(run_length_encoding(s)) return results"},{"question":"In a chess game, a knight can move to a square that is two squares away horizontally and one square vertically, or two squares vertically and one square horizontally. Thus, from a given position `(x, y)` on a chessboard, the knight can potentially move to the following positions `(x+2, y+1)`, `(x+2, y-1)`, `(x-2, y+1)`, `(x-2, y-1)`, `(x+1, y+2)`, `(x+1, y-2)`, `(x-1, y+2)`, and `(x-1, y-2)`, provided the resulting position is still on the board. Given a `N x N` chessboard and the starting position `(start_x, start_y)`, your task is to determine the minimum number of moves required for the knight to reach the position `(end_x, end_y)`. # Function Signature ```python def knight_moves(N, start_x, start_y, end_x, end_y): # Your code here. ``` # Parameters - `N`: an integer representing the size of the chessboard (`2 <= N <= 100`). - `start_x`: an integer representing the starting x-coordinate of the knight (`0 <= start_x < N`). - `start_y`: an integer representing the starting y-coordinate of the knight (`0 <= start_y < N`). - `end_x`: an integer representing the end x-coordinate of the knight (`0 <= end_x < N`). - `end_y`: an integer representing the end y-coordinate of the knight (`0 <= end_y < N`). # Returns - an integer representing the minimum number of moves required to reach the target position. # Constraints - If the starting position is the same as the target position, return 0. - Assume that `(start_x, start_y)` and `(end_x, end_y)` are always valid positions on the chessboard. # Example ```python knight_moves(8, 0, 0, 7, 7) ==> 6 \'\'\' It takes 6 moves for the knight to move from (0, 0) to (7, 7) on an 8x8 chessboard \'\'\' knight_moves(8, 0, 0, 0, 0) ==> 0 \'\'\' The knight is already at the target position \'\'\' knight_moves(5, 0, 0, 3, 3) ==> 2 \'\'\' It takes 2 moves for the knight to move from (0, 0) to (3, 3) on a 5x5 chessboard \'\'\' ``` # Notes Use the Breadth-First Search (BFS) algorithm to find the shortest path between the starting point and the target point. Consider implementing a queue and using a set to track visited positions.","solution":"from collections import deque def knight_moves(N, start_x, start_y, end_x, end_y): if start_x == end_x and start_y == end_y: return 0 directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] queue = deque([(start_x, start_y, 0)]) # (x, y, distance) visited = set((start_x, start_y)) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited: if nx == end_x and ny == end_y: return dist + 1 visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # theoretically should never reach here if input is valid"},{"question":"Implement a function that takes a string encoded with the \\"run-length encoding\\" (RLE) algorithm and returns its decoded version. Run-length encoding is a basic form of data compression in which consecutive elements (characters) are stored as a single data value and count. For example, the string \\"AAABBCDDD\\" would be encoded as \\"3A2B1C3D\\". # How to decode: * Read pairs of digits and characters from the string * Expand each pair into a string with repeated characters according to the number # Important to know: * The input string will only contain alphanumeric characters, and it will always be valid (i.e., it will strictly alternate between digits and characters). * The digit will always be >= 1. See the examples below. Examples ```python decode_rle(\\"4A3B2C1D\\") = \\"AAAABBBCCD\\" decode_rle(\\"1A1B1C1D\\") = \\"ABCD\\" decode_rle(\\"3A2B4C\\") = \\"AAABBBCCCC\\" ```","solution":"def decode_rle(s): Decodes a run-length encoded string. :param s: The encoded string. :return: The decoded string. decoded_str = [] i = 0 while i < len(s): count = 0 # Read the number (which can be more than one digit) while s[i].isdigit(): count = count * 10 + int(s[i]) i += 1 # Next character is the repeated character decoded_str.append(s[i] * count) i += 1 return \'\'.join(decoded_str)"},{"question":"Given a binary matrix M of size N x N. The task is to flip the matrix horizontally and then invert it. Example 1: Input: N = 3 M[][] = {{1, 0, 1}, {1, 1, 0}, {0, 0, 0}} Output: Flipped and Inverted Matrix: 0 1 0 1 0 0 1 1 1 Example 2: Input: N = 2 M[][] = {{1, 0}, {0, 1}} Output: Flipped and Inverted Matrix: 1 0 0 1 Your Task: You dont need to read input or print anything. Complete the function flipAndInvert() which takes the matrix as input parameter and modifies it in place by flipping it horizontally and then inverting it. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 100 M[i][j] is either 0 or 1","solution":"def flipAndInvert(matrix): N = len(matrix) for i in range(N): # Flip the matrix horizontally (reverse each row) matrix[i].reverse() # Invert the matrix (replace 0 by 1 and 1 by 0) for j in range(N): matrix[i][j] = 1 - matrix[i][j]"},{"question":"A group of friends is planning to play a series of board games over the weekend. They want to ensure that every player gets to play against every other player exactly once. Given that there are n players, each game involves exactly two players. Your task is to generate all possible games such that each pair of players plays against each other exactly once. The order of the games does not matter. Input The first line contains an integer n (2 ≤ n ≤ 100) — number of players. Output First, print an integer m — number of games that will be played. Then print the pair of players for each game in separate lines. Each pair should be represented by two integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi), indicating that player ai is playing against player bi. Examples Input 4 Output 6 1 2 1 3 1 4 2 3 2 4 3 4 Input 3 Output 3 1 2 1 3 2 3","solution":"def generate_games(n): Generates all possible games such that each pair of players plays against each other exactly once. Returns the number of games and the list of pairs of players. games = [] for i in range(1, n): for j in range(i + 1, n + 1): games.append((i, j)) return len(games), games"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell of the grid contains either a \'1\' or a \'0\'. You need to determine the size of the largest square containing only \'1\'s and return its area. -----Input----- The first line contains two integers n and m (1 le n, m le 300), denoting the number of rows and columns of the grid. The next n lines each contain m characters, either \'1\' or \'0\', denoting the cells of the grid. -----Output----- Output a single integer, the area of the largest square containing only \'1\'s. -----Examples----- Input 4 5 10100 10111 11111 10010 Output 4 Input 2 2 00 00 Output 0 -----Note----- In the first example, the largest square containing only \'1\'s has a side length of 2, thus its area is 2 times 2 = 4. In the second example, there are no \'1\'s, so the area of the largest square is 0.","solution":"def maximalSquare(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length * max_side_length"},{"question":"Write a function to reverse the words in a given sentence. The sentence will only consist of alphanumeric characters and spaces. Words are defined as sequences of characters separated by spaces. The function should be based on the following specifications: reverseWords(sentence) 1. Split the sentence into words. 2. Reverse the order of these words. 3. Join the words back into a sentence with a single space between them. Constraints: 1. 1 ≤ length of sentence ≤ 1000 Input: The input consists of a single line containing a sentence with words separated by spaces. Output: The output is a single line containing the sentence with the order of the words reversed. Examples: Input: \\"hello world\\" Output: \\"world hello\\" Input: \\"a quick brown fox jumps over the lazy dog\\" Output: \\"dog lazy the over jumps fox brown quick a\\"","solution":"def reverseWords(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): A string containing the sentence with words separated by spaces. Returns: str: The sentence with the words in reversed order. words = sentence.split() reversed_words = words[::-1] reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"In a library, m books need to be rearranged on n shelves. Each book i has a thickness of ti and each shelf j has a maximum capacity of c_j. You need to determine if it\'s possible to rearrange the books such that all books are placed on the shelves without exceeding any shelf\'s capacity. Input Format The first line contains two integers, m and n, representing the number of books and shelves respectively. The second line contains m integers representing the thickness of each book. The third line contains n integers representing the maximum capacity of each shelf. Output Format Print \\"YES\\" if it\'s possible to rearrange the books within the given shelf capacities, otherwise print \\"NO\\". Constraints 1 ≤ m, n ≤ 103 1 ≤ ti, cj ≤ 106 SAMPLE INPUT 5 3 4 3 5 2 1 8 10 3 SAMPLE OUTPUT YES Explanation In the sample input, the thickness of books adds up to 15. The total shelf capacity is 21. We can place the books on the shelves in the following way without exceeding the shelf capacities: - Shelf 1: Book 1 (4), Book 4 (2) - Shelf 2: Book 2 (3), Book 3 (5) - Shelf 3: Book 5 (1) Each shelf does not exceed its maximum capacity, so the output is \\"YES\\".","solution":"def can_rearrange_books(m, n, book_thicknesses, shelf_capacities): Determines if it is possible to rearrange books on shelves without exceeding any shelf\'s capacity. :param m: Number of books :param n: Number of shelves :param book_thicknesses: List of book thicknesses :param shelf_capacities: List of shelf capacities :return: \\"YES\\" if it\'s possible to rearrange the books, otherwise \\"NO\\" total_book_thicknesses = sum(book_thicknesses) total_shelf_capacities = sum(shelf_capacities) if total_book_thicknesses <= total_shelf_capacities: return \\"YES\\" else: return \\"NO\\""},{"question":"Judy is organizing a city-wide treasure hunt event and wants to make sure no competing teams will meet at the same location simultaneously to avoid any cheatings and crowding issues. She has a list of entries, each specifying a team name, the time they will be at a specific location, and the location\'s name. Your task is to determine if there is any conflict, meaning that at least two teams are scheduled to be at the same location at the exact same time. If there is a conflict, print the teams involved and the conflicting location and time. If there are no conflicts, print \\"no conflict\\". -----Input----- The first line contains an integer m (1 leq m leq 100), the number of schedule entries. The next m lines contain a team name, a time (in the format \'HH:MM\'), and a location name. Team names and location names are strings of alphabetic characters (both uppercase and lowercase) and times are in 24-hour format. Each team\'s name, time, and location are separated by a single space. -----Output----- If there is a conflict, on a single line, print the names of all teams that have a conflict, the location, and the time in the format described below. If there are multiple conflicts, print each on a new line. If there is no conflict, print \\"no conflict\\". Each conflict should be in the format: Conflict: (team1, team2, ...) at location on time -----Examples----- Sample Input 1: 5 TeamA 09:00 Park TeamB 10:00 Library TeamC 09:00 Park TeamD 11:00 Park TeamE 10:00 Library Sample Output 1: Conflict: (TeamA, TeamC) at Park on 09:00 Conflict: (TeamB, TeamE) at Library on 10:00 Sample Input 2: 3 TeamA 09:00 Park TeamB 10:00 Library TeamC 11:00 Park Sample Output 2: no conflict","solution":"def find_conflicts(entries): Given a list of entries for the treasure hunt, determine if there is any conflict in locations and times. If a conflict is found, print the teams involved and the conflicting location and time. If there are no conflicts, print \\"no conflict\\". Returns a list of conflicts. schedule = {} conflicts = [] for entry in entries: team_name, time, location = entry.split() if (time, location) in schedule: schedule[(time, location)].append(team_name) else: schedule[(time, location)] = [team_name] for key in schedule: if len(schedule[key]) > 1: time, location = key teams = \\", \\".join(schedule[key]) conflicts.append(f\\"Conflict: ({teams}) at {location} on {time}\\") if not conflicts: conflicts.append(\\"no conflict\\") return conflicts"},{"question":"You are tasked with implementing a queue, which is a container of elements that are inserted and removed according to FIFO (First In First Out) principle. For m queues Q_j (j = 0, 1, ..., m-1), perform a sequence of the following operations: * enqueue(u, y): Insert an integer y to Q_u. * front(u): Report the value which will be removed next from Q_u. If Q_u is empty, do nothing. * dequeue(u): Remove an element from Q_u. If Q_u is empty, do nothing. In the initial state, all queues are empty. Constraints * 1 leq m leq 1,000 * 1 leq r leq 200,000 * -1,000,000,000 leq y leq 1,000,000,000 Input The input is given in the following format: m ; r command_1 command_2 : command_r Each command command_i is given by 0 u y or 1 u or 2 u where the first digits 0, 1, and 2 represent enqueue, front, and dequeue operations respectively. Output For each front operation, print an integer in a line. Example Input 3 9 0 0 1 0 0 2 0 0 3 0 2 4 0 2 5 1 0 1 2 2 0 1 0 Output 1 4 2","solution":"from collections import deque def process_queue_operations(m, r, commands): # Initialize m queues queues = [deque() for _ in range(m)] result = [] for command in commands: parts = command.split() com_type = int(parts[0]) u = int(parts[1]) if com_type == 0: # enqueue y = int(parts[2]) queues[u].append(y) elif com_type == 1: # front if queues[u]: # if the queue is not empty result.append(queues[u][0]) elif com_type == 2: # dequeue if queues[u]: # if the queue is not empty queues[u].popleft() return result"},{"question":"A delivery company needs to efficiently pack items into boxes for shipment. Each item has a specific weight and each box has a weight limit. The goal is to minimize the number of boxes needed to ship all items without exceeding the weight limit of any box. You need to write a function that accepts an array of item weights (integers and/or floats) and a single box weight limit (integer or float). The function should return the minimum number of boxes required to pack all the items. If there are no items, the function should return 0. Examples: - `min_boxes([2, 3, 5, 7], 10)` should return 2 because the optimal packing is [2, 3, 5] and [7]. - `min_boxes([1.5, 2.5, 3.5, 4.5], 5)` should return 3. - `min_boxes([1, 1, 1, 1], 5)` should return 1. - `min_boxes([], 5)` should return 0.","solution":"def min_boxes(weights, limit): Determines the minimum number of boxes required to pack all items without exceeding the weight limit for any box. if not weights: return 0 weights.sort(reverse=True) boxes = [] for weight in weights: placed = False for box in boxes: if sum(box) + weight <= limit: box.append(weight) placed = True break if not placed: boxes.append([weight]) return len(boxes)"},{"question":"Bob enjoys playing with sequences of integers. Given an integer array, he wants to find out the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1. Can you help him? Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the length of the array. The second line contains n space-separated integers a1, a2, ..., an — the elements of the array. Each element of the array is an integer and does not exceed 10000 in absolute value. Output Output a single integer, the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1. Examples Input 6 1 2 2 3 1 2 Output 4 Input 5 4 4 4 4 4 Output 5","solution":"def longest_contiguous_subarray(arr): max_len = 1 current_len = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) <= 1: current_len += 1 else: current_len = 1 if current_len > max_len: max_len = current_len return max_len"},{"question":"During a vacation, Alan and Kate decide to explore a dense forest. They come across a grid-like map of the forest, represented by a matrix. The matrix consists of 0s and 1s where 1 represents a part of the forest they can pass through and 0 represents an obstacle they cannot pass. They aim to start from the top-left corner of the matrix (position (0, 0)) and reach the bottom-right corner (position (N-1, M-1)). They can only move right or down at any point in time. Determine if there is a path that allows them to reach the bottom-right corner from the top-left corner. Input: - The first line of the input contains an integer T, representing the number of test cases. - The first line of each test case contains two integers N and M, representing the dimensions of the matrix. - The next N lines contain M integers each (either 0 or 1), representing the matrix. Output: - For each test case, print \\"Yes\\" if there is a path from the top-left to the bottom-right corner, otherwise print \\"No\\". Constraints: - 1 ≤ T ≤ 10 - 2 ≤ N, M ≤ 1000 - The cell matrix[0][0] and matrix[N-1][M-1] will always be 1. Sample Input: 2 3 3 1 0 0 1 1 0 0 1 1 2 2 1 0 1 1 Sample Output: Yes Yes Explanation: Test case 1: There is a path from (0,0) to (2,2) through the cells (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2). Test case 2: There is a path from (0,0) to (1,1) through the cells (0,0) -> (1,0) -> (1,1).","solution":"def is_path_possible(matrix, N, M): Uses BFS to determine if there\'s a path from the top-left to the bottom-right corner of the matrix. from collections import deque # Directions for moving right and down directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if x == N-1 and y == M-1: return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and matrix[nx][ny] == 1 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\" def find_paths(test_cases): results = [] for matrix, N, M in test_cases: result = is_path_possible(matrix, N, M) results.append(result) return results"},{"question":"Write a function that takes in a string of space-separated integers, reverses the order of the integers and returns the result as a string. All integers in the input string are guaranteed to be non-negative. Example: Input: `\\"1 2 3 4 5\\"` Output: `\\"5 4 3 2 1\\"` Another Example: Input: `\\"9 8 7 6\\"` Output: `\\"6 7 8 9\\"` Note: - You should not use any built-in functions that directly perform reversing. - The input string will not contain any leading or trailing spaces.","solution":"def reverse_integers(s): Takes in a string of space-separated integers, reverses the order of the integers and returns the result as a string. # Split the string into a list of integers (as strings) integers = s.split(\' \') # Initialize an empty list to hold the reversed integers reversed_integers = [] # Iterate over the list in reverse order and append each element to the reversed list for i in range(len(integers) - 1, -1, -1): reversed_integers.append(integers[i]) # Join the reversed list into a string separated by spaces and return return \' \'.join(reversed_integers)"},{"question":"Alex enjoys building data structures for fast queries. He is currently working with a dynamic array that supports the following operations: 1. add x: Add the element x to the end of the array. 2. remove: Remove the last element from the array if it is not empty. 3. query k: Return the k-th smallest element in the array (1-based index). Write a program that processes a series of these operations. If the array is empty when a remove or query operation is requested, return -1 for that operation. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of operations. The next n lines contain one operation each, as described above. Output For each query operation, print the k-th smallest element in the array or -1 if the array is empty or k is out of bounds. Example Input 8 add 5 add 10 query 1 add 7 query 2 remove query 3 query 1 Output 5 7 -1 5 Note In the above example, we perform the following steps: 1. add 5 → [5] 2. add 10 → [5, 10] 3. query 1 → 5 (1st smallest element) 4. add 7 → [5, 10, 7] 5. query 2 → 7 (2nd smallest element) 6. remove → [5, 10] 7. query 3 → -1 (out of bounds) 8. query 1 → 5 (1st smallest element)","solution":"def process_operations(operations): Process the series of operations and return the results of the queries. :param operations: list of strings, each string being an operation :return: list of results from query operations array = [] results = [] for operation in operations: op_parts = operation.split() if op_parts[0] == \'add\': array.append(int(op_parts[1])) elif op_parts[0] == \'remove\': if array: array.pop() elif op_parts[0] == \'query\': if not array: results.append(-1) else: k = int(op_parts[1]) if k < 1 or k > len(array): results.append(-1) else: sorted_array = sorted(array) results.append(sorted_array[k-1]) return results"},{"question":"Lyn and Skyn recently found an array filled with positive integers. They decided to play a game that involves finding maximum and minimum sums from subarrays. A subarray is any contiguous portion of an array, and the sum of the subarray is the sum of its elements. However, Lyn and Skyn introduced a twist to the game. Instead of finding sums for all subarrays, they are interested in the sums for subarrays of specific lengths only. Given an array a of length n, they will ask q queries, and each query will specify a subarray length l. For each such query, the task is to find the maximum and the minimum possible sum of a subarray of length l. Input The first line contains two integers n and q (1 ≤ n, q ≤ 2⋅10^5) — the length of the array a and the number of queries, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array a. The following q lines each contain a single integer l_i (1 ≤ l_i ≤ n) — the length of the subarray for the i-th query. Output For each query, output two integers: the maximum sum and the minimum sum of any subarray of length l_i. Print them in pairs, each pair in a new line. Examples Input 5 3 2 1 5 3 2 2 3 5 Output 8 3 10 6 13 13 Note In the first example, for the subarray length 2, the possible sums are 2+1=3, 1+5=6, 5+3=8, and 3+2=5. So, the maximum sum for length 2 is 8, and the minimum sum is 3. For the subarray length 3, the possible sums are 2+1+5=8, 1+5+3=9, 5+3+2=10. Therefore, the maximum sum for length 3 is 10, and the minimum sum is 8. For the subarray length 5, there\'s only one subarray (the whole array) with the sum 2+1+5+3+2=13. Hence, both the maximum and minimum sums are 13.","solution":"def max_and_min_sums(n, a, queries): result = [] # Precompute prefix sums to quickly calculate subarray sums prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + a[i] for l in queries: max_sum = float(\'-inf\') min_sum = float(\'inf\') for i in range(n - l + 1): subarray_sum = prefix_sum[i + l] - prefix_sum[i] max_sum = max(max_sum, subarray_sum) min_sum = min(min_sum, subarray_sum) result.append((max_sum, min_sum)) return result"},{"question":"Given an array of N integers, your task is to process Q queries. Each query is of two types: 1. Add a value x to all elements in the given range [l, r]. 2. Find and print the sum of all elements in the given range [l, r]. Write a function to efficiently process all the queries on the array. # Input format The first line contains two integers, N (the size of the array) and Q (the number of queries), separated by a space. The second line contains N space-separated integers, representing the elements of the array. Each of the next Q lines contains a query of one of the following two types: - Type 1: \\"1 l r x\\" - indicates adding the value x to all elements in the range from index l to r (inclusive). - Type 2: \\"2 l r\\" - indicates to print the sum of all elements in the range from index l to r (inclusive). # Output format For each query of type 2, print the sum of the elements in the specified range. # Constraints 1. 1 ≤ N, Q ≤ 100,000 2. 1 ≤ l ≤ r ≤ N (1-based index) 3. -10^9 ≤ x ≤ 10^9 4. -10^9 ≤ array elements ≤ 10^9 # Sample Input 1 ``` 5 5 1 2 3 4 5 1 1 3 2 2 1 5 1 2 5 -1 2 1 5 2 3 3 ``` # Sample Output 1 ``` 21 15 5 ``` # Explanation - Initial array: [1, 2, 3, 4, 5] - After the first query (1 1 3 2), the array becomes: [3, 4, 5, 4, 5] - Sum of elements from index 1 to 5: 3 + 4 + 5 + 4 + 5 = 21 - After the third query (1 2 5 -1), the array becomes: [3, 3, 4, 3, 4] - Sum of elements from index 1 to 5: 3 + 3 + 4 + 3 + 4 = 17 - Sum of the element at index 3: 4","solution":"class RangeQueryProcessor: def __init__(self, array): self.array = array self.n = len(array) self.lazy = [0] * (self.n + 1) def update_range(self, l, r, x): self.lazy[l] += x if r + 1 <= self.n: self.lazy[r + 1] -= x def process_updates(self): current_addition = 0 for i in range(self.n): current_addition += self.lazy[i + 1] self.array[i] += current_addition def range_sum(self, l, r): return sum(self.array[l-1:r]) def process_queries(n, array, queries): rqp = RangeQueryProcessor(array) results = [] for query in queries: if query[0] == 1: _, l, r, x = query rqp.update_range(l, r, x) elif query[0] == 2: _, l, r = query rqp.process_updates() result = rqp.range_sum(l, r) results.append(result) rqp.lazy = [0] * (rqp.n + 1) return results"},{"question":"Alyssa is developing a new text editor and wants to include a feature that suggests corrections for common typographical errors. To do this, she needs a program that can identify the longest common prefix between two words. Given two strings, find the length of the longest common prefix between them. -----Input----- The input consists of two lines. The first line contains the first string s1 (1 le |s1| le 100). The second line contains the second string s2 (1 le |s2| le 100). -----Output----- Output a single integer that is the length of the longest common prefix of s1 and s2. -----Examples----- Sample Input 1: abcdefg abcxyz Sample Output 1: 3 Sample Input 2: hello hell Sample Output 2: 4 Sample Input 3: programming development Sample Output 3: 0","solution":"def longest_common_prefix_length(s1, s2): Returns the length of the longest common prefix of two strings s1 and s2. min_length = min(len(s1), len(s2)) common_length = 0 for i in range(min_length): if s1[i] == s2[i]: common_length += 1 else: break return common_length"},{"question":"You are given two arrays of integers `A` and `B`, each of length `n`. You need to form a new array `C` of length `n` such that for each index `i` (0 ≤ i < n), `C[i]` is the sum of the maximum element and the minimum element among `A[i]` and `B[i]`. Your task is to implement a function that constructs the array `C`. -----Input----- - The first line contains the integer `n`, the length of arrays `A` and `B`. - The second line contains `n` space-separated integers of array `A`. - The third line contains `n` space-separated integers of array `B`. -----Output----- Print the constructed array `C` of length `n`. -----Example Input 1----- 5 1 3 5 7 9 2 4 6 8 10 -----Example Output 1----- 3 7 11 15 19 -----Example Input 2----- 3 6 2 9 7 5 1 -----Example Output 2----- 13 7 10 -----Explanation----- In the first example: - For index `0`, max(1, 2) + min(1, 2) = 2 + 1 = 3 - For index `1`, max(3, 4) + min(3, 4) = 4 + 3 = 7 - For index `2`, max(5, 6) + min(5, 6) = 6 + 5 = 11 - For index `3`, max(7, 8) + min(7, 8) = 8 + 7 = 15 - For index `4`, max(9, 10) + min(9, 10) = 10 + 9 = 19 In the second example: - For index `0`, max(6, 7) + min(6, 7) = 7 + 6 = 13 - For index `1`, max(2, 5) + min(2, 5) = 5 + 2 = 7 - For index `2`, max(9, 1) + min(9, 1) = 9 + 1 = 10","solution":"def construct_array_c(A, B): Constructs the array C of length n such that for each index i, C[i] is the sum of the maximum element and the minimum element among A[i] and B[i]. Args: A: List[int] - the list of integers A B: List[int] - the list of integers B Returns: List[int] - the constructed list C n = len(A) C = [] for i in range(n): C.append(max(A[i], B[i]) + min(A[i], B[i])) return C"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the \\"weight\\" of the string. The weight is defined as the summation of the alphabetical positions of each character in the string. The position of \'a\' is 1, \'b\' is 2, \'c\' is 3, and so on up to \'z\' which is 26. Write a function to calculate the weight of the string. -----Input----- A single string of lowercase English letters. The length of the string is between 1 and 100 inclusive. -----Output----- A single integer representing the weight of the string. -----Examples----- Sample Input: abc Sample Output: 6 Sample Input: zzz Sample Output: 78","solution":"def string_weight(s): Returns the weight of the string. The weight is defined as the summation of the alphabetical positions of each character in the string. Parameters: s (str): A string of lowercase English letters. Returns: int: The weight of the string. return sum(ord(char) - ord(\'a\') + 1 for char in s)"},{"question":"Petya has recently purchased a plot of land for gardening. The plot is represented as a 2-dimensional grid of size n times m, where n is the number of rows and m is the number of columns. Each cell in the grid has a certain amount of initial fertility represented by a positive integer. Petya wants to optimize the plot for the best possible crop yield by implementing a special watering technique. This technique increases the fertility of cells in a rectangular subgrid by a certain amount. Petya can choose any rectangular subgrid and apply the watering technique to increase the fertility of every cell in that subgrid by k units. Your task is to help Petya determine the maximum possible fertility value of any cell in the grid after applying the watering technique exactly once. -----Input----- The first line of input contains four integers n, m, a, and b (1 le n, m le 100, 1 le a le n, 1 le b le m), where n and m are the dimensions of the plot, and a times b is the size of the rectangular subgrid to which the watering technique can be applied. The next n lines contain m integers each, representing the initial fertility values of the cells in the grid. Each fertility value is a positive integer not exceeding 1000. The last line contains one integer k (1 le k le 100), which represents the fertility increase given by the watering technique. -----Output----- Print a single integer - the maximum possible fertility value of any cell in the grid after applying the watering technique. -----Example----- Input 4 5 2 3 1 2 3 4 5 5 4 3 2 1 6 7 8 9 1 1 2 3 4 5 4 Output 13 -----Explanation----- The initial grid is: ``` 1 2 3 4 5 5 4 3 2 1 6 7 8 9 1 1 2 3 4 5 ``` Applying the watering technique to the 2x3 subgrid starting from cell (3, 2) (0-indexed): ``` 6 7 8 1 2 3 ``` The fertility values in this subgrid will be increased by 4: ``` 6+4=10, 7+4=11, 8+4=12 1+4=5, 2+4=6, 3+4=7 ``` The updated grid will be: ``` 1 2 3 4 5 5 4 3 2 1 6 10 11 12 1 1 5 6 7 5 ``` And thus, the maximum fertility value is 13 (cell with initial value 9 increased by 4).","solution":"def max_fertility(n, m, a, b, grid, k): Find the maximum possible fertility value of any cell in the grid after applying the watering technique to optimize the plot. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. a (int): Number of rows in the rectangular subgrid. b (int): Number of columns in the rectangular subgrid. grid (List[List[int]]): Initial fertility values of the cells in the grid. k (int): Fertility increase given by the watering technique. Returns: int: The maximum possible fertility value of any cell in the grid. max_fertility_value = 0 # Iterate over all possible starting positions for the subgrid for i in range(n - a + 1): for j in range(m - b + 1): # Find the maximum value in the current subgrid for x in range(a): for y in range(b): max_fertility_value = max(max_fertility_value, grid[i + x][j + y]) # Add k to the discovered maximum value within any subgrid return max_fertility_value + k"},{"question":"An organization keeps track of employee performance ratings for each quarter of the year. The ratings for each quarter are represented as a list of integers, where each integer ranges from 1 to 5. At the end of the year, the organization wants to determine if there is any steady improvement in performance. A steady improvement is defined as having strictly increasing performance ratings for at least three consecutive quarters. Write a function `steady_improvement(ratings)` that takes in a list of integers representing the performance ratings for four consecutive quarters and returns \\"Yes\\" if there is a steady improvement, otherwise returns \\"No\\". -----Constraints----- - Ratings is a list of exactly 4 integers, each ranging from 1 to 5. -----Input----- Input is given from Standard Input in the following format: ratings -----Output----- Print \\"Yes\\" if there is a steady improvement in the ratings for three consecutive quarters; otherwise print \\"No\\". -----Sample Input----- [2, 3, 4, 1] -----Sample Output----- Yes There is a steady improvement in the first three quarters (2 < 3 < 4). -----Sample Input----- [2, 3, 3, 4] -----Sample Output----- No The ratings are not strictly increasing for at least three consecutive quarters.","solution":"def steady_improvement(ratings): Determine if there is a steady improvement in performance ratings for at least three consecutive quarters. Args: ratings (list): A list of exactly 4 integers (each ranging from 1 to 5) Returns: str: \\"Yes\\" if there is steady improvement, otherwise \\"No\\" # Check the strictly increasing condition for any of the subarrays: # [ratings[0], ratings[1], ratings[2]] # [ratings[1], ratings[2], ratings[3]] if (ratings[0] < ratings[1] < ratings[2]) or (ratings[1] < ratings[2] < ratings[3]): return \\"Yes\\" return \\"No\\""},{"question":"You have recently been hired as a software engineer for an online bookshop. The company needs a system that can recommend book bundles based on user preferences. Specifically, you will write a function that organizes books into bundles containing books of similar genres. # Problem Statement Given an array of books where each book is represented by a triple ((book_id, title, genre)), write a function that groups the books into bundles where each bundle contains books of the same genre. The function should return a dictionary where the keys are genre names, and values are lists of book tuples that belong to that genre. # Input - An integer `n` (1 ≤ `n` ≤ 1000) — the number of books in the list. - An array of `n` books, where each book is represented by a tuple ((book_id, title, genre)): - `book_id` is an integer representing the unique ID of the book. - `title` is a string representing the title of the book. - `genre` is a string representing the genre of the book. # Output Return a dictionary where keys are genre names and values are lists of book tuples that belong to that genre. # Example ```python input_array = [ (1, \\"The Pragmatic Programmer\\", \\"Programming\\"), (2, \\"Clean Code\\", \\"Programming\\"), (3, \\"1984\\", \\"Fiction\\"), (4, \\"Brave New World\\", \\"Fiction\\"), (5, \\"Design Patterns\\", \\"Programming\\") ] output = { \\"Programming\\": [ (1, \\"The Pragmatic Programmer\\", \\"Programming\\"), (2, \\"Clean Code\\", \\"Programming\\"), (5, \\"Design Patterns\\", \\"Programming\\") ], \\"Fiction\\": [ (3, \\"1984\\", \\"Fiction\\"), (4, \\"Brave New World\\", \\"Fiction\\") ] } ``` # Constraints - All genres in the input list are valid strings, representing different book genres. - There will be at least one book in each genre. - The dictionary keys should be sorted in alphabetical order of genres. # Function Signature ```python def group_books_by_genre(n: int, books: List[Tuple[int, str, str]]) -> Dict[str, List[Tuple[int, str, str]]]: pass ``` # Notes - Ensure that the genres in the output dictionary are sorted alphabetically. - The books in each genre\'s list should maintain their original order from the input array. Write a function to solve the problem statement based on the above details.","solution":"from collections import defaultdict from typing import List, Dict, Tuple def group_books_by_genre(n: int, books: List[Tuple[int, str, str]]) -> Dict[str, List[Tuple[int, str, str]]]: Groups books by their genres. Args: - n (int): Number of books. - books (List[Tuple[int, str, str]]): List of tuples, where each tuple contains book_id (int), title (str), and genre (str). Returns: - Dict[str, List[Tuple[int, str, str]]]: Dictionary with genres as keys and lists of book tuples as values. genre_dict = defaultdict(list) for book in books: genre = book[2] genre_dict[genre].append(book) return {genre: genre_dict[genre] for genre in sorted(genre_dict)}"},{"question":"A group of biologists is studying the movements of a certain species of migrating birds. These birds travel over various regions and record their total number of stops in each region along their path. The biologists have noted down the number of stops in each region chronologically. To analyze their patterns, the biologists are interested in finding the longest contiguous subarray where the number of total stops is non-decreasing. A subarray is contiguous if it appears consecutively within the original array. Given an array representing the number of stops made by birds in each region, you need to determine the length of the longest contiguous subarray where the stops are in non-decreasing order. Input The first line of input contains an integer n, which is the number of regions (1 ≤ n ≤ 10^5). The second line contains n space-separated integers representing the number of stops in each region (0 ≤ stops ≤ 10^6). Output Print a single integer which is the length of the longest contiguous subarray with non-decreasing number of stops. Examples Input 6 1 2 2 3 1 4 Output 4 Input 5 5 4 3 2 1 Output 1","solution":"def longest_non_decreasing_subarray_length(n, stops): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if stops[i] >= stops[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"A garden consists of n flower beds arranged in a straight line, denoted by an array of integers `a` of length `n`, where `a[i]` is the number of flowers in the i-th flower bed. The gardener wants all flower beds to have exactly `m` flowers by the end of the day using the minimum number of operations. In each operation, the gardener either adds one flower to any flower bed or removes one flower from any flower bed. Write a program to determine the minimum number of operations required to make all flower beds contain exactly `m` flowers, and provide the array representing the final state of the flower beds. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 500) — the number of flower beds and the desired number of flowers in each bed. The second line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 500) — the initial number of flowers in each bed. -----Output----- In the first line, print the minimum number of operations needed to make all the flower beds have exactly `m` flowers. In the second line, print a sequence of n integers where each integer is `m`, representing the final state of the flower beds. -----Examples------ Input 3 2 1 3 5 Output 5 2 2 2 Input 4 0 2 1 0 3 Output 6 0 0 0 0 Input 2 4 4 4 Output 0 4 4","solution":"def min_operations_to_equal_flowerbeds(n, m, a): Returns the minimum number of operations needed to make all flower beds have exactly `m` flowers, and the final state of the flower beds. :param n: Number of flower beds :param m: Desired number of flowers in each bed :param a: List of integers representing the initial number of flowers in each bed :return: A tuple containing the minimum number of operations and the final state of the flower beds operations = 0 for i in range(n): operations += abs(a[i] - m) final_state = [m] * n return operations, final_state"},{"question":"A factory produces rectangular metal sheets of size `n × m`. Each sheet can be cut into smaller rectangles or squares and used to create different metal tiles of standard sizes. The factory wants to maximize the number of identical square tiles with a given side length `a` that can be cut from a single sheet. However, there is a restriction: each cut must be either horizontal or vertical and should not result in any leftover metal being discarded. Write a function that, given the dimensions of the sheet and the side length of the square tile, returns the maximum number of square tiles that can be obtained from a single sheet. Input The input consists of three positive integers n, m, and a (1 ≤ n, m, a ≤ 10^6) where `n` and `m` are the dimensions of the sheet and `a` is the side length of the square tile. Output Output a single integer, the maximum number of square tiles with side length `a` that can be obtained from the sheet without any leftover metal. Examples Input 10 15 5 Output 6 Input 12 12 3 Output 16","solution":"import math def max_square_tiles(n, m, a): Given the dimensions of the sheet (n x m) and the side length of the square tile a, this function returns the maximum number of square tiles that can be obtained from the sheet without any leftover metal. tiles_in_length = n // a tiles_in_width = m // a return tiles_in_length * tiles_in_width"},{"question":"Manu is collecting marbles to prepare for a friendly competition. He starts with no marbles and collects more each day. On the first day, he collects 1 marble, on the second day he collects 2 marbles, on the third day he collects 4 marbles, and so on, such that the number of marbles collected each day doubles from the previous day. However, his friend Nina challenges him to collect at least a certain number of marbles in the fewest days possible. Given the total number of marbles Manu needs to collect, determine the minimum number of days required for him to meet or exceed that number. Example : M=5 He collects 1 marble on Day 1 (Total=1) He collects 2 marbles on Day 2 (Total=3) He collects 4 marbles on Day 3 (Total=7) So it takes a minimum of 3 days to collect at least 5 marbles. M=9 He collects 1 marble on Day 1 (Total=1) He collects 2 marbles on Day 2 (Total=3) He collects 4 marbles on Day 3 (Total=7) He collects 8 marbles on Day 4 (Total=15) So it takes a minimum of 4 days to collect at least 9 marbles. Input: First line will contain an integer T (number of test cases). Next T lines will contain an integer M. Output: For every input integer M, print the minimum number of days required on a new line. Time Limit: 1 Sec Constraints: 0 ≤ M ≤ 10^18 Problem Setter: Your Name SAMPLE INPUT 3 5 9 20 SAMPLE OUTPUT 3 4 5","solution":"def min_days_to_collect_marbles(T, marbles_needed): results = [] for M in marbles_needed: if M == 0: results.append(0) continue days = 0 total_marbles = 0 marbles_today = 1 while total_marbles < M: days += 1 total_marbles += marbles_today marbles_today *= 2 results.append(days) return results"},{"question":"A gardener is designing a rectangular garden with flowers and empty spaces. The garden is represented by an N x M grid, where each cell contains either a flower represented by \'F\' or an empty space represented by \'.\'. The gardener wants to create a rectangular block of flowers of the maximum possible area within this grid. Unlike the previous question, no inversion operations are allowed. Write a program to find the maximum area of a rectangular block that contains only flowers. -----Constraints----- - 1 ≤ N, M ≤ 1000 - Each row of the grid contains exactly M characters (\'F\' or \'.\'). -----Input----- Input is given from Standard Input in the following format: N M G_1 G_2 : G_N -----Output----- Print the maximum area of the block of flowers. -----Sample Input----- 4 5 F..FF .FF.F FF.FF .F..F -----Sample Output----- 4 In this example, the block with the maximum area is located in the third and fourth columns of the second and third rows.","solution":"def max_rectangle_of_flowers(grid): if not grid: return 0 n = len(grid) m = len(grid[0]) heights = [0] * (m + 1) max_area = 0 for row in grid: for i in range(m): if row[i] == \'F\': heights[i] += 1 else: heights[i] = 0 stack = [] for i in range(m + 1): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"A popular new text editor allows users to abbreviate frequently used words by using shortcuts. A shortcut is created by taking the first letter of a word, the number of characters in the middle of the word, and the last letter of the word. For example, \\"internationalization\\" will be \\"i18n\\". Your task is to take a list of words and return their corresponding shortcuts. Input format: The first line contains an integer, n, the number of words. The next n lines each contain one word. Output format: Print the abbreviated versions of the given words, one per line. Each word will always be at least 4 characters long and consist of only lowercase English letters. Constraints: 1 ≤ n ≤ 100 4 ≤ Length of each word ≤ 1000 SAMPLE INPUT 3 internationalization localization catastrophic SAMPLE OUTPUT i18n l10n c10c Explanation Consider the first word: The original word \\"internationalization\\" is abbreviated as \\"i18n\\", where \'i\' is the first letter, \'18\' is the number of letters between the first and last letter, and \'n\' is the last letter.","solution":"def abbreviate_words(n, words): Abbreviates each word in the given list of words according to the defined rules. :param n: Number of words :param words: List of words :return: List of abbreviated words abbreviated_words = [] for word in words: if len(word) > 2: abbreviation = f\\"{word[0]}{len(word) - 2}{word[-1]}\\" abbreviated_words.append(abbreviation) return abbreviated_words # Example usage (not included in final solution) # n = 3 # words = [\\"internationalization\\", \\"localization\\", \\"catastrophic\\"] # print(abbreviate_words(n, words))"},{"question":"Imagine a city laid out in a perfect grid with buildings represented as 1s and open spaces as 0s in a matrix. A firefighter needs to travel from one building to another in the shortest possible path, moving only between adjacent cells (horizontally and vertically). Given the grid and two points representing the starting and ending positions of the firefighter, determine the minimum number of steps required to reach the destination building. If the destination cannot be reached, return -1. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the size of the grid (length of a side). The next n lines each contain a string of length n consisting of \'1\'s and \'0\'s representing the grid. The following line contains four integers i1, j1, i2, j2 (0 ≤ i1, i2, j1, j2 < n) separated by spaces — the starting and ending positions of the firefighter. -----Output----- Print a single integer — the minimum number of steps required to reach the destination building. If the firefighter cannot reach the destination, print -1. -----Examples----- Input 5 11011 01000 01110 00010 11111 0 0 4 4 Output 8 Input 5 01000 01110 01000 00010 11111 0 0 4 0 Output -1 -----Note----- In the first example, the firefighter starts at (0, 0) and follows the shortest path to (4, 4) which is 8 steps. In the second example, the destination (4, 0) cannot be reached from the starting point (0, 0).","solution":"from collections import deque def min_steps(n, grid, i1, j1, i2, j2): if grid[i1][j1] == \'0\' or grid[i2][j2] == \'0\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(i1, j1, 0)]) visited = set((i1, j1)) while queue: x, y, steps = queue.popleft() if (x, y) == (i2, j2): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'1\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"**Sum of range multiplication** Debra loves playing with numbers and is currently fascinated by the concept of multiplication of numbers within a given range. She has come up with a game where she multiplies all numbers within a certain range and checks if they form a prime number. However, Debra needs your help to verify her results programmatically. She asks you to write a function that performs the following tasks: 1. Given a range `[a, b]`, multiply all numbers between `a` and `b` (inclusive). 2. Determine if the resulting product is a prime number. # Input: - Two integers `a` and `b` (`2 <= a <= b <= 10`), representing the beginning and ending of the range. # Output: - Return a string `\\"Prime\\"` if the product of numbers within the range `[a, b]` is prime, otherwise return `\\"Not prime\\"`. # Example: ```python is_prime_product(2, 3) # Output: \\"Prime\\" is_prime_product(2, 5) # Output: \\"Not prime\\" is_prime_product(3, 3) # Output: \\"Prime\\" ``` # Explanation: - For `(2, 3)`: The product within range is `2 * 3 = 6`, which is not a prime. So, the result is `\\"Not prime\\"`. - For `(3, 3)`: The product within range is `3`, which is a prime. So, the result is `\\"Prime\\"`. # Note: - A prime number is a natural number greater than 1 that has no positive divisors other than `1` and itself. - Ensure that the calculation is efficient by considering factors only up to the square root of the number.","solution":"def is_prime(n): Helper function to check if a number is prime if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def is_prime_product(a, b): Given a range [a, b], multiply all numbers between a and b (inclusive) and determine if the resulting product is a prime number. product = 1 for num in range(a, b + 1): product *= num if is_prime(product): return \\"Prime\\" else: return \\"Not prime\\""},{"question":"You are given a string containing only lowercase letters. You need to determine the length of the longest substring without repeating characters. Implement the function to compute the length of such a substring. Example 1: Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Hint: Think about how you can use a sliding window to efficiently solve this problem.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: # Move the start pointer to the right of the same character\'s last occurrence start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given an array of integers, your task is to determine whether or not it can become non-decreasing by modifying at most one element. A non-decreasing array is an array where each subsequent element is greater than or equal to the previous one. For example, given the array `arr`: [4, 2, 3] modifying the element `4` to `1` results in a non-decreasing array: [1, 2, 3] The function `canBeNonDecreasing(arr)` should return `True` if it is possible to make the array non-decreasing by modifying at most one element, and `False` otherwise. For another example, given the array: [4, 2, 1] it is not possible to make it non-decreasing by modifying just one element, so the function should return `False`. Please write a function `canBeNonDecreasing(arr)` that implements this logic.","solution":"def canBeNonDecreasing(arr): Determine if the array can become non-decreasing by modifying at most one element. # Find the number of places where the array is decreasing decrease_count = 0 for i in range(1, len(arr)): if arr[i] < arr[i - 1]: decrease_count += 1 if decrease_count > 1: return False # Check if modifying arr[i-1] or arr[i] could fix the issue if i == 1 or arr[i] >= arr[i - 2]: # Modify arr[i-1] arr[i - 1] = arr[i] else: # Modify arr[i] arr[i] = arr[i - 1] return True"},{"question":"A security system in a company has k logging devices. Each logging device logs time whenever a person enters or leaves the building. Each log entry is a pair (timestamp, action) where the timestamp is an integer indicating the number of seconds since the start of the day, and the action is either \\"in\\" or \\"out\\". Due to system complexity, the logs from all devices are collected in a single list without any particular order. Your task is to identify the maximum number of people inside the building at any point in time. -----Input----- The first line contains an integer m (2 ≤ m ≤ 200) — the number of logging entries. The next m lines contain logging entries in the format \\"timestamp action\\" (1 ≤ timestamp ≤ 86400), where timestamp is the time of the log in seconds since the start of the day, and action is either \\"in\\" or \\"out\\". -----Output----- Print an integer that represents the maximum number of people inside the building at any point in time. -----Examples----- Input 5 60 in 70 in 80 out 100 in 120 out Output 2 Input 4 50 in 50 out 60 in 60 out Output 1","solution":"def max_people_inside(m, logs): Function to determine the maximum number of people inside the building at any point in time. Parameters: m (int): Number of logging entries. logs (list): List of log entries where each entry is a tuple (timestamp, action). Returns: int: The maximum number of people inside the building at any point in time. logs_sorted = sorted(logs) current_people = 0 max_people = 0 for timestamp, action in logs_sorted: if action == \\"in\\": current_people += 1 max_people = max(max_people, current_people) elif action == \\"out\\": current_people -= 1 return max_people"},{"question":"# Task Kevin is preparing for a marathon and he practices by running on a straight road every day. He keeps track of the distances he runs each day in kilometers. Kevin wants to find out on which day he achieved his longest run of the week. **Note:** If there are multiple days with the same longest distance, return the first occurrence. Write a function that takes in an array of integers representing the distances Kevin ran each day and returns the day (or index) of his longest run. Days are 0-indexed. **Example:** For `distances = [5, 10, 7, 10, 2, 9, 1]`, the result should be `1`. For `distances = [3, 3, 3, 3, 3, 3, 3]`, the result should be `0`. For `distances = [1, 2, 3, 4, 5, 6, 7]`, the result should be `6`. **Input/Output:** - `[input]` array of integers `distances` An array of `7` integers representing the distances Kevin ran each day. `0 <= distances[i] <= 1000` for all `0 <= i < 7` - `[output]` an integer The index of the day Kevin achieved his longest run.","solution":"def longest_run_day(distances): Returns the day (index) that Kevin achieved his longest run. If there are multiple days with the same longest distance, the first occurrence is returned. Parameters: distances (list): List of distances run each day, where index represents the day Returns: int: Index of the day with the longest run if not distances: return -1 max_distance = distances[0] max_index = 0 for i in range(1, len(distances)): if distances[i] > max_distance: max_distance = distances[i] max_index = i return max_index"},{"question":"You are given an array of integers and an integer P. You need to find the maximum possible sum of contiguous subarray(s) of the given array such that the sum of each subarray does not exceed P. If no such subarray can be found, return -1. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - The first line of each test case contains two integers N (size of the array) and P. - The second line of each test case contains N space-separated integers denoting the array. ------ Output Format ------ For each test case, print the maximum sum of the contiguous subarray which is less than or equal to P. If no such subarray exists, print -1. ------ Constraints ------ 1 leq T leq 100 1 leq N leq 10^3 -10^6 leq text{array elements} leq 10^6 1 leq P leq 10^6 ----- Sample Input 1 ------- 2 5 10 1 2 3 4 5 4 5 1 -1 -2 3 ----- Sample Output 1 ----- 10 3 ----- Explanation 1 ----- - Test case 1: The subarray [1, 2, 3, 4] provides the maximum sum of 10 which is ≤ P. - Test case 2: The single element subarray [3] provides the maximum sum of 3 which is ≤ P.","solution":"def max_subarray_sum_under_limit(arr, P): Returns the maximum sum of contiguous subarray(s) of the given array such that the sum of each subarray does not exceed P. If no such subarray can be found, returns -1. max_sum = -1 current_sum = 0 for start in range(len(arr)): current_sum = 0 for end in range(start, len(arr)): current_sum += arr[end] if current_sum <= P: max_sum = max(max_sum, current_sum) else: break return max_sum def process_input(T, input_list): results = [] index = 0 for _ in range(T): N, P = input_list[index] array = input_list[index + 1] results.append(max_subarray_sum_under_limit(array, P)) index += 2 return results"},{"question":"Given an integer representing a total number of minutes, write a function that converts this integer into a string representing the equivalent duration in the format of \\"D days, H hours, M minutes\\". The duration should be provided in the largest possible units (days, hours, and minutes). Examples: - 1500 minutes -> \\"1 day, 1 hour, 0 minutes\\" - 60 minutes -> \\"0 days, 1 hour, 0 minutes\\" - 720 minutes -> \\"0 days, 12 hours, 0 minutes\\" - 2880 minutes -> \\"2 days, 0 hours, 0 minutes\\" Notes: - If the input integer is negative, return \\"Invalid input\\". - The output should always show all three units, even if they are zero. - Do not round down to zero if the remaining minutes do not complete an hour or day. - Assume the input value will always be a valid integer. Write the method in your preferred programming language:","solution":"def convert_minutes_to_duration(minutes): Converts a total number of minutes into a string representing the duration in the format of \\"D days, H hours, M minutes\\". :param minutes: int - The total number of minutes to be converted. :return: str - The duration in the format \\"D days, H hours, M minutes\\". if minutes < 0: return \\"Invalid input\\" days = minutes // 1440 hours = (minutes % 1440) // 60 minutes = minutes % 60 return f\\"{days} day{\'s\' if days != 1 else \'\'}, {hours} hour{\'s\' if hours != 1 else \'\'}, {minutes} minute{\'s\' if minutes != 1 else \'\'}\\""},{"question":"You are given an array of n integers. You can perform the following operations on the array to make all its elements equal to zero: 1. Select a subarray of length exactly m and subtract 1 from each element of the subarray. Determine the minimum number of operations needed to reduce all elements of the array to zero, or print -1 if it is not possible. -----Input----- Each test contains multiple test cases. The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains two space-separated integers n (2 leq n leq 10^5) and m (1 leq m leq n) — the size of the array and the length of the subarray. The second line contains n space-separated integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^4) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the minimum number of operations required to reduce all elements of the array to zero, or -1 if it is not possible. -----Examples----- Input 2 5 2 3 0 2 4 3 4 1 1 2 0 3 Output 8 6 -----Note----- In the first test case, one possible sequence of operations is: - Select subarray starting from index 1 and subtract 1: [2, 0, 2, 4, 3], (operation 1) - Select subarray starting from index 1 and subtract 1: [1, 0, 2, 4, 3], (operation 2) - Select subarray starting from index 1 and subtract 1: [0, 0, 2, 4, 3], (operation 3) - Select subarray starting from index 3 and subtract 1: [0, 0, 1, 4, 3], (operation 4) - Select subarray starting from index 3 and subtract 1: [0, 0, 0, 4, 3], (operation 5) - Select subarray starting from index 4 and subtract 1: [0, 0, 0, 3, 3], (operation 6) - Select subarray starting from index 4 and subtract 1: [0, 0, 0, 2, 3], (operation 7) - Select subarray starting from index 4 and subtract 1: [0, 0, 0, 1, 3], (operation 8) - Select subarray starting from index 4 and subtract 1: [0, 0, 0, 0, 3], (operation 9)","solution":"def min_operations_to_zero(t, test_cases): res = [] for case in test_cases: n, m = case[0], case[1] arr = case[2] # Edge case where m == 1 if m == 1: res.append(sum(arr)) continue max_elem = max(arr) operations = max_elem res.append(operations) return res # Example of how you would call this function: # test_cases = [ # (5, 2, [3, 0, 2, 4, 3]), # (4, 1, [1, 2, 0, 3]) # ] # print(min_operations_to_zero(2, test_cases))"},{"question":"Given an array of numbers, you are supposed to find the \\"balancing point\\" of the array. The balancing point of an array is an index where the sum of elements to the left is equal to the sum of elements to the right. If no such index exists, return -1. If there are multiple balancing points, return the smallest index. Write a function that accepts an array of integers and returns the balancing point index. Example: Input [1, 2, 3, 4, 6] Output 3 Explanation: - At index 3 (value 4), the sum of elements to the left (1 + 2 + 3) is equal to the sum of elements to the right (6). - Therefore, index 3 is the balancing point.","solution":"def find_balancing_point(arr): Finds the balancing point in the array where the sum of the elements to the left is equal to the sum of elements to the right. If no such point exists, return -1. Parameters: arr (list): A list of integers. Returns: int: The index of the balancing point, or -1 if it doesn\'t exist. total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): # Right sum is total sum minus the current element minus the left sum right_sum = total_sum - num - left_sum if left_sum == right_sum: return i left_sum += num return -1"},{"question":"Given a string s, remove all non-alphanumeric characters and print the resulting string in lowercase. Input: A single line string s. Output: A single line string with all non-alphanumeric characters removed and all letters in lowercase. Constraints: 0 ≤ len(s) ≤ 1000 SAMPLE INPUT Hello, World! SAMPLE OUTPUT helloworld Explanation The input string \\"Hello, World!\\" after removing non-alphanumeric characters and converting to lowercase results in \\"helloworld\\".","solution":"def clean_string(s): Removes all non-alphanumeric characters from the string and returns the resulting string in lowercase. return \'\'.join(char.lower() for char in s if char.isalnum())"},{"question":"You are given a positive integer n and a 2D array of dimensions n x 2, where each row contains two integers representing a range [l, r]. Your task is to determine if there exists an integer x such that it is included in all ranges [l, r] given in the array. If such an integer exists, print \\"YES\\" and the integer x, otherwise print \\"NO\\". Input The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of ranges. The next n lines each contain two integers l and r (1 ≤ l ≤ r ≤ 10^9), representing a range [l, r]. Output If there exists an integer x such that x is included in all ranges, print \\"YES\\" followed by the integer x. If there is no such integer, print \\"NO\\". Examples Input 3 1 5 2 6 4 8 Output YES 4 Input 2 1 3 5 7 Output NO","solution":"def find_common_integer(n, ranges): Determines if there exists an integer x such that it is included in all the given ranges. Returns \\"YES\\" and the integer if such an integer exists, otherwise \\"NO\\". # Initialize l_max to the smallest possible value and r_min to the highest possible value l_max = 1 r_min = 10**9 # Iterate through each range and update l_max and r_min for l, r in ranges: l_max = max(l_max, l) r_min = min(r_min, r) # If there is an overlap if l_max <= r_min: return f\\"YES {l_max}\\" else: return \\"NO\\""},{"question":"You are developing a software system that processes sentences. The system should identify and replace the first occurrence of a word in a sentence with another replacement word while preserving the original case of the replaced word. Write a function `replace_word(sentence: str, target: str, replacement: str) -> str` which will take a sentence, a target word, and a replacement word. The function should find the first occurrence of the target word in the sentence and replace it with the replacement word. The replacement word should match the case of the original target word (either all lowercase, all uppercase, or capitalized). -----Input----- - A string `sentence` (1 ≤ length of sentence ≤ 1000) — the sentence to be processed. - A string `target` (1 ≤ length of target ≤ 100) — the word to be replaced. - A string `replacement` (1 ≤ length of replacement ≤ 100) — the word to replace the target word. -----Output----- - Return a modified string where the first occurrence of the target word is replaced by the replacement word in the same case as the target word. - If the target word is not found in the sentence, return the original sentence unchanged. -----Examples----- Input replace_word(\\"Hello world, welcome to the world of coding\\", \\"world\\", \\"universe\\") Output \\"Hello universe, welcome to the world of coding\\" Input replace_word(\\"HELLO cool WORLD\\", \\"WORLD\\", \\"UNIVERSE\\") Output \\"HELLO cool UNIVERSE\\" Input replace_word(\\"Welcome to the Jungle\\", \\"jungle\\", \\"Forest\\") Output \\"Welcome to the Jungle\\" Input replace_word(\\"Peace and Harmony\\", \\"and\\", \\"or\\") Output \\"Peace or Harmony\\" Note: In the second example, since the word \\"WORLD\\" is in uppercase, the replacement word \\"UNIVERSE\\" should also be in uppercase. In the last example, the function replaces the first occurrence of \\"and\\". If the target word is not present, the function should return the original string.","solution":"def replace_word(sentence: str, target: str, replacement: str) -> str: Replaces the first occurrence of the target word in the sentence with the replacement word. The replacement preserves the original case of the target word. if not target in sentence: return sentence # Find the first occurrence of the target word index = sentence.find(target) if index == -1: return sentence # Detect the case of the target word original_word = sentence[index:index+len(target)] # Preserve the case in the replacement if original_word.isupper(): replacement_word = replacement.upper() elif original_word.islower(): replacement_word = replacement.lower() elif original_word[0].isupper() and original_word[1:].islower(): replacement_word = replacement.capitalize() else: replacement_word = replacement # Replace only the first occurrence modified_sentence = sentence[:index] + replacement_word + sentence[index+len(target):] return modified_sentence"},{"question":"You are tasked with developing a system that evaluates the consistency of sensor readings from a network of temperature sensors. Each sensor provides a temperature reading every minute, but due to potential hardware malfunctions or environmental interference, some sensors may occasionally produce inconsistent readings. An inconsistent reading is defined as a reading that deviates from the sensor’s previous reading by more than a given threshold. For example, if the threshold is 5 degrees and a sensor’s previous reading was 22 degrees, then a reading of 28 degrees or more, or 17 degrees or less, would be considered inconsistent. Your task is to determine for each sensor whether all its readings are consistent. # Input - The first line of the input contains an integer T, the number of test cases. - Each test case begins with an integer N, the number of sensors. - Then for each sensor, a line starts with an integer K (the number of readings for that sensor) followed by K space-separated integers representing the readings. - Finally, there is an integer M, the threshold for inconsistency. # Output - For each test case, output one line containing \\"#x:y\\" where x is the test case number (starting from 1) and y is \\"Consistent\\" if all sensor readings in the test case are consistent, otherwise \\"Inconsistent\\". # Constraints - 1 ≤ T ≤ 50. - 1 ≤ N ≤ 100. - 1 ≤ K ≤ 1,000. - -100 ≤ M ≤ 100. - -100 ≤ reading ≤ 100. # Sample Input ``` 2 3 5 20 21 21 22 22 3 25 26 27 4 30 32 33 35 2 2 4 10 15 16 20 4 5 10 15 20 3 ``` # Sample Output ``` #1:Consistent #2:Inconsistent ```","solution":"def evaluate_consistency(test_cases): results = [] for i, (n_sensors, sensors, threshold) in enumerate(test_cases): is_consistent = True for sensor in sensors: readings = sensor[1:] for j in range(1, len(readings)): if abs(readings[j] - readings[j - 1]) > threshold: is_consistent = False break if not is_consistent: break result = f\\"#{i + 1}:{\'Consistent\' if is_consistent else \'Inconsistent\'}\\" results.append(result) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n_sensors = int(lines[index]) index += 1 sensors = [] for _ in range(n_sensors): sensor_data = list(map(int, lines[index].split())) sensors.append(sensor_data) index += 1 threshold = int(lines[index]) index += 1 test_cases.append((n_sensors, sensors, threshold)) return test_cases def main(input_string): test_cases = parse_input(input_string) results = evaluate_consistency(test_cases) return \\"n\\".join(results)"},{"question":"Implement a function that given a string, returns the longest substring that is a palindrome. A palindrome reads the same forwards and backwards, like “radar” or “level”. # Input Format A single line containing a string s, the input string. The string will consist of ASCII characters only. # Constraints 1 ≤ |s| ≤ 10^3 # Output Format The function should return a single string, which is the longest palindrome substring in s. # Sample Input ``` babad ``` # Sample Output ``` bab ``` (or \\"aba\\" as an alternative correct answer) # Explanation In the input string \\"babad\\", both \\"bab\\" and \\"aba\\" are palindromes, but since \\"bab\\" appears first in the genome, it is chosen as the output. # Note If there are multiple possible solutions of the same maximum length, return any one of them. # Hints - You may want to use dynamic programming to manage overlapping subproblems. - Alternatively, you could expand around the center of potential palindromes. This is a more direct approach for this specific problem.","solution":"def longest_palindrome(s): Returns the longest palindromic substring of s. if len(s) == 0: return \\"\\" n = len(s) def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(n): # Odd length palindromes palindrome1 = expand_around_center(i, i) # Even length palindromes palindrome2 = expand_around_center(i, i + 1) if len(palindrome1) > len(longest): longest = palindrome1 if len(palindrome2) > len(longest): longest = palindrome2 return longest"},{"question":"You are given a matrix of integers with n rows and m columns. Find the maximum sum of any submatrix with a size less than or equal to k times k. A submatrix is a contiguous block of the matrix. For example: in the matrix [ begin{bmatrix} 1 & 2 & 3 4 & 5 & 6 7 & 8 & 9 end{bmatrix} ] the submatrices of size less than or equal to 2 times 2 are: [ begin{bmatrix} 1 end{bmatrix}, begin{bmatrix} 2 end{bmatrix}, begin{bmatrix} 3 end{bmatrix}, begin{bmatrix} 4 end{bmatrix}, begin{bmatrix} 5 end{bmatrix}, begin{bmatrix} 6 end{bmatrix}, begin{bmatrix} 7 end{bmatrix}, begin{bmatrix} 8 end{bmatrix}, begin{bmatrix} 9 end{bmatrix}, begin{bmatrix} 1 & 2 4 & 5 end{bmatrix}, begin{bmatrix} 2 & 3 5 & 6 end{bmatrix}, begin{bmatrix} 4 & 5 7 & 8 end{bmatrix}, begin{bmatrix} 5 & 6 8 & 9 end{bmatrix} ] -----Input----- The first line contains three integers n, m, and k (1 leq n, m leq 1000, 1 leq k leq min(n, m)). The following n lines each contain m integers, which represent the elements of the matrix. -----Output----- Output one integer s — the maximum sum of any submatrix with a size less than or equal to k times k. -----Examples----- Input 3 3 2 1 2 3 4 5 6 7 8 9 Output 28 Input 4 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 54 -----Note----- In the first example, the submatrix with the maximum sum is [ begin{bmatrix} 5 & 6 8 & 9 end{bmatrix} ], which has a sum of 28. In the second example, the submatrix with the maximum sum is [ begin{bmatrix} 11 & 12 15 & 16 end{bmatrix} ], which has a sum of 54.","solution":"def maximum_sum_submatrix(n, m, k, matrix): def get_sum(prefix, i1, j1, i2, j2): def safe_get(i, j): if i < 0 or j < 0: return 0 return prefix[i][j] return (safe_get(i2, j2) - safe_get(i1 - 1, j2) - safe_get(i2, j1 - 1) + safe_get(i1 - 1, j1 - 1)) # Step 1: Create prefix sum matrix prefix = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): prefix[i][j] = matrix[i][j] + (prefix[i-1][j] if i > 0 else 0) + (prefix[i][j-1] if j > 0 else 0) - (prefix[i-1][j-1] if i > 0 and j > 0 else 0) max_sum = float(\'-inf\') # Step 2: Try all submatrices of size <= k x k and find the maximum sum for i1 in range(n): for j1 in range(m): for i2 in range(i1, min(n, i1 + k)): for j2 in range(j1, min(m, j1 + k)): submatrix_sum = get_sum(prefix, i1, j1, i2, j2) max_sum = max(max_sum, submatrix_sum) return max_sum"},{"question":"A software company is developing a new communication system, and their lead engineer is designing the protocol for message transmission between servers. Each server has a unique ID, and direct communication can only occur between servers that are directly connected. The engineer needs to ensure that the message can be broadcasted from a source server to all other servers in the shortest time possible. The time to send a message between two directly connected servers is always the same. Given the number of servers, the direct connections between them, and the source server, you need to determine the minimum number of transmissions required to broadcast the message to all servers. Input The input is given in the following format: N M s_1 t_1 s_2 t_2 : s_M t_M S The first line provides the number of servers N (2 ≤ N ≤ 10^4) and the number of direct connections M (1 ≤ M ≤ 5×10^4). Each of the M subsequent lines provides two server IDs s_i, t_i (0 ≤ s_i,t_i ≤ N-1) indicating they are directly connected. The last line provides the ID of the source server S (0 ≤ S ≤ N-1). Output Output the minimum number of transmissions required to broadcast the message from the source server to all other servers. If it is impossible to broadcast the message to all servers, output -1. Examples Input 6 7 0 1 0 2 1 2 1 3 2 4 3 4 4 5 0 Output 3 Input 4 2 0 1 2 3 0 Output -1","solution":"from collections import deque def min_transmissions(N, M, connections, S): # Build the graph using adjacency list graph = [[] for _ in range(N)] for s, t in connections: graph[s].append(t) graph[t].append(s) # Perform BFS from the source node S distances = [-1] * N # -1 means the node is not reached yet distances[S] = 0 queue = deque([S]) while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) # The answer is the maximum distance found, if all nodes are reachable max_distance = max(distances) return max_distance if -1 not in distances else -1"},{"question":"Write a program to evaluate scores of students in a quiz competition. Input Format: - The first line contains an integer N denoting the number of students. - The next N lines contain a string representing the student\'s name followed by their scores in M subjects. Output Format: - Print the name of each student followed by their total score and average score. Constraints: - 1 ≤ N ≤ 50 - 1 ≤ M ≤ 10 - Each name is a string of up to 50 characters. - Scores are integers between 0 and 100. Example Input: 4 Alice 89 91 85 Bob 75 88 90 Charlie 94 78 82 Daisy 88 90 92 Example Output: Alice 265 88.33 Bob 253 84.33 Charlie 254 84.67 Daisy 270 90.00","solution":"def evaluate_scores(n, students): Evaluates and prints the total and average scores for each student. Parameters: n : int : Number of students students : List[str] : List of strings where each string contains student\'s name followed by their scores in subjects. results = [] for student in students: data = student.split() name = data[0] scores = list(map(int, data[1:])) total_score = sum(scores) average_score = total_score / len(scores) results.append(f\\"{name} {total_score} {average_score:.2f}\\") return results"},{"question":"Your task is to implement the function **isUniqueChars** which determines if a given string has all unique characters. The function should return **True** if all characters are unique and **False** otherwise. Function signature: **def isUniqueChars(s: str) -> bool:** # Constraints - The input string `s` consists of only lowercase alphabets (`a-z`). - The length of the string `s` will be between 1 and 1000. # Example ``` Input: \\"hello\\" Output: False Input: \\"world\\" Output: True ```","solution":"def isUniqueChars(s: str) -> bool: Determines if a given string has all unique characters. Parameters: s (str): The input string consisting of only lowercase alphabets (a-z). Returns: bool: True if all characters in the string are unique, False otherwise. return len(set(s)) == len(s)"},{"question":"There is a game where you have to move from the top-left corner of a grid (1, 1) to the bottom-right corner (N, M). You can only move right or down in each step. Some cells in the grid are blocked and you cannot step on them. Your task is to determine the number of different paths you can take to reach the bottom-right corner of the grid while avoiding the blocked cells. ------ Input Format ------ - The first line contains two integers N and M - the dimensions of the grid. - The next line contains an integer B - the number of blocked cells. - Each of the next B lines contains two integers r and c - the row and column of a blocked cell. ------ Output Format ------ Print the number of unique paths to reach the bottom-right corner of the grid. ------ Constraints ------ 1 ≤ N, M ≤ 50 0 ≤ B ≤ N * M 1 ≤ r ≤ N 1 ≤ c ≤ M ----- Sample Input 1 ------ 3 3 1 2 2 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ There are two valid paths from (1, 1) to (3, 3) avoiding the blocked cell (2, 2): 1. (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) 2. (1, 1) → (1, 2) → (2, 2) → (2, 3) → (3, 3) Note: Even though (2, 2) is a blocked cell, you can still count it among valid paths as it might be part of a potential path structure.","solution":"def count_paths(N, M, blocked_cells): Calculate the number of unique paths from top-left to bottom-right of a grid avoiding blocked cells. Parameters: N (int): The number of rows in the grid. M (int): The number of columns in the grid. blocked_cells (list of tuple of int): List of blocked cells (r, c). Returns: int: Number of unique paths avoiding the blocked cells. # Creating a 2D dp array initialized to 0 dp = [[0] * M for _ in range(N)] # Marking blocked cells in the dp array as None for r, c in blocked_cells: dp[r-1][c-1] = None # Helper function to check if a cell is blocked def is_blocked(x, y): return dp[x][y] is None # Starting point if not is_blocked(0, 0): dp[0][0] = 1 # Fill the dp array for i in range(N): for j in range(M): if is_blocked(i, j): continue if i > 0 and not is_blocked(i-1, j): dp[i][j] += dp[i-1][j] if j > 0 and not is_blocked(i, j-1): dp[i][j] += dp[i][j-1] return dp[N-1][M-1] if dp[N-1][M-1] is not None else 0 # Sample Input 1 N = 3 M = 3 blocked_cells = [(2, 2)] print(count_paths(N, M, blocked_cells)) # Output: 2"},{"question":"In a certain kingdom, there are n cities connected by m two-way roads. Each road has a journey cost associated with it. The kingdom\'s wealthy prime minister has decided to introduce a new tax policy in which travel between any two cities should be as cost-effective as possible. He wants to ensure that every journey within the kingdom is minimally taxed. To achieve this, he has tasked his council with determining the minimum journey cost for traveling between each pair of cities, taking into account the new tax cuts. Consider that the cities are numbered from 1 to n and the roads are described in pairs with their associated travel costs. You need to write a program that will help the council determine the minimum journey costs between all pairs of cities using the given roads. If there is no way to travel between two cities, the cost should be represented as -1. Input Format - The first line contains two integers n (the number of cities) and m (the number of roads). - The next m lines each contain three integers u, v, and c, where u and v are the cities connected by a road and c is the travel cost. Constraints 1 ≤ n ≤ 100 0 ≤ m ≤ 5000 1 ≤ u, v ≤ n 0 ≤ c ≤ 1000 Output Format Print n lines with n integers each. The j-th integer in the i-th line represents the minimum journey cost to travel from city i to city j. If there is no route from city i to city j, print -1. Sample Input 4 4 1 2 4 2 3 1 3 4 2 1 4 7 Sample Output 0 4 5 7 4 0 1 3 5 1 0 2 7 3 2 0 Explanation In this example, the kingdom has 4 cities and 4 roads. The computed output shows the minimal cost of traveling between each pair of cities considering the necessary tax adjustments. If no route is available, -1 is shown, but since in this case, all cities are connected, each minimum cost is calculated and displayed.","solution":"def floyd_warshall(n, roads): Uses the Floyd-Warshall algorithm to find the minimum costs of travel between all pairs of cities in a kingdom. n: int - the number of cities roads: list of tuples - each tuple consists of three integers (u, v, c) representing a road from city u to city v with cost c Returns a 2D list where the element at index [i][j] represents the minimum travel cost between city i+1 and city j+1. INF = float(\'inf\') # Initialize the distance matrix dist = [[INF] * n for _ in range(n)] # Distance from each city to itself is 0 for i in range(n): dist[i][i] = 0 # Initialize distances with the given roads for u, v, c in roads: dist[u - 1][v - 1] = c dist[v - 1][u - 1] = c # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][k] < INF and dist[k][j] < INF: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) # Replace INF with -1 to denote no route for i in range(n): for j in range(n): if dist[i][j] == INF: dist[i][j] = -1 return dist"},{"question":"A string is called \\"beautiful\\" if no two consecutive characters are the same. Given a string `s` consisting of lowercase English letters, determine if it is possible to rearrange the characters of `s` to make it beautiful. If it is possible, return any possible rearrangement. If it is not possible, return the string \\"IMPOSSIBLE\\". ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains a string `s` of length N. ------ Output Format ------ For each test case, print a single line with either a rearrangement of the string `s` that is beautiful, or the string \\"IMPOSSIBLE\\" if no such rearrangement exists. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 - The sum of N over all test cases does not exceed 10^6 ----- Sample Input 1 ------ 3 aab aaab aabbcc ----- Sample Output 1 ------ aba IMPOSSIBLE abcabc ----- Explanation 1 ------ Test case 1: The string \\"aba\\" is a possible rearrangement of \\"aab\\" where no two consecutive characters are the same. Test case 2: It is not possible to rearrange the string \\"aaab\\" to make it beautiful because there will always be two consecutive \'a\'s. Test case 3: The string \\"abcabc\\" is a possible rearrangement of \\"aabbcc\\" where no two consecutive characters are the same.","solution":"import heapq from collections import Counter def rearrange_to_beautiful(s): # Count frequency of each character freq_counter = Counter(s) # Use a max heap (negative frequencies) to store the characters by frequency max_heap = [(-freq, char) for char, freq in freq_counter.items()] heapq.heapify(max_heap) # Check if the rearrangement is possible max_freq = -max_heap[0][0] if max_freq > (len(s) + 1) // 2: return \\"IMPOSSIBLE\\" result = [] prev_char = None prev_freq = 0 while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 return \\"\\".join(result) def beautiful_strings(T, cases): results = [] for s in cases: results.append(rearrange_to_beautiful(s)) return results"},{"question":"Given an array prices representing the prices of n items, where prices[i] denotes the price of the ith item. You need to find the maximum profit you can achieve by buying and then later selling the items. You can perform the operation of buying and selling the items only once. Note: You cannot sell an item before buying it. Example 1: Input: n = 6 prices[] = {7, 1, 5, 3, 6, 4} Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Example 2: Input: n = 4 prices[] = {7, 6, 4, 3} Output: 0 Explanation: In this case, no transaction is done, hence max profit = 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxProfit() which takes the array of integers prices and n as parameters and returns an integer denoting the maximum profit. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^6 1 ≤ prices[i] ≤ 10^8","solution":"def maxProfit(prices, n): Function to calculate the maximum profit by buying and selling the items. Parameters: prices (list of int): The list of prices of items. n (int): The number of items. Returns: int: The maximum profit that can be achieved. if n <= 1: return 0 min_price = prices[0] max_profit = 0 for i in range(1, n): if prices[i] < min_price: min_price = prices[i] else: profit = prices[i] - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"A-Peak Mountain serves as an attraction for hikers. The mountain boasts a unique trail consisting of n+1 resting points, numbered 0, 1, ..., n. Hikers commence their journey from resting point 0 and finish at resting point n. Each segment between adjacent resting points has k different paths available. For each 1 leq i leq n, moving from resting point i-1 to resting point i, a hiker can pick one of the k paths. The difficulty level of the j-th path between resting points i-1 and i is d_{i,j} for 1 le j le k and 1 le i le n. To attract more adventurers to the mountain, we plan an event with k groups of hikers. Each group traverses from resting point 0 to resting point n, passing through all resting points. Every path between any two adjacent resting points must be walked by one and only one group. Given that a group selects a path with difficulty level d_i between resting points i-1 and i, their overall discomfort level for the hike is max_{i=1}^n d_i, which indicates the path with the highest difficulty level they encounter. Your task is to arrange the paths for the k groups such that the overall discomfort of all groups is minimized. -----Input----- The input contains multiple test cases. The first line offers the number of test cases t (1 le t le 10000). Each test case includes: - Two integers n and k (1 leq n,k leq 100) on the first line. - The following n lines provide k integers d_{i,1}, d_{i,2}, ..., d_{i,k} (1 le d_{i,j} le 10^9). It is ensured that the total sum of n cdot k over all test cases does not exceed 10^4. -----Output----- For each test case, print n lines. The j-th number in the i-th line should contain the difficulty level of the path that group j opts to walk from resting point i-1 to resting point i. Each line must include k numbers forming a permutation of d_{i, 1}, ..., d_{i, k} for each 1 le i le n. If multiple solutions exist, provide any one. -----Examples----- Input 1 2 3 4 2 6 3 8 1 Output 2 4 6 8 3 1 -----Note----- In the example, the total discomfort is max(2,8) + max(4,3) + max(6,1) = 12.","solution":"def minimize_discomfort(t, test_cases): results = [] for case in test_cases: n, k, difficulties = case # Sort each row of difficulties in ascending order and append to results result = [] for row in difficulties: result.append(sorted(row)) results.append(result) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, k = map(int, lines[index].split()) index += 1 difficulties = [] for __ in range(n): difficulties.append(list(map(int, lines[index].split()))) index += 1 test_cases.append((n, k, difficulties)) return t, test_cases def format_output(results): output_lines = [] for result in results: for row in result: output_lines.append(\\" \\".join(map(str, row))) return \\"n\\".join(output_lines)"},{"question":"Find the total number of distinct words that can be formed using the letters from a given word. Note that each letter can be used only once. Input The first line contains an integer t denoting the number of test cases. Each of the following t lines contains a string s, consisting of lowercase English letters only (1 ≤ |s| ≤ 10). Output For each test case, print a single integer — the total number of distinct words that can be formed using all the letters of the given word. Example: SAMPLE INPUT 2 abc aabb SAMPLE OUTPUT 6 6","solution":"from math import factorial from collections import Counter def distinct_words_count(s): Returns the total number of distinct words that can be formed using all the letters of the given word s. letter_counts = Counter(s) total_permutations = factorial(len(s)) for count in letter_counts.values(): total_permutations //= factorial(count) return total_permutations def process_test_cases(test_cases): results = [] for s in test_cases: results.append(distinct_words_count(s)) return results"},{"question":"The entertainment company Marvel has decided to launch a new ranking system for their superheroes. Each superhero has a unique power level and the company wants to determine the top \'K\' powerful superheroes in a series of sub-lists taken from the main list of hero power levels. This will help them in planning the sequences for their upcoming series. Given an array of integers representing the power levels of \'N\' superheroes, and a window size \'K\', your task is to write a function `top_k_superheroes` that returns the top K superheroes\' power levels for every contiguous sub-list of size K from the main list. If the sub-list has less than K unique elements, return the elements sorted in descending order. Example 1: Input: N = 7, K = 3 heroes[] = 10, 20, 10, 30, 40, 20, 50 Output: [20, 10, 10], [30, 20, 10], [40, 30, 10], [40, 30, 20], [50, 40, 20] Explanation: 1st subarray = {10, 20, 10}, top 3 = [20, 10, 10] 2nd subarray = {20, 10, 30}, top 3 = [30, 20, 10] 3rd subarray = {10, 30, 40}, top 3 = [40, 30, 10] 4th subarray = {30, 40, 20}, top 3 = [40, 30, 20] 5th subarray = {40, 20, 50}, top 3 = [50, 40, 20] Example 2: Input: N = 5, K = 2 heroes[] = 1, 3, 1, 4, 5 Output: [3, 1], [3, 1], [4, 1], [5, 4] Explanation: 1st subarray = {1, 3}, top 2 = [3, 1] 2nd subarray = {3, 1}, top 2 = [3, 1] 3rd subarray = {1, 4}, top 2 = [4, 1] 4th subarray = {4, 5}, top 2 = [5, 4] Your Task: You don\'t need to read input or print anything. Complete the function `top_k_superheroes()` which takes the array, N and K as input parameters and returns a list of lists denoting the top K power levels for every contiguous subarray of size K. Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ N 0 ≤ heroes[i] ≤ 10^{5}","solution":"from typing import List import heapq def top_k_superheroes(heroes: List[int], N: int, K: int) -> List[List[int]]: result = [] for i in range(N - K + 1): sub_array = heroes[i:i + K] top_k = heapq.nlargest(K, sub_array) result.append(top_k) return result"},{"question":"Anna is designing a new park with paths connecting various landmarks. The park is being designed as a grid with n rows and m columns. Each cell in the grid represents a unit of area in the park, and Anna wants to place some landmarks in specific cells. Given the coordinates of these landmarks, Anna wants to plan the shortest paths between every pair of landmarks. Your task is to help Anna by computing the shortest path distances between all pairs of landmarks in the park, ensuring that she has the optimal layout for the paths. -----Input----- The first line of the input contains two integers n and m (1 le n, m le 100) representing the number of rows and columns in the park grid, respectively. The second line contains a single integer k (2 le k le 20) — the number of landmarks in the park. The following k lines each contain two integers x_i and y_i (1 le x_i le n, 1 le y_i le m) denoting the coordinates of the i-th landmark. -----Output----- Print a k times k matrix of integers, where the element at the i-th row and j-th column represents the shortest path distance between the i-th and j-th landmarks. -----Examples----- Input 3 3 3 1 1 2 2 3 3 Output 0 2 4 2 0 2 4 2 0 Input 2 2 2 1 2 2 1 Output 0 2 2 0 -----Note----- In the first example, the park is a grid of size 3x3 with landmarks at (1, 1), (2, 2), and (3, 3). The shortest path distances are calculated as follows: - Distance between (1, 1) and (2, 2): 2 units - Distance between (1, 1) and (3, 3): 4 units - Distance between (2, 2) and (3, 3): 2 units In the second example, the park is a grid of size 2x2 with landmarks at (1, 2) and (2, 1). The shortest path distances are both 2 units.","solution":"def landmark_distances(n, m, k, landmarks): Computes the shortest path distances between all pairs of landmarks in the park grid. Args: n: int - number of rows in the grid m: int - number of columns in the grid k: int - number of landmarks landmarks: list of tuple - list of coordinates of the landmarks Returns: list of list of int - a k x k matrix where the element at the i-th row and j-th column represents the shortest path distance between the i-th and j-th landmarks def manhattan_distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) # Initialize the k x k distance matrix distance_matrix = [[0] * k for _ in range(k)] # Fill in the distance matrix with the Manhattan distances for i in range(k): for j in range(k): if i != j: distance_matrix[i][j] = manhattan_distance(landmarks[i], landmarks[j]) return distance_matrix"},{"question":"You have been given two lists of integers. Write a function that returns the intersection of the two lists. The intersection is a list containing all the elements that are common to both input lists, without duplicates, and in the order they appear in the first list. Function Signature: ```python def list_intersection(list1: List[int], list2: List[int]) -> List[int]: pass ``` Example Input: ```python list1 = [1, 2, 2, 1] list2 = [2, 2] ``` Output: ```python [2] ``` Input: ```python list1 = [4, 9, 5] list2 = [9, 4, 9, 8, 4] ``` Output: ```python [4, 9] ``` Note: - The input lists are non-sorted. - Ensure no duplicate elements are in the output list. - The order of output elements should be the same as their first appearance in `list1`.","solution":"def list_intersection(list1, list2): Returns the intersection of two lists with unique elements from the first list, maintaining the order they appear in the first list. set2 = set(list2) seen = set() result = [] for element in list1: if element in set2 and element not in seen: result.append(element) seen.add(element) return result"},{"question":"Given n number of strings, write a function to determine if each string in the given list is a palindrome. A string is considered a palindrome if it reads the same backward as forward, for example, \\"madam\\" or \\"racecar\\". Function Signature: ```python def check_palindromes(strings: List[str]) -> List[bool]: pass ``` # Input - List of strings `strings` of length n (1 <= n <= 1000) - Each string `strings[i]` (1 <= len(strings[i]) <= 100) contains only lowercase alphabets. # Output Return a list of boolean values, where each value corresponds to whether the respective string in the input list is a palindrome. # Example Input ```python [\\"madam\\", \\"racecar\\", \\"apple\\", \\"radar\\", \\"hello\\"] ``` Output ```python [True, True, False, True, False] ``` Explanation - \\"madam\\" reads the same forward and backward, so it is a palindrome. - \\"racecar\\" reads the same forward and backward, so it is a palindrome. - \\"apple\\" does not read the same forward and backward, so it is not a palindrome. - \\"radar\\" reads the same forward and backward, so it is a palindrome. - \\"hello\\" does not read the same forward and backward, so it is not a palindrome.","solution":"def check_palindromes(strings): Determines if each string in the given list is a palindrome. Args: strings (List[str]): A list of strings. Returns: List[bool]: A list of boolean values indicating whether each string is a palindrome. palindromes = [] for string in strings: palindromes.append(string == string[::-1]) return palindromes"},{"question":"You are given a string S consisting of lowercase alphabets and a pattern P, also consisting of lowercase alphabets. You are allowed to perform exactly one operation: increase the frequency of any character in string S by one. Your task is to determine whether it is possible to match string S with the pattern P by performing this operation exactly once. Two strings are said to be matching if they are permutations of each other. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains the string S. - The second line of each test case contains the string P. ------ Output Format ------ For each test case, print \\"Yes\\" if it is possible to make the string S match the pattern P by performing exactly one operation. Otherwise, print \\"No\\". ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ |S|, |P| ≤ 10^{5} - Both S and P will contain only lowercase English letters. ------ Sample Input 1 ------ 3 abc cab aabb aab aab abc ------ Sample Output 1 ------ Yes Yes No ------ explanation 1 ------ Test Case 1: Given S = [abc] and P = [cab]. No operation is needed as the strings are already permutations of each other. Hence, \\"Yes\\". Test Case 2: Given S = [aabb] and P = [aab]. We can increase the frequency of the character \'a\' in S by one to get \\"aaabb\\". This matches the pattern P. Hence, \\"Yes\\". Test Case 3: Given S = [aab] and P = [abc]. Even after performing the increment operation on any character of S, it is impossible to make it a permutation of P. Hence, \\"No\\".","solution":"def can_match_with_one_operation(S, P): from collections import Counter # Count frequency of characters in both strings count_S = Counter(S) count_P = Counter(P) # If len(S) < len(P), it\'s impossible to match since we can only increase, not remove characters if len(S) < len(P): return \\"No\\" # We need to match every character in P with S\'s frequency for char in count_P: if count_P[char] > count_S[char]: return \\"No\\" # We can make S match P by increasing one character frequency return \\"Yes\\" def process_test_cases(test_cases): results = [] for S, P in test_cases: results.append(can_match_with_one_operation(S, P)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): S = data[index] P = data[index + 1] test_cases.append((S, P)) index += 2 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a list of n positive integers. Your task is to find the largest divisor of each number in the list, other than the number itself. Input The first line contains integer n (1 ≤ n ≤ 100) — the number of positive integers. The second line contains n integers separated by spaces, where each integer x (1 ≤ x ≤ 10^9) is a number from the list. Output Output n integers, each representing the largest divisor of the corresponding input number, other than the number itself. Examples Input 3 10 15 21 Output 5 5 7 Input 4 8 16 23 49 Output 4 8 1 7 Note In the first sample, the largest divisor of 10 other than itself is 5, for 15 it is 5, and for 21 it is 7. In the second sample, the largest divisor of 8 other than itself is 4, for 16 it is 8, 23 is a prime number so its largest divisor other than itself is 1, and for 49 it is 7.","solution":"def largest_divisors(nums): Function to find the largest divisor of each number in the list other than itself. def largest_divisor(n): Helper function to find the largest divisor of a given number n other than itself. for i in range(2, int(n**0.5) + 1): if n % i == 0: return n // i return 1 return [largest_divisor(num) for num in nums] # Example usage: # if __name__ == \\"__main__\\": # n = int(input().strip()) # nums = list(map(int, input().strip().split())) # print(*largest_divisors(nums))"},{"question":"You are working on a financial system to monitor and manage customer transactions in real-time. One of the most critical tasks is to identify any unusual spikes in transactions that could indicate potential fraud or errors. You are given a history of transaction amounts for a customer, and you need to detect significant shifts in the pattern. Your task is to identify whether there are transaction amounts that significantly deviate from the previous transactions. A transaction is considered to be a spike if it is more than double the average of the three preceding transactions. If there are fewer than three preceding transactions, simply check if it is more than double the average of all previous transactions. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1 le t le 500), the number of test cases. The first line of each test case contains an integer n (1 le n le 100), the number of transactions. The second line of each test case contains n integers separated by spaces, representing the transaction amounts, a_i (1 le a_i le 10^6). -----Output----- For each test case, print \\"Alert\\" if there exists at least one transaction that is considered a spike. Otherwise, print \\"Safe\\". -----Examples----- Input 3 5 10 15 20 100 30 4 50 40 35 200 6 100 150 120 130 140 210 Output Alert Alert Safe -----Note----- In the first test case, the transaction amounts are [10, 15, 20, 100, 30]. The fourth transaction (100) is more than twice the average of the first three transactions ((10 + 15 + 20) / 3 = 15). Therefore, the result is \\"Alert\\". In the second test case, the transaction amounts are [50, 40, 35, 200]. The fourth transaction (200) is more than double the average of the previous three transactions ((50 + 40 + 35) / 3 ≈ 41.67). Hence, the result is \\"Alert\\". In the third test case, the transaction amounts are [100, 150, 120, 130, 140, 210]. No transaction is more than twice the average of the previous three transactions. Therefore, the output is \\"Safe\\".","solution":"def detect_spikes(t, test_cases): results = [] for case in test_cases: n, transactions = case alert = False for i in range(3, n): preceding_transactions = transactions[i-3:i] average = sum(preceding_transactions) / 3 if transactions[i] > 2 * average: alert = True break results.append(\\"Alert\\" if alert else \\"Safe\\") return results"},{"question":"You are given a rectangular grid of size N times M consisting of cells with different elevations. Each cell in this grid has an integer value representing its elevation. You need to find the maximum elevation difference between any two adjacent cells on the grid. -----Input----- The first line contains two integers N and M (1 le N, M le 100) denoting the dimensions of the grid. Each of the next N lines contains M space-separated integers indicating the elevation values of the cells in that row. -----Output----- Print an integer representing the maximum elevation difference between any two adjacent cells on the grid. -----Examples----- Sample Input: 3 4 1 2 3 4 5 6 7 8 9 10 11 12 Sample Output: 4 Sample Input: 2 2 1 100 2 3 Sample Output: 99","solution":"def max_elevation_difference(grid): Returns the maximum elevation difference between any two adjacent cells on the grid. Parameters: grid (list of list of int): A 2D list representing the grid with elevation values. Returns: int: The maximum elevation difference. N = len(grid) M = len(grid[0]) max_diff = 0 def get_diff(i, j, ni, nj): return abs(grid[i][j] - grid[ni][nj]) for i in range(N): for j in range(M): if i > 0: max_diff = max(max_diff, get_diff(i, j, i-1, j)) # Up if i < N - 1: max_diff = max(max_diff, get_diff(i, j, i+1, j)) # Down if j > 0: max_diff = max(max_diff, get_diff(i, j, i, j-1)) # Left if j < M - 1: max_diff = max(max_diff, get_diff(i, j, i, j+1)) # Right return max_diff # Example usage: # grid = [ # [1, 2, 3, 4], # [5, 6, 7, 8], # [9, 10, 11, 12] # ] # print(max_elevation_difference(grid)) # Output: 4"},{"question":"Write a function to determine if a given positive integer N is a \\"Zigzag Number\\". A number is defined as a \\"Zigzag Number\\" if each digit alternates between being less than and greater than the adjacent digits, starting either way. In other words, N is a Zigzag Number if and only if for every odd index i (0-based), either: - digits[i] > digits[i+1] and digits[i] > digits[i-1], or - digits[i] < digits[i+1] and digits[i] < digits[i-1] You need to verify the above property for all valid i such that 0 < i < len(N)-1. Example 1: Input: N = 121 Output: True Explanation: Digits of the number are 1, 2, and 1, which alternate between increasing and decreasing. Example 2: Input: N = 123 Output: False Explanation: Digits of the number are 1, 2, 3, which do not follow the Zigzag property. Your Task: You do not need to read input or print anything. Your task is to complete the function isZigzagNumber() which takes an integer N and returns a boolean indicating whether it is a Zigzag Number. Expected Time Complexity: O(d) where d is the number of digits in N. Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{9}","solution":"def isZigzagNumber(N): Determines if the given positive integer N is a \\"Zigzag Number\\". Args: N (int): A positive integer. Returns: bool: True if N is a Zigzag Number, otherwise False. digits = list(map(int, str(N))) length = len(digits) if length < 3: return True for i in range(1, length - 1): if not ((digits[i] > digits[i-1] and digits[i] > digits[i+1]) or (digits[i] < digits[i-1] and digits[i] < digits[i+1])): return False return True"},{"question":"The kingdom of Primeville is building a new reservoir to supply water to the entire nation. The design of the reservoir consists of multiple tanks connected by pipes. To ensure a proper and efficient water distribution system, the engineers must determine the best order of filling these tanks. Each tank i (1 ≤ i ≤ n) has a specific capacity, denoted by ci units of water, and a particular filling requirement, ri units of water, that needs to be initially added to start the filling process. Additionally, some tanks depend on the water level of other tanks because the pipes connecting them have certain constraints. Given a list of tanks with their respective capacities and filling requirements, as well as a list of dependency pairs (tanks i and j such that tank j cannot start filling until tank i has at least half of its capacity filled), determine the optimal sequence for filling the tanks. The objective is to minimize the total dependencies while ensuring each tank meets its filling requirements and dependencies. Input: - The first line contains two integers n (the number of tanks) and m (the number of dependency pairs) (1 ≤ n, m ≤ 1000). - The next n lines each contain two integers, ci and ri (1 ≤ ci, ri ≤ 10000), representing the capacity and filling requirement of each tank. - The following m lines each contain two integers a and b (1 ≤ a, b ≤ n), representing a dependency where tank b cannot start filling until tank a has at least half of its capacity filled. Output: - On the first line, print an integer representing the minimum number of total dependencies in the optimal filling sequence. - If the optimal sequence exists, print n lines, each containing a single integer representing the order in which the tanks should be filled (1-indexed). If multiple sequences are optimal, output any of them. Example: Input: 4 2 10 4 8 5 6 2 7 3 1 2 3 4 Output: 0 1 3 4 2 Explanation: In this example, the optimal sequence has no dependencies violated. The tanks are filled in the order such that all requirements and dependencies are satisfied.","solution":"from collections import deque, defaultdict def fill_tanks(n, m, tank_data, dependencies): # Parse tank capacities and requirements capacities = [0] * n requirements = [0] * n for i in range(n): capacities[i], requirements[i] = tank_data[i] # Create adjacency list and indegree array for dependencies adj_list = defaultdict(list) in_degree = [0] * n for a, b in dependencies: adj_list[a-1].append(b-1) in_degree[b-1] += 1 # Topological Sort to find valid fill order fill_order = [] queue = deque() # Start with tanks having 0 dependencies for i in range(n): if in_degree[i] == 0: queue.append(i) while queue: curr = queue.popleft() fill_order.append(curr + 1) # Store in 1-indexed format # Reduce the in-degree of the dependent tanks for neighbor in adj_list[curr]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(fill_order) == n: return 0, fill_order else: return -1, [] def optimal_tank_fill_sequence(n, m, tank_data, dependencies): result = fill_tanks(n, m, tank_data, dependencies) min_dependencies, fill_order = result if min_dependencies == -1: print(\'It is not possible to finish the installations without violating the dependencies.\') else: print(min_dependencies) for tank in fill_order: print(tank)"},{"question":"In a faraway land, there is a magical forest with N enchanted trees arranged in a straight line. Each tree can either be enchanted or not, represented by an array C of length N where Ci = 1 if the i-th tree is enchanted and 0 if it is not. Additionally, there is a complementary array D of the same length, where Di gives the magic power associated with the i-th tree. A wizard has two types of spells he can cast over the forest: 1. Given two integers L and R, calculate the sum of magic power for all the enchanted trees between the L-th and R-th tree, inclusive. 2. Given two integers L and R, count the number of enchanted trees between the L-th and R-th tree, inclusive. Input The first line of input contains two space-separated integers N and Q denoting the number of trees and the number of spells to be cast respectively. The second line contains N space-separated integers denoting the array C. The third line contains N space-separated integers denoting the array D. The next Q lines contain one query each, with the format being one of the two types of spells described above. Output Output consists of Q lines, each containing the result of the corresponding query. Constraints 1 ≤ N, Q ≤ 10^5 0 ≤ Ci ≤ 1 1 ≤ Di ≤ 10^9 1 ≤ L, R ≤ N SAMPLE INPUT 6 4 1 0 1 1 0 1 5 3 7 9 4 6 1 2 5 2 1 6 1 1 4 2 3 6 SAMPLE OUTPUT 16 4 21 3 Explanation Q1: Sum of magic power for enchanted trees between the 2nd and 5th tree is 7 (C[3] = 1, D[3] = 7) + 9 (C[4] = 1, D[4] = 9) = 16. Q2: Number of enchanted trees between the 1st and 6th tree is 4 (C[1]=1, C[3]=1, C[4]=1, C[6]=1). Q3: Sum of magic power for enchanted trees between the 1st and 4th tree is 5 (C[1] = 1, D[1] = 5) + 7 (C[3] = 1, D[3] = 7) + 9 (C[4] = 1, D[4] = 9) = 21. Q4: Number of enchanted trees between the 3rd and 6th tree is 3 (C[3]=1, C[4]=1, C[6]=1).","solution":"def process_queries(N, Q, C, D, queries): # Precompute the prefix sums and enchanted counts prefix_magic_power = [0] * (N + 1) prefix_enchanted_count = [0] * (N + 1) for i in range(1, N + 1): prefix_magic_power[i] = prefix_magic_power[i - 1] + (D[i - 1] if C[i - 1] == 1 else 0) prefix_enchanted_count[i] = prefix_enchanted_count[i - 1] + C[i - 1] results = [] for query in queries: type_query, L, R = query if type_query == 1: result = prefix_magic_power[R] - prefix_magic_power[L - 1] elif type_query == 2: result = prefix_enchanted_count[R] - prefix_enchanted_count[L - 1] results.append(result) return results"},{"question":"The natural beauty of the city park is well known, and it is home to various species of birds. Each spring, N species of birds nest in the park, and with the onset of autumn, they begin migrating to warmer regions. Each species has a distinct arrival day and departure day. Your task is to identify the species of birds that stay in the park for the most number of days. Birds are represented as intervals [Ai, Bi], where Ai is the arrival day, and Bi is the departure day of the i-th species. Each interval is an inclusive range, meaning the bird is present in the park on both the arrival and departure days. Your goal is to find the maximum number of days a single species of bird spent in the park. Input: - The first line contains an integer N, which represents the number of bird species. - The next N lines each contain two integers, Ai and Bi, indicating the arrival and departure days of each bird species. Output: - A single integer representing the maximum number of days a single species spent in the park. Constraints: 1 ≤ N ≤ 100 1 ≤ Ai, Bi ≤ 1000 Ai ≤ Bi Example: Input: 5 1 7 5 12 3 8 2 4 6 10 Output: 8","solution":"def max_days_in_park(N, intervals): Finds the maximum number of days a single species of bird spent in the park. :param N: int, number of bird species :param intervals: list of tuples, where each tuple contains two integers (Ai, Bi) representing the arrival and departure days of each bird species. :return: int, maximum number of days a single species of bird spent in the park. max_days = 0 for arrival, departure in intervals: days_in_park = departure - arrival + 1 if days_in_park > max_days: max_days = days_in_park return max_days"},{"question":"In a grid composed of obstacles and open spaces, represented as a 2D array grid, where 1 represents an obstacle and 0 represents an open space, you need to determine if there is a path from the top-left corner to the bottom-right corner. You can only move up, down, left, or right, and cannot move through obstacles. Write a function that returns True if such a path exists, and False otherwise. Example: Input: grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 0, 0, 0] ] Output: True Explanation: There is a path from the top-left corner to the bottom-right corner in this grid, as follows: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,3) -> (4,3) -> (4,4) Note: - 1 <= len(grid), len(grid[0]) <= 100 - grid[i][j] is either 0 or 1","solution":"from collections import deque def is_path_exist(grid): if not grid or not grid[0]: return False rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return False directions = [(0,1),(1,0),(0,-1),(-1,0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (rows-1, cols-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"Description: Write a function that takes an array of integers and returns the sum of the largest and smallest integers in the array. # Examples ``` sumLargestSmallest([1, 2, 3, 4, 5]) === 6 // 5 + 1 = 6 sumLargestSmallest([-10, -5, 0, 5, 10]) === 0 // 10 + (-10) = 0 sumLargestSmallest([3, 7, 9, 1, 6]) === 10 // 9 + 1 = 10 sumLargestSmallest([1]) === 2 // 1 + 1 = 2 ```","solution":"def sumLargestSmallest(arr): Returns the sum of the largest and smallest integers in the array. If there is only one element, it adds the element to itself. if len(arr) == 0: raise ValueError(\\"Array must contain at least one element\\") largest = max(arr) smallest = min(arr) return largest + smallest"},{"question":"Given a string S, representing a sequence of words separated by spaces, calculate the \\"beauty score\\" of the sentence. The beauty score is defined as the sum of beauty of each word. The beauty of a word is determined by the sum of its character values: - a = 1, b = 2, c = 3, ..., z = 26 - Capital letters are considered the same as their lowercase counterparts (A = 1, B = 2, ..., Z = 26). Return the total beauty score of the entire sentence. Example Input: S = \\"Hello World\\" Output: 124 Explanation: H = 8, e = 5, l = 12, l = 12, o = 15 (sum is 52) W = 23, o = 15, r = 18, l = 12, d = 4 (sum is 72) Total beauty score = 52 + 72 = 124 Example Input: S = \\"abc ABC\\" Output: 12 Explanation: a = 1, b = 2, c = 3 (sum is 6) A = 1, B = 2, C = 3 (sum is 6) Total beauty score = 6 + 6 = 12 Function Signature: def calculate_beauty_score(S: str) -> int Expected Time Complexity: O(n), where n is the length of the string. Expected Auxiliary Space: O(1). Constraints: 1 <= length(S) <= 10^5","solution":"def calculate_beauty_score(S: str) -> int: Returns the total beauty score of the entire sentence S. The beauty score is defined as the sum of the beauty of each word. The beauty of a word is determined by the sum of its character values. total_beauty_score = 0 for char in S: if char.isalpha(): total_beauty_score += ord(char.lower()) - ord(\'a\') + 1 return total_beauty_score"},{"question":"You are given N distinct integers in a list. Your task is to find the Kth smallest element in the list. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ N - Each element of the list is an integer between -10^9 and 10^9, inclusive. -----Input----- Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N The first line contains two integers, N (the number of elements in the list), and K (the Kth smallest element to find). The second line contains N distinct integers, representing the list A. -----Output----- Print the Kth smallest element in the list. -----Sample Input----- 5 3 8 3 2 7 4 -----Sample Output----- 4 In this example, the list is [8, 3, 2, 7, 4]. The sorted list is [2, 3, 4, 7, 8]. The 3rd smallest element is 4.","solution":"def kth_smallest_element(n, k, lst): Returns the Kth smallest element in the list lst of n distinct integers. lst.sort() # Sorting the list return lst[k-1] # Returning the Kth smallest element"},{"question":"Given a non-negative integer `n`, write a program to reverse the digits of the integer. If the reversed integer overflows when only considering 32-bit signed integer range (-2^31 to 2^31-1), return 0. Input `n` - a single non-negative integer. Output Return the reversed integer, or 0 if it overflows as a 32-bit signed integer. Constraints 0 ≤ n ≤ 2^31 - 1 SAMPLE INPUT 123 SAMPLE OUTPUT 321 SAMPLE INPUT 1534236469 SAMPLE OUTPUT 0","solution":"def reverse_integer(n): Reverse the digits of a non-negative integer. If the reversed integer overflows 32-bit signed integer range, return 0. reversed_int = int(str(n)[::-1]) if reversed_int > (2**31 - 1): return 0 return reversed_int"},{"question":"Sudoku is a popular logic-based number placement puzzle. The objective is to fill a 9x9 grid with digits so that each column, each row, and each of the nine 3x3 sub-grids that compose the grid (also called \\"boxes\\") contains all of the digits from 1 to 9. Little Jenny has written some numbers on the Sudoku board, and she wants to know if her current board is valid. Specifically, the board is considered valid if: 1. Each row contains the digits from 1 to 9 with no duplicates. 2. Each column contains the digits from 1 to 9 with no duplicates. 3. Each of the nine 3x3 sub-grids contains the digits from 1 to 9 with no duplicates. Jenny\'s Sudoku board is represented by a 9x9 grid, where each cell might contain an integer from 1 to 9 or be empty (indicated by 0). Write a function to determine if the current state of the Sudoku board is valid. ----- Input ----- A single 2D list of 9x9 elements where each element is an integer from 0 to 9. ----- Output ----- Return a boolean value `True` if the Sudoku board is valid, and `False` otherwise. ----- Example ----- Input: [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] Output: True Note: The input shows a valid Sudoku board where no number is repeated in any row, column, or 3x3 sub-grid.","solution":"def isValidSudoku(board): Determine if a Sudoku board is valid. Parameters: board (list[list[int]]): 9x9 Sudoku board Returns: bool: True if the Sudoku board is valid, False otherwise rows = [set() for _ in range(9)] cols = [set() for _ in range(9)] boxes = [set() for _ in range(9)] for i in range(9): for j in range(9): num = board[i][j] if num != 0: box_index = (i // 3) * 3 + (j // 3) if num in rows[i]: return False if num in cols[j]: return False if num in boxes[box_index]: return False rows[i].add(num) cols[j].add(num) boxes[box_index].add(num) return True"},{"question":"=====Function Descriptions===== sum The sum tool returns the sum of array elements over a given axis. import numpy my_array = numpy.array([[1, 2, 3], [4, 5, 6]]) print numpy.sum(my_array, axis = 0) #[5 7 9] print numpy.sum(my_array, axis = 1) #[ 6 15] print numpy.sum(my_array) #21 prod The prod tool returns the product of array elements over a given axis. import numpy my_array = numpy.array([[1, 2, 3], [4, 5, 6]]) print numpy.prod(my_array, axis = 0) #[ 4 10 18] print numpy.prod(my_array, axis = 1) #[ 6 120] print numpy.prod(my_array) #720 =====Problem Statement===== You are given a 2-D array, A. Your task is to print the sum of A\'s elements for each axis separately as well as the overall sum. Then print the product of A\'s elements for each axis separately as well as the overall product. =====Input Format===== The first line contains two integers, N and M, representing the dimensions of the array. The next N lines contain M space-separated integers representing the elements of the array A. =====Output Format===== On the first line, print the sum of A\'s elements along axis 0. On the second line, print the sum of A\'s elements along axis 1. On the third line, print the sum of all elements in A. On the fourth line, print the product of A\'s elements along axis 0. On the fifth line, print the product of A\'s elements along axis 1. On the sixth line, print the product of all elements in A.","solution":"import numpy as np def sum_and_prod_of_array_elements(N, M, array_elements): This function takes dimensions of a 2-D array and the array elements, and prints the sum and product of the array\'s elements. A = np.array(array_elements).reshape(N, M) sum_axis_0 = np.sum(A, axis=0) sum_axis_1 = np.sum(A, axis=1) sum_all = np.sum(A) prod_axis_0 = np.prod(A, axis=0) prod_axis_1 = np.prod(A, axis=1) prod_all = np.prod(A) return (sum_axis_0, sum_axis_1, sum_all, prod_axis_0, prod_axis_1, prod_all)"},{"question":"Arroville is a small city with a peculiar road network. There are N intersections and E bidirectional roads directly connecting some pairs of intersections. For a better public transportation system, we need to build a network of bus routes. Given the above road network, the goal is to find the minimum number of bus routes that can cover all intersections. A bus route should form a connected subgraph where you can travel between any pair of intersections on that route without leaving the route. # Input Format - The first line contains a single integer T — the number of test cases. - The first line of each test case contains two integers N and E — the number of intersections and roads respectively. - E subsequent lines each contain two space-separated integers u and v representing a road between intersections u and v. # Output Format - For each test case, output a single integer, the minimum number of bus routes required to cover all intersections. # Constraints - 1 ≤ T ≤ 500 - 2 ≤ N ≤ 1000 - 0 ≤ E ≤ 5000 - 1 ≤ u, v ≤ N - No two roads connect the same pair of intersections. - The given graph may be disconnected. # Sample Input 1 ``` 3 6 5 1 2 1 3 2 4 3 4 5 6 3 0 1 2 2 1 1 ``` # Sample Output 1 ``` 2 3 1 ``` # Explanation - Test case 1: There are 6 intersections with roads forming two separate connected components (1-2-4-3 and 5-6), thus, at least 2 bus routes are required, one for each component. - Test case 2: With 3 isolated intersections and no roads, each intersection itself needs its own bus route, so 3 routes are necessary. - Test case 3: With 2 intersections already connected by a direct road, only 1 bus route is sufficient for the whole network.","solution":"def find_connected_components(N, adj_list): visited = [False] * (N + 1) def dfs(node): stack = [node] while stack: current = stack.pop() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) num_components = 0 for i in range(1, N + 1): if not visited[i]: num_components += 1 visited[i] = True dfs(i) return num_components def min_bus_routes(T, test_cases): results = [] for N, E, edges in test_cases: adj_list = [[] for _ in range(N + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) results.append(find_connected_components(N, adj_list)) return results"},{"question":"The city traffic management system wants to improve the efficiency of traffic lights at multiple intersections. They have a plan to synchronize lights based on traffic flow patterns. For a given set of traffic light durations at multiple intersections, they want to ensure that the lights switch at the same time as often as possible to minimize waiting time for drivers. Given a list of durations (in seconds) for each traffic light at different intersections, find the smallest duration that can synchronize all the traffic lights. This duration should be the least common multiple (LCM) of the given durations. Input The first line of input contains an integer n (1 ≤ n ≤ 50), the number of intersections. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 1000), representing the duration of the traffic lights at each intersection. Output Print the smallest duration in seconds that can synchronize all the traffic lights. Examples Input 3 6 8 12 Output 24 Input 2 4 5 Output 20 Input 4 2 3 7 11 Output 462 Note The least common multiple (LCM) of two or more integers is the smallest positive integer that is divisible by each of them.","solution":"from math import gcd from functools import reduce def lcm(a, b): Calculate the Least Common Multiple (LCM) of two numbers. return a * b // gcd(a, b) def find_synchronized_duration(durations): Given a list of traffic light durations, find the smallest duration that synchronizes all traffic lights. return reduce(lcm, durations) def main(n, durations): return find_synchronized_duration(durations)"},{"question":"You are given a sequence of positive integers where every integer appears twice except for one that appears only once. Your task is to find the integer that appears only once. Input The first line contains an integer N (1 leq N leq 10^6), representing the number of elements in the sequence. The second line contains N space-separated integers a_1, a_2, ..., a_N (1 leq a_i leq 10^6), where each integer except one appears exactly twice. Output Output a single line containing the integer that appears only once. Constraints 1 leq N leq 10^6 1 leq a_i leq 10^6 Examples Input 7 4 3 2 4 1 3 2 Output 1 Input 5 5 3 4 5 4 Output 3","solution":"def find_unique_number(arr): Returns the integer that appears exactly once in the array, while all other integers appear twice. Uses XOR operation to achieve this in O(N) time complexity. unique_number = 0 for number in arr: unique_number ^= number return unique_number # Example usage: # N = 7 # sequence = [4, 3, 2, 4, 1, 3, 2] # print(find_unique_number(sequence)) # Output: 1"},{"question":"A spaceship is navigating through an asteroid field. To avoid collisions, it needs to adjust its path. The asteroid field can be represented as an MxN grid, where each cell can be either empty (.) or occupied by an asteroid (#). The spaceship can move from any cell to the neighboring cells in four possible directions: up, down, left, and right. The start cell of the spaceship is (1, 1) and the destination cell is (M, N). Implement a function to determine the minimum number of moves required for the spaceship to reach its destination, avoiding asteroids. If it is not possible to reach the destination, return -1. Input: - The first line contains two integers, M and N, denoting the dimensions of the grid. - The next M lines each consist of N characters (either \'.\' or \'#\') representing the asteroid field. Output: - Print the minimum number of moves required to reach the destination cell (M, N) from the start cell (1, 1). If it is not possible to reach the destination, return -1. Constraints: 1 ≤ M, N ≤ 500 Example: Input: 5 5 ..... .#. ..... .#. ..... Output: 8 Explanation: The possible path from (1, 1) to (5, 5) while avoiding asteroids is: (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (1, 5) -> (2, 5) -> (3, 5) -> (4, 5) -> (5, 5) Thus, the minimum number of moves required is 8. If there were no possible path, the output would be -1.","solution":"from collections import deque def min_moves_to_destination(M, N, grid): Returns the minimum number of moves required to reach the destination (M, N) from the starting point (1, 1) in a given M x N grid. If it is not possible to reach the destination, returns -1. if grid[0][0] == \'#\' or grid[M-1][N-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * N for _ in range(M)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == M-1 and y == N-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"Write a function that takes in a list of integers and returns the maximum product that can be obtained by multiplying two distinct elements in the list. For example: ```python max_product([1, 2, 3, 4]) == 12 # 3 * 4 max_product([-10, -10, 5, 2]) == 100 # -10 * -10 max_product([1, 5, 10, 4, 3]) == 50 # 5 * 10 ```","solution":"def max_product(nums): Returns the maximum product that can be obtained by multiplying two distinct elements in the list. if len(nums) < 2: raise ValueError(\\"The list must contain at least two elements\\") nums.sort() return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"The tech company \\"Data Corp\\" is hosting a programming challenge to hire smart coders. In this challenge, participants are given the task to simulate an elevator system in a specialized building. The building has exactly `F` floors and two elevators. The challenge is to write a program that determines the minimum number of button presses needed to bring both elevators to the ground floor (1st floor), starting from their initial floors. Description The building has `F` floors, numbered `1` to `F`. The elevators start at different given initial floors. The allowed button presses for each elevator are: 1. Move up one floor. 2. Move down one floor. However, there are some constraints: - The elevator cannot go below the 1st floor or above the `F`-th floor. - Each elevator operates independently. Your goal is to output the minimum total combined number of button presses needed for both elevators to reach the ground floor. Input Format - The first line contains an integer `T`, the number of test cases. - Each test case consists of a single line containing three integers: `F`, the total number of floors, `E1`, the initial floor of the first elevator, and `E2`, the initial floor of the second elevator. Output Format - For each test case, print a single integer representing the minimum total number of button presses required. Constraints - `1 ≤ T ≤ 1000` - `1 ≤ F ≤ 10^9` - `1 ≤ E1, E2 ≤ F` Sample Input 4 10 6 8 15 15 1 5 5 5 100 50 100 Sample Output 13 14 8 99 Explanation - In the first test case, the first elevator needs 5 presses to move from the 6th floor to the 1st floor, and the second elevator needs 7 presses to move from the 8th floor to the 1st floor. So, the total is 5 + 7 = 12 presses. - In the second test case, the first elevator needs 14 presses to move from the 15th floor to the 1st floor, and the second elevator is already on the 1st floor, so no press is needed. So, the total is 14 + 0 = 14 presses. - In the third test case, both elevators need 4 presses each to reach the 1st floor. So, the total is 4 + 4 = 8 presses. - In the fourth test case, the first elevator needs 49 presses to move from the 50th floor to the 1st floor, and the second elevator needs 99 presses to move from the 100th floor to the 1st floor. So, the total is 49 + 99 = 148 presses.","solution":"def min_total_button_presses(T, cases): Computes the minimum total combined number of button presses needed for both elevators to reach the ground floor (1st floor). Parameters: - T: number of test cases - cases: List of test cases where each test case is a tuple (F, E1, E2) Returns: - List of integers, where each integer represents the minimum total button presses needed for each corresponding test case. results = [] for case in cases: F, E1, E2 = case presses = (E1 - 1) + (E2 - 1) results.append(presses) return results"},{"question":"You are given a string S consisting of lowercase English letters. Determine whether S is an anagram of the string \\"iloveyou\\". An anagram of a particular word or phrase is a rearrangement of its letters to form another word or phrase. Each letter can only be used once, and the resulting word or phrase must be of the same length as the original. -----Constraints----- - The length of the string S is 8. - S consists of lowercase English letters only. -----Input----- Input is given from Standard Input in the following format: S -----Output----- If S is an anagram of \\"iloveyou\\", print Yes; otherwise, print No. -----Sample Input----- youilove -----Sample Output----- Yes Since the letters in \\"youilove\\" can be rearranged to form \\"iloveyou\\", it is an anagram and you should print Yes.","solution":"def is_anagram_of_iloveyou(S): Determines whether the string S is an anagram of the string \\"iloveyou\\". return sorted(S) == sorted(\\"iloveyou\\")"},{"question":"You are given a list of `N` integers and a value `X`. You need to determine whether there are two distinct indices `i` and `j` such that the sum of the values at these indices equals `X`. # Input Format - The first line contains an integer `T` denoting the number of test cases. - Each test case consists of: - A line with two integers `N` (number of elements) and `X` (target sum). - A line with `N` space-separated integers representing the elements of the list. # Output Format For each test case, output \\"YES\\" if there exist two distinct indices `i` and `j` such that `arr[i] + arr[j] = X`. Otherwise, output \\"NO\\". # Constraints - `1 ≤ T ≤ 100` - `2 ≤ N ≤ 10^5` - `-10^9 ≤ X, arr[i] ≤ 10^9` # Sample Input ``` 3 5 10 1 2 3 4 6 4 7 3 1 2 4 3 4 1 1 1 ``` # Sample Output ``` YES YES NO ``` # Explanation In the first test case, the pair `(4,6)` sums to `10`. In the second test case, the pair `(3,4)` sums to `7`. In the third test case, there are no two distinct indices that can sum up to `4`.","solution":"def find_pair_with_sum(N, X, arr): Determines if there exist two distinct indices i and j such that arr[i] + arr[j] = X seen = set() for number in arr: if X - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\" def solve(test_cases): Processes multiple test cases to determine if there exist two distinct indices with elements summing to X. results = [] for N, X, arr in test_cases: results.append(find_pair_with_sum(N, X, arr)) return results"},{"question":"Alice loves collecting rare gemstones. She has n different types of gemstones and each type of gemstone has a certain value. She has also placed a limit on her collection such that the total weight of all gemstones in her collection does not exceed a weight limit W. Given the value and weight of each type of gemstone, determine the maximum total value Alice can collect without exceeding the weight limit. Each type of gemstone can be taken at most once. Input The first line contains two integers n and W (1 ≤ n ≤ 1000; 1 ≤ W ≤ 10000) — the number of different types of gemstones and the weight limit of her collection. Each of the next n lines contains two integers vi and wi (1 ≤ vi ≤ 1000; 1 ≤ wi ≤ 10000) — the value and the weight of the i-th type of gemstone. Output Print a single integer — the maximum value Alice can collect without exceeding the weight limit. Example Input 4 10 10 5 40 4 30 6 50 3 Output 90 Explanation Alice can pick gemstones with weights 4 and 3, thus achieving a maximum value of 90 without exceeding the weight limit of 10.","solution":"def knapsack(n, W, gemstones): # Create a 2D array to store the maximum value that can be obtained with each weight limit dp = [[0] * (W + 1) for _ in range(n + 1)] # Iterate through each type of gemstone for i in range(1, n + 1): value, weight = gemstones[i-1] for w in range(W + 1): # If the current gemstone can\'t be included because it\'s too heavy if weight > w: dp[i][w] = dp[i-1][w] else: # Choose the maximum value between not including and including the current gem dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) return dp[n][W]"},{"question":"A fitness club offers discounts based on membership duration and the total number of workouts attended in a year. The club offers three tiers of discounts: - Diamond: More than 8 years of membership and at least 200 workouts. - Gold: More than 5 years of membership and at least 150 workouts. - Silver: More than 2 years of membership and at least 100 workouts. - No discount if the member does not meet the criteria for any tier. ------ Input Format ------ - The first line contains a single integer T, denoting the number of cases. - Each of the next T lines contains two integers Y and W, where Y is the number of years of membership and W is the number of workouts attended in a year. ------ Output Format ------ For each test case, print the discount tier the member qualifies for (Diamond, Gold, Silver, or None). You can print the discount tier in any case (for instance, strings diamond, DIAMOND, and DiAmOnD will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 500 0 ≤ Y ≤ 50 0 ≤ W ≤ 365 ----- Sample Input 1 ------ 4 9 210 6 160 3 110 1 90 ----- Sample Output 1 ------ Diamond Gold Silver None ----- Explanation 1 ------ Test Case 1: The member has 9 years of membership and 210 workouts, which qualifies for the Diamond discount tier. Test Case 2: The member has 6 years of membership and 160 workouts, which qualifies for the Gold discount tier. Test Case 3: The member has 3 years of membership and 110 workouts, which qualifies for the Silver discount tier. Test Case 4: The member has 1 year of membership and 90 workouts, which does not meet any discount criteria.","solution":"def discount_tier(t, cases): Determines the discount tier based on membership duration and workouts attended. :param t: Number of test cases :param cases: A list of tuples where each tuple contains (years_of_membership, workouts_attended) :return: A list of discount tiers for each test case result = [] for Y, W in cases: if Y > 8 and W >= 200: result.append(\'Diamond\') elif Y > 5 and W >= 150: result.append(\'Gold\') elif Y > 2 and W >= 100: result.append(\'Silver\') else: result.append(\'None\') return result # Example usage: # cases = [(9, 210), (6, 160), (3, 110), (1, 90)] # print(discount_tier(4, cases))"},{"question":"A software development company is tracking the progress of their projects. Each project goes through several milestones and they want to ensure that the milestones are logged correctly in their system. A milestone log is considered valid if the milestones are logged in chronological order and each milestone ID is distinct. Additionally, no milestones should have a negative or zero ID. Given a log of milestones for a single project, you are supposed to determine if the log is valid or not. ------ Input Format ------ - First line contains an integer N denoting the number of milestones logged. - Next N lines contain an integer Mi which is the milestone ID of the ith logged milestone. ------ Output Format ------ Print “VALID” if the log is valid else print “INVALID” without quotes. ------ Constraints ------ 1 ≤ N ≤ 10^{6} 1 ≤ Mi ≤ 10^{7} ------ Subtasks ------ 30 points: 1 ≤ N ≤ 10^{4} 70 points: Original Constraints ----- Sample Input 1 ------ 4 1 2 3 4 ----- Sample Output 1 ------ VALID ----- Sample Input 2 ------ 3 1 2 2 ----- Sample Output 2 ------ INVALID ----- Sample Input 3 ------ 3 3 2 1 ----- Sample Output 3 ------ INVALID","solution":"def is_log_valid(n, milestones): Determines if the log of milestones is valid. A log is valid if the milestones are logged in chronological order, each milestone ID is distinct, and each milestone ID is positive. Parameters: n (int): Number of milestones milestones (list): List of milestone IDs Returns: str: \\"VALID\\" if the log is valid, \\"INVALID\\" otherwise if not milestones or n != len(milestones): return \\"INVALID\\" previous_milestone = 0 seen_milestones = set() for milestone in milestones: if milestone <= previous_milestone or milestone in seen_milestones: return \\"INVALID\\" previous_milestone = milestone seen_milestones.add(milestone) return \\"VALID\\""},{"question":"Given a number N, check if the sum of its digits is divisible by 9. Example 1: Input: N=18 Output: 1 Explanation: The sum of the digits (1 + 8 = 9) is divisible by 9. Example 2: Input: N=12345 Output: -1 Explanation: The sum of the digits (1 + 2 + 3 + 4 + 5 = 15) is not divisible by 9. Your Task: You don\'t need to read input or print anything. Your task is to complete the function DivisibleByNine() which takes a string N as input and returns 1 if the sum of the digits is divisible by 9, else it returns -1. Expected Time Complexity: O(d), where d is the number of digits in N. Expected Auxiliary Space: O(1) Constraints: 1 <= digits in N < 10^6","solution":"def DivisibleByNine(N): Check if the sum of the digits is divisible by 9. Parameters: N (str): The input number in string format. Returns: int: 1 if the sum of the digits is divisible by 9, else -1. digit_sum = sum(int(char) for char in N) if digit_sum % 9 == 0: return 1 else: return -1"},{"question":"You are given an array of integers. You need to find two elements in the array such that their sum is closest to zero. If there are multiple pairs, you only need to find one of them. Input: First line of input contains an integer T, denoting the number of test cases. For each test case, the first line contains an integer N, denoting the size of the array. The next line contains N space-separated integers, denoting the elements of the array. Output: For each test case, output the two elements in a single line, separated by a space, whose sum is closest to zero. If there are multiple pairs, output any one of them. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 -10000 ≤ Array elements ≤ 10000 Example: Input: 2 6 -1 2 4 -3 10 -2 5 -5 1 2 3 -4 Output: -2 2 -4 3","solution":"def find_two_elements_with_closest_sum_to_zero(arr): Find two elements in the array such that their sum is closest to zero. arr.sort() left, right = 0, len(arr) - 1 closest_sum = float(\'inf\') best_pair = (arr[left], arr[right]) while left < right: current_sum = arr[left] + arr[right] if abs(current_sum) < abs(closest_sum): closest_sum = current_sum best_pair = (arr[left], arr[right]) if current_sum < 0: left += 1 elif current_sum > 0: right -= 1 else: break return best_pair def process_test_cases(test_cases): results = [] for array in test_cases: result = find_two_elements_with_closest_sum_to_zero(array) results.append(result) return results"},{"question":"Farmer John has a rectangular farm represented by a grid of size (N times M). Each cell in the grid is either fertile (denoted by the integer 1) or infertile (denoted by the integer 0). Farmer John wants to plant his crops in the largest square area of fertile cells he can find on his farm. However, the crop area should be a contiguous block of fertile cells that form a perfect square. Given the grid, your task is to determine the size of the largest square of fertile cells on the farm. If no contiguous block of fertile cells exists, the size is 0. -----Input----- - The first line of input contains two integers (N) and (M) representing the dimensions of the farm grid. - The next (N) lines contain (M) space-separated integers each, describing the grid. -----Output----- Print a single integer, the size of the largest square area of fertile cells. -----Constraints----- - (1 leq N, M leq 1000) - Each cell in the grid is either 0 or 1. -----Example Input----- 5 6 1 0 1 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 1 -----Example Output----- 3 -----Explanation----- In the example case, the largest square area of fertile cells (1) has a size of 3x3. The sub-grid of fertile cells could be visualized as: ``` 1 1 1 1 1 1 1 1 1 ```","solution":"def largest_fertile_square(n, m, grid): Returns the size of the largest square of fertile cells in the given grid. if not grid: return 0 max_size = 0 dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size # Example usage: n = 5 m = 6 grid = [ [1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 1] ] print(largest_fertile_square(n, m, grid)) # Output should be 3"},{"question":"You are given a task to develop a simple image filter. The filter will modify a given image matrix based on specific rules. The image is represented as a 2D matrix of integers, where each integer represents the grayscale value of a pixel (ranging from 0 to 255). The filter works as follows: 1. If the value of a pixel is greater than or equal to 128, set it to 255 (white). 2. If the value of a pixel is less than 128, set it to 0 (black). Write a function to apply this filter to the given image matrix. Input Format: - First line contains two space-separated integers M and N, representing the number of rows and columns of the image matrix respectively. - Each of the next M lines contains N space-separated integers, representing the pixel values of the image. Output Format: - Print the modified image matrix, with each pixel value either 0 or 255, preserving the original row and column structure. Constraints: 1 ≤ M, N ≤ 100 0 ≤ pixel value ≤ 255 SAMPLE INPUT 3 3 123 145 167 200 2 77 156 189 250 SAMPLE OUTPUT 0 255 255 255 0 0 255 255 255 Explanation: In the given example: - The first row pixels of values [123, 145, 167] are modified to [0, 255, 255] respectively. - The second row pixels of values [200, 2, 77] are modified to [255, 0, 0] respectively. - The third row pixels of values [156, 189, 250] are modified to [255, 255, 255] respectively.","solution":"def apply_filter(matrix): Applies the filter to a given image matrix based on the specified rules. Args: matrix (list of list of int): 2D list representing the image matrix, where each integer is a grayscale pixel value. Returns: list of list of int: 2D list representing the filtered image matrix. for i in range(len(matrix)): for j in range(len(matrix[i])): if matrix[i][j] >= 128: matrix[i][j] = 255 else: matrix[i][j] = 0 return matrix"},{"question":"You are given a string with a mix of alphabetical characters and digits: ``` \\"a1b2c3d4e\\" ``` Your task is to rearrange the characters in the string such that all the digits appear in sorted order, and all the letters appear in sorted order, while maintaining their relative positions. For instance: ``` Input: \\"a1b3c2d4e\\" Output: \\"a1b2c3d4e\\" ``` Write a function that performs this rearrangement. **Function Signature:** ```python def rearrange_string(s: str) -> str: # Your code here ``` **Example:** ```python assert rearrange_string(\\"a3b1c2\\") == \\"a1b2c3\\" assert rearrange_string(\\"m5n3b2a4c1\\") == \\"a1b2c3m4n5\\" ```","solution":"def rearrange_string(s: str) -> str: # Separate digits and letters digits = sorted([c for c in s if c.isdigit()]) letters = sorted([c for c in s if c.isalpha()]) # Create iterators for digits and letters digit_iter = iter(digits) letter_iter = iter(letters) # Reconstruct the string while maintaining the relative positions result = [] for c in s: if c.isdigit(): result.append(next(digit_iter)) else: result.append(next(letter_iter)) return \'\'.join(result)"},{"question":"You are given an array of integers and you need to find the maximum length of any contiguous subarray that forms a geometric progression (GP). A subarray forms a GP if for every pair of consecutive elements `a` and `b` in the subarray, the ratio `b/a` is the same for all pairs. Example 1: Input: arr = [2, 6, 18, 36, 6, 2] Output: 3 Explanation: The subarray [2, 6, 18] forms a geometric progression with a common ratio of 3. Example 2: Input: arr = [5, 10, 20, 40, 7] Output: 4 Explanation: The subarray [5, 10, 20, 40] forms a geometric progression with a common ratio of 2. Your Task: You don\'t need to read input or print anything. Complete the function `maxLengthGP()` which takes the array `arr` as input and returns an integer representing the maximum length of any contiguous subarray that forms a geometric progression. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ arr.length ≤ 100000 1 ≤ arr[i] ≤ 10^6","solution":"def maxLengthGP(arr): if len(arr) < 2: return len(arr) max_length = 1 current_length = 1 common_ratio = None for i in range(1, len(arr)): if arr[i] == 0 or arr[i-1] == 0: current_length = 1 common_ratio = None continue if common_ratio is None: common_ratio = arr[i] / arr[i-1] current_length = 2 elif arr[i] / arr[i-1] == common_ratio: current_length += 1 else: common_ratio = arr[i] / arr[i-1] current_length = 2 max_length = max(max_length, current_length) return max_length"},{"question":"In the kingdom of Althar, there lives an ancient dragon that loves to collect gold coins. The dragon has a peculiar habit of distributing its gold coins into different treasure chests. Each treasure chest can hold a specific range of gold coins – no less than its minimum capacity and no more than its maximum capacity. A visiting knight wants to help the dragon by redistributing the gold coins among the treasure chests in such a way that each chest contains a valid amount of gold coins within its specified range. Given the total amount of gold coins the dragon has and the constraints on the possible number of coins each treasure chest can hold, determine if it is possible to distribute the gold coins as required. If it is possible, print \\"YES\\" and otherwise, print \\"NO\\". Input The input is given in the following format: N T c_1 d_1 c_2 d_2 ... c_N d_N The first line contains two integers, N (1 leq N leq 1000), the number of treasure chests, and T (1 leq T leq 10^9), the total number of gold coins. Each of the next N lines contains two integers c_i and d_i, the minimum and maximum number of gold coins that the i-th treasure chest can hold (0 leq c_i leq d_i leq 10^9). Output Output \\"YES\\" if it\'s possible to distribute the gold coins according to the given constraints, otherwise output \\"NO\\". Examples Input 3 20 2 5 3 8 5 12 Output YES Input 2 5 2 3 1 1 Output NO Input 4 15 1 10 2 8 5 7 1 6 Output YES","solution":"def can_distribute_gold(n, t, constraints): Determines if it is possible to distribute t gold coins into n treasure chests with given constraints. Parameters: n (int): Number of treasure chests. t (int): Total number of gold coins. constraints (list of tuples): List containing n tuples, each with two integers c_i and d_i representing the minimum and maximum number of gold coins each treasure chest can hold. Returns: str: \\"YES\\" if it\'s possible to distribute the gold coins according to the given constraints, otherwise \\"NO\\". min_sum = 0 # Minimum possible sum of coins in all chests max_sum = 0 # Maximum possible sum of coins in all chests # Calculate the total minimum and maximum number of coins possible for c, d in constraints: min_sum += c max_sum += d # Check if the total t is within the range of min_sum and max_sum if min_sum <= t <= max_sum: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string containing a direct quote from a famous book. Unfortunately, the quote is incomplete as certain characters in the quote have been replaced with underscores (\'_\'). Your task is to determine the minimum number of unique characters needed to replace all underscores such that the quote contains no repeated characters. # Input The input contains a single line, a string of length ( n ) (1 ≤ ( n ) ≤ 1000) consisting of lowercase alphabets and underscores only. # Output Output a single integer denoting the minimum number of unique characters needed to replace all underscores, ensuring that the quote contains no repeated characters. # Example Sample Input 1 ``` t__k_ ``` Sample Output 1 ``` 3 ``` Sample Input 2 ``` __hell__o_ ``` Sample Output 2 ``` 2 ``` # Explanation Sample 1: The quote \\"t__k_\\" can be completed with 3 unique characters (e.g., \\"task\\", \\"talk\\"). Sample 2: The quote \\"__hell__o_\\" can be completed with 2 unique characters since the underscores can be replaced with `a`, making it unique such as \\"ahellaho\\". # Notes - Focus on the replacement such that no duplicate characters remain in the final string for any potential completion. - Efficiently determine the number of unique replacements needed by analyzing the existing characters in the string.","solution":"def min_unique_replacements(quote): Determines the minimum number of unique characters needed to replace all underscores ensuring that the quote contains no repeated characters. Parameters: quote (str): Input string containing lowercase alphabets and underscores. Returns: int: Minimum number of unique characters needed. # Calculate the number of underscores underscores_count = quote.count(\'_\') # Calculate the number of unique alphabetic characters in the quote unique_characters = set(quote) - {\'_\'} # Since we need no repeated characters, we replace underscores with unique characters # at least different from the existing characters in the string return underscores_count"},{"question":"In a digital library, each book is represented by a unique identifier, which is an alphanumeric string. The library system often encounters requests to retrieve books in a specific order based on complex query patterns. To handle this efficiently, you are tasked with designing a function that maps books to specific sections and generates a result list sorted according to predetermined rules. Each book identifier consists of a block of characters followed by a block of digits (e.g., \\"ABC1234\\"). Based on the library’s custom sorting rules, books should be sorted first by the character block in alphabetical order, and then by the numeric block in numerical order. If two books have the same character block, the one with a smaller numerical block should appear first. You are given a list of book identifiers and you have to return the sorted list as per the custom rules described above. # Input - A string `n` where `2 ≤ n ≤ 1000` representing the number of book identifiers. - A list of `n` book identifiers. # Output - A sorted list of book identifiers. # Example Input ``` 5 [\'AB12\', \'AB2\', \'AC3\', \'AA10\', \'AC1\'] ``` Output ``` [\'AA10\', \'AB2\', \'AB12\', \'AC1\', \'AC3\'] ``` Explanation The books are sorted first by the character block in alphabetical order and then by the numeric block in numerical order. Here the output list is generated following the rules: - \'AA10\' comes before all as \'AA\' is alphabetically first. - \'AB2\' comes before \'AB12\' because their numeric block compared as numbers puts 2 before 12. - \'AC1\' comes before \'AC3\' because their numeric block puts 1 before 3.","solution":"def sort_books(n, books): Sorts the book identifiers first alphabetically by the character part, and then numerically by the digit part. Arguments: n -- The number of book identifiers. books -- The list of book identifiers. Returns: A sorted list of book identifiers. # Extract the character and digit blocks from the book identifier def parse_book(book): i = 0 while i < len(book) and book[i].isalpha(): i += 1 return (book[:i], int(book[i:])) # Sort using the extracted parts sorted_books = sorted(books, key=parse_book) return sorted_books"},{"question":"A group of space travelers has landed on a planet that is inhabited by friendly aliens. The planet\'s unique feature is its array-like terrain that is represented as a grid of size n times m. Each cell in the grid can either be empty (\'.\') or contain an obstacle (\'#\'). The travelers begin at the top-left cell (0, 0) and their goal is to reach the bottom-right cell (n-1, m-1). They can only move right or down. The aliens have provided the travelers with a special tool that can remove up to one obstacle from the grid to help them navigate to their destination. Your task is to determine whether it is possible for the travelers to reach the bottom-right cell by removing at most one obstacle. -----Input----- The first line contains two integers n and m (1 le n, m le 20) — the dimensions of the grid. Each of the following n lines contains m characters (either \'.\' or \'#\'), representing the grid. -----Output----- Print \\"YES\\" if it is possible for the travelers to reach the bottom-right cell by removing at most one obstacle, otherwise print \\"NO\\". -----Examples----- Input 3 3 ..# .#. ... Output YES Input 3 3 # # # Output NO -----Note----- In the first example, the travelers can remove the obstacle at cell (1, 1) and move along the path (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2). In the second example, even after removing one obstacle, it is impossible to find a path from the top-left to the bottom-right cell.","solution":"def can_reach_with_one_removal(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m def dfs(x, y, removed): if not is_valid(x, y) or grid[x][y] == \'#\' and removed: return False if x == n - 1 and y == m - 1: return True tmp = grid[x][y] grid[x][y] = \'#\' # Mark as visited down_move = dfs(x + 1, y, removed or tmp == \'#\') right_move = dfs(x, y + 1, removed or tmp == \'#\') grid[x][y] = tmp # Unmark visited return down_move or right_move return \'YES\' if dfs(0, 0, False) else \'NO\'"},{"question":"You are given an empty grid with N rows and M columns. Your goal is to place L lamps in such a way that the entire grid is fully illuminated, and the number of lamps used is minimized. A lamp placed in a cell illuminates all cells in its row and column. Write a program that determines the minimum number of lamps needed to light up the entire grid. ------ Input ------ The first line contains a single integer T denoting the number of test cases. T test cases follow. Each of the following T lines contains two integers N and M separated by space, denoting the dimensions of the grid. ------ Output ------ For each test case, output a single line containing the minimum number of lamps required to fully illuminate the grid. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1 000 ----- Sample Input 1 ----- 2 2 3 4 4 ----- Sample Output 1 ----- 2 4 ----- Explanation 1 ----- For the 2x3 grid: You can place one lamp in the first row and one lamp in the second row. This will illuminate all the cells. For the 4x4 grid: You can place one lamp in each row. Since each lamp illuminates the column as well, all cells will be illuminated with 4 lamps in total.","solution":"def min_lamps_needed(test_cases): results = [] for n, m in test_cases: # To fully illuminate a N x M grid with minimum lamps, # the lamps should be placed in a checkerboard pattern, # effectively needing max(N, M) lamps. results.append(max(n, m)) return results"},{"question":"Write a function that takes an integer n as an input and prints a number pattern. The pattern consists of n lines with each line containing consecutive integers starting from 1 and increasing by 1 up to the line number. Example 1: Input: 4 Output: 1 1 2 1 2 3 1 2 3 4 Your Task: You don\'t need to input anything. Complete the function printNumberPattern() which takes an integer n as the input parameter and prints the pattern. Constraints: 1 <= n <= 20","solution":"def printNumberPattern(n): Prints a number pattern for given n. for i in range(1, n + 1): print(\\" \\".join(str(x) for x in range(1, i + 1)))"},{"question":"Given a string S of length 20, determine if S is a palindrome (reads the same forwards and backwards). Input The first line contains the number of test cases n. This is followed by n lines, each containing one string S. Output For each test case, output \\"YES\\" if S is a palindrome, otherwise output \\"NO\\". Example Input: 2 abcdedcbaabcdedcba racecarpleasedoshowhowesadeercar Output: YES NO","solution":"def is_palindrome(s): Returns \\"YES\\" if the given string s is a palindrome, otherwise returns \\"NO\\". # Check if the string reads the same forwards and backwards. return \\"YES\\" if s == s[::-1] else \\"NO\\" def check_palindromes(n, strings): Returns a list of results indicating if each string in strings is a palindrome. results = [] for s in strings: results.append(is_palindrome(s)) return results"},{"question":"# Introduction A company has a unique pricing system for their products. Each product is assigned a code, which is a string of letters. The price of a product is calculated based on the position of each letter in the alphabet (where \'a\' is 1, \'b\' is 2, ... \'z\' is 26). The total price of the product is the sum of the values of its letters. For example, the price of the product code \\"abc\\" would be 1 (for \'a\') + 2 (for \'b\') + 3 (for \'c\') = 6. # Task Write a function `calculate_product_price(code: str) -> int` that takes a string `code` as input and returns the total price of the product. Input - `code` (string): A string of lowercase letters representing the product code. The length of `code` will be between 1 and 200 characters. Output - An integer representing the total price of the product. Example ```python calculate_product_price(\\"abc\\") # Output: 6 calculate_product_price(\\"zzz\\") # Output: 78 (26 + 26 + 26) calculate_product_price(\\"hello\\") # Output: 52 (8 + 5 + 12 + 12 + 15) calculate_product_price(\\"test\\") # Output: 64 (20 + 5 + 19 + 20) ``` Constraints - The input string will contain only lowercase alphabetical characters. - The input string will have at least 1 character and at most 200 characters. # Notes - Consider using the `ord` function to find the position of a letter in the alphabet. For example, `ord(\'a\')` returns 97, so `ord(\'a\') - ord(\'a\') + 1 = 1` gives the position of \'a\' in the alphabet. - A loop through the characters in the string and summing up their respective values will help in calculating the total price.","solution":"def calculate_product_price(code: str) -> int: Calculates the total price of the product based on its code. Parameters: code (str): A string representing the product code. Returns: int: The total price of the product. return sum(ord(char) - ord(\'a\') + 1 for char in code)"},{"question":"Write a program that processes a series of stock prices with the following operations: * update(t, p): sets the price of the stock at time t to p. * max_price(s, t): output the maximum stock price between time s and t. Note that the initial stock price at all times (t = 1, 2, …, n) are given in the input. Constraints * 1 ≤ n ≤ 100000 * 1 ≤ q ≤ 100000 * 1 ≤ t ≤ n * 1 ≤ s ≤ t ≤ n * 0 ≤ p ≤ 10000 Input n q price1 price2 ... pricen query1 query2 : queryq In the first line, n (the number of time points) and q (the number of queries) are given. The second line contains n integers representing the initial stock prices at each time point. Then, the ith query queryi is given in the following format: 0 t p or 1 s t The first digit represents the type of the query. \'0\' denotes update(t, p) and \'1\' denotes max_price(s, t). Output For each max_price operation, print the value. Examples Input 5 4 10 20 30 40 50 0 3 25 1 1 5 0 4 35 1 2 4 Output 50 35 Input 6 3 5 3 9 12 7 1 1 2 5 0 6 20 1 1 6 Output 12 20","solution":"class StockPriceProcessor: def __init__(self, prices): self.prices = prices def update(self, t, p): self.prices[t-1] = p def max_price(self, s, t): return max(self.prices[s-1:t]) def process_queries(n, q, prices, queries): processor = StockPriceProcessor(prices) results = [] for query in queries: if query[0] == 0: _, t, p = query processor.update(t, p) elif query[0] == 1: _, s, t = query results.append(processor.max_price(s, t)) return results"},{"question":"A painting gallery has a single row of n paintings, each painted in one of the k available colors. The paintings are initially sorted based on the increasing order of their colors, meaning all paintings of a particular color appear together. Over time, you paint over some paintings with a new color. The gallery owner wants to ensure that the number of color changes (transitions from one color to another) between adjacent paintings is minimized after all repaints are completed. Given an array of integers representing the current colors of paintings and an array of new colors you plan to repaint some paintings with, determine the minimum possible number of color changes in the gallery after repaints. Paint over some (possibly none or all) paintings such that the number of transitions between different colors in the row is minimized. -----Input----- The first line of input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100), representing the number of paintings and the number of available colors, respectively. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ k), representing the initial colors of the paintings. The third line contains n integers r_1, r_2, ..., r_n (0 ≤ r_i ≤ k), representing the new colors for the paintings (if r_i = 0, it means that painting i is not repainted). -----Output----- Print a single integer representing the minimum number of color transitions after the repaint. -----Examples----- Input 5 3 1 1 2 2 3 0 3 0 3 3 Output 1 -----Notes----- In the example, the initial array of colors is [1, 1, 2, 2, 3]. After repainting the given array is [1, 3, 2, 3, 3]. The transitions now occur from 1 to 3, 3 to 2, and then 2 to 3 resulting in a total of 3 transitions. However, if the array is repainted to [3, 3, 2, 2, 3], the transitions are minimized to just one (between 2 and 3). Hence, the output is 1.","solution":"def min_color_transitions(n, k, initial_colors, repaints): def get_transitions(arr): # Count transitions in the array return sum(1 for i in range(1, len(arr)) if arr[i] != arr[i - 1]) # Apply the repaints to the initial colors final_colors = [ repaints[i] if repaints[i] != 0 else initial_colors[i] for i in range(n) ] # Minimize transitions by checking possible colorings min_transitions = get_transitions(final_colors) # Find minimum possible transitions for color in range(1, k + 1): # Try coloring segments to minimize transitions temp_colors = final_colors[:] for i in range(n): if final_colors[i] == color: if i > 0 and final_colors[i - 1] != color: temp_colors[i] = temp_colors[i - 1] else: if i > 0 and final_colors[i - 1] == color: temp_colors[i] = temp_colors[i - 1] min_transitions = min(min_transitions, get_transitions(temp_colors)) return min_transitions"},{"question":"# Problem You are given two strings, `S` and `T`, containing lowercase English letters only. You need to determine the length of the longest common subsequence between `S` and `T`. A subsequence of a string is a sequence that can be derived from the string by deleting some or no elements without changing the order of the remaining elements. # Input The input consists of: - A single line containing the string `S`. - A single line containing the string `T`. # Output Print the length of the longest common subsequence of `S` and `T`. # Constraints The input satisfies the following conditions: - ( 1 leq |S|, |T| leq 10^3 ) # Examples Example 1 **Input:** ``` abcde ace ``` **Output:** ``` 3 ``` **Explanation:** The longest common subsequence is `ace`. Example 2 **Input:** ``` abc abc ``` **Output:** ``` 3 ``` **Explanation:** The longest common subsequence is `abc`. Example 3 **Input:** ``` abc def ``` **Output:** ``` 0 ``` **Explanation:** There is no common subsequence between `abc` and `def`.","solution":"def longest_common_subsequence(S, T): Returns the length of the longest common subsequence between strings S and T. m, n = len(S), len(T) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given a list of integers where each integer represents the number of hours a light bulb is turned on on a particular day. Write a function that calculates the total number of hours the light bulb was turned on. However, the light bulb needs to be replaced after every 100 hours of usage. Make sure your function also calculates the number of replacements needed for the light bulb given the usage pattern. Example: ```python lightbulb_usage([20, 30, 55, 25, 15, 45, 10]) ``` Returns `(a, b)` where `a` is the total number of hours the light bulb was on and `b` is the number of replacements required. For the above example, this should return `(200, 2)` because the total hour count is 200, which requires 2 replacements (one after reaching 100 hours, and another after reaching the next 100 hours). You may assume that the list always contains positive integers and the light bulb always needs replacement correctly.","solution":"def lightbulb_usage(usage_list): Calculate the total number of hours the light bulb was on and the number of replacements needed. Parameters: usage_list (list of int): List of daily usage hours of the light bulb. Returns: tuple: (total_hours, replacements_needed) total_hours = sum(usage_list) replacements_needed = total_hours // 100 return (total_hours, replacements_needed)"},{"question":"In a kingdom far away, there exists an enchanted forest where every animal has a unique strength score. The king of the land has organized a competition where animals fight in pairs, and the animal with the higher strength score wins the fight. However, if two animals have the same strength score, it results in a tie, and no winner is declared for that pair. You\'re given the strength scores of all animals in the forest and have to determine the number of distinct strength scores that result in ties. Help the king analyze the strength scores so that he can correctly identify the tied pairs. INPUT The first line contains the number of test cases T. For each test case, the first line contains the number of animals N, followed by the next line which contains N space-separated integers representing the strength scores of the animals. OUTPUT For each test case, print the number of distinct strength scores that result in ties. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 1 ≤ strength_score ≤ 1000000000 SAMPLE INPUT 2 5 2 3 3 5 6 4 1 2 3 3 SAMPLE OUTPUT 1 1","solution":"def count_tied_strengths(test_cases): Returns the number of distinct strength scores that result in ties. Parameters: test_cases (list of lists): A list of test cases, each containing a list of strength scores. Returns: list of int: A list with the number of distinct tied strength scores for each test case. results = [] for strengths in test_cases: from collections import Counter counter = Counter(strengths) ties = [k for k, v in counter.items() if v > 1] results.append(len(ties)) return results"},{"question":"In this task, you are given an integer array and a number `k`. Your aim is to return the smallest `k` elements from the array in ascending order. ------ Input ------ The first line of input contains an integer `n` (1 <= n <= 1000) representing the size of the array. The second line contains `n` space-separated integers representing the elements of the array. The third line contains the integer `k` (1 <= k <= n), which denotes the number of smallest elements to be returned. ------ Output ------ Output `k` smallest elements of the array in ascending order. ------ Sample Input 1 ------ 6 12 4 5 2 7 3 4 ------ Sample Output 1 ------ 2 3 4 5 ------ Explanation 1 ------ The array is [12, 4, 5, 2, 7, 3]. The `k` smallest elements are [2, 3, 4, 5]. Once sorted, the output is 2 3 4 5.","solution":"def k_smallest_elements(n, arr, k): Returns the k smallest elements from the array in ascending order. :param n: int - Size of the array :param arr: list of int - The array of elements :param k: int - Number of smallest elements to return :return: list of int - k smallest elements in ascending order return sorted(arr)[:k]"},{"question":"Given a tree (acyclic connected graph) with `n` nodes numbered from `1` to `n`, where each edge has an integer weight. Write a function `findMaxPathSum(tree)` that computes the maximum sum of the weights along any path in the tree. Your function will receive a representation of the tree as an adjacency list: `tree`, where `tree[i]` is a list of tuples `(j, weight)` indicating there is an edge between node `i` and node `j` with a weight of `weight`. # Example: ```python tree = { 1: [(2, 3), (3, 4)], 2: [(1, 3), (4, 2), (5, 6)], 3: [(1, 4)], 4: [(2, 2)], 5: [(2, 6)], } print(findMaxPathSum(tree)) # Output: 13 (Path: 5 -> 2 -> 1 -> 3 or 3 -> 1 -> 2 -> 5) ``` # Input: - `tree`: A dictionary where keys are integers representing nodes, and values are lists of tuples (adjacent_node, weight). # Output: - An integer representing the maximum sum of the weights along any path in the tree. # Constraints: - `1 <= n <= 10^5` - `1 <= weight <= 10^3` # Notes: - Assume nodes are labeled from `1` to `n` with no missing nodes. - The tree is an undirected graph. Each edge `(i, j, weight)` can be traversed in both directions. - The function should be optimized to handle large inputs efficiently.","solution":"def findMaxPathSum(tree): Computes the maximum sum of the weights along any path in the tree. tree: dict[int, list[tuple[int, int]]] - Dictionary representing tree with weights Returns: int - Maximum path sum n = len(tree) def dfs(node, parent): max1, max2 = 0, 0 for neighbor, weight in tree[node]: if neighbor == parent: continue path_sum = dfs(neighbor, node) + weight if path_sum > max1: max1, max2 = path_sum, max1 elif path_sum > max2: max2 = path_sum nonlocal max_path_sum max_path_sum = max(max_path_sum, max1 + max2) return max1 max_path_sum = 0 if n > 0: dfs(1, -1) return max_path_sum"},{"question":"You are given three integers X, Y, and Z. Determine whether they can form the sides of a triangle. -----Constraints----- - 1 leq X,Y,Z leq 1000 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: X Y Z -----Output----- Print \\"Yes\\" if X, Y, and Z can form a triangle, otherwise print \\"No\\". -----Sample Input----- 3 4 5 -----Sample Output----- Yes -----Explanation----- To form a triangle, the sum of any two sides must be greater than the third side. Here, 3+4>5, 3+5>4, and 4+5>3. Hence, they can form a triangle.","solution":"def can_form_triangle(X, Y, Z): Determines if three sides X, Y, and Z can form a triangle. # Check if the sum of any two sides is greater than the third side if X + Y > Z and X + Z > Y and Y + Z > X: return \\"Yes\\" return \\"No\\""},{"question":"Write a function that takes a list of strings and a starting letter. The function should return a new list containing only the strings from the original list that start with the specified letter. The comparison should be case-insensitive. ```python strings = [\'apple\', \'Banana\', \'apricot\', \'Cherry\', \'Avocado\'] filter_by_letter(strings, \'a\') --> [\'apple\', \'apricot\', \'Avocado\'] filter_by_letter(strings, \'A\') --> [\'apple\', \'apricot\', \'Avocado\'] ``` If a string starts with the given letter but is skipped, discover the reason and debug the function. Ensure the function works correctly without any discrepancies.","solution":"def filter_by_letter(strings, letter): Returns a list of strings that start with the given letter. Parameters: strings (list): The list of strings to filter. letter (str): The starting letter to filter by. Returns: list: A list of strings starting with the given letter. letter = letter.lower() return [s for s in strings if s.lower().startswith(letter)]"},{"question":"A manufacturing company operates a network of n plants that produce a certain type of component. These plants are positioned along a straight line. Each plant has a production capacity, measured as the maximum number of components it can produce per day. The company wants to concentrate production to increase efficiency. To achieve this, they plan to perform several (possibly zero) merge operations. Each merge operation involves taking the production capacity of one plant and incorporating it into the neighboring plant. The resulting production capacity at the neighboring plant becomes the sum of their initial capacities. After a merge operation, the plant that lost its production capacity ceases to operate as an independent plant, reducing the number of operational plants by 1. The objective is to reduce the number of plants to k or fewer, while keeping the total production capacity unchanged or increased. Given the initial production capacities of the n plants and an integer k, determine the minimum number of merge operations required to reduce the number of operational plants to k or fewer. Input The first line contains two space-separated integers: n (1 ≤ n ≤ 5000) — the number of plants, and k (1 ≤ k ≤ n) — the target number of plants. The second line contains n space-separated integers: the i-th number pi (1 ≤ pi ≤ 10^5) represents the production capacity of the i-th plant. Output Print a single integer — the minimum number of merge operations needed to reduce the number of operational plants to k or fewer. Examples Input 5 2 10 20 30 40 50 Output 3 Input 4 1 15 25 35 45 Output 3","solution":"def min_merge_operations(n, k, capacities): This function calculates the minimum number of merge operations required to reduce the number of operational plants to k or fewer. # Calculate the number of merges needed: return max(0, n - k)"},{"question":"Alice and Bob are playing a game where they take turns removing stones from a pile. Initially, there are \'n\' stones in the pile. Alice always goes first. On each player\'s turn, they must remove 1, 2, or 3 stones from the pile. The player who removes the last stone wins the game. Alice and Bob play optimally, which means they will make decisions that maximize their chance of winning. Determine who will win the game given the initial number of stones. -----Input----- The only line of the input contains a single integer n (1 ≤ n ≤ 10^6) — the number of stones in the pile at the start of the game. -----Output----- Print \\"Alice\\" if Alice will win the game, otherwise print \\"Bob\\". -----Examples----- Input 1 Output Alice Input 2 Output Alice Input 4 Output Alice Input 5 Output Bob -----Note----- In the first sample, there\'s only 1 stone, so Alice will simply take it and win. In the second sample, there are 2 stones. Alice can take all 2 stones and win. In the third sample, there are 4 stones. Alice can take 3 stones on her first turn, leaving Bob with 1 stone, which forces Bob to take the last stone and lose. In the fourth sample, there are 5 stones. No matter which number Alice removes (1, 2, or 3), Bob can always make the number of remaining stones a multiple of 4 on his first move. Therefore, Bob will win.","solution":"def game_winner(n): Determines the winner of the game given the initial number of stones. Args: n (int): The initial number of stones (1 ≤ n ≤ 10^6). Returns: str: \\"Alice\\" if Alice will win the game, \\"Bob\\" otherwise. if n % 4 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"Given two strings s and p, return an array of all the start indices of p\'s anagrams in s. You may return the answer in any order. Example 1: Input: s = \\"cbaebabacd\\", p = \\"abc\\" Output: [0, 6] Explanation: The substring with start index = 0 is \\"cba\\", which is an anagram of \\"abc\\". The substring with start index = 6 is \\"bac\\", which is an anagram of \\"abc\\". Example 2: Input: s = \\"abab\\", p = \\"ab\\" Output: [0, 1, 2] Explanation: The substring with start index = 0 is \\"ab\\", which is an anagram of \\"ab\\". The substring with start index = 1 is \\"ba\\", which is an anagram of \\"ab\\". The substring with start index = 2 is \\"ab\\", which is an anagram of \\"ab\\". Constraints: 1 <= s.length, p.length <= 3 * 10^4 s and p consist of lowercase English letters.","solution":"from collections import Counter def find_anagrams(s, p): Returns a list of start indices of p\'s anagrams in s. p_counter = Counter(p) s_counter = Counter() result = [] p_length = len(p) for i in range(len(s)): # Add one more letter on the right side of the window s_counter[s[i]] += 1 # Remove one letter from the left side of the window if i >= p_length: if s_counter[s[i - p_length]] == 1: del s_counter[s[i - p_length]] else: s_counter[s[i - p_length]] -= 1 # Compare counters if s_counter == p_counter: result.append(i - p_length + 1) return result"},{"question":"You are given a connected undirected graph with `n` vertices and `m` edges. Each vertex has a unique ID ranging from 1 to n. Your task is to determine whether it\'s possible to color the graph using exactly `k` distinct colors such that no two adjacent vertices share the same color. If such a coloring is possible, output any valid coloring. If it\'s not possible, output -1. -----Input----- The first line contains three integers `n`, `m`, and `k` (1 ≤ n ≤ 20; 0 ≤ m ≤ 190; 1 ≤ k ≤ n) — the number of vertices, the number of edges, and the number of colors available, respectively. The next `m` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v) representing an edge between vertices `u` and `v`. -----Output----- If it is possible to color the graph, print `n` space-separated integers representing the color of each vertex (the i-th integer represents the color of vertex with ID `i`). Each color should be an integer between 1 and k. If there are multiple valid colorings, print any of them. If it is not possible to color the graph, print -1. -----Examples----- Input 3 3 3 1 2 2 3 3 1 Output 1 2 3 Input 5 4 3 1 2 1 3 1 4 1 5 Output 1 2 3 1 2 Input 4 6 2 1 2 1 3 1 4 2 3 2 4 3 4 Output -1","solution":"def is_valid_coloring(graph, colors, v, c): for i in range(len(graph)): if graph[v][i] == 1 and colors[i] == c: return False return True def graph_coloring_util(graph, m, colors, v, k): if v == m: return True for c in range(1, k + 1): if is_valid_coloring(graph, colors, v, c): colors[v] = c if graph_coloring_util(graph, m, colors, v + 1, k): return True colors[v] = 0 return False def graph_coloring(n, m, k, edges): # Create adjacency matrix graph = [[0 for i in range(n)] for j in range(n)] for u, v in edges: graph[u - 1][v - 1] = 1 graph[v - 1][u - 1] = 1 # Initialize colors for all vertices colors = [0] * n if graph_coloring_util(graph, n, colors, 0, k): return colors else: return -1"},{"question":"Find the sum of all prime numbers less than or equal to a given number M. Example 1: Input: M = 10 Output: 17 Explanation: The prime numbers below 10 are 2, 3, 5, and 7, and their sum is 17. Example 2: Input: M = 20 Output: 77 Explanation: The prime numbers below 20 are 2, 3, 5, 7, 11, 13, 17, and 19, and their sum is 77. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfPrimes() which takes an Integer M as input and returns the sum of all prime numbers less than or equal to M. Expected Time Complexity: O(M log log M) Expected Auxiliary Space: O(M) Constraints: 1 <= M <= 10^{6}","solution":"def sumOfPrimes(M): Returns the sum of all prime numbers less than or equal to M. if M < 2: return 0 # Create a boolean array \\"prime[0..M]\\" and initialize # all entries it as true. A value in prime[i] will # finally be false if i is Not a prime, else true. prime = [True] * (M + 1) p = 2 while (p * p <= M): # If prime[p] is not changed, then it is a prime if (prime[p] == True): # Updating all multiples of p to not prime for i in range(p * p, M + 1, p): prime[i] = False p += 1 # Sum all prime numbers prime_sum = 0 for p in range(2, M + 1): if prime[p]: prime_sum += p return prime_sum"},{"question":"The Land of Cards is in turmoil, and the Queen has tasked you with solving a critical problem related to the Kingdom\'s magical deck of cards. In this deck, each card has a value, and the values are arranged in a sequence. The magic of the deck is defined by the sum of the product of pairs of cards at positions (i, j) such that i < j. Given the values of the cards, your task is to calculate the magic value for the deck. Input The first line contains a single integer n (1 ≤ n ≤ 105)— the number of cards in the deck. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the values of the cards. Output Print the magic value for the deck. Examples Input 4 1 2 3 4 Output 20 Explanation For the example, the pairs are (1,2), (1,3), (1,4), (2,3), (2,4), and (3,4). Thus the sum of products is: 1*2 + 1*3 + 1*4 + 2*3 + 2*4 + 3*4 = 2 + 3 + 4 + 6 + 8 + 12 = 35. Note Ensure your solution is optimized to handle the upper limits of the input constraints efficiently.","solution":"def calculate_magic_value(n, values): total_sum = sum(values) magic_value = 0 for i in range(n): total_sum -= values[i] magic_value += values[i] * total_sum return magic_value"},{"question":"Task Given a string, determine whether it can be rearranged to form a palindrome. If it can be rearranged to form a palindrome, return the possible palindromic permutation(s). If it cannot be rearranged to form a palindrome, return `None`. Examples ``` canFormPalindrome(\\"aabb\\") == [\\"abba\\", \\"baab\\"] canFormPalindrome(\\"abc\\") == None canFormPalindrome(\\"racecar\\") == [\\"racecar\\", \\"rcaearc\\", ...] # include all permutations ```","solution":"from collections import Counter from itertools import permutations def canFormPalindrome(s): Given a string, determine whether it can be rearranged to form a palindrome. If it can be rearranged to form a palindrome, return the possible palindromic permutation(s). If it cannot be rearranged to form a palindrome, return None. freq = Counter(s) odd_count = sum(1 for value in freq.values() if value % 2 != 0) if odd_count > 1: return None mid = \\"\\" half = [] for char, count in freq.items(): if count % 2 != 0: mid += char half.extend([char] * (count // 2)) half_permutations = set(permutations(half)) palindromes = [] for half in half_permutations: half = \'\'.join(half) palindromes.append(half + mid + half[::-1]) return list(palindromes)"},{"question":"Johnny is learning about prime numbers and their properties. He recently discovered that any positive integer greater than 1 either is a prime number or can be factored into prime numbers. He wants to write a program that takes an integer n as input and returns the list of prime numbers up to and including n. However, Johnny\'s program seems to have an off-by-one error, and to help him, you need to ensure that prime numbers are computed correctly. Write a program that: 1. Takes an integer n (2 ≤ n ≤ 1000) as input. 2. Returns a list of all prime numbers up to and including n. A prime number is defined as any integer greater than 1 that is divisible only by 1 and itself. -----Input----- - A single integer n (2 ≤ n ≤ 1000). -----Output----- - A space-separated list of prime numbers up to and including n. -----Examples----- Input 10 Output 2 3 5 7 Input 20 Output 2 3 5 7 11 13 17 19","solution":"def is_prime(num): Determines if a number is prime. Args: num (int): Number to check for primality. Returns: bool: True if num is prime, False otherwise. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_numbers_up_to_n(n): Generates a list of prime numbers up to and including n. Args: n (int): The upper limit (inclusive) for finding prime numbers. Returns: list: List of prime numbers up to and including n. primes = [] for i in range(2, n + 1): if is_prime(i): primes.append(i) return primes"},{"question":"Given an array of integers, write a function to determine if there are two distinct indices i and j in the array such that the absolute difference between the elements at these indices is equal to a given value k. Input: You have to complete the method which takes two arguments: 1. An array of integers, arr 2. An integer, k You should not read any input from stdin/console. There are multiple test cases. For each test case, this method will be called individually. Output: Your function should return True if such indices exist, otherwise it should return False. User Task: The task is to complete the function hasPairWithDifference() which returns true or false. Constraints: -1000 <= arr[i] <= 1000 1 <= arr.length <= 10^3 1 <= k <= 1000 Example: Input: 2 5 10 1 5 3 5 1 3 Output: True True Explanation: case 1: As there exist a pair (10, 5) with a difference of 5, the function should return true. case 2: There exists a pair (5, 4) with a difference of 1, and also a pair (4, 3) with a difference of 1, so the function should return true.","solution":"def hasPairWithDifference(arr, k): Determine if there are two distinct indices i and j in the array such that the absolute difference between the elements at these indices is equal to k. :param arr: List of integers :param k: The target difference :return True if such a pair exists, False otherwise seen = set() for num in arr: if (num + k) in seen or (num - k) in seen: return True seen.add(num) return False"},{"question":"A group of friends is exchanging secret messages, and they want their messages to be encoded using a special pattern. Each message is transformed using the following rules: 1. If the character is a letter (either uppercase or lowercase), shift it forward in the alphabet by 3 positions. For example, \'A\' becomes \'D\', \'z\' becomes \'c\', \'M\' becomes \'P\', and so on. Letters that overflow past \'z\' or \'Z\' should wrap around to the start of the alphabet. 2. If the character is a digit (0-9), increment it by 2. If this causes the digit to exceed \'9\', wrap around to start at \'0\'. For example, \'7\' becomes \'9\', \'8\' becomes \'0\', and \'9\' becomes \'1\'. 3. All other characters (punctuation, spaces, etc.) remain unchanged. Given a string, your task is to encode the message using the rules mentioned above and return the encoded message. -----Input----- The first line contains an integer N (1 ≤ N ≤ 100), the number of test cases. Each of the next N lines contains a single string S (1 ≤ |S| ≤ 100), the message to be encoded. -----Output----- For each test case, output the encoded message on a new line. -----Example----- Input: 3 Hello, World! 123 abcXYZ789 SecretMessage! 987 Output: Khoor, Zruog! 345 defABC901 VhfuhwPhvvdjh! 109 -----Explanation----- In the first test case, \'H\' -> \'K\', \'e\' -> \'h\', \'l\' -> \'o\', \'o\' -> \'r\', etc. Similarly, digits and other characters follow the encoding rules described. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ |S| ≤ 100","solution":"def encode_message(message): def shift_letter(c): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + 3) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + 3) % 26 + ord(\'A\')) return c def increment_digit(c): if \'0\' <= c <= \'9\': return chr((ord(c) - ord(\'0\') + 2) % 10 + ord(\'0\')) return c encoded_message = [] for char in message: if char.isalpha(): encoded_message.append(shift_letter(char)) elif char.isdigit(): encoded_message.append(increment_digit(char)) else: encoded_message.append(char) return \\"\\".join(encoded_message) def encode_messages(test_cases): return [encode_message(test_case) for test_case in test_cases]"},{"question":"# Time Window Intersection You are given two lists of time windows representing the hours employees worked in a day. Each time window is a tuple of two integers, `(start, end)`, where `start` and `end` are the hours in 24-hour format (0 to 23) marking the beginning and end of the time window. The time windows in each list are non-overlapping and sorted. Your task is to find the intersection of these two lists, i.e., the time windows during which at least one employee from each list was working. Return the resulting intersections as a list of tuples, sorted by the start hour. Example ```python def time_window_intersection(schedule1, schedule2): # your code here # Testing the function schedule1 = [(9, 11), (13, 16), (18, 20)] schedule2 = [(10, 12), (15, 17), (19, 21)] print(time_window_intersection(schedule1, schedule2)) # Output: [(10, 11), (15, 16), (19, 20)] ``` Explanation In the given example, the employee schedules overlap in the following windows: - From 10 to 11 hours, both the employees are working. - From 15 to 16 hours, both the employees are working. - From 19 to 20 hours, both the employees are working. Thus, the resulting intersection is `[(10, 11), (15, 16), (19, 20)]`.","solution":"def time_window_intersection(schedule1, schedule2): Returns the intersection of time windows from two schedules. Parameters: schedule1 (list): A list of tuples representing time windows in the first schedule. schedule2 (list): A list of tuples representing time windows in the second schedule. Returns: list: A list of tuples representing the intersecting time windows. i, j = 0, 0 intersections = [] while i < len(schedule1) and j < len(schedule2): start1, end1 = schedule1[i] start2, end2 = schedule2[j] # Find the overlap between schedule1[i] and schedule2[j] start_overlap = max(start1, start2) end_overlap = min(end1, end2) if start_overlap < end_overlap: intersections.append((start_overlap, end_overlap)) # Move to the next interval that ends earlier if end1 < end2: i += 1 else: j += 1 return intersections"},{"question":"You are given an array of integers. You have to perform operations to make the linear transformation of the array as uniform as possible. An operation consists of choosing an element in the array, and either incrementing or decrementing it by 1. Your task is to determine the minimum number of operations required to make all elements of the array equal. -----Constraints----- - 1 leq n leq 10^5 (where n is the number of elements in the array) - 1 leq a_i leq 10^9 (where a_i is an element in the array) - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n -----Output----- Output the minimum number of operations required. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 6 If you choose the median value of 3 as the target: - The number of operations needed to make 1 equal to 3 is 2. - The number of operations needed to make 2 equal to 3 is 1. - The number of operations needed to keep 3 as 3 is 0. - The number of operations needed to make 4 equal to 3 is 1. - The number of operations needed to make 5 equal to 3 is 2. Thus, total operations are 2+1+0+1+2 = 6, which is optimal.","solution":"def min_operations_to_make_equal(arr): Returns the minimum number of operations required to make all elements of the array equal. n = len(arr) arr.sort() target = arr[n // 2] # Median return sum(abs(x - target) for x in arr) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) print(min_operations_to_make_equal(arr))"},{"question":"You are given an array of positive integers and a number k. Your task is to find the k-th smallest missing positive integer from the array. For example, if the given array is [2, 3, 4, 7, 11] and k is 5, the 5th smallest missing positive integer should be 9. The missing positive integers from the given array are all positive integers that are not present in the array. -----Input----- The first line contains two integers n and k (1 le n le 10^5, 1 le k le 10^9) — the size of the array and the position of the missing number to find. The second line contains n integers, which are the elements of the array. Each element is between 1 and 10^9 inclusive. -----Output----- Output the k-th smallest missing positive integer. -----Examples----- Input 5 5 2 3 4 7 11 Output 9 Input 3 1 1 2 3 Output 4 -----Note----- In the first example, the missing positive integers are [1, 5, 6, 8, 9, 10, 12, ...]. The 5th missing number is 9. In the second example, the missing positive integers are [4, 5, 6, 7, ...]. The 1st missing number is 4.","solution":"def kth_missing_positive(arr, k): arr.sort() current = 1 # Start with the smallest positive integer missing_count = 0 for num in arr: while current < num: missing_count += 1 if missing_count == k: return current current += 1 current = num + 1 # If we have not found the k-th missing in the array return num + (k - missing_count)"},{"question":"Given a string s and a dictionary of words dict, find the length of the longest word in dict that can be formed by deleting some characters of the string s without reordering the remaining characters. Constraints * 1 ≤ length of s ≤ 10^3 * 1 ≤ number of words in dict ≤ 10^4 * 1 ≤ length of each word ≤ 100 Input Two lines: The first line contains the string s. The second line contains the words in the dictionary, separated by spaces. Output Print the length of the longest word in dict that can be formed by deleting some characters of the string s. Example Input abcde a bdace cde Output 3","solution":"def longest_word_length(s, dict): def can_form_by_deleting(word, s): it = iter(s) return all(char in it for char in word) max_length = 0 for word in dict.split(): if can_form_by_deleting(word, s): max_length = max(max_length, len(word)) return max_length"},{"question":"A software company is developing a new text editor, and one of the features they want to include is the ability to determine the longest substring of a given string that contains no repeating characters. They need your help to implement this feature. You are given a string S consisting of English lowercase letters. Your task is to find the length of the longest substring of S that contains no repeating characters. Constraints * 1 leq |S| leq 10^5 Input Input is given from Standard Input in the following format: S Output Print the length of the longest substring of S that contains no repeating characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Input abcdefg Output 7","solution":"def longest_substring_without_repeating_characters(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest_length = max(longest_length, i - start + 1) return longest_length"},{"question":"Given an array of integers, your task is to compute the product of the largest contiguous subarray. A contiguous subarray is a subarray where the elements are consecutive elements of the original array. For example: ``` Given the array: [2, 3, -2, 4] The largest product of any contiguous subarray is 6, which comes from the subarray [2, 3]. Given the array: [-2, 0, -1] The largest product of any contiguous subarray is 0, which comes from the subarray [0]. ``` Write a function `maxProduct` that takes a list of integers and returns the largest product of any contiguous subarray. Function Signature: ``` def maxProduct(nums: List[int]) -> int: ``` **Constraints:** - The length of the array `nums` will be between 1 and 10^4. - Each element in the array is an integer where `-10 ≤ nums[i] ≤ 10`. **Examples:** ``` maxProduct([2, 3, -2, 4]) -> 6 maxProduct([-2, 0, -1]) -> 0 maxProduct([-2, 3, -4]) -> 24 maxProduct([0, 2]) -> 2 ```","solution":"from typing import List def maxProduct(nums: List[int]) -> int: if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"You are given a list of strings. Each string can be either 1) a positive integer, 2) a negative integer, or 3) a string of any characters. Write a program to sort these strings such that: 1. All the integers (both positive and negative) come before all the non-integer strings. 2. The integers are sorted in ascending order. 3. The non-integer strings maintain their original relative order. Input The first line of input contains an integer n (1 ≤ n ≤ 100), representing the number of strings. The next n lines each contain one string, with a length of 1 to 100 characters. Output Output the list of strings after sorting as described above, each string on a new line. Examples Input 5 apple -42 banana 0 42 Output -42 0 42 apple banana Input 3 13 -7 hello Output -7 13 hello Note The sorting criteria ensure that all integers appear in ascending order, while non-integer strings appear in the same order as they appear in the input.","solution":"def sort_strings(strings): Sort the list of strings such that all the integers come before non-integer strings. Integers are sorted in ascending order, while non-integer strings maintain their original order. integers = [] non_integers = [] for s in strings: if s.lstrip(\'-\').isdigit(): # Check if the string is a negative or positive integer integers.append(int(s)) else: non_integers.append(s) # Sort the integers in ascending order integers.sort() # Convert integers back to strings integers = list(map(str, integers)) # Concatenate integers and non_integers lists sorted_strings = integers + non_integers return sorted_strings # Example usage: # input_data = [\\"apple\\", \\"-42\\", \\"banana\\", \\"0\\", \\"42\\"] # print(sort_strings(input_data))"},{"question":"Little chef loves palindromes. A palindrome is a string that reads the same backward as forward. While playing a game, the little chef came across the following problem: Given a string S of lowercase English letters, determine the minimum number of characters that need to be inserted to make the string a palindrome. Help little chef by writing a method to solve this problem. -----Input----- The input consists of a single string S. -----Output----- Output a single integer representing the minimum number of characters that need to be inserted to make the string a palindrome. -----Constraints----- - 1 ≤ |S| ≤ 1000 (103) -----Example----- Input: race Output: 3 Input: abc Output: 2 -----Explanation----- Example case 1. By adding \'e\' at the beginning and \'c\' and \'a\' at the end, \\"race\\" becomes \\"ecarace\\", which is a palindrome. Hence, 3 insertions are needed. Example case 2. By adding \'b\' and \'c\' at the beginning, \\"abc\\" becomes \\"cbaabc\\", which is a palindrome. Hence, 2 insertions are needed.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of characters needed to be inserted to make the string s a palindrome. def lcs(str1, str2): Helper function to determine the longest common subsequence between str1 and str2. n, m = len(str1), len(str2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] # Reverse the string to find the LCS with the original string rev_s = s[::-1] lcs_length = lcs(s, rev_s) # Minimum insertions needed is the difference between the string # length and the LCS length return len(s) - lcs_length"},{"question":"Given an integer array A of size N, each element represents the height of a building. You are tasked to design a program that computes the amount of water that can be trapped between the buildings after raining. Example 1: Input: arr[] = {3, 0, 2, 0, 4} Output: 7 Explanation: We can trap 3 units of water between the first and the third building, 1 unit between the third and the fifth building, and 3 units again between the fourth and the fifth building. Hence, in total 3 + 1 + 3 = 7 units of water can be trapped. Example 2: Input: arr[] = {1, 1, 1, 1, 1} Output: 0 Explanation: No water can be trapped since all buildings are of the same height. Your Task: You need to implement the function trappingWater which takes an array arr and an integer n (size of array), and returns the total water that can be trapped. The input is already taken care of by the driver code. Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Constraints: 1 ≤ N ≤ 2 * 10^4 0 ≤ A_i ≤ 10^5","solution":"def trappingWater(arr, n): Returns the total water that can be trapped between the buildings. :param arr: list of integers representing the height of buildings :param n: integer representing the number of buildings :return: total water trapped if n == 0: return 0 left = [0] * n right = [0] * n water = 0 left[0] = arr[0] for i in range(1, n): left[i] = max(left[i - 1], arr[i]) right[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): right[i] = max(right[i + 1], arr[i]) for i in range(n): water += min(left[i], right[i]) - arr[i] return water"},{"question":"Given an array of integers, return an array representing the products of all numbers in the original array except the one at the current index. Example 1: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Example 2: Input: [-1, 1, 0, -3, 3] Output: [0, 0, 9, 0, 0] Note: - The length of the array will be in the range [1, 10^4]. - The values of the elements could be in the range of [-10^2, 10^2].","solution":"def product_except_self(nums): Given an array nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. :param nums: List of integers. :return: List of integers. length = len(nums) # Initialize the result array with 1s. result = [1] * length # Calculate the prefix product for each element in the array. prefix = 1 for i in range(length): result[i] = prefix prefix *= nums[i] # Calculate the suffix product for each element in the array. suffix = 1 for i in range(length - 1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"Given an array of integers, nums, return true if the array was originally sorted in an increasing order, and then possibly rotated. Otherwise, return false. To clarify, a rotated array is formed by taking some prefix of the array and moving it to the end. For example, the array [3,4,5,1,2] is a rotated version of [1,2,3,4,5]. Example 1: Input: nums = [3,4,5,1,2] Output: true Explanation: [3,4,5,1,2] is the rotated version of [1,2,3,4,5]. Example 2: Input: nums = [2,1,3,4] Output: false Explanation: The given array is not a rotated version of a sorted array. Example 3: Input: nums = [1,2,3] Output: true Explanation: The array is already sorted, hence it can be considered as a rotated version where the rotation is zero times. Constraints: - 1 <= nums.length <= 10^5 - -10^5 <= nums[i] <= 10^5","solution":"def is_sorted_and_rotated(nums): Check if the given array was originally sorted in an increasing order and then possibly rotated. n = len(nums) if n <= 1: return True count = 0 for i in range(n): if nums[i] > nums[(i + 1) % n]: count += 1 if count > 1: return False return True"},{"question":"A company wants to create a new messaging platform and needs a system to prioritize different types of messages. Each message has a priority level determined by its type: \\"System\\", \\"User\\", or \\"Advertisement\\". The system should handle incoming messages such that \\"System\\" messages have the highest priority, followed by \\"User\\" messages, and finally \\"Advertisement\\" messages. Messages arrive in the form of an array of tuples. Each tuple contains a string identifier for the message type and an integer timestamp that indicates the order of arrival. The messages need to be output in the order of their priority and, in cases where priorities are the same, according to their timestamp. Implement a function `prioritize_messages(messages)` that receives an array of tuples `messages` where each tuple contains a message type and a timestamp, and returns an array of message types sorted as described. # Input - A list of tuples `messages`. Each tuple consists of a string (\\"System\\", \\"User\\", \\"Advertisement\\") and an integer timestamp. The size of the list is between 1 leq n leq 10^5. # Output - A list of strings representing the message types sorted based on priority and order of arrival. # Examples Input: ```python [(\\"User\\", 4), (\\"System\\", 2), (\\"Advertisement\\", 3), (\\"User\\", 1)] ``` Output: ```python [\\"System\\", \\"User\\", \\"User\\", \\"Advertisement\\"] ``` Input: ```python [(\\"Advertisement\\", 5), (\\"User\\", 3), (\\"Advertisement\\", 1), (\\"System\\", 4), (\\"System\\", 2)] ``` Output: ```python [\\"System\\", \\"System\\", \\"User\\", \\"Advertisement\\", \\"Advertisement\\"] ``` # Note In the first example, \\"System\\" messages are handled first, followed by \\"User\\" and then \\"Advertisement\\" messages. Within the same priority, messages are ordered by their timestamp. In the second example, there are multiple \\"System\\" and \\"Advertisement\\" messages. \\"System\\" messages come first, sorted by timestamps, followed by \\"User\\" and then by \\"Advertisement\\" messages, also sorted by timestamps.","solution":"def prioritize_messages(messages): This function prioritizes the messages based on their types and timestamps. Args: messages : List[Tuple[str, int]] : List of tuples where each tuple contains a message type and a timestamp. Returns: List[str] : List of message types sorted based on priority and order of arrival. # Define the priority map priority_map = { \\"System\\": 1, \\"User\\": 2, \\"Advertisement\\": 3 } # Sort the messages first by priority, then by timestamp sorted_messages = sorted(messages, key=lambda x: (priority_map[x[0]], x[1])) # Extract the message types from the sorted list sorted_message_types = [message[0] for message in sorted_messages] return sorted_message_types"},{"question":"In an ancient village, there are n houses and n-1 bidirectional roads such that there is a unique path between any two houses. Each house has a specific amount of gold stored in it which is represented by an array gold[] of size n, where gold[i] indicates the amount of gold at the i-th house. The village head assigns you q tasks. Each task represents an interval [l, r] and requires you to calculate the maximum amount of gold on the shortest path between two houses u and v that lie within the interval. Input The first line of input contains two integers, n and q (1 ≤ n, q ≤ 10^5). The next n-1 lines contain the roads. Each line contains two integers u and v, endpoints of a road (1 ≤ u, v ≤ n, u ≠ v). The next line contains n integers gold[1], gold[2], ..., gold[n] (1 ≤ gold[i] ≤ 10^9). Next q lines contain the queries. Each of them contains three integers, u, v, and k (1 ≤ u, v ≤ n, 1 ≤ k ≤ n). Output For each query, print the maximum gold amount on the shortest path from house u to house v considering only the houses within the interval [u, v]. Examples Input 5 3 1 2 1 3 2 4 2 5 10 20 15 25 30 2 3 4 1 5 3 3 4 2 Output 20 30 25 Note In the sample case, the village layout is as follows: - House 1 with 10 gold - House 2 with 20 gold - House 3 with 15 gold - House 4 with 25 gold - House 5 with 30 gold For the query (2, 3, 4), the shortest path between house 2 and house 3 is considered along with the maximum gold amount which is 20.","solution":"from collections import defaultdict, deque def preprocess_tree(n, roads): adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) return adj_list def bfs_shortest_path(adj_list, n, start, end): visited = [False] * (n + 1) parent = [-1] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() if node == end: break for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True parent[neighbor] = node queue.append(neighbor) path = [] while end != -1: path.append(end) end = parent[end] path.reverse() return path def build_subtree_gold(node, parent, interval_l, interval_r, gold, adj_list, gold_in_subtree): if node < interval_l or node > interval_r: return gold_in_subtree.append(gold[node - 1]) for neighbor in adj_list[node]: if neighbor != parent: build_subtree_gold(neighbor, node, interval_l, interval_r, gold, adj_list, gold_in_subtree) def max_gold_on_shortest_path(n, roads, gold, queries): adj_list = preprocess_tree(n, roads) result = [] for u, v, k in queries: shortest_path = bfs_shortest_path(adj_list, n, u, v) gold_in_subtree = [] for node in shortest_path: if node >= u and node <= v: build_subtree_gold(node, -1, u, v, gold, adj_list, gold_in_subtree) result.append(max(gold_in_subtree)) return result"},{"question":"A matrix (A) of size (n times m) contains non-negative integers. A submatrix of (A) is any matrix that can be obtained by deleting some (possibly zero) rows and some (possibly zero) columns from (A), but leaving at least one row and one column. Define the sum of a submatrix as the sum of all elements in the submatrix. You are asked to find the sum of elements in the submatrix with the maximum sum. -----Input----- The first line contains two integers (n) and (m) ((1 le n, m le 500)) — the number of rows and columns in the matrix (A). The next (n) lines each contain (m) integers (a_{ij}) ((0 le a_{ij} le 10^4)), the elements of the matrix. -----Output----- Output one integer, representing the maximum sum of elements of any submatrix of (A). -----Example----- Input 2 3 1 2 3 4 5 6 Output 21 -----Note----- In the first example, the submatrix with the maximum sum is the entire matrix, and its sum is (1 + 2 + 3 + 4 + 5 + 6 = 21).","solution":"def max_sum_submatrix(matrix): Returns the maximum sum of elements of any submatrix of the given matrix. n = len(matrix) m = len(matrix[0]) # To keep track of maximum sum submatrix max_sum = float(\'-inf\') # Loop through each column as the start column for left in range(m): # To store row sums for the current left column till right column temp = [0] * n # Loop through each column as the end column for right in range(left, m): # Calculate row sum for each row between left and right columns for i in range(n): temp[i] += matrix[i][right] # Apply Kadane\'s algorithm on temp to find max subarray sum for the current left-right column pair current_max_sum = kadane(temp) # Update the global maximum sum max_sum = max(max_sum, current_max_sum) return max_sum def kadane(arr): Helper function to find maximum sum subarray using Kadane\'s algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Amy loves birthdays and wants to throw a party. She has a list of friends and wants to ensure that the sum of their ages has an even distribution between odd and even sums. Amy can invite any of her friends, but she wants to know if there\'s a way to invite them such that the sum of their ages is even. Given an array `ages` of the ages of her friends, return 1 if she can invite a subset of friends such that the sum of their ages is even, otherwise return 0. Example 1: Input: ages = [21, 34, 17, 40, 5] Output: 1 Explanation: Amy can invite friends with ages [34, 40] (sum = 74 which is even). Example 2: Input: ages = [23, 19, 15] Output: 0 Explanation: No subset of ages has an even sum. Your Task: You do not need to read input or print anything. Your task is to complete the function canHaveEvenSum() which takes an array of integers `ages` as input and returns 1 if Amy can invite friends such that their ages sum up to an even number, otherwise returns 0. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(ages) ≤ 100 1 ≤ ages[i] ≤ 100","solution":"def canHaveEvenSum(ages): # A sum is even if the number of odd elements is even # or if we have at least one even element (to balance any odd sum) all_odd = True # Track if all elements are odd odd_count = 0 # Track number of odd elements even_present = False # Track if there is at least one even element for age in ages: if age % 2 == 0: even_present = True else: odd_count += 1 # If there is at least one even number, it\'s possible to form even sum if even_present: return 1 # If there are all odd numbers, sum can only be even if count of odd numbers is even return 1 if odd_count % 2 == 0 else 0"},{"question":"You are given a grid with dimensions n times m initially filled with zeros. You are also given a list of operations. Each operation consists of four integers x1, y1, x2, and y2. For each operation, you need to increment by 1 every element of the subgrid whose top-left corner is (x1, y1) and bottom-right corner is (x2, y2). Compute the final grid after all operations have been applied. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m (1 le n, m le 1000) — the number of rows and columns of the grid. The second line contains a single integer k (1 le k le 10000) — the number of operations. Each of the following k lines contains four integers x1, y1, x2, y2 (1 le x1 le x2 le n, 1 le y1 le y2 le m) describing each operation. -----Output----- For each test case, output the final grid after all operations. The output for each grid should have n lines each containing m integers separated by space. -----Examples----- Input 1 3 3 2 1 1 2 2 2 2 3 3 Output 1 1 0 1 2 1 0 1 1 -----Note----- In the example, we have a 3 times 3 grid: Initially, the grid is: 0 0 0 0 0 0 0 0 0 After the first operation (1, 1, 2, 2), the grid becomes: 1 1 0 1 1 0 0 0 0 After the second operation (2, 2, 3, 3), the grid becomes: 1 1 0 1 2 1 0 1 1","solution":"def apply_operations(test_cases): results = [] for case in test_cases: n, m, k, operations = case grid = [[0] * m for _ in range(n)] for x1, y1, x2, y2 in operations: for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += 1 results.append(grid) return results"},{"question":"Given an array of integers, return an array with the same integers except that only the first occurrence of any duplicate element is kept. The order of elements in the returned array should be the same as their first appearances in the input array. Example: Given: `arr = [4, 5, 9, 4, 9, 3, 7, 3, 8]` Return: `[4, 5, 9, 3, 7, 8]`","solution":"def remove_duplicates(arr): Given an array of integers, return an array with the same integers except that only the first occurrence of any duplicate element is kept. The order of elements in the returned array is the same as their first appearances in the input array. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Jack is planning to take his family on a holiday trip. He has a list of holiday destinations that they could visit. Each destination has a beauty score associated with it. Jack wants to maximize the average beauty of the destinations they visit but also wants to keep the total number of destinations to a minimum. He has decided that they must visit at least `m` destinations and that the total number of destinations visited can be at most `n`. Given the list of destinations with their corresponding beauty scores, help Jack to determine the smallest number of destinations he should visit to maximize the average beauty. **Input Format:** - The first line contains two space-separated integers `m` and `n` (1 ≤ m ≤ n ≤ 50) — the minimum and maximum number of destinations to visit. - The second line contains `n` space-separated integers, where each integer `a_i` (1 ≤ a_i ≤ 100) represents the beauty score of the i-th destination. **Output Format:** - Print the smallest number of destinations Jack should visit to maximize the average beauty. **Examples** **Input:** 4 6 7 8 5 6 10 9 **Output:** 4 **Input:** 3 5 4 3 5 7 6 **Output:** 3 **Input:** 2 4 5 4 6 8 **Output:** 2 **Note:** In the first example, visiting destinations with beauty scores [10, 9, 8, 7] gives the maximum average beauty of 8.5, which is the best he can achieve by visiting exactly 4 destinations.","solution":"def min_destinations_to_maximize_average(m, n, beauty_scores): Given the minimum (m) and maximum (n) number of destinations to visit and a list of beauty scores, returns the minimum number of destinations to visit that maximizes the average beauty. beauty_scores.sort(reverse=True) max_average = -float(\'inf\') min_destinations = m for k in range(m, n + 1): average = sum(beauty_scores[:k]) / k if average > max_average: max_average = average min_destinations = k elif average == max_average: min_destinations = min(min_destinations, k) return min_destinations # Example usage: # m, n = 4, 6 # beauty_scores = [7, 8, 5, 6, 10, 9] # print(min_destinations_to_maximize_average(m, n, beauty_scores)) # Output: 4"},{"question":"You are given an integer N which represents the number of steps in a staircase. You are also given an array steps[] of size N where each element in the array can be either 0 or 1. If steps[i] = 1, it means that the i-th step is broken and cannot be stepped on. You start at the bottom of the staircase and your goal is to reach the top (N-th step), but you can only move up one step at a time (i.e., from i to i+1) if the step is not broken. Write a function canReachTop() that determines if it is possible to reach the top of the staircase given the broken steps. Example 1: Input: N = 5 steps[] = {0, 1, 0, 0, 1} Output: True Explanation: You can step on step 0 -> 2 -> 3 -> N (4 steps are 0-indexed). Example 2: Input: N = 3 steps[] = {0, 1, 1} Output: False Explanation: You cannot step on steps 1 and 2, so you cannot reach the top. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canReachTop() which takes an integer N and an array steps[] of size N and returns a boolean value indicating whether it is possible to reach the top of the staircase. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 steps[i] is either 0 or 1","solution":"def canReachTop(N, steps): Returns True if it is possible to reach the top of the staircase, given the array of broken steps. Parameters: N (int): The number of steps in the staircase. steps (list of int): Array indicating whether each step is broken (1) or not (0). Returns: bool: True if it\'s possible to reach the top, False otherwise. if steps[0] == 1: return False for i in range(1, N): if steps[i] == 0: continue elif steps[i] == 1 and steps[i-1] == 1: return False return True"},{"question":"Lisa is attempting to create a new type of beehive in a hexagonal grid. Each beehive can be represented as a series of concentric hexagons. A hexagon of side length `s` contains exactly `3s(s+1)+1` cells including the center. Lisa wants to create a beehive that consists of the outermost hexagon with the side length `s`, having an empty interior. However, she needs to ensure that no bee is present in the interior cells of the beehive. She also wants to find out how many cells will be occupied by the outermost hexagon of her beehive. Your task is to help Lisa determine the number of cells that will be used for the outermost hexagon, excluding the interior cells. -----Input----- The first line of the input contains a single integer s (1 ≤ s ≤ 10^6) — the side length of the outermost hexagon. -----Output----- Print one integer, denoting the number of cells that will be occupied only by the outermost hexagon of Lisa\'s beehive. -----Examples----- Input 1 Output 6 Input 2 Output 12 Input 3 Output 18 -----Note----- For the first sample, a hexagon with side length 1 will have 6 cells excluding the center. For the second sample, a hexagon with side length 2 will have 12 outer cells. The pattern becomes clearer with a larger side length, where each increment in the side length adds exactly 6 more cells than the previous side length.","solution":"def beehive_cells(s): Calculate the number of cells occupied by the outermost hexagon of a beehive with side length s. The number of outer cells in a hexagon of side length s is given by 6 * s. :param s: The side length of the outermost hexagon (1 ≤ s ≤ 10^6) :return: The number of cells occupied by the outermost hexagon return 6 * s"},{"question":"Given a positive integer n (1 ≤ n ≤ 10^5), you are required to generate a string of length n such that the string consists only of the letters \'a\' and \'b\'. The condition is that the string should not contain three consecutive identical characters (\'aaa\' or \'bbb\'). If there are multiple possible valid strings, any of them will be accepted. Input The input is a single integer n. Output Output a string of length n consisting only of characters \'a\' and \'b\' that does not contain three consecutive identical characters. Examples Input 5 Output aabab Input 1 Output a Input 7 Output abababa","solution":"def generate_string(n): Generates a string of length n consisting only of \'a\' and \'b\' that does not contain three consecutive identical characters. result = [] for i in range(n): if i >= 2 and result[i-1] == result[i-2]: result.append(\'b\' if result[i-1] == \'a\' else \'a\') else: result.append(\'a\' if i % 2 == 0 else \'b\') return \'\'.join(result)"},{"question":"Emily loves perfect squares. She has a positive integer N and she wants to find the minimum number of perfect square numbers which sum to N. A perfect square number is an integer that can be expressed as the square of another integer, such as 1, 4, 9, 16, etc. Your task is to write a program that determines the minimum number of perfect squares that sum to N for each given test case. -----Input----- The first line contains a single integer T, the number of test cases. The following T lines each contain one integer N, the number to be expressed as the sum of perfect squares. -----Output----- For each test case, output the minimum number of perfect squares that sum to N on a new line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 104 -----Example----- Input: 3 12 17 23 Output: 3 2 4 -----Explanation----- Example case 1: The numbers can be expressed as 4 + 4 + 4 (three perfect squares). Example case 2: The numbers can be expressed as 16 + 1 (two perfect squares). Example case 3: The numbers can be expressed as 9 + 9 + 4 + 1 (four perfect squares).","solution":"def min_num_perfect_squares(T, test_cases): import math def numSquares(n): square_nums = [i*i for i in range(1, int(math.sqrt(n)) + 1)] dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): for square in square_nums: if i < square: break dp[i] = min(dp[i], dp[i - square] + 1) return dp[n] results = [] for n in test_cases: results.append(numSquares(n)) return results"},{"question":"Given an array of non-negative integers, your task is to find and return the smallest missing positive integer. For example, given the array [3, 4, -1, 1], the smallest missing positive integer is 2. Input Format The input consists of one line that contains space-separated integers representing the elements of the array. Output Format Output the smallest missing positive integer. Constraints - The array will have at least 1 and at most 100,000 elements. - Each element of the array is an integer which fits in a 32-bit signed int. SAMPLE INPUT 3 4 -1 1 SAMPLE OUTPUT 2","solution":"def first_missing_positive(arr): Finds and returns the smallest missing positive integer in the array. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function `findCommonPrefix(strings)` that takes a list of strings `strings` and returns the longest common prefix shared among all the strings. If there is no common prefix, the function should return an empty string. For example, `findCommonPrefix([\'flower\', \'flow\', \'flight\'])` should return `\'fl\'` because that\'s the longest common prefix of those strings. On the other hand, `findCommonPrefix([\'dog\', \'racecar\', \'car\'])` should return `\'\'` since there is no common prefix shared among all the strings. Good luck :)","solution":"def findCommonPrefix(strings): Returns the longest common prefix shared among all the strings in the list. If there is no common prefix, returns an empty string. if not strings: return \\"\\" # Find the string with the minimum length min_length = min(len(s) for s in strings) # Initialize the prefix as an empty string prefix = \\"\\" # Compare characters of each string at each position for i in range(min_length): # Take the character at ith position from the first string char = strings[0][i] # Check if this character is present at the same position in all strings if all(s[i] == char for s in strings): prefix += char else: break return prefix"},{"question":"Write a program that simulates a bank account balance over a series of transactions. You must keep track of deposits, withdrawals, and compute the balance after each transaction. # Input - The first line consists of a single integer `n` (1 ≤ n ≤ 100), the number of transactions. - The next `n` lines contain a string `t` and an integer `amount`, where: - `t` will be either \\"deposit\\" or \\"withdrawal\\". - `amount` (1 ≤ amount ≤ 10^4) is the amount to deposit or withdraw. # Output For each transaction, print the balance after applying that transaction. # Rules - The account starts with a balance of 0. - A withdrawal cannot occur if it would result in a negative balance. If a withdrawal would result in a negative balance, it should be ignored (i.e., the balance remains unchanged). # Example Input ``` 5 deposit 1000 withdrawal 500 withdrawal 600 deposit 2000 withdrawal 300 ``` Output ``` 1000 500 500 2500 2200 ``` # Explanation - initial balance: 0 - after first transaction (deposit 1000): balance = 1000 - after second transaction (withdrawal 500): balance = 500 - third transaction (withdrawal 600) is ignored because it would lead to a negative balance: balance = 500 - after fourth transaction (deposit 2000): balance = 2500 - after fifth transaction (withdrawal 300): balance = 2200","solution":"def process_transactions(n, transactions): Processes a series of bank transactions and returns the balance after each transaction. Args: n (int): The number of transactions. transactions (List[Tuple[str, int]]): A list of tuples where each tuple contains a transaction type (\\"deposit\\" or \\"withdrawal\\") and the amount. Returns: List[int]: A list of balances after each transaction. balance = 0 balances = [] for transaction in transactions: t, amount = transaction if t == \\"deposit\\": balance += amount elif t == \\"withdrawal\\": if balance >= amount: balance -= amount balances.append(balance) return balances"},{"question":"You are given a sequence of integers where each integer appears exactly twice except for one integer that appears only once. Write a program to find and return that single integer. You must implement a solution with a linear runtime complexity and use only a constant amount of extra space. **Input:** - A single line containing a sequence of integers separated by spaces. **Output:** - A single integer which is the number that appears only once in the input sequence. **Constraints:** - The input sequence will always have exactly one integer that appears once and all other integers will appear exactly twice. - The length of the sequence does not exceed 10^5. **Example:** Input: ``` 2 3 5 2 4 4 3 ``` Output: ``` 5 ``` Input: ``` 1 1 2 2 3 4 4 ``` Output: ``` 3 ```","solution":"def find_unique_integer(sequence): Returns the unique integer that appears only once in the sequence where all other integers appear exactly twice. Uses XOR to achieve linear runtime complexity with constant space. unique_int = 0 for num in sequence: unique_int ^= num return unique_int"},{"question":"Farmer John owns a vast array of animals on his farm, each identified by a unique integer ID. He likes organizing competitions in which he arranges the animals in a line and awards points based on specific sequences. He also loves discovering hidden patterns among the animal IDs. Given a list of animal IDs, determine the maximum length of a contiguous subsequence that contains exactly k distinct integers. Input: The first line contains an integer T, the number of test cases. Each test case starts with an integer k, followed by an integer n, the number of animal IDs. The next line contains n space-separated integers representing the IDs. Output: For each test case, print a single integer, the maximum length of a contiguous subsequence that contains exactly k distinct integers. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ k ≤ n 1 ≤ ID ≤ 10^9 Note: The ID numbers can be very large, making it necessary to consider efficient algorithms. SAMPLE INPUT 2 2 5 1 2 1 3 4 3 7 1 2 1 2 3 4 5 SAMPLE OUTPUT 3 5","solution":"def max_length_subseq_with_k_distinct(k, n, ids): Given a list of animal IDs and an integer k, return the maximal length of a contiguous subsequence with exactly k distinct integers. if k == 0: return 0 from collections import defaultdict left = 0 right = 0 max_length = 0 current_count = defaultdict(int) while right < n: current_count[ids[right]] += 1 while len(current_count) > k: current_count[ids[left]] -= 1 if current_count[ids[left]] == 0: del current_count[ids[left]] left += 1 if len(current_count) == k: max_length = max(max_length, right - left + 1) right += 1 return max_length def process_test_cases(T, test_cases): results = [] for k, n, ids in test_cases: result = max_length_subseq_with_k_distinct(k, n, ids) results.append(result) return results"},{"question":"Word Frequency Analyzer You are tasked with writing a program that analyzes the frequency of words in a given text. Your program will receive multiple datasets, each containing several lines of text. Each line contains words separated by spaces. A word is defined as a contiguous sequence of letters (a-z or A-Z). Words are case-insensitive, meaning that \\"Hello\\", \\"hello\\", and \\"HELLO\\" are considered the same word. The program should calculate the frequency of each word in the dataset and output the top `N` most frequent words, where `N` is provided along with the dataset. If two words have the same frequency, they should be alphabetically sorted. If a dataset contains fewer than `N` different words, output all the words in the dataset. # Input The input consists of multiple datasets. Each dataset is represented as follows: - An integer `N` (1 ≤ N ≤ 100), the number of top frequent words to output. - Several lines of text (up to 100 lines per dataset). Each line contains a sequence of words (1 ≤ length of each line ≤ 200). - A single line with a single asterisk (`*`) indicates the end of the current dataset. The input ends with a line containing a single zero (`0`). # Output For each dataset, output the `N` most frequent words in the text, one per line. Each word should be followed by its frequency, separated by a space. If there are fewer than `N` different words in the dataset, output all the words found. # Sample Input ``` 3 This is a test. This test is only a test. Do not worry about the test. * 2 Another test. And another test. This will test the frequency analyzer. * 0 ``` # Sample Output ``` test 4 a 2 is 2 test 3 another 2 ``` # Explanation For the first dataset, the top 3 frequent words are \\"test\\" (4 occurrences), \\"a\\" (2 occurrences), and \\"is\\" (2 occurrences). For the second dataset, the top 2 frequent words are \\"test\\" (3 occurrences) and \\"another\\" (2 occurrences).","solution":"from collections import Counter import re def word_frequency_analyzer(datasets): results = [] for dataset in datasets: N, texts = dataset words = [] for line in texts: words.extend(re.findall(r\'b[a-zA-Z]+b\', line.lower())) word_counts = Counter(words) most_common = word_counts.most_common() most_common.sort(key=lambda x: (-x[1], x[0])) # Sort by frequency descending and then alphabetically for word, freq in most_common[:N]: results.append(f\\"{word} {freq}\\") return results"},{"question":"A composite number is a positive integer that has at least one divisor other than 1 and itself. The composite numbers are the opposite of prime numbers. Given an integer `N`, find all Composite Numbers less than or equal to the given integer `N`. The first few Composite numbers are: 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, and so on. # Example 1: **Input**: N = 10 **Output**: 4 6 8 9 10 **Explanation**: 4, 6, 8, 9, and 10 have divisors other than 1 and themselves. # Example 2: **Input**: N = 20 **Output**: 4 6 8 9 10 12 14 15 16 18 20 **Explanation**: All these numbers have divisors other than 1 and themselves. # Your Task: You don\'t need to read input. Your task is to complete the function `compositeNumbers(N)` which takes an integer `N` as input parameter and returns a list of integers. # Expected Time Complexity: O(N log log N) # Expected Auxiliary Space: O(N) # Constraints: `1 <= N <= 10^5`","solution":"def compositeNumbers(N): Returns a list of composite numbers less than or equal to N. if N < 2: return [] is_prime = [True] * (N + 1) is_prime[0], is_prime[1] = False, False for i in range(2, int(N**0.5) + 1): if is_prime[i]: for j in range(i*i, N + 1, i): is_prime[j] = False composite_numbers = [i for i in range(2, N + 1) if not is_prime[i]] return composite_numbers"},{"question":"Elena loves palindromes and she has a collection of strings. A palindrome is a string that reads the same from the left and from the right. She wants to find out how many palindromic substrings (single letters included) are there in her given string and what is the length of the longest palindromic substring. For example, in the string \\"ababa\\", there are 9 palindromic substrings (\\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", \\"ababa\\") and the longest one is \\"ababa\\". Write a program that takes a string and outputs the total number of palindromic substrings and the length of the longest palindromic substring. -----Input----- The input consists of a single string s (1 le |s| le 50). The string will consist of lowercase Latin letters only. -----Output----- Your program should output two integers. The first integer is the total number of palindromic substrings in the given string. The second integer is the length of the longest palindromic substring. -----Examples----- Input ababa Output 9 5 Input abc Output 3 1 Input a Output 1 1 -----Note----- In the first example, there are 9 palindromic substrings: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", \\"ababa\\" and the longest one is \\"ababa\\". In the second example, each character is a palindrome by itself: \\"a\\", \\"b\\", \\"c\\". So there are 3 palindromic substrings and the longest one is of length 1. In the third example, the single letter \\"a\\" is the only substring and it is a palindrome, so there is only 1 palindromic substring and the longest one is of length 1.","solution":"def count_palindromic_substrings(s): Returns the total number of palindromic substrings and the length of the longest palindromic substring in the given string s. n = len(s) count = 0 max_length = 0 # Check all possible substrings for i in range(n): # Odd-length palindromes, single character center l, r = i, i while l >= 0 and r < n and s[l] == s[r]: count += 1 max_length = max(max_length, r - l + 1) l -= 1 r += 1 # Even-length palindromes, two character center l, r = i, i + 1 while l >= 0 and r < n and s[l] == s[r]: count += 1 max_length = max(max_length, r - l + 1) l -= 1 r += 1 return count, max_length"},{"question":"A stock analyst is analyzing the prices of stocks over a certain period. The analyst is interested in a particular stock and wants to determine the maximum possible profit that could be made with a single buy and a single sell. You are given an array of integers where each element represents the stock price on a given day. Write a function that calculates the maximum profit that could be achieved. If no profit is possible, return 0. -----Input----- The first line of input contains an integer N (1 leq N leq 10^5), the number of days. The second line contains N integers representing the stock prices on each day. Each price is a positive integer and does not exceed 10^4. -----Output----- The function should output a single integer which is the maximum profit that can be achieved. -----Examples----- Sample Input: 6 7 1 5 3 6 4 Sample Output: 5 Sample Input: 5 7 6 4 3 1 Sample Output: 0 Explanation: - In the first example, buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. - In the second example, no profit can be made as the stock prices are in decreasing order.","solution":"def max_profit(prices): Returns the max profit that could be achieved from a single buy and sell. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a sequence of n integers a_1, a_2, ..., a_{n}, and an integer m (1 ≤ m ≤ n). Your task is to find the largest sum of any contiguous subarray of length exactly m. A contiguous subarray of length m is a part of array that starts at some index i and ends at index i + m - 1. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ n). The second line contains n space-separated integers a_1, a_2, ..., a_{n} (-10^9 ≤ a_{i} ≤ 10^9) — elements of the array. -----Output----- Print one integer — the largest sum of any contiguous subarray of length exactly m. -----Example----- Input 6 3 -1 2 3 -5 4 6 Output 5 Input 8 4 -2 1 -3 4 -1 2 1 -5 4 Output 6 -----Note----- In the first test sample, the subarray with length 3 that has the largest sum is [2, 3, -5], which sums to 5. In the second test sample, the subarray with length 4 that has the largest sum is [4, -1, 2, 1], which sums to 6.","solution":"def largest_sum_contiguous_subarray(n, m, arr): Returns the largest sum of any contiguous subarray of length exactly m. Parameters: n (int): The length of the array. m (int): The subarray length. arr (list): The list of integers. Returns: int: The largest sum of any contiguous subarray of length exactly m. # Initialize the first window sum current_sum = sum(arr[:m]) max_sum = current_sum # Slide the window from start to end for i in range(m, n): current_sum += arr[i] - arr[i - m] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Tina is working on a scheduling algorithm for her company\'s tasks. Each task has a specific start and end time, and Tina needs to calculate the maximum number of non-overlapping tasks that can be scheduled. Write a program to help Tina maximize the number of tasks she can schedule without any of them overlapping. -----Input----- The first line of input contains the positive integer N (1 le N le 2000), representing the number of tasks. Each of the next N lines contains two integers S and E (0 le S < E le 10^9), representing the start and end times of each task. -----Output----- The output should be a single integer representing the maximum number of non-overlapping tasks that can be scheduled. -----Examples----- Sample Input 1: 3 1 2 2 3 3 4 Sample Output 1: 3 Sample Input 2: 4 1 3 2 4 3 5 6 8 Sample Output 2: 3","solution":"def max_non_overlapping_tasks(tasks): Returns the maximum number of non-overlapping tasks that can be scheduled. # Sort the tasks based on end times tasks.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count def scheduling_algorithm(n, task_list): return max_non_overlapping_tasks(task_list)"},{"question":"Consider a row of houses, each house having some amount of money in it. You are a professional robber planning to rob houses along the street. However, you can\'t rob two adjacent houses because the police will get informed about it instantly. Your task is to determine the maximum amount of money you can rob tonight without triggering the alarm. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of houses. The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^3) — the amount of money in each house. -----Output----- Print one integer — the maximum amount of money you can rob without triggering the alarm. -----Examples----- Input 5 2 7 9 3 1 Output 12 Input 4 1 2 3 1 Output 4 -----Note----- In the first example: - You can rob house 1 (money = 2) and house 3 (money = 9), or - You can rob house 2 (money = 7) and house 5 (money = 1). Thus, the maximum amount possible to rob is 2 + 9 + 1 = 12. In the second example: - You can rob house 1 (money = 1) and house 3 (money = 3), or - You can rob house 2 (money = 2) and house 4 (money = 1). Thus, the maximum amount possible to rob is 1 + 3 = 4.","solution":"def max_robbery(n, houses): if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], houses[i] + dp[i-2]) return dp[-1]"},{"question":"Given a string representing an expression containing only non-negative integers, the plus (+) operator, and the multiplication (*) operator, calculate the result of the expression following the standard order of arithmetic operations (multiplication before addition). Example 1: Input: expr = \\"2+3*5\\" Output: 17 Explanation: The expression \\"2+3*5\\" should be evaluated as 2 + (3 * 5) = 2 + 15 = 17. Example 2: Input: expr = \\"10+2*2\\" Output: 14 Explanation: The expression \\"10+2*2\\" should be evaluated as 10 + (2 * 2) = 10 + 4 = 14. Example 3: Input: expr = \\"3*3*3+1\\" Output: 28 Explanation: The expression \\"3*3*3+1\\" should be evaluated as (3 * 3 * 3) + 1 = 27 + 1 = 28. Example 4: Input: expr = \\"6+7\\" Output: 13 Constraints: - The input string will be non-empty and will contain only digits \'0\'-\'9\', \'+\', and \'*\'. - The input string may not contain spaces. - The length of the input string will be at most 100 characters.","solution":"def evaluate_expression(expr): Evaluates the expression containing non-negative integers, the \'+\' operator, and the \'*\' operator following the standard order of arithmetic operations (multiplication first, then addition). # Split the expression by the \'+\' operator addition_parts = expr.split(\\"+\\") # Calculate the sum of the multiplication results of each part total = 0 for part in addition_parts: # Split the part by the \'*\' operator and calculate the product of the numbers product = 1 for number in part.split(\\"*\\"): product *= int(number) total += product return total"},{"question":"You are given an n times n grid. Each cell in the grid can either be occupied by an obstacle or be free space. A robot is placed at the top-left corner of the grid (cell (0, 0)) and wants to reach the bottom-right corner of the grid (cell (n-1, n-1)). The robot can only move either down or right, and it cannot pass through obstacles. The task is to determine the number of unique paths the robot can take to reach its destination, avoiding obstacles. ----- Input ----- The first line contains an integer n (1 leq n leq 100), the size of the grid. Each of the next n lines contains n integers, where each integer is either 0 or 1. A 0 represents free space, and a 1 represents an obstacle. ----- Output ----- Output a single integer, the number of unique paths the robot can take to reach the destination. If no such path exists, output 0. ----- Examples ----- Sample Input 1: 3 0 0 0 0 1 0 0 0 0 Sample Output 1: 2 Sample Input 2: 3 0 1 0 0 1 0 0 0 0 Sample Output 2: 1 Sample Input 3: 3 0 1 0 1 1 0 0 0 0 Sample Output 3: 0","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths in a grid considering obstacles. :param grid: List[List[int]]: The grid containing obstacles (1) and free space (0). :return: int: Number of unique paths from top-left to bottom-right avoiding obstacles n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 # Initialize a 2D dp array with 0 dp = [[0] * n for _ in range(n)] # Start position is always 1 path if it is not an obstacle dp[0][0] = 1 # Fill dp array for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"John has embarked on a new adventure through the mountains and forests. As he roams through the dense woods, he decides to collect unique leaves that are distinguished by their varying shades of green. John is captivated by the beauty but realizes he must track certain leaf patterns to ensure he collects a unique set without any duplicates. He needs your help to identify if any two leaves among his collection have the same pattern. A pattern of a leaf is identified by a string of lowercase alphabets, and two leaves are said to have the same pattern if their strings are anagrams of each other. You must write a program that helps John by determining if any two patterns in his collection of leaves are the same. Input The first line of the input contains an integer n which indicates the number of test cases. Each test case consists of two lines. The first line of each test case contains an integer m, the number of leaf patterns John has collected. (1 ≤ m ≤ 50) The second line of each test case contains m strings each representing a pattern of a leaf. Each pattern is a string of lowercase alphabets, and the length of each string is at most 100. Output For each test case, print \\"YES\\" if there are any two patterns that are anagrams of each other. Otherwise, print \\"NO\\". Examples Input 2 3 abc bca cab 4 aabb abab baba baab Output YES YES Input 1 3 leaf pale flea Output YES","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, else False. return sorted(str1) == sorted(str2) def has_anagram_patterns(n, test_cases): Determines for each test case if there are any two anagram patterns among the set of leaf patterns. Returns a list of \\"YES\\" or \\"NO\\" strings. results = [] for i in range(n): m, patterns = test_cases[i] seen_patterns = set() for pattern in patterns: sorted_pattern = \'\'.join(sorted(pattern)) if sorted_pattern in seen_patterns: results.append(\\"YES\\") break seen_patterns.add(sorted_pattern) else: results.append(\\"NO\\") return results"},{"question":"You have a stock of various types of candies, each identified by a unique number. Your task is to distribute these candies among children such that each child gets exactly one type of candy, and no two children get the same type. However, there is a restriction: each child can only choose a candy if its corresponding number is a power of two. -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ A_i ≤ 1000000000 (10^9) - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 : A_N -----Output----- Print the maximum number of children who can get a candy. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 3 From the given list of candies [1, 2, 3, 4, 5], the numbers that are powers of two are 1, 2, and 4. Hence, three children can get these candies. The answer is 3.","solution":"def max_candies_distributed(n, candies): Given a list of candies\' types, that are described with unique numbers, determines the maximum number of children that can receive a candy, ensuring each child gets exactly one candy of type being a power of two. Parameters: n (int): Number of candies candies (list): List of integers representing types of candies Returns: int: Maximum number of children that can get a candy def is_power_of_two(x): return (x & (x - 1)) == 0 and x != 0 return sum(1 for candy in candies if is_power_of_two(candy))"},{"question":"Alice and Bob are playing a game with an array of integers, where the array is initially empty. They alternate turns, starting with Alice. On each turn, the player: - Selects a positive integer ( k ) between 1 and ( 10^9 ) inclusive. - Adds ( k ) to the array. - If the sum of all elements in the array after their move is a multiple of 3, the player loses immediately. The game ends and a winner is determined as soon as a player loses. Your task is to determine the outcome of the game if both players play optimally. -----Input----- The first line contains a single integer ( T ) (( 1 leq T leq 1000 )) — the number of test cases. The next ( T ) lines contains an integer ( k ) (( 1 leq k leq 10^9 )) — the integer selected by Alice on her first turn for each of the test cases. -----Output----- For each test case, print the name of the winner, Alice or Bob, considering both will play optimally. -----Examples----- Input: 3 1 2 3 Output: Alice Alice Bob -----Note----- Test case 1: With ( k = 1 ) initially added to the array, Alice sums the array to 1, and it is not a multiple of 3. Bob can choose any ( k ) in his turn, if he chooses 2, then the array sums to 3 and Bob loses. Bob will avoid choosing 2 and he can\'t make Alice lose within optimal strategy. Alice plays optimally and wins. Test case 2: With ( k = 2 ) initially added to the array, Alice sums the array to 2, and it is not a multiple of 3. Bob can choose any ( k ) in his turn, if he chooses 1, then the array sums to 3 and Bob loses. Bob will avoid choosing 1 and he can\'t make Alice lose within optimal strategy. Alice plays optimally and wins. Test case 3: With ( k = 3 ) initially added to the array, the sum of the array is 3. Alice loses immediately and Bob wins.","solution":"def determine_winner(k): Determines the winner of the game given the first move by Alice. :param k: integer selected by Alice on her first turn (1 <= k <= 10^9) :return: \'Alice\' if Alice wins, \'Bob\' if Bob wins # If the first chosen k is already a multiple of 3, Alice loses immediately if k % 3 == 0: return \'Bob\' else: return \'Alice\' def game_outcomes(test_cases): results = [] for k in test_cases: results.append(determine_winner(k)) return results"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid has an initial value. You need to handle two types of queries: 1. Update the value of a specific cell in the grid. 2. Compute the sum of all values for a subgrid defined by its top-left and bottom-right corners. The grid values are zero-indexed, i.e., the top-left cell of the grid is at position (0, 0). # Input - The first line contains three integers `n`, `m` and `q` (1 ≤ n, m ≤ 1,000, 1 ≤ q ≤ 10^5) — the number of rows, number of columns, and number of queries, respectively. - The next `n` lines contain `m` integers each, representing the initial values of the grid. - The next `q` lines contain a query — either an update or a sum query: - Update query is of the form `1 x y val` (0 ≤ x < n, 0 ≤ y < m, |val| ≤ 10^9) — change the value of the cell at (x, y) to `val`. - Sum query is of the form `2 x1 y1 x2 y2` (0 ≤ x1 ≤ x2 < n, 0 ≤ y1 ≤ y2 < m) — compute and return the sum of values in the subgrid defined by the corners (x1, y1) (top-left) and (x2, y2) (bottom-right). # Output For each query of the second type, output the sum of values in the specified subgrid. # Example Input ``` 3 3 5 1 2 3 4 5 6 7 8 9 2 0 0 2 2 1 1 1 0 2 0 0 2 2 1 2 2 -1 2 1 1 2 2 ``` Output ``` 45 40 3 ``` # Explanation - The initial grid is: ``` 1 2 3 4 5 6 7 8 9 ``` - After the first sum query `2 0 0 2 2`, the sum of all values in the grid is 45. - After the first update query `1 1 1 0`, the grid becomes: ``` 1 2 3 4 0 6 7 8 9 ``` - After the second sum query `2 0 0 2 2`, the sum of all values in the updated grid is 40. - After the second update query `1 2 2 -1`, the grid becomes: ``` 1 2 3 4 0 6 7 8 -1 ``` - After the third sum query `2 1 1 2 2`, the sum of values in the subgrid from (1, 1) to (2, 2) is 0 + 6 + 8 + (-1) = 3.","solution":"class Grid: def __init__(self, n, m, grid_values): self.n = n self.m = m self.grid = grid_values def update(self, x, y, val): self.grid[x][y] = val def sum_subgrid(self, x1, y1, x2, y2): total_sum = 0 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): total_sum += self.grid[i][j] return total_sum def run_queries(n, m, q, grid_values, queries): grid = Grid(n, m, grid_values) results = [] for query in queries: if query[0] == 1: _, x, y, val = query grid.update(x, y, val) elif query[0] == 2: _, x1, y1, x2, y2 = query results.append(grid.sum_subgrid(x1, y1, x2, y2)) return results"},{"question":"Grisha is fascinated by palindromic sequences. A palindromic sequence is one that reads the same forward and backward. He\'s particularly interested in finding the longest palindromic subsequence within a given string. A subsequence is a sequence derived by deleting some or no elements from the string without changing the order of the remaining elements. Given a string s of length n, Grisha wants to know the length of the longest palindromic subsequence in the string. Input The first line contains an integer n (1 ≤ n ≤ 1,000), representing the length of the string. The second line contains a string s of length n, consisting of lowercase English letters. Output Output an integer representing the length of the longest palindromic subsequence in the string. Examples Input 7 abacaba Output 7 Input 6 banana Output 5","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the string s. n = len(s) dp = [[0] * n for _ in range(n)] # Base case: single letter palindromes for i in range(n): dp[i][i] = 1 # Build the dp table for cl in range(2, n + 1): # cl is the current length of the substring for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] # Example usage: # print(longest_palindromic_subsequence(\\"abacaba\\")) # Output: 7 # print(longest_palindromic_subsequence(\\"banana\\")) # Output: 5"},{"question":"**Given N stalls and C people, distribute the people optimally** Input: First line contains an integer T - the number of test cases to follow. The subsequent T lines each contain N - the number of stalls, and C - the number of people. Output: For each test case, output a list of integers indicating the optimal distribution of people across stalls. The total number of people in the list should sum up to C. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 20 0 ≤ C ≤ 100 Each number in the distribution list needs to be a non-negative integer. SAMPLE INPUT 3 5 10 3 3 4 0 SAMPLE OUTPUT [2, 2, 2, 2, 2] [1, 1, 1] [0, 0, 0, 0]","solution":"def distribute_people_across_stalls(T, cases): results = [] for N, C in cases: distribution = [C // N] * N remainder = C % N for i in range(remainder): distribution[i] += 1 results.append(distribution) return results"},{"question":"A company is developing a file system simulation. The file system has a hierarchical structure where each folder can contain files and subfolders. Each file has a certain size associated with it, while folders don\'t have sizes but instead contain the sizes of all files and subfolders recursively inside them. We need to write a function to calculate the total size for given folders in the file system. The file structure and sizes are provided as an input string consisting of lines in the following format: ``` folderA/ file1.ext 50 file2.ext 30 subfolderA/ file3.ext 20 subfolderB/ file4.ext 10 ``` In this example, `folderA` contains two files `file1.ext` (size 50) and `file2.ext` (size 30), and a subfolder `subfolderA` (with its own files and subfolders). The indentation indicates hierarchy. A folder name ending with a slash `/` signifies it in the input string, while files are followed by their sizes. # Input Format - A single string containing multiple lines representing the file system as shown in the above format (hierarchy defined by indentation with two spaces ` `). - An integer `q` representing the number of queries. - `q` lines follow, each containing the path to a folder for which we need to calculate the total size, given as `folderA/subfolderA`. # Output Format For each query, print the total size of the requested folder in a new line. # Constraints - There can be up to 100 folders and files combined. - File sizes are positive integers ≤ 1000. - Maximum depth of nested folders will be 10. # Example Input ``` folderA/ file1.ext 50 file2.ext 30 subfolderA/ file3.ext 20 subfolderB/ file4.ext 10 2 folderA/ folderA/subfolderA/ ``` Output ``` 110 30 ``` # Notes In the example above, `folderA/` contains `file1.ext` and `file2.ext`, and `subfolderA/` which in turn contains `file3.ext` and another subfolder `subfolderB/` with `file4.ext`. - Total size for `folderA/` is `50 + 30 + 20 + 10 = 110`. - Total size for `folderA/subfolderA/` is `20 + 10 = 30`.","solution":"def parse_file_system(file_system_str): lines = file_system_str.strip().split(\\"n\\") file_system = {} current_path = [] for line in lines: indent_level = (len(line) - len(line.lstrip())) // 2 line = line.strip() if line.endswith(\\"/\\"): # It\'s a folder folder_name = line[:-1] current_path = current_path[:indent_level] current_path.append(folder_name) folder_path = \'/\'.join(current_path) + \'/\' file_system[folder_path] = [] else: # It\'s a file file_name, size = line.rsplit(\' \', 1) size = int(size) folder_path = \'/\'.join(current_path) + \'/\' if folder_path in file_system: file_system[folder_path].append((file_name, size)) else: file_system[folder_path] = [(file_name, size)] return file_system def calculate_folder_size(file_system, folder_path): size = 0 for path, files in file_system.items(): if path.startswith(folder_path): for _, file_size in files: size += file_size return size def file_system_size_queries(file_system_str, queries): file_system = parse_file_system(file_system_str) result = [] for query in queries: result.append(calculate_folder_size(file_system, query)) return result"},{"question":"Given an array of integers and a target value, implement a function to determine whether two distinct elements of the array sum up to the target value. -----Input----- The function should take two inputs: 1. An integer array `arr` of length n (2 le n le 10^5), containing the elements (1 le arr_i le 10^9). 2. An integer `target` (1 le target le 2 cdot 10^9). -----Output----- The function should return a boolean value: - `True` if there are two distinct integers in the array that add up to the target value. - `False` otherwise. -----Examples----- Input: arr = [2, 7, 11, 15] target = 9 Output: True Explanation: The elements 2 and 7 add up to the target value 9. Input: arr = [3, 2, 4] target = 6 Output: True Explanation: The elements 2 and 4 add up to the target value 6. Input: arr = [1, 2, 3, 4, 5] target = 10 Output: False Explanation: There are no two distinct elements in the array that add up to the target value 10. -----Note----- To solve this problem efficiently, you may consider using a hash table (dictionary) to store the elements of the array as you iterate through it. This way, you can check in constant time whether the complement of the current element (i.e., `target - arr[i]`) exists in the hash table.","solution":"def two_sum(arr, target): Determine if there are two distinct elements in the array that sum up to the target value. Parameters: arr (list of int): The list of integers. target (int): The target sum value. Returns: bool: True if two distinct elements sum up to the target value, False otherwise. seen = {} for number in arr: complement = target - number if complement in seen: return True seen[number] = True return False"},{"question":"Given a directed graph with V vertices and E edges, where each edge has a weight associated with it. Find the shortest distance from the source vertex S to the destination vertex D. If there is no path between S and D, return -1. Example 1: Input: V = 6, E = 8 Edges = [(0, 1, 2), (0, 2, 4), (1, 2, 1), (2, 3, 7), (1, 3, 5), (3, 4, 2), (4, 5, 3), (5, 0, 8)] Source = 0, Destination = 4 Output: 14 Explanation: The path 0→1→2→3→4 has a cost of 2+1+7+2 = 12. Another path 0→2→3→4 has a cost of 4+7+2 = 13. The shortest path 0→1→3→4 has a cost of 2+5+2 = 9. Example 2: Input: V = 3, E = 3 Edges = [(0, 1, 4), (1, 2, 6), (2, 0, 8)] Source = 0, Destination = 2 Output: 10 Explanation: The shortest path 0→1→2 has a cost of 4+6 = 10. Your Task: You don’t need to read input or print anything. Complete the function shortestPath() which takes the number of vertices V, number of edges E, a list of edges, source vertex S, and destination vertex D as input parameters and returns the shortest distance from S to D. If there is no path, return -1. Expected Time Complexity: O((V + E) log V) Expected Auxiliary Space: O(V) Constraints: 1 ≤ V, E ≤ 100 1 ≤ Weight of edges ≤ 100","solution":"import heapq def shortestPath(V, E, edges, S, D): Function to find the shortest path in a directed graph from source vertex S to destination vertex D. :param V: int - Number of vertices :param E: int - Number of edges :param edges: List[Tuple[int, int, int]] - List of edges where each edge is represented as (u, v, w) :param S: int - Source vertex :param D: int - Destination vertex :return: int - Shortest distance from S to D. If no path, return -1 # Create an adjacency list from the edges graph = {i: [] for i in range(V)} for u, v, w in edges: graph[u].append((v, w)) # Initialize distances and priority queue distances = {i: float(\'inf\') for i in range(V)} distances[S] = 0 priority_queue = [(0, S)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_vertex == D: return current_distance if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 if distances[D] == float(\'inf\') else distances[D]"},{"question":"You are given an undirected graph with n nodes and m edges. Each node has a value associated with it, and the value of node i is given by the array V[i]. Your task is to determine, for each node, the sum of values of its neighboring nodes. # Input - The first line contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of nodes and the number of edges. - The second line contains n integers V[1], V[2], ..., V[n] (0 ≤ V[i] ≤ 10^9) — the values of the nodes. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n) — an undirected edge between nodes u and v. # Output - Output n integers. The i-th integer should be the sum of the values of all the nodes adjacent to the i-th node. # Example Input ``` 5 4 1 2 3 4 5 1 2 1 3 2 4 3 5 ``` Output ``` 5 5 6 2 3 ``` # Note In the given example: - The neighbors of node 1 are nodes 2 and 3, so the sum of their values is 2 + 3 = 5. - The neighbors of node 2 are nodes 1 and 4, so the sum of their values is 1 + 4 = 5. - The neighbors of node 3 are nodes 1 and 5, so the sum of their values is 1 + 5 = 6. - The neighbor of node 4 is node 2, so the sum of its value is 2. - The neighbor of node 5 is node 3, so the sum of its value is 3.","solution":"def sum_of_neighbor_values(n, m, V, edges): # Initialize adjacency list adjacency_list = [[] for _ in range(n)] # Populate the adjacency list for u, v in edges: adjacency_list[u - 1].append(v - 1) adjacency_list[v - 1].append(u - 1) # Calculate the sums of neighbor values for each node result = [0] * n for i in range(n): for neighbor in adjacency_list[i]: result[i] += V[neighbor] return result"},{"question":"A snail is at the bottom of a well that is `N` meters deep. Each day the snail climbs up `A` meters but slides down `B` meters each night. If the snail manages to climb out of the well during the day, it does not slide back. Determine how many days it will take the snail to climb out of the well. -----Input----- Three integers `N`, `A`, and `B` (1 ≤ B < A ≤ 1000, and 1 ≤ N ≤ 10000), where: - `N` is the depth of the well, - `A` is the distance the snail climbs each day, - `B` is the distance the snail slides each night. -----Output----- Print a single integer `d` — the number of days it takes for the snail to climb out of the well. -----Examples----- Input 10 3 1 Output 5 Input 5 2 1 Output 4","solution":"def days_to_climb_out(N, A, B): Returns the number of days it takes for the snail to climb out of the well. if A >= N: return 1 effective_climb = A - B remaining_distance = N - A days_needed = remaining_distance // effective_climb if remaining_distance % effective_climb == 0: return days_needed + 1 else: return days_needed + 2"},{"question":"Write a function findFrequencies that returns a dictionary containing the frequency of each character in a given string. ```python # Write the function findFrequencies # Example: # findFrequencies(\\"hello\\") should return {\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1} def findFrequencies(string): freqs = {} for char in string: if char in freqs: freqs[char] += 1 else: freqs[char] = 1 return freqs # Sample Test Cases # findFrequencies(\\"banana\\") should return {\'b\': 1, \'a\': 3, \'n\': 2} # findFrequencies(\\"abracadabra\\") should return {\'a\': 5, \'b\': 2, \'r\': 2, \'c\': 1, \'d\': 1} ```","solution":"def findFrequencies(string): Returns a dictionary containing the frequency of each character in the given string. freqs = {} for char in string: if char in freqs: freqs[char] += 1 else: freqs[char] = 1 return freqs"},{"question":"You are a robot engineer in charge of a fleet of autonomous delivery robots in a large warehouse. Each robot follows a specific path marked by a sequence of n distinct nodes representing intersections or waypoints in the warehouse. Robots are tasked to deliver packages, and each path is measured in unit distances. Due to the robotic network, robots cannot occupy the same node at the same time. If two robots arrive at the same node simultaneously, one must wait until the other moves to the next node. Every robot starts exactly at the same time from the starting node and moves at a constant speed, but this speed may vary between different robots. The speed of each robot is given and is constant throughout its path. Your task is to simulate the movements of the robots and determine the time each robot completes its path. Input The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of nodes in the path. The second line contains n - 1 space-separated integers representing the distance between consecutive nodes. For simplicity, all distances are given in meters. The third line contains a single integer m (1 ≤ m ≤ 100) — the number of robots. The next m lines contain a single integer si (1 ≤ si ≤ 1000) representing the constant speed (in meters per second) of each robot. Output For each robot, print a single line with the time in seconds when it finishes its path. The times should be printed in the same order of the input speeds. Examples Input 4 2 3 4 3 2 1 3 Output 4.5 9.0 3.0 Explanation For the first robot, starting at 0 seconds: - It travels 2 meters at 2 meters per second, taking 1 second. - It travels 3 more meters at 2 meters per second, taking additional 1.5 seconds. - It travels the final 4 meters at 2 meters per second, taking another 2 seconds. Total time = 1 + 1.5 + 2 = 4.5 seconds. For the second robot: - It travels 2 meters at 1 meter per second, taking 2 seconds. - It travels 3 meters at 1 meter per second, taking additional 3 seconds. - It travels the final 4 meters at 1 meter per second, taking another 4 seconds. Total time = 2 + 3 + 4 = 9 seconds. For the third robot: - It travels 2 meters at 3 meters per second, taking approximately 0.67 seconds. - It travels 3 meters at 3 meters per second, taking 1 second. - It travels the final 4 meters at 3 meters per second, taking another 1.33 seconds. Total time = 0.67 + 1 + 1.33 = 3 seconds. Note: Floating-point outputs should be precise up to 4 decimal places or more.","solution":"def calculate_completion_times(n, distances, m, speeds): Calculate the time of completion of paths for each robot. Parameters: n (int): Number of nodes in the path. distances (list of int): Distances between consecutive nodes. m (int): Number of robots. speeds (list of int): Speeds of each robot in meters per second. Returns: list of float: Completion times for each robot. completion_times = [] for speed in speeds: time = 0 for distance in distances: time += distance / speed completion_times.append(round(time, 4)) return completion_times"},{"question":"You are a game developer working on a puzzle game where players can form different types of shapes using square tiles. One of the shapes that players can create is a rectangle. However, you want to implement a feature that detects only the largest rectangle that consists of `1`s in a given 2D grid of `0`s and `1`s. To achieve this, you need to write a function that calculates the area of the largest rectangle of `1`s. -----Input----- The first line contains two space-separated integers 1 le M le 200 and 1 le N le 200 – the number of rows and columns of the grid, respectively. Each of the next M lines contains N space-separated integers (either `0` or `1`). -----Output----- Output a single integer – the area of the largest rectangle containing only `1`s. -----Examples----- Sample Input 1: 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Sample Output 1: 6 Sample Input 2: 3 3 0 0 0 0 1 0 0 0 0 Sample Output 2: 1","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 max_area = 0 dp = [0] * len(matrix[0]) for row in matrix: for idx, val in enumerate(row): dp[idx] = dp[idx] + 1 if val == \'1\' else 0 max_area = max(max_area, largestRectangleArea(dp)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Alice is a delivery coordinator for a logistics company. She needs to manage the route of a delivery truck that travels back and forth along a straight road of length L. The truck starts at the warehouse located at point x = 0 and can either move towards x = L or back towards x = 0. The truck is assigned a series of delivery points along the road where it needs to stop to drop off or pick up packages. Alice wants to ensure that the truck minimizes its total travel distance while fulfilling all delivery stops at least once. In other words, the truck can change its direction of travel in order to visit all assigned delivery points in the most efficient manner. Given the positions of the delivery points along the road, determine the minimum distance the truck needs to travel to complete all deliveries. Input The first line of the input contains two integers L and n (1 ≤ L ≤ 10^9, 1 ≤ n ≤ 100,000) — the length of the road and the number of delivery points. The next line contains n integers di (0 ≤ di ≤ L), representing the positions of the delivery points along the road. Output Print the only integer — the minimum distance that the truck needs to travel to visit all delivery points at least once. Examples Input 10 3 2 5 8 Output 10 Input 20 5 4 7 9 15 19 Output 20 Input 7 4 1 3 5 6 Output 6 Note In the first example, the truck can go from the warehouse (0) to each of the delivery points (2, 5, and 8) and then back to the warehouse. A possible route is 0 → 2 → 5 → 8 → 0, resulting in a total travel distance of 16 units, and the minimal traveling distance needed is only 10 units as mentioned in the output. In the second example, the optimal route may involve multiple changes in direction to visit all delivery points in the minimum total distance. In the third example, the truck can travel the route 0 → 1 → 3 → 5 → 6, resulting in a total travel distance of 6 units.","solution":"def minimum_travel_distance(L, n, delivery_points): Returns the minimum distance the truck needs to travel to visit all delivery points. Parameters: L (int): Length of the road. n (int): Number of delivery points. delivery_points (list of int): Positions of the delivery points along the road. Returns: int: Minimum distance the truck needs to travel. if n == 0: return 0 furthest_point = max(delivery_points) return 2 * furthest_point"},{"question":"There are M programmers participating in a coding contest. Each programmer works on a certain number of problems, but there could be some problems that remain unsolved by anyone. Your task is to identify the number of such unsolved problems. -----Constraints----- - All values in input are integers. - 1 leq M leq 100 - 1 leq P leq 100 - 1 leq n_i leq P - 1 leq B_{i, 1} < cdots < B_{i, n_i} leq P -----Input----- Input is given from Standard Input in the following format: M P n_1 B_{1, 1} cdots B_{1, n_1} vdots n_M B_{M, 1} cdots B_{M, n_M} -----Output----- Print the number of unsolved problems. -----Sample Input----- 3 5 2 1 3 2 2 3 1 5 -----Sample Output----- 2 - Problem 1 is solved by Programmer 1. - Problem 2 is solved by Programmer 2. - Problem 3 is solved by Programmer 1 and Programmer 2. - Problem 4 is unsolved. - Problem 5 is solved by Programmer 3. Thus, there are two unsolved problems: Problem 4 and Problem 5.","solution":"def count_unsolved_problems(M, P, programmers): solved_problems = set() for programmer in programmers: problems = programmer[1] solved_problems.update(problems) unsolved_problems = P - len(solved_problems) return unsolved_problems def read_input_and_count_unsolved(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) P = int(data[1]) programmers = [] idx = 2 for _ in range(M): n_i = int(data[idx]) problems = list(map(int, data[idx + 1: idx + 1 + n_i])) programmers.append((n_i, problems)) idx += 1 + n_i return count_unsolved_problems(M, P, programmers)"},{"question":"A group of researchers are working on a DNA sequencing project. They are planning to compare DNA sequences based on their similarity. The similarity between two DNA sequences of equal length is defined as the number of positions at which the corresponding nucleotides are the same. The nucleotides can be represented by characters \'A\', \'C\', \'G\', and \'T\'. Given two DNA sequences of equal length, your task is to compute their similarity. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the DNA sequences. The second line contains a string s of length n consisting of characters \'A\', \'C\', \'G\', and \'T\'. The third line contains another string t of length n consisting of characters \'A\', \'C\', \'G\', and \'T\'. -----Output----- Print a single integer — the similarity of the two DNA sequences. -----Examples----- Input 5 ACGTA GCGTC Output 3 Input 4 AAAA BBBB Output 0 Input 6 ACTGAC ACTGAC Output 6 -----Note----- In the first example, the two sequences differ at positions 1 and 4. So, the similarity is 3. In the second example, the two sequences have no matching positions, resulting in a similarity of 0. In the third example, the sequences are identical, hence the similarity is equal to the length of the sequences, which is 6.","solution":"def dna_similarity(n, s, t): Calculates the similarity between two DNA sequences of equal length. Parameters: n (int): The length of the DNA sequences. s (str): The first DNA sequence. t (str): The second DNA sequence. Returns: int: The similarity between the two DNA sequences. similarity = 0 for i in range(n): if s[i] == t[i]: similarity += 1 return similarity"},{"question":"Julia loves solving mathematical problems. One day while sorting through her attic, she found a magic box which can transform numbers in a mysterious way. The box takes an integer input `x` and transforms it to `y` based on the following rules: - If the integer `x` is even, `y = x / 2`. - If the integer `x` is odd, `y = 3 * x + 1`. However, after this transformation, if the resulting number `y` is greater than or equal to 1000, it will break the box. Julia wants to determine whether the box will break when it processes a sequence of integers. Can you help Julia determine if the box will break? -----Input----- The first line of the input contains a single integer `t` (1 ≤ t ≤ 100) — the number of integers in the sequence. The second line contains `t` integers x_{1}, x_{2}, ..., x_{t} (1 ≤ x_{i} ≤ 10000) — the sequence of integers Julia wants to process. -----Output----- Print \\"BREAK\\" (quotes for clarity), if the box will break for any number in the sequence, otherwise print \\"OK\\" (quotes for clarity). -----Examples----- Input 5 2 5 8 10 1 Output OK Input 3 500 333 666 Output BREAK -----Note----- In the first sample, after processing each integer in the sequence, none of the resulting numbers are greater than or equal to 1000: - 2 becomes 1. - 5 becomes 16. - 8 becomes 4. - 10 becomes 5. - 1 becomes 4. In the second sample, the transformation of number 333 results in 1000, thus breaking the box.","solution":"def will_box_break(sequence): Determines if the box will break for any number in the sequence. Parameters: sequence (list of int): The sequence of integers to process. Returns: str: \\"BREAK\\" if the box will break for any number, otherwise \\"OK\\". for x in sequence: if x % 2 == 0: y = x // 2 else: y = 3 * x + 1 if y >= 1000: return \\"BREAK\\" return \\"OK\\""},{"question":"Lucy, a software developer, is working on an auto-suggestion feature for a text editor. To improve the accuracy of suggestions, she wants to use a list of \\"user-defined\\" words that are frequently typed by users. A suggestion is considered valid only if it starts with the same prefix as the currently typed word. Lucy wants a function that, given a list of user-defined words and a prefix, returns a sorted list of all valid suggestions. The function should sort these suggestions alphabetically. -----Input----- The first line of input contains the integer M (1 leq M leq 100), the number of user-defined words. Each of the following M lines contains a single word, its length not exceeding 100. The last line of input contains a single word which represents the prefix. -----Output----- Output all valid suggestions, each on a new line. The suggestions must be sorted alphabetically. If no suggestions exist, print \\"No suggestions\\". -----Examples----- Sample Input 1: 5 apple autocomplete archive arrow art ar Sample Output 1: archive arrow art Sample Input 2: 4 banana bandana band banner be Sample Output 2: band banana bandana banner Sample Input 3: 3 dog cat mouse zoo Sample Output 3: No suggestions","solution":"def get_suggestions(user_defined_words, prefix): Returns a sorted list of user-defined words that start with the given prefix. If no such words exist, returns \\"No suggestions\\". Parameters: user_defined_words (list of str): List of user-defined words. prefix (str): The prefix to match against. Returns: list of str: Sorted list of matching words, or [\\"No suggestions\\"] if no matches. matching_words = [word for word in user_defined_words if word.startswith(prefix)] if not matching_words: return [\\"No suggestions\\"] return sorted(matching_words)"},{"question":"You are given a rectangular grid of cells, each of which can be empty or contain an obstacle represented by -1. Your goal is to find the shortest path from the top-left cell (0,0) to the bottom-right cell (m-1, n-1) such that the path does not pass through obstacles. You can move to neighboring cells in the grid in 4 directions (up, down, left, right). If there is no valid path, return -1. Example 1: Input: grid = [[0, 0, 0], [0, -1, 0], [0, 0, 0]] Output: 4 Explanation: The path should be (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2). Example 2: Input: grid = [[0, -1], [-1, 0]] Output: -1 Explanation: There is no valid path from (0,0) to (1,1). Example 3: Input: grid = [[0, 0], [1, 0]] Output: 2 Constraints: 1 <= grid.length, grid[0].length <= 100 grid[i][j] is either 0 or -1.","solution":"from collections import deque def shortest_path_in_grid(grid): Returns the length of the shortest path from (0,0) to (m-1,n-1) in a grid, avoiding obstacles. If no path exists, returns -1. if not grid or grid[0][0] == -1 or grid[-1][-1] == -1: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == m - 1 and c == n - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"FizzBuzz is a well-known programming problem often used during interviews. It helps evaluate a candidate\'s problem-solving and for-loop handling abilities. Given an integer N, write a program that prints numbers from 1 to N, but for multiples of 3, it prints \\"Fizz\\" instead of the number, for multiples of 5, it prints \\"Buzz\\" instead of the number, and for numbers which are multiples of both 3 and 5, it prints \\"FizzBuzz\\". ------ Input ------ The first line of input contains T, the number of test cases (1 ≤ T ≤ 100). Each of the following T lines contains a single integer N (1 ≤ N ≤ 1000). ------ Output ------ For each test case, print the numbers from 1 to N with the replaced values as described above. Each test case output should be on a separate line. ----- Sample Input ------ 2 15 10 ----- Sample Output ------ 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz","solution":"def fizz_buzz(t, n_values): Prints Fizz, Buzz, or FizzBuzz for multiples of 3, 5, or both within 1 to N for each N in n_values. :param t: Number of test cases. :param n_values: List of integers containing N values for each test case. :return: List of strings for each test case depicting the FizzBuzz sequence. results = [] for n in n_values: result = [] for i in range(1, n+1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) results.append(\\" \\".join(result)) return results"},{"question":"You are a newly appointed architect of a futuristic city, Neoterica. As part of an infrastructure project, you are responsible for laying down a series of roads that connect various pivotal locations throughout the city. The city has a total of N locations, and you are provided with M potential roads that could be built. Each road has a certain length and cost associated with it. Your objective is to ensure that all locations are connected in such a way that the total cost of building the roads is minimized. Additionally, the total length of the roads should be kept as small as possible to reduce maintenance overhead. Therefore, if there are multiple ways to connect all locations with the same cost, choose the configuration where the total length of the roads is minimized. -----Input----- The first line contains two integers N (1 leq N leq 1000), the number of locations, and M (0 leq M leq 10000), the number of potential roads. Each of the next M lines contains three integers u, v, and c (1 leq u, v leq N, 1 leq c leq 1000), representing a road between location u and location v with length c. It is guaranteed that there is at least one way to connect all locations. -----Output----- Print a single integer, the minimum total length of the roads required to connect all the locations in Neoterica with the minimum possible cost while ensuring all locations remain connected. -----Examples----- Sample Input: 4 5 1 2 4 1 3 1 1 4 3 2 3 2 3 4 5 Sample Output: 6 Explanation: Select the roads between locations 1 and 3, 1 and 4, and 2 and 3. The total cost is 6, which is the minimum cost to connect all four locations. Other connections may have the same cost but a longer total length.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def min_cost_and_length_to_connect_locations(N, M, edges): edges.sort(key=lambda x: (x[2], x[0], x[1])) parent = [i for i in range(N+1)] rank = [0] * (N+1) result = 0 count = 0 for u, v, c in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) result += c count += 1 if count == N - 1: break return result"},{"question":"In a far-off enchanted land, there exists a magical string called \\"Oranak\\". This string comprises lowercase alphabets only. It is believed that the power of the string is determined by the number of unique substrings that can be formed from it. A substring is defined as any contiguous sequence of characters within a string. For example, the substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Your task is to calculate the total number of unique substrings of the given magical string \\"Oranak\\". Input The first line of input contains a single integer t (1 ≤ t ≤ 100) denoting the number of test cases. Then t test cases follow. Each test case consists of a single line which contains a string \\"Oranak\\" s (1 ≤ |s| ≤ 10^5) made up of lowercase English letters. The total length of all strings across all the test cases does not exceed 10^6. Output For each test case, print a single integer denoting the number of unique substrings of the given string \\"Oranak\\". Example Input 3 abc aaa abcd Output 6 3 10","solution":"def count_unique_substrings(s): Returns the number of unique substrings for given string s. unique_subs = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): unique_subs.add(s[i:j]) return len(unique_subs) def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. results = [] for case in test_cases: results.append(count_unique_substrings(case)) return results"},{"question":"Monica is organizing a dance competition. There are n dance pairs, each represented by their scores. Monica wants to select pairs based on a specific criteria to maximize a certain score. Each pair has a skill level (S) and an entertainment factor (E). Monica needs to maximize the score defined as the sum of the product of S and E for the selected pairs, but she can only select up to k pairs. Write a program to help Monica determine the maximum score she can achieve by selecting at most k dance pairs. Input The first line of the input contains two integers n and k ― the number of dance pairs and the maximum number of pairs Monica can select. Each of the next n lines contains two integers S and E ― the skill level and entertainment factor of each pair. Output Print one integer ― the maximum score Monica can achieve by selecting at most k pairs. Constraints - 1 ≤ n, k ≤ 1000 - 1 ≤ S, E ≤ 100 Example Input 5 2 10 100 20 200 30 300 40 200 50 100 Example Output 22000 Explanation The top two pairs to achieve the highest score are (30, 300) and (40, 200). The score is calculated as: 30 * 300 + 40 * 200 = 9000 + 8000 = 17000 Thus, the maximum score Monica can achieve is 17000.","solution":"def max_dance_score(n, k, pairs): Calculate the maximum dance score by selecting at most k pairs. Args: n (int): The number of dance pairs. k (int): The maximum number of pairs to select. pairs (list): A list of tuples with skill level and entertainment factor. Returns: int: The maximum score Monica can achieve. # Calculate the product of S and E for each pair scores = [S * E for S, E in pairs] # Sort the scores in descending order scores.sort(reverse=True) # Sum the top k scores return sum(scores[:k])"},{"question":"A rectangular matrix is called a \\"Lively\\" matrix if each cell in the matrix contains an integer such that each integer occurs exactly once in the entire matrix. You are given an N x M matrix filled with integers. Your task is to determine whether the given matrix is a lively matrix or not. -----Input----- The first line contains two integers N and M representing the number of rows and columns of the matrix respectively. Each of the next N lines contains M integers representing the elements of the matrix. -----Output----- Output \\"YES\\" if the given matrix is a lively matrix. Otherwise, output \\"NO\\". -----Constraints----- 1 ≤ N, M ≤ 500 1 ≤ matrix[i][j] ≤ N * M -----Example----- Input: 3 3 1 2 3 4 5 6 7 8 9 Output: YES Input: 2 2 1 2 2 3 Output: NO -----Explanation----- Case 1. The matrix contains integers from 1 to 9 exactly once. So the matrix is lively and the output is \\"YES\\". Case 2. The matrix contains the integer 2 twice while the integer 4 is missing. So the matrix is not lively and the output is \\"NO\\".","solution":"def is_lively_matrix(matrix): Determines if the given matrix is a lively matrix. Args: matrix (list of list of int): The matrix to check. Returns: str: \\"YES\\" if the matrix is lively, \\"NO\\" otherwise. N = len(matrix) M = len(matrix[0]) all_numbers = set() for row in matrix: for num in row: if num in all_numbers or num < 1 or num > N * M: return \\"NO\\" all_numbers.add(num) return \\"YES\\""},{"question":"The king of kingdom XORland has a special set of integers. He loves to play with numbers and perform operations on them. One day, the king decided to play a game with his advisor. The game goes as follows: 1. The king chooses a set of N integers. 2. He then selects an integer X (where X can be any integer). 3. The king computes the XOR of each of the N integers with X and sums up these results to get a final number. The advisor, knowing the king’s love for such games, quickly realized he needed a solution to find the minimum sum possible for any chosen X. As the advisor’s assistant, you are to develop a program to help the advisor find the minimum possible sum after performing the XOR operations with the best possible X for each game. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains the integer N, the number of integers in the set. - The second line contains the N integers separated by spaces. Output: - For each test case, output the minimum possible sum of integers after performing the XOR operations with the best possible X. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 0 ≤ integers in the set ≤ 10^6 Sample Input: 2 3 1 2 3 4 4 15 7 9 Sample Output: 3 16 Explanation: In Test Case 1: The set of integers is {1, 2, 3}. The optimal X to get the minimum sum is 0, so the sum of XOR operations will be 1⊕0 + 2⊕0 + 3⊕0 = 1 + 2 + 3 = 6, which after performing further operations gives minimum value 3. In Test Case 2: The set of integers is {4, 15, 7, 9}. The optimal X to get the minimum sum is 0, so the sum of XOR operations will be 4⊕0 + 15⊕0 + 7⊕0 + 9⊕0 = 4 + 15 + 7 + 9 = 35, which after performing further operations gives minimum value 16.","solution":"def min_xor_sum(test_cases): Given a list of test cases, each containing a set of integers, find the minimum possible sum after performing XOR operations with the best possible X for each test case. Args: test_cases: List of dictionaries containing \'N\' and \'numbers\'. Returns: List of minimum possible sums for each test case. min_sums = [] for case in test_cases: N = case[\'N\'] numbers = case[\'numbers\'] # According to the problem, we need to find the minimum sum. Since XORing with 0 will # give us the numbers themselves, the minimum sum would be generated by selecting the smallest # possible X such that the numbers\' binary representation uses the least significant bits # efficiently. min_sum = sum(numbers) min_sums.append(min_sum) return min_sums"},{"question":"Given a string `s` that consists of only uppercase letters \'A\', \'B\', and \'C\', you are allowed to remove any three consecutive characters \'ABC\' or \'CBA\' in the string. Your goal is to determine the minimum number of characters remaining after performing zero or more such removals. Write a function that returns the minimum length of the string after performing the removals. Example 1: Input: s = \\"ABCCBA\\" Output: 0 Explanation: Removing \'CBA\' from index 3, the string becomes \\"ABC\\". Removing \'ABC\' from index 0, the string now becomes \\"\\". The minimum length is 0. Example 2: Input: s = \\"ABACBC\\" Output: 2 Explanation: No \'ABC\' or \'CBA\' is present in the string, so no removals can be performed. The minimum length is 2. Example 3: Input: s = \\"ABCABC\\" Output: 0 Explanation: Removing \'ABC\' from index 0, the string becomes \\"ABC\\". Removing \'ABC\' from index 0 again, the string now becomes \\"\\". The minimum length is 0. Note: 1. 1 <= s.length <= 20000","solution":"def min_length_after_removals(s): Returns the minimum length of the string after performing zero or more removals of \'ABC\' or \'CBA\'. while \'ABC\' in s or \'CBA\' in s: s = s.replace(\'ABC\', \'\') s = s.replace(\'CBA\', \'\') return len(s)"},{"question":"Write a function named isAnagram which takes two strings as input and returns a boolean indicating whether the two strings are anagrams of each other. Anagrams are words or phrases formed by rearranging the letters of another, typically using all the original letters exactly once. Ignore spaces and case during comparison. For example: ```python isAnagram(\\"listen\\", \\"silent\\") # Returns True isAnagram(\\"Triangle\\", \\"Integral\\") # Returns True isAnagram(\\"apple\\", \\"pale\\") # Returns False ``` You can assume that the input strings will only contain alphabetic characters and spaces.","solution":"def isAnagram(str1, str2): Returns True if str1 and str2 are anagrams of each other, False otherwise. Ignores spaces and case during comparison. # Remove spaces and convert to lower case str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Compare the sorted characters of both strings return sorted(str1) == sorted(str2)"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},P=["disabled"],j={key:0},R={key:1};function D(s,e,l,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",Y,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",j,"See more"))],8,P)):u("",!0)])}const z=d(A,[["render",D],["__scopeId","data-v-90fe2b00"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/2.md","filePath":"chatai/2.md"}'),M={name:"chatai/2.md"},G=Object.assign(M,{setup(s){return(e,l)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
