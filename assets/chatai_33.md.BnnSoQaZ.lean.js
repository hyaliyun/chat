import{_ as h,o as n,c as a,a as t,m as c,t as u,C as g,M as _,U as y,f as d,F as w,p as b,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},A={class:"review-title"},S={class:"review-content"};function E(i,e,l,p,r,s){return n(),a("div",T,[t("div",q,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(l.poem.solution),1)])])])}const C=h(k,[["render",E],["__scopeId","data-v-a71acdda"]]),F=JSON.parse('[{"question":"You are tasked with writing a **Python** function named `get_top_performers` that analyzes a CSV file containing sales data for different employees and returns the top performer(s) for each month. The CSV file is structured with columns: `Employee`, `Month`, and `Sales`, where `Employee` is the name of the employee, `Month` is the month of the sales record in `YYYY-MM` format, and `Sales` is the sales amount. Implement the following tasks within your function: 1. Read the CSV file using the `csv` module. 2. Identify the top performer(s) (the employee(s) with the highest sales) for each month. 3. Return a dictionary where each key is a month in `YYYY-MM` format and the corresponding value is a list of top performer(s) for that month. If multiple employees are the top performers for a month (tied sales amounts), all names should be included in the list for that month. **Function Signature:** ```python def get_top_performers(csv_filepath: str) -> dict: pass ``` **Requirements:** - Use the `csv` module to read the CSV file. - Handle the scenario where the sales amounts are tied for multiple employees by including all of their names in the list of top performers. - The input `csv_filepath` is a string representing the path to the CSV file. The function should read the file and process its contents accordingly.","solution":"import csv from collections import defaultdict def get_top_performers(csv_filepath: str) -> dict: This function reads a CSV file containing sales data and returns the top performers for each month. Args: csv_filepath: str: The path to the CSV file. Returns: dict: A dictionary where each key is a month in \'YYYY-MM\' format and the value is a list of top performers. sales_data = defaultdict(lambda: defaultdict(list)) # Reading the CSV file with open(csv_filepath, mode=\'r\', newline=\'\', encoding=\'utf-8\') as file: reader = csv.DictReader(file) for row in reader: employee = row[\'Employee\'] month = row[\'Month\'] sales = float(row[\'Sales\']) sales_data[month][sales].append(employee) top_performers = {} # Finding the top performers for each month for month, sales in sales_data.items(): max_sales = max(sales.keys()) top_performers[month] = sales[max_sales] return top_performers"},{"question":"You are required to write a Python function `find_anagrams(words_list, prefix_str)` that identifies and returns all anagrams of words from the `words_list` that start with the specified prefix `prefix_str`. The function should accomplish the following: 1. Ensure that the provided prefix is a starting substring of the anagram. 2. Use standard library functions to find anagrams related to the prefix among the given words. 3. Return the list of anagrams sorted in lexicographical order. An anagram is a word formed by rearranging the letters of another, using all the original letters exactly once. **Function Signature:** ```python def find_anagrams(words_list: list, prefix_str: str) -> list: ``` **Example Usage:** ```python words = [\\"listen\\", \\"silent\\", \\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\"] prefix = \\"si\\" print(find_anagrams(words, prefix)) # Output: [\'silent\'] ``` **Explanation:** - The function will take in a list of words and a prefix to filter and find correct anagrams starting with the given prefix. - It will return a list containing the anagrams sorted alphabetically, which meet the prefix condition. - In the example, the word \\"silent\\" is an anagram of \\"listen\\" and starts with the prefix \\"si\\". Thus, it appears in the returned list.","solution":"def find_anagrams(words_list, prefix_str): Finds and returns all anagrams from the words_list that start with the specified prefix prefix_str. Parameters: words_list (list): A list of words to search anagrams from. prefix_str (str): The prefix that the anagrams need to start with. Returns: list: A list of anagrams that start with the given prefix, sorted in lexicographical order. from collections import Counter def is_anagram(word1, word2): return Counter(word1) == Counter(word2) # List comprehension to find words that start with the given prefix possible_anagrams = [word for word in words_list if word.startswith(prefix_str)] # Check if the words in possible_anagrams are anagrams of each other results = [ word for word in possible_anagrams for orig_word in words_list if word != orig_word and is_anagram(word, orig_word) and word.startswith(prefix_str) ] return sorted(list(set(results))) # Example usage: # words = [\\"listen\\", \\"silent\\", \\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\"] # prefix = \\"si\\" # print(find_anagrams(words, prefix)) # Outputs: [\'silent\']"},{"question":"Create a function named `matrix_operations` that takes two 2-dimensional numpy arrays (A and B) as input and returns a dictionary containing the following matrix operations: 1. Matrix Addition: - The element-wise sum of A and B. 2. Matrix Subtraction: - The element-wise difference of A from B. 3. Matrix Multiplication: - The dot product of A and B. 4. Element-wise Multiplication: - The element-wise product of A and B. 5. Transpose: - The transpose of both A and B. 6. Determinant: - The determinant of both A and B. 7. Inverse: - The inverse of both A and B, if they are square and invertible. If not, return `None` for that matrix. The function should return this information in a dictionary with the following structure: ```python { \\"addition\\": addition_matrix, \\"subtraction\\": subtraction_matrix, \\"dot product\\": dot_product_matrix, \\"element-wise multiplication\\": elementwise_product_matrix, \\"transpose\\": [transpose_A, transpose_B], \\"determinant\\": [determinant_A, determinant_B], \\"inverse\\": [inverse_A, inverse_B] } ``` **Requirements:** - Use the `numpy` library to perform the required calculations. - Ensure that the solution appropriately handles cases where A and B are not conformable for certain operations (e.g., dot product, determinant, inverse). - Raise a ValueError if A and B cannot be added, subtracted, or element-wise multiplied due to shape mismatches.","solution":"import numpy as np def matrix_operations(A, B): Performs various matrix operations on two input matrices A and B. Parameters: A (numpy.ndarray): The first 2-dimensional numpy array. B (numpy.ndarray): The second 2-dimensional numpy array. Returns: dict: A dictionary containing the results of the matrix operations. if A.shape != B.shape: raise ValueError(\\"Matrices A and B must have the same shape for addition, subtraction, and element-wise multiplication.\\") results = {} # Matrix Addition results[\\"addition\\"] = A + B # Matrix Subtraction results[\\"subtraction\\"] = A - B # Matrix Multiplication (Dot Product) if A.shape[1] != B.shape[0]: dot_product_matrix = None else: dot_product_matrix = np.dot(A, B) results[\\"dot product\\"] = dot_product_matrix # Element-wise Multiplication results[\\"element-wise multiplication\\"] = A * B # Transpose results[\\"transpose\\"] = [A.T, B.T] # Determinant determinant_A = np.linalg.det(A) if A.shape[0] == A.shape[1] else None determinant_B = np.linalg.det(B) if B.shape[0] == B.shape[1] else None results[\\"determinant\\"] = [determinant_A, determinant_B] # Inverse if A.shape[0] == A.shape[1] and np.linalg.det(A) != 0: inverse_A = np.linalg.inv(A) else: inverse_A = None if B.shape[0] == B.shape[1] and np.linalg.det(B) != 0: inverse_B = np.linalg.inv(B) else: inverse_B = None results[\\"inverse\\"] = [inverse_A, inverse_B] return results"},{"question":"You are tasked with writing a Python function `generate_password(length)` that generates a secure random password of a specified length. The function should adhere to the following criteria: 1. The function will receive one parameter: - `length` (an integer representing the length of the password to be generated, with a minimum length of 8) 2. The generated password should include a mix of lowercase letters, uppercase letters, digits, and special characters (`!@#%^&*()_+-=[]{}|;\':\\",./<>?`). 3. Ensure the password is generated randomly each time the function is called. 4. If the `length` parameter is less than 8, the function should return a message indicating that the password length must be at least 8 characters. 5. Use the `random` and `string` libraries of Python. Specifically, ensure that you make use of: - `random.choice` to select random characters from the allowed set of characters. - `random.shuffle` to shuffle the characters to ensure randomness. The function signature is: ```python def generate_password(length): pass ``` Example: Calling `generate_password(12)` might produce a password such as `aB3dEf!9hG2`. Ensure your function is secure and handles the character selection properly.","solution":"import random import string def generate_password(length): if length < 8: return \\"Password length must be at least 8 characters.\\" # Define the character sets lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits special = \\"!@#%^&*()_+-=[]{}|;\':\\",./<>?\\" # Ensure that each category appears at least once in the password password = [ random.choice(lowercase), random.choice(uppercase), random.choice(digits), random.choice(special) ] # Fill the remaining length of the password all_characters = lowercase + uppercase + digits + special for _ in range(length - 4): password.append(random.choice(all_characters)) # Shuffle to avoid predictable patterns random.shuffle(password) return \'\'.join(password)"},{"question":"You are developing a function to simulate a basic digital clock that updates every second. The objective is to write a Python function that prints the current time in the format `HH:MM:SS` and updates it every second for a specified duration. # Requirements Write a function named `digital_clock` that takes the following parameters: - `duration`: An integer representing how many seconds the clock should run. Your function should: 1. Import the necessary libraries: `time`. 2. Calculate the end time by adding the `duration` to the current time. 3. Use a loop to print the current time every second in the format `HH:MM:SS`. 4. Ensure that the printed time updates correctly every second and does not clear the previous line. # Example ```python # Let the function run for 10 seconds to simulate a digital clock digital_clock(10) ``` ```plaintext 12:34:56 12:34:57 12:34:58 ... ``` # Note The `digital_clock` function should: - Make use of the `time` module\'s `time` and `sleep` methods. - Calculate the current time on each iteration of the loop, ensuring an accurate timer. - Continue updating the time display appropriately until the specified `duration` has elapsed.","solution":"import time def digital_clock(duration): Simulates a digital clock that updates every second for the specified duration. :param duration: How many seconds the clock should run. end_time = time.time() + duration while time.time() < end_time: current_time = time.strftime(\'%H:%M:%S\', time.localtime()) print(current_time) time.sleep(1)"},{"question":"Create a function that takes a list of integers and returns a dictionary with the following keys: 1. \'mean\': The mean (average) of the integers. 2. \'median\': The median of the integers. 3. \'mode\': The mode of the integers. If there are multiple modes, return all in a list. 4. \'std_dev\': The standard deviation of the integers. The function should handle invalid inputs gracefully by raising the exception: ValueError: If the input list is empty or contains non-integer elements. You should write self-contained code starting with: ``` from collections import Counter import numpy as np def task_func(numbers): ```","solution":"from collections import Counter import numpy as np def task_func(numbers): Takes a list of integers and returns a dictionary with mean, median, mode, and standard deviation. Parameters: numbers (list): A list of integers. Returns: dict: A dictionary with the keys \'mean\', \'median\', \'mode\', \'std_dev\'. if not all(isinstance(n, int) for n in numbers) or not numbers: raise ValueError(\\"Input list must be non-empty and contain only integers.\\") # Mean mean = np.mean(numbers) # Median median = np.median(numbers) # Mode count = Counter(numbers) max_freq = max(count.values()) mode = [num for num, freq in count.items() if freq == max_freq] if len(mode) == 1: mode = mode[0] # Standard Deviation std_dev = np.std(numbers, ddof=1) return { \'mean\': mean, \'median\': median, \'mode\': mode, \'std_dev\': std_dev }"},{"question":"You are required to write a function `replace_zeros_with_mean(arr)` that takes a non-empty list of integers `arr` as input and returns a new list where all zero values in the original array are replaced with the mean of the non-zero elements. # Requirements 1. The input list `arr` will contain integers, including potentially several zero values. 2. The function should perform the following operations: - Calculate the mean of the non-zero elements in the list. - Replace each zero value in the list with this calculated mean value. - Return the updated list. 3. If the list contains only zeros, return the list as-is without any modification. # Function Signature ```python def replace_zeros_with_mean(arr): \'\'\' Replace all zero values in the list with the mean of non-zero elements. Input: list of integers arr Output: new list with zero values replaced by mean of non-zero elements \'\'\' # Your Code Here ``` # Hypothetical Example Suppose the input list `arr` looks like this: ```python [0, 5, 0, 3, 7] ``` The non-zero elements in this list are [5, 3, 7], and their mean is (5 + 3 + 7) / 3 = 5.0. The resulting list with the zeros replaced should be: ```python [5.0, 5, 5.0, 3, 7] ``` However, if the input list `arr` looks like this: ```python [0, 0, 0] ``` Since there are only zeros in the list, return the list as-is: ```python [0, 0, 0] ``` # Instructions: - Use only basic list operations and built-in functions for this task. - Ensure that the function handles any general case, including empty and all-zero list scenarios.","solution":"def replace_zeros_with_mean(arr): \'\'\' Replace all zero values in the list with the mean of non-zero elements. Input: list of integers arr Output: new list with zero values replaced by mean of non-zero elements \'\'\' if not arr: return arr non_zero_elements = [x for x in arr if x != 0] if not non_zero_elements: return arr mean_non_zero = sum(non_zero_elements) / len(non_zero_elements) return [mean_non_zero if x == 0 else x for x in arr]"},{"question":"** Write a function called `merge_sorted_lists` that takes two sorted lists of integers as input and returns a new list that contains all the elements from both the input lists, sorted in ascending order. The function must merge the lists without using the built-in `sorted()` function. You can assume that the input lists may be of different lengths and that they do not contain any duplicate elements within themselves, but may have duplicates when combined. The function signature will be: ```python def merge_sorted_lists(list1: list[int], list2: list[int]) -> list[int]: ``` **Parameters:** - `list1` (list of int): The first sorted list of integers. - `list2` (list of int): The second sorted list of integers. **Returns:** - `list of int`: A new sorted list containing all the elements from `list1` and `list2`. **Example:** ```python print(merge_sorted_lists([1, 3, 5], [2, 4, 6])) # Output: [1, 2, 3, 4, 5, 6] print(merge_sorted_lists([10, 20, 30], [5, 15, 25, 35])) # Output: [5, 10, 15, 20, 25, 30, 35] ``` **Note:** - You should handle the merging process efficiently, iterating through both lists simultaneously to maintain the sorted order. - If either list is empty, the function should simply return the non-empty list.","solution":"def merge_sorted_lists(list1: list[int], list2: list[int]) -> list[int]: Merges two sorted lists into a single sorted list without using the built-in sorted() function. Parameters: list1 (list of int): The first sorted list of integers. list2 (list of int): The second sorted list of integers. Returns: list of int: A new sorted list containing all the elements from list1 and list2. merged_list = [] i, j = 0, 0 # Iterate through both lists simultaneously comparing elements while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Handle the remaining elements, if any while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You need to implement a script for extracting, cleaning, and analyzing weather forecast data from an online API. The objective is to create a pandas DataFrame and perform several data transformations on it. Write a function named `process_weather_data(api_url)` that achieves the following: 1. **Fetch the data**: Use the `requests.get` method to obtain the JSON weather forecast data from the provided API URL. 2. **Parse the JSON**: Parse the received JSON data to extract key weather-related information for each day. 3. **Create a DataFrame**: Form a pandas DataFrame comprising the following columns: `date`, `temperature`, `humidity`, and `weather_description`. 4. **Transform the data**: - Convert the `date` column to a `datetime` object. - Create a new column named `temp_celsius` by converting the `temperature` in Fahrenheit to Celsius using the formula `temp_celsius = (temperature - 32) * 5/9`. 5. **Filter Data**: Filter the DataFrame to include only those rows where the `humidity` is greater than 70%. 6. **Final DataFrame**: The final DataFrame should have the columns `date`, `temp_celsius`, and `weather_description`, sorted by the `date` in ascending order. # Function Signature ```python def process_weather_data(api_url: str) -> pd.DataFrame: ``` Constraints - The API URL will return a valid JSON response containing the required weather forecast data. - Use the `requests` library for accessing the API. - Use the `pandas` library for DataFrame operations. - The `date` should be formatted as a `datetime` object. # Example Usage: ```python api_url = \\"https://api.weather.com/v3/wx/forecast/daily/5day?apiKey=example_key\\" df = process_weather_data(api_url) print(df.head()) ``` # Expected Output: The DataFrame should contain the following columns: `date`, `temp_celsius`, and `weather_description`, ordered by `date` in ascending order. Columns that are not specified in the final data should be excluded in the output.","solution":"import requests import pandas as pd def process_weather_data(api_url: str) -> pd.DataFrame: # Fetch the data response = requests.get(api_url) response.raise_for_status() # This will raise an error for a bad response data = response.json() # Parse the JSON weather_data = [] for day in data[\'forecasts\']: weather_data.append({ \'date\': day[\'date\'], \'temperature\': day[\'temperature\'], \'humidity\': day[\'humidity\'], \'weather_description\': day[\'weather_description\'] }) # Create a DataFrame df = pd.DataFrame(weather_data) # Transform the data df[\'date\'] = pd.to_datetime(df[\'date\']) df[\'temp_celsius\'] = (df[\'temperature\'] - 32) * 5/9 # Filter Data df_filtered = df[df[\'humidity\'] > 70] # Final DataFrame df_final = df_filtered[[\'date\', \'temp_celsius\', \'weather_description\']].sort_values(by=\'date\', ascending=True).reset_index(drop=True) return df_final"},{"question":"You are given a task to write a function `xml_to_json_directory(xml_file: str) -> None` which takes the path to an XML file, `xml_file`, and performs the following steps: 1. Extracts the name of the XML file (without the extension) and the directory where the file is located. 2. Creates a directory named \\"json\\" within the same directory as the XML file, if it does not already exist. 3. Parses the XML file into a dictionary format. 4. Saves this dictionary as a JSON file named after the XML file (without the extension) inside the \\"json\\" directory. You are required to use the `pathlib.Path` library for handling filesystem paths and the `xml.etree.ElementTree` library for reading XML files and the `json` library for writing JSON files. **Function Signature:** ```python def xml_to_json_directory(xml_file: str) -> None: ... ``` **Example:** Suppose you have an XML file located at `/path/to/data_file.xml`. After running the function, your directory structure should look like this: ``` /path/to/json/ └───data_file.json ``` **Note:** - Handle XML parsing errors gracefully. - Assume the XML file is well-formed and does not contain nested nodes with the same name at the same level for simplicity.","solution":"import json from pathlib import Path import xml.etree.ElementTree as ET def xml_to_json_directory(xml_file: str) -> None: Converts the given XML file to a JSON file and saves it in a \'json\' directory located at the same level as the XML file. # Convert the input path to a Path object xml_path = Path(xml_file) # Extract the directory and base name of the XML file xml_dir = xml_path.parent xml_stem = xml_path.stem # Create \'json\' directory if it does not exist json_dir = xml_dir / \\"json\\" json_dir.mkdir(exist_ok=True) # Parse the XML file try: tree = ET.parse(xml_path) root = tree.getroot() except ET.ParseError as e: raise RuntimeError(f\\"Error parsing XML file: {e}\\") # Convert XML data to dictionary def xml_to_dict(element): if len(element) == 0: return element.text return {child.tag: xml_to_dict(child) for child in element} data_dict = {root.tag: xml_to_dict(root)} # Save as JSON json_file_path = json_dir / f\\"{xml_stem}.json\\" with open(json_file_path, \'w\') as json_file: json.dump(data_dict, json_file, indent=4)"},{"question":"Implement a function that takes a list of integers and returns a new list where each element is the product of all other elements in the original list, except the element at that position. Ensure that the function handles edge cases, such as when the list is empty or contains only one element. The function should output: list: The resulting list of products or an appropriate response for edge cases. You should write self-contained code starting with: ``` def task_func(nums): ```","solution":"def task_func(nums): Takes a list of integers and returns a new list where each element is the product of all other elements in the original list, except the element at that position. Args: nums (list): List of integers Returns: list: A new list where each element is the product of all other elements in the input list, except the element at that position if not nums: return [] if len(nums) == 1: return [0] # Initialize the result list with 1s length = len(nums) result = [1] * length # Calculate product of elements to the left of each element left_product = 1 for i in range(length): result[i] *= left_product left_product *= nums[i] # Calculate product of elements to the right of each element right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"You are required to write a function named `reverse_words_in_sentence` that accepts a string sentence and returns a new sentence where the words are reversed in order but without changing the characters within the words. **Requirements:** - Use Python\'s string methods to split the input sentence into words and then reverse the order of these words. - The function should handle any punctuation attached to the words such as commas, periods, and question marks. - Preserve the original punctuation and spaces in their respective locations in the output sentence. **Example:** ```python reverse_words_in_sentence(\\"Hello, world!\\") # should return \\"world! Hello,\\" reverse_words_in_sentence(\\"The quick brown fox.\\") # should return \\"fox. brown quick The\\" ``` Your final implementation should be as follows: 1. Define the function `reverse_words_in_sentence(sentence)`. 2. Split the sentence into words and reverse the order of these words. 3. Join the reversed words back into a string and return the result.","solution":"def reverse_words_in_sentence(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): The input sentence. Returns: str: The sentence with the words reversed. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"You are given a list of products, each represented as a dictionary containing the fields \\"name\\" (str), \\"price\\" (float), and \\"quantity\\" (int). Write a function that takes this list and returns the total inventory value of all products. If any of the products have missing fields, raise a ValueError. The function should output: float: The total inventory value calculated as the sum of the product of price and quantity for all products. You should write self-contained code starting with: ``` def total_inventory_value(products: list): ```","solution":"def total_inventory_value(products: list): Returns the total inventory value of all products. Raises ValueError if any product has missing fields. :param products: List of dictionaries, each with \'name\', \'price\', and \'quantity\' keys. :return: Total inventory value as float. total_value = 0.0 for product in products: if not all(key in product for key in [\'name\', \'price\', \'quantity\']): raise ValueError(\'Missing fields in product\') total_value += product[\'price\'] * product[\'quantity\'] return total_value"},{"question":"You are given a list of integers where each integer appears exactly twice, except for one integer which appears only once. Your task is to write a function that finds the integer that appears only once. Implement the function: ```python def find_unique_number(nums): Find the number that appears only once in the list where every other number appears twice. :param list nums: A list of integers where every integer appears twice except for one. :return: The integer that appears only once. :rtype: int # Your code here ``` # Requirements: 1. Use bitwise XOR operation to find the unique number. 2. Do not use any additional data structures such as dictionaries or sets to solve this problem. 3. Ensure the solution has a linear runtime complexity, O(n). # Example: ```python find_unique_number([4, 3, 2, 4, 1, 3, 2]) # Should return 1 ```","solution":"def find_unique_number(nums): Find the number that appears only once in the list where every other number appears twice. :param list nums: A list of integers where every integer appears twice except for one. :return: The integer that appears only once. :rtype: int unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"Create a Python function `parse_csv` that reads a CSV file and returns the content as a list of dictionaries, where each dictionary represents a row in the CSV file, with keys as the column headers and values as the data in each cell. This function should handle the following requirements: 1. The input to the function should be the filename of the CSV file. 2. The CSV file should have a header row that will be used as the keys of the dictionaries. 3. The function should handle missing values in the CSV file by using `None` in the resulting dictionaries. 4. The function should handle CSV files where the header or data values might be enclosed in double quotes, and it should properly parse such cases. Example Usage: ```python # Assume the CSV file \'data.csv\' has the following content: # name,age,city # Alice,30,New York # Bob,25,Los Angeles # Charlie,,Chicago result = parse_csv(\'data.csv\') print(result) # Output: # [{\'name\': \'Alice\', \'age\': \'30\', \'city\': \'New York\'}, # {\'name\': \'Bob\', \'age\': \'25\', \'city\': \'Los Angeles\'}, # {\'name\': \'Charlie\', \'age\': None, \'city\': \'Chicago\'}] ```","solution":"import csv def parse_csv(filename): Parses a CSV file and returns its content as a list of dictionaries. Each dictionary represents a row with the CSV\'s header row used as the keys. :param filename: The name of the CSV file to parse. :return: A list of dictionaries representing the CSV file\'s content. with open(filename, \'r\', newline=\'\', encoding=\'utf-8\') as csvfile: reader = csv.DictReader(csvfile) result = [] for row in reader: parsed_row = {key: (value if value != \'\' else None) for key, value in row.items()} result.append(parsed_row) return result"},{"question":"This function computes the Fibonacci sequence up to a given number of terms `n` using a generator. The function should be able to handle the cases where `n` is zero or negative by returning an appropriate message. Additionally, implement a simple command-line interface to input `n` and output the sequence terms. The generator should yield: int: The next term in the Fibonacci sequence. Example of usage: Input: 5 Output: 0, 1, 1, 2, 3 You should write self-contained code starting with: ``` def fibonacci_generator(n): if n <= 0: return \\"The number of terms must be positive.\\" a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b if __name__ == \\"__main__\\": n = int(input(\\"Enter the number of terms: \\")) if n <= 0: print(\\"The number of terms must be positive.\\") else: sequence = fibonacci_generator(n) print(\\", \\".join(map(str, sequence))) ```","solution":"def fibonacci_generator(n): if n <= 0: return \\"The number of terms must be positive.\\" def generator(): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b return list(generator()) if __name__ == \\"__main__\\": n = int(input(\\"Enter the number of terms: \\")) if n <= 0: print(\\"The number of terms must be positive.\\") else: sequence = fibonacci_generator(n) print(\\", \\".join(map(str, sequence)))"},{"question":"# Overview You are given a dictionary representing a list of students and their respective grades in various subjects. Your task is to compute the GPA (Grade Point Average) for each student based on these grades and return a dictionary mapping each student to their GPA. # Function to Implement You need to implement a function named `compute_gpa` that takes in the following parameter: - `grades_dict`: a dictionary where keys are student names (strings) and values are dictionaries that map subjects (strings) to grades (integers). Each grade is between 0 and 100. The `compute_gpa` function should convert the grades to GPA scale as follows and calculate the mean GPA for each student: - 90-100: 4.0 - 80-89: 3.0 - 70-79: 2.0 - 60-69: 1.0 - 0-59: 0.0 Return a dictionary where the keys are student names and the values are the GPA rounded to two decimal places. # Example Usage Given the following input: ```python grades_dict = { \\"Alice\\": {\\"Math\\": 95, \\"English\\": 85, \\"History\\": 76}, \\"Bob\\": {\\"Math\\": 78, \\"English\\": 83, \\"History\\": 62}, \\"Charlie\\": {\\"Math\\": 59, \\"English\\": 60, \\"History\\": 65} } ``` Your function call should look like: ```python gpa_dict = compute_gpa(grades_dict) ``` The resulting dictionary should look like: ```python { \\"Alice\\": 3.00, \\"Bob\\": 2.00, \\"Charlie\\": 0.67 } ``` # Additional Information - Assume that each student has grades for at least one subject. - The GPA for each student should be rounded to two decimal places. - Use the given grading scale to convert numerical grades to GPA values. - Implement any helper functions if necessary to achieve the solution.","solution":"def compute_gpa(grades_dict): def grade_to_gpa(grade): if 90 <= grade <= 100: return 4.0 elif 80 <= grade <= 89: return 3.0 elif 70 <= grade <= 79: return 2.0 elif 60 <= grade <= 69: return 1.0 else: return 0.0 gpa_dict = {} for student, grades in grades_dict.items(): gpa_sum = 0.0 subject_count = 0 for subject, grade in grades.items(): gpa_sum += grade_to_gpa(grade) subject_count += 1 gpa = round(gpa_sum / subject_count, 2) gpa_dict[student] = gpa return gpa_dict"},{"question":"In this exercise, your task is to write a function in Python that calculates the dot product of two given vectors. The dot product of two vectors (mathbf{u}) and (mathbf{v}) with components ((u_1, u_2, u_3, ldots, u_n)) and ((v_1, v_2, v_3, ldots, v_n)) respectively is defined as: [ mathbf{u} cdot mathbf{v} = u_1 cdot v_1 + u_2 cdot v_2 + u_3 cdot v_3 + cdots + u_n cdot v_n ] You are required to implement the function `calculate_dot_product` using the `numpy` library. This function will take two inputs, each being a 1-dimensional numpy array representing the vectors, and return a single floating-point number representing the dot product of the two vectors. Make sure to use the following numpy functions in your implementation: - `numpy.dot`: to compute the dot product of the two arrays. **Function Signature:** ```python def calculate_dot_product(vector1: np.ndarray, vector2: np.ndarray) -> float: pass ``` **Input:** - `vector1`: A 1-dimensional numpy array of floats representing the first vector. - `vector2`: A 1-dimensional numpy array of floats representing the second vector. **Output:** - A single float representing the dot product of the input vectors. **Examples:** ```python import numpy as np # Example 1 vector1 = np.array([1, 2, 3]) vector2 = np.array([4, 5, 6]) print(calculate_dot_product(vector1, vector2)) # Output: 32.0 # Example 2 vector1 = np.array([7, 8, 9]) vector2 = np.array([10, 11, 12]) print(calculate_dot_product(vector1, vector2)) # Output: 354.0 # Example 3 vector1 = np.array([0, 0, 0]) vector2 = np.array([1, 1, 1]) print(calculate_dot_product(vector1, vector2)) # Output: 0.0 ``` **Requirements:** - You must use the `numpy` library, specifically `numpy.dot`, to implement the function.","solution":"import numpy as np def calculate_dot_product(vector1: np.ndarray, vector2: np.ndarray) -> float: Calculates the dot product of two 1-dimensional numpy arrays. Args: - vector1 (np.ndarray): A 1D numpy array representing the first vector. - vector2 (np.ndarray): A 1D numpy array representing the second vector. Returns: - float: The dot product of the two vectors. return np.dot(vector1, vector2)"},{"question":"# Task: You need to write a function that takes a string of words separated by spaces, and returns a dictionary with each word as the key and the frequency of that word as the value. If a word appears more than once, it should return the frequency of how many times it appears within the string. The function should ignore case sensitivity, so \\"Hello\\" and \\"hello\\" should be considered the same word. # Function Specification 1. **Function Name:** `word_frequency` 2. **Input Parameter:** - `input_string`: A string consisting of words separated by spaces. 3. **Output:** A dictionary where keys are unique words, and values are their corresponding frequencies. # Constraints: - Words are separated by a single space. - Ignore punctuation. - Ignore case sensitivity, meaning the comparison should not distinguish between uppercase and lowercase letters. # Example: ```python def word_frequency(input_string): pass print(word_frequency(\\"hello world\\")) # Should return {\'hello\': 1, \'world\': 1} print(word_frequency(\\"Hello hello World\\")) # Should return {\'hello\': 2, \'world\': 1} print(word_frequency(\\"This is a test. This test.\\")) # Should return {\'this\': 2, \'is\': 1, \'a\': 1, \'test\': 2} print(word_frequency(\\"One fish two fish red fish blue fish\\")) # Should return {\'one\': 1, \'fish\': 4, \'two\': 1, \'red\': 1, \'blue\': 1} ``` # Implementation Details: - Convert the input string to lowercase to ensure case insensitivity. - Remove any punctuation from the string. - Split the string into words based on spaces. - Count the frequency of each word and store it in a dictionary.","solution":"import re from collections import defaultdict def word_frequency(input_string): Returns a dictionary with each word as the key and the frequency of that word as the value. Words are considered case-insensitive and punctuation is ignored. # Convert to lower case input_string = input_string.lower() # Remove punctuation input_string = re.sub(r\'[^ws]\', \'\', input_string) # Split the string into words words = input_string.split() # Initialize a default dictionary to count frequencies frequency_dict = defaultdict(int) for word in words: frequency_dict[word] += 1 return dict(frequency_dict)"},{"question":"You are required to write a Python function that evaluates the accuracy of a classification model using the F1 score. The F1 score is a harmonic mean of precision and recall, providing a single metric that balances both aspects of predictive performance. Write a function named `calculate_f1_score` that accomplishes the following: 1. Takes in two parameters: - `y_true`: A list or array-like structure of shape (n_samples,), representing the true target values. - `y_pred`: A list or array-like structure of shape (n_samples,), representing the predicted target values. 2. Uses the `f1_score` function from the `sklearn.metrics` library to compute the F1 score. 3. Returns the F1 score value. Your solution should include: 1. Importing the necessary library. 2. Handling any potential exceptions or edge cases that might arise (e.g. non-binary classification labels). # Example Usage: ```python # Example 1 y_true = [0, 1, 1, 0, 1] y_pred = [0, 1, 0, 0, 1] print(calculate_f1_score(y_true, y_pred)) # Output should be close to 0.8 # Example 2 y_true = [1, 1, 0, 0] y_pred = [0, 1, 1, 0] print(calculate_f1_score(y_true, y_pred)) # Output should be close to 0.5 ``` # Constraints: - Ensure that `y_true` and `y_pred` are binary labels (0 and 1) to avoid computation errors. - Utilize the `f1_score` function from the `sklearn.metrics` library with the default binary argument set to evaluate the F1 score for binary classification.","solution":"from sklearn.metrics import f1_score def calculate_f1_score(y_true, y_pred): Calculates the F1 score for the given true and predicted labels. Parameters: y_true (list or array-like): True target values. y_pred (list or array-like): Predicted target values. Returns: float: F1 score. # Ensuring y_true and y_pred are binary labels unique_true = set(y_true) unique_pred = set(y_pred) if not (unique_true <= {0, 1} and unique_pred <= {0, 1}): raise ValueError(\\"Both y_true and y_pred should only contain binary labels 0 or 1.\\") return f1_score(y_true, y_pred)"},{"question":"You are given a log file containing records of user actions on a website. Each line of the log file contains a comma-separated entry with a timestamp, user_id, and action (either `login` or `logout`). Your task is to analyze this log file to determine user session times. A user session is defined as the time between a `login` and a subsequent `logout`. Write a function named `calculate_user_sessions(file_name)` that performs the following tasks: 1. Reads the log file specified by `file_name` using the `csv.reader` built-in function from the `csv` module. 2. Computes the duration of each user session in seconds. 3. Returns a dictionary where the key is the user_id and the value is a list of session durations for that user. # Function Signature ```python def calculate_user_sessions(file_name: str) -> dict: pass ``` # Input - `file_name`: A string representing the path to the log file. # Output - A dictionary where each key is a user_id, and each value is a list of session durations in seconds for that user. # Example Assuming `file_name` contains data formatted as follows: ``` timestamp,user_id,action 2023-01-01T12:00:00,1,login 2023-01-01T12:30:00,1,logout 2023-01-01T12:15:00,2,login 2023-01-01T12:45:00,2,logout 2023-01-01T13:00:00,1,login 2023-01-01T13:30:00,1,logout ... ``` The function call: ```python calculate_user_sessions(\'path/to/log_file.csv\') ``` might return: ```python { \'1\': [1800, 1800], \'2\': [1800] } ``` # Requirements - Use `csv.reader` from the `csv` module to read the file. - Use `datetime.strptime` from the `datetime` module to handle the timestamps. - Assume that the log file entries are well-formed with each `login` followed by a corresponding `logout`.","solution":"import csv from datetime import datetime def calculate_user_sessions(file_name: str) -> dict: user_sessions = {} with open(file_name, newline=\'\') as csvfile: reader = csv.reader(csvfile) next(reader) # Skip header session_data = {} for row in reader: timestamp_str, user_id, action = row timestamp = datetime.strptime(timestamp_str, \'%Y-%m-%dT%H:%M:%S\') if user_id not in user_sessions: user_sessions[user_id] = [] if action == \'login\': session_data[user_id] = timestamp elif action == \'logout\' and user_id in session_data: login_time = session_data.pop(user_id) session_duration = (timestamp - login_time).total_seconds() user_sessions[user_id].append(session_duration) return user_sessions"},{"question":"You are asked to write a function `path_exists` that checks if there exists a path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) in a given grid. The grid consists of only 0s and 1s where 0 represents an empty cell and 1 represents an obstacle. Movement is allowed only to adjacent cells (right, down, left, up) and you cannot move diagonally. If there is a path from the start to the end, the function should return `True`, otherwise, it should return `False`. The function signature should be: ```python def path_exists(grid: List[List[int]]) -> bool: # your code here ``` # Detailed Specification - `grid` (List[List[int]]): A 2D list of integers representing the grid. The dimensions of `grid` are guaranteed to be at least 1x1. - You must ensure the function handles edge cases, such as grid size of 1x1, completely blocked path, and boundary conditions. # Example ```python grid = [ [0, 1, 0, 0], [0, 1, 0, 1], [0, 0, 0, 1], [1, 1, 0, 0] ] output = path_exists(grid) # Expected Output: True ``` ```python grid = [ [0, 1], [1, 0] ] output = path_exists(grid) # Expected Output: False ``` # Notes - The solution should employ a search algorithm such as Depth-First Search (DFS) or Breadth-First Search (BFS) to determine the path existence. - Be mindful of handling cycles or revisiting cells by marking them visited.","solution":"from typing import List def path_exists(grid: List[List[int]]) -> bool: def dfs(x, y): # If out of bounds or on an obstacle, return False if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 1: return False # If we have reached the bottom-right corner, return True if x == len(grid) - 1 and y == len(grid[0]) - 1: return True # Mark the cell as visited by setting it to 1 grid[x][y] = 1 # Exploring the neighbors (right, down, left, up) if dfs(x + 1, y) or dfs(x, y + 1) or dfs(x - 1, y) or dfs(x, y - 1): return True # Unmark the cell if no path is found (optional if we want to backtrack for other paths) grid[x][y] = 0 # This isn\'t really necessary as we just need to find one valid path return False return dfs(0, 0) if grid[0][0] == 0 else False"},{"question":"You are building a simple text-based adventure game where the player navigates through different rooms. Each room is connected to other rooms in four possible directions: north, south, east, and west. Your task is to implement a function that takes the current position of the player and a command indicating the direction to move, and returns the new position of the player. If the player tries to move in a direction where no room exists, their position should remain unchanged. Your function should be named `move_player` and have the following definition: ```python def move_player(position, command, rooms): Moves the player to a new position based on the given command. Parameters: - position: A tuple (x, y) representing the current position of the player. - command: A string indicating the direction to move (\'north\', \'south\', \'east\', \'west\'). - rooms: A dictionary representing the room layout, where keys are (x, y) tuples and values are room descriptions. Returns: - new_position: A tuple (x, y) representing the new position of the player. pass ``` **Requirements:** 1. Validate the command to ensure it is one of the four possible directions. 2. Check if the neighboring room exists in the specified direction. 3. Update the player\'s position accordingly. 4. If the move is invalid, the player\'s position remains unchanged. **Example:** Suppose `position` is (1, 1), `command` is `\\"north\\"`, and `rooms` is a dictionary representing the layout of the rooms. For example: ```python position = (1, 1) command = \\"north\\" rooms = { (1, 1): \\"Small room with a wooden table and a chair.\\", (1, 2): \\"Spacious room with a large window.\\", (2, 1): \\"Dark room with a flickering light.\\", (1, 0): \\"Empty room with a dusty floor.\\" } new_position = move_player(position, command, rooms) ``` In this example, the function should return the new position `(1, 2)` since moving north from `(1, 1)` to `(1, 2)` is valid. If the command was `\\"west\\"`, the player would remain at `(1, 1)` since there is no room to the west.","solution":"def move_player(position, command, rooms): Moves the player to a new position based on the given command. Parameters: - position: A tuple (x, y) representing the current position of the player. - command: A string indicating the direction to move (\'north\', \'south\', \'east\', \'west\'). - rooms: A dictionary representing the room layout, where keys are (x, y) tuples and values are room descriptions. Returns: - new_position: A tuple (x, y) representing the new position of the player. x, y = position if command == \'north\': new_position = (x, y + 1) elif command == \'south\': new_position = (x, y - 1) elif command == \'east\': new_position = (x + 1, y) elif command == \'west\': new_position = (x - 1, y) else: # Invalid command, return the current position return position # Check if the new position exists in the rooms dictionary if new_position in rooms: return new_position else: return position"},{"question":"You are tasked to write a function that performs polynomial regression on a given dataset and visualizes the result. The function should implement polynomial regression for a degree specified by the user and plot both the dataset and the fitted polynomial curve using `matplotlib.pyplot`. # Requirements: 1. The function should be named `polynomial_regression`. 2. The function should take three parameters: - `x` (list of floats): The input features of the dataset. - `y` (list of floats): The target values of the dataset. - `degree` (int): The degree of the polynomial to fit the dataset. 3. The function should: - Fit a polynomial of the specified degree to the data. - Create an evenly spaced set of data points for plotting the polynomial curve. 4. The function should plot: - The original dataset points as blue circles (\'bo\'). - The fitted polynomial curve as a red line (\'r-\'). 5. The function should ultimately display the plot using `matplotlib.pyplot.show`. # Example Usage: ```python x = [1, 2, 3, 4, 5, 6, 7, 8, 9] y = [2.5, 3.6, 4.3, 6.2, 7.1, 8.9, 9.1, 10.2, 12.3] polynomial_regression(x, y, degree=3) ``` # Implementation Hint: Consider using `numpy.polyfit` to compute the polynomial coefficients and `numpy.polyval` to evaluate the polynomial. # Provided Code Snippet: ```python import numpy as np import matplotlib.pyplot as plt def polynomial_regression(x, y, degree): # Fit the polynomial coeffs = np.polyfit(x, y, degree) polynomial = np.poly1d(coeffs) # Create the x values for plotting the polynomial curve x_plot = np.linspace(min(x), max(x), 100) y_plot = polynomial(x_plot) # Plot the data points plt.plot(x, y, \'bo\', label=\'Data points\') # Plot the polynomial curve plt.plot(x_plot, y_plot, \'r-\', label=f\'Polynomial degree {degree}\') # Add labels and legend plt.xlabel(\'x\') plt.ylabel(\'y\') plt.legend() # Display the plot plt.show() ``` This function will fit a polynomial of the specified degree to the dataset provided and visualize the result along with the original data points.","solution":"import numpy as np import matplotlib.pyplot as plt def polynomial_regression(x, y, degree): Fit a polynomial of the specified degree to the data and plot the original data points as well as the polynomial curve. # Fit the polynomial coeffs = np.polyfit(x, y, degree) polynomial = np.poly1d(coeffs) # Create x values for plotting the polynomial curve x_plot = np.linspace(min(x), max(x), 100) y_plot = polynomial(x_plot) # Plot the data points plt.plot(x, y, \'bo\', label=\'Data points\') # Plot the polynomial curve plt.plot(x_plot, y_plot, \'r-\', label=f\'Polynomial degree {degree}\') # Add labels and legend plt.xlabel(\'x\') plt.ylabel(\'y\') plt.legend() # Display the plot plt.show()"},{"question":"Create a function that takes a list of integers as input. The function should evaluate each integer and classify it into separate categories based on the number of divisors the integer has (excluding 1 and itself). The categories should be: \\"Prime\\", \\"Semi-prime\\", \\"Abundant\\", and \\"Other\\". Prime numbers have exactly two divisors (1 and itself), semi-prime numbers are products of exactly two primes (counting multiplicity if applicable, e.g., 4 = 2 * 2), abundant numbers have the sum of their divisors (excluding themselves) greater than the number, and numbers that do not fit into any of the previous categories fall into the \\"Other\\" category. The function should output: ```python dict: A dictionary where each key is one of the four categories (\\"Prime\\", \\"Semi-prime\\", \\"Abundant\\", \\"Other\\") and each value is a list of integers from the input list that belong to that category. ``` You should write self-contained code starting with: ```python def classify_numbers(numbers): ```","solution":"def classify_numbers(numbers): def is_prime(n): if n < 2: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def is_semi_prime(n): prime_factors = 0 if n < 2: return False for i in range(2, int(n ** 0.5) + 1): while n % i == 0: prime_factors += 1 n //= i if prime_factors > 2: return False if n > 1: prime_factors += 1 return prime_factors == 2 def is_abundant(n): if n < 12: return False sum_divisors = 1 for i in range(2, int(n ** 0.5) + 1): if n % i == 0: if i != n // i: sum_divisors += i + n // i else: sum_divisors += i return sum_divisors > n result = {\\"Prime\\": [], \\"Semi-prime\\": [], \\"Abundant\\": [], \\"Other\\": []} for number in numbers: if is_prime(number): result[\\"Prime\\"].append(number) elif is_semi_prime(number): result[\\"Semi-prime\\"].append(number) elif is_abundant(number): result[\\"Abundant\\"].append(number) else: result[\\"Other\\"].append(number) return result"},{"question":"You are required to write a Python function named `filter_dict_by_length` that accepts a dictionary and an integer as inputs, and returns a new dictionary containing only key-value pairs from the original dictionary where the length of the key is equal to the specified integer. **Function Signature:** ```python def filter_dict_by_length(input_dict: Dict[str, Any], length: int) -> Dict[str, Any]: ``` **Instructions:** 1. Define the function `filter_dict_by_length(input_dict: Dict[str, Any], length: int) -> Dict[str, Any]` that takes in a dictionary (`input_dict`) and an integer (`length`). 2. Iterate through each key-value pair in `input_dict`. 3. For each key, check its length. If the length of the key is equal to the specified integer (`length`), include that key-value pair in the resulting dictionary. 4. Return the resulting dictionary. 5. Make sure to handle cases where no key matches the specified length by returning an empty dictionary. **Example:** ```python input_dict = { \\"apple\\": 1, \\"banana\\": 2, \\"cherry\\": 3, \\"date\\": 4, \\"fig\\": 5, \\"grape\\": 6 } length = 5 filtered_dict = filter_dict_by_length(input_dict, length) # Expected output: {\\"apple\\": 1, \\"grape\\": 6} print(filtered_dict) ``` This exercise aims to help you practice managing and filtering dictionaries in Python, especially focusing on key lengths.","solution":"from typing import Dict, Any def filter_dict_by_length(input_dict: Dict[str, Any], length: int) -> Dict[str, Any]: This function filters a dictionary by the length of its keys. :param input_dict: Dictionary to be filtered :param length: The length that the keys must match :return: New dictionary with filtered key-value pairs return {k: v for k, v in input_dict.items() if len(k) == length}"},{"question":"You are required to create a Python function named `weather_forecast` that fetches weather information for a given city using the OpenWeatherMap API. This function takes the name of a city as input from the user, makes an API request to the OpenWeatherMap API, and returns the current weather conditions. To accomplish this task, use the `requests` library for making HTTP requests and the `json` library for handling JSON responses. The `weather_forecast` function should perform the following: 1. Prompt the user to enter the name of a city. 2. Construct an API request URL using this city name. 3. Make a GET request to the OpenWeatherMap API endpoint. 4. Parse the JSON response to extract the current temperature, weather description, and humidity. 5. Print the extracted weather information. Use the following OpenWeatherMap API endpoint for your query: ``` http://api.openweathermap.org/data/2.5/weather?q=<CITY_NAME>&appid=<API_KEY>&units=metric ``` Replace `<CITY_NAME>` with the user\'s input city name and `<API_KEY>` with your actual OpenWeatherMap API key. Store your API key in a global variable named `API_KEY`. For example, if the user inputs \\"Mumbai\\", the constructed URL should look like: ``` http://api.openweathermap.org/data/2.5/weather?q=Mumbai&appid=YOUR_API_KEY&units=metric ``` Your implementation should use the `requests.get` method to make the API call. The function should print the temperature, weather description, and humidity of the specified city, and then return `None`. The user should be able to exit the loop by entering \'q\' as their city name. Here\'s an example of the expected input and output format: ``` Enter city name: Mumbai Current temperature: 29.0°C Weather description: clear sky Humidity: 58% ```","solution":"import requests API_KEY = \'your_api_key_here\' def weather_forecast(): Fetch and print the weather information of a city using OpenWeatherMap API. while True: city = input(\\"Enter city name: \\") if city.lower() == \'q\': break url = f\\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric\\" response = requests.get(url) if response.status_code == 200: data = response.json() temperature = data[\'main\'][\'temp\'] weather_description = data[\'weather\'][0][\'description\'] humidity = data[\'main\'][\'humidity\'] print(f\\"Current temperature: {temperature}°C\\") print(f\\"Weather description: {weather_description}\\") print(f\\"Humidity: {humidity}%\\") else: print(f\\"Failed to get weather data for {city}. Please check the city name.\\")"},{"question":"You are working on a custom text editor that includes a feature to find and replace specific words. Your task is to create a function named `find_and_replace` that takes three parameters: a string `text`, a string `find_word`, and a string `replace_word`. The function should replace all occurrences of `find_word` in `text` with `replace_word`. The function must meet the following criteria: 1. The search and replacement should be case-sensitive. 2. You must handle situations where the `find_word` is part of another word. 3. The function should be efficient even for large texts. # Function Signature ```python def find_and_replace(text: str, find_word: str, replace_word: str) -> str: ``` **Example:** ```python >>> original_text = \\"The quick brown fox jumps over the lazy dog. The dog was not amused.\\" >>> new_text = find_and_replace(original_text, \\"dog\\", \\"cat\\") >>> print(new_text) ``` - This should output: \\"The quick brown fox jumps over the lazy cat. The cat was not amused.\\" **Constraints:** - The length of `text` will be at most `10^6`. - The lengths of `find_word` and `replace_word` will be at most `100`. **Note:** - Ensure that you handle the replacement correctly even if `find_word` appears multiple times or in various cases within the text.","solution":"def find_and_replace(text: str, find_word: str, replace_word: str) -> str: Replaces all occurrences of \'find_word\' in \'text\' with \'replace_word\'. Parameters: text (str): The input text where replacements are to be made. find_word (str): The word in the text to be replaced. replace_word (str): The word to replace \'find_word\' with. Returns: str: The modified text with all occurrences of \'find_word\' replaced by \'replace_word\'. # Ensure that find_word is not empty to avoid infinite loop if not find_word: raise ValueError(\\"find_word must not be empty\\") return text.replace(find_word, replace_word)"},{"question":"You are tasked with creating a function called `merge_and_sort_users()` that reads and merges user data from two different JSON files and writes the combined, sorted data back to a specified output file. Each JSON file contains a list of user dictionaries, where each user is represented by a dictionary containing `username` and `age` keys. The function will take three arguments: two input file paths and one output file path. The combined list should be sorted by `age` in ascending order. If two users have the same age, their order in the final list should be the same as the relative order in the input files. # Function Signature ```python def merge_and_sort_users(input_file1: str, input_file2: str, output_file: str): pass ``` # Example Assume `input1.json` contains: ```json [ {\\"username\\": \\"userA\\", \\"age\\": 30}, {\\"username\\": \\"userB\\", \\"age\\": 25} ] ``` Assume `input2.json` contains: ```json [ {\\"username\\": \\"userC\\", \\"age\\": 22}, {\\"username\\": \\"userD\\", \\"age\\": 35} ] ``` Calling the function as follows: ```python merge_and_sort_users(\'input1.json\', \'input2.json\', \'output.json\') ``` The `output.json` should be updated to: ```json [ {\\"username\\": \\"userC\\", \\"age\\": 22}, {\\"username\\": \\"userB\\", \\"age\\": 25}, {\\"username\\": \\"userA\\", \\"age\\": 30}, {\\"username\\": \\"userD\\", \\"age\\": 35} ] ``` # Constraints 1. You must handle file reading and writing properly, including managing exceptions such as file not found or JSON decode errors. 2. Ensure that the output JSON preserves the structure shown in the example. 3. The function does not need to return any value. 4. The input files are guaranteed to contain valid JSON with correctly formatted user data. # Note Consider the efficiency of merging and sorting operations, particularly for large input files.","solution":"import json def merge_and_sort_users(input_file1: str, input_file2: str, output_file: str): try: with open(input_file1, \'r\') as file1, open(input_file2, \'r\') as file2: users1 = json.load(file1) users2 = json.load(file2) combined_users = users1 + users2 combined_users.sort(key=lambda user: user[\'age\']) with open(output_file, \'w\') as outfile: json.dump(combined_users, outfile, indent=4) except FileNotFoundError as e: raise Exception(f\\"File not found: {e.filename}\\") except json.JSONDecodeError: raise Exception(\\"Error decoding JSON\\")"},{"question":"In this coding challenge, you are required to implement an algorithm that generates a balanced binary search tree (BST) given a sorted array of distinct integers. A balanced BST is one in which the depth of the two subtrees of every node never differ by more than one. Write a function `sorted_array_to_bst` which takes a sorted list of integers and returns the root node of the balanced BST. The BST nodes should be created using a class `TreeNode` defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` The function definition should be: ```python def sorted_array_to_bst(nums): # YOUR CODE GOES HERE # pass ``` Input: - `nums` (List[int]): A list of integers sorted in non-decreasing order. Output: - Returns the root node of the balanced BST. You can assume that the input list `nums` will have at least one element. The primary challenge is to ensure that the resulting BST is balanced, meaning that its depth is minimized. Example: ```python # Example input nums = [-10, -3, 0, 5, 9] # Expected output: TreeNode representing the following balanced BST # 0 # / # -3 9 # / / # -10 5 ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums): Converts a sorted array to a balanced binary search tree. :param nums: List[int] - A list of sorted integers :return: TreeNode - The root of the balanced BST if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root"},{"question":"Design a question that maintains the given guidelines: In this task, you are asked to process a list of transactions from an e-commerce website. Each transaction contains a product ID, a customer ID, and the quantity purchased. You need to calculate the total quantity sold for each product ID and return a list of tuples sorted by product ID in ascending order. This problem is common when dealing with sales data and inventory management. You are required to implement a function named `calculate_total_quantities()` which performs the following actions: 1. Takes a list of transactions as an input. Each transaction is represented as a tuple of three elements: `(product_id, customer_id, quantity)`. The transactions list may contain multiple entries for the same product ID. 2. Aggregates the total quantity sold for each product ID. 3. Returns a list of tuples where each tuple contains a product ID and the corresponding total quantity sold, sorted by product ID in ascending order. Here is a starting point for your function: ```python from typing import List, Tuple def calculate_total_quantities(transactions: List[Tuple[int, int, int]]) -> List[Tuple[int, int]]: pass ``` **Function Signature:** ```python def calculate_total_quantities(transactions: List[Tuple[int, int, int]]) -> List[Tuple[int, int]]: ``` **Example:** ```python transactions = [ (101, 2001, 3), (102, 2002, 1), (101, 2003, 2), (103, 2004, 5), (102, 2005, 1) ] calculate_total_quantities(transactions) # Output: [(101, 5), (102, 2), (103, 5)] ``` Note: You can assume the input list is not empty and contains valid transaction data.","solution":"from typing import List, Tuple from collections import defaultdict def calculate_total_quantities(transactions: List[Tuple[int, int, int]]) -> List[Tuple[int, int]]: Aggregates total quantity sold for each product ID. Args: transactions (List[Tuple[int, int, int]]): A list of transactions where each transaction is a tuple (product_id, customer_id, quantity). Returns: List[Tuple[int, int]]: A list of tuples containing product ID and the corresponding total quantity sold, sorted by product ID in ascending order. product_quantities = defaultdict(int) for product_id, customer_id, quantity in transactions: product_quantities[product_id] += quantity sorted_product_quantities = sorted(product_quantities.items()) return sorted_product_quantities"},{"question":"You are tasked with building a simple version of a command-line to-do list application in Python. The purpose of this exercise is to practice file handling, list manipulation, and basic command-line interaction. Write a function called `to_do_list()` which will allow users to interact with a to-do list stored in a text file named `todo.txt`. The function should continuously prompt the user to enter one of four commands: \'ADD\', \'VIEW\', \'DELETE\', and \'EXIT\'. The commands should function as follows: 1. **ADD [task]**: Adds the string `[task]` to the end of the list. Save the updated list to `todo.txt`. 2. **VIEW**: Displays all the tasks in the list with a number next to each task indicating its position in the list (starting from 1). 3. **DELETE [n]**: Deletes the task at position `n` (1-based index) from the list. Save the updated list to `todo.txt`. 4. **EXIT**: Ends the program. **Requirements:** 1. Store each task on a new line in the `todo.txt` file. 2. Handle and display appropriate messages for commands with incorrect parameters. 3. Use exception handling to manage any unexpected errors (e.g., deleting a task that doesn\'t exist). **Function Signature:** ```python def to_do_list() -> None: ... ``` **Example Interaction:** ``` Enter command: ADD Buy groceries Task added. Enter command: ADD Walk the dog Task added. Enter command: VIEW 1. Buy groceries 2. Walk the dog Enter command: DELETE 1 Task deleted. Enter command: VIEW 1. Walk the dog Enter command: EXIT Goodbye! ```","solution":"def to_do_list(): import os def display_list(todo_list): if len(todo_list) == 0: print(\\"The to-do list is empty.\\") else: for idx, task in enumerate(todo_list): print(f\\"{idx + 1}. {task.strip()}\\") def save_list(todo_list): with open(\\"todo.txt\\", \\"w\\") as file: file.writelines(todo_list) def load_list(): if os.path.exists(\\"todo.txt\\"): with open(\\"todo.txt\\", \\"r\\") as file: return file.readlines() return [] todo_list = load_list() while True: command = input(\\"Enter command: \\").strip().split(\' \', 1) action = command[0].upper() if action == \'ADD\': if len(command) < 2: print(\\"Invalid ADD command. Please provide a task to add.\\") else: task = command[1] todo_list.append(task + \\"n\\") save_list(todo_list) print(\\"Task added.\\") elif action == \'VIEW\': display_list(todo_list) elif action == \'DELETE\': if len(command) < 2 or not command[1].isdigit(): print(\\"Invalid DELETE command. Please provide a valid task number.\\") else: task_number = int(command[1]) if 1 <= task_number <= len(todo_list): deleted_task = todo_list.pop(task_number - 1) save_list(todo_list) print(\\"Task deleted.\\") else: print(\\"Task number does not exist.\\") elif action == \'EXIT\': print(\\"Goodbye!\\") break else: print(\\"Unknown command.\\")"},{"question":"You are required to process a list of students\' grades and determine their final grade based on a set of criteria. Each student has a unique identifier and a list of scores. The final grade calculation should follow these rules: 1. The final grade is determined by taking the average of the highest three scores. 2. If a student has fewer than three scores, the final grade should be \'N/A\'. 3. If multiple students have the same final grade, they should be listed alphabetically by their identifier. You need to write a function named `calculate_final_grades` that takes a dictionary of students and their scores and returns a list of tuples. Each tuple should contain a student\'s identifier and their final grade, sorted in descending order of grades and then by student identifier. Here is an example of the input and the expected output format: **Input**: ```json { \\"student1\\": [70, 82, 68, 94], \\"student2\\": [85, 91, 80], \\"student3\\": [72, 88], \\"student4\\": [90, 92, 93, 88] } ``` **Output**: ```json [ (\\"student4\\", 91.67), (\\"student2\\", 85.33), (\\"student1\\", 82.00), (\\"student3\\", \\"N/A\\") ] ``` **Function Signature:** ```python def calculate_final_grades(students: dict) -> list: ``` **Input:** - `students`: A dictionary where keys are student identifiers (strings) and values are lists of scores (integers). **Output:** - Returns a list of tuples with the student\'s identifier and their final grade, sorted by the specified criteria. **Example:** ```python students_scores = { \\"student1\\": [72, 89, 95, 87], \\"student2\\": [70, 75], \\"student3\\": [92, 85, 78], \\"student4\\": [60, 50, 70, 80] } final_grades = calculate_final_grades(students_scores) ```","solution":"def calculate_final_grades(students: dict) -> list: final_grades = [] for student, scores in students.items(): if len(scores) < 3: final_grades.append((student, \\"N/A\\")) else: top_three_scores = sorted(scores, reverse=True)[:3] average_score = round(sum(top_three_scores) / 3, 2) final_grades.append((student, average_score)) final_grades.sort(key=lambda x: (-float(x[1]) if x[1] != \\"N/A\\" else float(\'inf\'), x[0])) return final_grades"},{"question":"Design a function that orchestrates a set of tasks using Python\'s asyncio library to achieve concurrency. The function will accept a list of asyncio-compatible coroutines, execute them concurrently, and return a list of their results. If a coroutine raises an exception during its execution, the function should capture the exception and return an error message for that coroutine instead of its result. Ensure the function properly handles and logs any exceptions raised during coroutine execution. The function should output: list: A list of tuples. Each tuple contains: str: The name of the coroutine. str: The result of the coroutine, or an error message if it failed. You should write self-contained code starting with: ``` import asyncio async def run_coroutines(coroutines): ```","solution":"import asyncio async def run_coroutines(coroutines): Takes a list of coroutines, executes them concurrently, and returns a list of their results. Each result is a tuple with the name of the coroutine function and either the result or an error message. Args: coroutines (list): List of asyncio-compatible coroutines. Returns: list: A list of tuples with the coroutine name and its result or an error message. results = [] async def run_and_catch(coroutine): try: result = await coroutine return coroutine.__name__, result except Exception as e: return coroutine.__name__, f\\"Error: {str(e)}\\" tasks = [run_and_catch(coroutine) for coroutine in coroutines] results = await asyncio.gather(*tasks) return results"},{"question":"In a text analysis application, it is often necessary to preprocess a large body of text by removing stop words (commonly used words such as \'the\', \'and\', \'is\', etc.) to focus on the more meaningful words. Construct a function named `remove_stop_words` that filters out stop words from a given text. The function should use a predefined set of stop words. **Function Signature** ```python def remove_stop_words(text: str, stop_words: set) -> str: ``` **Parameters** - `text` (str): A string representing the input text. - `stop_words` (set): A set of strings where each string is a stop word. **Returns** - A string with all stop words removed, retaining the original order of the remaining words. **Constraints** - The text will only contain alphabetic characters and spaces. - Words are case-insensitive, meaning \'The\' and \'the\' should be treated as the same stop word. - The function should be optimized for performance considering large inputs. **Example** ```python text = \\"The quick brown fox jumps over the lazy dog\\" stop_words = {\\"the\\", \\"over\\"} # Running the function result = remove_stop_words(text, stop_words) print(result) # Output: \\"quick brown fox jumps lazy dog\\" ```","solution":"def remove_stop_words(text: str, stop_words: set) -> str: Removes stop words from the given text. Args: text (str): The input text. stop_words (set): A set of stop words to be removed from the text. Returns: str: The text with all stop words removed. words = text.split() filtered_words = [word for word in words if word.lower() not in stop_words] return \' \'.join(filtered_words)"},{"question":"You are tasked with implementing a function to compute the moving average of a time series data set. The moving average is a commonly used indicator in time series analysis to smooth out short-term fluctuations and highlight longer-term trends or cycles. You are given: - `data`: An array of time series data points. - `window_size`: An integer representing the size of the moving window specified by the number of data points. Complete the function `compute_moving_average` following the below steps: 1. Validate that the `window_size` is greater than 0 and less than or equal to the length of `data`. 2. Calculate the moving average for each data point where there are enough preceding points within the specified window size. 3. Return an array of the same length as `data` where the first `(window_size - 1)` elements are NaN (since there is not enough data to compute the moving average) and the remaining elements are the computed moving averages. **Function Signature:** ```python def compute_moving_average(data, window_size): pass ``` Use the following specific `numpy` functions: - `numpy.mean` - `numpy.full` - `numpy.array` **Example:** ```python import numpy as np data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) window_size = 3 result = compute_moving_average(data, window_size) print(result) # Should output: [nan nan 2. 3. 4. 5. 6. 7. 8. 9.] ``` This function should return an array where each value (after the initial NaNs) represents the average of the preceding `window_size` values in the input data.","solution":"import numpy as np def compute_moving_average(data, window_size): Computes the moving average of a time series data set with a specified window size. Returns an array where the first (window_size - 1) elements are NaN (not enough data to compute the moving average) and the remaining elements are the computed moving averages. if window_size <= 0 or window_size > len(data): raise ValueError(\\"window_size must be greater than 0 and less than or equal to the length of data.\\") moving_average = np.full(len(data), np.nan) for i in range(window_size - 1, len(data)): moving_average[i] = np.mean(data[i - window_size + 1:i + 1]) return moving_average"},{"question":"You are given a list of tuples representing sensor data collected over a period of time. Each tuple contains a timestamp and a corresponding sensor measurement. Your task is to create a function called `process_sensor_data` which will filter out erroneous data, calculate the moving average of the measurements over a given window size, and plot the original and smoothed data using `matplotlib`. The function `process_sensor_data` should accept three arguments: - `sensor_data` (list of tuples): A list where each tuple consists of two elements: a timestamp (string) and a measurement (float). - `window_size` (int): The size of the window for calculating the moving average. - `ax` (`matplotlib.axes.Axes`): The axes object where the plot will be drawn. The function should perform the following steps: 1. Filter out the tuples where the measurement is not a valid float. 2. Sort the data based on the timestamp. 3. Calculate the moving average of the sensor measurements with the given window size. 4. Plot both the original and the smoothed data onto the provided `ax` axes object. 5. Format the plot with appropriate labels and legend. # Here\'s a detailed procedure for the function: 1. Use list comprehension to filter out tuples with erroneous (non-float) measurements. 2. Sort the filtered data list based on the timestamps. 3. Extract timestamps and measurements into separate lists. 4. Compute the moving average of the measurement list using the provided window size. 5. Plot the original measurements against the timestamps. 6. Plot the calculated moving average on the same graph. 7. Add labels for the x-axis (`Time`), y-axis (`Measurement`), and a legend indicating original and smoothed data. Below is the function signature: ```python def process_sensor_data(sensor_data, window_size, ax): # your code here ```","solution":"import matplotlib.pyplot as plt import numpy as np def process_sensor_data(sensor_data, window_size, ax): Processes the sensor data to filter, sort, and calculate the moving average before plotting. Parameters: - sensor_data (list of tuples): A list of tuples where each tuple consists of two elements: a timestamp (string) and a measurement (float). - window_size (int): The size of the window for calculating the moving average. - ax (matplotlib.axes.Axes): The axes object where the plot will be drawn. # Filter out tuples with non-float measurements filtered_data = [(timestamp, float(measurement)) for timestamp, measurement in sensor_data if isinstance(measurement, (int, float))] # Sort filtered data by timestamp filtered_data.sort(key=lambda x: x[0]) # Extract timestamps and measurements timestamps = [timestamp for timestamp, measurement in filtered_data] measurements = [measurement for timestamp, measurement in filtered_data] # Calculate moving average moving_avg = np.convolve(measurements, np.ones(window_size)/window_size, mode=\'valid\') # Adjust timestamps for the moving average avg_timestamps = timestamps[window_size - 1:] # Plot original data ax.plot(timestamps, measurements, label=\'Original Data\') # Plot moving average data ax.plot(avg_timestamps, moving_avg, label=\'Moving Average\', linestyle=\'--\') # Formatting the plot ax.set_xlabel(\'Time\') ax.set_ylabel(\'Measurement\') ax.legend() ax.set_title(\'Sensor Data and Moving Average\') # Show plot plt.draw()"},{"question":"In this problem, you will write a function `flatten_dict` that takes a dictionary with nested dictionaries and flattens it. The keys of the resulting dictionary should be the full path to the original values, with path components separated by dots (\'.\'). # Function Signature ```python def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: ``` # Input - `d` (dict): A dictionary potentially containing nested dictionaries. - `parent_key` (str): A key to prepend to the current key. Default is an empty string. - `sep` (str): A separator to use between keys. Default is a dot (\'.\'). # Output - (dict): A single-level dictionary where nested dictionary keys have been flattened. # Requirements Your function should: 1. Recursively traverse the input dictionary `d`. 2. Concatenate nested keys using the provided `sep`. 3. Return a single-level dictionary with the flattened key paths. # Example ```python input_dict = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3, \'f\': 4 } }, \'g\': 5 } flattened = flatten_dict(input_dict) expected_output = { \'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'b.d.f\': 4, \'g\': 5 } assert flattened == expected_output # This should return True ``` # Constraints - Keys are strings and dictionary values can be integers, strings, or other dictionaries. - Ensure the function correctly handles deeply nested dictionaries. - Return an empty dictionary if the input dictionary `d` is empty. Good luck!","solution":"def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: Flattens a nested dictionary. Args: d (dict): The dictionary to flatten. parent_key (str): The base key to prepend. Default is \'\'. sep (str): The separator for the keys. Using dot (\'.\') by default. Returns: dict: A flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"In this problem, you are requested to write a function named `word_chain`, which takes a list of strings `words` and checks if the words can form a chain. In a valid word chain, each word and the next word in the sequence must differ by exactly one character, through either insertion, deletion, or substitution. # Steps: 1. **Input Validation** - Ensure the input `words` is a non-empty list of strings. 2. **Chain Validation** - Check if each consecutive pair of words in the provided list satisfies the following conditions: - Two words differ by exactly one insertion/deletion of a single character. - Two words differ by exactly one substitution of a single character. # Function Signature: ```python def word_chain(words: List[str]) -> bool: ... ``` # Detailed Rules: - Two words `w1` and `w2` are considered different by one insertion/deletion if you can add/remove exactly one character in/from `w1` to get `w2`, or vice versa. - Two words `w1` and `w2` are considered different by one substitution if you can change exactly one character in `w1` to get `w2`. # Example Usage: ```python print(word_chain([\\"abc\\", \\"ab\\", \\"ac\\", \\"acc\\"])) # Output: True print(word_chain([\\"cat\\", \\"bat\\", \\"bath\\"])) # Output: False print(word_chain([\\"a\\", \\"ab\\", \\"abc\\", \\"ab\\"])) # Output: True ``` # Example Evaluations: - `[\\"abc\\", \\"ab\\", \\"ac\\", \\"acc\\"]` is valid: - \\"abc\\" -> \\"ab\\" (remove \'c\'). - \\"ab\\" -> \\"ac\\" (substitute \'b\' with \'c\'). - \\"ac\\" -> \\"acc\\" (add \'c\'). - `[\\"cat\\", \\"bat\\", \\"bath\\"]` is not valid: - \\"cat\\" -> \\"bat\\" (substitute \'c\' with \'b\'). - \\"bat\\" -> \\"bath\\" (add \'h\'). - But \\"bath\\" does not differ from \\"cat\\" by one character, so the chain is broken. - `[\\"a\\", \\"ab\\", \\"abc\\", \\"ab\\"]` is valid: - \\"a\\" -> \\"ab\\" (add \'b\'). - \\"ab\\" -> \\"abc\\" (add \'c\'). - \\"abc\\" -> \\"ab\\" (remove \'c\'). Ensure your solution adheres to the above steps and correctly validates whether the given list of words form a valid chain by following the mentioned rules.","solution":"from typing import List def word_chain(words: List[str]) -> bool: def is_one_edit_away(w1: str, w2: str) -> bool: len1, len2 = len(w1), len(w2) if abs(len1 - len2) > 1: return False if len1 == len2: # Check for one substitution diff_count = sum(1 for i in range(len1) if w1[i] != w2[i]) return diff_count == 1 if len1 > len2: # Check for one deletion w1, w2 = w2, w1 # Now len(w1) < len(w2), check for one insertion in w1 i, j, diff_count = 0, 0, 0 while i < len(w1) and j < len(w2): if w1[i] != w2[j]: if diff_count == 1: return False diff_count += 1 j += 1 else: i += 1 j += 1 return True if not words or not all(isinstance(word, str) for word in words): return False for i in range(len(words) - 1): if not is_one_edit_away(words[i], words[i + 1]): return False return True"},{"question":"You are required to write a function `meal_plan_scheduler` that organizes meal plans for a given week in a specified month and year. Use a dictionary to store meal types and their respective scheduled counts, and another dictionary to store the number of days in each month. Additionally, use a list to represent days of the week. The function `meal_plan_scheduler` will perform the following tasks: 1. **Check if the given meal choice is valid**: If the chosen meal is not in the `MealTypes` dictionary, print an error message and return. 2. **Check if the given month choice is valid**: The valid months are from 1 to 12. If the chosen month is not in the `MonthDays` dictionary, print an error message and return. 3. **Check if the given week number is valid**: The week number should be between 1 and 4 (inclusive). If it is invalid, print an error message and return. 4. **Generate a meal plan** for the specified week by randomly selecting meals for each day using the `random` module, ensuring the same meal is not repeated consecutively. 5. **Print** the meal plan of the week, including each day and its assigned meal. # Datasets: - `MealTypes = {\\"Pasta\\": 4, \\"Salad\\": 3, \\"Sandwich\\": 2, \\"StirFry\\": 3, \\"Soup\\": 4}` - `MonthDays = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}` - `WeekDays = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"]` # Function Signature: ```python def meal_plan_scheduler(MealChoice: str, MonthChoice: int, WeekNum: int, Year: int) -> None: ``` # Input: - `MealChoice` (string): The type of meal to schedule, e.g., \\"Pasta\\". - `MonthChoice` (integer): The month for which to create the meal plan, e.g., 7 for July. - `WeekNum` (integer): The week number for which to create the meal plan, e.g., 2 for the second week. - `Year` (integer): The year for which to consider the month and week, e.g., 2023. # Expected Output: - Print an error message if any selection is invalid. - Print the meal plan for the specified week, each day paired with an assigned meal. # Example: ```python meal_plan_scheduler(\\"Pasta\\", 3, 2, 2023) ``` Expected Output: ``` The following is the meal plan for week 2 of month 3: Monday: Pasta Tuesday: Salad Wednesday: Sandwich Thursday: StirFry Friday: Soup Saturday: Pasta Sunday: Salad ```","solution":"import random MealTypes = {\\"Pasta\\": 4, \\"Salad\\": 3, \\"Sandwich\\": 2, \\"StirFry\\": 3, \\"Soup\\": 4} MonthDays = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31} WeekDays = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] def meal_plan_scheduler(MealChoice: str, MonthChoice: int, WeekNum: int, Year: int) -> None: # 1. Check if the given meal choice is valid if MealChoice not in MealTypes: print(f\\"Error: {MealChoice} is not a valid meal type.\\") return # 2. Check if the given month choice is valid if MonthChoice not in MonthDays: print(f\\"Error: {MonthChoice} is not a valid month choice.\\") return # 3. Check if the given week number is valid if WeekNum < 1 or WeekNum > 4: print(f\\"Error: Week number {WeekNum} is not valid. It should be between 1 and 4.\\") return # 4. Generate a meal plan for the specified week by randomly selecting meals # for each day ensuring no consecutive repeated meals meals = list(MealTypes.keys()) week_plan = [] for i in range(7): # one week has 7 days if i == 0: choice = MealChoice else: choice = random.choice([meal for meal in meals if meal != week_plan[-1]]) week_plan.append(choice) # 5. Print the meal plan for the week print(f\\"The following is the meal plan for week {WeekNum} of month {MonthChoice}:\\") for i, day in enumerate(WeekDays): print(f\\"{day}: {week_plan[i]}\\") # Example call to the function meal_plan_scheduler(\\"Pasta\\", 3, 2, 2023)"},{"question":"You are presented with the challenge of implementing a text editor that keeps track of changes made to a string. The editor needs to support operations like insertion and deletion, while also allowing for undo and redo functionality. This is similar to what you would find in a typical text editor. # Task: Implement a class `TextEditor` which simulates the text-editing environment. The class should support the following methods: - `insert(position: int, character: str) -> None`: Inserts the given character at the specified position in the current text. - `delete(position: int) -> None`: Deletes the character at the specified position in the current text. - `get_text() -> str`: Returns the current text. - `undo() -> None`: Reverts the last editing operation (either insertion or deletion). - `redo() -> None`: Reapplies the last undone editing operation. Example usage: ```python editor = TextEditor() editor.insert(0, \'a\') # Text is now \'a\' editor.insert(1, \'b\') # Text is now \'ab\' editor.insert(1, \'c\') # Text is now \'acb\' editor.delete(1) # Text is now \'ab\' print(editor.get_text()) # Outputs \'ab\' editor.undo() # Text is now \'acb\' print(editor.get_text()) # Outputs \'acb\' editor.redo() # Text is now \'ab\' print(editor.get_text()) # Outputs \'ab\' ``` Notes: 1. Assume that the initial text is an empty string. 2. The `insert` function will not insert at a position beyond the current length of the text. 3. The `delete` function assumes the position to be valid (i.e., within the bounds of the current text). 4. Multiple consecutive undos or redos should correctly handle the undo/redo stack.","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.history = [] # Stack to keep history of operations for undo self.future = [] # Stack to keep operations for redo def insert(self, position: int, character: str) -> None: if 0 <= position <= len(self.text): self.history.append((self.text, None)) # Store current state before change self.text = self.text[:position] + character + self.text[position:] self.future.clear() # Clear future stack after insert operation def delete(self, position: int) -> None: if 0 <= position < len(self.text): self.history.append((self.text, None)) # Store current state before change self.text = self.text[:position] + self.text[position+1:] self.future.clear() # Clear future stack after delete operation def get_text(self) -> str: return self.text def undo(self) -> None: if self.history: current_state = self.text self.text, _ = self.history.pop() # Revert to the last state # Store the current state to future stack for redo operation self.future.append((current_state, None)) def redo(self) -> None: if self.future: self.history.append((self.text, None)) # Store current state before change self.text, _ = self.future.pop() # Reapply last undone state"},{"question":"In this problem, you are tasked with implementing a function to decode a given string that is encoded in a form of run-length encoding (RLE). In RLE, runs of data are stored as a single data value and count. Your goal is to expand the encoded string back to its original form by replicating each character the specified number of times. You need to write a function named `decode_rle` that takes a string input and returns the decoded string. The input string will always be valid and follow the format of one or more characters followed by their corresponding counts. Here is the prototype of the function: ```python def decode_rle(encoded_str): Decode a run-length encoded string into its full form. :param encoded_str: The RLE-encoded string. :type encoded_str: str :return: The decoded string. :rtype: str ``` **Constraints and Notes:** - The characters in the input string consist of digits and letters (both uppercase and lowercase). - The count is always a non-negative integer and corresponds to the preceding character. - If a character has a count of zero, it should not appear in the decoded string. **Example:** ```python print(decode_rle(\\"a3b2c1\\")) # Output: \\"aaabbc\\" print(decode_rle(\\"d4e0f1\\")) # Output: \\"ddddf\\" ``` Your function should handle various encoded string lengths and patterns while maintaining efficiency and clarity in its implementation.","solution":"def decode_rle(encoded_str): Decode a run-length encoded string into its full form. :param encoded_str: The RLE-encoded string. :type encoded_str: str :return: The decoded string. :rtype: str decoded_str = \'\' i = 0 n = len(encoded_str) while i < n: char = encoded_str[i] i += 1 count = \'\' while i < n and encoded_str[i].isdigit(): count += encoded_str[i] i += 1 decoded_str += char * int(count) return decoded_str"},{"question":"You are required to write a function `median_absolute_deviation(array)` that calculates the Median Absolute Deviation (MAD) of the values in a given array. MAD is a robust measure of the variability of a univariate sample of quantitative data. The Median Absolute Deviation is the median of the absolute deviations from the median of the data. To achieve this, you must utilize the NumPy library, specifically the `numpy.median` and `numpy.abs` functions, as described in the following documentation: - **`numpy.median`**: This function calculates the median of the input array along the specified axis. Documentation link: [numpy.median Documentation](https://numpy.org/doc/stable/reference/generated/numpy.median.html) - **`numpy.abs`**: This function calculates the absolute value element-wise. Documentation link: [numpy.abs Documentation](https://numpy.org/doc/stable/reference/generated/numpy.absolute.html) # Function Signature ```python def median_absolute_deviation(array): pass ``` # Input - `array`: A NumPy array of numerical values for which the MAD is to be calculated. # Output - Returns a single numerical value, which is the MAD of the input array. # Example ```python import numpy as np arr = np.array([1, 1, 2, 2, 4, 6, 9]) print(median_absolute_deviation(arr)) # Expected output: 1.0 ``` # Constraints 1. The input array will not be empty. 2. The elements of the input array will be real numbers, either integers or floats.","solution":"import numpy as np def median_absolute_deviation(array): Calculates the Median Absolute Deviation (MAD) of the values in a given array. Parameters: array (numpy array): A NumPy array of numerical values for which the MAD is to be calculated. Returns: float: A single numerical value which is the MAD of the input array. median_value = np.median(array) deviations = np.abs(array - median_value) mad = np.median(deviations) return mad"},{"question":"You are tasked with writing a function named `find_missing_number` which identifies the missing number in an arithmetic sequence of integer numbers. An arithmetic sequence has the property that the difference between any two consecutive terms is constant. Your function should utilize Python\'s built-in functions and only standard libraries. # Details: 1. The function should have one parameter `sequence`, which is a list of integers representing an incomplete arithmetic sequence with exactly one term missing. 2. Identify the missing term and print a message indicating its value. 3. If the sequence is already complete, print a message saying so. # Function Signature ```python def find_missing_number(sequence): # Your code here ``` # Example ```python find_missing_number([3, 7, 11, 15, 23]) # Expected Output: # \\"The missing number is 19.\\" find_missing_number([1, 3, 5, 7]) # Expected Output: # \\"The sequence is already complete.\\" ``` # Additional Notes: - Assume that the sequence will have a length of at least 2 and the missing term will be unique within the list. - Utilize Python\'s built-in capabilities to simplify the calculation. - You may print additional messages for user convenience, but the primary output should convey the missing number or status of the sequence.","solution":"def find_missing_number(sequence): Identifies the missing number in an incomplete arithmetic sequence. n = len(sequence) if n < 2: print(\\"The sequence is too short to determine the missing number.\\") return # Calculate the common difference by taking the difference between # the first two elements and the last two elements and taking the gcd. diffs = [sequence[i] - sequence[i - 1] for i in range(1, n)] d = min(diffs, key=abs) # Getting the most likely common difference # Iterate through the sequence to find the missing number for i in range(1, n): expected = sequence[i - 1] + d if sequence[i] != expected: print(f\\"The missing number is {expected}.\\") return # If we found no missing number print(\\"The sequence is already complete.\\")"},{"question":"In software development, it is common to manage application logs that contain timestamps, log levels, and log messages. These logs are used for debugging, monitoring, and auditing purposes. For this exercise, you need to analyze a list of log entries and extract statistics about the occurrences of different log levels over specific time periods. Your task is to write a function named `log_statistics` that takes a list of log entries as input. Each log entry is a string in the format: ``` \\"[YYYY-MM-DD HH:MM:SS] [LOG_LEVEL] Log message\\" ``` The function should produce a summary of the log entries by counting the occurrences of each log level for each date. The output should be a dictionary where the keys are dates (in \\"YYYY-MM-DD\\" format) and the values are dictionaries mapping each log level to its count for that date. **Function Signature:** ```python def log_statistics(logs: list) -> dict: pass ``` **Example:** ```python logs = [ \\"[2023-10-01 12:00:00] [INFO] Initialization successful\\", \\"[2023-10-01 12:05:00] [ERROR] Failed to load configuration file\\", \\"[2023-10-02 09:00:00] [INFO] Service started\\", \\"[2023-10-02 09:05:00] [DEBUG] Starting backup process\\", \\"[2023-10-02 09:30:00] [INFO] Backup completed successfully\\" ] output = log_statistics(logs) Expected output: { \'2023-10-01\': { \'INFO\': 1, \'ERROR\': 1 }, \'2023-10-02\': { \'INFO\': 2, \'DEBUG\': 1 } } ``` **Requirements:** - The input list `logs` is guaranteed to contain log entries in the specified format. - Each log level is represented as a single word enclosed in square brackets, such as `[INFO]`, `[ERROR]`, `[DEBUG]`, etc. - You may assume the date and time component of each log entry is always valid and formatted correctly. **Notes:** - Consider using regular expressions to extract dates and log levels from each log entry. - Ensure to handle and aggregate log entries efficiently to produce the desired statistics.","solution":"import re from collections import defaultdict def log_statistics(logs): log_pattern = r\\"[(d{4}-d{2}-d{2}) d{2}:d{2}:d{2}] [(.*?)]\\" statistics = defaultdict(lambda: defaultdict(int)) for log in logs: match = re.match(log_pattern, log) if match: date, log_level = match.groups() statistics[date][log_level] += 1 return dict(statistics)"},{"question":"You are tasked with writing a Python function named `find_widest_mountain(arr)` that takes a list of integers representing a series of elevations and returns the width of the widest mountain in the list. A mountain is defined as a sequence of consecutive integers that strictly increases and then strictly decreases. Both the increasing and decreasing sequences must be at least one element long. Detailed requirements: 1. The function should take one parameter: `arr`, which is a list of integers. 2. A mountain is defined by: - There exists some index `i` such that `arr[k] < arr[k+1]` for all `k` in `[0, i-1]` (increasing sequence). - There exists some index `j` such that `arr[k] > arr[k+1]` for all `k` in `[i, j-1]` (decreasing sequence). 3. The function should traverse the list to identify all valid mountains and compute their widths, defined as the number of elements in the mountain. 4. Return the width of the widest mountain found. If no such mountain exists, return 0. 5. Aim to achieve an O(n) time complexity. Example: ```python arr = [2, 1, 4, 7, 3, 2, 5] output = find_widest_mountain(arr) print(output) # Output should be 5 as the widest mountain is [1, 4, 7, 3, 2] ``` This exercise will help you practice your ability to identify patterns and sequences within a list and emphasize the importance of efficient traversal and computation in list processing tasks.","solution":"def find_widest_mountain(arr): Returns the width of the widest mountain in the given list of integers. A mountain is defined as a sequence that strictly increases and then strictly decreases. n = len(arr) if n < 3: return 0 max_width = 0 i = 1 while i < n - 1: # Check if current element is a peak if arr[i-1] < arr[i] > arr[i+1]: # Found a peak, now expand to the left and right to find the width of the mountain left = i - 1 while left > 0 and arr[left-1] < arr[left]: left -= 1 right = i + 1 while right < n-1 and arr[right] > arr[right+1]: right += 1 max_width = max(max_width, right - left + 1) i = right # move to the next possible starting point else: i += 1 return max_width"},{"question":"You are tasked with implementing a function `schedule_tasks` that takes a list of tasks where each task is a dictionary containing the task\'s `name`, `duration`, and `dependencies`. The function should return a list of task names in the order in which they should be executed to satisfy all dependencies. Each task in the input list contains the following fields: - `name`: A string representing the task name. - `duration`: An integer representing the time required to complete the task, in hours. - `dependencies`: A list of task names that must be completed before this task can start. Your function should perform a topological sort on the tasks to determine the correct order of execution. If there are cyclic dependencies that make it impossible to schedule tasks, raise a `ValueError`. # Example You are given the following list of tasks: ```python tasks = [ {\\"name\\": \\"task1\\", \\"duration\\": 3, \\"dependencies\\": []}, {\\"name\\": \\"task2\\", \\"duration\\": 2, \\"dependencies\\": [\\"task1\\"]}, {\\"name\\": \\"task3\\", \\"duration\\": 1, \\"dependencies\\": [\\"task1\\"]}, {\\"name\\": \\"task4\\", \\"duration\\": 4, \\"dependencies\\": [\\"task2\\", \\"task3\\"]} ] ``` Calling `schedule_tasks(tasks)` should return: ```python [\\"task1\\", \\"task2\\", \\"task3\\", \\"task4\\"] ``` # Requirements 1. Implement the function `schedule_tasks` which: - Takes a list of tasks where each task is a dictionary with `name`, `duration`, and `dependencies`. 2. Return the list of task names in the scheduled order. 3. Raise a `ValueError` if there is a cyclic dependency. # Function Signature ```python def schedule_tasks(tasks: list) -> list: ```","solution":"def schedule_tasks(tasks): from collections import defaultdict, deque # Create a mapping from task name to task details task_map = {task[\'name\']: task for task in tasks} # Create adjacency list and in-degree count for topological sort adjacency_list = defaultdict(list) in_degree = defaultdict(int) for task in tasks: for dependency in task[\'dependencies\']: adjacency_list[dependency].append(task[\'name\']) in_degree[task[\'name\']] += 1 # Initialize queue with all tasks having no dependencies (in-degree 0) queue = deque([task[\'name\'] for task in tasks if in_degree[task[\'name\']] == 0]) # List to hold the topological order of tasks topological_order = [] while queue: current_task = queue.popleft() topological_order.append(current_task) for dependent_task in adjacency_list[current_task]: in_degree[dependent_task] -= 1 if in_degree[dependent_task] == 0: queue.append(dependent_task) # Check if all tasks are included in the topological order (i.e., no cycle) if len(topological_order) != len(tasks): raise ValueError(\\"Cyclic dependency detected\\") return topological_order"},{"question":"You have been provided with a dataset containing user interactions on an e-commerce platform. Each record includes a user ID, product ID, interaction type (view, add to cart, purchase), and a timestamp. Your task is to create a function, `calculate_conversion_rate`, which takes a list of dictionaries representing the dataset and returns the conversion rate (views that resulted in purchases) for each product as a dictionary. The following steps describe the required implementation: 1. **Parsing Input Data**: Iterate through the dataset to count each type of interaction for every product. 2. **Calculating Conversion Rate**: For each product, calculate the conversion rate as the ratio of purchases to views. 3. **Returning Results**: Return a dictionary where the keys are product IDs and the values are the corresponding conversion rates. # Function Signature ```python def calculate_conversion_rate(data: List[Dict[str, Union[str, int]]]) -> Dict[str, float]: ``` # Requirements - Parse the list of dictionaries to gather necessary interaction counts. - Ensure the conversion rate is calculated accurately as (purchases / views). - Handle cases where there are no views to avoid division by zero. # Input - `data` (List[Dict[str, Union[str, int]]]): A list of dictionaries where each dictionary contains: - `user_id` (str): The ID of the user. - `product_id` (str): The ID of the product. - `interaction_type` (str): The type of interaction (‘view’, ‘add_to_cart’, ‘purchase’). - `timestamp` (int): The UNIX timestamp of the interaction. # Output - `Dict[str, float]`: A dictionary where keys are `product_id`s and values are the conversion rates as floats. # Example Given the input: ```python data = [ {\\"user_id\\": \\"user1\\", \\"product_id\\": \\"p1\\", \\"interaction_type\\": \\"view\\", \\"timestamp\\": 1609459200}, {\\"user_id\\": \\"user2\\", \\"product_id\\": \\"p1\\", \\"interaction_type\\": \\"add_to_cart\\", \\"timestamp\\": 1609459260}, {\\"user_id\\": \\"user1\\", \\"product_id\\": \\"p1\\", \\"interaction_type\\": \\"purchase\\", \\"timestamp\\": 1609459320}, {\\"user_id\\": \\"user3\\", \\"product_id\\": \\"p2\\", \\"interaction_type\\": \\"view\\", \\"timestamp\\": 1609459380}, {\\"user_id\\": \\"user4\\", \\"product_id\\": \\"p2\\", \\"interaction_type\\": \\"view\\", \\"timestamp\\": 1609459440}, {\\"user_id\\": \\"user3\\", \\"product_id\\": \\"p2\\", \\"interaction_type\\": \\"purchase\\", \\"timestamp\\": 1609459500}, ] ``` The expected output would be: ```python { \\"p1\\": 0.5, \\"p2\\": 0.5 } ``` Make sure to correctly count interactions and calculate conversion rates for each product, handling edge cases appropriately.","solution":"from typing import List, Dict, Union def calculate_conversion_rate(data: List[Dict[str, Union[str, int]]]) -> Dict[str, float]: interaction_counts = {} for record in data: product_id = record[\'product_id\'] interaction_type = record[\'interaction_type\'] if product_id not in interaction_counts: interaction_counts[product_id] = {\'view\': 0, \'purchase\': 0} if interaction_type == \'view\': interaction_counts[product_id][\'view\'] += 1 elif interaction_type == \'purchase\': interaction_counts[product_id][\'purchase\'] += 1 conversion_rates = {} for product_id, counts in interaction_counts.items(): views = counts[\'view\'] purchases = counts[\'purchase\'] if views > 0: conversion_rate = purchases / views else: conversion_rate = 0.0 conversion_rates[product_id] = conversion_rate return conversion_rates"},{"question":"You are tasked with creating a function named `calculate_max_even_sum` that takes a list of integers and returns the maximum possible sum of any three even numbers from the list. If there are fewer than three even numbers, the function should return 0. The function should not modify the original list. Use Python\'s built-in functions and list comprehensions where applicable. Function signature: ```python def calculate_max_even_sum(nums: list[int]) -> int: pass ``` Examples: ```python calculate_max_even_sum([1, 2, 3, 4, 5, 6, 7, 8]) # should return 18 because 6, 8, and 4 are the largest even numbers. calculate_max_even_sum([1, 3, 5, 7, 9]) # should return 0 because there are no even numbers. calculate_max_even_sum([2, 4, 6, 8, 10]) # should return 24 because 6, 8, and 10 are the largest even numbers. calculate_max_even_sum([2]) # should return 0 because there is only one even number. ```","solution":"def calculate_max_even_sum(nums: list[int]) -> int: Returns the maximum possible sum of any three even numbers from the list. If there are fewer than three even numbers, returns 0. even_numbers = [num for num in nums if num % 2 == 0] if len(even_numbers) < 3: return 0 even_numbers.sort(reverse=True) return sum(even_numbers[:3])"},{"question":"You are tasked with writing a Python function that processes a list of integers by identifying its unique elements, finding the maximum and minimum elements, and determining the range (difference between maximum and minimum elements). This will be a practice exercise to understand list operations, set operations, and basic arithmetic in Python. **Function to Implement** Your function should be named `list_analysis`. It should take a single parameter: - `numbers`: a list of integers. Your function should perform the following tasks: 1. Identify the unique elements in the list. 2. Find the maximum and minimum elements in the list. 3. Calculate the range, which is defined as the difference between the maximum and minimum elements. **Requirements:** - Return a tuple containing: - A set containing the unique elements from the input list. - The maximum element in the list. - The minimum element in the list. - The range of the list. **Example:** ```python def list_analysis(numbers): # Your implementation goes here pass # Example usage result = list_analysis([4, 7, 2, 7, 4, 5, 2, 9]) print(result) ``` Expected output for `list_analysis([4, 7, 2, 7, 4, 5, 2, 9])`: ```python ({2, 4, 5, 7, 9}, 9, 2, 7) ``` **Additional Notes:** - Ensure your function handles edge cases, such as an empty list, appropriately by deciding how to address the scenario. - You may assume that the list will contain at least one integer for normal operations.","solution":"def list_analysis(numbers): Analyzes the input list of numbers to find unique elements, max, min, and range. Args: numbers (list of int): The list of integers to be analyzed. Returns: tuple: A tuple containing: - A set with unique elements from the input list. - The maximum element in the list. - The minimum element in the list. - The range of the list (max - min). if not numbers: return (set(), None, None, None) unique_elements = set(numbers) max_element = max(numbers) min_element = min(numbers) range_value = max_element - min_element return (unique_elements, max_element, min_element, range_value)"},{"question":"You need to implement the Depth-First Search (DFS) algorithm to explore a state tree, aiming to find a path from a starting node to a goal node. Each state is represented as a `board`, and each node can have multiple children. Specifically, you should implement the function `dfs_search(init_node, goal_board, get_children, make_board_string, export_output, start_time)` using a stack data structure to manage the DFS procedure. **Function Details:** - **Function Name:** `dfs_search` - **Parameters:** - `init_node`: The initial node from which the search begins. - `goal_board`: The board state representing the goal. - `get_children`: A function that takes a node and returns a list of its children. - `make_board_string`: A function that takes a board state and returns a string representation of that state for state comparison. - `export_output`: A function that manages the output of the search upon finding the goal. - `start_time`: The time when the search starts. **Output and Execution:** - The function should not return any value but should utilize `export_output` to report the finding of the goal. - It should also keep track and manage various DFS-related metrics such as the number of nodes expanded, the size of the fringe, and the maximum search depth reached during the exploration. - Efficiently manage the DFS stack using a list or any other appropriate stack implementation in Python. Here is an example of how `dfs_search` might be invoked: ```python dfs_search(init_node, goal_board, get_children, make_board_string, export_output, start_time) ``` **Requirements:** - Implement the DFS stack efficiently to handle potentially deep recursion and extensive state space using a list or any other suitable stack implementation techniques provided by Python.","solution":"def dfs_search(init_node, goal_board, get_children, make_board_string, export_output, start_time): Perform Depth-First Search to find a path from init_node to the goal_board. Parameters: - init_node: The initial node from which the search starts. - goal_board: The board state representing the goal. - get_children: A function that returns the children of a node. - make_board_string: A function that converts a board state into a string. - export_output: A function to report when the goal is found. - start_time: The start time of the search. Returns: None (the function uses export_output to report the result). stack = [(0, init_node)] # stack stores tuples of (depth, node) explored_set = set() nodes_expanded = 0 max_depth = 0 while stack: depth, node = stack.pop() # Update maximum depth if depth > max_depth: max_depth = depth board = node[\'board\'] board_str = make_board_string(board) if board_str in explored_set: continue explored_set.add(board_str) nodes_expanded += 1 if board == goal_board: # Goal found, report result export_output(nodes_expanded, len(stack), max_depth, start_time) return # Expand the node\'s children and push them onto the stack children = get_children(node) for child in children: stack.append((depth + 1, child)) # If stack is empty and goal not found, report as not found export_output(nodes_expanded, len(stack), max_depth, start_time)"},{"question":"You are given a list of integers representing stock prices on different days. You are required to write a function that finds the maximum profit that can be achieved by buying and selling the stock. However, you are allowed to complete at most two transactions (i.e., buy one and sell one share of the stock at most twice). Design a function named `maxProfit` that takes a list of integers `prices` as input and returns the maximum profit that can be obtained. # Requirements - **You must use** the Dynamic Programming approach to solve this problem. - Use the function signature: `def maxProfit(prices):` - If no profit can be made, return 0. # Constraints 1. The length of the `prices` list will be at most 10^5. 2. All prices will be positive integers. # Example ```python def maxProfit(prices): if not prices: return 0 n = len(prices) left_min = prices[0] left_profits = [0] * n right_profits = [0] * (n + 1) for i in range(1, n): left_profits[i] = max(left_profits[i - 1], prices[i] - left_min) left_min = min(left_min, prices[i]) right_max = prices[-1] for i in range(n - 1, -1, -1): right_profits[i] = max(right_profits[i + 1], right_max - prices[i]) right_max = max(right_max, prices[i]) max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profits[i] + right_profits[i + 1]) return max_profit # Example use case prices = [3,3,5,0,0,3,1,4] print(maxProfit(prices)) # Output: 6 ``` # Output (Example) ``` 6 ``` # Explanation In this example, the stock prices list is [3,3,5,0,0,3,1,4]. The optimal strategy is to buy on day 4 (price = 0) and sell on day 6 (price = 3), then buy on day 7 (price = 1) and sell on day 8 (price = 4). This results in a maximum profit of 6 (3 - 0 + 4 - 1). The provided function demonstrates how to utilize dynamic programming to efficiently compute the maximum profit while adhering to the constraints of the problem.","solution":"def maxProfit(prices): if not prices: return 0 n = len(prices) if n == 1: return 0 left_min = prices[0] left_profits = [0] * n right_profits = [0] * (n + 1) for i in range(1, n): left_profits[i] = max(left_profits[i - 1], prices[i] - left_min) left_min = min(left_min, prices[i]) right_max = prices[-1] for i in range(n - 1, -1, -1): right_profits[i] = max(right_profits[i + 1], right_max - prices[i]) right_max = max(right_max, prices[i]) max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profits[i] + right_profits[i + 1]) return max_profit"},{"question":"Implement a text processing function that identifies and extracts email addresses from a given text using regular expressions. Store the extracted email addresses in a Python list and categorize them based on their domains. Return a dictionary where the keys are the domains, and the values are lists of email addresses corresponding to those domains. The function should output: dict: A dictionary mapping each domain to a list of email addresses associated with that domain. You should write self-contained code starting with: ``` import re def extract_emails(text): ``` Example: ``` Input: text = \\"Contact us at support@example.com, sales@example.com, or hr@company.org for more information.\\" Output: {\'example.com\': [\'support@example.com\', \'sales@example.com\'], \'company.org\': [\'hr@company.org\']} ```","solution":"import re from collections import defaultdict def extract_emails(text): Identifies and extracts email addresses from a given text and categorizes them by domain. Parameters: text (str): The input text containing email addresses. Returns: dict: A dictionary where keys are domains and values are lists of email addresses associated with those domains. email_pattern = r\'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,7}b\' emails = re.findall(email_pattern, text) email_dict = defaultdict(list) for email in emails: domain = email.split(\'@\')[1] email_dict[domain].append(email) return dict(email_dict)"},{"question":"Your task is to implement a function called `calculate_top_students` which takes a list of student records and returns a list of top students based on their average grade. Each student\'s record is represented as a dictionary with the following keys: \'name\' (a string), \'grades\' (a list of integers). Your function should calculate the average grade for each student, sort the students by their average grade in descending order, and return the top 3 students. If there are fewer than 3 students, return all of them. If multiple students have the same average grade, they should appear in alphabetical order by name. Here is the function signature: ```python def calculate_top_students(students: list) -> list: # Your code here ``` # Example: ```python students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [88, 90, 92]}, {\\"name\\": \\"Bob\\", \\"grades\\": [82, 85, 87]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [95, 90, 93]}, {\\"name\\": \\"David\\", \\"grades\\": [90, 91, 92]}, {\\"name\\": \\"Eva\\", \\"grades\\": [100, 98, 99]} ] ``` **Function Call:** ```python top_students = calculate_top_students(students) print(top_students) ``` **Expected Output:** ```python [ {\\"name\\": \\"Eva\\", \\"grades\\": [100, 98, 99]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [95, 90, 93]}, {\\"name\\": \\"David\\", \\"grades\\": [90, 91, 92]} ] ``` # Explanation: - Eva has the highest average grade: 99. - Charlie has the second highest average grade: 92.67. - David has the third highest average grade: 91. - Alice and Bob have lower average grades and thus do not appear in the top 3. # Constraints: - Each dictionary in the input list will have the \'name\' key with a non-empty string and \'grades\' key with a non-empty list of integers. - You can assume no invalid data and the input list will contain at least one student\'s record.","solution":"def calculate_top_students(students: list) -> list: Returns the top 3 students based on their average grade. If there are fewer than 3 students, returns all of them. If multiple students have the same average grade, they are sorted alphabetically by name. # Calculate the average grade for each student for student in students: student[\'average\'] = sum(student[\'grades\']) / len(student[\'grades\']) # Sort the students first by name alphabetically, then by average grade in descending order students_sorted = sorted(students, key=lambda x: (-x[\'average\'], x[\'name\'])) # Return the top 3 students or all of them if there are fewer than 3 return students_sorted[:3]"},{"question":"You are required to implement a function `plot_precision_recall_curve_with_threshold(y_true, y_scores)` using the `numpy` and `matplotlib` libraries. This function will plot the precision and recall values against the decision threshold. Here\'s what you need to do: 1. **Compute Precision and Recall**: Use `sklearn.metrics.precision_recall_curve` to calculate precision and recall for different thresholds. 2. **Create a Figure**: Use `matplotlib` to create a new figure with two subplots: one for precision and one for recall. 3. **Plot Precision and Recall**: Plot the precision and recall values against the corresponding thresholds in their respective subplots. 4. **Customize the Plot**: Label the x and y-axes for both subplots, add a legend, and set a title for each subplot. # Function Signature ```python def plot_precision_recall_curve_with_threshold(y_true, y_scores): Plots the precision and recall values against the decision threshold. Parameters: y_true (array-like): Array of true binary labels. y_scores (array-like): Array of scores or probability estimates for the positive class. Returns: None ``` # Example Usage ```python import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import precision_recall_curve # Example Data y_true = np.array([0, 1, 1, 0, 1, 1, 0, 0, 1, 0]) y_scores = np.random.rand(10) # Replace with actual score values in practice plot_precision_recall_curve_with_threshold(y_true, y_scores) ``` # Guidelines 1. Use `sklearn.metrics.precision_recall_curve` to compute precision, recall, and thresholds. 2. Use `matplotlib.pyplot.figure` and `matplotlib.pyplot.subplots` to create the figure and subplots. 3. Use `matplotlib.pyplot.plot` to plot the precision and recall values against the thresholds. 4. Use `matplotlib.pyplot.show` to display the plot. 5. Use `numpy.array` to ensure that `y_true` and `y_scores` are in array format if they aren\'t already.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import precision_recall_curve def plot_precision_recall_curve_with_threshold(y_true, y_scores): Plots the precision and recall values against the decision threshold. Parameters: y_true (array-like): Array of true binary labels. y_scores (array-like): Array of scores or probability estimates for the positive class. Returns: None # Ensure y_true and y_scores are numpy arrays y_true = np.array(y_true) y_scores = np.array(y_scores) # Compute precision and recall precision, recall, thresholds = precision_recall_curve(y_true, y_scores) # Extend the thresholds array by adding 1.0 to its end, to match the length of precision and recall thresholds = np.append(thresholds, 1.0) # Create a figure with two subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5)) # Plot precision values against thresholds ax1.plot(thresholds, precision, label=\'Precision\', color=\'b\') ax1.set_xlabel(\'Threshold\') ax1.set_ylabel(\'Precision\') ax1.set_title(\'Precision vs. Threshold\') ax1.legend(loc=\'best\') # Plot recall values against thresholds ax2.plot(thresholds, recall, label=\'Recall\', color=\'g\') ax2.set_xlabel(\'Threshold\') ax2.set_ylabel(\'Recall\') ax2.set_title(\'Recall vs. Threshold\') ax2.legend(loc=\'best\') # Show the plot plt.show()"},{"question":"In this problem, you are asked to write a Python function called `word_frequencies`, which will compute the frequency of each word in a given string and return a dictionary with words as keys and their corresponding counts as values. The function should consider words to be case-insensitive and ignore punctuation. You should use the `re` library to handle the removal of punctuation and splitting of words. Your function should take a single string argument `text`, which contains the input text, and return a dictionary with words as keys (in lowercase) and their frequency counts as values. The following are the requirements and constraints for this problem: - Treat words as case-insensitive, so \\"Word\\" and \\"word\\" should be counted as the same word. - Ignore punctuation characters, so \\"word,\\" and \\"word\\" should be counted as the same word. - Split the text into words based on whitespace and punctuation using regular expressions. Here is the function signature: ```python def word_frequencies(text: str) -> dict: ``` Example: ```python text = \\"Hello world! This is a test. Hello again; hello world.\\" Output: {\'hello\': 3, \'world\': 2, \'this\': 1, \'is\': 1, \'a\': 1, \'test\': 1, \'again\': 1} ```","solution":"import re from collections import defaultdict def word_frequencies(text: str) -> dict: # Convert text to lowercase text = text.lower() # Use regular expression to replace punctuation with spaces text = re.sub(r\'[^ws]\', \' \', text) # Split text into words words = text.split() # Calculate frequencies frequencies = defaultdict(int) for word in words: frequencies[word] += 1 return dict(frequencies)"},{"question":"Write a Python function named `unique_sorted_words` that reads data from a text file where each line contains a sentence. The function should extract all unique words from the sentences, sort them alphabetically, and write them into a new text file with one word per line in sorted order. The function should be case-insensitive when determining uniqueness. To accomplish this, you must first read the file line by line, split the sentences into words, convert all words to lowercase, and store them in a set to ensure uniqueness. After collecting all unique words, sort them alphabetically and write them into a new file. Function Signature ```python def unique_sorted_words(inputfile: str, outputfile: str) -> bool: ... ``` Parameters - `inputfile` (str): The path to the input text file. - `outputfile` (str): The path to the output text file. Returns - `bool`: The function should return `True` upon successful writing of the output file. Input Format - The input text file contains multiple lines, each representing a sentence of words separated by spaces. Example Input Contents of `input.txt`: ``` Hello world world of Python Python is awesome ``` Example Output Contents of `output.txt`: ``` awesome hello is of python world ``` Hint - Use Python\'s `set` to collect unique words and `sorted` function to sort them.","solution":"def unique_sorted_words(inputfile: str, outputfile: str) -> bool: Extract unique words from an input text file, sort them alphabetically, and write to an output file. Args: inputfile (str): The path to the input text file. outputfile (str): The path to the output text file. Returns: bool: True if the output file is written successfully. unique_words = set() # Read all lines from the input file and extract words with open(inputfile, \'r\') as infile: for line in infile: words = line.lower().strip().split() unique_words.update(words) # Sort the unique words alphabetically sorted_words = sorted(unique_words) # Write the sorted words to the output file, one word per line with open(outputfile, \'w\') as outfile: for word in sorted_words: outfile.write(word + \'n\') return True"},{"question":"Create a function called `merge_and_sort_dicts` that takes two parameters: `dict1` and `dict2`, which are both dictionaries. The function should return a list of tuples, where each tuple contains a key-value pair from the merged dictionary, and the list is sorted by keys in ascending order. Requirements: 1. The function should ensure that the keys in both dictionaries are of the same type. 2. If a key exists in both dictionaries, the value in the resulting dictionary should be the sum of the values from both dictionaries. 3. The function is expected to return a list of tuples sorted by keys. Input: - `dict1`: A dictionary with key-value pairs (e.g., `{\'a\': 1, \'b\': 2}`). - `dict2`: Another dictionary with key-value pairs (e.g., `{\'b\': 3, \'c\': 1}`). Output: - A list of tuples with key-value pairs sorted by keys (e.g., `[(\'a\', 1), (\'b\', 5), (\'c\', 1)]`). Examples: ```python merge_and_sort_dicts({\'a\': 1, \'b\': 2}, {\'b\': 3, \'c\': 1}) # Should return [(\'a\', 1), (\'b\', 5), (\'c\', 1)] merge_and_sort_dicts({1: 100, 2: 200}, {2: 300, 3: 400}) # Should return [(1, 100), (2, 500), (3, 400)] merge_and_sort_dicts({\'x\': 5}, {\'y\': 10}) # Should return [(\'x\', 5), (\'y\', 10)] ```","solution":"def merge_and_sort_dicts(dict1, dict2): Merges two dictionaries and returns a sorted list of key-value pairs. If a key exists in both dictionaries, sums the values. Args: dict1, dict2: Input dictionaries to be merged. Returns: A sorted list of tuples with key-value pairs from the merged dictionary. merged_dict = dict1.copy() for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value else: merged_dict[key] = value sorted_items = sorted(merged_dict.items()) return sorted_items"},{"question":"**Context**: In many real-world scenarios, we often need to analyze data stored in the form of strings and extract meaningful information from it. One common task is to identify and validate patterns within those strings. For instance, verifying if a given string matches a certain pattern can be crucial in data validation processes, such as ensuring a correct format for phone numbers, email addresses, or custom identifiers. **Task**: Implement the function `validate_identifier(ids, pattern)` that takes a list of strings (`ids`) and a string (`pattern`) representing a regex pattern. Your function should: 1. Utilize regular expressions to check each element in the `ids` list against the provided `pattern`. 2. Return a new list containing only the identifiers that match the given pattern. **Requirements**: Your solution must use the `re` library in Python for regular expression operations. Detailed information about Python\'s `re` module can be found in the Python Library Documentation: [ text{re module: } text{Support for regular expressions (texttt{re})} ] **Function Signature**: ```python import re def validate_identifier(ids: list, pattern: str) -> list: pass ``` **Examples**: ```python >>> validate_identifier([\'abc123\', \'def456\', \'ghi789\'], r\'b[a-z]{3}d{3}b\') [\'abc123\', \'def456\', \'ghi789\'] >>> validate_identifier([\'abc123\', \'def_456\', \'ghi\', \'789\'], r\'b[a-z]{3}d{3}b\') [\'abc123\'] ``` **Notes**: - You can assume that the `pattern` will always be a valid regular expression. - The identifiers should match the entire pattern (use anchors like `b` if needed). - If no identifiers match the pattern, the function should return an empty list.","solution":"import re def validate_identifier(ids: list, pattern: str) -> list: Returns a list of identifiers that match the given regex pattern. Parameters: ids (list): List of strings to be validated. pattern (str): Regex pattern to match the strings against. Returns: list: List of strings that match the pattern. compiled_pattern = re.compile(pattern) return [id for id in ids if compiled_pattern.fullmatch(id)]"},{"question":"You are asked to create a simple simulation of a traffic light system using the `tkinter` module in Python. The traffic light should have three states: Green, Yellow, and Red, and should transition between these states automatically after a fixed interval. Write a function named `traffic_light_simulation` that uses the `tkinter` library to create and animate the traffic light. The function should follow these specifications: # Function Signature ```python def traffic_light_simulation(green_time=3000, yellow_time=1000, red_time=3000): # Your code here ``` # Parameters: - `green_time` (int): Duration (in milliseconds) that the light stays green. Default is 3000. - `yellow_time` (int): Duration (in milliseconds) that the light stays yellow. Default is 1000. - `red_time` (int): Duration (in milliseconds) that the light stays red. Default is 3000. # Requirements: - Use `tkinter.Canvas` to draw three circles representing the red, yellow, and green lights. - Implement the state changes using `tkinter`\'s `after` method to schedule the transitions between light states. - Ensure that only one light (circle) is \\"on\\" at any given time, while the others are \\"off\\" (use different colors to represent on and off states). - The simulation should run in an infinite loop, continuously cycling through the states. # Output: No specific return value is needed, but the function should open a `tkinter` window displaying the traffic light that transitions between Green, Yellow, and Red states according to the specified durations. # Example: Calling `traffic_light_simulation()` with default parameters should open a `tkinter` window and animate the traffic light transitioning between Green, Yellow, and Red states in the specified intervals.","solution":"import tkinter as tk def traffic_light_simulation(green_time=3000, yellow_time=1000, red_time=3000): root = tk.Tk() root.title(\\"Traffic Light Simulation\\") canvas = tk.Canvas(root, width=200, height=400) canvas.pack() green_light = canvas.create_oval(50, 250, 150, 350, fill=\'grey\') yellow_light = canvas.create_oval(50, 150, 150, 250, fill=\'grey\') red_light = canvas.create_oval(50, 50, 150, 150, fill=\'grey\') def set_light(color): if color == \'green\': canvas.itemconfig(green_light, fill=\'green\') canvas.itemconfig(yellow_light, fill=\'grey\') canvas.itemconfig(red_light, fill=\'grey\') root.after(green_time, lambda: set_light(\'yellow\')) elif color == \'yellow\': canvas.itemconfig(green_light, fill=\'grey\') canvas.itemconfig(yellow_light, fill=\'yellow\') canvas.itemconfig(red_light, fill=\'grey\') root.after(yellow_time, lambda: set_light(\'red\')) elif color == \'red\': canvas.itemconfig(green_light, fill=\'grey\') canvas.itemconfig(yellow_light, fill=\'grey\') canvas.itemconfig(red_light, fill=\'red\') root.after(red_time, lambda: set_light(\'green\')) set_light(\'green\') root.mainloop()"},{"question":"Write a function that simulates rolling a fair six-sided die \'n\' times and returns a dictionary containing the counts of each face. Ensure that the function accounts for the randomness of each roll and accurately tallies the results for all six faces. The function takes the number of rolls \'n\' as an input and should output: dict: A dictionary with keys representing the faces of the die (1 through 6) and values representing the counts of each face. The function should start with: ``` from random import randint def roll_die(n: int): ```","solution":"from random import randint def roll_die(n: int): Simulates rolling a fair six-sided die \'n\' times and returns a dictionary containing the counts of each face. Parameters: n (int): The number of times to roll the die. Returns: dict: A dictionary with keys representing the faces of the die (1 through 6) and values representing the counts of each face. face_counts = {i: 0 for i in range(1, 7)} for _ in range(n): roll = randint(1, 6) face_counts[roll] += 1 return face_counts"},{"question":"You are given a list of strings that represent mathematical expressions. Your task is to write a Python function `evaluateExpressions(expressions: list) -> list` which takes the list of strings as input and returns a list of their evaluated results. Here\'s a breakdown of the requirements: 1. The input list, `expressions`, contains strings of valid mathematical expressions. 2. Each string can contain integers, the operators `+`, `-`, `*`, `/`, and parentheses. 3. Use Python\'s `eval` function to evaluate each string expression. 4. Return a list containing the evaluated results of each expression in the same order as the input list. **Function Signature:** ```python def evaluateExpressions(expressions: list) -> list: # Your code here ``` **Example:** ```python expressions = [\\"2 + 3 * 4\\", \\"10 / 2 - 3\\", \\"(5 + 2) * 3\\"] print(evaluateExpressions(expressions)) ``` The output should be: ``` [14, 2.0, 21] ``` # Ensure that the function handles different mathematical operations and returns the correct results as shown in the example.","solution":"def evaluateExpressions(expressions: list) -> list: Evaluates a list of mathematical expressions and returns their results in a list. results = [] for expr in expressions: result = eval(expr) results.append(result) return results"},{"question":"You are asked to create an algorithm to identify unique values in a list and sort them without using any built-in sorting functions. Implement a function `unique_sorted` that takes a single parameter: 1. `nums` (list): A list of integers containing potentially duplicate values. The function should: 1. Identify unique integers in the list. 2. Sort the unique integers in ascending order without using any built-in sorting functions (e.g., `sorted`, `sort`, etc.). 3. Return the sorted list of unique integers. **Function Signature** ```python def unique_sorted(nums: list) -> list: pass ``` **Example** ```python nums_example = [4, 6, 2, 2, 6, 8, 4, 10] print(unique_sorted(nums_example)) # Output: [2, 4, 6, 8, 10] nums_example_2 = [3, 3, 1, 2, 1] print(unique_sorted(nums_example_2)) # Output: [1, 2, 3] ``` In these examples, the function should return a list of unique integers sorted in ascending order derived from the input lists.","solution":"def unique_sorted(nums): Identify unique integers in the list and sorts them in ascending order without using any built-in sorting functions. # Identify unique values using set unique_nums = list(set(nums)) # Implementing a simple sorting algorithm: Bubble Sort n = len(unique_nums) for i in range(n): for j in range(0, n-i-1): if unique_nums[j] > unique_nums[j+1]: # Swap if the element found is greater than the next element unique_nums[j], unique_nums[j+1] = unique_nums[j+1], unique_nums[j] return unique_nums"},{"question":"You are tasked with creating a function to simulate the growth of a bacterial colony under specific conditions. This function needs to calculate the population of bacteria after a given number of hours, with a doubling rate that changes at certain intervals. The function `simulate_bacterial_growth(initial_population: int, hours: int) -> int` should be constructed to achieve this. - **Function Signature**: `simulate_bacterial_growth(initial_population: int, hours: int) -> int` - **Input**: - The function takes two integers, `initial_population` which represents the starting population of the bacteria, and `hours` which represents the total number of hours to simulate. - **Output**: - The function should return an integer representing the population of the bacteria after the specified number of hours. Here are the specific conditions to implement: 1. For the first 2 hours, the population doubles every hour. 2. For the next 3 hours, the population triples every hour. 3. For the remaining hours, the population quadruples every hour. For example: - If the initial_population is 100 and hours is 5, the function should calculate: - After 1 hour: 100 * 2 = 200 - After 2 hours: 200 * 2 = 400 - After 3 hours: 400 * 3 = 1200 - After 4 hours: 1200 * 3 = 3600 - After 5 hours: 3600 * 3 = 10800 - Therefore, the function should return 10800. Use appropriate mathematical operations to implement the growth stages.","solution":"def simulate_bacterial_growth(initial_population: int, hours: int) -> int: Simulates the growth of bacteria under given conditions. The population doubles every hour for the first 2 hours, triples every hour for the next 3 hours, and quadruples every hour thereafter. Args: initial_population (int): The initial population of the bacteria. hours (int): The total number of hours to simulate the growth. Returns: int: The population of bacteria after the specified number of hours. if hours <= 0: return initial_population population = initial_population # For the first 2 hours for i in range(min(2, hours)): population *= 2 hours -= 1 # For the next 3 hours for i in range(min(3, hours)): population *= 3 hours -= 1 # For the remaining hours for i in range(hours): population *= 4 return population"},{"question":"You are provided with multiple CSV files stored in a directory named `\'Data/NYC_Taxi_Data\'`. Each CSV file contains trip records of NYC taxis for different months. Your goal is to analyze these trip records and compute the total revenue generated by all taxis for each month. The CSV files have the following structure: - `pickup_datetime`: The date and time when the trip started. - `dropoff_datetime`: The date and time when the trip ended. - `passenger_count`: The number of passengers on the trip. - `trip_distance`: The distance of the trip in miles. - `fare_amount`: The fare amount in USD. - `extra`: Extra charges (e.g., surcharge). - `mta_tax`: MTA tax in USD. - `tip_amount`: Tip amount in USD. - `tolls_amount`: Tolls amount in USD. - `improvement_surcharge`: Improvement surcharge in USD. - `total_amount`: Total amount paid by the passenger in USD, including all charges. Here is the detailed task description: 1. Traverse the directory `\'Data/NYC_Taxi_Data\'` to find all `.csv` files. 2. For each `.csv` file, read the data into a pandas DataFrame. 3. Combine data from all files into a single DataFrame. 4. Convert the `pickup_datetime` and `dropoff_datetime` columns to appropriate datetime data types. 5. Ensure all numeric columns (`passenger_count`, `trip_distance`, `fare_amount`, `extra`, `mta_tax`, `tip_amount`, `tolls_amount`, `improvement_surcharge`, `total_amount`) are processed correctly for any missing or incorrect values. 6. Extract the month and year from the `pickup_datetime` column. 7. Group the data by month and year, then compute the total revenue for each month by summing the `total_amount` column. 8. Return a DataFrame containing the month, year, and total revenue. Implement a function named `calculate_monthly_revenue` to achieve the above steps. Parameters: - None Returns: - `pandas.DataFrame`: A DataFrame containing columns for month, year, and total revenue generated by all taxis for each month. Use the `pandas` library to handle DataFrames and leverage the `pandas.read_csv` function to read the CSV files.","solution":"import os import pandas as pd from datetime import datetime def calculate_monthly_revenue(): Calculate the total revenue generated by all NYC taxis for each month. Returns: pandas.DataFrame: A DataFrame containing columns for month, year, and total revenue. directory = \'Data/NYC_Taxi_Data\' all_files = [os.path.join(directory, f) for f in os.listdir(directory) if f.endswith(\'.csv\')] # Initialize an empty list to store DataFrames df_list = [] for file in all_files: df = pd.read_csv(file) df_list.append(df) # Combine all DataFrames into one combined_df = pd.concat(df_list, ignore_index=True) # Convert \'pickup_datetime\' and \'dropoff_datetime\' columns to datetime combined_df[\'pickup_datetime\'] = pd.to_datetime(combined_df[\'pickup_datetime\'], errors=\'coerce\') combined_df[\'dropoff_datetime\'] = pd.to_datetime(combined_df[\'dropoff_datetime\'], errors=\'coerce\') # Ensure all numeric columns are processed correctly by converting to numeric and handling errors numeric_columns = [\'passenger_count\', \'trip_distance\', \'fare_amount\', \'extra\', \'mta_tax\', \'tip_amount\', \'tolls_amount\', \'improvement_surcharge\', \'total_amount\'] for column in numeric_columns: combined_df[column] = pd.to_numeric(combined_df[column], errors=\'coerce\') # Extract the month and year from \'pickup_datetime\' combined_df[\'month\'] = combined_df[\'pickup_datetime\'].dt.month combined_df[\'year\'] = combined_df[\'pickup_datetime\'].dt.year # Group by month and year, then compute the total revenue revenue_df = combined_df.groupby([\'year\', \'month\'])[\'total_amount\'].sum().reset_index() return revenue_df"},{"question":"Write a Python function named `k_largest_elements` that returns the `k` largest elements from a given list in descending order. The function should use a sorting method and must not use any external libraries specifically tailored for this task (i.e., do not use heapq or similar). # Function Signature ```python def k_largest_elements(lst, k): # lst: list of integers # k: integer, number of largest elements to return # return: list of k largest integers in descending order ``` # Parameters - **lst**: list The input list containing integer values. - **k**: int The number of largest elements to return from the list. # Returns - **result**: list A list containing the `k` largest integers from the input list in descending order. # Instructions 1. Sort the input list in descending order. 2. Extract the first `k` elements from the sorted list. 3. Return these `k` elements as the result. # Hint - You can use the list\'s `sort` method or the built-in `sorted` function to sort the list. # Example Suppose you have the following list: ```python lst = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] k = 3 ``` The expected output will be: ```python result = k_largest_elements(lst, k) print(result) ``` Where `result` should be: ```python [9, 6, 5] ``` # Note Make sure that the function handles edge cases such as: - If `k` is greater than the length of the list, it should return the sorted list in descending order. - If `k` is less than or equal to 0, it should return an empty list.","solution":"def k_largest_elements(lst, k): Returns the k largest elements from the list in descending order. Parameters: - lst: list of integers - k: integer, number of largest elements to return Returns: - list of k largest integers in descending order # Edge case: if k is less than or equal to 0, return an empty list if k <= 0: return [] # Sort the list in descending order sorted_lst = sorted(lst, reverse=True) # Extract the first k elements return sorted_lst[:k]"},{"question":"# Game Scoreboard Management In this task, you will implement a class that manages scoreboard data for a gaming system. The scoreboard should keep track of players\' scores and support queries for the highest-scored players. You are required to implement the `Scoreboard` class with the following methods: 1. `add_score(player: str, score: int) -> None`: Adds the score for the given player. If the player already has a score, the new score should be added to their existing score. 2. `reset_score(player: str) -> None`: Resets the score for the given player to zero. 3. `top(n: int) -> List[str]`: Returns a list of the top `n` players based on their scores in descending order. If two players have the same score, return them in alphabetical order. # Class Definition ```python class Scoreboard: def __init__(self): # Initialize the scoreboard with necessary attributes pass def add_score(self, player: str, score: int) -> None: # Adds the score to the player’s existing score in the scoreboard pass def reset_score(self, player: str) -> None: # Resets the score of the given player pass def top(self, n: int) -> List[str]: # Returns a list of the top n players based on their scores pass ``` # Example Here is an example of how your implementation should work: ```python scoreboard = Scoreboard() scoreboard.add_score(\\"Alice\\", 10) scoreboard.add_score(\\"Bob\\", 15) scoreboard.add_score(\\"Alice\\", 5) scoreboard.add_score(\\"Charlie\\", 20) scoreboard.add_score(\\"Bob\\", 10) print(scoreboard.top(2)) # Output: [\'Charlie\', \'Bob\'] print(scoreboard.top(3)) # Output: [\'Charlie\', \'Bob\', \'Alice\'] scoreboard.reset_score(\\"Charlie\\") print(scoreboard.top(2)) # Output: [\'Bob\', \'Alice\'] ``` # Notes - The `add_score` method should handle updating the existing score for a player if they already have an entry. - The `top` method should return players sorted by their scores in descending order, with ties broken alphabetically. - Assume player names are unique and consist only of alphabet characters.","solution":"from typing import List, Dict class Scoreboard: def __init__(self): Initialize the scoreboard with an empty dictionary to hold player scores. self.scores: Dict[str, int] = {} def add_score(self, player: str, score: int) -> None: Adds the score to the player’s existing score in the scoreboard. if player in self.scores: self.scores[player] += score else: self.scores[player] = score def reset_score(self, player: str) -> None: Resets the score of the given player to zero. if player in self.scores: self.scores[player] = 0 def top(self, n: int) -> List[str]: Returns a list of the top n players based on their scores in descending order. # Sort by score descending, then by player name alphabetically sorted_players = sorted(self.scores.items(), key=lambda item: (-item[1], item[0])) return [player for player, score in sorted_players[:n]]"},{"question":"You are required to write a Python function named `find_nearest_palindrome` that, given an integer, finds the nearest palindrome number. The function should: 1. Accept an integer as input. 2. Determine the nearest integer palindrome to the given input. If there are two palindrome numbers at the same distance, return the smaller one. 3. Return the nearest palindrome as an integer. Input: - `num` (int): The input integer. Output: - (int): The nearest palindrome number. **Function Signature:** ```python def find_nearest_palindrome(num: int) -> int: pass ``` **Example Usage:** ```python print(find_nearest_palindrome(123)) ``` This should return `121` as it is the nearest palindrome to 123. **Example Usage:** ```python print(find_nearest_palindrome(100)) ``` This should return `99` as it is the nearest palindrome to 100. [Hint] You may need to write a helper function to check if a number is a palindrome and another helper function to generate the next palindrome candidate.","solution":"def is_palindrome(x: int) -> bool: s = str(x) return s == s[::-1] def find_nearest_palindrome(num: int) -> int: if num < 0: raise ValueError(\\"Input number must be non-negative\\") if is_palindrome(num): return num lower_palindrome = num - 1 upper_palindrome = num + 1 while not is_palindrome(lower_palindrome): lower_palindrome -= 1 while not is_palindrome(upper_palindrome): upper_palindrome += 1 if num - lower_palindrome <= upper_palindrome - num: return lower_palindrome else: return upper_palindrome"},{"question":"You are tasked with creating a function named `compute_substring_counts` that takes two parameters: `text` (a string) and `substrings` (a list of strings). The function will count the occurrences of each substring in the `text`. To achieve this, you should use Python\'s string methods to ensure accurate and efficient counting. **Input:** - `text`: A string in which substrings will be counted. For example, `\\"hellohellohello\\"` - `substrings`: A list of strings which need to be counted in `text`. For example, `[\\"hello\\", \\"lo\\", \\"he\\"]` **Output:** - A dictionary where keys are substrings and values are their respective counts in the `text`. **Example:** ```python text = \\"hellohellohello\\" substrings = [\\"hello\\", \\"lo\\", \\"he\\"] output = compute_substring_counts(text, substrings) # Output should be {\'hello\': 3, \'lo\': 3, \'he\': 3} ``` **Notes:** 1. Ensure the counting is efficient and works for large texts. 2. The substrings will not overlap in counting their occurrences. 3. Assume the text and substrings to be non-empty and consisting of lowercase letters only. 4. Consider edge cases such as no occurrence of a substring or one substring being a part of another.","solution":"def compute_substring_counts(text, substrings): Takes a string text and a list of substrings, and returns a dictionary with the counts of each substring in the text. counts = {} for substring in substrings: counts[substring] = text.count(substring) return counts"},{"question":"You are given two strings, `s1` and `s2`, and your task is to write a function that checks if `s2` is a scrambled string of `s1`. A scrambled string is defined as follows: - A string can be split into two non-empty substrings recursively. - Two strings are considered scrambled strings if one string can be transformed into the other by swapping any number of non-empty substrings from the split operation. **Function Signature:** ```python def is_scramble(s1: str, s2: str) -> bool: Check if s2 is a scrambled string of s1. Parameters: s1 (str): The original string. s2 (str): The string to check if it is a scrambled version of s1. Returns: bool: True if s2 is a scrambled string of s1, False otherwise. ``` **Function Details:** 1. **Inputs:** - `s1`: A string that will be the reference for scrambling. - `s2`: A string that will be checked to determine if it is a scrambled version of `s1`. 2. **Outputs:** - The function should return `True` if `s2` is a scrambled string of `s1`, and `False` otherwise. 3. **Constraints:** - You may assume that both `s1` and `s2` are of the same length and contain only lowercase letters. - The function should also handle cases where the strings are not scrambled versions of each other efficiently. 4. **Implementation Notes:** - Use recursion and dynamic programming to solve the problem efficiently. - Consider all possible places to split the strings and check if swapping the substrings will form a match. - The base case for the recursion will handle direct equality checks for the substrings. Here\'s an example of how the function would be used: ```python # Example usage print(is_scramble(\\"great\\", \\"rgeat\\")) # Output: True (because \\"great\\" -> \\"rgeat\\" by swapping \\"gr\\" and \\"eat\\") print(is_scramble(\\"abcde\\", \\"caebd\\")) # Output: False (no swap can make \\"abcde\\" equal \\"caebd\\") ``` Your task is to implement this function correctly to determine if one string is a scrambled version of another.","solution":"def is_scramble(s1: str, s2: str) -> bool: Check if s2 is a scrambled string of s1. Parameters: s1 (str): The original string. s2 (str): The string to check if it is a scrambled version of s1. Returns: bool: True if s2 is a scrambled string of s1, False otherwise. if len(s1) != len(s2) or sorted(s1) != sorted(s2): return False if s1 == s2: return True n = len(s1) dp = [[[False] * n for _ in range(n)] for _ in range(n + 1)] for i in range(n): for j in range(n): dp[1][i][j] = s1[i] == s2[j] for length in range(2, n + 1): for i in range(n - length + 1): for j in range(n - length + 1): for k in range(1, length): if (dp[k][i][j] and dp[length - k][i + k][j + k]) or (dp[k][i][j + length - k] and dp[length - k][i + k][j]): dp[length][i][j] = True break return dp[n][0][0]"},{"question":"You are required to develop a Python function that counts the number of islands in a given 2D grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. You are provided with a partially implemented function named `count_islands`. Your task is to complete this function. To achieve this, you need to: 1. Traverse the grid to identify islands. 2. Use Depth-First Search (DFS) to mark all parts of an island as visited. 3. Return the total count of islands. Here are the detailed steps and requirements: 1. **Function Signature**: ```python def count_islands(grid): ``` 2. **Parameters**: - `grid` (list[list[int]]): A 2D grid where `0` represents water and `1` represents land. 3. **Requirements**: - Implement a helper function that performs DFS on the grid. - Use the helper function to mark visited cells. - Count each distinct island and return the total count. 4. **Assumptions**: - The grid is a non-empty list of lists. - The grid contains only `0`s and `1`s. Here is a basic skeleton of the function that you need to complete: ```python def count_islands(grid): if not grid or not grid[0]: return 0 def dfs(row, col): # Check for out of bounds or already visited cells if (row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] == 0): return # Mark the cell as visited grid[row][col] = 0 # Visit all adjacent cells (up, down, left, right) dfs(row + 1, col) dfs(row - 1, col) dfs(row, col + 1) dfs(row, col - 1) num_islands = 0 for row in range(len(grid)): for col in range(len(grid[0])): if grid[row][col] == 1: dfs(row, col) num_islands += 1 return num_islands ```","solution":"def count_islands(grid): if not grid or not grid[0]: return 0 def dfs(row, col): # Check for out of bounds or already visited cells if (row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] == 0): return # Mark the cell as visited grid[row][col] = 0 # Visit all adjacent cells (up, down, left, right) dfs(row + 1, col) dfs(row - 1, col) dfs(row, col + 1) dfs(row, col - 1) num_islands = 0 for row in range(len(grid)): for col in range(len(grid[0])): if grid[row][col] == 1: dfs(row, col) num_islands += 1 return num_islands"},{"question":"You are working on an application that processes trading data. One of the features required is to analyze a list of trades and determine the maximum possible profit from a single buy and a subsequent sell. # Task Write a function named `max_profit` that takes a list of integers representing the prices of a stock on different days and returns the maximum profit that can be achieved from a single buy and a subsequent sell. If no profit is possible, the function should return 0. # Requirements 1. **Profit Calculation**: You can only buy before you sell (i.e., the buy date must be earlier than the sell date). 2. **Edge Case**: If the list contains fewer than 2 prices, return 0 as no transaction can take place. # Function Signature ```python def max_profit(prices: List[int]) -> int: # Your implementation here ``` # Example ```python max_profit([7, 1, 5, 3, 6, 4]) ``` Returns: ```python 5 ``` Explanation: Buy at price 1 and sell at price 6, profit = 6 - 1 = 5. ```python max_profit([7, 6, 4, 3, 1]) ``` Returns: ```python 0 ``` Explanation: No transaction possible to yield profit.","solution":"from typing import List def max_profit(prices: List[int]) -> int: # If there are fewer than 2 prices, we can\'t make a profit if len(prices) < 2: return 0 # Initialize variables to track the minimum price and max profit min_price = float(\'inf\') max_profit = 0 # Iterate through prices for price in prices: # Update the minimum price if the current price is lower if price < min_price: min_price = price # Calculate the current profit and update max profit if it\'s higher current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Write a Python function named `median_maintenance` that processes a sequence of integers and maintains the median of all elements added so far. The function should compute the median after each insertion and store the results. The function must efficiently compute the median in O(log n) per insertion using two heaps. The function `median_maintenance` should have the following signature: ```python def median_maintenance(sequence: list[int]) -> list[float]: ``` The process is as follows: 1. Use a max-heap (`low`) to store the smaller half of the sequence and a min-heap (`high`) to store the larger half of the sequence. 2. Ensure the heaps are balanced in such a way that the difference in sizes between the two heaps is at most one. 3. After each insertion, if the number of elements is odd, the median is the root of the heap with more elements. If the number of elements is even, the median is the average of the roots of the two heaps. 4. Store the computed median at each step in a list. Below is the starting code to help you get started: ```python import heapq def median_maintenance(sequence): low = [] # Max-heap (invert values to use as max-heap) high = [] # Min-heap medians = [] for number in sequence: if len(low) == 0 or number < -low[0]: heapq.heappush(low, -number) else: heapq.heappush(high, number) if len(low) > len(high) + 1: heapq.heappush(high, -heapq.heappop(low)) elif len(high) > len(low): heapq.heappush(low, -heapq.heappop(high)) if len(low) == len(high): median = (-low[0] + high[0]) / 2.0 else: median = float(-low[0]) medians.append(median) return medians ``` [Test] Call the function with: ```python print(median_maintenance([2, 1, 5, 7, 2, 0, 5])) ``` The expected output is: ```python [2.0, 1.5, 2.0, 3.5, 2.0, 2.0, 2.0] ```","solution":"import heapq def median_maintenance(sequence): low = [] # Max-heap (invert values to use as max-heap) high = [] # Min-heap medians = [] for number in sequence: if len(low) == 0 or number < -low[0]: heapq.heappush(low, -number) else: heapq.heappush(high, number) if len(low) > len(high) + 1: heapq.heappush(high, -heapq.heappop(low)) elif len(high) > len(low): heapq.heappush(low, -heapq.heappop(high)) if len(low) == len(high): median = (-low[0] + high[0]) / 2.0 else: median = float(-low[0]) medians.append(median) return medians"},{"question":"Write a Python function that takes a list of integers and removes all duplicate values while preserving the order of their first occurrence. The function should then return the modified list. The function should: - Accept a list of integers as an argument. - Return the modified list with duplicates removed. - Ensure the original order of first occurrences is maintained. You should write self-contained code starting with: ``` def remove_duplicates(int_list): ```","solution":"def remove_duplicates(int_list): Removes duplicate values from the list while preserving the order of their first occurrence. Arguments: int_list -- list of integers Returns: A list of integers with duplicates removed. seen = set() unique_list = [] for num in int_list: if num not in seen: seen.add(num) unique_list.append(num) return unique_list"},{"question":"You are tasked with developing a function that identifies cycles in a directed graph using Depth-First Search (DFS). A cycle in a directed graph is a path that starts and ends at the same vertex, and it must include at least one edge. Write a function `find_cycles(graph)` that detects all the cycles in a given directed graph and returns them. The function should have the following signature: - `find_cycles(graph)` where `graph` is a dictionary representing an adjacency list of the graph. The keys are node identifiers, and the values are lists of nodes that each key node has directed edges to. The function should return a list of cycles. Each cycle should be represented as a list of nodes, indicating the order in which the nodes are visited in the cycle. The order within each cycle list does not matter, but each cycle should list its nodes in the sequence they are visited. # Your Task 1. Write the `find_cycles(graph)` function as described. 2. Ensure the function correctly identifies and returns all unique cycles in the graph. Below is an example of how your function might be called and what it might return. ```python # Example graph represented using adjacency list graph = { \'A\': [\'B\'], \'B\': [\'C\', \'D\'], \'C\': [\'A\'], \'D\': [\'E\'], \'E\': [\'B\'] } # Example call to the function cycles = find_cycles(graph) print(cycles) ``` Expected output: ```python [[\'A\', \'B\', \'C\'], [\'B\', \'D\', \'E\']] ```","solution":"def find_cycles(graph): Detects all cycles in a directed graph represented as an adjacency list. Parameters: graph (dict): A dictionary where the keys are node identifiers and the values are lists of nodes that each key node has directed edges to. Returns: list: A list of cycles, each cycle is represented as a list of nodes. def visit(node, path): Helper function for DFS. It visits nodes recursively, keeping track of the current path and all visited nodes. if node in path: cycle_index = path.index(node) cycles.add(tuple(sorted(path[cycle_index:]))) return if node in visited: return visited.add(node) path.append(node) for neighbor in graph.get(node, []): visit(neighbor, path.copy()) path.pop() visited = set() cycles = set() for node in graph: visit(node, []) return [list(cycle) for cycle in cycles]"},{"question":"You are assigned to create a Python function `sort_employees_by_join_date` that sorts a list of employee records based on their joining date. Each employee record is represented as a dictionary containing the keys `name` (str), `position` (str), and `join_date` (str in format \'YYYY-MM-DD\'). Your function should sort the records in ascending order of joining dates. The function should have the following signature: ```python def sort_employees_by_join_date(employees: list) -> list: ``` # Parameters: - `employees` (list): A list of dictionaries, where each dictionary represents an employee record and contains `name`, `position`, and `join_date`. # Returns: - A list of employee records sorted by the `join_date` in ascending order. # Requirements: 1. Parse the `join_date` field of each employee record to ensure correct date comparison. 2. Sort the employee records based on the parsed date. 3. Return the sorted list of employee records. # Example: Given the list of employee records: ```python employees = [ {\\"name\\": \\"Alice\\", \\"position\\": \\"Engineer\\", \\"join_date\\": \\"2020-03-15\\"}, {\\"name\\": \\"Bob\\", \\"position\\": \\"Manager\\", \\"join_date\\": \\"2018-07-22\\"}, {\\"name\\": \\"Charlie\\", \\"position\\": \\"CEO\\", \\"join_date\\": \\"2019-01-05\\"} ] ``` Calling `sort_employees_by_join_date(employees)` should return: ```python [ {\\"name\\": \\"Bob\\", \\"position\\": \\"Manager\\", \\"join_date\\": \\"2018-07-22\\"}, {\\"name\\": \\"Charlie\\", \\"position\\": \\"CEO\\", \\"join_date\\": \\"2019-01-05\\"}, {\\"name\\": \\"Alice\\", \\"position\\": \\"Engineer\\", \\"join_date\\": \\"2020-03-15\\"} ] ``` # Hints: - You may use Python\'s `datetime` module to handle date parsing and comparison. - The `sorted` function or `list.sort` method can be used with a custom sort key to sort the list of dictionaries by the join date.","solution":"from datetime import datetime def sort_employees_by_join_date(employees: list) -> list: Sorts a list of employee records based on their joining date in ascending order. Parameters: employees (list): A list of dictionaries, where each dictionary contains \'name\', \'position\', and \'join_date\' (in \'YYYY-MM-DD\' format). Returns: list: The list of employee records sorted by the \'join_date\' in ascending order. return sorted(employees, key=lambda x: datetime.strptime(x[\'join_date\'], \'%Y-%m-%d\'))"},{"question":"Create a function named `generate_random_walk` that simulates a 2D random walk and visualizes the path using matplotlib. The function should accept a single parameter `steps` which represents the number of steps to be taken in the random walk. If no value is provided, the default should be 1000 steps. In the random walk, each step should be randomly chosen from one of the four cardinal directions (up, down, left, right), and each step will have a constant length of 1 unit. The function should keep track of the position after each step, starting from the origin (0, 0), and plot the path taken by the random walk. The x and y coordinates of the path should be stored in two lists, which are then used to plot the walk using matplotlib\'s `plot` function. The origin should be marked with a different color or symbol to highlight the starting point, and the final position should be similarly distinguished. Ensure that the plot includes labels for the x and y axes and a title indicating the total number of steps. Finally, the plot should be displayed with a square aspect ratio using `plt.axis(\'equal\')`.","solution":"import matplotlib.pyplot as plt import random def generate_random_walk(steps=1000): Simulates a 2D random walk with the given number of steps and visualizes the path. Parameters: steps (int): The number of steps to take in the random walk. Defaults to 1000. # Possible directions for each step: (dx, dy) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Starting point x, y = 0, 0 x_coords = [x] y_coords = [y] for _ in range(steps): dx, dy = random.choice(directions) x += dx y += dy x_coords.append(x) y_coords.append(y) # Plotting the random walk plt.figure(figsize=(10, 10)) plt.plot(x_coords, y_coords, marker=\'o\', markersize=2, linestyle=\'-\') plt.scatter(0, 0, color=\'red\', label=\'Start (0, 0)\', zorder=5) # Starting point plt.scatter(x, y, color=\'blue\', label=f\'End ({x}, {y})\', zorder=5) # Ending point # Adding labels and title plt.xlabel(\'X Coordinate\') plt.ylabel(\'Y Coordinate\') plt.title(f\'2D Random Walk with {steps} Steps\') plt.legend() plt.axis(\'equal\') plt.grid(True) plt.show()"},{"question":"You are required to implement a function that determines the minimum cost of connecting all nodes in an undirected graph, using Prim\'s algorithm to find the Minimum Spanning Tree (MST). The graph is given in the form of an adjacency matrix that represents the weights of the edges between the nodes. Function Signature ```python def minimum_spanning_tree(cost: List[List[int]]) -> int: ``` Parameters - `cost`: A 2D list (a list of lists) where the element at `cost[i][j]` represents the weight of the edge between node `i` and node `j`. If there is no edge between two nodes, the weight will be represented by a large value (e.g., `float(\'inf\')`), and `cost[i][i]` will be 0 for all `i`. Behavior - The function should implement Prim\'s algorithm to compute the Minimum Spanning Tree of the graph and return the total cost of the MST. - It should handle edge cases such as disconnected graphs by raising an error or returning an appropriate value (e.g., `None`). Constraints - The number of nodes in the graph `N` will be between 2 and 1000. - The weight of the edges will be a non-negative integer or `float(\'inf\')`. - The graph will be undirected, which means `cost[i][j]` is equal to `cost[j][i]`. Example ```python cost = [ [0, 2, float(\'inf\'), 6, float(\'inf\')], [2, 0, 3, 8, 5], [float(\'inf\'), 3, 0, float(\'inf\'), 7], [6, 8, float(\'inf\'), 0, 9], [float(\'inf\'), 5, 7, 9, 0] ] # Expected Output # 16 ``` This output is the sum of the weights of the edges in the Minimum Spanning Tree.","solution":"from typing import List import heapq def minimum_spanning_tree(cost: List[List[int]]) -> int: Computes the minimum cost to connect all nodes in an undirected graph using Prim\'s algorithm to find the Minimum Spanning Tree (MST). N = len(cost) if N == 0: return 0 # To keep track of the edges included in the MST and their cost min_heap = [(0, 0)] # (cost, vertex) visited = [False] * N min_cost = 0 edges_used = 0 while min_heap and edges_used < N: min_edge_cost, u = heapq.heappop(min_heap) if visited[u]: # Ignore the vertex if it is already included in the MST continue min_cost += min_edge_cost visited[u] = True edges_used += 1 for v in range(N): if not visited[v] and cost[u][v] != float(\'inf\'): heapq.heappush(min_heap, (cost[u][v], v)) if edges_used != N: # Graph is disconnected return None return min_cost"},{"question":"You are tasked with writing a function named `anagram_pairs` that takes a list of strings and finds all pairs of indices where the two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. Function signature: ```python def anagram_pairs(words: list) -> list: ``` Parameters: - `words`: a list of strings representing the input words. Output: - A list of tuples where each tuple contains two indices (i, j) such that words[i] and words[j] are anagrams of each other, with i < j. Restrictions: - Do not use external libraries except for the `collections` module. Example: ```python anagram_pairs([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\"]) ``` Should produce: ```python [(0, 1), (0, 2), (1, 2), (3, 4)] ```","solution":"def anagram_pairs(words: list) -> list: from collections import Counter def is_anagram(word1, word2): return Counter(word1) == Counter(word2) pairs = [] for i in range(len(words)): for j in range(i + 1, len(words)): if is_anagram(words[i], words[j]): pairs.append((i, j)) return pairs"},{"question":"# Context Sorting algorithms are fundamental for data manipulation, and knowing how to select, implement, and understand their time complexity is crucial for efficient coding. A specific case of sorting is \\"Odd-Even Sort,\\" also known as Brick Sort, which is a parallel sorting algorithm similar to bubble sort. This algorithm is highly useful in parallel processing environments. # Problem Statement You are required to implement a function `odd_even_sort(arr)` that performs Odd-Even Sort on a given list of integers. The goal is to sort the list in non-decreasing order. This algorithm works by repeatedly performing two phases: Odd phase and Even phase. 1. **Odd Phase**: Compare and swap adjacent elements at odd indices. 2. **Even Phase**: Compare and swap adjacent elements at even indices. These phases are repeated until the array is sorted. # Function Signature ```python def odd_even_sort(arr: list) -> list: # Your code here ``` # Input - `arr`: A list of integers. # Output - The sorted list of integers in non-decreasing order. # Example ```python arr = [34, 2, 10, -9] result = odd_even_sort(arr) print(result) # Output: [-9, 2, 10, 34] arr = [5, 3, 1, 2, 6, 4] result = odd_even_sort(arr) print(result) # Output: [1, 2, 3, 4, 5, 6] ``` # Restrictions - You must repeatedly apply the odd and even phases until the list is sorted. - The function should handle empty arrays, single-element arrays, and arrays with multiple elements correctly. # Note - Make sure to handle edge cases such as arrays with duplicate elements, negative numbers, and already sorted arrays efficiently.","solution":"def odd_even_sort(arr): n = len(arr) is_sorted = False while not is_sorted: is_sorted = True # Perform the odd phase for i in range(1, n-1, 2): if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] is_sorted = False # Perform the even phase for i in range(0, n-1, 2): if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] is_sorted = False return arr"},{"question":"You need to implement a function to perform basic statistical analysis on student data. The function will take a DataFrame of student grades and calculate the average, minimum, and maximum grades for each subject. Your function should be named `analyze_grades`. Here are the inputs your function should accept: - `df`: A pandas DataFrame containing columns `student_id`, `subject`, and `grade`. Your function should return a DataFrame with the columns `subject`, `average_grade`, `min_grade`, and `max_grade`. **Function Signature:** ```python def analyze_grades(df): pass ``` **Requirements:** 1. Use pandas to calculate the average (`mean`), minimum, and maximum grades for each subject. 2. The resulting DataFrame should be sorted by `subject` in ascending order. # Example Usage: Given the following DataFrame: ```python import pandas as pd data = { \'student_id\': [1, 2, 3, 4, 1, 2, 3, 4], \'subject\': [\'Math\', \'Math\', \'Math\', \'Math\', \'English\', \'English\', \'English\', \'English\'], \'grade\': [85, 90, 88, 87, 78, 82, 85, 80] } df = pd.DataFrame(data) ``` Calling the function: ```python result = analyze_grades(df) print(result) ``` Should output: ```plaintext subject average_grade min_grade max_grade 0 English 81.25 78 85 1 Math 87.50 85 90 ``` This function will help you quickly get an overview of students\' performance in different subjects by providing their average, minimum, and maximum grades.","solution":"import pandas as pd def analyze_grades(df): Perform basic statistical analysis on student grades. Parameters: df (DataFrame): DataFrame containing \'student_id\', \'subject\', and \'grade\' columns. Returns: DataFrame: DataFrame containing \'subject\', \'average_grade\', \'min_grade\', \'max_grade\' columns. result = df.groupby(\'subject\').agg( average_grade=(\'grade\', \'mean\'), min_grade=(\'grade\', \'min\'), max_grade=(\'grade\', \'max\') ).reset_index() result = result.sort_values(\'subject\').reset_index(drop=True) return result"},{"question":"You are required to write a function called `find_largest_anagram_group(words)` that takes a list of strings and returns the largest group of anagram strings. If there are multiple groups with the same maximum size, return any one of them. An anagram is a word formed by rearranging the letters of another, such as \'listen\' and \'silent\'. In this problem, two words are considered anagrams if they contain the same characters in the same quantities. Specifically, your function should: 1. Group the words that are anagrams of each other. 2. Identify the largest group of anagrams. 3. Return the largest group as a list of strings. Your function should follow the format: ```python def find_largest_anagram_group(words): Given a list of words, this function finds and returns the largest group of anagram words. Args: words (list of str): The list of words to group. Returns: list of str: The largest group of anagram words. # Your implementation here ``` # Example: ```python words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\", \\"rat\\", \\"tar\\", \\"art\\"] result = find_largest_anagram_group(words) ``` Possible return values could be: ```python [\\"listen\\", \\"silent\\", \\"enlist\\"] ``` or ```python [\\"google\\", \\"gooegl\\"] ``` Since both groups have the same size (3), any one of them would be an acceptable result.","solution":"from collections import defaultdict def find_largest_anagram_group(words): Given a list of words, this function finds and returns the largest group of anagram words. Args: words (list of str): The list of words to group. Returns: list of str: The largest group of anagram words. # Dictionary to store grouped anagrams anagrams = defaultdict(list) # Group the words by sorted tuple of characters for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Find the largest group of anagrams largest_group = [] for group in anagrams.values(): if len(group) > len(largest_group): largest_group = group return largest_group"},{"question":"You are required to write a function named `generate_report` using the pandas library. This function will read sales data from a CSV file, perform various transformations, and generate a summary report based on various criteria. **Function Signature:** ```python def generate_report(filename: str, category: str, strftime_format: str) -> pd.DataFrame: pass ``` **Parameters:** - `filename` (str): The name of the CSV file containing the sales data. - `category` (str): The name of the product category to filter by. If `\'all\'`, apply no filter and consider all categories. - `strftime_format` (str): The date format to be used for grouping the sales data. **Returns:** - `report` (pd.DataFrame): A DataFrame containing summary statistics for the filtered data, grouped by the specified date format. **Instructions:** 1. Use the pandas library to read the specified CSV file. 2. Convert the \'Sale Date\' column to datetime objects. 3. Filter the DataFrame based on the specified `category` if it\'s not `\'all\'`. 4. Group the sales data based on the given `strftime_format`. 5. Calculate and include columns for total sales amount, average sale amount, total number of sales, and maximum single sale amount for each group. 6. Return the summary report DataFrame. The CSV file is expected to have columns such as \'Sale Date\', \'Product\', \'Category\', \'Amount\'. **Example:** ```python report_df = generate_report(\'sales_data.csv\', \'electronics\', \'%Y-%m\') ``` This should return a DataFrame grouped by year-month, filtered for electronics category, with summary statistics for total sales amount, average sale amount, total number of sales, and maximum single sale amount.","solution":"import pandas as pd def generate_report(filename: str, category: str, strftime_format: str) -> pd.DataFrame: # Read the CSV file df = pd.read_csv(filename) # Convert \'Sale Date\' to datetime df[\'Sale Date\'] = pd.to_datetime(df[\'Sale Date\']) # Filter by category if it\'s not \'all\' if category != \'all\': df = df[df[\'Category\'] == category] # Group by the specified date format df[\'Group Date\'] = df[\'Sale Date\'].dt.strftime(strftime_format) grouped = df.groupby(\'Group Date\') # Calculate summary statistics summary = grouped.agg( total_sales_amount=pd.NamedAgg(column=\'Amount\', aggfunc=\'sum\'), average_sale_amount=pd.NamedAgg(column=\'Amount\', aggfunc=\'mean\'), total_number_of_sales=pd.NamedAgg(column=\'Amount\', aggfunc=\'size\'), max_single_sale_amount=pd.NamedAgg(column=\'Amount\', aggfunc=\'max\') ).reset_index() return summary"},{"question":"You are tasked with creating a function `is_vowel_sequence_consonant_free(answer)` to validate a given string that should consist only of vowels to ensure it is free from consonants. Your function will parse the input string and check whether all characters exclusively belong to the set of English vowels (a, e, i, o, u). Your function should: 1. Accept a string `answer` as its input. 2. Return \'Valid\' if the input string contains only the characters a, e, i, o, u (both lowercase and uppercase). 3. Return \'Invalid\' if the input string contains any consonants or non-vowel characters. # Function Signature ```python def is_vowel_sequence_consonant_free(answer): # Your code goes here ``` # Example Usage ```python # Valid string consisting only of vowels print(is_vowel_sequence_consonant_free(\\"aeiouAEIOU\\")) # Should print \'Valid\' # String containing consonants print(is_vowel_sequence_consonant_free(\\"hello\\")) # Should print \'Invalid\' # String with non-alphabet characters print(is_vowel_sequence_consonant_free(\\"a1e2i3o4u\\")) # Should print \'Invalid\' # Empty string (considered valid since there are no consonants) print(is_vowel_sequence_consonant_free(\\"\\")) # Should print \'Valid\' ``` # Requirements - You must check the provided input string character by character. - Both lowercase and uppercase vowels should be considered valid. - The function must handle edge cases, such as empty strings or strings with spaces and special characters. - The function should be case-insensitive.","solution":"def is_vowel_sequence_consonant_free(answer): Returns \'Valid\' if the input string contains only vowels (a, e, i, o, u) in both lowercase and uppercase. Returns \'Invalid\' otherwise. vowels = set(\\"aeiouAEIOU\\") for char in answer: if char not in vowels: return \'Invalid\' return \'Valid\'"},{"question":"You are asked to develop a text search utility that scans through a list of documents and returns the count of documents that contain a given search term. Your task is to write a function, `count_documents_containing_term(docs: List[str], term: str) -> int`, that takes a list of documents and a search term as input, and returns the number of documents that contain the search term (case-insensitive). # Input: - `docs`: A list of strings where each string represents a document. - `term`: A string representing the search term. # Output: - An integer representing the number of documents that contain the search term at least once. # Example: Input: ```python docs = [ \\"The quick brown fox jumps over the lazy dog\\", \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit\\", \\"The Quick Brown Fox\\", \\"Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\\" ] term = \\"quick\\" ``` Output: ```python 2 ``` # Requirements: - The search should be case-insensitive. - You must handle any punctuation and whitespace correctly, treating them as delimiters. - The function should count the documents even if the term appears multiple times in a single document, as long as it appears at least once. # Constraints: - `1 <= len(docs) <= 1000`, where `len(docs)` is the length of the `docs` list. - `1 <= len(term) <= 100`, where `len(term)` is the length of the search term. - Each document string in `docs` will have a maximum length of `1000` characters.","solution":"def count_documents_containing_term(docs, term): Returns the number of documents that contain the search term at least once. The search is case-insensitive. Parameters: docs (List[str]): List of document strings. term (str): The search term. Returns: int: The count of documents containing the search term. term_lower = term.lower() count = 0 for doc in docs: if term_lower in doc.lower(): count += 1 return count"},{"question":"You are tasked with implementing a function that finds the maximum sum of non-adjacent elements in an array. The function should return the highest possible sum where no two chosen elements are side by side in the original array. Your goal is to implement the function `max_non_adjacent_sum(arr: List[int]) -> int` that: 1. Takes one parameter: - `arr` (List[int]): A list of integers representing the array. 2. Returns an integer representing the maximum sum of non-adjacent elements. **Constraints:** 1. The array length will be between `1` and `10^4`. 2. Each element in the array will be between `-10^4` and `10^4`. 3. The given array may contain both positive and negative integers. Here’s an example usage and expected output: ```python print(max_non_adjacent_sum([3, 2, 5, 10, 7])) # Should print 15 (3 + 10 + 2 or 3 + 10 + 7) print(max_non_adjacent_sum([3, 2, 7, 10])) # Should print 13 (3 + 10) print(max_non_adjacent_sum([-2, 1, 3, -4, 5])) # Should print 8 (1 + 5 + 3) ``` # Solution Approach: - Iterate through the array while maintaining two variables to store the max sums: 1. `include` which includes the current element. 2. `exclude` which excludes the current element. - For every element in the array, update the `include` and `exclude` values. ```python from typing import List def max_non_adjacent_sum(arr: List[int]) -> int: if not arr: return 0 include, exclude = 0, 0 for num in arr: new_exclude = max(exclude, include) include = exclude + num exclude = new_exclude return max(include, exclude) # Example usage print(max_non_adjacent_sum([3, 2, 5, 10, 7])) # Should print 15 print(max_non_adjacent_sum([3, 2, 7, 10])) # Should print 13 print(max_non_adjacent_sum([-2, 1, 3, -4, 5])) # Should print 8 ```","solution":"from typing import List def max_non_adjacent_sum(arr: List[int]) -> int: if not arr: return 0 include, exclude = 0, 0 for num in arr: new_exclude = max(exclude, include) include = exclude + num exclude = new_exclude return max(include, exclude)"},{"question":"You are tasked with writing a function in Python that calculates the median of a list of numbers, excluding any numbers that fall outside a specified inclusive range `[low, high]`. The function should return the median of the resulting filtered list. **Function Name:** ```python def calculateFilteredMedian(numbers, low, high): ``` **Parameters:** 1. `numbers` (List[int/float]): A list of integers or floats. 2. `low` (int/float): The lower bound of the range. 3. `high` (int/float): The upper bound of the range. **Description:** - Filter the list `numbers` by including only those elements that are greater than or equal to `low` and less than or equal to `high`. - If the resulting filtered list is empty, return `None`. - Calculate the median of the resulting filtered list: - If the number of elements in the filtered list is odd, the median is the middle element. - If the number of elements in the filtered list is even, the median is the average of the two middle elements. - Return the median value as a float. **Requirements:** - You may assume that the input list `numbers` is not empty. - Use Python\'s built-in sorting and list functionalities. - Do not use any third-party libraries for this task. **Example:** ```python numbers = [1, 3, 4, 2, 6, 8, 7, 5, 9] low = 2 high = 7 calculateFilteredMedian(numbers, low, high) ``` The filtered list would be `[3, 4, 2, 6, 7, 5]`. The sorted filtered list would be `[2, 3, 4, 5, 6, 7]`. Since the number of elements is 6 (even), the median is the average of the 3rd and 4th elements: `(4 + 5) / 2 = 4.5`. Output: `4.5`","solution":"def calculateFilteredMedian(numbers, low, high): Calculate the median of the list of numbers after filtering out values outside the inclusive range [low, high]. Parameters: numbers (List[int/float]): The list of numbers. low (int/float): The lower bound of the range. high (int/float): The upper bound of the range. Returns: float: The median of the filtered numbers list, or None if the list is empty. filtered_numbers = [num for num in numbers if low <= num <= high] if not filtered_numbers: return None filtered_numbers.sort() n = len(filtered_numbers) if n % 2 == 1: return float(filtered_numbers[n // 2]) else: mid1 = n // 2 - 1 mid2 = n // 2 return (filtered_numbers[mid1] + filtered_numbers[mid2]) / 2.0"},{"question":"You are tasked with creating a function that normalizes pixel values of grayscale images and writes the normalized data to a new CSV file. The function `normalize_and_save_images` should read a CSV file containing pixel values of multiple grayscale images, normalize these values, and save the result to a new CSV file. The provided dataset is in CSV format where each row represents an image with 784 columns (28x28 pixels) of grayscale values ranging from 0 to 255. You need to normalize these pixel values to be in the range 0 to 1. To achieve this, follow these steps in your function: 1. Read the CSV file named \'data/images.csv\' using `pandas.read_csv`. 2. Normalize the pixel values so that they fall within the range [0, 1]. 3. Save the normalized data to a new CSV file named \'data/normalized_images.csv\'. Function signature: ```python def normalize_and_save_images() -> None: pass ``` Requirements: - Your function must use `pandas.read_csv` and `pandas.to_csv`. - Ensure that the normalized data retains the same shape as the original. - The function should not return any values but should create a new CSV file with the normalized pixel values.","solution":"import pandas as pd def normalize_and_save_images() -> None: # Step 1: Read the CSV file named \'data/images.csv\' df = pd.read_csv(\'data/images.csv\') # Step 2: Normalize the values so that they are in the range [0, 1] df_normalized = df / 255.0 # Step 3: Save the normalized data to a new CSV file named \'data/normalized_images.csv\' df_normalized.to_csv(\'data/normalized_images.csv\', index=False)"},{"question":"You are required to implement a function, `invert_binary_tree`, that inverts a binary tree. Inversion of a binary tree means swapping the left and right children of every node in the tree. **Function Signature:** ```python def invert_binary_tree(root: TreeNode) -> TreeNode: pass ``` **Parameters:** - `root`: The root node of the binary tree to be inverted. **Return:** - The function should return the root node of the inverted binary tree. **Example:** ```python # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Example usage: # Original tree: # 4 # / # 2 7 # / / # 1 3 6 9 root = TreeNode(4) root.left = TreeNode(2) root.right = TreeNode(7) root.left.left = TreeNode(1) root.left.right = TreeNode(3) root.right.left = TreeNode(6) root.right.right = TreeNode(9) # Inverted tree: # 4 # / # 7 2 # / / # 9 6 3 1 inverted_root = invert_binary_tree(root) # The structure of inverted_root should match that of the inverted tree shown above. ``` **Requirements:** - You must handle the edge case of an empty tree (`root` is `None`). - Ensure that your solution efficiently handles the inversion process.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invert_binary_tree(root: TreeNode) -> TreeNode: Inverts a binary tree by swapping left and right children of every node. Args: root (TreeNode): The root node of the binary tree to be inverted. Returns: TreeNode: The root node of the inverted binary tree. if root is None: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recur for the left and right subtree invert_binary_tree(root.left) invert_binary_tree(root.right) return root"},{"question":"--- You are tasked with developing software for a logistics company that deals with truck delivery routes. The company wants to optimize the delivery schedule by calculating the total distance covered by trucks traveling between a series of delivery points. Each delivery point is represented as a coordinate on a 2D plane. Write a function named `calculate_total_distance` that takes a list of tuples as input, where each tuple represents the `(x, y)` coordinate of a delivery point in the order they are visited. The function should return the total distance traveled, where the distance between two points `(x1, y1)` and `(x2, y2)` is calculated using the Euclidean distance formula: [ text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Use the `math.sqrt` function to calculate the square root, and the `math.pow` function to compute the power. **Example Usage:** ```python import math def calculate_total_distance(points): total_distance = 0.0 for i in range(1, len(points)): x1, y1 = points[i-1] x2, y2 = points[i] distance = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)) total_distance += distance return total_distance # Example test case points = [(0, 0), (3, 4), (6, 8)] print(calculate_total_distance(points)) # Example output: 10.0 ```","solution":"import math def calculate_total_distance(points): Calculates the total Euclidean distance traveled between a series of delivery points. Args: points (list of tuples): List of (x, y) coordinates representing the delivery points. Returns: float: Total distance traveled. total_distance = 0.0 for i in range(1, len(points)): x1, y1 = points[i - 1] x2, y2 = points[i] distance = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)) total_distance += distance return total_distance"},{"question":"Given the popularity of certain online social media platforms, there are numerous posts being made at all times. You are tasked to simulate and analyze the trending topics on a particular platform. The approach involves gathering and categorizing posts based on hashtags, then determining the top trending hashtags within a specific time frame using `collections.Counter`. Your task is to write a function `top_trending_hashtags(posts, timeframe, top_n)`. This function should: 1. Extract hashtags from each post. 2. Categorize and count the hashtags based on the provided timeframe. 3. Determine the top trending hashtags within the given timeframe by their frequency. 4. Use `collections.Counter` to count and manage the frequency of each hashtag. # Function Signature ```python def top_trending_hashtags(posts, timeframe, top_n): pass ``` # Parameters - `posts` (list): A list of dictionaries where each dictionary represents a post, containing `\'timestamp\'` (str in \'YYYY-MM-DD HH:MM:SS\' format), and `\'content\'` (str representing the post content). - `timeframe` (tuple): A tuple containing two strings representing the start and end timestamps (inclusive) in the format \'YYYY-MM-DD HH:MM:SS\'. - `top_n` (int): The number of top trending hashtags to return. # Returns - `trending_hashtags` (list): A list of tuples where each tuple contains a hashtag (str) and its frequency (int), representing the top trending hashtags within the specified timeframe. # Example ```python posts = [ {\'timestamp\': \'2023-10-01 08:30:00\', \'content\': \'Happy #Birthday to me! #celebration\'}, {\'timestamp\': \'2023-10-01 09:00:00\', \'content\': \'The weather is amazing today! #sunny #beautiful\'}, {\'timestamp\': \'2023-10-01 10:00:00\', \'content\': \'Just had a great workout session. #fitness #health\'}, {\'timestamp\': \'2023-10-01 15:00:00\', \'content\': \'Had a wonderful lunch at the new restaurant. #foodie #happy\'}, ] timeframe = (\'2023-10-01 08:00:00\', \'2023-10-01 12:00:00\') top_n = 3 print(top_trending_hashtags(posts, timeframe, top_n)) ``` # Example Output ```python [(\'#birthday\', 1), (\'#celebration\', 1), (\'#sunny\', 1)] ``` # Constraints 1. You must use the `collections.Counter` to handle the counting of hashtags. 2. Extract hashtags from the post content. Hashtags start with `#` and consist of alphanumeric characters. 3. Consider only posts within the specified timeframe. 4. If there are fewer than `top_n` hashtags within the timeframe, return all unique hashtags found sorted by frequency and then alphabetically.","solution":"import re from collections import Counter from datetime import datetime def top_trending_hashtags(posts, timeframe, top_n): def extract_hashtags(content): # Extract hashtags using regex return re.findall(r\'#w+\', content) start_time = datetime.strptime(timeframe[0], \'%Y-%m-%d %H:%M:%S\') end_time = datetime.strptime(timeframe[1], \'%Y-%m-%d %H:%M:%S\') hashtag_counter = Counter() for post in posts: post_time = datetime.strptime(post[\'timestamp\'], \'%Y-%m-%d %H:%M:%S\') if start_time <= post_time <= end_time: hashtags = extract_hashtags(post[\'content\']) hashtag_counter.update(hashtags) most_common_hashtags = hashtag_counter.most_common(top_n) return most_common_hashtags"},{"question":"In this problem, you need to create a function that generates a sequence using a Markov Chain text generator. A Markov Chain text generator predicts the next character in a sequence based on the preceding characters. Your task is to implement the function `generate_text` which utilizes a Markov Chain to produce a sequence of a given length from some initial text and a state dictionary. The state dictionary, `state_dict`, is given and contains mappings of input sequences to lists containing possible next characters and their probabilities. For example, given `state_dict = {\'he\': [(\'l\', 0.5), (\'y\', 0.5)]}`, for the sequence `\'he\'`, the next character can be `\'l\'` with a probability of 0.5 and `\'y\'` with a probability of 0.5. Steps to implement the function: 1. Begin with the given `initial_sequence`. 2. Use the `state_dict` to predict the next character based on the most recent sequence. 3. Append this next character to the sequence. 4. Slide the window forward by one character and repeat until the desired `length` of the output text is achieved. You need to implement the function `generate_text(initial_sequence, state_dict, length)` that returns the generated sequence of the specified length. Here are the function signature and description: ```python import random def generate_text(initial_sequence, state_dict, length): Generates a sequence of text using a Markov Chain. Parameters: initial_sequence (str): The starting sequence of text. state_dict (dict): Dictionary where keys are sequences and values are lists of tuples. Each tuple contains a possible next character and its respective probability. length (int): The desired length of the generated text. Returns: str: The generated text of the specified length. generated_text = initial_sequence while len(generated_text) < length: current_sequence = generated_text[-len(initial_sequence):] if current_sequence in state_dict: next_char = random.choices( [char for char, prob in state_dict[current_sequence]], [prob for char, prob in state_dict[current_sequence]] )[0] else: break generated_text += next_char return generated_text ``` Make sure to handle cases where the sequence is not in the `state_dict` and ensure that the resulting text is of the given length. The `random.choices` function should be used to select the next character based on the provided probabilities.","solution":"import random def generate_text(initial_sequence, state_dict, length): Generates a sequence of text using a Markov Chain. Parameters: initial_sequence (str): The starting sequence of text. state_dict (dict): Dictionary where keys are sequences and values are lists of tuples. Each tuple contains a possible next character and its respective probability. length (int): The desired length of the generated text. Returns: str: The generated text of the specified length. generated_text = initial_sequence while len(generated_text) < length: current_sequence = generated_text[-len(initial_sequence):] if current_sequence in state_dict: next_char = random.choices( [char for char, prob in state_dict[current_sequence]], [prob for char, prob in state_dict[current_sequence]] )[0] else: break generated_text += next_char return generated_text"},{"question":"``` Write a function that takes a string as an input and returns a dictionary with the word count of each unique word in the string. The function should ignore case, punctuation, and handle multiple spaces between words. It should log the process of counting to a file named \'word_count.log\' in a specified log directory with logging level INFO. The log file is created by the function or overwritten if already exists. The function should handle missing directories and non-string inputs gracefully. The function should raise the exception for: 1. FileNotFoundError: If the specified log directory does not exist or is not writable. 2. ValueError: If the input is not a string. Your function should start with: ``` import logging import os import string def word_count(input_string, log_dir): ```","solution":"import logging import os import string def word_count(input_string, log_dir): Takes a string input and returns a dictionary with the word count of each unique word. Logs the process of counting to a log file in the specified directory. Parameters: input_string (str): The string to be processed. log_dir (str): The directory where log file will be saved. Returns: dict: A dictionary with words as keys and their counts as values. Raises: FileNotFoundError: If the specified log directory does not exist or is not writable. ValueError: If the input is not a string. # Check if the input is a string if not isinstance(input_string, str): raise ValueError(\\"Input must be a string.\\") # Check if log directory exists and is writable if not os.path.exists(log_dir) or not os.access(log_dir, os.W_OK): raise FileNotFoundError(f\\"Log directory {log_dir} does not exist or is not writable.\\") log_file = os.path.join(log_dir, \'word_count.log\') # Configure logging logging.basicConfig(filename=log_file, level=logging.INFO, filemode=\'w\') logger = logging.getLogger() # Normalize the input string input_string = input_string.lower() input_string = input_string.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split the string into words words = input_string.split() word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 # Log the word counts for word, count in word_counts.items(): logger.info(f\\"Word: {word}, Count: {count}\\") return word_counts"},{"question":"You are required to write a Python function named `top_selling_books` that interacts with an online book store API to fetch data about best-selling books. The function should accept a single argument, `category`, which is a string representing the genre or category of books the user is interested in. Your task is to: 1. Formulate a request to the book store API based on the provided category. 2. Parse the JSON response correctly. 3. Extract information about the top 5 best-selling books in the specified category and return it as a list of dictionaries. **Function Signature:** ```python def top_selling_books(category: str) -> list: ``` # Instructions: - Use the `requests` library to make an HTTP GET request to the book store API. - Parse the JSON response properly. - Each book dictionary should contain the following keys: `title`, `author`, `price`, and `rating`. - Ensure only the top 5 best-selling books are included in your list, according to their sales rank. **Example:** ```python books = top_selling_books(\\"fiction\\") # Expected Output (example): # [ # {\'title\': \'The Midnight Library\', \'author\': \'Matt Haig\', \'price\': 15.99, \'rating\': 4.5}, # {\'title\': \'The Invisible Life of Addie LaRue\', \'author\': \'V.E. Schwab\', \'price\': 13.99, \'rating\': 4.6}, # {\'title\': \'Where the Crawdads Sing\', \'author\': \'Delia Owens\', \'price\': 9.99, \'rating\': 4.8}, # {\'title\': \'The Vanishing Half\', \'author\': \'Brit Bennett\', \'price\': 16.99, \'rating\': 4.3}, # {\'title\': \'The Silent Patient\', \'author\': \'Alex Michaelides\', \'price\': 12.99, \'rating\': 4.4}, # ... # ] ``` # Additional Information: - Assume the book store API endpoint is `https://api.bookstore.com/top_selling`. - Incorporate the category into the request URL by appending `?category=<category>` (e.g., `https://api.bookstore.com/top_selling?category=fiction`). - Handle potential errors that may arise while making the API request or parsing the response.","solution":"import requests def top_selling_books(category: str) -> list: Fetch the top 5 best-selling books from the specified category. Args: category (str): The genre or category of books. Returns: list: A list of dictionaries containing book details. url = f\'https://api.bookstore.com/top_selling?category={category}\' try: response = requests.get(url) response.raise_for_status() # Raise an exception for HTTP errors data = response.json() # Extract the top 5 books top_books = [] for book in data[\'books\'][:5]: top_books.append({ \'title\': book[\'title\'], \'author\': book[\'author\'], \'price\': book[\'price\'], \'rating\': book[\'rating\'] }) return top_books except requests.exceptions.RequestException as e: print(f\\"HTTP request failed: {e}\\") return [] except KeyError as e: print(f\\"Incorrect response format: {e}\\") return []"},{"question":"You are given a list of transactions, where each transaction is represented by a tuple containing the transaction ID, transaction date, and transaction amount. It is required to group these transactions by the date and calculate the total transaction amount for each date. Write a function named `group_transactions_by_date` that takes in a list of tuples `transactions`, groups the transactions by date, and returns a dictionary where keys are dates and values are the total transaction amounts for those dates. # Input - `transactions`: A list of tuples `[(transaction_id, transaction_date, transaction_amount), ...]` where: - `transaction_id` is a unique identifier for the transaction (string). - `transaction_date` is the date of the transaction (string in the format \'YYYY-MM-DD\'). - `transaction_amount` is the amount of the transaction (float). # Output - A dictionary where keys are the transaction dates (`transaction_date`) and values are the total transaction amounts for each date (float). # Function Signature ```python def group_transactions_by_date(transactions): pass ``` # Example ```python transactions = [ (\\"001\\", \\"2023-01-15\\", 150.50), (\\"002\\", \\"2023-01-15\\", 200.00), (\\"003\\", \\"2023-01-16\\", 345.75), (\\"004\\", \\"2023-01-16\\", 150.25), (\\"005\\", \\"2023-01-17\\", 500.00), ] totals_by_date = group_transactions_by_date(transactions) print(\\"Total Transactions by Date:\\", totals_by_date) ``` # Expected Output ```python Total Transactions by Date: {\'2023-01-15\': 350.5, \'2023-01-16\': 496.0, \'2023-01-17\': 500.0} ``` # Note - The function should handle transactions spanning multiple dates correctly. - Ensure that the sums of transaction amounts are calculated precisely without floating-point errors.","solution":"def group_transactions_by_date(transactions): Groups the transactions by date and calculates the total transaction amount for each date. :param transactions: List of tuples (transaction_id, transaction_date, transaction_amount) :return: Dictionary with dates as keys and total transaction amounts as values totals_by_date = {} for transaction_id, transaction_date, transaction_amount in transactions: if transaction_date in totals_by_date: totals_by_date[transaction_date] += transaction_amount else: totals_by_date[transaction_date] = transaction_amount return totals_by_date"},{"question":"Design a function that processes a list of student grades across multiple subjects and calculates each student\'s average grade. It also identifies the top-performing student with the highest average grade. You will use the `collections.defaultdict` to organize the data. # Requirements 1. Define a function: ```python def student_grades(records): pass ``` 2. The `student_grades` function should: - Accept a list of tuples, where each tuple contains a student\'s name, subject, and grade. - Use `collections.defaultdict` to store the grades by student names. - Calculate the average grade for each student and display it in the format `Student: AverageGrade`. - Identify the student with the highest average grade and print their name and average grade in the format `Top performer: StudentName with AverageGrade`. 3. You should consider multiple subjects and manage cases where not all students have grades in all subjects. # Function Signature ```python def student_grades(records): pass ``` # Example Usage ```python records = [ (\\"Alice\\", \\"Math\\", 90), (\\"Bob\\", \\"Math\\", 85), (\\"Alice\\", \\"Science\\", 95), (\\"Bob\\", \\"Science\\", 80), (\\"Alice\\", \\"English\\", 88), (\\"Bob\\", \\"English\\", 92) ] student_grades(records) ``` # Expected Output ``` Alice: 91.0 Bob: 85.66666666666667 Top performer: Alice with 91.0 ```","solution":"from collections import defaultdict def student_grades(records): grades = defaultdict(list) # Collect grades for each student for name, subject, grade in records: grades[name].append(grade) # Calculate average grades and identify top performer averages = {} top_student = None high_avg = -1 for student, grades_list in grades.items(): avg = sum(grades_list) / len(grades_list) averages[student] = avg print(f\\"{student}: {avg}\\") if avg > high_avg: high_avg = avg top_student = student # Print the top performer if top_student: print(f\\"Top performer: {top_student} with {high_avg}\\") return averages, top_student, high_avg"},{"question":"You are asked to implement a function that calculates a list of top N keywords ranked by their frequency in a given text. The function should preprocess the text by converting it to lowercase, removing punctuation, and splitting it into words. Finally, it should return the top N keywords in decreasing order of their frequency. Function Signature ```python def get_top_keywords(text: str, N: int) -> list: This function calculates the top N keywords by their frequency in the given text. Parameters: - text (str): The input text to analyze. - N (int): The number of top keywords to return. Returns: - list: A list of top N keywords ranked by their frequency. ``` # Requirements: 1. **Text Preprocessing:** Convert the text to lowercase, remove punctuation and special characters, and split it into words. 2. **Keyword Frequency Calculation:** Calculate the frequency of each word in the processed text. 3. **Return Top N Keywords:** Return a list of the top N keywords ordered by their frequency in descending order. In case of ties, words with the same frequency can appear in any order. # Example ```python text = \\"Hello, world! This is a test. This test is only a test.\\" top_keywords = get_top_keywords(text, 3) print(top_keywords) # Output might be: [\'test\', \'this\', \'a\'] ``` # Explanation 1. Preprocess the text: Convert the input text to lowercase and remove punctuation. 2. Split the text into words. 3. Calculate the frequency of each word. 4. Sort words by their frequency in descending order and return the top N keywords. # Libraries No special libraries are required for this exercise. You can accomplish the task using the standard Python library by utilizing the `collections.Counter` class and built-in string methods. Here is the final implementation based on the requirements: ```python import re from collections import Counter def get_top_keywords(text: str, N: int) -> list: # Convert to lowercase text = text.lower() # Remove punctuation using regular expression text = re.sub(r\'[^ws]\', \'\', text) # Split text into words words = text.split() # Calculate frequency of each word word_counts = Counter(words) # Get the top N words sorted by their frequency top_keywords = [word for word, _ in word_counts.most_common(N)] return top_keywords ```","solution":"import re from collections import Counter def get_top_keywords(text: str, N: int) -> list: This function calculates the top N keywords by their frequency in the given text. Parameters: - text (str): The input text to analyze. - N (int): The number of top keywords to return. Returns: - list: A list of top N keywords ranked by their frequency. # Convert to lowercase text = text.lower() # Remove punctuation using regular expression text = re.sub(r\'[^ws]\', \'\', text) # Split text into words words = text.split() # Calculate frequency of each word word_counts = Counter(words) # Get the top N words sorted by their frequency top_keywords = [word for word, _ in word_counts.most_common(N)] return top_keywords"},{"question":"You are given a 2D grid with `m` rows and `n` columns, representing a board where each cell contains a letter. The task is to check if a given word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Implement a function `find_word_in_grid(board: List[List[str]], word: str) -> bool` that: - Takes a 2D board and a word as inputs. - Returns `True` if the word exists in the grid, `False` otherwise. Constraints: 1. `1 <= m, n <= 200` 2. The board contains only lowercase English letters. 3. The word to search for is a non-empty string consisting of lowercase English letters and is at most 10^3 characters long. Example: ```python board = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word1 = \\"ABCCED\\" word2 = \\"SEE\\" word3 = \\"ABCB\\" print(find_word_in_grid(board, word1)) # Output: True print(find_word_in_grid(board, word2)) # Output: True print(find_word_in_grid(board, word3)) # Output: False ``` Hints: - Use backtracking to explore each cell in the grid. - Consider writing a helper function to explore the word from a given starting cell. - Implement bounds checking to ensure that exploration does not go out of the grid.","solution":"def find_word_in_grid(board, word): def dfs(board, word, i, j, k): if not (0 <= i < len(board)) or not (0 <= j < len(board[0])) or board[i][j] != word[k]: return False if k == len(word) - 1: return True tmp, board[i][j] = board[i][j], \'/\' # mark the cell as used res = (dfs(board, word, i - 1, j, k + 1) or dfs(board, word, i + 1, j, k + 1) or dfs(board, word, i, j - 1, k + 1) or dfs(board, word, i, j + 1, k + 1)) board[i][j] = tmp # restore the cell return res for i in range(len(board)): for j in range(len(board[0])): if dfs(board, word, i, j, 0): return True return False"},{"question":"You have been asked to implement a function called `get_unique_characters` that takes a list of strings and returns a dictionary. This dictionary should have each string as a key and the list of its unique characters as the value. The unique characters should be sorted in alphabetical order. # Detailed Requirements: 1. Implement the function `get_unique_characters(strings: List[str]) -> Dict[str, List[str]]` - **Parameters:** - `strings` (List[str]): A list of strings. - **Returns:** - A dictionary where each key is a string from the input list, and the corresponding value is a list of unique characters in that string, sorted alphabetically. 2. The function should create a dictionary with the provided strings as keys. 3. For each string, identify the unique characters and sort them in alphabetical order. 4. Store the sorted list of unique characters as the value corresponding to the string key. # Example: ```python assert get_unique_characters([\\"hello\\", \\"world\\"]) == { \\"hello\\": [\\"e\\", \\"h\\", \\"l\\", \\"o\\"], \\"world\\": [\\"d\\", \\"l\\", \\"o\\", \\"r\\", \\"w\\"], } assert get_unique_characters([\\"aaa\\", \\"bbb\\", \\"ccc\\"]) == { \\"aaa\\": [\\"a\\"], \\"bbb\\": [\\"b\\"], \\"ccc\\": [\\"c\\"], } ``` # Constraints: - All strings in the input list contain only lowercase English letters. - The input list will have at least one string and at most 100 strings. - Each string will have at least one character and at most 100 characters.","solution":"from typing import List, Dict def get_unique_characters(strings: List[str]) -> Dict[str, List[str]]: Returns a dictionary where each key is a string from the input list, and the corresponding value is a list of unique characters in that string, sorted alphabetically. result = {} for string in strings: unique_chars = sorted(set(string)) result[string] = unique_chars return result"},{"question":"Write a function that takes a DataFrame and a column name and creates a box plot with the specified column\'s data. Incorporate the following features: 1. Validates that the input is a non-empty DataFrame and that the specified column exists and is numerical. 2. Creates a box plot using Matplotlib. 3. Displays the statistical summary (minimum, first quartile (Q1), median, third quartile (Q3), and maximum) on the plot. 4. Returns the Matplotlib Figure and Axes objects. The function should output: tuple: A tuple containing: - fig (Figure): A Matplotlib Figure object with the box plot. - ax (Axes): A Matplotlib Axes object representing the plot. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def create_boxplot(df, column): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def create_boxplot(df, column): Creates a box plot for the specified column of the DataFrame. Parameters: df (pandas.DataFrame): Input DataFrame. column (str): The column name for which the box plot should be created. Returns: tuple: A tuple containing: - fig (Figure): A Matplotlib Figure object with the box plot. - ax (Axes): A Matplotlib Axes object representing the plot. Raises: ValueError: If the DataFrame is empty, the column does not exist, or if the column is not numerical. if df.empty: raise ValueError(\\"The DataFrame is empty.\\") if column not in df.columns: raise ValueError(f\\"The specified column \'{column}\' does not exist in the DataFrame.\\") if not pd.api.types.is_numeric_dtype(df[column]): raise ValueError(f\\"The specified column \'{column}\' is not numerical.\\") # Creating the box plot fig, ax = plt.subplots() boxplot = ax.boxplot(df[column], patch_artist=True, vert=True) # Getting the statistical summary summary = df[column].describe() Q1 = summary[\'25%\'] median = summary[\'50%\'] Q3 = summary[\'75%\'] minimum = summary[\'min\'] maximum = summary[\'max\'] # Displaying the statistical summary on the plot ax.text(1.1, minimum, f\\"Min: {minimum:.2f}\\") ax.text(1.1, Q1, f\\"Q1: {Q1:.2f}\\") ax.text(1.1, median, f\\"Median: {median:.2f}\\") ax.text(1.1, Q3, f\\"Q3: {Q3:.2f}\\") ax.text(1.1, maximum, f\\"Max: {maximum:.2f}\\") ax.set_title(f\\"Box plot for \'{column}\'\\") ax.set_xlabel(column) ax.set_ylabel(\'Values\') return fig, ax"},{"question":"You are given a directed acyclic graph (DAG) defined by an adjacency list. Your task is to write a function `find_longest_path` that finds the longest path in the graph. A path is defined as a sequence of vertices connected by directed edges. The longest path is the one with the maximum number of edges. If there are multiple paths of the same maximum length, return any one of them. **Function Signature**: ```python def find_longest_path(adj_list: dict) -> list: pass ``` **Input**: - `adj_list`: A dictionary where keys are node identifiers and values are lists of identifiers of nodes to which there are directed edges from the key node. **Output**: - A list of node identifiers representing the longest path in the graph. # Example Given the adjacency list `adj_list`: ```python adj_list = { \'A\': [\'B\', \'C\'], \'B\': [\'C\', \'D\'], \'C\': [\'E\'], \'D\': [\'E\'], \'E\': [] } ``` **Expected Output**: The function might return: ```python [\'A\', \'B\', \'D\', \'E\'] ``` OR ```python [\'A\', \'B\', \'C\', \'E\'] ``` **Constraints**: - The graph is a directed acyclic graph (DAG). - The graph has at least one node. - Node identifiers are strings. # Explanation In the example above, \'A\' -> \'B\' -> \'D\' -> \'E\' and \'A\' -> \'B\' -> \'C\' -> \'E\' are both longest paths, each with 3 edges. The function should return any one of these paths.","solution":"def find_longest_path(adj_list): def topo_sort(node, visited, stack): visited.add(node) for neighbor in adj_list.get(node, []): if neighbor not in visited: topo_sort(neighbor, visited, stack) stack.append(node) def longest_path_from(node, memo): if node in memo: return memo[node] if node not in adj_list or not adj_list[node]: return [node] max_path = [] for neighbor in adj_list[node]: current_path = longest_path_from(neighbor, memo) if len(current_path) > len(max_path): max_path = current_path memo[node] = [node] + max_path return memo[node] # Topological sort on the graph visited = set() stack = [] for node in adj_list: if node not in visited: topo_sort(node, visited, stack) # Find the longest path starting from each node in topologically sorted order memo = {} stack.reverse() longest_path = [] for node in stack: current_path = longest_path_from(node, memo) if len(current_path) > len(longest_path): longest_path = current_path return longest_path"},{"question":"** In software engineering, caching mechanisms are vital for optimizing database queries and reducing latency in data retrieval. One common caching strategy is the Least Recently Used (LRU) cache, which evicts the least recently accessed items first to make space for new ones. Your task is to implement a simplified version of an LRU Cache. Your implementation should support the following operations: 1. **Get**: Retrieve the value associated with a given key. If the key is not present, return -1. 2. **Put**: Insert a key-value pair into the cache. If the cache exceeds the capacity, evict the least recently used item before inserting the new item. # Class Signature Implement the LRU Cache as a class `LRUCache` with the following methods: ```python class LRUCache: def __init__(self, capacity: int): pass def get(self, key: int) -> int: pass def put(self, key: int, value: int) -> None: pass ``` # Requirements - **Constructor**: - `__init__(capacity: int)`: Initialize the LRU cache with a given capacity. - **Methods**: - `get(key: int) -> int`: Return the value of the key if present, otherwise return -1. Also, mark the key as recently used. - `put(key: int, value: int) -> None`: Insert or update the value of the key. If the cache reaches its capacity, evict the least recently used item. # Constraints - All keys and values are non-negative integers. - The capacity is a positive integer. # Hints - You may use an `OrderedDict` from the `collections` module, which maintains the order of keys as they are inserted/used, to help implement the cache. # Example ```python from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = OrderedDict() def get(self, key: int) -> int: if key not in self.cache: return -1 self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) # Example usage lru_cache = LRUCache(2) lru_cache.put(1, 1) lru_cache.put(2, 2) print(lru_cache.get(1)) # Output: 1 lru_cache.put(3, 3) # This operation will make the key 2 the least recently used key print(lru_cache.get(2)) # Output: -1 lru_cache.put(4, 4) # This operation will make the key 1 the least recently used key print(lru_cache.get(1)) # Output: -1 print(lru_cache.get(3)) # Output: 3 print(lru_cache.get(4)) # Output: 4 ``` **","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = OrderedDict() def get(self, key: int) -> int: if key not in self.cache: return -1 self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"# Context In many organizations, there are hierarchies and reporting structures. Let\'s consider a simplified hierarchy represented by a dictionary where each key is a manager, and the value is a list of employees directly reporting to that manager. The CEO is the only person without a manager. # Problem Statement Write a function `find_employees_at_level(organization, manager, level)` that takes three inputs: a dictionary `organization` representing the reporting structure, a string `manager` representing the starting point in the hierarchy, and an integer `level` representing the depth or level in the hierarchy. Your function should return a list of all employees at the specified level below the given manager. Function Signature ```python def find_employees_at_level(organization: dict, manager: str, level: int) -> list: ``` Inputs - `organization`: A dictionary where keys are managers (strings) and values are lists of their direct reports (also strings). - `manager`: A string representing the name of the starting manager in the hierarchy. - `level`: An integer representing how many levels below the starting manager to list employees. Outputs - A list of strings representing the names of employees at the specified level below the given manager. If no employees are found at the given level, return an empty list. Example ```python organization = { \\"Alice\\": [\\"Bob\\", \\"Charlie\\"], \\"Bob\\": [\\"David\\", \\"Eve\\"], \\"Charlie\\": [\\"Fred\\"], \\"David\\": [], \\"Eve\\": [], \\"Fred\\": [] } print(find_employees_at_level(organization, \\"Alice\\", 2)) ``` Expected output: ``` [\'David\', \'Eve\', \'Fred\'] ```","solution":"def find_employees_at_level(organization, manager, level): Returns a list of employees at the specified level below the given manager. if level == 0: return [manager] queue = [(manager, 0)] result = [] while queue: current_manager, current_level = queue.pop(0) if current_level == level: result.append(current_manager) if current_level < level and current_manager in organization: for employee in organization[current_manager]: queue.append((employee, current_level + 1)) return result"},{"question":"You are tasked with designing a function that finds and returns pairs of integers from an input list that sum up to a specific target value. The function should identify all unique pairs (a, b) such that a + b equals the target value. Each pair should be returned as a tuple (a, b), and the pair (a, b) is considered the same as (b, a). Implement a function named `find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]`. The function should follow these steps: 1. **Input Validation:** - Ensure the input list `nums` contains at least two integers. - If `nums` is empty or has only one element, return an empty list immediately. 2. **Pair Identification:** - Use a set to keep track of the pairs found. - Loop through the list of integers and for each integer `num`, calculate the complement `target - num`. - If the complement exists in a set of seen numbers, then form a pair (num, complement) and ensure the pair is unique. - Add both the integer and the complement to a set to track numbers that have been processed. 3. **Output Formatting:** - Convert the set of pairs to a list and return it. Each pair should be a tuple and the order of tuples is not important. The function should aim for an optimal time complexity. Duplicates in the input list should not result in duplicate pairs in the output list. **Function Signature:** ```python def find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]: pass ``` # Example **Input:** ```python nums = [2, 4, 3, 5, 7, 8, 1, -1, 4, 2] target = 6 ``` **Output:** ```python [(2, 4), (3, 3), (1, 5), (-1, 7)] ``` **Explanation:** - The function identifies pairs (2, 4) at indices (0, 1) and (9, 7), but returns them only once. - The pair (3, 3) is found at indices (2, 2). - The pair (1, 5) is found at indices (6, 3). - The pair (-1, 7) is found at indices (7, 4). Note: - Duplicates like two (4, 2) pairs should be included only once in the result set. - The output list can be in any order.","solution":"from typing import List, Tuple def find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]: if len(nums) < 2: return [] seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return list(pairs)"},{"question":"Write a function that calculates the average speed for multiple segments of a trip. Given lists of distances and times for each segment, compute the average speed of the entire trip. Each list will have the same length, where each element of the distance list corresponds to the same index in the time list for that segment of the trip. Return the overall average speed in a single output. The function should output: float: The average speed of the trip as a single float value. You should write self-contained code starting with: ``` def average_speed(distances, times): ```","solution":"def average_speed(distances, times): Calculates the average speed for multiple segments of a trip. Args: distances (list of floats): The distances of each segment. times (list of floats): The time taken for each segment. Returns: float: The average speed of the entire trip. if not distances or not times or len(distances) != len(times): raise ValueError(\\"Both lists must have the same non-zero length.\\") total_distance = sum(distances) total_time = sum(times) if total_time == 0: raise ValueError(\\"Total time cannot be zero.\\") return total_distance / total_time"},{"question":"# Write a Python function named `find_squares` that, given a list of positive integers, returns a dictionary where each key is an integer from the list, and the corresponding value is the square of that integer. The implementation should ensure that each input integer is unique in the resulting dictionary and that the function handles the input efficiently. # Constraints: - The input list may contain up to 10,000 integers. - Each integer in the list is a positive number up to 10,000. # Function Signature ```python def find_squares(nums): # Your code here ``` **Example:** ```python print(find_squares([2, 3, 4])) # Output should be: {2: 4, 3: 9, 4: 16} print(find_squares([1, 5, 10])) # Output should be: {1: 1, 5: 25, 10: 100} ``` # Hints: - Consider using dictionary comprehension for a more concise implementation. - Make sure to handle cases where the input list might be empty. - Assume the input list contains unique integers, but it is recommended to check for this condition as part of the solution\'s robustness. # Note: The key objective of this problem is to reinforce understanding and application of dictionary comprehensions and basic dictionary operations in Python.","solution":"def find_squares(nums): Given a list of positive integers, return a dictionary where each key is an integer from the list, and the corresponding value is the square of that integer. Args: nums (list): List of positive integers. Returns: dict: A dictionary with integers as keys and their squares as values. return {num: num ** 2 for num in nums}"},{"question":"You are tasked with writing a function in Python to manage a simple inventory system for a small store. Your function will need to handle adding new items to the inventory, updating the stock of existing items, and removing items from the inventory based on a set of operations. Here are the specific requirements: - Implement a function named `manage_inventory` that processes a series of operations on the inventory. - The function should accept the following parameters: - `operations` (list): A list of operations where each operation is a tuple with the form (operation_type, item, quantity). `operation_type` is a string that can be \'add\', \'update\', or \'remove\'. `item` is a string representing the item\'s name and `quantity` is an integer representing the item\'s quantity. The function should: 1. Initialize an empty dictionary to represent the inventory. 2. Process each operation in the order given: - For \'add\' operation: If the item does not exist in the inventory, add it with the given quantity. If the item already exists, do not change its quantity. - For \'update\' operation: If the item exists in the inventory, update its quantity to the given quantity. If the item does not exist, do nothing. - For \'remove\' operation: If the item exists in the inventory, remove it from the inventory regardless of its quantity. If the item does not exist, do nothing. 3. Return the final state of the inventory as a dictionary. Function Signature: ```python def manage_inventory(operations: list) -> dict: pass ``` Example: ```python operations = [ (\'add\', \'apple\', 10), (\'add\', \'banana\', 5), (\'update\', \'apple\', 15), (\'remove\', \'banana\', 0), (\'add\', \'orange\', 8) ] result = manage_inventory(operations) print(result) # Output should be {\'apple\': 15, \'orange\': 8} ```","solution":"def manage_inventory(operations): Processes a series of inventory operations and returns the final state of the inventory. Args: operations (list): List of operations in the form (operation_type, item, quantity) Returns: dict: Final state of the inventory inventory = {} for operation in operations: op_type, item, quantity = operation if op_type == \'add\': if item not in inventory: inventory[item] = quantity elif op_type == \'update\': if item in inventory: inventory[item] = quantity elif op_type == \'remove\': if item in inventory: del inventory[item] return inventory"},{"question":"You are required to write a Python function named `find_unique_words` that extracts unique words from a given text. The input to the function is a single string containing multiple words, separated by spaces. The function should return a list of unique words in alphabetical order, ignoring case. Punctuation in the text should be ignored during the extraction. Requirements: - Name the function `find_unique_words` - The input parameter is: - `text`: A string containing multiple words separated by spaces. - The output should be a list of unique words sorted in alphabetical order. Consider the following rules: - Ignore case while considering uniqueness. - Ignore punctuations (comma, period, exclamation mark, question mark, colon, semicolon). Example: Suppose you have the following text: ```python text = \\"Hello, world! Hello, Python. This is a test. Test, test, TEST!\\" ``` Calling `find_unique_words(text)` should return: ```python [\'a\', \'hello\', \'is\', \'python\', \'test\', \'this\', \'world\'] ```","solution":"import re def find_unique_words(text): Extracts unique words from the given text, ignoring punctuations and case, and returns them in alphabetical order. # Remove punctuations and convert text to lower case cleaned_text = re.sub(r\'[^ws]\', \'\', text).lower() # Split the cleaned text into words words = cleaned_text.split() # Extract unique words unique_words = list(set(words)) # Sort the unique words alphabetically unique_words.sort() return unique_words"},{"question":"**Problem Statement**: You are given a task to simulate a process of scoring words based on certain rules. You will write a function that calculates the score for a sequence of words based on their positions and individual character values. Your task is to use a specified scoring function for each word in the sequence. The scoring system works as follows: 1. Each letter has a predefined score: `a = 1, b = 2, ..., z = 26`. 2. The score of a word is defined as the sum of the scores of its characters. 3. The total score for a sequence of words is defined as the sum of the scores of the individual words, multiplied by their positions (1-based index) in the sequence. Write a function `calculate_total_score(words: List[str]) -> int` that takes a list of words and returns the total score of the list as described. Here are the detailed descriptions of the steps you need to perform: 1. Compute the score for each word by adding up the scores for each character (e.g., \\"abc\\" would be scored as 1 + 2 + 3 = 6). 2. Multiply the word\'s score by its position in the list (e.g., the first word\'s score is multiplied by 1, the second word\'s score is multiplied by 2, etc.). 3. Sum the results from step 2 to get the total score for the word list. **Function signature:** ```python def calculate_total_score(words: List[str]) -> int: ``` **Example:** ```python words = [\\"abc\\", \\"def\\", \\"gh\\"] result = calculate_total_score(words) # Explanation: # \\"abc\\" -> 1 + 2 + 3 = 6, position = 1 -> 6 * 1 = 6 # \\"def\\" -> 4 + 5 + 6 = 15, position = 2 -> 15 * 2 = 30 # \\"gh\\" -> 7 + 8 = 15, position = 3 -> 15 * 3 = 45 # Total = 6 + 30 + 45 = 81 # Expected Output: 81 ``` Considerations: - The list of words will contain only lowercase letters and will have at least one word. - Each word will have at least one character. Implement the function respecting the provided signatures and rules.","solution":"from typing import List def calculate_total_score(words: List[str]) -> int: Calculate the total score of the list of words according to the defined scoring system. Parameters: words (List[str]): A list of words made up of lowercase letters. Returns: int: The total score of the words. total_score = 0 for idx, word in enumerate(words, start=1): word_score = sum((ord(char) - ord(\'a\') + 1) for char in word) total_score += word_score * idx return total_score"},{"question":"In this problem, you are asked to create a function `combine_dictionaries` that accepts two dictionaries as input and combines them into a single dictionary. If there is a conflict (i.e., both dictionaries have the same key), the resulting dictionary should sum the values of the conflicting keys. Specifically, you will: 1. Receive two dictionaries from the user, both with integer keys and values. 2. Combine the two dictionaries into one. 3. If a key exists in both dictionaries, add their values together and store the result in the new dictionary. 4. Return the resulting combined dictionary. Example Use Case: Assume the user provides the following inputs: - First dictionary: `{1: 100, 2: 200, 3: 300}` - Second dictionary: `{2: 250, 3: 350, 4: 450}` The function should return a new dictionary: ``` {1: 100, 2: 450, 3: 650, 4: 450} ``` You should also handle cases where the input dictionaries are empty or non-overlapping. Here is a function prototype for reference: ```python def combine_dictionaries(dict1, dict2): # Complete the implementation pass ``` Ensure you handle the merging logic correctly and return the combined dictionary as specified.","solution":"def combine_dictionaries(dict1, dict2): Combines two dictionaries. If the same key exists in both dictionaries, the values are summed. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary with combined keys and values summed where keys conflict. combined_dict = dict1.copy() for key, value in dict2.items(): if key in combined_dict: combined_dict[key] += value else: combined_dict[key] = value return combined_dict"},{"question":"Implement a function `max_unique_subarray(arr)` that returns the maximum sum of a contiguous subarray with all unique elements from the given array `arr`. The subarray should contain no duplicate elements, and the sum of its elements should be as high as possible. # Input - `arr` : A list of integers. # Output - An integer representing the maximum sum of a contiguous subarray with all unique elements. # Requirements 1. Use the sliding window technique to ensure the subarray remains contiguous. 2. Use a hash set to determine if elements are unique within the current subarray. # Example ```python def max_unique_subarray(arr): left = 0 current_sum = 0 max_sum = 0 unique_elements = set() for right in range(len(arr)): while arr[right] in unique_elements: unique_elements.remove(arr[left]) current_sum -= arr[left] left += 1 unique_elements.add(arr[right]) current_sum += arr[right] max_sum = max(max_sum, current_sum) return max_sum # Example usage arr = [4, 2, 4, 5, 6] print(max_unique_subarray(arr)) # Output: 17 ([2, 4, 5, 6] which sums to 17) ``` In the example above, the function `max_unique_subarray` computes the maximum sum of a contiguous subarray in `arr` such that all the elements in the subarray are unique. The output is `17`, which corresponds to the subarray `[2, 4, 5, 6]`.","solution":"def max_unique_subarray(arr): left = 0 current_sum = 0 max_sum = 0 unique_elements = set() for right in range(len(arr)): while arr[right] in unique_elements: unique_elements.remove(arr[left]) current_sum -= arr[left] left += 1 unique_elements.add(arr[right]) current_sum += arr[right] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In this problem, you are asked to write a function named `compute_similarity` that takes in two text documents (as strings) and calculates their cosine similarity based on term frequency (TF). Use the bag-of-words model to represent the documents. # Function Signature ```python def compute_similarity(doc1, doc2): ``` # Parameters 1. **doc1**: (`str`) - The first document as a string. 2. **doc2**: (`str`) - The second document as a string. # Constraints 1. Convert each document into a term frequency vector where each element represents the frequency of a unique word from the union of both documents\' vocabularies. 2. Ignore case when processing documents, i.e., \'Word\' and \'word\' are considered the same. 3. Remove punctuation and special characters, only consider alphanumeric words. 4. Use cosine similarity formula: [ text{cosine similarity} = frac{vec{A} cdot vec{B}}{|vec{A}| |vec{B}|}, ] where ( vec{A} ) and ( vec{B} ) are the term frequency vectors of the first and second documents, respectively. # Example Usage ```python doc1 = \\"Data Science is an interdisciplinary field.\\" doc2 = \\"Field of data science involves interdisciplinary processes.\\" similarity = compute_similarity(doc1, doc2) print(similarity) # Output should be between 0.0 and 1.0, representing the cosine similarity between the documents. ```","solution":"import re import math from collections import Counter def preprocess(text): text = text.lower() text = re.sub(r\'[^a-z0-9s]\', \'\', text) return text.split() def term_frequency(doc): words = preprocess(doc) return Counter(words) def compute_similarity(doc1, doc2): tf1 = term_frequency(doc1) tf2 = term_frequency(doc2) all_words = set(tf1.keys()).union(set(tf2.keys())) vec1 = [tf1.get(word, 0) for word in all_words] vec2 = [tf2.get(word, 0) for word in all_words] dot_product = sum(a * b for a, b in zip(vec1, vec2)) magnitude1 = math.sqrt(sum(a * a for a in vec1)) magnitude2 = math.sqrt(sum(a * a for a in vec2)) if magnitude1 == 0 or magnitude2 == 0: return 0.0 return dot_product / (magnitude1 * magnitude2)"},{"question":"You are required to implement a basic text-based calculator with a minimalistic command-line interface in Python. Your implementation should include a function `text_calculator` that performs basic arithmetic operations based on user input. Detailed Requirements: 1. **Function to Implement**: - **Name**: `text_calculator` - **Parameters**: None - **Returns**: None - **Behavior**: The function should continuously prompt the user for an arithmetic expression, evaluate the expression, and print the result until the user types \\"exit\\". 2. **Calculator Operations**: - The function should handle the following operations: addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). - It should support decimal numbers. 3. **User Input**: - The function should prompt the user to enter a mathematical expression (e.g., `3 + 5`). - If the user enters \\"exit\\", the function should terminate. 4. **Error Handling**: - The function should handle invalid input gracefully by printing an error message and prompting the user for another expression. Example usage: ```python def text_calculator(): while True: try: expr = input(\\"Enter an arithmetic expression (or type \'exit\' to quit): \\") if expr.lower() == \'exit\': break result = eval(expr) print(f\\"Result: {result}\\") except Exception as e: print(f\\"Invalid input. Please try again. Error: {e}\\") # Usage example: if __name__ == \\"__main__\\": text_calculator() ``` **Hint**: - Use the `eval` function in Python to evaluate the arithmetic expression. - Ensure that you handle exceptions to manage invalid inputs without crashing the program.","solution":"def text_calculator(): import math import re def safe_eval(expr): \'\'\'Evaluates a basic arithmetic expression in a safe manner.\'\'\' try: # Removing any unwanted characters for security reasons expr = re.sub(r\'[^0-9+-*/(). ]\', \'\', expr) return eval(expr, {\'__builtins__\': None}, {\\"math\\": math}) except Exception as e: raise ValueError(f\\"Invalid expression: {e}\\") while True: try: expr = input(\\"Enter an arithmetic expression (or type \'exit\' to quit): \\") if expr.lower() == \'exit\': break result = safe_eval(expr) print(f\\"Result: {result}\\") except ValueError as e: print(str(e)) # Usage example: if __name__ == \\"__main__\\": text_calculator()"},{"question":"Create a function that simulates a simple banking system. The function should support creating new user accounts, deposits, and withdrawals. Each account will have an account number, user name, and balance. The function should ensure that withdrawals do not exceed the current balance. The function should include: - A method to create a new user account (generate unique account numbers). - A method to deposit a specified amount to an account. - A method to withdraw a specified amount from an account if sufficient funds are available. - A method to check the balance of an account. The function should output: - A dictionary with account numbers as keys and corresponding account details (user name and balance) as values. You should write self-contained code starting with: ``` class BankSystem: def __init__(self): self.accounts = {} self.next_account_number = 1 def create_account(self, user_name): account_number = self.next_account_number self.accounts[account_number] = {\'user_name\': user_name, \'balance\': 0} self.next_account_number += 1 return account_number def deposit(self, account_number, amount): if account_number in self.accounts: self.accounts[account_number][\'balance\'] += amount return self.accounts[account_number][\'balance\'] return None def withdraw(self, account_number, amount): if account_number in self.accounts and self.accounts[account_number][\'balance\'] >= amount: self.accounts[account_number][\'balance\'] -= amount return self.accounts[account_number][\'balance\'] return None def check_balance(self, account_number): if account_number in self.accounts: return self.accounts[account_number][\'balance\'] return None ```","solution":"class BankSystem: def __init__(self): self.accounts = {} self.next_account_number = 1 def create_account(self, user_name): account_number = self.next_account_number self.accounts[account_number] = {\'user_name\': user_name, \'balance\': 0} self.next_account_number += 1 return account_number def deposit(self, account_number, amount): if account_number in self.accounts: self.accounts[account_number][\'balance\'] += amount return self.accounts[account_number][\'balance\'] return None def withdraw(self, account_number, amount): if account_number in self.accounts and self.accounts[account_number][\'balance\'] >= amount: self.accounts[account_number][\'balance\'] -= amount return self.accounts[account_number][\'balance\'] return None def check_balance(self, account_number): if account_number in self.accounts: return self.accounts[account_number][\'balance\'] return None"},{"question":"You need to implement a function called `merge_sorted_lists` that takes two sorted lists of integers as inputs and returns a single merged list which is also sorted. You should utilize a two-pointer technique to achieve an efficient solution. Here\'s the step-by-step breakdown: 1. Write a function `merge_sorted_lists` that accepts two parameters: - `list1` (a list of integers): The first sorted list. - `list2` (a list of integers): The second sorted list. 2. Inside the function, perform the following: - Initialize two pointers, `i` and `j`, to 0. These pointers will keep track of the current position in `list1` and `list2`, respectively. - Create an empty list `merged_list` that will store the sorted elements. - Use a while loop to iterate over both lists until one of the pointers exceeds the length of its respective list. - Compare the elements pointed to by `i` and `j`. - Append the smaller element to the `merged_list` and advance the corresponding pointer. - Append the remaining elements of the list that has not been fully traversed to the `merged_list`. - Return the `merged_list`. # Example ```python list1 = [1, 3, 5] list2 = [2, 4, 6] merged_list = merge_sorted_lists(list1, list2) print(merged_list) # Output: [1, 2, 3, 4, 5, 6] ``` # Constraints - You can assume that both input lists are sorted in non-decreasing order. - Both lists can be of different lengths, including being empty. # Signature ```python def merge_sorted_lists(list1: list, list2: list) -> list: pass ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list using a two-pointer technique. Parameters: - list1 (list of int): The first sorted list. - list2 (list of int): The second sorted list. Returns: - list of int: The merged sorted list. i, j = 0, 0 merged_list = [] # Iterate over both lists until one of the pointers exceeds its respective length while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append the remaining elements of list1 or list2 merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) return merged_list"},{"question":"In this problem, you are required to create a function `find_minimum_bribes` that calculates the minimum number of bribes required for people to achieve their positions in a queue. The function will assess the given queue and identify if it is possible to determine the number of bribes. If not, it should return an appropriate message. The function should be named `find_minimum_bribes` and have the following parameter: - `queue`: a list of integers representing the current order of people in the queue where each integer represents a person\'s original position (1-indexed). Your task is to implement the `find_minimum_bribes` function such that it: 1. Determines the minimum number of bribes needed for the people to reach their current positions from their original positions. 2. Returns the number of bribes if the current state of the queue is valid. 3. Returns \\"Too chaotic\\" if it is impossible to determine the number of bribes due to excessive bribes by any individual (more than two positions ahead). You may assume the following: - The queue\'s list is structured such that each person can bribe at most two others to get ahead in the queue. Here is an example of using the function: ```python find_minimum_bribes([2, 1, 5, 3, 4]) # returns 3 find_minimum_bribes([2, 5, 1, 3, 4]) # returns \\"Too chaotic\\" ``` Note: The function should iterate through the list and count the number of swaps or moves made to get to the current configuration. If any element is found to have \\"jumped\\" more than two places, it should immediately return \\"Too chaotic\\".","solution":"def find_minimum_bribes(queue): Calculate the minimum number of bribes to get to the current queue state. :param queue: List of integers representing the queue. :return: Minimum number of bribes or \\"Too chaotic\\". bribes = 0 for i, p in enumerate(queue): if p - (i + 1) > 2: return \\"Too chaotic\\" for j in range(max(0, p - 2), i): if queue[j] > p: bribes += 1 return bribes"},{"question":"# Problem: Determining Islands in a Grid using Depth-First Search You are provided a 2D grid consisting of \'1\'s (land) and \'0\'s (water). Your task is to write a function `numIslands` that counts the number of islands in the grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. # Function Signature ```python def numIslands(grid: List[List[str]]) -> int: # Your code here ``` # Input - `grid` (List[List[str]]): A 2D list where each element is either \'1\' (land) or \'0\' (water). # Output - (int): The number of islands in the given grid. # Example ```python # Example 1 grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] print(numIslands(grid)) # Output should be 3 # Example 2 grid = [ [\\"1\\",\\"0\\",\\"0\\",\\"1\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"1\\",\\"0\\",\\"0\\",\\"1\\"] ] print(numIslands(grid)) # Output should be 4 ``` # Requirements - Implement the function using Depth-First Search (DFS) algorithm to iterate through the grid. - Create a helper function to mark visited lands to avoid counting the same island multiple times. # Constraints - The grid dimensions can range up to 300x300. - Each element of the grid is either \'1\' or \'0\'. Your implementation should be efficient, avoiding redundant revisits of the same land by marking visited positions correctly. The goal is to return the total count of distinct islands present in the given grid.","solution":"from typing import List def numIslands(grid: List[List[str]]) -> int: if not grid: return 0 def dfs(grid, r, c): if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == \\"0\\": return grid[r][c] = \\"0\\" # Mark as visited dfs(grid, r+1, c) dfs(grid, r-1, c) dfs(grid, r, c+1) dfs(grid, r, c-1) count = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == \\"1\\": count += 1 dfs(grid, r, c) return count"},{"question":"Read a JSON file containing an array of objects, each representing an item in a store with properties \\"name\\", \\"price\\", and \\"quantity\\". Calculate the total value of the inventory by multiplying the price and quantity of each item, and summing these values. The JSON file path should be passed as a command-line argument. Ensure proper handling of files that cannot be opened, invalid JSON formats, and missing or incorrect properties. The function should return: float: The total value of the inventory. You should write self-contained code starting with: ``` import json import sys def calculate_inventory_value(json_file_path): ```","solution":"import json import sys def calculate_inventory_value(json_file_path): Calculate the total value of the inventory by reading a JSON file. Args: json_file_path (str): Path to the JSON file containing inventory data. Returns: float: Total value of the inventory. try: with open(json_file_path, \'r\') as file: data = json.load(file) total_value = 0.0 for item in data: if \'price\' in item and \'quantity\' in item: total_value += item[\'price\'] * item[\'quantity\'] else: raise ValueError(\\"Missing \'price\' or \'quantity\' in item\\") return total_value except FileNotFoundError: print(f\\"Error: File \'{json_file_path}\' not found.\\") return None except json.JSONDecodeError: print(\\"Error: Invalid JSON format.\\") return None except ValueError as e: print(f\\"Error: {e}\\") return None"},{"question":"Create a Python function named `generate_random_password` that takes one parameter: `length` (an integer representing the desired length of the password). The purpose of this function is to generate a random password that includes a mix of uppercase letters, lowercase letters, digits, and special characters. You must complete this task using the `random` and `string` libraries to generate the random characters. The function should: 1. Ensure the generated password includes at least one uppercase letter, one lowercase letter, one digit, and one special character. 2. Randomly generate the remaining characters to fulfill the desired length of the password. 3. Shuffle the characters to preserve randomness. 4. Return the generated password as a string. Function Signature: ```python def generate_random_password(length: int) -> str: pass ``` Example: If the function is called as follows: ```python generate_random_password(12) ``` The function should return a string similar to the following example: ``` \'aB1@fG3*Lm7!\' ``` (Note: The exact output will vary each time the function is called due to the random nature of the generation process.) # Constraints: - The `length` parameter must be at least 4 to ensure the inclusion of one character from each required category. - Handle potential edge cases where the length provided is less than 4 by raising a `ValueError` with a suitable message. - Ensure that the necessary libraries `random` and `string` are imported.","solution":"import random import string def generate_random_password(length: int) -> str: if length < 4: raise ValueError(\\"Password length must be at least 4\\") # Generate one character of each type uppercase = random.choice(string.ascii_uppercase) lowercase = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) special = random.choice(string.punctuation) # The rest will be randomly chosen from all possible characters remaining_length = length - 4 all_characters = string.ascii_letters + string.digits + string.punctuation remaining_characters = [random.choice(all_characters) for _ in range(remaining_length)] # Combine all characters and shuffle password = list(uppercase + lowercase + digit + special + \'\'.join(remaining_characters)) random.shuffle(password) return \'\'.join(password)"},{"question":"The task is to simulate the functionality of a vending machine. Given a list of products, their prices, and a user\'s selection and payment, calculate the change to be returned, and update the product stock accordingly. If the product is out of stock or the user provides insufficient payment, handle the errors properly. **Function Name:** `vending_machine` **Parameters:** - `products`: A list of dictionaries where each dictionary represents a product. Each dictionary has three keys: `\'name\'` (string), `\'price\'` (float), and `\'stock\'` (int). - `selection`: A string representing the name of the selected product. - `payment`: A float representing the amount of money provided by the user. **Behavior:** 1. If the selected product is not found in the `products` list, return the string `\\"Product not found\\"`. 2. If the selected product is out of stock, return the string `\\"Out of stock\\"`. 3. If the provided payment is less than the price of the selected product, return the string `\\"Insufficient payment\\"`. 4. If the product is available and the payment is sufficient, update the product stock by decrementing it by 1, calculate the change to be returned, and return a tuple with the change as a float and the updated list of products. **Example:** ```python products = [ {\\"name\\": \\"chips\\", \\"price\\": 1.50, \\"stock\\": 10}, {\\"name\\": \\"soda\\", \\"price\\": 1.25, \\"stock\\": 5}, {\\"name\\": \\"candy\\", \\"price\\": 0.95, \\"stock\\": 0} ] # Example 1: result = vending_machine(products, \\"soda\\", 1.50) # Expected output: (0.25, [ # {\\"name\\": \\"chips\\", \\"price\\": 1.50, \\"stock\\": 10}, # {\\"name\\": \\"soda\\", \\"price\\": 1.25, \\"stock\\": 4}, # {\\"name\\": \\"candy\\", \\"price\\": 0.95, \\"stock\\": 0} # ]) # Example 2: result = vending_machine(products, \\"candy\\", 1.00) # Expected output: \\"Out of stock\\" # Example 3: result = vending_machine(products, \\"chips\\", 1.00) # Expected output: \\"Insufficient payment\\" ``` **Notes:** - Ensure the function handles floating-point arithmetic correctly. - The product names are case-sensitive. - The function should update the stock of the selected product only if the purchase is successful.","solution":"def vending_machine(products, selection, payment): Simulates the functionality of a vending machine. :param products: List[Dict[str, Any]] : List of product dictionaries :param selection: str : Name of the selected product :param payment: float : Amount of money provided by the user :return: Union[str, Tuple[float, List[Dict[str, Any]]]] : Change and updated product list or error message # Find the selected product selected_product = next((product for product in products if product[\'name\'] == selection), None) if selected_product is None: return \\"Product not found\\" if selected_product[\'stock\'] == 0: return \\"Out of stock\\" if payment < selected_product[\'price\']: return \\"Insufficient payment\\" # Process the purchase change = payment - selected_product[\'price\'] selected_product[\'stock\'] -= 1 return (round(change, 2), products)"},{"question":"In this problem, you will work with the Pandas library to perform data manipulation on a CSV file. The task includes reading a CSV file into a DataFrame, performing data cleaning, and calculating summary statistics. This will test your ability to use Pandas for data analysis tasks, focusing on methods such as `read_csv`, `dropna`, and `groupby`. Create a function named `process_csv_data` that performs the following tasks: 1. Load the data from a specified CSV file path into a DataFrame. 2. Remove any rows with missing values. 3. Convert a specified column from string format to datetime. 4. Group the data by a specified column and calculate the mean for another specified numeric column. 5. Save the resulting DataFrame to a new CSV file. Function Signature: ```python def process_csv_data(input_csv_path: str, output_csv_path: str, date_column: str, groupby_column: str, mean_column: str) -> None: pass ``` Parameters: - `input_csv_path` (str): The file path of the input CSV. - `output_csv_path` (str): The target file path to save the processed CSV. - `date_column` (str): The name of the column to be converted to datetime. - `groupby_column` (str): The name of the column to group by. - `mean_column` (str): The name of the numeric column to calculate the mean for within each group. Requirements: - Use `pd.read_csv` to load the data into a DataFrame. - Use DataFrame\'s `dropna` method to remove any rows with missing values. - Convert the specified column to datetime using `pd.to_datetime`. - Use the `groupby` method to group the data by the specified column, and then calculate the mean for the specified numeric column. - Save the processed DataFrame to a new CSV file using the `to_csv` method. Assume that the necessary libraries (`pandas`) are already installed.","solution":"import pandas as pd def process_csv_data(input_csv_path: str, output_csv_path: str, date_column: str, groupby_column: str, mean_column: str) -> None: # Load the data from the specified CSV file path into a DataFrame df = pd.read_csv(input_csv_path) # Remove any rows with missing values df.dropna(inplace=True) # Convert the specified column from string format to datetime df[date_column] = pd.to_datetime(df[date_column]) # Group the data by the specified column and calculate the mean for another specified numeric column grouped_df = df.groupby(groupby_column)[mean_column].mean().reset_index() # Save the resulting DataFrame to a new CSV file grouped_df.to_csv(output_csv_path, index=False)"},{"question":"You are required to write a function `compare_graph_traversal_algorithms(graph, start_node)` that performs a benchmarking comparison between Depth-First Search (DFS) and Breadth-First Search (BFS) algorithms on a provided graph. We\'re particularly interested in comparing their execution time and exploring nodes reached from a given start node. To ensure accurate timing, you should use Python’s `time` module. **Function Signature:** ```python def compare_graph_traversal_algorithms(graph: Dict[int, List[int]], start_node: int) -> None: ``` **Parameters:** - `graph` (Dict[int, List[int]]): The graph represented as an adjacency list where the keys are node identifiers and the values are lists of adjacent nodes. - `start_node` (int): Indicates the starting node for both traversal algorithms. **Task:** 1. Implement DFS and BFS traversal starting from `start_node` within the graph. 2. Measure and print the time it takes to complete each traversal. 3. Print the list of nodes visited in the order they are traversed for both algorithms. **Traversal Functions:** You may assume that the `dfs` and `bfs` functions are already implemented as follows: ```python def dfs(graph, start_node): visited = [] stack = [start_node] while stack: node = stack.pop() if node not in visited: visited.append(node) stack.extend([n for n in graph[node] if n not in visited]) return visited def bfs(graph, start_node): visited = [] queue = [start_node] while queue: node = queue.pop(0) if node not in visited: visited.append(node) queue.extend([n for n in graph[node] if n not in visited]) return visited ``` **Output:** The function does not return any value but should print statements in the format: ``` DFS (start_node): time_taken_microseconds_microseconds Nodes visited in DFS: [list_of_nodes] BFS (start_node): time_taken_microseconds_microseconds Nodes visited in BFS: [list_of_nodes] ``` **Assumptions:** - You may use Python’s `time` module to measure the time taken for traversals.","solution":"import time from typing import Dict, List def dfs(graph, start_node): visited = [] stack = [start_node] while stack: node = stack.pop() if node not in visited: visited.append(node) stack.extend([n for n in graph[node] if n not in visited]) return visited def bfs(graph, start_node): visited = [] queue = [start_node] while queue: node = queue.pop(0) if node not in visited: visited.append(node) queue.extend([n for n in graph[node] if n not in visited]) return visited def compare_graph_traversal_algorithms(graph: Dict[int, List[int]], start_node: int) -> None: # Measure DFS traversal start_time_dfs = time.time() dfs_result = dfs(graph, start_node) end_time_dfs = time.time() dfs_time_microseconds = (end_time_dfs - start_time_dfs) * 1_000_000 # Measure BFS traversal start_time_bfs = time.time() bfs_result = bfs(graph, start_node) end_time_bfs = time.time() bfs_time_microseconds = (end_time_bfs - start_time_bfs) * 1_000_000 # Print results print(f\\"DFS ({start_node}): {dfs_time_microseconds:.2f} microseconds\\") print(f\\"Nodes visited in DFS: {dfs_result}\\") print(f\\"BFS ({start_node}): {bfs_time_microseconds:.2f} microseconds\\") print(f\\"Nodes visited in BFS: {bfs_result}\\") # Example usage: # graph = { # 0: [1, 2], # 1: [0, 3, 4], # 2: [0], # 3: [1], # 4: [1] # } # compare_graph_traversal_algorithms(graph, 0)"},{"question":"You are given a function `calculateTotalPrice(cartFile)` that processes a shopping cart JSON file to calculate the total price of items in the cart. Your task is to ensure that the function correctly includes items with quantities specified and applies any given discounts or promotional codes. **Context:** 1. The shopping cart JSON file contains a list of items, each with a `name`, `unit_price`, and `quantity`. 2. Some items may have a `discount` field specifying a percentage to be discounted from the `unit_price`. 3. Optional promotional codes might be specified in the file and should be applied to the total price. **Function to Implement:** Rewrite the `calculateTotalPrice(cartFile)` function to correctly calculate the total price of items in the cart, accounting for quantities and discounts. **Function Requirements:** 1. Read the contents of the provided JSON file. 2. For each item, calculate the total price based on its quantity and unit price. 3. Apply any item-specific discounts to the unit price before calculating the total price. 4. Apply any promotional codes to the overall total price if they exist. 5. Return the final total price after all calculations and discounts. **Input:** - `cartFile` (string): The path to the JSON file containing the shopping cart details. **Output:** - (float): The total price of the items in the cart after applying quantities, discounts, and any promotional codes.","solution":"import json def calculateTotalPrice(cartFile): with open(cartFile, \'r\') as file: cart = json.load(file) total_price = 0.0 promotional_code = cart.get(\\"promotional_code\\", None) for item in cart[\'items\']: unit_price = item[\'unit_price\'] quantity = item[\'quantity\'] discount = item.get(\'discount\', 0) # Apply discount to unit price discounted_unit_price = unit_price - (unit_price * discount / 100) # Add total price of this item type to the total price total_price += discounted_unit_price * quantity # Apply promotional code discount if it exists if promotional_code: if promotional_code == \'PROMO10\': total_price *= 0.90 # 10% off elif promotional_code == \'PROMO20\': total_price *= 0.80 # 20% off return round(total_price, 2)"},{"question":"You need to write a function named `find_shortest_path` that uses Dijkstra\'s algorithm to find the shortest path in a weighted graph. The graph is represented as an adjacency matrix, where the element at the i-th row and j-th column indicates the weight of the edge between vertex i and vertex j. A value of `0` means there is no edge between those vertices. The function should return the shortest path and the total weight of that path from a given starting vertex to a target vertex. # Parameters - `graph` (List[List[int]]): A 2D list representing the adjacency matrix of the graph. - `start_vertex` (int): The index of the starting vertex. - `target_vertex` (int): The index of the target vertex. # Functionality - Implement Dijkstra\'s algorithm to find the shortest path from the start vertex to the target vertex. - Return the shortest path as a list of vertex indices and the total weight of the path. - Handle cases where no path exists by returning an appropriate message or structure. # Assumptions - The graph is represented as a square adjacency matrix. - The graph contains non-negative weights. # Function Signature ```python def find_shortest_path(graph, start_vertex, target_vertex): pass ``` # Example Usage ```python graph = [ [0, 10, 0, 30, 100], [10, 0, 50, 0, 0], [0, 50, 0, 20, 10], [30, 0, 20, 0, 60], [100, 0, 10, 60, 0] ] start_vertex = 0 target_vertex = 4 # Expected Output: ([0, 3, 2, 4], 60) print(find_shortest_path(graph, start_vertex, target_vertex)) ``` In this example, the function should calculate the shortest path from vertex `0` to vertex `4`, which is `[0, 3, 2, 4]`, with a total weight of `60`.","solution":"import heapq def find_shortest_path(graph, start_vertex, target_vertex): Implements Dijkstra\'s algorithm to find the shortest path in a weighted graph. num_vertices = len(graph) distances = [float(\'inf\')] * num_vertices previous_vertices = [-1] * num_vertices distances[start_vertex] = 0 pq = [(0, start_vertex)] # (distance, vertex) while pq: current_distance, current_vertex = heapq.heappop(pq) if current_vertex == target_vertex: break if current_distance > distances[current_vertex]: continue for neighbor, weight in enumerate(graph[current_vertex]): if weight > 0: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_vertices[neighbor] = current_vertex heapq.heappush(pq, (distance, neighbor)) path = [] current_vertex = target_vertex if distances[current_vertex] == float(\'inf\'): return [], float(\'inf\') while current_vertex != -1: path.insert(0, current_vertex) current_vertex = previous_vertices[current_vertex] return path, distances[target_vertex]"},{"question":"Design a function named `generate_fibonacci_sum(n)` that takes an integer `n` as input and returns the sum of the first `n` Fibonacci numbers. The Fibonacci sequence is defined as follows: 1. The first two Fibonacci numbers are 0 and 1. 2. Each subsequent Fibonacci number is the sum of the two preceding ones. For example, if `n = 5`, the Fibonacci sequence up to the 5th term is [0, 1, 1, 2, 3], and the sum is 0 + 1 + 1 + 2 + 3 = 7. Your task is to implement the `generate_fibonacci_sum(n)` function to perform the following steps: 1. Check if `n` is a positive integer. 2. Calculate the first `n` Fibonacci numbers. 3. Sum these numbers and return the sum. Your implementation should handle edge cases (e.g., n = 0). Consider both iterative and recursive approaches, but aim for a solution with optimal performance and readability.","solution":"def generate_fibonacci_sum(n): Returns the sum of the first n Fibonacci numbers. if n <= 0: return 0 fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return sum(fib[:n])"},{"question":"In this problem, you will write a function that finds the length of the longest substring of a given string that consists of unique characters. The function should be implemented without using any additional data structures. Implement the function `longest_unique_substring(s: str) -> int` that takes a string `s` and returns an integer representing the length of the longest substring with all unique characters. To achieve this, you can use the sliding window technique which expands and contracts the window of considered characters. # Input - A single string `s` consisting of English letters, digits, and special characters, where (0 leq text{len}(s) leq 10^6). # Output - An integer representing the length of the longest substring with all unique characters. # Example Given the string: ``` s = \\"abcabcbb\\" ``` The return value should be `3`, as the longest substring with all unique characters is \\"abc\\". # Constraints - The function should be efficient to handle up to (10^6) characters. - The function should use a simple sliding window technique without additional data structures such as sets or maps. Here\'s an example of how your function might be used: ```python s = \\"abcabcbb\\" print(longest_unique_substring(s)) # Output should be 3 ```","solution":"def longest_unique_substring(s: str) -> int: Finds the length of the longest substring with all unique characters. :param s: Input string containing English letters, digits, and special characters. :return: Length of the longest substring with all unique characters. n = len(s) if n == 0: return 0 max_len = 0 start = 0 for end in range(n): for j in range(start, end): if s[j] == s[end]: start = j + 1 break max_len = max(max_len, end - start + 1) return max_len"},{"question":"Load a CSV file containing student grades, calculate the average grade for each student, and then plot the average grades as a bar chart using matplotlib. The function should output: - tuple: A tuple containing the matplotlib figure and axes objects. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def plot_student_averages(csv_file_path): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_student_averages(csv_file_path): Load a CSV file containing student grades, calculate the average grade for each student, and plot the average grades as a bar chart using matplotlib. Parameters: csv_file_path (str): Path to the CSV file containing student grades. Returns: tuple: A tuple containing the matplotlib figure and axes objects. # Load the CSV file into a DataFrame df = pd.read_csv(csv_file_path) # Ensure all columns except \'Student\' are numerical for col in df.columns[1:]: df[col] = pd.to_numeric(df[col], errors=\'coerce\') # Calculate the average grade for each student df[\'Average\'] = df.iloc[:, 1:].mean(axis=1) # Plot the average grades as a bar chart fig, ax = plt.subplots() ax.bar(df[\'Student\'], df[\'Average\'], color=\'skyblue\') ax.set_xlabel(\'Student\') ax.set_ylabel(\'Average Grade\') ax.set_title(\'Average Grade per Student\') plt.xticks(rotation=45, ha=\'right\') # Return the figure and axes objects return fig, ax"},{"question":"Write a function `generate_fibonacci_sum(n)` in Python that computes the sum of the first `n` Fibonacci numbers. Fibonacci numbers are a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. The function will: 1. Use a list to store the Fibonacci numbers. 2. Iteratively generate the Fibonacci numbers up to the `n`th number. 3. Compute the sum of these numbers. 4. Return the sum. **Example:** ```python print(generate_fibonacci_sum(5)) # Output: 7 (0, 1, 1, 2, 3 -> 0+1+1+2+3 = 7) print(generate_fibonacci_sum(7)) # Output: 20 (0, 1, 1, 2, 3, 5, 8 -> 0+1+1+2+3+5+8 = 20) ``` Here is the function signature: ```python def generate_fibonacci_sum(n): # Your code here ```","solution":"def generate_fibonacci_sum(n): Returns the sum of the first `n` Fibonacci numbers. if n <= 0: return 0 fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return sum(fib_seq[:n]) # Example usage: # print(generate_fibonacci_sum(5)) # Output: 7 (0, 1, 1, 2, 3 -> 0+1+1+2+3 = 7) # print(generate_fibonacci_sum(7)) # Output: 20 (0, 1, 1, 2, 3, 5, 8 -> 0+1+1+2+3+5+8 = 20)"},{"question":"You are tasked with creating a function named `vault_security(command)`, which simulates a basic security system for a vault. The function should process specific command inputs to perform actions related to the vault\'s operations. Here is how the function should behave: - If the input `command` is \\"open\\", prompt the user to enter a 4-digit PIN and check if it matches the predefined PIN (e.g., \\"1234\\"). If it matches, print \\"Vault opened\\", otherwise print \\"Incorrect PIN\\". - If the input `command` is \\"close\\", print \\"Vault closed\\". - If the input `command` is \\"lock\\", check if the vault is already closed. If it is, change the state to locked and print \\"Vault locked\\". If the vault is open, print \\"Close the vault before locking\\". - If the input `command` is \\"unlock\\", prompt the user to enter the 4-digit PIN and check if it matches the predefined PIN. If it matches, change the state to unlocked and print \\"Vault unlocked\\", otherwise print \\"Incorrect PIN\\". - If the input `command` is any other value, print \\"invalid command\\". You should maintain a simple state within the function to track whether the vault is opened, closed, or locked, and ensure the correct sequence of operations is enforced.","solution":"class VaultSecurity: def __init__(self): self.pin = \\"1234\\" self.state = \\"closed\\" # Possible states: \'opened\', \'closed\', \'locked\' def vault_security(self, command): if command == \\"open\\": user_pin = input(\\"Enter the 4-digit PIN: \\") if user_pin == self.pin: self.state = \\"opened\\" print(\\"Vault opened\\") else: print(\\"Incorrect PIN\\") elif command == \\"close\\": if self.state == \\"opened\\": self.state = \\"closed\\" print(\\"Vault closed\\") else: print(\\"Vault is already closed or locked\\") elif command == \\"lock\\": if self.state == \\"closed\\": self.state = \\"locked\\" print(\\"Vault locked\\") elif self.state == \\"opened\\": print(\\"Close the vault before locking\\") else: print(\\"Vault already locked\\") elif command == \\"unlock\\": if self.state == \\"locked\\": user_pin = input(\\"Enter the 4-digit PIN: \\") if user_pin == self.pin: self.state = \\"closed\\" print(\\"Vault unlocked\\") else: print(\\"Incorrect PIN\\") else: print(\\"Vault is not locked\\") else: print(\\"invalid command\\")"},{"question":"Design a function that simulates a simple version of the popular game \\"Snakes and Ladders\\". The game is played on a grid with sequentially numbered cells, where some cells contain snakes that move the player down to a lower number, and some cells contain ladders that move the player up to a higher number. The player starts at cell 1 and makes moves according to the roll of a die (which is between 1 and 6). The objective is to reach or exceed the last cell in the minimum number of rolls. The function should simulate a single game and return the number of moves taken to finish the game. **Function Signature:** ```python def snakes_and_ladders(board: List[int]) -> int: ``` **Function Description:** 1. The `board` list represents the game board where the index is the cell number, and the value at that index is the number of moves to another cell if there is a snake or ladder. If the value is 0, it means there is no snake or ladder. 2. The player starts at cell 1 and rolls a die to move between 1 and 6 cells forward. 3. If the player’s move lands on a cell with a ladder or snake (board[cell] != 0), the player is moved to the destination cell indicated by that value. 4. The game ends when the player moves to or beyond the last cell of the board. 5. Return the number of moves required to win the game. **Requirements:** - Utilize random dice rolls between 1 and 6. - Simulate the progression through the board using the given list. - Optimize for the minimum number of moves to finish the game. **Parameters:** - `board` (List[int]): A list where the ith element represents the effect of landing on cell i. A value of 0 means no snake or ladder at that cell. Positive values indicate ladders, and negative values indicate snakes. **Example:** ```python board = [0, 38, 0, 0, 14, 0, 0, 7, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 38, 0, 0, 0, 24, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, -12, 0] print(snakes_and_ladders(board)) # Output: Number of moves taken to reach the last cell. ``` The example board provided is a simplified version where high values represent moves up by ladders and negative values represent moves down by snakes. The function should use random dice rolls to move the player and adjust the player\'s position according to the board configuration until the player surpasses the last cell.","solution":"import random def snakes_and_ladders(board): Simulates a snakes and ladders game on the given board. Returns the number of moves to reach or exceed the final cell. position = 1 moves = 0 final_cell = len(board) while position < final_cell: roll = random.randint(1, 6) position += roll if position < final_cell: position += board[position] moves += 1 return moves"},{"question":"**Title: Calculating Triangle Area with User Input** In this problem, you will create a function that calculates the area of a triangle based on user input. The function will prompt the user to enter the lengths of the three sides of the triangle and then use Heron\'s formula to compute the area. Your task is to create a function named `triangle_area` that performs the following steps: 1. Prompt the user to enter the lengths of the three sides of the triangle. 2. Validate that the input values are positive numbers and can form a valid triangle (the sum of any two sides must be greater than the third side). 3. Use Heron\'s formula to calculate the area of the triangle. Heron\'s formula is given by: - ( s = frac{a + b + c}{2} ) (where a, b, c are the lengths of the sides of the triangle) - ( text{area} = sqrt{s times (s - a) times (s - b) times (s - c)} ) 4. Print the calculated area of the triangle. **Function Signature:** ```python def triangle_area(): ``` The function should handle invalid input gracefully by displaying an appropriate error message and prompting the user to enter the values again. **Example Execution:** ```python triangle_area() ``` **Expected Output:** ``` Enter the length of side a: 3 Enter the length of side b: 4 Enter the length of side c: 5 The area of the triangle is: 6.0 ``` In the example provided, the user inputs are 3, 4, and 5, which form a valid triangle. The function calculates the area as 6.0 using Heron\'s formula and prints the result.","solution":"import math def triangle_area(): while True: try: a = float(input(\\"Enter the length of side a: \\")) b = float(input(\\"Enter the length of side b: \\")) c = float(input(\\"Enter the length of side c: \\")) if a <= 0 or b <= 0 or c <= 0: print(\\"All sides must be positive numbers. Please enter the values again.\\") continue if a + b <= c or a + c <= b or b + c <= a: print(\\"The entered sides do not form a valid triangle. Please enter the values again.\\") continue # Calculate semi-perimeter s = (a + b + c) / 2 # Calculate the area using Heron\'s formula area = math.sqrt(s * (s - a) * (s - b) * (s - c)) print(f\\"The area of the triangle is: {area:.2f}\\") break except ValueError: print(\\"Invalid input. Please enter numerical values.\\")"},{"question":"In this exercise, you are tasked with writing a function called `remove_duplicates` that takes in a list of integers. The purpose of this function is to remove all duplicate values from the list while maintaining the original order of the elements. The function should perform the following steps: 1. Initialize an empty list to store the result. 2. Initialize an empty set to keep track of seen elements. 3. Iterate over each element in the input list: - If the element has not been encountered before (i.e., it is not in the set), add it to the result list and mark it as seen by adding it to the set. - Otherwise, skip the element. 4. Return the list with duplicates removed. This exercise will help you practice using data structures like lists and sets in Python to manage and manipulate collections of data. **Function Signature:** ```python def remove_duplicates(arr: list) -> list: ``` **Requirements:** - Make use of a set to keep track of seen elements for efficient lookup. **Example Usage:** ```python # Input: [1, 2, 3, 2, 4, 1, 5] remove_duplicates([1, 2, 3, 2, 4, 1, 5]) # Output: [1, 2, 3, 4, 5] # Input: [7, 8, 8, 9, 9, 10] remove_duplicates([7, 8, 8, 9, 9, 10]) # Output: [7, 8, 9, 10] ```","solution":"def remove_duplicates(arr: list) -> list: Removes duplicates from the input list while maintaining the original order of elements. Parameters: arr (list): A list of integers which may contain duplicates. Returns: list: A list with duplicates removed while preserving the original order. result = [] seen = set() for element in arr: if element not in seen: result.append(element) seen.add(element) return result"},{"question":"You are required to create a function named `find_largest_product(grid_size, file_path)` that performs the following operations: 1. **Inputs:** - `grid_size` (tuple): A tuple containing two integers (rows, cols), defining the dimensions of the grid. - `file_path` (str): The file path where the grid values are stored. 2. **Operations:** - Read the grid values from the provided file. Assume the file contains integers separated by spaces, with each row of the grid on a new line. - The function should find the largest product of four adjacent numbers in the grid. The adjacent numbers can be horizontal, vertical, or diagonal. 3. **Output:** - The function should return the largest product found among the four adjacent numbers in the grid. 4. **Constraints:** - You may assume the grid always contains enough numbers to find a product of four adjacent numbers. - Handle edge cases where adjacent groups may wrap around the edges improperly (i.e., ensure the neighbors are within the grid bounds). Here is the function signature for clarity: ```python def find_largest_product(grid_size: tuple, file_path: str) -> int: # Your code here ```","solution":"def find_largest_product(grid_size: tuple, file_path: str) -> int: rows, cols = grid_size # Read the grid from the file grid = [] with open(file_path, \'r\') as file: for line in file: grid.append(list(map(int, line.split()))) # Helper function to find the product of elements in a list def product_of_elements(elements): product = 1 for element in elements: product *= element return product max_product = 0 # Check all horizontal products for row in range(rows): for col in range(cols - 3): product = product_of_elements(grid[row][col:col + 4]) if product > max_product: max_product = product # Check all vertical products for row in range(rows - 3): for col in range(cols): product = product_of_elements([grid[row + i][col] for i in range(4)]) if product > max_product: max_product = product # Check all diagonal (top-left to bottom-right) products for row in range(rows - 3): for col in range(cols - 3): product = product_of_elements([grid[row + i][col + i] for i in range(4)]) if product > max_product: max_product = product # Check all diagonal (top-right to bottom-left) products for row in range(rows - 3): for col in range(3, cols): product = product_of_elements([grid[row + i][col - i] for i in range(4)]) if product > max_product: max_product = product return max_product"},{"question":"You are assigned to create a function `mirror_diagonal` that reflects the elements of a square matrix along its main diagonal. The main diagonal of a square matrix runs from the top left corner to the bottom right corner. The function `mirror_diagonal` should: 1. Accept a two-dimensional list (a square matrix) as input. 2. Assume the matrix is square, meaning it has the same number of rows and columns. 3. Swap the elements at positions (i, j) and (j, i) for all i and j such that 0 ≤ i < n and i < j < n (where `n` is the number of rows/columns). 4. Return the modified matrix. This operation is often called the transpose of a matrix, but in this case, it is performed in-place. Parameters: - `matrix` (list of lists): A square matrix represented as a list of n lists, each containing n elements (integers). Your implementation should handle edge cases gracefully, such as when the input matrix is empty or contains only a single element. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] mirror_diagonal(matrix) Output: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` # Constraints - Do not use any additional data structures apart from simple variables for intermediate swapping. - Assume the input matrix is well-formed with valid integers. Complete the function `mirror_diagonal` to achieve the desired functionality.","solution":"def mirror_diagonal(matrix): Reflects the elements of a square matrix along its main diagonal. Parameters: - matrix (list of lists): A square matrix represented as a list of n lists, each containing n elements (integers). Returns: - list of lists: The modified matrix with elements reflected along the main diagonal. n = len(matrix) for i in range(n): for j in range(i + 1, n): # Swap elements at positions (i, j) and (j, i) matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] return matrix"},{"question":"You are tasked with writing a function that processes a dataset of student exam scores and generates a new CSV file containing only the information of interest. **Context**: The dataset, \\"Student_Scores_2023.csv\\", contains exam scores for students from various schools. This data is stored in a CSV format with comma (,) as the delimiter. Each row represents a record for a specific student and contains multiple columns. The first column represents the student\'s name, the second column represents the school name, and the 6th column represents the total score obtained by the student. You are given a list of schools (`schools`), and you need to filter the dataset to include only these specified schools. The filtered data should include two columns: the student\'s name and the total score. **Function to Write**: Write a function `filter_student_scores(schools, input_filepath, output_filepath)` that: 1. Takes as input: - `schools`: a list of school names to be filtered. - `input_filepath`: the file path to the original dataset (\\"Student_Scores_2023.csv\\"). - `output_filepath`: the file path where the filtered dataset should be saved (\\"Filtered_Student_Scores.csv\\"). 2. Reads the original dataset. 3. Filters the data to include only the specified schools. 4. Writes the filtered data to a new file, including only the student\'s name and total score. **Library Requirement**: You **must** use the `csv` library (`csv.reader` and `csv.writer`) to handle reading and writing of the CSV files. **Example**: Suppose the list of schools is `[\'Greenwood High\', \'Sunrise School\']`, the input file is `\\"Student_Scores_2023.csv\\"`, and the output file is `\\"Filtered_Student_Scores.csv\\"`. The function should create a CSV file named `\\"Filtered_Student_Scores.csv\\"` containing only the data for students from \'Greenwood High\' and \'Sunrise School\', along with their corresponding total scores.","solution":"import csv def filter_student_scores(schools, input_filepath, output_filepath): Filters the student scores from the input CSV file and writes the relevant data to the output CSV file for the specified schools. Parameters: - schools: List of school names to be filtered. - input_filepath: Path to the input CSV file (\'Student_Scores_2023.csv\'). - output_filepath: Path to the output CSV file (\'Filtered_Student_Scores.csv\'). with open(input_filepath, mode=\'r\') as infile: reader = csv.reader(infile) filtered_data = [] for row in reader: student_name = row[0] school_name = row[1] total_score = row[5] if school_name in schools: filtered_data.append([student_name, total_score]) with open(output_filepath, mode=\'w\', newline=\'\') as outfile: writer = csv.writer(outfile) writer.writerow([\'Student Name\', \'Total Score\']) # Write header writer.writerows(filtered_data)"},{"question":"You are provided with a function template `get_currency_exchange_data(base_currency, target_currency)` that fetches the latest exchange rate between two given currencies using a public API. Your task is to implement this function to retrieve the relevant exchange rate information and format it into a dictionary. The function should use the `requests` library to make the HTTP request and the `json` library to parse the JSON response. Specifically, you need to implement the following functionality: 1. Fetch the exchange rate for the given `base_currency` and `target_currency` from the API endpoint. 2. Parse the JSON response using the `json.loads` method. 3. Extract the necessary data to form a dictionary in the format: `{\\"base\\": \\"base_currency\\", \\"target\\": \\"target_currency\\", \\"rate\\": exchange_rate, \\"date\\": date}`. 4. Return this dictionary. The function should follow this prototype: ```python def get_currency_exchange_data(base_currency, target_currency): # Implement this function ``` **Important Information:** - You need to use the `requests` library to make the HTTP GET request. - You must use the `json.loads` method from the `json` library to parse the response. - The endpoint for the exchange rate request is `https://api.exchangerate-api.com/v4/latest/` followed by the `base_currency`. - The function will take two string arguments `base_currency` and `target_currency`. Here is the template you should build upon: ```python import requests import json def get_currency_exchange_data(base_currency, target_currency): response = requests.get(f\'https://api.exchangerate-api.com/v4/latest/{base_currency}\') # Parse the JSON response exchange_data = json.loads(response.text) exchange_rate = exchange_data[\'rates\'][target_currency] date = exchange_data[\'date\'] # Form the dictionary with exchange rate details result = { \\"base\\": base_currency, \\"target\\": target_currency, \\"rate\\": exchange_rate, \\"date\\": date } return result ``` **Note:** To run this function, you need internet access to connect to the API endpoint.","solution":"import requests import json def get_currency_exchange_data(base_currency, target_currency): response = requests.get(f\'https://api.exchangerate-api.com/v4/latest/{base_currency}\') # Check if the request was successful if response.status_code != 200: raise Exception(f\\"Failed to fetch data: {response.status_code}\\") # Parse the JSON response exchange_data = json.loads(response.text) # Check if the target currency exists in the response data if target_currency not in exchange_data[\'rates\']: raise Exception(f\\"Target currency {target_currency} not found in the exchange data\\") exchange_rate = exchange_data[\'rates\'][target_currency] date = exchange_data[\'date\'] # Form the dictionary with exchange rate details result = { \\"base\\": base_currency, \\"target\\": target_currency, \\"rate\\": exchange_rate, \\"date\\": date } return result"},{"question":"You are tasked with designing a function named `plot_scatter` that generates a scatter plot from two given series of data. This scatter plot should allow customization of the markers, size, titles, axis labels, and save location. The function should utilize specific functions from the `matplotlib.pyplot` library, particularly `subplots`, `scatter`, `savefig`, and `suptitle`. Function Signature: ```python def plot_scatter( x_series: pd.Series, y_series: pd.Series, marker: str, fig_size: Tuple[float, float], title: str, sup_title: str, x_label: str, y_label: str, save_name: str ) -> None: ``` Parameters: - `x_series (pd.Series)`: The data for the x-axis. - `y_series (pd.Series)`: The data for the y-axis. - `marker (str)`: The marker style for the points in the scatter plot (e.g., \'o\', \'^\', \'s\'). - `fig_size (Tuple[float, float])`: The dimensions for the figure. - `title (str)`: The main title for the plot. - `sup_title (str)`: The super title (overall title) for the plot. - `x_label (str)`: The label for the x-axis. - `y_label (str)`: The label for the y-axis. - `save_name (str)`: The directory and file name to save the figure (include the file type, e.g., \'.svg\', \'.jpg\'). Objective: Implement the `plot_scatter` function that: 1. Creates a scatter plot with the specified `marker`. 2. Sets the size of the figure using `fig_size`. 3. Adds the provided titles to the plot. 4. Labels the x and y axes using `x_label` and `y_label`. 5. Saves the plot to the location specified by `save_name`. 6. Displays the plot using `matplotlib.pyplot`. Example Usage: ```python import pandas as pd # Sample data x_data = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9]) y_data = pd.Series([9, 7, 6, 8, 4, 5, 3, 2, 1]) plot_scatter( x_series=x_data, y_series=y_data, marker=\'o\', fig_size=(8, 6), title=\'Scatter plot of data values\', sup_title=\'X vs Y\', x_label=\'X Values\', y_label=\'Y Values\', save_name=\'scatter_plot.png\' ) ```","solution":"import pandas as pd import matplotlib.pyplot as plt from typing import Tuple def plot_scatter( x_series: pd.Series, y_series: pd.Series, marker: str, fig_size: Tuple[float, float], title: str, sup_title: str, x_label: str, y_label: str, save_name: str ) -> None: Generates and saves a scatter plot. Parameters: - x_series (pd.Series): The data for the x-axis. - y_series (pd.Series): The data for the y-axis. - marker (str): The marker style for the points in the scatter plot (e.g., \'o\', \'^\', \'s\'). - fig_size (Tuple[float, float]): The dimensions for the figure. - title (str): The main title for the plot. - sup_title (str): The super title (overall title) for the plot. - x_label (str): The label for the x-axis. - y_label (str): The label for the y-axis. - save_name (str): The directory and file name to save the figure (include the file type, e.g., \'.svg\', \'.jpg\'). fig, ax = plt.subplots(figsize=fig_size) ax.scatter(x_series, y_series, marker=marker) ax.set_title(title) ax.set_xlabel(x_label) ax.set_ylabel(y_label) fig.suptitle(sup_title) plt.savefig(save_name) plt.show()"},{"question":"Write a function that takes a list of lists of integers, and a filepath as input and saves the data in a tab-delimited text file. Each sublist in the input list represents a row in the file. The function should ensure directory structure of the provided filepath exists, if not, create it. If the file already exists in the specified location, overwrite the file with the new content. The function signature should be: ``` def save_to_tsv(data, filepath): ``` Example: ``` data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] filepath = \'output/data.tsv\' save_to_tsv(data, filepath) ``` The contents of `data.tsv` should be: ``` 1 2 3 4 5 6 7 8 9 ``` Implement the required function starting with: ``` import os def save_to_tsv(data, filepath): ```","solution":"import os def save_to_tsv(data, filepath): Saves a list of lists of integers to a tab-delimited text file. Parameters: data (list of lists of int): The data to save. Each sublist represents a row. filepath (str): The file path where the data should be saved. # Ensure directory structure exists os.makedirs(os.path.dirname(filepath), exist_ok=True) # Open the file and write the data with open(filepath, \'w\') as f: for row in data: f.write(\'t\'.join(map(str, row)) + \'n\')"},{"question":"In this problem, you are given two lists of integers `list1` and `list2`. Each list may contain duplicate integers. Your goal is to find the intersection of these two lists, but you must account for the frequency of each integer in both lists. For example, if an integer appears three times in `list1` and twice in `list2`, the intersection should include that integer twice. Write a function `find_intersection_with_frequency` that takes two lists as input and returns a list containing the intersection of the two lists, accounting for the frequencies of each integer. Here is a function signature to guide you: ```python def find_intersection_with_frequency(list1, list2): Find the intersection of two lists, accounting for the frequency of each integer. Parameters: list1 (list): The first list of integers, possibly containing duplicates. list2 (list): The second list of integers, possibly containing duplicates. Returns: list: A list containing the intersection of the two input lists, accounting for the frequencies of the integers. pass ``` **Requirements:** 1. The function should return a list where each integer appears the minimum number of times it appears in both input lists `list1` and `list2`. 2. You can assume the input lists may have a length from 0 to 10,000. 3. The integers in the lists can be positive or negative. 4. You may use built-in Python functions and libraries, but avoid using external libraries beyond the standard library. **Example:** ``` list1 = [1, 2, 2, 3, 4, 4, 4] list2 = [2, 2, 2, 4, 4, 5, 6] find_intersection_with_frequency(list1, list2) # Output: [2, 2, 4, 4] ``` **Explanation:** - The integer `2` appears twice in both `list1` and `list2`. - The integer `4` appears twice in `list1` and twice in `list2`. - The output list should contain two `2`s and two `4`s.","solution":"def find_intersection_with_frequency(list1, list2): Find the intersection of two lists, accounting for the frequency of each integer. Parameters: list1 (list): The first list of integers, possibly containing duplicates. list2 (list): The second list of integers, possibly containing duplicates. Returns: list: A list containing the intersection of the two input lists, accounting for the frequencies of the integers. from collections import Counter # Count the frequency of each integer in both lists count1 = Counter(list1) count2 = Counter(list2) # Find the intersection by taking the minimum frequency from both counts intersection = [] for number in count1: if number in count2: min_count = min(count1[number], count2[number]) intersection.extend([number] * min_count) return intersection"},{"question":"You are given a binary tree and tasked with finding the largest value in each row of the tree. The binary tree is represented using the `TreeNode` class. Your function `largest_values_per_row` should take the root of the binary tree and return a list of the largest value in each row, ordered from the root downwards. The `TreeNode` class is defined as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` Please implement the function `largest_values_per_row(root: TreeNode) -> List[int]`. # Requirements 1. Traverse the binary tree level by level. 2. For each level, determine the largest value. 3. Return a list of the largest values for each row of the tree. # Example ```python # Example binary tree: # 1 # / # 3 2 # / # 5 3 9 root = TreeNode(1) root.left = TreeNode(3) root.right = TreeNode(2) root.left.left = TreeNode(5) root.left.right = TreeNode(3) root.right.right = TreeNode(9) # Get the largest values per row result = largest_values_per_row(root) print(result) # Output: [1, 3, 9] ```","solution":"from typing import List, Optional from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def largest_values_per_row(root: Optional[TreeNode]) -> List[int]: Returns the list of largest values in each row (level) of the binary tree. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) max_value = float(\'-inf\') for _ in range(level_size): node = queue.popleft() max_value = max(max_value, node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(max_value) return result"},{"question":"Write a function named `generate_histogram(data, bins=10, color=\'blue\', edgecolor=\'black\')` that creates a histogram from a list of numerical data points. The objective is to understand the use of the Matplotlib library for creating histograms, including customization of bin size and colors. This function should: - Take a list of numerical values `data`. - Create a histogram with a specified number of `bins`. - Customize the bars of the histogram using `color` for the face color and `edgecolor` for the border color of the bars. - Use `matplotlib.pyplot.hist` to create the histogram and display it using `matplotlib.pyplot.show`. The function should display the plot when called. Requirements - Use `matplotlib.pyplot.hist` for generating the histogram. - Ensure that the function displays the histogram plot using `matplotlib.pyplot.show`. **Example:** ```python import matplotlib.pyplot as plt data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5] generate_histogram(data) ``` In this example, a histogram should be displayed using the specified data points, with default 10 bins, and bars colored blue with black edges.","solution":"import matplotlib.pyplot as plt def generate_histogram(data, bins=10, color=\'blue\', edgecolor=\'black\'): Generates and displays a histogram from a list of numerical data points. Parameters: - data: list of numerical values - bins: number of bins for the histogram (default is 10) - color: face color of the bars (default is \'blue\') - edgecolor: border color of the bars (default is \'black\') plt.hist(data, bins=bins, color=color, edgecolor=edgecolor) plt.show()"},{"question":"You are tasked with creating a function named `group_by_key` that processes a list of dictionaries and returns a new dictionary where the keys are unique values from one of the original keys in the list, and the values are lists of dictionaries grouped by these unique keys. Specifically, given a list of dictionaries, you should group all dictionaries by a specified key and return a dictionary where each key is a unique value of the specified key in the input list, and the corresponding value is a list of dictionaries that have that key. Write the `group_by_key` function, which takes two parameters: 1. `items`: A list of dictionaries. 2. `key`: The key by which to group the dictionaries. Function Signature: ```python def group_by_key(items, key): pass ``` **Example**: ```python items = [ {\\"fruit\\": \\"apple\\", \\"color\\": \\"red\\"}, {\\"fruit\\": \\"banana\\", \\"color\\": \\"yellow\\"}, {\\"fruit\\": \\"apple\\", \\"color\\": \\"green\\"}, {\\"fruit\\": \\"banana\\", \\"color\\": \\"green\\"}, {\\"fruit\\": \\"cherry\\", \\"color\\": \\"red\\"} ] key = \\"fruit\\" result = group_by_key(items, key) ``` **Expected Output**: ```python { \\"apple\\": [ {\\"fruit\\": \\"apple\\", \\"color\\": \\"red\\"}, {\\"fruit\\": \\"apple\\", \\"color\\": \\"green\\"} ], \\"banana\\": [ {\\"fruit\\": \\"banana\\", \\"color\\": \\"yellow\\"}, {\\"fruit\\": \\"banana\\", \\"color\\": \\"green\\"} ], \\"cherry\\": [ {\\"fruit\\": \\"cherry\\", \\"color\\": \\"red\\"} ] } ``` **Constraints**: - Assume all dictionaries in `items` contain the specified `key`. - Preserve the order of dictionaries as they appear in the input list. - Do not assume anything about the content of the dictionaries other than presence of the `key`. The goal is to practice manipulating collections in Python, particularly using dictionaries to implement a grouping mechanism. This requires knowledge of dictionary operations and list comprehensions.","solution":"def group_by_key(items, key): Groups a list of dictionaries by the specified key. Args: items (list): A list of dictionaries. key (str): The key to group dictionaries by. Returns: dict: A dictionary where each key is a unique value from the specified key in the input list, and the corresponding value is a list of dictionaries that have that key. grouped_dict = {} for item in items: key_value = item[key] if key_value not in grouped_dict: grouped_dict[key_value] = [] grouped_dict[key_value].append(item) return grouped_dict"},{"question":"In this problem, you are required to implement a function `generate_fibonacci_matrix` which generates an `n x n` Fibonacci matrix. The Fibonacci matrix is a matrix where each element is part of the Fibonacci sequence, filled in a row-wise manner. # Function Signature ```python def generate_fibonacci_matrix(n: int): pass ``` # Problem Details 1. The input `n` is a positive integer indicating the size of the matrix (i.e., `n x n`). 2. The function should generate the first `n * n` Fibonacci numbers. 3. Populate the `n x n` matrix with these Fibonacci numbers in a row-wise manner. 4. Return the final matrix as a list of lists. # Fibonacci Sequence The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 # Example Usage ```python matrix = generate_fibonacci_matrix(3) # Expected Output: # [ # [0, 1, 1], # [2, 3, 5], # [8, 13, 21] # ] matrix = generate_fibonacci_matrix(2) # Expected Output: # [ # [0, 1], # [1, 2] # ] ``` # Constraints - 1 <= n <= 20","solution":"def generate_fibonacci_matrix(n: int): Generates an n x n Fibonacci matrix. Parameters: n (int): size of the matrix Returns: List[List[int]]: n x n matrix filled with Fibonacci numbers if n <= 0: return [] fib_sequence = [] a, b = 0, 1 # Generate the first n*n Fibonacci numbers for _ in range(n * n): fib_sequence.append(a) a, b = b, a + b # Create the n x n matrix matrix = [] for i in range(n): row = fib_sequence[i*n : (i+1)*n] matrix.append(row) return matrix"},{"question":"You are tasked with creating a function that reads a text file and counts the occurrences of each word within the file. This function is designed to test your file handling, string manipulation, and dictionary usage skills in Python. Write a function named `word_count(filename)` that accomplishes the following: 1. Opens the text file with the specified filename. 2. Reads the content of the file and splits it into words. Words are separated by whitespace. 3. Counts the occurrences of each word in the file, regardless of case (e.g., \\"Word\\" and \\"word\\" should be counted as the same word). 4. Returns a dictionary where the keys are words and the values are the counts of those words. Assume that the text file contains only alphabetical characters and whitespace. The returned dictionary should have words converted to lower case. For example, given a file `example.txt` with the following content: ``` Hello world hello Python World ``` The function call `word_count(\'example.txt\')` should return: ```python {\'hello\': 2, \'world\': 2, \'python\': 1} ```","solution":"def word_count(filename): Reads a text file and counts the occurrences of each word within the file. Args: filename (str): The name of the text file to read. Returns: dict: A dictionary where the keys are words and the values are the counts of each word. word_counts = {} try: with open(filename, \'r\') as file: for line in file: words = line.lower().split() for word in words: if word not in word_counts: word_counts[word] = 0 word_counts[word] += 1 except FileNotFoundError: print(f\\"The file {filename} does not exist.\\") return word_counts"},{"question":"Consider designing a system to manage the bookings of a conference room in an office. You are required to implement a function that checks the availability of the room for a given time slot and handles booking requests efficiently. Requirements: - Implement a class `ConferenceRoomBooking` which handles booking requests and checks availability. - The class should have a method `book(self, start_time, end_time)` that attempts to book the room for the given time slot. - If the room is available for the entire duration, this method should record the booking and return `True`. - If the room is not available for any part of the requested time slot, it should return `False` without altering the existing bookings. - The class should also have a method `is_available(self, start_time, end_time)` that checks if the room is available for a given time slot without making any bookings. It should return `True` if the room is available and `False` otherwise. For simplicity, assume the following: - Both `start_time` and `end_time` are represented as integers, where each integer corresponds to a specific hour of the day (e.g., 9 for 9:00 AM, 15 for 3:00 PM). - The `start_time` is always strictly less than the `end_time`. - The room cannot be booked for overlapping time slots. Your task is to develop the `ConferenceRoomBooking` class with the `book` and `is_available` methods respecting the details and constraints specified. For example: ```python room = ConferenceRoomBooking() print(room.is_available(9, 10)) # Expected output: True print(room.book(9, 10)) # Expected output: True print(room.is_available(9, 10)) # Expected output: False print(room.book(9, 10)) # Expected output: False print(room.book(10, 12)) # Expected output: True print(room.is_available(11, 13)) # Expected output: False ```","solution":"class ConferenceRoomBooking: def __init__(self): self.bookings = [] def book(self, start_time, end_time): if self.is_available(start_time, end_time): self.bookings.append((start_time, end_time)) return True return False def is_available(self, start_time, end_time): for booking in self.bookings: if not (end_time <= booking[0] or start_time >= booking[1]): return False return True"},{"question":"You are tasked with enhancing a function that performs k-means clustering algorithm. Specifically, you need to ensure that the function can initialize the centroids using the k-means++ technique and subsequently assign clusters and update centroids. The function you will modify is called `kMeansClustering`. The purpose of this function is to identify `k` clusters in the given data points `X`. You need to employ the `numpy` and `scipy` libraries as necessary. Your task is to complete the `kMeansClustering` function, which has the following signature: ```python def kMeansClustering(X, k, max_iters): # your code here ``` Here is a breakdown of the parameters: - `X`: A dataset of shape `(m, n)` where `m` is the number of data points and `n` is the number of features. - `k`: The number of clusters to identify, an integer. - `max_iters`: The maximum number of iterations to run the clustering algorithm. In your function, make sure to: 1. Initialize the centroids using the k-means++ algorithm. 2. Assign each data point to the nearest centroid. 3. Recompute the centroids as the mean of the data points assigned to each cluster. 4. Iterate the assignment and update steps for `max_iters` or until convergence (whichever comes first). 5. Return the final centroids and the cluster assignments for each data point. Assume that the `distance` function, which calculates the Euclidean distance between two points, is already implemented and correctly returns the distance.","solution":"import numpy as np from scipy.spatial.distance import cdist def initialize_centroids(X, k): # Initialize the centroids using the k-means++ strategy m, n = X.shape centroids = np.zeros((k, n)) centroids[0] = X[np.random.choice(range(m))] for i in range(1, k): dist_sq = np.min(cdist(X, centroids[:i]) ** 2, axis=1) probabilities = dist_sq / np.sum(dist_sq) cumulative_probabilities = np.cumsum(probabilities) r = np.random.rand() for j, p in enumerate(cumulative_probabilities): if r < p: centroids[i] = X[j] break return centroids def assign_clusters(X, centroids): # Assign each data point to the nearest centroid return np.argmin(cdist(X, centroids), axis=1) def update_centroids(X, cluster_assignments, k): # Update the centroids by computing the mean of all points assigned to each cluster n = X.shape[1] new_centroids = np.zeros((k, n)) for i in range(k): cluster_points = X[cluster_assignments == i] if len(cluster_points) > 0: new_centroids[i] = np.mean(cluster_points, axis=0) return new_centroids def kMeansClustering(X, k, max_iters): # Ensure the inputs are numpy arrays X = np.array(X) # Step 1: Initialize centroids centroids = initialize_centroids(X, k) for _ in range(max_iters): old_centroids = centroids # Step 2: Assign clusters cluster_assignments = assign_clusters(X, centroids) # Step 3: Update centroids centroids = update_centroids(X, cluster_assignments, k) # Check for convergence (if centroids do not change) if np.all(centroids == old_centroids): break return centroids, cluster_assignments"},{"question":"# Sorting Strings with Mixed Case and Numbers When sorting strings that may include both uppercase and lowercase letters, as well as numerical digits, it can be challenging to produce an order that meets common human expectations. For example, in ASCII, \'A\' comes before \'a\', and digits come even before both. In this task, you are required to sort a list of strings while ensuring that: 1. Digits (0-9) are sorted before any letters (a-z, A-Z). 2. Lowercase letters are sorted before uppercase letters. 3. Within the same category (digits, lowercase, or uppercase), the natural ordering of characters should be maintained. # Task Your task is to implement a function `custom_sort(strings)` that sorts a list of strings according to the mentioned rules. # Function Signature ```python def custom_sort(strings: list) -> list: ``` # Parameters - `strings`: A list of strings containing mixed case letters and numerical digits. # Returns - A new list of strings sorted according to the specified rules. # Requirements - The sort should be stable, and the relative order of elements that compare equal should be preserved. - You must handle cases where the input list is empty or contains elements that are not strings by ignoring non-string elements. # Example ```python strings = [\\"a1\\", \\"A1\\", \\"a2\\", \\"12\\", \\"B1\\", \\"b2\\"] sorted_strings = custom_sort(strings) print(sorted_strings) # Expected output: [\'12\', \'a1\', \'a2\', \'b2\', \'A1\', \'B1\'] ``` Use the provided function documentation to understand how to correctly implement this custom sorting algorithm using Python\'s sorting facilities.","solution":"def custom_sort(strings): Sorts a list of strings such that: 1. Digits (0-9) are sorted before any letters (a-z, A-Z). 2. Lowercase letters are sorted before uppercase letters. 3. Within the same category (digits, lowercase, or uppercase), the natural ordering of characters is maintained. # Define the sorting key def sort_key(s): if isinstance(s, str): return (0 if s.isdigit() else 1 if s.islower() else 2, s) else: return (3, s) # Filter out non-string elements and sort based on the custom key return sorted(filter(lambda x: isinstance(x, str), strings), key=sort_key)"},{"question":"# Word Search in Matrix You are tasked with implementing a function `word_search(matrix, word)` that checks if a given word can be constructed in a grid of letters by connecting adjacent cells sequentially. The cells in the grid can be connected horizontally or vertically, but not diagonally. The same cell may not be used more than once. The problem involves a 2D grid (list of lists) of characters and a string that represents the word. Your task is to determine if the word exists in the grid. Write a function that takes the following inputs: 1. `matrix`: A 2D list of characters representing the grid. 2. `word`: A string representing the word to search for in the grid. The function should return `True` if the word exists in the grid, and `False` otherwise. # Example: ```python matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" print(word_search(matrix, word)) # Output: True word = \\"SEE\\" print(word_search(matrix, word)) # Output: True word = \\"ABCB\\" print(word_search(matrix, word)) # Output: False ``` # Requirements: 1. Implement the function `word_search(matrix, word)` as described. 2. Use Depth-First Search (DFS) to search the grid for the word. 3. Ensure that each cell is visited at most once for each attempt to find the word. 4. Do not modify the input matrix. The following pseudo code may help you envision the function\'s structure: ```python def word_search(matrix, word): def dfs(x, y, word_index): # If the entire word is found if word_index == len(word): return True # Boundary conditions and character match check if (x < 0 or x >= len(matrix) or y < 0 or y >= len(matrix[0]) or matrix[x][y] != word[word_index]): return False # Save current cell value and mark it visited temp = matrix[x][y] matrix[x][y] = \'#\' # Explore all 4 possible directions (up, down, left, right) found = dfs(x + 1, y, word_index + 1) or dfs(x - 1, y, word_index + 1) or dfs(x, y + 1, word_index + 1) or dfs(x, y - 1, word_index + 1) # Restore the current cell\'s value and return result matrix[x][y] = temp return found # Iterate over each cell in the grid for i in range(len(matrix)): for j in range(len(matrix[0])): # Start DFS if the first letter matches if matrix[i][j] == word[0] and dfs(i, j, 0): return True return False ```","solution":"def word_search(matrix, word): def dfs(x, y, word_index): # If the entire word is found if word_index == len(word): return True # Boundary conditions and character match check if (x < 0 or x >= len(matrix) or y < 0 or y >= len(matrix[0]) or matrix[x][y] != word[word_index]): return False # Save current cell value and mark it visited temp = matrix[x][y] matrix[x][y] = \'#\' # Explore all 4 possible directions (up, down, left, right) found = dfs(x + 1, y, word_index + 1) or dfs(x - 1, y, word_index + 1) or dfs(x, y + 1, word_index + 1) or dfs(x, y - 1, word_index + 1) # Restore the current cell\'s value and return result matrix[x][y] = temp return found # Iterate over each cell in the grid for i in range(len(matrix)): for j in range(len(matrix[0])): # Start DFS if the first letter matches if matrix[i][j] == word[0] and dfs(i, j, 0): return True return False"},{"question":"Create a function named `generate_pca_components` that uses Principal Component Analysis (PCA) to reduce the dimensionality of a given dataset. The function should return the dataset transformed into the specified number of principal components. You will use the `PCA` class from the `sklearn.decomposition` module. **Function Signature:** ```python def generate_pca_components(data, n_components=2): Reduce the dimensionality of the dataset using PCA. Parameters: data (np.ndarray): The input dataset of shape (n_samples, n_features). n_components (int): The number of principal components to compute. Default is 2. Returns: transformed_data (np.ndarray): The dataset transformed into principal components of shape (n_samples, n_components). ``` **Requirements:** 1. Use the `PCA` class from the `sklearn.decomposition` module to perform PCA on the dataset. 2. Fit and transform the dataset using the PCA instance to reduce its dimensionality. 3. Ensure the returned dataset has the shape (n_samples, n_components). # Example Usage: ```python import numpy as np # Sample dataset data = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]) transformed_data = generate_pca_components(data, n_components=2) print(transformed_data.shape) # Output: (3, 2) ``` You are required to implement this function following the specifications and using the mentioned libraries.","solution":"import numpy as np from sklearn.decomposition import PCA def generate_pca_components(data, n_components=2): Reduce the dimensionality of the dataset using PCA. Parameters: data (np.ndarray): The input dataset of shape (n_samples, n_features). n_components (int): The number of principal components to compute. Default is 2. Returns: transformed_data (np.ndarray): The dataset transformed into principal components of shape (n_samples, n_components). pca = PCA(n_components=n_components) transformed_data = pca.fit_transform(data) return transformed_data"},{"question":"**Problem Statement:** In this problem, you are asked to implement a function that takes a list of integers and rotates it to the right by a specified number of places. Rotating a list to the right means that elements are shifted to the right, and the last elements wrap around to the beginning of the list. For example, rotating the list `[1, 2, 3, 4, 5]` to the right by `2` positions would result in the list `[4, 5, 1, 2, 3]`. # Objective Create a function `rotate_list` that takes in: - `lst`: a list of integers, - `k`: an integer indicating the number of positions to rotate the list. The function should return a new list that is the result of rotating the original list to the right by `k` positions. # Example ```python def rotate_list(lst, k): # implement the function here pass # Example usage: lst = [1, 2, 3, 4, 5] k = 2 result = rotate_list(lst, k) print(result) # Expected output: [4, 5, 1, 2, 3] ``` # Requirements 1. **Input Constraints**: - The length of the list `lst` will be between `1` and `10^5`. - The value of `k` will be a non-negative integer. 2. **Performance Constraints**: - The function should properly handle cases where `k` is greater than the length of the list. - Aim for an optimal solution with minimum time complexity of O(n). # Hint To handle the case where `k` is greater than the length of the list, you can use modulo operation: ```python k = k % len(lst) ``` This will ensure that rotating by more than the length of the list yields a valid result. # Additional Examples ```python # Example 2: lst = [1, 2, 3] k = 4 result = rotate_list(lst, k) print(result) # Expected output: [3, 1, 2] # Example 3: lst = [1] k = 0 result = rotate_list(lst, k) print(result) # Expected output: [1] ```","solution":"def rotate_list(lst, k): Rotates the list lst to the right by k positions. if not lst: return [] k = k % len(lst) # To handle k greater than length of list return lst[-k:] + lst[:-k] if k else lst"},{"question":"You are tasked with writing a Python function `longest_substring_with_k_distinct` that takes two arguments: a string `s` and an integer `k`. The goal is to find the length of the longest substring of `s` that contains at most `k` distinct characters. To solve this problem, use the sliding window technique with a hashmap to track the count of characters within the current window. Expand the window by moving the right boundary and add characters to the hashmap. If the size of the hashmap exceeds `k`, shrink the window from the left until the size of the hashmap is within `k` again. Keep track of the maximum window size found during the process. Function signature: ```python def longest_substring_with_k_distinct(s: str, k: int) -> int: pass ``` Example: ```python s = \\"eceba\\" k = 2 length = longest_substring_with_k_distinct(s, k) print(length) # Output should be 3, as the substring \\"ece\\" contains 2 distinct characters ```","solution":"def longest_substring_with_k_distinct(s: str, k: int) -> int: from collections import defaultdict if k == 0 or not s: return 0 left = 0 max_length = 0 char_count = defaultdict(int) for right in range(len(s)): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function using Python\'s `turtle` graphics library to draw a square. This function should position the turtle at the starting point and make it draw a square with each side measuring 150 units. Function requirements: - The function should be named `draw_square`. - The starting position for the turtle should be at coordinates (0, 0). - The turtle should turn right by 90 degrees after drawing each side of the square. Use the `turtle.setpos`, `turtle.forward`, and `turtle.right` methods from the `turtle` library to achieve this. An understanding of these functions is key to solving this problem correctly. Here\'s a breakdown of the turtle library functions you will be using: 1. `turtle.setpos(x, y)`: Moves the turtle to the specified coordinates (x, y). 2. `turtle.forward(distance)`: Moves the turtle forward by the specified distance. 3. `turtle.right(angle)`: Turns the turtle right by the specified angle.","solution":"import turtle def draw_square(): Draws a square with each side measuring 150 units using the turtle graphics library. The turtle starts at (0, 0) and turns right by 90 degrees after drawing each side. turtle.setpos(0, 0) for _ in range(4): turtle.forward(150) turtle.right(90) # For testing purpose, the below line can be uncommented to observe the square drawn by turtle # draw_square()"},{"question":"# **Problem: Generating Translator Dictionaries from Sentence Pairs** In this problem, you will create a function `create_translator` that takes in pairs of sentences in two different languages and generates two translation dictionaries: one for translating from the first language to the second, and another for translating from the second language to the first. Each dictionary should map words in one language to their corresponding translations in the other. # **Function Signature:** ```python def create_translator(sentence_pairs): Create translation dictionaries from pairs of sentences in two languages. Parameters ---------- sentence_pairs : list of tuples A list where each element is a tuple of two sentences (s1, s2). The first element of the tuple is a sentence in the first language, and the second element is the corresponding translation in the second language. Returns ------- lang1_to_lang2 : dict A dictionary mapping words in the first language to words in the second language. lang2_to_lang1 : dict A dictionary mapping words in the second language to words in the first language. ``` # **Requirements:** 1. Assume that the words in the sentences are separated by spaces and punctuation is removed. 2. The translation should map each word in the first language to the corresponding word in the second language based on the positions in the sentence. 3. Handle the translations such that each word maps to the first occurrence in the other sentence. # **Example:** ```python sentence_pairs = [ (\\"hello world\\", \\"hola mundo\\"), (\\"world hello\\", \\"mundo hola\\") ] translator1, translator2 = create_translator(sentence_pairs) print(translator1) # Should Output: # {\'hello\': \'hola\', \'world\': \'mundo\'} print(translator2) # Should Output: # {\'hola\': \'hello\', \'mundo\': \'world\'} ``` Use the example above to validate your implementation. # **Objective:** Your goal is to implement the `create_translator` function to generate translation dictionaries that correctly map words between the two languages based on the given sentence pairs.","solution":"def create_translator(sentence_pairs): Create translation dictionaries from pairs of sentences in two languages. Parameters ---------- sentence_pairs : list of tuples A list where each element is a tuple of two sentences (s1, s2). The first element of the tuple is a sentence in the first language, and the second element is the corresponding translation in the second language. Returns ------- lang1_to_lang2 : dict A dictionary mapping words in the first language to words in the second language. lang2_to_lang1 : dict A dictionary mapping words in the second language to words in the first language. lang1_to_lang2 = {} lang2_to_lang1 = {} for s1, s2 in sentence_pairs: words1 = s1.split() words2 = s2.split() for w1, w2 in zip(words1, words2): if w1 not in lang1_to_lang2: lang1_to_lang2[w1] = w2 if w2 not in lang2_to_lang1: lang2_to_lang1[w2] = w1 return lang1_to_lang2, lang2_to_lang1"},{"question":"You need to create a Python function named `flatten_dict` that takes a nested dictionary as input and returns a flattened version of it. This exercise will help you practice dictionary manipulation and recursion techniques in Python. # Function Signature ```python def flatten_dict(input_dict: dict) -> dict: pass ``` # Input - `input_dict`: A nested dictionary where keys are strings and values can be either strings, integers, or other dictionaries. # Output - A flattened dictionary where nested keys are combined into a single key with levels separated by a period (`.`). # Example ```python >>> input_dict = { ... \'a\': 1, ... \'b\': { ... \'c\': 2, ... \'d\': { ... \'e\': 3 ... } ... } ... } >>> flatten_dict(input_dict) {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3} ``` # Requirements 1. The function must handle dictionaries nested to any depth. 2. Ensure that keys in the resulting flattened dictionary retain the full path using period (`.`) as the separator. 3. Original values should remain unchanged, only keys should be modified. # Instructions 1. Import any necessary libraries (standard libraries only). 2. Define the `flatten_dict` function. 3. Implement the function using recursion to navigate through nested dictionaries. 4. Concatenate nested keys using period as the separator to create the flattened key structure. 5. Return the resulting flattened dictionary.","solution":"def flatten_dict(input_dict, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. items = [] for k, v in input_dict.items(): new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You are tasked with creating a function to normalize a given dataset matrix using the `numpy` library. Normalization is a common preprocessing step in machine learning that scales the dataset so that each feature lies within a specified range, typically [0, 1]. The normalization is done by taking the minimum and maximum values of each feature (column) in the dataset. Your function should take an input matrix `X` (a 2D NumPy array of shape `(N, d)`) and return a new matrix where each feature of `X` has been normalized to the range [0, 1]. Ensure that if a feature has the same minimum and maximum values, it remains unchanged (to prevent division by zero). Function Signature: ```python def normalize_features(X): Normalizes the features of the input array X to the range [0, 1]. Parameters: X (np.ndarray): Input array of shape (N, d) Returns: np.ndarray: Normalized array of shape (N, d) ``` Requirements: 1. Use `numpy.min` and `numpy.max` to find the minimum and maximum values of each feature. 2. Implement the normalization formula `X_normalized = (X - min) / (max - min)` for each feature. 3. Avoid division by zero by checking if the maximum and minimum values of a feature are the same. Your task is to correctly implement the function `normalize_features` using the specified `numpy` functions. Example: Input: ```python X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ``` Output: ```python array([[0. , 0. , 0. ], [0.5 , 0.5 , 0.5 ], [1. , 1. , 1. ]]) ```","solution":"import numpy as np def normalize_features(X): Normalizes the features of the input array X to the range [0, 1]. Parameters: X (np.ndarray): Input array of shape (N, d) Returns: np.ndarray: Normalized array of shape (N, d) X_min = np.min(X, axis=0) X_max = np.max(X, axis=0) # Prevent division by zero range_ = X_max - X_min range_ = np.where(range_ == 0, 1, range_) X_normalized = (X - X_min) / range_ return X_normalized"},{"question":"In text processing, the concept of **Inverted Index** is commonly used to optimize search queries. An inverted index is a mapping from content, such as words or terms, to its locations in a set of documents. It\'s a crucial component in many search engine algorithms. Your task is to write a function `build_inverted_index(docs)` that creates an inverted index from a given list of documents. Each document is represented as a string and the function should return a dictionary where each key is a word and the corresponding value is a set of indices representing the documents in which the word appears. To solve this problem, you are required to use the following methods: - `str.split()`: To split a document into individual words. - `set.add()`: To add an element to a set. Function Signature: `def build_inverted_index(docs):` **Input:** - `docs` (List[str]): A list of strings, where each string represents a document. **Output:** - (dict): A dictionary where each key is a word (str) and the value is a set of indices (int). **Example:** ```python # Example Input docs = [ \\"this is the first document\\", \\"this document is the second document\\", \\"and this is the third one\\", \\"is this the first document\\" ] # Output print(build_inverted_index(docs)) # Output: # { # \'this\': {0, 1, 2, 3}, # \'is\': {0, 1, 2, 3}, # \'the\': {0, 1, 2, 3}, # \'first\': {0, 3}, # \'document\': {0, 1, 3}, # \'second\': {1}, # \'and\': {2}, # \'third\': {2}, # \'one\': {2} # } ```","solution":"def build_inverted_index(docs): Creates an inverted index from a list of documents. Args: docs (List[str]): A list of documents (strings). Returns: dict: A dictionary where each key is a word and the value is a set of indices of documents that contain the word. inverted_index = {} for doc_index, doc in enumerate(docs): words = doc.split() for word in words: if word in inverted_index: inverted_index[word].add(doc_index) else: inverted_index[word] = {doc_index} return inverted_index"},{"question":"Reads a column (specified by name) from a CSV file and removes all rows containing duplicate values in the specified column, considering only the first occurrence. The function should then return a DataFrame containing the processed rows without duplicates. The function should raise the exception for: - FileNotFoundError: If the CSV file does not exist at the specified path. - ValueError: If the specified column is not found in the CSV file. The function should output with: DataFrame: A DataFrame containing only the unique rows based on the specified column. You should write self-contained code starting with: ``` import pandas as pd def remove_duplicates(csv_file_location, column_name): ```","solution":"import pandas as pd def remove_duplicates(csv_file_location, column_name): Reads a CSV file and removes all rows containing duplicate values in the specified column, considering only the first occurrence. Args: csv_file_location (str): Path to the CSV file. column_name (str): Name of the column to check for duplicates. Returns: pd.DataFrame: Processed DataFrame with duplicate rows removed. Raises: FileNotFoundError: If the CSV file does not exist at the specified path. ValueError: If the specified column is not found in the CSV file. try: df = pd.read_csv(csv_file_location) except FileNotFoundError as e: raise FileNotFoundError(f\\"The file at path {csv_file_location} does not exist.\\") from e if column_name not in df.columns: raise ValueError(f\\"The column \'{column_name}\' is not found in the CSV file.\\") df = df.drop_duplicates(subset=[column_name], keep=\'first\') return df"},{"question":"You are given a DataFrame containing information about various products in an inventory. Your task is to write a function `inventory_analysis(df)` that calculates the total value of all products in stock, the average price of products, and identifies the product with the highest and lowest price. The DataFrame will have columns named \\"Product\\", \\"Price\\", and \\"Quantity\\". Here is a brief outline of the function requirements: 1. The function should calculate the total value of all products in stock using the formula: `total_value = sum(Price * Quantity)`. 2. It should calculate the average price of the products. 3. It should identify and print the product with the highest price and the product with the lowest price. 4. The function should print the total inventory value, average price, product with the highest price, and product with the lowest price in a formatted string. Here is an example of the DataFrame: ``` import pandas as pd data = { \'Product\': [\'A\', \'B\', \'C\', \'D\', \'E\'], \'Price\': [100, 200, 150, 50, 300], \'Quantity\': [10, 5, 8, 20, 2] } df = pd.DataFrame(data) ``` Function signature: ```python def inventory_analysis(df): Analyzes and displays inventory statistics including total value, average price, and extreme prices. ```","solution":"import pandas as pd def inventory_analysis(df): Analyzes and displays inventory statistics including total value, average price, and extreme prices (highest and lowest price). Parameters: df (pd.DataFrame): DataFrame containing \'Product\', \'Price\', and \'Quantity\'. Returns: dict: Dictionary containing total value, average price, product with highest price, and product with lowest price. # Calculate total inventory value total_value = (df[\'Price\'] * df[\'Quantity\']).sum() # Calculate average price of products average_price = df[\'Price\'].mean() # Find product with the highest price max_price_product = df.loc[df[\'Price\'].idxmax()][\'Product\'] # Find product with the lowest price min_price_product = df.loc[df[\'Price\'].idxmin()][\'Product\'] result = { \'Total Value\': total_value, \'Average Price\': average_price, \'Max Price Product\': max_price_product, \'Min Price Product\': min_price_product } return result"},{"question":"In many applications, it is necessary to handle time series data efficiently. One common task is to compute the moving average over a specified window for a given time series. The goal of this problem is to create a function `moving_average` that computes the moving average of an input list of values over a specified window size. # Function Signature ```python def moving_average(values: list, window_size: int) -> list: Computes the moving average of an input list over a specified window size. Parameters: - values (list): The input list of numerical values. - window_size (int): The window size for the moving average computation. Returns: - list: A list containing the moving averages for each possible position in the input list. ``` # Requirements - You **must not** use any third-party libraries such as NumPy or Pandas. - The input `values` is a list of numerical values. - The `window_size` parameter is an integer specifying the number of elements to consider for each window (it will always be a positive integer and less than or equal to the length of the `values` list). The moving average at each position is defined as the average of the last `window_size` elements, including the current element. For positions where there are fewer than `window_size` elements preceding or at the current position, compute the average using all available elements up to the current position. Example usage: ```python values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] window_size = 3 result = moving_average(values, window_size) print(result) # Expected output: [1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] ``` # Constraints - Assume the input `values` is always a valid list of numerical values. - The `window_size` will always be a positive integer less than or equal to the length of the `values` list. - The function should return a list of floating-point numbers representing the moving averages.","solution":"def moving_average(values: list, window_size: int) -> list: Computes the moving average of an input list over a specified window size. Parameters: - values (list): The input list of numerical values. - window_size (int): The window size for the moving average computation. Returns: - list: A list containing the moving averages for each possible position in the input list. averages = [] for i in range(len(values)): if i < window_size - 1: # For the first few elements where the full window is not available yet average = sum(values[:i+1]) / (i+1) else: # For elements where the full window is available average = sum(values[i-window_size+1:i+1]) / window_size averages.append(average) return averages"},{"question":"Write a function that performs K-means clustering on a given 2D dataset and plots the resulting clusters. The function should generate synthetic data, apply K-means clustering to it, and visualize the clusters and their centroids using Matplotlib. The function should output: tuple: A tuple containing the coordinates of the final cluster centroids. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def cluster_data(num_samples=300, num_clusters=3, random_seed=None): ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans def cluster_data(num_samples=300, num_clusters=3, random_seed=None): Generate synthetic data, apply K-means clustering to it, and visualize the clusters. Args: num_samples (int): Number of samples to generate. num_clusters (int): Number of clusters for K-means. random_seed (int, optional): Seed for the random number generator. Returns: tuple: A tuple containing the coordinates of the final cluster centroids. if random_seed is not None: np.random.seed(random_seed) # Generate synthetic data X = np.random.randn(num_samples, 2) # Apply K-means clustering kmeans = KMeans(n_clusters=num_clusters, random_state=random_seed) kmeans.fit(X) # Get cluster centroids centroids = kmeans.cluster_centers_ # Plot the clusters and centroids plt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_, cmap=\'viridis\', marker=\'o\', alpha=0.5) plt.scatter(centroids[:, 0], centroids[:, 1], c=\'red\', marker=\'x\') plt.title(\'K-means Clustering\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.show() return tuple(map(tuple, centroids))"},{"question":"You are tasked with developing a program to simulate a basic grocery shopping checkout system. The program should calculate the total cost of the items including sales tax and apply discounts based on specific criteria. Your task is to implement a function named `calculate_total_cost`. This function should: 1. Accept a list of dictionaries, where each dictionary represents an item and has `name`, `price`, and `quantity` keys. 2. Calculate the subtotal of all items. 3. Apply a discount of 10% if the subtotal exceeds 100. 4. Add a sales tax of 8% to the final amount (after applying discounts, if any). 5. Return the total cost rounded to two decimal places. **Requirements:** - Use appropriate data structures to handle the item list. - Ensure the calculations are accurate and handle edge cases, such as empty item lists. **Function Signature:** ```python def calculate_total_cost(item_list): pass ``` Example: ```python items = [ {\\"name\\": \\"apple\\", \\"price\\": 1.50, \\"quantity\\": 10}, {\\"name\\": \\"milk\\", \\"price\\": 3.80, \\"quantity\\": 2}, {\\"name\\": \\"bread\\", \\"price\\": 2.50, \\"quantity\\": 1} ] print(calculate_total_cost(items)) # Output: 23.62 ```","solution":"def calculate_total_cost(item_list): Calculates the total cost of items including sales tax and applies discounts. Parameters: item_list: List[Dict[str, Union[str, float, int]]] - List of dictionaries with \'name\', \'price\', and \'quantity\'. Returns: float: Total cost rounded to two decimal places. # Calculate the subtotal subtotal = sum(item[\'price\'] * item[\'quantity\'] for item in item_list) # Apply 10% discount if subtotal exceeds 100 if subtotal > 100: subtotal *= 0.90 # Add 8% sales tax total = subtotal * 1.08 return round(total, 2)"},{"question":"You are asked to write a function, `merge_sorted_arrays`, that takes a list of sorted arrays (each array is sorted in ascending order) and merges them into one sorted array (in ascending order). You must implement an efficient solution to handle the case where the input list contains a large number of arrays and each array could have a large number of elements. To achieve this, consider using a min-heap (priority queue) to extract the smallest elements efficiently from the multiple sorted arrays. Here are the detailed step-by-step requirements: 1. Initialize a min-heap to keep track of the next smallest elements from each array. 2. Push the first element of each array into the min-heap along with the index of the array it came from. 3. Continuously extract the smallest element from the heap and add it to the merged array. 4. If the extracted element has a next element in the same array, push that next element into the heap. 5. Repeat the process until all elements from all arrays have been merged into the final sorted array. 6. Return the final merged sorted array. Your implementation should handle edge cases such as empty input arrays and arrays of different lengths. **Function Signature:** ```python import heapq from typing import List def merge_sorted_arrays(arrays: List[List[int]]) -> List[int]: pass ``` **Example:** ```python arrays = [[1, 4, 7], [2, 5, 8], [3, 6, 9]] merge_sorted_arrays(arrays) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] arrays = [[], [1, 3, 5], [2, 4, 6]] merge_sorted_arrays(arrays) # Output: [1, 2, 3, 4, 5, 6] ```","solution":"import heapq from typing import List def merge_sorted_arrays(arrays: List[List[int]]) -> List[int]: min_heap = [] for i, array in enumerate(arrays): if array: heapq.heappush(min_heap, (array[0], i, 0)) merged_array = [] while min_heap: val, array_idx, element_idx = heapq.heappop(min_heap) merged_array.append(val) if element_idx + 1 < len(arrays[array_idx]): next_tuple = (arrays[array_idx][element_idx + 1], array_idx, element_idx + 1) heapq.heappush(min_heap, next_tuple) return merged_array"},{"question":"You are provided with a dataset that tracks the sales of different products. Your goal is to write a function `calculate_sales_analytics` to compute the total sales for each product and the product with the highest sales from the provided dataset. The dataset is given in the form of a list of lists, where each inner list represents a sales record. - Each record has the following structure: - `sale_id` (str): ID of the sale - `product_id` (str): ID of the product - `unit_price` (float): Unit price of the product - `quantity` (int): Quantity of the product sold You can use the `pandas` library for this task. Steps to be performed: 1. Convert the list of lists into a `pandas.DataFrame`. 2. Calculate the total sales for each product by multiplying `unit_price` and `quantity` and summing it up for each product. 3. Identify the product with the highest sales. 4. Return the total sales for each product and the product ID with the highest sales. Function Signature: ```python def calculate_sales_analytics(data): pass ``` Example: ```python data = [ [\'1\', \'A\', 10.0, 2], [\'2\', \'A\', 10.0, 3], [\'3\', \'B\', 20.0, 1], [\'4\', \'B\', 20.0, 2], [\'5\', \'C\', 15.0, 1] ] total_sales, top_product = calculate_sales_analytics(data) print(f\\"Total Sales: {total_sales}\\") print(f\\"Top Product: {top_product}\\") ``` Expected Output: ``` Total Sales: {\'A\': 50.0, \'B\': 60.0, \'C\': 15.0} Top Product: \'B\' ``` Note: - Assume that all records have valid data and the `product_id`, `unit_price`, and `quantity` fields will never be None or empty.","solution":"import pandas as pd def calculate_sales_analytics(data): # Convert the list of lists into a pandas DataFrame df = pd.DataFrame(data, columns=[\'sale_id\', \'product_id\', \'unit_price\', \'quantity\']) # Calculate the total sales for each product df[\'total_sales\'] = df[\'unit_price\'] * df[\'quantity\'] # Sum up the total sales for each product total_sales = df.groupby(\'product_id\')[\'total_sales\'].sum().to_dict() # Identify the product with the highest sales top_product = df.groupby(\'product_id\')[\'total_sales\'].sum().idxmax() return total_sales, top_product"},{"question":"You are responsible for creating a function that processes a JSON string from a file and returns specific values. The JSON string includes details about various users, and you need to extract the names of users who are marked as \\"active.\\" **Task:** Write a function named `get_active_users` that takes one argument: - `file_path`: a string representing the file path of the JSON file that contains the users\' details. The function should: - Read the contents of the JSON file specified by the file path. - Parse the JSON string into a Python dictionary using the `json` library. - Extract the names of users who have \\"active\\" status set to `True`. - Return a list of names of active users. **Constraints:** - You should use the `json` library from the Python standard library to parse the JSON string. - The JSON file content will always have a valid format as specified and will contain a list of dictionaries representing users. **Example:** If the file `users.json` contains: ```json [ {\\"name\\": \\"Alice\\", \\"active\\": true}, {\\"name\\": \\"Bob\\", \\"active\\": false}, {\\"name\\": \\"Charlie\\", \\"active\\": true} ] ``` Then calling `get_active_users(\\"users.json\\")` should return: ``` [\\"Alice\\", \\"Charlie\\"] ``` **Note:** Ensure that the function only returns the names of users who are marked as active.","solution":"import json def get_active_users(file_path): Reads a JSON file, extracts and returns the names of active users. Args: - file_path: str, the path to the JSON file containing the user details. Returns: - List of names of active users. with open(file_path, \'r\') as file: users = json.load(file) active_users = [user[\'name\'] for user in users if user.get(\'active\')] return active_users"},{"question":"In this problem, you will implement a function to solve the Traveling Salesman Problem (TSP) using a heuristic approach: the nearest neighbor algorithm. The objective of TSP is to find the shortest possible route that visits each city exactly once and returns to the origin city. The nearest neighbor algorithm builds the path incrementally, starting from an initial city and repeatedly visiting the nearest unvisited city until all cities are visited. Here are the core functionalities you need to implement: 1. **Initialization**: Select the starting city. 2. **Nearest Neighbor Selection**: From the current city, find the nearest unvisited city. 3. **Route Construction**: Add the nearest unvisited city to the route and mark it as visited. 4. **Completion**: Repeat step 2 and 3 until all cities are visited, then return to the starting city. The function you need to write is `tsp_nearest_neighbor(cities)`, where: - `cities` is a 2D list where each element is a list of `[x, y]` coordinates representing the position of a city. The function should return the constructed route: - **route**: A list of indices representing the order of visited cities including returning to the starting city. Use the following utility function to calculate the Euclidean distance between two cities: ```python def euclidean_distance(city1, city2): return ((city1[0] - city2[0]) ** 2 + (city1[1] - city2[1]) ** 2) ** 0.5 ``` Function Signature: ```python def tsp_nearest_neighbor(cities): pass ```","solution":"def euclidean_distance(city1, city2): return ((city1[0] - city2[0]) ** 2 + (city1[1] - city2[1]) ** 2) ** 0.5 def tsp_nearest_neighbor(cities): n = len(cities) visited = [False] * n route = [] # Start from the first city current_city = 0 visited[current_city] = True route.append(current_city) for _ in range(n - 1): nearest_city = None nearest_distance = float(\'inf\') for i in range(n): if not visited[i]: distance = euclidean_distance(cities[current_city], cities[i]) if distance < nearest_distance: nearest_distance = distance nearest_city = i current_city = nearest_city visited[current_city] = True route.append(current_city) # Return to the starting city route.append(route[0]) return route"},{"question":"Given a 2D grid of integers representing a height map where each grid cell is a unit cube, write a function to calculate the total volume of water that could be trapped after raining. You are required to use techniques that involve both breadth-first search (BFS) and priority queues (heaps). In this problem, water trapped at a cell is determined by the minimum of the maximum heights seen from its neighboring cells minus its own height. **Function Signature:** ```python def trapRainWater(heightMap: List[List[int]]) -> int: ``` **Inputs:** - `heightMap` (List[List[int]]): 2D list representing the height map. **Output:** - `int`: Total volume of water trapped. **Implementation Details:** 1. **Edge Cases:** - If the height map dimensions `m` or `n` are less than 3, return 0 as water cannot be trapped. 2. **Initialize Structures:** - Use a priority queue to store boundary cells. - Use a visited matrix to mark the cells that have already been processed. 3. **Boundary Initialization:** - Push all the boundary cells into the priority queue. - Mark these cells as visited. 4. **BFS and Trapping Water:** - While the priority queue is not empty, extract the cell with the minimum height. - For each neighboring cell that has not been visited: - Calculate the potential trapped water at this cell. - Update the total water volume. - Push the neighboring cell into the priority queue with the maximum height seen so far. **Example:** For the height map: ```python heightMap = [ [1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1] ] ``` The function call: ```python water_volume = trapRainWater(heightMap) ``` **Constraints:** - All heights are positive integers. - The dimensions of the height map are at most 200x200. # Explanation and Sample Calculation: Given the input height map, the grid is surrounded by a higher boundary that could trap water. The algorithm follows: 1. Push all the boundary cells into the priority queue. 2. Apply the BFS approach, starting from the lowest cell in the queue. 3. At each cell: - Compute the newly trapped water. - Update the total water volume and push neighboring cells into the priority queue. The expected result for the `heightMap` provided would be `4`, as the cells in the middle trap a total of 4 units of water.","solution":"from heapq import heappop, heappush from typing import List def trapRainWater(heightMap: List[List[int]]) -> int: if not heightMap or not heightMap[0]: return 0 m, n = len(heightMap), len(heightMap[0]) if m < 3 or n < 3: return 0 visited = [[False] * n for _ in range(m)] heap = [] # Push all the boundary cells into the heap for i in range(m): for j in range(n): if i == 0 or j == 0 or i == m - 1 or j == n - 1: heappush(heap, (heightMap[i][j], i, j)) visited[i][j] = True # Directions for neighbor cells (left, right, up, down) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] trapped_water = 0 while heap: height, x, y = heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: visited[nx][ny] = True trapped_water += max(0, height - heightMap[nx][ny]) heappush(heap, (max(height, heightMap[nx][ny]), nx, ny)) return trapped_water"},{"question":"Develop a function that generates a synthetic dataset with three clusters using sklearn\'s make_blobs, applies the DBSCAN clustering model, and visualizes the resulting clusters using matplotlib. The function should also handle noise points by assigning them a unique marker and color. Ensure that the visualization includes cluster centers depicted as large markers. The function should implement the following steps: - Generate a dataset with 400 samples, 2 features, and 3 centers using sklearn\'s make_blobs. - Fit a DBSCAN model on the data with specified `eps` and `min_samples` parameters. - Identify the cluster centers by computing the mean of points assigned to each cluster. - Visualize the clusters, cluster centers, and noise points in a scatter plot with different colors and markers for each cluster, and a distinct marker and color for noise points. - Output the plot object. Ensure you have the required libraries installed: ``` pip install numpy matplotlib scikit-learn ``` You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import make_blobs from sklearn.cluster import DBSCAN def task_func(eps=0.5, min_samples=5, seed=None): # Step 1: Generate the dataset X, _ = make_blobs(n_samples=400, n_features=2, centers=3, random_state=seed) # Step 2: Fit the DBSCAN model dbscan = DBSCAN(eps=eps, min_samples=min_samples) clusters = dbscan.fit_predict(X) # Step 3: Compute the cluster centers unique_clusters = set(clusters) unique_clusters.discard(-1) # Remove noise label if present cluster_centers = np.array([X[clusters == c].mean(axis=0) for c in unique_clusters]) # Step 4: Plot the clusters with different colors and markers plt.figure(figsize=(10, 6)) # Plot each cluster for cluster_id in unique_clusters: plt.scatter(X[clusters == cluster_id, 0], X[clusters == cluster_id, 1], label=f\'Cluster {cluster_id}\') # Plot noise points plt.scatter(X[clusters == -1, 0], X[clusters == -1, 1], color=\'k\', marker=\'x\', label=\'Noise\') # Plot cluster centers plt.scatter(cluster_centers[:, 0], cluster_centers[:, 1], s=200, c=\'red\', marker=\'X\', label=\'Centers\') plt.legend() plt.title(\'DBSCAN Clustering\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.show() ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import make_blobs from sklearn.cluster import DBSCAN def task_func(eps=0.5, min_samples=5, seed=None): # Step 1: Generate the dataset X, _ = make_blobs(n_samples=400, n_features=2, centers=3, random_state=seed) # Step 2: Fit the DBSCAN model dbscan = DBSCAN(eps=eps, min_samples=min_samples) clusters = dbscan.fit_predict(X) # Step 3: Compute the cluster centers unique_clusters = set(clusters) unique_clusters.discard(-1) # Remove noise label if present cluster_centers = np.array([X[clusters == c].mean(axis=0) for c in unique_clusters]) # Step 4: Plot the clusters with different colors and markers plt.figure(figsize=(10, 6)) # Plot each cluster for cluster_id in unique_clusters: plt.scatter(X[clusters == cluster_id, 0], X[clusters == cluster_id, 1], label=f\'Cluster {cluster_id}\') # Plot noise points plt.scatter(X[clusters == -1, 0], X[clusters == -1, 1], color=\'k\', marker=\'x\', label=\'Noise\') # Plot cluster centers plt.scatter(cluster_centers[:, 0], cluster_centers[:, 1], s=200, c=\'red\', marker=\'X\', label=\'Centers\') plt.legend() plt.title(\'DBSCAN Clustering\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.show() return plt"},{"question":"You are given a binary search tree (BST) and need to validate whether this tree meets the properties of a BST. Additionally, you are required to implement two traversal methods: in-order and pre-order traversals, and return the output of these traversals as lists. Specifically, you need to: 1. Implement a function to validate if a binary tree is a BST. 2. Perform in-order traversal of the tree and return the result as a list. 3. Perform pre-order traversal of the tree and return the result as a list. You are required to write three functions: 1. `is_valid_bst` to validate if the given tree is a BST. 2. `in_order_traversal` to perform in-order traversal. 3. `pre_order_traversal` to perform pre-order traversal. **Function Signatures:** ```python def is_valid_bst(root: Optional[TreeNode]) -> bool: pass def in_order_traversal(root: Optional[TreeNode]) -> List[int]: pass def pre_order_traversal(root: Optional[TreeNode]) -> List[int]: pass ``` **Example:** ```python # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Helper function to insert nodes in the BST def insert_bst(root, val): if root is None: return TreeNode(val) else: if root.val < val: root.right = insert_bst(root.right, val) else: root.left = insert_bst(root.left, val) return root # Example tree: # 5 # / # 3 7 # / / # 2 4 6 8 root = TreeNode(5) root = insert_bst(root, 3) root = insert_bst(root, 7) root = insert_bst(root, 2) root = insert_bst(root, 4) root = insert_bst(root, 6) root = insert_bst(root, 8) print(is_valid_bst(root)) # Output: True print(in_order_traversal(root)) # Output: [2, 3, 4, 5, 6, 7, 8] print(pre_order_traversal(root)) # Output: [5, 3, 2, 4, 7, 6, 8] ``` **Constraints:** - The number of nodes in the tree is in the range [1, 10^4]. - -10^4 <= Node.val <= 10^4","solution":"from typing import Optional, List # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root: Optional[TreeNode]) -> bool: Validate if the given tree is a Binary Search Tree (BST). def validate(node, low=float(\'-inf\'), high=float(\'inf\')) -> bool: if not node: return True if node.val <= low or node.val >= high: return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root) def in_order_traversal(root: Optional[TreeNode]) -> List[int]: Perform in-order traversal of the tree and return the result as a list. result = [] def inorder(node): if not node: return inorder(node.left) result.append(node.val) inorder(node.right) inorder(root) return result def pre_order_traversal(root: Optional[TreeNode]) -> List[int]: Perform pre-order traversal of the tree and return the result as a list. result = [] def preorder(node): if not node: return result.append(node.val) preorder(node.left) preorder(node.right) preorder(root) return result"},{"question":"You are required to write a Python function `analyze_transactions` that processes a list of financial transactions and returns a summary of useful statistics. Each transaction is represented as a dictionary with keys: `\'id\'`, `\'amount\'`, `\'timestamp\'`, and `\'type\'`. The `\'type\'` key can have values `\'income\'` or `\'expense\'`. The function should provide the following summary information: 1. The total number of transactions. 2. The total amount of income. 3. The total amount of expenses. 4. The average transaction amount. 5. The highest single transaction amount. 6. The number of transactions per type. Here are the specific requirements for the function: - The function `analyze_transactions` takes a single argument: - `transactions`: A list of dictionaries, where each dictionary represents a transaction with keys `\'id\'`, `\'amount\'`, `\'timestamp\'`, and `\'type\'`. - The function should return a dictionary with the following keys: - `\'total_transactions\'`: The total count of transactions. - `\'total_income\'`: The sum of all incomes. - `\'total_expense\'`: The sum of all expenses. - `\'average_amount\'`: The average amount per transaction. - `\'max_transaction\'`: The highest transaction amount. - `\'counts_per_type\'`: A dictionary with keys `\'income\'` and `\'expense\'`, each mapping to the number of transactions of that type. Here is the function signature for you to implement: ```python def analyze_transactions(transactions): Analyze a list of transactions and return summary statistics. :param transactions: List of transaction dictionaries. Each dictionary contains: - \'id\': string, unique identifier for the transaction - \'amount\': float, the amount of the transaction - \'timestamp\': string, the time of the transaction in ISO format - \'type\': string, either \'income\' or \'expense\' :return: Dictionary containing summary statistics # Your code here ``` To ensure clarity and functionality, handle cases where: - No transactions are provided (return zero values appropriately). - Amounts are missing or invalid in the transactions (raise a ValueError). - Type is neither `\'income\'` nor `\'expense\'` (raise a ValueError).","solution":"def analyze_transactions(transactions): Analyze a list of transactions and return summary statistics. :param transactions: List of transaction dictionaries. Each dictionary contains: - \'id\': string, unique identifier for the transaction - \'amount\': float, the amount of the transaction - \'timestamp\': string, the time of the transaction in ISO format - \'type\': string, either \'income\' or \'expense\' :return: Dictionary containing summary statistics total_transactions = len(transactions) total_income = 0.0 total_expense = 0.0 total_amount = 0.0 max_transaction = float(\'-inf\') counts_per_type = {\\"income\\": 0, \\"expense\\": 0} if total_transactions == 0: return { \'total_transactions\': 0, \'total_income\': 0.0, \'total_expense\': 0.0, \'average_amount\': 0.0, \'max_transaction\': 0.0, \'counts_per_type\': {\'income\': 0, \'expense\': 0} } for transaction in transactions: try: amount = float(transaction[\'amount\']) transaction_type = transaction[\'type\'] except (ValueError, KeyError): raise ValueError(\'Invalid transaction data\') if transaction_type not in counts_per_type: raise ValueError(\'Transaction type must be either \\"income\\" or \\"expense\\"\') if transaction_type == \\"income\\": total_income += amount if transaction_type == \\"expense\\": total_expense += amount total_amount += amount max_transaction = max(max_transaction, amount) counts_per_type[transaction_type] += 1 average_amount = total_amount / total_transactions if total_transactions else 0.0 max_transaction = max_transaction if total_transactions > 0 else 0.0 return { \'total_transactions\': total_transactions, \'total_income\': total_income, \'total_expense\': total_expense, \'average_amount\': average_amount, \'max_transaction\': max_transaction, \'counts_per_type\': counts_per_type }"},{"question":"You are tasked with writing a function to determine the longest substring with at most two distinct characters from a given string. Your goal is to identify the longest contiguous segment of the string where only two distinct characters are present. **Function Specification** - **Function Name**: `longestSubstringWithTwoDistinctChars` - **Parameters**: - `s` (str): A string containing the input sequence. - **Returns**: An integer representing the length of the longest substring with at most two distinct characters. **Requirements** - You should use a sliding window approach to solve this problem efficiently, handling the characters from the string within the window. **Example** ```python # Example 1 s = \\"eceba\\" # The longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. # The function should return 3. # Example 2 s = \\"ccaabbb\\" # The longest substring with at most two distinct characters is \\"aabbb\\", which has a length of 5. # The function should return 5. ```","solution":"def longestSubstringWithTwoDistinctChars(s): Returns the length of the longest substring with at most two distinct characters. Parameters: s (str): A string containing the input sequence. Returns: int: Length of the longest substring with at most two distinct characters. if len(s) < 3: return len(s) left, right = 0, 0 max_length = 2 char_map = {} while right < len(s): char_map[s[right]] = right right += 1 if len(char_map) > 2: del_idx = min(char_map.values()) del char_map[s[del_idx]] left = del_idx + 1 max_length = max(max_length, right - left) return max_length"},{"question":"You are tasked with creating a function `longest_palindromic_substring(X)` that returns the longest palindromic substring in a given string ( X ). # Requirements 1. You may assume that ( X ) is a non-empty string containing only lowercase alphabets. 2. The implemented function should have a time complexity not exceeding ( O(n^2) ), where ( n ) is the length of ( X ). # Instructions 1. Implement the function `longest_palindromic_substring(X)` which takes a single string ( X ) as a parameter. 2. Use dynamic programming, expanding around centers, or any suitable algorithm to find the longest palindromic substring. 3. Return the longest palindromic substring found in the input string ( X ). # Example ```python def longest_palindromic_substring(X): n = len(X) if n == 0: return \\"\\" start = 0 maxLength = 1 for i in range(1, n): low = i - 1 high = i while low >= 0 and high < n and X[low] == X[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 low = i - 1 high = i + 1 while low >= 0 and high < n and X[low] == X[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 return X[start:start + maxLength] # Example usage print(longest_palindromic_substring(\\"babad\\")) # Output could be \\"bab\\" or \\"aba\\" print(longest_palindromic_substring(\\"cbbd\\")) # Output: \\"bb\\" ``` # Constraints - ( 1 leq |X| leq 1000 ), where ( |X| ) is the length of the string ( X ). - Use clear and efficient coding practices to ensure optimal performance of your solution.","solution":"def longest_palindromic_substring(X): Returns the longest palindromic substring in the given string X. n = len(X) if n == 0: return \\"\\" start = 0 maxLength = 1 for i in range(1, n): # Check for even length palindromes centered around i-1 and i low = i - 1 high = i while low >= 0 and high < n and X[low] == X[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 # Check for odd length palindromes centered around i low = i - 1 high = i + 1 while low >= 0 and high < n and X[low] == X[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 return X[start:start + maxLength]"},{"question":"You are given the task of writing a function that identifies and counts the unique words in a list of strings. The primary goal is to learn how to work with string manipulation and the collections module in Python. Your function should be named `count_unique_words`, and it should accept a single parameter, a list of strings `words`. This list may contain both lowercase and uppercase words, and the count should be case-insensitive. The steps to accomplish this are as follows: 1. Normalize the case of the words to lowercase. 2. Use a dictionary to count the occurrences of each unique word. 3. Print the total count of unique words. 4. Return the dictionary containing the word counts. Here is the required function signature: ```python def count_unique_words(words): # Your code here ``` For testing purposes, you can use the following example list of strings: ```python words = [\'Apple\', \'Banana\', \'apple\', \'banana\', \'Cherry\', \'cherry\', \'banana\', \'Date\'] ``` When `count_unique_words(words)` is called with the above list, it should output: ``` Total unique words: 4 ``` And return: ```python {\'apple\': 2, \'banana\': 3, \'cherry\': 2, \'date\': 1} ``` **Note:** Ensure that your function correctly handles case insensitivity by converting all words to lowercase before counting and efficiently uses the dictionary to count each unique word.","solution":"def count_unique_words(words): Identifies and counts the unique words in a list of strings (case-insensitive). Parameters: words (list of str): List of words. Returns: dict: A dictionary with unique words as keys and their counts as values. # Convert all words to lowercase words = [word.lower() for word in words] # Initialize an empty dictionary to store word counts word_counts = {} # Count each word for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 # Print the total number of unique words print(f\\"Total unique words: {len(word_counts)}\\") return word_counts"},{"question":"Write a Python function `sort_string_words()` that takes a string containing multiple words and returns a string where the words are sorted in alphabetical order while maintaining the original case of each word. The words in the input string are separated by spaces. Your function should: 1. Split the input string into individual words. 2. Sort the words alphabetically, ignoring case. 3. Join the sorted words back into a single string separated by spaces. 4. Return the resulting string. Examples: ```python def sort_string_words(input_str: str) -> str: pass ``` Sample input and output: ```python # Example 1: input_str = \\"Banana apple Cherry\\" result = sort_string_words(input_str) print(result) # Expected Output: \\"apple Banana Cherry\\" # Example 2: input_str = \\"Python is Easy to Learn\\" result = sort_string_words(input_str) print(result) # Expected Output: \\"Easy is Learn Python to\\" ``` Note: - The input string will only contain alphabetic characters and spaces. - You must preserve the original capitalization of each word.","solution":"def sort_string_words(input_str: str) -> str: Splits the input string into words, sorts them alphabetically ignoring case, then joins and returns them as a single string while maintaining original case. words = input_str.split() sorted_words = sorted(words, key=lambda word: word.lower()) return \' \'.join(sorted_words)"},{"question":"You are tasked with creating a function named `analyze_weather_data` which will read weather data from a JSON file, calculate the average temperature for each day, and then output it in descending order by temperature. # Function Details: `analyze_weather_data()` 1. **Input**: None. 2. **Output**: None (All required outputs will be printed directly from the function). # Requirements: 1. The function should read weather data from a JSON file named `weather_data.json`. The JSON file will contain an array of dictionaries, each representing the weather data for a specific hour of a day. Each dictionary contains the following keys: `date`, `hour`, and `temperature`. 2. Calculate the average temperature for each day. 3. Sort the days by the average temperature in descending order. 4. Measure and print the following: - Start time of the process. - End time of the process. - Execution time. - Average temperature for each day, in descending order. # Libraries to Use: 1. `json` module to read the JSON file. 2. `datetime.datetime` and `datetime.timedelta` from the `datetime` module to measure execution time. # Expected Output during execution: The function should print the following formatted outputs: - Average Temperature for each day, in descending order. - Start Time. - End Time. - Execution Time. # Example Execution: ```python analyze_weather_data() # Output: # ------------------------ Weather Data Analysis ------------------------ # Average Temperatures (Descending Order): # 2023-10-01: <avg_temp_1> # 2023-09-30: <avg_temp_2> # ... # Start Time: <start_time> # End Time: <end_time> # Execution Time: <exec_time> ``` Note: Include necessary error handling when reading the JSON file to handle any potential issues with the file (e.g., JSON errors, missing keys).","solution":"import json from datetime import datetime def analyze_weather_data(): try: # Read weather data from the JSON file with open(\'weather_data.json\', \'r\') as file: weather_data = json.load(file) # Dictionary to store temperatures by date daily_temperatures = {} for entry in weather_data: date = entry[\'date\'] temperature = entry[\'temperature\'] if date not in daily_temperatures: daily_temperatures[date] = [] daily_temperatures[date].append(temperature) # Calculate average temperature for each day average_temperatures = {} for date, temperatures in daily_temperatures.items(): avg_temperature = sum(temperatures) / len(temperatures) average_temperatures[date] = avg_temperature # Sort the days by the average temperature in descending order sorted_average_temperatures = sorted(average_temperatures.items(), key=lambda x: x[1], reverse=True) # Measure the start time start_time = datetime.now() # Print the average temperatures print(\\"------------------------ Weather Data Analysis ------------------------\\") print(\\"Average Temperatures (Descending Order): \\") for date, avg_temp in sorted_average_temperatures: print(f\\"{date}: {avg_temp:.2f}\\") # Measure the end time end_time = datetime.now() # Calculate execution time exec_time = end_time - start_time # Print start time, end time, and execution time print(f\\"Start Time: {start_time}\\") print(f\\"End Time: {end_time}\\") print(f\\"Execution Time: {exec_time}\\") except FileNotFoundError: print(\\"Error: The file \'weather_data.json\' was not found.\\") except json.JSONDecodeError: print(\\"Error: The file \'weather_data.json\' contains invalid JSON.\\") except KeyError as e: print(f\\"Error: Missing key in data: {e}\\") # Sample content of weather_data.json for testing: # [ # {\\"date\\": \\"2023-10-01\\", \\"hour\\": \\"00:00\\", \\"temperature\\": 15.5}, # {\\"date\\": \\"2023-10-01\\", \\"hour\\": \\"01:00\\", \\"temperature\\": 16.0}, # {\\"date\\": \\"2023-09-30\\", \\"hour\\": \\"00:00\\", \\"temperature\\": 14.0}, # {\\"date\\": \\"2023-09-30\\", \\"hour\\": \\"01:00\\", \\"temperature\\": 14.5} # ]"},{"question":"In this problem, you are required to create a function that constructs a simple linear regression model using `scikit-learn` based on given dataset inputs. This function will help in understanding the relationship between two numerical variables by fitting a line that best represents the data points. You are provided with parameters necessary for training and testing the regression model, including training data, target values, and test data. Your task is to use the `scikit-learn` library in Python to build a function named `linear_regression_model` which performs the following operations: The function `linear_regression_model` should accept the following parameters: - `X_train`: A list of lists or a 2D NumPy array representing the input features for training. - `y_train`: A list or a 1D NumPy array representing the target values for training. - `X_test`: A list of lists or a 2D NumPy array representing the input features for testing. - `y_test`: A list or a 1D NumPy array representing the target values for testing. Your function should: 1. Create a linear regression model using `LinearRegression` from `sklearn.linear_model`. 2. Fit the model with the training data (`X_train`, `y_train`). 3. Predict the target values for the test data (`X_test`) using the fitted model. 4. Calculate the mean squared error (MSE) between the predicted and actual test target values. 5. Calculate the R^2 score of the model on the test data. 6. Return the predicted values for the test data, the mean squared error, and the R^2 score. Here is the function signature: ```python def linear_regression_model(X_train, y_train, X_test, y_test): pass ``` **Example:** ```python X_train = [[1], [2], [3], [4], [5]] y_train = [1.5, 3.2, 4.6, 6.1, 7.8] X_test = [[6], [7]] y_test = [9.1, 10.6] predictions, mse, r2 = linear_regression_model(X_train, y_train, X_test, y_test) print(\\"Predictions:\\", predictions) print(\\"Mean Squared Error:\\", mse) print(\\"R^2 Score:\\", r2) ``` **Expected Output:** ``` Predictions: [Expected values based on model] Mean Squared Error: [Calculated MSE] R^2 Score: [Calculated R^2 score] ```","solution":"from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score def linear_regression_model(X_train, y_train, X_test, y_test): Constructs and evaluates a linear regression model using given training and test data. Parameters: X_train (list of lists or 2D numpy array): Input features for training. y_train (list or 1D numpy array): Target values for training. X_test (list of lists or 2D numpy array): Input features for testing. y_test (list or 1D numpy array): Target values for testing. Returns: predictions (list): Predicted values for the test data. mse (float): Mean Squared Error of the predictions. r2 (float): R^2 score of the model on the test data. # Create linear regression model model = LinearRegression() # Fit the model with training data model.fit(X_train, y_train) # Predict the target values for the test data predictions = model.predict(X_test) # Calculate the mean squared error mse = mean_squared_error(y_test, predictions) # Calculate the R^2 score r2 = r2_score(y_test, predictions) return predictions, mse, r2"},{"question":"You are developing a module for a social media application that allows users to create and follow topics of interest. Each topic has a unique identifier and a list of posts associated with it. Users can like posts, and the application needs to display the most liked post for a specific topic. Your task is to implement a function `get_most_liked_post` which takes in a dictionary representing topics, where keys are topic identifiers and values are lists of posts. Each post is represented as a dictionary with \'post_id\', \'content\', and \'likes\' keys. To break down the process: 1. Extract the list of posts for the specified topic. 2. Iterate over the posts to find the one with the maximum number of likes. 3. Return the \'post_id\' of the most liked post. If the topic has no posts or does not exist, return `None`. # Function Definition ```python def get_most_liked_post(topics, topic_id): topics: dict - A dictionary where keys are topic identifiers and values are lists of post dictionaries. topic_id: any - The identifier for the topic of interest. Returns: post_id of the most liked post for the given topic_id. If the topic does not exist or has no posts, return None. # Your code here ``` # Requirements: 1. Use appropriate data structures to iterate over the posts and identify the most liked one. 2. Handle cases where the topic has no posts or the topic_id does not exist in the topics dictionary. 3. Return `None` if there are no valid posts to consider. Example: ```python # Sample topics data topics = { 1: [{\'post_id\': 101, \'content\': \'Post 1\', \'likes\': 10}, {\'post_id\': 102, \'content\': \'Post 2\', \'likes\': 15}], 2: [{\'post_id\': 201, \'content\': \'Post A\', \'likes\': 5}] } # Find most liked post in topic 1 print(get_most_liked_post(topics, 1)) # Output: 102 ```","solution":"def get_most_liked_post(topics, topic_id): topics: dict - A dictionary where keys are topic identifiers and values are lists of post dictionaries. topic_id: any - The identifier for the topic of interest. Returns: post_id of the most liked post for the given topic_id. If the topic does not exist or has no posts, return None. if topic_id not in topics or not topics[topic_id]: return None most_liked_post = max(topics[topic_id], key=lambda post: post[\'likes\'], default=None) return most_liked_post[\'post_id\'] if most_liked_post else None"},{"question":"Write a function that reads a list of tuples representing edges in an undirected graph and checks if the graph is a tree. An undirected graph is a tree if it is connected and acyclic. The input will be a list of tuples, where each tuple represents an edge connecting two nodes. The function should return True if the graph is a tree, and False otherwise. If the input graph is empty, it should return False. The function should have the following signature: ``` def is_tree(edges): ``` For example: ``` edges = [(1, 2), (2, 3), (3, 4), (4, 5)] is_tree(edges) # Returns: True edges = [(1, 2), (2, 3), (1, 3)] is_tree(edges) # Returns: False ```","solution":"def is_tree(edges): Determines if an undirected graph represented by edges is a tree. A graph is a tree if it is connected and acyclic. if not edges: return False # An empty graph cannot be a tree # Create an adjacency list from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # A utility function to perform DFS and check cycle def dfs(node, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if not dfs(neighbor, node): return False elif neighbor != parent: return False return True # To check connectedness and acyclic nature start_node = edges[0][0] visited = set() if not dfs(start_node, None): return False # The graph should be connected, so all nodes must be visited return len(visited) == len(graph)"},{"question":"In this problem, you are tasked with writing a function called `parse_log_file` that processes a log file and calculates the total time spent on each task. The log file, \'logfile.txt\', contains entries in the following format: ``` task_name start_time end_time ``` Each `task_name` is a string representing the name of the task, and `start_time` and `end_time` are in the format `HH:MM`. Your function should perform the following tasks: 1. Read all the entries from \'logfile.txt\'. 2. Calculate the total time spent on each task in minutes. 3. Return a dictionary where the keys are task names and the values are the total time spent on each task in minutes. Assume that the times are all on the same day, and you can ignore any potential errors in the input format for this task. **Function Signature:** ```python def parse_log_file() -> dict: pass ``` **Example Usage:** Given a \'logfile.txt\' with the following contents: ``` coding 09:00 11:00 meeting 11:00 12:00 coding 13:00 15:00 review 15:00 16:00 ``` After calling `parse_log_file()`, the function should return: ```python {\'coding\': 240, \'meeting\': 60, \'review\': 60} ```","solution":"def parse_log_file() -> dict: from datetime import datetime time_spent = {} # Read the log file with open(\'logfile.txt\', \'r\') as file: lines = file.readlines() for line in lines: parts = line.strip().split() task_name = parts[0] start_time = datetime.strptime(parts[1], \'%H:%M\') end_time = datetime.strptime(parts[2], \'%H:%M\') duration = (end_time - start_time).total_seconds() / 60 if task_name in time_spent: time_spent[task_name] += duration else: time_spent[task_name] = duration return {task: int(minutes) for task, minutes in time_spent.items()}"},{"question":"You are given the task of simulating a simple version of the classic \\"Game of Life\\" on a two-dimensional grid. In this simulation, cells can either be alive (1) or dead (0). Each cell\'s state in the next step depends on its current state and the number of alive neighbors it has. The rules are as follows: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Write a Python function named `game_of_life` that takes two arguments: - `board` (a list of lists representing the initial state of the grid, where each element is either 1 or 0) - `steps` (an integer representing the number of simulation steps to perform) Your function should return a list of lists representing the state of the grid after the given number of steps. **Function signature:** ```python def game_of_life(board: list, steps: int) -> list: ``` **Example Usage:** ```python initial_board = [ [0, 1, 0], [0, 0, 1], [1, 1, 1] ] steps = 1 new_board = game_of_life(initial_board, steps) ``` In this example, the `new_board` represents the state of the grid after one simulation step.","solution":"def game_of_life(board: list, steps: int) -> list: Simulates the Game of Life on a two-dimensional grid for a given number of steps. def count_live_neighbors(board, row, col): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < len(board) and 0 <= c < len(board[0]): live_neighbors += board[r][c] return live_neighbors def next_step(board): next_board = [[0] * len(board[0]) for _ in range(len(board))] for row in range(len(board)): for col in range(len(board[0])): live_neighbors = count_live_neighbors(board, row, col) if board[row][col] == 1 and (live_neighbors < 2 or live_neighbors > 3): next_board[row][col] = 0 elif board[row][col] == 1 and (live_neighbors == 2 or live_neighbors == 3): next_board[row][col] = 1 elif board[row][col] == 0 and live_neighbors == 3: next_board[row][col] = 1 return next_board for _ in range(steps): board = next_step(board) return board"},{"question":"You are required to write a function named `weather_data_analysis` that processes and visualizes temperature data using the `pandas` and `matplotlib` libraries. This function will read a CSV file containing daily temperature records, calculate monthly averages, and plot the results. Here are the required parameters for the function: - `filename`: A string representing the path to the CSV file containing the temperature data. The file will have columns \\"date\\" (in \\"YYYY-MM-DD\\" format) and \\"temperature\\". - `start_date`, `end_date`: Strings in \\"YYYY-MM-DD\\" format representing the start and end dates for the analysis period. The function must: 1. Load the temperature data from the CSV file using `pandas`. 2. Filter the data to include only records between `start_date` and `end_date`. 3. Convert the \\"date\\" column to datetime format and set it as the dataframe index. 4. Calculate the mean temperature for each month within the filtered period. 5. Plot the monthly average temperatures using `matplotlib`, ensuring the graph has labeled axes and a title. Make sure to use the following `pandas` and `matplotlib` functions: - `pandas.read_csv()` - `pandas.to_datetime()` - `pandas.DataFrame.set_index()` - `pandas.DataFrame.resample()` - `pandas.DataFrame.mean()` - `matplotlib.pyplot.xlabel()` - `matplotlib.pyplot.ylabel()` - `matplotlib.pyplot.title()` - `matplotlib.pyplot.plot()` - `matplotlib.pyplot.show()` Here is the function signature: ```python def weather_data_analysis(filename, start_date, end_date): pass ```","solution":"import pandas as pd import matplotlib.pyplot as plt def weather_data_analysis(filename, start_date, end_date): Processes and visualizes temperature data. Parameters: filename (str): Path to the CSV file containing the temperature data. start_date (str): Start date for the analysis period in \\"YYYY-MM-DD\\" format. end_date (str): End date for the analysis period in \\"YYYY-MM-DD\\" format. # Load the temperature data from the CSV file df = pd.read_csv(filename) # Convert \\"date\\" column to datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Filter the data to include only records between start_date and end_date mask = (df[\'date\'] >= start_date) & (df[\'date\'] <= end_date) df_filtered = df.loc[mask] # Set \\"date\\" as the dataframe index df_filtered.set_index(\'date\', inplace=True) # Calculate the mean temperature for each month within the filtered period monthly_avg_temps = df_filtered.resample(\'M\').mean() # Plot the monthly average temperatures plt.figure(figsize=(10, 6)) plt.plot(monthly_avg_temps.index, monthly_avg_temps[\'temperature\'], marker=\'o\') # Set the labels and title of the plot plt.xlabel(\'Date\') plt.ylabel(\'Average Temperature\') plt.title(\'Monthly Average Temperatures\') # Display the plot plt.show()"},{"question":"In this problem, you are to create a function that calculates the greatest common divisor (GCD) of two positive integers. The GCD of two integers is the largest integer that divides both of the integers without leaving a remainder. The function you will write is named `calculate_gcd`. This function will accept two arguments, `a` and `b`, which are the two integers for which you need to find the GCD. The function should return the GCD of the two numbers. You should implement the Euclidean algorithm to find the GCD. The Euclidean algorithm is defined as follows: 1. If `b` equals 0, then `gcd(a, b)` is `a`. 2. Otherwise, `gcd(a, b)` is `gcd(b, a % b)`. Here\'s a template for your function: ```python def calculate_gcd(a, b): Calculate the greatest common divisor of two positive integers using the Euclidean algorithm. Arguments: a -- first integer b -- second integer Returns: The greatest common divisor of a and b. # Your code here ``` # Example ```python print(calculate_gcd(48, 18)) # Output: 6 print(calculate_gcd(56, 98)) # Output: 14 print(calculate_gcd(101, 10)) # Output: 1 print(calculate_gcd(20, 5)) # Output: 5 ``` # Constraints 1. Both `a` and `b` are positive integers. 2. The solution should be efficient and work well for large values of `a` and `b`.","solution":"def calculate_gcd(a, b): Calculate the greatest common divisor of two positive integers using the Euclidean algorithm. Arguments: a -- first integer b -- second integer Returns: The greatest common divisor of a and b. while b != 0: a, b = b, a % b return a"},{"question":"You are tasked with writing a function `find_longest_unique_substring` that takes a string `s` and returns the longest substring without repeating characters along with its length. The function should handle both upper-case and lower-case letters as unique characters but should be case-sensitive (i.e., \'A\' and \'a\' are different characters). If there are multiple longest substrings of the same length, return the one that appears first. Example: - Given the input `\\"abcabcbb\\"`, the function should return the tuple `(\\"abc\\", 3)`. - Given the input `\\"bbbbb\\"`, the function should return the tuple `(\\"b\\", 1)`. - Given the input `\\"pwwkew\\"`, the function should return the tuple `(\\"wke\\", 3)`. Function signature: ```python def find_longest_unique_substring(s: str) -> tuple: pass ``` Requirements: - Use a sliding window approach to find and expand the substrings. - Use a set or a dictionary to track characters and their positions within the string. - Ensure the function runs in O(n) time complexity. - Handle edge cases such as an empty string, strings with all unique characters, and strings with all repeating characters. Your task: - Write the function `find_longest_unique_substring`. - Implement the logic to find the longest substring without repeating characters. - Return a tuple containing the longest unique substring and its length.","solution":"def find_longest_unique_substring(s: str) -> tuple: Returns the longest substring without repeating characters and its length. if not s: return (\\"\\", 0) char_pos = {} longest_start = 0 longest_length = 0 start = 0 for i, char in enumerate(s): if char in char_pos and char_pos[char] >= start: start = char_pos[char] + 1 char_pos[char] = i current_length = i - start + 1 if current_length > longest_length: longest_length = current_length longest_start = start longest_unique_substring = s[longest_start:longest_start + longest_length] return (longest_unique_substring, longest_length)"},{"question":"Write a function named `time_since` that takes two strings representing datetime stamps and calculates the amount of time elapsed between them in terms of days, hours, minutes, and seconds. The format of the datetime stamps is `YYYY-MM-DD HH:MM:SS`. # Function Signature ```python def time_since(start: str, end: str) -> tuple: ``` # Parameters: 1. `start` (str): The start datetime stamp. 2. `end` (str): The end datetime stamp. # Returns: - `tuple`: A tuple of four integers representing the difference in days, hours, minutes, and seconds between the two datetime stamps. # Requirements: - You must use the `datetime` module to parse the datetime strings and perform the calculation. - Ensure that your function handles cases where the start datetime stamp is after the end datetime stamp correctly by returning positive elapsed time. # Example: ```python # Example usage: print(time_since(\\"2021-06-21 14:32:10\\", \\"2021-06-22 16:45:15\\")) # Output: (1, 2, 13, 5) print(time_since(\\"2021-08-01 00:00:00\\", \\"2021-08-01 00:00:01\\")) # Output: (0, 0, 0, 1) ```","solution":"from datetime import datetime def time_since(start: str, end: str) -> tuple: Calculate the time elapsed between two datetime stamps in terms of days, hours, minutes, and seconds. :param start: The start datetime stamp in \'YYYY-MM-DD HH:MM:SS\' format. :param end: The end datetime stamp in \'YYYY-MM-DD HH:MM:SS\' format. :return: A tuple of four integers representing the difference in days, hours, minutes, and seconds between the two datetime stamps. start_dt = datetime.strptime(start, \'%Y-%m-%d %H:%M:%S\') end_dt = datetime.strptime(end, \'%Y-%m-%d %H:%M:%S\') if end_dt < start_dt: start_dt, end_dt = end_dt, start_dt delta = end_dt - start_dt days = delta.days hours, remainder = divmod(delta.seconds, 3600) minutes, seconds = divmod(remainder, 60) return days, hours, minutes, seconds"},{"question":"Simulate a function that links items to their respective categories and calculates the total cost per category. The function creates a DataFrame with three columns: \'Item\', \'Category\', and \'Cost\'. \'Item\' is a string with item names from a predefined list, \'Category\' randomly selected from a predefined set of categories, and \'Cost\' is a random float between 10 and 100. The function then groups the items by \'Category\' and computes the total cost for each category. Finally, it returns a DataFrame with \'Category\' and \'Total_Cost\' columns representing the aggregated cost per category. The function should output: DataFrame: The pandas DataFrame with \'Category\' and \'Total_Cost\' columns. You should write self-contained code starting with: ``` import pandas as pd import random def calculate_total_per_category(num_items): ```","solution":"import pandas as pd import random def calculate_total_per_category(num_items): This function creates a DataFrame linking items to their respective categories and calculates the total cost per category. It generates a DataFrame with three columns: \'Item\', \'Category\', and \'Cost\'. Items are named as \\"Item_1\\", \\"Item_2\\", ..., \\"Item_n\\". Categories are selected randomly from a predefined set, and costs are random floats between 10 and 100. The function returns a DataFrame with aggregated costs per category. Args: num_items (int): Number of items Returns: pd.DataFrame: DataFrame with aggregated \'Category\' and \'Total_Cost\' # Predefined categories categories = [\'Category_A\', \'Category_B\', \'Category_C\', \'Category_D\'] # Generate data data = { \'Item\': [f\'Item_{i+1}\' for i in range(num_items)], \'Category\': [random.choice(categories) for _ in range(num_items)], \'Cost\': [random.uniform(10, 100) for _ in range(num_items)] } # Create DataFrame df = pd.DataFrame(data) # Group by \'Category\' and calculate the total cost per category total_cost_per_category = df.groupby(\'Category\')[\'Cost\'].sum().reset_index() total_cost_per_category.columns = [\'Category\', \'Total_Cost\'] return total_cost_per_category"},{"question":"Write a function to parse a JSON object containing a list of student records and calculate the average score for each subject. The JSON object should be structured with each student\'s records containing their name and their scores in multiple subjects. The function should return a dictionary where the keys are the subjects and the values are the average scores. You should write self-contained code starting with: ``` import json def calculate_average_scores(json_data): ```","solution":"import json def calculate_average_scores(json_data): Parse a JSON object containing a list of student records and calculate the average score for each subject. Parameters: json_data (str): JSON formatted string containing student records. Returns: dict: Dictionary where keys are subjects and values are average scores. data = json.loads(json_data) total_scores = {} count_scores = {} for student in data[\\"students\\"]: for subject, score in student[\\"scores\\"].items(): if subject in total_scores: total_scores[subject] += score count_scores[subject] += 1 else: total_scores[subject] = score count_scores[subject] = 1 average_scores = {subject: total_scores[subject] / count_scores[subject] for subject in total_scores} return average_scores"},{"question":"Write a function to compute the mean squared error (MSE) of a linear regression model using the specified features and target from a Pandas DataFrame. Note that: The function should split the data into training and testing sets before fitting the model to evaluate its performance. The function should output: float: The mean squared error of the linear regression model on the test set. You should write self-contained code starting with: ``` import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def task_func(df, feature_columns, target_column): ```","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def task_func(df, feature_columns, target_column): This function takes a dataframe, a list of feature columns, and a target column to compute the mean squared error of a linear regression model. Parameters: df (pd.DataFrame): The input dataframe containing the data. feature_columns (list): A list of column names to be used as features. target_column (str): The name of the target column. Returns: float: The mean squared error of the linear regression model on the test set. # Split the data into features and target X = df[feature_columns] y = df[target_column] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and train the linear regression model model = LinearRegression() model.fit(X_train, y_train) # Make predictions on the test set y_pred = model.predict(X_test) # Calculate the mean squared error mse = mean_squared_error(y_test, y_pred) return mse"},{"question":"You are asked to create a Python function called `generate_flight_prices_plot` that reads a CSV file containing flight prices and visualizes the data. The CSV file has columns \\"Date\\" and \\"Price\\". Your function should take a single parameter `file_path`, which is the file path to the CSV file. Here\'s how your function should work: 1. Read the CSV file into a pandas DataFrame. 2. Parse the \\"Date\\" column as datetime objects. 3. Set the \\"Date\\" column as the index of the DataFrame. 4. Create a plot of the flight prices over time. 5. Apply the following customizations to the plot: - Title the plot as \\"Flight Prices Over Time\\". - Label the x-axis as \\"Date\\". - Label the y-axis as \\"Price\\". - Use a blue line to represent the flight prices. 6. Display the plot. You should make use of `pandas` for data manipulation and `matplotlib.pyplot` for plotting. Follow these steps to ensure the function is implemented correctly and visualize the data as required.","solution":"import pandas as pd import matplotlib.pyplot as plt def generate_flight_prices_plot(file_path): Reads a CSV file containing flight prices and visualizes the data in a plot. Parameters: file_path (str): The file path to the CSV file. # Step 1: Read the CSV file into a pandas DataFrame. df = pd.read_csv(file_path) # Step 2: Parse the \\"Date\\" column as datetime objects. df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Step 3: Set the \\"Date\\" column as the index of the DataFrame. df.set_index(\'Date\', inplace=True) # Step 4: Create a plot of the flight prices over time. plt.figure(figsize=(10, 6)) plt.plot(df.index, df[\'Price\'], color=\'blue\') # Step 5: Apply the customizations to the plot. plt.title(\\"Flight Prices Over Time\\") plt.xlabel(\\"Date\\") plt.ylabel(\\"Price\\") # Step 6: Display the plot. plt.show()"},{"question":"You are tasked with developing a terminal-based restaurant order management system where users can place orders, view their current order, and confirm the booking. The system should maintain a list of available menu items along with their prices and allow users to interactively add or remove items from their order. In this system: 1. The user can view the available menu items and their prices. 2. The user can add items to their order by specifying the item name and quantity. 3. The user can remove items from their order by specifying the item name and quantity. 4. The user can view their current order and the total price at any time. 5. The user can confirm their order, at which point the total price and order summary are displayed. Your task is to implement a function called `manage_order()` that: 1. Displays the menu to the user. 2. Allows the user to add or remove items from the order interactively. 3. Allows the user to view their current order and total price. 4. Ends when the user confirms the order. 5. Uses dictionaries to store the menu and the user\'s current order. Specifications: - Implement a function named `manage_order()` that takes no arguments. - Use a loop to continuously prompt the user for an action (view menu, add item, remove item, view current order, confirm order). - Maintain a dictionary `menu` where keys are item names and values are their prices. - Maintain a dictionary `current_order` where keys are item names and values are quantities ordered. Predefined Variables: - `menu` = {\'Pizza\': 12.99, \'Burger\': 9.99, \'Salad\': 6.99, \'Soda\': 1.99} Example Usage: ```python manage_order() ``` Example Interaction: ``` Welcome to the Restaurant Order Management System! Menu: Pizza: 12.99 Burger: 9.99 Salad: 6.99 Soda: 1.99 What would you like to do? 1. View Menu 2. Add Item to Order 3. Remove Item from Order 4. View Current Order 5. Confirm Order 1 Menu: Pizza: 12.99 Burger: 9.99 Salad: 6.99 Soda: 1.99 What would you like to do? 2 Enter item name to add: Pizza Enter quantity: 2 What would you like to do? 2 Enter item name to add: Soda Enter quantity: 3 What would you like to do? 4 Current Order: Pizza: 2 x 12.99 = 25.98 Soda: 3 x 1.99 = 5.97 Total: 31.95 What would you like to do? 5 Order Confirmed! Thank you for your order. Total Price: 31.95 ``` Considerations: - Ensure the program handles invalid inputs gracefully. - The program should continuously prompt the user for actions until the order is confirmed. - Display the menu every time the user selects the view menu option.","solution":"def manage_order(): menu = {\'Pizza\': 12.99, \'Burger\': 9.99, \'Salad\': 6.99, \'Soda\': 1.99} current_order = {} def display_menu(): print(\\"nMenu:\\") for item, price in menu.items(): print(f\\"{item}: {price:.2f}\\") print() def add_item_to_order(): item = input(\\"Enter item name to add: \\").title() if item in menu: quantity = int(input(\\"Enter quantity: \\")) if item in current_order: current_order[item] += quantity else: current_order[item] = quantity else: print(\\"Item not found in menu.\\") def remove_item_from_order(): item = input(\\"Enter item name to remove: \\").title() if item in current_order: quantity = int(input(\\"Enter quantity to remove: \\")) if quantity >= current_order[item]: del current_order[item] else: current_order[item] -= quantity else: print(\\"Item not found in current order.\\") def view_current_order(): if not current_order: print(\\"nYour order is empty.n\\") return total = 0 print(\\"nCurrent Order:\\") for item, quantity in current_order.items(): price = menu[item] * quantity total += price print(f\\"{item}: {quantity} x {menu[item]:.2f} = {price:.2f}\\") print(f\\"Total: {total:.2f}n\\") def confirm_order(): view_current_order() print(\\"Order Confirmed!\\") print(\\"Thank you for your order.\\") print(\\"Welcome to the Restaurant Order Management System!\\") while True: print(\\"What would you like to do?\\") print(\\"1. View Menu\\") print(\\"2. Add Item to Order\\") print(\\"3. Remove Item from Order\\") print(\\"4. View Current Order\\") print(\\"5. Confirm Order\\") choice = input() if choice == \'1\': display_menu() elif choice == \'2\': add_item_to_order() elif choice == \'3\': remove_item_from_order() elif choice == \'4\': view_current_order() elif choice == \'5\': confirm_order() break else: print(\\"Invalid choice. Please try again.\\")"},{"question":"In the context of data structures and algorithms, implementing search operations efficiently is an important task. In this problem, you are asked to implement a function named `findPeakElement` that searches for a peak element in a given list of integers. A peak element is an element that is greater than its neighbors. For corner elements, we need to consider only one neighbor. Given a list of integers, your task is to find the index of any one of its peak elements. **Requirements**: - You must use a binary search approach to achieve an `O(log n)` time complexity. - Assume you have the following list available: - `nums`: A list of integers. Example: `[1, 2, 3, 1]`. Your function `findPeakElement(nums)` should: 1. Implement the binary search algorithm to find a peak element. 2. Return the index of one of the peak elements (if there are multiple peaks, any peak\'s index is acceptable). # Example: ```python # Example 1 nums = [1, 2, 3, 1] # Algorithm could return index 2, which has the peak element 3 # Example 2 nums = [1, 2, 1, 3, 5, 6, 4] # Algorithm could return index 5, which has the peak element 6 ``` # Note: - You can assume that `nums[i] != nums[i+1]` for all valid `i`. - The function should be implemented using Python. ```python def findPeakElement(nums): left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] < nums[mid + 1]: left = mid + 1 else: right = mid return left ``` Your implementation must ensure the usage of the binary search algorithm to achieve the required time complexity of `O(log n)`.","solution":"def findPeakElement(nums): Uses binary search to find a peak element in the list nums. Args: nums (List[int]): A list of integers. Returns: int: The index of one of its peak elements. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] < nums[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"You are required to implement a function that handles the analysis of a dataset containing job applicants\' information stored in a CSV file. The task is to read the file, process the data, and calculate some summary statistics. This is particularly useful for hiring managers to quickly get insights into the applicants\' pool. **Function Requirements:** - **Function Name:** `analyze_applicants` - **Parameters:** - `file_path` (string): The path to the CSV file containing the applicants\' data. **CSV File Structure:** - The CSV file contains the following columns: `Name`, `Age`, `Years_of_Experience`, `Field`, `Current_Salary` **Specific Requirements:** 1. The function should read the CSV file using pandas. 2. The function should calculate and print the following summary statistics: - The average age of the applicants. - The average years of experience. - The most common field among the applicants. - The average current salary, rounded to 2 decimal places. **Input Example:** Assume a CSV file `applicants.csv` with the following content: ```csv Name,Age,Years_of_Experience,Field,Current_Salary Alice,30,5,Engineering,70000 Bob,35,10,Marketing,80000 Charlie,25,2,Engineering,60000 Diana,40,15,Marketing,95000 Eve,28,3,Data Science,72000 ``` **Usage Example:** ```python analyze_applicants(\'applicants.csv\') ``` **Expected Output:** When running the function with the provided CSV content, the output should look like: ``` Average age: 31.6 Average years of experience: 7.0 Most common field: Engineering Average current salary: 75400.00 ```","solution":"import pandas as pd def analyze_applicants(file_path): Reads the applicants\' data from a CSV file and calculates summary statistics. Parameters: file_path (str): Path to the CSV file containing applicants\' data. Prints: - The average age of the applicants. - The average years of experience. - The most common field among the applicants. - The average current salary, rounded to 2 decimal places. # Read the CSV file into a pandas DataFrame df = pd.read_csv(file_path) # Calculate the required summary statistics avg_age = df[\'Age\'].mean() avg_exp = df[\'Years_of_Experience\'].mean() most_common_field = df[\'Field\'].mode().iloc[0] avg_current_salary = df[\'Current_Salary\'].mean() # Print the summary statistics print(f\\"Average age: {avg_age:.1f}\\") print(f\\"Average years of experience: {avg_exp:.1f}\\") print(f\\"Most common field: {most_common_field}\\") print(f\\"Average current salary: {avg_current_salary:.2f}\\")"},{"question":"In data mining and machine learning, association rule learning is a popular and well-researched method for discovering interesting relations between variables in large databases. One of the most famous algorithms for association rule learning is the Apriori algorithm. The algorithm identifies frequent itemsets in a transactional dataset and then generates association rules that highlight the frequent patterns. Your task is to implement the Apriori algorithm to find frequent itemsets and association rules in a transactional dataset. The algorithm takes as input a list of transactions, a minimum support threshold, and a minimum confidence threshold. The output should be a list of association rules that meet the given support and confidence thresholds. The transactions are represented as lists of items, and the support of an itemset is the proportion of transactions in which the itemset appears. The confidence of a rule is the probability that the rule\'s consequent appears in a transaction, given that the rule\'s antecedent appears in the same transaction. You need to write a function `apriori(transactions, min_support, min_confidence)` that generates the frequent itemsets and association rules from the given transactions using the following parameters: - `transactions` (list of lists): A list containing the transactions, where each transaction is a list of items. - `min_support` (float): The minimum support threshold (between 0 and 1). - `min_confidence` (float): The minimum confidence threshold (between 0 and 1). The function should return a list of tuples representing the association rules. Each tuple should be of the form (`antecedent`, `consequent`, `support`, `confidence`), where: - `antecedent` is a tuple of items representing the left-hand side of the rule. - `consequent` is a tuple of items representing the right-hand side of the rule. - `support` is the support of the rule as a float. - `confidence` is the confidence of the rule as a float. **Requirements**: - Implement the Apriori algorithm to find frequent itemsets. - Generate association rules from the frequent itemsets. - Ensure the rules meet the given support and confidence thresholds. **Function Signature**: ```python def apriori(transactions, min_support, min_confidence): pass ``` # Example Usage ```python transactions = [ [\'milk\', \'bread\', \'butter\'], [\'beer\', \'bread\'], [\'milk\', \'bread\', \'beer\', \'butter\'], [\'bread\', \'butter\'], [\'milk\', \'butter\'] ] rules = apriori(transactions, 0.5, 0.7) for rule in rules: print(rule) ``` # Key Points 1. The function should calculate the support of each itemset in the transactions. 2. Generate frequent itemsets that meet the minimum support threshold. 3. Create association rules from the frequent itemsets. 4. Ensure the rules meet the given support and confidence thresholds.","solution":"from itertools import combinations def apriori(transactions, min_support, min_confidence): def get_support(itemset): return sum(1 for transaction in transactions if all(item in transaction for item in itemset)) / len(transactions) def generate_candidate_itemsets(frequent_itemsets, k): candidates = set() frequent_items = list(frequent_itemsets) for i in range(len(frequent_items)): for j in range(i+1, len(frequent_items)): candidate = tuple(sorted(set(frequent_items[i]).union(set(frequent_items[j])))) if len(candidate) == k: candidates.add(candidate) return candidates def generate_frequent_itemsets(): k = 1 current_frequent_itemsets = {tuple([item]) for transaction in transactions for item in transaction} current_frequent_itemsets = {itemset for itemset in current_frequent_itemsets if get_support(itemset) >= min_support} all_frequent_itemsets = set(current_frequent_itemsets) while current_frequent_itemsets: k += 1 candidate_itemsets = generate_candidate_itemsets(current_frequent_itemsets, k) current_frequent_itemsets = {itemset for itemset in candidate_itemsets if get_support(itemset) >= min_support} all_frequent_itemsets.update(current_frequent_itemsets) return all_frequent_itemsets def generate_rules(frequent_itemsets): rules = [] for itemset in frequent_itemsets: for i in range(1, len(itemset)): for antecedent in combinations(itemset, i): antecedent = tuple(sorted(antecedent)) consequent = tuple(sorted(set(itemset).difference(set(antecedent)))) if consequent: support = get_support(itemset) confidence = get_support(itemset) / get_support(antecedent) if confidence >= min_confidence: rules.append((antecedent, consequent, support, confidence)) return rules frequent_itemsets = generate_frequent_itemsets() return generate_rules(frequent_itemsets)"},{"question":"# Binary Search Tree Insertion In this problem, you are required to implement the `insert_into_bst` function to insert a new value into a Binary Search Tree (BST). A Binary Search Tree is a binary tree where for each node: - All keys in the left subtree are less than the node\'s key. - All keys in the right subtree are greater than the node\'s key. If the tree does not have any nodes yet (i.e., it is empty), then the first value inserted will be the root of the tree. # Function Specifications Function Signature ```python def insert_into_bst(root, val): ``` Parameters - `root`: TreeNode object representing the root of the Binary Search Tree. It can be `None` if the tree is empty. - `val`: Integer, the value to be inserted into the Binary Search Tree. Return - The function should return the root TreeNode of the modified Binary Search Tree. # TreeNode Class Definition You may assume the following TreeNode class is already defined: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Example ```python root = TreeNode(4) root.left = TreeNode(2) root.right = TreeNode(7) root.left.left = TreeNode(1) root.left.right = TreeNode(3) new_value = 5 new_root = insert_into_bst(root, new_value) # The new BST should now include the value 5, inserted in the correct position. # To validate, you may write a function that performs BFS or DFS on the tree and prints the values. ``` # Notes - Make sure to maintain the BST properties after insertion. - This function can be implemented either recursively or iteratively. - Take care of edge cases, such as when the tree is empty or when the value to be inserted is already in the tree. # Additional Consideration Optionally, you may write auxiliary functions (like a search function) if they help simplify the insertion logic. However, this is not strictly necessary and you should aim to keep additional code minimal.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def insert_into_bst(root, val): Inserts a value into the Binary Search Tree and returns the root. if root is None: return TreeNode(val) if val < root.val: if root.left is None: root.left = TreeNode(val) else: insert_into_bst(root.left, val) else: # val > root.val (assuming no duplicate values) if root.right is None: root.right = TreeNode(val) else: insert_into_bst(root.right, val) return root"},{"question":"You are tasked with writing a function that extracts date strings from a JSON document. Each date string follows a specific format, appearing as \\"YYYY-MM-DD\\". For example, \\"2023-10-15\\". The JSON document contains multiple nested dictionaries and lists, and the date strings can be located at any level. You will use the `json` library for parsing the JSON content and the `re` library for extracting the date strings using regular expressions. # Task Write a function named `extract_dates` that: 1. **Accepts one argument**, `json_content` (a string containing the JSON content). 2. **Uses** the `json.loads` function to parse the JSON content into a Python dictionary. 3. **Recursively searches** through all dictionaries and lists for date strings. 4. **Uses** the `re.compile` function from the `re` library to compile a regular expression pattern that matches date strings in the format \\"YYYY-MM-DD\\". 5. **Returns** a list of all matched date strings. You are required to use the `re.compile` function to compile the regular expression pattern. # Example Given the following JSON content: ```json { \\"events\\": [ { \\"name\\": \\"Conference\\", \\"date\\": \\"2023-10-15\\", \\"details\\": { \\"location\\": \\"New York\\", \\"registration\\": \\"2023-09-01\\" } }, { \\"name\\": \\"Workshop\\", \\"date\\": \\"2023-11-20\\" } ], \\"created_at\\": \\"2023-01-01\\" } ``` The function should return: ```python [\'2023-10-15\', \'2023-09-01\', \'2023-11-20\', \'2023-01-01\'] ``` # Constraints - Ensure that the regular expression pattern aptly captures the described date format. - You can assume that the JSON content is well-formed and all date strings conform to the \\"YYYY-MM-DD\\" format. # Hint The `re.compile` function from the `re` library is essential for this task. You will need to compile a pattern and use the resulting Pattern object to find all matches within the extracted text values in the JSON data.","solution":"import json import re def extract_dates(json_content): Extracts all date strings in the format YYYY-MM-DD from the JSON content. Args: json_content (str): A string containing the JSON content. Returns: list: A list of matched date strings. def find_dates(data, pattern): dates = [] if isinstance(data, dict): for value in data.values(): dates.extend(find_dates(value, pattern)) elif isinstance(data, list): for item in data: dates.extend(find_dates(item, pattern)) elif isinstance(data, str): dates.extend(pattern.findall(data)) return dates pattern = re.compile(r\'bd{4}-d{2}-d{2}b\') json_data = json.loads(json_content) return find_dates(json_data, pattern)"},{"question":"You are tasked with creating a function `analyze_bst_depths` to analyze the average depth of nodes in Binary Search Trees (BSTs) generated with different numbers of nodes and plot the results. You need to generate BSTs with varying sizes, calculate the average depth of nodes for each tree size, and then plot these averages. `generate_bst` is a helper function provided that takes an integer `n` (number of nodes) and returns a randomly generated BST. Your task involves the following steps: 1. Generate BSTs with sizes from a given list. 2. Calculate the average depth of nodes for each tree size. 3. Plot this average depth against the tree sizes provided using `matplotlib.pyplot`. **Function Signature:** ```python def analyze_bst_depths(tree_sizes: list): pass ``` **Helper Function Signature:** ```python def generate_bst(n: int) -> BST: pass ``` **Input:** - `tree_sizes` (list of ints): A list of tree sizes (number of nodes) to generate BSTs for. **Output:** The function does not need to return a value. It should plot the results using `matplotlib`. **Example Usage:** ```python tree_sizes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] analyze_bst_depths(tree_sizes) ``` **Plotting Requirements:** - Title: \\"Average Depth in BSTs\\" - X-axis label: \\"Number of nodes in BST\\" - Y-axis label: \\"Average depth of nodes\\" - Customize the x-ticks to match the provided tree sizes.","solution":"import matplotlib.pyplot as plt import random class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BST: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.val: if node.left is None: node.left = TreeNode(key) else: self._insert(node.left, key) else: if node.right is None: node.right = TreeNode(key) else: self._insert(node.right, key) def average_depth(self): depths = [] self._traverse(self.root, 0, depths) return sum(depths) / len(depths) if depths else 0 def _traverse(self, node, depth, depths): if node is not None: depths.append(depth) self._traverse(node.left, depth + 1, depths) self._traverse(node.right, depth + 1, depths) def generate_bst(n: int) -> BST: bst = BST() for _ in range(n): bst.insert(random.randint(1, 10000)) # Random values for the BST return bst def analyze_bst_depths(tree_sizes: list): average_depths = [] for size in tree_sizes: bst = generate_bst(size) average_depths.append(bst.average_depth()) plt.figure(figsize=(10, 6)) plt.plot(tree_sizes, average_depths, marker=\'o\') plt.title(\\"Average Depth in BSTs\\") plt.xlabel(\\"Number of nodes in BST\\") plt.ylabel(\\"Average depth of nodes\\") plt.xticks(tree_sizes) plt.grid(True) plt.show()"},{"question":"You are tasked with creating a script to analyze a text file containing multiple lines of text and generate a report on the number of occurrences of each word in the file. Ignore case and punctuation when counting occurrences. Write a function called `word_count(file_location, report_file)` that: 1. Reads the content of the text file. 2. Tokenizes the text into words. 3. Counts the occurrences of each word. 4. Writes the count of each word to a new text file, with one word per line followed by its count. Your function should properly handle case insensitivity and remove punctuation before counting word occurrences. # Function Signature ```python def word_count(file_location: str, report_file: str) -> None: ``` # Input - `file_location`: a string representing the location of the input text file. - `report_file`: a string representing the location of the output text file. # Detailed Instructions: 1. Open and read the content of the text file specified by `file_location`. 2. Convert all characters to lower case. 3. Remove all punctuation (consider using Python\'s `string.punctuation` to identify punctuation characters). 4. Tokenize the text into words based on whitespace. 5. Count the occurrences of each word. 6. Write each word and its count to the `report_file`, with each word and count on a separate line in the format `word: count`. # Example Suppose the `sample.txt` contains the following text: ``` Hello, world! This is a sample text. Hello, hello, world. ``` Calling `word_count(\'sample.txt\', \'word_count_report.txt\')` should produce an output file `word_count_report.txt` similar to: ``` hello: 3 world: 2 this: 1 is: 1 a: 1 sample: 1 text: 1 ``` # Constraints - You can assume the text file is not empty and contains at least one word. - Handle file operations properly using context managers for file handling. # Important Notes Ensure you handle common punctuation characters (.,!? etc.) and treat them as word separators. Use Python\'s string methods and the `collections.Counter` class for efficient counting.","solution":"import string from collections import Counter def word_count(file_location: str, report_file: str) -> None: Reads a text file, counts the occurrences of each word (ignoring case and punctuation), and writes the results to another file. Params: - file_location: str : the path of the text file to read. - report_file: str : the path of the file to write the word counts. with open(file_location, \'r\') as file: text = file.read().lower() # Remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) clean_text = text.translate(translator) # Tokenize words words = clean_text.split() # Count word occurrences word_counts = Counter(words) # Write word counts to report file with open(report_file, \'w\') as file: for word, count in word_counts.items(): file.write(f\\"{word}: {count}n\\")"},{"question":"Sorting is a fundamental operation in computer science that involves arranging the elements of a list in a specific order. A common algorithm used for sorting is the merge sort, which follows the divide-and-conquer paradigm. Your task is to implement the merge sort algorithm to sort a list of integers in ascending order. You need to write a function `merge_sort` that takes a list of integers as input and returns a new list with the integers sorted in ascending order. The merge sort algorithm works as follows: 1. If the list is empty or contains a single element, it is already sorted. 2. Otherwise, divide the list into two halves. 3. Recursively apply merge sort to both halves. 4. Merge the two sorted halves to produce a single sorted list. Your merge function should take two sorted lists and return a single sorted list containing all elements from both input lists. **Function Signature:** ```python def merge_sort(arr: List[int]) -> List[int]: ``` **Example:** ```python arr = [38, 27, 43, 3, 9, 82, 10] sorted_arr = merge_sort(arr) ``` Expected output: ```python sorted_arr = [3, 9, 10, 27, 38, 43, 82] ```","solution":"from typing import List def merge_sort(arr: List[int]) -> List[int]: if len(arr) <= 1: return arr def merge(left: List[int], right: List[int]) -> List[int]: sorted_list = [] i = j = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: sorted_list.append(left[i]) i += 1 else: sorted_list.append(right[j]) j += 1 sorted_list.extend(left[i:]) sorted_list.extend(right[j:]) return sorted_list mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half)"},{"question":"You are asked to create a function `generate_maze` to generate a perfect maze using Prim\'s Algorithm. A perfect maze is one without loops or inaccessible areas. The maze is represented by a 2D grid where `1` represents a wall and `0` represents a path. The size of the maze is defined by a given height `h` and width `w`, with both dimensions being odd numbers. The function should output the grid representing the perfect maze. Your function must follow these rules: 1. Begin with all cells as walls, except for a starting point at the top-left corner which should be a path. 2. Use Prim\'s Algorithm to generate the maze, ensuring that walls turn into paths to create passages, but no loops. 3. The function should handle generating paths only up to one level of \\"crossing\\" walls, keeping the maze without loops. Function Signature: ```python def generate_maze(h: int, w: int) -> list: ``` **Arguments:** - `h`: int, height of the maze grid (must be an odd number). - `w`: int, width of the maze grid (must be an odd number). **Returns:** - A list of lists, representing the 2D grid maze where `1` is a wall and `0` is a path. **Example:** ```python h = 5 w = 5 print(generate_maze(h, w)) ``` Possible output: ``` [ [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0] ] ``` Ensure your solution properly implements Prim\'s Algorithm and adheres to the requirement to generate a perfect maze without loops.","solution":"import random def generate_maze(h: int, w: int) -> list: def add_walls(x, y): if x > 1 and maze[x-2][y] == 1: walls.append((x-2, y, x-1, y)) if x < h-2 and maze[x+2][y] == 1: walls.append((x+2, y, x+1, y)) if y > 1 and maze[x][y-2] == 1: walls.append((x, y-2, x, y-1)) if y < w-2 and maze[x][y+2] == 1: walls.append((x, y+2, x, y+1)) maze = [[1 for _ in range(w)] for _ in range(h)] init_x, init_y = 0, 0 maze[init_x][init_y] = 0 walls = [] add_walls(init_x, init_y) while walls: wx, wy, px, py = random.choice(walls) walls.remove((wx, wy, px, py)) if maze[wx][wy] == 1: maze[wx][wy] = 0 maze[px][py] = 0 add_walls(wx, wy) return maze"},{"question":"You are tasked to create a function named `find_prime_factors` which will take an integer as input and return a list of all its prime factors. The function should: 1. Prompt the user to enter a positive integer. 2. Define a helper function `is_prime` that checks if a given number is a prime. 3. Define the main function `find_prime_factors` that: - Finds all the primes less than or equal to the square root of the input number. - Determines which of those primes are factors of the input number. - If no prime factors are found, returns a list containing only the number itself. 4. Ensure the prime factors are returned as a sorted list in ascending order. You must handle edge cases such as receiving a non-positive integer and provide an appropriate response. # Function Definition ```python def find_prime_factors(): # Function implementation here ``` # Example ```python # Example Usage find_prime_factors() # User inputs: 28 # Output [2, 7] ``` # Note In the example, the user inputs `28`, and the function returns `[2, 7]` since those are the prime factors of 28.","solution":"import math def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_prime_factors(): Find all prime factors of a given integer. try: num = int(input(\\"Enter a positive integer: \\")) if num <= 0: print(\\"Please enter a positive integer.\\") return [] prime_factors = [] # Checking for every number from 2 to sqrt(num) for i in range(2, int(math.sqrt(num) + 1)): if is_prime(i): while num % i == 0: prime_factors.append(i) num //= i if num > 1: prime_factors.append(num) return prime_factors except ValueError: print(\\"Invalid input. Please enter a valid integer.\\") return []"},{"question":"**Write a function called `summarize_sales_data` that loads a CSV file containing sales data and generates a summary report. The report should include the following metrics: 1. Total sales: Sum of all sales amounts in the dataset. 2. Average sales amount: Mean of the sales amounts. 3. Total number of sales: Count of sales entries. 4. Highest sale amount and the corresponding date. 5. Lowest sale amount and the corresponding date. The CSV file contains at least two columns: \'Date\' and \'Sales Amount\'. The \'Date\' column is in the format \\"YYYY-MM-DD\\". **Function Signature:** ```python def summarize_sales_data(file_path: str) -> dict: pass ``` **Parameters:** - `file_path` : `str` : Path to the CSV file containing the sales data. **Returns:** - `dict` : A dictionary containing summary metrics with the following keys: - \'total_sales\': Total sales amount. - \'average_sales\': Average sales amount. - \'total_sales_count\': Total number of sales. - \'highest_sale\': Highest sale amount. - \'highest_sale_date\': Date corresponding to the highest sale amount. - \'lowest_sale\': Lowest sale amount. - \'lowest_sale_date\': Date corresponding to the lowest sale amount. **Example Usage:** ```python summary = summarize_sales_data(\'sales_data.csv\') print(summary) ``` **Note:** - If there are multiple occurrences of the highest or lowest sale amounts, return the first occurrence. - You can assume that the CSV file will always have valid data for the columns \'Date\' and \'Sales Amount\'. ---","solution":"import csv from datetime import datetime def summarize_sales_data(file_path: str) -> dict: Summarizes sales data from a CSV file. Args: - file_path: str: Path to the CSV file containing the sales data. Returns: - dict: A dictionary containing summary metrics. total_sales = 0 sales_count = 0 highest_sale = float(\'-inf\') lowest_sale = float(\'inf\') highest_sale_date = \'\' lowest_sale_date = \'\' sales = [] with open(file_path, \'r\') as file: reader = csv.DictReader(file) for row in reader: date = row[\'Date\'] sales_amount = float(row[\'Sales Amount\']) total_sales += sales_amount sales_count += 1 sales.append(sales_amount) if sales_amount > highest_sale: highest_sale = sales_amount highest_sale_date = date if sales_amount < lowest_sale: lowest_sale = sales_amount lowest_sale_date = date average_sales = total_sales / sales_count if sales_count > 0 else 0 return { \'total_sales\': total_sales, \'average_sales\': average_sales, \'total_sales_count\': sales_count, \'highest_sale\': highest_sale, \'highest_sale_date\': highest_sale_date, \'lowest_sale\': lowest_sale, \'lowest_sale_date\': lowest_sale_date }"},{"question":"You are implementing an e-commerce application that needs to manage product inventory and order processing. Your task is to create a class representing the inventory and a separate function to place orders, ensuring that stock levels are updated correctly. Your solution should include the following: 1. A class `Inventory` with: - A constructor that initializes an empty dictionary to store product names as keys and their quantities as values. - A method `add_product` to add new products to the inventory or update the quantity of existing products. It should take two arguments: `product_name` (string) and `quantity` (integer). - A method `get_stock` to retrieve the current quantity of a given product by its name. It should return the quantity as an integer. If the product is not in the inventory, it should return `0`. 2. A function `place_order` that: - Takes an `Inventory` instance, a product name, and a quantity as arguments. - Checks if the requested quantity of the product is available in the inventory. - If enough stock is available, decrease the inventory for the given product by the requested quantity and return `True`. - If the stock is insufficient, return `False` without modifying the inventory. **Requirements:** - The `add_product` method should ensure that quantities are non-negative integers. - The `place_order` function should not reduce the stock below zero. **Function Signature:** ```python class Inventory: def __init__(self): pass def add_product(self, product_name: str, quantity: int) -> None: pass def get_stock(self, product_name: str) -> int: pass def place_order(inventory: Inventory, product_name: str, quantity: int) -> bool: pass ``` **Example:** ```python # Creating an Inventory instance inv = Inventory() # Adding products to the inventory inv.add_product(\\"apple\\", 50) inv.add_product(\\"banana\\", 100) # Checking stock print(inv.get_stock(\\"apple\\")) # Output: 50 print(inv.get_stock(\\"banana\\")) # Output: 100 print(inv.get_stock(\\"orange\\")) # Output: 0 # Placing orders print(place_order(inv, \\"apple\\", 30)) # Output: True print(place_order(inv, \\"apple\\", 30)) # Output: False print(place_order(inv, \\"banana\\", 50)) # Output: True # Checking stock after orders print(inv.get_stock(\\"apple\\")) # Output: 20 print(inv.get_stock(\\"banana\\")) # Output: 50 ```","solution":"class Inventory: def __init__(self): self.products = {} def add_product(self, product_name: str, quantity: int) -> None: if product_name not in self.products: self.products[product_name] = 0 self.products[product_name] += quantity def get_stock(self, product_name: str) -> int: return self.products.get(product_name, 0) def place_order(inventory: Inventory, product_name: str, quantity: int) -> bool: if inventory.get_stock(product_name) >= quantity: inventory.add_product(product_name, -quantity) return True return False"},{"question":"You need to write a function called `group_by_key` that groups a list of dictionaries by a specified key. The function should return a dictionary where the keys are unique values from the specified key in the list of dictionaries, and the values are lists of dictionaries that have that key value. Function Signature: ```python def group_by_key(items, key): pass ``` Parameters: - `items`: A list of dictionaries. - `key`: A string representing the key to group by. Requirements: 1. If a dictionary in the list does not have the specified key, it should be ignored. 2. The order of the elements in the resulting lists should match the order of their first occurrence in the input list. Example: ```python items = [ {\'name\': \'Alice\', \'age\': 30}, {\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Alice\', \'age\': 28}, {\'name\': \'Charlie\', \'age\': 25} ] key = \'name\' result = group_by_key(items, key) # The result should be: # { # \'Alice\': [{\'name\': \'Alice\', \'age\': 30}, {\'name\': \'Alice\', \'age\': 28}], # \'Bob\': [{\'name\': \'Bob\', \'age\': 25}], # \'Charlie\': [{\'name\': \'Charlie\', \'age\': 25}] # } ``` Hints: - Consider using the `defaultdict` from the `collections` module to facilitate grouping. - Handle cases where the list of dictionaries is empty or none of the dictionaries contain the specified key.","solution":"from collections import defaultdict def group_by_key(items, key): Groups a list of dictionaries by a specified key. Parameters: items (list): A list of dictionaries. key (str): A string representing the key to group by. Returns: dict: A dictionary where the keys are unique values from the specified key in the list of dictionaries, and the values are lists of dictionaries that have that key value. grouped_dict = defaultdict(list) for item in items: if key in item: grouped_dict[item[key]].append(item) return dict(grouped_dict)"},{"question":"Create a function named `convert_to_roman` that takes an integer `num` and converts it into its corresponding Roman numeral. Roman numerals are represented by combinations of the following symbols: `I, V, X, L, C, D, M`. Each symbol has a value: `I = 1, V = 5, X = 10, L = 50, C = 100, D = 500, and M = 1000`. Your task is to build and return the Roman numeral string equivalent of the given integer. The function should correctly handle numbers up to 3999. **Function Signature:** ```python def convert_to_roman(num: int) -> str: ``` **Requirements:** 1. Utilize a combination of string operations and arithmetic to construct the Roman numeral representation. 2. Follow the standard rules for Roman numeral construction, including the use of subtractive notation (e.g., `4` is `IV`, `9` is `IX`). **Input:** - A single integer `num` between 1 and 3999, inclusive. **Output:** - A string representing the Roman numeral equivalent of the given number. **Examples:** ```python assert convert_to_roman(3) == \\"III\\" assert convert_to_roman(9) == \\"IX\\" assert convert_to_roman(58) == \\"LVIII\\" assert convert_to_roman(1994) == \\"MCMXCIV\\" ```","solution":"def convert_to_roman(num: int) -> str: roman_numerals = [ (\\"M\\", 1000), (\\"CM\\", 900), (\\"D\\", 500), (\\"CD\\", 400), (\\"C\\", 100), (\\"XC\\", 90), (\\"L\\", 50), (\\"XL\\", 40), (\\"X\\", 10), (\\"IX\\", 9), (\\"V\\", 5), (\\"IV\\", 4), (\\"I\\", 1) ] result = [] for symbol, value in roman_numerals: while num >= value: result.append(symbol) num -= value return \'\'.join(result)"},{"question":"Write a function `max_word_length` that takes a string of words as input and returns the length of the longest word in the string. This function should ignore all punctuation in the string and consider only letters when calculating word lengths. To simplify the implementation, assume: 1. The input string contains only words separated by spaces and punctuation marks such as commas, periods, exclamation marks, and question marks. 2. The function should ignore punctuation and treat uppercase and lowercase letters the same. **Requirements:** 1. The function should be named `max_word_length`. 2. The function should take one argument, a string of words. 3. The function should return an integer representing the length of the longest word. Here is an example of how the `max_word_length` function will be used: ```python print(max_word_length(\\"Hello, world! How\'s everything going?\\")) ``` Expected output: ``` 10 ``` The word \\"everything\\" has the longest length of 10 characters.","solution":"import re def max_word_length(s): Returns the length of the longest word in the string s, ignoring all punctuation and considering only letters. # Remove all punctuation and make all letters lowercase s = re.sub(r\'[^ws]\', \'\', s).lower() # Split the string into words words = s.split() # Find the length of the longest word return max(len(word) for word in words) if words else 0"},{"question":"In this problem, you will implement a function to find the longest palindromic substring in a given string using dynamic programming. A palindrome is a sequence of characters that reads the same forward and backward. Function Description Implement the function `longest_palindromic_substring(s)` that finds the longest palindromic substring within the provided string. - `s` is a string consisting of lowercase and uppercase alphabetical characters. Requirements: 1. Use dynamic programming to solve the problem. 2. Handle both even-length and odd-length palindromes. 3. Optimize your solution to run in O(n^2) time complexity and use O(n^2) space complexity. The function should return the longest palindromic substring found in `s`. Steps: 1. Initialize a 2D boolean array `dp` with dimensions `len(s) x len(s)` and set all values to `False`. `dp[i][j]` will be `True` if the substring `s[i:j+1]` is a palindrome. 2. Initialize variables to keep track of the start and maximum length of the longest palindromic substring found. 3. For each character in `s`, mark the corresponding `dp[i][i]` as `True` since any single character is a palindrome. 4. For every pair of consecutive characters, mark `dp[i][i+1]` as `True` if both characters are the same. 5. Use dynamic programming to fill the remaining values in `dp`: - For substrings of length 3 to `len(s)`, set `dp[i][j]` to `True` if `dp[i+1][j-1]` is `True` and the characters at `i` and `j` are the same. - Update the start and maximum length variables if a longer palindrome is found. 6. Finally, extract and return the longest palindromic substring using the recorded start and maximum length. # Important Note: - The dynamic programming table should be properly updated to ensure accurate results. Example usage: ```python s = \\"babad\\" print(longest_palindromic_substring(s)) # Output: \\"bab\\" or \\"aba\\" s = \\"cbbd\\" print(longest_palindromic_substring(s)) # Output: \\"bb\\" ```","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in a given string using dynamic programming. :param s: A string consisting of lowercase and uppercase alphabetical characters :return: The longest palindromic substring n = len(s) if n == 0: return \\"\\" # Initialize a 2D dp array dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # Every single character is a palindrome for i in range(n): dp[i][i] = True # Check for palindrome of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for palindrome of length 3 or more for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return s[start:start + max_length]"},{"question":"You are tasked with implementing a function to perform the K-means clustering algorithm. This function, `k_means`, will partition a given set of 2D points into `k` clusters. Your task is to complete the implementation of the `k_means` function. The function takes in three parameters: 1. `points`: A list of points where each point is represented as a tuple of two coordinates (x, y). 2. `k`: The number of clusters to partition the points into, a positive integer. 3. `max_iters`: The maximum number of iterations to run the algorithm, a positive integer. The algorithm should iterate until convergence or until the maximum number of iterations (`max_iters`) is reached. Convergence is achieved when the cluster assignments for the points do not change between iterations. To initialize the cluster centroids, you may randomly select `k` points from the input points. # Function Signature ```python def k_means(points, k, max_iters): # Your implementation here ``` # Input - `points`: A list of `n` points, each represented as a tuple (float, float). - `k`: Number of clusters (positive integer). - `max_iters`: Maximum iterations (positive integer). # Output - A list where each element is a list of points assigned to a cluster. # Example ```python points = [(1.0, 2.0), (3.0, 3.0), (6.0, 8.0), (8.0, 8.0), (1.0, 0.5)] k = 2 max_iters = 5 clusters = k_means(points, k, max_iters) print(clusters) # Example output: [[(1.0, 2.0), (1.0, 0.5)], [(3.0, 3.0), (6.0, 8.0), (8.0, 8.0)]] ``` **Note:** - Euclidean distance should be used to determine the closest centroid. - The centroids of the clusters are recalculated as the mean position of all points in the cluster after each iteration. # Libraries Required ```python import random from math import sqrt ```","solution":"import random from math import sqrt def k_means(points, k, max_iters): def euclidean_distance(p1, p2): return sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) def calculate_centroid(cluster): x_coords = [p[0] for p in cluster] y_coords = [p[1] for p in cluster] return (sum(x_coords) / len(x_coords), sum(y_coords) / len(y_coords)) if k > len(points): raise ValueError(\\"Number of clusters k cannot be greater than number of points\\") # Randomly initialize centroids centroids = random.sample(points, k) for _ in range(max_iters): clusters = [[] for _ in range(k)] for point in points: distances = [euclidean_distance(point, centroid) for centroid in centroids] closest_centroid_index = distances.index(min(distances)) clusters[closest_centroid_index].append(point) new_centroids = [calculate_centroid(cluster) for cluster in clusters if cluster] if len(new_centroids) < k: # Some clusters might end up empty, assign empty clusters to new random points empty_cluster_count = k - len(new_centroids) new_centroids.extend(random.sample(points, empty_cluster_count)) if new_centroids == centroids: break centroids = new_centroids return clusters"},{"question":"You are required to write a function named `analyze_student_grades` that processes a CSV file containing student grades. The objective is to calculate various statistics for each student and for the class as a whole, using Python\'s CSV library. Requirements: 1. Read the `grades.csv` file to determine if it contains a header. 2. Each row in the CSV contains a student\'s name and their grades for multiple subjects. 3. Calculate the following for each student: - Average grade - Highest grade - Lowest grade 4. Calculate the following class-wide statistics: - Average grade for each subject - Highest grade for each subject - Lowest grade for each subject Function Signature: ```python def analyze_student_grades(grades_file: str) -> dict: ``` Example: Assume the file `grades.csv` contains the following data: ``` name,math,english,science Alice,90,85,88 Bob,78,82,89 Charlie,92,79,85 ``` The function should produce the following dictionary: ```python { \'students\': { \'Alice\': { \'average\': 87.67, \'highest\': 90, \'lowest\': 85 }, \'Bob\': { \'average\': 83.0, \'highest\': 89, \'lowest\': 78 }, \'Charlie\': { \'average\': 85.33, \'highest\': 92, \'lowest\': 79 } }, \'class\': { \'math\': { \'average\': 86.67, \'highest\': 92, \'lowest\': 78 }, \'english\': { \'average\': 82.0, \'highest\': 85, \'lowest\': 79 }, \'science\': { \'average\': 87.33, \'highest\': 89, \'lowest\': 85 } } } ``` Return a dictionary containing these statistics in the format specified above.","solution":"import csv def analyze_student_grades(grades_file: str) -> dict: students = {} subjects = {} with open(grades_file, newline=\'\') as csvfile: reader = csv.reader(csvfile) header = next(reader) subjects_names = header[1:] subject_grades = {subject: [] for subject in subjects_names} for row in reader: name = row[0] grades = list(map(int, row[1:])) students[name] = { \'average\': sum(grades) / len(grades), \'highest\': max(grades), \'lowest\': min(grades) } for subject, grade in zip(subjects_names, grades): subject_grades[subject].append(grade) for subject in subjects_names: grades = subject_grades[subject] subjects[subject] = { \'average\': sum(grades) / len(grades), \'highest\': max(grades), \'lowest\': min(grades) } return { \'students\': students, \'class\': subjects }"},{"question":"Write a function `longestConsecutiveSequence` to find the length of the longest consecutive elements sequence in an unsorted array of integers. The function should use a set for efficient lookups. The function signature is as follows: ```python def longestConsecutiveSequence(nums: List[int]) -> int: ``` **Input** - `nums`: A list of integers. **Output** - Return the length of the longest sequence of consecutive integers in the array. **Requirements:** 1. If the list is empty, return 0. 2. The implementation should achieve a time complexity of O(n). To achieve this: - First, convert the list to a set to allow O(1) average-time complexity lookups. - Iterate through each number in the set. - For a given number, check if it is the beginning of a sequence (i.e., `num - 1` is not in the set). - If it is the start of a sequence, count the length of the sequence by incrementing the number and checking if the incremented number is in the set. Here\'s the function outline: ```python def longestConsecutiveSequence(nums: List[int]) -> int: # Base case: empty array if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only check for the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 # Count the length of the sequence while current_num + 1 in num_set: current_num += 1 current_streak += 1 # Update the longest streak found longest_streak = max(longest_streak, current_streak) return longest_streak ``` You need to complete the `longestConsecutiveSequence` function to find the length of the longest sequence of consecutive integers in the provided list, leveraging the efficiency of set operations for constant-time lookups.","solution":"from typing import List def longestConsecutiveSequence(nums: List[int]) -> int: # Base case: empty array if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only check for the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 # Count the length of the sequence while current_num + 1 in num_set: current_num += 1 current_streak += 1 # Update the longest streak found longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are required to create a function that processes a list of log entries to identify and count the unique IP addresses found in the logs. You will be provided with the structure below, and your task is to complete the function to search for IP addresses in the log entries. The function, `count_unique_ips(log_entries)`, will: 1. Receive a list of log entries as input. 2. Extract all IP addresses from each log entry using regular expressions. 3. Store the unique IP addresses in a set. 4. Return the count of unique IP addresses found. **Function Signature:** ```python def count_unique_ips(log_entries: list) -> int: ``` **Requirements:** - **re.findall**: Use the `re` module\'s `findall` function to search for IP addresses. Below is a reference snippet from the documentation for the correct usage. **Documentation:** ```plaintext re.findall = findall(pattern, string, flags=0) Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found. :param pattern: A regular expression pattern to match. :param string: The string to search in. :param flags: Optional flags to modify the matching behavior. :return: A list of matched strings. :rtype: list ``` **Example Execution:** ```python log_entries = [ \'2023-10-01 10:00:00 Error 404: IP 192.168.0.1 not found\', \'2023-10-01 10:05:00 Success 200: User login from 192.168.0.2\', \'2023-10-01 10:10:00 Success 200: User logout from 192.168.0.1\' ] print(count_unique_ips(log_entries)) # Output: 2 ```","solution":"import re def count_unique_ips(log_entries): Counts the number of unique IP addresses found in the given log entries. Args: log_entries (list): List of log entries as strings. Returns: int: The count of unique IP addresses. ip_pattern = r\'(b(?:[0-9]{1,3}.){3}[0-9]{1,3}b)\' unique_ips = set() for entry in log_entries: ips = re.findall(ip_pattern, entry) unique_ips.update(ips) return len(unique_ips)"},{"question":"In this challenge, you are asked to implement a function that takes a list of dates in `YYYY-MM-DD` format and determines the longest consecutive sequence of dates. The function should identify sequences of consecutive dates, considering days with no gaps, and return the length of the longest such sequence. The function `longest_consecutive_dates()` should: 1. Take a list of date strings in `YYYY-MM-DD` format. 2. Convert these date strings to date objects to facilitate comparison. 3. Identify sequences of consecutive dates in the list. 4. Return the length of the longest sequence of consecutive dates. # Function Signature ```python def longest_consecutive_dates(dates: List[str]) -> int: pass ``` # Specific Requirements 1. Utilize Python’s `datetime` module to convert and manipulate date strings. 2. Ensure that the function handles edge cases such as an empty list or a list with one date. 3. The date strings in the list are guaranteed to be in the correct format. 4. You can assume no duplicate dates in the input list. # Examples Example 1: ```python dates = [\\"2023-01-01\\", \\"2023-01-02\\", \\"2023-01-03\\", \\"2023-01-10\\", \\"2023-01-11\\"] print(longest_consecutive_dates(dates)) # Output: 3 ``` Example 2: ```python dates = [\\"2023-05-01\\", \\"2023-05-03\\", \\"2023-05-02\\"] print(longest_consecutive_dates(dates)) # Output: 3 ``` Example 3: ```python dates = [] print(longest_consecutive_dates(dates)) # Output: 0 ``` # Notes - Be sure to sort the dates before checking for consecutive sequences. - Think about how you can effectively determine consecutive dates using properties of date objects.","solution":"from datetime import datetime, timedelta from typing import List def longest_consecutive_dates(dates: List[str]) -> int: if not dates: return 0 # Convert strings to datetime objects dates = [datetime.strptime(date, \\"%Y-%m-%d\\") for date in dates] # Sort the dates dates.sort() longest_streak = 1 current_streak = 1 for i in range(1, len(dates)): if dates[i] == dates[i-1] + timedelta(days=1): current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are creating a command-line application in Python that accepts user input to manage a simple to-do list. Users should be able to add tasks to the list, mark tasks as completed, and display the list of all tasks with their statuses. Create a function called `manage_todo_list` that: 1. Continuously prompts the user to enter a command (`add`, `complete`, `show`, or `exit`). 2. If the user enters `add`, prompt for the task description and add it to the list. 3. If the user enters `complete`, prompt for the task number and mark it as completed. 4. If the user enters `show`, display all tasks with their statuses (e.g., `[ ] Task description` for incomplete tasks and `[x] Task description` for completed tasks). 5. If the user enters `exit`, exit the loop and terminate the function. You may assume the maximum number of tasks will not exceed 100. **Requirements:** 1. Use a list to store tasks, where each task is represented as a dictionary with `description` and `completed` keys. 2. Implement clear and user-friendly prompts and outputs. ```python # Your task: Implement the \'manage_todo_list\' function here. def manage_todo_list(): tasks = [] while True: command = input(\\"Enter a command (add, complete, show, exit): \\").strip().lower() if command == \\"add\\": description = input(\\"Enter the task description: \\").strip() tasks.append({\\"description\\": description, \\"completed\\": False}) elif command == \\"complete\\": task_id = int(input(\\"Enter the task number to mark complete: \\").strip()) - 1 if 0 <= task_id < len(tasks): tasks[task_id][\\"completed\\"] = True else: print(\\"Invalid task number\\") elif command == \\"show\\": for index, task in enumerate(tasks, start=1): status = \\"[x]\\" if task[\\"completed\\"] else \\"[ ]\\" print(f\\"{index}. {status} {task[\'description\']}\\") elif command == \\"exit\\": break else: print(\\"Unknown command, please try again\\") ```","solution":"def manage_todo_list(): tasks = [] while True: command = input(\\"Enter a command (add, complete, show, exit): \\").strip().lower() if command == \\"add\\": description = input(\\"Enter the task description: \\").strip() tasks.append({\\"description\\": description, \\"completed\\": False}) elif command == \\"complete\\": try: task_id = int(input(\\"Enter the task number to mark complete: \\").strip()) - 1 if 0 <= task_id < len(tasks): tasks[task_id][\\"completed\\"] = True else: print(\\"Invalid task number\\") except ValueError: print(\\"Please enter a valid number\\") elif command == \\"show\\": for index, task in enumerate(tasks, start=1): status = \\"[x]\\" if task[\\"completed\\"] else \\"[ ]\\" print(f\\"{index}. {status} {task[\'description\']}\\") elif command == \\"exit\\": break else: print(\\"Unknown command, please try again\\")"},{"question":"You are tasked with creating a function named `aggregate_sales_data()` that reads data from \'sales.csv\' and performs specific aggregations on the \'sales\' column. The dataset contains daily sales information with the following columns: \'date\', \'region\', \'product\', \'sales\'. Your task is to read this dataset and compute the total and average sales for each combination of \'region\' and \'product\'. Steps to follow: 1. Read the provided \'sales.csv\' file into a DataFrame using `pandas.read_csv`. 2. Group the data by \'region\' and \'product\'. 3. Compute the total sales and average sales for each combination of \'region\' and \'product\'. 4. Create a new DataFrame with the aggregated data, containing the columns \'region\', \'product\', \'total_sales\', and \'avg_sales\'. Return the aggregated DataFrame. **Code Snippet for Reference**: ```python def aggregate_sales_data(): df = pd.read_csv(\'sales.csv\') # Group by region and product grouped = df.groupby([\'region\', \'product\']).agg(total_sales=(\'sales\', \'sum\'), avg_sales=(\'sales\', \'mean\')) # Reset index to get \'region\' and \'product\' columns back df_aggregated = grouped.reset_index() return df_aggregated ``` Here is the detailed documentation for the two primary API calls you need to use: - [pandas.read_csv](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html) - [pandas.DataFrame.groupby](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html) **Example Usage**: ```python df_aggregated = aggregate_sales_data() print(df_aggregated.head()) ``` **Expected Output**: The first few rows of the aggregated DataFrame should include the region, product, and the computed total and average sales like so: ``` region product total_sales avg_sales 0 East A 1500 125.00 1 East B 2450 204.17 2 North A 2300 191.67 3 North B 1900 158.33 4 South A 2050 170.83 ```","solution":"import pandas as pd def aggregate_sales_data(filename = \'sales.csv\'): Reads the sales data from a CSV file, aggregates total and average sales by region and product, and returns a new DataFrame with the results. Parameters: filename (str): The path to the CSV file containing the sales data. Returns: pd.DataFrame: A DataFrame containing the aggregated sales data with columns \'region\', \'product\', \'total_sales\', and \'avg_sales\'. # Read the sales data from the CSV file df = pd.read_csv(filename) # Group the data by \'region\' and \'product\' grouped = df.groupby([\'region\', \'product\']).agg( total_sales=(\'sales\', \'sum\'), avg_sales=(\'sales\', \'mean\') ) # Reset index to get \'region\' and \'product\' columns back df_aggregated = grouped.reset_index() return df_aggregated"},{"question":"You are tasked with implementing a single function that simulates a basic event scheduling system. The system processes a list of events and determines the maximum number of events that can be attended without any overlap. Each event has a start time and an end time. You are to implement a function named `max_events` which determines the maximum number of non-overlapping events that can be attended. # Input Parameters: - `events` (list of tuples): A list where each tuple contains two integers representing the start and end times of an event. # Output: - Return an integer representing the maximum number of non-overlapping events that can be attended. # Requirements: - Your solution should efficiently handle large lists of events. - The `events` list is not pre-sorted. # Example: ```python events = [(1, 3), (2, 4), (3, 5)] print(max_events(events)) # Output: 2 ``` # Explanation: In the example provided, the events (1, 3) and (3, 5) can be attended without overlap, thus the maximum number of events that can be attended is 2. # Notes: 1. Events are represented as time intervals [start, end), meaning they include the start time but exclude the end time. 2. Consider using a greedy algorithm to solve this problem. Here is an example template for the function: ```python def max_events(events): # Your implementation here return 0 ``` #","solution":"def max_events(events): Determines the maximum number of non-overlapping events that can be attended. Parameters: events (list of tuples): A list where each tuple contains two integers representing the start and end times of an event. Returns: int: Maximum number of non-overlapping events that can be attended. # Sort events based on end times events.sort(key=lambda x: x[1]) max_events_attended = 0 last_end_time = -1 for start, end in events: if start >= last_end_time: max_events_attended += 1 last_end_time = end return max_events_attended"},{"question":"Write a function named `sort_and_filter_words` that processes a list of words. Your function should sort the words in alphabetical order and then filter out any words that are shorter than a given length. It should return the sorted and filtered list of words. The function you need to create should have the following signature: ```python def sort_and_filter_words(words: List[str], min_length: int) -> List[str]: ``` Parameters: - **words (List[str])**: A list of strings representing the words to be processed. - **min_length (int)**: An integer specifying the minimum length a word must have to be included in the result. Requirements: 1. Use Python\'s built-in `sorted` function to sort the list of words in alphabetical order. 2. Use a list comprehension to filter out any words that are shorter than `min_length`. 3. Provide informative comments to explain the key steps and the usage of the `sorted` function and list comprehension.","solution":"from typing import List def sort_and_filter_words(words: List[str], min_length: int) -> List[str]: Sorts the given list of words in alphabetical order and filters out words that are shorter than min_length. Parameters: words (List[str]): A list of words to be processed. min_length (int): The minimum length a word must have to be included in the result. Returns: List[str]: Sorted and filtered list of words. # First, filter out words that are shorter than min_length using a list comprehension. filtered_words = [word for word in words if len(word) >= min_length] # Then, sort the filtered words alphabetically using the sorted function. sorted_filtered_words = sorted(filtered_words) return sorted_filtered_words"},{"question":"You need to implement a thread-safe version of a bank account system in Python using the `threading` module. In this system, multiple threads can deposit and withdraw money simultaneously from a shared bank account. Your task is to create a function `simulate_bank_account(transactions, initial_balance)` that processes a list of deposit and withdrawal transactions safely. 1. **Function Signature** ```python def simulate_bank_account(transactions: list, initial_balance: int) -> int: ``` 2. **Parameters** - `transactions` (list): A list of tuples, each tuple representing a transaction. Each transaction is of the form `(\'D\' or \'W\', amount)`, where \'D\' is a deposit and \'W\' is a withdrawal. - `initial_balance` (int): The initial balance of the bank account. 3. **Returns** - Returns the final balance of the bank account after processing all transactions. 4. **Requirements** - Use `threading.Thread` to process each transaction in a separate thread. - Ensure that the operations on the bank account are thread-safe to prevent race conditions. - Use appropriate synchronization mechanisms from the `threading` module, such as `Lock`, to manage access to the shared bank account balance. - Implement the deposit and withdrawal functions, ensuring that the balance does not go negative. - Print messages to indicate each deposit and withdrawal, along with the transaction amount and resulting balance. 5. **Assumptions** - You can assume that the initial balance and transaction amounts are non-negative integers. - There is no need to handle specific transaction failure or rollback mechanisms beyond ensuring the balance does not go negative. 6. **Example** If you call `simulate_bank_account([(\'D\', 100), (\'W\', 50), (\'D\', 200), (\'W\', 150), (\'W\', 100)], 100)`, it should process each transaction in a separate thread and print messages indicating the transaction details. The function should return the final balance after all transactions are processed, ensuring thread-safety. ```python Initial Balance: 100 Transaction: Deposit 100, New Balance: 200 Transaction: Withdraw 50, New Balance: 150 Transaction: Deposit 200, New Balance: 350 Transaction: Withdraw 150, New Balance: 200 Transaction: Withdraw 100, New Balance: 100 Final Balance: 100 ```","solution":"import threading def simulate_bank_account(transactions, initial_balance): balance = initial_balance balance_lock = threading.Lock() def process_transaction(transaction): nonlocal balance action, amount = transaction with balance_lock: if action == \'D\': balance += amount print(f\\"Transaction: Deposit {amount}, New Balance: {balance}\\") elif action == \'W\': if balance >= amount: balance -= amount print(f\\"Transaction: Withdraw {amount}, New Balance: {balance}\\") else: print(f\\"Transaction: Withdraw {amount} failed due to insufficient funds, Balance: {balance}\\") threads = [] for transaction in transactions: thread = threading.Thread(target=process_transaction, args=(transaction,)) threads.append(thread) thread.start() for thread in threads: thread.join() print(f\\"Final Balance: {balance}\\") return balance"},{"question":"You are given a dataset containing sales data of different products from an e-commerce platform. Your objective is to analyze the sales performance by visualizing the distribution of sales across various categories, regions, and time periods. You need to write a function named `plot_sales_distribution(data)` which takes a single argument: - `data`: A pandas DataFrame containing the following columns: - `category`: The category of the product. - `sales`: The amount of sales for the product. - `region`: The region where the product was sold. - `date`: The date when the product was sold. Your function should create and save a multi-panel plot with three subplots: 1. A bar plot of total `sales` for each `category`. 2. A bar plot of total `sales` for each `region`. 3. A line plot showing the trend of total `sales` over time. Each subplot must have an appropriate title: - \\"Sales by Category\\" for the first subplot. - \\"Sales by Region\\" for the second subplot. - \\"Sales Trend Over Time\\" for the third subplot. The final plot should be saved as a PNG file named `sales_distribution.png` in the current directory. Here is an example structure of the expected DataFrame: ```plaintext category sales region date 0 Gadgets 2000 North 2023-01-15 1 Appliances 1500 South 2023-01-16 2 Gadgets 3000 East 2023-01-17 ... ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_sales_distribution(data): Creates and saves a multi-panel plot with three subplots: 1. A bar plot of total sales for each category. 2. A bar plot of total sales for each region. 3. A line plot showing the trend of total sales over time. Parameters: data (pd.DataFrame): DataFrame containing sales data with columns: - `category` - `sales` - `region` - `date` # Convert \'date\' to datetime data[\'date\'] = pd.to_datetime(data[\'date\']) # Aggregate sales by category category_sales = data.groupby(\'category\')[\'sales\'].sum().reset_index() # Aggregate sales by region region_sales = data.groupby(\'region\')[\'sales\'].sum().reset_index() # Aggregate sales by date date_sales = data.groupby(\'date\')[\'sales\'].sum().reset_index() # Create figure and subplots fig, axes = plt.subplots(3, 1, figsize=(10, 18)) # Plot total sales by category axes[0].bar(category_sales[\'category\'], category_sales[\'sales\']) axes[0].set_title(\'Sales by Category\') axes[0].set_xlabel(\'Category\') axes[0].set_ylabel(\'Total Sales\') # Plot total sales by region axes[1].bar(region_sales[\'region\'], region_sales[\'sales\']) axes[1].set_title(\'Sales by Region\') axes[1].set_xlabel(\'Region\') axes[1].set_ylabel(\'Total Sales\') # Plot sales trend over time axes[2].plot(date_sales[\'date\'], date_sales[\'sales\'], marker=\'o\') axes[2].set_title(\'Sales Trend Over Time\') axes[2].set_xlabel(\'Date\') axes[2].set_ylabel(\'Total Sales\') # Adjust layout and save the plot plt.tight_layout() plt.savefig(\'sales_distribution.png\')"},{"question":"Develop a Python function `aggregate_weather_data` that processes a directory of CSV files containing daily weather data and produces a summary CSV file with monthly aggregates (mean temperature, total precipitation). Use the `pandas.read_csv`, `pandas.DataFrame.groupby`, and `glob.glob` libraries to perform the required operations. The function should have the following signature: ```python def aggregate_weather_data(input_directory, pattern, output_filename): ``` Parameters: - `input_directory`: A string representing the path to the directory containing the weather data CSV files. - `pattern`: A string containing the glob pattern to match the source CSV files (e.g., \'*.csv\'). - `output_filename`: A string representing the name of the summary output CSV file. Each input CSV file is expected to have the following columns: - `date`: The date of the observation in \'YYYY-MM-DD\' format. - `temperature`: The daily average temperature. - `precipitation`: The daily total precipitation. The function should: 1. List all files in the directory matching the given pattern using `glob.glob`. 2. Read and concatenate the matched CSV files into a single DataFrame. 3. Convert the `date` column to `datetime` format. 4. Group the data by year and month, calculating the mean temperature and total precipitation for each month. 5. Save the aggregated DataFrame to the specified output file using `DataFrame.to_csv`. Your function should print relevant information at each step to help users understand what\'s happening, including: - The list of files found matching the pattern. - Confirmation of successful concatenation and date conversion. - The aggregated DataFrame preview. - Confirmation of successful write to the output file.","solution":"import pandas as pd import glob import os def aggregate_weather_data(input_directory, pattern, output_filename): # Step 1: List all files in the directory matching the given pattern using `glob.glob`. file_pattern = os.path.join(input_directory, pattern) csv_files = glob.glob(file_pattern) print(f\\"Files found: {csv_files}\\") if not csv_files: print(f\\"No files found matching the pattern {pattern} in directory {input_directory}\\") return # Step 2: Read and concatenate the matched CSV files into a single DataFrame. df_list = [pd.read_csv(file) for file in csv_files] combined_df = pd.concat(df_list, ignore_index=True) print(f\\"Combined DataFrame shape: {combined_df.shape}\\") # Step 3: Convert the `date` column to `datetime` format. combined_df[\'date\'] = pd.to_datetime(combined_df[\'date\']) # Step 4: Group the data by year and month, calculating the mean temperature and total precipitation for each month. combined_df[\'year_month\'] = combined_df[\'date\'].dt.to_period(\'M\') grouped_df = combined_df.groupby(\'year_month\').agg({ \'temperature\': \'mean\', \'precipitation\': \'sum\' }).reset_index() print(f\\"Aggregated DataFrame preview:n{grouped_df.head()}\\") # Step 5: Save the aggregated DataFrame to the specified output file using `DataFrame.to_csv`. grouped_df.to_csv(output_filename, index=False) print(f\\"Aggregated data saved to {output_filename}\\")"},{"question":"You are asked to implement a function in Python that verifies if a given digital lock code is valid according to specific rules. The function is named `verify_lock_code` and takes a single parameter, a string `lock_code`. The validity rules for a lock code are: 1. The lock code must be exactly 6 characters long. 2. It must contain at least one uppercase letter (A-Z). 3. It must contain at least one lowercase letter (a-z). 4. It must contain at least one digit (0-9). 5. It must contain exactly one special character from the set: `!@#%^&*()`. Your task is to implement the `verify_lock_code` function that returns `True` if the given `lock_code` meets all the criteria, and `False` otherwise. Here is the prototype for the function you need to implement: ```python def verify_lock_code(lock_code: str) -> bool: pass ``` Example: ```python # Example usage: valid_code = verify_lock_code(\\"Aa1!ef\\") print(valid_code) # Output: True invalid_code = verify_lock_code(\\"Aaa1!e\\") print(invalid_code) # Output: False (does not contain uppercase letter) ``` Make sure to handle edge cases and ensure the function performs efficiently.","solution":"def verify_lock_code(lock_code: str) -> bool: if len(lock_code) != 6: return False has_upper = any(char.isupper() for char in lock_code) has_lower = any(char.islower() for char in lock_code) has_digit = any(char.isdigit() for char in lock_code) special_chars = \\"!@#%^&*()\\" has_special_char = sum(char in special_chars for char in lock_code) == 1 return has_upper and has_lower and has_digit and has_special_char"},{"question":"Your task is to implement a function `missing_ranges` that finds the ranges of missing numbers in a sorted list of integers. The function should receive two arguments: a list `nums` of unique integers sorted in ascending order, and two integers `lower` and `upper` representing the inclusive bounds. The function should return a list of strings where each string represents a range of missing numbers between the lower and upper bounds, inclusive. # Function Signature ```python def missing_ranges(nums: list, lower: int, upper: int) -> list: Parameters: - nums: list of integers, a sorted list of unique integers. - lower: int, the lower bound of the range. - upper: int, the upper bound of the range. Returns: - list of strings representing the missing ranges in the format \\"a->b\\" or \\"a\\". ``` # Example Example 1 ```python missing_ranges([3, 5, 8], 1, 10) ``` **Input:** - nums: `[3, 5, 8]` - lower: `1` - upper: `10` **Output:** `[\'1->2\', \'4\', \'6->7\', \'9->10\']` **Explanation:** - The numbers missing from 1 to 2 are not in the list. - 4 is missing. - The numbers missing from 6 to 7 are not in the list. - The numbers missing from 9 to 10 are not in the list. Example 2 ```python missing_ranges([], 1, 5) ``` **Input:** - nums: `[]` - lower: `1` - upper: `5` **Output:** `[\'1->5\']` **Explanation:** - All numbers from 1 to 5 are missing. # Steps to Implement 1. **Initialization**: Initialize an empty list to store the missing ranges and a variable to track the previous number. 2. **Iterate through `nums`**: - Check if there is any missing range between the previous number (or lower bound) and the current number. - Append the detected missing range to the result list. 3. **After Iteration**: - Check if there is any missing range between the last number in `nums` and the upper bound. 4. **Formatting**: - For single missing numbers, append them as a single number. - For ranges, format them in the `\\"a->b\\"` style. 5. **Return**: The list of missing ranges.","solution":"def missing_ranges(nums: list, lower: int, upper: int) -> list: Finds missing ranges from a sorted list of numbers. Parameters: - nums: list of integers, a sorted list of unique integers. - lower: int, the lower bound of the range. - upper: int, the upper bound of the range. Returns: - list of strings representing the missing ranges in the format \\"a->b\\" or \\"a\\". result = [] prev = lower - 1 for num in nums + [upper + 1]: if num == prev + 2: result.append(str(prev + 1)) elif num > prev + 2: result.append(f\\"{prev + 1}->{num - 1}\\") prev = num return result"},{"question":"Your task is to implement a function that filters and processes a list of orders based on the provided criteria. The input consists of a JSON file containing a list of orders where each order is a dictionary with at least the keys \'order_id\', \'customer_name\', \'total_amount\', and \'order_date\'. Your function should read the input JSON file, filter out any orders that do not meet a minimum total amount criterion, and then write the filtered list of orders to a new JSON file. The orders in the output file should be sorted by the order_date in ascending order. The function should handle the following exceptions: - FileNotFoundError: If the input JSON file does not exist. - ValueError: If the minimum total amount criterion is not a positive number. The function should return: - output_list (list): List of dictionaries representing the filtered and sorted orders. You should write self-contained code starting with: ``` import os import json from datetime import datetime def filter_orders(input_file: str, output_file: str, min_total_amount: float) -> list: ```","solution":"import os import json from datetime import datetime def filter_orders(input_file: str, output_file: str, min_total_amount: float) -> list: if min_total_amount <= 0: raise ValueError(\\"Minimum total amount must be a positive number.\\") try: with open(input_file, \'r\') as file: orders = json.load(file) except FileNotFoundError: raise FileNotFoundError(\\"Input JSON file does not exist.\\") filtered_orders = [order for order in orders if order[\'total_amount\'] >= min_total_amount] sorted_orders = sorted(filtered_orders, key=lambda order: datetime.strptime(order[\'order_date\'], \'%Y-%m-%d\')) with open(output_file, \'w\') as file: json.dump(sorted_orders, file, indent=4) return sorted_orders"},{"question":"You are asked to create a function named `get_top_n_students` that takes a DataFrame of student names and their scores, as well as an integer `n` indicating the number of top-scoring students to return. Your function should return a DataFrame containing the names and scores of the top `n` students, sorted by their scores in descending order. In the case of a tie in scores, students should be sorted alphabetically by their names. **Function signature:** ```python def get_top_n_students(df, n): # Your code here ``` **Parameters:** - `df` (DataFrame): A pandas DataFrame with columns `Name` and `Score`, where `Name` is a string and `Score` is an integer. - `n` (int): The number of top-scoring students to return. **Returns:** - A pandas DataFrame with columns `Name` and `Score` containing the top `n` students. # Example: ```python import pandas as pd # Sample DataFrame data = { \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eva\'], \'Score\': [85, 92, 88, 92, 70] } df = pd.DataFrame(data) # Get top 3 students top_students_df = get_top_n_students(df, 3) print(top_students_df) ``` **Expected Output:** ``` Name Score 1 Bob 92 3 David 92 2 Charlie 88 ``` **Requirements:** 1. Ensure the DataFrame is sorted first by score in descending order and then by name in ascending order for ties. 2. Use pandas DataFrame methods such as `sort_values` and `head`. **Hints:** - You can use the `sort_values` method to achieve the sorted order based on multiple criteria. - Use the `head` method to get the first `n` rows after sorting.","solution":"import pandas as pd def get_top_n_students(df, n): Returns a DataFrame containing the top `n` students based on their scores. Parameters: - df (DataFrame): A pandas DataFrame with columns \'Name\' and \'Score\'. - n (int): The number of top-scoring students to return. Returns: - A pandas DataFrame with columns \'Name\' and \'Score\' containing the top `n` students. # Sort DataFrame first by Score in descending order, then by Name in ascending order sorted_df = df.sort_values(by=[\'Score\', \'Name\'], ascending=[False, True]) # Return the top `n` rows of the sorted DataFrame return sorted_df.head(n)"},{"question":"In this problem, you are required to create a function named `manage_inventory` that simulates the process of managing an inventory system using Python\'s `threading` library. This will involve syncing access to a shared resource (inventory) among multiple threads. Task: 1. Implement a function named `manage_inventory` that does the following: - Initialize a threading lock `inventory_lock`. - Declare a dictionary `inventory` with initial keys as item names (strings) and values as the quantities (integers). - Create two nested functions: - `add_item`: This function should accept an `item_name` (string) and `quantity` (integer). It should: - Acquire the `inventory_lock`. - Add the `quantity` to the appropriate item in the `inventory`. - Print a message indicating the item added and the new quantity. - Release the `inventory_lock`. - `remove_item`: This function should accept an `item_name` (string) and `quantity` (integer). It should: - Acquire the `inventory_lock`. - Subtract the `quantity` from the appropriate item in the `inventory`. - Ensure the quantity does not go below 0. - Print a message indicating the item removed and the new quantity. - Release the `inventory_lock`. - Initialize and start threads to demonstrate concurrent access (e.g., multiple `add_item` and `remove_item` operations). - Ensure the main thread waits for all threads to complete. Requirements: - Utilize the `threading` library specifically the `Lock` class and `Thread` class. - Maintain synchronized access to the shared `inventory`. - Ensure thread-safe operations on the shared resource.","solution":"import threading def manage_inventory(): inventory_lock = threading.Lock() inventory = { \'apples\': 10, \'oranges\': 5, \'bananas\': 8 } def add_item(item_name, quantity): with inventory_lock: if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity print(f\'Added {quantity} {item_name}. New quantity: {inventory[item_name]}\') def remove_item(item_name, quantity): with inventory_lock: if item_name in inventory: inventory[item_name] -= quantity if inventory[item_name] < 0: inventory[item_name] = 0 print(f\'Removed {quantity} {item_name}. New quantity: {inventory[item_name]}\') # Example threading setup threads = [] threads.append(threading.Thread(target=add_item, args=(\'apples\', 5))) threads.append(threading.Thread(target=remove_item, args=(\'oranges\', 2))) threads.append(threading.Thread(target=add_item, args=(\'grapes\', 3))) threads.append(threading.Thread(target=remove_item, args=(\'bananas\', 10))) for thread in threads: thread.start() for thread in threads: thread.join() return inventory"},{"question":"Design a function that parses an arithmetic expression string with nested parentheses and returns the evaluated result. This problem will help you practice string manipulation, the use of stacks, and recursive computation. Requirements: 1. Parse and evaluate the expression using a stack-based or recursive approach. 2. Handle standard arithmetic operators: +, -, *, /. 3. Support nested parentheses to any level of depth. Function Definition: ```python def evaluate_expression(expression): Parses and evaluates an arithmetic expression string with nested parentheses. Parameters: - expression: A string representing an arithmetic expression. Returns: - A float or integer representing the evaluated result of the expression. # Your implementation here ``` Explanation: 1. **Input:** - A string `expression` that contains an arithmetic expression with integers, parentheses, and the operators +, -, *, /. 2. **Output:** - The evaluated result of the expression as a float or integer. Steps: 1. Implement a helper function to parse and evaluate the expression inside the innermost parentheses first. 2. Use a stack to keep track of numbers and operators. 3. Iterate over the characters in the expression string: - If you encounter a digit, parse the entire number. - If you encounter an operator, push it onto the stack. - If you encounter an opening parenthesis, call the helper function recursively. - If you encounter a closing parenthesis, pop elements from the stack and evaluate the sub-expression. 4. Ensure that proper operator precedence is maintained during evaluation (multiplication and division before addition and subtraction). 5. Continue evaluating expressions until the entire string is parsed and the stack is processed. 6. Return the final result. Example: ```python # Example 1: input_expression = \\"3 + (2 * 4) - 5\\" print(evaluate_expression(input_expression)) # Output: 6 # Example 2: input_expression = \\"(1 + (2 * (2 + 3)))\\" print(evaluate_expression(input_expression)) # Output: 11 # Example 3: input_expression = \\"((2 + 3) * (4 - 2))\\" print(evaluate_expression(input_expression)) # Output: 10 ```","solution":"def evaluate_expression(expression): Parses and evaluates an arithmetic expression string with nested parentheses. Parameters: - expression: A string representing an arithmetic expression. Returns: - A float or integer representing the evaluated result of the expression. def parse_expression(s, index): def compute(ops, nums): num2 = nums.pop() num1 = nums.pop() op = ops.pop() if op == \'+\': nums.append(num1 + num2) elif op == \'-\': nums.append(num1 - num2) elif op == \'*\': nums.append(num1 * num2) elif op == \'/\': nums.append(num1 / num2) ops, nums = [], [] current_number = 0 while index < len(s): char = s[index] if char.isdigit(): current_number = current_number * 10 + int(char) elif char == \'(\': result, index = parse_expression(s, index + 1) current_number = result elif char in \'+-*/\': nums.append(current_number) current_number = 0 while ops and ops[-1] in \'*/\': compute(ops, nums) ops.append(char) elif char == \')\': nums.append(current_number) while ops: compute(ops, nums) return nums[0], index index += 1 nums.append(current_number) while ops: compute(ops, nums) return nums[0], index result, _ = parse_expression(expression, 0) return result"},{"question":"Write a function `find_duplicates(file_path: str) -> List[str]` that performs the following operations: 1. Receives a string `file_path` which represents the path to a text file containing names (one name per line). 2. Reads the content of the file and identifies any duplicate names. 3. Returns a list of duplicate names. If no duplicates are found, return an empty list. 4. The function must ignore the case (i.e., treat \\"Alice\\" and \\"alice\\" as the same name). 5. Ensures that the returned list contains each duplicate name only once, regardless of the number of appearances in the file. The function must demonstrate handling of file I/O operations and basic string manipulation.","solution":"from typing import List def find_duplicates(file_path: str) -> List[str]: Reads a file and returns a list of duplicate names, case insensitive. Args: file_path (str): A string representing the path to a text file containing names. Returns: List[str]: A list of duplicate names, each appearing only once. with open(file_path, \'r\') as file: names = file.readlines() names = [name.strip().lower() for name in names] name_count = {} for name in names: if name in name_count: name_count[name] += 1 else: name_count[name] = 1 duplicates = [name for name, count in name_count.items() if count > 1] return duplicates"},{"question":"Implement a function named `sort_and_filter_positive_numbers` that takes a list of integers as input. The function performs the following steps: 1. Filters out all negative numbers from the list. 2. Sorts the remaining positive numbers in ascending order. 3. Returns the sorted list of positive numbers. If the input list does not contain any positive numbers, the function should return an empty list. Example usage: ```python result = sort_and_filter_positive_numbers([3, -1, 2, -7, 5]) print(result) # Output: [2, 3, 5] result = sort_and_filter_positive_numbers([-3, -1, -2, -7, -5]) print(result) # Output: [] ``` Your task is to implement the `sort_and_filter_positive_numbers` function.","solution":"def sort_and_filter_positive_numbers(nums): Filters out negative numbers from the list, sorts the remaining positive numbers in ascending order, and returns the sorted list of positive numbers. Parameters: nums (list): List of integers. Returns: list: Sorted list of positive integers. # Filter out non-positive numbers positive_nums = [num for num in nums if num > 0] # Sort the positive numbers in ascending order positive_nums.sort() return positive_nums"},{"question":"You are required to write a Python function that computes a set of statistics for numerical columns in a Pandas DataFrame. The function should be able to handle missing values appropriately and return a DataFrame summarizing the calculated statistics. The summary should include the count of non-missing values, mean, median, standard deviation, minimum, and maximum for each numerical column. # Function Specification - **Function Name**: `compute_statistics` - **Parameters**: - `df`: A Pandas DataFrame containing the data. - `include_columns`: A list of column names to include in the statistics calculation. If `None`, calculate statistics for all numerical columns. - **Returns**: A Pandas DataFrame summarizing the statistics. # Example Here\'s an example snippet to demonstrate the expected input and usage: ```python import pandas as pd import numpy as np def compute_statistics(df, include_columns=None): Computes statistics for numerical columns in a DataFrame. # Your implementation here pass # Example DataFrame data = { \'A\': [1, 2, 3, 4, np.nan], \'B\': [5, 6, np.nan, 8, 10], \'C\': [\'foo\', \'bar\', \'baz\', \'qux\', \'quux\'] } df = pd.DataFrame(data) # Call the function summary_df = compute_statistics(df, include_columns=[\'A\', \'B\']) # Expected Output (example) # count mean median std min max # A 4.0 2.5 2.5 1.29 1.0 4.0 # B 4.0 7.25 7.0 2.16 5.0 10.0 ``` # Requirements 1. Use `pandas.DataFrame.count` to count non-missing values. 2. Use `pandas.DataFrame.mean` to calculate the mean. 3. Use `pandas.DataFrame.median` to calculate the median. 4. Use `pandas.DataFrame.std` to compute the standard deviation. 5. Use `pandas.DataFrame.min` to get the minimum value. 6. Use `pandas.DataFrame.max` to get the maximum value. 7. Ensure the function can handle and exclude non-numerical columns even if they are listed in `include_columns`. # Instructions Implement the function `compute_statistics`, taking into account handling NaN values correctly and summarizing statistics as required.","solution":"import pandas as pd import numpy as np def compute_statistics(df, include_columns=None): Computes statistics for numerical columns in a DataFrame. Parameters: df (pd.DataFrame): The input DataFrame. include_columns (list): List of column names to include in the statistics calculation. If None, calculate statistics for all numerical columns. Returns: pd.DataFrame: DataFrame summarizing the calculated statistics. # Select specific columns or all numerical columns if include_columns is None if include_columns is not None: df = df[include_columns] # Ensure only numerical columns are considered numerical_df = df.select_dtypes(include=[np.number]) # Calculate statistics count = numerical_df.count() mean = numerical_df.mean() median = numerical_df.median() std = numerical_df.std() min_value = numerical_df.min() max_value = numerical_df.max() # Combine the statistics into a DataFrame stats_df = pd.DataFrame({ \'count\': count, \'mean\': mean, \'median\': median, \'std\': std, \'min\': min_value, \'max\': max_value }) return stats_df"},{"question":"You are tasked with creating a function that takes a list of integers and a target integer, and returns the indices of the two numbers that add up to the target. Your solution should have a time complexity of O(n). The function, named `find_two_sum`, will take the list of integers and the target integer and return a tuple containing the indices of the two numbers. If no such pair exists, return `None`. Your task is to: 1. Write a function named `find_two_sum`. 2. The function should accept two parameters: a list of integers `nums` and an integer `target`. 3. The function should find and return a tuple `(index1, index2)` such that `nums[index1] + nums[index2] == target`. 4. If no such pair exists, return `None`. **Constraints:** - Each input list `nums` will contain at least two integers. - There will be exactly one solution assuming the problem constraints. - You may not use the same element twice. This exercise will help you learn how to implement an efficient solution to the two-sum problem using a dictionary for constant time lookups. **Example:** ```python # Example 1 result = find_two_sum([2, 7, 11, 15], 9) # Output: (0, 1) because nums[0] + nums[1] == 2 + 7 == 9. # Example 2 result = find_two_sum([3, 2, 4], 6) # Output: (1, 2) because nums[1] + nums[2] == 2 + 4 == 6. # Example 3 result = find_two_sum([3, 3], 6) # Output: (0, 1) because nums[0] + nums[1] == 3 + 3 == 6. ```","solution":"def find_two_sum(nums, target): Finds the indices of the two numbers in the list that add up to the target. :param nums: List of integers. :param target: Target integer to find the sum for. :return: Tuple containing indices of the two numbers, or None if no pair exists. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"You are given a list of dictionaries where each dictionary has student names as keys and their scores as values. Write a function to calculate the average score for each student and test if the average score improves or worsens compared to their previous average, assuming all previous scores are available. The function should output with: dict: A dictionary where keys are student names, and values are \'improved\' if the student\'s average score increased, \'worsened\' if it decreased, and \'no change\' if it remained the same. You should write self-contained code starting with: ``` def assess_student_performance(student_scores, prev_avg_scores): ``` Where `student_scores` is a list of dictionaries containing student names and their scores, and `prev_avg_scores` is a dictionary with student names as keys and their previous average scores as values.","solution":"def assess_student_performance(student_scores, prev_avg_scores): Calculate the average score for each student and assess if the average score has improved, worsened, or remained the same compared to their previous average scores. Parameters: student_scores (list): A list of dictionaries with student names as keys and their scores as values. prev_avg_scores (dict): A dictionary with student names as keys and their previous average scores as values. Returns: dict: A dictionary with student names as keys and values \'improved\', \'worsened\', or \'no change\'. if not student_scores: return {student: \'no change\' for student in prev_avg_scores} current_avg_scores = {} for scores in student_scores: for student, score in scores.items(): if student not in current_avg_scores: current_avg_scores[student] = [] current_avg_scores[student].append(score) current_avg_scores = {student: sum(scores) / len(scores) for student, scores in current_avg_scores.items()} result = {} for student, current_avg in current_avg_scores.items(): if student in prev_avg_scores: prev_avg = prev_avg_scores[student] if current_avg > prev_avg: result[student] = \'improved\' elif current_avg < prev_avg: result[student] = \'worsened\' else: result[student] = \'no change\' else: result[student] = \'improved\' # If no previous average, consider \'improved\' return result"},{"question":"You are given a DataFrame `df` that contains columns `employee_id` (int), `check_in_time` (datetime), and `check_out_time` (datetime). Write a function named `calculate_work_hours(df)` that adds a new column `work_hours` to the DataFrame, representing the total hours worked by each employee as a float rounded to two decimal places. # Requirements: 1. Use the `pandas` library to manipulate the DataFrame. 2. Ensure the `work_hours` column is calculated as the difference between `check_out_time` and `check_in_time` in hours. 3. Round the calculated hours to two decimal places. 4. Return the modified DataFrame with the added column. # Function Signature: ```python import pandas as pd def calculate_work_hours(df): pass ``` # Example Usage: ```python import pandas as pd from datetime import datetime # Create sample DataFrame data = {\'employee_id\': [1, 2, 3], \'check_in_time\': [datetime(2021, 10, 21, 9, 0), datetime(2021, 10, 21, 9, 30), datetime(2021, 10, 21, 10, 0)], \'check_out_time\': [datetime(2021, 10, 21, 17, 0), datetime(2021, 10, 21, 18, 15), datetime(2021, 10, 21, 19, 0)]} df = pd.DataFrame(data) # Calculate work hours result_df = calculate_work_hours(df) print(result_df) ``` This should output a DataFrame with the new `work_hours` column, for instance: ``` employee_id check_in_time check_out_time work_hours 0 1 2021-10-21 09:00:00 2021-10-21 17:00:00 8.00 1 2 2021-10-21 09:30:00 2021-10-21 18:15:00 8.75 2 3 2021-10-21 10:00:00 2021-10-21 19:00:00 9.00 ```","solution":"import pandas as pd def calculate_work_hours(df): Adds a new \'work_hours\' column to the DataFrame which represents the total hours worked by each employee, rounded to two decimal places. df[\'work_hours\'] = (df[\'check_out_time\'] - df[\'check_in_time\']).dt.total_seconds() / 3600 df[\'work_hours\'] = df[\'work_hours\'].round(2) return df"},{"question":"In this problem, you will write a function `find_highest_frequency(numbers: List[int]) -> int` that processes a list of integers and returns the integer that appears most frequently. In case of a tie (i.e., multiple integers having the same highest frequency), return the smallest integer among them. To accomplish this, you will need to make use of dictionaries to count the occurrences of each integer in the list and then determine which integer has the highest frequency. # Instructions 1. Write a function `find_highest_frequency(numbers: List[int]) -> int` that takes a single parameter `numbers`, which is a list of integers. 2. Use a dictionary to count the occurrences of each integer in the list. 3. Iterate through the dictionary to find the integer with the highest frequency. In case of a tie, return the smallest integer among those with the highest frequency. 4. Return the integer that meets the criteria. # Example ```python numbers = [1, 3, 2, 3, 2, 4, 2, 1, 5, 1, 3, 3] result = find_highest_frequency(numbers) print(result) # Output: 3 ``` # Constraints - The input list will contain only non-negative integers. - The list will have at least one element and its length will not exceed 10^4. - The integers in the list will be in the range from 0 to 10^5. Write your solution in Python, respecting the function signature provided above.","solution":"from typing import List def find_highest_frequency(numbers: List[int]) -> int: Returns the integer that appears most frequently in the list `numbers`. In case of a tie, returns the smallest integer among them. count_dict = {} # Count occurrences of each number for number in numbers: if number in count_dict: count_dict[number] += 1 else: count_dict[number] = 1 # Find the number with the highest frequency max_frequency = -1 most_frequent_number = None for number, frequency in count_dict.items(): if frequency > max_frequency or (frequency == max_frequency and number < most_frequent_number): max_frequency = frequency most_frequent_number = number return most_frequent_number"},{"question":"Design a class named `Employee` that represents an employee in an organization. The class should have the following attributes and methods: Attributes: 1. `name`: a string representing the name of the employee. 2. `age`: an integer representing the age of the employee. 3. `salary`: a float representing the salary of the employee. Methods: 1. `__init__(self, name, age, salary)`: a constructor that initializes the `name`, `age`, and `salary` attributes. 2. `get_details(self)`: returns a string in the format \\"Employee Name: {name}, Age: {age}, Salary: {salary}\\". 3. `give_raise(self, amount)`: increases the employee\'s salary by the specified `amount`. Additionally, implement a function named `top_earner` which takes a list of `Employee` objects and returns the `Employee` with the highest salary. Here are the specific details: 1. Inside the `get_details` method, format the salary to two decimal places. 2. The `give_raise` method should add the `amount` to the existing salary. 3. The `top_earner` function should handle an empty list by returning `None`. Example Usage: ```python class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary def get_details(self): return f\\"Employee Name: {self.name}, Age: {self.age}, Salary: {self.salary:.2f}\\" def give_raise(self, amount): self.salary += amount def top_earner(employees): if not employees: return None return max(employees, key=lambda e: e.salary) # Creating Employee objects emp1 = Employee(\\"Alice\\", 30, 60000.00) emp2 = Employee(\\"Bob\\", 25, 65000.00) emp3 = Employee(\\"Charlie\\", 28, 62000.00) # Displaying employee details print(emp1.get_details()) # Output: Employee Name: Alice, Age: 30, Salary: 60000.00 print(emp2.get_details()) # Output: Employee Name: Bob, Age: 25, Salary: 65000.00 # Giving a raise emp1.give_raise(5000) print(emp1.get_details()) # Output: Employee Name: Alice, Age: 30, Salary: 65000.00 # Finding the top earner employees = [emp1, emp2, emp3] top_employee = top_earner(employees) print(top_employee.get_details()) # Output: Employee Name: Bob, Age: 25, Salary: 65000.00 ```","solution":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary def get_details(self): return f\\"Employee Name: {self.name}, Age: {self.age}, Salary: {self.salary:.2f}\\" def give_raise(self, amount): self.salary += amount def top_earner(employees): if not employees: return None return max(employees, key=lambda e: e.salary)"},{"question":"**Design and implement a function `unique_elements_product(nums)` that computes the product of all unique elements in a given list of integers `nums`. If an element appears more than once in the list, it should be included exactly once in the product calculation.** **Function Definition:** ```python def unique_elements_product(nums: list) -> int: pass ``` **Input Parameters:** 1. `nums` (List): A list of integers. **Output:** The function should return an integer representing the product of all unique elements in the input list. **Example:** ```python nums = [2, 3, 4, 3, 2] output = unique_elements_product(nums) ``` The expected output should be: ``` 24 ``` (Explanation: The unique elements are [2, 3, 4]. Their product is 2 * 3 * 4 = 24) # Detailed Requirements: - Use Python\'s set data structure to identify the unique elements in the input list. - Compute the product of these unique elements. **Hints:** - Consider edge cases, such as an empty input list or a list with only one unique element. - The product of the elements of an empty list is conventionally 1. **Constraints:** - The input list will contain only integers. - The elements in the input list will be non-negative integers. ---","solution":"def unique_elements_product(nums: list) -> int: Computes the product of all unique elements in the given list of integers. if not nums: return 1 unique_nums = set(nums) product = 1 for num in unique_nums: product *= num return product"},{"question":"Implement a function `find_word_squares(words)`, which takes a list of strings (the dictionary of words) and returns all unique word squares that can be formed using the words in the given list. A word square is a set of words arranged in a square such that the words read the same horizontally and vertically. Detailed instructions: 1. Each word in the word square has the same length. 2. Each word must be present in the input list exactly once in each square. 3. The words should align so that the nth letter of each word forms the nth word of the square. To solve this problem, it is encouraged to use a backtracking approach to explore possible word squares. Preprocess the input words to create a prefix dictionary to facilitate efficient look-up during backtracking. # Function Signature ```python def find_word_squares(words: list[str]) -> list[list[str]]: pass ``` # Example ```python words = [\\"ball\\", \\"area\\", \\"lead\\", \\"lady\\", \\"ball\\"] print(find_word_squares(words)) # Output: [[\'ball\', \'area\', \'lead\', \'lady\']] ``` # Constraints - Assume that the word lengths in the input list are the same for simplicity. - Word length will be between 1 and 5. - The number of input words will not exceed 100. # Approach 1. Create a prefix dictionary from the list of words. 2. Use backtracking to form word squares and verify if the combinations meet the word square criteria. 3. Return all valid word squares.","solution":"def find_word_squares(words): from collections import defaultdict def build_prefix_dict(words): prefix_dict = defaultdict(list) for word in words: for i in range(len(word)): prefix_dict[word[:i]].append(word) return prefix_dict def backtrack(step, word_square): if step == word_len: result.append(list(word_square)) return prefix = \'\'.join(word_square[i][step] for i in range(step)) for candidate in prefix_dict[prefix]: word_square.append(candidate) backtrack(step + 1, word_square) word_square.pop() result = [] if not words: return result word_len = len(words[0]) prefix_dict = build_prefix_dict(words) for word in words: backtrack(1, [word]) return result"},{"question":"**Context:** Earthquake magnitude is usually measured on the Richter scale, and it\'s one of the most important parameters when assessing the potential impact of an earthquake. Seismic waves, which are energy waves that travel through the Earth, are recorded by seismographs, and their amplitudes are used to calculate the earthquake\'s magnitude. While simple in theory, the actual calculation involves aggregating data from different seismograph stations, which requires an efficient processing method. **Task:** You need to write a function `calculate_magnitude` which computes the average Richter magnitude of an earthquake from a list of recorded amplitudes from multiple seismograph stations. The function should use the logarithmic calculations necessary to convert amplitude to magnitude and then return the average of these magnitudes. **Function Signature:** ```python def calculate_magnitude(amplitudes: list) -> float: Compute the average Richter magnitude from amplitudes. Args: amplitudes (list): List of recorded amplitudes. Returns: float: The average Richter magnitude. ``` **Instructions:** 1. Given a list of recorded amplitudes, convert each amplitude to its respective magnitude using the formula: [ text{magnitude} = log_{10}(frac{text{amplitude}}{A_0}) ] where ( A_0 ) is a constant reference amplitude (e.g., ( A_0 = 10^{-3} )). 2. Calculate the average of these magnitudes. 3. Return the average magnitude as a float. **Example:** ```python amplitudes = [0.03, 0.1, 0.02, 0.5, 0.3] result = calculate_magnitude(amplitudes) print(result) # Output should be around 1.870 *Explanation:* Using the reference amplitude (A_0 = 10^{-3}), the magnitudes for the example amplitudes are calculated as follows: - For 0.03: (log_{10}(0.03 / 10^{-3}) = log_{10}(30) approx 1.477) - For 0.1: (log_{10}(0.1 / 10^{-3}) = log_{10}(100) = 2) - For 0.02: (log_{10}(0.02 / 10^{-3}) = log_{10}(20) approx 1.301) - For 0.5: (log_{10}(0.5 / 10^{-3}) = log_{10}(500) approx 2.699) - For 0.3: (log_{10}(0.3 / 10^{-3}) = log_{10}(300) approx 2.477) The average of these magnitudes is (1.477 + 2 + 1.301 + 2.699 + 2.477) / 5 ≈ 1.991. **Note:** - Ensure the function handles varying lengths of the input list. - Use the reference amplitude (A_0 = 10^{-3}) in your calculations.","solution":"import math def calculate_magnitude(amplitudes: list) -> float: Computes the average Richter magnitude from a list of recorded amplitudes. Args: amplitudes (list): List of recorded amplitudes. Returns: float: The average Richter magnitude. if not amplitudes: return 0.0 A_0 = 10**-3 magnitudes = [math.log10(amplitude / A_0) for amplitude in amplitudes] average_magnitude = sum(magnitudes) / len(magnitudes) return average_magnitude"},{"question":"In this task, you need to create a function that manipulates a list of strings based on given specifications. The function will perform certain operations to transform the input list into a desired output format. Your task is to write a function named `process_strings` which takes a list of strings as an argument and returns a new list. The function definition is as follows: ```python def process_strings(strings): ``` # Requirements: 1. The function will receive a list of strings as input. 2. All strings which are longer than 5 characters should be converted to uppercase. 3. All strings which are 5 characters or shorter should be reversed. 4. The transformed strings should be returned in a new list, preserving the original order of the input list. # Example Usage: ```python # Example input input_strings = [\\"apple\\", \\"banana\\", \\"kiwi\\", \\"cherry\\", \\"fig\\"] # Process the strings according to the rules output_strings = process_strings(input_strings) # Expected output: [\\"elppa\\", \\"BANANA\\", \\"iwik\\", \\"CHERRY\\", \\"gif\\"] print(output_strings) ``` In this example: - \\"apple\\" is reversed to \\"elppa\\" because it is 5 characters long - \\"banana\\" is converted to \\"BANANA\\" because it is longer than 5 characters - \\"kiwi\\" is reversed to \\"iwik\\" because it is shorter than 5 characters - \\"cherry\\" is converted to \\"CHERRY\\" because it is longer than 5 characters - \\"fig\\" is reversed to \\"gif\\" because it is shorter than 5 characters # Constraints: - You may assume the input list contains non-empty strings consisting only of alphabetic characters. - The function must handle any potentially large list efficiently. Your task is to implement the `process_strings` function to meet the specified requirements.","solution":"def process_strings(strings): Processes a list of strings based on specified rules: - Strings longer than 5 characters are converted to uppercase. - Strings 5 characters or shorter are reversed. result = [] for string in strings: if len(string) > 5: result.append(string.upper()) else: result.append(string[::-1]) return result"},{"question":"You are tasked to create a function called `top_3_highest_averages` that identifies and returns the top 3 students with the highest average scores from a provided dataset. The dataset will be a list of dictionaries, where each dictionary contains a student\'s name and their scores in various subjects. The function should return a list of dictionaries, each containing the student\'s name and their average score, sorted in descending order by average score. In case of a tie in average scores, the students should be returned in alphabetical order of their names. Here\'s a breakdown of the function signature: ```python def top_3_highest_averages(students): students (list): A list of dictionaries with each dictionary containing \'name\' (str) and \'scores\' (list of int). Returns: list: A list of dictionaries sorted by average scores in descending order, and by names in case of a tie. ``` **Requirements:** 1. Calculate the average score for each student. 2. Sort the students based on their average scores in descending order. 3. In case of ties in average scores, sort by student names in alphabetical order. 4. Return the top 3 students with the highest averages. Example: ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [70, 80, 90]}, {\\"name\\": \\"Bob\\", \\"scores\\": [85, 85, 85]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [90, 80, 70]}, {\\"name\\": \\"David\\", \\"scores\\": [80, 70, 60]}, {\\"name\\": \\"Eve\\", \\"scores\\": [100, 90, 95]} ] top_3_highest_averages(students) ``` Expected output: ```python [ {\\"name\\": \\"Eve\\", \\"average_score\\": 95.0}, {\\"name\\": \\"Bob\\", \\"average_score\\": 85.0}, {\\"name\\": \\"Alice\\", \\"average_score\\": 80.0} ] ```","solution":"def top_3_highest_averages(students): Identifies and returns the top 3 students with the highest average scores. Params: students (list): A list of dictionaries with each dictionary containing \'name\' (str) and \'scores\' (list of int). Returns: list: A list of dictionaries sorted by average scores in descending order, and by names in case of a tie. # Calculate the average score for each student for student in students: student[\'average_score\'] = sum(student[\'scores\']) / len(student[\'scores\']) # Sort the students based on their average scores in descending order, then by name in ascending order students_sorted = sorted(students, key=lambda x: (-x[\'average_score\'], x[\'name\'])) # Return the top 3 students top_3_students = students_sorted[:3] # Create the final list with \'name\' and \'average_score\' only result = [{\'name\': student[\'name\'], \'average_score\': student[\'average_score\']} for student in top_3_students] return result"},{"question":"You are tasked with creating a function to determine the longest substring in a given string that contains only unique characters. A substring is defined as any contiguous sequence of characters within the string. Requirements: - **Function Name**: `longest_unique_substring` - **Parameter**: - `s` (str): The input string. - **Return**: - `str`: The longest substring with all unique characters. Constraints: - The function should handle edge cases, such as an empty string or a string with all identical characters. - The function should efficiently iterate through the string, ensuring optimal performance. Example: ```python >>> longest_unique_substring(\\"abcabcbb\\") \'abc\' >>> longest_unique_substring(\\"bbbbb\\") \'b\' >>> longest_unique_substring(\\"pwwkew\\") \'wke\' >>> longest_unique_substring(\\"\\") \'\' >>> longest_unique_substring(\\"dvdf\\") \'dv\' ```","solution":"def longest_unique_substring(s): Returns the longest substring in the given string that contains only unique characters. if not s: return \\"\\" start = 0 max_length = 0 max_substring = \\"\\" seen_chars = {} for end in range(len(s)): if s[end] in seen_chars and seen_chars[s[end]] >= start: # update the start index to the new start to ensure all characters are unique start = seen_chars[s[end]] + 1 seen_chars[s[end]] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:end + 1] return max_substring"},{"question":"Read a JSON file containing transaction data. Preprocess the data by filling missing values, encoding categorical variables, and scaling numerical variables. Use this preprocessed data to train a decision tree classifier and return the F1 score of the model on a test dataset. The function should output with: float: The F1 score of the trained decision tree classifier. You should write self-contained code starting with: ``` import pandas as pd import json from sklearn.model_selection import train_test_split from sklearn.preprocessing import OneHotEncoder, StandardScaler from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import f1_score def task_func(json_file_path: str, target_column: str): ```","solution":"import pandas as pd import json from sklearn.model_selection import train_test_split from sklearn.preprocessing import OneHotEncoder, StandardScaler from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import f1_score def preprocess_data(df, target_column): # Fill missing values df = df.fillna(df.mean(numeric_only=True)) df = df.fillna(df.mode().iloc[0]) # Separate features and target X = df.drop(columns=[target_column]) y = df[target_column] # Encode categorical variables X = pd.get_dummies(X) # Scale numerical variables scaler = StandardScaler() X[X.columns] = scaler.fit_transform(X[X.columns]) return X, y def task_func(json_file_path: str, target_column: str): # Read the JSON file with open(json_file_path, \'r\') as file: data = json.load(file) df = pd.DataFrame(data) # Preprocess the data X, y = preprocess_data(df, target_column) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the decision tree classifier clf = DecisionTreeClassifier(random_state=42) clf.fit(X_train, y_train) # Predict on the test set y_pred = clf.predict(X_test) # Calculate the F1 score f1 = f1_score(y_test, y_pred, average=\'weighted\') return f1"},{"question":"Given an integer `n`, return a list of all unique permutations of the digits of `n`. The order of permutations in the list does not matter. If `n` contains any repeated digits, ensure the permutations are unique. Write a function: ```python def unique_permutations(n: int) -> list: ``` You should write self-contained code starting with: ```python def unique_permutations(n: int) -> list: from itertools import permutations # Convert integer to string for easier manipulation str_n = str(n) # Generate all possible permutations perm = set(permutations(str_n)) # Convert each tuple back to an integer and remove duplicates unique_perm = sorted({int(\'\'.join(p)) for p in perm}) return unique_perm ``` Example: ```python # Example usage: print(unique_permutations(112)) # Output: [112, 121, 211] print(unique_permutations(123)) # Output: [123, 132, 213, 231, 312, 321] ``` The function should: - Return a list of integers representing the unique permutations of the digits of `n`.","solution":"def unique_permutations(n: int) -> list: from itertools import permutations # Convert integer to string for easier manipulation str_n = str(n) # Generate all possible permutations perm = set(permutations(str_n)) # Convert each tuple back to an integer and remove duplicates unique_perm = sorted({int(\'\'.join(p)) for p in perm}) return unique_perm"},{"question":"Implement a function `pattern_count_in_matrix(matrix, pattern)` that counts the number of times a given pattern appears in a 2D matrix. The pattern should be searched in all eight possible directions (up, down, left, right, and the four diagonals). The elements in the matrix and the pattern are non-negative integers. The function should take the following parameters: 1. `matrix`: A 2D list of integers representing the matrix. 2. `pattern`: A list of integers representing the sequence to be searched for in the matrix. The function should return an integer representing the number of times the pattern is found in the matrix. # Example: ```python matrix = [ [1, 2, 3, 4], [5, 3, 2, 1], [3, 2, 3, 4], [4, 5, 6, 3] ] pattern = [3, 2, 1] ``` In this example, the pattern `[3, 2, 1]` appears twice in the matrix (once in the first row from the right to left and once in the second row from the left to right). # Function Signature: ```python def pattern_count_in_matrix(matrix: List[List[int]], pattern: List[int]) -> int: pass ```","solution":"from typing import List, Tuple def is_pattern_in_dir(matrix: List[List[int]], pattern: List[int], start: Tuple[int, int], delta: Tuple[int, int]) -> bool: rows, cols = len(matrix), len(matrix[0]) pi, pj = start for item in pattern: if not (0 <= pi < rows and 0 <= pj < cols) or matrix[pi][pj] != item: return False pi += delta[0] pj += delta[1] return True def pattern_count_in_matrix(matrix: List[List[int]], pattern: List[int]) -> int: if not matrix or not pattern: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (1, -1), (-1, 1)] count = 0 rows, cols = len(matrix), len(matrix[0]) for i in range(rows): for j in range(cols): for delta in directions: if is_pattern_in_dir(matrix, pattern, (i, j), delta): count += 1 return count"},{"question":"Create a function that simulates the inventory management of a store. The function should take the initial inventory quantities of different products and then randomly generate a sequence of sales and restocking events over a period of days. Sales quantities for each product should be drawn from a uniform distribution, and restocking quantities should follow an exponential distribution. The function should output: DataFrame: A pandas DataFrame showing the inventory levels of each product at the end of each day. You should write self-contained code starting with: ``` import pandas as pd import numpy as np def inventory_simulation(product_list, initial_inventory, num_days, max_sale_qty, restock_rate, rng_seed=None): ```","solution":"import pandas as pd import numpy as np def inventory_simulation(product_list, initial_inventory, num_days, max_sale_qty, restock_rate, rng_seed=None): Simulates the inventory management of a store over a number of days. Parameters: - product_list: List of product names. - initial_inventory: List of initial inventory quantities corresponding to the products. - num_days: Number of days to simulate. - max_sale_qty: Maximum sale quantity for each product. - restock_rate: Rate parameter for the exponential distribution for restocking. - rng_seed: Random number generator seed for reproducibility. Returns: - DataFrame with columns for each product showing the inventory level at the end of each day. if rng_seed is not None: np.random.seed(rng_seed) inventory = np.array(initial_inventory) data = {product: [] for product in product_list} for _ in range(num_days): # Generate sales for each product sales = np.random.randint(0, max_sale_qty + 1, size=len(product_list)) # Generate restocking for each product restocks = np.random.exponential(restock_rate, size=len(product_list)).astype(int) # Update inventory inventory = inventory - sales + restocks # Ensure no negative inventory inventory = np.maximum(inventory, 0) # Record the inventory levels at the end of the day for i, product in enumerate(product_list): data[product].append(inventory[i]) return pd.DataFrame(data)"},{"question":"You are tasked with creating a function called `filter_books_by_rating(books, rating_threshold)` that filters a list of books according to a specified rating threshold. Your function should accept two parameters: - `books`: A list of dictionaries where each dictionary represents a book and contains the keys `title`, `author`, and `rating`. - `rating_threshold`: A floating-point number representing the minimum acceptable rating. The function should return a list of book titles that have a rating greater than or equal to `rating_threshold`. Here are the specific requirements for your function: 1. Iterate through the list of book dictionaries. 2. For each book, check if its `rating` is greater than or equal to `rating_threshold`. 3. Collect the titles of books that meet the rating criteria. 4. Return a list of titles that have ratings greater than or equal to the given threshold. Below is the structure of the function you need to write: ```python def filter_books_by_rating(books, rating_threshold): # Your code here ``` Example usage of the function: ```python books = [ {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'rating\': 4.27}, {\'title\': \'1984\', \'author\': \'George Orwell\', \'rating\': 4.17}, {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'rating\': 3.91}, {\'title\': \'The Catcher in the Rye\', \'author\': \'J.D. Salinger\', \'rating\': 3.80} ] print(filter_books_by_rating(books, 4.0)) # Output: [\'To Kill a Mockingbird\', \'1984\'] ``` Ensure that your solution correctly filters the books based on the provided rating threshold and returns a list of titles as specified.","solution":"def filter_books_by_rating(books, rating_threshold): Filters books based on a rating threshold. Args: books (list): List of dictionaries, each representing a book with keys \'title\', \'author\', and \'rating\'. rating_threshold (float): The minimum rating required for a book to be included in the result. Returns: list: A list of book titles with ratings greater than or equal to rating_threshold. return [book[\'title\'] for book in books if book[\'rating\'] >= rating_threshold]"},{"question":"You are required to write a function named `generate_prime_matrix` that creates a matrix populated with prime numbers starting from 2. The matrix should be of size `n x m`, where `n` and `m` are the function parameters. Your function will: 1. Generate a list of prime numbers using a helper function `is_prime(num)` which checks if a number is prime (you can assume this function is pre-defined). 2. Populate the matrix in a row-wise manner using the generated prime numbers. Your function signature should be: ```python def generate_prime_matrix(n, m): # your code here ``` # Example Usage The following function call: ```python matrix = generate_prime_matrix(3, 3) ``` should return a 3x3 matrix containing prime numbers in the order they appear, like this: ``` [[2, 3, 5], [7, 11, 13], [17, 19, 23]] ``` # Constraints - The function should efficiently generate prime numbers without using excessive computational resources. - The matrix should be filled row-wise, from left to right, top to bottom. - The function should handle any values of `n` and `m` such that `n > 0` and `m > 0`.","solution":"def is_prime(num): Check if the number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def generate_prime_matrix(n, m): Generates an n x m matrix populated with prime numbers starting from 2. primes = [] num = 2 while len(primes) < n * m: if is_prime(num): primes.append(num) num += 1 matrix = [] for i in range(n): row = primes[i * m:(i + 1) * m] matrix.append(row) return matrix"},{"question":"In this problem, you are required to manage employee records alongside their project assignments. Your task is to implement a function called `manage_employee_projects` with the following needs: 1. Reads employee data from a JSON file (`employees.json`). 2. Reads project data from another JSON file (`projects.json`). 3. Based on the provided parameters, performs the following operations: - Verifies if the employee exists in `employees.json`. - Authenticates the employee using a provided password. - Displays the list of projects assigned to the employee if authentication is successful and the employee requests to see their projects. - Allows the employee to add a project to their list, ensuring the project exists in `projects.json`. This task involves: - Reading data from JSON files using `json.load`. - Modifying data structures in memory and possibly updating the JSON files using `json.dumps`. Your function, `manage_employee_projects`, should receive the following parameters: - `employee_name`: The name of the employee to process. - `password`: The password of the employee. - `action`: A boolean indicating whether the employee wants to see their projects (`True` to see projects, `False` for no action). - `project_name`: The name of the project to add to the employee\'s list (ignored if `action` is `False`). Here are the JSON file structures: - `employees.json` ```json { \\"employees\\": [ { \\"name\\": \\"Alice Johnson\\", \\"password\\": \\"alice123\\", \\"projects\\": [\\"Alpha\\"] }, { \\"name\\": \\"Bob Williams\\", \\"password\\": \\"bob456\\", \\"projects\\": [] } ] } ``` - `projects.json` ```json { \\"projects\\": [ { \\"name\\": \\"Alpha\\", \\"description\\": \\"Project Alpha Description\\" }, { \\"name\\": \\"Beta\\", \\"description\\": \\"Project Beta Description\\" } ] } ``` **Function signature:** ```python def manage_employee_projects(employee_name: str, password: str, action: bool, project_name: str): pass ```","solution":"import json def manage_employee_projects(employee_name: str, password: str, action: bool, project_name: str): This function manages employee projects by verifying the employee, authenticating using password, displaying projects, and adding a new project if requested. # Read employees data with open(\'employees.json\', \'r\') as emp_file: employees = json.load(emp_file)[\'employees\'] # Read projects data with open(\'projects.json\', \'r\') as proj_file: projects = json.load(proj_file)[\'projects\'] # Verify if employee exists employee = next((emp for emp in employees if emp[\'name\'] == employee_name), None) if not employee: return \\"Employee not found.\\" # Authenticate employee if employee[\'password\'] != password: return \\"Invalid password.\\" # Perform requested action if action: # Display employee\'s projects return employee[\'projects\'] # Add project if requested and it exists in the project list if project_name: project = next((proj for proj in projects if proj[\'name\'] == project_name), None) if not project: return \\"Project not found.\\" if project_name not in employee[\'projects\']: employee[\'projects\'].append(project_name) # Update the employees.json file with new data with open(\'employees.json\', \'w\') as emp_file: json.dump({\\"employees\\": employees}, emp_file, indent=4) return \\"Operation completed.\\""},{"question":"You are required to write a Python function named `find_largest_island` that takes a 2D list (or matrix) of integers representing a map of islands and water. The function should identify the size of the largest island in the map. An island is defined as a group of adjacent land cells (marked by 1s) connected horizontally or vertically (not diagonally). Water is represented by 0s. The `find_largest_island` function will: - Accept a 2D list `map` where each element is either 0 or 1. - Use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the map and calculate the size of each island. - Return the size of the largest island found. If no land is found, return 0. The function should handle edge cases such as empty maps or maps with no land cells efficiently. **Constraints:** - The 2D list will have at most 1000 rows and 1000 columns. **Function Signature:** ```python def find_largest_island(map: List[List[int]]) -> int: # Your implementation goes here ``` **Example:** ```python # Input map = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 0] ] # Output 4 ```","solution":"from typing import List def find_largest_island(map: List[List[int]]) -> int: Find the size of the largest island within the given map. if not map or not map[0]: return 0 rows = len(map) cols = len(map[0]) def dfs(x, y): if x < 0 or y < 0 or x >= rows or y >= cols or map[x][y] == 0: return 0 map[x][y] = 0 # Mark the cell as visited size = 1 # Current cell # Explore adjacent cells (up, down, left, right) size += dfs(x+1, y) size += dfs(x-1, y) size += dfs(x, y+1) size += dfs(x, y-1) return size largest_island = 0 for i in range(rows): for j in range(cols): if map[i][j] == 1: island_size = dfs(i, j) largest_island = max(largest_island, island_size) return largest_island"},{"question":"You are tasked with creating a function that processes a list of strings representing file paths and returns a new list of these file paths but with their directories flattened. The function will be named `flatten_file_paths` and should take one parameter `file_paths`, which is a list of strings. Your function should extract the file names from the provided file paths and ensure that all file names are unique in the output list by appending a counter to duplicates. You should follow this function signature: ```python def flatten_file_paths(file_paths): ``` Essentially, if two file paths have the same file name, append \'_1\', \'_2\', etc., to their base names in the resulting list. The function should use the format `base.ext` for the original, `base_1.ext` for the first duplicate, `base_2.ext` for the second duplicate, and so on. # Example Suppose you are given a list of file paths as follows: ```python file_paths = [ \\"photos/vacation/img1.jpg\\", \\"documents/work/img1.jpg\\", \\"downloads/img2.png\\", \\"photos/img2.png\\", \\"documents/paper.docx\\" ] ``` After calling `flatten_file_paths(file_paths)`, the resulting list should be: ```python [ \\"img1.jpg\\", \\"img1_1.jpg\\", \\"img2.png\\", \\"img2_1.png\\", \\"paper.docx\\" ] ```","solution":"def flatten_file_paths(file_paths): Processes a list of file paths and returns a new list with directories flattened. Ensures file names are unique by appending a counter to duplicates. from collections import defaultdict import os counter = defaultdict(int) result = [] for path in file_paths: file_name = os.path.basename(path) if counter[file_name] > 0: new_file_name = f\\"{os.path.splitext(file_name)[0]}_{counter[file_name]}{os.path.splitext(file_name)[1]}\\" else: new_file_name = file_name result.append(new_file_name) counter[file_name] += 1 return result"},{"question":"Write a function named `save_as_histogram` that generates a histogram from a list of integers and saves it as an image file using Python\'s `matplotlib` library. The function should take three parameters: 1. `data` (list of int): A list of integers to be plotted in the histogram. 2. `file_path` (str): The file path where the image of the histogram will be saved. 3. `title` (str, optional): A title for the histogram. If not provided, the default should be \'Histogram\'. The function should follow these steps: - Create the histogram from the list of integers using `matplotlib`. - Set the title of the histogram. - Save the histogram as an image file to the specified `file_path`. - Ensure that the image is saved as a PNG file regardless of the provided file extension. For this task, use the `plt.hist` function to create the histogram and the `plt.savefig` function to save the image. Ensure the function handles: - Proper usage of `matplotlib` functions to create and save the histogram. - Adding appropriate labels and title to the histogram. - Saving the image with a `.png` extension, even if a different extension is provided in the `file_path`.","solution":"import matplotlib.pyplot as plt def save_as_histogram(data, file_path, title=\\"Histogram\\"): Generates a histogram from a list of integers and saves it as an image file. :param data: List of integers to be plotted in the histogram. :param file_path: The file path where the image of the histogram will be saved. :param title: A title for the histogram. If not provided, the default is \'Histogram\'. plt.figure() plt.hist(data, bins=\'auto\') plt.title(title) plt.xlabel(\'Value\') plt.ylabel(\'Frequency\') # Ensure the file is saved as PNG regardless of provided extension if not file_path.lower().endswith(\'.png\'): file_path += \'.png\' plt.savefig(file_path) plt.close()"},{"question":"You need to implement a function that takes a string representing a mathematical expression in infix notation and converts it to postfix notation (Reverse Polish Notation). The input string will contain only the following characters: digits (0-9), operators (+, -, *, /), and parentheses (() and )). The function should return a string representing the input expression in postfix notation. You must handle the operators\' precedence and the parentheses correctly. Function Signature: ```python def infix_to_postfix(expression: str) -> str: ``` Requirements: 1. **Handle digits and basic arithmetic operators** (`+`, `-`, `*`, `/`). 2. **Respect operator precedence** and proper use of parentheses. 3. Return the **converted postfix expression** as a string. Example: ``` infix_to_postfix(\\"3 + 4 * 2 / ( 1 - 5 )\\") -> \\"3 4 2 * 1 5 - / +\\" ```","solution":"def infix_to_postfix(expression: str) -> str: precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] stack = [] def has_higher_precedence(op1, op2): return precedence[op1] >= precedence[op2] tokens = expression.split() for token in tokens: if token.isdigit(): output.append(token) elif token in precedence: while stack and stack[-1] != \'(\' and has_higher_precedence(stack[-1], token): output.append(stack.pop()) stack.append(token) elif token == \'(\': stack.append(token) elif token == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # Pop the \'(\' from the stack while stack: output.append(stack.pop()) return \' \'.join(output)"},{"question":"Create a function that takes a 2D array of integers and returns a dictionary that maps each unique integer in the array to its frequency. The function should also print out the 2D array using Matplotlib\'s `imshow` with a color map representing the values. The plot should have color bars indicating the scale. The function should output: Tuple: dict: A dictionary mapping integers to their frequencies. matplotlib.image.AxesImage: Image object of the plot containing the color map. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def calculate_frequency_and_plot(array): ```","solution":"import numpy as np import matplotlib.pyplot as plt def calculate_frequency_and_plot(array): Takes a 2D array of integers, returns a dictionary mapping each unique integer to its frequency, and displays the array using Matplotlib\'s `imshow` with a color map and color bar. Parameters: array (list of lists of int): 2D array of integers Returns: tuple: (dictionary mapping integers to their frequencies, matplotlib.image.AxesImage) # Convert the input array to a NumPy array np_array = np.array(array) # Calculate the frequencies of each unique integer in the array unique, counts = np.unique(np_array, return_counts=True) frequency_dict = dict(zip(unique, counts)) # Plot the array using Matplotlib\'s `imshow` fig, ax = plt.subplots() cax = ax.imshow(np_array, cmap=\'viridis\') # Add a color bar to the plot color_bar = fig.colorbar(cax) # Display the plot plt.show() return frequency_dict, cax"},{"question":"# Matrix Multiplication Matrix multiplication is a fundamental operation in many fields of science and engineering. In this problem, you will implement a function to multiply two matrices using nested loops. You need to write a function `matrix_multiply` that takes two matrices `A` and `B` (in the form of 2D lists) as inputs. The function should return the product of the two matrices, also as a 2D list. To multiply two matrices: - The number of columns in the first matrix must equal the number of rows in the second matrix. - The element at the ith row and jth column in the product matrix is the dot product of the ith row of the first matrix and the jth column of the second matrix. # Function Signature ```python def matrix_multiply(A, B): pass ``` # Example Given: ```python A = [ [1, 2, 3], [4, 5, 6] ] B = [ [7, 8], [9, 10], [11, 12] ] ``` Calling `matrix_multiply(A, B)` should output: ```python [ [58, 64], [139, 154] ] ``` # Detailed Steps: 1. Verify that the matrices can be multiplied by checking the dimensions. 2. Initialize a result matrix with zeroes using nested list comprehensions. 3. Use nested loops to iterate through each element of the result matrix and compute the dot product of the corresponding row and column from matrices A and B. 4. Return the resulting matrix after the computation is complete. # Constraints - You can assume that the input matrices will always be valid for multiplication. - Each element in the matrices will be an integer. # Notes - Do not use any external libraries for matrix multiplication. - Focus on implementing the logic using nested loops.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B and returns the result as a new matrix. :param A: 2D list representing matrix A :param B: 2D list representing matrix B :return: 2D list representing the matrix product of A and B # Get number of rows and columns for the resulting matrix rows_A, cols_A = len(A), len(A[0]) rows_B, cols_B = len(B), len(B[0]) # Initialize the result matrix with zeros result = [[0] * cols_B for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"You are required to write a function `update_inventory` that takes two dictionaries: one representing the current inventory of food items in a store and the other representing a shipment of food items arriving. The function should update the current inventory by adding the quantities from the incoming shipment to the existing items while maintaining their prices. If a new item arrives that is not already in the current inventory, add it with the respective quantity and price. The function signature is as follows: ```python def update_inventory(current_inventory, shipment): pass ``` # Parameters: - `current_inventory` (dict): A dictionary where keys are item names (str) and values are dictionaries with `quantity` (int) and `price` (float). - `shipment` (dict): A dictionary where keys are item names (str) and values are dictionaries with `quantity` (int) and `price` (float). # Returns: - The function should return an updated inventory dictionary with combined quantities and existing prices. # Functionality: 1. For each item in `shipment`, check if it exists in `current_inventory`. 2. If the item exists, add the `quantity` from the shipment to the existing `quantity` in the current inventory. The `price` should remain unchanged. 3. If the item does not exist in the current inventory, add it with its `quantity` and `price` from the shipment. 4. Return the updated inventory dictionary. # Requirements: - Ensure the `quantity` and `price` are updated correctly. - Use dictionary operations and loops effectively to combine the inventories. ```plaintext Example: Input current_inventory: { \'apple\': {\'quantity\': 10, \'price\': 0.5}, \'banana\': {\'quantity\': 5, \'price\': 0.3} } Input shipment: { \'apple\': {\'quantity\': 3, \'price\': 0.5}, \'orange\': {\'quantity\': 7, \'price\': 0.8} } Expected output: { \'apple\': {\'quantity\': 13, \'price\': 0.5}, \'banana\': {\'quantity\': 5, \'price\': 0.3}, \'orange\': {\'quantity\': 7, \'price\': 0.8} } ``` Implement the `update_inventory` function as specified.","solution":"def update_inventory(current_inventory, shipment): Updates the current inventory with an incoming shipment. If an item is already in the current inventory, its quantity is updated without changing the price. If an item is new, it is added to the inventory with its quantity and price. Parameters: - current_inventory (dict): The existing inventory of items. - shipment (dict): A dictionary representing the incoming shipment. Returns: - dict: The updated inventory with quantities and prices combined accordingly. for item, details in shipment.items(): if item in current_inventory: current_inventory[item][\'quantity\'] += details[\'quantity\'] else: current_inventory[item] = details return current_inventory"},{"question":"Implement a function called `merge_sorted_arrays` that takes two parameters: 1. `arr1`: A list of integers sorted in non-decreasing order. 2. `arr2`: A list of integers sorted in non-decreasing order. The function should return a single list containing all the elements from both `arr1` and `arr2`, but also sorted in non-decreasing order. You may not use any built-in sorting functions such as `sorted()`, and you should aim for an efficient solution by leveraging the fact that the input lists are already sorted. Your task: Implement the function `merge_sorted_arrays(arr1, arr2)` to merge the two sorted lists into one sorted list. Example: ``` arr1 = [1, 3, 5] arr2 = [2, 4, 6] merge_sorted_arrays(arr1, arr2) => [1, 2, 3, 4, 5, 6] ``` Constraints: - You may assume that both `arr1` and `arr2` contain only integers. - The input lists may contain zero or more integers each.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted lists into one sorted list. :param arr1: List[int] - First sorted list :param arr2: List[int] - Second sorted list :return: List[int] - Merged sorted list merged = [] i, j = 0, 0 # Traverse both arrays and append the smaller element to the merged list while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Append the remaining elements of arr1 while i < len(arr1): merged.append(arr1[i]) i += 1 # Append the remaining elements of arr2 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"You are given a dataset containing reviews of various products, with each review labeled as positive or negative. Your task is to build an RNN-based text classification model using the PyTorch library. Specifically, you are required to implement a function named `create_rnn_model` that constructs and returns an RNN model for sentiment analysis. Your `create_rnn_model` function should: 1. Take three parameters: - `vocab_size`: An integer representing the number of unique words in the vocabulary. - `embedding_dim`: An integer representing the dimensionality of the word embeddings. - `hidden_dim`: An integer representing the number of features in the hidden state of the RNN. 2. Build the model according to the following architecture: - **Embedding Layer**: An embedding layer that converts word indexes into dense vectors of fixed size `embedding_dim`. - **RNN Layer**: An RNN layer (use `nn.RNN`) with `hidden_dim` hidden units. Set `batch_first=True` to enable batch processing with the first dimension representing the batch size. - **Fully Connected Layer**: A linear layer that maps from `hidden_dim` to 1 output for binary classification. 3. Apply appropriate activation functions and initializations: - Use the `ReLU` activation function after the RNN and before the fully connected layer, and the `sigmoid` activation function on the output layer. - Initialize the embedding layer using uniform initialization. Implement the function `create_rnn_model` following these specifications. Here is the skeleton of the function, which you need to complete: ```python import torch import torch.nn as nn class RNNModel(nn.Module): def __init__(self, vocab_size, embedding_dim, hidden_dim): super(RNNModel, self).__init__() self.embedding = nn.Embedding(vocab_size, embedding_dim) self.rnn = nn.RNN(embedding_dim, hidden_dim, batch_first=True) self.fc = nn.Linear(hidden_dim, 1) self.sigmoid = nn.Sigmoid() def forward(self, x): x = self.embedding(x) x, _ = self.rnn(x) x = torch.relu(x[:, -1, :]) x = self.fc(x) x = self.sigmoid(x) return x def create_rnn_model(vocab_size, embedding_dim, hidden_dim): model = RNNModel(vocab_size, embedding_dim, hidden_dim) return model ``` Complete the model and ensure it adheres to the described architecture.","solution":"import torch import torch.nn as nn class RNNModel(nn.Module): def __init__(self, vocab_size, embedding_dim, hidden_dim): super(RNNModel, self).__init__() self.embedding = nn.Embedding(vocab_size, embedding_dim) self.rnn = nn.RNN(embedding_dim, hidden_dim, batch_first=True) self.fc = nn.Linear(hidden_dim, 1) self.sigmoid = nn.Sigmoid() # Initialize the embedding layer with uniform distribution nn.init.uniform_(self.embedding.weight, -0.1, 0.1) def forward(self, x): x = self.embedding(x) x, _ = self.rnn(x) x = torch.relu(x[:, -1, :]) x = self.fc(x) x = self.sigmoid(x) return x def create_rnn_model(vocab_size, embedding_dim, hidden_dim): model = RNNModel(vocab_size, embedding_dim, hidden_dim) return model"},{"question":"**Create a function named `sort_and_filter` that takes in a list of integers. This function should first sort the list in ascending order and then filter out all the even numbers, returning a new list composed only of the odd numbers. Implement the `sort_and_filter` function adhering to the following requirements: 1. The function should accept a list of integers as its parameter. 2. It should return a new list containing only odd numbers, sorted in ascending order. 3. The original list must remain unmodified. Here is the expected behavior of the function: ```python sort_and_filter([4, 3, 1, 5, 2]) # Output should be: [1, 3, 5] ``` Your implementation should handle edge cases such as an empty list or a list with no odd numbers. ```python sort_and_filter([]) # Output should be: [] sort_and_filter([2, 4, 6]) # Output should be: [] ``` Ensure that your implementation is efficient and follows Python\'s best practices.**","solution":"def sort_and_filter(int_list): This function sorts a list of integers in ascending order and filters out all even numbers, returning a new list only containing odd numbers. :param int_list: List of integers :return: List of filtered odd integers in ascending order # Sorting the list sorted_list = sorted(int_list) # Filtering out the even numbers filtered_list = [x for x in sorted_list if x % 2 != 0] return filtered_list"},{"question":"You are asked to write a function `extract_emails_from_text(text: str) -> List[str]` that identifies and extracts all valid email addresses from a given string. The function should follow these requirements: 1. **Email Recognition:** Identify email addresses that conform to the standard email format: `local-part@domain-part`. - The `local-part` may contain alphanumeric characters, periods (`.`), and underscores (`_`). - The `domain-part` must contain at least one period (`.`) and should be made up of alphanumeric characters and periods. 2. **Regular Expressions:** Use Python\'s `re` module for regular expressions to identify email patterns. 3. **Case Sensitivity:** Treat email addresses as case-insensitive. 4. **Duplicate Handling:** Return a list of unique email addresses in the order they appear in the string. 5. **Edge Cases:** Handle scenarios where there are no valid email addresses or where the input string is empty. 6. **Output:** Ensure the output is a list of email addresses. Here is the placeholder for the main function definition: ```python def extract_emails_from_text(text: str) -> List[str]: # Your implementation goes here ``` Example Usage: ```python text = \\"Please contact us at support@example.com or sales@example.org. You can also reach out to john.doe@example.com.\\" print(extract_emails_from_text(text)) # Expected output: [\\"support@example.com\\", \\"sales@example.org\\", \\"john.doe@example.com\\"] ```","solution":"import re from typing import List def extract_emails_from_text(text: str) -> List[str]: Extracts and returns a list of unique email addresses from the given text. email_pattern = re.compile(r\'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b\') found_emails = email_pattern.findall(text) unique_emails = [] seen = set() for email in found_emails: lower_email = email.lower() if lower_email not in seen: seen.add(lower_email) unique_emails.append(email) return unique_emails"},{"question":"In this problem, you will implement a function named `check_warehouse_inventory` that helps in managing the inventory of a warehouse. The function tracks the stock of different items and validates if requested items can be fulfilled based on the current inventory levels. # Requirements: 1. The function should accept two arguments: - `current_stock`: A dictionary where the key is the item name (string) and the value is the amount in stock (integer). - `requested_items`: A dictionary where the key is the item name (string) and the value is the amount requested (integer). 2. The function should: - Check if each requested item is available in the current stock. - If an item is available in sufficient quantity, remove the requested amount from the stock. - If an item is not available or if the requested quantity exceeds the current stock, it should return a message indicating which item(s) could not be fulfilled. # Specifications: - Return a message `\\"All items are available and have been reserved.\\"` if all requested items can be fulfilled. - If one or more items cannot be fulfilled, return a message listing the items that are unavailable or understocked in the format `\\"Cannot fulfill the request for: item1, item2, ...\\"`. - The function should not modify the `current_stock` if any item in the `requested_items` cannot be fulfilled entirely. - Handle non-positive request quantities by ignoring those requests and considering only those with positive values. # Example Usage: ```python current_stock = { \\"laptops\\": 50, \\"keyboards\\": 100, \\"mice\\": 75 } requested_items = { \\"laptops\\": 20, \\"keyboards\\": 150, \\"mice\\": 10 } print(check_warehouse_inventory(current_stock, requested_items)) # Output: \\"Cannot fulfill the request for: keyboards\\" requested_items = { \\"laptops\\": 20, \\"keyboards\\": 50, \\"mice\\": -5 # Negative quantities should be ignored } print(check_warehouse_inventory(current_stock, requested_items)) # Output: \\"All items are available and have been reserved.\\" ``` # Notes: - Ensure the function does not alter the `current_stock` data structure unless all requested items can be fulfilled. - Assume all item names are case-sensitive and there are no duplicate keys.","solution":"def check_warehouse_inventory(current_stock, requested_items): insufficient_items = [] # Check for non-positive requests and valid stock levels for item, requested_qty in requested_items.items(): if requested_qty <= 0: continue # Ignore non-positive requested quantities if item not in current_stock or current_stock[item] < requested_qty: insufficient_items.append(item) if insufficient_items: return f\\"Cannot fulfill the request for: {\', \'.join(insufficient_items)}\\" # Deduct the requested items from stock for item, requested_qty in requested_items.items(): if requested_qty > 0: current_stock[item] -= requested_qty return \\"All items are available and have been reserved.\\""},{"question":"**Objective:** Write a Python function named `generate_invoice_report(filepath: str, customer_id: str) -> str` that reads a CSV file containing product orders, filters the data by customer ID, and generates a textual invoice report showing the total amount spent by the customer and a detailed list of purchased items. Use the `csv.reader` API for reading the CSV file. # Input: - `filepath`: A string representing the path to the CSV file (e.g., `\'orders.csv\'`). - `customer_id`: A string representing the customer ID for which the invoice should be generated (e.g., `\'C1234\'`). # Output: - A string representing the formatted invoice report. # CSV File Structure: Assume the CSV file has the following columns: 1. `OrderID` (an identifier for the order) 2. `CustomerID` (the customer\'s ID) 3. `ProductID` (the product\'s ID) 4. `ProductName` (the name of the product) 5. `Quantity` (the quantity of the product ordered) 6. `Price` (the price per unit of the product) # Example: Given a CSV file `orders.csv` containing the following rows: ```csv OrderID,CustomerID,ProductID,ProductName,Quantity,Price 1,C1234,P001,ProductA,2,10.50 2,C1234,P002,ProductB,1,20.00 3,C5678,P003,ProductC,5,7.00 4,C1234,P001,ProductA,3,10.50 5,C5678,P002,ProductB,2,20.00 ``` Calling the function with: ```python generate_invoice_report(\'orders.csv\', \'C1234\') ``` Should return: ```python Invoice for Customer ID: C1234 -------------------------------- ProductA - Quantity: 5, Unit Price: 10.50, Subtotal: 52.50 ProductB - Quantity: 1, Unit Price: 20.00, Subtotal: 20.00 -------------------------------- Total Amount: 72.50 ``` # Requirements: - Use the `csv.reader` library to read the CSV file. - Output should be a well-formatted string. - Ensure calculations of totals are accurate. - Write efficient and readable code. - Provide comments and explanations for key parts of the code.","solution":"import csv from collections import defaultdict def generate_invoice_report(filepath: str, customer_id: str) -> str: Generates an invoice report for a given customer ID by reading from a CSV file. :param filepath: Path to the CSV file. :param customer_id: ID of the customer. :return: Formatted invoice report as a string. # Dictionary to store product details by product name. products = defaultdict(lambda: {\\"quantity\\": 0, \\"price\\": 0}) # Read the CSV file. with open(filepath, mode=\'r\') as file: reader = csv.reader(file) # Skip the header row. next(reader) # Process each row in the CSV. for row in reader: order_id, cust_id, product_id, product_name, quantity, price = row if cust_id == customer_id: quantity = int(quantity) price = float(price) products[product_name][\\"quantity\\"] += quantity products[product_name][\\"price\\"] = price # Generate invoice report. report_lines = [f\\"Invoice for Customer ID: {customer_id}\\", \\"--------------------------------\\"] total_amount = 0.0 for product_name, details in products.items(): quantity = details[\'quantity\'] price = details[\'price\'] subtotal = quantity * price total_amount += subtotal report_lines.append(f\\"{product_name} - Quantity: {quantity}, Unit Price: {price:.2f}, Subtotal: {subtotal:.2f}\\") report_lines.append(\\"--------------------------------\\") report_lines.append(f\\"Total Amount: {total_amount:.2f}\\") return \\"n\\".join(report_lines)"},{"question":"You are required to write a Python function that computes the softmax probabilities for a given input matrix. The input is a 2D numpy array `z` where each row represents a different data point and each column represents a different class score. The softmax function is defined as: [ text{Softmax}(z_i) = frac{exp(z_i)}{sum_j exp(z_j)} ] Where ( exp ) is the exponential function applied element-wise, ( z_i ) is the i-th element of the input matrix `z`, and the denominator is the sum of the exponentials of all elements in the same row. Your function should handle numerical stability by subtracting the maximum value in each row from the row\'s elements before exponentiating. Please implement the function `compute_softmax(z)` that performs the above operations using numpy. **Function Signature:** ```python def compute_softmax(z): Compute the softmax probabilities for each row of the input matrix. Parameters: z -- a 2D numpy array where each row represents a different data point and each column represents a different class score Returns: softmax_probs -- a 2D numpy array where each row contains the softmax probabilities corresponding to the input class scores ```","solution":"import numpy as np def compute_softmax(z): Compute the softmax probabilities for each row of the input matrix. Parameters: z -- a 2D numpy array where each row represents a different data point and each column represents a different class score Returns: softmax_probs -- a 2D numpy array where each row contains the softmax probabilities corresponding to the input class scores # Subtract the max value in each row from all elements in the row for numerical stability z_max = np.max(z, axis=1, keepdims=True) z_stable = z - z_max # Exponentiate the stable values exp_z = np.exp(z_stable) # Sum the exponentiated values along the row sum_exp_z = np.sum(exp_z, axis=1, keepdims=True) # Divide the exponentiated values by the sum to get the softmax probabilities softmax_probs = exp_z / sum_exp_z return softmax_probs"},{"question":"You are required to create a function named `find_top_k_frequent_words` which processes a given text and finds the top `k` words that appear most frequently. The function should take two parameters: `text` and `k`. Below are the guidelines for the function: - The function should first clean the text by converting all characters to lowercase and removing any punctuation marks. - Split the text into individual words. - Use a dictionary to count the frequency of each word. - Identify the top `k` words with the highest frequency using a heap or a sorting mechanism. - The function should return a list of tuples with each tuple containing a word and its corresponding frequency, ordered from the most frequent to the least frequent. Considerations: - Handle cases where `k` is larger than the number of unique words in the text. - Ensure the function is efficient in terms of time complexity, particularly for large texts. Here is the function definition to start with: ```python import re from collections import Counter from heapq import nlargest from typing import List, Tuple def find_top_k_frequent_words(text: str, k: int) -> List[Tuple[str, int]]: Finds the top k words by their frequency in the provided text. Parameters: text (str): The input text to process. k (int): The number of top frequent words to return. Returns: List[Tuple[str, int]]: A list of tuples where each tuple contains a word and its frequency, sorted from the most frequent to the least frequent. # Step 1: Clean text cleaned_text = re.sub(r\'[^ws]\', \'\', text.lower()) # Step 2: Split text into words words = cleaned_text.split() # Step 3: Count word frequencies word_count = Counter(words) # Step 4: Identify top k frequent words top_k_words = nlargest(k, word_count.items(), key=lambda item: item[1]) return top_k_words ``` Example Usage: ```python text = \\"Hello world! This is a test. Hello again, world! Testing, one, two, three. Hello hello world world.\\" k = 3 print(find_top_k_frequent_words(text, k)) # Output: [(\'hello\', 4), (\'world\', 4), (\'test\', 1)] ```","solution":"import re from collections import Counter from heapq import nlargest from typing import List, Tuple def find_top_k_frequent_words(text: str, k: int) -> List[Tuple[str, int]]: Finds the top k words by their frequency in the provided text. Parameters: text (str): The input text to process. k (int): The number of top frequent words to return. Returns: List[Tuple[str, int]]: A list of tuples where each tuple contains a word and its frequency, sorted from the most frequent to the least frequent. # Step 1: Clean text cleaned_text = re.sub(r\'[^ws]\', \'\', text.lower()) # Step 2: Split text into words words = cleaned_text.split() # Step 3: Count word frequencies word_count = Counter(words) # Step 4: Identify top k frequent words top_k_words = nlargest(k, word_count.items(), key=lambda item: item[1]) return top_k_words"},{"question":"You are given a list of purchase transactions, where each transaction is represented by a dictionary containing the keys: \\"item\\", \\"price\\", and \\"quantity\\". Your task is to write a function `total_spent(transactions)` that calculates the total amount of money spent based on the provided transactions. The function should return a dictionary where each key is an item and each value is the total money spent on that item. # Function Signature ```python def total_spent(transactions: List[Dict[str, Union[str, float, int]]]) -> Dict[str, float]: # Your code here ``` # Input - `transactions`: A list of dictionaries. Each dictionary contains: - `\\"item\\"`: A string representing the item\'s name. - `\\"price\\"`: A float representing the price per unit of the item. - `\\"quantity\\"`: An integer representing the quantity of the item purchased. # Output - A dictionary where each key is a string representing the item\'s name, and each value is a float representing the total money spent on that item. # Example ```python transactions = [ {\\"item\\": \\"apple\\", \\"price\\": 0.5, \\"quantity\\": 4}, {\\"item\\": \\"banana\\", \\"price\\": 0.3, \\"quantity\\": 10}, {\\"item\\": \\"apple\\", \\"price\\": 0.5, \\"quantity\\": 2}, {\\"item\\": \\"banana\\", \\"price\\": 0.35, \\"quantity\\": 5} ] expected_output = { \\"apple\\": 3.0, \\"banana\\": 4.75 } assert total_spent(transactions) == expected_output ```","solution":"from typing import List, Dict, Union def total_spent(transactions: List[Dict[str, Union[str, float, int]]]) -> Dict[str, float]: Calculates the total amount of money spent based on the provided transactions. Args: - transactions: List of dictionaries with each dictionary containing: - `\\"item\\"`: A string representing the item\'s name. - `\\"price\\"`: A float representing the price per unit of the item. - `\\"quantity\\"`: An integer representing the quantity of the item purchased. Returns: - A dictionary where each key is a string representing the item\'s name, and each value is a float representing the total money spent on that item. total_spending = {} for transaction in transactions: item = transaction[\\"item\\"] price = transaction[\\"price\\"] quantity = transaction[\\"quantity\\"] if item in total_spending: total_spending[item] += price * quantity else: total_spending[item] = price * quantity return total_spending"},{"question":"You are required to implement a function `evaluate_with_variables(expression: str, variables: Dict[str, int]) -> int` that evaluates a mathematical expression with the inclusion of predefined variables. Each variable is identified by a single letter (from \'a\' to \'z\') and their values are given in the `variables` dictionary. The expressions can include basic arithmetic operations: addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). Your implementation should be able to replace the variables in the expression with their corresponding values from the dictionary and then evaluate the resulting expression. Assume that the input expression is always valid and the variables dictionary contains all necessary variables. **Function to Implement:** - `evaluate_with_variables(expression: str, variables: Dict[str, int]) -> int` **Input:** - `expression`: A `str` representing the mathematical expression, which can include variables (e.g., \\"3 + a * (b - c)\\"). - `variables`: A dictionary with each key as a variable name (str) and value as an integer. **Output:** - Returns an `int` representing the evaluated result of the expression with variables substituted. # Example ```python expression = \\"3 + a * (b - c)\\" variables = {\'a\': 2, \'b\': 5, \'c\': 1} result = evaluate_with_variables(expression, variables) print(result) # Should print 11 ``` # Requirements: - All variable names will be single-letter lowercase alphabets (\'a\' to \'z\'). - Division should be integer division. - You should safely evaluate the expression ensuring that after substitution, no arbitrary code execution is possible. - Implement error handling for division by zero. # Notes: 1. You can use the Python `eval` function for simplifying the evaluation, but it must be secured. 2. Make sure to handle variable substitution before evaluating the expression. 3. Properly handle operations precedence and ensure the expressions are evaluated as expected.","solution":"def evaluate_with_variables(expression, variables): Evaluates a mathematical expression with variables. :param expression: A string representing the mathematical expression. :param variables: A dictionary containing variable values. :return: The evaluated result as an integer. # Replace each variable in the expression with its corresponding value for var, val in variables.items(): expression = expression.replace(var, str(val)) # Evaluate the expression using eval() try: # Use a restricted evaluation environment result = eval(expression, {\\"__builtins__\\": None}, {}) except ZeroDivisionError: raise ValueError(\\"Division by zero occurred in the expression.\\") return int(result)"},{"question":"** You are given a binary tree, and your task is to find the maximum width of the binary tree. The width of a tree is defined as the maximum number of nodes in any level. For example, the width of the following tree is 4, as there are 4 nodes at the 2nd level: ``` 1 / 2 3 / / 4 5 6 7 ``` To implement this, you should perform a level-order traversal (breadth-first traversal) of the tree and track the number of nodes at each level. Use a queue to facilitate the level-order traversal. **Function Signature:** ```python def max_width_of_binary_tree(root): pass ``` **Class Definitions:** ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Inputs:** - `root`: The root node of the binary tree, an instance of `TreeNode` class. **Outputs:** - `max_width`: An integer representing the maximum width of the binary tree. **Example:** ```python # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_width_of_binary_tree(root): if not root: return 0 max_width = 0 queue = [(root, 0)] while queue: level_length = len(queue) current_level_indices = [] for _ in range(level_length): node, index = queue.pop(0) current_level_indices.append(index) if node.left: queue.append((node.left, 2 * index)) if node.right: queue.append((node.right, 2 * index + 1)) max_width = max(max_width, current_level_indices[-1] - current_level_indices[0] + 1) return max_width # Example usage: # Constructing the example binary tree. root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) root.right.left = TreeNode(6) root.right.right = TreeNode(7) print(max_width_of_binary_tree(root)) # Output: 4 ``` **Requirements:** 1. Ensure your implementation is efficient in terms of both time and space complexity. 2. Write the function to handle edge cases, such as an empty tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_width_of_binary_tree(root): if not root: return 0 max_width = 0 queue = [(root, 0)] while queue: level_length = len(queue) min_index, max_index = float(\'inf\'), float(\'-inf\') for _ in range(level_length): node, index = queue.pop(0) min_index = min(min_index, index) max_index = max(max_index, index) if node.left: queue.append((node.left, 2 * index)) if node.right: queue.append((node.right, 2 * index + 1)) current_width = max_index - min_index + 1 max_width = max(max_width, current_width) return max_width"},{"question":"You are tasked with developing a function that utilizes the `pandas` library to analyze a dataset containing information about different car models and their respective features. The goal of this task is to filter and sort the data based on specific criteria. # Function Name: `filter_and_sort_cars` # Objectives: 1. **Input Parameters**: - `dataframe`: A pandas DataFrame containing the following columns: `\'make\'`, `\'model\'`, `\'year\'`, `\'price\'`, and `\'mpg\'`. - `price_range`: A tuple `(min_price, max_price)` that defines the desired price range. - `minimum_mpg`: An integer representing the minimum miles per gallon (mpg) the car must achieve. - `ascending`: A boolean, which if set to True, sorts the results in ascending order by `\'price\'`; otherwise, in descending order. 2. **Output**: - Return a DataFrame with cars that fit within the specified `price_range` and have an `\'mpg\'` greater than or equal to `minimum_mpg`. The result should be sorted by `\'price\'` based on the `ascending` parameter. # Requirements: - Use the pandas library to filter and sort the DataFrame. - Ensure that the function handles edge cases, such as when no cars match the criteria or when an invalid `price_range` is provided. - Your function should be robust and should not modify the original DataFrame. # Example Usage: ```python import pandas as pd # Example DataFrame data = { \'make\': [\'Toyota\', \'Ford\', \'Tesla\', \'Chevrolet\'], \'model\': [\'Camry\', \'F-150\', \'Model S\', \'Malibu\'], \'year\': [2020, 2019, 2020, 2021], \'price\': [24000, 28000, 70000, 22000], \'mpg\': [32, 22, 120, 30] } df = pd.DataFrame(data) # Function call result_df = filter_and_sort_cars(df, (20000, 30000), 25, True) # Expected output: DataFrame containing \'Toyota Camry\' and \'Chevrolet Malibu\' sorted by price in ascending order. ```","solution":"import pandas as pd def filter_and_sort_cars(dataframe, price_range, minimum_mpg, ascending): Filters and sorts car data based on price range and minimum mpg. Parameters: dataframe (pd.DataFrame): A DataFrame containing car data. price_range (tuple): A tuple (min_price, max_price) defining the desired price range. minimum_mpg (int): The minimum miles per gallon (mpg) the car must achieve. ascending (bool): Whether to sort the results in ascending order by price. Returns: pd.DataFrame: A DataFrame filtered and sorted based on the given criteria. min_price, max_price = price_range if min_price > max_price: return pd.DataFrame(columns=dataframe.columns) # Filter the DataFrame based on price and mpg requirements filtered_df = dataframe[ (dataframe[\'price\'] >= min_price) & (dataframe[\'price\'] <= max_price) & (dataframe[\'mpg\'] >= minimum_mpg) ] # Sort the DataFrame based on the \'price\' column sorted_df = filtered_df.sort_values(by=\'price\', ascending=ascending) return sorted_df"},{"question":"You are tasked with implementing a function `plot_poisson_vs_normal_approximation(lambda_, k, num_points)` that visualizes the difference between a Poisson distribution and its normal approximation using `matplotlib`. The function should perform the following steps: 1. Generate `num_points` samples from a Poisson distribution with parameter `lambda_` (rate of occurrence). 2. Use `matplotlib.pyplot.bar` to create a histogram (as a bar chart) of the sampled Poisson data, normalizing the frequencies so they represent probabilities. 3. Calculate the mean (`mu`) and standard deviation (`sigma`) for the normal approximation of the Poisson distribution. 4. Use `matplotlib.pyplot.plot` to overlay a line plot representing the normal distribution approximation on top of the bar chart. 5. Display the resulting plot using `matplotlib.pyplot.show()`. Your implementation should explicitly use the `matplotlib.pyplot.bar` and `matplotlib.pyplot.plot` functions.","solution":"import numpy as np import matplotlib.pyplot as plt from scipy.stats import poisson, norm def plot_poisson_vs_normal_approximation(lambda_, k, num_points): Visualizes the Poisson distribution against its normal approximation. Parameters: lambda_ (float): Poisson distribution parameter (rate of occurrence) k (int): Range of values (from 0 to k) to show on the x-axis num_points (int): Number of samples to draw from the Poisson distribution # Generate samples from the Poisson distribution poisson_samples = np.random.poisson(lambda_, num_points) # Histogram for Poisson distribution values, counts = np.unique(poisson_samples, return_counts=True) probabilities = counts / num_points plt.bar(values, probabilities, width=0.8, alpha=0.6, label=\'Poisson Distribution\') # Mean and standard deviation for normal approximation mu = lambda_ sigma = np.sqrt(lambda_) # Values for normal distribution x = np.arange(0, k + 1) y = norm.pdf(x, mu, sigma) plt.plot(x, y, label=\'Normal Approximation\', color=\'red\') # Display plot plt.xlabel(\'Number of Occurrences\') plt.ylabel(\'Probability\') plt.title(\'Poisson Distribution vs. Normal Approximation\') plt.legend() plt.show()"},{"question":"You are asked to write a function that processes a list of integer grades and prints a letter grade based on a predefined scale. The letter grades are assigned as follows: \\"A\\" for grades 90 and above, \\"B\\" for grades between 80 and 89, \\"C\\" for grades between 70 and 79, \\"D\\" for grades between 60 and 69, and \\"F\\" for grades below 60. Your objective is to create a function called `print_letter_grades`. 1. **Function Definition**: Implement the function: ```python def print_letter_grades(grades): ``` 2. **Parameters**: - `grades` (list of int): A list containing integer grades. 3. **Behavior**: - The function should iterate through the list of grades and print the corresponding letter grade for each grade. - Ensure that the output format is consistent, with each letter grade printed on a new line. 4. **Edge Cases**: - Handle empty lists by printing \\"No grades available.\\" Below is an example of how you might use this function: ```python def main(): grades = [85, 92, 77, 60, 45, 99] print_letter_grades(grades) if __name__ == \\"__main__\\": main() ``` The expected output for the given `grades` list would be: ``` B A C D F A ``` Write the `print_letter_grades` function which will be used to print the letter grades for a list of integer grades.","solution":"def print_letter_grades(grades): Prints the corresponding letter grade for a list of integer grades. A: 90 and above B: 80-89 C: 70-79 D: 60-69 F: below 60 if not grades: print(\\"No grades available.\\") return for grade in grades: if grade >= 90: print(\\"A\\") elif grade >= 80: print(\\"B\\") elif grade >= 70: print(\\"C\\") elif grade >= 60: print(\\"D\\") else: print(\\"F\\")"},{"question":"In this problem, you will be working on implementing a K-Means clustering algorithm to classify the Iris dataset available in the `sklearn` library. Your task is to build a function `kmeans_clustering(n_clusters)` that performs the following steps: 1. Load the Iris dataset using `sklearn.datasets.load_iris()`. 2. Standardize the dataset using `sklearn.preprocessing.StandardScaler` to ensure each feature has a mean of 0 and variance of 1. 3. Apply the K-Means algorithm with a specified number of clusters ranging from 1 to `n_clusters`. For each value of `n_clusters`: - Fit the `KMeans` model to the data. - Predict the cluster labels for the data points. - Print the inertia (sum of squared distances to the nearest cluster center) for the model. - Print the cluster centroids. Ensure that you use the `StandardScaler` and `KMeans` classes from the `sklearn` library. Implement this in a function called `kmeans_clustering`. **Hints:** - You will need to use `sklearn.preprocessing.StandardScaler` for feature scaling. - Use `sklearn.cluster.KMeans` to perform K-Means clustering. - Use `matplotlib.pyplot` for plotting clusters if needed, although it is optional for this problem. **Function Signature:** ```python def kmeans_clustering(n_clusters: int) -> None: ... ``` **Example:** ```python kmeans_clustering(3) ``` Output should include: - Inertia for each value of `n_clusters` - Cluster centroids for each value of `n_clusters`","solution":"from sklearn.datasets import load_iris from sklearn.preprocessing import StandardScaler from sklearn.cluster import KMeans def kmeans_clustering(n_clusters: int): # Load the iris dataset iris = load_iris() data = iris.data # Standardize the data scaler = StandardScaler() data_scaled = scaler.fit_transform(data) for k in range(1, n_clusters + 1): # Apply K-Means algorithm kmeans = KMeans(n_clusters=k, random_state=0) kmeans.fit(data_scaled) # Predict the cluster labels labels = kmeans.predict(data_scaled) # Print the inertia (sum of squared distances to the nearest cluster center) print(f\'Inertia for {k} clusters: {kmeans.inertia_}\') # Print the cluster centroids print(f\'Cluster centroids for {k} clusters:n{kmeans.cluster_centers_}n\')"},{"question":"You are asked to create a function named `reversed_words` that takes a string containing multiple words as input and returns a new string with the words reversed. Preserve the original order of the words but reverse each word individually. For instance, if the input string is `\\"hello world\\"`, the function should return `\\"olleh dlrow\\"`. Your task is to: 1. Split the input string into individual words. 2. Reverse each word in the string. 3. Join all the reversed words back into a single string with a space between each word. Your final function should look like this: ```python def reversed_words(sentence): # Your implementation here. ``` **Requirements:** - You must not reverse the order of the words, only the words themselves. - Assume the input string contains only lowercase alphabetic characters and spaces. - Handle multiple spaces between words gracefully, maintaining only a single space between words in the output string. Example usage: ```python input_string = \\"hello readers\\" output_string = reversed_words(input_string) print(output_string) # Expected output: \\"olleh sredaer\\" ```","solution":"def reversed_words(sentence): Takes a string containing multiple words and returns a new string with each word reversed. words = sentence.split() reversed_words_list = [word[::-1] for word in words] return \' \'.join(reversed_words_list)"},{"question":"Write a function `calculate_sums` that demonstrates the usage of multiprocessing in Python. This function will create multiple processes to perform some independent computations in parallel. You need to: 1. Create a function, `compute_sum`, which takes a list of integers as input and returns the sum of the elements. 2. Within `calculate_sums`, split a given large list of integers into smaller sublists of approximately equal size (the number of sublists should be equal to the number of processes you want to run). 3. Create and start a process for each sublist using Python\'s `multiprocessing` library. Each process should execute the `compute_sum` function on its designated sublist. 4. Retrieve and print the result of the summation from each process. 5. Print the total sum of all the sublist sums. **Function Signatures:** ```python def calculate_sums(numbers: [int], num_processes: int) -> int: pass ``` # Example ```python numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] num_processes = 2 calculate_sums(numbers, num_processes) # Expected output might look like: # Sum by process 1: 15 # Sum by process 2: 40 # Total sum: 55 ``` # Notes - Use the `multiprocessing` library to spawn processes. - Ensure that the sublists are distributed in a way that the list is divided as evenly as possible among the processes.","solution":"import multiprocessing def compute_sum(numbers): Computes the sum of a list of numbers. Args: numbers (list of int): List of integers to sum. Returns: int: The sum of the numbers. return sum(numbers) def calculate_sums(numbers, num_processes): Splits the list of numbers into sublists, creates multiple processes to compute the sum of each sublist in parallel, and prints the results. Args: numbers (list of int): Large list of integers. num_processes (int): Number of processes to use. Returns: int: Total sum calculated from all processes. # Creating sublists sublist_size = len(numbers) // num_processes sublists = [numbers[i * sublist_size: (i + 1) * sublist_size] for i in range(num_processes)] if len(numbers) % num_processes != 0: sublists[-1].extend(numbers[num_processes * sublist_size:]) # List to hold process references and results processes = [] results = multiprocessing.Manager().list() # Create and start processes for sublist in sublists: process = multiprocessing.Process(target=lambda l, result_list: result_list.append(compute_sum(l)), args=(sublist, results)) process.start() processes.append(process) # Ensure all processes complete for process in processes: process.join() # Print individual sums for i, result in enumerate(results): print(f\\"Sum by process {i+1}: {result}\\") # Calculating total sum total_sum = sum(results) print(f\\"Total sum: {total_sum}\\") return total_sum"},{"question":"You are tasked with creating a function that reads data from a file and performs basic statistical analysis. Your objective is to read numerical data from a file, calculate the mean, median, and standard deviation, and return these values. Write a function named `analyze_data(file_path)` that: 1. Accepts one parameter: - `file_path`: A string representing the path to a file that contains numerical data, with one number per line. 2. Reads the data from the file. 3. Calculates the mean, median, and standard deviation of the data. 4. Returns a dictionary with the keys `\'mean\'`, `\'median\'`, and `\'std\'` corresponding to the calculated statistical values. **Constraints:** - Use the `numpy` library for statistical calculations. - The file will only contain valid numerical data, with one number per line. **Example:** Assume the file `data.txt` contains the following lines: ``` 10 20 30 40 50 ``` ```python file_path = \\"data.txt\\" result = analyze_data(file_path) print(result) ``` This should return: ```python {\'mean\': 30.0, \'median\': 30.0, \'std\': 15.811388300841896} ```","solution":"import numpy as np def analyze_data(file_path): Reads numerical data from a file, calculates the mean, median, and standard deviation. Parameters: file_path (str): The path to the file containing numerical data, one number per line. Returns: dict: A dictionary with keys \'mean\', \'median\', and \'std\' for the corresponding statistical values. with open(file_path, \'r\') as file: data = [float(line.strip()) for line in file] mean = np.mean(data) median = np.median(data) std = np.std(data) return {\'mean\': mean, \'median\': median, \'std\': std}"},{"question":"Given a string `formatted_string` representing a profile in the form of \\"Name: {name}, Age: {age}, Country: {country}\\", write a function `parse_profile` that extracts the name, age, and country and returns them in a dictionary. The function should handle cases where the input string does not perfectly match the expected format by returning `None` if it encounters any issues during parsing. **Function signature**: ```python def parse_profile(formatted_string): pass ``` **Parameters**: - `formatted_string` (str): A formatted string containing the profile information. **Returns**: - dict or None: A dictionary with keys `name`, `age`, and `country` containing the respective values, or `None` if parsing fails. **Example**: ```python profile_string = \\"Name: John Doe, Age: 30, Country: USA\\" result = parse_profile(profile_string) print(result) # Output: {\'name\': \'John Doe\', \'age\': \'30\', \'country\': \'USA\'} profile_string = \\"Name: Jane, Age: Twenty-five, Country: UK\\" result = parse_profile(profile_string) print(result) # Output: None profile_string = \\"Name: Alice, Age: 28, Country: Canada\\" result = parse_profile(profile_string) print(result) # Output: {\'name\': \'Alice\', \'age\': \'28\', \'country\': \'Canada\'} ``` **Note**: - The function should expect exact formatting including spaces and commas. - If the `age` is not a number or any part of the string format does not match exactly, the function should return `None`.","solution":"def parse_profile(formatted_string): Parses a formatted string containing profile information and returns a dictionary with keys \'name\', \'age\', and \'country\', or None if parsing fails. try: parts = formatted_string.split(\\", \\") name_part = parts[0].split(\\": \\") age_part = parts[1].split(\\": \\") country_part = parts[2].split(\\": \\") if len(parts) != 3 or len(name_part) != 2 or len(age_part) != 2 or len(country_part) != 2: return None name = name_part[1] age = age_part[1] country = country_part[1] if not age.isdigit(): return None return { \'name\': name, \'age\': age, \'country\': country } except (IndexError, ValueError): return None"},{"question":"In this problem, you are asked to write a function named `merge_sorted_arrays` that takes two lists of integers as input. Each list is sorted in non-decreasing order. The function should merge these two lists into one sorted list in non-decreasing order and return the merged list. You are required to accomplish this without using built-in sorting functions. Instead, use the two-pointer technique to efficiently merge the lists. Example: ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] print(merge_sorted_arrays(list1, list2)) ``` **Output:** ```python [1, 2, 3, 4, 5, 6, 7, 8] ``` # Function Signature ```python def merge_sorted_arrays(list1: list, list2: list) -> list: pass ``` # Constraints: 1. The input lists may be empty. 2. Integers in the lists can be negative, zero, or positive. 3. Duplicate elements are allowed and should be retained in the merged list. 4. The combined length of both lists will not exceed 10^6.","solution":"def merge_sorted_arrays(list1: list, list2: list) -> list: Merges two sorted lists into one sorted list in non-decreasing order. Uses the two-pointer technique to accomplish this efficiently. :param list1: First sorted list of integers :param list2: Second sorted list of integers :return: Merged sorted list of integers merged_list = [] i, j = 0, 0 # Use two pointers to compare elements from both lists while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are tasked with implementing a function to compute the maximum flow in a directed graph with given capacities using the Ford-Fulkerson algorithm. The graph is defined by a list of vertices and a list of edges, with each edge having an associated capacity. Your function should be named `max_flow`, and should take in the following parameters: - `vertices`: A list of vertex names. - `edges`: A list of tuples, where each tuple represents an edge in the form (`start_vertex`, `end_vertex`, `capacity`). - `source`: The name of the vertex from which the flow originates. (string or number) - `sink`: The name of the vertex where the flow terminates. (string or number) Your function should return an integer that represents the maximum flow from `source` to `sink` using the provided capacities of the edges. **Important**: - Implement the solution using the Ford-Fulkerson algorithm with depth-first search (DFS) for finding augmenting paths. Here\'s the function signature: ```python def max_flow(vertices, edges, source, sink): ... ``` # Example ```python vertices = [\'S\', \'A\', \'B\', \'C\', \'T\'] edges = [(\'S\', \'A\', 10), (\'S\', \'B\', 5), (\'A\', \'B\', 15), (\'A\', \'C\', 10), (\'B\', \'C\', 10), (\'B\', \'T\', 5), (\'C\', \'T\', 10)] source = \'S\' sink = \'T\' print(max_flow(vertices, edges, source, sink)) # Output: 15 ``` # Constraints - The graph is directed and edges have positive integer capacities. - `source` and `sink` are guaranteed to be in the `vertices` list. - Your solution should handle the case where no path exists from `source` to `sink` properly, returning `0` in such cases. - There are no parallel edges (i.e., no two edges share the same start and end vertices).","solution":"def max_flow(vertices, edges, source, sink): from collections import defaultdict, deque def bfs(parent): visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v in residual_graph[u]: if not visited.__contains__(v) and residual_graph[u][v] > 0: visited.add(v) parent[v] = u if v == sink: return True queue.append(v) return False graph = defaultdict(lambda: defaultdict(int)) for u, v, capacity in edges: graph[u][v] = capacity residual_graph = defaultdict(lambda: defaultdict(int)) for u in graph: for v in graph[u]: residual_graph[u][v] = graph[u][v] parent = dict() max_flow_value = 0 while bfs(parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, residual_graph[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] residual_graph[u][v] -= path_flow residual_graph[v][u] += path_flow v = parent[v] max_flow_value += path_flow return int(max_flow_value)"},{"question":"You are provided with a text file containing weather data. Each line in the file corresponds to a record with three fields: `timestamp` (date and time when the record was captured), `temperature` (temperature in Celsius), and `humidity` (humidity percentage), separated by a comma. Your task is to create a function `load_weather_data(filepath)` that reads the text file, processes the timestamp column to ensure it is in the correct DateTime format, and returns the data in a pandas DataFrame sorted by timestamp. The DataFrame\'s index should be set to the timestamp column. Use the `pandas.to_datetime()` function to convert the timestamp column. Function Signature: ```python def load_weather_data(filepath: str) -> pd.DataFrame: ``` Requirements: 1. Read the text file using `pandas.read_csv()` with the appropriate delimiter. 2. Use the `pandas.to_datetime()` function to convert the timestamp column. 3. Sort the data chronologically by the timestamp column. 4. Set the timestamp column as the index of the DataFrame. 5. Name the columns of the DataFrame as `[\'timestamp\', \'temperature\', \'humidity\']`. Example: Assume the text file (`weather_data.txt`) content is: ``` 2023/10/01 14:00:00,23.5,60 2023/09/30 09:30:00,19.2,70 2023/10/01 06:45:00,21.8,65 ``` After processing, the DataFrame should look like: ``` temperature humidity timestamp 2023-09-30 09:30:00 19.2 70 2023-10-01 06:45:00 21.8 65 2023-10-01 14:00:00 23.5 60 ```","solution":"import pandas as pd def load_weather_data(filepath: str) -> pd.DataFrame: Reads a weather data text file and returns a pandas DataFrame. The DataFrame should have the timestamp column set as the index, timestamps converted to datetime format, and sorted chronologically. Args: filepath (str): The path to the weather data text file. Returns: pd.DataFrame: A DataFrame containing the weather data. # Read the data from the file df = pd.read_csv(filepath, delimiter=\',\', names=[\'timestamp\', \'temperature\', \'humidity\']) # Convert the timestamp column to datetime format df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) # Sort the DataFrame by the timestamp df = df.sort_values(by=\'timestamp\') # Set the timestamp column as the index df.set_index(\'timestamp\', inplace=True) return df"},{"question":"**Context**: When analyzing data, it is often useful to calculate and identify the moving average of a dataset. The moving average helps smooth out short-term fluctuations and highlights longer-term trends or cycles. **Problem**: You are required to implement a function `moving_average(data, window_size)` that calculates the simple moving average over a given window size for a list of numerical values. The function should work as follows: 1. Convert the `data` input to a numpy array of floats. 2. Use numpy\'s `convolve` function to compute the moving average with the specified `window_size`. 3. Return the resulting array of moving averages. The `moving_average` function simplifies the following process: ```python import numpy as np def moving_average(data, window_size): # Convert data to a numpy array of floats data = np.array(data).astype(float) # Moving average kernel kernel = np.ones(window_size) / window_size # Compute moving average using convolution average = np.convolve(data, kernel, mode=\'valid\') return average ``` **Requirements**: - Use numpy\'s `convolve` function to calculate the moving average. - The function should accept a list or array-like object `data` as input. - The `window_size` parameter specifies the number of elements to include in each moving average calculation. **Function signature**: ```python def moving_average(data, window_size): pass ```","solution":"import numpy as np def moving_average(data, window_size): Calculate and return the simple moving average of the data over the given window size. Parameters: - data: List or array-like object of numerical values - window_size: Integer specifying the window size for the moving average Returns: - Numpy array containing the moving averages # Convert data to a numpy array of floats data = np.array(data).astype(float) # Moving average kernel kernel = np.ones(window_size) / window_size # Compute moving average using convolution average = np.convolve(data, kernel, mode=\'valid\') return average"},{"question":"You are required to write a function named `count_inversions` that counts the number of inversions in an array of integers. An inversion is defined as a pair of indices (i, j) such that i < j and arr[i] > arr[j]. The function should: 1. Take an array of integers as input. 2. Use the merge sort algorithm to efficiently count the inversions. 3. Return the total number of inversions in the array. **Function Signature:** ```python def count_inversions(arr: List[int]) -> int: pass ``` **Parameters:** - `arr (List[int])`: The input list of integers. **Returns:** - `int`: The total number of inversions in the array. **Example:** For the array `[2, 4, 1, 3, 5]`, the function call `count_inversions([2, 4, 1, 3, 5])` should return `3`, indicating there are 3 inversions: (2, 1), (4, 1), and (4, 3). For the array `[5, 4, 3, 2, 1]`, the function call `count_inversions([5, 4, 3, 2, 1])` should return `10`, indicating there are 10 inversions as every element forms an inversion with every other element that comes after it.","solution":"def count_inversions(arr): def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count return merge_sort_and_count(arr, [0]*len(arr), 0, len(arr)-1)"},{"question":"Write a function that simulates rolling a pair of six-sided dice 1000 times, records the sums of the dice each time, and then visualizes the frequencies of each possible sum (2 through 12) with a histogram. The function should output: dict: A dictionary where the keys are the sums (2 through 12) and the values are their frequencies. matplotlib.axes.Axes: The Axes object containing the histogram plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def roll_dice(num_rolls=1000): ```","solution":"import numpy as np import matplotlib.pyplot as plt def roll_dice(num_rolls=1000): Simulates rolling a pair of six-sided dice \'num_rolls\' times, records the sums of the dice each time, and visualizes the frequencies of each possible sum (2 through 12) with a histogram. Args: num_rolls (int): Number of dice rolls. Default is 1000. Returns: dict: A dictionary with keys as the sums (2 through 12) and values as their frequencies. matplotlib.axes.Axes: The Axes object containing the histogram plot. sums = np.random.randint(1, 7, size=(num_rolls, 2)).sum(axis=1) frequencies = {i: 0 for i in range(2, 13)} for total in sums: frequencies[total] += 1 fig, ax = plt.subplots() ax.hist(sums, bins=range(2, 14), edgecolor=\'black\', align=\'left\') ax.set_xticks(range(2, 13)) ax.set_xlabel(\'Sum\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Histogram of Dice Sums\') return frequencies, ax"},{"question":"Implement a function named **compute_statistics** that takes a list of dictionaries representing students\' grades and calculates their average, median, and mode grades. Specifically, the function should: 1. Take a single argument `grades`, which is a list of dictionaries, where each dictionary contains two keys: `name` (a string representing the student\'s name) and `grade` (an integer representing the student\'s grade). 2. Calculate the average grade for the entire class. 3. Determine the median grade for the class. If there is an even number of grades, the median is defined as the average of the two middle numbers. 4. Identify the mode grade(s) for the class. If multiple grades have the highest frequency, return all modes in a list. 5. Return a dictionary with the keys \'average\', \'median\', and \'mode\'. The values corresponding to these keys should be the calculated average, median, and mode(s). For example, given the input: ```python grades = [ {\\"name\\": \\"Alice\\", \\"grade\\": 88}, {\\"name\\": \\"Bob\\", \\"grade\\": 72}, {\\"name\\": \\"Charlie\\", \\"grade\\": 88}, {\\"name\\": \\"David\\", \\"grade\\": 72}, {\\"name\\": \\"Eve\\", \\"grade\\": 100}, ] ``` The function should output: ```python { \\"average\\": 84.0, \\"median\\": 88, \\"mode\\": [88, 72] } ```","solution":"from statistics import median, mode, mean from collections import Counter def compute_statistics(grades): Calculates the average, median, and mode(s) of student grades. :param grades: List of dictionaries, each containing \'name\' and \'grade\' keys. :return: Dictionary with \'average\', \'median\', and \'mode\' keys. grades_list = [student[\'grade\'] for student in grades] average_grade = mean(grades_list) median_grade = median(grades_list) # Calculate the mode(s) count = Counter(grades_list) max_count = max(count.values()) modes = [grade for grade, freq in count.items() if freq == max_count] return { \\"average\\": average_grade, \\"median\\": median_grade, \\"mode\\": modes }"},{"question":"**You are tasked with creating a simplified weather report generator. Write a function `weather_report` that takes in the temperature in Celsius and the weather condition as a string, then returns a formatted string describing the weather. The weather condition string can be one of the following: \\"sunny\\", \\"rainy\\", \\"cloudy\\", \\"snowy\\". The function should format the message based on the provided temperature and weather condition. Additionally, the function should suggest appropriate attire based on the guidelines: - For \\"sunny\\" weather, suggest wearing sunglasses. - For \\"rainy\\" weather, suggest carrying an umbrella. - For \\"cloudy\\" weather, suggest wearing a light jacket. - For \\"snowy\\" weather, suggest wearing a coat and gloves. The function signature should be: ```python def weather_report(temperature: float, condition: str) -> str: # Your code here ``` Examples: ```python >>> weather_report(25, \\"sunny\\") The temperature is 25°C. It is sunny outside. You should wear sunglasses. >>> weather_report(10, \\"rainy\\") The temperature is 10°C. It is rainy outside. You should carry an umbrella. >>> weather_report(-5, \\"snowy\\") The temperature is -5°C. It is snowy outside. You should wear a coat and gloves. ``` Ensure your function handles the valid input conditions specified and returns the appropriate message.","solution":"def weather_report(temperature: float, condition: str) -> str: Generates a weather report based on temperature and condition. Parameters: temperature (float): Temperature in Celsius. condition (str): Weather condition, one of \\"sunny\\", \\"rainy\\", \\"cloudy\\", or \\"snowy\\". Returns: str: Formatted weather report string. attire_suggestions = { \\"sunny\\": \\"You should wear sunglasses.\\", \\"rainy\\": \\"You should carry an umbrella.\\", \\"cloudy\\": \\"You should wear a light jacket.\\", \\"snowy\\": \\"You should wear a coat and gloves.\\" } if condition not in attire_suggestions: raise ValueError(\\"Invalid weather condition\\") weather_message = ( f\\"The temperature is {temperature}°C. It is {condition} outside. \\" f\\"{attire_suggestions[condition]}\\" ) return weather_message"},{"question":"You are required to implement a Python function to solve a problem involving data processing on a list of dictionaries representing student names and their scores. Specifically, your goal is to create a function named `top_students` which takes a list of dictionaries and an integer `n`, and returns a list of names of the top `n` students sorted by their score in descending order. If there are fewer than `n` students in the input list, return all the student names. Here are the requirements for the `top_students` function: 1. It should accept two parameters: - A list of dictionaries where each dictionary contains two keys: `\'name\'` (a string representing the student\'s name) and `\'score\'` (an integer representing the student\'s score). - An integer `n` representing the number of top students to return. 2. It should return a list of `n` names of the students with the top scores, sorted in descending order of their scores. 3. If there are ties in the scores, the order of names in the output can be arbitrary. 4. The function should handle cases where the list of students is empty or where `n` is larger than the number of students available. Here is a template you can use to define your function: ```python def top_students(students, n): # Your implementation here pass # Example usage: students_list = [ {\\"name\\": \\"John\\", \\"score\\": 92}, {\\"name\\": \\"Jane\\", \\"score\\": 98}, {\\"name\\": \\"Dave\\", \\"score\\": 85}, {\\"name\\": \\"Sally\\", \\"score\\": 91} ] print(top_students(students_list, 3)) # Output: [\'Jane\', \'John\', \'Sally\'] or any other order of top 3 ``` Ensure your function correctly identifies and sorts the top students based on their scores and returns the corresponding names in the specified order.","solution":"def top_students(students, n): Returns the names of the top n students based on their scores in descending order. :param students: List[Dict[str, Union[str, int]]] - A list of dictionaries where each dictionary contains: \'name\' : string - the name of the student \'score\': int - the score of the student :param n: int - Number of top students to return :return: List[str] - List of names of the top n students if not students or n <= 0: return [] # Sort students by scores in descending order sorted_students = sorted(students, key=lambda x: x[\'score\'], reverse=True) # Collect the top n student names top_n_students = [student[\'name\'] for student in sorted_students[:n]] return top_n_students"},{"question":"Consider implementing a function `processShapes` that processes a list of shape descriptions and computes their respective areas. Each shape description is provided as a dictionary with shape type and dimensions. The function should handle circles, rectangles, and triangles. The function should have the following signature: ```python def processShapes(shapes): - shapes: list of dictionaries where each dictionary represents a shape with the following structure: { \'type\': \'circle\' or \'rectangle\' or \'triangle\', \'dimensions\': list of numbers where: - for circles, list contains the radius [r] - for rectangles, list contains the width and height [w, h] - for triangles, list contains the base and height [b, h] } Returns: list of computed areas in the same order as the input list ``` Details: 1. For a circle, compute the area using the formula: [ text{Area} = pi r^2 ] where ( r ) is the radius. 2. For a rectangle, compute the area using the formula: [ text{Area} = text{width} times text{height} ] 3. For a triangle, compute the area using the formula: [ text{Area} = 0.5 times text{base} times text{height} ] 4. Handle invalid shape types by raising a `ValueError` with the message \\"Invalid shape type\\". Parameters: - `shapes`: A list of dictionaries where each dictionary contains the shape type and its dimensions. The function should return a list of areas corresponding to each shape, in the same order as the input list. Sample Input: ```python shapes = [ {\'type\': \'circle\', \'dimensions\': [2]}, {\'type\': \'rectangle\', \'dimensions\': [3, 4]}, {\'type\': \'triangle\', \'dimensions\': [3, 5]} ] ``` Sample Output: ``` [12.566370614359172, 12, 7.5] ```","solution":"import math def processShapes(shapes): Processes a list of shape descriptions and computes their respective areas. Parameters: - shapes: list of dictionaries where each dictionary represents a shape with the following structure: { \'type\': \'circle\' or \'rectangle\' or \'triangle\', \'dimensions\': list of numbers where: - for circles, list contains the radius [r] - for rectangles, list contains the width and height [w, h] - for triangles, list contains the base and height [b, h] } Returns: list of computed areas in the same order as the input list. areas = [] for shape in shapes: if shape[\'type\'] == \'circle\': r = shape[\'dimensions\'][0] area = math.pi * r * r elif shape[\'type\'] == \'rectangle\': w, h = shape[\'dimensions\'] area = w * h elif shape[\'type\'] == \'triangle\': b, h = shape[\'dimensions\'] area = 0.5 * b * h else: raise ValueError(\'Invalid shape type\') areas.append(area) return areas"},{"question":"Convert a decimal number to its equivalent Roman numeral. Roman numerals are represented by the symbols I, V, X, L, C, D, M, and follow specific rules for combinations. This problem requires you to create a function that takes an integer and returns its Roman numeral representation. Create a function named `int_to_roman` that: - Accepts an integer `num` which is within the range from 1 to 3999. - Converts the integer to its corresponding Roman numeral string. - Handles special cases in Roman numerals where subtraction is used instead of addition (e.g., 4 is IV instead of IIII and 9 is IX instead of VIIII). **Function Signature:** ```python def int_to_roman(num: int) -> str: ``` **Requirements:** - The function should map the integer values to their respective Roman numeral symbols and construct the numeral string accordingly. - Ensure that the function handles numbers outside the valid range by raising a `ValueError`. **Example:** ```python print(int_to_roman(3549)) print(int_to_roman(1994)) ``` Expected output: ``` MMMDXLIX MCMXCIV ``` **Explanation:** - For 3549, the Roman numeral is constructed as: - 3000 -> MMM - 500 -> D - 40 -> XL - 9 -> IX Resulting in MMMDXLIX. - For 1994, the Roman numeral is constructed as: - 1000 -> M - 900 -> CM - 90 -> XC - 4 -> IV Resulting in MCMXCIV.","solution":"def int_to_roman(num: int) -> str: if not 1 <= num <= 3999: raise ValueError(\\"Number out of range (must be between 1 and 3999)\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \'\' for i in range(len(val)): while num >= val[i]: roman_numeral += syms[i] num -= val[i] return roman_numeral"},{"question":"You are required to define a function called `construct_nested_dict` that performs the following tasks: 1. Accepts a list of tuples, where each tuple contains a nested key path and a value. 2. Constructs a nested dictionary from the provided key paths and values. Each tuple\'s first element is a string representing the nested key path with keys separated by dots (e.g., `\\"a.b.c\\"`), and the second element is the value to be assigned at that key path in the dictionary. # Example Usage ```python key_value_pairs = [ (\\"person.name\\", \\"Alice\\"), (\\"person.age\\", 28), (\\"person.address.street\\", \\"456 Oak Street\\"), (\\"person.address.city\\", \\"Grovetown\\"), (\\"person.address.state\\", \\"GA\\"), (\\"person.address.zipcode\\", \\"30813\\") ] result = construct_nested_dict(key_value_pairs) print(result) # The output should be: # { # \\"person\\": { # \\"name\\": \\"Alice\\", # \\"age\\": 28, # \\"address\\": { # \\"street\\": \\"456 Oak Street\\", # \\"city\\": \\"Grovetown\\", # \\"state\\": \\"GA\\", # \\"zipcode\\": \\"30813\\" # } # } # } ``` # Constraints 1. Each key path in the list will always be valid and non-empty. 2. Values in the tuples can be of any data type. 3. Key paths given are always unique.","solution":"def construct_nested_dict(key_value_pairs): Constructs a nested dictionary from the given key-value pairs. Parameters: key_value_pairs (list of tuples): Each tuple contains a key path string (with keys separated by dots) and the corresponding value. Returns: dict: The constructed nested dictionary. result = {} for key_path, value in key_value_pairs: keys = key_path.split(\'.\') d = result for key in keys[:-1]: if key not in d: d[key] = {} d = d[key] d[keys[-1]] = value return result"},{"question":"Given a list of strings and a positive integer `K`, your task is to implement a function that returns a list of strings which are longer than `K` characters and sorted in alphabetical order. If no string meets the criteria, return an empty list. The function should follow these steps: 1. **Filter Strings**: - Iterate through the provided list of strings. - Select only those strings whose length is greater than `K`. 2. **Sort**: - Sort the filtered strings in alphabetical order. Your task is to implement the `filter_and_sort_strings` function. Function Signature ```python def filter_and_sort_strings(strings: list, K: int) -> list: Filter strings longer than K characters and sort them alphabetically. Parameters: - strings: list: The list of input strings. - K: int: The minimum length a string should have to be included. Returns: - List of strings that are longer than K characters, sorted alphabetically. # Your code here ``` # Example ```python strings = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"fig\\", \\"grape\\"] K = 5 print(filter_and_sort_strings(strings, K)) # Output: [\'banana\', \'cherry\'] strings = [\\"quick\\", \\"brown\\", \\"fox\\", \\"jumps\\"] K = 4 print(filter_and_sort_strings(strings, K)) # Output: [\'brown\', \'jumps\', \'quick\'] strings = [\\"a\\", \\"bc\\", \\"def\\", \\"ghij\\", \\"klmno\\"] K = 10 print(filter_and_sort_strings(strings, K)) # Output: [] ``` # Constraints - Each string in the input list will contain only alphabetical characters (both uppercase and lowercase). - The value of `K` will be a positive integer. - Strings will have different lengths, and there will be no duplicates in the input list.","solution":"def filter_and_sort_strings(strings: list, K: int) -> list: Filter strings longer than K characters and sort them alphabetically. Parameters: - strings: list: The list of input strings. - K: int: The minimum length a string should have to be included. Returns: - List of strings that are longer than K characters, sorted alphabetically. # Filter strings longer than K characters filtered_strings = [s for s in strings if len(s) > K] # Sort the filtered strings alphabetically filtered_strings.sort() return filtered_strings"},{"question":"Write a program to parse a JSON file and compute the sum of values for a specified key provided via command-line argument. Each key in the JSON file can correspond to a nested object or a simple value. The function should correctly handle nested keys using dot notation (e.g., `a.b.c` for accessing `{\\"a\\": {\\"b\\": {\\"c\\": value}}}`). The function should output: int/float: The computed sum of all the values corresponding to the specified key. Write self-contained code starting with: ``` import json import sys def sum_json_key(input_file, target_key): def extract_value(d, keys): for key in keys: d = d.get(key, 0) if not isinstance(d, (dict, int, float)): break return d if isinstance(d, (int, float)) else 0 try: with open(input_file, \'r\') as file: data = json.load(file) keys = target_key.split(\'.\') total_sum = 0 if isinstance(data, list): for item in data: total_sum += extract_value(item, keys) elif isinstance(data, dict): total_sum += extract_value(data, keys) return total_sum except (FileNotFoundError, json.JSONDecodeError) as e: print(f\\"Error: {e}\\") return 0 # Example usage (uncomment the following lines to run): # if __name__ == \\"__main__\\": # input_file = sys.argv[1] # target_key = sys.argv[2] # result = sum_json_key(input_file, target_key) # print(f\\"The sum of values for the key \'{target_key}\' is {result}\\") ```","solution":"import json import sys def sum_json_key(input_file, target_key): def extract_value(d, keys): for key in keys: d = d.get(key, 0) if not isinstance(d, (dict, int, float)): break return d if isinstance(d, (int, float)) else 0 try: with open(input_file, \'r\') as file: data = json.load(file) keys = target_key.split(\'.\') total_sum = 0 if isinstance(data, list): for item in data: total_sum += extract_value(item, keys) elif isinstance(data, dict): total_sum += extract_value(data, keys) return total_sum except (FileNotFoundError, json.JSONDecodeError) as e: print(f\\"Error: {e}\\") return 0"},{"question":"In the context of software engineering, understanding proper usage of regular expressions is critical for efficient text processing tasks. Your task is to write a function called `extract_emails` which extracts all email addresses from a given text. # Requirements: 1. **Function Name**: `extract_emails` 2. **Parameters**: `text` (a string containing the text to search for email addresses) 3. **Returns**: A list of unique email addresses found in the `text`, sorted in lexicographical order. # Guidelines: - Use regular expressions (`re` library in Python) to identify email addresses within the provided text. - An email address is defined as a sequence of characters that includes one `@` symbol and a `.` symbol after it, following a basic pattern (e.g., name@domain.com). - Ensure emails are case-insensitive and each unique email is only listed once. - Sort the resulting list of emails alphabetically. # Example Usage: ```python def extract_emails(text): # Your implementation here text = Hello john.doe@example.com, please contact jane_doe123@sample.net or support@company.org. You can also reach out to first.last@domain.co.uk for further information. Best regards, admin@domain.com print(extract_emails(text)) ``` # Expected Output: ```plaintext [\'admin@domain.com\', \'first.last@domain.co.uk\', \'jane_doe123@sample.net\', \'john.doe@example.com\', \'support@company.org\'] ``` # Notes: 1. Focus on handling typical email patterns and consider common characters used in email addresses. 2. Ensure no duplicate emails are included in the final output and the output list is sorted. 3. Handle potential edge cases such as emails with numbers, underscores, and hyphens.","solution":"import re def extract_emails(text): Extracts all unique email addresses from the given text and returns them sorted in lexicographical order. email_pattern = r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\' emails = re.findall(email_pattern, text) unique_emails = sorted(set(email.lower() for email in emails)) return unique_emails"},{"question":"You are tasked with implementing a function called `rolling_average` that computes the rolling average of a given array of numerical values over a specified window size. This function should utilize specific functions from the NumPy library to perform efficient mathematical operations. The rolling average at position (i) is the mean of the previous (window) elements, including the element at position (i). If there are fewer than (window) elements before position (i), then use all elements available up to position (i). **Function Signature:** ```python def rolling_average(arr: np.ndarray, window: int) -> np.ndarray: pass ``` **Requirements:** - Utilize `numpy.cumsum` for computing the cumulative sum efficiently. - Ensure the function handles the array edges correctly when the window size exceeds the available elements. **Example:** ```python import numpy as np # Example input arr = np.array([10, 20, 30, 40, 50]) window = 3 # Call the function and print results print(rolling_average(arr, window)) # Expected output: array([10. , 15. , 20. , 30. , 40. ]) ``` In this example, the rolling averages are calculated as: - For the first element (10): (10) / 1 = 10.0 - For the second element (20): (10 + 20) / 2 = 15.0 - For the third element (30): (10 + 20 + 30) / 3 = 20.0 - For the fourth element (40): (20 + 30 + 40) / 3 = 30.0 - For the fifth element (50): (30 + 40 + 50) / 3 = 40.0","solution":"import numpy as np def rolling_average(arr: np.ndarray, window: int) -> np.ndarray: Computes the rolling average of a given array of numerical values over a specified window size. Parameters: arr (np.ndarray): The input array of numerical values. window (int): The window size for computing the rolling average. Returns: np.ndarray: An array of rolling averages. cumsum = np.cumsum(np.insert(arr, 0, 0)) result = (cumsum[window:] - cumsum[:-window]) / window for i in range(window - 1): result = np.insert(result, i, np.mean(arr[:i + 1])) return result"},{"question":"You are given a list of transactions that have taken place over a day. Each transaction is represented by a list containing three values: 1. Transaction ID (an integer which is unique for each transaction) 2. Transaction Amount (a float value which can be positive or negative) 3. Currency Type (a string which can be either \'USD\', \'EUR\' or \'JPY\') Your task is to implement the function `filter_transactions(transactions)` that: 1. Reshapes the given 1-dimensional list into a 2-dimensional array where each row represents a transaction. 2. Validates that each transaction meets the following conditions: - The Transaction ID must be a positive integer. - The Transaction Amount must be non-zero. - The Currency Type must be one of \'USD\', \'EUR\', \'JPY\'. 3. Returns the rows that are valid according to the above conditions as a new 2-dimensional array. 4. Prints an error message for each invalid row, specifying the type(s) of errors for that row. Ensure that you utilize numpy slicing and boolean indexing for efficient validation. Function Signature ```python def filter_transactions(transactions: list) -> np.ndarray: ``` Example Usage ```python transactions = [1001, 250.85, \'USD\', -50, 0.0, \'EUR\', 1003, -150.75, \'JPY\', 1000, 300, \'YEN\'] result = filter_transactions(transactions) # Expected Printed Output: # Error(s) in line 2: Invalid transaction ID. # Error(s) in line 3: Invalid transaction amount. # Error(s) in line 4: Invalid currency type. # # Expected return value: # array([[1001, 250.85, \'USD\'], # [1003, -150.75, \'JPY\']], dtype=object) ```","solution":"import numpy as np def filter_transactions(transactions): num_columns = 3 # Each transaction has three elements: ID, Amount, and Currency num_rows = len(transactions) // num_columns # Calculate the number of rows # Reshape the flat list into a 2D numpy array transactions_array = np.array(transactions).reshape(num_rows, num_columns) valid_transactions = [] for i, transaction in enumerate(transactions_array): errors = [] try: # Parse the transaction components trans_id = int(transaction[0]) trans_amount = float(transaction[1]) trans_currency = str(transaction[2]) # Validate the transaction components if trans_id <= 0: errors.append(\\"Invalid transaction ID.\\") if trans_amount == 0.0: errors.append(\\"Invalid transaction amount.\\") if trans_currency not in (\'USD\', \'EUR\', \'JPY\'): errors.append(\\"Invalid currency type.\\") except ValueError as e: errors.append(\\"Incorrect data type.\\") if errors: print(f\\"Error(s) in line {i+1}: {\', \'.join(errors)}\\") else: valid_transactions.append(transaction) return np.array(valid_transactions)"},{"question":"In this problem, you are tasked with implementing a class that handles a bounded blocking queue with thread-safety, using Python\'s `threading` module. You will use the `threading` module\'s `Thread`, `Lock`, and `Condition` classes to manage the queue. Here are the requirements: 1. Create a class `BoundedBlockingQueue` that initializes an empty list (`self.queue`) for storing elements, an integer (`self.capacity`) indicating the maximum allowable size of the queue, a `Lock` (`self.lock`) for managing access to the queue, and two `Condition` objects (`self.not_full` and `self.not_empty`) for handling full and empty conditions. 2. Implement an `enqueue(self, item)` method which adds an element to the queue. If the queue is full, the method should wait until there is space. It should use `self.lock` to ensure thread-safety and notify threads waiting for `self.not_empty` when an item is added. 3. Implement a `dequeue(self)` method which removes and returns an element from the queue. If the queue is empty, the method should wait until there are items to remove. It should use `self.lock` to ensure thread-safety and notify threads waiting for `self.not_full` when an item is removed. 4. Implement a function `run_queue_operations(capacity, items_to_enqueue)` which: - Creates an instance of `BoundedBlockingQueue` with the given `capacity`. - Creates two threads: one to enqueue the items from `items_to_enqueue` into the queue, and another to dequeue items from the queue until all items are dequeued. - Starts both threads and waits for them to finish using the `join()` method. - Returns the list of dequeued items. Your task is to implement the `run_queue_operations(capacity, items_to_enqueue)` function as described. ```python import threading class BoundedBlockingQueue: def __init__(self, capacity): self.queue = [] self.capacity = capacity self.lock = threading.Lock() self.not_full = threading.Condition(self.lock) self.not_empty = threading.Condition(self.lock) def enqueue(self, item): with self.not_full: while len(self.queue) >= self.capacity: self.not_full.wait() self.queue.append(item) self.not_empty.notify() def dequeue(self): with self.not_empty: while not self.queue: self.not_empty.wait() item = self.queue.pop(0) self.not_full.notify() return item def run_queue_operations(capacity, items_to_enqueue): queue = BoundedBlockingQueue(capacity) dequeued_items = [] def producer(): for item in items_to_enqueue: queue.enqueue(item) def consumer(): while len(dequeued_items) < len(items_to_enqueue): item = queue.dequeue() dequeued_items.append(item) producer_thread = threading.Thread(target=producer) consumer_thread = threading.Thread(target=consumer) producer_thread.start() consumer_thread.start() producer_thread.join() consumer_thread.join() return dequeued_items # Example usage: # final_items = run_queue_operations(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) # print(final_items) ```","solution":"import threading class BoundedBlockingQueue: def __init__(self, capacity): self.queue = [] self.capacity = capacity self.lock = threading.Lock() self.not_full = threading.Condition(self.lock) self.not_empty = threading.Condition(self.lock) def enqueue(self, item): with self.not_full: while len(self.queue) >= self.capacity: self.not_full.wait() self.queue.append(item) self.not_empty.notify() def dequeue(self): with self.not_empty: while not self.queue: self.not_empty.wait() item = self.queue.pop(0) self.not_full.notify() return item def run_queue_operations(capacity, items_to_enqueue): queue = BoundedBlockingQueue(capacity) dequeued_items = [] def producer(): for item in items_to_enqueue: queue.enqueue(item) def consumer(): while len(dequeued_items) < len(items_to_enqueue): item = queue.dequeue() dequeued_items.append(item) producer_thread = threading.Thread(target=producer) consumer_thread = threading.Thread(target=consumer) producer_thread.start() consumer_thread.start() producer_thread.join() consumer_thread.join() return dequeued_items"},{"question":"Given a list of integers, return the list sorted in non-decreasing order with duplicates removed. Also, generate a frequency dictionary where the keys are the unique integers and the values represent how many times each integer appeared in the original list. The function should output: list: A sorted list of unique integers from the original list. dict: A dictionary with integers as keys and their frequency counts as values. You should write self-contained code starting with: ``` def sort_and_count(nums): ```","solution":"def sort_and_count(nums): Returns a sorted list of unique integers from the original list and a frequency dictionary. Args: nums (list of int): The input list of integers. Returns: tuple: A tuple containing a sorted list of unique integers and a frequency dictionary. # Create a frequency dictionary freq_dict = {} for num in nums: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 # Create a sorted list of unique integers sorted_unique_nums = sorted(freq_dict.keys()) return sorted_unique_nums, freq_dict"},{"question":"You are tasked with designing a function in Python that simulates a producer-consumer problem using the `queue.Queue` and `threading` modules. The goal is to create a function called `start_simulation` that initiates a specified number of producer and consumer threads. Producers should generate items and put them into a shared queue, while consumers should read items from the queue and process them. # Requirements: 1. **Function Name:** `start_simulation` 2. **Parameters:** - `num_producers` (int): The number of producer threads to start. - `num_consumers` (int): The number of consumer threads to start. - `num_items` (int): The total number of items each producer should generate. 3. **Functionality:** - The function should create and start the specified number of producer and consumer threads. - Each producer will generate items (e.g., integers) and put them into the shared queue. - Each consumer will read items from the queue and process them (e.g., print the item). - The main thread should wait for all threads to complete before terminating. - Producers should label items with the producer\'s ID and the current item index. - Ensure thread-safe access to the shared queue. - Use a `queue.Queue` to manage the items between producers and consumers. - Use appropriate synchronization (e.g., `queue.Queue`\'s built-in methods) to handle concurrent access to the queue. # Example Output: If `start_simulation(2, 2, 5)` is called, the output might look like: ``` Producer-1 generated item 1-0 Producer-2 generated item 2-0 Consumer-1 consumed item 1-0 Producer-1 generated item 1-1 Consumer-2 consumed item 2-0 Producer-2 generated item 2-1 Consumer-1 consumed item 1-1 Producer-1 generated item 1-2 Consumer-2 consumed item 2-1 ... ``` Note: The interleaving of producer and consumer outputs can vary since thread scheduling is non-deterministic. # Constraints: - Utilize the `queue.Queue` class for managing the shared queue. - Ensure each item is processed by exactly one consumer. - Use the `threading` library to manage the threads. Create the function `start_simulation` to meet the above requirements.","solution":"import threading import queue import time def producer(queue, producer_id, num_items): for i in range(num_items): item = f\'Producer-{producer_id} item-{i}\' queue.put(item) print(f\'{item} generated\') time.sleep(0.1) # Simulate time taken to produce an item def consumer(queue, consumer_id): while True: item = queue.get() if item is None: break print(f\'Consumer-{consumer_id} consumed {item}\') time.sleep(0.1) # Simulate time taken to consume an item queue.task_done() def start_simulation(num_producers, num_consumers, num_items): item_queue = queue.Queue() # Start producer threads producer_threads = [] for i in range(num_producers): thread = threading.Thread(target=producer, args=(item_queue, i + 1, num_items)) thread.start() producer_threads.append(thread) # Start consumer threads consumer_threads = [] for i in range(num_consumers): thread = threading.Thread(target=consumer, args=(item_queue, i + 1)) thread.start() consumer_threads.append(thread) # Wait for all producer threads to finish for thread in producer_threads: thread.join() # Send stop signal to consumers for _ in range(num_consumers): item_queue.put(None) # Wait for all consumer threads to finish for thread in consumer_threads: thread.join()"},{"question":"Context: You are developing a utility function to analyze the frequency of words in a given text document. The text needs to be preprocessed to remove common stop words, punctuation, and to handle case normalization (convert to lowercase). The function should return the top N most frequent words along with their counts. Objective: Create a function named `top_n_words` that: 1. Takes as input: - `text_file`: A file path pointing to the text document in `.txt` format. - `stop_words`: A list of common stop words to be excluded from the analysis. - `n`: An integer representing the number of top words to be returned. 2. Reads the text file and preprocesses the text by: - Converting all characters to lowercase. - Removing all punctuation. - Tokenizing the text into words. - Filtering out the stop words. 3. Calculates the word frequency. 4. Returns the top N words along with their counts in a list of tuples, where each tuple contains a word and its count. Required Function Signature: ```python from typing import List, Tuple def top_n_words(text_file: str, stop_words: List[str], n: int) -> List[Tuple[str, int]]: pass ``` Additional Notes: - Ensure that the function handles edge cases where the text file might be empty or contains fewer than N unique words. - You may assume that the punctuation includes any non-alphabetic character and can be removed using a regular expression. - Handle the file reading using Python\'s built-in file I/O operations. Example: If `text_file` has the content: ``` Hello world! This is a test. Hello again, world. ``` And `stop_words = [\\"is\\", \\"a\\", \\"this\\"]` Calling `top_n_words(text_file, stop_words, 2)` should return: ``` [(\'hello\', 2), (\'world\', 2)] ```","solution":"import re from collections import Counter from typing import List, Tuple def top_n_words(text_file: str, stop_words: List[str], n: int) -> List[Tuple[str, int]]: with open(text_file, \'r\') as file: text = file.read() # Convert to lowercase text = text.lower() # Remove punctuation text = re.sub(r\'[^a-zs]\', \'\', text) # Tokenize and filter stop words words = text.split() words = [word for word in words if word not in stop_words] # Calculate word frequency word_counts = Counter(words) # Get the top N words top_n = word_counts.most_common(n) return top_n"},{"question":"You are given a JSON file named \\"inventory.json\\" which contains records of products. Each product is represented by the following fields: ProductID, ProductName, Quantity, and Price. Your task is to write a function `UpdateInventory(product_name, quantity, price)` that updates the details of a product. The function should update the quantity and price of an existing product identified by its name. If the product does not exist in the inventory, a new entry should be added. You must use the `json` library to read from and write to the JSON file. Ensure that the function correctly updates the JSON data structure and handles scenarios where the JSON file might be initially empty. **Task:** 1. Implement the `UpdateInventory` function as described. 2. Use the `json.load` function to read the JSON file. **Function Signature:** ```python def UpdateInventory(product_name: str, quantity: int, price: float) -> None: pass ``` **Constraints:** - The JSON file will have a list of product objects, each with the fields `ProductID`, `ProductName`, `Quantity`, and `Price`. - ProductID should start at 1 and increment by one for each new product added. - Ensure that the function properly handles the case where the JSON file does not exist or is empty initially.","solution":"import json import os def UpdateInventory(product_name: str, quantity: int, price: float) -> None: file_name = \\"inventory.json\\" # Check if inventory file exists if os.path.exists(file_name): with open(file_name, \'r\') as file: try: products = json.load(file) except json.JSONDecodeError: products = [] else: products = [] # Find the product product_found = False for product in products: if product[\'ProductName\'] == product_name: product[\'Quantity\'] = quantity product[\'Price\'] = price product_found = True break # If product not found, add new product if not product_found: new_product_id = len(products) + 1 new_product = { \'ProductID\': new_product_id, \'ProductName\': product_name, \'Quantity\': quantity, \'Price\': price } products.append(new_product) # Write the updated list back to the file with open(file_name, \'w\') as file: json.dump(products, file, indent=4)"},{"question":"You are tasked with creating a function that processes a list of dictionaries representing employee information. Each dictionary contains three keys: \\"Name\\", \\"Position\\", and \\"Salary\\". The goal is to perform two specific calculations and generate a formatted report based on the results. The function should be named `generate_employee_report(employees)`, where: - `employees`: a list of dictionaries where each dictionary contains \\"Name\\" (a string), \\"Position\\" (a string), and \\"Salary\\" (an integer). Your function should: 1. Calculate the average salary for each position. 2. Print a report that lists each position, the number of employees in that position, and their average salary formatted to two decimal places. Example of the `employees` list: ```python [ {\\"Name\\": \\"Alice\\", \\"Position\\": \\"Manager\\", \\"Salary\\": 90000}, {\\"Name\\": \\"Bob\\", \\"Position\\": \\"Engineer\\", \\"Salary\\": 80000}, {\\"Name\\": \\"Charlie\\", \\"Position\\": \\"Manager\\", \\"Salary\\": 95000}, {\\"Name\\": \\"David\\", \\"Position\\": \\"Engineer\\", \\"Salary\\": 85000}, {\\"Name\\": \\"Eve\\", \\"Position\\": \\"Engineer\\", \\"Salary\\": 80000}, ] ``` Output should be: ``` Position: Manager, Employees: 2, Average Salary: 92500.00 Position: Engineer, Employees: 3, Average Salary: 81666.67 ``` **Requirements:** 1. Ensure the report is sorted by position names in ascending order. 2. Handle potential errors gracefully, especially when calculating the average salary. 3. The output should be printed as shown in the example. **Function Signature:** ```python def generate_employee_report(employees: list): # Your implementation here ```","solution":"def generate_employee_report(employees): from collections import defaultdict position_salaries = defaultdict(list) # Collect salaries for each position for employee in employees: position = employee[\\"Position\\"] salary = employee[\\"Salary\\"] position_salaries[position].append(salary) # Calculate the average salary for each position report = [] for position, salaries in position_salaries.items(): num_employees = len(salaries) avg_salary = sum(salaries) / num_employees report.append((position, num_employees, avg_salary)) # Sort the report by position names in ascending order report.sort(key=lambda x: x[0]) # Print the report for position, num_employees, avg_salary in report: print(f\\"Position: {position}, Employees: {num_employees}, Average Salary: {avg_salary:.2f}\\")"},{"question":"You are given a list of strings that represent buy and sell orders of stocks in the format \\"action stock_name quantity\\". Write a Python function `process_stock_orders(orders: List[str]) -> Dict[str, int]` that takes the list of orders and returns a dictionary where the keys are the stock names and the values are the net quantities (buy quantity - sell quantity) of the stocks. - A \\"buy\\" order increases the stock quantity. - A \\"sell\\" order decreases the stock quantity. - If a stock net quantity is zero after processing all orders, it should not appear in the resulting dictionary. You are expected to: 1. Parse each order string to determine the action (buy or sell), the stock name, and the quantity. 2. Update a dictionary to keep track of the net quantities of each stock. 3. Only include stocks with non-zero net quantities in the final dictionary. Below is an initial code structure to help you: ```python from typing import List, Dict def process_stock_orders(orders: List[str]) -> Dict[str, int]: # Your code here ``` #","solution":"from typing import List, Dict def process_stock_orders(orders: List[str]) -> Dict[str, int]: stock_dict = {} for order in orders: action, stock_name, quantity = order.split() quantity = int(quantity) if stock_name not in stock_dict: stock_dict[stock_name] = 0 if action == \\"buy\\": stock_dict[stock_name] += quantity elif action == \\"sell\\": stock_dict[stock_name] -= quantity # Filter out stocks with net quantity of zero result = {stock: qty for stock, qty in stock_dict.items() if qty != 0} return result"},{"question":"You are tasked with developing a function, `filter_and_save_users(input_json, output_json, age_threshold)`, that reads a JSON file containing user information, filters the users based on a specified age threshold, and writes the filtered list of users to a new JSON file. The input JSON file contains an array of users, each with a name and age. Your function must return users who are older than the specified `age_threshold`. To achieve this, leverage Python\'s `json` library. Your function should perform the following steps: 1. Open and read the given input JSON file (`input_json`) using `json.load`. 2. Filter the list of users to include only those whose age is greater than `age_threshold`. 3. Write the filtered list of users to the output JSON file (`output_json`) using `json.dump`. Ensure the output JSON structure matches the input. # JSON Input Format The input JSON file will have the following structure: ```json { \\"users\\": [ { \\"name\\": \\"Alice\\", \\"age\\": 30 }, { \\"name\\": \\"Bob\\", \\"age\\": 25 }, ... ] } ``` # Example Usage Given an input JSON file `users.json` with content: ```json { \\"users\\": [ { \\"name\\": \\"Alice\\", \\"age\\": 30 }, { \\"name\\": \\"Bob\\", \\"age\\": 25 }, { \\"name\\": \\"Charlie\\", \\"age\\": 35 } ] } ``` The call `filter_and_save_users(\'users.json\', \'filtered_users.json\', 28)` should create an output JSON file `filtered_users.json` with the following content: ```json { \\"users\\": [ { \\"name\\": \\"Alice\\", \\"age\\": 30 }, { \\"name\\": \\"Charlie\\", \\"age\\": 35 } ] } ``` # Constraints - The function should handle errors gracefully, such as invalid filenames or malformed JSON. - You may assume that the JSON structure is well-formed as defined above. # Your Task Implement the function `filter_and_save_users(input_json, output_json, age_threshold)` to meet the above requirements.","solution":"import json def filter_and_save_users(input_json, output_json, age_threshold): Filters users from the input JSON file that are older than the age_threshold and saves them in the output JSON file. Args: input_json (str): The input JSON file path. output_json (str): The output JSON file path. age_threshold (int): The age threshold to filter users. try: # Open and read the input JSON file with open(input_json, \'r\') as infile: data = json.load(infile) # Filter users based on age_threshold filtered_users = [user for user in data.get(\'users\', []) if user.get(\'age\', 0) > age_threshold] # Write the filtered users to the output JSON file with open(output_json, \'w\') as outfile: json.dump({\\"users\\": filtered_users}, outfile, indent=4) except (FileNotFoundError, json.JSONDecodeError) as e: print(f\\"Error occurred: {e}\\")"},{"question":"Create a function called `generate_fibonacci(n)` that: 1. Prints out the current thread\'s name, using the `threading.current_thread` function from the threading library. 2. Prints out the current process ID, using the `os.getpid` function from the os library. 3. Generates and returns a list containing the first `n` Fibonacci numbers. In your implementation: - Use the `threading` library to get the name of the current thread running the function. - Use the `os` library to get the current process ID. **Function Signature:** ```python def generate_fibonacci(n): pass ``` **Example:** If `n` is 6, the function should print: ``` Thread name generating Fibonacci sequence = MainThread ID of the process generating Fibonacci sequence = [process_id] ``` And then return the list: ``` [0, 1, 1, 2, 3, 5] ``` Where `[process_id]` will be the actual process ID of the current process. **Requirements:** - Use `threading.current_thread()` from the `threading` library. - Use `os.getpid()` from the `os` library. - Generate a list containing the first `n` Fibonacci numbers.","solution":"import threading import os def generate_fibonacci(n): Generates a list of the first `n` Fibonacci numbers after printing the current thread\'s name and process ID. Params: n (int): The number of Fibonacci numbers to generate Returns: list: A list containing the first `n` Fibonacci numbers print(f\\"Thread name generating Fibonacci sequence = {threading.current_thread().name}\\") print(f\\"ID of the process generating Fibonacci sequence = {os.getpid()}\\") if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for _ in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"You are required to write a function named `top_employees`. The function should take a list of employees and their respective sales figures, and return the names of the top `n` employees based on their sales. The input to the function is a list of tuples, where each tuple contains two elements: - The first element is the employee\'s name (a string). - The second element is the employee\'s sales figure (an integer). Additionally, the function should accept an integer `n` which specifies the number of top employees to return based on their sales figures. Your task is to create a function `top_employees(employees, n)` that: 1. Accepts a list of tuples `employees` and an integer `n`. 2. Sorts the employees based on their sales figures in descending order. 3. Returns a list of the names of the top `n` employees. The function signature should be: ```python def top_employees(employees: List[Tuple[str, int]], n: int) -> List[str]: ``` # Examples ```python employees = [(\\"John Doe\\", 120), (\\"Jane Smith\\", 340), (\\"Emily Johnson\\", 275), (\\"Michael Brown\\", 150)] n = 2 top_employees(employees, n) # returns [\\"Jane Smith\\", \\"Emily Johnson\\"] employees = [(\\"Alice\\", 500), (\\"Bob\\", 300), (\\"Charlie\\", 500), (\\"David\\", 200)] n = 3 top_employees(employees, n) # returns [\\"Alice\\", \\"Charlie\\", \\"Bob\\"] ``` # Notes - If two employees have the same sales figure, their order in the returned list should be based on their order in the input list. - You can assume that `n` will always be less than or equal to the number of employees in the list.","solution":"from typing import List, Tuple def top_employees(employees: List[Tuple[str, int]], n: int) -> List[str]: Returns the names of the top n employees based on their sales figures. Params: - employees (List[Tuple[str, int]]): A list of tuples where the first element is the employee\'s name and the second element is the employee\'s sales figure. - n (int): The number of top employees to return. Returns: - List[str]: A list of names of the top n employees based on sales figures. # Sort employees by sales figure in descending order employees_sorted = sorted(employees, key=lambda x: x[1], reverse=True) # Extract the names of the top n employees top_n_employees = [employee[0] for employee in employees_sorted[:n]] return top_n_employees"},{"question":"Create a function to generate a Fibonacci sequence up to a specified number `n`, with an additional requirement to return the sum of all even-valued terms in the generated sequence. The function should also plot the Fibonacci numbers using Matplotlib to visualise their growth. The function should output with: Tuple[List[int], int, matplotlib.axes._axes.Axes]: A list of Fibonacci numbers up to `n`, the sum of even-valued terms, and the axes object with the plot. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def generate_fibonacci(n): ```","solution":"import matplotlib.pyplot as plt def generate_fibonacci(n): Generate a Fibonacci sequence up to a specified number `n`, and return the sequence, the sum of all even-valued terms, and the plot. Parameters: n (int): The upper limit for the Fibonacci sequence. Returns: Tuple[List[int], int, matplotlib.axes._axes.Axes]: A list of Fibonacci numbers up to `n`, the sum of even-valued terms, and the axes object with the plot. fibonacci_sequence = [] a, b = 0, 1 even_sum = 0 while a <= n: fibonacci_sequence.append(a) if a % 2 == 0: even_sum += a a, b = b, a + b fig, ax = plt.subplots() ax.plot(fibonacci_sequence, marker=\'o\', linestyle=\'--\') ax.set_title(\'Fibonacci Sequence up to {}\'.format(n)) ax.set_xlabel(\'Index\') ax.set_ylabel(\'Fibonacci Number\') return fibonacci_sequence, even_sum, ax"},{"question":"You are given a dataset of daily temperatures recorded in different cities over a period of time. Your task is to create a function that visualizes the temperature trends for each city using a line plot, and to highlight the days with temperature anomalies (temperatures significantly higher or lower than the average). Write a function named `visualize_temperature_trends(cities, temp_data, anomaly_threshold)` that takes the following parameters: - `cities` (list of strings): The list of city names corresponding to the temperature data. - `temp_data` (list of lists): A nested list where each sub-list contains the daily temperatures for the corresponding city in the `cities` list. - `anomaly_threshold` (float): The threshold value to identify temperature anomalies. A day’s temperature is considered an anomaly if it deviates from the city’s average temperature by more than this threshold. The function should perform the following: 1. Calculate the average temperature for each city. 2. Identify the days with temperature anomalies for each city. 3. Use `matplotlib.pyplot.subplots` to create a plotting area with subplots arranged in a grid. 4. Plot the temperature trends for each city on separate subplots as line plots. 5. Highlight the anomalies on the line plots by marking them with distinct symbols or colors. 6. Customize each subplot with titles, labels, and legends to identify cities and anomalies. This task will help you practice visualizing time series data using Matplotlib, handling multiple subplots, and applying basic analysis to identify anomalies in data. Assume the following: - The length of `temp_data` and `cities` are the same. - The number of days of temperature data is consistent across all cities. - Utilize appropriate functions and techniques from Matplotlib for plotting and customization. ```python import matplotlib.pyplot as plt def visualize_temperature_trends(cities, temp_data, anomaly_threshold): num_cities = len(cities) if num_cities == 0: return num_days = len(temp_data[0]) fig, axes = plt.subplots(nrows=num_cities, ncols=1, figsize=(10, 5 * num_cities)) if num_cities == 1: axes = [axes] for i, (city, temps) in enumerate(zip(cities, temp_data)): avg_temp = sum(temps) / num_days anomalies = [j for j, temp in enumerate(temps) if abs(temp - avg_temp) > anomaly_threshold] axes[i].plot(range(num_days), temps, label=f\'Temperature Trend of {city}\') axes[i].scatter(anomalies, [temps[j] for j in anomalies], c=\'r\', label=\'Anomalies\') axes[i].set_title(f\'Temperature Trend and Anomalies - {city}\') axes[i].set_xlabel(\'Days\') axes[i].set_ylabel(\'Temperature\') axes[i].legend() plt.tight_layout() plt.show() ```","solution":"import matplotlib.pyplot as plt def visualize_temperature_trends(cities, temp_data, anomaly_threshold): Plots temperature trends for each city and highlights temperature anomalies. Parameters: cities (list of str): The list of city names. temp_data (list of lists): A nested list containing daily temperatures for each city. anomaly_threshold (float): The threshold value to identify temperature anomalies. num_cities = len(cities) if num_cities == 0: return num_days = len(temp_data[0]) fig, axes = plt.subplots(nrows=num_cities, ncols=1, figsize=(10, 5 * num_cities)) if num_cities == 1: axes = [axes] for i, (city, temps) in enumerate(zip(cities, temp_data)): avg_temp = sum(temps) / num_days anomalies = [j for j, temp in enumerate(temps) if abs(temp - avg_temp) > anomaly_threshold] axes[i].plot(range(num_days), temps, label=f\'Temperature Trend of {city}\') axes[i].scatter(anomalies, [temps[j] for j in anomalies], c=\'r\', label=\'Anomalies\') axes[i].set_title(f\'Temperature Trend and Anomalies - {city}\') axes[i].set_xlabel(\'Days\') axes[i].set_ylabel(\'Temperature\') axes[i].legend() plt.tight_layout() plt.show()"},{"question":"You are tasked with developing a program that analyses a network of friends and identifies social hubs. A social hub is defined as a person who has the highest number of immediate friends within their network. The goal is to write a function `find_social_hubs(friend_network)` that returns a list of social hubs. If multiple people share the maximum number of friends, all of them should be included in the output. Function Requirements: - **Name**: `find_social_hubs` - **Arguments**: - `friend_network` (dictionary): A dictionary representing the network where keys are people\'s names and values are sets of names representing their immediate friends. - **Returns**: - A list of names who are identified as social hubs. You need to iterate through the provided network, count the number of friends for each person, and identify the person(s) with the maximum number of friends. Example: ```python friend_network = { \'Alice\': {\'Bob\', \'Charlie\', \'David\'}, \'Bob\': {\'Alice\', \'Charlie\'}, \'Charlie\': {\'Alice\', \'Bob\', \'David\'}, \'David\': {\'Alice\', \'Charlie\'} } social_hubs = find_social_hubs(friend_network) print(\\"Social Hubs:\\", social_hubs) ``` Expected Output: ``` Social Hubs: [\'Alice\', \'Charlie\'] ``` **Note**: This problem is intended to help you understand dictionary manipulation and set operations in Python.","solution":"def find_social_hubs(friend_network): Finds the social hubs in the given friend network. Parameters: friend_network (dict): A dictionary where keys are people\'s names and values are sets of names representing their immediate friends. Returns: list: A list of names who are identified as social hubs. if not friend_network: return [] max_friends = 0 social_hubs = [] for person, friends in friend_network.items(): num_friends = len(friends) if num_friends > max_friends: max_friends = num_friends social_hubs = [person] elif num_friends == max_friends: social_hubs.append(person) return social_hubs"},{"question":"You are required to implement a function called `count_word_occurrences(file_path: str, word: str) -> int`. This function will read a text file and count the number of times a specified word appears in that file. Your implementation should: 1. Accept a file path as a string and a target word as a string. 2. Open and read the contents of the text file specified by the file path. 3. Normalize the text to ensure that the word count is case-insensitive. Hence, both the text from the file and the target word should be compared in lower case. 4. Account for punctuation and whitespace separation when identifying word boundaries. 5. Return the count of occurrences of the target word in the file. Ensure you handle exceptions such as the file not being found, and include appropriate error messages. Your function should read the entire content of the file at once. ```python def count_word_occurrences(file_path: str, word: str) -> int: try: with open(file_path, \'r\') as file: text = file.read().lower() word = word.lower() # Removing punctuation translator = str.maketrans(\'\', \'\', string.punctuation) cleaned_text = text.translate(translator) words = cleaned_text.split() return words.count(word) except FileNotFoundError: print(f\\"File not found: {file_path}\\") return 0 ```","solution":"import string def count_word_occurrences(file_path: str, word: str) -> int: try: with open(file_path, \'r\') as file: text = file.read().lower() word = word.lower() # Removing punctuation translator = str.maketrans(\'\', \'\', string.punctuation) cleaned_text = text.translate(translator) words = cleaned_text.split() return words.count(word) except FileNotFoundError: print(f\\"File not found: {file_path}\\") return 0"},{"question":"You are developing a web application that processes user-uploaded text files containing data logs. To ensure data integrity, you need to write a function that reads these files, validates the content, and performs some calculations on the valid data. # Function Specification Write a function named `process_log_file` that accepts the following parameter: - `filepath`: A string representing the path to the text file containing the data logs. The log file is structured with multiple lines, where each line contains comma-separated values representing a timestamp and a numeric value. The function should: 1. Read the file and parse its contents. 2. Validate that each line adheres to the specific format: a timestamp in the format `YYYY-MM-DD HH:MM:SS`, followed by a single numeric value. 3. If a line is invalid, it should be ignored. 4. Compute the sum, mean, and count of the numeric values from the valid lines. 5. Return a dictionary with `sum`, `mean`, and `count` as keys. # Format The function should not use any external libraries except for standard Python libraries like `datetime` and `os`. # Example Consider the following content in a file located at `path/to/logfile.txt`: ``` 2023-03-15 12:34:56, 23.5 2023-03-15 12:35:56, 19.7 invalid_line, 12.4 2023-03-15 12:36:56, 31.2 2023/03/15 12:36:56, 45.1 2023-03-15 12:37:56, invalid ``` Calling `process_log_file(\'path/to/logfile.txt\')` should return: ```python { \'sum\': 74.4, \'mean\': 24.8, \'count\': 3 } ``` # Requirements: - Your implementation must handle file reading and line parsing. - Your implementation must validate the timestamp and numeric value format. - Your implementation must compute and return the correct statistics for valid lines only.","solution":"import re from datetime import datetime def process_log_file(filepath): Processes a log file and calculates the sum, mean, and count of valid numeric values. Parameters: filepath (str): The path to the log file. Returns: dict: A dictionary containing the sum, mean, and count of valid numeric values. timestamp_pattern = re.compile(r\\"d{4}-d{2}-d{2} d{2}:d{2}:d{2}\\") sum_values = 0 count = 0 valid_values = [] with open(filepath, \'r\') as file: for line in file: parts = line.strip().split(\', \') if len(parts) != 2: continue timestamp, value = parts if not timestamp_pattern.fullmatch(timestamp): continue try: value = float(value) valid_values.append(value) sum_values += value count += 1 except ValueError: continue mean_value = sum_values / count if count > 0 else 0 return { \'sum\': sum_values, \'mean\': mean_value, \'count\': count }"},{"question":"You are developing a library management system that stores book information in a JSON file named \\"library_books.json\\". Your task is to write a function named `update_book_details()` that automates the process of updating existing book records within this file. The JSON file structure is as follows: ```json { \\"books\\": { \\"isbn_12345\\": { \\"title\\": \\"Introduction to Programming\\", \\"author\\": \\"John Doe\\", \\"available_copies\\": 3 }, \\"isbn_67890\\": { \\"title\\": \\"Advanced Algorithms\\", \\"author\\": \\"Jane Smith\\", \\"available_copies\\": 5 } } } ``` The `update_book_details()` function should do the following: 1. Prompt the user to enter the ISBN of the book to be updated. 2. Read the JSON file to fetch existing book data. 3. If the book exists, prompt the user to update the title, author, and available copies. Validate that the available copies is a non-negative integer. 4. Allow the user to leave certain fields unchanged by pressing Enter without inputting any data. 5. Write the updated data back to the JSON file using the `json.dump` function. Explicitly demonstrate the use of `json.load` to read from the file and `json.dump` to write back to the file. Ensure that the JSON file maintains proper indentation for readability upon writing.","solution":"import json def update_book_details(): with open(\'library_books.json\', \'r\') as file: library_data = json.load(file) isbn_to_update = input(\'Enter the ISBN of the book to update: \').strip() if isbn_to_update in library_data[\'books\']: book_details = library_data[\'books\'][isbn_to_update] print(f\\"Current Title: {book_details[\'title\']}\\") print(f\\"Current Author: {book_details[\'author\']}\\") print(f\\"Current Available Copies: {book_details[\'available_copies\']}\\") new_title = input(\'Enter new title (press Enter to leave unchanged): \').strip() new_author = input(\'Enter new author (press Enter to leave unchanged): \').strip() new_available_copies = input(\'Enter new available copies (press Enter to leave unchanged): \').strip() if new_title: book_details[\'title\'] = new_title if new_author: book_details[\'author\'] = new_author if new_available_copies: if new_available_copies.isdigit() and int(new_available_copies) >= 0: book_details[\'available_copies\'] = int(new_available_copies) else: print(\'Available copies must be a non-negative integer. Keeping the old value.\') with open(\'library_books.json\', \'w\') as file: json.dump(library_data, file, indent=4) print(\'Book details updated successfully.\') else: print(\'Book with given ISBN not found.\')"},{"question":"You are given a task to implement a function that performs matrix multiplication without using any external libraries. Design the function `matrix_multiply(A, B)` to compute the product of two matrices A and B, where: 1. Matrix A is of size m x n. 2. Matrix B is of size n x p. The resultant matrix C will be of size m x p. Your function should take two 2-dimensional lists (A and B) as input, and return a new 2-dimensional list C representing the matrix product. **Requirements:** - Ensure that the number of columns in A is equal to the number of rows in B. - Implement the matrix multiplication algorithm from scratch; do not use any helper functions or libraries that perform matrix multiplication. - Handle edge cases where matrices might contain zeros. **Example:** ```python def matrix_multiply(A, B): # Your implementation here # Example Input A = [ [1, 2, 3], [4, 5, 6] ] B = [ [7, 8], [9, 10], [11, 12] ] # Expected Output # [ # [58, 64], # [139, 154] # ] result = matrix_multiply(A, B) print(result) ```","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B and returns the resulting matrix. :param A: List[List[int]], first matrix of size m x n :param B: List[List[int]], second matrix of size n x p :return: List[List[int]], resulting matrix of size m x p m = len(A) n = len(A[0]) p = len(B[0]) # Initialize the result matrix with zeros C = [[0 for _ in range(p)] for _ in range(m)] # Perform matrix multiplication for i in range(m): for j in range(p): for k in range(n): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"Simulate a series of monthly sales data for a specified number of months, and compute the total sales and monthly average. The function should also normalize the sales data as z-scores and return both the original and normalized data as pandas DataFrames. The function should raise an exception for an invalid number of months (less than 1). The function should output with: - pd.DataFrame: A DataFrame containing the original sales data with one column \'Sales\'. - pd.DataFrame: A DataFrame containing the normalized sales data with one column \'Normalized_Sales\'. You should write self-contained code starting with: ``` import pandas as pd import random from scipy import stats def simulate_sales_data(months, min_sales, max_sales, seed=None): ```","solution":"import pandas as pd import random from scipy import stats def simulate_sales_data(months, min_sales, max_sales, seed=None): Simulate monthly sales data for a specified number of months and compute the total sales and monthly average. Normalize the sales data as z-scores and return both the original and normalized data as pandas DataFrames. Parameters: months (int): Number of months to simulate sales for (must be >= 1). min_sales (int/float): Minimum possible sales value. max_sales (int/float): Maximum possible sales value. seed (int, optional): Random seed for reproducibility. Returns: tuple: (original_sales_df, normalized_sales_df) where original_sales_df is a DataFrame containing the original sales data and normalized_sales_df is a DataFrame containing the normalized sales data. Raises: ValueError: If months is less than 1. if months < 1: raise ValueError(\\"Number of months must be at least 1.\\") if seed is not None: random.seed(seed) sales_data = [random.uniform(min_sales, max_sales) for _ in range(months)] original_sales_df = pd.DataFrame(sales_data, columns=[\'Sales\']) normalized_sales = stats.zscore(sales_data) normalized_sales_df = pd.DataFrame(normalized_sales, columns=[\'Normalized_Sales\']) return original_sales_df, normalized_sales_df"},{"question":"You are required to write a function in Python that takes a list of integers and a target integer, and generates all pairs of numbers from the list that sum up to the target. Each pair should be returned as a tuple containing the two numbers that add up to the target. The pairs should not contain the same element twice (i.e., (4, 4) is not allowed unless two separate 4s exist in the list). The solution should not include duplicate pairs (e.g., both (2, 3) and (3, 2)). The function name should be `find_pairs` and should strictly use the set data structure to maintain a balance between efficiency and comprehension. # Input: - `lst`: A list of integers. - `target`: An integer representing the target sum. # Output: - A list of tuples, where each tuple contains a pair of integers from `lst` that add up to `target`. # Example: ```python def find_pairs(lst, target): result = [] seen = set() for number in lst: complement = target - number if complement in seen: result.append((complement, number)) seen.add(number) return result # Test case lst = [2, 4, 3, 5, 7, 8, 1] target = 7 pairs = find_pairs(lst, target) print(pairs) # Output: [(5, 2), (4, 3)] ``` # Constraints: - The solution should not include duplicate pairs. - Elements in each pair should be distinct and unique pairs should be counted only once.","solution":"def find_pairs(lst, target): Return list of tuples with pairs of integers that sum up to the target. result = set() seen = set() for number in lst: complement = target - number if complement in seen: result.add((min(number, complement), max(number, complement))) seen.add(number) return list(result)"},{"question":"**Task:** Write a function `find_common_elements(arr1, arr2)` that takes two lists of integers `arr1` and `arr2` and returns a sorted list of the common elements between the two lists. The function should filter out any duplicates in the resulting list of common elements. Use the `set` data structure to aid in finding the common elements and ensure that the final list is sorted before returning. **Instructions:** 1. **Convert Lists to Sets:** Convert both input lists `arr1` and `arr2` to sets. 2. **Find Common Elements:** Find the intersection of these two sets. 3. **Remove Duplicates:** Ensure that each element in the resulting list appears only once (automatically handled by sets). 4. **Sort the Result:** Convert the resulting set back to a sorted list. 5. **Return the Sorted List:** Return the sorted list of common elements. **You are required to use the `set` and `sorted` functions in your solution.** **Function Signature:** ```python def find_common_elements(arr1, arr2): pass ``` **Example Usage:** ```python # Sample Lists arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9] arr2 = [5, 7, 2, 6, 1, 7, 5, 10, 11] result = find_common_elements(arr1, arr2) print(result) ``` **Expected Output:** ``` [1, 2, 5, 6, 7] ```","solution":"def find_common_elements(arr1, arr2): Returns a sorted list of common elements between two lists of integers, with duplicates removed. # Convert both lists to sets to remove duplicates and find the intersection set1 = set(arr1) set2 = set(arr2) # Find common elements between two sets common_elements = set1.intersection(set2) # Convert the resulting set back to a sorted list sorted_common_elements = sorted(common_elements) # Return the sorted list of common elements return sorted_common_elements"},{"question":"Create a function `analyze_customer_purchases(df)` that examines a dataset of customer purchase records to identify purchasing trends. The input is a DataFrame `df` with the following columns: \'Customer ID\', \'Purchase Date\', \'Purchase Amount\'. You need to perform the following tasks: 1. **Determine the total number of unique customers.** 2. **Find the month with the highest total purchase amount.** 3. **Identify the customer with the highest total purchase amount.** Additionally, measure the time taken to complete each task and print it. **Function Signature:** ```python def analyze_customer_purchases(df: pd.DataFrame) -> tuple: ``` **Requirements:** 1. Convert the \'Purchase Date\' column to datetime objects. 2. Calculate the total number of unique customers using Pandas\' `nunique` method on the \'Customer ID\' column. 3. Extract the month and year from the \'Purchase Date\' column and use it to group the data. Determine the month with the highest total purchase amount. 4. Group the data by \'Customer ID\' and sum the \'Purchase Amount\' for each customer to find the customer with the highest total purchase. 5. Measure the execution time of each task using `time.time()` and print it. 6. Return a tuple containing the total number of unique customers, the month with the highest total purchase amount, and the customer with the highest total purchase amount. **Return:** The function should return a tuple `(total_customers, highest_purchase_month, top_customer)`. **Example Usage:** ```python import pandas as pd # Sample Data data = { \'Customer ID\': [1, 2, 1, 3, 2], \'Purchase Date\': [\'2021-01-10\', \'2021-02-15\', \'2021-01-20\', \'2021-03-10\', \'2021-02-20\'], \'Purchase Amount\': [100, 200, 150, 300, 250] } # Create DataFrame df = pd.DataFrame(data) # Function Call result = analyze_customer_purchases(df) print(result) # Expected output: (3, (\'2021-02\', 450), (2, 450)) ``` Use the following library APIs: - `pandas.to_datetime` - `pandas.DataFrame.nunique` - `pandas.DataFrame.groupby` - `time.time`","solution":"import pandas as pd import time def analyze_customer_purchases(df: pd.DataFrame) -> tuple: # Convert \'Purchase Date\' to datetime start_time = time.time() df[\'Purchase Date\'] = pd.to_datetime(df[\'Purchase Date\']) time_conversion = time.time() - start_time print(f\\"Time to convert dates: {time_conversion:.5f} seconds\\") # Calculate total number of unique customers start_time = time.time() total_customers = df[\'Customer ID\'].nunique() time_unique_customers = time.time() - start_time print(f\\"Time to compute unique customers: {time_unique_customers:.5f} seconds\\") # Find the month with the highest total purchase amount start_time = time.time() df[\'Year-Month\'] = df[\'Purchase Date\'].dt.to_period(\'M\') month_purchase = df.groupby(\'Year-Month\')[\'Purchase Amount\'].sum() highest_purchase_month = month_purchase.idxmax().strftime(\'%Y-%m\'), month_purchase.max() time_highest_month = time.time() - start_time print(f\\"Time to find highest purchase month: {time_highest_month:.5f} seconds\\") # Identify the customer with the highest total purchase amount start_time = time.time() customer_purchase = df.groupby(\'Customer ID\')[\'Purchase Amount\'].sum() top_customer = customer_purchase.idxmax(), customer_purchase.max() time_top_customer = time.time() - start_time print(f\\"Time to find top customer: {time_top_customer:.5f} seconds\\") return total_customers, highest_purchase_month, top_customer"},{"question":"Write a function that takes a list of dictionaries representing people, and a list of hobbies. Each person in the list of dictionaries has a \'name\' key and a \'hobbies\' key, which is a list of hobbies that person enjoys. The function should return a new dictionary where the keys are the names of hobbies and the values are lists of names of people who enjoy those hobbies. The function should handle cases where the input list of hobbies includes hobbies that no one enjoys. You should write self-contained code starting with: ``` def hobbies_to_people(people_list, hobbies_list): ``` Example: ``` people_list = [ {\'name\': \'Alice\', \'hobbies\': [\'reading\', \'cycling\']}, {\'name\': \'Bob\', \'hobbies\': [\'reading\', \'golf\']}, {\'name\': \'Charlie\', \'hobbies\': [\'swimming\']} ] hobbies_list = [\'reading\', \'cycling\', \'swimming\', \'golf\', \'running\'] Output: { \'reading\': [\'Alice\', \'Bob\'], \'cycling\': [\'Alice\'], \'swimming\': [\'Charlie\'], \'golf\': [\'Bob\'], \'running\': [] } ```","solution":"def hobbies_to_people(people_list, hobbies_list): Takes a list of dictionaries representing people and a list of hobbies. Returns a dictionary where the keys are the names of hobbies and the values are lists of names of people who enjoy those hobbies. # Initialize the result dictionary with empty lists hobby_dict = {hobby: [] for hobby in hobbies_list} # Iterate over each person to populate the hobby_dict for person in people_list: name = person[\'name\'] for hobby in person[\'hobbies\']: if hobby in hobby_dict: hobby_dict[hobby].append(name) return hobby_dict"},{"question":"# Introduction You are tasked with creating a Python function to calculate the sum of all even numbers in a given list of integers. The function should return the sum as the output. # Objectives 1. **Function Name:** `sum_of_evens` 2. **Parameters:** The function should accept a single parameter: - `numbers` (list): A list of integers. 3. **Output:** The function will return a single integer - the sum of all even numbers in the given list. # Requirements - Use a loop or a list comprehension to iterate through the list of numbers. - Check if each number is even using the modulus operator (`%`). - Sum the even numbers and return the result. # Details to Consider - If the list is empty, the function should return `0`. - Ensure the function handles both positive and negative integers. - The function should be efficient, avoiding unnecessary computations. # Example Suppose the list is provided as `[1, 2, 3, 4, 5]`: - The even numbers in the list are `2` and `4`. - The function should return `6`, which is the sum of `2` and `4`. Another example with the list `[10, 15, -2, -3, 0]`: - The even numbers in the list are `10`, `-2`, and `0`. - The function should return `8`, which is the sum of `10`, `-2`, and `0`. # Signature ```python def sum_of_evens(numbers): pass ```","solution":"def sum_of_evens(numbers): Returns the sum of all even numbers in a given list of integers. :param numbers: List of integers :return: Sum of all even numbers return sum(number for number in numbers if number % 2 == 0)"},{"question":"In this problem, you are required to implement a function that calculates the number of distinct paths one can take to traverse a grid from the top-left corner to the bottom-right corner. The robot can only move down or right at any point. Write a function named `unique_paths` that takes two parameters: - `m`: int — The number of rows in the grid. - `n`: int — The number of columns in the grid. The function should return an integer representing the number of unique paths from the top-left corner (0,0) to the bottom-right corner (m-1, n-1). # Constraints: - The dimensions of the grid (m and n) will be positive integers not greater than 100. - The grid dimensions may be such that either or both `m` or `n` are 1. # Example: ```python print(unique_paths(3, 7)) # Output: 28 print(unique_paths(3, 2)) # Output: 3 ``` # Concept: Use dynamic programming to solve the problem. Create a 2D array `dp` where `dp[i][j]` represents the number of paths to reach cell `(i, j)`. Initialize the first row and the first column to 1 because there\'s only one way to reach cells in the first row and column. Subsequently, populate the array such that each cell contains the sum of the paths from the cell above and the cell to the left. # Implementation: ```python def unique_paths(m, n): # Create a 2D array with m rows and n columns filled with 1s dp = [[1] * n for _ in range(m)] # Iterate over each cell starting from (1, 1) for i in range(1, m): for j in range(1, n): # The number of ways to reach dp[i][j] is the sum of ways to reach # the cell above it and the cell to the left of it dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right cell contains the number of unique paths return dp[m-1][n-1] ``` Implement the function and test it with various inputs to ensure that it returns the correct number of unique paths for different grid sizes.","solution":"def unique_paths(m, n): Calculate the number of distinct paths from top-left to bottom-right of a grid. :param m: Number of rows :param n: Number of columns :return: Number of unique paths (int) # Create a 2D array with m rows and n columns filled with 1s dp = [[1] * n for _ in range(m)] # Iterate over each cell starting from (1, 1) for i in range(1, m): for j in range(1, n): # The number of ways to reach dp[i][j] is the sum of ways to reach # the cell above it and the cell to the left of it dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right cell contains the number of unique paths return dp[m-1][n-1]"},{"question":"You are tasked with analyzing customer order data for an online store. The data is stored in a CSV file containing details of each order. Your task is to write a function `filter_orders` that loads the data from the file and filters it based on the specified order status and the customer\'s country. This function should use the Pandas library to read and manipulate the data. # Function Signature ```python def filter_orders(order_status: str, country: str) -> pd.DataFrame: ``` # Arguments - `order_status` (str): The status of the orders to filter by. This should be one of \\"Pending\\", \\"Shipped\\", \\"Cancelled\\", \\"Completed\\", or \\"all\\" to apply no status filter. - `country` (str): The name of the country to filter by. This should be a valid country name present in the order data or \\"all\\" to apply no country filter. # Returns - `df` (pd.DataFrame): A Pandas DataFrame containing the filtered orders based on the specified status and country. # Data Structure The CSV file (e.g., `orders.csv`) contains order records with at least the following columns: - `Order ID`: A unique identifier for the order. - `Customer ID`: A unique identifier for the customer. - `Order Status`: The current status of the order (e.g., \\"Pending\\", \\"Shipped\\"). - `Country`: The country of the customer. - Other columns (not important for this function) are also present. # Requirements 1. Use the `pandas.read_csv` function to read the orders data file. 2. Filter the DataFrame based on the given order status and country. # Example of Usage ```python df = filter_orders(order_status=\'Shipped\', country=\'United States\') print(df.head()) ``` Constraints - You can assume that the CSV file is correctly formatted and exists in the working directory. - The filtering for `order_status` and `country` should ignore case (e.g., \\"shipped\\" or \\"SHIPPED\\" should work the same as \\"Shipped\\").","solution":"import pandas as pd def filter_orders(order_status: str, country: str) -> pd.DataFrame: Filters the orders based on the specified status and country. Parameters: order_status (str): The status of the orders to filter by. Options: \\"Pending\\", \\"Shipped\\", \\"Cancelled\\", \\"Completed\\", or \\"all\\". country (str): The name of the country to filter by or \\"all\\". Returns: pd.DataFrame: A DataFrame containing the filtered orders. # Read the orders data from CSV file orders_df = pd.read_csv(\'orders.csv\') # Normalize the order status and country for comparison order_status = order_status.lower() country = country.lower() # Apply order status filter if not \'all\' if order_status != \'all\': orders_df = orders_df[orders_df[\'Order Status\'].str.lower() == order_status] # Apply country filter if not \'all\' if country != \'all\': orders_df = orders_df[orders_df[\'Country\'].str.lower() == country] return orders_df"},{"question":"Create a function that generates a DataFrame simulating sales data. The DataFrame should have columns \'Month\', \'Product\', \'Sales\', and \'Profit\'. Generate random data for \'Sales\' and \'Profit\' with values ranging between 1000 and 5000 and between 100 and 1000 respectively. Ensure \'Month\' contains the months from January to December and \'Product\' contains a fixed set of product names [\'A\', \'B\', \'C\', \'D\']. Calculate the total sales and total profit for each product and return these totals in a new DataFrame. Also, create a bar plot to show the total sales for each product. The function should output: tuple: A tuple containing: DataFrame: A pandas DataFrame with the computed total sales and total profit for each product. Axes: A matplotlib Axes object displaying a bar plot of total sales per product. You should write self-contained code starting with: ```python import pandas as pd import numpy as np import matplotlib.pyplot as plt def task_func(): ```","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def task_func(): data = { \'Month\': np.tile([ \'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\' ], 4), # Repeat months for each product \'Product\': np.repeat([\'A\', \'B\', \'C\', \'D\'], 12), # Repeat each product for all months \'Sales\': np.random.randint(1000, 5001, size=48), # Random sales data \'Profit\': np.random.randint(100, 1001, size=48) # Random profit data } df = pd.DataFrame(data) # Group by product and sum sales and profit totals = df.groupby(\'Product\')[[\'Sales\', \'Profit\']].sum().reset_index() # Plotting total sales per product ax = totals.plot(kind=\'bar\', x=\'Product\', y=\'Sales\', legend=False) ax.set_title(\'Total Sales per Product\') ax.set_ylabel(\'Total Sales\') plt.xticks(rotation=0) return totals, ax"},{"question":"In a data analysis pipeline, it is often required to manipulate and analyze datasets in the form of lists of dictionaries. Each dictionary represents a record with various attributes. A common task is to filter these records based on specific criteria. The goal of this problem is to create a function `filter_records` that takes a list of dictionaries and filters the records based on the provided criteria. The criteria are specified as key-value pairs, where each record must match all the specified key-value pairs to be included in the result. # Function Signature ```python def filter_records(records: list, criteria: dict) -> list: Filters a list of dictionaries based on the specified criteria. Parameters: - records (list): A list of dictionaries representing the records. - criteria (dict): A dictionary of key-value pairs to filter the records by. Returns: - list: A list of dictionaries that match the specified criteria. ``` # Requirements - The input `records` is a list of dictionaries. - The `criteria` parameter is a dictionary where keys are the attributes to filter by, and values are the values to match. - The function should return a new list of dictionaries that only includes records matching all the specified criteria. - If no criteria are provided, all records should be included in the result. - If no records match the criteria, an empty list should be returned. Example usage: ```python records = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"city\\": \\"Los Angeles\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"city\\": \\"Chicago\\"}, {\\"name\\": \\"Dave\\", \\"age\\": 30, \\"city\\": \\"New York\\"} ] criteria = {\\"age\\": 30, \\"city\\": \\"New York\\"} filtered_records = filter_records(records, criteria) print(filtered_records) # Expected output: [{\\"name\\": \\"Alice\\", \\"age\\": 30, \\"city\\": \\"New York\\"}, {\\"name\\": \\"Dave\\", \\"age\\": 30, \\"city\\": \\"New York\\"}] ``` # Constraints - Assume that the input `records` list is always a valid list of dictionaries. - The `criteria` dictionary keys will always be valid keys present in the dictionaries in `records`. - The values in the `criteria` dictionary will be of the same type as the corresponding values in the dictionaries in `records`.","solution":"def filter_records(records: list, criteria: dict) -> list: Filters a list of dictionaries based on the specified criteria. Parameters: - records (list): A list of dictionaries representing the records. - criteria (dict): A dictionary of key-value pairs to filter the records by. Returns: - list: A list of dictionaries that match the specified criteria. if not criteria: return records filtered_records = [] for record in records: match = all(record.get(key) == value for key, value in criteria.items()) if match: filtered_records.append(record) return filtered_records"},{"question":"Write a function that simulates rolling a specified number of six-sided dice and returns the total sum of the face values. Create a function named `roll_dice` that accepts one argument: - `num_dice` (an integer representing the number of dice to roll) The function should: 1. Check if `num_dice` is a positive integer. If not, raise a `ValueError` with an appropriate message. 2. Use the `random.randint` method from the `random` module to simulate rolling each die. Each die roll should be a random integer between 1 and 6 (inclusive). 3. Sum the results of all the dice rolls and return this sum. # Example Usage: ```python import random def roll_dice(num_dice): if not isinstance(num_dice, int) or num_dice <= 0: raise ValueError(\\"num_dice must be a positive integer\\") total = sum(random.randint(1, 6) for _ in range(num_dice)) return total # Example call print(roll_dice(5)) # This would print the sum of rolling five six-sided dice ``` This function is useful for games of chance, probability simulations, or any scenario where you need to simulate the roll of multiple dice.","solution":"import random def roll_dice(num_dice): Simulates rolling a specified number of six-sided dice and returns the total sum of the face values. Parameters: num_dice (int): The number of dice to roll. Returns: int: The total sum of the face values of the rolled dice. Raises: ValueError: If num_dice is not a positive integer. if not isinstance(num_dice, int) or num_dice <= 0: raise ValueError(\\"num_dice must be a positive integer\\") total = sum(random.randint(1, 6) for _ in range(num_dice)) return total"},{"question":"You need to implement a function called `analyze_stock_prices`. The goal of this function is to evaluate stock prices over a given number of days and return key statistics about the stock\'s performance. **Specifications**: 1. Your function should take in a list of integers representing the stock prices over consecutive days. 2. The function should compute and return the following: - The maximum profit that could have been achieved by buying on one day and selling on another later day. - The day to buy (index) to achieve this maximum profit. - The day to sell (index) to achieve this maximum profit. 3. If no profit can be made, the function should return `(0, None, None)` indicating that there was no feasible opportunity for profit. **Function Definition**: ```python def analyze_stock_prices(prices): # Your code here ``` **Example**: ```python prices = [7, 1, 5, 3, 6, 4] print(analyze_stock_prices(prices)) # Output: (5, 1, 4) -> Buy on day 1 (price 1) and sell on day 4 (price 6) for a max profit of 5 prices = [7, 6, 4, 3, 1] print(analyze_stock_prices(prices)) # Output: (0, None, None) -> No profit can be made ``` **Hints**: - Consider the problem as finding the maximum difference between two elements where the larger element comes after the smaller element. - Loop through the list to keep track of the minimum price encountered so far and calculate potential profits for each subsequent price.","solution":"def analyze_stock_prices(prices): if not prices or len(prices) < 2: return (0, None, None) min_price = prices[0] min_index = 0 max_profit = 0 buy_day = None sell_day = None for i in range(1, len(prices)): if prices[i] < min_price: min_price = prices[i] min_index = i current_profit = prices[i] - min_price if current_profit > max_profit: max_profit = current_profit buy_day = min_index sell_day = i if max_profit == 0: return (0, None, None) return (max_profit, buy_day, sell_day)"},{"question":"You are given a string and you need to determine whether it is a palindrome. A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Your task is to write a function `is_palindrome(s)` that takes a string `s` and returns `True` if the string is a palindrome and `False` otherwise. To solve this problem, you must use the `filter` and `str.isalnum` functions. The `filter` function allows you to construct an iterator from elements of an iterable for which a function returns true, while the `str.isalnum` method checks whether all the characters in the string are alphanumeric. # Function Signature ```python def is_palindrome(s): pass ``` # Parameters: - `s` (str): The string to be checked. # Returns: - bool: Returns `True` if the string is a palindrome, `False` otherwise. # Example: ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") ``` Output: ``` True ``` # Constraints: - The input string `s` will have at least one character. - The function should ignore spaces, punctuation, and capitalization in determining whether the string is a palindrome. Make sure you explicitly use the `filter` and `str.isalnum` functions as part of your solution.","solution":"def is_palindrome(s): Determines whether the input string s is a palindrome, ignoring spaces, punctuation, and capitalization. :param s: The string to be checked. :return: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase filtered_chars = filter(str.isalnum, s) cleaned_str = \'\'.join(filtered_chars).lower() # Check if the cleaned string is a palindrome return cleaned_str == cleaned_str[::-1]"},{"question":"** Create a function that implements the K-Nearest Neighbors (KNN) algorithm. The function should classify a given test example based on the majority label of its k nearest neighbors from the training dataset. The function can use the Euclidean distance to determine proximity. # Function Signature ```python def knn_classify(x_train: np.ndarray, y_train: np.ndarray, x_test: np.ndarray, k: int) -> np.ndarray: ``` # Parameters - `x_train` (np.ndarray): A 2D array of shape (m, n) representing the feature dataset for training, where `m` is the number of training examples and `n` is the number of features. - `y_train` (np.ndarray): A 1D array of shape (m,) representing the labels corresponding to the feature dataset, where each label is an integer. - `x_test` (np.ndarray): A 2D array of shape (p, n) representing the feature dataset for testing, where `p` is the number of testing examples. - `k` (int): The number of nearest neighbors to consider for classification. # Returns - `y_pred` (np.ndarray): A 1D array of shape (p,) representing the predicted labels for the test examples. # Helper Functions To implement the KNN algorithm, you will need a helper function to compute the Euclidean distance: ```python def euclidean_distance(a: np.ndarray, b: np.ndarray) -> float: return np.sqrt(np.sum((a - b) ** 2)) ``` Inside `knn_classify`, for each test example, find the k nearest neighbors from the training set, and assign the majority label from these neighbors. You may use Python\'s `collections.Counter` to determine the most common label. # Example Usage ```python x_train = np.array([[1, 2], [2, 3], [3, 4], [6, 8], [7, 8]]) y_train = np.array([0, 0, 0, 1, 1]) x_test = np.array([[2, 2], [7, 7]]) k = 3 y_pred = knn_classify(x_train, y_train, x_test, k) print(\\"Predicted labels:\\", y_pred) # Output: Predicted labels: [0 1] ``` Implement the `knn_classify` function to classify the test examples based on the majority label of their k nearest neighbors from the training dataset. **","solution":"import numpy as np from collections import Counter def euclidean_distance(a: np.ndarray, b: np.ndarray) -> float: Computes the Euclidean distance between two points a and b. return np.sqrt(np.sum((a - b) ** 2)) def knn_classify(x_train: np.ndarray, y_train: np.ndarray, x_test: np.ndarray, k: int) -> np.ndarray: Classifies each test example in x_test based on the majority label of its k nearest neighbors from the training dataset. Args: - x_train (np.ndarray): Training data, shape (m, n) - y_train (np.ndarray): Training labels, shape (m,) - x_test (np.ndarray): Test data, shape (p, n) - k (int): Number of nearest neighbors to consider Returns: - np.ndarray: Predicted labels for the test data, shape (p,) y_pred = [] for test_pt in x_test: # Compute distances from test_pt to all points in x_train distances = np.array([euclidean_distance(test_pt, train_pt) for train_pt in x_train]) # Get the indices of the k nearest neighbors k_nearest_indices = np.argsort(distances)[:k] # Get the labels of the k nearest neighbors k_nearest_labels = y_train[k_nearest_indices] # Determine the majority label most_common = Counter(k_nearest_labels).most_common(1) # Append the most common label to y_pred y_pred.append(most_common[0][0]) return np.array(y_pred)"},{"question":"You are implementing a program that will help manage the reservations for a small theater. The theater has a fixed number of seats, arranged in a grid with rows and columns. Each seat can be identified by its row and column indices. You need to create a function called `reserve_seats` that will take in the current state of the theater\'s seating arrangement and a list of reservation requests, and return the updated seating arrangement after processing all the requests. Each request can either be to reserve or cancel one or more seats. Here is the detailed structure for the function, including input arguments and their types: - `theater`: a 2D list representing the current state of the theater\'s seating arrangement, where each element is either `\\"available\\"` or `\\"reserved\\"`. - `requests`: a list of dictionaries, where each dictionary represents a reservation request and contains the following keys: - `\\"action\\"`: a string that can be either `\\"reserve\\"` or `\\"cancel\\"`. - `\\"seats\\"`: a list of tuples, each tuple containing two integers that represent the row and column indices of a seat. The function prototype should be: ```python def reserve_seats(theater, requests): # Your implementation here pass ``` **Requirements:** 1. Process each request in the order they are given. 2. For a reservation request, change the state of the specified seats to `\\"reserved\\"`. 3. For a cancellation request, change the state of the specified seats to `\\"available\\"`. 4. Ensure that you do not attempt to reserve a seat that is already reserved or cancel a seat that is already available. **Example:** ```python theater = [ [\\"available\\", \\"available\\", \\"reserved\\"], [\\"reserved\\", \\"available\\", \\"available\\"], [\\"available\\", \\"reserved\\", \\"available\\"] ] requests = [ {\\"action\\": \\"reserve\\", \\"seats\\": [(0, 1), (2, 2)]}, {\\"action\\": \\"cancel\\", \\"seats\\": [(1, 0)]}, {\\"action\\": \\"reserve\\", \\"seats\\": [(1, 1), (2, 0)]} ] # Expected output updated_theater = [ [\\"available\\", \\"reserved\\", \\"reserved\\"], [\\"available\\", \\"reserved\\", \\"available\\"], [\\"reserved\\", \\"reserved\\", \\"reserved\\"] ] ``` In this example, the first request reserves the seats at (0, 1) and (2, 2). The second request cancels the reservation for the seat at (1, 0). The third request reserves the seats at (1, 1) and (2, 0).","solution":"def reserve_seats(theater, requests): Updates the seating arrangement of the theater based on the given requests. :param theater: 2D list representing the current state of the theater\'s seating arrangement. :param requests: List of dictionaries representing reservation/cancellation requests. :return: 2D list representing the updated state of the theater\'s seating arrangement. for req in requests: action = req[\'action\'] seats = req[\'seats\'] for seat in seats: row, col = seat if action == \'reserve\' and theater[row][col] == \'available\': theater[row][col] = \'reserved\' elif action == \'cancel\' and theater[row][col] == \'reserved\': theater[row][col] = \'available\' return theater"},{"question":"You are tasked with writing a function that simulates a basic ATM transaction. The function should be named `atm_transaction` and should accept three arguments: 1. `balance` (float): The current balance in the user\'s account. 2. `operation` (str): The type of operation to perform, which can either be \\"deposit\\" or \\"withdraw\\". 3. `amount` (float): The amount of money to deposit or withdraw from the balance. The function should: - Check if the operation is valid (either \\"deposit\\" or \\"withdraw\\"). - For a deposit operation, add the amount to the balance. - For a withdraw operation, check if the balance is sufficient for the withdrawal amount. If sufficient, subtract the amount from the balance; if not, return an error message indicating insufficient funds. - Return the updated balance after the operation. Implement the function in Python with appropriate error handling for invalid operations and transactions. **Example Usage:** ```python new_balance = atm_transaction(1000.0, \\"withdraw\\", 200.0) print(new_balance) # Outputs 800.0 new_balance = atm_transaction(800.0, \\"deposit\\", 500.0) print(new_balance) # Outputs 1300.0 result = atm_transaction(1300.0, \\"withdraw\\", 1500.0) print(result) # Outputs \\"Error: Insufficient funds\\" result = atm_transaction(1300.0, \\"transfer\\", 100.0) print(result) # Outputs \\"Error: Invalid operation\\" ```","solution":"def atm_transaction(balance, operation, amount): Simulates a basic ATM transaction including deposit and withdrawal operations. Args: - balance (float): The current balance in the user\'s account. - operation (str): The type of operation to perform, which can either be \\"deposit\\" or \\"withdraw\\". - amount (float): The amount of money to deposit or withdraw from the balance. Returns: - float: The updated balance after the operation. - str: Error message in case of invalid operation or insufficient funds for withdrawal. if operation == \\"deposit\\": balance += amount return balance elif operation == \\"withdraw\\": if amount <= balance: balance -= amount return balance else: return \\"Error: Insufficient funds\\" else: return \\"Error: Invalid operation\\""},{"question":"You are given a string `s` that represents a mathematical expression containing integers and the plus and minus signs. Your task is to evaluate the expression and return the final result. Write a function named `evaluate_expression` that takes a string `s` as an input and returns an integer which is the result of the evaluation. **Function name**: `evaluate_expression` **Input**: A string `s` containing the mathematical expression (e.g., `\\"3+5-2\\"`). **Output**: An integer which is the result of the expression (e.g., `6` for the input `\\"3+5-2\\"`). **Example**: ```python s = \\"3+5-2\\" result = evaluate_expression(s) print(result) # Expected output: 6 ``` **Constraints**: - The input string will contain only integers and the `+` and `-` operators. - The input string will always be valid and have at least one integer. - There will be no whitespace in the input string. Implement the function to evaluate the arithmetic expression correctly.","solution":"def evaluate_expression(s): Evaluates a mathematical expression containing integers and the plus and minus signs. Parameters: s (str): The input string containing the mathematical expression. Returns: int: The result of evaluating the expression. current_num = 0 result = 0 sign = 1 # 1 for \'+\', -1 for \'-\' for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) else: result += sign * current_num current_num = 0 if char == \'+\': sign = 1 elif char == \'-\': sign = -1 result += sign * current_num # add the last number return result"},{"question":"Design and implement a `KMeans` clustering algorithm to segment a given dataset into `k` clusters. This problem leverages the `numpy` library for various operations related to numerical computations, statistical analysis, and matrix manipulations. This exercise will help you understand how to implement the core steps of the K-Means algorithm using `numpy` functions and operations effectively. K-Means is a widely used clustering algorithm in machine learning that partitions the dataset into k distinct, non-overlapping subsets, or clusters. Function Signature ```python import numpy as np def kmeans(X, k, num_iterations): Implements the K-Means clustering algorithm. Parameters: ---------- X : np.ndarray Input data matrix where each row is a data point. k : int Number of clusters. num_iterations : int Number of iterations to run the algorithm. Returns: ------- centroids : np.ndarray Final cluster centroids. labels : np.ndarray Cluster labels for each data point. pass ``` # Requirements: 1. **Initialization**: Randomly initialize `k` centroids by selecting `k` unique points from the dataset `X`. 2. **Assignment Step**: Assign each data point to the nearest centroid, forming `k` clusters. 3. **Update Step**: Recompute the centroids as the mean of all points assigned to each centroid. 4. **Iteration**: Repeat the Assignment and Update steps for the given number of iterations. 5. **Output**: Return the final centroids and the corresponding labels for each data point. # Use the Following `numpy` Functions: - `numpy.random.choice` - `numpy.linalg.norm` - `numpy.mean` # Explanation: Your solution will: - Initialize the centroids by randomly selecting `k` unique points from the dataset `X`. - In each iteration, assign each data point to the nearest centroid and update the centroids based on the mean of the assigned points. - Perform the assignment and update steps iteratively for a specified number of iterations. - Use the relevant `numpy` functions for distance computation and mean calculation. # Example Usage: ```python import numpy as np # Example dataset X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]]) # Clustering parameters k = 2 num_iterations = 100 centroids, labels = kmeans(X, k, num_iterations) print(\\"Centroids:n\\", centroids) print(\\"Labels:n\\", labels) ``` The `kmeans` function will cluster the input data into `k` clusters over `num_iterations` and return the final centroids and cluster assignments.","solution":"import numpy as np def kmeans(X, k, num_iterations): Implements the K-Means clustering algorithm. Parameters: ---------- X : np.ndarray Input data matrix where each row is a data point. k : int Number of clusters. num_iterations : int Number of iterations to run the algorithm. Returns: ------- centroids : np.ndarray Final cluster centroids. labels : np.ndarray Cluster labels for each data point. # Randomly initialize k centroids by selecting k unique points from X indices = np.random.choice(X.shape[0], k, replace=False) centroids = X[indices] for _ in range(num_iterations): # Step 1: Assignment step labels = np.array([np.argmin([np.linalg.norm(x - centroid) for centroid in centroids]) for x in X]) # Step 2: Update step new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)]) # If the centroids do not change, break if np.all(centroids == new_centroids): break centroids = new_centroids return centroids, labels"},{"question":"Write a Python function `find_and_replace(directory, find_str, replace_str)` that searches through all text files in a specified directory and its subdirectories, and replaces all occurrences of a given string with another string. The function should use the `os` and `re` libraries to accomplish this task. The function should follow these steps: 1. Use `os.walk` to recursively explore all subdirectories and files in the specified directory. 2. For each text file (with `.txt` extension), read its content and replace all occurrences of `find_str` with `replace_str`. 3. Write the modified content back to the file. Here\'s a breakdown of what the function needs to do: - Accept three arguments: the directory to search in, the string to find, and the string to replace it with. - Use `os.walk` to traverse the directory and its subdirectories. - For each text file, open the file, read its content, perform the string replacement, and save the modified content back to the file. **Example Input:** ``` Assume the folder structure is: example_directory/ file1.txt file2.txt folder/ file3.txt And the content of the files is: file1.txt: \\"Hello world\\" file2.txt: \\"Goodbye world\\" file3.txt: \\"Hello again\\" find_str: \\"world\\" replace_str: \\"universe\\" ``` **Example Output:** ``` The content of the files after replacement will be: file1.txt: \\"Hello universe\\" file2.txt: \\"Goodbye universe\\" file3.txt: \\"Hello again\\" (remains unchanged because \\"world\\" is not there) ``` Make sure to handle the case where the specified directory doesn\'t exist or there is no write permission gracefully by printing an appropriate error message. Also, ensure to handle files that cannot be read or written to and notify the user of any such incidents.","solution":"import os import re def find_and_replace(directory, find_str, replace_str): Searches through all text files in the specified directory and its subdirectories, and replaces all occurrences of find_str with replace_str. Args: directory (str): The directory to search in. find_str (str): The string to find. replace_str (str): The string to replace with. if not os.path.exists(directory): print(f\\"Directory {directory} does not exist.\\") return for root, dirs, files in os.walk(directory): for file in files: if file.endswith(\'.txt\'): file_path = os.path.join(root, file) try: with open(file_path, \'r\') as f: content = f.read() new_content = re.sub(find_str, replace_str, content) with open(file_path, \'w\') as f: f.write(new_content) print(f\\"Updated {file_path}\\") except (IOError, OSError) as e: print(f\\"Could not read/write to file {file_path}: {e}\\")"},{"question":"**Goal**: Implement a function `kmeans_clustering` using NumPy to perform K-means clustering on a given dataset. **Context**: You are given a dataset represented by a matrix ( X ). Your task is to implement the K-means clustering algorithm to partition the dataset into ( k ) clusters. The implementation should make use of the following NumPy functions: - `numpy.random.choice` - `numpy.zeros` - `numpy.sum` - `numpy.argmin` - `numpy.mean` **Function Signature**: ```python def kmeans_clustering(X: np.ndarray, k: int, max_iterations: int = 100) -> Tuple[np.ndarray, np.ndarray]: pass ``` **Parameters**: - `X`: A numpy array of shape ((m, n)) where (m) is the number of samples and (n) is the number of features. - `k`: An integer representing the number of clusters. - `max_iterations`: The maximum number of iterations for the algorithm to run. Default is 100. **Returns**: - A tuple containing two elements: - A numpy array of shape ((k, n)) representing the final cluster centroids. - A numpy array of shape ((m,)) containing the cluster assignment for each sample. **Steps**: 1. **Initialization**: Randomly initialize the cluster centroids by selecting ( k ) different samples from the dataset. 2. **Assign Clusters**: - For each sample, compute the distance to each cluster centroid. - Assign each sample to the nearest centroid based on the distance. 3. **Update Centroids**: - Compute the new centroids as the mean of the samples assigned to each cluster. - If no samples are assigned to a centroid, reinitialize that centroid by choosing a new random sample. 4. **Convergence Check**: - Repeat the assignment and update steps for a maximum of `max_iterations` or until the centroids do not change significantly. 5. **Return**: The final centroids and the cluster assignments. **Example**: ```python X = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) k = 2 centroids, labels = kmeans_clustering(X, k) print(\\"Centroids:n\\", centroids) print(\\"Labels:n\\", labels) ```","solution":"import numpy as np from typing import Tuple def kmeans_clustering(X: np.ndarray, k: int, max_iterations: int = 100) -> Tuple[np.ndarray, np.ndarray]: m, n = X.shape # Step 1: Initialization initial_centroids_indices = np.random.choice(m, k, replace=False) centroids = X[initial_centroids_indices] for _ in range(max_iterations): # Step 2: Assign Clusters distances = np.zeros((m, k)) for i in range(k): distances[:, i] = np.linalg.norm(X - centroids[i], axis=1) labels = np.argmin(distances, axis=1) # Step 3: Update Centroids new_centroids = np.zeros((k, n)) for i in range(k): if np.any(labels == i): new_centroids[i] = np.mean(X[labels == i], axis=0) else: new_centroids[i] = X[np.random.choice(m, 1)] # Step 4: Convergence Check if np.all(centroids == new_centroids): break centroids = new_centroids return centroids, labels"},{"question":"Write a function called **`count_word_frequency`** that takes a text string as input and returns a dictionary where the keys are words and the values are the number of times each word appears in the input text. Ignore punctuation, and treat uppercase and lowercase versions of words as the same word. You should use the `re` library to handle punctuation. # Function Signature ```python def count_word_frequency(text: str) -> dict: ``` # Requirements: 1. The function should ignore punctuation characters (.,!?:;`\'\\") and treat words case-insensitively, i.e., \\"word\\" and \\"Word\\" should be considered the same word. 2. The function should return a dictionary with words as keys and their respective frequencies as values. # Example Input: ```python text = \\"A quick brown fox jumps over the lazy dog. A quick Brown Fox!\\" ``` # Example Output: ```python { \'a\': 2, \'quick\': 2, \'brown\': 2, \'fox\': 2, \'jumps\': 1, \'over\': 1, \'the\': 1, \'lazy\': 1, \'dog\': 1 } ``` # Explanation: In the example input, the word \\"A\\" occurs twice, \\"quick\\" occurs twice, \\"brown\\" occurs twice, etc., ignoring the case and punctuation differences between \\"A quick Brown Fox!\\" and \\"A quick brown fox jumps over the lazy dog.\\". # Hints: 1. Consider using the `re` package to remove punctuation from the input text. 2. Convert the input text to lowercase to handle case insensitivity.","solution":"import re from collections import defaultdict def count_word_frequency(text: str) -> dict: # Use regex to replace punctuation characters with a space text = re.sub(r\'[^ws]\', \' \', text) # Convert to lowercase to handle case insensitivity text = text.lower() # Split the text into words words = text.split() # Use a defaultdict to count frequencies frequency = defaultdict(int) for word in words: frequency[word] += 1 return dict(frequency)"},{"question":"Convert a given list of integers into a balanced binary search tree (BST). Each element in the list is a unique integer. The resulting BST should have the property where each node\'s left subtree has only nodes with elements lesser than the node\'s element, and each node\'s right subtree has only nodes with elements greater than the node\'s element. The function should return the root node of the BST. The tree node class is defined as: ``` class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None ``` The function signature is as follows: ``` def sortedListToBST(nums): ``` Constraints: - The list elements are unique. - You are guaranteed that the input list will have at least one element. - The input list is not necessarily sorted. Example: ``` Input: nums = [1, 2, 3, 4, 5, 6, 7] Output: Root of a BST that is balanced, where the in-order traversal of the BST yields the sorted list [1, 2, 3, 4, 5, 6, 7] ```","solution":"class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def sortedListToBST(nums): Convert a list of unique integers into a balanced binary search tree (BST). # Helper function to convert sorted list to BST def sortedArrayToBST(nums, left, right): if left > right: return None mid = (left + right) // 2 node = TreeNode(nums[mid]) node.left = sortedArrayToBST(nums, left, mid - 1) node.right = sortedArrayToBST(nums, mid + 1, right) return node nums.sort() # Ensure the input list is sorted return sortedArrayToBST(nums, 0, len(nums) - 1)"},{"question":"You are required to write a function named `simulate_population_growth`. This function should simulate and plot the population growth of two different species over time, incorporating interaction between the species. The growth should be modeled using the Lotka-Volterra equations, which describe the dynamics of biological systems in which two species interact, one as a predator and one as prey. You must use the following libraries: `numpy`, `scipy.integrate`, and `matplotlib.pyplot`. The Lotka-Volterra equations are defined as follows: [ frac{dx}{dt} = alpha x - beta xy ] [ frac{dy}{dt} = delta xy - gamma y ] Where: - ( x ): population of the prey - ( y ): population of the predator - ( alpha ): growth rate of the prey - ( beta ): rate at which predators destroy prey - ( gamma ): death rate of the predators - ( delta ): rate at which predators increase by consuming prey Your function `simulate_population_growth` should: 1. Define a nested function `lotka_volterra` that takes inputs `t`, `population`, and parameters `alpha`, `beta`, `gamma`, `delta` and returns the derivatives (frac{dx}{dt}) and (frac{dy}{dt}). 2. Use `scipy.integrate.odeint` to solve these equations over a time period of 0 to 20, with initial populations for prey and predators both set to 10. 3. Use values: (alpha = 1.1), (beta = 0.4), (gamma = 0.4), and (delta = 0.1) for the parameters. 4. Plot the populations of both species over time. 5. Add a title \'Predator-Prey Model\', labels for axes \'Time\' and \'Population\', and a legend, and display the plot using `matplotlib.pyplot.show`. The solution should effectively demonstrate the dynamic interaction between the predator and prey populations.","solution":"import numpy as np from scipy.integrate import odeint import matplotlib.pyplot as plt def simulate_population_growth(): # Define the Lotka-Volterra equations def lotka_volterra(population, t, alpha, beta, gamma, delta): x, y = population dx_dt = alpha * x - beta * x * y dy_dt = delta * x * y - gamma * y return [dx_dt, dy_dt] # Parameters alpha = 1.1 beta = 0.4 gamma = 0.4 delta = 0.1 # Initial conditions: [prey, predator] initial_population = [10, 10] # Time points where we want the solution t = np.linspace(0, 20, 500) # Solve ODE solution = odeint(lotka_volterra, initial_population, t, args=(alpha, beta, gamma, delta)) # Plotting the results prey_population = solution[:, 0] predator_population = solution[:, 1] plt.figure(figsize=(10, 5)) plt.plot(t, prey_population, label=\'Prey Population\') plt.plot(t, predator_population, label=\'Predator Population\') plt.title(\'Predator-Prey Model\') plt.xlabel(\'Time\') plt.ylabel(\'Population\') plt.legend() plt.show()"},{"question":"You are asked to create a function that evaluates a mathematical expression in Reverse Polish Notation (RPN). RPN is a mathematical notation in which operators follow their operands. The function should take a list of strings representing the expression in RPN and return the evaluated result as a float. The function should be named `evaluate_rpn` and use the `math` library as needed. The function must correctly parse and compute the result of the expression. Here is the detailed breakdown of the required function: - **Function Name:** `evaluate_rpn` - **Inputs:** - `tokens`: A list of strings representing the RPN expression. Valid strings are numeric values and the operators \\"+\\", \\"-\\", \\"*\\", \\"/\\". - **Output:** A float representing the result of evaluating the RPN expression. **Step-by-Step Instructions:** 1. Initialize an empty stack to store intermediate results. 2. Iterate through each token in the input list: - If the token is a number, convert it to a float and push it onto the stack. - If the token is an operator, pop the necessary operands from the stack, perform the corresponding operation and push the result back onto the stack. 3. After processing all tokens, the stack should contain exactly one element, which is the result. **Example:** Given the input: ```python tokens = [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] # Call to the function result = evaluate_rpn(tokens) ``` The function should output: ```python result = 9.0 ``` Another example: ```python tokens = [\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"] # Call to the function result = evaluate_rpn(tokens) ``` The function should output: ```python result = 6.6 ```","solution":"import math def evaluate_rpn(tokens): stack = [] for token in tokens: if token in {\'+\', \'-\', \'*\', \'/\'}: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(a / b) else: stack.append(float(token)) return stack[0]"},{"question":"Design and implement a function named `decision_tree_evaluation` that performs the following tasks: 1. Loads a dataset, and splits it into training and testing subsets. 2. Normalizes the feature sets. 3. Trains a Decision Tree model using the training data. 4. Evaluates the model\'s performance on both the training and testing data using accuracy scores, precision, recall, and F1 score. 5. Returns the trained model, the training accuracy, the testing accuracy, precision, recall, and F1 score. To implement this function, you will make use of the following functions and classes from `scikit-learn`: - **train_test_split** from `sklearn.model_selection` - **StandardScaler** from `sklearn.preprocessing` - **DecisionTreeClassifier** from `sklearn.tree` - **accuracy_score**, **precision_score**, **recall_score**, and **f1_score** from `sklearn.metrics` Your function should have the following signature: ```python def decision_tree_evaluation(X, y): Train a Decision Tree Classifier and evaluate its performance. Parameters: - X (array-like): Feature set. - y (array-like): Target labels. Returns: - model (DecisionTreeClassifier): The trained Decision Tree Classifier model. - train_accuracy (float): Accuracy on the training set. - test_accuracy (float): Accuracy on the test set. - precision (float): Precision score on the test set. - recall (float): Recall score on the test set. - f1 (float): F1 score on the test set. ``` Input: - `X`: A 2D array-like object representing the feature set. - `y`: A 1D array-like object representing the target labels. Output: - `model`: An instance of a trained Decision Tree Classifier. - `train_accuracy`: A float representing the accuracy of the model on the training data. - `test_accuracy`: A float representing the accuracy of the model on the testing data. - `precision`: A float representing the precision score on the testing data. - `recall`: A float representing the recall score on the testing data. - `f1`: A float representing the F1 score on the testing data. # Example: ```python from sklearn.datasets import load_iris data = load_iris() X = data.data y = data.target model, train_accuracy, test_accuracy, precision, recall, f1 = decision_tree_evaluation(X, y) print(\\"Model:\\", model) print(\\"Training Accuracy:\\", train_accuracy) print(\\"Testing Accuracy:\\", test_accuracy) print(\\"Precision:\\", precision) print(\\"Recall:\\", recall) print(\\"F1 Score:\\", f1) ```","solution":"from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score def decision_tree_evaluation(X, y): Train a Decision Tree Classifier and evaluate its performance. Parameters: - X (array-like): Feature set. - y (array-like): Target labels. Returns: - model (DecisionTreeClassifier): The trained Decision Tree Classifier model. - train_accuracy (float): Accuracy on the training set. - test_accuracy (float): Accuracy on the test set. - precision (float): Precision score on the test set. - recall (float): Recall score on the test set. - f1 (float): F1 score on the test set. # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Normalize the feature sets scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Train a Decision Tree model model = DecisionTreeClassifier(random_state=42) model.fit(X_train, y_train) # Make predictions y_train_pred = model.predict(X_train) y_test_pred = model.predict(X_test) # Evaluate the model\'s performance train_accuracy = accuracy_score(y_train, y_train_pred) test_accuracy = accuracy_score(y_test, y_test_pred) precision = precision_score(y_test, y_test_pred, average=\'macro\') recall = recall_score(y_test, y_test_pred, average=\'macro\') f1 = f1_score(y_test, y_test_pred, average=\'macro\') return model, train_accuracy, test_accuracy, precision, recall, f1"},{"question":"You are given a dataset representing a collection of books, each with certain attributes such as genre, rating, and page count. Your task is to implement a function that will group the books by their genre and then compute the average rating and total page count for each genre. This function will help in analyzing the distribution and popularity of books by genre. # Objective Write a function named `analyze_books` that accomplishes the following: 1. **Input Parameters**: - `books`: A list of dictionaries, where each dictionary has the following keys: - `title`: A string representing the title of the book. - `genre`: A string representing the genre of the book. - `rating`: A float representing the rating of the book. - `pages`: An integer representing the page count of the book. 2. **Output**: - A dictionary where each key is a book genre and the corresponding value is another dictionary with: - `average_rating`: The average rating of books in that genre. - `total_pages`: The sum of pages of books in that genre. # Example ```python books = [ {\\"title\\": \\"Book A\\", \\"genre\\": \\"Fantasy\\", \\"rating\\": 4.5, \\"pages\\": 300}, {\\"title\\": \\"Book B\\", \\"genre\\": \\"Sci-Fi\\", \\"rating\\": 4.0, \\"pages\\": 250}, {\\"title\\": \\"Book C\\", \\"genre\\": \\"Fantasy\\", \\"rating\\": 3.5, \\"pages\\": 500}, {\\"title\\": \\"Book D\\", \\"genre\\": \\"Mystery\\", \\"rating\\": 5.0, \\"pages\\": 200}, {\\"title\\": \\"Book E\\", \\"genre\\": \\"Sci-Fi\\", \\"rating\\": 3.0, \\"pages\\": 400} ] # The function call should be: result = analyze_books(books) # result should be: # { # \\"Fantasy\\": {\\"average_rating\\": 4.0, \\"total_pages\\": 800}, # \\"Sci-Fi\\": {\\"average_rating\\": 3.5, \\"total_pages\\": 650}, # \\"Mystery\\": {\\"average_rating\\": 5.0, \\"total_pages\\": 200} # } ``` Implement the function `analyze_books` as per the above specifications.","solution":"def analyze_books(books): Groups books by their genre and computes the average rating and total pages for each genre. :param books: List of dictionaries with each book containing \'title\', \'genre\', \'rating\', and \'pages\'. :return: Dictionary with genres as keys and another dictionary as values containing \'average_rating\' and \'total_pages\'. genre_stats = {} for book in books: genre = book[\'genre\'] rating = book[\'rating\'] pages = book[\'pages\'] if genre not in genre_stats: genre_stats[genre] = {\'total_rating\': 0, \'count\': 0, \'total_pages\': 0} genre_stats[genre][\'total_rating\'] += rating genre_stats[genre][\'count\'] += 1 genre_stats[genre][\'total_pages\'] += pages result = {} for genre, stats in genre_stats.items(): average_rating = stats[\'total_rating\'] / stats[\'count\'] if stats[\'count\'] > 0 else 0 total_pages = stats[\'total_pages\'] result[genre] = {\'average_rating\': average_rating, \'total_pages\': total_pages} return result"},{"question":"You need to create a function called `reverse_lookup` that searches for a specific value within a given dictionary and returns a list of keys that have the specified value. If the value is not found in the dictionary, the function should return an empty list. Here\'s a detailed step-by-step description: 1. **Iterate Over Dictionary Items**: Loop through each key-value pair in the dictionary. 2. **Check for Matching Value**: If the current value matches the specified value, add the corresponding key to a result list. 3. **Return Result List**: After checking all items in the dictionary, return the list of keys that have the specified value. **Constraints**: - The dictionary may contain nested dictionaries, and the function should also search within these nested dictionaries for matching values. - Assume all dictionary keys are unique. - The function should be efficient, with a complexity of O(n) where n is the number of key-value pairs in the dictionary and its nested dictionaries. **Function Signature**: ```python def reverse_lookup(d: dict, value) -> list: pass ``` **Examples**: ```python # Example 1 data = { \'a\': 1, \'b\': 2, \'c\': { \'d\': 2, \'e\': 3 }, \'f\': 4 } print(reverse_lookup(data, 2)) # Output: [\'b\', \'c.d\'] # Example 2 data = { \'x\': 3, \'y\': 4, \'z\': 5 } print(reverse_lookup(data, 1)) # Output: [] # Example 3 data = { \'main\': { \'sub1\': 8, \'sub2\': { \'subsub1\': 8, \'subsub2\': 9 } }, \'another\': 8 } print(reverse_lookup(data, 8)) # Output: [\'main.sub1\', \'main.sub2.subsub1\', \'another\'] ```","solution":"def reverse_lookup(d, value): Search for a specific value within a given dictionary and returns a list of keys (in string form) that have the specified value. Handles nested dictionaries. def search_dict(sub_d, parent_key=\'\'): result = [] for k, v in sub_d.items(): full_key = f\\"{parent_key}.{k}\\" if parent_key else k if isinstance(v, dict): result.extend(search_dict(v, full_key)) elif v == value: result.append(full_key) return result return search_dict(d)"},{"question":"Use pandas to read a CSV file containing time-series data into a DataFrame. Calculate the moving average with a specified window size and add it as a new column to the DataFrame. Finally, visualize both the original data and the moving average on the same plot using matplotlib. The function should output with: matplotlib.axes._subplots.AxesSubplot: The Axes object of the plot. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(file_path, window_size): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(file_path, window_size): Reads a CSV file containing time-series data, calculates the moving average with a specified window size, and visualizes both the original data and moving average on a plot. Parameters: file_path (str): The path to the CSV file. window_size (int): The window size for calculating the moving average. Returns: matplotlib.axes._subplots.AxesSubplot: The Axes object of the plot. # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Calculate the moving average df[\'moving_average\'] = df.iloc[:, 1].rolling(window=window_size).mean() # Plot the original data and the moving average plt.figure(figsize=(10, 6)) ax = df.plot(x=df.columns[0], y=df.columns[1], label=\'Original Data\') df.plot(x=df.columns[0], y=\'moving_average\', ax=ax, label=\'Moving Average\') plt.xlabel(\'Time\') plt.ylabel(\'Value\') plt.legend() plt.title(\'Original Data and Moving Average\') plt.grid(True) return ax"},{"question":"Copy all files with a specific extension from the source directory to the destination directory. If a file with the same name already exists in the destination directory, overwrite it. The function should handle errors such as nonexistent source directory or issues during the copy process. The function should raise the exception for: - FileNotFoundError: If the source directory does not exist. - ValueError: If no files with the given extension are found in the source directory. The function should output with: - str: A message indicating success or the encountered error. You should write self-contained code starting with: ``` import os import shutil def copy_files_with_extension(source_dir, destination_dir, extension): ``` Examples and Expected Outputs: ``` # Given source_dir contains files: [\'file1.txt\', \'file2.docx\', \'file3.txt\'] # And destination_dir is an empty directory copy_files_with_extension(\'source_dir\', \'destination_dir\', \'.txt\') # Expected output: \\"All files with extension .txt were successfully copied.\\" # If no files with the given extension are found copy_files_with_extension(\'source_dir\', \'destination_dir\', \'.pdf\') # Expected output: \\"ValueError: No files with extension .pdf found.\\" ```","solution":"import os import shutil def copy_files_with_extension(source_dir, destination_dir, extension): Copy all files with the specified extension from the source directory to the destination directory, overwriting if necessary. Args: source_dir (str): The directory to copy files from. destination_dir (str): The directory to copy files to. extension (str): The extension of files to be copied. Returns: str: A message indicating success or the encountered error. Raises: FileNotFoundError: If the source directory does not exist. ValueError: If no files with the given extension are found in the source directory. # Check if source directory exists if not os.path.isdir(source_dir): raise FileNotFoundError(f\\"The source directory \'{source_dir}\' does not exist.\\") # Gather all files with the given extension files_to_copy = [f for f in os.listdir(source_dir) if f.endswith(extension)] # Check if there are files with the given extension if not files_to_copy: raise ValueError(f\\"No files with extension {extension} found in \'{source_dir}\'.\\") # Ensure destination directory exists, or create it os.makedirs(destination_dir, exist_ok=True) # Perform the file copy for file_name in files_to_copy: source_file = os.path.join(source_dir, file_name) destination_file = os.path.join(destination_dir, file_name) shutil.copy2(source_file, destination_file) # copy2 preserves metadata return f\\"All files with extension {extension} were successfully copied.\\""},{"question":"You are tasked with creating a function `generate_square_wave` that generates a square wave signal of a specified frequency and duration and then plots the signal using the `matplotlib` library. Your function should: 1. Read a float `frequency` representing the frequency of the square wave in Hz. 2. Read a float `duration` representing the duration of the signal in seconds. 3. Generate the square wave signal. 4. Plot the square wave signal using `matplotlib.pyplot.plot`. 5. Display the plot using `matplotlib.pyplot.show`. Function Signature: ```python def generate_square_wave(frequency: float, duration: float): pass ``` Assume the following: - The sampling rate is 1000 samples per second. **Example:** Input: ```plaintext 5.0 2.0 ``` Output: A plot displaying a square wave with a frequency of 5 Hz and a duration of 2 seconds. **Note:** - Ensure to import `matplotlib.pyplot` as `plt` and `numpy` as `np` for convenience. - You may assume that all inputs are valid and well-formed. You should use the following `numpy` and `matplotlib` functions: - `numpy.linspace` - `numpy.sign` - `matplotlib.pyplot.plot` - `matplotlib.pyplot.show` Here is a hint to generate the square wave signal using `numpy`: - Given the array `t` representing time points: `t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)` - The square wave signal can be derived using: `signal = np.sign(np.sin(2 * np.pi * frequency * t))`","solution":"import numpy as np import matplotlib.pyplot as plt def generate_square_wave(frequency: float, duration: float): Generates and plots a square wave signal of specified frequency and duration. Parameters: frequency (float): Frequency of the square wave in Hz. duration (float): Duration of the signal in seconds. sampling_rate = 1000 # samples per second t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False) signal = np.sign(np.sin(2 * np.pi * frequency * t)) plt.plot(t, signal) plt.title(f\'Square Wave: {frequency} Hz, {duration} s\') plt.xlabel(\'Time [s]\') plt.ylabel(\'Amplitude\') plt.grid(True) plt.show()"},{"question":"You are tasked with creating a function `sum_word_lengths(text: str) -> int` that takes a string `text` as its parameter. The function should calculate the total number of characters in all the words of the input string, ignoring punctuation and whitespace. - A \\"word\\" is defined as a sequence of alphanumeric characters. - You should ignore punctuation (such as periods, commas, and exclamation marks). - Whitespace (spaces, tabs, newlines) should not be counted. Your function should return the sum of the lengths of all the words in the input text. # Example: ```python >>> sum_word_lengths(\\"Hello, world! This is a test.\\") 21 >>> sum_word_lengths(\\"Python is great.\\") 13 ``` Use the following regular expression documentation for reference: ```plaintext re.findall(pattern, string, flags=0) Return all non-overlapping matches of pattern in string, as a list of strings. ```","solution":"import re def sum_word_lengths(text: str) -> int: Calculate the total number of characters in all the words of the input string, ignoring punctuation and whitespace. Parameters: text (str): The input string to analyze. Returns: int: The sum of the lengths of all the words in the input text. words = re.findall(r\'bw+b\', text) word_lengths = [len(word) for word in words] return sum(word_lengths)"},{"question":"You are required to write a function `generate_permutations_and_check(sequence, target)` that leverages the `itertools` library, specifically the `itertools.permutations` function. The function performs the following steps: 1. Generates all permutations of the given `sequence`. 2. Checks if any of the permutations match the `target` string. The function should return `True` if the `target` is found within the permutations, and `False` otherwise. **Function Specification:** ```python def generate_permutations_and_check(sequence, target): # Your code here ``` **Parameters:** - `sequence` (str): The original string for which permutations are to be generated. - `target` (str): The target string that needs to be checked against the permutations of `sequence`. **Returns:** - `result` (bool): `True` if the `target` string is one of the permutations of `sequence`, `False` otherwise. **Important:** - Use the `itertools.permutations` function to generate permutations of the `sequence`.","solution":"import itertools def generate_permutations_and_check(sequence, target): Generates all permutations of the given sequence and checks if any of the permutations match the target string. Parameters: sequence (str): The original string for which permutations are to be generated. target (str): The target string that needs to be checked against the permutations of sequence. Returns: result (bool): True if the target string is one of the permutations of sequence, False otherwise. for perm in itertools.permutations(sequence): if \'\'.join(perm) == target: return True return False"},{"question":"You are required to write a Python function `rotate_image_right(image)`, that performs a 90-degree clockwise rotation of a given N x N image matrix. The image is represented as a two-dimensional list of integers, where each integer represents a pixel. To achieve this, avoid using any external libraries such as NumPy. Below is the description of the necessary function: **Function:** `rotate_image_right(image: List[List[int]]) -> List[List[int]]` **Parameters:** - `image (List[List[int]])`: A two-dimensional list of integers representing an N x N image. **Returns:** - `List[List[int]]`: A new N x N matrix which is the input image rotated 90 degrees clockwise. **Instructions:** 1. Ensure the function can handle any N x N matrix where N >= 1. 2. Do not use any external libraries like NumPy. 3. The function should create and return a new matrix that represents the rotated image. **Example:** ```python image = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] result = rotate_image_right(image) print(result) ``` The expected output for the example above should be: ``` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ```","solution":"def rotate_image_right(image): Rotates a given N x N image matrix by 90 degrees clockwise. :param image: List of List of integers representing the image matrix. :return: A new List of List of integers representing the rotated image. n = len(image) # Create a new n x n matrix to store the rotated image rotated_image = [[0 for _ in range(n)] for _ in range(n)] for i in range(n): for j in range(n): rotated_image[j][n - 1 - i] = image[i][j] return rotated_image"},{"question":"**Title:** Employee Work Hours Tracker **Objective:** Create a function named `calculate_total_hours(logs: List[str]) -> Dict[str, float]` that calculates and returns each employee\'s total work hours from a list of log entries. **Detailed Requirements:** 1. Each log entry in the input list is a string formatted as \\"employee_id,date,time_in,time_out\\". 2. The *employee_id* is a unique identifier for an employee. 3. The *date* is formatted as \\"YYYY-MM-DD\\". 4. The *time_in* and *time_out* are formatted as \\"HH:MM\\" in 24-hour format. 5. The function should parse the log entries and calculate the total hours worked by each employee. 6. Assume that each log entry is correctly formatted and the times are always valid (e.g., time_in is always before time_out). 7. Return the total work hours for each employee as a dictionary where keys are employee IDs and values are total hours worked as floats rounded to two decimal places. **Function Signature:** ```python def calculate_total_hours(logs: List[str]) -> Dict[str, float]: pass ``` **Example Input:** ```python logs = [ \\"emp001,2023-10-21,09:00,17:00\\", \\"emp002,2023-10-21,10:00,18:00\\", \\"emp001,2023-10-22,09:30,17:30\\", \\"emp002,2023-10-22,10:00,19:00\\" ] ``` **Example Output:** ```python { \\"emp001\\": 16.0, \\"emp002\\": 17.0 } ``` **Notes:** - Use the `datetime` module to handle date and time parsing and calculation. - Ensure that the returned total hours are accurate to two decimal places. - Handle cases where an employee might have multiple log entries for different dates. - You may assume that each employee will have at least one log entry in the provided list. ```python import datetime from typing import List, Dict def calculate_total_hours(logs: List[str]) -> Dict[str, float]: emp_hours = {} for log in logs: emp_id, date, time_in, time_out = log.split(\',\') time_in_dt = datetime.datetime.strptime(f\\"{date} {time_in}\\", \'%Y-%m-%d %H:%M\') time_out_dt = datetime.datetime.strptime(f\\"{date} {time_out}\\", \'%Y-%m-%d %H:%M\') hours_worked = (time_out_dt - time_in_dt).total_seconds() / 3600.0 if emp_id in emp_hours: emp_hours[emp_id] += hours_worked else: emp_hours[emp_id] = hours_worked for emp_id in emp_hours: emp_hours[emp_id] = round(emp_hours[emp_id], 2) return emp_hours ```","solution":"import datetime from typing import List, Dict def calculate_total_hours(logs: List[str]) -> Dict[str, float]: emp_hours = {} for log in logs: emp_id, date, time_in, time_out = log.split(\',\') time_in_dt = datetime.datetime.strptime(f\\"{date} {time_in}\\", \'%Y-%m-%d %H:%M\') time_out_dt = datetime.datetime.strptime(f\\"{date} {time_out}\\", \'%Y-%m-%d %H:%M\') hours_worked = (time_out_dt - time_in_dt).total_seconds() / 3600.0 if emp_id in emp_hours: emp_hours[emp_id] += hours_worked else: emp_hours[emp_id] = hours_worked for emp_id in emp_hours: emp_hours[emp_id] = round(emp_hours[emp_id], 2) return emp_hours"},{"question":"You are provided with a large dataset of sales transactions, where each transaction represents a sale of a product in a particular store on a specific date. Each transaction contains the following details: transaction id, store id, product id, date, and sale amount. Your task is to analyze this dataset to ascertain the top-selling products for each store over a specified date range. The results should be stored in a JSON file. **Function to Implement**: ```python def analyze_sales(transactions, start_date, end_date, output_file): ``` **Function Parameters**: - `transactions`: A list of dictionaries where each dictionary represents a transaction. Each dictionary contains the following keys: \'transaction_id\', \'store_id\', \'product_id\', \'date\', and \'sale_amount\'. - `start_date`: A string representing the start date in \'YYYY-MM-DD\' format. - `end_date`: A string representing the end date in \'YYYY-MM-DD\' format. - `output_file`: The file path (string) where the results will be saved in JSON format. **Function Details**: 1. **Filtering Transactions**: Iterate over the `transactions` list and filter out transactions that do not fall within the specified `start_date` and `end_date` inclusive. 2. **Aggregating Sales**: For the remaining transactions, calculate the total sales for each product in each store. 3. **Top-Selling Products**: Identify the top-selling product (the product with the highest total sales) for each store. 4. **Output**: Write the results to a JSON file specified by `output_file`. The JSON structure should map each store id to its top-selling product id and the total sales amount for that product. **Constraints**: - Dates should be compared as strings in \'YYYY-MM-DD\' format. - If two products have the same total sales, the product appearing first in the dataset should be considered the top-seller. - The results JSON should follow this format: ```json { \\"store_id1\\": {\\"product_id\\": \\"top_product_id1\\", \\"total_sales\\": total_sales1}, \\"store_id2\\": {\\"product_id\\": \\"top_product_id2\\", \\"total_sales\\": total_sales2}, ... ``` **Example**: You can use the following dummy data to simulate the real use case: ```python transactions = [ {\\"transaction_id\\": \\"T1\\", \\"store_id\\": \\"S1\\", \\"product_id\\": \\"P1\\", \\"date\\": \\"2023-01-01\\", \\"sale_amount\\": 100}, {\\"transaction_id\\": \\"T2\\", \\"store_id\\": \\"S1\\", \\"product_id\\": \\"P2\\", \\"date\\": \\"2023-01-02\\", \\"sale_amount\\": 150}, {\\"transaction_id\\": \\"T3\\", \\"store_id\\": \\"S2\\", \\"product_id\\": \\"P1\\", \\"date\\": \\"2023-01-01\\", \\"sale_amount\\": 200}, {\\"transaction_id\\": \\"T4\\", \\"store_id\\": \\"S2\\", \\"product_id\\": \\"P3\\", \\"date\\": \\"2023-01-02\\", \\"sale_amount\\": 50} ] start_date = \\"2023-01-01\\" end_date = \\"2023-01-02\\" output_file = \\"top_selling_products.json\\" ``` The resulting JSON file should look like this: ```json { \\"S1\\": {\\"product_id\\": \\"P2\\", \\"total_sales\\": 150}, \\"S2\\": {\\"product_id\\": \\"P1\\", \\"total_sales\\": 200} } ```","solution":"import json from collections import defaultdict def analyze_sales(transactions, start_date, end_date, output_file): Analyze sales transactions to find the top-selling products for each store over a specified date range and save the results to a JSON file. Parameters: transactions (list of dict): List of transaction dictionaries. start_date (str): Start date in \'YYYY-MM-DD\' format. end_date (str): End date in \'YYYY-MM-DD\' format. output_file (str): Path to the output JSON file. store_sales = defaultdict(lambda: defaultdict(int)) # Step 1: Filter transactions by date range filtered_transactions = [ t for t in transactions if start_date <= t[\'date\'] <= end_date ] # Step 2: Aggregate sales for each product in each store for t in filtered_transactions: store_id = t[\'store_id\'] product_id = t[\'product_id\'] sale_amount = t[\'sale_amount\'] store_sales[store_id][product_id] += sale_amount # Step 3: Determine top-selling product for each store top_selling_products = {} for store_id, products in store_sales.items(): top_product_id = max(products, key=products.get) top_selling_products[store_id] = { \\"product_id\\": top_product_id, \\"total_sales\\": products[top_product_id] } # Step 4: Write results to JSON file with open(output_file, \'w\') as outfile: json.dump(top_selling_products, outfile, indent=4)"},{"question":"You are tasked with writing a function named `calculate_trip_duration` that helps users determine the duration of a trip based on start and end dates. This function should: 1. Accept two parameters: `start_date` and `end_date`, which are strings in the `YYYY-MM-DD` format. 2. Use the `datetime` library to parse the input date strings into `datetime.date` objects. 3. Calculate the duration of the trip by finding the difference between the end date and the start date. 4. Return the duration in days as an integer. 5. Raise a `ValueError` if the `end_date` is earlier than the `start_date`. **Important Libraries to Use**: - `datetime` for parsing and manipulating date and time objects. **Function Signature**: ```python def calculate_trip_duration(start_date: str, end_date: str) -> int: ``` **Example Usage**: ```python start_date = \\"2023-06-15\\" end_date = \\"2023-06-20\\" trip_duration = calculate_trip_duration(start_date, end_date) print(trip_duration) ``` Expected Output: ```python 5 ``` Note: - If `end_date` is before `start_date`, the function should raise a `ValueError` with a message like \\"End date cannot be earlier than start date\\". - The trip duration includes both start and end dates, so if both dates are the same, the duration is 0 days.","solution":"from datetime import datetime def calculate_trip_duration(start_date: str, end_date: str) -> int: Calculate the duration of a trip in days based on the start and end dates. :param start_date: The start date in \'YYYY-MM-DD\' format. :param end_date: The end date in \'YYYY-MM-DD\' format. :return: The duration of the trip in days. :raises ValueError: If the end date is earlier than the start date. start = datetime.strptime(start_date, \'%Y-%m-%d\').date() end = datetime.strptime(end_date, \'%Y-%m-%d\').date() if end < start: raise ValueError(\\"End date cannot be earlier than start date\\") # Calculate the difference in days and include both the start and end dates duration = (end - start).days return duration"},{"question":"You are tasked with writing a Python function that reads from two JSON files: one containing a list of product categories, each with its own unique category ID, name, and description; and another containing a list of products, each with a product ID, name, category ID, and price. The goal of the function is to generate a JSON file containing summarized information for each category, including the total number of products and the average price of the products within that category. Function Name: `summarize_product_categories` Inputs: - `categories_path`: A string representing the file path to the JSON file with product category information. - `products_path`: A string representing the file path to the JSON file with product information. - `output_path`: A string representing the file path where the resulting JSON file will be saved. JSON File `categories_path` Details: - Contains a list of objects, each representing a category with the following properties: - `id`: A unique identifier for the category. - `name`: The name of the category. - `description`: A description of the category. JSON File `products_path` Details: - Contains a list of objects, each representing a product with the following properties: - `id`: A unique identifier for the product. - `name`: The name of the product. - `category_id`: The ID of the category to which the product belongs. - `price`: The price of the product. JSON File `output_path` Details: - Will contain an array of objects, each representing a summary of a category with the following properties: - `category_id`: The ID of the category. - `category_name`: The name of the category. - `total_products`: The total number of products in the category. - `average_price`: The average price of the products in the category. Your task is to implement the function `summarize_product_categories` to achieve this. Ensure to use the `json` module for reading and writing JSON files. Example: Given the following content in `categories_path` JSON: ```json [ {\\"id\\": 1, \\"name\\": \\"Electronics\\", \\"description\\": \\"Devices and gadgets\\"}, {\\"id\\": 2, \\"name\\": \\"Furniture\\", \\"description\\": \\"Home and office furniture\\"} ] ``` And the following content in the `products_path` JSON: ```json [ {\\"id\\": 101, \\"name\\": \\"Laptop\\", \\"category_id\\": 1, \\"price\\": 1200}, {\\"id\\": 102, \\"name\\": \\"Smartphone\\", \\"category_id\\": 1, \\"price\\": 800}, {\\"id\\": 103, \\"name\\": \\"Desk\\", \\"category_id\\": 2, \\"price\\": 150}, {\\"id\\": 104, \\"name\\": \\"Chair\\", \\"category_id\\": 2, \\"price\\": 100} ] ``` The output JSON file specified by `output_path` should contain: ```json [ { \\"category_id\\": 1, \\"category_name\\": \\"Electronics\\", \\"total_products\\": 2, \\"average_price\\": 1000.0 }, { \\"category_id\\": 2, \\"category_name\\": \\"Furniture\\", \\"total_products\\": 2, \\"average_price\\": 125.0 } ] ```","solution":"import json def summarize_product_categories(categories_path, products_path, output_path): # Read categories from the file with open(categories_path, \'r\') as categories_file: categories = json.load(categories_file) # Read products from the file with open(products_path, \'r\') as products_file: products = json.load(products_file) # Initialize a dictionary to store category summaries category_summary = {} for category in categories: category_summary[category[\'id\']] = { \'category_id\': category[\'id\'], \'category_name\': category[\'name\'], \'total_products\': 0, \'total_price\': 0.0 } # Summarize product information into the category summaries for product in products: category_id = product[\'category_id\'] if category_id in category_summary: category_summary[category_id][\'total_products\'] += 1 category_summary[category_id][\'total_price\'] += product[\'price\'] # Convert total price to average price and prepare the final summary list summary_list = [] for category_id, summary in category_summary.items(): total_products = summary[\'total_products\'] summary_list.append({ \'category_id\': summary[\'category_id\'], \'category_name\': summary[\'category_name\'], \'total_products\': total_products, \'average_price\': summary[\'total_price\'] / total_products if total_products > 0 else 0 }) # Write the summary information to the output file with open(output_path, \'w\') as output_file: json.dump(summary_list, output_file, indent=4)"},{"question":"In this task, you are required to write a function named `findMissingNumber` that finds the missing number in a sequence of integers. The function will take a list of unique integers from 1 to n (inclusive) with one number missing. The exact behavior of the function should be as follows: 1. The function should take one parameter: `numbers` (a list of unique integers from 1 to n with one missing). 2. The function should find and return the missing number in the sequence. 3. To achieve this, you can: - Calculate the expected sum of integers from 1 to n using the formula `n*(n+1)/2` where n is the length of the list plus one. - Calculate the actual sum of the given numbers in the list. - Subtract the actual sum from the expected sum to find the missing number. 4. The function should return the missing number as an integer. Here\'s an outline of the function that you need to implement: ```python def findMissingNumber(numbers): # Your code here pass ``` Example: ```python print(findMissingNumber([1, 2, 4, 5, 6])) # Output should be 3 ```","solution":"def findMissingNumber(numbers): Finds the missing number in a sequence of integers from 1 to n with one missing number. Parameters: numbers (list): A list of unique integers from 1 to n with one number missing. Returns: int: The missing number in the sequence. n = len(numbers) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(numbers) return expected_sum - actual_sum"},{"question":"Create a function called `compare_datasets` that uses the `pandas` library to perform a comparison between two datasets and identifies common and unique entries. The datasets are provided as two dataframes with the same structure, containing columns \'ID\', \'Name\', and \'Value\'. The function should output three lists: one with IDs common to both datasets, one with IDs unique to the first dataset, and one with IDs unique to the second dataset. Your function should: 1. Accept two pandas dataframes, `df1` and `df2`, as inputs. 2. Identify the IDs present in both `df1` and `df2` and return them in a list called `common_ids`. 3. Identify the IDs present in `df1` but not in `df2` and return them in a list called `unique_ids_df1`. 4. Identify the IDs present in `df2` but not in `df1` and return them in a list called `unique_ids_df2`. You must use the following `pandas` functions to accomplish this: `pd.merge`, `pd.concat`, and simple dataframe operations. The provided dataframes are: ```python import pandas as p df1 = pd.DataFrame({ \'ID\': [1, 2, 3, 4], \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\'], \'Value\': [100, 200, 300, 400] }) df2 = pd.DataFrame({ \'ID\': [3, 4, 5, 6], \'Name\': [\'Charlie\', \'David\', \'Edward\', \'Fiona\'], \'Value\': [300, 400, 500, 600] }) ```","solution":"import pandas as pd def compare_datasets(df1, df2): # Merge datasets on \'ID\' to find common entries common_ids = pd.merge(df1, df2, on=\'ID\')[\'ID\'].tolist() # Find unique IDs in df1 by checking which IDs are not in df2 unique_ids_df1 = df1[~df1[\'ID\'].isin(df2[\'ID\'])][\'ID\'].tolist() # Find unique IDs in df2 by checking which IDs are not in df1 unique_ids_df2 = df2[~df2[\'ID\'].isin(df1[\'ID\'])][\'ID\'].tolist() return common_ids, unique_ids_df1, unique_ids_df2"},{"question":"Write a function named `sort_students_by_score` that takes a list of tuples as an argument, where each tuple represents a student and contains their name (a string) and their score (an integer). The function should: 1. Sort the list of students in descending order by score. 2. If two students have the same score, they should be ordered alphabetically by name. 3. Return the sorted list of tuples. Here is an example input for your function: - `students` = [(\\"Alice\\", 88), (\\"Bob\\", 95), (\\"Charlie\\", 88), (\\"Dave\\", 75)] The function call `sort_students_by_score(students)` should return: - [(\\"Bob\\", 95), (\\"Alice\\", 88), (\\"Charlie\\", 88), (\\"Dave\\", 75)]","solution":"def sort_students_by_score(students): Sorts a list of students by their scores in descending order. If two students have the same score, they are sorted alphabetically by name. :param students: List of tuples where each tuple contains a student\'s name and score. :return: Sorted list of tuples. return sorted(students, key=lambda student: (-student[1], student[0]))"},{"question":"Write a function that compresses a string using the Run-Length Encoding (RLE) algorithm. The function should take a string as input and return a new string where consecutive occurrences of the same character are replaced by the character followed by the number of occurrences. If the compressed string is not shorter than the original string, return the original string instead. The function signature should be: ``` def compress_string(s: str) -> str: ``` The function should output: - compressed_string (str): The compressed string using RLE, or the original string if the compressed version is not shorter. For example: ``` compress_string(\\"aabcccccaaa\\") -> \\"a2b1c5a3\\" compress_string(\\"abcdef\\") -> \\"abcdef\\" ```","solution":"def compress_string(s: str) -> str: Compresses the input string using Run-Length Encoding (RLE) algorithm. If the compressed string is not shorter than the original, returns the original string. Args: s (str): Input string to be compressed. Returns: str: Compressed string using RLE, or the original string if compressed version is not shorter. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\\"{s[i - 1]}{count}\\") count = 1 compressed.append(f\\"{s[-1]}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"In this problem, you will implement a personal financial tracking system using Python. The system comprises of tracking individual transactions and generating a summary of total income and expenses. You need to write a class named `FinanceTracker` which allows users to add transactions and compute the summary. Here\'s what the `FinanceTracker` class should have: 1. An `__init__` method that initializes the object. It should have an internal list to store all transactions, where each transaction is represented as a dictionary with keys \'description\', \'amount\', and \'type\' (either \'income\' or \'expense\'). 2. An `add_transaction` method that takes three arguments: `description` (string), `amount` (float), and `type` (string, either \'income\' or \'expense\'). This method should add a transaction to the internal list. 3. A `get_summary` method that returns a dictionary with two keys: \'total_income\' and \'total_expenses\'. The values should be the sum of incomes and expenses, respectively. Here\'s a template to get you started: ```python class FinanceTracker: def __init__(self): # Initialize the internal list to store transactions self.transactions = [] def add_transaction(self, description, amount, trans_type): # Your code here to add a transaction to the list pass def get_summary(self): # Your code here to compute and return the summary pass ``` Sample Usage: ```python tracker = FinanceTracker() tracker.add_transaction(\'Salary\', 5000, \'income\') tracker.add_transaction(\'Rent\', 1200, \'expense\') tracker.add_transaction(\'Groceries\', 300, \'expense\') tracker.add_transaction(\'Freelance Work\', 1500, \'income\') summary = tracker.get_summary() print(summary) # Output: {\'total_income\': 6500, \'total_expenses\': 1500} ```","solution":"class FinanceTracker: def __init__(self): # Initialize the internal list to store transactions self.transactions = [] def add_transaction(self, description, amount, trans_type): # Validate transaction type if trans_type not in [\'income\', \'expense\']: raise ValueError(\\"Transaction type must be either \'income\' or \'expense\'.\\") # Add transaction to the list self.transactions.append({ \'description\': description, \'amount\': amount, \'type\': trans_type }) def get_summary(self): total_income = sum(trans[\'amount\'] for trans in self.transactions if trans[\'type\'] == \'income\') total_expenses = sum(trans[\'amount\'] for trans in self.transactions if trans[\'type\'] == \'expense\') return {\'total_income\': total_income, \'total_expenses\': total_expenses}"},{"question":"In number theory, a number is considered to be a prime number if it is greater than 1 and has no positive divisors other than 1 and itself. If a number ( n ) is not a prime, it is called a composite number. A prime factor of a number ( n ) is a prime number that divides ( n ) exactly without leaving a remainder. We want to write a function that returns the largest prime factor of a given number ( n ). The function should handle numbers up to ( 10^6 ). Your task is to implement a function `largest_prime_factor(n)` that satisfies the following requirements: 1. The function should take one parameter: - `n`: A positive integer, up to ( 10^6 ). 2. The function should identify all prime factors of ( n ) and return the largest one. 3. Efficient computation is necessary to handle large values of ( n ). Example Usage: ```python prime_factor = largest_prime_factor(13195) print(prime_factor) # Output should be 29 ``` Hints: - Consider using the Sieve of Eratosthenes to generate a list of prime numbers up to the square root of ( n ). - As you iterate through potential factors, remember to divide ( n ) by the prime factor completely before moving to the next potential factor.","solution":"def largest_prime_factor(n): Returns the largest prime factor of a given number n. if n < 2: return None # Initialize the largest factor largest_factor = None # Divide out factors of 2 first while n % 2 == 0: largest_factor = 2 n //= 2 # Now consider odd numbers from 3 upwards factor = 3 while factor * factor <= n: while n % factor == 0: largest_factor = factor n //= factor factor += 2 # If there is still a remainder larger than 2, it must be prime if n > 2: largest_factor = n return largest_factor"},{"question":"In this problem, you will be creating a function to handle basic string operations using Python. The input will be a single string, and you are required to write a function named `reverse_words` that takes this string as its input. The function should reverse the order of words in the string while leaving the order of characters within each word unchanged. Function Signature: ```python def reverse_words(sentence): pass ``` # Constraints: - The input `sentence` will be a string that contains only alphabetical characters and spaces. - The words in the sentence will be separated by a single space, and there will be no leading or trailing spaces. # Example: ```python input_sentence = \\"hello world this is great\\" output_sentence = reverse_words(input_sentence) # Expected output # \\"great is this world hello\\" ``` # Instructions: 1. Split the input string into a list of words. 2. Reverse the order of words in the list. 3. Join the reversed list of words back into a single string with spaces in between each word. 4. Return the resulting string. By completing this task, you will practice working with string manipulation, list operations, and the use of basic Python built-in functions for handling text.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: - sentence (str): The input sentence with words separated by single spaces. Returns: - str: The sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Load a dataset from a CSV file into a pandas DataFrame, normalize the data using Min-Max scaling, and apply a Principal Component Analysis (PCA) to reduce the dataset\'s dimensionality to two dimensions. The function should return the two-dimensional transformed data. If the input file is not a CSV, the function should throw an error. The function should output: dataframe: A DataFrame containing the two-dimensional transformed data. You should write self-contained code starting with: ``` import pandas as pd from sklearn.preprocessing import MinMaxScaler from sklearn.decomposition import PCA def task_func(csv_path): ```","solution":"import pandas as pd from sklearn.preprocessing import MinMaxScaler from sklearn.decomposition import PCA def task_func(csv_path): # Read the CSV file into a DataFrame if not csv_path.endswith(\'.csv\'): raise ValueError(\\"The input file is not a CSV file.\\") df = pd.read_csv(csv_path) # Normalize the data using Min-Max scaling scaler = MinMaxScaler() normalized_data = scaler.fit_transform(df) # Apply PCA to reduce the dimensionality to two dimensions pca = PCA(n_components=2) transformed_data = pca.fit_transform(normalized_data) # Create a new DataFrame with the transformed data transformed_df = pd.DataFrame(transformed_data, columns=[\'PC1\', \'PC2\']) return transformed_df"},{"question":"Implement a function that evaluates the performance of a student based on their scores in several subjects. The function will compute the average score and determine the grade based on the average. The grading scale is as follows: - Average score >= 90: Grade A - 80 <= Average score < 90: Grade B - 70 <= Average score < 80: Grade C - 60 <= Average score < 70: Grade D - Average score < 60: Grade F The function should be named `evaluate_student_performance` and will take one argument: - `scores` (list): A list of integers representing the scores in different subjects. The function will return a tuple with two elements: 1. The computed average score (float). 2. The grade (string) based on the grading scale. The function’s inputs and requirements can be summarized as follows: - `scores`: a list of integers. Here is an example of how the function should be structured: ```python def evaluate_student_performance(scores): Evaluates the performance of a student based on their scores in several subjects. Args: scores (list): A list of integers representing the scores. Returns: tuple: A tuple containing the average score (float) and the grade (string). # Your implementation here ``` Make sure your implementation includes the calculation of the average score and the determination of the grade using the provided scale.","solution":"def evaluate_student_performance(scores): Evaluates the performance of a student based on their scores in several subjects. Args: scores (list): A list of integers representing the scores. Returns: tuple: A tuple containing the average score (float) and the grade (string). if not scores: # Handling the case where the scores list might be empty return (0.0, \'F\') average_score = sum(scores) / len(scores) if average_score >= 90: grade = \'A\' elif average_score >= 80: grade = \'B\' elif average_score >= 70: grade = \'C\' elif average_score >= 60: grade = \'D\' else: grade = \'F\' return (average_score, grade)"},{"question":"You are assigned to create a function named `find_majority_element` that takes a list of integers as input and returns the element that appears more than half the time in the list, if such an element exists. If no such element exists, the function should return `None`. A majority element in an array A[] of size n is an element that appears more than n/2 times (and hence there is at most one such element). You may assume the input list is non-empty. The function should: 1. Traverse the input list to count the occurrences of each number. 2. Determine if a number appears more than half the time in the list. 3. Return the majority element if it exists, otherwise return `None`. Here is the function signature: ```python def find_majority_element(nums: list[int]) -> int or None: pass ``` **Requirements:** - Use a dictionary to count occurrences of each number in the list.","solution":"def find_majority_element(nums: list[int]) -> int or None: Returns the majority element in the list if it exists, otherwise returns None. A majority element is an element that appears more than n/2 times. count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 if count[num] > len(nums) // 2: return num return None"},{"question":"You need to implement a function named `merge_sorted_arrays(arr1, arr2)` that takes two sorted arrays as input and returns a single sorted array by merging the two provided arrays. Your function should work as follows: 1. **Parameters**: - `arr1` (list): A list of integers sorted in ascending order. - `arr2` (list): Another list of integers sorted in ascending order. 2. **Return Values**: - A single list containing all the elements from `arr1` and `arr2`, sorted in ascending order. 3. **Conditions**: - If either `arr1` or `arr2` is empty, the function should return the non-empty array. - If both arrays are empty, the function should return an empty list. - The function should not use any built-in sorting functions. **Example**: - `merge_sorted_arrays([1, 3, 5], [2, 4, 6])` should return `[1, 2, 3, 4, 5, 6]`. - `merge_sorted_arrays([], [2, 4, 6])` should return `[2, 4, 6]`. - `merge_sorted_arrays([1, 3, 5], [])` should return `[1, 3, 5]`. - `merge_sorted_arrays([], [])` should return `[]`. Hint: You may utilize a two-pointer technique where you maintain one pointer for each array and compare the elements at those pointers to decide which element should be added to the final merged array.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list): A list of integers sorted in ascending order. arr2 (list): Another list of integers sorted in ascending order. Returns: list: A single list containing all the elements from arr1 and arr2, sorted in ascending order. merged_array = [] i, j = 0, 0 # Traverse both arrays and append the smaller element to the merged array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Collect the remaining elements of arr1, if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Collect the remaining elements of arr2, if any while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"In a sales data analysis task, you are provided with a list of dictionaries, where each dictionary represents a sales record. Each record contains an `id`, `date`, `sales`, and `region`. Your task is to implement a function that computes the total sales for a specified region within a given date range (inclusive). Implement a function `total_sales_in_range(records: List[Dict[str, Any]], start_date: str, end_date: str, region: str) -> float` that takes: 1. `records`, a list of dictionaries where each dictionary has the keys: `\'id\'`, `\'date\'`, `\'sales\'`, and `\'region\'`. 2. `start_date`, a string representing the start date in `YYYY-MM-DD` format. 3. `end_date`, a string representing the end date in `YYYY-MM-DD` format. 4. `region`, a string representing the target sales region. The function should return the total sales in the specified region and date range. Ensure that: - The function correctly handles the date range and includes sales on the start and end dates. - Only consider records that match the specified region. # Example ```python records = [ {\\"id\\": 1, \\"date\\": \\"2023-01-01\\", \\"sales\\": 100.0, \\"region\\": \\"North\\"}, {\\"id\\": 2, \\"date\\": \\"2023-01-05\\", \\"sales\\": 150.0, \\"region\\": \\"South\\"}, {\\"id\\": 3, \\"date\\": \\"2023-01-07\\", \\"sales\\": 200.0, \\"region\\": \\"North\\"}, {\\"id\\": 4, \\"date\\": \\"2023-01-10\\", \\"sales\\": 50.0, \\"region\\": \\"North\\"}, {\\"id\\": 5, \\"date\\": \\"2023-01-10\\", \\"sales\\": 300.0, \\"region\\": \\"South\\"} ] print(total_sales_in_range(records, \\"2023-01-01\\", \\"2023-01-07\\", \\"North\\")) ``` # Expected Output ``` 300.0 ``` # Constraints - Ensure that the date format in the records and the input dates is consistent (`YYYY-MM-DD`). - Use Python\'s `datetime` module to handle date comparisons. - If no records match the criteria, the function should return `0.0`.","solution":"from typing import List, Dict, Any from datetime import datetime def total_sales_in_range(records: List[Dict[str, Any]], start_date: str, end_date: str, region: str) -> float: start_dt = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_dt = datetime.strptime(end_date, \\"%Y-%m-%d\\") total_sales = 0.0 for record in records: record_date = datetime.strptime(record[\'date\'], \\"%Y-%m-%d\\") if start_dt <= record_date <= end_dt and record[\'region\'] == region: total_sales += record[\'sales\'] return total_sales"},{"question":"You are tasked with creating a Python function named `generate_sales_report` that performs the following steps: 1. Check if the input `sales_data` is a list of dictionaries, where each dictionary represents a sale record with the keys: \'item_name\', \'quantity\', and \'price\'. 2. If the input is not valid, raise a `ValueError` with the message \\"Invalid sales data format\\". 3. Calculate the total sales amount for each item. The total sales amount for an item is the sum of `quantity * price` for all records of that item. 4. Print out a report with each item\'s name followed by its total sales amount. 5. Call a function named `write_report_to_file` that takes a string representing the report and a filename `report.txt`, writing the report to this file. Assume `write_report_to_file` is predefined. # Function Signature ```python def generate_sales_report(sales_data: list) -> None: ``` # Example Usage ```python sales_data = [ {\'item_name\': \'apple\', \'quantity\': 10, \'price\': 0.5}, {\'item_name\': \'banana\', \'quantity\': 5, \'price\': 0.75}, {\'item_name\': \'apple\', \'quantity\': 3, \'price\': 0.5}, ] generate_sales_report(sales_data) ``` This should print: ``` apple: 6.5 banana: 3.75 ``` And create a file named `report.txt` with the following content: ``` apple: 6.5 banana: 3.75 ``` # Assumptions - The `write_report_to_file` function is predefined and writes the provided report string to the specified file. - The input list contains valid sales records when it adheres to the described structure.","solution":"def generate_sales_report(sales_data: list) -> None: def write_report_to_file(report: str, filename: str) -> None: with open(filename, \'w\') as file: file.write(report) if not isinstance(sales_data, list) or not all( isinstance(record, dict) and \'item_name\' in record and \'quantity\' in record and \'price\' in record for record in sales_data): raise ValueError(\\"Invalid sales data format\\") total_sales = {} for record in sales_data: item = record[\'item_name\'] quantity = record[\'quantity\'] price = record[\'price\'] if item in total_sales: total_sales[item] += quantity * price else: total_sales[item] = quantity * price report = \'\'.join(f\\"{item}: {total_sales[item]}n\\" for item in sorted(total_sales)) print(report, end=\'\') write_report_to_file(report, \'report.txt\')"},{"question":"You are required to implement a function called `find_substring_anagrams` that finds all starting indices of substrings in a given string `s` that are anagrams of a given string `p`. An anagram is formed by rearranging the letters of another string using all the original letters exactly once. The function should perform the following steps: 1. Create a list to store starting indices of substrings in `s` that are anagrams of `p`. 2. Use a sliding window approach to check substrings of `s` of length equal to `p` for being anagrams. 3. For each window position, compare the character frequency of the substring with the frequency of the characters in `p`. 4. If the frequencies match, add the starting index of the substring to the list of results. **Constraints**: - Only lowercase English letters. - 1 <= len(s), len(p) <= 10000 # Function Signature: ```python def find_substring_anagrams(s: str, p: str) -> List[int]: pass ``` # Example Usage: ```python result = find_substring_anagrams(\\"cbaebabacd\\", \\"abc\\") print(result) # Output: [0, 6] result = find_substring_anagrams(\\"abab\\", \\"ab\\") print(result) # Output: [0, 1, 2] ``` # Explanation: 1. In the first example, the substrings `cba` (starting at index 0) and `bac` (starting at index 6) are anagrams of `abc`. 2. In the second example, the substrings `ab` (starting at indices 0, 1, and 2) are anagrams of `ab`.","solution":"from typing import List from collections import Counter def find_substring_anagrams(s: str, p: str) -> List[int]: Find all starting indices of substrings in `s` that are anagrams of `p`. p_len = len(p) s_len = len(s) if p_len > s_len: return [] result = [] p_counter = Counter(p) s_counter = Counter(s[:p_len]) if p_counter == s_counter: result.append(0) for i in range(1, s_len - p_len + 1): start_char = s[i - 1] end_char = s[i + p_len - 1] s_counter[end_char] += 1 s_counter[start_char] -= 1 if s_counter[start_char] == 0: del s_counter[start_char] if s_counter == p_counter: result.append(i) return result"},{"question":"Create a function `transpose_matrix` that takes a matrix (a list of lists) as its input and returns the transposed version of the matrix. The transposed matrix is obtained by swapping the rows and columns of the original matrix. Here\'s what the `transpose_matrix` function should achieve: 1. Accept a matrix, where each element in the matrix is a list representing a row. 2. Create a new matrix where each row in the original matrix becomes a column in the new matrix. 3. Return the new transposed matrix. **Example:** Input: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` Another Example: Input: ``` [ [1, 2], [3, 4], [5, 6] ] ``` Output: ``` [ [1, 3, 5], [2, 4, 6] ] ``` To complete this task, you may make use of list comprehensions for matrix transposition. **Function Signature:** ```python def transpose_matrix(matrix: list[list[int]]) -> list[list[int]]: pass ```","solution":"def transpose_matrix(matrix): Returns the transposed version of the input matrix. return [list(row) for row in zip(*matrix)]"},{"question":"You are asked to write a function called `missing_elements` that finds the missing elements in a given list of integers and returns them as a sorted list. This function will help identify the gaps in a sequence of numbers between the minimum and maximum values of the given list. # Function Signature ```python def missing_elements(arr: list) -> list: pass ``` # Parameters - `arr` (list): A list of integers, which can contain positive or negative numbers and may not be sorted. # Returns - `list`: A sorted list of the missing integers in the sequence from the minimum value to the maximum value in the given list. # Requirements - Find the minimum and maximum values in the input list. - Determine all integers that lie between the minimum and maximum values but are not present in the input list. - Return these missing integers as a sorted list. # Example ```python arr = [1, 3, 5, 7, 9] missing_elements(arr) # should return [2, 4, 6, 8] arr = [10, 14, 12, 18] missing_elements(arr) # should return [11, 13, 15, 16, 17] ``` In this example, the function should identify and return the missing integers within the range defined by the minimum and maximum values in the provided list.","solution":"def missing_elements(arr: list) -> list: Returns a sorted list of missing integers in the sequence from the minimum value to the maximum value in the given list. if not arr: return [] min_val = min(arr) max_val = max(arr) full_set = set(range(min_val, max_val + 1)) missing_set = full_set - set(arr) return sorted(list(missing_set))"},{"question":"You are developing a system to manage a collection of books in a library. Each book has the following attributes: title, author, publication year, and genre. The library keeps track of all books and allows for searching and adding new books. Your task is to implement a function `search_books(query, library)` that searches for books in the library based on a given query. The query should match if the book\'s title, author, or genre contains the query string (case-insensitive). If no query is provided, the function should return all books. **Function Signature:** ```python def search_books(query, library): Search for books in the library based on a query. Parameters: query (str): Query string to search for in book title, author, or genre. library (list): A list of dictionaries, each representing a book with \'title\', \'author\', \'publication_year\', and \'genre\' as keys. Returns: list: A list of dictionaries representing books that match the query. ``` **Input constraints:** - `query (str)`: The search query (a string). It can be an empty string, in which case all books should be returned. - `library (list)`: A list of dictionaries where each dictionary has the following structure: ```python { \'title\': str, \'author\': str, \'publication_year\': int, \'genre\': str } ``` **Output:** - The function should return a list of dictionaries representing books that match the query. The search should be case-insensitive. **Example:** ```python library = [ {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'publication_year\': 1925, \'genre\': \'Fiction\'}, {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'publication_year\': 1960, \'genre\': \'Fiction\'}, {\'title\': \'A Brief History of Time\', \'author\': \'Stephen Hawking\', \'publication_year\': 1988, \'genre\': \'Non-Fiction\'}, ] # Searching for \'Fiction\' search_books(\'Fiction\', library) # Output: [ # {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'publication_year\': 1925, \'genre\': \'Fiction\'}, # {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'publication_year\': 1960, \'genre\': \'Fiction\'} # ] ```","solution":"def search_books(query, library): Search for books in the library based on a query. Parameters: query (str): Query string to search for in book title, author, or genre. library (list): A list of dictionaries, each representing a book with \'title\', \'author\', \'publication_year\', and \'genre\' as keys. Returns: list: A list of dictionaries representing books that match the query. if not query: return library query_lower = query.lower() result = [] for book in library: if (query_lower in book[\'title\'].lower() or query_lower in book[\'author\'].lower() or query_lower in book[\'genre\'].lower()): result.append(book) return result"},{"question":"You are provided with a DataFrame that contains information regarding daily stock prices for various companies. The DataFrame is structured as follows: - `date`: The date of the stock price. - `company`: The name of the company. - `closing_price`: The closing price of the stock on that date. Your task is to write a function `highest_closing_price(stock_df)` that takes in this DataFrame and generates a line graph displaying the highest closing price for each company over the entire date range. You must use the `matplotlib` library to create the plot, specifically utilizing `matplotlib.pyplot.show` to display the figure. In the line graph: 1. The x-axis should represent the companies. 2. The y-axis should represent the highest closing price. 3. Each company\'s highest closing price should be marked clearly on the graph. Additionally, you should label each axis appropriately, and ensure that the x-axis labels are rotated by 45 degrees for better readability. # Example Given the following `stock_df` DataFrame: | date | company | closing_price | |------------|---------------|---------------| | 2023-01-01 | Company A | 150 | | 2023-01-02 | Company B | 200 | | 2023-01-01 | Company A | 180 | | 2023-01-03 | Company B | 210 | | 2023-01-03 | Company C | 120 | | 2023-01-04 | Company C | 130 | The line graph generated by the function call should display points for Company A, Company B, and Company C at the highest closing prices of 180, 210, and 130, respectively. ```python highest_closing_price(stock_df) ``` # Function Signature ```python def highest_closing_price(stock_df): # your code here ```","solution":"import matplotlib.pyplot as plt def highest_closing_price(stock_df): Takes a DataFrame with columns \'date\', \'company\', and \'closing_price\', and generates a line graph showing the highest closing price for each company. # Find the highest closing price for each company highest_prices = stock_df.groupby(\'company\')[\'closing_price\'].max() # Plotting plt.figure(figsize=(10, 6)) plt.plot(highest_prices.index, highest_prices.values, marker=\'o\') # Labeling the plot plt.xlabel(\'Company\') plt.ylabel(\'Highest Closing Price\') plt.title(\'Highest Closing Price for Each Company\') # Rotate x-axis labels plt.xticks(rotation=45) # Display the plot plt.show()"},{"question":"You are required to implement a simple analytics function for analyzing user actions in a web application. Your function called `user_action_summary` should receive as input a list of dictionaries. Each dictionary represents a user action and has the following keys: - `user_id`: A unique identifier for the user. - `action`: A string representing the type of action performed (e.g., \\"login\\", \\"logout\\", \\"purchase\\", \\"view\\"). - `timestamp`: An integer representing the Unix timestamp when the action occurred. The `user_action_summary` function should generate a summary of user actions in the form of a dictionary with the following keys: - `total_users`: The total number of unique users. - `total_actions`: The total number of actions performed. - `actions_per_type`: A dictionary where keys are action types and values are the total count of each action type. - `first_action_timestamp`: The timestamp of the earliest action. - `last_action_timestamp`: The timestamp of the latest action. Here\'s a template for your function: ```python def user_action_summary(actions): # Your code here pass # Example input actions = [ {\\"user_id\\": 1, \\"action\\": \\"login\\", \\"timestamp\\": 1615152000}, {\\"user_id\\": 2, \\"action\\": \\"purchase\\", \\"timestamp\\": 1615153000}, {\\"user_id\\": 1, \\"action\\": \\"view\\", \\"timestamp\\": 1615154000}, {\\"user_id\\": 2, \\"action\\": \\"logout\\", \\"timestamp\\": 1615155000}, {\\"user_id\\": 1, \\"action\\": \\"logout\\", \\"timestamp\\": 1615156000} ] summary = user_action_summary(actions) print(summary) ``` Your function should produce an output similar to the following: ```python { \'total_users\': 2, \'total_actions\': 5, \'actions_per_type\': { \'login\': 1, \'purchase\': 1, \'view\': 1, \'logout\': 2 }, \'first_action_timestamp\': 1615152000, \'last_action_timestamp\': 1615156000 } ``` Your implementation should address the following requirements: 1. Count the total number of unique users. 2. Count the total number of actions. 3. Count actions by their type. 4. Identify the earliest action timestamp. 5. Identify the latest action timestamp.","solution":"def user_action_summary(actions): Analyzes user actions and produces a summary of the actions. Parameters: actions (list): A list of dictionaries containing user actions. Returns: dict: A summary of the user actions. if not actions: return { \'total_users\': 0, \'total_actions\': 0, \'actions_per_type\': {}, \'first_action_timestamp\': None, \'last_action_timestamp\': None } unique_users = set() total_actions = 0 actions_per_type = {} first_action_timestamp = float(\'inf\') last_action_timestamp = float(\'-inf\') for action in actions: user_id = action[\'user_id\'] action_type = action[\'action\'] timestamp = action[\'timestamp\'] unique_users.add(user_id) total_actions += 1 if action_type in actions_per_type: actions_per_type[action_type] += 1 else: actions_per_type[action_type] = 1 if timestamp < first_action_timestamp: first_action_timestamp = timestamp if timestamp > last_action_timestamp: last_action_timestamp = timestamp return { \'total_users\': len(unique_users), \'total_actions\': total_actions, \'actions_per_type\': actions_per_type, \'first_action_timestamp\': first_action_timestamp, \'last_action_timestamp\': last_action_timestamp }"},{"question":"Reads a CSV file and summarizes the data for the specified column. Functionality: - Load a CSV file into a pandas DataFrame. - Calculate and return the mean, median, standard deviation, and quartiles (1st and 3rd) for the specified column. - Handle cases where the specified column does not exist with an appropriate error message. The function should raise the exception for: - FileNotFoundError: If the specified file does not exist. - ValueError: If the specified column does not exist in the DataFrame. You should write self-contained code starting with: ``` import pandas as pd def task_func(csv_file, column_name): ```","solution":"import pandas as pd def task_func(csv_file, column_name): Reads a CSV file and summarizes the data for the specified column. Parameters: csv_file (str): The path to the CSV file. column_name (str): The column name to summarize. Returns: dict: A dictionary with mean, median, standard deviation, and quartiles (1st and 3rd) of the specified column. Raises: FileNotFoundError: If the specified file does not exist. ValueError: If the specified column does not exist in the DataFrame. # Try to read the CSV file try: df = pd.read_csv(csv_file) except FileNotFoundError: raise FileNotFoundError(f\\"The file \'{csv_file}\' does not exist.\\") # Check if the specified column exists in the DataFrame if column_name not in df.columns: raise ValueError(f\\"The column \'{column_name}\' does not exist in the DataFrame.\\") # Calculate statistics mean = df[column_name].mean() median = df[column_name].median() std_dev = df[column_name].std() q1 = df[column_name].quantile(0.25) q3 = df[column_name].quantile(0.75) # Return the results in a dictionary return { \'mean\': mean, \'median\': median, \'std_dev\': std_dev, \'q1\': q1, \'q3\': q3 }"},{"question":"Write a Python function that recursively flattens a nested list. The function, `flatten_list`, should take one argument - a nested list of arbitrary depth, containing integers and/or lists. The function should return a single flattened list of integers. Follow these steps in your implementation: 1. Initialize an empty list to collect flattened integers. 2. Iterate through each element of the nested list: - If the element is an integer, append it to the result list. - If the element is a list, recursively call the `flatten_list` function on this element and extend the result list with the returned flattened list. 3. Return the result list. The function should be named `flatten_list`. Example: ```python flatten_list([1, [2, [3, 4], 5], 6, [7, 8, [9]]]) ``` This should return: ```python [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` ```python def flatten_list(nested_list): # Your implementation here ```","solution":"def flatten_list(nested_list): Recursively flattens a nested list of integers. Args: nested_list (list): A nested list containing integers and/or other lists. Returns: list: A single flattened list of integers. flat_list = [] for element in nested_list: if isinstance(element, list): flat_list.extend(flatten_list(element)) else: flat_list.append(element) return flat_list"},{"question":"You need to create a function that processes and formats time intervals. Your function should accept a list of time intervals (in minutes) and produce a formatted string representation that combines overlapping or adjacent intervals. Implement the function `format_time_intervals` to achieve this task. The function signature should be: ```python def format_time_intervals(intervals: list) -> str: ``` # Function Details: 1. **Parameters**: - `intervals` (list): A list of tuples, where each tuple contains two integers representing the start and end times of the interval in minutes. 2. **Return**: - A formatted string representing the combined intervals, with each interval on a new line. The intervals should be in the form \\"HH:MM-HH:MM\\". # Task: - Combine any overlapping or adjacent intervals. - Convert minutes to \\"HH:MM\\" format. - Sort the intervals by their start times before combining. - Format the resulting combined intervals as described. # Example: Here is an example invocation of the function: ```python intervals = [(60, 120), (150, 180), (100, 170), (200, 240)] print(format_time_intervals(intervals)) ``` This should produce the following output: ``` 01:00-02:50 03:20-04:00 ``` # Instructions: 1. Sort the intervals by start time. 2. Merge any overlapping or adjacent intervals. 3. Convert the final intervals from minutes to \\"HH:MM\\" format. 4. Return a formatted string with each interval on a new line. # Example Explanation: In the given example: 1. The intervals [(60, 120), (100, 170)] are merged into [(60, 170)]. 2. The sorted intervals list would be [(60, 170), (150, 180), (200, 240)], which after merging overlapping intervals becomes: - [(60, 170), (150, 180)] merge into [(60, 180)] - Thus the final merged intervals are [(60, 170), (200, 240)]. 3. These intervals are converted to \\"HH:MM-HH:MM\\" format, resulting in the output: ``` 01:00-02:50 03:20-04:00 ```","solution":"def format_time_intervals(intervals): Convert a list of intervals in minutes into a formatted string that combines overlapping or adjacent intervals. The time is formatted as \\"HH:MM-HH:MM\\" for each interval. Parameters: intervals (list): A list of tuples, where each tuple contains two integers representing the start and end times of the interval in minutes. Returns: str: A formatted string representing the combined intervals, with each interval on a new line. # Sort intervals by starting time sorted_intervals = sorted(intervals) # Merge overlapping or adjacent intervals merged_intervals = [] for start, end in sorted_intervals: if merged_intervals and start <= merged_intervals[-1][1]: merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], end)) else: merged_intervals.append((start, end)) # Convert each interval to \\"HH:MM-HH:MM\\" format def to_hhmm(minutes): return f\\"{minutes // 60:02}:{minutes % 60:02}\\" formatted_intervals = [f\\"{to_hhmm(start)}-{to_hhmm(end)}\\" for start, end in merged_intervals] return \\"n\\".join(formatted_intervals)"},{"question":"In this problem, you are tasked with writing a Python function to simulate a simplified version of a document editor\'s auto-save feature. The function will keep track of the modifications made to a text document and periodically save these changes to a file while ensuring that no concurrent save operations overlap. You will implement the `AutoSave` class which provides methods to modify the document text, save changes, and retrieve the current state of the document. The save operation should be controlled so that it runs in the background without disrupting the main operations (modifications and retrieval of the document). Implement the class `AutoSave` with the following methods: 1. `__init__(self, filename: str, interval: int = 5) -> None`: Initializes the `AutoSave` instance with a file name for saving the document, and an optional auto-save interval in seconds (default is 5 seconds). 2. `modify(self, new_text: str) -> None`: Appends `new_text` to the current document text. 3. `save(self) -> None`: Saves the current document text to the specified file, ensuring no two saves overlap. 4. `get_document(self) -> str`: Returns the current state of the document text. 5. `start_auto_save(self) -> None`: Starts the auto-save mechanism which periodically calls the `save` method. 6. `stop_auto_save(self) -> None`: Stops the auto-save mechanism. Use appropriate threading mechanisms to handle periodic auto-saving without overlapping save operations. **Signature:** ```python class AutoSave: def __init__(self, filename: str, interval: int = 5) -> None: pass def modify(self, new_text: str) -> None: pass def save(self) -> None: pass def get_document(self) -> str: pass def start_auto_save(self) -> None: pass def stop_auto_save(self) -> None: pass ``` # Example: ```python autosave = AutoSave(\\"document.txt\\", 10) autosave.modify(\\"First line.n\\") print(autosave.get_document()) # Output: \\"First line.n\\" autosave.save() # Simulated save to \\"document.txt\\" # Adding more text autosave.modify(\\"Second line.n\\") print(autosave.get_document()) # Output: \\"First line.nSecond line.n\\" autosave.start_auto_save() # After 10 seconds, document is automatically saved # Stop the auto-save mechanism before exiting the program autosave.stop_auto_save() ``` **Notes:** - Ensure that the `save(self)` method is thread-safe and prevents concurrent save operations. - Use Python\'s `threading` module to implement the periodic auto-save functionality. - In the actual implementation, make sure that writing to the file is handled correctly.","solution":"import threading import time from typing import Optional class AutoSave: def __init__(self, filename: str, interval: int = 5) -> None: self.filename = filename self.interval = interval self.document_text = \\"\\" self.lock = threading.Lock() self.auto_save_thread: Optional[threading.Thread] = None self.auto_save_running = False def modify(self, new_text: str) -> None: with self.lock: self.document_text += new_text def save(self) -> None: with self.lock: with open(self.filename, \'w\') as f: f.write(self.document_text) def get_document(self) -> str: with self.lock: return self.document_text def _auto_save_runner(self) -> None: while self.auto_save_running: time.sleep(self.interval) self.save() def start_auto_save(self) -> None: if not self.auto_save_running: self.auto_save_running = True self.auto_save_thread = threading.Thread(target=self._auto_save_runner) self.auto_save_thread.start() def stop_auto_save(self) -> None: if self.auto_save_running: self.auto_save_running = False if self.auto_save_thread is not None: self.auto_save_thread.join()"},{"question":"You are tasked with writing a Python function named `find_last_occurrence` which finds the last occurrence of a specified element in a given list. The function should return the index of the last occurrence of the element. If the element does not exist in the list, the function should return `-1`. # Function Prototype ```python def find_last_occurrence(lst: list, elem) -> int: pass ``` # Requirements 1. **Input:** - `lst` (list): A list of elements. - `elem`: The element to find the last occurrence of in the list. This can be of any data type that is used in `lst`. 2. **Output:** - An integer representing the index of the last occurrence of `elem` in `lst`. If `elem` is not present in `lst`, return `-1`. # Constraints - The function should not use built-in methods like `list.reverse()` or `list.index()`. - You should iterate through the list to find the last occurrence. # Examples 1. `find_last_occurrence([1, 2, 3, 4, 2, 3, 5, 2], 2)` should return `7`. 2. `find_last_occurrence([\'a\', \'b\', \'c\', \'d\', \'e\'], \'c\')` should return `2`. 3. `find_last_occurrence([1, 2, 3, 4, 5], 6)` should return `-1`. 4. `find_last_occurrence([], 1)` should return `-1`.","solution":"def find_last_occurrence(lst: list, elem) -> int: Finds the index of the last occurrence of the element in the list. Returns -1 if the element is not found. last_index = -1 for index in range(len(lst)): if lst[index] == elem: last_index = index return last_index"},{"question":"In this task, you are required to implement a function that reads a CSV file and returns the summary statistics (mean, median, mode) for a specified column. This function can be useful for quickly analyzing data in CSV files without the need for dedicated software. Your task is to implement a function `summary_statistics(file_path: str, column_name: str) -> Dict[str, float]` that takes two parameters: `file_path`, which is the path to the CSV file, and `column_name`, which is the name of the column for which the summary statistics should be calculated. The function should return a dictionary containing the mean, median, and mode of the specified column. # Requirements: - Use the `csv` module to read the CSV file. - Use the `statistics` module to calculate the mean, median, and mode. - Handle cases where the column contains non-numeric data by skipping those entries. - Handle cases where the column is missing by raising a `ValueError`. - Handle cases where the file does not exist by raising a `FileNotFoundError`. # Example: ```python import csv import statistics from typing import Dict def summary_statistics(file_path: str, column_name: str) -> Dict[str, float]: # Your implementation here # Example usage: # Assuming there is a file `data.csv` with a column `age` # summary_statistics(\'data.csv\', \'age\') # Output might be: # { # \'mean\': 30.5, # \'median\': 28.0, # \'mode\': 25.0 # } ``` When you call `summary_statistics(\'data.csv\', \'age\')`, it should read the column `age` from the specified CSV file and return a dictionary with the mean, median, and mode of the values in that column. If the specified column does not exist, raise a `ValueError`. If the file does not exist, raise a `FileNotFoundError`.","solution":"import csv import statistics from typing import Dict def summary_statistics(file_path: str, column_name: str) -> Dict[str, float]: try: with open(file_path, \'r\') as csvfile: reader = csv.DictReader(csvfile) if column_name not in reader.fieldnames: raise ValueError(f\\"Column \'{column_name}\' not found in the file.\\") column_data = [] for row in reader: try: value = float(row[column_name]) column_data.append(value) except ValueError: continue # Skip non-numeric data if not column_data: raise ValueError(f\\"No numeric data found in column \'{column_name}\'.\\") mean = statistics.mean(column_data) median = statistics.median(column_data) mode = statistics.mode(column_data) return { \'mean\': mean, \'median\': median, \'mode\': mode } except FileNotFoundError: raise FileNotFoundError(f\\"File \'{file_path}\' not found.\\")"},{"question":"# Problem: Generate Pascal\'s Triangle with a Twist You are required to generate Pascal\'s Triangle with a modification such that the triangle is integer-valued but the starting element can be any integer. # Context: - Pascal\'s Triangle is a triangular array of the binomial coefficients. - Traditionally, it starts with 1 at the top and each number is the sum of the two numbers directly above it. - In this problem, you will start with a given integer at the top. # Function: Implement the function `generate_twisted_pascals_triangle(n: int, start_value: int) -> List[List[int]]` that generates the first `n` rows of Pascal\'s Triangle starting with `start_value`. # Steps to Follow: 1. Start with a list containing the `start_value`. 2. For each subsequent row, calculate each element as the sum of the two numbers directly above it, extending the triangle to a total of `n` rows. # Input: - `n`: An integer representing the number of rows to generate. (1 ≤ `n` ≤ 30) - `start_value`: An integer where the triangle\'s top element starts. (-50 ≤ `start_value` ≤ 50) # Output: - A list of lists of integers representing the triangle\'s rows. Each list is a row in Pascal\'s Triangle. # Example: Given `n = 5` and `start_value = 3`, the function should return: ``` output = [ [3], [3, 3], [3, 6, 3], [3, 9, 9, 3], [3, 12, 18, 12, 3] ] ``` # Requirements: Do not use any library functions to generate Pascal\'s Triangle. Manually compute and construct the triangle. # Notes: - The first row always contains a single element: the `start_value`. - Each subsequent row `i` has `i+1` elements. # Hints: - You may find it helpful to first append `0` at both ends of the previous row and then compute the sum for each adjacent element pair to form the new row.","solution":"def generate_twisted_pascals_triangle(n, start_value): triangle = [] if n <= 0: return triangle # return empty list if zero or negative rows are requested # First row is a single \\"start_value\\" triangle.append([start_value]) for i in range(1, n): prev_row = triangle[-1] new_row = [] # Start each row with the start_value new_row.append(start_value) # Calculate the intermediate values by adding adjacent elements from previous row for j in range(1, i): new_row.append(prev_row[j-1] + prev_row[j]) # End each row with the start_value new_row.append(start_value) triangle.append(new_row) return triangle"},{"question":"You are required to develop a function that tracks and analyzes the stock prices of a company over a given period. Your function will calculate the maximum profit that can be achieved by buying and then selling one share of the stock within the provided time frame. This will help users determine the best days to buy and sell to maximize their profit. You need to create a function named `max_profit` that takes one parameter: 1. `prices`: A list of integers representing the stock price of a company over successive days. Your function should: 1. Identify the maximum possible profit that can be made by buying on one day and selling on another later day. 2. If no profit can be made, return 0. **Function Signature:** ```python def max_profit(prices: list) -> int: pass ``` # Example: ```python prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Expected output: 5 (buy on day 2 at price 1 and sell on day 5 at price 6) prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Expected output: 0 (no profit can be made as prices are in descending order) ``` # Notes: - You are only allowed to complete one transaction (i.e., buy and then sell one share of the stock). - The buying must precede the selling within the list. - The provided list will have at least one day\'s price.","solution":"def max_profit(prices: list) -> int: Calculate the maximum profit that can be achieved by buying and then selling one share of the stock within the provided time frame. :param prices: List of integers representing the stock price of a company over successive days. :return: The maximum profit that can be made, or 0 if no profit is possible. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You work for a company that wants to create a basic recommendation system for their products. The company has a catalog of products, where each product is defined by a set of features. Each user provides ratings for a subset of the products they have used. Implement a function `recommend_products(user_ratings, product_features, top_n=3)` that recommends products to a specific user. The function will compute a score for each unrated product based on the similarity between the features of the rated products and the unrated ones. Use the cosine similarity measure to compute the score. The function should return the indices of the top `n` highest-scored products that the user has not rated yet. - **Parameters:** - `user_ratings` (list of tuples): A list where each tuple contains `(product_index, rating)`. - `product_features` (numpy array): A 2D array where each row represents the feature vector of a product. - `top_n` (int, optional): The number of top recommendations to return (default is 3). - **Returns:** - `recommendations` (list): A list of indices of the top `n` recommended products. **Cosine similarity** between two vectors A and B is computed as: [ text{similarity}(A, B) = frac{A cdot B}{|A| |B|} ] Here, (A cdot B) is the dot product of vectors A and B, and (|A|) denotes the Euclidean norm of vector A. **Function Signature:** ```python import numpy as np def recommend_products(user_ratings, product_features, top_n=3): # Your code here pass # Example usage: # user_ratings = [(0, 5), (2, 4), (4, 3)] # product_features = np.array([ # [1, 0, 0], # [0, 1, 1], # [1, 0, 1], # [0, 1, 0], # [1, 1, 0] # ]) # top_n = 2 # recommendations = recommend_products(user_ratings, product_features, top_n) # Example output: [1, 3] ``` Ensure that your implementation makes use of the following NumPy functions: - `numpy.dot`: To perform dot product operations. - `numpy.linalg.norm`: To compute the Euclidean norm of a vector.","solution":"import numpy as np def recommend_products(user_ratings, product_features, top_n=3): Recommends products to a specific user based on the similarity between the features of the rated products and the unrated ones. Parameters: - user_ratings (list of tuples): A list where each tuple contains (product_index, rating). - product_features (numpy array): A 2D array where each row represents the feature vector of a product. - top_n (int, optional): The number of top recommendations to return (default is 3). Returns: - recommendations (list): A list of indices of the top n recommended products. def cosine_similarity(v1, v2): Computes the cosine similarity between two vectors. return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2)) rated_products = {index for index, _ in user_ratings} unrated_products = [i for i in range(len(product_features)) if i not in rated_products] similarity_scores = [] for i in range(len(product_features)): if i in rated_products: continue score = 0 for rated_index, rating in user_ratings: similarity = cosine_similarity(product_features[i], product_features[rated_index]) score += similarity * rating similarity_scores.append((i, score)) # Sort by score in descending order and select top_n indices similarity_scores.sort(key=lambda x: x[1], reverse=True) recommendations = [index for index, _ in similarity_scores[:top_n]] return recommendations"},{"question":"You are tasked with creating a function `compare_directories(dir1, dir2, report_file)` that compares the contents of two directories and generates a discrepancy report. This function should handle the following tasks: 1. Use the `os` library to iterate through the contents of `dir1` and `dir2`. 2. Identify any files that exist in one directory but not the other. 3. Identify files that exist in both directories but have different content. Content comparison should be based on file content, not metadata. 4. Generate a detailed report of the findings, including: - Files unique to each directory. - Files present in both directories but with differing content. 5. Write the discrepancy report to a specified output file given by `report_file`, clearly listing the discrepancies in a human-readable format. For the purposes of this function, assume that: - Both input paths are valid directories. - Files with identical names and paths are at the same relative location within both directories. - The directories may contain nested subdirectories, and comparison should be recursive. Here\'s an example signature for the function: ```python import os def compare_directories(dir1, dir2, report_file): # Implement the function here pass ```","solution":"import os import filecmp def compare_directories(dir1, dir2, report_file): Compares the contents of two directories (recursively) and generates a report of discrepancies :param dir1: Path to the first directory :param dir2: Path to the second directory :param report_file: Path to the output file where the discrepancy report will be written dir1_files = {} dir2_files = {} # Use os.walk to recursively retrieve all file paths. for root, _, files in os.walk(dir1): for file in files: filepath = os.path.relpath(os.path.join(root, file), dir1) dir1_files[filepath] = os.path.join(root, file) for root, _, files in os.walk(dir2): for file in files: filepath = os.path.relpath(os.path.join(root, file), dir2) dir2_files[filepath] = os.path.join(root, file) unique_to_dir1 = set(dir1_files) - set(dir2_files) unique_to_dir2 = set(dir2_files) - set(dir1_files) different_files = {file for file in set(dir1_files) & set(dir2_files) if not filecmp.cmp(dir1_files[file], dir2_files[file], shallow=False)} report_lines = [] if unique_to_dir1: report_lines.append(\'Files unique to {}:\'.format(dir1)) for file in sorted(unique_to_dir1): report_lines.append(file) report_lines.append(\'\') if unique_to_dir2: report_lines.append(\'Files unique to {}:\'.format(dir2)) for file in sorted(unique_to_dir2): report_lines.append(file) report_lines.append(\'\') if different_files: report_lines.append(\'Files present in both directories but with differing content:\') for file in sorted(different_files): report_lines.append(file) report_lines.append(\'\') with open(report_file, \'w\') as report: report.write(\'n\'.join(report_lines))"},{"question":"# Problem: Product Stock Management You are required to implement a function `manage_stock` that helps manage the stock of products in a warehouse. The function should take two inputs: a list of dictionaries representing the current stock of products and a list of dictionaries representing the new shipments of products. Each dictionary contains a product name as the key and the quantity as the value. The function should update the stock with the quantities from the new shipments and return a dictionary that represents the updated stock. # Requirements - **Function Name**: `manage_stock` - **Input**: - `current_stock`: A list of dictionaries, each containing a single product and its quantity. - `new_shipments`: A list of dictionaries, each containing a single product and its quantity. - **Output**: A dictionary with updated stock. # Details 1. Each dictionary in `current_stock` and `new_shipments` will have a product name as the key and the quantity as the value. 2. If a product in `new_shipments` already exists in `current_stock`, its quantity should be added to the current quantity. 3. If a product in `new_shipments` does not exist in `current_stock`, it should be added to the final stock. 4. The function should return a single dictionary representing the updated stock. # Example ```python def manage_stock(current_stock: list, new_shipments: list) -> dict: # Your implementation here # Test Example current_stock = [{\'apple\': 50}, {\'banana\': 30}, {\'orange\': 20}] new_shipments = [{\'apple\': 25}, {\'banana\': 10}, {\'grape\': 60}] assert manage_stock(current_stock, new_shipments) == {\'apple\': 75, \'banana\': 40, \'orange\': 20, \'grape\': 60} ``` # Input 1. `current_stock`: A list of dictionaries with product names and their quantities. 2. `new_shipments`: A list of dictionaries with product names and their quantities. # Output - A dictionary with updated stock quantities. # Constraints - All product names are in lowercase and consist only of alphabetic characters. - Quantities are non-negative integers. **Note**: Ensure your function handles the aggregation of stock quantities correctly.","solution":"def manage_stock(current_stock, new_shipments): Updates the current stock with new shipment quantities. Args: current_stock (list): A list of dictionaries representing the current stock. new_shipments (list): A list of dictionaries representing the new shipments. Returns: dict: A dictionary with updated stock quantities. stock = {} # Consolidate current stock into a single dictionary for item in current_stock: for product, quantity in item.items(): if product in stock: stock[product] += quantity else: stock[product] = quantity # Add new shipments to the consolidated stock for shipment in new_shipments: for product, quantity in shipment.items(): if product in stock: stock[product] += quantity else: stock[product] = quantity return stock"},{"question":"In this problem, you will use the `random` and `time` libraries to simulate a simple dice-rolling game. The game rolls two dice, calculates their sum, and keeps track of the frequency of each possible sum. You are requested to write a function `simulate_dice_rolls` that takes one parameter: `n` (the number of times the dice are rolled). Implement the function `simulate_dice_rolls(n)` which: 1. Simulates rolling two six-sided dice `n` times. 2. Calculates the sum of the numbers on the two dice for each roll. 3. Keeps track of the frequency of each possible sum (from 2 to 12). 4. Prints the frequency of each sum after all rolls are done. # Function Signature ```python def simulate_dice_rolls(n: int) -> None: pass ``` # Example ```python simulate_dice_rolls(100) ``` The above call should simulate rolling the dice 100 times and print the frequency of each possible sum (2 to 12). # Output Example ``` Sum 2: 3 times Sum 3: 5 times Sum 4: 8 times Sum 5: 10 times Sum 6: 12 times Sum 7: 21 times Sum 8: 18 times Sum 9: 9 times Sum 10: 7 times Sum 11: 4 times Sum 12: 3 times ``` # Notes - Make sure the output format matches the example above, where each `Sum x:` is followed by the frequency and the word `times`. - Use the `random.randint` function to simulate the rolling of the dice. - The function should aggregate and print the results after all rolls are complete. - Ensure the results and frequencies are realistic for the given number of rolls.","solution":"import random from collections import defaultdict def simulate_dice_rolls(n: int) -> None: Simulates rolling two six-sided dice n times and prints the frequency of each possible sum. Parameters: n (int): The number of times the dice are rolled. frequency = defaultdict(int) for _ in range(n): die1 = random.randint(1, 6) die2 = random.randint(1, 6) total = die1 + die2 frequency[total] += 1 for sum_value in range(2, 13): print(f\\"Sum {sum_value}: {frequency[sum_value]} times\\")"},{"question":"Write a function that utilizes the `pandas` library to read a CSV file containing employee data and perform various data manipulations. The file contains the columns: \'Employee ID\', \'Name\', \'Age\', \'Department\', \'Salary\', and \'Date of Joining\'. Your function should be named `process_employee_data` and should perform the following tasks in order: 1. Load the CSV file into a pandas DataFrame. 2. Fill any missing values in the \'Salary\' column with the median salary. 3. Add a new column \'Years with Company\' that calculates the number of years an employee has been with the company from the \'Date of Joining\' to the current date. 4. Filter the DataFrame to include only employees from the \'Marketing\' department. 5. Sort the filtered DataFrame by \'Salary\' in descending order. 6. Save the final DataFrame to a new CSV file. # Function Signature ```python def process_employee_data(input_file, output_file): pass ``` # Parameters - `input_file` (str): A string representing the path to the CSV file containing the employee data. - `output_file` (str): A string representing the path where the resulting CSV file should be saved. # Requirements - Use the `pandas.read_csv` function to load the data. - Use the `DataFrame.fillna` method to fill missing values. - Use the `datetime` module to calculate the \'Years with Company\'. - Filter and sort the DataFrame using `pandas` functions. - Save the final DataFrame using the `pandas.DataFrame.to_csv` method. # Example ```python input_file = \\"data/employees.csv\\" output_file = \\"data/marketing_employees.csv\\" process_employee_data(input_file, output_file) ``` After running the function with the above parameters, a CSV file named `marketing_employees.csv` should be created in the specified directory, containing the filtered and sorted employee data with the additional \'Years with Company\' column.","solution":"import pandas as pd from datetime import datetime def process_employee_data(input_file, output_file): # Load the CSV file into a pandas DataFrame df = pd.read_csv(input_file) # Fill any missing values in the \'Salary\' column with the median salary median_salary = df[\'Salary\'].median() df[\'Salary\'].fillna(median_salary, inplace=True) # Add a new column \'Years with Company\' current_year = datetime.now().year df[\'Date of Joining\'] = pd.to_datetime(df[\'Date of Joining\']) df[\'Years with Company\'] = current_year - df[\'Date of Joining\'].dt.year # Filter the DataFrame to include only employees from the \'Marketing\' department df_marketing = df[df[\'Department\'] == \'Marketing\'] # Sort the filtered DataFrame by \'Salary\' in descending order df_marketing_sorted = df_marketing.sort_values(by=\'Salary\', ascending=False) # Save the final DataFrame to a new CSV file df_marketing_sorted.to_csv(output_file, index=False)"},{"question":"You are required to write a Python function named `word_ladder_steps` that computes the shortest path (in steps) between two given words in the English language, utilizing the concept of a word ladder. In a word ladder: 1. Only one letter can be changed at a time. 2. Each transformed word must exist in the provided word list. Given: - A start word `start_word` (a string). - An end word `end_word` (a string) of the same length as the start word. - A list of words `word_list` (list of strings) containing valid intermediate words. Your task is to find and return the minimum number of steps required to transform the `start_word` into the `end_word`. If it is not possible to transform the `start_word` into the `end_word` using the provided word list, return 0. Use breadth-first search (BFS) to explore the shortest transformation sequence. Function Signature: ```python def word_ladder_steps(start_word: str, end_word: str, word_list: list) -> int: # Your code here ``` Example: ```python # Sample Input start_word = \\"hit\\" end_word = \\"cog\\" word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] # Sample Output 5 ``` The above call should return `5` because the shortest transformation sequence from \\"hit\\" to \\"cog\\" is: ``` \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\" ``` Which takes 5 steps.","solution":"from collections import deque def word_ladder_steps(start_word: str, end_word: str, word_list: list) -> int: word_set = set(word_list) if end_word not in word_set: return 0 queue = deque([(start_word, 1)]) while queue: current_word, steps = queue.popleft() if current_word == end_word: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i + 1:] if next_word in word_set: queue.append((next_word, steps + 1)) word_set.remove(next_word) return 0"},{"question":"You are required to create a function called `analyze_weather_data` that takes a CSV file path containing daily weather data and returns the day with the highest temperature difference (the difference between the maximum and minimum temperature of the day). # Function Signature ```python def analyze_weather_data(csv_path: str) -> str: ``` # Parameters - `csv_path`: A string representing the path to the CSV file containing the weather data. # Returns - A string representing the date (in `YYYY-MM-DD` format) with the highest temperature difference. # Tasks 1. Load the CSV file using `pandas`. 2. Parse the CSV to find columns for `Date`, `MaxTemp`, and `MinTemp`. 3. Calculate the temperature difference for each day. 4. Identify the day with the highest temperature difference. 5. Return the date of that day. # Example Usage Assuming `weather.csv` contains: ``` Date,MaxTemp,MinTemp 2023-01-01,23.5,15.6 2023-01-02,25.1,14.9 2023-01-03,22.8,18.3 ``` ```python result = analyze_weather_data(\'weather.csv\') print(result) # Output: 2023-01-02 ``` # Tips - Use the `pandas` library for reading the CSV and data manipulation. - Ensure proper handling of missing or malformed data. - Consider days where the temperature difference is equal to be handled appropriately (e.g., returning the first occurrence).","solution":"import pandas as pd def analyze_weather_data(csv_path: str) -> str: Returns the date with the highest temperature difference. Args: csv_path (str): The path to the CSV file containing weather data Returns: str: The date with the highest temperature difference (in \'YYYY-MM-DD\' format) # Load the CSV file into a DataFrame weather_data = pd.read_csv(csv_path) # Calculate the temperature difference and add it as a new column weather_data[\'TempDiff\'] = weather_data[\'MaxTemp\'] - weather_data[\'MinTemp\'] # Identify the day with the highest temperature difference max_diff_index = weather_data[\'TempDiff\'].idxmax() max_diff_date = weather_data.at[max_diff_index, \'Date\'] return max_diff_date"},{"question":"**Problem Context:** You are developing a speech-to-text application where you need to identify and transcribe isolated words from a given audio recording. One of the key steps in this process is to perform feature extraction on the audio signal using Mel-Frequency Cepstral Coefficients (MFCCs). MFCCs are widely used in audio signal processing as they effectively represent the power spectrum of an audio signal. **Objective:** Write a function `extract_mfcc_features(audio_signal: np.ndarray, sample_rate: int, num_mfcc: int, frame_length: int, frame_step: int) -> np.ndarray` that extracts MFCC features from a given audio signal. **Requirements:** 1. **Pre-emphasis:** - Apply pre-emphasis to the audio signal to amplify the high frequencies. 2. **Framing:** - Divide the signal into overlapping frames using a specified frame length and frame step. 3. **Windowing:** - Apply a Hamming window to each frame to minimize the signal discontinuities at the edges. 4. **Fourier Transform and Power Spectrum:** - Compute the Fourier transform of each windowed frame. - Compute the power spectrum of each frame. 5. **Filter Banks:** - Apply the Mel-filterbank to the power spectra to emphasize frequencies that correspond to human hearing. 6. **Discrete Cosine Transform (DCT):** - Apply DCT to the log of the filterbank energies to obtain the MFCC features. **Function Signature:** ```python def extract_mfcc_features(audio_signal: np.ndarray, sample_rate: int, num_mfcc: int = 13, frame_length: int = 400, frame_step: int = 160) -> np.ndarray: pass ``` **Parameters:** - `audio_signal (np.ndarray)`: 1D array containing the audio signal. - `sample_rate (int)`: Sampling rate of the audio signal. - `num_mfcc (int)`: Number of MFCC features to extract. Default is 13. - `frame_length (int)`: Number of samples in each frame. Default is 400. - `frame_step (int)`: Number of samples for the frame step. Default is 160. **Returns:** - `mfcc_features (np.ndarray)`: 2D array containing the MFCC features for each frame. Each row represents the MFCC features of a frame. **Constraints:** - The input audio signal `audio_signal` is guaranteed to be a valid 1D numpy array of type `np.float32` or `np.int16`. - Use `scipy.fftpack.dct` for the Discrete Cosine Transform. **Example:** ```python import numpy as np audio_signal = np.array([0.1, 0.2, 0.3, ..., 0.4, 0.5], dtype=np.float32) sample_rate = 16000 mfcc_features = extract_mfcc_features(audio_signal, sample_rate, num_mfcc=13, frame_length=400, frame_step=160) print(mfcc_features) ```","solution":"import numpy as np from scipy.fftpack import dct from scipy.signal import get_window def pre_emphasis(signal, coef=0.97): return np.append(signal[0], signal[1:] - coef * signal[:-1]) def framing(signal, frame_length, frame_step, sample_rate): signal_length = len(signal) frame_length = int(round(frame_length * sample_rate)) frame_step = int(round(frame_step * sample_rate)) num_frames = int(np.ceil(float(np.abs(signal_length - frame_length)) / frame_step)) + 1 pad_signal_length = num_frames * frame_step + frame_length z = np.zeros((pad_signal_length - signal_length)) pad_signal = np.append(signal, z) indices = np.tile(np.arange(0, frame_length), (num_frames, 1)) + np.tile( np.arange(0, num_frames * frame_step, frame_step), (frame_length, 1)).T frames = pad_signal[indices.astype(np.int32, copy=False)] return frames def windowing(frames, window_type=\'hamming\'): window = get_window(window_type, frames.shape[1], fftbins=True) return frames * window def power_spectrum(frames, NFFT=512): mag_frames = np.absolute(np.fft.rfft(frames, NFFT)) pow_frames = ((1.0 / NFFT) * (mag_frames ** 2)) return pow_frames def mel_filter_bank(sample_rate, NFFT=512, nfilt=26): low_freq_mel = 0 high_freq_mel = (2595 * np.log10(1 + (sample_rate / 2) / 700)) mel_points = np.linspace(low_freq_mel, high_freq_mel, nfilt + 2) hz_points = (700 * (10**(mel_points / 2595) - 1)) bin = np.floor((NFFT + 1) * hz_points / sample_rate) fbank = np.zeros((nfilt, int(np.floor(NFFT / 2 + 1)))) for m in range(1, nfilt + 1): f_m_minus = int(bin[m - 1]) f_m = int(bin[m]) f_m_plus = int(bin[m + 1]) for k in range(f_m_minus, f_m): fbank[m - 1, k] = (k - bin[m - 1]) / (bin[m] - bin[m - 1]) for k in range(f_m, f_m_plus): fbank[m - 1, k] = (bin[m + 1] - k) / (bin[m + 1] - bin[m]) return fbank def extract_mfcc_features(audio_signal: np.ndarray, sample_rate: int, num_mfcc: int = 13, frame_length: int = 0.025, frame_step: int = 0.01) -> np.ndarray: emphasized_signal = pre_emphasis(audio_signal) frames = framing(emphasized_signal, frame_length, frame_step, sample_rate) windowed_frames = windowing(frames) power_spec = power_spectrum(windowed_frames) fbank = mel_filter_bank(sample_rate) filter_banks = np.dot(power_spec, fbank.T) filter_banks = np.where(filter_banks == 0, np.finfo(float).eps, filter_banks) filter_banks = 20 * np.log10(filter_banks) mfcc = dct(filter_banks, type=2, axis=1, norm=\'ortho\')[:, :num_mfcc] return mfcc"},{"question":"Create a function that simulates a deck of cards and allows for shuffling and drawing cards. Build a class `Deck` that includes methods for shuffling the deck and drawing a specified number of cards from the top. Each card should be represented as a string in the format \\"Rank of Suit\\", e.g., \\"Ace of Spades\\" or \\"10 of Hearts\\". When drawing cards, the method should return a list of drawn card strings and remove them from the deck. The function should output: - A list of strings representing the drawn cards. - The remaining deck of cards after the draw. You should write self-contained code starting with: ``` import random class Deck: def __init__(self): self.suits = [\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\'] self.ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'Jack\', \'Queen\', \'King\', \'Ace\'] self.cards = [f\\"{rank} of {suit}\\" for suit in self.suits for rank in self.ranks] def shuffle(self): random.shuffle(self.cards) def draw(self, count=1): drawn_cards = self.cards[:count] self.cards = self.cards[count:] return drawn_cards, self.cards def task_func(draw_count=5, seed=None): ```","solution":"import random class Deck: def __init__(self): self.suits = [\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\'] self.ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'Jack\', \'Queen\', \'King\', \'Ace\'] self.cards = [f\\"{rank} of {suit}\\" for suit in self.suits for rank in self.ranks] def shuffle(self): random.shuffle(self.cards) def draw(self, count=1): drawn_cards = self.cards[:count] self.cards = self.cards[count:] return drawn_cards, self.cards def task_func(draw_count=5, seed=None): deck = Deck() if seed is not None: random.seed(seed) deck.shuffle() return deck.draw(draw_count)"},{"question":"In the realm of computer graphics, Bézier curves are parametric curves frequently used in vector graphics, animation and related fields. A quadratic Bézier curve is defined by three points: the start point, the end point, and a control point which determines the curve\'s shape. Your task is to implement a function `calculate_bezier_point(t, p0, p1, p2)` that computes a point on a quadratic Bézier curve at a given parameter `t`. The function should follow these steps: 1. **Calculate Intermediate Points**: - Compute the intermediate points Q1 and Q2 for the given parameter `t`: ``` Q1 = (1 - t) * p0 + t * p1 Q2 = (1 - t) * p1 + t * p2 ``` 2. **Calculate Bezier Point**: - Compute the point `B(t)` on the quadratic Bézier curve: ``` B(t) = (1 - t) * Q1 + t * Q2 ``` **Function Signature:** ```python def calculate_bezier_point(t: float, p0: tuple[float, float], p1: tuple[float, float], p2: tuple[float, float]) -> tuple[float, float]: ``` **Parameters:** - `t` (float): A parameter between 0 and 1 that defines the position along the Bézier curve. - `p0` (tuple of two floats): The start point of the curve. - `p1` (tuple of two floats): The control point of the curve. - `p2` (tuple of two floats): The end point of the curve. **Returns:** - `tuple[float, float]`: The coordinates of the point on the Bézier curve at parameter `t`. **Constraints:** - `0 <= t <= 1` - Each point is a tuple containing exactly two float coordinates. **Example:** ```python p0 = (0.0, 0.0) p1 = (1.0, 2.0) p2 = (2.0, 0.0) t = 0.5 print(calculate_bezier_point(t, p0, p1, p2)) # Expected output: (1.0, 1.0) ``` **Notes**: - Ensure that the function performs linear interpolation between the points correctly. - This problem requires only basic arithmetic operations.","solution":"def calculate_bezier_point(t, p0, p1, p2): Calculates the point on a quadratic Bézier curve at parameter t. Parameters: - t (float): A parameter between 0 and 1 that defines the position along the Bézier curve. - p0 (tuple of two floats): The start point of the curve. - p1 (tuple of two floats): The control point of the curve. - p2 (tuple of two floats): The end point of the curve. Returns: - tuple[float, float]: The coordinates of the point on the Bézier curve at parameter t. # Calculate intermediate points Q1 = ((1 - t) * p0[0] + t * p1[0], (1 - t) * p0[1] + t * p1[1]) Q2 = ((1 - t) * p1[0] + t * p2[0], (1 - t) * p1[1] + t * p2[1]) # Calculate the Bezier point B = ((1 - t) * Q1[0] + t * Q2[0], (1 - t) * Q1[1] + t * Q2[1]) return B"},{"question":"Write a Python function named `crop_image` that crops a given image to the smallest rectangle that can fully contain its non-white pixels. The function should take an image file as input, process it to detect the non-white boundaries, and save the cropped image to a new file. Assume the image is in grayscale, where pixel values range from 0 (black) to 255 (white). The \'non-white\' pixels are those with values less than 255. The function should: 1. Read the image file into a numpy array. 2. Identify the smallest rectangle that can contain all non-white pixels. 3. Crop the image to this rectangle. 4. Save the cropped image to a new file. 5. Use the `PIL` (Pillow) library for reading and saving images, and `numpy` for processing. **Function Signature:** ```python def crop_image(input_file: str, output_file: str) -> None: ``` **Parameters:** - `input_file` (str): The path to the input image file. - `output_file` (str): The path to the output image file to save the cropped image. Here is an example implementation: ```python from PIL import Image import numpy as np def crop_image(input_file: str, output_file: str) -> None: image = Image.open(input_file).convert(\\"L\\") # Convert image to grayscale image_array = np.array(image) non_white_pixels = np.where(image_array < 255) min_row, max_row = np.min(non_white_pixels[0]), np.max(non_white_pixels[0]) min_col, max_col = np.min(non_white_pixels[1]), np.max(non_white_pixels[1]) cropped_image_array = image_array[min_row:max_row+1, min_col:max_col+1] cropped_image = Image.fromarray(cropped_image_array) cropped_image.save(output_file) print(f\\"Cropped image saved to {output_file}\\") ``` **Example Usage:** ```python # Example input path and output path input_path = \'path/to/input_image.png\' output_path = \'path/to/output_image.png\' # Cropping the image crop_image(input_path, output_path) ```","solution":"from PIL import Image import numpy as np def crop_image(input_file: str, output_file: str) -> None: Crops a given image to the smallest rectangle that can fully contain its non-white pixels and saves the cropped image to a new file. Parameters: input_file (str): The path to the input image file. output_file (str): The path to the output image file to save the cropped image. image = Image.open(input_file).convert(\\"L\\") # Convert image to grayscale image_array = np.array(image) non_white_pixels = np.where(image_array < 255) if non_white_pixels[0].size > 0 and non_white_pixels[1].size > 0: min_row, max_row = np.min(non_white_pixels[0]), np.max(non_white_pixels[0]) min_col, max_col = np.min(non_white_pixels[1]), np.max(non_white_pixels[1]) cropped_image_array = image_array[min_row:max_row+1, min_col:max_col+1] cropped_image = Image.fromarray(cropped_image_array) cropped_image.save(output_file) else: print(\\"No non-white pixels found.\\") image.save(output_file)"},{"question":"This function will create a two-dimensional array (matrix) of specified size, initialized with random integers within a given range. The function will then compute the row sums and column sums of the matrix and return them along with the original matrix. This task involves understanding array manipulations and mathematical operations using numpy. The function should raise the exception for: ValueError: If the number of rows or columns is not a positive integer, or if the range for random integers is invalid. The function should output: tuple: A tuple containing three numpy arrays: the original matrix, the array of row sums, and the array of column sums. You should write self-contained code starting with: ```python import numpy as np def matrix_sums(num_rows, num_cols, low, high): ```","solution":"import numpy as np def matrix_sums(num_rows, num_cols, low, high): Creates a 2D array (matrix) of specified size with random integers within a given range. Computes the row sums and column sums of the matrix. Args: - num_rows (int): Number of rows in the matrix, should be a positive integer. - num_cols (int): Number of columns in the matrix, should be a positive integer. - low (int): Lower bound for random integers (inclusive). - high (int): Upper bound for random integers (exclusive). Returns: - tuple: A tuple containing three numpy arrays: 1. The original matrix 2. The array of row sums 3. The array of column sums Raises: - ValueError: If num_rows or num_cols is not a positive integer, or if low >= high. if not (isinstance(num_rows, int) and num_rows > 0): raise ValueError(\\"Number of rows must be a positive integer.\\") if not (isinstance(num_cols, int) and num_cols > 0): raise ValueError(\\"Number of columns must be a positive integer.\\") if not (isinstance(low, int) and isinstance(high, int) and low < high): raise ValueError(\\"Invalid range for random integers: low must be less than high.\\") matrix = np.random.randint(low, high, size=(num_rows, num_cols)) row_sums = matrix.sum(axis=1) col_sums = matrix.sum(axis=0) return matrix, row_sums, col_sums"},{"question":"You are required to write a Python function that sorts a given list of dictionaries based on a specific key. This exercise will help to understand how to manipulate and sort data structures in Python, particularly dictionaries within a list. Your function should be named `sort_dicts_by_key` and should accept the following parameters: - `dict_list`: A list of dictionaries that need to be sorted. - `sort_key`: A string representing the key by which the dictionaries should be sorted. - `reverse`: (Optional) A boolean that indicates whether the sorting should be in descending order. By default, it should be `False` for ascending order. The function should: 1. Check if `dict_list` is a list of dictionaries. 2. Handle cases where the `sort_key` might not be present in all dictionaries by treating the value of missing keys as `None`. 3. Sort the list of dictionaries based on the given `sort_key` and the `reverse` flag. 4. Return the sorted list of dictionaries. Here is an example of how the function can be used: ```python dict_list = [ {\'name\': \'Alice\', \'age\': 25}, {\'name\': \'Bob\', \'age\': 22}, {\'name\': \'Charlie\', \'age\': 30}, {\'name\': \'David\', \'age\': 27} ] sort_key = \'age\' sorted_list = sort_dicts_by_key(dict_list, sort_key) print(sorted_list) ``` Expected output: ```python [ {\'name\': \'Bob\', \'age\': 22}, {\'name\': \'Alice\', \'age\': 25}, {\'name\': \'David\', \'age\': 27}, {\'name\': \'Charlie\', \'age\': 30} ] ``` Note: In the case when `sort_key` does not exist in some dictionaries, these dictionaries should be listed at the end when sorting in ascending order, and at the beginning when sorting in descending order with the `None` values being considered lower than any numerical or string values.","solution":"def sort_dicts_by_key(dict_list, sort_key, reverse=False): Sorts a list of dictionaries based on a given key. Parameters: dict_list (list): List of dictionaries to be sorted. sort_key (str): The key by which the dictionaries should be sorted. reverse (bool): Boolean indicating whether to sort in descending order. Returns: list: A sorted list of dictionaries. # Check if dict_list is a list of dictionaries if not isinstance(dict_list, list) or not all(isinstance(d, dict) for d in dict_list): raise ValueError(\\"Input should be a list of dictionaries\\") # Sort the list of dictionaries sorted_list = sorted( dict_list, key=lambda x: (x.get(sort_key) is None, x.get(sort_key)), reverse=reverse ) return sorted_list"},{"question":"Write a function named `group_anagrams` that takes a list of strings as input and returns a list of lists, where each sublist contains words that are anagrams of each other. For the purpose of this task, two words are anagrams if one word can be rearranged to form the other, ignoring case and spaces. Your function should perform the following steps: 1. Read the input list of strings. 2. Normalize each string by converting it to lowercase and removing spaces. 3. Group the strings that are anagrams of each other. 4. Return the list of grouped anagrams, with each group presented as a list of the original strings from the input, in the same order they appeared in the input list. Function Signature: ```python def group_anagrams(words: list) -> list: pass ``` Example: ```python input_words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"Giggle\\", \\"eleven plus two\\", \\"Twelve plus one\\"] output = group_anagrams(input_words) # Example output: # [ # [\\"listen\\", \\"silent\\", \\"enlist\\"], # [\\"google\\"], # [\\"Giggle\\"], # [\\"eleven plus two\\", \\"Twelve plus one\\"] # ] ``` In this example: - \\"listen\\", \\"silent\\", and \\"enlist\\" are grouped together because they are anagrams. - \\"google\\" stands alone as it has no anagram in the list. - \\"Giggle\\" also stands alone. - \\"eleven plus two\\" and \\"Twelve plus one\\" are grouped together as they are anagrams ignoring case and spaces.","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams from a list of strings. :param words: List of strings :return: List of lists, each containing anagrams normalized_to_original = defaultdict(list) for word in words: # Normalize word: convert to lowercase and remove spaces normalized_word = \'\'.join(sorted(word.replace(\\" \\", \\"\\").lower())) normalized_to_original[normalized_word].append(word) return list(normalized_to_original.values())"},{"question":"You are tasked with developing a function, `aggregateStudentScores`, which aggregates scores from student test results and calculates the average score for each student. Your function will receive a list of dictionaries, where each dictionary represents a student\'s scores across various tests. Each dictionary contains the student\'s name as a string key and their scores as a list of integers. Your function should perform the following tasks: 1. Iterate through the list of dictionaries. 2. For each student, compute the average score of their tests. 3. Return a new dictionary where each key is a student\'s name and the corresponding value is their average score. Example Input: ```python students_scores = [ {\\"Alice\\": [85, 90, 78]}, {\\"Bob\\": [92, 88, 84]}, {\\"Charlie\\": [70, 75, 80]}, {\\"Alice\\": [88, 92]}, {\\"Bob\\": [95, 89]}, {\\"Charlie\\": [78, 82, 84]} ] ``` Example Output: ```python { \\"Alice\\": 86.6, \\"Bob\\": 89.6, \\"Charlie\\": 78.17 } ``` Note: - Each student\'s average score should be rounded to two decimal places. - A student\'s name can appear more than once; your function should aggregate all scores before calculating the average. Function Signature: ```python def aggregateStudentScores(students_scores): Computes the average scores for each student from a list of dictionaries containing their test scores. Parameters: students_scores (list): A list of dictionaries with student names as keys and a list of their scores as values. Returns: dict: A dictionary with student names as keys and their computed average score as values. ```","solution":"def aggregateStudentScores(students_scores): Computes the average scores for each student from a list of dictionaries containing their test scores. Parameters: students_scores (list): A list of dictionaries with student names as keys and a list of their scores as values. Returns: dict: A dictionary with student names as keys and their computed average score as values. from collections import defaultdict import itertools # Using defaultdict to aggregate scores per student scores = defaultdict(list) for student_dict in students_scores: for student, score_list in student_dict.items(): scores[student].extend(score_list) # Calculate the average for each student averages = {} for student, score_list in scores.items(): averages[student] = round(sum(score_list) / len(score_list), 2) return averages"},{"question":"You are tasked with creating a function that returns the k-th smallest element in a list using the Quickselect algorithm. The Quickselect algorithm is derived from the QuickSort algorithm. It works by selecting a pivot element from the list and partitioning the other elements into two sublists, according to whether they are less than or greater than the pivot. The process is then repeated on the appropriate sublist until the k-th smallest element is found. Your function should be named `kth_smallest` and should take two parameters: 1. `arr`: A list of numeric elements. 2. `k`: An integer specifying which smallest element to find (1-based index). The function should return the k-th smallest element of the list. Use the following guidelines: - Do not use built-in sorting functions. - Implement the Quickselect algorithm recursively or iteratively as preferred. - Handle edge cases such as `k` being out of bounds, and an empty list. Example Usage: ```python arr = [3, 2, 1, 5, 4] k = 2 element = kth_smallest(arr, k) print(element) # Expected output: 2 ```","solution":"def kth_smallest(arr, k): Returns the k-th smallest element in the list using the Quickselect algorithm. if k < 1 or k > len(arr): raise ValueError(\\"k is out of bounds\\") def partition(left, right, pivot_index): pivot_value = arr[pivot_index] # Move pivot to end arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left # Move all smaller elements to the left for i in range(left, right): if arr[i] < pivot_value: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 # Move pivot to its final place arr[right], arr[store_index] = arr[store_index], arr[right] return store_index def quickselect(left, right, k_smallest): Returns the k-th smallest element in the list within arr[left:right+1] if left == right: return arr[left] pivot_index = left + (right - left) // 2 # Choose a pivot_index pivot_index = partition(left, right, pivot_index) if k_smallest == pivot_index: return arr[k_smallest] elif k_smallest < pivot_index: return quickselect(left, pivot_index - 1, k_smallest) else: return quickselect(pivot_index + 1, right, k_smallest) return quickselect(0, len(arr) - 1, k - 1)"},{"question":"Write a function that generates a bar chart illustrating the sales figures of a company for each quarter in a given year. This function should use numpy to generate synthetic sales data and matplotlib to create the bar chart. The x-axis should represent the four quarters (Q1, Q2, Q3, Q4), and the y-axis should display the sales figures. The function should also output the generated data for verification purposes. The generated bar chart should show: matplotlib.figure.Figure: A matplotlib Figure instance representing the bar chart. numpy.ndarray: A numpy array containing the generated sales data. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def sales_bar_chart(): ```","solution":"import numpy as np import matplotlib.pyplot as plt def sales_bar_chart(): Generates a bar chart illustrating the sales figures of a company for each quarter in a given year. Uses numpy to generate synthetic sales data and matplotlib to create the bar chart. Returns: - matplotlib.figure.Figure: A matplotlib Figure instance representing the bar chart. - numpy.ndarray: A numpy array containing the generated sales data. # Generate synthetic sales data for four quarters sales_data = np.random.randint(1000, 10000, size=4) # Create a bar chart fig, ax = plt.subplots() quarters = [\'Q1\', \'Q2\', \'Q3\', \'Q4\'] ax.bar(quarters, sales_data) # Add title and labels ax.set_title(\'Company Sales Figures\') ax.set_xlabel(\'Quarters\') ax.set_ylabel(\'Sales Figures\') # Return the figure and sales data return fig, sales_data"},{"question":"You are required to write a function using the `pandas` library to manipulate a DataFrame based on given conditions. The function will take a DataFrame with specific columns and perform a series of transformations. # Problem Statement Suppose you have a DataFrame that contains sales data with the following columns: - \'Date\': The date of the sale. - \'Product\': The name or identifier of the product sold. - \'Quantity\': The number of items sold. - \'Price\': The unit price of the product. Your task is to create a function called `transform_sales_data` that takes this DataFrame as input and performs the following transformations: 1. **Add a \'Total\' Column**: Add a new column called \'Total\' that contains the total sales amount for each row, calculated as `Quantity * Price`. 2. **Filter Rows**: Remove rows where the \'Quantity\' or \'Price\' is less than or equal to zero. 3. **Sort**: Sort the DataFrame by \'Date\' in ascending order. 4. **Group By Product**: Group the rows by the \'Product\' column and sum the \'Total\' sales amount for each product. # Function Details - **Input**: A pandas DataFrame with columns [\'Date\', \'Product\', \'Quantity\', \'Price\']. - **Output**: A new pandas DataFrame with columns [\'Product\', \'Total\'] sorted by \'Total\' in descending order. # Example Suppose the input DataFrame is: | Date | Product | Quantity | Price | |------------|---------|----------|-------| | 2023-01-01 | A | 10 | 15.5 | | 2023-01-02 | B | 5 | 20.0 | | 2023-01-03 | A | -1 | 15.5 | | 2023-01-04 | C | 8 | 12.5 | ```python df = pd.DataFrame({ \'Date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\'], \'Product\': [\'A\', \'B\', \'A\', \'C\'], \'Quantity\': [10, 5, -1, 8], \'Price\': [15.5, 20.0, 15.5, 12.5] }) transform_sales_data(df) ``` The output should be a DataFrame approximately equal to: | Product | Total | |---------|-------| | A | 155.0 | | B | 100.0 | | C | 100.0 | # Additional Notes - Handle any missing values in the \'Quantity\' or \'Price\' columns by treating them as zero. - Ensure that your function works with any valid DataFrame that conforms to the specified structure. # Usage This function can be used in sales analytics, reporting, and data preprocessing tasks where such transformations are needed.","solution":"import pandas as pd def transform_sales_data(df): Transforms the sales data DataFrame by performing a series of operations: - Add a \'Total\' column which is computed as Quantity * Price - Drop rows where Quantity or Price <= 0 - Sort by \'Date\' in ascending order - Group by \'Product\' and sum the \'Total\' column Parameters: df (pd.DataFrame): The sales data DataFrame with columns [\'Date\', \'Product\', \'Quantity\', \'Price\'] Returns: pd.DataFrame: Transformed DataFrame with columns [\'Product\', \'Total\'] sorted by \'Total\' in descending order. # Handle missing values in \'Quantity\' or \'Price\' by treating them as zeros df[\'Quantity\'].fillna(0, inplace=True) df[\'Price\'].fillna(0, inplace=True) # Add \'Total\' column df[\'Total\'] = df[\'Quantity\'] * df[\'Price\'] # Filter out rows where \'Quantity\' or \'Price\' <= 0 df = df[(df[\'Quantity\'] > 0) & (df[\'Price\'] > 0)] # Sort DataFrame by \'Date\' in ascending order df = df.sort_values(by=\'Date\') # Group by \'Product\' and sum the \'Total\' column grouped_df = df.groupby(\'Product\')[\'Total\'].sum().reset_index() # Sort the result by \'Total\' in descending order result_df = grouped_df.sort_values(by=\'Total\', ascending=False).reset_index(drop=True) return result_df"},{"question":"You are tasked with developing a Python function named `fetch_weather_forecast` that retrieves the weather forecast data for a given city using the OpenWeatherMap API. The function should format the data into a Pandas DataFrame that includes the date, temperature, and weather description. Your function `fetch_weather_forecast` should have the following signature: ```python def fetch_weather_forecast(city: str, api_key: str) -> pd.DataFrame: ``` # Input Parameters: - `city` (str): The name of the city for which you want to retrieve the weather forecast. - `api_key` (str): The API key required to access the OpenWeatherMap API. # Requirements: 1. Use the `requests` library to make a GET request to the OpenWeatherMap API with the specified city and API key. 2. Extract the relevant data from the JSON response, which includes the forecast date, temperature, and weather description. 3. Construct a DataFrame where each row corresponds to a day in the forecast, with columns for the date, temperature, and weather description. 4. Ensure the date column is of datetime type and set as the index of the DataFrame. 5. If the API request fails (i.e., the status code is not 200), the function should print an error message starting with \\"Error fetching weather data for city: \\". Here is an example of how the function might be called: ```python df = fetch_weather_forecast(\\"San Francisco\\", \\"your_api_key_here\\") ``` # Constraints: - You must handle HTTP requests and JSON parsing manually without using additional libraries beyond `requests` and `pandas`.","solution":"import requests import pandas as pd from datetime import datetime def fetch_weather_forecast(city: str, api_key: str) -> pd.DataFrame: Fetches the weather forecast for a given city and returns it as a Pandas DataFrame. Parameters: city (str): The name of the city for which to fetch the weather forecast. api_key (str): The API key for accessing the OpenWeatherMap API. Returns: pd.DataFrame: A DataFrame containing the date, temperature, and weather description. url = f\\"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric\\" response = requests.get(url) if response.status_code != 200: print(f\\"Error fetching weather data for city: {city}\\") return pd.DataFrame() # return empty DataFrame on error data = response.json() forecast_list = data[\\"list\\"] forecast_data = [] for forecast in forecast_list: date = datetime.fromtimestamp(forecast[\\"dt\\"]) temperature = forecast[\\"main\\"][\\"temp\\"] description = forecast[\\"weather\\"][0][\\"description\\"] forecast_data.append((date, temperature, description)) df = pd.DataFrame(forecast_data, columns=[\\"date\\", \\"temperature\\", \\"description\\"]) df[\\"date\\"] = pd.to_datetime(df[\\"date\\"]) df.set_index(\\"date\\", inplace=True) return df"},{"question":"You are tasked to write a function named `filter_and_sort_words(file_path)`, which will read a text file containing a list of words (one word per line), filter out any words that are shorter than 5 characters, and return a sorted list of the remaining words. The function should follow these requirements: 1. **Open the file**: Use Python\'s built-in functions to open and read the file. 2. **Read content**: Read the file line by line. 3. **Filter words**: Filter out words that have fewer than 5 characters. 4. **Sort the words**: Sort the remaining words alphabetically. 5. **Return the sorted list**: Return the sorted list of words. # Example: Given a text file \\"words.txt\\" with the following content: ``` apple bat banana grape kiwi pineapple pear cherry ``` The function should return the following list: ``` [\'apple\', \'banana\', \'cherry\', \'grape\', \'pineapple\'] ``` # Constraints: - Do not use any external libraries other than Python\'s built-in functions. - Assume the text file always contains valid words (one word per line). # Function Signature: ```python def filter_and_sort_words(file_path: str) -> list: # Your code here ```","solution":"def filter_and_sort_words(file_path): Reads a file, filters out words shorter than 5 characters, and returns a sorted list of remaining words. Args: file_path (str): Path to the file containing words, one word per line. Returns: list: A list of words that are 5 characters or longer, sorted alphabetically. with open(file_path, \'r\') as file: words = file.readlines() # Remove any trailing newline characters and filter words of length >= 5 filtered_words = [word.strip() for word in words if len(word.strip()) >= 5] # Sort the filtered words sorted_words = sorted(filtered_words) return sorted_words"},{"question":"**Problem: Efficiently Merging Sorted Arrays** You are given two sorted arrays `arr1` and `arr2` of different lengths. The goal is to merge them into a single sorted array in such a way that the resulting array is also sorted. You should take advantage of the fact that the input arrays are already sorted to optimize the merging process. **Function Signature**: ```python def merge_sorted_arrays(arr1: list, arr2: list) -> list: ``` **Requirements**: 1. Implement the function **without** using the built-in sorting functions. 2. The function should run in O(n + m) time complexity, where `n` is the length of `arr1` and `m` is the length of `arr2`. 3. The function should return a new list containing all elements from `arr1` and `arr2`, sorted. **Example**: ```python arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] print(merge_sorted_arrays(arr1, arr2)) ``` Output: ```plaintext [1, 2, 3, 4, 5, 6, 7, 8] ``` **Example**: ```python arr1 = [1, 1, 2, 3] arr2 = [2, 2, 4, 5] print(merge_sorted_arrays(arr1, arr2)) ``` Output: ```plaintext [1, 1, 2, 2, 2, 3, 4, 5] ``` **Hints**: - Use two pointers to track the indices of the current element in each of the two arrays. - Compare the elements at the pointers and append the smaller element to the merged array, then move the pointer of the array from which the element was taken. - Continue this process until all elements from both arrays have been added to the merged array. ```python def merge_sorted_arrays(arr1, arr2): i, j = 0, 0 merged_array = [] while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append any remaining elements from arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append any remaining elements from arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array ``` **Explanation**: - Initialize two pointers `i` and `j` for `arr1` and `arr2` respectively. - Traverse both arrays, comparing the current elements at `arr1[i]` and `arr2[j]`. - Append the smaller element to the `merged_array` and move the corresponding pointer. - After exiting the loop, append any remaining elements from both `arr1` and `arr2` to the `merged_array`. - Return the `merged_array`, which contains all elements from `arr1` and `arr2` in sorted order.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. i, j = 0, 0 merged_array = [] while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append any remaining elements from arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append any remaining elements from arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are tasked with designing a ticket management system for an airline. The system should allow users to book, cancel, and view available flights. Each flight has a limited number of seats. **Function to Implement:** ```python class AirlineTicketSystem: def __init__(self): Initializes the ticket management system with an empty dictionary of flights. Each flight should be represented as a key-value pair where the key is the flight number and the value is a dictionary containing the number of seats and a list of booked seat numbers. pass def add_flight(self, flight_number, seats): Adds a new flight to the system. Arguments: flight_number -- the unique identifier for the flight. seats -- the total number of available seats on the flight. pass def book_ticket(self, flight_number): Books a ticket for the specified flight number. Arguments: flight_number -- the unique identifier for the flight. Returns: A string indicating success or failure. If successful, it returns the booked seat number. pass def cancel_ticket(self, flight_number, seat_number): Cancels a booked ticket. Arguments: flight_number -- the unique identifier for the flight. seat_number -- the seat number to be cancelled. Returns: A string indicating success or failure of the cancellation. pass def view_available_flights(self): Displays the list of all flights with their available seats pass ``` **Example Usage:** ```python ats = AirlineTicketSystem() ats.add_flight(\\"AB123\\", 5) ats.add_flight(\\"CD456\\", 3) print(ats.book_ticket(\\"AB123\\")) # Output: \\"Seat 1 booked successfully.\\" print(ats.book_ticket(\\"AB123\\")) # Output: \\"Seat 2 booked successfully.\\" print(ats.book_ticket(\\"AB123\\")) # Output: \\"Seat 3 booked successfully.\\" print(ats.cancel_ticket(\\"AB123\\", 2)) # Output: \\"Seat 2 booking cancelled.\\" print(ats.book_ticket(\\"AB123\\")) # Output: \\"Seat 2 booked successfully.\\" print(ats.view_available_flights()) # Output: # Flight: AB123 - Available Seats: 2 # Flight: CD456 - Available Seats: 3 ``` **Details:** - `add_flight` method should add a flight to the system. - `book_ticket` should book the next available seat on the specified flight and return the seat number. - `cancel_ticket` should cancel the ticket for the given seat number. - `view_available_flights` should display all flights and their available seats. The flight details should be managed internally with a dictionary where each flight is identified by its flight number. Each flight\'s value will be a dictionary containing the total number of seats and the list of booked seat numbers.","solution":"class AirlineTicketSystem: def __init__(self): Initializes the ticket management system with an empty dictionary of flights. Each flight should be represented as a key-value pair where the key is the flight number and the value is a dictionary containing the number of seats and a list of booked seat numbers. self.flights = {} def add_flight(self, flight_number, seats): Adds a new flight to the system. Arguments: flight_number -- the unique identifier for the flight. seats -- the total number of available seats on the flight. if flight_number in self.flights: raise ValueError(f\\"Flight {flight_number} already exists.\\") self.flights[flight_number] = {\'total_seats\': seats, \'booked_seats\': []} def book_ticket(self, flight_number): Books a ticket for the specified flight number. Arguments: flight_number -- the unique identifier for the flight. Returns: A string indicating success or failure. If successful, it returns the booked seat number. if flight_number not in self.flights: return f\\"Flight {flight_number} does not exist.\\" flight = self.flights[flight_number] if len(flight[\'booked_seats\']) >= flight[\'total_seats\']: return f\\"No available seats on flight {flight_number}.\\" next_seat = len(flight[\'booked_seats\']) + 1 flight[\'booked_seats\'].append(next_seat) return f\\"Seat {next_seat} booked successfully.\\" def cancel_ticket(self, flight_number, seat_number): Cancels a booked ticket. Arguments: flight_number -- the unique identifier for the flight. seat_number -- the seat number to be cancelled. Returns: A string indicating success or failure of the cancellation. if flight_number not in self.flights: return f\\"Flight {flight_number} does not exist.\\" flight = self.flights[flight_number] if seat_number not in flight[\'booked_seats\']: return f\\"Seat {seat_number} is not booked on flight {flight_number}.\\" flight[\'booked_seats\'].remove(seat_number) return f\\"Seat {seat_number} booking cancelled.\\" def view_available_flights(self): Displays the list of all flights with their available seats if not self.flights: return \\"No flights available.\\" result = [] for flight_number, details in self.flights.items(): available_seats = details[\'total_seats\'] - len(details[\'booked_seats\']) result.append(f\\"Flight: {flight_number} - Available Seats: {available_seats}\\") return \\"n\\".join(result)"},{"question":"You are given a task to write a Python function that simulates a simple banking system. The function should allow for user interactions including depositing money, withdrawing money, and checking the current balance. The system should ensure that withdrawals do not exceed the available balance and should appropriately handle invalid inputs. # Function Signature: ```python def banking_system(): This function will simulate a simple banking system with deposit, withdraw, and check balance functionalities. Returns: None ``` # Instructions: 1. Create an initial balance of 0. 2. Continuously prompt the user for an action until they decide to exit the system. 3. Actions should include: - **Deposit**: Prompt the user to enter an amount to deposit. - Validate that the entered amount is positive. - **Withdraw**: Prompt the user to enter an amount to withdraw. - Ensure that the entered amount is positive and does not exceed the current balance. - **Check balance**: Display the current balance to the user. - **Exit**: End the simulation. 4. Display error messages for invalid inputs or actions. 5. Provide a concise menu of options for the user to choose from. # Example Interaction: ```python Welcome to the Simple Banking System. Please select an option: 1. Deposit 2. Withdraw 3. Check Balance 4. Exit > 1 Enter amount to deposit: 100 Deposit successful. Current balance: 100 > 3 Current balance: 100 > 2 Enter amount to withdraw: 50 Withdrawal successful. Current balance: 50 > 2 Enter amount to withdraw: 100 Insufficient funds. Current balance: 50 > 4 Thank you for using the Simple Banking System. ``` # Hint: - Use a while loop to keep the system running until the user decides to exit. - Use try-except blocks to handle and display errors for invalid inputs. Ensure you test the function in an interactive Python environment to verify it works as expected.","solution":"def banking_system(): balance = 0 while True: print(\\"nWelcome to the Simple Banking System.\\") print(\\"Please select an option:\\") print(\\"1. Deposit\\") print(\\"2. Withdraw\\") print(\\"3. Check Balance\\") print(\\"4. Exit\\") try: choice = int(input(\\"> \\")) if choice == 1: amount = float(input(\\"Enter amount to deposit: \\")) if amount > 0: balance += amount print(f\\"Deposit successful. Current balance: {balance:.2f}\\") else: print(\\"Invalid amount! Please enter a positive number.\\") elif choice == 2: amount = float(input(\\"Enter amount to withdraw: \\")) if amount > 0: if amount <= balance: balance -= amount print(f\\"Withdrawal successful. Current balance: {balance:.2f}\\") else: print(f\\"Insufficient funds. Current balance: {balance:.2f}\\") else: print(\\"Invalid amount! Please enter a positive number.\\") elif choice == 3: print(f\\"Current balance: {balance:.2f}\\") elif choice == 4: print(\\"Thank you for using the Simple Banking System.\\") break else: print(\\"Invalid choice! Please select a valid option.\\") except ValueError: print(\\"Invalid input! Please enter a valid number.\\")"},{"question":"``` Create a function that takes a list of dictionaries and a key name. The function should group the dictionaries by the specified key name, returning a dictionary where each key is the unique value from the input dictionaries and the corresponding value is a list of dictionaries that have that key value. The function should raise a KeyError if a dictionary in the list does not contain the specified key. Example input: data = [ {\'id\': 1, \'name\': \'Alice\', \'age\': 30}, {\'id\': 2, \'name\': \'Bob\', \'age\': 24}, {\'id\': 3, \'name\': \'Alice\', \'age\': 28}, {\'id\': 4, \'name\': \'Charlie\', \'age\': 24} ] key = \'name\' Expected output: { \'Alice\': [ {\'id\': 1, \'name\': \'Alice\', \'age\': 30}, {\'id\': 3, \'name\': \'Alice\', \'age\': 28} ], \'Bob\': [ {\'id\': 2, \'name\': \'Bob\', \'age\': 24} ], \'Charlie\': [ {\'id\': 4, \'name\': \'Charlie\', \'age\': 24} ] } You should write self-contained code starting with: ``` def group_by_key(data, key): ```","solution":"def group_by_key(data, key): Groups a list of dictionaries by a specified key. Args: data (list): A list of dictionaries. key (str): The key name to group by. Returns: dict: A dictionary where the keys are unique values from the input dictionaries and the values are lists of dictionaries that have that key value. Raises: KeyError: If a dictionary in the list does not contain the specified key. grouped_data = {} for item in data: if key not in item: raise KeyError(f\\"Key \'{key}\' not found in one of the dictionaries.\\") key_value = item[key] if key_value not in grouped_data: grouped_data[key_value] = [] grouped_data[key_value].append(item) return grouped_data"},{"question":"You are tasked with implementing a function `gradient_descent` that performs gradient descent to minimize a linear regression cost function. The function should return the optimized parameters (weights) after a given number of iterations. Function Signature ```python def gradient_descent(X: np.ndarray, y: np.ndarray, theta: np.ndarray, alpha: float, num_iters: int) -> np.ndarray: pass ``` Parameters: - `X` (np.ndarray): A 2D array of shape (m, n) where `m` is the number of training examples, and `n` is the number of features. - `y` (np.ndarray): A 1D array of shape (m,) containing the target values. - `theta` (np.ndarray): A 1D array of shape (n,) containing the initial parameters (weights). - `alpha` (float): The learning rate for gradient descent. - `num_iters` (int): The number of iterations to perform before stopping the algorithm. Returns: - `theta` (np.ndarray): A 1D array of shape (n,) containing the optimized parameters after gradient descent. Task: 1. Preprocess the data by normalizing the features (you may assume each feature is already normalized to a mean of 0 and standard deviation of 1). 2. Implement the gradient descent algorithm using the following steps: - Compute the hypothesis `h` as the dot product of `X` and `theta`. - Compute the cost function `J` (mean squared error). - Update the parameters `theta` in the direction of the negative gradient of `J`. - Repeat the process for `num_iters` iterations. 3. Ensure that the function returns the optimized parameters `theta`. Use the formula for the update step in gradient descent: [ theta = theta - alpha frac{1}{m} sum_{i=1}^{m} (h_i - y_i) X_i ] # Example Usage: ```python X = np.array([[1, 1], [1, 2], [1, 3]]) y = np.array([1, 2, 3]) theta = np.array([0, 0]) alpha = 0.01 num_iters = 1000 theta = gradient_descent(X, y, theta, alpha, num_iters) print(theta) ``` # Requirements: - You must implement the gradient descent algorithm manually without using any library functions for linear regression.","solution":"import numpy as np def gradient_descent(X: np.ndarray, y: np.ndarray, theta: np.ndarray, alpha: float, num_iters: int) -> np.ndarray: Performs gradient descent to learn theta. Parameters: X : np.ndarray The input features, a (m, n) matrix. y : np.ndarray The target values, a (m,) vector. theta : np.ndarray Initial parameters, a (n,) vector. alpha : float The learning rate. num_iters : int The number of iterations to perform. Returns: np.ndarray The optimized parameters, a (n,) vector. m = len(y) # number of training examples for _ in range(num_iters): # Compute the hypothesis h = X.dot(theta) # Compute the gradient gradient = (1/m) * X.T.dot(h - y) # Update the parameters theta = theta - alpha * gradient return theta"},{"question":"You are required to write a function called `plot_exponential_function_with_labels` that takes a NumPy array `x` and a scalar value `a` as input and performs the following tasks: 1. Calculates the exponential values for each element in the input array `x` using the base `a`. 2. Plots the input values `x` on the x-axis and the calculated exponential values on the y-axis. 3. Labels the x-axis as \\"Values of x\\". 4. Labels the y-axis as \\"Exponential Values\\". 5. Sets the title of the plot to \\"Exponential Function\\". 6. Adds a legend to the plot with the label \\"Exponential\\". 7. Displays the plot. 8. Returns the calculated exponential values. To solve this problem, use the `matplotlib.pyplot` functions `show`, `title`, `xlabel`, and `legend`. Here\'s the function signature you need to implement: ```python def plot_exponential_function_with_labels(x: np.ndarray, a: float) -> np.ndarray: pass ```","solution":"import numpy as np import matplotlib.pyplot as plt def plot_exponential_function_with_labels(x: np.ndarray, a: float) -> np.ndarray: Plots the exponential function for the given array x with base a and returns the calculated values. Parameters: x (np.ndarray): array of input values a (float): base of the exponential function Returns: np.ndarray: array of calculated exponential values y = a ** x plt.plot(x, y, label=\'Exponential\') plt.xlabel(\'Values of x\') plt.ylabel(\'Exponential Values\') plt.title(\'Exponential Function\') plt.legend() plt.show() return y"},{"question":"You are to create a data preprocessing function using NumPy to normalize a dataset. The function should be named `normalize_dataset`. The goal is to convert the dataset so that every feature has a mean of 0 and a standard deviation of 1. This is often referred to as standardization or Z-score normalization. The function must: 1. Accept a NumPy array `data` of shape (n_samples, n_features), where `n_samples` is the number of data points and `n_features` is the number of features. 2. Calculate the mean and standard deviation for each feature. 3. Subtract the mean and divide by the standard deviation for each feature. 4. Ensure that the normalized data still has the same shape as the input data and return the normalized dataset. **Function Signature:** ```python import numpy as np def normalize_dataset(data): ``` # Example Usage: ```python import numpy as np # Example input data data = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]) # Normalizing dataset normalized_data = normalize_dataset(data) # Print the resulting normalized data print(normalized_data) ``` # Requirements: - Use NumPy operations to calculate the mean and standard deviations. - Avoid using any external normalization functions provided by libraries. - Maintain the input shape and data type in the output normalized dataset. # Constraints: - Assume the input will be a 2D NumPy array with numeric data.","solution":"import numpy as np def normalize_dataset(data): Normalizes the dataset such that each feature has a mean of 0 and a standard deviation of 1. Parameters: data (np.ndarray): A 2D array of shape (n_samples, n_features) where n_samples is the number of data points and n_features is the number of features. Returns: np.ndarray: The normalized dataset with the same shape as the input. mean = np.mean(data, axis=0) std = np.std(data, axis=0) # Avoid division by zero in case of any feature having a standard deviation of 0 std[std == 0] = 1 normalized_data = (data - mean) / std return normalized_data"},{"question":"In this problem, you need to write a function called `filter_and_merge_dicts` that processes two lists of dictionaries and returns a single merged dictionary based on a specified criterion. Your function should perform the following tasks: 1. Filter the dictionaries in both lists based on a given key and threshold value. Include only those dictionaries where the value associated with the specified key is greater than the threshold. 2. Merge the filtered dictionaries from both lists into a single dictionary. If a key is present in more than one dictionary, the values should be summed up. 3. Return the merged dictionary. The function signature is: ```python def filter_and_merge_dicts(list1: list, list2: list, key: str, threshold: int) -> dict: pass ``` # Example Usage: Suppose you have the following lists of dictionaries: ```python list1 = [{\\"name\\": \\"apple\\", \\"count\\": 10, \\"price\\": 2}, {\\"name\\": \\"banana\\", \\"count\\": 5, \\"price\\": 1}] list2 = [{\\"name\\": \\"apple\\", \\"count\\": 3, \\"price\\": 2.5}, {\\"name\\": \\"orange\\", \\"count\\": 8, \\"price\\": 3}] ``` And you call: ```python key = \\"count\\" threshold = 6 result = filter_and_merge_dicts(list1, list2, key, threshold) print(result) ``` The filtered dictionaries where `count` is greater than 6 are: ```python filtered_list1 = [{\\"name\\": \\"apple\\", \\"count\\": 10, \\"price\\": 2}] filtered_list2 = [{\\"name\\": \\"orange\\", \\"count\\": 8, \\"price\\": 3}] ``` After merging, the function should return: ```python { \\"name\\": [\\"apple\\", \\"orange\\"], \\"count\\": [10, 8], \\"price\\": [2, 3] } ```","solution":"def filter_and_merge_dicts(list1: list, list2: list, key: str, threshold: int) -> dict: Filters dictionaries in the given lists based on a specified key and threshold, then merges them into a single dictionary. Parameters: list1 (list): The first list of dictionaries. list2 (list): The second list of dictionaries. key (str): The key to filter dictionaries on. threshold (int): The threshold value for filtering dictionaries. Returns: dict: The merged dictionary. # Filter the dictionaries in both lists filtered_list1 = [d for d in list1 if d.get(key, 0) > threshold] filtered_list2 = [d for d in list2 if d.get(key, 0) > threshold] # Merge the dictionaries merged_dict = {} for d in filtered_list1 + filtered_list2: for k, v in d.items(): if k in merged_dict: merged_dict[k].append(v) else: merged_dict[k] = [v] return merged_dict"},{"question":"Create a function named `find_matrix_det` that takes a single parameter `matrix`, which represents a 2x2 or 3x3 matrix. The function should calculate and return the determinant of the given matrix. If the input matrix is not 2x2 or 3x3, the function should raise a `ValueError` with an appropriate error message. The function should utilize the `numpy` library to handle matrix operations. The function should follow the structure provided below: ```python import numpy as np def find_matrix_det(matrix): # Your implementation here ``` **Example:** ```python >>> find_matrix_det([[1, 2], [3, 4]]) -2.0 >>> find_matrix_det([[6, 1, 1], [4, -2, 5], [2, 8, 7]]) -306.0 >>> find_matrix_det([[1, 2, 3], [4, 5]]) ValueError: Input must be a 2x2 or 3x3 matrix ``` **Requirements:** 1. Use the `numpy` library to handle matrix operations. 2. Check if the input matrix is either 2x2 or 3x3. 3. Handle inappropriate matrix sizes by raising a `ValueError`.","solution":"import numpy as np def find_matrix_det(matrix): Calculate and return the determinant of a 2x2 or 3x3 matrix. :param matrix: 2x2 or 3x3 matrix as a list of lists :return: Determinant of the matrix :raises ValueError: If the input is not a 2x2 or 3x3 matrix try: mat = np.array(matrix) if mat.shape == (2, 2) or mat.shape == (3, 3): return np.linalg.det(mat) else: raise ValueError(\\"Input must be a 2x2 or 3x3 matrix\\") except Exception as e: raise ValueError(\\"Input must be a 2x2 or 3x3 matrix\\") from e"},{"question":"You need to create a function called `student_performance_analysis` that will analyze the performance of students based on their scores in three subjects (Math, Science, and English). The data is given in a pandas DataFrame, and your function should perform various analyses based on input parameters and return the results in a structured format. Requirements: 1. **Function Name**: `student_performance_analysis`. 2. **Parameters**: - `scores_df` (pandas DataFrame): A DataFrame containing student names and their scores in Math, Science, and English. - `subject` (string): The subject to analyze. This parameter can be \\"Math\\", \\"Science\\", or \\"English\\". - `operation` (string): The type of analysis operation to perform. This parameter can be \\"average\\", \\"top\\", or \\"bottom\\". 3. **Behavior**: - If `operation` is \\"average\\", the function should calculate and return the average score of the specified subject. - If `operation` is \\"top\\", the function should identify and return the name of the student with the highest score in the specified subject. - If `operation` is \\"bottom\\", the function should identify and return the name of the student with the lowest score in the specified subject. 4. **Output**: - For \\"average\\" operation, return a float representing the average score for the specified subject. - For \\"top\\" operation, return a string representing the name of the student with the highest score in the specified subject. - For \\"bottom\\" operation, return a string representing the name of the student with the lowest score in the specified subject. Use the following `pandas` API functions: - `pandas.DataFrame.mean` - `pandas.DataFrame.idxmax` - `pandas.DataFrame.idxmin` - `pandas.DataFrame.loc` Example: ```python import pandas as pd data = { \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\'], \'Math\': [85, 92, 78, 90], \'Science\': [88, 79, 85, 95], \'English\': [90, 85, 80, 88] } df = pd.DataFrame(data) # Calculate the average score for Math print(student_performance_analysis(df, \\"Math\\", \\"average\\")) # Output: 86.25 # Find the student with the highest score in Science print(student_performance_analysis(df, \\"Science\\", \\"top\\")) # Output: \'David\' # Find the student with the lowest score in English print(student_performance_analysis(df, \\"English\\", \\"bottom\\")) # Output: \'Charlie\' ```","solution":"import pandas as pd def student_performance_analysis(scores_df, subject, operation): Analyzes the performance of students based on their scores in a specified subject. Parameters: scores_df (pandas.DataFrame): DataFrame containing student names and their scores in Math, Science, and English. subject (string): Subject to analyze (\\"Math\\", \\"Science\\", or \\"English\\"). operation (string): Type of analysis (\\"average\\", \\"top\\", or \\"bottom\\"). Returns: float/string: Result of the analysis depending on the operation type. if operation == \\"average\\": return scores_df[subject].mean() elif operation == \\"top\\": return scores_df.loc[scores_df[subject].idxmax()][\\"Name\\"] elif operation == \\"bottom\\": return scores_df.loc[scores_df[subject].idxmin()][\\"Name\\"] else: raise ValueError(f\\"Invalid operation \'{operation}\'. Valid operations are \'average\', \'top\', or \'bottom\'.\\")"},{"question":"You are tasked with creating a function that identifies whether a given graph is a tree. A tree is a special type of graph that is connected and has no cycles. Specifically, you are provided with the number of nodes in the graph and a list of edges. Each edge connects exactly two nodes. The function should determine if the given graph meets the criteria of a tree. **Function Signature:** ```python def is_tree(num_nodes, edges): Function to determine if the given graph is a tree. Parameters: num_nodes (int): The number of nodes in the graph edges (list): A list of tuples (u, v) representing edges in the graph Returns: bool: True if the graph is a tree, False otherwise. ``` To solve this problem, you need to use the following criteria: - A tree must have exactly `num_nodes - 1` edges. - The graph must be acyclic and connected. You may use various graph traversal algorithms such as Depth-First Search (DFS) or Breadth-First Search (BFS) to check for connectivity and cycles. # Example Input: ```python num_nodes = 5 edges = [(0, 1), (0, 2), (1, 3), (1, 4)] ``` Output: ```python True ``` # Explanation - The graph has 5 nodes and 4 edges. - The edges form a connected acyclic graph. - Therefore, the function should return `True`. # Additional Example Input: ```python num_nodes = 5 edges = [(0, 1), (0, 2), (1, 3), (3, 4), (1, 4)] ``` Output: ```python False ``` # Explanation - The graph has 5 nodes and 5 edges. - The edges form a cycle (1-3-4-1), so it is not a tree. - Therefore, the function should return `False`. **Constraints:** - `1 <= num_nodes <= 1000` - `0 <= len(edges) <= 1000` - Each edge is represented as a tuple `(u, v)` where `u` and `v` are different nodes. The graph is undirected. Use this structure and criteria to check if the graph is indeed a tree and return the appropriate boolean value.","solution":"def is_tree(num_nodes, edges): from collections import defaultdict, deque if len(edges) != num_nodes - 1: return False adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() if node in visited: continue visited.add(node) for neighbor in adjacency_list[node]: if neighbor not in visited: queue.append(neighbor) bfs(0) # Check if all nodes are visited, ensuring the graph is connected return len(visited) == num_nodes"},{"question":"You are responsible for developing a utility function that compresses files within a specified directory into individual ZIP archives. Each file should have its own ZIP archive with the same name as the original file. Create a function named `compress_files` which takes one argument: 1. `directory`: A string representing the path to the directory containing the files to be compressed. Your task is to implement the function `compress_files` so that it uses Python\'s `zipfile` library to perform the following steps: 1. Iterate over all files in the specified `directory`. 2. For each file, create a ZIP archive in the same directory with the same base name as the file and a `.zip` extension. 3. Add the file to the respective ZIP archive. Your function should not return any value. Instead, it should create ZIP archives for all files found in the directory. To help you, here are the relevant parts of the API documentation you should use: - `os.listdir`: Used to list all files in the specified directory. - `zipfile.ZipFile`: Used to create ZIP archive files and add files to them. **Example Usage:** ```python compress_files(\'/path/to/directory\') ``` This call would go through the `/path/to/directory`, compress each file into its own ZIP archive, and place the ZIP archives in the same directory. קא]","solution":"import os import zipfile def compress_files(directory): Compress each file within the specified directory into its own ZIP archive. Args: directory (str): The path to the directory containing the files to be compressed. for filename in os.listdir(directory): file_path = os.path.join(directory, filename) if os.path.isfile(file_path): zip_filename = f\\"{os.path.splitext(filename)[0]}.zip\\" zip_file_path = os.path.join(directory, zip_filename) with zipfile.ZipFile(zip_file_path, \'w\') as zipf: zipf.write(file_path, arcname=filename)"},{"question":"Create a function `merge_dicts(dict1, dict2, merge_lists=False)` that takes two dictionaries and merges them into one. By default, if there are conflicting keys, the value from `dict2` should overwrite the value from `dict1`. If `merge_lists` is set to `True`, the function should concatenate the lists for conflicting keys instead of overwriting. Assume the values for conflicting keys are lists if `merge_lists` is `True`. The function signature should be: ```python def merge_dicts(dict1, dict2, merge_lists=False): pass ``` Requirements: 1. Use dictionary comprehension to build the merged dictionary. 2. Use the `update` method for merging the dictionaries when `merge_lists` is `False`. 3. Use a loop to concatenate lists in case of conflicting keys when `merge_lists` is `True`. **Examples:** 1. **Overwrite values by default**: ```python dict1 = {\'a\': 1, \'b\': [2, 3]} dict2 = {\'b\': [4, 5], \'c\': 3} result = merge_dicts(dict1, dict2) print(result) # Output: {\'a\': 1, \'b\': [4, 5], \'c\': 3} ``` 2. **Concatenate lists for conflicting keys**: ```python dict1 = {\'a\': 1, \'b\': [2, 3]} dict2 = {\'b\': [4, 5], \'c\': 3} result = merge_dicts(dict1, dict2, merge_lists=True) print(result) # Output: {\'a\': 1, \'b\': [2, 3, 4, 5], \'c\': 3} ```","solution":"def merge_dicts(dict1, dict2, merge_lists=False): Merges two dictionaries into one. If merge_lists is True, concatenates lists for conflicting keys instead of overwriting. if not merge_lists: result = {**dict1, **dict2} else: result = {**dict1} for key, value in dict2.items(): if key in result and isinstance(result[key], list) and isinstance(value, list): result[key] += value else: result[key] = value return result"},{"question":"In this problem, you will practice writing a recursive function to generate all possible subsets of a given set. You are required to write a function named `GenerateSubsets` that takes a single parameter: 1. `input_set`: A list of unique integers representing the set. The function should return a list of lists, where each inner list is a unique subset of the input set. The subsets should be returned in no particular order. The function should consider the following: - The use of recursion to iteratively build the subsets. - Edge cases where the input set might be empty, returning `[[]]`. - The subsets can be generated by either including or excluding the current element at each step of the recursion. You are not allowed to use Python\'s itertools module or any similar built-in function directly providing combinations or permutations. Example usage: ```python input_set = [1, 2, 3] print(GenerateSubsets(input_set)) # Output could be something like: # [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]] ```","solution":"def GenerateSubsets(input_set): Function to generate all possible subsets of a given set using recursion. def helper(input_set, index, current_subset, result): if index == len(input_set): # Base case: if we have processed all elements, add the current subset to the result result.append(current_subset[:]) return # Exclude the current element and recurse helper(input_set, index + 1, current_subset, result) # Include the current element and recurse current_subset.append(input_set[index]) helper(input_set, index + 1, current_subset, result) current_subset.pop() # Backtrack to remove the last element result = [] helper(input_set, 0, [], result) return result"},{"question":"Checks the frequency of each digit (0-9) within a list of integers and returns the count of the most frequent digit. The function iterates through the list, counts the occurrences of each digit, and determines which digit appears the most. If multiple digits share the highest count, return any one of them. The function should output with: tuple: A tuple containing two elements - the digit that has the highest frequency and its count. The function should start with: ``` def task_func(numbers): ```","solution":"def task_func(numbers): Returns a tuple with the digit that has the highest frequency and its count from a list of integers. # Create a dictionary to hold the count of each digit digit_count = {str(d): 0 for d in range(10)} # Iterate through each number in the list for num in numbers: for digit in str(num): if digit in digit_count: digit_count[digit] += 1 # Find the most frequent digit most_frequent_digit = max(digit_count, key=digit_count.get) return int(most_frequent_digit), digit_count[most_frequent_digit]"},{"question":"Given a dataset containing information about various products in a supermarket (name, category, rating, and price), we want to visualize the relationship between the rating and price of the products using a scatter plot with Matplotlib. Additionally, we will use color to differentiate between product categories. You need to write a function `plot_product_ratings_vs_price` that takes the following arguments: - `products`: A Pandas DataFrame containing the columns \'name\', \'category\', \'rating\', and \'price\'. - `category_colors`: A dictionary mapping each category to a specific color to be used in the plot. - `export_figure`: A boolean value. If True, save the figure as \'scatter_plot.png\'; if False, simply display the plot. Your function should: 1. Create a scatter plot where the x-axis represents \'rating\' and the y-axis represents \'price\'. 2. Color the points according to the product category based on the `category_colors` dictionary. 3. Add appropriate axis labels and a title to the plot. 4. Save the figure if `export_figure` is True, otherwise just display the plot. Here\'s some template code to get you started: ```python import pandas as pd import matplotlib.pyplot as plt def plot_product_ratings_vs_price(products, category_colors, export_figure): fig, ax = plt.subplots() # Scatter plot with colors based on category for category, color in category_colors.items(): category_data = products[products[\'category\'] == category] ax.scatter(category_data[\'rating\'], category_data[\'price\'], c=color, label=category) ax.set_xlabel(\'Rating\') ax.set_ylabel(\'Price\') ax.set_title(\'Product Ratings vs. Price\') ax.legend(title=\'Category\') if export_figure: plt.savefig(\'scatter_plot.png\') else: plt.show() # Example usage: # Sample data data = { \'name\': [\'Apple\', \'Banana\', \'Shampoo\', \'Face Cream\', \'Bread\'], \'category\': [\'Fruits\', \'Fruits\', \'Toiletries\', \'Toiletries\', \'Bakery\'], \'rating\': [4.5, 4.0, 3.5, 4.2, 4.8], \'price\': [0.5, 0.3, 5.0, 10.0, 2.5] } products_df = pd.DataFrame(data) category_colors_dict = {\'Fruits\': \'red\', \'Toiletries\': \'blue\', \'Bakery\': \'green\'} plot_product_ratings_vs_price(products_df, category_colors_dict, export_figure=False) ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_product_ratings_vs_price(products, category_colors, export_figure): Plot a scatter plot of product ratings versus price, colored by category. Args: products (pd.DataFrame): DataFrame containing product information with columns \'name\', \'category\', \'rating\', and \'price\'. category_colors (dict): Dictionary mapping product categories to colors. export_figure (bool): If True, save the figure as \'scatter_plot.png\'. If False, display the plot. Returns: None fig, ax = plt.subplots() # Scatter plot with colors based on category for category, color in category_colors.items(): category_data = products[products[\'category\'] == category] ax.scatter(category_data[\'rating\'], category_data[\'price\'], c=color, label=category) ax.set_xlabel(\'Rating\') ax.set_ylabel(\'Price\') ax.set_title(\'Product Ratings vs. Price\') ax.legend(title=\'Category\') if export_figure: plt.savefig(\'scatter_plot.png\') else: plt.show()"},{"question":"You are given a list of strings where each string represents a mathematical expression that can contain integers, \'+\', \'-\', \'*\', \'/\', and parentheses \'()\'. Your task is to write a function `evaluate_expressions(expressions)` that evaluates each expression and returns a list of the results. The necessary steps are as follows: 1. Iterate through the list of expressions. 2. For each expression, safely evaluate it to get the result. 3. Store the result in a list. 4. Return the list of results. You are required to use Python\'s `eval` function in a safe manner with appropriate measures to prevent the execution of potentially harmful code. **Function Signature:** ```python def evaluate_expressions(expressions): pass ```","solution":"import math def evaluate_expressions(expressions): Evaluates a list of mathematical expressions and returns a list of results. Parameters: expressions (list): List of strings, where each string is a mathematical expression. Returns: list: List of results of evaluated expressions. results = [] for expr in expressions: # Safely evaluate the expression using eval # Set the globals to None and only include necessary builtins safe_dict = { \\"abs\\": abs, \\"min\\": min, \\"max\\": max, \\"round\\": round, \\"pow\\": pow, \\"sqrt\\": math.sqrt } result = eval(expr, {\\"__builtins__\\": safe_dict}, {}) results.append(result) return results"},{"question":"Use the depth-first search (DFS) algorithm to find all connected components in an undirected graph represented by an adjacency list. Represent the graph as a dictionary where keys are node labels and values are lists of adjacent nodes. The function should return a list of sets, each containing the nodes of a connected component. Nodes within each set should be sorted. You should write self-contained code starting with: ``` def find_connected_components(graph): ``` Example input: ``` graph = { 0: [1, 2], 1: [0, 2], 2: [0, 1, 3, 4], 3: [2, 4], 4: [2, 3], 5: [6], 6: [5] } ``` Example output: ``` [{0, 1, 2, 3, 4}, {5, 6}] ```","solution":"def find_connected_components(graph): Returns a list of sets, each set contains the nodes of a connected component. def dfs(node, visited, component): stack = [node] while stack: current = stack.pop() if current not in visited: visited.add(current) component.add(current) for neighbor in graph[current]: if neighbor not in visited: stack.append(neighbor) visited = set() components = [] for node in graph: if node not in visited: component = set() dfs(node, visited, component) components.append(component) return components"},{"question":"You are given a string `s` and a dictionary `wordDict` containing a list of unique words. Your task is to implement a function `word_break` that determines if `s` can be segmented into a space-separated sequence of one or more dictionary words from `wordDict`. The program should: 1. Use dynamic programming to solve the problem efficiently. 2. Create a `dp` array where `dp[i]` will be `True` if a valid word ends at index `i-1` in the string `s`. 3. Initialize `dp[0]` to `True` since an empty string is trivially segmented. 4. Iterate through the substring `s[0:i]` and update `dp` based on whether a valid word can be formed. Inputs: - `s`: A string containing only lowercase English letters. - `wordDict`: A list of strings representing the words in the dictionary. Output: - A boolean value indicating whether `s` can be segmented into one or more dictionary words. Function Signature: ```python def word_break(s: str, wordDict: list) -> bool: # Your implementation here pass ``` Example: Suppose we have the following inputs: ```python s = \\"leetcode\\" wordDict = [\\"leet\\", \\"code\\"] ``` Then, calling: ```python word_break(s, wordDict) ``` Should return: ```python True ``` Explanation: \\"leetcode\\" can be segmented as \\"leet code\\". Another example: ```python s = \\"applepenapple\\" wordDict = [\\"apple\\", \\"pen\\"] ``` Then, calling: ```python word_break(s, wordDict) ``` Should return: ```python True ``` Explanation: \\"applepenapple\\" can be segmented as \\"apple pen apple\\".","solution":"def word_break(s: str, wordDict: list) -> bool: Determines if the string `s` can be segmented into a space-separated sequence of one or more dictionary words from `wordDict`. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"You are tasked with designing a function to manage and query the availability scheduling of multiple employees. Each employee\'s availability is represented by a list of tuples, each tuple containing a start and end time indicating when the employee is available. Given the availability of multiple employees, your goal is to determine the common time slots when all the employees are available. You are required to implement the function `find_common_availability` which takes in a dictionary where keys are employee names and values are lists of availability tuples. The function should return the time slots during which all employees are available. **Function Signature:** ```python def find_common_availability(schedule: Dict[str, List[Tuple[int, int]]]) -> List[Tuple[int, int]]: ``` Input 1. `schedule` (Dict[str, List[Tuple[int, int]]]): Dictionary where keys are employee names (strings) and values are lists of tuples. Each tuple contains two integers representing the start and end time of availability (in 24-hour format). Output 1. A list of tuples where each tuple represents a time slot (start, end) during which all employees are available. Example Usage ```python schedule = { \\"Alice\\": [(9, 12), (14, 18)], \\"Bob\\": [(10, 13), (15, 17)], \\"Charlie\\": [(11, 13), (16, 18)] } common_availability = find_common_availability(schedule) print(f\\"Common Availability: {common_availability}\\") # Output: [(11, 13)] ``` Hints - Consider merging intervals of availability for each employee first. - Implement interval intersection logic to find common slots across multiple employees. - Be mindful of edge cases, such as no common availability or non-overlapping intervals.","solution":"from typing import Dict, List, Tuple def find_common_availability(schedule: Dict[str, List[Tuple[int, int]]]) -> List[Tuple[int, int]]: def merge_intervals(intervals): sorted_intervals = sorted(intervals) merged = [] for interval in sorted_intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1])) return merged def intersect_intervals(intervals1, intervals2): i, j = 0, 0 intersection = [] while i < len(intervals1) and j < len(intervals2): start = max(intervals1[i][0], intervals2[j][0]) end = min(intervals1[i][1], intervals2[j][1]) if start < end: intersection.append((start, end)) if intervals1[i][1] < intervals2[j][1]: i += 1 else: j += 1 return intersection if not schedule: return [] merged_availabilities = [] for employee, availability in schedule.items(): merged_availabilities.append(merge_intervals(availability)) common_availability = merged_availabilities[0] for i in range(1, len(merged_availabilities)): common_availability = intersect_intervals(common_availability, merged_availabilities[i]) return common_availability"},{"question":"You are asked to implement a simple text-based version of the classic game \\"Hangman.\\" The game allows the user to guess the letters of a hidden word, one by one, until they either guess the word entirely or run out of attempts. Create a function `play_hangman(word, max_attempts)` that will initialize the game with a given word and a maximum number of incorrect attempts allowed. The function will interact with the user through console input and output to manage the game flow. Follow these specifications: 1. **Game Initialization**: Display an underscore (\'_\') for each letter of the word. The word may contain only lowercase alphabetic characters with no spaces or special characters. 2. **User Guessing**: Ask the user to input a single letter each round. If the letter is in the word, reveal all instances of that letter in the word display. 3. **Tracking Guesses**: Keep track of the letters that have been guessed correctly and incorrectly. Do not allow the user to guess the same letter more than once. 4. **Feedback**: After each guess, display the current state of the word (with underscores for unguessed letters), the list of incorrect letters guessed so far, and the number of attempts remaining. 5. **Win/Loss Conditions**: The game ends when the user either guesses all the letters in the word or exhausts the maximum number of incorrect attempts. Display an appropriate message for either scenario. 6. **Input Validation**: Ensure that user input is a single alphabetic character that hasn\'t been guessed already. Prompt the user again if the input is invalid. Example: - Inputs: `play_hangman(\'python\', 6)` - Game Flow: ``` Word: _ _ _ _ _ _ Incorrect guesses: [] Remaining attempts: 6 Guess a letter: p Word: p _ _ _ _ _ Incorrect guesses: [] Remaining attempts: 6 Guess a letter: z Word: p _ _ _ _ _ Incorrect guesses: [z] Remaining attempts: 5 ``` - Output when game ends: Either \\"Congratulations! You\'ve guessed the word \'python\'!\\" or \\"Game Over! The word was \'python\'.\\"","solution":"def play_hangman(word, max_attempts): Function to play the Hangman game. Parameters: word: str - the word to be guessed max_attempts: int - number of incorrect attempts allowed word = word.lower() guessed_word = [\\"_\\" for _ in word] incorrect_guesses = [] correct_guesses = [] attempts_remaining = max_attempts while attempts_remaining > 0 and \\"_\\" in guessed_word: print(f\\"Word: {\' \'.join(guessed_word)}\\") print(f\\"Incorrect guesses: {\', \'.join(incorrect_guesses)}\\") print(f\\"Remaining attempts: {attempts_remaining}\\") guess = input(\\"Guess a letter: \\").lower().strip() if len(guess) != 1 or not guess.isalpha() or guess in correct_guesses or guess in incorrect_guesses: print(\\"Invalid guess. Please enter a single alphabetic character that you haven\'t guessed already.\\") continue if guess in word: correct_guesses.append(guess) for index, letter in enumerate(word): if letter == guess: guessed_word[index] = guess else: incorrect_guesses.append(guess) attempts_remaining -= 1 if \\"_\\" not in guessed_word: print(f\\"Congratulations! You\'ve guessed the word \'{word}\'!\\") else: print(f\\"Game Over! The word was \'{word}\'.\\")"},{"question":"# Problem Objective In this problem, you are required to write a Python function to determine the Least Common Multiple (LCM) of a list of integers. This function will help you understand essential operations on integer sequences, including computing LCM using the greatest common divisor (GCD). # Context The LCM of two integers a and b is the smallest positive integer that is evenly divisible by both a and b. The relationship between GCD and LCM of two integers is given by: [ text{LCM}(a, b) = frac{|a times b|}{text{GCD}(a, b)} ] For a list of integers, the LCM can be found iteratively. # Function Requirements You need to write a function called `find_lcm` that performs the following: 1. Takes one input parameter `numbers`, which is a list of positive integers. 2. Calculates the LCM of the list of integers. 3. Returns the LCM as an integer. # Required Library - math # Function Signature ```python import math from functools import reduce def find_lcm(numbers): Parameters: ---------- numbers: list A list of positive integers. Returns: ------- lcm: int An integer representing the least common multiple of the input list. pass ``` # Example Usage ```python numbers = [4, 5, 6] result = find_lcm(numbers) print(result) # Expected output is 60 numbers = [7, 3, 12, 15] result = find_lcm(numbers) print(result) # Expected output is 420 ``` # Constraints - The input list will contain at least two integers. - All integers in the list will be positive. # Hints - Use the `reduce` function from `functools` to iteratively apply a function to the list. - Utilize the `math.gcd` function to compute the GCD.","solution":"import math from functools import reduce def find_lcm(numbers): Parameters: ---------- numbers: list A list of positive integers. Returns: ------- lcm: int An integer representing the least common multiple of the input list. def lcm(a, b): return abs(a * b) // math.gcd(a, b) return reduce(lcm, numbers)"},{"question":"You are required to implement a class named `Library` that manages a collection of books. Each book is represented as a dictionary with the keys `title` (str) and `author` (str). The class should provide functionalities to add books, remove books by title, and search for books by author. **Class Definition** ```python class Library: def __init__(self): pass def add_book(self, title: str, author: str) -> None: pass def remove_book(self, title: str) -> bool: pass def find_books_by_author(self, author: str) -> list: pass ``` **Methods:** 1. `add_book(title: str, author: str) -> None`: Adds a new book to the library. 2. `remove_book(title: str) -> bool`: Removes the book with the given title from the library. Returns `True` if the book was successfully removed, `False` otherwise. 3. `find_books_by_author(author: str) -> list`: Returns a list of titles of books written by the specified author. **Example Usage:** ```python library = Library() library.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\") library.add_book(\\"1984\\", \\"George Orwell\\") library.add_book(\\"Animal Farm\\", \\"George Orwell\\") books = library.find_books_by_author(\\"George Orwell\\") # Should return: [\\"1984\\", \\"Animal Farm\\"] removed = library.remove_book(\\"1984\\") # Should return: True books = library.find_books_by_author(\\"George Orwell\\") # Should return: [\\"Animal Farm\\"] ``` **Details:** - The class should store books in an efficient data structure to allow quick addition, removal, and search operations. - Ensure that book titles are unique: adding a book with a title that already exists should overwrite the existing book\'s author. - If a book to be removed does not exist, the `remove_book` method should return `False`. - The `find_books_by_author` method should return an empty list if no books by the given author are found.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title: str, author: str) -> None: Adds a book to the library\'s collection. If the book title already exists, its author will be updated. self.books[title] = author def remove_book(self, title: str) -> bool: Removes a book by its title. Returns True if the book was successfully removed, and False if the book was not found in the collection. if title in self.books: del self.books[title] return True return False def find_books_by_author(self, author: str) -> list: Returns a list of titles of books written by the specified author. return [title for title, book_author in self.books.items() if book_author == author]"},{"question":"You need to implement a function named `rotate_matrix` which takes a 2D list (matrix) and rotates it 90 degrees clockwise. This problem will help you understand matrix manipulations and list comprehensions in Python. # Function Signature: ```python def rotate_matrix(matrix): pass ``` # Input: - `matrix` (List[List[int]]): A 2D list where each sublist represents a row in a matrix. The matrix is guaranteed to be non-empty and rectangular. # Output: - (List[List[int]]): A 2D list representing the input matrix rotated 90 degrees clockwise. # Requirements: 1. You must rotate the given 2D list by 90 degrees clockwise and return the resulting matrix. 2. Do not use any external libraries; solve the problem with built-in Python functionality. # Example: ```python # Example 1: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # Expected Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] # Example 2: matrix = [ [1, 2], [3, 4], [5, 6] ] rotate_matrix(matrix) # Expected Output: # [ # [5, 3, 1], # [6, 4, 2] # ] ``` # Explanation: - The function takes a matrix as input. - It then transposes the matrix by swapping rows with columns, and then reverses the order of columns to achieve a 90-degree rotation.","solution":"def rotate_matrix(matrix): Rotates the given 2D matrix by 90 degrees clockwise. Args: matrix (List[List[int]]): A 2D list representing the matrix. Returns: List[List[int]]: The matrix rotated 90 degrees clockwise. # Transpose the matrix transposed_matrix = list(zip(*matrix)) # Reverse each row in the transposed matrix to get the rotated matrix rotated_matrix = [list(row)[::-1] for row in transposed_matrix] return rotated_matrix"},{"question":"Implement a function that takes a string as input, normalizes it by removing non-alphanumeric characters and converting it to lowercase, then checks whether it is a palindrome (a word, phrase, or sequence that reads the same backward as forward). The function should return a boolean indicating whether the input string is a palindrome. You should write self-contained code starting with: ``` def is_palindrome(s): ``` Example: ``` assert is_palindrome(\\"A man, a plan, a canal, Panama\\") == True assert is_palindrome(\\"This is not a palindrome.\\") == False ```","solution":"import re def is_palindrome(s): Returns True if the input string s is a palindrome, after normalizing by removing non-alphanumeric characters and converting to lowercase. Otherwise, returns False. # Normalize the string by removing non-alphanumeric characters and converting to lowercase normalized_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the normalized string is equal to its reverse return normalized_str == normalized_str[::-1]"},{"question":"You are provided with a function `apply_transform(m, trans_m)` that applies a general transformation matrix to each point in a given matrix `m`. For this task, you should write a wrapper function named `scale_matrix` which applies a scaling transformation to the input matrix `m`. # Requirements: 1. Implement the function `scale_matrix(m, s)` where: - `m` is an ( n times 3 ) NumPy array representing ( n ) points in 3D space. - `s` is a 1D NumPy array of length 3 representing the scaling factors ([sx, sy, sz]). 2. The function should construct a scaling matrix: [ begin{bmatrix} sx & 0 & 0 & 0 0 & sy & 0 & 0 0 & 0 & sz & 0 0 & 0 & 0 & 1 end{bmatrix} ] and use the existing `apply_transform` function to apply this scaling to the points in `m`. 3. Return the scaled matrix. # Constraints: - Use the following NumPy functions: `numpy.append`, `numpy.delete`, `numpy.zeros`, `numpy.matmul`. - Ensure the function `scale_matrix` is robust and can handle various inputs of matrix `m`. # Example: ```python import numpy as np m = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) s = np.array([2, 3, 4]) scaled_m = scale_matrix(m, s) print(scaled_m) ``` Expected output: ```python # Output: # array([ # [ 2, 6, 12], # [ 8, 15, 24], # [14, 24, 36] # ]) ```","solution":"import numpy as np def apply_transform(m, trans_m): Apply the transformation matrix to each point in the given matrix m. Parameters: m (numpy.ndarray): An n x 3 matrix representing n points in 3D space. trans_m (numpy.ndarray): The 4x4 transformation matrix. Returns: numpy.ndarray: The transformed n x 3 matrix. # Append a column of ones to the matrix m to make it homogeneous coordinates homogeneous_m = np.c_[m, np.ones(m.shape[0])] # Apply the transformation transformed_homogeneous_m = np.matmul(homogeneous_m, trans_m.T) # Remove the appended ones and return the original 3D coordinates return transformed_homogeneous_m[:, :3] def scale_matrix(m, s): Apply a scaling transformation to the input matrix m. Parameters: m (numpy.ndarray): An n x 3 matrix representing n points in 3D space. s (numpy.ndarray): A 1D array of length 3 representing scaling factors [sx, sy, sz]. Returns: numpy.ndarray: The scaled n x 3 matrix. # Construct the scaling matrix scaling_matrix = np.array([ [s[0], 0, 0, 0], [0, s[1], 0, 0], [0, 0, s[2], 0], [0, 0, 0, 1] ]) # Apply the scaling transformation return apply_transform(m, scaling_matrix)"},{"question":"You are tasked with creating a function named `reverse_words_and_queue` that takes a string and a queue as inputs. The function should split the given string into words, reverse the order of the words, and then join them back into a single string. Additionally, to simulate the process running in a multi-threaded environment, it should introduce a random sleep time between 1 to 5 seconds each time a word is processed. After processing, the function should add the reversed string to the queue. To accomplish the random sleep, use the `random.randint` method from the `random` library. The `random.randint` method returns a random integer between two specified values, inclusive. You will use this method to determine the sleep time. Here\'s a detailed requirement for the function: 1. Define the function `reverse_words_and_queue(s, q)` where: - `s` is a string containing words separated by spaces. - `q` is a queue where the result will be stored. 2. Within the function: - Split the string `s` into words. - Reverse the order of the words. - Join the words back into a single string. - For each word processed, generate a random sleep time using `random.randint(1, 5)` and use `time.sleep(sleep_time)` to pause the function. - Put the reversed string into the queue. 3. The actual implementation should not be concerned with other details of threading or process management. Your goal is to define the `reverse_words_and_queue` function that behaves as specified above. Example: ```python import queue import random import time q = queue.Queue() sentence = \\"hello world example\\" reverse_words_and_queue(sentence, q) ``` After running the function, calling `q.get()` should return `\\"example world hello\\"`.","solution":"import random import time from queue import Queue def reverse_words_and_queue(s, q): Reverses the words in the given string and adds the result to the queue with simulated processing time. Parameters: s (str): The input string containing words separated by spaces. q (Queue): The queue where the reversed string will be stored. words = s.split() reversed_words = words[::-1] # Simulate processing time with random sleep for each word for word in reversed_words: sleep_time = random.randint(1, 5) time.sleep(sleep_time) reversed_string = \' \'.join(reversed_words) q.put(reversed_string)"},{"question":"You are tasked with implementing a function called `most_frequent_words` that processes a given text string, counts the frequency of each word, and returns a list of the most frequent words in decreasing order of their frequency. Words should be compared case-insensitively, and punctuation should be ignored. **Function Signature**: ```python def most_frequent_words(text: str) -> list: ``` **Parameters**: - `text` (str): The input text string to be processed. **Returns**: - `list`: A list of the most frequent words sorted by their frequency in descending order. If two words have the same frequency, the words should be sorted alphabetically. **Requirements**: 1. Ignore case when determining word frequency (i.e., treat \\"Word\\" and \\"word\\" as the same). 2. Punctuation marks should be ignored and not considered part of the words. 3. Return the list of words sorted first by frequency (highest to lowest) and then alphabetically if frequencies are the same. **Example Usage**: ```python text = \\"In a village of La Mancha, the name of which I have no desire to\\"+ \\" call to mind, there lived not long since one of those gentlemen\\"+ \\" that keep a lance in the lance-rack, an old buckler, a lean hack, and\\"+ \\" a greyhound for coursing. An olla of rather more beef than mutton,\\"+ \\" a salad on most nights, scraps on Saturdays, lentils on Fridays,\\"+ \\" and a pigeon or so extra on Sundays, made away with three-quarters of his income.\\" most_frequent_words(text) ``` This would return the list: ```python [\'a\', \'on\', \'of\', \'the\', \'an\', \'and\', \'in\', \'to\', \'not\', \'one\', \'there\', \'village\', \'which\', \'with\'] ``` **Instructions**: Implement the `most_frequent_words` function according to the provided specifications. Ensure that your code is efficient and handles edge cases (e.g., different cases, punctuation marks).","solution":"import re from collections import Counter def most_frequent_words(text: str) -> list: Returns a list of the most frequent words in a given text sorted by their frequency in descending order. # Removing punctuation and converting to lower case words = re.findall(r\'bw+b\', text.lower()) # Count frequency of each word word_counts = Counter(words) # Sort words first by frequency (highest to lowest) and then alphabetically sorted_words = sorted(word_counts, key=lambda word: (-word_counts[word], word)) return sorted_words"},{"question":"In graph theory, one crucial problem is to determine if a graph contains a cycle. For this problem, you need to implement a function `has_cycle` that checks if an undirected graph has any cycles. Given a list of edges describing an undirected graph, write the function `has_cycle(edges, num_nodes)` to detect if there is a cycle. The function should utilize **Depth-First Search (DFS)** for this purpose. **Function Specification:** 1. **Function Name**: `has_cycle` 2. **Parameters**: - `edges` (list of tuples): Each tuple represents an edge (u, v) between node `u` and node `v`. - `num_nodes` (int): The number of nodes in the graph. 3. **Returns**: - A boolean value `True` if the graph contains a cycle, otherwise `False`. **Steps**: - Create an adjacency list from the list of edges. - Maintain an array to track visited nodes. - For each unvisited node, perform DFS to check for the presence of cycles in the graph. - Track nodes in the current DFS stack to detect back edges which indicate a cycle. - If a cycle is detected, return `True`. If after exploring all nodes no cycles are found, return `False`. Your solution should handle edge cases, such as graphs with no edges or a single node without self-loops. Here is a sample input-output case for clarity: **Example:** ```python edges = [(0, 1), (1, 2), (2, 0), (3, 4)] num_nodes = 5 has_cycle(edges, num_nodes) # Returns: True (The cycle is 0-1-2-0) ``` Ensure efficient traversal and cycle detection using appropriate data structures.","solution":"def has_cycle(edges, num_nodes): from collections import defaultdict # Helper function for DFS def dfs(v, visited, parent): visited[v] = True for neighbor in adj_list[v]: if not visited[neighbor]: if dfs(neighbor, visited, v): return True elif neighbor != parent: return True return False # Create an adjacency list from the edges adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Initialize visited array visited = [False] * num_nodes for i in range(num_nodes): if not visited[i]: if dfs(i, visited, -1): return True return False"},{"question":"You are required to implement a function `analyze_customer_data()` that processes a dataset containing customer transaction records. The function takes as input a DataFrame `df` which includes customer IDs, transaction dates, and transaction amounts. Your task is to: 1. Calculate the total transaction amount for each customer. 2. Calculate the number of transactions for each customer. 3. Determine the first and last transaction dates for each customer. 4. Create a new DataFrame with the columns: \'CustomerID\', \'TotalAmount\', \'TransactionCount\', \'FirstTransactionDate\', \'LastTransactionDate\'. 5. Identify the top 3 customers with the highest total transaction amounts and return their customer IDs. Function Signature: ```python def analyze_customer_data(df): pass ``` Libraries to be used: - pandas Example usage: ```python # Assuming all necessary imports have been done and df is a pandas DataFrame containing the required data analyze_customer_data(df) ``` Notes: - The \'transaction date\' column is of datetime type. - The returned DataFrame should be sorted by \'CustomerID\'.","solution":"import pandas as pd def analyze_customer_data(df): Processes customer transaction records. Args: df (pd.DataFrame): DataFrame containing \'CustomerID\', \'TransactionDate\', \'TransactionAmount\'. Returns: pd.DataFrame: A DataFrame with summary metrics per customer. list: List of top 3 customer IDs with highest total transaction amounts. # Ensure the \'TransactionDate\' is in datetime format df[\'TransactionDate\'] = pd.to_datetime(df[\'TransactionDate\']) # Group by \'CustomerID\' and calculate the required metrics summary = df.groupby(\'CustomerID\').agg( TotalAmount=(\'TransactionAmount\', \'sum\'), TransactionCount=(\'CustomerID\', \'count\'), FirstTransactionDate=(\'TransactionDate\', \'min\'), LastTransactionDate=(\'TransactionDate\', \'max\') ).reset_index() # Sort the DataFrame by \'CustomerID\' summary = summary.sort_values(by=\'CustomerID\') # Identify the top 3 customers with highest total transaction amounts top_customers = summary.nlargest(3, \'TotalAmount\')[\'CustomerID\'].tolist() return summary, top_customers"},{"question":"You are tasked with implementing a function to find the shortest path in a maze represented by a 2D grid. The function should be named `shortest_path` and it will take two arguments: - `maze`: A list of lists of integers representing the maze, where `1` represents a wall and `0` represents an empty space. - `start_end`: A tuple containing two tuples, with the coordinates of the start and end point respectively. For example, `((0, 0), (n-1, m-1))` for a maze of dimensions `n x m`. The goal of the `shortest_path` function is to: 1. Navigate from the start point to the end point while only moving horizontally or vertically through empty spaces (0\'s). 2. Return the length of the shortest path in terms of the number of moves made, or return `-1` if there is no valid path. You may use the `deque` data structure from Python\'s `collections` library to implement a Breadth-First Search (BFS) algorithm to find the shortest path. Here is an example usage of `deque`: - `collections.deque()`: Initializes a new deque object. - `deque.append(x)`: Adds element `x` to the right end of the deque. - `deque.popleft()`: Removes and returns an element from the left end of the deque. Implement the `shortest_path` function following this description.","solution":"from collections import deque def shortest_path(maze, start_end): Returns the length of the shortest path from start to end in the given maze. Arguments: maze -- a list of lists of integers representing the maze (0: empty space, 1: wall) start_end -- a tuple containing two tuples, (start, end), with start and end coordinates Returns: int -- the length of the shortest path or -1 if there is no valid path start, end = start_end n, m = len(maze), len(maze[0]) # Check if start or end is a wall if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1: return -1 # Directions for moving in 4 possible directions: right, left, down, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS queue initialization queue = deque([(start[0], start[1], 0)]) # (row, col, path_length) visited = set((start[0], start[1])) # Set to keep track of visited cells while queue: x, y, path_length = queue.popleft() if (x, y) == end: return path_length for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and maze[nx][ny] == 0: queue.append((nx, ny, path_length + 1)) visited.add((nx, ny)) return -1"},{"question":"Write a function that takes a list of strings as input, removes all duplicate strings, sorts the remaining strings in ascending alphabetical order, and returns the modified list. The function should be case-sensitive, meaning that \'apple\' and \'Apple\' should be considered two distinct strings. The function should output: modified_list (list): A list of unique strings sorted in ascending alphabetical order. You should write self-contained code starting with: ```python def process_strings(string_list): ```","solution":"def process_strings(string_list): Takes a list of strings as input, removes all duplicate strings, sorts the remaining strings in ascending alphabetical order, and returns the modified list. Args: string_list (list): A list of strings. Returns: list: A sorted list of unique strings. unique_strings = sorted(set(string_list)) return unique_strings"},{"question":"You are tasked with developing a function that reformats a given string of words into a balanced binary search tree (BST). Each word should be treated as a node in the BST, and the tree should maintain its balanced property after each insertion. # Requirements: 1. **Function Name**: `string_to_bst` 2. **Inputs**: - `text`: A string consisting of words separated by spaces. 3. **Outputs**: - The root node of the balanced BST. # Specific Details: - You need to split the input string into words. - Each word should be inserted into the BST maintaining the BST properties. - You will need to balance the BST whenever a new word is inserted. # What you need to implement: 1. **Class Definition**: Define a class `TreeNode` to represent the nodes of the BST. Each `TreeNode` should have properties `value`, `left`, and `right` to store the node value and pointers to the left and right child nodes respectively. 2. **Insert Function**: Define a utility function `insert` that inserts a new word into the BST while maintaining its properties. 3. **Balance Function**: Define a utility function `balance` that balances the BST after each insertion ensuring the tree’s height is minimized. # Class and Utility Function Definitions: ```python class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert(root, value): if root is None: return TreeNode(value) elif value < root.value: root.left = insert(root.left, value) else: root.right = insert(root.right, value) return root def balance(root): # Convert the BST into a sorted list def inorder(node): return inorder(node.left) + [node.value] + inorder(node.right) if node else [] # Convert sorted list back to a balanced BST def sorted_list_to_bst(lst): if not lst: return None mid = len(lst) // 2 node = TreeNode(lst[mid]) node.left = sorted_list_to_bst(lst[:mid]) node.right = sorted_list_to_bst(lst[mid + 1:]) return node nodes = inorder(root) return sorted_list_to_bst(nodes) ``` # Function Definition: ```python def string_to_bst(text): words = text.split() root = None for word in words: root = insert(root, word) root = balance(root) return root ``` # Example: For the input `text = \\"happy coding balanced bst tree test\\"`, the output will be the root node of a balanced BST containing words [\\"happy\\", \\"coding\\", \\"balanced\\", \\"bst\\", \\"tree\\", \\"test\\"]. Your solution must ensure that the BST is balanced after each insertion, providing a tree with minimal height.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert(root, value): Inserts a value into the BST. if root is None: return TreeNode(value) elif value < root.value: root.left = insert(root.left, value) else: root.right = insert(root.right, value) return root def balance(root): Balances the given BST and returns the root of the balanced BST. def inorder(node): return inorder(node.left) + [node.value] + inorder(node.right) if node else [] def sorted_list_to_bst(lst): if not lst: return None mid = len(lst) // 2 node = TreeNode(lst[mid]) node.left = sorted_list_to_bst(lst[:mid]) node.right = sorted_list_to_bst(lst[mid + 1:]) return node nodes = inorder(root) return sorted_list_to_bst(nodes) def string_to_bst(text): Converts a string of words into a balanced BST. words = text.split() root = None for word in words: root = insert(root, word) root = balance(root) return root # Utility function to verify the structure of the tree (for testing) def bst_to_sorted_list(root): Converts a BST to a sorted list of values. def inorder(node): return inorder(node.left) + [node.value] + inorder(node.right) if node else [] return inorder(root)"},{"question":"Write a function `calculate_total_price(prices: List[float], discount_code: str) -> float` that calculates the total price of a list of items after applying a discount based on a given discount code. The discount is applied to the total sum of all prices based on the following rules: # Discount Rules: 1. If the discount code is \\"SALE20\\", apply a 20% discount to the total sum. 2. If the discount code is \\"HALFOFF\\", apply a 50% discount to the total sum. 3. If the discount code is \\"FREESHIP\\", subtract a fixed shipping fee of 5.00 from the total sum, but the resulting total cannot be negative. 4. If the discount code is \\"NOPROMO\\", no discount is applied. The function should return the total price after applying the discount, rounded to two decimal places. Examples: - `calculate_total_price([100.0, 200.0, 50.0], \\"SALE20\\")` should return 280.00 - `calculate_total_price([50.0, 60.0], \\"HALFOFF\\")` should return 55.00 - `calculate_total_price([25.0, 30.0], \\"FREESHIP\\")` should return 50.00 - `calculate_total_price([15.0], \\"FREESHIP\\")` should return 10.00 - `calculate_total_price([100.0, 200.0], \\"NOPROMO\\")` should return 300.00 # Function Signature: ```python def calculate_total_price(prices: List[float], discount_code: str) -> float: ``` # Constraints: - The input list will always contain at least one price. - Each price will be a non-negative float. - The discount_code will always be one of the specified valid codes.","solution":"from typing import List def calculate_total_price(prices: List[float], discount_code: str) -> float: Calculates the total price after applying a discount based on the given discount code. :param prices: A list of prices. :param discount_code: A discount code that determines the discount applied. :return: The total price after applying the discount, rounded to two decimal places. total = sum(prices) if discount_code == \\"SALE20\\": total *= 0.80 elif discount_code == \\"HALFOFF\\": total *= 0.50 elif discount_code == \\"FREESHIP\\": total -= 5.00 if total < 0: total = 0.00 # If discount_code is \\"NOPROMO\\", no changes are made to total. return round(total, 2)"},{"question":"You are provided with a dataset containing the ages and salaries of employees in a company. We aim to implement and visualize a polynomial regression model using this dataset. Your task is to create a function named `plotPolynomialRegression` to compute and plot the polynomial regression line of a specified degree along with the data points. Your function should perform the following tasks: 1. Plot the given data points (`Age` as x-axis and `Salary` as y-axis). 2. Fit a polynomial regression model of a specified degree to the data. 3. Using the model, plot the estimated regression line. 4. Use `numpy.linspace` to generate evenly spaced numbers over the interval of the x-coordinates to plot the regression line smoothly. 5. Compute and print the Root Mean Squared Error (RMSE) of the predicted values. You may assume the availability of the following helper functions: - `fit_polynomial(X, Y, degree)`: which fits a polynomial regression model of the given degree and returns the model parameters. - `predict_polynomial(params, X)`: which returns the predicted Y values using the model parameters. - `rmse(Y, Y_pred)`: which calculates the Root Mean Squared Error between actual and predicted Y values. **Function Signature** ```python def plotPolynomialRegression(X, Y, degree): # Your code goes here ``` **Input** - `X`: 1D numpy array representing the ages. - `Y`: 1D numpy array representing the salaries. - `degree`: Integer representing the degree of the polynomial regression. **Output** - A plot displaying: - Scatter plot of the original data points. - The polynomial regression line. - A printed statement: \\"Root Mean Squared Error: {value}\\" **Example** ```python # Example Usage import numpy as np X = np.array([25, 30, 35, 40, 45]) Y = np.array([30000, 35000, 40000, 50000, 55000]) degree = 2 plotPolynomialRegression(X, Y, degree) ``` You should use `numpy.linspace` to create a smooth line for the regression plot. Refer to the given documentation snippet for information on how to use `numpy.linspace`.","solution":"import numpy as np import matplotlib.pyplot as plt def fit_polynomial(X, Y, degree): Fits a polynomial model to the data and returns the model parameters. coeffs = np.polyfit(X, Y, degree) return coeffs def predict_polynomial(params, X): Predicts the Y values using the polynomial model parameters. Y_pred = np.polyval(params, X) return Y_pred def rmse(Y, Y_pred): Computes the Root Mean Squared Error between actual and predicted Y values. error = np.sqrt(np.mean((Y - Y_pred) ** 2)) return error def plotPolynomialRegression(X, Y, degree): Plots polynomial regression and prints the RMSE. # Scatter plot of the data points plt.scatter(X, Y, color=\'blue\', label=\'Data Points\') # Fit polynomial model params = fit_polynomial(X, Y, degree) # Generate X values for smooth plotting of the polynomial line X_line = np.linspace(min(X), max(X), 500) Y_line = predict_polynomial(params, X_line) # Plot the polynomial regression line plt.plot(X_line, Y_line, color=\'red\', label=f\'Polynomial Regression (degree={degree})\') # Compute and print RMSE Y_pred = predict_polynomial(params, X) error = rmse(Y, Y_pred) print(f\'Root Mean Squared Error: {error}\') # Labels and legend plt.xlabel(\'Age\') plt.ylabel(\'Salary\') plt.legend() plt.show()"},{"question":"# Find Minimum in Rotated Sorted Array You are given a list of unique integers `nums` that was originally sorted in ascending order and was then rotated at an unknown pivot. Your task is to find the minimum element in the list. Write a function `find_min(nums: List[int]) -> int` that returns the minimum element in the rotated sorted list. **Function Signature:** ```python def find_min(nums: List[int]) -> int: pass ``` **Input:** - `nums` (List[int]): A list of unique integers that were originally in ascending order and then rotated. **Output:** - (int): The minimum element in the rotated sorted list. **Example:** ```python nums = [4, 5, 6, 7, 0, 1, 2] assert find_min(nums) == 0 nums = [3, 4, 5, 1, 2] assert find_min(nums) == 1 ``` **Explanation:** In the first example: - The original list was `[0, 1, 2, 4, 5, 6, 7]` which was rotated to `[4, 5, 6, 7, 0, 1, 2]`. The minimum element is `0`. In the second example: - The original list was `[1, 2, 3, 4, 5]` which was rotated to `[3, 4, 5, 1, 2]`. The minimum element is `1`. **Hint:** - Use a binary search approach to find the minimum element efficiently. Adjust the search boundaries based on the mid-value and the current boundaries.","solution":"from typing import List def find_min(nums: List[int]) -> int: left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"You are required to write a function `find_unique_paths` that calculates the number of unique paths from the top-left corner of an `m x n` grid to the bottom-right corner. The robot can only move either down or right at any point in time. Additionally, some cells in the grid contain obstacles, and the robot cannot move to these cells. The grid is represented as a 2D list where `0` represents a free cell and `1` represents an obstacle. **Function Signature:** ```python def find_unique_paths(grid: List[List[int]]) -> int: pass ``` # Example: ```python # Example 1 grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] # Output: 2 print(find_unique_paths(grid)) # Example 2 grid = [ [0, 1], [0, 0] ] # Output: 1 print(find_unique_paths(grid)) ``` # Requirements: - Implement the function using dynamic programming. - Handle edge cases such as grids with all cells being obstacles or paths entirely free of obstacles. # Constraints: - The input grid will have dimensions that do not exceed `100 x 100`. - The grid will contain at least one free cell at the start (grid[0][0]) and one free cell at the end (grid[m-1][n-1]).","solution":"from typing import List def find_unique_paths(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Convert a list of positive integers into a list of their binary string representations, ensuring each binary string is padded with leading zeros to make them all the same length. Use Python\'s built-in functionalities and include type hints for the input and output. The function should output with: List[str]: A list of binary string representations with equal length. You should write self-contained code starting with: ``` from typing import List def task_func(numbers: List[int]) -> List[str]: ```","solution":"from typing import List def task_func(numbers: List[int]) -> List[str]: Converts a list of positive integers into a list of their binary string representations, ensuring each binary string is padded with leading zeros to make them all the same length. Args: numbers (List[int]): A list of positive integers. Returns: List[str]: A list of binary string representations with equal length. if not numbers: return [] max_len = max(len(bin(num)[2:]) for num in numbers) return [bin(num)[2:].zfill(max_len) for num in numbers]"},{"question":"You are given a directory `sensor_data/` containing CSV files with temperature readings from different sensors. Each CSV file is named after the respective sensor, e.g., \'sensor1.csv\', \'sensor2.csv\', etc. Each file contains a timestamped column \'Temperature\' with the recorded temperature values. Your task is to create a function called `aggregate_average_temperature` that processes these CSV files to calculate the average temperature readings for a specified time range across all sensors. The function should do the following: 1. Import the necessary libraries. 2. Accept two parameters: `start_time` and `end_time` in the format \'YYYY-MM-DD HH:MM:SS\'. 3. Read each CSV file in the `sensor_data/` directory using `pandas.read_csv`. 4. Filter the temperature readings within the provided time range. 5. Calculate the average temperature for each sensor. 6. Return a dictionary where keys are sensor names and values are the average temperature readings. Here\'s an example of how your function should be called: ```python result = aggregate_average_temperature(\'2023-01-01 00:00:00\', \'2023-01-02 00:00:00\') print(result) ``` This will read all the sensor CSV files, filter temperature readings within the specified time range, calculate the average temperature for each sensor, and output the results as a dictionary. Use the `pandas.read_csv` function and appropriate filtering methods as part of your solution.","solution":"import pandas as pd import os def aggregate_average_temperature(start_time, end_time): sensor_data_dir = \'sensor_data/\' result = {} # Convert start_time and end_time to datetime start_time = pd.to_datetime(start_time) end_time = pd.to_datetime(end_time) for filename in os.listdir(sensor_data_dir): if filename.endswith(\'.csv\'): sensor_name = filename.split(\'.\')[0] file_path = os.path.join(sensor_data_dir, filename) df = pd.read_csv(file_path) # Convert `Timestamp` column to datetime df[\'Timestamp\'] = pd.to_datetime(df[\'Timestamp\']) # Filter the data within the time range mask = (df[\'Timestamp\'] >= start_time) & (df[\'Timestamp\'] <= end_time) filtered_df = df.loc[mask] # Calculate the average temperature if not filtered_df.empty: avg_temp = filtered_df[\'Temperature\'].mean() result[sensor_name] = avg_temp return result"},{"question":"Design a program that assists a museum with organizing their collection of artifacts. Each artifact has a name, a description, and an estimated value in dollars. The museum staff wants to be able to add new artifacts, remove artifacts by their name, and view a list of all artifacts in a specific value range. You will write a class named `Artifact` and another class named `Museum`. The `Artifact` class should have: - `name`: A string representing the name of the artifact. - `description`: A string representing the description of the artifact. - `value`: An integer representing the estimated value of the artifact in dollars. The methods of the `Artifact` class should include: - `__init__(self, name, description, value)`: The constructor that initializes the artifact\'s information. - `__str__(self)`: A method to provide a string representation of the artifact, formatted as \\"Name: {name}, Description: {description}, Value: {value}\\". The `Museum` class should have: - `artifacts`: A list to hold all the `Artifact` objects. The methods of the `Museum` class should include: - `__init__(self)`: The constructor that initializes the artifacts list. - `add_artifact(self, artifact)`: A method to add an `Artifact` object to the artifacts list. - `remove_artifact(self, name)`: A method to remove an artifact from the list by its name. If the artifact is not found, print \\"Artifact not found.\\" - `view_artifacts_in_value_range(self, min_value, max_value)`: A method to return a list of artifacts whose values are within the specified range (inclusive). Example usage: ```python class Artifact: def __init__(self, name, description, value): self.name = name self.description = description self.value = value def __str__(self): return f\\"Name: {self.name}, Description: {self.description}, Value: {self.value}\\" class Museum: def __init__(self): self.artifacts = [] def add_artifact(self, artifact): self.artifacts.append(artifact) def remove_artifact(self, name): for artifact in self.artifacts: if artifact.name == name: self.artifacts.remove(artifact) return print(\\"Artifact not found.\\") def view_artifacts_in_value_range(self, min_value, max_value): return [artifact for artifact in self.artifacts if min_value <= artifact.value <= max_value] # Example usage: museum = Museum() artifact1 = Artifact(\\"Mona Lisa\\", \\"A portrait painting by Leonardo da Vinci\\", 850000000) artifact2 = Artifact(\\"Rosetta Stone\\", \\"An ancient Egyptian stone inscribed with a decree\\", 1000000) artifact3 = Artifact(\\"Terracotta Army\\", \\"A collection of terracotta sculptures depicting the armies of Qin Shi Huang\\", 5000000) museum.add_artifact(artifact1) museum.add_artifact(artifact2) museum.add_artifact(artifact3) print(museum.view_artifacts_in_value_range(1000000, 5000000)) museum.remove_artifact(\\"Rosetta Stone\\") print(museum.view_artifacts_in_value_range(1000000, 5000000)) ```","solution":"class Artifact: def __init__(self, name, description, value): self.name = name self.description = description self.value = value def __str__(self): return f\\"Name: {self.name}, Description: {self.description}, Value: {self.value}\\" class Museum: def __init__(self): self.artifacts = [] def add_artifact(self, artifact): self.artifacts.append(artifact) def remove_artifact(self, name): for artifact in self.artifacts: if artifact.name == name: self.artifacts.remove(artifact) return print(\\"Artifact not found.\\") def view_artifacts_in_value_range(self, min_value, max_value): return [artifact for artifact in self.artifacts if min_value <= artifact.value <= max_value]"},{"question":"You are required to write a function `most_frequent_words(text)` that takes a string `text` as input and returns the 10 most frequent words in the text along with their frequencies. The words should be returned as a pandas DataFrame with two columns labeled \\"word\\" and \\"frequency\\". The words should be: - Split based on whitespace and punctuation. - Converted to lowercase. - Counted to find their frequency. You need to ensure that the results are sorted by frequency in descending order. If two words have the same frequency, they should be sorted alphabetically in ascending order. **Function Signature:** ```python import pandas as pd import re from collections import Counter def most_frequent_words(text: str) -> pd.DataFrame: pass ``` **Example Usage:** ```python text = \\"This is a test. This test is only a test.\\" df = most_frequent_words(text) print(df) ``` **Expected Output:** ``` word frequency 0 test 3 1 is 2 2 a 2 3 this 2 4 only 1 ``` Ensure that your function handles text with various punctuation marks, handles cases consistently, and accurately counts the frequency of each word.","solution":"import pandas as pd import re from collections import Counter def most_frequent_words(text: str) -> pd.DataFrame: # Remove punctuation and split by whitespace words = re.findall(r\'bw+b\', text.lower()) # Count frequency of each word word_counts = Counter(words) # Convert to DataFrame df = pd.DataFrame(word_counts.items(), columns=[\'word\', \'frequency\']) # Sort by frequency (descending) and word (ascending) df = df.sort_values(by=[\'frequency\', \'word\'], ascending=[False, True]) # Get top 10 most frequent words top10_df = df.head(10).reset_index(drop=True) return top10_df"},{"question":"You are tasked with creating a function that evaluates arithmetic expressions provided in postfix notation (also known as Reverse Polish notation). Postfix notation is a mathematical notation in which every operator follows all of its operands. For example, the expression `\\"3 4 + 2 *\\"` is equivalent to `\\"(3 + 4) * 2\\"` in infix notation and evaluates to `14`. Your task is to write a function `evaluate_postfix(expression: str) -> int` that evaluates a given postfix expression and returns the result as an integer. The postfix expression will be a string with each token (numbers and operators) separated by a space. The function should be able to handle the four basic arithmetic operators (`+`, `-`, `*`, `/`). The division operator `/` should perform integer division. # Example Usage ```python >>> evaluate_postfix(\\"3 4 + 2 *\\") 14 >>> evaluate_postfix(\\"5 1 2 + 4 * + 3 -\\") 14 >>> evaluate_postfix(\\"7 8 + 3 2 + /\\") 3 ``` # Constraints - You may assume that the `expression` input is a valid postfix expression. - All tokens in the expression will be valid integers or one of the four operators (`+`, `-`, `*`, `/`). - The function should handle integer division, where the result should be truncated towards zero. # Instructions 1. Parse the `expression` string by splitting it into tokens. 2. Use a stack to evaluate the postfix expression: - Push numbers onto the stack. - Pop two numbers for each operator and apply the operator, then push the result back onto the stack. 3. Return the final result, which should be the only value on the stack after the entire expression has been processed.","solution":"def evaluate_postfix(expression: str) -> int: Evaluates a given postfix expression and returns the result as an integer. stack = [] tokens = expression.split() for token in tokens: if token.isdigit() or (token[0] == \'-\' and len(token) > 1 and token[1:].isdigit()): stack.append(int(token)) else: right = stack.pop() left = stack.pop() if token == \\"+\\": stack.append(left + right) elif token == \\"-\\": stack.append(left - right) elif token == \\"*\\": stack.append(left * right) elif token == \\"/\\": stack.append(int(left / right)) # Perform integer division return stack[0]"},{"question":"In this task, you will implement a Python function that simulates a simplified banking system focusing on multithreaded transactions. You need to handle deposits and withdrawals in a thread-safe manner. Your task is to implement the following function: ```python def process_transactions(account_balance: int, transactions: list): ``` **Parameters:** - `account_balance` (int): The initial balance of the account. - `transactions` (list of tuples): A list of transactions wherein each transaction is represented by a tuple with two elements: a string and an integer. The string can be either \\"deposit\\" or \\"withdraw\\", and the integer represents the amount. **Function Requirements:** 1. Inside `process_transactions`, create a function named `apply_transaction` that takes a transaction tuple and updates the account balance accordingly: - If the transaction type is \\"deposit\\", add the amount to the balance. - If the transaction type is \\"withdraw\\", subtract the amount from the balance. 2. Use a `threading.Lock` to ensure that only one thread can modify the account balance at a time. 3. Create a new thread for each transaction in the `transactions` list and start it. 4. Ensure that the main thread waits for all transaction threads to complete before it returns the final account balance. 5. The function should return the final account balance after processing all transactions. **Example Usage:** ```python initial_balance = 100 transactions = [(\\"deposit\\", 50), (\\"withdraw\\", 20), (\\"deposit\\", 100), (\\"withdraw\\", 150)] final_balance = process_transactions(initial_balance, transactions) print(final_balance) ``` Output: ``` 80 ``` **Note:** - You must use `threading.Thread` to create threads. - You must use `threading.Lock` to ensure thread-safe transactions.","solution":"import threading def process_transactions(account_balance: int, transactions: list) -> int: Processes a list of transactions on an account in a thread-safe manner. Returns the final account balance. Parameters: - account_balance (int): The initial balance of the account. - transactions (list of tuples): A list of transactions with each transaction being a tuple with a string (\\"deposit\\"/\\"withdraw\\") and an integer (amount). Returns: int: The final balance after processing all transactions. lock = threading.Lock() def apply_transaction(transaction): nonlocal account_balance trans_type, amount = transaction with lock: if trans_type == \\"deposit\\": account_balance += amount elif trans_type == \\"withdraw\\": account_balance -= amount threads = [] for transaction in transactions: thread = threading.Thread(target=apply_transaction, args=(transaction,)) threads.append(thread) thread.start() for thread in threads: thread.join() return account_balance"},{"question":"You have been contracted to create a Python function that converts a given XML file containing book information into a JSON format. The function named `convert_xml_to_json(xml_file_path)` should: 1. Accept one argument: - `xml_file_path`: a string representing the path to the XML file. 2. Use Python\'s `xml.etree.ElementTree` module to read and parse the XML file. The XML file follows a structure where each `book` node has attributes such as `title`, `author`, `genre`, `price`, `publish_date`, and `description`. 3. Convert the parsed data into a JSON formatted string. Each `book` node should be converted into a dictionary with keys corresponding to the attributes. 4. Return the JSON formatted string, ensuring it is properly structured and formatted. Example of the expected JSON structure: ```json [ { \\"title\\": \\"Book Title 1\\", \\"author\\": \\"Author 1\\", \\"genre\\": \\"Fiction\\", \\"price\\": \\"20.00\\", \\"publish_date\\": \\"2023-01-01\\", \\"description\\": \\"Description of Book 1\\" }, { \\"title\\": \\"Book Title 2\\", \\"author\\": \\"Author 2\\", \\"genre\\": \\"Non-Fiction\\", \\"price\\": \\"15.50\\", \\"publish_date\\": \\"2023-02-15\\", \\"description\\": \\"Description of Book 2\\" } ] ``` Note: Make sure to handle all edge cases, including empty XML files or files with missing attributes, in a graceful manner.","solution":"import xml.etree.ElementTree as ET import json import os def convert_xml_to_json(xml_file_path): Converts an XML file containing book information into a JSON formatted string. :param xml_file_path: A string representing the path to the XML file. :return: A JSON formatted string. if not os.path.exists(xml_file_path) or not os.path.isfile(xml_file_path): raise FileNotFoundError(f\\"The file {xml_file_path} does not exist or is not a file.\\") try: tree = ET.parse(xml_file_path) root = tree.getroot() except ET.ParseError: raise ValueError(\\"The XML file is not well-formed.\\") books_list = [] for book in root.findall(\'book\'): book_data = { \'title\': book.findtext(\'title\', default=\\"\\"), \'author\': book.findtext(\'author\', default=\\"\\"), \'genre\': book.findtext(\'genre\', default=\\"\\"), \'price\': book.findtext(\'price\', default=\\"\\"), \'publish_date\': book.findtext(\'publish_date\', default=\\"\\"), \'description\': book.findtext(\'description\', default=\\"\\") } books_list.append(book_data) return json.dumps(books_list, indent=4)"},{"question":"You are designing an automated irrigation system for a small garden. The system should monitor the soil moisture levels and activate the water pump when the soil is too dry. Your task is to implement a function that decides whether the pump should be turned on or off based on a given moisture level. The function should: 1. Accept an integer parameter `moisture_level` which represents the current moisture level of the soil. 2. Return the string `\'ON\'` if the `moisture_level` is below 30 (indicating the soil is too dry). 3. Return the string `\'OFF\'` if the `moisture_level` is 30 or higher (indicating the soil has sufficient moisture). You should write a function named `control_water_pump` that fulfills these requirements. Here is the signature of the function: ```python def control_water_pump(moisture_level): pass ``` Examples ```python control_water_pump(25) # Output: \'ON\' control_water_pump(35) # Output: \'OFF\' control_water_pump(30) # Output: \'OFF\' ``` Constraints - The input moisture levels are guaranteed to be non-negative integers.","solution":"def control_water_pump(moisture_level): Determines whether the water pump should be turned on or off based on the current moisture level. Parameters: moisture_level (int): The current moisture level of the soil. Returns: str: \'ON\' if the moisture level is below 30, \'OFF\' otherwise. if moisture_level < 30: return \'ON\' else: return \'OFF\'"},{"question":"Write a function `longest_common_subsequence(str1, str2)` that finds the length of the longest subsequence common to both strings. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. Implement a dynamic programming approach to solve the problem efficiently. Here is a breakdown of the steps your function should follow: 1. Create a 2D array `dp` where `dp[i][j]` represents the length of the longest common subsequence of `str1[0:i]` and `str2[0:j]`. 2. Initialize the first row and column of the `dp` array to zero, representing the case of comparing any string with an empty string. 3. Iterate through each character pair `(i, j)` from both strings: - If `str1[i-1]` is equal to `str2[j-1]`, set `dp[i][j] = dp[i-1][j-1] + 1`, indicating an extension of the subsequence. - Otherwise, set `dp[i][j] = max(dp[i-1][j], dp[i][j-1])`, meaning we will take the maximum length seen so far by excluding either current character of `str1` or `str2`. 4. Finally, return `dp[len(str1)][len(str2)]`, which will contain the length of the longest common subsequence for the input strings `str1` and `str2`. The function `longest_common_subsequence` should return an integer representing the length of the longest common subsequence. **Function Signature:** ```python def longest_common_subsequence(str1: str, str2: str) -> int: pass ```","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence of str1 and str2. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are tasked with writing a function named `generate_recommendation(products: List[dict], budget: float) -> List[str]` that will generate a list of recommended product names within the given budget based on their rating. The function should perform the following: 1. Validate if the `products` parameter is a list of dictionaries. Each dictionary should contain the keys \'name\', \'price\', and \'rating\'. 2. Raise a `TypeError` if the `products` parameter is not a list of dictionaries. 3. Validate if the `budget` parameter is a float. If it is not, raise a `TypeError`. 4. Sort the products by their rating in descending order. In case of a tie, sort by their price in ascending order. 5. Iterate through the sorted list and accumulate products to a recommendations list. Stop adding further products if adding another would exceed the budget. 6. Return the list of recommended product names. Here is a skeleton of what your function should look like: ```python from typing import List, Dict def generate_recommendation(products: List[dict], budget: float) -> List[str]: # This is where your implementation goes. pass ``` **Requirements**: - Ensure proper error handling as described. - You may assume that the \'name\' is a string, \'price\' is a float, and \'rating\' is a float in the given dictionaries.","solution":"from typing import List, Dict def generate_recommendation(products: List[Dict[str, float]], budget: float) -> List[str]: if not isinstance(products, list) or not all(isinstance(product, dict) for product in products): raise TypeError(\\"products must be a list of dictionaries\\") for product in products: if not all(key in product for key in (\'name\', \'price\', \'rating\')): raise ValueError(\\"Each product dictionary must contain \'name\', \'price\', and \'rating\' keys\\") if not isinstance(budget, float): raise TypeError(\\"budget must be a float\\") # Sorting the products by rating and then by price sorted_products = sorted(products, key=lambda x: (-x[\'rating\'], x[\'price\'])) recommendations = [] total_cost = 0.0 for product in sorted_products: if total_cost + product[\'price\'] <= budget: recommendations.append(product[\'name\']) total_cost += product[\'price\'] else: break return recommendations"},{"question":"Design a function `generateBarChart(data, title)` that produces a bar chart using `matplotlib.pyplot`. The bar chart should represent the frequency of elements in the `data` list. Further specifications: 1. Each unique element in the input list `data` should correspond to a bar in the chart. 2. The height of each bar should reflect the frequency/count of the respective element in `data`. 3. The chart should be labeled with the provided `title`. 4. Utilize `matplotlib.pyplot.subplots`, `matplotlib.pyplot.bar`, `matplotlib.pyplot.xlabel`, `matplotlib.pyplot.ylabel`, `matplotlib.pyplot.title`, and `matplotlib.pyplot.show` as the primary API calls for creating and displaying the bar chart. Function signature: ```python def generateBarChart(data: list, title: str) -> None: pass ``` **Parameters:** - `data` (list): A list of values for which the frequency distribution is to be plotted. - `title` (str): The title of the bar chart. **Output:** - The function should not return anything. Instead, it displays the bar chart. **Example:** ```python generateBarChart([\'apple\', \'banana\', \'apple\', \'orange\', \'banana\', \'apple\'], \\"Fruit Count\\") ``` This example should generate and display a bar chart titled \\"Fruit Count\\", with \'apple\' having the highest bar height (3), \'banana\' second (2), and \'orange\' (1).","solution":"import matplotlib.pyplot as plt from collections import Counter def generateBarChart(data: list, title: str) -> None: Generates a bar chart showing the frequency of each unique element in the data list. Parameters: - data (list): A list of values for which the frequency distribution is to be plotted. - title (str): The title of the bar chart. The function displays the bar chart and does not return anything. # Count the frequency of each unique element frequency_counter = Counter(data) # Extract elements (keys) and their frequencies (values) elements = list(frequency_counter.keys()) counts = list(frequency_counter.values()) # Create a bar chart fig, ax = plt.subplots() ax.bar(elements, counts) # Labeling the chart ax.set_xlabel(\'Elements\') ax.set_ylabel(\'Frequency\') ax.set_title(title) # Show the bar chart plt.show()"},{"question":"Implement a function called `find_connected_components` to identify connected components in an undirected graph represented as an adjacency matrix. **Function Signature**: `def find_connected_components(adj_matrix: np.ndarray) -> List[List[int]]` **Parameters**: - `adj_matrix` (np.ndarray): A 2D NumPy array representing the adjacency matrix of the graph, where `adj_matrix[i][j]` is 1 if there is an edge between nodes `i` and `j`, and 0 otherwise. **Returns**: - `components` (List[List[int]]): A list of lists, where each inner list represents a connected component containing the node indices. **Key Instructions**: 1. **Use the following specific libraries**: - `numpy` for numerical operations. - `collections.deque` for efficient queue operations in the BFS algorithm. 2. Implement the BFS algorithm to traverse the graph and identify connected components. 3. Initialize visited nodes using `np.zeros` to keep track of visited vertices. 4. Use the adjacency matrix to navigate between nodes during traversal. 5. Ensure that all nodes in the graph are considered, whether or not they are part of an initial connected component. **Graph Traversal Algorithm**: 1. Create a visited array to keep track of visited nodes. 2. Loop through each node, and if it is not visited, start a BFS from that node. 3. Use a queue to traverse the graph, marking nodes as visited and adding them to the current component. 4. Collect all nodes within the same connected component. 5. Return the list of all connected components in the graph. To start: ```python import numpy as np from collections import deque from typing import List def find_connected_components(adj_matrix: np.ndarray) -> List[List[int]]: # Your implementation here pass ```","solution":"import numpy as np from collections import deque from typing import List def find_connected_components(adj_matrix: np.ndarray) -> List[List[int]]: def bfs(node): queue = deque([node]) component = [] while queue: n = queue.popleft() if not visited[n]: visited[n] = True component.append(n) for neighbor, connected in enumerate(adj_matrix[n]): if connected and not visited[neighbor]: queue.append(neighbor) return component visited = np.zeros(len(adj_matrix), dtype=bool) components = [] for node in range(len(adj_matrix)): if not visited[node]: component = bfs(node) if component: components.append(component) return components"},{"question":"Write a function named `matrix_rotation` that rotates a given `n x n` matrix 90 degrees clockwise. Function Signature ```python def matrix_rotation(matrix: list) -> list: # implementation ``` Input - `matrix`: A list of lists, where each list represents a row in the `n x n` matrix. Output - Returns: A new `n x n` matrix that is the result of rotating the input matrix 90 degrees clockwise. Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated_matrix = matrix_rotation(matrix) ``` The `rotated_matrix` would be: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints: - The input matrix will always be square (i.e., same number of rows and columns). - The size of the matrix (n) will be at least (1). # Learning Objectives: - This problem will help you understand how to manipulate multi-dimensional arrays and perform matrix transformations. - It also reinforces nested loops and indexing in multi-dimensional data structures.","solution":"def matrix_rotation(matrix: list) -> list: Rotates an n x n matrix 90 degrees clockwise. :param matrix: A list of lists representing the matrix. :return: A new n x n matrix rotated 90 degrees clockwise. n = len(matrix) # Create a new matrix of the same size rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a function to correct the capitalization in a given sentence based on three simple rules: 1. The first word of the sentence should be capitalized. 2. All other words except for \\"and\\", \\"the\\", \\"a\\", \\"in\\", \\"on\\", \\"at\\", and \\"for\\" should start with a capital letter. 3. Ensure that the non-capitalized words listed in rule 2 are always in lowercase. The function should accept a string sentence as input and return the string in the corrected format. The function should begin with: ``` def correct_capitalization(sentence): ``` For example: ``` Input: \\"The quick brown fox jumps over the lazy dog in the backyard and on the roof.\\" Output: \\"The Quick Brown Fox Jumps Over the Lazy Dog in the Backyard and on the Roof.\\" ```","solution":"def correct_capitalization(sentence): Corrects the capitalization of a given sentence based on the defined rules. always_lower = {\\"and\\", \\"the\\", \\"a\\", \\"in\\", \\"on\\", \\"at\\", \\"for\\"} words = sentence.split() if not words: return \\"\\" # Capitalize the first word corrected_words = [words[0].capitalize()] # Correct the rest of the words based on rules for word in words[1:]: if word.lower() in always_lower: corrected_words.append(word.lower()) else: corrected_words.append(word.capitalize()) # Join the corrected words into a single string return \\" \\".join(corrected_words)"},{"question":"Write a function to analyze a given piece of text and determine if it contains any words that are anagrams of a given word. The function should be case-insensitive and return a list of all the unique words in the text that are anagrams of the given word. The function should ignore punctuation and whitespace. The function should output with: list: A list of unique anagrammatic words found in the text. You should write self-contained code starting with: ``` import re from collections import Counter def find_anagrams(given_word, text): ```","solution":"import re from collections import Counter def find_anagrams(given_word, text): Returns a list of unique words in the text that are anagrams of given_word. :param given_word: The word to find anagrams for. :param text: The text to analyze. :return: List of unique anagrammatic words found in the text. # Normalize the given word given_word = given_word.lower() given_word_counter = Counter(given_word) # Normalize the text: remove punctuation, make lowercase, split into words words = re.findall(r\'bw+b\', text.lower()) # Find and collect unique words that are anagrams anagrams = set() for word in words: if word != given_word and Counter(word) == given_word_counter: anagrams.add(word) return list(anagrams)"},{"question":"Given an array of integers, write a function to determine whether there exists a triplet (three elements) in the array that sums up to a given target value. The function should return a boolean value: `True` if such a triplet exists, and `False` otherwise. Make sure your function has a time complexity of O(n^2) where n is the length of the array and it is optimized for performance and memory usage. The function should be defined as follows: ``` def find_triplet_sum(arr, target): ``` **Parameters:** - `arr` (list of int): The list of integers. - `target` (int): The target sum for the triplet. **Returns:** - `bool`: A boolean value indicating if there exists a triplet that sums up to the target value. **Example:** - Input: `arr = [12, 3, 4, 1, 6, 9]`, `target = 24` - Output: `True` - Explanation: There is a triplet (12, 3, 9) in the array whose sum is 24. - Input: `arr = [-1, 0, 1, 2, -1, -4]`, `target = 0` - Output: `True` - Explanation: There is a triplet (-1, 1, 0) in the array whose sum is 0. - Input: `arr = [1, 2, 3, 4, 5]`, `target = 20` - Output: `False` - Explanation: There is no triplet in the array whose sum is 20.","solution":"def find_triplet_sum(arr, target): Determines whether there exists a triplet in the array that sums up to the target value. Parameters: arr (list of int): The list of integers. target (int): The target sum for the triplet. Returns: bool: A boolean value indicating if there exists a triplet that sums up to the target value. arr.sort() n = len(arr) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"You are tasked with writing a Python function named `summarize_orders()` that processes a text file named `orders.txt` which contains a list of product orders. The file is structured such that each line contains the order details in the following format: `<product_id>,<quantity>` Your function should summarize the orders by calculating the total quantity ordered for each product and writing the summarized data to a new file named `summary.txt` in the format: `<product_id>: <total_quantity>` The `<product_id>` should represent the unique product identifier, and `<total_quantity>` represents the total quantity of that product ordered across all entries in the `orders.txt` file. When the function is executed, it should perform the following steps: 1. Open `orders.txt` in read mode. If the file cannot be opened, print an appropriate error message and terminate the function. 2. Read each line from `orders.txt`, split the line by the comma delimiter to separate `<product_id>` and `<quantity>`, and parse `<quantity>` as an integer. 3. Store the cumulative quantities for each `<product_id>` in a dictionary where the keys are the product IDs and the values are their respective total quantities. 4. After processing all lines, open `summary.txt` in write mode and write the summarized data. Each line in `summary.txt` should contain a `<product_id>: <total_quantity>` pair. 5. Ensure that any file opened during the process is properly closed after its use. 6. Handle any IOError exceptions that might occur during file operations and provide a user-friendly error message. **Constraints:** - Ensure that numeric values for quantities are correctly processed and summed. - Handle file reading and writing exceptions gracefully and ensure all files are closed properly. - Assume that the format of the `orders.txt` file is correct and any anomalies should be handled gracefully. Example: If `orders.txt` contains: ``` A123,10 B456,5 A123,20 C789,7 B456,3 ``` Then `summary.txt` should contain: ``` A123: 30 B456: 8 C789: 7 ```","solution":"def summarize_orders(): orders_file = \'orders.txt\' summary_file = \'summary.txt\' try: with open(orders_file, \'r\') as file: orders = file.readlines() order_summary = {} for order in orders: product_id, quantity = order.strip().split(\',\') quantity = int(quantity) if product_id in order_summary: order_summary[product_id] += quantity else: order_summary[product_id] = quantity with open(summary_file, \'w\') as file: for product_id, total_quantity in order_summary.items(): file.write(f\\"{product_id}: {total_quantity}n\\") except IOError as e: print(f\\"An error occurred while handling the file: {e}\\")"},{"question":"Simulate the process of drawing random samples from an urn containing balls of different colors. Calculate the probability of drawing each color after a specified number of draws. The function should receive the list of ball colors, the number of each color, and the number of draws to simulate. It should use randomness to determine the color of each drawn ball and then compute the relative frequency (i.e., probability) of each color being drawn. The function should output a dictionary containing: - The color of the balls as the keys. - The computed probabilities as the values. You should write self-contained code starting with: ``` import random def simulate_urn_draws(ball_colors, count_of_each_color, num_draws): ```","solution":"import random from collections import defaultdict def simulate_urn_draws(ball_colors, count_of_each_color, num_draws): Simulates drawing balls from an urn and calculates the probability of drawing each color. Parameters: ball_colors (list): A list of ball colors. count_of_each_color (list): A list of the number of balls for each color. num_draws (int): The number of draws to simulate. Returns: dict: A dictionary with ball colors as keys and their computed probabilities as values. # Create a list representing the urn with balls of different colors urn = [] for color, count in zip(ball_colors, count_of_each_color): urn.extend([color] * count) # Perform the draws and count the occurrences of each color draws = [random.choice(urn) for _ in range(num_draws)] color_counts = defaultdict(int) for draw in draws: color_counts[draw] += 1 # Calculate the probabilities for each color probabilities = {color: count / num_draws for color, count in color_counts.items()} return probabilities"},{"question":"Your task is to implement a function `largest_perimeter_triangle` that finds the largest perimeter of a triangle that can be formed with three given side lengths from a list of integers. If no triangle can be formed with the given side lengths, the function should return 0. **Function Signature**: ```python def largest_perimeter_triangle(nums: List[int]) -> int: pass ``` **Parameters**: - `nums`: `List[int]` - A list of integers representing the side lengths. **Returns**: - `int` - The largest perimeter of a triangle that can be formed, or 0 if no triangle can be formed. To determine if three side lengths can form a triangle, they must satisfy the triangle inequality theorem, which states that for any three sides (a), (b), and (c), the following must be true: 1. (a + b > c) 2. (a + c > b) 3. (b + c > a) You need to identify the triplet that offers the largest perimeter and satisfies the above conditions. **Example**: ```python print(largest_perimeter_triangle([2, 1, 2])) # Output: 5 print(largest_perimeter_triangle([1, 2, 1])) # Output: 0 print(largest_perimeter_triangle([3, 2, 3, 4])) # Output: 10 print(largest_perimeter_triangle([3, 6, 2, 3])) # Output: 8 ``` **Notes**: - If multiple valid triangles have the same perimeter, return that perimeter. - The list of integers may contain duplicates. - The input list will contain at least three integers.","solution":"from typing import List def largest_perimeter_triangle(nums: List[int]) -> int: # Sort the list of side lengths in descending order nums.sort(reverse=True) # Iterate through the sorted list to find the largest perimeter for i in range(len(nums) - 2): if nums[i] < nums[i + 1] + nums[i + 2]: # If the side lengths satisfy the triangle inequality theorem return nums[i] + nums[i + 1] + nums[i + 2] # If no valid triangle can be formed return 0"},{"question":"You are required to write a Python function named `track_exercise` that logs the exercise details for users. The function should use the `datetime` and `csv` libraries to achieve this. Specifically, you need to perform the following operations: 1. Get the current date and time. 2. Determine the current day\'s date in the format `yyyy-mm-dd`. 3. Create a filename based on the current date in the format `exercise_yyyy_mm_dd.csv`. 4. If the file does not exist, create a new CSV file with headers `Time`, `Exercise`, and `Duration`. 5. Append a row containing the current time, the exercise name, and its duration to the CSV file. This function helps users by correctly logging their daily exercises in a structured format, which can later be used for tracking or analysis purposes. The primary objective of this problem is to practice working with dates and times using Python\'s `datetime` module and handling CSV files. Here is the function signature: ```python def track_exercise(exercise, duration): pass ``` Below is the documentation snippet for your reference: ```plaintext Python Library Documentation: module csv csv.writer(csvfile, dialect=\'excel\', **fmtparams) Return a writer object responsible for converting the user’s data into delimited strings on the given file-like object. csv.DictWriter(csvfile, fieldnames, restval=\'\', extrasaction=\'raise\', dialect=\'excel\', *args, **kw) Return a DictWriter object responsible for converting the user’s data into a delimited string (along with an optional header row) on the given file-like object. class datetime.datetime | Methods defined here: | | __init__(self, year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) | Initialize self. See help(type(self)) for accurate signature. ```","solution":"import csv import datetime import os def track_exercise(exercise, duration): Logs the exercise details with current date and time in the appropriate daily CSV file. # Get the current date and time now = datetime.datetime.now() # Format the current date as yyyy-mm-dd current_date = now.strftime(\\"%Y-%m-%d\\") # Create the filename in the format exercise_yyyy_mm_dd.csv filename = f\\"exercise_{current_date}.csv\\" # Check if the file exists file_exists = os.path.isfile(filename) # Open the file in append mode with open(filename, mode=\'a\', newline=\'\') as file: fieldnames = [\'Time\', \'Exercise\', \'Duration\'] writer = csv.DictWriter(file, fieldnames=fieldnames) # If the file does not exist, write the header if not file_exists: writer.writeheader() # Append the exercise details to the CSV file writer.writerow({\'Time\': now.strftime(\\"%H:%M:%S\\"), \'Exercise\': exercise, \'Duration\': duration})"},{"question":"In this task, you will create a function to manage a list of books in a library system. Your function should allow adding a new book, and listing all books currently in the system. You are required to write a function named `manage_books`. This function should provide options to add a new book or display all books. To ensure that user input is properly simulated and managed, follow these steps inside your function: 1. Define an empty list named `library_books` that will store all the book objects. 2. Create a continuous loop that will present the user with the following menu: - \\"1. Add a new book\\" - \\"2. List all books\\" - \\"3. Exit\\" 3. If the user selects option 1: - Prompt the user to input the book\'s title. - Prompt the user to input the book\'s author. - Create a book object with the given title and author (you can use a Python dictionary). - Append the newly created book object to the `library_books` list. - Print a success message (\\"New book added successfully!\\"). 4. If the user selects option 2: - Print the title and author of each book currently in the `library_books` list. 5. If the user selects option 3, exit the loop and end the function. 6. Handle invalid inputs by printing an appropriate message (\\"Invalid option, please try again.\\"). Below is a hint to get you started on the implementation: ```python def manage_books(): library_books = [] while True: print(\\"1. Add a new book\\") print(\\"2. List all books\\") print(\\"3. Exit\\") choice = input(\\"Choose an option: \\") if choice == \'1\': title = input(\\"Enter book title: \\") author = input(\\"Enter book author: \\") book = {\'title\': title, \'author\': author} library_books.append(book) print(\\"New book added successfully!\\") elif choice == \'2\': if library_books: for idx, book in enumerate(library_books, 1): print(f\\"{idx}. Title: {book[\'title\']}, Author: {book[\'author\']}\\") else: print(\\"No books in the library.\\") elif choice == \'3\': print(\\"Exiting the system.\\") break else: print(\\"Invalid option, please try again.\\") ``` Ensure to test your function to verify it manages the library books as expected.","solution":"def manage_books(input_function): Manages a list of books in a library system. Args: input_function: A callable that works like the \'input\' function, used for unit testing purposes. The function provides options to add a new book, list all books, or exit. library_books = [] while True: print(\\"1. Add a new book\\") print(\\"2. List all books\\") print(\\"3. Exit\\") choice = input_function(\\"Choose an option: \\") if choice == \'1\': title = input_function(\\"Enter book title: \\") author = input_function(\\"Enter book author: \\") book = {\'title\': title, \'author\': author} library_books.append(book) print(\\"New book added successfully!\\") elif choice == \'2\': if library_books: for idx, book in enumerate(library_books, 1): print(f\\"{idx}. Title: {book[\'title\']}, Author: {book[\'author\']}\\") else: print(\\"No books in the library.\\") elif choice == \'3\': print(\\"Exiting the system.\\") break else: print(\\"Invalid option, please try again.\\")"},{"question":"You have been given a Python function `anagram_groups(words)` which aims to group a list of strings into anagrams. An anagram is a word formed by rearranging the letters of a different word, using all the original letters exactly once. The current implementation is inefficient and runs slowly for large lists. Your task is to refactor the `anagram_groups(words)` function to optimize its performance while maintaining its functionality. **Specifications:** - The `words` parameter is a list of strings. - The function should return a list of lists, where each inner list contains words that are anagrams of each other. - The order of the anagram groups and the order of words within each group does not matter. **Example Input and Output:** For the input list: `[\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\", \\"cat\\", \\"tac\\", \\"act\\"]` The function could return (order of groups and words within groups may vary): ``` [ [\\"listen\\", \\"silent\\", \\"enlist\\"], [\\"google\\", \\"gogole\\"], [\\"cat\\", \\"tac\\", \\"act\\"] ] ``` Optimize the function to achieve this functionality efficiently.","solution":"from collections import defaultdict def anagram_groups(words): Groups a list of strings into anagrams. Args: words (list of str): The list of words. Returns: List[List[str]]: A list of lists, where each inner list contains words that are anagrams of each other. anagrams = defaultdict(list) for word in words: # Use a tuple of sorted characters as the key key = tuple(sorted(word)) anagrams[key].append(word) return list(anagrams.values())"},{"question":"In this problem, you are asked to implement a function named `findLargestIsland` that finds the largest island in a 2D grid. An island is defined as a group of adjacent cells (vertically or horizontally) that have the value `1`. Your task is to return the size of the largest island. # Function Signature: ```python def findLargestIsland(grid): Find the size of the largest island in the given 2D grid. Return an integer representing the size of the largest island. pass ``` # Input Parameters: - `grid`: a 2D list of integers; each element is either `0` or `1`. # Output: - An integer which is the size of the largest island. # Detailed Instructions: 1. Implement a helper function that performs Depth First Search (DFS) to explore an island, marking visited cells with `0` to avoid re-visiting. 2. Iterate through each cell in the grid; if the cell is a `1` and has not been visited, perform DFS to calculate the size of the island. 3. Keep track of the maximum island size encountered during the iteration. 4. Return the size of the largest island. # Example: Consider an example where: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 0] ] ``` The function should return `5` because the largest island contains 5 cells. # Constraints: - The grid dimensions are at most `50x50`. - Every element in the grid is either `0` or `1`. - Use DFS to explore and count the island sizes. - You may assume the inputs are valid and well-formed.","solution":"def findLargestIsland(grid): def dfs(x, y): # If we\'re out of bounds or at a \'0\', return immediately if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 0: return 0 # Mark the cell as visited by setting it to \'0\' grid[x][y] = 0 # Count the current cell count = 1 # Explore all four directions (up, down, left, right) count += dfs(x+1, y) count += dfs(x-1, y) count += dfs(x, y+1) count += dfs(x, y-1) return count max_island_size = 0 # Iterate through each cell in the grid for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: # Perform DFS to find the size of the island island_size = dfs(i, j) # Update the maximum island size if needed max_island_size = max(max_island_size, island_size) return max_island_size"},{"question":"Write a function that reads a text file, counts the occurrences of each unique word, and writes the word counts to a new text file. The function should also return the total number of unique words found. The word counts should be sorted in descending order by frequency and then by the word in alphabetical order if frequencies are the same. This function is useful for text analysis tasks, especially for understanding word distribution in a document. The function should raise the exception for: FileNotFoundError if the input file does not exist. The function should output with: int: The total number of unique words found in the text file. You should write self-contained code starting with: ``` def word_count(input_file, output_file): ```","solution":"def word_count(input_file, output_file): Reads a text file, counts the occurrences of each unique word, writes the word counts to a new text file, and returns the total number of unique words found. Raises: FileNotFoundError: If the input file does not exist. Returns: int: The total number of unique words found in the text file. from collections import Counter import re # Check if file exists and read the content try: with open(input_file, \'r\') as file: text = file.read().lower() except FileNotFoundError: raise FileNotFoundError(f\\"The file {input_file} does not exist.\\") # Use Regex to find words words = re.findall(r\'bw+b\', text) # Count the occurrences of each word word_counts = Counter(words) # Sort the word counts by frequency (descending) and then by word (alphabetically) sorted_word_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) # Write the word counts to the output file with open(output_file, \'w\') as file: for word, count in sorted_word_counts: file.write(f\\"{word}: {count}n\\") # Return the total number of unique words return len(word_counts)"},{"question":"Write a function to find the first non-repeated character in a given string. The function should return the character if it exists, or \\"None\\" if there are no unique characters. The function should handle: - Case sensitivity (e.g., \'A\' and \'a\' are considered different characters) - Empty strings should return \\"None\\" The function should output the first non-repeated character. The function should be self-contained and start with: ``` def first_non_repeated_char(input_string): ```","solution":"def first_non_repeated_char(input_string): Returns the first non-repeated character in the input string. If no unique character exists, returns \\"None\\". if not input_string: return \\"None\\" char_count = {} for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in input_string: if char_count[char] == 1: return char return \\"None\\""},{"question":"Given a square matrix of integers, write a function to rotate the matrix 90 degrees clockwise. The function should take a list of lists as input, representing the matrix, and return a new list of lists representing the rotated matrix. Ensure the function handles matrices of varying sizes and contents appropriately. The function should output: list: A new list of lists that represents the input matrix rotated 90 degrees clockwise. You should write self-contained code starting with: ``` def rotate_matrix(matrix): ```","solution":"def rotate_matrix(matrix): Rotates a square matrix 90 degrees clockwise. Arguments: matrix -- list of lists of integers representing the square matrix Returns: list of lists of integers representing the rotated matrix return [list(reversed(col)) for col in zip(*matrix)]"},{"question":"You are tasked with writing a function named `evaluate_expression` to compute the value of a mathematical expression given in Reverse Polish Notation (RPN). RPN is a mathematical notation wherein every operator follows all of its operands, making it suitable for stack-based computations. In RPN, the usual order of operations is inherently maintained, and there are no parentheses needed to dictate the order of operations. For example, the RPN expression \\"3 4 + 2 *\\" corresponds to the infix expression \\"(3 + 4) * 2\\". Your task is to write a function `evaluate_expression(expression)` that takes in a string representing the RPN expression and returns the computed result. # Problem Requirements Write a function `evaluate_expression(expression)` where: - `expression` is a string containing the RPN expression. Each number and operator are separated by spaces. - The function should follow the rules of RPN to compute and return the result as a float. # Additional Details: Operators that you need to support are `+`, `-`, `*`, and `/`. The expression may include both integer and floating-point numbers. The function should make use of a stack to help evaluate the expression. Starting with an empty stack, you will read the expression from left to right. When you encounter a number, push it onto the stack. When you encounter an operator, pop the necessary number of values from the stack, apply the operator, and push the result back onto the stack. # Example Usage: ```python expression = \\"3 4 + 2 * 7 /\\" result = evaluate_expression(expression) # The sequence of operations is: # Push 3, push 4, pop 4 and 3, compute 3 + 4 = 7, push 7 # Push 2, pop 2 and 7, compute 7 * 2 = 14, push 14 # Push 7, pop 7 and 14, compute 14 / 7 = 2, push 2 # Result is 2.0 print(result) # Output: 2.0 ``` # Hint - Use a list to implement the stack. - Read the expression from left to right and process each token accordingly.","solution":"def evaluate_expression(expression): Evaluate a given Reverse Polish Notation (RPN) expression and return the result. The function supports +, -, *, and / operators and can handle both integers and floating-point numbers. tokens = expression.split() stack = [] for token in tokens: if token in \\"+-*/\\": # Ensure that there are at least two values on the stack to pop operand2 = stack.pop() operand1 = stack.pop() if token == \'+\': result = operand1 + operand2 elif token == \'-\': result = operand1 - operand2 elif token == \'*\': result = operand1 * operand2 elif token == \'/\': result = operand1 / operand2 stack.append(result) else: # Assume the token is a number and convert it to float stack.append(float(token)) # At the end of evaluation, the stack should have one element, the result return stack[0]"},{"question":"You are tasked with writing a function that verifies if a given string is a valid hexadecimal color code. A valid hexadecimal color code must start with a hashtag (#) followed by exactly 6 hexadecimal characters (0-9, a-f, A-F). Your function should be named `is_valid_hex_color(code)`. The function should satisfy the following requirements: 1. Check if the input string starts with a hashtag (#). 2. Ensure that the length of the string is exactly 7 characters (including the hashtag). 3. Verify that the remaining 6 characters are valid hexadecimal digits. # Input: - `code`: A string that represents the color code to be verified. # Output: - Return `True` if the input string is a valid hexadecimal color code. - Return `False` otherwise. # Example: ```python is_valid_hex_color(\\"#1A2b3C\\") # True is_valid_hex_color(\\"#1A2b3C7\\") # False is_valid_hex_color(\\"#ZZZZZZ\\") # False is_valid_hex_color(\\"1A2b3C\\") # False ``` # Constraints: - The input string will have a maximum length of 10 characters. - The function should be case-insensitive when validating the hexadecimal digits.","solution":"def is_valid_hex_color(code): Verify if the input string is a valid hexadecimal color code. Parameters: code (str): The color code to be verified. Returns: bool: True if the input string is a valid hexadecimal color code, False otherwise. if len(code) != 7 or code[0] != \'#\': return False valid_characters = \\"0123456789abcdefABCDEF\\" for char in code[1:]: if char not in valid_characters: return False return True"},{"question":"You are required to implement a function named `generate_histogram` that reads a list of numerical scores from a text file and generates a histogram displaying the distribution of those scores. 1. Read data from a text file named `\\"scores.txt\\"`. This file contains one numerical score per line. 2. Convert the scores to a list of integers. 3. Using Matplotlib, create a histogram of these scores. 4. The histogram should have: - A title `\\"Score Distribution\\"` - Labels for the x-axis (`\\"Scores\\"`) and y-axis (`\\"Frequency\\"`) - A grid for better readability - Appropriate number of bins to display the score distribution clearly **Requirements:** 1. You must use the `numpy` library to handle the list of scores. 2. The function should generate the histogram using Matplotlib. **Note:** Assume all necessary packages are imported (`numpy`, `matplotlib.pyplot`). The function does not need to return any values; it just needs to display the histogram. Additionally, you’re not required to handle exceptions or edge cases for empty files. Each score in `\\"scores.txt\\"` can be assumed to be a valid integer.","solution":"import numpy as np import matplotlib.pyplot as plt def generate_histogram(): Reads numerical scores from \'scores.txt\', and generates a histogram to display the distribution of these scores. # Read scores from the file with open(\'scores.txt\', \'r\') as file: scores = file.readlines() # Convert scores to a list of integers scores = list(map(int, scores)) # Generate the histogram plt.figure(figsize=(10, 6)) plt.hist(scores, bins=\'auto\', alpha=0.75, edgecolor=\'black\') # Title and labels plt.title(\'Score Distribution\') plt.xlabel(\'Scores\') plt.ylabel(\'Frequency\') # Adding grid for readability plt.grid(True) # Show the histogram plt.show()"},{"question":"# Reconstructing Signal from Fourier Coefficients Using Inverse DFT In this problem, you\'ll implement a function that reconstructs a time-domain signal from its Fourier coefficients using the Inverse Discrete Fourier Transform (IDFT). This is a fundamental concept in signal processing that allows you to understand both Fourier analysis and the practical use of the `numpy` library for numerical computations. # Function Specifications You need to implement the function `inverse_dft(fourier_coeffs)`. This function should take the following input: - **fourier_coeffs** (`list` or `numpy.array`): The Fourier coefficients of the signal, representing its frequency components. The function should return: - **time_signal** (`numpy.array`): The reconstructed time-domain signal. # Requirements 1. Use `numpy.fft.ifft` for computing the Inverse Discrete Fourier Transform. 2. Use `numpy.real` to extract the real part of the complex output signal. # Example Usage ```python import numpy as np fourier_coeffs = np.array([1+2j, 2+3j, 3+4j, 4+5j]) time_signal = inverse_dft(fourier_coeffs) print(time_signal) ``` # Additional Information The Fourier coefficients (`X[k]`) represent the amplitude and phase of the frequency components of the signal, and the IDFT provides a way to reconstruct the time-domain signal from these coefficients. For this exercise, you should: - Utilize the `numpy.fft.ifft` function to compute the IDFT. - Convert the complex-valued output of the IDFT to a real-valued signal using `numpy.real`. # Your Task Implement the function `inverse_dft` following the description and requirements outlined above. Ensure the use of the `numpy.fft.ifft` and `numpy.real` APIs as part of the solution.","solution":"import numpy as np def inverse_dft(fourier_coeffs): Reconstructs a time-domain signal from its Fourier coefficients using the Inverse Discrete Fourier Transform (IDFT). Parameters: fourier_coeffs (list or numpy.array): The Fourier coefficients of the signal. Returns: numpy.array: The reconstructed time-domain signal. time_signal_complex = np.fft.ifft(fourier_coeffs) time_signal = np.real(time_signal_complex) return time_signal"},{"question":"You need to create a function named `word_count` that accepts a string and returns a dictionary with the frequency of each word in the string. The function should be capable of ignoring case differences and should treat punctuation marks like periods, commas, and exclamation points as part of the word, but it should not recognize them as separate entities. # Requirements - The function should be case-insensitive. - Punctuation that is connected to words should be considered part of the word. - The function should return a dictionary where keys are words and values are the frequency of those words. # Function Signature ```python def word_count(s: str) -> dict: ``` # Steps and Considerations: 1. Convert the input string to lowercase to ensure the function is case-insensitive. 2. Split the string into words using space as the separator. 3. Create a dictionary to keep track of word counts. 4. Iterate through the words and update their counts in the dictionary. 5. Return the dictionary containing the word counts. **Assumptions:** - The input string will not contain newline characters. - Words are separated by spaces. # Example Usage: ```plaintext Input: \\"Hello, hello! How are you doing today? Today is a great day!\\" Expected Output: {\'hello,\': 2, \'how\': 1, \'are\': 1, \'you\': 1, \'doing\': 1, \'today?\': 1, \'today\': 1, \'is\': 1, \'a\': 1, \'great\': 1, \'day!\': 1} ``` Another Example: ```plaintext Input: \\"The quick brown fox jumps over the lazy dog. The dog was not amused.\\" Expected Output: {\'the\': 2, \'quick\': 1, \'brown\': 1, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog.\': 1, \'dog\': 1, \'was\': 1, \'not\': 1, \'amused.\': 1} ``` **Implementation**: Here is a sample implementation of the `word_count` function: ```python def word_count(s: str) -> dict: s = s.lower() words = s.split() counts = {} for word in words: if word in counts: counts[word] += 1 else: counts[word] = 1 return counts ```","solution":"def word_count(s: str) -> dict: Returns a dictionary with the frequency of each word in the string. The function is case-insensitive and treats punctuation as part of the word. s = s.lower() words = s.split() counts = {} for word in words: if word in counts: counts[word] += 1 else: counts[word] = 1 return counts"},{"question":"Create a function `encrypt_string(s: str, k: int) -> str` that encrypts a given string using a Caesar cipher with a shift of `k`. The Caesar cipher is a simple encryption technique where each character in the string is shifted by `k` positions in the alphabet. Your function should only alter alphabetical characters, leaving any non-alphabetical characters unchanged. Points to consider: - The shift should wrap around the alphabet, so that \'z\' shifted by 1 becomes \'a\'. - Both uppercase and lowercase letters should be handled correctly while preserving their respective cases. - Non-alphabetical characters should remain unaffected during the encryption process. - You may assume that `k` is a non-negative integer. For example: - `encrypt_string(\'hello, world!\', 3)` should return `\'khoor, zruog!\'`. - `encrypt_string(\'Caesar Cipher!\', 2)` should return `\'Ecguct Ekrjgt!\'`. Provide a brief explanation of how the Caesar cipher works and how the shifting mechanism is implemented in your solution.","solution":"def encrypt_string(s: str, k: int) -> str: Encrypts a given string using a Caesar cipher with a shift of k. def shift_char(c, k): if c.isalpha(): base = ord(\'A\') if c.isupper() else ord(\'a\') return chr((ord(c) - base + k) % 26 + base) else: return c return \'\'.join(shift_char(c, k) for c in s)"},{"question":"You are tasked with writing a function called `analyze_temperature_fluctuations` that processes temperature data for a given city and analyzes the fluctuations over a specified period. The function needs to perform the following tasks: 1. Read temperature data from a CSV file. 2. Calculate the average temperature, the highest temperature, and the lowest temperature for the given period. 3. Identify the day(s) with the highest temperature fluctuation. 4. Save these results into a text file named `temperature_analysis.txt`. 5. Generate and save a line plot of the temperature fluctuations over the period in PNG format. **Function Signature:** ```python def analyze_temperature_fluctuations(csv_file: str, start_date: str, end_date: str): pass ``` **Parameters:** - `csv_file` (str): The path to the CSV file containing temperature data. - `start_date` (str): The start date for the analysis in the format \'YYYY-MM-DD\'. - `end_date` (str): The end date for the analysis in the format \'YYYY-MM-DD\'. **CSV File Format:** - The CSV file contains the following columns: - `Date` (str): The date of the temperature reading in the format \'YYYY-MM-DD\'. - `Temperature` (float): The temperature reading for that date. **Output:** - This function does not return any value but produces: - A file named `temperature_analysis.txt` containing: ``` Average Temperature: <avg_temp> Highest Temperature: <max_temp> on <date> Lowest Temperature: <min_temp> on <date> Day(s) with Highest Fluctuation: <date1>, <date2>, ... ``` - A PNG file named `temperature_fluctuations.png` containing a line plot of temperature fluctuations over the specified period. **Additional Requirements:** - Use the `pandas` library for data manipulation. - Use `pandas.read_csv` to read the data. - Use date filtering techniques to select entries between the `start_date` and `end_date`. - Use `pandas.DataFrame.mean`, `pandas.DataFrame.max`, and `pandas.DataFrame.min` to compute the required statistics. - Use the `matplotlib.pyplot` library to generate and label the line plot. - Use `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel` to set the axis labels of the plot. - Use `matplotlib.pyplot.title` to set the title of the plot.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_temperature_fluctuations(csv_file: str, start_date: str, end_date: str): # Read the CSV file df = pd.read_csv(csv_file) # Convert the Date column to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Filter the data between start_date and end_date mask = (df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date) df_filtered = df.loc[mask] # Ensure the DataFrame is not empty for the given period if df_filtered.empty: raise ValueError(\\"No data available for the given period.\\") # Calculate the average, highest, and lowest temperatures avg_temp = df_filtered[\'Temperature\'].mean() max_temp = df_filtered[\'Temperature\'].max() min_temp = df_filtered[\'Temperature\'].min() # Identify the date(s) for the highest and lowest temperatures max_temp_dates = df_filtered[df_filtered[\'Temperature\'] == max_temp][\'Date\'].dt.strftime(\'%Y-%m-%d\').tolist() min_temp_dates = df_filtered[df_filtered[\'Temperature\'] == min_temp][\'Date\'].dt.strftime(\'%Y-%m-%d\').tolist() # Calculate the daily temperature fluctuations df_filtered[\'Fluctuation\'] = df_filtered[\'Temperature\'].diff().abs() max_fluctuation = df_filtered[\'Fluctuation\'].max() fluctuation_dates = df_filtered[df_filtered[\'Fluctuation\'] == max_fluctuation][\'Date\'].dt.strftime(\'%Y-%m-%d\').tolist() # Write the results to a text file with open(\\"temperature_analysis.txt\\", \\"w\\") as file: file.write(f\\"Average Temperature: {avg_temp:.2f}n\\") file.write(f\\"Highest Temperature: {max_temp:.2f} on {\', \'.join(max_temp_dates)}n\\") file.write(f\\"Lowest Temperature: {min_temp:.2f} on {\', \'.join(min_temp_dates)}n\\") file.write(f\\"Day(s) with Highest Fluctuation: {\', \'.join(fluctuation_dates)}n\\") # Plot the line plot of temperature fluctuations plt.figure(figsize=(10, 5)) plt.plot(df_filtered[\'Date\'], df_filtered[\'Temperature\'], marker=\'o\', linestyle=\'-\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature\') plt.title(f\'Temperature Fluctuations from {start_date} to {end_date}\') plt.xticks(rotation=45) plt.tight_layout() # Adjust layout for better fit plt.savefig(\'temperature_fluctuations.png\') plt.close()"},{"question":"# Introduction Tree traversal is a fundamental technique for exploring nodes in a tree data structure. Two common methods for tree traversal are Depth-First Search (DFS) and Breadth-First Search (BFS). In this exercise, you will implement both DFS and BFS traversals for a binary tree in Python. # Task You are required to implement two functions: `dfs_traversal` and `bfs_traversal` that perform Depth-First Search and Breadth-First Search traversals of a given binary tree respectively. # Function Signatures ```python def dfs_traversal(root): Perform Depth-First Search (DFS) traversal on a binary tree. Arguments: root -- TreeNode, the root node of the binary tree Returns: list -- List of node values in DFS order def bfs_traversal(root): Perform Breadth-First Search (BFS) traversal on a binary tree. Arguments: root -- TreeNode, the root node of the binary tree Returns: list -- List of node values in BFS order ``` # Input 1. **root** (TreeNode): The root node of the binary tree. # Output 1. **list** (List): A list of node values in the order they are visited during the traversal. # Example Usage ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right # Example Tree # 1 # / # 2 3 # / # 4 5 6 root = TreeNode(1) root.left = TreeNode(2, TreeNode(4), TreeNode(5)) root.right = TreeNode(3, None, TreeNode(6)) # Perform DFS and BFS traversals print(dfs_traversal(root)) # Output: [1, 2, 4, 5, 3, 6] print(bfs_traversal(root)) # Output: [1, 2, 3, 4, 5, 6] ``` # Detailed Instructions 1. **DFS Traversal**: - Implement a recursive helper function to traverse the tree in a depth-first manner. - Start from the root node and visit nodes in the order: Root, Left, Right. - Collect the node values in a list. 2. **BFS Traversal**: - Use a queue to facilitate the breadth-first traversal. - Start from the root node and visit nodes level by level from left to right. - Collect the node values in a list. 3. **Edge Cases**: - Consider the case when the tree is empty (i.e., root is None). - Handle trees with only one node effectively. # Additional Notes: - Ensure the implementation integrates seamlessly with the given TreeNode class. - Use appropriate data structures such as stack for DFS and queue for BFS to manage node traversal.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_traversal(root): Perform Depth-First Search (DFS) traversal on a binary tree. Arguments: root -- TreeNode, the root node of the binary tree Returns: list -- List of node values in DFS order def dfs(node): if not node: return [] return [node.value] + dfs(node.left) + dfs(node.right) return dfs(root) def bfs_traversal(root): Perform Breadth-First Search (BFS) traversal on a binary tree. Arguments: root -- TreeNode, the root node of the binary tree Returns: list -- List of node values in BFS order if not root: return [] result = [] queue = [root] while queue: current = queue.pop(0) result.append(current.value) if current.left: queue.append(current.left) if current.right: queue.append(current.right) return result"},{"question":"You are tasked with creating a function that rotates a given square matrix by 90 degrees in a clockwise direction. The function should modify the matrix in-place and should not return anything. The matrix will be given as a list of lists, where each element is a row of the matrix. The function you need to implement is named `rotate_matrix`, and it should have the following signature: ```python def rotate_matrix(matrix): ``` - `matrix`: A list of lists representing an N x N square matrix. Each element of the list is a row in the matrix. # Constraints: 1. The matrix will always be a square matrix with dimensions N x N. 2. You should modify the matrix in-place. 3. The function should not return anything. # Example Usage: ```python def rotate_matrix(matrix): n = len(matrix) for layer in range(n // 2): first = layer last = n - layer - 1 for i in range(first, last): offset = i - first top = matrix[first][i] matrix[first][i] = matrix[last-offset][first] matrix[last-offset][first] = matrix[last][last-offset] matrix[last][last-offset] = matrix[i][last] matrix[i][last] = top # Example Scenario matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Output should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` When called, for example, `rotate_matrix(matrix)`, it should transform the input matrix as shown in the example scenario above.","solution":"def rotate_matrix(matrix): Rotates a square matrix by 90 degrees clockwise in place. n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first top = matrix[first][i] matrix[first][i] = matrix[last-offset][first] matrix[last-offset][first] = matrix[last][last-offset] matrix[last][last-offset] = matrix[i][last] matrix[i][last] = top"},{"question":"You are required to write a function `find_duplicates` in Python that takes a single list argument containing integers and returns a new list containing only the integers that appear more than once in the original list. The returned list should not contain any duplicates, and the integers should be returned in the order of their first occurrence from the original list. Function Specification: - **Function Name:** `find_duplicates` - **Parameters:** - `nums`: A list of integers. - **Returns:** - A list of integers that appear more than once in the input list, without duplicates, and in the order they first appeared. The `find_duplicates` function should: 1. Traverse the input list to identify integers that appear more than once. 2. Keep track of integers that have already been identified as duplicates to avoid adding them multiple times to the result list. 3. Maintain the order of first occurrence of the duplicates in the result list. Example: ```python nums = [4, 3, 2, 4, 1, 3, 2] find_duplicates(nums) # Output: [4, 3, 2] nums = [1, 2, 3, 4, 5] find_duplicates(nums) # Output: [] nums = [1, 1, 1, 2, 2, 3] find_duplicates(nums) # Output: [1, 2] ``` Write the function `find_duplicates` adhering to the above specifications.","solution":"def find_duplicates(nums): Returns a list of integers that appear more than once in the input list, without duplicates, and in the order they first appeared. seen = set() duplicates = set() result = [] for num in nums: if num in seen: if num not in duplicates: result.append(num) duplicates.add(num) else: seen.add(num) return result"},{"question":"Given an organization chart represented as a dictionary, where each key-value pair represents an employee and their direct reports, write a function to produce a hierarchy tree. Each employee can have multiple direct reports, and each of these can also have multiple direct reports, continuing indefinitely. The output tree should visualize the hierarchy structure using indentation to represent levels. Write a function that takes the organization dictionary as input and returns a string representation of the hierarchy tree. Example Input: ``` { \'CEO\': [\'CTO\', \'CFO\', \'COO\'], \'CTO\': [\'Dev1\', \'Dev2\'], \'CFO\': [\'Accountant1\', \'Accountant2\'], \'COO\': [], \'Dev1\': [], \'Dev2\': [], \'Accountant1\': [], \'Accountant2\': [] } ``` Example Output: ``` CEO CTO Dev1 Dev2 CFO Accountant1 Accountant2 COO ``` You should write self-contained code starting with: ``` def print_hierarchy(org_chart): ```","solution":"def print_hierarchy(org_chart): Produces a string representation of a hierarchy tree from an organization chart. Parameters: org_chart (dict): A dictionary where each key is an employee and the value is a list of their direct reports. Returns: str: A string representation of the hierarchy tree. def build_tree(employee, level): result = \\" \\" * level + employee + \\"n\\" for report in org_chart.get(employee, []): result += build_tree(report, level + 1) return result # Find the root (top-level) employee(s), assumed to be any employee that does not appear in any list. all_employees = set(org_chart.keys()) all_reports = {employee for reports in org_chart.values() for employee in reports} root_employees = all_employees - all_reports # Build the hierarchy tree starting from the root employees. final_tree = \\"\\" for root in root_employees: final_tree += build_tree(root, 0) return final_tree.rstrip() # Remove the trailing newline for clean output"},{"question":"You are required to create a function that implements the K-means clustering algorithm. This algorithm will classify a set of data points into clusters based on their feature values. Your task is to implement the function `k_means_clustering` that achieves this using the `numpy` library. # Function Specification - **Function Name:** `k_means_clustering` - **Parameters:** - `data` (ndarray): A numpy array of shape `(m, n)` representing the dataset, where `m` is the number of data points and `n` is the number of features. - `k` (int): The number of clusters to form. - `max_iters` (int): The maximum number of iterations to run the algorithm. - **Returns:** - A tuple containing two elements: - `centroids` (ndarray): A numpy array of shape `(k, n)` representing the final cluster centroids. - `labels` (ndarray): A numpy array of shape `(m,)` containing the cluster label for each data point. # Instructions 1. Randomly initialize the centroids by selecting `k` unique data points from the dataset. 2. For each iteration up to `max_iters`: - Compute the distance of each data point to each centroid. - Assign each data point to the nearest centroid to form clusters. - Recalculate the centroids as the mean of the data points in each cluster. 3. If the centroids do not change significantly between iterations, stop the algorithm early. 4. Return the final centroids and the cluster labels for each data point. Here is a sample usage of the function: ```python import numpy as np # Example data data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0]]) # Number of clusters k = 3 # Maximum number of iterations max_iters = 100 # Call the function centroids, labels = k_means_clustering(data, k, max_iters) print(\\"Centroids:n\\", centroids) print(\\"Labels:\\", labels) ``` # Libraries to Use - `numpy` Ensure you are familiar with the basic operations provided by `numpy`, such as array initialization, mean calculation, and distance computation.","solution":"import numpy as np def k_means_clustering(data, k, max_iters): Perform k-means clustering. Parameters: - data (ndarray): The dataset, shape (m, n), where m is the number of data points and n is the number of features. - k (int): Number of clusters to form. - max_iters (int): Maximum number of iterations. Returns: - centroids (ndarray): Final cluster centroids, shape (k, n). - labels (ndarray): Cluster label for each data point, shape (m,). m, n = data.shape # Initialize centroids by randomly selecting k unique data points initial_indices = np.random.choice(m, k, replace=False) centroids = data[initial_indices] for _ in range(max_iters): # Step 1: Assign labels based on closest centroid distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2) labels = np.argmin(distances, axis=1) # Step 2: Calculate new centroids from the mean of assigned points new_centroids = np.array([data[labels == i].mean(axis=0) for i in range(k)]) # Step 3: Check for convergence (if centroids do not change) if np.all(centroids == new_centroids): break centroids = new_centroids return centroids, labels"},{"question":"You are required to create a function that parses a given JSON-formatted string containing user information and prints out the names and emails of users who are above a certain age. The JSON string includes multiple users, each with various attributes such as name, email, and age. Functional Requirements: 1. **Function Name**: `filter_users_by_age`. 2. **Parameters**: - `json_data`: A `str` object representing the JSON-formatted string with user information. - `min_age`: An `int` indicating the minimum age threshold. 3. **Return**: None. The function should print the names and emails of users who meet the age requirement. JSON Structure: The input JSON string will be an array of user objects. Each user object contains at least the following keys: - `\\"name\\"`: A `str` representing the user\'s name. - `\\"email\\"`: A `str` representing the user\'s email address. - `\\"age\\"`: An `int` representing the user\'s age. Implementation Steps: 1. **Parse JSON String**: Convert the input JSON string into a Python list of dictionaries. 2. **Filter Users**: - Iterate through the list of users. - For each user, check if the age is greater than or equal to `min_age`. - If the condition is met, print the user\'s name and email. 3. **Print Output**: - For each user who meets the age criteria, print their name and email in the format: `Name: <name>, Email: <email>`. You are provided with the following code snippet, which should guide you regarding the implementation: ```python import json def filter_users_by_age(json_data, min_age): users = json.loads(json_data) for user in users: if user[\\"age\\"] >= min_age: print(f\\"Name: {user[\'name\']}, Email: {user[\'email\']}\\") ``` Example: ```python json_data = \'\'\' [ {\\"name\\": \\"Alice\\", \\"email\\": \\"alice@example.com\\", \\"age\\": 30}, {\\"name\\": \\"Bob\\", \\"email\\": \\"bob@example.com\\", \\"age\\": 25}, {\\"name\\": \\"Charlie\\", \\"email\\": \\"charlie@example.com\\", \\"age\\": 35} ] \'\'\' min_age = 30 filter_users_by_age(json_data, min_age) ``` Expected output: ``` Name: Alice, Email: alice@example.com Name: Charlie, Email: charlie@example.com ```","solution":"import json def filter_users_by_age(json_data, min_age): users = json.loads(json_data) for user in users: if user.get(\\"age\\", 0) >= min_age: print(f\\"Name: {user[\'name\']}, Email: {user[\'email\']}\\")"},{"question":"In this problem, you will work with a dataset to implement a K-Means clustering algorithm to group similar data points and analyze the clustering performance by visualizing the clusters. You need to write a function `analyze_kmeans_clustering(fileName, n_clusters)` that performs the following tasks: 1. Load the data from `fileName` using `load_data` function (assume this function removes any non-numeric columns and returns a NumPy array). 2. Standardize the features using StandardScaler to ensure each feature contributes equally to the clustering process. 3. Apply the K-Means clustering algorithm to partition the data into `n_clusters` clusters. 4. Compute and print the silhouette score for the clustering to evaluate the quality of the clusters. 5. Visualize the clusters using a scatter plot, highlighting the cluster centers. **Function Signature:** ```python def analyze_kmeans_clustering(fileName: str, n_clusters: int) -> None: pass ``` # Libraries to be used: - `sklearn.cluster.KMeans` - `sklearn.preprocessing.StandardScaler` - `sklearn.metrics.silhouette_score` - `matplotlib.pyplot.scatter` - `matplotlib.pyplot.show` Make sure to: - Use `KMeans` for clustering and set `random_state=0` for cluster initialization. - Report the silhouette score to assess the clustering quality. - Create a 2D scatter plot assuming the first two features are meaningful for visualization purposes. - Highlight centroids with a different marker or color. # Input: - `fileName` (str): The path to the dataset file. - `n_clusters` (int): The number of clusters to form. # Output: - None (prints the results and shows the plot). # Example: Suppose the dataset in `data.csv` has 10 features and calling: ```python analyze_kmeans_clustering(\\"data.csv\\", 3) ``` might print: ``` Silhouette Score: 0.65 ``` and display a scatter plot with the clustered data. # Notes: 1. Ensure the `load_data` function is available and working as expected, returning a NumPy array. 2. Use `random_state=0` to ensure reproducibility of the K-Means clustering results. 3. The dataset and `load_data` function are assumed to be available and correctly implemented.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn.preprocessing import StandardScaler from sklearn.metrics import silhouette_score # Assuming load_data is defined elsewhere to load and preprocess the dataset def load_data(fileName): # Placeholder function: should load the data, remove non-numeric columns, and return a NumPy array raise NotImplementedError def analyze_kmeans_clustering(fileName: str, n_clusters: int) -> None: # Load data data = load_data(fileName) # Standardize the features scaler = StandardScaler() data_scaled = scaler.fit_transform(data) # Apply K-Means clustering kmeans = KMeans(n_clusters=n_clusters, random_state=0) labels = kmeans.fit_predict(data_scaled) # Compute silhouette score silhouette_avg = silhouette_score(data_scaled, labels) print(f\'Silhouette Score: {silhouette_avg:.2f}\') # Visualize the clusters using a scatter plot (only using first two features for 2D visualization) plt.figure(figsize=(10, 6)) scatter = plt.scatter(data_scaled[:, 0], data_scaled[:, 1], c=labels, cmap=\'viridis\', edgecolor=\'k\', s=50) centers = kmeans.cluster_centers_ plt.scatter(centers[:, 0], centers[:, 1], c=\'red\', s=200, alpha=0.75, marker=\'x\') plt.title(f\'K-Means Clustering with {n_clusters} Clusters\') plt.xlabel(\'Feature 1 (standardized)\') plt.ylabel(\'Feature 2 (standardized)\') plt.colorbar(scatter) plt.show()"},{"question":"You are given a function `find_person_with_max_wealth` that finds the person with the highest total wealth from a list of people\'s wealth distribution. Each person’s wealth is represented as a list of integers, where each integer represents the wealth amount in a particular bank account. The goal is to identify the person (index) with the maximum total wealth. # Function Requirements Implement the function `find_person_with_max_wealth` using the Python programming language. Input: - `accounts`: A list of lists, where each sublist represents a person\'s wealth distributed across different accounts. - Example: `accounts = [[1, 2, 3], [3, 2, 1], [4, 5, 6]]` Output: - The index (0-based) of the person with the highest total wealth. - Example: For the example above, the output should be `2`. # Constraints: 1. `accounts` will have at least one person. 2. Each person will have at least one account. 3. The wealth of a person in each account will be a non-negative integer. # Example: ```python def find_person_with_max_wealth(accounts): \'\'\' :param accounts: List[List[int]] containing the wealth distribution across different accounts for each person :return: Integer index of the person with the maximum total wealth \'\'\' # Your implementation goes here # Example usage: accounts = [[1, 2, 3], [3, 2, 1], [4, 5, 6]] print(find_person_with_max_wealth(accounts)) # Output: 2 ``` # Instructions: 1. Implement the function `find_person_with_max_wealth`. 2. It should iterate through each person\'s accounts, calculate the total wealth for each person, and determine the index of the person with the maximum wealth. 3. Ensure that your code handles edge cases where multiple people have the same total wealth. In such cases, return the index of the first person with the maximum wealth. Remember to test your function with edge cases, such as when all wealth values are zero or when there is only one person/account.","solution":"def find_person_with_max_wealth(accounts): Returns the index of the person with the highest total wealth. :param accounts: List[List[int]] containing the wealth distribution across different accounts for each person :return: Integer index of the person with the maximum total wealth max_wealth = -1 person_index = -1 for i, account in enumerate(accounts): total_wealth = sum(account) if total_wealth > max_wealth: max_wealth = total_wealth person_index = i return person_index"},{"question":"You are tasked with implementing a Dijkstra\'s Algorithm for finding the shortest path in a weighted graph. We will utilize the `networkx` library to create and visualize the graph, as well as track the shortest path from the source to all other nodes. # Provided Function: `dijkstra` ```python import networkx as nx def dijkstra(graph, start_node): unvisited_nodes = set(graph.nodes) shortest_path = {node: float(\'inf\') for node in unvisited_nodes} shortest_path[start_node] = 0 previous_nodes = {node: None for node in unvisited_nodes} while unvisited_nodes: current_min_node = min(unvisited_nodes, key=lambda node: shortest_path[node]) unvisited_nodes.remove(current_min_node) if shortest_path[current_min_node] == float(\'inf\'): break for neighbor, weight in graph[current_min_node].items(): tentative_value = shortest_path[current_min_node] + weight[\'weight\'] if tentative_value < shortest_path[neighbor]: shortest_path[neighbor] = tentative_value previous_nodes[neighbor] = current_min_node return shortest_path, previous_nodes ``` # Required Function: `visual_dijkstra` Implement a function `visual_dijkstra` that performs the same task as the `dijkstra` but also includes visualization using `networkx` and `matplotlib`. **Function Signature**: ```python def visual_dijkstra(graph, start_node): ``` **Parameters**: - `graph`: A `networkx` graph object where nodes are connected with weighted edges. - `start_node`: The starting node for the shortest path calculation. # Requirements: 1. Use `networkx` to create and display the graph. 2. Highlight the shortest path from the start node to all other nodes. 3. Display edge weights and differentiate the shortest path edges from other edges using colors. # Example Usage: ```python import networkx as nx import matplotlib.pyplot as plt # Building a graph G = nx.Graph() edges = [ (\'A\', \'B\', 1), (\'A\', \'C\', 2), (\'B\', \'D\', 4), (\'C\', \'D\', 1), (\'B\', \'E\', 7), (\'D\', \'E\', 2), ] G.add_weighted_edges_from(edges) result = visual_dijkstra(G, \'A\') ``` # Expected Visualization: - The graph should be displayed using `networkx`. - Nodes and edges must be clearly labeled. - Shortest path edges should be highlighted in a distinct color, such as red. - Edge weights should be displayed.","solution":"import networkx as nx import matplotlib.pyplot as plt def dijkstra(graph, start_node): unvisited_nodes = set(graph.nodes) shortest_path = {node: float(\'inf\') for node in unvisited_nodes} shortest_path[start_node] = 0 previous_nodes = {node: None for node in unvisited_nodes} while unvisited_nodes: current_min_node = min(unvisited_nodes, key=lambda node: shortest_path[node]) unvisited_nodes.remove(current_min_node) if shortest_path[current_min_node] == float(\'inf\'): break for neighbor, weight in graph[current_min_node].items(): tentative_value = shortest_path[current_min_node] + weight[\'weight\'] if tentative_value < shortest_path[neighbor]: shortest_path[neighbor] = tentative_value previous_nodes[neighbor] = current_min_node return shortest_path, previous_nodes def visual_dijkstra(graph, start_node): shortest_path, previous_nodes = dijkstra(graph, start_node) pos = nx.spring_layout(graph) # Draw the original graph nx.draw(graph, pos, with_labels=True, node_color=\'lightblue\', node_size=500) # Get the edges in the shortest path shortest_path_edges = [] for node in previous_nodes: if previous_nodes[node] is not None: shortest_path_edges.append((previous_nodes[node], node)) # Draw all edges with weights edge_labels = nx.get_edge_attributes(graph, \'weight\') nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels) # Highlight the shortest path edges nx.draw_networkx_edges(graph, pos, edgelist=shortest_path_edges, edge_color=\'r\', width=2) plt.show() return shortest_path, previous_nodes"},{"question":"# Task Write a function named `find_closest_pair` that takes a list of integers as input and returns a tuple containing the two integers from the list that have the smallest absolute difference between them. If there are multiple pairs with the same smallest difference, return the pair with the smallest integers. The function should have the following signature: ```python def find_closest_pair(lst): pass ``` # Constraints: - The list will contain at least two integers. - All integers in the list will be distinct. # Example ```python lst = [4, 9, 1, 17, 13, 21] result = find_closest_pair(lst) print(result) # Output: (4, 1) lst = [7, 15, 3, 8, 12] result = find_closest_pair(lst) print(result) # Output: (7, 8) ``` # Explanation In the first example: - The pair `(4, 1)` has the smallest absolute difference of `3`. In the second example: - The pair `(7, 8)` has the smallest absolute difference of `1`. By completing this exercise, you will learn how to efficiently find pairs with minimal differences in a list of integers.","solution":"def find_closest_pair(lst): Finds and returns a tuple of the two integers from the list that have the smallest absolute difference. If there are multiple pairs with the same smallest difference, the pair with the smallest integers is returned. # Sort the list first to make comparison easier. sorted_lst = sorted(lst) min_diff = float(\'inf\') closest_pair = (None, None) # Traverse the sorted list and find the pair with the smallest difference. for i in range(len(sorted_lst) - 1): diff = abs(sorted_lst[i] - sorted_lst[i + 1]) if diff < min_diff: min_diff = diff closest_pair = (sorted_lst[i], sorted_lst[i + 1]) return closest_pair"},{"question":"You are asked to implement a function that can reverse the words in a given sentence without changing the order of the characters within each word. This problem will help you practice string manipulation and understanding of Python\'s built-in string methods. **Function Name**: `reverse_words` # Requirements: 1. **Input**: A single string with one or more words separated by spaces (e.g., `\\"hello world\\"`). 2. **Output**: A string where the words are in the reverse order, but the characters within each word remain in the original order. # Constraints: - The input string contains only lowercase and uppercase English letters and spaces. - There should be no leading or trailing spaces in the output string. - Words in the input string are separated by a single space. # Examples: Example 1: **Input**: ```python \\"hello world\\" ``` **Output**: ```python \\"world hello\\" ``` Example 2: **Input**: ```python \\"Welcome to my site\\" ``` **Output**: ```python \\"site my to Welcome\\" ``` # Function Signature: ```python def reverse_words(sentence: str) -> str: ``` Implement the `reverse_words` function as described.","solution":"def reverse_words(sentence: str) -> str: Returns the sentence with the words in reversed order but characters within each word in the original order. Parameters: - sentence (str): The input sentence to reverse words for. Returns: - str: The sentence with words reversed in order. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Your task is to help a database management system optimize its performance by cleaning and standardizing the input data. You need to implement a function `normalize_input_data` that processes a list of strings (records) and returns a list of standardized records. Your `normalize_input_data` function should specifically do the following: 1. Trim any leading or trailing whitespace from each record. 2. Convert all alphabetic characters to uppercase. 3. Replace all sequences of whitespace (spaces, tabs, newlines) within the records with a single space. 4. Ensure there are no duplicate records in the final list. **Requirements:** - Use the `strip` method to remove leading and trailing whitespaces. - Use the `upper` method to convert text to uppercase. - Utilize `re.sub` from Python\'s `re` module to manage the internal whitespace replacements. - Leverage a set to handle duplicates efficiently. **Function Signature:** ```python def normalize_input_data(records: list[str]) -> list[str]: ``` **Example:** ```python records = [\\" Alice Smith \\", \\" Bob O\'Connorn\\", \\"tCHARLIE brown \\", \\"alice smith \\"] normalized = normalize_input_data(records) print(normalized) # Output should be [\'ALICE SMITH\', \'BOB OCONNOR\', \'CHARLIE BROWN\'] ```","solution":"import re def normalize_input_data(records): Process a list of strings (records) to return a list of standardized records. Args: records (list of str): The list of records to be processed. Returns: list of str: A list of standardized, unique records. standardized_records = set() for record in records: # Trim leading and trailing whitespace cleaned_record = record.strip() # Convert all alphabetic characters to uppercase cleaned_record = cleaned_record.upper() # Replace all sequences of whitespace within the record with a single space cleaned_record = re.sub(r\'s+\', \' \', cleaned_record) # Add the cleaned record to the set standardized_records.add(cleaned_record) # Convert the set back to a list return list(standardized_records)"},{"question":"In this problem, you will create a context manager named `suppress_exception` that suppresses a specified exception if it occurs within its context. This is particularly useful for managing errors in a controlled environment without stopping the execution of the program. The context manager should use the `__enter__` and `__exit__` methods to manage the context. # Requirements: 1. You must implement the `suppress_exception` class which can be used with the `with` statement. 2. The context manager should accept an exception type during initialization and suppress that exception if it occurs within the context. # Class Signature: ```python class suppress_exception: def __init__(self, exception_type): pass def __enter__(self): pass def __exit__(self, exc_type, exc_val, exc_tb): pass ``` # Example: ```python with suppress_exception(ZeroDivisionError): print(1 / 0) print(\\"This will be printed despite the division by zero.\\") with suppress_exception(KeyError): d = {\'a\': 1} print(d[\'b\']) # This will not raise an error print(\\"This will be printed despite the KeyError.\\") ``` **Explanation:** - In the first `with` block, a `ZeroDivisionError` would normally be raised by `1 / 0`, but the `suppress_exception` context manager suppresses it, allowing the print statement following the block to execute. - In the second `with` block, a `KeyError` would normally be raised by accessing `d[\'b\']`, but the `suppress_exception` context manager suppresses it, allowing the print statement following the block to execute. # Task: 1. Implement the class `suppress_exception` as described. 2. Ensure the behavior matches the example provided.","solution":"class suppress_exception: def __init__(self, exception_type): self.exception_type = exception_type def __enter__(self): return self def __exit__(self, exc_type, exc_val, exc_tb): if exc_type is not None and issubclass(exc_type, self.exception_type): return True # Suppress the exception return False # Do not suppress the exception"},{"question":"# File Path Normalization Develop a function to normalize a given absolute file path in a Unix-style file system. The file path is initially an unnormalized version containing redundant or non-essential parts such as `.` (current directory), `..` (parent directory), and multiple slashes `/`. The function `normalize_path(path)` must process the input file path to resolve these redundancies and return the simplified version. The normalization rules to follow are: 1. Consecutive slashes should be replaced by a single slash. 2. A `.` component represents the current directory and can be removed. 3. A `..` component moves one level up in the directory hierarchy unless it\'s already at the root `/`, in which case it remains at the root. 4. The result should always start with a `/` and should not have a trailing slash unless the input path is `/`. The function should: - **Input**: A string `path`, representing the absolute file path to be normalized. - **Output**: A string representing the normalized file path. Example Input and Output ```python print(normalize_path(\\"/usr//bin/./scripts/../\\")) # \'/usr/bin/\' print(normalize_path(\\"/../\\")) # \'/\' print(normalize_path(\\"/home//user/../docs/./file\\")) # \'/home/docs/file\' ``` # Function Signature: ```python def normalize_path(path: str) -> str: pass ```","solution":"def normalize_path(path: str) -> str: Normalize the given Unix-style absolute file path. parts = path.split(\'/\') stack = [] for part in parts: if part == \'\' or part == \'.\': continue elif part == \'..\': if stack: stack.pop() else: stack.append(part) normalized_path = \'/\' + \'/\'.join(stack) return normalized_path"},{"question":"Build a command-line tool in Python that processes a text file containing a list of numbers (one number per line) and performs statistical analysis on the data. The program should calculate and display the following statistics: 1. Count of numbers 2. Sum of all numbers 3. Average of the numbers 4. Median of the numbers 5. Standard deviation of the numbers Assume the input file is named \'numbers.txt\' and resides in the same directory as the script. The program should handle the following edge cases gracefully: - File not found or unreadable - File is empty - Lines that do not contain valid numbers The tool should output the above statistics in a readable format. If any edge case occurs (e.g., empty file), output an appropriate error message. Write a self-contained Python program that starts with: ``` import os import statistics def process_numbers_file(): ```","solution":"import os import statistics def process_numbers_file(): file_path = \'numbers.txt\' if not os.path.isfile(file_path): print(\\"Error: \'numbers.txt\' file not found.\\") return with open(file_path, \'r\') as file: lines = file.readlines() numbers = [] for line in lines: try: numbers.append(float(line.strip())) except ValueError: print(f\\"Warning: Ignoring invalid line: \'{line.strip()}\'\\") continue if not numbers: print(\\"Error: No valid numbers found in \'numbers.txt\'.\\") return count = len(numbers) total_sum = sum(numbers) average = total_sum / count median = statistics.median(numbers) standard_deviation = statistics.stdev(numbers) if count > 1 else 0.0 print(f\\"Count of numbers: {count}\\") print(f\\"Sum of all numbers: {total_sum}\\") print(f\\"Average of the numbers: {average}\\") print(f\\"Median of the numbers: {median}\\") print(f\\"Standard deviation of the numbers: {standard_deviation}\\") # Example of how to call the function # process_numbers_file()"},{"question":"Given a list of strings, write a function that determines the length of the longest substring with all unique characters, returning both the substring and its length. The function should handle edge cases such as an empty string or strings with repeating characters. Assume the input is always a list of non-empty strings. The function signature should be: ``` def find_longest_unique_substring(strings): ``` The function should output: - The substrings with their respective lengths in a list of tuples. Each tuple contains the string and the length. Examples: - Input: `[\\"abcabcbb\\", \\"bbbbb\\", \\"pwwkew\\"]` - Output: `[(\\"abc\\", 3), (\\"b\\", 1), (\\"wke\\", 3)]`","solution":"def find_longest_unique_substring(strings): Finds the longest substring with all unique characters for each string in the given list and returns a list of tuples with the substring and its length. Args: strings (list of str): List of non-empty strings. Returns: list of tuples: Each tuple contains the longest unique substring and its length. def longest_unique_substring(s): Finds the longest substring with all unique characters in a given string. Args: s (str): Input string. Returns: tuple: A tuple containing the longest unique substring and its length. n = len(s) if n == 0: return \\"\\", 0 start = 0 max_length = 0 max_substring = \\"\\" seen_chars = {} for end in range(n): if s[end] in seen_chars: start = max(start, seen_chars[s[end]] + 1) seen_chars[s[end]] = end window_length = end - start + 1 if window_length > max_length: max_length = window_length max_substring = s[start:end + 1] return max_substring, max_length return [longest_unique_substring(item) for item in strings]"},{"question":"Write a function `generate_password` which creates a secure, random password that adheres to the specified requirements. The function should take an integer `length` as input, denoting the desired length of the password. The password must include at least one uppercase letter, one lowercase letter, one digit, and one special character (from the set `!@#%^&*()-_`). The remainder of the password can be filled with any combination of these character types. The function should return the generated password as a string. To ensure the password is as secure as possible: 1. Shuffle the password characters to avoid predictable patterns. 2. Include a different set of randomization for each run to ensure different password outputs for the same `length`. **Function Signature:** ```python import random import string def generate_password(length: int) -> str: ``` **Libraries required:** - random - string # Example Usage: ```python # Example function calls print(generate_password(8)) # Example output: `A1c!5B2` print(generate_password(12)) # Example output: `aB7!6C3dE5#` ``` Note: - You may assume the function will only be called with `length` >= 4, to always include at least one of each required character type.","solution":"import random import string def generate_password(length: int) -> str: Generates a secure, random password of a given length. The password will always include at least one uppercase letter, one lowercase letter, one digit, and one special character. Parameters: length (int): The desired length of the password, assumed to be at least 4. Returns: str: The generated password. if length < 4: raise ValueError(\\"Password length must be at least 4 to include all character types.\\") # Define character sets upper = string.ascii_uppercase lower = string.ascii_lowercase digits = string.digits special = \\"!@#%^&*()-_\\" # Ensure at least one of each required character type is included password = [ random.choice(upper), random.choice(lower), random.choice(digits), random.choice(special) ] # Fill the rest of the password length with a random selection of all character types if length > 4: all_characters = upper + lower + digits + special password += random.choices(all_characters, k=length - 4) # Shuffle to avoid any predictable patterns random.shuffle(password) return \'\'.join(password)"},{"question":"You are asked to develop a function named `simulate_battle` which simulates a battle between two warriors. The primary operations involved in the battle are: 1. **Checking Victory Condition**: After each attack, check if the opponent\'s health has fallen to zero or below. 2. **Switching Attackers**: Alternate turns between the two warriors. 3. **Calculating Damage**: Each warrior attacks with a certain damage value per turn. 4. **Displaying Status**: Print the health of both warriors after each turn. Function Signature: ```python def simulate_battle(warrior1: dict, warrior2: dict) -> str: ``` Parameters: - `warrior1 (dict)`: A dictionary containing the keys \'name\', \'health\', and \'damage\' for the first warrior. - `warrior2 (dict)`: A dictionary containing the keys \'name\', \'health\', and \'damage\' for the second warrior. Returns: - A string indicating the name of the winning warrior. # Constraints & Requirements: - The battle should continue until one of the warriors\' health drops to zero or below. - On each turn, print the current health of both warriors. - The function must ensure that turns alternate between the two warriors. # Example Usage: ```python warrior1 = {\'name\': \'Thor\', \'health\': 100, \'damage\': 20} warrior2 = {\'name\': \'Loki\', \'health\': 90, \'damage\': 15} winner = simulate_battle(warrior1, warrior2) print(f\\"The winner is {winner}\\") ``` Expected Output: ``` After this turn, Thor\'s health is 100 and Loki\'s health is 70 After this turn, Thor\'s health is 85 and Loki\'s health is 70 After this turn, Thor\'s health is 85 and Loki\'s health is 50 After this turn, Thor\'s health is 70 and Loki\'s health is 50 After this turn, Thor\'s health is 70 and Loki\'s health is 30 After this turn, Thor\'s health is 55 and Loki\'s health is 30 After this turn, Thor\'s health is 55 and Loki\'s health is 10 After this turn, Thor\'s health is 40 and Loki\'s health is 10 After this turn, Thor\'s health is 40 and Loki\'s health is -10 The winner is Thor ``` Helper Functions: In the interest of time and focus, you may assume the existence of or create the following helper functions (implementation not required): - `attack(attacker: dict, defender: dict)`: Simulates an attack from the attacker on the defender, reducing the defender’s health by the attacker’s damage. The function `simulate_battle` must handle the orchestration of the battle mechanics as described.","solution":"def simulate_battle(warrior1, warrior2): Simulates a battle between two warriors. Returns the name of the winning warrior. while warrior1[\'health\'] > 0 and warrior2[\'health\'] > 0: # Warrior1 attacks Warrior2 warrior2[\'health\'] -= warrior1[\'damage\'] if warrior2[\'health\'] <= 0: print(f\\"After this turn, {warrior1[\'name\']}\'s health is {warrior1[\'health\']} and {warrior2[\'name\']}\'s health is {warrior2[\'health\']}\\") return warrior1[\'name\'] print(f\\"After this turn, {warrior1[\'name\']}\'s health is {warrior1[\'health\']} and {warrior2[\'name\']}\'s health is {warrior2[\'health\']}\\") # Warrior2 attacks Warrior1 warrior1[\'health\'] -= warrior2[\'damage\'] if warrior1[\'health\'] <= 0: print(f\\"After this turn, {warrior1[\'name\']}\'s health is {warrior1[\'health\']} and {warrior2[\'name\']}\'s health is {warrior2[\'health\']}\\") return warrior2[\'name\'] print(f\\"After this turn, {warrior1[\'name\']}\'s health is {warrior1[\'health\']} and {warrior2[\'name\']}\'s health is {warrior2[\'health\']}\\")"},{"question":"You are tasked with implementing a simplified version of the Minimax algorithm for a Tic-Tac-Toe game. In this problem, you will create a function `minimax` that evaluates a given board state and determines the best move for the current player (\'X\' or \'O\'). # Function Specification: - **Function Name**: `minimax` - **Parameters**: - `board`: A 2D list representing the Tic-Tac-Toe board (3x3). Each cell contains \'X\', \'O\', or \'\' (empty string). - `is_maximizing`: A boolean indicating whether the current move is for the maximizing player (\'X\') or not (\'O\'). - **Returns**: - A tuple containing the best possible score and the coordinates (row, col) of the best move. # Additional Details: 1. **Winning Conditions**: - The function should recognize the end states of the game, including win conditions for \'X\' and \'O\', as well as draws. 2. **Score Evaluation**: - Assign a score of +10 for a win by \'X\', -10 for a win by \'O\', and 0 for a draw. 3. **Recursive Minimax Approach**: - Use recursion to evaluate the potential outcomes of each possible move. - The maximizing player aims to maximize the score, while the minimizing player aims to minimize the score. # Usage Example: ```python board = [ [\'X\', \'O\', \'X\'], [\'O\', \'O\', \'X\'], [\'\', \'\', \'\'] ] is_maximizing = True score, best_move = minimax(board, is_maximizing) print(\\"Best score:\\", score) print(\\"Best move:\\", best_move) ``` # Implementation Notes: - Ensure that the function handles base cases appropriately, i.e., terminal states where the game is won, lost, or drawn. - Allow the function to explore all possible future moves recursively to determine the final outcome for each branch. - Use this to select the optimal move for the current player based on their objective (maximize or minimize score).","solution":"def check_winner(board): Helper function to check if there\'s a winner. Returns \'X\', \'O\' if there\'s a winner, or None if no winner. # Checking rows for row in board: if row[0] == row[1] == row[2] and row[0] != \'\': return row[0] # Checking columns for col in range(3): if board[0][col] == board[1][col] == board[2][col] and board[0][col] != \'\': return board[0][col] # Checking diagonals if board[0][0] == board[1][1] == board[2][2] and board[0][0] != \'\': return board[0][0] if board[0][2] == board[1][1] == board[2][0] and board[0][2] != \'\': return board[0][2] return None def is_board_full(board): Helper function to check if the board is full. for row in board: if \'\' in row: return False return True def minimax(board, is_maximizing): Implements the Minimax algorithm to determine the best move for a given board state. winner = check_winner(board) if winner == \'X\': return (10, None) elif winner == \'O\': return (-10, None) elif is_board_full(board): return (0, None) if is_maximizing: best_score = float(\'-inf\') best_move = None for row in range(3): for col in range(3): if board[row][col] == \'\': board[row][col] = \'X\' score, _ = minimax(board, False) board[row][col] = \'\' if score > best_score: best_score = score best_move = (row, col) return best_score, best_move else: best_score = float(\'inf\') best_move = None for row in range(3): for col in range(3): if board[row][col] == \'\': board[row][col] = \'O\' score, _ = minimax(board, True) board[row][col] = \'\' if score < best_score: best_score = score best_move = (row, col) return best_score, best_move"},{"question":"You are to write a Python function named `analyze_integers` that takes a list of integers as input and performs the following tasks: 1. Remove any duplicate integers from the list. 2. Sort the remaining integers in ascending order. 3. Find the maximum and minimum values from the sorted list. 4. Compute the average of the integers in the list. 5. Compute the median of the integers in the list. If the list has an even number of elements, the median is the average of the two middle numbers. 6. Return a dictionary containing: - `\\"sorted\\"`: the sorted list of integers without duplicates, - `\\"max\\"`: the maximum value, - `\\"min\\"`: the minimum value, - `\\"average\\"`: the average of the list (float), - `\\"median\\"`: the median of the list (float). Your function should handle edge cases such as an empty list where the results for maximum, minimum, average, and median should be `None`. **Function Signature:** ```python def analyze_integers(nums: list) -> dict: pass ``` **Example:** ```python result = analyze_integers([3, 1, 2, 2, 4, 4, 5, 1]) print(result) # Output: # { # \'sorted\': [1, 2, 3, 4, 5], # \'max\': 5, # \'min\': 1, # \'average\': 3.0, # \'median\': 3.0 # } ``` Note: Ensure your implementation efficiently handles lists of varying lengths, including edge cases like an empty list.","solution":"def analyze_integers(nums): if not nums: return { \'sorted\': [], \'max\': None, \'min\': None, \'average\': None, \'median\': None } unique_nums = sorted(set(nums)) maximum = unique_nums[-1] minimum = unique_nums[0] average = sum(unique_nums) / len(unique_nums) n = len(unique_nums) if n % 2 == 1: median = unique_nums[n // 2] else: median = (unique_nums[n // 2 - 1] + unique_nums[n // 2]) / 2 return { \'sorted\': unique_nums, \'max\': maximum, \'min\': minimum, \'average\': average, \'median\': median }"},{"question":"Create a function named `merge_rotation_lists` that takes two parameters: - `list_1`: a list of integers - `list_2`: a list of integers The function should: 1. Rotate `list_1` to the right by 1 position (i.e., move the last element to the front). 2. Rotate `list_2` to the left by 1 position (i.e., move the first element to the end). 3. Merge the two rotated lists in an alternating fashion (i.e., taking one element from `list_1`, then one element from `list_2`, and so on). If one list is longer than the other, append the remaining elements of the longer list to the end of the merged list. The function should return the merged list. # Example Usage ```python list_1 = [1, 2, 3, 4] list_2 = [5, 6, 7, 8] result = merge_rotation_lists(list_1, list_2) print(result) # Output: [4, 6, 1, 7, 2, 8, 3, 5] ``` In this example, `list_1` is rotated to the right to become `[4, 1, 2, 3]` and `list_2` is rotated to the left to become `[6, 7, 8, 5]`. The merged list is `[4, 6, 1, 7, 2, 8, 3, 5]`. # Requirements - Handle lists of different lengths. - Ensure the function is efficient with respect to time and space complexity. - Provide a complete implementation of the `merge_rotation_lists` function.","solution":"def merge_rotation_lists(list_1, list_2): Rotate list_1 to the right by 1 position and list_2 to the left by 1 position, then merge them in an alternating fashion. if list_1: list_1 = [list_1[-1]] + list_1[:-1] if list_2: list_2 = list_2[1:] + [list_2[0]] merged_list = [] len_1, len_2 = len(list_1), len(list_2) min_len = min(len_1, len_2) for i in range(min_len): merged_list.append(list_1[i]) merged_list.append(list_2[i]) if len_1 > len_2: merged_list.extend(list_1[min_len:]) else: merged_list.extend(list_2[min_len:]) return merged_list"},{"question":"In this task, you need to implement a function that verifies whether a player has won by filling an entire column in a Connect Four game. The function should utilize the `numpy` library to ensure efficient computations. Function Signature ```python def column_win(board, player): pass ``` Parameters: - `board` : a 2D numpy array representing the Connect Four board. Each element in the array can either be an integer indicating the player\'s disc (e.g., 1 or 2) or 0 denoting an empty cell. - `player` : an integer representing the player\'s disc (e.g., 1 or 2). Returns: - A boolean value indicating whether the given player has won by filling an entire column on the board. # Example: ```python import numpy as np board = np.array([[1, 2, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [1, 2, 0, 0, 0, 0, 0], [1, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0]]) print(column_win(board, 1)) # Output: True print(column_win(board, 2)) # Output: False ``` # Constraints: 1. The function must use `numpy.all` to check if a column has all elements equal to the specified player\'s disc. 2. The board will always be a 6x7 numpy array. 3. The `player` will always be an integer (either 1 or 2). 4. You are not allowed to use any other external libraries for this problem. # Objective: - Gain familiarity with numpy\'s array operations. - Understand the efficient array-based computations provided by numpy. # Requirements: - Use `numpy.all` to check that all elements in a given column are filled with the specified player\'s disc.","solution":"import numpy as np def column_win(board, player): Checks if the specified player has won by filling an entire column. :param board: 2D numpy array representing the Connect Four board. :param player: Integer representing the player\'s disc. :return: Boolean value indicating whether the player has won by filling an entire column. for col in range(board.shape[1]): if np.all(board[:, col] == player): return True return False # Example usage board = np.array([[1, 2, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [1, 2, 0, 0, 0, 0, 0], [1, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0]]) print(column_win(board, 1)) # Output: True print(column_win(board, 2)) # Output: False"},{"question":"Implement the function `flatten_dictionaries` that takes as input a dictionary which can have nested dictionaries as values, and returns a new dictionary with all levels of nesting flattened. The keys in the output dictionary should represent the path to each leaf value in the original dictionary, separated by dots (\'.\'). # Guidelines: - You need to recursively traverse the input dictionary and construct the new flattened dictionary. - In the output dictionary, each key should be a string representing the path of keys from the root to the leaf, joined by dots. - If the given dictionary is empty, the function should return an empty dictionary. # Input - A nested dictionary `data` where the keys are strings and the values can be either strings, numbers, or additional dictionaries. # Output - A single-level dictionary with concatenated keys representing the paths to the leaves in the original dictionary. # Example Given the input: ```python data = { \\"a\\": { \\"b\\": 1, \\"c\\": { \\"d\\": 2, \\"e\\": 3 } }, \\"f\\": 4 } ``` The result should be: ```python flattened_data = { \\"a.b\\": 1, \\"a.c.d\\": 2, \\"a.c.e\\": 3, \\"f\\": 4 } ``` # Constraints - The function should handle nested structures up to any depth. - All keys in the dictionary and nested dictionaries are unique. Complete the function `flatten_dictionaries(data: Dict[str, Any]) -> Dict[str, Any]` where `Dict[str, Any]` represents the type for the nested dictionary. # Additional Example Given the input: ```python data = { \\"x\\": { \\"y\\": 5, \\"z\\": { \\"u\\": { \\"v\\": 6 } } }, \\"w\\": 7 } ``` The result should be: ```python flattened_data = { \\"x.y\\": 5, \\"x.z.u.v\\": 6, \\"w\\": 7 } ```","solution":"def flatten_dictionaries(data, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. Args: - data (dict): The dictionary to flatten. - parent_key (str): The base key string for recursion. - sep (str): The separator to use between keys. Returns: - dict: A single-level dictionary with concatenated keys. items = [] for k, v in data.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionaries(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You need to write a function `is_balanced(expression: str) -> bool` that checks whether a given mathematical expression has balanced parentheses. A balanced expression means that each opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and the pairs of parentheses are properly nested. The function should take in a string `expression` that may include: - Alphabets (both uppercase and lowercase) - Digits (0-9) - Arithmetic operators (+, -, *, /) - Parentheses (both opening \'(\' and closing \')\') The function should return `True` if the parentheses in the expression are balanced and properly nested, otherwise, it should return `False`. **Requirements:** 1. Use a stack data structure to help with the parenthesis matching. 2. Push each opening parenthesis \'(\' onto the stack. 3. For each closing parenthesis \')\', check if there is a corresponding opening parenthesis \'(\' on the stack. 4. If the stack is empty at the end of the iteration and all parentheses have been matched, return `True`. 5. If at any point there is a mismatch or the stack is not empty at the end, return `False`. Examples: ```python assert is_balanced(\\"(a + b) * (c - d)\\") == True assert is_balanced(\\"(a + b))\\") == False assert is_balanced(\\"((a + b)\\") == False assert is_balanced(\\"a * (b + (c - d))\\") == True ```","solution":"def is_balanced(expression: str) -> bool: Checks whether the parentheses in the given mathematical expression are balanced. :param expression: A string containing a mathematical expression :return: True if the parentheses are balanced, False otherwise stack = [] for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"You are provided with a collection of documents, and your task is to analyze their contents to determine the frequency of each word appearing across all documents. This fundamental text processing task involves reading the text data, tokenizing the words, and counting the occurrences. In this task, you will write a function called `word_frequency` that calculates the frequency of each word in the input collection of documents. The function should be defined as follows: ```python def word_frequency(documents): Compute the frequency of each word across all documents. Inputs: - documents: A list of strings, where each string represents a document. Returns: - freq_dict: A dictionary where keys are words and values are their corresponding frequencies. ``` # Inputs: - `documents`: A list of strings, where each string is a document containing multiple words. # Outputs: - `freq_dict`: A dictionary with words as keys and their corresponding frequencies as values. # Requirements: 1. Convert all words to lowercase to ensure the counting is case-insensitive. 2. Remove punctuation from words to avoid counting different punctuated forms separately. 3. Use `collections.Counter` for efficient frequency counting. # Example: ```python documents = [ \\"Hello world! This is a test.\\", \\"This test is only a test.\\", \\"Hello again, world!\\" ] freq_dict = word_frequency(documents) print(freq_dict) # Expected output: {\'hello\': 2, \'world\': 2, \'this\': 2, \'is\': 2, \'a\': 2, \'test\': 3, \'only\': 1, \'again\': 1} ``` Your goal is to implement the `word_frequency` function accurately, taking care to handle case sensitivity and punctuation appropriately. Use Python\'s `collections.Counter` to simplify the frequency counting process.","solution":"import re from collections import Counter def word_frequency(documents): Compute the frequency of each word across all documents. Inputs: - documents: A list of strings, where each string represents a document. Returns: - freq_dict: A dictionary where keys are words and values are their corresponding frequencies. # Combine all documents into a single string all_docs = \' \'.join(documents) # Convert all text to lowercase all_docs = all_docs.lower() # Remove punctuation using regex all_docs = re.sub(r\'[^ws]\', \'\', all_docs) # Split the string into individual words words = all_docs.split() # Use Counter to count frequency of each word freq_dict = Counter(words) return dict(freq_dict)"},{"question":"You are developing a navigation system for autonomous vehicles that includes a feature to detect obstacles and provide a safe driving path. The input is a grid representing a map wherein each cell can either be free space or an obstacle. You are to implement an algorithm that uses Breadth-First Search (BFS) to find the shortest path from the starting point to the destination point, avoiding any obstacles. # Task: Write a function named `shortest_path` that performs the following steps: 1. Represent the grid as a list of lists, where `1` represents an obstacle and `0` represents free space. 2. Implement a BFS to traverse the grid and find the shortest path from the start position to the destination. 3. Return the length of the shortest path if a path exists, or `-1` if no path is found. # Detailed Steps: 1. Represent the input grid using a list of lists. 2. Start from the given start position. 3. Use BFS to traverse the grid, marking cells as visited. 4. Maintain a queue to store the cells to be processed along with the distance from the start. 5. For each cell, check the possible moves (up, down, left, right) and ensure they are within bounds, not obstacles, and not visited. 6. If the destination is reached, return the path length. 7. If no path to the destination is found, return `-1`. # Function Signature: ```python def shortest_path(grid: List[List[int]], start: Tuple[int, int], destination: Tuple[int, int]) -> int: Given a grid, a starting point, and a destination point, this function finds the shortest path using BFS. Args: - grid: List[List[int]] - A 2D list representing the map, where 1 is an obstacle and 0 is free space. - start: Tuple[int, int] - The starting position in the grid (row, col). - destination: Tuple[int, int] - The destination position in the grid (row, col). Returns: - int - The length of the shortest path from the start to the destination, or -1 if no path exists. pass ``` # Input: - `grid`: A list of lists with values `0` and `1` indicating free space and obstacles, respectively. - `start`: A tuple representing the starting cell\'s (row, col) position. - `destination`: A tuple representing the destination cell\'s (row, col) position. # Output: - An integer representing the length of the shortest path from the start to the destination, or `-1` if no path exists. # Additional Information: - Ensure that you handle edge cases such as the start or destination being an obstacle or the grid being empty. - The BFS should efficiently handle large grids and avoid revisiting cells.","solution":"from typing import List, Tuple from collections import deque def shortest_path(grid: List[List[int]], start: Tuple[int, int], destination: Tuple[int, int]) -> int: if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) sr, sc = start dr, dc = destination if grid[sr][sc] == 1 or grid[dr][dc] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sr, sc, 0)]) # (row, col, distance) visited = set() visited.add((sr, sc)) while queue: r, c, dist = queue.popleft() if (r, c) == destination: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"You are required to write a function in Python that interacts with a SQLite database to manage user information in a table. This function should be named `update_user_age` and must handle updating the age of an existing user in the database. The function should: 1. Check if the user with the given username exists in the table. 2. If the user does not exist, print a message indicating the user is not found and exit the program using the `sys.exit()` function from the `sys` library. 3. If the user exists, update the user\'s age to the new specified age and commit the transaction. 4. Verify if the age was updated successfully: - If the age was updated, print a success message. - If there was an error, print an error message and exit the program using `sys.exit()`. Use the following libraries: `sqlite3` and `sys`. You are given the following parameters: - `db_name`: The name of the SQLite database file. - `table`: The name of the table in the SQLite database. - `username`: The username of the user to update. - `new_age`: The new age to be set for the user. Ensure your function handles database connections and operations correctly, and make appropriate use of `sys.exit()` as described above. Example: ```python import sqlite3 import sys def update_user_age(db_name, table, username, new_age): # your code here pass # Sample usage: db = sqlite3.connect(\\":memory:\\") # for an in-memory database for testing cursor = db.cursor() cursor.execute(\\"CREATE TABLE Users (username TEXT, age INTEGER)\\") cursor.execute(\\"INSERT INTO Users (username, age) VALUES (\'JohnDoe\', 25)\\") update_user_age(\':memory:\', \'Users\', \'JohnDoe\', 30) ```","solution":"import sqlite3 import sys def update_user_age(db_name, table, username, new_age): Updates the age of a user in the specified SQLite database table. Parameters: db_name (str): The name of the SQLite database file. table (str): The name of the table in the SQLite database. username (str): The username of the user to update. new_age (int): The new age to be set for the user. try: # Connect to the SQLite database conn = sqlite3.connect(db_name) cursor = conn.cursor() # Check if the user with the given username exists cursor.execute(f\\"SELECT * FROM {table} WHERE username = ?\\", (username,)) user = cursor.fetchone() if user is None: print(\\"User not found\\") sys.exit(1) # Update the user\'s age cursor.execute(f\\"UPDATE {table} SET age = ? WHERE username = ?\\", (new_age, username)) conn.commit() # Verify if the age was updated successfully cursor.execute(f\\"SELECT age FROM {table} WHERE username = ?\\", (username,)) updated_age = cursor.fetchone()[0] if updated_age == new_age: print(\\"User age updated successfully\\") else: print(\\"Error: User age not updated\\") sys.exit(1) except sqlite3.Error as e: print(f\\"SQLite error: {e}\\") sys.exit(1) finally: # Close the database connection if conn: conn.close()"},{"question":"Create a function named `find_missing_number` that takes a single argument `numbers` (a list of integers) which represents a sequence of `n` unique integers from `1` to `n+1` with exactly one number missing. The function should return the missing number. **Function Signature** ```python def find_missing_number(numbers: list) -> int: ``` **Constraints:** - The length of the list `numbers` will be `n` where `n` is a positive integer. - Each integer in the list `numbers` will be unique and between `1` and `n+1`. # Example ```python # Example 1 numbers = [1, 2, 4, 5, 6] result = find_missing_number(numbers) print(result) # Output: 3 # Example 2 numbers = [2, 3, 1, 5] result = find_missing_number(numbers) print(result) # Output: 4 ``` **Hints:** - Consider using the sum formula for the first `n` natural numbers to find the missing number efficiently.","solution":"def find_missing_number(numbers): Returns the missing number in the list of integers `numbers` which contains unique integers from 1 to n+1 with exactly one number missing. n = len(numbers) expected_sum = (n + 1) * (n + 2) // 2 # Sum of first n+1 numbers actual_sum = sum(numbers) return expected_sum - actual_sum"},{"question":"Convert an integer to its Roman numeral representation. Implement a function that takes an integer as input and returns the equivalent Roman numeral as a string. The function should handle input values in the range from 1 to 3999. You should write self-contained code starting with: ``` def int_to_roman(num): ```","solution":"def int_to_roman(num): Convert an integer to its Roman numeral representation. :param num: Integer to be converted (1 <= num <= 3999) :return: A string representing the Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"You are developing a function that computes and displays the sum of all even-valued nodes in a provided binary tree. The goal of this task is to demonstrate your understanding of tree traversal methods and conditional summation. Write a function `sum_even_nodes(root)` that: 1. Takes the root node of a binary tree as a parameter. 2. Traverses the entire binary tree. 3. Computes the sum of the values of all the nodes that contain even numbers. 4. Returns the computed sum. **Requirements:** - Your function should handle an empty tree by returning a sum of `0`. - You should use either a recursive or iterative approach to traverse the binary tree. - Ensure that the solution is efficient and can handle large trees. Consider the following binary tree structure for the example: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` For example, given a binary tree: ``` 5 / 3 8 / 2 4 10 ``` The function call `sum_even_nodes(root)` should return `24` because the even-valued nodes are `2, 4, 8, 10`, and their sum is `24`. ```python # Example usage root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(8) root.left.left = TreeNode(2) root.left.right = TreeNode(4) root.right.right = TreeNode(10) print(sum_even_nodes(root)) # Output should be 24 ```","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sum_even_nodes(root): Computes the sum of all even-valued nodes in a binary tree. Args: root (TreeNode): The root node of the binary tree. Returns: int: The sum of all even-valued nodes. if root is None: return 0 sum_even = 0 def traverse(node): nonlocal sum_even if node is None: return if node.value % 2 == 0: sum_even += node.value traverse(node.left) traverse(node.right) traverse(root) return sum_even"},{"question":"In this problem, you need to write a Python function named `find_magic_index` that finds and returns the \\"magic index\\" in a given list of integers. A magic index in the list is defined as an index such that elements[index] is equal to the index itself. **Function Signature:** ```python def find_magic_index(arr: List[int]) -> int: ``` **Input:** - `arr` (List[int]): A list of integers sorted in non-decreasing order. **Output:** - Returns the magic index, or `-1` if no magic index exists in the list. **Details:** 1. The input list `arr` is sorted in non-decreasing order. 2. You need to find the first occurrence of the magic index, if it exists. 3. If no magic index is found, return `-1`. **Example:** ```python arr = [-1, 0, 1, 3, 5] find_magic_index(arr) # returns 3 arr = [0, 2, 3, 4, 5] find_magic_index(arr) # returns 0 arr = [1, 2, 3, 4, 5] find_magic_index(arr) # returns -1 ``` In the first example: The element at index 3 is 3, which satisfies the condition of a magic index. In the second example: The element at index 0 is 0, which satisfies the condition of a magic index. In the last example: No element matches its index, so the function returns -1.","solution":"from typing import List def find_magic_index(arr: List[int]) -> int: Finds and returns the magic index in the given sorted list of integers. A magic index is defined as an index where the element at that index is equal to the index itself. Args: arr (List[int]): A list of integers sorted in non-decreasing order. Returns: int: The magic index if it exists, otherwise -1. for i, val in enumerate(arr): if i == val: return i return -1"},{"question":"You are provided with the challenge of creating a function that will determine if there exists a pair of numbers in a given list that adds up to a specified target sum. Your implementation should be efficient and not simply check all possible pairs (i.e., avoid an O(n^2) solution if possible). The function should use a single loop and leverage a data structure to track the required sums on the go. # Function Signature ```python def has_pair_with_sum(lst: List[int], target: int) -> bool: ``` # Input - `lst`: A list of integers. - `target`: An integer representing the desired sum. # Output - A boolean value (`True` or `False`): - `True` if there\'s at least one pair of numbers in the list that add up to the target sum. - `False` otherwise. # Example ```python lst = [1, 2, 3, 9] target = 8 result = has_pair_with_sum(lst, target) print(result) # Output: False lst = [1, 2, 4, 4] target = 8 result = has_pair_with_sum(lst, target) print(result) # Output: True ``` Ensure the solution is optimal and employs an appropriate data structure for efficient lookup and insertion operations.","solution":"from typing import List def has_pair_with_sum(lst: List[int], target: int) -> bool: Determines if there exists a pair of numbers in the given list that adds up to the specified target sum. Args: lst (List[int]): A list of integers. target (int): An integer representing the desired sum. Returns: bool: True if there is at least one pair of numbers in the list that add up to the target sum, False otherwise. seen_numbers = set() for number in lst: needed_val = target - number if needed_val in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"This function takes two integers, start and end, and returns a list of all prime numbers in the range [start, end] inclusive. The function must also calculate the sum of all the prime numbers found and return it along with the list of primes. The function should return: tuple: A tuple containing two elements: - list: A list of prime numbers in the specified range. - int: The sum of these prime numbers. You should write self-contained code starting with: ``` def find_primes_in_range(start, end): ```","solution":"def find_primes_in_range(start, end): Finds all prime numbers in the range [start, end] inclusive and calculates the sum of these prime numbers. Args: start (int): The start of the range. end (int): The end of the range. Returns: tuple: A tuple containing a list of primes in the range and the sum of those primes. def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True primes = [num for num in range(start, end + 1) if is_prime(num)] return (primes, sum(primes))"},{"question":"In this problem, you will be working with 2D arrays and the concept of matrix rotation. Rotating a matrix can be widely used in various applications such as image processing, computer graphics, and more. Your task is to write a function `rotate_matrix` that takes in a 2D Numpy array `matrix` and an integer `k`, and returns the matrix rotated 90 degrees clockwise `k` times. Function Signature: ```python def rotate_matrix(matrix: np.ndarray, k: int) -> np.ndarray: pass ``` # Example **Input:** ```python matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) k = 1 ``` **Output:** ```python array([[7, 4, 1], [8, 5, 2], [9, 6, 3]]) ``` **Input:** ```python matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) k = 2 ``` **Output:** ```python array([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) ``` # Constraints - `matrix` will always be a 2D numpy array with shape (N, N) where 1 ≤ N ≤ 1000 - `k` will be a non-negative integer where 0 ≤ k ≤ 10^9 # Requirements 1. Use Numpy functions for matrix manipulation. 2. Consider the optimization for large values of `k`. # Libraries ```python import numpy as np ```","solution":"import numpy as np def rotate_matrix(matrix: np.ndarray, k: int) -> np.ndarray: Rotates a 2D Numpy array by 90 degrees clockwise k times. Parameters: matrix (np.ndarray): 2D array to be rotated. k (int): Number of times to rotate the matrix by 90 degrees. Returns: np.ndarray: Rotated 2D array. # Optimizing the number of rotations as rotating 4 times returns to the original matrix k = k % 4 for _ in range(k): # Perform a 90 degree clockwise rotation matrix = np.transpose(matrix[::-1]) return matrix"},{"question":"Your task is to write a function `get_anagrams(word_list: List[str]) -> List[List[str]]` that receives a list of words and groups them into anagrams. Two words are anagrams if they contain the same characters in the same frequencies. The function should return a list of lists, where each sublist contains words that are anagrams of each other. 1. Iterate through the list of words and use a dictionary to group words by their sorted character tuples. 2. Return the grouped anagrams as a list of lists. The output list should contain sublists that are sorted lexicographically, and the sublists themselves should also be sorted in the order of their first elements. Detailed steps: - For each word in the input list, sort its characters and use this sorted sequence as a key in a dictionary. Append the original word to the list associated with this key. - After processing all words, sort the dictionary values (the lists of anagrams) lexicographically. - Sort the list of lists by the first element of each sublist. Example Input: ```python word_list = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] ``` Example Output: ```python [ [\\"ate\\", \\"eat\\", \\"tea\\"], [\\"bat\\"], [\\"nat\\", \\"tan\\"] ] ``` Explanation: - \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other. - \\"tan\\" and \\"nat\\" are anagrams of each other. - \\"bat\\" does not have any anagrams in the list.","solution":"from typing import List from collections import defaultdict def get_anagrams(word_list: List[str]) -> List[List[str]]: Groups words into anagrams and returns a list of lists, where each sublist contains words that are anagrams of each other. anagrams = defaultdict(list) # Group words by their sorted character tuple for word in word_list: sorted_word_tuple = tuple(sorted(word)) anagrams[sorted_word_tuple].append(word) # Convert anagrams dictionary to a sorted list of lists grouped_anagrams = [sorted(words) for words in anagrams.values()] # Sort the result based on the first element of each sublist return sorted(grouped_anagrams, key=lambda x: x[0])"},{"question":"You are required to write a function called `is_valid_coordinate` that checks if a given string is a valid representation of geographical coordinates. The input string should follow the format `\\"(latitude, longitude)\\"` where both latitude and longitude are decimal numbers. The `latitude` must be in the range of -90 to 90, and the `longitude` must be in the range of -180 to 180. Ensure the following: - The input string must follow the exact format, including the parentheses. - Both latitude and longitude must be valid decimal numbers within their respective ranges. - The function should use the Python `re` library for regular expressions to achieve this. If the input string is valid, return `True`. If it is invalid, return `False`. **Function Signature** ```python def is_valid_coordinate(input_string: str) -> bool: ... ``` **Usage Example** ```python is_valid_coordinate(\\"(45.0, -123.456)\\") # should return True is_valid_coordinate(\\"(-90.000, 180.0)\\") # should return True is_valid_coordinate(\\"(90.1, 180.0)\\") # should return False is_valid_coordinate(\\"(45.0 -123.456)\\") # should return False is_valid_coordinate(\\"(invalid, data)\\") # should return False ```","solution":"import re def is_valid_coordinate(input_string: str) -> bool: Checks if a given string is a valid representation of geographical coordinates. The input string should follow the format \\"(latitude, longitude)\\" where both latitude and longitude are decimal numbers. Latitude must be in range -90 to 90. Longitude must be in range -180 to 180. pattern = r\'^((-?d+(.d+)?),s*(-?d+(.d+)?))\' match = re.match(pattern, input_string) if not match: return False latitude = float(match.group(1)) longitude = float(match.group(3)) return -90 <= latitude <= 90 and -180 <= longitude <= 180"},{"question":"You are tasked with implementing a function to perform string manipulation operations to determine the longest substring consisting of non-repeating characters. This exercise will help you enhance your string manipulation skills and ability to work with different data structures in Python. Requirements: 1. **Function Name**: `longest_unique_substring` 2. **Function Signature**: `def longest_unique_substring(s: str) -> str:` 3. **Parameters**: - `s`: A string input consisting of lowercase alphabetical characters. 4. **Returns**: The longest substring of `s` that contains all unique characters. Details: - The function should traverse through the string and identify the longest substring that consists of non-repeating characters. - If there are multiple substrings of the same maximum length, return the first occurring one. Example: ```python def longest_unique_substring(s: str) -> str: char_index_map = {} start = 0 max_len = 0 max_substr = \\"\\" for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i if i - start + 1 > max_len: max_len = i - start + 1 max_substr = s[start:i+1] return max_substr print(longest_unique_substring(\\"abcabcbb\\")) # Output: \\"abc\\" print(longest_unique_substring(\\"bbbbb\\")) # Output: \\"b\\" print(longest_unique_substring(\\"pwwkew\\")) # Output: \\"wke\\" ```","solution":"def longest_unique_substring(s: str) -> str: char_index_map = {} start = 0 max_len = 0 max_substr = \\"\\" for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i if i - start + 1 > max_len: max_len = i - start + 1 max_substr = s[start:i+1] return max_substr"},{"question":"In this exercise, you will work with a list of integers and explore various operations on this list using Python. The problem is designed to test your knowledge in handling list manipulations, sorting, and understanding basic list operations. You are required to complete the following tasks: 1. **Generate List**: Implement a function called `generate_and_process_list` that takes an integer `n` as input and creates a list of `n` random integers between 1 and 100. You can use the `random` module to generate random integers. 2. **Filter List**: Filter out all numbers in the list that are greater than 50 and store them in a new list. 3. **Sort List**: Sort the filtered list in descending order. 4. **Output Results**: Print the original list, the filtered list, and the sorted list. # Function Signature ```python def generate_and_process_list(n: int) -> None: ``` # Requirements - You must use the `random` module to generate random integers within the specified range. - You must use list comprehensions where appropriate to filter the list. - The filtered list should be sorted in descending order using the `sorted` function with the appropriate arguments. # Example ```python generate_and_process_list(10) ``` This function might output: ```plaintext Original List: [23, 78, 45, 89, 50, 36, 82, 10, 75, 21] Filtered List: [78, 89, 82, 75] Sorted List: [89, 82, 78, 75] ```","solution":"import random def generate_and_process_list(n: int) -> None: Generates a list of n random integers between 1 and 100, filters and sorts them according to the criteria described. # Generate the list of n random integers between 1 and 100 original_list = [random.randint(1, 100) for _ in range(n)] # Filter the list to keep only numbers greater than 50 filtered_list = [x for x in original_list if x > 50] # Sort the filtered list in descending order sorted_list = sorted(filtered_list, reverse=True) # Print the results print(f\\"Original List: {original_list}\\") print(f\\"Filtered List: {filtered_list}\\") print(f\\"Sorted List: {sorted_list}\\")"},{"question":"Write a Python function that takes a list of tuples, where each tuple contains student names and their scores in an exam. The function should return a dictionary that maps each student\'s name to their average score over the tuples provided. Ensure to handle cases where a student\'s name appears multiple times with different scores. The function should output: ``` dict: A dictionary where keys are student names and values are their average scores. ``` You should write self-contained code starting with: ``` def calculate_averages(student_scores): ```","solution":"def calculate_averages(student_scores): Takes a list of tuples with student names and their scores, and returns a dictionary mapping each student\'s name to their average score. score_dict = {} count_dict = {} for name, score in student_scores: if name not in score_dict: score_dict[name] = 0 count_dict[name] = 0 score_dict[name] += score count_dict[name] += 1 average_dict = {name: score_dict[name] / count_dict[name] for name in score_dict} return average_dict"},{"question":"In this problem, you need to create a function `generate_spiral_image(filename)` that takes a filename of a text file as input. The file contains a grid of numbers, where each number is separated by white spaces and each row is on a new line. The function should perform the following tasks: 1. Read the grid data from the file. 2. Parse the data and store it in a 2D list (a list of lists). 3. Generate an image of the grid in a spiral order, starting from the top-left corner and moving right, then down, then left, and then up, repeating this until all numbers are included in the spiral. The function should display the resulting image using Matplotlib. Assign different colors based on the value ranges: - Values less than 0 should be shown in red. - Values between 0 and 50 should be shown in green. - Values greater than 50 should be shown in blue. Here is the signature for the function you need to implement: ```python import numpy as np import matplotlib.pyplot as plt def generate_spiral_image(filename): # Your code goes here pass ``` Example usage: ```python generate_spiral_image(\'grid_data.txt\') ``` Example content of `grid_data.txt`: ``` 34 78 2 54 23 90 11 45 10 44 20 60 5 72 66 35 ``` When this file is read and processed by your function, the resulting image should represent the grid in a spiral order, colored according to the specified value ranges. To achieve this, you will need to: - Read the grid data from the file. - Implement an algorithm to retrieve the elements in a spiral order. - Use Matplotlib to plot the values with the appropriate colors.","solution":"import numpy as np import matplotlib.pyplot as plt def read_grid_from_file(filename): with open(filename, \'r\') as file: lines = file.readlines() grid = [list(map(int, line.split())) for line in lines] return grid def get_spiral_order(grid): spiral_order = [] if not grid: return spiral_order top, bottom, left, right = 0, len(grid) - 1, 0, len(grid[0]) - 1 while top <= bottom and left <= right: for i in range(left, right + 1): spiral_order.append(grid[top][i]) top += 1 for i in range(top, bottom + 1): spiral_order.append(grid[i][right]) right -= 1 if top <= bottom: for i in range(right, left - 1, -1): spiral_order.append(grid[bottom][i]) bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): spiral_order.append(grid[i][left]) left += 1 return spiral_order def generate_spiral_image(filename): grid = read_grid_from_file(filename) spiral_order = get_spiral_order(grid) n = len(grid) m = len(grid[0]) idx = 0 spiral_grid = [[0]*m for _ in range(n)] top, bottom, left, right = 0, n - 1, 0, m - 1 while top <= bottom and left <= right: for i in range(left, right + 1): spiral_grid[top][i] = spiral_order[idx] idx += 1 top += 1 for i in range(top, bottom + 1): spiral_grid[i][right] = spiral_order[idx] idx += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): spiral_grid[bottom][i] = spiral_order[idx] idx += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): spiral_grid[i][left] = spiral_order[idx] idx += 1 left += 1 colors = {\'red\': [], \'green\': [], \'blue\': []} for i in range(n): for j in range(m): value = spiral_grid[i][j] colors[\'red\'].append(0 if value >= 0 else 1) colors[\'green\'].append(1 if 0 <= value <= 50 else 0) colors[\'blue\'].append(1 if value > 50 else 0) plt.imshow(np.array([colors[\'red\'], colors[\'green\'], colors[\'blue\']]).T.reshape(n, m, 3), interpolation=\'nearest\') plt.show()"},{"question":"In this problem, you are required to implement a function that returns the n-th Fibonacci number using matrix exponentiation. You should only use matrix operations and logarithmic time complexity techniques to ensure the function is efficient for large values of n. Traditional iterative or recursive methods, or memoization approaches are not allowed; you must use matrix exponentiation specifically. The Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Below is the desired function signature: ```python def matrix_fibonacci(n): Return the n-th Fibonacci number using matrix exponentiation. Usage: >>> matrix_fibonacci(10) 55 Returns: int: The n-th Fibonacci number. ``` Requirements: - Implement the function without using traditional loop-based or recursion-based approaches. - Matrix exponentiation should be used to achieve O(log n) time complexity. - You may utilize Python libraries for matrix operations, but stick to the requirement of solving using matrix exponentiation. **Example**: ```python >>> matrix_fibonacci(10) 55 ```","solution":"def matrix_multiply(A, B): return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrix_power(matrix, n): result = [[1, 0], [0, 1]] # Identity matrix base = matrix while n > 0: if n % 2 == 1: result = matrix_multiply(result, base) base = matrix_multiply(base, base) n //= 2 return result def matrix_fibonacci(n): Return the n-th Fibonacci number using matrix exponentiation. Args: - n (int): The index of the Fibonacci number to return. Returns: - int: The n-th Fibonacci number. if n == 0: return 0 elif n == 1: return 1 # Transformation matrix F = [[1, 1], [1, 0]] # (F^(n-1))[0][0] will give us Fn result = matrix_power(F, n-1) return result[0][0]"},{"question":"You have been assigned to create a cache mechanism for storing the results of expensive function calls to improve performance using a Least Recently Used (LRU) caching technique. Your objective is to implement a class called `LRUCache` which adheres to the following specifications: # Key Requirements: 1. **Class Name**: `LRUCache` 2. **Constructor**: The constructor should accept a single parameter `capacity` which defines the maximum number of items that can be stored in the cache. 3. **Methods**: - `get(key)`: - Retrieves the value of the key if it exists in the cache. - Moves the key to the front (most recently used) if it exists. - Returns -1 if the key does not exist. - `put(key, value)`: - Inserts or updates the value if the key exists. - Moves the key to the front (most recently used). - If the number of keys exceeds the capacity, evict the least recently used key. 4. **Data Structure**: Use a combination of a dictionary and a doubly linked list to achieve average time complexity of O(1) for both `get` and `put` methods. # Example Usage: Once `LRUCache` is implemented: ```python cache = LRUCache(2) # Capacity: 2 cache.put(1, 1) cache.put(2, 2) assert cache.get(1) == 1 # returns 1 and moves key 1 to the front cache.put(3, 3) # evicts key 2 and adds key 3 assert cache.get(2) == -1 # returns -1 (not found) cache.put(4, 4) # evicts key 1 and adds key 4 assert cache.get(1) == -1 # returns -1 (not found) assert cache.get(3) == 3 # returns 3 and moves key 3 to the front assert cache.get(4) == 4 # returns 4 and moves key 4 to the front ``` Implement the `LRUCache` class as described.","solution":"class Node: def __init__(self, key, value): self.key = key self.value = value self.prev = None self.next = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} self.head = Node(0, 0) # Dummy head self.tail = Node(0, 0) # Dummy tail self.head.next = self.tail self.tail.prev = self.head def _remove(self, node): prev = node.prev next = node.next prev.next = next next.prev = prev def _add(self, node): prev = self.head next = self.head.next prev.next = node node.prev = prev node.next = next next.prev = node def get(self, key: int) -> int: if key in self.cache: node = self.cache[key] self._remove(node) self._add(node) return node.value return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self._remove(self.cache[key]) node = Node(key, value) self._add(node) self.cache[key] = node if len(self.cache) > self.capacity: # remove from the tail lru = self.tail.prev self._remove(lru) del self.cache[lru.key]"},{"question":"You are tasked with writing a function called `most_frequent_words` that takes a list of words and returns another list containing the words that appear most frequently. If multiple words have the same highest frequency, return all of them in alphabetical order. The function signature should be: ```python from typing import List def most_frequent_words(words: List[str]) -> List[str]: pass ``` **Parameters:** - `words` (List[str]): A list of words represented as strings. **Returns:** - A list of strings containing the most frequent words in alphabetical order. **Constraints:** - The function should consider words case-insensitively, meaning \'Word\' and \'word\' are treated as the same word. - The input list can contain words composed of alphabetic characters only. **Examples:** ```python words = [\\"apple\\", \\"banana\\", \\"Apple\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"BANANA\\"] print(most_frequent_words(words)) # Output: [\'apple\', \'banana\'] ``` Write your function to achieve this behavior, ensuring you normalize the case for comparison and sorting.","solution":"from typing import List from collections import Counter def most_frequent_words(words: List[str]) -> List[str]: # Normalize words to lower case normalized_words = [word.lower() for word in words] # Count the frequency of each word word_count = Counter(normalized_words) # Determine the highest frequency highest_frequency = max(word_count.values(), default=0) # Collect words with the highest frequency most_frequent = [word for word, count in word_count.items() if count == highest_frequency] # Sort the result alphabetically return sorted(most_frequent)"},{"question":"You are to write a function `copy_if_prime` that takes an input list of integers and returns a new list containing only the prime numbers from the input list. The prime number detection in this function should be efficient and educational for understanding prime number logic. The function should be defined as follows: ```python def copy_if_prime(numbers): \'\'\' numbers : list of integers Returns : list of prime numbers from the given list \'\'\' ``` **Function Logic:** 1. Define a helper function `is_prime` to check if a given number is prime. 2. In the `is_prime` function, handle edge cases for numbers less than 2. 3. For numbers greater than 2, use a loop to check divisibility from 2 to the square root of the number. 4. Use the `is_prime` function within `copy_if_prime` to filter the input list. 5. Return the new list of prime numbers. **Example Usage:** ```python print(copy_if_prime([10, 15, 17, 19, 20])) # Should return [17, 19] as both are prime print(copy_if_prime([4, 6, 8, 9, 10])) # Should return [] as there are no prime numbers ``` Ensure that your function is optimized properly to avoid unnecessary computations and can handle reasonably large input lists efficiently.","solution":"def copy_if_prime(numbers): Returns a new list containing only the prime numbers from the input list. Parameters: numbers (list of int): The list of integers to filter. Returns: list of int: A list containing only the prime numbers from the input list. def is_prime(n): Checks if a number is prime. Parameters: n (int): The number to check. Returns: bool: True if the number is prime, False otherwise. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # No other even number can be a prime # Check factors up to the square root of n for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True return [num for num in numbers if is_prime(num)]"},{"question":"In this exercise, you will implement a function to process a text file containing log entries and extract specific information. Each log entry consists of a timestamp, a logging level, and a message. Your task is to write a function called `extract_error_logs` that reads the input log file, filters out the log entries with the `ERROR` level, and writes those entries to a new log file. # Function Signature ```python def extract_error_logs(input_log: str, output_log: str) -> None: # Your code here ``` # Parameters - `input_log` (str): The path to the input log file. - `output_log` (str): The path to the output log file where the filtered log entries will be written. # Requirements 1. Read the input log file line by line. 2. Filter out log entries that contain the `ERROR` logging level. 3. Write the filtered log entries to the output log file. # Example Consider the following input log file named `app.log`: ``` 2023-03-15 10:00:00 INFO Starting application 2023-03-15 10:05:23 WARN Low memory 2023-03-15 10:10:45 ERROR Out of memory 2023-03-15 10:15:00 INFO Shutting down 2023-03-15 10:20:33 ERROR Failed to save state ``` If you run `extract_error_logs(\'app.log\', \'error.log\')`, the `error.log` should contain: ``` 2023-03-15 10:10:45 ERROR Out of memory 2023-03-15 10:20:33 ERROR Failed to save state ``` # Additional Notes - Log entries are guaranteed to follow the format shown in the example, with a fixed position for the logging level. - Ensure that the function handles large log files efficiently.","solution":"def extract_error_logs(input_log: str, output_log: str) -> None: Extract log entries with the ERROR logging level from the input log file and write them to the output log file. Parameters: - input_log (str): The path to the input log file. - output_log (str): The path to the output log file where the filtered log entries will be written. with open(input_log, \'r\') as infile, open(output_log, \'w\') as outfile: for line in infile: if \\"ERROR\\" in line: outfile.write(line)"},{"question":"You are tasked with creating a function `rotate_and_flatten` that takes a 2D numpy array `matrix` and an integer `steps` as parameters. The objective of the `rotate_and_flatten` function is to rotate the matrix 90 degrees clockwise for a specified number of steps and then flatten the matrix into a 1D array. In this problem, you\'ll need to perform the following steps: 1. Rotate the matrix 90 degrees clockwise `steps` times. 2. Flatten the rotated matrix into a 1D array. Make sure to use the `numpy.rot90` and `numpy.flatten` functions to perform these operations. **Function Signature:** ```python def rotate_and_flatten(matrix, steps): pass ``` **Parameters:** - `matrix` (numpy.ndarray): A 2D numpy array that needs to be rotated and flattened. - `steps` (int): The number of times the matrix should be rotated 90 degrees clockwise. **Returns:** - `numpy.ndarray`: A 1D numpy array created by flattening the rotated matrix. **Example:** ```python import numpy as np matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) steps = 1 result = rotate_and_flatten(matrix, steps) ``` For the provided example: - After one 90 degrees clockwise rotation, the matrix will be: ``` array([[7, 4, 1], [8, 5, 2], [9, 6, 3]]) ``` - The flattened array will be: ``` array([7, 4, 1, 8, 5, 2, 9, 6, 3]) ``` Ensure to use `numpy.rot90` (with the appropriate parameters) to rotate the matrix and `numpy.flatten` to convert it to a 1D array.","solution":"import numpy as np def rotate_and_flatten(matrix, steps): Rotates the matrix 90 degrees clockwise \'steps\' times and flattens it into a 1D array. Parameters: matrix (numpy.ndarray): A 2D numpy array that needs to be rotated and flattened. steps (int): The number of times the matrix should be rotated 90 degrees clockwise. Returns: numpy.ndarray: A 1D numpy array created by flattening the rotated matrix. # Rotate the matrix 90 degrees clockwise \'steps\' times rotated_matrix = np.rot90(matrix, -steps) # Flatten the rotated matrix into a 1D array flattened_array = rotated_matrix.flatten() return flattened_array"},{"question":"You are tasked with developing a function to evaluate the performance of a Random Forest Classifier on a given dataset. Your function should: 1. Split the dataset into training and testing sets. 2. Train a Random Forest Classifier on the training data. 3. Make predictions on the test data. 4. Compute and print the precision, recall, F1 score, and confusion matrix. 5. Use cross-validation to determine the model\'s average accuracy, precision, recall, and F1 score. The data will be provided as inputs to the function. Using the `sklearn` library functions `train_test_split`, `RandomForestClassifier`, `confusion_matrix`, `classification_report`, and `cross_val_score`, implement the following function: ```python def evaluate_random_forest(x, y, test_size=0.3, random_state=42): # Function implementation goes here return ``` Your function should: - Accept a feature matrix `x` and a target vector `y`. - Split the data into training and testing sets with the specified `test_size` and `random_state`. - Train a Random Forest Classifier on the training data. - Make predictions on the testing data. - Calculate and print the precision, recall, F1 score, and confusion matrix. - Print the classification report. - Apply 10-fold cross-validation to evaluate the model and print the cross-validation results for accuracy, precision, recall, and F1 score. # Example use of the function: ```python from sklearn.datasets import load_iris data = load_iris() x = data.data y = data.target # Example function call evaluate_random_forest(x, y, test_size=0.3, random_state=42) ``` # Expected Output: Your function should print precision, recall, F1 score, confusion matrix, classification report, and cross-validation results for accuracy, precision, recall, and F1 score. # Libraries to be used: - `sklearn.ensemble.RandomForestClassifier` - `sklearn.metrics.confusion_matrix` - `sklearn.metrics.classification_report` - `sklearn.model_selection.train_test_split` - `sklearn.model_selection.cross_val_score` ```python def evaluate_random_forest(x, y, test_size=0.3, random_state=42): # Your implementation here ```","solution":"from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import confusion_matrix, classification_report, precision_score, recall_score, f1_score from sklearn.model_selection import train_test_split, cross_val_score import numpy as np def evaluate_random_forest(x, y, test_size=0.3, random_state=42): # Split the data into training and testing sets x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_state) # Train a Random Forest Classifier on the training data clf = RandomForestClassifier(random_state=random_state) clf.fit(x_train, y_train) # Make predictions on the test data y_pred = clf.predict(x_test) # Compute precision, recall, F1 score, and confusion matrix precision = precision_score(y_test, y_pred, average=\'weighted\') recall = recall_score(y_test, y_pred, average=\'weighted\') f1 = f1_score(y_test, y_pred, average=\'weighted\') conf_matrix = confusion_matrix(y_test, y_pred) # Print the classification report print(\\"Classification Report:\\") print(classification_report(y_test, y_pred)) # Print the confusion matrix, precision, recall, F1 score print(f\\"Confusion Matrix:n {conf_matrix}\\") print(f\\"Precision: {precision}\\") print(f\\"Recall: {recall}\\") print(f\\"F1 Score: {f1}\\") # Apply 10-fold cross-validation accuracy_cv = cross_val_score(clf, x, y, cv=10, scoring=\'accuracy\') precision_cv = cross_val_score(clf, x, y, cv=10, scoring=\'precision_weighted\') recall_cv = cross_val_score(clf, x, y, cv=10, scoring=\'recall_weighted\') f1_cv = cross_val_score(clf, x, y, cv=10, scoring=\'f1_weighted\') # Print the cross-validation results print(f\\"Cross-validation Accuracy: {np.mean(accuracy_cv)}\\") print(f\\"Cross-validation Precision: {np.mean(precision_cv)}\\") print(f\\"Cross-validation Recall: {np.mean(recall_cv)}\\") print(f\\"Cross-validation F1 Score: {np.mean(f1_cv)}\\")"},{"question":"Develop a function called `matrix_operations` that performs several operations on a given matrix using the NumPy library. The function should compute the transpose, the matrix trace (sum of the diagonal elements), and the sum of all its elements. Additionally, provide a helper function `output` to print the results of these operations. # Input: 1. `matrix`: A 2D numpy array with numerical values. # Output: - Print the results of the following operations: 1. The original matrix. 2. The transposed matrix. 3. The trace of the matrix. 4. The sum of all elements in the matrix. # Function Signature ```python def matrix_operations(matrix): # Your code here def output(message=\'\'): print(message) ``` Example: Given the following input: ```python matrix = np.array([[1, 2], [3, 4]], dtype=int) ``` Output: ``` Original matrix: [[1, 2], [3, 4]] Transposed matrix: [[1, 3], [2, 4]] Trace of the matrix: 5 Sum of all elements in the matrix: 10 ``` Requirements: 1. Use the `numpy.transpose` function to compute the transposed matrix. 2. Use the `numpy.trace` function to calculate the matrix trace. 3. Use the `numpy.sum` function to compute the sum of all matrix elements. Ensure that your function correctly logs the required information and adheres to the standard of the specified library APIs.","solution":"import numpy as np def matrix_operations(matrix): # Original matrix original_matrix = matrix # Transposed matrix transposed_matrix = np.transpose(matrix) # Trace of the matrix matrix_trace = np.trace(matrix) # Sum of all elements in the matrix matrix_sum = np.sum(matrix) # Output results output(f\\"Original matrix: {original_matrix}\\") output(f\\"Transposed matrix: {transposed_matrix}\\") output(f\\"Trace of the matrix: {matrix_trace}\\") output(f\\"Sum of all elements in the matrix: {matrix_sum}\\") def output(message=\'\'): print(message)"},{"question":"In this problem, you need to write a function that checks if a given string follows a specific pattern. The string will consist of English lowercase letters and spaces, and the pattern will be a string of lowercase letters where each letter in the pattern maps to a unique word in the string. For example, in the pattern \\"abba\\", the first and last characters are \'a\' and the middle two characters are \'b\'. The words in the string \\"dog cat cat dog\\" should follow the same positioning to successfully match the pattern \\"abba\\". In this case, \'a\' corresponds to \\"dog\\" and \'b\' corresponds to \\"cat\\". You are required to implement the function `follows_pattern(pattern: str, s: str) -> bool` that returns `True` if `s` follows the pattern `pattern` and `False` otherwise. **Function Signature:** ```python def follows_pattern(pattern: str, s: str) -> bool: pass ``` # Example: ```python # Example 1: print(follows_pattern(\\"abba\\", \\"dog cat cat dog\\")) # Output: True # Example 2: print(follows_pattern(\\"abba\\", \\"dog cat cat fish\\")) # Output: False # Example 3: print(follows_pattern(\\"aaaa\\", \\"dog cat cat dog\\")) # Output: False # Example 4: print(follows_pattern(\\"abba\\", \\"dog dog dog dog\\")) # Output: False ``` # Constraints: - The input pattern and string `s` are non-empty and consist of lowercase letters and spaces. - `s` does not contain any leading or trailing spaces. - `s` contains at least one word and each word is separated by a single space. # Plan: 1. Split the string `s` into words using the space delimiter. 2. Check if the number of characters in the pattern matches the number of words in the string `s`. 3. Use two dictionaries to map the pattern characters to words and vice versa to ensure that each character in the pattern corresponds to a unique word and vice versa. 4. Verify the mappings to return `True` if the string `s` follows the pattern `pattern`, else return `False`.","solution":"def follows_pattern(pattern: str, s: str) -> bool: Checks if the string `s` follows the pattern `pattern`. Parameters: - pattern (str): The pattern to be followed. - s (str): The string to be checked against the pattern. Returns: - bool: True if `s` follows the pattern `pattern`, otherwise False. words = s.split() # Early exit if lengths do not match if len(pattern) != len(words): return False # Maps to track the pattern-character to word mapping and vice versa char_to_word = {} word_to_char = {} for char, word in zip(pattern, words): if char in char_to_word: if char_to_word[char] != word: return False else: char_to_word[char] = word if word in word_to_char: if word_to_char[word] != char: return False else: word_to_char[word] = char return True"},{"question":"** Create a function named `validate_html_tags` that checks whether the provided HTML code string has properly nested and matched tags. This task involves ensuring that every opening tag has a corresponding closing tag in the correct order. # Function Signature ```python def validate_html_tags(html: str) -> bool: pass ``` # Input - `html` (str): A string containing the HTML code. The HTML tags are in the format `<tagname>` for opening tags and `</tagname>` for closing tags. Tags are case-sensitive and can be empty like `<img/>`. # Output - (bool): A boolean value, `True` if the tags are properly nested and matched, otherwise `False`. # Example ```python html = \\"<div><p>Sample text</p></div>\\" print(validate_html_tags(html)) # Output: True html = \\"<div><p>Sample text</div></p>\\" print(validate_html_tags(html)) # Output: False html = \\"<div><p>Sample <img/> text</p></div>\\" print(validate_html_tags(html)) # Output: True html = \\"<div><p></div></p>\\" print(validate_html_tags(html)) # Output: False ``` # Requirements - Utilize a stack data structure to help with the validation. - Properly handle self-closing tags like `<img/>`. - Assume that provided HTML string does not have any attributes within the tags. **","solution":"def validate_html_tags(html: str) -> bool: Validates if the provided HTML code string has properly nested and matched tags. Args: html (str): A string containing the HTML code. Returns: bool: True if the tags are properly nested and matched, otherwise False. import re # Regular expression to match opening, closing, and self-closing tags tag_pattern = re.compile(r\'<(/?)(w+)(/?)>\') stack = [] for match in tag_pattern.finditer(html): closing_slash, tag_name, self_closing_slash = match.groups() if self_closing_slash: # for self-closing tag like <img/> continue if closing_slash: # for closing tag like </div> if not stack or stack[-1] != tag_name: return False stack.pop() else: # for opening tag like <div> stack.append(tag_name) return len(stack) == 0"},{"question":"You are required to design a function `validate_and_combine_lists(list1: list, list2: list, min_length: int, value_type: type) -> list` that validates and combines two input lists based on the specified criteria. The function should take four parameters: 1. `list1`: The first list to be validated and combined. 2. `list2`: The second list to be validated and combined. 3. `min_length`: An integer that specifies the minimum length that each list must have for the combination to proceed. 4. `value_type`: The type that all elements in both lists must conform to (e.g., `int`, `str`). The function should perform the following tasks: - Validate that both `list1` and `list2` have lengths greater than or equal to `min_length`. - If either list does not meet the minimum length requirement, return the message `\\"One or both lists do not meet the minimum length requirement.\\"`. - Validate that every element in `list1` and `list2` is of the type specified by `value_type`. - If any element does not match the specified type, return the message `\\"List contains elements of the wrong type.\\"`. - If both lists pass the validation checks, combine the two lists into one and return the combined list. # Example: ```python list1 = [1, 2, 3] list2 = [4, 5, 6] min_length = 3 value_type = int print(validate_and_combine_lists(list1, list2, min_length, value_type)) ``` Output: ```python [1, 2, 3, 4, 5, 6] ``` # Example: ```python list1 = [\\"a\\", \\"b\\"] list2 = [\\"c\\", \\"d\\", \\"e\\"] min_length = 3 value_type = str print(validate_and_combine_lists(list1, list2, min_length, value_type)) ``` Output: ```python \\"One or both lists do not meet the minimum length requirement.\\" ``` # Example: ```python list1 = [1, 2, \\"three\\"] list2 = [4, 5, 6] min_length = 3 value_type = int print(validate_and_combine_lists(list1, list2, min_length, value_type)) ``` Output: ```python \\"List contains elements of the wrong type.\\" ``` # Constraints: - The elements of the lists must be checked using the `isinstance` function to ensure type conformity. - The function should handle different list content types, as specified by `value_type`.","solution":"def validate_and_combine_lists(list1, list2, min_length, value_type): Validates and combines two lists based on minimum length and element type. Parameters: - list1: The first list to be validated and combined. - list2: The second list to be validated and combined. - min_length: The minimum length that each list must have for the combination to proceed. - value_type: The type that all elements in both lists must conform to. Returns: - A combined list if both lists pass the validation checks. - A string message indicating the failed validation. if len(list1) < min_length or len(list2) < min_length: return \\"One or both lists do not meet the minimum length requirement.\\" if not all(isinstance(item, value_type) for item in list1) or not all(isinstance(item, value_type) for item in list2): return \\"List contains elements of the wrong type.\\" return list1 + list2"},{"question":"You are tasked to write a Python function called `track_inventory` that maintains an inventory system for a small store. The function should allow adding items to the inventory, updating their quantities, and checking current stock levels. # Function Requirements 1. The function `track_inventory` should accept three parameters: - `action`: a string which can be either `\\"add\\"`, `\\"update\\"`, or `\\"check\\"`. - `item_name`: a string representing the name of the item. - `quantity`: an integer representing the quantity of the item. This parameter is optional but should default to `0`. 2. The function should: - Maintain a global dictionary `inventory` where the keys are item names and the values are their quantities. - For the action `\\"add\\"`: If the item already exists in the inventory, print an error message `\\"Item already exists\\"`. Otherwise, add the item to the inventory with the specified quantity. - For the action `\\"update\\"`: If the item does not exist in the inventory, print an error message `\\"Item not found\\"`. Otherwise, update the item\'s quantity by adding the specified quantity (note that the quantity can be negative, which represents selling or using up items). - For the action `\\"check\\"`: If the item does not exist in the inventory, print an error message `\\"Item not found\\"`. Otherwise, print the current quantity of the item. - Raise a `ValueError` if the `action` parameter is not one of `\\"add\\"`, `\\"update\\"`, or `\\"check\\"`. 3. The function should ensure that it does not allow negative stock quantities. If an update action results in a negative quantity, print an error message `\\"Insufficient stock\\"` and do not update the inventory. # Global Variable Define the following global variable: - `inventory`: a dictionary to store item names and their corresponding quantities. # Example Calls ```python # Define Global Variable inventory = {} # Example Usage track_inventory(\\"add\\", \\"apples\\", 50) # Adds 50 apples to the inventory. track_inventory(\\"update\\", \\"apples\\", -10) # Reduces the quantity of apples by 10. track_inventory(\\"check\\", \\"apples\\") # Prints the current stock level of apples. ``` # Objective By solving this problem, you will learn how to manage a global inventory using dictionary data structures and handle simple inventory actions like adding, updating, and checking stock levels. # Constraints - The quantity provided should be a non-negative integer. - The item names are case-sensitive. - The function should handle invalid action inputs gracefully using exceptions.","solution":"# Define Global Variable inventory = {} def track_inventory(action, item_name, quantity=0): Maintains an inventory system for a small store. Parameters: - action: string which can be either \\"add\\", \\"update\\", or \\"check\\". - item_name: string representing the name of the item. - quantity: integer representing the quantity of the item (optional, default is 0). global inventory if action not in {\\"add\\", \\"update\\", \\"check\\"}: raise ValueError(\\"Invalid action\\") if action == \\"add\\": if item_name in inventory: print(\\"Item already exists\\") else: inventory[item_name] = quantity elif action == \\"update\\": if item_name not in inventory: print(\\"Item not found\\") else: new_quantity = inventory[item_name] + quantity if new_quantity < 0: print(\\"Insufficient stock\\") else: inventory[item_name] = new_quantity elif action == \\"check\\": if item_name not in inventory: print(\\"Item not found\\") else: print(f\\"Current quantity of {item_name}: {inventory[item_name]}\\")"},{"question":"You are given a list of transactions, each representing a purchase made by a customer. Each transaction is represented as a tuple containing the name of the customer, the item purchased, and the amount spent. Your task is to write a function that calculates the total amount spent by each customer and returns a dictionary where the keys are the customer names and the values are the total amounts spent by those customers. **Function Specification:** - **Function Name:** `calculateTotalSpent` - **Input Parameters:** - `transactions`: A list of tuples. Each tuple contains: - `customer`: String representing the customer\'s name. - `item`: String representing the item purchased. - `amount`: Float representing the amount spent. - **Output:** A dictionary where the keys are the customer names (strings) and the values are the total amounts spent (floats). **Example:** If the input data is: ```python transactions = [ (\\"Alice\\", \\"Apple\\", 5.5), (\\"Bob\\", \\"Banana\\", 3.0), (\\"Alice\\", \\"Banana\\", 2.5), (\\"Bob\\", \\"Apple\\", 4.0), (\\"Cathy\\", \\"Carrot\\", 4.5) ] ``` Then calling `calculateTotalSpent(transactions)` should return: ```python {\'Alice\': 8.0, \'Bob\': 7.0, \'Cathy\': 4.5} ``` **Constraints:** - The input list can contain multiple transactions for the same customer. - The output dictionary should not contain entries for customers who did not make any purchases. - You should handle cases where the same customer, item, and amount appear multiple times in the input list. - You can assume that the transactions list is not empty. **Requirements:** - You must use a dictionary to aggregate the total amounts spent by each customer. - You should leverage appropriate methods to handle potential issues such as duplicate transactions.","solution":"def calculateTotalSpent(transactions): Calculate the total amount spent by each customer. Parameters: transactions (list of tuples): Each tuple contains the customer\'s name (str), the item (str) and the amount spent (float). Returns: dict: A dictionary where the keys are customer names and the values are the total amounts spent. total_spent = {} for customer, item, amount in transactions: if customer in total_spent: total_spent[customer] += amount else: total_spent[customer] = amount return total_spent"},{"question":"In this problem, you are asked to implement a K-Nearest Neighbors (KNN) classifier in Scikit-learn. Specifically, you will: 1. Train a KNN model with 5 neighbors. 2. Normalize the data before training. 3. Make predictions on test data. 4. Evaluate the model using accuracy, precision, recall, and F1-score. You must complete the function `knn_classifier` which takes four arguments: - `X_train`: Training features matrix - `X_test`: Testing features matrix - `y_train`: Training labels vector - `y_test`: Testing labels vector The function should: 1. Normalize `X_train` and `X_test` using `StandardScaler` from `sklearn.preprocessing`. 2. Create an instance of `KNeighborsClassifier` with `n_neighbors=5`. 3. Fit the model using `X_train` and `y_train`. 4. Predict the labels for `X_test`. 5. Print the accuracy, precision, recall, and F1-score using appropriate functions from `sklearn.metrics`. 6. Print the score of the trained model on the training data. # Function Signature: ```python def knn_classifier(X_train, X_test, y_train, y_test): pass ``` # Example: ```python # Assuming the required libraries are imported X_train, X_test, y_train, y_test = some_data_loading_function() knn_classifier(X_train, X_test, y_train, y_test) ``` This is intended to teach you how to use Scikit-Learn\'s `KNeighborsClassifier`, normalize data, and evaluate the model\'s performance using various metrics from `sklearn.metrics`.","solution":"from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score def knn_classifier(X_train, X_test, y_train, y_test): Train a KNN classifier with 5 neighbors and evaluate it on test data. # Normalize the data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Create and train the KNN classifier knn = KNeighborsClassifier(n_neighbors=5) knn.fit(X_train, y_train) # Predict the labels for the test set y_pred = knn.predict(X_test) # Evaluate the model accuracy = accuracy_score(y_test, y_pred) precision = precision_score(y_test, y_pred, average=\'weighted\') recall = recall_score(y_test, y_pred, average=\'weighted\') f1 = f1_score(y_test, y_pred, average=\'weighted\') # Print evaluation results print(f\'Accuracy: {accuracy:.2f}\') print(f\'Precision: {precision:.2f}\') print(f\'Recall: {recall:.2f}\') print(f\'F1-score: {f1:.2f}\') # Print score of the trained model on the training data train_score = knn.score(X_train, y_train) print(f\'Training Score: {train_score:.2f}\')"},{"question":"In many real-world applications, we need to manipulate matrices. A common task is to determine if a given matrix is symmetric. A matrix is symmetric if it is equal to its transpose. In other words, for a matrix `A`, it is symmetric if for all `i` and `j`, `A[i][j]` == `A[j][i]`. # Problem: Write a function `is_symmetric_matrix` that takes a square matrix (a list of lists) as input and returns a boolean indicating whether or not the matrix is symmetric. # Function Signature: ```python def is_symmetric_matrix(matrix): pass ``` # Parameters: - `matrix (list of list of ints or floats)`: A square matrix represented as a list of lists, where each inner list represents a row of the matrix. # Returns: - `bool`: `True` if the matrix is symmetric; otherwise, `False`. # Example: ```python matrix1 = [ [1, 2, 3], [2, 4, 5], [3, 5, 6] ] result1 = is_symmetric_matrix(matrix1) # Expected Output: True matrix2 = [ [1, 0, 0], [0, 1, 1], [0, 2, 1] ] result2 = is_symmetric_matrix(matrix2) # Expected Output: False ``` # Notes: - Ensure the matrix is square (has the same number of rows and columns) before checking for symmetry. - Pay attention to edge cases, such as an empty matrix or a 1x1 matrix. - Avoid using built-in functions such as `numpy` to implement the solution. Perform the checks manually by iterating over the matrix elements.","solution":"def is_symmetric_matrix(matrix): Checks if a square matrix is symmetric. Parameters: matrix (list of list of ints or floats): A square matrix. Returns: bool: True if the matrix is symmetric, False otherwise. n = len(matrix) # Check if the matrix is square for row in matrix: if len(row) != n: return False # Check symmetry for i in range(n): for j in range(i, n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"# Problem: Implement Custom String Index Of Function In this exercise, you need to create a custom implementation of a substring search within a string, similar to the built-in `index()` method in Python. This challenge will familiarize you with string manipulation and nested loops. The function you need to implement is: ```python def custom_index_of(main_string, substring, start=0): Find the index of the first occurrence of a substring within a main string. Parameters: main_string (str): The string to search within. substring (str): The string to search for. start (int): The position to start the search from (default is 0). Returns: int: The index of the first occurrence of substring in main_string starting from the given position. Returns -1 if the substring is not found. ``` # Instructions: 1. **The function should accept a `main_string`, the `substring` to find, and an optional `start` parameter.** - The `start` parameter indicates the position at which to begin the search within the `main_string`. The default value for `start` is 0. 2. **Implement the substring search manually:** - Loop through `main_string` starting at `start`. - For each position in `main_string`, check if the substring starting at that position matches the `substring`. - If a match is found, return the current index. - If no match is found by the end of the string, return -1. # Example: ```python print(custom_index_of(\\"hello world\\", \\"world\\")) # Output: 6 print(custom_index_of(\\"hello world\\", \\"world\\", 7)) # Output: -1 print(custom_index_of(\\"banana\\", \\"an\\")) # Output: 1 print(custom_index_of(\\"banana\\", \\"an\\", 3)) # Output: 3 print(custom_index_of(\\"banana\\", \\"apple\\")) # Output: -1 ``` # Requirements: - Do not use the built-in `str.index()` or `str.find()` methods. - Do not use any other string library methods that perform the same function. - Handle cases where `substring` is longer than `main_string` gracefully. This exercise will help you understand string searching algorithms and reinforce your understanding of nested loops and string manipulation in Python.","solution":"def custom_index_of(main_string, substring, start=0): Find the index of the first occurrence of a substring within a main string. Parameters: main_string (str): The string to search within. substring (str): The string to search for. start (int): The position to start the search from (default is 0). Returns: int: The index of the first occurrence of substring in main_string starting from the given position. Returns -1 if the substring is not found. # Length of main string and substring len_main = len(main_string) len_sub = len(substring) # Return -1 immediately if substring is longer than remaining main_string length if len_sub > len_main - start: return -1 # Loop through the main string starting from \'start\' for i in range(start, len_main - len_sub + 1): # Check if the substring matches from this position if main_string[i:i + len_sub] == substring: return i # If no match found, return -1 return -1"},{"question":"You are given a CSV file containing information about various products in a store. The CSV file has three columns: `product_id` (indicating the unique identifier for each product), `price` (indicating the price of the product), and `quantity_sold` (indicating the number of items sold for that product). Your task is to write a function named `calculate_total_revenue` that reads this CSV file, extracts the relevant columns, and calculates the total revenue generated from all the products. Specifically, the function `calculate_total_revenue(file_name)` should: 1. Read the data from a CSV file specified by `file_name`. 2. Extract the `price` and `quantity_sold` columns. 3. Calculate the total revenue by multiplying the `price` of each product by its `quantity_sold` and summing up these values. 4. Return the total revenue as a single number. To handle these tasks, make sure you use the `pandas` library to read the CSV file and perform the necessary data manipulations. **Example:** If the CSV file `product_sales.csv` contains: ``` product_id,price,quantity_sold 101,20.0,30 102,15.5,50 103,22.0,45 ``` Calling `calculate_total_revenue(\'product_sales.csv\')` should return: ```python 1912.5 ``` This value is calculated as: ```python total_revenue = (20.0 * 30) + (15.5 * 50) + (22.0 * 45) = 600 + 775 + 990 = 2365 ``` **Note:** Your implementation should properly handle the CSV file reading, data extraction, and revenue calculation as specified. Ensure you have correctly imported the necessary libraries (`pandas`).","solution":"import pandas as pd def calculate_total_revenue(file_name): Reads the CSV file specified by file_name, extracts the price and quantity_sold columns, calculates the total revenue, and returns the total revenue as a single number. :param file_name: Name of the CSV file to read. :return: Total revenue generated from all the products. # Read the CSV file data = pd.read_csv(file_name) # Extract the price and quantity_sold columns prices = data[\'price\'] quantities_sold = data[\'quantity_sold\'] # Calculate the total revenue total_revenue = (prices * quantities_sold).sum() return total_revenue"},{"question":"You are given a list of strings where each string represents a mathematical expression in Reverse Polish Notation (RPN). Reverse Polish Notation is a mathematical notation in which operators follow their operands. Implement a function called `evaluate_rpn_expressions` that takes a list of RPN expressions and returns a list of their evaluations as integers. The supported operators are: `+`, `-`, `*` and `/`. It is guaranteed that each input expression is valid and all intermediate results will be integers. The function signature should be: ```python def evaluate_rpn_expressions(expressions: List[str]) -> List[int]: pass ``` **Inputs:** - `expressions`: A list of strings where each string is an RPN expression. **Output:** - A list of integers representing the evaluated result of each RPN expression in the input list. Each RPN expression is structured such that the operands are integers and the operators are one of `+`, `-`, `*`, or `/`. The division operator `/` should perform integer division (i.e., it should truncate towards zero). Here\'s an example: ```python from typing import List expressions = [ \\"2 1 + 3 *\\", # (2 + 1) * 3 = 9 \\"4 13 5 / +\\", # 4 + (13 / 5) = 6 (since 13 // 5 = 2) \\"10 6 9 3 + -11 * / * 17 + 5 +\\", # ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = 22 ] # Example usage results = evaluate_rpn_expressions(expressions) # Output: [9, 6, 22] ``` Your task is to implement the `evaluate_rpn_expressions` function to correctly evaluate a list of RPN expressions and return their results as integers.","solution":"from typing import List def evaluate_rpn_expression(expression: str) -> int: stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': # integer division with truncation towards zero stack.append(int(a / b)) else: stack.append(int(token)) return stack[0] def evaluate_rpn_expressions(expressions: List[str]) -> List[int]: return [evaluate_rpn_expression(expression) for expression in expressions]"},{"question":"You are given a list of product sales data, where each product has a unique identifier and a number of units sold on a given day. Your task is to create a function named `calculate_cumulative_sales` that computes the cumulative sales for each product over the days provided in the data. The input data is given as a list of tuples, where each tuple consists of a product identifier, a date, and the number of units sold on that date. Create a function named `calculate_cumulative_sales` which performs the following tasks: 1. Parse the input list of tuples. 2. Sort the data by the product identifier and date. 3. For each product, compute the cumulative number of units sold up to and including each date. 4. Return a dictionary where the keys are product identifiers and the values are dataframes. Each dataframe contains two columns: the date and the cumulative units sold up to and including that date. # Function Signature ```python import pandas as pd def calculate_cumulative_sales(sales_data: list) -> dict: pass ``` # Example Input The input sales data might look like: ```python [(\'A\', \'2023-01-01\', 10), (\'B\', \'2023-01-01\', 20), (\'A\', \'2023-01-02\', 5), (\'B\', \'2023-01-03\', 15)] ``` # Example Output The output should be a dictionary where each key is a product identifier and each value is a DataFrame containing the dates and cumulative sales: ```python { \'A\': pd.DataFrame({\'date\': [\'2023-01-01\', \'2023-01-02\'], \'cumulative_sales\': [10, 15]}), \'B\': pd.DataFrame({\'date\': [\'2023-01-01\', \'2023-01-03\'], \'cumulative_sales\': [20, 35]}) } ``` Ensure you use the following functions from the necessary libraries as part of your solution: - `pandas.DataFrame` - `pandas.to_datetime` # Implementation Notes - Handle any potential errors such as empty input data or incorrect date formats gracefully. - Use `pandas` for data manipulation and `datetime` for date parsing where necessary.","solution":"import pandas as pd def calculate_cumulative_sales(sales_data): Calculate the cumulative sales for each product over the days provided in the data. :param sales_data: List of tuples with (product_id, date, units_sold) :return: Dictionary where keys are product identifiers and values are DataFrames with date and cumulative sales. # Initialize a dictionary to store sales data for each product product_sales = {} # Process each record in the sales_data for product_id, date, units_sold in sales_data: # Append the sales record to the respective product\'s data list if product_id not in product_sales: product_sales[product_id] = [] product_sales[product_id].append((date, units_sold)) # Dictionary to hold dataframes with cumulative sales cumulative_sales_dfs = {} # Calculate cumulative sales for each product for product_id, sales in product_sales.items(): # Convert sales data to DataFrame df = pd.DataFrame(sales, columns=[\'date\', \'units_sold\']) # Convert the date column to datetime df[\'date\'] = pd.to_datetime(df[\'date\']) # Sort the dataframe by date df = df.sort_values(by=\'date\') # Calculate cumulative sales df[\'cumulative_sales\'] = df[\'units_sold\'].cumsum() # Store only necessary columns in the resulting dataframe cumulative_sales_dfs[product_id] = df[[\'date\', \'cumulative_sales\']] return cumulative_sales_dfs"},{"question":"You are to write a Python function named `find_anagrams` that takes a list of strings and returns a list of lists, where each sub-list contains strings that are anagrams of each other. Function Signature: ```python def find_anagrams(words: List[str]) -> List[List[str]]: ``` Parameter: - `words`: A list of strings, where each string is a single word. Returns: - A list of lists, where each sub-list contains strings that are anagrams of each other from the input list. Example: ```python print(find_anagrams([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"goggle\\"])) # Should print [[\\"listen\\", \\"silent\\", \\"enlist\\"], [\\"google\\"], [\\"goggle\\"]] ``` In this example, \\"listen\\", \\"silent\\", and \\"enlist\\" are anagrams of each other and are grouped together, while \\"google\\" and \\"goggle\\" have no anagrams in the list and hence are in their own individual sub-lists. Constraints: 1. The length of the list `words` will be between 1 and 1000. 2. Each word in the list contains only lowercase alphabetical characters. 3. The length of each word will be between 1 and 50. # Approach Guidance: 1. Use a dictionary to group words by their sorted character sequences. 2. Iterate through each word, sort its characters, and use the sorted version as the key in the dictionary. 3. Append the original word to the list corresponding to that key. 4. Return the dictionary values as a list of lists. # Key Functions: - `sorted`: Returns a sorted list of characters from the input string. - `join`: Concatenates the sorted list of characters to form the sorted string.","solution":"from typing import List def find_anagrams(words: List[str]) -> List[List[str]]: anagrams = {} for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word in anagrams: anagrams[sorted_word].append(word) else: anagrams[sorted_word] = [word] return list(anagrams.values())"},{"question":"You are required to create a Python function that composes and sends email notifications based on a list of user actions. Each user action contains the user ID, the action performed, and the timestamp of the action. The function should group actions per user and send a single email summarizing all actions performed by that user. Write a function named `send_user_notifications(actions)` that takes a list of dictionaries representing user actions. Each dictionary contains the following keys: - `\'user_id\'`: A unique identifier for the user (an integer). - `\'action\'`: A description of the action performed (a string). - `\'timestamp\'`: The time when the action was performed (a string in ISO 8601 format). The function should: 1. Group actions by `\'user_id\'`. 2. Print a summary email for each user in the format: ``` To: user_<user_id>@example.com Subject: Notification of your recent actions Hello User <user_id>, Here is the summary of your recent actions: - <action> at <timestamp> - <action> at <timestamp> ... Best regards, Your notification system ``` Below is an example usage of the function: ```python def send_user_notifications(actions): # Your implementation here if __name__ == \\"__main__\\": actions = [ {\'user_id\': 1, \'action\': \'Logged in\', \'timestamp\': \'2023-05-01T12:34:56Z\'}, {\'user_id\': 2, \'action\': \'Viewed product\', \'timestamp\': \'2023-05-01T12:35:00Z\'}, {\'user_id\': 1, \'action\': \'Added to cart\', \'timestamp\': \'2023-05-01T12:36:21Z\'}, {\'user_id\': 2, \'action\': \'Logged out\', \'timestamp\': \'2023-05-01T12:40:15Z\'}, ] send_user_notifications(actions) ``` When run, this should print: ``` To: user_1@example.com Subject: Notification of your recent actions Hello User 1, Here is the summary of your recent actions: - Logged in at 2023-05-01T12:34:56Z - Added to cart at 2023-05-01T12:36:21Z Best regards, Your notification system To: user_2@example.com Subject: Notification of your recent actions Hello User 2, Here is the summary of your recent actions: - Viewed product at 2023-05-01T12:35:00Z - Logged out at 2023-05-01T12:40:15Z Best regards, Your notification system ```","solution":"def send_user_notifications(actions): Send notifications summarizing actions performed by each user. :param actions: List of dictionaries with keys \'user_id\', \'action\', \'timestamp\' from collections import defaultdict user_actions = defaultdict(list) # Group actions by user_id for action in actions: user_actions[action[\'user_id\']].append(action) # Send email for each user for user_id, actions in user_actions.items(): print(f\\"To: user_{user_id}@example.com\\") print(\\"Subject: Notification of your recent actions\\") print(\\"\\") print(f\\"Hello User {user_id},\\") print(\\"\\") print(\\"Here is the summary of your recent actions:\\") for action in actions: print(f\\"- {action[\'action\']} at {action[\'timestamp\']}\\") print(\\"\\") print(\\"Best regards,\\") print(\\"Your notification system\\") print(\\"\\")"},{"question":"Given a list of integers and a target sum, write a Python function `pair_sum_exists(lst, target)` that determines if there are any two distinct elements in the list that add up to the given target sum. The function should return `True` if such a pair exists and `False` otherwise. To solve this problem, you can utilize a set to keep track of the numbers you have seen so far as you iterate through the list. For each number in the list, compute the required complement that would sum with the current number to reach the target. If this complement is found in the set, return `True`. If you complete the iteration without finding such a pair, return `False`. Here is the signature of the function you need to implement: ```python def pair_sum_exists(lst, target): # Implementation here ``` **Example Usage:** ```python print(pair_sum_exists([10, 15, 3, 7], 17)) # Should return True since 10 + 7 = 17. print(pair_sum_exists([1, 2, 3, 9], 8)) # Should return False since no pair sums to 8. ``` **Constraints:** - The list will contain at least two integers. - The integers can be positive, negative, or zero. - The function should handle lists with up to 10^5 elements efficiently.","solution":"def pair_sum_exists(lst, target): Determines if there are any two distinct elements in the list that add up to the given target sum. Args: lst: List of integers. target: Integer target sum. Returns: True if such a pair exists, False otherwise. seen = set() # Set to keep track of numbers we have seen so far for num in lst: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"You are tasked with writing a function that analyzes and summarizes the sales data recorded in a DataFrame. This function will compute the total sales amount and the average sales amount per transaction. You must use the `pandas.DataFrame.sum` function and the `pandas.DataFrame.mean` function to achieve this. The specific requirements are: 1. Implement a function named `sales_summary` that accepts a DataFrame `df` containing sales data. 2. The DataFrame `df` will have a column named `\'Sales Amount\'` which contains the sales amount for each transaction. 3. Calculate and print the total sales amount by summing the values in the `\'Sales Amount\'` column using `pandas.DataFrame.sum`. 4. Calculate and print the mean (average) sales amount per transaction using `pandas.DataFrame.mean`. 5. Measure and print the time taken to perform these calculations using the `time.time()` function to capture the start and end times. Here is an example of what the DataFrame might look like: ```python import pandas as pd data = {\'Sales Amount\': [500, 150, 300, 450, 700]} df = pd.DataFrame(data) ``` Ensure that your function correctly utilizes the `pandas.DataFrame.sum` and `pandas.DataFrame.mean` functions to compute the total and average sales amounts and `time.time` to measure the performance of the computation.","solution":"import pandas as pd import time def sales_summary(df): Calculates and prints the total and average sales amount from the \'Sales Amount\' column of the DataFrame. Measures and prints the time taken for the calculation. Arguments: df -- pandas DataFrame containing a \'Sales Amount\' column. start_time = time.time() # Calculate total sales amount total_sales = df[\'Sales Amount\'].sum() print(f\\"Total Sales Amount: {total_sales}\\") # Calculate average sales amount per transaction avg_sales = df[\'Sales Amount\'].mean() print(f\\"Average Sales Amount: {avg_sales}\\") end_time = time.time() # Print time taken print(f\\"Time taken: {end_time - start_time} seconds\\") return total_sales, avg_sales"},{"question":"You are tasked with writing a function called `reverse_lines_in_file`. This function should: 1. Accept a single argument, `file_path`, which is a string representing the path to a text file. 2. Read the content of the file line by line. 3. Reverse the content of each line (i.e., each character in the line should be in reverse order). 4. Write the reversed lines back into the same file, overwriting the original content. Here\'s a detailed breakdown of requirements: - Use appropriate file handling techniques in Python to open, read, and write files. - Ensure that the reading and writing operations are performed efficiently. - Handle possible errors that might occur during the file reading or writing process gracefully. - Consider edge cases such as empty lines and ensure they are processed correctly. Function Signature: ```python def reverse_lines_in_file(file_path: str) -> None: pass ``` Example Usage: ```python file_path = \\"example.txt\\" # Assume example.txt contains: # Hello # World reverse_lines_in_file(file_path) # After the function call, example.txt should contain: # olleH # dlroW ``` Expected output: The contents of `example.txt` should be modified as described above, with each line\'s content reversed.","solution":"def reverse_lines_in_file(file_path: str) -> None: This function reads a file from the given path, reverses each line in the file, and writes the reversed lines back to the file. Args: file_path (str): The path to the text file. try: # Read the file and reverse each line with open(file_path, \'r\') as file: lines = file.readlines() reversed_lines = [line.rstrip()[::-1] for line in lines] # Write the reversed lines back to the file with open(file_path, \'w\') as file: for line in reversed_lines: file.write(line + \'n\') except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Create a function `merge_dictionaries` that merges two dictionaries `dict1` and `dict2` into a new dictionary `merged_dict`. The merging process should follow these rules: 1. If a key `k` exists in both dictionaries: - If the values associated with `k` in both dictionaries are dictionaries themselves, recursively merge them following the same rules. - Otherwise, if the value in `dict2` is not a dictionary, it should overwrite the value in `dict1` in the result. 2. If a key `k` exists only in one of the dictionaries, include it in `merged_dict` with its corresponding value. The function signature should be: ```python def merge_dictionaries(dict1, dict2): # Your implementation here ``` **Parameters:** - `dict1`: A dictionary where keys are strings, and values can be of any type (including nested dictionaries). - `dict2`: A dictionary where keys are strings, and values can be of any type (including nested dictionaries). **Returns:** - `merged_dict`: A new dictionary containing the merged content of `dict1` and `dict2`. **Example Executions:** Example 1: ```python dict1 = {\'a\': 1, \'b\': {\'x\': 10, \'y\': 20}} dict2 = {\'b\': {\'y\': 50, \'z\': 30}, \'c\': 7} merged_dict = merge_dictionaries(dict1, dict2) print(merged_dict) # Output: {\'a\': 1, \'b\': {\'x\': 10, \'y\': 50, \'z\': 30}, \'c\': 7} ``` Example 2: ```python dict1 = {\'a\': {\'m\': 3}, \'d\': 4} dict2 = {\'a\': {\'n\': 5}} merged_dict = merge_dictionaries(dict1, dict2) print(merged_dict) # Output: {\'a\': {\'m\': 3, \'n\': 5}, \'d\': 4} ``` **Notes:** - You should not modify `dict1` and `dict2`. - Ensure that the solution supports nested structures and maintains the integrity of the nested dictionaries. - Demonstrate clear understanding of dictionary operations in Python.","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries into a new dictionary according to specified rules. merged_dict = dict1.copy() for key, value in dict2.items(): if key in merged_dict: if isinstance(merged_dict[key], dict) and isinstance(value, dict): merged_dict[key] = merge_dictionaries(merged_dict[key], value) else: merged_dict[key] = value else: merged_dict[key] = value return merged_dict"},{"question":"You need to create a function named `common_elements(list1, list2)` that takes two lists as input and returns a list containing the elements that are common to both provided lists. The returned list should contain no duplicates, even if the input lists contain duplicates. Your function should meet the following requirements: 1. **Parameters**: - `list1` (list): The first list of elements. - `list2` (list): The second list of elements. 2. **Return Values**: - If either `list1` or `list2` is not a list, raise a `TypeError` with the message: `\'Inputs must be lists\'`. - Return a list with the common elements from `list1` and `list2`, excluding duplicates. 3. **Conditions**: - The elements of the lists can be of any data type that can be checked for equality. - The order of the elements in the returned list does not matter. # Example Usage ```python common_elements([1, 2, 3, 4], [3, 4, 5, 6]) # Returns: [3, 4] common_elements([\'apple\', \'banana\', \'cherry\'], [\'banana\', \'cherry\', \'date\']) # Returns: [\'banana\', \'cherry\'] common_elements([\'a\', \'b\', \'a\'], [\'a\', \'c\', \'a\']) # Returns: [\'a\'] ```","solution":"def common_elements(list1, list2): Returns a list of elements that are common to both input lists, excluding duplicates. Parameters: list1 (list): The first list of elements. list2 (list): The second list of elements. Returns: list: A list containing the common elements from list1 and list2, excluding duplicates. Raises: TypeError: If either of the inputs is not a list. if not isinstance(list1, list) or not isinstance(list2, list): raise TypeError(\'Inputs must be lists\') # Using sets to find common elements and remove duplicates set1 = set(list1) set2 = set(list2) # Returning the common elements as a list return list(set1 & set2)"},{"question":"Given an array of integers, write a function to find and return the product of all elements except the one at the current index. The function should return an array where each element at index `i` is the product of all the numbers in the original array except the one at `i`. You should not use division in your solution. Additionally, the function should handle arrays with positive, negative numbers, and zeros efficiently. You should write self-contained code starting with: ``` def product_except_self(nums): ```","solution":"def product_except_self(nums): Returns an array where each element at index i is the product of all the numbers in the original array except the one at i. length = len(nums) if length == 0: return [] # Initialize the resulting array with 1s result = [1] * length # Calculate the prefix product prefix_product = 1 for i in range(length): result[i] = prefix_product prefix_product *= nums[i] # Calculate the suffix product and multiply with the prefix product stored in result suffix_product = 1 for i in range(length - 1, -1, -1): result[i] *= suffix_product suffix_product *= nums[i] return result"},{"question":"You are tasked with writing a function named `find_anagrams` that takes two string inputs: a target string and a dictionary file path. The dictionary file contains a list of words, one word per line. Your function should return a list of all the words from the dictionary that are anagrams of the target string. An anagram is formed by rearranging the letters of the target string to produce a new word using all the original letters exactly once. The comparison should be case-insensitive, but the output should return the words in the same case as they appear in the dictionary file. **Requirements:** - Read the dictionary file and extract words. - Implement an efficient way to check for anagrams. - Return a list of matched anagram words from the dictionary. **Example:** If the target string is `listen` and the dictionary file `words.txt` contains: ``` enlists google inlets banana silent ``` The function call `find_anagrams(\\"listen\\", \\"words.txt\\")` should return: ```python [\'inlets\', \'silent\'] ``` Ensure that your solution handles large dictionary files efficiently and processes the target string and dictionary words in a case-insensitive manner.","solution":"def find_anagrams(target, dictionary_file_path): Finds all anagrams of the target word in the given dictionary file. Parameters: target (str): The target word to find anagrams for. dictionary_file_path (str): The path to the dictionary file. Returns: list: A list of anagram words from the dictionary. from collections import Counter target = target.lower() target_counter = Counter(target) anagrams = [] with open(dictionary_file_path, \'r\') as file: for line in file: word = line.strip() if Counter(word.lower()) == target_counter: anagrams.append(word) return anagrams"},{"question":"You are tasked with writing a function `count_distinct_words(file_path: str)` that reads a text file and counts the number of distinct words in the file. For this task, a word is defined as a sequence of characters separated by whitespace, punctuation, or other special characters. The function should print the total number of distinct words. Function Signature ```python def count_distinct_words(file_path: str) -> None: ``` Parameters: - **file_path (str):** The path to the text file. Requirements: - You must read the file using appropriate functions from Python\'s standard library. - Consider letters as case-insensitive, meaning \\"Word\\" and \\"word\\" should be counted as the same word. - Strip punctuation and special characters from words for accurate counting. - Do not use any external libraries. Expected Output: - Print \\"The file contains [number] distinct words.\\" Example: ```python count_distinct_words(\'/path/to/textfile.txt\') ```","solution":"import re def count_distinct_words(file_path: str) -> None: with open(file_path, \'r\') as file: text = file.read().lower() words = re.findall(r\'bw+b\', text) distinct_words = set(words) print(f\\"The file contains {len(distinct_words)} distinct words.\\")"},{"question":"# Context: You are developing a simple banking system. Each user has a unique account number and maintains a balance. We need a function that performs monetary transactions based on a series of given transaction instructions. Each instruction can either be a deposit or a withdrawal. # Requirements: You are required to write a function `process_transactions` that takes a list of transactions and a starting balance. The function should update the balance according to the transactions and return the final balance. # Function Signature: ```python def process_transactions(transactions: list, starting_balance: float) -> float: pass ``` # Explanation: 1. The function accepts: - `transactions`, a list of dictionaries where each dictionary represents a single transaction. Each dictionary contains two keys: - `\'type\'`, a string that can either be `\'deposit\'` or `\'withdrawal\'`. - `\'amount\'`, a float representing the transaction amount. - `starting_balance`, a float representing the initial balance in the account. 2. The function processes each transaction in the order they appear in the list: - For a `\'deposit\'` transaction, the function adds the amount to the balance. - For a `\'withdrawal\'` transaction, the function subtracts the amount from the balance. 3. The function should return the final balance after processing all transactions. # Instructions: - Ensure the transaction amount is always positive in the given list. - If a withdrawal transaction results in a negative balance, continue processing but eventually return the negative balance. # Example: Given the following transactions: ```python transactions = [ {\\"type\\": \\"deposit\\", \\"amount\\": 100.0}, {\\"type\\": \\"withdrawal\\", \\"amount\\": 50.0}, {\\"type\\": \\"deposit\\", \\"amount\\": 200.0}, {\\"type\\": \\"withdrawal\\", \\"amount\\": 150.0} ] starting_balance = 300.0 ``` The function should return: `400.0`","solution":"def process_transactions(transactions: list, starting_balance: float) -> float: Process a list of transactions and return the final balance. :param transactions: List of dictionaries, each representing a transaction. Each dictionary has \'type\' (either \'deposit\' or \'withdrawal\') and \'amount\' keys. :param starting_balance: Initial balance in the account. :return: Final balance after processing all transactions. balance = starting_balance for transaction in transactions: if transaction[\'type\'] == \'deposit\': balance += transaction[\'amount\'] elif transaction[\'type\'] == \'withdrawal\': balance -= transaction[\'amount\'] return balance"},{"question":"In this task, you are required to implement a file system simulator with support for directory creation, file creation, and querying the size of files within directories. Specifically, you will create two classes: 1. `File`: Represents a file with a name and size. 2. `Directory`: Represents a directory that can contain files and other directories. # Task 1. Implement the `File` class: - `__init__(self, name, size)`: Initialize the file with a name and size. - `get_size(self)`: Return the size of the file. 2. Implement the `Directory` class: - `__init__(self, name)`: Initialize the directory with a name. It can contain files and subdirectories. - `add_file(self, file)`: Add a `File` instance to the directory. - `add_directory(self, directory)`: Add a `Directory` instance as a subdirectory. - `get_size(self)`: Return the total size of all files directly within the directory. Implement functions to: - Parse commands for creating files and directories, and querying for total sizes. - `run_filesystem(commands)`: Process a list of commands that create files, directories, and return the sizes of directories. **Function Signature:** ```python def run_filesystem(commands: List[str]) -> List[int]: pass ``` **Example:** ```python cmds = [ \\"mkdir root\\", \\"mkdir root/subdir\\", \\"touch root/file.txt 10\\", \\"touch root/subdir/file2.txt 20\\", \\"size root\\", \\"size root/subdir\\" ] print(run_filesystem(cmds)) # Outputs: [10, 20] ``` # Explanation: 1. `mkdir root` - Creates a directory named \'root\'. 2. `mkdir root/subdir` - Creates a subdirectory \'subdir\' within \'root\'. 3. `touch root/file.txt 10` - Creates a file \'file.txt\' with size 10 within \'root\'. 4. `touch root/subdir/file2.txt 20` - Creates a file \'file2.txt\' with size 20 within \'subdir\' under \'root\'. 5. `size root` - Returns the size of files directly within \'root\' (10). 6. `size root/subdir` - Returns the size of files directly within \'subdir\' (20).","solution":"class File: def __init__(self, name, size): self.name = name self.size = size def get_size(self): return self.size class Directory: def __init__(self, name): self.name = name self.files = [] self.subdirectories = {} def add_file(self, file): self.files.append(file) def add_directory(self, directory): self.subdirectories[directory.name] = directory def get_size(self): total_size = sum(file.get_size() for file in self.files) return total_size def run_filesystem(commands): directories = {\'/\': Directory(\'/\')} results = [] def get_directory(path): parts = path.split(\'/\') current_dir = directories[\'/\'] for part in parts: if part: current_dir = current_dir.subdirectories[part] return current_dir for command in commands: parts = command.split() if parts[0] == \'mkdir\': dir_path = parts[1] parent_path = \'/\'.join(dir_path.split(\'/\')[:-1]) or \'/\' parent_dir = get_directory(parent_path) new_dir = Directory(dir_path.split(\'/\')[-1]) parent_dir.add_directory(new_dir) directories[dir_path] = new_dir elif parts[0] == \'touch\': file_path = parts[1] size = int(parts[2]) dir_path = \'/\'.join(file_path.split(\'/\')[:-1]) or \'/\' parent_dir = get_directory(dir_path) new_file = File(file_path.split(\'/\')[-1], size) parent_dir.add_file(new_file) elif parts[0] == \'size\': dir_path = parts[1] target_dir = get_directory(dir_path) results.append(target_dir.get_size()) return results"},{"question":"In this problem, you will implement a function `transpose_matrix(matrix)` that takes a square matrix (a list of lists) as input and returns its transpose. The transpose of a matrix is another matrix where the rows and columns are switched. To transpose the matrix, you need to iterate through each element and place it at the position of its transposed index. Specifically, if an element is located at the position `[i][j]` in the original matrix, it should be moved to the position `[j][i]` in the transposed matrix. Your implementation must adhere to the following specific details: 1. **Function Name:** `transpose_matrix` 2. **Parameter:** - `matrix` (list of lists of integers): a square matrix where the number of rows is equal to the number of columns. 3. **Returns:** A list of lists of integers representing the transposed matrix. # Example ```python print(transpose_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) # Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]] print(transpose_matrix([[1, 2], [3, 4]])) # Output: [[1, 3], [2, 4]] print(transpose_matrix([[1]])) # Output: [[1]] ``` # Implementation Hints - You may use nested loops to iterate through the matrix elements. - Ensure the matrix dimensions are preserved as square (number of rows equals the number of columns). Your primary goal is to demonstrate the proper handling of 2D list structures and their transformations in Python.","solution":"def transpose_matrix(matrix): Takes a square matrix (a list of lists) as input and returns its transpose. Parameters: matrix (list of lists of integers): a square matrix where the number of rows is equal to the number of columns. Returns: list of lists of integers: representing the transposed matrix. # Extract the dimensions of the matrix n = len(matrix) # Initialize the transposed matrix with the same dimensions transposed = [[0] * n for _ in range(n)] # Iterate through each element of the matrix to transpose it for i in range(n): for j in range(n): transposed[j][i] = matrix[i][j] return transposed"},{"question":"In this exercise, you will implement a function `calculate_water_trapped` that computes the amount of water trapped between the pillars after a rainstorm. This is a classic problem often referred to as \\"Trapping Rain Water\\". You are given an elevation map where the width of each bar is 1, represented as a list of non-negative integers. Each integer represents the height of a pillar at that point (index). The goal is to find the total water trapped between the pillars after it rains. # Requirements: 1. Define the function `calculate_water_trapped(heights)`: - `heights` is a list of non-negative integers representing the height of the pillars. 2. The `calculate_water_trapped` function should: - Initialize two arrays `left_max` and `right_max` of the same length as `heights`. - Populate `left_max` such that each element at index `i` contains the height of the tallest pillar to the left of `i` (including `i` itself). - Populate `right_max` such that each element at index `i` contains the height of the tallest pillar to the right of `i` (including `i` itself). - Traverse the `heights` array and calculate the water trapped at each index as the minimum of `left_max[i]` and `right_max[i]` minus `heights[i]`. - Sum up the water trapped at each index to get the total water trapped. 3. The function should return the total amount of water trapped. # Example: ``` inputs: heights = [0,1,0,2,1,0,1,3,2,1,2,1] output: 6 ``` Explanation: - Elevation map: [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] - The amount of water trapped at each index is: [0, 0, 1, 0, 1, 2, 1, 0, 0, 1, 0, 0] - Total water trapped = 6 units. # Provided Skeleton: ```python def calculate_water_trapped(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the water trapped water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped ``` Note: You may assume that the input list\'s length will not exceed 10,000 elements.","solution":"def calculate_water_trapped(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the water trapped water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You have a text file containing a list of students and their grades in JSON format. Your task is to write a Python function `filter_students_by_grade` that filters the students based on a minimum grade threshold and saves the filtered list of students to a new file. The input data is a JSON object structured as an array of student entries: ```json [ { \\"student_id\\": \\"1\\", \\"name\\": \\"Alice\\", \\"grade\\": 85 }, { \\"student_id\\": \\"2\\", \\"name\\": \\"Bob\\", \\"grade\\": 92 }, ... (more students) ... ] ``` # Function Definition `filter_students_by_grade(input_filename: str, output_filename: str, min_grade: int) -> None` **Parameters:** - `input_filename` (str): The name of the input JSON file containing student data. - `output_filename` (str): The name of the output JSON file where the filtered students will be saved. - `min_grade` (int): The minimum grade threshold to filter students by. Library Requirement You must use the `json.dump` function from Python’s `json` library to serialize the filtered student data into the output file. # Example Suppose the input file `students.json` contains the following data: ```json [ { \\"student_id\\": \\"1\\", \\"name\\": \\"Alice\\", \\"grade\\": 85 }, { \\"student_id\\": \\"2\\", \\"name\\": \\"Bob\\", \\"grade\\": 92 }, { \\"student_id\\": \\"3\\", \\"name\\": \\"Charlie\\", \\"grade\\": 78 } ] ``` Running `filter_students_by_grade(\\"students.json\\", \\"filtered_students.json\\", 80)` should create an output file `filtered_students.json` containing: ```json [ { \\"student_id\\": \\"1\\", \\"name\\": \\"Alice\\", \\"grade\\": 85 }, { \\"student_id\\": \\"2\\", \\"name\\": \\"Bob\\", \\"grade\\": 92 } ] ```","solution":"import json def filter_students_by_grade(input_filename: str, output_filename: str, min_grade: int) -> None: Filters students based on a minimum grade and writes the filtered list to a new file. Args: input_filename (str): The name of the input JSON file containing student data. output_filename (str): The name of the output JSON file where the filtered students will be saved. min_grade (int): The minimum grade threshold to filter students by. with open(input_filename, \'r\') as infile: students = json.load(infile) filtered_students = [student for student in students if student[\'grade\'] >= min_grade] with open(output_filename, \'w\') as outfile: json.dump(filtered_students, outfile, indent=4)"},{"question":"You are required to implement a function named `is_mirrored_string(s)` that checks if a given string (`s`) is mirrored based on the predefined mirroring rules. The function should return `True` if the string is mirrored and `False` otherwise. Mirroring rules: - Characters that can be mirrored: `A, H, I, M, O, T, U, V, W, X, Y` - A string is considered mirrored if it reads the same forwards and backwards considering only these characters and their positions. Your function should adhere to the following parameters and behaviors: - **Parameter**: - `s`: A string containing only uppercase alphabetic characters. - **Behavior**: 1. Validate that all characters in the string are among the mirroring characters. 2. Check if the string reads the same forwards and backwards considering the mirroring rules. 3. Return `True` if it is mirrored, otherwise return `False`. Consider the following examples for clarity: ```python s = \\"AHA\\" is_mirrored_string(s) # Output should be True s = \\"AHAH\\" is_mirrored_string(s) # Output should be False s = \\"MOTOM\\" is_mirrored_string(s) # Output should be True s = \\"HELLO\\" is_mirrored_string(s) # Output should be False ```","solution":"def is_mirrored_string(s): Check if the given string is a mirrored string based on predefined rules. mirrored_chars = {\'A\', \'H\', \'I\', \'M\', \'O\', \'T\', \'U\', \'V\', \'W\', \'X\', \'Y\'} # Validate if all characters in the string belong to mirrored characters for char in s: if char not in mirrored_chars: return False # Check if the string reads the same forwards and backwards return s == s[::-1]"},{"question":"Write a function to sort a given list of integers. The function should output a dictionary containing: - \\"sorted_list\\": The sorted list of integers. - \\"original_sum\\": The sum of the original list of integers. The function should return this dictionary. You should write self-contained code starting with: ``` def sort_and_sum(int_list): ```","solution":"def sort_and_sum(int_list): Sorts a list of integers and returns a dictionary with the sorted list and the sum of the original list. Parameters: int_list (list): A list of integers Returns: dict: A dictionary with \'sorted_list\' and \'original_sum\' as keys sorted_list = sorted(int_list) original_sum = sum(int_list) return { \\"sorted_list\\": sorted_list, \\"original_sum\\": original_sum }"},{"question":"Create a function named `calculate_grade_statistics` that takes a list of integers representing student grades as input. The function should compute and return a dictionary containing the following statistics: the highest grade, the lowest grade, the average grade (rounded to two decimal places), and the median grade. Assume that the list of grades is non-empty and all grades are between 0 and 100, inclusive. Here\'s a breakdown of the required keys in the dictionary: - `\'highest\'`: Highest grade in the list. - `\'lowest\'`: Lowest grade in the list. - `\'average\'`: Average of the grades rounded to two decimal places. - `\'median\'`: Median of the grades. The median is the middle value in a list of numbers sorted in ascending order. If there is an even number of grades, the median is the average of the two middle numbers. **Function signature:** ```python def calculate_grade_statistics(grades: list[int]) -> dict: ``` **Examples:** 1. `calculate_grade_statistics([90, 80, 70, 60, 85])` Output: `{\'highest\': 90, \'lowest\': 60, \'average\': 77.0, \'median\': 80}` 2. `calculate_grade_statistics([75, 85, 95, 65])` Output: `{\'highest\': 95, \'lowest\': 65, \'average\': 80.0, \'median\': 80.0}` 3. `calculate_grade_statistics([88, 92, 76, 81, 85, 90])` Output: `{\'highest\': 92, \'lowest\': 76, \'average\': 85.33, \'median\': 86.5}`","solution":"def calculate_grade_statistics(grades: list[int]) -> dict: Calculate grade statistics including highest, lowest, average, and median. :param grades: List of student grades between 0 and 100. :return: Dictionary with grade statistics { \'highest\', \'lowest\', \'average\', \'median\' }. grades_sorted = sorted(grades) n = len(grades) highest = max(grades) lowest = min(grades) average = round(sum(grades) / n, 2) if n % 2 == 1: median = grades_sorted[n//2] else: median = round((grades_sorted[n//2 - 1] + grades_sorted[n//2]) / 2, 2) return { \'highest\': highest, \'lowest\': lowest, \'average\': average, \'median\': median }"},{"question":"You are tasked with developing a simulation to model the spread of a virus in a small population over time. Each individual in the population can be in one of three states: Susceptible, Infected, or Recovered. For simplicity, assume the population size is fixed and people only move between states Infected and Recovered based on certain probabilities. Write a function `simulate_virus_spread(population_size, initial_infected, transmission_rate, recovery_rate, timesteps)` that takes the following parameters: 1. `population_size`: An integer representing the total number of people. 2. `initial_infected`: An integer representing the number of initially infected people. 3. `transmission_rate`: A float representing the probability of a susceptible person getting infected through contact with an infected individual. 4. `recovery_rate`: A float representing the probability of an infected person recovering in each timestep. 5. `timesteps`: An integer representing the total number of time steps to simulate. Your function should: - Initialize the population with the given number of initially infected individuals, and the rest as susceptible. There are no recovered individuals initially. - Implement the spread of the virus and transitions between the states over the defined number of time steps. - Use a suitable data structure to keep track of the number of Susceptible, Infected, and Recovered individuals at each timestep. - Return a dictionary where the keys are \'Susceptible\', \'Infected\', and \'Recovered\', and the values are lists reflecting the respective counts at each timestep. For simplicity, the state transitions can be modeled as follows: - During each timestep, each susceptible individual has a probability `transmission_rate` of becoming infected if they come into contact with an infected individual. - An infected individual has a probability `recovery_rate` of recovering in each timestep. Here is the code snippet to help you get started: ```python import random def simulate_virus_spread(population_size, initial_infected, transmission_rate, recovery_rate, timesteps): susceptible = population_size - initial_infected infected = initial_infected recovered = 0 susceptible_counts = [susceptible] infected_counts = [infected] recovered_counts = [recovered] for _ in range(timesteps): new_infected = 0 for _ in range(susceptible): if infected > 0 and random.random() < transmission_rate: new_infected += 1 new_recovered = 0 for _ in range(infected): if random.random() < recovery_rate: new_recovered += 1 susceptible -= new_infected infected += new_infected - new_recovered recovered += new_recovered susceptible_counts.append(susceptible) infected_counts.append(infected) recovered_counts.append(recovered) return { \'Susceptible\': susceptible_counts, \'Infected\': infected_counts, \'Recovered\': recovered_counts } ``` This function provides a simplified simulation model for tracking the spread of a virus and can be used to understand basic epidemic dynamics. Modify and expand it as needed for more complex simulations.","solution":"import random def simulate_virus_spread(population_size, initial_infected, transmission_rate, recovery_rate, timesteps): susceptible = population_size - initial_infected infected = initial_infected recovered = 0 susceptible_counts = [susceptible] infected_counts = [infected] recovered_counts = [recovered] for _ in range(timesteps): new_infected = 0 for _ in range(susceptible): if infected > 0 and random.random() < transmission_rate: new_infected += 1 new_recovered = 0 for _ in range(infected): if random.random() < recovery_rate: new_recovered += 1 susceptible -= new_infected infected += new_infected - new_recovered recovered += new_recovered susceptible_counts.append(susceptible) infected_counts.append(infected) recovered_counts.append(recovered) return { \'Susceptible\': susceptible_counts, \'Infected\': infected_counts, \'Recovered\': recovered_counts }"},{"question":"In this problem, you will be writing a function that manipulates and extracts information from a list of dictionaries. Your task is to create a function named `extract_elements` which takes a single parameter `data`. This parameter is a list of dictionaries, where each dictionary contains details about a product with keys: `\'id\'`, `\'name\'`, and `\'price\'`. This function should: 1. Extract the `name` of all products whose `price` is greater than or equal to 100 and store these names in a list. 2. Return the list of product names sorted in ascending order. This will help you practice working with lists, dictionaries, and manipulating data collections in Python. Here\'s a detailed breakdown of what the function should do: - Iterate through the list `data` and check the `price` of each product. - Extract the `name` of products with a `price` of at least 100 and append them to a new list. - Sort the resulting list of product names in ascending order before returning it. You can assume that the input list `data` is correctly formatted as described and contains the necessary keys. **Function Signature**: ```python def extract_elements(data): # Your code here ``` **Example**: ```python data = [ {\\"id\\": 1, \\"name\\": \\"Product A\\", \\"price\\": 99.99}, {\\"id\\": 2, \\"name\\": \\"Product B\\", \\"price\\": 150.00}, {\\"id\\": 3, \\"name\\": \\"Product C\\", \\"price\\": 200.00} ] result = extract_elements(data) print(result) ``` **Expected Output**: ``` [\'Product B\', \'Product C\'] ``` Where `result` is the list of product names with prices equal to or exceeding 100, sorted in ascending order.","solution":"def extract_elements(data): Extracts product names with a price greater than or equal to 100 and returns them sorted in ascending order. Parameters: data (list): A list of dictionaries containing product details. Returns: list: A list of product names sorted in ascending order. # Extract names with price >= 100 product_names = [product[\'name\'] for product in data if product[\'price\'] >= 100] # Sort the names in ascending order product_names.sort() return product_names"},{"question":"You are assigned to implement a class that simulates a simple shopping cart system using Python\'s OOP principles. This class should support adding items, removing items, and calculating the total cost of the cart. Each item has a name, price, and quantity. Class Signature: `class ShoppingCart` # Methods: - `__init__(self)`: Initializes an empty shopping cart. - `add_item(self, name: str, price: float, quantity: int)`: Adds an item to the cart. If the item already exists, update the quantity. - `remove_item(self, name: str)`: Removes an item from the cart by name. If the item does not exist, raise a `KeyError` with the message \\"Item not found\\". - `total_cost(self) -> float`: Returns the total cost of the cart considering the quantity of each item. # Example: ```python cart = ShoppingCart() cart.add_item(\\"apple\\", 0.5, 4) cart.add_item(\\"banana\\", 0.25, 6) cart.add_item(\\"apple\\", 0.5, 2) cart.remove_item(\\"banana\\") result = cart.total_cost() print(result) ``` Expected Output: ``` 3.0 ``` # Notes: - You might find it useful to store cart items in a dictionary where the keys are item names and the values are dictionaries with keys \\"price\\" and \\"quantity\\". - Ensure proper error handling and edge case management, such as attempting to remove an item that does not exist. - Consider that prices can be in float format and ensure the total cost calculation is accurate.","solution":"class ShoppingCart: def __init__(self): self.cart = {} def add_item(self, name: str, price: float, quantity: int): if name in self.cart: self.cart[name][\'quantity\'] += quantity else: self.cart[name] = {\'price\': price, \'quantity\': quantity} def remove_item(self, name: str): if name in self.cart: del self.cart[name] else: raise KeyError(\\"Item not found\\") def total_cost(self) -> float: total = 0.0 for item in self.cart.values(): total += item[\'price\'] * item[\'quantity\'] return total"},{"question":"Create a function that simulates an inventory management system for a small store. The inventory is represented as a dictionary where the keys are product names and the values are integers representing the quantity of each product. The system should handle restocking (adding more items), fulfilling orders (reducing the quantity), and checking current stock levels for given products. The function should: - Accept an initial inventory as input. - Perform a series of random operations (add stock, fulfill order, check stock) provided as a list of tuples, where each tuple contains the operation name and relevant details. - Return a list of results for \'check stock\' operations in the order they were requested. You should write self-contained code starting with: ``` def inventory_management(inventory, operations): ```","solution":"def inventory_management(inventory, operations): results = [] for operation in operations: op_type = operation[0] if op_type == \'add\': product, qty = operation[1], operation[2] if product in inventory: inventory[product] += qty else: inventory[product] = qty elif op_type == \'fulfill\': product, qty = operation[1], operation[2] if product in inventory: inventory[product] = max(0, inventory[product] - qty) # Ensure we don\'t go negative elif op_type == \'check\': product = operation[1] if product in inventory: results.append(inventory[product]) else: results.append(0) return results"},{"question":"Write a Python function named `is_mirror_string(s: str) -> bool` that determines whether a string `s` is a mirror string. A string is said to be a mirror string if it reads the same forwards and backwards after reversing all its individual characters. To reverse the individual characters, follow these rules: 1. Any character that is a mirror image of itself (like \'A\', \'H\', \'I\', \'M\', \'O\', \'T\', \'U\', \'V\', \'W\', \'X\', \'Y\') remains the same. 2. Characters not in the above list need special treatment, i.e., they should be replaced by their mirror image equivalents, if any. Your function must check for the mirror nature only using above rules (consider only uppercase letter inputs for simplicity). # Function Signature: ```python def is_mirror_string(s: str) -> bool: pass ``` # Requirements: 1. **Character Mapping**: - Create a mapping of characters to their mirror equivalents. - Mirror characters include: {\'A\':\'A\', \'H\':\'H\', \'I\':\'I\', \'M\':\'M\', \'O\':\'O\', \'T\':\'T\', \'U\':\'U\', \'V\':\'V\', \'W\':\'W\', \'X\':\'X\', \'Y\':\'Y\'} 2. **Mirror Check**: - Identify each character\'s mirror equivalent and reverse the string, then check if it matches the original string. 3. **Iterative Check**: - Iterate over the string to form the mirrored reversed string and compare it with the original. # Example: ```python print(is_mirror_string(\\"AHA\\")) ``` This should return `True`. ```python print(is_mirror_string(\\"BIB\\")) ``` This should return `False` because \'B\' has no mirror equivalent. # Constraints: - Consider only uppercase letters in input `s`. - String length will be between 1 and 100 characters. # Notes: - Ensure your function efficiently handles strings up to maximum length. - The primary goal is to understand and implement mapping and comparison of mirrored characters.","solution":"def is_mirror_string(s: str) -> bool: mirror_chars = {\'A\':\'A\', \'H\':\'H\', \'I\':\'I\', \'M\':\'M\', \'O\':\'O\', \'T\':\'T\', \'U\':\'U\', \'V\':\'V\', \'W\':\'W\', \'X\':\'X\', \'Y\':\'Y\'} mirrored_reversed_string = \\"\\" for char in reversed(s): if char in mirror_chars: mirrored_reversed_string += mirror_chars[char] else: return False return mirrored_reversed_string == s"},{"question":"Write a function that receives a list of integers, groups these integers by their digit sum (i.e., the sum of each digit in the number), and then sorts each group in ascending order. The function should return a dictionary where the keys are the digit sums and the values are lists of integers belonging to each group, sorted in ascending order. For instance, for an input list of [34, 23, 12, 45, 52, 91], the output should correctly group and sort these numbers based on their digit sums. The function\'s output should be a dictionary organized as follows: ``` { digit_sum_value: [sorted_integers_with_that_sum], ... } ``` You should write self-contained code starting with: ``` def group_and_sort_by_digit_sum(int_list): ```","solution":"def digit_sum(n): return sum(int(digit) for digit in str(n)) def group_and_sort_by_digit_sum(int_list): digit_sum_dict = {} for number in int_list: d_sum = digit_sum(number) if d_sum not in digit_sum_dict: digit_sum_dict[d_sum] = [] digit_sum_dict[d_sum].append(number) for key in digit_sum_dict: digit_sum_dict[key].sort() return digit_sum_dict"},{"question":"You are provided with a partially implemented function `summarizeTransactions` that aims to summarize a list of bank transactions. A transaction is represented as a dictionary with the keys \'amount\' and \'date\'. Your task is to complete and correct this function to perform the following tasks: 1. **Validate** input: Ensure that the input is a list of dictionaries, each containing the keys \'amount\' (a decimal number) and \'date\' (a string in the `YYYY-MM-DD` format). If any transaction does not meet these criteria, ignore that transaction. 2. **Summarize** transactions by month and year: Create a summary of total transaction amounts for each month and year present in the input list. 3. **Generate** summary result: Return a dictionary where the keys are strings in the format `YYYY-MM` and the values are the total amounts of transactions for that month. Here is the function signature you need to complete: ```python from datetime import datetime from collections import defaultdict def summarizeTransactions(transactions: list) -> dict: # Your implementation goes here ``` **Input:** - `transactions` (list): A list of dictionaries representing transactions, each containing: - \'amount\' (float): The transaction amount. - \'date\' (str): The date of the transaction in `YYYY-MM-DD` format. **Output:** - Returns a dictionary with date keys in the format `YYYY-MM` and float values representing the total transaction amounts for that month. **Example:** ```python print(summarizeTransactions([ {\\"amount\\": 150.0, \\"date\\": \\"2021-03-01\\"}, {\\"amount\\": 200.0, \\"date\\": \\"2021-03-15\\"}, {\\"amount\\": 350.0, \\"date\\": \\"2021-04-01\\"} ])) # Output: {\\"2021-03\\": 350.0, \\"2021-04\\": 350.0} ``` Implement and complete the function `summarizeTransactions` to perform the described functionality.","solution":"from datetime import datetime from collections import defaultdict def summarizeTransactions(transactions: list) -> dict: summary = defaultdict(float) for transaction in transactions: if not isinstance(transaction, dict): continue if \'amount\' not in transaction or \'date\' not in transaction: continue amount = transaction[\'amount\'] date_str = transaction[\'date\'] if not isinstance(amount, (int, float)): continue try: date = datetime.strptime(date_str, \'%Y-%m-%d\') except ValueError: continue key = date.strftime(\'%Y-%m\') summary[key] += amount return dict(summary)"},{"question":"Design a function that fetches and processes weather data from an open weather API. The function should: 1. Perform a GET request to the OpenWeatherMap API endpoint to retrieve current weather data for a given city. 2. Extract and return the city name, temperature (in Celsius), weather condition description, and wind speed. Your function signature should be: ```python def get_weather_data(api_key, city_name): ``` Where: - **api_key**: A string representing the API key required to authenticate with the OpenWeatherMap API. - **city_name**: A string specifying the city\'s name for which the weather data should be retrieved. The function should return a dictionary with the following structure: ```python { \\"city\\": <city_name>, \\"temperature\\": <temperature_in_celsius>, \\"description\\": <weather_condition_description>, \\"wind_speed\\": <wind_speed> } ``` **Note**: You must use the `requests` and `json` libraries for HTTP requests and JSON processing respectively. # Example For `api_key = \'your_api_key\'` and `city_name = \'London\'`, your function might return: ```python { \\"city\\": \\"London\\", \\"temperature\\": 15.0, \\"description\\": \\"light rain\\", \\"wind_speed\\": 4.1 } ``` # Constraints - Handle any potential exceptions from the API requests and display appropriate error messages. - Ensure that the retrieved temperature is converted from Kelvin (the default unit from the API) to Celsius. - Validate that the city name is valid and correctly handles cases where the city is not found in the API.","solution":"import requests def get_weather_data(api_key, city_name): Fetches current weather data for a given city from the OpenWeatherMap API. Parameters: api_key (str): The API key to authenticate with OpenWeatherMap API. city_name (str): The city\'s name for which weather data should be retrieved. Returns: dict: A dictionary containing the city name, temperature in Celsius, weather condition description, and wind speed. base_url = \\"http://api.openweathermap.org/data/2.5/weather\\" params = { \'q\': city_name, \'appid\': api_key, \'units\': \'metric\' # Temperature in Celsius } try: response = requests.get(base_url, params=params) response.raise_for_status() data = response.json() weather_data = { \\"city\\": data[\\"name\\"], \\"temperature\\": data[\\"main\\"][\\"temp\\"], \\"description\\": data[\\"weather\\"][0][\\"description\\"], \\"wind_speed\\": data[\\"wind\\"][\\"speed\\"] } return weather_data except requests.exceptions.HTTPError as http_err: print(f\\"HTTP error occurred: {http_err}\\") except requests.exceptions.ConnectionError as conn_err: print(f\\"Connection error occurred: {conn_err}\\") except requests.exceptions.Timeout as timeout_err: print(f\\"Timeout error occurred: {timeout_err}\\") except requests.exceptions.RequestException as req_err: print(f\\"An error occurred: {req_err}\\") except KeyError as key_err: print(f\\"Key error: {key_err}\\") except Exception as e: print(f\\"An unknown error occurred: {e}\\") return None"},{"question":"You are given a list of dictionaries, where each dictionary represents an employee\'s record with keys `\\"name\\"`, `\\"salary\\"`, and `\\"department\\"`. Your task is to write a function in Python that categorizes employees by their department and calculates the average salary for each department. Finally, the function should return a dictionary where keys are the department names and values are the calculated average salaries. Your function should: 1. Iterate over the given list of employee records. 2. Group employees by their department and calculate the average salary for each department. 3. Return a dictionary with department names as keys and their respective average salaries as values rounded to two decimal places. Define the function as follows: ```python def calculateAverageSalaries(employee_records): Categorizes employees by department and calculates the average salary for each department. Parameters: ----------- employee_records : list of dict List of dictionaries where each dictionary has keys \\"name\\", \\"salary\\", and \\"department\\". Returns: -------- dict Dictionary with department names as keys and average salaries as values. pass ``` Example: ```python employee_records = [ {\\"name\\": \\"Alice\\", \\"salary\\": 80000, \\"department\\": \\"Engineering\\"}, {\\"name\\": \\"Bob\\", \\"salary\\": 75000, \\"department\\": \\"Engineering\\"}, {\\"name\\": \\"Charlie\\", \\"salary\\": 40000, \\"department\\": \\"Marketing\\"}, {\\"name\\": \\"David\\", \\"salary\\": 45000, \\"department\\": \\"Marketing\\"}, {\\"name\\": \\"Eve\\", \\"salary\\": 70000, \\"department\\": \\"Sales\\"} ] assert calculateAverageSalaries(employee_records) == { \\"Engineering\\": 77500.0, \\"Marketing\\": 42500.0, \\"Sales\\": 70000.0 } ```","solution":"def calculateAverageSalaries(employee_records): Categorizes employees by department and calculates the average salary for each department. Parameters: ----------- employee_records : list of dict List of dictionaries where each dictionary has keys \\"name\\", \\"salary\\", and \\"department\\". Returns: -------- dict Dictionary with department names as keys and average salaries as values rounded to two decimal places. department_salaries = {} for record in employee_records: department = record[\\"department\\"] salary = record[\\"salary\\"] if department not in department_salaries: department_salaries[department] = [] department_salaries[department].append(salary) average_salaries = {} for department, salaries in department_salaries.items(): average_salaries[department] = round(sum(salaries) / len(salaries), 2) return average_salaries"},{"question":"Write a function `find_min_value_path` to solve the minimum path sum problem in a matrix. This task is essential for understanding dynamic programming and pathfinding algorithms. # Function Specification: - **Function Name**: `find_min_value_path` - **Parameters**: - `grid`: A list of lists of integers, representing a 2D grid where each cell contains a positive integer. # Requirements: 1. The function should start at the top-left corner of the grid and find a path to the bottom-right corner. 2. The sum of the values in the path should be minimized. 3. You can only move either down or right at any point in time. # Example: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] result = find_min_value_path(grid) print(result) # Output should be 7, as the path 1→3→1→1→1 minimizes the sum. ``` # Additional Notes: - You may assume that the input grid is non-empty and contains only positive integers. - Implement a solution using dynamic programming to achieve acceptable performance for larger grids. - The function should return the minimum path sum as an integer.","solution":"def find_min_value_path(grid): Returns the minimum path sum from top-left to bottom-right of the grid. rows = len(grid) cols = len(grid[0]) # Create a DP table to store the minimum path sum at each cell dp = [[0]*cols for _ in range(rows)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1]) return dp[rows - 1][cols - 1]"},{"question":"Write a function to find the largest contiguous subarray sum within a given list of integers using the Kadane’s Algorithm. If the list is empty, return 0. The function should be efficient and have a linear time complexity. The function should output: int: The largest sum of the contiguous subarray. You should write self-contained code starting with: ``` def find_largest_subarray_sum(arr): ```","solution":"def find_largest_subarray_sum(arr): Finds the largest sum of a contiguous subarray using Kadane\'s Algorithm. If the list is empty, return 0. :param arr: List of integers :return: Largest sum of contiguous subarray if not arr: return 0 max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"**Inventory Management System** You are required to write a class named `Inventory` which manages a collection of items in an inventory system. The class should provide functionality to add, remove, and search for items. Each item should be represented as a dictionary with at least `id`, `name`, `quantity`, and `price`. # Class Methods: 1. **Constructor**: - Initialize an empty list to store the items. 2. **add_item**: - Accepts the item details (`id`, `name`, `quantity`, `price`) as arguments. - Adds the item to the inventory. - If an item with the same `id` already exists, update the existing item\'s details. 3. **remove_item**: - Accepts the `id` of the item to be removed. - Removes the item with the specified `id` from the inventory. 4. **search_item**: - Accepts the `id` of the item to search. - Returns the details of the item with the specified `id`, if it exists; otherwise, returns `None`. 5. **get_total_value**: - Returns the total value of the inventory by summing up the product of `quantity` and `price` for all items. # Class Signature: ```python class Inventory: def __init__(self) -> None: # Implement the constructor def add_item(self, id: int, name: str, quantity: int, price: float) -> None: # Implement the add_item method def remove_item(self, id: int) -> None: # Implement the remove_item method def search_item(self, id: int) -> dict or None: # Implement the search_item method def get_total_value(self) -> float: # Implement the get_total_value method ``` # Example Usage: ```python inventory = Inventory() inventory.add_item(1, \\"Laptop\\", 10, 999.99) inventory.add_item(2, \\"Mouse\\", 50, 19.99) inventory.add_item(3, \\"Keyboard\\", 30, 49.99) print(inventory.search_item(2)) # Output: {\'id\': 2, \'name\': \'Mouse\', \'quantity\': 50, \'price\': 19.99} inventory.remove_item(2) print(inventory.search_item(2)) # Output: None print(inventory.get_total_value()) # Output: 49949.5 ``` # Requirements: - Ensure all inputs are validated. - Handle edge cases such as removing an item that does not exist, adding an item with a negative quantity or price. - Comment on your code where necessary to explain its functionality. # Note: - Make sure to cover the necessary error handling and edge case scenarios. - Maintain proper code structure and readability.","solution":"class Inventory: def __init__(self) -> None: Constructor initializes an empty list to store the items. self.items = [] def add_item(self, id: int, name: str, quantity: int, price: float) -> None: Adds an item to the inventory. If an item with the same `id` exists, it updates the item\'s details. if quantity < 0 or price < 0: raise ValueError(\\"Quantity and price must be non-negative\\") for item in self.items: if item[\'id\'] == id: item[\'name\'] = name item[\'quantity\'] = quantity item[\'price\'] = price return self.items.append({ \'id\': id, \'name\': name, \'quantity\': quantity, \'price\': price }) def remove_item(self, id: int) -> None: Removes the item with the specified `id` from the inventory. self.items = [item for item in self.items if item[\'id\'] != id] def search_item(self, id: int) -> dict or None: Searches for the item with the specified `id` and returns its details if it exists. Otherwise, returns `None`. for item in self.items: if item[\'id\'] == id: return item return None def get_total_value(self) -> float: Returns the total value of the inventory by summing up the product of `quantity` and `price` for all items. return sum(item[\'quantity\'] * item[\'price\'] for item in self.items)"},{"question":"You need to create a function that generates a square matrix (2D NumPy array) of size `n` where `n` is a non-negative integer, and fills it in a spiral order starting from the top-left corner and moving towards the center. Your function should be named `generate_spiral_matrix` and operate as follows: 1. Accept an integer `n`. 2. Create an `n x n` NumPy array initialized with zeros. 3. Fill the array with integers from `1` to `n^2` in a spiral order. Below are some examples of the function\'s behavior: ```python n = 3 generate_spiral_matrix(n) # Output: # array([[ 1, 2, 3], # [ 8, 9, 4], # [ 7, 6, 5]]) n = 4 generate_spiral_matrix(n) # Output: # array([[ 1, 2, 3, 4], # [12, 13, 14, 5], # [11, 16, 15, 6], # [10, 9, 8, 7]]) ``` Note: The input integer `n` will always be a non-negative integer, and the function should handle the case where `n` is equal to `0` by returning an empty array.","solution":"import numpy as np def generate_spiral_matrix(n): if n == 0: return np.array([]) matrix = np.zeros((n, n), dtype=int) num = 1 left, right = 0, n - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"# Problem: Implementing a Simple Hash Function You are tasked with implementing a simple hash function to distribute a set of integer keys into hash table slots. The hash function will use the modulo operation to calculate the hash value based on the given number of slots. # Function Signature ```python def hash_function(keys, num_slots): ... ``` # Parameters: - `keys` (list of int): A list of integers representing the keys to be hashed. - `num_slots` (int): An integer representing the number of slots in the hash table. # Returns: - `hash_values` (list of int): A list of integers representing the hash value for each key, where each value is between 0 and `num_slots` - 1 (inclusive). # Process: 1. Iterate over each key in the `keys` list. 2. For each key, compute the hash value using the modulo operation with the number of slots. 3. Store the computed hash values in a list and return it. # Requirements: - Use the modulo operation (`%`) to compute the hash values. # Example: ```python keys = [100, 58, 72, 37, 84] num_slots = 10 print(hash_function(keys, num_slots)) # Expected output: [0, 8, 2, 7, 4] ``` # Explanation: - The key 100 hashed to the value (100 % 10 = 0). - The key 58 hashed to the value (58 % 10 = 8). - The key 72 hashed to the value (72 % 10 = 2). - The key 37 hashed to the value (37 % 10 = 7). - The key 84 hashed to the value (84 % 10 = 4).","solution":"def hash_function(keys, num_slots): Compute the hash value for each key in keys using num_slots. Parameters: keys (list of int): A list of integers representing the keys to be hashed. num_slots (int): An integer representing the number of slots in the hash table. Returns: list of int: A list of integers representing the hash value for each key. return [key % num_slots for key in keys]"},{"question":"You are required to develop a function `calculate_inventory_changes(transactions)` that processes a list of inventory transactions to compute: 1. The total quantity of each product sold. 2. The revenue for each product based on its selling price. 3. The remaining inventory for each product. Each transaction is a dictionary containing the following keys: - `product_id`: A unique identifier for the product. - `quantity`: An integer representing the number of units sold (positive) or returned (negative). - `price`: A float representing the selling price per unit of the product. - `operation`: A string that can either be \\"sell\\" or \\"return\\". The function should process all transactions, tallying the quantity sold/returned, and calculating the total revenue from sales. Here\'s the structured signature you should follow: ```python def calculate_inventory_changes(transactions): # Your code goes here ``` *Parameters:* - `transactions`: A list of dictionaries, where each dictionary represents a transaction. *Returns:* A dictionary containing: - `total_quantity_sold`: A dictionary with product_ids as keys and total quantity sold as values. - `total_revenue`: A dictionary with product_ids as keys and total revenue from sales as values. - `remaining_inventory`: A dictionary with product_ids as keys and remaining quantity after transactions as values. *Example:* ```python transactions = [ {\\"product_id\\": 101, \\"quantity\\": 5, \\"price\\": 20.0, \\"operation\\": \\"sell\\"}, {\\"product_id\\": 101, \\"quantity\\": -1, \\"price\\": 20.0, \\"operation\\": \\"return\\"}, {\\"product_id\\": 102, \\"quantity\\": 2, \\"price\\": 50.0, \\"operation\\": \\"sell\\"} ] result = calculate_inventory_changes(transactions) print(result) ``` Expected output: ```python { \'total_quantity_sold\': {101: 4, 102: 2}, \'total_revenue\': {101: 80.0, 102: 100.0}, \'remaining_inventory\': {101: 4, 102: 2} } ``` Note: - The total quantity sold and total revenue should not include returned items. - Returned items should be subtracted from the \'remaining_inventory\' calculation.","solution":"def calculate_inventory_changes(transactions): total_quantity_sold = {} total_revenue = {} remaining_inventory = {} for transaction in transactions: product_id = transaction[\'product_id\'] quantity = transaction[\'quantity\'] price = transaction[\'price\'] operation = transaction[\'operation\'] if product_id not in total_quantity_sold: total_quantity_sold[product_id] = 0 total_revenue[product_id] = 0.0 remaining_inventory[product_id] = 0 if operation == \'sell\': total_quantity_sold[product_id] += quantity total_revenue[product_id] += quantity * price remaining_inventory[product_id] += quantity elif operation == \'return\': remaining_inventory[product_id] += quantity return { \'total_quantity_sold\': total_quantity_sold, \'total_revenue\': total_revenue, \'remaining_inventory\': remaining_inventory }"},{"question":"Write a function `FindTransitionPoint` that determines the transition point in a sorted list which contains only 0s and 1s. The transition point is the index in the list where 0 turns to 1. If there is no 1 in the list, return -1. The function should be implemented to run in O(log n) time complexity. Function Specification: ```python def FindTransitionPoint(arr): Determines the transition point in a sorted list of 0s and 1s. Parameters: - arr : List[int] : A sorted list containing only 0s and 1s Returns: - int : The index of the transition from 0 to 1, or -1 if no 1 exists pass ``` Explanation: - The list `arr` consists only of 0s and 1s and is sorted in non-decreasing order. - The function should use a binary search algorithm to find the transition point efficiently. - If the list is empty or contains no 1s, the function should return -1. **Constraints**: - The function should run in O(log n) time complexity. # Example: ```python # Example 1: arr = [0, 0, 0, 1, 1] print(FindTransitionPoint(arr)) # Output: 3 # Example 2: arr = [0, 0, 0, 0] print(FindTransitionPoint(arr)) # Output: -1 # Example 3: arr = [1, 1, 1, 1] print(FindTransitionPoint(arr)) # Output: 0 ``` # Important Hints: - Use a binary search algorithm to find the transition point. - Midpoint calculation should prevent integer overflow (i.e., use `mid = left + (right - left) // 2`). - Check the middle element and determine if the transition point lies to the left or right half. Adjust search boundaries based on this comparison.","solution":"def FindTransitionPoint(arr): Determines the transition point in a sorted list of 0s and 1s. Parameters: - arr : List[int] : A sorted list containing only 0s and 1s Returns: - int : The index of the transition from 0 to 1, or -1 if no 1 exists left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == 1 and (mid == 0 or arr[mid - 1] == 0): return mid elif arr[mid] == 0: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Load a JSON file containing an array of objects into a Pandas DataFrame, filter the rows based on a condition applied to a specified column, and then generate a line plot of the filtered data for the specified column against another column. The function should output with: tuple: A tuple containing the filtered DataFrame (pandas DataFrame) and the line plot (matplotlib Axes object). You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(json_path, filter_column, filter_value, plot_x_column, plot_y_column): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(json_path, filter_column, filter_value, plot_x_column, plot_y_column): # Load JSON data into a DataFrame df = pd.read_json(json_path) # Filter rows based on the filter_value in the filter_column filtered_df = df[df[filter_column] == filter_value] # Generate a line plot fig, ax = plt.subplots() ax.plot(filtered_df[plot_x_column], filtered_df[plot_y_column]) ax.set_xlabel(plot_x_column) ax.set_ylabel(plot_y_column) # Return the filtered DataFrame and the Axes object return filtered_df, ax"},{"question":"You are given a list of integers where each number represents the price of a stock on a given day. Your task is to determine the maximum profit that can be achieved by making at most one buy and one sell transaction. If no profit can be achieved, return 0. Write a function `max_profit(prices: List[int]) -> int` that takes in the list of stock prices and returns the maximum profit that could be achieved from one buy and one sell. Assumptions: - The input list contains at least one price. - You cannot sell a stock before you buy one. - The function should run in O(n) time complexity. Function signature: ```python def max_profit(prices: List[int]) -> int: ``` **Examples:** ```python assert max_profit([7, 1, 5, 3, 6, 4]) == 5 # Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5 assert max_profit([7, 6, 4, 3, 1]) == 0 # No transaction, hence profit = 0 assert max_profit([3, 3, 5, 0, 0, 3, 1, 4]) == 4 # Buy on day 5 (price = 0) and sell on day 8 (price = 4), profit = 4 ```","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit that can be achieved from one buy and one sell transaction. If no profit can be achieved, return 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are developing a system to manage a collection of text documents. Each document can contain multiple sentences, and each sentence can be of varying lengths. Your task is to count the frequency of specific target words in each document and return a summary of the counts. The specific function to implement is `word_frequency(documents, target_words)`: 1. **Parameters**: - `documents`: A list of strings, where each string represents a document containing sentences. Sentences are separated by periods (`.`). - `target_words`: A list of strings, where each string is a word for which you need to calculate the frequency. 2. **Output**: - Returns a list of dictionaries, one for each document. Each dictionary contains the target words as keys and their corresponding counts as values. 3. **Requirement**: - Handle case-insensitive matching of words. - Ignore punctuation. **Function Signature**: ```python def word_frequency(documents, target_words): ... ``` # Example ```python documents = [ \\"Hello world. Python is great. Hello again.\\", \\"Python is widely used. Many people love Python.\\" ] target_words = [\\"hello\\", \\"python\\"] print(word_frequency(documents, target_words)) ``` **Expected Output**: ```python [{\'hello\': 2, \'python\': 1}, {\'hello\': 0, \'python\': 2}] ``` # Note: - Ensure to preprocess the documents by removing punctuation and converting all words to lowercase before counting. - The frequencies should reflect the number of times each target word appears in each document.","solution":"import string def word_frequency(documents, target_words): def preprocess_document(document): translator = str.maketrans(\'\', \'\', string.punctuation) return document.lower().translate(translator) def count_words(text, words): word_list = text.split() counts = {} for word in words: counts[word] = word_list.count(word) return counts target_words = [word.lower() for word in target_words] result = [] for document in documents: clean_document = preprocess_document(document) counts = count_words(clean_document, target_words) result.append(counts) return result"},{"question":"You are developing a Python function to analyze temperature data from multiple sensors. These sensors are distributed across various locations in a grid pattern. Each sensor logs its data to a CSV file containing the time, temperature, and coordinates of the sensor. Your task is to implement a function that reads this data, filters out sensors with temperatures outside a specified range, and calculates the average temperature for each remaining sensor. Write the function `process_temperature_data(file_name, temp_range, grid_size)` that performs the following: 1. **Read Data**: The function reads the sensor data from a given CSV file. Each row in the file represents a data entry with columns for time, temperature, and coordinates (x and y). 2. **Filter Data**: Exclude data entries with temperatures outside the specified `temp_range`. 3. **Grid Averaging**: Calculate the average temperature for each grid cell in an `MxM` grid, defined by the `grid_size`. # Function Parameters: - `file_name` (string): The path to the CSV file containing the sensor data. - `temp_range` (tuple): A tuple defining the range of acceptable temperatures (min_temp, max_temp). - `grid_size` (int): The size of the grid (M). # Expected Return: - `grid_avg_temp` (numpy array): An `MxM` array where each element represents the average temperature of the sensors within the corresponding grid cell. # Example of the CSV file format: ``` time,temperature,x_coordinate,y_coordinate 08:00,22.5,3,4 08:01,25.0,2,2 ... ``` # Example Usage: ```python file_name = \\"sensor_data.csv\\" temp_range = (20.0, 30.0) grid_size = 5 grid_avg_temp = process_temperature_data(file_name, temp_range, grid_size) print(grid_avg_temp) ``` # Expected Libraries: - `numpy` - `pandas`","solution":"import pandas as pd import numpy as np def process_temperature_data(file_name, temp_range, grid_size): Processes temperature data from sensors, filters based on temperature range, and calculates average temperature for each grid cell. Parameters: - file_name: str, path to the CSV file - temp_range: tuple, (min_temp, max_temp) for filtering temperatures - grid_size: int, size of the grid (MxM) Returns: - grid_avg_temp: numpy array of shape (MxM) with average temperatures per grid cell # Read data from CSV data = pd.read_csv(file_name) # Filter data based on temperature range min_temp, max_temp = temp_range filtered_data = data[(data[\'temperature\'] >= min_temp) & (data[\'temperature\'] <= max_temp)] # Initialize the grid grid_avg_temp = np.zeros((grid_size, grid_size)) grid_counts = np.zeros((grid_size, grid_size)) # Map temperatures to grid cells and calculate sums for _, row in filtered_data.iterrows(): x = int(row[\'x_coordinate\']) y = int(row[\'y_coordinate\']) if x < grid_size and y < grid_size: grid_avg_temp[x, y] += row[\'temperature\'] grid_counts[x, y] += 1 # Calculate average temperature for each grid cell for i in range(grid_size): for j in range(grid_size): if grid_counts[i, j] > 0: grid_avg_temp[i, j] /= grid_counts[i, j] else: grid_avg_temp[i, j] = np.nan # Use NaN where no data is available return grid_avg_temp"},{"question":"Write a function to perform the following operations on a given DataFrame: 1. Remove rows with any NaN values in specified columns. 2. Standardize given numerical columns using z-score normalization. 3. Encode categorical columns using label encoding. The function should raise a ValueError if any of the specified columns for cleaning, standardization, or encoding do not exist in the DataFrame. The function should output: DataFrame: The transformed DataFrame with rows containing NaN values removed, numerical columns standardized, and categorical columns label encoded. You should write self-contained code starting with: ``` import pandas as pd from sklearn.preprocessing import StandardScaler, LabelEncoder def process_dataframe(df, clean_cols, standardize_cols, encode_cols): ```","solution":"import pandas as pd from sklearn.preprocessing import StandardScaler, LabelEncoder def process_dataframe(df, clean_cols, standardize_cols, encode_cols): Processes a DataFrame by removing rows with NaN values in specified columns, standardizing given numerical columns, and encoding categorical columns. Parameters: df (pd.DataFrame): The input DataFrame to be processed. clean_cols (list): List of columns to check for NaN values and remove rows. standardize_cols (list): List of numerical columns to standardize using z-score normalization. encode_cols (list): List of categorical columns to encode using label encoding. Returns: pd.DataFrame: The transformed DataFrame. # Check if all specified columns exist in the DataFrame for col in (clean_cols + standardize_cols + encode_cols): if col not in df.columns: raise ValueError(f\\"Column {col} does not exist in the DataFrame\\") # Remove rows with any NaN values in specified columns df_cleaned = df.dropna(subset=clean_cols) # Standardize numerical columns using z-score normalization if standardize_cols: scaler = StandardScaler() df_cleaned[standardize_cols] = scaler.fit_transform(df_cleaned[standardize_cols]) # Encode categorical columns using label encoding if encode_cols: le = LabelEncoder() for col in encode_cols: df_cleaned[col] = le.fit_transform(df_cleaned[col]) return df_cleaned"},{"question":"Using the Wine dataset from UCI Machine Learning Repository, write a function to train a logistic regression model and evaluate its performance using cross-validation. The function should load the Wine dataset, preprocess the features (standardize them), fit a logistic regression model, and perform 5-fold cross-validation to assess its accuracy. Finally, return the mean accuracy score. The function should return: float: The mean accuracy score of the logistic regression model evaluated using 5-fold cross-validation. You should write self-contained code starting with: ``` from sklearn.datasets import load_wine from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler from sklearn.model_selection import cross_val_score def task_func(): ```","solution":"from sklearn.datasets import load_wine from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler from sklearn.model_selection import cross_val_score def task_func(): # Load the Wine dataset data = load_wine() X = data.data y = data.target # Standardize the features scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # Create the logistic regression model model = LogisticRegression(max_iter=10000) # Perform 5-fold cross-validation cv_scores = cross_val_score(model, X_scaled, y, cv=5) # Return the mean accuracy score mean_accuracy = cv_scores.mean() return mean_accuracy"},{"question":"Implement a function `rectify_strings` that aligns a list of strings to the right, with the same maximum length by padding shorter strings with leading spaces. The function should take a list of strings as input and return a new list with all the strings right-aligned. # Specifications 1. The function should be named `rectify_strings`. 2. The function should accept one parameter: - `input_list` (list of strings): A list of strings to be right-aligned. 3. The function should determine the maximum length of the strings in the input list. 4. The function should return a new list where each string is right-aligned by adding leading spaces, so all strings have the same length as the longest string in the original list. 5. If the input list is empty, the function should return an empty list. # Example ```python input_list = [\\"cat\\", \\"tiger\\", \\"lion\\"] output_list = rectify_strings(input_list) print(output_list) # Output: [\' cat\', \'tiger\', \' lion\'] ``` # Constraints - All strings in the input list will contain only printable ASCII characters. - The input list will not contain `None` or other non-string elements. - The function should handle lists of any reasonable length. - Consider edge cases such as an empty list or list with strings of the same length.","solution":"def rectify_strings(input_list): Returns a list with each string right-aligned to the same maximum length by padding shorter strings with leading spaces. :param input_list: List of strings to be right-aligned. :return: List of right-aligned strings. if not input_list: return [] max_length = max(len(s) for s in input_list) return [s.rjust(max_length) for s in input_list]"},{"question":"You are tasked with analyzing a dataset containing information on various products to identify the top-selling product within a particular category. You will use the pandas library to read and manipulate CSV data. Create a function named `top_selling_product` that takes a single parameter `category`. This function should perform the following tasks: 1. **Read Data**: Read the \\"Products_Database.csv\\" file into a pandas DataFrame. 2. **Filter Products**: Extract all product records that belong to the specified `category`. 3. **Determine Top-Seller**: Identify the product with the highest sales in the filtered category. 4. **Return Result**: Return the name and sales amount of the top-selling product within the specified category. **CSV File Structure**: The \\"Products_Database.csv\\" file includes at least the following columns: - `Product Name`: The name of the product. - `Category`: The category to which the product belongs. - `Sales`: The number of units sold for the product. **Function Prototype**: ```python def top_selling_product(category: str) -> tuple: ``` **Parameters**: - `category` (str): The category for which the top-selling product is to be identified. **Returns**: - `top_product` (str): The name of the top-selling product within the specified category. - `top_sales` (int): The sales amount of the top-selling product within the specified category. You are to use the pandas library to manage and manipulate the DataFrame as required. This exercise will help in understanding how to work with pandas for data analysis tasks.","solution":"import pandas as pd def top_selling_product(category: str) -> tuple: Identifies the top-selling product within a specified category from the Products_Database.csv file. Parameters: category (str): The category for which the top-selling product is to be identified. Returns: tuple: (top_product (str), top_sales (int)) - The name and sales amount of the top-selling product. # Read data from CSV file df = pd.read_csv(\'Products_Database.csv\') # Filter products by the specified category category_products = df[df[\'Category\'] == category] # Determine the top-selling product in the category top_product_row = category_products.loc[category_products[\'Sales\'].idxmax()] # Extract top product name and sales amount top_product = top_product_row[\'Product Name\'] top_sales = top_product_row[\'Sales\'] return (top_product, top_sales)"},{"question":"You are asked to implement a function that performs matrix multiplication on two given 2D NumPy arrays, without using any built-in NumPy functions for matrix multiplication (e.g., `numpy.dot`, `numpy.matmul`). The arrays can have different shapes but must be compatible for matrix multiplication according to the rules of linear algebra. The function you need to write is named `matrix_multiply(A, B)`. Here\'s a more detailed breakdown of the function requirements: 1. **Input:** - `A`: A 2D NumPy array with shape `(m, n)`, representing the first matrix. - `B`: A 2D NumPy array with shape `(n, p)`, representing the second matrix. Note that the number of columns in `A` must match the number of rows in `B` for matrix multiplication to be feasible. 2. **Output:** - The function should return a 2D NumPy array with shape `(m, p)` representing the result of the matrix multiplication of `A` and `B`. # Example Consider the following example to understand the function behavior: ```python import numpy as np A = np.array([ [1, 2, 3], [4, 5, 6] ]) B = np.array([ [7, 8], [9, 10], [11, 12] ]) result = matrix_multiply(A, B) print(result) # The result of multiplying A by B should be: # array([ # [ 58, 64], # [139, 154] # ]) ``` # Libraries to Use You may use the following NumPy functions to assist in creating and manipulating arrays: - `numpy.zeros` **Note:** You should not use any built-in NumPy functions specifically designed for matrix multiplication. # Testing Your function will be tested with matrices of varying sizes to ensure correctness and efficiency. --- This sample question is designed to align with the style and complexity of the original set, focusing on fundamental programming skills involving NumPy and matrix operations.","solution":"import numpy as np def matrix_multiply(A, B): Perform matrix multiplication on two given 2D NumPy arrays without using any built-in NumPy functions for matrix multiplication. Parameters: A (np.ndarray): First 2D NumPy array with shape (m, n) B (np.ndarray): Second 2D NumPy array with shape (n, p) Returns: np.ndarray: Resultant 2D NumPy array with shape (m, p) m, n = A.shape n_b, p = B.shape # Check if the matrices can be multiplied if n != n_b: raise ValueError(\\"Number of columns in A must match number of rows in B\\") # Initialize the result matrix with zeros result = np.zeros((m, p)) # Perform the matrix multiplication for i in range(m): for j in range(p): for k in range(n): result[i, j] += A[i, k] * B[k, j] return result"},{"question":"You are given a dataset split into a training set (`X_train`, `y_train`) and a testing set (`X_test`, `y_test`). The task is to use a Decision Tree algorithm to classify data and evaluate the model\'s performance by varying the maximum depth of the tree. Write a function `decision_tree_complexity_curve(X_train, y_train, X_test, y_test, max_depth_start, max_depth_end)` that: 1. Generates different values for the maximum depth ranging from `max_depth_start` to `max_depth_end`. 2. Trains a Decision Tree classifier for each depth value. 3. Evaluates and stores the training and testing accuracies for each model. 4. Plots the accuracies on a graph against the maximum depth using `matplotlib.pyplot.legend` to properly display the training and testing accuracy plots. Requirements: - The function should plot both training and testing accuracies. - Clearly label the graph, axes, and provide a legend. - You must use `matplotlib.pyplot.legend` to create the legend in the plot. # Function Signature ```python def decision_tree_complexity_curve(X_train, y_train, X_test, y_test, max_depth_start, max_depth_end): # Your code here ``` # Required Libraries - `numpy` - `matplotlib.pyplot` - `sklearn.tree.DecisionTreeClassifier` # Example Usage ```python import numpy as np import matplotlib.pyplot as plt from sklearn.tree import DecisionTreeClassifier from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split # Example dataset data = load_iris() X, y = data.data, data.target X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Function call decision_tree_complexity_curve(X_train, y_train, X_test, y_test, max_depth_start=1, max_depth_end=10) ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.tree import DecisionTreeClassifier def decision_tree_complexity_curve(X_train, y_train, X_test, y_test, max_depth_start, max_depth_end): train_accuracies = [] test_accuracies = [] for depth in range(max_depth_start, max_depth_end + 1): clf = DecisionTreeClassifier(max_depth=depth) clf.fit(X_train, y_train) train_accuracy = clf.score(X_train, y_train) test_accuracy = clf.score(X_test, y_test) train_accuracies.append(train_accuracy) test_accuracies.append(test_accuracy) plt.figure(figsize=(10, 6)) depths = range(max_depth_start, max_depth_end + 1) plt.plot(depths, train_accuracies, label=\'Training Accuracy\', marker=\'o\') plt.plot(depths, test_accuracies, label=\'Testing Accuracy\', marker=\'s\') plt.xlabel(\'Max Depth\') plt.ylabel(\'Accuracy\') plt.title(\'Decision Tree Complexity Curve\') plt.legend() plt.grid(True) plt.show()"},{"question":"**You have been hired to develop a simple library system for managing and issuing books to students using a console application. The main challenge is to represent the borrowing process in a simplistic manner using classes in Python. The system should keep track of the list of books available and the list of books borrowed by students. The functionalities you\'re expected to implement include adding new books, issuing books to students, and displaying the status of books. Your task is to define three classes: 1. `Book`: Represents a book with attributes title and author. 2. `Library`: Manages the collection of books and the issuing process. 3. `Student`: Represents a student who can borrow books. **Class definitions:** 1. **Class `Book`:** - **Attributes:** - `title` (string): Title of the book. - `author` (string): Author of the book. 2. **Class `Library`:** - **Attributes:** - `bookList` (list of `Book` objects): List of books available in the library. - `borrowedBooks` (dictionary): Dictionary to track books issued to students (key: student name, value: list of borrowed `Book` objects). - **Methods:** - `addBook`: Adds a new book to the library\'s collection. - `issueBook`: Issues a book to a student by moving it from `bookList` to `borrowedBooks`. - `status`: Displays the status of available and borrowed books. 3. **Class `Student`:** - **Attributes:** - `name` (string): Name of the student. - **Methods:** - `borrowBook`: Requests for a book from the library. **Function signatures:** Here is an outline of the code structure: ```python class Book: def __init__(self, title, author): self.title = title self.author = author class Library: def __init__(self): self.bookList = [] self.borrowedBooks = {} def addBook(self, book): # your code here def issueBook(self, book, student): # your code here def status(self): # your code here class Student: def __init__(self, name): self.name = name def borrowBook(self, library, book): # your code here ``` **Example:** ```python # Creating books book1 = Book(\\"Algorithms\\", \\"Robert Sedgewick\\") book2 = Book(\\"Clean Code\\", \\"Robert C. Martin\\") book3 = Book(\\"Introduction to Algorithms\\", \\"Thomas H. Cormen\\") # Create a library and add books library = Library() library.addBook(book1) library.addBook(book2) library.addBook(book3) # Create a student and borrow books student = Student(\\"Alice\\") student.borrowBook(library, book1) student.borrowBook(library, book2) # Display library status library.status() # Expected Output: # Available Books: # Introduction to Algorithms by Thomas H. Cormen # # Borrowed Books: # Alice has borrowed: # - Algorithms by Robert Sedgewick # - Clean Code by Robert C. Martin ``` **Constraints:** 1. Ensure the methods handle cases where a book is already borrowed or doesn\'t exist in the library. 2. Maintain the input type consistency for methods.","solution":"class Book: def __init__(self, title, author): self.title = title self.author = author class Library: def __init__(self): self.bookList = [] self.borrowedBooks = {} def addBook(self, book): self.bookList.append(book) def issueBook(self, book, student): if book in self.bookList: self.bookList.remove(book) if student.name not in self.borrowedBooks: self.borrowedBooks[student.name] = [] self.borrowedBooks[student.name].append(book) else: raise ValueError(\\"Book not available in library\\") def status(self): print(\\"Available Books:\\") for book in self.bookList: print(f\\"{book.title} by {book.author}\\") print(\\"nBorrowed Books:\\") for student, books in self.borrowedBooks.items(): print(f\\"{student} has borrowed:\\") for book in books: print(f\\"- {book.title} by {book.author}\\") class Student: def __init__(self, name): self.name = name def borrowBook(self, library, book): library.issueBook(book, self)"},{"question":"The function reads a CSV file, processes its data to calculate the sum of values in a specified column, and outputs the result. The file path and column name are given as parameters. The function should output with: float: The sum of the values in the specified column. You should write self-contained code starting with: ```python import csv def process_csv(file_path, column_name): ```","solution":"import csv def process_csv(file_path, column_name): Reads a CSV file, processes its data to calculate the sum of values in the specified column. Parameters: - file_path (str): The path to the CSV file. - column_name (str): The name of the column to sum up. Returns: - float: The sum of the values in the specified column. total_sum = 0.0 with open(file_path, mode=\'r\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: if column_name in row: total_sum += float(row[column_name]) else: raise ValueError(f\\"Column \'{column_name}\' not found in the CSV file.\\") return total_sum"},{"question":"Your task is to implement a function `sort_dict_by_value(d)` that takes a dictionary `d` as input and returns a new dictionary where the items are sorted by their values in ascending order. This function should preserve the type of the input dictionary (i.e., if the input dictionary is an `OrderedDict`, the returned dictionary should also be an `OrderedDict`; if the input dictionary is a regular dictionary, the returned dictionary should also be a regular dictionary). Given: - `d`: A dictionary where the values are sortable. The function should: 1. Determine the type of the input dictionary (either a regular dictionary or an `OrderedDict`). 2. Sort the dictionary items by their values in ascending order. 3. Construct a new dictionary of the same type as the input dictionary with the sorted items. Example: ```python from collections import OrderedDict d = {\'apple\': 3, \'banana\': 1, \'cherry\': 2} sorted_d = sort_dict_by_value(d) print(sorted_d) d = OrderedDict([(\'apple\', 3), (\'banana\', 1), (\'cherry\', 2)]) sorted_d = sort_dict_by_value(d) print(sorted_d) ``` Expected output: ```python {\'banana\': 1, \'cherry\': 2, \'apple\': 3} OrderedDict([(\'banana\', 1), (\'cherry\', 2), (\'apple\', 3)]) ```","solution":"from collections import OrderedDict def sort_dict_by_value(d): Sort the dictionary by its values in ascending order, and return a new dictionary of the same type. # Sorting the items of the dictionary by value sorted_items = sorted(d.items(), key=lambda item: item[1]) # Return a dictionary of the same type as the input dictionary if isinstance(d, OrderedDict): return OrderedDict(sorted_items) else: return dict(sorted_items)"},{"question":"--- Write a function `arithmetic_sequence(a, d, n)` that calculates the first `n` terms of an arithmetic sequence, and returns them in a list. An arithmetic sequence starts with an initial term `a` and has a common difference `d` between each consecutive term. Your function should perform the following: 1. Validate the input parameters to ensure `a`, `d`, and `n` are integers, raising a `TypeError` if they are not. 2. Raise a `ValueError` with a relevant error message if `n` is less than 1. 3. Compute the first `n` terms of the arithmetic sequence and return them as a list. **Input Data Example:** - a = 3 - d = 5 - n = 4 **Function Prototype:** ```python def arithmetic_sequence(a, d, n): pass ``` **Output:** The function should return: [3, 8, 13, 18] Note: - `3` is the first term. - The common difference is `5`, so each subsequent term increases by `5`: - `3 + 5 = 8` - `8 + 5 = 13` - `13 + 5 = 18`","solution":"def arithmetic_sequence(a, d, n): Computes the first n terms of an arithmetic sequence starting with `a` and a common difference of `d`. Parameters: a (int): The initial term of the arithmetic sequence. d (int): The common difference between terms. n (int): The number of terms to compute. Returns: list: The first n terms of the arithmetic sequence. Raises: TypeError: If `a`, `d`, or `n` are not integers. ValueError: If `n` is less than 1. # Validating the types of input parameters if not all(isinstance(i, int) for i in (a, d, n)): raise TypeError(\\"All parameters must be integers.\\") # Validating the value of n if n < 1: raise ValueError(\\"The number of terms `n` must be at least 1.\\") # Generating the first `n` terms of the arithmetic sequence return [a + i * d for i in range(n)]"},{"question":"You are tasked with implementing a function `calculate_word_ladder_steps` which computes the minimum number of transformations required to convert a start word to an end word, given that each intermediate word must exist in a specified word list and differ from the previous word by exactly one letter. # Function Definition ```python def calculate_word_ladder_steps(start, end, word_list): Computes the minimum number of transformations required to convert start to end. Parameters: - start (str): The starting word. - end (str): The target word. - word_list (list of str): List of valid intermediate words. Returns: - int: The minimum number of transformations required, or 0 if transformation is not possible. pass ``` # Explanation and Constraints: 1. **Transformation Rules**: - Each word in the transformation sequence must differ from the previous word by exactly one letter. - Each transformed word must exist in the provided word list. - Both the start and end words are guaranteed to have the same length. - The word list does not contain duplicate words. - The transformation process should be case-insensitive. 2. **Input Constraints**: - The word list will contain at most 1000 words. - Each word will be of lowercase alphabet characters and have a length of ( 1 leq text{length} leq 10 ). 3. **Output**: - Return the minimum number of transformations needed to convert start into end. - If no such transformation is possible, return 0. Here\'s an example of how this might be used: ```python start = \\"hit\\" end = \\"cog\\" word_list = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"] steps = calculate_word_ladder_steps(start, end, word_list) print(steps) # Output: 5 because \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\" ```","solution":"from collections import deque def calculate_word_ladder_steps(start, end, word_list): Computes the minimum number of transformations required to convert start to end. Parameters: - start (str): The starting word. - end (str): The target word. - word_list (list of str): List of valid intermediate words. Returns: - int: The minimum number of transformations required, or 0 if transformation is not possible. if start == end: return 0 word_set = set(word_list) if end not in word_set: return 0 # Use BFS to find the shortest path queue = deque([(start, 1)]) # Keep track of the word and the current step count while queue: current_word, steps = queue.popleft() # Try changing each character in the current word to every other character a-z for i in range(len(current_word)): for char in \'abcdefghijklmnopqrstuvwxyz\': if char != current_word[i]: next_word = current_word[:i] + char + current_word[i+1:] if next_word == end: return steps + 1 if next_word in word_set: word_set.remove(next_word) queue.append((next_word, steps + 1)) return 0"},{"question":"**Context:** Graphs are essential data structures in computer science, often used to represent networks, relationships, or pathways between elements. A common problem when dealing with graphs is finding the shortest path from one node to another. A popular algorithm for this is Dijkstra\'s algorithm, which efficiently finds the shortest paths from a source node to all other nodes in a weighted graph. **Libraries to Use:** We will utilize Python\'s `heapq` library, which provides an implementation of the heap queue algorithm, also known as the priority queue algorithm. **Task:** Write a function named `dijkstra_shortest_path` that: 1. Takes in a dictionary representing a weighted graph and a start node. 2. Computes the shortest path from the start node to all other nodes using Dijkstra\'s algorithm. 3. Returns a dictionary where the keys are node names and the values are the shortest path distances from the start node. **Function Signature:** ```python def dijkstra_shortest_path(graph: Dict[str, Dict[str, int]], start: str) -> Dict[str, int]: pass ``` **Inputs:** - `graph`: A dictionary where each key is a node and the value is another dictionary. The inner dictionary\'s keys are the neighboring nodes, and the values are the edge weights (e.g., `{\'A\': {\'B\': 1, \'C\': 4}, \'B\': {\'A\': 1, \'C\': 2, \'D\': 5}, \'C\': {\'A\': 4, \'B\': 2, \'D\': 1}, \'D\': {\'B\': 5, \'C\': 1}}`). - `start`: A string representing the starting node name (e.g., `\\"A\\"`). **Output:** - A dictionary where the keys are node names and the values are the shortest path distances from the start node. **Example:** ```python graph = { \'A\': {\'B\': 1, \'C\': 4}, \'B\': {\'A\': 1, \'C\': 2, \'D\': 5}, \'C\': {\'A\': 4, \'B\': 2, \'D\': 1}, \'D\': {\'B\': 5, \'C\': 1} } start = \'A\' distances = dijkstra_shortest_path(graph, start) print(distances) # Expected Output: {\'A\': 0, \'B\': 1, \'C\': 3, \'D\': 4} ``` This problem will help you understand the implementation of Dijkstra\'s algorithm, the use of priority queues, and handling weighted graphs in Python.","solution":"import heapq from typing import Dict def dijkstra_shortest_path(graph: Dict[str, Dict[str, int]], start: str) -> Dict[str, int]: Computes the shortest path from start node to all other nodes using Dijkstra\'s algorithm. :param graph: A dictionary representing the weighted graph. :param start: The starting node. :return: A dictionary representing the shortest path distances from the start node. # Initialize the priority queue with the starting node priority_queue = [(0, start)] # Initialize the distances dictionary with infinity for all nodes except start distances = {node: float(\'inf\') for node in graph} distances[start] = 0 # Set to track visited nodes visited = set() while priority_queue: # Extract the node with the smallest distance current_distance, current_node = heapq.heappop(priority_queue) if current_node in visited: continue visited.add(current_node) # Update distances for all neighbors of the current node for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"You are required to write a function called `sum_and_sort` that takes a list of tuples as input. Each tuple contains a string and an integer. The function should return a list of tuples sorted by the sum of ASCII values of characters in the string in descending order. If two tuples have the same sum, sort them by the integer value in ascending order. # Function Signature: ```python def sum_and_sort(data: list) -> list: ``` # Parameters: - `data` (list): A list of tuples, where each tuple consists of a string and an integer. Example of a tuple: `(\\"abc\\", 2)`. # Returns: - `list`: A list of tuples sorted based on the sum of ASCII values of characters in the string (descending order). If sums are equal, sort by the integer value in ascending order. # Example: ```python data = [(\\"abc\\", 2), (\\"def\\", 1), (\\"ghi\\", 3)] print(sum_and_sort(data)) # Output: [(\\"ghi\\", 3), (\\"def\\", 1), (\\"abc\\", 2)] data = [(\\"ab\\", 2), (\\"aa\\", 1), (\\"bb\\", 3)] print(sum_and_sort(data)) # Output: [(\\"bb\\", 3), (\\"ab\\", 2), (\\"aa\\", 1)] ``` # Constraints: - The input list will not be empty. - The strings will contain only lowercase alphabets. - Integers in the tuples will be positive.","solution":"def sum_and_sort(data: list) -> list: def ascii_sum(s: str) -> int: return sum(ord(char) for char in s) return sorted(data, key=lambda x: (-ascii_sum(x[0]), x[1])) # Example usage: data = [(\\"abc\\", 2), (\\"def\\", 1), (\\"ghi\\", 3)] print(sum_and_sort(data)) # Output: [(\\"ghi\\", 3), (\\"def\\", 1), (\\"abc\\", 2)] data = [(\\"ab\\", 2), (\\"aa\\", 1), (\\"bb\\", 3)] print(sum_and_sort(data)) # Output: [(\\"bb\\", 3), (\\"ab\\", 2), (\\"aa\\", 1)]"},{"question":"Write a function `decode_morse_code` that takes a single parameter: a string `message` encoded in Morse code. This function should perform the following tasks: 1. Define a dictionary containing the Morse code representation for each letter and digit. 2. Split the given `message` by spaces to parse individual Morse code letters. 3. Convert each Morse code letter to its corresponding English character using the defined dictionary. 4. Join the characters together to form the decoded message. The Morse code uses spaces to separate individual letters and slashes (\\"/\\") to separate words. Ensure that your function properly handles these delimiters. The purpose of this problem is to test your ability to translate Morse code into readable text using dictionaries and string manipulation in Python. Here is the function signature: ```python def decode_morse_code(message: str) -> str: # TODO: Implement the function ``` **Example**: ```python morse_message = \\"... --- ...\\" decoded_message = decode_morse_code(morse_message) print(decoded_message) # Should print \\"SOS\\" morse_message = \\"-- --- .-. ... . / -.-. --- -.. .\\" decoded_message = decode_morse_code(morse_message) print(decoded_message) # Should print \\"MORSE CODE\\" ```","solution":"def decode_morse_code(message: str) -> str: # Define the Morse code dictionary morse_dict = { \'.-\': \'A\', \'-...\': \'B\', \'-.-.\': \'C\', \'-..\': \'D\', \'.\': \'E\', \'..-.\': \'F\', \'--.\': \'G\', \'....\': \'H\', \'..\': \'I\', \'.---\': \'J\', \'-.-\': \'K\', \'.-..\': \'L\', \'--\': \'M\', \'-.\': \'N\', \'---\': \'O\', \'.--.\': \'P\', \'--.-\': \'Q\', \'.-.\': \'R\', \'...\': \'S\', \'-\': \'T\', \'..-\': \'U\', \'...-\': \'V\', \'.--\': \'W\', \'-..-\': \'X\', \'-.--\': \'Y\', \'--..\': \'Z\', \'-----\': \'0\', \'.----\': \'1\', \'..---\': \'2\', \'...--\': \'3\', \'....-\': \'4\', \'.....\': \'5\', \'-....\': \'6\', \'--...\': \'7\', \'---..\': \'8\', \'----.\': \'9\' } # Split the message by slashes to separate words and by spaces to separate letters words = message.split(\' / \') decoded_message = [] for word in words: letters = word.split() decoded_word = \'\'.join(morse_dict[letter] for letter in letters) decoded_message.append(decoded_word) return \' \'.join(decoded_message)"},{"question":"You are required to implement a function called `odd_even_separator` that takes a list of integers and separates them into two lists: one containing all the odd numbers and the other all the even numbers. The integers in the resulting lists should maintain the relative order of their first appearance in the input list. **Function Signature:** ```python def odd_even_separator(numbers): pass ``` **Input:** - `numbers` (list of int): A list of integers which can contain both odd and even numbers. **Output:** - Returns a tuple of two lists: the first list contains all the odd numbers in the original order, and the second list contains all the even numbers in the original order. **Example:** ```python numbers = [4, 7, 2, 3, 9, 8, 10, 1] odd_list, even_list = odd_even_separator(numbers) print(\\"Odd Numbers:\\", odd_list) print(\\"Even Numbers:\\", even_list) ``` **Expected Output:** ```python Odd Numbers: [7, 3, 9, 1] Even Numbers: [4, 2, 8, 10] ``` **Constraints:** - The input list can have a length between 1 and 10^5. - The elements in the input list can range between -10^6 and 10^6. - The space complexity of your solution should be O(n), where n is the length of the input list.","solution":"def odd_even_separator(numbers): Separates given list into two lists: one containing odd numbers and the other containing even numbers. Args: numbers (list of int): A list of integers. Returns: tuple: A tuple containing two lists - first list with odd numbers and second list with even numbers. odd_numbers = [] even_numbers = [] for number in numbers: if number % 2 == 0: even_numbers.append(number) else: odd_numbers.append(number) return (odd_numbers, even_numbers)"},{"question":"**Problem Title**: String Pattern Matching with Wildcards **Objective**: You are tasked with writing a function `is_match` that checks if a given text matches a pattern where the pattern includes the characters `?` and `*`. The `?` character in the pattern can match any single character, while the `*` character can match any sequence of characters (including an empty sequence). The function should implement a dynamic programming approach to efficiently determine whether the pattern matches the entire text. **Function Signature**: ```python def is_match(text: str, pattern: str) -> bool: pass ``` **Parameters**: - `text` (str): The text to match against the pattern. - `pattern` (str): The pattern containing `?` and `*` wildcards. **Requirements**: 1. Implement the function using dynamic programming to ensure efficient matching. 2. Create a 2D table where `dp[i][j]` is `True` if the first `i` characters in the text match the first `j` characters of the pattern. 3. Initialize the table and fill it according to the matching rules: - If the current characters in the text and pattern match, or the pattern character is `?`, use the value from the previous indices. - If the pattern character is `*`, it can match zero or more characters: `dp[i][j]` can be `True` if `dp[i-1][j]` (matching one more character) or `dp[i][j-1]` (ignoring the `*`) is `True`. 4. The answer should be in `dp[len(text)][len(pattern)]`. **Example Usage**: ```python # Example pattern matching print(is_match(\\"adceb\\", \\"*a*b\\")) # Output: True print(is_match(\\"acdcb\\", \\"a*c?b\\")) # Output: False ``` **Note**: Avoid using built-in regular expression libraries or functions directly designed to handle wildcards. The goal is to implement the matching logic using a dynamic programming approach.","solution":"def is_match(text: str, pattern: str) -> bool: m, n = len(text), len(pattern) # Create a DP table with (m+1) x (n+1) dimensions, initialized to False. dp = [[False] * (n + 1) for _ in range(m + 1)] # The empty pattern matches the empty text. dp[0][0] = True # Populate first row (where text is empty). for j in range(1, n + 1): if pattern[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] # Populate the DP table. for i in range(1, m + 1): for j in range(1, n + 1): if pattern[j - 1] == \'*\': dp[i][j] = dp[i][j - 1] or dp[i - 1][j] elif pattern[j - 1] == \'?\' or pattern[j - 1] == text[i - 1]: dp[i][j] = dp[i - 1][j - 1] return dp[m][n]"},{"question":"Given a list of dictionaries representing employees, write a function to calculate the average salary of employees grouped by their department. The function should take a list of dictionaries and return a new dictionary where the keys are department names and the values are the average salaries of employees in those departments. Each employee dictionary will have the keys \'name\', \'department\', and \'salary\'. The function should output: A dictionary with department names as keys and their corresponding average salaries as values. You should write self-contained code starting with: ``` def calculate_department_salaries(employees): ```","solution":"def calculate_department_salaries(employees): Calculate the average salary of employees grouped by their department. Args: employees (list): A list of dictionaries where each dictionary contains \'name\', \'department\', and \'salary\' keys. Returns: dict: A dictionary with department names as keys and their corresponding average salaries as values. from collections import defaultdict department_salaries = defaultdict(list) for employee in employees: department = employee[\'department\'] salary = employee[\'salary\'] department_salaries[department].append(salary) average_salaries = {} for department, salaries in department_salaries.items(): average_salaries[department] = sum(salaries) / len(salaries) return average_salaries"},{"question":"You are given a list of strings representing file names with extensions. Your task is to write a function that performs the following operations: 1. Group the file names based on their extensions. 2. Within each group, sort the file names first by their base name (the part before the dot) in ascending order, then by their full name (including the extension which remains unchanged) in ascending order. 3. Return a dictionary where the keys are the file extensions and the values are lists of the sorted file names (including extensions). You must handle the sorting using standard string operations and dictionary manipulation in Python. Function Signature: ```python def group_and_sort_files(file_names: list[str]) -> dict[str, list[str]]: ``` Input: - `file_names`: A list of file name strings (e.g., `[\'index.html\', \'main.css\', \'about.js\', \'style.css\', \'script.js\']`) Output: - Returns a dictionary where keys are file extensions and values are lists of file names sorted under each extension. Example: ```python input_files = [\'index.html\', \'main.css\', \'about.js\', \'style.css\', \'script.js\'] print(group_and_sort_files(input_files)) # Expected Output: # { # \'html\': [\'index.html\'], # \'css\': [\'main.css\', \'style.css\'], # \'js\': [\'about.js\', \'script.js\'] # } ```","solution":"def group_and_sort_files(file_names: list[str]) -> dict[str, list[str]]: from collections import defaultdict files_by_extension = defaultdict(list) # Group the files by their extensions for file_name in file_names: base_name, extension = file_name.rsplit(\'.\', 1) files_by_extension[extension].append((base_name, file_name)) # Sort each group sorted_files_by_extension = {} for extension, files in files_by_extension.items(): # Sort first by base name, then by full name sorted_files = sorted(files, key=lambda x: (x[0], x[1])) # Extract only the full file names sorted_files_by_extension[extension] = [file[1] for file in sorted_files] return sorted_files_by_extension # Example usage: # input_files = [\'index.html\', \'main.css\', \'about.js\', \'style.css\', \'script.js\'] # print(group_and_sort_files(input_files)) # # Expected Output: # # { # # \'html\': [\'index.html\'], # # \'css\': [\'main.css\', \'style.css\'], # # \'js\': [\'about.js\', \'script.js\'] # # }"},{"question":"You are to implement a function to read a CSV file, process the data, and output specific metrics. Given a CSV file that contains sales data with the following columns: `Date`, `Product`, `Quantity`, and `Price`, write a function that calculates and prints the total sales per product. # Requirements: 1. Read the CSV file and parse its contents. 2. Calculate the total sales for each product, where the total sales for a product are defined as the sum of the products of `Quantity` and `Price`. 3. Print each product\'s name followed by its total sales. # Function Signature: ```python def calculate_sales(filepath: str) -> None: pass ``` # Example CSV Content: ``` Date,Product,Quantity,Price 2023-01-01,Widget,2,25.00 2023-01-02,Gadget,1,50.00 2023-01-03,Widget,1,25.00 2023-01-04,Doodad,3,10.00 ``` # Example Usage: ```python filepath = \\"sales_data.csv\\" calculate_sales(filepath) ``` # Example Output: ``` Widget: 75.00 Gadget: 50.00 Doodad: 30.00 ``` # Notes: - You may assume the CSV file is well-formed and does not contain any missing or malformed data. - The function should not return anything; it should only print the computations. - Handle potential file I/O errors gracefully by printing an appropriate error message. - You can assume the CSV file is not too large to be loaded into memory at once.","solution":"import csv def calculate_sales(filepath: str) -> None: Calculate and print the total sales per product from a CSV file. Args: filepath (str): Path to the CSV file containing sales data. Returns: None sales_data = {} try: with open(filepath, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: product = row[\'Product\'] quantity = int(row[\'Quantity\']) price = float(row[\'Price\']) if product not in sales_data: sales_data[product] = 0.0 sales_data[product] += quantity * price except FileNotFoundError: print(f\\"Error: File \'{filepath}\' not found.\\") return except Exception as e: print(f\\"Error: {e}\\") return for product, total_sales in sales_data.items(): print(f\\"{product}: {total_sales:.2f}\\")"},{"question":"You are required to write a Python function `add_to_nested_dict()` that takes three parameters: a nested dictionary `d`, a list of keys `keys`, and a value `value`. The function should navigate through the dictionary using the list of keys and set the given value at the corresponding location. If any key along the path does not exist, a new dictionary should be created at that key. Your task is to properly traverse the nested dictionary and update or create the necessary structure to set the value at the target location. **Function Signature:** ```python def add_to_nested_dict(d: dict, keys: list, value: any) -> None: ``` **Requirements:** 1. Traverse the nested dictionary `d` using each key in the `keys` list in sequence. 2. If a key does not exist at any point in the traversal, create a new empty dictionary at that key. 3. Set the final key in the list to the given value. 4. The function does not return anything but updates the input dictionary in-place. **Example:** ```python Example input: d = {\'a\': {\'b\': {\'c\': 1}}} keys = [\'a\', \'b\', \'d\'] value = 2 Expected Output: Updated dictionary: {\'a\': {\'b\': {\'c\': 1, \'d\': 2}}} ``` In this problem, you will learn how to work with nested dictionaries in Python, including navigating through and modifying their content dynamically.","solution":"def add_to_nested_dict(d: dict, keys: list, value: any) -> None: Traverse the nested dictionary d using each key in the keys list in sequence. If a key does not exist at any point in the traversal, create a new empty dictionary at that key. Set the final key in the list to the given value. current_level = d for key in keys[:-1]: if key not in current_level: current_level[key] = {} current_level = current_level[key] current_level[keys[-1]] = value"},{"question":"You are tasked to implement a function named `average_rating` that computes the average rating for a list of products. Each product is represented by a dictionary containing its name and a list of ratings. The function should return a new list of dictionaries, where each dictionary holds the product name and its average rating rounded to two decimal places. If a product has no ratings, its average should be considered 0.0. # Function Signature ```python def average_rating(products: List[Dict[str, Union[str, List[int]]]]) -> List[Dict[str, Union[str, float]]]: ... ``` # Parameters - `products` (List[Dict[str, Union[str, List[int]]]]): A list of dictionaries, each containing: - `name` (str): The name of the product. - `ratings` (List[int]): A list of integer ratings for the product. # Returns - List[Dict[str, Union[str, float]]]: A list of dictionaries, where each contains: - `name` (str): The name of the product. - `average_rating` (float): The computed average rating of the product, rounded to two decimal places. # Examples ```python # Example 1 products = [ {\\"name\\": \\"Product A\\", \\"ratings\\": [5, 4, 3, 5]}, {\\"name\\": \\"Product B\\", \\"ratings\\": [2, 3]}, {\\"name\\": \\"Product C\\", \\"ratings\\": []} ] print(average_rating(products)) # Output: [{\'name\': \'Product A\', \'average_rating\': 4.25}, {\'name\': \'Product B\', \'average_rating\': 2.5}, {\'name\': \'Product C\', \'average_rating\': 0.0}] # Example 2 products = [ {\\"name\\": \\"Product X\\", \\"ratings\\": [5, 5, 5]}, {\\"name\\": \\"Product Y\\", \\"ratings\\": [1]}, {\\"name\\": \\"Product Z\\", \\"ratings\\": [4, 3, 3, 4, 5]} ] print(average_rating(products)) # Output: [{\'name\': \'Product X\', \'average_rating\': 5.0}, {\'name\': \'Product Y\', \'average_rating\': 1.0}, {\'name\': \'Product Z\', \'average_rating\': 3.8}] ``` # Notes - If the `ratings` list for a product is empty, the average rating should be 0.0. - Ensure to handle the edge cases appropriately and validate input types wherever necessary.","solution":"from typing import List, Dict, Union def average_rating(products: List[Dict[str, Union[str, List[int]]]]) -> List[Dict[str, Union[str, float]]]: result = [] for product in products: name = product[\'name\'] ratings = product.get(\'ratings\', []) if ratings: avg_rating = round(sum(ratings) / len(ratings), 2) else: avg_rating = 0.0 result.append({\'name\': name, \'average_rating\': avg_rating}) return result"},{"question":"You are asked to create a function that simulates a turn-based battle between two characters in a role-playing game. Each character has a set amount of health points (HP), an attack value, and a defense value. Each turn, a character attacks the other, and the amount of damage dealt is equal to the attacker\'s attack value minus the defender\'s defense value. If the damage dealt is less than or equal to zero, it should be set to one. The battle continues until one character\'s HP drops to zero or below. # Requirements: 1. Implement a function named `battle_simulation()`. 2. The function should accept two dictionaries, each representing a character with the keys \'name\', \'hp\', \'attack\', and \'defense\'. 3. Each dictionary should look like `{\'name\': \'CharacterName\', \'hp\': 100, \'attack\': 20, \'defense\': 5}`. 4. The function should simulate the battle, with characters taking turns to attack, starting with the first character. 5. On each turn, print the attacking character\'s name, the amount of damage dealt, and the defending character\'s remaining HP. 6. The battle should end as soon as one character\'s HP drops to zero or below. 7. The function should return the name of the winning character. # Function Signature: ```python def battle_simulation(character1: dict, character2: dict) -> str: ``` # Example: ```python character1 = {\'name\': \'Knight\', \'hp\': 120, \'attack\': 30, \'defense\': 10} character2 = {\'name\': \'Orc\', \'hp\': 100, \'attack\': 40, \'defense\': 5} winner = battle_simulation(character1, character2) print(f\\"The winner is: {winner}\\") # Example output: # Knight attacks Orc for 25 damage. Orc\'s remaining HP: 75 # Orc attacks Knight for 30 damage. Knight\'s remaining HP: 90 # Knight attacks Orc for 25 damage. Orc\'s remaining HP: 50 # Orc attacks Knight for 30 damage. Knight\'s remaining HP: 60 # Knight attacks Orc for 25 damage. Orc\'s remaining HP: 25 # Orc attacks Knight for 30 damage. Knight\'s remaining HP: 30 # Knight attacks Orc for 25 damage. Orc\'s remaining HP: 0 # The winner is: Knight ``` **Note**: Ensure the function handles edge cases such as negative or zero damage and proper turn switching.","solution":"def battle_simulation(character1: dict, character2: dict) -> str: Simulates a turn-based battle between two characters. Args: - character1 (dict): The first character with keys \'name\', \'hp\', \'attack\', \'defense\'. - character2 (dict): The second character with keys \'name\', \'hp\', \'attack\', \'defense\'. Returns: - str: The name of the winning character. def calculate_damage(attacker, defender): damage = max(1, attacker[\'attack\'] - defender[\'defense\']) return damage turn = 1 while character1[\'hp\'] > 0 and character2[\'hp\'] > 0: if turn % 2 != 0: # character1\'s turn damage = calculate_damage(character1, character2) character2[\'hp\'] -= damage print(f\\"{character1[\'name\']} attacks {character2[\'name\']} for {damage} damage. {character2[\'name\']}\'s remaining HP: {character2[\'hp\']}\\") if character2[\'hp\'] <= 0: return character1[\'name\'] else: # character2\'s turn damage = calculate_damage(character2, character1) character1[\'hp\'] -= damage print(f\\"{character2[\'name\']} attacks {character1[\'name\']} for {damage} damage. {character1[\'name\']}\'s remaining HP: {character1[\'hp\']}\\") if character1[\'hp\'] <= 0: return character2[\'name\'] turn += 1"},{"question":"You are developing a tool to analyze social network data, and you need to implement a function that identifies the most influential user within a given set of users and their interactions. An influential user is defined as the user with the highest number of direct connections (friends). Write a function called `find_most_influential_user` that takes a dictionary as input, where each key is a user (represented as a string) and the corresponding value is a list of friends (each friend is also represented as a string). Your goal is to determine which user has the most friends and return that user\'s name. In case of a tie, return any one of the most influential users. For example, given the following input: ```python user_data = { \'Alice\': [\'Bob\', \'Charlie\', \'David\'], \'Bob\': [\'Alice\', \'Eve\'], \'Charlie\': [\'Alice\'], \'David\': [\'Alice\'], \'Eve\': [\'Bob\'] } ``` Your function should return `\'Alice\'` since Alice has the most friends (3 in total). Here is the function signature you need to implement: ```python def find_most_influential_user(user_data): pass ```","solution":"def find_most_influential_user(user_data): Returns the user with the highest number of direct connections (friends). Parameters: user_data (dict): A dictionary where each key is a user and the value is a list of friends. Returns: str: The name of the user with the most friends. if not user_data: return None most_influential_user = None max_friends = -1 for user, friends in user_data.items(): if len(friends) > max_friends: most_influential_user = user max_friends = len(friends) return most_influential_user"},{"question":"Given a list of points represented by their (x, y, z) coordinates in a 3D space, write a function `find_furthest_point` that finds the point in the list that is furthest away from the origin. **Requirements:** 1. You must use the `math` library, specifically the `sqrt` function to calculate the Euclidean distance. 2. The function should return the coordinates of the point that is furthest from the origin. Here\'s a skeleton of the `find_furthest_point` function with necessary details: - **Function Name:** `find_furthest_point` - **Parameters:** - `points` - A list of tuples, each representing a point\'s (x, y, z) coordinates in 3D space. - **Returns:** - A tuple representing the coordinates of the point that is furthest from the origin. **The formula for the Euclidean distance from the origin (0, 0, 0) to a point (x, y, z) is:** [ text{distance} = sqrt{x^2 + y^2 + z^2} ] # Example: ```python import math points = [(1, 2, 3), (4, 0, 0), (0, 5, 6), (2, 2, 8)] furthest_point = find_furthest_point(points) print(furthest_point) # Expected output would be the coordinates of the point that is furthest from the origin, e.g., (2, 2, 8) ``` # Constraints: - You can assume that the list `points` contains at least one tuple with valid integer or float coordinates.","solution":"import math def find_furthest_point(points): Returns the point (as a tuple of x, y, z) that is furthest from the origin in a list of 3D points. max_distance = -1 furthest_point = None for point in points: x, y, z = point distance = math.sqrt(x*x + y*y + z*z) if distance > max_distance: max_distance = distance furthest_point = point return furthest_point"},{"question":"In this problem, you are asked to implement a text editor with simple find and replace functionality. The editor should support loading an initial text, performing find operations to locate all occurrences of a substring, and executing replace operations to replace all occurrences of a substring with another string. You need to implement a class named `SimpleTextEditor` with the following methods: - `__init__`: Initializes the editor with an empty text. - `load_text(text: str)`: Loads the initial text into the editor. - `find(query: str) -> list`: Finds all starting indices of the substring `query` in the text and returns them as a list. - `replace(old: str, new: str) -> str`: Replaces all occurrences of the substring `old` with the string `new`, returns the new text. # Class Signature ```python class SimpleTextEditor: def __init__(self): pass def load_text(self, text: str): pass def find(self, query: str) -> list: pass def replace(self, old: str, new: str) -> str: pass ``` # Example Usage ```python editor = SimpleTextEditor() editor.load_text(\\"This is a simple text editor. This editor is simple but powerful.\\") print(editor.find(\\"simple\\")) # Output: [10, 41] print(editor.replace(\\"editor\\", \\"application\\")) # Output: \\"This is a simple text application. This application is simple but powerful.\\" ``` # Notes 1. The `load_text` method stores the input `text` to an instance variable. 2. The `find` method should return a list of indices where the `query` substring starts in the current text. 3. The `replace` method replaces all occurrences of `old` with `new` in the current text, updates the text accordingly, and returns the modified text.","solution":"class SimpleTextEditor: def __init__(self): self.text = \\"\\" def load_text(self, text: str): self.text = text def find(self, query: str) -> list: start = 0 indices = [] while True: start = self.text.find(query, start) if start == -1: return indices indices.append(start) start += len(query) def replace(self, old: str, new: str) -> str: self.text = self.text.replace(old, new) return self.text # Example Usage editor = SimpleTextEditor() editor.load_text(\\"This is a simple text editor. This editor is simple but powerful.\\") print(editor.find(\\"simple\\")) # Output: [10, 41] print(editor.replace(\\"editor\\", \\"application\\")) # Output: \\"This is a simple text application. This application is simple but powerful.\\""},{"question":"You need to write a Python function that generates a report of a student\'s grades based on the assignments they have completed. The student data is given in a CSV file, and you must use the `pandas` library to perform the necessary operations. The function should be named `generate_grade_report` and should adhere to the following specifications: **Function Signature:** ```python def generate_grade_report(student_name: str) -> pd.DataFrame: Generate a grade report for a specific student. Args: student_name (str): The name of the student for whom the report is generated. Returns: report (pd.DataFrame): Pandas DataFrame containing the student\'s grades and overall performance. ``` **Function Description:** 1. **Load Data:** The function should load the data from a CSV file named \'grades.csv\'. This file contains columns for \'Student Name\', \'Assignment\', \'Grade\', and \'Total Possible\'. 2. **Filter Student Records:** Filter the dataset to include only rows corresponding to the specified student name. 3. **Calculate Percentage:** For each assignment, calculate the percentage grade as (Grade / Total Possible) * 100 and add this as a new column \'Percentage\'. 4. **Calculate Average:** Calculate the overall average percentage grade for the student, and append it to the end of the report as a new row with \'Assignment\' value \'Overall Average\'. 5. **Generate Report:** The final DataFrame should contain the \'Assignment\', \'Grade\', \'Total Possible\', and \'Percentage\' columns for each assignment, as well as the overall average. **Constraints:** - Use `pandas.read_csv` to load the data. - Assume the \'grades.csv\' file exists in the current directory and contains valid data. **Example Usage:** ```python report = generate_grade_report(\'John Doe\') print(report) ```","solution":"import pandas as pd def generate_grade_report(student_name: str) -> pd.DataFrame: Generate a grade report for a specific student. Args: student_name (str): The name of the student for whom the report is generated. Returns: report (pd.DataFrame): Pandas DataFrame containing the student\'s grades and overall performance. # Load the data from \'grades.csv\' df = pd.read_csv(\'grades.csv\') # Filter records for the given student name student_df = df[df[\'Student Name\'] == student_name].copy() # Calculate the percentage for each assignment student_df[\'Percentage\'] = (student_df[\'Grade\'] / student_df[\'Total Possible\']) * 100 # Calculate the overall average percentage overall_average = student_df[\'Percentage\'].mean() # Append the overall average to the DataFrame overall_average_row = pd.DataFrame([{ \'Student Name\': student_name, \'Assignment\': \'Overall Average\', \'Grade\': \'\', \'Total Possible\': \'\', \'Percentage\': overall_average }]) report = pd.concat([student_df, overall_average_row], ignore_index=True) return report[[\'Assignment\', \'Grade\', \'Total Possible\', \'Percentage\']]"},{"question":"Write a function that simulates a game in which two players take turns to remove stones from a pile. Each player can remove between 1 and 3 stones during their turn. The player who removes the last stone wins the game. # Function Signature ```python def stone_game(pile: int) -> str: Determine the winner of the stone game given the initial number of stones in the pile. Parameters: - pile (int): The initial number of stones in the pile. Returns: - str: The winner of the game (\\"Player 1\\" or \\"Player 2\\"). ``` # Requirements 1. Player 1 starts the game first. 2. Each player can only remove between 1 to 3 stones from the pile on their turn. 3. The player who removes the last stone is considered the winner. 4. Assume both players are playing optimally. # Example - If the initial `pile` is 4, Player 1 can take all 4 stones and win the game. Thus, the function should return \\"Player 1\\". - If the initial `pile` is 7, Player 1 can take 3 stones first, leaving 4 stones. At this point, Player 2 will be left in a situation similar to the one mentioned above, eventually leading to Player 1 winning. Thus, the function should return \\"Player 1\\". # Tips 1. Think about the possible scenarios leading to a win for each player. 2. Consider using dynamic programming or mathematical patterns to find the optimal moves and determine the winner.","solution":"def stone_game(pile: int) -> str: Determine the winner of the stone game given the initial number of stones in the pile. Parameters: - pile (int): The initial number of stones in the pile. Returns: - str: The winner of the game (\\"Player 1\\" or \\"Player 2\\"). # If the initial number of stones is divisible by 4, Player 2 will win. # because Player 1 will always make the pile to be a multiple of 4 after Player 1\'s turn. # Otherwise, Player 1 can force a win. if pile % 4 == 0: return \\"Player 2\\" else: return \\"Player 1\\""},{"question":"You are asked to write a function that processes a list of dictionaries containing information about various products and filters the list based on specific criteria. The function should return a new list containing only the dictionaries that meet the given conditions. Here are the detailed requirements: **Function Name:** `filter_products` **Parameters:** - `products` (list of dict): A list of dictionaries where each dictionary represents a product with the following keys: `name` (str), `category` (str), `price` (float), and `in_stock` (bool). - `min_price` (float): The minimum price threshold for filtering products. - `max_price` (float): The maximum price threshold for filtering products. - `category` (str): The category to which the product should belong. If `None`, the category should not be considered in the filtering. - `in_stock` (bool): The stock status that the product should meet (either `True` for in stock or `False` for out of stock). **Function Description:** 1. Iterate through the list of dictionaries (`products`). 2. For each product, check if its `price` is within the range defined by `min_price` and `max_price`. 3. If `category` is not `None`, check if the product belongs to the specified `category`. 4. Check if the product\'s `in_stock` status matches the provided `in_stock` parameter. 5. If a product satisfies all the above conditions, include it in the result list. 6. Return the filtered list of products. **Example:** ```python products = [ {\\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"price\\": 999.99, \\"in_stock\\": True}, {\\"name\\": \\"Book\\", \\"category\\": \\"Books\\", \\"price\\": 19.99, \\"in_stock\\": True}, {\\"name\\": \\"Smartphone\\", \\"category\\": \\"Electronics\\", \\"price\\": 499.99, \\"in_stock\\": False}, {\\"name\\": \\"Headphones\\", \\"category\\": \\"Electronics\\", \\"price\\": 29.99, \\"in_stock\\": True}, {\\"name\\": \\"Coffee Mug\\", \\"category\\": \\"Home\\", \\"price\\": 8.99, \\"in_stock\\": True} ] # Filter products with price between 10 and 500, category \\"Electronics\\", and in stock status True. filtered_products = filter_products(products, min_price=10, max_price=500, category=\\"Electronics\\", in_stock=True) print(filtered_products) # Output: [{\\"name\\": \\"Headphones\\", \\"category\\": \\"Electronics\\", \\"price\\": 29.99, \\"in_stock\\": True}] ```","solution":"def filter_products(products, min_price, max_price, category, in_stock): Filters the products based on price range, category, and stock status. Parameters: - products (list of dict): A list of dictionaries where each dictionary represents a product with the following keys: \'name\' (str), \'category\' (str), \'price\' (float), and \'in_stock\' (bool). - min_price (float): The minimum price threshold for filtering products. - max_price (float): The maximum price threshold for filtering products. - category (str): The category to which the product should belong. If None, the category should not be considered in the filtering. - in_stock (bool): The stock status that the product should meet (either True for in stock or False for out of stock). Returns: list of dict: A list of dictionaries representing the filtered products. filtered_products = [] for product in products: if min_price <= product[\'price\'] <= max_price and product[\'in_stock\'] == in_stock: if category is None or product[\'category\'] == category: filtered_products.append(product) return filtered_products"},{"question":"# Problem Statement: You are required to write a Python function `calculate_roots_quadratic(a, b, c)` that takes the coefficients of a quadratic equation and returns the roots. The quadratic equation is given by: [ ax^2 + bx + c = 0 ] # Inputs: 1. `a`: A float representing the coefficient of (x^2). 2. `b`: A float representing the coefficient of (x). 3. `c`: A float representing the constant term. # Output: - A tuple containing the roots of the quadratic equation. The roots should be returned as complex numbers if the equation has complex roots. # Requirements: - Make use of the Python `cmath` library to handle complex numbers. - Ensure the returned roots are sorted in ascending order, based on their real part, and in case of a tie, their imaginary part. # Example: Consider the quadratic equation (2x^2 + 4x + 2 = 0): ```python calculate_roots_quadratic(2, 4, 2) ``` The result should be: ```python ((-1+0j), (-1+0j)) ``` Consider another quadratic equation (1x^2 + 0x - 4 = 0): ```python calculate_roots_quadratic(1, 0, -4) ``` The result should be: ```python ((-2+0j), (2+0j)) ``` # Function Signature: ```python from cmath import sqrt def calculate_roots_quadratic(a: float, b: float, c: float) -> tuple: # Implementation here ```","solution":"from cmath import sqrt def calculate_roots_quadratic(a: float, b: float, c: float) -> tuple: Returns the roots of the quadratic equation ax^2 + bx + c = 0. The roots are sorted in ascending order based on their real part. In case of a tie, they are sorted based on their imaginary part. discriminant = b**2 - 4*a*c root1 = (-b + sqrt(discriminant)) / (2 * a) root2 = (-b - sqrt(discriminant)) / (2 * a) # Sorting the roots based on their real and imaginary parts return tuple(sorted([root1, root2], key=lambda x: (x.real, x.imag)))"},{"question":"Write a function named `extract_elements` that filters a given list of integers, retaining only the elements that are even and greater than 10. Specifically, the function should: - Take a list of integers as input. - Iterate through the list and select the elements that are both even and greater than 10. - Return a new list containing only these filtered elements. Make sure to handle edge cases, such as an empty list, a list with no even numbers, or a list where no numbers are greater than 10. Function Signature: ```python def extract_elements(lst: list) -> list: # Your code goes here ```","solution":"def extract_elements(lst: list) -> list: Filters a given list of integers, retaining only the elements that are even and greater than 10. Parameters: lst (list): List of integers. Returns: list: New list containing elements that are even and greater than 10. return [x for x in lst if x > 10 and x % 2 == 0]"},{"question":"You are required to write a Python function called `find_odd_digit_numbers` that identifies and returns a list of integers from a given list of numbers where each integer is composed only of odd digits. The input to this function is a list of integers named `input_numbers`. Here is what the function needs to do: 1. **Filter the integers**: Iterate through the `input_numbers` list and check which numbers consist solely of odd digits (1, 3, 5, 7, 9). 2. **Return the list**: Return a list of these integers. # Function Signature ```python def find_odd_digit_numbers(input_numbers: list) -> list: pass ``` # Example ```python input_numbers = [135, 246, 579, 123, 531] result = find_odd_digit_numbers(input_numbers) print(result) # Expected output: [135, 579, 531] ``` In this example, the function `find_odd_digit_numbers` checks each number in the `input_numbers` list to see if it is composed only of odd digits. The numbers 135, 579, and 531 meet this criterion, so the function returns `[135, 579, 531]`. # Constraints - `input_numbers` will be a non-empty list with integer values ranging from -10^6 to 10^6. - The function should handle both positive and negative integers. - Ensure that the function\'s implementation is efficient in terms of time complexity. - The code should not use any external libraries apart from the standard Python library. Your implementation should be clear and concise, properly handling the specified requirements.","solution":"def find_odd_digit_numbers(input_numbers): def is_odd_digit_number(num): for digit in str(abs(num)): if int(digit) % 2 == 0: return False return True return [num for num in input_numbers if is_odd_digit_number(num)]"},{"question":"In this programming exercise, we will focus on string manipulation and palindrome detection. A palindrome is a sequence that reads the same backward as forward, ignoring spaces, punctuation, and case. You are required to write a function named `is_phrase_palindrome` that will take a single string `phrase` as input. The function should return `True` if the input string is a palindrome and `False` otherwise. You should ignore spaces, punctuation, and case when determining if the phrase is a palindrome. **Specific Requirements**: 1. Ignore spaces, punctuation, and case in the input string while checking for palindrome. 2. Return `True` if the cleaned input string is a palindrome, `False` otherwise. **Function Signature**: ```python import string def is_phrase_palindrome(phrase: str) -> bool: pass ``` **Example**: ```python phrase1 = \\"A man, a plan, a canal, Panama\\" phrase2 = \\"No \'x\' in Nixon\\" phrase3 = \\"Hello, World\\" print(is_phrase_palindrome(phrase1)) # Output: True print(is_phrase_palindrome(phrase2)) # Output: True print(is_phrase_palindrome(phrase3)) # Output: False ``` In this example: 1. `phrase1`, after removing spaces, punctuation, and converting to lowercase becomes \\"amanaplanacanalpanama\\", which is a palindrome. 2. `phrase2`, after cleaning, becomes \\"noxinnixon\\", which is a palindrome. 3. `phrase3`, after cleaning, becomes \\"helloworld\\", which is not a palindrome.","solution":"import string def is_phrase_palindrome(phrase: str) -> bool: Checks if a given phrase is a palindrome, ignoring spaces, punctuation, and case. # Remove punctuation, spaces and convert to lowercase cleaned_phrase = \'\'.join(char.lower() for char in phrase if char.isalnum()) # Check if the cleaned phrase is a palindrome return cleaned_phrase == cleaned_phrase[::-1]"},{"question":"You are asked to design a Python function named `filter_and_sort`, which will filter and sort a list of dictionaries. Each dictionary in the list will contain two keys: `\\"name\\"` and `\\"age\\"`. The function should accept two parameters: a list of dictionaries (`people`) and an integer `min_age`. The function should follow these steps: 1. Filter out dictionaries where the `\\"age\\"` is less than `min_age`. 2. Sort the remaining dictionaries in descending order by `\\"age\\"`. 3. Return the filtered and sorted list. **Detailed requirements:** - Ensure that the function does not modify the original input list. - Use list comprehension for filtering the list. - Utilize the `sorted` function with an appropriate Lambda expression for sorting. Here\'s a small example of how the function should work: ```python # Example input people = [ {\\"name\\": \\"Alice\\", \\"age\\": 28}, {\\"name\\": \\"Bob\\", \\"age\\": 25}, {\\"name\\": \\"Charlie\\", \\"age\\": 30}, {\\"name\\": \\"David\\", \\"age\\": 22} ] # Example Usage result = filter_and_sort(people, 26) # Example Output # [{\'name\': \'Charlie\', \'age\': 30}, {\'name\': \'Alice\', \'age\': 28}] ``` Implement the function `filter_and_sort` to meet the requirements specified.","solution":"def filter_and_sort(people, min_age): Filters out dictionaries where the \\"age\\" is less than min_age and sorts the remaining dictionaries in descending order by \\"age\\". Parameters: - people (list of dict): List of dictionaries, each containing \\"name\\" and \\"age\\" keys. - min_age (int): The minimum age for filtering dictionaries. Returns: - (list of dict): Filtered and sorted list of dictionaries. filtered_list = [person for person in people if person[\'age\'] >= min_age] sorted_list = sorted(filtered_list, key=lambda x: x[\'age\'], reverse=True) return sorted_list"},{"question":"Write a function that takes a list of dictionaries and sorts the dictionaries by a specified key in ascending order. Each dictionary in the list will have the same keys. The function should handle cases where the values can be either strings or integers. If any dictionary does not contain the specified key, it should be placed at the end of the sorted list. The function should return a list of sorted dictionaries. The function should output with: ``` list: A list of dictionaries sorted by the specified key. ``` You should write self-contained code starting with: ``` def sort_dict_list(dict_list, key): ```","solution":"def sort_dict_list(dict_list, key): Returns a list of dictionaries sorted by the specified key in ascending order. Dictionaries that do not contain the key are placed at the end of the list. Args: dict_list (list): A list of dictionaries to be sorted. key (str): The key by which to sort the dictionaries. Returns: list: A list of dictionaries sorted by the specified key. # Separate dictionaries that contain the key from those that don\'t with_key = [d for d in dict_list if key in d] without_key = [d for d in dict_list if key not in d] # Sort dictionaries that contain the key with_key_sorted = sorted(with_key, key=lambda d: d[key]) # Combine sorted dictionaries with those that don\'t contain the key return with_key_sorted + without_key"},{"question":"Create a function that takes a list of integers and returns a new list with all duplicate elements removed, while preserving the original order of the elements. The function should not use any additional libraries and must maintain the order of first occurrence of each element. You should write self-contained code starting with: ```python def remove_duplicates(input_list): ```","solution":"def remove_duplicates(input_list): Takes a list of integers and returns a new list with all duplicate elements removed, while preserving the original order of the elements. seen = set() result = [] for item in input_list: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"You are developing a system to monitor the frequency and index of the first occurrence of words in an article. The goal is to identify the first word that appears multiple times in the article. The system should be case-insensitive and should disregard punctuation marks. Write a function named `first_repeated_word` that takes a single argument: 1. `text` - the article text as a string. The function should return a tuple (word, index) where `word` is the first word that is repeated and `index` is the index of its first occurrence. If no word is repeated, the function should return `None`. Ensure that your solution accounts for the following: - Words are separated by spaces. - The function should convert the text to lowercase to ensure case-insensitivity. - Punctuation marks such as `.`, `,`, `!`, and `?` should be ignored. For example: ```python text = \\"Hello, world! Hello everyone.\\" result = first_repeated_word(text) print(result) # Output: (\\"hello\\", 0) ``` The function can make use of Python’s `re` library for regular expression operations and the `string` library to handle punctuation. Your solution should follow this structured approach to ensure correctness and efficiency.","solution":"import re import string def first_repeated_word(text): Returns the first repeated word in the text along with the index of its first occurrence. Parameters: text (str): The input text to search through. Returns: tuple(str, int) or None: A tuple containing the first repeated word and its index, or None if no word is repeated. # Remove punctuation and convert to lowercase text = text.lower() text = re.sub(f\'[{re.escape(string.punctuation)}]\', \'\', text) words = text.split() word_indices = {} for index, word in enumerate(words): if word in word_indices: return (word, word_indices[word]) word_indices[word] = index return None"},{"question":"**Objective:** The goal is to design a function that takes a list of integers as input and returns a new list where each integer is replaced by the product of all other integers in the list, without using division. **Function to Implement:** - **Function Name**: `product_except_self` - **Parameters**: - `nums` (List[int]): A list of integers. **Requirements**: 1. You cannot use division in any part of your solution. 2. The function should return a new list, where for each element at index `i`, the value is the product of all other elements in the original list except the one at `i`. 3. Handle edge cases such as an empty list, list with one element, and list containing zeros. **Hints**: - Consider using two additional lists to store temporary products from the left and right of each element. - Perform two passes over the input list: one from left to right and one from right to left. Here is the template for the function: ```python from typing import List def product_except_self(nums: List[int]) -> List[int]: n = len(nums) # List to store the products result = [1] * n # Temporary product storage left_product = 1 for i in range(n): result[i] *= left_product left_product *= nums[i] right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result # Example usage: # print(product_except_self([1, 2, 3, 4])) # Output: [24, 12, 8, 6] ```","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: n = len(nums) if n == 0: return [] if n == 1: return [1] # List to store the products result = [1] * n # Temporary product storage left_product = 1 for i in range(n): result[i] *= left_product left_product *= nums[i] right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a Python function named `plot_random_walks()` that simulates and plots multiple 2-dimensional random walks. Each random walk should start at the origin ((0, 0)) and take a specified number of steps. The function should take the following parameters: 1. `num_walks`: The number of random walks to simulate. 2. `num_steps`: The number of steps for each random walk. The function should: - Generate random steps where each step can be a move of (pm 1) in either the x or y direction. - Plot all random walks on the same plot with different colors for each walk. - Display a legend indicating the walk number. For the plot: - Use a different color for each walk. - Ensure the starting point ((0, 0)) is marked. - Add grid lines for better visualization. Use the `matplotlib` library for plotting and the `numpy` library for generating the random steps. The precise function signature should be: ```python def plot_random_walks(num_walks: int, num_steps: int): pass ``` You should explicitly use `numpy` for generating the random steps and `matplotlib` for plotting the walks.","solution":"import numpy as np import matplotlib.pyplot as plt def plot_random_walks(num_walks: int, num_steps: int): Simulates and plots multiple 2-dimensional random walks. Parameters: num_walks (int): The number of random walks to simulate. num_steps (int): The number of steps for each random walk. plt.figure(figsize=(10, 8)) colors = plt.cm.viridis(np.linspace(0, 1, num_walks)) # Generate a color map for walk_num in range(num_walks): x, y = [0], [0] # Starting at the origin for _ in range(num_steps): dx, dy = np.random.choice([-1, 1]), np.random.choice([-1, 1]) x.append(x[-1] + dx) y.append(y[-1] + dy) plt.plot(x, y, color=colors[walk_num], label=f\'Walk {walk_num + 1}\') plt.scatter(0, 0, color=\'red\', marker=\'o\', s=100) # Mark the starting point. plt.title(f\'{num_walks} Random Walks of {num_steps} Steps Each\') plt.xlabel(\'X\') plt.ylabel(\'Y\') plt.legend(loc=\'center left\', bbox_to_anchor=(1, 0.5)) plt.grid(True) plt.show()"},{"question":"You are tasked with writing a function `multiply_matrices` to perform matrix multiplication between two 2-dimensional NumPy arrays. The function should adhere to the following specifications: 1. **Function Name**: `multiply_matrices` 2. **Parameters**: - `matrix1`: A 2-dimensional NumPy array representing the first matrix. - `matrix2`: A 2-dimensional NumPy array representing the second matrix. 3. **Return**: A 2-dimensional NumPy array containing the product of `matrix1` and `matrix2`. # Requirements: - **Use the following NumPy function**: - `numpy.dot` # Definition: Matrix multiplication of `matrix1` of shape `(m, n)` and `matrix2` of shape `(n, p)` results in a new matrix of shape `(m, p)`, where each element is calculated as: [ text{result}[i, j] = sum_{k=1}^{n} text{matrix1}[i, k] times text{matrix2}[k, j] ] # Constraints: - The number of columns in `matrix1` must be equal to the number of rows in `matrix2`. - Both matrices will be valid 2-dimensional NumPy arrays containing numerical values. # Example: ```python import numpy as np matrix1 = np.array([[1, 2], [3, 4], [5, 6]]) matrix2 = np.array([[7, 8, 9], [10, 11, 12]]) result = multiply_matrices(matrix1, matrix2) print(result) # Output should be: # [[27, 30, 33], # [61, 68, 75], # [95, 106, 117]] ``` Ensure the function handles potential exceptions gracefully, such as dimension mismatch or invalid input types. **Additional Notes**: - The function should return a valid NumPy array as specified. - Be sure to include error messages for unexpected inputs or exceptions.","solution":"import numpy as np def multiply_matrices(matrix1, matrix2): Multiplies two 2-dimensional NumPy arrays (matrices) and returns the result. Parameters: - matrix1: A 2-dimensional NumPy array representing the first matrix. - matrix2: A 2-dimensional NumPy array representing the second matrix. Returns: - A 2-dimensional NumPy array representing the product of matrix1 and matrix2. Raises: - ValueError: If the number of columns in matrix1 does not equal the number of rows in matrix2. - TypeError: If the inputs are not valid 2-dimensional NumPy arrays. if not (isinstance(matrix1, np.ndarray) and isinstance(matrix2, np.ndarray)): raise TypeError(\\"Inputs must be 2-dimensional NumPy arrays.\\") if matrix1.ndim != 2 or matrix2.ndim != 2: raise TypeError(\\"Inputs must be 2-dimensional NumPy arrays.\\") if matrix1.shape[1] != matrix2.shape[0]: raise ValueError(\\"Number of columns in matrix1 must be equal to the number of rows in matrix2.\\") return np.dot(matrix1, matrix2)"},{"question":"You are given a dataset stored in a CSV file named `hospital_admissions.csv` which contains information about patient admissions including columns such as `Patient ID`, `Admission Date`, `Discharge Date`, `Age`, `Gender`, and `Diagnosis`. The goal is to analyze this data and determine the average length of hospital stay for each diagnosis category. The analysis should account for variations in the format of the dates and handle missing values appropriately. The code should rely on the `pandas` library for data manipulation and `datetime` module for handling date calculations. Specifically, you need to: 1. Read the CSV file using `pandas.read_csv`. 2. Parse the `Admission Date` and `Discharge Date` columns to datetime objects. 3. Calculate the length of stay for each patient (in days) as the difference between `Discharge Date` and `Admission Date`. Handle scenarios where the `Discharge Date` is missing by assuming the length of stay is 0 for those records. 4. Group the data by `Diagnosis` and calculate the average length of stay for each diagnosis category. 5. Handle any rows with missing `Admission Date` by discarding them from the calculation. Create a function `average_length_of_stay` that performs the above tasks and returns a dictionary where keys are diagnosis categories and values are the average lengths of stay (in days) for each category. **Function Signature:** ```python def average_length_of_stay() -> Dict[str, float]: ```","solution":"import pandas as pd from datetime import datetime from typing import Dict def average_length_of_stay() -> Dict[str, float]: # Step 1: Read the CSV file df = pd.read_csv(\'hospital_admissions.csv\') # Step 2: Parse the `Admission Date` and `Discharge Date` columns to datetime objects df[\'Admission Date\'] = pd.to_datetime(df[\'Admission Date\'], errors=\'coerce\') df[\'Discharge Date\'] = pd.to_datetime(df[\'Discharge Date\'], errors=\'coerce\') # Step 3: Calculate the length of stay for each patient df[\'Length of Stay\'] = (df[\'Discharge Date\'] - df[\'Admission Date\']).dt.days df[\'Length of Stay\'] = df[\'Length of Stay\'].fillna(0) # Assuming 0 for missing discharge dates # Step 5: Drop rows where `Admission Date` is missing df = df.dropna(subset=[\'Admission Date\']) # Step 4: Group by `Diagnosis` and calculate average length of stay for each category result = df.groupby(\'Diagnosis\')[\'Length of Stay\'].mean().to_dict() return result"},{"question":"You are tasked with writing a function named `generate_summary_report` that summarizes file statistics from a given directory. The summary should include the total count of files, their combined size, and a breakdown by file extension. # Requirements: 1. **Function Name**: `generate_summary_report` 2. **Function Arguments**: - `directory_path`: a string representing the path to the directory containing the files. 3. The function should: - Traverse the directory and its subdirectories to gather the relevant data. - Calculate the total number of files. - Compute the combined size of all files in bytes. - Generate a breakdown by file extension, showing the count and combined size for each type. - Return a dictionary with the following structure: ```python { \\"total_files\\": <total number of files>, \\"total_size\\": <combined size of all files in bytes>, \\"extensions\\": { \\"<extension_1>\\": { \\"count\\": <number of files with this extension>, \\"size\\": <combined size of files with this extension> }, \\"<extension_2>\\": { \\"count\\": <number of files with this extension>, \\"size\\": <combined size of files with this extension> }, ... } } ``` # Example Call: ```python summary_report = generate_summary_report(\\"/path/to/directory\\") ``` # Constraints: - Assume that file extensions and paths are case-insensitive (e.g., \'TXT\' and \'txt\' should be treated as the same extension). - Use appropriate standard Python libraries such as `os` and `os.path` to accomplish these tasks. - Ensure the function handles large directories efficiently. # Example Output: ```python { \\"total_files\\": 120, \\"total_size\\": 1500000, \\"extensions\\": { \\".txt\\": { \\"count\\": 40, \\"size\\": 300000 }, \\".jpg\\": { \\"count\\": 50, \\"size\\": 900000 }, \\".csv\\": { \\"count\\": 30, \\"size\\": 300000 } } } ```","solution":"import os def generate_summary_report(directory_path): Summarize file statistics from a given directory. Args: directory_path (str): Path to the directory containing the files. Returns: dict: Summary report including total file count, combined size, and breakdown by file extension. summary = { \\"total_files\\": 0, \\"total_size\\": 0, \\"extensions\\": {} } for root, _, files in os.walk(directory_path): for file in files: file_path = os.path.join(root, file) ext = os.path.splitext(file_path)[1].lower() # Get file extension and make it lowercase size = os.path.getsize(file_path) # Update total file count and size summary[\\"total_files\\"] += 1 summary[\\"total_size\\"] += size # Update extension-specific information if ext not in summary[\\"extensions\\"]: summary[\\"extensions\\"][ext] = {\\"count\\": 0, \\"size\\": 0} summary[\\"extensions\\"][ext][\\"count\\"] += 1 summary[\\"extensions\\"][ext][\\"size\\"] += size return summary"},{"question":"You are required to write a Python function named `analyze_text` that demonstrates text processing using the built-in string methods and the `collections` module. The function should perform the following steps: 1. Accept a string `text` as input. 2. Convert the entire string to lowercase. 3. Print the total number of characters in the string. 4. Remove any punctuation marks (you can define punctuation as characters: `.,!?;:`) and print the resulting string. 5. Split the string into a list of words and print the list. 6. Count the number of unique words in the list and print this count. 7. Print the 5 most common words and their frequencies using the `collections.Counter`. 8. Replace every occurrence of the word \\"and\\" with \\"&\\" in the original string and print the modified string. 9. Reverse the entire string and print it. 10. Print the length of the longest word in the string. 11. Identify and print if the string is a palindrome (reads the same forward and backward, ignoring spaces, punctuation, and case). Ensure the function handles edge cases such as empty strings gracefully. ```python def analyze_text(text): # Your code goes here ```","solution":"import string from collections import Counter def analyze_text(text): # Step 1: Convert the entire string to lowercase. text = text.lower() # Step 2: Print the total number of characters in the string. print(\\"Total number of characters:\\", len(text)) # Step 3: Remove any punctuation marks and print the resulting string. cleaned_text = text.translate(str.maketrans(\'\', \'\', \'.,!?;:\')) print(\\"Text without punctuation:\\", cleaned_text) # Step 4: Split the string into a list of words and print the list. words = cleaned_text.split() print(\\"List of words:\\", words) # Step 5: Count the number of unique words in the list and print this count. unique_words_count = len(set(words)) print(\\"Number of unique words:\\", unique_words_count) # Step 6: Print the 5 most common words and their frequencies using the collections.Counter. word_counts = Counter(words) common_words = word_counts.most_common(5) print(\\"5 most common words and their frequencies:\\", common_words) # Step 7: Replace every occurrence of the word \\"and\\" with \\"&\\" in the original string and print the modified string. replaced_text = text.replace(\\"and\\", \\"&\\") print(\\"Text with \'and\' replaced by \'&\':\\", replaced_text) # Step 8: Reverse the entire string and print it. reversed_text = text[::-1] print(\\"Reversed text:\\", reversed_text) # Step 9: Print the length of the longest word in the string. if words: longest_word_length = max(len(word) for word in words) else: longest_word_length = 0 print(\\"Length of the longest word:\\", longest_word_length) # Step 10: Identify and print if the string is a palindrome (ignoring spaces, punctuation, and case). is_palindrome = cleaned_text == cleaned_text[::-1] print(\\"Is the text a palindrome:\\", is_palindrome)"},{"question":"In this problem, you will write a Python function that uses the `pandas` library to analyze a given dataset and compute several summary statistics. The dataset contains information about different products, including their prices and sales figures. You are provided with the following function signature: ```python def get_product_statistics(df): ``` Here is the required functionality of the function: 1. The function should take a single argument `df`, which is a Pandas DataFrame containing at least the following columns: `product_id`, `price`, `quantity_sold`. 2. The function should perform the following steps: - Compute the total revenue for each product by multiplying the `price` by the `quantity_sold`. - Compute the total revenue for all products combined. - Find the product with the highest revenue. - Find the product with the lowest revenue. - Compute the average price of all products. 3. The function must use the relevant Pandas functions to achieve each of the above tasks. 4. The function should return the results as a dictionary with the following keys: - `total_revenue` - `highest_revenue_product` - `lowest_revenue_product` - `average_price` Below is a brief example of how the `get_product_statistics` function might be used: ```python import pandas as pd data = { \'product_id\': [1, 2, 3, 4], \'price\': [10.0, 15.0, 7.5, 20.0], \'quantity_sold\': [100, 50, 200, 30] } df = pd.DataFrame(data) statistics = get_product_statistics(df) print(statistics) # Output should be a dictionary with keys \'total_revenue\', \'highest_revenue_product\', \'lowest_revenue_product\', and \'average_price\', containing the corresponding values. ``` You must ensure to make use of Pandas functions such as `pd.DataFrame.apply`, `pd.DataFrame.sum`, and `pd.DataFrame.mean` within your implementation.","solution":"import pandas as pd def get_product_statistics(df): Analyzes the product dataset to compute several summary statistics. Parameters: df (pd.DataFrame): The DataFrame containing product data with columns \'product_id\', \'price\', and \'quantity_sold\'. Returns: dict: A dictionary containing the summary statistics: \'total_revenue\', \'highest_revenue_product\', \'lowest_revenue_product\', \'average_price\'. # Calculate total revenue for each product df[\'total_revenue\'] = df[\'price\'] * df[\'quantity_sold\'] # Calculate total revenue for all products combined total_revenue = df[\'total_revenue\'].sum() # Find the product with the highest revenue highest_revenue_product = df.loc[df[\'total_revenue\'].idxmax(), \'product_id\'] # Find the product with the lowest revenue lowest_revenue_product = df.loc[df[\'total_revenue\'].idxmin(), \'product_id\'] # Compute the average price of all products average_price = df[\'price\'].mean() return { \'total_revenue\': total_revenue, \'highest_revenue_product\': highest_revenue_product, \'lowest_revenue_product\': lowest_revenue_product, \'average_price\': average_price }"},{"question":"You need to write a function that analyzes a string and determines if it can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards. If the string can be rearranged into a palindrome, return `True`; otherwise, return `False`. Create a function named `can_form_palindrome` that takes in one argument: 1. `s`: A string composed of lowercase and/or uppercase alphabet characters. The function should: 1. Determine if the characters of the string can be rearranged to form a palindrome. 2. Return `True` if it\'s possible to rearrange the string into a palindrome, otherwise return `False`. **Hint**: A string can be rearranged to form a palindrome if at most one character has an odd frequency, while all other characters have even frequencies. For instance: - `can_form_palindrome(\\"carrace\\")` should return `True` because the string can be rearranged to form \\"racecar\\", which is a palindrome. - `can_form_palindrome(\\"hello\\")` should return `False` because there is no way to rearrange the characters to make a palindrome. Ensure your code handles edge cases, such as the string being empty or containing only one character.","solution":"def can_form_palindrome(s): Determines if the characters of the string can be rearranged to form a palindrome. Parameters: s (str): The input string. Returns: bool: True if the characters can be rearranged to form a palindrome, otherwise False. # Frequency dictionary for each character in the string char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Count the number of characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be rearranged into a palindrome, there should be at most one character with an odd frequency return odd_count <= 1"},{"question":"You are given a task to simulate the spread of a virus in a population over a period of time. The simulation will account for the healthy, infected, and recovered individuals. Specifically, we will create a function `simulate_virus_spread` that models the spread and plots the number of healthy, infected, and recovered individuals over time. The function `simulate_virus_spread` takes in the following parameters: - `N`: An integer representing the total population. - `I0`: An integer representing the initial number of infected individuals. - `beta`: A float representing the infection rate (probability of transmission per contact). - `gamma`: A float representing the recovery rate (probability of recovery per time step). - `days`: An integer representing the number of days to simulate. - `titles`: A list of three strings to be used as titles for the subplots. Your task is to create a function that processes this information and simulates the spread of the virus using the SIR (Susceptible-Infected-Recovered) model. The function should plot the number of susceptible, infected, and recovered individuals over time using matplotlib. You should use the `matplotlib.pyplot.subplots` function to create the subplots. The function signature should be: ```python def simulate_virus_spread(N, I0, beta, gamma, days, titles): ``` Here\'s the breakdown of requirements: 1. Initialize the number of susceptible (S), infected (I), and recovered (R) individuals. 2. Use a loop to simulate the spread over the specified number of days. 3. Calculate the changes in the number of S, I, and R individuals based on the SIR model equations. 4. Record the numbers of S, I, and R individuals at each time step. 5. Plot the results using subplots to show: - Number of susceptible individuals over time. - Number of infected individuals over time. - Number of recovered individuals over time. # Example usage: ```python import numpy as np import matplotlib.pyplot as plt def simulate_virus_spread(N, I0, beta, gamma, days, titles): # Initialize arrays to store the number of S, I, and R individuals S = np.zeros(days) I = np.zeros(days) R = np.zeros(days) # Initial conditions S[0] = N - I0 I[0] = I0 R[0] = 0 for t in range(1, days): # Calculate new infections and recoveries new_infections = beta * S[t-1] * I[t-1] / N new_recoveries = gamma * I[t-1] # Update S, I, and R values S[t] = S[t-1] - new_infections I[t] = I[t-1] + new_infections - new_recoveries R[t] = R[t-1] + new_recoveries # Plotting results fig, ax = plt.subplots(3, 1, figsize=(10, 8)) ax[0].plot(S, label=\'Susceptible\', color=\'blue\') ax[0].set_title(titles[0]) ax[0].legend() ax[1].plot(I, label=\'Infected\', color=\'red\') ax[1].set_title(titles[1]) ax[1].legend() ax[2].plot(R, label=\'Recovered\', color=\'green\') ax[2].set_title(titles[2]) ax[2].legend() plt.tight_layout() plt.show() ```","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_virus_spread(N, I0, beta, gamma, days, titles): Simulates the spread of a virus in a population using the SIR model and plots the results. Parameters: - N: Total population (int) - I0: Initial number of infected individuals (int) - beta: Infection rate (float) - gamma: Recovery rate (float) - days: Number of days to simulate (int) - titles: List of titles for the subplots (list of 3 strings) # Initialize arrays to store the number of S, I, and R individuals S = np.zeros(days) I = np.zeros(days) R = np.zeros(days) # Initial conditions S[0] = N - I0 I[0] = I0 R[0] = 0 for t in range(1, days): # Calculate new infections and recoveries new_infections = beta * S[t-1] * I[t-1] / N new_recoveries = gamma * I[t-1] # Update S, I, and R values S[t] = S[t-1] - new_infections I[t] = I[t-1] + new_infections - new_recoveries R[t] = R[t-1] + new_recoveries # Plotting results fig, ax = plt.subplots(3, 1, figsize=(10, 8)) ax[0].plot(S, label=\'Susceptible\', color=\'blue\') ax[0].set_title(titles[0]) ax[0].legend() ax[1].plot(I, label=\'Infected\', color=\'red\') ax[1].set_title(titles[1]) ax[1].legend() ax[2].plot(R, label=\'Recovered\', color=\'green\') ax[2].set_title(titles[2]) ax[2].legend() plt.tight_layout() plt.show()"},{"question":"In this problem, you are required to create a function called `reverse_linked_list` that reverses a singly linked list. You must use a simple linked list data structure, where each node contains a value and a reference to the next node. The function should take the head of the linked list as an input and return the new head after reversing the list. # Class Definition ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next ``` # Function Signature ```python def reverse_linked_list(head: ListNode) -> ListNode: ``` # Input - `head` (ListNode): The head of a singly linked list. # Output - Returns the new head of the reversed singly linked list (ListNode). # Example ```python # Example to create a linked list: 1 -> 2 -> 3 -> None node1 = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node1.next = node2 node2.next = node3 # reversing the linked list new_head = reverse_linked_list(node1) # The linked list will now be 3 -> 2 -> 1 -> None assert new_head.value == 3 assert new_head.next.value == 2 assert new_head.next.next.value == 1 assert new_head.next.next.next == None ``` # Constraints - The input linked list can have any number of nodes. - Handle edge cases such as an empty list (`head` is None) and a list with only one node.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head: ListNode) -> ListNode: Reverses a singly linked list and returns the new head. :param head: ListNode, the head of the singly linked list :return: ListNode, the new head of the reversed singly linked list prev = None current = head while current: next_node = current.next # Store the next node current.next = prev # Reverse the link prev = current # Move prev to current current = next_node # Move to the next node return prev"},{"question":"You are developing a utility for a software project that deals with filesystem operations. The team requires a function to identify and categorize files based on their extensions. You need to write a function that scans a given directory and classifies all the files in that directory into categories based on their file extensions. Write a function `categorize_files_by_extension(directory)` that accomplishes the following tasks: 1. Scans the provided directory and lists all files, including those in subdirectories. 2. Categorizes the files based on their extensions and stores the results in a dictionary where the keys are the extensions and the values are lists of file paths. 3. Returns the dictionary containing categorized file paths. **Function Signature**: ```python def categorize_files_by_extension(directory: str) -> dict: pass ``` **Parameters**: - `directory` (str): The path to the directory to scan. **Returns**: - `categorized_files` (dict): A dictionary where the keys are file extensions (e.g., \'.txt\', \'.csv\') and the values are lists of file paths that have the corresponding extension. **Notes**: - Use the `os` and `os.path` libraries to navigate the filesystem. - Ensure the function handles different cases of file extensions appropriately (e.g., `.TXT` and `.txt` should be treated as the same extension). - Omit directories from the results; only include files. - Handle scenarios where the directory might have no files gracefully by returning an empty dictionary if no files are found. Example usage: ```python # Example directory structure # /example_directory # ├── file1.txt # ├── file2.csv # ├── folder1 # │ ├── file3.txt # │ └── file4.py # ├── folder2 # │ └── file5.md # Calling categorize_files_by_extension on this directory might return: # { # \'.txt\': [\'/example_directory/file1.txt\', \'/example_directory/folder1/file3.txt\'], # \'.csv\': [\'/example_directory/file2.csv\'], # \'.py\': [\'/example_directory/folder1/file4.py\'], # \'.md\': [\'/example_directory/folder2/file5.md\'] # } ```","solution":"import os def categorize_files_by_extension(directory): categorized_files = {} for root, _, files in os.walk(directory): for file in files: file_ext = os.path.splitext(file)[1].lower() file_path = os.path.join(root, file) if file_ext not in categorized_files: categorized_files[file_ext] = [] categorized_files[file_ext].append(file_path) return categorized_files"},{"question":"You are tasked with writing a Python function `longest_common_substring(s1: str, s2: str) -> str` that finds the longest common substring between two input strings `s1` and `s2`. A substring is defined as a contiguous sequence of characters within a string. # Requirements 1. **Function Name**: `longest_common_substring` 2. **Inputs**: - `s1` (str): The first input string. - `s2` (str): The second input string. 3. **Output**: - Returns a string that is the longest common substring of `s1` and `s2`. If multiple substrings of the same maximum length exist, return any one of them. # Constraints - The length of each string is between 1 and 1000. - All characters are ASCII. # Example ```python # Example inputs s1 = \\"abcdxyz\\" s2 = \\"xyzabcd\\" # Expected output # \\"abcd\\" print(longest_common_substring(\\"abcdxyz\\", \\"xyzabcd\\")) # Output should be \\"abcd\\" # Example inputs s1 = \\"abcdef\\" s2 = \\"zabcy\\" # Expected output # \\"abc\\" print(longest_common_substring(\\"abcdef\\", \\"zabcy\\")) # Output should be \\"abc\\" ``` # Note - The function should efficiently find the common substring by utilizing dynamic programming or another efficient approach to ensure it runs within a reasonable time frame for the given input constraints.","solution":"def longest_common_substring(s1, s2): Finds the longest common substring between two input strings s1 and s2. if not s1 or not s2: return \\"\\" # Create a 2D array to store lengths of longest common suffixes of substrings m, n = len(s1), len(s2) lcsuff = [[0] * (n + 1) for i in range(m + 1)] # To store the length of the longest common substring length = 0 # To store the index of the cell which contains the end of the longest common substring end_index_m = 0 # Build lcsuff[m + 1][n + 1] in bottom-up fashion for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: lcsuff[i][j] = 0 elif s1[i - 1] == s2[j - 1]: lcsuff[i][j] = lcsuff[i - 1][j - 1] + 1 if length < lcsuff[i][j]: length = lcsuff[i][j] end_index_m = i else: lcsuff[i][j] = 0 # Longest common substring is from s1[end_index_m - length:end_index_m] return s1[end_index_m - length:end_index_m]"},{"question":"Create a function that takes a list of dictionaries and returns a single dictionary that accumulates the sum of values for each unique key across all the dictionaries in the list. If a key is not present in some dictionaries, it should be treated as if it had a value of 0. You should write self-contained code starting with: ``` def accumulate_values(dict_list): ```","solution":"def accumulate_values(dict_list): Returns a single dictionary that accumulates the sum of values for each unique key across all the dictionaries in the list. If a key is not present in some dictionaries, it should be treated as if it had a value of 0. result = {} for d in dict_list: for key, value in d.items(): if key in result: result[key] += value else: result[key] = value return result"},{"question":"You are required to write a function `calculate_average_rainfall` that takes the file path of a CSV file as an argument and returns a dictionary containing the average rainfall for different regions. The CSV file contains the following columns: \'date\', \'region\', and \'rainfall\'. You should parse the file, group the data by \'region\', and calculate the mean rainfall for each region. The dictionary keys should be the regions, and the values should be the corresponding average rainfall. Use the `pandas` library to handle the CSV file and perform the calculations. Function Signature: ```python def calculate_average_rainfall(fp: str) -> dict: pass ```","solution":"import pandas as pd def calculate_average_rainfall(fp: str) -> dict: Calculates the average rainfall for different regions based on a CSV file. Args: fp (str): The file path of the CSV file. Returns: dict: A dictionary containing the average rainfall for each region. # Read the CSV file into a DataFrame df = pd.read_csv(fp) # Group by \'region\' and calculate the mean rainfall average_rainfall = df.groupby(\'region\')[\'rainfall\'].mean() # Convert the result to a dictionary result = average_rainfall.to_dict() return result"},{"question":"In this problem, you will write a Python function to implement the Dijkstra\'s algorithm for finding the shortest paths from a source vertex to all other vertices in a given weighted graph. The graph will be represented as an adjacency list. Function Signature ```python def dijkstra(graph, start): ... ``` Parameters - `graph`: A dictionary representing the adjacency list of the graph. Each key is a vertex and the value is a list of tuples, each representing a neighboring vertex and the weight of the edge to that neighbor. - `start`: The starting vertex for the shortest path calculation. Returns - A dictionary where the keys are the vertices and the values are the lengths of the shortest paths from the `start` vertex to each vertex. Requirements - Implement the algorithm using a priority queue or a min-heap to efficiently get the next vertex with the smallest distance. - Ensure the function handles cases where vertices may not be reachable from the start vertex. Example ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } start = \'A\' shortest_paths = dijkstra(graph, start) print(shortest_paths) ``` Explanation: The code should output the shortest paths from the vertex \'A\' to all other vertices.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra\'s algorithm for finding the shortest paths from the start vertex to all other vertices in a given weighted graph. Parameters: - graph: dictionary representing the adjacency list of the graph. - start: the starting vertex for the shortest path calculation. Returns: - A dictionary where the keys are the vertices and the values are the lengths of the shortest paths from the start vertex to each vertex. # Initialize the priority queue pq = [(0, start)] # Dictionary to store the shortest path to each vertex shortest_paths = {start: 0} # Set to keep track of visited vertices visited = set() while pq: # Remove and return the best vertex current_distance, current_vertex = heapq.heappop(pq) if current_vertex in visited: continue # Mark the current vertex as visited visited.add(current_vertex) for neighbor, weight in graph.get(current_vertex, []): distance = current_distance + weight if neighbor not in shortest_paths or distance < shortest_paths[neighbor]: shortest_paths[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return shortest_paths"},{"question":"You are given a text file named `access_log.txt` that contains web server access log entries. Each line in the file represents a separate access log entry and follows this format: ``` 127.0.0.1 - - [01/Jan/2022:00:00:01 +0000] \\"GET /index.html HTTP/1.1\\" 200 1043 ``` The fields in each log entry are as follows: - IP address of the client making the request. - A dash `-`. - A dash `-`. - Timestamp of the request enclosed in square brackets `[ ]`. - The HTTP request method, the requested resource, and the HTTP protocol version enclosed in double quotes `\\" \\"`. - The HTTP status code. - The size of the response in bytes. Your task is to write a function `analyze_log(file_path: str)` that processes this log file and prints the following information: 1. The total number of requests made. 2. The number of unique IP addresses that made requests. 3. The percentage of requests that resulted in a 404 (Not Found) status code. 4. The most requested resource and the number of requests made for it. To achieve this, you should: 1. Read the file line by line. 2. Use regular expressions to parse each log entry and extract the necessary fields. 3. Use appropriate data structures to store and analyze the extracted data. 4. Implement the necessary calculations and display the results. You are required to use the `re` library for regular expressions and any other standard Python libraries as needed.","solution":"import re from collections import Counter def analyze_log(file_path: str): Analyze the given web server access log file. :param file_path: Path to the log file. with open(file_path, \'r\') as file: log_entries = file.readlines() total_requests = 0 ip_addresses = set() request_resources = Counter() status_404_count = 0 log_pattern = re.compile( r\'(?P<ip>d+.d+.d+.d+) - - [(?P<timestamp>.*?)] \' r\'\\"(?P<method>w+) (?P<resource>.*?) HTTP/(?P<version>.*?)\\" (?P<status>d+) (?P<size>d+)\' ) for entry in log_entries: match = re.match(log_pattern, entry) if match: total_requests += 1 ip = match.group(\'ip\') resource = match.group(\'resource\') status = match.group(\'status\') ip_addresses.add(ip) request_resources[resource] += 1 if status == \'404\': status_404_count += 1 # Calculate percentage of 404 errors percentage_404 = (status_404_count / total_requests) * 100 if total_requests else 0 # Find the most requested resource most_requested_resource, resource_count = request_resources.most_common(1)[0] if request_resources else (None, 0) # Print the results print(f\\"Total number of requests made: {total_requests}\\") print(f\\"Number of unique IP addresses that made requests: {len(ip_addresses)}\\") print(f\\"Percentage of requests with a 404 status code: {percentage_404:.2f}%\\") print(f\\"Most requested resource: {most_requested_resource} with {resource_count} requests\\")"},{"question":"You are required to write a Python function to determine if a given directed graph contains a cycle. In a cycle, you can start at a given node and follow the directed edges to return to the starting node. # Function Definition You need to write a function with the following signature: ```python def has_cycle(graph): # Your code goes here ``` # Parameters - `graph` (dict): A dictionary representing a directed graph where keys are node identifiers, and values are lists of nodes connected by directed edges. # Returns - (bool): `True` if there is a cycle in the graph, `False` otherwise. # Detailed Specifications 1. Use Depth First Search (DFS) to detect cycles in the directed graph. 2. Keep track of nodes in the current traversal path and nodes that have been fully processed to avoid redundant checks. 3. If a node is revisited in the current traversal path, a cycle is detected. # Example Usage ```python graph1 = { \'A\': [\'B\', \'C\'], \'B\': [\'C\', \'D\'], \'C\': [\'E\'], \'D\': [\'E\'], \'E\': [] } graph2 = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [\'A\'], } print(has_cycle(graph1)) # Expected output: False print(has_cycle(graph2)) # Expected output: True ``` # Notes - The graph is represented as an adjacency list. - Ensure your solution is efficient and can handle large graphs. - Handle edge cases such as an empty graph appropriately.","solution":"def has_cycle(graph): def dfs(node, visited, rec_stack): visited[node] = True rec_stack[node] = True for neighbor in graph.get(node, []): if not visited[neighbor]: if dfs(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[node] = False return False visited = {node: False for node in graph} rec_stack = {node: False for node in graph} for node in graph: if not visited[node]: if dfs(node, visited, rec_stack): return True return False"},{"question":"You are given a large dataset containing the ages of a group of people. Your task is to analyze the distribution of ages and identify the age group with the highest frequency. Additionally, you should create a bar plot to visually represent the distribution of the age groups. # Function to Implement Implement a function called `analyze_age_distribution` which accepts a single argument: - `ages`: A list or numpy array containing the ages of the individuals. The function should: 1. Group the ages into the following categories: - 0-10 - 11-20 - 21-30 - 31-40 - 41-50 - 51-60 - 61-70 - 71-80 - 81-90 - 91-100 2. Identify and print the age group that has the highest frequency. 3. Create a bar plot using `matplotlib.pyplot.bar` to represent the distribution of these age groups. # Example of Input and Output ```python import numpy as np import matplotlib.pyplot as plt # Example data ages = np.array([5, 12, 17, 24, 35, 45, 55, 64, 72, 88, 95, 23, 34, 12, 46, 56, 67, 78, 89, 90]) analyze_age_distribution(ages) ``` Expected Output: ```plaintext Age group with highest frequency: 11-20 ``` And a bar plot showing the distribution of the age groups. Note: The function should be robust to handle any shape and range of numerical data provided in the `ages` input.","solution":"import numpy as np import matplotlib.pyplot as plt from collections import Counter def analyze_age_distribution(ages): Analyzes the age distribution and identifies the age group with the highest frequency. Also creates a bar plot to represent the distribution of the age groups. Parameters: ages (list or numpy array): List or numpy array containing the ages of the individuals. Returns: str: The age group that has the highest frequency. # Define age groups age_groups = { \\"0-10\\": (0, 10), \\"11-20\\": (11, 20), \\"21-30\\": (21, 30), \\"31-40\\": (31, 40), \\"41-50\\": (41, 50), \\"51-60\\": (51, 60), \\"61-70\\": (61, 70), \\"71-80\\": (71, 80), \\"81-90\\": (81, 90), \\"91-100\\": (91, 100) } # Initialize a counter for age groups age_group_counts = Counter({key: 0 for key in age_groups.keys()}) # Count occurrences in each age group for age in ages: for group, (start, end) in age_groups.items(): if start <= age <= end: age_group_counts[group] += 1 break # Identify the age group with the highest frequency highest_freq_group = age_group_counts.most_common(1)[0][0] print(f\\"Age group with highest frequency: {highest_freq_group}\\") # Create bar plot plt.bar(age_group_counts.keys(), age_group_counts.values()) plt.xlabel(\'Age Groups\') plt.ylabel(\'Frequency\') plt.title(\'Age Group Distribution\') plt.xticks(rotation=45) plt.show() return highest_freq_group"},{"question":"In this problem, you will implement a function called `count_nucleotides` that takes a string `dna_sequence` as an input. This string represents a sequence of DNA and it will only contain the characters \'A\', \'T\', \'C\', and \'G\'. Your task is to count the number of each nucleotide in the sequence and return the counts in a dictionary. The function should perform the following steps: 1. Validate that the input `dna_sequence` is a string that only contains the characters \'A\', \'T\', \'C\', and \'G\'. If not, raise a `ValueError` with the message \\"Invalid DNA sequence. Please enter a sequence containing only \'A\', \'T\', \'C\', and \'G\'.\\" 2. Initialize a dictionary to store the count of each nucleotide. The keys should be \'A\', \'T\', \'C\', and \'G\', and the values should be their respective counts initialized to zero. 3. Iterate through the input string and update the counts of each nucleotide in the dictionary. 4. Return the dictionary with the counts of \'A\', \'T\', \'C\', and \'G\'. Function signature: `def count_nucleotides(dna_sequence: str) -> dict:` Example: ```python print(count_nucleotides(\\"ATCGATCGA\\")) ``` Output: ``` {\'A\': 3, \'T\': 2, \'C\': 2, \'G\': 2} ```","solution":"def count_nucleotides(dna_sequence: str) -> dict: Count the number of each nucleotide in a given DNA sequence. Parameters: dna_sequence (str): A string representing the DNA sequence containing only \'A\', \'T\', \'C\', and \'G\'. Returns: dict: A dictionary with the counts of \'A\', \'T\', \'C\', and \'G\'. Raises: ValueError: If the input dna_sequence contains invalid characters. # Validating the input valid_nucleotides = {\'A\', \'T\', \'C\', \'G\'} if not all(nucleotide in valid_nucleotides for nucleotide in dna_sequence): raise ValueError(\\"Invalid DNA sequence. Please enter a sequence containing only \'A\', \'T\', \'C\', and \'G\'.\\") # Initializing the dictionary with counts set to zero nucleotide_counts = {nucleotide: 0 for nucleotide in valid_nucleotides} # Iterating over the dna_sequence and counting the nucleotides for nucleotide in dna_sequence: nucleotide_counts[nucleotide] += 1 return nucleotide_counts"},{"question":"You are given a string representing a mathematical expression and your task is to implement a function `evaluate_expression(expression)` that evaluates the expression. The expression will contain non-negative integers, plus (`+`) and minus (`-`) operators, and it may also contain spaces. The function should parse and compute the result of the mathematical expression adhering to the standard order of operations (left to right, without considering operator precedence). Function Signature: ```python def evaluate_expression(expression): # Your code here ``` # Parameters: - `expression` (str): A string representing the mathematical expression (e.g., `\\"3 + 5 - 2 + 10\\"`). # Returns: - `int`: The result of the evaluated expression. # Example: ```python >>> evaluate_expression(\\"3 + 5 - 2 + 10\\") 16 >>> evaluate_expression(\\" 12 + 3 - 4 \\") 11 ``` # Requirements: 1. **Do not use the `eval` function** in Python for evaluating the expression. 2. Ensure that the function handles spaces correctly within the expression. # Considerations: - Ensure your implementation can handle multiple spaces and varying lengths of input. - The expression will always be valid with integers and the `+` and `-` operators. # Hints: 1. Consider splitting the string into tokens, then processing the tokens one by one to compute the result. 2. Take care of whitespace appropriately to ensure correct parsing.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers, plus (+) and minus (-) operators, and may contain spaces. Args: expression (str): A string representing the mathematical expression. Returns: int: The result of the evaluated expression. # Remove spaces from the expression expression = expression.replace(\\" \\", \\"\\") total = 0 current_number = 0 current_sign = 1 # 1 for positive, -1 for negative for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: # char is either \'+\' or \'-\' total += current_number * current_sign current_number = 0 if char == \'+\': current_sign = 1 elif char == \'-\': current_sign = -1 # Add the last number total += current_number * current_sign return total"},{"question":"Create a function named `count_occurrences` that counts the number of times each word appears in a given text file. The function should output a dictionary where the keys are words and the values are the counts of each word. The output dictionary should be saved to a JSON file named `[input_file]_wordcount.json` in the same directory as the input file. You are required to use the `os` and `json` modules from the Python standard library. Specifically, you need to utilize `os.path.splitext` to get the file extension and `json.dump` to write the dictionary to a JSON file. # Specifications: - Function `count_occurrences(input_file: str) -> None`: - `input_file` (str): The path to the text file to be processed. - The output JSON file should be named `[input_file]_wordcount.json`. # Constraints: - Words should be considered in a case-insensitive manner (e.g., \\"The\\" and \\"the\\" should be counted as the same word). - Punctuation should be ignored (e.g., \\"word,\\" and \\"word\\" should be counted as the same word). - Use the modules `os` for file path manipulations and `json` for writing the output dictionary to a JSON file. # Example: Assume the following content in the text file `sample.txt`: ``` This is a sample text. This text has words, and some words are repeated: words. ``` Calling `count_occurrences(\\"sample.txt\\")` should create `sample_wordcount.json` which contains: ```json { \\"this\\": 2, \\"is\\": 1, \\"a\\": 1, \\"sample\\": 1, \\"text\\": 2, \\"has\\": 1, \\"words\\": 3, \\"and\\": 1, \\"some\\": 1, \\"are\\": 1, \\"repeated\\": 1 } ``` # Required Python Documentation: ```python # os.path.splitext: Split the pathname into a pair (root, ext) where \'root\' is everything before the last dot and \'ext\' is everything after the last dot. # json.dump: Serialize \'obj\' as a JSON formatted stream to \'fp\' (a .write()-supporting file-like object). ```","solution":"import os import json import re from collections import defaultdict def count_occurrences(input_file: str) -> None: # Read the entire content of the file with open(input_file, \'r\') as file: content = file.read() # Normalize the content to be case-insensitive and remove punctuation content = content.lower() content = re.sub(r\'[^ws]\', \'\', content) # Split the content into words words = content.split() # Count the occurrences of each word word_count = defaultdict(int) for word in words: word_count[word] += 1 # Get the base name of the file without extension root, _ = os.path.splitext(input_file) output_file = f\\"{root}_wordcount.json\\" # Write the dictionary to a JSON file with open(output_file, \'w\') as fp: json.dump(word_count, fp, indent=4)"},{"question":"You are given a string consisting of alphabets (\'a\'-\'z\') and digits (\'0\'-\'9\'). Your task is to write a function `concatenate_unique_characters(s)` that returns a new string formed by appending unique characters in the order of their first occurrence in the input string `s`. Digits should appear at the end of the resultant string, while the order of letters should be maintained as encountered in the input string. The function signature is: ```python def concatenate_unique_characters(s): ``` Parameters: - `s`: A string consisting of lowercase alphabets and digits. The function should: 1. Initialize two empty sets, one for letters and one for digits. 2. Initialize an empty list to keep track of the order of first occurrences of characters. 3. Iterate through the input string: - If the character is a letter and not yet in the letters set, add it to the letters set and append it to the order list. - If the character is a digit and not yet in the digits set, add it to the digits set and append it to the order list. 4. Filter the order list to separate letters and digits. 5. Concatenate the filtered letters and the filtered digits to form the resultant string. 6. Return the resultant string. # Example Input: ```python s = \\"a1b2c3a4b5\\" ``` Output: ```python \\"abc12345\\" ``` Input: ```python s = \\"ab12cd34ab56\\" ``` Output: ```python \\"abcd123456\\" ``` # Constraints - The length of string `s` will not exceed 1000 characters. - The input string will always contain at least one character. # Hint Use a list to keep track of the order of appearances and sets to ensure uniqueness for letters and digits separately. ```python def concatenate_unique_characters(s): letters = set() digits = set() order = [] for char in s: if char.isdigit(): if char not in digits: digits.add(char) order.append(char) elif \'a\' <= char <= \'z\': if char not in letters: letters.add(char) order.append(char) ordered_letters = [c for c in order if \'a\' <= c <= \'z\'] ordered_digits = [c for c in order if c.isdigit()] return \'\'.join(ordered_letters + ordered_digits) ```","solution":"def concatenate_unique_characters(s): letters = set() digits = set() order = [] for char in s: if char.isdigit(): if char not in digits: digits.add(char) order.append(char) elif \'a\' <= char <= \'z\': if char not in letters: letters.add(char) order.append(char) ordered_letters = [c for c in order if \'a\' <= c <= \'z\'] ordered_digits = [c for c in order if c.isdigit()] return \'\'.join(ordered_letters + ordered_digits)"},{"question":"You are asked to write a function that shifts the elements of a given list of integers to the right by `n` positions. The function should be named `rotate_list`. Below are the detailed requirements for the function: 1. **Function Name:** `rotate_list` 2. **Input:** A list of integers (`lst`) and an integer (`n`) indicating the number of positions to rotate. 3. **Output:** The function should return a new list of integers with the elements shifted to the right by `n` positions. 4. **Requirements:** The rotation should handle both positive and negative values for `n`. For positive `n`, elements are shifted to the right. For negative `n`, elements are shifted to the left. **Function Signature:** ```python def rotate_list(lst: list, n: int) -> list: pass ``` # Example Usage ```python def rotate_list(lst, n): n = n % len(lst) # Handle cases where n is greater than the length of the list return lst[-n:] + lst[:-n] # Example: original_list = [1, 2, 3, 4, 5] rotated_list = rotate_list(original_list, 2) print(rotated_list) # Output: [4, 5, 1, 2, 3] rotated_list = rotate_list(original_list, -1) print(rotated_list) # Output: [2, 3, 4, 5, 1] ``` # Constraints: - The input list (`lst`) will have a length between 1 and 100. - Each element in the list will be an integer. - The integer `n` will be between -100 and 100 inclusive. # Focus: The primary objective of this exercise is to practice manipulating list indices and handling circular rotations of elements.","solution":"def rotate_list(lst: list, n: int) -> list: Rotates the elements of the list to the right by n positions. If n is negative, the rotation is to the left. Args: lst (list): A list of integers. n (int): The number of positions to rotate the list by. Returns: list: The rotated list. if len(lst) == 0: return lst # Edge case: rotating an empty list returns an empty list n = n % len(lst) # Normalize n to be within the range of the list length return lst[-n:] + lst[:-n]"},{"question":"You are tasked with creating a Python function that computes the Fibonacci sequence up to the `n-th` number (inclusive) and prints each Fibonacci number along with its position in the sequence. The Fibonacci sequence is defined such that each number is the sum of the two preceding ones, starting from 0 and 1. Your task is to complete the function `fibonacci_sequence` with the following signature: ```python def fibonacci_sequence(n): Prints the Fibonacci sequence up to the n-th number (inclusive) Arguments: n: An integer representing the position in the Fibonacci sequence ``` **Requirements:** - Ensure the function can handle edge cases such as when `n` is 0 or 1. - For `n` equal to or greater than 2, calculate each Fibonacci number iteratively. - Use a loop to generate the Fibonacci sequence and print each number with its position. - Format the output such that the position and corresponding Fibonacci number are clearly shown. **Example Usage:** ```python fibonacci_sequence(7) ``` **Expected Output:** ``` Position 0: 0 Position 1: 1 Position 2: 1 Position 3: 2 Position 4: 3 Position 5: 5 Position 6: 8 Position 7: 13 ```","solution":"def fibonacci_sequence(n): Prints the Fibonacci sequence up to the n-th number (inclusive) Arguments: n: An integer representing the position in the Fibonacci sequence if n < 0: raise ValueError(\\"n must be a non-negative integer\\") fib_sequence = [] a, b = 0, 1 for i in range(n + 1): fib_sequence.append(a) print(f\\"Position {i}: {a}\\") a, b = b, a + b return fib_sequence"},{"question":"You are tasked with writing a Python function called `find_common_elements(sorted_list1, sorted_list2)` that will find the common elements in two sorted lists of integers and return them as a sorted list. The function should traverse both lists simultaneously and efficiently, exploiting the fact that the lists are already sorted. **Specific Steps and Considerations**: 1. Initialize two pointers, one for each list, starting at the beginning. 2. Compare the elements at the current pointers in both lists. 3. If the elements match, add the element to the result list and move both pointers to the next position. 4. If the element in the first list is smaller, move the pointer of the first list to the next position. 5. If the element in the second list is smaller, move the pointer of the second list to the next position. 6. Repeat this process until one of the pointers reaches the end of its respective list. 7. Return the list of common elements. **Important Constraints & Considerations**: - The input lists, `sorted_list1` and `sorted_list2`, are guaranteed to be sorted in ascending order. - If there are no common elements, return an empty list. - The function should be efficient, with a time complexity of (O(n + m)), where (n) and (m) are the lengths of the input lists. Here is an example of how the function should work: ```python print(find_common_elements([1, 3, 4, 6, 7, 9], [2, 3, 5, 6, 8, 9])) # Example output: [3, 6, 9] ``` Hint: Think of merging two sorted arrays, where instead of merging, you are collecting the common elements. ```python def find_common_elements(sorted_list1, sorted_list2): # Your implementation here pass ```","solution":"def find_common_elements(sorted_list1, sorted_list2): This function takes two sorted lists and returns a list of elements that are common to both. The resulting list is also sorted. i, j = 0, 0 common_elements = [] while i < len(sorted_list1) and j < len(sorted_list2): if sorted_list1[i] == sorted_list2[j]: common_elements.append(sorted_list1[i]) i += 1 j += 1 elif sorted_list1[i] < sorted_list2[j]: i += 1 else: j += 1 return common_elements"},{"question":"**Objective:** Create a function named `calculateMovingAverage` that calculates the moving average of a given list of numbers. This exercise focuses on understanding list manipulation and iteration techniques in Python. **Instructions:** 1. Implement the function `calculateMovingAverage(data, window_size)`. 2. Calculate the moving average for the given list of numeric data with a specified window size. 3. The moving average for a specific index is defined as the average of the elements from the current index to the next `window_size - 1` elements. 4. If there are fewer than `window_size` elements remaining from the current index, calculate the average of the remaining elements. 5. Return the list of moving averages, which should be of the same length as the input data list. **Inputs:** - `data`: List of numeric data points. Example: `data = [1, 2, 3, 4, 5, 6]` - `window_size`: Integer specifying the number of elements to include in each moving average calculation. Example: `window_size = 3` **Output:** - A list of moving averages. Example: For the input above, the output would be `[2.0, 3.0, 4.0, 5.0, 5.5, 6.0]` ```python def calculateMovingAverage(data, window_size): # Your implementation here ```","solution":"def calculateMovingAverage(data, window_size): Calculates the moving average for the given list of numeric data with a specified window size. Parameters: data (list): The list of numeric data points. window_size (int): The number of elements to include in each moving average calculation. Returns: list: The list of moving averages. if window_size <= 0: raise ValueError(\\"window_size must be a positive integer\\") moving_averages = [] for i in range(len(data)): current_window = data[i:i + window_size] moving_avg = sum(current_window) / len(current_window) moving_averages.append(moving_avg) return moving_averages"},{"question":"**Programming Task: Matrix Rotation** You are required to write a Python function named `rotate_matrix(matrix)` that rotates a given NxN matrix 90 degrees clockwise. The input matrix is a list of lists, where each sublist represents a row of the matrix. **Your Task:** Implement the function `rotate_matrix(matrix)` which rotates the given matrix 90 degrees clockwise in place. # Function Signature ```python def rotate_matrix(matrix): # Your code here ``` # Input - A list of lists representing an NxN matrix, where `N` is the number of rows (or columns, since it\'s a square matrix). Each element of the matrix is an integer. # Output - The function should modify the input matrix in place to rotate it 90 degrees clockwise. # Example ```python input_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(input_matrix) print(input_matrix) # Expected output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Explanation The matrix is rotated 90 degrees clockwise, hence the elements move from their original position to new positions as follows: - The element from the first row, first column moves to the first row, last column. - The element from the last row, first column moves to the first row, first column, and so on.","solution":"def rotate_matrix(matrix): Rotates a given NxN matrix 90 degrees clockwise in place. :param matrix: List of lists representing an NxN matrix n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"In this problem, you are asked to implement a function `find_shortest_path` which determines the shortest path in a weighted, undirected graph using Dijkstra\'s algorithm. You are provided with: 1. A dictionary where the keys are node identifiers and values are lists of tuples, each tuple representing a neighboring node and the weight of the edge connecting them. 2. Two nodes: the start node and the end node, for which you need to find the shortest path. Your task is to implement the `find_shortest_path` function that uses the following heapq functions: - `heapq.heappush` - `heapq.heappop` Specifically, your function should: 1. Initialize a priority queue with the start node. 2. Keep track of the minimum distances from the start node to each node. 3. Update the priority queue and distances as previously unvisited nodes with shorter paths are discovered. Function Signature ```python import heapq def find_shortest_path(graph, start, end): Determines the shortest path in a weighted undirected graph using Dijkstra\'s algorithm. Parameters: graph (dict): Dictionary representing the graph. start (hashable): The starting node. end (hashable): The destination node. Returns: shortest_distance (float): Shortest distance from start to end. pass ``` Example ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } start_node = \'A\' end_node = \'D\' shortest_distance = find_shortest_path(graph, start_node, end_node) print(shortest_distance) ``` **Output:** ``` 4 ``` Constraints - You can assume that the graph is connected and all edge weights are positive. - Nodes are identified by unique hashable objects (e.g., strings, integers). - The input graph contains at least two nodes.","solution":"import heapq def find_shortest_path(graph, start, end): Determines the shortest path in a weighted undirected graph using Dijkstra\'s algorithm. Parameters: graph (dict): Dictionary representing the graph. start (hashable): The starting node. end (hashable): The destination node. Returns: shortest_distance (float): Shortest distance from start to end. # Priority queue to store (distance, node) priority_queue = [(0, start)] # Dictionary to store the smallest distances to each node distances = {node: float(\'inf\') for node in graph} distances[start] = 0 # While there are nodes to process in the priority queue while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we reach the destination node, return the distance if current_node == end: return current_distance # Skip processing if the distance is not up to date if current_distance > distances[current_node]: continue # Process each neighbor for neighbor, weight in graph[current_node]: distance = current_distance + weight # If found shorter path to neighbor, update the priority queue and distances if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) # In case there is no path between start and end return float(\'inf\')"},{"question":"You are working with a dataset containing information about various books, including the book title, author, publication year, genre, and rating. Your task is to create a function `average_genre_rating(genre, dataset)` that calculates the average rating of books in a given genre using Pandas. Specifically, you need to: 1. Filter the dataset to include only rows where the genre matches the given genre parameter. 2. Calculate the average rating of the filtered books. 3. Return the average rating as a float. Here is the signature of the function you need to implement: ```python import pandas as pd def average_genre_rating(genre, dataset): # Your code here ``` # Input - `genre` (str): The genre of books for which to calculate the average rating. - `dataset` (pd.DataFrame): A Pandas DataFrame containing the data, which includes at least the columns: \\"Title\\", \\"Author\\", \\"Year\\", \\"Genre\\", and \\"Rating\\". # Output - A float: The average rating of the books in the specified genre. # Example Given the following dataset: ```python data = { \\"Title\\": [\\"Book1\\", \\"Book2\\", \\"Book3\\", \\"Book4\\", \\"Book5\\"], \\"Author\\": [\\"Author1\\", \\"Author2\\", \\"Author3\\", \\"Author4\\", \\"Author5\\"], \\"Year\\": [2001, 2002, 2003, 2004, 2005], \\"Genre\\": [\\"Fantasy\\", \\"Science Fiction\\", \\"Fantasy\\", \\"Mystery\\", \\"Fantasy\\"], \\"Rating\\": [4.5, 4.0, 5.0, 3.5, 4.0] } dataset = pd.DataFrame(data) result = average_genre_rating(\\"Fantasy\\", dataset) print(result) ``` The output should be the average rating of the books in the \\"Fantasy\\" genre, which is `4.5`.","solution":"import pandas as pd def average_genre_rating(genre, dataset): Calculates the average rating of books in a given genre. Parameters: genre (str): The genre of books for which to calculate the average rating. dataset (pd.DataFrame): A Pandas DataFrame containing the data, which includes at least the columns: \\"Title\\", \\"Author\\", \\"Year\\", \\"Genre\\", and \\"Rating\\". Returns: float: The average rating of the books in the specified genre. # Filter the dataset for the specified genre filtered_books = dataset[dataset[\\"Genre\\"] == genre] # Calculate the average rating average_rating = filtered_books[\\"Rating\\"].mean() return average_rating"},{"question":"Create a function named `reduce_fraction` that takes a string representing a fraction in the format \\"numerator/denominator\\" (e.g., \\"45/60\\") and returns the fraction in its simplest form as a string. The function should reduce the fraction by dividing both the numerator and the denominator by their greatest common divisor (GCD). You can use the `math.gcd` function to find the GCD of the numerator and the denominator. Ensure the final fraction has the same sign as the input fraction, meaning if the input has a negative denominator, the denominator should stay negative. The function must handle cases where both numerator and denominator are negative and ensure that the output always has a negative sign only on one part of the fraction if it\'s negative. For example: ```python reduce_fraction(\\"45/60\\") # should return \\"3/4\\" reduce_fraction(\\"100/400\\") # should return \\"1/4\\" reduce_fraction(\\"-90/60\\") # should return \\"-3/2\\" reduce_fraction(\\"45/-60\\") # should return \\"-3/4\\" reduce_fraction(\\"-24/-36\\") # should return \\"2/3\\" ``` Ensure your function handles edge cases, such as fractions that are already in their simplest form or cases where the numerator or denominator is zero. **Function Signature:** ```python def reduce_fraction(fraction: str) -> str: pass ```","solution":"from math import gcd def reduce_fraction(fraction: str) -> str: Reduces the given fraction to its simplest form. Parameters: fraction (str): The fraction in the format \'numerator/denominator\'. Returns: str: The reduced fraction in the format \'numerator/denominator\'. numerator, denominator = map(int, fraction.split(\'/\')) common_divisor = gcd(numerator, denominator) simplified_numerator = numerator // common_divisor simplified_denominator = denominator // common_divisor # Ensuring the negative sign only appears on the numerator or denominator not both if simplified_denominator < 0: simplified_numerator = -simplified_numerator simplified_denominator = -simplified_denominator return f\\"{simplified_numerator}/{simplified_denominator}\\""},{"question":"Write a function called `extract_unique_integers()` which takes a list of integers as its input and returns a list of unique integers from the input list in the order they first appear. Your function should: 1. Accept a list of integers as an argument. 2. Iterate through the list and keep track of unique integers. 3. Return a list of these unique integers, maintaining their original order of appearance. **Requirements:** - Implement the function without using any predefined function from the collections library. - Make use of basic list operations and control structures. - Ensure that the original order of unique integers is preserved in the output list. **Example Usage:** ```python # If the input list is [1, 2, 2, 3, 4, 1, 5, 4] print(extract_unique_integers([1, 2, 2, 3, 4, 1, 5, 4])) # Output: [1, 2, 3, 4, 5] # If the input list is [10, 20, 10, 30, 40, 20, 50, 40] print(extract_unique_integers([10, 20, 10, 30, 40, 20, 50, 40])) # Output: [10, 20, 30, 40, 50] # If the input list is [7, 8, 9, 7, 8, 9, 10] print(extract_unique_integers([7, 8, 9, 7, 8, 9, 10])) # Output: [7, 8, 9, 10] ```","solution":"def extract_unique_integers(lst): Returns a list of unique integers from the input list in the order they first appear. unique_integers = [] seen = set() for num in lst: if num not in seen: unique_integers.append(num) seen.add(num) return unique_integers"},{"question":"By analyzing a provided string input, your task is to evaluate and identify the highest occurring word and its frequency within the string. Implement a function called `find_most_frequent_word` that: - Accepts a single parameter: 1. `text`: A string that contains a sentence or multiple sentences. - Processes the string to count the frequency of each word. Words are separated by whitespace and should be considered case-insensitively. - Ignores punctuation marks (consider only alphanumeric characters in words). - Returns a tuple containing the word with the highest frequency and its count. If there are multiple words with the same highest frequency, return the one that appears first in the string. Examples: ```python find_most_frequent_word(\\"This is a test. This test is only a test.\\") # Should return (\'test\', 3) find_most_frequent_word(\\"Hello world! Hello everyone!\\") # Should return (\'hello\', 2) find_most_frequent_word(\\"One fish, two fish, red fish, blue fish.\\") # Should return (\'fish\', 4) ``` You can use the following code snippet as a starting point for your implementation: ```python import re from collections import Counter def find_most_frequent_word(text): # Convert text to lower case to handle case insensitivity text = text.lower() # Remove punctuation and split words words = re.findall(r\'bw+b\', text) # Count frequency of each word word_count = Counter(words) # Find the most common word(s) most_common_word, highest_count = word_count.most_common(1)[0] return most_common_word, highest_count ``` Note: Ensure that the function works with any edge cases and handles different punctuation marks effectively.","solution":"import re from collections import Counter def find_most_frequent_word(text): Processes the given text to find the most frequently occurring word. Parameters: text (str): A string containing one or more sentences. Returns: tuple: A tuple containing the word with the highest frequency and its count. # Convert text to lower case to handle case insensitivity text = text.lower() # Remove punctuation and split words using regex to consider only alphanumeric characters words = re.findall(r\'bw+b\', text) # Count frequency of each word word_count = Counter(words) # Find the most frequent word(s) if not word_count: return (\\"\\", 0) # If there are words, find the most common word and its count most_common_word, highest_count = word_count.most_common(1)[0] return most_common_word, highest_count"},{"question":"**Write a Python function named `split_and_sort` that takes a string of comma-separated numbers and returns a list of integers that are sorted in ascending order. The function should handle potential edge cases, such as empty strings or strings that contain non-numeric values, by printing error messages accordingly. Your task is to implement the following function: ```python def split_and_sort(numbers_str): Split a string of comma-separated numbers, convert them to integers, and return a sorted list of these integers. Handle invalid input gracefully. Parameters: - numbers_str (str): A string containing comma-separated numeric values. Returns: - list: A list of integers sorted in ascending order. ``` The function should follow these steps: 1. Split the input string by commas. 2. Convert each split segment to an integer. 3. Handle invalid or empty strings by printing appropriate error messages without raising exceptions. 4. Sort the valid integers in ascending order. 5. Return the sorted list of integers. **Example Usage** ```python print(split_and_sort(\\"3,1,2\\")) # Output: [1, 2, 3] print(split_and_sort(\\"\\")) # Output: Error: The input string is empty. print(split_and_sort(\\"3,a,1\\")) # Output: Error: Invalid input. Non-numeric value found. ``` **Note**: Ensure that your implementation gracefully handles edge cases and provides clear error messages when the input is invalid.","solution":"def split_and_sort(numbers_str): Split a string of comma-separated numbers, convert them to integers, and return a sorted list of these integers. Handle invalid input gracefully. Parameters: - numbers_str (str): A string containing comma-separated numeric values. Returns: - list: A list of integers sorted in ascending order. if numbers_str == \\"\\": print(\\"Error: The input string is empty.\\") return [] try: numbers = [int(num.strip()) for num in numbers_str.split(\',\')] except ValueError: print(\\"Error: Invalid input. Non-numeric value found.\\") return [] return sorted(numbers)"},{"question":"You are tasked with writing a Python function named `transpose_matrix` that transposes a given 2D matrix. Transposing a matrix means swapping its rows with columns, so the element at position (i, j) in the original matrix will be at position (j, i) in the transposed matrix. Your task is to: 1. Create a new matrix where the number of rows is equal to the number of columns in the original matrix and vice versa. 2. Fill in the elements of the new matrix such that each element at position (i, j) in the original matrix is placed at position (j, i) in the new matrix. **Function Signature:** ```python def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: ``` **Parameters:** - `matrix` (List[List[int]]): A 2D list representing the matrix to be transposed. It is guaranteed that all rows in the matrix have the same length. **Returns:** - `List[List[int]]`: The transposed matrix. **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] result = transpose_matrix(matrix) print(result) ``` **Expected Output:** ``` [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` **Additional Example:** ```python matrix = [ [1, 2], [3, 4], [5, 6] ] result = transpose_matrix(matrix) print(result) ``` **Expected Output:** ``` [ [1, 3, 5], [2, 4, 6] ] ```","solution":"from typing import List def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: Transposes the given 2D matrix. Parameters: - matrix (List[List[int]]): A 2D list representing the matrix to be transposed. Returns: - List[List[int]]: The transposed matrix. if not matrix or not matrix[0]: return [] num_rows = len(matrix) num_cols = len(matrix[0]) # Create the transposed matrix with swapped dimensions transposed = [[0] * num_rows for _ in range(num_cols)] # Fill in the transposed matrix for i in range(num_rows): for j in range(num_cols): transposed[j][i] = matrix[i][j] return transposed"},{"question":"You are working on an educational game where students practice arithmetic operations. The game shows the player a series of basic arithmetic questions (addition, subtraction, multiplication, division) and tracks their score over time. Your task is to implement a function named `generate_question()` that randomly generates an arithmetic question, presented as a string, for the player to solve. The question should be a simple mathematical expression involving two integers and one of the four basic operations (+, -, *, /). Additionally, ensure that for division, the result is an integer (i.e., the division has no remainder). Specific requirements for the `generate_question` function: 1. It should randomly select two integers between 1 and 10, inclusive. 2. It should randomly select one of the four arithmetic operations. 3. If the selected operation is division (`/`), ensure the generated expression results in an integer value. 4. It should return the question as a formatted string. You should use the following libraries and their respective functions: - `random.randint(a, b)`: To randomly select integers and operations. - `random.choice(sequence)`: To randomly select an operation. Function `generate_question()` should have the following signature: ```python def generate_question(): ``` Here is an outline of the required setup to implement the function: 1. Randomly generate two integers for the arithmetic operation. 2. Randomly select one of the four arithmetic operations. 3. Ensure the integers and selected operation for division result in an integer value. 4. Return the generated question as a string formatted properly.","solution":"import random def generate_question(): Randomly generates an arithmetic question involving two integers between 1 and 10, and one of the four basic operations (+, -, *, /). Ensures that division results in an integer value. operations = [\'+\', \'-\', \'*\', \'/\'] num1 = random.randint(1, 10) num2 = random.randint(1, 10) operation = random.choice(operations) if operation == \'/\': while num1 % num2 != 0: num1 = random.randint(1, 10) num2 = random.randint(1, 10) question = f\'{num1} {operation} {num2}\' return question"},{"question":"Create a function that reads data from a CSV file containing sales transactions and performs data aggregation to generate a summary report. The CSV file includes columns for \'Date\', \'Sale Amount\', \'Product ID\', and \'Customer ID\'. The aggregation involves calculating the total sales amount, the number of transactions, and the average sale amount for each month. The function should output: DataFrame: A pandas DataFrame containing the monthly summary report with columns \'Month\', \'Total Sales Amount\', \'Number of Transactions\', and \'Average Sale Amount\'. You should write self-contained code starting with: ``` import pandas as pd def sales_summary(csv_file_path): ```","solution":"import pandas as pd def sales_summary(csv_file_path): Reads sales transactions from a CSV file and generates a monthly summary report. Parameters: csv_file_path (str): The path to the CSV file containing sales transaction data. Returns: pd.DataFrame: A DataFrame with the monthly summary report, including total sales amount, number of transactions, and average sale amount. # Read the CSV file df = pd.read_csv(csv_file_path) # Convert the \'Date\' column to datetime format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Extract the month and year for grouping df[\'Month\'] = df[\'Date\'].dt.to_period(\'M\') # Perform the aggregation summary = df.groupby(\'Month\').agg( Total_Sales_Amount=(\'Sale Amount\', \'sum\'), Number_of_Transactions=(\'Sale Amount\', \'size\'), Average_Sale_Amount=(\'Sale Amount\', \'mean\') ).reset_index() # Convert \'Month\' back to a string format for easier reading summary[\'Month\'] = summary[\'Month\'].astype(str) return summary"},{"question":"You need to implement a function that calculates the number of islands in a given 2D grid. An island is a group of connected `1`s (land), and is surrounded by `0`s (water). The grid is represented as a list of lists of integers where `1` represents land and `0` represents water. Islands are considered connected vertically or horizontally. The function should be named `num_islands` and must take one parameter: 1. `grid`: A list of lists of integers representing the 2D grid. The function should return an integer representing the number of islands in the given grid. You may assume all four edges of the grid are surrounded by water. **Example:** ```python grid = [ [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\"] ] # Expected output: # 3 ``` Here, there are three islands: the one composed of the four `1`s in the top left, the one that consists of the single `1` in the middle, and the one that is made up of two `1`s at the bottom right.","solution":"def num_islands(grid): if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != \'1\': return grid[i][j] = \'0\' dfs(grid, i-1, j) dfs(grid, i+1, j) dfs(grid, i, j-1) dfs(grid, i, j+1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 dfs(grid, i, j) return count"},{"question":"You are required to write a function `cumulativeSum(arr)` which calculates the cumulative (or running) sum of an array `arr`. The cumulative sum of an array is a new array where each element at index `i` is the sum of all elements from index `0` to `i` in the original array. To solve this problem, utilize the `numpy` library, specifically the `numpy.cumsum` function. Function Signature ```python def cumulativeSum(arr): \'\'\' arr is the array to be processed \'\'\' ``` Inputs - `arr`: A one-dimensional list or array of numerical values. Output - Returns a one-dimensional numpy array containing the cumulative sum of the original array `arr`. Requirements - You must use the `numpy.cumsum` function to compute the solution. Examples - Example 1: ```python arr = [1, 2, 3, 4, 5] print(cumulativeSum(arr)) # Output: [ 1 3 6 10 15] ``` - Example 2: ```python arr = [10, 20, 30, 40, 50] print(cumulativeSum(arr)) # Output: [ 10 30 60 100 150] ``` Explanation - In the first example, the cumulative sum of the array [1, 2, 3, 4, 5] results in [1, 3, 6, 10, 15], because: - 1 = 1 - 1 + 2 = 3 - 1 + 2 + 3 = 6 - 1 + 2 + 3 + 4 = 10 - 1 + 2 + 3 + 4 + 5 = 15 - In the second example, the cumulative sum of the array [10, 20, 30, 40, 50] results in [10, 30, 60, 100, 150], because: - 10 = 10 - 10 + 20 = 30 - 10 + 20 + 30 = 60 - 10 + 20 + 30 + 40 = 100 - 10 + 20 + 30 + 40 + 50 = 150","solution":"import numpy as np def cumulativeSum(arr): Returns the cumulative sum of the array `arr`. Parameters: arr (list or array): A one-dimensional list or array of numerical values. Returns: numpy.ndarray: A one-dimensional numpy array containing the cumulative sum of `arr`. return np.cumsum(arr)"}]'),I={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:F,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},D={class:"search-container"},P={class:"card-container"},R={key:0,class:"empty-state"},N=["disabled"],Y={key:0},z={key:1};function j(i,e,l,p,r,s){const m=g("PoemCard");return n(),a("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",D,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),a("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):d("",!0)]),t("div",P,[(n(!0),a(w,null,b(s.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),a("div",R,' No results found for "'+u(r.searchQuery)+'". ',1)):d("",!0)]),s.hasMorePoems?(n(),a("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),a("span",z,"Loading...")):(n(),a("span",Y,"See more"))],8,N)):d("",!0)])}const O=h(I,[["render",j],["__scopeId","data-v-a67d6ca7"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/33.md","filePath":"chatai/33.md"}'),L={name:"chatai/33.md"},U=Object.assign(L,{setup(i){return(e,l)=>(n(),a("div",null,[x(O)]))}});export{B as __pageData,U as default};
