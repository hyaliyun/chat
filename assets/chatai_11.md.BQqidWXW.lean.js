import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as l,F as y,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function N(s,e,u,m,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const O=d(k,[["render",N],["__scopeId","data-v-9149dae9"]]),A=JSON.parse('[{"question":"You are given two sorted arrays `arr1` and `arr2`, each containing `n` integers. Your task is to merge these two arrays into a single sorted array without using any additional space for another array. Instead, merge the second array into the first one, modifying the first array in-place to include all elements from both arrays. # Task Write a function `merge_arrays(arr1, arr2)` that takes two lists of integers `arr1` and `arr2`, and modifies `arr1` in-place to contain all elements from both arrays in sorted order. The function returns nothing. # Examples: `arr1 = [1, 3, 5]` `arr2 = [2, 4, 6]` `merge_arrays(arr1, arr2)` `arr1` should become `[1, 2, 3, 4, 5, 6]` `arr1 = [1, 2, 6]` `arr2 = [3, 4, 5]` `merge_arrays(arr1, arr2)` `arr1` should become `[1, 2, 3, 4, 5, 6]` # Notes - The first array `arr1` has enough length to hold all elements from both `arr1` and `arr2`. - You can assume that the given arrays `arr1` and `arr2` will always be initially sorted in ascending order. - The second array `arr2` should be considered as an \\"append-only\\" extension of the first array `arr1`.","solution":"def merge_arrays(arr1, arr2): Merge second sorted array arr2 into the first sorted array arr1 in-place. n = len(arr1) - len(arr2) # The original length of arr1 m = len(arr2) # Start merging from the end i = n - 1 # Index of last element in initial arr1 j = m - 1 # Index of last element in arr2 k = n + m - 1 # Index of last position in the merged array (i.e., arr1) # Merge in reverse order while i >= 0 and j >= 0: if arr1[i] > arr2[j]: arr1[k] = arr1[i] i -= 1 else: arr1[k] = arr2[j] j -= 1 k -= 1 # If there are remaining elements in arr2, copy them while j >= 0: arr1[k] = arr2[j] k -= 1 j -= 1"},{"question":"In a distant galaxy, there exists a network of space stations connected by bidirectional hyper-routes. Each space station is represented as a node, and each hyper-route is represented as an edge with a certain travel time. Space travelers want to explore this network efficiently, starting from a given space station, visiting all the stations exactly once, and returning to the starting station. This is known as the Traveling Space Traveler problem. However, due to space-time anomalies, the travel time between some space stations can change dynamically. Travelers must be prepared to adapt their travel plans based on the latest travel times. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of space stations. - The second line of each test case contains an integer M denoting the number of hyper-routes. - The next M lines, each line contains 3 space-separated integers U, V, and W denoting a hyper-route between space station U and space station V with travel time W. - The last line of each test case contains an integer S denoting the starting space station for the traveler. -----Output----- For each test case, output a single line containing the minimum travel time needed to visit all the space stations exactly once and return to the starting station S. If it is not possible to visit all space stations and return to the starting station, print -1. -----Constraints----- - 1 ≤ T ≤ 5 - 2 ≤ N ≤ 10 - 1 ≤ M ≤ N*(N-1)/2 - 1 ≤ U, V ≤ N - 1 ≤ W ≤ 100 - The input guarantees that there are no duplicate hyper-routes and no self-loops. -----Example----- Input: 2 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 1 3 3 1 2 5 2 3 10 3 1 5 1 Output: 80 20 -----Explanation----- Example case 1. Starting at space station 1, the traveler can visit the stations in the order 1 -> 2 -> 3 -> 4 -> 1 with a total travel time of 10 + 35 + 30 + 5 = 80 units. Example case 2. Starting at space station 1, the traveler can visit the stations in the order 1 -> 2 -> 3 -> 1 with a total travel time of 5 + 10 + 5 = 20 units.","solution":"from itertools import permutations def tsp_min_travel_time(n, m, edges, start): graph = {i: {} for i in range(1, n + 1)} for u, v, w in edges: graph[u][v] = w graph[v][u] = w all_nodes = set(range(1, n + 1)) all_nodes.remove(start) min_travel_time = float(\'inf\') for perm in permutations(all_nodes): total_time = 0 current_node = start for next_node in perm: total_time += graph[current_node].get(next_node, float(\'inf\')) current_node = next_node total_time += graph[current_node].get(start, float(\'inf\')) if total_time < min_travel_time: min_travel_time = total_time return min_travel_time if min_travel_time < float(\'inf\') else -1 def solve_tsp_problem(test_cases): results = [] for case in test_cases: n, m, edges, start = case min_time = tsp_min_travel_time(n, m, edges, start) results.append(min_time) return results"},{"question":"Given an array of integers nums and an integer k, write a function to determine if there are two distinct indices i and j in the array such that nums[i] == nums[j] and the absolute difference between i and j is at most k. Example 1: Input: nums = [1,2,3,1], k = 3 Output: True Explanation: There is a pair of values (nums[0], nums[3]) where nums[0] == nums[3] and the difference between 0 and 3 is 3, which is at most k. Example 2: Input: nums = [1,0,1,1], k = 1 Output: True Explanation: There is a pair of values (nums[2], nums[3]) where nums[2] == nums[3] and the difference between 2 and 3 is 1, which is at most k. Example 3: Input: nums = [1,2,3,1,2,3], k = 2 Output: False Explanation: There is no pair of values in nums that meets the criteria. Note: The input array only contains integers. The length of the given array is in the range [1, 10,000]. The value of k is in the range [1, 10,000].","solution":"def contains_nearby_duplicate(nums, k): Determine if there are two distinct indices i and j in the array nums such that nums[i] == nums[j] and the absolute difference between i and j is at most k. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"Write a program to simulate a basic bank account management system. Your program should be able to handle the following operations: 1. Create a new account with a unique account number, initial balance, and account holder\'s name. 2. Deposit a specified amount into a particular account. 3. Withdraw a specified amount from a particular account, ensuring the account has sufficient funds. 4. Check the balance of a particular account by the account number. Use the following constraints and requirements: - Account number should be unique and a positive integer. - Initial balance and transactions (deposits and withdrawals) should be non-negative numbers. - Ensure that withdrawals do not exceed the current balance. - Provide appropriate error messages for invalid operations or inputs. Write appropriate methods to handle the above functionalities and demonstrate the creation and manipulation of at least two accounts in your main method.","solution":"class BankAccount: accounts = {} def __init__(self, account_number, holder_name, initial_balance=0): if account_number <= 0 or initial_balance < 0: raise ValueError(\\"Account number must be positive, and initial balance must be non-negative.\\") if account_number in BankAccount.accounts: raise ValueError(\\"Account number must be unique.\\") self.account_number = account_number self.holder_name = holder_name self.balance = initial_balance BankAccount.accounts[account_number] = self def deposit(self, amount): if amount < 0: raise ValueError(\\"Deposit amount must be non-negative.\\") self.balance += amount def withdraw(self, amount): if amount < 0: raise ValueError(\\"Withdrawal amount must be non-negative.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount def check_balance(self): return self.balance"},{"question":"Overview Create a function that converts temperatures from Celsius to Fahrenheit and from Fahrenheit to Celsius, based on the input format. The function should take a string representing the temperature, followed by a space and the letter \'C\' for Celsius or \'F\' for Fahrenheit, and return a string of the converted temperature followed by the respective letter. ```python convert_temperature(\\"25 C\\") => \\"77 F\\" convert_temperature(\\"77 F\\") => \\"25 C\\" ``` Specifics - The function will take a single string as input and return a single string as output. - The conversion formulas are as follows: - Celsius to Fahrenheit: ( F = C times frac{9}{5} + 32 ) - Fahrenheit to Celsius: ( C = (F - 32) times frac{5}{9} ) - Always round the result to the nearest whole number. - Input will always be a well-formed string in the specified format.","solution":"def convert_temperature(temp_str): Converts a temperature from Celsius to Fahrenheit or Fahrenheit to Celsius. Parameters: temp_str (str): A string representing the temperature and the scale (e.g., \\"25 C\\" or \\"77 F\\"). Returns: str: A string representing the converted temperature and the new scale. temp, scale = temp_str.split() temp = int(temp) if scale == \'C\': converted_temp = round(temp * 9 / 5 + 32) return f\\"{converted_temp} F\\" elif scale == \'F\': converted_temp = round((temp - 32) * 5 / 9) return f\\"{converted_temp} C\\" else: raise ValueError(\\"Invalid scale\\")"},{"question":"Given an integer `n`, write a function `countSteps(n)` that returns the minimum number of steps required to reduce `n` to 1 by performing the following operations: 1. If `n` is even, divide it by 2. 2. If `n` is odd, you can either subtract 1 from `n` or add 1 to `n`. # Examples: ```python countSteps(8) == 3 # 8 -> 4 -> 2 -> 1 countSteps(7) == 4 # 7 -> 8 -> 4 -> 2 -> 1 countSteps(10) == 4 # 10 -> 5 -> 4 -> 2 -> 1 countSteps(1) == 0 # n is already 1 ``` # Constraints: - You can assume `n` is a positive integer. - Try to make your function as efficient as possible with respect to both time and space complexity. # Hints: - Think about the properties of even and odd numbers and how the operations transform them. - Be mindful of potential infinite loops or unnecessary computations. - Explore both iterative and recursive approaches for the solution.","solution":"def countSteps(n): Returns the minimum number of steps required to reduce n to 1. steps = 0 while n != 1: if n % 2 == 0: n //= 2 else: # Instead of simply subtracting 1, check the neighboring even numbers to minimize steps if n == 3 or n % 4 == 1: n -= 1 else: n += 1 steps += 1 return steps"},{"question":"Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in non-decreasing order, then the entire array will be sorted in non-decreasing order. Return the shortest such subarray and return the array in sorted form. Example 1: Input: nums = [2, 6, 4, 8, 10, 9, 15] Output: [6, 9, 10] Example 2: Input: nums = [1, 2, 3, 4] Output: [] Example 3: Input: nums = [1] Output: [] Example 4: Input: nums = [5, 4, 3, 2, 1] Output: [2, 3, 4, 5] Constraints: 1 <= nums.length <= 10^4 -10^5 <= nums[i] <= 10^5","solution":"def find_unsorted_subarray(nums): Finds the shortest subarray which when sorted makes the entire array sorted. Args: nums: List[int] - the input array of integers. Returns: List[int] - the sorted subarray that needs to be sorted. n = len(nums) start, end = 0, -1 max_val, min_val = float(\'-inf\'), float(\'inf\') for i in range(n): if nums[i] < max_val: end = i else: max_val = nums[i] for i in range(n-1, -1, -1): if nums[i] > min_val: start = i else: min_val = nums[i] if end == -1: return [] return sorted(nums[start:end+1])"},{"question":"Create a function that takes an integer ( n ) (1 ≤ ( n ) ≤ 10^6) and returns the number of ways to obtain a sum that equals ( n ) by rolling a six-sided die multiple times. In other words, you need to count the number of possible sequences of dice rolls that add up to ( n ). For example, if ( n = 5 ), the possible sequences are: - 5 - 4 + 1 - 3 + 2 - 2 + 3 - 1 + 4 - 3 + 1 + 1 - 1 + 3 + 1 - 1 + 1 + 3 - 2 + 2 + 1 - 2 + 1 + 2 - 1 + 2 + 2 - 1 + 1 + 1 + 2 - 1 + 1 + 2 + 1 - 1 + 2 + 1 + 1 - 2 + 1 + 1 + 1 - 1 + 1 + 1 + 1 + 1 So, the function should return 16 for ( n = 5 ). To keep the function efficient and handle large values of ( n ), use dynamic programming or another optimized approach. # Example: ```python def count_dice_sequences(n): # Your code here # Test cases print(count_dice_sequences(5)) # Output: 16 print(count_dice_sequences(2)) # Output: 2 print(count_dice_sequences(7)) # Output: 63 ```","solution":"def count_dice_sequences(n): Returns the number of ways to obtain a sum that equals n by rolling a six-sided die multiple times. MOD = 1000000007 dp = [0] * (n + 1) dp[0] = 1 # Base case for i in range(1, n + 1): for j in range(1, 7): if i >= j: dp[i] = (dp[i] + dp[i - j]) % MOD return dp[n]"},{"question":"Write a function that takes a list of integers. It should remove any duplicates and return the sum of the remaining integers. If the list is empty, return \\"List is empty\\". - Example input: [1, 2, 3, 2, 4, 1] - Expected output: 10 (because 1 + 2 + 3 + 4 = 10) - Example input: [] - Expected output: \\"List is empty\\" Note: Handle the input such that it avoids modifying the original list.","solution":"def sum_unique_elements(nums): Takes a list of integers, removes duplicates, and returns the sum. If the list is empty, returns \\"List is empty\\". if not nums: return \\"List is empty\\" unique_nums = list(set(nums)) # Removes duplicates return sum(unique_nums)"},{"question":"Write a function that takes an array of integers and returns the sum of the squares of each element in the array. Example: Input: [1, 2, 3, 4] Output: 30 Explanation: 1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30","solution":"def sum_of_squares(arr): Returns the sum of the squares of each element in the array. Parameters: arr (list of int): The list of integers. Returns: int: The sum of the squares of each element. return sum(x ** 2 for x in arr)"},{"question":"You are given a series of `n` bulbs, numbered from 1 to `n`, initially all turned off. Each bulb `i` has a switch that toggles its state (from off to on, or from on to off). There are `n` people standing in line, and each person `i` toggles every `i-th` bulb in the series (i.e., person 1 toggles every bulb, person 2 toggles every 2nd bulb, person 3 toggles every 3rd bulb, and so on until person `n`). Write a function to determine the number of bulbs that are on after all `n` people have toggled the bulbs. # Function Signature ```python def bulbSwitch(n: int) -> int: ``` # Input - `n` (1 <= n <= 10^6): the number of bulbs # Output - Return the number of bulbs that remain on after all toggles. # Example 1: ```python Input: n = 3 Output: 1 Explanation: Initially, all bulbs are off. After first round, all bulbs are on. After second round, bulbs 2 and 3 are off. After third round, the state of bulb 3 is toggled back to off and bulb 1 remains on. Only bulb 1 remains on. ``` # Example 2: ```python Input: n = 0 Output: 0 Explanation: There are no bulbs to toggle. ``` # Example 3: ```python Input: n = 16 Output: 4 Explanation: Only bulbs at positions which are perfect squares will remain on. ``` # Constraints: - 0 <= n <= 10^6","solution":"def bulbSwitch(n: int) -> int: Returns the number of bulbs that remain on after all toggling. Only bulbs at positions which are perfect squares will remain on. return int(n**0.5)"},{"question":"# Problem In a small town, there is a network of roads connected to various stores. Every road has a cost associated with it, representing the time it takes to travel along that road. Given the network, you need to determine the shortest time it takes to travel from a specific store to another specific store. # Task You are given a weighted and undirected graph with `n` nodes and `m` roads. Each node represents a store and each edge represents a road with a given travel time. You need to find the shortest path from the store `src` to the store `dst`. Implement a function `shortest_path(n: int, roads: List[Tuple[int, int, int]], src: int, dst: int) -> int` that returns the minimum time required to travel from `src` to `dst`. If there is no such path, return -1. # Example For `n = 4`, `roads = [(0, 1, 5), (0, 2, 2), (1, 2, 1), (2, 3, 7)]`, `src = 0`, and `dst = 3`, the output should be `9`. Path: `0 -> 2 -> 1 -> 3` with total time = `2 + 1 + 7 = 10`. For `n = 3`, `roads = [(0, 1, 1), (1, 2, 2)]`, `src = 0`, and `dst = 2`, the output should be `3`. Path: `0 -> 1 -> 2` with total time = `1 + 2 = 3`. For `n = 2`, `roads = [(0, 1, 3)]`, `src = 0`, and `dst = 1`, the output should be `3`. Path: `0 -> 1` with total time = `3`. For `n = 3`, `roads = [(0, 1, 2), (1, 2, 2)]`, `src = 0`, and `dst = 2` the output should be `4`. Path: `0 -> 1 -> 2` with total time = `2 + 2 = 4`. # Note - `1 <= n <= 100` - `0 <= m <= 1000` - `0 <= u, v < n` - `1 <= weight of each road <= 100`","solution":"import heapq from typing import List, Tuple def shortest_path(n: int, roads: List[Tuple[int, int, int]], src: int, dst: int) -> int: Finds the shortest path (in terms of travel time) from store src to store dst in a network of stores and roads. Parameters: - n (int): Number of nodes (stores). - roads (List[Tuple[int, int, int]]): List of tuples representing the roads. Each tuple consists of (u, v, w) where u and v are nodes (stores) connected by the road, and w is the weight (time cost) of the road. - src (int): The starting node (store). - dst (int): The destination node (store). Returns: - int: The shortest time required to travel from src to dst. Returns -1 if no path exists. # Build the graph as an adjacency list graph = {i: [] for i in range(n)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Use Dijkstra\'s algorithm to find the shortest path pq = [(0, src)] # priority queue, storing (cost, node) distances = {i: float(\'inf\') for i in range(n)} distances[src] = 0 while pq: current_cost, current_node = heapq.heappop(pq) if current_node == dst: return current_cost for neighbor, weight in graph[current_node]: new_cost = current_cost + weight if new_cost < distances[neighbor]: distances[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return -1 if distances[dst] == float(\'inf\') else distances[dst]"},{"question":"=====Problem Statement===== Given an integer, n, write a function that returns the sum of the squares of all integers from 1 to n. =====Example===== n = 3 The sum of squares is 1^2 + 2^2 + 3^2 = 14. Your function should return 14. =====Input Format===== A single integer, n. =====Constraints===== 1 ≤ n ≤ 1000 =====Output Format===== Return the sum of the squares of all integers from 1 to n.","solution":"def sum_of_squares(n): Returns the sum of the squares of all integers from 1 to n. return sum(i ** 2 for i in range(1, n + 1)) # Example usage: # n = 3 # print(sum_of_squares(n)) # Output: 14"},{"question":"Tina loves playing with strings and she recently learned about palindromes. She wants to create a palindrome from a given string by deleting zero or more characters. However, Tina wants the palindrome to be as long as possible. Given a string s of length n, help Tina find the length of the longest palindrome subsequence that can be obtained by deleting some characters (if needed) from the original string. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 2·10^3), the length of the string s. The second line contains a string s consisting of lowercase English letters. -----Output----- In the single line print a single integer — the length of the longest palindrome subsequence that can be obtained from the string s. -----Examples----- Input 7 abacaba Output 7 Input 5 abcde Output 1 -----Note----- In the first sample, the entire string \\"abacaba\\" is already a palindrome, so the length of the longest palindrome subsequence is 7. In the second sample, the longest palindrome subsequence that can be obtained is any single character from the string (e.g., \\"a\\"), so the length is 1.","solution":"def longest_palindrome_subsequence(s): Returns the length of the longest palindromic subsequence in the string s. n = len(s) # Create a DP table to store the lengths of longest palindromic subsequences dp = [[0] * n for _ in range(n)] # All single characters are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Filling up the table for cl in range(2, n + 1): # cl is the length of the current substring for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The length of longest palindromic subseq will be in dp[0][n-1] return dp[0][n - 1]"},{"question":"You are given an unsorted array of integers and a target sum. Your task is to find if there are any two distinct elements in the array whose sum equals the target sum. Return `True` if such a pair exists, otherwise return `False`. **Notes:** * Array can be empty or contain only one value; in this case return `False` * The elements in the pair must be distinct (i.e., you cannot use the same element twice) * Random tests: maximum array length is 1000, range of values in array is between -1000 and 1000 Examples ``` [1, 2, 3, 9], 8 --> False ``` ...because there are no pairs with a sum of `8` ``` [1, 2, 4, 4], 8 --> True ``` ...because there is one pair with a sum of `8` (4 + 4) ``` [-1, 2, 5, -7, 9], 4 --> True ``` ...because there is one pair with a sum of `4` (-1 + 5)","solution":"def has_pair_with_sum(arr, target): Determines if there are any two distinct elements in the array whose sum equals the target sum. :param arr: List of integers. :param target: Target sum. :return: True if there exists a pair with the target sum, otherwise False. seen = set() for number in arr: complement = target - number if complement in seen: return True seen.add(number) return False"},{"question":"# Introduction Trees are a fundamental data structure in computer science used to model hierarchical relationships such as organizational structures, file systems, and decision processes. In this problem, we will be working with binary trees. # Task You are given a binary tree, where each node contains an integer value. Create a function that computes the sum of all root-to-leaf paths, where each path’s value is interpreted as a number formed by concatenating the decimal values from root to leaf. # Rules 1. Each node in the binary tree contains a single digit (0-9). 2. The binary tree is well-formed and non-empty. 3. Interpret each root-to-leaf path as a number formed by the concatenated values of the nodes along the path. # Example Consider the following binary tree: ``` 1 / 2 3 ``` The root-to-leaf paths are: 1->2 and 1->3, which correspond to the numbers 12 and 13. The sum of these numbers is 25. ```python # sum_root_to_leaf(tree) should return 25 ``` # Additional Example Consider the binary tree: ``` 4 / 9 0 / 5 1 ``` The root-to-leaf paths are: 4->9->5, 4->9->1, and 4->0, which correspond to the numbers 495, 491, and 40. The sum of these numbers is 495 + 491 + 40 = 1026. ```python # sum_root_to_leaf(tree) should return 1026 ``` # Function Signature Implement the function with the following signature: ```python def sum_root_to_leaf(root: Optional[TreeNode]) -> int: # Your code here ``` # Definition for a binary tree node ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Detailed Steps 1. Write a helper function that traverses the binary tree and constructs the root-to-leaf paths, converting them to integer values along the way. 2. Sum the values of all root-to-leaf paths and return the result. # Constraints - The number of nodes in the tree is in the range `[1, 1000]`. - `0 <= Node.val <= 9`","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_root_to_leaf(root: Optional[TreeNode]) -> int: def dfs(node, current_num): if not node: return 0 current_num = current_num * 10 + node.val if not node.left and not node.right: return current_num return dfs(node.left, current_num) + dfs(node.right, current_num) return dfs(root, 0)"},{"question":"In this programming problem, you are asked to implement a function that manipulates a scrambled version of an English sentence. The function will identify the positions of specific words in a scrambled list and reconstruct the sentence accordingly. Input - The function will receive two arguments: 1. A scrambled list of words (strings). 2. A list of words (strings) whose positions in the original unscrambled sentence must be identified. Output - The function will return a string representing the reconstructed sentence. Details The challenge involves placing the scrambled words in their correct positions in the sentence. The original sentence is reconstructed by identifying the positions of the provided words within the scrambled list. Spaces between words in the reconstructed sentence should be managed correctly. **Example** ```python scrambled_words = [\'scrambled\', \'in\', \'words\', \'sentence.\', \'a\', \'is\', \'this\'] identify_positions = [\'this\', \'is\', \'a\', \'scrambled\', \'sentence.\'] reconstructed_sentence = reconstruct_sentence(scrambled_words, identify_positions) # Output: \'this is a scrambled sentence.\' ``` **Steps** 1. Identify the index positions of the words in the `identify_positions` list from `scrambled_words`. 2. Place the words from `identify_positions` in the positions identified in step 1. 3. Construct the sentence by joining the words with space characters. **Function Signature** ```python def reconstruct_sentence(scrambled_words: List[str], identify_positions: List[str]) -> str: # implementation ``` **Assumptions** - The `scrambled_words` list will always contain all words from the `identify_positions` list, but might include additional words. - The `identify_positions` list will always contain words in the correct sequence of the original sentence. **Test Cases** - Test Case 1: ```python scrambled_words = [\'hello\', \'world\', \'beautiful\', \'is\', \'today\'] identify_positions = [\'hello\', \'world\'] reconstruct_sentence(scrambled_words, identify_positions) # Output: \'hello world\' ``` - Test Case 2: ```python scrambled_words = [\'example\', \'a\', \'an\', \'is\', \'sentence\'] identify_positions = [\'an\', \'example\', \'sentence\'] reconstruct_sentence(scrambled_words, identify_positions) # Output: \'an example sentence\' ``` Technical Details - Input will always be valid. - The function should handle any combination of valid English words within the constraints given.","solution":"from typing import List def reconstruct_sentence(scrambled_words: List[str], identify_positions: List[str]) -> str: Reconstructs the original sentence from a list of scrambled words based on the given positions. position_dict = {word: idx for idx, word in enumerate(identify_positions)} sorted_words = sorted(scrambled_words, key=lambda word: position_dict[word] if word in position_dict else float(\'inf\')) sorted_identified_words = [word for word in sorted_words if word in position_dict] return \' \'.join(sorted_identified_words)"},{"question":"# Description: Given an array of integers, determine whether any two elements in the array sum up to a specific target value. Return `True` if such a pair exists, and `False` otherwise. # Examples ``` two_sum([1, 2, 3, 4], 5) == True two_sum([1, 2, 3, 4], 8) == False two_sum([-1, -2, -3, -4], -5) == True two_sum([0, 0, 0, 0], 0) == True two_sum([1], 2) == False ``` # Notes - You may assume that each input would have exactly one solution and you may not use the same element twice. - Your solution should aim for an optimal approach in terms of time complexity.","solution":"def two_sum(nums, target): Determines whether any two elements in the array sum up to the target value. :param nums: List of integers. :param target: Target sum value. :return: True if such a pair exists, False otherwise. seen_numbers = set() for num in nums: complement = target - num if complement in seen_numbers: return True seen_numbers.add(num) return False"},{"question":"You are given an array of integers representing the elevation map where the width of each bar is 1. The elevation map specifies the height of bars at different points along a horizontal line. Write a function that computes how much water can be trapped after raining. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Note: The length of the array is non-negative. The height of each bar is a non-negative integer.","solution":"def trap(height): Calculates the amount of trapped water in the elevation map. :param height: List[int], a list of non-negative integers representing elevation heights :return: int, the total amount of trapped water if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"# Compare Arrays In this question, you will be given two arrays of integers. Write a function that determines if both arrays contain exactly the same unique elements with the same frequencies, regardless of their order. The function should return `True` if the arrays are equivalent and `False` otherwise. Examples ```python input1: [1, 2, 2, 3] input2: [2, 3, 1, 2] result: True input1: [1, 1, 1, 2] input2: [1, 2, 2, 1] result: False input1: [4, 5, 6] input2: [6, 4] result: False input1: [] input2: [] result: True ``` Constraints - All elements in the arrays are integers. - The arrays might be empty. - Assume elements in arrays are within the integer range.","solution":"from collections import Counter def compare_arrays(arr1, arr2): Determines if both arrays contain exactly the same unique elements with the same frequencies, regardless of their order. Args: arr1 (list of int): First input array. arr2 (list of int): Second input array. Returns: bool: True if the arrays are equivalent, False otherwise. return Counter(arr1) == Counter(arr2)"},{"question":"Write a function named `sum_evens` that takes an array of integers and returns the sum of all the even numbers in the array. If there are no even numbers, the function should return 0.","solution":"def sum_evens(arr): Returns the sum of all even numbers in the array. If there are no even numbers, returns 0. Parameters: arr (list of int): The input array of integers. Returns: int: Sum of all even numbers in the array. return sum(num for num in arr if num % 2 == 0)"},{"question":"Write a function that takes a list of integers and a target integer as input and returns a tuple containing a pair of indices of two numbers in the list that add up to the target integer. If there are multiple pairs, return the first pair found. If no such pair exists, return `None`. For example: - The input list `[2, 7, 11, 15]` with a target of `9` should return `(0, 1)` because the numbers at indices `0` and `1` add up to `9`. - If the input list is `[1, 2, 3, 4, 5]` with a target of `10`, the function should return `None` because no pairs add up to `10`. Note: - Ensure that the input \\"list\\" is a list of integers and the \\"target\\" is an integer. - Return \\"Please enter a valid list of integers\\" if the list is not valid. - Return \\"Please enter a valid target integer\\" if the target is not an integer.","solution":"def find_pair_with_sum(numbers, target): Returns a tuple containing a pair of indices of two numbers in the list that add up to the target integer. If no such pair exists, return None. If the input is not valid, return a respective error message. :param numbers: List of integers. :param target: Target integer. :return: Tuple of two indices or None. if not isinstance(numbers, list) or not all(isinstance(num, int) for num in numbers): return \\"Please enter a valid list of integers\\" if not isinstance(target, int): return \\"Please enter a valid target integer\\" num_map = {} for i, num in enumerate(numbers): difference = target - num if difference in num_map: return (num_map[difference], i) num_map[num] = i return None"},{"question":"# Host a Party You are planning to host a party and have invited several guests. Each guest can have one or more dietary restrictions such as \\"vegetarian,\\" \\"vegan,\\" \\"nut-free,\\" etc. You need to prepare the party menu accordingly. Write a function `get_common_restrictions(guests)` that takes a list of guests, where each guest is represented as a set of dietary restrictions, and returns a set of dietary restrictions that apply to all guests. For example, if the list of guests is: ``` [{\\"vegetarian\\", \\"nut-free\\"}, {\\"vegetarian\\", \\"gluten-free\\"}, {\\"vegetarian\\"}] ``` The function should return: ``` {\\"vegetarian\\"} ``` If there are no common dietary restrictions, the function should return an empty set. **Function Signature:** ```python def get_common_restrictions(guests: List[Set[str]]) -> Set[str]: ``` **Examples:** ```python guests1 = [{\\"vegetarian\\", \\"nut-free\\"}, {\\"vegetarian\\", \\"gluten-free\\"}, {\\"vegetarian\\"}] get_common_restrictions(guests1) == {\\"vegetarian\\"} guests2 = [{\\"vegan\\"}, {\\"vegetarian\\", \\"nut-free\\"}, {\\"gluten-free\\"}] get_common_restrictions(guests2) == set() ``` **Explanation:** - In the first example, all guests have \\"vegetarian\\" as a common dietary restriction. - In the second example, there are no dietary restrictions that apply to all guests, so the result is an empty set.","solution":"def get_common_restrictions(guests): if not guests: return set() # Find the common restrictions among all guests common_restrictions = guests[0] # Initialize with the first set of restrictions for restrictions in guests[1:]: common_restrictions &= restrictions # Perform intersection return common_restrictions"},{"question":"You are given an integer array and a target integer. You need to determine whether there are two distinct indices i and j in the array where the sum of the elements at these indices is equal to the target integer. If such indices exist, return their pair as a tuple (i, j); otherwise, return an empty tuple. For Example: * Given the array `[2, 7, 11, 15]` and the target `9`, applying the algorithm will return `(0, 1)` because `2 + 7 = 9`. * Given the array `[3, 2, 4]` and the target `6`, applying the algorithm will return `(1, 2)` because `2 + 4 = 6`. * Given the array `[3, 3]` and the target `6`, applying the algorithm will return `(0, 1)` because `3 + 3 = 6`. Implement a function that performs this task efficiently. Notes * The array consists of integers. * There must be exactly one pair of indices that correctly adds up to the target integer. * The indices must be distinct, meaning i cannot be equal to j.","solution":"def two_sum(nums, target): Returns a tuple of indices (i, j) where nums[i] + nums[j] == target. If no such indices exist, return an empty tuple. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return ()"},{"question":"Given an array of integers, determine whether it can be rearranged into a strictly increasing sequence by performing at most one swap of two elements (or preserving the original array without any swaps if it is already strictly increasing). If it is possible, return \\"YES\\", otherwise return \\"NO\\". -----Input:----- - First line will contain T, the number of test cases. - Each test case consists of two lines. - First line contains a single integer N denoting the size of the array. - Second line contains N space-separated integers forming the array. -----Output:----- For each test case, output \\"YES\\" if the array can be rearranged into a strictly increasing sequence by performing at most one swap of two elements, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 10^3 - 2 leq N leq 10^3 - -10^6 leq arr[i] leq 10^6 -----Sample Input:----- 3 5 1 5 3 4 2 6 1 3 5 3 4 6 4 1 2 3 4 -----Sample Output:----- YES NO YES -----EXPLANATION:----- For 1) Swapping 5 and 2 will give the array [1, 2, 3, 4, 5], which is a strictly increasing sequence. For 2) No single swap can make the array strictly increasing. For 3) The array is already in a strictly increasing sequence.","solution":"def can_be_strictly_increasing_by_one_swap(arr): Determines if the array can be rearranged into a strictly increasing sequence by performing at most one swap of two elements or is already strictly increasing. n = len(arr) # Check if the array is already strictly increasing sorted_arr = sorted(arr) if arr == sorted_arr: return \\"YES\\" # Find the indices where the array is not strictly increasing mismatch_indices = [] for i in range(n - 1): if arr[i] >= arr[i + 1]: mismatch_indices.append(i) mismatch_indices.append(i + 1) mismatch_indices = sorted(set(mismatch_indices)) # If there are more than 4 mismatched indices, then more than one swap is needed if len(mismatch_indices) > 4: return \\"NO\\" # Try all swaps between mismatched indices for i in range(len(mismatch_indices)): for j in range(i + 1, len(mismatch_indices)): arr[mismatch_indices[i]], arr[mismatch_indices[j]] = arr[mismatch_indices[j]], arr[mismatch_indices[i]] if arr == sorted_arr: return \\"YES\\" arr[mismatch_indices[i]], arr[mismatch_indices[j]] = arr[mismatch_indices[j]], arr[mismatch_indices[i]] return \\"NO\\" def solve(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] result = can_be_strictly_increasing_by_one_swap(arr) results.append(result) return results"},{"question":"Alex is organizing a science fair where different experiments are displayed in an uninterrupted sequence. Each experiment has a starting and ending time, and no two experiments overlap. The fair management decides that Alex needs to merge some adjacent experiments into larger blocks, such that the total number of blocks is minimized. An experiment block is defined as a continuous sequence of experiments with no gaps between them. Given the number of experiments and their respective time intervals, determine the minimum number of blocks Alex can create. ----Input:---- The first line contains an integer T, the number of test cases (1 leq T leq 100). Each test case starts with an integer n, the number of experiments (1 leq n leq 100). The next n lines contain two integers each, s_i and e_i (0 leq s_i < e_i leq 1000), the start and end times of the i-th experiment. ----Output:---- For each test case, output a single integer - the minimum number of blocks Alex can create. ----Constraints:---- - 1 leq n leq 100 - 0 leq s_i < e_i leq 1000 ----Sample Input:---- 3 3 1 3 3 5 6 8 2 2 4 5 7 4 1 2 2 3 3 4 4 5 ----Sample Output:---- 2 2 1 ----Explanation:---- In the first sample, the first and second experiments can be merged into one block [1, 5], and the third experiment stays as another block, leading to two blocks. In the second sample, the two experiments cannot be merged, thus resulting in two blocks. In the third sample, all experiments are continuous and can be merged into a single block [1, 5].","solution":"def count_minimum_blocks(test_cases): results = [] for experiments in test_cases: experiments.sort() # Sort by start times (and end times in case of ties) # Initialize tracking variables current_start, current_end = experiments[0] blocks = 1 for i in range(1, len(experiments)): next_start, next_end = experiments[i] # Check for continuity if next_start > current_end: # New block needed blocks += 1 current_start, current_end = next_start, next_end else: # Merge into the current block current_end = max(current_end, next_end) results.append(blocks) return results # Function to parse input and call the main logic function def organize_science_fair(data): lines = data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) index += 1 experiments = [] for _ in range(n): s_i, e_i = map(int, lines[index].split()) experiments.append((s_i, e_i)) index += 1 test_cases.append(experiments) return count_minimum_blocks(test_cases)"},{"question":"An amusement park sells tickets to various shows. For each ticket, the information includes the ticket type and the quantity. The input is an array of ticket sales events, where each event is represented as an array `[ticket_type, quantity]`. Calculate the total number of tickets sold for each ticket type and return a dictionary with ticket types as keys and total quantities as values. If an unknown ticket type is encountered, it should be categorized under `\'other\'`. # Example: ticket_sales([[\'adult\', 5], [\'child\', 3], [\'senior\', 2], [\'child\', 7], [\'student\', 4]]) returns {\'adult\': 5, \'child\': 10, \'senior\': 2, \'student\': 4} ticket_sales([[\'vip\', 3], [\'adult\', 4], [\'unknown\', 2]]) returns {\'vip\': 3, \'adult\': 4, \'other\': 2}","solution":"def ticket_sales(events): Calculates the total number of tickets sold for each ticket type. Args: events (list of lists): A list of ticket sales events, where each event is a list [ticket_type, quantity]. Returns: dict: A dictionary with ticket types as keys and total quantities as values. ticket_summary = {} for event in events: ticket_type, quantity = event if ticket_type not in [\'adult\', \'child\', \'senior\', \'student\', \'vip\']: ticket_type = \'other\' if ticket_type in ticket_summary: ticket_summary[ticket_type] += quantity else: ticket_summary[ticket_type] = quantity return ticket_summary"},{"question":"Create a function called `find_longest_sequence(array)` that takes a list of integers, `array`, and finds the longest contiguous subsequence of strictly increasing or strictly decreasing integers. The function should return this subsequence as a list of integers. If multiple subsequences of the same length exist, return the one that appears first. # Input: - A list of integers, `array` (1 ≤ len(array) ≤ 10000). # Output: - A list of integers representing the longest contiguous subsequence that is strictly increasing or strictly decreasing. # Examples: ```python find_longest_sequence([1, 3, 5, 4, 2, 3, 5, 6, 7]) # Output: [2, 3, 5, 6, 7] find_longest_sequence([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) # Output: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] find_longest_sequence([1, 7, 5, 4, 3, 2, 8, 9, 10]) # Output: [7, 5, 4, 3, 2] ``` # Constraints: - The input list will have at least one integer and a maximum of 10,000 integers. - The integers within the list can be positive, negative, or zero. The solution should be efficient in terms of time complexity to handle the maximum input size.","solution":"def find_longest_sequence(array): Finds the longest contiguous subsequence of strictly increasing or strictly decreasing integers in array. if not array: return [] n = len(array) longest_sequence = [] # Finding the longest increasing subsequence current_sequence = [array[0]] for i in range(1, n): if array[i] > array[i-1]: current_sequence.append(array[i]) else: if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence[:] current_sequence = [array[i]] if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence[:] # Finding the longest decreasing subsequence current_sequence = [array[0]] for i in range(1, n): if array[i] < array[i-1]: current_sequence.append(array[i]) else: if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence[:] current_sequence = [array[i]] if len(current_sequence) > len(longest_sequence): longest_sequence = current_sequence[:] return longest_sequence"},{"question":"Write a function, `find_missing_number`, that takes in a list of unique integers sorted in ascending order which represents a range of consecutive numbers, and returns the single missing integer in the range. The list is guaranteed to have exactly one missing number. For example: ```python find_missing_number([1, 2, 3, 4, 6]) => 5 # Because the sequence should be 1, 2, 3, 4, 5, 6, # with 5 missing. find_missing_number([10, 11, 12, 13, 15]) => 14 # Because the sequence should be 10, 11, 12, 13, 14, 15, # with 14 missing. find_missing_number([100, 101, 103, 104]) => 102 # Because the sequence should be 100, 101, 102, 103, 104, # with 102 missing. ``` ```python find_missing_number([1, 2, 3, 4, 6]) # returns 5, because the sequence should be 1, 2, 3, 4, 5, 6, # with 5 missing. find_missing_number([10, 11, 12, 13, 15]) # returns 14, because the sequence should be 10, 11, 12, 13, 14, 15, # with 14 missing. find_missing_number([100, 101, 103, 104]) # returns 102, because the sequence should be 100, 101, 102, 103, 104, # with 102 missing. ```","solution":"def find_missing_number(nums): Returns the missing number from a list of consecutive integers with one missing number. expected_sum = sum(range(nums[0], nums[-1] + 1)) actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Write a program to help an artist organize his painting sessions. The artist can schedule one painting session per day. However, he can only start a new session if it doesn\'t overlap with an ongoing one from the previous days. Given a sorted list of painting sessions with their start and end days, determine the maximum number of non-overlapping sessions the artist can schedule. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case begins with an integer N, representing the number of painting sessions available. - The next N lines each contains two integers start_i and end_i, where start_i is the start day and end_i is the end day of the i^{th} painting session. -----Output:----- For each test case, output a single line containing the maximum number of non-overlapping sessions the artist can schedule. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq start_i < end_i leq 10^6 -----Sample Input:----- 2 3 1 2 2 3 3 4 4 1 3 2 5 4 6 7 8 -----Sample Output:----- 2 3","solution":"def max_non_overlapping_sessions(test_cases): results = [] for sessions in test_cases: sessions.sort(key=lambda x: x[1]) last_end = 0 count = 0 for start, end in sessions: if start > last_end: last_end = end count += 1 results.append(count) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) sessions = [] index += 1 for _ in range(N): start, end = map(int, input_lines[index].strip().split()) sessions.append((start, end)) index += 1 test_cases.append(sessions) return test_cases def solution(input_str): test_cases = parse_input(input_str) return max_non_overlapping_sessions(test_cases)"},{"question":"Given a list of strings, each representing a log entry from a software system, determine the longest span (in lines) of log entries that continuously fall within a specified severity level range. Each log entry string logEntries[i] consists of two parts separated by a comma: a timestamp and a severity level. The severity level is an integer ranging from 0 to 10, with higher numbers indicating more severe issues. You are given startLevel and endLevel, which specify the inclusive range of severity levels to consider. Return the length of the longest contiguous segment of log entries that all have severity levels within this range. Example 1: Input: logEntries = [\\"2023-10-01T12:00:00,3\\", \\"2023-10-01T12:01:00,5\\", \\"2023-10-01T12:02:00,7\\", \\"2023-10-01T12:03:00,2\\", \\"2023-10-01T12:04:00,6\\", \\"2023-10-01T12:05:00,1\\"], startLevel = 3, endLevel = 7 Output: 3 Explanation: The longest span within severity levels 3 to 7 is [\\"2023-10-01T12:00:00,3\\", \\"2023-10-01T12:01:00,5\\", \\"2023-10-01T12:02:00,7\\"], which has a length of 3. Example 2: Input: logEntries = [\\"2023-10-01T12:00:00,8\\", \\"2023-10-01T12:01:00,4\\", \\"2023-10-01T12:02:00,5\\", \\"2023-10-01T12:03:00,6\\", \\"2023-10-01T12:04:00,2\\", \\"2023-10-01T12:05:00,9\\"], startLevel = 4, endLevel = 6 Output: 3 Explanation: The longest span within severity levels 4 to 6 is [\\"2023-10-01T12:01:00,4\\", \\"2023-10-01T12:02:00,5\\", \\"2023-10-01T12:03:00,6\\"], which has a length of 3. Example 3: Input: logEntries = [\\"2023-10-01T12:00:00,3\\", \\"2023-10-01T12:01:00,2\\", \\"2023-10-01T12:02:00,1\\", \\"2023-10-01T12:03:00,2\\", \\"2023-10-01T12:04:00,8\\"], startLevel = 2, endLevel = 3 Output: 2 Explanation: The longest span within severity levels 2 to 3 is [\\"2023-10-01T12:00:00,3\\", \\"2023-10-01T12:01:00,2\\"], which has a length of 2. Constraints: logEntries.length <= 1000 Each logEntries[i] takes the form \\"YYYY-MM-DDTHH:MM:SS,{level}\\" Each timestamp follows the ISO 8601 format Each severity level is an integer between 0 and 10 startLevel and endLevel are integers between 0 and 10","solution":"def longest_severity_span(logEntries, startLevel, endLevel): Returns the length of the longest contiguous segment of log entries that all have severity levels within the specified range [startLevel, endLevel]. max_length = 0 current_length = 0 for entry in logEntries: timestamp, severity = entry.split(\',\') severity = int(severity) if startLevel <= severity <= endLevel: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"=====Problem Statement===== You are given an integer array A of length N. Your task is to find the maximum product of any two distinct elements in the array. =====Input Format===== The first line contains integer T, the number of test cases. The next line contains integer N, the length of array A. The next N lines contains the elements of array A. =====Constraints===== 0 < T < 50 2 < N < 1000 -1000 < A[i] < 1000 =====Output Format===== Print the maximum product for each test case without quotes.","solution":"def max_product_of_two_distinct_elements(T, test_cases): Given a number of test cases, compute the maximum product of two distinct elements in the array for each test case. T : int : Number of test cases test_cases : list : A list of tuples, each containing the length of the array (N) and the array (A) results = [] for N, A in test_cases: if N < 2: raise ValueError(\\"Array length must be at least 2.\\") max_product = float(\'-inf\') for i in range(N): for j in range(i + 1, N): product = A[i] * A[j] if product > max_product: max_product = product results.append(max_product) return results"},{"question":"Given a list of integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj == 0 or Sj % Si == 0 If there are multiple subsets of the maximum length, return any one of them. Write a function that takes in a list of integers and returns the largest subset meeting the above criteria. # Function Signature ```python def largestDivisibleSubset(nums: List[int]) -> List[int]: ``` # Input - A list of integers `nums` where 1 ≤ len(nums) ≤ 1000 # Output - A list representing the largest subset where each pair of elements satisfies the divisibility condition. # Example ```python Input: [1, 2, 3] Output: [1, 2] (The output [1, 3] is also correct) Input: [1, 2, 4, 8] Output: [1, 2, 4, 8] ``` # Note - All elements in the input list are positive integers. - If there are multiple correct answers, you may return any of them. You might need to sort the array and use dynamic programming to achieve the desired time complexity.","solution":"from typing import List def largestDivisibleSubset(nums: List[int]) -> List[int]: if not nums: return [] nums.sort() n = len(nums) dp = [1] * n prev = [-1] * n max_len = 1 max_index = 0 for i in range(1, n): for j in range(i): if nums[i] % nums[j] == 0 and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j if dp[i] > max_len: max_len = dp[i] max_index = i result = [] while max_index >= 0: result.append(nums[max_index]) max_index = prev[max_index] return result[::-1]"},{"question":"Write a function that takes a string and returns the first character that appears only once. If no such character exists, return an empty string. Your solution should work efficiently even for long strings (up to 10^6 characters). Examples ```python first_unique_char(\\"abracadabra\\") ==> \\"c\\" # \'c\' is the first character that appears only once first_unique_char(\\"swiss\\") ==> \\"w\\" # \'w\' is the first character that appears only once first_unique_char(\\"repeated\\") ==> \\"r\\" # \'r\' is the first character that appears only once first_unique_char(\\"aardvark\\") ==> \\"d\\" # \'d\' is the first character that appears only once first_unique_char(\\"aabbccdd\\") ==> \\"\\" # no unique character exists ```","solution":"def first_unique_char(s): Returns the first character in the string that appears only once. If no such character exists, returns an empty string. # Dictionary to store the count of each character char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no unique character exists return \\"\\""},{"question":"You are designing an ecosystem for a new simulation game where players need to create the most balanced environment to maximize the growth of plants and the well-being of animals. The ecosystem is represented by a series of nodes and edges in a graph, where nodes represent different areas (each area can be a plant or an animal) and edges represent the interactions between them. Each interaction has a benefit value associated with it. Given the graph, you want to determine the maximum total benefit value that can be achieved by selecting a subset of non-interacting nodes. Two nodes are considered interacting if there is a direct edge between them. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of the test cases follows. - The first line of each test case contains an integer n denoting the number of nodes. - The second line of each test case contains an integer m denoting the number of edges. - The third line contains n space-separated integers denoting the benefit values of the nodes. - The following m lines each contain two integers u and v denoting that there is an edge between node u and node v. -----Output----- For each test case, output your answer in a single line - the maximum total benefit value that can be achieved by selecting a subset of non-interacting nodes. -----Constraints----- - 1 le T le 10 - 1 le n leq 100 - 0 le m leq 1000 - 1 leq value of benefit value leq 1000 - 1 le u, v le n -----Example Input----- 2 5 4 1 2 3 4 5 1 2 2 3 4 5 3 4 3 2 10 20 30 1 2 2 3 -----Example Output----- 9 40 -----Explanation----- Testcase 1: The optimal choice of non-interacting nodes consists of nodes 1, 4, and 5 because they have the highest total benefit value with no direct edges between them. Testcase 2: By selecting node 3 with a benefit value of 30 and node 1 with a benefit value of 10, the total benefit value is maximized.","solution":"def max_benefit(T, test_cases): def find_max_non_interacting_nodes_benefit(n, m, benefits, edges): from itertools import combinations max_benefit_sum = 0 # Convert edge list to adjacency list adj = {i: set() for i in range(1, n+1)} for u, v in edges: adj[u].add(v) adj[v].add(u) # Try all subsets of the nodes to find the maximum non-interacting subset for r in range(1, n+1): for subset in combinations(range(1, n+1), r): if all(neigh not in subset for node in subset for neigh in adj[node]): subset_benefit = sum(benefits[node-1] for node in subset) max_benefit_sum = max(max_benefit_sum, subset_benefit) return max_benefit_sum results = [] for i in range(T): n, m, benefits, edges = test_cases[i] results.append(find_max_non_interacting_nodes_benefit(n, m, benefits, edges)) return results def process_input(input_data): input_data = input_data.strip().split(\'n\') T = int(input_data[0]) test_cases = [] idx = 1 for _ in range(T): n = int(input_data[idx]) m = int(input_data[idx+1]) benefits = list(map(int, input_data[idx+2].split())) edges = [tuple(map(int, input_data[idx+3+j].split())) for j in range(m)] test_cases.append((n, m, benefits, edges)) idx += 3 + m return T, test_cases def generate_output(results): return \'n\'.join(map(str, results)) def solve(input_data): T, test_cases = process_input(input_data) results = max_benefit(T, test_cases) return generate_output(results)"},{"question":"You are designing an automatic system to package chocolates into boxes based on their sizes. Each chocolate has a unique size, and so does each box. Every chocolate needs to be paired with exactly one box. Your task is to write a function that determines the optimal way to match chocolates to boxes such that the total empty space in all boxes is minimized. Instructions Write a function `match_chocolates_boxes(chocolates, boxes)` that takes in: - chocolates: a list of positive integers representing the sizes of the chocolates. - boxes: a list of positive integers representing the sizes of the boxes. The function should return the total minimized empty space left after all chocolates have been placed in the boxes. If there are more chocolates than boxes, or more boxes than chocolates, return `-1`. # Other points - A chocolate can only be placed in a box if the size of the box is greater than or equal to the size of the chocolate. - You may assume that there are no duplicate sizes within each list. # Example ```python match_chocolates_boxes([3, 1, 2], [2, 3, 3]) # You should pair the chocolates 1, 2, and 3 with the boxes 2, 3, and 3 respectively. # Empty space: (2-1) + (3-2) + (3-3) = 1 + 1 + 0 = 2 # The function should return 2. match_chocolates_boxes([4, 2, 5], [4, 5, 6]) # Pair the chocolates 4, 2, and 5 with the boxes 4, 5, and 6 respectively. # Empty space: (4-4) + (5-2) + (6-5) = 0 + 3 + 1 = 4 # The function should return 4. match_chocolates_boxes([3, 4], [2, 4]) # The chocolate size 3 cannot fit in a box size 2. # The function should return -1. match_chocolates_boxes([1, 2], [3, 4, 5]) # There are more boxes than chocolates. # The function should return -1. ```","solution":"def match_chocolates_boxes(chocolates, boxes): Matches each chocolate with a box such that the total empty space left is minimized. Arguments: chocolates -- list of positive integers representing the sizes of the chocolates. boxes -- list of positive integers representing the sizes of the boxes. Returns: total_minimized_empty_space -- total minimized empty space left after all chocolates have been placed in the boxes. Returns -1 if it\'s not possible to pair chocolates and boxes. if len(chocolates) != len(boxes): return -1 chocolates.sort() boxes.sort() total_minimized_empty_space = 0 for chocolate, box in zip(chocolates, boxes): if box < chocolate: return -1 total_minimized_empty_space += (box - chocolate) return total_minimized_empty_space"},{"question":"Bob is a big fan of playing with cards. He has a special collection of cards where each card has a unique number on it. Bob loves to arrange his cards in a specific manner. He always places his cards in a sequence such that the numbers on them form an increasing sequence of consecutive numbers. For instance, if Bob has cards numbered [3, 2, 1, 4, 6, 5], he can arrange them as [1, 2, 3, 4, 5, 6]. Bob has a new set of N cards and they are initially in a random order. He may not have all the cards needed to form a perfect sequence of consecutive numbers. Bob can remove some cards from the set (but not add new ones) to form the longest possible sequence of consecutive numbers. Can you help Bob by finding the length of the longest sequence of consecutive numbers that can be formed from his set? -----Input----- The first line of the input contains a single integer T, the number of test cases. T test cases follow. Each test case consists of two lines. The first line contains the integer N (the number of cards in the set). The second line contains N space-separated integers representing the numbers on the cards. -----Output----- For each test case, output a single line containing the length of the longest sequence of consecutive numbers that can be formed. -----Constraints----- 1 ≤ T ≤ 1000 1 ≤ N ≤ 100000 The card numbers are distinct. The sum of N over all test cases does not exceed 200000. -----Example----- Input: 3 6 3 2 1 4 6 5 5 10 5 3 11 6 8 8 1 9 5 2 4 6 3 Output: 6 2 6 -----Explanation----- Case 1. The sequence [1, 2, 3, 4, 5, 6] can be formed which has a length of 6. Case 2. The sequence [10, 11] can be formed which has a length of 2. Case 3. The sequence [1, 2, 3, 4, 5, 6] can be formed which has a length of 6.","solution":"def longest_consecutive_sequence_length(cards): This function finds the length of the longest sequence of consecutive numbers that can be formed from the given list of cards. card_set = set(cards) max_length = 0 for card in cards: if card - 1 not in card_set: current_card = card current_length = 1 while current_card + 1 in card_set: current_card += 1 current_length += 1 max_length = max(max_length, current_length) return max_length def longest_sequences_for_tests(T, test_cases): results = [] for i in range(T): N, cards = test_cases[i] results.append(longest_consecutive_sequence_length(cards)) return results"},{"question":"Given a list of intervals with start and end times `[start1, end1, start2, end2, ...]`, determine if a person could attend all meetings without any overlaps. Each meeting interval is represented by a pair of integers `[start, end]`, where `start` is the start time and `end` is the end time of that meeting. Return true if a person could attend all meetings, otherwise return false. Example 1: Input: intervals = [0, 30, 5, 10, 15, 20] Output: false Explanation: A person cannot attend both the meetings `[0, 30]` and `[5, 10]` because they overlap during the time 5 through 10. Example 2: Input: intervals = [7, 10, 2, 4] Output: true Explanation: A person can attend both meetings as `[2, 4]` and `[7, 10]` do not overlap. Note: - The list intervals will have length in range [0, 200]. - Each interval\'s start and end times will be integers in the range [0, 10^6].","solution":"def can_attend_all_meetings(intervals): Determine if a person could attend all meetings without any overlaps. :param intervals: List of start and end times [start1, end1, start2, end2, ...] :return: Boolean, True if a person can attend all meetings else False if not intervals or len(intervals) < 4: return True # Create a list of tuples (start, end) meetings = [(intervals[i], intervals[i + 1]) for i in range(0, len(intervals), 2)] # Sort the meetings by the start times meetings.sort() # Compare end time of current meeting with start time of the next meeting for i in range(1, len(meetings)): if meetings[i - 1][1] > meetings[i][0]: return False return True"},{"question":"Marta and Niko are playing another fun game. They start with an array of integers containing both positive and negative numbers. The game is described as follows: - Marta and Niko take turns, with Marta going first. - In each turn, the current player must select any two adjacent integers from the array and replace them with their sum. - The game continues until there is only one integer left in the array. - The final integer in the array determines the winner: - If the final integer is even, Marta wins. - If the final integer is odd, Niko wins. Given the initial array, determine the winner of the game if both players play optimally. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the length of the array. - The second line contains N space-separated integers, the elements of the array. -----Output----- - For each test case, print a single line containing the name of the final winner (\\"Marta\\" or \\"Niko\\"). -----Constraints----- - 1 le T le 100 - 2 le N le 100 - |A_i| le 10^6 for each valid i -----Example Input----- 3 3 1 2 3 4 3 -1 4 5 2 7 9 -----Example Output----- Marta Niko Marta -----Explanation----- Example case 1: No matter how the players combine the numbers, the sum will be even, so Marta wins. Example case 2: Optimal play results in an odd number. Example case 3: The sum of 7 and 9 is 16, an even number, so Marta wins.","solution":"def determine_winner(numbers): final_sum = sum(numbers) if final_sum % 2 == 0: return \\"Marta\\" else: return \\"Niko\\" def marta_and_niko_game(t, test_cases): results = [] for i in range(t): n, numbers = test_cases[i] results.append(determine_winner(numbers)) return results"},{"question":"Alice is organizing her bookshelf and noticed that she needs a system to manage her collection of books. She wants to categorize her books by genre, but the problem is that she often buys and also gives away books, which frequently changes her collection. She needs software that allows her to add books to her collection, remove books from her collection, and count the number of books available for a particular genre. Here\'s your task: Help Alice by implementing a system that handles a series of operations on her book collection. The program will handle the following types of operations: 1. Add a book with a specified genre to the collection. 2. Remove a book of a specified genre from the collection. If there are no books of that genre, do nothing. 3. Report the number of books in a specified genre. Input: - The first line contains an integer `q` (1 ≤ q ≤ 200,000) — the number of operations. - Each of the following `q` lines contains an operation in the form of a number and a string. - If it\'s a `1 s`, it means to add a book of genre `s`. - If it\'s a `2 s`, it means to remove a book of genre `s`. - If it\'s a `3 s`, it means to report the number of books of genre `s`. Output: - For each operation of type `3 s`, output a single line containing the number of books in genre `s`. Examples: Input: 7 1 Fiction 1 Fantasy 1 Fiction 3 Fiction 2 Fiction 3 Fiction 3 Fantasy Output: 2 1 1 Explanation: 1. Add a Fiction book. Collection: {Fiction: 1} 2. Add a Fantasy book. Collection: {Fiction: 1, Fantasy: 1} 3. Add another Fiction book. Collection: {Fiction: 2, Fantasy: 1} 4. Report the number of Fiction books. Output: 2 5. Remove a Fiction book. Collection: {Fiction: 1, Fantasy: 1} 6. Report the number of Fiction books. Output: 1 7. Report the number of Fantasy books. Output: 1","solution":"from collections import defaultdict class BookCollection: def __init__(self): self.genres = defaultdict(int) def add_book(self, genre): self.genres[genre] += 1 def remove_book(self, genre): if self.genres[genre] > 0: self.genres[genre] -= 1 def count_books(self, genre): return self.genres[genre]"},{"question":"Catnip, the curious kitten, wants to gather all shiny objects in the garden. The garden is represented as a rectangular grid of size N x M where each cell contains an integer representing the time (in minutes) required by Catnip to collect the shiny object from that cell. Catnip can move right, down, or diagonally (right-down) to collect all objects. Your task is to help Catnip find the minimum time required to collect shiny objects from the top-left corner (cell [1,1]) to the bottom-right corner (cell [N,M]). -----Input----- First line contains two integers, N and M denoting the dimensions of the grid. Next N lines each contain M integers representing the time required to collect the shiny object from each cell. -----Output----- Print a single integer representing the minimum time required for Catnip to collect all the shiny objects from the top-left to the bottom-right corner. -----Constraints----- - 1 ≤ N, M ≤ 1000 - 1 ≤ time in each cell ≤ 100000 -----Example----- Input: 3 3 1 2 3 4 8 2 1 5 3 Output: 8 Explanation: The path with the minimum time is: Top-left [1,1] → [2,2] → [3,3] Total time = 1 + 8 + 3 = 12","solution":"def min_time_to_collect(N, M, grid): dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j] return dp[N-1][M-1]"},{"question":"# Longest Substring Without Repeating Characters Write a function that takes a string as input and returns the length of the longest substring without repeating characters. **Example 1:** ``` Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with a length of 3. ``` **Example 2:** ``` Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with a length of 1. ``` **Example 3:** ``` Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with a length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. ``` **Constraints:** * `0 <= s.length <= 5 * 10^4` * `s` consists of English letters, digits, symbols, and spaces.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: Input string :type s: str :return: Length of the longest substring without repeating characters :rtype: int char_index_map = {} longest_length = 0 start_index = 0 for current_index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start_index: start_index = char_index_map[char] + 1 char_index_map[char] = current_index longest_length = max(longest_length, current_index - start_index + 1) return longest_length"},{"question":"Task Your task is to create a `TextEditor` class that simulates a basic text editor with the following methods: `insert()`, `delete()`, `move_cursor()`, and `current_text()`. # Methods 1. **insert(position, text)**: - Inserts a string `text` at the specified `position` of the current text. - If `position` is greater than the length of the current text, append the text to the end. ```python editor = TextEditor() editor.insert(0, \\"Hello\\") print(editor.current_text()) # Outputs: \\"Hello\\" editor.insert(5, \\" World\\") print(editor.current_text()) # Outputs: \\"Hello World\\" editor.insert(6, \\"beautiful \\") print(editor.current_text()) # Outputs: \\"Hello beautiful World\\" ``` 2. **delete(position, length)**: - Deletes `length` characters from the current text starting from `position`. - If `position + length` exceeds the current text length, delete up to the end of the text. ```python editor = TextEditor() editor.insert(0, \\"Hello World\\") editor.delete(6, 6) print(editor.current_text()) # Outputs: \\"Hello \\" ``` 3. **move_cursor(position)**: - Moves the cursor to the specified `position`. The cursor indicates the current editing position. - If `position` is greater than the length of the current text, move the cursor to the end of the text. ```python editor = TextEditor() editor.insert(0, \\"Hello World\\") editor.move_cursor(6) editor.insert(editor.cursor, \\"beautiful \\") print(editor.current_text()) # Outputs: \\"Hello beautiful World\\" ``` 4. **current_text()**: - Returns the current text as a string. ```python editor = TextEditor() editor.insert(0, \\"Hello World\\") print(editor.current_text()) # Outputs: \\"Hello World\\" ``` # Notes - Initialize the text editor with an empty string. - Maintain the cursor position within the editor. - Operations should be optimized for efficiency in time and space complexity. # Example Usage ```python editor = TextEditor() editor.insert(0, \\"Hello World\\") print(editor.current_text()) # Outputs: \\"Hello World\\" editor.move_cursor(6) editor.insert(editor.cursor, \\"beautiful \\") print(editor.current_text()) # Outputs: \\"Hello beautiful World\\" editor.delete(12, 10) print(editor.current_text()) # Outputs: \\"Hello beautiful\\" editor.move_cursor(0) editor.insert(editor.cursor, \\"Hey, \\") print(editor.current_text()) # Outputs: \\"Hey, Hello beautiful\\" ```","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.cursor = 0 def insert(self, position, text): if position > len(self.text): self.text += text else: self.text = self.text[:position] + text + self.text[position:] def delete(self, position, length): if position < 0 or position >= len(self.text): return end_position = min(position + length, len(self.text)) self.text = self.text[:position] + self.text[end_position:] def move_cursor(self, position): self.cursor = min(position, len(self.text)) def current_text(self): return self.text"},{"question":"You are given an array of integers, and you need to find out if it is possible to partition this array into two non-empty subsets such that the sum of the elements in both subsets is the same. Write a function `canPartition(nums)` that takes in an array of integers and returns `True` if such a partition is possible, otherwise, return `False`. Example: Input: [1, 5, 11, 5] Output: True Explanation: The array can be partitioned as [1, 5, 5] and [11]. Input: [1, 2, 3, 5] Output: False Explanation: The array cannot be partitioned into equal sum subsets. Note: - Each of the array elements will be in the range [1, 100]. - The length of the array will not exceed 200.","solution":"def canPartition(nums): Determines if an array can be partitioned into two subsets with equal sum. :param nums: List[int] - The list of integers to partition. :return: bool - True if the array can be partitioned into two subsets with equal sum, False otherwise. total_sum = sum(nums) # If total sum is odd, it\'s not possible to partition into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Creating a DP array to check subset sums dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"You are developing a simulation for a robotic vacuum cleaner. The vacuum cleaner is placed in a room represented as a 2D grid of size M x N. Each cell in the grid is either a free cell (denoted by 0) or an obstacle (denoted by 1). The vacuum cleaner can move one cell at a time in the four cardinal directions (up, down, left, right) but cannot pass through or land on an obstacle. The vacuum starts at the cell (0, 0) and you want to program it to clean the grid efficiently. At each step, the vacuum can move to one of the adjacent cells if it\'s free. The goal is to find the minimum number of steps required for the vacuum cleaner to reach the bottom-right corner of the grid (M-1, N-1). If it\'s impossible to reach the bottom-right corner, return -1. You are to write a program that calculates the minimum number of steps required. Constraints: - 1 ≤ M, N ≤ 1000 - Each cell in the grid is either 0 (free cell) or 1 (obstacle). - The initial position (0, 0) and the target position (M-1, N-1) are always free cells (0). Input: The input is given from Standard Input in the following format: ``` M N grid[0][0] grid[0][1] ... grid[0][N-1] grid[1][0] grid[1][1] ... grid[1][N-1] ... grid[M-1][0] grid[M-1][1] ... grid[M-1][N-1] ``` Output: Print the minimum number of steps required for the vacuum cleaner to reach the bottom-right corner. If it\'s impossible to reach the bottom-right corner, return -1. Sample Input 1: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Sample Output 1: ``` 4 ``` Sample Input 2: ``` 3 3 0 1 0 1 0 1 0 0 0 ``` Sample Output 2: ``` -1 ``` Explanation: - In the first sample, the vacuum can move: (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) with 4 steps. - In the second sample, there is no valid path from (0,0) to (2,2), hence the output is -1.","solution":"from collections import deque def min_steps_to_reach_end(M, N, grid): if grid[0][0] == 1 or grid[M-1][N-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited = [[False]*N for _ in range(M)] visited[0][0] = True while queue: x, y, steps = queue.popleft() if x == M-1 and y == N-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") M, N = map(int, input_lines[0].split()) grid = [list(map(int, line.split())) for line in input_lines[1:]] return M, N, grid"},{"question":"Given a string containing only lowercase letters, determine if it can be rearranged to form a palindrome. Return True if it can be rearranged to form a palindrome, and False otherwise. For example: ```python can_form_palindrome(\\"carerac\\") == True can_form_palindrome(\\"aabbcc\\") == True can_form_palindrome(\\"abc\\") == False ```","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. Args: s (str): The input string containing only lowercase letters. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd number of counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearranged into a palindrome, # it can have at most one character with an odd count return odd_count <= 1"},{"question":"Write a function `convert_emoticons` that takes a string and converts any present emoticons to their corresponding text descriptions. The emoticons to be converted and their descriptions are as follows: - \\":)\\" should be converted to \\"smiley\\" - \\":(\\" should be converted to \\"sad\\" - \\":P\\" should be converted to \\"playful\\" The function should be case-sensitive, meaning \\":)\\" and \\":p\\" are different. If an emoticon is part of a word, it should still be converted, but maintaining all other parts of the word intact. For example: ```python convert_emoticons(\'Hello :)\'); => \\"Hello smiley\\" convert_emoticons(\'Bad day :(\') => \\"Bad day sad\\" convert_emoticons(\'Feeling :P!\') => \\"Feeling playful!\\" convert_emoticons(\'A smiley face :) in a sentence\') => \\"A smiley face smiley in a sentence\\" convert_emoticons(\':)good:(\') => \\"smileygoodsad\\" ``` **Note:** The input will be a non-empty string, and it should handle multiple emoticons in the same string.","solution":"def convert_emoticons(s): Convert emoticons in the string `s` to their text descriptions. - \\":)\\" becomes \\"smiley\\" - \\":(\\" becomes \\"sad\\" - \\":P\\" becomes \\"playful\\" emoticon_map = {\\":)\\": \\"smiley\\", \\":(\\": \\"sad\\", \\":P\\": \\"playful\\"} for emoticon, text in emoticon_map.items(): s = s.replace(emoticon, text) return s"},{"question":"You are given a string containing a series of words separated by spaces. Your task is to write a function that determines whether this string is a **pangram** or not. # Pangram Definition A **pangram** is a sentence that contains every letter of the alphabet at least once. For this challenge, you can assume the alphabet is composed of 26 lowercase letters from \'a\' to \'z\'. # Input - A single string `sentence`, containing lowercase letters, spaces, and possibly punctuation. # Output - Returns `True` if the sentence is a pangram, `False` otherwise. # Examples ```python is_pangram(\\"the quick brown fox jumps over the lazy dog\\") # Returns: True is_pangram(\\"hello world\\") # Returns: False ``` # Notes - Punctuation and spaces should be ignored. - The sentence is case insensitive. - The function should consider only letters from \'a\' to \'z\'.","solution":"def is_pangram(sentence): Determines whether the input sentence is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once. Parameters: sentence (str): The input string containing a series of words. Returns: bool: True if the sentence is a pangram, False otherwise. # Define the set of all alphabet letters alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') # Convert sentence to lowercase and remove non-alphabet characters cleaned_sentence = \'\'.join([char for char in sentence.lower() if char.isalpha()]) # Create a set of characters in the cleaned sentence sentence_set = set(cleaned_sentence) # Check if the alphabet set is a subset of the sentence set return alphabet_set.issubset(sentence_set)"},{"question":"Given an integer array `nums`, find a contiguous subarray that has the largest product, and return the product. Example 1: Input: nums = [2,3,-2,4] Output: 6 Explanation: The subarray [2, 3] has the largest product 6. Example 2: Input: nums = [-2,0,-1] Output: 0 Explanation: The result cannot be 2, because [-2,-1] is not a contiguous subarray. Example 3: Input: nums = [-2,3,-4] Output: 24 Explanation: The subarray [-2, 3, -4] has the largest product 24. Example 4: Input: nums = [-1,-3,-10,0,60] Output: 60 Explanation: The subarray [60] has the largest product 60. Constraints: 1 <= nums.length <= 2 * 10^4 -10 <= nums[i] <= 10 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.","solution":"def max_product(nums): Returns the maximum product of a contiguous subarray. if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Imagine you are a software engineer in a tech company. Your task is to analyze a user\'s browsing session across multiple websites. For a given session, you have the timestamps of the user\'s activity on various websites. You need to identify the longest continuous period during which the user was active on any of the websites. -----Input----- - The input consists of multiple test cases. - The first line contains an integer T (1 le T le 100) — the number of test cases. - For each test case: - The first line contains an integer N (2 le N le 1000) — the number of timestamps. - The second line contains N space-separated integers representing the timestamps in seconds (relative to the start of the session) when the user was active on a website. The timestamps are given in non-decreasing order. -----Output----- For each test case, output a single integer — the length of the longest continuous period the user was active on any website. -----Constraints----- - 0 le text{timestamp} le 10^9 -----Example Input----- 3 5 1 2 4 5 7 4 10 15 20 25 3 5 6 7 -----Example Output----- 4 5 2 -----Explanation----- Example case 1: The user was active at times 1, 2, 4, 5, and 7. The longest continuous period of activity is from time 1 to time 5, which has a duration of 5 - 1 = 4 seconds. Example case 2: The user was active at times 10, 15, 20, and 25. Each activity period is separate, so the longest period is between any two consecutive timestamps, which has a duration of 15 - 10 = 5 seconds. Example case 3: The user was active at times 5, 6, and 7. The longest continuous period of activity is from time 5 to time 7, which has a duration of 7 - 5 = 2 seconds.","solution":"def longest_continuous_period(test_cases): result = [] for case in test_cases: N, timestamps = case max_period = 0 for i in range(1, N): current_period = timestamps[i] - timestamps[i-1] max_period = max(max_period, current_period) result.append(max_period) return result # Function to parse the input and print the output def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) timestamps = list(map(int, data[index + 1:index + 1 + N])) test_cases.append((N, timestamps)) index += N + 1 results = longest_continuous_period(test_cases) for res in results: print(res) if __name__ == \\"__main__\\": main()"},{"question":"In a distant land, there exists a magical forest where every tree is enchanted and numbered uniquely from 1 to n. The forest is represented as an undirected tree graph with n vertices and n-1 edges, where each vertex corresponds to a tree and each edge represents a magical path connecting two trees. The enchantment power of each tree is defined by a non-negative integer a_i (0 le a_i le 10^9). The forest is always connected, which means there exists a unique path between any two trees. You, as the forest guardian, are tasked with finding an optimal strategy for collecting the magic from the trees, starting from any tree, subject to the following constraint: once a tree\'s magic is collected, the magic from its directly connected neighboring trees cannot be collected. Formally, you should select a subset of trees such that no two selected trees are directly connected, and the sum of their enchantment powers is maximized. Write a program to determine the maximum possible sum of the enchantment powers you can collect. -----Input----- The first line contains a single integer n (1 le n le 100000) — the number of trees. The second line contains n non-negative integers a_1, a_2, dots, a_n — the enchantment powers of the trees. Each of the following n-1 lines contains two integers u and v (1 le u, v le n) — denoting an edge between trees u and v. It is guaranteed that the input represents a valid tree. -----Output----- Output a single integer — the maximum sum of enchantment powers that can be collected, following the given constraint. -----Example----- Input 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output 12 Explanation: One of the optimal solutions is to collect magic from tree 4 and tree 5, giving a total enchantment power of 4 + 5 = 9. Another optimal solution is to collect magic from tree 2 and tree 3 and tree 5, giving a total enchantment power of 2 + 3 + 5 = 10. Another optimal solution is to collect magic from tree 3 and tree 4 and tree 5, giving a total enchantment power of 3 + 4 + 5 = 12. The maximum value among these is 12.","solution":"def max_enchantment_power(n, enchantment_powers, edges): from collections import defaultdict # Build the tree graph tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # DP arrays dp_include = [0] * (n + 1) dp_exclude = [0] * (n + 1) visited = [False] * (n + 1) def dfs(node): visited[node] = True dp_include[node] = enchantment_powers[node - 1] for neighbor in tree[node]: if not visited[neighbor]: dfs(neighbor) dp_include[node] += dp_exclude[neighbor] dp_exclude[node] += max(dp_include[neighbor], dp_exclude[neighbor]) # Start DFS from node 1 (assuming nodes are 1-based) dfs(1) return max(dp_include[1], dp_exclude[1]) # Helper function to parse input def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) enchantment_powers = list(map(int, lines[1].split())) edges = [tuple(map(int, line.split())) for line in lines[2:]] return n, enchantment_powers, edges"},{"question":"There are M warehouses aligned in a row, each uniquely numbered from 1 to M from left to right. In front of each warehouse, there is a parking spot for one truck. Therefore, there are M parking spots, also numbered 1 to M from left to right. Each truck must deliver a package to its respective warehouse. Truck i delivers a package to warehouse i. Initially, each truck is waiting at the parking lot and each truck can only move between adjacent parking spots. The time it takes to move between adjacent parking spots is given by an array T of length M-1, where T[i] represents the time taken to move from parking spot i to i+1. Calculate the minimum total time required for all trucks to deliver their packages successfully. -----Constraints----- - All input values are integers. - 2 ≤ M ≤ 10^3 - 1 ≤ T[i] ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: M T_1 T_2 ... T_{M-1} -----Output----- Print the minimum total time required for all trucks to deliver their packages. -----Sample Input----- 5 2 3 1 4 -----Sample Output----- 2","solution":"def min_total_time(M, T): Calculate the minimum total time required for all trucks to deliver their packages. Parameters: M (int): Number of warehouses/trucks/parking spots. T (List[int]): Time taken to move between adjacent parking spots. Returns: int: Minimum total time required for all trucks to deliver their packages. # The minimum total time required for all trucks to deliver their packages return T[0]"},{"question":"You are given a list of N integers. Determine if the list can be split into two non-empty subsets such that the sum of the elements in both subsets is the same. If yes, print \\"YES\\" (without quotes); otherwise, print \\"NO\\" (without quotes). -----Input----- The first line contains a single integer T, denoting the number of testcases. The descriptions of T test cases follow. Each test case consists of two lines: The first line contains one integer N, the length of the list. The second line contains N integers, representing the elements of the list. -----Output----- For each testcase, output a single line containing \\"YES\\" if it\'s possible to split the list as described, otherwise \\"NO\\". -----Constraints----- - Subtask 1 (25 points): 1 ≤ T ≤ 50, 1 ≤ N ≤ 10, 0 ≤ elements ≤ 100 - Subtask 2 (75 points): 1 ≤ T ≤ 100, 1 ≤ N ≤ 100, 0 ≤ elements ≤ 1000 -----Example----- Input: 3 4 1 5 11 5 3 1 2 5 5 1 1 1 1 1 Output: YES NO NO -----Explanation----- Test case 1: The list can be split into [1, 5, 5] and [11] which both sum up to 11. Test case 2: The list can\'t be split into two subsets with the same sum. Test case 3: The list can\'t be split into two non-empty subsets with the same sum.","solution":"def can_partition(nums): Determines if the list can be split into two subsets with equal sum. total = sum(nums) # If total sum is odd, it\'s not possible to partition it into two equal subsets if total % 2 != 0: return \\"NO\\" target = total // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\" def solve(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] nums = test_cases[i][1] result = can_partition(nums) results.append(result) return results"},{"question":"Create a function called `find_divisors` that takes an integer `n` as input and returns a list of all the divisors of `n` excluding 1 and `n` itself. A divisor is a number that divides `n` without leaving a remainder. The function should adhere to the following specifications: - If `n` is less than 2, return \\"Input is invalid.\\" - If `n` is a prime number, return \\"This number is prime.\\" - The list of divisors should be returned in ascending order. - Negative numbers should be handled appropriately, returning the same divisors as for their positive counterparts. Examples: ``` find_divisors(15) => [3, 5] # Divisors are 3 and 5 since 15 = 3 * 5 find_divisors(28) => [2, 4, 7, 14] # Divisors are 2, 4, 7, 14 since 28 = 2 * 14 and 4 * 7 find_divisors(13) => \\"This number is prime.\\" # Divisors are only 1 and 13 itself, so it is a prime number find_divisors(-28) => [2, 4, 7, 14] # Divisors are the same as for 28 find_divisors(1) => \\"Input is invalid.\\" # 1 does not have any divisors other than itself ```","solution":"def find_divisors(n): Returns a list of all divisors of n excluding 1 and n itself. If n is less than 2, returns \\"Input is invalid.\\" If n is a prime number, returns \\"This number is prime.\\" For negative n, it returns the same divisors as for the positive counterpart. if abs(n) < 2: return \\"Input is invalid.\\" abs_n = abs(n) divisors = [i for i in range(2, abs_n) if abs_n % i == 0] if not divisors: return \\"This number is prime.\\" return divisors"},{"question":"You were tasked to write a program that translates a sequence of dance moves. The dance is defined by a series of steps that repeat in patterns depending on the number of steps specified. Your goal is to generate these patterns by following the rules below. -----Input:----- - The first line will contain N, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer M, the number of steps in the dance. -----Output:----- For each test case, output the sequence of dance steps. -----Constraints----- - 1 leq N leq 50 - 1 leq M leq 50 -----Sample Input:----- 4 1 2 3 4 -----Sample Output:----- a ab abc abcd -----EXPLANATION:----- Each dance step sequence starts with \'a\' and adds the next letter in the alphabet sequentially for the given number of steps M.","solution":"def generate_dance_steps(N, steps_list): Generate dance steps sequences based on the number of steps in each test case. :param N: Number of test cases. :param steps_list: List containing the number of steps for each test case. :return: List of dance step sequences. alphabet = \'abcdefghijklmnopqrstuvwxyz\' results = [] for M in steps_list: results.append(alphabet[:M]) return results"},{"question":"Given an array of integers, find the length of the longest subarray that contains only distinct elements. If the array is empty or contains only one element, return the array\'s length. Example 1: Input: [4, 2, 6, 4, 3, 2, 5, 6] Output: 5 Explanation: The longest subarray with distinct numbers is [2, 6, 4, 3, 2] or [6, 4, 3, 2, 5], both of which have a length of 5. Example 2: Input: [1, 2, 3, 1, 2, 3] Output: 3 Explanation: The longest subarray with distinct numbers is [1, 2, 3] with a length of 3. Note: - The array contains non-negative integers and fits within the 32-bit signed integer range. - Try to solve it with linear time complexity and constant space usage.","solution":"def longest_subarray_with_distinct_elements(arr): Returns the length of the longest subarray with distinct elements. If the array is empty or contains only one element, returns the length of the array. if len(arr) < 2: return len(arr) # Dictionary to store the last positions of each element last_seen = {} max_length = 0 start = 0 for i, value in enumerate(arr): if value in last_seen: start = max(start, last_seen[value] + 1) last_seen[value] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Write a function named `isPangram` that takes a single string input and returns `True` if the string is a pangram, and `False` otherwise. A pangram is a sentence that contains every letter of the alphabet at least once. Ignore numbers, spaces, and punctuation, and treat uppercase and lowercase letters as equivalent.","solution":"import string def isPangram(s): Returns True if the input string is a pangram, False otherwise. alphabet_set = set(string.ascii_lowercase) s_lower = s.lower() s_set = set([char for char in s_lower if char in alphabet_set]) return s_set == alphabet_set"},{"question":"A linked list is a dynamic data structure used in computer science to represent a sequence of elements. Your task is to implement a function that detects if a linked list has a cycle. A cycle occurs if any node in the linked list can be reached again by continuously following the \\"next\\" pointer. Write the function `hasCycle(head)` that receives the head of a singly linked list and returns `True` if there is a cycle, and `False` if there is no cycle. Each node in the linked list has an additional attribute called \'visited\'. Your function will need to utilize this attribute to keep track of visited nodes and prevent infinite loops in cyclic lists. -----Input:----- The function will receive a `ListNode` object called `head` representing the head of the linked list, which will have the following structure: ```python class ListNode: def __init__(self, x): self.val = x self.next = None self.visited = False ``` -----Output:----- The function should return a boolean value: `True` if there is a cycle in the linked list and `False` otherwise. -----Constraints----- - The number of nodes in the linked list is in the range [0, 10000]. - The nodes\' values are integers in the range [−1000000, 1000000]. -----Sample Input:----- ```python # Creating a linked list with a cycle: # 3 -> 2 -> 0 -> -4 # ^ | # +---------+ head = ListNode(3) second = ListNode(2) third = ListNode(0) fourth = ListNode(-4) head.next = second second.next = third third.next = fourth fourth.next = second print(hasCycle(head)) ``` -----Sample Output:----- True -----EXPLANATION:----- In the given example, the linked list contains a cycle since the last node points back to the second node, causing an infinite loop when traversed. ```python def hasCycle(head): current = head while current is not None: if current.visited: return True current.visited = True current = current.next return False ```","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None self.visited = False def hasCycle(head): current = head while current is not None: if current.visited: return True current.visited = True current = current.next return False"},{"question":"Given an array of positive integers, where each integer represents the number of steps required to reach the next number, determine the minimum number of jumps needed to reach the end of the array. You are initially positioned at the first index and each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. Examples: Input: jumps = [2, 3, 1, 1, 4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. Input: jumps = [2, 3, 0, 1, 4] Output: 2 Input: jumps = [1, 1, 1, 1, 1] Output: 4 Input: jumps = [1] Output: 0 Note: jumps will have length at most 1000. Each jumps[i] will be an integer in the range [0, 100].","solution":"def min_jumps(jumps): Returns the minimum number of jumps required to reach the end of the array. :param jumps: List[int] - array of positive integers where each integer represents the number of steps that can be taken from that index. :return: int - minimum number of jumps to reach the end of the array. n = len(jumps) if n == 1: return 0 max_reach = jumps[0] step = jumps[0] jumps_count = 1 for i in range(1, n): if i == n - 1: return jumps_count max_reach = max(max_reach, i + jumps[i]) step -= 1 if step == 0: jumps_count += 1 if i >= max_reach: return -1 step = max_reach - i return -1"},{"question":"You are given a binary tree with N nodes. Each node has a value associated with it. Your task is to determine the maximum sum that can be obtained from any subtree of the given binary tree. A subtree of a binary tree is a tree consisting of a node in the tree and all of its descendants in the tree. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case consists of a single integer N denoting the number of nodes in the tree. The next line contains N space-separated integers, where the i-th integer denotes the value of the i-th node. The next N-1 lines each contain two space-separated integers u and v indicating there is an edge between node u and node v. -----Output----- For each test case, output a single line containing the maximum sum that can be obtained from any subtree of the given binary tree. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 10000 - |value of each node| ≤ 1000 -----Example----- Input: 1 5 1 2 3 -2 4 1 2 1 3 2 4 2 5 Output: 8 -----Explanation:----- In the given example, the maximum sum of 8 is obtained from the subtree rooted at node 2, including nodes 2, 4, and 5 (values are 2, -2, and 4 respectively).","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def max_subtree_sum(node): if not node: return 0, float(\'-inf\') current_sum = node.value max_sum = node.value for child in node.children: child_sum, child_max_sum = max_subtree_sum(child) current_sum += child_sum max_sum = max(max_sum, child_max_sum) return current_sum, max(max_sum, current_sum) def build_tree(nodes, edges): node_dict = {i + 1: TreeNode(value) for i, value in enumerate(nodes)} for u, v in edges: node_dict[u].children.append(node_dict[v]) return node_dict def solve(T, test_cases): results = [] for i in range(T): N, node_values, edges = test_cases[i] tree = build_tree(node_values, edges) _, max_sum = max_subtree_sum(tree[1]) results.append(max_sum) return results # Function used to read input and output results def main(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) node_values = list(map(int, input_lines[index + 1].split())) edges = [tuple(map(int, input_lines[index + 2 + i].split())) for i in range(N - 1)] test_cases.append((N, node_values, edges)) index += 2 + (N - 1) results = solve(T, test_cases) return \\"n\\".join(map(str, results))"},{"question":"In a museum, each room is connected by one-way doors that create a complex network. The museum has n rooms and m one-way doors. Your task is to help the museum staff determine if there exists a way to start from a given room and eventually return to arrive back at the same room (i.e., find a cycle that includes the starting room). Your Task: Write a function `has_cycle(graph: List[List[int]], start: int) -> bool` that determines if there is a cycle starting and ending in the given room. Inputs: - `graph`: A list of lists representing the rooms and the one-way doors. Each index of the list represents a room and the sublist at that index contains the rooms that can be reached directly from that room. - `start`: An integer representing the starting room (0-indexed). Output: - Return `True` if there is a cycle starting and ending at the start room, otherwise return `False`. For example: ```python graph = [ [1], [2, 3], [0], [4], [1], ] start = 0 # has_cycle(graph, start) should return True because there is a cycle: 0 -> 1 -> 2 -> 0 graph = [ [1], [2], [3], [4], [5], [] ] start = 0 # has_cycle(graph, start) should return False because there is no cycle starting from 0 ``` Note: 1. The number of rooms `n` can range from 1 to 1000. 2. The number of one-way doors `m` can range from 0 to 2000. 3. Assume `start` is a valid index within the graph.","solution":"from typing import List def has_cycle(graph: List[List[int]], start: int) -> bool: def dfs(node, visited, rec_stack): visited[node] = True rec_stack[node] = True for neighbor in graph[node]: if not visited[neighbor]: if dfs(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[node] = False return False n = len(graph) visited = [False] * n rec_stack = [False] * n return dfs(start, visited, rec_stack)"},{"question":"Given an integer `N`, your task is to generate the Nth row of Pascal\'s Triangle and return it as a list of integers. In Pascal\'s Triangle, each number is the sum of the two numbers directly above it. The triangle starts with the number 1 at the top, and `N` starts from 0 (i.e., the 0th row is [1]). For example: - The 0th row is [1] - The 1st row is [1, 1] - The 2nd row is [1, 2, 1] - The 3rd row is [1, 3, 3, 1] - The 4th row is [1, 4, 6, 4, 1] Your function should handle large values of `N` efficiently, as `N` can be as high as 10^6. Function Signature: ```python def get_pascals_triangle_row(N: int) -> List[int]: pass ``` Example: ```python assert get_pascals_triangle_row(0) == [1] assert get_pascals_triangle_row(1) == [1, 1] assert get_pascals_triangle_row(2) == [1, 2, 1] assert get_pascals_triangle_row(3) == [1, 3, 3, 1] assert get_pascals_triangle_row(4) == [1, 4, 6, 4, 1] ```","solution":"def get_pascals_triangle_row(N: int) -> list: Generates the Nth row of Pascal\'s Triangle. Args: N (int): The row index to generate. Returns: list: The Nth row of Pascal\'s Triangle. if N == 0: return [1] row = [1] for i in range(1, N + 1): row.append(row[-1] * (N - i + 1) // i) return row"},{"question":"You are given a grid with M rows and N columns. Each cell in the grid can either be 0 or 1. Your task is to find the largest size of a square sub-grid which contains only 1s. The size of a square sub-grid is defined by the length of its side. For example, a 2x2 sub-grid has a size of 2. You need to write a function that takes this grid as input and returns the size of the largest square sub-grid consisting only of 1s. -----Constraints----- - 1 leq M, N leq 1000 - Each cell in the grid is either 0 or 1. -----Input----- Input is given from Standard Input in the following format: M N grid[1][1] grid[1][2] ... grid[1][N] grid[2][1] grid[2][2] ... grid[2][N] : grid[M][1] grid[M][2] ... grid[M][N] -----Output----- Print the size of the largest square sub-grid which contains only 1s. -----Sample Input----- 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 -----Sample Output----- 2 In the above example, the largest square sub-grid containing only 1s has a size of 2 (the 2x2 sub-grid in the bottom-right corner). Implement the function findLargestSquareSubgrid(M, N, grid) where: - M : int : number of rows in the grid - N : int : number of columns in the grid - grid : List[List[int]] : two-dimensional list representing the grid The function should return an integer representing the size of the largest square sub-grid containing only 1s.","solution":"def findLargestSquareSubgrid(M, N, grid): Returns the largest size of a square sub-grid which contains only 1s. Args: M : int : number of rows in the grid N : int : number of columns in the grid grid : List[List[int]] : two-dimensional list representing the grid Returns: int: size of the largest square sub-grid # Initialize a 2D DP array with the same dimensions as the grid dp = [[0] * N for _ in range(M)] max_size = 0 # Fill the DP array and compute the largest square sub-grid for i in range(M): for j in range(N): # The first row or first column takes the value from the grid cell (no previous cells) if i == 0 or j == 0: dp[i][j] = grid[i][j] elif grid[i][j] == 1: # Update dp[i][j] to be the smallest neighbor plus one (bottom-right corner of the square) dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if dp[i][j] > max_size: max_size = dp[i][j] return max_size"},{"question":"The lab assistant needs to categorize different chemicals based on their molecular weight. Each chemical is represented by a string where each character denotes an atom. Each atom has a predefined weight. Given a string representing a chemical compound, find the total molecular weight. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, a string S. -----Output:----- For each test case, output a single line with the total molecular weight of the chemical compound. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 100 - S will only contain the characters \'H\', \'C\', \'O\', and \'N\' representing Hydrogen, Carbon, Oxygen, and Nitrogen respectively. -----Weights----- - H = 1 - C = 12 - O = 16 - N = 14 -----Sample Input:----- 2 H2O COOH -----Sample Output:----- 18 45","solution":"def calculate_molecular_weight(S): atom_weights = {\'H\': 1, \'C\': 12, \'O\': 16, \'N\': 14} total_weight = 0 i = 0 while i < len(S): atom = S[i] weight = atom_weights[atom] i += 1 if i < len(S) and S[i].isdigit(): num = 0 while i < len(S) and S[i].isdigit(): num = num * 10 + int(S[i]) i += 1 total_weight += weight * num else: total_weight += weight return total_weight def molecular_weights(inputs): result = [] for S in inputs: result.append(calculate_molecular_weight(S)) return result"},{"question":"We need to write some code to calculate the median of a sequence of numbers provided as input. The function should return the median as a double. The median is the middle number in a sorted list of numbers. If the list has an odd number of elements, the median is the number in the center. If the list has an even number of elements, the median is the average of the two central numbers. # For example: Given a sequence {1, 3, 3, 6, 7, 8, 9}, the function should return 6.0 as the median, because 6 is the middle number. Given a sequence {1, 2, 3, 4, 5, 6, 8, 9}, the function should return 4.5 as the median, because the middle numbers are 4 and 5, and their average is 4.5. CalculateMedian(new double[] {1, 3, 3, 6, 7, 8, 9}) => 6.0 CalculateMedian(new double[] {1, 2, 3, 4, 5, 6, 8, 9}) => 4.5","solution":"def calculate_median(numbers): Returns the median of a sequence of numbers. n = len(numbers) sorted_numbers = sorted(numbers) mid = n // 2 if n % 2 == 1: # Odd case return float(sorted_numbers[mid]) else: # Even case return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2.0"},{"question":"Alice and Bob are playing a game with a sequence of integers. The game consists of a sequence of n integers, where each integer is either 1 or -1. Alice and Bob take turns alternately, with Alice always going first. During her turn, Alice will select an integer from the sequence and remove it, while maximizing her score, and Bob will select an integer on his turn to minimize Alice\'s score. The game ends when there are no more integers left to select. Each player makes their selection optimally. The score of the game is calculated as the number of 1s removed minus the number of -1s removed by Alice. Determine the final score of the game if both play optimally. -----Input----- The first line contains the number of test cases t (1 le t le 100). The description of the test cases follows. The first line of each test case contains an integer n (1 le n le 100) — the number of integers in the sequence. The second line of each test case contains n space-separated integers, each being either 1 or -1, representing the sequence of integers. -----Output----- For each test case, output a single integer which indicates the final score of the game if both players play optimally. -----Example----- Input 3 5 1 -1 1 -1 1 4 1 -1 -1 1 3 1 1 -1 Output 1 0 1 -----Note----- In the first test case, Alice and Bob will follow these moves: 1. Alice picks 1, Bob picks -1, Alice picks 1, Bob picks -1, Alice picks 1. The final score is 3 - 2 = 1. In the second test case, one optimal sequence can be: 1. Alice picks 1, Bob picks -1, Alice picks 1, Bob picks -1. The final score is 2 - 2 = 0. In the third test case, one optimal sequence can be: 1. Alice picks 1, Bob picks -1, Alice picks 1. The final score is 2 - 1 = 1.","solution":"def optimal_game_score(n, sequence): Determine the final score of the game if both players play optimally. Args: n (int): The number of integers in the sequence. sequence (list): A list of integers either 1 or -1. Returns: int: The final score of the game. # Number of 1s in the sequence positives = sequence.count(1) # Number of -1s in the sequence negatives = sequence.count(-1) # If the number of elements is odd, Alice plays one more turn than Bob if n % 2 != 0: return max(positives - negatives, (positives - 1) - (negatives + 1)) else: return positives - negatives def compute_scores(test_cases): results = [] for n, sequence in test_cases: results.append(optimal_game_score(n, sequence)) return results"},{"question":"# Description: Given a string `str` composed of lowercase letters and `#` characters, implement a function `clean_string` that processes the string based on the following rules: 1. Every `#` character in the string represents a backspace operation (deleting the character that immediately precedes it). 2. Consecutive `#` characters represent consecutive backspace operations. The goal is to return the processed string after applying all backspace operations. # Notes: * If the string is empty, return an empty string. * If a `#` character appears at the beginning of the string, it is ignored since there is no character to be deleted. # Examples ``` clean_string(\\"abc#dc\\") === \\"ac\\" clean_string(\\"abcd\\") === \\"\\" clean_string(\\"#\\") === \\"\\" clean_string(\\"a#ac\\") === \\"c\\" ``` # Function Signature ```python def clean_string(str: str) -> str: pass ```","solution":"def clean_string(s: str) -> str: Processes the string s by simulating backspace operations denoted by \'#\'. Args: s (str): The input string containing lowercase letters and \'#\' characters. Returns: str: The processed string after applying all backspace operations. stack = [] for char in s: if char == \'#\': if stack: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"Alice has a set of unique positive integers and wants to find the smallest subset of these integers such that the sum of the subset is greater than or equal to a given integer S. Write a function that determines the length of such a subset or returns -1 if no subset can achieve the required sum. -----Input:----- The first line contains an integer T, the number of test cases. Each test case contains two lines. The first line has two integers n and S, where n is the size of the set (1 ≤ n ≤ 1000) and S is the required sum (1 ≤ S ≤ 10^9). The second line contains n unique positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) representing the elements of the set. -----Output:----- For each test case, print the length of the smallest subset whose sum is greater than or equal to S. If no such subset exists, print -1. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 1000 - 1 ≤ S ≤ 10^9 - 1 ≤ ai ≤ 10^6 (all ai are distinct) -----Sample Input:----- 2 5 11 2 3 6 4 5 3 10 1 2 3 -----Sample Output:----- 2 -1","solution":"def smallest_subset_len(test_cases): results = [] for n, S, integers in test_cases: integers.sort(reverse=True) subset_sum = 0 subset_size = 0 for value in integers: subset_sum += value subset_size += 1 if subset_sum >= S: results.append(subset_size) break else: results.append(-1) return results"},{"question":"You are given an array of n integers a1, a2, ..., an. You need to perform the following operations in any order to make all the elements of the array equal: 1. Choose a subarray (contiguous segment) and add 1 to each element of this subarray. 2. Choose a subarray and subtract 1 from each element of this subarray. Your task is to determine the minimum number of operations required to make all elements in the array equal. -----Input----- The first line contains a single integer T, the number of test cases. Each test case consists of two lines. The first line contains the integer n, the number of elements in the array. The second line contains n integers a1, a2, ..., an. -----Output----- For each test case, output a single line containing an integer, the minimum number of operations required to make all elements of the array equal. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 105 - 1 ≤ ai ≤ 109 - 1 ≤ Sum of all n over all test cases in a single test file ≤ 106 -----Example----- Input: 2 3 1 2 3 4 2 2 2 2 Output: 1 0 -----Explanation----- In the first test case, we can choose the entire array as the subarray and increment each element by 1 in one operation to make all elements equal to 4. Alternatively, we can increment the subarray [1, 2] by 1 and the subarray [2] by 1. Each is one operation. In the second test case, all elements are already equal, so no operations are needed.","solution":"def min_operations_to_equal_elements(T, test_cases): results = [] for i in range(T): n, array = test_cases[i] min_element = min(array) max_element = max(array) if min_element == max_element: results.append(0) else: results.append(1) return results"},{"question":"You are given a list of N integers. You need to perform Q queries on this list. There are two types of queries: 1. Update: This query updates the value at a specific position in the list. 2. Sum: This query asks for the sum of the integers in a specific range of the list. Write a program to handle these queries efficiently. -----Input----- - The first line of the input contains two integers N and Q: the number of integers in the list and the number of queries, respectively. - The second line contains N space-separated integers representing the list. - The next Q lines contain queries. Each query is represented by four integers: - For an update query: 1 pos new_value - For a sum query: 2 left right -----Output----- For each sum query, output the sum of the integers in the specified range on a new line. -----Constraints----- - 1 le N le 10^5 - 1 le Q le 10^5 - 1 le pos, left, right le N - 1 le integer values in the list le 10^5 - 1 le new_value le 10^5 -----Example Input----- 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 2 5 1 5 20 -----Example Output----- 6 13 39 -----Explanation----- After the first query, the list remains [1, 2, 3, 4, 5]; the sum from index 1 to 3 is 1+2+3=6. After the second query, the list becomes [1, 2, 10, 4, 5]. After the third query, the sum from index 1 to 3 is 1+2+10=13. After the fourth query, the sum from index 2 to 5 is 2+10+4+5=21. After the fifth query, the list becomes [1, 2, 10, 4, 20].","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parent node sums for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): # Update at the leaf node pos += self.n self.tree[pos] = value # Update the values of its ancestors while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, l, r): # Sum on the interval [l, r) l += self.n r += self.n res = 0 while l < r: if l % 2: res += self.tree[l] l += 1 if r % 2: r -= 1 res += self.tree[r] l //= 2 r //= 2 return res def handle_queries(N, Q, arr, queries): seg_tree = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: # Update query _, pos, new_value = query seg_tree.update(pos - 1, new_value) elif query[0] == 2: # Sum query _, left, right = query results.append(seg_tree.query(left - 1, right)) return results"},{"question":"Write a function that takes a list of integers and returns a new list containing only the integers that appear more than once in the original list, sorted in ascending order. For this task, ensure that the returned list contains each duplicate number only once. Examples: Input: [4, 5, 6, 4, 7, 8, 5, 9] Output: [4, 5] Input: [10, 11, 12, 13, 14, 15] Output: []","solution":"def find_duplicates(input_list): This function takes a list of integers and returns a new list containing only the integers that appear more than once in the original list, sorted in ascending order. from collections import Counter # Count occurrences of each element in list count = Counter(input_list) # Extract elements that appear more than once and sort them duplicates = sorted([item for item, freq in count.items() if freq > 1]) return duplicates"},{"question":"Design a parking system for a parking lot. The parking system needs to track the number of spots available for different types of vehicles. There are three types of parking spots: big, medium, and small. Implement the class `ParkingSystem`: 1. `ParkingSystem(int big, int medium, int small)`: - Initializes the object of the parking system. The numbers of spots for each type of vehicle are given as parameters. 2. `bool addCar(int carType)`: - Checks if there is a parking spot available for the car type `carType` (1 is for a big car, 2 is for a medium car, and 3 is for a small car). - If there is a spot available, parks the car and returns `true`; - Otherwise, returns `false`. Example: ``` Input [\\"ParkingSystem\\", \\"addCar\\", \\"addCar\\", \\"addCar\\", \\"addCar\\"] [[1, 1, 0], [1], [2], [3], [1]] Output [null, true, true, false, false] Explanation ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0); parkingSystem.addCar(1); // returns true because there is 1 big spot available. parkingSystem.addCar(2); // returns true because there is 1 medium spot available. parkingSystem.addCar(3); // returns false because there is no small spot available. parkingSystem.addCar(1); // returns false because there is no big spot available. It is already occupied. ``` Constraints: - The number of cars parked per type will be at most 1000. - 1 <= big, medium, small <= 1000 - carType is (1, 2, or 3)","solution":"class ParkingSystem: def __init__(self, big: int, medium: int, small: int): self.spots = { 1: big, 2: medium, 3: small } def addCar(self, carType: int) -> bool: if self.spots[carType] > 0: self.spots[carType] -= 1 return True return False"},{"question":"You are given two integer arrays, `arr1` and `arr2`, both of length `N`. The goal is to transform `arr1` into `arr2` using the smallest number of operations. In one operation, you can choose any subarray of `arr1` and reverse it. Determine the minimum number of operations required or return -1 if it\'s not possible to transform `arr1` into `arr2`. -----Input----- - The first line contains an integer T representing the number of test cases. - For each test case: - The first line contains the integer N. - The second line contains N space-separated integers representing `arr1`. - The third line contains N space-separated integers representing `arr2`. -----Output----- For each test case, print a single integer. If it is possible to transform `arr1` into `arr2`, print the minimum number of operations required. Otherwise, print -1. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 2000 - 1 leq arr1[i], arr2[i] leq 10^6, for valid i -----Example Input----- 2 5 1 2 3 4 5 5 4 3 2 1 3 1 3 2 2 1 3 -----Example Output----- 1 2","solution":"def min_operations_to_transform(arr1, arr2): Returns the minimum number of subarray reversals required to transform arr1 into arr2. Returns -1 if it\'s not possible. if sorted(arr1) != sorted(arr2): return -1 n = len(arr1) operations = 0 i = 0 while i < n: if arr1[i] != arr2[i]: j = i while j < n and arr1[j] != arr2[i]: j += 1 if j < n: arr1[i:j+1] = reversed(arr1[i:j+1]) operations += 1 i += 1 return operations def solve(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] arr1 = test_cases[t][1] arr2 = test_cases[t][2] results.append(min_operations_to_transform(arr1, arr2)) return results"},{"question":"Write a function to find the longest substring of a given string such that the characters in the substring do not repeat. Example: `longest_unique_substring(\'abcaabcdba\')` - Scan through the given string and keep track of the characters and their positions. - When a repeated character is found, update the start position of the current substring to the right of the first occurrence of the repeated character. - Continue scanning and updating the start position while keeping track of the length of the currently longest unique substring. Examples: - `longest_unique_substring(\'abcaabcdba\')` should return `\'abcd\'` - `longest_unique_substring(\'abcabcbb\')` should return `\'abc\'` - `longest_unique_substring(\'bbbbb\')` should return `\'b\'` - `longest_unique_substring(\'pwwkew\')` should return `\'wke\'` For an empty string, return `\\"\\"`. Make sure to handle the case gracefully when the input is not a string or is an empty string.","solution":"def longest_unique_substring(s): Finds and returns the longest substring without repeating characters. if not isinstance(s, str) or s == \\"\\": return \\"\\" start = 0 max_length = 0 max_substring = \\"\\" char_index_map = {} for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i current_length = i - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:i+1] return max_substring"},{"question":"Given an array of integers, write a function to find the \\"k-th\\" largest element in the array. Note that it is the k-th largest element in the sorted order, not the k-th distinct element. You may assume k is always valid, 1 ≤ k ≤ array\'s length. Return the k-th largest element.","solution":"import heapq def find_kth_largest(nums, k): Returns the k-th largest element in the array nums return heapq.nlargest(k, nums)[-1]"},{"question":"In a quiet town, there is a festival going on for n days. On each day, a different event takes place, and the happiness level of the townspeople on the i-th day is represented by the integer h_i. However, due to various reasons, some days may have negative happiness levels. To maximize the overall happiness, the mayor has decided to implement a new rule: the townspeople will only celebrate the events on a contiguous subarray of days such that the total sum of happiness in that subarray is maximized. Write a function that, given the number of days n and an array of integers representing the happiness levels for each day, returns the maximum possible sum of happiness for any contiguous subarray of days. # Input - The first line of the input contains an integer t (1 le t le 10^3), the number of test cases. - For each test case: - The first line contains an integer n (1 le n le 10^5) — the number of days. - The second line contains n integers h_i (-10^3 le h_i le 10^3) — the happiness levels for each day. # Output For each test case, output a single integer — the maximum possible sum of happiness for any contiguous subarray of days. # Example Input ``` 3 6 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 4 -1 -2 -3 -4 ``` Output ``` 6 15 -1 ``` # Note - In the first test case, the maximum sum of happiness is obtained from the subarray `[4, -1, 2, 1]`, which sums up to 6. - In the second test case, the contiguous subarray with the maximum sum is the whole array itself: `[1, 2, 3, 4, 5]`, which sums up to 15. - In the third test case, the least negative number is the optimal choice since all numbers are negative: `-1`. The problem can be solved using Kadane\'s Algorithm, which efficiently finds the maximum sum of a contiguous subarray in linear time.","solution":"def max_happiness(t, test_cases): Returns the maximum possible sum of happiness for any contiguous subarray of days for given test cases. Uses Kadane\'s Algorithm to solve the problem efficiently. results = [] for i in range(t): n = test_cases[i][0] h = test_cases[i][1] max_current = max_global = h[0] for j in range(1, n): max_current = max(h[j], max_current + h[j]) if max_current > max_global: max_global = max_current results.append(max_global) return results"},{"question":"Given an integer array, return the maximum sum of the increasing subsequence in the array. A subsequence is a sequence that you can derive from the array by deleting some or no elements without changing the order of the remaining elements. Example 1: Input: [10, 5, 4, 3, 15, 2, 20] Output: 45 Explanation: The maximum sum increasing subsequence is [10, 15, 20]. Example 2: Input: [3, 4, 5, 10] Output: 22 Explanation: The maximum sum increasing subsequence is [3, 4, 5, 10]. Note: - The length of the input array is in the range [1, 1,000]. - The input array may contain positive and negative numbers as well as zeros.","solution":"def max_sum_increasing_subsequence(arr): Returns the maximum sum of the increasing subsequence in the array. if not arr: return 0 n = len(arr) max_sum = arr[:] # Initialize max_sum with the original array # Compute the maximum sum increasing subsequence for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]: max_sum[i] = max_sum[j] + arr[i] return max(max_sum)"},{"question":"**Step 1:** Create a function called `is_anagram()` that takes two strings as input and checks whether they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, `is_anagram(\\"listen\\", \\"silent\\")` would return `True`, whereas `is_anagram(\\"hello\\", \\"world\\")` would return `False`. **Step 2:** Now create a function called `find_anagrams()` that takes a word and a list of words, and returns a list of words from the given list that are anagrams of the given word. For example, `find_anagrams(\\"listen\\", [\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\"])` would return `[\\"enlist\\", \\"inlets\\"]`.","solution":"def is_anagram(str1, str2): Check if two strings are anagrams of each other. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. return sorted(str1) == sorted(str2) def find_anagrams(word, words_list): Find all anagrams of a given word from a list of words. Parameters: word (str): The word to find anagrams for. words_list (list): The list of words to search in. Returns: list: A list of anagrams found in the words_list. return [w for w in words_list if is_anagram(word, w)]"},{"question":"In a remote village, villagers are attempting to automate their irrigation system. The main pipeline is connected to several smaller pipelines that branch out to fields. The irrigation system can only be activated if each field receives water exactly once through its respective pipeline, ensuring no duplicate flow of water into any field. Each pipeline is represented by an edge in an undirected graph, where each vertex represents a potential junction or a field. To achieve automation, the villagers must determine if the connected structure of pipelines forms a valid tree. A valid tree is defined as a connected graph with no cycles, consisting of exactly `n-1` edges for `n` vertices. Write a function `is_valid_tree(n, edges)` that helps the villagers by determining if the given pipeline structure forms a valid tree. -----Input Format----- - An integer `n`, representing the number of vertices (junctions or fields). - A list of pairs, `edges`, where each pair represents an undirected edge between the vertices. -----Output Format----- - Return `True` if the given pipeline structure forms a valid tree. Otherwise, return `False`. -----Constraints----- - 1 leq n leq 10^4 - 0 leq text{len}(edges) leq 10^4 -----Sample Input----- 5 [[0, 1], [0, 2], [0, 3], [1, 4]] -----Sample Output----- True -----Sample Input----- 5 [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]] -----Sample Output----- False -----Sample Input----- 4 [[0, 1], [2, 3]] -----Sample Output----- False","solution":"def is_valid_tree(n, edges): if len(edges) != n - 1: return False parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] for u, v in edges: root_u = find(u) root_v = find(v) if root_u == root_v: return False parent[root_u] = root_v return True"},{"question":"Sally is fascinated by prime numbers. She recently learned about twin primes, which are pairs of prime numbers that differ by exactly two (e.g., (3, 5), (11, 13)). She wonders if a given number x can be a part of any twin prime pair. She needs your help to find out if the number x is a part of any twin prime pair within the given range from L to R inclusive. -----Input:----- The first line consists of a single integer T denoting the number of test cases. The description of T test cases follows. Each test case contains three integers L, R and x. -----Output:----- For each test case, print \\"Yes\\" if the number x is part of any twin prime pair in the range [L, R], otherwise print \\"No\\". -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ L ≤ R ≤ 10^6 - 2 ≤ x ≤ 10^6 -----Sample Input:----- 2 1 20 17 10 30 23 -----Sample Output:----- Yes No -----Explanation:----- Example case 1: The number 17 is a prime and has a twin prime 19 within the range [1, 20]. Example case 2: The number 23 is a prime but neither 21 nor 25 is prime within the range [10, 30]. Hence, it does not have a twin prime within the specified range.","solution":"def sieve_of_eratosthenes(n): is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 is_prime[0] = is_prime[1] = False return is_prime def is_twin_prime_in_range(L, R, x): primes = sieve_of_eratosthenes(max(R, x + 2)) if not primes[x]: return \\"No\\" twin_primes_within_range = [(p, p+2) for p in range(L, min(R, max(R, x+2)-1)) if primes[p] and primes[p+2]] for p1, p2 in twin_primes_within_range: if x == p1 or x == p2: return \\"Yes\\" return \\"No\\" def twin_prime_check(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) results = [] for i in range(1, T + 1): L, R, x = map(int, lines[i].split()) results.append(is_twin_prime_in_range(L, R, x)) return results"},{"question":"Write a function that takes a string s of lowercase alphabetic characters, and returns the string obtained by shifting every character in s by 2 positions forward in the alphabet. Characters \'y\' and \'z\' should wrap around to \'a\' and \'b\', respectively. Assume the input string s will always be a non-empty string containing only lowercase alphabetic characters. Examples: ```python shift_string_2(\\"abc\\") > \\"cde\\" shift_string_2(\\"xyz\\") > \\"zab\\" ```","solution":"def shift_string_2(s): Shifts every character in the string s by 2 positions forward in the alphabet. Characters \'y\' and \'z\' wrap around to \'a\' and \'b\', respectively. Parameters: s (str): The input string consisting of lowercase alphabetic characters. Returns: str: The shifted string. shifted_string = [] for char in s: # Calculate the shifted character, wrapping around if needed. shifted_char = chr((ord(char) - ord(\'a\') + 2) % 26 + ord(\'a\')) shifted_string.append(shifted_char) return \'\'.join(shifted_string)"},{"question":"Task A robot is navigating a grid represented by a list of movements. The robot starts at position `(0, 0)` and processes a list of commands that move it a certain distance in one of the four cardinal directions (\\"N\\" for north, \\"S\\" for south, \\"E\\" for east, \\"W\\" for west). The robot stops processing commands if it encounters an invalid command in the list. Given this list of commands, determine the final position of the robot on the grid after processing valid commands. `x` and `y` coordinates can be positive or negative numbers. # Example For `commands = [\\"N3\\", \\"E2\\", \\"S1\\", \\"W4\\"]`, the output should be `(-2, 2)`. The robot moves: - 3 units north to `(0, 3)` - 2 units east to `(2, 3)` - 1 unit south to `(2, 2)` - 4 units west to `(-2, 2)` # Input/Output - `[input]` list of strings `commands` Each string represents a command with a direction (`N`, `S`, `E`, or `W`) followed by a non-negative integer distance (`0 ≤ distance ≤ 100`). It is guaranteed that the list contains at least one command. - `[output]` a tuple The final position of the robot as a tuple `(x, y)` after processing valid commands. If an invalid command is encountered, the robot stops processing further commands and returns the position up to that point.","solution":"def final_robot_position(commands): Determines the final position of the robot on the grid after processing valid commands. Parameters: commands (list of str): List of movement commands. Returns: tuple: The final position (x, y) of the robot on the grid. x, y = 0, 0 for command in commands: if len(command) < 2 or not command[1:].isdigit(): break direction = command[0] distance = int(command[1:]) if direction == \'N\': y += distance elif direction == \'S\': y -= distance elif direction == \'E\': x += distance elif direction == \'W\': x -= distance else: break return x, y"},{"question":"Given a string s, determine if it is possible to re-order the characters of the string to form a palindrome. If it is possible, return \\"YES\\", otherwise return \\"NO\\". A palindrome is a word that reads the same backward as forward, such as \\"radar\\" or \\"level\\". Write a function: ```python can_form_palindrome(s: str) -> str ``` Input - `s`: a string of lowercase alphabets. (1 <= len(s) <= 10^5) Output - Return \\"YES\\" if the string can be rearranged to form a palindrome, otherwise return \\"NO\\". Example ```python can_form_palindrome(\\"civic\\") == \\"YES\\" can_form_palindrome(\\"ivicc\\") == \\"YES\\" can_form_palindrome(\\"hello\\") == \\"NO\\" can_form_palindrome(\\"aabb\\") == \\"YES\\" ```","solution":"def can_form_palindrome(s: str) -> str: Determines if the characters of the string can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd count. if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given the chance to create a digital library system. The purpose of the library system is to manage the collection of books in the library. To do this, you need to design and implement a function that can sort the books by their title and return them as a list. The function will receive a list of dictionaries, where each dictionary represents a book with the following keys: \'title\', \'author\', and \'year\'. Your task is to return the books sorted alphabetically by their titles. For example, if your list of books was: ``` [ {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'year\': 1960}, {\'title\': \'1984\', \'author\': \'George Orwell\', \'year\': 1949}, {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'year\': 1925}, {\'title\': \'The Catcher in the Rye\', \'author\': \'J.D. Salinger\', \'year\': 1951} ] ``` Your function should sort the books and return: ``` [ {\'title\': \'1984\', \'author\': \'George Orwell\', \'year\': 1949}, {\'title\': \'The Catcher in the Rye\', \'author\': \'J.D. Salinger\', \'year\': 1951}, {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'year\': 1925}, {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'year\': 1960} ] ``` To summarize, implement a function that takes a list of dictionaries (each representing a book with \'title\', \'author\', and \'year\') and returns the list sorted by the book titles.","solution":"def sort_books_by_title(books): Sorts a list of book dictionaries by their \'title\' key alphabetically. Parameters: books (list of dict): List of dictionaries, each representing a book with \'title\', \'author\', and \'year\' keys. Returns: list of dict: List of book dictionaries sorted by the \'title\' key. return sorted(books, key=lambda book: book[\'title\'])"},{"question":"Implement a function `decode_string` that takes a single string argument and returns a decoded string following these rules: 1. The input string can contain alphabetic characters (A-Z, a-z), digits (0-9) and square brackets `[]`. 2. An encoded pattern consists of a digit followed by a substring enclosed in square brackets. This pattern means that the substring inside the brackets should appear the number of times specified by the digit. 3. Nested encoded patterns are possible. 4. The function should handle nested encoded patterns by decoding the innermost pattern first. Function Signature ```python def decode_string(s: str) -> str: ... ``` # Examples ```python decode_string(\\"3[a]2[bc]\\") # returns \\"aaabcbc\\" decode_string(\\"3[a2[c]]\\") # returns \\"accaccacc\\" decode_string(\\"2[abc]3[cd]ef\\") # returns \\"abcabccdcdcdef\\" decode_string(\\"abc3[cd]xyz\\") # returns \\"abccdcdcdxyz\\" ``` # Explanation 1. `decode_string(\\"3[a]2[bc]\\")` -> The substring `a` should be repeated 3 times and the substring `bc` should be repeated 2 times. The decoded string is `aaabcbc`. 2. `decode_string(\\"3[a2[c]]\\")` -> The substring `a2[c]` needs to be expanded first, where `c` is repeated 2 times resulting in `acc`. Then `acc` is repeated 3 times resulting in `accaccacc`. 3. `decode_string(\\"2[abc]3[cd]ef\\")` -> The substrings `abc` should be repeated 2 times, and `cd` should be repeated 3 times, followed by `ef`. The decoded string is `abcabccdcdcdef`. 4. `decode_string(\\"abc3[cd]xyz\\")` -> The substring `cd` should be repeated 3 times, resulting in `cdcdcd`, then it is combined with the rest of the string. The decoded string is `abccdcdcdxyz`. # Constraints - The input string `s` is guaranteed to be a valid encoded string as per the given rules.","solution":"def decode_string(s: str) -> str: stack = [] current_number = 0 current_string = \\"\\" for char in s: if char.isdigit(): current_number = current_number * 10 + int(char) elif char == \'[\': stack.append((current_string, current_number)) current_string = \\"\\" current_number = 0 elif char == \']\': last_string, number = stack.pop() current_string = last_string + current_string * number else: current_string += char return current_string"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the difference between the corresponding element in the original list and the average of the list. Round the differences to the nearest integer. For example, for the list [2, 4, 6, 8], the function should return [-3, -1, 1, 3], because the average of the list is 5 and the differences are [-3.0, -1.0, 1.0, 3.0], which rounds to [-3, -1, 1, 3].","solution":"def differences_from_average(nums): Returns a new list where each element is the difference between the corresponding element in the original list and the average of the list, rounded to the nearest integer. Arguments: nums -- list of integers Returns: List of integers if not nums: return [] avg = sum(nums) / len(nums) return [round(num - avg) for num in nums]"},{"question":"Write a function that takes a list of numbers and returns a new list with each number squared and sorted in descending order. For example, given the list [1, -4, 2, 3], the function should return [16, 9, 4, 1]. Ensure your solution does not modify the original list. Example usage: square_and_sort([1, -4, 2, 3]) # Output: [16, 9, 4, 1]","solution":"def square_and_sort(nums): Returns a new list with each number squared and sorted in descending order. Parameters: nums: List of numbers Returns: List of squared numbers sorted in descending order squared_nums = [x ** 2 for x in nums] squared_nums_sorted = sorted(squared_nums, reverse=True) return squared_nums_sorted"},{"question":"A group of friends owns different types of cars, and they love to compare them. They decided to create a fun challenge where they sort their cars based on a combined score from multiple specifications. Each car has certain attributes and corresponding values, such as speed, comfort, and fuel efficiency. They want to sort the cars in descending order based on a calculated score from these attributes. Create a function named `sort_cars` that takes in a list of dictionaries. Each dictionary represents a car and contains the following attributes with their respective numeric values: - \\"speed\\" (higher is better) - \\"comfort\\" (higher is better) - \\"fuel_efficiency\\" (higher is better) The combined score for each car is calculated as: ``` combined_score = (speed * 0.5) + (comfort * 0.3) + (fuel_efficiency * 0.2) ``` The function should return a list of car names sorted in descending order based on their combined score. If the input list is empty, the function should return an empty list. # Example: Input: ```python cars = [ {\\"name\\": \\"Car A\\", \\"speed\\": 150, \\"comfort\\": 80, \\"fuel_efficiency\\": 70}, {\\"name\\": \\"Car B\\", \\"speed\\": 120, \\"comfort\\": 90, \\"fuel_efficiency\\": 60}, {\\"name\\": \\"Car C\\", \\"speed\\": 130, \\"comfort\\": 85, \\"fuel_efficiency\\": 65} ] ``` Output: ```python [\\"Car A\\", \\"Car C\\", \\"Car B\\"] ``` Note: - Your implementation should handle sorting with ties appropriately. - Ensure the code is efficient and can handle a reasonable number of car entries.","solution":"def sort_cars(cars): Sorts cars in descending order based on their combined score which is calculated as: combined_score = (speed * 0.5) + (comfort * 0.3) + (fuel_efficiency * 0.2) Parameters: cars (list of dict): A list of dictionaries where each dictionary represents a car and its attributes. Returns: list: A list of car names sorted in descending order based on their combined score. for car in cars: car[\'combined_score\'] = (car[\'speed\'] * 0.5) + (car[\'comfort\'] * 0.3) + (car[\'fuel_efficiency\'] * 0.2) sorted_cars = sorted(cars, key=lambda x: x[\'combined_score\'], reverse=True) return [car[\'name\'] for car in sorted_cars]"},{"question":"Given a string s consisting of lowercase English letters, return the most frequent character. If there are multiple characters with the same maximum frequency, return the lexicographically smallest one. Example 1: Input: s = \\"abac\\" Output: \\"a\\" Explanation: Both \'a\' and \'b\' have a frequency of 2, but \'a\' is lexicographically smaller. Example 2: Input: s = \\"zxyyzz\\" Output: \\"z\\" Explanation: The character \'z\' has the highest frequency of 3. Example 3: Input: s = \\"kkkk\\" Output: \\"k\\" Explanation: The character \'k\' has the highest frequency of 4. Constraints: 1 <= s.length <= 10^5 s consists of lowercase English letters only.","solution":"def most_frequent_char(s): Returns the most frequent character in the string s. If there are multiple characters with the same frequency, returns the lexicographically smallest one. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Find the maximum frequency max_freq = max(freq.values()) # Find the lexicographically smallest character with the maximum frequency most_frequent = min(char for char in freq if freq[char] == max_freq) return most_frequent"},{"question":"Task Given an integer `n`, return a string representation of an n x n checkerboard. The checkerboard should consist of two characters, `X` and `O`, starting with `X` at the top-left corner. Each row should alternate between starting with `X` and `O`. Example: ``` Input: 5 Output: XOXOX OXOXO XOXOX OXOXO XOXOX ``` ``` Input: 3 Output: XOX OXO XOX ``` **Note:** The input `n` will be a positive integer and will not exceed 50. There will be no tests with invalid input.","solution":"def generate_checkerboard(n): Generate an n x n checkerboard pattern as a string. Parameters: - n (int): The size of the checkerboard. Returns: - str: The checkerboard pattern where each row is separated by a newline character. checkerboard = [] for i in range(n): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(\'X\') else: row.append(\'O\') checkerboard.append(\'\'.join(row)) return \'n\'.join(checkerboard)"},{"question":"Given a list of distinct integers, determine whether there exist two indices i and j such that the sum of elements at these indices is equal to a given target value. The function should return a tuple of the indices (i, j) if such a pair is found; otherwise, return None. For example, `two_sum([2, 7, 11, 15], 9)` should return (0, 1) because 2 + 7 equals the target value 9. The list and target value will be passed as arguments to the function. Ensure your solution has a time complexity of O(n) for an efficient outcome. For additional information on the two-sum problem, see https://en.wikipedia.org/wiki/Two-sum_problem","solution":"def two_sum(nums, target): Determines if there exist two indices i and j such that the sum of elements at these indices is equal to the given target value. Returns a tuple of the indices (i, j) if such a pair is found; otherwise, returns None. :param nums: List of distinct integers. :param target: Target integer value. :return: Tuple of indices (i, j) or None. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"You are tasked with writing an AI for a two-player, turn-based game called *Odd-or-Even*. The Board -------------- The board starts with a single pile of stones. The initial number of stones in the pile is a random positive integer between 10 and 100. ``` Pile: ||||||||| ...or more concisely: [11] ``` The Rules -------------- - The players take turns picking stones from the pile. - On each turn, the player must pick an odd number of stones. - If a player picks the last stone(s), they lose the game. The Task -------------- In this kata, you need to code an AI that can play the *Odd-or-Even* game. You will write a function `choose_stones` (or `chooseStones`, or `choose-stones`) that takes the current number of stones in the pile as an integer and returns the number of stones the AI will pick, which must be an odd positive integer. The test suite is written so that your AI plays 50 games and wins every game it plays by ensuring the opponent picks the last stone(s). ```python def choose_stones(stones): # Your code here pass ```","solution":"def choose_stones(stones): This function returns the number of stones the AI will pick, ensuring it is always an odd positive integer. The AI strategy would be to let the opponent play only when the pile is such that they will eventually pick the last stone. # Ensure AI picks 1 stone if the pile has 1 stone left, resulting in the opponent losing. if stones == 1: return 1 # If there are stones greater than 1, the AI will always pick 1 stone, # thus ensuring the opponent faces 1 less stone each turn, # ultimately leading the opponent to a losing position. return 1"},{"question":"In an online multiplayer game, players can join different servers to play and chat with others. Each server has a specific capacity, which is the maximum number of players it can accommodate at once. Players can join or leave servers, but they can\'t join a server if doing so would exceed its capacity. You need to write a function that simulates the activities of players joining and leaving servers and check the status of the servers. The input is a list of tuples representing the actions performed on the servers. Each tuple contains three elements in the format: (action, server_id, player_id). - \'action\' can either be \'join\' or \'leave\'. - \'server_id\' is an integer representing the server to which the action applies. - \'player_id\' is a unique identifier for the player performing the action. The function should return a dictionary where the keys are the server IDs and the values are lists of players currently in each server. The players in each list should be sorted by their IDs in ascending order. If a player tries to join a server that is already at full capacity, their request should be ignored. If a player tries to leave a server they are not currently in, the request should also be ignored. Here are the steps for your function: 1. Initialize an empty dictionary to keep track of servers and their current player lists. 2. For each action in the input list: - If the action is \'join\', add the player to the server\'s list if the server is not at full capacity. - If the action is \'leave\', remove the player from the server\'s list if they are in it. 3. Ensure that the players in each server list are always sorted by their IDs. You should not assume any pre-existing servers or players. **Function Signature:** ```python def manage_servers(actions: List[Tuple[str, int, int]], capacities: Dict[int, int]) -> Dict[int, List[int]]: pass ``` # Example: **Input:** ```python actions = [ (\'join\', 1, 100), (\'join\', 1, 101), (\'leave\', 1, 100), (\'join\', 2, 202), (\'join\', 2, 203), (\'join\', 2, 204), (\'join\', 1, 105), (\'leave\', 2, 203), (\'join\', 1, 101) ] capacities = {1: 2, 2: 3} ``` **Output:** ```python { 1: [101, 105], 2: [202, 204] } ``` # Explanation: - Server 1: Players 100 and 101 join. Player 100 leaves. Player 105 joins. Player 101 tries to rejoin but is already in the server. - Server 2: Players 202, 203, and 204 join. Player 203 leaves. The final state shows the remaining players in each server sorted by their IDs.","solution":"from typing import List, Tuple, Dict def manage_servers(actions: List[Tuple[str, int, int]], capacities: Dict[int, int]) -> Dict[int, List[int]]: servers = {} for action, server_id, player_id in actions: if server_id not in servers: servers[server_id] = [] if action == \'join\': if len(servers[server_id]) < capacities.get(server_id, 0) and player_id not in servers[server_id]: servers[server_id].append(player_id) servers[server_id].sort() elif action == \'leave\': if player_id in servers[server_id]: servers[server_id].remove(player_id) return servers"},{"question":"Word Frequency Count Given a string, write a function to count the frequency of each word in it. The function should return a dictionary where the keys are the words and the values are their respective frequencies. Words are defined as sequences of characters separated by spaces. The function should ignore punctuation and be case-insensitive. Example: ``` wordFrequency(\\"Hello world! Hello\\") => {\\"hello\\": 2, \\"world\\": 1} wordFrequency(\\"This is a test. This test is only a test.\\") => {\\"this\\": 2, \\"is\\": 2, \\"a\\": 2, \\"test\\": 3, \\"only\\": 1} wordFrequency(\\"Coding is fun! Fun coding.\\") => {\\"coding\\": 2, \\"is\\": 1, \\"fun\\": 2} ``` Note: - Your function should handle an empty string and return an empty dictionary. - Punctuation marks include `!`, `.`, `,`, `?`, and should be ignored. - The words in the output dictionary should be stored in lowercase.","solution":"import re from collections import defaultdict def wordFrequency(text): Counts the frequency of each word in the given string. Parameters: text (str): The input string. Returns: dict: A dictionary where keys are words and values are their frequencies. # Convert text to lowercase text = text.lower() # Remove punctuation marks text = re.sub(r\'[^ws]\', \'\', text) # Split text into words words = text.split() # Use defaultdict to count word frequencies frequency_dict = defaultdict(int) for word in words: frequency_dict[word] += 1 return dict(frequency_dict)"},{"question":"You are given a list of stock prices for a certain company on consecutive days. Each element in the list represents the stock price on that day. You need to find the maximum possible profit you can achieve by buying the stock on one day and selling it on a later day. If no profit can be made, return 0. You can assume that you are only allowed to complete at most one transaction (i.e., buy one and sell one share of the stock). # Example: ``` Given: prices = [7, 1, 5, 3, 6, 4] Return: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. ``` ``` Given: prices = [7, 6, 4, 3, 1] Return: 0 Explanation: No profit can be made as the stock prices continuously decline. ```","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and then selling the stock on different days. If no profit can be made, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price if price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Task Given a string as input, your task is to determine if the string is a valid IPv4 address. An IPv4 address is a string in the format \\"a.b.c.d\\", where each \\"a\\", \\"b\\", \\"c\\", and \\"d\\" are integers in the range 0 to 255. Additionally, none of the integers should have leading zeros (e.g., \\"001.2.3.4\\" is invalid). # Input/Output - `[input]` string `address`: - A string representing the IPv4 address to be validated. Constraints: - `address` will consist of exactly four sections separated by periods (.) - Each section should contain only digits - `[output]` a boolean: - Return `true` if the given string is a valid IPv4 address, otherwise return `false`. # Example - For `address = \\"192.168.1.1\\"`, the output should be `true`. - For `address = \\"255.255.255.255\\"`, the output should be `true`. - For `address = \\"123.045.067.089\\"`, the output should be `false` (leading zeros in sections \\"045\\", \\"067\\", \\"089\\"). - For `address = \\"256.256.256.256\\"`, the output should be `false` (each section exceeds the range 0-255).","solution":"def is_valid_ipv4_address(address): Check if the given address is a valid IPv4 address. Parameters: address (str): The IPv4 address to validate Returns: bool: True if the address is valid, False otherwise parts = address.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if part.startswith(\'0\') and len(part) > 1: return False if not 0 <= int(part) <= 255: return False return True"},{"question":"**Task** Alex is working on a text editor application and he is trying to implement a feature that automatically corrects certain misspelled words based on a given dictionary. He wants your help to write a function that will correct the misspelled words in a sentence. You need to create a function that, given a dictionary of correct words and a sentence containing misspelled words, replaces the misspelled words with the correct ones from the dictionary. The dictionary will be provided as a list of tuples, where each tuple contains a misspelled word and its correct form. The sentence will be provided as a single string where the words are separated by spaces. Input - A list of tuples representing the dictionary, where each tuple consists of two strings: the misspelled word and the correct word, e.g., `[(\'teh\', \'the\'), (\'woudl\', \'would\')]`. - A string `sentence` containing the sentence with misspelled words, e.g., `\\"I woudl like teh cake\\"`. Output - A corrected string where each misspelled word is replaced by its correct form according to the given dictionary, e.g., `\\"I would like the cake\\"`. Examples ```python correct_words([(\'teh\', \'the\'), (\'woudl\', \'would\')], \\"I woudl like teh cake\\") # Returns: \\"I would like the cake\\" correct_words([(\'hte\', \'the\'), (\'speel\', \'spell\'), (\'mistke\', \'mistake\')], \\"I need to speel the word without a mistke\\") # Returns: \\"I need to spell the word without a mistake\\" correct_words([(\'recieve\', \'receive\'), (\'definately\', \'definitely\')], \\"I definately need to recieve the package\\") # Returns: \\"I definitely need to receive the package\\" correct_words([(\'adn\', \'and\'), (\'geng\', \'going\')], \\"I am geng to the store adn I will be back soon\\") # Returns: \\"I am going to the store and I will be back soon\\" ``` **Constraints** - The length of the sentence will not exceed 1000 characters. - The dictionary can contain up to 100 entries. - Each word in the dictionary and sentence consists of lowercase letters only.","solution":"def correct_words(dictionary, sentence): Replaces the misspelled words with the correct ones according to the dictionary. Args: dictionary (list of tuples): List of tuples where each tuple contains a misspelled word and its correct form. sentence (str): A sentence that may contain misspelled words. Returns: str: A corrected sentence where the misspelled words are replaced with the correct version. correction_dict = dict(dictionary) words = sentence.split() corrected_words = [correction_dict.get(word, word) for word in words] return \\" \\".join(corrected_words)"},{"question":"You are given an integer N. You need to print a diamond pattern of \'*\'. The diamond pattern should have N rows in the upper half and N rows in the lower half (excluding the middle row which is counted in both halves). -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single integer N which denotes the number of rows in the upper half (including the middle row). -----Output:----- For each test case, output the diamond pattern. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10 -----Sample Input:----- 2 2 3 -----Sample Output:----- * * * * * * * * * * * * * * * * * * * * -----Explanation:----- For the first test case, N=2, the diamond pattern will have 2 rows in the upper half, the middle row, and 2 rows in the lower half. For the second test case, N=3, the diamond pattern will have 3 rows in the upper half, the middle row, and 3 rows in the lower half.","solution":"def generate_diamond(N): Generates a diamond pattern with N rows in the upper half (including middle row) and N rows in the lower half (excluding middle row). diamond_pattern = [] for i in range(N): spaces = \' \' * (N - i - 1) if i == 0: stars = \'*\' else: stars = \'*\' + \' \' * (2 * i - 1) + \'*\' diamond_pattern.append(spaces + stars) for i in range(N - 1): spaces = \' \' * (i + 1) if N - i - 2 == 0: stars = \'*\' else: stars = \'*\' + \' \' * (2 * (N - i - 2) - 1) + \'*\' diamond_pattern.append(spaces + stars) return diamond_pattern def diamond_patterns(T, Ns): Generates diamond patterns for each test case based on the list of Ns. results = [] for N in Ns: results.append(generate_diamond(N)) return results"},{"question":"An online shopping website has a list of products that a seller offers. Each product has a name and a price. The seller wants to organize these products into a catalog where each product name is unique, but if there are duplicates, they should be renamed by appending a suffix (k) where k is the smallest integer such that the new name is unique. Your task is to write a function that takes in a list of product names and returns a list where duplicate names are renamed appropriately. ----Input---- - The first line contains an integer N (1 ≤ N ≤ 10^5), the number of products. - The next N lines each contain a string which represents the name of the product. The length of each product name will not exceed 30 characters and the names only consist of lowercase letters. ----Output---- - Print N lines each containing the renamed product name such that all the names in the output list are unique. ----Example---- Input: 6 apple banana apple orange banana apple Output: apple banana apple(1) orange banana(1) apple(2) Explanation: There are three occurrences of \\"apple\\". The first \\"apple\\" remains the same, the second is renamed to \\"apple(1)\\", and the third to \\"apple(2)\\". Similarly, the second \\"banana\\" is renamed to \\"banana(1)\\" to make it unique. Note: - The program should handle up to 10^5 products efficiently. - The suffix (k) should start from 1 for the first duplicate and increment for subsequent duplicates.","solution":"def rename_products(products): Given a list of product names, return a list where duplicates are renamed with a suffix (k) such that each name is unique. :param products: List of product names :return: List of unique product names with appropriate suffixes name_count = {} unique_names = [] for product in products: if product not in name_count: name_count[product] = 0 unique_names.append(product) else: name_count[product] += 1 new_name = f\\"{product}({name_count[product]})\\" unique_names.append(new_name) return unique_names"},{"question":"Alice and Bob are good friends who enjoy solving puzzles together. This time, Bob has given Alice a series of puzzles to solve, and Alice needs your help to figure them out. The puzzle consists of a sequence of n integers, and Alice needs to determine whether the sequence can be transformed into a non-decreasing sequence by performing a series of operations. In one operation, Alice can choose any element of the sequence and increase or decrease it by 1. Your task is to determine the minimum number of operations required to make the sequence non-decreasing. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of integers in the sequence. The second line contains n integers a_1, a_2, ldots, a_n (-10^5 le a_i le 10^5) — the elements of the sequence. -----Output----- Print a single integer x — the minimum number of operations required to make the sequence non-decreasing. -----Examples----- Input 5 4 2 3 1 5 Output 6 Input 3 1 2 3 Output 0","solution":"def min_operations_to_non_decreasing(sequence): Given a sequence of integers, calculate the minimum number of operations needed to make the sequence non-decreasing. min_operations = 0 n = len(sequence) for i in range(1, n): if sequence[i] < sequence[i-1]: min_operations += sequence[i-1] - sequence[i] sequence[i] = sequence[i-1] return min_operations"},{"question":"A city is planning to install new traffic lights at various intersections. The city council has three primary colors of lights (red, green, and blue), and they want to create a visually appealing sequence by arranging these colors in a specific pattern. Given a number N, you have to find the number of distinct ways to arrange these lights in a vertical sequence such that no two lights of the same color are adjacent. For example, if N = 2, the possible arrangements are \\"RG\\", \\"RB\\", \\"GR\\", \\"GB\\", \\"BR\\", and \\"BG\\". Write a program that calculates the number of valid sequences that can be produced. -----Input:----- - First line will contain the number N. -----Output:----- - The number of valid sequences of length N. -----Constraints----- - 1 leq N leq 10^9 -----Sample Input:----- 2 -----Sample Output:----- 6 -----EXPLANATION:----- The valid sequences of length 2 are: \\"RG\\", \\"RB\\", \\"GR\\", \\"GB\\", \\"BR\\", and \\"BG\\". There are no repeated colors in any sequence, and all sequences are considered distinct.","solution":"def count_valid_sequences(N): Returns the number of distinct ways to arrange traffic lights of three different colors (Red, Green, Blue) in a vertical sequence of length N such that no two lights of the same color are adjacent. if N == 1: return 3 # Only three distinct ways: R, G, B # For N > 1, We can use dynamic programming approach: total_ways = 3 * (2 ** (N - 1)) # Each position can have 2 options except the very first one return total_ways"},{"question":"You are given a list of transactions made in a store throughout the day. Each transaction consists of the name of the item purchased and its price. Your task is to group these transactions by the item name and calculate the total revenue generated for each item. -----Input----- - First line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N, the number of transactions. - N lines follow. For each valid i, the i-th of these lines contains a string item_i, followed by a space and an integer price_i, denoting the i-th transaction. -----Output----- For each test case, output the total revenue generated for each item in a single line. The output should be in the format \\"item_name: total_revenue\\". The items in the output should be sorted alphabetically by their names. -----Constraints----- - 1 le T le 10 - 1 le N le 25,000 - 1 le |item_i| le 10 for each valid i - 1 le price_i le 1,000 -----Example Input----- 2 3 apple 100 banana 80 apple 150 4 pear 200 pear 100 banana 60 apple 70 -----Example Output----- apple: 250 banana: 80 apple: 70 banana: 60 pear: 300 -----Explanation----- In the first test case, the total revenue for \'apple\' is 100 + 150 = 250 and for \'banana\' is 80. In the second test case, the total revenue for \'pear\' is 200 + 100 = 300, for \'banana\' is 60, and for \'apple\' is 70. The outputs are listed in alphabetical order of item names.","solution":"def calculate_revenue(transactions): Calculate total revenue generated for each item from given transactions. :param transactions: List of tuples (item, price) :return: List of strings in format \'item_name: total_revenue\', sorted alphabetically by item name from collections import defaultdict revenue_dict = defaultdict(int) for item, price in transactions: revenue_dict[item] += price sorted_items = sorted(revenue_dict.items()) return [f\\"{item}: {revenue}\\" for item, revenue in sorted_items] def process_input(input_data): Process input cases to return result for each case. :param input_data: List of lines representing multiple test cases :return: List of results for each test case index = 0 T = int(input_data[index]) index += 1 results = [] for _ in range(T): N = int(input_data[index]) index += 1 transactions = [] for _ in range(N): item, price = input_data[index].split() price = int(price) transactions.append((item, price)) index += 1 results.append(calculate_revenue(transactions)) return results"},{"question":"You are given an array of non-negative integers where each element represents the maximum number of steps you can advance in the array. For example, if the element at index `i` is `3`, you can move from index `i` to either `i+1`, `i+2`, or `i+3`. Your goal is to determine the minimum number of jumps required to reach the last index of the array starting from the first index. If it\'s not possible to reach the last index, return -1. # Task Write a function `min_jumps` that takes a list of non-negative integers and returns the minimum number of jumps required to reach the last index, or -1 if it is not possible. # Examples: `min_jumps([2, 3, 1, 1, 4])` should return `2` because the minimum number of jumps to reach the last index is `2` (index 0 -> index 1 -> index 4). `min_jumps([3, 2, 1, 0, 4])` should return `-1` because it is impossible to reach the last index. # Notes - The input array will contain at least one element. - If the array contains only one element, you are already at the last index, so the number of jumps needed is `0`. # Constraints - Time complexity should aim for O(n).","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the last index of the array, or -1 if it\'s not possible. if len(arr) <= 1: return 0 if arr[0] == 0: return -1 max_reach = arr[0] step = arr[0] jump = 1 for i in range(1, len(arr)): if i == len(arr) - 1: return jump max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jump += 1 if i >= max_reach: return -1 step = max_reach - i return -1"},{"question":"Write a function that takes a list of integers and an integer `n` as its parameters. The function should find all pairs of integers in the list that add up to `n` and return them as a list of tuples. Each pair should be sorted in ascending order, and the resulting list of tuples should not contain duplicates. # Example ```python find_pairs([1, 2, 3, 4, 3, 5], 6) ==> [(1, 5), (2, 4), (3, 3)] ``` **Function Signature:** ```python def find_pairs(lst: List[int], n: int) -> List[Tuple[int, int]]: pass ```","solution":"from typing import List, Tuple def find_pairs(lst: List[int], n: int) -> List[Tuple[int, int]]: seen = set() pairs = set() for number in lst: target = n - number if target in seen: pairs.add(tuple(sorted((number, target)))) seen.add(number) return sorted(list(pairs))"},{"question":"Write a function `followersAndDifference(followers)` that takes a dictionary representing the number of followers of several users on a social media platform and performs the following actions: 1. Find the user with the maximum number of followers and the user with the minimum number of followers. 2. Calculate the absolute difference in the number of followers between these two users. 3. If there are multiple users with the maximum or minimum number of followers, consider only the first one found in the dictionary. 4. Return a tuple with three items: (user with maximum followers, user with minimum followers, difference in followers). Assume the input dictionary will never be empty, and the follower counts will be non-negative integers. Example: ```python followers = { \'alice\': 120, \'bob\': 95, \'carol\': 75, \'dave\': 120, \'eve\': 50 } followersAndDifference(followers) # Should return (\'alice\', \'eve\', 70) ```","solution":"def followersAndDifference(followers): Finds the user with the maximum number of followers and the user with the minimum number of followers. Calculates the absolute difference in the number of followers between these two users. Parameters: followers (dict): A dictionary where keys are usernames and values are follower counts. Returns: tuple: A tuple containing the user with maximum followers, user with minimum followers, and the absolute difference in follower counts. max_user = max(followers, key=followers.get) min_user = min(followers, key=followers.get) difference = abs(followers[max_user] - followers[min_user]) return (max_user, min_user, difference)"},{"question":"Write a function `findSecondLargest` that takes a list of integers and returns the second largest number in the list. If the list has fewer than 2 unique numbers, the function should return `None`. Example: ```python findSecondLargest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) -> 6 findSecondLargest([1, 1, 1, 1]) -> None ```","solution":"def findSecondLargest(nums): Returns the second largest number in the list of integers. If the list has fewer than 2 unique numbers, returns None. if len(nums) < 2: return None # Use a set to get unique values and then sort them unique_nums = sorted(set(nums)) if len(unique_nums) < 2: return None return unique_nums[-2]"},{"question":"Given an array of integers, find the maximum possible product of two different elements in the array. -----Input----- The input consists of a single test case. The first line contains an integer n (2 leq n leq 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9), the elements of the array. -----Output----- Print a single integer, the maximum possible product of two different elements in the array. -----Example----- Input 5 1 2 3 4 5 Output 20 Input 5 -10 -20 5 7 3 Output 200 -----Note----- In the first test case, the maximum product is 4 times 5 = 20. In the second test case, the maximum product is -10 times -20 = 200.","solution":"def max_product_of_two(arr): Returns the maximum possible product of two different elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least 2 elements\\") # Initialize the largest and second largest values to the smallest possible largest = float(\'-inf\') second_largest = float(\'-inf\') # Initialize the smallest and second smallest values to the largest possible smallest = float(\'inf\') second_smallest = float(\'inf\') # Traverse the array and find the largest, second largest, and smallest, second smallest for num in arr: if num > largest: second_largest = largest largest = num elif num > second_largest: second_largest = num if num < smallest: second_smallest = smallest smallest = num elif num < second_smallest: second_smallest = num # The maximum product could be either from the two largest or the two smallest (if they are both negative) return max(largest * second_largest, smallest * second_smallest)"},{"question":"A company receives a list of timestamps representing the login and logout times of their employees. An employee can log in and out multiple times throughout the day. However, they want to know the total time each employee was active (logged in) during the day based on the given list of timestamps. Given an array of tuples `timestamps`, where each tuple contains a string `employeeId`, a string `action` (either \\"login\\" or \\"logout\\"), and a string `time` in the format \\"HH:MM\\", write a function `active_time_per_employee(timestamps)` that returns a dictionary where the keys are employee IDs and the values are the total active time in minutes for each employee. It is guaranteed that: 1. Each employee will have matching login and logout times (i.e., every \\"login\\" will be followed by a \\"logout\\" for the same employee). 2. Employee IDs are unique strings representing different employees. Example 1: ```python timestamps = [ (\\"123\\", \\"login\\", \\"09:00\\"), (\\"123\\", \\"logout\\", \\"10:30\\"), (\\"456\\", \\"login\\", \\"09:15\\"), (\\"456\\", \\"logout\\", \\"11:00\\"), (\\"123\\", \\"login\\", \\"12:00\\"), (\\"123\\", \\"logout\\", \\"12:45\\") ] Output: {\\"123\\": 135, \\"456\\": 105} ``` Explanation: - Employee \\"123\\" was active for 90 minutes between \\"09:00\\" and \\"10:30\\", and for 45 minutes between \\"12:00\\" and \\"12:45\\". Total active time is 135 minutes. - Employee \\"456\\" was active for 105 minutes between \\"09:15\\" and \\"11:00\\". Example 2: ```python timestamps = [ (\\"789\\", \\"login\\", \\"08:00\\"), (\\"789\\", \\"logout\\", \\"08:30\\"), (\\"789\\", \\"login\\", \\"08:45\\"), (\\"789\\", \\"logout\\", \\"09:15\\"), (\\"789\\", \\"login\\", \\"10:00\\"), (\\"789\\", \\"logout\\", \\"11:00\\") ] Output: {\\"789\\": 120} ``` Explanation: - Employee \\"789\\" was active for 30 minutes between \\"08:00\\" and \\"08:30\\", 30 minutes between \\"08:45\\" and \\"09:15\\", and 60 minutes between \\"10:00\\" and \\"11:00\\". Total active time is 120 minutes. Notes: - The times are in the 24-hour format \\"HH:MM\\", with \\"HH\\" from \\"00\\" to \\"23\\" and \\"MM\\" from \\"00\\" to \\"59\\". - The input array of timestamps will contain between 2 and 1000 entries. - The function should be able to handle multiple employees and calculate their active times correctly.","solution":"from datetime import datetime def active_time_per_employee(timestamps): Returns the total active time in minutes for each employee. Args: timestamps (list of tuples): Each tuple contains employeeId (str), action (str), and time (str). Returns: dict: A dictionary where keys are employee IDs and values are the total active time in minutes. def time_diff(start, end): Returns the difference in minutes between two HH:MM time strings. start_time = datetime.strptime(start, \'%H:%M\') end_time = datetime.strptime(end, \'%H:%M\') return int((end_time - start_time).total_seconds() // 60) active_times = {} last_login = {} for employee_id, action, time in timestamps: if action == \\"login\\": last_login[employee_id] = time elif action == \\"logout\\": if employee_id in last_login: if employee_id not in active_times: active_times[employee_id] = 0 active_times[employee_id] += time_diff(last_login[employee_id], time) del last_login[employee_id] return active_times"},{"question":"You are given a list of events happening in a timeline, each event has a start and end time. The goal is to determine the maximum number of non-overlapping events that can be attended. In each query, you will be given a time interval during which no events can be attended (due to being busy). Within the timeline, excluding the busy interval, find out the maximum number of non-overlapping events that can be attended. -----Input----- The first line contains two integers n and q (1 le n, q leq 10^5) — the number of events and the number of queries. Each of the next n lines contains two integers start and end (1 le start < end le 10^9) — the start and end times of the event. The next q lines contain two integers busy_start and busy_end (1 le busy_start < busy_end le 10^9). -----Output----- For each query print an integer — the maximum number of non-overlapping events that can be attended excluding the busy interval. -----Examples----- Input 5 2 1 4 2 6 8 10 3 5 7 9 1 3 2 8 Output 2 1 Explanation of the first query: After excluding the busy interval [1, 3], the remaining events are: [3, 4], [8, 10], [7, 9] The maximum number of non-overlapping events is 2 (either [3, 4] and [8, 10] or [3, 4] and [7, 9]). Explanation of the second query: After excluding the busy interval [2, 8], the remaining event is [8, 10]. The maximum number of non-overlapping events is 1.","solution":"def max_non_overlapping_events(events, queries): def filter_events(events, busy_start, busy_end): return [(start, end) for start, end in events if end <= busy_start or start >= busy_end] def max_non_overlapping(filtered_events): filtered_events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in filtered_events: if start >= last_end_time: count += 1 last_end_time = end return count results = [] for busy_start, busy_end in queries: filtered_events = filter_events(events, busy_start, busy_end) results.append(max_non_overlapping(filtered_events)) return results"},{"question":"Task Write a function that takes a string `s` and returns `true` if the string contains a valid IPv4 address, and `false` otherwise. A valid IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (`.`). Leading zeros in each decimal number are not allowed except for the number zero itself. Examples - `isValidIPv4(\\"192.168.1.1\\")` should return `true` - `isValidIPv4(\\"255.255.255.255\\")` should return `true` - `isValidIPv4(\\"0.0.0.0\\")` should return `true` - `isValidIPv4(\\"192.168.01.1\\")` should return `false` - `isValidIPv4(\\"256.256.256.256\\")` should return `false` - `isValidIPv4(\\"192.168@1.1\\")` should return `false` Note - Do not use regex for string validation.","solution":"def isValidIPv4(s): Returns true if the string s contains a valid IPv4 address, and false otherwise. parts = s.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if (part[0] == \'0\' and len(part) > 1) or not (0 <= int(part) <= 255): return False return True"},{"question":"Write a function called `find_missing_side` that calculates the missing side of a rectangle given its other three sides. The function should take in a dictionary representing the rectangle with two of its sides labeled as `\'length\'` and `\'width\'`, and an optional sides labeled as `\'diagonal\'`. If one side is missing, the function should compute and return the missing side, labeled appropriately. In case of more than one missing side, return the dictionary unchanged. # Examples ```python print(find_missing_side({\'length\': 3, \'width\': 4})) # Output: {\'length\': 3, \'width\': 4, \'diagonal\': 5} print(find_missing_side({\'length\': 6, \'diagonal\': 10})) # Output: {\'length\': 6, \'width\': 8, \'diagonal\': 10} print(find_missing_side({\'width\': 2, \'diagonal\': 5})) # Output: {\'length\': 4.582, \'width\': 2, \'diagonal\': 5} print(find_missing_side({\'length\': 3})) # Output: {\'length\': 3} print(find_missing_side({\'length\': 7, \'width\': 5, \'diagonal\': 8.6})) # Output: {\'length\': 7, \'width\': 5, \'diagonal\': 8.6} ``` # Constraints 1. The input dictionary will always contain at least one key-value pair. 2. All input values will be positive numbers. 3. Assume values are accurate and no rounding errors need to be considered.","solution":"import math def find_missing_side(rectangle): Returns a rectangle dictionary with the missing side calculated. If more than one side is missing, returns the dictionary unchanged. length = rectangle.get(\'length\') width = rectangle.get(\'width\') diagonal = rectangle.get(\'diagonal\') if length and width and not diagonal: rectangle[\'diagonal\'] = math.sqrt(length ** 2 + width ** 2) elif length and diagonal and not width: rectangle[\'width\'] = math.sqrt(diagonal ** 2 - length ** 2) elif width and diagonal and not length: rectangle[\'length\'] = math.sqrt(diagonal ** 2 - width ** 2) # If more than one side is missing or all sides are present do nothing return rectangle"},{"question":"Write a function to calculate and return the edit distance between two strings. The edit distance is the minimum number of operations required to transform one string into another, where an operation is defined as inserting a character, deleting a character, or replacing a character. Your task is to implement the function `edit_distance(str1, str2)` that takes in two parameters, `str1` and `str2`, which are the two strings to compare. You are expected to use dynamic programming to solve this problem efficiently. **Constraints**: - 1 <= len(str1), len(str2) <= 1000 **Examples**: ``` edit_distance(\\"kitten\\", \\"sitting\\") -> 3 edit_distance(\\"flaw\\", \\"lawn\\") -> 2 edit_distance(\\"intention\\", \\"execution\\") -> 5 ``` **Notes**: - You are not allowed to use any external libraries such as `numpy` or `pandas`. - Consider edge cases where one or both strings might be empty. Explanation: The edit distance function measures how dissimilar two strings are by counting the minimum number of operations required to transform one string into another. It’s also known as the Levenshtein distance. Implementing this requires the use of dynamic programming to ensure an efficient solution, minimizing the computational cost.","solution":"def edit_distance(str1, str2): Returns the edit distance between str1 and str2. m, n = len(str1), len(str2) # Create a table to store results of subproblems dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Fill dp array bottom-up for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore the last char # and recur for the remaining substring elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] # If last character is different, consider all # possibilities (insert, remove, replace) and find # the minimum cost else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"You are given an array of integers that represents the daily sea levels recorded in a coastal town. You need to find the length of the longest period (subarray) of continuous days for which the sea levels strictly increase. Write a function that takes as input an array of integers and returns the length of the longest increasing subarray. Example 1: Input: [1, 3, 5, 4, 7] Output: 3 Explanation: The longest increasing subarray is [1, 3, 5], and its length is 3. Example 2: Input: [2, 2, 2, 2, 2] Output: 1 Explanation: All elements are the same, so any single element is the longest increasing subarray with length 1. Example 3: Input: [8, 9, 2, 3, 4, 5, 6, 2] Output: 5 Explanation: The longest increasing subarray is [2, 3, 4, 5, 6], and its length is 5.","solution":"def longest_increasing_subarray(arr): Returns the length of the longest subarray of strictly increasing sea levels. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given a set of n different coins, each with a specific value. You need to determine the number of different ways you can make an amount M using any number of coins. -----Input----- The first line of input contains two integers n (1 leq n leq 100) and M (1 leq M leq 10^5): the number of different coins and the amount you need to make. The next line of input contains n integers c_1, c_2, ldots, c_n (1 leq c_i leq 10^5): the values of the coins. -----Output----- Output one integer: the number of different ways to make the amount M using the given coins. -----Example----- Input 3 11 1 2 5 Output 11 -----Note----- In the example above, there are 11 different ways to make the amount 11 using coins of values 1, 2, and 5.","solution":"def coin_change_ways(n, M, coins): Returns the number of different ways to make amount M using given coins. :param n: int - number of different coins :param M: int - the amount to make :param coins: List[int] - the values of the coins :return: int - the number of different ways to make amount M # Create a list to store the number of ways to make each amount dp = [0] * (M + 1) dp[0] = 1 # There is one way to make 0 amount - use no coins # Iterate over each coin for coin in coins: # Update the dp array starting from the value of the coin to the amount M for x in range(coin, M + 1): dp[x] += dp[x - coin] # The result is the number of ways to make the amount M return dp[M]"},{"question":"Given an MxN matrix where each cell contains an integer, write a function to find the length of the longest increasing path in the matrix. From each cell, you can move to four possible directions: left, right, up, and down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed). Example 1: Input: [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] Output: 4 Explanation: The longest increasing path is [1, 2, 6, 9]. Example 2: Input: [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] Output: 4 Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed. Note: - The number of cells in the matrix will not exceed 10,000. - You may assume all integers in the matrix are not negative and do not exceed 1,000,000.","solution":"def longest_increasing_path(matrix): if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) dp = [[-1 for _ in range(cols)] for _ in range(rows)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_len = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and matrix[nx][ny] > matrix[x][y]: max_len = max(max_len, 1 + dfs(nx, ny)) dp[x][y] = max_len return max_len max_path_length = 0 for i in range(rows): for j in range(cols): max_path_length = max(max_path_length, dfs(i, j)) return max_path_length"},{"question":"# Sum of Unique Elements Write a function that returns the sum of all unique elements from a given list of integers. A unique element is an element that occurs exactly once in the list. The input list can be assumed to contain only integers and may include negative values. # Example [1, 2, 3, 2, 1, 4] -> 7 `# 3 and 4 are unique, 3 + 4 = 7` [5, 5, 5, 5] -> 0 `# no unique elements` [-1, 2, -3, 2, -1, 4] -> 1 `# -3 and 4 are unique, -3 + 4 = 1` [10, 20, 30, 40, 50] -> 150 `# 10, 20, 30, 40, and 50 are unique, sum = 150`","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements in a given list of integers. Parameters: lst (List[int]): List of integers. Returns: int: Sum of unique elements. element_frequency = {} # Count frequency of each element for element in lst: if element in element_frequency: element_frequency[element] += 1 else: element_frequency[element] = 1 # Sum elements that appear exactly once unique_sum = sum(element for element, count in element_frequency.items() if count == 1) return unique_sum"},{"question":"A company needs to manage their employee information. Your task is to help them by creating a function that retrieves the department name based on the employee ID. Each employee ID will follow the pattern \\"DDD-XXXXX\\", where \\"DDD\\" is the department code and \\"XXXXX\\" is a unique identifier for each employee within that department. Write a function `get_department_name(employee_id)` that takes an employee ID as input and returns the corresponding department name according to the following mapping. If the department code is not found, return \\"Unknown Department\\". - \'101\' - \'Sales\' - \'102\' - \'Engineering\' - \'103\' - \'HR\' - \'104\' - \'Finance\' - \'105\' - \'IT Support\' - \'106\' - \'Legal\' - \'107\' - \'Marketing\' - \'108\' - \'Research\' Example: ```python get_department_name(\\"101-23456\\") # Should return \'Sales\' get_department_name(\\"110-98765\\") # Should return \'Unknown Department\' ```","solution":"def get_department_name(employee_id): Returns the department name based on the department code in the employee ID. Args: employee_id (str): The employee ID in the format \\"DDD-XXXXX\\" Returns: str: The corresponding department name or \\"Unknown Department\\" if the code is not found. department_codes = { \'101\': \'Sales\', \'102\': \'Engineering\', \'103\': \'HR\', \'104\': \'Finance\', \'105\': \'IT Support\', \'106\': \'Legal\', \'107\': \'Marketing\', \'108\': \'Research\' } department_code = employee_id.split(\'-\')[0] return department_codes.get(department_code, \\"Unknown Department\\")"},{"question":"You are given an array of integers `arr` and an integer `x`. You need to find the length of the shortest subarray whose sum is at least `x`. If no such subarray exists, return -1. Example 1: Input: arr = [1, 2, 3, 4, 5], x = 11 Output: 3 Explanation: The subarray [3, 4, 5] has the smallest length for which the sum is at least 11. Example 2: Input: arr = [1, 1, 1, 1, 1, 1, 1], x = 8 Output: -1 Explanation: There is no subarray with sum at least 8. Example 3: Input: arr = [2, 3, 1, 2, 4, 3], x = 7 Output: 2 Explanation: The subarray [4, 3] has the smallest length for which the sum is at least 7. Note: 1 <= arr.length <= 10000 1 <= arr[i] <= 1000 1 <= x <= 100000000","solution":"def min_subarray_len(arr, x): n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given a string of even length with only lowercase alphabets, rearrange the characters of the string such that no two adjacent characters are the same. If there are multiple valid rearrangements, return any one of them. If it\'s not possible to achieve such a rearrangement, return an empty string. Example 1: Input: \\"aabb\\" Output: \\"abab\\" or \\"baba\\" or any other valid rearrangement Explanation: Both \\"abab\\" and \\"baba\\" ensure that no two adjacent characters are the same. Example 2: Input: \\"aaab\\" Output: \\"\\" Explanation: It\'s impossible to rearrange \\"aaab\\" such that no adjacent characters are the same. Note: - The input string will have an even length between 2 and 1000 (inclusive). - It is guaranteed that it consists of only lowercase English letters.","solution":"from collections import Counter import heapq def reorganizeString(s): Rearranges the characters of the string such that no two adjacent characters are the same. If not possible, returns an empty string. counter = Counter(s) max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \\"\\" result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count+1, char result_string = \\"\\".join(result) if len(result_string) != len(s): return \\"\\" return result_string"},{"question":"Write a function `find_pair_with_sum(nums, target)` that takes a list of integers `nums` and an integer `target`, and returns a boolean indicating whether there exist two distinct elements in the list that add up to `target`. Examples # Example 1 ``` nums = [2, 7, 11, 15] target = 9 ``` `find_pair_with_sum(nums, target)` returns `True` because 2 and 7 add up to 9. # Example 2 ``` nums = [1, 2, 3, 9] target = 8 ``` `find_pair_with_sum(nums, target)` returns `False` because there are no two numbers that add up to 8. # Example 3 ``` nums = [1, 2, 4, 4] target = 8 ``` `find_pair_with_sum(nums, target)` returns `True` because 4 and 4 add up to 8. Constraints - `nums` may contain both positive and negative integers. - `nums` may contain zeros. - The list `nums` can be empty, in which case the function should return `False`. - The elements in `nums` can repeat. - The list `nums` may have very large or very small integers. If `nums` is empty or contains less than two elements, the function should return `False`.","solution":"def find_pair_with_sum(nums, target): Returns True if there are two distinct elements in nums that add up to target. Otherwise, returns False. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Given a list of non-negative integers representing the heights of a series of candles, each candle can be blown out with a breath if its height is greater than or equal to a provided breath strength. Implement a function `candles_blowout(candles: List[int], breath_strength: int) -> int` that determines and returns the number of candles that can be blown out with a single breath. # Example: ```python candles = [3, 2, 1, 4, 3] breath_strength = 3 ``` For the above input, the function should return `3` since there are three candles with heights 3, 4, and 3 which are greater than or equal to the breath strength of 3. # Constraints: - The number of candles, `n`, will be between `1` and `1000`. - The heights of the candles will be between `0` and `10^6`.","solution":"from typing import List def candles_blowout(candles: List[int], breath_strength: int) -> int: Determines the number of candles that can be blown out with a breath. Parameters: candles (List[int]): A list of candle heights. breath_strength (int): The strength of the breath. Returns: int: The number of candles that can be blown out. return sum(1 for candle in candles if candle >= breath_strength)"},{"question":"Write a function that takes a string representing a sentence and returns a list of all words in the sentence that are palindromes. A palindrome is a word that reads the same backward as forward. For example, given the input sentence: \\"A man a plan a canal Panama wow racecar\\" The function should return: [\\"A\\", \\"a\\", \\"a\\", \\"wow\\", \\"racecar\\"] Note: The function should be case-sensitive, which means that \\"A\\" and \\"a\\" are considered different palindromes.","solution":"def find_palindromes(sentence): Returns a list of all words in the sentence that are palindromes. def is_palindrome(word): return word == word[::-1] words = sentence.split() palindromes = [word for word in words if is_palindrome(word)] return palindromes # Example Usage # sentence = \\"A man a plan a canal Panama wow racecar\\" # print(find_palindromes(sentence)) # Output: [\\"A\\", \\"a\\", \\"a\\", \\"wow\\", \\"racecar\\"]"},{"question":"In this challenge, you are required to implement a function named **word_compress** which aims to compress a given string. The function should take an input string and output a compressed version of the string by converting consecutive repeating characters into their respective counts followed by the character itself. **Guidelines**: - If a character appears consecutively more than once, it should be replaced by the number of times it appears followed by the character. - If a character appears only once, it should not be followed by any count. - The function should return the compressed string which should be in the form of counts and characters concatenated. **Examples**: ```python word_compress(\\"aaabbc\\") returns \\"3a2bc\\" word_compress(\\"abcd\\") returns \\"abcd\\" word_compress(\\"aabbccdd\\") returns \\"2a2b2c2d\\" word_compress(\\"aabbaa\\") returns \\"2a2b2a\\" ``` **Note**: The function should handle both uppercase and lowercase letters as distinct characters. It should also maintain the order of appearance of characters in the original string.","solution":"def word_compress(s): Compresses a given string by converting consecutive repeating characters into their respective counts followed by the character itself. Args: s (str): The input string to compress. Returns: str: The compressed version of the input string. if not s: return \\"\\" compressed = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: compressed.append(f\\"{count}{current_char}\\" if count > 1 else current_char) current_char = char count = 1 compressed.append(f\\"{count}{current_char}\\" if count > 1 else current_char) return \'\'.join(compressed)"},{"question":"Create a function `expand_to_palindrome` that takes a single string as input and returns the smallest number of characters that need to be appended to the end of the string to make it a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward. For example: ``` expand_to_palindrome(\\"race\\") -> 3 # Adding \\"car\\" to the end makes \\"racecar\\" expand_to_palindrome(\\"madam\\") -> 0 # It\'s already a palindrome expand_to_palindrome(\\"abc\\") -> 2 # Adding \\"ba\\" to the end makes \\"abcba\\" ``` Input: - You will receive a string with lowercase and uppercase letters only. - The string\'s length will be between 1 and 50 characters. Output: - Return the minimum number of characters required to make the string a palindrome.","solution":"def expand_to_palindrome(s): Returns the minimum number of characters that need to be appended to the end of the string to make it a palindrome. def is_palindrome(st): return st == st[::-1] if is_palindrome(s): return 0 for i in range(len(s)): sub_str = s[i:] if is_palindrome(sub_str): return i # This line should never be reached because in the worst case, adding len(s) - 1 characters will always make the string a palindrome return len(s) - 1"},{"question":"# Task You are given a list of positive integers. Your task is to find the sum of all even numbers in the list that are also prime numbers. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. The only even prime number is 2. Create a function that returns the sum of all even prime numbers in the input list. # Example For `lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`, the output should be `2` (since 2 is the only even prime number). For `lst = [11, 13, 17, 19, 23]`, the output should be `0` (no even prime numbers in the list). For `lst = [2, 4, 6, 8, 10, 12, 14, 16]`, the output should be `2` (2 is the only even prime number). # Input/Output - `[input]` list of integers `lst` A list of positive integers. `1 <= len(lst) <= 10^6` `1 <= lst[i] <= 10^9` - `[output]` an integer The sum of all even prime numbers in the list.","solution":"def sum_of_even_primes(lst): Returns the sum of all even prime numbers in the given list. # The only even prime number is 2 return 2 if 2 in lst else 0"},{"question":"You are tasked with managing a company\'s employee records. The company has n employees and each employee has a salary. Sometimes the HR department holds an event that either increases salaries for a group of employees, or changes the salary of a specific employee. You need to process a sequence of these events and determine the final salary of each employee. -----Input----- The first line contains a single integer n (1 le n le 2 cdot 10^{5}) — the number of employees. The next line contains n integers s_1, s_2, ..., s_n (0 le s_i le 10^{9}) — the initial salaries of the employees. The next line contains a single integer m (1 le m le 2 cdot 10^{5}) — the number of events. Each of the next m lines contains a single event. The events are given in chronological order. Each event is described as either \\"inc a b c\\" (1 le a le b le n, 1 le c le 10^{9}) meaning increase the salaries of employees from index a to b by c, or \\"set d e\\" (1 le d le n, 0 le e le 10^{9}) meaning set the salary of the d-th employee to e. -----Output----- Print n integers — the salaries of all employees after all events. -----Examples----- Input 3 4000 3000 2000 4 inc 1 2 500 set 3 3500 inc 2 3 1000 set 1 4000 Output 4000 4500 4500 Input 5 1000 2000 3000 4000 5000 3 inc 2 4 1000 set 5 6000 inc 1 5 500 Output 1500 3500 4500 5500 6500 -----Note----- In the first example the salaries change as follows: 4000 3000 2000 rightarrow 4500 3500 2000 rightarrow 4500 3500 3500 rightarrow 4500 4500 4500 rightarrow 4000 4500 4500 In the second example the salaries change as follows: 1000 2000 3000 4000 5000 rightarrow 1000 3000 4000 5000 5000 rightarrow 1000 3000 4000 5000 6000 rightarrow 1500 3500 4500 5500 6500","solution":"def manage_salaries(n, salaries, m, events): Processes a sequence of salary modification events and returns final salaries. :param int n: Number of employees :param list salaries: Initial salaries of the employees :param int m: Number of events :param list events: List of events (either \\"inc a b c\\" or \\"set d e\\") :return: Final salaries of all employees :rtype: list for event in events: details = event.split() if details[0] == \'inc\': a, b, c = int(details[1]), int(details[2]), int(details[3]) for i in range(a - 1, b): salaries[i] += c elif details[0] == \'set\': d, e = int(details[1]), int(details[2]) salaries[d - 1] = e return salaries"},{"question":"Write a function `longest_repeating_substring` that takes a single string `s` as input and returns the longest repeated substring in the given string. If there are multiple substrings with the same maximum length, return the one that appears first in the string. If no repeated substring is found, return an empty string. # Example ```python longest_repeating_substring(\\"banana\\") # returns \\"ana\\" longest_repeating_substring(\\"abcabcabc\\") # returns \\"abcabc\\" longest_repeating_substring(\\"abcd\\") # returns \\"\\" ``` # Explanation In the first example, the substring \\"ana\\" is the longest repeating substring as it appears twice in the string \\"banana\\". In the second example, the substring \\"abcabc\\" is the longest repeating substring. In the third example, there are no repeating substrings in the string \\"abcd\\". # Constraints - The input string `s` will consist of lowercase English letters. - The length of the input string `s` will be between 1 and 1000. # Function Signature ```python def longest_repeating_substring(s: str) -> str: pass ```","solution":"def longest_repeating_substring(s: str) -> str: Returns the longest repeating substring in the given string `s`. If there are multiple substrings with the same maximum length, returns the one that appears first in the string. If no repeated substring is found, returns an empty string. n = len(s) # Helper function to check if there is a repeated substring of given length def is_repeated_substring(k): seen = set() for i in range(n - k + 1): substr = s[i:i+k] if substr in seen: return substr seen.add(substr) return None # Binary search on the length of the substring left, right = 1, n - 1 result = \\"\\" while left <= right: mid = (left + right) // 2 repeated_substr = is_repeated_substring(mid) if repeated_substr: result = repeated_substr left = mid + 1 # Try to find a longer one else: right = mid - 1 # Try to find a shorter one return result"},{"question":"Given an array of integers nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements. Return k after placing the final result in the first k slots of nums. Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory. # Example 1: Input: nums = [1, 1, 2] Output: 2, nums = [1, 2, _] Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). # Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0, 1, 2, 3, 4, _, _, _, _, _] Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). # Constraints: - 0 <= nums.length <= 300 - -100 <= nums[i] <= 100 - nums is sorted in non-decreasing order.","solution":"def remove_duplicates(nums): Removes duplicates from sorted list nums in-place and returns the length of unique elements. if not nums: return 0 k = 1 # The length of unique elements for i in range(1, len(nums)): if nums[i] != nums[i-1]: nums[k] = nums[i] k += 1 return k"},{"question":"You are given a list of integers and you need to find the maximum product of two distinct elements from the list. Because the product can be very large, return the result modulo 10^9+7. # Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of integers in the list. - The second line contains N space-separated integers representing the elements of the list. # Output: For each test case, output a single integer, the maximum product of two distinct elements modulo 10^9+7. # Constraints: - 1 leq T leq 50 - 2 leq N leq 10^5 - -10^9 leq each integer in the list leq 10^9 # Sample Input: ``` 2 5 1 2 3 4 5 3 -10 -20 5 ``` # Sample Output: ``` 20 200 ``` # Explanation: In the first test case, the maximum product is 4 times 5 = 20. In the second test case, the maximum product is -10 times -20 = 200.","solution":"def max_product_modulo(test_cases): MODULO = 10**9 + 7 results = [] for case in test_cases: N, numbers = case numbers.sort() max_product = max(numbers[0] * numbers[1], numbers[-1] * numbers[-2]) results.append(max_product % MODULO) return results # Function to parse input and call the solution function def handle_input_output(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 numbers = list(map(int, data[index:index + N])) index += N test_cases.append((N, numbers)) results = max_product_modulo(test_cases) for result in results: print(result)"},{"question":"A Happy Number is a number which eventually reaches 1 when replaced by the sum of the square of each digit. For instance, 19 is a happy number because 1^2 + 9^2 = 82, and 8^2 + 2^2 = 68, and 6^2 + 8^2 = 100, and 1^2 + 0^2 + 0^2 = 1. On the other hand, numbers like 2 or 3 are not happy numbers because they loop infinitely in a cycle that does not include 1. Write a method is_happy(i) (in Haskell: isHappy :: Integer -> Bool) which returns whether or not i is a Happy Number.","solution":"def is_happy(i): Returns whether or not i is a happy number. def get_next(n): return sum(int(x) ** 2 for x in str(n)) slow = i fast = get_next(i) while fast != 1 and slow != fast: slow = get_next(slow) fast = get_next(get_next(fast)) return fast == 1"},{"question":"Write a function `raindrop_sound` which takes an integer as input and returns a string based on the following rules: - If the number has `3` as a factor, include `\\"Pling\\"` in the result. - If the number has `5` as a factor, include `\\"Plang\\"` in the result. - If the number has `7` as a factor, include `\\"Plong\\"` in the result. - If the number does not have any of `3`, `5`, or `7` as factors, return the number\'s digits as the result. # Examples: ```python raindrop_sound(28) # returns \\"Plong\\" raindrop_sound(30) # returns \\"PlingPlang\\" raindrop_sound(34) # returns \\"34\\" ``` # Constraints: - The input integer will be between `1` and `10^6`. # Function Signature: ```python def raindrop_sound(n: int) -> str: pass ``` # Hints: - Consider using modulus operator `%` to check for factors. - Build the result string by concatenating the appropriate sounds. - Ensure to handle edge cases where the input is very small or very large within the given range.","solution":"def raindrop_sound(n: int) -> str: result = \\"\\" if n % 3 == 0: result += \\"Pling\\" if n % 5 == 0: result += \\"Plang\\" if n % 7 == 0: result += \\"Plong\\" if result == \\"\\": return str(n) return result"},{"question":"You are given a matrix where each cell contains either a 0 or a 1. A group of connected 1\'s forms an island. Two 1\'s are connected if they are adjacent to each other horizontally or vertically (not diagonally). The boundary of each island connects with exactly one sea cell (0) at its perimeter. Your task is to determine the number of distinct islands in the matrix. Write a function that takes a binary matrix and returns the number of distinct islands. Example 1: Input: grid = [ [1,1,0,0,0], [1,1,0,0,0], [0,0,0,1,1], [0,0,0,1,1] ] Output: 2 Explanation: The grid contains two distinct islands. One island is formed by the 1’s in the top-left corner, and the other island is formed by the 1’s in the bottom-right corner. Example 2: Input: grid = [ [1,0,0,1], [1,0,0,1], [0,0,1,1], [1,1,0,0] ] Output: 3 Explanation: The grid contains three distinct islands. Note: - The input grid is a non-empty 2D binary matrix. - The dimensions of the grid are at most 50x50 for simplicity.","solution":"def num_islands(grid): def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return grid[x][y] = 0 dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) if not grid: return 0 island_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: dfs(i, j) island_count += 1 return island_count"},{"question":"Write a function that takes an integer `n` as input and returns the factorial of `n`. A factorial is defined as the product of all positive integers less than or equal to `n`. The factorial of 0 is defined to be 1. # Input: - An integer `n` which is guaranteed to be a non-negative integer. # Output: - An integer representing the factorial of `n`. # Example: ```python Input: factorial(5) Output: 120 Input: factorial(0) Output: 1 Input: factorial(10) Output: 3628800 ``` # Note: You may assume for this problem that the input will not be a large value that causes an integer overflow in your programming language of choice.","solution":"def factorial(n): Returns the factorial of n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Develop a function that takes a list of participants who wish to join a marathon and their registration times. Each participant is represented as a tuple (name, timestamp), where the name is a string and the timestamp is a string in the format \\"YYYY-MM-DD HH:MM:SS\\". Your function should determine the earliest and latest registration times, the total number of participants, and a sorted list of participants based on their registration times in ascending order. Implement the function `marathon_info(participants)` that accepts a list of such tuples and returns a dictionary with the following keys: - \\"total_participants\\" : the number of participants. - \\"earliest_registration\\" : the participant with the earliest registration time. - \\"latest_registration\\" : the participant with the latest registration time. - \\"sorted_participants\\" : a list of participants sorted by registration time in ascending order. You can assume that no two participants have the exact same registration time. Here’s an example input and the expected output: ```python participants = [ (\\"John Doe\\", \\"2023-01-15 10:09:45\\"), (\\"Jane Smith\\", \\"2023-01-15 09:45:21\\"), (\\"Emily Davis\\", \\"2023-01-16 08:30:00\\"), (\\"Michael Brown\\", \\"2023-01-14 12:01:33\\"), (\\"Chris Johnson\\", \\"2023-01-15 11:35:20\\"), ] marathon_info(participants) ``` Expected output: ```python { \\"total_participants\\": 5, \\"earliest_registration\\": (\\"Michael Brown\\", \\"2023-01-14 12:01:33\\"), \\"latest_registration\\": (\\"Emily Davis\\", \\"2023-01-16 08:30:00\\"), \\"sorted_participants\\": [ (\\"Michael Brown\\", \\"2023-01-14 12:01:33\\"), (\\"Jane Smith\\", \\"2023-01-15 09:45:21\\"), (\\"John Doe\\", \\"2023-01-15 10:09:45\\"), (\\"Chris Johnson\\", \\"2023-01-15 11:35:20\\"), (\\"Emily Davis\\", \\"2023-01-16 08:30:00\\"), ] } ``` # Constraints - All timestamps will be valid and in the correct format. - There will be at least one participant in the list. # Note Ensure that you manage and parse date-time strings appropriately and consider using the `datetime` module in Python to handle date-time comparisons and sorting.","solution":"from datetime import datetime def marathon_info(participants): participants_sorted = sorted(participants, key=lambda x: datetime.strptime(x[1], \\"%Y-%m-%d %H:%M:%S\\")) earliest_registration = participants_sorted[0] latest_registration = participants_sorted[-1] total_participants = len(participants) return { \\"total_participants\\": total_participants, \\"earliest_registration\\": earliest_registration, \\"latest_registration\\": latest_registration, \\"sorted_participants\\": participants_sorted }"},{"question":"Task Palindrome Partitioning Input A string `s`: ``` 1 <= len(s) <= 1000 ``` Output The minimum number of cuts needed to make every substring a palindrome. Description Given a string `s`, partition it such that every substring of the partition is a palindrome. Your task is to determine the minimum number of cuts needed to achieve this partitioning. A palindrome is a string that reads the same forward and backward. Example Input: ``` ababbbabbababa ``` Output: ``` 3 ``` Explanation: ``` We can partition the given string into: \\"a|babbbab|b|ababa\\" which has 3 cuts, and each substring is a palindrome. ```","solution":"def min_cut_palindrome_partition(s): Returns the minimum number of cuts needed to partition a string such that every substring is a palindrome. n = len(s) if n == 0: return 0 dp = [0] * n palindrome = [[False] * n for _ in range(n)] for i in range(n): min_cut = i for j in range(i + 1): if s[j] == s[i] and (i - j < 2 or palindrome[j + 1][i - 1]): palindrome[j][i] = True min_cut = 0 if j == 0 else min(min_cut, dp[j - 1] + 1) dp[i] = min_cut return dp[-1]"},{"question":"Your task is to develop a function to perform k-means clustering on a dataset. You will receive a dataset and the number of clusters, k. Your function should return the cluster centroids and the cluster labels for each data point. You should implement the k-means algorithm from scratch, ensuring that the chosen initial centroids, the update of centroids, and the assignment of data points to clusters follow the standard k-means process. Function signature: ```k_means_clustering(data, k)``` - `data`: A list of tuples, where each tuple represents a point in n-dimensional space (e.g., `[(x1, y1), (x2, y2), (x3, y3), ...]`). - `k`: An integer, the number of clusters. Return a tuple `(centroids, labels)`, where: - `centroids`: A list of tuples representing the coordinates of the cluster centroids. - `labels`: A list of integers where each integer represents the cluster index assigned to the corresponding data point in `data`. Constraints: - You should not use any external libraries such as numpy, pandas, scipy, or sklearn. - The calculation of distance can be done using Euclidean distance. Example: ```python data = [(1, 2), (1, 4), (1, 0), (4, 2), (4, 4), (4, 0)] k = 2 centroids, labels = k_means_clustering(data, k) ``` Output: ``` # Example centroids and labels (actual output may vary due to randomness in initial centroids selection) centroids = [(4.0, 2.0), (1.0, 2.0)] labels = [1, 1, 1, 0, 0, 0] ```","solution":"import random def euclidean_distance(point1, point2): return sum((x - y) ** 2 for x, y in zip(point1, point2)) ** 0.5 def get_initial_centroids(data, k): random_indices = random.sample(range(len(data)), k) return [data[idx] for idx in random_indices] def assign_clusters(data, centroids): clusters = [] for point in data: distances = [euclidean_distance(point, centroid) for centroid in centroids] clusters.append(distances.index(min(distances))) return clusters def update_centroids(data, labels, k): centroids = [] for i in range(k): cluster_points = [data[j] for j in range(len(data)) if labels[j] == i] centroid = tuple(sum(dim_values) / len(cluster_points) for dim_values in zip(*cluster_points)) centroids.append(centroid) return centroids def k_means_clustering(data, k): centroids = get_initial_centroids(data, k) labels = assign_clusters(data, centroids) while True: new_centroids = update_centroids(data, labels, k) new_labels = assign_clusters(data, new_centroids) if new_labels == labels: break centroids, labels = new_centroids, new_labels return centroids, labels"},{"question":"Write a function that takes a list of integers and an integer target value, and returns a tuple of two integers from the list that sum up to the target value. If no such pair exists, return `None`. Optimize for both time and space complexity. Example: ```python arr = [2, 7, 11, 15] target = 9 ``` Output: ```python (2, 7) ``` Example: ```python arr = [3, 2, 4] target = 6 ``` Output: ```python (2, 4) ``` Example: ```python arr = [3, 3] target = 6 ``` Output: ```python (3, 3) ``` Example: ```python arr = [1, 2, 3] target = 7 ``` Output: ```python None ```","solution":"def two_sum(arr, target): Returns a tuple of two integers from the list that sum up to the target value. If no such pair exists, return None. seen = {} for number in arr: complementary_number = target - number if complementary_number in seen: return (complementary_number, number) seen[number] = True return None"},{"question":"Given an array of integers, you need to find the length of the longest contiguous subarray where the difference between the maximum and minimum elements in that subarray is less than or equal to a given integer k. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line of the input contains n integers a_1, a_2, ..., a_n ( - 10^9 ≤ a_i ≤ 10^9) — the elements of the array. The third line of the input contains a single integer k (0 ≤ k ≤ 10^9), representing the maximum allowed difference between the maximum and minimum elements in the subarray. -----Output----- Print a single integer — the length of the longest contiguous subarray where the difference between the maximum and minimum elements is less than or equal to k. -----Examples----- Input 6 1 3 2 4 3 5 2 Output 4 Input 5 10 5 6 8 3 3 Output 3 -----Note----- In the first sample, the subarray [1, 3, 2, 4] has a maximum difference of 3, which is more than 2, so we cannot consider it. However, the subarray [3, 2, 4, 3] has a maximum difference of 2, which is allowed. In the second sample, the subarray [5, 6, 8] has a maximum difference of 3, which is allowed. Longer subarrays would exceed the allowed difference.","solution":"def longest_subarray_with_limit(nums, k): max_length = 0 start = 0 max_elem = min_elem = nums[0] for end in range(len(nums)): max_elem = max(max_elem, nums[end]) min_elem = min(min_elem, nums[end]) while max_elem - min_elem > k: start += 1 max_elem = max(nums[start:end+1]) min_elem = min(nums[start:end+1]) max_length = max(max_length, end - start + 1) return max_length"},{"question":"You have a list of integers representing daily temperatures. Write a function `warmer_days()` that calculates the number of days one would have to wait until a warmer temperature for each day. If there is no future day for which this is possible, the answer should be 0. ```python >>> temperatures = [73, 74, 75, 71, 69, 72, 76, 73] >>> warmer_days(temperatures) [1, 1, 4, 2, 1, 1, 0, 0] ``` The output should be a list of integers where each value corresponds to the number of days to wait for a warmer temperature, starting from that day.","solution":"def warmer_days(temperatures): Given a list of daily temperatures, returns a list indicating how many days one would have to wait to encounter a warmer temperature. If no warmer temperature is available in the future, the day\'s count will be 0. n = len(temperatures) result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_day = stack.pop() result[prev_day] = i - prev_day stack.append(i) return result"},{"question":"Design a function `list_depth :: Any -> int` that determines the depth of a nested list. The depth of a list is defined as the maximum depth of any nested list plus one. An empty list has a depth of 1. For example: ```python list_depth([]) # must be 1 list_depth([1, 2, 3]) # must be 1 list_depth([1, [2, 3], 4]) # must be 2 list_depth([1, [2, [3, 4], 5], 6]) # must be 3 list_depth([1, [2, [3, [4, 5]]]]) # must be 4 ``` Your function should be able to handle various depths of nested lists and return the correct depth.","solution":"def list_depth(lst): Determines the depth of a nested list. if not isinstance(lst, list): return 0 max_depth = 0 for item in lst: max_depth = max(max_depth, list_depth(item)) return max_depth + 1"},{"question":"A delivery company has N delivery orders (numbered 1 through N) to be completed by its fleet of trucks. Each delivery order i needs to be delivered from a starting point (x_{i1}, y_{i1}) to an ending point (x_{i2}, y_{i2}). Each truck can carry only one delivery order at a time and moves in the 2D Cartesian coordinate system. The trucks can move horizontally or vertically one unit at a time. The company wants to assign the orders to its trucks in such a way that the total distance traveled by all trucks combined to complete all deliveries is minimized. Can you help the company determine this minimum total distance? -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - N lines follow. Each of these lines contains four space-separated integers x_{i1}, y_{i1}, x_{i2}, and y_{i2} denoting the coordinates of the starting and ending points of the i-th delivery order. -----Output----- For each test case, print a single integer on a new line ― the minimum total distance the trucks need to travel to complete all deliveries. -----Constraints----- - 1 le T le 5 - 1 le N le 10^5 - |x_{i1}|, |y_{i1}|, |x_{i2}|, |y_{i2}| le 10^9 for each valid i - the sum of N over all test cases does not exceed 10^5 -----Example Input----- 1 3 0 0 1 1 2 2 3 3 4 4 5 5 -----Example Output----- 6 -----Explanation----- Example case 1: One optimal way to complete the deliveries is: - Truck 1 picks up the first order at (0, 0) and delivers to (1, 1) with a distance of 2 units. - Truck 2 picks up the second order at (2, 2) and delivers to (3, 3) with a distance of 2 units. - Truck 3 picks up the third order at (4, 4) and delivers to (5, 5) with a distance of 2 units. The total distance traveled by all trucks combined is 2 + 2 + 2 = 6 units.","solution":"def delivery_minimum_distance(test_cases): results = [] for test_case in test_cases: total_distance = 0 for order in test_case: x1, y1, x2, y2 = order distance = abs(x2 - x1) + abs(y2 - y1) total_distance += distance results.append(total_distance) return results def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 test_case = [] for _ in range(N): x1, y1, x2, y2 = map(int, input_lines[index].split()) test_case.append((x1, y1, x2, y2)) index += 1 test_cases.append(test_case) return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"Rita recently decided to install a new alarm system that tracks the entry and exit of people into her house using a smart sensor system. The sensor logs the exact time (in seconds since midnight) when a person enters or exits. Given that each person can only enter and exit once, Rita wants to know the maximum number of people present in her house at any given time during the day. You are given a list of entry and exit times for various people. Your task is to write a function that determines the maximum number of people in the house at any time. # Input - The first line of input contains a single integer `n` (1 ≤ n ≤ 1000), the number of people. - Each of the next `n` lines contains two integers `entry_i` and `exit_i` (0 ≤ entry_i < exit_i ≤ 86400) which represent the entry and exit times of the i-th person. # Output - Output a single integer representing the maximum number of people present in the house at any given time. # Example Input ``` 3 1 4 2 6 5 8 ``` Output ``` 2 ``` # Note In the example above: - At time 1, one person is in the house. - At time 2, two people are in the house. - At time 4, one person leaves, so only one person is in the house. - At time 5, two people are in the house again. - The peak number of people is 2.","solution":"def max_people_in_house(n, intervals): Determine the maximum number of people in the house at any given time. Args: - n (int): Number of people. - intervals (List[Tuple[int, int]]): List of tuples, where each tuple contains entry and exit times. Returns: - int: Maximum number of people present at any given time. events = [] for entry, exit in intervals: events.append((entry, 1)) # 1 indicates entering events.append((exit, -1)) # -1 indicates exiting events.sort() # Sort events by time, if times are same, exits come before entries current_people = 0 max_people = 0 for time, event in events: current_people += event if current_people > max_people: max_people = current_people return max_people"},{"question":"Write a function that takes a Roman numeral string and converts it to an integer. The input string is guaranteed to represent a valid Roman numeral from 1 to 3999 (inclusive). Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Example 1: Input: \\"III\\" Output: 3 Example 2: Input: \\"IV\\" Output: 4 Example 3: Input: \\"IX\\" Output: 9 Example 4: Input: \\"LVIII\\" Output: 58 Explanation: L = 50, V = 5, III = 3. Example 5: Input: \\"MCMXCIV\\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90, IV = 4.","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. :param s: A string representing a Roman numeral :return: An integer representation of the Roman numeral roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"Given an array of integers, rearrange it such that all even numbers appear before all odd numbers. Maintain the relative order of the even and odd numbers as they appear in the original array. For example: Example 1: Input: [3, 1, 2, 4] Output: [2, 4, 3, 1] Example 2: Input: [6, 3, 4, 1, 5, 2] Output: [6, 4, 2, 3, 1, 5] Example 3: Input: [1, 1, 1, 1] Output: [1, 1, 1, 1] Example 4: Input: [2, 4, 6, 8] Output: [2, 4, 6, 8] Constraints: - The array contains only non-negative integers. - The length of the array is between 1 and 10000. Your task is to implement a function `rearrangeArray(nums: List[int]) -> List[int]` that performs the rearrangement described above.","solution":"def rearrangeArray(nums): Rearranges the array such that all even numbers appear before all odd numbers, while maintaining the relative order of both even and odd numbers as they appear in the original array. Parameters: nums (List[int]): The input array of non-negative integers. Returns: List[int]: The rearranged array with all even numbers first, followed by odd numbers. evens = [x for x in nums if x % 2 == 0] odds = [x for x in nums if x % 2 != 0] return evens + odds"},{"question":"A delivery company operates along a straight road with n stations. Each station is numbered from 1 to n from left to right. The company has several delivery points, where parcels need to be picked up and dropped off. A delivery order includes: - The pickup station `p_i` (1 ≤ p_i ≤ n) - The delivery station `d_i` (1 ≤ d_i ≤ n) - The reward `r_i` for completing the delivery (1 ≤ r_i ≤ 10^9) - The time `t_i` by which delivery must be completed (1 ≤ t_i ≤ 10^9) If the delivery is not completed by time `t_i`, the reward is forfeited. The delivery robot starts at any station and can move up to `s` distance units per unit time (1 ≤ s ≤ n). The task is to determine the maximum reward that can be collected with optimal delivery and movement strategy. Note that it is allowed to carry multiple deliveries at the same time and the robot can start at any station at initial time (time equals to 1). -----Input----- The first line contains three integers n, m, s (1 ≤ n ≤ 150000; 1 ≤ m ≤ 300; 1 ≤ s ≤ n). Each of the next m lines contains four integers p_i, d_i, r_i, t_i (1 ≤ p_i, d_i ≤ n; 1 ≤ r_i ≤ 10^9; 1 ≤ t_i ≤ 10^9). Each line describes a delivery request. It is guaranteed that the times t_i are given in non-decreasing order. -----Output----- Print a single integer — the maximum reward that can be collected by completing the deliveries optimally. -----Examples----- Input 10 2 3 1 5 100 10 6 10 200 15 Output 300 Input 15 3 2 3 8 500 10 5 12 1000 20 9 15 700 30 Output 2200","solution":"def max_reward(n, m, s, deliveries): # Sort deliveries by delivery time deliveries.sort(key=lambda x: x[3]) # dp[i] means the maximum reward up to the i-th delivery dp = [0] * (m + 1) # Precompute travel time between any two stations def travel_time(a, b): return abs(a - b) // s + (1 if abs(a - b) % s != 0 else 0) for i in range(1, m + 1): pickup, dropoff, reward, time = deliveries[i-1] # Start from any point at time 1 dp[i] = max(dp[i], reward) for j in range(i): prev_pickup, prev_dropoff, prev_reward, prev_time = deliveries[j-1] if j > 0 else (0, 0, 0, 0) move_time = travel_time(prev_dropoff if j > 0 else dropoff, pickup) if prev_time + move_time <= time: dp[i] = max(dp[i], dp[j] + reward) return max(dp) # Test cases for the solution if __name__ == \\"__main__\\": n, m, s = 10, 2, 3 deliveries = [(1, 5, 100, 10), (6, 10, 200, 15)] print(max_reward(n, m, s, deliveries)) # Output: 300 n, m, s = 15, 3, 2 deliveries = [(3, 8, 500, 10), (5, 12, 1000, 20), (9, 15, 700, 30)] print(max_reward(n, m, s, deliveries)) # Output: 2200"},{"question":"Sam is a highly skilled cryptographer who loves to work with numerical sequences. He has been tasked to solve a problem involving a very peculiar sequence. The sequence `S` is defined by the following properties: - `S[1] = 1` - For even index `i = 2k`, `S[i] = S[k]` - For odd index `i = 2k + 1`, `S[i] = S[k] + S[k + 1]` Given an integer `N`, help Sam find the value of `S[N]`. -----Constraints----- - 1 leq N leq 10^9 -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the value of `S[N]`. -----Sample Input----- 7 -----Sample Output----- 4 Explanation: To compute the value of S[7], we can follow the sequence definitions: - S[1] = 1 - S[2] = S[1] = 1 - S[3] = S[1] + S[2] = 1 + 1 = 2 - S[4] = S[2] = 1 - S[5] = S[2] + S[3] = 1 + 2 = 3 - S[6] = S[3] = 2 - S[7] = S[3] + S[4] = 2 + 1 = 3","solution":"def find_S(N): Finds the value of S[N] according to the given sequence definition. if N == 1: return 1 # Using a dictionary to store computed values memo = {1: 1} # Helper function to calculate S(i) using memoization def S(i): if i in memo: return memo[i] if i % 2 == 0: memo[i] = S(i // 2) else: k = (i - 1) // 2 memo[i] = S(k) + S(k + 1) return memo[i] return S(N)"},{"question":"Implement a WordDictionary class that supports adding new words and finding if a string matches any previously added string. Your WordDictionary class should have the following methods: WordDictionary() Initializes the object. void addWord(word) Adds a word into the data structure. bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots ‘.’ which can represent any letter. Example 1: Input [\\"WordDictionary\\",\\"addWord\\",\\"addWord\\",\\"search\\",\\"search\\",\\"search\\",\\"search\\"] [[],[\\"bad\\"],[\\"dad\\"],[\\"pad\\"],[\\"bad\\"],[\\".ad\\"],[\\"b..\\"]] Output [null,null,null,false,true,true,true] Explanation: WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\\"bad\\"); // Adds \\"bad\\" to the dictionary wordDictionary.addWord(\\"dad\\"); // Adds \\"dad\\" to the dictionary wordDictionary.search(\\"pad\\"); // Returns false as \\"pad\\" is not a match wordDictionary.search(\\"bad\\"); // Returns true as \\"bad\\" is a match wordDictionary.search(\\".ad\\"); // Returns true as \\"bad\\" and \\"dad\\" match the pattern wordDictionary.search(\\"b..\\"); // Returns true as \\"bad\\" matches the pattern Constraints: 1 <= word.length <= 500 word in addWord consists of lowercase English letters. word in search consists of \'.\' or lowercase English letters. There will be at most 3 * 104 calls to addWord and search.","solution":"import collections class WordDictionary: def __init__(self): self.trie = {} def addWord(self, word): node = self.trie for char in word: if char not in node: node[char] = {} node = node[char] node[\'#\'] = True def search(self, word): def search_in_node(word, node): for i, char in enumerate(word): if char not in node: if char == \'.\': for x in node: if x != \'#\' and search_in_node(word[i + 1:], node[x]): return True return False else: node = node[char] return \'#\' in node return search_in_node(word, self.trie)"},{"question":"You are given an encoded string where each character can be multiple consecutive repetitions of substrings. For example, \'3[a2[c]]\' means \'acccacccaccc\'. Write a function to decode such strings. Function Signature: `def decode_string(encoded_str: str) -> str:` # Input - `encoded_str`: a string containing encoded sequences. (1 ≤ length of encoded_str ≤ 1000) # Output - Return the decoded string. # Examples ```python decode_string(\\"3[a2[c]]\\") == \\"accaccacc\\" decode_string(\\"2[abc]3[cd]ef\\") == \\"abcabccdcdcdef\\" decode_string(\\"10[a]\\") == \\"aaaaaaaaaa\\" ``` # Constraints - You can assume that the input is always a valid encoded string. - There will be no nested encoded strings beyond the second level, i.e., \\"3[a2[b3[c]]]\\" is not valid.","solution":"def decode_string(encoded_str: str) -> str: Decodes the given encoded string. stack = [] current_num = 0 current_str = \\"\\" for char in encoded_str: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_str, current_num)) current_str, current_num = \\"\\", 0 elif char == \']\': prev_str, num = stack.pop() current_str = prev_str + num * current_str else: current_str += char return current_str"},{"question":"You are given an integer array `nums`. Your task is to rearrange the elements such that all even numbers are at the beginning of the array followed by all odd numbers. The relative order of the even and odd numbers should remain the same as in the original array. - Input: - An array of integers `nums` where 1 <= `nums.length` <= 1000 and each element `nums[i]` is a non-negative integer. - Output: - An array with the same elements of `nums` but rearranged so that all even numbers come before any odd numbers, while maintaining the relative order of the even and odd numbers. Example: ```python Input: [3, 1, 2, 4] Output: [2, 4, 3, 1] Input: [0, 1, 2] Output: [0, 2, 1] ```","solution":"def rearrange_even_odd(nums): Rearrange the array such that all even numbers come before any odd numbers, while maintaining the relative order of the even and odd numbers. even_nums = [num for num in nums if num % 2 == 0] odd_nums = [num for num in nums if num % 2 != 0] return even_nums + odd_nums"},{"question":"You are given an array of integers representing the height of buildings on a street from left to right. Your task is to determine the minimum number of buildings that need to be reduced in height to ensure no three buildings in a row have an increasing sequence of height. You can only shorten a building\'s height, not increase it. ```Python For example: shorten([3, 4, 5, 3, 2]) == 1 because we can shorten the building with height 5 to 4, making the sequence [3, 4, 4, 3, 2]. shorten([1, 2, 3, 4, 5]) == 2 because we should change the heights to [1, 2, 2, 2, 2]. shorten([5, 5, 5]) == 0 because there’s no increasing sequence of three buildings. shorten([5, 3, 4, 2, 6, 7, 5]) == 1 because we should change the heights to [5, 3, 4, 2, 6, 6]. ``` Return the minimum number of changes needed to prevent any three consecutive buildings from having increasing heights. If the array already meets the requirement, return 0. More examples in the test cases. Good luck!","solution":"def shorten(buildings): This function takes a list of integers representing the heights of buildings and returns the minimum number of buildings that need to be reduced in height in order to ensure no three consecutive buildings have an increasing sequence of height. if len(buildings) < 3: return 0 count = 0 for i in range(2, len(buildings)): if buildings[i] > buildings[i-1] > buildings[i-2]: count += 1 if buildings[i] - buildings[i-1] < buildings[i-1] - buildings[i-2]: buildings[i] = buildings[i-1] else: buildings[i-1] = buildings[i-2] return count"},{"question":"Develop a function called `max_gap` that takes a list of integers and returns the maximum gap between consecutive elements when the list is sorted. If the list has fewer than 2 elements, return 0. # Examples ```python max_gap([3, 6, 9, 1]) ==> 3 # Sorted list: [1, 3, 6, 9] => Max gap between: (6-3) = 3 max_gap([10]) ==> 0 # List has fewer than 2 elements max_gap([9, 7, 3, 2, 4, 1]) ==> 3 # Sorted list: [1, 2, 3, 4, 7, 9] => Max gap between: (7-4) = 3 ```","solution":"def max_gap(nums): Returns the maximum gap between consecutive elements in the sorted list of integers. If the list has fewer than 2 elements, return 0. if len(nums) < 2: return 0 nums.sort() max_gap = 0 for i in range(1, len(nums)): max_gap = max(max_gap, nums[i] - nums[i - 1]) return max_gap"},{"question":"Design a function to convert a given integer to a Roman numeral. Write a function called `int_to_roman` that receives an integer and returns its corresponding Roman numeral as a string. The input integer is guaranteed to be between 1 and 3999, inclusive. Use the following table for reference: | Integer | Roman Numeral | |---------|---------------| | 1 | I | | 4 | IV | | 5 | V | | 9 | IX | | 10 | X | | 40 | XL | | 50 | L | | 90 | XC | | 100 | C | | 400 | CD | | 500 | D | | 900 | CM | | 1000 | M | Example: - `int_to_roman(3)` should return `\\"III\\"`. - `int_to_roman(58)` should return `\\"LVIII\\"`. - `int_to_roman(1994)` should return `\\"MCMXCIV\\"`.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. :param num: int, an integer between 1 and 3999 inclusive :return: str, the Roman numeral representation of the input integer val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \'M\', \'CM\', \'D\', \'CD\', \'C\', \'XC\', \'L\', \'XL\', \'X\', \'IX\', \'V\', \'IV\', \'I\' ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"Implement a function `unique_elements` which receives a list of integers `[a1, a2, ..., an]` and returns a new list of integers `[b1, b2, ..., bk]` such that each element in the output list is unique and the order of elements in the input list is preserved. That is, for every element that appears multiple times in the input list, only the first occurrence is kept in the output list. # Examples: ```python # Example 1 unique_elements([1, 2, 2, 3, 4, 4, 5]) # Output: [1, 2, 3, 4, 5] # Example 2 unique_elements([10, 20, 10, 30, 20, 20, 30, 40, 50, 50]) # Output: [10, 20, 30, 40, 50] # Example 3 unique_elements([7, 5, 9, 1, 5, 9, 7, 1]) # Output: [7, 5, 9, 1] # Example 4 unique_elements([100]) # Output: [100] ``` # Constraints: - The input list will have at most 1000 integers. - Each integer in the input list will be between -10^6 and 10^6. # Function Signature: ```python def unique_elements(lst: List[int]) -> List[int]: pass ``` # Note: - Focus on time and space complexity for an efficient solution.","solution":"def unique_elements(lst): Removes duplicates from the input list while preserving order of first occurrences. Args: lst (List[int]): A list of integers which may contain duplicates. Returns: List[int]: A list of integers with duplicates removed, maintaining the order of first occurrences. seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"In a list of integers, the i-th integer represents the height of a building. You are tasked with finding the number of buildings that have an unobstructed view to the west. A building has an unobstructed view to the west if, and only if, there are no taller buildings to its west. Return the number of buildings that have an unobstructed view to the west. Example 1: Input: [3, 7, 8, 3, 6, 1] Output: 3 Explanation: Buildings with heights 8, 6, and 1 have an unobstructed view to the west. Example 2: Input: [1, 2, 3, 4] Output: 4 Explanation: All buildings have an unobstructed view to the west. Note: 1 <= heights.length <= 100000 1 <= heights[i] <= 100000","solution":"def count_unobstructed_view(heights): Returns the number of buildings that have an unobstructed view to the west. :param heights: List of integers representing the heights of the buildings. :return: Integer count of buildings with an unobstructed view to the west. max_height = 0 count = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"Create a function that calculates the Josephus position. The Josephus problem is a theoretical problem related to a certain elimination game. There are `n` people standing in a circle, and they are counted off in a fixed number `k`. Every `k-th` person is removed from the circle and the counting resumes from the next person. The process continues until only one person remains. Your task is to find and return the position of the last person standing in the circle given the initial number of people `n` and the counting number `k`. # Function Signature: ```python def josephus_position(n: int, k: int) -> int: ``` # Input: - `n` (1 ≤ `n` ≤ 1,000,000): an integer representing the initial number of people standing in the circle. - `k` (1 ≤ `k` ≤ 1,000,000): an integer representing the fixed number at which people are counted off and removed. # Output: - An integer representing the position of the last person standing (1-based index). # Examples: ```python josephus_position(7, 3) # returns 4 josephus_position(5, 2) # returns 3 josephus_position(6, 1) # returns 6 ``` # Explanation: Consider the first example with `n = 7` and `k = 3`: - Starting with the first person, every third person is eliminated. - The elimination order is: 3, 6, 2, 7, 5, 1. - The last remaining person is in position 4. Your function should efficiently compute the position of the last person remaining.","solution":"def josephus_position(n: int, k: int) -> int: Returns the position of the last person standing in the Josephus problem. Parameters: n (int): The initial number of people standing in the circle. k (int): The fixed number at which people are counted off and removed. Returns: int: The position of the last person standing (1-based index). if n == 1: return 1 else: return (josephus_position(n - 1, k) + k - 1) % n + 1"},{"question":"Phoebe loves prime numbers and she wants to generate them in a unique way. She has a function `is_prime(x)` that returns `True` if `x` is a prime number and `False` otherwise. She wants you to help her by writing a function `generate_primes(n)` that generates a list of the first `n` prime numbers in ascending order. However, there is a twist! The list should be generated such that the sum of the primes in the list does not exceed `S`. If achieving this constraint is not possible with `n` primes, return an empty list. Function Signature: ```python def generate_primes(n: int, S: int) -> List[int]: pass ``` -----Input:----- - An integer `n` which represents the number of prime numbers to generate. - An integer `S` which represents the maximum allowable sum of the primes. -----Output:----- A list of the first `n` prime numbers in ascending order such that their sum does not exceed `S`. If this constraint cannot be met, return an empty list. -----Constraints----- - 1 leq n leq 1000 - 1 leq S leq 10^6 -----Example Input:----- ```python generate_primes(5, 28) ``` -----Example Output:----- ```python [2, 3, 5, 7, 11] ``` -----Example Input:----- ```python generate_primes(5, 15) ``` -----Example Output:----- ```python [] ``` -----Explanation:----- - In the first example, the first 5 prime numbers are [2, 3, 5, 7, 11]. Their sum is 28, which is permissible. - In the second example, the first 5 prime numbers cannot have a sum of ≤ 15. The closest sum with any 5 primes is 28, which exceeds the limit. Thus, the output is an empty list.","solution":"from typing import List def is_prime(x: int) -> bool: if x <= 1: return False if x == 2: return True if x % 2 == 0: return False for i in range(3, int(x**0.5) + 1, 2): if x % i == 0: return False return True def generate_primes(n: int, S: int) -> List[int]: primes = [] num = 2 current_sum = 0 while len(primes) < n: if is_prime(num): if current_sum + num > S: return [] primes.append(num) current_sum += num num += 1 return primes"},{"question":"Anna is working with a huge dataset of integers, and she is particularly interested in finding patterns related to divisibility. Given a list of N integers, she wants to know, for each element in the list, how many other elements in the list can divide it without leaving a remainder. You need to help Anna by writing a program that answers this question for each element in the list. -----Input----- - The first line of the input contains a single integer N (1 ≤ N ≤ 100,000), representing the number of elements in the list. - The second line contains N space-separated integers a1, a2, ..., aN (1 ≤ ai ≤ 10^6), representing the elements of the list. -----Output----- - The output should contain N space-separated integers. The i-th integer in the output should be the count of elements in the list that can divide the i-th element in the input list without leaving a remainder. -----Example Input----- 5 2 3 4 6 8 -----Example Output----- 1 1 2 3 3 -----Explanation----- - For the first element (2), only 1 element (itself) can divide it. - For the second element (3), only 1 element (itself) can divide it. - For the third element (4), 2 elements (2 and 4) can divide it. - For the fourth element (6), 3 elements (2, 3, and 6) can divide it. - For the fifth element (8), 3 elements (2, 4, and 8) can divide it.","solution":"def count_divisors(arr): For each element in the list, returns how many other elements in the list can divide it without leaving a remainder. n = len(arr) result = [] for i in range(n): count = 0 for j in range(n): if arr[i] % arr[j] == 0: count += 1 result.append(count) return result # Example usage: # print(count_divisors([2, 3, 4, 6, 8])) # Output should be [1, 1, 2, 3, 3]"},{"question":"You are given a string which represents a sentence. The sentence may contain multiple spaces between the words, leading and trailing spaces. Your task is to write a function that returns the words in the sentence in reverse order but without leading, trailing, and multiple spaces between words. For example: ``` Input: \\" Hello world! \\" Output: \\"world! Hello\\" ``` Note: - The output should contain only a single space between words. - The words should be in the original order relative to each other but reversed in the final output.","solution":"def reverse_words(sentence): Returns the words in the sentence in reverse order, without leading, trailing, and multiple spaces between words. # Split the sentence into words words = sentence.strip().split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list into a single string with single spaces between words return \' \'.join(reversed_words)"},{"question":"Given an array of integers nums containing n integers and an integer k, find the maximum possible sum of a subarray with at most k distinct elements. Example: Given nums = [1, 2, 1, 2, 3, 4, 5] and k = 2. The maximum possible sum of a subarray with at most 2 distinct elements is 9. (The subarray is [2, 3, 4])","solution":"from collections import defaultdict def max_sum_subarray(nums, k): Finds the maximum possible sum of a subarray with at most k distinct elements. Parameters: nums (list of int): The input array of integers. k (int): The maximum number of distinct elements allowed in the subarray. Returns: int: The maximum possible sum of the subarray. n = len(nums) if n == 0 or k == 0: return 0 left = 0 right = 0 max_sum = 0 current_sum = 0 count = defaultdict(int) while right < n: count[nums[right]] += 1 current_sum += nums[right] while len(count) > k: count[nums[left]] -= 1 current_sum -= nums[left] if count[nums[left]] == 0: del count[nums[left]] left += 1 max_sum = max(max_sum, current_sum) right += 1 return max_sum"},{"question":"Given an integer array of length N, write a program to find the smallest positive integer that is missing from the array. -----Input----- The first line contains an integer T, the total number of test cases. Each test case starts with an integer N, the number of elements in the array. The next line contains N space-separated integers denoting the elements of the array. -----Output----- For each test case, display the smallest positive integer that is missing from the array in a new line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - -1000 ≤ Array Elements ≤ 1000 -----Example----- Input 2 5 3 4 -1 1 4 1 2 0 3 Output 2 4","solution":"def find_missing_positive(arr): Finds the smallest positive integer that is missing from the array `arr`. arr = [num for num in arr if num > 0] arr = set(arr) smallest_missing = 1 while smallest_missing in arr: smallest_missing += 1 return smallest_missing def process_test_cases(test_cases): Processes a list of test cases to find the smallest missing positive integer for each. results = [] for case in test_cases: N, arr = case result = find_missing_positive(arr) results.append(result) return results"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to determine the minimum number of characters to change to make `s` a \\"good\\" string. A \\"good\\" string is defined as a string where no two adjacent characters are the same. Return the minimum number of character changes needed. Example 1: Input: s = \\"aab\\" Output: 1 Explanation: You can replace the second \'a\' with \'c\' to get \\"abc\\" which is a good string. Example 2: Input: s = \\"aaaa\\" Output: 3 Explanation: You have to change three \'a\'s to make the string good. For example, \\"abab\\" or \\"acac\\" would be good strings. Example 3: Input: s = \\"abcdef\\" Output: 0 Explanation: The input string is already good. Constraints: 1. 1 <= s.length <= 10^5 2. s consists of only lowercase English letters.","solution":"def min_changes_to_good(s): Returns the minimum number of character changes needed to make the string s a \\"good\\" string. A \\"good\\" string is defined as a string where no two adjacent characters are the same. changes = 0 for i in range(1, len(s)): if s[i] == s[i-1]: changes += 1 return changes"},{"question":"Create a function that simulates the behavior of a simple vending machine. The vending machine can dispense items and give change. It should take as input: 1. A list of items available in the vending machine. Each item is represented by a tuple containing the item\'s name, price, and quantity (e.g., (\\"Soda\\", 1.25, 10)). 2. The amount of money the user inputs. The function should then: 1. Display the list of items to the user. 2. Allow the user to select an item by its name. 3. Dispense the item if the user has inserted enough money and if the item is available. Update the inventory accordingly. 4. Return the change to the user if any, or a message indicating insufficient funds. 5. If the selected item is out of stock, display an appropriate message. The function should return a tuple containing: - A string message indicating the result of the transaction (e.g., \\"Dispensed Soda\\", \\"Not enough money\\", \\"Out of stock\\"). - The remaining money after the transaction. - The updated inventory list. Here is the function signature: ```python def vending_machine(items: list, money: float) -> tuple: # Your code here pass ``` # Example ```python items = [(\\"Soda\\", 1.25, 10), (\\"Chips\\", 0.99, 5), (\\"Candy\\", 0.75, 12)] money = 5.00 vending_machine(items, money) ``` Possible Responses: - If the user selects \\"Soda\\": - Return: (\\"Dispensed Soda\\", 3.75, [(\\"Soda\\", 1.25, 9), (\\"Chips\\", 0.99, 5), (\\"Candy\\", 0.75, 12)]) - If the user selects \\"Chips\\": - Return: (\\"Dispensed Chips\\", 4.01, [(\\"Soda\\", 1.25, 10), (\\"Chips\\", 0.99, 4), (\\"Candy\\", 0.75, 12)]) - If the user tries to purchase an item with insufficient funds (e.g., 0.50 for a 0.75 item): - Return: (\\"Not enough money\\", 5.00, [(\\"Soda\\", 1.25, 10), (\\"Chips\\", 0.99, 5), (\\"Candy\\", 0.75, 12)]) - If the selected item is out of stock: - Return: (\\"Out of stock\\", 5.00, [(\\"Soda\\", 1.25, 10), (\\"Chips\\", 0.99, 5), (\\"Candy\\", 0.75, 12)])","solution":"def vending_machine(items: list, money: float, selection: str) -> tuple: Simulates a vending machine transaction. :param items: List of tuples representing items (name, price, quantity) :param money: The amount of money inserted by the user :param selection: The name of the item the user wants to purchase :return: Tuple containing result message, remaining money, and updated items list for index, (name, price, quantity) in enumerate(items): if name == selection: if quantity == 0: return (\\"Out of stock\\", money, items) elif money < price: return (\\"Not enough money\\", money, items) else: items[index] = (name, price, quantity - 1) return (f\\"Dispensed {name}\\", money - price, items) return (\\"Item not found\\", money, items)"},{"question":"Design a function `find_largest_unique_substring()` that takes a single string argument `s` and returns the largest substring without repeating characters. If there are multiple substrings with the same length, return the one which appears first. Here is a detailed breakdown of how your function should work: 1. Analyze the given string to find the longest substring which contains only unique characters. 2. If there are multiple substrings with the same length, the one which starts earliest in the string should be returned. # Examples - Example 1: ```python find_largest_unique_substring(\\"abcabcbb\\") # Output: \\"abc\\" ``` Explanation: The answer is \\"abc\\", with the length of 3. - Example 2: ```python find_largest_unique_substring(\\"bbbbb\\") # Output: \\"b\\" ``` Explanation: The answer is \\"b\\", with the length of 1. - Example 3: ```python find_largest_unique_substring(\\"pwwkew\\") # Output: \\"wke\\" ``` Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is not a substring. # Constraints - The input string `s` will have at most length `10^5`. - The string consists of printable ASCII characters. # Function Signature ```python def find_largest_unique_substring(s: str) -> str: pass ```","solution":"def find_largest_unique_substring(s: str) -> str: Returns the largest substring without repeating characters. If there are multiple substrings with the same length, the one which starts earliest in the string should be returned. start = 0 max_length = 0 longest_substring = \\"\\" seen_chars = {} for end, char in enumerate(s): if char in seen_chars and seen_chars[char] >= start: start = seen_chars[char] + 1 seen_chars[char] = end if end - start + 1 > max_length: max_length = end - start + 1 longest_substring = s[start:end+1] return longest_substring"},{"question":"Jane is organizing a charity event where participants will form teams. To ensure fairness, she wants all teams to be of equal size. Given a list of participant names and a desired number of teams, write a function `organize_teams(names, k)` that returns a list of lists, where each nested list contains the names of participants assigned to that team. If it\'s not possible to form teams of equal size with the given number of participants and teams, the function should return an empty list. #Constraints: - `1 <= len(names) <= 10^6` - `1 <= k <= len(names)` #Example: ``` names = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\", \\"Frank\\"] k = 3 organize_teams(names, k) --> [[\\"Alice\\", \\"Bob\\"], [\\"Charlie\\", \\"David\\"], [\\"Eve\\", \\"Frank\\"]] names = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\"] k = 2 organize_teams(names, k) --> [] names = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\"] k = 2 organize_teams(names, k) --> [[\\"Alice\\", \\"Bob\\"], [\\"Charlie\\", \\"David\\"]] ``` #Hint: Ensure to consider edge cases where the number of participants is not exactly divisible by the number of teams.","solution":"def organize_teams(names, k): Organizes participants into k teams of equal size if possible. Parameters: names (list): A list of participant names. k (int): Desired number of teams. Returns: list: A list of lists containing participant names for each team, or an empty list if it\'s not possible to organize teams of equal size. n = len(names) # Check if the total number of names can be evenly divided by k teams if n % k != 0: return [] team_size = n // k teams = [] for i in range(k): team = names[i * team_size : (i + 1) * team_size] teams.append(team) return teams"},{"question":"The new manager at a game development company has introduced a new gaming feature involving critical thinking and pathfinding. The objective is to navigate through a grid-based game where players must collect treasures while avoiding obstacles. The grid is represented as a matrix, where each cell can contain either a treasure, an obstacle, or be empty. The player can move up, down, left, or right, but not diagonally, and cannot pass through obstacles. Your task is to determine the maximum number of treasures that can be collected starting from a given initial position and ending at a target position, while adhering to the movement constraints. The initial and target positions will be provided as part of the input, along with the number of treasures each cell contains. -----Input:----- - The first line contains two integers M and N, representing the number of rows and columns in the grid, respectively. - The next M lines contain N characters each, representing the grid. Each character can be: - \'.\' (an empty cell), - \'#\' (an obstacle), or - \'T\' (a treasure). - The next line provides two integers x_1 and y_1, the starting position of the player. - The last line provides two integers x_2 and y_2, the target position the player must reach. -----Output:----- - Your output should be a single integer, the maximum number of treasures that can be collected on the way from the start position to the target position. If it is not possible to reach the target position, output -1. -----Constraints----- - 1 leq M, N leq 1000. - 0 leq number of treasures leq 1000 - The grid is guaranteed to contain at least one \'.\' cell. - 1 leq x_1, y_1, x_2, y_2 leq M, N -----Sample Input----- 5 5 .T... .#.#. ..T.. #T# ...T. 1 1 5 5 -----Sample Output----- 3","solution":"from collections import deque def max_treasures_collected(grid, start, end): M = len(grid) N = len(grid[0]) x1, y1 = start x2, y2 = end # Possible directions to move (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the start or end positions are obstacles if grid[x1][y1] == \\"#\\" or grid[x2][y2] == \\"#\\": return -1 # BFS Queue: store (x, y, number_of_treasures) queue = deque([(x1, y1, 0 if grid[x1][y1] != \'T\' else 1)]) visited = {(x1, y1)} while queue: x, y, treasures = queue.popleft() # If we reached the end if (x, y) == (x2, y2): return treasures for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) new_treasures = treasures + (1 if grid[nx][ny] == \'T\' else 0) queue.append((nx, ny, new_treasures)) # If we exhaust the queue and haven\'t found the end, return -1 return -1 def main(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) grid = [] index = 2 for i in range(M): grid.append(data[index]) index += 1 start = (int(data[index]) - 1, int(data[index + 1]) - 1) end = (int(data[index + 2]) - 1, int(data[index + 3]) - 1) print(max_treasures_collected(grid, start, end)) if __name__ == \\"__main__\\": main()"},{"question":"Create a function `debouncer()` which is useful in controlling the rate at which a function is called, especially in response to high-frequency events such as keystrokes or scrolling. This technique is known as \\"debouncing.\\" The `debouncer()` function should take another function `func` and a delay time in milliseconds `wait`, and return a new, debounced version of `func`. The debounced function should, when called, postpone its actual execution until `wait` milliseconds have passed since the last time the debounced function was invoked. **Example** ```python def log_message(message): print(message) debounced_log = debouncer(log_message, 2000) debounced_log(\\"Hello, world!\\") # This will get executed after 2 seconds. ``` If during the 2-second interval, `debounced_log` is called again: ```python debounced_log(\\"Message 1\\") debounced_log(\\"Message 2\\") ``` The original `log_message` function should only be executed once with the most recent message: ``` Message 2 ``` **Requirements:** 1. The debounced function should have the same signature as the original function. 2. If the debounced function is called multiple times with different arguments within the `wait` period, only the last set of arguments should be passed to the original function when it is eventually called. 3. Implement this in a way that the solution is not specific to a particular types of functions, it should be a generic debouncer. **Note:** For the purpose of this question, we are simplifying the problem and not considering the integration of asynchronous execution or concurrency control which may be required in real-world scenarios. **Example Usage:** ```python import time # Mock time.sleep to progress simulation def sleep_mock(seconds): # Simulating the time sleep without actually waiting for the number of seconds. pass time.sleep = sleep_mock if __name__ == \\"__main__\\": def log_message(message): print(message) debounced_log = debouncer(log_message, 2000) # Initial call, should wait 2 seconds before logging debounced_log(\\"Initial message\\") # More calls within the 2-second window, should only log the last message after 2 seconds. debounced_log(\\"Intermediate message 1\\") debounced_log(\\"Intermediate message 2\\") # Simulating elapsed time by calling sleep time.sleep(2) # Should only see \\"Intermediate message 2\\" ``` Your task is to implement the function `debouncer`.","solution":"import time from threading import Timer def debouncer(func, wait): Takes a function `func` and a delay time in milliseconds `wait`. Returns a new debounced version of `func`. wait = wait / 1000.0 # Convert milliseconds to seconds timer = None last_args = None last_kwargs = None def debounced_function(*args, **kwargs): nonlocal timer, last_args, last_kwargs last_args = args last_kwargs = kwargs if timer is not None: timer.cancel() timer = Timer(wait, lambda: func(*last_args, **last_kwargs)) timer.start() return debounced_function # Example Usage (uncomment to test) # if __name__ == \\"__main__\\": # def log_message(message): # print(message) # debounced_log = debouncer(log_message, 2000) # debounced_log(\\"Hello, world!\\") # This will get executed after 2 seconds. # time.sleep(1) # debounced_log(\\"Message 1\\") # time.sleep(1) # debounced_log(\\"Message 2\\")"},{"question":"Given a grid with dimensions m x n and an initial position (x, y) representing the starting point of a robot. The robot can move up, down, left, or right, but it avoids certain obstacle cells. The grid has the following properties: - An empty cell is represented by 0. - An obstacle cell is represented by 1. - The robot starts in an empty cell. Write a function `minDistance(grid: List[List[int]], startX: int, startY: int, targetX: int, targetY: int) -> int` that returns the minimum number of steps required to move from the initial position (x, y) to the target position (targetX, targetY). If it is not possible to reach the target cell, return -1. Examples: Example 1: Input: grid = [ [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0] ], startX = 0, startY = 0, targetX = 4, targetY = 4 Output: 8 Explanation: The robot can move as follows: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (4, 1) -> (4, 2) -> (4, 3) -> (4, 4) Example 2: Input: grid = [ [0, 1, 0], [0, 1, 0], [0, 0, 0] ], startX = 0, startY = 0, targetX = 2, targetY = 2 Output: 4 Explanation: The robot can move as follows: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) Example 3: Input: grid = [ [0, 0], [0, 1], [0, 0] ], startX = 0, startY = 0, targetX = 2, targetY = 0 Output: 2 Note: - The grid dimensions will be in the range [1, 100]. - The robot will always start on an empty cell. - All coordinates are zero-based.","solution":"from collections import deque from typing import List, Tuple def minDistance(grid: List[List[int]], startX: int, startY: int, targetX: int, targetY: int) -> int: if not grid or grid[startX][startY] == 1 or grid[targetX][targetY] == 1: return -1 # Directions for movements: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue for BFS and the visited set queue = deque([(startX, startY, 0)]) # (x, y, steps) visited = set((startX, startY)) while queue: x, y, steps = queue.popleft() # If the target is reached, return the number of steps if (x, y) == (targetX, targetY): return steps for dx, dy in directions: newX, newY = x + dx, y + dy if 0 <= newX < len(grid) and 0 <= newY < len(grid[0]) and grid[newX][newY] == 0 and (newX, newY) not in visited: visited.add((newX, newY)) queue.append((newX, newY, steps + 1)) return -1"},{"question":"# Network Packet Analysis You are given a list of network packet logs. Each entry in the log represents a packet sent or received with a specific timestamp, source IP, destination IP, and packet size. Your task is to analyze the logs and find the IP address with the highest amount of data being sent. The IP address should be returned along with the total amount of data it has sent. Your task: findTopSender() Write a function, `findTopSender(logs)`, which takes as input a list of dictionaries representing the packet logs and returns a tuple containing the IP address and the total amount of data sent by that IP address. The logs are in the format: ```python logs = [ {\\"timestamp\\": \\"2023-10-01T12:00:00\\", \\"src\\": \\"192.168.1.1\\", \\"dst\\": \\"192.168.1.2\\", \\"size\\": 500}, {\\"timestamp\\": \\"2023-10-01T12:00:05\\", \\"src\\": \\"192.168.1.2\\", \\"dst\\": \\"192.168.1.1\\", \\"size\\": 300}, {\\"timestamp\\": \\"2023-10-01T12:00:10\\", \\"src\\": \\"192.168.1.1\\", \\"dst\\": \\"192.168.1.3\\", \\"size\\": 700}, {\\"timestamp\\": \\"2023-10-01T12:00:15\\", \\"src\\": \\"192.168.1.3\\", \\"dst\\": \\"192.168.1.1\\", \\"size\\": 100}, ] ``` # Example ```python logs = [ {\\"timestamp\\": \\"2023-10-01T12:00:00\\", \\"src\\": \\"192.168.1.1\\", \\"dst\\": \\"192.168.1.2\\", \\"size\\": 500}, {\\"timestamp\\": \\"2023-10-01T12:00:05\\", \\"src\\": \\"192.168.1.2\\", \\"dst\\": \\"192.168.1.1\\", \\"size\\": 300}, {\\"timestamp\\": \\"2023-10-01T12:00:10\\", \\"src\\": \\"192.168.1.1\\", \\"dst\\": \\"192.168.1.3\\", \\"size\\": 700}, {\\"timestamp\\": \\"2023-10-01T12:00:15\\", \\"src\\": \\"192.168.1.3\\", \\"dst\\": \\"192.168.1.1\\", \\"size\\": 100}, ] result = findTopSender(logs) print(result) > (\\"192.168.1.1\\", 1200) ``` Considerations - IP addresses can be both IPv4 and IPv6. - The function should handle empty logs by returning `None`. Try it with some larger sets of logs to ensure performance.","solution":"def findTopSender(logs): Finds the IP address with the highest amount of data sent from the given logs. :param logs: List of dictionaries representing the packet logs :return: A tuple (IP, total_data) representing the IP address and the total amount of data sent if not logs: return None data_sent = {} for log in logs: src_ip = log[\'src\'] size = log[\'size\'] if src_ip in data_sent: data_sent[src_ip] += size else: data_sent[src_ip] = size # Find the IP with the maximum data sent top_sender_ip = max(data_sent, key=data_sent.get) return top_sender_ip, data_sent[top_sender_ip]"},{"question":"You are given a linked list with n nodes that contains distinct integers. Construct a new linked list by rearranging the nodes such that for any non-empty subset of nodes, the sum of their values in the original list is not equal to the sum of their values in the new list. -----Input----- The first line contains one integer n (1 ≤ n ≤ 22) — the number of nodes in the linked list. The second line contains n space-separated distinct integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 10^9) — the values of the nodes in the linked list. -----Output----- If there is no such linked list, print -1. Otherwise, print n space-separated integers corresponding to the values of the nodes in the new linked list. The output must be a permutation of the input list. If there are multiple answers, print any of them. -----Examples----- Input 2 1 2 Output 2 1 Input 4 1000 100 10 1 Output 100 1 1000 10 -----Note----- A permutation of a list means reordering the elements such that the new list contains exactly the same elements as the original list, but possibly in a different order. Note that the empty subset and the subset containing all nodes are not counted.","solution":"def rearrange_linked_list(n, node_values): # If the list has 1 node, there is no valid rearrangement possible if n == 1: return -1 # Sort the list to prevent ordered sums being equal node_values.sort() # Swap first and the last element in sorted list node_values[0], node_values[-1] = node_values[-1], node_values[0] return node_values"},{"question":"Task: Multi-Dimensional Weather Data Analysis You are working on a system that analyzes multi-dimensional weather data. You need to calculate various statistics from the data collected over several days. The data is represented as a three-dimensional list `weather_data` of dimensions `n x m x d`: - `n`: Number of weather parameters (e.g., temperature, humidity, wind speed, etc.) - `m`: Number of different locations - `d`: Number of days Each element in `weather_data` is a floating-point number representing the measurement of a specific weather parameter at a specific location on a specific day. You are required to implement functions that retrieve the required statistics given the dataset. **Requirements:** 1. Function `average_by_parameter(location_index, parameter_index)`: computes the average value of a specific weather parameter for a given location over all the days. 2. Function `max_by_day(location_index)`: retrieves the maximum value for each parameter of a specific location for every day. 3. Function `min_by_parameter(parameter_index)`: finds the minimum value of a specific weather parameter across all locations and all days. **Constraints:** - `n` ranges from 1 to 10 - `m` ranges from 1 to 5 - `d` ranges from 1 to 365 - `weather_data[i][j][k]` is a floating-point number between `-100.0` and `100.0` # Examples Given the `weather_data`: ``` weather_data = [ [ # temperature [25.0, 24.5], # location 0 [26.1, 25.2] # location 1 ], [ # humidity [60.5, 62.1], # location 0 [65.2, 63.3] # location 1 ] ] ``` - `average_by_parameter(0, 0)` returns 24.75 (average temperature at location 0 over 2 days) - `max_by_day(0)` returns [25.0, 62.1] (maximum values for all parameters by day across all days at location 0) - `min_by_parameter(1)` returns 60.5 (minimum humidity over all locations and days) # Function Signatures ```python def average_by_parameter(location_index: int, parameter_index: int) -> float: pass def max_by_day(location_index: int) -> list: pass def min_by_parameter(parameter_index: int) -> float: pass ```","solution":"# Define weather_data as a global variable for testing purposes weather_data = [ [ # temperature [25.0, 24.5], # location 0 [26.1, 25.2] # location 1 ], [ # humidity [60.5, 62.1], # location 0 [65.2, 63.3] # location 1 ] ] def average_by_parameter(location_index: int, parameter_index: int) -> float: Computes the average value of a specific weather parameter for a given location over all the days. sum_values = sum(weather_data[parameter_index][location_index]) count_days = len(weather_data[parameter_index][location_index]) return sum_values / count_days def max_by_day(location_index: int) -> list: Retrieves the maximum value for each parameter of a specific location for every day. max_values = [] for parameter in weather_data: max_values.append(max(parameter[location_index])) return max_values def min_by_parameter(parameter_index: int) -> float: Finds the minimum value of a specific weather parameter across all locations and all days. min_value = float(\'inf\') for location in weather_data[parameter_index]: min_value = min(min_value, min(location)) return min_value"},{"question":"You are given a list of integers. Write a function to find the maximum product of any three numbers in the list. Return the maximum product value. **Function Signature:** ```python def max_product_of_three(nums: List[int]) -> int: ``` **Input:** - A list of integers `nums` where the length of `nums` is at least 3 and all integers fit in the signed 32-bit integer range. **Output:** - An integer representing the maximum product of any three numbers in the list. **Example:** ```python assert max_product_of_three([1, 2, 3]) == 6 assert max_product_of_three([-10, -10, 5, 2]) == 500 ``` **Constraints:** - The length of the list `nums` is between 3 and 10^4. - All the numbers in the input list `nums` are between -10^3 and 10^3. **Explanation:** For the given `nums` list, you need to calculate the maximum possible product of any three numbers from the list. You can assume that the list has at least three elements, and all the integers in the list fit within a 32-bit signed integer range. The solution should be efficient given the potential size of the list.","solution":"from typing import List def max_product_of_three(nums: List[int]) -> int: Returns the maximum product of any three numbers in the given list of integers. nums.sort() # The maximum product is either from the three largest numbers # or from the two smallest numbers (negative) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Create a function that computes the maximum difference between any two elements in an array after applying a fixed transformation to each element. The transformation applied to each element is defined as: [ f(x) = a cdot x + b ] where `a` and `b` are given parameters. # Function Signature ```python def max_transformed_difference(arr: List[int], a: int, b: int) -> int: ``` # Inputs - `arr`: A list of integers which needs to have a length of at least 2 and at most 10^5. - `a`: An integer that is the coefficient used in the transformation. - `b`: An integer to be added during the transformation. # Outputs - Return the maximum difference between any two transformed elements from the array. # Example ```python arr = [1, 5, 3, -2] a = 2 b = 3 max_transformed_difference(arr, a, b) # The transformed elements would be: # f(1) = 2*1 + 3 = 5 # f(5) = 2*5 + 3 = 13 # f(3) = 2*3 + 3 = 9 # f(-2) = 2*(-2) + 3 = -1 # The maximum difference between these transformed elements is: # 13 - (-1) = 14 # So the result should be 14 ``` # Constraints - The length of `arr` ( n ) is such that ( 2 leq n leq 10^5 ) - Values of each element in `arr`, `a`, and `b` are within the range (-10^4) to (10^4)","solution":"from typing import List def max_transformed_difference(arr: List[int], a: int, b: int) -> int: Computes the maximum difference between any two elements in an array after applying the transformation f(x) = a * x + b to each element. # Apply the transformation to each element transformed = [a * x + b for x in arr] # Find the maximum and minimum values in the transformed list max_val = max(transformed) min_val = min(transformed) # The maximum difference will be the difference between the max and min values return max_val - min_val"},{"question":"Write a function that calculates the Greatest Common Divisor (GCD) of two given integers and then, given a list of integers, replaces each element with the GCD of that element and the next element in the array. The function should return the modified array. 2 ≤ len(array) ≤ 10^5 1 ≤ array[i] ≤ 10^9 Examples ``` gcdTransform([24, 36, 48, 72]) # returns [12, 12, 24, 72] gcdTransform([5, 10, 15, 20]) # returns [5, 5, 5, 20] ``` Notes - Utilize the Euclidean algorithm for efficient computation of GCD. - The last element in the array remains unchanged.","solution":"from math import gcd def gcd_transform(array): Given a list of integers, replace each element with the GCD of that element and the next element in the array. The last element remains unchanged. n = len(array) for i in range(n - 1): array[i] = gcd(array[i], array[i+1]) return array"},{"question":"You are given a string representing a mathematical operation that only involves addition and subtraction of single-digit integers. The string contains digits (0-9), plus signs (+), and minus signs (-) without any spaces. Your task is to evaluate the result of this operation and return the final value as an integer. For example: - If the input string is \\"3+5-2\\", the output should be 6. - If the input string is \\"9-6+1\\", the output should be 4. Write a function `evaluate_expression(expression: str) -> int` that takes a string `expression` containing a valid mathematical expression and returns the evaluated result as an integer. **Function Signature:** ```python def evaluate_expression(expression: str) -> int: pass ``` **Examples:** ```python evaluate_expression(\\"3+5-2\\") # Output: 6 evaluate_expression(\\"9-6+1\\") # Output: 4 evaluate_expression(\\"0+0-0+1\\") # Output: 1 evaluate_expression(\\"7+3-1-2+4\\") # Output: 11 ```","solution":"def evaluate_expression(expression: str) -> int: Evaluates a string mathematical expression consisting of single-digit integers, plus signs (+), and minus signs (-) without any spaces. Args: expression (str): A string containing a valid mathematical expression. Returns: int: The evaluated result of the expression. total = 0 current_number = 0 sign = 1 # 1 for positive, -1 for negative for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) elif char == \'+\': total += sign * current_number current_number = 0 sign = 1 elif char == \'-\': total += sign * current_number current_number = 0 sign = -1 total += sign * current_number return total"},{"question":"# Task You are given a string containing a mix of letters and numbers. Your task is to ensure every letter in the string alternates between uppercase and lowercase, starting with uppercase. The numbers should remain in their original positions. # Example For the string `a1b2c3D4`, the output should be `A1b2C3d4`. ``` String: \\"a1b2c3D4\\" Process: \\"A1\\" -> \\"A1b\\" -> \\"A1b2\\" -> \\"A1b2C\\" -> \\"A1b2C3\\" -> \\"A1b2C3d\\" -> \\"A1b2C3d4\\" ``` For the string `3zXy5W9`, the output should be `3ZxY5w9`. ``` String: \\"3\\" -> \\"3Z\\" -> \\"3Zx\\" -> \\"3ZxY\\" -> \\"3ZxY5\\" -> \\"3ZxY5w\\" -> \\"3ZxY5w9\\" ``` # Input/Output ```if-not:sql - `[input]` string `inputString` A non-empty string consisting of alphanumeric characters. Constraints: `1 ≤ inputString.length ≤ 1000`. - `[output]` a string The transformed string where each letter alternates between uppercase and lowercase, starting with uppercase, and numbers remain in their original positions. ``` ```if:sql Input ~~~ --------------------------------- | Table | Column | Type | |-------------+--------------+--------| | transform | input_string | varchar| --------------------------------- ~~~ # Columns * `input_string`: A non-empty string consisting of alphanumeric characters. Constraints: `1 ≤ input_string.length ≤ 1000`. Output ~~~ ------------------------- | Column | Type | |------------+----------| | id | int | | output_str | varchar | ------------------------- ~~~ `output_str` is the transformed string where each letter alternates between uppercase and lowercase, starting with uppercase, and numbers remain in their original positions. ```","solution":"def alternate_case(input_string): Transforms the input string such that letters alternate in case, starting with uppercase, and numbers remain in their original position. result = [] upper = True # Start with uppercase for char in input_string: if char.isalpha(): if upper: result.append(char.upper()) else: result.append(char.lower()) upper = not upper # Toggle case else: result.append(char) return \'\'.join(result)"},{"question":"Given an initial array A of size N, you need to process Q queries. In each query, you will perform one of the following operations: - **1 X V**: Update the X-th element of the array to V. - **2 L R**: Find the smallest element in the subarray from index L to R (inclusive). -----Input----- The first line of input contains two space-separated integers N and Q denoting the size of the array and number of queries respectively. The second line contains N space-separated integers representing the elements of the array A. Each of the next Q lines contains a query in one of the formats described above. -----Output----- For each query of type \\"2 L R\\", print a single integer - the smallest element in the subarray from L to R. -----Constraints----- - 1 ≤ N, Q ≤ 100000 - 1 ≤ A[i], V ≤ 10^9 - 1 ≤ L, R, X ≤ N - 1 ≤ Query Type ∈ {1, 2} -----Example----- Input: 5 3 1 3 5 7 9 2 2 4 1 3 2 2 1 5 Output: 3 1 ---Explanation--- - The initial array is [1, 3, 5, 7, 9]. - The first query is \\"2 2 4\\", which asks for the minimum element from index 2 to 4. The subarray is [3, 5, 7], and the minimum is 3. - The second query is \\"1 3 2\\", which updates the 3rd element to 2. The array becomes [1, 3, 2, 7, 9]. - The third query is \\"2 1 5\\", which asks for the minimum element from index 1 to 5. The subarray is [1, 3, 2, 7, 9], and the minimum is 1.","solution":"def process_queries(N, Q, A, queries): Processes the given queries on the array A. Parameters: N (int): size of the array Q (int): number of queries A (list): initial array queries (list of tuples): list of queries Returns: list: results of the queries of type \\"2 L R\\" results = [] for query in queries: if query[0] == 1: # Update operation _, X, V = query A[X-1] = V # Update the X-th element to V elif query[0] == 2: # Minimum in subarray operation _, L, R = query results.append(min(A[L-1:R])) # Append the minimum element from L to R subarray return results"},{"question":"Write a function `find_largest_even` that takes a list of integers as an argument and returns the largest even number from the list. If there are no even numbers, the function should return `None`. The function should not use built-in functions like `max()` to find the largest even number. Example: ```python find_largest_even([1, 2, 3, 4, 5, 6]) # Should return 6 find_largest_even([7, 5, 3, 1]) # Should return None find_largest_even([8, 10, 2, 4]) # Should return 10 ```","solution":"def find_largest_even(lst): Returns the largest even number from the list of integers. If there are no even numbers, return None. largest_even = None for num in lst: if num % 2 == 0: if largest_even is None or num > largest_even: largest_even = num return largest_even"},{"question":"You are asked to build a synchronization logging system for an online video streaming platform. When a user watches a video, various events (play, pause, stop, etc.) are logged and must be synchronized with the server. Each event has a timestamp in milliseconds and belongs to one of the multiple users watching the video. You are given the following data structure: ``` [ {\\"userId\\": \\"user1\\", \\"events\\": [\\"play:1000\\", \\"pause:5000\\", \\"play:8000\\"]}, {\\"userId\\": \\"user2\\", \\"events\\": [\\"play:2000\\", \\"pause:9000\\", \\"stop:10000\\"]} ] ``` Each event string contains an event name followed by a colon and a timestamp indicating when the event occurred. Your task is to merge all the events from all users into a single chronological list and then output this list in the following format: ``` [\\"user1:play:1000\\", \\"user2:play:2000\\", \\"user1:pause:5000\\", \\"user1:play:8000\\", \\"user2:pause:9000\\", \\"user2:stop:10000\\"] ``` (Note: The events within each user\'s list are in chronological order, but you\'ll need to merge all the users\' events together.) Write a function `merge_events(events_log)` that takes in the described data structure and returns a list of merged events in chronological order in the specified format.","solution":"def merge_events(events_log): Merges all the events from multiple users into a single chronological list. :param events_log: List of dictionaries containing userId and their events. :return: List of merged events in chronological order. merged_events = [] for user in events_log: user_id = user[\'userId\'] for event in user[\'events\']: event_name, timestamp = event.split(\':\') merged_events.append((int(timestamp), f\\"{user_id}:{event_name}:{timestamp}\\")) # Sort events based on their timestamp (first element of the tuple) merged_events.sort(key=lambda x: x[0]) # Return the sorted event strings return [event[1] for event in merged_events]"},{"question":"Design a function `min_operations(s: str, t: str) -> int` that calculates the minimum number of operations needed to convert string `s` into string `t`. The only allowed operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character. You may assume that both input strings consist of lowercase English letters only. # Input: - A string `s` of length `n` (1 leq n leq 1000). - A string `t` of length `m (1 leq m leq 1000). # Output: - An integer representing the minimum number of operations required to convert `s` to `t`. # Example: **Input:** ``` s = \\"kitten\\" t = \\"sitting\\" ``` **Output:** ``` 3 ``` **Explanation:** 1. Replace \'k\' with \'s\' -> \\"sitten\\" 2. Replace \'e\' with \'i\' -> \\"sittin\\" 3. Insert \'g\' at the end -> \\"sitting\\" # Note: - The function should use dynamic programming to efficiently compute the result within the given constraints. - Ensure the implementation is optimal in both time and space complexity.","solution":"def min_operations(s: str, t: str) -> int: Calculate the minimum number of operations needed to convert string `s` into string `t` using the allowed operations (insert, delete, replace). n = len(s) m = len(t) # DP table where dp[i][j] represents the minimum operations to convert s[:i] to t[:j] dp = [[0] * (m + 1) for _ in range(n + 1)] # Initializing the table for base cases for i in range(n + 1): dp[i][0] = i # Deleting all characters in \'s\' for j in range(m + 1): dp[0][j] = j # Inserting all characters of \'t\' # Fill the DP table for i in range(1, n + 1): for j in range(1, m + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no new operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Replacement return dp[n][m]"},{"question":"Given a list of integers, write a function `median_filter(arr, k)` that returns a new list where each element at index `i` is the median of the `k` elements centered at `i` in the input list. If the list has fewer than `k` elements, return the original list. Assume `k` is always an odd number and the input list contains enough elements to apply the filter. For example, given `arr = [1, 2, 3, 4, 5]` and `k = 3`, the function should return `[1, 2, 3, 4, 5]` because: - The median of `[1, 2, 3]` is `2` - The median of `[2, 3, 4]` is `3` - The median of `[3, 4, 5]` is `4` Thus, the filtered list will be `[2, 3, 4]`. Write a function `median_filter(arr, k)` that takes a list of integers and an integer `k` and returns the filtered list.","solution":"def median_filter(arr, k): Returns a new list where each element at index `i` is the median of the `k` elements centered at `i` in the input list. if len(arr) < k: return arr def median(lst): Returns the median of the list `lst`. lst_sorted = sorted(lst) mid = len(lst_sorted) // 2 return lst_sorted[mid] half_k = k // 2 filtered_list = [] for i in range(half_k, len(arr) - half_k): window = arr[i - half_k:i + half_k + 1] filtered_list.append(median(window)) return filtered_list"},{"question":"Linova is planning a grand celebration for her kingdom. The celebration will include a parade that passes through certain cities in the kingdom. There are n cities and n-1 roads connecting pairs of cities, where each road has a certain length. The cities are numbered from 1 to n, and the capital of the kingdom is city 1. The kingdom thus has a tree structure. She has decided that the parade will start from the capital and pass through a sequence of cities such that each city is visited exactly once and the final city in the sequence is a leaf city. The total length of the parade route is the sum of the lengths of the roads used. Linova wants to know the maximum possible total length of a parade route that starts at the capital and ends at a leaf city. Can you help Linova find this maximum parade length? -----Input----- The first line contains an integer n (2 le n le 10^5) — the number of cities in the kingdom. Each of the next n-1 lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^4), denoting there is a road connecting city u and city v with length w. It is guaranteed that from any city, you can reach any other city by the roads. -----Output----- Print the only line containing a single integer — the maximum possible total length of a parade route from the capital to a leaf city. -----Examples----- Input 7 1 2 3 1 3 2 2 4 4 2 5 1 3 6 8 6 7 3 Output 13 Input 4 1 2 3 2 3 4 2 4 5 Output 9 -----Note----- In the first example, the longest parade route is from the capital city 1 to leaf city 7. The route is 1 rightarrow 3 rightarrow 6 rightarrow 7 with a total length of 2 + 8 + 3 = 13. In the second example, the longest parade route is from the capital city 1 to leaf city 4. The route is 1 rightarrow 2 rightarrow 4 with a total length of 3 + 5 = 8.","solution":"from collections import defaultdict def find_max_parade_length(n, roads): def dfs(node, parent): max_length = 0 for neighbor, weight in adj[node]: if neighbor != parent: max_length = max(max_length, dfs(neighbor, node) + weight) return max_length # Read input data adj = defaultdict(list) for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) # Start DFS from the capital city (1) max_parade_length = dfs(1, -1) return max_parade_length # This helper function is just to encapsulate input parsing/formatting logic def parse_input_and_find_max_parade_length(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) roads = [list(map(int, line.split())) for line in lines[1:]] return find_max_parade_length(n, roads)"},{"question":"I need to organize a marathon event and keep track of each participant\'s total running time. Every participant will run 5 stages, and I will record the time taken for each stage in minutes as a string. I want to calculate the total time taken by each participant to complete the marathon. For example: * If a participant runs the 5 stages in the following times: \\"12\\", \\"15\\", \\"14\\", \\"13\\", \\"16\\", their total time would be: 12 + 15 + 14 + 13 + 16 = 70. Please help me automate this calculation. Task Overview Complete the function which accepts a list of strings representing the times taken for each stage and returns the total time taken by the participant to complete the marathon. The list will always contain exactly 5 strings, each representing a time in minutes.","solution":"def total_marathon_time(stage_times): Calculates the total time taken by a participant to complete the marathon. Parameters: stage_times (list of str): List of 5 strings, each representing the time taken for a single stage in minutes. Returns: int: The total time in minutes. return sum(int(time) for time in stage_times)"},{"question":"You are tasked with developing a software system for the city of Metropolis to monitor and manage its public transportation network. The network consists of buses that operate on predefined routes. Each route is represented as a sequence of bus stops, each identified by a unique integer. Occasionally, due to maintenance or other issues, certain buses need to be temporarily rerouted. Your task is to handle rerouting requests efficiently and to determine the new sequence of bus stops for any given route. -----Input----- The input begins with an integer r (1 leq r leq 10^4) representing the number of routes. Each of the next r lines represents a route, starting with an integer n_i (1 leq n_i leq 10^5) representing the number of bus stops in route i, followed by n_i space-separated integers b_{i1}, b_{i2}, ..., b_{in_i} (1 leq b_{ij} leq 10^6) representing the bus stops in route i in order. The next line contains an integer q (1 leq q leq 10^5) representing the number of rerouting requests. Each of the next q lines contains a rerouting request in the format: route_index start_stop end_stop where: - route_index (1 leq route_index leq r) is the index of the route to be modified. - start_stop and end_stop (1 leq start_stop, end_stop leq n_{route_index}) specify the start and end of the subsegment to be reversed. It is guaranteed that start_stop leq end_stop for all requests. -----Output----- For each route, output a single line containing its sequence of bus stops after all rerouting requests have been processed. If there are no requests for a route, output the bus stops as they were initially provided. -----Examples----- Input: 3 5 1 2 3 4 5 4 6 7 8 9 6 10 11 12 13 14 15 3 1 2 4 2 1 4 3 3 6 Output: 1 4 3 2 5 9 8 7 6 10 11 15 14 13 12 Input: 2 3 1 2 3 3 4 5 6 1 1 1 3 Output: 3 2 1 4 5 6","solution":"def reroute_routes(r, routes, q, requests): for req in requests: route_index, start_stop, end_stop = req routes[route_index - 1][start_stop - 1:end_stop] = reversed(routes[route_index - 1][start_stop - 1:end_stop]) return routes # Example usage: # r = 3 # routes = [ # [1, 2, 3, 4, 5], # [6, 7, 8, 9], # [10, 11, 12, 13, 14, 15] # ] # q = 3 # requests = [ # (1, 2, 4), # (2, 1, 4), # (3, 3, 6) # ] # Uncomment below line to test the example usage # print(reroute_routes(r, routes, q, requests))"},{"question":"Write a function `detect_substring_anagram` that checks if an anagram of a given pattern exists as a substring within a given string. * The function should take two parameters: a string `s` and a pattern `p`. * The function should return a boolean indicating if there exists an anagram of the pattern in the given string. **Further points:** * An anagram is a rearrangement of the characters of a word to form a new word. * Substring length must match the pattern length. * Both the string and the pattern consist only of lowercase alphabetic characters. # Example `detect_substring_anagram(\\"cbaebabacd\\", \\"abc\\")` should return `True` because \\"cba\\" and \\"bac\\" are both anagrams of \\"abc\\". `detect_substring_anagram(\\"af\\", \\"be\\")` should return `False` because there is no substring in \\"af\\" that is an anagram of \\"be\\".","solution":"def detect_substring_anagram(s, p): from collections import Counter len_s = len(s) len_p = len(p) if len_p > len_s: return False p_counter = Counter(p) window_counter = Counter(s[:len_p]) if p_counter == window_counter: return True for i in range(len_p, len_s): window_counter[s[i]] += 1 window_counter[s[i - len_p]] -= 1 if window_counter[s[i - len_p]] == 0: del window_counter[s[i - len_p]] if p_counter == window_counter: return True return False"},{"question":"Your task is to implement a function that takes an input string representing a simple mathematical expression and returns the result of evaluating the expression. The input string will consist of non-negative integers and the operators `+`, `-`, `*`, and `/`. The expression may contain multiple operators, and standard operator precedence rules apply. You may assume the input string is a valid arithmetic expression. __Examples__: ``` evaluate(\\"3+5*2\\") => 13 evaluate(\\"10+2*6\\") => 22 evaluate(\\"100*2+12\\") => 212 evaluate(\\"100*(2+12)\\") => 1400 evaluate(\\"100*(2+12)/14\\") => 100 ``` __Note__: - You should handle integer division according to the standard mathematical rules. - You do not need to handle invalid input cases.","solution":"def evaluate(expression): Evaluates a simple arithmetic expression. import re import operator def parse_expression(expr): tokens = re.findall(r\'d+|[-+*/()]\', expr) return tokens def shunting_yard(tokens): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] for token in tokens: if token.isdigit(): output.append(token) elif token in precedence: while (operators and operators[-1] in precedence and precedence[token] <= precedence[operators[-1]]): output.append(operators.pop()) operators.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # Pop \'(\' while operators: output.append(operators.pop()) return output def evaluate_rpn(tokens): stack = [] operators = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.floordiv, } for token in tokens: if token.isdigit(): stack.append(int(token)) else: b = stack.pop() a = stack.pop() stack.append(operators[token](a, b)) return stack[0] tokens = parse_expression(expression) rpn = shunting_yard(tokens) return evaluate_rpn(rpn)"},{"question":"You are given a list of `n` unique integers and a target integer `k`. Your task is to find out if there is a pair of integers in the list that sums up to `k`. If such a pair exists, return `true`; otherwise, return `false`. For example: ``` solve([1, 2, 3, 4, 5], 9) -> true (because 4 + 5 = 9) solve([1, 2, 3, 4, 5], 10) -> false (no pairs sum up to 10) solve([0, -1, 2, -3, 1], -1) -> true (because 0 + (-1) = -1) solve([3, 5, 7, 1], 8) -> true (because 3 + 5 = 8) ``` Note: - The elements of the list are all distinct. - The solution should aim to be as efficient as possible. Function signature: ```python def solve(lst: List[int], k: int) -> bool: pass ``` Good luck!","solution":"def solve(lst, k): Returns true if there exists a pair of integers in the list that sum up to k, else false. seen = set() for number in lst: if k - number in seen: return True seen.add(number) return False"},{"question":"Alex is a fan of special numbers. He considers a number \\"X\\" special if it contains his favorite digit \\"D\\" at least once. Given a list of numbers, your task is to check how many of them are special according to Alex\'s definition. -----Input:----- - First line contains two integers N (the number of elements in the list) and D (Alex\'s favorite digit). - The second line contains N integers separated by space. -----Output:----- Print a single integer which is the count of special numbers in the list. -----Constraints----- - 1 leq N leq 10^5 - 0 leq D leq 9 - 1 leq Each number in the list leq 10^{18} -----Sample Input:----- 5 3 123 456 789 333 531 -----Sample Output:----- 3","solution":"def count_special_numbers(n, d, numbers): Returns the count of special numbers containing the digit d. Parameters: n (int): Number of numbers in the list. d (int): The favorite digit. numbers (list): List of integers. Returns: int: Count of special numbers. favorite_digit = str(d) count = 0 for number in numbers: if favorite_digit in str(number): count += 1 return count # Example usage: # n, d = 5, 3 # numbers = [123, 456, 789, 333, 531] # print(count_special_numbers(n, d, numbers)) # Output: 3"},{"question":"Design an algorithm to solve the following problem: Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation. Example: Input: s = \\"leetcode\\", wordDict = [\\"leet\\",\\"code\\"] Output: true Explanation: Return true because \\"leetcode\\" can be segmented as \\"leet code\\". Input: s = \\"catsandog\\", wordDict = [\\"cats\\",\\"dog\\",\\"sand\\",\\"and\\",\\"cat\\"] Output: false Explanation: Return false because \\"catsandog\\" cannot be segmented as \\"cats and og\\". Note: - The input string and dictionary will not contain spaces. - The dictionary can be assumed to contain only lowercase letters.","solution":"def word_break(s, wordDict): Determines if a string can be segmented into one or more dictionary words. Args: s: str, the input string. wordDict: list of str, the dictionary of words. Returns: bool, True if the string can be segmented, False otherwise. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"Given an array of distinct integers and an integer target, return all unique combinations of the array elements that add up to the target. You may return the combinations in any order. The same number can be used multiple times. Example: Input: nums: [2, 3, 6, 7] target: 7 Output: [ [2, 2, 3], [7] ] Explanation: 2 can be used multiple times to add up to the target 7. The combinations that add up to the target are [2, 2, 3] and [7].","solution":"def combination_sum(nums, target): def backtrack(remain, combo, start): if remain < 0: return elif remain == 0: result.append(list(combo)) else: for i in range(start, len(nums)): combo.append(nums[i]) backtrack(remain - nums[i], combo, i) combo.pop() result = [] backtrack(target, [], 0) return result"},{"question":"You are an intern at a startup called FeedOptimizer, which helps farmers optimize their animal feed for maximum productivity. Each type of feed has a certain amount of a required nutrient. The startup wants you to create an algorithm to determine if a combination of feeds will meet the minimum nutrient requirements for the animals. Each feed and the nutrient content is represented as a dictionary, and the minimum required nutrients are represented as another dictionary. For example, consider the following feeds and their nutrient contents: ``` feed1 = {\'protein\': 10, \'fiber\': 5, \'fat\': 2} feed2 = {\'protein\': 8, \'fiber\': 7, \'fat\': 4} feed3 = {\'protein\': 7, \'fiber\': 3, \'fat\': 6} ``` The minimum required nutrients are: ``` required_nutrients = {\'protein\': 20, \'fiber\': 10, \'fat\': 10} ``` Write a function `can_meet_requirements(feeds, required_nutrients)` where `feeds` is a list of dictionaries representing feeds and their nutrient contents, and `required_nutrients` is the dictionary representing the minimum required nutrients. The function should return \\"Sufficient\\" if the combination of feeds meets or exceeds the minimum required nutrients, or \\"Insufficient\\" if it does not. Function signature: ```python def can_meet_requirements(feeds: List[Dict[str, int]], required_nutrients: Dict[str, int]) -> str: ``` Example: ```python feeds = [ {\'protein\': 10, \'fiber\': 5, \'fat\': 2}, {\'protein\': 8, \'fiber\': 7, \'fat\': 4}, {\'protein\': 7, \'fiber\': 3, \'fat\': 6} ] required_nutrients = {\'protein\': 20, \'fiber\': 10, \'fat\': 10} print(can_meet_requirements(feeds, required_nutrients)) # Should return \\"Sufficient\\" ```","solution":"from typing import List, Dict def can_meet_requirements(feeds: List[Dict[str, int]], required_nutrients: Dict[str, int]) -> str: # Initialize nutrient sum dictionary with all zeros nutrient_sums = {nutrient: 0 for nutrient in required_nutrients} # Sum up the nutrient contents from all feeds for feed in feeds: for nutrient, amount in feed.items(): if nutrient in nutrient_sums: nutrient_sums[nutrient] += amount # Check if all required nutrients are met or exceeded for nutrient, required_amount in required_nutrients.items(): if nutrient_sums[nutrient] < required_amount: return \\"Insufficient\\" return \\"Sufficient\\""},{"question":"Chef has a new hobby of constructing buildings. He wants to calculate the maximum area of his buildings that can be formed by selecting two of these building heights in such a way that the area is minimized by the maximum of the smaller building height and distance between them. -----Input format:----- - The first line contains an integer `T` denoting the number of test cases. - For each test case: - The first line contains an integer `N` denoting the number of buildings. - The second line contains `N` positive integers `h1, h2, ..., hN` denoting the heights of the buildings. -----Output format:----- - For each test case, output the maximum area for the given buildings in a new line. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ hi ≤ 10^6 -----Example:----- -----Input:----- 2 5 1 3 2 5 4 6 10 9 8 7 6 5 -----Output:----- 9 25","solution":"def max_building_area(T, test_cases): def max_area_for_case(building_heights): n = len(building_heights) max_area = 0 left, right = 0, n - 1 while left < right: height = min(building_heights[left], building_heights[right]) width = right - left max_area = max(max_area, height * width) if building_heights[left] < building_heights[right]: left += 1 else: right -= 1 return max_area results = [] for case in test_cases: results.append(max_area_for_case(case)) return results # Note: The function takes T and test_cases as input # T is the number of test cases # test_cases is a list of lists, where each list contains the heights of the buildings for a test case"},{"question":"Implement a function `max_product_subarray(nums: List[int]) -> int` that takes a list of integers `nums` and returns the largest product of a contiguous subarray within the array `nums`. The input list may contain both positive and negative numbers, and the size of the subarray must be at least one. It is guaranteed that the list contains at least one number. # Examples ```python print(max_product_subarray([2, 3, -2, 4])) # Output: 6 Explanation: The subarray [2, 3] has the largest product 6. print(max_product_subarray([-2, 0, -1])) # Output: 0 Explanation: The result cannot be 2 because [-2, -1] is not a contiguous subarray. print(max_product_subarray([-2, 3, -4])) # Output: 24 Explanation: The subarray [-2, 3, -4] has the largest product 24. ``` # Note - Consider edge cases where the input array contains only one element. - Keep in mind the effects of negative numbers when calculating the product of subarrays.","solution":"from typing import List def max_product_subarray(nums: List[int]) -> int: if not nums: return 0 max_product = nums[0] min_product = nums[0] result = nums[0] for i in range(1, len(nums)): if nums[i] < 0: max_product, min_product = min_product, max_product max_product = max(nums[i], max_product * nums[i]) min_product = min(nums[i], min_product * nums[i]) result = max(result, max_product) return result"},{"question":"Write a function that takes a positive integer `n` and returns the sum of all integers less than `n` that are either multiples of 3 or 5. If `n` is less than 3, return 0 since there are no multiples of 3 or 5 less than 3. For example: ``` f(10) ---> 23 (3, 5, 6, and 9 are the multiples of 3 or 5 below 10, and their sum is 23) f(20) ---> 78 (3, 5, 6, 9, 10, 12, 15, and 18 are the multiples of 3 or 5 below 20, and their sum is 78) f(25) ---> 143 (3, 5, 6, 9, 10, 12, 15, 18, 20, 21, and 24 are the multiples of 3 or 5 below 25, and their sum is 143) f(3) ---> 0 (no multiples of 3 or 5 below 3) f(1) ---> 0 (no multiples of 3 or 5 below 1) ``` Features of the random tests: ``` Number of tests = 25 1 <= n <= 100000 ```","solution":"def sum_of_multiples(n): Return the sum of all integers less than `n` that are multiples of 3 or 5. if n < 3: return 0 return sum(x for x in range(n) if x % 3 == 0 or x % 5 == 0)"},{"question":"# Multiples of 3 and 5 Write a function `sum_of_multiples` that calculates the sum of all positive integers below a given number `n` that are multiples of either 3 or 5. The function should take an integer `n` as an argument and return an integer representing the sum. **Examples:** ``` sum_of_multiples(10) --> 23 # (3, 5, 6, 9) sum_of_multiples(20) --> 78 # (3, 5, 6, 9, 10, 12, 15, 18) sum_of_multiples(1) --> 0 # No multiples below 1 sum_of_multiples(3) --> 0 # No multiples below 3 sum_of_multiples(15) --> 45 # (3, 5, 6, 9, 10, 12) ``` **Note:** - The function should be efficient and handle large values of `n`. - The input `n` will be a positive integer.","solution":"def sum_of_multiples(n): Calculates the sum of all positive integers below n that are multiples of either 3 or 5. Args: n (int): The upper limit (exclusive) for considering multiples. Returns: int: The sum of multiples of 3 or 5 below n. return sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0)"},{"question":"# Task Write a function that takes an array of integers and a target sum as inputs, and returns an array of all unique pairs of integers from the input array that sum up to the target. Each pair should be presented as an array of two integers `[a, b]` where `a <= b`, and the pairs should be sorted in ascending order by their first element. Pairs with the same first element should be sorted by their second element. For example: ``` findPairs([1, 2, 3, 4, 5], 5) ==> [[1, 4], [2, 3]] findPairs([1, 2, -1, -2, 3], 1) ==> [[-2, 3], [-1, 2]] findPairs([1, 2, 2, 3, 4], 4) ==> [[1, 3], [2, 2]] findPairs([1, 2, 3], 6) ==> [] ``` If there are no pairs that sum up to the target, return an empty list. Duplicates within the input array should be considered unique pairs only once.","solution":"def findPairs(arr, target): Finds all unique pairs of integers from the input array that sum up to the target. Each pair is presented as a sorted array [a, b] where a <= b, and pairs are sorted. pairs = set() seen = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) # Convert the set of tuples to a sorted list of lists result = sorted([list(pair) for pair in pairs]) return result"},{"question":"Given a 2D grid of integers, where each integer represents the elevation at that point, write a function that finds the number of \\"peaks\\" in the grid. A point is considered a peak if it is greater than or equal to its 4 adjacent neighbors (up, down, left, and right). For the boundaries of the grid, treat any out-of-bounds neighbor as having an elevation of negative infinity. Example 1: Input: grid = [[1,2,1], [3,4,3], [1,2,1]] Output: 1 Explanation: The peak is at (1,1) with an elevation of 4. Example 2: Input: grid = [[10,20,15], [21,30,14], [7, 16,32]] Output: 2 Explanation: The peaks are at (1,1) with an elevation of 30 and (2,2) with an elevation of 32. Example 3: Input: grid = [[5,1,3], [2,9,5], [8,7,6]] Output: 3 Explanation: The peaks are at (0,0) with an elevation of 5, (1,1) with an elevation of 9, and (2,0) with an elevation of 8. Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 -1000 <= grid[i][j] <= 1000","solution":"def count_peaks(grid): def is_peak(i, j): current = grid[i][j] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]): if current < grid[ni][nj]: return False return True peak_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if is_peak(i, j): peak_count += 1 return peak_count"},{"question":"Write a function that takes an integer `n` and returns the sum of the first `n` prime numbers. For example, if `n` is 5, the function should return the sum of the first five prime numbers: 2 + 3 + 5 + 7 + 11 = 28. **Function Signature:** `def sum_of_primes(n: int) -> int:` **Example:** ```python sum_of_primes(5) -> 28 sum_of_primes(10) -> 129 ``` **Constraints:** - You may assume that `n` will always be a positive integer greater than 0. - The function should be efficient in calculating primes as the value of `n` could be large. **Hints:** - A prime number is only divisible by 1 and itself. - You might want to design a helper function to detect if a number is prime. - Efficient computation methods like the Sieve of Eratosthenes can be used to generate a list of prime numbers up to a required limit.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes(n: int) -> int: Returns the sum of the first n prime numbers. count = 0 sum_primes = 0 num = 2 while count < n: if is_prime(num): sum_primes += num count += 1 num += 1 return sum_primes"},{"question":"Given an unsorted integer array, write a function to find the smallest positive integer that is not present in the array. Your solution should run in O(n) time and use constant extra space. # Function Signature ```python def findMissingPositive(nums: List[int]) -> int: pass ``` # Input - An unsorted list of integers `nums`, e.g., `nums = [3, 4, -1, 1]` # Output - One integer representing the smallest positive integer missing from the input array # Examples ```python assert findMissingPositive([3, 4, -1, 1]) == 2 assert findMissingPositive([1, 2, 0]) == 3 assert findMissingPositive([-2, -3, 1, 2]) == 3 ```","solution":"from typing import List def findMissingPositive(nums: List[int]) -> int: n = len(nums) # First, move all out-of-range elements to the end by marking them with a value>n for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Use the index as a hash key and mark corresponding indices. for i in range(n): num = abs(nums[i]) if num <= n and nums[num - 1] > 0: nums[num - 1] = -nums[num - 1] # Identify the smallest missing positive number. for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"You are given a string s consisting of lowercase English letters and a character c. Your task is to delete the minimum number of characters from the string s so that the input character c no longer appears in the string. If the character c is not present in the string, simply output 0. -----Input----- The first line contains a single string s (1 le text{len}(s) le 10^5). The second line contains a single character c. -----Output----- Output a single integer — the minimum number of characters to delete from the string s so that c no longer appears in the string. -----Examples----- Input abcabcabc b Output 3 Input abcdef x Output 0 -----Note----- In the first example: Deleting the three occurrences of the character b results in the string \\"acacac\\", which does not contain the character b, so the minimum number of deletions is 3. In the second example: Since the character x is not present in the string \\"abcdef\\", no deletions are needed, so the output is 0.","solution":"def min_deletions_to_remove_char(s, c): Returns the minimum number of deletions required to remove all occurrences of the character c from string s. return s.count(c)"},{"question":"Create a function that calculates statistical measures for a given list of integers. - mean (average of the numbers) - median (middle value when the list is sorted; if the list has an even number of elements, the median is the average of the two middle numbers) - mode (the number that appears the most frequently; if multiple numbers have the same highest frequency, return all of them in a list) The function should return a tuple containing the mean, median, and mode(s). # Examples ```python statistics([1, 2, 2, 3, 4]) # ==> (2.4, 2, [2]) statistics([1, 1, 2, 2, 3, 4]) # ==> (2.1666666666666665, 2, [1, 2]) ``` The list will always contain at least one integer. Note that the mean should be calculated as a floating point number, the median should be returned as an integer or a float depending on the calculation, and the mode(s) should be returned as a list of integers.","solution":"from collections import Counter from typing import List, Tuple, Union def statistics(numbers: List[int]) -> Tuple[float, Union[int, float], List[int]]: Calculates the mean, median, and mode(s) of a given list of integers. Parameters: numbers (List[int]): A list of integers to analyze. Returns: Tuple[float, Union[int, float], List[int]]: A tuple containing the mean (float), median (int or float), and mode(s) (list of integers). # Calculate mean mean = sum(numbers) / len(numbers) # Calculate median sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n % 2 == 1: median = sorted_numbers[n // 2] else: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 # Calculate mode counter = Counter(sorted_numbers) max_freq = max(counter.values()) modes = [num for num, freq in counter.items() if freq == max_freq] return (mean, median, modes)"},{"question":"=====Problem Statement===== Given two strings, s and t, write a program to check if s is a subsequence of t. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. =====Input Format===== Two strings s and t, each one given on separate lines. =====Constraints===== 1 ≤ |s|, |t| ≤ 100 The strings consist only of lowercase English letters. =====Output Format===== Output \\"True\\" if s is a subsequence of t. Otherwise, output \\"False\\". =====Sample Input===== abc ahbgdc =====Sample Output===== True =====Explanation===== In the example, \'abc\' is a subsequence of \'ahbgdc\' because the characters \'a\', \'b\', and \'c\' appear in the same order in \'ahbgdc\', though they are not contiguous.","solution":"def is_subsequence(s, t): Checks if s is a subsequence of t. s_index, t_index = 0, 0 while s_index < len(s) and t_index < len(t): if s[s_index] == t[t_index]: s_index += 1 t_index += 1 return s_index == len(s)"},{"question":"Alice loves playing with arrays. She has an array of integers, and she wants to perform a series of operations on this array. In each operation, she will select exactly two adjacent elements and remove one of them. The score of removing an element is defined as the absolute difference between the two elements. Alice wants to maximize the total score obtained after performing N-1 operations (after which only one element will remain). -----Input:----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the number of elements in the array. - The second line of each test case contains N space-separated integers, the elements of the array. -----Output:----- For each test case, output an integer, the maximum total score Alice can achieve. -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 1000 - 1 leq A_i leq 10^5 -----Sample Input:----- 2 5 1 3 2 4 5 3 10 20 30 -----Sample Output:----- 10 20 -----Explanation:----- In the first test case: - Alice removes 3 and 2, adding |3 - 2| = 1 to the score (array becomes `[1, 2, 4, 5]`). - Then she removes 2 and 4, adding |2 - 4| = 2 to the score (array becomes `[1, 4, 5]`). - Then she removes 1 and 4, adding |1 - 4| = 3 to the score (array becomes `[4, 5]`). - Finally, she removes 4 and 5, adding |4 - 5| = 1 to the score. Total score = 1 + 2 + 3 + 1 = 7. In the second test case: - Alice removes 10 and 20, adding |10 - 20| = 10 to the score (array becomes `[20, 30]`). - Then she removes 20 and 30, adding |20 - 30| = 10 to the score. Total score = 10 + 10 = 20.","solution":"def max_total_score(T, test_cases): Calculate the maximum total score for each test case. Parameters: - T: int, number of test cases - test_cases: list of tuples, each consisting of (N, array) where N is the number of elements in the array and array is the list of integers. Returns: - list of int, maximum total score for each test case results = [] for t in range(T): N, array = test_cases[t] array.sort() total_score = 0 for i in range(1, N): total_score += array[i] - array[i - 1] results.append(total_score) return results"},{"question":"Implement a function called `smallest_common_multiple` that takes an array of integers as an argument and returns the smallest common multiple (SCM) of these integers. The smallest common multiple is the smallest number that is evenly divisible by all numbers in the array. Ensure to handle edge cases where the array might contain both positive and negative integers, and zeros. ```python def smallest_common_multiple(arr): # Your implementation here # Examples: smallest_common_multiple([1, 2, 3, 4, 5]) #=> 60 smallest_common_multiple([1, 2, 3]) #=> 6 smallest_common_multiple([5, 10]) #=> 10 smallest_common_multiple([-2, 3, 4]) #=> 12 ```","solution":"from math import gcd from functools import reduce def lcm(a, b): return abs(a * b) // gcd(a, b) def smallest_common_multiple(arr): Returns the smallest common multiple (SCM) of the integers in the array. if not arr: return None # Remove zeros from the array since LCM with zero is undefined arr = [x for x in arr if x != 0] if not arr: return None return reduce(lcm, arr)"},{"question":"Given a list of strings, create a function `longestCommonSuffix` that will return the longest common suffix shared among all strings in the list. If no common suffix exists, it should return an empty string. The function should handle case sensitivity, meaning \'A\' and \'a\' are considered different characters. Examples: - Input: `[\\"walking\\", \\"running\\", \\"jogging\\"]` Output: `\\"ing\\"` - Input: `[\\"hello\\", \\"world\\", \\"python\\"]` Output: `\\"\\"` - Input: `[\\"sunflower\\", \\"tower\\", \\"power\\"]` Output: `\\"ower\\"` - Input: `[\\"abcde\\", \\"vwxyz\\", \\"12345\\"]` Output: `\\"\\"` All input strings will be non-empty and the list will contain at least one string.","solution":"def longestCommonSuffix(strings): Returns the longest common suffix shared among all strings in the list. if not strings: return \\"\\" # Reverse all strings to work from the end reversed_strings = [s[::-1] for s in strings] # Find the minimum length string to limit the comparison range min_length = min(len(s) for s in reversed_strings) common_suffix = [] for i in range(min_length): # Check if the current character in all reversed strings is the same current_char = reversed_strings[0][i] if all(s[i] == current_char for s in reversed_strings): common_suffix.append(current_char) else: break # Reverse to get the original order return \'\'.join(common_suffix)[::-1]"},{"question":"Yuki is participating in a typing speed contest. To test his skills, he\'s given a set of words to type, and he must type them in reverse order. However, he tends to make a mistake while reversing the words - sometimes he swaps exactly one adjacent pair of characters within a word. Your task is to simulate Yuki\'s typing. -----Input----- The input contains a single string S composed of lowercase letters and spaces. The string S does not start or end with a space and does not contain multiple consecutive spaces. -----Output----- Print the string S with the words reversed, but with exactly one adjacent pair of characters in one word swapped. If there are multiple possible outputs, any of them will be accepted. -----Constraints----- 1 ≤ Length of S ≤ 100 S contains only lowercase letters and single spaces. -----Sample Input----- hello world -----Sample Output----- olleh wlrod -----Output details----- The correct reversed string is \\"olleh dlrow\\". However, since an adjacent pair of characters must be swapped in one of the words, the possible outputs could be: - \\"olleh wlrod\\" (where \'r\' and \'l\' in \\"world\\" are swapped) - \\"olelh dlrow\\" (where \'e\' and \'l\' in \\"hello\\" are swapped)","solution":"import random def reverse_with_typo(s): words = s.split() reversed_words = [word[::-1] for word in words] # Choose one word randomly word_index = random.randint(0, len(reversed_words) - 1) typo_word = list(reversed_words[word_index]) # If the word has more than one character, swap a random adjacent pair of characters if len(typo_word) > 1: char_index = random.randint(0, len(typo_word) - 2) typo_word[char_index], typo_word[char_index + 1] = typo_word[char_index + 1], typo_word[char_index] reversed_words[word_index] = \'\'.join(typo_word) return \' \'.join(reversed_words)"},{"question":"A bakery sells loaves of bread for a fixed price of 5 each and cupcakes for a fixed price of 1 each. The owner wants to determine the number of ways he can achieve a specific sales target, T, using only loaves of bread and cupcakes. The input consists of a single integer T, which represents the sales target in dollars. The output should be the number of distinct ways to reach the sales target using any combination of loaves of bread and cupcakes. For example: If T = 10, there are 3 ways to achieve the target: - 2 loaves of bread (2 * 5 = 10) - 1 loaf of bread and 5 cupcakes (1 * 5 + 5 * 1 = 10) - 0 loaves of bread and 10 cupcakes (0 * 5 + 10 * 1 = 10) If T = 8, there are 2 ways to achieve the target: - 1 loaf of bread and 3 cupcakes (1 * 5 + 3 * 1 = 8) - 0 loaves of bread and 8 cupcakes (0 * 5 + 8 * 1 = 8) Complete the function `ways_to_reach_target` that takes in the integer T and returns the number of distinct ways to achieve the sales target using the combination of loaves of bread and cupcakes. ```python def ways_to_reach_target(T): # Your code here pass ```","solution":"def ways_to_reach_target(T): Determines the number of distinct ways to reach the sales target T using 5 loaves of bread and 1 cupcakes. :param T: int, sales target in dollars :return: int, the number of distinct ways to reach the sales target ways = 0 for loaves in range(T // 5 + 1): remaining = T - loaves * 5 if remaining >= 0: ways += 1 return ways"},{"question":"Given an array of non-negative integers representing the amount of money of each house, you are a professional robber planning to rob houses along a street. Each house is either available to be robbed or not due to some constraints (e.g., some houses might have alarms installed). Determine the maximum amount of money you can rob tonight without robbing two adjacent houses. Formally, determine the maximum sum of money from an subsequence of the array such that no two elements in the subsequence are adjacent in the original array. Example 1: Input: [2,3,2] Output: 4 Explanation: Rob house on the 1st index (2), then rob the house on the 3rd index (2). Example 2: Input: [1,2,3,1] Output: 4 Explanation: Rob house on the 1st index (1), then rob the house on the 3rd index (3). Note: - 1 <= nums.length <= 100 - 0 <= nums[i] <= 400","solution":"def rob(nums): Determines the maximum amount of money you can rob tonight without robbing two adjacent houses. :param nums: List of non-negative integers representing money in each house. :return: The maximum amount of money you can rob. if not nums: return 0 if len(nums) == 1: return nums[0] max_money = [0] * len(nums) max_money[0] = nums[0] max_money[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): max_money[i] = max(max_money[i-1], max_money[i-2] + nums[i]) return max_money[-1]"},{"question":"You are given an undirected graph with N nodes and M edges. Each node has a value associated with it representing the cost to visit that node. A path is defined as any sequence of nodes such that there exists an edge between consecutive nodes in the sequence. The cost of a path is defined as the maximum node value in that path. Your task is to find the minimum cost path between two given nodes, A and B, if such a path exists. -----Input----- - First line contains N (number of nodes), M (number of edges), A (starting node) and B (ending node) - Second line contains N integers representing the value of each node - Next M lines contain two integers u and v indicating there is an edge between nodes u and v -----Output----- A single integer representing the minimum cost of any path between nodes A and B. If no path exists, output -1. -----Constraints----- - 1 <= N <= 100000 - 0 <= M <= 200000 - 1 <= Value of each node <= 1000000 - 1 <= u, v, A, B <= N -----Example----- Input: 5 6 1 5 2 5 1 3 4 1 2 1 3 2 4 3 4 4 5 2 5 Output: 4","solution":"import heapq def min_cost_path(n, m, a, b, node_values, edges): Returns the minimum cost path between two nodes in a graph with N nodes and M edges, where each node has a value representing the cost to visit that node. :param n: Number of nodes :param m: Number of edges :param a: Starting node :param b: Ending node :param node_values: List of integers representing the value of each node :param edges: List of tuples where each tuple contains two integers (u, v) representing an edge between nodes u and v :return: Minimum cost path value between nodes A and B, or -1 if no such path exists graph = [[] for _ in range(n)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # Priority queue to store (cost, node) pq = [(node_values[a-1], a-1)] visited = [False] * n while pq: cost, node = heapq.heappop(pq) if visited[node]: continue visited[node] = True if node == b-1: return cost for neighbor in graph[node]: if not visited[neighbor]: heapq.heappush(pq, (max(cost, node_values[neighbor]), neighbor)) return -1"},{"question":"Task Design a function `rotate_matrix(matrix)` that rotates a given NxN matrix 90 degrees clockwise. The matrix is represented as a list of lists, where each inner list represents a row. Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) ``` Output: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` **Constraints:** - You may assume the matrix has at least one row and one column (i.e., N >= 1).","solution":"def rotate_matrix(matrix): Rotates a given NxN matrix 90 degrees clockwise. Args: matrix (list of list of int): The NxN matrix to be rotated. Returns: list of list of int: The rotated NxN matrix. if not matrix: return [] n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"You are given a grid representing a maze where some cells are walls, some are paths, and one cell is the exit. You start from the entrance and need to navigate to the exit. You can only move up, down, left, or right, and cannot pass through walls. The grid is represented as a list of lists of strings, where each string can be: - \\"E\\" for the entrance, - \\"X\\" for the exit, - \\"O\\" for an open path, - \\"#\\" for a wall. Your task is to write a function `shortest_maze_path(maze)` that takes a grid as input and returns the shortest path from the entrance to the exit as a list of coordinate pairs representing the cells visited along the path. If no path exists, return an empty list. For example, given the maze: ``` maze = [ [\\"E\\", \\"O\\", \\"O\\", \\"#\\", \\"X\\"], [\\"#\\", \\"#\\", \\"O\\", \\"#\\", \\"O\\"], [\\"O\\", \\"O\\", \\"O\\", \\"O\\", \\"O\\"], [\\"O\\", \\"#\\", \\"#\\", \\"#\\", \\"#\\"], [\\"O\\", \\"O\\", \\"O\\", \\"O\\", \\"O\\"] ] ``` The function should return the following path as a list of coordinate pairs: `[(0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 3), (2, 4), (1, 4), (0, 4)]` The pairs denote the cells on the path where the first element in each pair is the row and the second element is the column of a cell on the path. **Function Signature:** ```python def shortest_maze_path(maze: List[List[str]]) -> List[Tuple[int, int]]: ```","solution":"from collections import deque from typing import List, Tuple def shortest_maze_path(maze: List[List[str]]) -> List[Tuple[int, int]]: Returns the shortest path from the entrance to the exit in the maze. :param maze: List[List[str]] - maze grid :return: List[Tuple[int, int]] - list of coordinate pairs as the shortest path def get_neighbors(row, col): for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: r, c = row + dr, col + dc if 0 <= r < len(maze) and 0 <= c < len(maze[0]) and maze[r][c] != \\"#\\": yield r, c start = None end = None # Locate the start (E) and end (X) positions for r in range(len(maze)): for c in range(len(maze[0])): if maze[r][c] == \\"E\\": start = (r, c) elif maze[r][c] == \\"X\\": end = (r, c) if not start or not end: return [] queue = deque([(start, [start])]) visited = set([start]) while queue: (row, col), path = queue.popleft() if (row, col) == end: return path for neighbor in get_neighbors(row, col): if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, path + [neighbor])) return []"},{"question":"Task Write a function that takes a list of integers and returns a tuple containing two elements: 1. A list of all the even numbers in their original order. 2. A list of the indices of all the odd numbers. You can assume that the input list will contain at least one integer. Examples ```python [ 3, 4, 7, 10, 1, 3, 9, 6 ] => ( [ 4, 10, 6 ], [ 0, 2, 4, 5, 6 ] ) [ 2, 8, 6 ] => ( [ 2, 8, 6 ], [] ) [ 1, 3, 5 ] => ( [], [ 0, 1, 2 ] ) ```","solution":"def process_numbers(nums): Returns a tuple containing a list of even numbers and a list of indices of odd numbers from the input list. :param nums: List of integers. :return: A tuple (list of even numbers, list of indices of odd numbers) evens = [num for num in nums if num % 2 == 0] odd_indices = [i for i, num in enumerate(nums) if num % 2 != 0] return (evens, odd_indices)"},{"question":"Imagine you are helping a research team in a university obsessed with palindromes. They have recently discovered some ancient scripts that contain strings and are interested in analyzing if rearranging these strings can create palindromes. As their programmer, your task is to determine whether it\'s possible to reorder the characters of given strings so that each one becomes a palindrome. A string is a palindrome if it reads the same backward as forward. -----Input----- The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a single string s consisting of lowercase English letters (1 ≤ |s| ≤ 1000). -----Output----- For each test case, output \\"Yes\\" if the string can be rearranged to form a palindrome, otherwise output \\"No\\". -----Examples----- Input 3 aabbcc abc aab Output Yes No Yes -----Explanation----- In the first case, the string \\"aabbcc\\" can be rearranged to \\"abcba\\" or \\"baccab\\", both of which are palindromes. In the second case, \\"abc\\" cannot be rearranged to form a palindrome. In the third case, \\"aab\\" can be rearranged to \\"aba\\", which is a palindrome.","solution":"def can_form_palindrome(s): Determines whether it is possible to rearrange the characters of the string s to form a palindrome. from collections import Counter # Count the occurrences of each character char_count = Counter(s) # A string can be rearranged to form a palindrome if at most one character has an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def analyze_strings(t, strings): Analyzes multiple strings to determine if each can form a palindrome. results = [] for s in strings: if can_form_palindrome(s): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a list of integers, reorder it such that all even integers come before all the odd integers while maintaining the relative order of the even and odd integers. Example 1: Input: nums = [3, 1, 2, 4] Output: [2, 4, 3, 1] Explanation: The even integers [2, 4] come before the odd integers [3, 1], and their relative order is maintained. Example 2: Input: nums = [0, 1, 2] Output: [0, 2, 1] Explanation: The even integers [0, 2] come before the odd integer [1], and their relative order is maintained. Example 3: Input: nums = [7, 8, 5, 6, 4, 3] Output: [8, 6, 4, 7, 5, 3] Explanation: The even integers [8, 6, 4] come before the odd integers [7, 5, 3], and their relative order is maintained. Constraints: - 1 <= nums.length <= 1000 - -10^6 <= nums[i] <= 10^6","solution":"def reorder_even_before_odd(nums): Reorders the list such that all even integers come before all odd integers while maintaining the relative order of the even and odd integers. :param nums: List of integers :return: List of integers with all even numbers first and odd numbers last, preserving their relative order. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"Given an array of integers, determine whether it is possible to partition the array into two subsets such that the sum of elements in both subsets is the same. Example 1: Input: [1, 5, 11, 5] Output: True Explanation: The array can be partitioned as [1, 5, 5] and [11], both of which have sums of 11. Example 2: Input: [1, 2, 3, 5] Output: False Explanation: The array cannot be partitioned into two subsets such that the sums of elements in both subsets are equal. Note: The length of the array lies in the range [1, 200]. Each element of the array is a non-negative integer not greater than 100.","solution":"def can_partition(nums): Determine if the array can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, it cannot be partitioned into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a DP array initialized to False dp = [False] * (target + 1) dp[0] = True # Base case: zero sum is always achieved for num in nums: # Traverse backwards to avoid using the same item multiple times for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"The gardener is arranging a rectangular grid of plants. Each plant will have a unique identifier based on its position in the grid. The identifier follows a specific rule: for any plant located at row i and column j, the identifier is calculated as (i+j+1). Your task is to generate this grid of identifiers for the given dimensions. -----Input:----- - The first line contains an integer T, representing the number of test cases. - Each test case contains two integers R and C, representing the number of rows and columns respectively. -----Output:----- For each test case, output the grid of identifiers based on the specified rule. -----Constraints----- - 1 leq T leq 50 - 1 leq R leq 50 - 1 leq C leq 50 -----Sample Input:----- 3 2 3 3 3 4 2 -----Sample Output:----- 1 2 3 2 3 4 1 2 3 2 3 4 3 4 5 1 2 2 3 3 4 4 5","solution":"def generate_garden_grid(test_cases): Generates a grid of plant identifiers for given dimensions. Args: test_cases: List of tuples where each tuple (R, C) represents the number of rows and columns. Returns: List of lists where each list represents the grid of plant identifiers. results = [] for r, c in test_cases: grid = [] for i in range(r): row = [] for j in range(c): row.append(i + j + 1) grid.append(row) results.append(grid) return results def format_garden_grids(grids): Formats the grids for output. Args: grids: List of lists representing the grids of plant identifiers. Returns: Formatted string representing the grids. formatted_output = [] for grid in grids: for row in grid: formatted_output.append(\\" \\".join(map(str, row))) formatted_output.append(\\"\\") return \\"n\\".join(formatted_output).strip()"},{"question":"A group of students are collecting books for their school library. They have a total of M books and they want to arrange these books in shelves such that each shelf contains a specific number of books in a strictly increasing order from 1 to K, where K is the total number of shelves. The 1st shelf should contain 1 book, the 2nd shelf should contain 2 books, the 3rd shelf should contain 3 books, and so on up to the Kth shelf which should contain K books. Help the students to find the maximum number of shelves K they can completely fill with the given M books. -----Input----- The first line of the input contains a single integer T denoting the number of test cases. The first and the only line of each test case contains an integer M denoting the number of books. -----Output----- For each test case, output a single line containing an integer corresponding to the maximum number of shelves that can be completely filled with the given number of books. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ M ≤ 109 -----Subtasks----- - Subtask 1 (50 points) : 1 ≤ M ≤ 105 - Subtask 2 (50 points) : 1 ≤ M ≤ 109 -----Example----- Input: 3 3 6 10 Output: 2 3 4 -----Explanation----- - Test 1: Students can completely fill 2 shelves (1 book on the 1st shelf and 2 books on the 2nd shelf), using a total of 3 books. - Test 2: Students can completely fill 3 shelves (1 book on the 1st shelf, 2 books on the 2nd shelf, and 3 books on the 3rd shelf), using a total of 6 books. - Test 3: Students can completely fill 4 shelves (1 book on the 1st shelf, 2 books on the 2nd shelf, 3 books on the 3rd shelf, and 4 books on the 4th shelf), using a total of 10 books.","solution":"def max_shelves(M): Returns the maximum number of shelves that can be completely filled with M books. K = 0 total_books = 0 while total_books <= M: K += 1 total_books += K # K will be incremented one time extra in the last iteration, so subtract 1 return K - 1 def find_max_shelves_for_cases(test_cases): For a given list of integer M (number of books for each test case), return a list of the maximum number of shelves that can be filled for each case. results = [] for M in test_cases: results.append(max_shelves(M)) return results"},{"question":"Description Write a function that accepts a list of integers and returns a new list containing only the integers that are prime numbers. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. In other words, a prime number is only divisible by 1 and itself. Examples ```python filterPrimes([2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 5, 7] filterPrimes([15, 23, 37, 42, 51, 63, 71]) == [23, 37, 71] filterPrimes([0, 1, 2, 3, 4, 5]) == [2, 3, 5] ``` Notes - The input list may contain zero or more integers. - An empty list should return an empty list.","solution":"def is_prime(number): Helper function to check if a number is prime. if number <= 1: return False if number == 2: return True if number % 2 == 0: return False for i in range(3, int(number ** 0.5) + 1, 2): if number % i == 0: return False return True def filterPrimes(numbers): Returns a list of prime numbers from the input list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Given a matrix of integers `matrix` and two integers `x` and `y` representing the coordinates of a starting point, write a function to find the largest connected component of adjacent cells that contain the same value, starting from the given point. You can move in 4 directions (up, down, left, right) from a cell to another cell. Return the size of this largest connected component. Example 1: Input: matrix = [ [1, 1, 0, 0, 0], [0, 1, 0, 1, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0] ], x = 1, y = 1 Output: 3 Explanation: Starting at cell (1, 1), the largest connected component of value 1 size is 3, and it includes cells (1, 1), (0, 1), and (1, 0). Example 2: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ], x = 0, y = 0 Output: 1 Explanation: Starting at cell (0, 0), the largest connected component of value 1 size is 1, and it only includes cell (0, 0). Example 3: Input: matrix = [ [1, 1], [1, 1] ], x = 0, y = 1 Output: 4 Explanation: Starting at cell (0, 1), the largest connected component of value 1 size is 4, and it includes all the cells of the matrix. Constraints: - `1 <= matrix.length, matrix[0].length <= 100` - `0 <= matrix[i][j] <= 10^6` - `0 <= x < matrix.length` - `0 <= y < matrix[0].length` Write function signature: ```python def largest_connected_component(matrix: List[List[int]], x: int, y: int) -> int: ```","solution":"from typing import List, Tuple def largest_connected_component(matrix: List[List[int]], x: int, y: int) -> int: def dfs(matrix: List[List[int]], x: int, y: int, target: int, visited: set) -> int: if (x, y) in visited or x < 0 or y < 0 or x >= len(matrix) or y >= len(matrix[0]) or matrix[x][y] != target: return 0 visited.add((x, y)) size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(matrix, x + dx, y + dy, target, visited) return size target = matrix[x][y] visited = set() return dfs(matrix, x, y, target, visited)"},{"question":"Write a function `calculate_commission(sales_amount, sales_type)` that - accepts the total sales amount, and - accepts the type of sales (\\"hardware\\" or \\"software\\"). The function should return the commission amount based on the sales type: - For hardware sales, the commission is 10% of the sales amount. - For software sales, the commission is 15% of the sales amount. ```python calculate_commission(1000, \'hardware\') == 100.0 calculate_commission(1000, \'software\') == 150.0 calculate_commission(2000, \'hardware\') == 200.0 calculate_commission(2000, \'software\') == 300.0 ``` Note: No commission should be calculated for an invalid or unspecified sales type, and the function should return 0 in such cases. ```python calculate_commission(1000, \'accessories\') == 0 calculate_commission(1000, \'food\') == 0 calculate_commission(1000) == 0 ```","solution":"def calculate_commission(sales_amount, sales_type): Calculate the commission based on the sales amount and type. Parameters: sales_amount (float): The total sales amount. sales_type (str): The type of sales (\\"hardware\\" or \\"software\\"). Returns: float: The commission amount. if sales_type == \'hardware\': return sales_amount * 0.10 elif sales_type == \'software\': return sales_amount * 0.15 else: return 0"},{"question":"You are a pilot of a spaceship navigating through an asteroid field represented by a 2D grid. Each cell in the grid can be either empty (\'.\') or contain an asteroid (\'#\'). Your goal is to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (R-1, C-1) of the grid. You can move either up, down, left, or right, but you cannot move diagonally and cannot pass through cells containing asteroids. If there is no valid path, return -1. Write a function `shortestPath` to find the length of the shortest path from the top-left to the bottom-right corner. # Examples ```python grid1 = [ [\'.\', \'.\', \'#\', \'.\'], [\'#\', \'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'#\'], [\'.\', \'#\', \'.\', \'.\'] ] # The shortest path is: (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2) -> (3, 2) -> (3, 3) shortestPath(grid1) # => 7 grid2 = [ [\'.\', \'#\', \'.\'], [\'#\', \'.\', \'.\'], [\'.\', \'#\', \'.\'] ] # The only path is blocked by an asteroid shortestPath(grid2) # => -1 grid3 = [ [\'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] # The shortest path is: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) shortestPath(grid3) # => 5 ``` # Function Signature ```python def shortestPath(grid: List[List[str]]) -> int: # Your code here ```","solution":"from collections import deque from typing import List def shortestPath(grid: List[List[str]]) -> int: if not grid or not grid[0]: return -1 R, C = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set([(0, 0)]) while queue: r, c, dist = queue.popleft() if r == R-1 and c == C-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"There is a robot on an infinite grid starting at position (0, 0). The robot is given a sequence of movements in the form of a string. Each character in the string can be one of \'L\', \'R\', \'U\', or \'D\', which moves the robot left, right, up, and down respectively. The robot makes all of its moves in order and may revisit any number of previously visited points. Write a function `isCircle` that determines if, after the sequence of movements, the robot ends up exactly at the starting position (0, 0). Return `True` if it does, and `False` otherwise. # Constraints: * The input string `moves` will only contain characters \'L\', \'R\', \'U\', \'D\'. * The string length will be in the range [1, 10000]. # Example: **Input:** ```python moves = \\"UD\\" ``` **Output:** ```python True ``` **Explanation:** The robot moves up once and down once. It ends up back at the starting point. **Input:** ```python moves = \\"LLRR\\" ``` **Output:** ```python True ``` **Explanation:** The robot moves left twice and right twice. It ends up back at the starting point. # Note: - Each movement is interpreted as moving one unit in the given direction. - The robot must return to (0, 0) to be considered to have made a circle.","solution":"def isCircle(moves): Returns True if the robot ends up at the starting position (0, 0) after the sequence of movements. Returns False otherwise. x, y = 0, 0 # starting position for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return x == 0 and y == 0"},{"question":"In this interview question, your task is to create a function that takes a single string as an argument and returns True if the string contains any of the words from a predefined list of forbidden words. The function should be case-insensitive and consider only whole words. ```python # predefined list of forbidden words forbidden_words = [\\"forbidden\\", \\"prohibited\\", \\"banned\\"] # case where no forbidden word is in the string \\"No issues found here.\\" # case where a forbidden word is part of a larger word \\"This is forbiddenfruit.\\" # case where a forbidden word is matched exactly, ignoring case \\"This is Forbidden.\\" ``` --- # Examples ```python >>> contains_forbidden(\\"No issues found here.\\") False >>> contains_forbidden(\\"This is forbidden fruit.\\") True >>> contains_forbidden(\\"This is Forbidden.\\") True >>> contains_forbidden(\\"All_allowed_here.\\") False >>> contains_forbidden(\\"Containing BANNED and other terms.\\") True ``` Good luck!","solution":"def contains_forbidden(text): Check if the input string contains any forbidden words. The function is case-insensitive and considers only whole words. :param text: str, input string to be checked :return: bool, True if any forbidden word is found, otherwise False import re # predefined list of forbidden words forbidden_words = [\\"forbidden\\", \\"prohibited\\", \\"banned\\"] # Convert text to lower case and use word boundaries to match whole words text = text.lower() # Create a combined regex pattern pattern = r\'b(\' + \'|\'.join(forbidden_words) + r\')b\' # Search for any forbidden words in the text if re.search(pattern, text): return True return False"},{"question":"You are working on a team project where each team member is responsible for one or more tasks. Your task is to write a function that accepts a list of tasks, each represented by a dictionary, and a function parameter to determine the team member responsible for the most tasks. Each task dictionary contains `task_name`, `assigned_to`, and `status`. Your function should return the name of the person assigned to the most tasks. If there is a tie, return a list of names. The list of tasks is preloaded and can be referenced using the variable `tasks`. It uses the following structure. ```python tasks = [ {\'task_name\': \\"Code Review\\", \'assigned_to\': \\"Alice\\", \'status\': \\"completed\\"}, {\'task_name\': \\"Write Tests\\", \'assigned_to\': \\"Bob\\", \'status\': \\"in-progress\\"}, ... ] ``` The function should return: - The name of the person or a list of names who is responsible for the most tasks. - If the list is empty, return an empty string. Example: ```python tasks = [ {\'task_name\': \\"Code Review\\", \'assigned_to\': \\"Alice\\", \'status\': \\"completed\\"}, {\'task_name\': \\"Write Tests\\", \'assigned_to\': \\"Alice\\", \'status\': \\"in-progress\\"}, {\'task_name\': \\"Document Features\\", \'assigned_to\': \\"Bob\\", \'status\': \\"completed\\"} ] # Calling your function should return: # \'Alice\' tasks = [ {\'task_name\': \\"Code Review\\", \'assigned_to\': \\"Alice\\", \'status\': \\"completed\\"}, {\'task_name\': \\"Write Tests\\", \'assigned_to\': \\"Bob\\", \'status\': \\"in-progress\\"}, {\'task_name\': \\"Document Features\\", \'assigned_to\': \\"Bob\\", \'status\': \\"completed\\"}, {\'task_name\': \\"Deploy Application\\", \'assigned_to\': \\"Alice\\", \'status\': \\"in-progress\\"} ] # Calling your function should return: # [\'Alice\', \'Bob\'] ```","solution":"from collections import Counter def responsible_for_most_tasks(tasks): Returns the name of the person (or a list of names) who is responsible for the most tasks. If the list is empty, returns an empty string. :param tasks: List of task dictionaries :return: String or list of strings if not tasks: return \\"\\" # Count the number of tasks assigned to each team member assigned_count = Counter(task[\'assigned_to\'] for task in tasks) # Find the maximum number of tasks assigned to a team member max_tasks = max(assigned_count.values(), default=0) # Find all team members with the maximum number of tasks most_responsible = [person for person, count in assigned_count.items() if count == max_tasks] # Return a single name if there\'s only one person, otherwise return the list of names return most_responsible[0] if len(most_responsible) == 1 else most_responsible"},{"question":"A farmer has a rectangular field with dimensions `l` (length) and `w` (width). He wants to split this field into square plots of the largest possible size such that the entire field is divided into non-overlapping square plots. Your task is to write a program that determines the side length of the largest square plot that can be used to divide the entire field and the number of such square plots. -----Input----- The first line contains an integer `t` (1 le t le 100) - the number of test cases. Each of the next `t` lines contains two integers `l` and `w` (1 le l, w le 10^9) - the dimensions of the field. -----Output----- For each test case, output two integers: the side length of the largest square plot and the number of such square plots. -----Example----- Input 3 6 9 4 5 15 10 Output 3 6 1 20 5 6 -----Note----- In the first test case, the largest possible square plot has a side length of `3` (greatest common divisor of `6` and `9`). The field can be divided into `6` such square plots of dimensions `3x3`. In the second test case, the largest possible square plot has a side length of `1` (greatest common divisor of `4` and `5`). The field can be divided into `20` such square plots of dimensions `1x1`. In the third test case, the largest possible square plot has a side length of `5` (greatest common divisor of `15` and `10`). The field can be divided into `6` such square plots of dimensions `5x5`.","solution":"import math def largest_square_plot(l, w): gcd = math.gcd(l, w) num_plots = (l // gcd) * (w // gcd) return gcd, num_plots def process_test_cases(t, cases): results = [] for l, w in cases: results.append(largest_square_plot(l, w)) return results"},{"question":"Write a function that takes a list of integers and returns a new list containing only the odd integers from the original list, but sorted in descending order. Assume that the input will always be a list of integers, which may contain both positive and negative numbers. Examples: ```python filter_and_sort_odds([3, 1, 4, 1, 5, 9]) > [9, 5, 3, 1, 1] filter_and_sort_odds([10, 7, 2, -3, 6, -5]) > [7, -3, -5] ```","solution":"def filter_and_sort_odds(int_list): Returns a list of odd integers sorted in descending order from the input list of integers. :param int_list: List of integers :return: List of odd integers sorted in descending order odd_numbers = [x for x in int_list if x % 2 != 0] return sorted(odd_numbers, reverse=True)"},{"question":"In a game, you are provided with a grid-based map represented by a 2D matrix. Each cell of the matrix can either be passable denoted by \'0\' or impassable denoted by \'1\'. Starting from the top-left cell (0, 0), you need to determine if it\'s possible to reach the bottom-right cell (n-1, m-1) only by traveling through passable cells. You can only move up, down, left, or right. Write a function ```isPathPossible(grid)``` that takes a 2D list of integers representing the grid as input and returns ```true``` if there is a path from the top-left to the bottom-right cell, otherwise returns ```false```. **Sample Input:** ``` grid = [ [0, 0, 1], [1, 0, 1], [1, 0, 0] ] ``` **Sample Output:** ``` true ``` **Explanation:** There exists a path from top-left to bottom-right cell in the given grid: (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2).","solution":"def isPathPossible(grid): Determines if there is a path from the top-left to the bottom-right in a given grid. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False from collections import deque n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n - 1, m - 1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"Consider a grid of size N times N filled with integers from 1 to N^2 in a spiral order starting from the top left corner and going inwards in a clockwise direction. Given an integer N, your task is to generate this N times N spiral matrix. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a single integer N indicating the size of the grid. -----Output----- For each test case, print N lines; each of them should contain N space-separated integers arranged in spiral order. -----Constraints----- - 1 le T le 10 - 1 le N le 100 -----Subtasks----- Subtask #1 (100 points): Original constraints -----Example Input----- 1 3 -----Example Output----- 1 2 3 8 9 4 7 6 5 -----Example Input----- 1 4 -----Example Output----- 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 -----Explanation----- In the first example, a 3 times 3 grid is formed in spiral order: ``` 1 2 3 8 9 4 7 6 5 ``` In the second example, a 4 times 4 grid is formed in spiral order: ``` 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 ```","solution":"def generate_spiral_matrix(N): Generates a NxN spiral matrix filled with integers from 1 to N^2. matrix = [[0] * N for _ in range(N)] num = 1 layer = 0 while num <= N * N: for i in range(layer, N - layer): matrix[layer][i] = num num += 1 for i in range(layer + 1, N - layer): matrix[i][N - layer - 1] = num num += 1 if layer < N - layer - 1: for i in range(N - layer - 2, layer - 1, -1): matrix[N - layer - 1][i] = num num += 1 for i in range(N - layer - 2, layer, -1): matrix[i][layer] = num num += 1 layer += 1 return matrix def solve_line_by_line(T, test_cases): results = [] for N in test_cases: matrix = generate_spiral_matrix(N) results.append(matrix) return results"},{"question":"# Factorial Digit Sum Implement a function `factorialDigitSum(n)` that calculates the sum of the digits in the factorial of `n`. For example, the factorial of 5 is 120, and the sum of its digits is 1 + 2 + 0 = 3. Your implementation should be efficient and able to handle relatively large values of `n`. You may assume that the input `n` is always a non-negative integer. Examples: ```python factorialDigitSum(5) # should return 3 because 5! = 120 and 1 + 2 + 0 = 3 factorialDigitSum(10) # should return 27 because 10! = 3628800 and 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27 factorialDigitSum(20) # should return 54 because 20! = 2432902008176640000 and the sum of these digits is 54 ``` Constraints: - You may use iterative or recursive approaches to compute the factorial. - Consider using an arbitrary-precision arithmetic library if necessary, since factorials grow very large, very fast. - Optimize to handle values of `n` up to at least 100. Implement your solution using a language of your choice and ensure your function/method is covered by appropriate test cases to validate its correctness.","solution":"import math def factorialDigitSum(n): Returns the sum of the digits in the factorial of `n`. # Calculate factorial of n factorial_value = math.factorial(n) # Convert factorial value to string to iterate over each digit factorial_str = str(factorial_value) # Sum up the digits of the factorial digit_sum = sum(int(digit) for digit in factorial_str) return digit_sum"},{"question":"Write a function that receives a string of lowercase alphabetic characters and digits, and determines the longest substring consisting of unique characters. The function should return the start and end indices (inclusive) of this substring. If there are multiple substrings, return the one that appears first. # Examples ```python find_longest_unique_substring(\\"abcabcbb\\") = (0, 2) # The longest substring without repeating characters is \\"abc\\", from index 0 to 2 find_longest_unique_substring(\\"bbbbb\\") = (0, 0) # The longest substring without repeating characters is \\"b\\", from index 0 to 0 find_longest_unique_substring(\\"pwwkew\\") = (2, 4) # The longest substring without repeating characters is \\"wke\\", from index 2 to 4 find_longest_unique_substring(\\"aab\\") = (1, 2) # The longest substring without repeating characters is \\"ab\\", from index 1 to 2 ``` # Constraints - The input string will have at least one character. - The input string will consist only of lowercase alphabetic characters and digits. The function should have the following signature: ```python def find_longest_unique_substring(s: str) -> Tuple[int, int]: # implementation goes here ``` When implementing the function: - You may use additional helper functions if needed. - Ensure that the solution efficiently handles longer input strings. Good luck!","solution":"def find_longest_unique_substring(s: str) -> tuple[int, int]: Returns the start and end indices (inclusive) of the longest substring consisting of unique characters. # Tracking the last seen index of each character last_seen = {} start = 0 max_len = 0 max_start = 0 max_end = 0 for end in range(len(s)): if s[end] in last_seen and last_seen[s[end]] >= start: start = last_seen[s[end]] + 1 last_seen[s[end]] = end current_len = end - start + 1 if current_len > max_len: max_len = current_len max_start = start max_end = end return (max_start, max_end)"},{"question":"You are given two non-empty strings, `str1` and `str2`. Your goal is to create a function that finds and returns the longest substring that appears in both strings. If there is a tie, return any one of the longest common substrings. **Note:** The substrings must be contiguous sequences and case-sensitive. # Example ```python str1 = \\"abcdef\\" str2 = \\"zbcdf\\" Output: \\"bcd\\" str1 = \\"12345\\" str2 = \\"235\\" Output: \\"23\\" ```","solution":"def longest_common_substring(str1, str2): Returns the longest common substring between two given strings. If there is a tie, returns any one of the longest common substrings. n, m = len(str1), len(str2) # DP table initialized to 0 dp = [[0] * (m + 1) for _ in range(n + 1)] # To hold the maximum length of substring max_length = 0 # To hold the ending index of longest common substring in str1 end_idx = 0 for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_length: max_length = dp[i][j] end_idx = i return str1[end_idx - max_length: end_idx]"},{"question":"Employee Efficiency Calculation: Task Management Introduction In a software development company, each employee receives a set of tasks to complete within a given workday. Each task has a specific time duration associated with it, and employees have an 8-hour workday (480 minutes). The goal is to evaluate each employee\'s efficiency based on the total time taken to complete their tasks compared to the standard 8 hours. Task You will be given a list of employees, where each employee is represented by a dictionary containing their name and a list of task durations (in minutes). Your task is to write a function that calculates the efficiency of each employee as a percentage of the 8-hour workday they used to complete their tasks. The efficiency is calculated as: [ text{Efficiency} = left( frac{text{Total Time Spent on Tasks}}{480} right) times 100 ] Return a dictionary where each key is the employee\'s name and the value is their efficiency rounded to 2 decimal places. Function Signature ```python def calculate_efficiency(employees: list) -> dict: pass ``` Input - `employees`: A list of dictionaries, where each dictionary has two keys: - `name` (str): The name of the employee. - `tasks` (list): A list of integers representing the durations of tasks in minutes. Output - A dictionary where each key is the employee\'s name and the value is their efficiency as a percentage (float), rounded to 2 decimal places. Examples ```python # Example 1 employees = [ {\\"name\\": \\"Alice\\", \\"tasks\\": [120, 240, 60]}, {\\"name\\": \\"Bob\\", \\"tasks\\": [300, 100, 80]}, {\\"name\\": \\"Charlie\\", \\"tasks\\": [480]} ] calculate_efficiency(employees) # Output: {\\"Alice\\": 87.50, \\"Bob\\": 100.00, \\"Charlie\\": 100.00} # Example 2 employees = [ {\\"name\\": \\"Dave\\", \\"tasks\\": [200, 150, 100]}, {\\"name\\": \\"Eve\\", \\"tasks\\": [120, 130, 70, 50]}, ] calculate_efficiency(employees) # Output: {\\"Dave\\": 93.75, \\"Eve\\": 77.08} ``` Constraints - All task durations will be non-negative integers. - There will be at least one employee in the list. - Task durations for an employee will not exceed the 8-hour workday limit (i.e., the sum of durations will be <= 480 minutes).","solution":"def calculate_efficiency(employees): Calculates the efficiency of each employee as a percentage of the 8-hour workday they used to complete their tasks. Args: employees (list): A list of dictionaries, where each dictionary has two keys: \'name\' (str): The name of the employee. \'tasks\' (list): A list of task durations in minutes (int). Returns: dict: A dictionary where each key is the employee\'s name and the value is their efficiency as a percentage (float), rounded to 2 decimal places. efficiency_dict = {} for employee in employees: total_time = sum(employee[\'tasks\']) efficiency = (total_time / 480) * 100 efficiency_dict[employee[\'name\']] = round(efficiency, 2) return efficiency_dict"},{"question":"Given a string that represents a paragraph, write a function that identifies and returns the word with the highest frequency. If there are multiple words with the same highest frequency, return the word that appears first in the paragraph. The function should ignore punctuation and be case-insensitive. For example: ```python paragraph = \\"Hello world! This is a test. Hello everyone. This test is simple.\\" ``` returns `\'hello\'`","solution":"import re from collections import Counter def most_frequent_word(paragraph): Returns the word with the highest frequency in the given paragraph. If there are multiple words with the same highest frequency, returns the word that appears first in the paragraph. # Normalize the paragraph: lowercase and remove punctuation cleaned_paragraph = re.sub(r\'[^ws]\', \'\', paragraph.lower()) # Split the paragraph into words words = cleaned_paragraph.split() # Count the frequency of each word word_counts = Counter(words) # Find the word with the highest frequency max_frequency = max(word_counts.values()) for word in words: if word_counts[word] == max_frequency: return word"},{"question":"You are given a matrix filled with distinct positive integers. Your task is to find the longest path in the matrix such that the path is strictly increasing in value. The path can move up, down, left, or right from the current position but cannot revisit the same position within the same path. Write a function `longestIncreasingPath(matrix: List[List[int]]) -> int` that takes a 2D list `matrix` as an argument and returns the length of the longest increasing path. # Constraints: - The dimensions of the matrix will not exceed 100x100. - Each element in the matrix is a distinct positive integer. # Example ```python matrix = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] longestIncreasingPath(matrix) # Returns 4, as the longest increasing path is [1, 2, 6, 9]. matrix = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] longestIncreasingPath(matrix) # Returns 4, as the longest increasing path is [3, 4, 5, 6]. ``` # Note: - You need to find the length of the path, not the path itself. - Consider memoization to optimize the performance of your solution.","solution":"from typing import List def longestIncreasingPath(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 def dfs(x, y): if cache[x][y] != -1: return cache[x][y] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] > matrix[x][y]: length = 1 + dfs(nx, ny) max_length = max(max_length, length) cache[x][y] = max_length return cache[x][y] m, n = len(matrix), len(matrix[0]) cache = [[-1] * n for _ in range(m)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] return max(dfs(x, y) for x in range(m) for y in range(n))"},{"question":"Write a function `kth_permutation(n, k)` that returns the k-th permutation sequence of the set {1, 2, ..., n}. The function should take two integers, n and k, and it should return a string representing the k-th permutation combination in lexicographical order. Assume k is 1-indexed. For example: ```python kth_permutation(3, 3) === \'213\' kth_permutation(4, 9) === \'2314\' kth_permutation(3, 6) === \'321\' ```","solution":"import math def kth_permutation(n, k): Returns the k-th permutation sequence of the set {1, 2, ..., n}. nums = list(range(1, n + 1)) k -= 1 # convert 1-indexed to 0-indexed fact = math.factorial(n - 1) result = [] for i in range(n - 1, -1, -1): index = k // fact result.append(str(nums[index])) nums.pop(index) if i != 0: k %= fact fact //= i return \'\'.join(result)"},{"question":"Given a string containing only lowercase alphabets, you need to find the longest substring with all distinct characters. For example, in the string \\"abcabcbb\\", the longest substring with all distinct characters is \\"abc\\" which has a length of 3. You need to return the length of this substring. Function Signature: `def longest_distinct_substring(s: str) -> int:` # Constraints: - The input string `s` will have a length between 1 and 1000. - The input string will contain only lowercase English letters (a-z). # Examples: 1. For the input `s = \\"abcabcbb\\"`, the output should be `3`. 2. For the input `s = \\"bbbbb\\"`, the output should be `1`. 3. For the input `s = \\"pwwkew\\"`, the output should be `3`, as the longest substring with all distinct characters is \\"wke\\". Write a function that efficiently solves the problem using appropriate data structures.","solution":"def longest_distinct_substring(s: str) -> int: Returns the length of the longest substring with all distinct characters. Args: s (str): The input string containing only lowercase alphabets. Returns: int: The length of the longest substring with all distinct characters. n = len(s) if n == 0: return 0 char_index = {} max_length = 0 start = 0 for end in range(n): current_char = s[end] if current_char in char_index: start = max(start, char_index[current_char] + 1) char_index[current_char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function that takes an integer `n` and returns a list of all possible combinations of balanced parentheses of length `2n`. For example, if `n` is 3, the function should return combinations of parentheses strings of length 6 that are properly balanced. Examples ```python For n = 1: [\\"()\\"] For n = 2: [\\"(())\\", \\"()()\\"] For n = 3: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] ```","solution":"def generate_parentheses(n): Returns a list of all possible combinations of balanced parentheses of length 2n. def backtrack(s=\'\', left=0, right=0, parentheses_list=[]): if len(s) == 2 * n: parentheses_list.append(s) return parentheses_list if left < n: backtrack(s+\'(\', left+1, right, parentheses_list) if right < left: backtrack(s+\')\', left, right+1, parentheses_list) return parentheses_list return backtrack()"},{"question":"Alice and Bob are playing a game involving lists of integers. Alice gives Bob a list and Bob has to determine the length of the longest subarray whose sum is equal to a given value, `k`. Help Bob by writing a function to calculate this length. -----Input----- The first line contains two integers, `n` (length of the array) and `k` (the target sum). The next line contains `n` integers representing the elements of the array. -----Output----- Print an integer representing the length of the longest subarray with sum equal to `k`. If no such subarray exists, print 0. -----Constraints----- - 1 ≤ n ≤ 10^5 - -10^4 ≤ array elements ≤ 10^4 - -10^9 ≤ k ≤ 10^9 -----Example----- Input: 5 15 10 5 2 7 1 Output: 4 -----Explanation----- The longest subarray with sum equal to `k` is [5, 2, 7, 1] which has a sum of 15 and length 4. Another example: Input: 6 0 -1 1 2 -3 3 -1 Output: 3 Explanation: The longest subarray with sum equal to `k` is [1, 2, -3] which has a sum of 0 and length 3.","solution":"def longest_subarray_with_sum(nums, k): Returns the length of the longest subarray whose sum is equal to k. prefix_sum_map = {} current_sum = 0 max_length = 0 for i, num in enumerate(nums): current_sum += num if current_sum == k: max_length = i + 1 if (current_sum - k) in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[current_sum - k]) if current_sum not in prefix_sum_map: prefix_sum_map[current_sum] = i return max_length"},{"question":"Write a function that takes a string consisting of words separated by spaces, and returns the longest word in the string. If there are multiple words that are the longest, return the first one. Input :: \\"The quick brown fox jumped over the lazy dog\\" Output :: \\"jumped\\" If your language supports it, try using a built-in string manipulation function.","solution":"def longest_word(sentence): Returns the longest word in the sentence. If there are multiple longest words, returns the first one. words = sentence.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"-----Problem description.----- This problem focuses on finding the smallest positive integer missing from an unsorted array. Given an array of integers, you are supposed to identify the smallest positive integer that is not present in the array. -----Input----- - The first line of each test case contains an integer T. - Each of the following T lines contains an integer n followed by n space-separated integers, which represent the array. -----Output----- - Output should contain T lines, each line with the smallest positive integer not present in the corresponding array. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 105 - -106 ≤ arr[i] ≤ 106 -----Example----- Input: 2 6 1 2 0 -1 3 4 4 1 2 3 7 Output: 5 4 -----Explanation----- In the first test case, the array is [1, 2, 0, -1, 3, 4]. The smallest positive integer not present in the array is 5. In the second test case, the array is [1, 2, 3, 7]. The smallest positive integer not present in the array is 4.","solution":"def smallest_missing_positive(arr): Returns the smallest positive integer not present in the array `arr`. n = len(arr) # Step to mark numbers (num) out of index range (1 to n). for i in range(n): if arr[i] <= 0 or arr[i] > n: arr[i] = n + 1 # Marking the presence of elements. for i in range(n): num = abs(arr[i]) if num <= n: arr[num - 1] = -abs(arr[num - 1]) # Finding the smallest missing positive number. for i in range(n): if arr[i] > 0: return i + 1 return n + 1 def solve(T, test_cases): Solves T test cases of the problem. res = [] for i in range(T): n, arr = test_cases[i] res.append(smallest_missing_positive(arr)) return res"},{"question":"A permutation of a string is defined as a rearrangement of its characters. Given a string S consisting of lowercase English letters, find the lexicographically smallest permutation of S such that no two consecutive characters in the permutation are the same. If there is no such permutation, return \\"Not Possible\\". -----Input----- The input consists of a single line containing the string S. -----Output----- Output a single line containing the lexicographically smallest permutation of S without consecutive characters being the same. If no such permutation exists, output \\"Not Possible\\". -----Constraints----- - 1 ≤ |S| ≤ 1000 - S consists of only lowercase English letters. -----Examples----- Input aabb Output abab Input aaab Output Not Possible -----Explanation----- In the first example, \\"abab\\" is the lexicographically smallest permutation where no two consecutive characters are the same. In the second example, it is impossible to rearrange the characters to satisfy the condition, hence the output is \\"Not Possible\\".","solution":"from heapq import heappop, heappush from collections import Counter def smallest_non_adjacent_permutation(S): cnt = Counter(S) max_char = max(cnt, key=cnt.get) if cnt[max_char] > (len(S) + 1) // 2: return \\"Not Possible\\" result = [] pq = [] for char, freq in cnt.items(): heappush(pq, (-freq, char)) prev_freq, prev_char = 0, \'\' while pq: freq, char = heappop(pq) result.append(char) if prev_freq < 0: heappush(pq, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char return \'\'.join(result)"},{"question":"You are given a sequence of n integers where each integer is either 1 or 0. Your task is to determine the minimum number of flips to make all the 1\'s consecutive. A flip consists of changing a 0 to 1 or a 1 to 0. -----Input----- - The first line of the input contains an integer n. - The next line contains n space-separated integers (0 or 1) representing the sequence. -----Output----- Output a single integer, the minimum number of flips required. -----Constraints----- - 1 ≤ n ≤ 100,000 - Each integer is either 0 or 1 -----Example----- Input: 5 0 1 0 1 1 Output: 1 -----Explanation----- In this sequence, you can flip the second 0 to 1 to make the 1\'s consecutive, resulting in the sequence 0 1 1 1 1.","solution":"def min_flips_to_consecutive_ones(n, sequence): Determine the minimum number of flips to make all the 1\'s consecutive. Parameters: - n (int): The length of the sequence - sequence (list of int): The sequence of 0s and 1s Returns: - int: The minimum number of flips required # converting list to string to easily check for segment of \'1\'s and \'0\'s s = \'\'.join(map(str, sequence)) # Find all segments of \'0\'s between \'1\'s (flips needed to convert these segments into \'1\'s) segments_of_zeros = s.split(\'1\') # If the sequence has \'1\'s, we exclude the leading and trailing zeros segments if \'1\' in s: return len([seg for seg in segments_of_zeros[1:-1] if seg]) else: # If no \'1\'s are present in the sequence, no need for flips return 0"},{"question":"You are given an array of integers representing the heights of trees in a forest, along with an integer `k` representing the height of your saw. Your task is to determine the total amount of wood collected if you cut all the trees that are taller than `k` down to a height of `k`. Each tree can be cut individually. For example, given the array `[20, 15, 10, 17]` and `k = 15`, you would cut the trees as follows: - The tree with height 20 would be cut down to 15, producing 5 units of wood. - The tree with height 15 would not be cut, producing 0 units of wood. - The tree with height 10 is shorter than 15, so it remains unchanged, producing 0 units of wood. - The tree with height 17 would be cut down to 15, producing 2 units of wood. Thus, the total amount of wood collected would be `[5 + 0 + 0 + 2] = 7`. Your function signature should look like: ```python def wood_collected(heights: List[int], k: int) -> int: pass ``` Complete the function to return the total amount of wood collected.","solution":"from typing import List def wood_collected(heights: List[int], k: int) -> int: Returns the total amount of wood collected by cutting all trees taller than `k` down to the height of `k`. Parameters: heights (List[int]): A list of integers representing the heights of the trees. k (int): The height to cut trees down to if they are taller than this height. Returns: int: The total amount of wood collected. total_wood = 0 for height in heights: if height > k: total_wood += (height - k) return total_wood"},{"question":"Mike is a passionate gardener who loves arranging his garden with colorful flowers. He has a row of flower pots, each with flowers of a certain color. Mike wants to find the longest segment of the row that contains at most two different colors of flowers. You need to write a program to help Mike find the length of the longest segment of flower pots with at most two different colors. -----Input:----- The first line of input is an integer T, the number of test cases. Each test case starts with an integer N, the number of flower pots. The following line contains N space-separated integers, where each integer represents the color of flowers in a particular pot. -----Output:----- For each test case, output a single line containing the length of the longest segment with at most two different colors. -----Constraints:----- 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 1 ≤ color ≤ 1000000000 -----Example:----- Input: 1 7 1 2 1 2 3 4 1 Output: 4 Explanation: The longest segment with at most two different colors is [1, 2, 1, 2] which has a length of 4.","solution":"def longestSegmentWithTwoColors(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] colors = test_cases[i][1] if N == 0: results.append(0) continue left = 0 right = 0 color_count = {} max_len = 1 while right < N: if colors[right] in color_count: color_count[colors[right]] += 1 else: color_count[colors[right]] = 1 while len(color_count) > 2: color_count[colors[left]] -= 1 if color_count[colors[left]] == 0: del color_count[colors[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 results.append(max_len) return results"},{"question":"Implement a function that takes a string as an input and returns the count of distinct letters that appear more than once in the string. The comparison should be case-insensitive, but the count should be based on the original case.","solution":"def count_distinct_repeated_letters(s): Counts the distinct letters that appear more than once in the string. Args: s (str): The input string. Returns: int: The count of distinct letters that appear more than once. from collections import Counter # Normalize to lowercase for case-insensitive comparison normalized = s.lower() # Count occurrences of each character counter = Counter(normalized) # Filter to find characters that appear more than once repeated_characters = {char for char, count in counter.items() if count > 1} return len(repeated_characters)"},{"question":"=====Problem Statement===== Given a list of integers, determine the length of its longest contiguous subsequence that contains elements with strictly increasing values. =====Input Format===== The first line contains an integer n, the number of elements in the list. The second line contains an array A[] of n integers each separated by a space. =====Constraints===== 1≤n≤1000 -10^6≤A[i]≤10^6 =====Output Format===== Print the length of the longest contiguous subsequence of strictly increasing values.","solution":"def longest_increasing_subsequence_length(arr): Determines the length of the longest contiguous subsequence with strictly increasing values. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Create a function that takes an integer array and a target sum, and returns all the unique combinations of elements in the array where the chosen numbers sum to the target sum. The same number from the array may be used an unlimited number of times in the combination. All numbers (including target) will be positive integers. The combinations should be returned as a list of lists. Example: ```python combination_sum([2, 3, 6, 7], 7) #=> [[2, 2, 3], [7]] combination_sum([2, 3, 5], 8) #=> [[2, 2, 2, 2], [2, 3, 3], [3, 5]] ```","solution":"def combination_sum(candidates, target): def backtrack(remainder, comb, start): if remainder == 0: result.append(list(comb)) return elif remainder < 0: return for i in range(start, len(candidates)): comb.append(candidates[i]) backtrack(remainder - candidates[i], comb, i) comb.pop() result = [] backtrack(target, [], 0) return result"},{"question":"Given an array of integers, find the length of the longest subarray such that all elements are consecutive (the elements can be in any order). If the array is empty, return 0. Example 1: Input: [1, 9, 3, 10, 4, 20, 2] Output: 4 Explanation: The longest consecutive elements subarray is [1, 2, 3, 4]. Its length is 4. Example 2: Input: [10, 5, 6, 1, 2, 3] Output: 3 Explanation: The longest consecutive elements subarray is [5, 6, 7] or [1, 2, 3]. Both have a length of 3.","solution":"def longest_consecutive_subarray(arr): Returns the length of the longest subarray with consecutive elements. if not arr: return 0 arr_set = set(arr) longest = 0 for num in arr: if num - 1 not in arr_set: current_num = num current_streak = 1 while current_num + 1 in arr_set: current_num += 1 current_streak += 1 longest = max(longest, current_streak) return longest"},{"question":"You are designing a data analysis software for a supermarket. The supermarket keeps track of the prices of different items over several days and wants to analyze the trends of these prices to identify the item with the most stable price, i.e., the item whose prices have the minimum standard deviation over the recorded days. -----Input:----- The first line consists of two integers N and D, representing the number of different items in the supermarket and the number of days for which the prices have been recorded respectively. The next N lines each contain D space-separated integers, representing the prices of each item over the D days. -----Output:----- Print a single integer, the index (1-based) of the item with the minimum standard deviation in its recorded prices. If more than one item has the same standard deviation, print the smallest index among them. -----Constraints----- - 1 leq N, D leq 1000 - 0 leq price leq 100000 -----Sample Input:----- 3 4 10 15 10 20 5 4 5 6 10 10 10 10 -----Sample Output:----- 3 Explanation: - The standard deviation of the prices for the first item is calculated as follows: - Mean = (10 + 15 + 10 + 20) / 4 = 13.75 - Variance = ((10-13.75)^2 + (15-13.75)^2 + (10-13.75)^2 + (20-13.75)^2) / 4 = 16.6875 - Standard deviation = sqrt(16.6875) ≈ 4.08 - The standard deviation of the prices for the second item is: - Mean = (5 + 4 + 5 + 6) / 4 = 5 - Variance = ((5-5)^2 + (4-5)^2 + (5-5)^2 + (6-5)^2) / 4 = 0.5 - Standard deviation = sqrt(0.5) ≈ 0.71 - The standard deviation of the prices for the third item is: - Mean = (10 + 10 + 10 + 10) / 4 = 10 - Variance = ((10-10)^2 + (10-10)^2 + (10-10)^2 + (10-10)^2) / 4 = 0 - Standard deviation = sqrt(0) = 0 The third item has the smallest standard deviation (0). Hence, the index 3 is printed.","solution":"import math def find_most_stable_item(prices): Takes a nested list where each list contains prices of an item over several days. Returns the 1-based index of the item with the minimum standard deviation in its recorded prices. def standard_deviation(price_list): mean = sum(price_list) / len(price_list) variance = sum((x - mean) ** 2 for x in price_list) / len(price_list) return math.sqrt(variance) min_sd = float(\'inf\') min_index = -1 for i, price_list in enumerate(prices): sd = standard_deviation(price_list) if sd < min_sd: min_sd = sd min_index = i return min_index + 1 # 1-based index"},{"question":"Imagine you are designing a simulation of a Mars rover exploring a grid of specified dimensions. The rover can move forward, turn left, and turn right. The initial position of the rover, its direction, and a series of commands will be provided. The goal is to determine the final position and direction of the rover after executing all the commands. Direction \'N\' corresponds to North (upwards in the grid), \'E\' corresponds to East (rightwards in the grid), \'S\' corresponds to South (downwards in the grid), and \'W\' corresponds to West (leftwards in the grid). The movement commands are: - \'M\': Move forward one grid cell in the direction the rover is currently facing. - \'L\': Turn left 90 degrees but do not move. - \'R\': Turn right 90 degrees but do not move. # Input: - grid_size: A tuple (n, m) representing the dimensions of the grid (n rows and m columns). - start_position: A tuple (x, y) representing the starting coordinates of the rover on the grid. - start_direction: A character indicating the initial direction the rover is facing (\'N\', \'E\', \'S\', or \'W\'). - commands: A string representing a sequence of movement commands (e.g., \\"MMRMLM\\"). # Output: - A tuple (final_x, final_y, final_direction) representing the final position and direction of the rover. # Constraints: - The rover will never move outside the bounds of the grid. - The grid dimensions will be positive integers. - The start position will always be within the bounds of the grid. # Example: ```python class MarsRover: def __init__(self, grid_size, start_position, start_direction, commands): self.grid_size = grid_size self.position = start_position self.direction = start_direction self.commands = commands def execute_commands(self): # Implement the function to process the commands and update position and direction pass # Example grid_size = (5, 5) start_position = (1, 2) start_direction = \'N\' commands = \\"LMLMLMLMM\\" rover = MarsRover(grid_size, start_position, start_direction, commands) final_position = rover.execute_commands() print(final_position) # Output should be (1, 3, \'N\') ``` You are to implement the class `MarsRover` and its method `execute_commands` to handle the movement and rotation of the rover based on the given commands.","solution":"class MarsRover: def __init__(self, grid_size, start_position, start_direction, commands): self.grid_size = grid_size self.position = start_position self.direction = start_direction self.commands = commands self.directions = [\'N\', \'E\', \'S\', \'W\'] def turn_left(self): index = self.directions.index(self.direction) self.direction = self.directions[(index - 1) % 4] def turn_right(self): index = self.directions.index(self.direction) self.direction = self.directions[(index + 1) % 4] def move_forward(self): x, y = self.position if self.direction == \'N\': self.position = (x, y + 1) elif self.direction == \'E\': self.position = (x + 1, y) elif self.direction == \'S\': self.position = (x, y - 1) elif self.direction == \'W\': self.position = (x - 1, y) def execute_commands(self): for command in self.commands: if command == \'L\': self.turn_left() elif command == \'R\': self.turn_right() elif command == \'M\': self.move_forward() return self.position[0], self.position[1], self.direction # Example usage: # grid_size = (5, 5) # start_position = (1, 2) # start_direction = \'N\' # commands = \\"LMLMLMLMM\\" # rover = MarsRover(grid_size, start_position, start_direction, commands) # final_position = rover.execute_commands() # print(final_position) # Output should be (1, 3, \'N\')"},{"question":"You are given a list of integers where every element appears exactly twice, except for one element which appears only once. Your task is to find the element that appears only once. You must solve it in linear runtime and without using extra memory (i.e., constant space complexity). Consider the example below: - Input: `[2, 3, 2, 4, 3, 5, 4]` - Output: `5` # Inputs and Outputs - **Input:** The input will consist of two lines. - The first line contains one integer `n` (`1 ≤ n ≤ 1000`) — the number of elements in the list. - The second line contains `2n + 1` integers, each integer in the list `a` (where -10^6 le a_i le 10^6). - **Output:** Print the single integer that appears only once in the list. # Example **Input:** ``` 3 2 3 2 4 3 5 4 ``` **Output:** ``` 5 ``` # Note To achieve the desired constant space complexity and linear runtime, consider using properties of XOR operation, as XORing a number with itself results in 0, and XORing a number with 0 results in the number itself.","solution":"def find_unique_element(n, a): Given the count of pairs and the list, returns the unique element that appears only once. unique_element = 0 for num in a: unique_element ^= num return unique_element"},{"question":"You are given a list of integers where each integer appears twice except for one integer which appears only once. Your task is to find the integer that appears only once. You must implement a solution with linear runtime complexity and use only constant extra space. For example: ```Python find_single([2, 2, 1]) = 1 find_single([4, 1, 2, 1, 2]) = 4 find_single([1]) = 1 ``` Additional test cases: ```Python find_single([17, 12, 18, 18, 12]) = 17 find_single([7, 3, 5, 3, 7, 9, 5]) = 9 ``` The input list will always contain at least one integer and the integer that appears only once will not change.","solution":"def find_single(nums): Find the integer that appears only once in the list where every other integer appears twice. result = 0 for num in nums: result ^= num return result"},{"question":"Robot Cleanup Humanity has started colonizing Mars, and as expected, different robots have been sent to help build and maintain the Martian habitats. One of the robots, Code-cleaner 3000, is responsible for cleaning up debris that comes from assembling different structures. Code-cleaner 3000 has a set of simple instructions that it follows to clean up the area. The cleaning area is a grid of size N x N. Code-cleaner 3000 starts at the top-left corner of the grid (0, 0). The robot can move right, down, left, or up to adjacent cells but it cannot move outside the grid or visit the same cell twice. Each cell may contain debris that will be cleaned when the robot moves into that cell. Your Task You need to write a function that generates a unique cleaning path for Code-cleaner 3000 to follow where each cell is visited exactly once. # Input An integer N, the size of the grid (2 ≤ N ≤ 20). # Output A list of tuples, where each tuple represents a coordinate (row, column) in the grid. The list should contain exactly N*N tuples denoting the cleaning path. # Example For N = 3, one possible output path could be: ``` [ (0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 1), (2, 0), (1, 0), (1, 1) ] ``` The given path is just one of the many valid paths. The path must visit all cells exactly once with the condition that the robot doesn\'t move outside the grid or revisit any cell. # Constraints 1. The robot can only move right, down, left, or up. 2. Every cell in the NxN grid must be visited exactly once. 3. The output path is not unique; any path that satisfies the rules is acceptable. Write a function `generate_cleaning_path(n)` that will take the grid size as input and return the list of tuples representing the cleaning path. ```python def generate_cleaning_path(n): pass # Example usage print(generate_cleaning_path(3)) ```","solution":"def generate_cleaning_path(n): Generates a unique cleaning path for Code-cleaner 3000 to follow. Parameters: n (int): Size of the grid (2 ≤ n ≤ 20) Returns: List[Tuple[int, int]]: A list of coordinates representing the cleaning path. path = [] for i in range(n): if i % 2 == 0: for j in range(n): path.append((i, j)) else: for j in range(n-1, -1, -1): path.append((i, j)) return path"},{"question":"Given a sequence of integers, you have to find the longest subsequence that is strictly increasing. Your task is to write a function that takes a list of integers and returns the length of the longest increasing subsequence (LIS). A subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Input A vector of integers where 1 <= vector.size() <= 1000 and -10^6 <= vector[i] <= 10^6. # Output An integer which corresponds to the length of the longest increasing subsequence. # Function Signature ```cpp int longestIncreasingSubsequence(std::vector<int>& nums); ``` # Example ```cpp longestIncreasingSubsequence({10, 9, 2, 5, 3, 7, 101, 18}); // Output: 4 (The longest increasing subsequence is [2, 3, 7, 18]) longestIncreasingSubsequence({0, 1, 0, 3, 2, 3}); // Output: 4 (The longest increasing subsequence is [0, 1, 2, 3]) longestIncreasingSubsequence({7, 7, 7, 7, 7, 7, 7}); // Output: 1 (The longest increasing subsequence is [7]) ```","solution":"def longest_increasing_subsequence(nums): Finds the length of the longest increasing subsequence in the list of integers. if not nums: return 0 lengths = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: lengths[i] = max(lengths[i], lengths[j] + 1) return max(lengths)"},{"question":"Write a function that takes a string containing a mathematical expression using addition, subtraction, multiplication, and division (without parentheses) and evaluates the expression. The function should return the result as a float when required (i.e., for divisions) or an integer otherwise. Consider operator precedence in the evaluation. Notes: * The input string will always be a valid mathematical expression (e.g., no consecutive operators like `++` or `--`). * Division by zero will not occur in the input strings. Examples ``` evaluate(\\"3+5*2\\") ==> 13 evaluate(\\"10+2/2\\") ==> 11.0 evaluate(\\"100-3*10\\") ==> 70 evaluate(\\"10/2*5-3\\") ==> 22.0 ```","solution":"def evaluate(expression): Evaluates a mathematical expression using addition, subtraction, multiplication, and division, taking operator precedence into account. import re import operator as op ops = { \'+\': (op.add, 1), \'-\': (op.sub, 1), \'*\': (op.mul, 2), \'/\': (op.truediv, 2) } def parse_expression(expression): Convert the expression into a list of numbers and operators. tokens = re.findall(r\'d+.d+|d+|[-+*/]\', expression) output = [] operators = [] for token in tokens: if token in ops: while (operators and operators[-1] in ops and ops[token][1] <= ops[operators[-1]][1]): output.append(operators.pop()) operators.append(token) else: output.append(float(token) if \'.\' in token else int(token)) while operators: output.append(operators.pop()) return output def evaluate_rpn(tokens): Evaluate the expression in Reverse Polish Notation. stack = [] for token in tokens: if token in ops: b = stack.pop() a = stack.pop() stack.append(ops[token][0](a, b)) else: stack.append(token) return stack[0] parsed_expr = parse_expression(expression) return evaluate_rpn(parsed_expr)"},{"question":"Given a string, determine if it is a palindrome after converting all uppercase letters to lowercase and removing all non-alphanumeric characters. -----Input----- A single line containing the string S, where 1 ≤ |S| ≤ 10^5. -----Output----- Output \\"YES\\" (without quotes) if the given string is a palindrome after performing the described operations; otherwise, output \\"NO\\". -----Example----- Input: A man, a plan, a canal, Panama Output: YES","solution":"import re def is_palindrome(s): Determines if the given string is a palindrome after converting all uppercase letters to lowercase and removing all non-alphanumeric characters. Params: s (str): The input string. Returns: str: \\"YES\\" if the processed string is a palindrome, \\"NO\\" otherwise. # Remove all non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is a palindrome if cleaned_string == cleaned_string[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"-----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single string P. The string P consists of lowercase English letters. -----Output:----- For each test case, print the length of the longest substring that contains exactly 2 distinct characters. -----Constraints----- textbf{Subtask 1} (20 points) - 1 leq T leq 10 - 1 leq |P| leq 10^{3} textbf{Subtask 2} (80 points) - 1 leq T leq 10 - 1 leq |P| leq 10^{5} -----Sample Input:----- 3 abcabcabc aaabbbcc abcdefg -----Sample Output:----- 2 6 2 -----EXPLANATION:----- For the first test case: - \\"ab\\" or \\"bc\\" or \\"ca\\" are the longest substrings with exactly 2 distinct characters. For the second test case: - \\"aaabbb\\" is the longest substring with exactly 2 distinct characters. For the third test case: - \\"ab\\" or \\"bc\\" or \\"cd\\" or \\"de\\" or \\"ef\\" or \\"fg\\" are the longest substrings with exactly 2 distinct characters, all of length 2.","solution":"def length_of_longest_substring_with_two_distinct(s): This function returns the length of the longest substring that contains exactly two distinct characters. if len(s) < 2: return 0 start, max_length = 0, 0 char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length def process_test_cases(T, test_cases): This function processes multiple test cases and returns the results. results = [] for s in test_cases: results.append(length_of_longest_substring_with_two_distinct(s)) return results"},{"question":"You have been placed in charge of managing a zoo. Recently, the zoo has started keeping track of animal movements between different habitats in a log. Your task is to analyze this data to determine the current location of every animal. Each entry in the log consists of two pieces of information: an animal and its movement, either to a new habitat or a rest area. The log is represented by an array of strings, where each string is in the format \\"animal -> destination.\\" The goal is to determine the final location of each animal after all movements have been completed. Input: * An array of strings representing the movement log, where each string is in the format \\"animal -> destination.\\" Output: * A dictionary where the keys are animals and the values are their final locations. Rules: - An animal can only be in one location at any given time. - If the same animal appears multiple times in the log, consider only its last recorded destination. - Ignore any animals with invalid movement logs or destinations specified as \\"Out of Zoo\\". Example: ```python movements = [ \\"Lion -> Savannah\\", \\"Tiger -> Jungle\\", \\"Bear -> Mountain\\", \\"Lion -> Den\\", \\"Elephant -> Field\\", \\"Tiger -> Rest Area\\", \\"Elephant -> Out of Zoo\\", \\"Monkey -> Tree\\", \\"Bear -> River\\" ] # Expected Output { \\"Lion\\": \\"Den\\", \\"Tiger\\": \\"Rest Area\\", \\"Bear\\": \\"River\\", \\"Monkey\\": \\"Tree\\" } ``` Write a function `track_movements(log)` that takes a list of movement logs and returns a dictionary representing the final location of each animal. ```python def track_movements(log): # Your code here ```","solution":"def track_movements(log): Determines the final location of each animal from a movement log. Parameters: log (list of str): List of strings representing animal movements. Returns: dict: Dictionary with the final locations of each animal. movements = {} for entry in log: animal, destination = entry.split(\\" -> \\") if destination != \\"Out of Zoo\\": movements[animal] = destination else: movements.pop(animal, None) # Remove animal if its destination is \\"Out of Zoo\\" return movements"},{"question":"# Remove Consecutive Duplicate Words Task Create a function `remove_consecutive_duplicate_words(sentence)` that takes a string sentence composed of multiple words separated by spaces, and removes all consecutive duplicate words. For example: ```python remove_consecutive_duplicate_words(\\"this is is a test test\\") == \\"this is a test\\" remove_consecutive_duplicate_words(\\"hello hello world\\") == \\"hello world\\" remove_consecutive_duplicate_words(\\"this this this is is a a test test test\\") == \\"this is a test\\" remove_consecutive_duplicate_words(\\"no duplicates here\\") == \\"no duplicates here\\" remove_consecutive_duplicate_words(\\"singleword\\") == \\"singleword\\" ``` In this function, consecutive duplicate words are defined as two or more identical words that appear in a row, and only one instance of such repeated words should be retained. # Constraints: - Each word in the sentence is separated by exactly one space. - The input string will consist solely of lowercase alphabetical characters and spaces. - Ensure the function addresses edge cases such as an empty string or a sentence without any duplicate words.","solution":"def remove_consecutive_duplicate_words(sentence): Returns a string with all consecutive duplicate words removed. if not sentence: return sentence words = sentence.split() result = [words[0]] for i in range(1, len(words)): if words[i] != words[i - 1]: result.append(words[i]) return \' \'.join(result)"},{"question":"Chef is practicing his programming skills by solving problems related to arrays. He has encountered a new problem and needs your help solving it. Given an array of integers, your task is to find the length of the longest contiguous subarray such that all elements in the subarray are divisible by a given integer D. If there are multiple subarrays of the same maximum length, return the length of the first one found. -----INPUT----- The first line of the input contains an integer T, denoting the number of test cases. Each test case follows with two lines. The first line of each test case contains two integers N and D, where N is the size of the array and D is the divisor. The second line contains N space-separated integers representing the array. -----OUTPUT----- For each test case, output a single line printing the length of the longest contiguous subarray that satisfies the condition, in the format Case #T: L, where T is the Tth test case running and L is the length of the corresponding subarray. -----CONSTRAINTS----- 1 < T < 50 1 < N < 105 1 < D < 100 -----EXAMPLE----- Input: 2 8 3 1 3 6 9 12 15 18 21 5 2 5 10 15 20 25 Output: Case #1: 7 Case #2: 1 Note: In the first test case, the longest subarray where all elements are divisible by 3 is [3, 6, 9, 12, 15, 18, 21], which has a length of 7. In the second test case, each element is divisible by 2, but they are not contiguous, so the longest contiguous subarray is just one element long.","solution":"def longest_subarray_divisible_by_d(test_cases): results = [] for case_num, (n, d, array) in enumerate(test_cases, start=1): max_len = 0 current_len = 0 for num in array: if num % d == 0: current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 results.append(f\\"Case #{case_num}: {max_len}\\") return results # Helper function to parse input for testing and run the above function def parse_input_and_find_longest_subarray(input_data): # Splitting input lines lines = input_data.strip().split(\'n\') # Number of test cases T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): # First line of each case (N and D) N, D = map(int, lines[index].split()) index += 1 # Second line of each case (array elements) array = list(map(int, lines[index].split())) index += 1 # Append this case to the list test_cases.append((N, D, array)) return longest_subarray_divisible_by_d(test_cases)"},{"question":"Maximal Subarray Sum Alice has recently learned about subarrays and is quite fascinated by them. A subarray is a contiguous part of an array. She has an array of integers and wants to find out the sum of the subarray with the maximum sum. Given an array of integers, can you help Alice find the maximum possible sum of any subarray within given limits? -----Input:----- - The first line contains a single integer T - the number of test cases. - For each test case: - The first line contains an integer N - the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. -----Output:----- - For each test case, output a single integer - the maximum sum of any subarray for the given array. -----Constraints:----- - 1 ≤ T ≤ 500 - 1 ≤ N ≤ 500 - -10^6 ≤ A[i] ≤ 10^6 -----Sample Input:----- 3 5 1 2 3 -2 5 4 -1 -2 -3 -4 6 -2 -3 4 -1 -2 1 5 -3 -----Sample Output:----- 9 -1 7 -----Explanation:----- For the first test case: The maximum sum comes from the subarray [1, 2, 3, -2, 5] which sums to 9. For the second test case: The maximum sum comes from the subarray [-1] as all numbers are negative, and hence the least negative is the largest sum. For the third test case: The maximum sum comes from the subarray [4, -1, -2, 1, 5] which sums to 7.","solution":"def max_subarray_sum(arr): Returns the maximum possible sum of any subarray in arr. max_so_far = arr[0] current_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) max_so_far = max(max_so_far, current_max) return max_so_far def solve(T, test_cases): results = [] for i in range(T): N, array = test_cases[i] results.append(max_subarray_sum(array)) return results"},{"question":"Write a function that takes a string as input and returns a new string where every uppercase letter has been replaced with its lowercase counterpart, and every lowercase letter with its uppercase counterpart. Maintain all other characters unchanged. Examples: `Hello World! -> hELLO wORLD!` `Python3.8 -> pYTHON3.8` `aBcDeFgHiJ -> AbCdEfGhIj` `12345 -> 12345` *N: No special libraries or functions allowed other than the basic string operations.*","solution":"def swap_case(s): Returns a new string where every uppercase letter has been replaced with its lowercase counterpart, and every lowercase letter with its uppercase counterpart. All other characters remain unchanged. return s.swapcase()"},{"question":"Design a function to generate compressed versions of a string composed of lowercase English alphabet characters. The objective is to represent consecutive repeating characters using their count followed by the character itself. If a character does not repeat, it should remain as it is in the compressed version. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Next T lines contain strings consisting of only lowercase English alphabet characters. -----Output----- - For each input, print the corresponding compressed version of the string. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ Length of each string ≤ 1000 -----Example----- Input: 2 aabbccc abcd Output: 2a2b3c abcd -----Explanation----- In the first example, - \'aabbccc\' can be compressed to \'2a2b3c\' - \'aa\' is 2 consecutive \'a\'s - \'bb\' is 2 consecutive \'b\'s - \'ccc\' is 3 consecutive \'c\'s In the second example, - \'abcd\' remains \'abcd\' since there are no consecutive repeating characters.","solution":"def compress_string(s): Compress the given string by representing consecutive repeating characters using their count followed by the character. compressed = [] i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 if count > 1: compressed.append(f\\"{count}{s[i]}\\") else: compressed.append(s[i]) i += 1 return \'\'.join(compressed) def compress_strings(strings): Takes a list of strings and returns a list of their compressed versions. return [compress_string(s) for s in strings]"},{"question":"Create a function that verifies the validity of a given Sudoku puzzle solution. The function will accept a 9x9 grid of integers, where 0 represents empty cells, and non-zero integers (1-9) represent the digits placed in the puzzle. A valid Sudoku solution must satisfy the following conditions: 1. Each row must contain the digits 1-9 with no repetition. 2. Each column must contain the digits 1-9 with no repetition. 3. Each of the nine 3x3 sub-grids must contain the digits 1-9 with no repetition. If all three conditions are met, the function should return `True`. Otherwise, it should return `False`. ```python def is_valid_sudoku(grid): # Your implementation here pass # Example usage: grid = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] print(is_valid_sudoku(grid)) # Should return False as the grid is currently incomplete ```","solution":"def is_valid_sudoku(grid): def is_valid_block(block): block = [num for num in block if num != 0] return len(block) == len(set(block)) def get_row(grid, row): return grid[row] def get_col(grid, col): return [grid[row][col] for row in range(9)] def get_subgrid(grid, row, col): return [grid[r][c] for r in range(row, row+3) for c in range(col, col+3)] for i in range(9): if not is_valid_block(get_row(grid, i)): return False if not is_valid_block(get_col(grid, i)): return False for i in range(0, 9, 3): for j in range(0, 9, 3): if not is_valid_block(get_subgrid(grid, i, j)): return False return True"},{"question":"Write a function `MatrixRotation` that rotates a square matrix (2D array) by 90 degrees clockwise. For example: Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Expected Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] Your function should modify the matrix in-place and does not need to return anything.","solution":"def MatrixRotation(matrix): Rotates the given square matrix by 90 degrees clockwise in-place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Write a function that takes an integer n and returns a list containing the prime numbers less than n. The numbers in the list should be in ascending order. Examples: getPrimes(10) => returns [2, 3, 5, 7] getPrimes(20) => returns [2, 3, 5, 7, 11, 13, 17, 19] getPrimes(2) => returns [] Note: - A prime number is a positive integer greater than 1 that is not divisible by any other numbers except 1 and itself. - Ensure your function has an efficient algorithm to handle larger values of n.","solution":"def getPrimes(n): Returns a list of prime numbers less than n. :param n: Integer :return: List of prime numbers less than n if n <= 2: return [] primes = [] is_prime = [True] * n is_prime[0] = is_prime[1] = False for i in range(2, n): if is_prime[i]: primes.append(i) for j in range(i*i, n, i): is_prime[j] = False return primes"},{"question":"--- You are given an array of integers where every element appears three times except for one. Find that single one which appears only once. Consider the following example: ``` Given the array: [2, 2, 3, 2] The element that appears only once is 3. You\'re required to implement the function: findUnique(arr: List[int]) -> int ``` Example: ``` findUnique([2, 2, 3, 2]) => 3 findUnique([0, 1, 0, 1, 0, 1, 99]) => 99 ``` # Constraints: - The length of the array will be in the range [1, 3 * 10^4]. - The array consists of integers where each integer appears exactly three times, except for one which appears exactly once. - Your algorithm should have a linear runtime complexity. # Hint: - You may not use extra space to store new elements. - Consider the bitwise operations to achieve the solution in linear time complexity (O(n)).","solution":"def findUnique(arr): Returns the element that appears only once in an array where every other element appears exactly three times. ones, twos = 0, 0 for num in arr: # \\"ones ^ num\\" is XOR operation with the current number # \\"& ~twos\\" ensures that if the number is in \'twos\', it will not be in \'ones\' ones = (ones ^ num) & ~twos # \\"twos ^ num\\" is XOR operation with the current number # \\"& ~ones\\" ensures that if the number is in \'ones\', it will not be in \'twos\' twos = (twos ^ num) & ~ones return ones"},{"question":"Write a method that takes a list of integers and returns the sum of the squares of all the even numbers in the list. *Consider edge cases such as an empty list or a list without any even numbers.* # Tests ```python sum_of_squares([1, 2, 3, 4, 5]) # => 20 sum_of_squares([10, 14, 3, 7]) # => 296 sum_of_squares([1, 3, 5, 7]) # => 0 sum_of_squares([]) # => 0 ```","solution":"def sum_of_squares(lst): Returns the sum of the squares of all the even numbers in the list. :param lst: List of integers :return: Sum of the squares of all even numbers in the list return sum(x ** 2 for x in lst if x % 2 == 0)"},{"question":"The kingdom of Gridland is under attack by an immense army of ogres coming from all directions. Queen Ada, the ruler of Gridland, needs to send a series of commands to her troops to set up defensive barriers around her kingdom. The kingdom is represented as an `n x n` grid, and the queen wants to erect barriers on all the border cells of this grid. Write a program that takes an integer `n` as input and outputs an `n x n` grid where border cells contain the character \'X\' (representing the barriers), and all other cells contain the character \'.\' (representing open land). **Example:** Input: ``` 5 ``` Output: ``` XXXXX X...X X...X X...X XXXXX ```","solution":"def gridland_defense(n): Generates an n x n grid for Gridland defense with \'X\' on the border cells and \'.\' inside. Args: n (int): size of the grid Returns: list: a list of strings representing the grid grid = [] for i in range(n): if i == 0 or i == n - 1: grid.append(\'X\' * n) else: grid.append(\'X\' + \'.\' * (n - 2) + \'X\') return grid"},{"question":"A group of friends went on a hiking trip and decided to play a game to pass their time. They brought a large bag of stones with them. The rules of the game are simple: 1. Each player, in their turn, can pick 1, 2, or 3 stones from the bag. 2. The player who picks the last stone wins the game. Given the number of stones `n` in the bag initially, determine if the starting player can always win the game assuming both players play optimally. The output should be a boolean value: `True` if the starting player can always win, otherwise `False`. Example 1: Input: 4 Output: True Explanation: The starting player can take 3 stones leaving 1 stone for the opponent. The opponent will have no choice but to take the last remaining stone, making the starting player win. Example 2: Input: 5 Output: False Explanation: If the starting player picks 1 stone, the opponent can then pick 3 stones (leaving 1 stone), and win in the next round. If the starting player picks 2 stones, the opponent can then pick 3 stones (leaving no stones), and win. If the starting player picks 3 stones, the opponent can then pick 1 stone (leaving 1 stone), and win in the next round. Note: The number of stones `n` will be in the range [1, 10^4].","solution":"def can_win_game(n): Determine if the starting player can always win the game given `n` stones. return n % 4 != 0"},{"question":"Your task is to implement a function that determines whether a given word can be constructed by concatenating one or more words from a given list of words. The input to your function will be a string `s` and a list of strings `words`. The function should return `True` if the string `s` can be constructed using one or more words from the list `words`, and `False` otherwise. Note that a word from the list can be reused multiple times. For example: - `canConstruct(\\"applepie\\", [\\"apple\\", \\"pie\\"])` should return `True` because \\"applepie\\" can be constructed by concatenating \\"apple\\" and \\"pie\\". - `canConstruct(\\"applepenapple\\", [\\"apple\\", \\"pen\\"])` should return `True` because \\"applepenapple\\" can be constructed by concatenating \\"apple\\", \\"pen\\", and \\"apple\\". - `canConstruct(\\"catsandog\\", [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"])` should return `False` because \\"catsandog\\" cannot be fully constructed using the words from the list. Implement the function `canConstruct(s, words):`. Hint: Consider using dynamic programming to check the substrings of `s` against the words in the list.","solution":"def canConstruct(s, wordDict): Determines if the string s can be constructed by concatenating one or more words from the provided list of words. :param s: A string to be constructed :param wordDict: A list of strings (words) :return: Boolean indicating if s can be fully constructed from wordDict word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)] # Example usage: # print(canConstruct(\\"applepie\\", [\\"apple\\", \\"pie\\"])) # Should return True # print(canConstruct(\\"catsandog\\", [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"])) # Should return False"},{"question":"A software company specializes in developing text editing tools. They have a special widget that processes text by identifying and extracting phone numbers from a given text. The company uses a specific format for phone numbers: `(XXX) XXX-XXXX` where `X` is a digit from 0 to 9. Your task is to write a function that accepts a string and extracts all valid phone numbers from it. The function should return an array of strings where each string is a valid phone number found in the input text. If no valid phone numbers are found, return an empty array. A valid phone number in this context strictly adheres to the format `(XXX) XXX-XXXX`. There could be multiple valid phone numbers in a single text, and they may be embedded within other words or sentences. Here are some examples to illustrate: ``` extractPhoneNumbers(\\"Call me at (123) 456-7890 or at (987) 654-3210.\\"); // [\\"(123) 456-7890\\", \\"(987) 654-3210\\"] extractPhoneNumbers(\\"Let\'s meet at noon. My number is (555) 123-4567.\\"); // [\\"(555) 123-4567\\"] extractPhoneNumbers(\\"No phone numbers here!\\"); // [] extractPhoneNumbers(\\"Reach out anytime: (000) 111-2222 work, (333) 444-5555 cell.\\"); // [\\"(000) 111-2222\\", \\"(333) 444-5555\\"] ``` Create a function `extractPhoneNumbers(text: string): string[]` that fulfills the requirements mentioned above.","solution":"import re def extractPhoneNumbers(text): Extracts all valid phone numbers from the given text. Parameters: text (str): Input text containing potential phone numbers. Returns: list: A list containing valid phone numbers in the format (XXX) XXX-XXXX. pattern = r\'(d{3}) d{3}-d{4}\' return re.findall(pattern, text)"},{"question":"John loves to collect stamps. Each stamp collection he owns consists of stamps with different values. However, John wants to reorganize his collections so that within each collection, the stamps are sorted in non-decreasing order of their values. John can swap any two stamps in a collection an unlimited number of times. Given several stamp collections, write a program to determine if each collection can be sorted such that all stamps within the collection are in non-decreasing order after some (possibly zero) number of swaps. -----Input:----- - First line will contain T, the number of collections. Then the collections follow. - The first line of each collection contains an integer n - the number of stamps in the collection. - The second line of each collection contains n space-separated integers representing the values of the stamps in that collection. -----Output:----- For each collection, output \\"YES\\" if it can be sorted in non-decreasing order, otherwise \\"NO\\". -----Constraints----- - 1 leq T leq 1000 - 1 leq n leq 1000 - Each value of the stamps is between 1 and 10^6 -----Sample Input:----- 3 5 4 3 2 5 1 4 1 3 2 4 6 6 5 4 3 2 1 -----Sample Output:----- YES YES YES -----Explanation:----- In the first collection, by swapping the following pairs, we can sort the collection: (4 & 1), (3 & 2), then (2 & 3) to get [1, 2, 3, 4, 5]. In the second collection, swapping 2 and 3 will result in [1, 2, 3, 4]. The third collection is a reverse sorted array that can be sorted to [1, 2, 3, 4, 5, 6] through a series of swaps.","solution":"def can_sort_collections(T, collections): result = [] for i in range(T): n = collections[i][0] stamps = collections[i][1] if stamps == sorted(stamps): result.append(\\"YES\\") else: result.append(\\"YES\\") return result"},{"question":"In this coding challenge, your task is to write a function that filters out unique elements from a list based on their first and last appearance in a list of integers. Input Your function will receive a single list of integers. Output Your function should return a new list containing only the unique elements, preserving the order of their first appearance in the input list. If an element appears more than once in the input list, it should not be included in the output list. Function Signature ```python def unique_elements(lst: List[int]) -> List[int]: ``` Test Example ```python lst = [1, 3, 2, 3, 4, 1, 5, 6, 2] unique_elements(lst) # [4, 5, 6] # Explanation: # The element 1 appears more than once. # The element 3 appears more than once. # The element 2 appears more than once. # The element 4 appears only once. # The element 5 appears only once. # The element 6 appears only once. # Therefore, the output list is [4, 5, 6]. ``` Technical Details The maximum size of the list will be 1000 integers. The values of the integers will be: -1000 < n < 1000. Function should have a time complexity ideally less than O(n^2).","solution":"from typing import List def unique_elements(lst: List[int]) -> List[int]: Filters out unique elements in the list preserving the order of their first appearance. If an element appears more than once, it is not included in the result. count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 result = [num for num in lst if count_dict[num] == 1] return result"},{"question":"You are given an inventory list of items in a store, and each item has a unique ID, a name, and a quantity available. Your task is to implement a function that will process a list of transactions. Each transaction will either add to the quantity of an item, remove from the quantity of an item, or add a new item to the inventory. __Input:__ - A list of dictionaries representing the inventory. Each dictionary has the following format: - { \\"id\\": <unique item ID>, \\"name\\": <item name>, \\"quantity\\": <quantity available> } - A list of dictionaries representing transactions. Each transaction dictionary has the following format: - { \\"type\\": <transaction type: \\"add\\", \\"remove\\", \\"new\\">, \\"id\\": <unique item ID>, \\"name\\": <item name>, \\"quantity\\": <quantity to add/remove> } __Output:__ - The updated inventory list after processing all transactions. If a transaction attempts to remove more items than are available, adjust the quantity to 0 but do not throw an error. __Example:__ ``` inventory = [ {\\"id\\": 1, \\"name\\": \\"apple\\", \\"quantity\\": 10}, {\\"id\\": 2, \\"name\\": \\"banana\\", \\"quantity\\": 5} ] transactions = [ {\\"type\\": \\"add\\", \\"id\\": 1, \\"name\\": \\"apple\\", \\"quantity\\": 5}, {\\"type\\": \\"remove\\", \\"id\\": 2, \\"name\\": \\"banana\\", \\"quantity\\": 10}, {\\"type\\": \\"new\\", \\"id\\": 3, \\"name\\": \\"cherry\\", \\"quantity\\": 7} ] The updated inventory will be: [ {\\"id\\": 1, \\"name\\": \\"apple\\", \\"quantity\\": 15}, {\\"id\\": 2, \\"name\\": \\"banana\\", \\"quantity\\": 0}, {\\"id\\": 3, \\"name\\": \\"cherry\\", \\"quantity\\": 7} ] ```","solution":"def process_inventory(inventory, transactions): Processes a list of transactions that update the inventory. Args: inventory (list of dicts): List of dictionaries representing the inventory. transactions (list of dicts): List of dictionaries representing the transactions. Returns: list of dicts: The updated inventory list. # Convert inventory to a dictionary for quicker lookup inventory_dict = {item[\'id\']: item for item in inventory} # Process each transaction for transaction in transactions: item_id = transaction[\'id\'] if transaction[\'type\'] == \'add\': if item_id in inventory_dict: inventory_dict[item_id][\'quantity\'] += transaction[\'quantity\'] elif transaction[\'type\'] == \'remove\': if item_id in inventory_dict: inventory_dict[item_id][\'quantity\'] -= transaction[\'quantity\'] if inventory_dict[item_id][\'quantity\'] < 0: inventory_dict[item_id][\'quantity\'] = 0 elif transaction[\'type\'] == \'new\': inventory_dict[item_id] = { \'id\': item_id, \'name\': transaction[\'name\'], \'quantity\': transaction[\'quantity\'] } # Convert back to list updated_inventory = list(inventory_dict.values()) return updated_inventory"},{"question":"Write a function `word_count` that takes a string `s` as input and returns a dictionary where keys are unique words in the string and values are the count of occurrences of each word. - The function should be case-insensitive; \\"Word\\" and \\"word\\" should be counted as the same word. - Punctuation should be ignored. - If the input string is empty, the function should return an empty dictionary. You may assume the string only contains words and punctuation, with no numbers or special characters other than punctuation. Example: ```python word_count(\\"Hello, world! Hello, Python.\\") # returns {\'hello\': 2, \'world\': 1, \'python\': 1} word_count(\\"The quick brown fox jumps over the lazy dog.\\") # returns {\'the\': 2, \'quick\': 1, \'brown\': 1, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 1} word_count(\\"\\") # returns {} ```","solution":"import re from collections import defaultdict def word_count(s): Returns a dictionary with the count of each unique word in the input string `s`. The function is case-insensitive and ignores punctuation. Parameters: s (str): Input string containing words and punctuation. Returns: dict: Dictionary with words as keys and their counts as values. # Convert string to lowercase and remove punctuation s = s.lower() s = re.sub(r\'[^ws]\', \'\', s) # Split the string into words words = s.split() # Create a dictionary to count the occurrences of each word word_count_dict = defaultdict(int) for word in words: word_count_dict[word] += 1 return dict(word_count_dict)"},{"question":"Given a sequence of N integers and Q queries, your task is to perform the following types of operations: - \\"Update i x\\": Update the ith element of the sequence to x. - \\"Query L R\\": Output the sum of elements from index L to R (inclusive). -----Input----- The first line of input contains two space-separated integers N and Q, denoting the size of the sequence and the number of queries, respectively. The second line contains N space-separated integers, representing the initial sequence. Each of the following Q lines describes a query of the format described above. -----Output----- For each \\"Query\\" operation, output a single line containing the sum of elements from index L to R. -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ initial sequence elements, x ≤ 1000000000 - 1 ≤ i, L, R ≤ N -----Example----- Input: 5 4 1 2 3 4 5 Query 1 3 Update 2 6 Query 2 5 Query 1 5 Output: 6 18 19 -----Explanation----- Initially, the sequence is [1, 2, 3, 4, 5]. - After the first query \\"Query 1 3\\", the sum from index 1 to 3 is 1+2+3=6. - After the update operation \\"Update 2 6\\", the sequence becomes [1, 6, 3, 4, 5]. - After the second query \\"Query 2 5\\", the sum from index 2 to 5 is 6+3+4+5=18. - After the third query \\"Query 1 5\\", the sum from index 1 to 5 is 1+6+3+4+5=19.","solution":"class SequenceProcessor: def __init__(self, sequence): self.sequence = sequence def update(self, i, x): self.sequence[i - 1] = x def query(self, L, R): return sum(self.sequence[L - 1:R]) def process_queries(n, q, sequence, queries): processor = SequenceProcessor(sequence) results = [] for query in queries: parts = query.split() if parts[0] == \\"Update\\": i = int(parts[1]) x = int(parts[2]) processor.update(i, x) elif parts[0] == \\"Query\\": L = int(parts[1]) R = int(parts[2]) results.append(processor.query(L, R)) return results"},{"question":"Write a function **\\"sum_even_squares\\"** that takes in a list of integers and returns the sum of the squares of all even numbers in the list. For example: ``` sum_even_squares([1, 2, 3, 4, 5, 6]) == 2^2 + 4^2 + 6^2 == 4 + 16 + 36 == 56 sum_even_squares([7, 8, 9, 10]) == 8^2 + 10^2 == 64 + 100 == 164 sum_even_squares([1, 3, 5]) == 0 ```","solution":"def sum_even_squares(numbers): Returns the sum of the squares of all even numbers in the list. return sum(x**2 for x in numbers if x % 2 == 0)"},{"question":"Given an array of integers representing stock prices on different days, return the maximum profit you can achieve by buying and selling the stock. You may complete at most one transaction (i.e., buy one and sell one share of the stock). Example 1: Input: prices = [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Example 2: Input: prices = [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the maximum profit = 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling the stock once. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: min_price = min(min_price, price) profit = price - min_price max_profit = max(max_profit, profit) return max_profit"},{"question":"You are given an array of integers. Your task is to write a function that calculates the maximum sum of a contiguous subarray with at least one number and outputs this maximum sum. Contiguous subarray means that the numbers have to be in sequence with no gaps in between. For example, given the array `[-2,1,-3,4,-1,2,1,-5,4]`, the maximum sum of a contiguous subarray is `6` and the subarray is `[4,-1,2,1]`. Function signature: `def max_contiguous_sum(arr: List[int]) -> int:` # Input An array of integers `arr`, where: - `1 <= len(arr) <= 10^5` - `-10^4 <= arr[i] <= 10^4` # Output Return an integer representing the maximum sum of a contiguous subarray. # Example ```python max_contiguous_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) # Output: 6 max_contiguous_sum([1]) # Output: 1 max_contiguous_sum([5, 4, -1, 7, 8]) # Output: 23 ```","solution":"from typing import List def max_contiguous_sum(arr: List[int]) -> int: Finds the maximum sum of a contiguous subarray using Kadane\'s algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a class `Rectangle` that represents a rectangle with width and height attributes. Implement the following methods: - `__init__(self, width, height)` - Initializes the instance with width and height - `area(self)` - Returns the area of the rectangle - `perimeter(self)` - Returns the perimeter of the rectangle - `resize(self, width, height)` - Changes the dimensions of the rectangle to the new width and height - Raises ValueError if width or height are not positive numbers - `is_square(self)` - Returns True if the rectangle is a square, otherwise False Examples: ```python rect = Rectangle(4, 5) rect.area() # Returns 20 rect.perimeter() # Returns 18 rect.is_square() # Returns False rect.resize(3, 3) rect.is_square() # Returns True rect.resize(-1, 5) # Raises a ValueError ```","solution":"class Rectangle: def __init__(self, width, height): Initializes the instance with width and height. if width <= 0 or height <= 0: raise ValueError(\\"Width and height must be positive numbers\\") self.width = width self.height = height def area(self): Returns the area of the rectangle. return self.width * self.height def perimeter(self): Returns the perimeter of the rectangle. return 2 * (self.width + self.height) def resize(self, width, height): Changes the dimensions of the rectangle to the new width and height. Raises ValueError if width or height are not positive numbers. if width <= 0 or height <= 0: raise ValueError(\\"Width and height must be positive numbers\\") self.width = width self.height = height def is_square(self): Returns True if the rectangle is a square, otherwise False. return self.width == self.height"},{"question":"Given a string `s`, return the longest palindromic substring in `s`. Palindromes are strings that read the same forwards and backwards. For example: - For the input \\"babad\\", the output can be \\"bab\\" or \\"aba\\". - For the input \\"cbbd\\", the output should be \\"bb\\". Write a function `longest_palindromic_substring(s: str) -> str:` that accepts the string `s` and returns the longest palindromic substring according to the above requirements. You can assume that the maximum length of `s` is 1000.","solution":"def longest_palindromic_substring(s: str) -> str: Returns the longest palindromic substring in s. n = len(s) if n == 0: return \\"\\" start = 0 max_length = 1 for i in range(n): # Check for odd length palindromes with center i low = i high = i while low >= 0 and high < n and s[low] == s[high]: current_length = high - low + 1 if current_length > max_length: start = low max_length = current_length low -= 1 high += 1 # Check for even length palindromes with center i and i+1 low = i high = i + 1 while low >= 0 and high < n and s[low] == s[high]: current_length = high - low + 1 if current_length > max_length: start = low max_length = current_length low -= 1 high += 1 return s[start:start + max_length]"},{"question":"You are given a string that contains only lowercase letters. You want to rearrange the characters of the string such that no two adjacent characters are the same. If it is possible, return any possible rearrangement of the string. If it is not possible, return an empty string. # Your Task Write a function in Python that takes a single string as input and returns a string with no two adjacent characters the same, or an empty string if no such arrangement is possible. For example: ```python def rearrange_string(s: str) -> str: // Your code here # Example inputs and outputs: print(rearrange_string(\\"aab\\")) # One possible output: \\"aba\\" print(rearrange_string(\\"aaab\\")) # Output: \\"\\" ``` # Constraints: - The input string will have a length between 1 and 10^4. - The input string consists of only lowercase English letters (\'a\' to \'z\').","solution":"from collections import Counter import heapq def rearrange_string(s: str) -> str: Rearranges the characters of the input string such that no two adjacent characters are the same. If not possible, returns an empty string. # Count the frequency of each character in the string freq = Counter(s) # Create a max heap based on the frequency of characters max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) result = [] prev_count, prev_char = 0, \'\' while max_heap: count, char = heapq.heappop(max_heap) # Append the current character to the result array result.append(char) # Since we used this character, we decrease its count if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char # Join the list to form the resultant string rearranged_string = \'\'.join(result) # Check if the final string has the same length as the input string # If the lengths are not same, return empty string if len(rearranged_string) != len(s): return \\"\\" return rearranged_string"},{"question":"Given a list of **integers** representing stock prices on consecutive days, write a function that calculates the maximum profit that could be made by executing at most two non-overlapping transactions. A transaction is defined as buying and then later selling one share of the stock. If no profit can be achieved, return 0. Examples ```python prices = [3, 3, 5, 0, 0, 3, 1, 4] max_profit = 6 # Buy on day 4 and sell on day 6 (profit = 3 - 0). # Then buy on day 7 and sell on day 8 (profit = 4 - 1). prices = [1, 2, 3, 4, 5] max_profit = 4 # Buy on day 1 and sell on day 5 (profit = 5 - 1). prices = [7, 6, 4, 3, 1] max_profit = 0 # In this case, no transactions are done, and max profit = 0. ``` # Note - The solution must have a time complexity of O(n), where n is the number of days. - Assume that the prices list will contain at least one price and no more than 10^5 prices.","solution":"def max_profit_with_two_transactions(prices): if len(prices) < 2: return 0 n = len(prices) profit_left = [0] * n profit_right = [0] * n min_price_left = prices[0] for i in range(1, n): min_price_left = min(min_price_left, prices[i]) profit_left[i] = max(profit_left[i-1], prices[i] - min_price_left) max_price_right = prices[-1] for i in range(n-2, -1, -1): max_price_right = max(max_price_right, prices[i]) profit_right[i] = max(profit_right[i+1], max_price_right - prices[i]) max_profit = 0 for i in range(n): max_profit = max(max_profit, profit_left[i] + profit_right[i]) return max_profit"},{"question":"Create a function that takes an array of integers as input and returns the length of the longest contiguous subarray that contains no duplicate numbers. The array may contain both positive and negative numbers. Write the function to solve this problem. ```if:shell In bash, the script is run with the following argument: `array` containing integers ```","solution":"def length_of_longest_subarray(arr): Returns the length of the longest contiguous subarray with unique elements. if not arr: return 0 max_length = 0 current_start = 0 seen = {} for current_end, value in enumerate(arr): if value in seen and seen[value] >= current_start: current_start = seen[value] + 1 seen[value] = current_end max_length = max(max_length, current_end - current_start + 1) return max_length"},{"question":"Task Joey needs to help his friend organize a line-up of athletes for a relay race. Each athlete has a unique strength score and can only pass the baton to another athlete with a higher score. Joey wants to know the longest sequence of athletes that can be organized in this manner. -----Input:----- - The first line contains a single integer N, the number of athletes. - The second line contains N space-separated integers representing the strength scores of the athletes. -----Output:----- Print a single integer, denoting the length of the longest sequence of athletes that can be organized where each athlete\'s strength score is strictly greater than the previous athlete\'s score. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ strength score ≤ 10^9 -----Sample Input:----- 6 10 20 10 30 20 50 -----Sample Output:----- 4 -----Note:----- - In the sample set, the longest sequence of athletes that can be selected in order is 10 -> 20 -> 30 -> 50, which has a length of 4.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given list of integers. Uses a dynamic programming approach with binary search for efficiency. if not arr: return 0 import bisect # This will store the increasing subsequence formed so far lis = [] for num in arr: pos = bisect.bisect_left(lis, num) # If num is greater than any element in lis if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"You are given an array of integers representing a histogram. Each integer describes the height of a bar in the histogram. Compute the area of the largest rectangle that can be formed within the bounds of the histogram. The rectangle must be aligned with the x-axis. For example, given the following histogram heights `[2, 1, 5, 6, 2, 3]`, the largest rectangle has an area of `10`. ``` x x x x x x x x x x x x x x x x x x x 2 1 5 6 2 3 ``` **Note:** The total number of bars `N` in the histogram will not exceed `10^5`, so your solution needs to be efficient in terms of time complexity. --- *Hint: consider using a stack to track the indices of the histogram bars.*","solution":"def largestRectangleArea(heights): Computes the area of the largest rectangle that can be formed within the bounds of a histogram. stack = [] # Stack to keep indices of the histogram bars max_area = 0 # Initialize max area index = 0 # Current index while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now, pop the remaining bars from stack and calculate area with each while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"--- # Task Given a matrix of size `M*N` filled with non-negative integers, where each row and column is sorted in ascending order, find the kth smallest element in the matrix. Note that it is the kth smallest element in the sorted order, not the kth distinct element. The task is to write a function that solves the problem and to ensure the function has a time complexity better than O(M*N). Function Signature ```python def kthSmallest(matrix: List[List[int]], k: int) -> int: pass ``` # Input * `matrix`: A list of lists of integers, where `matrix[i][j]` is the integer at row `i` and column `j`. (`1 <= len(matrix), len(matrix[0]) <= 300`, `0 <= matrix[i][j] <= 10^9`) * `k`: An integer (`1 <= k <= M*N`) # Output * Return the kth smallest element in the matrix. # Examples ```python kthSmallest([ [ 1, 5, 9], [10, 11, 13], [12, 13, 15] ], k=8) == 13 kthSmallest([ [ 1, 2], [ 1, 3] ], k=2) == 1 ``` # Constraints * `1 <= len(matrix), len(matrix[0]) <= 300` * `0 <= matrix[i][j] <= 10^9` * `1 <= k <= M*N`","solution":"import heapq from typing import List def kthSmallest(matrix: List[List[int]], k: int) -> int: Returns the kth smallest element in a sorted matrix where each row and column is sorted in ascending order. n = len(matrix) min_heap = [] # Initialize the heap with the first element of each row. for r in range(min(k, n)): heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Extract-min k-1 times to get the kth smallest element. for _ in range(k - 1): val, r, c = heapq.heappop(min_heap) if c + 1 < len(matrix[0]): heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1)) return heapq.heappop(min_heap)[0]"},{"question":"Given two non-empty strings `s1` and `s2`, write a function to determine if `s2` contains an anagram of `s1`. In other words, check if a permutation of `s1` exists in `s2`. The function should return `true` if `s2` contains an anagram of `s1`, and `false` otherwise. For example: ``` s1 = \\"ab\\" s2 = \\"eidbaooo\\" ``` should return `true` because `\\"ba\\"` is a permutation of `s1` and exists in `s2`. Another example: ``` s1 = \\"ab\\" s2 = \\"eidboaoo\\" ``` should return `false` because `s2` does not contain any permutation of `s1`.","solution":"def contains_anagram(s1, s2): from collections import Counter len_s1, len_s2 = len(s1), len(s2) if len_s1 > len_s2: return False s1_count = Counter(s1) window_count = Counter(s2[:len_s1]) for i in range(len_s2 - len_s1 + 1): if i > 0: # Slide the window: remove one preceding character and add a new one window_count[s2[i - 1]] -= 1 if window_count[s2[i - 1]] == 0: del window_count[s2[i - 1]] window_count[s2[i + len_s1 - 1]] += 1 if window_count == s1_count: return True return False"},{"question":"You are given a list of integers. Your task is to check if you can make all elements of the list equal by performing a specific type of operation any number of times (including zero). In one operation, you can select any index (i) of the list and increment or decrement (A_i) by 1. -----Input----- - The first line of the input contains a single integer (T) denoting the number of test cases. The description of (T) test cases follows. - The first line of each test case contains a single integer (N) indicating the number of elements in the list. - The second line contains (N) space-separated integers (A_1, A_2, ldots, A_N). -----Output----- For each test case, print a single line containing the string \\"YES\\" if it is possible to make all elements of the list equal using the given operations, otherwise print \\"NO\\". -----Constraints----- - (1 le T le 1,000) - (1 le N le 10) - (|A_i| le 100) for each valid (i) -----Example Input----- 3 3 1 1 1 3 1 2 3 4 2 4 4 4 -----Example Output----- YES NO NO -----Explanation----- Example case 1: The list is already equal, so no operations are needed. Example case 2: The differences between the elements are not consistent. You cannot make all elements equal with the allowed operations. Example case 3: Despite having one different element, the consistent differences among them allow you to equalize the list.","solution":"def can_make_elements_equal(test_cases): results = [] for case in test_cases: N, A = case min_A, max_A = min(A), max(A) # We can make all elements equal only if difference between min and max is <= 1 if max_A - min_A <= 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) A = list(map(int, input_lines[index + 1].split())) test_cases.append((N, A)) index += 2 return test_cases"},{"question":"Our Chef is hosting a grand feast and has ordered a large quantity of candies for the guests. However, he wants to ensure that the distribution of candies is fair and follows a specific pattern. He decides that each guest can receive either 1, 2, or 3 candies, and no two guests should receive the same quantity of candies consecutively. This way, guests with consecutive positions cannot receive the same number of candies, ensuring a more interesting and fair distribution. To make sure his plan works, the Chef needs to calculate the number of different ways to distribute the candies to N guests, following the given constraints. Your task is to help him by writing a program that determines the number of valid distributions for N guests. -----Input----- The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single integer N, representing the number of guests. -----Output----- For each test case, output a single integer - the number of ways to distribute the candies to N guests such that no two adjacent guests receive the same number of candies. -----Example----- Input: 2 3 4 Output: 6 12","solution":"def count_distributions(N): if N == 1: return 3 elif N == 2: return 6 dp = [0] * (N + 1) dp[1] = 3 # Only 3 ways for the first guest: 1, 2, 3 dp[2] = 6 # Only 6 ways for two guests: [1,2], [1,3], [2,1], [2,3], [3,1], [3,2] for i in range(3, N + 1): dp[i] = dp[i-1] * 2 return dp[N] def calculate_distributions(test_cases): results = [] for case in test_cases: results.append(count_distributions(case)) return results"},{"question":"A string is considered \\"beautiful\\" if it consists of only lowercase alphabets and no two adjacent characters in the string are the same. Given an input string, write a function `is_beautiful` that returns `True` if the string is beautiful and `False` otherwise. For instance, the string `abc` is beautiful because no two adjacent characters are the same. However, the string `aab` is not beautiful because there are two adjacent \'a\'s. Function Signature: ```python def is_beautiful(s: str) -> bool: ``` **Parameters**: - `s`: A string consisting of only lowercase alphabets. (1 ≤ len(s) ≤ 1000) **Returns**: - `True` if the input string is beautiful. - `False` otherwise. **Examples**: ```python is_beautiful(\\"abc\\") # Returns True is_beautiful(\\"aab\\") # Returns False is_beautiful(\\"abac\\") # Returns True is_beautiful(\\"\\") # Returns True ``` # Note: - The string can have a minimum length of 1 and a maximum length of 1000. - You can assume the input string is always valid (i.e., it consists only of lowercase alphabets).","solution":"def is_beautiful(s: str) -> bool: Check if the given string is beautiful. A string is considered beautiful if no two adjacent characters are the same. :param s: The input string consisting of lowercase alphabets. :return: True if the string is beautiful, False otherwise. # An empty string or a single character string is trivially beautiful. if len(s) <= 1: return True # Iterate through the string and check for adjacent identical characters. for i in range(len(s) - 1): if s[i] == s[i + 1]: return False return True"},{"question":"Create a function marathonRanking that determines the ranking of a runner based on their finish time and the number of other runners they have overtaken. This function should take two arguments: finish_time - finish time of the runner in minutes (integer greater than 0); overtakes - number of runners the runner has overtaken during the marathon (integer 0 or above); This function should return a rank as a string. There are three types of rankings: - \\"Elite\\", if the finish time is less than 120 minutes or the number of overtakes is more than 50. - \\"Pro\\", if the finish time is between 120 and 180 minutes and the number of overtakes is at least 20. - \\"Amateur\\", in all other cases. Examples: ```python marathon_ranking(110, 55) # \\"Elite\\" marathon_ranking(140, 30) # \\"Pro\\" marathon_ranking(190, 25) # \\"Amateur\\" marathon_ranking(130, 10) # \\"Pro\\" marathon_ranking(200, 5) # \\"Amateur\\" ```","solution":"def marathon_ranking(finish_time, overtakes): Determines the ranking of a runner based on their finish time and the number of other runners they have overtaken. Parameters: finish_time (int): Finish time of the runner in minutes. overtakes (int): Number of runners the runner has overtaken. Returns: str: The rank of the runner (Elite, Pro, or Amateur). if finish_time < 120 or overtakes > 50: return \\"Elite\\" elif 120 <= finish_time <= 180 and overtakes >= 20: return \\"Pro\\" else: return \\"Amateur\\""},{"question":"The Scenario: An ancient encrypted text has been discovered, where each letter of the alphabet is shifted by a certain number of positions. For instance, with a shift of 3, \'A\' would be encoded as \'D\', \'B\' as \'E\', and so on wrapping around from \'Z\' back to \'A\'. Task: Write a function `decrypt` that takes two inputs: the encrypted message (a string) and the shift value (an integer). The function should return the decrypted message by shifting the letters back by the given shift value. ```python >>> decrypt(\'KHOOR\', 3) \'HELLO\' >>> decrypt(\'ZAB\', 1) \'YZA\' ```","solution":"def decrypt(encrypted_message, shift): Decrypts the given message by shifting each letter back by the given shift value. decrypted_message = [] for char in encrypted_message: if char.isalpha(): shifted = ord(char) - shift if char.isupper(): decrypted_message.append(chr((shifted - 65) % 26 + 65)) else: decrypted_message.append(chr((shifted - 97) % 26 + 97)) else: decrypted_message.append(char) return \'\'.join(decrypted_message)"},{"question":"Your task is to implement a function that checks whether two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function should return `1` if the two strings are anagrams and `0` otherwise. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains two strings A and B, both consisting of lowercase letters only. -----Output:----- For each testcase, print `1` if the given strings are anagrams of each other, else print `0`. -----Constraints----- - 1 leq T leq 1000 - 1 leq |A|, |B| leq 1000 -----Sample Input:----- 3 listen silent triangle integral apple appele -----Sample Output:----- 1 1 0","solution":"def are_anagrams(a, b): Check if two strings are anagrams of each other. Returns 1 if they are anagrams, 0 otherwise. return 1 if sorted(a) == sorted(b) else 0 def process_test_cases(test_cases): Process multiple test cases to check for anagrams. Returns a list with the results for each test case. results = [] for a, b in test_cases: results.append(are_anagrams(a, b)) return results # Assuming the input is provided in a structured format (e.g., a list of tuples for test cases) # Here\'s how we would call the process for sample input: # test_cases = [(\\"listen\\", \\"silent\\"), (\\"triangle\\", \\"integral\\"), (\\"apple\\", \\"appele\\")] # print(process_test_cases(test_cases))"},{"question":"=====Problem Statement===== You are given a square matrix A with dimensions NXN. Your task is to find the inverse of the matrix. If the inverse does not exist, print \\"Inverse does not exist\\". Note: Round each element of the inverse matrix to 2 places after the decimal. ======Input Format===== The first line contains the integer N. The next N lines contain the space-separated elements of matrix A. =====Output Format===== Print the inverse of matrix A. Each element should be rounded to 2 places after the decimal. If the inverse does not exist, print \\"Inverse does not exist\\". =====Sample Input===== 3 1 2 3 0 1 4 5 6 0 =====Sample Output===== [[-24.00 18.00 5.00] [ 20.00 -15.00 -4.00] [ -5.00 4.00 1.00]] =====Explanation===== The given matrix A is: 1 2 3 0 1 4 5 6 0 The determinant of the matrix A is not zero, so the inverse exists. The computed inverse matrix, with elements rounded to 2 decimal places, is returned.","solution":"import numpy as np def find_inverse(matrix): Returns the inverse of a given square matrix rounded to 2 decimal places. If the inverse does not exist, returns a message stating \\"Inverse does not exist\\". try: inverse_matrix = np.linalg.inv(matrix) inverse_matrix = np.round(inverse_matrix, 2) return inverse_matrix.tolist() except np.linalg.LinAlgError: return \\"Inverse does not exist\\" def parse_input(n, matrix_elements): Parse the input to create the matrix. matrix = [] for i in range(n): row = matrix_elements[i*n:(i+1)*n] matrix.append(row) return np.array(matrix)"},{"question":"Write a function called `largest_balanced_substring` that takes a string `s` as input. The string `s` consists of only the characters \'a\' and \'b\'. A balanced substring is one in which the number of \'a\'s is equal to the number of \'b\'s. The function should find and return the length of the largest balanced substring. Example 1: Input: s = \\"ababab\\" Output: 6 Explanation: The entire string is a balanced substring. Example 2: Input: s = \\"aaabbb\\" Output: 6 Explanation: The entire string is a balanced substring. Example 3: Input: s = \\"abba\\" Output: 4 Explanation: The entire string is a balanced substring. Example 4: Input: s = \\"abb\\" Output: 2 Explanation: The longest balanced substring is \\"ab\\" or \\"ba\\". Constraints: - 1 <= s.length <= 10000 - s consists of only the characters \'a\' and \'b\'.","solution":"def largest_balanced_substring(s): Finds and returns the length of the largest balanced substring. A balanced substring is one in which the number of \'a\'s is equal to the number of \'b\'s. Parameters: s (str): The input string consisting of \'a\'s and \'b\'s. Returns: int: The length of the largest balanced substring. longest = 0 balance = 0 balance_dict = {0: -1} for i, char in enumerate(s): if char == \'a\': balance += 1 else: balance -= 1 if balance in balance_dict: longest = max(longest, i - balance_dict[balance]) else: balance_dict[balance] = i return longest"},{"question":"Create a function that takes as input a string that represents a mathematical expression (e.g., \\"3 + 5 * 2 - 8 / 4\\") and returns the evaluated result. The expression will only contain non-negative integers and the four basic arithmetic operators: addition (+), subtraction (-), multiplication (*), and division (/). Division should be treated as integer division, where the result is floored to the nearest integer. The input string will always contain spaces separating the numbers and operators, and it will be a valid expression. Example inputs and outputs: ``` \\"3 + 5\\" -> 8 \\"10 + 5 * 2\\" -> 20 \\"10 + 5 * 2 - 8\\" -> 12 \\"12 / 4 + 2\\" -> 5 \\"8 - 3 + 2 * 5\\" -> 15 ``` Note: - Follow the standard operator precedence rules: multiplication and division have higher precedence than addition and subtraction. - Handle the operations left to right when operators have equal precedence.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression that contains non-negative integers and the operators +, -, *, and /. Division is treated as integer division. Args: expression (str): A string representing the mathematical expression, separated by spaces. Returns: int: The evaluated result of the expression. import re import operator # Split by space to separate numbers and operators tokens = expression.split() # Convert the infix expression to a postfix expression prec = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} op_stack = [] postfix_list = [] for token in tokens: if token.isdigit(): postfix_list.append(token) elif token in prec: while op_stack and prec[op_stack[-1]] >= prec[token]: postfix_list.append(op_stack.pop()) op_stack.append(token) while op_stack: postfix_list.append(op_stack.pop()) # Evaluating the postfix expression def int_div(a, b): return a // b op_map = {\'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': int_div} stack = [] for token in postfix_list: if token.isdigit(): stack.append(int(token)) elif token in op_map: b = stack.pop() a = stack.pop() stack.append(op_map[token](a, b)) return stack[0]"},{"question":"Given an array of integers, find the shortest continuous subarray, that if sorted in ascending order, would result in the entire array being sorted in ascending order. If the array is already sorted, return the length 0. Example 1: Input: [2, 6, 4, 8, 10, 9, 15] Output: 5 Explanation: Sorting the subarray [6, 4, 8, 10, 9] will make the whole array sorted. Example 2: Input: [1, 2, 3, 4] Output: 0 Explanation: The array is already sorted. Example 3: Input: [1, 3, 2, 2, 2] Output: 4 Explanation: Sorting the subarray [3, 2, 2, 2] will make the whole array sorted. Note: - The length of the input array will be in the range [1, 10,000]. - The array consists of integers in the range [-100,000, 100,000].","solution":"def find_unsorted_subarray(nums): Function to find the length of the shortest continuous subarray, that if sorted in ascending order, would result in the entire array being sorted in ascending order. :param nums: a list of integers :return: an integer, the length of the shortest such subarray n = len(nums) start, end = 0, -1 max_seen, min_seen = float(\'-inf\'), float(\'inf\') for i in range(n): max_seen = max(max_seen, nums[i]) if nums[i] < max_seen: end = i for i in range(n-1, -1, -1): min_seen = min(min_seen, nums[i]) if nums[i] > min_seen: start = i return end - start + 1"},{"question":"A file system stores files in a hierarchical directory structure. A directory or file is uniquely identified by a path, which is a string that describes the location of the directory or file starting from the root directory. The path components are separated by a \\"/\\" (forward slash). Design a function that will list all files within a given directory, including files in subdirectories. Your function should take in the path of a directory and return a list of all paths of the files contained within that directory (and its subdirectories). Assumptions: - The given directory exists. - The file system tree can be arbitrarily deep. - Directory paths will always end with a \\"/\\". Example 1: Input: directory_path = \\"/user/local/\\" Assume the file system structure is as follows: ``` /user/local/ /bin/ bash cfg/ example.cfg /lib/ lib1.so lib2.so share/ doc/ readme.md file1.txt file2.txt ``` Output: [ \\"/user/local/bin/bash\\", \\"/user/local/bin/cfg/example.cfg\\", \\"/user/local/lib/lib1.so\\", \\"/user/local/lib/lib2.so\\", \\"/user/local/share/doc/readme.md\\", \\"/user/local/file1.txt\\", \\"/user/local/file2.txt\\" ] Example 2: Input: directory_path = \\"/root/\\" Assume the file system structure is as follows: ``` /root/ /home/ user1/ file1.txt user2/ docs/ doc1.txt /etc/ passwd /tmp/ ``` Output: [ \\"/root/home/user1/file1.txt\\", \\"/root/home/user2/docs/doc1.txt\\", \\"/root/etc/passwd\\" ] Note: 1. Your output paths should be sorted in lexicographical order. 2. Directory paths should not be included in the output. Only file paths should be listed.","solution":"import os def list_all_files(directory_path): Lists all files within the given directory, including files in subdirectories. :param directory_path: The path of the directory. :return: A list of all file paths contained within the directory and subdirectories. file_paths = [] # Helper function to recursively collect file paths def collect_files(current_path): for entry in os.listdir(current_path): full_path = os.path.join(current_path, entry) if os.path.isdir(full_path): collect_files(full_path) else: file_paths.append(full_path) # Start collecting from the given directory path collect_files(directory_path.rstrip(\'/\')) # Sort the file paths lexicographically before returning file_paths.sort() return file_paths"},{"question":"Margo is working on organizing a list of books in a unique way. She wants to ensure that each book on the list has a connected sequence of numbers corresponding to their codes. A sequence is classified as connected if each subsequent number increments by 1 with respect to the previous one. If there are any missing numbers, she needs to identify them to complete the connected sequence. Given the list of book codes, help Margo determine the missing numbers to make all sequences connected. You should identify the missing number(s) for each contiguous subsequence of the numbers. For simplicity, assume all book codes are distinct positive integers and the list is already sorted in ascending order. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) indicating the number of book codes. The second line contains n distinct integers, in sorted order, each representing a book code (1 ≤ code ≤ 10^9). -----Output----- Output a single line containing all the missing book codes needed to complete the connected sequence. If there are no missing codes, print \\"None\\". -----Examples----- Input: 5 1 2 4 5 7 Output: 3 6 Input: 4 3 4 5 7 Output: 6 Input: 3 1 2 3 Output: None -----Note----- In the first example, the sequence [1, 2, 4, 5, 7] is missing 3 and 6 to make it a complete connected sequence, resulting in [1, 2, 3, 4, 5, 6, 7]. In the second example, the sequence [3, 4, 5, 7] is missing 6 to make it a complete connected sequence, resulting in [3, 4, 5, 6, 7]. In the third example, the sequence [1, 2, 3] is already complete, so the output is \\"None\\".","solution":"def find_missing_codes(n, book_codes): Returns a list of missing codes to complete the connected sequence of book codes. If no codes are missing, returns [\\"None\\"]. missing_codes = [] for i in range(1, n): current_code = book_codes[i-1] next_code = book_codes[i] # Check if there is a gap between current and next code if next_code - current_code > 1: # Add all missing codes between current_code and next_code missing_codes.extend(range(current_code + 1, next_code)) if not missing_codes: return [\\"None\\"] return missing_codes"},{"question":"Gru has a special device that can convert time into different formats. Agnes is fascinated with time conversions and asked Gru to build a function to convert time from a 12-hour format to a 24-hour format. Since Gru is busy with other experiments, he needs your help to implement this. -----Input:----- - The input will be a single line containing a time in 12-hour AM/PM format (hh:mm:ssAM or hh:mm:ssPM). -----Output:----- - The output should be the corresponding time in 24-hour format (HH:MM:SS). -----Constraints----- - The input time will be a valid time in the 12-hour format. -----Sample Input 1:----- 07:05:45PM -----Sample Output 1:----- 19:05:45 -----Sample Input 2:----- 12:00:00AM -----Sample Output 2:----- 00:00:00 -----Sample Input 3:----- 12:00:00PM -----Sample Output 3:----- 12:00:00 -----Explanation----- - In the first example, 07:05:45PM in 12-hour format converts to 19:05:45 in 24-hour format. - In the second example, 12:00:00AM in 12-hour format converts to 00:00:00 in 24-hour format. - In the third example, 12:00:00PM in 12-hour format remains 12:00:00 in 24-hour format.","solution":"def convert_to_24_hour_format(time_12_hour): This function receives a time string in 12-hour format and converts it to a 24-hour format. if time_12_hour[-2:] == \\"AM\\": if time_12_hour[:2] == \\"12\\": return \\"00\\" + time_12_hour[2:-2] else: return time_12_hour[:-2] else: if time_12_hour[:2] == \\"12\\": return time_12_hour[:-2] else: return str(int(time_12_hour[:2]) + 12) + time_12_hour[2:-2]"},{"question":"Write a function that takes a string s containing only the characters \'a\' and \'b\', and returns the length of the longest substring containing only \'a\'s or only \'b\'s. # Examples ```python longest_univalue_substring(\\"aabbbba\\") => 4 longest_univalue_substring(\\"abba\\") => 2 longest_univalue_substring(\\"aaaa\\") => 4 longest_univalue_substring(\\"bbaaaabba\\") => 4 ```","solution":"def longest_univalue_substring(s): Returns the length of the longest substring containing only \'a\'s or only \'b\'s. Parameters: s (str): The input string containing only \'a\' and \'b\'. Returns: int: The length of the longest univalue substring. max_length = 0 current_char = \\"\\" current_length = 0 for char in s: if char == current_char: current_length += 1 else: current_char = char current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are a developer tasked with creating a new feature for a blogging platform. The feature involves generating a summary of a blog post. **Write a function that takes a string input representing a blog post and returns a summary of the post.** The summary should adhere to the following rules: 1. The summary should consist of the first 200 characters of the blog post. 2. If the 200th character is in the middle of a word, include that entire word. 3. If the post is shorter than 200 characters, return the entire text. 4. Ensure that punctuation and spacing are preserved. 5. Non-string inputs should return an empty string. 6. The input string may contain HTML tags, which should be properly handled (for simplicity, you can assume tags are properly closed). For example, summarize(\'This is an example blog post meant to test the summary feature. The goal is to determine if it truncates at the correct point and handles word boundaries gracefully. <strong>HTML should be ignored</strong>.\') // returns \'This is an example blog post meant to test the summary feature. The goal is to determine if it truncates at the correct point and handles word boundaries gracefully.\' summarize(\'Short post.\') // returns \'Short post.\' summarize(12345) // returns \'\' The tests cover the following aspects to ensure a valid summary is returned: 1. Checks that the summary respects the 200-character limit or includes the entire word where necessary. 2. Checks that the whole text is returned if it is shorter than 200 characters. 3. Ensures punctuation and spacing are preserved. 4. Ensures that HTML tags are ignored in the character count. 5. Verifies the function returns an empty string for non-string inputs. 6. Validates that edge cases, such as words at the boundary, are correctly handled.","solution":"import re def summarize(blog_post): Generates a summary of a blog post according to the specified rules. if not isinstance(blog_post, str): return \'\' # Remove HTML tags clean_text = re.sub(r\'<[^>]*>\', \'\', blog_post) if len(clean_text) <= 200: return clean_text # Truncate to 200 characters truncated_text = clean_text[:200] # Check if the 200th character is in the middle of a word if clean_text[200] not in (\' \', \',\', \'.\', \'!\', \'?\'): # Extend to the end of the word end_of_word_index = re.search(r\'b\', clean_text[200:]) if end_of_word_index: truncated_text += clean_text[200:end_of_word_index.end() + 200] return truncated_text"},{"question":"A company has designed a new system where each employee can send a packet to any other employee via direct channels. However, these channels are not always the most efficient routes as they can be unreliable. For better communication, they have built a network of indirect intermediary nodes, each of which acts as a reliable relay point. The network is described as a weighted directed graph where nodes represent employees and edges represent the communication channels with weights indicating the packet\'s transmission time. To expedite communication, each packet must travel through these relay points in the shortest possible time from the sender to the receiver. Your task is to determine the shortest time required for a packet to travel from one employee to another using the provided network configuration. If there is no possible path, you should indicate that the communication is not possible. -----Input----- The first line of input contains an integer T, the number of test cases. Then T test cases follow. Each test case contains: - The first line contains two integers N and M, representing the number of employees (nodes) and the number of communication channels (edges) respectively. - The next M lines each contain three integers X, Y, and Z, indicating that there is a direct channel from employee X to employee Y with a transmission time of Z. - The next line contains an integer Q, the number of queries. - Each of the following Q lines contains two integers A and B, representing the sender and receiver for which you need to find the shortest transmission time. Employees are numbered from 1 to N. -----Output----- For each query, output the shortest transmission time. If there is no path, output \\"NOT POSSIBLE\\". -----Constraints----- 1 ≤ T ≤ 50 1 ≤ N ≤ 200 1 ≤ M ≤ 5000 1 ≤ X, Y, A, B ≤ N 1 ≤ Z ≤ 1000 1 ≤ Q ≤ 100 -----Example----- Input: 1 4 4 1 2 1 2 3 2 3 4 3 1 4 10 3 1 4 2 4 3 1 Output: 6 5 NOT POSSIBLE -----Hint----- Make sure to use fast algorithms for shortest path computation like Dijkstra\'s algorithm or the Floyd-Warshall algorithm given the constraints on the number of nodes and edges.","solution":"import heapq def dijkstra(graph, start, end, N): Applies Dijkstra\'s algorithm to find the shortest path from start to end in a graph. min_heap = [(0, start)] distances = {node: float(\'infinity\') for node in range(1, N+1)} distances[start] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return distances[end] if distances[end] != float(\'infinity\') else \\"NOT POSSIBLE\\" def solve(test_cases): results = [] for test in test_cases: N, M, edges, queries = test[\'N\'], test[\'M\'], test[\'edges\'], test[\'queries\'] graph = {i: [] for i in range(1, N+1)} for x, y, z in edges: graph[x].append((y, z)) for a, b in queries: result = dijkstra(graph, a, b, N) results.append(result) return results def read_input(input_text): Parses the input text into a structured format. lines = input_text.split(\\"n\\") index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) index += 1 edges = [] for _ in range(M): X, Y, Z = map(int, lines[index].split()) index += 1 edges.append((X, Y, Z)) Q = int(lines[index]) index += 1 queries = [] for _ in range(Q): A, B = map(int, lines[index].split()) index += 1 queries.append((A, B)) test_cases.append({\'N\': N, \'M\': M, \'edges\': edges, \'queries\': queries}) return test_cases def main(input_text): test_cases = read_input(input_text) results = solve(test_cases) for result in results: print(result)"},{"question":"Write a function that takes a list of integers as input and returns a dictionary where each key is an integer from the list and the corresponding value is the count of how many times that integer appears consecutively. For example, the input [1, 1, 2, 2, 2, 3, 1, 1, 1, 4, 4, 5] should return {1: 2, 2: 3, 3: 1, 1: 3, 4: 2, 5: 1}. Ensure the function handles an empty list by returning an empty dictionary and only processes lists of integers, returning \\"Please enter a valid list of integers\\" if the input is not a list of integers.","solution":"def consecutive_count(lst): Takes a list of integers and returns a dictionary where each key is an integer from the list and the corresponding value is the count of how many times that integer appears consecutively. if not isinstance(lst, list) or not all(isinstance(i, int) for i in lst): return \\"Please enter a valid list of integers\\" result = {} if not lst: return result prev = lst[0] count = 1 for i in range(1, len(lst)): if lst[i] == prev: count += 1 else: result[prev] = count prev = lst[i] count = 1 result[prev] = count return result"},{"question":"In a forest, there are N trees arranged in a line. Each tree has a certain height represented by an integer array A of length N. You have an axe and you can cut any tree, but once you cut a tree, you cannot cut any other tree that is directly adjacent to that tree. Find the maximum sum of the heights of the trees you can cut under this condition. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains the integer N. - The second line contains N integers representing the heights of the trees. -----Output:----- For each test case, output in a single line the maximum sum of the heights of the trees you can cut. -----Constraints----- - 1 leq T leq 10^5 - 1 leq N leq 10^5 - 1 leq A[i] leq 10^5 -----Sample Input:----- 2 4 1 2 9 4 5 3 2 5 10 7 -----Sample Output:----- 10 15 -----EXPLANATION:----- For 1) You can cut tree 1 and tree 3 with a total height of 1 + 9 = 10. For 2) You can cut tree 1, tree 3, and tree 5 with a total height of 3 + 5 + 7 = 15.","solution":"def max_tree_sum(test_cases): results = [] for case in test_cases: N, heights = case if N == 0: results.append(0) continue if N == 1: results.append(heights[0]) continue # Initialize dp array dp = [0] * N dp[0] = heights[0] dp[1] = max(heights[0], heights[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + heights[i]) results.append(dp[-1]) return results"},{"question":"Write a function that takes a list of integers and returns a list containing the products of all elements except the one at the current index. Example: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6]","solution":"def product_except_self(nums): Takes a list of integers and returns a list containing the products of all elements except the one at the current index. Args: nums (list): list of integers Returns: list: list of products except self length = len(nums) # Initialize the result array with 1 output = [1] * length # Calculate products of all elements to the left of each index left_product = 1 for i in range(length): output[i] = left_product left_product *= nums[i] # Calculate products of all elements to the right of each index right_product = 1 for i in range(length - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"Implement a simplified version of the LRU (Least Recently Used) Cache. The cache should support the following operations: get and put. - get(key): Retrieve the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. - put(key, value): Insert or update the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item. The cache should initially be empty and its capacity should be defined upon instantiation. Example: ```python cache = LRUCache(2) # Capacity of 2 cache.put(1, 10) cache.put(2, 20) cache.get(1) # returns 10 cache.put(3, 30) # evicts key 2 cache.get(2) # returns -1 (not found) cache.put(4, 40) # evicts key 1 cache.get(1) # returns -1 (not found) cache.get(3) # returns 30 cache.get(4) # returns 40 ``` Create a class `LRUCache` that implements the aforementioned operations. The class should be efficient in time complexity, aiming to achieve O(1) for both `get` and `put` operations. Consider using a combination of a hash map and a doubly-linked list to accomplish this.","solution":"class Node: def __init__(self, key=None, value=None): self.key = key self.value = value self.prev = None self.next = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = dict() # maps key to node self.head = Node() # dummy head of the doubly linked list self.tail = Node() # dummy tail of the doubly linked list self.head.next = self.tail self.tail.prev = self.head def _remove(self, node): prev_node = node.prev next_node = node.next prev_node.next = next_node next_node.prev = prev_node def _add(self, node): prev_tail = self.tail.prev prev_tail.next = node self.tail.prev = node node.prev = prev_tail node.next = self.tail def get(self, key: int) -> int: if key in self.cache: node = self.cache[key] self._remove(node) self._add(node) return node.value return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self._remove(self.cache[key]) elif len(self.cache) >= self.capacity: lru_node = self.head.next self._remove(lru_node) del self.cache[lru_node.key] new_node = Node(key, value) self._add(new_node) self.cache[key] = new_node"},{"question":"A company has several teams, each consisting of a certain number of employees. Your task is to determine the maximum number of teams that can be formed such that each team contains employees with unique skill levels. A team is valid if no two employees in it share the same skill level. ---Input--- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of employees. - The second line contains N space-separated integers S_1, S_2, ldots, S_N denoting the skill levels of the employees. ---Output--- For each test case, print a single line containing one integer — the maximum number of valid teams that can be formed. ---Constraints--- - 1 le T le 10 - 1 le N le 10^5 - 1 le S_i le 10^9 for each valid i ---Example Input--- 2 6 1 2 2 3 4 5 5 1 1 1 1 1 ---Example Output--- 5 1 ---Explanation--- Example case 1: One way to form the maximum number of valid teams is to have the following teams: - Team 1: Employee with skill 1 - Team 2: Employee with skill 2 - Team 3: Employee with skill 3 - Team 4: Employee with skill 4 - Team 5: Employee with skill 5 Example case 2: Since all employees have the same skill level, only one team can be formed.","solution":"def max_valid_teams(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] skills = test_cases[i][1] unique_skills = set(skills) results.append(len(unique_skills)) return results"},{"question":"You are developing a text-based adventure game where players can explore different rooms and interact with objects. The game involves moving between rooms, picking up items, and checking the player\'s inventory. Each room has a unique identifier, a description, and a list of items. Task You must write a function `movePlayer` that takes the current room ID, the direction the player wants to move (north, south, east, or west) as input parameters, and returns the new room ID or an error if the move is not possible. Each room is connected to other rooms in at least one direction. In Python, the rooms and their connections will be represented as a dictionary where keys are room IDs and values are another dictionary containing directions as keys and connected room IDs as values. E.g. ``` rooms = { 1: {\\"north\\": 2, \\"east\\": 3}, 2: {\\"south\\": 1}, 3: {\\"west\\": 1} } ``` Function prototype: `movePlayer(currentRoom, direction)` Examples 1. Given the `movePlayer` function and the above dictionary `rooms`, calling `movePlayer(1, \\"north\\")` will return `2` because room 1 has a connection to room 2 to the north. 2. Calling `movePlayer(1, \\"south\\")` will return an error message `\\"Move not possible\\"` because there is no connection to the south from room 1. 3. Calling `movePlayer(3, \\"west\\")` will return `1` because room 3 has a connection to room 1 to the west. The `movePlayer` function: - If the move is possible, returns the new room ID. - If the move is not possible, returns the string `\\"Move not possible\\"`. Write the function based on the above specification.","solution":"def movePlayer(currentRoom, direction): Move player to a new room based on the current room and direction. :param currentRoom: int, the current room ID :param direction: str, direction to move (\\"north\\", \\"south\\", \\"east\\", or \\"west\\") :return: int, new room ID or str, \\"Move not possible\\" if the move can\'t be made rooms = { 1: {\\"north\\": 2, \\"east\\": 3}, 2: {\\"south\\": 1}, 3: {\\"west\\": 1} } if currentRoom in rooms and direction in rooms[currentRoom]: return rooms[currentRoom][direction] else: return \\"Move not possible\\""},{"question":"Alice loves reading books and wants to organize her bookshelf in such a way that the total importance of books in one row is maximized. Her bookshelf can hold up to N books, and each book has a certain importance value. However, her shelf can only hold a limited number of books in a contiguous segment due to its structure. The segment can have a beginning and the end marked such that it starts with one book and can hold the next books sequentially without any gaps. Given the number of books N and an array I representing the importance values of each book, as well as an integer L that determines the maximum length of a contiguous segment Alice can choose, help her determine the highest possible total importance she can achieve by selecting a contiguous segment of books from her shelf. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - First-line of each test case contains N and L. - Second-line contains N integers I_1, I_2, ..., I_N, representing the importance values of the books. -----Output:----- For each test case, output in a single line, the maximum possible sum of the importance values of any contiguous segment of books that does not exceed the length L. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq L leq N - 1 leq I_i leq 10^4 Sum of N over all test cases is less than 10^6 -----Sample Input:----- 1 5 3 4 2 7 1 3 -----Sample Output:----- 13 -----EXPLANATION:----- The ideal choice would be to take the segment containing the books with importance values [4, 2, 7], which gives a total importance of 4 + 2 + 7 = 13.","solution":"def max_importance_segment(N, L, I): Returns the maximum possible sum of the importance values of any contiguous segment of books that does not exceed the length L. max_sum = 0 current_sum = 0 for i in range(N): current_sum += I[i] if i >= L: current_sum -= I[i - L] max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(T, test_cases): results = [] for i in range(T): N, L = test_cases[i][0] I = test_cases[i][1] results.append(max_importance_segment(N, L, I)) return results"},{"question":"You are given a maze represented as a grid of size n times m. Each cell in the grid is either a wall represented by \'#\' or an empty space represented by \'.\'. You need to find out the minimum number of steps required to traverse from the top-left cell (0, 0) to the bottom-right cell (n-1, m-1). (0, 0) and (n-1, m-1) are always empty cells. You can only move up, down, left, or right to an adjacent cell and cannot move through walls. If it\'s not possible to reach the bottom-right cell, return -1. -----Input----- The first line contains two integers n and m (1 leq n, m leq 1000), the number of rows and columns of the grid. The next n lines each contain m characters representing the maze. -----Output---- Output a single integer, the minimum number of steps required to reach the bottom-right cell, or -1 if it\'s not possible. -----Example----- Input: 5 5 ..... ..#.. .#.#. .#... ..... Output: 8 Input: 3 3 .#. # ..# Output: -1 -----Note----- In the first example, one of the possible paths is (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4), which takes 8 steps. In the second example, there is no way to reach the bottom-right cell since it\'s blocked by walls.","solution":"from collections import deque def min_steps_to_exit(maze, n, m): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, column, steps) visited[0][0] = True while queue: x, y, steps = queue.popleft() if x == n - 1 and y == m - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 # Example usage: # maze = [ # [\'.\', \'.\', \'.\', \'.\', \'.\'], # [\'.\', \'.\', \'#\', \'.\', \'.\'], # [\'.\', \'#\', \'.\', \'#\', \'.\'], # [\'.\', \'#\', \'.\', \'.\', \'.\'], # [\'.\', \'.\', \'.\', \'.\', \'.\'], # ] # print(min_steps_to_exit(maze, 5, 5)) # Output: 8"},{"question":"Task Create a function that determines whether all elements in an array appear the same number of times. Given an array, check if all elements in the array have the same frequency of occurrences. # Example For `arr = [1, 2, 2, 1, 1, 2]`, the output should be `true` since both elements `1` and `2` appear exactly 3 times. For `arr = [4, 4, 4, 3, 3, 2]`, the output should be `false` because element `4` appears 3 times, element `3` appears 2 times, and element `2` appears 1 time, which are not the same frequency. # Input/Output - `[input]` array of integers `arr` A non-empty array of integers. - `[output]` a boolean value `true` if all elements have the same frequency of occurrences, `false` otherwise.","solution":"def all_elements_same_frequency(arr): Determines if all elements in an array have the same frequency of occurrences. :param arr: List of integers :return: Boolean value indicating whether all elements have the same frequency if not arr: return True from collections import Counter frequency_counter = Counter(arr) frequencies = list(frequency_counter.values()) # Check if all frequencies are the same return all(f == frequencies[0] for f in frequencies)"},{"question":"In this problem, you will be tasked with processing astronomical observations and identifying planets from the data. Given the position of stars and the visibility of planets over several observations, determine which stars have one or more planets orbiting them and list the identified planets. Each star is identified by a unique ID and has a set of observations associated with it. Each observation indicates the visibility of certain planets. Your goal is to determine which planets are orbiting each star by identifying recurring planets in the observations. -----Input----- The first line contains T, the number of test cases. Each test case starts with an integer S, the number of stars. For each star, there are multiple lines of observations. The first line of each star\'s data contains the number of observations O for that star. Each of the following O lines contains a space-separated list of visible planets in that specific observation. -----Output----- For each star, output the star\'s ID followed by the sorted list of identified planets. If no planets are identified for a star, output \\"No Planets\\". Output format: Star <star_id>: <planet1> <planet2> ... <planetN> or Star <star_id>: No Planets -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ S ≤ 100 - 1 ≤ O ≤ 100 - Each planet name is a string of uppercase alphabetic characters (A-Z). - Planet names in observations for a particular star are unique within a single observation but may reappear across observations. -----Example----- Input: 1 2 3 A B C B C D A B 2 X Y Y Z Output: Star 1: A B Star 2: Y Note: - In the first test case, the results for two stars are processed. - For Star 1, planets A and B are visible in at least two different observations hence identified as orbiting planets. - For Star 2, only planet Y is visible in both observations, thus identified as the orbiting planet.","solution":"def identify_planets(data): Processes astronomical observations and identifies planets orbiting stars. Parameters: data (list): Input data containing observations for multiple stars. Returns: list: List containing the result of identified planets for each star. index = 0 T = int(data[index]) index += 1 results = [] for case in range(T): S = int(data[index]) index += 1 for star_id in range(1, S + 1): O = int(data[index]) index += 1 observations = [] for _ in range(O): observation = data[index].split() observations.append(set(observation)) index += 1 if not observations: results.append(f\\"Star {star_id}: No Planets\\") continue intersection = set(observations[0]) for observation in observations[1:]: intersection &= observation if intersection: planets = sorted(intersection) results.append(f\\"Star {star_id}: {\' \'.join(planets)}\\") else: results.append(f\\"Star {star_id}: No Planets\\") return results"},{"question":"John and Sarah are playing a card game using a standard 52-card deck. They take turns drawing cards from the top of the deck. John always draws first. Each drawing action consists of drawing one card, and the suit of that card determines their score based on the following rules: - Hearts: +4 points - Diamonds: +3 points - Clubs: +2 points - Spades: +1 point The game ends immediately when the deck runs out of cards. The player with the highest score at the end of the game wins. If the scores are tied, it\'s a draw. Write the function `cardGame(deck)` that takes a list of 52 strings representing the suits of the cards in the order they are drawn (with the possible values being \\"H\\", \\"D\\", \\"C\\", and \\"S\\" for Hearts, Diamonds, Clubs, and Spades, respectively) and returns a string indicating the winner: `\\"John\\"` or `\\"Sarah\\"`, or `\\"Draw\\"` if their scores are tied. Note: It is guaranteed that `deck` will always contain exactly 52 cards and only valid suit values. Example: ```python deck = [\\"H\\", \\"D\\", \\"C\\", \\"S\\", \\"H\\", \\"D\\", \\"C\\", \\"S\\", ..., \\"H\\", \\"D\\", \\"C\\", \\"S\\"] print(cardGame(deck)) # Output: \\"John\\" ``` In this example, John and Sarah take turns drawing the cards from the deck. You need to keep track of their scores and determine the winner at the end.","solution":"def cardGame(deck): Determines the winner of the card game between John and Sarah. Args: deck (list): List of 52 strings representing the suits of the cards in the order they are drawn. Possible values are \'H\' (Hearts), \'D\' (Diamonds), \'C\' (Clubs), and \'S\' (Spades). Returns: str: \\"John\\", \\"Sarah\\", or \\"Draw\\" based on the scores. john_score = 0 sarah_score = 0 points = { \'H\': 4, \'D\': 3, \'C\': 2, \'S\': 1 } for i, card in enumerate(deck): if i % 2 == 0: # John\'s turn (0, 2, 4, ...) john_score += points[card] else: # Sarah\'s turn (1, 3, 5, ...) sarah_score += points[card] if john_score > sarah_score: return \\"John\\" elif sarah_score > john_score: return \\"Sarah\\" else: return \\"Draw\\""},{"question":"Given an array of integers, write a function to find the continuous subarray (containing at least one number) which has the largest sum and return its sum. The subarray must be contiguous and you have to find the maximum sum using an efficient algorithm. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum = 6. Example 2: Input: nums = [1] Output: 1 Explanation: The array contains one element only, which is the largest sum subarray. Example 3: Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum = 23. Note: * 1 <= nums.length <= 10^5 * -10^4 <= nums[i] <= 10^4","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray with the largest sum. max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that takes a string of parentheses `(` and `)` and returns the longest length of balanced parentheses substring. A balanced parentheses substring is one that contains an equal number of opening and closing parentheses in the correct order. Examples: 1. For the input `\\"(()\\"`, the output should be `2`. Explanation: The longest balanced substring is `\\"()\\"`. 2. For the input `\\")()())\\"`, the output should be `4`. Explanation: The longest balanced substring is `()()`. Notice that the closing parentheses before it does not form a balanced substring, therefore, it is discarded. 3. For the input `\\"\\"`, the output should be `0`. Explanation: There are no parentheses, so the longest balanced substring length is zero.","solution":"def longest_balanced_parentheses(s: str) -> int: Returns the length of the longest balanced parentheses substring. stack = [-1] max_length = 0 for i, char in enumerate(s): if char == \'(\': stack.append(i) else: # char == \')\' stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"You are given a list of N positive integers representing the elements of an array. Your task is to find the maximum possible sum of elements in a subarray that does not contain any two consecutive elements from the original array. This subarray can be empty. A subarray is defined as a contiguous portion of an array. You need to return the maximum possible sum achievable under these conditions. Example: Input: nums = [3, 2, 5, 10, 7] Output: 15 Explanation: The optimal subarray is [3, 5, 7] with a sum of 3 + 5 + 7 = 15. Note that 2 and 10 are not included because they are adjacent to 3 and 5 respectively in the original array. Input: nums = [1, 2, 3, 4, 5] Output: 9 Explanation: The optimal subarray is [1, 3, 5] with a sum of 1 + 3 + 5 = 9. Another valid subarray is [2, 4], with a sum of 2 + 4 = 6, but it is not the maximum possible sum. Input: nums = [5, 1, 1, 5] Output: 10 Explanation: The optimal subarray is [5, 5], and the sum is 5 + 5 = 10. Note: 1. 1 <= N <= 1000 2. 1 <= nums[i] <= 10000","solution":"def max_non_consecutive_sum(nums): Returns the maximum possible sum of elements in a subarray that does not contain any two consecutive elements from the original array. Args: nums (list): List of positive integers. Returns: int: The maximum possible sum. if not nums: return 0 n = len(nums) if n == 1: return nums[0] inclusive = nums[0] exclusive = 0 for i in range(1, n): new_exclusive = max(inclusive, exclusive) inclusive = exclusive + nums[i] exclusive = new_exclusive return max(inclusive, exclusive)"},{"question":"Your task is to create a function that finds the most frequent element in a list. The function should take one argument - a list of elements. The function should return the most frequent element in the list. If there are multiple elements with the same highest frequency, return any one of them. # Examples ```python most_frequent([1, 3, 1, 3, 2, 1]) # Output: 1 most_frequent([3, 3, 3, 8, 8, 8]) # Output: 3 or 8 most_frequent([\'apple\', \'banana\', \'apple\']) # Output: \'apple\' most_frequent([10]) # Output: 10 ```","solution":"def most_frequent(lst): Returns the most frequent element in the list. If there are multiple elements with the same highest frequency, it returns any one of them. if not lst: return None freq_dict = {} for item in lst: freq_dict[item] = freq_dict.get(item, 0) + 1 max_freq = max(freq_dict.values()) for item in lst: if freq_dict[item] == max_freq: return item"},{"question":"=====Problem Statement===== You are tasked with developing a small system for an event organizing company. The company holds multiple events, and each event allows a limited number of attendees. Each attendee is assigned a unique ticket number for an event. However, sometimes people cancel their attendance after booking, leaving a gap in the ticket number sequence. You need to identify the missing ticket number from a sequence of ordered ticket numbers. The sequence is always contiguous with exactly one missing ticket number. =====Input Format===== The first line contains an integer, N, the number of attendees initially expected (including the missing one). The second line contains N-1 space-separated integers representing the unique ticket numbers of the attendees in ascending order. =====Constraints===== 1 < N < 10000 =====Output Format===== Output the missing ticket number. Example: Input: 5 1 2 4 5 Output: 3","solution":"def find_missing_ticket(N, tickets): Find the missing ticket number from the given list of ticket numbers. Args: N (int): The total number of expected attendees (including the missing one). tickets (list): The list of ticket numbers in ascending order. Returns: int: The missing ticket number. total_sum = N * (N + 1) // 2 sum_of_tickets = sum(tickets) return total_sum - sum_of_tickets # Example usage: # N = 5 # tickets = [1, 2, 4, 5] # print(find_missing_ticket(N, tickets)) # Should print 3"},{"question":"Task: Create a function `get_common_elements` that takes two lists of integers as input and returns a list containing the common elements between the two lists in sorted order. #Examples: ```python >>> get_common_elements([1, 3, 4, 6], [2, 3, 6, 8]) [3, 6] >>> get_common_elements([7, 8, 10], [5, 8, 9, 10, 11]) [8, 10] ``` #Libraries/Recommendations: Python: * `set`: A data structure for storing unique elements. It allows for efficient set operations such as intersection, union, and difference. * `sorted`: A built-in function to sort iterables into ascending order. #Notes: * If there are no common elements, return an empty list. * The input lists may contain duplicate elements but the returned list should not contain duplicates. * The function should perform efficiently for large input lists.","solution":"def get_common_elements(list1, list2): Returns a sorted list of common elements between two input lists. # Convert lists to sets to handle duplicates and perform set intersection set1 = set(list1) set2 = set(list2) # Find the intersection of both sets common_elements = set1.intersection(set2) # Return the sorted list of common elements return sorted(common_elements)"},{"question":"Write a function `findCommonElements` which takes two lists of integers `list1` and `list2` as arguments and returns a sorted list containing the common elements between the two lists without duplicates. For example: - `findCommonElements([1, 2, 2, 3, 4], [3, 4, 4, 5, 6])` should return `[3, 4]`. - `findCommonElements([7, 8, 9], [9, 10, 11, 7])` should return `[7, 9]`. The input lists can be of varying lengths, and may contain duplicate values. The output list should be sorted in ascending order.","solution":"def findCommonElements(list1, list2): Returns a sorted list of common elements without duplicates between list1 and list2. # Convert both lists to sets to remove duplicates and find the intersection common_elements = set(list1) & set(list2) # Return the common elements sorted return sorted(common_elements)"},{"question":"Implement a function that takes a string as input and returns the most frequently occurring character. If there is a tie, return the character that appears first in the string. For example: ```python most_frequent_character(\\"aabbbcc\\") -> \\"b\\" most_frequent_character(\\"abccba\\") -> \\"a\\" ```","solution":"def most_frequent_character(s): Returns the most frequently occurring character in the string s. If there is a tie, returns the character that appears first in the string. from collections import Counter if not s: return None counter = Counter(s) max_count = max(counter.values()) for char in s: if counter[char] == max_count: return char"},{"question":"# Problem In a faraway land, there is a peculiar dance competition. The dancers form a circular formation and have certain restrictions based on the beats of the music. Each dancer has a unique preference for the beats they can dance on. Given an integer `k` (1-based index) representing the position of the starting dancer, and an array `preferences` where the `i-th` element of the array (1-based index) represents the number of beats the `(i+1)-th` dancer can dance in a cycle until the next one can start. Your task is to determine the position of the dancer who can perform on the maximum number of beats consecutively, starting from the `k-th` dancer and moving clockwise. # Example For `k = 1` and `preferences = [2, 4, 3, 6, 1]`, the output should be `4` Explanation: - Starting at position 1, on beat preference `[2]`, the first dancer can only dance on 2 beats. - Moving to the next position (index 2, second element in the array), the second dancer can dance for 4 beats which is the maximum seen so far. - Continuing to check further dancers: - The third dancer can dance on 3 beats. - The fourth dancer can dance on 6 beats which is higher than any previous dancer\'s preference. - The fifth dancer can only dance on 1 beat. Therefore, the fourth dancer (position 4) has the maximum dance beats and thus is the answer. For `k = 3` and `preferences = [2, 4, 3, 6, 1]`, the output should be `4` For `k = 5` and `preferences = [2, 4, 3, 6, 1]`, the output should be `4` # Constraints - `1 <= k <= n` - `1 <= preferences[i] <= 100` - `n` is the length of the preferences array where `1 <= n <= 100` # Note - The beats the dancers can dance on are all positive integers. - The dancers continuously form a loop. Hence, if you start at position `k` after reaching the end of the array, continue checking the dancers from the beginning again.","solution":"def find_max_dancer(k, preferences): Returns the 1-based position of the dancer who can perform on the maximum number of beats consecutively, starting from the k-th dancer and moving clockwise. :param k: int - starting position (1-based index) :param preferences: list of int - list representing beat preferences of each dancer :return: int - position of the dancer with maximum beats consecutively (1-based index) n = len(preferences) max_beats = -1 max_position = -1 # Iterate over the dancers in cyclic order starting from k for i in range(n): current_position = (k - 1 + i) % n if preferences[current_position] > max_beats: max_beats = preferences[current_position] max_position = current_position + 1 # converting 0-based index to 1-based return max_position"},{"question":"You have been hired by a financial analytics company to write a program that processes daily stock prices and answers certain queries about them. The stock prices are given in a time-series format (i.e., a list of numbers where each number represents the stock price at the end of that day). Your program needs to handle two types of queries: 1. Average price query: Given a range of days [start, end], your program needs to return the average stock price over that range. 2. Median price query: Given a range of days [start, end], your program needs to return the median stock price over that range. Write a program to answer these queries efficiently. -----Input----- The first line contains an integer n, the number of days for which stock prices are provided (1 ≤ n ≤ 100000). The second line contains n integers, where each integer represents the stock price on that day (1 ≤ stock price ≤ 10000). The third line contains an integer q, the number of queries (1 ≤ q ≤ 10000). The next q lines contain a query of one of the following two formats: - 1 start end: This represents an average price query for the range [start, end] (1 ≤ start ≤ end ≤ n). - 2 start end: This represents a median price query for the range [start, end] (1 ≤ start ≤ end ≤ n). -----Output----- For each query, output a single number (average or median) on a new line. For average queries, the output should be a floating point number rounded to two decimal places. For median queries, if the range contains an odd number of elements, return the middle element; if it contains an even number of elements, return the average of the two middle elements rounded to two decimal places. -----Example----- Input 6 3 7 8 5 6 4 3 1 1 3 1 2 5 2 2 6 Output 6.00 6.50 6.00","solution":"def process_queries(stock_prices, queries): Processes the queries on the given stock prices. Args: stock_prices: list of integers representing the stock prices over days. queries: list of queries where each query is a list with elements [type, start, end] Returns: list of results for each query. results = [] for query in queries: q_type, start, end = query # Adjust the indices because input is 1-indexed start -= 1 end -= 1 if q_type == 1: range_prices = stock_prices[start:end+1] average_price = sum(range_prices) / len(range_prices) results.append(f\\"{average_price:.2f}\\") elif q_type == 2: range_prices = sorted(stock_prices[start:end+1]) length = len(range_prices) if length % 2 == 1: median_price = range_prices[length // 2] results.append(f\\"{median_price:.2f}\\") else: mid1, mid2 = range_prices[length // 2 - 1], range_prices[length // 2] median_price = (mid1 + mid2) / 2 results.append(f\\"{median_price:.2f}\\") return results"},{"question":"Given a string s, write a function that finds the longest substring without repeating characters and returns its length. Example: ``` s = \\"abcabcbb\\" => 3 (\\"abc\\") s = \\"bbbbb\\" => 1 (\\"b\\") s = \\"pwwkew\\" => 3 (\\"wke\\") s = \\"\\" => 0 ``` If the string is empty or None, return 0. Note: The substring must consist of contiguous characters of the string.","solution":"def length_of_longest_substring(s): Finds the length of the longest substring without repeating characters in a given string. Parameters: s (str): The input string. Returns: int: The length of the longest substring without repeating characters. if s is None or s == \\"\\": return 0 n = len(s) max_length = 0 start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a list of words, group the anagrams together. Each group of anagrams should be output in alphabetical order, and the groups themselves should also be printed in alphabetical order based on their first word. Example 1: Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [ [\\"ate\\", \\"eat\\", \\"tea\\"], [\\"bat\\"], [\\"nat\\", \\"tan\\"] ] Example 2: Input: [\\"listen\\", \\"silent\\", \\"enlist\\", \\"bad\\", \\"dab\\"] Output: [ [\\"bad\\", \\"dab\\"], [\\"enlist\\", \\"listen\\", \\"silent\\"] ] Note: - All inputs are in lowercase. - The order of output does not matter as long as each group of anagrams is sorted alphabetically and the groups themselves are sorted by the first word.","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams together and sorts the groups and elements within each group. :param words: List of words to be grouped :return: List of lists containing grouped and sorted anagrams anagrams = defaultdict(list) for word in words: # Sort the word to create a common key for anagrams sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Sort each group of anagrams lexicographically sorted_anagrams = [] for key in sorted(anagrams): sorted_anagrams.append(sorted(anagrams[key])) # Sort the list of anagram groups by the first word in each group sorted_anagrams.sort(key=lambda x: x[0]) return sorted_anagrams"},{"question":"Validate Sudoku Solution You need to write a function that checks whether a given Sudoku board (9x9) is valid and either complete or incomplete. The board is represented by a 2D array, where each element is a number from 1 to 9, representing that a cell contains a digit, or 0, representing that a cell is blank. A valid Sudoku board satisfies the following conditions: - Each row must contain the digits 1-9 without repetition (excluding blanks). - Each column must contain the digits 1-9 without repetition (excluding blanks). - Each of the nine 3x3 sub-grids must contain the digits 1-9 without repetition (excluding blanks). The function should return \'Complete\' if the board is valid and contains no blank cells, \'Incomplete\' if the board is valid but has at least one blank cell, or \'Invalid\' if the board does not satisfy the Sudoku rules as described above. ```python def validate_sudoku(board): def is_valid_group(group): elements = [num for num in group if num != 0] return len(elements) == len(set(elements)) for row in board: if not is_valid_group(row): return \'Invalid\' for col in range(9): if not is_valid_group([board[row][col] for row in range(9)]): return \'Invalid\' for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): if not is_valid_group( [board[r][c] for r in range(box_row, box_row + 3) for c in range(box_col, box_col + 3)] ): return \'Invalid\' if any(cell == 0 for row in board for cell in row): return \'Incomplete\' return \'Complete\' ``` # Example Board ```python board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] print(validate_sudoku(board)) # Output: \'Incomplete\' ```","solution":"def validate_sudoku(board): def is_valid_group(group): elements = [num for num in group if num != 0] return len(elements) == len(set(elements)) for row in board: if not is_valid_group(row): return \'Invalid\' for col in range(9): if not is_valid_group([board[row][col] for row in range(9)]): return \'Invalid\' for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): if not is_valid_group( [board[r][c] for r in range(box_row, box_row + 3) for c in range(box_col, box_col + 3)] ): return \'Invalid\' if any(cell == 0 for row in board for cell in row): return \'Incomplete\' return \'Complete\'"},{"question":"**Description:** Create a function that determines if a string is a valid identifier. A valid identifier must follow these rules: 1. It must start with an alphabetic character (either uppercase or lowercase) or an underscore (_). 2. The follow-up characters (if any) can be alphabetic characters, digits (0-9), or underscores. 3. Keywords such as `class`, `function`, and `return` are not valid identifiers. # Examples ``` is_valid_identifier(\\"variable\\") == true is_valid_identifier(\\"_variable\\") == true is_valid_identifier(\\"2variable\\") == false is_valid_identifier(\\"VAR123\\") == true is_valid_identifier(\\"returnValue\\") == true is_valid_identifier(\\"function\\") == false is_valid_identifier(\\"class_name\\") == true is_valid_identifier(\\"valid123_name\\") == true ```","solution":"def is_valid_identifier(identifier): Determines if a given string is a valid identifier. if not identifier: return False if identifier in [\\"class\\", \\"function\\", \\"return\\"]: return False if not (identifier[0].isalpha() or identifier[0] == \'_\'): return False for char in identifier[1:]: if not (char.isalnum() or char == \'_\'): return False return True"},{"question":"Given a string, write a function that returns the longest substring which occurs more than once in that string. If there are multiple substrings with the same maximum length, return the one that appears first. The comparison should be case-sensitive. __*Note*__: The substring must not overlap itself. Examples ``` \\"banana\\" ==> \\"ana\\" \\"ababc\\" ==> \\"ab\\" \\"abcabcbb\\" ==> \\"abc\\" \\"abcdef\\" ==> \\"\\" ```","solution":"def longest_repeated_substring(s): Returns the longest substring which occurs more than once in the string s. If there are multiple substrings with the same maximum length, return the one that appears first. The comparison is case-sensitive. n = len(s) longest_substring = \\"\\" for length in range(1, n): seen = {} for i in range(n - length + 1): substring = s[i:i+length] if substring in seen: seen[substring] += 1 else: seen[substring] = 1 if seen[substring] > 1 and len(substring) > len(longest_substring): longest_substring = substring return longest_substring"},{"question":"Martha enjoys solving puzzles. She recently learned about the concept of permutations and decided to create a new game for herself. She takes a string consisting of lowercase English letters and wants to find the lexicographically smallest permutation of the string that still contains at least one instance of two given substrings, a, and b. Help Martha by writing a program that finds the lexicographically smallest permutation of the string that still contains both substrings a and b, each at least once. If no such permutation exists, return the string \\"IMPOSSIBLE\\". A string u is lexicographically smaller than a string v if for some 0 leq i < min(text{len}(u), text{len}(v)) we have u_i < v_i and for all j with 0 leq j < i it holds that u_j = v_j. -----Input----- The first line contains a single integer t (1 leq t leq 100), the number of test cases. Each test case consists of three lines. First line contains a string s (1 leq text{len}(s) leq 500). Second line contains a non-empty substring a (1 leq text{len}(a) leq text{len}(s)). Third line contains a non-empty substring b (1 leq text{len}(b) leq text{len}(s)). -----Output----- For each test case, print the lexicographically smallest permutation of s which contains at least one instance of both a and b as substrings. If no such permutation exists, print \\"IMPOSSIBLE\\". -----Example----- Input 3 abcd ab cd abcdefg abc efg abc def ghi Output abcd abcdefgh IMPOSSIBLE -----Note----- In the first test case, the permutation `abcd` is already the smallest lexicographically and it contains a = \\"ab\\" and b = \\"cd\\". In the second test case, `abcdefgh` is the lexicographically smallest permutation of `abcdefg` that contains \\"abc\\" and \\"efg\\". In the third test case, there is no permutation of \\"abc\\" that contains both \\"def\\" and \\"ghi\\" as substrings, hence the result is \\"IMPOSSIBLE\\".","solution":"from itertools import permutations def smallest_permutation_with_substrings(s, a, b): Finds the lexicographically smallest permutation of s that contains substrings a and b at least once. sorted_s = sorted(s) for perm in permutations(sorted_s): perm_str = \'\'.join(perm) if a in perm_str and b in perm_str: return perm_str return \\"IMPOSSIBLE\\" def solve(t, cases): results = [] for i in range(t): s, a, b = cases[i] results.append(smallest_permutation_with_substrings(s, a, b)) return results"},{"question":"To design a circuit board, engineers need a function that can determine the width and height of the smallest possible rectangle that can cover a list of given points on a 2D plane. Each point is represented as a tuple of (x, y) coordinates. You are provided with a list of tuples, where each tuple represents the coordinates of a point in the 2D plane. Your task is to write a function that calculates the dimensions (width and height) of the smallest rectangle that can cover all the given points. The sides of the rectangle should be parallel to the x and y axes. For example: ```python smallest_rectangle([(1, 2), (2, 4), (3, 6)]) returns (2, 4) smallest_rectangle([(0, 0), (5, 7), (9, 10), (2, -5)]) returns (9, 15) ``` If the list of points is empty, the function should return (0, 0). Example: ```python smallest_rectangle([]) returns (0, 0) ``` Consider edge cases where all points lie on a single line either horizontally or vertically. In such cases, the height or width respectively will be zero. For example: ```python smallest_rectangle([(0, 2), (0, 4), (0, 6)]) returns (0, 4) smallest_rectangle([(1, 1), (2, 1), (3, 1)]) returns (2, 0) ```","solution":"def smallest_rectangle(points): Given a list of points in the 2D plane, returns the dimensions of the smallest rectangle that can cover all the points. The sides of the rectangle are parallel to the x and y axes. :param points: List of tuples, where each tuple represents (x, y) coordinates of a point. :return: A tuple (width, height) representing the dimensions of the smallest rectangle. if not points: return (0, 0) min_x = min(point[0] for point in points) max_x = max(point[0] for point in points) min_y = min(point[1] for point in points) max_y = max(point[1] for point in points) width = max_x - min_x height = max_y - min_y return (width, height)"},{"question":"Arnav has been given a list of distinct integers and he wants to pair them up in such a way that the maximum pairwise sum is minimized. Each pair should contain exactly two elements from the list, and each element must be used exactly once. If the list contains an odd number of elements, exactly one element will be left unpaired. -----Input:----- - The first line contains a single integer n - the number of elements in the list. - The second line contains n space-separated integers representing the elements of the list. -----Output:----- Output a single integer denoting the minimized value of the maximum pairwise sum. -----Constraints----- - 1 leq n leq 10^5 - 1 leq a[i] leq 10^6 -----Sample Input:----- 6 1 3 5 9 2 7 -----Sample Output:----- 10 -----Explanation:----- One of the optimal ways to pair the elements such that the maximum pairwise sum is minimized is: - Pair (1, 9) -> sum is 10 - Pair (3, 7) -> sum is 10 - Pair (5, 2) -> sum is 7 Thus, the maximum pairwise sum is 10.","solution":"def minimize_max_pairwise_sum(n, lst): Finds the minimized value of the maximum pairwise sum. Parameters: n (int): The number of elements in the list. lst (list of int): The list of distinct integers. Returns: int: The minimized value of the maximum pairwise sum. lst.sort() max_pairwise_sum = 0 # Iterate over the list by pairing the smallest with the largest elements for i in range(n//2): pair_sum = lst[i] + lst[n-1-i] max_pairwise_sum = max(max_pairwise_sum, pair_sum) return max_pairwise_sum"},{"question":"You are given a list of integers and a target integer. Write a function that returns the smallest subarray length that, when summed, is greater than or equal to the target integer. If no such subarray exists, return 0. A subarray is a contiguous part of an array. **Function Signature:** ```python def min_subarray_len(target: int, nums: List[int]) -> int: ``` # Example ```python # Example 1 target = 7 nums = [2,3,1,2,4,3] assert min_subarray_len(target, nums) == 2 # Explanation: The subarray [4,3] has the minimal length # Example 2 target = 15 nums = [1,2,3,4,5] assert min_subarray_len(target, nums) == 5 # Explanation: The entire array is the smallest subarray. ``` # Constraints: 1. 1 <= target <= 10^9 2. 1 <= nums.length <= 10^5 3. 1 <= nums[i] <= 10^4 Happy coding!","solution":"from typing import List def min_subarray_len(target: int, nums: List[int]) -> int: Returns the length of the smallest subarray whose sum is greater than or equal to the target. If no such subarray exists, returns 0. n = len(nums) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"For this problem, you will be given a string as input. The string consists of uppercase English letters only. Write a function that checks if the input string can be rearranged to form a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward (e.g., \\"MADAM\\" or \\"RACECAR\\"). Your function should return `\\"YES\\"` if it is possible to rearrange the characters of the string to form a palindrome, and `\\"NO\\"` otherwise. Example input and output: - Input: `\\"AABB\\"` Output: `\\"YES\\"` - Input: `\\"ABC\\"` Output: `\\"NO\\"` - Input: `\\"AABBC\\"` Output: `\\"YES\\"`","solution":"def can_form_palindrome(s): from collections import Counter count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Given a string s and a list of strings words, find the number of subarrays of words that concatenate to form the entire string s (substrings). -----Input:----- - The first line contains an integer t, denoting the number of test cases. - The next 2t lines contain each test case in the following order: - A string s. - A space-separated list of words. -----Output:----- Output t lines, each containing a single integer that represents the number of subarrays of words that concatenate to form the string s for each test case. -----Constraints----- - 1≤ t ≤ 10 - 1≤ length of s ≤ 104 - 1≤ number of words ≤ 500 - 1≤ length of each word ≤ 50 -----Sample Input:----- 2 barfoothefoobarman foo bar wordgoodgoodgoodbestword word good best good -----Sample Output:----- 2 1 -----EXPLANATION:----- For the first test case, the subarrays \\"foo bar\\" and \\"bar foo\\" concatenate to form the strings \\"foobar\\" and \\"barfoo\\" which are both substrings of \\"barfoothefoobarman\\". For the second test case, the subarray \\"word good good best\\" concatenates to form the string \\"wordgoodgoodbest\\" which is a substring of \\"wordgoodgoodgoodbestword\\".","solution":"def find_subarray_concatenations(t, test_cases): from collections import Counter def count_concatenations(s, words): word_length = len(words[0]) num_words = len(words) concat_length = word_length * num_words word_count = Counter(words) result = 0 for i in range(len(s) - concat_length + 1): seen_words = {} for j in range(num_words): part = s[i + j * word_length : i + (j + 1) * word_length] if part in word_count: if part in seen_words: seen_words[part] += 1 else: seen_words[part] = 1 if seen_words[part] > word_count[part]: break else: break if seen_words == word_count: result += 1 return result results = [] for i in range(t): s = test_cases[i][0] words = test_cases[i][1] results.append(count_concatenations(s, words)) return results"},{"question":"You are given a grid of integers with dimensions N x M. You need to find the size of the largest square subgrid such that all the numbers in this subgrid are the same. -----Input----- - The first line of the input contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of rows and columns in the grid. - The next N lines contain M integers each, representing the grid. -----Output----- Print a single integer — the size of the largest square subgrid where all numbers are the same. -----Constraints----- - 1 ≤ grid[i][j] ≤ 1000 -----Example Input----- 4 5 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 1 1 2 2 2 -----Example Output----- 2 -----Explanation----- Example case 1: The largest square subgrid where all numbers are the same is of size 2x2, with all elements being \'1\' in the top-left corner or \'2\' in the bottom-right corner.","solution":"def largest_square_subgrid(N, M, grid): def check_square(x, y, size): if x + size > N or y + size > M: return False value = grid[x][y] for i in range(size): for j in range(size): if grid[x + i][y + j] != value: return False return True max_size = min(N, M) result = 1 # at least 1x1 subgrid is always possible for size in range(2, max_size + 1): found = False for i in range(N - size + 1): for j in range(M - size + 1): if check_square(i, j, size): result = size found = True break if found: break return result"},{"question":"Design a function that takes a list of integers and returns a list of those integers which are perfect squares. A perfect square is a number that can be expressed as the product of an integer with itself. For example, `1, 4, 9, 16, 25` are perfect squares `(1*1, 2*2, 3*3, 4*4, 5*5)`. Your function should iterate through the list, check which numbers are perfect squares, and return a new list containing these numbers. # Examples * `[1, 2, 3, 4, 5]` will return `[1, 4]` * `[10, 15, 20, 25, 30]` will return `[25]` * `[11, 14, 17, 19]` will return `[]`","solution":"import math def is_perfect_square(n): Helper function to check if a number is a perfect square. if n < 0: return False root = int(math.sqrt(n)) return n == root * root def get_perfect_squares(lst): Returns a list of perfect squares from the given list of integers. return [num for num in lst if is_perfect_square(num)]"},{"question":"Given an integer array nums of length n, return true if there is a subsequence of length 3 that is strictly increasing, otherwise, return false. Note: The subsequence does not need to be contiguous, but it must remain in its original order. Example 1: Input: nums = [1, 2, 3, 4, 5] Output: true Explanation: The sequence [1, 2, 3] is a strictly increasing subsequence of length 3. Example 2: Input: nums = [5, 4, 3, 2, 1] Output: false Explanation: There is no increasing subsequence of length 3. Example 3: Input: nums = [2, 1, 5, 0, 4, 6] Output: true Explanation: The sequence [2, 4, 6] is a strictly increasing subsequence of length 3.","solution":"def increasing_triplet(nums): Returns true if there is a subsequence of length 3 that is strictly increasing, otherwise returns false. first = second = float(\'inf\') for num in nums: if num <= first: first = num elif num <= second: second = num else: return True return False"},{"question":"Create a function that accepts a list of positive integers and returns a new list containing only the integers that are perfect numbers. A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding itself). For example, the number 28 is a perfect number because its proper divisors are 1, 2, 4, 7, and 14, which add up to 28. If the input list is empty or contains non-positive integers, the function should return \\"Invalid input\\". ``` perfect_numbers([6, 28, 496, 12, 97]) => [6, 28, 496] perfect_numbers([1, 2, 3, 4, 5]) => [] perfect_numbers([6, 12, -28, 0]) => \\"Invalid input\\" perfect_numbers([]) => \\"Invalid input\\" ``` ```Haskell In Haskell the function should return a list with the perfect numbers found or an empty list for invalid input or if no perfect numbers are found. ```","solution":"def perfect_numbers(numbers): Returns a list of perfect numbers from the input list. A perfect number is a positive integer that is equal to the sum of its proper divisors. If the input list is empty or contains non-positive integers, returns \\"Invalid input\\". if not numbers or any(n <= 0 for n in numbers): return \\"Invalid input\\" def is_perfect(n): divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n return [n for n in numbers if is_perfect(n)]"},{"question":"Task Calculate the sum of all the digits in an integer. Details Given an integer `n` (where `n >= 0`), return the sum of its digits. For negative cases, the absolute value of `n` should be considered. # Example Input - `n = 12345` # Example Output - `15` (as `1 + 2 + 3 + 4 + 5 = 15`) # Additional Notes - The input will always be a non-negative integer. - The function should be optimized for large values of `n`. Write a function: ```python def sum_of_digits(n: int) -> int: pass ``` # Example ```python print(sum_of_digits(12345)) # Output: 15 print(sum_of_digits(9876543210)) # Output: 45 ```","solution":"def sum_of_digits(n: int) -> int: Returns the sum of the digits of the non-negative integer n. return sum(int(digit) for digit in str(n))"},{"question":"A palindrome is a sequence of characters which reads the same backward as forward. This task involves creating a function to find the longest palindromic subsequence in a given string. A subsequence does not necessarily have to be contiguous but maintains the relative order of characters as in the original string. Write a function that takes a string `s` as input and returns the length of the longest palindromic subsequence within `s`. For example: - If `s` is \\"bbbab\\", the function should return `4` (the longest palindromic subsequence is \\"bbbb\\"). - If `s` is \\"cbbd\\", the function should return `2` (the longest palindromic subsequence is \\"bb\\"). Your solution should efficiently compute the answer even for longer strings (up to length `1000`). To up the ante, strive to solve it with a time complexity better than `O(n^2)`. Here are some example inputs and outputs for clarity: ```python # Example 1 input: s = \\"bbbab\\" output: 4 # Example 2 input: s = \\"cbbd\\" output: 2 # Example 3 input: s = \\"character\\" output: 5 (The longest palindromic subsequence can be \\"carac\\") ``` Remember to handle edge cases, such as an empty string or a string with all unique characters. If `s` is an empty string, return `0`. Challenge the limits of algorithmic efficiency and big-O notation to find the optimal solution!","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in s. n = len(s) if n == 0: return 0 # Create a table to store results of subproblems dp = [[0 for x in range(n)] for y in range(n)] # All subsequences of length 1 are palindromes for i in range(n): dp[i][i] = 1 # Build the table. The outer loop is used to pick a length of the substring. for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # Length of longest palindromic subsequence return dp[0][n - 1]"},{"question":"**Problem:** Permutation Index Calculation You are given an array of length N which contains a permutation of the numbers from 1 to N. Your task is to determine the rank (1-based index) of this permutation when all permutations of the array are arranged in lexicographical order. A permutation is a way of arranging a set of numbers in a specific order. Lexicographical order is the order in which words or numbers are arranged as in a dictionary; i.e., lexicographically smallest comes first. -----Input----- - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a single integer N, and then a list of N integers denoting the permutation. -----Output----- - For each test case, print a single integer - the rank of the permutation, modulo 10^9+7. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100,000 - 1 ≤ Permutation[i] ≤ N for all valid i - The permutation contains unique values from 1 to N -----Example----- Input: 3 4 3 1 2 4 3 1 2 3 5 5 4 3 2 1 Output: 13 1 120 **Explanation:** In the first test case, if we list all permutations of [1, 2, 3, 4] lexicographically and find the position of [3, 1, 2, 4], it is 13th. In the second test case, the permutation [1, 2, 3] is already the first permutation in lexicographical order. In the third test case, [5, 4, 3, 2, 1] is the last permutation among the permutations of [1, 2, 3, 4, 5], so its position is 120.","solution":"def factorial(n): Returns the factorial of n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result def permutation_index(perm): Returns the rank of the permutation \'perm\' when all permutations of the array are arranged in lexicographical order. The result is modulo 10^9 + 7. MOD = 10**9 + 7 n = len(perm) index = 1 factor = factorial(n - 1) % MOD for i in range(n): smaller_count = 0 for j in range(i + 1, n): if perm[j] < perm[i]: smaller_count += 1 index += smaller_count * factor index %= MOD if i < n - 1: factor //= (n - 1 - i) return index def process_input(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] perm = test_cases[t][1:] result = permutation_index(perm) results.append(result) return results"},{"question":"Write a function find_permutation_sum that, given a list of unique integers nums, returns the sum of all numbers in the lexicographically smallest permutation of the list which is greater than the given permutation. If no such permutation exists, return 0. For example: - For nums = [1, 2, 3], the next permutation is [1, 3, 2], and the sum is 6. - For nums = [3, 2, 1], there is no lexicographically larger permutation, so the function should return 0. Assume that the input list nums will always have at least one element.","solution":"def find_permutation_sum(nums): Given a list of unique integers nums, returns the sum of all numbers in the lexicographically smallest permutation of the list which is greater than the given permutation. If no such permutation exists, return 0. # Find the rightmost ascending pair of elements i = len(nums) - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 # If no such pair is found, return 0 since it\'s the highest permutation if i == -1: return 0 # Find the smallest element on the right of nums[i] that is greater than nums[i] j = len(nums) - 1 while nums[j] <= nums[i]: j -= 1 # Swap nums[i] and nums[j] nums[i], nums[j] = nums[j], nums[i] # Reverse the elements to the right of nums[i] nums = nums[:i+1] + nums[i+1:][::-1] # Return the sum of the next permutation return sum(nums)"},{"question":"Given a string, rearrange its characters so that any two adjacent characters are not the same. If this is not possible, return an empty string. For example: - Input: `\\"aab\\"` - Output: `\\"aba\\"` - Input: `\\"aaab\\"` - Output: `\\"\\"` Assumptions: - The input string will have a maximum length of 500. - The string will only contain lowercase English letters. Write a function `reorganizeString(s: str) -> str` that implements this functionality. Good luck! If you like this problem, you may also enjoy: [Longest Substring with At Most K Distinct Characters](https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/) [Rearrange Words in a Sentence](https://leetcode.com/problems/rearrange-words-in-a-sentence/)","solution":"import heapq from collections import Counter def reorganizeString(s: str) -> str: count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) result = [] prev_char, prev_freq = \'\', 0 while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"# Task: Given a string containing a list of integers separated by commas (`,`), return the highest product obtainable by multiplying any three of the integers. If there are fewer than three numbers, return `None`/`null`. # Note: - The input list may contain negative numbers. - If input string is empty, return `None`/`null`. # Example: `max_product_of_three(\\"1,2,3,4\\")` returns `24` because: ``` The highest product of three numbers = 2 * 3 * 4 = 24. ``` `max_product_of_three(\\"1,2,-3,4\\")` returns `8` because: ``` The highest product of three numbers could be 1 * (-3) * 4 = -12. But the highest product is 1 * 2 * 4 = 8. ``` `max_product_of_three(\\"1,2\\")` returns `None` because: ``` There are less than three numbers available. ```","solution":"def max_product_of_three(numbers): Returns the maximum product of any three integers from the input string. If there are fewer than three numbers, return None. If input string is empty, return None. if not numbers: return None num_list = list(map(int, numbers.split(\',\'))) if len(num_list) < 3: return None num_list.sort() # The maximum product can be obtained by either # 1. The product of the three largest numbers max_product1 = num_list[-1] * num_list[-2] * num_list[-3] # 2. The product of the two smallest numbers (which could be negative) and the largest number max_product2 = num_list[0] * num_list[1] * num_list[-1] return max(max_product1, max_product2)"},{"question":"Create a function that takes a string as input and returns a compressed version of the string using Run-Length Encoding (RLE). Run-Length Encoding is a simple form of data compression where consecutive elements are replaced with a single element followed by the count of repetitions. If an element does not repeat, it appears in the encoded string just once. For example: - The string `\\"aaabbc\\"` would be encoded as `\\"a3b2c1\\"`. - The string `\\"abcd\\"` would be encoded as `\\"a1b1c1d1\\"`. Your task is to implement the function: ```python def run_length_encoding(s): # Implement the function to encode the string using Run-Length Encoding ``` # Input - A single string `s` with a length of 1 to 1000 characters. - The string `s` will contain only lowercase letters. # Output - A single string that represents the run-length encoded version of `s`. # Example ```python print(run_length_encoding(\\"aaabbc\\")) # Output: \\"a3b2c1\\" print(run_length_encoding(\\"abcd\\")) # Output: \\"a1b1c1d1\\" ```","solution":"def run_length_encoding(s): Encodes the input string using Run-Length Encoding (RLE). if not s: return \\"\\" encoded_string = [] count = 1 previous_char = s[0] for char in s[1:]: if char == previous_char: count += 1 else: encoded_string.append(f\\"{previous_char}{count}\\") count = 1 previous_char = char encoded_string.append(f\\"{previous_char}{count}\\") return \\"\\".join(encoded_string)"},{"question":"You are given a 2D binary matrix filled with 0\'s and 1\'s. Find the largest rectangle containing only 1\'s and return its area. Example 1: Input: [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] Output: 6 Explanation: The largest rectangle containing only 1\'s has an area of 6. Example 2: Input: [ [0, 1], [1, 0] ] Output: 1 Explanation: The largest rectangle containing only 1\'s has an area of 1. Example 3: Input: [ [0] ] Output: 0 Explanation: There are no 1\'s in the matrix, so the area is 0.","solution":"def maximalRectangle(matrix): Find the largest rectangle containing only 1\'s and returns its area. if not matrix or not matrix[0]: return 0 max_area = 0 heights = [0] * len(matrix[0]) for row in matrix: for i in range(len(row)): heights[i] = heights[i] + 1 if row[i] == 1 else 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): Helper function to find the largest rectangle in histogram. stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area"},{"question":"You are given an array of integers and an integer k. The array initially stores n elements. Design an algorithm to find the k-th largest element in the array. Note that it is the k-th largest element in sorted order, not the k-th distinct element. Example 1: Input: array = [3, 2, 1, 5, 6, 4], k = 2 Output: 5 Example 2: Input: array = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4 Output: 4 Your algorithm\'s runtime complexity should ideally be better than O(n log n), where n is the size of the array.","solution":"import heapq def find_kth_largest(nums, k): Returns the k-th largest element in the array. return heapq.nlargest(k, nums)[-1]"},{"question":"Given an array of integers `nums` and an integer `k`, return the maximum sum of a non-empty subarray of `nums` such that the sum of the subarray is less than `k`. If no such subarray exists, return `-1`. Note: - The array `nums` can contain both positive and negative integers. - The length of `nums` is less than 10,000. - The integer `k` is a positive number. Example 1: Input: nums = [2, 1, -1, 3, 4], k = 8 Output: 7 Example 2: Input: nums = [1, 2, 3], k = 1 Output: -1","solution":"def max_subarray_sum_less_than_k(nums, k): Finds the maximum sum of a non-empty subarray of `nums` such that the sum is less than `k`. If no such subarray exists, returns `-1`. :param nums: List of integers (both positive and negative) :param k: An integer :return: Maximum sum of the subarray less than `k` or -1 if no such subarray exists max_sum = float(\'-inf\') for i in range(len(nums)): current_sum = 0 for j in range(i, len(nums)): current_sum += nums[j] if current_sum < k: max_sum = max(max_sum, current_sum) else: break return max_sum if max_sum != float(\'-inf\') else -1"},{"question":"You are given a 2D grid of size N x M, where each cell contains either a 0 or 1. Your goal is to find the size of the largest square containing only 1s. Write a function that computes the size of the largest square sub-grid containing only 1s and returns its area. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M, representing the number of rows and columns of the grid. - The next N lines of each test case consist of M integers (either 0 or 1), representing the grid. -----Output----- For each test case, print a single integer denoting the area of the largest square containing only 1s. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 300 - Values in the grid are either 0 or 1. -----Example Input----- 2 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 3 3 1 1 0 1 1 1 0 1 1 -----Example Output----- 4 4 -----Explanation----- In the first test case, the largest square containing only 1s has a size of 2x2, so its area is 2*2 = 4. In the second test case, the largest square containing only 1s also has a size of 2x2, so its area is 2*2 = 4.","solution":"def largest_square_area(grid): n = len(grid) m = len(grid[0]) if n > 0 else 0 if n == 0 or m == 0: return 0 max_side = 0 dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side def solve_largest_square(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] grid = test_cases[t][1] results.append(largest_square_area(grid)) return results"},{"question":"You are given an integer array `arr` of length `n`. Your task is to determine if there exists a subarray of length `k` such that the sum of its elements is equal to a given target value `t`. **Input** The first line contains an integer `q` (1 ≤ q ≤ 10^4) representing the number of test cases. The description of each test case follows. For each test case: - The first line contains three integers `n`, `k`, and `t` (1 ≤ k ≤ n ≤ 10^5, -10^9 ≤ t ≤ 10^9). - The second line contains `n` integers `arr[i]` (-10^9 ≤ arr[i] ≤ 10^9) representing the array elements. It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. **Output** For each test case, output \\"Yes\\" (without quotes) if there exists a subarray of length `k` that sums up to `t`. Otherwise, output \\"No\\" (without quotes). **Example** Input ``` 3 5 3 6 1 2 3 4 5 4 2 -1 1 -2 3 -4 3 1 0 0 0 0 ``` Output ``` Yes Yes Yes ``` **Explanation** In the first test case, the subarray `[1, 2, 3]` has a sum of 6. In the second test case, the subarray `[1, -2]` has a sum of -1. In the third test case, each element itself forms a subarray of length 1 and the element `0` has a sum of 0.","solution":"def subarray_sum_exists(q, test_cases): results = [] for i in range(q): n, k, t = test_cases[i][\'nkt\'] arr = test_cases[i][\'arr\'] current_sum = sum(arr[:k]) if current_sum == t: results.append(\\"Yes\\") continue found = False for j in range(k, n): current_sum = current_sum - arr[j - k] + arr[j] if current_sum == t: results.append(\\"Yes\\") found = True break if not found: results.append(\\"No\\") return results"},{"question":"=====Problem Statement===== You are given a circular array of n integers. A circular array means the end of the array connects back to the beginning, forming a circle. You need to determine if there is a place in the array to start such that, by traversing the entire array in circular order, the sum of all visited elements is always non-negative. If such a starting point exists, return the starting index (0-based). If multiple starting points are possible, return the smallest index. If no such starting point exists, return -1. =====Constraints===== 1 ≤ n ≤ 10^5 -10^5 ≤ Any integer in the array ≤ 10^5 =====Input Format===== The first line contains a single integer n, the size of the array. The second line contains n integers, the elements of the circular array. =====Output Format===== Output a single integer, the starting index or -1 if no such starting point exists.","solution":"def find_starting_index(arr): n = len(arr) total_sum = sum(arr) if total_sum < 0: return -1 current_sum = 0 start_index = 0 for i in range(n): current_sum += arr[i] if current_sum < 0: start_index = i + 1 current_sum = 0 return start_index"},{"question":"You are given an array of integers and a target number. Your task is to determine if there are two distinct elements in the array that add up to the target number. If such a pair exists, return the indices of these two elements in the form of a tuple (index1, index2). If there are no such elements, return (-1, -1). Assume the array is zero-based indexed and that there will be at most one such pair. For example: ```python find_two_sum([2, 7, 11, 15], 9) == (0, 1) # 2 + 7 = 9 find_two_sum([3, 2, 4], 6) == (1, 2) # 2 + 4 = 6 find_two_sum([3, 3], 6) == (0, 1) # 3 + 3 = 6 find_two_sum([1, 2, 3, 4], 8) == (-1, -1) # No pairs add up to 8 ``` Write a function named `find_two_sum` that takes in an array of integers and a target number, and returns a tuple with the indices of the two numbers that add up to the target, or (-1, -1) if no such pair exists.","solution":"def find_two_sum(nums, target): Returns indices of the two distinct elements in the array `nums` that add up to `target`. If no such elements exist, returns (-1, -1). lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return (lookup[complement], i) lookup[num] = i return (-1, -1)"},{"question":"Write a function that takes a string and counts the number of vowels (a, e, i, o, u) in it. The function should return a dictionary where the keys are the vowels and the values are their respective counts. The function should be case-insensitive, treating both uppercase and lowercase vowels as the same. If the string contains no vowels, return an empty dictionary.","solution":"def count_vowels(s): Counts the number of vowels in the string s and returns a dictionary with vowels as keys and their counts as values. Case-insensitive. Parameters: s (str): The input string. Returns: dict: A dictionary with vowels and their counts. vowels = \\"aeiou\\" vowel_count = {} # Convert the string to lowercase to handle case-insensitivity s = s.lower() for char in s: if char in vowels: if char in vowel_count: vowel_count[char] += 1 else: vowel_count[char] = 1 return vowel_count"},{"question":"You are given an array of integers representing the positions of houses along a straight road. Each house has a mailbox at the curb. The postman can stop at any point along the road to deliver letters. You need to determine the optimal stopping point so that the total walking distance for the postman to all the mailboxes is minimized. If there are multiple optimal stopping points, return the smallest one. Return the minimum walking distance. ``` Example 1: Input: [1, 2, 3] Output: 2 Explanation: Minimal walking distance is from house at position 2, where the total walking distance is |1-2| + |2-2| + |3-2| = 2. Example 2: Input: [1, 3, 6] Output: 3 Explanation: Minimal walking distance is from house at position 3, where the total walking distance is |1-3| + |3-3| + |6-3| = 5. ``` Function Signature: ```python def optimal_stop(houses: List[int]) -> int: ```","solution":"def optimal_stop(houses): Given a list of integers representing the positions of houses along a straight road, determine the optimal stopping point such that the total walking distance is minimized. If there are multiple optimal stopping points, return the smallest one. houses.sort() n = len(houses) median = houses[n // 2] if n % 2 != 0 else houses[n // 2 - 1] return median"},{"question":"A mobile robot is navigating a city that is structured as an N times N grid. Each cell in the grid is either passable or impassable. The robot can move to any adjacent cell (up, down, left, right), but cannot move diagonally. The robot starts at the top-left cell of the grid and needs to reach the bottom-right cell. If the robot cannot reach the bottom-right cell, it should return -1. Otherwise, the robot should return the minimum number of moves required. Write a function that determines the minimum number of moves required for the robot to travel from the top-left to the bottom-right of the grid. -----Input:----- - The first line of input contains T, the number of test cases. - The first line of each test case contains a single integer, N, representing the side length of the grid. - The next N lines of each test case contain a string of length N, consisting of only 0 and 1. If position j in string i is 0, it means that this cell is passable, and if it is 1, this cell is impassable. -----Output:----- For each test case, output a single integer representing the minimum number of moves required for the robot to travel from the top-left cell to the bottom-right cell. If the robot cannot reach the bottom-right cell, output -1. -----Constraints----- - For all subtasks, N leq 1000 and T leq 20. - The robot always starts in the top-left corner (grid[0][0]) and needs to reach the bottom-right corner (grid[N-1][N-1]). -----Example Input:----- 2 3 000 010 000 2 00 11 -----Example Output:----- 4 -1 -----Explanation:----- In the first test case, the robot can take the following path: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2). This path takes 4 moves. In the second test case, the robot cannot reach the bottom-right cell, so the output is -1.","solution":"from collections import deque def min_moves_to_reach_end(grid): N = len(grid) if grid[0][0] == \'1\' or grid[N-1][N-1] == \'1\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == N-1 and col == N-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < N and grid[new_row][new_col] == \'0\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1 def solve_min_moves_cases(test_cases): results = [] for case in test_cases: grid = case result = min_moves_to_reach_end(grid) results.append(result) return results"},{"question":"Write a function that takes an integer `n` and returns a list of all unique pairs `(a, b)` (where `a` and `b` are integers) such that `a + b = n` and `0 <= a <= b`. Each pair in the output list should be formatted as a tuple `(a, b)`, and the list should be ordered by `a` in ascending order. Examples: ``` 5 => [(0, 5), (1, 4), (2, 3)] 3 => [(0, 3), (1, 2)] 1 => [(0, 1)] 0 => [(0, 0)] ```","solution":"def find_pairs(n): Returns a list of all unique pairs (a, b) such that a + b = n and 0 <= a <= b. pairs = [] for a in range((n // 2) + 1): b = n - a pairs.append((a, b)) return pairs"},{"question":"Implement a function `find_next_happy_number(n)` that finds the next \\"happy number\\" greater than `n`. A \\"happy number\\" is defined by the following process: - Starting with any positive integer, replace the number by the sum of the squares of its digits. - Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. A number which reaches 1 is considered a \\"happy number\\", while numbers that do not are \\"unhappy\\". For example: - The number 19 is happy because: - 1² + 9² = 1 + 81 = 82 - 8² + 2² = 64 + 4 = 68 - 6² + 8² = 36 + 64 = 100 - 1² + 0² + 0² = 1 + 0 + 0 = 1 Thus, the number 19 is a happy number. Your function should output the smallest happy number that is greater than the input number `n`. # Input: - `n`: a positive integer # Output: - The smallest happy number greater than `n`. # Example: ```python find_next_happy_number(22) # Should return 23 because 23 is the next happy number after 22: # 2² + 3² = 4 + 9 = 13 # 1² + 3² = 1 + 9 = 10 # 1² + 0² = 1 ``` # Constraints: - The input `n` will always be a positive integer.","solution":"def is_happy_number(num): seen = set() while num != 1 and num not in seen: seen.add(num) num = sum(int(digit) ** 2 for digit in str(num)) return num == 1 def find_next_happy_number(n): n += 1 while not is_happy_number(n): n += 1 return n"},{"question":"Given a list of intervals, merge all overlapping intervals and return the list of merged intervals in sorted order by starting times. Each interval is represented as a pair of integers where the first integer is the start time and the second integer is the end time. For example: merge_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]) = [[1, 6], [8, 10], [15, 18]] and merge_intervals([[1, 4], [4, 5]]) = [[1, 5]] because in the first example, the intervals [1,3] and [2,6] overlap to form [1, 6], while in the second example, the intervals [1,4] and [4,5] merge to [1, 5].","solution":"def merge_intervals(intervals): Merges all overlapping intervals and returns the list of merged intervals sorted by the start times. Args: intervals (List[List[int]]): A list of intervals where each interval is a list of two integers [start, end]. Returns: List[List[int]]: A list of merged intervals in sorted order by start time. if not intervals: return [] # Sort intervals based on the start time intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] # If the current interval\'s start is less than or equal to the last merged interval\'s end if current[0] <= last_merged[1]: # Merge the intervals by updating the end of the last merged interval last_merged[1] = max(last_merged[1], current[1]) else: # Otherwise, add the current interval to the merged list merged_intervals.append(current) return merged_intervals"},{"question":"Complete the function that takes a list of integers and returns a new list containing only the elements that are prime numbers. Example ```python [3, 4, 7, 10, 11] # should return [3, 7, 11] ```","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_primes(lst): Returns a new list containing only the elements of lst that are prime numbers. return [x for x in lst if is_prime(x)]"},{"question":"You are playing a game with your friend that involves two strings and some operations on them. You are given two non-empty strings s1 and s2, each with a maximum length of 100 characters. The game consists of converting s1 into s2 by performing the following operations: 1. Swap any two characters of s1. 2. Remove one occurrence of any character from s1. 3. Insert any character at any position in s1. Write a function that returns the minimum number of operations required to convert s1 into s2. Example: Input: s1=\\"abcdef\\" s2=\\"azced\\" Output: 3 Explanation: To convert \\"abcdef\\" to \\"azced\\": - Replace \'b\' with \'z\' (1 operation) - Remove \'f\' (1 operation) - Replace \'f\' with \'d\' (1 operation) Total operations = 1 + 1 + 1 = 3 Function Signature: ```python def min_operations(s1: str, s2: str) -> int: pass ```","solution":"def min_operations(s1: str, s2: str) -> int: Returns the minimum number of operations required to convert s1 into s2. Operations include swap, remove, and insert. m, n = len(s1), len(s2) # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize table for base cases for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, remove all characters of s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no new operation else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Write a function that takes a list of integers and returns the same list with each of its elements squared, but reversed in order. For example: ``` input: [1, 2, 3, 4, 5] output: [25, 16, 9, 4, 1] input: [10, -3, 7] output: [49, 9, 100] ``` **Note:** The input list can contain negative integers and zero, and the output elements should be in reverse order compared to the input list.","solution":"def reverse_squared_list(lst): Returns the list with each element squared and reversed in order. Parameters: lst (list of int): The list of integers to be processed. Returns: list of int: The processed list with elements squared and reversed. return [x ** 2 for x in reversed(lst)]"},{"question":"Overview Write a function that validates a given string to check if it is a valid password according to the criteria specified below. The function should return a boolean indicating if the input string meets the requirements. ```python is_valid_password(\\"P@ssw0rd\\") => True is_valid_password(\\"password\\") => False ``` Specifics - A valid password must be at least 8 characters long. - It must contain at least one lowercase letter. - It must contain at least one uppercase letter. - It must contain at least one digit. - It must contain at least one special character (e.g., !, @, #, , %, ^, &, *). - The function should ignore any leading or trailing whitespace. Use Python and implement the `is_valid_password` function that takes a single parameter (the password string) and returns `True` if the password meets all the requirements, and `False` otherwise.","solution":"import re def is_valid_password(password): Validates the given password string according to the specified criteria: - At least 8 characters long - Contains at least one lowercase letter - Contains at least one uppercase letter - Contains at least one digit - Contains at least one special character - Ignores leading or trailing whitespace Returns True if the password is valid, False otherwise. # Remove leading/trailing whitespace password = password.strip() # Check if the password meets all the criteria if (len(password) >= 8 and re.search(r\'[a-z]\', password) and re.search(r\'[A-Z]\', password) and re.search(r\'d\', password) and re.search(r\'[!@#%^&*]\', password)): return True else: return False"},{"question":"# Overview You are in charge of simulating a simple vending machine transaction. The vending machine dispenses items when exact change is provided. The machine accepts coins of denominations 1, 5, 10, and 25 cents. You need to program the vending machine to: 1. Accept a certain amount of money. 2. Dispense an item if the correct amount is provided. 3. Return the remaining balance if more than the required amount is inserted. # Rules Simulation At each transaction: 1. The user inputs the total amount of money in cents they want to insert into the machine. 2. The user selects an item based on a fixed price list. 3. The machine checks if the inserted money is sufficient. * If exact change is provided, the item is dispensed. * If more money is inserted than the price of the item, the machine returns the remaining balance along with the item. * If insufficient money is provided, the machine returns all the money without dispensing the item. # Vending Machine Task Given an initial setup of the vending machine with some items and their prices, simulate a series of transactions. Input * `items` - a dictionary where keys are item names and values are their prices in cents. * `transactions` - a list of tuples, where each tuple contains a string (the item to purchase) and an integer (the amount of money inserted in cents). Output * A list containing the results of each transaction. For each transaction: * If the item is dispensed, return a tuple with the item name and the remaining balance (if any). * If the item is not dispensed due to insufficient funds, return a tuple with the item name and a message saying \\"Insufficient funds\\". Notes * Assume the vending machine always has the items in stock. * The transactions list can contain multiple transactions. * The machine only accepts the exact denominations of 1, 5, 10, and 25 cents. # Example Run simulation with the following setup: **Input** * `items = {\\"chips\\": 50, \\"soda\\": 75, \\"candy\\": 30}` * `transactions = [(\\"chips\\", 50), (\\"soda\\", 100), (\\"candy\\", 20), (\\"chips\\", 60)]` **Result** * [(\\"chips\\", 0), (\\"soda\\", 25), (\\"candy\\", \\"Insufficient funds\\"), (\\"chips\\", 10)] --- Good luck!","solution":"def vending_machine(items, transactions): Simulates a vending machine transaction based on the provided items and transactions. Parameters: items (dict): Dictionary containing item names as keys and their prices in cents as values. transactions (list): List of tuples, each containing the item name and the amount of money inserted in cents. Returns: list: List containing results of each transaction. Each result is a tuple with the item name and either the remaining balance or a message \\"Insufficient funds\\". result = [] for item, money_inserted in transactions: if item in items: item_price = items[item] if money_inserted == item_price: result.append((item, 0)) elif money_inserted > item_price: result.append((item, money_inserted - item_price)) else: result.append((item, \\"Insufficient funds\\")) else: result.append((item, \\"Item not found\\")) return result"},{"question":"Your friend wants to create a simple inventory system for a small store. The system should keep track of the items currently in stock and their quantities. Each item has a unique name. The Challenge Write a class `Inventory` that supports the following methods: 1. `add_item(name: str, quantity: int) -> None`: Adds the given quantity of the item to the inventory. If the item already exists, increase its quantity. 2. `remove_item(name: str, quantity: int) -> bool`: Removes the given quantity of the item from the inventory if there is enough in stock. If there is not enough of the item or it does not exist, return `False`. Otherwise, return `True`. 3. `get_quantity(name: str) -> int`: Returns the current quantity of the given item in stock. If the item does not exist, return `0`. # Example Usage ```python inventory = Inventory() inventory.add_item(\'apple\', 10) inventory.add_item(\'banana\', 5) inventory.add_item(\'apple\', 5) print(inventory.get_quantity(\'apple\')) # Output: 15 print(inventory.remove_item(\'banana\', 2)) # Output: True print(inventory.get_quantity(\'banana\')) # Output: 3 print(inventory.remove_item(\'banana\', 5)) # Output: False print(inventory.get_quantity(\'orange\')) # Output: 0 ```","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, name: str, quantity: int) -> None: if name in self.items: self.items[name] += quantity else: self.items[name] = quantity def remove_item(self, name: str, quantity: int) -> bool: if name in self.items and self.items[name] >= quantity: self.items[name] -= quantity if self.items[name] == 0: del self.items[name] return True return False def get_quantity(self, name: str) -> int: return self.items.get(name, 0)"},{"question":"Note: This question carries 100 points. Write a function that takes two matrices as input and returns their product. Each matrix will be represented as a list of lists, where each inner list represents a row of the matrix. Ensure that the function checks for the appropriate dimensions that make matrix multiplication possible. If multiplication isn\'t possible due to dimension mismatch, the function should return an appropriate message. -----Input:----- - The first line of the input contains two integers, n and m, representing the number of rows and columns in the first matrix. - The next n lines each contain m integers, representing the elements of the first matrix. - The following line contains two integers, p and q, representing the number of rows and columns in the second matrix. - The next p lines each contain q integers, representing the elements of the second matrix. -----Output:----- - If the matrices can be multiplied, the output should be a matrix represented by n lists each containing q integers, where each list is a row of the resulting matrix. - If the matrices cannot be multiplied, output \\"Multiplication not possible due to dimension mismatch\\". -----Constraints:----- - 1 ≤ n, m, p, q ≤ 50 - Each element in the matrices is an integer between -1000 and 1000. -----Sample Input:----- 2 3 1 2 3 4 5 6 3 2 7 8 9 10 11 12 -----Sample Output:----- 58 64 139 154 -----Explanation:----- The first matrix is: 1 2 3 4 5 6 The second matrix is: 7 8 9 10 11 12 Their product is: (1*7 + 2*9 + 3*11) (1*8 + 2*10 + 3*12) = 58 64 (4*7 + 5*9 + 6*11) (4*8 + 5*10 + 6*12) = 139 154 Multiplication is possible as the number of columns in the first matrix (3) is equal to the number of rows in the second matrix (3).","solution":"def matrix_multiply(matrix1, matrix2): n = len(matrix1) m = len(matrix1[0]) p = len(matrix2) q = len(matrix2[0]) if m != p: return \\"Multiplication not possible due to dimension mismatch\\" result = [[0 for _ in range(q)] for _ in range(n)] for i in range(n): for j in range(q): for k in range(m): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"You are given a string consisting of lowercase English letters only. You can perform the following operation on the string: select any two adjacent characters and replace them with a single character which is the lexicographically smaller one between the two. For example, if the string is \\"cba\\", you can select \'c\' and \'b\', and replace them with \'b\', resulting in the string \\"ba\\". Then you can select \'b\' and \'a\' and replace them with \'a\', resulting in the string \\"a\\". Your task is to determine the lexicographically smallest string that can be obtained after performing any number of the described operations. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The following t lines each contain a string s (1 leq |s| leq 100), where |s| is the length of the string. -----Output----- For each test case, output the lexicographically smallest string that can be obtained after performing any number of operations. -----Example----- Input 3 cba acbd abc Output a a a -----Explanation----- In the first test case, you can reduce \\"cba\\" to \\"a\\" as described in the example. In the second test case, you can reduce \\"acbd\\" to \\"a\\" by performing operations in the following sequence: \\"acbd\\" → \\"abd\\" → \\"ad\\" → \\"a\\". In the third test case, the string \\"abc\\" can already be reduced to \\"a\\" by repeatedly selecting the leftmost two characters until only one character is left, resulting in \\"abc\\" → \\"ab\\" → \\"a\\".","solution":"def lexicographically_smallest_string(t, strings): Returns the lexicographically smallest string possible after performing any number of the described operations on the given strings. :param t: Number of test cases :param strings: List of test case strings :return: List of lexicographically smallest strings for each test case # The result for each string will always be \'a\' if there\'s at least one \'a\', # otherwise, it will be the smallest character in the string. results = [] for s in strings: smallest_char = min(s) results.append(smallest_char) return results"},{"question":"Lisa is organizing a bookshelf and wants to place books such that certain books are kept together while maximizing the aesthetic scores assigned to each book. She assigns a positive aesthetic score to each book and also a separation constraint that certain pairs of books must be kept adjacent to each other. Given these constraints, help Lisa find the maximum possible sum of aesthetic scores by arranging the books in an optimal manner. Write a function `maximizeAestheticScore(n, scores, constraints)` that takes in the following parameters: - `n`: an integer representing the number of books. - `scores`: a list of n positive integers where `scores[i]` represents the aesthetic score of the `i-th` book. - `constraints`: a list of pairs of integers where each pair `(a, b)` means that book `a` and book `b` must be kept adjacent to each other. The function should return an integer representing the maximum sum of aesthetic scores possible while satisfying all constraints. -----Input----- - An integer `n` (1 ≤ n ≤ 1000). - A list of n integers `scores` (1 ≤ scores[i] ≤ 1000). - A list of pairs of integers `constraints`, where each pair `(a, b)` represents the indices (0-based) of books that must be kept adjacent to each other. Each index will be between 0 and n-1. The number of constraints will be between 0 and min(1000, n(n-1)/2). -----Output----- - Return an integer representing the maximum possible sum of aesthetic scores. -----Examples----- Input: ``` n = 3 scores = [10, 20, 30] constraints = [(0, 1), (1, 2)] ``` Output: ``` 60 ``` Input: ``` n = 4 scores = [1, 2, 3, 4] constraints = [(0, 1), (2, 3)] ``` Output: ``` 10 ``` -----Note----- In the first example, we can place the books in the order [0, 1, 2] or [2, 1, 0], which gives a total aesthetic score of 10 + 20 + 30 = 60. In the second example, the optimal arrangement is [0, 1, 2, 3] or [2, 3, 0, 1], ensuring all constraints are met with the maximum possible score of 1 + 2 + 3 + 4 = 10.","solution":"def maximizeAestheticScore(n, scores, constraints): from collections import defaultdict, deque # Create a graph to represent adjacency constraints graph = defaultdict(list) for a, b in constraints: graph[a].append(b) graph[b].append(a) # A helper function to compute the total score of connected components def get_connected_component_score(node, visited): queue = deque([node]) visited[node] = True total_score = 0 while queue: current = queue.popleft() total_score += scores[current] for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return total_score visited = [False] * n max_score = 0 # Iterate through each node to calculate the total score of each connected component for i in range(n): if not visited[i]: component_score = get_connected_component_score(i, visited) max_score += component_score return max_score"},{"question":"You have been given the task of creating a system to automatically assign due dates for employees based on the priority of their tasks. Each task is represented by a string indicating its priority level (\\"low\\", \\"medium\\", or \\"high\\"). The system should calculate the due date relative to the current date based on the priority level: - \\"low\\": 5 days from now - \\"medium\\": 3 days from now - \\"high\\": 1 day from now Your function, `assign_due_date(task_priority)`, will receive the priority of the task and return the due date formatted as \\"YYYY-MM-DD\\". Assume the current date is always \\"2023-10-01\\". Example: ```python assign_due_date(\\"low\\") => \\"2023-10-06\\" assign_due_date(\\"medium\\") => \\"2023-10-04\\" assign_due_date(\\"high\\") => \\"2023-10-02\\" ```","solution":"from datetime import datetime, timedelta def assign_due_date(task_priority): Returns the due date based on the priority of the task (\\"low\\", \\"medium\\", \\"high\\"). - \\"low\\": 5 days from now - \\"medium\\": 3 days from now - \\"high\\": 1 day from now For the purpose of this function, the current date is fixed to \\"2023-10-01\\". current_date = datetime(2023, 10, 1) if task_priority == \\"low\\": due_date = current_date + timedelta(days=5) elif task_priority == \\"medium\\": due_date = current_date + timedelta(days=3) elif task_priority == \\"high\\": due_date = current_date + timedelta(days=1) else: raise ValueError(\\"Invalid task priority\\") return due_date.strftime(\\"%Y-%m-%d\\")"},{"question":"Anna loves strings and is currently learning about palindromes. A palindrome is a string that reads the same backward as forward. Anna wants to determine how many palindromic substrings exist within a given string. Can you help Anna find the number of palindromic substrings in a given string? Consider that each character in the string is also a valid palindromic substring. -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 10^4). The string s will contain only lowercase English letters. -----Output----- Print a single integer — the number of palindromic substrings within the given string. -----Examples----- Input abc Output 3 Input aaa Output 6 Input racecar Output 10 -----Explanation----- In the first sample, the palindromic substrings are \\"a\\", \\"b\\", and \\"c\\". In the second sample, the palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\". In the third sample, the palindromic substrings are \\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"cec\\", \\"aceca\\", and \\"racecar\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 # Function to count palindromes centered at left and right def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): expand_around_center(i, i) # Odd length palindromes expand_around_center(i, i + 1) # Even length palindromes return count"},{"question":"You are given an array arr of integers. The task is to find the maximum sum of a contiguous subarray such that the subarray contains at most one negative number. If all numbers are non-negative, return the sum of the entire array. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains: - An integer n denoting the number of elements in arr. - Next line contains n space separated integers representing the elements of arr. -----Output:----- For each testcase, print the maximum sum of a contiguous subarray containing at most one negative number. -----Constraints:----- - 1 leq T leq 500 - 1 leq n leq 10^5 - -10^4 leq arr[i] leq 10^4 -----Sample Input:----- 2 5 1 -3 2 1 -1 4 2 -1 2 3 -----Sample Output:----- 3 6","solution":"def max_subarray_with_one_neg(arr): This function returns the maximum sum of a contiguous subarray that contains at most one negative number. n = len(arr) if n == 0: return 0 max_sum_so_far = float(\'-inf\') max_single_negative_subarray = float(\'-inf\') current_sum = 0 single_negative = False max_with_single_negative = 0 for value in arr: if value >= 0: current_sum += value else: if not single_negative: single_negative = True max_with_single_negative = current_sum + value current_sum += value if current_sum > max_sum_so_far: max_sum_so_far = current_sum if current_sum < 0: current_sum = 0 single_negative = False if single_negative and current_sum > max_with_single_negative: max_with_single_negative = current_sum max_result = max(max_sum_so_far, max_with_single_negative) return max_result if max_result > float(\'-inf\') else 0 def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(max_subarray_with_one_neg(arr)) return results def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 arrays = [] for _ in range(T): n = int(data[idx]) idx += 1 arr = list(map(int, data[idx:idx + n])) idx += n arrays.append(arr) results = process_test_cases(arrays) for result in results: print(result)"},{"question":"# Introduction Sudoku is a logic-based, combinatorial number-placement puzzle. The objective is to fill a 9×9 grid with digits so that each column, each row, and each of the nine 3×3 subgrids that compose the grid (also called \\"boxes\\") contains all of the digits from 1 to 9. The puzzle setter provides a partially completed grid, which typically has a unique solution. # Task Your task is to complete the function `solveSudoku(board)` that takes a partially filled Sudoku board and fills in the missing entries to complete the grid. # Rules 1. The input board will be a 9×9 grid represented as a list of lists, where each inner list is a row. Empty entries are represented by the number 0. 2. The function must modify the board in-place, filling in all the empty entries to complete the puzzle. 3. The filled board must satisfy all the Sudoku conditions: - Each row must contain the digits from 1 to 9 without repetition. - Each column must contain the digits from 1 to 9 without repetition. - Each of the nine 3×3 subgrids must contain the digits from 1 to 9 without repetition. # Returns The function `solveSudoku(board)` should not return anything. The input board should be modified in-place to represent the solved Sudoku puzzle. # Example Input ```python board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` Function Call ```python solveSudoku(board) ``` Output ```python [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ```","solution":"def solveSudoku(board): Solves the Sudoku puzzle by filling the empty cells (represented by 0s) in-place. def is_valid(board, row, col, num): Checks whether it is valid to place \'num\' in the cell at (row, col). num_str = str(num) block_row, block_col = 3 * (row // 3), 3 * (col // 3) # Check the row and column for i in range(9): if board[row][i] == num or board[i][col] == num: return False # Check the 3x3 block for i in range(3): for j in range(3): if board[block_row + i][block_col + j] == num: return False return True def solve(): Utilizes backtracking to solve the Sudoku puzzle. for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = 0 return False return True solve()"},{"question":"You\'re developing a software to manage daily calorie intake. Your task is to analyze a string representing a sequence of food items consumed throughout the day and their respective calorie counts. Write a function that takes a string as input in the format \\"item1:calories1,item2:calories2,...\\" and returns the total calorie count. Each food item and calorie count is separated by a colon, and each pair is separated by a comma. Implement the following function in Python: ```python def total_calories(data: str) -> int: # Your code here ``` # Examples ```python print(total_calories(\\"apple:95,banana:105,orange:62\\")) # Output: 262 print(total_calories(\\"sandwich:300,juice:120,cookie:200\\")) # Output: 620 ``` # Constraints - Each calorie count is a non-negative integer. - The input string will have at least one item. - Food item names contain only lowercase alphabets and are non-empty. - Assume proper input format (no need to handle errors in input). # Objective - Familiarity with string manipulation. - Ability to parse and process structured data. - Summing numerical values from parsed data.","solution":"def total_calories(data: str) -> int: Returns the total calories from a formatted string. Parameters: data (str): A string in the format \\"item1:calories1,item2:calories2,...\\" Returns: int: Total calorie count items = data.split(\',\') total = 0 for item in items: _, calories = item.split(\':\') total += int(calories) return total"},{"question":"Given an array of integers, some of which may be zero, create a function `product_except_self(nums)` that returns an array such that each element at index `i` of the output array is equal to the product of all the elements in the input array except for the element at `i`. For example, given: ```python nums = [1, 2, 3, 4] ``` your function should return: ```python product_except_self(nums) == [24, 12, 8, 6] ``` For the edge case with zeros: ```python nums = [0, 1, 2, 3] ``` your function should return: ```python product_except_self(nums) == [6, 0, 0, 0] ``` # Constraints - You must solve it without using division and in O(n) time complexity. - The final array should not contains any leading or trailing whitespaces.","solution":"def product_except_self(nums): Returns an array such that each element at index `i` of the output array is equal to the product of all the elements in the input array except for the element at `i`. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n # Fill left_products such that left_products[i] contains product of all elements to the left of nums[i] for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products such that right_products[i] contains product of all elements to the right of nums[i] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Fill result array such that result[i] is product of left_products[i] and right_products[i] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a function that takes a string consisting of lowercase letters and returns a new string where each character is shifted by a given number of positions in the alphabet. If the shift moves past \'z\', it should wrap around to the beginning of the alphabet. The function will receive the string and the shift value as parameters. For example: ``` shifted_string(\\"abc\\", 1) → \\"bcd\\" shifted_string(\\"xyz\\", 3) → \\"abc\\" shifted_string(\\"hello\\", 2) → \\"jgnnq\\" ``` You can assume the shift value will always be a positive integer.","solution":"def shifted_string(s, shift): Returns a new string where each character is shifted by a given number of positions in the alphabet. If the shift moves past \'z\', it wraps around to the beginning of the alphabet. Parameters: s (str): Input string consisting of lowercase letters. shift (int): The number of positions to shift each character. Returns: str: The resulting shifted string. shifted = [] for char in s: new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) shifted.append(new_char) return \'\'.join(shifted)"},{"question":"# Background A palindrome is a word, number, or sequence of characters which reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes. A number is called a palindromic number if it is the same when its digits are reversed. # Problem Description Write a function that takes a positive integer `n` and returns the smallest palindromic number greater than `n`. # Constraints - `1 <= n <= 10 ** 7` - `n` is always a valid positive integer. # Examples ```python next_palindrome(123) == 131 next_palindrome(67876) == 67976 next_palindrome(999) == 1001 next_palindrome(1203) == 1221 ``` # Hint If you are completely lost, try generating the next number and checking if it\'s a palindrome.","solution":"def next_palindrome(n): Returns the smallest palindromic number greater than n. def is_palindrome(x): return str(x) == str(x)[::-1] n += 1 while not is_palindrome(n): n += 1 return n"},{"question":"Your team is developing a calendar application, and you\'ve been assigned to implement a function that returns the day of the week for a given date. Write a function that takes a date string in the format `\\"YYYY-MM-DD\\"` and returns the corresponding day of the week in full (e.g., `\\"Monday\\"`, `\\"Tuesday\\"`, etc.). **Examples:** ```python day_of_week(\\"2023-10-09\\") # => \\"Monday\\" day_of_week(\\"2021-12-25\\") # => \\"Saturday\\" ```","solution":"from datetime import datetime def day_of_week(date_str): Given a date string in the format \\"YYYY-MM-DD\\", returns the day of the week as a full name (e.g., \\"Monday\\", \\"Tuesday\\", etc.). date_obj = datetime.strptime(date_str, \\"%Y-%m-%d\\") return date_obj.strftime(\\"%A\\")"},{"question":"Write a function `count_word_anagrams(word_list)` that counts how many words in a given list are anagrams of each other. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. The function should return a dictionary where the keys are words from the input list, and the values are the number of other words in the list that are anagrams of that word. For example: ```python word_list = [\'listen\', \'silent\', \'enlist\', \'google\', \'elgoog\', \'cat\', \'act\', \'tac\'] count_word_anagrams(word_list) ``` The function should return: ```python { \'listen\': 2, # \'silent\' and \'enlist\' are anagrams of \'listen\' \'silent\': 2, # \'listen\' and \'enlist\' are anagrams of \'silent\' \'enlist\': 2, # \'listen\' and \'silent\' are anagrams of \'enlist\' \'google\': 1, # \'elgoog\' is an anagram of \'google\' \'elgoog\': 1, # \'google\' is an anagram of \'elgoog\' \'cat\': 2, # \'act\' and \'tac\' are anagrams of \'cat\' \'act\': 2, # \'cat\' and \'tac\' are anagrams of \'act\' \'tac\': 2 # \'cat\' and \'act\' are anagrams of \'tac\' } ``` Constraints: - All input words will consist only of lowercase English characters. - The list can contain up to 10,000 words. Each word has a maximum length of 100 characters. Hint: - Consider sorting each word and using a dictionary to keep track of equivalent anagrams.","solution":"def count_word_anagrams(word_list): Counts how many words in the given list are anagrams of each other. :param word_list: List of words to check. :return: Dictionary with each word and the count of its anagrams. from collections import defaultdict # A dictionary to store sorted word as key and list of anagrams as value anagrams_dict = defaultdict(list) # Populate the anagrams dictionary for word in word_list: sorted_word = \'\'.join(sorted(word)) anagrams_dict[sorted_word].append(word) # Create the result dictionary result = {} for word in word_list: sorted_word = \'\'.join(sorted(word)) result[word] = len(anagrams_dict[sorted_word]) - 1 return result"},{"question":"=====Problem Statement===== Given a 2-dimensional list where each sublist contains two integers representing the length and width of rectangles, find the area of the largest rectangle. Concept You need to implement a function that finds the largest area from a list of rectangles. Each rectangle\'s area can be calculated by multiplying its length and width. You are required to use the map() function to transform the list of rectangles into a list of their respective areas, and then use the max() function to find the maximum value in the list of areas. Example: Suppose you have the following list of rectangles: >>> rectangles = [[2, 3], [4, 5], [1, 6]] You can transform it using map() to get their areas: >>> areas = map(lambda x: x[0] * x[1], rectangles) This will result in: >>> areas = [6, 20, 6] Finally, you use the max() function to find the largest area: >>> max_area = max(areas) The result will be: >>> 20 =====Input Format===== The first line contains an integer n, the number of rectangles. The ith of the next n lines contains two integers representing the length (L_i) and the width (W_i) of the ith rectangle in the list. =====Constraints===== 1≤n≤100 1≤L_i, W_i≤10^3 =====Output Format===== Print only one integer, which is the area of the largest rectangle in the list.","solution":"def largest_rectangle_area(rectangles): Returns the area of the largest rectangle from a list of rectangles. Each rectangle is represented as a list of two integers: [length, width]. Arguments: rectangles -- 2D list where each sublist contains two integers [length, width] Returns: Integer -- the maximum area areas = map(lambda x: x[0] * x[1], rectangles) return max(areas)"},{"question":"# Counting Distinct Elements in a Range Let\'s play a simple challenge to count distinct elements within a specified range in a list of numbers. Task Given a list of integers and a specified range, write a function that counts the number of distinct integers within that range. Input - A list of integers `nums`. - Two integers `start` and `end`, representing the inclusive range. Output Return the count of distinct integers within the specified range. Example `countDistinctInRange([1, 2, 3, 4, 4, 5, 6, 7], 3, 6) -> 4` In the example provided, the range 3 to 6 contains the following unique numbers: `3, 4, 5, 6`. Thus, the function returns `4`.","solution":"def countDistinctInRange(nums, start, end): Returns the count of distinct integers within the specified inclusive range. Args: nums (list of int): List of integers. start (int): Start of the range (inclusive). end (int): End of the range (inclusive). Returns: int: Count of distinct integers within the specified range. range_set = {num for num in nums if start <= num <= end} return len(range_set)"},{"question":"Description Julia loves organizing and decorating the bookshelves in her library. She always follows a particular order when arranging the books. Given an initial sequence of books on her shelf, she can perform the following operations any number of times: 1. Choose any consecutive subsequence (substring) of the books. 2. Reverse the order of the chosen subsequence. Her goal is to arrange the books such that the sequence reads in non-decreasing order. You need to determine if it is possible for Julia to sort the books using the above operations. Task You are given: **books**: A string representing the initial sequence of books on the shelf. Each character represents a unique book type and the characters are between \'a\' and \'z\'. Return **True** if it is possible to sort the books using the operations described, otherwise return **False**. **Example:** Input: \\"edcba\\" Output: True Input: \\"dcbaef\\" Output: False **Constraints:** - The sequence will consist of 1 to 1000 characters. - All characters in the sequence are distinct and will be any lowercase English letter from \'a\' to \'z\'.","solution":"def can_sort_books(books): Determine if it\'s possible to sort the books using the given operations. Since every character in the input string is distinct and we can reverse any subsequence, it is always possible to sort the string using these operations. sorted_books = \'\'.join(sorted(books)) # Check if the sorted string is equal to the actual sorted version return books == sorted_books or True"},{"question":"Given a sequence of positive integers, return the length of their longest contiguous subsequence that forms an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. # Function Signature ```python def longest_arithmetic_subsequence_length(arr: List[int]) -> int: pass ``` # Input - `arr` - A list of positive integers (1 ≤ arr[i] ≤ 10^5). # Output - Return an integer representing the length of the longest contiguous arithmetic subsequence. # Example ```python arr = [1, 3, 5, 7, 9, 10, 11] # The longest contiguous arithmetic subsequence is [1, 3, 5, 7, 9] with a common difference of 2. # Another contiguous arithmetic subsequence is [10, 11] with a common difference of 1. # The length of the longest contiguous arithmetic subsequence is 5. print(longest_arithmetic_subsequence_length(arr)) # Output: 5 ``` # Note - The solution should handle large values of `arr` efficiently. - The sequence should be contiguous, meaning elements must be next to each other in the array to form the arithmetic progression.","solution":"from typing import List def longest_arithmetic_subsequence_length(arr: List[int]) -> int: if not arr: return 0 max_length = 1 current_length = 1 current_diff = None for i in range(1, len(arr)): diff = arr[i] - arr[i - 1] if diff == current_diff: current_length += 1 else: current_diff = diff current_length = 2 # Start new subsequence with current and previous elements if current_length > max_length: max_length = current_length return max_length"},{"question":"Given an array of integers, you are tasked with segmenting it into several contiguous subarrays such that each subarray has exactly the same sum. Determine the minimum number of such subarrays required to achieve the original sum distribution. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. For each test case: - The first line contains a single integer n (1 le n le 1000) — the size of the array. - The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^4) — the elements of the array. -----Output----- For each test case, output a single integer — the minimum number of contiguous subarrays required such that each subarray has the same sum. -----Example----- Input 3 5 1 2 3 4 5 4 4 4 4 4 6 1 1 1 1 1 1 Output 1 4 6 -----Note----- In the first test case, the array [1, 2, 3, 4, 5] can be treated as a single subarray since the sum cannot be evenly divided further without changing the sum of subarrays. In the second test case, the array [4, 4, 4, 4] can be treated as 4 individual subarrays, each with sum 4. In the third test case, the array [1, 1, 1, 1, 1, 1] can be treated as 6 individual subarrays, each with sum 1.","solution":"def min_contiguous_subarrays(t, test_cases): Determines the minimum number of contiguous subarrays required such that each subarray has the same sum for each test case. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains: - n (int): Size of the array. - arr (list of int): The array of integers. Returns: list of int: Minimum number of contiguous subarrays for each test case. results = [] for n, arr in test_cases: total_sum = sum(arr) # Find the minimum number of subarrays such that each subarray has the same sum for target_sum in range(n, 0, -1): if total_sum % target_sum == 0: valid = True subarray_sum = 0 required_sum = total_sum // target_sum for num in arr: subarray_sum += num if subarray_sum > required_sum: valid = False break elif subarray_sum == required_sum: subarray_sum = 0 if valid: results.append(target_sum) break return results"},{"question":"You are given a string S consisting of characters \'0\' and \'1\'. A substring of S is called interesting if it contains an equal number of \'0\'s and \'1\'s. Your task is to find the length of the longest interesting substring of S. -----Input----- The first line contains a single integer T, the number of test cases. Each of the following T lines contains one string, the string S for the corresponding test case. The input strings do not contain any whitespaces. -----Output----- For each test case, output a single line containing the length of the longest interesting substring of S. -----Constraints----- 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100000 S consists only of the characters \'0\' and \'1\'. -----Example----- Input: 3 110001 10101 11100 Output: 6 4 4 -----Explanation----- In the first test case, the whole string \\"110001\\" contains 3 \'0\'s and 3 \'1\'s, making it a full interesting substring of length 6. In the second test case, the longest interesting substring is \\"1010\\" which contains 2 \'0\'s and 2 \'1\'s, giving a length of 4. In the third test case, two possible interesting substrings of length 4 are \\"1100\\" and \\"0011\\".","solution":"def longest_interesting_substring_length(S): n = len(S) count = {0: -1} balance = 0 max_length = 0 for i in range(n): if S[i] == \'1\': balance += 1 else: balance -= 1 if balance in count: max_length = max(max_length, i - count[balance]) else: count[balance] = i return max_length def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(longest_interesting_substring_length(S)) return results"},{"question":"David is a math enthusiast who loves exploring special number sequences. He defines a \\"happy number\\" sequence as a sequence where each number is the sum of the digits of the previous number squared. Given an initial number M, he wants to determine the sequence up to K terms. -----Input----- The input consists of two integers on a single line separated by a space: the initial number M (1 ≤ M ≤ 1000) and the number of terms K (2 ≤ K ≤ 15). -----Output----- Output K lines, each containing one term of the happy number sequence, starting from the initial number M. -----Constraints----- 1 ≤ M ≤ 1000 2 ≤ K ≤ 15 -----Example----- Input: 19 5 Output: 19 82 68 100 1","solution":"def happy_number_sequence(M, K): Generates the happy number sequence. Args: M (int): Initial number (1 ≤ M ≤ 1000). K (int): Number of terms (2 ≤ K ≤ 15). Returns: list: The happy number sequence up to K terms. sequence = [] def sum_of_squares(n): return sum(int(digit) ** 2 for digit in str(n)) current_number = M for _ in range(K): sequence.append(current_number) current_number = sum_of_squares(current_number) return sequence"},{"question":"In computer graphics, images are often represented as grids of colored pixels. One common way to represent an image is by using a matrix where each element represents a pixel\'s color. A grayscale image can be manipulated using operations such as rotation. Given a matrix representing an NxN grayscale image where each element is an integer between 0 and 255 inclusive, create a function that rotates the image 90 degrees clockwise. Note that the matrix must be rotated in place, meaning the operation should not involve creating a new matrix. For example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_image(matrix) # The rotated matrix should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` Process: 1. Swap the matrix elements along the diagonal. 2. Reverse the rows. Constraints: - The input matrix will always be square (NxN) and non-empty. - Do not use additional data structures (perform in-place rotation). Function signature: ```python def rotate_image(matrix: List[List[int]]) -> None: pass ``` Explanation: 1. First swap elements across the main diagonal. 2. Reverse each row to get the resultant 90 degrees rotated image.","solution":"from typing import List def rotate_image(matrix: List[List[int]]) -> None: Rotates an NxN matrix 90 degrees clockwise in place. Parameters: matrix (List[List[int]]): The NxN matrix to be rotated. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for row in matrix: row.reverse()"},{"question":"Given a list of integers, write a function `find_missing_number(lst)` to determine the first missing positive integer. **Function Signature:** ```python def find_missing_number(lst: List[int]) -> int: ``` **Input:** - A list of integers `lst` where each integer can be positive, negative, or zero. The list will have at least one element. **Output:** - Return the first missing positive integer. A positive integer is defined as any integer greater than zero. **Example:** ```python assert find_missing_number([3, 4, -1, 1]) == 2 assert find_missing_number([1, 2, 0]) == 3 assert find_missing_number([-1, -2, -3]) == 1 assert find_missing_number([7, 8, 9, 11, 12]) == 1 ``` **Note:** - The solution should run in linear time and use constant extra space.","solution":"from typing import List def find_missing_number(lst: List[int]) -> int: n = len(lst) for i in range(n): while 1 <= lst[i] <= n and lst[lst[i] - 1] != lst[i]: lst[lst[i] - 1], lst[i] = lst[i], lst[lst[i] - 1] for i in range(n): if lst[i] != i + 1: return i + 1 return n + 1"},{"question":"=====Function Descriptions===== sum() This function returns the sum of all elements in the iterable. The iterable can be a list, tuple, or any other collection of numbers. Code >>> sum([1, 2, 3, 4, 5]) 15 >>> sum((1, 2, 3, 4, 5)) 15 max() This function returns the largest item in an iterable. If the iterable is empty, it throws a ValueError. Code >>> max([1, 2, 3, 4, 5]) 5 >>> max((5, 4, 3, 2, 1)) 5 =====Problem Statement===== You are given a space separated list of integers. You need to check if the sum of the even numbers in the list is greater than the maximum of the odd numbers in the list. =====Input Format===== The first line contains an integer N. N is the total number of integers in the list. The second line contains the space separated list of N integers. =====Constraints===== 2 <= N <= 100 =====Output Format===== Print True if the sum of the even numbers is greater than the maximum of the odd numbers. Otherwise, print False. If there are no odd numbers, print False. If there are no even numbers, print False.","solution":"def even_sum_greater_than_max_odd(n, numbers): Checks if the sum of the even numbers in the list is greater than the maximum of the odd numbers in the list. even_numbers = [num for num in numbers if num % 2 == 0] odd_numbers = [num for num in numbers if num % 2 != 0] if not odd_numbers or not even_numbers: return False sum_even = sum(even_numbers) max_odd = max(odd_numbers) return sum_even > max_odd"},{"question":"# Task A new highway construction project runs through the city, requiring `n` segments to be built. Each segment is constructed between two junctions. The length of the highway is divided into `n` equal segments, each `d` meters long. Construction companies can bid for any segment(s) they want to build, but once a company is awarded a segment, they must complete it. The city council wants to select the companies to minimize the total construction cost. Each construction company provides a cost per meter to build a segment, and this cost can vary from segment to segment. You are to write a program that determines the minimal total construction cost for the highway, by awarding each segment to the appropriate company. # Input - `n`: Number of segments in the highway. - `1 <= n <= 1000` - `d`: Length of each segment in meters. - `1 <= d <= 1000` - `costs`: A 2D list of integers where `costs[i][j]` represents the cost per meter for company `j` to construct segment `i`. - `1 <= costs[i][j] <= 10000` - There are always `m` different companies bidding for each segment, where `1 <= m <= 100`. # Output An integer representing the minimal total construction cost for the highway. # Example For example, if the input is: ``` n = 3 d = 10 costs = [ [5, 8], [6, 3], [7, 4] ] ``` The output would be `60`. **Explanation**: - For segment 1, choosing company with cost 5 per meter: 5 * 10 = 50. - For segment 2, choosing company with cost 3 per meter: 3 * 10 = 30. - For segment 3, choosing company with cost 4 per meter: 4 * 10 = 40. Total cost: 50 + 30 + 40 = 120.","solution":"def minimal_total_construction_cost(n, d, costs): Determines the minimal total construction cost by selecting the companies with the smallest cost per meter for each segment. Parameters: - n: Number of segments - d: Length of each segment - costs: 2D list of cost per meter for each company to construct each segment Returns: - Total minimal construction cost total_cost = 0 for i in range(n): min_cost_per_meter = min(costs[i]) total_cost += min_cost_per_meter * d return total_cost"},{"question":"You have recently started working at a new company, and your first task involves scheduling meetings. There are n meetings you need to attend, and each meeting is represented by a start time and an end time. However, you can only attend one meeting at a time. Two meetings are conflicts if they overlap in time. Given a list of these meetings, determine the maximum number of non-overlapping meetings you can attend. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 1000) — the number of meetings. The next n lines each contain two integers s_i and e_i (0 le s_i < e_i le 10^9) — the start time and the end time of the i-th meeting. It is guaranteed that the sum of n over all test cases does not exceed 1000. -----Output----- For each test case, output a single integer denoting the maximum number of non-overlapping meetings you can attend. -----Example----- Input 2 3 1 3 2 4 3 5 4 1 2 2 3 3 4 4 5 Output 2 4 -----Explanation----- In the first test case, the maximum number of non-overlapping meetings you can attend is 2: for example, you can attend meetings (1, 3) and (3, 5). In the second test case, the meetings do not overlap, so you can attend all 4 meetings.","solution":"def max_non_overlapping_meetings(t, test_cases): results = [] for i in range(t): meetings = test_cases[i] meetings.sort(key=lambda x: x[1]) end_time = 0 max_meetings = 0 for meeting in meetings: if meeting[0] >= end_time: max_meetings += 1 end_time = meeting[1] results.append(max_meetings) return results # Example usage: # test_cases = [ # [(1, 3), (2, 4), (3, 5)], # [(1, 2), (2, 3), (3, 4), (4, 5)] # ] # print(max_non_overlapping_meetings(2, test_cases)) # Output: [2, 4]"},{"question":"___ In a given **tic-tac-toe** board represented as a 2D matrix, we want to determine if there\'s a winner. The board will have the dimensions 3x3 and can have the following values: - \'X\' for player X - \'O\' for player O - \'\' for an empty cell ___ # Task Write a function `check_winner(board: List[List[str]]) -> str` that takes a 3x3 tic-tac-toe board and returns the winner (\'X\' or \'O\'). If there is no winner, return an empty string \'\'. Notes: - The function should first check rows and columns for a winner. - If no winner is found in rows and columns, it should then check the two diagonals. - It is guaranteed that there will be only one winner if there is a winner. ___ Examples ``` board = [ [\'X\', \'O\', \'X\'], [\'O\', \'X\', \'O\'], [\'O\', \'\', \'X\'] ] check_winner(board) == \'X\' board = [ [\'O\', \'O\', \'O\'], [\'X\', \'X\', \'\'], [\'X\', \'\', \'\'] ] check_winner(board) == \'O\' board = [ [\'\', \'X\', \'O\'], [\'X\', \'X\', \'O\'], [\'O\', \'X\', \'O\'] ] check_winner(board) == \'\' ``` Testing your function against these examples should ensure it\'s working correctly. Enjoy the challenge!","solution":"from typing import List def check_winner(board: List[List[str]]) -> str: # Check rows for a winner for row in board: if row[0] == row[1] == row[2] and row[0] != \'\': return row[0] # Check columns for a winner for col in range(3): if board[0][col] == board[1][col] == board[2][col] and board[0][col] != \'\': return board[0][col] # Check main diagonal for a winner if board[0][0] == board[1][1] == board[2][2] and board[0][0] != \'\': return board[0][0] # Check anti-diagonal for a winner if board[0][2] == board[1][1] == board[2][0] and board[0][2] != \'\': return board[0][2] # No winner found return \'\'"},{"question":"You are living on a small island and have decided to run a fruit stand that sells a variety of fruits including apples, oranges, and bananas. Each fruit has a different profit associated with it, and you want to maximize your profit for the next n days. However, there are some limitations: you can only sell one type of fruit each day due to limited space at your stand. Create a function that takes in two arguments: 1. An integer `n` representing the number of days. 2. A list of tuples, where each tuple contains two integers, representing the number of days you will sell a specific type of fruit and the profit you will make per day for that fruit. The function should return the maximum profit you can achieve in the given number of days without selling more than one type of fruit per day. For example: ``` n = 5 fruit_profits = [(2, 5), (3, 10), (1, 7)] ``` - Selling apples for 2 days at 5 per day - Selling oranges for 3 days at 10 per day - Selling bananas for 1 day at 7 per day The function should calculate the maximum profit considering the constraints. The function\'s output for the above example should be 37. ``` n = 5 fruit_profits = [(3, 25), (2, 10), (2, 15)] The function\'s output for this example should be 75. ``` The number of days `n` will always be greater than 0 and the fruit_profits list will always have at least one element. Each type of fruit can be sold for any number of days (not exceeding the given n). You can assume the profit for each day of selling a specific type of fruit will always be positive.","solution":"def max_profit(n, fruit_profits): Calculate the maximum profit for selling fruits for n days given the profit and available days for each fruit type. :param n: int - the number of days you can sell fruits :param fruit_profits: list of tuples [(days, profit), ...] representing the days you can sell each fruit type and the profit per day for that fruit :return: int - the maximum profit you can achieve max_profit = 0 # Iterate through each fruit option and calculate potential profit for days, profit_per_day in fruit_profits: # Calculate profit for this fruit if days <= n: potential_profit = days * profit_per_day else: potential_profit = n * profit_per_day # Keep track of the maximum profit found max_profit = max(max_profit, potential_profit) return max_profit"},{"question":"Write a function `group_anagrams()` that takes a list of words and returns a list of groups, where each group contains words that are anagrams of each other. The function should be case insensitive but return the groups in their original casing. The groups themselves can be in any order, but each group should list its anagrams in lexicographical order. Use the following signature: ```python def group_anagrams(words: List[str]) -> List[List[str]]: ``` # Examples: ```python group_anagrams([\\"bat\\", \\"tab\\", \\"cat\\", \\"act\\", \\"tac\\"]) # Output: [[\\"bat\\", \\"tab\\"], [\\"cat\\", \\"act\\", \\"tac\\"]] group_anagrams([\\"listen\\", \\"silent\\", \\"enlist\\", \\"rat\\", \\"tar\\", \\"god\\", \\"dog\\"]) # Output: [[\\"listen\\", \\"silent\\", \\"enlist\\"], [\\"rat\\", \\"tar\\"], [\\"god\\", \\"dog\\"]] group_anagrams([\\"apple\\", \\"pale\\", \\"leap\\", \\"plea\\"]) # Output: [[\\"apple\\"], [\\"pale\\", \\"leap\\", \\"plea\\"]] ```","solution":"from typing import List from collections import defaultdict def group_anagrams(words: List[str]) -> List[List[str]]: anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word.lower())) anagram_map[sorted_word].append(word) result = [sorted(group) for group in anagram_map.values()] return result"},{"question":"You are given a list of sentences, and you need to find the sentence(s) with the highest frequency of a particular word. If there are multiple sentences with the same highest frequency, return all of them. You should ignore the case of the words while finding the frequency. Write a function that takes a list of sentences and a word as input and returns the list of sentences with the highest frequency of the word. The sentences in the output list should be in the same order as they appear in the input list. Example 1: Input: sentences = [\\"I love dogs\\", \\"I love cats\\", \\"Dogs are great\\", \\"Dogs are friendly\\"], word = \\"dogs\\" Output: [\\"I love dogs\\", \\"Dogs are great\\", \\"Dogs are friendly\\"] Explanation: The word \\"dogs\\" appears once in the sentences \\"I love dogs\\", \\"Dogs are great\\", and \\"Dogs are friendly\\". It does not appear in \\"I love cats\\". Therefore, the sentences with the highest frequency of the word \\"dogs\\" are [\\"I love dogs\\", \\"Dogs are great\\", \\"Dogs are friendly\\"]. Note: The input list of sentences will have at least one sentence, but no more than 100 sentences. Each sentence will have at least one word, but no more than 100 words. Each sentence will be at most 500 characters long. The word to search for will be a non-empty string of at most 20 characters.","solution":"def sentences_with_highest_frequency(sentences, word): Returns the list of sentences with the highest frequency of the given word. Args: sentences: List of sentences (strings). word: The word to find frequency of (string). Returns: List of sentences with the highest frequency of the word. word_lower = word.lower() max_freq = 0 result = [] for sentence in sentences: # Split the sentence into words and count the occurrences of the lowercased word words = sentence.lower().split() freq = words.count(word_lower) if freq > max_freq: max_freq = freq result = [sentence] elif freq == max_freq and freq > 0: result.append(sentence) return result"},{"question":"# Task **_Given_** a **_non-negative integer_** , *Reverse its digits and return the resulting number* . # Conditions : * **_Input number_** is guaranteed to be a non-negative integer. * Trailing zeroes at the end of the original number will become leading zeroes in the reversed number (which will be ignored). # Input >> Output Examples ``` reverseDigits(12345) ==> return (54321) ``` Explanation: **_(54321)_** is the result of reversing the digits of **_(12345)_**. ___ ``` reverseDigits(1200) ==> return (21) ``` Explanation: In reversing **_(1200)_**, the trailing zeros become leading zeros: **_(0021)_**, which is **_(21)_** when leading zeros are ignored. ___ ``` reverseDigits(908070) ==> return (70809) ``` Explanation: **_(70809)_** is the result of reversing the digits of **_(908070)_**, ignoring the leading zero in the result. ___","solution":"def reverseDigits(n): Returns the resulting number after reversing the digits of the non-negative integer n. return int(str(n)[::-1])"},{"question":"You are given a list of donations made by different contributors to a charity event in a day. Each donation is represented as a tuple (contributor, amount), where \'contributor\' is a string representing the name of the contributor, and \'amount\' is an integer representing the donated amount. However, due to some system issues, some donations may appear multiple times, and some contributions might be mistakenly registered as negative amounts which should not be counted at all. Write a function that calculates the total amount of valid (non-negative) donations made by each contributor. Function Signature: ```python def calculate_donations(donations: List[Tuple[str, int]]) -> Dict[str, int]: pass ``` # Example ```python donations = [ (\\"Alice\\", 50), (\\"Bob\\", 30), (\\"Alice\\", -10), (\\"Alice\\", 20), (\\"Bob\\", 50), (\\"Charlie\\", 40), (\\"Alice\\", 50) ] ``` Output: ```python { \\"Alice\\": 120, \\"Bob\\": 80, \\"Charlie\\": 40 } ``` # Notes: - Each contributor\'s total donations are the sum of all their valid (non-negative) donations. - If a contributor\'s total amount of valid donations is zero (either because all their donations were negative or they didn\'t donate), they should not appear in the output dictionary. - You may assume there will not be more than 10,000 donations in a day.","solution":"from typing import List, Tuple, Dict def calculate_donations(donations: List[Tuple[str, int]]) -> Dict[str, int]: contributor_total = {} for contributor, amount in donations: if amount >= 0: # We only consider non-negative donations if contributor not in contributor_total: contributor_total[contributor] = 0 contributor_total[contributor] += amount return contributor_total"},{"question":"Bob is training for a marathon and follows a unique training routine. Each day, he decides to run a random number of miles, but he always makes sure to run at least 1 mile and no more than M miles each day. After N days of training, Bob wants to know the maximum distance he could have run if he took the optimal strategy for his training. Write the function ```max_distance(N, M)``` that returns the maximum distance Bob could have run after N days, given that each day he runs any number of miles between 1 and M inclusive. Note: If either N <= 0 or M <= 0, return the string ```\\"Invalid input\\"```. # Examples: ```python max_distance(5, 10) # should return 50 max_distance(3, 7) # should return 21 max_distance(0, 5) # should return \\"Invalid input\\" max_distance(-2, 10) # should return \\"Invalid input\\" ```","solution":"def max_distance(N, M): Returns the maximum distance Bob could have run after N days with each day having a range from 1 to M (inclusive). If either N <= 0 or M <= 0, returns \\"Invalid input\\". if N <= 0 or M <= 0: return \\"Invalid input\\" return N * M"},{"question":"You are given two strings, `source` and `target`. Your task is to determine if it is possible to transform `source` into `target` by performing a sequence of operations. Each operation consists of: - Choosing a character in `source` and replacing it with any other character. - You can replace a character any number of times. For example, if `source = \\"abc\\"` and `target = \\"def\\"`, you can transform `source` into `target` by replacing \'a\' with \'d\', \'b\' with \'e\', and \'c\' with \'f\'. Input: - The first line of the input contains a single integer T denoting the number of test cases. - The following T lines each contain two strings: `source` and `target`. Output: - For each test case, print \\"Yes\\" if it is possible to transform `source` into `target` by a series of operations, otherwise print \\"No\\". Constraints: - 1 ≤ T ≤ 100 - 1 ≤ |source|, |target| ≤ 100 - Both `source` and `target` will only contain lowercase English letters. Sample Input: ``` 2 abc def aaaa bbbb ``` Sample Output: ``` Yes Yes ```","solution":"def can_transform(source, target): Returns \'Yes\' if it is possible to transform `source` into `target` otherwise returns \'No\'. if len(source) != len(target): return \\"No\\" return \\"Yes\\" def process_cases(T, cases): results = [] for i in range(T): source, target = cases[i] results.append(can_transform(source, target)) return results # Input reading and processing can be done outside of these functions."},{"question":"You are given a string consisting of lowercase alphabets. Your task is to determine the minimal number of operations required to make all the characters of the string the same. In one operation, you can change any character in the string to any other lowercase alphabet. ----Input:---- - The first line of input contains an integer T, the number of test cases. The description of the T test cases follows. - Each test case consists of a single string S. ----Output:---- - For each test case, output the minimal number of operations required to make all characters of the string the same. ----Constraints:---- - 1 leq T leq 100 - 1 leq |S| leq 1000 ----Sample Input:---- 3 aaab aabbaa abc ----Sample Output:---- 1 2 2 ----Explanation:---- - For the first test case, you can change one \'b\' to \'a\', making the string \\"aaaa\\". - For the second test case, you can change two \'b\'s to \'a\', making the string \\"aaaaaa\\". - For the third test case, you need to change two characters (\'b\' and \'c\') to \'a\', making the string \\"aaa\\".","solution":"def min_operations_to_unify(s): Returns the minimal number of operations required to make all characters of the string the same. from collections import Counter char_count = Counter(s) most_common_char_count = max(char_count.values()) return len(s) - most_common_char_count def solve(test_cases): results = [] for s in test_cases: results.append(min_operations_to_unify(s)) return results"},{"question":"> A \\"run-length encoding\\" is a basic form of data compression in which sequences of the same data value (runs) are stored as a single data value and count. For example, consider the input string: \\"aaabccdddd\\". Using run-length encoding, this string would be represented as \\"a3b1c2d4\\", whereby each character is followed by the number of times it appears consecutively. Write a function that accepts a string and returns its run-length encoded form. Ensure your function handles edge cases such as an empty string or strings without repeat characters efficiently.","solution":"def run_length_encode(s: str) -> str: Returns the run-length encoded form of the input string s. if not s: return \\"\\" encoded_string = \\"\\" i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 encoded_string += s[i] + str(count) i += 1 return encoded_string"},{"question":"# Introduction You are working on a texting application that allows users to send messages back and forth in different languages. In order to support message previews and other functionalities, you need to develop a functionality that detects the language of a given message text. You have been tasked with creating a function that determines whether a given string message is in English, French, or Spanish. # Task Develop a function that will analyze the input string, determine the language, and return the result. Rules * The function should take one argument, a string `message`. * The function must return one of three strings: \'English\', \'French\', or \'Spanish\'. * For simplicity, only consider capital and lowercase Latin letters (A-Z, a-z) and spaces. Ignore punctuation and other characters. * Assume the input string will always contain some characters and will be less than 200 characters long. * You can use a predefined set of words unique to each language to detect the language of the message. Create the set of words for this purpose. **Examples** 1. `detectLanguage(\\"Hello, how are you today?\\")` should return `\'English\'`. 2. `detectLanguage(\\"Bonjour, comment ça va aujourd\'hui?\\")` should return `\'French\'`. 3. `detectLanguage(\\"Hola, ¿cómo estás hoy?\\")` should return `\'Spanish\'`.","solution":"def detectLanguage(message): This function detects whether the input string is in English, French, or Spanish based on predefined unique words for each language. english_words = {\\"hello\\", \\"how\\", \\"are\\", \\"you\\", \\"today\\"} french_words = {\\"bonjour\\", \\"comment\\", \\"ça\\", \\"va\\", \\"aujourd\'hui\\"} spanish_words = {\\"hola\\", \\"cómo\\", \\"estás\\", \\"hoy\\"} message = message.lower() words = set(message.split()) english_count = len(words.intersection(english_words)) french_count = len(words.intersection(french_words)) spanish_count = len(words.intersection(spanish_words)) if english_count >= french_count and english_count >= spanish_count: return \'English\' elif french_count >= english_count and french_count >= spanish_count: return \'French\' else: return \'Spanish\'"},{"question":"Write a function that takes a string as input and returns the string with all the vowels (a, e, i, o, u) removed. Example ```python input: \\"hello world\\" output: \\"hll wrld\\" ``` ```sql SQL Notes: You are given a table, `texts`, with one column `text`. Return a table with a column `text_no_vowels` containing the given strings with all the vowels removed. # texts table schema * text STRING # output table schema * text_no_vowels STRING ```","solution":"def remove_vowels(input_string): Returns the input_string with all vowels (a, e, i, o, u) removed. vowels = \\"aeiouAEIOU\\" return \'\'.join(char for char in input_string if char not in vowels)"},{"question":"Your task is to implement a function to determine the degree of an undirected graph from its adjacency matrix representation. _________________________________________________ Rules: 1. The input will be given as an adjacency matrix. The matrix will be a list of lists where each element is either 0 (indicating no edge) or 1 (indicating an edge) between the vertices. 2. The output should be a single integer representing the degree of the vertex with the highest number of edges in the graph. 3. For an undirected graph, the adjacency matrix is symmetric, so `matrix[i][j]` will be the same as `matrix[j][i]`. 4. The degree of a vertex in an undirected graph is the number of edges connected to it. Examples: 1. For the input: ``` [ [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0] ] ``` The output should be `2` since each vertex is connected to 2 other vertices. 2. For the input: ``` [ [0, 1, 1], [1, 0, 1], [1, 1, 0] ] ``` The output should be `2` since each vertex is connected to 2 other vertices. 3. For the input: ``` [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] ``` The output should be `0` since no vertices are connected by edges. Input: - matrix: list of lists of integers (0 or 1), adj[m][n] Output: - integer: the maximum degree of the vertices in the graph ________________________________________________ Input: matrix - list[list], adjacency matrix: eg. [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]] Output: integer: maximum degree of a vertex","solution":"def max_degree(matrix): max_deg = 0 for row in matrix: degree = sum(row) if degree > max_deg: max_deg = degree return max_deg"},{"question":"Write a function that simulates a number game. In this game, there is a sequence of natural numbers starting from 1. Two players, Alice and Bob, take turns, with Alice always going first. Each player on their turn picks a number from the sequence that hasn\'t been chosen before. The player loses if they pick a number which was equal to a previously chosen number plus one. Your task is to write a function `winner(sequence_length)` which takes an integer `sequence_length` representing the length of the sequence to be considered. The function should return the name of the player who will win if both play optimally. Example: ``` winner(3) ``` When the sequence length is 3, the sequence is [1,2,3]: 1. Alice picks 1. 2. Bob cannot pick 2 (since 2 = 1+1, he loses automatically). Therefore, Alice wins when the length of the sequence is 3, and the function should return: ``` \\"Alice\\" ``` Input: - `sequence_length` - an integer representing the length of the sequence, sequence_length ∈ N, 1 ≤ sequence_length ≤ 1000 Output: - A string which is either \\"Alice\\" or \\"Bob\\", representing the winner if both play optimally. Additional Example: ``` winner(5) ``` Should return: ``` \\"Alice\\" ``` Explanation: The sequence is [1, 2, 3, 4, 5]. 1. Alice picks 1. 2. Bob cannot pick 2 (loses immediately). Alice wins.","solution":"def winner(sequence_length): Determines the winner of the game with the given sequence length if both play optimally. Parameters: sequence_length (int): The length of the sequence of natural numbers. Returns: str: The name of the player who wins (\\"Alice\\" or \\"Bob\\"). if sequence_length % 2 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"You are given a string `str` and a list of words `wordList`, all composed of lowercase letters. Your task is to find all the starting indices of substrings in `str` which are a concatenation of each word in `wordList` exactly once and without any intervening characters. Note that the order of concatenation must follow the order of the words in `wordList`. Return the starting indices in a list. Example: Input: str = \\"barfoothefoobarman\\" wordList = [\\"foo\\", \\"bar\\"] Output: [0, 9] Explanation: Substrings starting at indices 0 and 9 are \\"barfoo\\" and \\"foobar\\" respectively. Both of these are concatenations of \\"foo\\" and \\"bar\\" in the same order as in `wordList`. Constraints: - The length of `str` will be at most 10^4. - The length of `wordList` will be at most 5000. - Each word in `wordList` will have a length of at most 20. - All words in `wordList` and the input string will consist of lowercase letters only.","solution":"def find_substring_indices(s, words): Finds starting indices of substrings in s which are a concatenation of each word in words exactly once and in order. :param s: The input string :param words: The list of words to concatenate without intervening characters :return: A list of starting indices of the substrings if not s or not words or not words[0]: return [] word_length = len(words[0]) num_words = len(words) substring_length = word_length * num_words word_to_count = {} for word in words: word_to_count[word] = word_to_count.get(word, 0) + 1 indices = [] for i in range(len(s) - substring_length + 1): seen_words = {} for j in range(num_words): next_word = s[i + j * word_length:i + (j + 1) * word_length] if next_word in word_to_count: seen_words[next_word] = seen_words.get(next_word, 0) + 1 if seen_words[next_word] > word_to_count[next_word]: break else: break else: indices.append(i) return indices"},{"question":"You are given an array of n integers. We define the beauty of an array as the length of the longest contiguous subarray that forms a palindrome. A contiguous subarray is a sequence of consecutive elements within the array. Your task is to find the beauty of the given array. A subarray is considered a palindrome if it reads the same forwards and backwards. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 100) — the length of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^3) — the elements of the array. -----Output----- For each test case, output a single integer — the beauty of the array. -----Example----- Input 3 4 1 2 2 1 5 1 2 3 2 1 3 1 2 3 Output 4 5 1 -----Note----- In the first test case, [1, 2, 2, 1] is a contiguous subarray that is a palindrome. The length of this subarray is 4, hence the output is 4. In the second test case, the entire array [1, 2, 3, 2, 1] is a palindrome. The length of this subarray is 5, hence the output is 5. In the third test case, the longest palindrome subarray is any single element subarray like [1], [2], or [3]. The length of this subarray is 1, hence the output is 1.","solution":"def is_palindrome(subarray): Helper function to check if a subarray is a palindrome. return subarray == subarray[::-1] def beauty_of_array(arr): Function to find the beauty of the given array. The beauty is defined as the length of the longest contiguous subarray that forms a palindrome. n = len(arr) max_length = 1 # The minimum length of a palindrome is 1 (any single element subarray) for start in range(n): for end in range(start, n): if is_palindrome(arr[start:end+1]): max_length = max(max_length, end - start + 1) return max_length def process_test_cases(test_cases): Function to process multiple test cases and return the results. results = [] for case in test_cases: n, arr = case results.append(beauty_of_array(arr)) return results"},{"question":"You are given an integer array heights representing the heights of people that need to be arranged in a queue. Each person also has an integer value representing the number of people in front of them who have a height greater than or equal to theirs. Your task is to reconstruct the queue. Write a function that takes as input a list of pairs, where each pair consists of a person’s height and the number of people in front of them with a height greater or equal to theirs. The function should return the reconstructed queue represented as a list of pairs. Example 1: Input: heights = [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]] Output: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]] Explanation: - Person with height 5 and 0 people in front of them is placed at position 0. - Person with height 7 and 0 people in front of them is placed at position 1. - Person with height 5 and 2 people in front of them is placed at position 2. - Person with height 6 and 1 person in front of them is placed at position 3. - Person with height 4 and 4 people in front of them is placed at position 4. - Person with height 7 and 1 person in front of them is placed at position 5. Example 2: Input: heights = [[6,0], [5,0], [4,0], [3,2], [2,2], [1,4]] Output: [[4,0], [5,0], [2,2], [3,2], [1,4], [6,0]] Explanation: - Person with height 4 and 0 people in front of them is placed at position 0. - Person with height 5 and 0 people in front of them is placed at position 1. - Person with height 2 and 2 people in front of them is placed at position 2. - Person with height 3 and 2 people in front of them is placed at position 3. - Person with height 1 and 4 people in front of them is placed at position 4. - Person with height 6 and 0 people in front of them is placed at position 5. Note: - The number of people in the queue will be in the range [1, 100]. - The height of a person is an integer in the range [1, 1000].","solution":"def reconstruct_queue(heights): Reconstructs a queue based on the heights and the number of people in front of them. :param heights: List of pairs [height, num_people_in_front] :return: Reconstructed queue as a list of pairs. # Step 1: Sort the list. First by height in descending order, and then by the number of people in ascending order. heights.sort(key=lambda x: (-x[0], x[1])) # Step 2: Initiate an empty list to hold the reconstructed queue queue = [] # Step 3: Insert each person into the queue based on their num_people_in_front value for person in heights: queue.insert(person[1], person) return queue"},{"question":"Given a string `s` that consists of lowercase English letters and a set of words `words` containing lowercase English words, determine if each word in `words` can be found as a subsequence in the string `s`. -----Input----- - The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. - The first line of each test case contains the string `s`. - The second line of each test case contains an integer `M` denoting the number of words in `words`. - The next `M` lines each contain one word from the set `words`. -----Output----- For each test case, output `M` lines. For each word in `words`, print \\"Yes\\" if the word can be found as a subsequence in the string `s` or \\"No\\" if it cannot be found (without quotes). -----Constraints----- - 1 le T le 100 - 1 le |s| le 1,000 - 1 le M le 1,000 - 1 le |word_i| le 1,000 for all 1 le i le M -----Example Input----- 2 abcde 3 a ba ace xyz 2 xz yzx -----Example Output----- Yes No Yes Yes No -----Explanation----- Example case 1: - `a` is a subsequence of `abcde`. - `ba` is not a subsequence of `abcde` because the characters do not appear in the correct order. - `ace` is a subsequence of `abcde`. Example case 2: - `xz` is a subsequence of `xyz`. - `yzx` is not a subsequence of `xyz` because the characters appear in a different order.","solution":"def is_subsequence(s, word): Returns True if `word` is a subsequence of `s`, otherwise False. s_index = 0 word_index = 0 while s_index < len(s) and word_index < len(word): if s[s_index] == word[word_index]: word_index += 1 s_index += 1 return word_index == len(word) def check_words_in_subsequence(T, test_cases): For each test case, check if each word is a subsequence of the string s. Returns a list of results for all test cases. results = [] for s, words in test_cases: case_result = [] for word in words: if is_subsequence(s, word): case_result.append(\\"Yes\\") else: case_result.append(\\"No\\") results.extend(case_result) return results"},{"question":"Given an array of integers, your task is to find the length of the longest contiguous subarray that contains only even numbers. For example: `longestEvenSubarray([1, 2, 4, 6, 1, 2]) = 3` because the longest contiguous subarray with only even numbers is `[2, 4, 6]`, which has a length of `3`. For more examples, see the test cases below. Good luck! If you like this problem, you may also try: [Longest consecutive sequence](https://www.codewars.com/kata/59b20c95d751df3eab000007) [Longest sequence with a difference of one](https://www.codewars.com/kata/59e39a64f099ce31e1000077)","solution":"def longestEvenSubarray(arr): Returns the length of the longest contiguous subarray that contains only even numbers. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"You are given an array of integers representing the heights of buildings in a row. Your task is to determine the maximum area of a rectangle that can be formed with the buildings. The width of each building is 1 unit. The rectangle can span multiple buildings, but all buildings forming the rectangle must have at least the height of the shortest building in that span. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000) — the number of buildings. The second line contains n space-separated integers representing the heights of the buildings. -----Output----- Output a single integer denoting the maximum area of a rectangle that can be formed with the buildings. -----Examples----- Input 6 2 1 5 6 2 3 Output 10 Input 5 2 4 6 3 5 Output 12 -----Note----- In the first example, the maximum rectangle can be formed by the third and fourth buildings, with a height of 5 and 6 respectively. The rectangle\'s area is 5 x 2 = 10. In the second example, the maximum rectangle can be formed by the second, third, and fourth buildings, with a height of 4, 6, and 3 respectively. The rectangle\'s area is 4 x 3 = 12.","solution":"def largest_rectangle_area(heights): Returns the maximum area of a rectangle that can be formed with the given buildings. :param heights: List[int] :return: int stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function `remove_vowels` that takes a string as input and returns a new string with all the vowels removed. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase counterparts. Additionally, handle edge cases such as an empty string or a string with no vowels. Example: ``` remove_vowels(\\"Hello World\\") => \\"Hll Wrld\\" remove_vowels(\\"AEIOUaeiou\\") => \\"\\" remove_vowels(\\"Python\\") => \\"Pythn\\" remove_vowels(\\"\\") => \\"\\" ``` Ensure the function performs efficiently and can handle large input strings.","solution":"def remove_vowels(input_string): Removes all vowels from the input string and returns the result. Vowels include: \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase counterparts. vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in input_string if char not in vowels])"},{"question":"Create a function `find_longest_palindrome` that takes a string `s` as an input and returns the longest palindromic substring. If there are multiple substrings of the same length, return the first one that appears. Example: ```python find_longest_palindrome(\\"babad\\") ``` Output: `\\"bab\\"` Example: ```python find_longest_palindrome(\\"cbbd\\") ``` Output: `\\"bb\\"` Example: ```python find_longest_palindrome(\\"a\\") ``` Output: `\\"a\\"`","solution":"def find_longest_palindrome(s): def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if len(s) == 0: return \\"\\" longest_palindrome = \\"\\" for i in range(len(s)): # Odd length palindromes palindrome_odd = expand_around_center(i, i) # Even length palindromes palindrome_even = expand_around_center(i, i + 1) # Update the longest palindrome found if len(palindrome_odd) > len(longest_palindrome): longest_palindrome = palindrome_odd if len(palindrome_even) > len(longest_palindrome): longest_palindrome = palindrome_even return longest_palindrome"},{"question":"You are given a sentence which may contain different types of parentheses such as `()`, `{}`, and `[]`. Write a function that checks if the parentheses in the given sentence are balanced. The function should: - Return `True` if the parentheses are balanced. - Return `False` if the parentheses are not balanced. A pair of parentheses is balanced if: - They correspond: For example, an opening `(` must be closed by a `)`, and not by a `}` or `]`. - They are correctly nested: For example, `{[()]}` is balanced, but `{[(])}` is not. The function signature is: ```python def is_balanced(sentence: str) -> bool: # Your code here ``` # Examples: - `is_balanced(\\"()\\")` should return `True`. - `is_balanced(\\"([{}])\\")` should return `True`. - `is_balanced(\\"[(])\\")` should return `False`. - `is_balanced(\\"((()))\\")` should return `True`. - `is_balanced(\\"{[}\\")` should return `False`. # Additional Information: - Your function should only consider the parentheses, meaning that other characters in the input string should be ignored. - An empty string should be considered balanced. Enjoy!","solution":"def is_balanced(sentence: str) -> bool: Function to check if the parentheses in the given sentence are balanced. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in sentence: if char in mapping.values(): stack.append(char) elif char in mapping: if stack == [] or mapping[char] != stack.pop(): return False return stack == []"},{"question":"You are given a list of integers representing the daily revenue of a store for a month (30 days). Write a function to find the maximum revenue generated over any consecutive 5-day period within this month. The function should return this maximum revenue value. Function Signature: ```python def max_5day_revenue(revenue: List[int]) -> int: ``` # Example ```python revenue = [3, 8, 5, 9, 12, 5, 6, 4, 8, 7, 10, 9, 6, 3, 11, 4, 7, 8, 10, 12, 14, 1, 6, 9, 7, 12, 8, 7, 3, 5] print(max_5day_revenue(revenue)) ``` Output ``` 51 ``` # Explanation In the example above, the 5-day period with maximum revenue is `[10, 12, 14, 1, 6]` with a total revenue of `51`.","solution":"from typing import List def max_5day_revenue(revenue: List[int]) -> int: Returns the maximum revenue generated over any consecutive 5-day period. :param revenue: A list of integers representing daily revenue for a month (30 days) :return: An integer representing the maximum 5-day revenue. max_revenue = 0 for i in range(len(revenue) - 4): current_5day_revenue = sum(revenue[i:i+5]) if current_5day_revenue > max_revenue: max_revenue = current_5day_revenue return max_revenue"},{"question":"In a given string, you need to determine whether the string can be rearranged to form a palindrome. **Notes:** * A palindrome reads the same forwards and backwards. * You may assume the string contains only lowercase alphabetic characters. * If the string is empty, return `false`. **Examples** ``` \\"civic\\" --> true ``` ...because it is already a palindrome. ``` \\"ivicc\\" --> true ``` ...because it can be rearranged to form \\"civic\\". ``` \\"hello\\" --> false ``` ...because it cannot be rearranged to form a palindrome. **Additional Constraints** * The string length will not exceed 1000 characters.","solution":"def can_form_palindrome(s): Determines if the characters of a given string can be rearranged to form a palindrome. :param s: The input string :return: True if the string can be rearranged to form a palindrome, False otherwise if not s: return False char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"___ # Task **_Given_** a *list of integers*, **_return_** a *list of booleans* indicating whether each integer is a prime number. ___ # Notes * The list of integers can contain both positive and negative numbers. * Negative numbers and zero are considered not prime. * The function should return a list of the same length where each element is either `True` if the corresponding integer is prime, or `False` if it is not. ___ # Input >> Output Examples ``` isPrime([3, 5, 8, 13, 15]) ==> return [True, True, False, True, False] ``` **_Explanation_**: * **_The first element_** **_3_** is a prime number. * **_The second element_** **_5_** is a prime number. * **_The third element_** **_8_** is not a prime number. * **_The fourth element_** **_13_** is a prime number. * **_The fifth element_** **_15_** is not a prime number. ___ ``` isPrime([-3, 0, 1, -7, 2]) ==> return [False, False, False, False, True] ``` **_Explanation_**: * **_The first element_** **_-3_** is not a prime number. * **_The second element_** **_0_** is not a prime number. * **_The third element_** **_1_** is not a prime number. * **_The fourth element_** **_-7_** is not a prime number. * **_The fifth element_** **_2_** is a prime number. ___ ``` isPrime([17, 19, 22, 23, 24]) ==> return [True, True, False, True, False] ``` **_Explanation_**: * **_The first element_** **_17_** is a prime number. * **_The second element_** **_19_** is a prime number. * **_The third element_** **_22_** is not a prime number. * **_The fourth element_** **_23_** is a prime number. * **_The fifth element_** **_24_** is not a prime number. ___ Enjoy Coding !!","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def isPrime(nums): Given a list of integers, returns a list of booleans indicating whether each integer is a prime number. return [is_prime(num) for num in nums]"},{"question":"Farmer John has a rectangular field represented by an N times M grid of cells. Each cell contains a certain number of crops. Farmer John wants to enclose a rectangular region of his field that maximizes the total number of crops within that rectangle. The region must be non-empty and can be of any size but should be aligned with the grid (i.e., it can\'t be rotated). You need to help Farmer John find the maximum number of crops in any rectangular region within the field. -----Input----- - The first line of the input contains two integers N and M. - Each of the next N lines contains M space-separated integers denoting the number of crops in each cell (1 le text{Number of crops in a cell} le 10^9). -----Output----- - Print a single integer, the maximum number of crops in any rectangular region of the field. -----Constraints----- - 1 le N, M le 500 -----Example Input----- 4 5 1 2 3 4 5 5 6 7 8 9 9 8 7 6 5 5 4 3 2 1 -----Example Output----- 72 -----Explanation----- In this example, the entire field itself yields the maximum crops, which is the sum of all given values: 1 + 2 + 3 + 4 + 5 + 5 + 6 + 7 + 8 + 9 + 9 + 8 + 7 + 6 + 5 + 5 + 4 + 3 + 2 + 1 = 100. Therefore, the maximum number of crops in any rectangular region is 100.","solution":"def max_crops(field): Find the maximum number of crops in any rectangular region of the field. :param field: List of List of integers representing crops in each cell :return: Maximum number of crops in any rectangular region N = len(field) M = len(field[0]) # Initialize prefix sum array prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] # Calculate prefix sums for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = field[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] max_crops = field[0][0] # Evaluate all possible rectangles for i in range(1, N + 1): for j in range(1, M + 1): for k in range(i, N + 1): for l in range(j, M + 1): total_crops = prefix_sum[k][l] - prefix_sum[i - 1][l] - prefix_sum[k][j - 1] + prefix_sum[i - 1][j - 1] max_crops = max(max_crops, total_crops) return max_crops"},{"question":"A toy store has a toy rental system where customers can rent toys for their kids. However, the store has limited toys, and each toy can be borrowed for a specific number of days before needing maintenance. The store keeps a record of rents as follows: - Each rent specifies the customer ID, the toy ID, and the number of days the toy is rented. - The store has a comprehensive list of toy IDs and their corresponding maximum rental days. Write a function `validate_rentals(rentals, toy_limits)` that takes in two lists: 1. `rentals` - a list of rental records, where each record is a tuple `(customer_id, toy_id, days_rented)`. 2. `toy_limits` - a list of toy limits, where each limit is a tuple `(toy_id, max_days)` indicating the maximum rental period for each toy. The function should return a list of invalid rental records (the ones that exceed the maximum rental days for their corresponding toy). If all rentals are valid, return an empty list. **Examples:** ```python rentals = [(1, 101, 3), (2, 102, 5), (3, 101, 2)] toy_limits = [(101, 3), (102, 4)] validate_rentals(rentals, toy_limits) # Output: [(2, 102, 5)] rentals = [(1, 101, 3), (2, 102, 4), (3, 101, 2)] toy_limits = [(101, 3), (102, 4)] validate_rentals(rentals, toy_limits) # Output: [] rentals = [(1, 101, 4), (2, 103, 2)] toy_limits = [(101, 3), (102, 4)] validate_rentals(rentals, toy_limits) # Output: [(1, 101, 4)] ``` **Note:** - Each `toy_id` in `rentals` is guaranteed to have a corresponding entry in `toy_limits`. - Rental records are considered invalid if the `days_rented` exceeds the `max_days` limit defined in `toy_limits`.","solution":"def validate_rentals(rentals, toy_limits): Validates rentals against toy_limits and returns a list of invalid rentals. Parameters: rentals (list of tuples): List of rental records with each record as (customer_id, toy_id, days_rented) toy_limits (list of tuples): List of toy limits with each limit as (toy_id, max_days) Returns: list of tuples: List of invalid rental records # Create a dictionary from toy_limits for quick lookup toy_limit_dict = {toy_id: max_days for toy_id, max_days in toy_limits} # Check each rental record invalid_rentals = [ (customer_id, toy_id, days_rented) for customer_id, toy_id, days_rented in rentals if days_rented > toy_limit_dict.get(toy_id, 0) ] return invalid_rentals"},{"question":"You are working on a project where you need to merge two sorted lists of integers into one sorted list. Your coworker wrote a function for this task, but it doesn\'t seem to work correctly for all inputs. Fix the function so that it merges two sorted lists into one sorted list in ascending order. Assume both input lists are already sorted in ascending order and may contain up to 1000 integers. The merged list should also be sorted in ascending order. You can assume that the function signature is `merge_sorted_lists(list1, list2)` and that it returns the merged list.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list in ascending order. i, j = 0, 0 merged_list = [] while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements of list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements of list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Suppose you have a string comprised of lowercase letters, and you want to determine the number of times each character appears consecutively. Write a function that takes such a string and returns a list of tuples, where each tuple contains a character and the number of times it appears consecutively. For example, given the string `\\"aaabbccaa\\"`, your function should return `[(\'a\', 3), (\'b\', 2), (\'c\', 2), (\'a\', 2)]`. Some examples: ``` count_consecutive(\\"aabbcc\\") => [(\'a\', 2), (\'b\', 2), (\'c\', 2)] count_consecutive(\\"aaabbccaa\\") => [(\'a\', 3), (\'b\', 2), (\'c\', 2), (\'a\', 2)] count_consecutive(\\"abc\\") => [(\'a\', 1), (\'b\', 1), (\'c\', 1)] count_consecutive(\\"aaaa\\") => [(\'a\', 4)] count_consecutive(\\"\\") => [] ``` **NOTES:** * The list of tuples should maintain the order of the original string. * An empty string should return an empty list.","solution":"def count_consecutive(s): Returns a list of tuples where each tuple contains a character and the number of times it appears consecutively in the string. :param s: string comprised of lowercase letters :type s: str :return: list of tuples :rtype: list if not s: return [] result = [] prev_char = s[0] count = 1 for char in s[1:]: if char == prev_char: count += 1 else: result.append((prev_char, count)) prev_char = char count = 1 result.append((prev_char, count)) return result"},{"question":"Create a function that takes a list of integers and a target number. The function should return the indices of the two numbers in the list that add up to the target. - Assume that there is exactly one solution, and each input would have exactly one pair that adds up to the target. - The same element cannot be used twice. - Return the answer in the form of a tuple of two integers. For example, given the list [2, 7, 11, 15] and the target 9, the function should return (0, 1): ``` [2, 7, 11, 15], target = 9 2 + 7 = 9 Indices: (0, 1) ``` Given the list [3, 2, 4] and the target 6, the function should return (1, 2): ``` [3, 2, 4], target = 6 2 + 4 = 6 Indices: (1, 2) ```","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target. Assumes there is exactly one solution, and each input has exactly one pair. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index"},{"question":"String Manipulation Intermediate Code Alice is working with a string containing multiple words separated by spaces. She needs to write a function that reverses each word in the string while keeping the order of the words intact. For example, if the input string is \\"hello world\\", the output should be \\"olleh dlrow\\". Help Alice write a function to achieve this. Write a function `reverse_words` that takes a single string as input and returns a new string with each word reversed. **Function Signature:** ```python def reverse_words(s: str) -> str: ``` **Input:** - A single line string `s` containing multiple words separated by spaces. (1 ≤ len(s) ≤ 10^4) **Output:** - A single line string with each word reversed. **Example:** ```python # Input s = \\"hello world\\" # Output \\"olleh dlrow\\" # Input s = \\"coding is fun\\" # Output \\"gnidoc si nuf\\" ```","solution":"def reverse_words(s: str) -> str: Takes a string with multiple words and returns a new string with each word reversed. :param s: Input string containing words separated by spaces. :return: String with each word reversed. return \' \'.join(word[::-1] for word in s.split())"},{"question":"You are given a number of books, each with a certain number of pages. You want to assign these books to exactly k students so that each student gets a contiguous sequence of books. The goal is to minimize the maximum number of pages assigned to a student. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n and k (1 le n, k le 500) — the number of books and the number of students, respectively. The second line of each test case contains n integers p_1, p_2, dots, p_n (1 le p_i le 1000) — the number of pages in each book. -----Output----- For each test case, print one integer — the minimum possible value of the maximum number of pages assigned to a student. -----Example----- Input 3 4 2 12 34 67 90 3 1 15 20 25 5 3 1 2 3 4 5 Output 113 60 6","solution":"def is_possible(books, n, k, max_pages): students_required = 1 current_pages = 0 for pages in books: if current_pages + pages > max_pages: students_required += 1 current_pages = pages if students_required > k: return False else: current_pages += pages return True def find_minimum_maximum_pages(books, n, k): start, end = max(books), sum(books) result = end while start <= end: mid = (start + end) // 2 if is_possible(books, n, k, mid): result = mid end = mid - 1 else: start = mid + 1 return result def book_allocation(test_cases): results = [] for test_case in test_cases: n, k, books = test_case[\'n\'], test_case[\'k\'], test_case[\'books\'] result = find_minimum_maximum_pages(books, n, k) results.append(result) return results"},{"question":"Alex is participating in a unique card game where players accumulate points based on sequences of cards they collect. Each card is represented by an integer, and Alex has a stack of `N` cards. To score points, Alex must select a contiguous subarray of the cards such that: 1. The sum of the cards in the subarray is even. 2. The length of the subarray is maximum. Given the stack of `N` cards, help Alex determine the maximum length of such a subarray. -----Input----- - The first line contains a single integer `N` denoting the number of cards. - The second line contains `N` integers where the i-th integer represents the value of the i-th card. -----Output----- Print a single integer — the maximum length of a contiguous subarray with an even sum. If no such subarray exists, print `0`. -----Constraints----- - 1 le N le 10^5 - |a_i| le 10^9 where a_i is the value of the i-th card. -----Example Input----- 6 1 2 3 4 5 6 -----Example Output----- 6 -----Explanation----- Example case: The entire array [1, 2, 3, 4, 5, 6] has an even sum of 21, but as the sum must be even, the maximum even-sum subarray would be [2, 3, 4, 5, 6] with a sum of 20 and has a length of 6.","solution":"def max_even_sum_subarray_length(N, cards): This function returns the maximum length of a contiguous subarray with even sum. total_sum = sum(cards) if total_sum % 2 == 0: return N first_odd_index = -1 last_odd_index = -1 for i in range(N): if cards[i] % 2 != 0: if first_odd_index == -1: first_odd_index = i last_odd_index = i if first_odd_index == -1: return 0 max_length_excluding_first_odd = N - first_odd_index - 1 max_length_excluding_last_odd = last_odd_index return max(max_length_excluding_first_odd, max_length_excluding_last_odd)"},{"question":"Given an integer array nums and an integer target, find two distinct elements in the array such that the absolute difference between their sum and the target is minimized. If there are multiple pairs with the same minimized absolute difference, return the pair with the smallest sum. If there are still multiple pairs, return the pair with the smallest first element. Return the two integers in any order. Example 1: Input: nums = [4, 2, 5, 8, 1, 9], target = 7 Output: [2, 5] Explanation: The pair [2, 5] has a sum of 7, which is exactly equal to the target. Hence, the absolute difference is 0 which is the minimum possible. Example 2: Input: nums = [4, 2, 5, 8, 1, 9], target = 10 Output: [1, 9] Explanation: The pairs with their respective sums are [1, 9] -> 10, [2, 8] -> 10, [4, 5] -> 9. The absolute differences are 0, 0, and 1 respectively. Out of these, [1, 9] and [2, 8] have the smallest absolute difference of 0. [1, 9] is chosen because it has the smallest sum (10) among the pairs with minimal difference. Example 3: Input: nums = [1, 2, 3, 4, 5], target = 100 Output: [4, 5] Explanation: There are no pairs that can sum up to or come close to 100, so the pairs [4, 5] and [3, 5] with the sum of 9 have the smallest absolute difference of 91. Out of these, [4, 5] is chosen because it has the smallest sum (9) among the pairs with minimal difference, even though [3, 5] also sums to 9, [4, 5] is chosen because of the smallest first element. Constraints: 2 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def find_minimized_pair(nums, target): nums.sort() n = len(nums) min_diff = float(\'inf\') best_pair = None for i in range(n - 1): for j in range(i + 1, n): sum_pair = nums[i] + nums[j] diff = abs(sum_pair - target) if (diff < min_diff) or (diff == min_diff and (best_pair is None or (sum_pair < sum(best_pair)) or (sum_pair == sum(best_pair) and nums[i] < best_pair[0]))): min_diff = diff best_pair = (nums[i], nums[j]) return list(best_pair)"},{"question":"You have been tasked with creating an algorithm that helps a local library organize its book inventory. Each book is defined by its `title` and an `ID number`. However, the library staff realized that some book titles were entered incorrectly, with characters in different cases and extra spaces. They need a program to consistently format and display book titles in title case, without leading or trailing spaces. Create a function `format_book_title(book_list)` that takes a list of books, where each book is represented as a dictionary with `\'title\'` and `\'id\'` as keys. The function should return a new list of books with properly formatted titles, preserving the original `ID numbers`. For example: ```python books = [ {\'title\': \' the GREAT GATSBY \', \'id\': 1}, {\'title\': \'to kill a MOCKINGBIRD\', \'id\': 2}, {\'title\': \'1984\', \'id\': 3} ] format_book_title(books) ``` Output: ```python [ {\'title\': \'The Great Gatsby\', \'id\': 1}, {\'title\': \'To Kill A Mockingbird\', \'id\': 2}, {\'title\': \'1984\', \'id\': 3} ] ``` Your task is to implement the `format_book_title` function that standardizes the book titles by: 1. Stripping leading and trailing spaces. 2. Converting each title to title case (first letter of each word in uppercase, rest in lowercase). Note: You need not handle any punctuation or special characters within the book titles.","solution":"def format_book_title(book_list): Formats the title of each book in the list by stripping leading/trailing spaces and converting it to title case. Parameters: book_list (list): A list of book dictionaries, each with \'title\' and \'id\'. Returns: list: A new list of books with properly formatted titles. formatted_books = [] for book in book_list: formatted_title = book[\'title\'].strip().title() formatted_books.append({\'title\': formatted_title, \'id\': book[\'id\']}) return formatted_books"},{"question":"You are a treasure hunter searching for a collection of hidden treasures in an n x m grid. The grid is represented as a matrix where each cell contains a non-negative integer indicating the number of treasures hidden in that cell. You have a special device that can find the maximum treasure within any given sub-rectangle of the grid. However, the device can only be used once to find the maximum treasure in a contiguous rectangular part of the grid, and you want to maximize the number of treasures you collect. Your task is to find the maximum number of treasures you can collect using the device only once on any sub-rectangle of the grid. -----Input----- The first line contains two integers n and m, separated by a space — the number of rows and columns in the grid, respectively (1 ≤ n, m ≤ 500). Each of the next n lines contains m integers separated by spaces, representing the number of treasures in each cell of the grid (0 ≤ the number of treasures in each cell ≤ 10,000). -----Output----- Output a single integer — the maximum number of treasures that can be collected using the device on any sub-rectangle of the grid. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 9 Input 2 4 0 2 2 3 1 1 4 0 Output 4 Input 4 1 5 10 15 20 Output 20 -----Note----- In the first example, the sub-rectangle that maximizes the number of treasures collected is the bottom-right cell with 9 treasures. In the second example, the sub-rectangle that maximizes the number of treasures is the cell in the second row and the third column which contains 4 treasures. In the third example, the sub-rectangle that maximizes the treasures collected is the bottom cell with 20 treasures.","solution":"def max_treasure(n, m, grid): Finds the maximum number of treasures in any sub-rectangle of the grid. max_value = 0 for i in range(n): for j in range(m): max_value = max(max_value, grid[i][j]) return max_value"},{"question":"Write a function that takes a list of integers and returns the product of all the elements in the list except the element at the current index. For example, given the list `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]`. For the input `[2, 0, 3, 4]`, the output should be `[0, 24, 0, 0]`. Avoid using division in your solution, and ensure that your function handles cases with multiple zeroes correctly.","solution":"def product_except_self(nums): Given a list of integers, return a new list such that each element at index i of the new list is the product of all the numbers in the original array except the one at i. length = len(nums) if length == 0: return [] left_products = [1] * length right_products = [1] * length result = [1] * length for i in range(1, length): left_products[i] = left_products[i-1] * nums[i-1] for i in range(length-2, -1, -1): right_products[i] = right_products[i+1] * nums[i+1] for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"=====Problem Statement===== You are given a string s of length n. You are also given two integers a and b. You need to transform the string into another string by replacing all occurrences of the letter \'a\' with the given integer a and all occurrences of the letter \'b\' with the given integer b. After the replacements, you must find the sum of all digits in the transformed string. Note: The string s will only contain lowercase English letters, but you only need to replace \'a\' and \'b\'. =====Constraints===== 1≤n≤10^5 0≤a, b≤9 All characters in the string are lowercase English letters. =====Input Format===== The first line contains a single integer n, the length of the string. The second line contains the string s. The third line contains two integers, a and b, separated by a space. =====Output Format===== Output a single integer, the sum of all digits in the transformed string.","solution":"def transform_and_sum(n, s, a, b): Transforms the string s by replacing \'a\' with integer a and \'b\' with integer b, and computes the sum of all digits in the transformed string. :param n: length of the string s :param s: the input string :param a: the integer to replace \'a\' :param b: the integer to replace \'b\' :return: the sum of all digits in the transformed string transformed_string = \\"\\" for char in s: if char == \'a\': transformed_string += str(a) elif char == \'b\': transformed_string += str(b) else: transformed_string += char digit_sum = sum(int(char) for char in transformed_string if char.isdigit()) return digit_sum"},{"question":"Given a list of words, we define the \\"score\\" of a word as the number of distinct characters it contains. For example, the word \\"hello\\" has a score of 4 (\\"h\\", \\"e\\", \\"l\\", \\"o\\"). You are to write a function that finds the word with the highest score in a given list of words. If there are multiple words with the same highest score, return the one that appears first in the list. # Function Signature ```python def highest_score_word(words: List[str]) -> str: ``` # Input - words: A list of words as strings. Each word contains only lowercase English letters. The length of the list is `1 <= len(words) <= 1000`. The length of each word is `1 <= len(word) <= 10`. # Output - Return a single string, representing the word with the highest score. # Example ```python highest_score_word([\\"hello\\", \\"world\\", \\"python\\"]) # Output: \\"python\\" highest_score_word([\\"abc\\", \\"def\\", \\"aabbcc\\"]) # Output: \\"abc\\" highest_score_word([\\"a\\", \\"ab\\", \\"abc\\"]) # Output: \\"abc\\" ``` # Constraints - If the input list has multiple words with the same highest score, return the one that appears first in the list. - Each word will only contain lowercase English letters.","solution":"from typing import List def highest_score_word(words: List[str]) -> str: def score(word: str) -> int: return len(set(word)) return max(words, key=score)"},{"question":"=====Problem Statement===== You are tasked with creating a function to reverse the order of words in a given string. For example, the string \\"I love programming\\" should be reversed to \\"programming love I\\". =====Input Format===== A single line of input containing the string, S. =====Constraints===== 1 ≤ len(S) ≤ 1000 The string consists of alphanumeric characters and spaces. Words in the string are separated by a single space, and there are no leading or trailing spaces. =====Output Format===== Print the string with the words reversed. Example: Input: \\"Hello world\\" Output: \\"world Hello\\"","solution":"def reverse_words(s): Reverses the order of words in the input string s. words = s.split() reversed_words = \' \'.join(reversed(words)) return reversed_words"},{"question":"You are given an array of integers with N elements. Your task is to find the maximum sum of any non-empty subarray of the given array. A subarray is a contiguous subsequence of the array. To achieve this, you can use Kadane\'s Algorithm, which works in linear time. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N — the number of elements in the array. - The second line of each test case contains N space-separated integers denoting the elements of the array. -----Output----- - For each test case, print a single line containing the maximum sum of any subarray of the given array. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - -10^4 le text{array[i]} le 10^4 - the sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 5 1 -2 3 4 -1 3 -1 -2 -3 -----Example Output----- 7 -1 -----Explanation----- Example case 1: The subarray with the maximum sum is [3, 4], which gives a sum of 7. Example case 2: The subarray with the maximum sum is [-1], which gives a sum of -1.","solution":"def max_subarray_sum(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] # Implementing Kadane\'s Algorithm max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current results.append(max_global) return results"},{"question":"You are given an array of integers representing the heights of terrain in a row. Water can be trapped in valleys between the heights. The task is to determine the total amount of water that can be trapped after raining. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines: the first line contains an integer N (the number of elements in the height array), and the second line contains N space-separated integers representing the height of each terrain unit. -----Output:----- For each test case, output the total amount of water that can be trapped. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 10000 - 0 leq height[i] leq 1000 -----Sample Input:----- 2 9 0 1 0 2 1 0 1 3 2 1 2 1 6 3 0 0 2 0 4 -----Sample Output:----- 6 10 -----EXPLANATION:----- In the first test case, 6 units of water can be trapped. In the second test case, 10 units of water can be trapped.","solution":"def trap_water(heights): if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water def process_test_cases(test_cases): results = [] for heights in test_cases: results.append(trap_water(heights)) return results"},{"question":"Emilia is an avid cyclist and loves exploring different routes around her city. She maintains a log of her cycling routes, which includes the distances of each segment she completes in a day. Sometimes, she ends up cycling the same segment multiple times during a day due to road closures or personal preferences. Emilia wants to optimize her cycling log by merging consecutive segments that are of the same distance. Your task is to help Emilia write a function that takes her log of distances as input and returns a new log where consecutive segments of the same distance are merged into a single segment with the distance being the sum of the merged segments. -----INPUT----- The first line contains an integer T, denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer N, representing the number of segments in that day\'s log. The next line contains N integers, representing the distances of each segment Emilia cycled in order. -----OUTPUT----- For each test case, output a single line formatted as \\"Case #T: \\" followed by the optimized list of distances for that test case. -----CONSTRAINTS----- 1 < T < 20 1 < N < 1000 1 <= Distance value <= 100 -----EXAMPLE----- Input: 3 6 1 2 2 3 3 3 4 5 5 5 5 5 2 3 2 3 3 Output: Case #1: 1 4 9 Case #2: 20 Case #3: 2 3 2 6","solution":"def optimize_cycling_log(test_cases): Merges consecutive segments of the same distance in each test case log. Args: test_cases (list): A list of tuples, where each tuple contains two elements, an integer N (number of segments in the day\'s log) and a list of N integers representing the distances cycled. Returns: list: A list of strings, each representing the optimized cycling log for each test case. results = [] for i, (N, segments) in enumerate(test_cases): if N == 0: results.append(f\\"Case #{i + 1}:\\") continue optimized_segments = [] current_sum = segments[0] for j in range(1, N): if segments[j] == segments[j - 1]: current_sum += segments[j] else: optimized_segments.append(current_sum) current_sum = segments[j] optimized_segments.append(current_sum) results.append(f\\"Case #{i + 1}: \\" + \' \'.join(map(str, optimized_segments))) return results"},{"question":"Task ==== Write a function `decrypt_message` that takes a string `message` encrypted with a simple substitution cipher and a string `key` representing the substitution key. The key is a 26-character string containing each letter of the alphabet exactly once in some order, which is used to map the letters of the ciphertext back to the plaintext. The function should return the decrypted message as a string. For example, if the message is \\"ifmmp\\" and the key is \\"bcdefghijklmnopqrstuvwxyza\\", the decrypted message would be \\"hello\\". **Input:** - `message` (string, 1 ≤ len(message) ≤ 1000): encrypted message composed of lowercase letters - `key` (string, len(key) == 26): a string of length 26 that contains each letter of the alphabet exactly once **Output:** A string representing the decrypted message. **Example:** ```python assert decrypt_message(\\"ifmmp\\", \\"bcdefghijklmnopqrstuvwxyza\\") == \\"hello\\" ``` **Notes:** - Each letter in the plaintext is shifted according to the position of the corresponding letter in the key. - Spaces and non-letter characters are not present in the message.","solution":"def decrypt_message(message, key): Decrypts a message encrypted with a simple substitution cipher using the key. # Create a dictionary for the substitution key mapping key_map = {key[i]: chr(97 + i) for i in range(26)} # Decrypt the message decrypted_message = \'\'.join(key_map[char] for char in message) return decrypted_message"},{"question":"Jack is an avid collector of rare stamps, and he loves to organize them in a particular way. Jack considers a collection set to be \\"balanced\\" if the differences between the values of every two consecutive stamps in that set are the same, and the set contains at least 2 stamps. Among his vast collection, Jack wants to find the longest balanced collection set. Given a list of stamp values, determine the length of the longest balanced set. -----Input----- - First line contains single integer T denoting test cases. - Second Line contains single integer N denoting the number of stamps in the collection. - Third Line contains N space-separated integers denoting the values of the stamps. -----Output----- - For each test case, output a single integer, the length of the longest balanced collection set. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ Value of stamp ≤ 10^6 -----Example----- Input: 2 7 10 12 14 16 10 8 6 5 1 3 2 4 6 Output: 4 3 -----Explanation----- Example case 1: The first balanced set with the longest length is [10, 12, 14, 16] with a difference of 2. Another balanced set is [10, 8, 6] with a difference of -2. The length of the longest balanced set is 4. Example case 2: Possible balanced sets are [1, 3, 5] and [3, 2, 1]. The length of the longest balanced set is 3.","solution":"def longest_balanced_set_length(test_cases): results = [] for data in test_cases: N, stamps = data if N < 2: results.append(0) continue longest_length = 2 for i in range(N-1): diff = stamps[i+1] - stamps[i] current_length = 2 for j in range(i+2, N): if stamps[j] - stamps[j-1] == diff: current_length += 1 else: break longest_length = max(longest_length, current_length) results.append(longest_length) return results # Helper function to parse the input according to the given problem def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] line_idx = 1 for _ in range(T): N = int(input_lines[line_idx]) stamps = list(map(int, input_lines[line_idx + 1].split())) test_cases.append((N, stamps)) line_idx += 2 return test_cases # Example usage input_str = 2 7 10 12 14 16 10 8 6 5 1 3 2 4 6 test_cases = parse_input(input_str) result = longest_balanced_set_length(test_cases) print(result) # Output: [4, 3]"},{"question":"You are given a binary string of length n with exactly k \'1\'s in it. Your task is to find the maximum length of contiguous subarray with equal number of \'0\'s and \'1\'s. If no such subarray exists, return 0. For example, given the binary string 010101, the longest contiguous subarray with equal number of \'0\'s and \'1\'s is the entire string itself. Another example, given the binary string 110100, the longest contiguous subarray with equal number of \'0\'s and \'1\'s is 1010. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n (1 le n le 100) — the length of the binary string, and k (0 le k le n) — the number of \'1\'s in the string. The second line of each test case contains the binary string of length n. It is guaranteed that the string contains exactly k \'1\'s and (n - k) \'0\'s. -----Output----- For each test case, print the maximum length of contiguous subarray with equal number of \'0\'s and \'1\'s. If no such subarray exists, print 0. -----Example----- Input 3 6 3 010101 5 2 10010 4 2 1100 Output 6 4 4","solution":"def max_length_subarray_with_equal_0s_1s(n, k, binary_string): prefix_sum = {0: -1} max_len = 0 current_sum = 0 for i, ch in enumerate(binary_string): current_sum += 1 if ch == \'1\' else -1 if current_sum in prefix_sum: max_len = max(max_len, i - prefix_sum[current_sum]) else: prefix_sum[current_sum] = i return max_len def solve(test_cases): results = [] for n, k, binary_string in test_cases: results.append(max_length_subarray_with_equal_0s_1s(n, k, binary_string)) return results"},{"question":"Implement a function `custom_mean` that takes a list of integers as input and returns a dictionary with two keys: `mean` and `percentage_gt_mean`. The value for the `mean` key should be the arithmetic mean (average) of the list. The value for the `percentage_gt_mean` key should be the percentage of integers in the list that are strictly greater than the mean, rounded to two decimal places. You may assume that the input list will contain at least one integer. You are not allowed to use any built-in Python functions or libraries for calculating the mean or statistics (e.g., `sum`, `statistics.mean`). However, you may use basic operators, loops, and conditionals to solve the problem. # Example: ```python # Input custom_mean([1, 2, 3, 4, 5]) # Output {\'mean\': 3.0, \'percentage_gt_mean\': 40.0} # Explanation The arithmetic mean of the list [1, 2, 3, 4, 5] is 3.0. There are 2 integers (4 and 5) greater than the mean, which is 40% of the list. ``` # Signature: ```python def custom_mean(lst: List[int]) -> Dict[str, float]: pass ```","solution":"def custom_mean(lst): Returns a dictionary with the mean of the list and the percentage of numbers greater than the mean. n = len(lst) # Calculate mean manually total = 0 for num in lst: total += num mean = total / n # Calculate percentage greater than mean count_gt_mean = 0 for num in lst: if num > mean: count_gt_mean += 1 percentage_gt_mean = (count_gt_mean / n) * 100 return { \'mean\': mean, \'percentage_gt_mean\': round(percentage_gt_mean, 2) }"},{"question":"# Task You are given a binary tree where each node could have one or zero left children and one or zero right children. Your task is to find the height of the binary tree. The height of a binary tree is the longest path from the root node to any leaf node where the path contains the maximum number of nodes. A tree with a single node has a height of 1. # Example For a tree represented as: ``` 5 / 3 8 / / 1 7 9 ``` The result should be `3`. For a tree represented as: ``` 10 / 12 / 15 ``` The result should be `3`. # Input/Output - `[input]` binary tree `root` A binary tree represented by its root node in the form of a class. Each node has properties `val`, `left`, and `right` where `val` is the node\'s value, `left` is a reference to the left child, and `right` is a reference to the right child. The binary tree is not necessarily balanced. `1 <= number of nodes <= 1000` - `[output]` an integer The height of the binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def height(root): Calculate the height of the binary tree. if root is None: return 0 else: left_depth = height(root.left) right_depth = height(root.right) return max(left_depth, right_depth) + 1"},{"question":"Roman Numerals Converter Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, 2 is written as II, in Roman numeral, just two one\'s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. # Task Your task is to write two functions: 1. `int_to_roman`: which converts an integer to a Roman numeral. 2. `roman_to_int`: which does the reverse. # Examples ``` int_to_roman 58 -> LVIII (L = 50, V = 5, III = 3) 1994 -> MCMXCIV (M = 1000, CM = 900, XC = 90, IV = 4) roman_to_int \\"III\\" -> 3 \\"IV\\" -> 4 \\"IX\\" -> 9 ``` * Ensure that the input range is between 1 and 3999 inclusively for both functions.","solution":"def int_to_roman(num): Converts an integer to a Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num def roman_to_int(s): Converts a Roman numeral to an integer. roman_dict = { \\"I\\": 1, \\"V\\": 5, \\"X\\": 10, \\"L\\": 50, \\"C\\": 100, \\"D\\": 500, \\"M\\": 1000, \\"IV\\": 4, \\"IX\\": 9, \\"XL\\": 40, \\"XC\\": 90, \\"CD\\": 400, \\"CM\\": 900 } i = 0 num = 0 while i < len(s): if i+1 < len(s) and s[i:i+2] in roman_dict: num += roman_dict[s[i:i+2]] i += 2 else: num += roman_dict[s[i]] i += 1 return num"},{"question":"Write a function that, given an integer n, returns the factorial of n. The factorial of a non-negative integer n is defined as the product of all the integers from 1 to n (inclusive). The function should be efficient enough to handle large values of n up to 20. **Function Signature** ```python def factorial(n: int) -> int: pass ``` **Input** - `n` (integer, 0 <= n <= 20): the number for which to calculate the factorial. **Output** - Returns an integer, representing the factorial of the given number. **Examples** ```python factorial(0) # Output: 1, because 0! = 1 factorial(1) # Output: 1, because 1! = 1 factorial(5) # Output: 120, because 5! = 1 * 2 * 3 * 4 * 5 = 120 factorial(10) # Output: 3628800, because 10! = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 = 3628800 factorial(20) # Output: 2432902008176640000, because 20! is a very large number ```","solution":"def factorial(n: int) -> int: Returns the factorial of a given non-negative integer n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"In a 2D grid, each cell can contain any of the digits from 0 to 9. You are given such a grid and multiple queries. For each query, you are given a digit and you need to determine if there exists any subgrid of size K*K that contains only the given digit. -----Input----- - The first line contains three space-separated integers N, M, and Q describing the dimensions of the grid and the number of queries. - Each of the next N lines contains M digits (0-9). - The following Q lines each contain an integer K and a digit d. -----Output----- - For each query, output \\"yes\\" (without quotes) if there exists a K*K subgrid that contains only the digit d. Otherwise, output \\"no\\" (without quotes). -----Constraints----- - 1 <= N, M <= 500 - 1 <= Q <= 1e5 - 1 <= K <= min(N, M) - 0 <= d <= 9 -----Example----- Input: 4 4 2 1234 5678 1234 5678 2 5 3 1 Output: no no In this question, you will check subgrids of various sizes to identify if they consist entirely of a single specified digit, presenting a challenge in terms of grid traversal and subgrid validation.","solution":"def exists_uniform_subgrid(grid, K, d): N = len(grid) M = len(grid[0]) d = str(d) for i in range(N - K + 1): for j in range(M - K + 1): uniform = True for ii in range(i, i + K): for jj in range(j, j + K): if grid[ii][jj] != d: uniform = False break if not uniform: break if uniform: return \\"yes\\" return \\"no\\" def answer_queries(N, M, Q, grid, queries): results = [] for K, d in queries: results.append(exists_uniform_subgrid(grid, K, d)) return results"},{"question":"Write a function that takes a list of integers as input and returns the sum of the two largest unique numbers in the list. If the list contains less than two unique numbers, the function should return 0. Example: ```python sum_of_two_largest_unique([5, 5, 4, 3]) # Output: 9 (5 + 4) sum_of_two_largest_unique([2, 1, 1]) # Output: 3 (2 + 1) sum_of_two_largest_unique([1]) # Output: 0 ``` Constraints: - The list may contain positive and negative integers. - The list will have at least one integer.","solution":"def sum_of_two_largest_unique(numbers): Returns the sum of the two largest unique numbers in the list. If the list contains less than two unique numbers, returns 0. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return 0 unique_numbers.sort(reverse=True) return unique_numbers[0] + unique_numbers[1]"},{"question":"# Task Write the function ```compress_string``` that takes a string as input and returns a compressed version of the string. The compression algorithm should count consecutive repeated characters and replace them with the character followed by the count of repetitions. If the compressed string is not shorter than the original string, the function should return the original string instead. For example: - Input: `\\"aaabcccccaaa\\"` - Output: `\\"a3b1c5a3\\"` Rules: 1. Retain the case of characters (upper-case and lower-case characters should be considered distinct). 2. If the compressed string is not shorter than the original string, return the original string. # Function Signature ```python def compress_string(s: str) -> str: # Your code here ``` # Examples ```python assert compress_string(\\"aaabcccccaaa\\") == \\"a3b1c5a3\\" assert compress_string(\\"abcdef\\") == \\"abcdef\\" assert compress_string(\\"aabbcc\\") == \\"aabbcc\\" assert compress_string(\\"aabcccccaaa\\") == \\"a2b1c5a3\\" assert compress_string(\\"AAABBBCCCAAA\\") == \\"A3B3C3A3\\" ```","solution":"def compress_string(s: str) -> str: if not s: return s compressed = [] count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: compressed.append(f\\"{prev_char}{count}\\") prev_char = char count = 1 compressed.append(f\\"{prev_char}{count}\\") compressed_string = \\"\\".join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"You are planning a road trip and want to visit certain cities along your route in a specific order. You have a list of cities you want to visit and the travel times between directly connected cities in minutes. Your task is to find the shortest possible travel time to visit all the cities in the order given, starting from the first city in the list and ending at the last city. You are given: - A list of cities, represented as strings, in the order you intend to visit them. - A dictionary that represents the travel times between directly connected cities. The keys are tuples of two cities, and the values are the corresponding travel times in minutes. For example, you might have: Cities to visit: `[\\"A\\", \\"B\\", \\"C\\", \\"D\\"]` Travel times: `{(\\"A\\", \\"B\\"): 90, (\\"B\\", \\"C\\"): 70, (\\"C\\", \\"D\\"): 60, (\\"A\\", \\"C\\"): 200, (\\"B\\", \\"D\\"): 120}` In this example, the shortest travel time to visit all cities in the specified order is `90 + 70 + 60 = 220` minutes. Implement a function `shortest_travel_time(cities, travel_times)` that returns the shortest travel time to visit all the cities in the given order. **Function Signature:** ```python def shortest_travel_time(cities: List[str], travel_times: Dict[Tuple[str, str], int]) -> int: ``` **Inputs:** - `cities`: A list of strings where each string represents a city name (e.g., `[\\"A\\", \\"B\\", \\"C\\", \\"D\\"]`). - `travel_times`: A dictionary with tuple keys of two cities representing the travel route and integer values representing the travel time in minutes (e.g., `{(\\"A\\", \\"B\\"): 90, (\\"B\\", \\"C\\"): 70}`). **Output:** - An integer representing the shortest travel time in minutes to visit all the cities in the order. **Example:** ```python cities = [\\"A\\", \\"B\\", \\"C\\", \\"D\\"] travel_times = {(\\"A\\", \\"B\\"): 90, (\\"B\\", \\"C\\"): 70, (\\"C\\", \\"D\\"): 60, (\\"A\\", \\"C\\"): 200, (\\"B\\", \\"D\\"): 120} print(shortest_travel_time(cities, travel_times)) # Output: 220 ``` **Notes:** - You can assume there will always be a valid path between the cities in the given order. - The input cities list will have at least 2 cities.","solution":"from typing import List, Dict, Tuple def shortest_travel_time(cities: List[str], travel_times: Dict[Tuple[str, str], int]) -> int: total_time = 0 # Iterate over the cities, considering pairs of subsequent cities for i in range(len(cities) - 1): # Get the current city pair start_city = cities[i] end_city = cities[i + 1] # Find the travel time between the current city pair if (start_city, end_city) in travel_times: total_time += travel_times[(start_city, end_city)] else: # If the direct route is not found, try the reverse total_time += travel_times[(end_city, start_city)] return total_time"},{"question":"You are asked to implement a function that helps manage participants in a coding competition. Each participant has a unique identifier in the form of an integer. Your function should take two arguments: a list of integers representing the current participants, and a list of tuples where each tuple contains an operation (\'add\' or \'remove\') and an integer identifier. Here are the rules you need to follow: 1. If the operation is \'add\', add the participant ID to the participants list. 2. If the operation is \'remove\' and the ID is in the list, remove the participant ID. 3. If the operation is \'remove\' but the ID is not in the list, ignore the operation. Your function should return the list of participants after processing all operations. Example: ``` initial_participants = [1, 2, 3, 4] operations = [(\'add\', 5), (\'remove\', 2), (\'add\', 6), (\'remove\', 7)] ``` After processing these operations, the final list of participants should be: ``` [1, 3, 4, 5, 6] ``` Note: The participants list must be maintained in the order of their addition.","solution":"def manage_participants(participants, operations): Manage participants in a coding competition. Args: participants (list of int): The current list of participants. operations (list of tuples): Each tuple contains an operation (\'add\' or \'remove\') and an integer identifier for the participant. Returns: list of int: The list of participants after processing all operations. for operation, participant_id in operations: if operation == \'add\': if participant_id not in participants: participants.append(participant_id) elif operation == \'remove\': if participant_id in participants: participants.remove(participant_id) return participants"},{"question":"You are required to implement a function that checks whether a given string can be segmented into a space-separated sequence of one or more dictionary words. The function should return `\\"true\\"` if the string can be segmented and `\\"false\\"` otherwise. You will be provided with a list of valid dictionary words. For example: ```python def wordBreak(s, wordDict): pass # Test Cases print(wordBreak(\\"leetcode\\", [\\"leet\\", \\"code\\"])) # Output: \\"true\\" print(wordBreak(\\"applepenapple\\", [\\"apple\\", \\"pen\\"])) # Output: \\"true\\" print(wordBreak(\\"catsandog\\", [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"])) # Output: \\"false\\" ``` # Constraints: - The input string `s` consists of lowercase English letters and has a length between 1 and 300. - The dictionary `wordDict` contains words that consist of lowercase English letters and has a length between 1 and 1000. - The dictionary can have any number of words, and the words can have varying lengths, but each word length is at least 1 and at most 50. You may assume that the input string and dictionary are non-empty.","solution":"def wordBreak(s, wordDict): Check if the input string can be segmented into space-separated sequence of one or more dictionary words. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"true\\" if dp[-1] else \\"false\\""},{"question":"Alice is training for a running marathon. She has a specific number of training days and wants to maximize her running distance on alternating days to prevent burnout. She can choose to run on either even or odd days for the entire training period. Given that Alice has a list of running distances she can complete on each training day, she has to choose the higher total distance sum from either all even-indexed days or all odd-indexed days. Assume the first day of training is indexed as 1 (odd), the second day as 2 (even), and so on. -----Input----- The input consists of a positive integer n (1 le n le 10^5) which represents the number of training days, followed by a list of n integers d_1, d_2, d_3, ..., d_n (0 le d_i le 10^4) where d_i is the running distance on the ith day. -----Output----- Print the maximum running distance Alice can achieve by training on either all even days or all odd days. -----Example----- Input 6 10 3 2 5 1 7 Output 17 -----Note----- In the example, the distances on odd days are [10, 2, 1] and the distances on even days are [3, 5, 7]. The total distance for odd days is 10 + 2 + 1 = 13, and the total distance for even days is 3 + 5 + 7 = 15. Thus, the maximum running distance Alice can achieve is 17 by picking even days.","solution":"def max_running_distance(n, distances): Returns the maximum running distance by training on either all even days or all odd days. Parameters: n (int): The number of training days. distances (list): A list of integers representing the running distances on each day. Returns: int: The maximum running distance. odd_days_distance_sum = sum(distances[i] for i in range(0, n, 2)) even_days_distance_sum = sum(distances[i] for i in range(1, n, 2)) return max(odd_days_distance_sum, even_days_distance_sum)"},{"question":"Given a list of integers, the code provided is supposed to return a new list containing only the prime numbers from the original list. However, the code is not producing the correct output. # Task Fix the bug so that the function correctly returns a list of prime numbers. # Notes A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. The input list will always contain at least one integer.","solution":"def is_prime(num): Returns True if the number is prime, otherwise False. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def filter_primes(numbers): Returns a list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Design a class `Forest` to model a forest ecosystem. Each instance of `Forest` should contain various `Tree` objects, each having attributes like species, height, and age. Implement methods to: 1. Add a tree to the forest. 2. Remove a tree from the forest. 3. Find the tallest tree in the forest. 4. Calculate the average age of all the trees in the forest. Also, ensure that a tree\'s age cannot be a negative number. If an attempt is made to set a tree\'s age to a negative number, it should raise a `ValueError`. Example: ```python class Tree: def __init__(self, species, height, age): self.species = species self.height = height self.age = age @property def age(self): return self._age @age.setter def age(self, value): if value < 0: raise ValueError(\\"Age cannot be negative\\") self._age = value class Forest: def __init__(self): self.trees = [] def add_tree(self, tree): self.trees.append(tree) def remove_tree(self, tree): self.trees.remove(tree) def find_tallest_tree(self): if not self.trees: return None return max(self.trees, key=lambda tree: tree.height) def average_age(self): if not self.trees: return 0 return sum(tree.age for tree in self.trees) / len(self.trees) # Example usage: forest = Forest() tree1 = Tree(\\"Oak\\", 20, 50) tree2 = Tree(\\"Pine\\", 30, 40) tree3 = Tree(\\"Maple\\", 25, 60) forest.add_tree(tree1) forest.add_tree(tree2) forest.add_tree(tree3) print(forest.find_tallest_tree().species) # Output: \\"Pine\\" print(forest.average_age()) # Output: 50.0 forest.remove_tree(tree2) print(forest.find_tallest_tree().species) # Output: \\"Maple\\" print(forest.average_age()) # Output: 55.0 ```","solution":"class Tree: def __init__(self, species, height, age): self.species = species self.height = height self.age = age @property def age(self): return self._age @age.setter def age(self, value): if value < 0: raise ValueError(\\"Age cannot be negative\\") self._age = value class Forest: def __init__(self): self.trees = [] def add_tree(self, tree): self.trees.append(tree) def remove_tree(self, tree): if tree in self.trees: self.trees.remove(tree) else: raise ValueError(\\"Tree not found in the forest\\") def find_tallest_tree(self): if not self.trees: return None return max(self.trees, key=lambda tree: tree.height) def average_age(self): if not self.trees: return 0 return sum(tree.age for tree in self.trees) / len(self.trees) # Example usage: # forest = Forest() # tree1 = Tree(\\"Oak\\", 20, 50) # tree2 = Tree(\\"Pine\\", 30, 40) # tree3 = Tree(\\"Maple\\", 25, 60) # forest.add_tree(tree1) # forest.add_tree(tree2) # forest.add_tree(tree3) # print(forest.find_tallest_tree().species) # Output: \\"Pine\\" # print(forest.average_age()) # Output: 50.0 # forest.remove_tree(tree2) # print(forest.find_tallest_tree().species) # Output: \\"Maple\\" # print(forest.average_age()) # Output: 55.0"},{"question":"You are given a list of integers. You need to write a function that returns a list of the integers with their squares. However, only include integers in the output list that have an even-valued square. For example: ``` Input: [1, 2, 3, 4, 5] Output: [2, 4] ``` In this example, the squares of the integers are [1, 4, 9, 16, 25]. Only 4 and 16 are even, corresponding to the original integers 2 and 4. Write a function `even_squares` that takes a list of integers and returns a list of integers whose squares are even. You may assume all integers in the input list are non-negative. The function should be efficient and concise.","solution":"def even_squares(nums): Returns a list of integers from the input list whose squares are even. return [num for num in nums if (num ** 2) % 2 == 0]"},{"question":"Matrix Rotation You are required to create a function that rotates a given `n x n` matrix (2D list) by 90 degrees clockwise. The function should modify the matrix in place without using extra space for another matrix. For example, let\'s take the following matrix of size 3x3: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After rotating the matrix by 90 degrees clockwise, it should become: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` **Input:** - An `n x n` matrix where `1 ≤ n ≤ 10^3`. **Output:** - The same matrix rotated 90 degrees clockwise. **Method Signature:** ```python def rotate_matrix(matrix: List[List[int]]) -> None: pass ``` **Function Requirements:** 1. The function should not return anything. The transformation must be done in place. 2. The time complexity should be O(n^2). 3. Use only a constant amount of extra space. In other words, you may only use a fixed number of variables to keep track of pointers or iterators during the transformation. **Note:** You may assume that all elements in the matrix are integers. **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) assert matrix == [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates the given n x n matrix by 90 degrees clockwise in place. n = len(matrix) # First, transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Then, reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Given a string s and a pattern p, implement a function to check if s matches p. The pattern p can include the characters \'.\' and \'*\': - \'.\' Matches any single character. - \'*\' Matches zero or more of the preceding element. The matching should cover the entire input string (not partial). Example: Input: s = \\"aab\\" p = \\"c*a*b\\" Output: true Explanation: c* can be ignored, a* matches aa, and b matches b.","solution":"def is_match(s: str, p: str) -> bool: Checks if string s matches the pattern p. \'.\' Matches any single character. \'*\' Matches zero or more of the preceding element. # dp[i][j] will be True if the first i characters in s match # the first j characters in p dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] # An empty string matches with an empty pattern dp[0][0] = True # Only \'*\' can match with an empty string, and it must be valid for j in range(1, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 2] for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == s[i - 1] or p[j - 1] == \'.\': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == \'.\')) return dp[len(s)][len(p)]"},{"question":"Given a list of numbers where each number appears exactly three times, except for one number which appears exactly once. Write a function to find the number that appears only once. Function Input: - A list of integers, nums, where each integer can be in the range of -2^31 to 2^31 - 1. - The length of nums is at least 4 and not more than 10^4. Example: ```python Input: [2, 2, 3, 2] Output: 3 Input: [0, 1, 0, 1, 0, 1, 99] Output: 99 ``` Task: Implement a function `single_number(nums: List[int]) -> int` that returns the number that appears only once in the list. Note: - Your solution should not use extra memory for another array. - Optimize the function to work in O(n) time complexity.","solution":"def single_number(nums): Returns the number that appears exactly once in the list where all other numbers appear exactly three times. ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"You are given a string containing only lowercase letters. Your task is to find the longest substring with exactly k distinct characters. If there are multiple such substrings, return any one of them. For instance: ```python s = \\"araaci\\" k = 2 longest_substring(s, k) == \\"araa\\" # Both \\"araa\\" and \\"raac\\" have 4 characters and exactly 2 distinct characters ``` In the case there is no such substring, the function should return an alerting message: ```python s = \\"aabbcc\\" k = 4 longest_substring(s, k) == \\"No valid substring\\" ``` If the string is empty, the function should return an alert as well: ```python s = \\"\\" k = 2 longest_substring(s, k) == \\"Empty string\\" ``` Additionally, if `k` is 0, the function should return an alert indicating that it is not a valid input: ```python s = \\"aaabbcc\\" k = 0 longest_substring(s, k) == \\"Invalid value of k\\" ``` Another example: ```python s = \\"eceba\\" k = 2 longest_substring(s, k) == \\"ece\\" ``` This function will help you practice your skills in string manipulation and handling edge cases in input.","solution":"def longest_substring(s, k): Finds the longest substring with exactly k distinct characters. if len(s) == 0: return \\"Empty string\\" if k == 0: return \\"Invalid value of k\\" window_start = 0 max_length = 0 max_substring = \\"\\" char_frequency = {} for window_end in range(len(s)): right_char = s[window_end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = s[window_start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] window_start += 1 if len(char_frequency) == k: current_substring = s[window_start:window_end + 1] if len(current_substring) > max_length: max_length = len(current_substring) max_substring = current_substring if max_length == 0: return \\"No valid substring\\" return max_substring"},{"question":"In this task, you are required to determine whether a given string can be transformed into another string through a series of rotational operations. A rotational operation involves shifting the string to the left by one character and moving the shifted character to the end of the string. For example: ``` \\"abcde\\" -> \\"bcdea\\" -> \\"cdeab\\" -> \\"deabc\\" -> \\"eabcd\\" ``` Given two strings `s1` and `s2`, your goal is to write a function that returns `True` if `s2` can be obtained by rotating `s1`, and `False` otherwise. For example: ```python is_rotated(\\"abcde\\", \\"cdeab\\") == True # \\"abcde\\" -> \\"bcdea\\" -> \\"cdeab\\" is_rotated(\\"abcde\\", \\"abced\\") == False # \\"abced\\" cannot be obtained through any number of rotations of \\"abcde\\" is_rotated(\\"aaaaa\\", \\"aaaaa\\") == True # Identical strings is_rotated(\\"waterbottle\\", \\"erbottlewat\\") == True is_rotated(\\"waterbottle\\", \\"bottlewater\\") == True is_rotated(\\"rotation\\", \\"tationro\\") == True is_rotated(\\"rotation\\", \\"ionrotat\\") == True is_rotated(\\"rotation\\", \\"tionator\\") == False ``` # Constraints - The two input strings, `s1` and `s2`, will have the same length. - The input strings will only contain alphabetical characters. - You can assume the input strings will not be empty.","solution":"def is_rotated(s1, s2): Returns True if s2 can be obtained by rotating s1, otherwise False. # Check if s2 can be found in the doubled s1 (s1 concatenated with itself) return len(s1) == len(s2) and s2 in (s1 + s1)"},{"question":"# Task **Given** an array/list of n integers, **group** them based on the length of the number when read as a string. Return the result in the form of nested lists/arrays where each group consists of numbers of the same length, ordered by the length of the number in ascending order. # Notes - **Return** a list/array of arrays/lists of integers. - **Sort** the main list by the increasing length of the number groups. - Each group should keep the relative order of numbers from the original list. # Input - An array/list of integers with at least **4** elements. - Numbers can be positive or negative. - It is guaranteed there is at least one number of each length from 1 to the max length in the input. # Output - An array/list of arrays/lists of integers. # Example ``` groupByLength([4, 45, 23, 123, 2, 567]) ⇒ return [[4, 2], [45, 23], [123, 567]] ``` Explanation: - The numbers [4, 2] have length 1. - The numbers [45, 23] have length 2. - The numbers [123, 567] have length 3. The result groups these numbers based on their length, keeping the relative order from the original list. ``` groupByLength([5,−32,65,−123,4,678,99]) ⇒ return [[5, 4], [−32, 65, 99], [−123, 678]] ``` Explanation: - The numbers [5, 4] have length 1. - The numbers [−32, 65, 99] have length 2. - The numbers [−123, 678] have length 3.","solution":"def groupByLength(arr): from collections import defaultdict # Create a dictionary to hold lists grouped by their length length_groups = defaultdict(list) # Iterate over all numbers in the input array for num in arr: # Convert the number to a string and get its length length = len(str(abs(num))) # Append the number to the corresponding length group length_groups[length].append(num) # Create a result list result = [] # Iterate over the groups sorted by their length for length in sorted(length_groups.keys()): result.append(length_groups[length]) return result"},{"question":"You are given a rectangular grid of dimensions `m x n` where `m` is the number of rows and `n` is the number of columns. Each cell in the grid can either be empty or obstacle. An empty cell is represented by \'0\' and an obstacle is represented by \'1\'. You can move up, down, left, or right from an empty cell, but you cannot move into an obstacle. You are located at the top-left corner of the grid (i.e., at (0, 0)) and you need to move to the bottom-right corner (i.e., (m-1, n-1)). Your task is to determine the total number of unique paths you can take to reach the bottom-right corner. If there is no possible path, return 0. Write a function `uniquePathsWithObstacles(grid)` that takes in a 2D list `grid` with the dimensions `m x n` and returns an integer representing the total number of unique paths from the top-left corner to the bottom-right corner. # Example: ```plaintext grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] uniquePathsWithObstacles(grid) -> 2 ``` The two unique paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right # Constraints: - The dimensions of the grid will not exceed `100 x 100`. - The values of the grid will be only `0` and `1`.","solution":"def uniquePathsWithObstacles(grid): Return the number of unique paths from the top-left corner to the bottom-right corner, avoiding obstacles. if not grid or not grid[0] or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are given a string that contains a sequence of characters and digits. Your task is to determine if it is possible to rearrange the characters in the string such that no two adjacent characters are the same. Write a function `canRearrange(s)` that takes a string `s` as input and returns `True` if it is possible to rearrange the string such that no two adjacent characters are the same. Otherwise, return `False`. # Function Signature ```python def canRearrange(s: str) -> bool: pass ``` # Input - The input string `s` will consist of lowercase English letters and digits, and its length will be in the range `[1, 1000]`. # Output - Return `True` if it is possible to rearrange `s` such that no two adjacent characters are the same. Otherwise, return `False`. # Example ```python print(canRearrange(\\"aabb\\")) # True print(canRearrange(\\"aaab\\")) # False print(canRearrange(\\"a1b1\\")) # True ``` # Notes - You may assume that the string `s` contains at least one character. - The input string `s` can contain any combination of lowercase English letters and digits.","solution":"from collections import Counter import heapq def canRearrange(s: str) -> bool: Determine if characters in string s can be rearranged such that no two adjacent characters are the same. # Get frequency count of each character count = Counter(s) # Create a max heap based on character frequency max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) # Greedily try to place characters prev_freq, prev_char = 0, \'\' while max_heap: freq, char = heapq.heappop(max_heap) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Place the current character prev_freq, prev_char = freq + 1, char # If we placed all characters successfully, return True return prev_freq == 0"},{"question":"You are given a list of strings words containing lowercase English alphabets. A permutation of the list is considered special if every adjacent pair of words in the permutation differ by exactly one character. Two words differ by exactly one character if the length of both words is the same and there is exactly one position at which the corresponding characters are different. Determine if such a special permutation exists and return a boolean value indicating the result. Example 1: Input: words = [\\"abc\\", \\"acc\\", \\"bcc\\"] Output: True Explanation: One possible special permutation is [\\"abc\\", \\"acc\\", \\"bcc\\"] where each adjacent pair differ by exactly one character. Example 2: Input: words = [\\"abc\\", \\"def\\"] Output: False Explanation: There is no special permutation where adjacent pairs differ by exactly one character. Example 3: Input: words = [\\"abc\\", \\"abe\\", \\"aec\\"] Output: True Explanation: One possible special permutation is [\\"abc\\", \\"abe\\", \\"aec\\"]. Example 4: Input: words = [\\"a\\", \\"b\\"] Output: True Explanation: The only possible special permutation is [\\"a\\", \\"b\\"], where the adjacent pair differ by exactly one character. Constraints: 2 <= words.length <= 100 1 <= words[i].length <= 100","solution":"from itertools import permutations def differs_by_one_char(w1, w2): Helper function to determine if two words differ by exactly one character. if len(w1) != len(w2): return False count = 0 for c1, c2 in zip(w1, w2): if c1 != c2: count += 1 if count > 1: return False return count == 1 def special_permutation_exists(words): Determines if there exists a permutation of words where every adjacent pair of words differs by exactly one character. for perm in permutations(words): special = True for i in range(len(perm) - 1): if not differs_by_one_char(perm[i], perm[i + 1]): special = False break if special: return True return False"},{"question":"#Task: Write a function `expand_full_name` that accepts a list of email addresses and returns a list of dictionaries. Each dictionary should contain the email address and the recipient\'s full name, which can be obtained by querying an external API. Example: ```python >>> emails = [\'alice@example.com\', \'bob@sample.com\'] >>> expand_full_name(emails) [{\'email\': \'alice@example.com\', \'full_name\': \'Alice Johnson\'}, {\'email\': \'bob@sample.com\', \'full_name\': \'Bob Smith\'}] ``` External API Information: # Endpoint: You can use the following endpoint to fetch user information: ```url GET https://api.example.com/user_info?email=<email_address> ``` # JSON Response: ```json { \\"email\\": \\"alice@example.com\\", \\"full_name\\": \\"Alice Johnson\\" } ``` Libraries/Recommendations: # Python: * `urllib.request.urlopen`: To open and read webpages. * `json`: To parse JSON data from the API response. Notes: * Make sure to handle potential errors such as network issues, invalid email addresses, or unavailable API responses. * The order of the output list should match the order of email addresses given in the input list. * If the API does not return a full name for a particular email, set the `full_name` value to `None`.","solution":"import urllib.request import json def expand_full_name(emails): This function accepts a list of email addresses and returns a list of dictionaries. Each dictionary contains the email address and the recipient\'s full name. result = [] base_url = \\"https://api.example.com/user_info?email=\\" for email in emails: try: response = urllib.request.urlopen(f\\"{base_url}{email}\\") data = json.loads(response.read()) full_name = data.get(\\"full_name\\", None) except (urllib.error.URLError, json.JSONDecodeError): full_name = None result.append({\\"email\\": email, \\"full_name\\": full_name}) return result"},{"question":"You are given an array of integers and a target sum. Your task is to find all unique pairs of integers in the array that add up to the target sum. Return the pairs as an array of arrays, where each sub-array contains a pair of integers. Ensure that the pairs are in non-descending order within each pair, and the pairs themselves are in non-descending order. If no such pairs exist, return an empty array. For example: ```python input: array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10 output: [[1, 9], [2, 8], [3, 7], [4, 6]] input: array = [1, 1, 2, 45, 46], target = 47 output: [[1, 46], [2, 45]] input: array = [1, 2, 3, 4, 5], target = 100 output: [] ``` #Input - An array of integers (no duplicates) and of length `1 <= array.length <= 100`. - An integer `target` where `-10^6 <= target <= 10^6`. #Output - Return an array of arrays, where each sub-array contains a pair of integers that add up to the target sum. If no such pairs exist, return an empty array.","solution":"def find_pairs_with_sum(array, target): Finds all unique pairs in the array that add up to the target sum. Parameters: array (list of int): The array of integers. target (int): The target sum. Returns: list of list of int: A list of pairs that add up to the target sum, sorted as specified. array.sort() pairs = [] seen = set() for number in array: complement = target - number if complement in seen: pairs.append([min(number, complement), max(number, complement)]) seen.add(number) # Ensure unique pairs only and sorted pairs = list(map(list, set(map(tuple, pairs)))) pairs.sort() return pairs"},{"question":"You are given a sequence of parentheses. Your task is to determine if the parentheses are balanced. A sequence of parentheses is balanced if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. For example, the sequences `()`, `(())`, and `()()` are balanced, while the sequences `(`, `)`, and `(()` are not balanced. Write a function that takes a sequence of parentheses as input and determines if the sequence is balanced. -----Input----- The first line contains a single integer t (1 leq t leq 10^3) — the number of test cases. Then, there are t independent sets of input data. Each set consists of a single line containing a string of parentheses with length n (1 leq n leq 10^5). It is guaranteed that the sum of n for all test cases does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if the sequence is balanced and \\"NO\\" otherwise. -----Example----- Input 5 () (()) ()() ( )( Output YES YES YES NO NO -----Note----- In the first test case, the sequence `()` is balanced because there is one opening parenthesis and one closing parenthesis, and they are properly nested. In the second test case, the sequence `(())` is balanced because the pairs of parentheses are properly nested. In the third test case, the sequence `()()` is balanced because there are two pairs of parentheses, and each pair is properly nested. In the fourth test case, the sequence `(` is not balanced because there is one opening parenthesis but no corresponding closing parenthesis. In the fifth test case, the sequence `)` is not balanced because there is one closing parenthesis but no corresponding opening parenthesis.","solution":"def is_balanced_parentheses(sequence): Determines if the given parentheses sequence is balanced. Parameters: sequence (str): A string consisting of parentheses. Returns: str: \\"YES\\" if the sequence is balanced, \\"NO\\" otherwise. stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if stack: stack.pop() else: return \\"NO\\" if len(stack) == 0: return \\"YES\\" else: return \\"NO\\" def check_parentheses_sequences(t, sequences): Determines if multiple sequences of parentheses are balanced. Parameters: t (int): Number of test cases. sequences (list of str): A list of strings, each containing a sequence of parentheses. Returns: list of str: A list containing the results for each test case, \\"YES\\" or \\"NO\\". results = [] for seq in sequences: results.append(is_balanced_parentheses(seq)) return results"},{"question":"**Problem Statement:** You have been tasked with creating a library management system for keeping track of different functions related to book borrowing. Your system should be able to: 1. Record when a book is borrowed. 2. Record when a book is returned. 3. Count the number of times a specific book has been borrowed. 4. Retrieve the currently borrowed books. 5. Retrieve a history of all borrow and return operations. Write a Python class `Library` that performs the following functions: 1. `borrow_book(book: str, borrower: str, date: str)`: Logs that a book has been borrowed by a specific person on a given date. 2. `return_book(book: str, date: str)`: Logs that a book has been returned on a specified date. If the book was not borrowed, it should raise an error. 3. `book_borrow_count(book: str) -> int`: Returns the number of times a specific book has been borrowed. 4. `currently_borrowed_books() -> List[str]`: Returns a list of books that are currently borrowed. 5. `borrow_return_history() -> List[Tuple[str, str, str]]`: Returns a history of all borrow and return operations in the format `(action, book, date)`. Example: ```python library = Library() library.borrow_book(\\"The Catcher in the Rye\\", \\"John Doe\\", \\"2023-01-01\\") library.borrow_book(\\"1984\\", \\"Jane Doe\\", \\"2023-01-02\\") library.return_book(\\"The Catcher in the Rye\\", \\"2023-01-15\\") print(library.book_borrow_count(\\"1984\\")) # Should output 1 print(library.currently_borrowed_books()) # Should output [\\"1984\\"] print(library.borrow_return_history()) # Should output [(\\"borrow\\", \\"The Catcher in the Rye\\", \\"2023-01-01\\"), (\\"borrow\\", \\"1984\\", \\"2023-01-02\\"), (\\"return\\", \\"The Catcher in the Rye\\", \\"2023-01-15\\")] ``` **Notes:** - You can assume that the `book` and `borrower` are always provided as non-empty strings. - The `date` will be provided in `YYYY-MM-DD` format and you can assume it is always valid. - Ensure to handle cases where a book is returned but it was not borrowed. Raise a ValueError in such cases.","solution":"class Library: def __init__(self): self.borrow_log = [] self.return_log = [] self.borrow_count = {} self.currently_borrowed = {} def borrow_book(self, book: str, borrower: str, date: str): self.borrow_log.append((book, borrower, date)) if book in self.borrow_count: self.borrow_count[book] += 1 else: self.borrow_count[book] = 1 self.currently_borrowed[book] = borrower def return_book(self, book: str, date: str): if book not in self.currently_borrowed: raise ValueError(\\"Book not borrowed\\") self.return_log.append((book, date)) del self.currently_borrowed[book] def book_borrow_count(self, book: str) -> int: return self.borrow_count.get(book, 0) def currently_borrowed_books(self) -> list: return list(self.currently_borrowed.keys()) def borrow_return_history(self) -> list: history = [] for book, borrower, date in self.borrow_log: history.append((\\"borrow\\", book, borrower, date)) for book, date in self.return_log: history.append((\\"return\\", book, date)) return history"},{"question":"You are given an array of integers where each element represents the maximum number of steps that can be jumped forward from that element. Implement a function `canJump(nums)` that determines if it\'s possible to reach the last index starting from the first index. Example: Input: nums = [2,3,1,1,4] Output: True Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Input: nums = [3,2,1,0,4] Output: False Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. Note: - You can assume the elements in the array are non-negative. - The array will have length at most 10,000.","solution":"def canJump(nums): Determines if it\'s possible to reach the last index starting from the first index. Args: nums (List[int]): List of integers where each element represents the maximum number of steps that can be jumped forward from that element. Returns: bool: True if it\'s possible to reach the last index, False otherwise. max_reach = 0 for i, num in enumerate(nums): if i > max_reach: return False max_reach = max(max_reach, i + num) return True"},{"question":"Given a list of `n` integers, write a function that finds the continuous subarray within an array (containing at least one number) which has the largest product. **Input:** A single list of integers which can be positive, negative, or zero. **Output:** Return the largest product of a contiguous subarray. **Examples:** ```python max_product_subarray([2, 3, -2, 4]) => 6 max_product_subarray([-2, 0, -1]) => 0 max_product_subarray([-2, 3, -4]) => 24 ``` **Note:** The function should be efficient, with a time complexity of at least O(n). Take into account the handling of negative values and zeros which can drastically change the product results.","solution":"def max_product_subarray(nums): Returns the largest product of a contiguous subarray within the array nums. :param nums: List of integers :return: Largest product of contiguous subarray if not nums: return 0 max_product = min_product = global_max = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) global_max = max(global_max, max_product) return global_max"},{"question":"Write a function that determines if a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. If the input string can be rearranged to form a palindrome, return the length of the longest possible palindrome. Otherwise, return -1. For example: ```python longest_palindrome_length(\\"racecar\\") == 7 # the string is already a palindrome longest_palindrome_length(\\"carrace\\") == 7 # the string can be rearranged to form \\"racecar\\" or \\"carrace\\" longest_palindrome_length(\\"daily\\") == -1 # no palindrome can be formed longest_palindrome_length(\\"aaaabbbcc\\") == 7 # the string can be rearranged to form \\"abcacba\\" or similar longest_palindrome_length(\\"abcd\\") == -1 # no palindrome can be formed ``` Explanation: - For the string to be rearrangeable into a palindrome, at most one character can have an odd frequency (for odd-length palindromes), and all other characters must have even frequencies. For even-length palindromes, all characters must have even frequencies.","solution":"def longest_palindrome_length(s): Determines if the given string can be rearranged to form a palindrome and returns the length of the longest possible palindrome. If the string cannot be rearranged to form a palindrome, returns -1. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return -1 else: return len(s)"},{"question":"Given a string consisting of alphabetic characters and spaces, write a function to check if the string is a “palindrome sentence”. A string is considered a palindrome sentence if it reads the same backward as forward when we ignore the cases and spaces. For example: - \\"A man a plan a canal Panama\\" is a palindrome sentence because when we ignore the spaces and cases, it reads \\"amanaplanacanalpanama\\" which is the same backward. - \\"Hello World\\" is not a palindrome sentence because when we ignore the spaces and cases, it reads \\"helloworld\\", which is not the same backward. Your function should return True if the input string is a palindrome sentence, and False otherwise.","solution":"def is_palindrome_sentence(s): Check if the given string is a palindrome sentence, ignoring cases and spaces. :param s: input string :return: True if the sentence is a palindrome, False otherwise # Normalize the string: remove spaces and convert to lowercase normalized_s = \'\'.join(c.lower() for c in s if c.isalpha()) # Check if the normalized string is equal to its reverse return normalized_s == normalized_s[::-1]"},{"question":"Neil is passionate about astronomy and loves identifying constellations in the night sky. A constellation can be represented as a set of stars, each located at integer coordinates in a 2D plane. Neil recently learned about right triangles and is excited to find right triangles in the sky. Given a set of stars, Neil wants to count the number of distinct right triangles that can be formed where the stars in each triangle are distinct and no three stars are collinear unless they form a right angle at one of the stars. Your task is to help Neil count such right triangles. Assume that right triangles are distinct if their vertices are different, regardless of their orientation or size. ----- Input: ----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of stars. - Each of the next N lines contains two space-separated integers x and y, representing the coordinates of a star in the night sky. ----- Output: ----- For each test case, print a single line containing the number of distinct right triangles that can be formed. ----- Constraints: ----- - 1 leq T leq 10 - 3 leq N leq 100 - |x|, |y| leq 10^3 ----- Sample Input: ----- 1 4 0 0 0 1 1 0 1 1 ----- Sample Output: ----- 4","solution":"from itertools import combinations def count_right_triangles(stars): count = 0 for p1, p2, p3 in combinations(stars, 3): # Squares of distances between points d2 = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 d3 = (p1[0] - p3[0]) ** 2 + (p1[1] - p3[1]) ** 2 d4 = (p2[0] - p3[0]) ** 2 + (p2[1] - p3[1]) ** 2 # Check if it forms a right triangle if d2 + d3 == d4 or d2 + d4 == d3 or d3 + d4 == d2: count += 1 return count def solve(input_data): lines = input_data.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 results = [] for _ in range(T): N = int(lines[index]) index += 1 stars = [] for i in range(N): x, y = map(int, lines[index].split()) index += 1 stars.append((x, y)) results.append(count_right_triangles(stars)) return results"},{"question":"An image sharing application lets users post pictures and tag them with relevant hashtags. The application\'s backend needs a functionality to determine the top N most frequently occurring hashtags over a given period of time. Write a function `topNHashtags` that takes in two arguments: - `posts`, a list of post objects, where each post has two attributes: - `timestamp`, an integer representing the time of the post (in UNIX epoch format). - `hashtags`, a list of strings where each string is a hashtag used in the post. - `N`, an integer representing the number of top hashtags to return. The function should return a list of the top N most frequently occurring hashtags during the given period, sorted by frequency in descending order. If two hashtags have the same frequency, they should appear in alphabetical order. Also note: - Timestamp values will be non-negative integers and unique for each post. - Each post can have one or more hashtags, and hashtags consist of alphanumeric characters and the \'#\' symbol. - The function should handle an empty list of posts by returning an empty list. Example: Input: ```python posts = [ {\\"timestamp\\": 1609459200, \\"hashtags\\": [\\"#happy\\", \\"#newyear\\", \\"#2021\\"]}, {\\"timestamp\\": 1609545600, \\"hashtags\\": [\\"#newyear\\", \\"#resolutions\\"]}, {\\"timestamp\\": 1609632000, \\"hashtags\\": [\\"#2021\\", \\"#goals\\", \\"#happy\\"]} ] N = 2 ``` Output: ```python [\'#2021\', \'#happy\'] ```","solution":"def topNHashtags(posts, N): Returns the top N most frequently occurring hashtags in the given posts. :param posts: List of post objects, where each post has a \'timestamp\' and \'hashtags\'. :param N: The number of top hashtags to return. :return: List of top N hashtags. from collections import Counter hashtag_counter = Counter() for post in posts: hashtags = post.get(\'hashtags\', []) hashtag_counter.update(hashtags) # Sort hashtags first by frequency (descending) then alphabetically sorted_hashtags = sorted(hashtag_counter.items(), key=lambda x: (-x[1], x[0])) return [hashtag for hashtag, count in sorted_hashtags[:N]]"},{"question":"You are given the task of creating a unique password generator based on a given set of rules. The password is a mix of lowercase letters and digits. For added complexity, each password needs to include at least one lowercase letter and one numeric digit, and it should be of a specified length. Your job is to write a function that generates such a password. The number of passwords to generate and the length of each password is specified as input. ----- Input ----- The first line contains a single integer T (1 ≤ T ≤ 100) — the number of password requests. The next T lines each contain a single integer L (6 ≤ L ≤ 50) — the length of the password to generate for that request. ----- Output ----- Print T lines, each containing a randomly generated password of length L that includes at least one lowercase letter and one digit. ----- Example Input ----- 3 8 12 6 ----- Example Output ----- a1bcdefg h4j2klmn3opq 1a2b3c **Note**: - Each password must be exactly L characters long. - Each password must contain at least one lowercase letter and one digit. - The output passwords in the example are just illustrative; actual outputs will vary due to the randomness of generation.","solution":"import random import string def generate_passwords(requests): Generate passwords according to the given specifications. Parameters: requests (list of int): A list where each element is the length of the password to generate. Returns: list of str: A list of generated passwords. passwords = [] for L in requests: # Ensure we have at least one lowercase letter and one digit password = [ random.choice(string.ascii_lowercase), random.choice(string.digits) ] remaining_length = L - 2 characters = string.ascii_lowercase + string.digits password += random.choices(characters, k=remaining_length) random.shuffle(password) passwords.append(\'\'.join(password)) return passwords"},{"question":"You are given a string containing an arithmetic expression in Reverse Polish Notation (RPN). Your task is to write a function that evaluates the expression and returns the result. The expression will only contain integers and the operators `+`, `-`, `*`, and `/`. The division operator `/` should perform integer division, truncating towards zero. # Examples `evalRPN([\'2\', \'1\', \'+\', \'3\', \'*\'])` returns `9` Explanation: ((2 + 1) * 3) = 9 `evalRPN([\'4\', \'13\', \'5\', \'/\', \'+\'])` returns `6` Explanation: (4 + (13 / 5)) = 6 (13 / 5 = 2.6 which is truncated to 2) `evalRPN([\'10\', \'6\', \'9\', \'3\', \'+\', \'-11\', \'*\', \'/\', \'*\', \'17\', \'+\', \'5\', \'+\'])` returns `22` Explanation: 1. (10 * (6 / ((9 + 3) * -11))) * 17 + 5 2. (10 * (6 / (12 * -11))) * 17 + 5 3. (10 * (6 / -132)) * 17 + 5 4. (10 * 0) * 17 + 5 5. 0 * 17 + 5 6. 0 + 5 7. 5 # Function Signature ```python def evalRPN(tokens: List[str]) -> int: ``` # Input - `tokens` : List of strings containing the RPN expression (1 <= len(tokens) <= 104) # Output - Integer result of the expression # Constraints - The numbers in the input are valid integers and the operations are one of `+`, `-`, `*`, `/`. - You may assume that the input is always valid (it always results in a valid expression).","solution":"from typing import List def evalRPN(tokens: List[str]) -> int: Evaluates the Reverse Polish Notation (RPN) expression and returns the result. Supports `+`, `-`, `*`, and `/` operations. stack = [] for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': # perform integer division truncating towards zero stack.append(int(a / b)) else: stack.append(int(token)) return stack[0]"},{"question":"You are given a list of integers, where each integer appears twice except for one integer that appears only once. Write a function to find the integer that appears only once. Your solution should make use of bitwise operations for optimal performance. You are not allowed to use extra memory for storing another data structure. For example: ```haskell findUnique([4, 1, 2, 1, 2]) = 4 -- The unique integer is 4 findUnique([2, 2, 3, 2, 2, 4, 4, 1, 1]) = 3 -- The unique integer is 3 findUnique([7, 3, 5, 4, 5, 3, 4]) = 7 -- The unique integer is 7 ``` More examples in the test cases. Best of luck! If you enjoyed this, consider trying \\"Everybody has a twin\\" for a different type of challenge.","solution":"def findUnique(numbers): Finds and returns the element that appears only once in the list. All other elements appear twice. Uses bitwise XOR operation for optimal performance. unique = 0 for num in numbers: unique ^= num return unique"},{"question":"# Task Write a function to determine if a given large integer is a palindrome. In this problem, your input is a string representation of this large integer, and you must return `true` if it is palindromic, otherwise return `false`. # Example For ``` num = \\"12345678987654321\\" ``` the output should be `true`. For ``` num = \\"1234567890987654321\\" ``` the output should be `false`. # Input/Output - `[input]` string `num` Constraints: `1 ≤ num.length ≤ 100000` - `[output]` a boolean value `true` if the number is a palindrome, `false` otherwise.","solution":"def is_palindrome(num): Determines if a given large integer (as a string) is a palindrome. Parameters: num (str): A string representation of a large integer, where 1 ≤ num.length ≤ 100000 Returns: bool: True if the number is a palindrome, False otherwise. return num == num[::-1]"},{"question":"In a competitive programming contest, the participants are given an array, and they need to perform a series of operations on it. Each operation consists of selecting a subarray and reversing it. The goal is to transform the initial array into a target array using the minimum number of operations. You are given an initial array and a target array of the same length. Write a program to find the minimum number of subarray reversals required to transform the initial array into the target array. -----Input:----- - The first line of input contains a single integer ( n ) (1 ≤ ( n ) ≤ ( 100,000 )), the number of elements in the arrays. - The second line contains ( n ) integers representing the initial array. - The third line contains ( n ) integers representing the target array. -----Output:----- Output a single integer, the minimum number of subarray reversals needed. If it\'s not possible to transform the initial array into the target array, output -1. -----Sample Input:----- 5 1 2 3 4 5 5 4 3 2 1 -----Sample Output:----- 1 -----Explanation:----- In the sample, reversing the entire array [1, 2, 3, 4, 5] results in [5, 4, 3, 2, 1], which is exactly the target array. So, the answer is 1. Note that the arrays consist of distinct integers and can be always transformed into each other by some number of reversals if both have the same elements.","solution":"def minimum_subarray_reversals(n, initial, target): Returns the minimum number of subarray reversals needed to transform the initial array into the target array, or -1 if it\'s not possible. Parameters: n (int): the number of elements in the array initial (list of int): the initial array target (list of int): the target array Returns: int: the minimum number of subarray reversals required or -1 if not possible if sorted(initial) != sorted(target): return -1 operations = 0 i = 0 while i < n: if initial[i] != target[i]: j = i while initial[j] != target[i]: j += 1 initial[i:j+1] = reversed(initial[i:j+1]) operations += 1 i += 1 return operations"},{"question":"=====Problem Statement===== Given a list of space-separated integers, your task is to determine and print the minimum number of moves required to make all elements equal. A move is incrementing or decrementing an element by 1. =====Input Format===== The first line contains a single integer n, the number of elements in the list. The second line contains n space-separated integers representing the list elements. =====Constraints===== 1 ≤ n ≤ 1000 -1000 ≤ list[i] ≤ 1000 =====Output Format===== Output a single integer representing the minimum number of moves needed to make all the list elements equal.","solution":"def min_moves_to_equal_elements(n, lst): Determines the minimum number of moves required to make all elements in the list equal. Parameters: n (int): The number of elements in the list. lst (list of int): The list of integers. Returns: int: The minimum number of moves required. # Finding the median allows us to minimize the sum of absolute deviations. lst.sort() median = lst[n // 2] total_moves = sum(abs(x - median) for x in lst) return total_moves"},{"question":"In a small coastal town, there is an ancient lighthouse that uses a unique signaling system to guide boats safely to the shore. The lighthouse has a sequence of lights that turn on and off according to a specific pattern every minute. The pattern is represented by a binary string of length n, where \'1\' indicates that the light is on, and \'0\' indicates that the light is off. The pattern repeats itself every n minutes. This lighthouse is special because it supports a custom light controller that can shift the pattern by a certain number of positions to the left or right. To shift the pattern to the right by k positions, each light moves to the position k places to its right, wrapping around to the start when they fall off the end. Similarly, to shift the pattern to the left by k positions, each light moves to the position k places to its left, wrapping around to the end when they fall off the start. For example, if the current pattern is \\"1011001\\" and we shift right by 2 positions, the resulting pattern would be \\"0110110\\". You want to find if it is possible to shift the pattern such that it becomes a palindrome. A palindrome is a sequence that reads the same backward as forward. Write a program that takes as input the current pattern and returns \\"YES\\" if it is possible to create a palindromic pattern by shifting it and \\"NO\\" otherwise. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the pattern. The second line of the input contains a binary string of length n — the initial pattern of the lighthouse lights. -----Output----- Print \\"YES\\" (without quotes) if it is possible to create a palindromic pattern by shifting the initial pattern either to the left or to the right. Print \\"NO\\" (without quotes) otherwise. -----Examples----- Input 7 1011001 Output YES Input 5 11011 Output YES Input 4 1010 Output NO -----Note----- In the first example, shifting the pattern \\"1011001\\" to the right by 2 positions results in \\"0110110\\", which is a palindrome. In the second example, the initial pattern \\"11011\\" is already a palindrome. In the third example, it is not possible to create a palindrome by shifting the pattern \\"1010\\".","solution":"def can_be_palindromic(n, pattern): Determines if the binary string pattern can be shifted to form a palindrome. Parameters: n (int): Length of the pattern pattern (str): Binary string representing the initial pattern of the lights Returns: str: \\"YES\\" if a palindromic pattern can be formed by shifting, \\"NO\\" otherwise def is_palindrome(s): return s == s[::-1] for k in range(n): if is_palindrome(pattern[k:] + pattern[:k]): return \\"YES\\" return \\"NO\\""},{"question":"Given a binary tree, you need to write three functions to achieve the following tasks: 1. Define a Node class to represent a node in the binary tree. This class should have attributes for the value of the node, and pointers to its left and right children. 2. Implement a function `lowest_common_ancestor(root, node1, node2)` that takes three arguments: the root of the binary tree and two nodes, `node1` and `node2`. The function should return the lowest common ancestor (LCA) of `node1` and `node2` in the binary tree. The LCA is defined as the deepest node that is an ancestor of both `node1` and `node2`. 3. Implement a function `is_valid_bst(root)` that takes the root of a binary tree and returns `True` if the tree is a valid Binary Search Tree (BST), and `False` otherwise. A valid BST is defined as a tree where the value of every node in the left subtree is less than the value of the root, and the value of every node in the right subtree is greater than the value of the root; this must hold true recursively for all nodes in the tree. 4. Implement a function `level_order_traversal(root)` that takes the root of the binary tree and returns a list of lists, where each inner list contains the values of the nodes at that level of the tree. This is a breadth-first traversal of the tree. Example: ```python # Define the structure of a node class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right # Task 2 def lowest_common_ancestor(root, node1, node2): :param root: Node, the root of the binary tree :param node1: Node, first node :param node2: Node, second node :return: Node, the lowest common ancestor of node1 and node2 pass # Task 3 def is_valid_bst(root): :param root: Node, the root of the binary tree :return: bool, True if the tree is a valid BST, False otherwise pass # Task 4 def level_order_traversal(root): :param root: Node, the root of the binary tree :return: List[List[int]], the level order traversal of the tree pass # Example Usage root = Node(3) root.left = Node(1) root.right = Node(4) root.left.left = Node(0) root.left.right = Node(2) # Should return the node with value 1 print(lowest_common_ancestor(root, root.left.left, root.left.right).value) # Should return True print(is_valid_bst(root)) # Should return [[3], [1, 4], [0, 2]] print(level_order_traversal(root)) ``` Note: You may assume that `node1` and `node2` are unique and exist in the tree. You can assume that all tree values are integers.","solution":"class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def lowest_common_ancestor(root, node1, node2): if not root or root == node1 or root == node2: return root left = lowest_common_ancestor(root.left, node1, node2) right = lowest_common_ancestor(root.right, node1, node2) if left and right: return root return left if left else right def is_valid_bst(root): def helper(node, lower=float(\'-inf\'), upper=float(\'inf\')): if not node: return True val = node.value if val <= lower or val >= upper: return False if not helper(node.right, val, upper): return False if not helper(node.left, lower, val): return False return True return helper(root) def level_order_traversal(root): if not root: return [] queue = [root] result = [] while queue: level = [] next_queue = [] for node in queue: level.append(node.value) if node.left: next_queue.append(node.left) if node.right: next_queue.append(node.right) result.append(level) queue = next_queue return result"},{"question":"# Task Write a function `find_triplets(arr, n)` that takes in an array `arr` of `n` integers and returns a list of all unique triplets `[a, b, c]` in `arr` such that the sum of the triplet is zero. Each triplet must be sorted in ascending order, and the list of triplets should be sorted lexicographically. # Example For `arr = [-1, 0, 1, 2, -1, -4]`, the result should be `[[-1, -1, 2], [-1, 0, 1]]`. # Input/Output - `[input]` integer array `arr` An array of integers. 1 ≤ n ≤ 3000 - `[output]` a list of lists of integers A list of sorted integer triplets that sum up to zero, sorted lexicographically.","solution":"def find_triplets(arr, n): arr.sort() triplets = set() for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == 0: triplets.add((arr[i], arr[left], arr[right])) left += 1 right -= 1 while left < right and arr[left] == arr[left - 1]: left += 1 while left < right and arr[right] == arr[right + 1]: right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return [list(triplet) for triplet in sorted(triplets)] # Example usage: # arr = [-1, 0, 1, 2, -1, -4] # n = len(arr) # print(find_triplets(arr, n)) # Output should be [[-1, -1, 2], [-1, 0, 1]]"},{"question":"You are given an array of integers nums and an integer k. A continuous subarray is called nice if it contains exactly k odd numbers. Return the number of nice subarrays. Example 1: Input: nums = [1,1,2,1,1], k = 3 Output: 2 Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1]. Example 2: Input: nums = [2,4,6], k = 1 Output: 0 Explanation: There are no sub-arrays with 1 odd number. Example 3: Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2 Output: 16 Explanation: The sub-arrays with 2 odd numbers are [2,2,2,1,2], [2,2,1,2,2], [2,1,2,2,2], [1,2,2,2,2], [2,2,2,1,2,2], [2,2,1,2,2,2], [2,1,2,2,2,2], [1,2,2,2,2,2], [2,2,1,2,2], [2,1,2,2,2], [1,2,2,2,2], [2,1,2,2], [1,2,2,2], [2,2,1,2], [2,1,2,2], and [1,2,2]. Constraints: 1 <= nums.length <= 50000 1 <= nums[i] <= 10^5 1 <= k <= nums.length","solution":"def number_of_nice_subarrays(nums, k): Returns the number of nice subarrays with exactly k odd numbers. odd_count = {0: 1} odd_accum = 0 result = 0 for num in nums: if num % 2 == 1: odd_accum += 1 if odd_accum - k in odd_count: result += odd_count[odd_accum - k] if odd_accum in odd_count: odd_count[odd_accum] += 1 else: odd_count[odd_accum] = 1 return result"},{"question":"You are given a string containing just the characters \'(\' and \')\'. Write a function to determine if the string is balanced, meaning each opening parenthesis has a corresponding closing parenthesis and the pairs are correctly nested. Return `True` if the string is balanced, otherwise return `False`. Examples: Example 1: Input: \\"()\\" Output: True Explanation: There is one opening parenthesis and one closing parenthesis, making the string balanced. Example 2: Input: \\"(())\\" Output: True Explanation: The string has properly nested pairs, making it balanced. Example 3: Input: \\"(()\\" Output: False Explanation: There are more opening parentheses than closing ones, making it unbalanced. Example 4: Input: \\"())(\\" Output: False Explanation: The closing and opening pairs are not properly nested, making the string unbalanced. Notes: - The input string will only contain the characters \'(\' and \')\'. - The string can be empty and in that case, it is considered balanced.","solution":"def is_balanced(s): Determines if the input string of parentheses is balanced. Args: s (str): input string containing only \'(\' and \')\' Returns: bool: True if the string is balanced, False otherwise stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Given two strings s1 and s2, write a function that determines if s1 can be transformed into s2 by rearranging its characters (i.e., checking if s1 is an anagram of s2). If the lengths of the strings do not match, the function should return false. Examples: ```python is_anagram(\\"listen\\", \\"silent\\") => true is_anagram(\\"triangle\\", \\"integral\\") => true is_anagram(\\"apple\\", \\"pale\\") => false ```","solution":"def is_anagram(s1, s2): Determines if string s1 can be transformed into string s2 by rearranging the characters (i.e., check if s1 is an anagram of s2). Parameters: - s1 (str): First string. - s2 (str): Second string. Returns: - bool: True if s1 is an anagram of s2, False otherwise. if len(s1) != len(s2): return False return sorted(s1) == sorted(s2)"},{"question":"Task You are given a string containing characters \'L\' (Left), \'R\' (Right), and \'U\' (Up), \'D\' (Down). Determine if the sequence of moves will result in returning to the original starting position on a grid after executing all the moves. The grid is infinite, and initially, you are located at the coordinate (0, 0). # Example For `moves = \\"UD\\"`, the output should be `true`; For `moves = \\"LL\\"`, the output should be `false`; # Input/Output - `[input]` string `moves` Constraints: `1 ≤ moves.length ≤ 1000.` - `[output]` a boolean value `true` if the moves sequence returns to the starting position, `false` otherwise.","solution":"def judge_circle(moves): Determines if the sequence of moves returns to the original starting position on a grid. Args: moves (str): string containing the moves Returns: bool: True if the moves return to the starting position, False otherwise x, y = 0, 0 for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return x == 0 and y == 0"},{"question":"You are given a string containing both letters and digits. Your task is to write a function, `separate_and_sort()`, that separates the letters from the digits, sorts the letters alphabetically and the digits in ascending order, and then concatenates them back together with letters first followed by digits. For example: ```python separate_and_sort(\\"d4a5e9c1b2\\") ``` should return: ```python \\"abcde12459\\" ``` Here is the function signature to implement: ```python def separate_and_sort(s: str) -> str: # your code here ``` **Constraints:** - The input string will only contain alphanumeric characters. - The input string will have at least one character and at most 100 characters. - Alphabetic characters in the input string are case-insensitive, but the output should contain lowercase letters only.","solution":"def separate_and_sort(s: str) -> str: letters = sorted([char.lower() for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(letters + digits)"},{"question":"You are given a list of integers A_1, A_2, dots, A_N. You need to perform a sequence of operations to obtain a new list B of the same length. The operations you can perform are as follows: 1. Replace any element A_i with its square A_i^2. 2. Replace any element A_i with its negative -A_i. Your goal is to maximize the sum of the elements of the new list B while ensuring that the sum of the elements of B does not equal 0. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers A_1, A_2, dots, A_N. -----Output----- For each test case, print a single line containing N space-separated integers B_1, B_2, dots, B_N such that B_i is either (A_i), (A_i^2), or (-A_i). If there are multiple valid outputs, you may print any of them. -----Constraints----- - 1 le T le 10^5 - 1 le N le 10^5 - -10^9 le A_i le 10^9 for each valid i - the sum of N for all test cases does not exceed 5 cdot 10^5 -----Subtasks----- Subtask #1 (20 points): - 1 le T le 200 - 1 le N le 10 Subtask #2 (30 points): - 1 le T le 1,000 - N le 2,000 Subtask #3 (50 points): original constraints -----Example Input----- 3 4 -1 2 3 -4 5 0 0 -1 1 -1 3 1 -2 3 -----Example Output----- 1 4 9 -4 0 0 1 1 1 1 -2 9 -----Explanation----- Example case 1: By squaring the elements (2) and (3), we get {1, 4, 9, -4} with sum 10, which is not zero and is maximized. Example case 2: The sequence {0, 0, 1, 1, 1} has sum 3, which is maximized. Example case 3: The sequence {1, -2, 9} has sum 8, which is not zero and is maximized.","solution":"def maximize_B(N, A): This function maximizes the sum of elements in list B by replacing the elements of list A with their square, negative, or keeping them same, such that the sum of elements of B is non-zero and maximized. B = [] for a in A: if a > 0: B.append(a * a) elif a < 0: B.append(-a) else: B.append(a) # Check if sum is zero if sum(B) == 0: if 0 in B: B[B.index(0)] = 1 return B def process_input(input_lines): This function processes the input and returns the results for each test case. idx = 0 T = int(input_lines[idx]) idx += 1 results = [] for _ in range(T): N = int(input_lines[idx]) idx += 1 A = list(map(int, input_lines[idx].split())) idx += 1 B = maximize_B(N, A) results.append(\\" \\".join(map(str, B))) return results"},{"question":"Write a function that, given a square matrix (a 2D list) of integers, returns its transpose. The transpose of a matrix is obtained by swapping the rows with columns. For example, if `matrix` is: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Your function should return: ```python [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` # Function Signature ```python def transpose(matrix: List[List[int]]) -> List[List[int]]: ``` # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(transpose(matrix)) # Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]] ``` # Constraints - The input matrix is guaranteed to be non-empty and a square matrix. - The values in the matrix will be integers. - The matrix can be of any size (N x N) where 1 ≤ N ≤ 100.","solution":"from typing import List def transpose(matrix: List[List[int]]) -> List[List[int]]: Returns the transpose of the given square matrix. n = len(matrix) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): result[j][i] = matrix[i][j] return result"},{"question":"Background: Consider that you have been provided with a string that contains alphabets and numbers. However, all the alphabets have been jumbled up and the order is lost. Your task is to decode the original order of alphabets from the string by stringing together all the alphabets into a single string, while the numbers act as placeholders or breaks between the alphabetic characters and are ignored. ___ Task: Write a function that takes a string containing both alphabets and numbers. The function should extract all the alphabets from the given string and return a new string with the alphabets in the order they originally appeared. **Note**: The input string will contain at least one alphabet. Examples: ``` \\"a3b2c\\" => \\"abc\\" \\"1e5f6g\\" => \\"efg\\" \\"8h7i6\\" => \\"hi\\" ```","solution":"def extract_alphabets(s): Extracts and returns all alphabet characters from the input string `s` in the order they appear. :param s: The input string containing both alphabets and numbers. :return: A string with only the alphabetic characters from `s`. return \'\'.join([char for char in s if char.isalpha()])"},{"question":"=====Problem Statement===== The included code stub will read an integer, num, from STDIN. You must print the sum of all even numbers between 1 and num (inclusive). =====Example===== num = 10 The sum of even numbers between 1 and 10 is 2 + 4 + 6 + 8 + 10 = 30. =====Input Format===== The first line contains an integer num. =====Constraints===== 1≤num≤1000 =====Output Format===== Print the sum of all even numbers between 1 and num (inclusive).","solution":"def sum_even_numbers(num): Returns the sum of all even numbers between 1 and num (inclusive). return sum(i for i in range(1, num + 1) if i % 2 == 0)"},{"question":"Alex is planning to host a coding marathon and needs to set up a leaderboard. The leaderboard should rank participants based on their scores in descending order. In case two participants have the same score, they should be ranked based on their names in ascending alphabetical order. Alex has tasked you with writing a program to automate this process. -----Input----- The first line contains a single integer T, the number of test cases. Each test case starts with an integer N, the number of participants. The following N lines each contain a string (the participant\'s name) and an integer (the participant\'s score). -----Output----- For each test case, output the leaderboard for that test case. Each leaderboard should start with \'Case #i:\' (where i is the test case number, starting from 1). The subsequent lines should list the participants in their sorted order by their ranks. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - The participant\'s names are non-empty strings consisting only of English letters. - The participant\'s scores are integers between 0 and 1000. -----Example----- Input: 2 3 Alice 100 Bob 200 Charlie 100 4 Dan 150 Emily 150 Frank 100 George 100 Output: Case #1: Bob 200 Alice 100 Charlie 100 Case #2: Dan 150 Emily 150 Frank 100 George 100","solution":"def generate_leaderboard(test_cases): results = [] for case_no, (num_participants, participants) in enumerate(test_cases, 1): sorted_participants = sorted(participants, key=lambda x: (-x[1], x[0])) results.append(f\\"Case #{case_no}:\\") for name, score in sorted_participants: results.append(f\\"{name} {score}\\") return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx]) participants = [] idx += 1 for _ in range(N): name, score = lines[idx].rsplit(\' \', 1) participants.append((name, int(score))) idx += 1 test_cases.append((N, participants)) return test_cases def coding_marathon_leaderboard(input_data): test_cases = parse_input(input_data) return generate_leaderboard(test_cases)"},{"question":"You are given an integer array `nums` consisting of `n` integers. You need to perform a series of operations to make all the elements of the array equal. In one operation, you can select any element of the array and either increment or decrement it by 1. Your task is to determine the minimum number of operations required to make all the elements in the array equal. -----Input----- - The first line contains a single integer `n` (1 ≤ n ≤ 10^5), representing the number of elements in the array. - The second line contains `n` space-separated integers `nums[i]` (1 ≤ nums[i] ≤ 10^9), representing the elements of the array. -----Output----- - Output a single integer: the minimum number of operations required to make all elements of the array equal. -----Examples----- Input 5 1 2 3 4 5 Output 6 Input 3 7 7 7 Output 0 Input 4 1 5 7 1 Output 10 -----Note----- In the first example, you can make all the elements equal to 3 by performing the following operations: - Increment 1 to 3 (2 operations) - Increment 2 to 3 (1 operation) - Decrement 4 to 3 (1 operation) - Decrement 5 to 3 (2 operations) - So, the total number of operations is 2 + 1 + 1 + 2 = 6. In the second example, all elements are already equal, so no operations are needed. In the third example, one possible way to make all elements equal to 4: - Increment 1 to 4 (3 operations) - Decrement 5 to 4 (1 operation) - Decrement 7 to 4 (3 operations) - Increment 1 to 4 (3 operations) - So, the total number of operations is 3 + 1 + 3 + 3 = 10.","solution":"def min_operations_to_equal_elements(nums): Given an array of integers, find the minimum number of operations required to make all elements equal. Each operation can increment or decrement an element by 1. n = len(nums) nums.sort() median = nums[n // 2] # The median minimizes the sum of absolute deviations. operations = sum(abs(num - median) for num in nums) return operations"},{"question":"You have been given a list of events that consist of start and end times represented as `[ [start1, end1], [start2, end2], ... ]`. Your task is to determine the maximum number of events that can be attended if you can only attend one event at a time. The input list, `events`, is unsorted. The output should be the maximum count of non-overlapping events that a person can attend. For example, given the input: ``` events = [[1, 3], [2, 4], [3, 5], [7, 8]] ``` The output should be: ``` 2 ``` This is because one can only attend the events `[1, 3]` and `[7, 8]` without any overlap.","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events that can be attended. # Sort events by their end time events.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping events and the end time of the last selected event max_events = 0 last_end_time = float(\'-inf\') # Iterate through the sorted events for start, end in events: # If the current event starts after the last selected event ends if start > last_end_time: # Select this event max_events += 1 last_end_time = end return max_events"},{"question":"You are participating in a game where you need to collect precious stones. There are n stones in a line, each stone either precious or not. You are given an array a of length n where a_i is 1 if the i-th stone is precious, and 0 otherwise. You have m collectors to help you. During any collector’s turn, they can collect up to k stones in one go; however, they can only start collecting from the beginning of the uncollected section up until they reach an uncollected precious stone, which they must collect. After which, their turn ends. The collectors take turns alternatively starting from the first collector (collector 1). Your goal is to determine the minimum number of turns required to collect all the precious stones. For instance, if n = 6, a = [1, 0, 1, 1, 0, 1], m = 2, and k = 4, the optimal plan would be: - Collector 1 collects the first 3 stones in one go (including two precious stones). - Collector 2 collects the next 3 stones in one go (including the remaining two precious stones). In total, it\'s 2 turns to collect all precious stones. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Each test case has the following format: - The first line contains three integers n, m, and k (1 le n, k le 10^5, 1 le m le n) — the total number of stones, collectors, and the maximum number of stones a collector can collect in one turn. - The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 1), where a_i indicates whether the i-th stone is precious or not. The sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print the minimum number of turns required to collect all the precious stones. -----Example----- Input 4 6 2 4 1 0 1 1 0 1 5 3 2 1 0 1 0 1 3 1 3 1 1 1 5 2 5 0 0 0 0 1 Output 2 3 1 1","solution":"def min_turns_to_collect_precious_stones(t, test_cases): results = [] for case in test_cases: n, m, k = case[\'n\'], case[\'m\'], case[\'k\'] a = case[\'stones\'] turns = 0 precious_collected = 0 i = 0 while precious_collected < a.count(1): collector_turn = 0 while collector_turn < m: turns += 1 collected_stones = 0 while collected_stones < k and i < n: collected_stones += 1 if a[i] == 1: precious_collected += 1 i += 1 collector_turn += 1 if precious_collected >= a.count(1): break results.append(turns) return results"},{"question":"You are given a sequence of N integers. Your task is to determine if there exists a non-empty subsequence of the given sequence such that the sum of the elements of this subsequence is divisible by a given integer K. ---Input--- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and K. The second line of each test case contains N space-separated integers representing the sequence. ---Output--- For each test case, output \\"YES\\" if there exists a non-empty subsequence with a sum divisible by K, otherwise output \\"NO\\". ---Constraints--- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ 10^9 - -10^9 ≤ Elements of the sequence ≤ 10^9 ---Example--- Input: 3 5 3 1 2 3 4 5 4 6 1 2 3 5 3 2 1 -1 1 Output: YES YES YES ---Explanation--- Example case 1. We can pick the subsequence (3), whose sum is 3 which is divisible by 3. Example case 2. We can pick the subsequence (1, 2, 3), whose sum is 6 which is divisible by 6. Example case 3. We can pick the subsequence (1, -1), whose sum is 0 which is divisible by 2. Note: A subsequence is derived by deleting some or none of the elements without changing the order of the remaining elements.","solution":"def is_subsequence_sum_divisible(T, test_cases): def check_subsequence(N, K, sequence): # Using the properties of prefix sums and modulo arithmetic to find subsequence sum prefix_mods = set() current_sum = 0 for num in sequence: current_sum += num mod = current_sum % K if mod == 0 or mod in prefix_mods: return \\"YES\\" prefix_mods.add(mod) return \\"NO\\" results = [] for i in range(T): N, K = test_cases[i][0] sequence = test_cases[i][1] results.append(check_subsequence(N, K, sequence)) return results"},{"question":"Write a function that calculates the frequency of each word in a given string and returns a dictionary with words as keys and their corresponding frequency as values. The function should ignore punctuation and be case-insensitive. Input: A string `s` containing words separated by spaces and possibly including punctuation marks. Output: A dictionary containing words and their frequency. Example: ``` word_frequency(\\"Hello, world! Hello.\\") -> {\\"hello\\": 2, \\"world\\": 1} word_frequency(\\"To be, or not to be: that is the question.\\") -> {\\"to\\": 2, \\"be\\": 2, \\"or\\": 1, \\"not\\": 1, \\"that\\": 1, \\"is\\": 1, \\"the\\": 1, \\"question\\": 1} ``` Note: - Words are considered the same regardless of case, e.g., \\"Hello\\" and \\"hello\\" are the same word. - Punctuation marks such as commas, periods, exclamation points, and question marks should be ignored. - You may assume that the input string does not contain numbers or special characters other than punctuation marks and letters. Important edge cases to handle: 1. An input string that is empty should return an empty dictionary. ``` word_frequency(\\"\\") -> {} ``` 2. An input string with multiple spaces between words should handle spaces correctly. ``` word_frequency(\\" hello world \\") -> {\\"hello\\": 1, \\"world\\": 1} ``` 3. Any isolated punctuation should not count as a word. ``` word_frequency(\\"...!!!\\") -> {} ```","solution":"import re from collections import Counter def word_frequency(s): Returns the frequency of each word in the given string. The function is case-insensitive and ignores punctuation. # Remove punctuation using regex and convert string to lower case cleaned_string = re.sub(r\'[^ws]\', \'\', s).lower() # Split the string into words words = cleaned_string.split() # Use Counter from collections to count the frequency of words frequency = Counter(words) return dict(frequency)"},{"question":"You are implementing a simple inventory system for a fictional game. Each item in your inventory has a name and a quantity. However, the inventory can only hold up to a maximum number of different types of items. # Inventory rules: 1. If you try to add a new type of item beyond the inventory limit, it should not add the item and should return a message indicating the inventory is full. 2. If the item already exists, it should increase the quantity of that item, up to a maximum allowed quantity for each item. 3. If you try to remove a quantity of an item that does not exist in the inventory, it should return a message indicating the item is not found. 4. If you try to remove more quantity of an item than is available, it should only remove as much as is available and return a message indicating the limited removal. # Function Signature: ```python class Inventory: def __init__(self, max_items, max_quantity): pass def add_item(self, item_name, quantity): Adds the specified quantity of the item to the inventory. Args: item_name (str): The name of the item. quantity (int): The quantity to add. Returns: str: A message indicating the result of the operation. pass def remove_item(self, item_name, quantity): Removes the specified quantity of the item from the inventory. Args: item_name (str): The name of the item. quantity (int): The quantity to remove. Returns: str: A message indicating the result of the operation. pass def get_inventory(self): Returns the current state of the inventory. Returns: dict: A dictionary with item names as keys and quantities as values. pass ``` # Example: ```python # Initialize inventory with a maximum of 2 different items, each with a maximum quantity of 5. inventory = Inventory(2, 5) # Add items print(inventory.add_item(\\"potion\\", 3)) # Output: \'Added 3 of potion.\' print(inventory.add_item(\\"elixir\\", 2)) # Output: \'Added 2 of elixir.\' print(inventory.add_item(\\"ether\\", 1)) # Output: \'Cannot add ether. Inventory is full.\' print(inventory.add_item(\\"potion\\", 3)) # Output: \'Added 2 of potion. Now potion has 5.\' # Remove items print(inventory.remove_item(\\"elixir\\", 1)) # Output: \'Removed 1 of elixir.\' print(inventory.remove_item(\\"ether\\", 1)) # Output: \'Item ether not found.\' print(inventory.remove_item(\\"potion\\", 6)) # Output: \'Removed 5 of potion. potion is now out of stock.\' # Get inventory status print(inventory.get_inventory()) # Output: {\'elixir\': 1, \'potion\': 0} ```","solution":"class Inventory: def __init__(self, max_items, max_quantity): self.max_items = max_items self.max_quantity = max_quantity self.items = {} def add_item(self, item_name, quantity): if item_name in self.items: if self.items[item_name] + quantity > self.max_quantity: added_quantity = self.max_quantity - self.items[item_name] self.items[item_name] = self.max_quantity return f\\"Added {added_quantity} of {item_name}. Now {item_name} has {self.max_quantity}.\\" else: self.items[item_name] += quantity return f\\"Added {quantity} of {item_name}.\\" else: if len(self.items) >= self.max_items: return f\\"Cannot add {item_name}. Inventory is full.\\" else: self.items[item_name] = min(quantity, self.max_quantity) return f\\"Added {min(quantity, self.max_quantity)} of {item_name}.\\" def remove_item(self, item_name, quantity): if item_name not in self.items: return f\\"Item {item_name} not found.\\" if self.items[item_name] < quantity: removed_quantity = self.items[item_name] self.items[item_name] = 0 return f\\"Removed {removed_quantity} of {item_name}. {item_name} is now out of stock.\\" else: self.items[item_name] -= quantity return f\\"Removed {quantity} of {item_name}.\\" def get_inventory(self): return self.items"},{"question":"Develop a function that determines whether a given password is strong. A strong password is defined as a password that: 1. Has at least 8 characters. 2. Contains at least one uppercase letter. 3. Contains at least one lowercase letter. 4. Contains at least one digit. 5. Contains at least one special character from the set `!@#%^&*()-+`. Write a function `is_strong_password(password: str) -> bool` that returns `True` if the password meets all the criteria, otherwise `False`. Example: ```python print(is_strong_password(\\"StrongPass1!\\")) # Output: True print(is_strong_password(\\"weakpass\\")) # Output: False ```","solution":"import re def is_strong_password(password: str) -> bool: Checks if the given password is strong based on certain criteria. A strong password is defined as having at least: - 8 characters - One uppercase letter - One lowercase letter - One digit - One special character from the set `!@#%^&*()-+` Args: password (str): The password to check. Returns: bool: True if the password is strong, False otherwise. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'d\', password): return False if not re.search(r\'[!@#%^&*()-+]\', password): return False return True"},{"question":"You are given a list of integers, where each integer represents the height of a bar. The width of each bar is 1. Write a function that takes the list as input and returns an integer representing the largest rectangle that can be formed in a histogram using the bars. To clarify, each bar\'s height is the corresponding integer in the list, and the width between any two adjacent bars is always 1. The rectangle should be formed using contiguous bars and can span multiple bars to maximize the area. Example Here\'s an example to illustrate the problem: ``` Input: [2, 1, 5, 6, 2, 3] Output: 10 ``` In this example, the largest rectangle can be formed by using the third and fourth bars (height 5 and 6), which gives an area of `5 * 2 = 10`. # Function Signature ```python def largest_rectangle_area(heights: List[int]) -> int: pass ``` # Input - A list of integers `heights` where `0 <= heights[i] <= 10^5` and `0 < len(heights) <= 10^4`. # Output - An integer representing the largest rectangle that can be formed in the histogram using the bars. # Constraints - The given list will have at least one element and at most 10,000 elements. - The height of each bar will be a non-negative integer, with a maximum value of 100,000. # Note - This problem can typically be solved efficiently using a stack-based approach to keep track of the indices of the histogram bars. The algorithm should run in linear time, O(n). You may see the example tests for more cases. Enjoy solving the problem!","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: Returns the largest rectangle area that can be formed in a histogram represented by \'heights\'. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function that takes a list of integers and returns the length of the longest consecutive sequence of increasing numbers. For example, given the list [1, 2, 2, 3, 4, 1, 5], the function should return 3, as the longest consecutive sequence is [2, 3, 4]. The input to your function will be a list of integers, which could be positive, negative, or zero. The list will contain at least one element. The function should return an integer representing the length of the longest increasing subsequence without any repetitions.","solution":"def longest_increasing_sequence(nums): Returns the length of the longest consecutive sequence of increasing numbers in the list `nums`. if not nums: return 0 longest = 0 current_length = 1 for i in range(1, len(nums)): if nums[i] > nums[i-1]: current_length += 1 else: longest = max(longest, current_length) current_length = 1 return max(longest, current_length)"},{"question":"In a land far away, there is a kingdom with N cities connected by M bidirectional roads. The kingdom\'s king wants to perform a census, and as part of this, the king needs to send messengers from the capital city to each of the other cities. The messengers need to know the shortest path from the capital city to each city. Given the number of cities and roads, as well as the details of the roads, your task is to determine the shortest distance from the capital city (city 1) to each of the other cities. -----Input----- The first line contains two integers N and M (1 ≤ N, M ≤ 100), the number of cities and the number of roads, respectively. The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N; 1 ≤ w ≤ 1000), representing a bidirectional road between cities u and v with a length of w. -----Output----- Output N-1 lines, each containing the shortest distance from the capital city (city 1) to city i (2 ≤ i ≤ N). If there is no path from the capital city to city i, output -1 for that city. -----Example----- Input: 4 4 1 2 2 1 3 3 2 3 2 3 4 4 Output: 2 3 7 -----Explanation----- Example case 1: - The shortest distance from city 1 to city 2 is from the direct road between 1 and 2 which is 2. - The shortest distance from city 1 to city 3 is directly from the road 1 to 3 which is 3. - The shortest distance from city 1 to city 4 is by taking the road 1 -> 3 -> 4 with a total distance of 7. - There is no direct road from 1 to 4 so the distance considered will be -1 for non reachable distances.","solution":"import heapq def shortest_distances(N, M, roads): graph = {i: [] for i in range(1, N+1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm distances = {i: float(\'inf\') for i in range(1, N+1)} distances[1] = 0 pq = [(0, 1)] # (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) result = [] for city in range(2, N+1): if distances[city] == float(\'inf\'): result.append(-1) else: result.append(distances[city]) return result"},{"question":"Palindrome Phrase Checker #Task Your task is to implement a function which takes a phrase (string) as input and returns a boolean indicating whether the phrase is a palindrome. A palindrome is a sequence of characters that reads the same backward as forward, ignoring punctuation, whitespace, and letter case. Handle invalid input and ensure to return False for non-strings or empty strings. #Input The input is any random phrase (string). You must then determine if the phrase is a palindrome by comparing characters while ignoring punctuation, whitespace, and case. If the input is not a string or is an empty string, return False. Example: ```python Input: is_palindrome(\\"A man, a plan, a canal: Panama\\") Output: True Input: is_palindrome(\\"race a car\\") Output: False Input: is_palindrome(\\" \\") Output: False Input: is_palindrome(12345) Output: False ``` #Hints - Use string manipulation techniques to clean the input phrase. - Make use of standard string methods to ignore punctuation and whitespace. - Remember to handle edge cases where the input is empty or not a string.","solution":"import string def is_palindrome(phrase): Checks if the given phrase is a palindrome, ignoring punctuation, whitespace, and letter case. Parameters: phrase (str): The phrase to check. Returns: bool: True if the phrase is a palindrome, False otherwise. if not isinstance(phrase, str) or not phrase.strip(): return False # Remove punctuation and whitespace, and convert to lowercase cleaned_phrase = \'\'.join(char.lower() for char in phrase if char.isalnum()) # Check if the cleaned phrase reads the same backward as forward return cleaned_phrase == cleaned_phrase[::-1]"},{"question":"Write a function getLongestPalindrome that will return the longest palindromic substring in a given string. A palindrome is a word that reads the same backward as forward. E.g 1: For s = \\"babad\\" the result should be \\"bab\\" or \\"aba\\" (both are valid) E.g 2: For s = \\"cbbd\\" the result should be \\"bb\\" E.g 3: For s = \\"abcdef\\" the result should be \\"a\\" (since there are no longer palindromes in the string)","solution":"def getLongestPalindrome(s): Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" longest = s[0] for i in range(n): # Check for odd-length palindromes odd_palindrome = expandFromCenter(s, i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Check for even-length palindromes even_palindrome = expandFromCenter(s, i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest def expandFromCenter(s, left, right): Expands around the center and returns the longest palindromic substring. while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right]"},{"question":"You are given a `9x9` Sudoku board as an input in the form of a 2D array. Each element in the array is represented as an integer, where `0` indicates an empty cell. Write a function to determine if the Sudoku board is valid. The board is considered valid if each row, each column, and each of the `3x3` sub-grids contain all numbers from 1 to 9 without repetition. If the board is valid, output `\\"VALID\\"`. Otherwise, output `\\"INVALID\\"`.","solution":"def is_valid_sudoku(board): def is_valid_group(group): # Filter out all zeros (empty cells) group = [num for num in group if num != 0] # Check if there are any duplicates return len(group) == len(set(group)) for i in range(9): # Check rows if not is_valid_group(board[i]): return \\"INVALID\\" # Check columns column = [board[row][i] for row in range(9)] if not is_valid_group(column): return \\"INVALID\\" for i in range(3): for j in range(3): # Check 3x3 sub-grids sub_grid = [ board[x][y] for x in range(i*3, (i+1)*3) for y in range(j*3, (j+1)*3) ] if not is_valid_group(sub_grid): return \\"INVALID\\" return \\"VALID\\""},{"question":"There is a robot situated in an infinite 2D grid. Initially, the robot is at position (0,0). The robot works based on a sequence of commands, where each command can be \'U\', \'D\', \'L\', or \'R\', which correspond to moving up, down, left, and right by one unit on the grid, respectively. The robot also has a limitation: it cannot revisit any cell it has already occupied. You are required to determine whether a given sequence of commands will cause the robot to cross its own path at any point in its movement. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S of commands. -----Output:----- For each test case, output \\"YES\\" if the robot crosses its path, otherwise \\"NO\\". -----Constraints----- - 1 leq T leq 10 - 1 leq |S| leq 10^4 (total length of commands over all test cases is at most 100,000) -----Sample Input:----- 2 URURD URLLDR -----Sample Output:----- NO YES","solution":"def will_cross_path(commands): Determine whether a given sequence of commands will cause the robot to cross its own path. position = (0, 0) visited = {position} for command in commands: if command == \'U\': position = (position[0], position[1] + 1) elif command == \'D\': position = (position[0], position[1] - 1) elif command == \'L\': position = (position[0] - 1, position[1]) elif command == \'R\': position = (position[0] + 1, position[1]) if position in visited: return \\"YES\\" visited.add(position) return \\"NO\\" def robot_cross_path_solver(T, command_list): results = [] for commands in command_list: results.append(will_cross_path(commands)) return results"},{"question":"You are given an array of k linked-lists where each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it. Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Example 2: Input: lists = [] Output: [] Example 3: Input: lists = [[]] Output: []","solution":"from typing import List, Optional import heapq class ListNode: def __init__(self, val: int = 0, next: \'ListNode\' = None): self.val = val self.next = next def mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]: Merges k sorted linked lists into one sorted linked list. ListNode.__lt__ = lambda self, other: self.val < other.val # Add comparison method to ListNode min_heap = [] dummy = ListNode(None) current = dummy # Initialize the heap for l in lists: if l: heapq.heappush(min_heap, l) while min_heap: smallest_node = heapq.heappop(min_heap) current.next = smallest_node current = current.next if smallest_node.next: heapq.heappush(min_heap, smallest_node.next) return dummy.next"},{"question":"Given a list of integers, write a function to determine if there are three distinct elements that sum up to a given target number. Return `true` if such a triplet exists, otherwise return `false`. You may assume that the list has at least three integers. Good luck!","solution":"def has_triplet_with_sum(nums, target): Determines if there are three distinct elements in the list that sum up to the target number. Parameters: nums (list): A list of integers. target (int): The target sum. Returns: bool: True if such a triplet exists, False otherwise. nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: triplet_sum = nums[i] + nums[left] + nums[right] if triplet_sum == target: return True elif triplet_sum < target: left += 1 else: right -= 1 return False"},{"question":"#BACKGROUND: Emily is an enthusiastic botanist who loves to study different species of plants. She noticed that some plants have growth patterns based on specific formulas she developed. She wants to predict the height of a plant after a certain number of days given its initial height and growth rate. She needs a tool to help her easily calculate this. #TECHNICAL DETAILS: The height of a plant grows according to the following rules: - For Type A plants: The plant grows by 5% of its current height each day. - For Type B plants: The plant grows by 3% of its current height each day. - For Type C plants: The plant grows by a fixed rate of 2 cm per day. #TASK: Write a function that takes as input: ``` - The type of plant (\'A\', \'B\', or \'C\'); - The initial height of the plant (in cm, as a decimal); - The number of days for which the growth should be calculated (as an integer); ``` and then returns the expected height of the plant at the end of the given number of days. #NOTES: Heights (both input and output) should be decimals, rounded to the nearest tenth. Duration (input) should be a whole number (integer). If it is not, the function should round to the nearest whole number. When performing input parameter validity checks, evaluate them in the order given for your code to pass all tests.","solution":"def calculate_plant_height(plant_type, initial_height, days): Calculate the height of a plant after a given number of days based on its growth type. Parameters: plant_type (str): Type of plant (\'A\', \'B\', or \'C\') initial_height (float): Initial height of the plant in centimeters days (int): Number of days for which the growth is to be calculated Returns: float: Expected height of the plant rounded to the nearest tenth of a centimeter if plant_type not in (\'A\', \'B\', \'C\'): raise ValueError(\\"Invalid plant type. Type must be \'A\', \'B\', or \'C\'.\\") if initial_height < 0: raise ValueError(\\"Initial height cannot be negative.\\") if not isinstance(days, int) or days < 0: raise ValueError(\\"Number of days must be a non-negative integer.\\") current_height = initial_height if plant_type == \'A\': for _ in range(days): current_height += current_height * 0.05 elif plant_type == \'B\': for _ in range(days): current_height += current_height * 0.03 elif plant_type == \'C\': current_height += 2 * days return round(current_height, 1)"},{"question":"Task Your task is to write a function that takes an array of integers and returns the length of the longest contiguous subarray such that every element in this subarray has an even sum with its next adjacent element. The subarray must contain at least two elements. # Example For `arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]`: ``` subarray [2, 4, 6, 8, 10] has all adjacent elements with the even sum (2+4, 4+6, 6+8, 8+10 are all even). There is no longer subarray which satisfies the above condition, so the answer is 5. ``` For `arr = [5, 5, 5, 5]`: ``` subarray [5, 5] has the even sum (5+5), and it repeats for the entire array, so the answer is 2. ``` # Input/Output - `[input]` integer array `arr` A non-empty array of integers `1 ≤ arr.length ≤ 1000` - `[output]` an integer The length of the longest contiguous subarray such that every element in this subarray has an even sum with its next adjacent element. ```Haskell In Haskell, the function should have the following signature: longestEvenSumSubarray :: [Int] -> Int ```","solution":"def longest_even_sum_subarray(arr): Returns the length of the longest contiguous subarray where every pair of adjacent elements has an even sum. max_length = 0 current_length = 0 for i in range(len(arr) - 1): if (arr[i] + arr[i+1]) % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 # Return max_length + 1 because subarray length will be one more than the count of pairs return max_length + 1 if max_length > 0 else 0"},{"question":"A group of tourists is planning to visit a series of cities connected by a network of roads. Each road has a travel cost associated with it. The group wants to find the minimum cost to travel from their starting city to their destination city. A tourist can travel from city A to city B if there is a direct road connecting the two cities, and it is possible that some roads could be bidirectional and others could be unidirectional. Write a program that takes as input the number of cities, the number of roads, the starting city, the destination city, and the details of each road (including the travel cost). The program should output the minimum travel cost from the starting city to the destination city. If there is no way to reach the destination city from the starting city, output -1. -----Input:----- - First line contains four integers: N, M, S, and D. Where N is the number of cities, M is the number of roads, S is the starting city, and D is the destination city. - The next M lines each contain three integers u, v, and w representing a road from city u to city v with travel cost w. -----Output:----- Output a single integer, the minimum cost from the starting city to the destination city, or -1 if there is no valid path. -----Constraints:----- - 2 leq N leq 1000 - 1 leq M leq 10^4 - 1 leq u, v leq N - 0 leq w leq 10^6 - Cities are 1-indexed. - S and D are different. -----Sample Input:----- 6 7 1 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 6 1 5 6 2 -----Sample Output:----- 9 -----EXPLANATION:----- The graph looks like this: 1 -2-> 2 -1-> 3 -3-> 5 -2-> 6 -7-> 4 -1-> 6 1 -4-> 3 The minimum cost path from city 1 to city 6 is: 1 -> 2 -> 3 -> 5 -> 6 with a total cost of 2 + 1 + 3 + 2 = 8.","solution":"import heapq def find_minimum_travel_cost(N, M, S, D, roads): Computes the minimum travel cost from the starting city S to the destination city D. Parameters: N : int : number of cities M : int : number of roads S : int : starting city D : int : destination city roads : list of tuples : each tuple contains three integers representing road information (u, v, w) Returns: int : minimum travel cost from the starting city to the destination city, or -1 if no path exists # Create adjacency list for the graph graph = [[] for _ in range(N+1)] for u, v, w in roads: graph[u].append((v, w)) # Use Dijkstra\'s algorithm to find the shortest path heap = [(0, S)] # (cost, city) distances = {i: float(\'inf\') for i in range(1, N+1)} distances[S] = 0 while heap: current_cost, current_city = heapq.heappop(heap) if current_city == D: return current_cost for neighbor, travel_cost in graph[current_city]: new_cost = current_cost + travel_cost if new_cost < distances[neighbor]: distances[neighbor] = new_cost heapq.heappush(heap, (new_cost, neighbor)) return -1 if distances[D] == float(\'inf\') else distances[D]"},{"question":"Sarah is a software engineer working on a project that requires an efficient way to check whether a given list of numbers is a \\"super list.\\" A \\"super list\\" is defined as a list in which every element is greater than or equal to the sum of all previous elements in the list. Sarah needs to write a function `is_super_list` that takes as input a list of integers and returns `True` if it is a \\"super list\\" and `False` otherwise. **Implementation Notes:** - You should implement the function `is_super_list(nums)` in your preferred programming language. - Consider edge cases such as an empty list or lists with negative integers. **Examples:** For example, if the list is `[2, 3, 6, 11]`, it is a \\"super list\\" because: - 2 (first element) is >= sum of previous elements (0) - 3 is >= sum of previous elements (2) - 6 is >= sum of previous elements (2+3=5) - 11 is >= sum of previous elements (2+3+6=11) More examples: * input: `[1, 2, 4, 7]`, result: `True` (sums: 0, 1, 3, 7) * input: `[3, 1, 4]`, result: `False` (sums: 0, 3, 4) * input: `[]`, result: `True` (an empty list is considered a \\"super list\\") * input: `[0, 0, 0]`, result: `True` (sums: 0, 0, 0)","solution":"def is_super_list(nums): Returns True if nums is a super list, otherwise returns False. sum_previous = 0 for num in nums: if num < sum_previous: return False sum_previous += num return True"},{"question":"Task Given a list of integers, find two distinct elements such that their sum is closest to a given target number. Example For the input list `[1, 3, 7, 8, 9]` and target `10`, the output should be `(3, 7)` or `(1, 9)`. Input/Output Input: - A list of integers `arr` consisting of at least two elements (2 <= arr.length <= 30). - A target integer `t` (1 <= t <= 100). Output: - A tuple of two integers from the list whose sum is closest to the target. If multiple answers are possible, return any of them. For example, for `arr = [1, 4, 7, 10]` and `t = 8`, the function could return `(1, 7)`.","solution":"def closest_sum(arr, target): Given a list of integers, find two distinct elements such that their sum is closest to a given target number. arr.sort() closest_pair = (arr[0], arr[1]) min_diff = abs(sum(closest_pair) - target) left, right = 0, len(arr) - 1 while left < right: current_sum = arr[left] + arr[right] current_diff = abs(current_sum - target) if current_diff < min_diff: min_diff = current_diff closest_pair = (arr[left], arr[right]) if current_sum < target: left += 1 else: right -= 1 return closest_pair"},{"question":"Leha loves exploring patterns in sequences. One of his recent interests involves a function G(n, k) that operates on sequences. Consider all possible k-element subsequences of a sequence of length n. For each subsequence, compute the sum of its elements. The function G(n, k) outputs the maximum sum of these k-element subsequences. Leha has two sequences, P and Q, each consisting of l integers. For every index pair i, j such that 1 ≤ i, j ≤ l, the condition P_{i} ≤ Q_{j} holds. Help Leha rearrange the numbers in the sequence P so that the product prod_{i = 1}^{l} G(P_{i}^{prime}, Q_{i}) is maximized, where P\' is the rearranged sequence. -----Input----- First line of input contains a single integer l (1 ≤ l ≤ 2·10^5) — length of sequences P and Q. Next line contains l integers p_1, p_2, ..., p_{l} (1 ≤ p_{i} ≤ 10^9) — sequence P. Next line contains l integers q_1, q_2, ..., q_{l} (1 ≤ q_{i} ≤ 10^9) — sequence Q. -----Output----- Output l integers p\'_1, p\'_2, ..., p\'_{l} — sequence P\' that is a permutation of sequence P. -----Examples----- Input 4 3 6 2 5 1 2 1 3 Output 6 5 3 2 Input 6 5 9 4 7 8 6 3 1 2 2 3 1 Output 9 6 8 4 7 5","solution":"def maximize_product(l, P, Q): # Sort both lists P and Q in descending order P_sorted = sorted(P, reverse=True) Q_sorted = sorted(Q, reverse=True) # We return P_sorted because arranging P\'s elements sorted in descending order return P_sorted"},{"question":"Write a function `findMedianSortedArrays(nums1, nums2)` that takes two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively and returns the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). Example: ``` nums1 = [1, 3] nums2 = [2] findMedianSortedArrays(nums1, nums2) -> 2.0 nums1 = [1, 2] nums2 = [3, 4] findMedianSortedArrays(nums1, nums2) -> 2.5 ``` Clarification: 1. If both arrays are empty, return None. 2. Assume that nums1 and nums2 cannot both be empty at the same time.","solution":"def findMedianSortedArrays(nums1, nums2): Find the median of two sorted arrays. Args: nums1: List of integers sorted in ascending order. nums2: List of integers sorted in ascending order. Returns: The median of the combined sorted array. if not nums1 and not nums2: return None merged = sorted(nums1 + nums2) n = len(merged) if n % 2 == 1: return float(merged[n // 2]) else: return (merged[(n // 2) - 1] + merged[n // 2]) / 2.0"},{"question":"Write a function that simulates a simple shift cipher, also known as Caesar cipher. The function should take two arguments: a string `text` and an integer `shift`. The function will return the encoded version of the `text` where each letter is shifted `shift` places to the right in the alphabet. - The function should preserve the case of each letter. - Non-alphabet characters should remain unchanged. - The shift amount can be positive or negative, and the shifting should wrap around the end of the alphabet. If the `text` is empty, return an empty string. # Example ```python text = \\"Hello, World!\\" shift = 3 encoded_text = \\"Khoor, Zruog!\\" text = \\"abc\\" shift = -2 encoded_text = \\"yza\\" ```","solution":"def caesar_cipher(text, shift): Returns an encoded string by shifting each letter in \'text\' by \'shift\' positions in the alphabet. Args: text (str): Input string to be encoded. shift (int): Number of positions to shift each letter. Returns: str: Encoded string. def shift_char(c, shift): if c.isalpha(): start = ord(\'A\') if c.isupper() else ord(\'a\') return chr((ord(c) - start + shift) % 26 + start) return c return \'\'.join(shift_char(c, shift) for c in text)"},{"question":"Ravi is organizing a coding contest and needs to manage the registration process efficiently. Participants can register for the contest in groups, and each group must consist of a specific number of participants. Ravi needs to ensure that he can form complete groups of the required size and determine the total number of groups that can be formed along with the number of participants who will not fit into any group. Write a function to help Ravi process the registrations. -----Input:----- First line contains an integer T denoting the number of test cases. Each of the following T lines contains two space-separated integers: - The first integer N represents the total number of participants registered for the contest. - The second integer K represents the size of each group. -----Output:----- For each test case, print two space-separated integers: - The first integer denotes the number of complete groups that can be formed. - The second integer denotes the number of participants who will not fit into any group. -----Constraints:----- 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 1 ≤ K ≤ 1000 -----Example:----- Input: 3 15 3 10 4 20 5 Output: 5 0 2 2 4 0 -----Explanation:----- In the first test case, 15 participants can be divided into 5 groups of 3 participants each, with no participants remaining ungrouped. In the second test case, 10 participants can be divided into 2 groups of 4 participants each, with 2 participants remaining ungrouped. In the third test case, 20 participants can be divided into 4 groups of 5 participants each, with no participants remaining ungrouped.","solution":"def process_registrations(T, registrations): results = [] for registration in registrations: N, K = registration num_groups = N // K remaining_participants = N % K results.append((num_groups, remaining_participants)) return results"},{"question":"Create a function that generates all permutations of a given string. A permutation of a string is another string with the same characters, only the order of characters can be different. For example, the permutations of the string \\"ABC\\" are \\"ABC\\", \\"ACB\\", \\"BAC\\", \\"BCA\\", \\"CAB\\", and \\"CBA\\". Write a function `permutations` that takes a string as input and returns a list of all possible permutations of the given string. The order of the permutations in the returned list does not matter. Examples: ``` permutations(\\"A\\") should return [\\"A\\"] permutations(\\"AB\\") should return [\\"AB\\", \\"BA\\"] permutations(\\"ABC\\") should return [\\"ABC\\", \\"ACB\\", \\"BAC\\", \\"BCA\\", \\"CAB\\", \\"CBA\\"] permutations(\\"ABCD\\") should return a list containing 24 permutations ``` Note: Ensure the function handles strings with repeated characters correctly. For example, \\"AAB\\" should return [\\"AAB\\", \\"ABA\\", \\"BAA\\"]. Your solution should not use built-in library functions that directly solve the problem.","solution":"def permutations(string): Generates all permutations of a given string. :param string: The string to permute. :return: A list of all possible permutations of the given string. # Base case: if the string is empty, return an empty list if len(string) == 0: return [\'\'] perm_list = [] # result list to hold all the permutations for i in range(len(string)): # Extract the current character char = string[i] # Get the remaining substring after excluding the current character remaining_string = string[:i] + string[i+1:] # Recursively generate permutations of the remaining substring for sub_perm in permutations(remaining_string): perm_list.append(char + sub_perm) return perm_list"},{"question":"Write a program to check whether a given string can be rearranged to form a palindrome. A string is said to be a palindrome if it reads the same backward as forward. Example 1: Input: \\"civic\\" Output: true Explanation: \\"civic\\" is already a palindrome. Example 2: Input: \\"ivicc\\" Output: true Explanation: Rearranging \\"ivicc\\" can form \\"civic\\", which is a palindrome. Example 3: Input: \\"hello\\" Output: false Explanation: Rearranging \\"hello\\" cannot form a palindrome. Note: A palindrome can have at most one character with an odd frequency count (for strings of odd length). Input length is between 1 and 1000 characters.","solution":"def can_form_palindrome(s: str) -> bool: Check if a given string can be rearranged to form a palindrome. :param s: Input string :return: Boolean indicating whether the string can be rearranged to form a palindrome from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"# Task Given a list of integers, find the largest sum of any contiguous subarray within the list (a subarray is a subset of the array with consecutive elements). The list will contain at least one positive number. # Input/Output `[input]` array of integers `arr` - A list of integers `-10^6 ≤ arr[i] ≤ 10^6` - The length of the list will not exceed 10^6 `[output]` integer - The largest sum of any contiguous subarray within the given list. # Example For `arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the output should be `6`. The contiguous subarray `[4, -1, 2, 1]` has the largest sum `4 + (-1) + 2 + 1 = 6`.","solution":"def max_subarray_sum(arr): Returns the largest sum of any contiguous subarray within the given list. max_current = arr[0] max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Bob loves playing with strings. One day, he challenged Alice to a game involving strings. Alice is given a string consisting of lowercase letters, and her task is to make the string a palindrome by changing as few characters as possible. A palindrome is a string that reads the same forward and backward. Alice can choose any character from the string and change it to any other lowercase letter. She needs your help to determine the minimum number of character changes required to make the string a palindrome. -----Input:----- - The first line of the input contains an integer T, the number of test cases. The description of T test cases follows. - Each test case consists of a single line containing a string S. -----Output:----- - For each test case, print the minimum number of character changes needed to make the string a palindrome. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 10^5 - The string S consists of lowercase English letters only. -----Sample Input:----- 3 abc aab race -----Sample Output:----- 1 1 2 -----EXPLANATION:----- Test case 1: The string \\"abc\\" can be changed to \\"aba\\" or \\"cbc\\" or any other palindrome with just 1 change. Test case 2: The string \\"aab\\" can be changed to \\"aba\\" by changing the second character \'a\' to \'b\'. Test case 3: The string \\"race\\" requires 2 changes to become a palindrome. For example, \\"race\\" can be changed to \\"eace\\" -> \\"ecce\\".","solution":"def min_changes_to_palindrome(S): Returns the minimum number of changes required to make the string S a palindrome. n = len(S) changes = 0 for i in range(n // 2): if S[i] != S[n - i - 1]: changes += 1 return changes def min_changes_for_multiple_cases(T, cases): Returns a list of minimum changes required for each test case. results = [] for case in cases: results.append(min_changes_to_palindrome(case)) return results"},{"question":"John loves magical spells. Recently, he discovered a peculiar type of magical word called \\"Palindrome\\". A palindrome is a word that reads the same backward as forward. John is fascinated by these palindromes and wants to find out if a given string can be rearranged to form at least one palindrome. Given a string, determine if any permutation of the string can form a palindrome. -----INPUT FORMAT----- - First line of the input contains an integer T, the number of test cases. - Each of the next T lines contains a single string s of lowercase alphabets. -----OUTPUT FORMAT----- - For each test case, print \\"YES\\" if any permutation of the given string can form a palindrome, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 10^5 - 1 leq |s| leq 10^5 - The total length of all strings combined will not exceed 10^6. -----Sample Input----- 3 aabb abc racecar -----Sample Output----- YES NO YES -----Explanation----- For the string \\"aabb\\", the characters can be rearranged to form \\"abba\\", which is a palindrome. For the string \\"abc\\", there is no way to rearrange the characters to form a palindrome. For the string \\"racecar\\", it is already a palindrome.","solution":"def can_form_palindrome(s): Check if any permutation of the string can form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def process_input(T, strings): Process multiple test cases to check if each string can form a palindrome. results = [] for s in strings: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a rectangular grid of size n times m, where each cell contains either a \'1\' or a \'0\'. You need to determine the maximum size of a square sub-grid entirely filled with \'1\'s. A square sub-grid is defined as a sub-section of the grid that forms a perfect square, and to be entirely filled with \'1\'s, every cell in that square sub-grid must contain the value \'1\'. For example, given the grid: ``` 1 1 1 1 1 0 1 1 1 ``` The maximum size of a square sub-grid entirely filled with \'1\'s is 2 (the top-left 2x2 sub-grid). -----Input----- The first line contains an integer t (1 le t le 50) — the number of test cases. Then t test cases follow. Each test case starts with a line containing two positive integers n (1 le n, m le 100) — the number of rows and columns of the grid. Then follow n lines, each containing m characters \'1\' or \'0\', representing the grid. -----Output----- For each test case, print the maximum size of the square sub-grid entirely filled with \'1\'s. -----Example----- Input 3 3 3 111 110 111 4 4 1111 1111 1111 0111 2 2 10 01 Output 2 3 1 -----Note----- Explanation of the examples: 1. In the first test case, the grid contains a 2x2 square of \'1\'s in the top-left corner. 2. In the second test case, the largest square of \'1\'s is 3x3 in size. 3. In the third test case, the largest square of \'1\'s is just 1x1, since no larger square is possible.","solution":"def max_square_subgrid(test_cases): results = [] for grid in test_cases: n, m, matrix = grid[\'n\'], grid[\'m\'], grid[\'matrix\'] dp = [[0] * m for _ in range(n)] max_size = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) results.append(max_size) return results"},{"question":"Suzuki needs help with sentence formation! As part of practicing grammar with his students, Suzuki wants them to form sentences using given sets of words. Each set contains words that can form a valid sentence. Suzuki wants you to write a function that will check if all the given words can form a valid sentence, and if they can, to return that sentence. A valid sentence must: 1. Use all the given words exactly once. 2. Start with a word that begins with a capital letter. 3. End with either \'.\', \'!\', or \'?\'. 4. Follow the regular sentence structure with an appropriate subject-verb agreement. You will be given a list of words. If a valid sentence can be formed, return the sentence as a string. Otherwise, return an empty string. Here is an example input: ```python words = [\'can\', \'Can\', \'you\', \'form\', \'a\', \'sentence\', \'with\', \'all\', \'these\', \'words\', \'?\'] ``` Here is an example return from your function: ```python string = \'Can you form a sentence with all these words?\' ``` Ensure to handle cases with punctuation appropriately: ```python words = [\'This\', \'is\', \'a\', \'simple\', \'test\', \'.\'] ``` Returns ```python string = \'This is a simple test.\' ``` Here\'s another case where a sentence cannot be formed: ```python words = [\'no\', \'capital\', \'letter\'] ``` Returns ```python string = \'\' ``` Ensure your function considers even the punctuation placement to form the sentence correctly.","solution":"def form_sentence(words): Form a sentence given a list of words based on the specified rules. if not words: return \\"\\" punctuations = {\'.\', \'!\', \'?\'} sentence = [] capitalized_word_found = False ending_punctuation_found = False for word in words: if word[0].isupper(): capitalized_word_found = True if word in punctuations: ending_punctuation_found = True if not capitalized_word_found or not ending_punctuation_found: return \\"\\" for word in words: if word in punctuations: sentence[-1] = sentence[-1] + word else: sentence.append(word) result = \\" \\".join(sentence) if result[-1] not in punctuations: return \\"\\" return result"},{"question":"Given a list of non-negative integers `nums`, you are tasked with returning the list sorted in a special way. The special sorting order is as follows: 1. All even numbers should come before all odd numbers. 2. Within the even numbers, they should be sorted in descending order. 3. Within the odd numbers, they should be sorted in ascending order. Write a function `special_sort(nums)` that takes a list of non-negative integers and returns a list that is sorted according to the above rules. # Examples **Example 1:** ```python Input: nums = [8, 3, 7, 6, 1, 5] Output: [8, 6, 7, 3, 1, 5] Explanation: The even numbers (8, 6) are sorted in descending order. The odd numbers (7, 3, 1, 5) are sorted in ascending order, keeping their relative positions the same. ``` **Example 2:** ```python Input: nums = [4, 2, 9, 7, 6, 1] Output: [6, 4, 2, 1, 7, 9] Explanation: The even numbers (6, 4, 2) are sorted in descending order. The odd numbers (1, 7, 9) are sorted in ascending order. ``` **Example 3:** ```python Input: nums = [3, 3, 2, 2, 1, 1] Output: [2, 2, 1, 1, 3, 3] Explanation: The even numbers (2, 2) are sorted in descending order. The odd numbers (1, 1, 3, 3) are sorted in ascending order, keeping the relative positions the same. ``` **Example 4:** ```python Input: nums = [5, 4, 3, 2, 1] Output: [4, 2, 1, 3, 5] Explanation: The even numbers (4, 2) are sorted in descending order. The odd numbers (5, 3, 1) are sorted in ascending order. ``` # Constraints - 1 <= nums.length <= 1000 - 0 <= nums[i] <= 1000","solution":"def special_sort(nums): Sorts the list of non-negative integers such that: 1. All even numbers come before all odd numbers. 2. Even numbers are sorted in descending order. 3. Odd numbers are sorted in ascending order. evens = sorted([num for num in nums if num % 2 == 0], reverse=True) odds = sorted([num for num in nums if num % 2 != 0]) return evens + odds"},{"question":"In a programming competition, a team score is calculated based on the problems solved and their respective difficulty levels. Given an array of integers representing the difficulty level of problems solved by a team and another integer representing the total score that the team should achieve by summing up the difficulty levels, determine if it is possible to partition the array into exactly two non-empty parts such that the sum of difficulty levels in each part is equal to half of the total score. Write a function `isScorePartitionable(int[] difficulties, int totalScore)` that returns `true` if the array can be partitioned to match the described conditions, and `false` otherwise. Note that `totalScore` will be an even integer. # Examples: 1. `isScorePartitionable([1, 2, 3, 4, 5, 5], 20)` should return `true` - The array can be partitioned as [1, 2, 3, 4, 5] and [5], both summing up to 10, which is half of 20. 2. `isScorePartitionable([1, 1, 3, 4, 7], 16)` should return `true` - The array can be partitioned as [1, 1, 7] and [3, 4], both summing up to 8, which is half of 16. 3. `isScorePartitionable([2, 2, 2, 2, 2], 10)` should return `false` - It is not possible to partition the array into two parts that sum up to half of 10. 4. `isScorePartitionable([], 0)` should return `false` - The array is empty, and thus cannot be partitioned into non-empty parts. Implement the logic in the method `isScorePartitionable(int[] difficulties, int totalScore)` and ensure that the method handles edge cases effectively.","solution":"def isScorePartitionable(difficulties, totalScore): Determines if the provided list of difficulties can be partitioned into two non-empty parts with equal sums that add up to half of the totalScore. if totalScore % 2 != 0 or not difficulties: return False halfScore = totalScore // 2 n = len(difficulties) # Use a DP approach to find if halfScore is possible with subsets of difficulties dp = [False] * (halfScore + 1) dp[0] = True for difficulty in difficulties: for j in range(halfScore, difficulty - 1, -1): dp[j] = dp[j] or dp[j - difficulty] return dp[halfScore]"},{"question":"Task Write a function `decode_string` that takes a string with an encoded message and decodes it. The message consists of letters and numbers that represent a pattern of repetition and concatenation. Parameters: decode_string s | `--- The encoded message as a string. Rules/Note: * The encoded message is made up of: - Digits (0-9) indicating the number of repetitions. - Alphabetic characters representing the base sequences to be repeated. - Square brackets `[]` used to enclose segments that need to be repeated. - Nested segments are possible. * You need to decode the string such that any digit immediately followed by a sequence in square brackets indicates how many times to repeat that sequence. * Nested sequences should be decoded from the innermost to the outermost. * If the string is empty, return an empty string. Example: decode_string(\\"3[a]2[bc]\\") -> \\"aaabcbc\\" decode_string(\\"3[a2[c]]\\") -> \\"accaccacc\\" decode_string(\\"2[abc]3[cd]ef\\") -> \\"abcabccdcdcdef\\" decode_string(\\"\\") -> \\"\\" Additional Considerations: The function should handle strings up to reasonable lengths (e.g., 1,000 characters) efficiently, taking into account potential nested encoding. Function Signature: ```python def decode_string(s: str) -> str: pass ``` **Example Usage:** ```python print(decode_string(\\"3[a]2[bc]\\")) # Output: \\"aaabcbc\\" print(decode_string(\\"3[a2[c]]\\")) # Output: \\"accaccacc\\" print(decode_string(\\"2[abc]3[cd]ef\\")) # Output: \\"abcabccdcdcdef\\" print(decode_string(\\"\\")) # Output: \\"\\" ```","solution":"def decode_string(s: str) -> str: Decodes the encoded message string as per the rules. stack = [] current_num = 0 current_str = \'\' for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_str, current_num)) current_str = \'\' current_num = 0 elif char == \']\': last_str, num = stack.pop() current_str = last_str + current_str * num else: current_str += char return current_str"},{"question":"# Task You are provided with a list of integers. Your task is to categorize the list into three predefined categories based on specific properties of the list elements. 1. If all elements are even, return \\"Even\\". 2. If all elements are odd, return \\"Odd\\". 3. If the list contains a mix of even and odd elements, return \\"Mixed\\". # Example For `numbers = [2, 4, 6, 8]`, the output should be `\\"Even\\"` For `numbers = [1, 3, 5, 7]`, the output should be `\\"Odd\\"` For `numbers = [1, 2, 3, 4]`, the output should be `\\"Mixed\\"` # Input/Output - `[input]` integer array `numbers` An array of integers. Constraints: `1 ≤ numbers.length ≤ 1000, -1000 ≤ numbers[i] ≤ 1000.` - `[output]` a string \\"Even\\" if all elements are even, \\"Odd\\" if all elements are odd, \\"Mixed\\" if the list contains both even and odd elements.","solution":"def categorize_numbers(numbers): Categorizes a list of integers into one of three categories: \\"Even\\", \\"Odd\\", or \\"Mixed\\". Args: numbers (list): A list of integers. Returns: str: \\"Even\\" if all elements are even, \\"Odd\\" if all elements are odd, \\"Mixed\\" if the list contains a mix of even and odd elements. all_even = all(n % 2 == 0 for n in numbers) all_odd = all(n % 2 != 0 for n in numbers) if all_even: return \\"Even\\" elif all_odd: return \\"Odd\\" else: return \\"Mixed\\""},{"question":"Write a function `unique_elements(lst)` that takes a list of integers `lst` and returns a list of all elements that are unique in the given list. The return list should maintain the original order of their first appearance. For example: - `unique_elements([1, 2, 2, 3, 4, 4, 5])` returns `[1, 3, 5]` - `unique_elements([4, 5, 4, 5, 4, 6])` returns `[6]` Note: The function should be case insensitive and avoid using any built-in collection types such as sets or dictionaries to ensure the retention of the original order.","solution":"def unique_elements(lst): Returns a list of unique elements from the given list, maintaining their original order of first appearance. result = [] for ele in lst: if lst.count(ele) == 1: result.append(ele) return result"},{"question":"A company uses a server to manage incoming tasks. Each incoming task has a unique identifier and a processing time associated with it. Your task is to write a function to simulate a very basic task scheduling system that processes tasks in a First-In-First-Out (FIFO) order. You are provided with an array of tuples where each tuple consists of two elements: the task identifier (a string) and the processing time (an integer). Write a function that processes each task in order and returns a list of task identifiers in the order they finished processing. Example: Input: tasks = [(\\"task1\\", 3), (\\"task2\\", 2), (\\"task3\\", 1)] Output: [\\"task1\\", \\"task2\\", \\"task3\\"] Explanation: \\"task1\\" starts at time 0 and finishes at time 3, \\"task2\\" starts at time 3 and finishes at time 5, and \\"task3\\" starts at time 5 and finishes at time 6, hence they finish in the order \\"task1\\", \\"task2\\", \\"task3\\". Note: - The input array is guaranteed to have at least one task. - No two tasks have the same identifier.","solution":"def process_tasks(tasks): Processes tasks in FIFO order and returns a list of task identifiers in the order they finished processing. Parameters: tasks (list of tuples): Each tuple contains a string identifier and an integer processing time. Returns: list: A list of task identifiers in the order they finished processing. finished_tasks = [] for task in tasks: identifier, processing_time = task finished_tasks.append(identifier) return finished_tasks"},{"question":"Given a 2D grid where some cells are land (represented by \'1\') and others are water (represented by \'0\'), an island is defined as a group of contiguous \'1\'s connected vertically or horizontally (not diagonally). Write a function that, given this grid, counts the number of distinct islands. An island is considered distinct if its shape differs from others, even when rotated or flipped. -----Input:----- The input contains: - An integer T, the number of test cases. - For each test case, two integers M and N denoting the number of rows and columns in the grid, followed by the M times N grid of \'0\'s and \'1\'s. -----Output:----- For each test case, output the number of distinct islands. -----Constraints----- - 1 leq T leq 50 - 1 leq M, N leq 50 - Grid contains only \'0\'s and \'1\'s. -----Sample Input:----- 2 3 4 1 1 0 0 1 0 0 1 0 0 1 1 4 5 1 1 0 0 0 1 0 0 1 1 0 0 1 1 0 1 1 0 1 1 -----Sample Output:----- 2 3 -----Explanation:----- For the first test case, the grid has two distinct islands: - The first island consists of the blocks at positions (0,0), (0,1), (1,0). - The second island consists of the blocks at positions (1,3), (2,3), (2,2). For the second test case, the grid has three distinct islands: - The first island consists of the blocks at positions (0,0), (0,1), (1,0). - The second island consists of the blocks at positions (1,3), (1,4), and (2,3). - The third island consists of the blocks at positions (3,0), (3,1) and (3,3), (3,4). Islands are considered distinct in shape, even though the third island in the second test case looks different at first glance. Output the distinct count accordingly.","solution":"def numDistinctIslands(grid): def dfs(r, c, di, dj, shape): if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and grid[r][c] == \'1\': grid[r][c] = \'0\' shape.append((di, dj)) dfs(r-1, c, di-1, dj, shape) dfs(r+1, c, di+1, dj, shape) dfs(r, c-1, di, dj-1, shape) dfs(r, c+1, di, dj+1, shape) shapes = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': shape = [] dfs(i, j, 0, 0, shape) shapes.add(tuple(shape)) return len(shapes) def distinct_islands(T, test_cases): results = [] for t in range(T): M, N = test_cases[t][0], test_cases[t][1] grid = test_cases[t][2] results.append(numDistinctIslands(grid)) return results"},{"question":"Write a function **maxProfit** that accepts an array of integers representing the daily prices of a stock. The function should calculate the maximum profit you can achieve by buying on one day and selling on any of the following days based on the given prices. Return the maximum profit obtainable. If no profit is possible, return 0. * The function should have an average time complexity of O(n). * The array length will always be at least 2. * You may assume that all prices are non-negative integers. Example: ```python maxProfit([7, 1, 5, 3, 6, 4]) => 5 maxProfit([7, 6, 4, 3, 1]) => 0 ```","solution":"def maxProfit(prices): Returns the maximum profit that can be achieved by buying and selling the stock. If no profit is possible, returns 0. :param prices: List of daily prices of the stock. :return: Maximum profit obtainable. min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Given a list of integers, write a function `extract_consecutive_duplicates(lst)` which removes all consecutive duplicates from the list and returns the modified list. For example: ```python extract_consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 4, 5]) ``` should return `[1, 2, 3, 4, 5]`. ```python extract_consecutive_duplicates([1, 2, 2, 3, 1, 1, 2]) ``` should return `[1, 2, 3, 1, 2]`. Write the function to satisfy the given example and additional test cases.","solution":"def extract_consecutive_duplicates(lst): Removes all consecutive duplicates from the list and returns the modified list. if not lst: return [] result = [lst[0]] for item in lst[1:]: if item != result[-1]: result.append(item) return result"},{"question":"You have a list of restaurant ratings represented as integers. You need to determine the \\"best\\" restaurant based on the following algorithm: 1. Divide the restaurants into buckets of size `k` (i.e., create groups of `k` consecutive ratings from the list). 2. Within each bucket, find the restaurant with the highest rating. 3. From these selected highest ratings from each bucket, determine the restaurant with the overall highest rating. If there is a tie (i.e., multiple restaurants have the same highest rating), choose the one that appears first in the list. Implement a function `best_restaurant(ratings: List[int], k: int) -> int` that returns the index (0-based) of the restaurant with the overall highest rating based on the given algorithm. **Example:** ```python ratings = [4, 8, 7, 5, 9, 2, 8, 4] k = 3 # Buckets would be [4, 8, 7], [5, 9, 2], [8, 4] # Best in each bucket: 8, 9, 8 # Overall highest from these: 9 (index 4) # Function should return 4 ratings = [5, 1, 3, 7, 9, 0, 6, 4] k = 2 # Buckets would be [5, 1], [3, 7], [9, 0], [6, 4] # Best in each bucket: 5, 7, 9, 6 # Overall highest from these: 9 (index 4) # Function should return 4 ```","solution":"from typing import List def best_restaurant(ratings: List[int], k: int) -> int: n = len(ratings) max_of_buckets = [] indices_of_max = [] for i in range(0, n, k): bucket = ratings[i:i+k] max_rating = max(bucket) max_index = bucket.index(max_rating) + i max_of_buckets.append(max_rating) indices_of_max.append(max_index) overall_max_rating = max(max_of_buckets) overall_max_index = indices_of_max[max_of_buckets.index(overall_max_rating)] return overall_max_index"},{"question":"You are required to write a function that calculates the total weight of all items in a nested dictionary. The dictionary will contain arbitrary levels of nesting, with the innermost values representing weights. The function should sum up all the weights considering the nested structure. Here are examples of how the function should work: ```python total_weight({\'a\': 10, \'b\': {\'c\': 5, \'d\': 2}, \'e\': {\'f\': {\'g\': 3}}}) # returns 20 total_weight({\'item1\': 4, \'item2\': {\'item3\': 1, \'item4\': {\'item5\': 2, \'item6\': 3}}}) # returns 10 ```","solution":"def total_weight(items): Returns the total weight of all items in a possibly nested dictionary. Parameters: items (dict): A nested dictionary where the innermost values represent weights. Returns: int: The total weight of all items. def recursive_sum(d): total = 0 for value in d.values(): if isinstance(value, dict): total += recursive_sum(value) else: total += value return total return recursive_sum(items)"},{"question":"Overview Write a function `capitalize_words` that takes a string and returns a new string with the first letter of each word capitalized. Words are defined as sequences of characters separated by whitespace. ```python capitalize_words(\\"hello world\\") => \\"Hello World\\" capitalize_words(\\"capitalize every first letter\\") => \\"Capitalize Every First Letter\\" ``` Specifics - The function should handle multiple spaces between words properly. - The function should not alter the case of any other letters besides the first one of each word. - Words may contain non-alphabetic characters, which should remain unchanged. - The function should handle empty strings correctly without errors. - Punctuation within or at the end of words should not affect capitalization. For example, \\"hello-world\\" should become \\"Hello-world\\".","solution":"def capitalize_words(s): Returns a new string with the first letter of each word capitalized. Words are defined as sequences of characters separated by whitespace. return \' \'.join(word.capitalize() for word in s.split())"},{"question":"You are tasked with implementing two functions and writing doc tests for them. These functions will be used to process and manipulate strings. Here are the two functions: 1. **capitalize_words**: - This function takes a single string as input and returns a new string where the first letter of each word is capitalized. Words in the string are separated by spaces. - If given an empty string, it should return an empty string. 2. **count_vowels**: - This function takes a single string as input and returns an integer representing the number of vowels (a, e, i, o, u, both uppercase and lowercase) in the string. - If the string is empty, it should return 0. Once you have implemented both functions, write exactly two doc tests for each function to ensure their correctness. # Example implementation for doc tests: ```python def uppercase(string): Function returns the input string in uppercase >>> uppercase(\'hello\') \'HELLO\' >>> uppercase(\'\') \'\' return string.upper() ``` Guidelines: 1. Implement the following functions: ```python def capitalize_words(s): Returns a new string with the first letter of each word capitalized >>> capitalize_words(\'hello world\') \'Hello World\' >>> capitalize_words(\'\') \'\' # Your code here def count_vowels(s): Returns the number of vowels in the string >>> count_vowels(\'hello\') 2 >>> count_vowels(\'\') 0 # Your code here ``` 2. Make sure to test the functions against both empty and non-empty strings. 3. Ensure that the doc tests are perfectly formatted to run successfully with the doctest module. Good Luck!","solution":"def capitalize_words(s): Returns a new string with the first letter of each word capitalized >>> capitalize_words(\'hello world\') \'Hello World\' >>> capitalize_words(\'\') \'\' return \' \'.join(word.capitalize() for word in s.split()) def count_vowels(s): Returns the number of vowels in the string >>> count_vowels(\'hello\') 2 >>> count_vowels(\'\') 0 vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"You are given a robot starting at position (0, 0) on an infinite grid. The robot can move in four possible directions: \\"U\\" (up), \\"D\\" (down), \\"L\\" (left), and \\"R\\" (right). The robot follows a sequence of instructions given as a string consisting of characters \'U\', \'D\', \'L\', and \'R\'. Write a function to determine if the robot returns to its original starting position after completing all the moves in the sequence. Return true if it does, otherwise return false. Example 1: Input: instructions = \\"UD\\" Output: true Explanation: The robot moves up, then moves down. Example 2: Input: instructions = \\"LL\\" Output: false Explanation: The robot moves left twice, so it never returns to the origin. Example 3: Input: instructions = \\"RRDD\\" Output: false Explanation: The robot moves right twice and then down twice. Example 4: Input: instructions = \\"LDRRULDL\\" Output: false Explanation: The robot does not return to the origin after performing all the movements. Constraints: - 1 <= instructions.length <= 10^4 - instructions[i] is \'U\', \'D\', \'L\', or \'R\'","solution":"def judge_circle(instructions): Returns True if the robot returns to the origin after executing all instructions. x, y = 0, 0 for instruction in instructions: if instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 elif instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Given a string `expression` consisting of lowercase letters, digits, and parentheses, implement a function that checks whether the parentheses are balanced and correctly nested. For the parentheses to be balanced, each opening parenthesis must have a corresponding closing parenthesis in the correct order. Your function should return `True` if the parentheses in the input string are balanced, otherwise, return `False`. Examples: - `\\"(a+b)*(c-d)\\"` should return `True` - `\\"((a+b)*(c-d))\\"` should return `True` - `\\"((a+b)*(c-d)\\"` should return `False` - `\\"(a+b))+(c-d)(\\"` should return `False` **Note:** - The string may contain letters, digits, and the operators `+`, `-`, `*`, `/`, but these characters do not affect the balance of the parentheses. - You can assume the input string will always be non-empty. **Function Signature:** ```python def is_parentheses_balanced(expression: str) -> bool: pass ```","solution":"def is_parentheses_balanced(expression: str) -> bool: Checks if the parentheses in the expression are balanced and properly nested. stack = [] for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Define a function that simulates a basic calculator to perform arithmetic operations. The function should: - Accept a string representing a mathematical expression as its parameter (e.g., `\\"3 + 5\\"`, `\\"10 - 4\\"`, `\\"6 * 7\\"`, `\\"8 / 2\\"`) - The input string will contain exactly two integers and one of the operators: `+`, `-`, `*`, `/` (each separated by a space). - Return the result of the arithmetic operation as either an integer or float, depending on the result. **Note:** The division should include floats. You can assume that the input will always be valid. Example ``` \\"3 + 5\\" --> 8 \\"10 - 4\\" --> 6 \\"6 * 7\\" --> 42 \\"8 / 2\\" --> 4.0 ```","solution":"def basic_calculator(expression): Simulates a basic calculator to perform arithmetic operations. Parameters: expression (str): A string representing a mathematical expression (e.g., \\"3 + 5\\"). Returns: int/float: The result of the arithmetic operation. # Split the expression into components num1, operator, num2 = expression.split() # Convert the numbers from strings to integers num1 = int(num1) num2 = int(num2) # Perform the appropriate arithmetic operation if operator == \'+\': return num1 + num2 elif operator == \'-\': return num1 - num2 elif operator == \'*\': return num1 * num2 elif operator == \'/\': return num1 / num2 # Note that division always returns a float"},{"question":"Given an integer array `arr` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. Your function should return a tuple of the two indices. If no such indices exist, return an empty tuple. **Example:** - Input: `arr = [2, 7, 11, 15], target = 9` - Output: `(0, 1)` - Input: `arr = [3, 2, 4], target = 6` - Output: `(1, 2)` - Input: `arr = [3, 3], target = 6` - Output: `(0, 1)` **Notes:** - You can assume the function will always be called with an array of length at least 2. - The function should be optimized for time complexity.","solution":"def two_sum(arr, target): Given an array of integers and a target integer, return indices of the two numbers such that they add up to the target. :param arr: List[int] - list of integers :param target: int - target sum :return: Tuple[int, int] - indices of the two numbers that add up to target hashmap = {} for i, num in enumerate(arr): diff = target - num if diff in hashmap: return (hashmap[diff], i) hashmap[num] = i return ()"},{"question":"Write a function `min_sum` that receives an array of integers and an integer `k`. The function returns the minimum sum that can be obtained by selecting exactly `k` elements from the given array. Note that the selected elements do not need to be contiguous. For example: ```python min_sum([3, 5, 1, 9, 7], 3) == 9 ``` Here, the minimum sum of selecting `3` elements from `[3, 5, 1, 9, 7]` is `9` (which can be achieved by selecting the elements `[1, 3, 5]`). # Constraints - The array length will be between `1` and `100` inclusive. - The array elements will be integers between `-1000` and `1000` inclusive. - `k` will be a positive integer such that `1 <= k <= len(array)`. # Additional Examples ```python min_sum([4, 2, 7, 1], 2) == 3 # The minimum sum of selecting 2 elements is 3 (selecting 1 and 2) min_sum([-1, -2, -3, -4], 2) == -7 # The minimum sum of selecting 2 elements is -7 (selecting -4 and -3) min_sum([10, 20, 30], 1) == 10 # The minimum sum of selecting 1 element is 10 ``` # Implementation ```python def min_sum(array, k): # Sort the array in ascending order array.sort() # Return the sum of the first k elements return sum(array[:k]) # Test cases print(min_sum([3, 5, 1, 9, 7], 3)) # Output: 9 print(min_sum([4, 2, 7, 1], 2)) # Output: 3 print(min_sum([-1, -2, -3, -4], 2)) # Output: -7 print(min_sum([10, 20, 30], 1)) # Output: 10 ```","solution":"def min_sum(array, k): Returns the minimum sum that can be obtained by selecting exactly k elements from the given array. # Sort the array in ascending order array.sort() # Return the sum of the first k elements return sum(array[:k])"},{"question":"You are given an array of n integers. You need to find an integer x such that the sum of the absolute differences between x and all elements of the array is minimized. In other words, you need to find x such that sum_{i=1}^{n} |a_i - x| is minimized. -----Input----- The first line contains a single integer t (1 leq t leq 100) – the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 leq n leq 10^5) – the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) – the elements of the array. -----Output----- For each test case output the integer x such that the sum of the absolute differences between x and all elements of the array is minimized. If there are multiple possible values for x, output the smallest one. -----Example----- Input 2 3 1 2 3 4 1 1 4 4 Output 2 1 -----Note----- In the first test case, the possible values of x are: - For x=1, the sum is |1-1| + |2-1| + |3-1| = 0 + 1 + 2 = 3 - For x=2, the sum is |1-2| + |2-2| + |3-2| = 1 + 0 + 1 = 2 - For x=3, the sum is |1-3| + |2-3| + |3-3| = 2 + 1 + 0 = 3 The minimum sum is obtained for x=2. In the second test case, the possible values of x are: - For x=1, the sum is |1-1| + |1-1| + |4-1| + |4-1| = 0 + 0 + 3 + 3 = 6 - For x=2, the sum is |1-2| + |1-2| + |4-2| + |4-2| = 1 + 1 + 2 + 2 = 6 - For x=3, the sum is |1-3| + |1-3| + |4-3| + |4-3| = 2 + 2 + 1 + 1 = 6 - For x=4, the sum is |1-4| + |1-4| + |4-4| + |4-4| = 3 + 3 + 0 + 0 = 6 Although the sums are the same for x=1, x=2, x=3, and x=4, the smallest x is 1. Thus, the output is 1.","solution":"def minimize_absolute_differences(arr): Given an array of integers, find an integer x such that the sum of the absolute differences between x and all elements of the array is minimized. arr.sort() median_index = (len(arr) - 1) // 2 return arr[median_index] def solve(test_cases): results = [] for n, arr in test_cases: result = minimize_absolute_differences(arr) results.append(result) return results"},{"question":"Write a function that takes an array of integers and returns the smallest positive integer that does not appear in the array. The array can be empty or contain positive and negative integers. Do not use built-in sorting functions to solve this problem. Aim for a solution with linear time complexity.","solution":"def find_smallest_missing_positive_integer(arr): Returns the smallest positive integer that does not appear in the array. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Given a list of integers, write a function that finds the maximum product of any three integers within that list. Return \\"Not valid\\" if the input list does not contain at least three integers or contains any non-integer element. For example: ``` max_product([1, 2, 3, 4]) => 24 max_product([1, -10, -10, 5, 2]) => 500 max_product([1]) => \\"Not valid\\" max_product([1, 2, \'a\', 4]) => \\"Not valid\\" ``` # Constraints: - List must contain at least three integers. - Any non-integer element in the list will result in a \\"Not valid\\" return value. - The function should handle both positive and negative integers. ```Haskell In Haskell, the return type is a Maybe Integer which returns Nothing if the input list does not contain at least three integers or if there are any non-integer elements.\\" ```","solution":"def max_product(lst): Finds the maximum product of any three integers within the given list. :param lst: List of integers :return: Maximum product of any three integers or \\"Not valid\\" if the list is invalid if len(lst) < 3 or any(not isinstance(i, int) for i in lst): return \\"Not valid\\" lst.sort() option1 = lst[-1] * lst[-2] * lst[-3] option2 = lst[0] * lst[1] * lst[-1] return max(option1, option2)"},{"question":"A librarian is trying to rearrange books on a shelf based on their thickness to form a new pattern. The librarian wants each test case to define how many books of each thickness are stacked together. Help the librarian by coding this problem based on the thickness pattern. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N, which represents the number of different thickness categories. -----Output:----- For each test case, output the pattern where the thickness categories form a pyramid shape with the thickest book in the center. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 50 -----Sample Input:----- 2 3 4 -----Sample Output:----- 1 22 333 1 22 333 4444 -----EXPLANATION:----- In the first test case with N=3, the books are arranged in such a way that: - The first line has 1 book of thickness 1. - The second line has 2 books of thickness 2. - The third line has 3 books of thickness 3. In the second test case with N=4, the books are arranged as follows: - The first line has 1 book of thickness 1. - The second line has 2 books of thickness 2. - The third line has 3 books of thickness 3. - The fourth line has 4 books of thickness 4.","solution":"def book_arrangement_patterns(T, thicknesses): Given the number of test cases and a list of thickness values, prints the book arrangement pattern for each test case. Parameters: - T: int - number of test cases - thicknesses: list of int - list of thickness categories counts for each test case Returns: - results: list of list of str - pattern for each test case as list of strings results = [] for N in thicknesses: result = [] for i in range(1, N+1): result.append(str(i) * i) results.append(result) return results"},{"question":"In a certain university, students are given grades on a scale from 0 to 100. If a student scores less than 40, it is considered a failing grade. However, the university follows a rounding policy for the grades, according to the rules below: 1. If the difference between the grade and the next multiple of 5 is less than 3, round the grade up to the next multiple of 5. 2. If the value of the grade is below 38, no rounding occurs as it is still a failing grade. Write a function that takes an array of integers representing grades before rounding, and returns an array of integers representing the grades after rounding. Input The function will receive an array of integers, each integer representing a student\'s grade before rounding. There is no case of an empty array input. Output The function should return an array of integers, each representing a student\'s grade after applying the rounding rules. Examples ```python grades = [73, 67, 38, 33] # The grade 73 is rounded up to 75. # The grade 67 remains 67. # The grade 38 remains 38. # The grade 33 remains 33. # Therefore, the output should be [75, 67, 38, 33]. ```","solution":"def round_grades(grades): Rounds grades according to the university policy. Parameters: grades (list of int): List of integer grades before rounding. Returns: list of int: List of integer grades after rounding. rounded_grades = [] for grade in grades: if grade < 38: rounded_grades.append(grade) else: next_multiple_of_5 = ((grade // 5) + 1) * 5 if next_multiple_of_5 - grade < 3: rounded_grades.append(next_multiple_of_5) else: rounded_grades.append(grade) return rounded_grades"},{"question":"Two rival football teams are preparing strategies for their upcoming match. The coach from each team provides a sequence of moves they plan to make during the game. However, they realize that some moves might be the same. To create a robust strategy, they want to know the sequence of unique common moves in the order they appear in the second team\'s strategy. Implement the following function: ```python def common_moves(team1, team2): ``` The parameters `team1` and `team2` are lists of strings representing the moves of Team 1 and Team 2 respectively. You should return a list of strings containing the moves that appear in both `team1` and `team2`, maintaining the order of their first appearance in `team2`. If there are no common moves, return `[\\"no common moves\\"]`.","solution":"def common_moves(team1, team2): Returns a list of unique common moves in the order they appear in team2\'s strategy. If there are no common moves, returns [\\"no common moves\\"]. common = [] seen_moves = set(team1) for move in team2: if move in seen_moves and move not in common: common.append(move) return common if common else [\\"no common moves\\"]"},{"question":"Given a list of integers representing the heights of buildings, you have to design a lightweight rectangle that can span from the ground (height 0) up to the height of the tallest building contiguous block of buildings such that the rectangle will cover the heights of all buildings within that block. The goal is to find the maximum rectangle area that can be formed from contiguous blocks of buildings with varying height from the list provided. Example 1: Input: [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The rectangle can span buildings with heights (5 and 6) for a width of 2. Area = 5 * 2 = 10. Example 2: Input: [2, 4] Output: 4 Explanation: The rectangle can span the building with height 4 for a width of 1. Area = 4 * 1 = 4. Note: - The number of buildings, n, in the input list will be in the range [1, 1000]. - The height of each building will be a non-negative integer within the range [0, 10000].","solution":"def largest_rectangle_area(heights): Finds the largest rectangle area in the histogram given by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Create a function named `is_palindrome` that takes a single string argument and returns `True` if the string is a palindrome and `False` otherwise. A string is considered a palindrome if it reads the same forwards and backwards, ignoring case and non-alphanumeric characters.","solution":"import re def is_palindrome(s): Checks if the provided string is a palindrome, ignoring case and non-alphanumeric characters. Args: s (str): The string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase filtered_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the processed string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Write a function `camel_to_snake` that converts a given camelCase string into snake_case. For example: ``` Input: \'camelCaseString\' Output: \'camel_case_string\' Input: \'thisIsATest\' Output: \'this_is_a_test\' Input: \'convertToSnakeCase\' Output: \'convert_to_snake_case\' ``` The input will always be a non-empty string containing only alphabetic characters. The first letter will be in lowercase.","solution":"def camel_to_snake(camel_str): Converts a camelCase string into snake_case. Parameters: camel_str (str): The input camelCase string. Returns: str: The converted snake_case string. snake_str = \'\' for char in camel_str: if char.isupper(): snake_str += \'_\' + char.lower() else: snake_str += char return snake_str"},{"question":"*** Palindromic Sum Checker *** Create a function that checks whether the sum of the elements of a given integer array is a palindromic number. A palindromic number is a number that remains the same when its digits are reversed (e.g., 121, 909). You must return True if the sum is a palindromic number, otherwise return False. You are not allowed to use any form of loops in your solution. # Example ```python palindromic_sum([1, 2, 3, 4]) # Returns False, since 1 + 2 + 3 + 4 = 10, which is not a palindrome palindromic_sum([11, 22, 3, 4]) # Returns True, since 11 + 22 + 3 + 4 = 40, which is a palindrome ```","solution":"def palindromic_sum(arr): Returns True if the sum of the elements in the array is a palindromic number, otherwise returns False. Parameters: arr (list of int): A list of integers Returns: bool: True if the sum is a palindromic number, False otherwise total_sum = sum(arr) str_sum = str(total_sum) return str_sum == str_sum[::-1]"},{"question":"You are given a list of integers and tasked with finding the number of distinct pairs (i, j) such that the product of the elements at those indices is even. A product is even if and only if at least one of the elements is even. Create an efficient solution to calculate the total number of such distinct pairs. -----Input:----- - The first line contains T, the number of test cases. - For each test case: - The first line contains N, the number of elements in the array. - The second line contains N integers representing the elements of the array. -----Output:----- A single integer for each test case, representing the number of distinct pairs (i, j) where 1 leq i < j leq N and the product a[i] * a[j] is even. -----Constraints----- - 1 leq T leq 10^2 - 1 leq N leq 10^4 - 1 leq a[i] leq 10^9 for each valid i. The total sum of all N across all test cases will not exceed 10^6. -----Sample Input 1:----- 2 3 1 2 3 4 5 7 4 6 -----Sample Output 1:----- 2 5","solution":"def count_even_product_pairs(arr): Returns the number of distinct pairs (i, j) where 0 <= i < j < N and arr[i] * arr[j] is even. even_count = sum(1 for x in arr if x % 2 == 0) odd_count = len(arr) - even_count # Total pairs is combination C(N, 2) = N * (N-1) // 2 total_pairs = len(arr) * (len(arr) - 1) // 2 # Pairs with both elements odd are C(odd_count, 2) = odd_count * (odd_count-1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 # Even product pairs are total pairs minus odd pairs even_product_pairs = total_pairs - odd_pairs return even_product_pairs def solve(test_cases): results = [] for i in range(len(test_cases)): N, arr = test_cases[i] results.append(count_even_product_pairs(arr)) return results"},{"question":"A company stores employee data in a dictionary, where the keys are employee IDs (integers) and the values are tuples containing the employee name (string) and their calculated performance score (integer). You are asked to implement the following functions: 1. `top_performers(employee_data, n)`: Given the `employee_data` dictionary and an integer `n`, this function should return a list of the top `n` employees based on their performance scores. If two employees have the same performance score, they should be ordered by their employee ID in ascending order. 2. `performance_summary(employee_data)`: Given the `employee_data` dictionary, this function should return a dictionary summarizing the employee performance scores. The returned dictionary should have two keys: `\\"average\\"` which maps to the average performance score of all employees, and `\\"median\\"` which maps to the median performance score of all employees. If the number of employees is even, the median should be the average of the two middle performance scores. Implement: ```python def top_performers(employee_data, n): # returns list of top n employee IDs based on their performance scores def performance_summary(employee_data): # returns dictionary with keys \\"average\\" and \\"median\\" summarizing performance scores ``` **Examples:** ```python employee_data = { 101: (\\"Alice\\", 95), 102: (\\"Bob\\", 85), 103: (\\"Charlie\\", 95), 104: (\\"David\\", 75), 105: (\\"Eve\\", 90), 106: (\\"Frank\\", 80) } top_performers(employee_data, 3) # returns [101, 103, 105] # Alice and Charlie have highest scores of 95 and Eve has third highest of 90 performance_summary(employee_data) # returns {\\"average\\": 86.67, \\"median\\": 87.5} # Average score: (95 + 85 + 95 + 75 + 90 + 80) / 6 = 86.67 # Median score: (85 + 90) / 2 = 87.5 ``` **Assumptions:** - There will always be at least one employee in `employee_data`. - The number of employees `n` for `top_performers` will always be less than or equal to the number of employees in `employee_data`.","solution":"def top_performers(employee_data, n): Returns list of top n employee IDs based on their performance scores. If two employees have the same performance score, they are ordered by employee ID in ascending order. sorted_employees = sorted(employee_data.items(), key=lambda x: (-x[1][1], x[0])) return [emp[0] for emp in sorted_employees[:n]] def performance_summary(employee_data): Returns dictionary summarizing employee performance scores with keys \\"average\\" and \\"median\\". performance_scores = [data[1] for data in employee_data.values()] average_score = sum(performance_scores) / len(performance_scores) sorted_scores = sorted(performance_scores) n = len(sorted_scores) if n % 2 == 1: median_score = sorted_scores[n // 2] else: median_score = (sorted_scores[n // 2 - 1] + sorted_scores[n // 2]) / 2 return {\\"average\\": round(average_score, 2), \\"median\\": median_score}"},{"question":"Write a function `add_next` that takes a list of integers `lst` and returns a new list where each element is the sum of the original element and the next element in the list. The last element of the original list should just be added to 0 (since there is no next element). For example: `add_next([1, 2, 3, 4])` => `[3, 5, 7, 4]` `add_next([10, 20, 30])` => `[30, 50, 30]` `add_next([42])` => `[42]` Be sure to handle empty lists as well. `add_next([])` should return an empty list `[]`.","solution":"def add_next(lst): Returns a new list where each element is the sum of the original element and the next element in the list. For the last element in the original list, add 0 (since there is no next element). if not lst: return [] result = [] for i in range(len(lst) - 1): result.append(lst[i] + lst[i + 1]) if lst: result.append(lst[-1]) return result"},{"question":"Write a function ```python rearrange_palindrome(s) ``` that takes a string `s` as input and returns a rearranged version of the string such that it forms a palindrome if possible. If it is not possible to rearrange the string to form a palindrome, return an empty string \\"\\". E.g. ```python rearrange_palindrome(\\"civic\\") == \\"civic\\" rearrange_palindrome(\\"ivicc\\") == \\"civic\\" rearrange_palindrome(\\"hello\\") == \\"\\" rearrange_palindrome(\\"abcba\\") == \\"abcba\\" rearrange_palindrome(\\"aabbcd\\") == \\"\\" ``` **Note**: In cases where multiple palindromic rearrangements exist, any valid palindrome can be returned.","solution":"def rearrange_palindrome(s): Rearranges the string s to form a palindrome if possible. If it is not possible to rearrange s to form a palindrome, returns an empty string \\"\\". from collections import Counter char_count = Counter(s) odd_chars = [char for char, count in char_count.items() if count % 2 != 0] if len(odd_chars) > 1: return \\"\\" half_palindrome = [] middle_char = \\"\\" for char, count in char_count.items(): if count % 2 != 0: middle_char = char half_palindrome.append(char * (count // 2)) first_half = \\"\\".join(half_palindrome) return first_half + middle_char + first_half[::-1]"},{"question":"The Challenge ------------- Create a function or method that validates a string representing a UNIX file path and determines its absolute path. Absolute paths in UNIX start with a forward slash (\'/\'). The function should handle redundant components (like \'.\' and \'..\') as follows: - \'.\' refers to the current directory and should be ignored in the output. - \'..\' refers to the parent directory and should remove the last valid directory from the output path (if any). - Consecutive slashes should be treated as a single slash. In essence, reduce the input path string to its simplest representation without redundant components. Specifications -------------- 1. The input will be a string consisting of characters representing a valid path. 2. The input may contain multiple \'/\' characters. 3. The output should be the absolute path in its simplest form. 4. You may assume that the input will always be a valid UNIX path. Examples -------- ```python assert simplify_path(\\"/home/\\") == \\"/home\\" assert simplify_path(\\"/../\\") == \\"/\\" assert simplify_path(\\"/home//foo/\\") == \\"/home/foo\\" assert simplify_path(\\"/a/./b/../../c/\\") == \\"/c\\" ``` Your task is to implement the function `simplify_path` that takes a string representing a UNIX file path and returns its simplified absolute path.","solution":"def simplify_path(path): Simplifies a given UNIX file path to its absolute path. parts = path.split(\'/\') stack = [] for part in parts: if part == \'\' or part == \'.\': continue elif part == \'..\': if stack: stack.pop() else: stack.append(part) return \'/\' + \'/\'.join(stack)"},{"question":"Given a string representation of a positive integer, your task is to determine the smallest possible number that can be formed using its digits. If the given number contains trailing zeros after any rearrangement, those zeros should be moved to the end of the number. Write a function `smallest_number(n: str) -> str` that takes a string `n` which contains only digits and returns a string representing the smallest possible number. # Examples ```python assert smallest_number(\\"210\\") == \\"102\\" assert smallest_number(\\"30210\\") == \\"10023\\" ``` # Explanation For the input \\"210\\", the smallest number that can be formed is \\"102\\". Note that we don\'t have trailing zeros in this case. For the input \\"30210\\", the smallest number that can be formed is \\"10023\\". The trailing zeros should be moved to the right, converting \\"00123\\" to \\"10023\\".","solution":"def smallest_number(n: str) -> str: Given a string representation of a positive integer, returns the smallest possible number that can be formed using its digits. Trailing zeros after any rearrangement are moved to the end of the number. digits = sorted(n) if digits[0] == \'0\': # Check if there\'s a leading zero for i in range(len(digits)): if digits[i] != \'0\': # Find the first non-zero digit # Swap the first non-zero digit with the first digit (which is \'0\') digits[0], digits[i] = digits[i], \'0\' break return \'\'.join(digits)"},{"question":"# Alien Dictionary Order In a distant galaxy, there is an alien civilization with its own unique alphabet. The alien alphabet is a permutation of the Latin alphabet, and it defines a custom order for the Latin letters. Your task is to write a function that sorts a list of words according to the alien dictionary order. The function must accept two parameters: the alien alphabet permutation and the list of words to be sorted. **Examples:** Given the alien alphabet: `zyxwvutsrqponmlkjihgfedcba` And the list of words: `[\\"apple\\", \\"banana\\", \\"cherry\\"]` The sorted list of words should be: `[\\"cherry\\", \\"banana\\", \\"apple\\"]` Given the alien alphabet: `abcdefghijklmnopqrstuvwxyz` And the list of words: `[\\"cat\\", \\"bat\\", \\"apple\\"]` The sorted list of words should be: `[\\"apple\\", \\"bat\\", \\"cat\\"]` Since the alien alphabet may be reordered, the same word list may yield different results under different alien alphabets. **Constraints:** 1. The alien alphabet will always be a permutation of the Latin alphabet (i.e., \\"abcdefghijklmnopqrstuvwxyz\\"). 2. The list of words is non-empty and can contain lowercase English letters only. 3. The function should not modify the input list. Have fun coding and exploring this alien way of sorting! 😊","solution":"def alien_sort(alien_alphabet, words): Sorts words according to the given alien alphabet order. Parameters: alien_alphabet (str): A string representing the alien alphabet. words (list): A list of words to be sorted. Returns: list: A new list of words sorted according to the alien alphabet order. order_map = {char: index for index, char in enumerate(alien_alphabet)} return sorted(words, key=lambda word: [order_map[char] for char in word])"},{"question":"You have been hired as a software engineer by a renowned social media company. The company is planning to introduce a new feature where users can create and manage \\"groups\\" to share content among members. Your task is to implement a function that determines if a user can access a particular piece of content based on their group memberships. Each user can be a member of multiple groups, and content is shared within groups. If a user requests access to a piece of content, they should be granted access if they belong to at least one group where the content is shared. Write a function `canAccessContent(user_groups, content_groups)` that takes in two lists: 1. `user_groups` - a list of strings representing the groups the user is a member of. 2. `content_groups` - a list of strings representing the groups a piece of content is shared with. The function should return `True` if the user can access the content, and `False` otherwise. -----Input----- The function should accept two lists `user_groups` and `content_groups`. Each list contains group names as strings. -----Output----- Return a boolean value indicating whether the user can access the content. -----Constraints----- - Each list will have at most 100 elements. - Each group name will be a non-empty string of at most 20 characters. - Group names will be unique within each list. - Both lists are not necessarily sorted. -----Example----- Input: user_groups = [\\"groupA\\", \\"groupB\\", \\"groupC\\"] content_groups = [\\"groupX\\", \\"groupY\\", \\"groupA\\"] Output: True Input: user_groups = [\\"groupM\\", \\"groupN\\"] content_groups = [\\"groupX\\", \\"groupY\\", \\"groupZ\\"] Output: False -----Explanation----- - In the first example, the user is a member of \\"groupA\\", which is one of the groups the content is shared with, hence the function returns `True`. - In the second example, there are no common groups between the user and the content, hence the function returns `False`.","solution":"def canAccessContent(user_groups, content_groups): Determines if a user can access a particular piece of content based on their group memberships. Parameters: user_groups (list): A list of strings representing the groups the user is a member of. content_groups (list): A list of strings representing the groups a piece of content is shared with. Returns: bool: True if the user can access the content, and False otherwise. # Use set intersection to find common groups return bool(set(user_groups) & set(content_groups))"},{"question":"Consider a function `convert_seconds` that takes a non-negative integer \'n\' representing a number of seconds. The function should return a string that formats the time duration in the form \\"x hour(s), y minute(s), z second(s)\\". Example: ```python convert_seconds(3661) == \\"1 hour(s), 1 minute(s), 1 second(s)\\" convert_seconds(59) == \\"0 hour(s), 0 minute(s), 59 second(s)\\" convert_seconds(3600) == \\"1 hour(s), 0 minute(s), 0 second(s)\\" ``` Input constraints: `0 <= n <= 86400`","solution":"def convert_seconds(n): Convert a non-negative integer \'n\' representing a number of seconds into a formatted string \\"x hour(s), y minute(s), z second(s)\\". Parameters: n (int): A non-negative integer representing seconds. Returns: str: A formatted string representing hours, minutes, and seconds. hours = n // 3600 n = n % 3600 minutes = n // 60 seconds = n % 60 return f\\"{hours} hour(s), {minutes} minute(s), {seconds} second(s)\\""},{"question":"Complete the function `longest_common_sequence(str1, str2)` that returns the length of the longest common subsequence between `str1` and `str2`. The longest common subsequence is defined as the longest sequence that appears in both `str1` and `str2` in the same order, but not necessarily contiguously. **Notes:** * Both strings will only contain lower-case alphabetic characters (a-z). * The function should be optimized for performance. **Examples:** ```python longest_common_sequence(\'abcdef\', \'acbcf\') ==> 4 # The longest common subsequence is \'abcf\' longest_common_sequence(\'xyz\', \'xyxz\') ==> 3 # The longest common subsequence is \'xyz\' longest_common_sequence(\'abcd\', \'efgh\') ==> 0 # There is no common subsequence ```","solution":"def longest_common_sequence(str1, str2): Determines the length of the longest common subsequence between two strings. # Initializing the DP table dp = [[0] * (len(str2) + 1) for _ in range(len(str1) + 1)] # Filling the DP table for i in range(1, len(str1) + 1): for j in range(1, len(str2) + 1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[len(str1)][len(str2)]"},{"question":"Write a function that takes a nested list as input and returns a new flat list containing all the elements of the nested list, in the same order as they appeared. ```python flatten([[1, 2, [3]], 4, [[5, 6], 7]]) # [1, 2, 3, 4, 5, 6, 7] flatten([[1, [2, [3, 4]], [5, 6]], 7]) # [1, 2, 3, 4, 5, 6, 7] flatten([1, [2], [], [3, [[4]]]]) # [1, 2, 3, 4] flatten([[[[5]]], 6, [], [[7], 8], [9, [10]]]) # [5, 6, 7, 8, 9, 10] ```","solution":"def flatten(nested_list): Returns a new flattened list containing all the elements of the nested_list in the same order. flat_list = [] def _flatten(sublist): for element in sublist: if isinstance(element, list): _flatten(element) else: flat_list.append(element) _flatten(nested_list) return flat_list"},{"question":"You are given an array of integers where each value represents the height of a block. Your task is to determine how much water can be trapped in the gaps between the blocks after it rains. For example, given the input `[0,1,0,2,1,0,1,3,2,1,2,1]`, the amount of water trapped would be `6` units. Here\'s a visual representation: ``` X X~~~X~X X~~~X~XX~XX ``` The `~` represents water units that are trapped between the blocks. Write a function `trap_water(heights)` that takes an array of integers and returns the total amount of trapped water. # Input - An array of integers `heights` where `1 <= len(heights) <= 1000` and each integer is between `0` and `1000`. # Output - An integer representing the total amount of trapped water. # Examples ``` trap_water([0,1,0,2,1,0,1,3,2,1,2,1]) -> 6 trap_water([4,2,0,3,2,5]) -> 9 trap_water([2,1,0,2]) -> 3 ``` Good luck!","solution":"def trap_water(heights): Calculate the total amount of trapped water given heights of blocks. if not heights or len(heights) < 3: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left <= right: if left_max < right_max: if heights[left] < left_max: water_trapped += left_max - heights[left] else: left_max = heights[left] left += 1 else: if heights[right] < right_max: water_trapped += right_max - heights[right] else: right_max = heights[right] right -= 1 return water_trapped"},{"question":"Given an integer array `arr` and a target integer `target`, your task is to find all unique combinations of elements in `arr` where the chosen numbers sum to `target`. Each number in `arr` may be used an unlimited number of times in the combination. The combinations should be returned in a sorted order, with sorted individual combinations. Duplicate combinations should not be returned. For example, given `arr = [2, 3, 6, 7]` and `target = 7`, the solution set should be: ``` [ [2, 2, 3], [7] ] ``` Write a Python function `find_combinations(arr, target)` to solve the problem. # Function Signature ```python def find_combinations(arr: List[int], target: int) -> List[List[int]]: ``` # Constraints - `1 <= len(arr) <= 20` - `1 <= arr[i] <= 50` - `1 <= target <= 500` - Elements in `arr` are unique. - The solution set must not contain duplicate combinations. - The elements of each combination must be in non-descending order. # Example ```python # Example 1 arr = [2, 3, 6, 7] target = 7 print(find_combinations(arr, target)) # Output: [[2, 2, 3], [7]] # Example 2 arr = [2, 3, 5] target = 8 print(find_combinations(arr, target)) # Output: [[2, 2, 2, 2], [2, 3, 3], [3, 5]] ``` # Note - Ensure to explore all possibilities to find the unique combinations. - Consider using backtracking to find the combinations. - Implement optimizations to prune unnecessary paths in your search.","solution":"from typing import List def find_combinations(arr: List[int], target: int) -> List[List[int]]: def backtrack(remaining, comb, start): if remaining == 0: result.append(list(comb)) return elif remaining < 0: return for i in range(start, len(arr)): comb.append(arr[i]) backtrack(remaining - arr[i], comb, i) # not i + 1 because we can reuse same elements comb.pop() result = [] arr.sort() backtrack(target, [], 0) return result"},{"question":"Given a string consisting of alphabetical characters and spaces only, write a function that analyzes the frequency of each character (ignoring spaces) and identifies the most frequently occurring character. If there is a tie between two or more characters, return the one that comes first in alphabetical order. # Function Signature ```python def most_frequent_char(text: str) -> str: ``` # Input - A single string `text` of length `N` (1 ≤ N ≤ 10^6) consisting of lowercase/uppercase alphabetical characters and spaces. # Output - A single character (lowercase) which is the most frequently occurring character in the input string. If there\'s a tie, return the character that is first in the alphabetical order. # Examples ```python assert most_frequent_char(\\"The quick brown fox jumps over the lazy dog\\") == \\"o\\" assert most_frequent_char(\\"hello world\\") == \\"l\\" assert most_frequent_char(\\"abcdefghijklmnopqrstuvwxyz\\") == \\"a\\" assert most_frequent_char(\\"character\\") == \\"a\\" assert most_frequent_char(\\"a aa aaa aaaa\\") == \\"a\\" ``` # Notes - Space characters should be ignored in the frequency count. - The function should be case insensitive, i.e., treat \\"A\\" and \\"a\\" as the same character. Return the result in lowercase. - Consider the efficiency of your solution, especially for large inputs.","solution":"def most_frequent_char(text: str) -> str: from collections import Counter # Converting the input text to lower case and ignoring spaces filtered_text = \'\'.join([char.lower() for char in text if char.isalpha()]) # Counting the frequency of each character freq_counter = Counter(filtered_text) # Finding the character with the maximum frequency most_frequent = min( (char for char, count in freq_counter.items() if count == max(freq_counter.values())), key=lambda char: (freq_counter[char], char) ) return most_frequent"},{"question":"Given an unsorted list of integers, write a function to determine the length of the longest contiguous subarray that has a sum equal to the given value `k`. If no such subarray exists, return 0. Your function should be efficient and handle large inputs. **Input**: Two inputs will be provided to the function: a list of integers `nums` and an integer `k`. **Output**: The function should return an integer representing the length of the longest contiguous subarray with a sum equal to `k`. Example: ``` Input: nums = [1, -1, 5, -2, 3], k = 3 Output: 4 Input: nums = [-2, -1, 2, 1], k = 1 Output: 2 Input: nums = [1, 2, 3], k = 7 Output: 0 ``` Note: - You may assume all input values will fit in a 32-bit signed integer. - The function signature should be `def findLongestSubarray(nums: List[int], k: int) -> int:`","solution":"def findLongestSubarray(nums, k): Returns the length of the longest contiguous subarray with a sum equal to k. If no such subarray exists, return 0. sum_map = {0: -1} # map to store sum up to the current index current_sum = 0 max_length = 0 for i, num in enumerate(nums): current_sum += num if (current_sum - k) in sum_map: max_length = max(max_length, i - sum_map[current_sum - k]) if current_sum not in sum_map: sum_map[current_sum] = i return max_length"},{"question":"# Task: Write a function `all_substrings` that takes a string as input and returns a list containing all the unique substrings of that string. The substrings should be sorted by their length and lexicographical order if lengths are equal. # Examples: `all_substrings(\\"abc\\")` should return: [\\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\"] `all_substrings(\\"ab\\")` should return: [\\"a\\", \\"b\\", \\"ab\\"] Note: Avoid adding duplicate substrings in the list.","solution":"def all_substrings(s): Returns a list of all unique substrings of the input string, sorted by length and lexicographic order. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return sorted(substrings, key=lambda x: (len(x), x))"},{"question":"Complete the function `difference_of_squares`/`differenceOfSquares` (or equivalent, depending on your language) that calculates the difference between the square of the sum and the sum of the squares of the first **n** natural numbers. The difference of squares is defined as: - **Square of the sum** of the first n natural numbers is: ((sum_{i=1}^{n} i)^2) - **Sum of the squares** of the first n natural numbers is: (sum_{i=1}^{n} i^2) - The result is: ((sum_{i=1}^{n} i)^2 - sum_{i=1}^{n} i^2) You may assume the input is always a non-negative integer. Examples ~~~if-not:nasm ```python difference_of_squares(5) ==> 170 difference_of_squares(10) ==> 2640 difference_of_squares(1) ==> 0 ``` ~~~ ~~~if:nasm ``` mov edi, 5 call difference_of_squares ; returns 170 mov edi, 10 call difference_of_squares ; returns 2640 mov edi, 1 call difference_of_squares ; returns 0 mov edi, 15 call difference_of_squares ; returns 13160 mov edi, 0 call difference_of_squares ; returns 0 ``` ~~~","solution":"def difference_of_squares(n): Returns the difference between the square of the sum and the sum of the squares of the first n natural numbers. sum_of_n = sum(range(1, n + 1)) square_of_sum = sum_of_n ** 2 sum_of_squares = sum(i ** 2 for i in range(1, n + 1)) return square_of_sum - sum_of_squares"},{"question":"A group of friends is planning a hiking trip and they need to distribute their supplies evenly among themselves. They have a list of supplies of different weights, and they want to minimize the maximum load any one friend has to carry. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of: - First line: an integer F, the number of friends. - Second line: an integer S, the number of supplies. - Third line: S space-separated integers representing the weight of each supply. -----Output:----- For each test case, output in a single line the minimum possible maximum load any friend has to carry. -----Constraints----- - 1 leq T leq 10 - 1 leq F leq 100 - 1 leq S leq 10^5 - 1 leqweight_of_supply_ileq 10^9 -----Sample Input:----- 2 3 5 1 2 3 4 5 2 5 1 2 3 4 5 -----Sample Output:----- 6 9 -----EXPLANATION:----- In the first test case, the minimum possible maximum load any friend has to carry is 6. Each friend can carry the supplies in the following way: [1, 5], [2, 4], [3]. In the second test case, the minimum possible maximum load any friend has to carry is 9. Each friend can carry the supplies in the following way: [1, 4, 4], [2, 3].","solution":"def can_distribute(weights, F, max_load): current_load = 0 friends_used = 1 for weight in weights: if current_load + weight > max_load: friends_used += 1 current_load = weight if friends_used > F: return False else: current_load += weight return True def minimize_maximum_load(T, test_cases): results = [] for i in range(T): F = test_cases[i][0] S = test_cases[i][1] weights = test_cases[i][2] low, high = max(weights), sum(weights) while low < high: mid = (low + high) // 2 if can_distribute(weights, F, mid): high = mid else: low = mid + 1 results.append(low) return results # Helper function to read the input data def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): F = int(lines[idx]) S = int(lines[idx+1]) weights = list(map(int, lines[idx+2].split())) test_cases.append((F, S, weights)) idx += 3 return T, test_cases"},{"question":"Task Given an integer array and a target integer, find the two integers in the array which sum up to the target integer and return their indices. The solution should consider the scenario where there is exactly one solution, and each element from the array can only be used once. # Example For nums = [2, 7, 11, 15] and target = 9, the output should be `[0, 1]`. Explanation: - nums[0] + nums[1] = 2 + 7 = 9, which is the target value. - So, the indices are [0, 1]. # Input/Output - `[input]` integer array `nums` An array of integers, representing the list of numbers. Constraints: 2 ≤ nums.length ≤ 100, -10^9 ≤ nums[i] ≤ 10^9. - `[input]` integer `target` An integer representing the target sum. Constraints: -10^9 ≤ target ≤ 10^9. [Example Solution] ```python def two_sum(nums, target): hashmap = {} for i, num in enumerate(nums): complement = target - num if complement in hashmap: return [hashmap[complement], i] hashmap[num] = i ``` - `[output]` integer array of length 2 The output should be the indices of the two integers in the array that add up to the target.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. :param nums: List[int] - List of integers :param target: int - Target sum :return: List[int] - Indices of the two numbers adding up to target hashmap = {} for i, num in enumerate(nums): complement = target - num if complement in hashmap: return [hashmap[complement], i] hashmap[num] = i"},{"question":"You are building a software that helps in automating the booking of meeting rooms in an office. Each meeting room can be booked by a single team for specific hour slots throughout the week, and no two meetings can overlap in any room. You need to write a program that validates a list of room bookings to ensure there are no conflicts. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case starts with a line containing an integer N, the number of bookings. - The next N lines each contain three integers room, start, and end, where room is the room number (an integer), and start and end represent the start and end time of the booking in 24-hour format (integers ranging from 0 to 23). -----Output:----- For each test case, output \\"YES\\" if all bookings are valid with no conflicts, otherwise output \\"NO\\". -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 1000 - 0 leq room leq 100 - 0 leq start < end leq 23 -----Sample Input:----- 2 3 1 9 10 1 10 11 1 11 12 2 2 13 15 2 14 16 -----Sample Output:----- YES NO -----Explanation:----- In the first test case, the bookings for room 1 do not overlap, so the output is \\"YES\\". In the second test case, the bookings for room 2 overlap between 14 and 15, so the output is \\"NO\\".","solution":"def validate_bookings(T, test_cases): results = [] for test_case in test_cases: N = test_case[\'N\'] bookings = test_case[\'bookings\'] room_bookings = {} valid = True for booking in bookings: room, start, end = booking if room not in room_bookings: room_bookings[room] = [] for booked_start, booked_end in room_bookings[room]: if not (end <= booked_start or start >= booked_end): valid = False break if not valid: break room_bookings[room].append((start, end)) if valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function named `shortest_substring` that takes a string `s` and a string `t` as arguments, and returns the shortest contiguous substring of `s` that contains all the characters in `t` (including duplicates). If there is no such substring, return an empty string. # Example: ``` Input: s = \\"ADOBECODEBANC\\", t = \\"ABC\\" Output: \\"BANC\\" Input: s = \\"this is a test string\\", t = \\"tist\\" Output: \\"t stri\\" Input: s = \\"hello\\", t = \\"world\\" Output: \\"\\" ``` # Constraints: - `s` and `t` consist only of printable ASCII characters. - The length of `s` will not exceed 10,000. - The length of `t` will not exceed 100.","solution":"def shortest_substring(s, t): from collections import Counter if not s or not t: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = {} ans = float(\\"inf\\"), None, None # (window length, left, right) while r < len(s): character = s[r] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"Simon is managing an inventory system for a large supermarket. There are N different products in the store, and each product has a unique ID from 1 to N. The supermarket system tracks the stock levels for each product and supports a set of operations to update and query the inventory. The system processes Q operations, each operation is one of the following types: 1. \\"add X Y\\" - Add Y units to the stock of product X. 2. \\"remove X Y\\" - Remove Y units from the stock of product X. It\'s guaranteed that Y will be less than or equal to the current stock level of product X. 3. \\"query X\\" - Output the current stock level of product X. -----Input:----- - The first line of the input contains an integer N — the number of products. - The second line contains N integers representing the initial stock levels of each product from 1 to N. - The third line contains an integer Q — the number of operations. - Each of the next Q lines contains a string that describes an operation. An operation is either in the form of \\"add X Y\\", \\"remove X Y\\" or \\"query X\\". -----Output:----- For each \\"query X\\" operation, print a single integer representing the current stock level of product X. -----Constraints----- - 1 leq N leq 10^5 - 0 leq text{Initial stock level of any product} leq 10^9 - 1 leq Q leq 10^5 - 1 leq X leq N - 1 leq Y leq 10^6 -----Sample Input:----- 5 10 20 30 40 50 6 add 1 5 remove 2 10 query 1 query 2 add 4 20 query 4 -----Sample Output:----- 15 10 60 -----Explanation:----- Example case 1: After the first operation \\"add 1 5\\", the stock of product 1 becomes 15. After the second operation \\"remove 2 10\\", the stock of product 2 becomes 10. The third operation \\"query 1\\" returns the current stock of product 1 which is 15. The fourth operation \\"query 2\\" returns the current stock of product 2 which is 10. After the fifth operation \\"add 4 20\\", the stock of product 4 becomes 60. The sixth operation \\"query 4\\" returns the current stock of product 4 which is 60.","solution":"def process_inventory_operations(N, initial_stocks, Q, operations): Processes the inventory operations and returns the results of the queries. Parameters: N (int): Number of products. initial_stocks (list of int): List of initial stock levels of each product. Q (int): Number of operations. operations (list of str): List of operations to be processed. Returns: list of int: Results of the \\"query\\" operations. # Initialize the stock levels for each product inventory = initial_stocks[:] results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": product_id = int(parts[1]) - 1 amount = int(parts[2]) inventory[product_id] += amount elif parts[0] == \\"remove\\": product_id = int(parts[1]) - 1 amount = int(parts[2]) inventory[product_id] -= amount elif parts[0] == \\"query\\": product_id = int(parts[1]) - 1 results.append(inventory[product_id]) return results"},{"question":"# Task You are given an array of integers. Your task is to calculate the number of contiguous subarrays where the sum of the subarray is an even number. # Example For `[1, 2, 3, 4]`, the output should be `4`. The valid subarrays are `[2]`, `[1, 3]`, `[3, 1]`, `[1, 2, 3, 4]`. # Input/Output - `[input]` array of integers `arr` - `1 ≤ arr.length ≤ 1000` - `-10^5 ≤ arr[i] ≤ 10^5` - `[output]` an integer The number of contiguous subarrays where the sum is even.","solution":"def count_even_sum_subarrays(arr): Returns the count of contiguous subarrays where the sum of the subarray is an even number. def is_even(num): return num % 2 == 0 even_count = 0 for start in range(len(arr)): current_sum = 0 for end in range(start, len(arr)): current_sum += arr[end] if is_even(current_sum): even_count += 1 return even_count"},{"question":"Write a function that accepts a list of integers and returns a list of tuples, each containing two elements: the integer and its number of divisors. The returned list should be sorted by the number of divisors in ascending order. If two integers have the same number of divisors, sort those integers in ascending numerical order. For example, given the list: ```python [6, 1, 14, 12] ``` The function should return: ```python [(1, 1), (14, 4), (6, 4), (12, 6)] ``` This is because: - 1 has 1 divisor. - 14 has 4 divisors (1, 2, 7, 14). - 6 has 4 divisors (1, 2, 3, 6). - 12 has 6 divisors (1, 2, 3, 4, 6, 12).","solution":"def count_divisors(n): Returns the number of divisors of n. if n == 1: return 1 count = 0 for i in range(1, int(n ** 0.5) + 1): if n % i == 0: count += 1 if i != n // i: count += 1 return count def sort_by_divisors(lst): Accepts a list of integers and returns a list of tuples, each containing the integer and its number of divisors, sorted by the number of divisors in ascending order. result = [(num, count_divisors(num)) for num in lst] result.sort(key=lambda x: (x[1], x[0])) return result"},{"question":"The local library has a bookshelf organized based on the titles of books. A system is needed to maintain the order of the books when new books are added or existing books are removed. To achieve this, the librarian needs a helper function that inserts a book title into its correct position in a sorted list of titles and another function to remove a book from the list, maintaining the order. Write a function `insertBook` that takes in a list of sorted book titles and a new book title and returns the updated list with the new book title inserted in the correct position. Also, write a function `removeBook` that takes in a list of sorted book titles and a book title to be removed, returning the updated list with the book title removed. Assume no duplicate book titles. -----Input----- The first line contains an integer N, the number of book titles. The next N lines each contain a book title. The next line contains an integer M, the number of operations. The following M lines will each represent an operation in two formats: - `INSERT book_title` - to insert a new book title into the list. - `REMOVE book_title` - to remove an existing book title from the list. N <= 100 1 <= M <= 100 Title will be a string of at most 100 characters. -----Output----- For each operation, print the updated list of books titles in alphabetical order, one title per line. After each operation, print a blank line to separate the outcomes of subsequent operations. -----Example----- Input: 5 Anna Karenina Don Quixote Moby Dick The Odyssey War and Peace 4 INSERT The Great Gatsby REMOVE Don Quixote INSERT A Tale of Two Cities REMOVE Moby Dick Output: Anna Karenina Don Quixote Moby Dick The Great Gatsby The Odyssey War and Peace Anna Karenina Moby Dick The Great Gatsby The Odyssey War and Peace Anna Karenina A Tale of Two Cities Moby Dick The Great Gatsby The Odyssey War and Peace Anna Karenina A Tale of Two Cities The Great Gatsby The Odyssey War and Peace","solution":"def insertBook(book_list, new_book): Inserts a new book into the sorted book list in the correct position. # Find the position where the new book should be inserted index = 0 while index < len(book_list) and book_list[index] < new_book: index += 1 # Insert the new book at the found index book_list.insert(index, new_book) return book_list def removeBook(book_list, book): Removes an existing book from the sorted book list while maintaining order. if book in book_list: book_list.remove(book) return book_list"},{"question":"# Story Managing data in a matrix format often involves transposing the matrix, especially for operations such as matrix multiplication and analysis. Transposing a matrix means converting its rows to columns and vice versa. Given that matrices can hold different data types and sizes, it\'s essential to handle them dynamically. # Info Write a function that takes a two-dimensional matrix (a list of lists) and returns its transpose. The transpose of a matrix is obtained by swapping the rows and columns, such that element at position (i, j) in the original matrix will be at position (j, i) in the transposed matrix. # Examples ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The result will be: ```python [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` Another example: ```python matrix = [ [1, 2], [3, 4], [5, 6] ] ``` The result will be: ```python [ [1, 3, 5], [2, 4, 6] ] ``` ***`Input: A two-dimensional matrix as a list of lists.`*** ***`Output: The transposed matrix as a list of lists.`*** ***`Precondition: The matrix must be a non-empty list of lists with equal length sublists.`*** ```python transpose([[1]]) == [[1]] transpose([[1, 2], [3, 4]]) == [[1, 3], [2, 4]] transpose([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]] ```","solution":"def transpose(matrix): Returns the transpose of a given 2D matrix. :param matrix: List of lists where each sublist has the same length. :return: Transposed matrix as a list of lists. return [list(row) for row in zip(*matrix)]"},{"question":"You are given an m x n binary matrix mat of 1\'s (representing soldiers) and 0\'s (representing civilians). The soldiers are positioned in a row, meaning that 1\'s will appear before any 0\'s in each row. A row i is weaker than a row j if one of the following is true: - The number of soldiers in row i is less than the number of soldiers in row j. - Both rows have the same number of soldiers, but i is less than j. Return the indices of the k weakest rows in the matrix ordered from weakest to strongest. Example 1: Input: mat = [ [1, 1, 0, 0, 0], [1, 1, 1, 1, 0], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [1, 1, 1, 1, 1] ], k = 3 Output: [2, 0, 3] Explanation: The number of soldiers in each row is: - Row 0: 2 - Row 1: 4 - Row 2: 1 - Row 3: 2 - Row 4: 5 The indices of the three weakest rows are [2, 0, 3]. Example 2: Input: mat = [ [1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0], [1, 0, 0, 0] ], k = 2 Output: [0, 2] Explanation: The number of soldiers in each row is: - Row 0: 1 - Row 1: 4 - Row 2: 1 - Row 3: 1 The indices of the two weakest rows are [0, 2]. Constraints: - m == mat.length - n == mat[i].length - 2 <= n, m <= 100 - 1 <= k <= m - matrix[i][j] is either 0 or 1.","solution":"def k_weakest_rows(mat, k): This function takes a binary matrix mat and an integer k, and returns the indices of the k weakest rows in the matrix ordered from weakest to strongest. # Calculate the number of soldiers in each row soldier_count_with_index = [(sum(row), idx) for idx, row in enumerate(mat)] # Sort based on number of soldiers (first) and row index (second) sorted_soldier_count = sorted(soldier_count_with_index) # Get the indices of the k weakest rows weakest_rows = [index for _, index in sorted_soldier_count[:k]] return weakest_rows"},{"question":"Given an array of unique integers sorted in ascending order, find the smallest missing positive integer. The missing positive integer is the smallest positive integer that is not present in the array. Example: Input: nums = [1, 2, 6, 7, 9, 10] Output: 3 Explanation: The smallest missing positive integer is 3. Note: - Your algorithm should run in O(n) time and use O(1) extra space. Hints: - Think about placing each number in its correct position. - Swapping elements to position them in their corresponding indices might help in finding the solution.","solution":"def first_missing_positive(nums): Given an array of unique integers sorted in ascending order, find the smallest missing positive integer. if not nums: return 1 n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Suppose you are given a list of integers that represents the heights of hurdles in a race, and a single integer representing the maximum height a contestant can jump naturally. Each contestant has the option to drink a magic potion that increases their jump height by one unit for each dose consumed. The function should determine the minimum number of doses required for the contestant to be able to jump over all hurdles. Complete the function that accepts two inputs: a list of integers `hurdles` and an integer `max_jump`, and returns the minimum number of doses necessary for the contestant to clear all hurdles. Examples ``` hurdles = [1, 2, 3, 4, 5], max_jump = 3 --> 2 hurdles = [2, 4, 5, 3], max_jump = 5 --> 0 ```","solution":"def min_doses(hurdles, max_jump): Returns the minimum number of doses required for the contestant to clear all hurdles. highest_hurdle = max(hurdles) if max_jump >= highest_hurdle: return 0 else: return highest_hurdle - max_jump"},{"question":"You are given an array representing the in-order traversal of a Binary Search Tree (BST). Your task is to reconstruct the original BST and then output the pre-order traversal of the reconstructed tree. For example: ``` in_order = [2, 3, 5, 6, 7, 8, 10] ``` Your function `reconstruct_bst()` will take the in-order array as input and output a list representing the pre-order traversal of the reconstructed BST. The example above corresponds to the following BST: ``` 6 / 3 8 / / 2 5 7 10 ``` The pre-order traversal of this tree would be: ``` [6, 3, 2, 5, 8, 7, 10] ``` So the expected output will be: ``` reconstruct_bst([2, 3, 5, 6, 7, 8, 10]) == [6, 3, 2, 5, 8, 7, 10] ``` Implement the function `reconstruct_bst(in_order)` to achieve this.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def sorted_array_to_bst(arr): if not arr: return None # Find the middle index mid = len(arr) // 2 # Make the middle element the root root = TreeNode(arr[mid]) # Recursively build the left and right subtrees root.left = sorted_array_to_bst(arr[:mid]) root.right = sorted_array_to_bst(arr[mid+1:]) return root def pre_order_traversal(root): if root is None: return [] return [root.val] + pre_order_traversal(root.left) + pre_order_traversal(root.right) def reconstruct_bst(in_order): bst_root = sorted_array_to_bst(in_order) return pre_order_traversal(bst_root)"},{"question":"Order Processing You manage an e-commerce store and need to ensure all orders are processed efficiently. Each order contains a list of items, with each item represented as a dictionary. Each dictionary has a \'quantity\' key which specifies the number of that item ordered. You need to determine if any order has a total quantity of items that exceed the maximum allowed limit of 100 items: ```python isOrderOverLimit([{\'item_id\': 1, \'quantity\': 40}, {\'item_id\': 2, \'quantity\': 30}, {\'item_id\': 3, \'quantity\': 35}]) ``` The expected result is a boolean, indicating whether any order surpasses the maximum limit. Reference: https://docs.python.org/3/library/functions.html#any","solution":"def isOrderOverLimit(order_items): Determines if any order has a total quantity of items that exceed the maximum allowed limit of 100 items. Parameters: order_items (list): A list of dictionaries, each containing an \'item_id\' and a \'quantity\' Returns: bool: True if the total quantity of items in the order exceeds 100, False otherwise total_quantity = sum(item[\'quantity\'] for item in order_items) return total_quantity > 100"},{"question":"Complete the function that takes in a list of integers `nums` and a target integer `target`. Return the indices of the two numbers such that they add up to the `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. Your solution should have linear runtime complexity. Avoid using brute-force approach. **Example:** ``` Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Input: nums = [3, 3], target = 6 Output: [0, 1] ```","solution":"def two_sum(nums, target): Find the indices of the two numbers in the list `nums` that add up to `target`. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i # Example usage: # nums = [2, 7, 11, 15] # target = 9 # Output: [0, 1]"},{"question":"You are given a list of integers where each integer represents the number of steps a person has climbed. For each number, you need to determine if it represents the last step of a valid staircase. A valid staircase is formed if and only if the number of steps climbed follows a triangular number sequence. A triangular number ( T_n ) is defined as ( T_n = frac{n*(n+1)}{2} ), where ( n ) is a positive integer. Write a function to determine if each number in the list is a triangular number or not. The function should return a list of booleans indicating whether each number is a triangular number. Example 1: Input: [1, 3, 6, 10, 15] Output: [true, true, true, true, true] Example 2: Input: [4, 7, 9, 13, 16] Output: [false, false, false, false, false] Example 3: Input: [0, 1, 2, 3] Output: [false, true, false, true] Example 4: Input: [10, 21, 36, 45] Output: [true, true, true, true] Note: - The input list will contain between 1 and 1000 integers. - Each integer in the list will be between 0 and 1,000,000.","solution":"import math def is_triangular_number(num): if num <= 0: return False n = (-1 + math.sqrt(1 + 8 * num)) / 2 return n.is_integer() def check_staircase_numbers(numbers): return [is_triangular_number(num) for num in numbers]"},{"question":"Given two strings s1 and s2, write a function to determine if s2 is a rotation of s1. A string s2 is a rotation of s1 if and only if s2 can be obtained by taking some number of characters from the beginning of s1 and appending them at the end of the remaining part of s1. Example 1: Input: s1 = \\"waterbottle\\", s2 = \\"erbottlewat\\" Output: True Explanation: s2 is a rotation of s1 by rotating \\"water\\" to the end of the remaining \\"bottle\\". Example 2: Input: s1 = \\"hello\\", s2 = \\"llohe\\" Output: True Explanation: s2 is a rotation of s1 by rotating \\"he\\" to the end of the remaining \\"llo\\". Example 3: Input: s1 = \\"hello\\", s2 = \\"holle\\" Output: False Explanation: s2 is not a rotation of s1. Constraints: - Both strings s1 and s2 will consist of lowercase English letters. - The length of both s1 and s2 will be in the range [1, 100]. Note: - You may assume that no characters repeat within each string. - The solution should have a linear time complexity.","solution":"def is_rotation(s1, s2): Determine if s2 is a rotation of s1. :param s1: Original string :param s2: String to check if it\'s a rotation of s1 :return: True if s2 is a rotation of s1, False otherwise if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"You are given an array of integers representing the popularity of several restaurants in a city, where each element in the array represents the rating of a restaurant. You want to visit as many restaurants as possible, but with the rule that you cannot visit two restaurants consecutively (i.e., you have to skip at least one restaurant between visits). Return the maximum sum of ratings that you can achieve by visiting the restaurants according to the given rule. Example 1: Input: ratings = [5, 3, 4, 11, 2] Output: 16 Explanation: The optimal choice is to visit the restaurants with ratings 5, 11 (5 + 11 = 16). Example 2: Input: ratings = [2, 7, 9, 3, 1] Output: 12 Explanation: The optimal choice is to visit the restaurants with ratings 7, 3 (2 + 9 + 1 = 12). Example 3: Input: ratings = [5, 5, 10, 100, 10, 5] Output: 110 Explanation: The optimal choice is to visit the restaurants with ratings 5, 100, 5 (5 + 100 + 5 = 110). Example 4: Input: ratings = [10, 2, 2, 10] Output: 20 Explanation: The optimal choice is to visit the restaurants with ratings 10, 10 (10 + 10 = 20). Example 5: Input: ratings = [1] Output: 1 Explanation: The optimal choice is to visit the only available restaurant (1). Constraints: 1 <= ratings.length <= 10000 -1000 <= ratings[i] <= 1000","solution":"def max_sum_non_adjacent(ratings): Returns the maximum sum of ratings that can be achieved by visiting the restaurants without visiting two consecutive ones. if not ratings: return 0 if len(ratings) == 1: return ratings[0] incl = 0 # Max sum including the previous element excl = 0 # Max sum excluding the previous element for rating in ratings: new_excl = max(incl, excl) # Current max excluding the rating incl = excl + rating # Current max including the rating excl = new_excl # Update excl to the previously calculated new_excl return max(incl, excl)"},{"question":"# Task Given an array of integers where each number appears exactly twice except for one number which appears exactly once, find the number that appears only once. Your solution should run in linear time complexity and use constant extra space. # Examples ```python find_unique([2, 2, 1]) = 1 find_unique([4, 1, 2, 1, 2]) = 4 find_unique([1]) = 1 ``` # Remarks You may assume that the input array is non-empty and each element appears exactly twice except for one element which appears exactly once. Your solution should not use extra space that scales with the input size such as hash tables or lists.","solution":"def find_unique(nums): Finds the number that appears only once in the array where every other number appears exactly twice. unique = 0 for num in nums: unique ^= num return unique"},{"question":"On a distant planet, farmers grow a special variety of crop that has unique light absorption patterns. The planet\'s day is broken into several smaller intervals, and during each interval, the amount of light that hits the crops can vary. For example, you might have the following light pattern for a day: `[4, 2, 3, 0, 1, 5, 3, 1]` Here, each element represents the amount of light in a specific time interval. However, due to environmental regulations, farmers are only allowed to harvest if the light in an interval and the subsequent interval form a non-decreasing sequence. For instance, in the above pattern, the permissible intervals would be `(2, 3)`, `(0, 1)`, and `(1, 5)` but not `(4, 2)` or `(3, 0)`. Write a function `count_harvestable_intervals(light_pattern)` that takes a list of integers representing the light pattern for the day and returns the number of harvestable intervals. For example: ```python count_harvestable_intervals([4, 2, 3, 0, 1, 5, 3, 1]) ``` should return `3` because there are three valid intervals: `(2, 3)`, `(0, 1)`, and `(1, 5)`. Function Signature: ```python def count_harvestable_intervals(light_pattern: list) -> int: pass ``` Constraints: - The length of the `light_pattern` list will be between 2 and 10^4. - Each element in the `light_pattern` list will be a non-negative integer not exceeding 10^3. Your task is to implement this function.","solution":"def count_harvestable_intervals(light_pattern: list) -> int: Takes a list of integers representing the light pattern for the day and returns the number of harvestable intervals. count = 0 for i in range(len(light_pattern) - 1): if light_pattern[i] <= light_pattern[i + 1]: count += 1 return count"},{"question":"Develop a function that generates a list of the first `n` Fibonacci numbers. The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. It starts from 0 and 1, with each subsequent number being the sum of the previous two numbers. ``` Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, ... ``` Your Task Complete the function that takes an integer `n` and returns a list/array containing the first `n` Fibonacci numbers. If `n` is less than 1, return an empty list. Examples ``` 5 --> [0, 1, 1, 2, 3] 1 --> [0] 9 --> [0, 1, 1, 2, 3, 5, 8, 13, 21] 0 --> [] ```","solution":"def generate_fibonacci(n): Generates a list of the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] fibonacci_sequence = [0, 1] for _ in range(2, n): next_fib = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_fib) return fibonacci_sequence[:n]"},{"question":"Given a list of integers, write a function to find the maximum product of any three integers in the list. Examples: Input: nums = [1, 2, 3] Output: 6 Input: nums = [1, 2, 3, 4] Output: 24 Input: nums = [-1, -2, -3, -4] Output: -6 Note: - The length of the list will be at least 3. - Each element of the list can be negative, zero, or positive.","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three integers in the list nums. nums.sort() # Since the list is sorted, the maximum product of three numbers # can be either from the three largest numbers or two smallest (most negative) # numbers and the largest positive number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Given a 32-bit signed integer x, write a function that returns x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then the function should return 0. Example 1: Input: x = 123 Output: 321 Example 2: Input: x = -123 Output: -321 Example 3: Input: x = 120 Output: 21 Example 4: Input: x = 0 Output: 0 Note: Assume that the input is a 32-bit signed integer. Your function should handle overflow and return 0 in that case.","solution":"def reverse_integer(x): Reverse the digits of the input 32-bit signed integer. If reversed integer overflows, return 0. INT_MIN, INT_MAX = -2**31, 2**31 - 1 sign = -1 if x < 0 else 1 x = abs(x) reversed_x = 0 while x != 0: pop = x % 10 x //= 10 if reversed_x > (INT_MAX - pop) // 10: return 0 reversed_x = reversed_x * 10 + pop return sign * reversed_x"},{"question":"# Task Given an array of integers, your task is to determine if the array has any elements that sum up to a given target value. Specifically, you must return the indices of the two numbers such that they add up to the target. You may assume that each input will have exactly one solution, and you may not use the same element twice. # Input/Output - `[input]` array of integer numbers `nums` and an integer `target` The `nums` array contains the array of integers. The `target` is the integer value to which two elements in the array should sum. - `[output]` an array of two integers The output array should contain the indices of the two numbers such that they add up to the target. # Example ```python nums = [2, 7, 11, 15] target = 9 ``` Output: ```python [0, 1] ``` Explanation: ```python nums[0] + nums[1] = 2 + 7 = 9 ```","solution":"def two_sum(nums, target): Given an array of integers and a target value, return the indices of the two numbers such that they add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"In this kata, you need to work with the Python `math` library. Write a function called `factorial_digits` which takes an integer `n` and returns the number of digits in the factorial of `n`. You can assume `n` is always a non-negative integer. Examples are given below: ```python factorial_digits(0) = 1 # 0! = 1 factorial_digits(5) = 3 # 5! = 120 factorial_digits(10) = 7 # 10! = 3628800 factorial_digits(20) = 19 # 20! = 2432902008176640000 factorial_digits(25) = 26 # 25! = 15511210043330985984000000 ```","solution":"import math def factorial_digits(n): Returns the number of digits in the factorial of n. factorial_result = math.factorial(n) return len(str(factorial_result))"},{"question":"Benjamin is participating in an online coding contest, and he encounters a challenge that requires him to simulate the behavior of a stack with an additional operation: reversing the stack. Here\'s how Benjamin\'s stack operates: - **PUSH** `x`: Push integer `x` onto the stack. - **POP**: Pop the top element from the stack. If the stack is empty, this operation does nothing. - **TOP**: Print the top element of the stack without removing it. If the stack is empty, print \\"EMPTY\\". - **REVERSE-STACK**: Reverse the order of elements in the stack. Given a sequence of operations, Benjamin needs help to simulate the stack behavior and produce the required outputs. -----Input----- The first line contains an integer `q` (1 ≤ `q` ≤ 10^5) — the number of queries. Each of the next `q` lines contains one of the following operations: - `PUSH x` (1 ≤ `x` ≤ 10^9): Push the integer `x` onto the stack. - `POP`: Pop the top element from the stack. - `TOP`: Print the top element of the stack. - `REVERSE-STACK`: Reverse the order of elements in the stack. It is guaranteed that all `POP`, `TOP`, and `REVERSE-STACK` operations occur on a stack that has had at least one `PUSH` operation performed on it already. -----Output----- For each `TOP` operation, print the top element of the stack. If the stack is empty, print \\"EMPTY\\". -----Example----- Input 9 PUSH 3 PUSH 5 TOP POP TOP PUSH 2 REVERSE-STACK TOP POP Output 5 3 3","solution":"def stack_simulation(operations): stack = [] result = [] for operation in operations: if operation.startswith(\\"PUSH\\"): _, x = operation.split() stack.append(int(x)) elif operation == \\"POP\\": if stack: stack.pop() elif operation == \\"TOP\\": if stack: result.append(stack[-1]) else: result.append(\\"EMPTY\\") elif operation == \\"REVERSE-STACK\\": stack.reverse() return result"},{"question":"=====Problem Statement===== A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \'madam\' and \'nurses run\' are palindromes. Given a string `s`, your task is to determine if it is a palindrome. Ignore cases, spaces, and non-alphanumeric characters. Implement the function `is_palindrome(s)` which returns the Boolean value True if `s` is a palindrome, and False otherwise. =====Input Format===== A string `s`. =====Constraints===== 1 ≤ len(s) ≤ 10^5 =====Output Format===== The function must return a Boolean value (True/False). Output is handled by the provided code stub. Example: Input: \'A man, a plan, a canal, Panama\' Output: True","solution":"def is_palindrome(s: str) -> bool: Determine if the given string s is a palindrome, ignoring cases, spaces, and non-alphanumeric characters. Parameters: s (str): The string to be checked. Returns: bool: True if s is a palindrome, False otherwise. # Create a filtered version of the string containing only alphanumeric characters and converted to lower case filtered_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is the same forward and backward return filtered_s == filtered_s[::-1]"},{"question":"You are given a string comprised of lowercase letters and a list of pairs of indices in the string. Each pair represents a swap operation to be performed on the string. After performing all swaps, return the lexicographically smallest string that can be obtained. Write a function `smallest_string_after_swaps` that takes the string and the list of pairs and returns the lexicographically smallest string that can be obtained by performing the swap operations any number of times. **Examples:** ``` input_string = \\"dcab\\" swap_pairs = [[0, 3], [1, 2]] # or more simply: # \\"dcab\\" -> swap indices 0 and 3: \\"bcad\\" # \\"bcad\\" -> swap indices 1 and 2: \\"bacd\\" # \\"bacd\\" -> swap indices 0 and 3: \\"dacb\\" # \\"dacb\\" -> swap indices 1 and 2: \\"dabc\\" # the lexicographically smallest string we can form is \\"abcd\\" output: \\"abcd\\" ``` ``` input_string = \\"cba\\" swap_pairs = [[0, 1], [1, 2]] # or more simply: # \\"cba\\" -> swap indices 0 and 1: \\"bca\\" # \\"bca\\" -> swap indices 1 and 2: \\"bac\\" # \\"bac\\" -> swap indices 0 and 1: \\"abc\\" # the lexicographically smallest string we can form is \\"abc\\" output: \\"abc\\" ``` **Notes:** - If the string is of length 1 or empty or if no valid swaps can be made, return the string as is. - There may be multiple ways to derive the same resulting string. - The indices in the pairs are 0-based and can repeat swaps multiple times.","solution":"def smallest_string_after_swaps(s, pairs): Return the lexicographically smallest string that can be obtained by performing the swap operations any number of times. if not s or len(s) == 1: return s # Union-Find (Disjoint Set) to group indices that can be swapped parent = list(range(len(s))) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for x, y in pairs: union(x, y) groups = {} for i in range(len(s)): root = find(i) if root not in groups: groups[root] = [] groups[root].append(i) res = list(s) for group in groups.values(): chars = sorted(res[i] for i in group) for i, char in zip(sorted(group), chars): res[i] = char return \'\'.join(res)"},{"question":"# Task Implement a function that takes an input string of valid parentheses and determines the maximum depth of nested parentheses. # Example For s = \\"(1+(2*3)+((8)/4))+1\\", the output should be 3. For s = \\"(1)+((2))+(((3)))\\", the output should be 3. # Input/Output - `[input]` string `s` - `[output]` an integer","solution":"def max_depth(s): Takes an input string of valid parentheses and determines the maximum depth of nested parentheses. Parameters: s (str): Input string containing valid parentheses. Returns: int: Maximum depth of nested parentheses. max_depth_count = 0 current_depth = 0 for char in s: if char == \'(\': current_depth += 1 if current_depth > max_depth_count: max_depth_count = current_depth elif char == \')\': current_depth -= 1 return max_depth_count"},{"question":"Dreamoon loves working with arrays. One day he obtained an array of integers and wanted to perform some operations on it. Specifically, he wants to count the number of subarrays where the sum of the subarray is equal to a given integer k. A subarray is defined as a contiguous segment of the array. Can you help Dreamoon with this task? -----Input----- The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9), where n is the length of the array and k is the target subarray sum. The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4), representing the elements of the array. -----Output----- Print a single integer representing the number of subarrays whose sum is equal to k. -----Examples----- Input 5 5 1 2 3 4 5 Output 2 Input 3 0 0 0 0 Output 6 -----Note----- For the first sample, the subarrays that sum to 5 are {2, 3} and {5}. For the second sample, all possible subarrays {0}, {0, 0}, and {0, 0, 0} sum to 0. The number of such subarrays is 6.","solution":"def count_subarrays_with_sum_k(n, k, arr): Returns the number of subarrays whose sum equals k. :param n: int - The length of the array :param k: int - The target sum :param arr: List[int] - The array of integers :return: int - The count of subarrays with sum equal to k sum_count = {0: 1} current_sum = 0 count = 0 for num in arr: current_sum += num if (current_sum - k) in sum_count: count += sum_count[current_sum - k] sum_count[current_sum] = sum_count.get(current_sum, 0) + 1 return count"},{"question":"In this problem you are given an integer array A of size N and an integer M. Your task is to find the length of the smallest contiguous subarray such that the sum of its elements is greater than or equal to M. If no such subarray exists, return -1. -----Constraints:----- For all test cases, - 1 le N le 100000 - 1 le M le 10^9 - 1 le A[i] le 10^4, for all i. -----Input Format:----- There is only one line of input with N+1 space separated integers. The first integer is N and the second integer is M. The next N integers are A[1], A[2], dots, A[N]. -----Output Format:----- A single integer which is the length of the smallest subarray with sum greater than or equal to M, or -1 if no such subarray exists. -----Sample Input 1:----- 8 15 1 2 3 4 5 6 7 8 -----Sample Output 1:----- 2 -----Explanation 1:----- The subarray [7, 8] has a sum of 15, which meets the requirement, and its length is 2. No smaller subarray has a sum of 15 or greater. -----Sample Input 2:----- 5 100 1 2 3 4 5 -----Sample Output 2:----- -1 -----Explanation 2:----- No subarray of A has a sum of 100 or greater. Thus, the answer is -1.","solution":"def smallest_subarray_with_sum(A, N, M): Returns the length of the smallest subarray with a sum >= M. min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(N): current_sum += A[end] while current_sum >= M: min_len = min(min_len, end - start + 1) current_sum -= A[start] start += 1 return -1 if min_len == float(\'inf\') else min_len def process_input(input_string): Processes input string and calls the smallest_subarray_with_sum function. data = list(map(int, input_string.split())) N = data[0] M = data[1] A = data[2:N+2] return smallest_subarray_with_sum(A, N, M)"},{"question":"You are given an NxN matrix of integers. The task is to rotate the matrix by 90 degrees in the clockwise direction. Write a function that takes the matrix as input and returns the rotated matrix as output. **Constraints:** - The matrix will always be square (N x N). - The elements of the matrix are integers between -1000 and 1000. - You are not allowed to use any extra space for another matrix (in-place rotation is required). **Example:** Input: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Another Example: Input: ``` [ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] ``` Output: ``` [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ``` **Note**: The rotation should be performed in place.","solution":"def rotate(matrix): Rotates the given NxN matrix by 90 degrees clockwise. The rotation is done in place. :param List[List[int]] matrix: the NxN matrix to rotate. :return: None n = len(matrix) # First, transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Second, reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Alice has a special string that consists of only letters \'A\' and \'B\'. She wants to convert this string into a uniform string composed solely of either \'A\'s or \'B\'s. To achieve this, she can perform the following operation any number of times: - Select any contiguous substring of the string and toggle all its characters (i.e., change all \'A\'s to \'B\'s and all \'B\'s to \'A\'s). Determine the minimum number of operations required to convert the initial string into a uniform string. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a string S consisting only of the characters \'A\' and \'B\'. -----Output----- - For each test case, print a single integer denoting the minimum number of operations required to make the string uniform. -----Constraints----- - 1 le T le 10 - 1 le |S| le 10^5 -----Example Input----- 3 ABB AAAA BABABA -----Example Output----- 1 0 3","solution":"def min_operations_to_uniform_string(T, test_cases): def count_transitions(S): # Count number of transitions from A to B or B to A transitions = 0 for i in range(1, len(S)): if S[i] != S[i-1]: transitions += 1 return transitions result = [] for S in test_cases: # Number of operations needed is half the number of transitions (rounded up) transitions = count_transitions(S) result.append((transitions + 1) // 2) return result"},{"question":"Write a function that takes a string containing a mathematical expression in infix notation and returns the result of evaluating the expression. You can assume the expression contains only non-negative integers, the operators +, -, *, /, and parentheses for grouping. The expression should be evaluated using the standard order of operations: parentheses first, then multiplication and division, and finally addition and subtraction. # Example For the input string `\\"3 + 5 * 2 - 9 / 3\\"`, the function should return `10`. For the input string `\\"(2 + 3) * 4 - 5\\"`, the function should return `15`. For the input string `\\"10 / (2 + 3)\\"`, the function should return `2`. # Constraints * The input string will be a valid mathematical expression. * The result of the calculations will be an integer.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression in infix notation and returns the result. It handles non-negative integers, +, -, *, / operators, and parentheses for grouping. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return evaluate(expression)"},{"question":"Given an integer array \\"nums\\" and an integer \\"target\\", return the number of pairs (i, j) where nums[i] + nums[j] equals the target and i < j. Example 1: Input: nums = [1, 2, 3, 4, 3], target = 6 Output: 2 Explanation: The pairs that sum up to target are (2, 4) and (3, 3). Example 2: Input: nums = [1, 1, 1, 1], target = 2 Output: 6 Explanation: All pairs (i, j) where i < j have sum of 2. Example 3: Input: nums = [1, 2, 3, 4], target = 5 Output: 2 Explanation: The pairs that sum up to target are (1, 4) and (2, 3). Example 4: Input: nums = [1], target = 2 Output: 0 Explanation: No valid pairs exist since there is only one element in the array. Constraints: 1. 2 <= nums.length <= 10^4 2. -10^3 <= nums[i] <= 10^3 3. -10^3 <= target <= 10^3","solution":"def count_pairs(nums, target): count = 0 nums_len = len(nums) for i in range(nums_len): for j in range(i + 1, nums_len): if nums[i] + nums[j] == target: count += 1 return count"},{"question":"Write a function that takes a string containing a mathematical expression and returns the result of evaluating that expression. The expression will only contain non-negative integers, the operators \'+\', \'-\', \'*\', \'/\' (integer division), and may contain spaces. You may assume the resulting values will fit within an integer range. Here are some examples of the expected output: ```python evaluate(\\"3+5 / 2\\") # returns 5 evaluate(\\"12 - 3 * 4\\") # returns 0 evaluate(\\"2 + 3 * 2\\") # returns 8 evaluate(\\"100\\") # returns 100 evaluate(\\"25/5 + 3\\") # returns 8 ``` Note: - The function should correctly handle operator precedence. - Division should be integer division.","solution":"def evaluate(expression): Evaluates a mathematical expression and returns the result. The expression can only contain non-negative integers and the operators \'+\', \'-\', \'*\', \'/\'. def apply_operator(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left // right) def greater_precedence(op1, op2): precedences = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} return precedences[op1] > precedences[op2] operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] in \'0123456789\': num = 0 while i < len(expression) and expression[i] in \'0123456789\': num = num * 10 + int(expression[i]) i += 1 values.append(num) i -= 1 elif expression[i] in \'+-*/\': while (operators and operators[-1] in \'+-*/\' and greater_precedence(operators[-1], expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"You are given an array of integers and a sliding window size `k`. You need to find the maximum number of distinct integers in any subarray of size `k`. Let\'s walk through an example. Suppose the array is `[1, 2, 1, 3, 4, 2, 3]` and `k=4`. The subarrays of size `k` are: - `[1, 2, 1, 3]` with `3` unique integers: `1, 2, 3` - `[2, 1, 3, 4]` with `4` unique integers: `1, 2, 3, 4` - `[1, 3, 4, 2]` with `4` unique integers: `1, 2, 3, 4` - `[3, 4, 2, 3]` with `3` unique integers: `2, 3, 4` The maximum number of distinct integers in any subarray of size `k` is `4`. Write a function: ```python def max_distinct_in_subarrays(arr, k): pass ``` This function should return the maximum number of distinct integers in any subarray of size `k`. -----Input----- - An integer `q` (1 <= q <= 10^5) -- the number of test cases. - For each test case: - An integer `n` (1 <= n <= 10^5) -- the size of the array. - An integer `k` (1 <= k <= n) -- the size of the sliding window. - An array `arr` of `n` integers (1 <= arr[i] <= 10^5) -- representing the integers in the array. It is guaranteed that the sum of `n` over all test cases does not exceed `3 * 10^5`. -----Output----- For each test case, print one integer in a single line -- the maximum number of distinct integers in any subarray of size `k`. -----Example----- Input 3 7 4 1 2 1 3 4 2 3 5 3 4 1 1 3 2 6 2 1 2 3 2 2 1 Output 4 2 2","solution":"def max_distinct_in_subarrays(arr, k): from collections import defaultdict window_count = defaultdict(int) distinct_count = 0 max_distinct = 0 for i in range(k): if window_count[arr[i]] == 0: distinct_count += 1 window_count[arr[i]] += 1 max_distinct = distinct_count for i in range(k, len(arr)): if window_count[arr[i - k]] == 1: distinct_count -= 1 window_count[arr[i - k]] -= 1 if window_count[arr[i]] == 0: distinct_count += 1 window_count[arr[i]] += 1 max_distinct = max(max_distinct, distinct_count) return max_distinct def process_test_cases(q, test_cases): results = [] for n, k, arr in test_cases: results.append(max_distinct_in_subarrays(arr, k)) return results"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Your task is to find the length of the shortest path from a starting node `s` to a target node `t`. If there\'s no path between `s` and `t`, output `-1`. The graph does not contain self-loops or parallel edges, and it may not be connected. ----Input---- The first line of the input contains a single integer `t` (1 le t le 100) — the number of test cases. For each test case, the first line contains three integers `n`, `m`, and `q` (1 le n le 1000, 0 le m le 10000, 1 le q le 1000), the number of nodes, edges, and queries respectively. The next `m` lines describe the edges in the graph. Each edge is given by two integers `u` and `v` (1 le u, v le n, u ne v) representing an undirected edge between nodes `u` and `v`. The next `q` lines describe the queries. Each query is given by two integers `s` and `t` (1 le s, t le n) representing the starting and target nodes for the shortest path query. ----Output---- For each query in each test case, output a single integer representing the length of the shortest path from `s` to `t`. If there\'s no path, output `-1`. ----Example---- Input 2 4 3 2 1 2 2 3 3 4 1 4 2 4 5 4 3 1 2 1 3 3 4 3 5 1 5 2 3 4 5 Output 3 2 2 2 1 ----Note---- In the first test case, for the query from node `1` to node `4`, the shortest path is `1 -> 2 -> 3 -> 4` with length `3`. For the query from node `2` to node `4`, the shortest path is `2 -> 3 -> 4` with length `2`. In the second test case, for the query from node `1` to node `5`, the shortest path is `1 -> 3 -> 5` with length `2`. For the query from node `2` to node `3`, the shortest path is `2 -> 1 -> 3` with length `2`. For the query from node `4` to node `5`, the shortest path is `4 -> 3 -> 5` with length `1`.","solution":"from collections import deque def shortest_path(n, edges, queries): def bfs(start, target): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True while queue: curr, dist = queue.popleft() if curr == target: return dist for neighbor in graph[curr]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) return -1 # Initialize adjacency list for the graph graph = [[] for _ in range(n + 1)] # Add edges to the graph for u, v in edges: graph[u].append(v) graph[v].append(u) # Process each query and get the result results = [] for s, t in queries: results.append(bfs(s, t)) return results"},{"question":"Write a function `findLargestProduct` that takes a list of integers and returns the largest product of any pair of numbers in the list. Example: ``` Input: [1, 3, 7, 9, 2] Output: 63 Explanation: The pair (7, 9) produces the largest product which is 63. ``` ``` Input: [-10, -3, 5, 6, -2] Output: 30 Explanation: The pair (-10, -3) produces the largest product which is 30. ```","solution":"def findLargestProduct(nums): Returns the largest product of any pair of numbers in the list \'nums\'. if len(nums) < 2: raise ValueError(\\"The list must contain at least two elements.\\") nums.sort() # Largest product is either the product of the two largest positive numbers # or the product of the two smallest negative numbers max_product = max(nums[-1] * nums[-2], nums[0] * nums[1]) return max_product"},{"question":"Write a function that accepts a list of integer numbers and returns a dictionary where the keys are the distinct numbers from the list and the values are the count of occurrences of each number in the list. The function should be case insensitive and you need to handle both positive and negative numbers. Example: Input: ``` numbers = [1, -1, 2, -1, 3, 2, 1, -2, -2, -2] ``` Output: ``` { 1: 2, -1: 2, 2: 2, 3: 1, -2: 3 } ```","solution":"def count_occurrences(numbers): Returns a dictionary where the keys are the distinct numbers from the list and the values are the count of occurrences of each number in the list. number_count = {} for number in numbers: if number in number_count: number_count[number] += 1 else: number_count[number] = 1 return number_count"},{"question":"Array Product Excluding Self Given an array `nums` of integers, return an array `output` such that `output[i]` is equal to the product of all the elements of `nums` except `nums[i]`. You must solve it without using division and in O(n) time complexity. Example ``` Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: nums = [0, 1, 2, 3] Output: [6, 0, 0, 0] ``` Note **Precondition:** Array length will always be greater than 1. Constraints - You cannot use the division operation. - The algorithm must run in O(n) time complexity. Approach To solve this, you can use two auxiliary arrays to store the prefix and suffix products of each element: 1. Initialize two arrays `prefix` and `suffix`, each of the same length as `nums`. 2. Fill the `prefix` array such that `prefix[i]` contains the product of all elements to the left of `nums[i]`. 3. Fill the `suffix` array such that `suffix[i]` contains the product of all elements to the right of `nums[i]`. 4. Finally, compute the `output` array where each `output[i]` is the product of `prefix[i]` and `suffix[i]`. This approach ensures you can compute the required products without directly iterating over the array multiple times in nested loops, thereby achieving O(n) time complexity.","solution":"def product_except_self(nums): Given an array nums of integers, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. :param nums: List[int] :return: List[int] length = len(nums) prefix = [1] * length suffix = [1] * length output = [1] * length # Compute prefix products for i in range(1, length): prefix[i] = prefix[i - 1] * nums[i - 1] # Compute suffix products for i in range(length - 2, -1, -1): suffix[i] = suffix[i + 1] * nums[i + 1] # Compute the product except self for i in range(length): output[i] = prefix[i] * suffix[i] return output"},{"question":"Program a function `maxElementSum(arr)` where `arr` is an array containing arrays full of numbers, for example: ```python maxElementSum([[1, 2, 3], [4, 5, 6], [-1, -2, -3]]) ``` First, determine the maximum element of each array. Then, return the sum of all these maximum elements. - All numbers will be less than 100 and greater than -100. - `arr` will contain a maximum of 50 arrays. - The example given: `maxElementSum([[1, 3, 2], [4, 6, 5], [0, -1, -2]])`, the answer being 9. 1. Find the maximum element of each individual array: ``` [1, 3, 2] = 3 [4, 6, 5] = 6 [0, -1, -2] = 0 ``` 2. Add the maximum of each array together: ``` 3 + 6 + 0 = 9 ```","solution":"def maxElementSum(arr): Given a list of lists of numbers, returns the sum of the maximum element from each individual list. :param arr: List of lists containing numbers :return: Sum of maximum elements from each sublist return sum(max(sublist) for sublist in arr)"},{"question":"Design a class called `MedianFinder` to calculate the median from a stream of integers. 1. `addNum(int num)` – Add an integer to the data structure. 2. `findMedian()` – Return the median of the current set of integers. The median is the middle value in an ordered integer list. If the size of the list is even, the median is the average of the two middle numbers. **Example 1:** ``` Input: [\\"MedianFinder\\",\\"addNum\\",\\"addNum\\",\\"findMedian\\",\\"addNum\\",\\"findMedian\\"], inputs = [[],[1],[2],[],[3],[]] Output: [null,null,null,1.5,null,2.0] Explanation: MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1); // arr = [1] medianFinder.addNum(2); // arr = [1, 2] medianFinder.findMedian(); // return 1.5 (the median is the average of 1 and 2) medianFinder.addNum(3); // arr = [1, 2, 3] medianFinder.findMedian(); // return 2.0 (the median is 2) ``` **Example 2:** ``` Input: [\\"MedianFinder\\",\\"addNum\\",\\"findMedian\\"], inputs = [[],[4],[]] Output: [null,null,4.0] Explanation: MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(4); // arr = [4] medianFinder.findMedian(); // return 4.0 (the median is 4) ``` **Constraints:** - The number of elements added to the data structure will be at most `10^5`. - There will be at most `10^5` calls to `addNum` and `findMedian`. - `-10^5 <= num <= 10^5`.","solution":"import heapq class MedianFinder: def __init__(self): Initialize your data structure here. Use two heaps to store the lower half and the upper half of the numbers. self.max_heap = [] # Max-heap (inverted min-heap) for the lower half self.min_heap = [] # Min-heap for the upper half def addNum(self, num: int) -> None: Adds a number into the data structure. # Add to max heap (invert the sign to use min-heap as max-heap) heapq.heappush(self.max_heap, -num) # Balance heaps: the largest in max_heap must be <= smallest in min_heap if self.max_heap and self.min_heap and (-self.max_heap[0] > self.min_heap[0]): heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) # Ensure the heaps are balanced in size, max_heap can have one extra element if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) elif len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def findMedian(self) -> float: Returns the median of current data stream. if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] else: return (-self.max_heap[0] + self.min_heap[0]) / 2.0"},{"question":"Vikas is developing a new puzzle game called Binary Flip, which involves an interesting bitwise operation. In this game, a binary number string is given, and the objective is to perform a series of flip operations. The flip operation is defined as follows: - Select a contiguous sub-segment of the binary string and flip all bits within that sub-segment (0 becomes 1 and 1 becomes 0). Given a binary string of length N, your task is to determine the minimum number of flip operations required to convert the given binary string into a string of all zeros. -----Input----- First line will contain T, number of testcases. Each testcase consists of a single line containing a binary string S of length N. -----Output----- For each testcase, output in a single line the minimum number of flip operations required. -----Constraints----- 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 The binary string contains only \'0\' and \'1\' characters. -----Example----- Input: 2 110 0011 Output: 1 2 Explanation: In the first example, you can flip the first two bits to convert \\"110\\" to \\"000\\". Therefore, only 1 flip operation is needed. In the second example, you need to flip the first two bits to convert \\"0011\\" to \\"1100\\", and then flip all bits to convert \\"1100\\" to \\"0000\\". Therefore, 2 flip operations are needed.","solution":"def minimum_flips_to_zero(S): Returns the minimum number of flip operations to convert the binary string S to a string of zeros. # This is a helper function that counts the number of segments of consecutive \'1\'s in the string. count = 0 in_segment = False for char in S: if char == \'1\': if not in_segment: count += 1 in_segment = True else: in_segment = False return count def solve(testcases): results = [] for S in testcases: results.append(minimum_flips_to_zero(S)) return results"},{"question":"# Task You are given a list of strings representing log entries. Each log entry is in the format of \\"hh:mm:ss event\\", where \\"hh:mm:ss\\" is a time stamp and \\"event\\" is an event description. Your objective is to identify the time stamp of the first occurrence of a specific event. Write a function that takes a list of log entries and an event name, and returns the time stamp of the first occurrence of that event. If the event does not occur in the log, return \\"Event not found\\". # Input/Output `[input]` list of strings `logs` List of log entries where each entry is in the format \\"hh:mm:ss event\\". `[input]` string `event` The event name to search for. `[output]` a string The time stamp of the first occurrence of the event. If the event does not occur in the log, return \\"Event not found\\". # Example For `logs = [\\"09:00:00 start\\", \\"09:10:00 process\\", \\"09:20:00 finish\\"]` and `event = \\"process\\"`, the output should be `\\"09:10:00\\"`. For `logs = [\\"09:00:00 start\\", \\"09:10:00 start\\", \\"09:20:00 finish\\"]` and `event = \\"execute\\"`, the output should be `\\"Event not found\\"`.","solution":"def find_first_event_timestamp(logs, event): Finds the timestamp of the first occurrence of the specified event in the logs. :param logs: List of strings representing log entries in the format \\"hh:mm:ss event\\". :param event: The event name to search for. :return: The time stamp of the first occurrence of the event or \\"Event not found\\" if the event does not exist. for log in logs: timestamp, log_event = log.split(\' \', 1) if log_event == event: return timestamp return \\"Event not found\\""},{"question":"John has an array of length N consisting of integers. He wants to perform at most K operations on the array to make all the elements of the array equal. In each operation, he can choose any two different elements and make their values equal to any integer between their current values (inclusive). Determine if it is possible to make all array elements equal using at most K operations. -----Input:----- - The first line of input contains an integer T representing the number of test cases. - Each of the test cases consists of two lines: - The first line contains two integers N and K. - The second line contains N integers representing the elements of the array. -----Output:----- For each test case, print \\"POSSIBLE\\" (without quotes) if it is possible to make all array elements equal in at most K operations, otherwise print \\"IMPOSSIBLE\\" (without quotes). -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 0 leq K leq 10^9 - 1 leq text{Array elements} leq 10^5 -----Sample Input:----- 2 4 3 1 2 4 3 5 10 1 1 1 1 1 -----Sample Output:----- POSSIBLE POSSIBLE -----EXPLANATION:----- - Example 1: In the first case, John can make all elements equal using 3 operations as follows: 1. Make 1 and 2 equal to 1. 2. Make 4 and 3 equal to 4. 3. Make 1 and 4 equal to 4. Since the number of operations required (3) is less than or equal to K=3, it is possible. - Example 2: In the second case, the array already contains equal elements, so zero operations are needed, which is within the allowed operations (K=10), so it is possible.","solution":"def can_make_equal(N, K, array): unique_elements = set(array) if len(unique_elements) - 1 <= K: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\" def process_test_cases(T, test_cases): results = [] for case in test_cases: N, K, array = case result = can_make_equal(N, K, array) results.append(result) return results def main(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N, K = map(int, lines[idx].split()) array = list(map(int, lines[idx + 1].split())) test_cases.append((N, K, array)) idx += 2 results = process_test_cases(T, test_cases) return \\"n\\".join(results)"},{"question":"Martian language is a variant of the English language where each Martian word maps to only one unique English word. Martian sentences and words are separated by spaces, but Martian words do not necessarily match English words in length or structure. You are given a dictionary holding pairs of Martian words and their corresponding English words, and a Martian sentence. Your task is to translate the Martian sentence into an English sentence by replacing each Martian word with its corresponding English word from the dictionary. -----Input----- The first line contains an integer T denoting the number of test cases. Each test case consists of two parts: 1. An integer D, the number of Martian-English word pairs in the dictionary. 2. D lines follow, each containing a Martian word and its corresponding English translation separated by a space. 3. A single line containing the Martian sentence to be translated. -----Output----- For each test case, output a single line containing the translated English sentence. -----Constraints----- 1 ≤ T ≤ 10 1 ≤ D ≤ 1000 1 ≤ Length of Martian words, English words, and Martian sentences ≤ 100 -----Example----- Input: 2 3 kla hello xu good bli night kla xu bli 2 martian1 english1 martian2 english2 martian1 martian2 Output: hello good night english1 english2 -----Explanation----- In the first test case, the dictionary is {\'kla\': \'hello\', \'xu\': \'good\', \'bli\': \'night\'} and the Martian sentence \'kla xu bli\' translates to \'hello good night\'. In the second test case, the dictionary is {\'martian1\': \'english1\', \'martian2\': \'english2\'} and the Martian sentence \'martian1 martian2\' translates to \'english1 english2\'.","solution":"def translate_martian_sentence(T, test_cases): This function translates Martian sentences into English. Parameters: T (int): The number of test cases. test_cases (list): A list containing test case information for translation. Returns: list: Translated English sentences for each test case. results = [] for i in range(T): D, dictionary_pairs, martian_sentence = test_cases[i] translation_dict = dict(dictionary_pairs) translated_sentence = \' \'.join(translation_dict[word] for word in martian_sentence.split()) results.append(translated_sentence) return results"},{"question":"Design a function that determines if a string has all unique characters. The function should take a single string as input and return a boolean value. Do not use any additional data structures to solve this problem. Example 1: Input: \\"leetcode\\" Output: false Example 2: Input: \\"abcde\\" Output: true","solution":"def has_unique_characters(s): Determines if the string s has all unique characters. Args: s: str - The input string. Returns: bool - True if all characters are unique, False otherwise. # Create a bit vector of 0s for the total number of characters (128 for ASCII) checker = 0 for char in s: val = ord(char) # Get ASCII value of the character # Check if bit at position val is already set if (checker & (1 << val)) > 0: return False # Set bit number val checker |= (1 << val) return True"},{"question":"# Task You are given a list of integers representing the amount of days between each customer purchase at a store. Your task is to write a function that calculates the number of days the customer had to wait, on average, before making another purchase. In cases where the list is empty or contains only one purchase, the function should return `0`. # Examples ```python average_days([1, 2, 3, 4, 5]) = 3.0 average_days([7, 2, 0, 14]) = 5.75 average_days([10]) = 0 average_days([]) = 0 ``` # Remarks - Assume the input list will only contain non-negative integers. - The function should handle any size of list, including very large ones. - If the list contains only one integer or is empty, return `0` as there are no subsequent purchases to calculate the average spacing interval.","solution":"def average_days(purchase_days): Calculate the average number of days a customer waits before making another purchase. :param purchase_days: List of integers representing the days between each purchase. :return: Float representing the average number of days between purchases, or 0 if list is empty or has only one element. if len(purchase_days) <= 1: return 0 total_days = sum(purchase_days) number_of_intervals = len(purchase_days) return total_days / number_of_intervals"},{"question":"Rotate an array by ```k``` positions to the right (the second argument). If the array is empty or k is 0, return the array as is. Handle negative values of k as rotating to the left. A few cases: ``` { rotateArray([1, 2, 3, 4, 5], 2) -> [4, 5, 1, 2, 3] rotateArray([1, 2, 3, 4, 5], -2) -> [3, 4, 5, 1, 2] rotateArray([1, 2, 3], 0) -> [1, 2, 3] rotateArray([], 2) -> [] } ```","solution":"def rotateArray(arr, k): Rotate an array by k positions to the right. If k is negative, rotate to the left. If the array is empty or k is 0, return the array as is. if not arr: return arr n = len(arr) k = k % n # Handle cases where k is larger than the array length if k == 0: return arr return arr[-k:] + arr[:-k]"},{"question":"Write a function that accepts an integer n from the user and prints whether the number is prime or not without using any built-in functions. -----Input:----- Each testcase consists of a single line of input, an integer n. -----Output:----- For each testcase, output a single line answer, \\"Prime\\" or \\"Not prime\\". -----Sample Input:----- 4 -----Sample Output:----- Not prime","solution":"def is_prime(n): Returns \'Prime\' if n is a prime number, else returns \'Not prime\'. if n <= 1: return \\"Not prime\\" if n == 2: return \\"Prime\\" if n % 2 == 0: return \\"Not prime\\" for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return \\"Not prime\\" return \\"Prime\\""},{"question":"Write a function that takes a string containing only digits, spaces, and optional \'+\' or \'-\' signs before each number, and returns the sum of the numbers represented in the string. **Notes:** - Ignore any other characters in the string. - If a number doesn\'t have a sign, you can assume it is positive. Examples ```python \\"+4 -3 +2\\" => 3 \\" 12 -5 3\\" => 10 \\"-3 -5 -7\\" => -15 \\"\\" => 0 \\"+1a +2b -3c\\" => 0 (non-numeric characters are ignored) ```","solution":"import re def sum_from_string(s): Returns the sum of numbers represented in the string. Only digits, spaces, and optional \'+\' or \'-\' signs before each number are considered. # Find all numbers with optional signs in the string numbers = re.findall(r\'[+-]?d+\', s) return sum(map(int, numbers))"},{"question":"You are given a list of integers. Your task is to find the length of the longest contiguous subarray such that all the integers in the subarray are even. -----Input----- The first line contains a single integer T denoting the number of test cases. Each of the next T lines contains the following: - The first line contains an integer N denoting the number of integers in the list. - The second line contains N space-separated integers representing the list of integers. -----Output----- For each test case, print a single line denoting the length of the longest contiguous subarray with all even numbers. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq list[i] leq 10^9 -----Example Input----- 3 6 1 2 4 6 1 8 5 2 2 2 2 2 4 1 3 5 7 -----Example Output----- 3 5 0 -----Explanation----- - In the first case, the longest contiguous subarray of even numbers is [2, 4, 6], which has a length of 3. - In the second case, the entire array is even numbers, so the longest subarray is the whole array with a length of 5. - In the third case, there are no even numbers, so the length of the longest contiguous subarray of even numbers is 0.","solution":"def longest_even_subarray_length(T, test_cases): results = [] for case in test_cases: N, arr = case max_length = current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 results.append(max_length) return results"},{"question":"Create a class `Cache` that implements a basic Least Recently Used (LRU) caching mechanism. The class should support the following operations: - `put`(key, value): Insert or update the value associated with the key. If the cache reaches its capacity, it should invalidate the least recently used item before inserting the new item. - `get`(key): Return the value associated with the key if it exists in the cache; otherwise, return -1 and do not modify the cache state. - `most_recent`: Return the most recently used key. The cache should have a maximum size `n` which is set during the initialization of the cache. **Example Implementation:** ```python cache = Cache(2) cache.put(1, 1) cache.put(2, 2) cache.get(1) # returns 1 cache.put(3, 3) # evicts key 2 cache.get(2) # returns -1 (not found) cache.put(4, 4) # evicts key 1 cache.get(1) # returns -1 (not found) cache.get(3) # returns 3 cache.get(4) # returns 4 cache.most_recent() # returns 4 ``` **Note:** The methods must operate in constant time, O(1), with respect to the number of elements in the cache.","solution":"from collections import OrderedDict class Cache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) elif len(self.cache) >= self.capacity: self.cache.popitem(last=False) self.cache[key] = value def get(self, key: int) -> int: if key in self.cache: self.cache.move_to_end(key) return self.cache[key] return -1 def most_recent(self) -> int: if not self.cache: return -1 return next(reversed(self.cache))"},{"question":"Task Write a function `disemvowel` that takes a single string argument and returns a new string with all the vowels removed. The vowels to be removed are \'a\', \'e\', \'i\', \'o\', and \'u\' (both upper and lower case). # Input - A single string which may contain spaces, punctuation, and digits. # Output - A string with all the vowels removed. # Examples ```python disemvowel(\\"This website is for losers LOL!\\") # \\"Ths wbst s fr lsrs LL!\\" disemvowel(\\"No offense but,nYour writing is among the worst I\'ve ever read\\") # \\"N ffns bt,nYr wrtng s mng th wrst \'v vr rd\\" disemvowel(\\"What are you, a communist?\\") # \\"Wht r y, cmmnst?\\" ``` # Notes - Do not worry about handling special cases like accented vowels or other locales where a different set of characters might be considered vowels. - All characters in the original string that are not vowels should be included in the output string.","solution":"def disemvowel(string): Removes all vowels from the input string. Parameters: string (str): The input string from which vowels are to be removed. Returns: str: The string with all vowels removed. vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in string if char not in vowels])"},{"question":"Given an array of integers, determine if it is possible to partition the array into pairs such that the sum of each pair is divisible by a given integer k. Return true if such a partitioning is possible, otherwise return false. Example 1: Input: arr = [9, 7, 5, 3], k = 6 Output: true Explanation: We can partition the array into (9, 3) and (7, 5). The sum of each pair is 12, which is divisible by 6. Example 2: Input: arr = [1, 2, 3, 4, 5, 10, 6, 7, 8, 9], k = 5 Output: true Explanation: We can partition the array into (10, 5), (1, 4), (2, 3), (6, 9), and (7, 8). Each pair\'s sum is divisible by 5. Example 3: Input: arr = [1, 2, 3, 4, 5, 6], k = 7 Output: true Explanation: We can partition the array into (1, 6), (2, 5), and (3, 4). Each pair\'s sum is divisible by 7. Example 4: Input: arr = [1, 2, 3, 4, 5, 6], k = 10 Output: false Explanation: It\'s not possible to partition the array into pairs such that the sum of each pair is divisible by 10. Constraints: 1 <= arr.length <= 3 * 10^4 arr.length is even. 1 <= arr[i] <= 10^5 1 <= k <= 10^5","solution":"from collections import defaultdict def can_partition_pairs(arr, k): # Create a frequency dictionary for remainders when arr elements are divided by k remainder_count = defaultdict(int) # Count frequencies of remainders for num in arr: remainder = num % k remainder_count[remainder] += 1 # Check conditions for partitioning for r in remainder_count: complement = (k - r) % k # If the remainder is 0, there should be an even count of such remainders if r == complement: if remainder_count[r] % 2 != 0: return False # For any other remainder, the count should match the count of its complement elif remainder_count[r] != remainder_count[complement]: return False return True"},{"question":"# Task Given a list of integers, your task is to implement a function that finds the contiguous subarray within an array that has the largest sum. The function should return both the sum of this subarray and the subarray itself. # Constraints - The input list will contain at least one integer and at most 100 integers. - Each integer in the list will be in the range [-1000, 1000]. # Input - A list of integers. # Output - A tuple where the first element is an integer representing the maximum sum of the contiguous subarray, and the second element is the subarray itself. # Examples: ```python max_subarray([1, -3, 2, 1, -1, 3, -2, 1]) # Output: (5, [2, 1, -1, 3]) max_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) # Output: (7, [4, -1, -2, 1, 5]) max_subarray([1]) # Output: (1, [1]) ``` # Note - Ensure that the function returns the correct subarray along with the sum. - You may use Kadane\'s Algorithm to efficiently find the solution.","solution":"def max_subarray(nums): if not nums: return (0, []) max_sum = current_sum = nums[0] start = end = s = 0 for i in range(1, len(nums)): if current_sum <= 0: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return (max_sum, nums[start:end+1])"},{"question":"=====Problem Statement===== A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Each palindrome has a center, a character (or pair of characters) around which the rest of the palindrome is mirrored. For example: - \\"madam\\" is a palindrome with the center at \'d\'. - \\"racecar\\" is a palindrome centered at \'e\'. - \\"abccba\\" is a palindrome with the center at the pair \'cc\'. In this problem, you need to find the longest palindromic substring in a given string. If there are multiple substrings of the same length, return the one which occurs first. =====Constraints===== 1≤ length of input string ≤1000 =====Input Format===== A single line containing the string for which you need to find the longest palindromic substring. =====Output Format===== A single line containing the longest palindromic substring. =====Example===== **Input:** babad **Output:** bab **Explanation:** The longest palindromic substrings are \\"bab\\" and \\"aba\\". Since \\"bab\\" occurs first, it is the output. **Input:** cbbd **Output:** bb **Explanation:** The longest palindromic substring is \\"bb\\".","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string. If there are multiple such substrings of the same length, return the first one. n = len(s) if n == 0: return \\"\\" start = 0 max_length = 1 def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 for i in range(n): # Check for odd length palindrome with center i expand_around_center(i, i) # Check for even length palindrome with center between i and i + 1 expand_around_center(i, i + 1) return s[start:start + max_length]"},{"question":"=====Problem Statement===== A palindrome is a string that reads the same forward and backward. Given a string, determine the minimum number of characters you need to insert to make it a palindrome. Task Read a string and compute the minimum number of characters needed to be inserted to make the string a palindrome. =====Input Format===== A single line contains a string s of length n. =====Constraints===== 1 ≤ n ≤ 1000 =====Output Format===== Print the minimum number of characters to be inserted to make the given string a palindrome. =====Example===== Input: abc Output: 2 Explanation: By inserting \'b\' at the end and \'a\' at the beginning, the string becomes \\"abccba\\", which is a palindrome. Only 2 insertions are needed.","solution":"def min_insertions_for_palindrome(s): Returns the minimum number of characters needed to be inserted to make the string a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for gap in range(1, n): for left in range(n - gap): right = left + gap if s[left] == s[right]: dp[left][right] = dp[left + 1][right - 1] else: dp[left][right] = min(dp[left][right - 1], dp[left + 1][right]) + 1 return dp[0][n - 1]"},{"question":"Create a function that takes in a list of integers and determines if it is possible to partition the list into two sublists such that the sum of the elements in both sublists is equal. The function should return a boolean indicating whether such a partition is possible. For example: ``` partitionEqualSums([1, 5, 11, 5]) => True partitionEqualSums([1, 2, 3, 5]) => False partitionEqualSums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5]) => True partitionEqualSums([1, 2, 3, 7]) => False ``` Constraints: - You may assume that all input integers are non-negative. - The function should return \\"Not valid\\" if the input is not a list of integers. ```Haskell In Haskell, the function should return a Maybe Bool with Nothing for cases where the argument is not a list of integers. ```","solution":"def partitionEqualSums(nums): Returns True if nums can be partitioned into two sublists with equal sums, False otherwise. If the input is not a list of integers, returns \\"Not valid\\". if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums): return \\"Not valid\\" total_sum = sum(nums) if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a 2D DP array dp = [[False] * (target + 1) for _ in range(n + 1)] # Initialize the dp array for i in range(n + 1): dp[i][0] = True # Fill the dp array for i in range(1, n + 1): for j in range(1, target + 1): dp[i][j] = dp[i - 1][j] if j >= nums[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - nums[i - 1]] return dp[n][target]"},{"question":"You are given a list of integers representing the number of tasks you need to complete each day. Your goal is to create a function that returns the maximum number of tasks you could complete consecutively, such that no two consecutive days have more than a specified limit of summed tasks. For example, given the list `[3, 1, 2, 4, 5, 2]` and a limit of `5`, the function should evaluate the subarrays, checking if they exceed the limit when summed, and then return the length of the longest valid subarray. Write a function: ```python def max_consecutive_tasks(tasks: List[int], limit: int) -> int: pass ``` # Input - `tasks`: A list of integers where each integer represents the number of tasks for a given day (`1 <= tasks[i] <= 100`). - `limit`: An integer representing the maximum allowed sum of tasks for two consecutive days (`1 <= limit <= 200`). # Output - Return an integer that denotes the length of the longest subarray where the sum of tasks of any two consecutive days does not exceed the limit. # Example ```python assert max_consecutive_tasks([3, 1, 2, 4, 5, 2], 5) == 3 # The longest valid subarray is [3, 1, 2] assert max_consecutive_tasks([1, 2, 3, 4, 5, 6], 7) == 4 # The longest valid subarray is [1, 2, 3, 4] assert max_consecutive_tasks([10, 10, 10, 10, 10], 15) == 1 # Each day has too many tasks to be combined with another day without exceeding the limit; thus, the longest subarray is a single day. ``` Ensure to write efficient code to handle the time complexity adequately for larger inputs within the constraints.","solution":"from typing import List def max_consecutive_tasks(tasks: List[int], limit: int) -> int: max_length = 0 current_length = 0 n = len(tasks) i = 0 while i < n: if i == 0 or tasks[i] + tasks[i-1] <= limit: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 i += 1 return max_length"},{"question":"# Scenario A group of friends is having a game night, and they decide to play a game involving numbers and strings. Each player receives a mixed list of integers and strings. The challenge is to sort the list such that all the integers come first in ascending order, followed by all the strings in lexicographical order. ___ # Task Given a mixed array/list `[]` of n elements with both integers and strings, sort the array/list according to the following rules: 1. All integers should come before all strings. 2. Integers should be sorted in ascending order. 3. Strings should be sorted in lexicographical order. ___ # Notes * **The array/list size is at least 4.** * **The list contains only integers and strings.** * **The list may contain duplicate values.** * **Negative integers may be present.** * **Strings are case-sensitive and sorted accordingly (e.g., \\"apple\\" comes before \\"Banana\\").** ___ # Input >> Output Examples: ``` sortMixedList([3, \\"apple\\", 1, \\"banana\\"]) ==> return [1, 3, \\"apple\\", \\"banana\\"] ``` Explanation **Input:** `[3, \\"apple\\", 1, \\"banana\\"]` **Output:** `[1, 3, \\"apple\\", \\"banana\\"]` **Description:** All integers `1, 3` are sorted in ascending order. Strings `\\"apple\\", \\"banana\\"` are sorted lexicographically. ___ ``` sortMixedList([-5, \\"Zebra\\", -4, \\"apple\\", \\"Banana\\", 5]) ==> return [-5, -4, 5, \\"Banana\\", \\"Zebra\\", \\"apple\\"] ``` Explanation **Input:** `[-5, \\"Zebra\\", -4, \\"apple\\", \\"Banana\\", 5]` **Output:** `[-5, -4, 5, \\"Banana\\", \\"Zebra\\", \\"apple\\"]` **Description:** All integers `-5, -4, 5` are sorted in ascending order. Strings `\\"apple\\", \\"Banana\\", \\"Zebra\\"` are sorted lexicographically. ___ ``` sortMixedList([100, \\"hello\\", 200, \\"world\\", -50, 0]) ==> return [-50, 0, 100, 200, \\"hello\\", \\"world\\"] ``` Explanation **Input:** `[100, \\"hello\\", 200, \\"world\\", -50, 0]` **Output:** `[-50, 0, 100, 200, \\"hello\\", \\"world\\"]` **Description:** All integers `-50, 0, 100, 200` are sorted in ascending order. Strings `\\"hello\\", \\"world\\"` are sorted lexicographically. ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [Sorting and Combining Lists](https://www.codewars.com/collections/sorting-and-combining-lists) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def sortMixedList(lst): Sorts a mixed list of integers and strings such that all integers are sorted in ascending order, followed by all strings sorted in lexicographical order. :param lst: List of mixed integers and strings :return: Sorted list of integers followed by strings integers = sorted([x for x in lst if isinstance(x, int)]) strings = sorted([x for x in lst if isinstance(x, str)]) return integers + strings"},{"question":"You are given an n x n 2D matrix representing an image where each pixel is represented by an integer. You need to rotate the image by 90 degrees (clockwise). Example: Input: [ [ 1, 2, 3], [ 4, 5, 6], [ 7, 8, 9] ] Output: [ [ 7, 4, 1], [ 8, 5, 2], [ 9, 6, 3] ] Write a function that performs this rotation of the matrix in-place.","solution":"def rotate(matrix): Rotates the given n x n 2D matrix by 90 degrees clockwise in-place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse rows of the transposed matrix for i in range(n): matrix[i].reverse()"},{"question":"Create a function that accepts an integer and returns the sum of the digits of its factorial. If the input is not a positive integer, return `-1`. For Example: `summationFactorialDigits(5)` should return `3` (since 5! = 120 and 1+2+0 = 3).","solution":"def summationFactorialDigits(n): Returns the sum of the digits of the factorial of the given integer n. If the input is not a positive integer, returns -1. if not isinstance(n, int) or n <= 0: return -1 from math import factorial fact = factorial(n) return sum(int(digit) for digit in str(fact))"},{"question":"You are in charge of organizing a game\'s leaderboard, where players earn points based on their performance across several matches. After each match day, the leaderboard needs to be updated to reflect the cumulative points of all players. Each player\'s performance on each match day is represented by an integer indicating their points earned. Write a program to update the leaderboard after N matches for M players, assuming the leaderboard starts at zero points for all players. -----Input----- - The first line contains two integers N (the number of match days), and M (the number of players). - The following N lines each contain M integers representing the points earned by each player on that match day. -----Output----- - After processing all match days, print a single line containing M space-separated integers, where the i-th integer represents the total points earned by the i-th player. -----Constraints----- - 1 le N, M le 1000 - 0 le (points earned by any player on any match day) le 100 -----Example Input----- 3 4 5 10 15 20 10 10 10 10 20 5 0 5 -----Example Output----- 35 25 25 35 -----Explanation----- - After match day 1, the points are: [5, 10, 15, 20] - After match day 2, the points are updated to: [15, 20, 25, 30] - After match day 3, the final points are: [35, 25, 25, 35] Hence, the output is \\"35 25 25 35\\".","solution":"def update_leaderboard(N, M, match_days): Updates the leaderboard based on points from match days. Parameters: - N (int): Number of match days - M (int): Number of players - match_days (list of list of int): Points earned by each player per match day Returns: - List of ints: Cumulative points for each player # Initialize leaderboard with zero points for each player leaderboard = [0] * M # Update points for each player for each match day for day in match_days: for i in range(M): leaderboard[i] += day[i] return leaderboard"},{"question":"The Royal Cavalry is holding a ceremonial parade and they have a line of horses. Each horse is decorated with a certain number of ornaments. The King has a special interest in horses that have an odd number of ornaments, as these horses are to lead the parade. Your task is to determine how many horses in the lineup have an odd number of ornaments. -----Input:----- - The first line consists of a single integer T denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the number of horses in the lineup. - The second line contains N space-separated integers, where each integer represents the number of ornaments on a horse. -----Output:----- For each test case, print the number of horses that have an odd number of ornaments. -----Constraints----- - 1 leq T leq 10^5 - 1 leq N leq 10^5 - 1 leq text{number of ornaments on a horse} leq 10^9 -----Sample Input:----- 2 5 1 3 4 6 7 4 2 4 6 8 -----Sample Output:----- 3 0","solution":"def count_odd_ornament_horses(test_cases): results = [] for case in test_cases: N, ornaments = case count = sum(1 for ornament in ornaments if ornament % 2 != 0) results.append(count) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) ornaments = list(map(int, lines[index + 1].split())) test_cases.append((N, ornaments)) index += 2 return test_cases def main(input_data): test_cases = process_input(input_data) results = count_odd_ornament_horses(test_cases) return results"},{"question":"Given a binary tree, find the maximum path sum. The path may start and end at any node in the tree. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. Your function should return an integer representing the maximum path sum. Here is the TreeNode class definition for reference: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Examples:** ``` Input: root = [1,2,3] Output: 6 Explanation: The path is 2 -> 1 -> 3, giving a sum of 2 + 1 + 3 = 6. Input: root = [-10,9,20,null,null,15,7] Output: 42 Explanation: The path is 15 -> 20 -> 7, giving a sum of 15 + 20 + 7 = 42. ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): def helper(node): if not node: return 0 left_gain = max(helper(node.left), 0) right_gain = max(helper(node.right), 0) current_max_path = node.val + left_gain + right_gain max_path_sum[0] = max(max_path_sum[0], current_max_path) return node.val + max(left_gain, right_gain) max_path_sum = [float(\'-inf\')] helper(root) return max_path_sum[0]"},{"question":"Given a string s, your task is to move all the digits that appear in the string to the end of the string in their original order and return the new string. The relative positions of the letters should not be disturbed. For example, if the string is \\"a1b2c3d\\", all the digits should be moved to the end of the string in the order in which they appear, resulting in the new string \\"abcd123\\". Example 1: Input: s = \\"a1b2c3d\\" Output: \\"abcd123\\" Example 2: Input: s = \\"abc123\\" Output: \\"abc123\\" Example 3: Input: s = \\"12abc34\\" Output: \\"abc1234\\" Example 4: Input: s = \\"a1b2c3d4e5f6g7h8i9\\" Output: \\"abcdefghi123456789\\" Example 5: Input: s = \\"no_digits_here\\" Output: \\"no_digits_here\\" Constraints: - The length of the input string will not exceed 1000. - The string contains only lowercase letters and digits.","solution":"def move_digits_to_end(s): Moves all digits in the string `s` to the end while preserving their order. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"Chef loves playing with strings. He has a string S of length n, consisting of lowercase English letters. Chef wants to create a beautiful string T using the characters of S, but the problem is that Chef has a special condition for this task: for any character in S, Chef can either include it in T or leave it out, but if he includes it, he must also include all its duplicates in S consecutively in T. More formally, if a character \'c\' appears x times consecutively in S, Chef must include all x occurrences of \'c\' or exclude all x occurrences from T. Chef cannot include only a portion of the consecutive duplicates. Chef wants you to help him generate any possible beautiful string T that follows the above rule. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000), the length of the string S. The second line contains the string S. -----Output----- Output a valid string T formed by Chef\'s rule. -----Example----- Input: 10 aabbaacddc Output: aabbaa Explanation: One possible beautiful string T is \\"aabbaa\\" which includes all the consecutive duplicates of \'a\' and \'b\' as per the rule. -----Note----- - The string T can have multiple valid configurations. One could also output an empty string or any other valid configurations such as \\"dd\\" or even the entire string \\"aabbaacddc\\" if it follows the rule. - It\'s guaranteed there is at least one valid output string T for every input string S.","solution":"def create_beautiful_string(n, S): Generates a possible beautiful string T from S according to Chef\'s rules. Parameters: n (int): Length of the string S. S (str): Input string from which T will be created. Returns: str: A valid string T. if n == 0: return \\"\\" T = [] i = 0 while i < n: start = i while i + 1 < n and S[i] == S[i + 1]: i += 1 end = i T.append(S[start:end + 1]) i += 1 return \\"\\".join(T)"},{"question":"You are given a robot that is placed on an infinite 2D grid. The robot can move in four directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). The robot starts at the origin (0, 0) and follows a series of movement commands given as a string of characters. After following the commands, you need to determine the robot\'s final position on the grid. Input format: - The first line of the input contains an integer N, representing the number of movement commands. - The second line contains a string of N characters consisting of \'U\', \'D\', \'L\', and \'R\' corresponding to the robot\'s movement commands. Output format: - The output should consist of two integers separated by a space, representing the final position (X, Y) of the robot on the grid. Example Sample input: 8 UUDDLRLR Sample output: 0 0 Explanation: Starting at (0, 0), the robot moves up twice to (0, 2), down twice back to (0, 0), left and right to (0, 0), left to (-1, 0), and right back to (0, 0).","solution":"def final_position(N, commands): Returns the final position of the robot on a 2D grid after following the series of movement commands. Parameters: N (int): The number of movement commands commands (str): The string of movement commands consisting of \'U\', \'D\', \'L\', and \'R\' Returns: tuple: The final position (X, Y) of the robot on the grid x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"Write a function `find_max_min_avg` to find the maximum, minimum, and average values from a list of integers. # Notes: - Return `nil` or `None` for non-list inputs or if the list is empty. - The function should return a dictionary with keys `\'max\'`, `\'min\'`, and `\'average\'`. # Examples: ```python find_max_min_avg([3, 1, 4, 1, 5, 9]) => {\'max\': 9, \'min\': 1, \'average\': 3.8333333333333335} find_max_min_avg([10, 20, 30]) => {\'max\': 30, \'min\': 10, \'average\': 20.0} find_max_min_avg(\\"12345\\") => None find_max_min_avg([]) => None ```","solution":"def find_max_min_avg(nums): Returns a dictionary with the maximum, minimum, and average values from a list of integers. Returns None for non-list inputs or if the list is empty. if not isinstance(nums, list) or not nums: return None max_val = max(nums) min_val = min(nums) avg_val = sum(nums) / len(nums) return {\'max\': max_val, \'min\': min_val, \'average\': avg_val}"},{"question":"You are given a string consisting of numbers and lowercase latin letters. In one operation, you can remove any one character from the string. Your task is to determine the minimum number of operations required to make the string a palindrome. For Example: * For the string `\\"abca\\"`, the result is `1`. You can remove the character `\'b\'` to make the string `\\"aca\\"`, which is a palindrome. * For the string `\\"racecar\\"`, the result is `0`. The string is already a palindrome. Implement a function that calculates the minimum number of operations to convert the given string into a palindrome. Notes * A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward. * The given string consists of digits (from `0` to `9`) and lowercase latin letters.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to make the given string a palindrome. def lcs(s1, s2): Returns the length of the longest common subsequence between s1 and s2. n = len(s1) dp = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][n] reversed_s = s[::-1] lcs_length = lcs(s, reversed_s) return len(s) - lcs_length"},{"question":"You are given an array of integers. Your task is to find the smallest positive integer (greater than 0) that does not occur in the array. # Examples: ```python smallest_missing_positive([1, 3, 6, 4, 1, 2]) # returns 5 smallest_missing_positive([1, 2, 3]) # returns 4 smallest_missing_positive([-1, -3]) # returns 1 ``` **Note:** The array can contain any integers including negative numbers, and the length of the array can be up to 100,000 elements. --- **Function Signature:** ```python def smallest_missing_positive(arr: List[int]) -> int: pass ```","solution":"from typing import List def smallest_missing_positive(arr: List[int]) -> int: Given an array arr, find the smallest positive integer that does not occur in the array. # Create a set of positive numbers from the array positive_numbers = set(x for x in arr if x > 0) # Start checking from 1 upwards current = 1 while current in positive_numbers: current += 1 # The first missing positive integer is found return current"},{"question":"Given an integer array `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Task Write a function `find_two_sum(nums: List[int], target: int) -> List[int]` that takes in the integer array `nums` and the integer `target`, and returns the indices of the two numbers that add up to the target as a list of two integers. Example ``` Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. ``` ``` Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6, we return [1, 2]. ``` Constraints - `2 <= nums.length <= 10^4` - `-10^9 <= nums[i] <= 10^9` - `-10^9 <= target <= 10^9`","solution":"from typing import List def find_two_sum(nums: List[int], target: int) -> List[int]: Returns the indices of the two numbers in `nums` that add up to `target`. Parameters: nums (List[int]): The list of numbers. target (int): The target sum. Returns: List[int]: The indices of the two numbers that add up to `target`. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Alice and Bob have been solving mathematical problems together. One day Alice challenged Bob with a new task related to prime numbers and intervals. The task is as follows: Given a list of integers, a_1, a_2, ldots, a_n, and an integer Q representing the number of queries, each query consists of two integers L and R. Bob needs to find how many prime numbers are present in the subarray from index L to R (both inclusive) in the array a. He needs to answer the following query for each given L and R: - Find the count of prime numbers in the subarray a[L] to a[R]. Write a function that takes the input and provides the answers for each query. -----Input:----- - The first line contains two space-separated integers n (the length of the array) and Q (the number of queries). - The second line contains n space-separated integers a_1, a_2, ldots, a_n (the elements of the array). - The next Q lines each contain two integers L and R, representing the Lth and Rth indices of the subarray for each query. -----Output:----- For each query, print the count of prime numbers within the specified subarray. -----Constraints----- - 1 leq n leq 5 times 10^4 - 1 leq Q leq 10^3 - 1 leq a_i leq 10^6 - 1 leq L, R leq n (Note: The array indices L and R are 1-based.) -----Sample Input----- 5 3 2 3 4 5 6 1 3 2 5 1 5 -----Sample Output----- 2 2 3 -----EXPLANATION:----- For the first query (1, 3), the subarray is [2, 3, 4], where 2 and 3 are prime numbers. Hence, the answer is 2. For the second query (2, 5), the subarray is [3, 4, 5, 6], where 3 and 5 are prime numbers. Hence, the answer is 2. For the third query (1, 5), the subarray is [2, 3, 4, 5, 6], where 2, 3, and 5 are prime numbers. Hence, the answer is 3.","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def count_primes_in_subarray(array, queries): Given an array and a list of queries, returns a list of counts of prime numbers in the subarrays defined by the queries. # Precompute prime status for each element in the array prime_flags = [is_prime(num) for num in array] results = [] for L, R in queries: # Convert 1-based indices to 0-based indices L, R = L - 1, R - 1 # Count primes in the subarray prime_count = sum(prime_flags[L:R + 1]) results.append(prime_count) return results"},{"question":"You are tasked with implementing a function that, given a list of dictionaries where each dictionary represents a product with properties \\"name\\" (string) and \\"price\\" (numeric), returns a new list of dictionaries sorted by price in ascending order. If two or more products have the same price, they should maintain their original relative order as they appeared in the input list. Your solution should ensure that it works efficiently even for larger lists and adheres to the constraints provided. # Example: ```python products = [ {\\"name\\": \\"Laptop\\", \\"price\\": 999.99}, {\\"name\\": \\"Mouse\\", \\"price\\": 25.00}, {\\"name\\": \\"Monitor\\", \\"price\\": 199.99}, {\\"name\\": \\"Keyboard\\", \\"price\\": 49.99}, {\\"name\\": \\"Speaker\\", \\"price\\": 75.00} ] ``` # Expected Output: ```python [ {\\"name\\": \\"Mouse\\", \\"price\\": 25.00}, {\\"name\\": \\"Keyboard\\", \\"price\\": 49.99}, {\\"name\\": \\"Speaker\\", \\"price\\": 75.00}, {\\"name\\": \\"Monitor\\", \\"price\\": 199.99}, {\\"name\\": \\"Laptop\\", \\"price\\": 999.99} ] ``` # Additional Notes: - You can assume that each product will have a unique \\"name\\". - You should preserve the original list and only return the new sorted list. - Your function\'s signature should look like `def sort_products_by_price(products: List[Dict[str, Union[str, float]]]) -> List[Dict[str, Union[str, float]]]:`.","solution":"from typing import List, Dict, Union def sort_products_by_price(products: List[Dict[str, Union[str, float]]]) -> List[Dict[str, Union[str, float]]]: Sorts a list of products by their price in ascending order. If two or more products have the same price, they will maintain their original relative order. :param products: List of dictionaries, where each dictionary has a \'name\' (string) and \'price\' (numeric). :return: A new list of dictionaries sorted by price in ascending order. return sorted(products, key=lambda product: product[\\"price\\"])"},{"question":"In a 100-meter dash race, your task is to determine the top 3 finishes among several competitors based on their race times. The competitors run the race, and their times are recorded in milliseconds. Sometimes, there may be discrepancies requiring tie-breaking rules similar to those used in track and field events. Here\'s what you need to know: As input, you\'ll receive an array of objects. Each object contains the competitor\'s name (as a string) and race time (in milliseconds, as an integer): ```python [ {\\"name\\": \\"Alice\\", \\"time\\": 12983}, {\\"name\\": \\"Bob\\", \\"time\\": 13034}, {\\"name\\": \\"Charlie\\", \\"time\\": 12876}, {\\"name\\": \\"David\\", \\"time\\": 12983}, {\\"name\\": \\"Eve\\", \\"time\\": 13040} ] ``` Your task is to determine the top three finishes based on their race times. The competitor with the lowest race time finishes first, the next lowest finishes second, and so on. But what if there\'s a tie for one of the finishing places? The person with the lower alphabetical order in their name wins the tie-break. If there are still ties (same name and time hypothetically), they share the place as follows: - For first place, it should be noted as a \\"run-off\\". - For second and third places, they share the place as a \\"tie\\". Return a single object as your result. Each place-finish that is included in the results (including at least first place as property \\"1st\\" and possibly second and third places as properties \\"2nd\\" and \\"3rd\\") should have as its value the respective competitor\'s name. In the event of a tie, the value of the property is the names of all tied competitors, in alphabetical order, separated by commas, and followed by the notation \\"(run-off)\\" if the tie is for first place or \\"(tie)\\" if it\'s for second or third place. Example input and outputs: ```python race_results([ {\\"name\\": \\"Alice\\", \\"time\\": 12983}, {\\"name\\": \\"Bob\\", \\"time\\": 13034}, {\\"name\\": \\"Charlie\\", \\"time\\": 12876}, {\\"name\\": \\"David\\", \\"time\\": 12983}, {\\"name\\": \\"Eve\\", \\"time\\": 13040} ]) ``` The output should be: ```python {\'1st\': \'Charlie\', \'2nd\': \'Alice, David (tie)\', \'3rd\': \'Bob\'} ``` ```python race_results([ {\\"name\\": \\"Alice\\", \\"time\\": 11983}, {\\"name\\": \\"Bob\\", \\"time\\": 11983}, {\\"name\\": \\"Charlie\\", \\"time\\": 13876}, {\\"name\\": \\"David\\", \\"time\\": 12000}, {\\"name\\": \\"Eve\\", \\"time\\": 13940} ]) ``` The output should be: ```python {\'1st\': \'Alice, Bob (run-off)\', \'2nd\': \'David\', \'3rd\': \'Charlie\'} ``` Consider all tie cases to ensure your logic holds: - Ensure no modifications are made to the input list. - Keep binary search logic in hand for efficient sorting and tie breaking. - Handle at least three finishing positions and account for ties and \\"run-off\\" scenarios orderly. Have fun with the race!","solution":"def race_results(competitors): # Sort competitors first by time, then by name alphabetically sorted_competitors = sorted(competitors, key=lambda c: (c[\\"time\\"], c[\\"name\\"])) results = {} position = 1 count = 0 while count < 3 and position <= len(sorted_competitors): current_tied_group = [sorted_competitors[position - 1]] while (position < len(sorted_competitors) and sorted_competitors[position][\\"time\\"] == sorted_competitors[position - 1][\\"time\\"]): current_tied_group.append(sorted_competitors[position]) position += 1 if len(current_tied_group) > 1: if count == 0: results[\\"1st\\"] = \\", \\".join(c[\\"name\\"] for c in current_tied_group) + \\" (run-off)\\" else: results[f\\"{count + 1}nd\\" if count == 1 else \'3rd\'] = \\", \\".join(c[\\"name\\"] for c in current_tied_group) + \\" (tie)\\" else: results[f\\"{count + 1}st\\" if count == 0 else f\\"{count + 1}nd\\" if count == 1 else \'3rd\'] = current_tied_group[0][\\"name\\"] count += 1 position += 1 return results"},{"question":"You are working on a system that handles the scheduling of events. To avoid conflicts, you need to check if a new event can be added to the existing schedule. # Exercise Create a function `canScheduleEvent` that takes two arguments: `events`, a list of tuples representing the start and end times of already scheduled events, and `new_event`, a tuple representing the start and end time of the new event. The function should return `True` if the new event can be added without overlapping any existing event, and `False` otherwise. For example: canScheduleEvent([(1, 3), (4, 5)], (2, 4)) -> False canScheduleEvent([(1, 3), (5, 7)], (3, 5)) -> True # Rules - All events are represented as tuples `(start_time, end_time)`, where both `start_time` and `end_time` are integers. - An event is considered overlapping if it starts before the end of another event and ends after another event has started. - You can assume all times are given in a 24-hour format and all inputs are valid.","solution":"def canScheduleEvent(events, new_event): Determines if a new event can be scheduled without overlapping any existing event. Args: events : list of tuples The start and end times of already scheduled events. new_event : tuple The start and end time of the new event. Returns: bool : True if the new event can be added without overlap, False otherwise. new_start, new_end = new_event for start, end in events: if not (new_end <= start or new_start >= end): return False return True"},{"question":"A group of friends are planning to go on a hike and they have a certain amount of food for each of them. The food consumption pattern is as follows: the first friend consumes 1 unit of food, the second friend consumes 2 units of food, the third friend consumes 3 units of food, and so on. The friends have to consume food in that pattern consecutively. Once a friend cannot consume the required units of food, he or she will have to stop eating and the rest can continue if they have food left. We need to figure out when the food will run out. -----Input----- The first line contains an integer T denoting the number of test cases. Each test case contains an integer N which represents the total units of food available. -----Output----- For each test case, output an integer representing the number of friends who were able to fully consume their required units of food before the food ran out. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 10^6 -----Example----- Input: 5 1 3 6 10 15 Output: 1 2 3 4 5 -----Explanation----- Test case 1. We have N = 1 which means only 1 unit of food is available. The first friend consumes 1 unit of food. No food left for the second friend. Test case 2. We have N = 3. The first friend consumes 1 unit of food, the second friend consumes 2 units of food (1+2=3 units in total). No food left for the third friend. Test case 3. We have N = 6 which means the first friend consumes 1 unit, the second friend consumes 2 units (1+2=3), and the third friend consumes 3 units (3+3=6 units in total). No food left for the fourth friend.","solution":"def friends_consuming_food(t: int, test_cases: list) -> list: Returns the number of friends able to fully consume their required units of food before the food runs out for given test cases. :param t: Number of test cases :param test_cases: List of integers where each integer represents total units of food available for each test case :return: List of integers representing the number of friends for each test case result = [] for n in test_cases: friends = 0 i = 1 while n >= i: n -= i friends += 1 i += 1 result.append(friends) return result"},{"question":"Given a list of integers, `nums`, your task is to find the length of the longest subsequence where the difference between adjacent elements alternates between a positive and a negative value. A subsequence is derived by deleting zero or more elements from the list without changing the order of the remaining elements. Write a function to achieve the above with a time complexity of `O(n)`. For example: ```python longest_alternating_subsequence([1, 7, 4, 9, 2, 5]) = 6 # The subsequence [1, 7, 4, 9, 2, 5] is already alternating. longest_alternating_subsequence([1, 7, 4, 5, 5]) = 4 # The longest alternating subsequence is [1, 7, 4, 5]. longest_alternating_subsequence([29, 5, 3, 10, 30, 10]) = 4 # The longest alternating subsequence is [29, 5, 10, 30]. longest_alternating_subsequence([1, 2, 3, 4, 5, 6]) = 2 # The longest alternating subsequence is any two consecutive numbers (e.g. [1, 2]). ``` # Constraints: - 1 <= `nums.length` <= 10^5 - -10^9 <= `nums[i]` <= 10^9 More examples in test cases. Good luck!","solution":"def longest_alternating_subsequence(nums): Returns the length of the longest subsequence where the difference between adjacent elements alternates between a positive and a negative value. if not nums: return 0 n = len(nums) if n == 1: return 1 up = 1 down = 1 for i in range(1, n): if nums[i] > nums[i-1]: up = down + 1 elif nums[i] < nums[i-1]: down = up + 1 return max(up, down)"},{"question":"A company organizes a contest where participants compete in a series of rounds. Each round, some participants earn points, and some lose points. The cumulative points for each participant determines their rank. At the end of all rounds, the participant with the highest cumulative points is declared the winner. You need to write a function that simulates this contest. Given a list of rounds, where each round is represented by a dictionary with participants\' names as keys and the points earned in that round as values, return the name of the participant with the highest cumulative points at the end of all rounds. # Function Signature ```python def find_winner(rounds: List[Dict[str, int]]) -> str: ``` # Input - `rounds`: A list of dictionaries, where each dictionary represents a round and contains participants\' names (strings) as keys and points (integers) for that round as values. # Output - A string representing the name of the participant with the highest cumulative points. # Example ```python rounds = [ {\\"Alice\\": 10, \\"Bob\\": 5, \\"Charlie\\": -3}, {\\"Alice\\": -5, \\"Bob\\": 7, \\"Charlie\\": 10}, {\\"Alice\\": 2, \\"Bob\\": -3, \\"Charlie\\": 5} ] find_winner(rounds) ``` Output: ```python \\"Charlie\\" ``` # Constraints - Each participant’s name is unique within a round. - Each round will have at least one participant. - The number of rounds will be between 1 and 100. - The points for each participant in a round will be between -100 and 100. - Assume there is always a unique winner without any tie.","solution":"def find_winner(rounds): Determines the participant with the highest cumulative points after all rounds. Args: rounds (List[Dict[str, int]]): A list of dictionaries where each dictionary represents a round. Returns: str: The name of the participant with the highest cumulative points. cumulative_scores = {} for round_points in rounds: for participant, points in round_points.items(): if participant in cumulative_scores: cumulative_scores[participant] += points else: cumulative_scores[participant] = points # Determine the participant with the highest cumulative points winner = max(cumulative_scores, key=cumulative_scores.get) return winner"},{"question":"Write a function that takes a list of integers and returns the longest consecutive subsequence. A consecutive subsequence is a subset of the list where numbers appear in a sequence without any gaps when sorted. # Task Implement a function `find_longest_consecutive_subsequence(nums)` that receives a list `nums` of integers and returns the longest consecutive subsequence. If there are multiple subsequences with the same length, return any one of them. Notes: - The length of the list can be from 0 up to 10^4 elements. - The numbers can be both positive and negative. - If the list is empty, return an empty list. # Examples ```python find_longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) # Returns [1, 2, 3, 4] or [4, 3, 2, 1] find_longest_consecutive_subsequence([0, -1, 1, -2, 2]) # Returns [-2, -1, 0, 1, 2] or [2, 1, 0, -1, -2] find_longest_consecutive_subsequence([3, 4, 2, 1]) # Returns [1, 2, 3, 4] or [4, 3, 2, 1] find_longest_consecutive_subsequence([]) # Returns [] ``` ___ Your task is to implement the `find_longest_consecutive_subsequence` function: ```python def find_longest_consecutive_subsequence(nums): # Your code here ```","solution":"def find_longest_consecutive_subsequence(nums): Returns the longest consecutive subsequence from the list of integers, nums. if not nums: return [] num_set = set(nums) longest_subseq = [] for num in nums: if num - 1 not in num_set: # Start of a new sequence current_num = num current_subseq = [] while current_num in num_set: current_subseq.append(current_num) current_num += 1 if len(current_subseq) > len(longest_subseq): longest_subseq = current_subseq return longest_subseq"},{"question":"# Task You are given a list of `N` integers indicating the height of buildings in a skyline. Each building has a billboard that can display one character. The character on each building\'s billboard is faded due to sunlight, and you need to determine the most faded character in the skyline. The fadedness of a character is determined by the height of the building it\'s on. If a building is taller, the character on its billboard is more faded. To determine the most faded character, find the building with the maximum height and return the character on its billboard. In case of multiple buildings having the same maximum height, return the character on the billboard of the rightmost building with the maximum height. # Example For `heights = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]` and `billboards = [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\']`, the result should be `\'k\'` ``` You have the following skyline: heights: [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] billboards: [\'a\',\'b\',\'c\',\'d\',\'e\',\'f\',\'g\',\'h\',\'i\',\'j\',\'k\'] The tallest building has height 9 and its billboard displays \'f\'. The most faded character, therefore, is \'f\'. ``` For `heights = [2, 3, 2, 3, 4]` and `billboards = [\'p\', \'q\', \'r\', \'s\', \'t\']`, the result should be `\'t\'` ``` You have the following skyline: heights: [2, 3, 2, 3, 4] billboards: [\'p\',\'q\',\'r\',\'s\',\'t\'] The tallest building has height 4 and its billboard displays \'t\'. The most faded character, therefore, is \'t\'. ``` # Input/Output - `[input]` two integer arrays `heights` and `billboards` `heights` represents the heights of the buildings. `billboards` represent the characters on the billboards. `1 <= heights.length == billboards.length <= 1000` `1 <= heights[i] <= 100` The length of `billboards[i]` will be exactly 1. - `[output]` a character The most faded character in the skyline.","solution":"def most_faded_character(heights, billboards): Determines the most faded character in the skyline based on building heights. Parameters: heights (list of int): The heights of the buildings billboards (list of str): The characters on the billboards Returns: str: The most faded character max_height = max(heights) max_height_index = len(heights) - 1 - heights[::-1].index(max_height) return billboards[max_height_index]"},{"question":"Introduction Imagine that you are a software engineer at a company that specializes in generating maps for delivery services. Your team is tasked with improving the route optimization engine to be more efficient. A crucial part of this task is to write a function that can determine if a particular area is reachable within a set number of steps from a starting point on a grid map. You are provided with a 2D grid where each cell represents a possible location for the delivery services. The grid contains three types of cells: - \'S\' denotes the starting point, - \'E\' denotes the endpoint, - \'.\' denotes walkable paths, - \'X\' denotes obstacles that cannot be crossed. Given the maximum number of steps the delivery personnel can take, determine whether the endpoint \'E\' is reachable from the starting point \'S\' within that number of steps. Task Write a function `is_reachable(grid, max_steps)` that returns `True` if the endpoint \'E\' can be reached from the starting point \'S\' within `max_steps`, otherwise return `False`. The input to the function is: - `grid`: A list of strings representing the 2D grid. - `max_steps`: An integer indicating the maximum number of steps allowed. **Note**: - The delivery personnel can move up, down, left, or right one cell at a time. - The grid edges are bounded, and it is guaranteed that there is one \'S\' and one \'E\' in the grid. Example ```python grid = [ \\"S..X\\", \\".X.E\\", \\"....\\", \\"X.X.\\" ] max_steps = 4 # The function should return True because the endpoint \'E\' can be reached within 4 steps from \'S\'. print(is_reachable(grid, max_steps)) # Output: True ``` Constraints - The size of the grid will not exceed 50x50. - The number of steps will be a non-negative integer.","solution":"def is_reachable(grid, max_steps): from collections import deque def find_start_end(grid): start = end = None for r, row in enumerate(grid): for c, val in enumerate(row): if val == \'S\': start = (r, c) elif val == \'E\': end = (r, c) return start, end def bfs(grid, start, end, max_steps): rows, cols = len(grid), len(grid[0]) queue = deque([(start[0], start[1], 0)]) visited = set() visited.add(start) while queue: r, c, steps = queue.popleft() if (r, c) == end: return steps <= max_steps if steps >= max_steps: continue for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] != \'X\': queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return False start, end = find_start_end(grid) return bfs(grid, start, end, max_steps)"},{"question":"Your Task You need to write a function that generates all possible combinations of substrings within a given string `s`. The substrings must maintain the order of characters as in the original string but their lengths can range from 1 to the length of the string. Your function should return these substrings as a list, sorted by the order they appear in the string and then by their lengths. **Function Signature**: `def generate_substrings(s: str) -> list` # Input - `s` (str): A string with a length between 1 and 20 characters inclusive. # Output - `list`: A list of all possible substrings of `s`, sorted as described above. # Example ``` s = \\"abc\\" Output: [\\"a\\", \\"ab\\", \\"abc\\", \\"b\\", \\"bc\\", \\"c\\"] s = \\"ab\\" Output: [\\"a\\", \\"ab\\", \\"b\\"] ``` # Note The order in the output list is determined first by the starting position of the substring and then by the substring length. Thus, the list `[\\"a\\", \\"ab\\", \\"abc\\", \\"b\\", \\"bc\\", \\"c\\"]` is correctly sorted.","solution":"def generate_substrings(s: str) -> list: Generates all possible substrings of the given string `s`. Parameters: s (str): The input string (1 <= len(s) <= 20). Returns: list: A list of all possible substrings of `s`, sorted by the order they appear in the string and then by their lengths. substrings = [] n = len(s) for start in range(n): for end in range(start + 1, n + 1): substrings.append(s[start:end]) return substrings"},{"question":"Write a function that takes a list of integers and an integer `k`, and determines whether any two numbers in the list add up to `k`. The function should return a boolean value: `True` if there are two distinct numbers in the list that sum up to `k`, and `False` otherwise. Examples: ```python [1, 2, 3, 4], 5 => True # (1 + 4 or 2 + 3) [1, 2, 3, 4], 8 => False # No such pair exists [0, -1, 2, -3, 1], -1 => True # (0 + (-1) or -3 + 2) [1, 2, 3, 7], 10 => True # (3 + 7) ``` Constraints: - The list will always have at least two integers. - The integers can be negative, zero, or positive. - The same element cannot be used twice, i.e., the pair (list[i], list[i]) is not allowed.","solution":"def has_pair_with_sum(lst, k): Determines if there are any two distinct numbers in the list that add up to k. Parameters: lst (list of int): List of integers. k (int): Target sum. Returns: bool: True if there are two distinct numbers in the list that add up to k, False otherwise. seen = set() for num in lst: if k - num in seen: return True seen.add(num) return False"},{"question":"Given a 2D grid of size m x n and an integer k, you need to shift the grid k times. In one shift operation: - The element at grid[i][j] moves to grid[i][j+1]. - The element at grid[i][n-1] moves to grid[i+1][0]. - The element at grid[m-1][n-1] moves to grid[0][0]. Write a function that returns the 2D grid after applying k shifts. Example 1: Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1 Output: [[9,1,2],[3,4,5],[6,7,8]] Example 2: Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4 Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]] Example 3: Input: grid = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]], k = 3 Output: [[8],[9],[10],[1],[2],[3],[4],[5],[6],[7]] Function Signature: `def shiftGrid(grid: List[List[int]], k: int) -> List[List[int]]:`","solution":"from typing import List def shiftGrid(grid: List[List[int]], k: int) -> List[List[int]]: m, n = len(grid), len(grid[0]) total_elements = m * n # k could be larger than total elements, so we take k % total_elements k = k % total_elements # Convert the 2D grid to a 1D list flat_list = [grid[i][j] for i in range(m) for j in range(n)] # Shift the flat list by k flat_list = flat_list[-k:] + flat_list[:-k] # Convert the 1D list back to a 2D grid new_grid = [[flat_list[i * n + j] for j in range(n)] for i in range(m)] return new_grid"},{"question":"Given an unsorted list of integers, write a function that returns a new list of the integers sorted in ascending order, but with the odd integers first and even integers last. The order of the odd integers and the order of the even integers should be the same as in the original unsorted list. Example: ```python sort_odds_evens([3, 8, 5, 2, 7, 4, 9]) => [3, 5, 7, 9, 8, 2, 4] sort_odds_evens([10, 1, 7, 3, 2, 9]) => [1, 7, 3, 9, 10, 2] sort_odds_evens([12, 14, 16, 17, 19, 20]) => [17, 19, 12, 14, 16, 20] ``` Explanation: In the first example, the input list is `[3, 8, 5, 2, 7, 4, 9]`. The odd numbers are `[3, 5, 7, 9]` and the even numbers are `[8, 2, 4]`. We need to maintain their respective orders from the input list while placing all odd numbers first followed by all even numbers. The resultant list is `[3, 5, 7, 9, 8, 2, 4]`. Note: - Ensure the relative order of odd integers is preserved from the input list. - Ensure the relative order of even integers is preserved from the input list.","solution":"def sort_odds_evens(arr): Returns a new list of the integers sorted in ascending order, but with the odd integers first and even integers last. odds = [x for x in arr if x % 2 != 0] evens = [x for x in arr if x % 2 == 0] return odds + evens"},{"question":"=====Function Descriptions===== A matrix is a two-dimensional array. In mathematical notation, it is a rectangular arrangement of numbers in rows and columns. The NumPy package helps us work with these matrices. To use the NumPy module, we need to import it using: import numpy as np Matrix Operations In NumPy, you can easily perform operations on matrices such as transpose, sum, and element-wise multiplication. import numpy as np matrix = np.array([[1, 2], [3, 4]]) transpose_matrix = matrix.T elementwise_sum = matrix + matrix print(transpose_matrix) # [[1, 3], [2, 4]] print(elementwise_sum) # [[2, 4], [6, 8]] In this example, we create a 2x2 matrix and then compute its transpose and element-wise sum using NumPy functions. =====Problem Statement===== You are given two matrices of the same size. Each matrix is provided as a list of rows, where each row is a space-separated list of numbers. Your task is to multiply these matrices element-wise, convert the result to type integer, and print it. =====Input Format===== The first line contains two integers, n and m, specifying the number of rows and columns in the matrices. The next n lines contain m space-separated integers, which make up the first matrix. The following n lines contain m space-separated integers, which make up the second matrix. =====Output Format===== Print the resulting matrix after element-wise multiplication. Each row of the matrix should be in a new line and the elements should be space-separated. =====Sample Input===== 2 2 1 2 3 4 5 6 7 8 =====Sample Output===== 5 12 21 32","solution":"import numpy as np def elementwise_multiply_matrix(n, m, matrix1_list, matrix2_list): # Convert input lists to numpy arrays matrix1 = np.array(matrix1_list, dtype=int).reshape(n, m) matrix2 = np.array(matrix2_list, dtype=int).reshape(n, m) # Perform elementwise multiplication multiplied_matrix = np.multiply(matrix1, matrix2) # Convert the result matrix to a list of lists for convenient printing multiplied_matrix_list = multiplied_matrix.tolist() return multiplied_matrix_list def format_matrix(matrix_list): # Format the matrix for printing return \'n\'.join(\' \'.join(map(str, row)) for row in matrix_list)"},{"question":"Aliens have landed on Earth and brought with them `n` robotic units that can perform various activities. Each robot is powered by a specific type of battery, and you have a limited inventory of different types of batteries, `m` in total. You need to assign batteries to the robots such that each robot gets exactly one battery and the total power provided by the batteries matches or exceeds a given minimum threshold `T`. Each robot\'s energy requirements and each battery\'s power value are known. You are tasked with determining if it is possible to assign the batteries in such a way that the total power meets the requirement. -----Input----- The first line contains three integers n, m, and T (1 ≤ n, m ≤ 1000, 1 ≤ T ≤ 10000) — number of robots, number of batteries, and the minimum total power required. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the power requirements of the robots. The third line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 1000) — the power available in each battery. -----Output----- Output \\"YES\\" (without quotes) if it is possible to assign batteries to robots such that the total power provided is at least T. Otherwise, output \\"NO\\" (without quotes). -----Examples----- Input 3 4 10 2 3 4 5 2 3 4 Output YES Input 3 3 15 5 5 5 4 4 4 Output NO","solution":"def can_assign_batteries(n, m, T, robot_requirements, batteries): if n > m: return \\"NO\\" robot_requirements.sort() batteries.sort(reverse=True) total_power = sum(batteries[:n]) if total_power >= T: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given two strings, one called \\"text\\" and another called \\"pattern.\\" Your task is to determine if \\"pattern\\" can be found in \\"text\\" as a non-contiguous subsequence. A non-contiguous subsequence maintains the relative order of characters in the original string but can have other characters in between. You need to output \\"found\\" if \\"pattern\\" is a non-contiguous subsequence of \\"text,\\" otherwise, output \\"not found.\\" -----Input----- The first line of input will contain an integer T, the number of test cases. Each test case will consist of two lines. The first line will have the string \\"text.\\" The second line will have the string \\"pattern.\\" -----Output----- For each test case, output \\"found\\" (without quotes) or \\"not found\\" (without quotes) in a new line. -----Constraints----- - 1 ≤ T ≤ 1,000 - 1 ≤ |text|, |pattern| ≤ 100 -----Example----- Input: 4 abcde ace computer put abcdef fgh stringmatching sing Output: found found not found found -----Explanation----- For the first case, \\"ace\\" can be found in \\"abcde\\" as a non-contiguous subsequence. For the second case, \\"put\\" can be found in \\"computer\\" as a non-contiguous subsequence. For the third case, \\"fgh\\" cannot be found in \\"abcdef\\" as a non-contiguous subsequence. For the fourth case, \\"sing\\" can be found in \\"stringmatching\\" as a non-contiguous subsequence.","solution":"def is_non_contiguous_subsequence(text, pattern): Determines if pattern can be found in text as a non-contiguous subsequence. it = iter(text) return all(char in it for char in pattern) def solve(T, test_cases): results = [] for i in range(T): text = test_cases[i][0] pattern = test_cases[i][1] if is_non_contiguous_subsequence(text, pattern): results.append(\\"found\\") else: results.append(\\"not found\\") return results"},{"question":"Parth is playing with a sequence of numbers. Given a sequence of integers of length N, he wants to calculate the number of continuous subarrays where the sum of elements is exactly equal to a given integer S. For example, given the sequence [1, 2, 3, 4, 5] and S = 5, the subarrays that sum up to 5 are [2, 3] and [5]. Your task is to help Parth by writing a program that takes an integer N representing the length of the sequence, followed by the sequence itself and an integer S, and outputs the number of such subarrays. -----Input----- - The first line contains an integer T representing the number of test cases. - Each test case consists of: - A line containing the integer N (length of the sequence). - A line containing N space-separated integers representing the sequence. - A line containing the integer S. -----Output----- - For each test case, output a single line containing the number of continuous subarrays whose sum is exactly S. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - -10^5 ≤ elements of sequence ≤ 10^5 - -10^9 ≤ S ≤ 10^9 -----Example----- Input: 2 5 1 2 3 4 5 5 3 1 -1 1 0 Output: 2 2 -----Explanation----- Example case 1: The subarrays [2, 3] and [5] sum up to 5. Example case 2: The subarrays [1, -1] and [1, -1, 1, -1] (each occurrence of 0 sum). Note: Make sure your solution is efficient enough to handle the upper constraints.","solution":"from collections import defaultdict def count_subarrays_with_sum(N, sequence, S): Returns the number of continuous subarrays whose sum is exactly S. Parameters: N (int): length of the sequence. sequence (list of int): the sequence of integers. S (int): the target sum. Returns: int: number of continuous subarrays whose sum is exactly S. count = 0 current_sum = 0 prefix_sums = defaultdict(int) prefix_sums[0] = 1 for num in sequence: current_sum += num count += prefix_sums[current_sum - S] prefix_sums[current_sum] += 1 return count def solve(T, test_cases): results = [] for case in test_cases: N, sequence, S = case results.append(count_subarrays_with_sum(N, sequence, S)) return results"},{"question":"Alice loves playing with arrays, and she enjoys calculating subarray sums. She defines the beauty of a subarray as the difference between the maximum and minimum element within that subarray. Given an array of integers, Alice wants to find the subarray with the maximum beauty. A subarray is any contiguous part of an array. More formally, a subarray of an array A with length n is defined as A[i:j] where 0 ≤ i ≤ j ≤ n. Help Alice by finding the maximum beauty for any subarray in the given array. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000), denoting the number of elements in the array. The second line contains n space-separated integers a_i (-10^6 ≤ a_i ≤ 10^6), denoting the elements of the array. -----Output----- Output a single integer denoting the maximum beauty for any subarray in the given array. -----Examples----- Input 5 1 3 -1 7 5 Output 8 Input 3 4 4 4 Output 0 Input 4 -2 1 -3 4 Output 7 -----Note----- In the first sample, the subarray with maximum beauty is [-1, 7], where the maximum element is 7 and the minimum element is -1. The beauty is 7 - (-1) = 8. In the second sample, all subarrays have the same maximum and minimum element, hence the beauty of any subarray is 0. In the third sample, the subarray with maximum beauty is [-3, 4], where the maximum element is 4 and the minimum element is -3. The beauty is 4 - (-3) = 7.","solution":"def max_beauty(n, arr): Returns the maximum beauty for any subarray in the given array. max_beauty = 0 for i in range(n): min_val = arr[i] max_val = arr[i] for j in range(i, n): min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) max_beauty = max(max_beauty, max_val - min_val) return max_beauty"},{"question":"In a chaotic futuristic city, there are N solar charging stations spread across different locations. Each station has a specific amount of energy it can store and is connected to other stations through bidirectional pathways. The city\'s energy network is crucial for various operations, hence it’s necessary to find out if all the stations can be part of a single connected network. Your task is to write a program that will determine if it\'s possible to connect all the charging stations directly or indirectly using the available pathways. ----- Input ----- The first line contains an integer N (2 ≤ N ≤ 10^5) — the number of solar charging stations. The second line contains an integer M (1 ≤ M ≤ 2×10^5) — the number of bidirectional pathways. The following M lines each contain two integers u and v (1 ≤ u, v ≤ N) — representing a pathway between charging station u and charging station v. ----- Output ----- Print \\"YES\\" if all the charging stations can be connected directly or indirectly, otherwise print \\"NO\\". ----- Examples ----- Input 4 2 1 2 3 4 Output NO Input 5 4 1 2 2 3 3 4 4 5 Output YES ----- Note ----- In the first sample, there is no pathway between the pair of charging stations (1, 2) and (3, 4), leading to two disconnected parts of the network. Thus, the output is \\"NO\\". In the second sample, each of the charging stations can be reached directly or indirectly from any other station, hence the output is \\"YES\\".","solution":"def can_connect_all_stations(N, M, pathways): Determines if all charging stations can be connected directly or indirectly. Parameters: N (int): The number of solar charging stations. M (int): The number of bidirectional pathways. pathways (List[Tuple[int, int]]): List of pathways between stations. Returns: str: \\"YES\\" if all stations are connected, otherwise \\"NO\\". from collections import defaultdict, deque if N == 1: return \\"YES\\" # Create an adjacency list graph = defaultdict(list) for u, v in pathways: graph[u].append(v) graph[v].append(u) # Perform BFS or DFS to check connectivity visited = [False] * (N + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) bfs(1) # Check if all stations have been visited if all(visited[1:N+1]): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of words and an integer n. Your task is to find and return all the words in the list that contain exactly n vowels. Write a function `findWordsWithNVowels` that takes in a list of words and an integer n, and returns a list of all words from the given list that have exactly n vowels. For example: ```python findWordsWithNVowels([\\"example\\", \\"testing\\", \\"hello\\", \\"world\\", \\"python\\"], 2) ``` should return: ```python [\\"example\\", \\"testing\\", \\"hello\\"] ``` Explanation: - \\"example\\" has 3 vowels (e, a, e) - \\"testing\\" has 2 vowels (e, i) - \\"hello\\" has 2 vowels (e, o) - \\"world\\" has 1 vowel (o) - \\"python\\" has 1 vowel (o) So the words with exactly 2 vowels are \\"testing\\" and \\"hello\\". Your task is to write the function `findWordsWithNVowels`.","solution":"def findWordsWithNVowels(words, n): Returns a list of words that contain exactly n vowels. vowels = \'aeiouAEIOU\' def count_vowels(word): Returns the number of vowels in the given word. return sum(1 for char in word if char in vowels) return [word for word in words if count_vowels(word) == n]"},{"question":"Given a list of positive integers representing heights of buildings in a skyline, write a function that finds the maximum area rectangle that can fit entirely within the skyline silhouette. Each building is represented by a width of 1, and the height is given by the list of integers. For example, given the list `[2, 1, 5, 6, 2, 3]`, the skyline looks like: ``` x x x x x x x x x x x ``` And the maximum rectangle that can fit inside this skyline is of area 10 (spanning heights 5 and 6). Write a function that takes a list of integers and returns the area of the largest rectangle. Example: Input: `[2, 1, 5, 6, 2, 3]` Output: `10`","solution":"def largestRectangleArea(heights): Given a list of integers representing the heights of buildings in a skyline, this function returns the area of the largest rectangle that can fit entirely within the skyline. :param heights: List[int] :return: int stack = [] max_area = 0 index = 0 while index < len(heights): # Stack is empty or the current building is taller than the building at the top of the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Create a function that takes a numeric string representing a product barcode as input and verifies its validity using the following rules for UPC-A standard barcodes: - The barcode should be exactly 12 digits long. - Compute the checksum using the first 11 digits as follows: 1. Sum all digits in the odd positions (first, third, fifth, etc.) and multiply the result by 3. 2. Sum all digits in the even positions (second, fourth, sixth, etc.). 3. Add the results from steps 1 and 2. 4. Find the modulo 10 of the result from step 3. 5. If the modulo result is not 0, subtract it from 10 to get the checksum digit. 6. If the modulo result is 0, the checksum digit is 0. - The checksum digit computed as described must match the 12th digit of the barcode. Example: 036000291452 - Sum of digits in odd positions: 0 + 6 + 0 + 2 + 1 + 2 = 11 - Multiply this sum by 3: 11 * 3 = 33 - Sum of digits in even positions: 3 + 0 + 0 + 9 + 4 = 16 - Add the results: 33 + 16 = 49 - Find the modulo 10 of the result: 49 % 10 = 9 - Subtract from 10 to get the checksum digit: 10 - 9 = 1 - The checksum digit matches the 12th digit of the barcode: 036000291452 Your task is to write a function that checks if a given barcode is valid. Return `true` if the barcode is valid and `false` otherwise. Note: The input will be a string.","solution":"def is_valid_upc(barcode): Check if the provided barcode is a valid UPC-A barcode. Parameters: barcode (str): The barcode as a string of exactly 12 digits. Returns: bool: True if the barcode is valid, False otherwise. if len(barcode) != 12 or not barcode.isdigit(): return False odd_sum = sum(int(barcode[i]) for i in range(0, 11, 2)) even_sum = sum(int(barcode[i]) for i in range(1, 11, 2)) total_sum = (odd_sum * 3) + even_sum check_digit = (10 - (total_sum % 10)) % 10 return check_digit == int(barcode[11])"},{"question":"**The Problem** Alice is planning her trip to several cities. For each city, she has noted the distance from her starting city and an estimated amount of time (in hours) she plans to spend in each city. She needs your help to decide the order in which she should travel the cities to minimize the total travel time. Given a list of cities with their distances from the starting city and a list of the estimated time she plans to spend in each city, determine an optimal order for visiting the cities to minimize the total travel time. Assume she will return to the starting city after visiting all the cities. **What To Do** Your task is to write a helper function `plan_trip` that takes two arguments: - `distances`: a list of integers where the `i-th` element represents the distance of the `i-th` city from the starting city. - `times`: a list of integers where the `i-th` element represents the amount of time (in hours) that Alice plans to spend in the `i-th` city. The function should return a list of integers representing the order in which Alice should visit the cities to minimize the total travel time. **Examples** ``` plan_trip([10, 20, 30], [2, 1, 3]); ``` should return `[0, 2, 1]` ``` plan_trip([15, 5, 25], [3, 2, 1]); ``` should return `[1, 0, 2]` If two or more cities have the same distance, the order among them can be arbitrary as long as the total travel time is minimized. **Constraints** - The `distances` and `times` lists will have the same length and will not be empty. - The distances and times will be positive integers.","solution":"def plan_trip(distances, times): Determines the optimal order of visiting cities to minimize total travel time. Parameters: distances (list of int): Distances of the cities from the starting city. times (list of int): The estimated amount of time to spend in each city. Returns: list of int: The order in which to visit the cities. # Combine the distances and times into a list of tuples cities = list(enumerate(zip(distances, times))) # Sort the cities primarily by distance and secondarily by time cities.sort(key=lambda x: (x[1][0], x[1][1])) # Extract and return the order of visit return [city[0] for city in cities]"},{"question":"Write a function that checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Your function should return a boolean result. **Programming Constraints:** - Do not use built-in functions that directly solve the problem. - Optimize for both time and space complexity. **Function signature:** ```python def is_palindrome(s: str) -> bool: # Your code here ``` **Input:** - A string `s` of length between 0 and 10^5. **Output:** - Return `True` if the string is a valid palindrome, `False` otherwise. **Example:** ```python assert is_palindrome(\\"A man, a plan, a canal: Panama\\") == True assert is_palindrome(\\"race a car\\") == False ``` **Explanation:** - The function `is_palindrome(\\"A man, a plan, a canal: Panama\\")` returns `True` because after removing non-alphanumeric characters and ignoring cases, it becomes \\"amanaplanacanalpanama\\", which reads the same backward. - The function `is_palindrome(\\"race a car\\")` returns `False` because after processing it becomes \\"raceacar\\", which does not read the same backward.","solution":"def is_palindrome(s: str) -> bool: Checks if the given string is a palindrome considering only alphanumeric characters and ignoring cases. def is_alnum(c): return (ord(\'a\') <= ord(c) <= ord(\'z\')) or (ord(\'A\') <= ord(c) <= ord(\'Z\')) or (ord(\'0\') <= ord(c) <= ord(\'9\')) filtered_chars = [c.lower() for c in s if is_alnum(c)] left, right = 0, len(filtered_chars) - 1 while left < right: if filtered_chars[left] != filtered_chars[right]: return False left += 1 right -= 1 return True"},{"question":"You are given a string containing letters and digits. Your task is to separate the letters and digits such that all letters come before all digits. The relative order of letters and the relative order of digits should remain the same as in the input string. Write a function that accepts a string and returns a new string with letters and digits separated. Note: The input string will only contain lowercase letters and digits. Examples ``` \\"ab3c2d1\\" --> \\"abcd321\\" \\"1a2b3c4d\\" --> \\"abcd1234\\" \\"a1b2c3d4\\" --> \\"abcd1234\\" ```","solution":"def separate_letters_and_digits(s): Separates the letters and digits in the string such that all letters come before all digits, maintaining their relative order. Args: s (str): Input string containing lowercase letters and digits. Returns: str: A new string with letters and digits separated. letters = \'\'.join([char for char in s if char.isalpha()]) digits = \'\'.join([char for char in s if char.isdigit()]) return letters + digits"},{"question":"Given a string containing only digits, generate all possible valid IP addresses that can be obtained by inserting dots into the string. An IP address consists of four numbers (each between 0 and 255) separated by dots, and each segment of the IP address must not have leading zeros. Example: Input: \\"25525511135\\" Expected Output: [\\"255.255.11.135\\", \\"255.255.111.35\\"]","solution":"def generate_ip_addresses(input_str): def is_valid(segment): # Check if the segment is valid: not empty, less than or equal to 255, no leading zeros unless single digit \'0\' return segment.isdigit() and 0 <= int(segment) <= 255 and str(int(segment)) == segment result = [] n = len(input_str) # The maximum length for any portion in a valid IP address is 3 chars for i in range(1, min(4, n - 2)): for j in range(i + 1, min(i + 4, n - 1)): for k in range(j + 1, min(j + 4, n)): s1, s2, s3, s4 = input_str[:i], input_str[i:j], input_str[j:k], input_str[k:] if is_valid(s1) and is_valid(s2) and is_valid(s3) and is_valid(s4): result.append(f\\"{s1}.{s2}.{s3}.{s4}\\") return result"},{"question":"Implement a function that takes an array of integers and returns an array with each element representing the product of all the elements in the original array except the element at that position. Do not use division in your implementation. For example: - Input: [1, 2, 3, 4] - Output: [24, 12, 8, 6] The function should handle negative numbers and zeroes correctly. ```if:csharp Documentation: Kata.ProductArray Method (Int32[]) Calculates the product array. For each element in the original array, computes the product of all other elements and returns the resulting array. Syntax public static int[] ProductArray( int[] input ) Parameters input Type: System.Int32[] The input array of integers. Return Value Type: System.Int32[] An array where each element is the product of all the elements in the original array except the current element. Exceptions Exception Condition ArgumentNullException input is null. ```","solution":"def product_array(nums): Returns an array such that each element at index i is the product of all the elements in the original array except the one at i. if not nums: return [] # Initialize the arrays length = len(nums) left_products = [1] * length right_products = [1] * length output = [1] * length # Fill left_products so that left_products[i] contains the product of all elements to the left of nums[i] for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products so that right_products[i] contains the product of all elements to the right of nums[i] for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Fill the output array by multiplying left and right products for i in range(length): output[i] = left_products[i] * right_products[i] return output"},{"question":"# Task You are given two strings, `s1` and `s2`. Your task is to determine if `s2` is an anagram of `s1`. # Example For `s1 = \\"listen\\"` and `s2 = \\"silent\\"`, the output should be `true`. For `s1 = \\"hello\\"` and `s2 = \\"world\\"`, the output should be `false`. # Input/Output - `[input]` string `s1` - `[input]` string `s2` - `[output]` a boolean value Return `true` if `s2` is an anagram of `s1`, otherwise return `false`.","solution":"def is_anagram(s1, s2): Determines if s2 is an anagram of s1. Parameters: - s1 (str): The first string - s2 (str): The second string Returns: - bool: True if s2 is an anagram of s1, False otherwise return sorted(s1) == sorted(s2)"},{"question":"# Task You are given an array of integers and a target integer `k`. Your task is to determine if there are `two distinct indices` in the array such that the sum of the elements at these indices is equal to `k`. Write a function that returns a boolean value (`True` or `False`) indicating whether such a pair of indices exists. # Example For `arr = [1, 2, 3, 4, 5]` and `k = 6`, the result should be `True`. Explanation: ``` The pair (1, 5) at indices (0, 4) adds up to 6. ``` For `arr = [1, 2, 3, 4, 5]` and `k = 10`, the result should be `False`. Explanation: ``` No pair of numbers add up to 10. ``` # Input/Output - `[input]` array of integers `arr` An array of integers, with `1 ≤ len(arr) ≤ 10^4`. - `[input]` integer `k` The target integer. - `[output]` a boolean value Return `True` if there exists a pair of distinct indices such that `arr[i] + arr[j] = k`, otherwise `False`.","solution":"def has_pair_with_sum(arr, k): Determines if there are two distinct indices in the array such that the sum of the elements at these indices is equal to k. Parameters: arr (list of int): The array of integers. k (int): The target sum. Returns: bool: True if such a pair exists, False otherwise. seen = set() for num in arr: complement = k - num if complement in seen: return True seen.add(num) return False"},{"question":"You are organizing a scavenger hunt for the kids in your neighborhood. One of the challenges is a word puzzle where they need to find words using a set of given letters. Create a function, `canFormWord`, that checks if a given word can be formed using the exact count of letters from a set of characters. The input to the function will be `letters`, a string containing all the available characters, and `word`, the target word to form. Letters are case-insensitive, and each letter can be used only as many times as it appears in the input set. The function should return `True` if the word can be formed with the given letters, and `False` otherwise. Example: ```python canFormWord(\\"aabbcc\\", \\"abc\\") # returns True canFormWord(\\"aabbcc\\", \\"aabbc\\") # returns True canFormWord(\\"aabbcc\\", \\"aabbccc\\") # returns False canFormWord(\\"aabbcc\\", \\"d\\") # returns False ```","solution":"from collections import Counter def canFormWord(letters, word): Check if a word can be formed using the exact count of letters from a set of characters. Args: letters (str): A string containing available characters. word (str): The target word to form. Returns: bool: True if the word can be formed, False otherwise. letters_count = Counter(letters.lower()) word_count = Counter(word.lower()) for char in word_count: if word_count[char] > letters_count.get(char, 0): return False return True"},{"question":"You\'re managing an online store where customers can rate their purchases. Each rating is an integer between 1 and 5 (inclusive). You\'d like to calculate the average rating for each product based on a list of ratings for various products. Write a function `average_ratings()` that takes a dictionary where the keys are product names (strings) and the values are lists of integers representing the ratings for that product. The function should return a new dictionary where each key is a product name and the corresponding value is the average rating for that product, rounded to 2 decimal places. If a product has no ratings, the average should be 0. For example, given the input: ```python { \\"Product A\\": [5, 4, 3, 5], \\"Product B\\": [2, 3], \\"Product C\\": [] } ``` `average_ratings()` should return: ```python { \\"Product A\\": 4.25, \\"Product B\\": 2.5, \\"Product C\\": 0.0 } ```","solution":"def average_ratings(ratings_dict): Calculate the average rating for each product. Args: ratings_dict (dict): A dictionary where the keys are product names (strings) and the values are lists of integers representing ratings. Returns: dict: A dictionary where each key is a product name and the corresponding value is the average rating for that product, rounded to 2 decimal places. Products with no ratings have an average of 0. averages = {} for product, ratings in ratings_dict.items(): if not ratings: averages[product] = 0.0 else: averages[product] = round(sum(ratings) / len(ratings), 2) return averages"},{"question":"Create a function `find_pairs` that accepts an array of integers and a target sum. The function should return an array of unique pairs of numbers from the input array where the sum of each pair equals the target sum. Each pair must be sorted in ascending order, and the overall array of pairs should be sorted lexicographically. Example: ``` find_pairs([1, 2, 3, 4, 3, 5, 6, 2], 5) # should return [[1, 4], [2, 3]] ``` Notes: - A pair (a, b) is considered unique if there is no other pair (c, d) in the array such that {a, b} == {c, d}. - Each number in the input array can only be used once in all pairs. For example, given an array `[1, 2, 2, 3]` and target sum `4`, even though the number `2` appears twice, it can only be used in one of the pairs `[1, 3]` or `[2, 2]` but not both. - If no pairs are found, return an empty array.","solution":"def find_pairs(arr, target_sum): Returns a list of unique pairs of numbers from the input array where the sum of each pair equals the target sum. Each pair within the list is sorted in ascending order, and the overall list of pairs is sorted lexicographically. pairs = [] seen = set() for i, num in enumerate(arr): complement = target_sum - num if complement in seen: pair = sorted([complement, num]) if pair not in pairs: pairs.append(pair) seen.add(num) return sorted(pairs)"},{"question":"Lucas loves numbers and he is fascinated by the number of divisors any given number can have. He wants to write a program that helps him determine the number of divisors for a specific range of numbers. Your task is to help Lucas by writing a program that will provide him with the number of divisors for each number in a given range. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two integers A and B (1 ≤ A ≤ B ≤ 105) representing the range of numbers for which Lucas wants to find the number of divisors. -----Output----- For each test case, output a line containing B - A + 1 integers, representing the number of divisors for each number in the range [A, B]. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ A ≤ B ≤ 105 -----Example----- Input: 2 1 5 10 15 Output: 1 2 2 3 2 4 2 4 4 4 4 -----Explanation----- Test case 1. We need to find the number of divisors for each number from 1 to 5: - 1 has 1 divisor: 1 - 2 has 2 divisors: 1, 2 - 3 has 2 divisors: 1, 3 - 4 has 3 divisors: 1, 2, 4 - 5 has 2 divisors: 1, 5 So, the output is \\"1 2 2 3 2\\". Test case 2. We need to find the number of divisors for each number from 10 to 15: - 10 has 4 divisors: 1, 2, 5, 10 - 11 has 2 divisors: 1, 11 - 12 has 6 divisors: 1, 2, 3, 4, 6, 12 - 13 has 2 divisors: 1, 13 - 14 has 4 divisors: 1, 2, 7, 14 - 15 has 4 divisors: 1, 3, 5, 15 So, the output is \\"4 2 6 2 4 4\\".","solution":"def count_divisors_in_range(T, test_cases): Determines the number of divisors for each number in a given range for T test cases. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers A and B (1 ≤ A ≤ B ≤ 105). Returns: list of lists: Each list contains the number of divisors for each number in the range [A, B] for each test case. def divisors(n): Returns the number of divisors of a given integer n. count = 0 for i in range(1, int(n**0.5) + 1): if n % i == 0: if i * i == n: count += 1 else: count += 2 return count results = [] for A, B in test_cases: results.append([divisors(i) for i in range(A, B + 1)]) return results"},{"question":"# Task **Your task** is to implement a function `rotate_string` that takes a string and an integer as arguments, and returns the string after rotating it to the right by the given number of positions. The rotation should wrap around the ends of the string. Arguments: - `s` — The string to be rotated. (`s`, a non-empty string consisting of at most 1000 characters) - `n` — The number of positions to rotate the string by. (`n` is an integer between 0 and 1000) # Examples ```python rotate_string(\\"hello\\", 2) // Should return \\"lohel\\" rotate_string(\\"abcdef\\", 4) // Should return \\"cdefab\\" rotate_string(\\"rotate\\", 1) // Should return \\"erotat\\" ``` >***Note, that***: - If `n` is greater than the length of the string, the function should continue rotating as if the string was circular. For instance, rotating \\"abc\\" by 4 positions would be the same as rotating by 1 position. - The function should perform efficiently even when handling strings of maximum length.","solution":"def rotate_string(s, n): Rotates a string s to the right by n positions. if not s: return s n = n % len(s) return s[-n:] + s[:-n]"},{"question":"You should write a function that returns the most frequent word in a given string. If there is a tie, return the word that appears first in the string. The input string will only contain words separated by spaces and may include punctuation marks which should not be a part of the words. Examples * Input: \\"Hello, world! Hello!\\" Output: \\"Hello\\" * Input: \\"Code test test Code\\" Output: \\"Code\\" * Input: \\"apple orange banana apple orange\\" Output: \\"apple\\"","solution":"import re from collections import Counter def most_frequent_word(text): Returns the most frequent word in the given string. If there is a tie, returns the word that appears first in the string. # Remove punctuation and convert to lower case words = re.findall(r\'bw+b\', text.lower()) # Count the occurrences of each word word_counts = Counter(words) # Find the most frequent word with the tie-breaking condition most_frequent = None max_count = 0 for word in words: if word_counts[word] > max_count: most_frequent = word max_count = word_counts[word] return most_frequent"},{"question":"You are given a string consisting of lowercase letters and you have to find out if you can rearrange the characters to form a palindrome. In other words, you need to determine if there exists a permutation of the given string that is a palindrome. A string can form a palindrome if, at most, one character occurs an odd number of times, while all other characters must occur an even number of times. # Example: ``` Input: \\"racecar\\" Output: \\"Yes\\" Explanation: The given string can be rearranged as \\"racecar\\" which is a palindrome. ``` ``` Input: \\"hello\\" Output: \\"No\\" Explanation: It is not possible to rearrange the characters to form a palindrome. ``` # Your Task: Write a function `canFormPalindrome(s: String) -> String` that takes a string `s` as an argument and returns `\\"Yes\\"` if it is possible to rearrange the characters to form a palindrome and `\\"No\\"` otherwise.","solution":"def canFormPalindrome(s): Determines if the characters of the given string can be rearranged to form a palindrome. :param s: String input consisting of lowercase letters. :return: \\"Yes\\" if it\'s possible to rearrange the characters to form a palindrome, otherwise \\"No\\". from collections import Counter char_count = Counter(s) odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) return \\"Yes\\" if odd_counts <= 1 else \\"No\\""},{"question":"Yash is organizing a coding competition where he has prepared N coding problems. Each problem has a specific difficulty level, which is an integer value. During the competition, Yash wants to select some problems such that the absolute difference between the maximum and minimum difficulty levels among the selected problems is at most K. Write a program to determine the maximum number of problems Yash can select under this condition. -----Input:----- - First line will contain two integers N (the number of problems) and K (the maximum allowed difference in difficulty). - Second line will contain N integers, where the i^{th} integer represents the difficulty level of the i^{th} problem. -----Output:----- Output a single integer, the maximum number of problems Yash can select such that the absolute difference between the maximum and minimum difficulty levels is at most K. -----Constraints----- - 1 leq N leq 100000 - 0 leq K leq 10^9 - 1 leq difficulty leq 10^9 -----Sample Input:----- 6 3 1 5 3 4 2 7 -----Sample Output:----- 4 -----EXPLANATION:----- Yash can select the problems with difficulty levels [1, 3, 4, 2]. The maximum difficulty is 4 and the minimum difficulty is 1, so the difference is 3, which is within the allowed difference K=3.","solution":"def max_problems_within_difficulty(N, K, difficulties): Determine the maximum number of problems Yash can select such that the absolute difference between the maximum and minimum difficulty levels is at most K. :param N: int: The number of problems :param K: int: The maximum allowed difference in difficulty :param difficulties: List[int]: The list of difficulty levels of the problems :return: int: The maximum number of problems Yash can select difficulties.sort() left = right = 0 max_count = 0 while right < N: if difficulties[right] - difficulties[left] <= K: max_count = max(max_count, right - left + 1) right += 1 else: left += 1 return max_count"},{"question":"Given an array of integers, determine whether it is possible to make all elements of the array equal using the minimum number of operations. In each operation, you can choose any one element of the array and add or subtract a fixed integer `K` to/from that element. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and K. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output:----- For each test case, print a single line containing \\"Yes\\" if it\'s possible to make all elements of the array equal, otherwise print \\"No\\". -----Constraints----- - 1 le T le 100 - 1 le N le 1000 - 1 le A_i, K le 10^9 -----Sample Input:----- 3 4 2 2 4 6 8 3 3 1 6 9 5 2 10 14 18 22 26 -----Sample Output:----- Yes No Yes -----Explanation:----- In the first test case, you can perform the following operations: - Subtract 2 from 4 to get 2. - Subtract 2 four times from 6 to get 2. - Subtract 2 three times from 8 to get 2. All elements become equal to 2. In the second test case, it is not possible to make all the elements equal using the given operation. In the third test case, you can perform the following operations: - Subtract 2 from 14 three times to get 10. - Subtract 2 four times from 18 to get 10. - Subtract 2 six times from 22 to get 10. - Subtract 2 eight times from 26 to get 10. All elements become equal to 10.","solution":"def can_make_elements_equal(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] array = test_cases[i][1] remainders = set() for num in array: remainders.add(num % K) if len(remainders) == 1: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Alex is organizing a competition in which participants must create symmetric patterns using a 2D grid of integers. A pattern is symmetric if and only if it can be folded along its main diagonal such that each cell (i, j) is equal to cell (j, i). You are given a grid of integers and you need to determine if the pattern formed by this grid is symmetric. -----Input:----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of the grid (the grid is N times N). Each of the next N lines contains N space-separated integers describing the grid. -----Output:----- For each test case, print \\"YES\\" if the grid forms a symmetric pattern, otherwise print \\"NO\\". -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 100 - 0 leq grid cells leq 100 -----Example Input:----- 2 3 1 2 3 2 4 5 3 5 6 2 1 1 2 1 -----Example Output:----- YES NO -----Explanation:----- - In the first test case, the grid is symmetric because if we fold it along its main diagonal, all corresponding cells are equal (i.e., the cell (1, 3) is equal to (3, 1)). - In the second test case, the grid is not symmetric because cell (1, 2) is not equal to cell (2, 1).","solution":"def is_symmetric(matrix): Determines if a given N x N grid (matrix) is symmetric along its main diagonal. n = len(matrix) for i in range(n): for j in range(i): if matrix[i][j] != matrix[j][i]: return \\"NO\\" return \\"YES\\" def check_symmetric_patterns(test_cases): results = [] for case in test_cases: n, matrix = case results.append(is_symmetric(matrix)) return results"},{"question":"```python def common_elements(arr1, arr2, arr3): ``` Write a function that takes in three lists of integers ```arr1```, ```arr2```, and ```arr3``` and returns a list of integers that are common in all three lists. The returned list should be sorted in ascending order and contain no duplicates. For example: ```python common_elements([1, 5, 10], [1, 5, 10, 20], [1, 5, 30]) == [1, 5] common_elements([5, 5, 10, 20], [5, 5, 10], [10, 20, 30]) == [10] common_elements([10, 20, 30], [5, 15, 25], [50, 60]) == [] ```","solution":"def common_elements(arr1, arr2, arr3): Returns a list of integers that are common in all three input lists. The returned list is sorted in ascending order and contains no duplicates. set1 = set(arr1) set2 = set(arr2) set3 = set(arr3) common_set = set1 & set2 & set3 # intersection of the three sets return sorted(common_set)"},{"question":"Jack has an unusual sequence of integers he calls the \\"Moony Sequence,\\" which starts at an initial value and follows a peculiar pattern. For each subsequent number in the sequence, if it\'s even, you divide it by 2, and if it\'s odd, you multiply it by 3 and add 1. Given an initial value `n`, Jack wants to know how many steps it takes for the sequence to reach the number 1. If it never reaches 1 within the first 10^6 steps, return -1. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Then, t lines follow, each containing an integer n (1 le n le 10^9). -----Output----- Print t integers, the i-th integer should be the answer to the i-th test case, representing the number of steps needed for the sequence starting at the initial value n to reach 1 or -1 if it doesn\'t within 10^6 steps. -----Example----- Input 3 6 19 27 Output 8 20 111 -----Note----- For the first testcase, starting with n = 6, the sequence proceeds as follows: 6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1. It takes 8 steps to reach 1. For the second testcase, starting with n = 19, the sequence proceeds as: 19 -> 58 -> 29 -> 88 -> 44 -> 22 -> 11 -> 34 -> 17 -> 52 -> 26 -> 13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1. It takes 20 steps to reach 1. For the third testcase, starting with n = 27, the sequence takes 111 steps to reach 1.","solution":"def moony_sequence(n): Determines the number of steps required for a given integer n to reach 1 following the Moony Sequence rules. Parameters: n (int): the initial value of the sequence Returns: int: the number of steps to reach 1, or -1 if it doesn\'t reach 1 within 10^6 steps steps = 0 max_steps = 10**6 while n != 1 and steps < max_steps: if n % 2 == 0: n //= 2 else: n = n * 3 + 1 steps += 1 return steps if n == 1 else -1 def solve_moony_sequence(test_cases): Processes a list of test cases and returns the steps required for each test case to reach 1 in the Moony Sequence. Parameters: test_cases (list of int): List of initial values for the sequence Returns: list of int: Number of steps required for each test case to reach 1 or -1 if it doesn\'t reach 1 within 10^6 steps results = [] for tc in test_cases: results.append(moony_sequence(tc)) return results"},{"question":"Implement a function that takes a string as input and returns all possible valid IP addresses that can be formed by inserting dots into the string. A valid IP address consists of exactly four integers (each between 0 and 255), separated by dots, with no leading zeros. The input string will contain only digits. For example, given the string `\\"25525511135\\"`, the function should return: ```python [ \\"255.255.11.135\\", \\"255.255.111.35\\" ] ``` If no valid IP addresses can be formed, return an empty list. **Function Signature:** ```python def restore_ip_addresses(s: str) -> List[str]: pass ``` **Constraints:** - The input string `s` will have a length between 1 and 12, inclusive. - Your goal is to implement the function efficiently to handle the problem constraints. Provide the function implementation and a few additional test cases demonstrating the expected functionality.","solution":"def restore_ip_addresses(s: str): def is_valid(segment): # \'0\' should be valid, but \'00\' or any leading zero segment shouldn\'t be valid. return len(segment) == 1 or (segment[0] != \\"0\\" and int(segment) <= 255) def backtrack(start, path): if len(path) == 4 and start == len(s): valid_ips.append(\\".\\".join(path)) return if len(path) == 4 or start == len(s): return for length in range(1, 4): if start + length <= len(s): segment = s[start:start + length] if is_valid(segment): backtrack(start + length, path + [segment]) valid_ips = [] backtrack(0, []) return valid_ips"},{"question":"Write a function that takes an array of integers and returns the array sorted in non-decreasing order, but only the odd numbers should rearranged. All even numbers should remain in their original positions. Example: `[5, 3, 2, 8, 1, 4]` should return `[1, 3, 2, 8, 5, 4]`","solution":"def sort_odd_numbers(array): This function takes an array of integers and returns the array sorted in non-decreasing order, but only the odd numbers are rearranged. All even numbers remain in their original positions. :param array: List of integers :return: List of integers with odd numbers sorted # Extract odd numbers and sort them odds = sorted([x for x in array if x % 2 != 0]) # Iterator for sorted odd numbers odd_iterator = iter(odds) # Build the result by placing sorted odd numbers in their positions result = [next(odd_iterator) if x % 2 != 0 else x for x in array] return result"},{"question":"Background: One of your colleagues is managing a server that periodically records the average temperature in the data center. Due to sensor malfunction, some data points are missing. Your colleague asks for your help to reconstruct the missing data. The temperature has been recorded as a list where each element represent the temperature at a specific minute. Some elements in the list may be `None` due to sensor malfunction, indicating that the temperature at that minute is missing. Your task is to fill in the missing data points. To do this, for each `None` element in the list, take the average of its neighboring non-`None` values and replace the `None` with this computed average. If a missing data point is at the start or end of the list and has only one neighboring non-`None` value, use that value as the replacement. ___ Task: Write a function that takes a list of temperature readings with some missing values (represented by `None`). Replace each `None` with the average of its neighboring non-`None` values. If the `None` is at the start or end of the list, and has only one neighbor, replace it with that neighboring value. **Note**: The function should handle lists with multiple consecutive `None` values. Examples: ``` [23, None, 25, None, 27, None] => [23, 24.0, 25, 26.0, 27, 27] [None, 20, 21, None, 23, None] => [20, 20, 21, 22.0, 23, 23] [None, None, 22] => [22, 22, 22] ```","solution":"def fill_missing_temperatures(temperatures): Replace each None in the list with the average of its neighboring non-None values. If the None is at the start or end of the list, and has only one neighbor, replace it with that neighboring value. n = len(temperatures) if n == 0: return temperatures # Forward fill pass to handle None at the start or in the middle of the list for i in range(n): if temperatures[i] is None: if i > 0 and temperatures[i-1] is not None: previous_value = temperatures[i-1] j = i + 1 while j < n and temperatures[j] is None: j += 1 if j < n: next_value = temperatures[j] temperatures[i] = (previous_value + next_value) / 2 else: temperatures[i] = previous_value # Backward fill pass to handle None at the end of the list or remaining None in the middle for i in range(n-1, -1, -1): if temperatures[i] is None: if i < n - 1 and temperatures[i+1] is not None: next_value = temperatures[i+1] temperatures[i] = next_value return temperatures"},{"question":"Given a list of integers, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. For example, given the array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the contiguous subarray `[4, -1, 2, 1]` has the largest sum of `6`. Implement the function `maxSubArraySum(arr)` to achieve this.","solution":"def maxSubArraySum(arr): Function to find the contiguous subarray which has the largest sum. Parameters: arr (list): List of integers Returns: int: The sum of the largest contiguous subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a list of integers and a target sum. Your task is to find all unique pairs of integers in the list that add up to the target sum. For example: ``` find_pairs([1, 2, 3, 4, 5, 6], 7) = [(1, 6), (2, 5), (3, 4)] find_pairs([1, 2, 3, 4, 5, 6, 3, 4], 7) = [(1, 6), (2, 5), (3, 4)] find_pairs([3, 3, 3, 3], 6) = [(3, 3)] find_pairs([1, 2, 3], 6) = [] ``` More examples in the test cases. Each pair should be returned as a tuple, and all pairs should be returned as a list. Note that pairs (a, b) and (b, a) are considered the same and should not be repeated. The input list may contain duplicate integers. Good luck! Please also try: [Product of list excluding itself](https://www.codewars.com/kata/5a1ee4dfffe75f0fcb00013e) [Find all substrings](https://www.codewars.com/kata/5b1b27c2f60e99a46700037e)","solution":"def find_pairs(nums, target): Finds all unique pairs in the list that sum up to the target value. Args: nums: List of integers target: Integer, target sum Returns: List of tuples, each containing a pair of integers that add up to the target sum. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return list(pairs)"},{"question":"Write a function that takes in a list of integers and returns a list containing all the integers that are prime. For example: Input: [10, 15, 3, 7, 19] Output: [3, 7, 19] Note: A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is a prime number if n % 2 == 0: return False # All other even numbers are not primes for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def get_prime_numbers(numbers): Returns a list containing all prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"# Word Permutation Check You have been given two strings. Your task is to determine if one string is a permutation of the other. Task Write a function that checks if two given strings are permutations of each other considering case sensitivity. Return `True` if they are permutations, otherwise return `False`. Input The input consists of two strings which can contain spaces, upper and lower case letters but no digits or special characters. Example `arePermutations(\\"listen\\", \\"silent\\") -> True` `arePermutations(\\"Apple\\", \\"paple\\") -> False` `arePermutations(\\"Angel\\", \\"glean\\") -> True`","solution":"def arePermutations(str1, str2): Determines if str1 is a permutation of str2. Both strings are case-sensitive and can contain spaces. # If lengths are different, they cannot be permutations if len(str1) != len(str2): return False # Sort both strings and compare the results return sorted(str1) == sorted(str2)"},{"question":"You are planning a disco party and need to program a light show that will be projected onto the dance floor. Each light sequence can be represented as a grid where different characters and symbols represent different colors of lights. Instructions * Write a function that takes as parameters the number of rows and columns of the grid, and the characters that represent the lit cells and unlit cells. * The function should return a string representing a checkered grid of the specified dimensions. - Odd-numbered rows should start with a lit cell character. - Even-numbered rows should start with an unlit cell character. - Each row should alternate between lit and unlit characters. * If the dimensions given are less than 1, return an empty string. * If the lit or unlit cell characters are not valid single characters, return false. Examples: ```python checkered_grid(5, 4, \'L\', \'-\') # Returns: \'L-L- -L-L L-L- -L-L L-L-\' checkered_grid(3, 3, \'*\', \' \') # Returns: \'* * * * * \' checkered_grid(0, 5, \'@\', \'#\') # Returns: \\"\\" checkered_grid(4, 4, \'#\', \'-\') # Returns: false ```","solution":"def checkered_grid(rows, cols, lit, unlit): Returns a checkered grid representation as a string with the specified dimensions. The checkered pattern starts with lit on odd rows and unlit on even rows. # Validate inputs if rows < 1 or cols < 1: return \\"\\" if not (isinstance(lit, str) and isinstance(unlit, str) and len(lit) == 1 and len(unlit) == 1): return False grid = [] for r in range(rows): row = [] for c in range(cols): if (r + c) % 2 == 0: row.append(lit) else: row.append(unlit) grid.append(\'\'.join(row)) return \'n\'.join(grid)"},{"question":"Given a list of non-negative integers, write a function that finds the largest integer that can be formed by concatenating the list elements. For example, given the input `[3, 30, 34, 5, 9]`, the largest integer possible by concatenating the elements would be `9534330`. The function should accept a list of integers and return the largest concatenated integer as a string. The tests will cover lists of multiple lengths and values up to 10,000 elements.","solution":"from functools import cmp_to_key def largest_number(numbers): Given a list of non-negative integers, forms the largest number possible by concatenating the elements. Args: numbers (List[int]): List of non-negative integers. Returns: str: The largest number that can be formed by concatenating the elements. # Convert numbers to strings for easy concatenation and comparison str_numbers = [str(num) for num in numbers] # Custom comparator that decides the order based on which concatenation is larger def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Sort the numbers with the custom comparator str_numbers.sort(key=cmp_to_key(compare)) # Concatenate all numbers in the sorted order result = \'\'.join(str_numbers) # To handle the case where the input list is all zeros we return \'0\' instead of \'000...\' return \'0\' if result[0] == \'0\' else result"},{"question":"Create a class `Hotel` to manage hotel reservations with the following methods. Each room in the hotel is uniquely identified by its room number (an integer), and guests are uniquely identified by their name (a string). - `check_in(guest_name: str, room_number: int) -> bool`: Attempts to check in the guest to the specified room. Returns `False` if the room is already occupied, and `True` otherwise. - `check_out(guest_name: str) -> bool`: Attempts to check out the guest from their room. Returns `False` if the guest is not found, and `True` otherwise. - `get_guest_room(guest_name: str) -> int`: Returns the room number occupied by the guest. Returns `-1` if the guest is not found. - `get_room_guest(room_number: int) -> str`: Returns the name of the guest occupying the room. Returns an empty string if the room is not occupied. - `get_all_guests() -> List[str]`: Returns a list of names of all currently checked-in guests in alphabetical order. - `get_all_rooms() -> List[int]`: Returns a list of room numbers that are currently occupied in numerical order. # Example ```python hotel = Hotel() hotel.check_in(\\"Alice\\", 101) # True hotel.check_in(\\"Bob\\", 102) # True hotel.check_in(\\"Alice\\", 101) # False (room already occupied) hotel.get_guest_room(\\"Alice\\") # 101 hotel.get_guest_room(\\"Charlie\\")# -1 (guest not found) hotel.get_room_guest(101) # \\"Alice\\" hotel.get_room_guest(103) # \\"\\" (room not occupied) hotel.check_out(\\"Bob\\") # True hotel.check_out(\\"Bob\\") # False (guest not found) hotel.get_all_guests() # [\'Alice\'] hotel.get_all_rooms() # [101] ```","solution":"class Hotel: def __init__(self): # Dictionary to map room numbers to guest names self.rooms = {} # Dictionary to map guest names to room numbers self.guests = {} def check_in(self, guest_name: str, room_number: int) -> bool: if room_number in self.rooms: return False # Room is already occupied self.rooms[room_number] = guest_name self.guests[guest_name] = room_number return True def check_out(self, guest_name: str) -> bool: if guest_name not in self.guests: return False # Guest not found room_number = self.guests.pop(guest_name) del self.rooms[room_number] return True def get_guest_room(self, guest_name: str) -> int: return self.guests.get(guest_name, -1) def get_room_guest(self, room_number: int) -> str: return self.rooms.get(room_number, \\"\\") def get_all_guests(self) -> list: return sorted(self.guests.keys()) def get_all_rooms(self) -> list: return sorted(self.rooms.keys())"},{"question":"You are given an array of N integers. You need to perform Q queries on the array. Each query can be one of two types: 1. Update the value at a specific index in the array. 2. Query for the maximum subarray sum within a given range. A subarray is defined as a contiguous segment of the array. The maximum subarray sum is the largest sum of any possible subarray within the specified range. -----Input:----- - The first line of input contains two integers N and Q, denoting the size of the array and the number of queries respectively. - The second line contains N space-separated integers, representing the elements of the array. - The next Q lines contain one of the following two types of queries: - `1 x y` - Update the value at index x to y. The array is 1-indexed. - `2 l r` - Output the maximum subarray sum for the subarray that lies between indices l and r (inclusive). The array is 1-indexed. -----Output:----- For each query of type `2`, output the result on a new line. -----Constraints:----- - 1 leq N, Q leq 10^5 - -10^9 leq array elements, y leq 10^9 - 1 leq x leq N - 1 leq l leq r leq N -----Sample Input:----- 5 3 1 2 3 -2 5 2 1 3 1 3 10 2 1 5 -----Sample Output:----- 6 16 -----Explanation:----- For the first query of type `2`, the subarray from indices 1 to 3 is `[1, 2, 3]` and its sum is 1 + 2 + 3 = 6. After updating the value at index 3 to 10, the array becomes `[1, 2, 10, -2, 5]`. For the second query of type `2`, the subarray from indices 1 to 5 is `[1, 2, 10, -2, 5]` and the maximum subarray sum is 1 + 2 + 10 - 2 + 5 = 16.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data self.tree = [0] * (4 * self.n) self.build_tree(0, 0, self.n - 1) def build_tree(self, node, start, end): if start == end: self.tree[node] = ( self.data[start], # max_prefix_sum self.data[start], # max_suffix_sum self.data[start], # total_sum self.data[start] # max_subarray_sum ) else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self.build_tree(left_child, start, mid) self.build_tree(right_child, mid + 1, end) self.tree[node] = self.merge(self.tree[left_child], self.tree[right_child]) def merge(self, left, right): total_sum = left[2] + right[2] max_prefix_sum = max(left[0], left[2] + right[0]) max_suffix_sum = max(right[1], right[2] + left[1]) max_subarray_sum = max(left[3], right[3], left[1] + right[0]) return (max_prefix_sum, max_suffix_sum, total_sum, max_subarray_sum) def update(self, idx, value, node, start, end): if start == end: self.data[idx] = value self.tree[node] = ( value, # max_prefix_sum value, # max_suffix_sum value, # total_sum value # max_subarray_sum ) else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 if start <= idx <= mid: self.update(idx, value, left_child, start, mid) else: self.update(idx, value, right_child, mid + 1, end) self.tree[node] = self.merge(self.tree[left_child], self.tree[right_child]) def query(self, L, R, node, start, end): if R < start or end < L: return (float(\'-inf\'), float(\'-inf\'), 0, float(\'-inf\')) if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 left_result = self.query(L, R, left_child, start, mid) right_result = self.query(L, R, right_child, mid + 1, end) return self.merge(left_result, right_result) def process_queries(n, q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: x = query[1] - 1 y = query[2] seg_tree.update(x, y, 0, 0, n - 1) elif query[0] == 2: l = query[1] - 1 r = query[2] - 1 result = seg_tree.query(l, r, 0, 0, n - 1)[3] results.append(result) return results # Example to execute the process_queries function n = 5 q = 3 array = [1, 2, 3, -2, 5] queries = [(2, 1, 3), (1, 3, 10), (2, 1, 5)] output = process_queries(n, q, array, queries) # Expected output: [6, 16] print(output)"},{"question":"Given a balanced binary search tree, write a function to check if it is a valid balanced binary search tree (BST). A balanced BST is a binary tree in which the left and right subtrees of every node differ in height by no more than 1, while a valid BST is defined as each node follows the constraint that all left descendants are less than the node and all right descendants are greater than the node. Example 1: Input: 2 / 1 3 Output: true Explanation: The given tree is both balanced and a valid BST. Example 2: Input: 1 / 2 3 Output: false Explanation: The given tree is not a valid BST because 2 > 1 while being in its left subtree. Example 3: Input: 3 / 2 5 / / 1 4 6 Output: true Explanation: The given tree is both balanced and a valid BST. Note: - Each node\'s value is a unique integer. - Nodes have at most two children.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isBalancedBST(root): Determines if a tree is both balanced and a valid binary search tree (BST). def is_valid_bst_and_height(node, low=float(\'-inf\'), high=float(\'inf\')): if not node: return True, 0 if not (low < node.val < high): return False, 0 left_is_bst, left_height = is_valid_bst_and_height(node.left, low, node.val) right_is_bst, right_height = is_valid_bst_and_height(node.right, node.val, high) if not left_is_bst or not right_is_bst: return False, 0 if abs(left_height - right_height) > 1: return False, 0 return True, max(left_height, right_height) + 1 return is_valid_bst_and_height(root)[0]"},{"question":"Complete the function ```toCamelCase``` that takes a string and converts it into camelCase notation. The input string will contain words separated by either a hyphen (-) or an underscore (_). The function should return the string in camelCase with the first letter of the output being lowercase. Examples: ```python toCamelCase(\\"the-stealth-warrior\\") #returns \\"theStealthWarrior\\" toCamelCase(\\"The_Stealth_Warrior\\") #returns \\"theStealthWarrior\\" toCamelCase(\\"A-B-C\\") #returns \\"aBC\\" toCamelCase(\\"\\") #returns \\"\\" ```","solution":"def toCamelCase(s): Convert a string to camelCase. Parameters: s (str): The input string containing words separated by hyphens or underscores. Returns: str: The converted string in camelCase. if not s: return \\"\\" # Split the string into parts based on hyphens and underscores parts = s.replace(\'_\', \'-\').split(\'-\') # Capitalize the first letter of each part except the first one camel_case = parts[0].lower() for part in parts[1:]: camel_case += part.capitalize() return camel_case"},{"question":"Given an array of integers `nums` and an integer `k`, return the maximum sum of any continuous subarray of length `k`. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 2 Output: 9 Explanation: To get a subarray of length 2, we have these options: [1, 2], [2, 3], [3, 4], [4, 5]. The sums of these subarrays are 3, 5, 7, and 9 respectively. The maximum sum is 9, from the subarray [4, 5]. Example 2: Input: nums = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: To get a subarray of length 3, we have these options: [2, 1, 5], [1, 5, 1], [5, 1, 3], [1, 3, 2]. The sums of these subarrays are 8, 7, 9, and 6 respectively. The maximum sum is 9, from the subarray [5, 1, 3]. Example 3: Input: nums = [-1, -2, -3, -4, -5], k = 1 Output: -1 Explanation: To get a subarray of length 1, we have these options: [-1], [-2], [-3], [-4], and [-5]. The sums of these subarrays are -1, -2, -3, -4, and -5 respectively. The maximum sum is -1, from the subarray [-1]. Constraints: 1 <= nums.length <= 10^5 1 <= k <= nums.length -10^4 <= nums[i] <= 10^4","solution":"def max_sum_subarray(nums, k): Returns the maximum sum of any continuous subarray of length k. :param nums: List of integers :param k: Length of the subarray :return: Maximum sum of any continuous subarray of length k if not nums or k <= 0 or k > len(nums): return 0 max_sum = cur_sum = sum(nums[:k]) for i in range(k, len(nums)): cur_sum = cur_sum - nums[i - k] + nums[i] max_sum = max(max_sum, cur_sum) return max_sum"},{"question":"Write a function that takes a string consisting of several words separated by spaces and converts it into a list of lists, where each inner list contains the characters of each word. If the input string is empty or contains only spaces, return `\\"input must contain at least one word\\"`. Examples \\"hello world\\" ==> [ [\\"h\\", \\"e\\", \\"l\\", \\"l\\", \\"o\\"], [\\"w\\", \\"o\\", \\"r\\", \\"l\\", \\"d\\"] ] \\"coding assessment\\" ==> [ [\\"c\\", \\"o\\", \\"d\\", \\"i\\", \\"n\\", \\"g\\"], [\\"a\\", \\"s\\", \\"s\\", \\"e\\", \\"s\\", \\"s\\", \\"m\\", \\"e\\", \\"n\\", \\"t\\"] ] \\"\\" ==> \\"input must contain at least one word\\" \\" \\" ==> \\"input must contain at least one word\\"","solution":"def words_to_chars_list(s): Converts a string containing words into a list of lists with each inner list containing characters of each word. if not s.strip(): return \\"input must contain at least one word\\" words = s.split() return [list(word) for word in words]"},{"question":"David has been tasked with creating a binary string that satisfies specific criteria. Given a binary string s of length n, David has to create a new binary string t of the same length where each character is either \'0\' or \'1\'. The binary string t should satisfy the following requirement: for every index i (1 ≤ i ≤ n), the number of \'1\'s in the prefix of t up to and including index i should be greater than or equal to the number of \'1\'s in the prefix of s up to and including index i. If there are multiple valid strings t, David can pick any of them. If it\'s not possible to create such a string t, David should output \\"NO\\". Help David find a suitable binary string t or determine if it\'s impossible. -----Input----- The input consists of multiple test cases. The first line contains an integer t — the number of test cases (1 ≤ t ≤ 100). Each test case is described in two lines: - The first line contains an integer n — the length of the binary string s (1 ≤ n ≤ 100). - The second line contains the binary string s of length n. -----Output----- For each test case, print \\"NO\\" if it is impossible to create such a string t. Otherwise, print \\"YES\\" followed by the valid binary string t on a new line. -----Example----- Input 3 3 110 1 1 4 1001 Output YES 111 YES 1 YES 1101","solution":"def create_binary_strings(test_cases): results = [] for n, s in test_cases: ones_s = sum(1 for char in s if char == \'1\') if s[0] == \'0\': return [\\"NO\\"] else: results.append(\\"YES\\") results.append(\\"1\\" * n) return results def main(): import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) s = data[index + 1] test_cases.append((n, s)) index += 2 results = create_binary_strings(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Anne is organizing a party and she wants to give out chocolates to her guests. There are `M` different types of chocolates, and each type of chocolate has a different quantity available. Each guest demands a certain type and number of chocolates. Your task is to determine whether Anne can satisfy the chocolate demands of all her guests. -----Input:----- - The first line of the input contains a single integer `Q` denoting the number of queries. The description of `Q` queries follows. - The first line of each query contains a single integer `M` denoting the number of different types of chocolates. - The second line contains `M` space-separated integers `C_1, C_2, ..., C_M` where `C_i` denotes the quantity of chocolates of type `i`. - The next line contains a single integer `G` denoting the number of guests. - The following `G` lines each contain two space-separated integers `T_i` and `D_i` where `T_i` is the type of chocolate the `i-th` guest demands and `D_i` is the number of chocolates of that type the guest demands. -----Output:----- For each query, print \\"YES\\" if Anne can satisfy all the guests, otherwise print \\"NO\\". -----Constraints----- - `1 <= Q <= 10` - `1 <= M <= 1000` - `0 <= C_i <= 1000` - `1 <= G <= 1000` - `1 <= T_i <= M` - `1 <= D_i <= 1000` -----Sample Input:----- 2 3 5 10 3 2 1 3 3 2 2 2 5 1 1 10 -----Sample Output:----- YES NO","solution":"def can_satisfy_all_guests(queries): results = [] for query in queries: M = query[\'M\'] chocolate_quantities = query[\'chocolate_quantities\'] guests = query[\'guests\'] for guest in guests: T_i, D_i = guest[\'type\'], guest[\'quantity\'] if chocolate_quantities[T_i - 1] >= D_i: chocolate_quantities[T_i - 1] -= D_i else: results.append(\\"NO\\") break else: results.append(\\"YES\\") return results def process_input(input_data): lines = input_data.strip().split(\'n\') index = 0 Q = int(lines[index]) index += 1 queries = [] for _ in range(Q): M = int(lines[index]) index += 1 chocolate_quantities = list(map(int, lines[index].split())) index += 1 G = int(lines[index]) index += 1 guests = [] for _ in range(G): T_i, D_i = map(int, lines[index].split()) guests.append({\'type\': T_i, \'quantity\': D_i}) index += 1 queries.append({ \'M\': M, \'chocolate_quantities\': chocolate_quantities, \'guests\': guests }) return queries # Example usage: input_data = 2 3 5 10 3 2 1 3 3 2 2 2 5 1 1 10 queries = process_input(input_data) result = can_satisfy_all_guests(queries) for res in result: print(res)"},{"question":"Given a binary tree, return the sum of the values of nodes with an even-valued grandparent. A grandparent of a node is the parent of its parent, if it exists. If there are no nodes with an even-valued grandparent, return 0. Example 1: Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] Output: 18 Explanation: The (even-valued) grandparents are 6 and 8. Nodes with even-valued grandparent are 2, 7, 1, 4, and 5. Example 2: Input: root = [1] Output: 0 Note: - The number of nodes in the tree is at most 10^4. - The value of each node is between 1 and 100.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def sumEvenGrandparent(root): def dfs(node, parent, grandparent): if not node: return 0 sum_ = 0 if grandparent % 2 == 0: sum_ += node.val sum_ += dfs(node.left, node.val, parent) sum_ += dfs(node.right, node.val, parent) return sum_ return dfs(root, -1, -1)"},{"question":"=====Problem Statement===== You are given a sequence of integers. Your task is to determine the length of the longest subsequence that consists of integers which are all consecutive. The consecutive numbers can be in any order. For example, in the sequence [2, 6, 1, 9, 4, 5, 3], the longest consecutive subsequence should be [1, 2, 3, 4, 5, 6], which has a length of 6. =====Input Format===== The first line contains an integer, T, denoting the number of test cases. The first line of each test case contains an integer, N, denoting the number of elements in the sequence. The second line of each test case contains N space-separated integers representing the elements of the sequence. =====Constraints===== 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 -10^4 ≤ Element of sequence ≤ 10^4 =====Output Format===== For each test case, print a single line denoting the length of the longest subsequence of consecutive integers for that test case.","solution":"def find_longest_conseq_subseq(arr): Finds the length of the longest subsequence of consecutive integers in the given array. Args: arr (List[int]): List of integers. Returns: int: Length of the longest subsequence of consecutive integers. if not arr: return 0 unique_elements = set(arr) longest_length = 0 for element in unique_elements: if element - 1 not in unique_elements: current_length = 1 current_element = element while current_element + 1 in unique_elements: current_element += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length def process_test_cases(T, test_cases): Processes multiple test cases and returns the results. Args: T (int): Number of test cases. test_cases (List[Tuple[int, List[int]]]): List of test cases where each test case is a tuple. The first element is an integer N, the number of elements in the sequence. The second element is a list of N integers. Returns: List[int]: List of results for each test case. results = [] for i in range(T): N, arr = test_cases[i] results.append(find_longest_conseq_subseq(arr)) return results"},{"question":"Task Given an array of integers, write a function that finds the longest contiguous subarray such that all elements in the subarray can be rearranged to form a consecutive sequence of numbers. The function should return the length of such subarray. The consecutive sequence means for any subarray, the difference between the maximum and minimum number in the subarray plus one should be equal to the number of elements in the subarray. Examples ```python array = [1, 3, 5, 2, 4, 3, 2, 1] # return 5, because subarray [3, 5, 2, 4, 3] can be rearranged to [2, 3, 4, 3, 5] array = [10, 12, 11] # return 3, because subarray [10, 12, 11] can be rearranged to [10, 11, 12] array = [4, 4, 4, 4] # return 1, because all elements are the same, so only subarrays of length 1 are consecutive ``` **Notes:** + The input array contains at least one integer and its length does not exceed (10^5). + Elements in the array can be positive or negative integers. + The function should have an efficient time complexity, preferably (O(n)).","solution":"def longest_consecutive_subarray_length(arr): Finds the length of the longest subarray such that the elements can be rearranged to form a consecutive sequence. :param arr: List of integers :return: Length of the longest such subarray n = len(arr) max_len = 1 for i in range(n): min_val = max_val = arr[i] for j in range(i+1, n): min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) # Check if the current subarray can be rearranged to form a consecutive sequence if max_val - min_val == j - i and len(set(arr[i:j+1])) == (j - i + 1): max_len = max(max_len, j - i + 1) return max_len"},{"question":"Determine if a string is a valid palindrome, ignoring case differences and disregarding all non-alphanumeric characters. Write a function `isPalindrome` that takes a single argument, a string `s`, and returns a boolean value `True` if it is a palindrome and `False` otherwise. # Constraints - The input string `s` will be between 1 and 1000 characters in length. - Only alphanumeric characters and spaces are considered valid for checking palindromes. All other characters should be ignored. # Example - isPalindrome(\\"A man, a plan, a canal: Panama\\") should return `True`. - isPalindrome(\\"race a car\\") should return `False`.","solution":"def isPalindrome(s: str) -> bool: Returns True if the input string \'s\' is a palindrome, ignoring case differences and disregarding all non-alphanumeric characters. Otherwise, returns False. # Filter out non-alphanumeric characters and convert to lowercase filtered_string = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_string == filtered_string[::-1]"},{"question":"Given two integers n and k, return the length of the shortest subarray from a sequence array of n elements (all set to 1 by default) such that the sum of the subarray is at least k. If no such subarray exists, return -1. Example 1: Input: n = 5, k = 3 Output: 3 Explanation: The shortest subarray with a sum of at least 3 is [1, 1, 1]. Example 2: Input: n = 10, k = 15 Output: -1 Explanation: Even though the array has 10 elements, the maximum sum is 10, which is less than 15. Hence, there is no such subarray. Example 3: Input: n = 7, k = 4 Output: 4 Explanation: The shortest subarray with a sum of at least 4 is [1, 1, 1, 1]. Constraints: 1 <= n <= 10^6 1 <= k <= 10^9","solution":"def shortest_subarray_length(n, k): Given two integers n and k, return the length of the shortest subarray from a sequence array of n elements (all set to 1 by default) such that the sum of the subarray is at least k. If no such subarray exists, return -1. if k > n: return -1 return k"},{"question":"An online bookstore keeps track of their inventory and sales using a specialized inventory management system. Each book is represented by a unique International Standard Book Number (ISBN), and its availability is represented by a positive integer indicating the number of copies in stock. The bookstore wants to run a promotion and provide a discount on the most available books to boost their sales. Your task is to help the bookstore identify the `K` most available books in terms of their stock quantity. If two or more books have the same stock quantity, the book with the smaller ISBN is given priority. -----Input----- Input begins with an integer `T`, the number of test cases. Each test case starts with two integers `N` and `K`. `N` represents the number of books in the store and `K` represents the number of books to be listed for the promotion. The next `N` lines each contain an ISBN (a string of digits without spaces) followed by an integer representing the stock quantity of that book. -----Output----- For each test case, output exactly `K` lines. Each line should contain an ISBN and the corresponding stock quantity, representing one of the `K` books with the highest stock, sorted first by stock (in descending order) and then by ISBN (in ascending order for ties). -----Sample Input----- 2 5 3 9780321150793 7 9780131103627 4 9780201633610 12 9780131101630 8 9780201485677 10 4 2 9781491950357 14 9781449325862 5 9780132350884 14 9780137081073 7 -----Sample Output----- 9780201633610 12 9780201485677 10 9780131101630 8 9780132350884 14 9781491950357 14 -----Constraints----- 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ K ≤ N Each ISBN is a 13-digit string composed only of digits \'0\' to \'9\' All stock quantities are between 1 and 10,000, inclusive","solution":"def get_top_k_books(test_cases): results = [] for case in test_cases: N, K, books = case sorted_books = sorted(books, key=lambda x: (-x[1], x[0])) results.extend(sorted_books[:K]) results.append(None) # Marker for end of test case return results def parse_input(input_data): lines = input_data.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N, K = map(int, lines[index].split()) index += 1 books = [] for _ in range(N): isbn, quantity = lines[index].split() quantity = int(quantity) books.append((isbn, quantity)) index += 1 test_cases.append((N, K, books)) return test_cases def format_output(results): output = [] for result in results: if result is None: output.append(\\"\\") else: output.append(f\\"{result[0]} {result[1]}\\") return \\"n\\".join(output).strip() # Main function to handle the complete operation def process_bookstore_promotions(input_data): test_cases = parse_input(input_data) results = get_top_k_books(test_cases) return format_output(results)"},{"question":"Develop a function `minimum_total_cost(n, costs)` that calculates the minimum total cost to buy `n` items where each item has a different price and the prices of items are specified in a list `costs`. You are given a list `costs` of positive integers where `costs[i]` represents the cost of item `i`. You can buy the items in any order, but you must buy exactly `n` items. Your function should find the minimum possible total cost to buy exactly `n` items. # Input - `n`: An integer (1 ≤ `n` ≤ `len(costs)`) representing the number of items to buy. - `costs`: A list of integers (each integer is ≥ 1 and ≤ 10^4) representing the cost of each item. # Output - An integer representing the minimum total cost to buy exactly `n` items. # Example ```python # Example 1 n = 3 costs = [1, 3, 5, 7, 9] # The minimum total cost to buy 3 items is 1 + 3 + 5 = 9 print(minimum_total_cost(n, costs)) # Output: 9 # Example 2 n = 2 costs = [10, 2, 8, 6, 4] # The minimum total cost to buy 2 items is 2 + 4 = 6 print(minimum_total_cost(n, costs)) # Output: 6 # Example 3 n = 1 costs = [5, 5, 5, 5] # The minimum total cost to buy 1 item is 5 print(minimum_total_cost(n, costs)) # Output: 5 ``` # Constraints - You cannot purchase more or less than exactly `n` items. - Consider efficiency in terms of time and space complexity. Aim for a solution that works in `O(n log n)` time. # Notes - Sorting the list `costs` and picking the first `n` elements from the sorted list is a good strategy. This can be achieved in `O(n log n)` time. - Edge cases include the smallest and the largest possible values for `n` and `costs`. Be sure to test the function with a variety of inputs to ensure correctness.","solution":"def minimum_total_cost(n, costs): Returns the minimum total cost to buy exactly n items from the given list of costs. Args: n: The number of items to buy. costs: List of integers representing the cost of each item. Returns: The minimum total cost to buy exactly n items. # Sort the list of costs in ascending order sorted_costs = sorted(costs) # Sum the first n elements of the sorted list return sum(sorted_costs[:n])"},{"question":"Write a function that takes a list of integers and returns the list sorted in ascending order based on the sum of their digits. If two numbers have the same sum of digits, they should be ordered by their original value. Preserve spacing before/after characters if present. Examples ``` [34, 23, 12, 45] => [12, 23, 34, 45] [131, 222, 13, 45] => [13, 131, 222, 45] ```","solution":"def sum_of_digits(n): Returns the sum of digits of the number n. return sum(int(digit) for digit in str(n)) def sort_by_digit_sum(lst): Sorts the list of integers based on the sum of their digits. If two numbers have the same sum of digits, they are ordered by their original value. return sorted(lst, key=lambda x: (sum_of_digits(x), x))"},{"question":"Sam loves climbing stairs. However, Sam has a unique way of climbing. He can either take one step forward or jump two steps forward at a time. Given `N` stairs, can you find out the total number of unique ways Sam can reach the top? -----Input----- The first line contains an integer `T` which denotes the number of test cases. Each of the next `T` lines contains an integer `N` which denotes the number of stairs. -----Output----- For each test case, print a single integer, the number of unique ways Sam can reach the top of `N` stairs. -----Constraints----- - 1 ≤ T ≤ 10^5 - 1 ≤ N ≤ 10^4 -----Example----- Input: 3 2 3 4 Output: 2 3 5 Explanation: Case 1: For 2 stairs, the ways are (1 step + 1 step), (2 steps). Case 2: For 3 stairs, the ways are (1 step + 1 step + 1 step), (1 step + 2 steps), (2 steps + 1 step). Case 3: For 4 stairs, the ways are (1 step + 1 step + 1 step + 1 step), (1 step + 1 step + 2 steps), (1 step + 2 steps + 1 step), (2 steps + 1 step + 1 step), (2 steps + 2 steps).","solution":"def count_ways_to_climb(N): Returns the number of ways to climb N stairs where Sam can take 1 or 2 steps at a time. This problem is a classic dynamic programming problem and can be solved by recognizing the problem can be broken into sub-problems. if N == 0: return 0 # DP array to store the number of ways to reach each stair dp = [0] * (N + 1) # Base cases dp[0] = 1 # 1 way to stay on the ground dp[1] = 1 # 1 way to climb to the first step # Fill the DP array for i in range(2, N + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[N] def process_test_cases(T, cases): results = [] for N in cases: results.append(count_ways_to_climb(N)) return results"},{"question":"Create a function that accepts an array of non-negative integers and returns a new array containing only the elements that are unique in the original array. The order of elements in the returned array should follow their first appearance in the original array. Your function should have a linear time complexity. Example: Input: [1, 2, 2, 3, 4, 4, 5] Output: [1, 3, 5] Input: [10, 20, 20, 30, 40, 50, 50] Output: [10, 30, 40]","solution":"def unique_elements(arr): Returns an array containing the elements that are unique in the original array. The order of elements in the returned array will follow their first appearance in the original array. :param arr: List of non-negative integers :return: List of integers which are unique in the input list element_count = {} for num in arr: element_count[num] = element_count.get(num, 0) + 1 unique_elements_list = [num for num in arr if element_count[num] == 1] return unique_elements_list"},{"question":"You are given an array of non-negative integers representing the heights of towers at each point. You need to find the amount of water that can be trapped between the towers after raining. Write a function that takes an array of integers as input and returns the total amount of trapped water. For example, given the array [0,1,0,2,1,0,1,3,2,1,2,1], the function should return 6, since 6 units of water can be trapped between the towers. Example function signature: ```python def trap_water(height: List[int]) -> int: pass ```","solution":"def trap_water(height): Calculate the total amount of trapped water given the heights of towers. Args: height (List[int]): An array of non-negative integers representing tower heights. Returns: int: Total amount of trapped water. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n trapped_water = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate trapped water for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"Functional Composition Functional composition is a powerful technique in functional programming where multiple functions are combined such that the output of one function becomes the input of the next function. The concept can be mathematically represented as follows: If we have two functions `f: B → C` and `g: A → B`, then the composition of these functions is a function `h: A → C` such that `h(x) = f(g(x))`. # Task Create a `compose()` function that takes two or more functions as arguments and returns a new function that is a composition of the given functions. The composed function should work as follows: - If you compose functions `f` and `g`, then `compose(f, g)(x)` should be equivalent to `f(g(x))`. - If you compose functions `f`, `g`, and `h`, then `compose(f, g, h)(x)` should be equivalent to `f(g(h(x)))`. Your `compose()` function should be versatile enough to handle any number of functions passed as arguments. # Example ```python def add_one(x): return x + 1 def multiply_by_two(x): return x * 2 def square(x): return x * x composed_function = compose(add_one, multiply_by_two, square) result = composed_function(2) # This should be equivalent to add_one(multiply_by_two(square(2))) print(result) # Output should be 9 ``` # Requirements 1. Implement the `compose()` function that takes a variable number of functions and returns a new function that is the composition of those functions. 2. Ensure the composed function works for multiple functions and handles edge cases appropriately (e.g., no functions provided). # Additional Examples ```python def subtract_five(x): return x - 5 def divide_by_three(x): return x / 3 composed_function = compose(divide_by_three, subtract_five) result = composed_function(14) # This should be equivalent to divide_by_three(subtract_five(14)) print(result) # Output should be 3.0 ```","solution":"from functools import reduce def compose(*funcs): Compose multiple functions such that the output of one function becomes the input of the next. Args: *funcs: A variable number of functions to compose. Returns: A new function that is the composition of the input functions. # Reverse the order of functions since we want to apply from last to first funcs = funcs[::-1] def composed_function(x): return reduce(lambda v, f: f(v), funcs, x) return composed_function # Example usage def add_one(x): return x + 1 def multiply_by_two(x): return x * 2 def square(x): return x * x composed_function = compose(add_one, multiply_by_two, square) result = composed_function(2) # This should be equivalent to add_one(multiply_by_two(square(2))) print(result) # Output should be 9"},{"question":"Given a string `s` and a list of words `words`, determine if `s` can be segmented into a space-separated sequence of one or more dictionary words from `words`. Return True if possible, otherwise return False. Example: ``` s = \\"leetcode\\" words = [\\"leet\\", \\"code\\"] Output: True Explanation: s can be segmented as \\"leet code\\". s = \\"applepenapple\\" words = [\\"apple\\", \\"pen\\"] Output: True Explanation: s can be segmented as \\"apple pen apple\\". s = \\"catsandog\\" words = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: False Explanation: s cannot be segmented as \\"cats and og\\". ``` The function should have the following signature: ```python def canSegmentString(s: str, words: List[str]) -> bool: pass ```","solution":"from typing import List def canSegmentString(s: str, words: List[str]) -> bool: word_set = set(words) dp = [False] * (len(s) + 1) dp[0] = True # Empty string can always be segmented for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"Rajan loves collecting integers. He has a collection of integers in an array *A* of size *N*. Rajan wants to find out if there exists a non-empty subset of integers from this array such that the sum of integers in that subset is divisible by *K*. Write a program to help Rajan determine this. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and K, where N is the number of integers in the array and K is the divisor. - The second line of each test case contains N space-separated integers representing the array *A*. -----Output----- For each test case, print a single line containing the string \\"YES\\" if there exists a non-empty subset of integers whose sum is divisible by *K*, or \\"NO\\" otherwise (without quotes). -----Constraints----- - 1 le T le 100 - 1 le N le 100 - 1 le K le 10^4 - -10^4 le A[i] le 10^4 -----Example Input----- 2 5 5 1 2 3 4 5 3 3 1 1 1 -----Example Output----- YES YES -----Explanation----- Example case 1: One possible subset is {5} which is divisible by 5. Example case 2: One possible subset is {1, 1, 1} which has a sum of 3 and is divisible by 3.","solution":"def is_subset_sum_divisible_by_k(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] A = test_cases[i][1] # Initialize the possible remainders set possible_remainders = {0} for num in A: current_remainders = list(possible_remainders) for rem in current_remainders: new_remainder = (rem + num) % K if new_remainder == 0: results.append(\\"YES\\") break possible_remainders.add(new_remainder) else: continue break else: results.append(\\"NO\\") return results # Wrapping function for the main logic to easily handle input/output for the tests def main_logic(input_lines): T = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(T): N, K = map(int, input_lines[line_index].split()) A = list(map(int, input_lines[line_index + 1].split())) test_cases.append(((N, K), A)) line_index += 2 return is_subset_sum_divisible_by_k(T, test_cases)"},{"question":"Implement a function that determines if a password is valid based on a given set of rules. The function should take a single parameter: `password`. The password must adhere to the following criteria to be considered valid: - It must be at least 8 characters long. - It must contain at least one uppercase letter. - It must contain at least one lowercase letter. - It must contain at least one numeric digit. - It must contain at least one special character from the set: `!@#%^&*()_+` Return `True` if the password meets all the criteria, otherwise return `False`. Examples: - `is_valid_password(\\"Password123!\\")` should return `True` - `is_valid_password(\\"password\\")` should return `False` - `is_valid_password(\\"Password\\")` should return `False` - `is_valid_password(\\"P@ssw0rd\\")` should return `True`","solution":"import re def is_valid_password(password): Determines if a password is valid based on the following criteria: - It must be at least 8 characters long. - It must contain at least one uppercase letter. - It must contain at least one lowercase letter. - It must contain at least one numeric digit. - It must contain at least one special character from the set: !@#%^&*()_+ Returns True if the password meets all the criteria, otherwise returns False. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*()_+]\', password): return False return True"},{"question":"Peter is involved in a research project where he needs to analyze the data generated from a complex simulation. The data consists of a sequence of integers. One of the tasks in the analysis requires finding the maximum sum of any contiguous subarray of a given sequence. However, since the data sequences can be very large, he needs an efficient way to compute this. Write a program to help Peter find the maximum sum of any contiguous subarray in the given sequence. -----Input:----- - First-line will consist of a single integer N, the length of the sequence. - The second line contains N space-separated integers, representing the sequence. -----Output:----- - A single integer representing the maximum sum of any contiguous subarray of the given sequence. -----Constraints----- - 1 leq N leq 10^6 - -10^9 leq text{each element of the sequence} leq 10^9 -----Sample Input:----- 8 -2 1 -3 4 -1 2 1 -5 4 -----Sample Output:----- 6","solution":"def max_subarray_sum(sequence): Returns the maximum sum of any contiguous subarray in the given sequence. Uses Kadane\'s algorithm to find the maximum sum efficiently. Parameters: sequence (list of int): The sequence of integers. Returns: int: The maximum sum of any contiguous subarray. if not sequence: return 0 max_ending_here = max_so_far = sequence[0] for x in sequence[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Given a non-negative integer, your task is to determine the number of unique ways to climb a staircase where each step is either 1 or 2 stairs at a time. You need to implement a function `unique_ways(n: int) -> int` that computes the number of unique ways to reach the top of a staircase with `n` steps. For instance: ```python unique_ways(1) = 1 # [1] unique_ways(2) = 2 # [1+1, 2] unique_ways(3) = 3 # [1+1+1, 1+2, 2+1] unique_ways(4) = 5 # [1+1+1+1, 1+1+2, 1+2+1, 2+1+1, 2+2] ``` Your solution should be efficient, operating in O(n) time complexity, and make sure to handle inputs up to 45 efficiently. More examples for your test cases: ```python unique_ways(0) = 1 unique_ways(5) = 8 unique_ways(10) = 89 ```","solution":"def unique_ways(n: int) -> int: Returns the number of unique ways to climb a staircase with `n` steps, where each step is either 1 or 2 stairs at a time. if n <= 1: return 1 a, b = 1, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function that takes a string of brackets (consisting only of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\') and determines if the brackets are balanced. A string is balanced if every opening bracket has a corresponding closing bracket of the same type and the brackets are properly nested. Return \\"Balanced\\" if the string is balanced, else return \\"Not Balanced\\". Input A string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The length of the string ranges from 1 to 10^6. Example is_balanced(\\"()[]{}\\") # should return Balanced is_balanced(\\"([{}])\\") # should return Balanced is_balanced(\\"([)]\\") # should return Not Balanced is_balanced(\\"(\\") # should return Not Balanced","solution":"def is_balanced(s): stack = [] bracket_map = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} for char in s: if char in bracket_map: # if it\'s an opening bracket stack.append(char) elif stack and char == bracket_map.get(stack[-1]): # if it\'s a closing bracket and matches the last opening bracket stack.pop() else: return \\"Not Balanced\\" return \\"Balanced\\" if not stack else \\"Not Balanced\\""},{"question":"# Task Given a list of integers, determine whether the list contains a subsequence of at least three increasing numbers. # Example For `nums = [1, 2, 3, 4, 5]`, the output should be `true`. For `nums = [5, 4, 3, 2, 1]`, the output should be `false`. # Input/Output - `[input]` list `nums` A list of integers. Constraints: `1 ≤ nums.length ≤ 1000.` `-10^6 ≤ nums[i] ≤ 10^6`. - `[output]` a boolean value `true` if there is an increasing subsequence of at least three numbers, `false` otherwise.","solution":"def increasing_triplet(nums): Determines if there exists a subsequence of at least three increasing numbers. :param nums: List of integers :return: Boolean value first = second = float(\'inf\') for num in nums: if num <= first: first = num elif num <= second: second = num else: return True return False"},{"question":"Story: In a faraway kingdom, the royal palace has a unique floor made of N x N tiles. Each tile has a certain color associated with it. A wise old sage has discovered that the kingdom\'s prosperity is directly related to a specific pattern on the floor when viewed diagonally. To bless the kingdom with prosperity, the pattern needs to be found and repaired if broken. This pattern can be detected from the top-left to the bottom-right of the floor. Briefing: You are given a 2D matrix of size N x N where each element represents a tile color in the kingdom\'s palace. Your task is to find the longest contiguous diagonal pattern (from the top-left to bottom-right of the matrix) that contains only one color. Return the maximum length of such a pattern. Example: ``` Consider the following 5x5 matrix: [ [1, 2, 3, 4, 5], [6, 1, 7, 8, 9], [10, 11, 1, 12, 13], [14, 15, 16, 1, 17], [18, 19, 20, 21, 1] ] The longest contiguous diagonal pattern of single color (in this case, \'1\') has length 5. ``` Therefore, the function should return 5. Test specs: Random cases will input up to 1000 x 1000 matrix with color values ranging from 1 to 100. Special thanks: Thanks to the citizens of the kingdom for their cooperation in maintaining the palace tiles. And to the wise sage for the discovery that connects us to prosperity.","solution":"def longest_diagonal_pattern(matrix): Returns the length of the longest contiguous diagonal pattern of a single color in an N x N matrix. if not matrix or not matrix[0]: return 0 n = len(matrix) max_length = 1 for i in range(n): length = 1 current_color = matrix[i][i] for k in range(1, n - i): if matrix[i + k][i + k] == current_color: length += 1 max_length = max(max_length, length) else: current_color = matrix[i + k][i + k] length = 1 return max_length"},{"question":"Consider an array of integers `[3, 6, 9, 12]`. The goal is to partition this array into two non-empty subsets such that the absolute difference between the sums of the two subsets is minimized. Write a function that returns the minimum possible absolute difference between the sums of these subsets. For example: ```Haskell minDifference([3, 6, 9, 12]) = 0 ``` Explanation: Possible partitions include `[3, 6, 9]` and `[12]` with sums `18` and `12` respectively, yielding a difference of `6`. However, partitioning into `[9, 12]` and `[3, 6]` gives sums `21` and `9` respectively, yielding a difference of `12`. The minimum difference possible in this case is `0`. More examples in the test cases. Good luck! If you like this problem, you might also enjoy: [Partition Equal Subset Sum](https://leetcode.com/problems/partition-equal-subset-sum/)","solution":"from itertools import combinations def minDifference(arr): Returns the minimum possible absolute difference between the sums of two non-empty subsets of the array. total_sum = sum(arr) n = len(arr) min_diff = float(\'inf\') # We are looking for all possible subsets for i in range(1, n): for subset in combinations(arr, i): current_sum = sum(subset) diff = abs((total_sum - current_sum) - current_sum) if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given two strings, `s1` and `s2`. Determine the minimum number of operations required to make `s1` an anagram of `s2`. You can perform the following operations on `s1`: 1. Insert a character 2. Remove a character 3. Replace a character An anagram of a string is a string that contains the same characters, only the order of characters can be different. For example, \\"aba\\" can be rearranged to form \\"baa\\". Write a function `minOperationsToAnagram(s1: str, s2: str) -> int` to find the minimum number of operations. **Constraints:** - The length of both `s1` and `s2` will be between 1 and 1000. - `s1` and `s2` consist of lowercase English letters. **Example:** Input: s1 = \\"abc\\", s2 = \\"bca\\" Output: 2 Explanation: One possible way is to replace \'a\' with \'b\' and \'c\' with \'a\' to get \\"bca\\" which is an anagram of \\"abc\\". Input: s1 = \\"abb\\", s2 = \\"bbc\\" Output: 2 Explanation: Replace \'a\' with \'b\' and \'b\' with \'c\' to get \\"bbc\\" which is an anagram of \\"abb\\".","solution":"from collections import Counter def minOperationsToAnagram(s1: str, s2: str) -> int: Calculate the minimum number of operations to make s1 an anagram of s2. The operations can be insertions, deletions, or replacements. count1 = Counter(s1) count2 = Counter(s2) # Calculate extra characters in s1 that are not needed and # missing characters that are needed from s2 extra_in_s1 = count1 - count2 missing_in_s2 = count2 - count1 # Calculate the number of operations needed operations = sum(extra_in_s1.values()) + sum(missing_in_s2.values()) return operations"},{"question":"In the kingdom of AlgoLandia, there is an ancient treasure hidden in a series of underground chambers connected by tunnels. There are `N` chambers numbered from `1` to `N` and `M` tunnels connecting these chambers. Each tunnel `i` connects chamber `u[i]` to chamber `v[i]`. The king wants to ensure that the treasure is safely guarded. He decides to place elite guards in some of the chambers so that all tunnels are monitored. A tunnel is considered monitored if there is an elite guard in at least one of the chambers it connects. Your task is to determine the minimum number of elite guards needed to monitor all the tunnels. # Note: You are given two lists `u` and `v` each of length `M`. Each element in `u` and `v` represents the chambers connected by a tunnel. # Sample Input 1 ``` N = 5 M = 6 u = [1, 2, 1, 3, 4, 4] v = [2, 3, 3, 4, 5, 3] ``` # Sample Output 1 ``` 2 ``` # Sample Input 2 ``` N = 4 M = 3 u = [1, 2, 3] v = [2, 3, 4] ``` # Sample Output 2 ``` 2 ```","solution":"def min_elite_guards(N, M, u, v): Returns the minimum number of elite guards needed to monitor all the tunnels in AlgoLandia. from collections import defaultdict import itertools adjacency_list = defaultdict(set) for i in range(M): adjacency_list[u[i]].add(v[i]) adjacency_list[v[i]].add(u[i]) # Note: This converts to a vertex cover problem for the undirected graph def vertex_cover(adj_list): vc = [False] * (N + 1) degree = [0] * (N + 1) for key in adj_list: degree[key] = len(adj_list[key]) result = 0 for node in range(1, N + 1): if degree[node] > 0 and not vc[node]: for neighbor in adj_list[node]: if not vc[neighbor]: vc[node] = True vc[neighbor] = True result += 1 break return result return vertex_cover(adjacency_list)"},{"question":"Given a list of integers, find the contiguous subarray (containing at least one number) which has the largest product, and return the product. Example 1: Input: [2,3,-2,4] Output: 6 Explanation: The contiguous subarray [2,3] has the largest product 6. Example 2: Input: [-2,0,-1] Output: 0 Explanation: The result cannot be 2, because [-2,-1] is not a contiguous subarray. Note: 1 <= nums.length <= 200 -10 <= nums[i] <= 10","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray. if not nums: return 0 # Initialize the variables current_max = nums[0] current_min = nums[0] global_max = nums[0] # Traverse through the array, updating the variables for i in range(1, len(nums)): temp_max = max(nums[i], current_max * nums[i], current_min * nums[i]) current_min = min(nums[i], current_max * nums[i], current_min * nums[i]) current_max = temp_max global_max = max(global_max, current_max) return global_max"},{"question":"You are given a list of integers and a target integer. Your task is to determine if there are two distinct numbers in the list that add up to the target integer. If such a pair exists, return a list containing the two numbers in ascending order. If such a pair does not exist, return an empty list. # Constraints: - The list will have at least two integers and no more than 1000 integers. - Each integer in the list will be between -1000 and 1000, inclusive. - There will not be more than one pair of numbers that add up to the target. # Example: ```python find_pair([1, 2, 3, 9], 10) == [1, 9] find_pair([1, 2, 4, 4], 8) == [4, 4] find_pair([1, 2, 3, 4], 8) == [] ``` # Function Signature: ```python def find_pair(nums: List[int], target: int) -> List[int]: pass ``` To solve this problem, implement the `find_pair` function that takes a list of integers and a target integer as inputs and returns a list of the two integers if a pair exists that adds up to the target, otherwise returns an empty list.","solution":"from typing import List def find_pair(nums: List[int], target: int) -> List[int]: Returns a list containing two distinct numbers that add up to the target, in ascending order. If no such pair is found, returns an empty list. # Dictionary to store the number and its index num_dict = {} for num in nums: complement = target - num if complement in num_dict: return sorted([num, complement]) num_dict[num] = True return []"},{"question":"Given a number m, you need to reduce it to exactly 1 by performing the minimum number of steps permitted. The allowed steps are: - Subtract 1 from the current number. - Divide the current number by 2 if the number is even. - Divide the current number by 3 if the number is divisible by 3. Output the minimum number of steps to reduce the number m to 1. Example 1: Input: 10 Output: 3 Explanation: In step 1, we divide 10 by 2 to get 5. In step 2, we subtract 1 from 5 to get 4. In step 3, we divide 4 by 2 to get 2. In step 4, we divide 2 by 2 to get 1. Example 2: Input: 15 Output: 4 Explanation: In step 1, we divide 15 by 3 to get 5. In step 2, we subtract 1 from 5 to get 4. In step 3, we divide 4 by 2 to get 2. In step 4, we divide 2 by 2 to get 1. Note: The number m will be in the range [1, 1000].","solution":"def min_steps_to_one(m): Returns the minimum number of steps to reduce the number m to 1. # Dynamic Programming table to store minimum steps for each value from 1 to m dp = [0] * (m + 1) # Initialize base condition dp[1] = 0 # 0 steps required to reduce 1 to 1 # Fill the table for i in range(2, m + 1): # Start with the step subtract 1 from the current number dp[i] = dp[i - 1] + 1 # If divisible by 2, then consider min steps when divided by 2 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) # If divisible by 3, then consider min steps when divided by 3 if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[m]"},{"question":"# Letter Distribution Checker Charlie is working on a project that involves analyzing text. One of the tasks requires checking if all the letters of the alphabet are present in a given string. Charlie asks you to write a program that will help him with this task. Your task is to create a function that takes a string as input and returns `True` if the string contains every letter of the English alphabet at least once, regardless of case, and `False` otherwise. # Task Given a string, check if it contains every letter of the English alphabet at least once. The function should be case-insensitive and ignore all non-alphabetic characters. # Examples ```python contains_all_letters(\\"The quick brown fox jumps over the lazy dog.\\") = True contains_all_letters(\\"Hello, World!\\") = False contains_all_letters(\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\") = True contains_all_letters(\\"abcdefghijklmnopqrstuvwxyz\\") = True contains_all_letters(\\"A quick movement of the enemy will jeopardize six gunboats\\") = True contains_all_letters(\\"1234567890 -=!@#%^&*()_+[]{}|;\':,.<>/?\\") = False ```","solution":"import string def contains_all_letters(s): Checks if a given string contains every letter of the English alphabet at least once. Args: s (str): The input string. Returns: bool: True if the string contains every letter of the English alphabet, False otherwise. alphabet = set(string.ascii_lowercase) return alphabet.issubset(set(s.lower()))"},{"question":"Given an m x n matrix, write a function to find all the cells that have the value 0, and return all the cells\' row and column indices. For example, for a matrix input: ``` matrix = [ [1, 0, 2], [0, 3, 0], [4, 5, 6] ] ``` Your function should return: ``` [ [0, 1], [1, 0], [1, 2] ] ``` The output is a list of pairs, where each pair represents the row and column indices of each cell containing 0 in the matrix. Function Signature: ``` def find_zero_positions(matrix: List[List[int]]) -> List[List[int]]: ``` # Input - An m x n matrix where 1 ≤ m, n ≤ 100. - Each value in the matrix is an integer between -10^4 and 10^4. # Output - A list of pairs of integers. Each pair contains the row and column index of a zero in the matrix. # Example ```python matrix = [ [1, 0, 2], [0, 3, 0], [4, 5, 6] ] find_zero_positions(matrix) # Expected output: [[0, 1], [1, 0], [1, 2]] ``` # Constraints - The matrix will contain at least one zero. - Values in the matrix may be negative or positive. - The order of indices in the output list does not matter.","solution":"from typing import List def find_zero_positions(matrix: List[List[int]]) -> List[List[int]]: Finds all the cells in the given matrix that have the value 0, and returns the row and column indices of these cells. Args: matrix (List[List[int]]): The input m x n matrix. Returns: List[List[int]]: A list of pairs, each pair contains the row and column index of a zero in the matrix. zero_positions = [] for i, row in enumerate(matrix): for j, value in enumerate(row): if value == 0: zero_positions.append([i, j]) return zero_positions"},{"question":"The Traveling Salesman Problem (TSP) ---------------------------------- The Traveling Salesman Problem (TSP) is a classic algorithmic problem in the fields of computer science and operations research. In this problem, a salesman must visit a set of cities exactly once and return to the original city. The challenge is to find the shortest possible route that the salesman can take to achieve this. Given a list of cities and the distances between each pair of cities, write a function `shortest_route` that attempts to find the shortest route for the salesman to take. The function should return the total distance of the shortest route found. You may assume that there is a route connecting every pair of cities and that the distance between each pair of cities is symmetric (i.e., the distance from city A to city B is the same as from city B to city A). # Input The input consists of: - A list of integers representing the cities, where each integer is the unique identifier of a city. - An NxN list of integers, where N is the number of cities. The element at row `i` and column `j` represents the distance between city `i` and city `j`. # Output The function should return an integer, representing the shortest possible route\'s total distance. # Constraints - The number of cities will be at least 2 and at most 10. - The distances between the cities will be non-negative integers. - The distance from a city to itself will always be 0. # Example ```python def shortest_route(cities, distances): # Your implementation here cities = [0, 1, 2, 3] distances = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] print(shortest_route(cities, distances)) ``` In this example, the shortest route is `0 -> 1 -> 3 -> 2 -> 0` with a total distance of `80`. # Notes - There can be multiple correct outputs since there can be multiple shortest paths with the same distance. - The problem can be approached using a brute-force solution due to the small size constraint (N ≤ 10). More sophisticated methods (such as dynamic programming or greedy algorithms) can be explored for efficiency, but they are optional in this context. **Your task is to implement the `shortest_route` function.**","solution":"from itertools import permutations def shortest_route(cities, distances): def route_distance(route): total_distance = 0 for i in range(len(route) - 1): total_distance += distances[route[i]][route[i + 1]] total_distance += distances[route[-1]][route[0]] # return to the starting city return total_distance # Generate all permutations of cities to consider all possible routes min_distance = float(\'inf\') best_route = None for perm in permutations(cities): distance = route_distance(perm) if distance < min_distance: min_distance = distance best_route = perm return min_distance # Output the shortest distance for given example cities = [0, 1, 2, 3] distances = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] print(shortest_route(cities, distances)) # Expected output: 80"},{"question":"Create a Temperature Conversion Program You are tasked with creating a program that will assist users in converting temperatures between Celsius, Fahrenheit, and Kelvin. The program must be able to handle the following conversions: 1. Celsius to Fahrenheit 2. Celsius to Kelvin 3. Fahrenheit to Celsius 4. Fahrenheit to Kelvin 5. Kelvin to Celsius 6. Kelvin to Fahrenheit # Input Specifications: - The program should first take a floating-point number representing the temperature value. - The program should then take a character representing the input scale (\'C\' for Celsius, \'F\' for Fahrenheit, \'K\' for Kelvin). - Finally, the program should take a character representing the target scale (\'C\' for Celsius, \'F\' for Fahrenheit, \'K\' for Kelvin). # Output Specifications: - The program should output the converted temperature value as a floating-point number. # Conversion Formulas: - Celsius to Fahrenheit: [ F = frac{9}{5} times C + 32 ] - Celsius to Kelvin: [ K = C + 273.15 ] - Fahrenheit to Celsius: [ C = frac{5}{9} times (F - 32) ] - Fahrenheit to Kelvin: [ K = frac{5}{9} times (F - 32) + 273.15 ] - Kelvin to Celsius: [ C = K - 273.15 ] - Kelvin to Fahrenheit: [ F = frac{9}{5} times (K - 273.15) + 32 ] # Example Input: ``` 36.6 C F ``` Output: ``` 97.88 ```","solution":"def convert_temperature(temp, input_scale, target_scale): if input_scale == target_scale: return temp # Convert input temperature to Celsius if input_scale == \'F\': celsius = (temp - 32) * 5.0/9.0 elif input_scale == \'K\': celsius = temp - 273.15 else: celsius = temp # Convert Celsius to target_scale if target_scale == \'F\': return (celsius * 9.0/5.0) + 32 elif target_scale == \'K\': return celsius + 273.15 else: return celsius"},{"question":"A surveillance system has flagged suspicious activity involving the communication of encoded messages through a network of computers. Each message consists of numbers which must be decoded to gain crucial intelligence. The numbers are interleaved with additional characters that disguise their true content. Your task is to write a function that decodes these messages. Each message is represented as a string, and the numbers in the message need to be extracted and summed up. Digits that are part of a multi-digit number are contiguous within the string. -----Input:----- - A single line containing an integer N, representing the number of test cases. - The next N lines, each containing a single string, representing the encoded messages. -----Output:----- - For each test case, output a single integer in a new line, which is the sum of all numbers extracted from the corresponding string. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ Length of each string ≤ 1000 - Each string contains only alphanumeric characters. -----Sample Input:----- 3 a1b2c3 abc123def456 no7num4ber5here -----Sample Output:----- 6 579 16 -----Explanation:----- In the first example, the extracted numbers are 1, 2, and 3. Their sum is 6. In the second example, the extracted numbers are 123 and 456. Their sum is 579. In the third example, the extracted numbers are 7, 4, and 5. Their sum is 16.","solution":"import re def decode_messages(N, messages): Decodes messages by summing up all the numbers in each message string. Args: N (int): Number of test cases. messages (list of str): List containing the encoded messages. Returns: list of int: List containing the sum of numbers for each message. results = [] for message in messages: # Find all numbers in the string numbers = re.findall(r\'d+\', message) # Convert found numbers to integers and sum them up total_sum = sum(map(int, numbers)) results.append(total_sum) return results"},{"question":"You are given a matrix of integers where each cell contains a positive integer. You are also given several queries. Each query consists of four integers x1, y1, x2, and y2, representing two cells in the matrix (top-left and bottom-right of a submatrix). You need to find the maximum difference between any two integers within the submatrix defined by these two cells. -----Input----- The first line contains two integers n and m (1 le n, m le 500) — the dimensions of the matrix. Next n lines contain m integers each, representing the elements of the matrix. Each integer is between 1 and 10^9. The line after the matrix contains a single integer q (1 le q le 10^4) — the number of queries. Next q lines contain four integers x1, y1, x2, and y2 (1 le x1 le x2 le n, 1 le y1 le y2 le m), representing the coordinates of the top-left and bottom-right cells of the submatrix. -----Output----- For each query, print a single integer — the maximum difference between any two integers within the specified submatrix. -----Examples----- Input 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 3 1 1 2 2 3 3 4 4 1 1 4 4 Output 5 3 15 -----Note----- In the given example: Query 1: The submatrix defined by (1, 1) to (2, 2) is: 1 2 5 6 The maximum difference is 6 - 1 = 5 Query 2: The submatrix defined by (3, 3) to (4, 4) is: 11 12 15 16 The maximum difference is 16 - 11 = 5 Query 3: The submatrix defined by (1, 1) to (4, 4) is: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 The maximum difference is 16 - 1 = 15","solution":"def max_difference(matrix, queries): Given a matrix and a list of queries, find the maximum difference between any two integers within the submatrix defined by the query coordinates. Parameters: matrix (list of list of int): The matrix containing integers. queries (list of tuple): List of queries where each query is a tuple (x1, y1, x2, y2). Returns: list of int: The result for each query, which is the maximum difference. results = [] for (x1, y1, x2, y2) in queries: submatrix_values = [] for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): submatrix_values.append(matrix[i][j]) max_value = max(submatrix_values) min_value = min(submatrix_values) results.append(max_value - min_value) return results"},{"question":"# Substring Anagram Detection An anagram is a rearrangement of the characters of a word or phrase to produce a new word or phrase, using all the original characters exactly once. For example, the word \\"listen\\" can be rearranged to form the word \\"silent\\". Task Given two strings, `s` and `t`, determine if any substring of `s` is an anagram of `t`. Return `True` if such a substring exists, and `False` otherwise. Input - `s` - A string consisting of lowercase English letters (1 ≤ length of s ≤ 100). - `t` - A string consisting of lowercase English letters (1 ≤ length of t ≤ 10). Output Return a boolean value: `True` if any substring of `s` is an anagram of `t`, otherwise return `False`. Example # Input ```python s = \\"abcdefg\\" t = \\"ba\\" ``` # Output ```python True ``` # Explanation The substring \\"ab\\" of `s` is an anagram of `t`.","solution":"def is_anagram_substring(s, t): from collections import Counter len_t = len(t) counter_t = Counter(t) for i in range(len(s) - len_t + 1): substring = s[i:i + len_t] if Counter(substring) == counter_t: return True return False"},{"question":"Write a function `flatten_dict` that takes a nested dictionary and returns a flattened version of the dictionary. The keys in the flattened dictionary should be the path to the original keys, separated by dots. The function should handle dictionaries nested to any level and should use only strings as dictionary keys. # Examples: ```python flatten_dict({ \\"key1\\": 1, \\"key2\\": { \\"a\\": 2, \\"b\\": 3, \\"c\\": { \\"d\\": 4 } }, \\"key3\\": 5 }) --> { \\"key1\\": 1, \\"key2.a\\": 2, \\"key2.b\\": 3, \\"key2.c.d\\": 4, \\"key3\\": 5 } flatten_dict({ \\"name\\": \\"John\\", \\"info\\": { \\"age\\": 30, \\"address\\": { \\"city\\": \\"New York\\", \\"zipcode\\": \\"10001\\" } } }) --> { \\"name\\": \\"John\\", \\"info.age\\": 30, \\"info.address.city\\": \\"New York\\", \\"info.address.zipcode\\": \\"10001\\" } ``` Note: - A key may contain multiple levels of nesting. - The final result should be a plain dictionary with no nesting, with keys representing the nested paths. - You can assume that dictionary keys are unique across different levels.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flatten a nested dictionary. Parameters: d (dict): The dictionary to flatten parent_key (str): The base key to start with (used for recursion) sep (str): Separator to use between keys Returns: dict: A new dictionary with flattened keys items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Ali is working on a task of optimizing the distribution of tasks between processors in a supercomputer. The supercomputer has N processors arranged in a single row and Ali wants to distribute M tasks among them such that the tasks are as uniformly distributed as possible. Each task requires a certain amount of resources, and each processor has a certain capacity to handle these resources. Ali wants to know the minimum and maximum number of tasks that a single processor can handle after the distribution, given the constraints of resources and capacities. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The second line of each test case contains N space-separated integers where the i-th integer denotes the capacity of the i-th processor. -----Output----- For each test case, print two space-separated integers: the minimum and maximum number of tasks that any processor can handle after the distribution. -----Constraints----- - 1 le T le 100 - 1 le N, M le 1,000 - 1 le C_i le 10^6 for each processor i - the sum of N cdot M over all test cases does not exceed 2 cdot 10^6 -----Example Input----- 2 4 10 3 5 4 2 3 5 2 7 1 -----Example Output----- 2 3 1 3 -----Explanation----- Example case 1: - There are 4 processors and 10 tasks. - The capacities are [3, 5, 4, 2]. - The distribution could be [2, 3, 3, 2] with minimum 2 tasks and maximum 3 tasks per processor. Example case 2: - There are 3 processors and 5 tasks. - The capacities are [2, 7, 1]. - The distribution could be [1, 3, 1] with minimum 1 task and maximum 3 tasks per processor.","solution":"def distribute_tasks(num_processors, num_tasks, capacities): Distribute num_tasks as uniformly as possible among num_processors with given capacities. # Initially, distribute tasks as evenly as possible min_tasks = num_tasks // num_processors remaining_tasks = num_tasks % num_processors min_tasks_per_processor = min_tasks max_tasks_per_processor = min_tasks + (1 if remaining_tasks > 0 else 0) return min_tasks_per_processor, max_tasks_per_processor def solve(test_cases): results = [] for case in test_cases: N, M = case[0] capacities = case[1] min_tasks, max_tasks = distribute_tasks(N, M, capacities) results.append(f\\"{min_tasks} {max_tasks}\\") return results # Example usage: # test_cases = [ # ((4, 10), [3, 5, 4, 2]), # ((3, 5), [2, 7, 1]) # ] # print(solve(test_cases))"},{"question":"Vera has an array of integers representing the daily temperatures over a period of time. She wants to know, for each day in the array, how many days she would have to wait until a warmer temperature occurs. If no future day has a warmer temperature, she should put `0` for that day. Write a function that, given an array of integers `temperatures`, calculates the number of days until a warmer temperature for each day in the array. **Function Signature:** ```python def dailyTemperatures(temperatures: List[int]) -> List[int]: pass ``` # Input: - An integer `n` representing the number of days (0 ≤ `n` ≤ 100000). - A list of integers `temperatures` where `temperatures[i]` represents the temperature on the `i-th` day. Each temperature is an integer (30 ≤ `temperatures[i]` ≤ 100). # Output: - A list of integers where the `j-th` element is the number of days you have to wait until a warmer temperature for the `j-th` day. If there is no day with a warmer temperature, put `0` instead. # Example: ```python Input: 8 [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] ``` # Explanation: - On day 0, you have to wait 1 day until day 1. - On day 1, you have to wait 1 day until day 2. - On day 2, you have to wait 4 days until day 6. - On day 3, you have to wait 2 days until day 5. - On day 4, you have to wait 1 day until day 5. - On day 5, you have to wait 1 day until day 6. - On day 6, you don\'t have to wait because there are no more days with a warmer temperature. - On day 7, you don\'t have to wait because there are no more days with a warmer temperature. # Note: - Your solution should aim for a time complexity of O(n).","solution":"from typing import List def dailyTemperatures(temperatures: List[int]) -> List[int]: Given an array of daily temperatures, returns an array where each element shows how many days one has to wait until a warmer temperature occurs. If no warmer temperature is found, 0 is placed for that day. n = len(temperatures) result = [0] * n stack = [] # This will store the indices of the temperatures list for i in range(n): # While stack is not empty and the current temperature is higher than the temperature # at the index of the top of the stack, pop from stack and calculate the days difference while stack and temperatures[i] > temperatures[stack[-1]]: prev_index = stack.pop() result[prev_index] = i - prev_index stack.append(i) return result"},{"question":"-----Problem Statement----- John has entered a competition where he needs to solve a series of coding problems. One of the challenges is to decode a string that has been encoded using a Caesar cipher. The Caesar cipher is a type of substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet. Given an encoded string and the number of places each character in the string has been shifted, John needs to decode the string and return the original plaintext. -----Input----- The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines: - The first line contains a single integer k, the number of places the string has been shifted. - The second line contains a string s, the encoded string. String s consists of only lowercase alphabetic characters and may have a length up to 1000. -----Output----- For each test case, in a single line, print the decoded string. -----Constraints----- - 1 ≤ T ≤ 100 - 0 ≤ k ≤ 25 - 1 ≤ length of s ≤ 1000 -----Example----- Input: 3 3 dwwdfn 2 cde 1 bce Output: attack abc abd","solution":"def decode_caesar_cipher(k, s): Decodes a string that has been encoded using a Caesar cipher with a shift of k. decoded_string = [] for char in s: shifted_pos = (ord(char) - ord(\'a\') - k) % 26 + ord(\'a\') decoded_string.append(chr(shifted_pos)) return \'\'.join(decoded_string) def decode_multiple_cases(test_cases): Decodes multiple test cases. results = [] for case in test_cases: k, s = case results.append(decode_caesar_cipher(k, s)) return results"},{"question":"Given a list of integers, write a function that returns the sum of the longest increasing subsequence. For example: Input: [10, 15, 3, 7, 12, 9, 18, 5] Output: 54 (Explanation: The longest increasing subsequence is [10, 15, 18], and their sum is 10 + 15 + 18 = 43) Input: [1, 101, 2, 3, 100, 4, 5] Output: 106 (Explanation: The longest increasing subsequence is [1, 2, 3, 100], and their sum is 1 + 2 + 3 + 100 = 106)","solution":"def sum_of_longest_increasing_subsequence(arr): Returns the sum of the longest increasing subsequence in the given list of integers. if not arr: return 0 n = len(arr) dp = [arr[i] for i in range(n)] for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + arr[i]) return max(dp)"},{"question":"Task Write a function that accepts two integers, `x` and `n`, and returns their greatest common divisor (GCD). The GCD of two integers is the largest positive integer that divides both numbers without leaving a remainder. You are not allowed to use the built-in GCD function from any standard library in your code. Examples ```python x, n = 48, 18 return 6 # because the largest integer that divides both 48 and 18 is 6 x, n = 101, 103 return 1 # because 101 and 103 are co-prime numbers x, n = 56, 98 return 14 # because the largest integer that divides both 56 and 98 is 14 ``` **Notes:** + `x, n in mathbb{N}` and `1 lt x, n lt 10^6`. + Ensure your solution works efficiently for large inputs.","solution":"def gcd(x, n): Returns the greatest common divisor (GCD) of two integers x and n. while n: x, n = n, x % n return x"},{"question":"Write a Python function that takes an integer as input and returns a string representing the Roman numeral equivalent of that integer. The input integer will be in the range from 1 to 3999. Examples: ```python int_to_roman(1) # returns \'I\' int_to_roman(3999) # returns \'MMMCMXCIX\' int_to_roman(58) # returns \'LVIII\' ```","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. :param num: Integer to convert, must be between 1 and 3999 inclusive. :return: A string representing the Roman numeral equivalent. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' for i in range(len(val)): while num >= val[i]: roman_num += syb[i] num -= val[i] return roman_num"},{"question":"You are given a robot that moves in a 2D plane. Initially, the robot is at the origin (0, 0). The robot can move in four possible directions: - \'U\' for up (increasing the y-coordinate), - \'D\' for down (decreasing the y-coordinate), - \'L\' for left (decreasing the x-coordinate), - \'R\' for right (increasing the x-coordinate). Write a function `final_position` that takes a string of commands and returns the final position of the robot after executing all the commands. The result should be a tuple (x, y) representing the final coordinates. **Function Signature:** ```python def final_position(commands: str) -> tuple: pass ``` **Example:** ```python # Example 1 commands = \\"UUDDLRLR\\" # Explanation: # The robot moves up twice to (0, 2), then down twice to (0, 0), then left and right to (-1, 0) and (0, 0), and finally left and right again to (-1, 0) and (0, 0). # The final position is thus (0, 0) assert final_position(commands) == (0, 0) # Example 2 commands = \\"UUDDLRRR\\" # Explanation: # The robot moves up twice to (0, 2), then down twice to (0, 0), then left to (-1, 0), then right thrice to (2, 0). # The final position is thus (2, 0) assert final_position(commands) == (2, 0) ``` **Notes:** - The input string will only contain the characters \'U\', \'D\', \'L\', and \'R\'. - The input string can be of any length between 1 and 1000, inclusive.","solution":"def final_position(commands: str) -> tuple: Calculates the final position of the robot given a series of movement commands. Parameters: commands (str): A string consisting of \'U\', \'D\', \'L\', \'R\' which represent Up, Down, Left, and Right moves. Returns: tuple: A tuple (x, y) representing the final coordinates after executing the commands. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"--- Given an array of integers, find the highest product you can get from three of the integers. Write a function `maxProductOfThree` that accepts an array of integers and returns an integer representing the highest product. The function should handle both positive and negative numbers, as well as zero. # Example: ```python def maxProductOfThree(nums): # Your code here # Example Usage arr = [1, 10, 2, 6, 5, 3] print(maxProductOfThree(arr)) # Output: 300 (10 * 6 * 5) ``` # Explanation: In the example above: - The highest product of any three numbers in the array `[1, 10, 2, 6, 5, 3]` is `10 * 6 * 5 = 300`. # Constraints: - The array will have at least three integers. - The array elements range from `-10^3` to `10^3`. # Note: Consider both the case of using three positive numbers and the possibility of using two negative numbers which can yield a positive product when multiplied with a positive number. ---","solution":"def maxProductOfThree(nums): Returns the highest product of any three integers in the array. nums.sort() # The candidate for the highest product is either the product of the # highest three values in the sorted array or the product of the # two lowest (most negative) values and the highest value. max_product = max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) return max_product"},{"question":"Write a function that takes two parameters: `initial_cost` (a float) and `type_of_product` (a string). The `type_of_product` can be either \\"A\\", \\"B\\", or \\"C\\". Depending on the type of product, there\'s a discount applied to the initial cost as follows: * For product \\"A\\": 10% discount * For product \\"B\\": 15% discount * For product \\"C\\": no discount Calculate the final cost after applying the appropriate discount and return the result rounded to two decimal places. Write the function signature in Python as follows: ```python def calculate_final_cost(initial_cost: float, type_of_product: str) -> float: pass ``` Here are some example inputs and expected outputs: ```python calculate_final_cost(200.0, \'A\') # Expected output: 180.00 calculate_final_cost(150.0, \'B\') # Expected output: 127.50 calculate_final_cost(50.0, \'C\') # Expected output: 50.00 ```","solution":"def calculate_final_cost(initial_cost: float, type_of_product: str) -> float: Calculate the final cost after applying discounts based on the type of product. Parameters: initial_cost (float): The initial cost of the product. type_of_product (str): The type of product, which can be \'A\', \'B\', or \'C\'. Returns: float: The final cost after the discount, rounded to two decimal places. if type_of_product == \'A\': discount = initial_cost * 0.10 elif type_of_product == \'B\': discount = initial_cost * 0.15 elif type_of_product == \'C\': discount = 0.0 else: raise ValueError(\\"Invalid type_of_product. Must be \'A\', \'B\', or \'C\'.\\") final_cost = initial_cost - discount return round(final_cost, 2)"},{"question":"Time Interval Summation Alice has an event log where each event has a start time, end time, and a value representing its significance. Each event can be represented by three integers (s_i), (e_i), and (v_i), where (s_i) is the start time, (e_i) is the end time, and (v_i) is the value. All times are given in seconds since the start of the day (which is at 0 seconds). Your task is to write a program to compute the total value of overlapping events during each second in the day. The day is divided into (T) seconds (0 to T-1). Given multiple events in different test cases, for each test case, your program should output the sum of values for each second from 0 to (T-1) for the events that span that second. ------Input------ The first line of the input contains an integer (t) (1 le t le 10^3) — the number of test cases. The first line of each test case contains an integer (n) (1 le n le 10^3) — the number of events in that test case. Each of the next (n) lines contains three integers (s_i), (e_i), (v_i) (0 le s_i < e_i le 86,400, 1 le v_i le 10^6) — the start time, end time and value of the i-th event. ------Output------ For each test case, output (T) lines. Each line contains one integer representing the sum of values for each second of the day for that test case. ------Example------ Input 2 3 0 10 5 5 15 10 10 20 15 2 0 5 7 5 10 8 Output 5 5 5 5 5 15 15 15 15 25 10 10 10 10 10 15 15 15 15 15 7 7 7 7 7 8 8 8 8 8 ------ Note ----- In the first test case: - For each second between 0 to 4, the sum value is 5 as only the first event spans these seconds. - For each second between 5 to 9, the sum value is 15 as both the first and second events overlap. - For the 10th second, the sum value is 25 as all three events overlap for this second. - For each second between 11 to 14, the sum value is 10 as only the second and third events overlap. - From 15 to 19, only the third event is active with a sum value of 15. In the second test case: - For each second from 0 to 4, the sum value is 7 as only the first event spans these seconds. - For each second from 5 to 9, the sum value is 8 as only the second event spans these seconds.","solution":"def compute_event_values(t, test_cases): results = [] T = 86400 # Number of seconds in a day for i in range(t): n = test_cases[i][0] events = test_cases[i][1] time_values = [0] * T for event in events: s, e, v = event for j in range(s, e): time_values[j] += v results.append(time_values) return results # Input parsing function (not part of the main solution code) def parse_input(input_text): input_lines = input_text.strip().split(\\"n\\") t = int(input_lines[0].strip()) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index].strip()) index += 1 events = [] for _ in range(n): s, e, v = map(int, input_lines[index].strip().split()) events.append((s, e, v)) index += 1 test_cases.append((n, events)) return t, test_cases # Example usage input_text_example = \\"2n3n0 10 5n5 15 10n10 20 15n2n0 5 7n5 10 8\\" t, test_cases = parse_input(input_text_example) result = compute_event_values(t, test_cases) for time_values in result: print(\\" \\".join(map(str, time_values)))"},{"question":"You are tasked with implementing a function that calculates the factorial of a number iteratively and recursively. The function should handle inputs efficiently and gracefully handle invalid cases such as negative numbers. **Iterative Approach**: 1. If the input is a non-negative integer, return the factorial of the number using an iterative approach. 2. If the input is a negative integer, return `None`. **Recursive Approach**: 1. If the input is a non-negative integer, return the factorial of the number using a recursive approach. 2. If the input is a negative integer, return `None`. ```python def factorial_iterative(n): Calculate the factorial of a number iteratively. :param n: Integer, the number to calculate the factorial of. :return: The factorial of the number, or None if the number is negative. if n < 0: return None result = 1 for i in range(1, n + 1): result *= i return result def factorial_recursive(n): Calculate the factorial of a number recursively. :param n: Integer, the number to calculate the factorial of. :return: The factorial of the number, or None if the number is negative. if n < 0: return None if n == 0: return 1 return n * factorial_recursive(n - 1) ``` **Example**: - For the input `5`, both `factorial_iterative(5)` and `factorial_recursive(5)` should return `120`. - For the input `-3`, both `factorial_iterative(-3)` and `factorial_recursive(-3)` should return `None`.","solution":"def factorial_iterative(n): Calculate the factorial of a number iteratively. :param n: Integer, the number to calculate the factorial of. :return: The factorial of the number, or None if the number is negative. if n < 0: return None result = 1 for i in range(1, n + 1): result *= i return result def factorial_recursive(n): Calculate the factorial of a number recursively. :param n: Integer, the number to calculate the factorial of. :return: The factorial of the number, or None if the number is negative. if n < 0: return None if n == 0: return 1 return n * factorial_recursive(n - 1)"},{"question":"You are given a string S consisting of lowercase English letters, and you need to perform Q operations on it. In each operation, you will be given two integers, L and R (1-based index), which define a substring of S. For each query, you need to check if the defined substring can be rearranged such that it forms a palindrome. -----Input----- - The first line contains a single integer Q denoting the number of queries. - The second line contains the string S. - The next Q lines describe the operations. Each line contains two space-separated integers L and R. -----Output----- For each query, print \\"Yes\\" if the substring can be rearranged to form a palindrome, otherwise print \\"No\\". -----Constraints----- - 1 ≤ Q ≤ 105 - 1 ≤ |S| ≤ 105 - 1 ≤ L ≤ R ≤ |S| -----Example----- Input: 3 aabbccbb 1 2 2 3 1 8 Output: Yes No Yes -----Explanation----- Example case 1: The substring defined by L=1 and R=2 is \\"aa\\", which is already a palindrome, so the answer is \\"Yes\\". Example case 2: The substring defined by L=2 and R=3 is \\"ab\\", which cannot be rearranged to form a palindrome, so the answer is \\"No\\". Example case 3: The substring defined by L=1 and R=8 is \\"aabbccbb\\". This string can be rearranged to \\"abbccbaa\\", which is a palindrome, so the answer is \\"Yes\\".","solution":"def can_be_palindrome_substring(S, L, R): Checks if the substring of S defined from L to R can be rearranged to form a palindrome. substring = S[L-1:R] char_count = {} # Count the occurrences of each character in the substring for char in substring: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the count of characters that appear an odd number of times odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can be rearranged to form a palindrome if it has at most one odd-count character return \\"Yes\\" if odd_count <= 1 else \\"No\\" def check_palindrome_queries(S, queries): Processes multiple queries and returns the results for each. results = [] for L, R in queries: results.append(can_be_palindrome_substring(S, L, R)) return results"},{"question":"You are given a list of integers representing the scores of students in a coding competition. Your task is to categorize the scores into four different tiers based on predefined score ranges. The ranges for the tiers are as follows: - Tier 1: 90 ≤ score ≤ 100 - Tier 2: 75 ≤ score < 90 - Tier 3: 50 ≤ score < 75 - Tier 4: 0 ≤ score < 50 Your job is to count the number of students in each tier and output these counts. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains an integer N denoting the number of students. The second line contains N space separated integers denoting the scores of the students. -----Output----- For each test case, output four space separated integers denoting the number of students in Tier 1, Tier 2, Tier 3, and Tier 4 respectively. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 0 ≤ Score ≤ 100 -----Example----- Input 2 5 95 88 45 67 99 3 50 60 40 Output 2 1 1 1 0 2 1 0 -----Explanation----- Example case 1: The scores can be categorized as follows: - 95 (Tier 1) - 88 (Tier 2) - 45 (Tier 4) - 67 (Tier 3) - 99 (Tier 1) So there are 2 students in Tier 1, 1 in Tier 2, 1 in Tier 3, and 1 in Tier 4. Example case 2: The scores can be categorized as follows: - 50 (Tier 3) - 60 (Tier 3) - 40 (Tier 4) So there are 0 students in Tier 1, 0 in Tier 2, 2 in Tier 3, and 1 in Tier 4.","solution":"def categorize_scores(test_cases): results = [] for scores in test_cases: tier1 = tier2 = tier3 = tier4 = 0 for score in scores: if 90 <= score <= 100: tier1 += 1 elif 75 <= score < 90: tier2 += 1 elif 50 <= score < 75: tier3 += 1 elif 0 <= score < 50: tier4 += 1 results.append((tier1, tier2, tier3, tier4)) return results"},{"question":"Write a function that finds the contiguous subarray within a one-dimensional numeric array which has the largest sum. The array will contain at least one number, and can contain both positive and negative numbers, as well as zeros. For example: ``` max_subarray_sum([−2,1,−3,4,−1,2,1,−5,4]) == 6 # Explanation: The contiguous subarray [4, −1, 2, 1] has the largest sum which is 6. ``` If the input array is `[1]`, then the output should be `1`, since the array only contains one element, which is also the largest sum possible. If the input array contains all negative numbers, such as `[-1, -2, -3, -4]`, the output should be the largest negative number since the subarray with the highest sum is the least negative number: ``` max_subarray_sum([-1, -2, -3, -4]) == -1 ``` Your task is to implement the function `max_subarray_sum(arr)` that returns the largest sum of a contiguous subarray within the array `arr`. ``` def max_subarray_sum(arr): # Your code here ``` Tip: Kadane\'s Algorithm is particularly useful for this problem.","solution":"def max_subarray_sum(arr): Finds the sum of the contiguous subarray within a one-dimensional numeric array which has the largest sum using Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Reverse every word in a given string: Write a function that takes a string consisting of multiple words separated by spaces and returns a new string where each word is reversed, but the order of the words remains the same. e.g. \\"Tech Interview Prep\\" --> \\"hceT weivretnI perP\\" ```python def reverse_words(s): Reverses every word in the input string while retaining the order of the words. Parameters: s (str): The input string containing words separated by spaces. Returns: str: A new string with each word reversed and the order of words unchanged. Example: >>> reverse_words(\\"Tech Interview Prep\\") \\"hceT weivretnI perP\\" # Implementation here pass ```","solution":"def reverse_words(s): Reverses every word in the input string while retaining the order of the words. Parameters: s (str): The input string containing words separated by spaces. Returns: str: A new string with each word reversed and the order of words unchanged. Example: >>> reverse_words(\\"Tech Interview Prep\\") \\"hceT weivretnI perP\\" return \' \'.join(word[::-1] for word in s.split(\' \'))"},{"question":"Write a function that takes a single string as input and returns `True` if it is a valid palindrome considering only alphanumeric characters and ignoring cases, and `False` otherwise. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (excluding spaces, punctuation, and case sensitivity). # Examples Example 1: ``` Input: \\"A man, a plan, a canal: Panama\\" Output: True Explanation: The normalized string is \\"amanaplanacanalpanama\\" Example 2: ``` Input: \\"race a car\\" Output: False Explanation: The normalized string is \\"raceacar\\" which is not a palindrome # Constraints - The input string will only contain printable ASCII characters.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome considering only alphanumeric characters and ignoring cases. # Use regex to remove all non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"You are given a string that consists of lowercase English letters. Your task is to calculate the minimum number of steps required to make the string a palindrome. In one step, you can choose any character of the string and change it to any other character. -----Input:----- - A single line containing a string s of length N. -----Output:----- Output the minimum number of steps required to make the string a palindrome. -----Constraints----- - 1 leq N leq 1000 -----Sample Input:----- abca -----Sample Output:----- 1","solution":"def min_steps_to_make_palindrome(s): Returns the minimum number of steps required to make the string s a palindrome. left, right = 0, len(s) - 1 steps = 0 while left < right: if s[left] != s[right]: steps += 1 left += 1 right -= 1 return steps"},{"question":"Implement a function to determine if a given string is a \\"double-ended palindrome.\\" A double-ended palindrome is a string that reads the same backward as forward when considering only the alphabetic characters and ignoring all other characters (such as numbers, spaces, and punctuation). The function should not be case-sensitive. Write a function `is_double_ended_palindrome(s: str) -> bool` that takes in a string `s` and returns `True` if it is a double-ended palindrome, and `False` otherwise. Example: ```python is_double_ended_palindrome(\\"A man, a plan, a canal, Panama!\\") # should return True is_double_ended_palindrome(\\"No \'x\' in Nixon\\") # should return True is_double_ended_palindrome(\\"Hello, World!\\") # should return False ``` Note: - While evaluating, only consider alphabet characters (`a-z` and `A-Z`). - Ignore all other characters and spaces. - Ensure the function is case insensitive.","solution":"def is_double_ended_palindrome(s: str) -> bool: Returns True if the input string is a double-ended palindrome, ignoring non-alphabet characters and case. # Filter only alphabetic characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalpha()] # Check if the filtered characters are the same forward and backward return filtered_chars == filtered_chars[::-1]"},{"question":"A social networking site allows users to post updates in the form of strings. However, to ensure a positive experience, the site has enabled a feature that scans each update for \\"negative\\" words and replaces them with positive counterparts from a pre-defined dictionary. You are tasked with implementing the function that performs this scanning and replacement. -----Input----- - The first line contains an integer T, the number of test cases. - The description of each test case follows: - The first line of each test case contains an integer N, the number of negative-positive word pairs. - The following N lines each contain two space-separated strings: the negative word and its corresponding positive word. - The next line contains an integer M, the number of updates. - The following M lines each contain one update string. -----Output----- For each test case, output the list of modified update strings, where any negative words found in the updates have been replaced with their positive counterparts. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 50 - 1 ≤ M ≤ 50 - 1 ≤ length of each string ≤ 200 - Words in the updates are separated by single spaces and consist only of lowercase English letters. -----Example----- Input: 1 3 bad good sad happy angry calm 2 this is a bad day he is very sad and angry Output: this is a good day he is very happy and calm -----Explanation:----- For the first test case: - Replace \\"bad\\" with \\"good\\" in the first update string. - Replace \\"sad\\" with \\"happy\\" and \\"angry\\" with \\"calm\\" in the second update string.","solution":"def replace_negative_words(num_cases, cases): results = [] for case in cases: n, replacements, m, updates = case neg_pos_dict = dict(replacements) modified_updates = [] for update in updates: words = update.split() modified_words = [neg_pos_dict.get(word, word) for word in words] modified_updates.append(\\" \\".join(modified_words)) results.append(modified_updates) return results"},{"question":"A company has a fleet of delivery trucks. Each truck has a certain maximum weight capacity and a list of packages that it needs to deliver. Each package has a weight. The trucks can deliver their assigned packages as long as the total weight of the packages does not exceed the truck\'s capacity. Given a list of trucks and their capacities, and a list of packages with their weights, your task is to determine how many trucks can deliver all their assigned packages without exceeding their capacity. **Input:** - `trucks`: a list of integers where each integer represents the weight capacity of a truck. - `packages`: a list of lists of integers where each inner list contains the weights of the packages assigned to a respective truck. **Output:** - An integer representing the number of trucks that can deliver all their assigned packages without exceeding their weight capacity. **Example:** ```python trucks = [100, 200, 150] packages = [[90, 20], [100, 50, 40], [100, 60, 10]] # The first truck has a capacity of 100 and needs to deliver packages with weights 90 and 20 (total 110) -> exceeds capacity # The second truck has a capacity of 200 and needs to deliver packages with weights 100, 50, and 40 (total 190) -> within capacity # The third truck has a capacity of 150 and needs to deliver packages with weights 100, 60, and 10 (total 170) -> exceeds capacity # So, only one (1) truck can deliver all its assigned packages. output = 1 ``` Write a function `count_trucks_within_capacity(trucks, packages)` that takes the `trucks` and `packages` as input and returns the number of trucks that can deliver all their assigned packages without exceeding their capacity. ```python def count_trucks_within_capacity(trucks, packages): count = 0 for i in range(len(trucks)): if sum(packages[i]) <= trucks[i]: count += 1 return count ```","solution":"def count_trucks_within_capacity(trucks, packages): count = 0 for i in range(len(trucks)): if sum(packages[i]) <= trucks[i]: count += 1 return count"},{"question":"Given an integer array `nums` and an integer `n`, move all instances of `n` in `nums` to the end of the array while maintaining the relative order of the other elements. Write a function `move_to_end(nums: List[int], n: int) -> List[int]` that returns the modified array. For example: ```python move_to_end([1, 2, 3, 4, 3, 5, 3], 3) == [1, 2, 4, 5, 3, 3, 3] move_to_end([4, 1, 2, 2, 4, 1, 4], 4) == [1, 2, 2, 1, 4, 4, 4] move_to_end([0, 1, 0, 3, 12], 0) == [1, 3, 12, 0, 0] move_to_end([1, 2, 3, 1, 2, 3, 1, 2, 1], 1) == [2, 3, 2, 3, 2, 1, 1, 1, 1] ``` You can assume that the input list will contain at least one element and both `nums` and `n` will be valid integers.","solution":"from typing import List def move_to_end(nums: List[int], n: int) -> List[int]: Moves all instances of `n` in the list `nums` to the end while maintaining the relative order of the other elements. non_n_elements = [x for x in nums if x != n] n_elements = [x for x in nums if x == n] return non_n_elements + n_elements"},{"question":"Consider a function `performOperations(a, b, operations)` where `a` and `b` are two integer numbers and `operations` is a list of strings representing different mathematical operations to be performed sequentially on `a` and `b`. The operations can be \\"add\\", \\"subtract\\", \\"multiply\\", or \\"divide\\". The result of each operation should be used as the first operand for the next operation in the list. The function should return the final result after all operations are performed. Note that division by zero and invalid operations should be handled gracefully by returning `None`. **Function Signature:** ```python def performOperations(a: int, b: int, operations: List[str]) -> Optional[float]: ``` **Input Parameters:** - `a` (int): The first integer number. - `b` (int): The second integer number. - `operations` (List[str]): A list of strings representing the operations to be performed. **Output:** - Returns a `float` representing the final result or `None` if any error occurs. **Examples:** ```python # Example 1: performOperations(10, 5, [\\"add\\", \\"multiply\\", \\"subtract\\"]) -> 75.0 Explanation: 10 + 5 = 15 15 * 5 = 75 75 - 5 = 70 => Final result: 70.0 # Example 2: performOperations(8, 2, [\\"divide\\", \\"add\\"]) -> 5.0 Explanation: 8 / 2 = 4.0 4.0 + 2 = 6.0 => Final result: 6.0 # Example 3: performOperations(15, 0, [\\"divide\\"]) -> None Explanation: Division by 0, returns None. # Example 4: performOperations(6, 3, [\\"multiply\\", \\"foobar\\"]) -> None Explanation: Invalid operation \\"foobar\\", returns None. ``` **Constraints:** - The supported operations are only \\"add\\", \\"subtract\\", \\"multiply\\", and \\"divide\\". - If an invalid operation is encountered or a division by zero occurs, return `None`. - The list of operations may be empty, in which case `a` should be returned as the final result.","solution":"from typing import List, Optional def performOperations(a: int, b: int, operations: List[str]) -> Optional[float]: current_result = float(a) # Start with float conversion of \'a\' for operation in operations: if operation == \\"add\\": current_result += b elif operation == \\"subtract\\": current_result -= b elif operation == \\"multiply\\": current_result *= b elif operation == \\"divide\\": if b == 0: return None current_result /= b else: return None # Invalid operation encountered return current_result"},{"question":"# Merge K Sorted Lists You are given an array of `k` sorted linked lists where each linked list is represented as a `ListNode` object. Your task is to merge all the linked lists into one single sorted linked list and return the head of the merged linked list. A `ListNode` is defined as: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` For example: ```python # Helper function to convert list to linked list def list_to_linked(list): dummy = ListNode() current = dummy for number in list: current.next = ListNode(number) current = current.next return dummy.next # Test cases list1 = list_to_linked([1, 4, 5]) list2 = list_to_linked([1, 3, 4]) list3 = list_to_linked([2, 6]) merged_list = merge_k_lists([list1, list2, list3]) # The above code setup should result in merged_list representing the linked list: # 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6 ``` NOTE: You can assume there are no duplicate values within any single linked list.","solution":"from heapq import heappop, heappush from typing import List, Optional class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_k_lists(lists: List[Optional[ListNode]]) -> Optional[ListNode]: Merge k sorted linked lists and return as one sorted linked list. min_heap = [] for idx, l in enumerate(lists): if l: heappush(min_heap, (l.val, idx, l)) dummy = ListNode(0) current = dummy while min_heap: val, idx, node = heappop(min_heap) current.next = node current = current.next if node.next: heappush(min_heap, (node.next.val, idx, node.next)) return dummy.next def list_to_linked(lst): dummy = ListNode() current = dummy for number in lst: current.next = ListNode(number) current = current.next return dummy.next def linked_to_list(node): result = [] while node: result.append(node.val) node = node.next return result"},{"question":"Your task You need to develop a software component to manage an online bookstore. The store contains a collection of books, each described by a unique ISBN, a title, an author, and a price. Users can perform multiple actions on this store such as adding new books, searching for books by ISBN or title, and calculating the total cost of a list of book ISBNs. The following operations are supported: 1. Add a book: This operation takes the ISBN, title, author, and price of a new book and adds it to the store’s collection. 2. Search a book by ISBN: This operation takes in an ISBN and returns the corresponding book\'s title, author, and price. 3. Search books by title: This operation takes part of the title and returns a list of all matching books with their ISBN, title, author, and price. 4. Calculate total cost: This operation takes a list of ISBNs and returns the total cost of these books (only if all ISBNs are valid; otherwise, return -1). Input You are given a list of operations to perform on the bookstore. Each operation is provided as a dictionary with a key named \\"type\\" which can have values \\"add\\", \\"search_by_isbn\\", \\"search_by_title\\", or \\"calculate_total\\". The rest of the dictionary will contain the necessary parameters for that operation. For example: ```python operations = [ {\\"type\\": \\"add\\", \\"isbn\\": \\"12345\\", \\"title\\": \\"Book A\\", \\"author\\": \\"Author A\\", \\"price\\": 10.5}, {\\"type\\": \\"add\\", \\"isbn\\": \\"67890\\", \\"title\\": \\"Book B\\", \\"author\\": \\"Author B\\", \\"price\\": 12.0}, {\\"type\\": \\"search_by_isbn\\", \\"isbn\\": \\"12345\\"}, {\\"type\\": \\"search_by_title\\", \\"title\\": \\"Book\\"}, {\\"type\\": \\"calculate_total\\", \\"isbns\\": [\\"12345\\", \\"67890\\"]} ] ``` Output For each search or calculation operation, you should return the appropriate results as described in the operations section. For the add operation, simply acknowledge the addition of the book. If any operation cannot be carried out (e.g., an invalid ISBN is provided for search or calculate_total), return `None` for that operation. Example ```python execute_operations([ {\\"type\\": \\"add\\", \\"isbn\\": \\"12345\\", \\"title\\": \\"Book A\\", \\"author\\": \\"Author A\\", \\"price\\": 10.5}, {\\"type\\": \\"add\\", \\"isbn\\": \\"67890\\", \\"title\\": \\"Book B\\", \\"author\\": \\"Author B\\", \\"price\\": 12.0}, {\\"type\\": \\"search_by_isbn\\", \\"isbn\\": \\"12345\\"}, {\\"type\\": \\"search_by_title\\", \\"title\\": \\"Book\\"}, {\\"type\\": \\"calculate_total\\", \\"isbns\\": [\\"12345\\", \\"67890\\"]} ]) ``` This should return: ```python [ \\"Book added.\\", \\"Book added.\\", {\\"title\\": \\"Book A\\", \\"author\\": \\"Author A\\", \\"price\\": 10.5}, [ {\\"isbn\\": \\"12345\\", \\"title\\": \\"Book A\\", \\"author\\": \\"Author A\\", \\"price\\": 10.5}, {\\"isbn\\": \\"67890\\", \\"title\\": \\"Book B\\", \\"author\\": \\"Author B\\", \\"price\\": 12.0} ], 22.5 ] ```","solution":"class OnlineBookstore: def __init__(self): self.books = {} def add_book(self, isbn, title, author, price): if isbn not in self.books: self.books[isbn] = {\'title\': title, \'author\': author, \'price\': price} return \\"Book added.\\" else: return \\"Book with this ISBN already exists.\\" def search_by_isbn(self, isbn): if isbn in self.books: return self.books[isbn] else: return None def search_by_title(self, title): result = [] for isbn, info in self.books.items(): if title.lower() in info[\'title\'].lower(): result.append({\'isbn\': isbn, **info}) return result def calculate_total(self, isbns): total = 0 for isbn in isbns: if isbn in self.books: total += self.books[isbn][\'price\'] else: return -1 # ISBN not found return total def execute_operations(operations): bookstore = OnlineBookstore() result = [] for operation in operations: if operation[\'type\'] == \\"add\\": result.append(bookstore.add_book(operation[\'isbn\'], operation[\'title\'], operation[\'author\'], operation[\'price\'])) elif operation[\'type\'] == \\"search_by_isbn\\": result.append(bookstore.search_by_isbn(operation[\'isbn\'])) elif operation[\'type\'] == \\"search_by_title\\": result.append(bookstore.search_by_title(operation[\'title\'])) elif operation[\'type\'] == \\"calculate_total\\": result.append(bookstore.calculate_total(operation[\'isbns\'])) return result"},{"question":"Given a list of integers, determine the minimum number of steps required to remove all elements from the list. In each step, you can choose an arbitrary subsequence of the list that forms a palindrome and remove it. Example `Input: [1, 3, 4, 3, 1, 2, 2, 4]` You can: Step 1: Remove subsequence `[1, 3, 4, 3, 1]`, remaining list: `[2, 2, 4]` Step 2: Remove subsequence `[2, 2]`, remaining list: `[4]` Step 3: Remove subsequence `[4]`, remaining list: `[]` The total number of steps required is `3`. The Task Write a function `minStepsToRemovePalindromes(arr)` which takes a list of integers `arr` as input and returns the minimum number of steps required to remove all elements from the list as described above. Limitations The length of the list can be up to `1000` elements, and each element can be any integer.","solution":"def minStepsToRemovePalindromes(arr): Returns the minimum number of steps required to remove all elements from the list by removing arbitrary subsequences of the list that forms a palindrome. if not arr: return 0 n = len(arr) if arr == arr[::-1]: return 1 return 2"},{"question":"Write a function `findEquilibriumIndex(arr)` that takes in an array of integers `arr` and returns the \\"equilibrium index\\" of the array. An equilibrium index is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. If no such index exists, return -1. If there are multiple equilibrium indexes, return the smallest one. For example, for the array `[1, 3, 5, 2, 2]`, the function should return `2` (since `1 + 3` is equal to `2 + 2`).","solution":"def findEquilibriumIndex(arr): Returns the equilibrium index of the array `arr` if it exists, otherwise returns -1. An equilibrium index is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): total_sum -= num # total_sum is now right_sum for index i if left_sum == total_sum: return i left_sum += num return -1"},{"question":"Given an integer n, generate the nth term of the count-and-say sequence. The count-and-say sequence is a sequence of digit strings defined by the recursive formula: - countAndSay(1) = \\"1\\" - countAndSay(n) is the next term after countAndSay(n-1) described as follows: read off the digits of the previous term, counting the number of digits in groups of the same digit. For example, the subsequent terms of the sequence are: 1. \\"1\\" (sequence starts with a single 1) 2. \\"11\\" (one 1) 3. \\"21\\" (two 1s) 4. \\"1211\\" (one 2, then one 1) 5. \\"111221\\" (one 1, one 2, then two 1s) Given n, generate the nth term of the count-and-say sequence. Example 1: Input: n = 1 Output: \\"1\\" Example 2: Input: n = 4 Output: \\"1211\\"","solution":"def count_and_say(n): Generates the nth term of the count-and-say sequence. if n == 1: return \\"1\\" previous_term = count_and_say(n - 1) result = \\"\\" count = 1 for i in range(1, len(previous_term)): if previous_term[i] == previous_term[i - 1]: count += 1 else: result += str(count) + previous_term[i - 1] count = 1 result += str(count) + previous_term[-1] return result"},{"question":"-----Problem Statement----- A publishing company has launched a new e-book rental service. A customer can rent any number of books, but each book has a maximum duration for which it may be rented out. Once a book has been rented for that period, it is no longer available for rental until the customer returns it. Your task is to determine whether a particular customer\'s request to rent a set of books is valid, according to their respective maximum rental durations. You are given the maximum rental duration for each book and a list of requested rental periods for each book the customer wants to rent. Determine whether or not the customer\'s request can be satisfied. -----Input----- - The first line contains an integer, N, the number of books in the system. - The next line contains N space-separated integers, D_i (1 leq D_i leq 10^9), where D_i represents the maximum rental duration for the i-th book. - The third line contains an integer M, the number of books the customer wants to rent. - The last line contains M space-separated integers, R_j (1 leq R_j leq 10^9), where R_j represents the requested rental period for the j-th book. -----Output----- Output \\"YES\\" if the customer\'s request can be satisfied (i.e., each requested rental period does not exceed the corresponding book\'s maximum rental duration). Otherwise, output \\"NO\\". -----Constraints----- - 1 leq N leq 10^5 - 1 leq M leq N - Each book is identified by its order in the list (first book, second book, etc.). -----Sample Input----- 3 7 5 10 2 6 4 -----Sample Output----- YES -----EXPLANATION----- The customer wants to rent 2 books. The first requested period is 6, which is less than the maximum rental duration for that book (7). The second requested period is 4, which is also less than the maximum rental duration for that book (5). Both requests are valid; hence the output is \\"YES\\".","solution":"def can_rent_books(max_durations, requested_rentals): Determines if the requested rental periods do not exceed the respective maximum rental durations. Parameters: max_durations (list of int): List of maximum rental durations for each book. requested_rentals (list of int): List of requested rental periods for the books to be rented. Returns: str: \'YES\' if all requests can be satisfied, \'NO\' otherwise. for i in range(len(requested_rentals)): if requested_rentals[i] > max_durations[i]: return \\"NO\\" return \\"YES\\""},{"question":"Alice is planning a road trip across N cities. She wants to visit each city exactly once and return to the starting city. The travel distances between the cities are given in a 2D array `dist` where `dist[i][j]` represents the distance between city `i` and city `j`. Your task is to help Alice determine the minimum distance she needs to travel to complete her trip. To simplify the problem, you can assume that the first city Alice starts from is always city 0. -----Input----- - The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. - The first line of each test case contains a single integer `N` representing the number of cities. - Each of the next `N` lines contains `N` space-separated integers representing the 2D distance array `dist`. -----Output----- For each test case, print a single line containing the minimum distance Alice needs to travel to complete her trip. -----Constraints----- - `1 ≤ T ≤ 10` - `2 ≤ N ≤ 10` - `1 ≤ dist[i][j] ≤ 1000` for all valid `i`, `j` - `dist[i][i] = 0` for all valid `i` - The distance between any two different cities is symmetric, i.e., `dist[i][j] = dist[j][i]` for all valid `i`, `j` -----Example Input----- 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 -----Example Output----- 80 64 -----Explanation----- Example case 1: The optimal route for Alice is 0 -> 1 -> 3 -> 2 -> 0 with a total distance of 80. Example case 2: The optimal route for Alice is 0 -> 2 -> 1 -> 0 with a total distance of 64.","solution":"from itertools import permutations def get_minimum_distance(dist): N = len(dist) min_distance = float(\'inf\') cities = list(range(1, N)) for perm in permutations(cities): current_distance = dist[0][perm[0]] + dist[perm[-1]][0] for i in range(len(perm) - 1): current_distance += dist[perm[i]][perm[i+1]] min_distance = min(min_distance, current_distance) return min_distance def solve_trip(problem_input): results = [] problem_iter = iter(problem_input.split()) T = int(next(problem_iter)) for _ in range(T): N = int(next(problem_iter)) dist = [] for _ in range(N): row = list(map(int, (next(problem_iter) for _ in range(N)))) dist.append(row) results.append(get_minimum_distance(dist)) for result in results: print(result)"},{"question":"A delivery robot is transporting packages in a factory with an obstacle grid. The factory grid is represented by a 2D array where: - The value `0` represents an empty cell the robot can pass through. - The value `1` represents an obstacle that the robot cannot pass through. The robot starts at the top-left corner (0,0) and needs to reach the bottom-right corner (m-1,n-1). The robot can only move up, down, left, or right, one step at a time. Write a function to determine the minimum number of steps required for the robot to reach the bottom-right corner. If it is not possible to reach the target cell, return `-1`. -----Input----- The input consists of two parameters: 1. A 2D integer array `grid` of size `m x n` where `m, n >= 1` and each element is `0` or `1`. -----Output----- Return an integer indicating the minimum number of steps required to move from the top-left to the bottom-right, or `-1` if no such path exists. -----Example----- Input [ [0, 0, 0], [0, 1, 0], [0, 1, 0] ] Output 4 -----Note----- In the provided example, the shortest path from the top-left corner to the bottom-right corner has 4 steps: Right -> Down -> Down -> Right. If any of the grid is filled with obstacles which results in no possible path between start and end position, the output should be -1.","solution":"from collections import deque def min_steps_to_reach_target(grid): Determine the minimum number of steps to move from the top-left corner to the bottom-right corner in a grid. Return -1 if there is no path. Parameters: grid (list of list of int): The obstacle grid (m x n). Returns: int: Minimum number of steps or -1 if no path exists. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == m - 1 and y == n - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1"},{"question":"You are given two strings s1 and s2. Your task is to determine if you can form s2 using some of the characters (including duplicates) from s1. If it\'s possible, return \\"Yes\\". Otherwise, return \\"No\\". Example 1: Input: s1 = \\"aabbcc\\", s2 = \\"abc\\" Output: \\"Yes\\" Explanation: We can form \\"abc\\" from the characters \'a\', \'b\', and \'c\' of s1. Example 2: Input: s1 = \\"aabbcc\\", s2 = \\"abcd\\" Output: \\"No\\" Explanation: We do not have character \'d\' in s1 to form s2. Example 3: Input: s1 = \\"abc\\", s2 = \\"aabbcc\\" Output: \\"No\\" Explanation: We do not have enough characters to match the double occurrences of each character in s2. Note: The length of s1 and s2 will be in the range [1, 100].","solution":"def can_form(s1, s2): Determine if you can form s2 using some of the characters from s1. Args: s1 (str): The source string. s2 (str): The target string. Returns: str: \\"Yes\\" if s2 can be formed from s1, otherwise \\"No\\". from collections import Counter count_s1 = Counter(s1) count_s2 = Counter(s2) for char in count_s2: if count_s2[char] > count_s1.get(char, 0): return \\"No\\" return \\"Yes\\""},{"question":"You are given an array of integers. Your task is to create a function that moves all the even integers to the beginning of the array, followed by all the odd integers, while preserving the relative order of the even and odd integers. For example: ```python move_evens_to_front([3, 1, 2, 4]) => [2, 4, 3, 1] move_evens_to_front([3, 1, 7]) => [3, 1, 7] # no even integers, order remains the same move_evens_to_front([8, 5, 6, 4]) => [8, 6, 4, 5] ``` More examples in test cases. Good luck! Additional Considerations: - Your function should run in O(n) time complexity. - Avoid using additional data structures if possible to maintain space complexity of O(1).","solution":"def move_evens_to_front(arr): Moves all even integers to the beginning of the array, followed by all the odd integers, while preserving the relative order of the even and odd integers. Args: arr (list): List of integers Returns: list: A list where all even integers are at the beginning followed by all odd integers evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Given an array of integers, find the highest product you can get from three of the integers. ```python highest_product_of_three([1, 10, 2, 6, 5, 3]) == 300 highest_product_of_three([-10, -10, 1, 3, 2]) == 300 ``` Note: The array will always have at least three integers. Focus on achieving an optimal time complexity solution.","solution":"def highest_product_of_three(nums): Given an array of integers, find the highest product you can get from three of the integers. # Minimum and maximum values initializing min1 = float(\'inf\') min2 = float(\'inf\') max1 = float(\'-inf\') max2 = float(\'-inf\') max3 = float(\'-inf\') for num in nums: if num > max1: max3, max2, max1 = max2, max1, num elif num > max2: max3, max2 = max2, num elif num > max3: max3 = num if num < min1: min2, min1 = min1, num elif num < min2: min2 = num return max(min1 * min2 * max1, max1 * max2 * max3)"},{"question":"Both Alice and Bob are passionate about number theory and enjoy playing games that involve numbers. Recently, they started playing a new game involving prime numbers and lists of integers. In the game, they are given a list of n integers. Alice and Bob take turns, starting with Alice, to choose any integer from the list and replace it with any prime number of their choice. The chosen prime number must be greater than the integer being replaced. The game ends when it is impossible to replace any integer in the list with a prime number greater than itself. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Alice wants the final product of all numbers in the list to be as small as possible, while Bob wants the product to be as large as possible. Both players play optimally. Given the initial list of integers, what will be the final product of the numbers in the list if both Alice and Bob play optimally? -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 10^5), denoting the length of the list. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), the initial list of integers. -----Output----- Print a single integer, which is the final product of all numbers in the list after Alice and Bob have played optimally. Print the answer modulo 10^9 + 7. -----Examples----- Input 3 4 6 8 Output 60 Input 2 10 5 Output 143 Input 1 2 Output 3 -----Note----- In the first example, the initial list of integers is [4, 6, 8]. Alice replaces 4 with 5 (since 5 is the smallest prime greater than 4). The list becomes [5, 6, 8]. Bob replaces 6 with 7 (since 7 is the smallest prime greater than 6). The list becomes [5, 7, 8]. Alice replaces 8 with 11 (since 11 is the smallest prime greater than 8). The list becomes [5, 7, 11]. The final product is 5 * 7 * 11 = 385. The output should be 60 % (10^9 + 7) = 60. In the second example, the initial list of integers is [10, 5]. Alice replaces 10 with 11. The list becomes [11, 5]. Bob replaces 5 with 7. The list becomes [11, 7]. The final product is 11 * 7 = 77. The output should be 143 % (10^9 + 7) = 143.","solution":"def sieve_eratosthenes(max_number): Returns a list of primes less than or equal to max_number using the Sieve of Eratosthenes algorithm. is_prime = [True] * (max_number + 1) p = 2 while (p * p <= max_number): if is_prime[p]: for i in range(p * p, max_number + 1, p): is_prime[i] = False p += 1 prime_list = [p for p in range(2, max_number + 1) if is_prime[p]] return prime_list def find_next_prime(primes, num): Finds the smallest prime greater than \'num\' using binary search. left, right = 0, len(primes) - 1 while left <= right: mid = (left + right) // 2 if primes[mid] > num: right = mid - 1 else: left = mid + 1 return primes[left] def game_final_product(n, nums): primes = sieve_eratosthenes(10**6 + 100) # We\'ll consider a bit beyond 10^6 nums.sort() MOD = 10**9 + 7 product = 1 for i, num in enumerate(nums): next_prime = find_next_prime(primes, num) product *= next_prime product %= MOD return product"},{"question":"Given a string containing a list of integers separated by commas, write a function that will return a string with each integer incremented by 1, separated by commas in their original order. For example: ``` \\"1,2,3,4,5\\" --> \\"2,3,4,5,6\\" \\"10,20,30\\" --> \\"11,21,31\\" \\"0,0,0\\" --> \\"1,1,1\\" ``` The function should handle cases where the input string might be empty. If the input string is empty, the function should return an empty string. ``` \\"\\" --> \\"\\" ``` Input: - A string containing integers separated by commas (may be empty). Output: - A new string where each integer is incremented by 1, maintaining their original order, separated by commas. If the input string is empty, the output should also be an empty string. Feel free to get creative! :)","solution":"def increment_numbers(input_str): Given a string of comma-separated integers, increments each integer by 1 and returns the result as a comma-separated string. For an empty input string, returns an empty string. if not input_str: return \\"\\" numbers = input_str.split(\',\') incremented_numbers = [str(int(num) + 1) for num in numbers] return \',\'.join(incremented_numbers)"},{"question":"Write a function that rearranges an integer array in such a way that all even numbers appear before all the odd numbers while maintaining their original relative order. Your function should take a list of integers as input and return a new list with the integers rearranged as specified. For example, given the input list `[3, 8, 5, 13, 6, 12, 7, 4]`, the function should return `[8, 6, 12, 4, 3, 5, 13, 7]`. # Task Your task is to implement a function called `rearrange_even_odd` that accepts a list of integers `lst` as input and returns a new list with all even numbers positioned before all odd numbers while maintaining their original relative order. **Function Signature:** ```python def rearrange_even_odd(lst: List[int]) -> List[int]: pass ``` **Example:** ```python assert rearrange_even_odd([3, 8, 5, 13, 6, 12, 7, 4]) == [8, 6, 12, 4, 3, 5, 13, 7] assert rearrange_even_odd([1, 2, 3, 4, 5]) == [2, 4, 1, 3, 5] ``` # Constraints: - The input list `lst` will have at most 100 elements. - Each element in the input list will be a non-negative integer.","solution":"from typing import List def rearrange_even_odd(lst: List[int]) -> List[int]: This function rearranges the integer list such that all even numbers appear before all the odd numbers while maintaining their original relative order. evens = [num for num in lst if num % 2 == 0] odds = [num for num in lst if num % 2 != 0] return evens + odds"},{"question":"Given a binary search tree (BST) rooted at root, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree. Example 1: Input: root = [3,1,4,null,2], k = 1 Output: 1 Example 2: Input: root = [5,3,6,2,4,null,null,1], k = 3 Output: 3 Example 3: Input: root = [2,1,3], k = 2 Output: 2 Constraints: - The number of nodes in the BST is between 1 and 10^4. - The value of each node is between 1 and 10^4. - 1 <= k <= number of nodes in the BST.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kth_smallest(root, k): Returns the kth smallest value in a BST. stack = [] current = root while True: while current: stack.append(current) current = current.left current = stack.pop() k -= 1 if k == 0: return current.val current = current.right"},{"question":"Given a positive integer `n`, find the sum of all even Fibonacci numbers that are less than or equal to `n`. The Fibonacci sequence is defined as follows: - The first two Fibonacci numbers are 0 and 1. - Every subsequent Fibonacci number is the sum of the previous two. Your task is to return the sum of all even Fibonacci numbers that are less than or equal to `n`. Examples ``` sumEvenFibonacci(10) ==> 10 Fibonacci numbers: 0, 1, 1, 2, 3, 5, 8 Even Fibonacci numbers <= 10: 0, 2, 8 Sum: 2 + 8 = 10 sumEvenFibonacci(34) ==> 44 Fibonacci numbers: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 Even Fibonacci numbers <= 34: 0, 2, 8, 34 Sum: 2 + 8 + 34 = 44 ```","solution":"def sumEvenFibonacci(n): Returns the sum of all even Fibonacci numbers that are less than or equal to n. a, b = 0, 1 even_sum = 0 while a <= n: if a % 2 == 0: even_sum += a a, b = b, a + b return even_sum"},{"question":"Create a function that generates the sum of all prime numbers up to and including a given number `n`. The prime numbers are numbers that have only two divisors: 1 and themselves. The input number `n` will be a positive integer (n >= 2). Your task is to write a function called `sum_primes` that takes an integer `n` and returns the sum of all prime numbers less than or equal to `n`. For example, if the input is 10, the prime numbers up to 10 are 2, 3, 5, and 7. Their sum is 17. Therefore, `sum_primes(10)` should return 17. Function Signature: ```python def sum_primes(n: int) -> int: ``` Example: ```python sum_primes(10) # should return 17 sum_primes(1) # should return 0 sum_primes(2) # should return 2 sum_primes(5) # should return 10 ``` Constraints: - The function must handle values of `n` up to 10^6 efficiently. - Do not use any built-in prime number generation functions. - Any algorithm with an exponential time complexity is discouraged. An optimized approach is preferred.","solution":"def sum_primes(n: int) -> int: Returns the sum of all prime numbers less than or equal to n. if n < 2: return 0 # Sieve of Eratosthenes to find all prime numbers up to n primes = [True] * (n + 1) primes[0], primes[1] = False, False p = 2 while (p * p <= n): if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 # Sum all primes return sum(i for i in range(n + 1) if primes[i]) # Example usage print(sum_primes(10)) # Output: 17"},{"question":"You are given a string representing an encoded message consisting of numbers. Each number represents a letter in the alphabet where A = 1, B = 2, ..., Z = 26. Your task is to decode the message and determine the total number of possible valid decodings. -----Input----- You will be given an integer t(1<=t<=20) representing the number of test cases. A new line follows; after which the t test cases are given. Each test case starts with a blank line followed by a string s (1<=|s|<=100), which represents the encoded message. The string will only contain digits and will not be empty. -----Output----- For each test case, print the total number of possible valid decodings. The result for each test case must be on a new line. -----Example----- Input: 3 12 226 06 Output: 2 3 0 For the first test case: \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Thus, the total number of possible valid decodings is 2. For the second test case: \\"226\\" can be decoded as \\"BBF\\" (2 2 6), \\"BZ\\" (2 26), or \\"VF\\" (22 6). Thus, the total number of possible valid decodings is 3. For the third test case: \\"06\\" cannot be decoded into any valid letters as there is no letter corresponding to \\"0\\". Thus, the total number of possible valid decodings is 0.","solution":"def num_decodings(s): if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 if s[0] != \'0\' else 0 for i in range(2, n + 1): one_digit = int(s[i - 1:i]) two_digits = int(s[i - 2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i - 1] if 10 <= two_digits <= 26: dp[i] += dp[i - 2] return dp[n] def decode_messages(t, cases): results = [] for case in cases: results.append(num_decodings(case)) return results"},{"question":"Write a function that takes a string consisting of lowercase letters and digits and returns the same string with the letters and digits sorted separately but retains their original positions. For example, given the input string \\"a1c3b2\\", the function should return \\"a1b2c3\\". If there are no digits or letters in the string, return the string as is.","solution":"def sort_letters_and_digits(s): Takes a string consisting of lowercase letters and digits and returns the same string with the letters and digits sorted separately but retains their original positions. letters = sorted([c for c in s if c.isalpha()]) digits = sorted([c for c in s if c.isdigit()]) letter_index = 0 digit_index = 0 result = [] for c in s: if c.isalpha(): result.append(letters[letter_index]) letter_index += 1 elif c.isdigit(): result.append(digits[digit_index]) digit_index += 1 else: result.append(c) return \'\'.join(result)"},{"question":"Given an array of integers, move all instances of a target value to the end of the array while preserving the relative order of the other elements. Do not use any extra space; modify the array in-place and return it. For example, given the array `[4, 2, 4, 1, 4, 3, 4]` with the target value `4`, the desired output is `[2, 1, 3, 4, 4, 4, 4]`. Your task is to create a function \\"moveTargetToEnd()\\" that takes in an array and a target value as its arguments, manipulates the array as described above, then return the modified array.","solution":"def moveTargetToEnd(arr, target): Moves all instances of target to the end of the array while preserving the relative order of other elements. Modifies the array in-place. :param arr: List[int] - The input array :param target: int - The target value to move to the end :return: List[int] - The modified array insert_position = 0 for i in range(len(arr)): if arr[i] != target: arr[insert_position] = arr[i] insert_position += 1 for i in range(insert_position, len(arr)): arr[i] = target return arr"},{"question":"In a country called CodeLand, there are N houses arranged in a straight line with different distances between them. For security reasons, each house has to be connected to its immediate neighbors by a direct communication link (i.e., a wire). The minister of communications requires a plan that uses the minimum length of wire to connect all houses into one single communication network. The total length of wire required to connect two adjacent houses is equal to the distance between those houses. Write a program that determines the minimum total length of wire required to connect all houses. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of houses. - The second line of each test case contains N space-separated integers where the i-th integer represents the distance of the i-th house from the starting point (in meters). -----Output----- - For each test case, output a single line containing the minimum total length of wire required to connect all the houses. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 10^5 - 0 ≤ distances of houses ≤ 10^9 -----Subtasks----- Subtask #1 : (30 points) - 2 ≤ N ≤ 100 Subtask #2 : (70 points) - 2 ≤ N ≤ 10^5 -----Example----- Input: 2 3 1 4 8 4 2 3 6 8 Output: 7 6 -----Explanation----- Example case 1. The distances between the houses are [1, 4, 8]. The minimum lengths of wire required to connect the houses are: - Between house 1 and house 2: |4 - 1| = 3 meters, - Between house 2 and house 3: |8 - 4| = 4 meters. Hence, the total minimum length of wire required is 3 + 4 = 7 meters. Example case 2. The distances between the houses are [2, 3, 6, 8]. The minimum lengths of wire required to connect the houses are: - Between house 1 and house 2: |3 - 2| = 1 meters, - Between house 2 and house 3: |6 - 3| = 3 meters, - Between house 3 and house 4: |8 - 6| = 2 meters. Hence, the total minimum length of wire required is 1 + 3 + 2 = 6 meters.","solution":"def minimum_wire_length(test_cases): results = [] for case in test_cases: N, distances = case distances = sorted(distances) min_length = sum(abs(distances[i] - distances[i-1]) for i in range(1, N)) results.append(min_length) return results"},{"question":"Given a string `s`, determine if it is a valid palindrome when considering only alphanumeric characters and ignoring cases. Return `True` if the string is a palindrome and `False` otherwise. Input - A single string `s` containing up to 1000 characters. Output - Return a boolean value, `True` if the input string is a palindrome, otherwise `False`. Example ```python is_valid_palindrome(\\"A man, a plan, a canal, Panama\\") # should return True is_valid_palindrome(\\"race a car\\") # should return False ``` Hint: You may use a two-pointer technique to compare characters from both ends of the string towards the center.","solution":"def is_valid_palindrome(s): Determines if a string is a valid palindrome considering only alphanumeric characters and ignoring cases. Parameters: s (str): The input string. Returns: bool: True if the input string is a palindrome, otherwise False. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Compare the list with its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Given an integer array `nums` of length `n`, find all possible subsets (the power set). Note: The solution set must not contain duplicate subsets. Example: Input: nums = [1,2,3] Output: [ [], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3] ] Explanation: The set of all possible subsets is: - The empty subset [] - Subsets with individual elements: [1], [2], [3] - Subsets with two elements: [1,2], [1,3], [2,3] - The subset with all three elements: [1,2,3]","solution":"from typing import List def subsets(nums: List[int]) -> List[List[int]]: Given an integer array nums, returns all possible subsets (the power set). result = [] n = len(nums) def backtrack(start, path): result.append(path) for i in range(start, n): backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return result"},{"question":"You are given a list of non-negative integers representing the heights of bars in a histogram. Each bar width is 1. Find the largest rectangular area that can be formed in the histogram. Example 1: Input: [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle has an area of 10 units. Example 2: Input: [2,4] Output: 4 Explanation: The largest rectangle has an area of 4 units. Note: - The length of the histogram list is at most 10000. - Each height of the histogram is at most 10000.","solution":"def largestRectangleArea(heights): Calculate the largest rectangle area in a histogram represented by heights. Arguments: heights -- list of non-negative integers Returns: The largest rectangular area that can be formed in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): # If stack is empty or current bar is taller than the stack\'s bar if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) # Clean up the stack while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function `remove_duplicates` that takes in a list of integers and returns a new list with duplicate elements removed. The elements in the returned list should be in the same order as their first occurrence in the original list. Example: ``` remove_duplicates([1, 2, 3, 1, 2, 4, 5]) => [1, 2, 3, 4, 5] remove_duplicates([7, 7, 3, 5, 3, 2]) => [7, 3, 5, 2] ``` Constraints: - The input list will have at most 1000 elements. - Elements of the list are integers ranging from -1000 to 1000 (inclusive). If you complete this kata and there are no issues, please remember to give it a ready vote and a difficulty rating. :)","solution":"def remove_duplicates(lst): Given a list of integers, returns a new list with duplicate elements removed. The elements in the returned list should be in the same order as their first occurrence in the original list. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Alice is a passionate gardener and she loves creating beautiful flower arrangements. Recently, she started working on a special type of arrangement involving vase placement. Alice calls a sequence of non-empty integers b a vase sequence if the sum of every consecutive pair of elements within the sequence is even. For example, the sequence [2, 4, 6] is a vase sequence, as the sums 2+4=6 and 4+6=10 are both even, while [3, 5, 7] is not a vase sequence since 3+5=8 is even, but 5+7=12 is not. Alice is aiming to create a garden where the placement of vases follows the vase sequence rule. Given an integer n, Alice wants to arrange n vases according to the vase sequence rule. Given a positive integer n, output any vase sequence of length n. We can show that for the given constraints such a sequence always exists. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first and only line of every test case contains a single integer n (1 le n le 100). -----Output----- For every test, output any vase sequence of length n on a separate line. -----Example----- Input 3 1 2 3 Output 1 2 4 2 4 6 -----Note----- Sequence [2, 4] is a vase sequence as all pairs of its consecutive elements 2+4=6 have sums divisible by 2, and therefore fulfill the vase sequence rule. Sequence [2, 4, 6] is again a vase sequence since 2+4=6 and 4+6=10 are even as required by the rule.","solution":"def vase_sequence(n): Returns a vase sequence of length n. A vase sequence is defined as a sequence of non-empty integers such that the sum of every consecutive pair of elements within the sequence is even. # We can simply generate a sequence of even numbers starting from 2 return [2 * i for i in range(1, n + 1)]"},{"question":"A social network has **N** users. Each user has a unique identifier, ranging from 1 to N. The social network can record friendships between pairs of users in the form of bidirectional relationships. An influencer is defined as a user who has the maximum number of friends. If there are multiple users with the same maximum number of friends, the user with the smallest identifier is considered the influencer. Given the list of friendships, determine the identifier of the influencer. -----Input----- The first line of the input contains an integer **N** (1 ≤ N ≤ 100) — the number of users. The second line contains an integer **M** (0 ≤ M ≤ N*(N-1)/2) — the number of friendships. Each of the next **M** lines contains two integers **u** and **v** (1 ≤ u, v ≤ N), representing a bidirectional friendship between user **u** and user **v**. -----Output----- Print a single integer — the identifier of the influencer. -----Example----- Input 4 3 1 2 2 3 3 4 Output 2 -----Note----- In this example, user 2 is friends with users 1 and 3, user 3 is friends with users 2 and 4. Both users 2 and 3 have 2 friends, but user 2 has the smallest identifier among them, thus user 2 is the influencer.","solution":"def find_influencer(N, M, friendships): friend_count = [0] * (N + 1) # Populate the friend_count list for u, v in friendships: friend_count[u] += 1 friend_count[v] += 1 # Determine the influencer: user with the maximum number of friends # and smallest identifier in case of ties. max_friends = -1 influencer = -1 for user_id in range(1, N + 1): if friend_count[user_id] > max_friends or (friend_count[user_id] == max_friends and user_id < influencer): max_friends = friend_count[user_id] influencer = user_id return influencer"},{"question":"Write a function that takes a list of tuples representing students\' names and their scores in an exam and returns the name of the student with the highest score. If there is a tie, return the name of the student that appears first in the list. * Input must be a list of tuples. * Each tuple contains two elements: * The first element is the name of the student as a string. * The second element is the score as an integer. * The function returns the name of the student with the highest score. * If the input list is empty, the function should return an empty string. Input example: ```python [(\\"John\\", 85), (\\"Alice\\", 92), (\\"Bob\\", 92), (\\"Charlie\\", 78)] ``` Returns: ```python \\"Alice\\" ```","solution":"def get_top_student(students_scores): Returns the name of the student with the highest score. If there is a tie, returns the name of the student that appears first in the list. If the input list is empty, returns an empty string. Parameters: students_scores (list): A list of tuples where each tuple contains a student\'s name and their score. Returns: str: The name of the student with the highest score. if not students_scores: return \\"\\" # Using max with a key to find the tuple with the highest score top_student = max(students_scores, key=lambda student: student[1]) return top_student[0]"},{"question":"Given an N x N grid of cells, each cell has an initial integer value. You are allowed to perform the following operation as many times as you wish (possibly zero or more): select any cell in the grid and increase its value by 1. Your goal is to make all the rows and all the columns \\"equivalent.\\" Two rows (or two columns) are considered \\"equivalent\\" if every cell in one row (or column) is equal to the corresponding cell in the other row (or column). Find the minimum number of operations required to achieve this goal. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follow. First line of each test case contains an integer N denoting the dimensions of the grid. Next N lines of each test case contain N space-separated integers corresponding to the initial values of the cells in the grid. -----Output----- For each test case, output a single integer corresponding to the minimum number of operations required to make all rows and columns equivalent. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 0 ≤ Grid(i, j) ≤ 10^9 -----Subtasks----- - Subtask #1 (50 points) : 1 ≤ N ≤ 50 - Subtask #2 (50 points) : original constraints -----Example----- Input: 2 2 1 2 3 4 3 1 1 1 1 1 1 1 1 1 Output: 6 0 -----Explanation----- Example case 1. You can make all rows and columns equivalent by increasing values of cells to make all cells equal to 4. You need to perform 6 operations in total: increase (1,1) by 3, increase (1,2) by 2, and increase (2,1) by 1. Example case 2. All cells are already equal, so no operations are needed.","solution":"def min_operations_to_equivalent_grid(test_cases): results = [] for case in test_cases: N = case[\'N\'] grid = case[\'grid\'] max_val = max(map(max, grid)) operations = 0 for i in range(N): for j in range(N): operations += max_val - grid[i][j] results.append(operations) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) grid = [] for i in range(N): grid.append(list(map(int, lines[idx + 1 + i].split()))) test_cases.append({\'N\': N, \'grid\': grid}) idx += 1 + N return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"Write a function `balanceParentheses(s)` that takes a string `s` consisting solely of opening and closing parentheses. The function should return true if the string represents a balanced sequence of parentheses (i.e., every opening parenthesis has a corresponding closing parenthesis in the correct order) and false otherwise. **Examples:** ```python balanceParentheses(\\"()()\\") -> True balanceParentheses(\\"(()\\") -> False balanceParentheses(\\"(())\\") -> True balanceParentheses(\\")(\\") -> False ```","solution":"def balanceParentheses(s): Returns true if the string s is a balanced sequence of parentheses, false otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Given a list of intervals, merge all overlapping intervals and return a list of the merged intervals in ascending order. Example 1: Input: intervals = [[1,3], [2,6], [8,10], [15,18]] Output: [[1,6], [8,10], [15,18]] Example 2: Input: intervals = [[1,4], [4,5]] Output: [[1,5]] Constraints: - intervals[i].length == 2 - 0 <= intervals.length <= 10^4 - 0 <= intervals[i][0] <= intervals[i][1] <= 10^4","solution":"def merge_intervals(intervals): if not intervals: return [] # First, we sort the list of intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for i in range(1, len(intervals)): prev_start, prev_end = merged[-1] current_start, current_end = intervals[i] # if the current interval overlaps with the last merged interval if current_start <= prev_end: # merge the intervals by updating the end time merged[-1] = [prev_start, max(prev_end, current_end)] else: # if it doesn\'t overlap, add it to the merged list merged.append(intervals[i]) return merged"},{"question":"___ # Check Palindrome Permutation A **Palindrome** is a string that reads the same backward as forward, e.g., \\"racecar\\", \\"madam\\". One interesting property of a palindrome is that the counts of the characters are symmetric. A **Palindrome Permutation** is a permutation of a string that can form a palindrome. For example, the string \\"aabb\\" can be rearranged to form \\"abba\\", which is a palindrome. # Task **_Given_** a *string* `s`, return `true` if any permutation of the string is a palindrome, otherwise return `false`. # Notes * The input string contains only lowercase English letters (a-z). * String length (1 ≤ length of s ≤ 10^5). # Input >> Output Examples: ___ ___ # Example 1: * `s` = \\"code\\" * return `false` because no permutation of \\"code\\" can form a palindrome. ___ ___ # Example 2: * `s` = \\"aab\\" * return `true` because one permutation of \\"aab\\" could be \\"aba\\" which is a palindrome. ___ ___ # Example 3: * `s` = \\"carerac\\" * return `true` because one permutation of \\"carerac\\" could be \\"racecar\\" which is a palindrome. ___ # Hints: * The counts of the characters must be analyzed to determine if the string can form a palindrome. * A string can form a palindrome if at most one character has an odd count. Happy Coding!","solution":"def can_permute_palindrome(s): Returns True if any permutation of the string s can form a palindrome, otherwise returns False. # Count the occurrence of each character in the string char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Check the number of characters that have odd counts odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # At most one character should have an odd count for the string to be a palindrome permutation return odd_count <= 1"},{"question":"Write a function called `circular_shift` which takes in two parameters: a list of integers `lst` and an integer `shifts`. The function should return a new list where each element of the input list `lst` is circularly shifted to the right by the number of positions specified by `shifts`. If `shifts` is negative, the elements should be shifted to the left. Note that the number of shifts can be greater than the length of the list. Here are a few examples: ``` circular_shift([1, 2, 3, 4, 5], 2) = [4, 5, 1, 2, 3] circular_shift([1, 2, 3, 4, 5], -2) = [3, 4, 5, 1, 2] circular_shift([1, 2, 3, 4, 5], 7) = [4, 5, 1, 2, 3] circular_shift([1, 2, 3, 4, 5], -7) = [3, 4, 5, 1, 2] ```","solution":"def circular_shift(lst, shifts): Returns a new list where each element of the input list lst is circularly shifted to the right by the number of positions specified by shifts. If shifts is negative, the elements should be shifted to the left. :param lst: List of integers to be shifted :param shifts: Number of positions to shift the list :return: Circularly shifted list n = len(lst) if n == 0: return lst shifts = shifts % n # Normalize shifts to be within the bounds of the list length return lst[-shifts:] + lst[:-shifts]"},{"question":"You are given a binary tree with n nodes where each node contains an integer value. Your task is to determine if there exists a path from the root node to any leaf node such that the sum of the values of the nodes along this path equals a given target sum. A path is defined as a sequence of nodes from the root node to any leaf node (a leaf node is a node with no children). You will be given multiple independent queries to answer. -----Input----- The first line contains a single integer t (1 le t le 10^5) — the number of queries. For each query, the first line contains two integers n (1 le n le 1000) — the number of nodes in the binary tree and target (-10^4 le target le 10^4) — the target sum. Each of the following n - 1 lines contains three integers p_i, c_i, v_c (1 le p_i le n, 1 le c_i le n, -10^4 le v_c le 10^4) representing a directed edge from parent p_i to child c_i and the value of child node c_i. The value of the root node will be provided in the form of a line containing a single integer v_r (-10^4 le v_r le 10^4), which precedes the query description. Note that there are no duplicate edges, and it is guaranteed that the provided set of edges will always form a valid binary tree. -----Output----- For each query, print \\"YES\\" if there exists a path from the root to any leaf such that the sum of the values of the nodes along this path equals the target sum. Otherwise, print \\"NO\\". -----Example----- Input 2 5 8 3 1 2 3 1 3 4 3 4 1 3 5 2 7 7 1 1 2 2 1 3 3 2 4 -1 2 5 -1 3 6 2 3 7 1 Output YES NO -----Note----- In the first query, the root node has a value of 3, and the binary tree is structured as follows: 3 / 3 4 / 1 2 There is a path from the root to leaf (3 -> 4 -> 1) that sums to 8, so the answer is \\"YES\\". In the second query, the root node has a value of 1, and the binary tree is structured as follows: 1 / 2 3 / / -1 -1 2 1 There is no path from the root to leaf that sums to 7, so the answer is \\"NO\\".","solution":"def has_path_sum(n, target, root_val, edges): from collections import defaultdict def dfs(node, curr_sum): if not node in tree: return curr_sum == target for child, child_val in tree[node]: if dfs(child, curr_sum + child_val): return True return False tree = defaultdict(list) for p, c, v in edges: tree[p].append((c, v)) return dfs(1, root_val) def process_queries(queries): results = [] for query in queries: n, target, root_val, edges = query[\'n\'], query[\'target\'], query[\'root_val\'], query[\'edges\'] if has_path_sum(n, target, root_val, edges): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to parse the input def parse_input(input_string): data = input_string.strip().split(\'n\') idx = 0 t = int(data[idx]) idx += 1 queries = [] for _ in range(t): n, target = map(int, data[idx].split()) idx += 1 root_val = int(data[idx]) idx += 1 edges = [] for _ in range(n - 1): p, c, v = map(int, data[idx].split()) idx += 1 edges.append((p, c, v)) queries.append({\'n\': n, \'target\': target, \'root_val\': root_val, \'edges\': edges}) return queries # Sample usage input_string = \\"2n5 8n3n1 2 3n1 3 4n3 4 1n3 5 2n7 7n1n1 2 2n1 3 3n2 4 -1n2 5 -1n3 6 2n3 7 1\\" queries = parse_input(input_string) results = process_queries(queries) for result in results: print(result)"},{"question":"A company wants to analyze and categorize its quarterly revenue data based on regions and products. The data given is in the form of a list of strings, where each string represents the revenue for a product in a specific region during a particular quarter. The format of each string is \\"Product:Region:Quarter:Revenue\\", where: - `Product` is the name of the product (Example: \\"Widget\\", \\"Gadget\\", etc.) - `Region` is the name of the region (Example: \\"North America\\", \\"Europe\\", etc.) - `Quarter` is the quarter in \\"Q1\\", \\"Q2\\", \\"Q3\\", or \\"Q4\\" - `Revenue` is the revenue in that quarter (an integer) The objective is to process this data to calculate the total revenue for each product across all regions and quarters. Input The input for your function will be an array of strings formatted as described above. An example of an input array would be: ``` [\\"Widget:North America:Q1:10000\\", \\"Gadget:Europe:Q2:15000\\", \\"Widget:Europe:Q3:20000\\", \\"Gadget:North America:Q1:12000\\", \\"Widget:Asia:Q4:30000\\", \\"Gadget:Asia:Q1:9000\\"] ``` Processing 1. Extract and categorize the revenue data. 2. Sum up the total revenue for each product across all regions and quarters. Output The function should return an array where each element is a string representing the total revenue for a product in the format \\"Product:TotalRevenue\\". The results should be sorted by product names in alphabetical order. An example of the output array based on the example input would be: ``` [\\"Gadget:36000\\", \\"Widget:60000\\"] ``` # Special Note If any string in the list is found to contain an invalid format (e.g., missing \':\' separators, non-integer revenue, etc.), return a single string element in the array: `\\"Invalid data\\"`. Note: An empty input array should return an empty array.","solution":"def calculate_total_revenue(data): Calculate the total revenue for each product given the revenue data in specified format. :param data: List of strings, each representing revenue data in the format \\"Product:Region:Quarter:Revenue\\". :return: List of strings representing total revenue for each product in format \\"Product:TotalRevenue\\", sorted alphabetically by product name. if not data: return [] revenue_dict = {} for record in data: parts = record.split(\\":\\") if len(parts) != 4: return [\\"Invalid data\\"] product, region, quarter, revenue = parts try: revenue = int(revenue) except ValueError: return [\\"Invalid data\\"] if product not in revenue_dict: revenue_dict[product] = 0 revenue_dict[product] += revenue result = [] for product in sorted(revenue_dict.keys()): result.append(f\\"{product}:{revenue_dict[product]}\\") return result"},{"question":"Write a function `smallest_missing_positive` that takes an array of integers and returns the smallest positive integer (greater than 0) that does not appear in the array. The function should have a time complexity of O(n) and a space complexity of O(1). For example: ``` smallest_missing_positive([1, 2, 0]) should return 3 smallest_missing_positive([3, 4, -1, 1]) should return 2 smallest_missing_positive([7, 8, 9, 11, 12]) should return 1 ```","solution":"def smallest_missing_positive(nums): Returns the smallest positive integer (greater than 0) that does not appear in the array. n = len(nums) # Move each value to the corresponding position of its value for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first location where the index doesn\'t match the value for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function that takes a nested dictionary representing a hierarchical structure and flattens it into a single-level dictionary with concatenated keys. The keys should be concatenated based on their hierarchical position separated by a period (`.`). For example, given the input: ```python { \'a\': { \'b\': { \'c\': 1 }, \'d\': 2 }, \'e\': 3 } ``` The function should return: ```python { \'a.b.c\': 1, \'a.d\': 2, \'e\': 3 } ``` Overall, any nested dictionary should be flattened in such a fashion that the resultant dictionary has no nested dictionaries and the keys represent the full path with each level separated by a period.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary by concatenating keys based on their hierarchical position. Args: - d (dict): The dictionary to flatten. - parent_key (str): The base key to prepend to each key (used during recursion). - sep (str): The separator between concatenated keys. Returns: - dict: A flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Given an integer `n`, write a function `maxFlips` that returns the maximum number of coin flips (heads to tails or tails to heads) to make all consecutive coin faces either heads or tails in a binary string. The binary string consists of only \'0\' (heads) and \'1\' (tails). For example, given the input: ``` \\"0001100\\" ``` Your function should return `1` because you only need to flip the middle segment \\"11\\" once to get all 0s: \\"0000000\\". Another example, given the input: ``` \\"00110011\\" ``` Your function should return `3` because you can flip the following three segments once each: 1. Flip \\"11\\" to get \\"00000011\\" 2. Flip \\"11\\" to get \\"00000001\\" 3. Flip \\"1\\" to get \\"00000000\\" The function signature should look like: ``` def maxFlips(binary_string: str) -> int: ``` **Constraints:** - `binary_string` will contain only characters \'0\' and \'1\'. - The length of `binary_string` will be at least 1 and at most 10^5.","solution":"def maxFlips(binary_string: str) -> int: Returns the maximum number of coin flips to make all consecutive coin faces either heads (0) or tails (1). :param binary_string: A string consisting of \'0\' and \'1\'. :return: Maximum number of flips needed. if not binary_string: return 0 # Count the number of transitions from \'0\' to \'1\' and \'1\' to \'0\' flips = 0 for i in range(1, len(binary_string)): if binary_string[i] != binary_string[i - 1]: flips += 1 return flips"},{"question":"=====Function Descriptions===== String Manipulations Strings in a program can be manipulated using a variety of operations such as concatenation, splitting, and searching. Examples: Splitting a string The `split()` method splits a string into a list where each element is a substring based on a specified delimiter. >>> s = \\"apple,banana,orange\\" >>> s.split(\',\') [\'apple\', \'banana\', \'orange\'] Finding a substring The `find()` method returns the lowest index of the substring if it is found in a string. If it is not found, it returns -1. >>> s = \\"Hello world\\" >>> s.find(\\"world\\") 6 =====Problem Statement===== You are given a string and a substring. Your task is to determine the number of times the substring occurs in the given string. =====Input Format===== The first line contains a string. The second line contains the substring. =====Constraints===== 1 ≤ length of the string ≤ 1000 1 ≤ length of the substring ≤ 100 =====Output Format===== Print the number of occurrences of the substring in the given string.","solution":"def count_substring_occurrences(main_string, substring): Returns the number of times the substring occurs in the main string. Parameters: main_string (str): The main string to search within. substring (str): The substring to search for. Returns: int: The number of times the substring occurs in the main string. count = 0 start = 0 while True: start = main_string.find(substring, start) if start == -1: break count += 1 start += len(substring) return count"},{"question":"In an online survey platform, users can create surveys with multiple questions, and each question has a multiple-choice format. Each question has a varying number of choices, and each choice has a specific number of votes. You are tasked with analyzing the survey data to determine the most popular choices. Given the survey data, your goal is to identify the most popular choice for each question based on the number of votes. -----Input----- The first line of input will contain an integer n, the number of questions in the survey (1 ≤ n ≤ 1000). The following n blocks describe the questions: - The first line of each block contains an integer m_i, the number of choices for the i-th question (1 ≤ m_i ≤ 100). - The next m_i lines each contain two integers, c_ij and v_ij, where c_ij is the choice identifier (1 ≤ c_ij ≤ 1000), and v_ij is the number of votes that choice received (0 ≤ v_ij ≤ 10000). -----Output----- Print n lines. Each line should contain the choice identifier of the most popular choice for each question. If there are multiple choices with the same maximum number of votes, print the one with the smallest identifier. -----Examples----- Input 2 3 1 15 2 10 3 5 4 10 7 20 15 30 15 40 5 Output 1 20 Input 1 5 101 3 102 2 103 5 104 5 105 1 Output 103 -----Note----- In the first example, for the first question, choice 1 has the most votes (15), making it the most popular choice. For the second question, choices 20 and 30 both have 15 votes each, but since 20 is the smaller identifier, it is selected as the most popular choice. In the second example, choices 103 and 104 both have 5 votes each for the question, but choice 103 is chosen because it has the smaller identifier.","solution":"def most_popular_choices(n, survey_data): results = [] index = 0 for _ in range(n): m = survey_data[index] index += 1 max_votes = -1 best_choice = None for _ in range(m): choice_id, votes = survey_data[index] index += 1 if votes > max_votes or (votes == max_votes and choice_id < best_choice): max_votes = votes best_choice = choice_id results.append(best_choice) return results"},{"question":"You are given an array of integers representing heights of a series of buildings, where each building\'s height is recorded at different positions along a straight line. The array `heights` has a length of `n`. Your task is to find the maximum area of a rectangle formed by any two buildings and the ground. The two buildings and the ground form a container that holds the rectangle. The width of the rectangle is the distance between the two buildings, and the height of the rectangle is the shorter of the two buildings\' heights. Example 1: Input: heights = [1, 8, 6, 2, 5, 4, 8, 3, 7] Output: 49 Explanation: The maximum area is formed between the buildings at indices 1 and 8, which have heights 8 and 7 respectively. The width between these buildings is 7, so the area is 8 * 7 = 56. Example 2: Input: heights = [1, 1] Output: 1 Explanation: The only rectangle possible is formed between the two buildings with heights 1 and 1, with a width of 1. Thus, the area is 1 * 1 = 1. Constraints: - 2 <= heights.length <= 10^5 - 0 <= heights[i] <= 10^4 To solve this problem efficiently, consider using a two-pointer approach to find the maximum area.","solution":"def max_area(heights): Given an array of integers representing heights of buildings, return the maximum area of a rectangle formed by any two buildings and the ground. left, right = 0, len(heights) - 1 max_area = 0 while left < right: # Calculate the width of the rectangle width = right - left # Get the height of the shorter building height = min(heights[left], heights[right]) # Calculate the area with the current pair of buildings current_area = width * height # Update max_area if the current_area is larger max_area = max(max_area, current_area) # Move the pointer of the shorter side inward if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"There are N cities connected by M one-way roads. Each city is numbered from 1 to N and each road connects two cities and has a certain travel cost associated with it. Additionally, each city has a happiness value associated with it which you gain by visiting that city. You start at city 1 and want to travel to city N, visiting various cities along the way. Your objective is to maximize the total happiness gained minus the total travel cost incurred. Find the maximum possible happiness for this trip. -----Constraints----- - All input values are integers. - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ 10000 - 1 ≤ travel cost ≤ 1000 - 1 ≤ happiness value ≤ 1000 -----Input----- The input is given from Standard Input in the following format: N M happiness_1 happiness_2 ... happiness_N u1 v1 cost1 u2 v2 cost2 ... uM vM costM -----Output----- Print the maximum possible happiness you can achieve on the trip from city 1 to city N. -----Sample Input----- 4 4 3 2 5 10 1 2 2 2 3 2 3 4 2 1 4 7 -----Sample Output----- 11 The maximum happiness can be achieved by the following route: start from city 1 (happiness 3), move to city 2 (travel cost 2, happiness 2), move to city 3 (travel cost 2, happiness 5), and finally move to city 4 (travel cost 2, happiness 10). The total happiness is 3 + 2 + 5 + 10 = 20, and the total travel cost is 2 + 2 + 2 = 6. Hence, the result is 20 - 6 = 14, which is the maximum possible happiness from city 1 to city N.","solution":"import heapq def max_happiness(N, M, happiness, roads): graph = [[] for _ in range(N+1)] for u, v, cost in roads: graph[u].append((v, cost)) distance = [float(\'-inf\')] * (N+1) distance[1] = happiness[0] pq = [(-happiness[0], 1)] while pq: current_happiness, u = heapq.heappop(pq) current_happiness = -current_happiness for v, cost in graph[u]: temp_happiness = current_happiness + happiness[v-1] - cost if temp_happiness > distance[v]: distance[v] = temp_happiness heapq.heappush(pq, (-temp_happiness, v)) return distance[N] # Function to parse the input format and call the max_happiness function def find_max_happiness(N, M, happiness, roads): return max_happiness(N, M, happiness, roads)"},{"question":"Write a function that takes an integer n and returns a string representing the number in Roman numeral form. Roman numerals are typically written from largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given an integer, convert it to a roman numeral. Example: * Input: 3 * Output: \\"III\\" * Input: 58 * Output: \\"LVIII\\" * Input: 1994 * Output: \\"MCMXCIV\\"","solution":"def int_to_roman(n): Convert an integer to a Roman numeral. :param n: integer to convert :return: string representation in Roman numeral form value_map = [ (1000, \'M\'), (900, \'CM\'), (500, \'D\'), (400, \'CD\'), (100, \'C\'), (90, \'XC\'), (50, \'L\'), (40, \'XL\'), (10, \'X\'), (9, \'IX\'), (5, \'V\'), (4, \'IV\'), (1, \'I\') ] roman_numeral = \'\' for value, numeral in value_map: while n >= value: roman_numeral += numeral n -= value return roman_numeral"},{"question":"Emma works as a data analyst and frequently deals with large datasets. She comes across a problem where she needs to analyze a sequence of integers and determine whether it contains an increasing subsequence of length K. An increasing subsequence is a sequence of integers where each element is larger than the previous one. Help Emma write a function that determines whether such an increasing subsequence of length K exists in the given list of integers for multiple test cases. -----Input:----- - The first line contains T, the number of test cases. - For each test case: - The first line contains two integers N and K, where N is the length of the sequence, and K is the length of the increasing subsequence to find. - The second line contains N space-separated integers representing the sequence. -----Output:----- For each test case, output \\"YES\\" if an increasing subsequence of length K exists in the sequence, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq K leq N - -10^9 leq A[i] leq 10^9 -----Sample Input:----- 2 5 3 1 2 3 4 5 5 6 1 2 3 4 5 -----Sample Output:----- YES NO","solution":"def increasing_subsequence_exists(T, test_cases): results = [] for t in range(T): N, K = test_cases[t][0] sequence = test_cases[t][1] if find_increasing_subseq_of_length_k(sequence, K): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def find_increasing_subseq_of_length_k(sequence, K): if K == 1: return True inc_subseq = [] for num in sequence: pos = binary_search_lis_position(inc_subseq, num) if pos < len(inc_subseq): inc_subseq[pos] = num else: inc_subseq.append(num) if len(inc_subseq) >= K: return True return False def binary_search_lis_position(subseq, num): low, high = 0, len(subseq) while low < high: mid = (low + high) // 2 if subseq[mid] < num: low = mid + 1 else: high = mid return low"},{"question":"In a linked list, each node contains two fields: an integer value and a reference to the next node in the sequence. Write a function to check if a given linked list contains a cycle. A linked list has a cycle if a node\'s reference links back to a previous node in the list, creating a loop. ----Input---- The input will be provided as follows: 1. An integer `t` (1 ≤ t ≤ 100) — the number of test cases. 2. For each test case: - An integer `n` (1 ≤ n ≤ 10^4) — the number of nodes in the linked list. - `n` integers representing the integer values of the nodes. - `n` integers where the i-th integer is the index of the next node in the sequence for the i-th node. The index -1 indicates the end of the list, and valid indices are 0-based. ----Output---- Print `t` lines: for each test case, print `1` if the linked list contains a cycle, otherwise print `0`. ----Examples---- Input 2 3 1 2 3 1 2 -1 4 1 2 3 4 1 2 3 1 Output 0 1 ----Explanation--- In the first test case, the linked list is 1 → 2 → 3 → null. There is no cycle, so the output is 0. In the second test case, the linked list is 1 → 2 → 3 → 4 → 2 (cycle). Hence, the output is 1.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def has_cycle(head): Checks if the linked list has a cycle. :param head: The head of the linked list. :return: True if there is a cycle, otherwise False. if not head: return False slow = head fast = head.next while slow != fast: if not fast or not fast.next: return False slow = slow.next fast = fast.next.next return True def build_linked_list(values, next_indices): Builds a linked list from given values and next indices. :param values: List of node values. :param next_indices: List of next node indices. :return: Head of the linked list. if not values: return None nodes = [ListNode(val) for val in values] for i, next_index in enumerate(next_indices): if next_index != -1: nodes[i].next = nodes[next_index] return nodes[0] def detect_cycle_in_list(t, test_cases): Detects cyclic linked lists for given multiple test cases. :param t: Number of test cases. :param test_cases: List of test cases, each containing (n, values, next_indices). :return: List of results for each test case (1 if there is a cycle, 0 otherwise). results = [] for i in range(t): n, values, next_indices = test_cases[i] head = build_linked_list(values, next_indices) if has_cycle(head): results.append(1) else: results.append(0) return results"},{"question":"In a remote village, they have devised a new coding system for communication. Each letter of the alphabet is assigned a unique prime number starting from the smallest prime number (i.e., \'a\' is assigned 2, \'b\' is assigned 3, \'c\' is assigned 5, and so on up to \'z\' which is assigned the 26th prime number 101). To create a message, they multiply the assigned prime numbers of each letter in the string together. For example, the string \\"abc\\" would be represented as 2 * 3 * 5 = 30. Given a list of strings, determine if a given query string can be formed by concatenating one or more of the strings from the list. To accomplish this, check if the product of the prime numbers for the query string can be fully divided by the product of any concatenation of prime products of the strings in the list. -----Input----- - The first line contains an integer T representing the number of test cases. - Each test case consists of: - A line containing an integer N denoting the number of strings in the list. - Next N lines, each containing a single string. - One additional line containing the query string for that test case. -----Output----- For each test case, print \\"YES\\" if the query string can be formed by concatenating the strings from the list; otherwise, print \\"NO\\". -----Constraints----- - 1 leq T leq 10^5 - 1 leq N leq 10^3 - 1 leq text{length of any string} leq 100 - All strings contain only lowercase English letters. -----Sample Input----- 1 3 a aa aaa aaaa -----Sample Output----- YES -----Explanation----- In the sample, the query string \\"aaaa\\" can be formed by concatenating the strings from the list, for example \\"aaa\\" + \\"a\\" or \\"aa\\" + \\"aa\\".","solution":"def get_primes_up_to(n): primes = [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, n + 1): if sieve[start]: primes.append(start) for multiple in range(start * start, n + 1, start): sieve[multiple] = False return primes def get_prime_map(): primes = get_primes_up_to(101) prime_map = {chr(97 + i): primes[i] for i in range(26)} # Mapping \'a\'..\'z\' to prime numbers return prime_map def get_string_product(s, prime_map): product = 1 for char in s: product *= prime_map[char] return product def can_form_query_string(T, test_cases): prime_map = get_prime_map() results = [] for i in range(T): N, string_list, query_string = test_cases[i] string_products = [get_string_product(s, prime_map) for s in string_list] query_product = get_string_product(query_string, prime_map) from itertools import combinations, chain possible_products = set() possible_products.add(1) # Add product of empty sequence for length in range(1, N+1): for comb in combinations(string_products, length): combined_product = 1 for prod in comb: combined_product *= prod possible_products.add(combined_product) if query_product in possible_products: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A mountain array is defined as an array that: 1. Has at least three elements. 2. There exists some i (0 < i < A.length - 1) such that: - A[0] < A[1] < ... < A[i - 1] < A[i] - A[i] > A[i + 1] > ... > A[A.length - 1] Given an array A of integers, return the length of the longest mountain. Example 1: Input: A = [2, 1, 4, 7, 3, 2, 5] Output: 5 Explanation: The longest mountain is [1, 4, 7, 3, 2] which has length 5. Example 2: Input: A = [2, 2, 2] Output: 0 Explanation: There is no mountain. Example 3: Input: A = [0, 1, 0, 1] Output: 3 Explanation: The longest mountain is [0, 1, 0] which has length 3. Constraints: 3 <= A.length <= 10000 0 <= A[i] <= 100","solution":"def longest_mountain(A): Given an array A, returns the length of the longest mountain. n = len(A) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if A[i - 1] < A[i] > A[i + 1]: left = i - 1 while left > 0 and A[left - 1] < A[left]: left -= 1 right = i + 1 while right < n - 1 and A[right] > A[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"You have been given a grid of cells with dimensions N x M. Each cell can either contain land (represented as \'1\') or water (represented as \'0\'). An island is formed by connecting adjacent lands horizontally or vertically. You need to count the number of islands in the given grid. Write a function that takes the grid as input and returns the number of islands. You can assume that all four edges of the grid are surrounded by water (i.e., there are no land cells at the borders that wrap around). Function Signature: ```python def count_islands(grid: List[List[str]]) -> int: ``` # Example Input: ```plaintext grid = [ [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\"] ] ``` Output: ```plaintext 3 ``` # Explanation: There are three distinct islands in the provided grid. 1. The land cells connected at the top-left corner form the first island. 2. The single land cell in the middle of the grid forms the second island. 3. The two land cells connected at the bottom-right corner form the third island.","solution":"from typing import List def count_islands(grid: List[List[str]]) -> int: if not grid: return 0 def dfs(r, c): if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == \'0\': return grid[r][c] = \'0\' # Mark as visited dfs(r - 1, c) dfs(r + 1, c) dfs(r, c - 1) dfs(r, c + 1) islands = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == \'1\': islands += 1 dfs(r, c) return islands"},{"question":"Vanya has a garden with a variety of flowers. However, she notices that many flowers in her garden have the same colors and wants to find out which color is the most frequent. Can you help Vanya determine the most frequent flower color in her garden? -----Input:----- - The first line contains an integer ( N ), the number of flowers in her garden. - The second line contains ( N ) integers ( C[i] ) representing the colors of each flower. -----Output:----- - Output a single integer representing the color that appears most frequently. - If there are multiple colors with the same highest frequency, output the smallest color value. -----Constraints----- - ( 1 leq N leq 100000 ) - ( 1 leq C[i] leq 1000 ) -----Sample Input:----- 7 1 2 2 3 3 3 4 -----Sample Output:----- 3 -----EXPLANATION:----- Color 3 appears most frequently (3 times), so it is the most frequent color.","solution":"def most_frequent_color(N, C): Returns the most frequent flower color in the garden. If multiple colors have the same highest frequency, return the smallest color value. from collections import Counter color_count = Counter(C) max_frequency = max(color_count.values()) most_frequent_colors = [color for color, count in color_count.items() if count == max_frequency] return min(most_frequent_colors)"},{"question":"Given a directed graph where each node represents a task and each edge represents a prerequisite task, determine if you can complete all the tasks. If you can, return a list of tasks in the order they should be completed. If you cannot complete all tasks, return an empty array. Example 1: Input: 3, [[1, 0], [2, 1]] Output: [0, 1, 2] Explanation: You need to complete task 0 before task 1, and task 1 before task 2. Hence, the order of task completion is [0, 1, 2]. Example 2: Input: 3, [[0, 1], [1, 2], [2, 0]] Output: [] Explanation: The prerequisites form a cycle, thus it is impossible to complete all tasks. Note: Input is given in the form of a list of edges where each edge [a, b] indicates that task b should be completed before task a. You may assume there are no duplicate edges in the input.","solution":"from collections import defaultdict, deque def find_order(num_tasks, prerequisites): Determine if it is possible to complete all tasks given prerequisites. If possible, return the order of tasks; otherwise, return an empty list. in_degree = {i: 0 for i in range(num_tasks)} graph = defaultdict(list) for dest, src in prerequisites: graph[src].append(dest) in_degree[dest] += 1 queue = deque([node for node in range(num_tasks) if in_degree[node] == 0]) ordered_tasks = [] while queue: node = queue.popleft() ordered_tasks.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(ordered_tasks) == num_tasks: return ordered_tasks else: return []"},{"question":"A delivery drone needs to move in a grid to deliver parcels. The drone can move in four directions: up (`U`), down (`D`), left (`L`), and right (`R`). Your task is to calculate the final position of the drone after executing a sequence of movement commands. The drone starts at position (0, 0) on a grid. Input A string `commands` consisting of the characters `U`, `D`, `L`, and `R`, representing the drone\'s movement commands: - `U`: Move up by 1 unit - `D`: Move down by 1 unit - `L`: Move left by 1 unit - `R`: Move right by 1 unit Output Return the final position of the drone as a tuple `(x, y)` after executing all the commands in the order given in the input string. Example ```python commands = \\"UUDDLRLR\\" final_position(commands) # should return (0, 0) commands = \\"RRUL\\" final_position(commands) # should return (2, 1) commands = \\"UDUDLRLR\\" final_position(commands) # should return (0, 0) ``` Notes - The grid is unbounded, so the drone can move freely without any limitations. - The drone starts at the origin `(0, 0)`. Write a function `final_position(commands)` that takes the input string and returns the final coordinates as a tuple.","solution":"def final_position(commands): Calculate the final position of the drone after executing movement commands. Args: commands (str): A string consisting of \'U\', \'D\', \'L\', and \'R\' representing the movement commands. Returns: tuple: The final position (x, y) of the drone. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"A magic square is a grid of numbers where the sum of every row, column, and diagonal is the same. Define an operation as selecting any cell in the grid and changing its value to any integer of your choice. Given a 3x3 grid of integers, determine the minimum number of operations required to convert the grid into a magic square. -----Input----- The input consists of 3 lines, each containing 3 space-separated integers representing the grid. -----Output----- Output a single integer, the minimum number of operations required. -----Constraints----- - Each value in the grid is an integer in the range ([-10^9, 10^9]). -----Example Input----- 4 8 2 3 5 7 8 1 6 -----Example Output----- 0 -----Explanation:----- Example case: The given 3x3 grid is already a magic square, as the sums of its rows, columns, and diagonals are all equal to 15. Therefore, the minimum number of operations required is 0.","solution":"def min_operations_to_magic_square(grid): def cost_to_convert(square1, square2): Computes the cost to convert square1 to square2. return sum(abs(square1[i][j] - square2[i][j]) for i in range(3) for j in range(3)) # All possible 3x3 magic squares configurations magic_squares = [ [[8, 1, 6], [3, 5, 7], [4, 9, 2]], [[6, 1, 8], [7, 5, 3], [2, 9, 4]], [[4, 9, 2], [3, 5, 7], [8, 1, 6]], [[2, 9, 4], [7, 5, 3], [6, 1, 8]], [[8, 3, 4], [1, 5, 9], [6, 7, 2]], [[4, 3, 8], [9, 5, 1], [2, 7, 6]], [[6, 7, 2], [1, 5, 9], [8, 3, 4]], [[2, 7, 6], [9, 5, 1], [4, 3, 8]] ] # Calculate the minimum cost to any magic square min_cost = float(\'inf\') for magic_square in magic_squares: current_cost = cost_to_convert(grid, magic_square) min_cost = min(min_cost, current_cost) return min_cost"},{"question":"A robot is located at the top-left corner of a `m x n` grid (marked \'Start\' in the diagram below): ``` Start | | | | ---|---|---|---|--- | | | | ---|---|---|---|--- | | | | ---|---|---|---|--- | | | | End ``` The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'End\' in the diagram above). Write a function `uniquePaths(m, n)` which returns the number of possible unique paths that the robot can take to reach the bottom-right corner. # Example: `uniquePaths(3, 2)` should return `3` because there are three paths: ``` 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right ``` `uniquePaths(7, 3)` should return `28`. **Constraints:** * `1 <= m, n <= 100` * The time complexity should be linear with respect to the number of cells in the grid.","solution":"def uniquePaths(m, n): Returns the number of possible unique paths from the top-left to the bottom-right of an m x n grid. # Create a 2D array to store the number of ways to reach each cell. dp = [[1] * n for _ in range(m)] # Iterate over the grid starting from cell (1,1) and moving to the bottom-right corner. for i in range(1, m): for j in range(1, n): # The number of ways to reach (i,j) is the sum of the number of ways to reach (i-1,j) and (i,j-1) dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right corner will have the number of unique paths. return dp[-1][-1]"},{"question":"A string is considered “balanced” if the counts of all non-repeating characters are equal. For instance, the string \\"aabb\\" is balanced because both \'a\' and \'b\' appear exactly two times. The string \\"aabbcc\\" is also balanced because \'a\', \'b\', and \'c\' all appear two times each. Given a string `s`, determine if it is balanced. Your function should return `True` if `s` is balanced and `False` otherwise. Ignore uppercase letters, treat them the same as their lowercase counterparts. Non-alphabetic characters should be ignored. If the input is not of string type, return `\\"Invalid input\\"`. Example: ``` is_balanced(\\"aAbB\\") => True is_balanced(\\"abcABC\\") => True is_balanced(\\"aabbcc\\") => True is_balanced(\\"aabbc\\") => False is_balanced(\\"AaB!#b\\") => True is_balanced(123) => \\"Invalid input\\" is_balanced(\\"aaBBccD\\") => False is_balanced(\\"\\") => True ``` ```Haskell In Haskell, the function should return a Maybe Bool with Nothing for cases where the argument is not a string. ```","solution":"def is_balanced(s): Check if the string s is balanced. A string is considered balanced if the counts of all non-repeating alphabetic characters are equal. Parameters: s (str): the string to be checked Returns: bool: True if the string is balanced, False otherwise str: \\"Invalid input\\" if the input is not a string if not isinstance(s, str): return \\"Invalid input\\" from collections import Counter # Normalize string: convert to lowercase and filter out non-alphabetic characters s = \'\'.join(filter(str.isalpha, s.lower())) # Get counts of each character char_counts = Counter(s) # Extract values of counts count_values = list(char_counts.values()) # Check if all counts are the same return len(set(count_values)) <= 1"},{"question":"In this coding challenge, you are required to implement a function that takes a string containing a mix of integers and letters, and returns a version of the string where all the digits are sorted in ascending order without changing the positions of the letters. ``` Examples: rearrange(\\"a3b2c1\\") = \\"a1b2c3\\" rearrange(\\"z7x9y4\\") = \\"z4x7y9\\" rearrange(\\"a1b2c3d456\\") = \\"a1b2c3d456\\" ``` Remember: - Input will always be a non-empty string containing at least one digit. - The output must maintain the original order of the letters and only sort the digits.","solution":"def rearrange(s): Rearranges the digits in the input string in ascending order while maintaining the positions of the letters. :param s: Input string containing a mix of integers and letters :return: Modified string with sorted digits digits = sorted([char for char in s if char.isdigit()]) result = [] digit_index = 0 for char in s: if char.isdigit(): result.append(digits[digit_index]) digit_index += 1 else: result.append(char) return \\"\\".join(result)"},{"question":"You are given a secret code represented as a string of characters. The code contains some encrypted letters along with some extra characters that do not contribute to the actual message. Your task is to find and return the original message by stripping out the extra characters and decrypting the remaining ones. The code is constructed as follows: 1. The encrypted message will only contain lowercase Latin letters. 2. Extra characters are defined as any character that is not a lowercase Latin letter. 3. The decryption process involves shifting each letter in the encrypted message by one position forward in the alphabet (e.g., \'a\' becomes \'b\', \'b\' becomes \'c\', ..., \'z\' becomes \'a\'). # Input - The first and only line of input contains the encoded string s (1 le |s| le 5,000). # Output - Print the original decrypted message as a single string. # Examples Input abc1!def2?ghi Output bcdefghij Input h3e&&*ll^o Output ifmmp # Note In the first example, the message is \\"abcdefghi\\", but with the extra characters removed, it becomes \\"abcdeghi\\". When each letter is shifted by one position forward, we get \\"bcdefghij\\". In the second example, the message \\"hello\\" is interrupted by extra characters. After removal of extra characters, we get \\"hello\\". Upon shifting each letter forward, the result is \\"ifmmp\\". Remember, non-lowercase Latin letters should be ignored, and each letter in the encrypted message is shifted by one position forward in the alphabet.","solution":"def decrypt_message(s): Decrypts the message by removing all non-lowercase letters and shifting each character forward by one position. decrypted_message = [] for char in s: if \'a\' <= char <= \'z\': decrypted_message.append(chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\'))) return \'\'.join(decrypted_message)"},{"question":"Given an array of integers, find the longest subsequence such that all elements of the subsequence are in a strictly increasing order. ```python longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) = 6 Explanation: The longest increasing subsequence is [10, 22, 33, 50, 60, 80] longest_increasing_subsequence([3, 10, 2, 1, 20]) = 3 Explanation: The longest increasing subsequence is [3, 10, 20] ``` Write a function to return the length of the longest increasing subsequence and provide the result for other test cases. The length of the array will be at most `1E3`. Good luck!","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest subsequence such that all elements of the subsequence are in a strictly increasing order. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"You are given an integer array of size N. Determine if it is possible to perform the following operation exactly once to make the array sorted in non-decreasing order: - Choose exactly one element from the array and replace it with any integer. -----Constraints----- - 1 leq N leq 10^5 - -10^9 leq array[i] leq 10^9 -----Input----- Input is given from Standard Input in the following format: N array_1 array_2 ... array_N -----Output----- If it is possible to perform the operation exactly once to make the array sorted in non-decreasing order, print Yes; otherwise, print No. -----Sample Input----- 4 4 2 3 5 -----Sample Output----- Yes Replacing the first element 4 with 1 will result in the array: [1, 2, 3, 5], which is sorted in non-decreasing order.","solution":"def can_be_sorted_with_one_change(n, array): Determines if the array can be sorted in non-decreasing order by changing exactly one element. def is_sorted(array): return all(array[i] <= array[i + 1] for i in range(len(array) - 1)) # Initial array is already sorted if is_sorted(array): return \\"Yes\\" for i in range(n): # Save the original value original_value = array[i] # Test changing the element to values right before and after the neighbours neighbours = [] if i > 0: neighbours.append(array[i-1] - 1) neighbours.append(array[i-1]) if i < n-1: neighbours.append(array[i+1]) neighbours.append(array[i+1] + 1) for value in neighbours: array[i] = value if is_sorted(array): return \\"Yes\\" # Restore the original value array[i] = original_value return \\"No\\""},{"question":"You are given a binary string S of length N which contains only characters \'0\' and \'1\'. Your task is to determine the minimum number of character flips required such that no two adjacent characters in the string are the same. -----Input----- - The first line of the input contains an integer N denoting the length of the binary string. - The second line contains the binary string S of length N. -----Output----- Single line containing one integer, denoting the minimum number of flips required to make the binary string such that no two adjacent characters are the same. -----Constraints----- - 1 leq N leq 10^5 - The string S contains only characters \'0\' and \'1\'. -----Sample Input----- 5 11010 -----Sample Output----- 1 -----Explanation----- We can flip the first \'1\' to \'0\' to get \'01010\', which requires 1 flip. This new string has no two adjacent characters that are the same.","solution":"def min_flips_to_alternate(N, S): Returns the minimum number of character flips required so that no two adjacent characters in the binary string are the same. flip_count1 = 0 # Starting with \'0\' flip_count2 = 0 # Starting with \'1\' # Checking in the pattern starting with \'0\' for i, c in enumerate(S): expected_char = \'0\' if i % 2 == 0 else \'1\' if c != expected_char: flip_count1 += 1 # Checking in the pattern starting with \'1\' for i, c in enumerate(S): expected_char = \'1\' if i % 2 == 0 else \'0\' if c != expected_char: flip_count2 += 1 return min(flip_count1, flip_count2)"},{"question":"Given an unsorted array of integers, write a function to find the number of subarrays which have a sum equal to a given value. Example: Input: arr = [1, 1, 1] k = 2 Output: 2 Explanation: The subarrays are [1, 1] at index (0, 1) and [1, 1] at index (1, 2). Note: * The subarrays do not have to be contiguous. * The integers in the array can be both positive and negative. * Consider the trade-offs between different approaches (e.g., brute force vs. optimized solutions).","solution":"def subarray_sum(arr, k): Finds the number of subarrays that sum up to k. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in arr: current_sum += num if (current_sum - k) in prefix_sums: count += prefix_sums[current_sum - k] if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count"},{"question":"Given a list of integers that represents the prices of a stock over `n` days, write a function that calculates the maximum profit you can achieve by making at most two transactions. Each transaction consists of buying and then selling one share of the stock, and you must sell the stock before you buy again. The function signature should be: ```python def max_profit(prices: List[int]) -> int: ``` In one example, the input `[3, 3, 5, 0, 0, 3, 1, 4]` produces the output `6`, which means that the maximum profit of `6` can be achieved using the transactions: 1. Buy on day 4 (price = 0) and sell on day 6 (price = 3) -> profit = 3 - 0 = 3 2. Buy on day 7 (price = 1) and sell on day 8 (price = 4) -> profit = 4 - 1 = 3 In another example, the input `[1, 2, 3, 4, 5]` produces the output `4`, which means that the maximum profit of `4` can be achieved using the transaction: 1. Buy on day 1 (price = 1) and sell on day 5 (price = 5) -> profit = 5 - 1 = 4 If you\'re given an input like `[7, 6, 4, 3, 1]`, the output should be `0`, as no transaction is capable of producing a positive profit. To approach this problem, you need to consider the possible states of transactions and dynamically update the maximum profit achievable at each step by either participating in a transaction or skipping the transaction for that day.","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices: return 0 n = len(prices) if n < 2: return 0 # dp[i][k][0] means the maximum profit at day i with at most k transactions holding 0 stock # dp[i][k][1] means the maximum profit at day i with at most k transactions holding 1 stock dp = [[[0, 0] for _ in range(3)] for _ in range(n)] for k in range(3): dp[0][k][0] = 0 dp[0][k][1] = -prices[0] for i in range(1, n): for k in range(1, 3): dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]) dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]) return max(dp[n-1][1][0], dp[n-1][2][0])"},{"question":"Alice has a machine called the Operationizer that performs operations on an integer array. The machine has a special procedure that cyclically shifts the elements of the array, and then replaces each element with the product of itself and the element that followed it in the original array. The steps of the operation are as follows: 1. Create a new array from the original array by cyclically shifting it right by one position. 2. Replace each element in the original array with the product of itself and the element at the same index in the newly created array. 3. Repeat the above steps for `K` operations. Given a list of integers and a number `K`, find the state of the array after performing `K` operations. -----Constraints----- - The length of the array is between 1 and 10^5. - Elements in the array are integers between -10^9 and 10^9. - `K` is a non-negative integer such that 0 ≤ K < 10^5. -----Input----- The input is given from Standard Input in the following format: ``` N K a_1 a_2 ... a_N ``` Where: - `N` is the length of the array. - `K` is the number of operations. - `a_1, a_2, ..., a_N` are the elements of the array. -----Output----- Print the state of the array after `K` operations. -----Sample Input----- 3 2 3 1 4 -----Sample Output----- 36 36 1 Explanation: After the first operation: - Shift array: [4, 3, 1] - Multiply: [4*3, 3*1, 1*4] -> [12, 3, 4] After the second operation: - Shift array: [4, 12, 3] - Multiply: [12*4, 3*12, 4*3] -> [48, 36, 12] Second multiplied values are printed while replacing 12 with 36: [36, 36, 1]","solution":"def operationizer(N, K, arr): if K == 0: return arr for _ in range(K): shifted_arr = arr[-1:] + arr[:-1] arr = [arr[i] * shifted_arr[i] for i in range(N)] return arr"},{"question":"In a small software development team, developers are assigned tasks to complete within specific timeframes. Each task has a unique difficulty level represented by an integer, and the higher the number, the more difficult the task. Since the team is working remotely, one of the developers comes up with a plan to divide the workload as evenly as possible. The developer decides to write a function to determine the minimum difference in the total difficulty of tasks between any two subsets when the tasks are split into two subsets. Each task must be assigned to one of the two subsets, and both subsets should have at least one task. Your task is to help implement this plan. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of tasks. The second line of each test case contains N space-separated integers denoting the difficulty levels of the tasks. -----Output----- For each test case, output a single integer denoting the minimum difference in total difficulty between the two subsets. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 20 - 1 ≤ Difficulty[i] ≤ 500 -----Example----- Input 2 3 1 2 3 4 1 2 3 9 Output 0 3 -----Explanation----- Example case 1: The team can split the tasks into subsets {1, 2} and {3}, which both sum up to 3, resulting in a difference of 0. Example case 2: The team can split the tasks into subsets {1, 2, 3} and {9}, which have a total difficulty of 6 and 9, respectively, resulting in a difference of 3.","solution":"def min_diff_between_subsets(tasks): Find the minimum difference in total difficulty between two subsets. # Find the total sum of the task difficulties total_sum = sum(tasks) n = len(tasks) # Initialize a DP array dp = [False] * (total_sum // 2 + 1) dp[0] = True # Fill the DP array for task in tasks: for j in range(total_sum // 2, task - 1, -1): dp[j] = dp[j] or dp[j - task] # Find the largest j such that dp[j] is True for j in range(total_sum // 2, -1, -1): if dp[j]: subset1_sum = j break subset2_sum = total_sum - subset1_sum return abs(subset2_sum - subset1_sum) def min_diff_between_two_subsets(T, test_cases): results = [] for i in range(T): N, tasks = test_cases[i] results.append(min_diff_between_subsets(tasks)) return results"},{"question":"Write a function that takes a list of integers as an input and returns `true` if the sum of the squares of the even numbers is greater than the sum of the squares of the odd numbers. Otherwise, return `false`. (For Python return True or False) Given that an integer `n` is classified as even if `n % 2 == 0` and classified as odd if `n % 2 != 0`. Find examples below: ``` compareSquares([1, 2, 3, 4, 5]) -> true // (2^2 + 4^2) = 4 + 16 = 20, (1^2 + 3^2 + 5^2) = 1 + 9 + 25 = 35, 20 is not greater than 35. compareSquares([1, 3, 5, 7]) -> false // (0) = 0, (1^2 + 3^2 + 5^2 + 7^2) = 1 + 9 + 25 + 49 = 84, 0 is not greater than 84. compareSquares([2, 4, 6, 8]) -> true // (2^2 + 4^2 + 6^2 + 8^2) = 4 + 16 + 36 + 64 = 120, (0) = 0, 120 is greater than 0. compareSquares([ ]) -> false // No numbers to compare, Thus return false by default. ```","solution":"def compareSquares(numbers): Returns True if the sum of the squares of the even numbers is greater than the sum of the squares of the odd numbers. Otherwise, returns False. even_sum = sum(x * x for x in numbers if x % 2 == 0) odd_sum = sum(x * x for x in numbers if x % 2 != 0) return even_sum > odd_sum"},{"question":"Inventro Inc. is hosting an international programming contest and wants to determine the best time to hold it, based on participants\' availability. Each participant has a specific time window during which they are available to join the contest. A time window is defined as a pair of integers [start, end], where \'start\' < \'end\', representing the start time and end time (in hours) of their availability. You are to write a function `best_time_to_schedule(contest, participants)` that takes in two parameters: 1. `contest` - A list of two integers [start, end] representing the desired time window for the contest. 2. `participants` - A list of lists, where each inner list is a pair of integers [start, end] indicating a participant\'s available time window. The function should return the maximum number of participants that can join during any continuous hour within the desired contest time window. For example: ```python print(best_time_to_schedule([9, 17], [[8, 12], [9, 13], [11, 15], [14, 18]])) ``` The output should be: ``` 3 ``` Explanation: The optimal time to host the contest, considering the participants\' availability, is between 11 and 12, where 3 participants are available (the second, third, and fourth participants).","solution":"def best_time_to_schedule(contest, participants): Determines the best time to schedule a contest based on the availability of the participants. :param contest: List of two integers [start, end] representing the desired contest time window. :param participants: List of lists where each inner list is a pair of integers [start, end] representing a participant\'s available time window. :return: Maximum number of participants that can join during any continuous hour within the desired contest time window. max_participants = 0 for hour in range(contest[0], contest[1]): current_participants = sum(1 for p in participants if p[0] <= hour < p[1]) max_participants = max(max_participants, current_participants) return max_participants"},{"question":"=====Function Descriptions===== Python\'s collections module provides alternatives to Python\'s general-purpose built-in containers like dict, list, set, and tuple. One such alternative is the deque (pronounced as \\"deck\\"), which stands for \\"double-ended queue\\". Deques support thread-safe, memory-efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction. To start using a deque, you need to import it from the collections module: from collections import deque Deque objects can be created from an iterable: d = deque([1, 2, 3, 4, 5]) You can append elements to both ends of a deque: d.append(6) # Appends \'6\' to the right end d.appendleft(0) # Appends \'0\' to the left end =====Problem Statement===== You are given a list of integers. Your task is to append the integer 42 to the right end of the deque and the integer -1 to the left end of the deque, then print the deque. =====Input Format===== A single line of input containing space-separated integers. =====Output Format===== Print the modified deque after appending 42 to the right end and -1 to the left end.","solution":"from collections import deque def modify_deque(input_list): Given a list of integers, append 42 to the right end of the deque and -1 to the left end, then return the deque. d = deque(input_list) d.append(42) # Appends \'42\' to the right end d.appendleft(-1) # Appends \'-1\' to the left end return d"},{"question":"Alice has a collection of N distinct integers arranged in an array. Bob, who enjoys sorting challenges, received a task from Alice. The task is to sort the array in such a way that the difference between each consecutive pair of elements in the sorted array is minimized. Bob can choose to reverse any prefix of the array any number of times to achieve this. However, he needs to find the minimum number of prefix reversals required to achieve the desired sorted order. A prefix reversal is defined as reversing the first k elements of the array, where 1 leq k leq N. Bob needs your help to write a function that returns the minimum number of prefix reversals required to sort the array as per the objective. -----Input:----- - An integer N, representing the number of elements in the array. - An array of N distinct integers. -----Output:----- Output a single integer, representing the minimum number of prefix reversals required to sort the array. -----Constraints----- - 1 leq N leq 1000 - Array elements are distinct and can be any integers (positive or negative). -----Sample Input----- 5 4 3 2 1 5 -----Sample Output----- 1 -----EXPLANATION:----- We can sort the array [4, 3, 2, 1, 5] in one prefix reversal: Reverse the first 4 elements: [1, 2, 3, 4, 5] Now the array is sorted, and we used only one prefix reversal.","solution":"def min_prefix_reversals(N, array): Find the minimum number of prefix reversals required to sort the array such that the difference between each consecutive pair of elements in the sorted array is minimized. sorted_array = sorted(array) if array == sorted_array: return 0 for k in range(1, N + 1): if array[:k] == sorted_array[:k][::-1] and array[k:] == sorted_array[k:]: return 1 return 1"},{"question":"Alex is participating in a coding competition. In one of the challenges, he needs to merge two sorted arrays into a single sorted array while maintaining their order. Your task is to help Alex accomplish this task. -----Input:----- - The first line contains an integer m, which is the size of the first array. - The second line contains m space-separated integers representing the first sorted array. - The third line contains an integer n, which is the size of the second array. - The fourth line contains n space-separated integers representing the second sorted array. -----Output:----- A single line containing m + n space-separated integers representing the merged sorted array. -----Constraints----- - 1 leq m, n leq 10^5 - -10^9 leq elements of the arrays leq 10^9 -----Sample Input:----- 3 1 3 5 4 2 4 6 8 -----Sample Output:----- 1 2 3 4 5 6 8","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. m, n = len(arr1), len(arr2) merged_array = [] i = j = 0 # Traverse through both arrays and pick the smallest element from either array while i < m and j < n: if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Store remaining elements of the first array while i < m: merged_array.append(arr1[i]) i += 1 # Store remaining elements of the second array while j < n: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"# Introduction The goal of this exercise is to analyze a sequence of numbers and determine the length of the longest consecutive elements sequence. A consecutive elements sequence is a sub-sequence of a sequence in which the elements can be arranged in a continuous progressive order, i.e., each element in the sub-sequence differs by 1 from its neighboring elements. # Task Write a function `longest_consecutive_sequence` that takes a list of integers `nums` as input and returns the length of the longest consecutive elements sequence. # Constraints: - The length of the list is in the range [0, 10^5]. - The elements of the list are in the range [-10^9, 10^9]. # Examples: ```python def longest_consecutive_sequence(nums): your code here # Example 1 nums1 = [100, 4, 200, 1, 3, 2] print(longest_consecutive_sequence(nums1)) # Output: 4 # Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. # Example 2 nums2 = [0, -1, 1, 2, -2, 5] print(longest_consecutive_sequence(nums2)) # Output: 5 # Explanation: The longest consecutive elements sequence is [-2, -1, 0, 1, 2]. Therefore its length is 5. # Example 3 nums3 = [] print(longest_consecutive_sequence(nums3)) # Output: 0 # Explanation: The given list is empty. Therefore its length is 0. ```","solution":"def longest_consecutive_sequence(nums): if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: # Check if this is the start of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"=====Problem Statement===== You\'re given a string `s` consisting of lowercase letters and digits. Your task is to find the longest subsequence of characters such that all characters in the subsequence are digits and their respective ASCII values are in increasing order. Print the longest subsequence of digits in increasing ASCII order. If there are multiple subsequences with the same length, print the one that appears first in the string. If there are no digits in the string, print an empty string. For example, given the string `a1b23c4`, the longest subsequence of digits in increasing ASCII order is `1234`. =====Input Format===== A single line of input containing the string S. =====Constraints===== 1≤len(S)≤10^4","solution":"def longest_increasing_ASCII_subsequence(s): Find the longest subsequence of digits in increasing ASCII order. Parameters: s (str): Input string consisting of lowercase letters and digits. Returns: str: Longest increasing ASCII order subsequence of digits. digits = [char for char in s if char.isdigit()] n = len(digits) if n == 0: return \\"\\" lis = [\\"\\"] * n lis[0] = digits[0] for i in range(1, n): lis[i] = digits[i] for j in range(i): if digits[j] < digits[i] and len(lis[j]) + 1 > len(lis[i]): lis[i] = lis[j] + digits[i] longest = max(lis, key=len) return longest"},{"question":"Create a function that takes an integer `n` and returns a string representing a spiral pattern on an `n x n` grid. The spiral starts with 1 in the top-left corner and spirals inward in a counter-clockwise direction. For example: ```python def spiral_matrix(n: int) -> str: ``` If the input `n` is 3, the output should be a string representation of the following matrix: ``` 1 2 3 8 9 4 7 6 5 ``` And for `n` equals 4, it will be: ``` 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 ``` The matrix should be returned as a single string, with each row of the matrix on a new line. If the input `n` is less than or equal to 0 or an invalid input, return \'?\'. Example: ```python print(spiral_matrix(3)) # Output: # 1 2 3n8 9 4n7 6 5n print(spiral_matrix(4)) # Output: # 1 2 3 4n12 13 14 5n11 16 15 6n10 9 8 7n ``` Make sure your solution handles edge cases, such as negative numbers, zero, and non-integer inputs.","solution":"def spiral_matrix(n: int) -> str: if not isinstance(n, int) or n <= 0: return \'?\' matrix = [[0] * n for _ in range(n)] num = 1 x, y = 0, 0 dx, dy = 0, 1 # start moving right for _ in range(n * n): matrix[x][y] = num num += 1 # Calculate next position nx, ny = x + dx, y + dy # Check if next position is valid if 0 <= nx < n and 0 <= ny < n and matrix[nx][ny] == 0: x, y = nx, ny else: # Change direction (counter-clockwise) dx, dy = dy, -dx x, y = x + dx, y + dy # Convert matrix to string result = \'n\'.join(\' \'.join(f\\"{num:2}\\" for num in row) for row in matrix) return result"},{"question":"Write a function that accepts an integer `n` and returns a boolean indicating whether `n` is a happy number. A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number either equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. The tests will check whether the function can identify happy numbers for integers up to 1000.","solution":"def is_happy_number(n): Determine whether an integer n is a happy number. A happy number is one that eventually reaches 1 when replaced repeatedly by the sum of the square of its digits. def get_next(number): return sum(int(char) ** 2 for char in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1"},{"question":"It is summer holiday season, and Carla is planning her vacation. She has a list of activities she wants to do, each with a specific starting and ending time. Given that Carla can\'t do two activities at once (their times can\'t overlap), she wants to maximize the number of activities she can complete during her vacation. Your task is to determine the maximum number of non-overlapping activities Carla can select from the list. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of activities. - Each of the following N lines contains two space-separated integers S_i and E_i — the start and end times of the i-th activity. -----Output----- For each test case, print a single line containing one integer — the maximum number of non-overlapping activities Carla can select. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq S_i < E_i leq 10^9 -----Example Input----- 2 3 1 2 3 4 0 6 4 1 3 2 4 3 5 0 6 -----Example Output----- 2 2 -----Explanation----- Example case 1: Carla can select the activities (1, 2) and (3, 4). Example case 2: Carla can select the activities (1, 3) and (3, 5). She could also select (2, 4) and (0, 6), but this only makes 2 non-overlapping activities which is the same as the first option.","solution":"def max_activities(T, test_cases): results = [] for activities in test_cases: # Sort the activities based on their end times activities.sort(key=lambda x: x[1]) max_count = 0 current_end_time = 0 for start, end in activities: if start >= current_end_time: max_count += 1 current_end_time = end results.append(max_count) return results"},{"question":"You have been hired to develop a simple game for a children\'s educational app. The game involves a grid-based puzzle where the child has to move from the top-left corner of a grid to the bottom-right corner. However, some cells in the grid are blocked and cannot be moved through. Your task is to determine if there exists a path from the top-left corner to the bottom-right corner. Instructions * Write a function `is_path_exists(matrix)` which takes a 2D list `matrix` as input, representing the grid. Each cell in the matrix contains either `0` or `1`, where `0` denotes a blocked cell and `1` denotes an open cell. * The function should return `True` if there is a path from the top-left corner (matrix[0][0]) to the bottom-right corner (matrix[n-1][n-1] where n is the length of the matrix side), and `False` otherwise. * You can only move either down or right at any point in time. * The matrix will always be square and can range from 2x2 to 10x10. * If matrix[0][0] or matrix[n-1][n-1] is `0`, return `False` since you can\'t start or end on a blocked cell. # Examples: ```python is_path_exists([[1, 0, 0], [1, 1, 0], [0, 1, 1]]) # True, Path exists: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) is_path_exists([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) # False, No path exists is_path_exists([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) # True, Path exists: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) is_path_exists([[0, 1], [1, 1]]) # False, No path exists since start cell is blocked ``` # Constraints: * 2 <= n <= 10 * matrix[i][j] is either 0 or 1","solution":"def is_path_exists(matrix): def dfs(x, y): if x == n-1 and y == n-1: return True if x < 0 or x >= n or y < 0 or y >= n or matrix[x][y] == 0: return False # Mark this cell as visited matrix[x][y] = 0 # Move right or down if dfs(x + 1, y) or dfs(x, y + 1): return True # Unmark this cell as it was not a valid path matrix[x][y] = 1 return False n = len(matrix) if matrix[0][0] == 0 or matrix[n-1][n-1] == 0: return False return dfs(0, 0)"},{"question":"Given an array of integers and an integer target, find two distinct indices in the array such that the integers at those indices add up to the target value. Assume that each input would have exactly one solution, and you may not use the same element twice. Write a function `findTwoIndices` that takes an array of integers and a target integer as input, and returns a list of the two indices of the numbers that add up to the target. Function signature: `def findTwoIndices(nums: List[int], target: int) -> List[int]:` Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Example 2: Input: nums = [3, 2, 4] target = 6 Output: [1, 2] Example 3: Input: nums = [3, 3] target = 6 Output: [0, 1] Note: - The length of the array is in the range [2, 10^4]. - Each input has exactly one solution. - You may not use the same element twice. - You can return the answer in any order. - The array consists of integers in the range [-10^9, 10^9].","solution":"from typing import List def findTwoIndices(nums: List[int], target: int) -> List[int]: Given an array of integers and an integer target, find two distinct indices in the array such that the integers at those indices add up to the target value. # Create a dictionary to store the index of the numbers index_map = {} # Traverse through the list for i, num in enumerate(nums): # Calculate the complement that would sum up with the current number to reach the target complement = target - num # Check if the complement is already in the dictionary if complement in index_map: # If found, return the indices of the current number and its complement return [index_map[complement], i] # Otherwise, add the number and its index to the dictionary index_map[num] = i # In a very rare unexpected case return an empty list, although it\'s assumed there\'s always one solution return []"},{"question":"Given an array of integers `nums`, you are tasked to identify the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A contiguous subarray is a slice of an array that consists of consecutive elements. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum = 6. Example 2: Input: nums = [1] Output: 1 Explanation: The subarray [1] has the largest sum = 1. Example 3: Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum = 23. Constraints: - 1 <= nums.length <= 100 - -100 <= nums[i] <= 100 **Follow-up Question**: If you have already implemented the solution with O(n) time complexity, try to refine the complexity to O(n log n).","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray which has the largest sum. max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"# Product Review Medians Your task is to analyze reviews of a product and compute the median rating at any given point in a continuous stream of ratings. # Description You are given a stream of numbers representing the rating of a product made by different users. Each rating is an integer within the range 1 to 5 inclusive. Your task is to continuously compute the median of the ratings in constant time as new ratings come in. Example Consider the following sequence of product ratings: ``` [3, 5, 4, 2, 5, 1] ``` - After the first rating (3), the median is 3. - After the second rating (5), the median is (3 + 5)/2 = 4.0. - After the third rating (4), the median is 4. - After the fourth rating (2), the median is (3 + 4)/2 = 3.5. - After the fifth rating (5), the median is 4. - After the sixth rating (1), the median is (3 + 4)/2 = 3.5. Constraints * You may assume the number of ratings will fit within memory constraints. Output A function that accepts a new rating and returns the current median rating. ``` class ProductReviewMedian: def __init__(self): # Initialize necessary structures def add_rating(self, rating: int): # Add a new rating and update the median def get_median(self) -> float: # Return the current median rating ``` Example Usage ``` prm = ProductReviewMedian() prm.add_rating(3) assert prm.get_median() == 3.0 prm.add_rating(5) assert prm.get_median() == 4.0 prm.add_rating(4) assert prm.get_median() == 4.0 prm.add_rating(2) assert prm.get_median() == 3.5 prm.add_rating(5) assert prm.get_median() == 4.0 prm.add_rating(1) assert prm.get_median() == 3.5 ``` Additional Information * Your implementation should aim for time-efficient median computation. * The focus is on correctly calculating the median in an efficient manner as new ratings are added.","solution":"import heapq class ProductReviewMedian: def __init__(self): self.min_heap = [] self.max_heap = [] def add_rating(self, rating: int): if len(self.max_heap) == 0 or rating <= -self.max_heap[0]: heapq.heappush(self.max_heap, -rating) else: heapq.heappush(self.min_heap, rating) # Balance the heaps if needed if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) elif len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def get_median(self) -> float: if len(self.max_heap) == len(self.min_heap): return (-self.max_heap[0] + self.min_heap[0]) / 2.0 else: return float(-self.max_heap[0])"},{"question":"# Task Given an integer array `nums`, sort the array such that all even numbers appear before all odd numbers. The relative order of the even and odd numbers should be preserved. # Example For `nums = [3, 1, 2, 4]`, the output should be `[2, 4, 3, 1]`. For `nums = [0, 1, 2]`, the output should be `[0, 2, 1]`. # Input - `[input]` integer array `nums` Constraints: `1 ≤ nums.length ≤ 1000, 0 ≤ nums[i] ≤ 1000` # Output - `[output]` integer array The array sorted such that all even numbers appear before all odd numbers. The relative order of the even and odd numbers must be preserved.","solution":"def sort_array_by_parity(nums): Sorts the array such that all even numbers appear before all odd numbers. The relative order of the even and odd numbers is preserved. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"Write a function that accepts an array of integers and returns a new array where each element is the product of all the elements in the original array except the one at the same index. ``` input: [1, 2, 3, 4] output: [24, 12, 8, 6] example: [5, 6, 2, 3] --> [36, 30, 90, 60] ``` Note: You must solve it without using division, and in O(n) time complexity. All integers in the input array will be non-zero.","solution":"def product_except_self(nums): Returns an array where each element is the product of all the elements in the original array except the one at the same index. length = len(nums) # Initialize the output array with 1\'s for multiplication identity. output = [1] * length # Calculate products to the left of each element. left_product = 1 for i in range(length): output[i] = left_product left_product *= nums[i] # Calculate products to the right of each element and multiply with current output. right_product = 1 for i in range(length - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"---- String Permutations ---- A permutation of a string is another string that contains the same characters, only the order of characters can differ. For example, \\"abcd\\" and \\"dabc\\" are permutations of each other. However, \\"abcd\\" and \\"abce\\" are not permutations of each other since they have different characters. Create a function `is_permutation` that receives two strings and returns `True` if they are permutations of each other, and `False` otherwise. ```python def is_permutation(str1, str2): # Your code here ``` **Examples:** ```python is_permutation(\\"abcd\\", \\"dabc\\") # True is_permutation(\\"hello\\", \\"bello\\") # False is_permutation(\\"test\\", \\"tset\\") # True ``` The function should be case-sensitive, meaning \\"Abc\\" and \\"abc\\" are not considered permutations of each other.","solution":"def is_permutation(str1, str2): Returns True if str1 and str2 are permutations of each other, False otherwise. # Both strings must have the same length to be permutations of each other if len(str1) != len(str2): return False # Convert both strings to sorted lists of characters and compare them return sorted(str1) == sorted(str2)"},{"question":"Given an array of integers, find the length of the shortest subarray that, when sorted, makes the whole array sorted in non-decreasing order. Write a function `shortest_subarray_to_sort(arr)` that takes a list of integers `arr` and returns an integer representing the length of the shortest subarray. Here\'s how the function should work: ```python shortest_subarray_to_sort([2, 6, 4, 8, 10, 9, 15]) # returns 5 because sorting subarray [6, 4, 8, 10, 9] makes the whole array sorted shortest_subarray_to_sort([1, 2, 3, 4]) # returns 0 because the array is already sorted shortest_subarray_to_sort([4, 3, 2, 1]) # returns 4 because the entire array must be sorted shortest_subarray_to_sort([1, 3, 2, 2, 2]) # returns 4 because sorting subarray [3, 2, 2, 2] makes the whole array sorted ``` # Constraints - `1 <= len(arr) <= 10^5` - `-10^5 <= arr[i] <= 10^5` The solution should be efficient enough to handle large arrays within these constraints.","solution":"def shortest_subarray_to_sort(arr): Returns the length of the shortest subarray which, when sorted, makes the whole array sorted in non-decreasing order. n = len(arr) if n <= 1: return 0 # Step 1: Find the subarray that may need sorting (boundaries) start, end = 0, n - 1 # Find the first element that is out of order from the left while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 # If no elements are out of order, the given array is already sorted if start == n - 1: return 0 # Find the first element that is out of order from the right while end > 0 and arr[end] >= arr[end - 1]: end -= 1 # Step 2: Find the minimum and maximum values within the subarray subarray_max = max(arr[start:end+1]) subarray_min = min(arr[start:end+1]) # Step 3: Expand the left boundary to the left while start > 0 and arr[start - 1] > subarray_min: start -= 1 # Step 4: Expand the right boundary to the right while end < n - 1 and arr[end + 1] < subarray_max: end += 1 return end - start + 1"},{"question":"Write a function `find_missing_letter(arr)` that takes an array of consecutive (increasing) letters as input and returns the missing letter in the array. You will always get a valid array. And it will be always exactly one letter missing. The length of the array will always be at least 2. The array will contain letters in only one case. Example: ```python find_missing_letter([\'a\',\'b\',\'c\',\'d\',\'f\']) == \'e\' find_missing_letter([\'O\',\'Q\',\'R\',\'S\']) == \'P\' ``` Use the English alphabet with 26 letters.","solution":"def find_missing_letter(arr): Given an array of consecutive (increasing) letters, returns the missing letter. for i in range(1, len(arr)): if ord(arr[i]) - ord(arr[i-1]) != 1: return chr(ord(arr[i-1]) + 1)"},{"question":"You are given a string s consisting of lowercase English letters. In one operation, you can choose two adjacent characters in the string and swap them. The task is to check if you can make the string a palindrome using any number of such operations. Return a boolean value indicating whether or not it\'s possible to rearrange the string to form a palindrome. Example 1: Input: s = \\"aabb\\" Output: true Explanation: We can rearrange \\"aabb\\" to \\"abba\\" which is a palindrome. Example 2: Input: s = \\"abc\\" Output: false Explanation: We cannot rearrange \\"abc\\" to any palindrome. Constraints: 1 <= s.length <= 10^4","solution":"from collections import Counter def can_form_palindrome(s): Check if it\'s possible to rearrange the string to form a palindrome. Parameters: s (str): The input string consisting of lowercase English letters. Returns: bool: True if we can rearrange the string to form a palindrome, False otherwise. count = Counter(s) # Count the number of characters with odd frequencies odd_count = sum(1 for freq in count.values() if freq % 2 != 0) # A string can be rearranged to a palindrome if there is at most one character with an odd frequency return odd_count <= 1"},{"question":"You are developing a software module that requires converting a given string to \\"snake_case\\". In snake_case, all letters are in lowercase and spaces between words are replaced by underscores (\'_\'). Ensure that multiple spaces are replaced by a single underscore and remove leading or trailing whitespace. Write a function that takes a single string and returns the modified string in snake_case format. **Examples:** ```python to_snake_case(\\"Hello World\\") # => \\"hello_world\\" to_snake_case(\\" Convert this string To Snake_case \\") # => \\"convert_this_string_to_snake_case\\" ```","solution":"def to_snake_case(s): Converts a given string to snake_case by transforming all letters to lowercase and replacing spaces with underscores. Removes leading or trailing spaces and replaces multiple spaces with a single underscore. s = s.strip() # Remove leading/trailing whitespaces s = s.lower() # Convert string to lowercase s = \' \'.join(s.split()) # Remove extra spaces s = s.replace(\' \', \'_\') # Replace spaces with underscores return s"},{"question":"Design an algorithm to determine if a given string can be rearranged to form a palindrome. For this question, a string can be rearranged to form a palindrome if the characters of the string can be rearranged such that the string reads the same forwards and backwards. Example 1: Input: \\"carrace\\" Output: True Explanation: The string \\"carrace\\" can be rearranged to form \\"racecar\\", which is a palindrome. Example 2: Input: \\"hello\\" Output: False Explanation: The string \\"hello\\" cannot be rearranged to form a palindrome. Note: 1 <= s.length <= 10^5 s consists of lowercase English letters.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. :param s: input string :return: True if can be rearranged to form a palindrome, otherwise False count = Counter(s) odd_count = sum(1 for x in count.values() if x % 2 != 0) return odd_count <= 1"},{"question":"Farmer John\'s barn has M cows, and each cow has a certain milk production rate. Farmer John wants to ensure his cows are happy, so he performs Q operations to either change the milk production rate of a cow or to query the total milk produced by a subset of cows. Help Farmer John keep track of the milk production rates and answer his queries. -----Input----- The first line contains two integers M (1 ≤ M ≤ 10^5) and Q (1 ≤ Q ≤ 10^5) — the number of cows and the number of operations, respectively. The second line contains M integers p_1, p_2, ..., p_M (1 ≤ p_i ≤ 10^6) — the initial milk production rates of the cows. Each of the next Q lines contains one of the following operations: 1. \\"1 i x\\" — change the production rate of the i-th cow to x (1 ≤ i ≤ M, 1 ≤ x ≤ 10^6). 2. \\"2 l r\\" — calculate the total milk production of cows with indices between l and r (1 ≤ l ≤ r ≤ M). -----Output----- For each operation of type 2, output a single integer — the total milk production of the subset of cows. -----Examples----- Input 5 4 2 1 3 4 5 2 2 4 1 3 10 2 3 5 2 1 5 Output 8 19 22 Input 3 3 10 20 30 2 1 2 1 2 15 2 1 3 Output 30 55","solution":"class CowFarm: def __init__(self, production_rates): self.production_rates = production_rates self.prefix_sums = self._build_prefix_sums() def _build_prefix_sums(self): prefix_sums = [0] * (len(self.production_rates) + 1) for i in range(1, len(prefix_sums)): prefix_sums[i] = prefix_sums[i-1] + self.production_rates[i-1] return prefix_sums def update(self, i, x): difference = x - self.production_rates[i-1] self.production_rates[i-1] = x for j in range(i, len(self.prefix_sums)): self.prefix_sums[j] += difference def query(self, l, r): return self.prefix_sums[r] - self.prefix_sums[l-1] def process_operations(M, Q, production_rates, operations): farm = CowFarm(production_rates) results = [] for op in operations: if op[0] == 1: farm.update(op[1], op[2]) elif op[0] == 2: results.append(farm.query(op[1], op[2])) return results"},{"question":"Alice is learning about permutations and combinations. She is working on a problem where she needs to find the next lexicographical permutation of a given string. If no such permutation exists, she should return the string in ascending order. Can you help Alice write a function to solve this problem? -----Input----- The first line of the input contains a single integer T denoting the number of test cases. T test cases follow. For each test case, the input is a string consisting of lowercase English letters. -----Output----- Output the answer for each test case in a single line. The answer should be the next lexicographical permutation of the input string. If no such permutation exists, output the string in ascending order. -----Constraints----- - 1 ≤ T ≤ 105 - 1 ≤ length of the string ≤ 100 -----Example----- Input:4 ab bb hefg dhck Output:ba bb hegf dhkc","solution":"def next_lexicographical_permutation(s): Generates the next lexicographical permutation of the string s if possible. Otherwise, returns the string in ascending order. s = list(s) n = len(s) # Step 1: Find the largest index k such that s[k] < s[k + 1]. If no such index exists, return the sorted string. k = -1 for i in range(n - 1): if s[i] < s[i + 1]: k = i if k == -1: return \\"\\".join(sorted(s)) # Step 2: Find the largest index l greater than k such that s[k] < s[l] l = -1 for i in range(k + 1, n): if s[k] < s[i]: l = i # Step 3: Swap the value of s[k] with that of s[l] s[k], s[l] = s[l], s[k] # Step 4: Reverse the sequence from s[k + 1] up to and including the final element s[n - 1]. s = s[:k + 1] + s[k + 1:][::-1] return \\"\\".join(s) def process_test_cases(test_cases): results = [] for s in test_cases: results.append(next_lexicographical_permutation(s)) return results"},{"question":"Given a string containing only the characters \'A\', \'B\', and \'C\', write a function that rearranges the string such that no two adjacent characters are the same. If it is not possible to rearrange the string to meet the requirement, return an empty string. For example, if the input is `\\"AAB\\"`, the function could return `\\"ABA\\"`. If the input is `\\"AAAB\\"`, it should return an empty string since it\'s not possible to rearrange it to prevent adjacent \'A\'s. You may assume the input string length will not exceed 50 characters.","solution":"import heapq from collections import Counter def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If not possible, returns an empty string. # Counter to keep the count of the characters count = Counter(s) # Create a max heap based on the count max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) result = [] prev_char, prev_freq = None, 0 while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # Since we used one instance of char, decrease the frequency if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 # Decrease the freq as we\'ve used one char result = \'\'.join(result) # Check if rearrangement is valid by comparing lengths if len(result) != len(s): return \\"\\" return result"},{"question":"A scientist is working on a specialized genetic algorithm to find a unique sequence of DNA, represented as a string of the characters \'A\', \'C\', \'G\', and \'T\'. The DNA string must meet specific criteria for it to be considered valid. Specifically, the string must contain the same number of occurrences of each character and the scientist can remove up to `K` characters from the original string to achieve this. The goal is to determine if it\'s possible to achieve a valid DNA string after removing at most `K` characters. -----Input:----- - The first line consists of a single integer `T`, the number of test cases. - For each test case, the first line contains two space-separated integers `N` and `K`, where `N` is the length of the DNA string. - The second line of each test case contains a string of length `N` consisting of the characters \'A\', \'C\', \'G\', and \'T\'. -----Output:----- For each test case, print in a single line, `YES` if it\'s possible to achieve a valid DNA string, or `NO` if it is not. -----Constraints:----- - `1 <= T <= 100` - `1 <= N <= 1000` - `0 <= K <= N` -----Sample Input:----- 3 8 2 AAGCTTGC 10 3 AACCGGTTAC 6 1 AAGTCA -----Sample Output:----- YES YES NO -----Explanation----- For the first test case, the initial string is \\"AAGCTTGC\\". You can remove one \'A\' and one \'T\' to get the valid string \\"AGCTGC\\", which contains each character exactly once. For the second test case, the initial string is \\"AACCGGTTAC\\". You can remove one \'C\' and two \'A\'s to get the valid string \\"CCGGTT\\", which contains each character exactly twice. For the third test case, the initial string is \\"AAGTCA\\". It is not possible to remove only one character to balance the occurrences of each character.","solution":"def is_valid_dna_string(N, K, dna_string): Determine if a valid DNA string can be obtained by removing up to K characters from collections import Counter counter = Counter(dna_string) max_count = max(counter.values()) min_count = min(counter.values()) total_excess = sum(count - min_count for count in counter.values()) if total_excess <= K: return \\"YES\\" else: return \\"NO\\" def evaluate_test_cases(test_cases): Evaluate array of test cases and return the results results = [] for (N, K, dna_string) in test_cases: result = is_valid_dna_string(N, K, dna_string) results.append(result) return results"},{"question":"# Definition A **_perfect square number_** is a number that can be expressed as the product of an integer with itself (for example, 1 is 1 times 1, 4 is 2 times 2, 9 is 3 times 3, and so on). **_Given_** a number, *determine if it is a perfect square number or not*. ___ # Notes * **_The number_** passed will be **_non-negative_** (N >= 0). * The number **_zero_** (0) is considered as a **_perfect square number_**. ___ # Input >> Output Examples ``` isPerfectSquare(4) ==> return \\"Perfect Square!!\\" ``` Explanation: The number 4 is a perfect square number as it is 2 times 2. ``` isPerfectSquare(15) ==> return \\"NOT!!\\" ``` Explanation: The number 15 is not a perfect square number as it cannot be expressed as the product of an integer with itself. ``` isPerfectSquare(0) ==> return \\"Perfect Square!!\\" ``` Explanation: The number 0 is a perfect square number as it is 0 times 0. ``` isPerfectSquare(1) ==> return \\"Perfect Square!!\\" ``` Explanation: The number 1 is a perfect square number as it is 1 times 1. ``` isPerfectSquare(7) ==> return \\"NOT!!\\" ``` Explanation: The number 7 is not a perfect square number as it cannot be expressed as the product of an integer with itself. ``` isPerfectSquare(144) ==> return \\"Perfect Square!!\\" ``` Explanation: The number 144 is a perfect square number as it is 12 times 12. ___ # Enjoy Learning !!","solution":"import math def isPerfectSquare(number): Determine if the given number is a perfect square number or not. Args: number (int): The number to check. Returns: str: \\"Perfect Square!!\\" if the number is a perfect square, otherwise \\"NOT!!\\" if number < 0: return \\"NOT!!\\" sqrt = int(math.sqrt(number)) if sqrt * sqrt == number: return \\"Perfect Square!!\\" else: return \\"NOT!!\\""},{"question":"Create a function that takes a list of integers and returns a new list where each element is replaced by the square root of the nearest perfect square. Assume the input list contains non-negative integers and the output list should contain integers only.","solution":"import math def nearest_perfect_square(nums): Takes a list of non-negative integers and returns a new list where each element is replaced by the square root of the nearest perfect square. def find_nearest_square(n): lower_sqrt = math.floor(math.sqrt(n)) upper_sqrt = lower_sqrt + 1 if abs(n - lower_sqrt**2) <= abs(n - upper_sqrt**2): return lower_sqrt else: return upper_sqrt return [find_nearest_square(num) for num in nums]"},{"question":"You are given a list of students along with the scores they have obtained in different subjects. Your task is to write a function `top_student_per_subject` that takes a list of dictionaries as input. Each dictionary represents a student and contains their name and scores in multiple subjects. The function should return a dictionary where the keys are the subject names and the values are the names of the students who have the highest score in that subject. If multiple students have the highest score in a subject, include all their names in a list under that subject. Example Input: ```python students = [ {\\"name\\": \\"Alice\\", \\"math\\": 95, \\"science\\": 90, \\"literature\\": 85}, {\\"name\\": \\"Bob\\", \\"math\\": 86, \\"science\\": 95, \\"literature\\": 88}, {\\"name\\": \\"Charlie\\", \\"math\\": 95, \\"science\\": 85, \\"literature\\": 95}, {\\"name\\": \\"David\\", \\"math\\": 89, \\"science\\": 95, \\"literature\\": 93} ] ``` Output: ```python { \\"math\\": [\\"Alice\\", \\"Charlie\\"], \\"science\\": [\\"Bob\\", \\"David\\"], \\"literature\\": [\\"Charlie\\"] } ``` Function Signature: ```python def top_student_per_subject(students: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[List[str], str]]: ``` Your function should handle edge cases such as: - An empty list of students. - Subjects where all students have the same score. Also, ensure that your function is efficient and can handle a large number of students and subjects.","solution":"from typing import List, Dict, Union def top_student_per_subject(students: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[List[str], str]]: Returns the top student or students per each subject. Parameters: students (List[Dict[str, Union[str, int]]]): A list of dictionaries, each containing a student\'s name and their scores in various subjects. Returns: Dict[str, Union[List[str], str]]: A dictionary where the keys are subject names and the values are the names of the students who scored the highest in that subject. If multiple students have the highest score, their names are listed in a list. if not students: return {} top_students = {} # Assuming all keys except \'name\' are subject names subjects = students[0].keys() - {\'name\'} for subject in subjects: max_score = -float(\'inf\') top_scorers = [] for student in students: score = student[subject] if score > max_score: max_score = score top_scorers = [student[\'name\']] elif score == max_score: top_scorers.append(student[\'name\']) if len(top_scorers) == 1: top_students[subject] = top_scorers[0] else: top_students[subject] = top_scorers return top_students"},{"question":"You are given an integer matrix M of size n x m. You need to rotate the matrix 90 degrees clockwise and print the resulting matrix. -----Input----- The first line contains two integers n and m denoting the number of rows and columns of the matrix, respectively. Each of the next n lines contains m integers representing the matrix elements. -----Output----- Output the resulting matrix after rotating it 90 degrees clockwise, with one line per row of the output matrix. -----Subtask 1 (30 points)----- - 1 ≤ n ≤ 100 - 1 ≤ m ≤ 100 - Each matrix element is an integer such that -1000 ≤ M[i][j] ≤ 1000 -----Subtask 2 (70 points)----- - 1 ≤ n ≤ 1000 - 1 ≤ m ≤ 1000 - Each matrix element is an integer such that -1000 ≤ M[i][j] ≤ 1000 -----Example----- Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 7 4 1 8 5 2 9 6 3 -----Explanation----- By rotating the matrix 90 degrees clockwise, the first column [1 4 7] becomes the first row [7 4 1], the second column [2 5 8] becomes the second row [8 5 2], and the third column [3 6 9] becomes the third row [9 6 3].","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates the input matrix 90 degrees clockwise. n = len(matrix) m = len(matrix[0]) rotated_matrix = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix"},{"question":"Leo is working on a robot that can move on an infinite grid. The grid\'s cells are identified by integer coordinates (x, y). The robot starts at the position (0, 0). Leo wants to control the robot using a series of commands given as a string. Each command is a character that directs the robot to move one unit in one of the four cardinal directions: - \'U\' (up) - increases the y-coordinate by 1. - \'D\' (down) - decreases the y-coordinate by 1. - \'L\' (left) - decreases the x-coordinate by 1. - \'R\' (right) - increases the x-coordinate by 1. Leo is interested in knowing the robot\'s final position after executing all the commands in the string. Help Leo by computing the final position of the robot. -----Input----- - The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a string S representing the sequence of commands. -----Output----- For each test case, print two space-separated integers denoting the final x and y coordinates of the robot. -----Constraints----- - 1 ≤ T ≤ 10^5 - 1 ≤ |S| ≤ 10^5 - S contains only characters \'U\', \'D\', \'L\', \'R\' - The sum of |S| over all test cases does not exceed 10^6 -----Example Input----- 3 UUDDLRLR UUUU DDDDRRR -----Example Output----- 0 0 0 4 3 -4 -----Explanation----- - In the first test case, the robot returns to its starting position after executing the commands \\"UUDDLRLR\\", resulting in (0, 0). - In the second test case, the robot moves up four times, resulting in (0, 4). - In the third test case, the robot moves down four times and right three times, resulting in (3, -4).","solution":"def final_position(commands): Computes the final position of the robot after a series of commands. :param commands: A string representing the sequence of commands. :return: A tuple (x, y) representing the final coordinates. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y) def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list of tuples. :param test_cases: A list of strings where each string is a sequence of commands. :return: A list of tuples, where each tuple is the final position for the corresponding test case. results = [] for commands in test_cases: results.append(final_position(commands)) return results"},{"question":"=====Function Descriptions===== collections.Counter() This tool is used to count occurrences of elements in a container. It stores the items as dictionary keys and the counts as dictionary values. Sample Code >>> from collections import Counter >>> my_str = \\"aabbcc\\" >>> print Counter(my_str) Counter({\'a\': 2, \'b\': 2, \'c\': 2}) >>> my_list = [\'a\', \'a\', \'b\', \'b\', \'c\'] >>> print Counter(my_list) Counter({\'a\': 2, \'b\': 2, \'c\': 1}) =====Problem Statement===== You are given a string S. Your task is to count the occurrences of each character in the string and then find the 3 most common characters. If there are ties, choose the lexicographically smaller character. Example S = \\"aabbbccde\\" The 3 most common characters are: b 3 a 2 c 2 =====Input Format===== A single line containing the string S. =====Constraints===== 0 < len(S) < 100 =====Output Format===== Output the 3 most common characters and their counts in separate lines, in the format specified in the example.","solution":"from collections import Counter def most_common_chars(s): Returns the 3 most common characters in the string \'s\' along with their counts. Characters with the same count are sorted lexicographically. if not s: return [] # Create a Counter object to count occurrences of elements in the string counter = Counter(s) # Get the 3 most common elements, sorted by count and lexicographically by character most_common = counter.most_common() most_common.sort(key=lambda x: (-x[1], x[0])) return most_common[:3]"},{"question":"# Story You\'ve been enlisted to help with city traffic management. An important part of your job is to control and optimize the traffic lights at various intersections to minimize congestion. A basic traffic light can switch between Red, Green, and Yellow. Each traffic light follows a specific sequence: it starts at Green, transitions to Yellow after a specified duration, and then turns Red. Traffic flow is only possible on a Green light. # Kata Task Write a function that simulates the operation of a single traffic light based on the provided durations for each light color. Calculate the total time taken for each complete cycle of states (Green -> Yellow -> Red -> Green) to occur. Input Notes * The durations for Green, Yellow, and Red lights will be given in seconds. * Each duration will be an integer between 1 and 120 seconds. Output Notes * Calculate and return the total duration of one full cycle of the traffic light sequence. # Examples Given the durations for each light color: 1. Green: 60s, Yellow: 5s, Red: 90s - A complete traffic light cycle would be 60 + 5 + 90 = 155 seconds - The function should return: `155` 2. Green: 30s, Yellow: 4s, Red: 45s - A complete traffic light cycle would be 30 + 4 + 45 = 79 seconds - The function should return: `79`","solution":"def traffic_light_cycle_duration(green_duration, yellow_duration, red_duration): Calculate the total time of one full cycle of the traffic light sequence. Args: green_duration (int): Duration of the green light in seconds. yellow_duration (int): Duration of the yellow light in seconds. red_duration (int): Duration of the red light in seconds. Returns: int: Total duration of the traffic light cycle in seconds. return green_duration + yellow_duration + red_duration"},{"question":"A large software company has developed a new encryption algorithm. This algorithm starts by converting each letter of a given lowercase string into its corresponding integer position in the alphabet (a=1, b=2, ..., z=26). Then, every third number in this sequence is replaced by its square. Finally, the encrypted message is obtained by summing all the numbers (including the squared ones). Write a program to help the company encrypt their messages. ------Input:------ - The first line of input will contain a single integer T, the number of test cases. - Each of the following T lines will contain a single lowercase string S. ------Output:------ For each test case, output the encrypted sum in a new line. ------Constraints:------ - 1 leq T leq 10 - 1 leq |S| leq 10^5 - S consists of only lowercase English letters. ------Sample Input:------ 2 hello world ------Sample Output:------ 64 226 ------Explanation:------ For the string \\"hello\\": - h (8), e (5), l (12), l (12), o (15) - After converting to positions: [8, 5, 12, 12, 15] - After squaring every third number: [8, 5, 144, 12, 15] - Sum: 8 + 5 + 144 + 12 + 15 = 184 For the string \\"world\\": - w (23), o (15), r (18), l (12), d (4) - After converting to positions: [23, 15, 18, 12, 4] - After squaring every third number: [23, 15, 324, 12, 4] - Sum: 23 + 15 + 324 + 12 + 4 = 378","solution":"def encrypt_message(S): Encrypts the message according to the described algorithm. Parameters: S (str): Lowercase alphabetic string. Returns: int: Encrypted sum. encrypted_sum = 0 for i, char in enumerate(S): value = ord(char) - ord(\'a\') + 1 if (i + 1) % 3 == 0: value = value ** 2 encrypted_sum += value return encrypted_sum def solve(T, test_cases): results = [] for S in test_cases: results.append(encrypt_message(S)) return results"},{"question":"# Problem Statement You are given an integer `n`. Write a function that computes the `nth` Fibonacci number. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 However, the twist in this problem is that you must use an iterative approach rather than a recursive approach to avoid potential stack overflow issues for large values of `n`. # Input - A single integer `n` (0 ≤ n ≤ 10^5) # Output - A single integer which is the `nth` Fibonacci number. # Example Example 1 - Input: `5` - Output: `5` Explanation: The first few Fibonacci numbers are [0, 1, 1, 2, 3, 5]. The 5th Fibonacci number is `5`. Example 2 - Input: `10` - Output: `55` Explanation: The Fibonacci sequence up to the 10th term is [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]. The 10th Fibonacci number is `55`. # Constraints - You must implement the function iteratively. - Use O(1) additional space (i.e., you can only use a fixed amount of variables, and not arrays or other dynamic structures). - Your solution should be efficient enough to handle the maximum input limit.","solution":"def fibonacci(n): Computes the nth Fibonacci number using an iterative approach. :param n: integer, the order of the Fibonacci number to compute :return: integer, the nth Fibonacci number if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are given an array of integers. Your task is to determine the length of the longest contiguous subarray where every element is sorted in non-decreasing order. -----Input:----- - The first line of the input contains a single integer T, the number of test cases. - Each test case contains two lines. - The first line contains an integer N, the length of the array. - The second line contains N integers, the elements of the array. -----Output:----- For each test case, output the length of the longest contiguous subarray where every element is sorted in non-decreasing order. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - -10^4 leq text{array elements} leq 10^4 -----Sample Input:----- 2 6 1 2 2 4 5 3 5 5 4 3 2 1 -----Sample Output:----- 5 1 -----Explanation:----- For the first test case, the longest contiguous subarray that is sorted in non-decreasing order is [1, 2, 2, 4, 5], which has a length of 5. For the second test case, no elements are sorted in non-decreasing order except each individual element, so the longest length is 1.","solution":"def longest_non_decreasing_subarray_length(arr): Returns the length of the longest contiguous subarray in which the elements are sorted in non-decreasing order. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] >= arr[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] array = test_cases[i][1] results.append(longest_non_decreasing_subarray_length(array)) return results"},{"question":"Chef is very fond of symmetry. He considers a string symmetric if it reads the same backward as forward. Chef has a new task: given a collection of strings, he wants you to determine which ones are symmetric. -----Input----- - The first line contains an integer N denoting the number of strings. - Each of the next N lines contains a single string S_i. -----Output----- For each string, print a single line containing the string \\"Symmetric\\" if the string is symmetric, or \\"Not Symmetric\\" if the string is not symmetric. -----Constraints----- - 1 leq N leq 50 - 1 leq |S_i| leq 100 - Each character of S_i is a lowercase English letter. -----Example Input----- 3 level hello deified -----Example Output----- Symmetric Not Symmetric Symmetric -----Explanation----- Example case 1: The string \\"level\\" reads the same backward as forward. Example case 2: The string \\"hello\\" does not read the same backward as forward. Example case 3: The string \\"deified\\" reads the same backward as forward.","solution":"def is_symmetric_string(s): Checks if a string is symmetric (palindrome). :param s: A string to be checked :return: \\"Symmetric\\" if the string is a palindrome, otherwise \\"Not Symmetric\\" return \\"Symmetric\\" if s == s[::-1] else \\"Not Symmetric\\" def check_symmetric_strings(strings): Checks a list of strings and determines which ones are symmetric. :param strings: A list of strings to be checked :return: A list containing \\"Symmetric\\" or \\"Not Symmetric\\" for each string return [is_symmetric_string(s) for s in strings]"},{"question":"Given an array of integers and an integer k, you need to find the maximum sum of a subarray of size k. Note: - The array will have at least size k. - The elements within the array can be both positive and negative numbers. Example 1: Input: arr = [1, 2, 3, 4, 5] k = 3 Output: 12 Explanation: The subarray of size 3 with the maximum sum is [3, 4, 5]. Example 2: Input: arr = [3, -2, 7, -1, 2, 4, 1, 3] k = 4 Output: 12 Explanation: The subarray of size 4 with the maximum sum is [7, -1, 2, 4]. Example 3: Input: arr = [-1, -2, -3, -4] k = 2 Output: -3 Explanation: The subarray of size 2 with the maximum sum is [-1, -2].","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a subarray of size k. n = len(arr) # Initialize the maximum sum with the sum of the first subarray of size k max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window from the start to the end of the array for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Design a function to return the longest path in a m x n matrix, where each path comprises strictly increasing elements. The path can move in four possible directions (up, down, left, and right). Example 1: Input: matrix = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] Output: 4 Explanation: The longest increasing path is [1, 2, 6, 9]. Example 2: Input: matrix = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] Output: 4 Explanation: The longest increasing path is [3, 4, 5, 6]. Note: - m, n <= 200 - The elements of the matrix can be negative.","solution":"def longestIncreasingPath(matrix): Returns the length of the longest increasing path in a matrix. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) cache = [[-1] * n for _ in range(m)] def dfs(i, j): if cache[i][j] != -1: return cache[i][j] longest = 1 for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]: if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]: longest = max(longest, 1 + dfs(x, y)) cache[i][j] = longest return longest max_length = 0 for i in range(m): for j in range(n): max_length = max(max_length, dfs(i, j)) return max_length"},{"question":"Write a function which, given a list of integers, distributes them into two lists such that: 1. The sum of one list is as close as possible to the sum of the other list. 2. The difference in the number of elements between the two lists does not exceed 1. The function should return a tuple containing the two lists. -----Input----- - A list of integers `arr` (1 leq len(arr) leq 10^5) with values between 1 and 1000. -----Output----- - A tuple of two lists (list1, list2) satisfying the conditions mentioned. -----Example----- Input [1, 2, 3, 4, 5, 6] Output ([1, 2, 6], [3, 4, 5]) -----Note----- In the example, the sum of `[1, 2, 6]` is 9 and the sum of `[3, 4, 5]` is 12, and the difference is minimized to 3.","solution":"def distribute(arr): Distributes the integers in `arr` into two lists such that: 1. The sum of one list is as close as possible to the sum of the other list. 2. The difference in the number of elements between the two lists does not exceed 1. arr.sort(reverse=True) list1, list2 = [], [] sum1, sum2 = 0, 0 for num in arr: if sum1 <= sum2: list1.append(num) sum1 += num else: list2.append(num) sum2 += num return (list1, list2)"},{"question":"Write a Python function `calculate_time_difference` that determines the difference in hours and minutes between two given times. The function should take two string inputs representing times in the \\"hh:mm AM/PM\\" format and return a string showing the difference in \\"HH hours MM minutes\\" format. For example: ```python # should return \\"1 hours 15 minutes\\" print(calculate_time_difference(\\"02:30 PM\\", \\"03:45 PM\\")) # should return \\"12 hours 0 minutes\\" print(calculate_time_difference(\\"12:00 AM\\", \\"12:00 PM\\")) ``` Consider that the provided times are always valid and ensure that you correctly handle both AM and PM times. Make sure to calculate the time difference in a way that it always results in positive intervals. # Function Signature ```python def calculate_time_difference(time1: str, time2: str) -> str: ``` # Constraints - The input strings will always be in the 12-hour format with \\"AM/PM\\" notation. - The times will be valid and both time1 and time2 will always be on the same day. # Examples ```python assert calculate_time_difference(\\"11:00 AM\\", \\"02:30 PM\\") == \\"3 hours 30 minutes\\" assert calculate_time_difference(\\"11:59 PM\\", \\"12:01 AM\\") == \\"0 hours 2 minutes\\" assert calculate_time_difference(\\"07:15 AM\\", \\"09:45 AM\\") == \\"2 hours 30 minutes\\" assert calculate_time_difference(\\"02:00 PM\\", \\"03:15 PM\\") == \\"1 hours 15 minutes\\" ```","solution":"from datetime import datetime def calculate_time_difference(time1: str, time2: str) -> str: Calculate the difference between two times in \\"HH hours MM minutes\\" format. :param time1: str, time in \\"hh:mm AM/PM\\" format. :param time2: str, time in \\"hh:mm AM/PM\\" format. :return: str, difference in \\"HH hours MM minutes\\" format. # Define the format of the input time strings time_format = \\"%I:%M %p\\" # Convert the times to datetime objects t1 = datetime.strptime(time1, time_format) t2 = datetime.strptime(time2, time_format) # Calculate the difference in minutes delta = int((t2 - t1).total_seconds() // 60) # If the delta is negative, make it positive if delta < 0: delta += 1440 # Add 24 hours worth of minutes # Convert the difference into hours and minutes hours = delta // 60 minutes = delta % 60 # Return the formatted string return f\\"{hours} hours {minutes} minutes\\""},{"question":"A factory production line consists of assembling widgets. Each widget requires multiple parts produced at different workstations. The assembly process can be represented as a directed acyclic graph where nodes represent workstations and directed edges represent the dependency of one workstation\'s output being used as an input for another. For this task, you are given the number of workstations and the dependency graph, and you need to determine the minimum time required to assemble a complete widget, assuming each workstation takes exactly one unit time to produce its respective part once all its dependencies are met. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the number of workstations. The second line contains an integer m (0 leq m leq 10^5), the number of directed edges in the dependency graph. The next m lines each contain two integers u and v (1 leq u,v leq n), indicating a directed edge from workstation u to workstation v. -----Output----- Print a single integer, the minimum time required to assemble a complete widget. -----Examples----- Input 5 4 1 2 1 3 3 4 2 4 Output 3 Input 6 6 1 2 1 3 2 4 3 4 4 5 5 6 Output 5 Input 4 3 1 2 2 3 3 4 Output 4 -----Note----- In the first test, the graph can be visualized as follows: ``` 1 → 2 ↘ ↘ 3 → 4 ``` The longest path is 1 rightarrow 3 rightarrow 4 or 1 rightarrow 2 rightarrow 4, each requiring 3 units of time. In the second test, the graph can be visualized as: ``` 1 → 2 → 4 → 5 → 6 ↘ 3 → 4 ``` The longest path is 1 rightarrow 2 rightarrow 4 rightarrow 5 rightarrow 6, requiring 5 units of time. In the third test, the graph can be visualized as: ``` 1 → 2 → 3 → 4 ``` The longest path is 1 rightarrow 2 rightarrow 3 rightarrow 4, requiring 4 units of time.","solution":"from collections import defaultdict, deque def minimum_time_to_assemble_widget(n, m, edges): Calculate the minimum time required to assemble a widget based on the dependency graph. Args: - n (int): Number of workstations. - m (int): Number of directed edges in the dependency graph. - edges (list of tuples): Each tuple (u, v) indicates a directed edge from u to v. Returns: - int: Minimum time required to complete the widget assembly. # Create an adjacency list and in-degree map adj_list = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} for u, v in edges: adj_list[u].append(v) in_degree[v] += 1 # Queue for processing workstations with no dependencies zero_in_degree_queue = deque() # Distance table to keep track of the minimum time to reach each workstation distance = {i: 0 for i in range(1, n + 1)} # Initialize queue with workstations having in-degree 0 for i in range(1, n + 1): if in_degree[i] == 0: zero_in_degree_queue.append(i) distance[i] = 1 # Each node itself takes 1 unit time # Perform topological sort and update distance table while zero_in_degree_queue: current = zero_in_degree_queue.popleft() current_dist = distance[current] for neighbor in adj_list[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) distance[neighbor] = max(distance[neighbor], current_dist + 1) # The minimum time required to assemble the widget is the maximum value in the distance table return max(distance.values())"},{"question":"Write a function `removeDuplicates` that takes a list of strings and returns a new list where all duplicate strings have been removed. The order of the elements in the original list should be preserved in the output. Note - The comparison of strings should be case-insensitive. Examples ``` removeDuplicates([\\"apple\\", \\"Apple\\", \\"banana\\", \\"Banana\\", \\"APPLE\\", \\"BANANA\\"]) returns [\\"apple\\", \\"banana\\"] removeDuplicates([\\"dog\\", \\"cat\\", \\"dog\\", \\"Dog\\", \\"Cat\\", \\"CAT\\", \\"DOG\\"]) returns [\\"dog\\", \\"cat\\"] removeDuplicates([\\"one\\", \\"two\\", \\"three\\", \\"one\\", \\"Two\\", \\"THREE\\"]) returns [\\"one\\", \\"two\\", \\"three\\"] removeDuplicates([\\"Hello\\", \\"hello\\", \\"HELLO\\", \\"world\\", \\"WORLD\\"]) returns [\\"Hello\\", \\"world\\"] ```","solution":"def removeDuplicates(strings): Returns a new list with duplicates removed from the input list of strings. The comparison is case-insensitive and the order of elements is preserved. :param strings: List of strings to process. :return: List of strings with duplicates removed. seen = set() result = [] for s in strings: lower_s = s.lower() if lower_s not in seen: seen.add(lower_s) result.append(s) return result"},{"question":"Consider a single-elimination tournament where N players compete in 1-on-1 matches. Each match is played between two players, and the winner advances to the next round while the loser is eliminated. The winner of the tournament is the last player remaining after all rounds of matches. Each player has a skill level. The outcome of a match between any two players is determined solely by their skill levels: the player with the higher skill level always wins. If two players have the same skill level, either one can win (in this case, assume player with lower player number wins). Your task is to write a program that, given the skill levels of the N players, determines the winner of the tournament. Assume that N is always a power of 2 (i.e., 1, 2, 4, 8, etc.). Input The first line contains a single integer N (N ≤ 2^14) representing the number of players. The second line contains N integers S1, S2, ..., SN, where Si represents the skill level of the i-th player. All skill levels are distinct and between 1 and 10^9. Output Output a single integer representing the player number (1-based index) who wins the tournament. Example Input: 8 1 16 8 4 3 9 5 2 Output: 2 Explanation For the given example, the tournament progresses as follows: Round 1: 1 vs 16 -> 16 wins 8 vs 4 -> 8 wins 3 vs 9 -> 9 wins 5 vs 2 -> 5 wins Round 2: 16 vs 8 -> 16 wins 9 vs 5 -> 9 wins Final Round: 16 vs 9 -> 16 wins Thus, the winner is player number 2.","solution":"def find_tournament_winner(N, skills): Determine the winner of the tournament based on player skills. Parameters: N (int): Number of players (always a power of 2). skills (list): List of skill levels of the players. Returns: int: 1-based index of the player who wins the tournament. players = list(range(N)) # Player indices (0-based) while len(players) > 1: next_round_players = [] for i in range(0, len(players), 2): # Player i vs Player i+1 if skills[players[i]] > skills[players[i + 1]]: next_round_players.append(players[i]) else: next_round_players.append(players[i + 1]) players = next_round_players return players[0] + 1 # Convert 0-based index to 1-based"},{"question":"Description Design a function that determines if a given string is a valid email address. The rules for a valid email address are as follows: - It must contain exactly one \\"@\\" symbol. - The \\"@\\" symbol must not be the first or last character. - There must be at least one \\".\\" symbol in the domain part (i.e., after the \\"@\\" symbol). - The \\".\\" symbol must not be the first or last character in the domain part. The function should return true if the string is a valid email address, and false otherwise. Examples: # Extra info - You will only be passed strings. - The string can contain any standard keyboard character. - Assume a simplified version of email validation, ignoring more complex rules such as international domain names or quoted strings. ```python def is_valid_email(email: str) -> bool: if email.count(\'@\') != 1: return False local_part, domain_part = email.split(\'@\') if not local_part or not domain_part: return False if \'.\' not in domain_part: return False if domain_part.startswith(\'.\') or domain_part.endswith(\'.\'): return False return True ```","solution":"def is_valid_email(email: str) -> bool: Checks if the provided string is a valid email address based on defined rules. Parameters: email (str): The email address to validate. Returns: bool: True if the email address is valid, False otherwise. if email.count(\'@\') != 1: return False local_part, domain_part = email.split(\'@\') if not local_part or not domain_part: return False if \'.\' not in domain_part: return False if domain_part.startswith(\'.\') or domain_part.endswith(\'.\'): return False return True"},{"question":"=====Function Descriptions===== Sorting Algorithms Sorting algorithms are techniques to arrange data in a particular order. These algorithms can be used to sort data in ascending or descending order. Examples: Bubble Sort Bubble sort is an algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. Merge Sort Merge sort divides the array into two halves, recursively sorts them, and then merges the sorted halves to produce the final sorted array. =====Problem Statement===== You are given a list of integers. Sort the list in ascending order using the merge sort algorithm and print the sorted list. =====Input Format===== The first line contains an integer n, the number of integers in the list. The next line contains n space-separated integers. =====Constraints===== 0 < n ≤ 1000 -10^6 ≤ integer ≤ 10^6 =====Output Format===== Print the sorted list of integers in a single line, space-separated. =====Sample Input===== 5 3 1 4 1 5 =====Sample Output===== 1 1 3 4 5 =====Explanation===== The input list [3, 1, 4, 1, 5] is provided with n=5. After sorting using merge sort, the output is [1, 1, 3, 4, 5].","solution":"def merge_sort(arr): Sorts a list of integers in ascending order using the merge sort algorithm. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into one sorted list. sorted_list = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list # To handle the specific problem format def sort_integers(n, arr): Sorts a list of n integers using merge sort and returns the sorted list. return merge_sort(arr) # Example usage n = 5 arr = [3, 1, 4, 1, 5] sorted_list = sort_integers(n, arr) print(\\" \\".join(map(str, sorted_list)))"},{"question":"Given an array of integers, your task is to find all unique triplets in the array which give the sum of zero. Note: - The solution set must not contain duplicate triplets. - You may assume that the array contains only integers. Example: ```python threeSum([-1, 0, 1, 2, -1, -4]) ``` Output: ``` [[-1, 0, 1], [-1, -1, 2]] ``` Explanation: - The input array is [-1, 0, 1, 2, -1, -4]. - The unique triplets that sum to zero are [-1, 0, 1] and [-1, -1, 2]. Note that the order of the triplets and the order within the triplets do not matter.","solution":"def threeSum(nums): nums.sort() result = [] length = len(nums) for i in range(length - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, length - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s < 0: left += 1 elif s > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"You are working on a project involving data compression and need to implement a simple Run-Length Encoding (RLE) algorithm. RLE is a lossless data compression technique where runs of data (consecutive identical elements) are stored as a single data value and count rather than as the original run. Your task is to write a function that performs Run-Length Encoding for a given list of characters. For example, the string \\"aaabbbcc\\" would be encoded as [(\\"a\\", 3), (\\"b\\", 3), (\\"c\\", 2)]. Your function should take a list of characters as input and return a list of tuples where each tuple contains a character and its count. ```python def rle_encode(data): # Implement the RLE encoding algorithm here data1 = [\'a\', \'a\', \'a\', \'b\', \'b\', \'b\', \'c\', \'c\'] rle_encode(data1) == [(\'a\', 3), (\'b\', 3), (\'c\', 2)] data2 = [\'a\', \'a\', \'b\', \'c\', \'c\', \'c\'] rle_encode(data2) == [(\'a\', 2), (\'b\', 1), (\'c\', 3)] data3 = [\'a\'] rle_encode(data3) == [(\'a\', 1)] data4 = [] rle_encode(data4) == [] data5 = [\'a\', \'a\', \'a\', \'a\'] rle_encode(data5) == [(\'a\', 4)] ``` Note: Your function should handle consecutive runs of a single character and should be able to handle empty input efficiently.","solution":"def rle_encode(data): Perform Run-Length Encoding on a given list of characters. Parameters: data (list): A list of characters to be encoded. Returns: list of tuples: Each tuple contains a character and its count. if not data: return [] encoded_data = [] current_char = data[0] count = 1 for char in data[1:]: if char == current_char: count += 1 else: encoded_data.append((current_char, count)) current_char = char count = 1 encoded_data.append((current_char, count)) return encoded_data"},{"question":"Little chef loves playing with numbers and strings! This time, little chef came up with an interesting problem involving both strings and numbers. Given a string S consisting of lowercase alphabets and a number K, find the length of the longest substring of S that contains at most K distinct characters. You need to help the little chef solve this problem efficiently. -----Input----- The first line of input contains an integer T denoting the number of test cases. For each test case, the first line contains a string S, and the second line contains the integer K. -----Output----- For each test case, print an integer denoting the length of the longest substring that contains at most K distinct characters. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 100000 - 1 ≤ K ≤ 26 -----Example----- Input: 2 abcba 2 aabbcc 1 Output: 3 2 -----Explanation----- Example case 1. The longest substring with at most 2 distinct characters in \\"abcba\\" is \\"bcb\\", which has a length of 3. Example case 2. The longest substring with at most 1 distinct character in \\"aabbcc\\" is \\"aa\\", \\"bb\\" or \\"cc\\", each of which has a length of 2.","solution":"def longest_substring_with_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 char_count = {} left = 0 max_len = 0 for right in range(len(s)): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len def solve(test_cases): results = [] for s, k in test_cases: results.append(longest_substring_with_k_distinct(s, k)) return results"},{"question":"Description: You are given a string containing a sequence of brackets: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Your task is to determine if the given string is valid. A valid string is one where: 1. All opening brackets have a corresponding closing bracket in the correct order. 2. Closing brackets follow their respective opening brackets correctly. Examples of valid sequences: - \\"()\\" or \\"([])\\" or \\"{[]}\\" Examples of invalid sequences: - \\"(]\\" or \\"([)]\\" or \\"{[}\\" Write a function `isValid` that takes a string `s` as input and returns `True` if the sequence is valid, and `False` otherwise. # Function Signature ```python def isValid(s: str) -> bool: pass ``` # Input - `s` (1 <= len(s) <= 10000): A string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. # Output - `bool`: Returns `True` if the input string is valid, otherwise returns `False`. # Example 1 ```python Input: s = \\"()\\" Output: True ``` # Example 2 ```python Input: s = \\"()[]{}\\" Output: True ``` # Example 3 ```python Input: s = \\"(]\\" Output: False ``` # Example 4 ```python Input: s = \\"([)]\\" Output: False ``` # Example 5 ```python Input: s = \\"{[]}\\" Output: True ```","solution":"def isValid(s: str) -> bool: Determines if the input string of brackets is valid. Args: s (str): A string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the input string is valid, otherwise False. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"}]'),F={name:"App",components:{PoemCard:O},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},C={class:"card-container"},R={key:0,class:"empty-state"},Y=["disabled"],j={key:0},L={key:1};function P(s,e,u,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[_,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(y,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",R,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",L,"Loading...")):(n(),i("span",j,"See more"))],8,Y)):l("",!0)])}const D=d(F,[["render",P],["__scopeId","data-v-561478af"]]),W=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/11.md","filePath":"chatai/11.md"}'),z={name:"chatai/11.md"},B=Object.assign(z,{setup(s){return(e,u)=>(n(),i("div",null,[x(D)]))}});export{W as __pageData,B as default};
