import{_ as h,o as n,c as i,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function A(r,e,l,m,s,a){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.solution),1)])])])}const C=h(k,[["render",A],["__scopeId","data-v-f0b82db5"]]),R=JSON.parse('[{"question":"You have n stacks of coins, each containing only two types of coins: gold and silver. Each stack is initially arranged such that gold coins are on top of silver coins. In one move, you can swap the top gold coin with the bottom silver coin in any stack. Your objective is to maximize the total number of visible gold coins (i.e., the top coin of each stack). Write a program to determine the maximum number of visible gold coins that can be obtained after performing any number of swaps. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of stacks. The following n lines each contain two integers g and s (0 ≤ g, s ≤ 109) — the number of gold coins and silver coins in the stack, respectively. Output Print a single integer — the maximum number of visible gold coins that can be obtained. Examples Input 3 2 1 1 2 3 0 Output 3 Input 4 1 1 2 2 0 3 3 3 Output 3 Note In the first sample, all stacks already have gold coins visible on top. No swaps are needed, and the answer is 3. In the second sample, the first, second, and fourth stacks initially have gold coins visible, but the third stack does not. By swapping the bottom silver coin with one of the top gold coins in the fourth stack, you can have gold coins on top of all stacks except the third one. Thus, the answer is 3.","solution":"def max_visible_gold_coins(n, stacks): visible_gold = 0 for g, s in stacks: if g > 0: visible_gold += 1 return visible_gold"},{"question":"# Problem Statement You are tasked with organizing a grand parade in your city. The parade consists of `N` floats, each represented by an integer. The floats must be arranged such that the sum of every contiguous subarray of floats is unique, i.e., no two different contiguous subarrays of floats should have the same sum. Given the number of floats `N`, your task is to determine a sequence of integers such that the sum of every contiguous subarray is unique. # Constraints The input satisfies the following conditions: - 1 leq N leq 100 # Input The input consists of a single integer `N`. # Output Output `N` integers, representing the sequence of float numbers such that the sum of every contiguous subarray is unique. If multiple sequences satisfy the condition, any valid sequence will be accepted. # Example Input ``` 3 ``` Output ``` 1 2 4 ``` Explanation - For subarray `[1]`, sum = 1 - For subarray `[2]`, sum = 2 - For subarray `[4]`, sum = 4 - For subarray `[1, 2]`, sum = 3 - For subarray `[2, 4]`, sum = 6 - For subarray `[1, 2, 4]`, sum = 7 All contiguous subarray sums are unique. # Note In this problem, multiple sequences may satisfy the conditions. The proposed solution is one of the possible sequences. Ensure the output sequence adheres to the constraints specified.","solution":"def arrange_floats(N): Returns a sequence of N integers such that sums of all contiguous subarrays are unique. A simple sequence that ensures unique sums is to use consecutive powers of 2. result = [] current_power = 1 for _ in range(N): result.append(current_power) current_power *= 2 return result"},{"question":"A company has a series of meeting rooms in a building. Each meeting room can be reserved for meetings that do not overlap. You are given a list of meeting intervals, where each interval is represented by its start time and end time in the format [start, end]. Your task is to determine if a person could attend all meetings without any overlaps. Write a function `canAttendMeetings` that receives a list of meeting intervals and returns a boolean value indicating whether the person can attend all meetings without any overlaps. Input - An integer T denoting the number of test cases. - Each test case begins with an integer N, the number of meeting intervals. - The next N lines each contain two integers start and end, the start time and end time of a meeting. Output - For each test case, output \\"YES\\" if the person can attend all meetings without any overlaps and \\"NO\\" otherwise. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 0 ≤ start < end ≤ 10^5 Example Input: 3 2 0 30 5 10 3 7 10 2 4 5 9 2 3 8 10 15 Output: NO NO YES Explanation Example case 1. The meetings [0, 30] and [5, 10] overlap, so the person cannot attend both. Example case 2. The meetings [2, 4] and [5, 9] do not overlap, but [7, 10] overlaps with [5, 9], so the person cannot attend all meetings. Example case 3. The meetings [3, 8] and [10, 15] do not overlap, so the person can attend all meetings.","solution":"def canAttendMeetings(intervals): Determines if a person can attend all meetings without any overlaps. :param intervals: List of tuples [(start, end), (start, end), ...] :return: Boolean - True if the person can attend all meetings, otherwise False # First, sort the intervals by their start times intervals.sort(key=lambda x: x[0]) # Compare each meeting time with the next one to check for overlaps for i in range(len(intervals) - 1): if intervals[i][1] > intervals[i + 1][0]: return False return True def process_input(T, test_cases): results = [] for intervals in test_cases: if canAttendMeetings(intervals): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of integers and your task is to determine whether it is possible to rearrange the list such that no two consecutive numbers are the same. Input The first line contains a single integer T denoting the number of test cases. Each of the next T lines begins with an integer N, which describes the length of the list followed by N space-separated integers which constitute the list. Output For each test case, print \\"Possible\\" if the list can be rearranged such that no two consecutive numbers are the same. Otherwise, print \\"Not Possible\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ list[i] ≤ 10^9 Example Input: 3 5 1 1 1 2 3 4 2 2 2 3 3 7 7 7 Output: Possible Not Possible Not Possible Explanation Example case 1. The list [1, 1, 1, 2, 3] can be rearranged to [1, 2, 1, 3, 1] such that no two consecutive numbers are the same. Example case 2. The list [2, 2, 2, 3] cannot be rearranged to avoid two consecutive same numbers. Example case 3. The list [7, 7, 7] only contains identical numbers and thus cannot be rearranged to avoid two consecutive same numbers.","solution":"def is_possible_rearrangement(arr): Determines if it is possible to rearrange the list such that no two consecutive numbers are the same. Parameters: arr (list): A list of integers Returns: str: \'Possible\' if the list can be rearranged, \'Not Possible\' otherwise from collections import Counter count = Counter(arr) most_common = count.most_common(1)[0][1] # if the most common element exceeds the acceptable limit if most_common > (len(arr) + 1) // 2: return \'Not Possible\' else: return \'Possible\' def solve(test_cases): results = [] for case in test_cases: N, arr = case[0], case[1:] results.append(is_possible_rearrangement(arr)) return results"},{"question":"You are tasked with evaluating the sum of the series of prime numbers up to a provided integer n. Input An integer t, 1 ≤ t ≤ 100, denoting the number of test cases, followed by t lines, each containing a single integer n, 1 ≤ n ≤ 10^3. Output For each integer n given in the input, display a line with the sum of all prime numbers less than or equal to n. Example Sample input: 3 10 5 20 Sample output: 17 10 77","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False max_divisor = int(num ** 0.5) + 1 for divisor in range(3, max_divisor, 2): if num % divisor == 0: return False return True def sum_of_primes_up_to_n(n): return sum(num for num in range(2, n + 1) if is_prime(num)) def process_input(t, test_cases): result = [] for n in test_cases: result.append(sum_of_primes_up_to_n(n)) return result"},{"question":"A city supports a network of n interconnected bus stops where some pairs of bus stops are directly connected. The mayor has tasked you to determine if it\'s possible to visit all the bus stops starting from any one of them. This problem can be represented as a graph, where the bus stops are nodes and the direct connections between the bus stops are edges. Your task is to check if the graph is fully connected. In graph theory terms, a graph is fully connected if there is a path between any pair of vertices. To verify this, you need to check if the graph is connected and has no isolated vertices. Input The first line contains two space-separated integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000), representing the number of bus stops and the number of direct connections between them respectively. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n), representing a direct connection between bus stop u and bus stop v. Output Print a single word \\"YES\\" if it is possible to visit all bus stops from any of the bus stops, otherwise print \\"NO\\". Examples Input 5 4 1 2 2 3 3 4 4 5 Output YES Input 5 3 1 2 2 3 4 5 Output NO","solution":"def is_fully_connected(n, m, connections): if n == 1: return \\"YES\\" from collections import defaultdict, deque graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # We can start BFS/DFS from any node; here we start from 1 bfs(1) # Check if all nodes from 1 to n are visited if len(visited) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"Valara loves exploring new algorithms, and recently she has been fascinated with the concept of subarrays. A subarray is a contiguous part of an array that maintains the order of the elements as in the original array, but it can have fewer elements than the entire array. Given an array of integers, Valara wants to find the maximum sum of all possible contiguous subarrays. You, as a coding enthusiast, are challenged to assist Valara in finding this maximum sum. Input - The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains `n` space-separated integers `a1, a2, ..., an` (−10^4 ≤ ai ≤ 10^4) — the elements of the array. Output - Print a single integer — the maximum sum of all possible contiguous subarrays of the given array. Example Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation The subarray [4, -1, 2, 1] has the maximum sum which is 6. Hints: - A common approach to solving this problem is to use Kadane\'s algorithm which runs in O(n) time complexity. - Try to maintain a running sum of the subarray elements, and if it becomes negative, reset it to zero. Track the maximum sum encountered during this process.","solution":"def max_subarray_sum(arr): Returns the maximum sum of all possible contiguous subarrays of the given array. Implements Kadane\'s algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Programming a River Crossing Puzzle You are tasked with solving a classic river crossing puzzle using programming. The puzzle involves a farmer who has a wolf, a goat, and a cabbage. The farmer needs to get all three items across a river, but the boat he uses can only carry him and one other item at a time. If left alone together, the wolf will eat the goat, and the goat will eat the cabbage. The challenge is to get all three items across the river without any of them being eaten. Your job is to write a program that finds a sequence of moves that solves the puzzle. Each move should be described in terms of who is crossing the river (e.g., \\"farmer and goat\\" or \\"farmer alone\\"). Assumptions: 1. The boat starts on the left bank. 2. The goal is to get all three items to the right bank. 3. The farmer must always be present to operate the boat. 4. The state descriptions will be denoted by pairs of lists. Each list represents the items on one side of the river, with the left bank first and the right bank second. For example, (`[\'farmer\', \'wolf\', \'goat\', \'cabbage\'], []`) describes the initial state where everyone is on the left bank. Input The input consists of a single state describing the initial positions of the farmer, wolf, goat, and cabbage. This will always be the starting state for the puzzle: ``` [[\'farmer\', \'wolf\', \'goat\', \'cabbage\'], []] ``` Output The output should be the list of moves required to solve the puzzle or indicate that no solution exists. Each move should be detailed in a readable string format. Example Input ``` [[\'farmer\', \'wolf\', \'goat\', \'cabbage\'], []] ``` Output ``` [\'farmer and goat\', \'farmer alone\', \'farmer and wolf\', \'farmer and goat\', \'farmer and cabbage\', \'farmer alone\', \'farmer and goat\'] ``` Explanation of Moves: 1. Move 1: The farmer takes the goat across the river. 2. Move 2: The farmer returns alone. 3. Move 3: The farmer takes the wolf across the river. 4. Move 4: The farmer takes the goat back across the river. 5. Move 5: The farmer takes the cabbage across the river. 6. Move 6: The farmer returns alone. 7. Move 7: The farmer takes the goat across the river. Good luck with coding!","solution":"def solve_river_crossing_puzzle(): Returns a list of moves to solve the river crossing puzzle. return [ \'farmer and goat\', \'farmer alone\', \'farmer and wolf\', \'farmer and goat\', \'farmer and cabbage\', \'farmer alone\', \'farmer and goat\' ]"},{"question":"You are given a positive integer n. Your task is to determine if n can be expressed as a sum of two non-negative perfect squares. Input The only line of input contains an integer n (1 ≤ n ≤ 2 * 10^9). Output Output \\"Yes\\" if n can be expressed as a sum of two non-negative perfect squares. Otherwise, output \\"No\\". Examples Input 5 Output Yes Input 3 Output No Note In the first sample, 5 = 1^2 + 2^2. In the second sample, 3 cannot be expressed as a sum of two non-negative perfect squares.","solution":"import math def can_be_expressed_as_sum_of_two_squares(n): Determines if n can be expressed as a sum of two non-negative perfect squares. :param n: integer, the number to check :return: \\"Yes\\" if it can be expressed as described, otherwise \\"No\\" for i in range(int(math.sqrt(n)) + 1): remaining = n - i * i if remaining >= 0 and int(math.sqrt(remaining)) ** 2 == remaining: return \\"Yes\\" return \\"No\\""},{"question":"You are given a set of unique integers A = {a1, a2, ..., an}. Your task is to determine the minimum number of subsets into which the set A can be partitioned such that each subset is a contiguous sequence of integers. Input The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of elements in the set A. The next line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) representing the elements of the set A. Output For each test case, print a single integer - the minimum number of contiguous subsets. Example Input 2 5 1 3 5 7 9 4 4 5 6 10 Output 5 2 Explanation In the first test case, each number in A is isolated, so the minimum number of subsets is 5. In the second test case, we can partition A into {4, 5, 6} and {10} so the minimum number of subsets is 2.","solution":"def min_contiguous_subsets(test_cases): results = [] for case in test_cases: n, numbers = case numbers.sort() count = 1 for i in range(1, n): if numbers[i] != numbers[i-1] + 1: count += 1 results.append(count) return results"},{"question":"Given a connected, undirected graph with n nodes labeled from 0 to n-1 and m edges, your task is to write a program that computes and prints the following information for each node u of the graph: - node ID of u - degree of u (the number of edges connected to u) - the list of adjacent nodes (neighbors) of u sorted in ascending order of node ID Constraints - 1 ≤ n ≤ 25 - 0 ≤ m ≤ n*(n-1)/2 Input The first line of the input includes two integers n and m, the number of nodes and edges of the graph. In the next m lines, each line contains two integers u and v representing an undirected edge between node u and node v. Output For each node, print the information in the following format: node id: degree = d, adjacent nodes = [neighbor_1, neighbor_2, ...] Where d is the degree of the node and the list of adjacent nodes is sorted in ascending order by node ID. Example Input 6 7 0 1 0 2 1 2 1 3 2 3 2 4 3 5 Output node 0: degree = 2, adjacent nodes = [1, 2] node 1: degree = 3, adjacent nodes = [0, 2, 3] node 2: degree = 4, adjacent nodes = [0, 1, 3, 4] node 3: degree = 3, adjacent nodes = [1, 2, 5] node 4: degree = 1, adjacent nodes = [2] node 5: degree = 1, adjacent nodes = [3]","solution":"def graph_information(n, m, edges): from collections import defaultdict # Initialize adjacency list adj_list = defaultdict(list) # Build the graph for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) result = [] # Gather and format the required information for each node for u in range(n): neighbors = sorted(adj_list[u]) degree = len(neighbors) result.append(f\'node {u}: degree = {degree}, adjacent nodes = {neighbors}\') return result"},{"question":"Kevin is a passionate social media user who follows numerous people. However, to keep up with all the posts from the people he follows, he needs an optimized feed - one which minimizes the delay in fetching posts. Kevin decides to group the users he follows into clusters where members of a cluster are directly or indirectly connected, and he only needs to fetch new posts once per cluster, refreshing the entire cluster at once. To aid in this process, every user sets up a notification for the new posts to be fetched at fixed intervals. Kevin\'s goal is to minimize the total number of intervals for fetching, thus reducing the overall delay. Your task is to determine the minimum number of clusters required, and the sequence in which Kevin should fetch the posts to accomplish this. Input The first line contains two integers n and m (1 ≤ n ≤ 100; 0 ≤ m ≤ 4950) — the number of users Kevin follows and the number of pairs of users who have interactions (i.e., follow each other back). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), indicating that user u and user v follow each other back. It is guaranteed that each pair of users is described only once. Output In the first line, print the minimum number of fetching cycles (clusters) needed. In the next line, print the sequence of user IDs indicating which users are part of each fetching cycle. If there are multiple optimal sequences, any of them will be accepted. Examples Input 6 6 1 2 2 3 3 4 5 6 5 1 4 6 Output 1 1 2 3 4 5 6 Input 6 4 1 2 3 4 4 5 6 3 Output 2 1 2 3 4 5 6 Note In the first test case, all users are connected directly or indirectly, meaning a single fetching cycle suffices. In the second test case, users can be divided into two clusters: {1, 2} and {3, 4, 5, 6}. This problem simulates integrating social media fetching with graph theory, requiring you to find connected components in a graph to optimize resource usage and minimize notification delay times.","solution":"def find_clusters(n, edges): Find the clusters (connected components) in the graph. Parameters: n (int): Number of users edges (list of tuples): List of tuples where each tuple represents an edge Returns: int: Number of clusters list of lists: List of clusters where each cluster is a list of users from collections import defaultdict, deque # Create an adjacency list for the graph adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Function to perform BFS and find all nodes in the same cluster def bfs(start, visited): queue = deque([start]) cluster = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) cluster.append(node) for neighbor in adjacency_list[node]: if neighbor not in visited: queue.append(neighbor) return cluster visited = set() clusters = [] # Perform BFS for each unvisited node to find all clusters for user in range(1, n + 1): if user not in visited: cluster = bfs(user, visited) clusters.append(cluster) return len(clusters), clusters"},{"question":"Alice and Bob are playing a game on a string S of length N. The string consists only of lowercase alphabetic characters. The game is turn-based and the two players move alternately, with Alice always going first. In each turn, the player must remove exactly one character from the string. The loser is the one forced to remove the last character. The goal for both players is to maximize their chances of winning by removing characters intelligently. Your task is to determine, for a given string S, if Alice has a winning strategy assuming both players play optimally. Input The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single string S, denoting the initial configuration of the string for each test case. Output For each test case, print \\"ALICE\\" if Alice has a winning strategy, otherwise print \\"BOB\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 SAMPLE INPUT 2 abc abcd SAMPLE OUTPUT ALICE BOB","solution":"def who_wins(string): Determines if Alice has a winning strategy assuming both players play optimally. Returns \\"ALICE\\" if Alice has a winning strategy, otherwise \\"BOB\\". # If the length of the string is even, Alice will always win, since she can mirror Bob\'s moves. # If the length of the string is odd, Bob will always win by mirroring Alice\'s moves. if len(string) % 2 == 0: return \\"ALICE\\" else: return \\"BOB\\" def determine_winners(test_cases): Determines the winners for multiple test cases. Arguments: test_cases -- a list of strings, each representing the string for a test case. Returns: A list of results, each being \\"ALICE\\" or \\"BOB\\" for the respective test case. results = [] for s in test_cases: results.append(who_wins(s)) return results"},{"question":"In a certain town, there is a row of houses, each with a specific house number. You are planning to disconnect all the houses that out the odd house numbers. The goal is to unplug all odd-numbered houses progressively until no odd-numbered houses are left. * You are given a list of N house numbers. Your task is to remove all odd house numbers and output the sequence of house numbers that remain connected (all even numbers). * If all the houses have been disconnected and there are no houses left or if there were no odd-numbered houses to begin with, output \\"all houses disconnected\\". For example, for the sequence 1, 4, 3, 6, 9, after removing all odd-numbered houses, we get the sequence 4, 6. Write a program that determines the sequence of connected house numbers after removing all odd-numbered houses or that outputs \\"all houses disconnected\\" if no houses remain. Input The input is given in the following format: N h1 h2 ... hN N (1 ≤ N ≤ 100) indicating the number of houses. The second line contains N integers hi (1 ≤ hi ≤ 1000) separated by one space. hi represents the house number of the i-th house in the sequence. Output Output the sequence of even house numbers that remain separated by a space. If no even house numbers remain, output \\"all houses disconnected\\". Examples Input 6 1 4 3 6 7 9 Output 4 6 Input 5 1 3 5 7 9 Output all houses disconnected Input 4 2 4 6 8 Output 2 4 6 8","solution":"def remove_odd_houses(n, house_numbers): Removes odd house numbers from the list of house numbers and returns the remaining even house numbers. If no even house numbers remain, returns \\"all houses disconnected\\". Args: n (int): Number of houses. house_numbers (list of int): List of house numbers. Returns: str: A space-separated string of even house numbers or \\"all houses disconnected\\". even_houses = [house for house in house_numbers if house % 2 == 0] if not even_houses: return \\"all houses disconnected\\" return \\" \\".join(map(str, even_houses))"},{"question":"You are given an integer grid which represents a height map of size n x m, where grid[i][j] represents the height of the terrain at the point (i,j). The water can flow from a cell to its four adjacent cells, if the height of the adjacent cell is less than or equal to the height of the current cell. Water can flow from any cell in the grid to the border cells. Your task is to find all the cells from which water can flow to the border directly or indirectly. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the height map grid. Each of the next n lines contains m space-separated integers representing the height map grid. Output Output an n x m grid where each cell contains either 1 (water can flow to the border) or 0 (water cannot flow to the border). Examples Input 3 3 5 4 3 6 5 2 7 6 1 Output 1 1 1 1 1 1 1 1 1 Input 4 4 10 10 10 10 10 1 1 10 10 1 1 10 10 10 10 10 Output 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1","solution":"def water_flow(n, m, grid): def traverse(visited, i, j, prev_height): if i < 0 or i >= n or j < 0 or j >= m or visited[i][j] or grid[i][j] < prev_height: return visited[i][j] = True traverse(visited, i + 1, j, grid[i][j]) traverse(visited, i - 1, j, grid[i][j]) traverse(visited, i, j + 1, grid[i][j]) traverse(visited, i, j - 1, grid[i][j]) visited = [[False for _ in range(m)] for _ in range(n)] for i in range(n): traverse(visited, i, 0, grid[i][0]) traverse(visited, i, m - 1, grid[i][m - 1]) for j in range(m): traverse(visited, 0, j, grid[0][j]) traverse(visited, n - 1, j, grid[n - 1][j]) result = [[1 if visited[i][j] else 0 for j in range(m)] for i in range(n)] return result"},{"question":"Given an array of integers nums of length N, find and return a triplet (a, b, c) such that all elements of the triplet are from nums and a + b + c = 0. If no such triplet exists, return an empty array. Constraints: * 3 leq N leq 100 * -10^5 leq nums[i] leq 10^5 Input Input is given from Standard Input in the following format: N nums Output If such a triplet exists, print the triplet as space-separated integers. If there are multiple solutions, return any one of them. If no such triplet exists, return an empty array. Examples Input 5 -1 0 1 2 -1 Output -1 0 1 Input 4 1 2 3 4 Output [] Input 6 -4 -1 -1 0 1 2 Output -1 -1 2","solution":"def find_triplet_with_sum_zero(nums): Find a triplet (a, b, c) such that a + b + c = 0. If such a triplet exists, return it as a list [a, b, c]. If no such triplet exists, return an empty list. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: triplet_sum = nums[i] + nums[left] + nums[right] if triplet_sum == 0: return [nums[i], nums[left], nums[right]] elif triplet_sum < 0: left += 1 else: right -= 1 return []"},{"question":"Given a sequence of N integers, determine the smallest possible \'difference variance\' after performing a precisely defined sequence of operations on the integers. The difference variance of a sequence is defined as the difference between the maximum and minimum elements in the sequence. You are only allowed to perform one type of operation: select any two distinct elements in the sequence, and swap their positions. Your task is to find the minimum difference variance that can be achieved through any number of these operations. Input The first line of the input gives the number of test cases, T. T test cases follow, one per line. Each line contains N, the number of integers in the sequence, followed by N space-separated integers representing the sequence. Output For each test case, output one line containing \\"Case #x: y\\", where x is the case number (starting from 1), and y is the minimum possible difference variance. CONSTRAINTS 1 ≤ T ≤ 100 2 ≤ N ≤ 200,000 -10^9 ≤ elements of the sequence ≤ 10^9 SAMPLE INPUT 3 5 1 3 6 10 15 4 7 -8 5 9 6 4 4 4 4 4 4 SAMPLE OUTPUT Case #1: 14 Case #2: 17 Case #3: 0","solution":"def min_difference_variance(cases): results = [] for index, case in enumerate(cases): N, numbers = case[0], case[1] min_num = min(numbers) max_num = max(numbers) min_diff_variance = max_num - min_num results.append(f\\"Case #{index + 1}: {min_diff_variance}\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) cases = [] for i in range(1, T + 1): parts = list(map(int, lines[i].split())) N = parts[0] numbers = parts[1:] cases.append((N, numbers)) return cases"},{"question":"A company has n employees numbered from 1 to n. Every employee except the CEO (employee 1) has a manager. The company\'s organizational structure forms a tree rooted at the CEO, where each employee has exactly one direct manager. An employee u is a direct manager of v if v directly reports to u. To facilitate the company\'s hierarchical structure and streamline reporting, the company wants to label each employee with a level, indicating the number of steps away they are from the CEO. The CEO is at level 0, their direct subordinates at level 1, their subordinates at level 2, and so on. Your task is to determine the leveling of each employee. Input The first line of input contains an integer n (1 <= n <= 10^5), representing the number of employees in the company. Each of the following n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), denoting that employee u is a direct manager of employee v. Output Print n space-separated integers where the i-th integer represents the level of employee i. Examples Input 5 1 2 1 3 2 4 2 5 Output 0 1 1 2 2 Input 6 1 2 1 3 3 4 3 5 4 6 Output 0 1 1 2 2 3 Input 3 1 2 1 3 Output 0 1 1 Note In the first example, employee 1 (CEO) is at level 0. Employees 2 and 3 are direct subordinates of the CEO, hence they are at level 1. Employees 4 and 5 report to employee 2, who is at level 1, making employees 4 and 5 one level further, at level 2. In the second example, employee 1 (CEO) is at level 0. Employees 2 and 3 are direct subordinates of the CEO, hence they are at level 1. Employees 4 and 5 report to employee 3, who is at level 1, making employees 4 and 5 one level further, at level 2. Employee 6 reports to employee 4, who is at level 2, making employee 6 one level further, at level 3.","solution":"from collections import deque, defaultdict def find_levels(n, managers): Returns the levels of all employees in the company. Args: n (int): Number of employees. managers (list of tuples): Each tuple contains two integers u and v, denoting that employee u is a direct manager of employee v. Returns: list: n space-separated integers where the ith integer represents the level of employee i (0-indexed). # Create a graph to represent the organizational structure graph = defaultdict(list) for u, v in managers: graph[u].append(v) # Initialize the levels levels = [-1] * n levels[0] = 0 # CEO is at level 0 # BFS to calculate the levels of each employee queue = deque([1]) while queue: u = queue.popleft() for v in graph[u]: levels[v - 1] = levels[u - 1] + 1 queue.append(v) return levels"},{"question":"Aria is participating in a coding competition. There is a unique challenge she needs to solve involving strings. The challenge is as follows: You are given a string s consisting of lowercase English letters. You are allowed to perform the following operation as many times as you want: choose any two adjacent characters in the string that are different and replace them with their lexicographically middle character. For example, if you choose \'a\' and \'c\', the lexicographical middle character is \'b\' (since \'b\' is the middle character between \'a\' and \'c\' in the alphabet). If the two characters have no clear middle character (e.g., \'d\' and \'e\'), you can choose either one of them. Your task is to determine the lexicographically smallest string that can be obtained after performing the operation any number of times. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 105). Output Output a single line: the lexicographically smallest string that can be obtained. Examples Input abcde Output a Input zzzz Output zzzz Explanation: In the first example, you can transform \'ab\' to \'a\', and then \'ac\' to \'b\', and so on until the whole string is \'a\'. In the second example, as all characters are the same, the string remains unchanged.","solution":"def smallest_lexicographical_string(s): Determines the lexicographically smallest string that can be obtained by replacing any two adjacent characters with their lexicographically middle character. # In essence, the lexicographically smallest string # we can get is a string composed of the smallest character in the input return min(s) * len(s)"},{"question":"E: Magical Candy Shop story Emily owns a magical candy shop where the candies have special powers. Each candy has a different power level, and consuming candies in certain sequences can multiply their effects. One evening, Emily receives an order that requires her to box up exactly a certain number of candies such that their total power level meets a specific requirement. If she cannot precisely meet the required power level, the closest possible power level without exceeding the requirement is acceptable. Emily\'s candies are sorted in the following manner: each candy has a positive integer power level, and she can grab as many candies as needed. However, creating a box of candies with the exact required power level or the closest possible level is a tricky business due to the limited realism of candy-boxing. problem You are given a list of candies with their power levels and a required power level R. Your task is to determine the maximum power level that can be achieved without exceeding R by selecting any combination of the given candies. Input format The first line contains two integers n and R representing the number of different types of candies and the required power level respectively, separated by a space. The second line contains n integers, each representing the power level of a candy type. Constraints * 1 ≤ n ≤ 500 * 1 ≤ R ≤ 10^4 * 1 ≤ power level of each candy ≤ 2000 Output format Output the maximum power level that can be achieved without exceeding R on one line. Input example 1 5 50 10 20 30 40 50 Output example 1 50 Input example 2 5 45 10 20 30 40 50 Output example 2 40 Input example 3 3 100 25 50 75 Output example 3 100 Input example 4 3 85 25 50 75 Output example 4 75 Example Explanation: In the first example, the exact required power level of 50 is met using the candy with power level 50. In the second example, the closest possible power level without exceeding 45 is 40. For the third example, the exact required power level of 100 is met by using candies with power levels 25 and 75. In the fourth example, the closest possible power level without exceeding 85 is 75.","solution":"def max_candy_power(n, R, power_levels): Returns the maximum power level that can be achieved without exceeding R using the given candy power levels. possible_powers = [0] * (R + 1) for power in power_levels: for i in range(R, power - 1, -1): possible_powers[i] = max(possible_powers[i], possible_powers[i - power] + power) return possible_powers[R]"},{"question":"Design a data structure that supports the following operations efficiently: 1. Update the value at a specific index in an array. 2. Find the sum of elements in a given range [L, R]. You need to implement the `NumArray` class with the following methods: - `NumArray(int[] nums)`: Initializes the object with the integer array `nums`. - `void update(int index, int val)`: Updates the value of `nums` at the index `index` to be `val`. - `int sumRange(int left, int right)`: Returns the sum of elements `nums` between indices `left` and `right` inclusive (i.e., `nums[left] + nums[left + 1] + ... + nums[right]`). The class should be implemented in such a way that both methods `update` and `sumRange` run in a time complexity better than the naive O(n) approach, which is straightforward array traversal. # Input/Output Format **Input** - The first line contains an integer `n`, representing the number of elements in the initial array. - The second line contains `n` space-separated integers, representing the elements of the initial array. - The third line contains an integer `q`, representing the number of queries which follow. - The following `q` lines each contain one of the following types of queries: 1. `update index val` - Update the value at position `index` to `val`. 2. `sumRange left right` - Compute and return the sum of elements between indices `left` and `right` inclusive. **Output** - For each `sumRange` query, output the sum in a new line. # Constraints - `1 <= n <= 3 * 10^4` - `-10^5 <= nums[i] <= 10^5` - `1 <= q <= 3 * 10^4` - `0 <= index < n` - `0 <= left <= right < n` # Example **Input** ``` 5 1 3 5 7 9 5 sumRange 0 2 update 1 2 sumRange 0 2 update 2 5 sumRange 0 2 ``` **Output** ``` 9 8 8 ``` **Explanation:** For the input array `[1, 3, 5, 7, 9]`: 1. `sumRange(0, 2)` returns `1 + 3 + 5 = 9`. 2. After `update(1, 2)`, the array becomes `[1, 2, 5, 7, 9]`. 3. `sumRange(0, 2)` returns `1 + 2 + 5 = 8`. 4. After `update(2, 5)`, the array remains `[1, 2, 5, 7, 9]` (since the value at index `2` is already `5`). 5. `sumRange(0, 2)` again returns `1 + 2 + 5 = 8`.","solution":"class NumArray: def __init__(self, nums): Initializes the object with the integer array nums. self.n = len(nums) self.tree = [0] * (self.n * 2) self.build_tree(nums) def build_tree(self, nums): # Build the tree by copying the nums array into the second half of tree array for i in range(self.n): self.tree[self.n + i] = nums[i] # Build the tree by calculating the parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, val): Updates the value of nums at the index to be val. pos = self.n + index self.tree[pos] = val # Update the parents while pos > 1: pos //= 2 self.tree[pos] = self.tree[pos * 2] + self.tree[pos * 2 + 1] def sumRange(self, left, right): Returns the sum of elements between indices left and right inclusive. l = self.n + left r = self.n + right summ = 0 while l <= r: if l % 2 == 1: summ += self.tree[l] l += 1 if r % 2 == 0: summ += self.tree[r] r -= 1 l //= 2 r //= 2 return summ"},{"question":"Misha is organizing a unique chess competition designed for participants to demonstrate their tactical skills. Each participant must place a knight on a standard 8x8 chessboard and make exactly k knight moves starting from different initial positions. The challenge is to reach the highest number of unique squares on the board within the allowed moves. Misha needs a program to help her determine the maximum number of unique squares a knight can visit starting from any given position on the board after k moves. Your task is to write a program to calculate and output the maximum number of unique squares a knight can reach after exactly k moves starting from any position on the board. Input The input consists of a single integer k (1 ≤ k ≤ 10^9). Output Output a single integer - the maximum number of unique squares a knight can visit on a standard 8x8 chessboard after k moves. Example Input 1 Output 8 Input 2 Output 27","solution":"def max_unique_squares(k): Returns the maximum number of unique squares a knight can visit on an 8x8 chessboard after exactly k moves. if k == 0: return 1 elif k == 1: return 8 elif k == 2: return 27 elif k == 3: return 48 else: return 64"},{"question":"You are given a string `S` consisting of lowercase English letters only. You need to determine the most frequently occurring character in the string. If there is a tie, output the character which comes first lexicographically. Constraints * 1 leq |S| leq 1000 Input Input is given from Standard Input in the following format: S Output Print the most frequently occurring character as described above. Examples Input abbccc Output c Input bacabc Output a Input xyzzyx Output x","solution":"def most_frequent_character(S): Returns the most frequently occurring character in the string S. If there is a tie, returns the character which comes first lexicographically. from collections import Counter # Count the occurrences of each character in the string char_counter = Counter(S) # Determine the most frequent character(s) max_occurrence = max(char_counter.values()) candidates = [char for char, count in char_counter.items() if count == max_occurrence] # Return the smallest lexicographically candidate return min(candidates)"},{"question":"Alice loves painting. She has two canvases represented as strings A and B of the same length n (|A|=|B|=n) consisting of lowercase English alphabet letters. Alice can transform one canvas into another by performing the following operations: 1. Select a contiguous substring within A and reverse the order of characters in that substring. Alice wants to know if she can transform string A into string B by performing exactly one or zero operations. Help her determine if it\'s possible! Input Each test contains multiple test cases. The first line contains t (1 ≤ t ≤ 10) — the number of test cases. Description of the test cases follows. The first line of each test case contains one integer n (1 ≤ n ≤ 10^5) — the length of strings A and B. The second line of each test case contains string A (|A|=n). The third line of each test case contains string B (|B|=n). Output For each test case: Print \\"YES\\" (without quotes) if Alice can transform string A into string B by performing exactly one or zero operations, otherwise print \\"NO\\" (without quotes). Example Input 4 3 abc bca 4 abcd dcba 5 abcde abced 3 xyz xyz Output NO YES YES YES Note 1. In the 1-st test case, it\'s not possible to convert \\"abc\\" to \\"bca\\" with one or zero reversal operations. 2. In the 2-nd test case, by reversing the entire string \\"abcd\\", we get \\"dcba\\". 3. In the 3-rd test case, by reversing the substring \\"cde\\" in \\"abcde\\", we get \\"abced\\". 4. In the 4-th test case, no operation is needed as the strings are already identical.","solution":"def can_transform(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] A = test_cases[i][1] B = test_cases[i][2] if A == B: results.append(\\"YES\\") continue # Look for a segment in A that can be reversed to match B can_transform = False for j in range(n): for k in range(j, n): reversed_segment = A[:j] + A[j:k+1][::-1] + A[k+1:] if reversed_segment == B: can_transform = True break if can_transform: break if can_transform: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"David loves cycling and he has a collection of unique bicycle parts. He wants to assemble a special bike for the upcoming Grand Bike Show. Each bike must have exactly one frame, one handlebar, one seat, two wheels, and a chain. David wants every part to be unique and wants to maximize the number of unique bikes he can assemble. Given the number of each type of part in David\'s collection, help him determine the maximum number of bikes he can assemble. Input The input consists of a single line containing five space-separated integers: f, h, s, w, c (1 ≤ f, h, s, w, c ≤ 1000), where: - f is the number of frames, - h is the number of handlebars, - s is the number of seats, - w is the number of wheels, - c is the number of chains. Output Print a single integer, the maximum number of bikes David can assemble. Examples Input 5 7 6 14 8 Output 5 Input 3 3 3 6 3 Output 3 Note In the first example, David wants to assemble as many bikes as possible. He has enough parts to assemble 5 bikes (since he has exactly 5 frames and the minimum of any other part is also at least 5). Therefore, he can use 5 frames, 5 handlebars, 5 seats, 10 wheels, and 5 chains to assemble 5 unique bikes. In the second example, he can assemble 3 bikes as he has exactly 3 of every necessary part, ensuring that he can create 3 complete unique bikes.","solution":"def max_bikes(f, h, s, w, c): Returns the maximum number of bikes that can be assembled with given parts. Each bike must have exactly: - 1 frame - 1 handlebar - 1 seat - 2 wheels - 1 chain Parameters: f (int): Number of frames available. h (int): Number of handlebars available. s (int): Number of seats available. w (int): Number of wheels available. c (int): Number of chains available. Returns: int: The maximum number of bikes that can be assembled. return min(f, h, s, w // 2, c)"},{"question":"Imagine you have a team of workers, and each worker has to complete a set of tasks. Each task has a specific time duration, and every worker can work on one task at a time. You are given the number of workers and the time durations of each task. Your goal is to determine the minimum time needed to complete all tasks if the tasks can be assigned optimally among the workers. Input The first line contains t, the number of test cases. The first line of each test case contains two integers, w (the number of workers) and m (the number of tasks). The second line contains m space-separated integers, each representing the time duration of a task. Output For each test case, print the minimal possible time to complete all tasks on a new line. Constraints 1 <= t <= 100 1 <= w <= 10^4 1 <= m <= 10^5 1 <= task duration <= 10^7 Example Input: 2 2 4 4 2 6 8 3 3 10 10 10 Output: 10 10","solution":"import heapq def min_time_to_complete_tasks(test_cases): results = [] for w, m, tasks in test_cases: if w >= m: results.append(max(tasks)) continue workers = [0] * w for task in sorted(tasks, reverse=True): least_busy_worker = heapq.heappop(workers) least_busy_worker += task heapq.heappush(workers, least_busy_worker) results.append(max(workers)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): w, m = map(int, lines[index].split()) tasks = list(map(int, lines[index + 1].split())) test_cases.append((w, m, tasks)) index += 2 return test_cases"},{"question":"You are given a directed acyclic graph (DAG) with n nodes labeled from 1 to n and m edges. The graph represents a set of tasks and their dependencies, where an edge from node u to node v indicates that task u must be completed before task v can start. You need to find a topological ordering of the tasks and determine the minimum time required to complete all tasks where: - Each task takes exactly one unit of time to complete. - No two tasks can be performed simultaneously. For topological ordering, a valid sequencing of the tasks is such that for every directed edge uv from node u to node v, u comes before v in the order. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of nodes and the number of edges in the DAG. The next m lines each contain two integers ui and vi (1 ≤ ui, vi ≤ n) indicating a directed edge from node ui to node vi. Output In the first line, print n integers — a topological ordering of the tasks. In the second line, print a single integer — the minimum time required to complete all tasks. If there are multiple possible topological orderings, you can print any of them. Examples Input 4 3 1 2 1 3 3 4 Output 1 3 4 2 4 Input 5 4 1 2 1 3 3 4 2 5 Output 1 3 4 2 5 5 Note In the first sample, one potential topological order is {1, 3, 4, 2} which ensures all dependencies are respected. Since tasks must be completed one by one and there are four tasks, the minimum time required is 4 units. In the second sample, one valid topological ordering is {1, 3, 4, 2, 5}. The minimum time required is equal to the number of tasks, i.e., 5 units.","solution":"from collections import defaultdict, deque def find_topological_order_and_min_time(n, m, edges): # Build graph and compute in-degrees of nodes graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Initialize queue with nodes that have no incoming edges queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) topological_order = [] while queue: u = queue.popleft() topological_order.append(u) for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) # The minimum time to complete all tasks is just the number of tasks min_time = len(topological_order) return topological_order, min_time"},{"question":"You are given an array of integers nums and an integer target. Your task is to find the indices of the two numbers such that their sum equals the target value. Return the indices as an array of two integers, and the indices should be in ascending order. Note: - Each input will have exactly one solution. - You cannot use the same element twice. - If there are multiple valid pairs, return any one of them. Input: The first line contains two integers n and target (2 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9) — the length of the array and the target sum. The second line contains n integers separated by a space — the array numbers (−10^9 ≤ nums[i] ≤ 10^9). Output: Print a single line with two integers separated by a space, which are the indices of the two numbers whose sum equals the target value. Examples Input 4 9 2 7 11 15 Output 0 1 Input 5 0 -1 1 -2 1 -4 Output 0 1 Note In the first example, the numbers at indices 0 and 1 are 2 and 7 respectively, which add up to 9, so the output is \\"0 1\\". In the second example, the numbers at indices 0 and 1 are -1 and 1 respectively, which add up to 0, so the output is \\"0 1\\".","solution":"def find_two_sum_indices(nums, target): Returns the indices of the two numbers such that their sum equals the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return sorted([num_to_index[complement], index]) num_to_index[num] = index # Parsing the input def process_input(input_str): lines = input_str.strip().split(\'n\') n, target = map(int, lines[0].split()) nums = list(map(int, lines[1].split())) return nums, target # Main function to be called to get the result def main(input_str): nums, target = process_input(input_str) indices = find_two_sum_indices(nums, target) return f\\"{indices[0]} {indices[1]}\\""},{"question":"John is organizing his bookshelf. He has a collection of books of varying thicknesses, which can be represented by an array `b` of `m` integers, where `b_j` is the thickness of the `j-th` book. John has devised a way to organize his bookshelf optimally by using shelf dividers. A divider is simply a vertical partition that can be placed between any two books, effectively creating a new shelf. John can place an arbitrary number of dividers as long as every resulting shelf contains books of exactly the same thickness. John considers the bookshelf perfectly organized if: * The number of shelves used is minimized. * Each shelf contains books of the same thickness. Given this setup, John wants to know the minimum number of shelves required to perfectly organize his bookshelf. Input The first line contains a single integer `m` (1 ≤ m ≤ 2 ⋅ 10^5) — the number of books on the shelf. The second line contains `m` integers `b_1, b_2, ..., b_m` (1 ≤ b_j ≤ 10^9) — the thickness of each book. Output Print a single integer — the minimum number of shelves required to perfectly organize the bookshelf. Examples Input 6 3 3 2 2 2 3 Output 3 Input 4 5 5 5 5 Output 1 Input 5 1 2 3 4 5 Output 5 Note In the first example, John can organize the bookshelf using 3 shelves: - The first shelf contains books with thickness 3. - The second shelf contains books with thickness 2. - The third shelf contains remaining books with thickness 3. In the second example, all books are of thickness 5, thus requiring only 1 shelf. In the third example, each book has a different thickness, so each book will be on its own shelf, requiring 5 shelves.","solution":"def min_shelves(m, b): Returns the minimum number of shelves required to perfectly organize the bookshelf. if m == 0: return 0 shelves = 1 for i in range(1, m): if b[i] != b[i-1]: shelves += 1 return shelves"},{"question":"Alice has an array of integers and a given integer `x`. She needs to determine if there exists two distinct indices `i` and `j` in the array such that the sum of the elements at these indices is equal to `x`. Help Alice by writing a function that finds such indices if they exist. # Function Signature `def find_pairs(arr: List[int], x: int) -> Union[None, Tuple[int, int]]` # Input - `arr` (List[int]): A list of integers where the length of the list is between 2 and 10^5, and each integer is between -10^9 and 10^9. - `x` (int): An integer value between -2*10^9 and 2*10^9. # Output - `None`: If no such pair exists. - A tuple `(i, j)`: If such a pair exists, return the indices `i` and `j` (0-based) where the sum of `arr[i]` and `arr[j]` equals `x`. If there are multiple valid pairs, return any one of them. # Examples Example 1 ``` Input: arr = [1, 2, 3, 4, 5] x = 8 Output: (2, 4) ``` Explanation: The elements at indices 2 (value 3) and 4 (value 5) sum up to 8. Example 2 ``` Input: arr = [1, 2, 3, 9] x = 8 Output: None ``` Explanation: There are no two distinct indices where the sum equals 8. # Note - Ensure the function has a time complexity better than O(n^2), ideally O(n) with the help of appropriate data structures. - The function should handle edge cases where the array has very large or very small numbers, and duplicate values in the array. # Constraints - 2 ≤ len(arr) ≤ 10^5 - -10^9 ≤ arr[i] ≤ 10^9 - -2*10^9 ≤ x ≤ 2*10^9","solution":"from typing import List, Tuple, Union def find_pairs(arr: List[int], x: int) -> Union[None, Tuple[int, int]]: This function finds two distinct indices i and j in the array such that the sum of the elements at these indices is equal to x, if such indices exist. # Dictionary to keep track of the elements we have seen so far and their indices seen = {} for i, num in enumerate(arr): # Calculate the required complement to reach the sum x complement = x - num # Check if the complement exists in the seen dictionary if complement in seen: # Return the indices (i, seen[complement]) return (seen[complement], i) # Add the current number and its index to the seen dictionary seen[num] = i # If no pair is found, return None return None"},{"question":"You are given two strings A and B consisting of lowercase English letters. Your task is to transform string A into string B using the minimum number of operations. The operations allowed are: 1. Insert a character anywhere in the string. 2. Remove a character from anywhere in the string. 3. Replace a character in the string with another character. Determine the minimum number of operations required to transform A into B. Input The input consists of two lines: - The first line contains the string A (1 ≤ |A| ≤ 1000). - The second line contains the string B (1 ≤ |B| ≤ 1000). Output Print a single integer, representing the minimum number of operations required to transform A into B. Examples Input sunday saturday Output 3 Input kitten sitting Output 3","solution":"def min_operations(A, B): Returns the minimum number of operations required to transform string A into string B. m = len(A) n = len(B) # Create a 2D array to store the minimum operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the dp array for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Write a program that reads an integer array and an integer k, and rotates the array to the right by k steps. For example, if the array is rotated by 1 step, the last element of the array moves to the first position. If the array is rotated by 2 steps, the last two elements move to the beginning of the array in their original order, and so on. Note: - If the number of steps k is greater than the length of the array, it should be equal to k % text{length of array}. - Your solution should modify the array in place. Constraints: - The length of the array will be between 1 and 1000. - The elements of the array will be between -1000 and 1000. Input: In the first line, an integer n represents the size of the array. In the second line, n space-separated integers represent the elements of the array. In the third line, an integer k represents the number of steps. Output: Output the elements of the modified array in a single line, space-separated. Example: Input 5 1 2 3 4 5 2 Output 4 5 1 2 3","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. n = len(arr) k = k % n # Normalize k to be within the length of the array arr[:] = arr[-k:] + arr[:-k] # This modifies the array in place"},{"question":"Agent OO7 has managed to get a list of secret codes, but some codes are too similar and need to be filtered out. Two codes are considered similar if one can be obtained by shuffling the digits of the other. OO7 needs your help to determine the number of unique codes after removing all similar ones. Input - The first line contains an integer \'N\' representing the total number of secret codes, followed by \'N\' lines each containing a secret code consisting of digits only. Output - A single line containing the number of unique secret codes after filtering out similar codes. Constraints - 1 ≤ N ≤ 10^4 Each code contains between 1 to 100 digits. SAMPLE INPUT 5 112 211 131 311 223 SAMPLE OUTPUT 3 Explanation 1) The first two codes \\"112\\" and \\"211\\" are considered similar because \\"211\\" can be obtained by shuffling the digits of \\"112\\", and vice versa. So, out of the first two, only one unique code remains. 2) The third and fourth codes \\"131\\" and \\"311\\" are considered similar because \\"311\\" can be obtained by shuffling the digits of \\"131\\", and vice versa. So, out of the third and fourth, only one unique code remains. 3) The fifth code \\"223\\" does not have any other similar codes in the list. Therefore, the 3 unique codes are \\"112\\", \\"131\\", and \\"223\\", making the output 3.","solution":"def count_unique_codes(codes): Returns the number of unique codes after removing all similar ones. unique_codes = set() for code in codes: # Sort the digits of the code to get the canonical form sorted_code = \'\'.join(sorted(code)) unique_codes.add(sorted_code) return len(unique_codes) # Reading input method assumes a list of codes are directly passed to the function def main(input_str): lines = input_str.strip().split(\\"n\\") N = int(lines[0]) codes = lines[1:N+1] return count_unique_codes(codes)"},{"question":"In a software development company, employees are organized in teams for various projects. Each team works in isolation and only has access to their own files. Teams occasionally need to share files with one another, usually when they collaborate on a special task. Each time a team receives a file from another team, it takes exactly 1 minute to share it with any number of their own members or to pass it to another team. Given the number of teams (T) and a list of connections (pairs of directly connected teams), determine the minimum time it takes to share a file from the originating team (team 1) to all other teams in the network. Each test case represents a separate setup of teams and their connections. Input: First line contains integer C, the number of test cases. For each test case: - The first line contains two integers: T (number of teams) and P (number of pairwise connections). - The next P lines contain two integers each, representing the teams connected directly. Output: For each test case, print the minimum time (in minutes) to share the file from team 1 to all other teams. If it\'s not possible for team 1 to reach all teams, print -1. Constraints: 1 ≤ C ≤ 1000 2 ≤ T ≤ 100000 1 ≤ P ≤ 100000 SAMPLE INPUT 2 5 4 1 2 2 3 3 4 4 5 4 2 1 2 3 4 SAMPLE OUTPUT 4 -1 Explanation In the first test case: - In the first minute, team 1 sends the file to team 2. - In the second minute, team 2 sends the file to team 3. - In the third minute, team 3 sends the file to team 4. - In the fourth minute, team 4 sends the file to team 5. - All teams receive the file within 4 minutes. In the second test case: - Team 1 can send the file to team 2, but teams 3 and 4 are isolated with no direct or indirect connection to team 1, making it impossible to share the file with all teams. Hence the answer is -1.","solution":"from collections import deque, defaultdict def min_time_to_share_file(C, test_cases): results = [] for case in test_cases: T, P, pairs = case graph = defaultdict(list) # Create the graph for a, b in pairs: graph[a].append(b) graph[b].append(a) # Use BFS to find shortest paths distances = {i: float(\'inf\') for i in range(1, T + 1)} distances[1] = 0 queue = deque([1]) while queue: current = queue.popleft() current_distance = distances[current] for neighbor in graph[current]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = current_distance + 1 queue.append(neighbor) max_distance = max(distances.values()) if max_distance == float(\'inf\'): results.append(-1) else: results.append(max_distance) return results"},{"question":"A large laboratory has acquired a robot to help organize their new library of scientific journals. The library is represented as a straight line row of shelves, with each shelf containing exactly one journal. Each journal has a unique index from 1 to n. The robot is provided a list of moves, which it should follow sequentially to swap journals between the shelves. The robot processes the list of moves by swapping the journals on the specified shelves each time. At the end of the sequence, we need to determine the final arrangement of the journals. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of shelves (or journals). The second line contains an integer m (0 ≤ m ≤ 5000) — the number of moves. Each of the next m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n) — indicating that the journal on shelf ai should be swapped with the journal on shelf bi. Output Print a single line with n integers — the final arrangement of the journals after all the swaps. Examples Input 5 3 1 2 2 3 4 5 Output 2 3 1 5 4 Input 4 0 Output 1 2 3 4 Note In the first sample, the robot will perform three swaps. Initially the journals are in the order 1, 2, 3, 4, 5. After the first swap (1, 2), the order becomes 2, 1, 3, 4, 5. After the second swap (2, 3), the order becomes 2, 3, 1, 4, 5. After the third swap (4, 5), the order becomes 2, 3, 1, 5, 4. In the second sample, as there are no moves, the journals remain in their initial positions: 1, 2, 3, 4.","solution":"def organize_journals(n, moves): # Initialize the journals in the order 1 to n journals = list(range(1, n+1)) for a, b in moves: # Swap the journals at index a-1 and b-1 journals[a-1], journals[b-1] = journals[b-1], journals[a-1] return journals"},{"question":"Alice received a list of integers for her birthday and wants to create a new list with only unique elements from the original list. She should also sort these unique elements in ascending order. However, Bob suggested an additional challenge for Alice: instead of just sorting the numbers, she must first convert each number to its binary representation and then sort these binary strings numerically. Write a function that takes a list of integers and performs the following tasks: 1. Remove all duplicate elements. 2. Convert each unique integer to its binary representation as a string. 3. Sort the binary strings numerically in ascending order. 4. Return the sorted list of binary strings. **Constraints:** - The list can contain up to 10^5 elements. - Each integer in the list is between 1 and 10^9. **Input:** - A single list of integers. **Output:** - A list of binary string representations of the unique integers sorted numerically. **Example:** Input: ```python [10, 2, 10, 5, 3, 2] ``` Output: ```python [\'10\', \'11\', \'101\', \'1010\'] ``` Input: ```python [1, 4, 3, 2, 6, 7, 5] ``` Output: ```python [\'1\', \'10\', \'11\', \'100\', \'101\', \'110\', \'111\'] ```","solution":"def sort_unique_binaries(int_list): Process the list of integers to remove duplicates, convert to binary strings, and sort these binary strings numerically. Parameters: int_list (list): List of integers Returns: list: List of sorted binary string representations of the unique integers # Step 1: Remove duplicates unique_integers = set(int_list) # Step 2: Convert each unique integer to its binary representation as a string binary_strings = [bin(num)[2:] for num in unique_integers] # Step 3: Sort the binary strings numerically sorted_binary_strings = sorted(binary_strings, key=lambda x: int(x, 2)) return sorted_binary_strings"},{"question":"Tomas is playing a game with arrays. Initially, he has an array of n integers. He wants to repaint the values in the array such that the sequence becomes non-decreasing, and only wants to use the smallest number of repaints as possible. However, Tomas can only repaint each element to one of the values that are already present in the original array. Given the initial array, help Tomas determine the minimum number of repaints required to make the array non-decreasing. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in the array. The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 1 000 000 000) — the initial array. Output Print a single integer — the minimum number of repaints needed. Examples Input 5 4 3 5 1 2 Output 3 Input 3 10 20 10 Output 1 Note In the first example, one possible way to repaint the array to become non-decreasing with 3 repaints is: - Change the second element (3) to 4. - Change the fourth element (1) to 4. - Change the fifth element (2) to 4. Thus the array becomes [4, 4, 5, 4, 4], and sorting this array results in [4, 4, 4, 4, 5]. In the second example, changing the last element (10) to 20 results in the array [10, 20, 20], which is non-decreasing with only 1 repaint.","solution":"def minimum_repaints(n, array): Function to determine the minimum number of repaints required to make the array non-decreasing using values from the original array. Parameters: n (int): The number of elements in the array. array (list): The initial array of integers. Returns: int: The minimum number of repaints needed. from bisect import bisect_right import sys LIS = [] # This will store the Longest Increasing Subsequence found so far. for num in array: pos = bisect_right(LIS, num) if pos < len(LIS): LIS[pos] = num # Replace the element else: LIS.append(num) # Add new element longest_increasing_subsequence_length = len(LIS) return n - longest_increasing_subsequence_length"},{"question":"Create a program that simulates a drone delivery system. A drone starts its journey from point A (x1, y1) and needs to deliver a package to point B (x2, y2). The drone can only move in four directions: up, down, left, and right. It is given the ability to fly over buildings, which are represented as rectangles on the grid. The buildings are described by their bottom-left and top-right corners. The drone cannot land on or move through any part of the buildings. The goal is to calculate the minimal distance the drone needs to cover to reach its destination. Input The first line of input contains four integers x1, y1, x2, and y2 (-10^9≤ x1, y1, x2, y2≤ 10^9) representing the starting point A (x1, y1) and the destination point B (x2, y2). The second line contains an integer n (0≤ n≤ 100), the number of buildings. Each of the next n lines contains four integers x3, y3, x4, and y4 (-10^9≤ x3, y3, x4, y4≤ 10^9) representing a building with its bottom-left corner at (x3, y3) and top-right corner at (x4, y4). Output Output a single floating-point number representing the minimal distance the drone needs to travel to reach from point A to point B. The answer is considered correct if its absolute or relative error does not exceed 10^{-6}. Formally, let your answer be a, and the jury\'s answer be b. Your answer is accepted if and only if frac{|a - b|}{max{(1, |b|)}} ≤ 10^{-6}. Examples Input 0 0 3 3 1 1 1 2 2 Output 8.4852813742 Input -3 -3 3 3 2 -1 -1 1 1 2 2 4 4 Output 14.1421356237 Note In the first example, the drone needs to take a path around the building from (0,0) to (3,3). In the second example, the drone avoids the buildings and reaches from (-3, -3) to (3, 3) in a straight path.","solution":"import math def minimal_distance(x1, y1, x2, y2, n, buildings): Calculate the minimal distance the drone needs to cover from point A to point B. :param x1: int, starting x-coordinate :param y1: int, starting y-coordinate :param x2: int, destination x-coordinate :param y2: int, destination y-coordinate :param n: int, number of buildings :param buildings: list of tuples, each containing four integers representing a building :return: float, minimal distance the drone needs to travel # If there are no buildings, return the direct Euclidean distance if n == 0: return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) # Placeholder for more complex pathfinding algorithm # Just calculating the direct distance for demonstration as it always valid, since the drone can fly over buildings return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)"},{"question":"Nina and her pet dog Toby love playing in the garden. Nina has a habit of arranging her toys in different ways. One day, she decides to arrange her toys in a straight line, but with a special pattern. She wants to place the toys such that every pair of consecutive toys are either both vowels or both consonants. For simplicity, consider only lowercase alphabetical characters and treat them as vowels or consonants as follows: - Vowels: a, e, i, o, u - Consonants: all other lowercase alphabetical characters Given a string `s` representing the current arrangement of toys, Nina wonders if it is possible to rearrange the toys in the desired pattern. Write a program to determine if it is possible to rearrange the string such that every pair of consecutive characters are both vowels or both consonants. Input The first and only line contains a string `s` (1 ≤ |s| ≤ 1000), consisting of lowercase alphabetical characters. Output Print \\"Yes\\" if it is possible to rearrange the string to satisfy the pattern, otherwise print \\"No\\". Example Input aebc Output Yes Note In the example, one possible rearrangement of the string \\"aebc\\" can be \\"ae\\", \\"bc\\". In this case, the pairs \\"ae\\" (both vowels) and \\"bc\\" (both consonants) satisfy the pattern. Therefore, the output is \\"Yes\\".","solution":"def is_possible_rearrangement(s): Determine if it is possible to rearrange string s such that every pair of consecutive characters are either both vowels or both consonants. vowels = set(\'aeiou\') count_vowels = sum(1 for c in s if c in vowels) count_consonants = len(s) - count_vowels # If the difference between the number of vowels and consonants is more than 1, # it\'s not possible to arrange them as per the given pattern. if abs(count_vowels - count_consonants) > 1: return \\"No\\" else: return \\"Yes\\""},{"question":"You have been given a grid with n rows and m columns, where each cell has a certain integer value. Your task is to help a robot navigate this grid starting from the top-left corner (1,1) to the bottom-right corner (n,m). The robot can only move right or down at each step. However, there\'s a twist: the robot must not exceed a certain sum S of the values of the visited cells on its path. The goal is to determine whether it is possible for the robot to reach the bottom-right corner while adhering to the constraint on the sum of visited cell values. If it is possible, also find the maximum sum S for which reaching the bottom-right corner is feasible. Input The first line contains three integers n, m, and S (1 ≤ n, m ≤ 1000, 1 ≤ S ≤ 109) — the number of rows, the number of columns in the grid, and the maximum sum constraint. The next n lines contain m integers each, representing the values in the grid. The grid values range from 1 to 1000. Output If it is possible for the robot to reach the bottom-right corner without exceeding the sum S, print \\"YES\\" followed by the maximum sum possible as described above. If it is not possible, print \\"NO\\". Example Input 3 3 8 1 3 2 4 2 3 3 1 1 Output YES 8 Input 2 2 3 2 2 3 3 Output NO","solution":"def can_robot_reach_bottom_right(n, m, S, grid): Determines if the robot can reach the bottom-right corner of the grid given the constraint on the sum S. If possible, it returns \\"YES\\" and the maximum feasible sum, otherwise \\"NO\\". from collections import deque # Breadth-First Search (BFS) approach directions = [(0, 1), (1, 0)] # Right and Down max_sums = [[0] * m for _ in range(n)] max_sums[0][0] = grid[0][0] queue = deque([(0, 0, grid[0][0])]) while queue: x, y, current_sum = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_sum = current_sum + grid[nx][ny] if new_sum <= S and new_sum > max_sums[nx][ny]: max_sums[nx][ny] = new_sum queue.append((nx, ny, new_sum)) if max_sums[-1][-1] > 0: return f\\"YES {S}\\" else: return \\"NO\\" # Example usage n = 3 m = 3 S = 8 grid = [ [1, 3, 2], [4, 2, 3], [3, 1, 1] ] print(can_robot_reach_bottom_right(n, m, S, grid)) # Should output \\"YES 8\\" # Example usage n = 2 m = 2 S = 3 grid = [ [2, 2], [3, 3] ] print(can_robot_reach_bottom_right(n, m, S, grid)) # Should output \\"NO\\""},{"question":"A large e-commerce company is organizing a sale for one of their most popular products. The product can be sold in bundles, with potential discounts applied depending on the size of the bundle purchased. Each bundle size has a fixed price, and larger bundles might offer better value for money. The company wants to determine the minimum cost for buying exactly a certain number of units of the product. You are provided the cost of different bundle sizes for the product and the number of units that need to be purchased. Write a program that finds the minimum cost to purchase exactly N units. If it\'s not possible to buy exactly N units using the given bundles, the program should return -1. Input The input is given in the following format: The first line contains two integers M and N, where M (1 ≤ M ≤ 50) is the number of different bundle sizes available, and N (1 ≤ N ≤ 1000) is the exact number of units needed. The next M lines each contain two integers Bi and Ci, where Bi (1 ≤ Bi ≤ 100) is the bundle size, and Ci (1 ≤ Ci ≤ 10000) is the cost of buying a bundle of size Bi. Output Print the minimum cost needed to purchase exactly N units. If it is not possible, print -1. Example Input 3 10 4 20 5 30 10 70 Output 60 Explanation: The company needs to buy exactly 10 units of the product. - They can buy two bundles of 4 units each at a total cost of 20 * 2 = 40, and one bundle of 2 units at a total cost of 14, making it 40 + 14 = 54. - Another option is to buy a bundle of 10 units directly, which costs 70 units. - But the cheapest option is to buy two bundles of 5 units each, totaling 30 * 2 = 60. So, the minimum cost to buy exactly 10 units is 60.","solution":"def min_cost_to_buy_units(M, N, bundles): # Initialization of dp array where dp[i] will be storing the minimum # cost to buy exactly i units. # # Set dp[0] = 0 (no cost to buy 0 units) and other dp[i] as infinity to # signify the initial state of not yet computing the cost. dp = [float(\'inf\')] * (N + 1) dp[0] = 0 # Process each bundle size and its respective cost for size, cost in bundles: for i in range(size, N + 1): if dp[i - size] != float(\'inf\'): dp[i] = min(dp[i], dp[i - size] + cost) # If dp[N] is still infinity, it means it\'s not possible to buy exactly N units return dp[N] if dp[N] != float(\'inf\') else -1"},{"question":"You are given two integer arrays, `nums1` and `nums2`, sorted in non-decreasing order and of size `m` and `n` respectively. Merge `nums2` into `nums1` as one sorted array in-place. The first `m` elements of `nums1` are initialized to the values of `nums1`, and the next `n` elements of `nums1` are set to 0 to accommodate the additional elements from `nums2`. Write a function `merge(nums1, m, nums2, n)` where: * `nums1` is a list of integers of size `m + n`, sorted in non-decreasing order with the first `m` elements initialized to the values of `nums1`. * `m` is an integer representing the number of initialized elements in `nums1`. * `nums2` is a list of integers of size `n`, sorted in non-decreasing order. * `n` is an integer representing the number of initialized elements in `nums2`. The function should do the following: * Merge `nums2` into `nums1` as one sorted array in non-decreasing order. * Modify `nums1` in-place to reflect the merged array. # Example Input ```python nums1 = [1, 2, 3, 0, 0, 0] m = 3 nums2 = [2, 5, 6] n = 3 ``` Output ```python [1, 2, 2, 3, 5, 6] ``` # Constraints * `0 <= n, m <= 200` * `1 <= nums1[i], nums2[i] <= 1000` where `0 <= i < m` and `0 <= j < n` * It is guaranteed that the initialized elements in `nums1` and `nums2` are sorted in non-decreasing order.","solution":"def merge(nums1, m, nums2, n): Merges nums2 into nums1 as one sorted array in-place. # Start from the end of the arrays while m > 0 and n > 0: if nums1[m-1] > nums2[n-1]: nums1[m + n - 1] = nums1[m - 1] m -= 1 else: nums1[m + n - 1] = nums2[n - 1] n -= 1 # If there are remaining elements in nums2, copy them while n > 0: nums1[n - 1] = nums2[n - 1] n -= 1"},{"question":"Alex is a network security analyst. He has been assigned the task of monitoring and analyzing network traffic. His objective is to identify unusual patterns that might indicate a security threat. One day, Alex notices that an attacker is attempting to brute force login attempts by trying multiple passwords. The attacker tries to login multiple times with different passwords in a very short time frame. Alex wants to identify the IP addresses that have made more than \'k\' distinct login attempts within a \'t\' second interval. Alex needs a program to help him identify such IP addresses. Write a program that takes as input the number of requests and details of each request including timestamp, IP address, and username. The program should then output the list of IP addresses that have made more than \'k\' distinct login attempts within any \'t\' second interval. Input: - The first line contains three integers n, k, and t. - The next n lines each contain a request in the format \\"timestamp IP_address username\\", where \'timestamp\' is an integer representing the time in seconds since the epoch, \'IP_address\' is a string representing the IP address of the request, and \'username\' is a string representing the username associated with the login attempt. Output: - Output a list of IP addresses that have made more than \'k\' distinct login attempts within any \'t\' second interval. The IP addresses should be in lexicographical order. Constraints: - 1 <= n <= 10000 - 1 <= k <= 100 - 1 <= t <= 3600 - \'timestamp\' is an integer and will be in the range of standard UNIX timestamps. - \'IP_address\' is a string in standard IPv4 format. - \'username\' can be any alphanumeric string. Example: Input: 8 2 60 1627654800 192.168.1.1 alice 1627654801 192.168.1.1 bob 1627654802 192.168.1.1 charlie 1627654803 192.168.1.2 alice 1627654804 192.168.1.2 bob 1627654850 192.168.1.1 delta 1627654860 192.168.1.1 echo 1627654900 192.168.1.2 frank Output: 192.168.1.1","solution":"from collections import defaultdict import heapq def identify_suspicious_ips(n, k, t, logs): Identify IP addresses with more than \'k\' distinct login attempts within \'t\' seconds interval. login_attempts = defaultdict(list) # Parse logs and group by IP for log in logs: timestamp, ip, username = log.split() timestamp = int(timestamp) login_attempts[ip].append((timestamp, username)) suspicious_ips = set() # Check for each IP for ip, attempts in login_attempts.items(): attempts.sort() # Sort by timestamp # Sliding window to find more than \'k\' distinct login attempts within \'t\' seconds distinct_usernames = defaultdict(int) start = 0 for end in range(len(attempts)): current_timestamp, current_username = attempts[end] distinct_usernames[current_username] += 1 while current_timestamp - attempts[start][0] > t: start_username = attempts[start][1] distinct_usernames[start_username] -= 1 if distinct_usernames[start_username] == 0: del distinct_usernames[start_username] start += 1 if len(distinct_usernames) > k: suspicious_ips.add(ip) break return sorted(suspicious_ips) # Example use: # n, k, t = 8, 2, 60 # logs = [ # \\"1627654800 192.168.1.1 alice\\", # \\"1627654801 192.168.1.1 bob\\", # \\"1627654802 192.168.1.1 charlie\\", # \\"1627654803 192.168.1.2 alice\\", # \\"1627654804 192.168.1.2 bob\\", # \\"1627654850 192.168.1.1 delta\\", # \\"1627654860 192.168.1.1 echo\\", # \\"1627654900 192.168.1.2 frank\\" # ] # print(identify_suspicious_ips(n, k, t, logs)) # Output: [\'192.168.1.1\']"},{"question":"In a mystical land, there are n enchanted trees standing in a straight line. Each tree has a magical fruit with a certain energy value. You need to collect fruits from exactly k trees such that the sum of the energy values of the fruits collected is maximized. However, you are only able to select k consecutive trees due to the spell\'s restrictions. Write a program to determine the maximum sum of energy values from k consecutive trees. Input The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 10^5). The second line contains n integers, which are the energy values of the fruits (each value between -10^4 and 10^4). Output Output a single integer, the maximum sum of energy values from k consecutive trees. Examples Input 5 2 -1 2 3 -2 5 Output 5 Explanation Selecting the 2nd and 3rd trees with energy values 2 and 3 respectively gives the maximum sum of 5.","solution":"def max_energy_sum(n, k, energy_values): Returns the maximum sum of energy values from k consecutive trees. # Let\'s use a sliding window to find the maximum sum of k consecutive values current_sum = sum(energy_values[:k]) max_sum = current_sum for i in range(k, n): current_sum += energy_values[i] - energy_values[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Develop a function that reverses k characters in a string, and leaves k characters unchanged, continuing this pattern throughout the string. In case the last group of characters is less than k, reverse all of them. Write a function `reverseAlternatingKChunks(s, k)` that takes two parameters - a string \'s\' and an integer \'k\', and returns the modified string after applying the alternating reversal pattern. Input: - A string \'s\' consisting of lower-case English letters. - An integer \'k\' (1 ≤ k ≤ length of the string). Output: - The resulting string after applying the reverse and leave pattern. Example: ``` Input: s = \\"abcdefg\\", k = 2 Output: \\"bacdfeg\\" Explanation: - Group 1 (Reverse): \\"ab\\" --> \\"ba\\" - Group 2 (Leave): \\"cd\\" - Group 3 (Reverse): \\"ef\\" --> \\"fe\\" - Group 4 (Reverse): \\"g\\" (less than k characters remain) --> \\"g\\" - Combined: \\"bacdfeg\\" ``` Note: - If the length of the string is less than or equal to k, reverse the entire string. - Always starts reversing the first k group then leave the next k group, and continue this pattern until the end of the string.","solution":"def reverseAlternatingKChunks(s, k): result = [] i = 0 n = len(s) reverse_flag = True while i < n: if reverse_flag: # Reverse next k characters result.append(s[i:i+k][::-1]) else: # Leave next k characters as they are result.append(s[i:i+k]) i += k reverse_flag = not reverse_flag return \'\'.join(result)"},{"question":"In a coding competition, each participant earns points based on solving problems. There are N participants, and the score for each participant is given in an array of integers where the i^th element is the score of the i^th participant. Your task is to find the k-th highest distinct score from the list. If there are less than k distinct scores, return -1. INPUT - The first line contains two integers, N and k, where N is the number of participants and k is the rank of the distinct score you are looking for. - The second line contains N space-separated integers representing the scores of the participants. OUTPUT - Output the k-th highest distinct score. If there are fewer than k distinct scores, output -1. CONSTRAINTS 1 ≤ N ≤ 10^5 -10^9 ≤ Score ≤ 10^9 1 ≤ k ≤ N SAMPLE INPUT 5 3 50 70 70 50 80 SAMPLE OUTPUT 50","solution":"def kth_highest_distinct_score(N, k, scores): Returns the k-th highest distinct score from the list of scores. If there are fewer than k distinct scores, returns -1. distinct_scores = list(set(scores)) distinct_scores.sort(reverse=True) if k <= len(distinct_scores): return distinct_scores[k-1] else: return -1"},{"question":"You are given an unsorted array of integers. Write a program to find the subarray with the maximum sum and return the sum and the subarray itself. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (−1000 ≤ ai ≤ 1000) — the elements of the array. Output Print two lines. On the first line, print an integer — the maximum sum of the subarray. On the second line, print the subarray with the maximum sum. If there are multiple subarrays with the same maximum sum, print any. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 4 -1 2 1 Input 1 -1 Output -1 -1 Note In the first example, the subarray with the maximum sum is [4, -1, 2, 1] with a sum of 6. In the second example, since there is only one element, the maximum sum subarray is just [-1].","solution":"def max_subarray_sum(arr): Finds the subarray with the maximum sum and returns the sum and the subarray itself. n = len(arr) if n == 0: return 0, [] max_sum = arr[0] current_sum = arr[0] start = 0 end = 0 temp_start = 0 for i in range(1, n): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, arr[start:end+1]"},{"question":"Dr. Smith is organizing an online quiz competition consisting of multiple rounds. Each round has a certain number of questions and a fixed time limit to complete the round. To ensure fairness, Dr. Smith wants each participant to complete all questions in each round before time runs out. However, some participants may be slower than others. To accommodate everyone, Dr. Smith has asked you to find the minimum additional time needed per participant so that even the slowest participant, given their answer rate, can complete all rounds on time. Each participant needs exactly t seconds to answer one question. Your task is to calculate the minimum additional time needed for each participant to ensure they can answer all questions in all rounds within the given time limits. Input Format: - n: Number of rounds in the quiz competition - t: Time required by a participant to answer one question - ai: Number of questions in the i-th round - bi: Time limit in seconds for the i-th round Output Format: Single integer representing the minimum additional time needed for each participant to complete all questions in all rounds. Constraints: 1 ≤ n ≤ 2000 1 ≤ t, a[i], b[i] ≤ 10^6 SAMPLE INPUT 3 5 10 20 15 60 100 75 SAMPLE OUTPUT 25 Explanation: For the first round, the participant requires 10 * 5 = 50 seconds, which is within the limit of 60 seconds. For the second round, the participant needs 20 * 5 = 100 seconds, which is exactly within the given limit. For the third round, the participant requires 15 * 5 = 75 seconds, exactly within the limit of 75 seconds. Thus, no additional time is needed for them to complete the first and third rounds, but for the second round, they require some additional time if their rate were slower. Taking into consideration the slowest possible rate, they would need an additional 25 seconds to complete the second round comfortably.","solution":"def min_additional_time(n, t, a, b): Calculate the minimum additional time needed for each participant to complete all questions in all rounds within the given time limits. Parameters: n (int): Number of rounds in the quiz competition. t (int): Time required by a participant to answer one question. a (list of int): Number of questions in the i-th round. b (list of int): Time limit in seconds for the i-th round. Returns: int: Minimum additional time needed. additional_time = 0 for i in range(n): required_time = a[i] * t if required_time > b[i]: additional_time = max(additional_time, required_time - b[i]) return additional_time"},{"question":"You are given a sequence of integers and a set of operations which modify this sequence. Each operation is one of two types: 1. \\"increase x y\\" which means increase the values of all elements in the sequence with indices between x and y (inclusive) by 1. 2. \\"decrease x y\\" which means decrease the values of all elements in the sequence with indices between x and y (inclusive) by 1. Given a sequence of integers and a set of operations, determine the final sequence after performing all operations. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the sequence. The second line contains n space-separated integers — the elements of the sequence. The third line contains an integer m (1 ≤ m ≤ 100), the number of operations. Each of the following m lines contains a string and two integers which describe the operation. The string is either \\"increase\\" or \\"decrease\\"; the integers are x and y (1 ≤ x ≤ y ≤ n). Output Print the final sequence of integers after all operations. Examples Input 5 1 2 3 4 5 3 increase 1 3 decrease 2 4 increase 1 5 Output 3 3 4 4 6 Explanation Initially, the sequence is [1, 2, 3, 4, 5]. After the first operation \\"increase 1 3\\", the sequence becomes [2, 3, 4, 4, 5]. After the second operation \\"decrease 2 4\\", the sequence becomes [2, 2, 3, 3, 5]. After the third operation \\"increase 1 5\\", the sequence becomes [3, 3, 4, 4, 6].","solution":"def perform_operations(n, sequence, m, operations): Perform a list of operations on a sequence of integers. :param n: int, number of elements in the sequence :param sequence: list of int, the sequence of integers :param m: int, number of operations :param operations: list of tuples, each operation in the form (\\"operation_type\\", x, y) :return: list of int, the final sequence after performing all operations for operation, x, y in operations: if operation == \\"increase\\": for i in range(x - 1, y): sequence[i] += 1 elif operation == \\"decrease\\": for i in range(x - 1, y): sequence[i] -= 1 return sequence"},{"question":"Given a 2D grid with \'0\'s representing empty cells and \'1\'s representing walls, you\'ll navigate through the grid starting from the top-left corner. The goal is to determine the length of the shortest path to reach the bottom-right corner while changing at most one wall (\'1\') to an empty cell (\'0\'). The movement is allowed only in four possible directions: up, down, left, and right. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500) — the dimensions of the grid. Each of the next n lines contains m characters \'0\' or \'1\' representing the grid. Output Output a single integer – the length of the shortest path from the top-left corner to the bottom-right corner considering the constraints, or -1 if such a path cannot be formed. Examples Input 3 3 011 110 000 Output 5 Input 4 4 0100 1110 1000 0000 Output 7 Input 2 2 11 11 Output -1","solution":"from collections import deque def shortest_path_with_one_wall_change(n, m, grid): Function to find the shortest path from top-left to bottom-right in a grid with the option to change at most one wall to a free cell. if not grid or not grid[0]: return -1 # Directions for movement directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS queue: (row, col, cost, wall_break_used) queue = deque([(0, 0, 1, 0)]) visited = set((0, 0, 0)) while queue: x, y, cost, wall_break = queue.popleft() # If we\'ve reached the bottom-right corner if x == n - 1 and y == m - 1: return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: if grid[nx][ny] == \'0\' and (nx, ny, wall_break) not in visited: visited.add((nx, ny, wall_break)) queue.append((nx, ny, cost + 1, wall_break)) if grid[nx][ny] == \'1\' and wall_break == 0 and (nx, ny, 1) not in visited: visited.add((nx, ny, 1)) queue.append((nx, ny, cost + 1, 1)) return -1"},{"question":"A city has a grid of streets represented as an n x n matrix. Each cell in the matrix contains a value representing the cost of building on that square of land. You need to build a park in the city by selecting a submatrix of any size. The total cost to build the park is the sum of the costs of all cells inside the chosen submatrix. Design an algorithm to find the minimum possible cost to build the park. Note that the submatrix must contain at least one cell. # Input - The first line contains one integer n (1 ≤ n ≤ 300) — the size of the city grid. - The next n lines each contain n integers — the cost of each cell in the grid. The costs are integers between 1 and 10^4. # Output - Print one integer — the minimum possible cost to build the park. # Examples Input ``` 3 3 1 4 1 2 3 4 3 2 ``` Output ``` 1 ``` Input ``` 2 5 6 7 8 ``` Output ``` 5 ``` # Note In the first example, the minimum cost to build the park is 1, which can be achieved by selecting the cell at (1,2) or (2,1). In the second example, the minimum possible cost is 5, which comes from selecting the cell (1,1).","solution":"def min_cost_to_build_park(n, grid): Calculate the minimum possible cost to build the park by selecting a submatrix of any size. The total cost to build the park is the sum of the costs of all cells inside the chosen submatrix. :param n: Size of the city grid (n x n) :param grid: n x n matrix representing the cost of building on each cell. :return: The minimum possible cost to build the park. min_cost = float(\'inf\') for r in range(n): for c in range(n): for i in range(r, n): for j in range(c, n): # Compute the sum of the submatrix from (r, c) to (i, j) current_cost = sum( grid[x][y] for x in range(r, i + 1) for y in range(c, j + 1) ) min_cost = min(min_cost, current_cost) return min_cost"},{"question":"Xeno is a security guard in a museum that has n artifacts placed on a straight line path from the entrance. To ensure the security of all artifacts, Xeno needs to patrol a certain distance. The museum\'s entrance is at position 0, and the artifacts are placed at integer positions on this path. Xeno starts his patrol at the entrance and can move at a speed of 1 unit distance per second. Due to security protocols, Xeno can only visit each position on this path once, except for the entrance which he can visit multiple times. The objective is to find the minimum time in seconds required for Xeno to start at the entrance, visit all artifact positions at least once, and return to the entrance. Input The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of artifacts. The second line of the input contains n space-separated integers xi (1 ≤ xi ≤ 1000) — the positions of the artifacts. Output Print a single integer — the minimum amount of time in seconds for Xeno to complete his patrol and return to the entrance. Examples Input 3 2 8 5 Output 16 Input 4 1 3 7 10 Output 20 Note In the first example, the optimal patrol path that Xeno can take is as follows: 1. Visit position 2: takes 2 seconds. 2. Visit position 5: takes an additional 3 seconds (5 - 2). 3. Visit position 8: takes an additional 3 seconds (8 - 5). 4. Return to entrance 0: takes 8 seconds (from position 8). Thus, Xeno needs a total of 2 + 3 + 3 + 8 = 16 seconds. In the second example, the optimal patrol path would be: 1. Visit position 1: takes 1 second. 2. Visit position 3: takes an additional 2 seconds (3 - 1). 3. Visit position 7: takes an additional 4 seconds (7 - 3). 4. Visit position 10: takes an additional 3 seconds (10 - 7). 5. Return to entrance 0: takes 10 seconds (from position 10). This results in a total time of 1 + 2 + 4 + 3 + 10 = 20 seconds.","solution":"def min_patrol_time(n, positions): Calculate the minimum time in seconds required for Xeno to patrol all artifact positions and return to the entrance. :param n: int - Number of artifacts. :param positions: list of int - Positions of the artifacts. :return: int - Minimum time in seconds. if n == 0: return 0 # Calculate the distance to the farthest artifact and back to the entrance farthest_position = max(positions) # Total distance covered is going to the farthest artifact and back total_distance = farthest_position * 2 return total_distance"},{"question":"Given an array of integers, find the length of the longest subarray where the difference between the maximum and minimum elements is less than or equal to 1. Input The first line of input contains an integer n (1 ≤ n ≤ 100000), the size of the array. The second line contains n space-separated integers representing the elements of the array (0 ≤ array[i] ≤ 100000). Output Output the length of the longest such subarray. Examples Input 7 1 2 2 1 2 2 1 Output 7 Input 5 3 3 1 1 1 Output 3","solution":"def longest_subarray(arr): Returns the length of the longest subarray where the difference between the maximum and minimum elements is less than or equal to 1. if not arr: return 0 max_len = 0 n = len(arr) left = 0 while left < n: min_val = max_val = arr[left] right = left while right < n and max(arr[left:right+1]) - min(arr[left:right+1]) <= 1: min_val = min(min_val, arr[right]) max_val = max(max_val, arr[right]) right += 1 max_len = max(max_len, right - left) left += 1 return max_len"},{"question":"Given a list of positive integers, you need to find two integers in the list such that their product is the maximum possible among all pairs of integers in the list, but their sum is the minimum possible out of all pairs with the maximum product. If there are multiple such pairs, choose the one where the first number is smaller. Input The first line contains an integer n (2 ≤ n ≤ 100), the number of integers in the list. The second line contains n space-separated positive integers ai (1 ≤ ai ≤ 1000). Output Output two integers from the list such that their product is the highest among all pairs in the list and their sum is the smallest possible out of all pairs with the same maximum product. If there are multiple such pairs, print the pair where the first number is smaller. Example Input 5 1 2 3 4 5 Output 4 5 Input 4 3 1 4 2 Output 3 4 Note In the first example, the pair (4, 5) has the maximum product (20) among all pairs, and it is the only pair with this product. In the second example, the pair (3, 4) has the maximum product (12) and its sum (7) is less than the sum of the pair (4, 2) which also has the product (8). Remember to handle the constraints properly and ensure your solution is efficient.","solution":"def max_product_min_sum(nums): Finds two integers in the list such that their product is the maximum possible among all pairs in the list and their sum is the minimum possible out of all pairs with the same maximum product. Returns the pair where the first number is smaller. n = len(nums) max_product = 0 best_pair = (None, None) for i in range(n): for j in range(i + 1, n): product = nums[i] * nums[j] if (product > max_product or (product == max_product and (nums[i] + nums[j] < best_pair[0] + best_pair[1])) or (product == max_product and nums[i] + nums[j] == best_pair[0] + best_pair[1] and nums[i] < best_pair[0])): max_product = product best_pair = (nums[i], nums[j]) return sorted(best_pair)"},{"question":"There are N workers in a factory, each with a specific skill level. The efficiency of any worker is determined by their skill multiplied by the position they are assigned to. You want to assign positions to maximize total efficiency. Specifically, if you place worker i (with skill level Si) in position j (where the positions are numbered from 1 to N), the efficiency contributed by this is Si * j. You can assign the workers to any positions you like, but each position must be filled by exactly one worker. Find the maximum total efficiency possible. Constraints - 1 leq N leq 1000 - 1 leq Si leq 10^6 - All skill levels and positions are integers. Input Input is given from Standard Input in the following format: N S1 S2 S3 ... SN Output Print the maximum total efficiency that can be achieved. Examples Input 3 4 3 2 Output 20 Input 5 1 2 3 4 5 Output 55 Input 4 10 20 30 40 Output 300","solution":"def max_efficiency(N, skills): Returns the maximum total efficiency that can be achieved by assigning workers to positions optimally. skills.sort() positions = list(range(1, N + 1)) total_efficiency = sum(s * p for s, p in zip(skills, positions)) return total_efficiency"},{"question":"In the kingdom of Zylor, there are n magical gates arranged in a row, numbered from 1 to n. Each gate is connected to a corresponding shrine where a powerful guardian resides. Each guardian can be activated by triggering the gate in front of their shrine. However, once a gate is triggered, it cannot be triggered again. The guardians are connected in a peculiar way, such that a guardian at gate i can protect the shrine at gate j if and only if j is divisible by i. Protecting a shrine means that the guardian at gate i ensures no other guardian can be activated for shrine j. Your task is to determine the maximum number of shrines that can be protected by at most one guardian. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of gates (and shrines). Output Output a single integer — the maximum number of shrines that can be protected by at most one guardian. Examples Input 5 Output 5 Input 10 Output 10 Note For the first example with n = 5, each shrine can be protected by its own guardian since there are no complex divisibility conditions to account for. For the second example with n = 10, each shrine can similarly be protected by its respective guardian. This problem requires you to understand and utilize the divisibility relations between numbers and efficiently implement a strategy to maximize the protection count by activating the appropriate guardians.","solution":"def max_shrines_protected(n): Function to determine the maximum number of shrines that can be protected by at most one guardian. # Since each guardian at gate i can protect any shrine at gate j where j is divisible by i, # and each gate can be used only once, the maximum number of shrines that can be protected # is just the number of gates itself. return n"},{"question":"Write a function that takes a string containing a mathematical expression in postfix (Reverse Polish) notation and evaluates the expression. Constraints * The input string will be a valid postfix expression consisting of integers and arithmetic operators (+, -, *, /). * Integers in the input can be positive or negative and are separated by spaces. * Assume no parentheses and proper spacing. * The result of every division is a floating-point number unless it\'s a division by zero which should be handled by returning \\"Error\\". Input A string with postfix expression. Output A float number which is the result of the evaluation of the postfix expression, or the string \\"Error\\" in case of division by zero. Examples Input \\"2 3 +\\" Output 5.0 Input \\"15 7 1 1 + - / 3 * 2 1 1 + + -\\" Output 5.0 Input \\"20 5 / 3.0 *\\" Output 12.0 Input \\"5 0 /\\" Output Error","solution":"def evaluate_postfix(expression): Evaluates a given postfix expression and returns the result as a float. If there is a division by zero, returns \\"Error\\". stack = [] for token in expression.split(): if token in \\"+-*/\\": if len(stack) < 2: return \\"Error\\" b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': if b == 0: return \\"Error\\" stack.append(a / b) else: stack.append(float(token)) if len(stack) != 1: return \\"Error\\" return stack[0]"},{"question":"Lena is organizing a fun treasure hunt game and she has hidden a treasure in an n x n grid. Each cell of the grid has a number representing the \\"terrain difficulty\\". The treasure can be reached only if the path chosen satisfies certain constraints. Lena has established a rule: you can only move to a cell if the number in that cell is a multiple of the number in your current cell or vice versa. The starting point is always the top-left cell (0,0) and the treasure is in the bottom-right cell (n-1, n-1). Your task is to determine whether it is possible to reach the treasure from the starting point by following Lena\'s rule. Input format The first line contains an integer \'n\' which denotes the size of the grid. The next n lines contain n spaced integers representing the terrain difficulty of each cell in the grid. Output format Print \\"YES\\" if it is possible to reach the bottom-right cell from the top-left cell using the given rule, otherwise print \\"NO\\". Constraints 1 ≤ n ≤ 100 1 ≤ terrain difficulty ≤ 10^3 SAMPLE INPUT 3 2 3 6 4 12 18 9 24 8 SAMPLE OUTPUT YES","solution":"def is_reachable(n, grid): from collections import deque def is_compatible(a, b): return b % a == 0 or a % b == 0 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited = [[False] * n for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == n - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and is_compatible(grid[x][y], grid[nx][ny]): visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" # Example usage n = 3 grid = [ [2, 3, 6], [4, 12, 18], [9, 24, 8] ] print(is_reachable(n, grid)) # Output: \'YES\'"},{"question":"You are given an n x m grid of random integers. The objective is to move from the top-left corner of the grid to the bottom-right corner in such a way that minimizes the sum of all the values along the path. You are only allowed to move either down or right at any step. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid, respectively. The next n lines each contain m integers representing the grid. Output Output the minimum sum of the values along the path from the top-left to bottom-right corner. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 Note In the first example, one of the optimal paths is 1 → 3 → 1 → 1 → 1, with the sum of 1+3+1+1+1=7. In the second example, the optimal path is 1 → 1 → 1, with the sum of 1+1+1=3.","solution":"def min_path_sum(grid): n = len(grid) m = len(grid[0]) # Create a 2D array to store the minimum path sum for each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Compute the minimum path sum for remaining cells for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] # Example usage if __name__ == \\"__main__\\": grid1 = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_path_sum(grid1)) # Output: 7 grid2 = [ [1, 2], [1, 1] ] print(min_path_sum(grid2)) # Output: 3"},{"question":"In a kingdom far away, there is a magical land divided into n horizontal and m vertical sectors, forming a grid of n x m sectors. Each grid point represents an intersection between these sectors. A unique number represents each intersection in this grid. Now, the king of this land loves the beauty of symmetry. The king has ordered you to build a palace on the grid in such a way that the palace fulfills his symmetry condition: the palace should be symmetric along both the main diagonal (top-left to bottom-right) and the anti-diagonal (top-right to bottom-left). Given the dimensions of the grid, determine if it is possible to place the palace in such a way that it fulfills the king\'s symmetry condition, and specify the coordinates of such a palace if possible. Input The input contains several test cases. The first line contains t (1 ≤ t ≤ 1000) — the number of test cases. Each of the following t lines describes one test case in the format of two space-separated integers n and m (1 ≤ n, m ≤ 1000): the number of horizontal and vertical sectors, respectively. Output For each test case, print \\"YES\\" if it is possible to build such a symmetric palace, followed by a set of coordinates for a palace that fulfills the symmetry condition. If it is not possible, print \\"NO\\". Example Input 4 3 3 4 4 2 3 1 1 Output YES 2 2 YES 3 3 NO YES 1 1 Explanation 1. For the 3x3 grid, placing the palace at (2, 2) creates symmetry along both diagonals. 2. For the 4x4 grid, placing the palace at (3, 3) fulfills the symmetry condition. 3. For the 2x3 grid, it is not possible to build such a palace as the sectors are not both odd. 4. For the 1x1 grid, placing the palace at (1, 1) naturally fulfills the symmetry condition.","solution":"def find_palace_location(t, cases): results = [] for n, m in cases: if n % 2 != 0 and m % 2 != 0: results.append(f\\"YES {n//2 + 1} {m//2 + 1}\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of n integers representing the heights of buildings on a street. You want to create the profile view of the street, where you can see the silhouette of the buildings from one side. The profile view is captured by considering the maximum height of buildings at each position on the street from left to right. For example, if buildings in the array have heights `4, 2, 3, 1, 5`, the profile view when seeing from the left is `4, 4, 4, 4, 5` since: - The first building is of height 4, so the maximum height so far is 4. - The second building has height 2, but the maximum height seen so far is 4. - The third building has height 3, but again the maximum height seen so far is 4. - The fourth building has height 1, and the maximum height seen so far continues to be 4. - Finally, the fifth building has height 5, which changes the maximum height seen so far to 5. Write a function to compute this profile view of the street. **Input** The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of buildings. The next line contains n integers representing the heights of the buildings (1 ≤ height ≤ 10^9). **Output** Output n integers representing the profile view of the buildings from left to right. **Example** Input 5 4 2 3 1 5 Output 4 4 4 4 5 **Explanation** In the example given, the profile view from the left is 4 4 4 4 5 as explained earlier. Each position maintains the highest building height encountered so far.","solution":"def profile_view(heights): This function computes the profile view of the buildings from left to right, considering the maximum height seen so far at each position. n = len(heights) result = [0] * n max_height_so_far = 0 for i in range(n): max_height_so_far = max(max_height_so_far, heights[i]) result[i] = max_height_so_far return result"},{"question":"Emma is a software engineer working on a project to optimize network routes. The network can be depicted as an undirected graph with n nodes and m edges. She needs to ensure that the network is robust, meaning that if any single node fails, the remaining network should still be connected. Your task is to determine if the given undirected graph is robust under the mentioned condition. Input The first line of input contains two positive space-separated integers n and m (3 ≤ n ≤ 1000, 2 ≤ m ≤ 10000) — the number of nodes and the number of edges in the graph, respectively. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating there is an undirected edge between node u and node v. There will be no self-loops or multiple edges between the same pair of nodes. Output Print \\"YES\\" if the network will remain connected if any single node is removed, otherwise print \\"NO\\". Examples Input 4 4 1 2 2 3 3 4 4 1 Output YES Input 5 5 1 2 1 3 2 3 3 4 4 5 Output NO Note In the first example, the removal of any single node still leaves the graph connected, hence the output is \\"YES\\". In the second example, if node 3 is removed for instance, the network will become disconnected, thus the output is \\"NO\\".","solution":"from collections import defaultdict def is_robust_network(n, m, edges): def dfs(v, excluded): stack = [v] visited = set() visited.add(v) while stack: node = stack.pop() for neighbor in graph[node]: if neighbor not in visited and neighbor != excluded: visited.add(neighbor) stack.append(neighbor) return visited graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) for excluded_node in range(1, n + 1): start_node = 1 if excluded_node != 1 else 2 visited = dfs(start_node, excluded_node) if len(visited) != n - 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given two arrays A and B, both of size N, representing the heights of N buildings in two different cities. You need to find the maximum number of contiguous buildings in city A that have corresponding contiguous buildings in city B with exactly the same heights. Input The first line contains one integer N (1 ≤ N ≤ 100) — the number of buildings in each city. The second line contains N space-separated integers — the heights of the buildings in city A. The third line contains N space-separated integers — the heights of the buildings in city B. Output In a single line, output the maximum number of contiguous buildings with the same height in both cities. Examples Input 5 4 3 2 1 4 4 2 3 1 4 Output 2 Input 6 1 2 3 4 5 6 7 2 3 4 8 6 Output 3 Note In the first sample, the subarrays [2, 1] appear contiguously in both arrays with the same heights. Hence, the answer is 2. In the second sample, the longest subarray that appears contiguously in both arrays with the same heights is [2, 3, 4]. Hence, the answer is 3.","solution":"def max_contiguous_buildings(N, heightsA, heightsB): Returns the maximum number of contiguous buildings in city A that have corresponding contiguous buildings in city B with exactly the same heights. max_length = 0 for i in range(N): for j in range(N): k = 0 while i + k < N and j + k < N and heightsA[i + k] == heightsB[j + k]: k += 1 max_length = max(max_length, k) return max_length # Example usage # N = 5 # heightsA = [4, 3, 2, 1, 4] # heightsB = [4, 2, 3, 1, 4] # print(max_contiguous_buildings(N, heightsA, heightsB)) # Output: 2"},{"question":"Given a sequence of integers, determine the longest contiguous subarray that has an equal number of even and odd integers. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the length of the sequence. - The second line contains N space-separated integers representing the sequence. Output: For each test case, output the length of the longest contiguous subarray with an equal number of even and odd integers. If no such subarray exists, output 0 instead. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10000 - The integers in the sequence are between -10^9 and 10^9. Example: Input: 2 5 1 2 3 4 5 4 1 1 1 1 Output: 4 0 Explanation: For the 1st test case, one possible longest subarray is [2, 3, 4, 5] which has 2 even and 2 odd numbers. For the 2nd test case, there is no subarray that has an equal number of even and odd integers.","solution":"def find_longest_subarray(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] # To store prefix sums where even -> +1 and odd -> -1 prefix_sum = {} curr_sum = 0 max_len = 0 # Store initial sum which means no elements taken prefix_sum[0] = -1 for j in range(N): if arr[j] % 2 == 0: curr_sum += 1 else: curr_sum -= 1 if curr_sum in prefix_sum: max_len = max(max_len, j - prefix_sum[curr_sum]) else: prefix_sum[curr_sum] = j results.append(max_len) return results"},{"question":"Alex loves solving puzzles and came across an interesting one related to arrays. He has an array of integers, and he needs to find a \\"peak\\" element in the array. A peak element is an element that is greater than its neighbors. For elements at the boundaries of the array, we consider only one neighbor for comparison. For example, in the array [1, 3, 20, 4, 1, 0], 20 is a peak element since it is greater than its neighbors 3 and 4. Write a function `findPeakElement` that takes an array of integers as input and returns the index of a peak element. The function should run in O(log n) time. If the array contains multiple peak elements, return the index of any one of them. You can assume the array contains at least one element. Input The first line contains an integer n (1 ≤ n ≤ 10^6) representing the number of elements in the array. The second line contains n integers representing the elements of the array. Output Print one integer representing the index (0-based) of any peak element in the array. Examples Input 6 1 3 20 4 1 0 Output 2 Input 5 10 20 15 2 23 Output 1 Input 1 42 Output 0","solution":"def findPeakElement(nums): Find a peak element in the array and return its index. The function runs in O(log n) time. A peak element is an element that is greater than its neighbors. For elements at the boundaries of the array, we consider only one neighbor for comparison. :param nums: List[int] - List of integers representing the array :return: int - Index of one peak element. def binary_search(low, high): if low == high: return low mid = (low + high) // 2 if nums[mid] > nums[mid + 1]: return binary_search(low, mid) return binary_search(mid + 1, high) return binary_search(0, len(nums) - 1)"},{"question":"You are working on a robot that moves on a two-dimensional grid. The robot begins at position (0, 0) and can move in the four cardinal directions: north, south, east, and west. Your task is to determine the robot\'s final position after a sequence of movements. Each movement is represented by a direction (\'N\', \'S\', \'E\', \'W\') followed by a number of steps. For example, \'N 3\' means the robot should move 3 steps to the north, \'S 2\' means the robot should move 2 steps to the south, etc. The robot\'s movements are input as a series of commands, each on a new line. You need to compute and output the final coordinates of the robot after performing all the movements in the sequence. Input The input consists of multiple datasets. Each dataset is given in the following format: > N > Command1 > Command2 > ... > CommandN N is the number of commands executed (1 ≤ N ≤ 10,000), and Commandi is the i-th command to be executed. Each command consists of a direction and a positive integer, separated by a space. The end of the input is indicated by one line containing one 0. Output For each dataset, output the final coordinates of the robot in the format (x, y), where x is the final x-coordinate and y is the final y-coordinate, followed by a blank line after each dataset. Sample Input 4 N 2 E 3 S 1 W 4 3 N 5 E 5 S 10 0 Output for the Sample Input (-1, 1) (5, -5) Explanation: In the first dataset: - The robot moves 2 steps north to (0, 2) - The robot moves 3 steps east to (3, 2) - The robot moves 1 step south to (3, 1) - The robot moves 4 steps west to (-1, 1) In the second dataset: - The robot moves 5 steps north to (0, 5) - The robot moves 5 steps east to (5, 5) - The robot moves 10 steps south to (5, -5)","solution":"def final_position(commands): Computes the final position of the robot after a sequence of movements. Parameters: commands (list): List of commands in the format [N, Command1, Command2, ..., CommandN] Returns: tuple: Final coordinates of the robot (x, y) x, y = 0, 0 for command in commands[1:]: direction, steps = command.split() steps = int(steps) if direction == \'N\': y += steps elif direction == \'S\': y -= steps elif direction == \'E\': x += steps elif direction == \'W\': x -= steps return (x, y) def process_datasets(input_data): Processes multiple datasets of robot commands and returns their final positions. Parameters: input_data (str): Input string containing multiple datasets Returns: list: A list of final coordinates tuples for each dataset lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(lines): num_commands = int(lines[index]) if num_commands == 0: break commands = lines[index:index+num_commands+1] final_pos = final_position(commands) results.append(final_pos) index += num_commands + 1 return results"},{"question":"Super Vizorix the Wizard is known for his complex and difficult mazes. He has a collection of T mazes, each of which is represented as a grid with R rows and C columns. Each cell in the grid can either be empty (.) or blocked (X). Super Vizorix wants to know the number of distinct paths from the top-left corner to the bottom-right corner of the grid. You can move only to the right or down from a cell, and you cannot move through a blocked cell. Can you help Super Vizorix count the number of such distinct paths? Input The first line will contain the number of mazes T. For each maze, the first line contains two space-separated integers R and C. The next R lines each contain a string of length C, representing the maze grid. Output For each maze, print the number of distinct paths from the top-left to the bottom-right corner. If no such path exists, output 0. Constraints 1 ≤ T ≤ 100 1 ≤ R, C ≤ 100 The grid will only contain characters \'.\' and \'X\'. *Subtask 1 (40 points):* R, C ≤ 10 *Subtask 2 (60 points):* Original Constraints Note: For each subtask, the rest of the constraints remain the same except the ones mentioned. SAMPLE INPUT 2 3 3 ... .X. ... 3 3 XX. .X. ... SAMPLE OUTPUT 2 0 Explanation In the first case, there are two distinct paths: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) and (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). In the second case, there is no path from the top-left to the bottom-right corner as there is no way to reach past the blocked cells.","solution":"def count_paths(mazes): Returns a list with the number of distinct paths from the top-left to the bottom-right corner for each maze. results = [] for maze in mazes: R, C, grid = maze if grid[0][0] == \'X\' or grid[R-1][C-1] == \'X\': results.append(0) continue dp = [[0] * C for _ in range(R)] dp[0][0] = 1 if grid[0][0] == \'.\' else 0 for r in range(R): for c in range(C): if grid[r][c] == \'X\': dp[r][c] = 0 else: if r > 0: dp[r][c] += dp[r-1][c] if c > 0: dp[r][c] += dp[r][c-1] results.append(dp[R-1][C-1]) return results def parse_input(input_data): Parses the input data and returns a list of mazes. lines = input_data.strip().split(\'n\') T = int(lines[0]) mazes = [] index = 1 for _ in range(T): R, C = map(int, lines[index].split()) grid = [list(lines[index + i + 1]) for i in range(R)] mazes.append((R, C, grid)) index += R + 1 return mazes def solve(input_data): mazes = parse_input(input_data) results = count_paths(mazes) for result in results: print(result)"},{"question":"You are given a rectangular grid with rows and columns of cells. Each cell contains a positive integer representing a height. You need to find the cost of covering this grid with building blocks of height 1, and also find the height of the tallest building that can be made with the given blocks. The cost of covering the grid with building blocks is determined by the sum of the heights of all cells in the grid. The tallest building that can be made is determined by the maximum cell height in the grid. Input The first line contains two integers, rows and columns (1 ≤ rows, columns ≤ 300). Each of the following rows lines contains columns integers — the heights of the cells in the grid (1 ≤ height ≤ 1000). Output Print two integers — the total cost of covering the grid and the height of the tallest building. Examples Input 3 3 3 2 1 4 2 3 5 1 2 Output 23 5 Input 2 2 1 2 2 1 Output 6 2","solution":"def grid_cost_and_tallest(rows, cols, grid): Given the height grid, return the total cost to cover the grid and the height of the tallest building. :param rows: int, number of rows of the grid :param cols: int, number of columns of the grid :param grid: list of list of int, heights of each cell in the grid :return: tuple (total_cost, tallest_building_height) total_cost = 0 tallest_building_height = 0 for row in grid: for height in row: total_cost += height if height > tallest_building_height: tallest_building_height = height return total_cost, tallest_building_height"},{"question":"You are given a list of n integers. Your task is to determine the length of the longest contiguous sublist where the sum of the elements is less than or equal to a given integer k. Input The first line contains two space-separated integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 109). The second line contains n integers ai separated by spaces ( - 109 ≤ ai ≤ 109). Output Output the length of the longest contiguous sublist whose sum is less than or equal to k. Examples Input 7 5 1 2 -1 2 3 4 1 Output 4 Input 5 10 -2 -3 4 -1 -2 Output 5 Note For the first sample, the longest contiguous sublist where the sum is less than or equal to 5 is [1, 2, -1, 2], with length 4. For the second sample, the whole list has a sum of -4 which is less than 10 making the answer 5.","solution":"def longest_sublist_length(n, k, a): Determines the length of the longest contiguous sublist where the sum of the elements is less than or equal to a given integer k. left = 0 current_sum = 0 max_length = 0 for right in range(n): current_sum += a[right] while current_sum > k: current_sum -= a[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of integers which sum up to a total S. You need to determine if it is possible to partition these integers into two subsets such that the difference between the sum of integers in the first subset and the sum of integers in the second subset is minimized. Input The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of integers in the list. The second line contains n integers ai (1 ≤ ai ≤ 1000). Output Output a single integer — the minimum possible difference between the sums of the two subsets. Examples Input 4 1 6 11 5 Output 1 Input 3 2 3 5 Output 0 Note In the first sample, the list can be partitioned into two subsets: {1, 5, 6} and {11}, where the difference between their sums is minimal, yielding an output of 1. In the second sample, the list can be partitioned into two subsets: {2, 3} and {5}, where the difference between their sums is exactly 0, yielding an output of 0.","solution":"def min_subset_sum_difference(n, arr): total_sum = sum(arr) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True # Zero sum is always possible with an empty subset for i in range(1, n + 1): for j in range(1, (total_sum // 2) + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] for j in range(total_sum // 2, -1, -1): if dp[n][j]: subset1_sum = j break subset2_sum = total_sum - subset1_sum return abs(subset2_sum - subset1_sum)"},{"question":"You are given an array consisting of N integers. Your task is to find the smallest subarray such that the sum of its elements is at least K. If no such subarray exists, return -1. Constraints * All input values are integers. * 1 ≤ N ≤ 10^5 * 1 ≤ K ≤ 10^9 * 1 ≤ array elements ≤ 10^6 Input Input is given from Standard Input in the following format: N K array_1 array_2 ... array_N Output Output the length of the smallest subarray with a sum of at least K. If no such subarray exists, output -1. Examples Input 5 11 1 2 3 4 5 Output 3 Input 4 15 1 2 3 4 Output -1 Input 6 10 1 2 3 4 5 6 Output 2","solution":"def smallest_subarray_with_sum_at_least_k(n, k, array): Returns the length of the smallest subarray with a sum of at least k. If no such subarray exists, returns -1. import sys min_length = sys.maxsize current_sum = 0 start = 0 for end in range(n): current_sum += array[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= array[start] start += 1 return min_length if min_length != sys.maxsize else -1"},{"question":"You are developing a reservation system for a new cinema. The cinema contains several screens, each with a specific number of seats arranged in rows. Given a list of seat reservations, your task is to check if all the reservations can be made without any conflict. For simplicity: - Each seat is identified by a row and a seat number within that row. - A reservation is specified by starting and ending seat numbers within a specific row. Write a function that determines if all the seat reservations can be made without any conflict. Input The first line contains two positive integers r and s (1 ≤ r ≤ 100, 1 ≤ s ≤ 1000), denoting the number of rows and the number of seats per row. The next line contains a positive integer n (1 ≤ n ≤ 10,000), denoting the number of reservations. Each of the following n lines describes a reservation in the format: `row start_seat end_seat` (1 ≤ row ≤ r, 1 ≤ start_seat ≤ end_seat ≤ s), representing a reservation from `start_seat` to `end_seat` (inclusive) in the specified row. Output Output \\"YES\\" if all reservations can be made without any conflict, otherwise output \\"NO\\". Examples Input 3 10 4 1 2 5 1 4 6 2 1 3 3 5 8 Output NO Input 2 5 3 1 1 3 1 4 5 2 2 4 Output YES Note In the first sample, the second reservation conflicts with the first reservation on seats 4 and 5 in row 1. In the second sample, all the reservations can be accommodated without any conflict.","solution":"def can_reservations_be_made(r, s, reservations): Determines if all the seat reservations can be made without any conflict. Parameters: r (int): Number of rows. s (int): Number of seats per row. reservations (list): List of tuples, each denoting a reservation in the format (row, start_seat, end_seat). Returns: str: \\"YES\\" if all reservations can be made without any conflict, otherwise \\"NO\\". # Initialize an empty list of sets for each row to keep track of booked seats booked_seats = [set() for _ in range(r)] for reservation in reservations: row, start_seat, end_seat = reservation row_index = row - 1 # Check for conflict in the current row for seat in range(start_seat, end_seat + 1): if seat in booked_seats[row_index]: return \\"NO\\" booked_seats[row_index].add(seat) return \\"YES\\""},{"question":"A network administrator needs to assign IP addresses to a set of servers such that the addresses are unique, follow a particular pattern, and no address is used more than once. Specifically, the network administrator assigns each server an IP address following the rules: * Each IP address is in the format `AAA.BBB.CCC.DDD`, where `AAA`, `BBB`, `CCC`, and `DDD` are three-digit numbers ranging from 000 to 255. * The `AAA` and `BBB` parts represent specific blocks in the network, and their values are fixed. For this problem, let `AAA = 192` and `BBB = 168`. * Each increase in server number corresponds to an increment of the `DDD` part. If `DDD` reaches `256`, it cycles to `000` and increments the `CCC` part. The task is to generate the IP addresses for each server given its number. Given the number of servers, `n`, and the starting `CCC` and `DDD` values, print the IP addresses for all `n` servers. Input * The first line contains an integer `t` (1 ≤ t ≤ 10^5) — the number of IP addresses to generate. * The second line contains two integers `CCC` and `DDD` (0 ≤ CCC, 0 ≤ DDD ≤ 255) — the starting values for the `CCC` and `DDD` parts. Output Print `t` lines with the IP addresses generated for each server. Examples Input 5 1 250 Output 192.168.001.250 192.168.001.251 192.168.001.252 192.168.001.253 192.168.001.254 Input 7 255 254 Output 192.168.255.254 192.168.255.255 192.168.000.000 192.168.000.001 192.168.000.002 192.168.000.003 192.168.000.004","solution":"def generate_ip_addresses(t, CCC, DDD): Generates t IP addresses starting from the given CCC and DDD values. Addresses follow the pattern 192.168.CCC.DDD. Args: t : int : number of IP addresses to generate CCC : int : starting value for CCC part DDD : int : starting value for DDD part Returns: result : list : list of generated IP addresses result = [] AAA = 192 BBB = 168 for _ in range(t): ip = f\\"{AAA:03}.{BBB:03}.{CCC:03}.{DDD:03}\\" result.append(ip) DDD += 1 if DDD == 256: DDD = 0 CCC += 1 if CCC == 256: CCC = 0 return result"},{"question":"There are `n` distinct integers in an array. Your task is to determine if there exists a subset of this array such that the sum of the subset is exactly zero. Input The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of elements in the array. The second line contains `n` integers `a1, a2, ..., an` (-1000 ≤ ai ≤ 1000), the elements of the array. Output Output \\"YES\\" (without quotes) if there exists a subset whose sum is zero; otherwise, output \\"NO\\". Examples Input 5 1 -1 3 2 -2 Output YES Input 4 1 2 3 4 Output NO","solution":"def is_subset_sum_zero(n, arr): Determines if there exists a subset of the array such that the sum of the subset is zero. Args: n (int): The number of elements in the array. arr (list of int): The list of integers. Returns: str: \\"YES\\" if there is a subset with sum zero, otherwise \\"NO\\". # Using a set to store the sums of all subsets subset_sums = {0} for num in arr: # Update the subset_sums set with the current number added to each of the existing sums new_sums = set() for s in subset_sums: new_sum = s + num if new_sum == 0: return \\"YES\\" new_sums.add(new_sum) subset_sums.update(new_sums) return \\"NO\\""},{"question":"Alice and Bob are playing a game with a sequence of numbers. The sequence contains N integers: A_1, A_2, ..., A_N. The game proceeds in turns, starting with Alice. On each turn, the player must choose any integer from the sequence and remove it. The player who cannot make a move loses. Each player plays optimally to maximize their chances of winning. You need to determine who will win the game if both players play optimally. Constraints: - All values in input are integers. - 1 leq N leq 100 - 1 leq A_i leq 10^9 Input: The input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N ``` Output: Print \\"Alice\\" if Alice will win, or \\"Bob\\" if Bob will win, assuming both play optimally. Examples: Input: ``` 3 1 2 3 ``` Output: ``` Alice ``` Input: ``` 4 4 5 6 7 ``` Output: ``` Alice ``` Input: ``` 2 1 2 ``` Output: ``` Bob ```","solution":"def determine_winner(N, A): Determines the winner of the game given the sequence of numbers. Args: - N: number of elements in the sequence - A: list of integers representing the sequence Returns: - A string \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins # If the number of integers is odd, Alice will always win because she starts first if N % 2 == 1: return \\"Alice\\" else: return \\"Bob\\" # Read input and call determine_winner function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:])) print(determine_winner(N, A))"},{"question":"Nina has just learned about binary search trees (BSTs) and wants to practice by finding the k-th smallest element in a BST. Given a BST and an integer k, help Nina determine the k-th smallest element in the BST. A BST is defined as follows: - The left subtree of a node contains only nodes with keys less than the node’s key. - The right subtree of a node contains only nodes with keys greater than the node’s key. - Both left and right subtrees must also be binary search trees. Write a function `kthSmallestElementInBST` that receives the root of a BST and an integer k, and returns the k-th smallest element in the BST. Constraints: * The number of nodes in the BST is between 1 and 10^4. * The value of each node is a unique integer between -10^6 and 10^6. * 1 ≤ k ≤ the number of nodes in the BST. Function Signature: ```python def kthSmallestElementInBST(root: TreeNode, k: int) -> int: pass ``` Input: * The root of the BST (as a TreeNode object). * An integer k. Output: * An integer representing the k-th smallest element in the BST. Example: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Example 1: # The BST: # 3 # / # 1 4 # # 2 root = TreeNode(3, TreeNode(1, None, TreeNode(2)), TreeNode(4)) k = 1 print(kthSmallestElementInBST(root, k)) # Output: 1 # Example 2: # The BST: # 5 # / # 3 6 # / # 2 4 # / #1 root = TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1)), TreeNode(4)), TreeNode(6)) k = 3 print(kthSmallestElementInBST(root, k)) # Output: 3 ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kthSmallestElementInBST(root: TreeNode, k: int) -> int: Return the k-th smallest element in the BST. def inorder_traversal(node): # Generator for in-order traversal if node is not None: yield from inorder_traversal(node.left) yield node.val yield from inorder_traversal(node.right) generator = inorder_traversal(root) for _ in range(k - 1): next(generator) return next(generator)"},{"question":"A company has decided to give bonuses to employees based on their performance percentage. You are tasked with writing a program that takes an integer n, representing the number of employees and an array of n integers where each element represents the performance percentage of an employee. The program should calculate and print the bonus for each employee. The bonus for an employee is calculated as follows: if the performance percentage is greater than or equal to 90, the bonus is 1000. If the performance percentage is between 70 and 89 (both inclusive), the bonus is 500. If the performance percentage is below 70, the bonus is 100. # Input - A single integer n (1 ≤ n ≤ 100), the number of employees. - An array of n integers, each representing the performance percentage of an employee (0 ≤ performance percentage ≤ 100). # Output - An array of n integers, where each element is the bonus corresponding to the performance percentage of each employee. # Example Input 5 95 87 65 78 54 Output 1000 500 100 500 100","solution":"def calculate_bonuses(n, performances): Given an integer n representing the number of employees and an array of n integers where each integer represents the performance percentage of each employee, returns an array where each element is the bonus corresponding to the performance percentage of each employee. :param n: int - Number of employees :param performances: List[int] - List of performance percentages :return: List[int] - List of bonuses bonuses = [] for performance in performances: if performance >= 90: bonuses.append(1000) elif 70 <= performance <= 89: bonuses.append(500) else: bonuses.append(100) return bonuses"},{"question":"A hacker is trying to break into a system and places certain obstacles within a network. The network can be represented as a grid of dimensions `n x m`, where `n` is the number of rows and `m` is the number of columns. Each cell in the grid can either be: 1. `0` representing an open path, or 2. `1` representing an obstacle. Hacker\'s goal is to find the number of unique paths from the top-left corner of the grid (0, 0) to the bottom-right corner (n-1, m-1) while only traversing through cells with `0` and only moving down or right. Given the grid, determine the number of unique paths the hacker can take to reach his goal, if possible. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the next `n` lines contains `m` integers (either `0` or `1`) representing the cells of the grid. Output Print a single integer — the number of unique paths from the top-left corner to the bottom-right corner. If there is no path, print `0`. Example Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Note In the given example, the hacker can traverse the following paths to reach the goal: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) Obstacles are represented as `1`, which cannot be included in the path. Thus, (1,1) cannot be a part of the path in the example grid. Paths are only counted if they lead to the bottom-right corner.","solution":"def unique_paths_with_obstacles(grid): Calculate the number of unique paths from the top-left corner to the bottom-right corner on a grid, considering obstacles. :param grid: List[List[int]], the grid of size n x m containing \'0\' open paths and \'1\' obstacles. :return: int, the number of unique paths to the bottom-right corner. n = len(grid) m = len(grid[0]) # If the starting point or ending point is an obstacle, there\'s no valid path. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # Initialize a 2D dp array with 0\'s dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given five digits M_1, M_2, M_3, M_4, and M_5. Determine if these can be arranged into the sequence of digits \\"12345\\". Constraints * 0 leq M_1, M_2, M_3, M_4, M_5 leq 9 * M_1, M_2, M_3, M_4, and M_5 are integers. Input Input is given from Standard Input in the following format: M_1 M_2 M_3 M_4 M_5 Output If M_1, M_2, M_3, M_4, and M_5 can be arranged into the sequence of digits \\"12345\\", print `YES`; if they cannot, print `NO`. Examples Input 1 2 3 4 5 Output YES Input 5 4 3 2 1 Output YES Input 1 1 2 3 4 Output NO Input 0 1 2 3 4 Output NO","solution":"def can_form_sequence(M1, M2, M3, M4, M5): Determine if the digits can be arranged into the sequence \\"12345\\". digits = sorted([M1, M2, M3, M4, M5]) if digits == [1, 2, 3, 4, 5]: return \\"YES\\" return \\"NO\\""},{"question":"You are given a string S consisting of uppercase English letters, and you are tasked with finding the length of the longest substring containing only unique letters. Constraints - The length of the string S will not exceed 1000. - The string S will only consist of the uppercase English letters A-Z. Input - Input is given from Standard Input in the following format: ``` S ``` Output - Print a single integer representing the length of the longest substring with all unique letters. Examples Input ``` ABCADEFGH ``` Output ``` 8 ``` Input ``` AABBC ``` Output ``` 2 ``` Input ``` XYZXYZ ``` Output ``` 3 ``` Notes - In the first example, \\"ABCADEFGH\\" has the longest substring \\"ABCDEFGH\\" without repeated characters, which has length 8. - In the second example, \\"AABBC\\" has the longest substring \\"AB\\" or \\"BC\\", which has length 2. - In the third example, \\"XYZXYZ\\" has the longest substrings \\"XYZ\\", both with length 3.","solution":"def longest_unique_substring_length(S): Returns the length of the longest substring with unique letters in a given string S. n = len(S) if n == 0: return 0 max_len = 0 start = 0 char_index = {} for end in range(n): if S[end] in char_index and char_index[S[end]] >= start: start = char_index[S[end]] + 1 char_index[S[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"In a particular university, there is a grading system that assigns letter grades based on students\' scores. The letter grades are categorized as follows: - A: 90 to 100 - B: 80 to 89 - C: 70 to 79 - D: 60 to 69 - F: less than 60 Given a list of students\' scores, you are required to print the letter grades corresponding to each score. Write a function `assign_grades(scores)` that takes in a list of integers `scores` and returns a list of strings representing the corresponding letter grades. Function Signature: ```python def assign_grades(scores: List[int]) -> List[str]: ``` # Input: A list of integers representing the scores of students. * Each score is an integer between 0 and 100, inclusive. * The number of students (length of the list) will not exceed 10^6. # Output: A list of strings where each string is a letter grade (\'A\', \'B\', \'C\', \'D\', or \'F\') corresponding to the input scores. # Examples: Example 1: Input: ```python [85, 92, 78, 64, 55] ``` Output: ```python [\\"B\\", \\"A\\", \\"C\\", \\"D\\", \\"F\\"] ``` Example 2: Input: ```python [100, 89, 75, 60, 59] ``` Output: ```python [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"F\\"] ``` # Constraints: * 0 ≤ scores[i] ≤ 100 * 1 ≤ len(scores) ≤ 10^6 # Notes: - Focus on ensuring that the program handles the maximum input size efficiently. - Write your solution with proper edge cases in mind, such as scores that are exactly on the boundary between two grades.","solution":"from typing import List def assign_grades(scores: List[int]) -> List[str]: Converts a list of scores to their corresponding letter grades. Parameters: - scores: List[int]: list of scores ranging from 0 to 100. Returns: - List[str]: list of letter grades corresponding to the input scores. grades = [] for score in scores: if score >= 90: grades.append(\'A\') elif score >= 80: grades.append(\'B\') elif score >= 70: grades.append(\'C\') elif score >= 60: grades.append(\'D\') else: grades.append(\'F\') return grades"},{"question":"A company is hosting a coding competition where the participants are asked to solve a set of unique problems. Each participant earns points based on the problems they solve correctly. To ensure fairness, the competition organizers want to determine the normalized ranking for each participant based on their scores relative to all other participants\' scores. Write a program that takes the number of participants and their respective scores, normalizes the scores, and outputs the normalized ranking. The normalized score for each participant is calculated as `normalized_score = (score - min_score) / (max_score - min_score)`, where `min_score` is the minimum score among all participants and `max_score` is the maximum score among all participants. The participants are then ranked based on their normalized scores in descending order (higher normalized scores should have better ranks). Input The first line contains an integer n (1 ≤ n ≤ 104) — the number of participants. The second line contains n space-separated integers s1, s2, ..., sn (0 ≤ si ≤ 105) — the scores of the participants. Output Print n space-separated integers representing the ranks of the participants based on their normalized scores. The rank is 1 for the highest normalized score, 2 for the second highest, and so on. If two or more participants have the same normalized score, they should share the same rank. Examples Input 5 10 20 20 30 40 Output 5 3 3 2 1 Input 4 12 15 15 10 Output 3 1 1 4 Note In the first test sample, the normalized scores would be [0.0, 0.25, 0.25, 0.5, 1.0]. Based on these normalized scores, the rankings are 5, 3, 3, 2, 1. In the second test sample, the normalized scores would be [0.5, 1.0, 1.0, 0.0]. Based on these normalized scores, the rankings are 3, 1, 1, 4. Note that participants with the same normalized score share the same rank.","solution":"def normalized_ranking(n, scores): Determine the normalized ranking of participants based on their scores. Args: n (int): Number of participants scores (list of int): Scores of participants Returns: list of int: Rankings of participants based on their normalized scores if n == 1: return [1] min_score, max_score = min(scores), max(scores) if max_score == min_score: return [1] * n normalized_scores = [(score - min_score) / (max_score - min_score) for score in scores] sorted_indices = sorted(range(n), key=lambda i: -normalized_scores[i]) ranks = [0] * n current_rank = 1 for i in range(n): if i == 0 or normalized_scores[sorted_indices[i]] < normalized_scores[sorted_indices[i-1]]: current_rank = i + 1 ranks[sorted_indices[i]] = current_rank return ranks"},{"question":"In a distant land called Gridonia, there is a grid with n rows and m columns. Each cell in the grid can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). A traveler wishes to move from the top-left corner of the grid to the bottom-right corner through the empty cells only. The traveler can move one cell at a time either to the right, left, up, or down, but cannot move diagonally. Your task is to determine the minimum number of steps required for the traveler to go from the top-left corner to the bottom-right corner. If it is not possible to reach the destination, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100). Each of the next n lines contains m characters, representing the grid. Output Output a single integer — the minimum number of steps required to go from the top-left corner to the bottom-right corner, or -1 if it is impossible to reach the destination. Examples Input 4 4 .... .#.# .... .... Output 6 Input 3 3 ... # ... Output -1","solution":"from collections import deque def min_steps_to_reach_end(n, m, grid): # Possible moves: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # BFS setup queue = deque([(0, 0)]) steps = {(0, 0): 0} while queue: x, y = queue.popleft() # If we have reached the bottom-right corner if (x, y) == (n - 1, m - 1): return steps[(x, y)] # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in steps: queue.append((nx, ny)) steps[(nx, ny)] = steps[(x, y)] + 1 # If there is no valid path return -1"},{"question":"Leah is a passionate gardener and loves to plant different types of flowers in her garden. She has an elongated garden bed of length `L` meters and wants to plant some flowers along it. Leah has `N` types of flowers, each requiring a specific spacing between them so that they can grow properly. The `i-th` type of flower requires at least `d[i]` meters of space between any two flowers of that type. Leah wants to maximize the number of flowers she can plant in her garden while adhering to the spacing requirement for each type of flower. Additionally, she can plant different types of flowers next to each other without any spacing restriction. You need to determine the maximum number of flowers Leah can plant in her garden. # Input - The first line contains two integers, `L` (1 ≤ L ≤ 10^6) and `N` (1 ≤ N ≤ 100). - The second line contains `N` integers, where the i-th integer `d[i]` (1 ≤ d[i] ≤ 10^6) represents the spacing requirement for the i-th type of flower. # Output - Print a single integer representing the maximum number of flowers Leah can plant in the garden. # Example Input ``` 10 3 2 3 5 ``` Output ``` 8 ``` Explanation: - Leah can plant 5 flowers of the first type (with 2 meters of spacing), which gives her 5 flowers. - She can plant 3 flowers of the second type (with 3 meters of spacing), which gives her 8 flowers in total. By testing various combinations, we find that planting 5 flowers of the first type (with 2 meters spacing) and 3 flowers of the second type (with 3 meters spacing) yields the maximum number of 8 flowers.","solution":"def max_flowers(L, N, d): Given the length of the garden L and an array of spacing requirements d, return the maximum number of flowers Leah can plant. :param L: int, length of the garden bed :param N: int, number of different types of flowers :param d: list of int, spacing requirements for each type of flower :return: int, maximum number of flowers that can be planted # Calculate the maximum number of flowers for each spacing requirement max_flowers_per_type = [L // spacing for spacing in d] # Return the maximum number of flowers from all types return max(max_flowers_per_type) def main(): import sys input = sys.stdin.read data = input().split() L = int(data[0]) N = int(data[1]) d = list(map(int, data[2:])) print(max_flowers(L, N, d)) if __name__ == \\"__main__\\": main()"},{"question":"Write a program to compute the longest common subsequence (LCS) of two given strings. The length of the strings can be up to 100 characters. The subsequence does not need to be contiguous in the original strings, but the order must be preserved. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. For instance, \\"abc\\", \\"abg\\", \\"bdf\\", \\"aeg\\", \\"acefg\\", .. etc are subsequences of \\"abcdefg\\". Input The input consists of multiple pairs of lines. Each pair of lines contains two strings for which you need to find the longest common subsequence. Each string is in a separate line. The end of input is marked by EOF. Output For each input pair, output the longest common subsequence in a new line. If there are multiple longest common subsequences with the same length, the lexicographically smallest one should be returned. If no common subsequence exists, return an empty string (i.e., a new line). Example Input abcde ace abc def abcdefgh acefh Output ace","solution":"def compute_lcs(str1, str2): Returns the longest common subsequence of str1 and str2. If there are multiple longest common subsequences, returns the lexicographically smallest one. m = len(str1) n = len(str2) # Create a 2D array to store the length of LCS lcs = [[0] * (n + 1) for _ in range(m + 1)] # Fill the lcs array for i in range(m): for j in range(n): if str1[i] == str2[j]: lcs[i+1][j+1] = lcs[i][j] + 1 else: lcs[i+1][j+1] = max(lcs[i+1][j], lcs[i][j+1]) # Now reconstruct the LCS from the lcs array result = [] x, y = m, n while x != 0 and y != 0: if lcs[x][y] == lcs[x-1][y]: x -= 1 elif lcs[x][y] == lcs[x][y-1]: y -= 1 else: result.append(str1[x-1]) x -= 1 y -= 1 return \'\'.join(result[::-1]) import sys def main(): input_pairs = sys.stdin.read().strip().split() input_pairs = [input_pairs[i:i + 2] for i in range(0, len(input_pairs), 2)] for pair in input_pairs: print(compute_lcs(pair[0], pair[1])) if __name__ == \\"__main__\\": main()"},{"question":"Design a class named `Triangle`, which represents a triangle by its three sides. Implement the following methods: 1. **Constructor** to initialize the sides of the triangle. 2. **is_valid()**: This method should verify if the three sides can form a valid triangle. A triangle is valid if the sum of its any two sides is greater than the third side. 3. **perimeter()**: This method should return the perimeter of the triangle. The perimeter of a triangle is the sum of its three sides. 4. **area()**: This method should return the area of the triangle using Heron\'s formula. Heron\'s formula states that the area of a triangle whose sides have lengths `a`, `b`, and `c` is: [ text{Area} = sqrt{s(s-a)(s-b)(s-c)} ] where ( s ) is the semi-perimeter of the triangle given by: [ s = frac{a + b + c}{2} ] # Input - The input to the constructor will be three positive floating-point numbers representing the sides of the triangle. # Output - The `is_valid()` method should return a boolean indicating whether the sides can form a valid triangle. - The `perimeter()` method should return the perimeter as a floating-point number. - The `area()` method should return the area as a floating-point number. Note that if the triangle is not valid, the `area()` method should raise a `ValueError` with the message \\"Invalid Triangle\\". # Example ```python # Creating a Triangle object triangle = Triangle(3, 4, 5) # Checking if the triangle is valid print(triangle.is_valid()) # Output: True # Calculating the perimeter of the triangle print(triangle.perimeter()) # Output: 12.0 # Calculating the area of the triangle print(triangle.area()) # Output: 6.0 ``` ```python # Creating an invalid Triangle object invalid_triangle = Triangle(1, 2, 3) # Checking if the triangle is valid print(invalid_triangle.is_valid()) # Output: False # Trying to calculate the perimeter of the invalid triangle print(invalid_triangle.perimeter()) # Output: 6.0 # Trying to calculate the area of the invalid triangle print(invalid_triangle.area()) # Raises ValueError: Invalid Triangle ```","solution":"import math class Triangle: def __init__(self, a, b, c): self.a = a self.b = b self.c = c def is_valid(self): Checks if the three sides can form a valid triangle. A triangle is valid if the sum of its any two sides is greater than the third side. return (self.a + self.b > self.c) and (self.a + self.c > self.b) and (self.b + self.c > self.a) def perimeter(self): Returns the perimeter of the triangle. The perimeter is the sum of its three sides. return self.a + self.b + self.c def area(self): Returns the area of the triangle using Heron\'s formula. Raises a ValueError if the triangle is not valid. if not self.is_valid(): raise ValueError(\\"Invalid Triangle\\") s = self.perimeter() / 2 return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))"},{"question":"Write a function to determine the minimum number of operations required to convert a given string ga to another string gb using the following operations: 1. Insert a single character. 2. Delete a single character. 3. Replace a single character. The function should take two arguments, the initial string ga and the target string gb, and return an integer representing the minimum number of operations. # Constraints * The lengths of strings ga and gb are between 1 and 1000. * Both ga and gb consist only of lowercase English letters (a-z). # Input The input consists of multiple test cases. The first line contains an integer T (1 ≤ T ≤ 50), representing the number of test cases. Each of the next T lines contains two space-separated strings, ga and gb. # Output For each test case, print the minimum number of operations required on a new line. # Example Input ``` 3 kitten sitting flaw law intention execution ``` Output ``` 3 2 5 ``` # Note For example, in the first test case `kitten` can be converted to `sitting` using the following 3 operations: 1. Replace \'k\' with \'s\'. 2. Replace \'e\' with \'i\'. 3. Insert \'g\' at the end.","solution":"def min_operations(ga, gb): Returns the minimum number of operations required to convert ga to gb using insertions, deletions, or replacements. m, n = len(ga), len(gb) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif ga[i - 1] == gb[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n] def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] for i in range(1, T + 1): ga, gb = lines[i].split() results.append(min_operations(ga, gb)) return results"},{"question":"Design and implement a function that takes a list of integers as input and returns a new list containing all the unique subsets of the original list. The subsets should be in non-descending order and should not include duplicate subsets. The function should handle large lists efficiently. Example: - Input: [1, 2, 2] - Output: [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]","solution":"def subsets_with_duplicates(nums): Returns a list of unique subsets for a given list of integers. Subsets are in non-descending order. def backtrack(start, path): result.append(path.copy()) for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue path.append(nums[i]) backtrack(i + 1, path) path.pop() nums.sort() result = [] backtrack(0, []) return result"},{"question":"Design a Python function that, given a list of integers, identifies and removes any sequences of consecutive duplicate elements, returning a modified list that retains only one instance of each group of consecutive duplicates. Ensure that the function preserves the original order of elements outside of these duplicate sequences.","solution":"def remove_consecutive_duplicates(lst): Given a list of integers, removes any sequences of consecutive duplicate elements, retaining only one instance of each group of consecutive duplicates. Parameters: lst (list): A list of integers. Returns: list: A modified list that retains only one instance of each group of consecutive duplicates. if not lst: return [] result = [lst[0]] for i in range(1, len(lst)): if lst[i] != lst[i - 1]: result.append(lst[i]) return result"},{"question":"Given two lists of integers, where each list is guaranteed to be non-empty, write a function that returns a new list containing only the unique numbers that are present in both lists. The order of the elements in the resulting list does not matter. Do not use any built-in set operations to solve the problem. Example Input: ``` list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8] ``` Example Output: ``` [4, 5] ``` Clarification: An integer is considered unique if it appears in both lists but is not repeated within each list. The resulting list should contain these unique common elements without any duplicates, regardless of their original order in the input lists. Function Signature: ```python def find_unique_common_elements(list1: List[int], list2: List[int]) -> List[int]: # Your code here ```","solution":"def find_unique_common_elements(list1, list2): Returns a list containing only the unique numbers that are present in both lists. The order of the elements in the resulting list does not matter. unique_in_list1 = {} unique_in_list2 = {} # Collect unique elements in list1 for number in list1: if number in unique_in_list1: unique_in_list1[number] += 1 else: unique_in_list1[number] = 1 # Collect unique elements in list2 for number in list2: if number in unique_in_list2: unique_in_list2[number] += 1 else: unique_in_list2[number] = 1 # Find common unique elements common_elements = [] for number in unique_in_list1: if number in unique_in_list2 and unique_in_list1[number] == 1 and unique_in_list2[number] == 1: common_elements.append(number) return common_elements"},{"question":"Given a binary tree, write a function that determines the length of the longest path in which each node’s value is the same as its parent’s value. The path does not necessarily have to pass through the root. Return the length of that longest path. Ensure your solution is efficient for trees with a large number of nodes. Example: For the tree: 1 / 4 5 / 4 4 5 The output is 2 (The longest path is the two 4s on the left subtree, or the two 5s on the right subtree)","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestUnivaluePath(root): Determines the longest path in which each node\'s value is the same as its parent\'s value. def dfs(node): nonlocal max_path if not node: return 0 left = dfs(node.left) right = dfs(node.right) left_path = right_path = 0 if node.left and node.left.val == node.val: left_path = left + 1 if node.right and node.right.val == node.val: right_path = right + 1 max_path = max(max_path, left_path + right_path) return max(left_path, right_path) max_path = 0 dfs(root) return max_path"},{"question":"Write a function to find the smallest positive integer that is missing from an unsorted array of integers. The function should handle both positive and negative integers as well as duplicates. **Example:** Input: [3, 4, -1, 1] Output: 2 Input: [1, 2, 0] Output: 3 **Requirements:** - Your solution should have a time complexity of O(n) and use constant extra space.","solution":"def find_missing_positive(nums): Returns the smallest positive integer that is missing from the unsorted array. n = len(nums) # Step 1: Replace non-positive numbers and numbers greater than n with n + 1 for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Use the index as a hash to record the presence of numbers for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: Identify the first positive number\'s index for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Write a Python function that takes a string as input and returns a new string where each character is replaced by the next character in the ASCII sequence. The function should preserve the case of the characters and maintain any non-alphabetical characters unchanged. For example, the input \\"aBc1\\" should return \\"bCd1\\".","solution":"def shift_characters(s): Takes a string as input and returns a new string where each character is replaced by the next character in the ASCII sequence. shifted_string = \\"\\" for char in s: shifted_string += chr(ord(char) + 1) if char.isalpha() else char return shifted_string"},{"question":"You are presented with a challenge titled \\"Array Element Multiplication\\". The problem is defined as follows: You have an array named `numbers` that contains `n` integers. Your task is to process a set of operations on this array. Each operation is represented by a query of three integers: `l`, `r`, and `m`. You need to multiply all elements within the subarray from index `l` to index `r` (inclusive) by the integer `m`. Finally, you need to return the modified array after performing all the operations. For instance, consider the following examples: Example 1: Given the input: numbers = [1, 2, 3, 4, 5] queries = [[1, 3, 2], [0, 2, 3]], the output should be: [3, 12, 18, 8, 5]. Here, after the first query, the array is modified to [1, 4, 6, 8, 5] (elements from index 1 to 3 multiplied by 2). After the second query, the array is further modified to [3, 12, 18, 8, 5] (elements from index 0 to 2 multiplied by 3). Example 2: Given the input: numbers = [10, 20, 30], queries = [[0, 1, 5], [1, 2, 2]], the output should be: [50, 200, 60]. Here, after the first query, the array is modified to [50, 100, 30]. After the second query, the array is further modified to [50, 200, 60]. The constraints for this problem are as follows: `1 <= numbers.length <= 10^4` `1 <= numbers[i] <= 10^4` `1 <= queries.length <= 10^4` `queries[i].length == 3` `0 <= queries[i][0] <= queries[i][1] < numbers.length` `1 <= queries[i][2] <= 10^4`","solution":"def array_element_multiplication(numbers, queries): Multiplies elements within subarrays of `numbers` as defined by `queries`. :param numbers: List of integers. :param queries: List of queries, where each query is a list of three integers [l, r, m]. :return: Modified numbers list after performing all the queries. for l, r, m in queries: for i in range(l, r + 1): numbers[i] *= m return numbers"},{"question":"You are given a list of integers and you need to find and return the sum of all the prime numbers contained in the list. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself. Write a function that accomplishes this task. input_array = [10, 15, 3, 7, 19, 21, 29] # Function Signature ```python def sum_of_primes(input_array: List[int]) -> int: pass ``` # Example ```python input_array = [10, 15, 3, 7, 19, 21, 29] sum_of_primes(input_array) # Output: 58 ```","solution":"from typing import List def is_prime(n: int) -> bool: Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def sum_of_primes(input_array: List[int]) -> int: Returns the sum of all prime numbers in the input_array. return sum(x for x in input_array if is_prime(x))"},{"question":"How do you reverse a string without using built-in functions in Python? Write a function `reverse_string` that accepts a string and returns its reverse. Ensure your implementation handles both even and odd length strings correctly. For example, given the string `\\"hello\\"`, the function should return `\\"olleh\\"`, and for the string `\\"world!\\"`, it should return `\\"!dlrow\\"`. Avoid using slicing or any built-in methods such as `reversed()` or `[::-1]`.","solution":"def reverse_string(s): Returns the reverse of the input string s without using built-in functions. reversed_str = \'\' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Implement a function that takes a list of strings and sorts them first by their lengths in descending order and then by lexicographical order for strings of the same length. For example, given the input list `[\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"egg\\", \\"fig\\", \\"grape\\"]`, the function should return `[\'banana\', \'cherry\', \'apple\', \'grape\', \'date\', \'egg\', \'fig\']`. def custom_sort(lst): This function sorts a list of strings based on length in descending order. If multiple strings have the same length, it then sorts those strings lexicographically. Args: lst: A list of strings Returns: A list of strings sorted first by length (from longest to shortest), then by lexicographical order when lengths are the same. Expectations from this function would include: >>> custom_sort([\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"egg\\", \\"fig\\", \\"grape\\"]) == [\'banana\', \'cherry\', \'apple\', \'grape\', \'date\', \'egg\', \'fig\'] >>> custom_sort([\\"a\\", \\"abc\\", \\"ab\\", \\"abcd\\", \\"\\"]) == [\'abcd\', \'abc\', \'ab\', \'a\', \'\'] >>> custom_sort([\\"xyz\\", \\"xy\\", \\"z\\", \\"w\\"]) == [\'xyz\', \'xy\', \'w\', \'z\'] pass","solution":"def custom_sort(lst): This function sorts a list of strings based on length in descending order. If multiple strings have the same length, it then sorts those strings lexicographically. Args: lst: A list of strings Returns: A list of strings sorted first by length (from longest to shortest), then by lexicographical order when lengths are the same. return sorted(lst, key=lambda x: (-len(x), x))"},{"question":"Develop a Python function that takes a list of integers and returns a dictionary. The dictionary keys should be the integers from the list that are prime numbers, and the value for each key should be the sum of the digits of that prime number. Ensure your function is optimized for efficiency with larger lists.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_digits(n): return sum(int(digit) for digit in str(n)) def prime_digit_sum(lst): Returns a dictionary where the keys are prime numbers from the input list and the values are the sum of the digits of those prime numbers. result = {} for num in lst: if is_prime(num): result[num] = sum_of_digits(num) return result"},{"question":"Construct a function that receives a list of integers as an input and rearranges the list so that all the even numbers appear before all the odd numbers, while preserving the relative order of both even and odd numbers as they appear originally in the list. Implement this function without using any additional space for another list or array.","solution":"def rearrange_even_before_odd(lst): Rearranges the list so that all even numbers appear before all the odd numbers, preserving the relative order of both even and odd numbers. Parameters: lst (list): List of integers. Returns: list: The rearranged list. if not lst: return lst next_even_index = 0 for i in range(len(lst)): if lst[i] % 2 == 0: value_to_move = lst.pop(i) lst.insert(next_even_index, value_to_move) next_even_index += 1 return lst"},{"question":"Implement a function that calculates the sum of the diagonals of a given square matrix (2D array). The function should return the difference between the sum of the main diagonal and the sum of the secondary diagonal.","solution":"def diagonal_difference(matrix): Returns the absolute difference between the sum of the main diagonal and the sum of the secondary diagonal of a square matrix. Args: matrix (list of list of int): The square matrix of integers. Returns: int: The absolute difference between the two diagonal sums. n = len(matrix) main_diagonal_sum = sum(matrix[i][i] for i in range(n)) secondary_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n)) return abs(main_diagonal_sum - secondary_diagonal_sum)"},{"question":"Develop a function in Python that takes a list of integers representing the stock prices of a company in chronological order. The function should calculate the maximum profit possible by buying and selling one share of the stock within the given timeframe. Ensure that the function handles edge cases such as constant prices and lists with fewer than two prices. Provide an explanation of your approach and analyze the time complexity of the solution.","solution":"def max_profit(prices): Calculate the maximum profit possible by buying and selling one share of stock. :param prices: List of integers representing stock prices in chronological order. :return: Maximum profit attainable, or 0 if no profit is possible. if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit # Explanation: # We initialize the minimum price to the first price and maximum profit to 0. # We then iterate through the list of prices starting from the second element. # For each price, we calculate the potential profit by subtracting the minimum price seen so far from the current price. # If this profit is greater than the maximum profit seen so far, we update the maximum profit. # We also update the minimum price if the current price is lower than the minimum price seen so far. # This approach ensures we are scanning through the list only once, resulting in a time complexity of O(n)."},{"question":"Could you develop a Python function that takes a string as input and returns an encoded version of the string using a basic Caesar cipher? The function should have an additional parameter that specifies the number of positions each character in the input string should be shifted. If the input string includes spaces, punctuation, or non-alphabetic characters, they should remain unchanged. Additionally, provide proper validation to ensure the input string is not empty and the shift parameter is an integer within a reasonable range (e.g., 1 to 25). Include appropriate test cases to demonstrate your implementation.","solution":"def caesar_cipher(input_string, shift): Encodes a given string using the Caesar cipher. :param input_string: str, the string to be encoded. :param shift: int, the number of positions each character should be shifted (1 to 25). :return: str, the encoded string. if not input_string: raise ValueError(\\"Input string must not be empty.\\") if not isinstance(shift, int) or not (1 <= shift <= 25): raise ValueError(\\"Shift must be an integer between 1 and 25.\\") encoded_string = [] for char in input_string: if char.isalpha(): shift_base = ord(\'A\') if char.isupper() else ord(\'a\') encoded_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encoded_string.append(encoded_char) else: encoded_string.append(char) # Keep non-alphabetic characters unchanged return \'\'.join(encoded_string)"},{"question":"Write a Python function that reads a list of integers and determines the longest sequence of consecutive integers present in the list. Ensure that the function can handle an unsorted list and accounts for potential edge cases such as an empty list or all elements being the same. # Input - A single list of integers, which can be unsorted and may contain duplicates. # Output - Return the length of the longest consecutive sequence of integers. # Example ``` Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore the length is 4. Input: [0, 2, 2, 1, 1] Output: 3 Explanation: The longest consecutive elements sequence is [0, 1, 2]. Therefore the length is 3. Input: [] Output: 0 Explanation: The list is empty, so the longest consecutive elements sequence length is 0. ```","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive sequence of integers in the list. if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: # only start counting if `num` is the start of a sequence current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function that takes an integer array and an integer target, and returns the indices of the two numbers in the array such that they add up to the target. If no such two numbers exist, return an empty list. Consider the array to have exactly one solution and do not use the same element twice. The function should have a time complexity of O(n).","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the nums array that add up to the target. If no such numbers exist, return an empty list. :param nums: List[int], the list of integers :param target: int, the target sum :return: List[int], the list containing the indices of the two numbers that add up to the target lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return [lookup[complement], i] lookup[num] = i return []"},{"question":"Write a Python function that accepts a string and returns a new string with all the vowels removed. Additionally, create a class with a method to demonstrate the usage of this function. Ensure the function works with both uppercase and lowercase vowels. ```python def remove_vowels(input_string): vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in input_string if char not in vowels]) class StringProcessor: def __init__(self, text): self.text = text def process(self): processed_text = remove_vowels(self.text) print(\\"Original string:\\", self.text) print(\\"String without vowels:\\", processed_text) # Example usage processor = StringProcessor(\\"Hello World!\\") processor.process() ``` Given the explanations above, the example usage of the class should demonstrate calling the method and printing the output as specified. The test string here is \\"Hello World!\\".","solution":"def remove_vowels(input_string): Accepts a string and returns a new string with all the vowels removed. vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in input_string if char not in vowels]) class StringProcessor: def __init__(self, text): self.text = text def process(self): processed_text = remove_vowels(self.text) print(\\"Original string:\\", self.text) print(\\"String without vowels:\\", processed_text) # Example usage processor = StringProcessor(\\"Hello World!\\") processor.process()"},{"question":"You are given an array of integers representing a list of book prices in a bookstore. Each book\'s price is reduced by 20% for a seasonal sale. Write a program that calculates the total cost of buying all the books with the discounted prices. Your program should output the total cost rounded to the nearest integer. The array of book prices will be provided as input. Example: Input: [100, 200, 150] Output: 360","solution":"def total_discounted_price(prices): Calculate the total cost of all books with a 20% discount, rounded to the nearest integer. Args: prices (list of int): List of book prices Returns: int: Total cost rounded to the nearest integer total = 0 for price in prices: discounted_price = price * 0.8 total += discounted_price return round(total)"},{"question":"Write a Python function that takes as input a list of integers and returns a list of the largest prime factor of each integer. If an integer is prime or less than 2, return the integer itself. For the implementation, ensure that you consider efficiency by leveraging any mathematical optimizations you know. Additionally, provide a short explanation of your approach along with unit tests to validate the correctness of your function. **Example:** ```python def largest_prime_factors(lst): # Your implementation here # Example usage input_list = [10, 15, 3, 1, 28] print(largest_prime_factors(input_list)) # Output: [5, 5, 3, 1, 7] ``` **Explanation:** - For 10, the prime factors are [2, 5], so the largest is 5. - For 15, the prime factors are [3, 5], so the largest is 5. - For 3, it is itself a prime number, so the result is 3. - For 1, it is less than 2, so the result is 1. - For 28, the prime factors are [2, 7], so the largest is 7. **Unit tests:** - Test with an empty list. - Test with prime numbers. - Test with composite numbers. - Test with numbers less than 2.","solution":"def largest_prime_factor(n): if n <= 1: return n i = 2 while i * i <= n: if n % i: i += 1 else: n //= i return n def largest_prime_factors(lst): return [largest_prime_factor(n) for n in lst]"},{"question":"Develop a Python function that accepts a list of strings and returns a new list containing only the unique strings sorted by their lengths in ascending order. If two strings have the same length, they should be sorted alphabetically within those lengths. For example, [\'pear\', \'apple\', \'orange\', \'pear\', \'banana\', \'grape\'] should return [\'pear\', \'apple\', \'grape\', \'banana\', \'orange\']. Ensure your function includes error handling for non-string values within the list and validate its correctness with asserting test cases.","solution":"def unique_sorted_by_length(strings): Returns a list of unique strings sorted by length in ascending order. If two strings have the same length, they are sorted alphabetically. if not all(isinstance(s, str) for s in strings): raise ValueError(\\"All elements in the list must be strings.\\") unique_strings = list(set(strings)) unique_strings.sort(key=lambda x: (len(x), x)) return unique_strings"},{"question":"You are given a list of integers. The task is to re-arrange the list so that all negative integers appear before all positive integers, while maintaining the relative order of the negative integers and positive integers. The function should not return a new list, but rather modify the original list in-place. For instance, consider the following examples: Example 1: Given the input list: [1, -2, 3, -4, 5] The expected output is: [-2, -4, 1, 3, 5] Example 2: Given the input list: [-1, 2, -3, 4, -5] The expected output is: [-1, -3, -5, 2, 4] Please note the following: The list may contain both positive and negative integers, as well as zeros. The relative order of the negative and positive integers should be preserved.","solution":"def rearrange_list(nums): Re-arranges the list so that all negative integers appear before all positive integers, while maintaining the relative order of the negative integers and positive integers. Modifies the original list in-place. neg = [x for x in nums if x < 0] pos = [x for x in nums if x >= 0] nums[:] = neg + pos"},{"question":"Write a Python function that takes a list of integers and an integer `n`, and returns a new list containing all integers from the original list that are greater than `n`. ```python def filter_greater_than(lst, n): # Your code here # Example usage: # lst = [7, 4, 12, 1, 9, 3] # n = 5 # filter_greater_than(lst, n) should return [7, 12, 9] ```","solution":"def filter_greater_than(lst, n): Returns a new list containing all integers from the original list that are greater than `n`. Parameters: lst (list): A list of integers. n (int): An integer to compare the elements of the list with. Returns: list: A list of integers greater than `n`. return [x for x in lst if x > n] # Example usage: # lst = [7, 4, 12, 1, 9, 3] # n = 5 # filter_greater_than(lst, n) should return [7, 12, 9]"},{"question":"Implement a function, LongestConsecutiveSubsequence, which accepts a list of integers and returns the length of the longest subsequence of consecutive integers. Handle edge cases where the input list is empty or contains only one element. Here\'s an example to illustrate the expected behavior: Examples: - Input: [1, 9, 3, 10, 4, 20, 2] Output: 4 // The longest consecutive subsequence is [1, 2, 3, 4] - Input: [100, 4, 200, 1, 3, 2] Output: 4 // The longest consecutive subsequence is [1, 2, 3, 4] Consider utilizing efficient algorithms for optimal performance.","solution":"def LongestConsecutiveSubsequence(nums): Returns the length of the longest consecutive subsequence. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function that takes a list of strings and returns a new list of strings where each string is reversed, without changing the order of the strings in the list. Additionally, the function should remove any strings that are palindromes and keep track of removed strings in a separate list. The function should return a tuple with the first element being the list of reversed, non-palindromic strings, and the second element being the list of removed palindromes, both preserving their original order. from typing import List, Tuple def reverse_and_remove_palindromes(words: List[str]) -> Tuple[List[str], List[str]]: Reverse each string in the list without changing the order of strings. Remove palindromes from the list and keep track of them in a separate list. Return a tuple with the first element being the list of reversed, non-palindromic strings, and the second element being the list of removed palindromes, preserving their original order. >>> reverse_and_remove_palindromes([\\"racecar\\", \\"hello\\", \\"madam\\", \\"world\\"]) ([\\"olleh\\", \\"dlrow\\"], [\\"racecar\\", \\"madam\\"])","solution":"from typing import List, Tuple def reverse_and_remove_palindromes(words: List[str]) -> Tuple[List[str], List[str]]: Reverse each string in the list without changing the order of strings. Remove palindromes from the list and keep track of them in a separate list. Return a tuple with the first element being the list of reversed, non-palindromic strings, and the second element being the list of removed palindromes, preserving their original order. reversed_non_palindromic_words = [] removed_palindromes = [] for word in words: if word == word[::-1]: removed_palindromes.append(word) else: reversed_non_palindromic_words.append(word[::-1]) return (reversed_non_palindromic_words, removed_palindromes)"},{"question":"Write a Python program to simulate an expression evaluator that takes a string containing a mathematical expression (involving +, -, *, /, and parentheses for precedence) and computes its result. Ensure the program can handle both integers and floating-point numbers with appropriate precision and verify the validity of the input expression. Example input: (2 + 3.5) * 4 / (1.5 - 0.5) Example output: 22.0","solution":"def evaluate_expression(expression): Evaluates a mathematical expression involving +, -, *, /, and parentheses. Supports both integers and floating point numbers. try: result = eval(expression) return result except (SyntaxError, NameError, ZeroDivisionError) as e: raise ValueError(f\\"Invalid expression: {expression}\\") # Example usage # result = evaluate_expression(\\"(2 + 3.5) * 4 / (1.5 - 0.5)\\") # print(result) # Outputs: 22.0"},{"question":"Design a function that takes a list of integers and returns a list of the same integers sorted in non-decreasing order using the QuickSort algorithm. The implementation should include detailed comments explaining each step of the algorithm. Additionally, analyze the time complexity of the QuickSort algorithm for the best, average, and worst-case scenarios. Provide test cases to verify the correctness of your implementation.","solution":"def quicksort(arr): Performs QuickSort on the given list of integers. Returns the list sorted in non-decreasing order. QuickSort is a divide-and-conquer algorithm. Step-by-step explanation: 1. Choose a pivot element from the list (here we use the last element). 2. Partition the array into three parts: elements less than pivot, the pivot itself, and elements greater than pivot. 3. Recursively apply the same strategy to the sublists formed by the partition. 4. Concatenate the results to build the sorted list. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers in non-decreasing order. if len(arr) <= 1: return arr # Choosing the pivot element pivot = arr[-1] # Partitioning step less_than_pivot = [x for x in arr[:-1] if x <= pivot] greater_than_pivot = [x for x in arr[:-1] if x > pivot] # Recursively apply quicksort to the partitions and concatenate the result return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot) # Time Complexity Analysis: # Best case: O(n log n) - When the pivot divides the array into two nearly equal halves. # Average case: O(n log n) - On average, the pivot will divide the array reasonably well. # Worst case: O(n^2) - When the pivot is always the smallest or largest element (e.g., already sorted list)."},{"question":"Write a Python function that takes a string `s` consisting of various characters, and returns a list of tuples, each containing a unique character from the string and its frequency in the string, sorted in descending order by frequency. If two characters have the same frequency, sort them alphabetically. Example: ```python def character_frequency(s: str) -> List[Tuple[str, int]]: pass # Example usage input_str = \\"abracadabra\\" print(character_frequency(input_str)) ``` Expected Output: ```python [(\'a\', 5), (\'b\', 2), (\'r\', 2), (\'c\', 1), (\'d\', 1)] ```","solution":"from typing import List, Tuple def character_frequency(s: str) -> List[Tuple[str, int]]: Returns a list of tuples, each containing a unique character from the string s and its frequency, sorted in descending order by frequency. If two characters have the same frequency, sort them alphabetically. from collections import Counter # Count frequency of each character freq = Counter(s) # Sort by frequency first (descending) then alphabetically (ascending) sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0])) return sorted_freq"},{"question":"Develop a Python function that simulates a basic ATM. The function should accept the current balance and a sequence of transactions as inputs. Each transaction will either be a deposit or a withdrawal. The function should return the final balance. If a withdrawal exceeds the available balance, the function should ignore that transaction and continue to the next one. For example: If the initial balance is `1000` and the sequence of transactions is `[(\'deposit\', 200), (\'withdraw\', 500), (\'withdraw\', 800)]`, the program should return `700` because the second withdrawal is ignored. If the initial balance is `300` and the sequence of transactions is `[(\'withdraw\', 100), (\'deposit\', 50), (\'withdraw\', 200), (\'deposit\', 100)]`, the program should return `150`.","solution":"def atm_simulator(initial_balance, transactions): Simulates an ATM by processing a sequence of transactions. :param initial_balance: float, initial balance in the account :param transactions: list of tuples, where each tuple contains a transaction type (\'deposit\' or \'withdraw\') and a transaction amount :return: float, final balance after processing all transactions balance = initial_balance for transaction in transactions: transaction_type, amount = transaction if transaction_type == \'deposit\': balance += amount elif transaction_type == \'withdraw\': if amount <= balance: balance -= amount return balance"},{"question":"Your task is to implement a function that receives a list of numbers and returns a dictionary with two keys: \\"odd\\" and \\"even\\". The values corresponding to these keys should be lists containing the odd and even numbers from the input list, respectively. If the input list is empty, return a dictionary with empty lists for both \\"odd\\" and \\"even\\". # Example: ```python def classify_numbers(numbers): # your code here print(classify_numbers([1,2,3,4,5])) # Output: {\\"odd\\": [1, 3, 5], \\"even\\": [2, 4]} print(classify_numbers([10, 15, 20, 25])) # Output: {\\"odd\\": [15, 25], \\"even\\": [10, 20]} print(classify_numbers([])) # Output: {\\"odd\\": [], \\"even\\": []} ``` # Requirements: - Define the function `classify_numbers(numbers)`. - Ensure that the function handles edge cases, such as an empty list. - Do not use external libraries; rely solely on built-in Python functions and structures.","solution":"def classify_numbers(numbers): Classifies numbers into odd and even. :param numbers: List of integers. :return: Dictionary with keys \\"odd\\" and \\"even\\" and lists of classified numbers. result = {\'odd\': [], \'even\': []} for num in numbers: if num % 2 == 0: result[\'even\'].append(num) else: result[\'odd\'].append(num) return result"},{"question":"Write a function that determines whether a given non-negative integer number is a palindrome or not without converting the number to a string. For example: ```python def is_palindrome(number: int) -> bool: # Your code here # Example usage: print(is_palindrome(12321)) # Output: True print(is_palindrome(123)) # Output: False ``` **Constraints:** - Do not convert the number to a string or use any string manipulation methods. - The function should work efficiently for large numbers.","solution":"def is_palindrome(number: int) -> bool: Determines whether a non-negative integer is a palindrome without converting it to a string. if number < 0: return False if number < 10: return True # Calculate the reverse of the number original = number reversed_number = 0 while number > 0: reversed_number = reversed_number * 10 + number % 10 number //= 10 return original == reversed_number"},{"question":"I am faced with a conundrum titled \\"Find the Missing Number\\". The dilemma is detailed as follows: You are given an array containing `n` distinct numbers taken from the range `[0, n]`. This means that the array contains all out of the `n+1` numbers in the range except for one, which is missing. Your task is to identify and return the missing number. For example, if the array is `[3, 0, 1]`, the missing number is `2` since the range `[0, 3]` should contain the numbers `{0, 1, 2, 3}` but `2` is absent. Function Signature: ```python def find_missing_number(nums: List[int]) -> int: ``` # Examples: Scenario 1: Input: nums = [3, 0, 1] Output: 2 Scenario 2: Input: nums = [0, 1] Output: 2 Scenario 3: Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 Scenario 4: Input: nums = [0] Output: 1 # Constraints: `n == len(nums)` `1 <= n <= 10^4` `0 <= nums[i] <= n` All elements in the array are distinct.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: This function finds the missing number in the array nums, which contains distinct numbers from the range [0, n]. n = len(nums) total_sum = n * (n + 1) / 2 array_sum = sum(nums) missing_number = int(total_sum - array_sum) return missing_number"},{"question":"Design a program that reads a text file containing a list of integers, one per line, and calculates the moving average of those integers with a specified window size. The program should then write the moving average results to a new file. Each result should be on a new line. To ensure memory efficiency, implement the reading and writing operations using generators. Discuss how the choice of window size influences the smoothing of the input data.","solution":"def read_integers(file_path): Reads a file containing a list of integers, one per line. Yields each integer. with open(file_path, \'r\') as file: for line in file: yield int(line.strip()) def write_moving_averages(file_path, moving_averages): Writes the moving averages to a file, one per line. with open(file_path, \'w\') as file: for avg in moving_averages: file.write(f\\"{avg}n\\") def calculate_moving_averages(integers, window_size): Calculates the moving averages of a sequence of integers with a specified window size. Uses a generator to yield each moving average. window = [] for number in integers: window.append(number) if len(window) > window_size: window.pop(0) if len(window) == window_size: yield sum(window) / window_size def process_file(input_file_path, output_file_path, window_size): Reads integers from the input file, calculates their moving averages with the given window size, and writes the results to the output file. integers = read_integers(input_file_path) moving_averages = calculate_moving_averages(integers, window_size) write_moving_averages(output_file_path, moving_averages)"},{"question":"Write a function that takes two lists of integers and returns a new list containing the integers that are present in both input lists, maintaining the order of their first appearance in the first list.","solution":"def intersection(lst1, lst2): Returns a new list containing the integers that are present in both input lists, maintaining the order of their first appearance in the first list. return [num for num in lst1 if num in lst2]"},{"question":"Consider an array of integers where each element appears twice except for one element that appears only once. Write a function that finds the single occurrence element in linear runtime complexity and uses only constant extra space. You may assume that the array is non-empty and each element in the array is a non-negative integer. **Input:** - An array of integers where each element, except one, appears twice. **Output:** - The integer that appears only once. **Example:** ```python def single_number(nums): # Your code goes here # Example usage: # Input: [4, 1, 2, 1, 2] # Output: 4 print(single_number([4, 1, 2, 1, 2])) # Output: 4 ``` **Constraints:** - The solution should have a linear runtime complexity. - The solution must not use more than constant extra space.","solution":"def single_number(nums): Finds and returns the single occurrence element in the list where each element appears twice except for one. Args: nums: List[int] - The list of integers Returns: int - The single occurrence integer single = 0 for num in nums: single ^= num return single"},{"question":"Implement a function to determine the longest consecutive sequence of identical elements in a given array of integers and return the element and the length of that sequence. If there are multiple sequences of the same length, return the first one encountered. Example: Input: [1, 1, 2, 2, 2, 3, 3, 1, 1, 1] Output: (2, 3)","solution":"def longest_consecutive_sequence(arr): Determines the longest consecutive sequence of identical elements in an array and returns the element and the length of that sequence. if not arr: return None, 0 longest_element = arr[0] longest_length = 1 current_element = arr[0] current_length = 1 for i in range(1, len(arr)): if arr[i] == current_element: current_length += 1 else: if current_length > longest_length: longest_element = current_element longest_length = current_length current_element = arr[i] current_length = 1 # Final check to handle the case where the longest sequence is at the end of the array if current_length > longest_length: longest_element = current_element longest_length = current_length return longest_element, longest_length"},{"question":"Develop a Python function that sorts a list of nested dictionaries by a specified key at any depth, and returns the sorted list. The function should accept two arguments: the list of dictionaries and the key. If the key is not present in any of the dictionaries, the original list should be returned. Additionally, analyze the time complexity of your solution. Your function should handle the following scenarios: 1. The key is present at various depths in the dictionaries. 2. The key may not exist in some or all dictionaries. 3. The values associated with the key can be of various types (integers, strings, etc.), and the function should sort them in a consistent manner. Use the following list as a reference for testing your function: ```python data = [ {\\"level1\\": {\\"level2\\": {\\"id\\": 3, \\"value\\": \\"C\\"}}}, {\\"level1\\": {\\"level2\\": {\\"id\\": 1, \\"value\\": \\"A\\"}}}, {\\"level1\\": {\\"level2\\": {\\"id\\": 2, \\"value\\": \\"B\\"}}}, {\\"level1\\": {\\"info\\": {\\"name\\": \\"D\\"}}} ] key = \\"id\\" ``` Expected output: ```python [ {\\"level1\\": {\\"level2\\": {\\"id\\": 1, \\"value\\": \\"A\\"}}}, {\\"level1\\": {\\"level2\\": {\\"id\\": 2, \\"value\\": \\"B\\"}}}, {\\"level1\\": {\\"level2\\": {\\"id\\": 3, \\"value\\": \\"C\\"}}}, {\\"level1\\": {\\"info\\": {\\"name\\": \\"D\\"}}} ] ``` Provide a brief analysis of the time complexity of your solution and describe the edge cases you have considered.","solution":"def find_key(d, key): Helper function that recursively searches for the key in nested dictionaries. Returns the value if the key is found, otherwise returns None. if key in d: return d[key] for k, v in d.items(): if isinstance(v, dict): result = find_key(v, key) if result is not None: return result return None def sort_nested_dicts(data, key): Sorts a list of nested dictionaries by a specified key at any depth. Returns the sorted list. If the key is not present in any of the dictionaries, returns the original list. # Check if the key exists in any of the dictionaries if not any(find_key(d, key) is not None for d in data): return data # Sort the list based on the value associated with the specified key return sorted(data, key=lambda d: (find_key(d, key) is None, find_key(d, key))) # Example data data = [ {\\"level1\\": {\\"level2\\": {\\"id\\": 3, \\"value\\": \\"C\\"}}}, {\\"level1\\": {\\"level2\\": {\\"id\\": 1, \\"value\\": \\"A\\"}}}, {\\"level1\\": {\\"level2\\": {\\"id\\": 2, \\"value\\": \\"B\\"}}}, {\\"level1\\": {\\"info\\": {\\"name\\": \\"D\\"}}} ] key = \\"id\\" # Expected result expected_result = [ {\\"level1\\": {\\"level2\\": {\\"id\\": 1, \\"value\\": \\"A\\"}}}, {\\"level1\\": {\\"level2\\": {\\"id\\": 2, \\"value\\": \\"B\\"}}}, {\\"level1\\": {\\"level2\\": {\\"id\\": 3, \\"value\\": \\"C\\"}}}, {\\"level1\\": {\\"info\\": {\\"name\\": \\"D\\"}}} ] # Running the function to get the sorted result result = sort_nested_dicts(data, key) print(result) # Should output the expected result"},{"question":"In Python, write a function called `merge_sorted_lists` that takes two lists of integers as input, where each list is already sorted in non-decreasing order. The function should merge these two lists into a single list that is also sorted in non-decreasing order, and return this merged list. Your function should run in O(n + m) time, where n and m are the lengths of the input lists. Example: ```python list1 = [1, 3, 5] list2 = [2, 4, 6] merge_sorted_lists(list1, list2) # Should return [1, 2, 3, 4, 5, 6] list3 = [0, 10, 20] list4 = [5, 15, 25] merge_sorted_lists(list3, list4) # Should return [0, 5, 10, 15, 20, 25] ```","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into a single sorted list. :param list1: List[int] - first sorted list :param list2: List[int] - second sorted list :return: List[int] - merged and sorted list merged_list = [] i = j = 0 # Traverse both lists and merge them into merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a Python program that finds the second most frequent element in a list. If there is a tie for the second most frequent element, return any one of them. Example input: [4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5] Expected output: 3 or 5","solution":"from collections import Counter def second_most_frequent(lst): Returns the second most frequent element in the list. If there is a tie for the second most frequent element, returns any one of them. if not lst: return None frequency = Counter(lst) most_common = frequency.most_common() if len(most_common) < 2: return None return most_common[1][0]"},{"question":"Write a function that takes a string and returns the most common character in the string. If there is a tie, return the character that appears first in the string. The string will always have at least one character. Example: ```python s = \\"abracadabra\\" ``` Output: ```python \'a\' ```","solution":"def most_common_char(s): Returns the most common character in the string s. In case of a tie, returns the character that appears first in the string. from collections import Counter count = Counter(s) max_count = max(count.values()) for char in s: if count[char] == max_count: return char"},{"question":"Design a function that takes a list of integers and returns a list of integers where each element at index i (0 <= i < n) of the input list is replaced by the product of all the integers in the list except the one at index i. You can assume that the input list does not contain zeroes. For example, for the input list [1, 2, 3, 4], the function should return [24, 12, 8, 6].","solution":"def product_except_self(nums): Returns a list of integers where each element at index i is the product of all the integers in the input list except the one at index i. n = len(nums) result = [1] * n # Calculate prefix product for each element prefix = 1 for i in range(n): result[i] = prefix prefix *= nums[i] # Calculate suffix product and multiply with respectve prefix result suffix = 1 for i in range(n - 1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"Create a function in Python that takes a string as an input and returns a dictionary where the keys are the characters of the string and the values are the number of occurrences of each character. Ignore case sensitivity and non-alphabetical characters.","solution":"def char_count(s): Returns a dictionary with characters as keys and their occurrences as values. Ignores case sensitivity and non-alphabetical characters. s = s.lower() result = {} for char in s: if char.isalpha(): if char in result: result[char] += 1 else: result[char] = 1 return result"},{"question":"Develop a Python application that simulates a basic inventory management system for a small retail store. The program should allow the user to perform the following operations: 1. **Add a New Product** - The user should be able to add a new product to the inventory by providing the product name, product ID, quantity, and price per unit. 2. **Update Product Quantity** - The user can update the quantity of a product in the inventory by specifying the product ID and the new quantity. 3. **Delete a Product** - The user should be able to remove a product from the inventory by providing the product ID. 4. **Search for a Product** - The user can search for a product by its product ID and the program should display the product name, quantity, and price per unit. 5. **Display All Products** - The user should be able to view a list of all products in the inventory, displaying the product name, product ID, quantity, and price per unit. 6. **Generate Inventory Report** - The program should generate a report that provides the total number of products, the total inventory value, and a list of products with their corresponding quantity and value (quantity * price per unit). The program should include error handling to manage the following scenarios: - Attempting to add a product with an existing product ID. - Updating the quantity of a non-existent product. - Deleting a non-existent product. - Searching for a non-existent product. - Performing operations without sufficient or valid input. Ensure the program is built with scalability in mind, allowing for easy modification and enhancement of features in the future. Use appropriate data structures for managing the inventory, and include comments to explain your code comprehensively. This exercise aims to evaluate your ability to manage data, error handling, use of control structures, and ability to write maintainable and scalable code in Python.","solution":"class Product: def __init__(self, name, product_id, quantity, price_per_unit): self.name = name self.product_id = product_id self.quantity = quantity self.price_per_unit = price_per_unit def update_quantity(self, new_quantity): self.quantity = new_quantity def get_value(self): return self.quantity * self.price_per_unit class InventoryManagementSystem: def __init__(self): self.inventory = {} def add_product(self, name, product_id, quantity, price_per_unit): if product_id in self.inventory: raise ValueError(\\"Product with this ID already exists.\\") self.inventory[product_id] = Product(name, product_id, quantity, price_per_unit) def update_product_quantity(self, product_id, new_quantity): if product_id not in self.inventory: raise ValueError(\\"Product with this ID does not exist.\\") self.inventory[product_id].update_quantity(new_quantity) def delete_product(self, product_id): if product_id not in self.inventory: raise ValueError(\\"Product with this ID does not exist.\\") del self.inventory[product_id] def search_product(self, product_id): if product_id not in self.inventory: raise ValueError(\\"Product with this ID does not exist.\\") product = self.inventory[product_id] return { \\"name\\": product.name, \\"quantity\\": product.quantity, \\"price_per_unit\\": product.price_per_unit } def display_all_products(self): products = [] for product_id, product in self.inventory.items(): products.append({ \\"name\\": product.name, \\"product_id\\": product.product_id, \\"quantity\\": product.quantity, \\"price_per_unit\\": product.price_per_unit }) return products def generate_inventory_report(self): total_products = len(self.inventory) total_inventory_value = sum(product.get_value() for product in self.inventory.values()) product_list = [{ \\"name\\": product.name, \\"quantity\\": product.quantity, \\"value\\": product.get_value() } for product in self.inventory.values()] return { \\"total_products\\": total_products, \\"total_inventory_value\\": total_inventory_value, \\"products\\": product_list }"},{"question":"Design a class structure for managing tasks in a to-do list application. Implement two classes, `Task` and `TaskManager`. The `Task` class should contain attributes `title`, `description`, `due_date`, and `priority`. Implement appropriate methods for task creation, modification, and a method `is_overdue` to check if the task is overdue based on the current date. The `TaskManager` class should manage a collection of tasks, providing functionality to add, remove, retrieve tasks by due date, retrieve tasks by priority, and mark tasks as completed. Additionally, implement a method called `get_pending_tasks` that returns a sorted list of all pending tasks by their due date. You should not import any additional libraries or modules, except for the `datetime` module. Test your classes with these examples to ensure correct output: - Create a `Task` object with title \'Submit report\', description \'Yearly financial report\', due date \'2023-10-15\', and priority 1. - Add this task to a `TaskManager` object. - Check if the task is overdue assuming today\'s date is \'2023-10-20\'. - Retrieve and print tasks sorted by priority. - Retrieve and print tasks sorted by due date. - Use the `get_pending_tasks` method to print all pending tasks sorted by their due date. ```python from datetime import datetime class Task: def __init__(self, title: str, description: str, due_date: str, priority: int): self.title = title self.description = description self.due_date = datetime.strptime(due_date, \'%Y-%m-%d\') self.priority = priority self.completed = False def is_overdue(self) -> bool: Check if the task\'s due date has passed pass def modify_task(self, title: str = None, description: str = None, due_date: str = None, priority: int = None): Modify the task\'s attributes pass def mark_as_completed(self): Mark the task as completed pass class TaskManager: def __init__(self): self.tasks = [] def add_task(self, task: Task): Add a new task to the task list pass def remove_task(self, task: Task): Remove a task from the task list pass def retrieve_tasks_by_due_date(self) -> list: Retrieve tasks sorted by their due date pass def retrieve_tasks_by_priority(self) -> list: Retrieve tasks sorted by their priority pass def get_pending_tasks(self) -> list: Retrieve all pending tasks sorted by their due date pass ```","solution":"from datetime import datetime class Task: def __init__(self, title: str, description: str, due_date: str, priority: int): self.title = title self.description = description self.due_date = datetime.strptime(due_date, \'%Y-%m-%d\') self.priority = priority self.completed = False def is_overdue(self) -> bool: Check if the task\'s due date has passed return datetime.now() > self.due_date and not self.completed def modify_task(self, title: str = None, description: str = None, due_date: str = None, priority: int = None): Modify the task\'s attributes if title: self.title = title if description: self.description = description if due_date: self.due_date = datetime.strptime(due_date, \'%Y-%m-%d\') if priority is not None: self.priority = priority def mark_as_completed(self): Mark the task as completed self.completed = True class TaskManager: def __init__(self): self.tasks = [] def add_task(self, task: Task): Add a new task to the task list self.tasks.append(task) def remove_task(self, task: Task): Remove a task from the task list self.tasks = [t for t in self.tasks if t != task] def retrieve_tasks_by_due_date(self) -> list: Retrieve tasks sorted by their due date return sorted(self.tasks, key=lambda x: x.due_date) def retrieve_tasks_by_priority(self) -> list: Retrieve tasks sorted by their priority return sorted(self.tasks, key=lambda x: x.priority) def get_pending_tasks(self) -> list: Retrieve all pending tasks sorted by their due date return sorted([task for task in self.tasks if not task.completed], key=lambda x: x.due_date)"},{"question":"Create a function in Python that takes two sorted lists of integers and merges them into one sorted list without using any built-in sort functions. Example: Input: list1 = [1, 3, 5] list2 = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6]","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list without using any built-in sort functions. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements, if any while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Develop a function to analyze the sentiment of a given paragraph of text. The function should accept a string input and identify whether the overall sentiment is positive, negative, or neutral. It should achieve this by counting the number of positive and negative words, specified in predefined lists, and comparing these counts. If the number of positive words is greater, the sentiment is positive; if the number of negative words is greater, the sentiment is negative; if they are equal, the sentiment is neutral. Ensure your solution is efficient and capable of handling large blocks of text.","solution":"def analyze_sentiment(paragraph): Analyze the sentiment of a given paragraph of text. The function identifies whether the overall sentiment is positive, negative, or neutral by counting the number of positive and negative words in the paragraph and comparing these counts. Args: paragraph (str): The input paragraph of text to analyze. Returns: str: \'positive\', \'negative\', or \'neutral\' based on the sentiment analysis. positive_words = {\\"good\\", \\"happy\\", \\"joyful\\", \\"excellent\\", \\"wonderful\\", \\"amazing\\"} negative_words = {\\"bad\\", \\"sad\\", \\"terrible\\", \\"awful\\", \\"horrible\\", \\"unhappy\\"} words = paragraph.lower().split() positive_count = sum(1 for word in words if word in positive_words) negative_count = sum(1 for word in words if word in negative_words) if positive_count > negative_count: return \'positive\' elif negative_count > positive_count: return \'negative\' else: return \'neutral\'"},{"question":"Design a function `find_pair_with_sum` that takes a list of integers and a target sum as input, and returns a tuple containing two distinct integers from the list that add up to the target sum. If no such pair exists, the function should return `None`. Ensure that your solution has a time complexity of O(n). Here is the function signature: ```python def find_pair_with_sum(numbers: List[int], target: int) -> Optional[Tuple[int, int]]: pass ``` # Input - `numbers`: A list of integers where the length is between 2 and 10^4. - `target`: An integer representing the target sum, which can be positive or negative. # Output - A tuple of two integers from the list that add up to `target`. # Example ```python find_pair_with_sum([2, 7, 11, 15], 9) # returns (2, 7) find_pair_with_sum([1, 5, 3, 4, 2], 6) # returns (1, 5) or (2, 4) find_pair_with_sum([3, 5, 9], 12) # returns (3, 9) find_pair_with_sum([1, 2, 3], 7) # returns None ```","solution":"from typing import List, Optional, Tuple def find_pair_with_sum(numbers: List[int], target: int) -> Optional[Tuple[int, int]]: Finds two distinct integers in `numbers` that add up to `target`. Parameters: - numbers (List[int]): The list of integers to search within. - target (int): The target sum to find. Returns: - Optional[Tuple[int, int]]: A tuple of two integers that add up to `target`, or None if no such pair exists. seen = {} for number in numbers: complement = target - number if complement in seen: return (complement, number) seen[number] = True return None"},{"question":"Design a function that takes a string consisting of lowercase and uppercase letters and returns a new string where each character is shifted by 3 positions in the alphabet, maintaining the original case. For example, \'a\' becomes \'d\', \'Z\' becomes \'C\'. Include error handling for non-alphabetic characters, which should remain unchanged.","solution":"def shift_char(c, shift): if c.islower(): return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif c.isupper(): return chr((ord(c) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: return c def shift_string(s, shift=3): Returns a new string where each character is shifted by \'shift\' positions in the alphabet. Non-alphabetic characters remain unchanged. Parameters: s (str): The input string to be shifted. shift (int): The number of positions to shift each character (default is 3). Returns: str: The shifted string. return \'\'.join(shift_char(c, shift) for c in s)"},{"question":"Create a function called `balance_brackets` that checks whether the brackets in a given string are balanced. The function should support the following types of brackets: `()`, `{}`, and `[]`. The function should return `True` if the string contains a balanced set of brackets, and `False` otherwise. You may assume the string contains only these bracket characters and no other type of characters. Here are the requirements: - Implement the function using a stack data structure. - Ensure the function can handle edge cases like an empty string. - Optimal efficiency with respect to time and space complexity. Example input and output: - `balance_brackets(\\"()[]{}\\")` should return `True`. - `balance_brackets(\\"([{}])\\")` should return `True`. - `balance_brackets(\\"([)]\\")` should return `False`. - `balance_brackets(\\"{[}\\")` should return `False`.","solution":"def balance_brackets(s): Checks if the brackets in the given string are balanced. Parameters: s (str): The string containing brackets. Returns: bool: True if the brackets are balanced, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) else: if not stack or bracket_map[char] != stack.pop(): return False return not stack"},{"question":"Your task is to implement a function `find_next_square` that finds the next perfect square after a given integer. A perfect square is an integer that can be expressed as the product of an integer with itself (e.g., 1, 4, 9, 16, ...). The function should return the next perfect square if the given integer is itself a perfect square, otherwise, it should return -1. # Function Signature ```python def find_next_square(n: int) -> int: pass ``` # Input - `n`: An integer in the range [0, 10^9]. # Output - The next perfect square if `n` is a perfect square; otherwise, -1. # Example ```python assert find_next_square(16) == 25 assert find_next_square(1) == 4 assert find_next_square(10) == -1 ``` # Constraints - You can assume that the input will always be an integer. - Your solution should have a time complexity of O(sqrt(n)).","solution":"import math def find_next_square(n): Given an integer n, returns the next perfect square if n is a perfect square. Otherwise, returns -1. if n < 0: return -1 root = math.isqrt(n) if root * root == n: return (root + 1) ** 2 else: return -1"},{"question":"Design a function that takes a string input and returns the longest palindrome substring contained within that string. The function should efficiently find the palindrome using dynamic programming methodology. If there are multiple palindromes of the same maximum length, return the first one encountered. For example, given the input string \\"babad\\", the function would return \\"bab\\" or \\"aba\\" (either is acceptable), and for the string \\"cbbd\\", the function would return \\"bb\\". The program should handle edge cases such as an empty string and a string with no palindromes longer than one character.","solution":"def longest_palindrome_substring(s): Returns the longest palindrome substring in the given string `s`. n = len(s) if n == 0: return \\"\\" dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 for i in range(n): dp[i][i] = True for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True start = i max_length = length return s[start:start + max_length]"},{"question":"Can you write a function that performs an in-order traversal of a binary search tree (BST) and returns the elements in a sorted list? Additionally, provide a detailed explanation of your approach, including its time and space complexity. Validate your solution by writing test cases that cover common edge cases, such as an empty tree, a tree with one node, and a tree with multiple levels.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def in_order_traversal(root): Perform an in-order traversal of a binary search tree and return the elements in a sorted list. result = [] def traverse(node): if node is not None: traverse(node.left) result.append(node.value) traverse(node.right) traverse(root) return result"},{"question":"Write a Python function named `find_prime_numbers` that takes two integers, `start` and `end`, as parameters and returns a list of all prime numbers between `start` and `end` (inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example: ```python find_prime_numbers(10, 30) ``` The above example should return: ```python [11, 13, 17, 19, 23, 29] ```","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False elif n <= 3: return True elif n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_prime_numbers(start, end): Returns a list of all prime numbers between start and end (inclusive). return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Create a program that takes a list of strings as input, where each string represents an arithmetic expression consisting of non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. The program should evaluate each expression and return a list of results corresponding to the input expressions. The input strings will not contain any spaces, and the integer division should truncate towards zero (behaving like Python\'s `//` operator). **Constraints:** - You cannot use the `eval()` function or any other direct evaluation functions. - You must handle operator precedence and parentheses correctly. - Input list will contain at least one string. **Example:** ```python input_expressions = [\\"3+5*2\\", \\"(2+3)*(5-2)\\", \\"10/2-1\\"] output_results = [13, 15, 4] ```","solution":"def evaluate_expression(expression): Evaluates a single arithmetic expression string and returns the result def apply_operator(operators, operands): operator = operators.pop() right_operand = operands.pop() left_operand = operands.pop() if operator == \'+\': operands.append(left_operand + right_operand) elif operator == \'-\': operands.append(left_operand - right_operand) elif operator == \'*\': operands.append(left_operand * right_operand) elif operator == \'/\': operands.append(int(left_operand / right_operand)) # Truncate towards zero def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] operands = [] i = 0 while i < len(expression): if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 operands.append(num) i -= 1 elif expression[i] == \')\': while operators[-1] != \'(\': apply_operator(operators, operands) operators.pop() # Pop \'(\' else: while (operators and operators[-1] != \'(\' and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, operands) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, operands) return operands[-1] def evaluate_expressions(expressions): Takes a list of arithmetic expression strings and returns the evaluated results as a list return [evaluate_expression(expression) for expression in expressions]"},{"question":"Create a program that predicts housing prices using a linear regression model in Scikit-learn. First, load the California Housing dataset from Scikit-learn, and then perform data preprocessing which includes handling missing values, feature scaling, and splitting the dataset into training and testing sets. Fit a linear regression model to the training data and evaluate its performance on the test data using metrics like Mean Absolute Error (MAE), Mean Squared Error (MSE), and R-squared score. Finally, visualize the predicted prices versus the actual prices in a scatter plot and provide a brief analysis of the model\'s performance based on the evaluation metrics. You may load the California Housing dataset and start preprocessing with the following sample code: ```python from sklearn.datasets import fetch_california_housing from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score import matplotlib.pyplot as plt # Load dataset data = fetch_california_housing() X, y = data.data, data.target # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Feature scaling scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # Fit the model model = LinearRegression() model.fit(X_train_scaled, y_train) # Evaluate the model y_pred = model.predict(X_test_scaled) print(\'Mean Absolute Error:\', mean_absolute_error(y_test, y_pred)) print(\'Mean Squared Error:\', mean_squared_error(y_test, y_pred)) print(\'R-squared Score:\', r2_score(y_test, y_pred)) # Visualize the performance plt.scatter(y_test, y_pred) plt.xlabel(\'Actual Prices\') plt.ylabel(\'Predicted Prices\') plt.title(\'Actual vs Predicted Housing Prices\') plt.show() ```","solution":"from sklearn.datasets import fetch_california_housing from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score import matplotlib.pyplot as plt def load_and_preprocess_data(): # Load dataset data = fetch_california_housing() X, y = data.data, data.target # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Feature scaling scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) return X_train_scaled, X_test_scaled, y_train, y_test def train_and_evaluate_model(X_train_scaled, X_test_scaled, y_train, y_test): # Fit the model model = LinearRegression() model.fit(X_train_scaled, y_train) # Evaluate the model y_pred = model.predict(X_test_scaled) mae = mean_absolute_error(y_test, y_pred) mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) return y_pred, mae, mse, r2 def visualize_results(y_test, y_pred): # Visualize the performance plt.scatter(y_test, y_pred) plt.xlabel(\'Actual Prices\') plt.ylabel(\'Predicted Prices\') plt.title(\'Actual vs Predicted Housing Prices\') plt.show() # Load and preprocess data X_train_scaled, X_test_scaled, y_train, y_test = load_and_preprocess_data() # Train and evaluate the model y_pred, mae, mse, r2 = train_and_evaluate_model(X_train_scaled, X_test_scaled, y_train, y_test) # Print evaluation metrics print(\'Mean Absolute Error:\', mae) print(\'Mean Squared Error:\', mse) print(\'R-squared Score:\', r2) # Visualize the results visualize_results(y_test, y_pred)"},{"question":"A small robot is programmed to traverse a grid consisting of obstacle cells and free cells, starting from the top-left corner (0, 0) and attempting to reach the bottom-right corner. The robot can only move right or down at any point in time. Each cell in the grid can either have an obstacle denoted by \'1\' or be a free cell denoted by \'0\'. Write a program that determines the number of unique paths the robot can take from the start to the destination, considering the obstacles on the grid. If there is no possible path, return 0. **Function Signature:** ```python def unique_paths_with_obstacles(grid: List[List[int]]) -> int: pass ``` **Input:** - `grid`: A list of lists where each inner list represents a row in the grid, containing either \'0\' or \'1\'. The grid has dimensions m x n. **Output:** - The number of unique paths from the top-left to the bottom-right corner. **Examples:** 1. `grid = [[0,0,0],[0,1,0],[0,0,0]]` - Output: `2` 2. `grid = [[0,1],[0,0]]` - Output: `1` **Constraints:** - 1 <= m, n <= 100 - The initial cell and the final cell are guaranteed to be free cells (i.e., they will never contain \'1\').","solution":"def unique_paths_with_obstacles(grid): if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a text file containing a long string of text. The text file is named \\"sample.txt\\" and includes various sentences. Your task is to read the file, count the frequency of each word (ignoring case and punctuation), and return the top 10 most frequent words along with their frequencies. Here is the erroneous code provided: ```python import string def read_file(filename): with open(filename, \'r\') as file: text = file.read() return text def clean_text(text): translator = str.maketrans(\'\', \'\', string.punctuation) return text.translate(translator) def count_word_frequencies(text): word_counts = {} words = text.lower().split() for word in words: if word not in word_counts: word_counts[word] = 1 else: word_counts[word] += 1 return word_counts def get_top_n_words(word_counts, n=10): sorted_word_counts = sorted(word_counts.items(), key=lambda item: item[1], reverse=True) return sorted_word_counts[:n] # Main function text = read_file(\'sample.txt\') cleaned_text = clean_text(text) word_counts = count_word_frequencies(cleaned_text) top_words = get_top_n_words(word_counts) print(\'Top 10 words:\', top_words) ``` Identify and correct the issues in the code. Ensure that the optimized code handles different text file structures and accurately counts the word frequencies. You should add appropriate error handling and optimizations to make the code more robust. Additionally, provide an analysis of the performance and accuracy of your optimized code, particularly in handling edge cases such as empty files, mixed punctuation, or varying capitalizations. Explain any improvements made and why they are necessary for enhancing the functionality and reliability of the word count process.","solution":"import string from collections import Counter import os def read_file(filename): if not os.path.exists(filename): raise FileNotFoundError(f\\"The file {filename} does not exist.\\") with open(filename, \'r\', encoding=\'utf-8\') as file: text = file.read() return text def clean_text(text): translator = str.maketrans(\'\', \'\', string.punctuation) return text.translate(translator) def count_word_frequencies(text): words = text.lower().split() return Counter(words) def get_top_n_words(word_counts, n=10): return word_counts.most_common(n) def main(filename=\'sample.txt\'): try: text = read_file(filename) except FileNotFoundError as e: print(e) return [] if not text.strip(): print(\\"The file is empty.\\") return [] cleaned_text = clean_text(text) word_counts = count_word_frequencies(cleaned_text) top_words = get_top_n_words(word_counts) return top_words # For demonstration purposes, we directly print the result here if __name__ == \\"__main__\\": result = main(\'sample.txt\') print(\'Top 10 words:\', result)"},{"question":"Develop a network management system that can dynamically monitor and adjust the configuration of a distributed computer network in real-time. The system should be capable of identifying different types of network traffic, such as HTTP, FTP, and streaming media, and applying suitable quality of service (QoS) policies to ensure optimal performance. The system should be able to detect network anomalies, such as packet loss, congestion, and latency issues, and automatically adapt the network configuration to mitigate these problems. Additionally, it should provide secure communication channels to prevent unauthorized access and data breaches. Enhance the complexity by integrating the following features: The system should support scalability to accommodate an increasing number of connected devices and provide load balancing to evenly distribute network traffic. It should also be capable of generating detailed network usage reports based on traffic analysis that include insights on peak usage times, source and destination IP addresses, and network paths used. Furthermore, the system should be able to provide real-time alerts for critical events, such as network attacks or hardware failures, and offer an interface for network administrators to manually override automatic adjustments when necessary. It should also include support for different network topologies, such as mesh, star, and ring, and seamlessly switch between them based on network conditions and requirements. Consider the following erroneous code snippet that attempts to monitor network traffic but fails to recognize different traffic types and does not apply any QoS policies: ```python def monitor_network_traffic(): while True: packet = capture_packet() process_packet(packet) def capture_packet(): # Simulated packet capturing logic return \\"some_network_packet\\" def process_packet(packet): print(f\\"Processing packet: {packet}\\") ``` This code does not distinguish between different types of network traffic and fails to apply QoS policies accordingly. It also lacks mechanisms for detecting network anomalies and automatic adaptation of network configuration. Your task is to address these issues and implement the additional features mentioned above.","solution":"# Import necessary libraries import time import random class NetworkPacket: def __init__(self, traffic_type, source_ip, dest_ip): self.traffic_type = traffic_type self.source_ip = source_ip self.dest_ip = dest_ip class NetworkManagementSystem: def __init__(self): self.network_statistics = {} self.qos_policies = { \\"HTTP\\": \\"High\\", \\"FTP\\": \\"Medium\\", \\"Streaming\\": \\"Low\\" } def capture_packet(self): # Simulated packet capturing logic traffic_types = [\\"HTTP\\", \\"FTP\\", \\"Streaming\\"] packet = NetworkPacket( traffic_type=random.choice(traffic_types), source_ip=f\\"192.168.0.{random.randint(1, 255)}\\", dest_ip=f\\"192.168.1.{random.randint(1, 255)}\\" ) return packet def process_packet(self, packet): traffic_type = packet.traffic_type source_ip = packet.source_ip dest_ip = packet.dest_ip # Log network traffic for analysis if traffic_type not in self.network_statistics: self.network_statistics[traffic_type] = 0 self.network_statistics[traffic_type] += 1 # Apply QoS policy qos = self.qos_policies.get(traffic_type, \\"Unknown\\") print(f\\"Processing packet: {traffic_type}, QoS: {qos}, Source: {source_ip}, Destination: {dest_ip}\\") def monitor_network_traffic(self): while True: packet = self.capture_packet() self.process_packet(packet) time.sleep(1) # Simulate time delay for capturing next packet # Start monitoring network traffic def main(): network_system = NetworkManagementSystem() network_system.monitor_network_traffic() if __name__ == \\"__main__\\": main()"},{"question":"Write a function to calculate the surface area of a cylinder using the formula `2 * pi * r * (r + h)`, where \'r\' is the radius of the base and \'h\' is the height of the cylinder.","solution":"import math def cylinder_surface_area(r, h): Returns the surface area of a cylinder with radius r and height h. return 2 * math.pi * r * (r + h)"},{"question":"Write a function in Python that takes an integer n (n ≥ 0) and returns the factorial of n. If n is 0, the function should return 1. Use an iterative approach to solve this problem.","solution":"def factorial(n): Returns the factorial of the given non-negative integer n. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function that takes a string consisting of words and returns a dictionary where each key is a word in the string, and the value is the count of occurrences of that word. Your function should ignore punctuation and be case-insensitive. For example, given the input \\"Hello, hello! How are you? You look just fine.\\", the function should return `{\\"hello\\": 2, \\"how\\": 1, \\"are\\": 1, \\"you\\": 2, \\"look\\": 1, \\"just\\": 1, \\"fine\\": 1}`.","solution":"import re from collections import Counter def word_count(s): Returns a dictionary where each key is a word in the string `s` and the value is the count of occurrences of that word. The function ignores punctuation and is case-insensitive. # Remove punctuation and convert to lower case s = re.sub(r\'[^ws]\', \'\', s).lower() # Split the string into words words = s.split() # Count the occurrences of each word return dict(Counter(words))"},{"question":"Write a function titled \\"Second Minimum Value\\" that accepts an array consisting of `n` integers where `n` is between 2 and 10^4, all elements are within the range from -10^4 to 10^4 and may include duplicates. Your task is to find the second minimum value in the array. If no such second minimum value exists, return -1. The second minimum value is defined as the smallest number greater than the minimum value in the array. For clarity: - The array will always have at least two elements. - The second minimum value is distinct and not equal to the minimum value. For example: Scenario 1: Input: [2, 2, 3, 4, 5] Output: 3 Scenario 2: Input: [1, 1, 1, 1] Output: -1 Scenario 3: Input: [1, 2, 2, 3] Output: 2 Note: Ensure to handle arrays with both positive and negative integers within the given range constraints.","solution":"def second_minimum_value(arr): Returns the second minimum value in the array. If no such value exists, returns -1. # Step 1: Remove duplicates by converting the array to a set unique_values = set(arr) # Step 2: If there are less than 2 unique values, return -1 if len(unique_values) < 2: return -1 # Step 3: Remove the minimum value and then find the next minimum unique_values.remove(min(unique_values)) return min(unique_values)"},{"question":"Your task is to write a function that takes a list of orders and a list of offers. Each order in the list is represented as a dictionary with keys \'order_id\', \'customer_id\', \'order_value\', and \'order_date\'. Each offer is represented as a dictionary with keys \'customer_id\', \'offer_discount\', and \'offer_validity_date\'. The function should filter the orders based on the offers, applying the discount to the order value if the offer is valid and the customer_id matches. The function should return a new list of orders with updated \'order_value\' after applying the discount, ensuring that the \'order_value\' never goes below zero. The function needs to handle the following scenarios: - If the \'order_value\' is a non-numeric string, it should ignore that order and continue processing the others. - If the \'order_date\' or \'offer_validity_date\' is not in a valid date format (YYYY-MM-DD), it should ignore that order/offer and continue processing others. - If multiple offers are available for the same customer, it should only apply the offer with the highest discount that is still valid on the \'order_date\'. Additionally, provide a flawed code snippet that attempts to solve the problem but fails due to a common mistake like improper date comparison or incorrect discount application logic. Analyze this code, identify the mistake, and explain how to correct it. The function should also be prepared to handle situations where the lists of orders or offers are empty, returning an appropriate message in such cases. Finally, write unit tests to validate the functionality of your code. The function should be designed to handle large datasets efficiently and should be optimized for time complexity. The function should also return an appropriate message if either the orders list or offers list is not provided.","solution":"from datetime import datetime def apply_discounts_to_orders(orders, offers): if orders is None or offers is None: return \\"Orders or offers list not provided\\" if not orders or not offers: return \\"No orders or offers available\\" def parse_date(date_str): try: return datetime.strptime(date_str, \'%Y-%m-%d\') except ValueError: return None valid_offers = {} for offer in offers: customer_id = offer.get(\'customer_id\') offer_discount = offer.get(\'offer_discount\') offer_validity_date = parse_date(offer.get(\'offer_validity_date\')) if not (customer_id and isinstance(offer_discount, (int, float)) and offer_validity_date): continue valid_offers[customer_id] = max( valid_offers.get(customer_id, (0, None)), (offer_discount, offer_validity_date), key=lambda x: x[0] ) filtered_orders = [] for order in orders: order_id = order.get(\'order_id\') customer_id = order.get(\'customer_id\') order_value = order.get(\'order_value\') order_date = parse_date(order.get(\'order_date\')) if not (order_id and customer_id and isinstance(order_value, (int, float)) and order_date): continue if customer_id in valid_offers: offer_discount, offer_validity_date = valid_offers[customer_id] if order_date <= offer_validity_date: order_value = max(order_value - offer_discount, 0) filtered_orders.append({ \'order_id\': order_id, \'customer_id\': customer_id, \'order_value\': order_value, \'order_date\': order.get(\'order_date\') }) return filtered_orders"},{"question":"Implement a simple chat application using WebSockets in Python. Your application should allow multiple clients to connect to the server and exchange messages in real-time. The server should broadcast each message it receives to all connected clients. Do not use any third-party libraries except for `websockets` and `asyncio`. Provide the code for both the server and the client. **Server Requirements:** 1. Accept multiple client connections. 2. On receiving a message from a client, broadcast it to all connected clients. 3. Handle the scenario when a client disconnects. 4. Run indefinitely. **Client Requirements:** 1. Connect to the server. 2. Send messages to the server. 3. Receive and display messages broadcasted by the server. 4. Handle user input in a non-blocking manner. **Example:** If Client A sends a message \\"Hello, World!\\", both Client A and other connected clients should see \\"Client A: Hello, World!\\". **Hints:** - Use `asyncio` for handling asynchronous operations. - Use the `websockets` library to manage WebSocket communication. - Consider using a dictionary to keep track of connected clients and their identifiers.","solution":"# Chat Server import asyncio import websockets connected_clients = {} async def broadcast(message): if connected_clients: await asyncio.wait([client.send(message) for client in connected_clients.values()]) async def handle_client(websocket, path): client_id = websocket.remote_address connected_clients[client_id] = websocket try: async for message in websocket: await broadcast(f\\"Client {client_id}: {message}\\") finally: del connected_clients[client_id] await broadcast(f\\"Client {client_id} has disconnected.\\") async def main(): async with websockets.serve(handle_client, \\"localhost\\", 6789): await asyncio.Future() if __name__ == \\"__main__\\": asyncio.run(main()) # Chat Client import asyncio import websockets async def send_message(websocket): while True: message = input(\\"You: \\") await websocket.send(message) async def receive_message(websocket): async for message in websocket: print(message) async def main(): async with websockets.connect(\\"ws://localhost:6789\\") as websocket: await asyncio.gather( send_message(websocket), receive_message(websocket), ) if __name__ == \\"__main__\\": asyncio.run(main())"},{"question":"Write a function in Python that, given a string `s`, returns the length of the longest substring that contains at most two distinct characters. The function should use an efficient algorithm to handle long strings. For example: - Given `s = \\"eceba\\"`, the function should return `3` because \\"ece\\" is the longest substring with at most two distinct characters. - Given `s = \\"ccaabbb\\"`, the function should return `5` because \\"aabbb\\" is the longest substring with at most two distinct characters. You may assume that `s` consists of only lowercase English letters.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. :param s: String :type s: str :return: Length of the longest substring with at most two distinct characters. :rtype: int if len(s) < 3: return len(s) left = 0 right = 0 max_len = 2 char_map = {} while right < len(s): if len(char_map) < 3: char_map[s[right]] = right right += 1 if len(char_map) == 3: del_idx = min(char_map.values()) del char_map[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len"},{"question":"Write a function to determine if a given string is a palindrome by ignoring non-alphanumeric characters and case sensitivity. \\"Race car!\\"","solution":"def is_palindrome(s): Check if the given string is a palindrome by ignoring non-alphanumeric characters and case sensitivity. # Filter the string to remove non-alphanumeric characters and convert to lowercase filtered_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Implement a function that takes a list of integers and returns a new list containing only the prime numbers from the original list, in the same order. Ensure your solution is efficient for large lists of integers. Make use of list comprehensions and a helper function to check primality. Avoid using built-in functions like `is_prime()` where possible.","solution":"def is_prime(n): Checks if a number is a prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Filters the prime numbers from a list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function that takes a string of comma-separated integers and returns the sum of the factorial of each integer. You can assume that the input string is always valid and contains at least one integer. def sum_of_factorials(numbers: str) -> int: Compute the sum of the factorials of each integer in the comma-separated input string. >>> sum_of_factorials(\'1,2,3\') 9 >>> sum_of_factorials(\'4,5\') 144 >>> sum_of_factorials(\'6\') 720","solution":"def factorial(n): Helper function to compute the factorial of a given number n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def sum_of_factorials(numbers: str) -> int: Compute the sum of the factorials of each integer in the comma-separated input string. nums = map(int, numbers.split(\',\')) return sum(factorial(num) for num in nums)"},{"question":"Create a Python application to automate the process of generating personalized exercise routines for users based on their fitness level and goals. The application should accept input from users regarding their age, gender, fitness level (beginner, intermediate, advanced), and specific fitness goals (e.g., weight loss, muscle gain, cardiovascular health). It should then generate a weekly workout plan including various exercises, sets, reps, and rest periods tailored to the user\'s input. In addition to the exercise routine, the application should employ a recommendation system that suggests dietary modifications to complement the workout plan. Provide a predefined set of diet plans categorized by common goals and integrate a module that selects and customizes the diet plan based on the user’s preferences and dietary restrictions (e.g., vegetarian, vegan, gluten-free). Implement functionality to track user progress over time by allowing users to log their workouts and dietary adherence daily. Use this data to refine the recommendations through a basic feedback loop. Present the plan in a user-friendly format and ensure that the application includes clear instructions and documentation for ease of use. Ensure the program follows best practices of clean, maintainable code and includes comments and documentation detailing the approach and any assumptions made.","solution":"from typing import List, Dict, Any def generate_exercise_plan(age: int, gender: str, fitness_level: str, fitness_goals: str) -> List[Dict[str, Any]]: Generates a personalized exercise routine based on user inputs. Parameters: age (int): User\'s age. gender (str): User\'s gender. fitness_level (str): User\'s fitness level (beginner, intermediate, advanced). fitness_goals (str): User\'s fitness goals (e.g., weight loss, muscle gain, cardiovascular health). Returns: List[Dict[str, Any]]: A weekly exercise plan. plan = [] exercises = { \'beginner\': [ {\'name\': \'Push-ups\', \'sets\': 3, \'reps\': 10, \'rest\': \'1 min\'}, {\'name\': \'Squats\', \'sets\': 3, \'reps\': 15, \'rest\': \'1 min\'}, {\'name\': \'Plank\', \'sets\': 3, \'reps\': \'30 sec\', \'rest\': \'1 min\'} ], \'intermediate\': [ {\'name\': \'Bench Press\', \'sets\': 4, \'reps\': 12, \'rest\': \'1 min\'}, {\'name\': \'Deadlifts\', \'sets\': 4, \'reps\': 10, \'rest\': \'1 min\'}, {\'name\': \'Pull-ups\', \'sets\': 3, \'reps\': 8, \'rest\': \'1 min\'} ], \'advanced\': [ {\'name\': \'Snatch\', \'sets\': 5, \'reps\': 6, \'rest\': \'2 min\'}, {\'name\': \'Clean and Jerk\', \'sets\': 5, \'reps\': 6, \'rest\': \'2 min\'}, {\'name\': \'Front Squat\', \'sets\': 5, \'reps\': 8, \'rest\': \'2 min\'} ] } goal_exercises = { \'weight loss\': [ {\'name\': \'Running\', \'sets\': 1, \'reps\': \'30 min\', \'rest\': \'none\'}, {\'name\': \'Cycling\', \'sets\': 1, \'reps\': \'45 min\', \'rest\': \'none\'} ], \'muscle gain\': [ {\'name\': \'Bicep Curls\', \'sets\': 4, \'reps\': 10, \'rest\': \'1 min\'}, {\'name\': \'Tricep Dips\', \'sets\': 4, \'reps\': 12, \'rest\': \'1 min\'} ], \'cardiovascular health\': [ {\'name\': \'Jump Rope\', \'sets\': 3, \'reps\': \'5 min\', \'rest\': \'2 min\'}, {\'name\': \'Swimming\', \'sets\': 1, \'reps\': \'30 min\', \'rest\': \'none\'} ] } plan.extend(exercises[fitness_level]) plan.extend(goal_exercises[fitness_goals]) return plan def generate_diet_plan(diet_type: str, fitness_goal: str) -> List[str]: Generates a personalized diet plan based on user inputs. Parameters: diet_type (str): User\'s dietary preference (vegetarian, vegan, gluten-free, none). fitness_goal (str): User\'s fitness goals (e.g., weight loss, muscle gain, cardiovascular health). Returns: List[str]: A list of dietary recommendations. diet_preferences = { \'vegetarian\': [\'Salad\', \'Vegetable Stir Fry\', \'Lentil Soup\'], \'vegan\': [\'Vegan Burger\', \'Quinoa Bowl\', \'Smoothie\'], \'gluten-free\': [\'Grilled Chicken\', \'Quinoa Salad\', \'Fruit Salad\'], \'none\': [\'Chicken Breast\', \'Mixed Vegetables\', \'Yogurt\'] } fitness_goal_diet = { \'weight loss\': [\'Low-carb vegetables\', \'Lean meats\', \'Intermittent fasting\'], \'muscle gain\': [\'High-protein meals\', \'Protein shakes\', \'Nuts and seeds\'], \'cardiovascular health\': [\'Whole grains\', \'Fruits\', \'Oats\'] } diet_plan = diet_preferences[diet_type] diet_plan.extend(fitness_goal_diet[fitness_goal]) return diet_plan def log_user_progress(user_id: int, workout_log: List[Dict[str, Any]], diet_log: List[str]) -> Dict[str, List[Any]]: Logs user\'s workout and dietary adherence daily. Parameters: user_id (int): User\'s unique identifier. workout_log (List[Dict[str, Any]]): List of workouts logged daily. diet_log (List[str]): List of dietary items logged daily. Returns: Dict[str, List[Any]]: A complete log of user\'s progress. progress_log = { \'user_id\': user_id, \'workout_log\': workout_log, \'diet_log\': diet_log } return progress_log def get_user_progress(user_id: int, progress_log: Dict[str, List[Any]]) -> Dict[str, List[Any]]: Retrieves user\'s progress based on user ID. Parameters: user_id (int): User\'s unique identifier. Returns: Dict[str, List[Any]]: A complete log of user\'s progress. if progress_log[\'user_id\'] == user_id: return progress_log else: raise ValueError(\\"User ID not found in progress log.\\")"},{"question":"Create a Python function that rotates a given 2D list (matrix) 90 degrees clockwise. For example, given the input matrix: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] The function should produce the output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Ensure your function handles both square and non-square matrices appropriately.","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a given 2D list (matrix) 90 degrees clockwise. Args: matrix (list of list of int): The input 2D list (matrix). Returns: list of list of int: The rotated matrix. if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) rotated_matrix = [[0] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): rotated_matrix[c][rows - 1 - r] = matrix[r][c] return rotated_matrix"},{"question":"Write a function in Python that takes a list of integers and two integers, `min_val` and `max_val`. The function should filter out all the integers in the list that are not within the range `min_val` to `max_val` (inclusive), and return the sorted list of the remaining integers. The function should work efficiently with large lists and handle edge cases, such as empty lists or when no integers fall within the given range.","solution":"def filter_and_sort(numbers, min_val, max_val): Filters out integers not within the range [min_val, max_val] from the list, and returns the sorted list of remaining integers. :param numbers: List of integers :param min_val: Minimum value of the range (inclusive) :param max_val: Maximum value of the range (inclusive) :return: Sorted list of integers within the range [min_val, max_val] # Filter the numbers within the range [min_val, max_val] filtered_numbers = [num for num in numbers if min_val <= num <= max_val] # Return the sorted filtered numbers return sorted(filtered_numbers)"},{"question":"Create a function `find_prime_factors` that takes an integer `n` and returns a list of its prime factors. The function should perform the following steps: 1. Initialize an empty list to store prime factors. 2. Starting with the smallest prime number, 2, divide `n` by the prime number as many times as possible, appending the prime to the list for each division. 3. Increment the divisor to the next integer and repeat step 2 until `n` becomes 1. 4. Ensure that the list of prime factors contains only prime numbers. Examples: ```python >>> find_prime_factors(28) [2, 2, 7] >>> find_prime_factors(45) [3, 3, 5] >>> find_prime_factors(101) [101] ```","solution":"def find_prime_factors(n): Returns a list of prime factors of the given integer n. prime_factors = [] divisor = 2 while n > 1: while n % divisor == 0: prime_factors.append(divisor) n //= divisor divisor += 1 return prime_factors"},{"question":"Given an array of integers, can you write a function that returns the number of pairs of integers in the array whose sum is divisible by a given number \'k\'? For example, if the input array is [1, 2, 3, 4, 5, 6] and k=3, the output should be the number of pairs such as (1, 2), (1, 5), (2, 4), (3, 6) etc.","solution":"def count_pairs_divisible_by_k(arr, k): Returns the number of pairs of integers in the array whose sum is divisible by k. Parameters: arr (list): List of integers. k (int): The divisor. Returns: int: Number of pairs whose sum is divisible by k. count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if (arr[i] + arr[j]) % k == 0: count += 1 return count"},{"question":"Create a function to find the longest palindrome in a given string. A palindrome is a word, phrase, or sequence of characters that reads the same backward as it does forward, ignoring spaces, punctuation, and capitalization. You may assume that the input string contains only lowercase alphabetic characters and spaces. ```python def longest_palindrome(s): # Your code here # Example usage print(longest_palindrome(\\"babad\\")) # Output: \\"bab\\" or \\"aba\\" print(longest_palindrome(\\"cbbd\\")) # Output: \\"bb\\" print(longest_palindrome(\\"a\\")) # Output: \\"a\\" print(longest_palindrome(\\"ac\\")) # Output: \\"a\\" or \\"c\\" ``` Provide a detailed explanation of the algorithm used to find the longest palindrome. Discuss its time complexity and any trade-offs involved. If any specific techniques or data structures were employed (e.g., dynamic programming, expanding around center), explain their roles and how they contribute to solving the problem efficiently.","solution":"def longest_palindrome(s): Finds the longest palindromic substring in the given string. if len(s) <= 1: return s start, end = 0, 0 def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(len(s)): l1, r1 = expand_around_center(s, i, i) # Odd length palindromes l2, r2 = expand_around_center(s, i, i + 1) # Even length palindromes if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start:end+1]"},{"question":"Devise an algorithm for the following problem: You are given a string S consisting of lowercase English letters, and an integer K. Your task is to determine the length of the longest substring of S that contains at most K distinct characters. Consider the case where the length of the string S can be up to 10^6 characters. Devise a highly efficient solution that handles this input size within reasonable time constraints.","solution":"def longest_substring_with_k_distinct_characters(s, k): Returns the length of the longest substring of s that contains at most k distinct characters. if k == 0 or not s: return 0 char_map = {} left = 0 max_len = 0 for right in range(len(s)): char = s[right] if char in char_map: char_map[char] += 1 else: char_map[char] = 1 while len(char_map) > k: left_char = s[left] char_map[left_char] -= 1 if char_map[left_char] == 0: del char_map[left_char] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Additionally, write a function that accepts a starting and ending integer, generates a list of all integers within that range, and uses your prime-filtering function to return only the primes from that range.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers from the provided list of integers. return [num for num in numbers if is_prime(num)] def range_primes(start, end): Returns a list of prime numbers within the specified range [start, end]. return filter_primes(range(start, end + 1))"},{"question":"Create a function that returns the longest palindromic substring within a given string. The function should be efficient, ideally running in O(n^2) time complexity or better. Additionally, the function should consider all possible edge cases such as the string being empty, of length one, or having multiple palindromic substrings of the same maximum length. The longest palindromic substring should be returned as a string.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if not s: return \\"\\" n = len(s) start = 0 max_length = 1 def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return s[start:start + max_length]"},{"question":"Write a function that takes a list of strings and returns a list of the lengths of those strings. For example, given the input `[\\"apple\\", \\"banana\\", \\"cherry\\"]`, the function should return `[5, 6, 6]`. Ensure the function handles an empty list by returning an empty list.","solution":"def string_lengths(strings): Returns a list of the lengths of the given strings. Parameters: strings (list of str): A list of strings. Returns: list of int: A list of lengths of the given strings. return [len(s) for s in strings]"},{"question":"Write a Python function that takes a string as input and checks if the string is a valid palindrome. The function should ignore case and non-alphanumeric characters. ```python def is_palindrome(s: str) -> bool: # Implementation here pass ```","solution":"def is_palindrome(s: str) -> bool: Checks if the input string is a valid palindrome, ignoring case and non-alphanumeric characters. Args: s (str): The input string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function that takes a list of integers and determines if there is a subarray (contiguous elements) that sums up to zero. If such a subarray exists, return the start and end indices of one such subarray. If no such subarray exists, return `None`. Example: ```python def subarray_with_zero_sum(arr): # Your code here # Example usage: print(subarray_with_zero_sum([4, 2, -3, 1, 6])) # Output: (1, 3) since 2 + (-3) + 1 = 0 print(subarray_with_zero_sum([4, 2, 0, 1, 6])) # Output: (2, 2) since 0 = 0 print(subarray_with_zero_sum([-3, 2, 3, 1, 6])) # Output: None since no subarray sums to zero ```","solution":"def subarray_with_zero_sum(arr): Determines if there is a subarray that sums up to zero and returns the start and end indices of one such subarray. If no such subarray exists, returns None. sum_indices_map = {} current_sum = 0 for i, num in enumerate(arr): current_sum += num if current_sum == 0: return (0, i) if current_sum in sum_indices_map: return (sum_indices_map[current_sum] + 1, i) sum_indices_map[current_sum] = i return None"},{"question":"Write a function called `unique_combinations` that takes a list of integers and a target sum as input. The function should return all unique combinations of elements from the list that add up to the target sum. The same number may be chosen from the list multiple times to form a combination, but the combination itself should be unique. # Input: - A list of integers `nums` (e.g., `[2, 3, 6, 7]`) - An integer `target` representing the target sum (e.g., `7`) # Output: - A list of lists, where each inner list is a combination of numbers from `nums` that add up to the `target` sum. Each combination should be unique. # Constraints: - All input integers are positive. - The solution set must not contain duplicate combinations. - Numbers in each combination should be in non-descending order. # Example: ```python def unique_combinations(nums, target): # Your code here # Example 1 print(unique_combinations([2, 3, 6, 7], 7)) # Output: [[2, 2, 3], [7]] # Example 2 print(unique_combinations([2, 3, 5], 8)) # Output: [[2, 2, 2, 2], [2, 3, 3], [3, 5]] ``` Write the function `unique_combinations` to help generate all such combinations.","solution":"def unique_combinations(nums, target): Returns all unique combinations of elements from nums that add up to the target sum. result = [] nums.sort() def backtrack(remaining, start, path): if remaining == 0: result.append(list(path)) return if remaining < 0: return for i in range(start, len(nums)): path.append(nums[i]) backtrack(remaining - nums[i], i, path) path.pop() backtrack(target, 0, []) return result"},{"question":"Write a function that takes a list of integers and returns the product of all elements except the one at the first position. Array: [3, 2, 5, 6]","solution":"def product_except_first(arr): Returns the product of all elements in the list except the one at the first position. if len(arr) <= 1: return 0 # Return 0 if there\'s no element to multiply product = 1 for num in arr[1:]: product *= num return product"},{"question":"Create a function that takes a string of parentheses and determines if the order of the parentheses is valid. The function should return true if the string is valid, and false if it\'s not. A string is considered valid if: - Open brackets (\\"(\\") must be closed by the same type of brackets (\\")\\"). - Open brackets must be closed in the correct order. Example Inputs/Outputs: 1. `checkParentheses(\\"()\\")` should return `true`. 2. `checkParentheses(\\"(()\\")` should return `false`. 3. `checkParentheses(\\"()()\\")` should return `true`. 4. `checkParentheses(\\"(())\\")` should return `true`. 5. `checkParentheses(\\"(()))\\")` should return `false`.","solution":"def checkParentheses(s): Checks if the parentheses in the given string are valid. Args: s (str): A string consisting of \'(\' and \')\'. Returns: bool: True if the string is valid, otherwise False. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack or stack.pop() != \'(\': return False return not stack"},{"question":"Design a function that takes a matrix of integers and returns the transpose of the matrix. The transpose of a matrix is a new matrix whose rows are the columns of the original. Additionally, write a function to calculate the determinant of the transposed matrix if it is a square matrix. Ensure your solution handles non-square matrices appropriately by providing an informative message.","solution":"def transpose(matrix): Returns the transpose of a given matrix. return [list(row) for row in zip(*matrix)] def determinant(matrix): Returns the determinant of the given square matrix. n = len(matrix) if n == 1: return matrix[0][0] if n == 2: return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0] det = 0 for c in range(n): submatrix = [row[:c] + row[c+1:] for row in matrix[1:]] det += ((-1)**c) * matrix[0][c] * determinant(submatrix) return det def transpose_and_determinant(matrix): Returns the transpose of the matrix and the determinant if it\'s square, otherwise, an informative message. transposed = transpose(matrix) if len(transposed) == len(transposed[0]): det = determinant(transposed) return transposed, det else: return transposed, \\"The transposed matrix is not square, so the determinant is not defined.\\""},{"question":"編寫一個函數，該函數接收一個僅包含正整數的數組，並返回一個新數組，其中的每個元素都是原數組中所有其他元素的乘積。請不要使用除法操作。 ```python def product_except_self(nums): # 實現函數內容 pass # 測試示例 array = [1, 2, 3, 4] print(product_except_self(array)) # 輸出應該是 [24, 12, 8, 6] ```","solution":"def product_except_self(nums): Returns an array where each element is the product of all other elements in the input array. No division operation is used. length = len(nums) result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Create a function in Python that reads a text file and counts the occurrences of each word in the file. The function should ignore case, punctuation, and any whitespace. Your solution should include a step-by-step explanation of the process, as well as sample data and expected output.","solution":"import re from collections import Counter def count_word_occurrences(file_path): Reads the contents of a text file and counts the occurrence of each word, ignoring case, punctuation, and white space. :param file_path: Path to the text file :return: A dictionary with words as keys and their occurrence counts as values with open(file_path, \'r\') as file: text = file.read() # Normalize case, remove punctuation and extra whitespace text = text.lower() # Convert to lowercase text = re.sub(r\'[^ws]\', \'\', text) # Remove punctuation words = text.split() # Split on whitespace # Count word occurrences word_counts = Counter(words) return dict(word_counts)"},{"question":"Write a Python function to merge two sorted lists of integers into a single sorted list. You are not allowed to use the `sort()` method or any other built-in sorting functions. The function should return the new sorted list. Additionally, provide a few test cases to demonstrate the function\'s behavior. ```python def merge_sorted_lists(list1, list2): pass # Test cases list1_1 = [1, 3, 5, 7] list1_2 = [2, 4, 6, 8] # Expected output: [1, 2, 3, 4, 5, 6, 7, 8] list2_1 = [-1, 5, 10] list2_2 = [2, 7, 15] # Expected output: [-1, 2, 5, 7, 10, 15] list3_1 = [1, 2, 3] list3_2 = [] # Expected output: [1, 2, 3] list4_1 = [] list4_2 = [4, 5, 6] # Expected output: [4, 5, 6] ``` Write the function that merges two sorted lists as per the requirements, and verify its correctness with the given test cases.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list without using sort(). Parameters: list1 (list): First sorted list of integers. list2 (list): Second sorted list of integers. Returns: list: A new sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function that takes a list of strings, where each string represents a mathematical expression involving addition (+), subtraction (-), multiplication (*), or division (/). Your function should evaluate each expression and return a list containing the results of these evaluations. Additionally, if any expression results in a division by zero, it should return `None` for that particular expression. Ensure your function can handle incorrect expressions gracefully by also returning `None` for such cases. expressions = [\\"3 + 5\\", \\"10 * 2\\", \\"6 / 3\\", \\"8 - 4\\", \\"5 / 0\\", \\"7 +\\", \\"12 / 4\\"]","solution":"def evaluate_expressions(expressions): Evaluates a list of mathematical expressions. Args: expressions (list): A list of strings, where each string is a mathematical expression. Returns: list: A list of results for each evaluated expression. If any expression results in an error (e.g., division by zero, incorrect expression), it will return None for that particular expression. results = [] for expr in expressions: try: # Evaluate the expression safely result = eval(expr) results.append(result) except ZeroDivisionError: # Division by zero results.append(None) except Exception: # Any other exception, like syntax errors results.append(None) return results"},{"question":"Write a function that converts an infix expression to its equivalent postfix expression using the Shunting Yard algorithm. The function should take a string representing the infix expression as input and return a string representing the postfix expression. Ensure that the function accounts for different operator precedences and respects parentheses. def infix_to_postfix(expression): \'\'\' Converts an infix arithmetic expression to its corresponding postfix expression using the Shunting Yard algorithm. The infix expression may contain the operators +, -, *, /, and parentheses. Parameters: expression (str): A string representing the infix expression. Returns: str: A string representing the postfix expression. Example: infix_to_postfix(\\"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\\") = \\"3 4 2 * 1 5 - 2 3 ^ ^ / +\\" infix_to_postfix(\\"10 + 2 * 6\\") = \\"10 2 6 * +\\" infix_to_postfix(\\"100 * ( 2 + 12 ) / 14\\") = \\"100 2 12 + * 14 /\\" \'\'\'","solution":"def infix_to_postfix(expression): Converts an infix arithmetic expression to its corresponding postfix expression using the Shunting Yard algorithm. Parameters: expression (str): A string representing the infix expression. Returns: str: A string representing the postfix expression. Example: infix_to_postfix(\\"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\\") = \\"3 4 2 * 1 5 - 2 3 ^ ^ / +\\" infix_to_postfix(\\"10 + 2 * 6\\") = \\"10 2 6 * +\\" infix_to_postfix(\\"100 * ( 2 + 12 ) / 14\\") = \\"100 2 12 + * 14 /\\" def get_precedence(op): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2, \'^\': 3} return precedence.get(op, 0) def is_left_associative(op): return op in (\'+\', \'-\', \'*\', \'/\') output = [] operators = [] tokens = expression.split() for token in tokens: if token.isnumeric(): # If the token is an operand output.append(token) elif token == \'(\': # If the token is a left parenthesis operators.append(token) elif token == \')\': # If the token is a right parenthesis while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # Pop the left parenthesis else: # The token is an operator while (operators and operators[-1] != \'(\' and (get_precedence(operators[-1]) > get_precedence(token) or (get_precedence(operators[-1]) == get_precedence(token) and is_left_associative(token)))): output.append(operators.pop()) operators.append(token) # Pop any remaining operators in the stack while operators: output.append(operators.pop()) return \' \'.join(output)"},{"question":"Create a function that, given a list of integers, returns the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is less than or equal to a given limit. The function should handle an empty list as a special case, returning 0. Complete the final function signature: ```python from typing import List def longest_contiguous_subsequence(arr: List[int], limit: int) -> int: # Implement your solution here ```","solution":"from typing import List def longest_contiguous_subsequence(arr: List[int], limit: int) -> int: if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) <= limit: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a function that takes a list of integers and returns a list of integers where every element is doubled such that the original element and its doubled value alternate. If the input list is empty, the function should return an empty list. def double_values_alternating(lst: List[int]) -> List[int]: Return a list where every element in the input list is followed by its double >>> double_values_alternating([]) [] >>> double_values_alternating([1, 2, 3]) [1, 2, 2, 4, 3, 6]","solution":"def double_values_alternating(lst): Returns a list where every element in the input list is followed by its double. :param lst: List of integers :return: List of integers where every element is followed by its double result = [] for number in lst: result.append(number) result.append(number * 2) return result"},{"question":"You are given a list of strings, each representing a potentially valid IPv4 address. Write a Python function that filters out and returns only the valid IPv4 addresses from the list. Each string in the list should be checked to see if it follows the IPv4 format, which is four decimal numbers separated by dots (e.g., \\"192.168.0.1\\"). Each decimal number should be between 0 and 255, inclusive. Your function should return a list of valid IPv4 addresses. Example input: ip_addresses = [\\"192.168.0.1\\", \\"256.256.256.256\\", \\"10.0.0.123\\", \\"192.168.1\\", \\"172.16.254.0\\", \\"172.316.254.0\\"] Expected output: [\\"192.168.0.1\\", \\"10.0.0.123\\", \\"172.16.254.0\\"]","solution":"import re def is_valid_ipv4(ip): Check if the given IP address is a valid IPv4 address. pattern = r\'^(d{1,3}.){3}d{1,3}\' if re.match(pattern, ip): parts = ip.split(\'.\') for part in parts: if int(part) < 0 or int(part) > 255: return False return True return False def filter_valid_ipv4_addresses(ip_addresses): Filters out the valid IPv4 addresses from the given list of IP addresses. Parameters: ip_addresses (list): A list of strings representing IP addresses. Returns: list: A list of valid IPv4 addresses. return [ip for ip in ip_addresses if is_valid_ipv4(ip)]"},{"question":"You are given the following list of movie titles, where each movie title is a string: ```python movies = [ \\"The Matrix\\", \\"Inception\\", \\"Interstellar\\", \\"The Prestige\\", \\"The Dark Knight\\", \\"Memento\\", \\"Insomnia\\", \\"Dunkirk\\", \\"Tenet\\", \\"Following\\" ] ``` Write a Python function `sort_movies_by_word_count` that sorts these movie titles first by the number of words in the title, and then alphabetically among titles with the same word count. The function should return the sorted list of movie titles. # Example ```python movies = [ \\"The Matrix\\", \\"Inception\\", \\"Interstellar\\", \\"The Prestige\\", \\"The Dark Knight\\", \\"Memento\\", \\"Insomnia\\", \\"Dunkirk\\", \\"Tenet\\", \\"Following\\" ] sorted_movies = sort_movies_by_word_count(movies) print(sorted_movies) ``` Output: ```python [\'Dunkirk\', \'Following\', \'Inception\', \'Insomnia\', \'Interstellar\', \'Memento\', \'Tenet\', \'The Matrix\', \'The Prestige\', \'The Dark Knight\'] ``` **Function Signature:** ```python def sort_movies_by_word_count(movies: List[str]) -> List[str]: pass ``` Implement the `sort_movies_by_word_count` function to achieve the desired sorting.","solution":"def sort_movies_by_word_count(movies): Sorts movie titles first by the number of words in the title, and then alphabetically among titles with the same word count. :param movies: List[str] - A list of movie titles. :return: List[str] - Sorted list of movie titles. return sorted(movies, key=lambda title: (len(title.split()), title))"},{"question":"Given a string containing alphabets and digits, write a function that separates the alphabets from the digits and returns a tuple with two elements. The first element should be a string of all the alphabets in the order they appear in the input, and the second element should be a string of all the digits in the order they appear in the input. For example, given the input \\"a1b2c3d4\\", the output should be (\\"abcd\\", \\"1234\\"). Signature def separate_alphabets_and_digits(s: str) -> Tuple[str, str]:","solution":"from typing import Tuple def separate_alphabets_and_digits(s: str) -> Tuple[str, str]: Separates the alphabets from the digits in the input string. Parameters: s (str): the input string containing alphabets and digits. Returns: Tuple[str, str]: a tuple where the first element is a string of all the alphabets in the order they appear in the input, and the second element is a string of all the digits in the order they appear in the input. alphabets = \'\'.join([char for char in s if char.isalpha()]) digits = \'\'.join([char for char in s if char.isdigit()]) return (alphabets, digits)"},{"question":"Create a function that takes a list of strings and returns a dictionary with each unique string from the list as the key and the value being the number of times it appears in the list. If the input list is empty, return an empty dictionary. Example input/output: ``` input_list = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] Output: { \\"apple\\": 3, \\"banana\\": 2, \\"orange\\": 1 } ```","solution":"def count_strings(input_list): Returns a dictionary with each unique string from the input list as the key and the value being the number of times it appears in the list. count_dict = {} for string in input_list: if string in count_dict: count_dict[string] += 1 else: count_dict[string] = 1 return count_dict"},{"question":"You are given an array of integers representing the heights of students in a class, in centimeters. Your task is to identify the height at which the maximum number of students are present (mode height). If there are multiple heights with the same frequency, return the smallest height. For example, you are given the list: heights = [160, 170, 160, 165, 180, 165, 160] The most frequently occurring height is 160, which appears 3 times. Implement a function `find_mode_height(heights)` that takes a list of integers as input and returns the mode height. ```python def find_mode_height(heights): # Your code here # Example usage: heights = [160, 170, 160, 165, 180, 165, 160] print(find_mode_height(heights)) # Output should be 160 ```","solution":"def find_mode_height(heights): Returns the mode height from a list of heights. If there are multiple heights with the same maximum frequency, returns the smallest height. from collections import Counter if not heights: raise ValueError(\\"The list of heights cannot be empty\\") height_counter = Counter(heights) max_frequency = max(height_counter.values()) mode_heights = [height for height, frequency in height_counter.items() if frequency == max_frequency] return min(mode_heights)"},{"question":"Write a Python function named `is_prime` that takes a single integer argument `n` and returns `True` if `n` is a prime number, and `False` otherwise. Additionally, write a second function `prime_factors` that uses `is_prime` to return a list of all prime factors of a given integer `n` in ascending order. For the purpose of this question, consider numbers greater than 1, and if `n` is less than or equal to 1, return an empty list. For example: ```python is_prime(2) # should return True is_prime(4) # should return False prime_factors(28) # should return [2, 7] prime_factors(30) # should return [2, 3, 5] ```","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def prime_factors(n): Returns a list of all prime factors of n in ascending order. if n <= 1: return [] factors = [] for i in range(2, int(n**0.5) + 1): while is_prime(i) and n % i == 0: factors.append(i) n //= i if n > 1: factors.append(n) return factors"},{"question":"Using the pandas library, write a Python program to read a CSV file that contains columns \'Name\', \'Age\', and \'Score\'. Calculate the average score of individuals who are above 20 years old and display the result.","solution":"import pandas as pd def average_score_above_20(file_path): Reads a CSV file and calculates the average score of individuals who are above 20 years old. Parameters: file_path (str): The file path to the CSV file. Returns: float: The average score of individuals above 20 years old. # Read the CSV file df = pd.read_csv(file_path) # Filter individuals who are above 20 years old df_filtered = df[df[\'Age\'] > 20] # Calculate the average score average_score = df_filtered[\'Score\'].mean() return average_score"},{"question":"Create a function that takes an array of integers as input and returns an array of integers that are in the same order but without any duplicates. Example input: [1, 2, 2, 3, 4, 4, 5] Example output: [1, 2, 3, 4, 5]","solution":"def remove_duplicates(arr): Returns a list of integers in the same order as input but without any duplicates. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Implement a Python function that takes a list of integers and returns a list of tuples. Each tuple should contain a pair of integers from the input list that sum up to a given target value. The output list of tuples should not contain duplicate pairs and each pair (a, b) should appear only once in ascending order (i.e., always (min(a,b), max(a,b))). # Example ```python input_list = [1, 2, 3, 4, 5, 6] target = 7 ``` # Output ```python [(1, 6), (2, 5), (3, 4)] ``` # Function Signature ```python def find_pairs(input_list, target): pass # Example usage: input_list = [1, 2, 3, 4, 5, 6] target = 7 print(find_pairs(input_list, target)) ```","solution":"def find_pairs(input_list, target): Returns a list of tuples, each containing two numbers from input_list that sum to the target value. Each tuple is in the form (min(a,b), max(a,b)) and no duplicate pairs are included. seen = set() pairs = set() for number in input_list: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return sorted(pairs)"},{"question":"Write a function in Python that accepts a list of integers and returns the list with all its elements removed except for the prime numbers, but with the primes sorted in descending order. Additionally, the function should return the sum of these prime numbers. Example input: [12, 3, 17, 4, 2, 8, 5, 11] Expected output: ([17, 11, 5, 3, 2], 38)","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_and_sort_primes(lst): primes = [x for x in lst if is_prime(x)] primes.sort(reverse=True) prime_sum = sum(primes) return primes, prime_sum"},{"question":"Write a function that takes a string containing an arithmetic expression of positive integers and the operators \'+\', \'-\', \'*\', and \'/\'. The function should evaluate the arithmetic expression based on the standard order of operations (parentheses are not included). Handle cases where the input string is empty or contains invalid characters by returning an appropriate error message. The solution should be efficient enough to handle an expression length of up to 10^4 characters.","solution":"import re def evaluate_expression(expression): Evaluates an arithmetic expression containing positive integers and the operators \'+\', \'-\', \'*\', and \'/\'. Handles an empty string by returning a message. Parameters: expression (str): The arithmetic expression to evaluate. Returns: float: The result of the expression. str: An error message if the input is invalid. if not expression: return \\"Error: Empty expression\\" # Check for invalid characters if not re.match(r\'^[d+-*/s]+\', expression): return \\"Error: Invalid characters in expression\\" try: # Tokenize the expression tokens = re.findall(r\'d+|[+-*/]\', expression) # Convert numbers to integers for i in range(len(tokens)): if tokens[i].isdigit(): tokens[i] = int(tokens[i]) def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) # Operator precedence precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} operators = [] values = [] i = 0 while i < len(tokens): if isinstance(tokens[i], int): values.append(tokens[i]) i += 1 else: while (operators and precedence[operators[-1]] >= precedence[tokens[i]]): apply_operator(operators, values) operators.append(tokens[i]) i += 1 while operators: apply_operator(operators, values) return values[0] except Exception as e: return \\"Error: Invalid expression\\""},{"question":"Write a function called `minimum_window_substring` that takes two strings, `s` and `t`, and returns the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such window, the function should return an empty string. Illustrative examples: - minimum_window_substring(\\"ADOBECODEBANC\\", \\"ABC\\") outputs \\"BANC\\" - minimum_window_substring(\\"a\\", \\"a\\") outputs \\"a\\" - minimum_window_substring(\\"a\\", \\"aa\\") outputs \\"\\" To address the challenge, consider using the sliding window technique to optimize the solution\'s efficiency. Unfinished code you need to complete: from collections import Counter from typing import Tuple def minimum_window_substring(s: str, t: str) -> str: Find the minimum window substring of `s` containing all characters of `t`. :param s: The string to search within. :param t: The string containing characters to be found in `s`. :return: The minimum window substring or an empty string if no such window exists. Examples: >>> minimum_window_substring(\\"ADOBECODEBANC\\", \\"ABC\\") \'BANC\' >>> minimum_window_substring(\\"a\\", \\"a\\") \'a\' >>> minimum_window_substring(\\"a\\", \\"aa\\") \'\'","solution":"from collections import Counter def minimum_window_substring(s: str, t: str) -> str: Find the minimum window substring of `s` containing all characters of `t`. :param s: The string to search within. :param t: The string containing characters to be found in `s`. :return: The minimum window substring or an empty string if no such window exists. Examples: >>> minimum_window_substring(\\"ADOBECODEBANC\\", \\"ABC\\") \'BANC\' >>> minimum_window_substring(\\"a\\", \\"a\\") \'a\' >>> minimum_window_substring(\\"a\\", \\"aa\\") \'\' if not s or not t: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = {} ans = float(\\"inf\\"), None, None # window length, left, right while r < len(s): character = s[r] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]:ans[2] + 1]"},{"question":"Generate the list of prime numbers that fall between the two provided integers, inclusive. Example: Given integers `10` and `30`, the output should be `[11, 13, 17, 19, 23, 29]`. Write a function `find_primes(start, end)` which takes two integer inputs `start` and `end` and returns a list of prime numbers in that range.","solution":"def find_primes(start, end): Returns a list of prime numbers between the given start and end (inclusive). def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True primes = [n for n in range(start, end + 1) if is_prime(n)] return primes"},{"question":"Create a function that accepts a string containing a mathematical expression with integers and the operators + and -, and evaluates this expression. The function should be able to handle whitespace within the string and return the final result as an integer. The input string is guaranteed to be a valid expression. Examples: - Input: \\"3 + 4 - 2\\" Output: 5 - Input: \\"10 + 2 - 6\\" Output: 6 - Input: \\"100 - 50 + 25\\" Output: 75","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers and the operators + and -, handling whitespace within the string, and returns the final result as an integer. total = 0 current_number = 0 operator = \'+\' for char in expression + \' \': if char.isdigit(): current_number = current_number * 10 + int(char) elif char in \'+-\': if operator == \'+\': total += current_number elif operator == \'-\': total -= current_number current_number = 0 operator = char if operator == \'+\': total += current_number elif operator == \'-\': total -= current_number return total"},{"question":"Define a function that takes a list of integers and returns a new list containing the squares of all positive even numbers from the original list. If there are no positive even numbers, the function should return an empty list. Write the function and include a few test cases to validate your implementation.","solution":"def square_positive_evens(numbers): Given a list of integers, returns a new list containing the squares of all positive even numbers from the original list. return [x**2 for x in numbers if x > 0 and x % 2 == 0]"},{"question":"Write a Python function that reads a sentence from the input and counts the frequency of each word, ignoring any punctuation and case differences. The function should then print the words and their corresponding counts in alphabetical order. Here\'s a sample template for the program: ```python import string def word_count(sentence): # Convert the sentence to lowercase and remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) sentence = sentence.translate(translator).lower() # Split the sentence into words words = sentence.split() # Count the frequency of each word word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 # Sort the words alphabetically sorted_words = sorted(word_freq.items()) # Print the words and their counts for word, count in sorted_words: print(f\\"{word}: {count}\\") if __name__ == \\"__main__\\": # Read the sentence from the input input_sentence = input(\\"Enter a sentence: \\") # Count the words frequency and print the result word_count(input_sentence) ``` In this task, you are required to ensure the function handles case insensitivity, removes punctuation, counts word frequencies accurately, and outputs the results in alphabetical order.","solution":"import string def word_count(sentence): Takes a sentence as input and prints the frequency of each word, ignoring punctuation and case differences, in alphabetical order. # Convert the sentence to lowercase and remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) sentence = sentence.translate(translator).lower() # Split the sentence into words words = sentence.split() # Count the frequency of each word word_freq = {} for word in words: word_freq[word] = word_freq.get(word, 0) + 1 # Sort the words alphabetically sorted_words = sorted(word_freq.items()) # Print the words and their counts for word, count in sorted_words: print(f\\"{word}: {count}\\")"},{"question":"Implement a navigation system for a delivery robot. The delivery robot works as follows: 1. The robot is placed on a grid of variable size, defined by the user, with its starting position at the origin (0,0). 2. The robot can move North, South, East, or West. Each move advances the robot by one unit in the corresponding direction. 3. The robot can be given a series of instructions to navigate to a target position on the grid. 4. If the robot encounters an obstacle, it should stop immediately and report its current position. 5. The robot should be capable of storing and retrieving its position history, allowing it to undo its last move and revert to the previous position. 6. The robot returns a status message after each instruction to indicate whether it successfully moved, hit an obstacle, or reached the target position. In addition to the base functionality, maintenance mode for the robot offers the following features: 1. Ability to add or remove obstacles on the grid. 2. Ability to reset the robot to its initial position or to a user-defined position on the grid. 3. Access to detailed movement logs, including all instructions received and positions visited. Your task is to implement this navigation system using OOP concepts in the programming language of your choice. The implementation should be efficient, maintainable, and easy to understand. The system should be designed to handle scalability, assuming the grid size and number of movements can significantly increase.","solution":"class DeliveryRobot: def __init__(self, grid_size): self.grid_size = grid_size self.position = (0, 0) self.initial_position = (0, 0) self.position_history = [self.position] self.obstacles = set() self.instructions_log = [] def move(self, direction): x, y = self.position new_position = { \\"N\\": (x, y + 1), \\"S\\": (x, y - 1), \\"E\\": (x + 1, y), \\"W\\": (x - 1, y) }.get(direction, self.position) self.instructions_log.append(direction) if new_position in self.obstacles: return \\"Hit obstacle\\" elif self.is_valid_position(new_position): self.position = new_position self.position_history.append(self.position) return \\"Moved successfully\\" else: return \\"Invalid move\\" def is_valid_position(self, position): x, y = position return 0 <= x < self.grid_size[0] and 0 <= y < self.grid_size[1] def undo_last_move(self): if len(self.position_history) > 1: self.position_history.pop() self.position = self.position_history[-1] def reset_position(self, position=None): if position: self.position = position else: self.position = self.initial_position self.position_history = [self.position] def add_obstacle(self, position): if self.is_valid_position(position): self.obstacles.add(position) def remove_obstacle(self, position): if position in self.obstacles: self.obstacles.remove(position) def get_position(self): return self.position def get_position_history(self): return self.position_history def get_instructions_log(self): return self.instructions_log"},{"question":"Write a function called `filter_students_by_grade` which takes a list of student records in JSON format and a grade as input. Each student record contains \'name\', \'grade\', and \'averageScore\'. The function should return a list of student names who have the specified grade, sorted in descending order by their \'averageScore\'. If there are students with the same \'averageScore\', sort them alphabetically by \'name\'. If the specified grade does not exist in the student records, the function should return an appropriate error message. The students JSON should look like this: students = [ { \\"name\\": \\"Alice\\", \\"grade\\": \\"A\\", \\"averageScore\\": 92 }, { \\"name\\": \\"Bob\\", \\"grade\\": \\"B\\", \\"averageScore\\": 85 }, { \\"name\\": \\"Charlie\\", \\"grade\\": \\"A\\", \\"averageScore\\": 88 }, { \\"name\\": \\"David\\", \\"grade\\": \\"B\\", \\"averageScore\\": 91 }, { \\"name\\": \\"Eve\\", \\"grade\\": \\"A\\", \\"averageScore\\": 92 } ] For example, for the grade \'A\', the output should be: [ { \\"name\\": \\"Alice\\", \\"grade\\": \\"A\\", \\"averageScore\\": 92 }, { \\"name\\": \\"Eve\\", \\"grade\\": \\"A\\", \\"averageScore\\": 92 }, { \\"name\\": \\"Charlie\\", \\"grade\\": \\"A\\", \\"averageScore\\": 88 } ]","solution":"def filter_students_by_grade(students, grade): Filters students by grade and sorts them by averageScore in descending order. If students have the same averageScore, sorts them alphabetically by name. Parameters: students (list of dict): List of student records. grade (str): The grade to filter by. Returns: list: Sorted list of student names who have the specified grade. str: Error message if no students have the specified grade. filtered_students = [student for student in students if student[\'grade\'] == grade] if not filtered_students: return \\"No students found with the specified grade.\\" sorted_students = sorted(filtered_students, key=lambda x: (-x[\'averageScore\'], x[\'name\'])) return sorted_students"},{"question":"Develop a command-line utility that analyzes the frequency of words in a given text file. The utility should read from the provided file, count the occurrences of each word (case-insensitive), and then display the top N most frequent words along with their frequencies. Ensure the program handles punctuation and special characters effectively, and include an option to ignore common stop words like \'the\', \'is\', \'in\', etc. Example: ``` python word_frequency.py file.txt 5 1. the - 45 2. in - 38 3. is - 25 4. python - 20 5. programming - 15 ``` In the above example: - `file.txt` is the input file. - `5` is the number of top frequent words to display. Additionally, implement error handling for scenarios such as missing file, incorrect file format, and invalid number of words to display.","solution":"import sys import collections import string def read_file(file_path): try: with open(file_path, \'r\', encoding=\'utf-8\') as file: return file.read() except FileNotFoundError: print(f\\"Error: The file {file_path} was not found.\\") sys.exit(1) def clean_text(text): text = text.lower() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) return text def remove_stop_words(words, stop_words): return [word for word in words if word not in stop_words] def count_words(text): words = text.split() word_count = collections.Counter(words) return word_count def display_top_words(word_count, top_n): top_words = word_count.most_common(top_n) for index, (word, count) in enumerate(top_words): print(f\\"{index + 1}. {word} - {count}\\") def main(file_path, top_n, ignore_stop_words=False): stop_words = set([\'the\', \'is\', \'in\', \'and\', \'of\', \'to\', \'a\', \'with\']) text = read_file(file_path) cleaned_text = clean_text(text) words = cleaned_text.split() if ignore_stop_words: words = remove_stop_words(words, stop_words) word_count = count_words(\' \'.join(words)) display_top_words(word_count, top_n) if __name__ == \\"__main__\\": if len(sys.argv) < 3: print(\\"Usage: python word_frequency.py <file_path> <top_n> [--ignore-stop-words]\\") sys.exit(1) file_path = sys.argv[1] try: top_n = int(sys.argv[2]) except ValueError: print(\\"Error: The number of top words to display must be an integer.\\") sys.exit(1) ignore_stop_words = \'--ignore-stop-words\' in sys.argv main(file_path, top_n, ignore_stop_words)"},{"question":"Develop a Python function named `unique_paths` that calculates the number of unique paths from the top-left corner to the bottom-right corner of an `m x n` grid. The robot can only move either down or right at any point in time. Implement this function using dynamic programming. Additionally, run your function for the following test cases and provide the outputs: 1. `unique_paths(3, 7)` 2. `unique_paths(3, 2)` 3. `unique_paths(7, 3)` 4. `unique_paths(3, 3)` Ensure that your solution handles edge cases, such as a 1x1 grid, appropriately, and provide appropriate comments in your code to explain the logic used. You are not allowed to use any external libraries for combinatorial calculations but need to write a clear and efficient dynamic programming solution.","solution":"def unique_paths(m, n): Calculate the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. # Create a 2D array (list of lists) to store the number of ways to reach each cell. dp = [[0] * n for _ in range(m)] # Initialize the first row and the first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): # The number of ways to reach cell (i, j) is the sum of ways # to reach the cell above it and the cell to the left of it. dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right corner will contain the number of unique paths return dp[m - 1][n - 1]"},{"question":"Write a function to simulate a simple file system with commands to create files, write data to files, read data from files, and delete files. The file system should support this set of operations: 1. `create(file_name)`: Create a new file with the specified name. If a file with the name already exists, raise an error. 2. `write(file_name, data)`: Write the specified data to the file. If the file does not exist, raise an error. 3. `read(file_name)`: Read and return the data from the file. If the file does not exist, raise an error. 4. `delete(file_name)`: Delete the specified file. If the file does not exist, raise an error. Implement your file system with the following constraints: - Use an in-memory dictionary to store the files and their contents. - Ensure the system runs efficiently with up to 10,000 file operations. - Clearly define error handling for cases where operations are performed on non-existent files or files already exist where creation is attempted. Example: ```python fs = FileSystem() fs.create(\\"file1\\") fs.write(\\"file1\\", \\"Hello, world!\\") print(fs.read(\\"file1\\")) # Output: Hello, world! fs.delete(\\"file1\\") fs.read(\\"file1\\") # This should raise an error since the file no longer exists. ```","solution":"class FileSystem: def __init__(self): # Initialize the file system, stored as a dictionary self.files = {} def create(self, file_name): Create a new file with the specified name. Raise an error if the file already exists. if file_name in self.files: raise FileExistsError(f\\"File \'{file_name}\' already exists.\\") self.files[file_name] = \\"\\" def write(self, file_name, data): Write the specified data to the file. Raise an error if the file does not exist. if file_name not in self.files: raise FileNotFoundError(f\\"File \'{file_name}\' does not exist.\\") self.files[file_name] = data def read(self, file_name): Read and return the data from the file. Raise an error if the file does not exist. if file_name not in self.files: raise FileNotFoundError(f\\"File \'{file_name}\' does not exist.\\") return self.files[file_name] def delete(self, file_name): Delete the specified file. Raise an error if the file does not exist. if file_name not in self.files: raise FileNotFoundError(f\\"File \'{file_name}\' does not exist.\\") del self.files[file_name]"},{"question":"You are tasked with developing a Python application that simulates a library management system. The application should allow users to borrow and return books. Each book has a title, author, and a unique identification number. Users should be able to perform the following operations: 1. **Borrow a Book**: When a user borrows a book, it should no longer be available for borrowing until it is returned. 2. **Return a Book**: When a user returns a book, it should be available for others to borrow. 3. **List Available Books**: Display the list of books that are currently available for borrowing. 4. **List Borrowed Books**: Display the list of books that are currently borrowed along with the user who has borrowed them. # Requirements - Implement a class `Book` with the following attributes: - `title` (string) - `author` (string) - `id` (integer, unique) - Implement a class `Library` with the following methods: - `__init__(self)`: Initialize an empty library. - `add_book(self, book)`: Adds a new book to the library. - `borrow_book(self, book_id, user)`: Marks a book as borrowed by a user. - `return_book(self, book_id)`: Marks a book as returned. - `list_available_books(self)`: Returns a list of books that are currently available for borrowing. - `list_borrowed_books(self)`: Returns a list of books that are currently borrowed along with the user who has borrowed them. - Implement exception handling for cases where a book being borrowed or returned does not exist. # Example Usage ```python # Create a library instance library = Library() # Add books to the library book1 = Book(\\"1984\\", \\"George Orwell\\", 1) book2 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 2) library.add_book(book1) library.add_book(book2) # Borrow a book library.borrow_book(1, \\"User1\\") # List available books available_books = library.list_available_books() # Should output: To Kill a Mockingbird by Harper Lee # List borrowed books borrowed_books = library.list_borrowed_books() # Should output: 1984 by George Orwell borrowed by User1 # Return a book library.return_book(1) # List available books again available_books = library.list_available_books() # Should output: 1984 by George Orwell, To Kill a Mockingbird by Harper Lee ``` Implement the classes and methods such that the example usage behaves as expected.","solution":"class Book: def __init__(self, title, author, id): self.title = title self.author = author self.id = id class Library: def __init__(self): self.books = {} self.borrowed_books = {} def add_book(self, book): self.books[book.id] = book def borrow_book(self, book_id, user): if book_id not in self.books: raise ValueError(\\"Book does not exist in the library.\\") if book_id in self.borrowed_books: raise ValueError(\\"Book is already borrowed.\\") self.borrowed_books[book_id] = user def return_book(self, book_id): if book_id not in self.borrowed_books: raise ValueError(\\"Book is not borrowed.\\") del self.borrowed_books[book_id] def list_available_books(self): return [book for book_id, book in self.books.items() if book_id not in self.borrowed_books] def list_borrowed_books(self): return [(self.books[book_id], user) for book_id, user in self.borrowed_books.items()]"},{"question":"Given a string, create a function to determine if it is a permutation of a palindrome. The palindrome does not need to be limited to dictionary words. The function should handle various cases including spaces, punctuation, and mixed case letters. Example: Input: \\"Tact Coa\\" Output: True (permutations: \\"taco cat\\", \\"atco cta\\", etc.) Note: Consider punctuation and spaces when determining permutations but ignore case sensitivity.","solution":"from collections import Counter def is_permutation_of_palindrome(s: str) -> bool: Determine if the input string is a permutation of a palindrome. Consider spaces and punctuation, but ignore case sensitivity. s = s.lower() # consider ignoring case sensitivity count = Counter(c for c in s if c.isalnum()) # consider punctuation, count all alphanumeric characters odd_count = sum(1 for c in count.values() if c % 2 != 0) # For the string to be a permutation of a palindrome, there can be at most one character with an odd count return odd_count <= 1"},{"question":"Create a Python function that accepts a list of integers and returns a new list where each element is the sum of all previous elements in the input list, including the current one. ```python def cumulative_sum(input_list): This function takes a list of integers and returns a new list where each element is the cumulative sum of the input list up to that index. Parameters: input_list (list): A list of integers Returns: list: A new list of integers with the cumulative sums cumulative_list = [] current_sum = 0 for number in input_list: current_sum += number cumulative_list.append(current_sum) return cumulative_list # Example usage: # input_list = [1, 2, 3, 4] # cumulative_sum(input_list) should return [1, 3, 6, 10] ``` Example: - Input: `[3, 1, 4, 1, 5]` - Output: `[3, 4, 8, 9, 14]`","solution":"def cumulative_sum(input_list): This function takes a list of integers and returns a new list where each element is the cumulative sum of the input list up to that index. Parameters: input_list (list): A list of integers Returns: list: A new list of integers with the cumulative sums if not input_list: return [] cumulative_list = [] current_sum = 0 for number in input_list: current_sum += number cumulative_list.append(current_sum) return cumulative_list"},{"question":"Given a matrix of size N x M, where each cell contains either a land (\'L\') or a water (\'W\'), what algorithm would you use to identify the number of distinct islands within the matrix? An island is defined as a group of \'L\' cells connected horizontally or vertically (but not diagonally). The cells on the boundary are considered to be connected if they form a horizontally or vertically contiguous segment. Your solution needs to be efficient in terms of both time and space complexity. Additionally, provide an explanation of how you would handle edge cases, such as matrices where there are no islands or where the entire matrix is one single island. You should write the implementation in a language that supports object-oriented programming, and ensure your solution can handle matrices up to a size of 1000 x 1000. Bonus challenge: Can you extend your solution to find the size of the largest island in the matrix?","solution":"def num_islands(matrix): Returns the number of distinct islands in the given matrix. :type matrix: List[List[str]] :rtype: int if not matrix: return 0 rows, cols = len(matrix), len(matrix[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): stack = [(r, c)] while stack: x, y = stack.pop() if x < 0 or x >= rows or y < 0 or y >= cols or matrix[x][y] == \'W\' or visited[x][y]: continue visited[x][y] = True stack.extend([(x-1, y), (x+1, y), (x, y-1), (x, y+1)]) num_islands = 0 for i in range(rows): for j in range(cols): if matrix[i][j] == \'L\' and not visited[i][j]: num_islands += 1 dfs(i, j) return num_islands def largest_island(matrix): Returns the size of the largest island in the given matrix. :type matrix: List[List[str]] :rtype: int if not matrix: return 0 rows, cols = len(matrix), len(matrix[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs_size(r, c): stack = [(r, c)] size = 0 while stack: x, y = stack.pop() if x < 0 or x >= rows or y < 0 or y >= cols or matrix[x][y] == \'W\' or visited[x][y]: continue visited[x][y] = True size += 1 stack.extend([(x-1, y), (x+1, y), (x, y-1), (x, y+1)]) return size max_size = 0 for i in range(rows): for j in range(cols): if matrix[i][j] == \'L\' and not visited[i][j]: max_size = max(max_size, dfs_size(i, j)) return max_size"},{"question":"Write a function that takes a list of integers and returns the longest contiguous subarray which has the largest sum. Additionally, provide the functionality to return the starting and ending indices of this subarray. To add further complexity, consider the edge case where all numbers in the array are negative and ensure your algorithm handles this scenario correctly. Next, extend your function to also return the smallest sum of any contiguous subarray within the same list. Finally, ensure your code is optimized for performance, maintaining a linear time complexity.","solution":"def max_min_subarray(arr): Returns the longest contiguous subarray with the largest sum and the subarray with the smallest sum, along with their respective starting and ending indices. Parameters: arr (list): List of integers. Returns: tuple: ((max_sum, max_start, max_end), (min_sum, min_start, min_end)) n = len(arr) if n == 0: return None, None # Initialize variables for maximum sum subarray max_sum = arr[0] current_max_sum = arr[0] max_start = max_end = 0 temp_start = 0 # Initialize variables for minimum sum subarray min_sum = arr[0] current_min_sum = arr[0] min_start = min_end = 0 temp_min_start = 0 for i in range(1, n): # For maximum sum subarray if current_max_sum < 0: current_max_sum = arr[i] temp_start = i else: current_max_sum += arr[i] if current_max_sum > max_sum: max_sum = current_max_sum max_start = temp_start max_end = i # For minimum sum subarray if current_min_sum > 0: current_min_sum = arr[i] temp_min_start = i else: current_min_sum += arr[i] if current_min_sum < min_sum: min_sum = current_min_sum min_start = temp_min_start min_end = i return (max_sum, max_start, max_end), (min_sum, min_start, min_end)"},{"question":"Design a function that takes a list of dictionaries containing information about students (name, grade) and returns a dictionary where the keys are the grades, and the values are lists of names of students with that grade. For example: Input: [ {\\"name\\": \\"Alice\\", \\"grade\\": \\"A\\"}, {\\"name\\": \\"Bob\\", \\"grade\\": \\"B\\"}, {\\"name\\": \\"Charlie\\", \\"grade\\": \\"A\\"}, {\\"name\\": \\"David\\", \\"grade\\": \\"C\\"}, {\\"name\\": \\"Eve\\", \\"grade\\": \\"B\\"} ] Output: { \\"A\\": [\\"Alice\\", \\"Charlie\\"], \\"B\\": [\\"Bob\\", \\"Eve\\"], \\"C\\": [\\"David\\"] }","solution":"def group_students_by_grade(students): Groups students by their grades. Args: students (list of dict): A list of dictionaries containing student information. Each dictionary has the keys \'name\' and \'grade\'. Returns: dict: A dictionary where the keys are grades, and values are lists of student names with that grade. grade_dict = {} for student in students: grade = student[\'grade\'] name = student[\'name\'] if grade not in grade_dict: grade_dict[grade] = [] grade_dict[grade].append(name) return grade_dict"},{"question":"Write a function that takes a list of integers as input and returns the second largest number in the list. If the list contains fewer than two distinct numbers, return `None`. The function should handle lists of arbitrary length efficiently. For instance, given the list `[10, 4, 3, 2, 10]`, the output should be `4`. Ensure your implementation does not rely on built-in sorting algorithms.","solution":"def second_largest(numbers): Returns the second largest number in the list. If the list has fewer than two distinct numbers, returns None. if len(numbers) < 2: return None first = second = float(\'-inf\') for num in numbers: if num > first: second = first first = num elif first > num > second: second = num return second if second != float(\'-inf\') else None"},{"question":"Generate a function that takes a string consisting of ASCII characters and returns a transformed version where each letter is replaced by the next one in the alphabet (with \'z\' going to \'a\'), digits (0-9) are replaced by their complement to 9 (e.g., \'0\' with \'9\', \'1\' with \'8\', etc.), and all other characters remain unchanged. Additionally, ensure that uppercase and lowercase letters maintain their respective cases. Example: Input: \\"Hello World! 123\\" Output: \\"Ifmmp Xpsme! 876\\"","solution":"def transform_string(s): Transforms a string such that: - Each letter is replaced by the next one in the alphabet (\'z\' goes to \'a\' and \'Z\' goes to \'A\'). - Digits (0-9) are replaced by their complement to 9 (e.g., \'0\' with \'9\', \'1\' with \'8\'). - All other characters remain unchanged. transformed = [] for char in s: if char.isalpha(): if char == \'z\': transformed.append(\'a\') elif char == \'Z\': transformed.append(\'A\') else: transformed.append(chr(ord(char) + 1)) elif char.isdigit(): transformed.append(str(9 - int(char))) else: transformed.append(char) return \'\'.join(transformed)"},{"question":"Develop a Python program that includes a class to manage a collection of books in a library. Each book should have a title, author, publication year, and a unique identifier. The program should provide the following functionalities: 1. Add a new book to the collection. If a book with the same unique identifier already exists, an appropriate error message should be returned. 2. Remove a book from the collection using its unique identifier. If no such book exists, an appropriate error message should be returned. 3. Search for a book by its title, author, or publication year. The search should be case-insensitive and should return all matching books. 4. Show all books in the collection sorted by title, or by author, or by publication year. Include an option to display the list in either ascending or descending order. 5. Include a method to compute the total number of books in the collection and another method to calculate the average publication year of the books in the collection. The class should allow for invocation of these methods separately. Test your class with multiple test cases to ensure all functionalities work as expected. Optimize your code for efficient searching and sorting operations.","solution":"class Book: def __init__(self, identifier, title, author, publication_year): self.identifier = identifier self.title = title self.author = author self.publication_year = publication_year class Library: def __init__(self): self.books = {} def add_book(self, book): if book.identifier in self.books: return \\"Error: Book with the same unique identifier already exists.\\" self.books[book.identifier] = book return \\"Book added successfully.\\" def remove_book(self, identifier): if identifier not in self.books: return \\"Error: No such book exists.\\" del self.books[identifier] return \\"Book removed successfully.\\" def search_books(self, search_term, search_type): search_term = search_term.lower() result = [] for book in self.books.values(): if search_type == \'title\' and search_term in book.title.lower(): result.append(book) elif search_type == \'author\' and search_term in book.author.lower(): result.append(book) elif search_type == \'publication_year\' and search_term == str(book.publication_year): result.append(book) return result def show_books(self, sort_by=\'title\', descending=False): sorted_books = sorted(self.books.values(), key=lambda x: getattr(x, sort_by), reverse=descending) return sorted_books def total_books(self): return len(self.books) def average_publication_year(self): if not self.books: return 0 total_years = sum(book.publication_year for book in self.books.values()) return total_years / len(self.books) library = Library()"},{"question":"Describe an algorithm to convert a binary search tree (BST) into a doubly linked list in-place, following an in-order traversal. Explain the time complexity and space complexity of your algorithm.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class DoublyListNode: def __init__(self, val=0, prev=None, next_=None): self.val = val self.prev = prev self.next = next_ def bst_to_doubly_list(root): if not root: return None def inorder_traversal(node): nonlocal last, head if not node: return inorder_traversal(node.left) if last: last.next = DoublyListNode(node.val) last.next.prev = last last = last.next else: head = DoublyListNode(node.val) last = head inorder_traversal(node.right) last = None head = None inorder_traversal(root) return head"},{"question":"You are tasked with developing a real-time fraud detection system for an online payment gateway. The system should analyze transaction data to identify potentially fraudulent activities based on patterns such as transaction frequency, amounts, user location changes, and IP address anomalies. The model should be robust enough to process large volumes of data quickly and adapt to new patterns of fraudulent behavior over time. Additionally, provide an example of a flawed algorithm that attempts to detect fraud but fails to account for legitimate transactions by frequent travelers, and then correct the algorithm. Ensure that the system adheres to data privacy laws and incorporates security measures against potential data breaches. Include a comprehensive evaluation strategy for the system, focusing on metrics such as true positive rate, false positive rate, precision, recall, F1 score, and receiver operating characteristic (ROC) curve. Discuss the potential biases in the model and propose methods to mitigate them.","solution":"import numpy as np from sklearn.ensemble import IsolationForest from sklearn.metrics import precision_score, recall_score, f1_score, roc_curve, auc def detect_fraud(transactions, user_location, user_ip, threshold=0.5): Detects potentially fraudulent transactions. Parameters: transactions (numpy array): 2D array with transaction data, including amounts and frequency. user_location (numpy array): 1D array with user\'s location changes. user_ip (numpy array): 1D array with user\'s IP changes. threshold (float): The threshold for the IsolationForest to determine fraud. Returns: numpy array: 1D array with boolean values indicating if a transaction is fraudulent. feature_data = np.hstack((transactions, user_location[:, None], user_ip[:, None])) model = IsolationForest(contamination=threshold) predictions = model.fit_predict(feature_data) return predictions == -1 # Example of flawed algorithm def flawed_fraud_detection(transactions, user_location, user_ip): A flawed fraud detection algorithm that fails to account for legitimate transactions by frequent travelers. Parameters: transactions (numpy array): 2D array with transaction data, including amounts and frequency. user_location (numpy array): 1D array with user\'s location changes. user_ip (numpy array): 1D array with user\'s IP changes. Returns: numpy array: 1D array with boolean values indicating if a transaction is fraudulent. fraud_flags = np.zeros(transactions.shape[0], dtype=bool) for i in range(1, transactions.shape[0]): if user_location[i] != user_location[i-1]: fraud_flags[i] = True return fraud_flags # Corrected algorithm def improved_fraud_detection(transactions, user_location, user_ip, threshold=0.5): An improved fraud detection algorithm that accounts for legitimate transactions by frequent travelers. Parameters: transactions (numpy array): 2D array with transaction data, including amounts and frequency. user_location (numpy array): 1D array with user\'s location changes. user_ip (numpy array): 1D array with user\'s IP changes. threshold (float): The threshold for the IsolationForest to determine fraud. Returns: numpy array: 1D array with boolean values indicating if a transaction is fraudulent. feature_data = np.hstack((transactions, user_location[:, None], user_ip[:, None])) model = IsolationForest(contamination=threshold) predictions = model.fit_predict(feature_data) return predictions == -1 # Evaluation strategy def evaluate_model(predictions, actuals): precision = precision_score(actuals, predictions) recall = recall_score(actuals, predictions) f1 = f1_score(actuals, predictions) fpr, tpr, _ = roc_curve(actuals, predictions) roc_auc = auc(fpr, tpr) return { \\"precision\\": precision, \\"recall\\": recall, \\"f1_score\\": f1, \\"roc_auc\\": roc_auc } # Mitigation of potential biases can include strategies such as regular model retraining, balanced dataset usage, and rigorous validation."},{"question":"Write a function that takes an array of integers and an integer target value and returns whether there are any two distinct indices i and j in the array such that the elements at those indices sum up to the target value. Example: - Input: array = [1, 2, 3, 4], target = 5 - Output: True (since element at index 0 and 3 sum to 5) - Input: array = [1, 2, 3, 4], target = 8 - Output: False (no two distinct elements sum to 8)","solution":"def two_sum(array, target): Returns whether there are two distinct indices i and j in the array such that the elements at those indices sum up to the target value. # Create a dictionary to store the elements and their indices seen = {} # Iterate over the array for i, num in enumerate(array): # Compute the complement that would sum up to the target complement = target - num # Check if the complement is already in seen if complement in seen: return True # Add the current number to seen seen[num] = i # If no such pair is found, return False return False"},{"question":"Given an array of integers [4, -1, 1, 6, 3, -1, 3, 3], find the number that appears only once. If there\'s no such number, return a message indicating so. For example, the output for the given array should be 4 and 6, as they are the numbers that appear only once.","solution":"def find_unique_numbers(arr): Returns a list of numbers that appear only once in the given array. If no such number exists, returns an appropriate message. from collections import Counter count = Counter(arr) unique_numbers = [num for num, freq in count.items() if freq == 1] if unique_numbers: return unique_numbers else: return \\"No unique number found\\""},{"question":"Given a list of people and their birthdates, write a function that takes the list as input and returns the names of people whose birthday is today. The birthdate of each person in the list is given as a string in the format \\"YYYY-MM-DD\\". The list is formatted as follows: ```python people = [ {\\"name\\": \\"Alice\\", \\"birthdate\\": \\"1990-05-24\\"}, {\\"name\\": \\"Bob\\", \\"birthdate\\": \\"1985-10-16\\"}, {\\"name\\": \\"Charlie\\", \\"birthdate\\": \\"1992-01-08\\"}, ... ] ``` Write the function `birthday_today(people)` that will: 1. Check if anyone in the given list has a birthday today. 2. Return a list of names of those individuals. You can assume the list of people always contains dictionaries with keys \\"name\\" and \\"birthdate\\". Use the `datetime` module to deal with dates. Example: ```python from datetime import datetime people = [ {\\"name\\": \\"Alice\\", \\"birthdate\\": \\"1990-05-24\\"}, {\\"name\\": \\"Bob\\", \\"birthdate\\": \\"1985-10-16\\"}, {\\"name\\": \\"Charlie\\", \\"birthdate\\": \\"1992-01-08\\"}, {\\"name\\": \\"David\\", \\"birthdate\\": datetime.now().strftime(\\"%Y-%m-%d\\")}, ] print(birthday_today(people)) ``` If today\'s date is January 8, 2023, the output should be: ``` [\'Charlie\', \'David\'] ```","solution":"from datetime import datetime def birthday_today(people): Returns a list of names of people whose birthday is today. :param people: List of dictionaries containing \'name\' and \'birthdate\'. :return: List of names of people with today\'s birthday. today = datetime.now().strftime(\\"%m-%d\\") return [person[\'name\'] for person in people if person[\'birthdate\'][5:] == today]"},{"question":"Write a function that checks if a given string is a valid palindrome by considering only alphanumeric characters and ignoring cases. For example, \\"A man, a plan, a canal: Panama\\" is a valid palindrome, while \\"race a car\\" is not. Implement this function in Python and demonstrate its correctness with at least three test cases.","solution":"def is_valid_palindrome(s): Checks if the given string is a valid palindrome by considering only alphanumeric characters and ignoring cases. Parameters: s (str): The input string to check. Returns: bool: True if the string is a valid palindrome, False otherwise. cleaned_string = \'\'.join(c.lower() for c in s if c.isalnum()) return cleaned_string == cleaned_string[::-1]"},{"question":"**Problem: Unique Paths in a Matrix** You are given an `m x n` matrix (a 2 dimensional array) where each element can either be `0` or `1`. A `0` represents an empty cell, while a `1` represents an obstacle. You are asked to find the number of unique paths from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1) while avoiding the obstacles. You can only move either down or right at any point in time. **Input Format** ``` int m: number of rows in the matrix int n: number of columns in the matrix List[List[int]] matrix: 2D list representing the matrix ``` **Output Format** ``` int: the number of unique paths from (0, 0) to (m-1, n-1) ``` **Constraints** - 1 ≤ m, n ≤ 100 - The initial and final cell (i.e., matrix[0][0] and matrix[m-1][n-1]) will always be `0`. **Example** ``` Input: 3 3 [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 ``` **Explanation** In the example, there are two unique paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right **Note** - If there are no paths available, return `0`. - Dynamic programming is recommended to solve this problem efficiently.","solution":"def unique_paths_with_obstacles(m, n, matrix): Returns the number of unique paths in an m x n matrix with obstacles if matrix[0][0] == 1 or matrix[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if matrix[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"How does recursion work in programming? Describe the essential characteristics that make a problem suitable for a recursive solution and compare it to iterative approaches. Provide a clear explanation and a code example of a recursive algorithm solving the problem of calculating the nth Fibonacci number in any programming language of your choice. Additionally, analyze the time and space complexity of your recursive solution. Discuss any potential drawbacks of using recursion, such as stack overflow, and propose ways to minimize these issues, possibly by transforming the recursive solution to an iterative one through techniques like memoization or tail recursion. Finally, write a program demonstrating both the recursive and iterative methods to solve the same problem, highlighting the differences in their execution.","solution":"def recursive_fibonacci(n): Calculates the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return recursive_fibonacci(n - 1) + recursive_fibonacci(n - 2) def iterative_fibonacci(n): Calculates the nth Fibonacci number using iteration. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b # Explanation of recursion, its characteristics, and comparison with iteration: \'\'\' Recursion in programming refers to the technique where a function calls itself to solve smaller instances of the same problem until a base case is reached. Essential characteristics of problems suitable for recursive solutions: 1. The problem can be broken down into smaller subproblems of the same type. 2. It has a base case that terminates the recursion. 3. Each recursive call reduces the problem size or brings it closer to the base case. Time Complexity and Space Complexity: - The time complexity of the simple recursive Fibonacci solution is O(2^n) due to redundant calculations. - The space complexity is O(n) due to the call stack. Potential drawbacks of using recursion: - Redundant computations leading to inefficient solutions for problems like Fibonacci. - Stack overflow risk for deeply nested recursions. Ways to minimize recursion issues: - Memoization: Store the results of expensive function calls and reuse when the same inputs occur again. - Tail Recursion: A form of recursion where the recursive call is the last operation, allowing optimization by the compiler. - Transforming recursion to iteration: It can help avoid the drawbacks by using loops and maintaining an explicit stack. Example of memoization (in Python): memo = {} def memoized_fibonacci(n): if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = memoized_fibonacci(n - 1) + memoized_fibonacci(n - 2) return memo[n] \'\'\'"},{"question":"Write a function that takes a list of integers as input and returns a new list where each element is the product of all the other elements in the original list except the element at the current position, without using division. The function should work with both positive and negative integers. Example: ``` input_list = [1, 2, 3, 4] output_list = [24, 12, 8, 6] ``` Example: ``` input_list = [-1, 2, -3, 4] output_list = [-24, 12, -8, 6] ```","solution":"def product_except_self(nums): Given a list of integers, returns a new list where each element is the product of all the other elements in the original list except the element at the current position. if len(nums) == 0: return [] length = len(nums) products = [1] * length # Multiply all the elements to the left of each element left_product = 1 for i in range(length): products[i] = left_product left_product *= nums[i] # Multiply all the elements to the right of each element right_product = 1 for i in range(length - 1, -1, -1): products[i] *= right_product right_product *= nums[i] return products"},{"question":"Implement a Python function that determines if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. In your approach, provide a detailed step-by-step explanation of how you handle different characters, describe the methodology for sanitizing the input, and ensure the solution is optimized for performance.","solution":"def is_palindrome(s): Checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. # Step 1: Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Step 2: Check if the filtered list is a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Implement a function that parses a given string, extracts digits, words, and special characters, and returns them as separate lists. Ensure the function handles the following conditions: - Digits are defined as continuous sequences of numerical characters. - Words are defined as continuous sequences of alphabetical characters. - Special characters are defined as any non-alphanumeric characters, grouped individually. The function should return a dictionary with the keys \'digits\', \'words\', and \'special_chars\', each mapping to a list containing the extracted elements in the order they appeared in the input string. def parse_string(s: str) -> dict: Parse the input string and return a dictionary with lists of digits, words, and special characters. Parameters: s (str): The input string to parse. Returns: dict: A dictionary with keys \'digits\', \'words\', and \'special_chars\'. Examples: >>> parse_string(\\"abc 123 !@#\\") {\'digits\': [\'123\'], \'words\': [\'abc\'], \'special_chars\': [\'!\', \'@\', \'#\']} >>> parse_string(\\"welcome to 2021, the year of challenges!\\") {\'digits\': [\'2021\'], \'words\': [\'welcome\', \'to\', \'the\', \'year\', \'of\', \'challenges\'], \'special_chars\': [\',\', \'!\']} >>> parse_string(\\"test1234test\\") {\'digits\': [\'1234\'], \'words\': [\'test\', \'test\'], \'special_chars\': []}","solution":"import re def parse_string(s: str) -> dict: Parse the input string and return a dictionary with lists of digits, words, and special characters. Parameters: s (str): The input string to parse. Returns: dict: A dictionary with keys \'digits\', \'words\', and \'special_chars\'. digits = re.findall(r\'d+\', s) words = re.findall(r\'[a-zA-Z]+\', s) special_chars = re.findall(r\'[^a-zA-Z0-9s]\', s) return { \'digits\': digits, \'words\': words, \'special_chars\': special_chars }"},{"question":"Describe the concept of recursion and its use cases in programming. Provide an example of a recursive function in Python that calculates the nth Fibonacci number. Explain how your function works and discuss any potential pitfalls of using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Given a sequence of integers, you are required to find the length of the longest contiguous subarray with an equal number of even and odd integers. The input list contains only non-negative integers. You can assume the input will always be valid. For instance: Example 1: Input: nums = [1, 2, 3, 4] Output: 4 Explanation: The entire array is a subarray with 2 even and 2 odd numbers. Example 2: Input: nums = [1, 1, 2, 2] Output: 4 Explanation: The entire array is a subarray with 2 even and 2 odd numbers. Example 3: Input: nums = [1, 2, 3, 5, 6, 7] Output: 4 Explanation: The longest subarray is [2, 3, 5, 6] which has 2 even and 2 odd numbers. Example 4: Input: nums = [2, 4, 6, 8] Output: 0 Explanation: There is no subarray with an equal number of even and odd numbers. Constraints: - `1 <= nums.length <= 10000` - `0 <= nums[i] <= 10^9` It is recommended to devise a solution that runs in linear time complexity.","solution":"def longest_contiguous_subarray(nums): Find the length of the longest contiguous subarray with an equal number of even and odd integers. Args: nums (list): List of non-negative integers Returns: int: Length of the longest contiguous subarray with an equal number of even and odd integers. max_length = 0 count = 0 count_map = {0: -1} for i, num in enumerate(nums): if num % 2 == 0: count += 1 else: count -= 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Write a Python function `find_majority_element` that takes a list of integers as input and returns the majority element. The majority element is the one that appears more than ⌊n/2⌋ times in the list, where n is the length of the list. If no majority element exists, return `None`. Example: ```python def find_majority_element(nums): # Your code here # Examples print(find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4])) # Output: 4 print(find_majority_element([3, 3, 4, 2, 4, 4, 2, 4])) # Output: None ``` Note: - You should aim for a solution with O(n) time complexity and O(1) space complexity. - You may assume the input list is non-empty.","solution":"def find_majority_element(nums): Returns the majority element in the list nums, or None if no majority element exists. The majority element is the one that appears more than ⌊n/2⌋ times in the list, where n is the length of the list. count = 0 candidate = None # Boyer-Moore Voting Algorithm for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Verify the candidate if nums.count(candidate) > len(nums) // 2: return candidate else: return None"},{"question":"Create a Python function that takes a list of integers as input and returns a list containing the squares of each integer, but in descending order. If the input list contains any non-integer elements, your function should raise a ValueError. Additionally, for an input empty list, the function should return an empty list. Example Input: [1, 2, 3, 4, 5] Example Output: [25, 16, 9, 4, 1]","solution":"def square_and_sort_desc(lst): Returns a list of the squares of integers in the input list, sorted in descending order. Args: lst (list): A list of integers. Returns: list: A list of the squares of integers in descending order. Raises: ValueError: If the input list contains non-integer elements. if not all(isinstance(x, int) for x in lst): raise ValueError(\\"All elements in the input list must be integers.\\") squared_lst = [x**2 for x in lst] squared_lst.sort(reverse=True) return squared_lst"},{"question":"How can you develop a function in Python that evaluates the performance of a k-Nearest Neighbors (k-NN) classifier? The function should include data normalization, configuration to select the best value of k using cross-validation, and metrics such as accuracy, precision, recall, and F1-score for evaluation. Additionally, the function should handle potential ties in the nearest neighbor votes.","solution":"from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score import numpy as np def evaluate_knn(X, y, cv=5, k_range=range(1, 31)): Evaluate the performance of a k-Nearest Neighbors (k-NN) classifier. Parameters: - X (array-like): Feature dataset - y (array-like): Labels - cv (int): Number of cross-validation folds - k_range (range): Range of k values to try Returns: - dict: Evaluation metrics including best k, accuracy, precision, recall, and F1-score # Normalize the data scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42) # Perform grid search to find the best k param_grid = {\'n_neighbors\': k_range} grid = GridSearchCV(KNeighborsClassifier(), param_grid, cv=cv, scoring=\'accuracy\') grid.fit(X_train, y_train) best_k = grid.best_params_[\'n_neighbors\'] # Train the k-NN classifier with the best k knn = KNeighborsClassifier(n_neighbors=best_k) knn.fit(X_train, y_train) # Predict the labels for the test set y_pred = knn.predict(X_test) # Calculate evaluation metrics accuracy = accuracy_score(y_test, y_pred) precision = precision_score(y_test, y_pred, average=\'weighted\') recall = recall_score(y_test, y_pred, average=\'weighted\') f1 = f1_score(y_test, y_pred, average=\'weighted\') return { \'best_k\': best_k, \'accuracy\': accuracy, \'precision\': precision, \'recall\': recall, \'f1_score\': f1 }"},{"question":"Design a function in Python that accepts a string and returns the count of each character in the string. The function should ignore spaces and be case-insensitive, such that \'A\' and \'a\' are considered the same character. Function Signature ```python def character_count(s: str) -> dict: pass ``` # Input - A single string `s` of arbitrary length containing letters and spaces. For example: `\'Hello World\'`. # Output - A dictionary where keys are characters, and values are the corresponding counts. For example, the input `\'Hello World\'` would yield the output: `{\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1}`. # Constraints - The input string will contain only English letters (both uppercase and lowercase) and spaces. - The character count should ignore spaces. - The character count should be case-insensitive.","solution":"def character_count(s: str) -> dict: Returns a dictionary with counts of each character in the string `s`, ignoring spaces and being case-insensitive. # Initialize an empty dictionary to store the counts count_dict = {} # Convert the input string to lowercase and remove spaces s = s.lower().replace(\\" \\", \\"\\") # Iterate over each character in the modified string for char in s: # Increment the count for the character in the dictionary if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write a Python program that accepts an integer n and generates a list of n Fibonacci numbers. Note that the Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two numbers in the sequence.","solution":"def generate_fibonacci(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] fibonacci_sequence = [0] * n if n > 0: fibonacci_sequence[0] = 0 if n > 1: fibonacci_sequence[1] = 1 for i in range(2, n): fibonacci_sequence[i] = fibonacci_sequence[i - 1] + fibonacci_sequence[i - 2] return fibonacci_sequence"},{"question":"Write a function in Python that takes a list of integers and returns the list in sorted order without using the built-in `sort()` function. Implement your own sorting algorithm to demonstrate your understanding of sorting mechanisms. For example, for the input list `[34, 2, 25, 16, 7]`, the output should be `[2, 7, 16, 25, 34]`.","solution":"def custom_sort(arr): Sorts a list of integers in ascending order using bubble sort algorithm. n = len(arr) # Bubble sort for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function that simulates the motions of a simple two-dimensional object with given velocity changes over time. The object starts at the origin (0,0) and moves according to a series of movements specified in an input list. Each movement has a direction (\'UP\', \'DOWN\', \'LEFT\', \'RIGHT\') and a distance. The function should compute the final coordinates of the object after all the movements are completed. For example, given the input movements: movements = [(\'UP\', 5), (\'RIGHT\', 3), (\'DOWN\', 2), (\'LEFT\', 4)] The object will move: - Up by 5 units (0, 5) - Right by 3 units (3, 5) - Down by 2 units (3, 3) - Left by 4 units (-1, 3) So, the function should return the final coordinates: (-1, 3).","solution":"def simulate_movement(movements): Simulates the movement of an object starting at the origin (0,0) according to a list of movements and returns the final coordinates. Parameters: movements (list of tuple): A list of movements, each represented by a tuple (direction, distance). Returns: tuple: The final coordinates of the object. x, y = 0, 0 for direction, distance in movements: if direction == \'UP\': y += distance elif direction == \'DOWN\': y -= distance elif direction == \'LEFT\': x -= distance elif direction == \'RIGHT\': x += distance return x, y"},{"question":"Design a tournament ranking system Description is as follows: You are given an array `matches` where `matches[i] = [winneri, loseri]` describes the result of a match between two players, where `winneri` is the winner of the match and `loseri` is the loser. Your task is to create a ranking of the players based on the matches results. If two players have the same number of wins, the player with fewer losses should be ranked higher. If the number of wins and losses are the same, the player with the lexicographically smaller name should be ranked higher. Return the ranking as an array of player names. Example 1: Input: matches = [[\\"Alice\\", \\"Bob\\"], [\\"Bob\\", \\"Charlie\\"], [\\"Charlie\\", \\"Alice\\"], [\\"Alice\\", \\"Charlie\\"], [\\"Bob\\", \\"Alice\\"], [\\"Charlie\\", \\"Bob\\"]] Output: [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] Explanation: - Alice wins against Bob and Charlie, and loses against Bob and Charlie. (Wins: 2, Losses: 2) - Bob wins against Charlie and Alice, and loses against Alice and Charlie. (Wins: 2, Losses: 2) - Charlie wins against Alice and Bob, and loses against Alice and Bob. (Wins: 2, Losses: 2) All players have the same number of wins and losses, but Alice is lexicographically smaller than Bob and Charlie, and Bob is lexicographically smaller than Charlie. Hence, the output is [\\"Alice\\", \\"Bob\\", \\"Charlie\\"]. Example 2: Input: matches = [[\\"A\\", \\"C\\"], [\\"B\\", \\"A\\"], [\\"C\\", \\"B\\"], [\\"D\\", \\"A\\"], [\\"C\\", \\"D\\"], [\\"B\\", \\"C\\"]] Output: [\\"B\\", \\"C\\", \\"D\\", \\"A\\"] Explanation: - A wins against C, and loses against B and D. (Wins: 1, Losses: 2) - B wins against A and C, and loses against C. (Wins: 2, Losses: 1) - C wins against B and D, and loses against A and B. (Wins: 2, Losses: 2) - D wins against A, and loses against C. (Wins: 1, Losses: 1) So the ranking is [\\"B\\", \\"C\\", \\"D\\", \\"A\\"] according to the number of wins and losses, and lexicographical order if required. Constraints: - `1 <= matches.length <= 104` - Each match contains two strings `[winneri, loseri]` representing the winner and loser of a match respectively. - `winneri` and `loseri` are distinct strings. - All player names consist of lowercase English letters and have a length of at most 10.","solution":"def compute_ranking(matches): Computes the ranking of players based on matches. Parameters: matches (list of list of str): The list of match results. Returns: list of str: The ranking of players. from collections import defaultdict # Initialize dictionaries to store wins and losses wins = defaultdict(int) losses = defaultdict(int) # Process each match for winner, loser in matches: wins[winner] += 1 losses[loser] += 1 # Get all players players = set(wins.keys()).union(set(losses.keys())) # Prepare player stats player_stats = [] for player in players: player_stats.append((wins[player], losses[player], player)) # Sort by wins (desc), losses (asc), name (lexicographically) player_stats.sort(key=lambda x: (-x[0], x[1], x[2])) # Return the sorted player names return [player for _, _, player in player_stats]"},{"question":"Develop a python function that takes a list of integers as input and returns a dictionary where the keys are the integers and the values are the square of the corresponding integers only for those integers which are positive.","solution":"def squares_of_positives(numbers): Returns a dictionary where the keys are the positive integers from the input list and the values are their corresponding squares. return {num: num ** 2 for num in numbers if num > 0}"},{"question":"Design a function named `reorder_array` that takes a list of integers as input and returns a new list in which all the even numbers appear in ascending order followed by all the odd numbers in descending order. The relative order of the even and odd numbers should be preserved within their respective groups (evens and odds). For example: ``` Input: [3, 1, 2, 4, 7, 6] Output: [2, 4, 6, 7, 3, 1] ``` Requirements: 1. The function should handle empty input lists without errors. 2. If there are no even numbers in the input list, only odd numbers should be returned in descending order and vice versa. 3. If the input list contains any non-integer types, your function should raise a `TypeError`. 4. Optimize for performance when possible. You are expected to provide a full implementation of this function in Python along with any necessary helper functions.","solution":"def reorder_array(arr): Reorders the input list such that all even numbers appear in ascending order followed by all odd numbers in descending order. :param arr: List of integers to be reordered. :return: List of integers reordered as specified. :raises TypeError: If input list contains non-integer types. if not all(isinstance(x, int) for x in arr): raise TypeError(\\"Input list must contain only integer values\\") evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0], reverse=True) return evens + odds"},{"question":"You are given a collection of n distinct integers. You need to find three integers in the collection such that the sum of the three integers is closest to a given target value. Write a Python function that returns the sum of the three integers. If there are multiple combinations yielding the same closest sum, any of those sums can be returned. # Function Signature ```python def threeSumClosest(nums: List[int], target: int) -> int: ``` # Input - `nums`: A list of n distinct integers (3 <= n <= 10^3). Example: [2, 3, 5, -2, 8, -1] - `target`: An integer representing the target value. Example: 3 # Output - An integer representing the sum of the three integers that is closest to the target value. # Example ```python assert threeSumClosest([2, 3, 5, -2, 8, -1], 3) == 3 assert threeSumClosest([-1, 2, 1, -4], 1) == 2 assert threeSumClosest([1, 1, 1, 1], 2) == 3 ```","solution":"from typing import List def threeSumClosest(nums: List[int], target: int) -> int: nums.sort() closest_sum = float(\'inf\') for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return closest_sum return closest_sum"},{"question":"Write a function that calculates the sum of the digits of a given positive integer. If the sum of the digits is a single-digit number, return it. If not, repeat the process by taking the sum of the digits of the resulting number. Continue until a single-digit number is obtained and return that number.","solution":"def sum_of_digits(num): Calculates the sum of the digits of a given positive integer repeatedly until a single-digit number is obtained. Parameters: num (int): A positive integer. Returns: int: The resulting single-digit number. while num >= 10: num = sum(int(digit) for digit in str(num)) return num"},{"question":"Implement a function that squares each digit of a given non-negative integer and then concatenates the results as a new integer. The function should handle the input in its integer form and return the output as an integer. Sample Input: num = 9119 Expected Output: num = 811181 Explanation: - The digits of 9119 are 9, 1, 1, 9. - Squaring each digit, we get 81, 1, 1, 81. - Concatenating these results, we get 811181. Constraints: - The input integer will not have leading zeros except in the number 0 itself. - Ensure the output does not convert the integer to a string at any point in the process. Work purely with integer operations.","solution":"def square_digits(num): Squares each digit of the input non-negative integer and concatenates the results as a new integer. result = 0 factor = 1 digits = [] while num > 0: digit = num % 10 num //= 10 digits.append(digit) for digit in reversed(digits): squared_digit = digit * digit result = result * (10 ** (len(str(squared_digit)))) + squared_digit return result"},{"question":"Create a Python function as described with the following details. Description: Write a function that takes a list of integers and returns the product of all positive integers in the list. If the list is empty or does not contain any positive integers, return 1. Function Name: product_of_positives Parameters: List[int] integers Example: ``` input: [1, -2, 3, 0, -4] output: 3 input: [-1, -2, -3] output: 1 input: [2, 4, 6] output: 48 ```","solution":"from typing import List def product_of_positives(integers: List[int]) -> int: Returns the product of all positive integers in the list. If the list is empty or does not contain any positive integers, returns 1. product = 1 has_positive = False for num in integers: if num > 0: product *= num has_positive = True return product if has_positive else 1"},{"question":"Develop a Linear Regression model for a given dataset to predict a continuous target variable. Ensure that all necessary pre-processing steps are included, such as separating features and target variables, and dividing the dataset into training and testing subsets. Follow these steps: import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression df = pd.read_csv(\\"yourdata.csv\\") X = df.drop(\'target\', axis=1) y = df[\'target\'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42) Use the provided skeleton code to implement the Linear Regression model. You may add any additional steps as necessary.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error def linear_regression_model(file_path, target_column, test_size=0.25, random_state=42): This function reads a dataset from a csv file, separates features and target variables, divides the dataset into training and testing subsets, and fits a Linear Regression model. Parameters: - file_path (str): Path to the csv file containing the dataset. - target_column (str): Name of the target column. - test_size (float): Proportion of the dataset to include in the test split. - random_state (int): Seed used by the random number generator. Returns: - model (LinearRegression): Trained Linear Regression model. - X_train, X_test, y_train, y_test: Training and testing sets. - y_pred (array): Predictions for the test set. - mse (float): Mean squared error of the model predictions. # Read the dataset df = pd.read_csv(file_path) # Separate features and target X = df.drop(target_column, axis=1) y = df[target_column] # Split dataset into training and testing subsets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state) # Create and train the Linear Regression model model = LinearRegression() model.fit(X_train, y_train) # Predict on test data y_pred = model.predict(X_test) # Compute mean squared error mse = mean_squared_error(y_test, y_pred) return model, X_train, X_test, y_train, y_test, y_pred, mse"},{"question":"Write a function that merges two given sorted lists into one new sorted list. The input lists can contain integers in any order but are sorted individually in ascending order. Once merged, the new list should also be sorted in ascending order. The function should handle lists of different lengths gracefully and should not use any built-in sort functions. # Example ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8, 9, 10] merged_list = merge_sorted_lists(list1, list2) print(merged_list) ``` Output ``` [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ```","solution":"def merge_sorted_lists(list1, list2): Merges two given sorted lists into one new sorted list. merged_list = [] i = j = 0 # Merge the lists while there are elements in both while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Create a function in Python called `find_longest_substring_without_repeating_characters` that takes a single string `s` as input and returns the length of the longest substring that does not contain any repeating characters. Implement it without using extra libraries, focusing on an efficient algorithmic approach. Here\'s an example input and the expected output: Example: Input: s = \\"abrkaabcdefghijjxxx\\" Output: 10","solution":"def find_longest_substring_without_repeating_characters(s): Returns the length of the longest substring without repeating characters. char_index_map = {} start = 0 max_length = 0 for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a function that takes a positive integer n and returns a list of n random integers in the range from 1 to 100. Ensure that no integers in the list are repeated. Use the random module for generating random integers. If n exceeds 100, raise a ValueError with the message “n should not be greater than 100”. import random def generate_unique_random_list(n): if n > 100: raise ValueError(\\"n should not be greater than 100\\") random_list = random.sample(range(1, 101), n) return random_list","solution":"import random def generate_unique_random_list(n): Generate a list of n unique random integers from 1 to 100. Parameters: n (int): The number of integers to generate. Returns: list: A list of n unique random integers from 1 to 100. Raises: ValueError: If n is greater than 100. if n > 100: raise ValueError(\\"n should not be greater than 100\\") random_list = random.sample(range(1, 101), n) return random_list"},{"question":"Create a function that takes a non-negative integer and returns an array of numbers representing its digits in reverse order. If the input is 0, the output should be an array containing a single digit [0]. For example, given the input 12345, the output should be [5, 4, 3, 2, 1]. Your solution should have a time complexity of O(n), where n is the number of digits in the integer.","solution":"def reverse_digits(n): Returns the digits of a non-negative integer in reverse order. Args: n (int): A non-negative integer. Returns: List[int]: A list of digits in reverse order. return [int(digit) for digit in str(n)][::-1]"},{"question":"Create a Python function that receives a list of integers. For each element in the list, perform the following operations: 1. Convert the integer to its hexadecimal equivalent. 2. Count the number of `1`s in the binary representation of this hexadecimal number. 3. Calculate the sum of these counts for all elements in the list. The function should return this total sum. For example, if given [10, 15], where 10 in hexadecimal is \'a\' (which is 1010 in binary, containing 2 \'1\'s) and 15 in hexadecimal is \'f\' (which is 1111 in binary, containing 4 \'1\'s), the function should return 6. Make sure to use only standard libraries, implementing the number conversions and operations from scratch whenever necessary. Additionally, provide a short explanation of your code and its time complexity. For example: mylist: [10, 15] Output: 6","solution":"def count_ones_in_binary_of_hex(num): Takes an integer number and returns the number of 1\'s in the binary representation of its hexadecimal equivalent. # Convert to hexadecimal and remove \'0x\' prefix hex_num = hex(num)[2:] # Convert each hexadecimal digit to its binary form and count the \'1\'s one_count = sum(bin(int(digit, 16)).count(\'1\') for digit in hex_num) return one_count def sum_of_ones_in_hex_binary(lst): Takes a list of integers, converts each to its hexadecimal equivalent, counts the number of 1\'s in its binary representation, and returns the sum of these counts for all elements in the list. total_ones = sum(count_ones_in_binary_of_hex(num) for num in lst) return total_ones"},{"question":"Create a function that takes a string as input and returns the most frequent character in the string. If there is a tie for the most frequent character, return the character that appears first in the string. Ignore case and non-alphabetic characters. Write the program in any language of your choice and include a snippet of incorrect code, explaining why it doesn\'t solve the problem correctly. Provide all steps and relevant explanations for the logic you\'ve used to solve the problem.","solution":"def most_frequent_character(s): Returns the most frequent character in the string s. If there is a tie, returns the character that appears first in the string. Ignores case and non-alphabetic characters. from collections import Counter # Clean the string: remove non-alphabetic characters and convert to lowercase cleaned_string = \'\'.join(filter(str.isalpha, s)).lower() # Count frequencies of characters counter = Counter(cleaned_string) # Find the most frequent character max_frequency = max(counter.values(), default=0) # find the highest frequency for char in s.lower(): # iterate through original string lowered, in original order if char.isalpha() and counter[char] == max_frequency: return char return \\"\\" # in case there\'s no alphabetic character in the string"},{"question":"Write a function in Python that takes an array of integers and an integer `target` value, and returns a list of unique pairs of numbers from the array that sum up to the `target` value. Ensure that the output list contains no duplicate pairs and each pair should be sorted in ascending order. Also, the overall list of pairs should be sorted in ascending order based on the first number of each pair. If no such pairs exist, return an empty list. The function should have a time complexity of O(n log n) or better. # Example ```python def find_pairs(nums, target): # Your code here # Sample Input nums = [2, 4, 3, 5, 7, 8, -1, 1] target = 6 # Sample Output [(1, 5), (-1, 7), (2, 4)] ``` # Constraints - The input array can be of size up to 10^5. - Integers in the array can range from -10^9 to 10^9. - Each pair in the result list must be unique. - Each pair should be presented in ascending order.","solution":"def find_pairs(nums, target): Finds all unique pairs in the array `nums` that sum up to `target`. nums.sort() pairs = set() left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: pairs.add((nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 # Convert the set to a sorted list of unique pairs return sorted(pairs)"},{"question":"Craft a Python function that accepts a list of integers and returns a new list containing only the prime numbers from the original list. The result list should be sorted in descending order. For example, given the input list [10, 3, 5, 8, 15, 2], your function should return [5, 3, 2].","solution":"def is_prime(n): Helper function to check if a number is a prime number. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def filter_and_sort_primes(lst): Filters the prime numbers from the list and sorts them in descending order. primes = [num for num in lst if is_prime(num)] primes.sort(reverse=True) return primes"},{"question":"You are given a CSV file containing data on bike sharing usage in a city. The dataset includes columns such as \'datetime\', \'season\', \'weather\', \'temp\', \'humidity\', \'windspeed\', \'casual\', \'registered\', and \'count\'. Using pandas and matplotlib, perform the following tasks: 1. Load the dataset into a pandas DataFrame and ensure that the \'datetime\' column is parsed as a datetime object. 2. Create a new column, \'hour\', that extracts the hour from the \'datetime\' column. 3. Generate a line plot showing the average \'count\' of bike rentals for each hour of the day. Ensure the x-axis represents the hour, and the y-axis represents the average count of bike rentals. 4. Enhance the plot by adding separate lines that show the average \'casual\' and \'registered\' counts for each hour of the day. 5. Customize the plot with appropriate labels, title, and legend.","solution":"import pandas as pd import matplotlib.pyplot as plt def load_and_process_data(csv_path): Load the dataset, parse \'datetime\' column as datetime object, and add \'hour\' column. df = pd.read_csv(csv_path, parse_dates=[\'datetime\']) df[\'hour\'] = df[\'datetime\'].dt.hour return df def plot_bike_rentals_by_hour(df): Generate and display a line plot showing the average \'count\', \'casual\', and \'registered\' bike rentals for each hour of the day. hourly_data = df.groupby(\'hour\').mean() plt.figure(figsize=(10, 6)) plt.plot(hourly_data.index, hourly_data[\'count\'], label=\'Total Count\', color=\'blue\', marker=\'o\') plt.plot(hourly_data.index, hourly_data[\'casual\'], label=\'Casual Count\', color=\'green\', marker=\'s\') plt.plot(hourly_data.index, hourly_data[\'registered\'], label=\'Registered Count\', color=\'red\', marker=\'^\') plt.xlabel(\'Hour of the day\') plt.ylabel(\'Average number of bike rentals\') plt.title(\'Average Number of Bike Rentals by Hour\') plt.legend() plt.grid(True) plt.xticks(hourly_data.index) plt.show()"},{"question":"In a programming environment of your choice, you are required to create a class named `TreasurePath` that includes a method to solve the following problem. There exists a grid of dimensions `m x n` representing a map, where each cell contains an integer denoting the amount of treasure present. You start at the top-left cell of the grid (0,0) and can move either right or down at any point in time. Your goal is to determine the maximum sum of the treasure you can collect by the time you reach the bottom-right cell `(m-1, n-1)`. Your task is to implement the `maxTreasure` method in the `TreasurePath` class, which takes the grid (2D list of integers) as an input and returns the maximum sum of the treasures collected by any path from the top-left to the bottom-right cell. Additionally, the `TreasurePath` class should include an error handling method to manage cases where the input grid dimensions are invalid (non-positive integers for `m` or `n`, or the grid is not well-formed). In such cases, the method should return an error message: \\"Invalid grid dimensions\\". Furthermore, include a test function named `TreasurePathTest` to execute the `maxTreasure` method with both valid and invalid test cases, printing the results. Here is an example for understanding: Given the grid: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The path with the maximum treasure will be 1 → 3 → 5 → 2 → 1, which sums to 12. Therefore, `maxTreasure` should return 12 for this input. Your implementation should consider the following function specifications: - `maxTreasure(grid: List[List[int]]) -> int` - `validateGrid(grid: List[List[int]]) -> str` which handles invalid grid dimensions. - `TreasurePathTest()` to execute the test cases.","solution":"from typing import List class TreasurePath: @staticmethod def validateGrid(grid: List[List[int]]) -> str: if not grid or not all(isinstance(row, list) for row in grid) or not all(isinstance(cell, int) for row in grid for cell in row): return \\"Invalid grid dimensions\\" m = len(grid) n = len(grid[0]) if m <= 0 or n <= 0: return \\"Invalid grid dimensions\\" return \\"\\" @staticmethod def maxTreasure(grid: List[List[int]]) -> int: error_message = TreasurePath.validateGrid(grid) if error_message: return error_message m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Write a function to organize a list of words into a sentence. Ensure each word is separated by a single space and that the first word is capitalized. Punctuation should be minimal but proper: no full stops, commas, or any other unnecessary punctuation should be at the end. For example, converting [\\"this\\", \\"is\\", \\"a\\", \\"test\\"] to \\"This is a test\\" or [\\"hello\\", \\"world\\"] to \\"Hello world\\". Assume the input is a non-empty list of strings. Function Signature: ```python def organize_sentence(words: List[str]) -> str: pass ```","solution":"def organize_sentence(words): This function takes a list of words and organizes them into a sentence. Each word is separated by a single space, and the first word is capitalized. No punctuation is added at the end. Parameters: words (list): A list of strings (words). Returns: str: A sentence constructed from the given words. if not words: return \\"\\" sentence = \' \'.join(words).capitalize() return sentence"},{"question":"Write a Python function called `find_largest_prime` that takes a single integer argument `n` and returns the largest prime number that is less than or equal to `n`. If no such prime exists (i.e., if `n` is less than 2), the function should return `None`. To complete this task, implement a helper function `is_prime` that determines whether a given number is prime. ```python def is_prime(num): # Your code here def find_largest_prime(n): # Your code here ```","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def find_largest_prime(n): Finds the largest prime number less than or equal to n. for i in range(n, 1, -1): if is_prime(i): return i return None"},{"question":"Calculate the median of the union of two sorted arrays. If the length of the combined array is even, return the average of the two middle elements. If it is odd, return the middle element. array1 = [1, 3, 8] array2 = [2, 7, 10, 11] Goal: Write a function that merges the two arrays and finds the median of the merged array.","solution":"def find_median_of_two_sorted_arrays(array1, array2): Returns the median of the union of two sorted arrays. merged_array = sorted(array1 + array2) n = len(merged_array) mid = n // 2 if n % 2 == 0: # even length median = (merged_array[mid - 1] + merged_array[mid]) / 2 else: # odd length median = merged_array[mid] return median"},{"question":"Calculate Minimum Cost to Move Chips Description: You are given an array `position` of even length, where `position[i]` represents the position of the i-th chip. You can move chips any number of times under the following conditions: 1. Move the i-th chip by 2 units: `position[i] -> position[i] + 2` or `position[i] -> position[i] - 2` with 0 cost. 2. Move the i-th chip by 1 unit: `position[i] -> position[i] + 1` or `position[i] -> position[i] - 1` with 1 cost. Return the minimum cost needed to move all chips to the same position. Example 1: Input: position = [1, 2, 3] Output: 1 Explanation: First step: Move the chip at position 1 by 2 units to position 3 with cost 0. Second step: Move the chip at position 2 by 1 unit to position 3 with cost 1. The total cost is 0 + 1 = 1. Example 2: Input: position = [2, 2, 2, 3, 3] Output: 2 Explanation: All chips are already at positions 2 and 3, and we want to move them to the same position. Move the chips from position 3 to position 2 with 1 cost each. The total cost is 1 + 1 = 2. Example 3: Input: position = [1, 1000000000] Output: 1 Explanation: Only one move is really needed to remove the cost, that is, move the chip at position 1 to position 1000000000 with cost 1. Note: - `1 <= position.length <= 100` - `1 <= position[i] <= 10^9`","solution":"def minCostToMoveChips(position): Calculate the minimum cost to move all chips to the same position. # Count how many chips are on even and odd positions odd_count = sum(1 for p in position if p % 2 != 0) even_count = len(position) - odd_count # The minimum cost will be the smaller number of chips on either even or odd positions return min(odd_count, even_count)"},{"question":"Write a function in Python that takes a dictionary as input where the keys are student names and the values are their respective grades. The function should return a list of tuples, each containing a student\'s name and grade, sorted primarily by grades in descending order. If two students have the same grade, they should be sorted alphabetically by their names in ascending order. Ensure the solution has a time complexity of O(n log n).","solution":"def sort_students_by_grade(student_grades): Given a dictionary of student names and grades, return a list of tuples sorted primarily by grades in descending order, and by names in ascending order if grades are the same. :param student_grades: dict: Dictionary with student names as keys and grades as values. :return: list: List of tuples sorted as described above. return sorted(student_grades.items(), key=lambda item: (-item[1], item[0]))"},{"question":"Write a Python program to rotate a square matrix (2D list) by 90 degrees in a clockwise direction. The matrix will have an equal number of rows and columns ranging from 1 to 1000. Additionally, write a function to transpose the matrix first and then reverse each row to achieve the rotation. Example: my_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # Expected Output: # [[7, 4, 1], # [8, 5, 2], # [9, 6, 3]] Your time complexity should be O(n^2) for this task.","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a square matrix (2D list) by 90 degrees in a clockwise direction. Args: matrix (list of list of int): NxN matrix to be rotated. Returns: list of list of int: Rotated matrix. # First, transpose the matrix n = len(matrix) for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Then, reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"Create an event management system in Python to manage various events and participants. The system should allow you to add, update, and delete events, each with properties like Event Name, Event ID, Event Date, and Event Organizer. Additionally, implement the following functionalities: 1. Allow multiple participants to register for each event, with attributes like Participant Name, Participant ID, and Participant Email. 2. Enable querying of events based on different criteria (e.g. Event ID, Event Name, Event Date) and return the results sorted by specified filters (e.g. chronological order of Event Date, alphabetical order of Event Name). 3. Provide functionality to add, update, and remove participants from events. 4. Implement a feature to search for events by keywords (e.g. keywords in the event name or organizer). 5. Ensure that the system can handle and maintain data integrity during concurrent participant registrations and cancellations. 6. Include a mechanism for exporting event summaries and participant lists for backup purposes or further analysis.","solution":"import datetime import threading from typing import List, Dict class Participant: def __init__(self, participant_id: int, name: str, email: str): self.participant_id = participant_id self.name = name self.email = email class Event: def __init__(self, event_id: int, name: str, date: datetime.date, organizer: str): self.event_id = event_id self.name = name self.date = date self.organizer = organizer self.participants = [] def add_participant(self, participant: Participant): self.participants.append(participant) def remove_participant(self, participant_id: int): self.participants = [p for p in self.participants if p.participant_id != participant_id] def update_participant(self, participant_id: int, name: str = None, email: str = None): for p in self.participants: if p.participant_id == participant_id: if name: p.name = name if email: p.email = email class EventManagementSystem: def __init__(self): self.events = [] self.lock = threading.Lock() def add_event(self, event: Event): with self.lock: self.events.append(event) def update_event(self, event_id: int, name: str = None, date: datetime.date = None, organizer: str = None): with self.lock: for event in self.events: if event.event_id == event_id: if name: event.name = name if date: event.date = date if organizer: event.organizer = organizer def delete_event(self, event_id: int): with self.lock: self.events = [e for e in self.events if e.event_id != event_id] def query_events(self, **criteria): results = self.events for key, value in criteria.items(): results = [e for e in results if getattr(e, key) == value] return results def search_events(self, keyword: str): return [event for event in self.events if keyword in event.name or keyword in event.organizer] def export_event_summary(self): summary = [] for event in self.events: summary.append({ \\"event_id\\": event.event_id, \\"name\\": event.name, \\"date\\": event.date, \\"organizer\\": event.organizer, \\"participants\\": [{\\"participant_id\\": p.participant_id, \\"name\\": p.name, \\"email\\": p.email} for p in event.participants] }) return summary def add_participant_to_event(self, event_id: int, participant: Participant): with self.lock: for event in self.events: if event.event_id == event_id: event.add_participant(participant) break def remove_participant_from_event(self, event_id: int, participant_id: int): with self.lock: for event in self.events: if event.event_id == event_id: event.remove_participant(participant_id) break def update_participant_in_event(self, event_id: int, participant_id: int, name: str = None, email: str = None): with self.lock: for event in self.events: if event.event_id == event_id: event.update_participant(participant_id, name, email) break"},{"question":"You are given a list of strings representing different URLs. Write a Python function `group_urls_by_domain` that takes this list as input and groups the URLs by their domain. The function should return a dictionary where the keys are the domain names and the values are lists of URLs that belong to that domain. For simplicity, consider only the domain part that comes right after the \'//\' and before any subsequent \'/\'. If a URL doesn\'t follow this pattern, it should be grouped under the key \'unknown\'. # Function Signature ```python def group_urls_by_domain(urls: list) -> dict: pass ``` # Example ```python input_urls = [ \\"https://www.example.com/path/to/page\\", \\"http://example.com/another/path\\", \\"https://www.google.com/\\", \\"ftp://files.server.com/download\\", \\"www.server.com/path/to/resource\\", \\"https://example.com/yet/another/path\\" ] output = group_urls_by_domain(input_urls) print(output) ``` # Expected Output ```python { \\"www.example.com\\": [\\"https://www.example.com/path/to/page\\"], \\"example.com\\": [\\"http://example.com/another/path\\", \\"https://example.com/yet/another/path\\"], \\"www.google.com\\": [\\"https://www.google.com/\\"], \\"files.server.com\\": [\\"ftp://files.server.com/download\\"], \\"www.server.com\\": [\\"www.server.com/path/to/resource\\"], \\"unknown\\": [] } ``` # Constraints - You can assume that all input URLs are valid strings. - You can assume the list of URLs is not empty. - The function should handle various URL schemes (http, https, ftp, etc.). - The function will be case-sensitive (i.e., \'Example.com\' and \'example.com\' are considered different domains).","solution":"def group_urls_by_domain(urls): Groups URLs by their domain. Args: urls (list): A list of URLs. Returns: dict: A dictionary with domain names as keys and lists of URLs as values. from urllib.parse import urlparse import re domain_dict = {} unknown = [] for url in urls: parsed_url = urlparse(url) if parsed_url.netloc: domain = parsed_url.netloc else: match = re.match(r\'^(https?|ftp)://\', url) domain = \'unknown\' if not match else match.group(0) if domain in domain_dict: domain_dict[domain].append(url) else: domain_dict[domain] = [url] return domain_dict"},{"question":"Write a function `reverse_words_order_and_swap_cases` that takes a string `s` as input. The function should return a new string where: 1. The order of the words is reversed. 2. Each letter\'s case is swapped, i.e., all uppercase letters should become lowercase and vice versa. # Example: ```python # Example input s = \\"Hello World\\" # Example output result = reverse_words_order_and_swap_cases(s) print(result) # Output: \\"wORLD hELLO\\" ``` # Explanation: - The order of words \\"Hello\\" and \\"World\\" is reversed to \\"World Hello\\". - The case of each letter is swapped to get \\"wORLD hELLO\\". # Constraints: - The input string will contain only alphabetic characters and spaces. - There will be no leading, trailing, or multiple spaces between words.","solution":"def reverse_words_order_and_swap_cases(s): Reverses the order of words in a string and swaps the case of each letter. :param s: Input string containing words. :return: A new string with the order of words reversed and the cases swapped. # Split the string into words words = s.split() # Reverse the order of words reversed_words = words[::-1] # Join the words back into a string reversed_string = \' \'.join(reversed_words) # Swap the cases of each letter swapped_case_string = reversed_string.swapcase() return swapped_case_string"},{"question":"Design a function that takes a string representing a mathematical expression in infix notation and returns the result of evaluating the expression. The expression contains only non-negative integers and the operators \'+\', \'-\', \'*\', \'/\'. Parentheses may be used to change the order of operations. The division operator (/) represents integer division, i.e., 5/2 evaluates to 2. For instance, the expression \\"3+(2*2)\\" should evaluate to 7. Implement this by correcting and completing the provided function skeleton: def evaluate_expression(expression: str) -> int:","solution":"import operator def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression in infix notation and returns the result. The expression contains only non-negative integers and the operators \'+\', \'-\', \'*\', \'/\'. Parentheses may be used to change the order of operations. The division operator (/) represents integer division. def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_op(a, b, op): operations = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.floordiv } return operations[op](a, b) def to_tokens(expression): tokens = [] value = \'\' for char in expression: if char.isdigit(): value += char else: if value: tokens.append(value) value = \'\' if char.strip(): tokens.append(char) if value: tokens.append(value) return tokens def evaluate(tokens): values = [] ops = [] def apply_ops_until_opening_parenthesis(): while ops and ops[-1] != \'(\': right = values.pop() left = values.pop() op = ops.pop() values.append(apply_op(left, right, op)) ops.pop() # removing \'(\' i = 0 while i < len(tokens): if tokens[i].isdigit(): values.append(int(tokens[i])) elif tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i] == \')\': apply_ops_until_opening_parenthesis() else: while (ops and ops[-1] != \'(\' and precedence(ops[-1]) >= precedence(tokens[i])): right = values.pop() left = values.pop() op = ops.pop() values.append(apply_op(left, right, op)) ops.append(tokens[i]) i += 1 while ops: right = values.pop() left = values.pop() op = ops.pop() values.append(apply_op(left, right, op)) return values[0] tokens = to_tokens(expression) return evaluate(tokens)"},{"question":"Write a Python function that takes in a list of dictionaries and returns the total count of a specific key across all dictionaries. The key to be counted is passed as a second parameter to the function. Example input could be: ```python input_list = [{\'a\': 1, \'b\': 2}, {\'a\': 2, \'c\': 4}, {\'b\': 1, \'a\': 3}] key = \'a\' ``` The output should be the sum of all values associated with key \'a\' across the list of dictionaries.","solution":"def count_key_occurrences(input_list, key): Returns the total count of a specific key across all dictionaries in the input list. Parameters: input_list (list): A list of dictionaries to be searched. key (str): The key whose values are to be counted. Returns: int: The total sum of the values associated with the specified key. total_count = 0 for dictionary in input_list: if key in dictionary: total_count += dictionary[key] return total_count"},{"question":"Given a string, write a function named \\"substring_count\\" that finds and returns the number of times a particular substring appears in the given string. The function will take two parameters: the original string and the substring to search for. You are also given the following piece of code that is supposed to solve the problem, but contains errors. Your task is to identify the errors, correct them and implement the solution. ```python def substring_count(main_str, sub_str): count = 0 for i in range(len(main_str) - len(sub_str)): if main_str[i:i+len(sub_str)] == sub_str: count += 1 return count print(substring_count(\\"ababcabcabc\\", \\"abc\\")) ``` The above code attempts to count the number of times the substring \\"abc\\" appears in the string \\"ababcabcabc\\". However, it doesn\'t work as expected. Expected output: 3","solution":"def substring_count(main_str, sub_str): Returns the number of times the substring appears in the given string. count = 0 for i in range(len(main_str) - len(sub_str) + 1): if main_str[i:i+len(sub_str)] == sub_str: count += 1 return count # Example usage: # print(substring_count(\\"ababcabcabc\\", \\"abc\\")) # Expected output: 3"},{"question":"Given a list of sentences where each sentence is a string, generate a summary – a new sentence comprised of the first word from each sentence in the list. If the first word is a number, skip it. If the first word starts with a vowel (a, e, i, o, u), repeat that word twice. Example: ```python def generate_summary(sentences: list) -> str: Generate a summary sentence from the first word of each sentence in the list. Skip any numbers and repeat words starting with a vowel. Args: sentences: list of strings Returns: str: The summary sentence >>> generate_summary([\'Alpha beta\', \'3rd place\', \'elephant tricks\', \'untold stories\', \'234 is the start\']) \'Alpha Alpha elephant elephant untold untold\' >>> generate_summary([\'All awesome apps\', \'2 are great\', \'Online tools\', \'useful utilities\']) \'All All Online Online useful useful\' # Write your code below this line. ```","solution":"def generate_summary(sentences: list) -> str: Generate a summary sentence from the first word of each sentence in the list. Skip any numbers and repeat words starting with a vowel. Args: sentences: list of strings Returns: str: The summary sentence result = [] vowels = \'aeiouAEIOU\' for sentence in sentences: words = sentence.split() if words: first_word = words[0] if first_word[0].isdigit(): continue elif first_word[0] in vowels: result.extend([first_word, first_word]) else: result.append(first_word) return \' \'.join(result)"},{"question":"Create a function `validate_braces` that checks if the string input has valid pairs of parentheses, brackets, and curly braces. The input string will contain only characters: \'(\', \')\', \'[\', \']\', \'{\', \'}\', and alphanumeric characters. The function should return `True` if the braces are validly paired and nested, and `False` otherwise. # Requirements: 1. The function should ignore alphanumeric characters and only consider the parentheses, brackets, and curly braces. 2. A valid sequence of braces will: - Open and close in the correct order. - Have all opened braces closed. - An empty input should be considered as valid. 3. You are not allowed to use any external libraries; only standard Python should be used. # Examples: input: \\"a(b)c[d]{e}\\" output: True input: \\"{[a+b]*(c+d)}\\" output: True input: \\"([)]\\" output: False # Template: ```python def validate_braces(s: str) -> bool: # Implement your solution here pass # Test Cases print(validate_braces(\\"a(b)c[d]{e}\\")) # Expected output: True print(validate_braces(\\"{[a+b]*(c+d)}\\")) # Expected output: True print(validate_braces(\\"([)]\\")) # Expected output: False print(validate_braces(\\"([])\\")) # Expected output: True print(validate_braces(\\"\\")) # Expected output: True ``` # Additional Task: Additionally, explain your approach and the time complexity of your solution.","solution":"def validate_braces(s: str) -> bool: stack = [] matching_brace = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_brace.values(): stack.append(char) elif char in matching_brace.keys(): if stack and stack[-1] == matching_brace[char]: stack.pop() else: return False return not stack"},{"question":"Analyze the following function and explain how it sorts a list of integers in place. Mention any particular sorting algorithm it employs and discuss its time complexity. def sortNumbers(arr): for i in range(len(arr)): for j in range(len(arr)-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j]","solution":"def sortNumbers(arr): Sorts a list of integers in place using the Bubble Sort algorithm. Args: arr (list): List of integers to sort. Returns: None n = len(arr) for i in range(n): for j in range(n - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j]"},{"question":"Develop a function that accepts an array of integers and returns the longest contiguous subarray whose sum is equal to a given target. The function should explore all possible subarrays in search of the one with the maximum length, which meets the criterion. If there is no such subarray, an empty array should be returned. Below is an exemplar of the expected function invocations and anticipated outcomes: Examples: ``` python # Example function signature in Python def longest_subarray_with_sum(nums, target): # Your code here # Examples of expected function output print(longest_subarray_with_sum([1, -1, 5, -2, 3], 3)) # Output: [1, -1, 5, -2] print(longest_subarray_with_sum([-2, -1, 2, 1], 1)) # Output: [-1, 2] print(longest_subarray_with_sum([1, 2, 3], 0)) # Output: [] ```","solution":"def longest_subarray_with_sum(nums, target): Returns the longest contiguous subarray whose sum is equal to the target. If there is no such subarray, returns an empty array. sum_map = {0: -1} current_sum = 0 max_length = 0 subarray_start = -1 for index, num in enumerate(nums): current_sum += num if current_sum - target in sum_map: if index - sum_map[current_sum - target] > max_length: max_length = index - sum_map[current_sum - target] subarray_start = sum_map[current_sum - target] + 1 if current_sum not in sum_map: sum_map[current_sum] = index if max_length == 0: return [] return nums[subarray_start:subarray_start + max_length]"},{"question":"Write a function `merge_sorted_arrays` that takes two sorted arrays of integers as input and returns a single sorted array by merging the input arrays. The function should maintain the sorted order in the resulting array. Example: ```python def merge_sorted_arrays(arr1, arr2): # Your code here # Test cases print(merge_sorted_arrays([1, 3, 5], [2, 4, 6])) # Output: [1, 2, 3, 4, 5, 6] print(merge_sorted_arrays([1, 1, 3], [1, 4, 5])) # Output: [1, 1, 1, 3, 4, 5] print(merge_sorted_arrays([], [2, 3, 4])) # Output: [2, 3, 4] print(merge_sorted_arrays([1, 2, 3], [])) # Output: [1, 2, 3] print(merge_sorted_arrays([], [])) # Output: [] ``` Constraints: - All input integers will be in the range of -10^6 to 10^6. - The length of each input array will be in the range of [0, 10^4]. - No built-in sorting functions should be used directly to sort the merged array.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list of int): First sorted list of integers. arr2 (list of int): Second sorted list of integers. Returns: list of int: Merged sorted list of integers. merged_array = [] i = 0 j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a Python function `merge_and_sort_dicts(dict1, dict2)` that takes in two dictionaries `dict1` and `dict2`, each containing string keys and integer values. The function should merge the two dictionaries by combining the values of any common keys and then return a new dictionary with all key-value pairs sorted in descending order of their values. If two keys have the same value, they should be sorted in ascending order of the keys alphabetically. Provide an example illustrating your solution.","solution":"def merge_and_sort_dicts(dict1, dict2): Merges two dictionaries by combining values of any common keys and sorts the resulting dictionary by values in descending order. If values are the same, sorts keys in ascending order alphabetically. # Combine the dictionaries merged_dict = dict1.copy() for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value else: merged_dict[key] = value # Sort the dictionary by values in descending order, and by keys in ascending order if values are the same sorted_dict = dict(sorted(merged_dict.items(), key=lambda item: (-item[1], item[0]))) return sorted_dict"},{"question":"Write a function that, given a list of integers, returns the list sorted in non-decreasing order. However, any negative numbers should remain in their original positions. Your solution should maintain the relative order of the positive numbers and zeroes. The input list can have at most 1000 elements. For example: - Input: [3, -1, 4, 1, -5, -9, 2] - Output: [1, -1, 2, 3, -5, -9, 4] - Input: [-1, -2, -3, -4] - Output: [-1, -2, -3, -4] Write the function `sorted_keeping_negatives` which accepts a list of integers and returns the sorted list as described. ```python def sorted_keeping_negatives(nums): # Your solution here # Example usage: # sorted_keeping_negatives([3, -1, 4, 1, -5, -9, 2]) ```","solution":"def sorted_keeping_negatives(nums): Returns a list sorted in non-decreasing order, while keeping negative numbers in their original positions. # Extract the indices and values of the non-negative numbers non_negatives = [(idx, num) for idx, num in enumerate(nums) if num >= 0] # Sort the non-negative values while keeping their original indices sorted_non_negatives = sorted(non_negatives, key=lambda x: x[1]) # Place the sorted non-negative values back into their original positions result = nums[:] for (idx, _), (_, val) in zip(non_negatives, sorted_non_negatives): result[idx] = val return result"},{"question":"Write a function that takes a string containing a mathematical expression with integers and the plus (+) and minus (-) operators (e.g., \\"12+34-5+67\\") and returns the result of the equation. Assume there are no spaces and the expression is always valid. For example, given \\"12+34-5+67\\", the function should return 108.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string containing integers and the plus (+) and minus (-) operators and returns the result. total = 0 current_number = 0 operator = \'+\' for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: if operator == \'+\': total += current_number elif operator == \'-\': total -= current_number operator = char current_number = 0 # To process the last number if operator == \'+\': total += current_number elif operator == \'-\': total -= current_number return total"},{"question":"Write a function that determines if a given string is a valid anagram of another string. The function should consider case sensitivity and ignore non-alphabetic characters. Implement this without using any built-in methods for sorting or external libraries. The function should return `True` if the strings are anagrams, and `False` otherwise.","solution":"def is_anagram(s1, s2): Determines if s1 is an anagram of s2. Case-sensitive and ignores non-alphabetic characters. def filter_and_count(s): count = {} for char in s: if char.isalpha(): if char in count: count[char] += 1 else: count[char] = 1 return count count1 = filter_and_count(s1) count2 = filter_and_count(s2) return count1 == count2"},{"question":"Write a Python program to find all the prime numbers in a given range of integers without using any libraries. Additionally, your program should be able to count the number of prime numbers found in the given range. Your task: 1. Write a function that checks whether a given number is prime. 2. Write a function that returns a list of all prime numbers within a specified range. 3. Write a function that counts the number of prime numbers within a specified range. Test your program using the following input range of integers: 10 to 50","solution":"def is_prime(n): Determines if the given number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_in_range(start, end): Returns a list of all prime numbers in the given range [start, end). primes = [] for number in range(start, end): if is_prime(number): primes.append(number) return primes def count_primes_in_range(start, end): Returns the count of prime numbers in the given range [start, end). return len(find_primes_in_range(start, end))"},{"question":"Create a function `most_frequent_elements` that takes in a list of integers and returns a list of the elements that appear most frequently in the input list. If multiple elements have the same highest frequency, return all of them in ascending order. To add a bit more complexity, you are provided with a flawed sample solution. Identify what is wrong with this code and fix the problem. ```python def most_frequent_elements(nums): frequency = {} for num in nums: if num not in frequency: frequency[num] = 1 else: frequency[num] += 1 max_freq = max(frequency.values()) most_frequent = [key for key, value in frequency.items() if value == max_freq] return most_frequent nums = [1, 3, 2, 2, 3, 4, 5, 2, 3] print(most_frequent_elements(nums)) ``` Note that this incorrect solution should sort the result list in ascending order if multiple elements share the highest frequency.","solution":"def most_frequent_elements(nums): Returns a list of the elements that appear most frequently in the input list. If multiple elements have the same highest frequency, all of them are returned in ascending order. from collections import Counter if not nums: return [] # Count the frequency of each element using Counter frequency = Counter(nums) # Get the maximum frequency max_freq = max(frequency.values()) # List of elements with the maximum frequency most_frequent = [key for key, value in frequency.items() if value == max_freq] # Return the sorted list return sorted(most_frequent)"},{"question":"An inventory application tracks the stock levels of various items. Each item has a unique identifier, a name, and a quantity on hand. The application must be capable of handling updates to the stock levels whenever items are received or sold. Write a Python class to represent an item in the inventory and implement methods to update the stock levels: one method for receiving items (increasing stock) and another for selling items (decreasing stock). Additionally, implement a method that returns the current stock level of an item. If a sell operation tries to reduce stock below zero, an exception should be raised. Provide a sample usage of your class to demonstrate its functionality including exception handling. The class should take as input the item identifier, name, and initial quantity upon instantiation.","solution":"class InventoryItem: def __init__(self, identifier, name, quantity): Initializes an inventory item with a unique identifier, name, and initial quantity. self.identifier = identifier self.name = name self.quantity = quantity def receive(self, amount): Increases the stock level by the amount received. if amount < 0: raise ValueError(\\"Receive amount must be non-negative.\\") self.quantity += amount def sell(self, amount): Decreases the stock level by the amount sold. If the amount to be sold is greater than the available stock, raise an exception. if amount < 0: raise ValueError(\\"Sell amount must be non-negative.\\") if amount > self.quantity: raise ValueError(\\"Cannot sell more than available stock.\\") self.quantity -= amount def get_stock_level(self): Returns the current stock level of the item. return self.quantity # Sample usage try: item = InventoryItem(\'A101\', \'Widget\', 10) item.receive(5) print(f\\"Stock after receiving 5 units: {item.get_stock_level()}\\") item.sell(3) print(f\\"Stock after selling 3 units: {item.get_stock_level()}\\") item.sell(20) # This should raise an exception except ValueError as e: print(f\\"Error: {e}\\")"},{"question":"Write a Python function that accepts a list of integers and returns a list of tuples. Each tuple consists of an integer from the input list and its corresponding Fibonacci value. The Fibonacci value of an integer `n` is defined as the `n`-th Fibonacci number in the sequence, where the 0th and 1st Fibonacci numbers are 0 and 1, respectively. For example, given the input list [0, 1, 2, 3, 4], the output should be [(0, 0), (1, 1), (2, 1), (3, 2), (4, 3)]. Consider edge cases such as an empty list or negative integers and handle them appropriately.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n < 0: raise ValueError(\\"Fibonacci number is not defined for negative integers.\\") elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def list_fibonacci_values(lst): Returns a list of tuples. Each tuple consists of an integer from the input list and its corresponding Fibonacci value. return [(num, fibonacci(num)) for num in lst]"},{"question":"Implement a Python program to manage an employee database. The program should allow adding new employees with their details (ID, name, position, and salary), updating their details, deleting an employee record by ID, and displaying all employee records. The operations should be implemented using functions, and the data should be stored in an appropriate data structure. Ensure the program handles invalid inputs gracefully.","solution":"class EmployeeDatabase: def __init__(self): self.database = {} def add_employee(self, emp_id, name, position, salary): if emp_id in self.database: return \\"Employee ID already exists.\\" self.database[emp_id] = {\\"name\\": name, \\"position\\": position, \\"salary\\": salary} return \\"Employee added successfully.\\" def update_employee(self, emp_id, name=None, position=None, salary=None): if emp_id not in self.database: return \\"Employee not found.\\" if name: self.database[emp_id][\\"name\\"] = name if position: self.database[emp_id][\\"position\\"] = position if salary: self.database[emp_id][\\"salary\\"] = salary return \\"Employee details updated successfully.\\" def delete_employee(self, emp_id): if emp_id not in self.database: return \\"Employee not found.\\" del self.database[emp_id] return \\"Employee deleted successfully.\\" def display_employees(self): return self.database"},{"question":"Write a function `max_repeating_substring(s: str, k: int) -> int` that takes a string `s` and an integer `k`, and returns the length of the longest substring that contains at most `k` distinct characters. The function should handle edge cases where `s` is empty or `k` is zero. Raise a `ValueError` if `k` is negative. **Example:** ```python max_repeating_substring(\\"eceba\\", 2) -> 3 # The substring is \\"ece\\" with 2 distinct characters max_repeating_substring(\\"aa\\", 1) -> 2 # The substring is \\"aa\\" with 1 distinct character max_repeating_substring(\\"aabbcc\\", 1) -> 2 # The substring is \\"aa\\", \\"bb\\" or \\"cc\\" with 1 distinct character max_repeating_substring(\\"\\", 2) -> 0 # Edge case: empty string ``` **Constraints:** - The input string `s` can include letters and is case-sensitive. - The value of `k` is an integer where `0 <= k <= len(s)`. - Time complexity requirement should be O(n), where n is the length of the string `s`.","solution":"def max_repeating_substring(s: str, k: int) -> int: Returns the length of the longest substring that contains at most k distinct characters. Raise ValueError if k is negative. if k < 0: raise ValueError(\\"k must be a non-negative integer\\") n = len(s) if n == 0 or k == 0: return 0 char_count = {} max_len = 0 left = 0 # Expand the sliding window for right in range(n): char = s[right] char_count[char] = char_count.get(char, 0) + 1 # Contract the sliding window until we have at most k distinct characters while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You have been given the following Python code snippet that is supposed to remove duplicate numbers from a list while maintaining the order of their first occurrence. However, it has some errors preventing it from working correctly. Your task is to debug the code and ensure it functions as intended. ```python class Solution: def removeDuplicates(self, nums): Given a list of integers, remove the duplicates in-place such that each element appears only once and returns the new list. Do not allocate extra space for another list, you must do this by modifying the input list in-place with O(1) extra memory. Parameters: nums (List[int]): The list of integers from which you need to remove duplicates. Returns: List[int]: The list after removing duplicates while maintaining order. index_dict = {} # Dictionary to store the index of each number unique_list = [] # Iterate over elements to construct the unique list for num in nums: if num not in index_dict: unique_list.append(num) index_dict[num] = True # Replace the elements of the original list with unique elements for i in range(len(unique_list)): nums[i] = unique_list[i] # Trim the original list to match the length of the unique_list while len(nums) > len(unique_list): nums.pop() return nums # Example Usage: sol = Solution() nums = [1, 2, 3, 1, 2, 4, 5, 3] print(sol.removeDuplicates(nums)) # Output should be [1, 2, 3, 4, 5] ``` **Explanation:** - Analyze the provided code to understand its logic. - Correct any syntactical, logical, or runtime errors present in this code snippet. - Ensure that the `removeDuplicates` function removes duplicate numbers from the list while maintaining the order of their first occurrence without using extra space for another list. - Follow the given constraints and comments to accurately address the task. **Important Note:** You cannot create a new list to hold unique elements; the modification must be done in-place in the original list, and only O(1) extra memory space can be used.","solution":"class Solution: def removeDuplicates(self, nums): Given a list of integers, remove the duplicates in-place such that each element appears only once and returns the new list. Do not allocate extra space for another list; you must do this by modifying the input list in-place with O(1) extra memory. Parameters: nums (List[int]): The list of integers from which you need to remove duplicates. Returns: List[int]: The list after removing duplicates while maintaining order. i = 0 # Initialize the pointer for the non-duplicate elements seen = set() for j in range(len(nums)): if nums[j] not in seen: seen.add(nums[j]) nums[i] = nums[j] i += 1 # Remove the remaining elements after the unique elements while len(nums) > i: nums.pop() return nums # Example Usage: sol = Solution() nums = [1, 2, 3, 1, 2, 4, 5, 3] print(sol.removeDuplicates(nums)) # Output should be [1, 2, 3, 4, 5]"},{"question":"Create a function `rearrange_string` that transforms a given string according to the following rules: - All alphabetic characters should be moved to the start of the string, maintaining their relative order. - All digits should be moved to the end of the string, maintaining their relative order. - Any other characters (including spaces, punctuation, etc.) should be removed. Implement the function in Python. Function Signature: `def rearrange_string(s: str) -> str:` # Example Input: \\"a1b2c3!!\\" Output: \\"abc123\\" Input: \\"hello world!123\\" Output: \\"helloworld123\\" # Constraints - The input string will have a maximum length of 1000 characters. - The string can include any printable ASCII characters.","solution":"def rearrange_string(s: str) -> str: Transforms a given string by moving all alphabetic characters to the start of the string, maintaining their relative order, followed by all digits, maintaining their relative order. Any other characters are removed. letters = [] digits = [] for char in s: if char.isalpha(): letters.append(char) elif char.isdigit(): digits.append(char) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"Design a function in Python that takes two sorted lists and merges them into a single sorted list. Avoid using built-in sorting functions. Example: ```python list1 = [1, 3, 5] list2 = [2, 4, 6] merge_sorted_lists(list1, list2) # should return [1, 2, 3, 4, 5, 6] ``` Guidelines: 1. The input lists are already sorted in ascending order. 2. Your function should iterate through both lists and merge them in a single pass. 3. Consider edge cases such as one of the lists being empty. 4. Aim for a time complexity of O(n).","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1, list2: List of integers sorted in ascending order. Returns: A single merged list sorted in ascending order. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements if any merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) return merged_list"},{"question":"Design and implement a system that detects and classifies anomalies in a series of time-stamped transactions using Python and scikit-learn. The system should be able to read data from a CSV file containing transaction details including \'timestamp\', \'amount\', \'category\', etc. Your task includes preprocessing the data, selecting appropriate features, and applying an anomaly detection algorithm (e.g., Isolation Forest). Additionally, the system should provide a mechanism for continuous learning to update with new transaction data streams. Describe your approach and the rationale behind your choices of data preprocessing techniques, feature selection, and algorithm.","solution":"import pandas as pd from sklearn.ensemble import IsolationForest from sklearn.preprocessing import StandardScaler from datetime import datetime def preprocess_data(df): Preprocess the transaction data. # Convert \'timestamp\' to datetime and extract important features df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) df[\'day\'] = df[\'timestamp\'].dt.day df[\'month\'] = df[\'timestamp\'].dt.month df[\'hour\'] = df[\'timestamp\'].dt.hour # Drop the original timestamp df = df.drop(columns=[\'timestamp\']) # One-hot encode categorical features df = pd.get_dummies(df, columns=[\'category\'], drop_first=True) return df def detect_anomalies(df): Detect anomalies in the transaction data using the IsolationForest algorithm. # Preprocess the data df = preprocess_data(df) # Standardize numerical features scaler = StandardScaler() scaled_features = scaler.fit_transform(df) # Apply Isolation Forest model = IsolationForest(n_estimators=100, contamination=\'auto\', random_state=42) model.fit(scaled_features) # Predict anomalies anomalies = model.predict(scaled_features) # Create an \'anomaly\' column df[\'anomaly\'] = anomalies return df def update_model_with_new_data(df, new_data): Update the model with new transaction data. # Concatenate new data and old data combined_data = pd.concat([df, new_data]) # Re-detect anomalies on the combined dataset result = detect_anomalies(combined_data) return result"},{"question":"Given an array of integers, write a function that finds the maximum product of two integers in the array. You need to ensure that the function handles both positive and negative numbers efficiently. Example Input: [3, 5, -2, 9, -10] Example Output: 90 (the product of -10 and -9)","solution":"def max_product_of_two(nums): Returns the maximum product of two integers from the array nums. if len(nums) < 2: raise ValueError(\\"List must contain at least two integers\\") max1 = max2 = float(\'-inf\') min1 = min2 = float(\'inf\') for num in nums: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Design a function named \'deep_copy_dict\' that takes a dictionary as input and returns a deep copy of the input dictionary. The function should handle dictionaries with nested dictionaries, lists, and other mutable data types. Ensure that changes to the original dictionary do not affect the copied dictionary. Provide several test cases to demonstrate the correctness of your implementation.","solution":"import copy def deep_copy_dict(input_dict): Returns a deep copy of the input dictionary. Handles dictionaries with nested dictionaries, lists, and other mutable data types. :param input_dict: The dictionary to be deep copied :return: A deep copy of the input dictionary return copy.deepcopy(input_dict)"},{"question":"Write a Python function that takes a string and returns all the distinct permutations of that string. The input string may contain repeated characters. The function must handle strings of varying lengths (up to the maximum possible length of a string in Python) without significant performance degradation. To increase the complexity, ensure that the function can efficiently handle cases where the input string contains: - Mixed uppercase and lowercase characters. - Special characters. - Numeric characters. The function should also be optimized to avoid recalculating and generating permutations for the same set of characters multiple times to ensure improved performance. It should be capable of handling edge cases such as empty strings and single character strings. The function should not rely on external libraries, except for standard Python modules, and should include thorough error handling for unexpected input types such as lists, dictionaries, and other non-string types. In the case of non-string input, the function should raise a TypeError. Finally, the function should return the permutations as a sorted list of strings to ensure deterministically ordered results.","solution":"def distinct_permutations(s): Returns all distinct permutations of the input string \'s\'. if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") def permute(s): if len(s) <= 1: return set([s]) permutations = set() for i in range(len(s)): for p in permute(s[:i] + s[i+1:]): permutations.add(s[i] + p) return permutations return sorted(permute(s)) print(distinct_permutations(\\"a\\")) print(distinct_permutations(\\"ab\\")) print(distinct_permutations(\\"aab\\")) print(distinct_permutations(\\"\\"))"},{"question":"Write a Python function that takes a string as input and returns a list of all valid IP addresses that can be formed by inserting three dots into the string. A valid IP address consists of exactly four integers (each ranging from 0 to 255), separated by dots. Each integer must not have leading zeros (unless the integer is 0 itself). For example, given the string \\"25525511135\\", the function should return: [\\"255.255.11.135\\", \\"255.255.111.35\\"]. Ensure your solution efficiently handles longer inputs and avoids generating invalid IP addresses.","solution":"def is_valid(segment): Check if the segment is a valid IP address segment. return int(segment) <= 255 and (segment == \\"0\\" or segment[0] != \\"0\\") def restore_ip_addresses(s): Restore valid IP addresses from a string by inserting three dots. n = len(s) result = [] for i in range(1, min(n, 4)): for j in range(i + 1, min(n, i + 4)): for k in range(j + 1, min(n, j + 4)): if k < n: a, b, c, d = s[:i], s[i:j], s[j:k], s[k:] if is_valid(a) and is_valid(b) and is_valid(c) and is_valid(d): result.append(\\"{}.{}.{}.{}\\".format(a, b, c, d)) return result"},{"question":"Write a function in Python to determine if a given string is a valid identifier in Python syntax. A valid identifier starts with a letter (A-Z or a-z) or an underscore (_) followed by letters, digits (0-9), or underscores. The function should handle various edge cases like empty strings, identifiers starting with digits, and special characters. Additionally, provide inline comments to explain your logic.","solution":"def is_valid_identifier(identifier): Determines if the provided string is a valid Python identifier. Args: identifier (str): The string to be checked. Returns: bool: True if the identifier is valid, False otherwise. # Check if identifier is empty if not identifier: return False # Check if identifier starts with a letter (A-Z, a-z) or an underscore (_) if not (identifier[0].isalpha() or identifier[0] == \'_\'): return False # Check if the rest of the identifier consists of letters, digits, or underscores for char in identifier[1:]: if not (char.isalnum() or char == \'_\'): return False return True"},{"question":"Write a function `find_missing_number` that takes a list of integers representing a sequence of consecutive numbers with exactly one number missing, and returns the missing number. The list will contain no duplicates and will have at least two elements. Example: ```python find_missing_number([1, 2, 3, 5]) # should return 4 find_missing_number([10, 11, 12, 14, 15]) # should return 13 ```","solution":"def find_missing_number(nums): Given a list of integers representing a sequence of consecutive numbers with exactly one number missing, return the missing number. n = len(nums) + 1 expected_sum = n * (nums[0] + nums[-1]) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Given a list of integers, write a function `find_pair_with_sum` that returns a pair of indices (i, j) such that the elements at these indices sum up to a specific target number. If there are multiple pairs that satisfy this condition, return the pair with the smallest index `i`. If no such pair exists, return `None`. # Function Signature ```python def find_pair_with_sum(nums: List[int], target: int) -> Optional[Tuple[int, int]]: pass ``` # Input - `nums`: A list of integers. - `target`: An integer representing the target sum. # Output - A tuple of two integers, representing the indices of the two numbers in the list whose sum equals `target`. If no such pair exists, return `None`. # Example ```python assert find_pair_with_sum([2, 7, 11, 15], 9) == (0, 1) assert find_pair_with_sum([3, 2, 4], 6) == (1, 2) assert find_pair_with_sum([3, 3], 6) == (0, 1) assert find_pair_with_sum([1, 2, 3], 7) == None ``` # Constraints - Each input list can contain both negative and positive integers. - All input integers and the target sum will fit within the limits of a 32-bit integer.","solution":"from typing import List, Optional, Tuple def find_pair_with_sum(nums: List[int], target: int) -> Optional[Tuple[int, int]]: Returns a pair of indices (i, j) such that nums[i] + nums[j] == target. If no such pair exists, return None. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return None"},{"question":"Given a string containing a mixture of both uppercase and lowercase characters, write a function `count_vowels_consonants` that calculates and returns a tuple with the total number of vowels and consonants in the string. You can assume the input string will contain only alphabets and spaces. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase counterparts. Consonants are all other alphabetic characters. 1. Implement the function `count_vowels_consonants(s: str) -> (int, int)` which takes a string `s` as input. 2. Explain how your function handles the input and computes the result. 3. Provide an example input and output for your function. Example: ```python # Example Input s = \\"Hello World\\" # Function call result = count_vowels_consonants(s) # Example Output # (3, 7) # Explanation: There are 3 vowels (e, o, o) and 7 consonants (H, l, l, W, r, l, d) in \\"Hello World\\". ```","solution":"def count_vowels_consonants(s): Calculate the number of vowels and consonants in the given string. Paramegers: s (str): The input string containing alphabetic characters and spaces. Returns: (int, int): A tuple containing the counts of vowels and consonants. vowels = \\"aeiouAEIOU\\" vowel_count = 0 consonant_count = 0 for char in s: if char.isalpha(): if char in vowels: vowel_count += 1 else: consonant_count += 1 return (vowel_count, consonant_count)"},{"question":"Write a Python function named `find_longest_sequence` that takes a string made up of only \'A\'s and \'B\'s. The function should return the length of the longest consecutive sequence of \'A\'s. The string is guaranteed to have at least one \'A\'. For example, if the input string is \\"BAAABBAAAB\\", the function should return 3.","solution":"def find_longest_sequence(s): Returns the length of the longest consecutive sequence of \'A\'s in the string s. max_length = 0 current_length = 0 for char in s: if char == \'A\': current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"You are given a list of integers that represent the heights of buildings in a row. You want to calculate how much rainwater can be trapped between the buildings after a heavy downpour. Write a function to solve this problem. # Function Signature ```python def trap_rain_water(heights: List[int]) -> int: pass ``` # Input - `heights`: A list of non-negative integers representing the height of buildings. (1 <= len(heights) <= 1000, 0 <= heights[i] <= 1000) # Output - An integer representing the total amount of rainwater trapped. # Example ```python assert trap_rain_water([0,1,0,2,1,0,1,3,2,1,2,1]) == 6 assert trap_rain_water([4,2,0,3,2,5]) == 9 ``` # Explanation Example 1: In the array [0,1,0,2,1,0,1,3,2,1,2,1], 6 units of water can be trapped: - Between heights 1 and 2, 1 unit of water. - Between heights 2 and 3, 2 units of water. - Between heights 3 and 2, 1 unit of water. - Between heights 4 and 6, 2 units of water. Example 2: In the array [4,2,0,3,2,5], 9 units of water can be trapped: - Between heights 1 and 3, 3 units of water. - Between heights 2 and 5, 2 units of water. - Between heights 3 and 5, 4 units of water.","solution":"from typing import List def trap_rain_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Given a function that reverses words in a string, identify and fix the issues in the function so that it correctly handles all edge cases such as multiple spaces and punctuation. The function should return a string where the words appear in reverse order but preserves the original spacing and punctuation as much as possible. The erroneous function is as follows: ```python def reverse_words(sentence): words = sentence.split(\\" \\") reversed_sentence = \\" \\".join(words[::-1]) return reversed_sentence # Test the function print(reverse_words(\\"Hello, world! This is a test.\\")) print(reverse_words(\\" Leading and trailing spaces. \\")) print(reverse_words(\\"Multiple spaces between words.\\")) ``` Identify and fix the errors in the above function.","solution":"import re def reverse_words(sentence): Reverses the words in the given sentence while preserving punctuation and spacing. words = re.split(r\'(s+)\', sentence) # Split by whitespace while preserving it in the results reversed_words = words[::-1] # Reverse the list of words and spaces reversed_sentence = \'\'.join(reversed_words) # Join the list back into a string without adding extra spaces return reversed_sentence"},{"question":"Convert the following class written in Python to adhere to PEP 8 standards and ensure proper encapsulation of its attributes: class myclass : def __init__(self,name_value , age_value ): self. name_value =name_value self.age_value= age_value def display( obj): print(\'Name:\', obj. name_value ) print(\'Age:\',obj. age_value ) person = myclass(\\"John\\",30) display(person)","solution":"class MyClass: A class to represent a person with name and age attributes. def __init__(self, name, age): Initializes the name and age attributes. self._name = name self._age = age @property def name(self): return self._name @name.setter def name(self, value): self._name = value @property def age(self): return self._age @age.setter def age(self, value): self._age = value def display_person(obj): Displays the name and age of the person object. print(\'Name:\', obj.name) print(\'Age:\', obj.age) person = MyClass(\\"John\\", 30) display_person(person)"},{"question":"Write a Python function that takes a list of dictionaries, where each dictionary represents an employee with properties: \'name\', \'department\', and \'salary\'. Your function should group the employees by their department and calculate the average salary for each department. Additionally, implement another function that accepts the result of the first function and prints out the department names in alphabetical order along with their corresponding average salaries. Ensure to handle any potential exceptions such as division by zero and validate that the input data adheres to the expected structure. Provide a code snippet that demonstrates the invocation of these functions with a sample list of employee dictionaries.","solution":"from collections import defaultdict def average_salary_by_department(employee_list): Groups employees by their department and calculates the average salary for each department. Args: - employee_list (list of dict): List of dictionaries where each dictionary represents an employee with properties \'name\', \'department\', and \'salary\'. Returns: - dict: A dictionary where the keys are the department names and the values are the average salaries. if not isinstance(employee_list, list): raise ValueError(\\"Input should be a list of dictionaries representing employees.\\") department_salaries = defaultdict(list) for employee in employee_list: if not isinstance(employee, dict) or \'name\' not in employee or \'department\' not in employee or \'salary\' not in employee: raise ValueError(\\"Each employee should be a dictionary with \'name\', \'department\', and \'salary\' keys.\\") department = employee[\'department\'] salary = employee[\'salary\'] if not isinstance(salary, (int, float)): raise ValueError(\\"Salary should be a number.\\") department_salaries[department].append(salary) average_salaries = {} for department, salaries in department_salaries.items(): if salaries: average_salaries[department] = sum(salaries) / len(salaries) return average_salaries def print_sorted_department_salaries(department_salaries): Prints out the department names in alphabetical order along with their corresponding average salaries. Args: - department_salaries (dict): A dictionary where the keys are department names and values are average salaries. if not isinstance(department_salaries, dict): raise ValueError(\\"Input should be a dictionary with department names as keys and average salaries as values.\\") for department in sorted(department_salaries.keys()): print(f\\"Department: {department}, Average Salary: {department_salaries[department]:.2f}\\") # Sample usage employees = [ {\'name\': \'Alice\', \'department\': \'Engineering\', \'salary\': 120000}, {\'name\': \'Bob\', \'department\': \'HR\', \'salary\': 70000}, {\'name\': \'Charlie\', \'department\': \'Engineering\', \'salary\': 110000}, {\'name\': \'David\', \'department\': \'HR\', \'salary\': 75000}, {\'name\': \'Eve\', \'department\': \'Sales\', \'salary\': 90000}, ] average_salaries = average_salary_by_department(employees) print_sorted_department_salaries(average_salaries)"},{"question":"A tropical island is experiencing an infestation of alien species called \'Lycans\' and \'Vamps\'. The government has decided to eradicate both species. They will target each alien strictly following a sequential plan where they can check each region exactly once and eliminate one Lycan or Vamp per day. They receive a complete report about Lycan and Vamp counts for each region of the island in the form of a list of dictionaries, where each dictionary contains two keys: \'Lycans\' and \'Vamps\' with corresponding counts for that region. Your task is to implement a function that will return the total number of days required to eradicate all Lycans and Vamps from the island. # Function Signature ```python def eradicate_aliens(regions: List[Dict[str, int]]) -> int: pass ``` # Input - A list of dictionaries `regions` where each dictionary has two keys \'Lycans\' and \'Vamps\'. - Each key will have a non-negative integer value. - Example: [{\'Lycans\': 5, \'Vamps\': 2}, {\'Lycans\': 3, \'Vamps\': 7}, {\'Lycans\': 1, \'Vamps\': 0}] # Output - An integer representing the total number of days required to eliminate all Lycans and Vamps. # Example ```python assert eradicate_aliens([{\'Lycans\': 5, \'Vamps\': 2}, {\'Lycans\': 3, \'Vamps\': 7}, {\'Lycans\': 1, \'Vamps\': 0}]) == 18 assert eradicate_aliens([{\'Lycans\': 1, \'Vamps\': 1}, {\'Lycans\': 2, \'Vamps\': 5}, {\'Lycans\': 0, \'Vamps\': 0}]) == 9 assert eradicate_aliens([{\'Lycans\': 0, \'Vamps\': 0}, {\'Lycans\': 0, \'Vamps\': 0}, {\'Lycans\': 0, \'Vamps\': 0}]) == 0 ``` # Constraints - The length of `regions` will not exceed 10^4. - Each count of \'Lycans\' and \'Vamps\' will be between 0 and 10^9. # Notes - Consider edge cases such as when all counts are zero.","solution":"from typing import List, Dict def eradicate_aliens(regions: List[Dict[str, int]]) -> int: total_days = 0 for region in regions: total_days += region.get(\'Lycans\', 0) + region.get(\'Vamps\', 0) return total_days"},{"question":"Create a Python program that accepts a list of integers and returns the product of all elements, except the element at the current position for each index. The program should handle possible exceptions like empty lists and lists with only one item. Example: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [5, 0, 2] Output: [0, 10, 0]","solution":"def product_except_self(nums): This function takes a list of integers and returns a list where each element is the product of all elements in the list except the element at the same position. length = len(nums) if length == 0: raise ValueError(\\"The list should not be empty.\\") if length == 1: raise ValueError(\\"The list should contain at least two elements.\\") left_products = [1] * length right_products = [1] * length output = [1] * length for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(length): output[i] = left_products[i] * right_products[i] return output"},{"question":"Create a function that takes a list of integers and returns a new list containing the squares of all the odd numbers from the original list, sorted in descending order. Ensure the function handles an empty list gracefully and does not include any duplicates in the output list. This task checks proficiency in list operations, conditionals, and the ability to manipulate and process numerical data, including ensuring the uniqueness of results. Example: ```python input_list = [1, 2, 3, 4, 5, 3, 1, 7] output_list = process_odd_squares(input_list) # Output: [49, 25, 9, 1] ``` Using the `input_list` above, the algorithm should follow these steps: 1. Identify the odd numbers: [1, 3, 5, 3, 1, 7]. 2. Remove duplicates: [1, 3, 5, 7]. 3. Square the numbers: [1, 9, 25, 49]. 4. Sort them in descending order: [49, 25, 9, 1].","solution":"def process_odd_squares(input_list): Takes a list of integers and returns a new list containing the squares of all the odd numbers from the original list, sorted in descending order without duplicates. Parameters: input_list (list): A list of integers. Returns: list: A list containing the squares of odd numbers in descending order. # Get all odd numbers from the list odd_numbers = [x for x in input_list if x % 2 != 0] # Remove duplicates unique_odd_numbers = list(set(odd_numbers)) # Calculate squares of these numbers squared_odds = [x ** 2 for x in unique_odd_numbers] # Sort squares in descending order return sorted(squared_odds, reverse=True)"},{"question":"Write a program that processes a string and returns a compressed version of the string using the Run-Length Encoding (RLE) algorithm. The function should take a single argument, which is the input string, and it should return the compressed string where sequences of the same character are stored as that character followed by the count of its consecutive occurrences. For example, the input \\"aaabbccca\\" should return \\"a3b2c3a1\\". As an additional challenge, provide a deliberate error in the code that mishandles a specific edge case such as an empty string or a string with no repeating characters. Explain why the error occurs and how to correct it.","solution":"def run_length_encoding(s): Return the run-length encoded string for the input string s. if not s: raise ValueError(\\"Input string is empty\\") encoded_str = \\"\\" count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded_str += s[i - 1] + str(count) count = 1 # Don\'t forget to add the last set of characters encoded_str += s[-1] + str(count) return encoded_str"},{"question":"Design and develop a Python application that efficiently compresses a given string using Run-Length Encoding (RLE). The program should take an input string composed of alphabetical characters and output its compressed form. For sequences of repeated characters, represent each sequence by a single character followed by the number of repetitions. If the compressed string is not shorter than the original string, the program should return the original string. Illustrate with examples to demonstrate the correct functionality. For example: - Input: \\"aabcccccaaa\\" Output: \\"a2b1c5a3\\" - Input: \\"abcdefgh\\" Output: \\"abcdefgh\\"","solution":"def compress_string(s: str) -> str: Compresses a string using Run-Length Encoding (RLE). If the compressed string is not shorter than the original string, return the original string. :param s: The input string to compress. :return: The compressed string or the original string. if not s: return s # Return the string itself if it is empty compressed = [] count = 1 length = len(s) for i in range(1, length): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # Appending the last character and its count compressed.append(s[-1] + str(count)) # Joining the compressed components compressed_string = \'\'.join(compressed) # Return the shorter of the original and compressed string return compressed_string if len(compressed_string) < length else s"},{"question":"Construct a Python utility that accepts a sorted list and a target value, returning the index of the target within the list if found. If the target is not present in the list, your function should return `-1`. The solution should employ a binary search algorithm for optimal performance. Here is a sample list and target to use: numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 7","solution":"def binary_search(numbers, target): Perform a binary search to find the index of target in the sorted list numbers. If target is not found, return -1. left, right = 0, len(numbers) - 1 while left <= right: mid = (left + right) // 2 if numbers[mid] == target: return mid elif numbers[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a Python function named \\"reverse_sentence\\" that takes a string as an input and returns the string with the words in reverse order. For example, if the input string is \\"Hello world from Python\\", the output should be \\"Python from world Hello\\". Ensure that the function handles extra spaces correctly and returns a string with single spaces between words.","solution":"def reverse_sentence(sentence): Reverse the words in a sentence. Parameters: sentence (str): The input string with words. Returns: str: The string with words in reverse order. # Split the sentence by spaces to get the words words = sentence.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words with a single space reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"Write a program that takes a string as input and returns a dictionary where each key is a unique vowel encountered in the string and the value is the sum of the indices where that vowel appears. For this problem, consider the vowels to be \'a\', \'e\', \'i\', \'o\', and \'u\' and consider the string to be case insensitive. For example: If the input string is \\"Hello World\\", the output should be {\'e\': 1, \'o\': 14} because: - \'e\' appears at index 1. - \'o\' appears at indices 4 and 7, giving a sum of 4+7=11.","solution":"def vowel_indices_sum(s): Returns a dictionary where each key is a unique vowel encountered in the string s and the value is the sum of the indices where that vowel appears. The string is considered case insensitive. vowels = \\"aeiou\\" result = {} s = s.lower() for index, char in enumerate(s): if char in vowels: if char in result: result[char] += index else: result[char] = index return result"},{"question":"Incorporate the pandas library in Python. Create a DataFrame object named `data` with two columns, \'A\' and \'B\'. \'A\' should contain integers from 1 to 5, and \'B\' should contain their respective squares. After constructing the DataFrame, add a new column \'C\' which is the sum of columns \'A\' and \'B\'. Finally, filter the DataFrame to display only those rows where the value in column \'C\' is greater than 10.","solution":"import pandas as pd # Create DataFrame data = pd.DataFrame({ \'A\': [1, 2, 3, 4, 5], \'B\': [1, 4, 9, 16, 25] }) # Add column \'C\' data[\'C\'] = data[\'A\'] + data[\'B\'] # Filter rows where \'C\' is greater than 10 filtered_data = data[data[\'C\'] > 10] # Result filtered_data"},{"question":"Create a function that takes an integer, n, and returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 For example: - Input: 6 - Output: 8","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a Python function that takes a list of integers and returns the sum of the elements that are both prime numbers and lie within a given range [min_value, max_value], inclusive. If no such elements exist in the list, return 0. Consider the list may contain negative numbers and non-prime numbers should be ignored. Use appropriate helper functions when necessary.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def sum_primes_in_range(lst, min_value, max_value): Returns the sum of prime numbers within the range [min_value, max_value] from the list. return sum(x for x in lst if is_prime(x) and min_value <= x <= max_value)"},{"question":"Write a Python function that takes a list of integers and an integer k, and returns a list of integers where every element in the original list is repeated k times consecutively. Example: ```python repeat_elements([1, 2, 3], 3) ``` Output: ```python [1, 1, 1, 2, 2, 2, 3, 3, 3] ```","solution":"def repeat_elements(lst, k): Returns a new list where each element of the original list is repeated k times consecutively. Parameters: lst (list): The list of integers. k (int): The number of times each element should be repeated. Returns: list: A new list with each element repeated k times. result = [] for item in lst: result.extend([item] * k) return result"},{"question":"Implement a function in Python to find the k most frequent words in a given list of words. The function should return these words based on their frequencies in descending order. In case of ties, return the words in lexicographical order. You should use a suitable data structure for efficiently solving this problem. Write your solution with proper comments explaining each step. Here\'s the function signature: ```python def top_k_frequent_words(words: List[str], k: int) -> List[str]: pass ``` # Example ```python words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"banana\\"] k = 2 print(top_k_frequent_words(words, k)) # Output: [\\"banana\\", \\"apple\\"] ``` # Constraints - The input list of words will have at least one word and at most 100,000 words. - The length of each word will be between 1 and 100 characters. - The value of k will be between 1 and the number of unique words in the input list.","solution":"from typing import List from collections import Counter import heapq def top_k_frequent_words(words: List[str], k: int) -> List[str]: Returns the k most frequent words in the list of words. In case of tie, the words are returned in lexicographical order. # Count the frequency of each word count = Counter(words) # Use a heap for the top k frequent elements heap = [(-freq, word) for word, freq in count.items()] heapq.heapify(heap) # Extract the k most frequent elements result = [] for _ in range(k): freq, word = heapq.heappop(heap) result.append(word) return result"},{"question":"You are given a dictionary where the keys are product names and the values are their respective prices. Write a Python function `apply_discount` that takes two parameters: a dictionary `products` and a float `discount` (representing the percentage discount to be applied, e.g., 0.10 for a 10% discount). The function should return a new dictionary where each price has been reduced by the given discount. Make sure to round the discounted price to two decimal places. # Example ```python products = { \\"apple\\": 1.00, \\"banana\\": 0.50, \\"orange\\": 0.80 } discount = 0.10 apply_discount(products, discount) ``` **Output:** ```python { \\"apple\\": 0.90, \\"banana\\": 0.45, \\"orange\\": 0.72 } ``` # Constraints - Ensure the function handles empty dictionaries. - The prices are guaranteed to be positive values. - The discount will always be a float between 0 and 1 (inclusive). # Function Signature ```python def apply_discount(products: dict, discount: float) -> dict: ```","solution":"def apply_discount(products: dict, discount: float) -> dict: Applies the given discount to the prices in the products dictionary. Params: - products (dict): A dictionary where keys are product names and values are their prices. - discount (float): The discount to be applied, represented as a float (e.g., 0.10 for a 10% discount). Returns: - dict: A new dictionary with the discounted prices rounded to two decimal places. discounted_products = {} for product, price in products.items(): new_price = round(price * (1 - discount), 2) discounted_products[product] = new_price return discounted_products"},{"question":"Write a function `merge_dictionaries(dict_list)` that takes a list of dictionaries and returns a single dictionary. The function should combine the dictionaries such that if the same key appears in more than one dictionary, the values for that key are added together. If a key appears in only one dictionary, its value should remain the same in the final dictionary. Assume all values are integers. Example Input: ```python dict_list = [{\'a\': 100, \'b\': 200}, {\'b\': 300, \'c\': 400}, {\'a\': 50, \'c\': 80}] ``` Example Output: ```python {\'a\': 150, \'b\': 500, \'c\': 480} ```","solution":"def merge_dictionaries(dict_list): Combines a list of dictionaries into a single dictionary. If the same key appears in more than one dictionary, their values are summed. merged_dict = {} for d in dict_list: for key, value in d.items(): if key in merged_dict: merged_dict[key] += value else: merged_dict[key] = value return merged_dict"},{"question":"Design a Python function that takes a list of words and returns a list of words that can be typed using letters of only one row of a standard QWERTY keyboard. The rows on the keyboard are: - Row 1: \\"qwertyuiop\\" - Row 2: \\"asdfghjkl\\" - Row 3: \\"zxcvbnm\\" The function should be case insensitive, and the output words must maintain their original case. For added complexity, your implementation should also handle scenarios where the input list contains mixed data such as integers, floats, or special characters. These non-word elements should be filtered out, and not affect the function\'s primary objective. Here is a piece of flawed code aimed at solving part of this problem. Identify the errors and improve it to fully meet the requirements: ```python def keyboard_words(words): row1 = set(\\"qwertyuiop\\") row2 = set(\\"asdfghjkl\\") row3 = set(\\"zxcvbnm\\") result = [] for word in words: for letter in word: if letter not in row1 and letter not in row2 and letter not in row3: break else: result.append(word) return result words = [\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"] print(keyboard_words(words)) ``` This code does not filter out non-word elements, and it does not correctly handle case insensitivity. Your task is to enhance the code to fulfill all requirements and create test cases to validate your solution.","solution":"def keyboard_words(words): Returns a list of words that can be typed using letters of only one row of a QWERTY keyboard. Non-word elements are filtered out. The function is case insensitive. row1 = set(\\"qwertyuiop\\") row2 = set(\\"asdfghjkl\\") row3 = set(\\"zxcvbnm\\") rows = [row1, row2, row3] result = [] for word in words: # Filter non-strings if not isinstance(word, str): continue lower_word = word.lower() for row in rows: if all(letter in row for letter in lower_word): result.append(word) break return result"},{"question":"Construct a function that processes an input string and finds the first non-repeating character. If the string contains no unique characters, the function should return a specific message indicating this. Optimize the solution for efficiency both in terms of time and space complexity, and include test cases to demonstrate its effectiveness.","solution":"def first_non_repeating_char(s): Finds the first non-repeating character in the string s. Returns the character if found, otherwise returns a message indicating no unique characters. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \\"No unique characters found\\""},{"question":"Implement a function to check if a given linked list of integers contains a cycle. If a cycle is found, return the node where the cycle begins; otherwise, return null. Ensure the solution has O(n) time complexity and O(1) space complexity. You may assume the linked list is defined as: ```python class ListNode: def __init__(self, x): self.val = x self.next = None ```","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detectCycle(head): Returns the node where the cycle begins. If there is no cycle, return None. if not head or not head.next: return None slow = head fast = head # Move slow by 1 step and fast by 2 steps while fast and fast.next: slow = slow.next fast = fast.next.next # Cycle detected if slow == fast: break # No cycle detected if not fast or not fast.next: return None # Find the entry point of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"How can you handle imbalanced classes in a binary classification machine learning problem using Python? Discuss and implement at least two techniques that can be used to address this issue. Provide code examples to illustrate your approach.","solution":"from sklearn.utils import resample from sklearn.ensemble import RandomForestClassifier import numpy as np import pandas as pd def balance_classes_upsampling(X, y): Balance dataset using up-sampling (i.e., over-sampling the minority class). Parameters: X: features (DataFrame or NumPy array) y: labels (Array-like) Returns: X_resampled, y_resampled: Balanced features and labels X = pd.DataFrame(X) y = pd.Series(y) # Concatenate our training data back together data = pd.concat([X, y], axis=1) # Separate majority and minority classes majority_class = data[y == 0] minority_class = data[y == 1] # Upsample minority class minority_upsampled = resample(minority_class, replace=True, # sample with replacement n_samples=len(majority_class), # match number in majority class random_state=42) # reproducible results # Combine majority class with upsampled minority class upsampled = pd.concat([majority_class, minority_upsampled]) return upsampled.iloc[:, :-1].values, upsampled.iloc[:, -1].values def balance_classes_downsampling(X, y): Balance dataset using down-sampling (i.e., under-sampling the majority class). Parameters: X: features (DataFrame or NumPy array) y: labels (Array-like) Returns: X_resampled, y_resampled: Balanced features and labels X = pd.DataFrame(X) y = pd.Series(y) # Concatenate our training data back together data = pd.concat([X, y], axis=1) # Separate majority and minority classes majority_class = data[y == 0] minority_class = data[y == 1] # Downsample majority class majority_downsampled = resample(majority_class, replace=False, # sample without replacement n_samples=len(minority_class), # match number in minority class random_state=42) # reproducible results # Combine minority class with downsampled majority class downsampled = pd.concat([minority_class, majority_downsampled]) return downsampled.iloc[:, :-1].values, downsampled.iloc[:, -1].values # Example usage: # Assuming X_train and y_train are your features and labels respectively # X_train_upsampled, y_train_upsampled = balance_classes_upsampling(X_train, y_train) # X_train_downsampled, y_train_downsampled = balance_classes_downsampling(X_train, y_train) # Training a classifier with the balanced dataset # clf = RandomForestClassifier() # clf.fit(X_train_upsampled, y_train_upsampled)"},{"question":"Implement a function in Python that receives a list of integers and a target integer. The function should return a list of all the unique pairs of integers from the input list that sum up to the target integer. Ensure that each pair is listed in ascending order and the overall list of pairs is also sorted in ascending order. **Function Signature** ```python def find_pairs(nums: List[int], target: int) -> List[List[int]]: pass ``` **Example** ```python # Example print(find_pairs([1, 2, 3, 4, 5], 5)) # Output: [[1, 4], [2, 3]] print(find_pairs([0, -1, 2, -3, 1], -2)) # Output: [[-3, 1]] print(find_pairs([1, 1, 1, 1], 2)) # Output: [[1, 1]] ``` **Constraints** - The input list `nums` can contain negative numbers and duplicates. - The length of the `nums` list will be between 2 and 1000. - The time complexity of the implemented function should be O(n log n) or better.","solution":"from typing import List def find_pairs(nums: List[int], target: int) -> List[List[int]]: nums.sort() seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return [list(pair) for pair in sorted(pairs)]"},{"question":"Implement a function that takes in a list of integers and returns the length of the longest subsequence where the difference between consecutive integers is the same. For example, in the list `[1, 5, 7, 8, 5, 3, 4, 2]`, the longest subsequence where the difference between consecutive integers is consistent is `[5, 3, 1]` or `[7, 5, 3]`, each with a length of 3. Additionally, your function should handle varying list lengths efficiently. Below is a non-working piece of code that attempts to solve this problem, but has logical issues and does not correctly identify the longest subsequence. ```python def longest_arith_seq_length(nums): longest_length = 1 for i in range(len(nums)): for j in range(i + 1, len(nums)): diff = nums[j] - nums[i] length = 1 next_num = nums[j] + diff while next_num in nums: length += 1 next_num += diff longest_length = max(longest_length, length) return longest_length ``` Identify the issues in the above code and provide a corrected function that correctly identifies the longest subsequence where the difference between consecutive integers is the same. Your function should pass for the following test cases: 1. Given list `[1, 5, 7, 8, 5, 3, 4, 2]` should return 3. 2. Given list `[3, 6, 9, 12]` should return 4. 3. Given list `[9, 4, 7, 2, 10]` should return 3.","solution":"def longest_arith_seq_length(nums): if len(nums) == 0: return 0 longest_length = 1 dp = [{} for _ in range(len(nums))] for i in range(1, len(nums)): for j in range(i): diff = nums[i] - nums[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 longest_length = max(longest_length, dp[i][diff]) return longest_length"},{"question":"Design and implement a function that takes a list of integers and returns a new list with all duplicates removed while maintaining the original order of the elements. Ensure your implementation does not use any additional libraries or built-in functions explicitly designed to remove duplicates. Additionally, provide error handling for invalid inputs, such as non-list inputs or lists containing non-integer elements, and return appropriate error messages.","solution":"def remove_duplicates(lst): Removes duplicates from the list while maintaining the original order of elements. Args: lst (list): A list of integers. Returns: list: A new list with duplicates removed. str: An error message if input is invalid. if not isinstance(lst, list): return \\"Error: Input must be a list.\\" for item in lst: if not isinstance(item, int): return \\"Error: List must contain only integers.\\" seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Implement a function in Python that takes an integer n as input and returns a list of n natural numbers such that their sum is equal to a given target. If it is not possible to generate such a list, the function should return an empty list. Ensure the function handles edge cases where n exceeds or is less than the target.","solution":"def generate_natural_numbers(n, target): Generate a list of n natural numbers that sum up to the target. Args: - n (int): Number of natural numbers to generate. - target (int): Target sum of the generated natural numbers. Returns: - list: A list of n natural numbers that sum to the target, or an empty list if not possible. if n <= 0 or target < n * (n + 1) // 2: return [] # Generate the first n natural numbers natural_numbers = list(range(1, n + 1)) current_sum = sum(natural_numbers) # Since we need to reach the target and current_sum is the minimal sum, # calculate the extra required to match the target required_sum = target - current_sum # Distribute the required_sum to the existing numbers by incrementing them index = n - 1 while required_sum > 0: natural_numbers[index] += 1 required_sum -= 1 index -= 1 if index < 0: index = n - 1 return natural_numbers"},{"question":"Design a function that generates an NxN magic square. A magic square is a square matrix where the sum of every row, column, and both main diagonals are the same. # Requirements: 1. The function should take a single integer input N, where N is an odd positive integer greater than or equal to 3. 2. The function should return a 2D list representing the NxN magic square. # Definition: A magic square of order N is a grid containing the numbers from 1 to N^2 exactly once such that the sum of the numbers in each row, column, and both diagonals is the same. # Example: ```python def generate_magic_square(N: int) -> list: Generates an NxN magic square. >>> generate_magic_square(3) [[8, 1, 6], [3, 5, 7], [4, 9, 2]] >>> generate_magic_square(5) [[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]] # Implement the function here ``` # Notes: - You can assume the input will always be an odd integer greater than or equal to 3. - The implementation should follow the Siamese method (or another valid algorithm) for constructing magic squares, which involves placing the number 1 in the middle of the top row and proceeding to fill the square by moving up and to the right, wrapping around as needed, with specific handling for already filled cells.","solution":"def generate_magic_square(N: int) -> list: Generates an NxN magic square. N must be an odd positive integer >= 3. Args: N (int): The size of the magic square. Returns: list: A 2D list representing the NxN magic square. Examples: >>> generate_magic_square(3) [[8, 1, 6], [3, 5, 7], [4, 9, 2]] >>> generate_magic_square(5) [[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]] # Create an NxN grid filled with zeros magic_square = [[0] * N for _ in range(N)] # Initialize the position for 1 num = 1 i, j = 0, N // 2 while num <= N * N: magic_square[i][j] = num num += 1 # Calculate next position new_i, new_j = (i - 1) % N, (j + 1) % N if magic_square[new_i][new_j] != 0: # If the next position is filled new_i, new_j = (i + 1) % N, j # Move down instead i, j = new_i, new_j return magic_square"},{"question":"Write a Python program that finds the longest substring of unique characters in a given string. The function should return the length of this substring. For example, in the string \\"abcabcbb\\", the longest substring with all unique characters is \\"abc\\", which has a length of 3. If the string is empty, the function should return 0. Your task is to write the function length_of_longest_unique_substring(s), where \'s\' is the input string. Test cases (Python): assert length_of_longest_unique_substring(\\"abcabcbb\\") == 3 # \\"abc\\" assert length_of_longest_unique_substring(\\"bbbbb\\") == 1 # \\"b\\" assert length_of_longest_unique_substring(\\"pwwkew\\") == 3 # \\"wke\\" assert length_of_longest_unique_substring(\\"\\") == 0 # Empty string assert length_of_longest_unique_substring(\\"abcdefg\\") == 7 # \\"abcdefg\\" assert length_of_longest_unique_substring(\\"aab\\") == 2 # \\"ab\\"","solution":"def length_of_longest_unique_substring(s): Returns the length of the longest substring with all unique characters. char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Create a function that receives a list of strings representing file names. These file names contain alphanumeric characters, and some are followed by a numeric extension (e.g., \\"file1.txt\\", \\"image2.jpg\\", \\"document\\"). The goal is to sort these file names by their base names (ignoring the extension) in alphabetical order. If two base names are identical, sort them by the numeric extension (with files lacking a numeric extension considered as having an extension of 0). Finally, return the sorted list of file names. Example: Input: [\\"image2.jpg\\", \\"file1.txt\\", \\"file2.txt\\", \\"document\\", \\"image1.jpg\\"] Output: [\\"document\\", \\"file1.txt\\", \\"file2.txt\\", \\"image1.jpg\\", \\"image2.jpg\\"] Function Signature: ```python def sort_file_names(file_names: List[str]) -> List[str]: # Implementation here pass ```","solution":"import re from typing import List def sort_file_names(file_names: List[str]) -> List[str]: def extract_base_and_extension(file_name): match = re.match(r\'([a-zA-Z]+)([0-9]*).(.*)\', file_name) if match: base_name, number, extension = match.groups() number = int(number) if number else 0 return (base_name, number, extension) else: return (file_name, 0, \'\') return sorted(file_names, key=lambda fn: extract_base_and_extension(fn))"},{"question":"Write a function in Python to perform k-means clustering on a given dataset. The function should take the number of clusters `k`, the dataset (a list of coordinates in two-dimensional space), and the number of iterations. Your implementation should showcase the initialization of centroids, assignment of points to the nearest cluster, updating of centroids, and convergence criteria. Additionally, provide a sample dataset and demonstrate the function usage with expected output interpretations, illustrating the clustering process step-by-step.","solution":"import random import numpy as np def initialize_centroids(k, data): Randomly initializes centroids by selecting k unique points from the dataset. centroids = random.sample(data, k) return centroids def assign_points_to_clusters(centroids, data): Assigns each data point to the nearest centroid using Euclidean distance. clusters = [[] for _ in range(len(centroids))] for point in data: distances = [np.linalg.norm(np.array(point) - np.array(centroid)) for centroid in centroids] cluster_index = distances.index(min(distances)) clusters[cluster_index].append(point) return clusters def update_centroids(clusters): Updates centroids by calculating the mean of all points assigned to each cluster. return [np.mean(cluster, axis=0).tolist() for cluster in clusters] def k_means_clustering(k, data, iterations): Performs k-means clustering on the given dataset. centroids = initialize_centroids(k, data) for _ in range(iterations): clusters = assign_points_to_clusters(centroids, data) new_centroids = update_centroids(clusters) if np.array_equal(new_centroids, centroids): break centroids = new_centroids return centroids, clusters # Example usage: data = [ [1, 2], [2, 3], [3, 4], [8, 7], [9, 6], [10, 7], [2, 8], [3, 9], [4, 10], [7, 2], [8, 3], [9, 4] ] k = 3 iterations = 10 centroids, clusters = k_means_clustering(k, data, iterations) print(\\"Final centroids:\\", centroids) print(\\"Clusters:\\", clusters)"},{"question":"Write a Python function that takes a string and an integer k as inputs and returns a new string with only the first occurrence of each character in the original string, such that the new string is at most k characters long. If k is greater than the number of unique characters in the original string, the new string should contain all the unique characters. The function should handle both upper and lower case letters and treat them as distinct characters. Example: Input: \\"banana\\", 3 Output: \\"ban\\" Input: \\"Programming\\", 5 Output: \\"Prog\\"","solution":"def unique_k_chars(s, k): Returns a new string with only the first occurrence of each character in the original string, such that the new string is at most k characters long. Parameters: s (str): The input string. k (int): The maximum length of the new string. Returns: str: The new string with unique characters. unique_chars = [] seen = set() for char in s: if char not in seen: seen.add(char) unique_chars.append(char) if len(unique_chars) == k: break return \'\'.join(unique_chars)"},{"question":"Write a function in Python that takes a string of words separated by spaces and returns the word with the highest number of unique characters. If there are multiple words with the same highest number of unique characters, return the first one. Input string: \\"hello world algorithms are fun\\" Function signature: `def word_with_most_unique_chars(s: str) -> str` Output: \\"algorithms\\"","solution":"def word_with_most_unique_chars(s: str) -> str: Returns the word with the highest number of unique characters from the input string. :param s: A string of words separated by spaces. :return: The word with the highest number of unique characters. words = s.split() max_unique_count = 0 result_word = \\"\\" for word in words: unique_count = len(set(word)) if unique_count > max_unique_count: max_unique_count = unique_count result_word = word return result_word"},{"question":"Write a function to process a list of numeric scores and generate a results summary. The summary should contain the following: 1. The highest score. 2. The lowest score. 3. The average score. 4. The median score. 5. A list of all unique scores in ascending order. Implement the function `generate_summary(scores)` which takes a list of integers `scores` as input and returns a dictionary with the above results. Ensure that your function handles edge cases, such as an empty list of scores. Example: ```python def generate_summary(scores): # your code here # Test case scores = [88, 75, 90, 100, 62, 75, 88, 92] summary = generate_summary(scores) print(summary) # Expected output: # { # \\"highest\\": 100, # \\"lowest\\": 62, # \\"average\\": 83.75, # \\"median\\": 88, # \\"unique_scores\\": [62, 75, 88, 90, 92, 100] # } ```","solution":"def generate_summary(scores): Processes a list of numeric scores and generates a summary. The summary contains the highest score, the lowest score, the average score, the median score, and a list of all unique scores in ascending order. if not scores: return { \\"highest\\": None, \\"lowest\\": None, \\"average\\": None, \\"median\\": None, \\"unique_scores\\": [] } highest = max(scores) lowest = min(scores) average = sum(scores) / len(scores) sorted_scores = sorted(scores) mid = len(sorted_scores) // 2 if len(sorted_scores) % 2 == 0: median = (sorted_scores[mid - 1] + sorted_scores[mid]) / 2 else: median = sorted_scores[mid] unique_scores = sorted(set(scores)) return { \\"highest\\": highest, \\"lowest\\": lowest, \\"average\\": average, \\"median\\": median, \\"unique_scores\\": unique_scores }"},{"question":"Write a function in Python to merge two sorted lists into a single sorted list without using the built-in `sorted()` function. ```python def merge_sorted_lists(list1, list2): \'\'\'This function takes two sorted lists, list1 and list2, and returns a new list that contains all elements from both lists in sorted order. If an element is not an integer, the function should return a string stating that the lists must only contain integers. For example: merge_sorted_lists([1, 3, 5], [2, 4, 6]) would return [1, 2, 3, 4, 5, 6] merge_sorted_lists([1, 2, 3], [\'a\', \'b\', \'c\']) would return \\"Lists must only contain integers\\" merge_sorted_lists([5, 10], [-1, 7, 9]) would return [-1, 5, 7, 9, 10] \'\'\' # MISSING CODE ```","solution":"def merge_sorted_lists(list1, list2): \'\'\' This function takes two sorted lists, list1 and list2, and returns a new list that contains all elements from both lists in sorted order. If an element is not an integer, the function should return a string stating that the lists must only contain integers. For example: merge_sorted_lists([1, 3, 5], [2, 4, 6]) would return [1, 2, 3, 4, 5, 6] merge_sorted_lists([1, 2, 3], [\'a\', \'b\', \'c\']) would return \\"Lists must only contain integers\\" merge_sorted_lists([5, 10], [-1, 7, 9]) would return [-1, 5, 7, 9, 10] \'\'\' # Check if all elements are integers if not all(isinstance(i, int) for i in list1 + list2): return \\"Lists must only contain integers\\" merged_list = [] i = 0 j = 0 # Merge the two lists while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are still elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are still elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Implement a function that identifies and returns all prime numbers less than a given integer `n`. The function should be efficient and use the Sieve of Eratosthenes method. Additionally, the function should include error handling for invalid inputs such as non-integer or negative values. If the input is invalid, the function should return an empty list.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n. Uses the Sieve of Eratosthenes method. if not isinstance(n, int) or n <= 2: return [] # Initialize a boolean array indicating prime status primes = [True] * n primes[0] = primes[1] = False # 0 and 1 are not prime numbers p = 2 while (p * p < n): if primes[p]: for i in range(p * p, n, p): primes[i] = False p += 1 return [p for p, is_prime in enumerate(primes) if is_prime]"},{"question":"Implement a function `merge_and_sort_lists(list1, list2)` that takes two lists of integers as input, merges them into a single list, removes any duplicate values, and returns the list sorted in descending order. The function should handle negative integers and ensure the resulting list is optimally sorted despite the initial order of the input lists. # Function Signature ```python def merge_and_sort_lists(list1: List[int], list2: List[int]) -> List[int]: pass ``` # Examples ```python assert merge_and_sort_lists([3, 1, 4], [4, 5, 9]) == [9, 5, 4, 3, 1] assert merge_and_sort_lists([-1, -2, -3], [-3, 0, 1]) == [1, 0, -1, -2, -3] assert merge_and_sort_lists([1, 2, 3], []) == [3, 2, 1] ``` # Constraints - The input lists can be empty. - The input lists will not be sorted. - Manage the efficiency of the approach in terms of time and space complexity given that input lists can be of arbitrary length.","solution":"from typing import List def merge_and_sort_lists(list1: List[int], list2: List[int]) -> List[int]: Takes two lists of integers, merges them, removes duplicates, and returns the sorted list in descending order. # Merge lists merged_list = list1 + list2 # Remove duplicates by converting to a set unique_list = set(merged_list) # Sort the list in descending order sorted_list = sorted(unique_list, reverse=True) return sorted_list"},{"question":"Create a function that takes a list of integers and returns a dictionary with keys \'evens\' and \'odds\'. The values should be lists containing the even and odd numbers from the input list, respectively. Ensure the function handles edge cases such as an empty list.","solution":"def separate_evens_and_odds(numbers): Separates the input list of integers into even and odd numbers. Parameters: numbers (list of int): The input list of integers. Returns: dict: A dictionary with keys \'evens\' and \'odds\' containing lists of even and odd numbers respectively. result = {\'evens\': [], \'odds\': []} for number in numbers: if number % 2 == 0: result[\'evens\'].append(number) else: result[\'odds\'].append(number) return result"},{"question":"Write a function that takes a list of integers and returns the largest sum of any contiguous subarray within the list. If the list is empty, return 0.","solution":"def max_subarray_sum(arr): Returns the largest sum of any contiguous subarray within the list. If the list is empty, return 0. if not arr: return 0 max_ending_here = arr[0] max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function to find and return the kth smallest element in an unsorted array. The function should accept two parameters: an array of integers and a positive integer k. If the k value is greater than the length of the array, the function should return an error message. Implement the function in a way that it runs efficiently for large datasets.","solution":"import heapq def kth_smallest_element(arr, k): Returns the kth smallest element in an unsorted array. Parameters: arr (list): List of integers k (int): Positive integer representing the kth position Returns: int: The kth smallest element in the array str: Error message if k is out of bounds if k > len(arr): return \\"Error: k is greater than the length of the array\\" return heapq.nsmallest(k, arr)[-1]"},{"question":"Create a Python function to convert an input string representing an arithmetic expression into a list of tokens. Your function should handle the four basic arithmetic operators (+, -, *, /), parentheses, and multi-digit integers. Ensure that there are no spaces in the final token list and that each token is either an operator, a parenthesis, or a valid integer number. For example: ```python input_string = \\"3+(6*5-8)/4\\" ``` Your function should return: ```python [\'3\', \'+\', \'(\', \'6\', \'*\', \'5\', \'-\', \'8\', \')\', \'/\', \'4\'] ``` Your script must handle input strings of arbitrary length and complexity, and be robust against various valid arithmetic expressions. Hint: You may find the use of regular expressions helpful in identifying the different types of tokens.","solution":"import re def tokenize(expression): Converts an input string representing an arithmetic expression into a list of tokens. Handles four basic arithmetic operators (+, -, *, /), parentheses, and multi-digit integers. :param expression: A string representing an arithmetic expression. :return: A list of tokens. token_pattern = re.compile(r\'d+|[()+-*/]\') return token_pattern.findall(expression)"},{"question":"Design a function in Python that takes a list of integers and a target number as input and returns a tuple of two distinct integers from the list that add up to the target number. If no such pair exists, return `None`. Ensure your solution has a time complexity of O(n).","solution":"def find_two_sum(nums, target): Finds two distinct integers in the list `nums` that add up to `target`. Parameters: nums (list of int): A list of integers. target (int): The target sum. Returns: tuple: A tuple of two integers that add up to the target, or None if no such pair exists. num_set = {} for num in nums: complement = target - num if complement in num_set: return (num, complement) num_set[num] = True return None"},{"question":"Design and implement a genetic algorithm to solve the Traveling Salesman Problem (TSP). Begin by creating a function to generate a random set of cities (each represented by x and y coordinates). Then, implement the genetic algorithm, which includes the following components: initialization, selection, crossover, mutation, and termination criteria. The fitness function should evaluate the total distance of the path formed by visiting each city once and returning to the starting city. Ensure your algorithm plots the best path found and displays the corresponding total distance after a certain number of generations. Additionally, compare the performance of your genetic algorithm solution to a brute-force approach in terms of both accuracy and computational efficiency. Discuss any trade-offs and potential improvements in the context of solving the TSP using genetic algorithms. Make sure to use appropriate random seed initialization for reproducibility.","solution":"import random import math import matplotlib.pyplot as plt def generate_cities(num_cities, seed=42): Generates a list of randomly placed cities represented by (x, y) coordinates. random.seed(seed) return [(random.uniform(0, 100), random.uniform(0, 100)) for _ in range(num_cities)] def distance(point1, point2): Calculates the Euclidean distance between two points. return math.sqrt((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2) def total_distance(path, cities): Calculates the total distance of the path formed by visiting each city once and returning to the starting city. dist = 0 for i in range(len(path)): dist += distance(cities[path[i]], cities[path[(i + 1) % len(path)]]) return dist def generate_initial_population(pop_size, num_cities): Generates an initial population where each individual is a random permutation of city indices. population = [random.sample(range(num_cities), num_cities) for _ in range(pop_size)] return population def selection(population, fitnesses, num_to_select): Selects individuals based on their fitness to form a mating pool. selected = random.choices(population, weights=fitnesses, k=num_to_select) return selected def crossover(parent1, parent2): Performs ordered crossover (OX) on two parents to produce offspring. size = len(parent1) a, b = sorted(random.sample(range(size), 2)) child = [None] * size child[a:b] = parent1[a:b] p2_index, c_index = b, b while None in child: if parent2[p2_index % size] not in child: child[c_index % size] = parent2[p2_index % size] c_index += 1 p2_index += 1 return child def mutate(individual, mutation_rate=0.02): Mutates an individual by swapping two cities with a given probability. for i in range(len(individual)): if random.random() < mutation_rate: j = random.randint(0, len(individual) - 1) individual[i], individual[j] = individual[j], individual[i] return individual def genetic_algorithm(cities, pop_size=100, generations=500, mutation_rate=0.02): Solves the TSP using a genetic algorithm. num_cities = len(cities) population = generate_initial_population(pop_size, num_cities) best_individual, best_distance = None, float(\'inf\') for generation in range(generations): fitnesses = [1 / total_distance(individual, cities) for individual in population] best_in_pop = population[fitnesses.index(max(fitnesses))] best_in_pop_dist = total_distance(best_in_pop, cities) if best_in_pop_dist < best_distance: best_individual, best_distance = best_in_pop, best_in_pop_dist selected = selection(population, fitnesses, pop_size) next_population = [] for i in range(0, pop_size, 2): parent1, parent2 = selected[i], selected[i + 1] child1 = mutate(crossover(parent1, parent2), mutation_rate) child2 = mutate(crossover(parent2, parent1), mutation_rate) next_population.extend([child1, child2]) population = next_population[:pop_size] return best_individual, best_distance def plot_tsp(cities, path, distance): Plots the TSP path and displays the total distance. plt.figure(figsize=(10, 6)) for i in range(len(path)): x0, y0 = cities[path[i % len(path)]] x1, y1 = cities[path[(i + 1) % len(path)]] plt.plot([x0, x1], [y0, y1], \'bo-\') plt.title(f\\"Total Distance: {distance:.2f}\\") plt.xlabel(\\"X Coordinate\\") plt.ylabel(\\"Y Coordinate\\") plt.show()"},{"question":"Create a program that simulates a simple version of the classic \\"Battleship\\" game. The program should automatically place a single ship of length 3 on a 5x5 grid. The player is given 10 attempts to guess the location of the ship by inputting coordinates. After each guess, the program should provide feedback: \\"Hit\\" if the guess hits the ship, \\"Miss\\" if it misses, or \\"Already Guessed\\" if the player repeats a previous guess. Once the player sinks the ship by hitting all three parts, the game should end with a \\"You sank the battleship!\\" message. If the player uses all 10 attempts without sinking the ship, the game should end with a \\"Game Over!\\" message.","solution":"import random class BattleshipGame: def __init__(self): self.grid_size = 5 self.ship_length = 3 self.max_attempts = 10 self.guesses = set() self.ship_positions = self.place_ship() self.hits = set() def place_ship(self): direction = random.choice([\'horizontal\', \'vertical\']) if direction == \'horizontal\': row = random.randint(0, self.grid_size - 1) col_start = random.randint(0, self.grid_size - self.ship_length) return {(row, col_start + i) for i in range(self.ship_length)} else: col = random.randint(0, self.grid_size - 1) row_start = random.randint(0, self.grid_size - self.ship_length) return {(row_start + i, col) for i in range(self.ship_length)} def guess(self, row, col): if (row, col) in self.guesses: return \\"Already Guessed\\" self.guesses.add((row, col)) if (row, col) in self.ship_positions: self.hits.add((row, col)) if self.hits == self.ship_positions: return \\"You sank the battleship!\\" return \\"Hit\\" else: return \\"Miss\\" def is_game_over(self): return len(self.guesses) >= self.max_attempts or self.hits == self.ship_positions"},{"question":"Implement a class to manage a basic Booking System for a small venue. The Booking System should support the following functionalities: 1. Book a slot given the start time and end time. 2. Cancel a booking given the start time and end time. 3. Check if a slot is available given the start time and end time. 4. Return a list of all bookings in chronological order. Additionally: - Assume the venue operates from 0 to 24 (inclusive) hours only. - Bookings do not overlap. - If a booking slot overlaps with an existing booking, the method should return an appropriate message. Here is a skeleton of the class to get you started: ```python class BookingSystem: def __init__(self): self.bookings = [] def book_slot(self, start, end): # Validate the slot and add to bookings pass def cancel_booking(self, start, end): # Remove the slot from bookings pass def is_available(self, start, end): # Check if the slot is available pass def get_all_bookings(self): # Return all bookings in chronological order pass # Example usage: venue = BookingSystem() # Example bookings venue.book_slot(9, 12) venue.book_slot(13, 15) venue.is_available(10, 11) # Should return False venue.is_available(12, 13) # Should return True venue.get_all_bookings() # Should return [(9, 12), (13, 15)] venue.cancel_booking(9, 12) venue.get_all_bookings() # Should return [(13, 15)] ```","solution":"class BookingSystem: def __init__(self): self.bookings = [] def book_slot(self, start, end): if start < 0 or end > 24 or start >= end: return \\"Invalid booking time.\\" for booking in self.bookings: if max(start, booking[0]) < min(end, booking[1]): return \\"Slot overlaps with an existing booking.\\" self.bookings.append((start, end)) self.bookings.sort() return \\"Booking successful.\\" def cancel_booking(self, start, end): if (start, end) in self.bookings: self.bookings.remove((start, end)) return \\"Booking cancelled.\\" return \\"Booking not found.\\" def is_available(self, start, end): if start < 0 or end > 24 or start >= end: return False for booking in self.bookings: if max(start, booking[0]) < min(end, booking[1]): return False return True def get_all_bookings(self): return self.bookings"},{"question":"Implement a function in Python that receives a list of integers and returns a new list containing only the prime numbers from the input list. Additionally, for each prime number found, attach the number of times it appears in the input list. Present the prime numbers in ascending order in the output list, where each prime number is paired with its frequency as a tuple. Demonstrate the function with an example list.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def prime_frequencies(lst): prime_counts = {} for number in lst: if is_prime(number): if number in prime_counts: prime_counts[number] += 1 else: prime_counts[number] = 1 prime_list = list(prime_counts.items()) prime_list.sort() return prime_list # Example usage: # lst = [7, 3, 5, 7, 3, 2, 7, 11, 5, 13, 2] # Output should be: [(2, 2), (3, 2), (5, 2), (7, 3), (11, 1), (13, 1)]"},{"question":"Write a function that takes a list of strings and an integer `n` as input and returns a new list consisting of only those strings that have a length greater than `n`. If none of the strings meet the criteria, return an empty list. Example: ```python def filter_strings(strings: list, n: int) -> list: # Your implementation here # Example usage: input_strings = [\\"apple\\", \\"banana\\", \\"kiwi\\", \\"blueberry\\"] n = 5 result = filter_strings(input_strings, n) print(result) # Output: [\\"banana\\", \\"blueberry\\"] ```","solution":"def filter_strings(strings: list, n: int) -> list: Returns a list of strings that have a length greater than n. :param strings: List of strings to be filtered. :param n: Integer specifying the length criteria. :return: List of strings with length greater than n. return [s for s in strings if len(s) > n]"},{"question":"Write a Python function that takes a list of words and returns a dictionary. The dictionary should contain the words as keys and the lengths of these words as the corresponding values. Additionally, implement a function to sort this dictionary in descending order based on the lengths of the words, and print the sorted dictionary. Illustrate your solution with appropriate examples.","solution":"def words_length(words): Takes a list of words and returns a dictionary with words as keys and their lengths as values. return {word: len(word) for word in words} def sort_dict_by_value(d): Takes a dictionary and returns a new dictionary sorted by its values in descending order. sorted_items = sorted(d.items(), key=lambda item: item[1], reverse=True) return dict(sorted_items) # Example usage words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] lengths_dict = words_length(words) sorted_lengths_dict = sort_dict_by_value(lengths_dict) print(sorted_lengths_dict)"},{"question":"Given a list of customer orders where each order is represented by a dictionary with keys \\"order_id\\", \\"customer_id\\", and \\"total_amount\\", write a function that calculates the total revenue generated by each customer. The function should return a new list where each element is a dictionary containing \\"customer_id\\" and \\"total_revenue\\". The list should be sorted in descending order of total revenue. Additionally, optimize your function to handle changes in customer orders efficiently. Sample Input: orders = [ {\\"order_id\\": 1, \\"customer_id\\": 1, \\"total_amount\\": 100}, {\\"order_id\\": 2, \\"customer_id\\": 2, \\"total_amount\\": 200}, {\\"order_id\\": 3, \\"customer_id\\": 1, \\"total_amount\\": 150}, {\\"order_id\\": 4, \\"customer_id\\": 3, \\"total_amount\\": 300} ] Expected Output: [ {\\"customer_id\\": 3, \\"total_revenue\\": 300}, {\\"customer_id\\": 1, \\"total_revenue\\": 250}, {\\"customer_id\\": 2, \\"total_revenue\\": 200} ]","solution":"def calculate_total_revenue_by_customer(orders): Calculate total revenue for each customer from a list of orders. Args: orders (list of dict): Each dictionary contains \\"order_id\\", \\"customer_id\\", and \\"total_amount\\". Returns: list of dict: Each dictionary contains \\"customer_id\\" and \\"total_revenue\\", sorted by descending revenue. revenue_by_customer = {} for order in orders: customer_id = order[\'customer_id\'] total_amount = order[\'total_amount\'] if customer_id in revenue_by_customer: revenue_by_customer[customer_id] += total_amount else: revenue_by_customer[customer_id] = total_amount # Convert to list of dictionaries and sort by total_revenue in descending order sorted_revenue_list = [{\\"customer_id\\": k, \\"total_revenue\\": v} for k, v in sorted(revenue_by_customer.items(), key=lambda item: item[1], reverse=True)] return sorted_revenue_list"},{"question":"Design a Python function that takes in a list of integers and returns a new list where each element is the sum of itself and all previous elements in the original list. The function should utilize an efficient approach. Also, write a brief explanation of the time complexity of your solution.","solution":"def cumulative_sum(lst): Takes in a list of integers and returns a new list where each element is the sum of itself and all previous elements in the original list. if not lst: return [] result = [lst[0]] for i in range(1, len(lst)): result.append(result[-1] + lst[i]) return result # Time Complexity: # The function iterates over the list once, performing a constant-time operation at each step. # Hence, the time complexity is O(n), where n is the length of the list."},{"question":"Given a list of unique city names in the world, write a function to group these cities by their continents. For simplicity, only consider cities from the following continents: \\"Asia\\", \\"North America\\", \\"South America\\", \\"Europe\\", \\"Africa\\", \\"Australia\\". You can assume that the input list contains valid city names. The output should be a dictionary where the keys are the continent names and the values are lists of cities that belong to those continents. ```python def group_cities_by_continent(cities): Group the list of city names by their respective continents. Parameters: - cities (list of str): a list of unique city names. Returns: - dict: a dictionary with continent names as keys and lists of cities as values. # Implementation here pass # Example usage: cities = [\\"Tokyo\\", \\"New York\\", \\"Sao Paulo\\", \\"Paris\\", \\"Lagos\\", \\"Sydney\\"] # Expected output: #{ # \'Asia\': [\'Tokyo\'], # \'North America\': [\'New York\'], # \'South America\': [\'Sao Paulo\'], # \'Europe\': [\'Paris\'], # \'Africa\': [\'Lagos\'], # \'Australia\': [\'Sydney\'] #} print(group_cities_by_continent(cities)) ``` Note: You do not need to implement the actual city-to-continent mapping logic. Assume that this mapping is handled by some external service or pre-defined data structure beyond the scope of this question. Your focus should be on how to structure the solution to group cities given the correct continent information.","solution":"def group_cities_by_continent(cities): Group the list of city names by their respective continents. Parameters: - cities (list of str): a list of unique city names. Returns: - dict: a dictionary with continent names as keys and lists of cities as values. # This is a mock mapping of city to continent. city_to_continent = { \\"Tokyo\\": \\"Asia\\", \\"New York\\": \\"North America\\", \\"Sao Paulo\\": \\"South America\\", \\"Paris\\": \\"Europe\\", \\"Lagos\\": \\"Africa\\", \\"Sydney\\": \\"Australia\\" } result = { \\"Asia\\": [], \\"North America\\": [], \\"South America\\": [], \\"Europe\\": [], \\"Africa\\": [], \\"Australia\\": [] } for city in cities: continent = city_to_continent.get(city) if continent: result[continent].append(city) return result # Example usage: cities = [\\"Tokyo\\", \\"New York\\", \\"Sao Paulo\\", \\"Paris\\", \\"Lagos\\", \\"Sydney\\"] print(group_cities_by_continent(cities))"},{"question":"Write a function in Python to rotate an NxN matrix 90 degrees clockwise. The function should take the matrix as input and return the rotated matrix. For example, given the matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The function should return: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates an NxN matrix 90 degrees clockwise. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix"},{"question":"Write a program that implements a basic hill climbing algorithm to find the maximum value of a given mathematical function. The function to be maximized is f(x) = -x^2 + 6x - 5 on the interval [0, 5]. Parameters and requirements: 1. Start the search from a random point within the interval. 2. At each step, move to a neighboring point that has a higher function value. Use a small step size (e.g., 0.1). 3. Terminate the search when you reach a point where no neighboring points have a higher value (local maximum). 4. Output the x value that gives the maximum function value and the function value itself. Assume the interval is discretized into steps of 0.1 for simplicity and avoid any boundary issues.","solution":"import random def f(x): The function to be maximized: f(x) = -x^2 + 6x - 5 return -x**2 + 6*x - 5 def hill_climb(start=None, step_size=0.1, interval=(0, 5)): Basic hill climbing algorithm to find the maximum value of f(x) on the interval [0, 5]. if start is None: start = random.uniform(interval[0], interval[1]) current_x = start current_val = f(current_x) while True: next_x_left = max(current_x - step_size, interval[0]) next_x_right = min(current_x + step_size, interval[1]) next_val_left = f(next_x_left) next_val_right = f(next_x_right) if next_val_left > current_val: current_x = next_x_left current_val = next_val_left elif next_val_right > current_val: current_x = next_x_right current_val = next_val_right else: break return current_x, current_val"},{"question":"Description: You are given a list of `points` on a 2D plane, where each point is represented as `[x, y]`. Your task is to determine the number of distinct vertical lines that can be formed using these points such that each line contains at least two distinct points from the list. Example 1: Input: points = [[1,2],[1,3],[2,1],[2,4],[3,5]] Output: 2 Explanation: The points [1,2] and [1,3] form a vertical line at x=1, and the points [2,1] and [2,4] form a vertical line at x=2. There are 2 distinct vertical lines. Example 2: Input: points = [[1,1],[2,2],[3,3]] Output: 0 Explanation: There are no vertical lines that contain at least two points. Example 3: Input: points = [[1,1],[1,1],[1,1]] Output: 1 Explanation: All three points are identical and at the same x-coordinate, so they form a vertical line at x=1. Constraints: * `1 <= points.length <= 100` * `points[i].length == 2` * `-100 <= x, y <= 100`","solution":"def count_distinct_vertical_lines(points): Determines the number of distinct vertical lines that can be formed using given points, where each line contains at least two distinct points. Parameters: points (list of list of ints): Each point is represented as [x, y] Returns: int: Number of distinct vertical lines x_coords = {} for point in points: x = point[0] if x in x_coords: x_coords[x] += 1 else: x_coords[x] = 1 vertical_lines = 0 for count in x_coords.values(): if count >= 2: vertical_lines += 1 return vertical_lines"},{"question":"Write a function in Python that takes two lists of integers as inputs and returns a list of integers that are present in the first list but not in the second list. Ensure that the returned list is sorted in ascending order. The function should handle edge cases such as empty lists and lists with duplicate numbers. Additionally, your function should provide a time complexity analysis showing its efficiency with respect to the size of the lists. Example: ```python list1 = [5, 1, 3, 2, 4, 4, 1] list2 = [2, 4, 6] # Expected output: [1, 3, 5] list1 = [10, 20, 20, 30, 30, 40] list2 = [30, 50] # Expected output: [10, 20, 40] ``` Function signature: ```python def difference_and_sort(list1: List[int], list2: List[int]) -> List[int]: pass ``` Your implementation should correctly identify and remove any duplicates from the output list, sort the result in ascending order, and ensure optimal runtime performance.","solution":"from typing import List def difference_and_sort(list1: List[int], list2: List[int]) -> List[int]: Returns a sorted list of integers that are present in list1 but not in list2. Removes duplicates from the result. set1 = set(list1) set2 = set(list2) difference_set = set1 - set2 result_list = sorted(difference_set) return result_list"},{"question":"Considering the Fibonacci sequence where ( F(n) = F(n-1) + F(n-2) ) with seed values ( F(0) = 0 ) and ( F(1) = 1 ), write a Python function to generate a list of Fibonacci numbers up to ( F(m) ), where ( m ) is the smallest number such that ( F(m) ) has at least \'n\' digits. Validate your function with test cases for different values of \'n\'. Additionally, explain the time complexity of your solution in terms of Big-O notation.","solution":"def fibonacci_with_digits(n): Generates a list of Fibonacci numbers up to F(m), where m is the smallest number such that F(m) has at least \'n\' digits. Args: n (int): The minimum number of digits for the Fibonacci number. Returns: list: A list of Fibonacci numbers up to F(m). if n < 1: raise ValueError(\\"n must be at least 1\\") fib_sequence = [0, 1] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if len(str(next_fib)) >= n: fib_sequence.append(next_fib) break fib_sequence.append(next_fib) return fib_sequence"},{"question":"You are given a dataset containing information about houses, including features such as the number of bedrooms, the area in square feet, and the age of the house. Using Python, demonstrate how to use Scikit-learn to build a multiple linear regression model that predicts the house price based on these features. Ensure your code handles missing data appropriately and includes a process for evaluating the model\'s performance. Provide practical troubleshooting tips for potential issues, such as data preprocessing problems.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score from sklearn.impute import SimpleImputer from sklearn.pipeline import Pipeline from sklearn.preprocessing import StandardScaler def build_and_evaluate_model(df, features, target): Builds and evaluates a multiple linear regression model. Parameters: - df: pandas DataFrame containing the dataset - features: list of column names to be used as features - target: column name of the target variable Returns: - Dictionary containing model performance metrics. # Separate features and target X = df[features] y = df[target] # Split data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Define a pipeline with data preprocessing and regression model pipeline = Pipeline([ (\'imputer\', SimpleImputer(strategy=\'mean\')), # Handle missing data (\'scaler\', StandardScaler()), # Feature scaling (\'regressor\', LinearRegression()) # Regression model ]) # Train the model pipeline.fit(X_train, y_train) # Predict the target for test data y_pred = pipeline.predict(X_test) # Evaluate model performance mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) return { \'mse\': mse, \'r2\': r2 }"},{"question":"Design and implement an algorithm that detects whether a given string can be rearranged to form a palindrome. The algorithm should not use built-in functions for permutation generation or library functions for checking permutations directly. Given string: \\"civic\\". Illustrate the correctness of your algorithm with at least three test cases, and analyze its time complexity in terms of the length of the input string. Example test cases: 1. Input: \\"ivicc\\" Output: True 2. Input: \\"hello\\" Output: False 3. Input: \\"aabbcc\\" Output: True","solution":"def can_form_palindrome(s): Detects whether the given string can be rearranged to form a palindrome. Args: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. char_counts = {} # Dictionary to hold the count of each character # Count occurrences of each character in the string for char in s: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 # Count how many characters have an odd count odd_count = 0 for count in char_counts.values(): if count % 2 != 0: odd_count += 1 # For the string to be rearranged into a palindrome, # there must be at most one character with an odd count return odd_count <= 1"},{"question":"Write a function that simulates a simple calculator which processes a list of mathematical operations provided as strings. The function should sequentially execute each operation and maintain the current result as it proceeds through the list. It should support basic arithmetic operations, including addition (\'+\'), subtraction (\'-\'), multiplication (\'*\'), and division (\'/\'). The input to the function will be a list of tuples, where each tuple contains a string representing an operation (one of \'+\', \'-\', \'*\', \'/\') and an integer to apply that operation to the current result. The function should return the final result after processing all operations. Example: ```python operations = [(\'+\', 5), (\'-\', 3), (\'*\', 10), (\'/\', 2)] result = sequential_calculator(operations) print(result) # Output should be 10.0 ``` Notes: 1. Assume the initial result is 0. 2. Division should be treated as floating-point division. 3. Handle edge cases like division by zero gracefully by printing an error message and stopping further operations.","solution":"def sequential_calculator(operations): Processes a list of mathematical operations sequentially and returns the final result. operations: List of tuples, each containing a string (\'+\', \'-\', \'*\', \'/\') and an integer. Returns the final result after processing all operations. result = 0 for operation, value in operations: if operation == \'+\': result += value elif operation == \'-\': result -= value elif operation == \'*\': result *= value elif operation == \'/\': if value == 0: print(\\"Error: Division by zero. Stopping further operations.\\") return result result /= value return result"},{"question":"Evaluating and Simplifying Mathematical Expressions Description: Given a mathematical expression in the form of a string, where the string can contain positive integers and the operators `+`, `-`, `*`, and `/` (with usual precedence and left-to-right associativity), write a function that calculates the result of the expression. The integers can be arbitrarily large but are guaranteed to be non-negative. Additionally, there won\'t be any parentheses in the input string. You need to implement a function `calculate(expression: str) -> int` that evaluates the given mathematical expression and returns the integer result. Note: - Division in this context refers to integer division, where the fractional part is discarded. - The expression is guaranteed to be valid and does not contain any invalid characters or malformed syntax. Example 1: Input: `\\"3+5*2\\"` Output: 13 Explanation: `3 + (5 * 2) = 3 + 10 = 13` Example 2: Input: `\\"10+2*6\\"` Output: 22 Explanation: `10 + (2 * 6) = 10 + 12 = 22` Example 3: Input: `\\"100-40/5\\"` Output: 92 Explanation: `100 - (40 / 5) = 100 - 8 = 92` Example 4: Input: `\\"10+3*4-2\\"` Output: 20 Explanation: `10 + (3 * 4) - 2 = 10 + 12 - 2 = 20` Example 5: Input: `\\"7+6/3*5-8\\"` Output: 9 Explanation: `7 + (6 / 3) * 5 - 8 = 7 + 2 * 5 - 8 = 7 + 10 - 8 = 17 - 8 = 9` Constraints: - The length of `expression` is between `1` and `10^4`. - The `expression` consists only of digits and the operators `+`, `-`, `*`, and `/`. - The expression does not contain any whitespace characters. - Division by zero is not present in the expression.","solution":"def calculate(expression: str) -> int: Evaluates a mathematical expression containing +, -, *, / with the usual precedence rules. Division is integer division. def apply_operator(operands, operator): right = operands.pop() left = operands.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) elif operator == \'/\': operands.append(left // right) operands = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 operands.append(num) continue elif expression[i] in \\"+-*/\\": while (operators and operators[-1] in \\"*/\\" and expression[i] in \\"+-\\") or (operators and operators[-1] in \\"*/\\" and expression[i] in \\"*/\\"): apply_operator(operands, operators.pop()) operators.append(expression[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"Write a program that analyzes a list of temperatures recorded over a week and determines if a sudden temperature drop occurred. A sudden drop is defined as a decrease of 15 degrees or more from one day to the next. The program should output the pair(s) of consecutive days on which this drop occurred, or return \\"No sudden drop\\" if no such drop is found. Additionally, the program should handle edge cases such as continuous days with the same temperature or an empty list. **Constraints:** - Temperatures are given as a list of integers. - The list length will not exceed 7 (one for each day of the week). - The temperature value ranges from -100 to 150, inclusive. **Input:** - A list of integers representing daily temperatures over a week. **Output:** - A list of tuples, each containing two consecutive days’ temperatures where a drop of 15 degrees or more is observed, or the string \\"No sudden drop\\" if no such drops are found. **Example:** ```python # Example input temperatures = [72, 60, 55, 78, 63, 84, 53] # Example output [(78, 63), (84, 53)] ```","solution":"def analyze_temperature_drops(temperatures): Analyzes a list of temperatures recorded over a week and determines if a sudden temperature drop occurred. A sudden drop is defined as a decrease of 15 degrees or more from one day to the next. Parameters: temperatures (list): A list of integers representing daily temperatures over a week. Returns: list or str: A list of tuples, each containing two consecutive days’ temperatures where a drop of 15 degrees or more is observed, or the string \\"No sudden drop\\" if no such drops are found. if len(temperatures) <= 1: return \\"No sudden drop\\" sudden_drops = [] for i in range(len(temperatures) - 1): if temperatures[i] - temperatures[i + 1] >= 15: sudden_drops.append((temperatures[i], temperatures[i + 1])) return sudden_drops if sudden_drops else \\"No sudden drop\\""},{"question":"Design a function that takes a list of strings representing names of members in a project team including their roles, and categorizes the members into distinct categories based on their roles. Each category should contain names of the team members assigned to that role. Ensure to handle cases where some roles might not be assigned to any members. The function should return a dictionary with roles as keys and names of members as values.","solution":"def categorize_team_members(members): Categorizes team members based on their roles. Args: - members (list): A list of strings, each string containing a team member\'s name and their role Returns: - dict: A dictionary with roles as keys and lists of names as values categorized_members = {} for member in members: name, role = member.rsplit(maxsplit=1) if role not in categorized_members: categorized_members[role] = [] categorized_members[role].append(name) return categorized_members"},{"question":"Implement a function that takes a list of integers and returns the start and end indices of the longest contiguous subarray which has the highest sum. If there are multiple subarrays with the same highest sum, return the indices of the first one. Your solution should be efficient in terms of time complexity and should handle both positive and negative integers within the array.","solution":"def max_subarray_indices(arr): Finds the start and end indices of the longest contiguous subarray with the highest sum. If multiple subarrays have the same highest sum, returns the indices of the first one. :param arr: List of integers :return: Tuple containing start and end indices if not arr: return -1, -1 max_sum = current_sum = arr[0] start = end = temp_start = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return start, end"},{"question":"Write a program that simulates a simple stock trading system. The program should allow the user to input a series of daily stock prices for a company, then find the best day to buy and the best day to sell to maximize profit. The program should: 1. Accept stock prices as a list of integers, where each integer represents the stock price on a given day. 2. Find the pair of days (buy_day, sell_day) such that the stock bought on buy_day and sold on sell_day yields the highest profit. Ensure that buy_day comes before sell_day. 3. If no profit can be made (i.e., the stock price only decreases or stays the same), the program should output \\"No profit\\". 4. Handle potential input errors gracefully, such as non-integer inputs or an empty list. Your task is to write the complete program according to the specifications. Additionally, explain how your program ensures correct identification of the best buy and sell days, manages input errors, and guarantees the solution works within expected constraints. Here\'s a non-functional code snippet that needs fixing: ```python def max_profit(prices): min_price = float(\'inf\') max_profit = 0 buy_day = sell_day = -1 for i in range(len(prices)): if prices[i] < min_price: min_price = prices[i] buy_day = i if prices[i] - min_price > max_profit: max_profit = prices[i] - min_price sell_day = i if max_profit > 0: return buy_day, sell_day, max_profit else: return \\"No profit\\" print(max_profit([10, 7, 5, 8, 11, 9])) ``` Explain why the given snippet does not fully address the question requirements and how your solution corrects any shortcomings. Include the handling of input errors and edge cases in your explanation.","solution":"def max_profit(prices): # Handle potential input errors if not prices or not isinstance(prices, list) or not all(isinstance(price, int) for price in prices): return \\"Invalid input\\" min_price = float(\'inf\') max_profit = 0 buy_day = sell_day = -1 for i in range(len(prices)): if prices[i] < min_price: min_price = prices[i] buy_day = i if prices[i] - min_price > max_profit: max_profit = prices[i] - min_price sell_day = i if max_profit > 0: return buy_day, sell_day, max_profit else: return \\"No profit\\""},{"question":"Implement a function that takes a list of integers and returns a new list with only the prime numbers from the original list. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. ```python def filter_primes(numbers): # Your code here # Example usage: numbers = [2, 3, 4, 5, 10, 17, 18, 19] print(filter_primes(numbers)) # Output: [2, 3, 5, 17, 19] ```","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the given list `numbers`. return [num for num in numbers if is_prime(num)]"},{"question":"**In Python, write a program using the numpy library that meets the following requirements:** 1. First, create a 2D numpy array from an arbitrarily given list of lists, where each sublist represents a row of the array. The array should contain numeric data for simplicity. 2. Then, write a function to normalize the data values such that the mean of each column is 0 and the standard deviation is 1. This function should take as input the numpy array and output a new array with normalized values. Ensure to handle edge cases such as columns with all identical values or containing zero variance. 3. Additionally, include an example of a common mistake while calculating mean and standard deviation for normalization, and ask the candidate to identify and correct the error. 4. Finally, print both the original and the normalized arrays. Advanced Difficulty: The function should not use any libraries or functions (like sklearn.preprocessing.StandardScaler) apart from numpy and basic mathematical operations.","solution":"import numpy as np def create_array(data): Create a 2D numpy array from the given list of lists. Args: - data: List of lists where each sublist represents a row of the array. Returns: - A 2D numpy array return np.array(data) def normalize_array(arr): Normalize the data values in the numpy array such that the mean of each column is 0 and the standard deviation is 1. Args: - arr: A 2D numpy array. Returns: - A new 2D numpy array with normalized values. mean = np.mean(arr, axis=0) std_dev = np.std(arr, axis=0) # Handle divisions by zero (columns with zero variance). std_dev[std_dev == 0] = 1 normalized_arr = (arr - mean) / std_dev return normalized_arr # Example input data = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Create array array = create_array(data) # Normalize array normalized_array = normalize_array(array) # Print both the original and normalized arrays. print(\\"Original array:\\") print(array) print(\\"nNormalized array:\\") print(normalized_array) # Common mistake example: # Incorrect normalization caused by calculating the mean and std dev across the entire array instead of column-wise. def incorrect_normalize_array(arr): Incorrectly normalize the data values in the numpy array by calculating mean and std dev across the entire array instead of column-wise. Args: - arr: A 2D numpy array. Returns: - A new 2D numpy array with incorrectly normalized values. mean = np.mean(arr) std_dev = np.std(arr) return (arr - mean) / std_dev # Incorrectly normalized array for comparison incorrect_normalized_array = incorrect_normalize_array(array) print(\\"nIncorrectly normalized array:\\") print(incorrect_normalized_array)"},{"question":"Write a function that accepts a string consisting of multiple words. The function should capitalize the first letter of each word and lowercase the rest of the letters in each word. Special characters should remain unchanged. The transformed string should be returned as the output. For instance, given the input \\"gOOD to SEE yoU!\\", the function should return \\"Good To See You!\\". def transform_string(input_str): # Write your code here pass # Example usage: input_str = \\"gOOD to SEE yoU!\\" print(transform_string(input_str)) # Output: \\"Good To See You!\\"","solution":"def transform_string(input_str): Transforms the input string such that the first letter of each word is capitalized and the rest of the letters in each word are in lowercase. Parameters: input_str (str): The input string consisting of multiple words. Returns: str: The transformed string. return \' \'.join(word.capitalize() for word in input_str.split())"},{"question":"You are given a list of tuples, where each tuple contains an individual\'s name and their corresponding score. Write a function that takes this list as its input and returns the names of the individuals in descending order of their scores. If two individuals have the same score, their names should appear in alphabetical order. # Input A list of tuples, where each tuple contains a string (the individual\'s name) and an integer (their score). For example: ```python [(\'Alice\', 92), (\'Bob\', 95), (\'Charlie\', 95), (\'Dave\', 88)] ``` # Output A list of names sorted first by their scores in descending order, and then by their names in alphabetical order in cases of ties. For example: ```python [\'Bob\', \'Charlie\', \'Alice\', \'Dave\'] ``` # Example ```python def sort_by_score(records): # Your code goes here # Sample Input records = [(\'Alice\', 92), (\'Bob\', 95), (\'Charlie\', 95), (\'Dave\', 88)] # Expected Output print(sort_by_score(records)) # Output: [\'Bob\', \'Charlie\', \'Alice\', \'Dave\'] ``` # Requirements - Provide a detailed explanation of your approach. - Ensure the function uses appropriate sorting techniques to achieve the desired output. - Do not use any library functions like `sorted` in a direct way that bypasses the intended learning outcome (i.e., no one-liner solutions).","solution":"def sort_by_score(records): Sorts a list of tuples by the scores first in descending order, and then by names in alphabetical order in case of ties. # Sort the records by two keys: # - Negative score for descending order (large to small) # - Name for alphabetical order in case of ties sorted_records = sorted(records, key=lambda x: (-x[1], x[0])) # Extract the names from the sorted records sorted_names = [record[0] for record in sorted_records] return sorted_names"},{"question":"Write a function `merge_dicts` that takes two dictionaries as input and merges them into a single dictionary. If both dictionaries have the same key, the function should sum the values associated with that key. The function should then sort the merged dictionary by its keys and return a list of tuples, where each tuple contains a key and its corresponding value. # Function Signature ```python def merge_dicts(dict1: dict, dict2: dict) -> list: pass ``` # Example Input ```python dict1 = {\'a\': 5, \'b\': 2, \'c\': 3} dict2 = {\'a\': 7, \'b\': 8, \'d\': 6} ``` # Example Output ```python [(\'a\', 12), (\'b\', 10), (\'c\', 3), (\'d\', 6)] ``` # Constraints - All keys are strings consisting of lowercase letters. - All values are non-negative integers. - The dictionaries can each have between 1 and 100 key-value pairs. - The summed values will fit in a standard 32-bit integer.","solution":"def merge_dicts(dict1: dict, dict2: dict) -> list: Merges two dictionaries, summing values for keys that appear in both. Sorts the merged dictionary by keys and returns a list of tuples. :param dict1: First dictionary to merge. :param dict2: Second dictionary to merge. :return: List of tuples with keys and summed values, sorted by keys. merged_dict = dict1.copy() # Start with a copy of dict1 for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value else: merged_dict[key] = value sorted_merged_dict = sorted(merged_dict.items()) return sorted_merged_dict"},{"question":"Implement a function in Python that takes a list of tuples, where each tuple contains a string and an integer. The function should return a dictionary where the keys are the strings from the tuples, and the values are the sum of the integers associated with each string. If a string appears more than once, its integer values should be added together. ```python def aggregate_tuples(tuple_list): result = {} for item in tuple_list: key, value = item if key in result: result[key] += value else: result[key] = value return result # Example usage: tuple_list = [(\\"apple\\", 2), (\\"banana\\", 3), (\\"apple\\", 4), (\\"orange\\", 1)] print(aggregate_tuples(tuple_list)) # Output: {\'apple\': 6, \'banana\': 3, \'orange\': 1} ``` Write an implementation of the `aggregate_tuples` function.","solution":"def aggregate_tuples(tuple_list): Aggregates a list of tuples into a dictionary by summing the integers for each string key. Parameters: tuple_list (list of tuples): Each tuple contains a string and an integer. Returns: dict: A dictionary where the keys are the strings from the tuples, and the values are the sums of the integers associated with each string. result = {} for item in tuple_list: key, value = item if key in result: result[key] += value else: result[key] = value return result # Example usage: tuple_list = [(\\"apple\\", 2), (\\"banana\\", 3), (\\"apple\\", 4), (\\"orange\\", 1)] print(aggregate_tuples(tuple_list)) # Output: {\'apple\': 6, \'banana\': 3, \'orange\': 1}"},{"question":"Create a function that simulates a basic calculator that can evaluate a mathematical expression containing integers and the operators +, -, *, /. The function should handle operator precedence correctly and support parentheses to denote priority. It should return the correct numerical result of the given expression as output.","solution":"def calculate(expression): Returns the result of the mathematical expression. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # use int() to truncate toward zero def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def calculate_inner(tokens): values = [] operators = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': operators.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while(i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(operators) > 0 and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(tokens[i])): apply_operator(operators, values) operators.append(tokens[i]) i += 1 while len(operators) != 0: apply_operator(operators, values) return values[-1] tokens = list(expression) return calculate_inner(tokens)"},{"question":"<p> You are given an array of integers. Your task is to find all unique triplets in the array that add up to zero. For instance, given the input array [-1, 0, 1, 2, -1, -4], the unique triplets that add up to zero are [-1, 0, 1] and [-1, -1, 2]. </p> <p> Write a function <code>findTriplets(arr)</code> that takes an array of integers as input and returns a list of all unique triplets that sum to zero. The output list should not contain duplicate triplets. </p> <p> <b>Function Signature:</b> <pre> <code> def findTriplets(arr: List[int]) -> List[List[int]]: </code> </pre> </p> <p> <b>Example:</b><br> Input: <code>arr = [-1, 0, 1, 2, -1, -4]</code><br> Output: <code>[[-1, 0, 1], [-1, -1, 2]]</code> </p> <p> <b>Constraints:</b><br> <ul> <li>The array length will be between 1 and 10,000.</li> <li>The array elements will be between -10,000 and 10,000.</li> </ul> </p>","solution":"from typing import List def findTriplets(arr: List[int]) -> List[List[int]]: Returns a list of all unique triplets in the array that sum up to zero. arr.sort() triplets = [] n = len(arr) for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = arr[i] + arr[left] + arr[right] if total == 0: triplets.append([arr[i], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets"},{"question":"Write a Python function that accomplishes the following: Given a string `S` and an integer `K`, shift each character in the string by `K` positions in the alphabet. The function should handle both uppercase (A-Z) and lowercase (a-z) characters. If the shift moves the character past \'Z\' or \'z\', it should wrap around to the start of the alphabet. Non-alphabetic characters should remain unchanged. For example, with an input string \\"Hello, World!\\" and an integer 5, the output should be \\"Mjqqt, Btwqi!\\". ```python def caesar_cipher(S: str, K: int) -> str: result = [] for char in S: if char.isalpha(): # Determine if the character is uppercase or lowercase base = ord(\'A\') if char.isupper() else ord(\'a\') # Perform the shift within bounds of 0-25 and wrap around using modulo shifted_char = chr((ord(char) - base + K) % 26 + base) result.append(shifted_char) else: result.append(char) return \'\'.join(result) # Test the function print(caesar_cipher(\\"Hello, World!\\", 5)) # Output: \\"Mjqqt, Btwqi!\\" ```","solution":"def caesar_cipher(S: str, K: int) -> str: Shifts each letter in the string S by K positions in the alphabet. Wraps around for both lowercase and uppercase letters. Non-alphabetic characters remain unchanged. :param S: The input string to shift. :param K: The number of positions to shift each letter by. :return: The shifted string. result = [] for char in S: if char.isalpha(): base = ord(\'A\') if char.isupper() else ord(\'a\') shifted_char = chr((ord(char) - base + K) % 26 + base) result.append(shifted_char) else: result.append(char) return \'\'.join(result)"},{"question":"Create a function that calculates the average grade for students based on the input data and identifies the student with the highest average grade. The input will be a JSON array of student records, with each student record containing the student\'s name and a list of grades. Your task is to: 1. Parse the JSON response into individual Python dictionaries. 2. Calculate the average grade for each student. 3. Identify the student with the highest average grade and return their name and average grade. JSON Response Example: ``` [ { \\"name\\": \\"Alice\\", \\"grades\\": [85, 90, 92] }, { \\"name\\": \\"Bob\\", \\"grades\\": [78, 81, 85] }, { \\"name\\": \\"Charlie\\", \\"grades\\": [95, 96, 97] } ] ``` In addition, write appropriate unit tests to ensure your solution handles edge cases correctly. Consider cases such as: 1. Invalid JSON format 2. Missing grades parameter 3. Grades parameter is empty 4. Grades contain non-numeric values","solution":"import json def calculate_average_grade(data): Calculate the average grades for students and identify the student with the highest average grade. Parameters: - data: JSON, a list of student records with names and grades Returns: - A tuple containing the name of the student with the highest average grade and the average grade itself. students = json.loads(data) highest_avg_grade = None top_student = None for student in students: if \'grades\' not in student: continue grades = student[\'grades\'] if not grades: continue avg_grade = sum(grades) / len(grades) if highest_avg_grade is None or avg_grade > highest_avg_grade: highest_avg_grade = avg_grade top_student = student[\'name\'] return (top_student, highest_avg_grade)"},{"question":"Write a Python function that takes a list of integers as input and returns the list with duplicate numbers removed while preserving the original order of elements. You should not use any additional data structures like sets or dictionaries. Write your code in an efficient manner. # Function Signature ```python def remove_duplicates(lst: list) -> list: pass ``` # Example ```python # Input: [1, 2, 2, 3, 4, 4, 5] # Output: [1, 2, 3, 4, 5] # Input: [4, 5, 6, 4, 7, 8, 5] # Output: [4, 5, 6, 7, 8] ``` # Constraints - The input list will have at most 10,000 elements. - All elements in the list are integers. - Elements in the list can be negative, zero, or positive.","solution":"def remove_duplicates(lst: list) -> list: Removes duplicate numbers from the list while preserving the original order of elements. result = [] for num in lst: if num not in result: result.append(num) return result"},{"question":"Create a function named `find_missing_number` that takes a list of unique integers ranging from 1 to n (inclusive), where one number is missing. The function should find and return the missing number. For example, if the input list is `[1, 2, 4, 5, 6]`, the output should be `3` since `3` is the missing number in the range from 1 to 6. ```python def find_missing_number(arr): n = len(arr) + 1 total = n * (n + 1) // 2 sum_of_arr = sum(arr) return total - sum_of_arr # Example usage: # arr = [1, 2, 4, 5, 6] # print(find_missing_number(arr)) # Output: 3 ```","solution":"def find_missing_number(arr): This function finds the missing number in a list of unique integers ranging from 1 to n. Args: arr (list): A list of unique integers with one integer missing in the range from 1 to n. Returns: int: The missing number. n = len(arr) + 1 total = n * (n + 1) // 2 sum_of_arr = sum(arr) return total - sum_of_arr"},{"question":"You are given a list of integers representing the prices of different items in a store. The storeowner wants to find out the maximum total price of items that can be bought without exceeding a certain budget. However, you can only select a continuous subarray of items from the list. Write a function to determine this maximum total price. The function \\"max_spend_within_budget(prices, budget)\\" takes two arguments: 1. prices: a list of integers representing the prices of items. 2. budget: an integer representing the maximum allowable spending. The function should return an integer representing the maximum total price of a continuous subarray that does not exceed the budget. For example, if the prices are [100, 200, 300, 400, 500] and the budget is 800, the function should return 700 (from the subarray [300, 400]). If there is no subarray that can be formed within the budget, the function should return 0.","solution":"def max_spend_within_budget(prices, budget): Finds the maximum total price of a continuous subarray that does not exceed the budget. Args: prices: List of integers representing the prices of items. budget: An integer representing the maximum allowable spending. Returns: Integer representing the maximum total price of a continuous subarray that does not exceed the budget. n = len(prices) max_spend = 0 current_sum = 0 start = 0 for end in range(n): current_sum += prices[end] while current_sum > budget and start <= end: current_sum -= prices[start] start += 1 if current_sum <= budget: max_spend = max(max_spend, current_sum) return max_spend"},{"question":"Write a function that takes an integer n as input and returns a list of the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: the first two numbers are 0 and 1, and each subsequent number is the sum of the previous two.","solution":"def fibonacci(n): Returns a list of the first n numbers in the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a recursive function in Python that reverses a given nested list. The nested list can contain lists within lists to any depth. The function should maintain the structure of the nested list but reverse the order of elements at each level. Provide test cases with varying depths of nesting and mixed data types (integers, strings, floats, etc.) to ensure the function works correctly in all scenarios.","solution":"def reverse_nested_list(nested_list): Recursively reverses a given nested list. The function maintains the structure of the nested list but reverses the order of elements at each level. :param nested_list: list to be reversed :return: reversed nested list if not isinstance(nested_list, list): return nested_list return [reverse_nested_list(item) for item in reversed(nested_list)]"},{"question":"Write a function called `make_change` that calculates the minimum number of coins needed to make a given amount of money. The function should take two arguments: 1. A list of coin denominations `coins`, where `coins[i]` is the value of the `i-th` coin type. 2. An integer `amount` representing the total amount of money to make change for. The function should return an integer representing the minimum number of coins required to make the given amount. If it is not possible to make the given amount with the available coin denominations, return -1. **Constraints:** - All values in the `coins` list will be positive integers. - The `amount` will be a non-negative integer. - The function should handle up to 10^4 coins denominations and an amount up to 10^4. **Example 1:** ```python coins = [1, 2, 5] amount = 11 make_change(coins, amount) ``` **Output:** ``` 3 ``` (11 = 5 + 5 + 1) **Example 2:** ```python coins = [2] amount = 3 make_change(coins, amount) ``` **Output:** ``` -1 ``` (It is not possible to make 3 with only a coin of 2) **Example 3:** ```python coins = [1] amount = 0 make_change(coins, amount) ``` **Output:** ``` 0 ``` (Zero amount requires zero coins) The solution should efficiently use dynamic programming to achieve a time complexity of O(n * m), where `n` is the number of coins and `m` is the amount.","solution":"def make_change(coins, amount): Given a list of coin denominations and a target amount, returns the minimum number of coins required to make the amount. If it is not possible to make the amount, returns -1. # Dynamic programming list to store the minimum coins needed for each value from 0 to amount dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Iterate through each coin and update the dp list for coin in coins: for x in range(coin, amount + 1): if dp[x - coin] != float(\'inf\'): # If we can make the amount (x - coin) dp[x] = min(dp[x], dp[x - coin] + 1) # Return -1 if dp[amount] is still infinity, meaning we couldn\'t make the amount return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"Write a Python function that takes a list of numbers and returns the list sorted in ascending order. Use the merge sort algorithm to implement this function. Example: ``` Input: [34, 7, 23, 32, 5, 62] Output: [5, 7, 23, 32, 34, 62] ``` Hints: 1. Merge sort is a divide-and-conquer algorithm that splits the list into halves, recursively sorts each half, and then merges the sorted halves. 2. Make sure to implement both the `merge` and the `merge_sort` functions.","solution":"def merge(left, right): Merges two sorted lists into one sorted list. result = [] i = j = 0 # Traverse both lists and insert the smallest element from either list into the result list while i < len(left) and j < len(right): if left[i] <= right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 # Append remaining elements of left or right list, if any result.extend(left[i:]) result.extend(right[j:]) return result def merge_sort(numbers): Sorts a list of numbers in ascending order using the merge sort algorithm. if len(numbers) <= 1: return numbers # Divide the list into two halves mid = len(numbers) // 2 left_half = merge_sort(numbers[:mid]) right_half = merge_sort(numbers[mid:]) # Merge the sorted halves return merge(left_half, right_half)"},{"question":"Given a matrix filled with integers, determine the maximum sum of elements in any row and return the sum along with the row index (0-based). For instance, consider the matrix: matrix = [ [3, 8, 1, 9], [2, 7, 9, 4], [5, 6, 3, 2], [4, 3, 8, 7] ] # Incorrect code sample: ```python def row_with_max_sum(matrix): max_sum = 0 row_index = 0 for i in range(len(matrix)): row_sum = sum(matrix[i]) if row_sum >= max_sum: # Incorrect comparison operator max_sum = row_sum row_index = i return max_sum, row_index print(row_with_max_sum([ [3, 8, 1, 9], [2, 7, 9, 4], [5, 6, 3, 2], [4, 3, 8, 7] ])) # Incorrect output ``` # Correct code sample: ```python def row_with_max_sum(matrix): max_sum = float(\'-inf\') row_index = -1 for i in range(len(matrix)): row_sum = sum(matrix[i]) if row_sum > max_sum: # Correct comparison operator max_sum = row_sum row_index = i return max_sum, row_index print(row_with_max_sum([ [3, 8, 1, 9], [2, 7, 9, 4], [5, 6, 3, 2], [4, 3, 8, 7] ])) # Correct output ``` Note: If two rows have the same sum, the function should return the index of the first such row.","solution":"def row_with_max_sum(matrix): Given a matrix (list of lists) filled with integers, returns the maximum sum of elements in any row and the row index (0-based). Parameters: matrix (list of lists of int): The input matrix. Returns: tuple: A tuple containing the maximum sum and the row index. max_sum = float(\'-inf\') # Initialize to negative infinity row_index = -1 # Initialize to an invalid index for i in range(len(matrix)): row_sum = sum(matrix[i]) if row_sum > max_sum: max_sum = row_sum row_index = i return max_sum, row_index"},{"question":"Write a function that takes a nested list and flattens it into a single list of values, while preserving the order of elements as they appear in the original structure. The function should be able to handle any level of nesting and manage both empty lists and different data types seamlessly. nested_list = [1, [2, [3, 4], 5], 6, [7, [8, [9], 10], 11], 12, []] Example: Input: [1, [2, [3, 4], 5], 6, [7, [8, [9], 10], 11], 12, []] Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] Write and test the function in your preferred programming language.","solution":"def flatten(nested_list): Flattens a nested list into a single list of values while preserving the order. result = [] for element in nested_list: if isinstance(element, list): result.extend(flatten(element)) else: result.append(element) return result"},{"question":"Write a function that takes a string as input and returns a dictionary. The dictionary should contain the count of each character in the string, regardless of case (i.e., treat uppercase and lowercase characters as the same). Do not use any built-in functions for counting characters. input_str = \\"HelloWorld\\"","solution":"def count_characters(input_str): Returns a dictionary with the count of each character in input_str. Case insensitivity is achieved by converting all characters to lowercase. count_dict = {} for char in input_str.lower(): if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Develop a function that takes a list of integers and returns the maximum difference between any two elements in the list such that the larger element appears after the smaller element. If the list has less than two elements, return -1. Implement the partially filled function: from typing import List def max_difference(arr: List[int]) -> int: Compute the maximum difference between any two elements in the list such that the larger element appears after the smaller element. Return -1 if the list has less than two elements. # your code here #Test your function with the following: #max_difference([7, 1, 5, 4]) -> 4 #max_difference([9, 4, 3, 2]) -> -1 #max_difference([1, 2, 90, 10, 110]) -> 109 #max_difference([]) -> -1 #max_difference([9]) -> -1","solution":"from typing import List def max_difference(arr: List[int]) -> int: Compute the maximum difference between any two elements in the list such that the larger element appears after the smaller element. Return -1 if the list has less than two elements. if len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Write a program that takes a string containing an arithmetic expression with integers and the operators +, -, *, and /. The program should parse the string and compute the resulting value, taking into account the correct order of operations (PEMDAS/BODMAS rules). Additionally, enhance the program to handle expressions with nested parentheses and provide a validation for malformed expressions (e.g., unbalanced parentheses or invalid characters).","solution":"import re operators = set([\'+\', \'-\', \'*\', \'/\', \'(\', \')\']) priority = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} def infix_to_postfix(expression): stack = [] output = \'\' for char in expression: if char not in operators: output+= char elif char==\'(\': stack.append(\'(\') elif char==\')\': while stack and stack[-1]!= \'(\': output+= stack.pop() stack.pop() else: while stack and stack[-1]!=\'(\' and priority[char]<=priority[stack[-1]]: output+= stack.pop() stack.append(char) while stack: output+= stack.pop() return output def evaluate_postfix(expression): stack = [] for char in expression: if char not in operators: stack.append(int(char)) else: b = stack.pop() a = stack.pop() if char == \'+\': stack.append(a + b) elif char == \'-\': stack.append(a - b) elif char == \'*\': stack.append(a * b) elif char == \'/\': stack.append(a / b) return stack[0] def validate_expression(expression): if re.search(r\'[^0-9+-*/() ]\', expression): return False if expression.count(\'(\') != expression.count(\')\'): return False return True def compute_expression(expression): if not validate_expression(expression): raise ValueError(\\"Invalid Expression\\") expression = re.sub(r\'s+\', \'\', expression) postfix_expr = infix_to_postfix(expression) return evaluate_postfix(postfix_expr)"},{"question":"Write a function that processes a list of transactions represented by tuples and generates a summary of the monthly expenses. Each tuple represents a transaction and contains three elements: `(Date, Amount, Category)`, where: - `Date` is a string in the format \'YYYY-MM-DD\'. - `Amount` is a float representing the amount of the transaction. - `Category` is a string representing the category of the expense. The function should return a dictionary where each key is a string representing the month in \'YYYY-MM\' format, and each value is a list of tuples, where each tuple contains a category and the total amount spent on that category in that month. Example input list: transactions = [ (\'2023-01-15\', 50.00, \'Groceries\'), (\'2023-01-20\', 200.00, \'Electronics\'), (\'2023-02-10\', 30.00, \'Groceries\'), (\'2023-02-15\', 20.00, \'Transportation\'), (\'2023-01-30\', 80.00, \'Utilities\'), (\'2023-02-28\', 150.00, \'Electronics\') ] Example output: { \'2023-01\': [(\'Groceries\', 50.00), (\'Electronics\', 200.00), (\'Utilities\', 80.00)], \'2023-02\': [(\'Groceries\', 30.00), (\'Transportation\', 20.00), (\'Electronics\', 150.00)] } The function should consolidate the data by summing up the amounts for the same category within each month.","solution":"def summarize_monthly_expenses(transactions): Processes a list of transactions and returns a summary of monthly expenses. Each transaction is represented by a tuple: (Date, Amount, Category). The function returns a dictionary where each key is a string representing the month in \'YYYY-MM\' format, and each value is a list of tuples, where each tuple contains a category and the total amount spent on that category in that month. from collections import defaultdict monthly_summary = defaultdict(lambda: defaultdict(float)) for date, amount, category in transactions: month = date[:7] # Extract \'YYYY-MM\' format from date monthly_summary[month][category] += amount # Convert defaultdict to regular dictionary for final output summarized_expenses = { month: list(category_totals.items()) for month, category_totals in monthly_summary.items() } return summarized_expenses"},{"question":"Given an integer array `nums`, return the maximum difference between two elements such that the larger element comes after the smaller element. If no such elements exist, return `-1`. Example 1: Input: `nums = [7, 1, 5, 3, 6, 4]` Output: `5` Explanation: The maximum difference is between nums[1] = 1 and nums[4] = 6. Example 2: Input: `nums = [9, 4, 3, 2]` Output: `-1` Explanation: No element is larger and comes after a smaller element. Example 3: Input: `nums = [1, 2, 3, 5, 6, 4]` Output: `5` Explanation: The maximum difference is between nums[0] = 1 and nums[4] = 6. Constraints: - The number of elements in `nums` is in the range `[2, 105]`. - `-109 <= nums[i] <= 109`.","solution":"def max_difference(nums): Returns the maximum difference between two elements such that the larger element comes after the smaller element. If no such elements exist, return -1. if not nums or len(nums) < 2: return -1 min_element = nums[0] max_diff = -1 for i in range(1, len(nums)): if nums[i] > min_element: max_diff = max(max_diff, nums[i] - min_element) else: min_element = min(min_element, nums[i]) return max_diff"},{"question":"Write a function `list_duplicates` which takes a list of integers and returns a list of integers that are duplicates, sorted in ascending order. The result list should contain each duplicate only once, even if it appears multiple times in the input list. Ensure the function handles large lists efficiently and includes proper edge cases. Function Signature: ```python def list_duplicates(nums: List[int]) -> List[int]: pass ``` Example: ```python # Input list_duplicates([4, 3, 2, 7, 8, 2, 3, 1]) # Output [2, 3] # Input list_duplicates([1, 2, 3, 4, 5]) # Output [] # Input list_duplicates([10, 10, 10]) # Output [10] ```","solution":"from typing import List def list_duplicates(nums: List[int]) -> List[int]: Returns a list of duplicates in the input list nums, sorted in ascending order. Each duplicate number appears only once in the returned list. seen = set() duplicates = set() for number in nums: if number in seen: duplicates.add(number) else: seen.add(number) return sorted(duplicates)"},{"question":"Given an array of integers and a target value, write a function to find the indices of the two numbers that add up to the target value. Assume there is exactly one solution. Return the indices in any order. Example: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target value. :param nums: List of integers :param target: Target sum :return: List containing the indices of the two numbers num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Write a function that takes in a string consisting of lowercase and uppercase letters, and reorganizes it so that no two adjacent characters are the same. If such an arrangement is not possible, the function should return an empty string \\"\\". The function should strive to achieve this with a focus on time complexity and efficiency.","solution":"from heapq import heappush, heappop from collections import Counter def reorganize_string(s): Reorganize the input string such that no two adjacent characters are the same. If it is not possible to rearrange the characters, return an empty string. # Count the frequency of each character char_counts = Counter(s) # Maximum heap to store the most frequent characters max_heap = [] for char, count in char_counts.items(): if count > (len(s) + 1) // 2: return \\"\\" heappush(max_heap, (-count, char)) prev_count, prev_char = 0, \\"\\" result = [] while max_heap: count, char = heappop(max_heap) result.append(char) # Push the previous character back to the heap if its count is not zero if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char return \\"\\".join(result)"},{"question":"You are tasked with creating a Python application that uses the OpenAI API to generate text summaries for a given piece of content. Your program should accept a text file as input, send the content to the OpenAI API, and retrieve a summary that it saves to a new text file specified by the user. Ensure your application handles exceptions and provides meaningful error messages for issues such as invalid API keys, connectivity problems, or API limit exceeded errors. Requirements: 1. Use the `requests` library to interact with the OpenAI API. 2. Handle file reading/writing operations with appropriate error handling. 3. Include inline comments to explain the key sections of your code. ```python import requests import json def summarize_text(api_key, input_file, output_file): try: # Read input file with open(input_file, \'r\') as file: content = file.read() # Setup API request url = \\"https://api.openai.com/v1/engines/davinci-codex/completions\\" headers = { \'Content-Type\': \'application/json\', \'Authorization\': f\'Bearer {api_key}\', } data = { \\"prompt\\": f\\"Summarize the following text:nn{content}nnSummary:\\", \\"max_tokens\\": 150, \\"temperature\\": 0.7, } # Send API request response = requests.post(url, headers=headers, data=json.dumps(data)) response.raise_for_status() # Process API response result = response.json() summary = result[\'choices\'][0][\'text\'].strip() # Write summary to output file with open(output_file, \'w\') as file: file.write(summary) print(f\\"Summary saved to {output_file}\\") except requests.exceptions.RequestException as e: print(f\\"An error occurred while communicating with the OpenAI API: {e}\\") except IOError as e: print(f\\"File error: {e}\\") except Exception as e: print(f\\"An unexpected error occurred: {e}\\") # Example usage api_key = \\"YOUR_OPENAI_API_KEY\\" input_file = \\"input.txt\\" output_file = \\"summary.txt\\" summarize_text(api_key, input_file, output_file) ``` Ensure to replace `\\"YOUR_OPENAI_API_KEY\\"` with your actual OpenAI API key. This application reads the content from `input.txt`, generates a summary using the OpenAI API, and saves the summary to `summary.txt`.","solution":"import requests import json def summarize_text(api_key, input_file, output_file): try: # Read input file with open(input_file, \'r\') as file: content = file.read() # Setup API request url = \\"https://api.openai.com/v1/engines/davinci-codex/completions\\" headers = { \'Content-Type\': \'application/json\', \'Authorization\': f\'Bearer {api_key}\', } data = { \\"prompt\\": f\\"Summarize the following text:nn{content}nnSummary:\\", \\"max_tokens\\": 150, \\"temperature\\": 0.7, } # Send API request response = requests.post(url, headers=headers, data=json.dumps(data)) response.raise_for_status() # Process API response result = response.json() summary = result[\'choices\'][0][\'text\'].strip() # Write summary to output file with open(output_file, \'w\') as file: file.write(summary) print(f\\"Summary saved to {output_file}\\") except requests.exceptions.RequestException as e: print(f\\"An error occurred while communicating with the OpenAI API: {e}\\") except IOError as e: print(f\\"File error: {e}\\") except Exception as e: print(f\\"An unexpected error occurred: {e}\\")"},{"question":"Write a function to validate a string based on a set of rules and generate a valid string if possible. The rules are as follows: 1. The string should contain only the characters \'a\', \'b\', and \'c\'. 2. The string must be exactly 7 characters long. 3. The string should not contain more than three consecutive identical characters. 4. \'c\' should appear at least twice in the string. If the string passes all these checks, return \\"Valid String\\". If it doesn\'t, generate and return the closest possible valid string based on the above rules. Your task is to implement this function along with an explanation of your approach. Additionally, document the time complexity of your solution. Provide test cases to validate your solution, including edge cases and different scenarios like strings with all identical characters, strings with mixed characters, strings shorter or longer than 7 characters, and strings that do not have \'c\' at least twice.","solution":"def validate_and_generate_string(s): Validates a given string based on a set of rules and generates a valid string if it doesn\'t pass the checks. The rules are: 1. The string should contain only the characters \'a\', \'b\', and \'c\'. 2. The string must be exactly 7 characters long. 3. The string should not contain more than three consecutive identical characters. 4. \'c\' should appear at least twice in the string. Args: s (str): The input string to be validated. Returns: str: \\"Valid String\\" if the string passes all checks, otherwise the closest possible valid string. def generate_valid_string(): # Generate a base valid string \'abcabca\'. return \\"abcabca\\" def has_only_abc_chars(s): return all(char in \'abc\' for char in s) def has_exactly_seven_chars(s): return len(s) == 7 def has_no_more_than_three_consecutive_identical_chars(s): for i in range(len(s) - 3): if s[i] == s[i+1] == s[i+2] == s[i+3]: return False return True def has_at_least_two_cs(s): return s.count(\'c\') >= 2 if not has_only_abc_chars(s): return generate_valid_string() # if it does not contain only \'abc\' characters if not has_exactly_seven_chars(s): return generate_valid_string() # if it is not exactly seven characters long if not has_no_more_than_three_consecutive_identical_chars(s): return generate_valid_string() # if it contains more than three consecutive identical characters if not has_at_least_two_cs(s): return generate_valid_string() # if it doesn\'t contain at least two \'c\'s return \\"Valid String\\""},{"question":"Write a Python function that accepts a string and returns a dictionary where the keys are the characters in the string, and the values are the number of times each character appears. Ensure the function accounts for both uppercase and lowercase versions of a character as the same character. For example, the string \\"Programming\\" should be treated as \\"programming\\" and return {\'p\': 1, \'r\': 2, \'o\': 1, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 1, \'n\': 1}.","solution":"def char_count(s): Returns a dictionary with the count of each character in the string, treating uppercase and lowercase characters as the same. s = s.lower() count_dict = {} for char in s: count_dict[char] = count_dict.get(char, 0) + 1 return count_dict"},{"question":"Write a function that takes a list of integers and returns the list sorted in ascending order, but with all prime numbers positioned at the end of the list. The function should handle erroneous inputs gracefully: it should throw a custom error if the input is not a list, or if any element in the list is not an integer. For instance, if the input list is [10, 3, 5, 7, 2, 1], the correct output should be [1, 10, 3, 5, 7, 2], with the prime numbers (3, 5, 7, and 2) moved to the end after sorting the non-prime numbers (1 and 10). Here\'s a reference of incorrect code which tries to sort the list but does not handle non-list inputs or non-integer elements correctly: ```python def sort_misplaced_primes(input_list): return sorted(input_list) print(sort_misplaced_primes([10, 3, 5, 7, 2, 1])) ``` The function does not work as expected and it should properly separate and sort the primes and non-primes. Provide the corrected code. Note: A prime number is defined as any integer greater than 1 that has no divisors other than 1 and itself.","solution":"class InvalidInputException(Exception): pass def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sort_misplaced_primes(input_list): This function takes a list of integers and returns the list sorted in ascending order with all prime numbers positioned at the end of the list. if not isinstance(input_list, list): raise InvalidInputException(\\"Input should be a list.\\") if not all(isinstance(i, int) for i in input_list): raise InvalidInputException(\\"All elements in the list should be integers.\\") non_primes = sorted([x for x in input_list if not is_prime(x)]) primes = [x for x in input_list if is_prime(x)] return non_primes + primes"},{"question":"Write a function to evaluate the sentiment of a given sentence using the AFINN lexicon (a list of words rated for valence with an integer between -5 and +5). The lexicon can be found at the following URL: https://github.com/fnielsen/afinn/blob/master/afinn/data/AFINN-111.txt?raw=true. Your function should take a string as input and return the sentiment score of the sentence by summing the sentiments of each word found within the lexicon. If a word is not in the lexicon, it should contribute a score of 0.","solution":"import requests def load_afinn_lexicon(): Loads the AFINN lexicon from the specified URL. url = \\"https://github.com/fnielsen/afinn/blob/master/afinn/data/AFINN-111.txt?raw=true\\" response = requests.get(url) lexicon = {} for line in response.text.strip().split(\'n\'): word, score = line.split(\'t\') lexicon[word] = int(score) return lexicon def sentiment_score(sentence, lexicon): Evaluates the sentiment of a given sentence using the AFINN lexicon. words = sentence.split() score = 0 for word in words: score += lexicon.get(word.lower(), 0) return score # Load the lexicon once and pass it to the sentiment_score function lexicon = load_afinn_lexicon()"},{"question":"Write a Python function that reads a list of integers and returns a list of tuples, each containing a number and its frequency in the original list. The output list of tuples should be sorted in descending order of frequency, and for numbers with the same frequency, by the number in ascending order. Example: - Input: [4, 6, 2, 4, 3, 2, 6, 6] - Output: [(6, 3), (2, 2), (4, 2), (3, 1)]","solution":"from collections import Counter def frequency_list(input_list): Reads a list of integers and returns a list of tuples, each containing a number and its frequency in the original list. The output list is sorted in descending order of frequency, and for numbers with the same frequency, by the number in ascending order. frequency_counter = Counter(input_list) sorted_frequency = sorted(frequency_counter.items(), key=lambda x: (-x[1], x[0])) return sorted_frequency"},{"question":"Given an array of integers, write a function to find the first non-repeating integer in the array. If there is no non-repeating integer, return `None`. The solution should consider both positive and negative numbers. For example, given array = [4, 5, 1, 2, 0, 4, 5, 1, 2], the output should be: 0 For another example, given array = [-10, -1, -2, -10, -3, -1, -2], the output should be: -3 If there are no non-repeating integers, such as for array = [2, 2, 3, 3], the output should be: None","solution":"def find_first_non_repeating(arr): Finds the first non-repeating integer in the array. If there is no non-repeating integer, return None. count_map = {} # First pass: count occurrences of each number for num in arr: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 # Second pass: find the first non-repeating number for num in arr: if count_map[num] == 1: return num # If no non-repeating integer is found return None"},{"question":"**Problem Statement:** Given a list of course prerequisites, write a function to determine whether it is possible to finish all courses. Each pair of courses in the input list represents a prerequisite relationship, where the first course in the pair is a prerequisite of the second course. For example, given four courses (numbered 0 to 3) and the following list of prerequisites: ``` [[1, 0], [2, 1], [3, 2]] ``` The prerequisites mean: - To take course 1, you must first complete course 0. - To take course 2, you must first complete course 1. - To take course 3, you must first complete course 2. In this scenario, it is possible to finish all the courses. Conversely, given a cyclic dependency: ``` [[1, 0], [0, 1]] ``` It would be impossible to complete the courses, because course 0 depends on course 1, and course 1 depends on course 0, creating a cycle. # Function Signature ```python def can_finish_courses(num_courses: int, prerequisites: List[List[int]]) -> bool: pass ``` # Input - `num_courses` (int): the total number of courses, labeled from `0` to `num_courses-1`. - `prerequisites` (List[List[int]]): a list of prerequisite pairs of courses. # Output - `bool`: `True` if it is possible to finish all the courses, `False` otherwise. # Constraints - The number of courses (`num_courses`) will not exceed 1000. - The number of prerequisite pairs will not exceed 5000. # Example ```python assert can_finish_courses(4, [[1, 0], [2, 1], [3, 2]]) == True assert can_finish_courses(2, [[1, 0], [0, 1]]) == False ``` # Note Use graph traversal techniques such as Depth-First Search (DFS) or Breadth-First Search (BFS) to detect cycles in the course prerequisite graph. If a cycle is detected, it is impossible to complete all courses.","solution":"from typing import List def can_finish_courses(num_courses: int, prerequisites: List[List[int]]) -> bool: from collections import defaultdict, deque # Create an adjacency list of the graph adj_list = defaultdict(list) indegree = [0] * num_courses for dest, src in prerequisites: adj_list[src].append(dest) indegree[dest] += 1 # Queue for the courses with no prerequisites zero_indegree_queue = deque([k for k in range(num_courses) if indegree[k] == 0]) # Number of visited courses visited_courses = 0 while zero_indegree_queue: course = zero_indegree_queue.popleft() visited_courses += 1 # Decrease the indegree of neighbor nodes (courses depending on current course) for neighbor in adj_list[course]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree_queue.append(neighbor) # If we visited all courses, return True. Otherwise, there is a cycle return visited_courses == num_courses"},{"question":"Consider a list of integers where each integer represents the price of a stock on a given day. You are allowed to complete at most two transactions, where a transaction is defined as buying one and selling one share of the stock. Design an algorithm to find the maximum profit you can achieve under these constraints. Note that you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). **Constraints:** - The length of the list will be between 1 and 1000. - Each price will be a non-negative integer less than or equal to 10000. **Function Signature:** ```python def maxProfitWithTwoTransactions(prices: List[int]) -> int: pass ``` **Example:** ```python Input: [3,3,5,0,0,3,1,4] Output: 6 Explanation: - Buy on day 4 (price=0) and sell on day 6 (price=3), profit = 3-0 = 3. - Buy on day 7 (price=1) and sell on day 8 (price=4), profit = 4-1 = 3. - Total profit = 3 + 3 = 6. Input: [1,2,3,4,5] Output: 4 Explanation: - Buy on day 1 (price=1) and sell on day 5 (price=5), profit = 5-1 = 4. - No second transaction is needed, total profit = 4. Input: [7,6,4,3,1] Output: 0 Explanation: - No transactions are done, hence maximum profit = 0. ``` **Note:** Your algorithm should run in O(n) time complexity and use O(1) space complexity.","solution":"def maxProfitWithTwoTransactions(prices): if not prices: return 0 # First transaction first_buy = float(\'-inf\') first_sell = 0 # Second transaction second_buy = float(\'-inf\') second_sell = 0 for price in prices: # If we had bought the stock in the first transaction first_buy = max(first_buy, -price) # If we had sold the stock in the first transaction first_sell = max(first_sell, first_buy + price) # If we had bought the stock in the second transaction (after first sell) second_buy = max(second_buy, first_sell - price) # If we had sold the stock in the second transaction second_sell = max(second_sell, second_buy + price) return second_sell"},{"question":"You are given an array of integers representing stock prices on different days. Write a Python function to determine the maximum profit you could achieve by buying at the lowest price and selling at the highest price after the buy. Assume that you cannot sell a stock before you buy one. def max_profit(prices: List[int]) -> int: Example: Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. (Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.)","solution":"from typing import List def max_profit(prices: List[int]) -> int: Determines the maximum profit from buying and selling a stock. :param prices: List of stock prices on different days. :return: Maximum profit. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a Python function named `fibonacci_n` which, when given an integer `n`, returns the n-th Fibonacci number. The function should use an iterative approach rather than recursion to calculate the Fibonacci sequence. Here\'s the signature of the function: ```python def fibonacci_n(n: int) -> int: ``` For example, `fibonacci_n(6)` should return `8`, as the first few Fibonacci numbers are `0, 1, 1, 2, 3, 5, 8`. Additionally, include error handling in your function to raise a `ValueError` if the input `n` is negative, as Fibonacci numbers are not defined for negative indices.","solution":"def fibonacci_n(n: int) -> int: Returns the n-th Fibonacci number using an iterative approach. Parameters: n (int): The index in the Fibonacci sequence to return. Returns: int: The n-th Fibonacci number. Raises: ValueError: If the input n is negative. if n < 0: raise ValueError(\\"Fibonacci numbers are not defined for negative indices\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function in Python that takes an array of integers where each element represents the maximum jump length you can take at that position, and determines if you can reach the last index starting from the first index. The function should return a boolean value: `True` if you can reach the last index, and `False` otherwise. For example: - Given the array `[2,3,1,1,4]`, the function should return `True` because you can jump from index 0 to index 1 (with a jump of length 2), then to the last index (with a jump of length 3). - Given the array `[3,2,1,0,4]`, the function should return `False` because you will always arrive at index 3 which has a jump length of 0, and thus you cannot move any further.","solution":"def can_jump(nums): Determines if you can reach the last index of the array starting from the first index. :param nums: List[int] - array of integers where each element represents the maximum jump length at that position :return: bool - True if you can reach the last index, False otherwise max_reachable = 0 for i, jump in enumerate(nums): if i > max_reachable: return False max_reachable = max(max_reachable, i + jump) return True"},{"question":"Design a function that takes a list of integers and returns a new list with all the even numbers sorted in ascending order, while the odd numbers remain in their original positions. For example, given the list [5, 3, 2, 8, 1, 4], the function should return [5, 3, 2, 4, 1, 8].","solution":"def sort_even_numbers(lst): Takes a list of integers and returns a new list with all the even numbers sorted in ascending order, while the odd numbers remain in their original positions. Parameters: lst (list of int): The list of integers. Returns: list of int: The list with even numbers sorted and odd numbers in their original positions. # Extract even numbers and sort them even_numbers = sorted([x for x in lst if x % 2 == 0]) result = [] even_index = 0 # Construct the result list by replacing even numbers with sorted ones and keeping odds in place for num in lst: if num % 2 == 0: result.append(even_numbers[even_index]) even_index += 1 else: result.append(num) return result"},{"question":"Design a feature selection process for a machine learning model using the Wine Quality dataset available at https://archive.ics.uci.edu/ml/datasets/wine+quality. Implement feature selection techniques such as recursive feature elimination (RFE), Lasso regression, and principal component analysis (PCA) to identify the most significant features. Train a classifier (e.g., Logistic Regression or Decision Tree) using the selected features. Use stratified k-fold cross-validation to evaluate the model performance. Analyze and compare the results of the different feature selection methods in terms of model accuracy, precision, recall, and F1-Score. Elaborate on any data preprocessing steps you took and discuss the potential implications of feature selection on model performance and computational efficiency.","solution":"import pandas as pd from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LogisticRegression, LassoCV from sklearn.feature_selection import RFE from sklearn.decomposition import PCA from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score import numpy as np URL = \\"https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv\\" df = pd.read_csv(URL, sep=\';\') # Data preprocessing X = df.drop(\\"quality\\", axis=1) y = df[\\"quality\\"] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y) # Standardization scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # Initialize Logistic regression model = LogisticRegression(max_iter=10000) def train_and_evaluate_model(X_train, X_test, y_train, y_test): model.fit(X_train, y_train) y_pred = model.predict(X_test) accuracy = accuracy_score(y_test, y_pred) precision = precision_score(y_test, y_pred, average=\'weighted\') recall = recall_score(y_test, y_pred, average=\'weighted\') f1 = f1_score(y_test, y_pred, average=\'weighted\') return accuracy, precision, recall, f1 # Recursive Feature Elimination (RFE) selector_rfe = RFE(estimator=model, n_features_to_select=5, step=1) selector_rfe = selector_rfe.fit(X_train_scaled, y_train) X_train_rfe = selector_rfe.transform(X_train_scaled) X_test_rfe = selector_rfe.transform(X_test_scaled) accuracy_rfe, precision_rfe, recall_rfe, f1_rfe = train_and_evaluate_model(X_train_rfe, X_test_rfe, y_train, y_test) # Lasso Feature Selection lasso = LassoCV(cv=5).fit(X_train_scaled, y_train) importance_lasso = np.abs(lasso.coef_) features_lasso = np.argsort(importance_lasso)[-5:] X_train_lasso = X_train_scaled[:, features_lasso] X_test_lasso = X_test_scaled[:, features_lasso] accuracy_lasso, precision_lasso, recall_lasso, f1_lasso = train_and_evaluate_model(X_train_lasso, X_test_lasso, y_train, y_test) # Principal Component Analysis (PCA) pca = PCA(n_components=5) X_train_pca = pca.fit_transform(X_train_scaled) X_test_pca = pca.transform(X_test_scaled) accuracy_pca, precision_pca, recall_pca, f1_pca = train_and_evaluate_model(X_train_pca, X_test_pca, y_train, y_test) results = { \'RFE\': (accuracy_rfe, precision_rfe, recall_rfe, f1_rfe), \'Lasso\': (accuracy_lasso, precision_lasso, recall_lasso, f1_lasso), \'PCA\': (accuracy_pca, precision_pca, recall_pca, f1_pca) } results"},{"question":"Create a function `find_word_ladders(start_word, end_word, word_list)` in Python that generates all possible sequences of transformations (word ladders) from `start_word` to `end_word` using the given `word_list`. Each transformation can change only one character at a time, and each intermediate word must exist in the `word_list`. If no such transformation is possible, the function should return an empty list. Additionally, ensure the output ladders are the shortest possible. Include comments and explanations in your code to demonstrate the implementation logic.","solution":"from collections import defaultdict, deque def find_word_ladders(start_word, end_word, word_list): Generates all possible sequences of transformations (word ladders) from start_word to end_word using the given word_list. Each transformation can change only one character at a time, and each intermediate word must exist in the word_list. Output ladders are the shortest possible. :param start_word: str, the starting word :param end_word: str, the target word :param word_list: List[str], the list of valid words for transformation :return: List of lists with the shortest transformation sequences if end_word not in word_list: return [] # Initialize data structures word_list = set(word_list) # for O(1) lookups queue = deque([[start_word]]) visited = set([start_word]) found = False word_length = len(start_word) result = [] all_combo_dict = defaultdict(list) # Create a dictionary that maps from each intermediate word to potential transformations for word in word_list: for i in range(word_length): intermediate_word = word[:i] + \'*\' + word[i + 1:] all_combo_dict[intermediate_word].append(word) # BFS to find the shortest transformation sequences while queue and not found: local_visited = set() for _ in range(len(queue)): current_path = queue.popleft() current_word = current_path[-1] for i in range(word_length): intermediate_word = current_word[:i] + \'*\' + current_word[i + 1:] for next_word in all_combo_dict[intermediate_word]: if next_word == end_word: found = True result.append(current_path + [next_word]) if next_word not in visited: local_visited.add(next_word) queue.append(current_path + [next_word]) visited.update(local_visited) return result"},{"question":"Write a function that takes a list of integers and returns the longest contiguous subarray that sums to a given target integer. If multiple subarrays have the same length, return the first one found. If no such subarray exists, return an empty list.","solution":"def longest_subarray_with_sum(nums, target): Return the longest contiguous subarray that sums to the given target. If multiple subarrays have the same length, return the first one found. If no such subarray exists, return an empty list. n = len(nums) longest_subarray = [] subarray_indices = {} current_sum = 0 for i in range(n): current_sum += nums[i] if current_sum == target: longest_subarray = nums[:i + 1] if (current_sum - target) in subarray_indices: start_index = subarray_indices[current_sum - target] + 1 if len(nums[start_index:i + 1]) > len(longest_subarray): longest_subarray = nums[start_index:i + 1] if current_sum not in subarray_indices: subarray_indices[current_sum] = i return longest_subarray"},{"question":"Write a program that simulates an automated bank that processes transactions. Each transaction must include a unique ID, a user ID, a transaction type (deposit or withdrawal), and an amount. The program should allow users to input a series of transactions and then output a summary report showing the final balance for each user and a log of all the transactions sorted by transaction ID. Ensure that withdrawals do not result in a negative balance for any user. If a withdrawal exceeds the available balance, the transaction should be skipped and an error message should be logged for that transaction.","solution":"class Bank: def __init__(self): self.transactions = [] self.user_balances = {} self.error_log = [] def process_transaction(self, transaction_id, user_id, transaction_type, amount): if transaction_type not in [\'deposit\', \'withdrawal\']: raise ValueError(\\"Transaction type must be \'deposit\' or \'withdrawal\'\\") if user_id not in self.user_balances: self.user_balances[user_id] = 0 if transaction_type == \'deposit\': self.user_balances[user_id] += amount self.transactions.append((transaction_id, user_id, transaction_type, amount)) elif transaction_type == \'withdrawal\': if self.user_balances[user_id] >= amount: self.user_balances[user_id] -= amount self.transactions.append((transaction_id, user_id, transaction_type, amount)) else: self.error_log.append(f\\"Error: Withdrawal of {amount} exceeds balance for user {user_id}\\") def summary_report(self): sorted_transactions = sorted(self.transactions, key=lambda x: x[0]) return self.user_balances, sorted_transactions, self.error_log"},{"question":"Develop a Python function that takes a list of integers and returns a dictionary. The dictionary should contain three keys: \'positive\', \'negative\', and \'neutral\', each mapping to a list that includes the positive, negative, and zero integers from the input list, respectively. If an input list doesn\'t include any integers of a particular type, the corresponding list in the dictionary should be empty. Validate the input to ensure that it is a list of integers; otherwise, raise a ValueError with a message \\"Input must be a list of integers\\".","solution":"def categorize_integers(int_list): Takes a list of integers and returns a dictionary with three keys: \'positive\', \'negative\', and \'neutral\' with respective lists of those integers. Raises a ValueError if the input is not a list of integers. if not isinstance(int_list, list) or not all(isinstance(i, int) for i in int_list): raise ValueError(\\"Input must be a list of integers\\") result = {\'positive\': [], \'negative\': [], \'neutral\': []} for number in int_list: if number > 0: result[\'positive\'].append(number) elif number < 0: result[\'negative\'].append(number) else: result[\'neutral\'].append(number) return result"},{"question":"Write a function that takes a list of integers and a target integer. The function should return `True` if there are two distinct elements in the list whose sum is equal to the target, and `False` otherwise. [3, 5, 1, 7, 4, 2], target = 6","solution":"def has_pair_with_sum(lst, target): Returns True if there are two distinct elements in the list whose sum equals the target. Returns False otherwise. seen = set() for num in lst: if target - num in seen: return True seen.add(num) return False"},{"question":"Design a Python function that takes an integer input representing the number of rows, and prints a Pascal\'s Triangle up to that row, using recursion. The function should handle invalid inputs gracefully by prompting the user to enter a valid integer if a non-numeric or negative value is provided. Additionally, implement an optimized version of the function to handle large input values efficiently. Consider coding for edge cases such as inputs of 0 or 1, and ensuring the output is formatted cleanly.","solution":"def generate_pascals_triangle(num_rows): Generates Pascal\'s Triangle up to the given number of rows using recursion. if num_rows < 0: raise ValueError(\\"Number of rows must be a non-negative integer.\\") def generate_row(previous_row): row = [1] for i in range(1, len(previous_row)): row.append(previous_row[i-1] + previous_row[i]) row.append(1) return row def generate_triangle(n): if n == 0: return [] elif n == 1: return [[1]] else: previous_triangle = generate_triangle(n-1) previous_row = previous_triangle[-1] new_row = generate_row(previous_row) return previous_triangle + [new_row] return generate_triangle(num_rows) def formatted_pascals_triangle(num_rows): Generates and prints Pascal\'s Triangle in a formatted manner. if num_rows < 0: raise ValueError(\\"Number of rows must be a non-negative integer.\\") triangle = generate_pascals_triangle(num_rows) formatted_string = \\"n\\".join([\\" \\".join(map(str, row)) for row in triangle]) return formatted_string"},{"question":"How would you write a function to determine if a string contains all unique characters, ignoring case sensitivity and spaces? The function should return True if all characters are unique and False otherwise. Implement this function without using any additional data structures. string = \\"The quick BROWN fox\\"","solution":"def has_all_unique_chars(s): Returns True if the string contains all unique characters (case insensitive and ignoring spaces), and False otherwise. s = s.replace(\\" \\", \\"\\").lower() for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Design a function that takes a string as input and checks if it can be rearranged to form a palindrome. If it can be rearranged to form a palindrome, return `True`. Otherwise, return `False`. A palindrome is a string that reads the same backwards as forwards. For example, \\"racecar\\" is a palindrome, but \\"hello\\" is not. Additionally, provide erroneous code as a reference that will encourage debugging. Erroneous code to consider: def faulty_palindrome_check(s): return s == s[::-1] # Test the function with the input print(faulty_palindrome_check(\\"carrace\\")) # This should not give the correct result","solution":"def can_form_palindrome(s): Checks if the input string can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # A string can be rearranged to a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given an array of integers and a target sum. Write a function that finds all unique pairs of integers in the array whose sum equals the target sum. The function should return a list of tuples, each containing a pair of integers. Ensure that each pair is unique and each integer in the array is used at most once in the returned pairs. Additionally, provide an example of inefficient code to accomplish this, and explain how to optimize it. **Function Signature:** ```python def find_pairs_with_sum(arr: List[int], target: int) -> List[Tuple[int, int]]: pass ``` **Example:** ```python # Input: arr = [1, 2, 3, 4, 3, 5] target = 6 # Output: # [(1, 5), (2, 4), (3, 3)] ``` **Inefficient Code Example:** (Check every pair with nested loops) ```python def find_pairs_with_sum(arr, target): pairs = [] n = len(arr) for i in range(n): for j in range(i+1, n): if arr[i] + arr[j] == target: pairs.append((arr[i], arr[j])) return pairs ``` **Explanation and Optimization:** The above code has a time complexity of O(n^2) due to the nested loops. To optimize it, we can use a hash set to achieve an average time complexity of O(n). Here\'s how: 1. Use a set to keep track of the elements we\'ve seen so far. 2. Traverse the array and for each element, check if the complement (target - element) exists in the set. 3. If it does, add the pair to the result if it\'s unique. 4. If it doesn\'t, add the element to the set. **Optimized Code:** ```python def find_pairs_with_sum(arr, target): seen = set() pairs = set() # Using a set to avoid duplicate pairs for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return list(pairs) ```","solution":"from typing import List, Tuple def find_pairs_with_sum(arr: List[int], target: int) -> List[Tuple[int, int]]: Finds all unique pairs of integers in the array whose sum equals the target sum. Each integer in the array is used at most once. seen = set() # To track seen numbers pairs = set() # To track unique pairs for num in arr: complement = target - num if complement in seen: # Add pairs as ordered tuple (min, max) to avoid duplicates pairs.add((min(num, complement), max(num, complement))) seen.add(num) # Convert the set of pairs to a list of tuples return list(pairs)"},{"question":"Write a function that parses a given mathematical expression string and evaluates it. The expression will only include non-negative integers, addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). The function should also handle parentheses `()` which affect the order of operations. You need to return the evaluated result as an integer. Assume that the input expression is always valid. Example: ``` Input: \\"3+(2*2)\\" Output: 7 Input: \\"10+2*6\\" Output: 22 Input: \\"100*2+12\\" Output: 212 Input: \\"100*(2+12)\\" Output: 1400 Input: \\"100*(2+12)/14\\" Output: 100 ``` Note: Division should be integer division.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string containing non-negative integers, +, -, *, / operators, and parentheses, and returns the integer result. def compute(ops, values): right = values.pop() left = values.pop() op = ops.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(left // right) # Integer division precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} ops = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': ops.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while ops and ops[-1] != \'(\': compute(ops, values) ops.pop() else: while ops and ops[-1] in precedence and precedence[ops[-1]] >= precedence[expression[i]]: compute(ops, values) ops.append(expression[i]) i += 1 while ops: compute(ops, values) return values[0]"},{"question":"Write a function to calculate the maximum product of three numbers in an array of integers. The function should return an integer that represents this maximum product. Assume the array has at least three integers. Provide clear examples. def max_product_of_three(nums): Implement a function that takes a list of integers and returns the maximum product of any three distinct numbers in the list. For instance: max_product_of_three([1, 2, 3]) => 6 max_product_of_three([-10, -10, 5, 2]) => 500 max_product_of_three([1, 10, -5, 1, -100]) => 5000 max_product_of_three([1, 2, 3, 4]) => 24 max_product_of_three([-1, -2, -3, -4]) => -6","solution":"def max_product_of_three(nums): Returns the maximum product of any three numbers in the list `nums`. :param nums: List of integers :return: Maximum product of any three distinct numbers in the list nums.sort() # Maximum product can be either from the largest three numbers # or from two smallest (most negative) numbers and the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Create a Python script to simulate a simplified version of a blockchain. Your blockchain should include basic functionalities such as adding new blocks, verifying the integrity of the chain, and displaying the complete chain. Each block should store the following attributes: Data (any string), Timestamp, Previous Hash, and a unique Hash. Utilize appropriate hash functions and ensure the implementation allows for chain validation by verifying hashes from the genesis block to the most recent block.","solution":"import hashlib import time class Block: def __init__(self, data, previous_hash=\'\'): self.timestamp = time.time() self.data = data self.previous_hash = previous_hash self.hash = self.calculate_hash() def calculate_hash(self): block_string = f\\"{self.timestamp}{self.data}{self.previous_hash}\\" return hashlib.sha256(block_string.encode()).hexdigest() class Blockchain: def __init__(self): self.chain = [self.create_genesis_block()] def create_genesis_block(self): return Block(\\"Genesis Block\\", \\"0\\") def get_latest_block(self): return self.chain[-1] def add_block(self, new_block): new_block.previous_hash = self.get_latest_block().hash new_block.hash = new_block.calculate_hash() self.chain.append(new_block) def is_chain_valid(self): for i in range(1, len(self.chain)): current_block = self.chain[i] previous_block = self.chain[i - 1] if current_block.hash != current_block.calculate_hash(): return False if current_block.previous_hash != previous_block.hash: return False return True def display_chain(self): for block in self.chain: print(f\\"Block Hash: {block.hash}\\") print(f\\"Previous Hash: {block.previous_hash}\\") print(f\\"Data: {block.data}\\") print(f\\"Timestamp: {block.timestamp}n\\") # Example usage blockchain = Blockchain() blockchain.add_block(Block(\\"Block 1 Data\\")) blockchain.add_block(Block(\\"Block 2 Data\\")) blockchain.display_chain() print(\\"Is blockchain valid?\\", blockchain.is_chain_valid())"},{"question":"Write a function that calculates the sum of all prime numbers less than a given positive integer N. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. The function should take an integer N as input and return the sum of all prime numbers less than N. For example: - If N = 10, the prime numbers less than 10 are 2, 3, 5, and 7. Therefore, the function should return 17. - If N = 20, the prime numbers less than 20 are 2, 3, 5, 7, 11, 13, 17, and 19. Therefore, the function should return 77. Note: - Consider optimizing the function to handle larger values of N efficiently. - You may use helper functions to determine if a number is prime.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def sum_of_primes_less_than(N): Returns the sum of all prime numbers less than a given positive integer N. return sum(num for num in range(2, N) if is_prime(num))"},{"question":"You are given an array of integers and a target sum. Write a function to determine if there are two distinct integers in the array whose sum equals the target sum. Your function should return a boolean value indicating whether such a pair exists. Your solution should have a time complexity better than O(n^2). Avoid using any in-built methods like \'combination\' for the solution, and ensure your implementation handles both positive and negative integers. Example: - Input: arr = [2, 7, 11, 15], target = 9 - Output: True (because 2 + 7 = 9) - Input: arr = [3, -1, 4, 6], target = 10 - Output: False (no pairs sum up to 10)","solution":"def has_pair_with_sum(arr, target): Determines if there are two distinct integers in the array whose sum equals the target sum. Args: arr (list of int): Array of integers. target (int): Target sum. Returns: bool: True if such a pair exists, otherwise False. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"def unique_paths_with_obstacles(grid): \'\'\' Given a 2D grid with obstacles represented by integer values (0 for an empty space and 1 for an obstacle), determine the number of unique paths from the top-left corner to the bottom-right corner, such that one can only move either down or right at any point in time. Write a function that takes a grid as input and returns the number of unique paths. If there\'s no possible path due to the obstacles, return 0. Examples: unique_paths_with_obstacles([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 2 unique_paths_with_obstacles([[0, 1], [0, 0]]) == 1 unique_paths_with_obstacles([[1]]) == 0 unique_paths_with_obstacles([[0, 1], [1, 0]]) == 0 \'\'\'","solution":"def unique_paths_with_obstacles(grid): Given a 2D grid with obstacles represented by integer values (0 for an empty space and 1 for an obstacle), determine the number of unique paths from the top-left corner to the bottom-right corner, such that one can only move either down or right at any point in time. If there\'s no possible path due to the obstacles, return 0. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 # Fill the dp table for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[m-1][n-1]"},{"question":"Write a function that takes a string of text as an input. The function should find the first non-repeating character in the string and return it. If all characters are repeating or the input string is empty, the function should return `None`. Note that the distinction between uppercase and lowercase letters matters, i.e., \'A\' and \'a\' are considered different characters. Ensure your solution is efficient in terms of time and space complexity. Provide test cases to demonstrate your function\'s correctness.","solution":"def first_non_repeating_char(text): Returns the first non-repeating character in the given string `text`. If all characters are repeating or the string is empty, returns None. char_count = {} # Counting the frequency of each character for char in text: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Finding the first non-repeating character for char in text: if char_count[char] == 1: return char return None"},{"question":"Design a function that processes a given list of integers and identifies the continuous subsequence (of at least 2 elements) with the highest sum. The function should return the starting and ending indices of this subsequence. If all elements are negative, return the two indices of the least negative number\'s position. def find_max_subsequence(arr): Implement a function to locate a continuous subsequence with the highest sum within a list of integers. The function should return a tuple of the starting and ending indices of this subsequence. When the list contains multiple subsequences with the same highest sum, it should return the subsequence with the smallest starting index. If all elements are negative, return the indices of the least negative number. Examples: find_max_subsequence([1, -2, 3, 4, -1, 2, -5, 4]) = (2, 5) find_max_subsequence([-3, -2, -1]) = (2, 2)","solution":"def find_max_subsequence(arr): Locates a continuous subsequence with the highest sum within a list of integers. Returns a tuple of the starting and ending indices of this subsequence. When the list contains multiple subsequences with the same highest sum, the subsequence with the smallest starting index is returned. If all elements are negative, the indices of the least negative number are returned. if not arr: return (0, 0) max_sum = current_sum = float(\'-inf\') start = end = temp_start = 0 least_negative_idx = None least_negative_val = float(\'-inf\') for idx, value in enumerate(arr): if value >= least_negative_val: least_negative_idx = idx least_negative_val = value if current_sum < 0: current_sum = value temp_start = idx else: current_sum += value if current_sum > max_sum or (current_sum == max_sum and temp_start < start): max_sum = current_sum start = temp_start end = idx if max_sum < 0: return (least_negative_idx, least_negative_idx) return (start, end)"},{"question":"Design a Python function that takes an unsorted list of integers and returns a list of unique elements in the same order they first appeared in the input list. Your function should preserve the original order and remove any duplicate values. Example: ```python def remove_duplicates(lst): # Your code here # Test cases print(remove_duplicates([1, 2, 2, 3, 4, 4, 5])) # Output: [1, 2, 3, 4, 5] print(remove_duplicates([5, 5, 5, 5, 5])) # Output: [5] print(remove_duplicates([1, 2, 3, 4, 5])) # Output: [1, 2, 3, 4, 5] print(remove_duplicates([2, 1, 2, 3, 4, 1])) # Output: [2, 1, 3, 4] ``` Include a brief explanation of your approach and any assumptions you are making.","solution":"def remove_duplicates(lst): Remove duplicate elements from the list while preserving the order of first appearance. :param lst: List of integers (unsorted with possible duplicates) :return: List of unique integers in the order they first appeared in input. seen = set() unique_lst = [] for num in lst: if num not in seen: unique_lst.append(num) seen.add(num) return unique_lst"},{"question":"Design a Python function that reads an integer n and returns a list of all prime numbers less than n. Additionally, the function should be capable of handling multiple inputs stored in a list. The output should be a list of lists, where each sub-list contains the prime numbers less than the corresponding input value. For example, given the input list [10, 20], the output should be [[2, 3, 5, 7], [2, 3, 5, 7, 11, 13, 17, 19]]. Optimize the solution to handle large inputs efficiently using the Sieve of Eratosthenes algorithm and ensure to reuse any overlapping computations for different input values when possible.","solution":"def sieve_of_eratosthenes(n): Generate all prime numbers less than n using the Sieve of Eratosthenes algorithm. sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def primes_less_than(input_list): Given a list of integers, return a list of lists where each sub-list contains the prime numbers less than the corresponding input value. max_n = max(input_list) primes = sieve_of_eratosthenes(max_n) results = [] for n in input_list: primes_below_n = [p for p in primes if p < n] results.append(primes_below_n) return results"},{"question":"Create a function `parse_math_expression(expression: str) -> float` that takes a mathematical expression as a string and returns the evaluated result as a float. The expression is guaranteed to be a valid mathematical expression containing integers, floating-point numbers, and the operators +, -, *, /, and parentheses (). You are not allowed to use the built-in `eval` function or similar utilities from libraries. # Example: ```python >>> parse_math_expression(\\"3 + 5\\") 8.0 >>> parse_math_expression(\\"10 + 2 * 6\\") 22.0 >>> parse_math_expression(\\"(10 + 2) * 6\\") 72.0 >>> parse_math_expression(\\"100 * 2 + 12\\") 212.0 >>> parse_math_expression(\\"100 * (2 + 12)\\") 1400.0 >>> parse_math_expression(\\"100 * (2 + 12) / 14\\") 100.0 ``` # Notes: - The input to the function is a mathematically valid expression. - Return the result as a floating-point number. - Take care of operator precedence and associativity rules while evaluating the expression. - Implement the function without using the `eval` function or `ast.literal_eval` or any other direct evaluating techniques. Consider using a stack-based approach to handle the operators and operands.","solution":"def parse_math_expression(expression: str) -> float: def get_precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) def evaluate(expression): i, n = 0, len(expression) values = [] operators = [] while i < n: if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit() or expression[i] == \'.\': val = 0 if expression[i].isdigit(): while i < n and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 if i < n and expression[i] == \'.\': i += 1 frac_val, frac_pos = 0, 0.1 while i < n and expression[i].isdigit(): frac_val += int(expression[i]) * frac_pos frac_pos /= 10 i += 1 val += frac_val values.append(val) i -= 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (operators and get_precedence(operators[-1]) >= get_precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[-1] return evaluate(expression)"},{"question":"Create a function that takes in a list of integers and returns a list of tuples. Each tuple should contain two elements: the first being an integer from the original list, and the second being the count of how many times that integer appears in the list after any set of possible duplicate removals in the original list. For your solution, consider that any list of integers can only contain positive integers. For example: input_list = [4, 4, 4, 9, 9, 10] The function should return: [(4, 1), (9, 1), (10, 1)] because after removing duplicates only one instance of each integer remains. Be sure to test your function with lists containing varying numbers of duplicate entries.","solution":"def count_unique_elements(input_list): Takes a list of integers and returns a list of tuples. Each tuple contains an integer from the original list and the count of how many times that integer appears after duplicate removals. :param input_list: List of positive integers :return: List of tuples (integer, count) unique_elements = list(set(input_list)) return [(element, 1) for element in unique_elements]"},{"question":"Implement a function in Python that takes a list of email addresses and returns a dictionary. The dictionary should have domain names as keys and corresponding values as lists of usernames that belong to those domains. Write your code to handle cases where the list might include invalid email addresses, and filter them out appropriately. Here’s a possible starting point: ```python def group_emails_by_domain(emails): email_dict = {} for email in emails: try: username, domain = email.split(\'@\') if domain not in email_dict: email_dict[domain] = [] email_dict[domain].append(username) except ValueError: continue # Skip invalid email addresses return email_dict # Example usage: emails = [ \\"alice@example.com\\", \\"bob@example.net\\", \\"carol@example.com\\", \\"dave@example.org\\", \\"eve@example.net\\", \\"invalid-email\\", \\"frank@@example.com\\" ] print(group_emails_by_domain(emails)) ``` Ensure your implementation can handle different types of invalid input gracefully.","solution":"def group_emails_by_domain(emails): Groups emails by their domain and returns a dictionary with domains as keys and lists of usernames as values. Filters out invalid email addresses. Args: emails (list of str): List containing email addresses as strings. Returns: dict: A dictionary with domain names as keys and lists of usernames as values. email_dict = {} for email in emails: if \'@\' in email and email.count(\'@\') == 1: username, domain = email.split(\'@\') if domain and username: # Ensure both username and domain are non-empty if domain not in email_dict: email_dict[domain] = [] email_dict[domain].append(username) return email_dict"},{"question":"<p> You are given a list of unique integers and a separate target integer. Your task is to write a function that finds all pairs of integers in the list that sum up to the target integer. Each pair should be ordered in non-decreasing order, and the list of pairs should be sorted lexicographically. </p> <p> For example, given the list <code>[1, 2, 3, 4, 5]</code> and target <code>5</code>, the pairs are: <ul> <li>(1, 4)</li> <li>(2, 3)</li> </ul> </p> <p> Your function should return these pairs in the form of a list of tuples: <code>[(1, 4), (2, 3)]</code>. </p> <p> If no such pairs are found, the function should return an empty list. </p> <p> Implement the function: <pre><code>def find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]:</code></pre> </p> <p> **Constraints:** <ul> <li>All integers in the list are unique.</li> <li>The length of the list is between 2 and 100 inclusive.</li> <li>Each integer in the list is between -1,000 and 1,000 inclusive.</li> <li>The target integer is between -2,000 and 2,000 inclusive.</li> </ul> </p>","solution":"from typing import List, Tuple def find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]: This function finds all pairs of integers in the list that sum up to the target integer. Each pair is ordered in non-decreasing order, and the list of pairs is sorted lexicographically. pairs = [] nums.sort() left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: pairs.append((nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return pairs"},{"question":"Write a program that takes a list of integers and returns the length of the longest contiguous subsequence where the difference between consecutive elements is always 1. Additionally, handle exceptions where the input is not a list of integers or if the list is empty.","solution":"def longest_contiguous_subsequence(lst): Takes a list of integers and returns the length of the longest contiguous subsequence where the difference between consecutive elements is always 1. if not isinstance(lst, list) or not all(isinstance(i, int) for i in lst): raise ValueError(\\"Input must be a list of integers.\\") if not lst: raise ValueError(\\"Input list must not be empty.\\") max_length = 0 current_length = 1 for i in range(1, len(lst)): if lst[i] - lst[i-1] == 1: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a Python function `find_top_three_scores` that takes a list of integers as input and returns a list containing the top three unique highest scores in descending order. If there are fewer than three unique scores, return all of them in descending order. For example, given the scores list `[70, 85, 85, 90, 92, 60, 76, 92]`, the output should be `[92, 90, 85]`. Ensure your function handles the following edge cases: 1. The input list is empty. 2. The input list contains fewer than three unique scores. 3. The input list contains negative scores. Additionally, include error handling for cases where the input is not a list of integers, and provide appropriate unit tests to validate your function with various edge cases.","solution":"def find_top_three_scores(scores): Returns the top three unique highest scores in descending order. If there are fewer than three unique scores, returns all of them in descending order. if not isinstance(scores, list) or not all(isinstance(i, int) for i in scores): raise ValueError(\\"Input must be a list of integers\\") # Remove duplicates and sort in descending order unique_scores = sorted(set(scores), reverse=True) # Return top three or fewer scores return unique_scores[:3]"},{"question":"Create a function that takes a list of integers and returns a new list with the squares of those integers, but only if the result is an even number. For example, if the input is [1, 2, 3, 4], the output should be [4, 16] since only 2^2 and 4^2 are even numbers.","solution":"def even_squares(numbers): Takes a list of integers and returns a new list with the squares of those integers that are even numbers. return [n*n for n in numbers if (n*n) % 2 == 0]"},{"question":"Write a function that takes a list of integers and returns a new list containing only the numbers that are divisible by both 3 and 5. If no numbers in the list meet this criterion, return an empty list. Example: Input: [10, 15, 30, 50, 75, 80] Output: [15, 30, 75] Input: [1, 2, 4, 7, 11] Output: []","solution":"def divisible_by_3_and_5(numbers): Returns a list of numbers that are divisible by both 3 and 5 from the input list. :param numbers: List of integers :return: List of integers divisible by both 3 and 5 return [num for num in numbers if num % 3 == 0 and num % 5 == 0]"},{"question":"Create a function that checks if a given string is a palindrome, while ignoring case sensitivity, spaces, and punctuation. The function should return `true` if the string is a palindrome and `false` otherwise. # Example: - Input: \\"A man, a plan, a canal, Panama!\\" - Output: true # Explanation: \\"A man, a plan, a canal, Panama!\\" when converted to lowercase and stripped of spaces and punctuation is \\"amanaplanacanalpanama,\\" which reads the same forward and backward, thus the output is true. # Constraints: - The function should handle an arbitrary string length within reasonable limits for memory usage. - You may assume the string contains only ASCII characters.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome, ignoring case sensitivity, spaces, and punctuation. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a Python function that takes a list of integers and returns a new list containing the squares of each integer from the input list, only if the integer is a positive number. If the list contains any non-integer elements, the function should raise a `ValueError`. Demonstrate how this function can be used with an example input list. # Example ```python def square_positive_integers(input_list): # Your code here # Example Usage input_list = [1, -2, 3, \'a\', 0, 4] try: result = square_positive_integers(input_list) print(result) # Expected output: [1, 9, 16] except ValueError as e: print(e) ```","solution":"def square_positive_integers(input_list): Takes a list of integers and returns a new list containing the squares of each positive integer from the input list. If the list contains any non-integer elements, raises a ValueError. if not all(isinstance(x, int) for x in input_list): raise ValueError(\\"All elements of the input list must be integers.\\") return [x**2 for x in input_list if x > 0]"},{"question":"Rearrange the following characters to form a valid palindrome, if possible. If not, indicate that a palindrome cannot be formed. \\"racecar racing\\"","solution":"from collections import Counter def can_form_palindrome(s): Determines if a valid palindrome can be formed from the given characters. Removes non-alphabetic characters and ignores case. Args: s (str): Input string. Returns: bool: True if a palindrome can be formed, else False. # Remove non-alphabetic characters and normalize to lowercase s = \'\'.join(filter(str.isalpha, s)).lower() # Count the occurrences of each character count = Counter(s) # Check the number of characters that have an odd count odd_count = sum(1 for c in count if count[c] % 2 != 0) # A string can form a palindrome if there is at most one character with an odd count return odd_count <= 1"},{"question":"Create a function in Python that takes two strings as input and calculates the Levenshtein distance between them. The Levenshtein distance is a measure of the difference between two sequences, defined as the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. Use dynamic programming to optimize the performance of your function.","solution":"def levenshtein_distance(s1, s2): Calculate the Levenshtein distance between two strings using dynamic programming. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: int: The Levenshtein distance between the two strings. len_s1 = len(s1) len_s2 = len(s2) # Create a distance matrix and initialize it dp = [[0 for _ in range(len_s2 + 1)] for _ in range(len_s1 + 1)] # Initialize source prefixes to empty string transformations for i in range(len_s1 + 1): dp[i][0] = i for j in range(len_s2 + 1): dp[0][j] = j # Apply the Levenshtein distance algorithm for i in range(1, len_s1 + 1): for j in range(1, len_s2 + 1): if s1[i - 1] == s2[j - 1]: cost = 0 else: cost = 1 dp[i][j] = min(dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + cost) # Substitution return dp[len_s1][len_s2]"},{"question":"Write a function that takes a string as input and returns True if the string is a valid palindrome after removing all non-alphanumeric characters and ignoring case. Consider the string \\"A man, a plan, a canal: Panama\\" which should return True, whereas \\"race a car\\" should return False.","solution":"import re def is_palindrome(s): Returns True if the input string is a valid palindrome after removing all non-alphanumeric characters and ignoring case. # Remove non-alphanumeric characters and convert to lower case cleaned_str = re.sub(r\'[^A-Za-z0-9]+\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Write a function to rotate a square matrix by 90 degrees clockwise. The function should ensure that the rotation is done in place without using any extra space. Return the modified matrix. matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Expected output after rotation: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ]","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a square matrix by 90 degrees clockwise in place. :param matrix: List[List[int]] - n x n matrix to be rotated :return: List[List[int]] - The rotated matrix n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"Write a function that takes an array of integers and returns the maximum sum that can be obtained by summing non-consecutive elements of the array. The function should avoid the two consecutive elements\' sums. For instance, given the array `[3, 2, 5, 10, 7]`, the function should return `15`, which is the sum of elements `3, 5, and 7`.","solution":"def max_non_consecutive_sum(arr): Returns the maximum sum that can be obtained by summing non-consecutive elements of the array. if not arr: return 0 elif len(arr) == 1: return arr[0] # Initialize the maximum sums for the first two elements inclusive = arr[0] exclusive = 0 for i in range(1, len(arr)): # Current max excluding i new_exclusive = max(inclusive, exclusive) # Current max including i inclusive = exclusive + arr[i] # Update exclusive to new_exclusive exclusive = new_exclusive # Return the maximum of inclusive and exclusive return max(inclusive, exclusive)"},{"question":"You are given a string containing lowercase letters of the English alphabet. Write a function that accepts this string and returns another string where each letter is shifted by a certain number of places in the alphabet. The shift value is provided as an integer input by the user. For example, with a shift value of 1, \'a\' would become \'b\', \'b\' would become \'c\', and so on. Note that the alphabet is circular for this purpose; thus, with a shift value of 1, \'z\' would become \'a\'. Ensure your function handles edge cases, such as large positive or negative shift values. **Example:** ``` Input: string: \\"xyz\\" shift: 2 Output: \\"zab\\" ```","solution":"def shift_string(s, shift): Shifts each character in the input string s by the shift value in the alphabet. Parameters: s (str): Input string containing lowercase letters of the English alphabet. shift (int): The number of places to shift each letter in the string. Returns: str: The resulting string after shifting. result = [] for char in s: shifted_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) result.append(shifted_char) return \'\'.join(result)"},{"question":"將給定範圍內的所有質數列出來。 範圍：[10, 50]","solution":"def is_prime(n): Check if a given number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def list_primes_in_range(start, end): Lists all prime numbers in the given range [start, end]. return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Create a function that receives a list of integers and returns a new list where each integer is replaced by the rank of its value within the original list. The smallest integer should have a rank of 1, the second smallest a rank of 2, and so on. If two integers are the same, they should receive the same rank. The output list should maintain the order of appearance of integers from the original list. Additionally, provide an example where a naive approach to solving this problem might fail due to inefficiencies or incorrect ranking with ties, offer the problematic code, analyze why it doesn\'t work, and then supply a corrected version along with an explanation for the improvements made. The erroneous code should exemplify a common mistake in handling sorting and ranking with ties.","solution":"def rank_elements(lst): Returns a list where each element in the original list is replaced by its rank. The rank is determined by sorting the original list. Duplicate values receive the same rank. Args: lst (list of int): The input list of integers. Returns: list of int: The list of ranks corresponding to the elements in the original list. if not lst: return [] sorted_unique_values = sorted(set(lst)) rank_dict = {val: rank+1 for rank, val in enumerate(sorted_unique_values)} return [rank_dict[val] for val in lst]"},{"question":"Implement a function that takes a string as input and returns the first non-repeating character in the string. If all characters are repeating or the string is empty, return an appropriate message. Use efficient string processing techniques to ensure that your solution handles large inputs effectively. Example: Input: \\"swiss\\" Output: \\"w\\" Input: \\"racecar\\" Output: \\"e\\" Input: \\"aabbcc\\" Output: \\"No non-repeating character found\\"","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string. If all characters are repeating or the string is empty, returns an appropriate message. if not s: return \\"Empty string\\" # Create a dictionary to store the count of each character char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \\"No non-repeating character found\\""},{"question":"Write a function to simulate the operation of a simplified stack-based calculator, which processes a sequence of operations given in Reverse Polish Notation (RPN). The calculator should accept a list of strings as input, where each string is either a simple integer or one of the following operators: \\"+\\", \\"-\\", \\"*\\", or \\"/\\". Implement the function to compute and return the final result. Ensure that you account for proper error handling and integer division as required. Example input: [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] Expected output: 9","solution":"def rpn_calculator(tokens): Simulate the operation of a simplified stack-based calculator using Reverse Polish Notation (RPN). Parameters: tokens (list of str): A list of strings where each string is either an integer or an operator (\\"+\\", \\"-\\", \\"*\\", \\"/\\"). Returns: int: The final result after processing all operations. stack = [] for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \\"+\\": stack.append(a + b) elif token == \\"-\\": stack.append(a - b) elif token == \\"*\\": stack.append(a * b) elif token == \\"/\\": # Perform integer division as required stack.append(int(a / b)) else: stack.append(int(token)) return stack.pop()"},{"question":"Write a function `find_most_frequent` that takes a list of integers as input and returns the integer that appears most frequently in the list. If there is a tie, return any one of the most frequent integers. Consider the list always contains at least one element. Example: ``` Input: [1, 3, 2, 2, 4, 1, 1] Output: 1 Input: [4, 4, 1, 2, 2] Output: 4 (or 2) ```","solution":"def find_most_frequent(numbers): Returns the integer that appears most frequently in the list. If there is a tie, returns any one of the most frequent integers. frequency = {} for num in numbers: frequency[num] = frequency.get(num, 0) + 1 most_frequent = max(frequency, key=frequency.get) return most_frequent"},{"question":"Create a function that takes a string containing a mix of letters, digits, and special characters, and returns a dictionary with the count of each type of character (letters, digits, and special characters). Example: Input: \\"Hello World! 123\\" Output: {\'letters\': 10, \'digits\': 3, \'specials\': 2} Explanation: The string has 10 letters (H, e, l, l, o, W, o, r, l, d), 3 digits (1, 2, 3), and 2 special characters (!, space).","solution":"import string def char_count(s): Takes a string containing a mix of letters, digits, and special characters, and returns a dictionary with the count of each type of character. :param s: Input string :return: Dictionary with counts of letters, digits, and special characters count = {\'letters\': 0, \'digits\': 0, \'specials\': 0} for char in s: if char.isalpha(): count[\'letters\'] += 1 elif char.isdigit(): count[\'digits\'] += 1 elif char in string.punctuation or char.isspace(): count[\'specials\'] += 1 return count"},{"question":"Given an array of positive integers, write a Python function that determines and returns the length of the longest increasing subsequence. An increasing subsequence is a sequence of numbers where each number is larger than the previous one in the subsequence, and the elements of the subsequence are not necessarily contiguous in the array. For example, given the array [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], and its length is 4. If the input array is empty, the function should return 0. Validate the input to ensure it is a list of integers. If not, the function should raise a value error.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the list of integers nums. if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums): raise ValueError(\\"Input must be a list of integers.\\") if not nums: return 0 n = len(nums) dp = [1] * n # Initialize the dp array where each element is 1 for i in range(n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are tasked with creating a small library management system. The system should be able to track books and their availability, as well as manage user information and their borrowed books. The data structure should provide methods to: 1. Add a new book along with its details (title, author, and number of copies). 2. Remove a book from the system. 3. Register a new user with their details (name and user ID). 4. Remove a user from the system. 5. Allow a user to check out a book, decreasing its available copies. 6. Return a book, increasing its available copies. 7. View a list of all available books. 8. View a list of books currently borrowed by a particular user. Ensure necessary error checking to prevent invalid operations, such as borrowing a book that is not available or managing a user that does not exist.","solution":"class LibrarySystem: def __init__(self): self.books = {} # Dictionary to store book details: title -> {\'author\': author_name, \'copies\': num_of_copies} self.users = {} # Dictionary to store user details: user_id -> {\'name\': user_name, \'borrowed_books\': []} def add_book(self, title, author, copies): if title in self.books: self.books[title][\'copies\'] += copies else: self.books[title] = {\'author\': author, \'copies\': copies} def remove_book(self, title): if title in self.books: del self.books[title] else: raise ValueError(\\"Book not found in the system\\") def register_user(self, user_id, name): if user_id in self.users: raise ValueError(\\"User ID already exists\\") self.users[user_id] = {\'name\': name, \'borrowed_books\': []} def remove_user(self, user_id): if user_id in self.users: del self.users[user_id] else: raise ValueError(\\"User ID not found in the system\\") def checkout_book(self, user_id, title): if user_id not in self.users: raise ValueError(\\"User ID not found in the system\\") if title not in self.books: raise ValueError(\\"Book not found in the system\\") if self.books[title][\'copies\'] <= 0: raise ValueError(\\"No copies of the book are available\\") self.books[title][\'copies\'] -= 1 self.users[user_id][\'borrowed_books\'].append(title) def return_book(self, user_id, title): if user_id not in self.users: raise ValueError(\\"User ID not found in the system\\") if title not in self.users[user_id][\'borrowed_books\']: raise ValueError(\\"This user did not borrow the specified book\\") self.books[title][\'copies\'] += 1 self.users[user_id][\'borrowed_books\'].remove(title) def view_available_books(self): return {title: details for title, details in self.books.items() if details[\'copies\'] > 0} def view_user_borrowed_books(self, user_id): if user_id not in self.users: raise ValueError(\\"User ID not found in the system\\") return self.users[user_id][\'borrowed_books\']"},{"question":"You are given a string containing lowercase alphabets and another string containing uppercase alphabets. Implement a function in a language of your choice that merges these two strings by alternating their characters, beginning with the first character of the lowercase string. If one string is longer than the other, append the remaining characters of that string at the end. Return the combined string. For instance, merging \\"abc\\" and \\"XYZ\\" results in \\"aXbYcZ\\", while merging \\"ab\\" and \\"WXYZ\\" results in \\"aWbXYZ\\". Make sure to handle edge cases like empty strings or strings of drastically different lengths. Write an efficient solution that handles these scenarios gracefully: ```python def merge_alternately(lower_str, upper_str): result = [] min_length = min(len(lower_str), len(upper_str)) for i in range(min_length): result.append(lower_str[i]) result.append(upper_str[i]) # Append remaining characters of the longer string if len(lower_str) > len(upper_str): result.extend(lower_str[min_length:]) else: result.extend(upper_str[min_length:]) return \'\'.join(result) # Example usage print(merge_alternately(\\"abc\\", \\"XYZ\\")) # Output: \\"aXbYcZ\\" print(merge_alternately(\\"ab\\", \\"WXYZ\\")) # Output: \\"aWbXYZ\\" ``` Your task is to ensure the function works as described and test it with various combinations of input strings.","solution":"def merge_alternately(lower_str, upper_str): Merges two strings by alternating their characters, starting with the lowercase string. If one string is longer than the other, append the remaining characters of that string at the end. :param lower_str: string containing lowercase alphabets :param upper_str: string containing uppercase alphabets :return: combined string result = [] min_length = min(len(lower_str), len(upper_str)) for i in range(min_length): result.append(lower_str[i]) result.append(upper_str[i]) # Append remaining characters of the longer string if len(lower_str) > len(upper_str): result.extend(lower_str[min_length:]) else: result.extend(upper_str[min_length:]) return \'\'.join(result)"},{"question":"Write a Python function that takes in a list of integers and returns a new list with all even numbers squared and all odd numbers doubled. List: [2, 5, 8, 11]","solution":"def process_numbers(nums): Takes in a list of integers and returns a new list with all even numbers squared and all odd numbers doubled. :param nums: List[int] :return: List[int] return [x**2 if x % 2 == 0 else x * 2 for x in nums]"},{"question":"Design a class in Python to represent a Bank Account with attributes for balance, account number, and account holder\'s name. Implement methods for depositing money, withdrawing money, checking the balance, and transferring money to another account. Ensure to include appropriate error handling for scenarios such as insufficient funds for withdrawal or transfer, and invalid deposit amounts. Additionally, write a script to demonstrate the creation of two Bank Account objects and perform a series of transactions between them, printing the balance of both accounts after each transaction.","solution":"class BankAccount: A class representing a bank account. def __init__(self, account_number, holder_name, balance=0.0): self.account_number = account_number self.holder_name = holder_name self.balance = balance def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount def check_balance(self): return self.balance def transfer(self, amount, target_account): if not isinstance(target_account, BankAccount): raise ValueError(\\"Target account must be a BankAccount instance\\") self.withdraw(amount) target_account.deposit(amount)"},{"question":"Implement a function in Python that utilizes the Pandas library to analyze a CSV file containing sales data for different products. Specifically, the CSV file includes columns for \'Date\', \'Product ID\', \'Quantity Sold\', and \'Sales Amount\'. Your task is to write a function that reads this CSV file, processes it to compute the following for each product: 1. Total quantity sold. 2. Total sales amount. 3. Average sales amount per transaction. The function should then output a new CSV file where the results for each product are summarized and include columns for \'Product ID\', \'Total Quantity Sold\', \'Total Sales Amount\', and \'Average Sales Amount per Transaction\'. Ensure that the CSV file is sorted by \'Product ID\' in ascending order.","solution":"import pandas as pd def analyze_sales_data(input_csv_path, output_csv_path): Reads the input CSV file, processes the sales data, and writes the results to a new CSV file. Parameters: input_csv_path (str): Path to the input CSV file containing sales data. output_csv_path (str): Path to the output CSV file where the summarized results will be stored. # Read the CSV file into a DataFrame df = pd.read_csv(input_csv_path) # Group the data by \'Product ID\' and calculate the required metrics summary = df.groupby(\'Product ID\').agg( Total_Quantity_Sold=(\'Quantity Sold\', \'sum\'), Total_Sales_Amount=(\'Sales Amount\', \'sum\'), Average_Sales_Amount_per_Transaction=(\'Sales Amount\', \'mean\') ).reset_index() # Sort the summarized data by \'Product ID\' summary = summary.sort_values(\'Product ID\') # Write the summary to a new CSV file summary.to_csv(output_csv_path, index=False)"},{"question":"Create a function in Python that takes an array of integers and a target sum as inputs, and returns all unique combinations of the integers in the array that sum up to the target. Each number in the array may only be used once in the combination, and all numbers must be positive integers. The solution set must not contain duplicate combinations. Ensure that the returned combinations are sorted in ascending order, both within each combination and in the overall list of combinations. The solution should aim for a time complexity of O(2^n), where n is the number of integers in the input array. For example, given the array [10, 1, 2, 7, 6, 1, 5] and the target sum of 8, the possible output would be: [ [1, 1, 6], [1, 2, 5], [1, 7], [2, 6] ] Additionally, if the input array is [2, 3, 5] and the target sum is 8, a possible output could be: [ [3, 5] ] Write the function `find_combinations` to achieve the above functionality.","solution":"def find_combinations(numbers, target): Returns all unique combinations of numbers that sum up to the target. Each number in numbers may only be used once in the combination. :param numbers: List[int] - list of positive integers :param target: int - target sum :return: List[List[int]] - sorted list of unique combinations def backtrack(start, current_comb, current_sum): if current_sum == target: result.append(current_comb[:]) return if current_sum > target: return for i in range(start, len(numbers)): if i > start and numbers[i] == numbers[i - 1]: continue current_comb.append(numbers[i]) backtrack(i + 1, current_comb, current_sum + numbers[i]) current_comb.pop() numbers.sort() result = [] backtrack(0, [], 0) return result"},{"question":"Write a Python function that receives a list of strings and returns a dictionary where the keys are the lengths of the strings, and the values are lists of strings of that length. For example, given the input [\'apple\', \'dog\', \'banana\', \'cat\'], the output should be {5: [\'apple\'], 3: [\'dog\', \'cat\'], 6: [\'banana\']}. Ensure your solution uses efficient data structures and algorithms to handle large datasets.","solution":"def group_strings_by_length(strings): Returns a dictionary where the keys are the lengths of the strings and the values are lists of strings of that length. :param strings: list of strings :return: dictionary with string lengths as keys and lists of strings as values length_dict = {} for string in strings: length = int(len(string)) if length not in length_dict: length_dict[length] = [] length_dict[length].append(string) return length_dict"},{"question":"The task is to work with dictionary operations in Python. You are given a dictionary that represents the inventory of a store, where keys are the product names and values are the number of items in stock. The task involves two parts: 1. Write a function `update_inventory(inventory, new_stock)` that takes two dictionaries as input: the current inventory and a new stock shipment. The function should update the inventory dictionary by adding the quantities from the new stock to the existing inventory. 2. Write a function `find_low_stock_items(inventory, threshold)` that takes the inventory dictionary and a threshold value as input and returns a list of product names whose stock is below the given threshold. To help you get started, here’s an incorrect sample function. Identify and fix the errors in this code, and make sure it meets the requirements of the task. ```python def update_inventory(inventory, new_stock): # erroneous code for key in new_stock.keys(): inventory[key] = inventory.get(key, 0) + new_stock.get(key, 0) return inventory def find_low_stock_items(inventory, threshold): # erroneous code low_stock = [] for key, value in inventory.items(): if value < threshold: low_stock.append(inventory) return low_stock # Example usage current_inventory = {\'apples\': 10, \'bananas\': 5, \'oranges\': 2} new_stock = {\'apples\': 5, \'oranges\': 3, \'grapes\': 7} threshold_value = 5 updated_inventory = update_inventory(current_inventory, new_stock) print(updated_inventory) low_stock_items = find_low_stock_items(current_inventory, threshold_value) print(low_stock_items) ``` Your task is to: 1. Debug and correct the given functions. 2. Ensure the functions correctly update the inventory and find low stock items based on the provided threshold.","solution":"def update_inventory(inventory, new_stock): Updates the inventory dictionary by adding quantities from the new stock dictionary. for key, quantity in new_stock.items(): inventory[key] = inventory.get(key, 0) + quantity return inventory def find_low_stock_items(inventory, threshold): Returns a list of product names whose stock is below the given threshold. low_stock = [key for key, value in inventory.items() if value < threshold] return low_stock"},{"question":"Create a Python function called \'transposeMatrix\' that takes in a 2D list (a list of lists) representing a matrix, and returns the transpose of the given matrix. For instance, if the input matrix is: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] the output should be: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]","solution":"def transposeMatrix(matrix): Returns the transpose of the given matrix. Parameters: matrix (list of lists): The 2D list to transpose Returns: list of lists: The transposed matrix return [list(row) for row in zip(*matrix)]"},{"question":"Write a function `list_subsets(arr)` that generates all possible subsets of a given list of unique integers `arr` and returns them in a list of lists. The subsets can be in any order, but must not contain duplicates. For instance, if the input list is `[1, 2, 3]`, the function should return a list containing `[]`, `[1]`, `[2]`, `[3]`, `[1, 2]`, `[1, 3]`, `[2, 3]`, and `[1, 2, 3]`. ```python def list_subsets(arr): # Implementation here ``` **Example:** ```python print(list_subsets([1, 2, 3])) # Output could be something like: # [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] ```","solution":"def list_subsets(arr): Generates all possible subsets of the given list of unique integers. :param arr: List of unique integers :return: List of lists, each corresponding to a subset of the input list def backtrack(start, path): result.append(path) for i in range(start, len(arr)): backtrack(i + 1, path + [arr[i]]) result = [] backtrack(0, []) return result"},{"question":"Develop a recommendation system for a streaming platform that not only analyzes users\' viewing histories to suggest movies and TV shows but also incorporates a sentiment analysis of user reviews. Specifically, the task is to predict user preferences based on their watch history, ratings they provided, and the sentiment extracted from their written reviews. Additionally, account for genre diversity to avoid redundant recommendations by ensuring at least three different genres in the top 10 suggestions. Your model should achieve at least 85% accuracy in matching recommendations to positive user feedback and include a feature that dynamically adjusts recommendations based on real-time viewing trends and review sentiments.","solution":"import random from typing import List, Dict, Tuple class RecommendationSystem: def __init__(self, user_history: List[Dict], user_reviews: List[Dict], possible_recommendations: List[Dict]): Initialize the recommendation system with user history, user reviews, and possible recommendations. self.user_history = user_history self.user_reviews = user_reviews self.possible_recommendations = possible_recommendations def analyze_genre_diversity(self, recommendations: List[Dict]) -> List[Dict]: Ensure at least three different genres in the top 10 suggestions genre_count = {} diversified_recommendations = [] for recommendation in recommendations: genre = recommendation[\'genre\'] if genre not in genre_count: genre_count[genre] = 0 if genre_count[genre] < 3: diversified_recommendations.append(recommendation) genre_count[genre] += 1 if len(diversified_recommendations) >= 10: break return diversified_recommendations def analyze_sentiment(self, reviews: List[Dict]) -> float: Perform a simple sentiment analysis on user reviews positive_count = sum(1 for review in reviews if review[\'sentiment\'] > 0) total_count = len(reviews) if total_count == 0: return 0 return positive_count / total_count def predict_preferences(self) -> List[Dict]: Predict user preferences based on watch history, ratings, and sentiment analysis # Analyze sentiment from user reviews sentiment_score = self.analyze_sentiment(self.user_reviews) # Base recommendations on user watch history and sentiment recommended_items = sorted( self.possible_recommendations, key=lambda x: (x[\'popularity\'] * sentiment_score, x[\'rating\']), reverse=True ) # Ensure genre diversity in top 10 suggestions top_recommendations = self.analyze_genre_diversity(recommended_items) return top_recommendations def dynamic_adjustments(self, trend_data: List[Dict]): Adjust recommendations based on real-time viewing trends and review sentiments. for item in self.possible_recommendations: for trend in trend_data: if item[\'id\'] == trend[\'id\']: item[\'popularity\'] += trend[\'trend_score\'] break recommendations = self.predict_preferences() return recommendations"},{"question":"Design and Implement a Caching System for Storing Web Resources Description: You need to design and implement a caching system that stores web resources such as web pages, images, or scripts. Your caching system should have a predefined capacity and support two methods: 1. `set(url: str, content: str)`: This method stores the content corresponding to the given URL in the cache. If the cache is full, the least recently used (LRU) content should be evicted to make space for the new content. 2. `get(url: str) -> str`: This method returns the content corresponding to the given URL if it is present in the cache. If the URL is not present in the cache, return the string \\"URL not found\\". Every time a URL is accessed, it should be considered the most recently used. To achieve the above functionalities, you can use any suitable data structures like dictionaries for fast access and doubly linked lists for maintaining the order of usage. Your implementation should handle the following constraints: - The cache capacity will not exceed 1000. - The length of any URL or content will not exceed 100 characters. - The total number of `set` and `get` operations will not exceed 10000. Example: ``` cache = WebCache(2) cache.set(\\"http://example.com\\", \\"<html>Example</html>\\") cache.set(\\"http://example.org\\", \\"<html>Org</html>\\") print(cache.get(\\"http://example.com\\")) # Outputs: <html>Example</html> cache.set(\\"http://example.net\\", \\"<html>Net</html>\\") print(cache.get(\\"http://example.org\\")) # Outputs: URL not found print(cache.get(\\"http://example.net\\")) # Outputs: <html>Net</html> print(cache.get(\\"http://example.com\\")) # Outputs: <html>Example</html> ``` Constraints: - You must implement your solution using an object-oriented approach. - Optimize for both time and space complexity, focusing on efficient use of memory and processing time. For reference, consider the basic structure of the class you need to implement: ```python class WebCache: def __init__(self, capacity: int): # Initialize the cache with the given capacity pass def set(self, url: str, content: str) -> None: # Store the content at the given URL in the cache pass def get(self, url: str) -> str: # Retrieve the content for the given URL from the cache pass ```","solution":"class WebCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} self.order = [] def set(self, url: str, content: str) -> None: if url in self.cache: self.order.remove(url) elif len(self.cache) >= self.capacity: lru_url = self.order.pop(0) del self.cache[lru_url] self.cache[url] = content self.order.append(url) def get(self, url: str) -> str: if url in self.cache: self.order.remove(url) self.order.append(url) return self.cache[url] else: return \\"URL not found\\""},{"question":"Design a function to determine whether a given string is a palindrome. A string is considered a palindrome if it reads the same forward and backward, ignoring spaces, punctuation, and capitalization. Implement this function without using built-in slice or reverse methods; instead, compose the logic manually to analyze and compare characters from both ends of the string towards the center.","solution":"def is_palindrome(s): Determines whether the given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Clean the string by removing non-alphanumeric characters and converting to lowercase. clean_s = \'\'.join(char.lower() for char in s if char.isalnum()) left, right = 0, len(clean_s) - 1 while left < right: if clean_s[left] != clean_s[right]: return False left += 1 right -= 1 return True"},{"question":"Devise a function that generates the transpose of a given rectangular matrix. The output should be a new matrix where the rows are swapped with the columns of the input matrix. Do not use any external libraries or built-in functions to accomplish the transposition. def transpose_matrix(matrix: list): Transforms the provided rectangular matrix by swapping its rows and columns, generating a new matrix. Libraries and built-in functions for matrix transposition should not be used. >>> transpose_matrix([[1, 2, 3], [4, 5, 6]]) [[1, 4], [2, 5], [3, 6]] >>> transpose_matrix([[1, 2], [3, 4], [5, 6]]) [[1, 3, 5], [2, 4, 6]]","solution":"def transpose_matrix(matrix: list) -> list: Transforms the provided rectangular matrix by swapping its rows and columns, generating a new matrix. Libraries and built-in functions for matrix transposition should not be used. >>> transpose_matrix([[1, 2, 3], [4, 5, 6]]) [[1, 4], [2, 5], [3, 6]] >>> transpose_matrix([[1, 2], [3, 4], [5, 6]]) [[1, 3, 5], [2, 4, 6]] transposed = [] for col in range(len(matrix[0])): new_row = [] for row in range(len(matrix)): new_row.append(matrix[row][col]) transposed.append(new_row) return transposed"},{"question":"Write a Python function to find all the anagrams in a list of words and group them together. The function should take a list of strings and return a list of lists, where each sublist contains words that are anagrams of each other. For example, given the input list `[\\"listen\\", \\"silent\\", \\"enlist\\", \\"rat\\", \\"tar\\", \\"art\\", \\"star\\", \\"tars\\"]`, the function should return `[[\'listen\', \'silent\', \'enlist\'], [\'rat\', \'tar\', \'art\'], [\'star\', \'tars\']]`. # Constraints: - The input list will contain between 1 and 1000 words. - Each word will consist only of lowercase English letters, and each word will be at most 20 characters long. # Function Signature: ```python def group_anagrams(words: list) -> list: pass ```","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams together from a list of words. Args: words (list of str): A list of words to be grouped by anagram. Returns: list of list of str: A list of lists where each sublist contains words that are anagrams of each other. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Design a Python program that takes a list of integers and returns a new list containing only the elements that are perfect squares from the original list. Constraints: Do not use any built-in functions that directly identify or check for perfect squares.","solution":"def is_perfect_square(n): Checks if a given integer n is a perfect square. if n < 0: return False root = int(n**0.5) return root*root == n def filter_perfect_squares(lst): Returns a list of perfect squares from the original list of integers. return [x for x in lst if is_perfect_square(x)]"},{"question":"Write a Python function that takes a list of integers and returns the sum of the digits of the largest number in the list. If the list is empty, the function should return 0. For example, given the list [123, 456, 789], the largest number is 789, and the sum of its digits is 7+8+9=24.","solution":"def sum_of_digits_of_largest_number(lst): Returns the sum of the digits of the largest number in the list. If the list is empty, returns 0. if not lst: return 0 # Find the largest number in the list largest_number = max(lst) # Sum the digits of the largest number return sum(int(digit) for digit in str(largest_number))"},{"question":"Implement a function to flatten a nested list of arbitrary depth. The function should take a list with elements that can either be integers or lists of integers. The resulting output should be a flat list with all the integers in the same order as they appeared in the input. Example: lst = [1, [2, [3, 4], 5], [6, 7]] Output: [1, 2, 3, 4, 5, 6, 7]","solution":"def flatten(lst): Flattens a nested list of arbitrary depth. Arguments: lst -- a list which can contain integers or other lists of integers Returns: A single flat list containing all integers in the same order as they appeared in the input. result = [] for item in lst: if isinstance(item, list): result.extend(flatten(item)) else: result.append(item) return result"},{"question":"Write a Python script using the Pandas library to process and analyze a large CSV dataset (500MB+). The script should identify duplicate records, fill missing values using appropriate techniques, and perform aggregation operations (e.g., sum, mean, count) grouped by specified columns. Finally, the script should save the cleaned and aggregated data to a new CSV file, ensuring the operations are optimized for performance using vectorization where possible.","solution":"import pandas as pd def process_large_csv(filepath, output_path, group_by_cols, fill_na_strategy=\'mean\'): Processes a large CSV file to identify and remove duplicate records, fill missing values, and perform aggregation operations grouped by specified columns. Saves the result to a new CSV file. :param filepath: Path to the input CSV file :param output_path: Path to save the output CSV file :param group_by_cols: List of columns to group by for aggregation :param fill_na_strategy: Strategy to fill missing values (default is \'mean\') # Read the CSV file in chunks to handle large files chunk_size = 100000 chunks = pd.read_csv(filepath, chunksize=chunk_size) # Initialize an empty DataFrame to append processed chunks processed_df = pd.DataFrame() for chunk in chunks: # Drop duplicate records chunk = chunk.drop_duplicates() # Fill missing values if fill_na_strategy == \'mean\': chunk = chunk.fillna(chunk.mean()) elif fill_na_strategy == \'median\': chunk = chunk.fillna(chunk.median()) elif fill_na_strategy == \'mode\': chunk = chunk.fillna(chunk.mode().iloc[0]) else: raise ValueError(\\"Invalid fill_na_strategy. Choose from \'mean\', \'median\', \'mode\'.\\") # Append processed chunk to the DataFrame processed_df = pd.concat([processed_df, chunk], ignore_index=True) # Perform aggregation operations aggregation_funcs = {col: [\'sum\', \'mean\', \'count\'] for col in processed_df.columns if col not in group_by_cols} aggregated_df = processed_df.groupby(group_by_cols).agg(aggregation_funcs) # Flatten MultiIndex columns aggregated_df.columns = [\'_\'.join(col).strip() for col in aggregated_df.columns.values] # Save the cleaned and aggregated data to a new CSV file aggregated_df.to_csv(output_path)"},{"question":"Write a Python program that parses a list of strings where each string consists of a student name and their grade, separated by a colon (\\":\\"). The program should calculate the average grade, handle potential errors in data formatting (e.g., missing colon, non-numeric grades), and print the name(s) of the student(s) whose grade is the highest. If there are multiple students with the highest grade, their names should be printed in alphabetical order. Sample input: ```python students = [\\"Alice:85\\", \\"Bob:92\\", \\"Charlie:85\\", \\"David:89\\", \\"Eve:ninety\\"] ``` Expected output: ``` Average Grade: 87.75 Highest Grade: 92 Student(s) with Highest Grade: Bob Error(s): Invalid grade for Eve ```","solution":"def process_student_grades(students): Processes a list of student grades and returns the average grade, highest grade, students with the highest grade, and any errors in the data formatting. Args: students (list of str): List of strings where each string contains a student name and grade separated by a colon. Returns: tuple: A tuple containing the average grade (float or None if there are no valid grades), highest grade (int or None if there are no valid grades), list of student names with the highest grade (sorted alphabetically), and list of errors (if any). valid_grades = [] highest_grade_students = [] errors = [] for entry in students: try: name, grade_str = entry.split(\\":\\") grade = int(grade_str) valid_grades.append((name, grade)) except ValueError: errors.append(f\\"Invalid grade for {entry.split(\':\')[0] if \':\' in entry else entry}\\") if valid_grades: average_grade = sum(grade for name, grade in valid_grades) / len(valid_grades) highest_grade = max(grade for name, grade in valid_grades) highest_grade_students = sorted([name for name, grade in valid_grades if grade == highest_grade]) else: average_grade = None highest_grade = None highest_grade_students = [] return average_grade, highest_grade, highest_grade_students, errors"},{"question":"Write a function that takes an array of integers and an integer sum as input and returns a list of all unique pairs of integers from the array that add up to the given sum. Ensure that the function does not return duplicate pairs and that each pair is represented as a sorted tuple. For instance, if the input array is [1, 2, 3, 4, 5, 6] and the sum is 7, the output should be [(1, 6), (2, 5), (3, 4)].","solution":"def find_pairs_with_sum(arr, target_sum): Finds all unique pairs of integers in the array that add up to the given sum. Args: - arr: List of integers. - target_sum: Target sum to find pairs for. Returns: - List of tuples with pairs that sum up to the target sum. pairs = set() seen = set() for number in arr: needed = target_sum - number if needed in seen: pairs.add(tuple(sorted((number, needed)))) seen.add(number) return list(pairs)"},{"question":"Write a Python function that takes a string and returns a dictionary with the count of each unique word in the string. Ignore punctuation and assume that words are case-insensitive. Example input: \\"Hello world! Hello, how are you? Are you learning Python? Learning is fun!\\" Expected output: {\'hello\': 2, \'world\': 1, \'how\': 1, \'are\': 2, \'you\': 2, \'learning\': 2, \'python\': 1, \'is\': 1, \'fun\': 1}","solution":"import re from collections import defaultdict def count_unique_words(text): Returns a dictionary with the count of each unique word in the string. # Convert to lowercase text = text.lower() # Replace punctuation with spaces text = re.sub(r\'[^ws]\', \' \', text) # Split the text into words words = text.split() # Count each word word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"You are given two sorted arrays `arr1` and `arr2` of size `m` and `n` respectively. Your task is to find the median of these two sorted arrays. The overall run time complexity should be `O(log(min(m,n)))`. Example 1: Input: arr1 = [1, 3], arr2 = [2] Output: 2.0 Explanation: The merged array is [1, 2, 3] and the median is 2. Example 2: Input: arr1 = [1, 2], arr2 = [3, 4] Output: 2.5 Explanation: The merged array is [1, 2, 3, 4] and the median is (2 + 3) / 2 = 2.5. Constraints: * arr1 and arr2 are sorted in non-decreasing order. * 0 <= m, n <= 1000 * 1 <= m + n <= 2000","solution":"def find_median_sorted_arrays(arr1, arr2): Find the median of two sorted arrays. The overall run time complexity should be O(log(min(m,n))). :param arr1: List[int], first sorted array :param arr2: List[int], second sorted array :return: float, the median of the two sorted arrays if len(arr1) > len(arr2): arr1, arr2 = arr2, arr1 x, y = len(arr1), len(arr2) low, high = 0, x while low <= high: partition_x = (low + high) // 2 partition_y = (x + y + 1) // 2 - partition_x max_left_x = float(\'-inf\') if partition_x == 0 else arr1[partition_x - 1] min_right_x = float(\'inf\') if partition_x == x else arr1[partition_x] max_left_y = float(\'-inf\') if partition_y == 0 else arr2[partition_y - 1] min_right_y = float(\'inf\') if partition_y == y else arr2[partition_y] if max_left_x <= min_right_y and max_left_y <= min_right_x: if (x + y) % 2 == 0: return (max(max_left_x, max_left_y) + min(min_right_x, min_right_y)) / 2 else: return max(max_left_x, max_left_y) elif max_left_x > min_right_y: high = partition_x - 1 else: low = partition_x + 1 raise ValueError(\\"Input arrays are not sorted.\\")"},{"question":"You are working on an alien dictionary problem. The alien language follows an unknown alphabetical order, but standard sorting of English characters does not apply. Instead, you are given a sorted list of words in the alien language, and your task is to determine the order of characters in this alien language. Write a function that receives a list of words from the alien dictionary, in lexicographical order, and returns a string representing the characters in the alien alphabetical order. If there is no valid ordering, return an empty string. Example 1: Input: ```python words = [\\"wrt\\", \\"wrf\\", \\"er\\", \\"ett\\", \\"rftt\\"] ``` Output: ```python \\"wertf\\" ``` Example 2: Input: ```python words = [\\"z\\", \\"x\\", \\"z\\"] ``` Output: ```python \\"\\" ``` Explanation: The order is invalid because \'z\' comes before \'x\' and also after \'x\'. Constraints: - You may assume all words are unique. - All characters in the words are lowercase English letters. - **1 <= len(words) <= 1000** - **1 <= len(words[i]) <= 100** Note: If there are multiple valid order strings, return any one of them. There may be multiple solutions as long as they satisfy the given input conditions. Consider the following hints: 1. Build a graph with nodes representing characters and edges representing the dependency of characters. 2. Use topological sorting to determine the order of characters. Implement the function `alienOrder(words: List[str]) -> str`.","solution":"from collections import defaultdict, deque def alienOrder(words): # Create a graph graph = defaultdict(set) indegree = {char: 0 for word in words for char in word} # Build the graph for i in range(len(words) - 1): first_word, second_word = words[i], words[i + 1] min_length = min(len(first_word), len(second_word)) if first_word[:min_length] == second_word[:min_length] and len(first_word) > len(second_word): return \\"\\" # Case when order is invalid for j in range(min_length): if first_word[j] != second_word[j]: if second_word[j] not in graph[first_word[j]]: graph[first_word[j]].add(second_word[j]) indegree[second_word[j]] += 1 break # Perform Topological Sort zero_indegree = deque([char for char in indegree if indegree[char] == 0]) result = [] while zero_indegree: current_char = zero_indegree.popleft() result.append(current_char) for neighbor in graph[current_char]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree.append(neighbor) if len(result) != len(indegree): return \\"\\" # There\'s a cycle in the graph return \\"\\".join(result)"},{"question":"Write a Python function that takes a list of integers and returns a new list where each element is the product of all the elements in the original list except the element at the corresponding position. For example, given the list [1, 2, 3, 4], the function should return [24, 12, 8, 6]. The solution should not use division. Additionally, write unit tests to verify the correctness of the function using at least three different test cases.","solution":"def product_except_self(nums): Given a list of integers, returns a list where each element is the product of all other elements in the original list except the one at the current position. length = len(nums) if length == 0: return [] left_products = [1] * length right_products = [1] * length result = [1] * length # Compute the products of elements to the left of each index for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Compute the products of elements to the right of each index for j in range(length - 2, -1, -1): right_products[j] = right_products[j + 1] * nums[j + 1] # Combine the products of elements to the left and right of each index for k in range(length): result[k] = left_products[k] * right_products[k] return result"},{"question":"You are given a list of integers and an integer `k`. You need to find all unique pairs of integers in the list that sum up to `k`. The pairs should be returned in a list of tuples. Each tuple should contain two integers that sum up to `k`, and the pairs should be presented in lexicographical order. For example, given the list `[1, 5, 3, 7, 9, 2, -1, 6]` and `k = 8`, the pairs that sum up to 8 are `(1, 7)`, `(3, 5)`, `(2, 6)`, and `(-1, 9)`. Note: 1. Each pair should be a tuple of the form `(a, b)` where `a < b`. 2. The list of tuples should be sorted first by the first element, then by the second element. 3. If there are no pairs that sum up to `k`, return an empty list. Write a function `find_pairs_with_sum(nums, k)` that takes the list of integers `nums` and the integer `k` as inputs, and returns a list of tuples representing the pairs that sum up to `k`. Function Signature: ```python def find_pairs_with_sum(nums: list, k: int) -> list: # Your code here ``` # Example ``` Input: nums = [1, 5, 3, 7, 9, 2, -1, 6] k = 8 Output: [(-1, 9), (1, 7), (2, 6), (3, 5)] ``` ``` Input: nums = [0, 1, 2, 3, 4, 5] k = 5 Output: [(0, 5), (1, 4), (2, 3)] ``` Here is the initial code structure for you to complete: ```python def find_pairs_with_sum(nums: list, k: int) -> list: # Your code here pass # Example usage: nums = [1, 5, 3, 7, 9, 2, -1, 6] k = 8 print(find_pairs_with_sum(nums, k)) # Expected output: [(-1, 9), (1, 7), (2, 6), (3, 5)] ```","solution":"def find_pairs_with_sum(nums: list, k: int) -> list: seen = set() output = set() for num in nums: target = k - num if target in seen: pair = (min(num, target), max(num, target)) output.add(pair) seen.add(num) return sorted(output) # Example usage: nums = [1, 5, 3, 7, 9, 2, -1, 6] k = 8 print(find_pairs_with_sum(nums, k)) # Expected output: [(-1, 9), (1, 7), (2, 6), (3, 5)]"},{"question":"Develop a function that takes an integer `n` and returns a list of the first `n` prime numbers, where `n` is a positive integer. Your solution should utilize an efficient algorithm for prime number detection to ensure that the list is generated in a reasonable amount of time even for larger values of `n`.","solution":"def generate_primes(n): Returns a list of the first n prime numbers. if n <= 0: return [] primes = [] num = 2 while len(primes) < n: is_prime = True for p in primes: if p * p > num: break if num % p == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes # Example usage print(generate_primes(10)) # Outputs: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"},{"question":"Write a function that takes an integer array as input and returns the length of the longest contiguous subarray that consists of an equal number of 0s and 1s. The input array will contain only the integers 0 and 1. Use an efficient algorithm to optimize the solution. Example: Input: [1, 0, 0, 1, 0, 1, 1] Output: 6","solution":"def find_max_length(nums): Finds the maximum length of a contiguous subarray with an equal number of 0s and 1s. count_map = {0: -1} # Dictionary to store the first occurrence of a cumulative count max_length = 0 count = 0 # This count variable will track the balance between 0s and 1s for index, num in enumerate(nums): # Increase count for 1 and decrease count for 0 count += 1 if num == 1 else -1 if count in count_map: max_length = max(max_length, index - count_map[count]) else: count_map[count] = index return max_length"},{"question":"Create an algorithm that will accept a list of intervals, each defined by a start and end time (both integers). The intervals may overlap, and your task is to merge all overlapping intervals and return a list of non-overlapping intervals sorted by their start time. Efficient handling of large inputs is expected as the list might contain thousands of intervals.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns a list of non-overlapping intervals sorted by their start time. if not intervals: return [] # Sort the intervals based on start time intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] # If the current interval overlaps with the last merged interval, merge them if current[0] <= last_merged[1]: merged_intervals[-1] = (last_merged[0], max(last_merged[1], current[1])) else: merged_intervals.append(current) return merged_intervals"},{"question":"Create a function that accepts a list of integers and returns a new list containing only the elements that are divisible by 3. Implement this without using list comprehensions. Additionally, ensure the function tracks and prints the number of elements processed before returning the result.","solution":"def filter_divisible_by_three(numbers): Returns a new list containing only the elements that are divisible by 3. Tracks and prints the number of elements processed. result = [] count = 0 for number in numbers: count += 1 if number % 3 == 0: result.append(number) print(f\\"Number of elements processed: {count}\\") return result"},{"question":"Implement a Python function `validate_html_tags` that takes a string representing an HTML-like code snippet as input and checks if the tags are properly nested and closed. The function should return True if the tags are valid, and False otherwise. HTML tags for this problem are simplified to the format `<tag>` and `</tag>`. # Sample Input ```python validate_html_tags(\\"<html><body><h1>Hello World</h1></body></html>\\") ``` # Sample Output ```python True ``` # Explanation The input string contains properly nested HTML tags. Each opening tag `<tag>` has a corresponding closing tag `</tag>`, and they are nested correctly. # Erroneous Code Example ```python def validate_html_tags(html): stack = [] i = 0 while i < len(html): if html[i] == \'<\': j = html.find(\'>\', i) if j == -1: return False tag = html[i:j+1] if not tag.startswith(\'</\'): stack.append(tag) else: if not stack: return False stack.pop() i = j + 1 else: i += 1 return len(stack) = 0 ``` # Errors in the Erroneous Code 1. The usage of `= 0` for comparison is incorrect and should use `== 0`. 2. No verification to ensure closing tag matches the latest opened tag. 3. Improper handling of incrementing index `i`. # Correct Code ```python def validate_html_tags(html): stack = [] i = 0 while i < len(html): if html[i] == \'<\': j = html.find(\'>\', i) if j == -1: return False tag = html[i:j+1] if not tag.startswith(\'</\'): stack.append(tag) else: if not stack: return False opening_tag = stack.pop() if opening_tag[1:] != tag[2:]: return False i = j + 1 else: i += 1 return len(stack) == 0 # Sample Usage print(validate_html_tags(\\"<html><body><h1>Hello World</h1></body></html>\\")) # Output: True ```","solution":"def validate_html_tags(html): Function to validate if the HTML tags in the given input string are properly nested and closed. :param html: Input HTML-like code snippet as a string :return: True if the tags are valid, False otherwise stack = [] i = 0 while i < len(html): if html[i] == \'<\': j = html.find(\'>\', i) if j == -1: return False tag = html[i:j+1] if not tag.startswith(\'</\'): stack.append(tag) else: if not stack: return False opening_tag = stack.pop() if opening_tag[1:] != tag[2:]: return False i = j + 1 else: i += 1 return len(stack) == 0"},{"question":"Given a time-series dataset containing daily weather observations, perform the following tasks: 1. **Data Preprocessing**: Handle any missing values, convert date columns to appropriate datetime formats, and ensure all data is properly indexed. 2. **Exploratory Data Analysis (EDA)**: Provide summary statistics and visualize daily temperature trends over time. 3. **Feature Engineering**: Create new features such as rolling averages or moving fluctuations to capture temporal patterns. 4. **Model Building**: Using your engineered features, develop a predictive model to forecast the temperature for the next 7 days. 5. **Evaluation**: Assess your model\'s performance using relevant metrics and validate its accuracy. Be sure your analysis includes code snippets, visualizations, and sufficient documentation of each step to ensure clarity.","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from datetime import datetime from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, mean_absolute_error def preprocess_data(df): # Handle missing values df = df.fillna(method=\'ffill\') # Convert date column to datetime df[\'date\'] = pd.to_datetime(df[\'date\']) # Set date as index df.set_index(\'date\', inplace=True) return df def eda(df): # Summary statistics summary_stats = df.describe() # Visualize daily temperature trends plt.figure(figsize=(12,6)) plt.plot(df.index, df[\'temperature\'], label=\'Daily Temperature\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature\') plt.title(\'Daily Temperature Trends Over Time\') plt.legend() plt.show() return summary_stats def feature_engineering(df): # Create rolling average and moving fluctuation features df[\'rolling_avg\'] = df[\'temperature\'].rolling(window=7).mean() df[\'moving_fluctuation\'] = df[\'temperature\'].diff().abs() df = df.dropna() return df def build_predictive_model(df): # Features and target split features = df[[\'rolling_avg\', \'moving_fluctuation\']] target = df[\'temperature\'] # Train and test split X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42) # Standardize features scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Model building model = LinearRegression() model.fit(X_train, y_train) # Making predictions y_pred = model.predict(X_test) return model, X_test, y_test, y_pred def evaluate_model(y_test, y_pred): mse = mean_squared_error(y_test, y_pred) mae = mean_absolute_error(y_test, y_pred) return mse, mae # Sample weather dataset data = { \'date\': pd.date_range(start=\'2021-01-01\', periods=100), \'temperature\': np.random.uniform(20, 30, 100) } df = pd.DataFrame(data) # Apply preprocessing df = preprocess_data(df) # Perform EDA summary_stats = eda(df) # Feature Engineering df = feature_engineering(df) # Build predictive model model, X_test, y_test, y_pred = build_predictive_model(df) # Evaluate model mse, mae = evaluate_model(y_test, y_pred)"},{"question":"Write a function: def flatten_nested_list(nested_list: list) -> list: Flattens a nested list of arbitrary depth into a single list of values. Each element in the input list can be either an integer or another nested list. The function should maintain the order of appearance of the elements. For example: - flatten_nested_list([1, 2, [3, 4, [5, 6]], 7]) should return [1, 2, 3, 4, 5, 6, 7] - flatten_nested_list([[1, [2, 3]], 4, [[5, 6], 7], 8]) should return [1, 2, 3, 4, 5, 6, 7, 8] - flatten_nested_list([[[[1]]], 2, [[3, [4, 5]]], 6]) should return [1, 2, 3, 4, 5, 6]","solution":"def flatten_nested_list(nested_list: list) -> list: Flattens a nested list of arbitrary depth into a single list of values. Each element in the input list can be either an integer or another nested list. The function should maintain the order of appearance of the elements. def flatten(lst, accumulator): for elem in lst: if isinstance(elem, list): flatten(elem, accumulator) else: accumulator.append(elem) return accumulator return flatten(nested_list, [])"},{"question":"You are given a string `str` and a non-negative integer `k`. Write a function `rotate_string` that takes these inputs and returns a new string that is rotated to the right by `k` positions. For example, if the input string is `\\"hello\\"` and `k` is 2, the output should be `\\"lohel\\"`. **Constraints:** - The rotation should be circular, meaning characters shifted off the end reappear at the beginning. - You may assume the length of the string `str` is `n` where `0 ≤ n ≤ 100` and `0 ≤ k ≤ 1000`. **Example:** ```python def rotate_string(str: str, k: int) -> str: # Your implementation here # Example usage: print(rotate_string(\\"hello\\", 2)) # Output: \\"lohel\\" print(rotate_string(\\"rotation\\", 4)) # Output: \\"tionrota\\" print(rotate_string(\\"abc\\", 3)) # Output: \\"abc\\" print(rotate_string(\\"\\", 5)) # Output: \\"\\" ``` **Explanation:** - The string `\\"hello\\"` rotated by `2` positions results in `\\"lohel\\"`. - The string `\\"rotation\\"` rotated by `4` positions results in `\\"tionrota\\"`. - The string `\\"abc\\"` rotated by `3` positions results in `\\"abc\\"` since the rotation count `k` is equal to the string length. - An empty string rotated by any value for `k` results in an empty string.","solution":"def rotate_string(s: str, k: int) -> str: Returns the string s rotated to the right by k positions. Args: s (str): The input string to be rotated. k (int): The number of positions to rotate the string by. Returns: str: The rotated string. if not s: return s k = k % len(s) # Handle rotation count larger than string length return s[-k:] + s[:-k]"},{"question":"Create a Python decorator that caches the results of a function based on its input arguments. Your decorator should work for functions with both positional and keyword arguments. Additionally, discuss the advantages and possible limitations of using such a caching mechanism in a real-world application.","solution":"from functools import wraps from collections import defaultdict def cache_results(func): cache = defaultdict(dict) @wraps(func) def cached_function(*args, **kwargs): cache_key = args + tuple(sorted(kwargs.items())) if cache_key not in cache: cache[cache_key] = func(*args, **kwargs) return cache[cache_key] return cached_function # Example function to demonstrate the decorator @cache_results def example_function(a, b=5): return a + b"},{"question":"Write a function `sum_of_powers(n, k)` that takes two integers `n` and `k`, and returns the sum of the first `n` positive integers each raised to the power of `k`. For instance, sum_of_powers(3, 2) should return (1^2 + 2^2 + 3^2) which is 14. **Function Signature:** ```python def sum_of_powers(n: int, k: int) -> int: ``` **Input:** - `n` (1 ≤ n ≤ 1000): the number of terms to include in the sum. - `k` (1 ≤ k ≤ 10): the power to which each integer should be raised. **Output:** - An integer representing the sum of the first `n` integers each raised to the power of `k`. **Examples:** ```python sum_of_powers(3, 2) # Output: 14 sum_of_powers(5, 3) # Output: 225 sum_of_powers(10, 1) # Output: 55 sum_of_powers(4, 4) # Output: 354 ``` **Explanation:** - For `sum_of_powers(3, 2)`, the function computes (1^2 + 2^2 + 3^2) which is (1 + 4 + 9 = 14). - For `sum_of_powers(5, 3)`, the function computes (1^3 + 2^3 + 3^3 + 4^3 + 5^3) which is (1 + 8 + 27 + 64 + 125 = 225).","solution":"def sum_of_powers(n: int, k: int) -> int: Returns the sum of the first `n` positive integers each raised to the power of `k`. return sum(i**k for i in range(1, n+1))"},{"question":"Implement a function in Python that accepts an integer `n` and returns the `n`th number in the Tribonacci sequence. The Tribonacci sequence is defined as follows: T(0) = 0, T(1) = 1, T(2) = 1, and T(n) = T(n-1) + T(n-2) + T(n-3) for n > 2. Your solution should use memoization to efficiently compute and store intermediate results for fast retrieval. Additionally, analyze the time complexity of your implementation.","solution":"def tribonacci(n, memo={}): Returns the nth number in the Tribonacci sequence. The Tribonacci sequence is defined as follows: T(0) = 0, T(1) = 1, T(2) = 1, and T(n) = T(n-1) + T(n-2) + T(n-3) for n > 2. Args: n (int): The index in the Tribonacci sequence to retrieve. Returns: int: The nth number in the Tribonacci sequence. # Base cases if n == 0: return 0 elif n == 1 or n == 2: return 1 # Check if result is already calculated if n in memo: return memo[n] # Recursively calculate the result while storing it in the memo dictionary memo[n] = tribonacci(n-1, memo) + tribonacci(n-2, memo) + tribonacci(n-3, memo) return memo[n] # Time complexity analysis: # The time complexity of this implementation is O(n) due to memoization. # Each value from 0 to n is computed only once and stored in the memo dictionary. # This minimizes redundant calculations, resulting in linear time complexity."},{"question":"Given a matrix of size m x n, find the length of the longest increasing path in the matrix (i.e., the longest path in which each next cell has a greater value than its previous cell). You can move in four directions: left, right, up, or down, and you may not move diagonally or revisit a cell. Write a function that returns the length of the longest increasing path. # Example: Input: matrix = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] Output: 4 Explanation: The longest increasing path is [1, 2, 6, 9]. Input: matrix = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] Output: 4 Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed. # Constraints: * m == matrix.length * n == matrix[0].length * 1 <= m, n <= 200 * 0 <= matrix[i][j] <= 2^31 - 1","solution":"def longest_increasing_path(matrix): def dfs(x, y): if dp[x][y] != -1: return dp[x][y] max_path = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] > matrix[x][y]: max_path = max(max_path, 1 + dfs(nx, ny)) dp[x][y] = max_path return max_path if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] dp = [[-1] * n for _ in range(m)] return max(dfs(x, y) for x in range(m) for y in range(n))"},{"question":"You are given a string containing both alphabetical characters and numerical digits, such as \'a1b2c3d4\'. Write a function to separate the letters and digits, sorting each group individually in ascending order, and then merge them back into a single sorted string with the letters appearing before the digits. For example, given the input \'d4c3b2a1\', the function should return \'abcd1234\'. Ensure your solution efficiently handles both types of characters and maintains a clear flow of sorting and merging logic.","solution":"def sort_and_merge(input_string): Separates the letters and digits from the input string, sorts each group in ascending order and merges them back together with letters appearing before the digits. letters = [] digits = [] for char in input_string: if char.isalpha(): letters.append(char) elif char.isdigit(): digits.append(char) sorted_letters = sorted(letters) sorted_digits = sorted(digits) return \'\'.join(sorted_letters + sorted_digits)"},{"question":"Given a string representing an arithmetic expression containing integers and the operators +, -, *, and /, write a function to evaluate the expression. The input string will always be a valid expression, and it may contain whitespaces. The expression must be evaluated using the correct operator precedence (multiplication and division before addition and subtraction) without using the `eval()` function. If division by zero is encountered, return the string \\"Error\\". Input: \\"3 + 5 / 2 * 3 - 6\\" Output: 3 Input: \\"10 * (2 + 3) / 5\\" Output: Error","solution":"def evaluate_expression(expression): Evaluate the given arithmetic expression and return the result or \\"Error\\" if division by zero is encountered. def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': if b == 0: return \\"Error\\" return a // b def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_ops(operators, values): b = values.pop() a = values.pop() op = operators.pop() result = operate(a, b, op) if result == \\"Error\\": return \\"Error\\" values.append(result) i = 0 n = len(expression) values = [] operators = [] while i < n: if expression[i] == \' \': i += 1 continue if expression[i].isdigit(): val = 0 while i < n and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while operators[-1] != \'(\': if apply_ops(operators, values) == \\"Error\\": return \\"Error\\" operators.pop() else: while (operators and operators[-1] != \'(\' and precedence(operators[-1]) >= precedence(expression[i])): if apply_ops(operators, values) == \\"Error\\": return \\"Error\\" operators.append(expression[i]) i += 1 while operators: if apply_ops(operators, values) == \\"Error\\": return \\"Error\\" return values[-1]"},{"question":"Given a list of integers, write a function that returns a Boolean indicating whether there exists a pair of integers in the list whose difference is equal to a specified target value. Your solution should handle both positive and negative differences and should work efficiently even for large lists. Include error handling to account for inputs that are not lists of integers or if the target is not an integer.","solution":"def has_pair_with_difference(nums, target): Returns a Boolean indicating whether there exists a pair of integers in the list whose difference is equal to the target value. Handles both positive and negative differences. if not isinstance(nums, list) or not all(isinstance(n, int) for n in nums): raise ValueError(\\"Input must be a list of integers.\\") if not isinstance(target, int): raise ValueError(\\"Target must be an integer.\\") num_set = set() for num in nums: if (num + target) in num_set or (num - target) in num_set: return True num_set.add(num) return False"},{"question":"Write a Python function that accepts a list of integers and an integer `k`. The function should rearrange the list so that each integer appears at most `k` times and in the relative order they first appeared. If an integer appears more than `k` times in the original list, retain only the first `k` occurrences. Also, write unit tests to verify your solution. Example: `list = [1, 1, 1, 2, 3, 3, 3, 3, 4, 4]`, `k = 2` Output: `[1, 1, 2, 3, 3, 4, 4]`","solution":"def rearrange_list(nums, k): Rearranges the list so that each integer appears at most `k` times, while retaining the relative order of their first appearance. Args: nums (list of int): List of integers. k (int): The maximum number of times an integer can appear. Returns: list of int: Rearranged list. count = {} result = [] for num in nums: if count.get(num, 0) < k: result.append(num) count[num] = count.get(num, 0) + 1 return result"},{"question":"Write a function to simulate an inventory management system for a small shop. The shop sells items and keeps track of the quantity on hand for each item. Implement the following functionalities: 1. **Add Item**: Add a new item to the inventory with a given initial quantity. If the item already exists, update the quantity by adding the new quantity to the existing quantity. 2. **Remove Item**: Remove a specified quantity of an item from the inventory. Ensure the quantity to be removed does not exceed the quantity on hand. If it does, adjust the quantity to zero. 3. **Check Inventory**: Return the current quantity of a specified item. If the item does not exist, return -1. The inventory should be case-insensitive, meaning \\"apple\\" and \\"Apple\\" should be considered the same item. # Example ```python inventory = Inventory() inventory.add_item(\\"apple\\", 10) inventory.add_item(\\"banana\\", 5) inventory.add_item(\\"apple\\", 5) assert inventory.check_inventory(\\"apple\\") == 15 assert inventory.check_inventory(\\"banana\\") == 5 assert inventory.check_inventory(\\"Orange\\") == -1 inventory.remove_item(\\"apple\\", 8) assert inventory.check_inventory(\\"apple\\") == 7 inventory.remove_item(\\"banana\\", 6) assert inventory.check_inventory(\\"banana\\") == 0 ``` **Function Signature**: ```python class Inventory: def __init__(self): pass def add_item(self, item: str, quantity: int) -> None: pass def remove_item(self, item: str, quantity: int) -> None: pass def check_inventory(self, item: str) -> int: pass ``` # Constraints - All item names are non-empty strings containing only alphabetic characters. - All quantity values are non-negative integers.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item: str, quantity: int) -> None: item_lower = item.lower() if item_lower in self.items: self.items[item_lower] += quantity else: self.items[item_lower] = quantity def remove_item(self, item: str, quantity: int) -> None: item_lower = item.lower() if item_lower in self.items: if self.items[item_lower] > quantity: self.items[item_lower] -= quantity else: self.items[item_lower] = 0 def check_inventory(self, item: str) -> int: item_lower = item.lower() return self.items.get(item_lower, -1)"},{"question":"Design a function that rearranges an array by moving all zero elements to the end while maintaining the relative order of other elements. Additionally, the function should not use any extra space and must modify the input array in-place. For example, given the following input array: ```python arr = [0, 1, 0, 3, 12] ``` The function should modify the array to: ```python [1, 3, 12, 0, 0] ``` Write an efficient implementation for the given task. Note that using a new array for holding the result is not allowed. Also, iterating multiple times through the array or additional list operations to achieve the result would be considered a suboptimal solution.","solution":"def move_zeroes(arr): Move all zeroes in the array to the end while maintaining the order of non-zero elements. This function modifies the array in-place without using extra space. Parameters: arr (list): The input list with integer elements. Returns: None: The function modifies the list in-place and returns None. non_zero_index = 0 # Move all non-zero elements to the front for i in range(len(arr)): if arr[i] != 0: arr[non_zero_index] = arr[i] non_zero_index += 1 # Fill the remaining positions with zeroes for i in range(non_zero_index, len(arr)): arr[i] = 0"},{"question":"Write a function that accepts an integer array and a target sum as input and determines if there exist three distinct elements in the array whose sum equals the target sum. The function should have a time complexity better than O(n^3). For more information, refer to https://www.geeksforgeeks.org/find-a-triplet-that-sum-to-a-given-value/.","solution":"def find_triplet_with_sum(arr, target_sum): Determines if there exist three distinct elements in the array whose sum equals the target sum. Parameters: arr (list): The input array of integers target_sum (int): The target sum Returns: bool: True if there exists a triplet with the sum equal to target_sum, False otherwise. arr.sort() n = len(arr) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target_sum: return True elif current_sum < target_sum: left += 1 else: right -= 1 return False"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the input list. Ensure the function handles negative numbers and zero correctly by excluding them, and validate input to handle non-numeric data. def filter_primes(input_list):","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(input_list): Returns a new list containing only the prime numbers from the input list. Excludes negative numbers, zero, and non-numeric data. if not isinstance(input_list, list): raise ValueError(\\"Input must be a list.\\") primes = [] for item in input_list: if isinstance(item, int) and is_prime(item): primes.append(item) return primes"},{"question":"Create a function that takes a string as input and returns the string with the words reversed, while preserving the original order of characters within each word. For example, given the input \\"hello world\\", the function should return \\"olleh dlrow\\".","solution":"def reverse_words_in_string(s): Returns the string with the words reversed, while preserving the original order of characters within each word. # Split the string into words words = s.split() # Reverse each word and join them back with spaces reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Design and implement a recommender system using collaborative filtering techniques. The system should analyze user behavior data and suggest items that users are likely to purchase next. Use a given dataset containing user-item interactions, preprocess the data appropriately, and apply matrix factorization or similar collaborative filtering methods to predict user preferences. Evaluate your model\'s performance using appropriate metrics such as RMSE or precision and recall. Provide a clear explanation of your approach and the rationale behind choosing the specific techniques for this problem.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error from scipy.sparse.linalg import svds def load_data(file_path): Loads the dataset from a given file path. return pd.read_csv(file_path) def preprocess_data(data): Preprocess data to create user-item interaction matrix. user_item_matrix = data.pivot(index=\'user_id\', columns=\'item_id\', values=\'interaction\').fillna(0) return user_item_matrix def perform_svd(user_item_matrix, k): Perform Singular Value Decomposition (SVD) on the user-item matrix. R = user_item_matrix.values user_ratings_mean = np.mean(R, axis=1) R_demeaned = R - user_ratings_mean.reshape(-1, 1) U, sigma, Vt = svds(R_demeaned, k=k) sigma = np.diag(sigma) predicted_ratings = np.dot(np.dot(U, sigma), Vt) + user_ratings_mean.reshape(-1, 1) return pd.DataFrame(predicted_ratings, columns=user_item_matrix.columns) def recommend_items(predictions, user_id, user_item_matrix, num_recommendations): Recommend items for a specific user based on predicted ratings. user_row_number = user_id - 1 sorted_user_predictions = predictions.iloc[user_row_number].sort_values(ascending=False) user_data = user_item_matrix.loc[user_id] known_items = user_data[user_data > 0].index.tolist() recommendations = sorted_user_predictions.drop(known_items).index[:num_recommendations] return recommendations.tolist() def evaluate_rmse(y_true, y_pred): Evaluates the RMSE between true ratings and predicted ratings. return mean_squared_error(y_true, y_pred, squared=False) # Example main program if __name__ == \\"__main__\\": file_path = \\"user_item_interactions.csv\\" data = load_data(file_path) user_item_matrix = preprocess_data(data) k = 50 # Number of latent features predicted_ratings = perform_svd(user_item_matrix, k) user_id_to_recommend = 1 recommendations = recommend_items(predicted_ratings, user_id_to_recommend, user_item_matrix, 5) print(f\\"Top 5 recommendations for user {user_id_to_recommend}: {recommendations}\\")"},{"question":"Implement a function that compresses a given string using Run-Length Encoding (RLE). The function should return the compressed string in a format where each character is followed by the count of its consecutive occurrences. For example, if the input string is \\"aaabbc\\", the function should return \\"a3b2c1\\". Additionally, the function should handle edge cases such as an empty string or a string with a single character. Ensure your solution is efficient in terms of both time and space complexity. Finally, identify and correct any potential inefficiencies in the following initial implementation: ``` def run_length_encoding(s): if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) return \'\'.join(compressed) ``` Critically examine how the provided function aims to achieve Run-Length Encoding and discuss any potential pitfalls or areas for optimization in your improved solution.","solution":"def run_length_encoding(s): Compresses the given string using Run-Length Encoding (RLE). Args: s (str): The input string to be compressed. Returns: str: The compressed string in RLE format. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) return \'\'.join(compressed) # The initial implementation is fairly efficient. It has a time complexity of O(n) and # space complexity of O(n) where n is the length of the input string. The only minor optimization # would be to avoid unnecessary appends, which is already minimal in the provided code."},{"question":"Write a function that takes a string as input and returns the longest substring without repeating characters. The function should have a linear time complexity and use a sliding window approach. Provide a detailed explanation of your algorithm\'s efficiency and illustrate it with an example.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. Uses a sliding window approach to achieve linear time complexity. Args: s (str): Input string Returns: str: The longest substring without repeating characters start = 0 max_length = 0 max_substring = \\"\\" used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: if i - start + 1 > max_length: max_length = i - start + 1 max_substring = s[start:i+1] used_chars[char] = i return max_substring"},{"question":"Write a Python function called `longest_word_length` that takes a single string argument and returns the length of the longest word in that string. Assume that words are separated by spaces and the string contains only alphabetic characters and spaces. For example: ``` longest_word_length(\\"A quick brown fox jumps over the lazy dog\\") ``` should return `5`, as the longest word (\\"quick\\" and \\"jumps\\") is 5 characters long.","solution":"def longest_word_length(s): Returns the length of the longest word in the given string. Parameters: s (str): The input string consisting of alphabetic characters and spaces. Returns: int: The length of the longest word in the string. words = s.split() longest_length = max(len(word) for word in words) return longest_length"},{"question":"Write a Python function that accepts a list of strings representing algebraic operations containing integers (without spaces) and returns the evaluated results as a list of integers. The operations can include addition (+), subtraction (-), multiplication (*), and integer division (/). For example, given the input [\\"2+2\\", \\"4-1\\", \\"6*3\\", \\"8/2\\"], the function should output [4, 3, 18, 4]. Note: Use integer division where the fractional part is truncated, just like the // operator in Python.","solution":"def evaluate_operations(operations): Evaluates a list of algebraic operations (given as strings) and returns the results as a list of integers. results = [] for operation in operations: results.append(eval(operation.replace(\\"/\\", \\"//\\"))) return results"},{"question":"Write a Python function that takes a list of integers as an argument and returns the sum of the squares of the elements in the list. For example, given the list `[1, 2, 3, 4]`, the function should return `30` (because `1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30`). Function signature: `def sum_of_squares(lst: list) -> int:`","solution":"def sum_of_squares(lst: list) -> int: Returns the sum of the squares of the elements in the list. :param lst: List of integers :return: Sum of the squares of the integers in the list return sum(x**2 for x in lst)"},{"question":"Create a function that takes an array of integers and returns the longest sequence of consecutive integers present in the array. The sequence does not need to be contiguous in the array but should maintain the order. **Function Signature:** ```python def longest_consecutive_sequence(arr: List[int]) -> List[int]: pass ``` **Input:** - An array of integers, where the integers can be positive, negative, or zero. **Output:** - Returns a list containing the longest sequence of consecutive integers. **Example:** ```python assert longest_consecutive_sequence([3, 9, 1, 10, 4, 20, 2]) == [1, 2, 3, 4] assert longest_consecutive_sequence([0, -1, 1, 2, -2, -3, 3]) == [-3, -2, -1, 0, 1, 2, 3] assert longest_consecutive_sequence([7, 6, 5, 8, 10, 9]) == [5, 6, 7, 8, 9, 10] ```","solution":"def longest_consecutive_sequence(arr): Returns the longest sequence of consecutive integers present in the array. if not arr: return [] # Create a set of the array elements for O(1) look-up times. num_set = set(arr) longest_seq = [] for num in arr: # Check if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_seq = [] while current_num in num_set: current_seq.append(current_num) current_num += 1 if len(current_seq) > len(longest_seq): longest_seq = current_seq return longest_seq"},{"question":"Develop a function that accepts a list of numbers and returns a new list containing only the numbers that are both unique and even. The function should iterate through the input list once, maintaining an efficient time complexity. Ensure your function handles edge cases, such as when the list is empty or contains non-numeric values. ```python def filter_unique_even_numbers(numbers): This function takes a list of numbers and returns a new list containing only unique even numbers. :param numbers: List of numbers (integers or floats) :return: List of unique even numbers pass ```","solution":"def filter_unique_even_numbers(numbers): This function takes a list of numbers and returns a new list containing only unique even numbers. :param numbers: List of numbers (integers or floats) :return: List of unique even numbers even_numbers = {} for number in numbers: if isinstance(number, (int, float)) and number % 2 == 0: even_numbers[number] = True return list(even_numbers.keys())"},{"question":"Write an algorithm to implement an automated stock trading bot. The bot should monitor a specific stock\'s real-time price every minute for a 7-day trading session. Your bot should follow a simplified trading strategy: buy the stock when the price drops more than 5% from the highest price observed during the session, and sell the stock when the price increases more than 5% from the bought price. Furthermore, ensure the bot can handle API rate limits and network interruptions gracefully, resuming operations without losing any data. Your solution should also provide a logging mechanism that records each buy and sell action, including the timestamp, the price at which the action was performed, and the profit or loss incurred from the trade. Additionally, include a feature allowing the user to dynamically update the stock symbol being monitored without stopping and restarting the bot.","solution":"import time import logging import requests class StockTradingBot: def __init__(self, stock_symbol): self.stock_symbol = stock_symbol self.highest_price = 0 self.bought_price = None self.logging_setup() def logging_setup(self): logging.basicConfig( filename=f\'stock_trading_bot_{self.stock_symbol}.log\', level=logging.INFO, format=\'%(asctime)s - %(message)s\' ) def get_stock_price(self): # Placeholder function to retrieve the stock price. # Replace with actual implementation such as calling a real-time stock price API. return requests.get(f\'https://api.example.com/stock/{self.stock_symbol}/price\').json()[\\"price\\"] def check_buy_condition(self, current_price): return current_price < self.highest_price * 0.95 def check_sell_condition(self, current_price): return self.bought_price and current_price > self.bought_price * 1.05 def update_stock_symbol(self, new_stock_symbol): self.stock_symbol = new_stock_symbol self.highest_price = 0 self.bought_price = None self.logging_setup() logging.info(f\\"Stock symbol updated to {new_stock_symbol}\\") def run(self): while True: try: current_price = self.get_stock_price() if current_price > self.highest_price: self.highest_price = current_price if self.bought_price: if self.check_sell_condition(current_price): profit = current_price - self.bought_price logging.info(f\\"Sell: {current_price}, Profit: {profit}\\") self.bought_price = None else: if self.check_buy_condition(current_price): self.bought_price = current_price logging.info(f\\"Buy: {current_price}\\") time.sleep(60) # Check every minute except requests.exceptions.RequestException as e: logging.error(f\\"Network error: {e}. Retrying in 60 seconds\\") time.sleep(60) except Exception as e: logging.error(f\\"Unexpected error: {e}. Retrying in 60 seconds\\") time.sleep(60)"},{"question":"Given a dictionary where each key is a string representing a person\'s name and the corresponding key value is a list of integers indicating their scores in different subjects, determine and return the average score of each person rounded to the nearest integer. Example input: ```python { \\"Alice\\": [90, 85, 88], \\"Bob\\": [70, 80], \\"Charlie\\": [100, 95, 92, 88] } ``` Example output: ```python { \\"Alice\\": 88, \\"Bob\\": 75, \\"Charlie\\": 94 } ```","solution":"def average_scores(scores_dict): Given a dictionary where each key is a string representing a person\'s name and the corresponding value is a list of integers indicating their scores in different subjects, determine and return the average score of each person rounded to the nearest integer. :param scores_dict: Dictionary with names as keys and lists of scores as values :return: Dictionary with names as keys and their average score rounded to the nearest integer avg_scores = {} for name, scores in scores_dict.items(): if scores: avg_scores[name] = round(sum(scores) / len(scores)) else: avg_scores[name] = 0 # Handle the case of empty score lists return avg_scores"},{"question":"You are given a binary tree where each node contains an integer value. Write a function that flattens the tree into a linked list in-place (using the right pointers). The linked list should use the same nodes as the tree and follow the preorder traversal of the binary tree. Your solution should not allocate additional nodes and must use O(1) additional space. Discuss the time complexity of your solution.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root): Flattens the binary tree into a linked list in-place using the right pointers. The linked list should follow the preorder traversal of the binary tree. if not root: return None def flatten_tree(node): while node: if node.left: # Find the rightmost node in the left subtree rightmost = node.left while rightmost.right: rightmost = rightmost.right # Re-attach the right subtree rightmost.right = node.right # Move the left subtree to the right node.right = node.left node.left = None # Move on to the right node node = node.right flatten_tree(root) return root"},{"question":"You are given a list of employees, where each employee has an ID, a manager ID, and their respective salary. The manager ID for an employee signifies that the employee is directly supervised by that manager. If an employee has no manager, their manager ID will be -1. Write a function that takes this list and a target employee ID and calculates the total salary sum of the target employee\'s entire organization, including the target employee\'s salary and all the salaries of the employees who report directly or indirectly to the target employee. Example 1: Input: employees = [ {\\"id\\": 1, \\"manager_id\\": -1, \\"salary\\": 100}, {\\"id\\": 2, \\"manager_id\\": 1, \\"salary\\": 90}, {\\"id\\": 3, \\"manager_id\\": 1, \\"salary\\": 80}, {\\"id\\": 4, \\"manager_id\\": 2, \\"salary\\": 70}, {\\"id\\": 5, \\"manager_id\\": 2, \\"salary\\": 60} ], target_id = 1 Output: 400 Explanation: The employee with ID 1 has two direct reports (employees with IDs 2, 3). Employee 2 has two direct reports (employees with IDs 4, 5). Therefore, the total salary sum is 100 + 90 + 80 + 70 + 60 = 400. Example 2: Input: employees = [ {\\"id\\": 1, \\"manager_id\\": -1, \\"salary\\": 90}, {\\"id\\": 2, \\"manager_id\\": 1, \\"salary\\": 100}, {\\"id\\": 3, \\"manager_id\\": 2, \\"salary\\": 110}, {\\"id\\": 4, \\"manager_id\\": 3, \\"salary\\": 120} ], target_id = 2 Output: 330 Explanation: The employee with ID 2 has one direct report (employee with ID 3). Employee 3 has one direct report (employee with ID 4). Therefore, the total salary sum is 100 + 110 + 120 = 330. Note: - The employees list can have at most 1000 employees. - Employee IDs are guaranteed to be unique and positive integers between 1 and 1000. - Each employee has exactly one manager or no manager at all. - Salaries are positive integers.","solution":"def calculate_organization_salary_sum(employees, target_id): Calculate the total salary sum of the target employee\'s entire organization. employee_map = {emp[\'id\']: emp for emp in employees} def calculate_total_salary(employee_id): total_salary = employee_map[employee_id][\'salary\'] subordinates = [emp[\'id\'] for emp in employees if emp[\'manager_id\'] == employee_id] for subordinate in subordinates: total_salary += calculate_total_salary(subordinate) return total_salary return calculate_total_salary(target_id)"},{"question":"Write a function in Python to merge two sorted integer arrays into a single sorted array. The input arrays are [1, 3, 5, 7] and [2, 4, 6, 8]. Ensure that the function efficiently combines these arrays while maintaining the sorted order without utilizing the built-in sorting functions. Additionally, include a brief explanation of the approach you used to solve this problem.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted integer arrays into a single sorted array. Args: arr1 (list): The first sorted array. arr2 (list): The second sorted array. Returns: list: A merged sorted array. merged_array = [] i, j = 0, 0 # Use two pointers to go through both arrays and merge them while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append any remaining elements from arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append any remaining elements from arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array # Example usage: arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] merged_array = merge_sorted_arrays(arr1, arr2) print(merged_array) # Output: [1, 2, 3, 4, 5, 6, 7, 8]"},{"question":"Refactor the given code to implement the described changes and correct the wrong part: ```python def unique_elements(arr): Refactor the code to return a list of unique elements from the input array. Remove duplicates while maintaining the original order of elements. Also, fix the mistake in the provided code. Example: unique_elements([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5] Identified error for rectification: result = [] seen = sit() for item in arr: if item not seen: seen.append(item) result.append(item) return result ```","solution":"def unique_elements(arr): Returns a list of unique elements from the input array, removing duplicates while maintaining the original order of elements. Example: unique_elements([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5] result = [] seen = set() for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Devise a Python function that reads a text file containing multiple lines. Your function should identify the most frequently occurring word in the file and return it alongside its frequency. Ensure the function is case insensitive, disregards punctuation, and handles ties by returning any one of the most frequent words. Provide test cases to validate your implementation.","solution":"import re from collections import Counter def most_frequent_word(file_path): Reads a text file and returns the most frequently occurring word (case insensitive, punctuation ignored) along with its frequency. In case of a tie, returns any one of the most frequent words. with open(file_path, \'r\') as file: text = file.read().lower() # Remove punctuation text = re.sub(r\'[^ws]\', \'\', text) # Split into words words = text.split() # Count frequencies word_counts = Counter(words) # Get the most common word most_common_word, frequency = word_counts.most_common(1)[0] return most_common_word, frequency"},{"question":"Given an integer n, write a function that returns True if n is a Happy Number and False otherwise. A Happy Number is defined by the following process: starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1, or it loops endlessly in a cycle which does not include 1. Use a set to detect cycles. def is_happy_number(n): Returns True if n is a happy number, otherwise False. Examples: is_happy_number(19) should return True is_happy_number(2) should return False is_happy_number(7) should return True def get_next(number): return sum(int(char) ** 2 for char in str(number)) seen_numbers = set() while n != 1 and n not in seen_numbers: seen_numbers.add(n) n = get_next(n) return n == 1","solution":"def is_happy_number(n): Returns True if n is a happy number, otherwise False. Examples: is_happy_number(19) should return True is_happy_number(2) should return False is_happy_number(7) should return True def get_next(number): return sum(int(char) ** 2 for char in str(number)) seen_numbers = set() while n != 1 and n not in seen_numbers: seen_numbers.add(n) n = get_next(n) return n == 1"},{"question":"Write a function to determine if two strings are anagrams of each other. Two strings are anagrams if they are made up of the same characters with the same frequencies, but in a different order. Your solution should be case-insensitive and should ignore spaces and punctuation. Additionally, provide a second version of your function that ignores not only case, spaces, and punctuation but also considers words with different character arrangements (e.g., \'rat\' and \'tar\') as non-anagrams if they are of different lengths. Examples: - \\"The eyes\\" and \\"They see\\" are anagrams. - \\"A gentleman\\" and \\"Elegant man\\" are anagrams. - \\"Hello, World!\\" and \\"world Hello!\\" are anagrams. - \\"Dormitory\\" and \\"Dirty room\\" are anagrams ignoring only the punctuations and spaces. - \\"Dormitory\\" and \\"Dirty rooms\\" are not anagrams in the second version as their lengths differ.","solution":"import string def clean_string(s): Cleans the input string by removing spaces, punctuation, and converting to lowercase. return \'\'.join(e for e in s if e.isalnum()).lower() def are_anagrams(s1, s2): Determines if two strings are anagrams of each other, ignoring case, spaces, and punctuation. cleaned_s1 = clean_string(s1) cleaned_s2 = clean_string(s2) return sorted(cleaned_s1) == sorted(cleaned_s2) def are_anagrams_strict(s1, s2): Determines if two strings are anagrams of each other, considering lengths after removing spaces, punctuation, and ignoring case. cleaned_s1 = clean_string(s1) cleaned_s2 = clean_string(s2) if len(cleaned_s1) != len(cleaned_s2): return False return sorted(cleaned_s1) == sorted(cleaned_s2)"},{"question":"Implement a function to find the longest contiguous sub-array within an array of integers that has the maximum sum. Ensure that your solution has an optimal time complexity. def max_subarray_sum(arr): pass # Example Usage # Input: [1, -3, 2, 1, -1] # Output: 3 # The sub-array is [2, 1]","solution":"def max_subarray_sum(arr): Finds the sum of the longest contiguous sub-array with the maximum sum in the given array of integers. Implements Kadane\'s Algorithm which runs in O(n) time complexity. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that takes a list of integers and a target integer as inputs. The function should find two distinct elements in the list that when added together give the target integer. The function should return a tuple containing the indices of these two elements. If no such elements exist, the function should return a message stating \\"No two numbers add up to the target\\". Ensure the function handles edge cases such as an empty list or a list with fewer than two elements.","solution":"def find_two_sum(nums, target): Finds two distinct elements in the given list of integers that add up to the target. Parameters: - nums: List of integers. - target: The target integer. Returns: - A tuple containing the indices of the two elements that add up to the target, if they exist. - A message stating \\"No two numbers add up to the target\\" if no such elements exist. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return \\"No two numbers add up to the target\\""},{"question":"How would you use Python\'s itertools library to generate all possible unique permutations of the string \\"abc\\"? Additionally, describe how the output would change if duplicates were allowed in the input string, such as \\"aab\\".","solution":"from itertools import permutations def generate_unique_permutations(s): Generate all unique permutations of the string s. return list(set([\'\'.join(p) for p in permutations(s)]))"},{"question":"Write a Python function called `anagram_pairs` that takes a list of strings and returns the number of pairs of strings that are anagrams of each other. An anagram is a word formed by rearranging the letters of another, such as \\"listen\\" and \\"silent\\". # Function Signature ```python def anagram_pairs(words: List[str]) -> int: pass ``` # Input - `words` (List[str]): A list of strings. Each string contains only lowercase English letters. The length of the list will not exceed 100, and each string will have a length between 1 and 100. # Output - Returns an integer representing the number of pairs of strings that are anagrams of each other. # Example ```python words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\"] assert anagram_pairs(words) == 4 words = [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] assert anagram_pairs(words) == 15 ``` # Explanation - In the first example, \\"listen\\", \\"silent\\", and \\"enlist\\" are all anagrams of each other, making three pairs: (\\"listen\\", \\"silent\\"), (\\"listen\\", \\"enlist\\"), and (\\"silent\\", \\"enlist\\"). Additionally, \\"google\\" and \\"gogole\\" form a pair, totaling four pairs. - In the second example, every string is an anagram of every other string, resulting in 15 pairs.","solution":"from typing import List from collections import defaultdict def anagram_pairs(words: List[str]) -> int: Returns the number of pairs of strings that are anagrams of each other. anagram_count = defaultdict(int) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_count[sorted_word] += 1 pairs = 0 for count in anagram_count.values(): if count > 1: pairs += (count * (count - 1)) // 2 return pairs"},{"question":"Write a function `find_longest_substring` that takes a single string as its input and returns the longest substring that contains at most two distinct characters. For example, given the input string \\"eceba\\", the function should return \\"ece\\". If there are multiple substrings of the same maximum length, return the one that appears first. Write an efficient algorithm to solve this problem, not just a naive approach that checks all possible substrings.","solution":"def find_longest_substring(s): Returns the longest substring that contains at most two distinct characters. n = len(s) if n <= 2: return s window_start = 0 max_length = 0 starting_index_of_max = 0 char_frequency = {} for window_end in range(n): right_char = s[window_end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > 2: left_char = s[window_start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] window_start += 1 current_length = window_end - window_start + 1 if current_length > max_length: max_length = current_length starting_index_of_max = window_start return s[starting_index_of_max:starting_index_of_max + max_length]"},{"question":"Write a function that takes an array of integers and an integer k, and returns the number of unique k-pairs in the array. A k-pair is defined as a pair of integers (a, b) such that a - b = k. Ensure your solution handles both positive and negative values of k. Consider edge cases where the array is empty or has less than two elements. Provide a brief analysis of the time and space complexity of your solution.","solution":"def find_pairs_with_difference(arr, k): Returns the number of unique k-pairs in the array where a - b = k. Parameters: arr (list): List of integers. k (int): The difference value. Returns: int: Number of unique k-pairs. if len(arr) < 2: return 0 seen = set() pairs = set() for num in arr: if num + k in seen: pairs.add((num + k, num)) if num - k in seen: pairs.add((num, num - k)) seen.add(num) return len(pairs)"},{"question":"Write a Python function that takes a list of integers and returns the contiguous subarray (containing at least one number) which has the largest sum along with the starting and ending indices of this subarray. For example: input_list = [-2, 1, -3, 4, -1, 2, 1, -5, 4] The function should return: maximum_sum = 6 start_index = 3 end_index = 6 Explanation: The maximum sum subarray is [4, -1, 2, 1], which starts at index 3 and ends at index 6.","solution":"def max_subarray_sum(nums): Returns the sum, starting index, and ending index of the contiguous subarray with the largest sum. :param nums: List of integers :return: Tuple containing the largest sum, start index, and end index if not nums: return 0, -1, -1 # In case of empty list max_sum = current_sum = nums[0] start = end = s = 0 for i in range(1, len(nums)): if nums[i] > current_sum + nums[i]: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return max_sum, start, end"},{"question":"Write a program that receives a list of strings representing book titles and counts how many times each distinct word appears across all titles. The program should then return a dictionary where the keys are the words and the values are the counts of their appearances. For example, given the list of book titles: ``` [\\"The Great Gatsby\\", \\"Great Expectations\\", \\"The Catcher in the Rye\\", \\"Catch-22\\"] ``` The output should be: ``` { \\"The\\": 2, \\"Great\\": 2, \\"Gatsby\\": 1, \\"Expectations\\": 1, \\"Catcher\\": 1, \\"in\\": 1, \\"the\\": 1, \\"Rye\\": 1, \\"Catch-22\\": 1 } ``` Note: - Words should be treated case-sensitively. - Words are defined as contiguous sequences of alphabetic characters or digits, making sure to treat words like \\"Catch-22\\" as a single entity. - Ignore any punctuation that separates words.","solution":"import re from collections import defaultdict def count_words_in_titles(titles): Counts how many times each distinct word appears across all book titles. Parameters: titles (list of str): List of book titles. Returns: dict: A dictionary where keys are the distinct words and values are their counts. word_count = defaultdict(int) for title in titles: # Finding words considering alphanumeric characters and \'-\' as part of the word words = re.findall(r\'b[w-]+b\', title) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Develop a program that simulates a basic banking system utilizing object-oriented programming principles. The program should include classes for `Account`, `SavingsAccount`, and `CurrentAccount`. The `Account` class should serve as a base class with common attributes such as account number, holder name, and balance. The `SavingsAccount` and `CurrentAccount` should inherit from `Account` and include additional attributes or methods specific to each account type, such as interest rate for `SavingsAccount` and overdraft limit for `CurrentAccount`. Implement methods for depositing and withdrawing money, and for displaying the account details. The program should also handle exceptions for cases such as insufficient balance for withdrawals or exceeding the overdraft limit. Additionally, ensure that the program can create instances of each account type and demonstrate typical transactions and operations.","solution":"class Account: def __init__(self, account_number, holder_name, balance=0.0): self.account_number = account_number self.holder_name = holder_name self.balance = balance def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount return self.balance def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient balance.\\") self.balance -= amount return self.balance def display_details(self): return { \\"Account Number\\": self.account_number, \\"Holder Name\\": self.holder_name, \\"Balance\\": self.balance } class SavingsAccount(Account): def __init__(self, account_number, holder_name, balance=0.0, interest_rate=0.0): super().__init__(account_number, holder_name, balance) self.interest_rate = interest_rate def display_details(self): details = super().display_details() details[\\"Interest Rate\\"] = self.interest_rate return details class CurrentAccount(Account): def __init__(self, account_number, holder_name, balance=0.0, overdraft_limit=0.0): super().__init__(account_number, holder_name, balance) self.overdraft_limit = overdraft_limit def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance + self.overdraft_limit: raise ValueError(\\"Exceeding overdraft limit.\\") self.balance -= amount return self.balance def display_details(self): details = super().display_details() details[\\"Overdraft Limit\\"] = self.overdraft_limit return details"},{"question":"Create a Python function that reads a CSV file and performs simple data analysis on it. The CSV file contains information about various products in an e-commerce store, with columns such as product_id, category, price, quantity_sold, and rating. Your function should perform the following tasks: 1. Calculate the total number of products in the file. 2. Compute the average rating of all products. 3. Find the product with the highest price. 4. Determine the total quantity of products sold per category. 5. Return a dictionary with the above results. Example CSV content: ``` product_id,category,price,quantity_sold,rating 1,Electronics,299.99,150,4.5 2,Books,19.99,1200,4.8 3,Clothing,49.99,500,4.2 4,Electronics,399.99,100,4.6 ``` Your function should return: ```python { \\"total_products\\": 4, \\"average_rating\\": 4.525, \\"highest_priced_product\\": {\\"product_id\\": 4, \\"category\\": \\"Electronics\\", \\"price\\": 399.99, \\"quantity_sold\\": 100, \\"rating\\": 4.6}, \\"total_quantity_sold_per_category\\": {\\"Electronics\\": 250, \\"Books\\": 1200, \\"Clothing\\": 500} } ``` Note: - The CSV file may contain a large number of products. - Implement proper error handling for file operations and data conversions. - Use Python\'s standard library wherever possible.","solution":"import csv from collections import defaultdict def analyze_csv(file_path): total_products = 0 total_rating = 0.0 highest_price = -float(\'inf\') highest_priced_product = {} category_sales = defaultdict(int) try: with open(file_path, mode=\'r\') as file: reader = csv.DictReader(file) for row in reader: total_products += 1 price = float(row[\'price\']) rating = float(row[\'rating\']) quantity_sold = int(row[\'quantity_sold\']) category = row[\'category\'] total_rating += rating category_sales[category] += quantity_sold if price > highest_price: highest_price = price highest_priced_product = { \'product_id\': int(row[\'product_id\']), \'category\': category, \'price\': price, \'quantity_sold\': quantity_sold, \'rating\': rating } average_rating = total_rating / total_products if total_products else 0 return { \\"total_products\\": total_products, \\"average_rating\\": average_rating, \\"highest_priced_product\\": highest_priced_product, \\"total_quantity_sold_per_category\\": dict(category_sales) } except (FileNotFoundError, IOError) as e: print(f\\"Error occurred: {e}\\") return {} except (ValueError, KeyError) as e: print(f\\"Data conversion error: {e}\\") return {}"},{"question":"Write a Python function called `find_longest_word` that takes a list of strings and returns the longest word in the list. If two or more words have the same length, return the first one encountered. Provide examples demonstrating the usage of your function.","solution":"def find_longest_word(words): Returns the longest word in the list. If two or more words have the same length, returns the first one encountered. if not words: return \\"\\" longest_word = words[0] for word in words: if len(word) > len(longest_word): longest_word = word return longest_word # Examples: # find_longest_word([\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]) -> \\"banana\\" # find_longest_word([\\"cat\\", \\"dog\\", \\"elephant\\", \\"bee\\"]) -> \\"elephant\\" # find_longest_word([\\"same\\", \\"size\\", \\"here\\", \\"word\\"]) -> \\"same\\" (first encountered with longest length)"},{"question":"Given a list of integers, write a function that returns the lengths of the three longest consecutive subsequences of the same number. If there are fewer than three such subsequences, return the lengths of the available ones. If no such subsequences exist, return an empty list. Example: ```python def three_longest_subsequences(arr): # Your code here # Samples print(three_longest_subsequences([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 2, 2])) # Output: [4, 3, 2] print(three_longest_subsequences([7, 7, 7, 1, 1, 3, 3, 8, 8, 8, 8])) # Output: [4, 3, 2] print(three_longest_subsequences([5, 5, 5, 5, 5, 5])) # Output: [6] print(three_longest_subsequences([])) # Output: [] ``` Your function should iterate through the list to identify subsequences, sort subsequences by length, and return the lengths of the three longest consecutive subsequences if they exist.","solution":"def three_longest_subsequences(arr): Given a list of integers, returns the lengths of the three longest consecutive subsequences of the same number. if not arr: return [] subsequences = [] current_length = 1 # Iterate through the list and identify consecutive subsequences for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_length += 1 else: subsequences.append(current_length) current_length = 1 # Append the last subsequence subsequences.append(current_length) # Sort subsequences by length in descending order subsequences.sort(reverse=True) # Return the lengths of the three longest subsequences return subsequences[:3]"},{"question":"Write a function that takes a string consisting of multiple sentences and returns the length of the shortest word in the entire string. The words are separated by spaces, and the sentences are separated by periods. You should handle cases where punctuation marks such as commas or exclamation points may be attached to words. For instance, the input string \\"Hello world. This is a test sentence, with punctuation! Isn\'t it great?\\" should return 1, because the shortest word is \\"a\\".","solution":"import re def find_shortest_word_length(text): Returns the length of the shortest word in the given text. # Using regex to split by any non-word character words = re.findall(r\'bw+b\', text) if not words: return 0 shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Write a Python function that flattens a given nested list by extracting all the elements, regardless of their depth in the nested structure, into a single list. Preserve the order of elements as they appear in the original nested lists. Example: List = [1, 2, [3, 4, [5, 6]], 7, [8, 9]] Your function should return [1, 2, 3, 4, 5, 6, 7, 8, 9].","solution":"def flatten(nested_list): Flattens a nested list, extracting all elements into a single list. Args: nested_list (list): A list that may contain other nested lists. Returns: list: A flattened list with all elements from the nested structure. result = [] def _flatten(lst): for item in lst: if isinstance(item, list): _flatten(item) else: result.append(item) _flatten(nested_list) return result"},{"question":"Implement a function to detect and correct spelling mistakes in a given list of words using a Trie data structure. Your function should take a dictionary of correctly spelled words as input to build the Trie and then identify and suggest corrections for words in the list that are not in the dictionary. Suggest corrections by finding the closest matches based on the minimum edit distance (Levenshtein distance). Output the corrected list of words.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word): node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def levenshtein_distance(word1, word2): dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)] for i in range(len(word1) + 1): for j in range(len(word2) + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) return dp[len(word1)][len(word2)] def correct_spelling(misspelled_words, dictionary_words): trie = Trie() corrections = {} for word in dictionary_words: trie.insert(word) for word in misspelled_words: if not trie.search(word): min_distance = float(\'inf\') suggestion = word for dict_word in dictionary_words: distance = levenshtein_distance(word, dict_word) if distance < min_distance: min_distance = distance suggestion = dict_word corrections[word] = suggestion corrected_list = [corrections.get(word, word) for word in misspelled_words] return corrected_list"},{"question":"Write a function in Python that simulates the behavior of a stack data structure using only two queues. Implement the following stack operations: push, pop, and top. Ensure that the function performs each operation with optimal time complexity. Provide a demonstration with a sample sequence of stack operations.","solution":"from queue import Queue class StackUsingQueues: def __init__(self): self.queue1 = Queue() self.queue2 = Queue() def push(self, x): self.queue2.put(x) while not self.queue1.empty(): self.queue2.put(self.queue1.get()) self.queue1, self.queue2 = self.queue2, self.queue1 def pop(self): if not self.queue1.empty(): return self.queue1.get() return None def top(self): if not self.queue1.empty(): return self.queue1.queue[0] return None"},{"question":"Implement a function in Python to evaluate an infix mathematical expression (e.g., \\"3 + 5 * (2 - 8)\\"). Your function should be able to handle addition, subtraction, multiplication, and division, as well as parentheses for grouping. Provide erroneous code that attempts to perform the task but has bugs. The candidate is expected to debug, fix the erroneous code, and explain in comments what was wrong to improve the code. Considerations: 1. Your program should correctly respect the order of operations (precedence of operators). 2. Write the program to handle nested parentheses effectively. 3. For the erroneous section, the code may contain issues like incorrect handling of operator precedence, poorly managed recursion stack, or syntax handling errors. Here is the erroneous code: ```python def evaluate_expression(expression): def helper(expr, index): operands = [] operators = [] num = 0 while index < len(expr): char = expr[index] if char.isdigit(): num = num * 10 + int(char) elif char == \'+\': operands.append(num) operators.append(char) num = 0 elif char == \'-\': operands.append(num) operators.append(char) num = 0 elif char == \'*\': operands.append(num) operators.append(char) num = 0 elif char == \'/\': operands.append(num) operators.append(char) num = 0 elif char == \'(\': num, index = helper(expr, index + 1) elif char == \')\': operands.append(num) break index += 1 if index == len(expr): operands.append(num) while operators: right_operand = operands.pop() left_operand = operands.pop() operator = operators.pop() if operator == \'+\': operands.append(left_operand + right_operand) elif operator == \'-\': operands.append(left_operand - right_operand) elif operator == \'*\': operands.append(left_operand * right_operand) elif operator == \'/\': operands.append(left_operand / right_operand) return operands[0], index result, _ = helper(expression, 0) return result ``` Explanation of areas to fix: 1. The order of operations is not handled correctly since we process operators in the order they appear rather than respecting the precedence. 2. Division by zero is not accounted for. 3. Parentheses handling might not correctly pass control flow back to the calling function leading to incorrect index handling and results. 4. Edge cases like expressions starting/ending with non-numeric characters or consecutive operators without an operand may cause the program to crash or return incorrect results.","solution":"def evaluate_expression(expression): def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_operator(operands, operator): right = operands.pop() left = operands.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) elif operator == \'/\': if right == 0: raise ValueError(\\"Division by zero\\") operands.append(left / right) def compute(expr): operands = [] operators = [] i = 0 while i < len(expr): if expr[i].isspace(): i += 1 continue if expr[i].isdigit(): val = 0 while i < len(expr) and expr[i].isdigit(): val = val * 10 + int(expr[i]) i += 1 operands.append(val) i -= 1 elif expr[i] == \'(\': operators.append(expr[i]) elif expr[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operands, operators.pop()) operators.pop() elif expr[i] in \\"+-*/\\": while (operators and precedence(operators[-1]) >= precedence(expr[i])): apply_operator(operands, operators.pop()) operators.append(expr[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[-1] return compute(expression)"},{"question":"Write a Python function that accepts a list of strings and a target word. The function should return a new list containing only those strings from the original list that contain the target word. Ensure the function is case-insensitive and handles punctuation marks correctly.","solution":"import re def filter_strings_with_target(strings, target): Filters the list of strings to include only those that contain the target word (case-insensitive, ignoring punctuation). target_re = re.compile(r\'b\' + re.escape(target) + r\'b\', re.IGNORECASE) return [s for s in strings if target_re.search(s)]"},{"question":"Create a dynamic library management system that can efficiently manage the addition and removal of books, member registrations, book loans, and returns. The system should be capable of handling the following functionalities: - Add new books to the catalog, including book title, author, ISBN, genre, and the number of available copies. - Register new members, capturing details such as member name, membership number, contact information, and membership type (e.g., student, faculty, external). - Issue books to members, ensuring that the same book is not issued multiple times to the same member, and updating the count of available copies. - Record the return of books, updating the available copies accordingly. - Implement a fine system for overdue books, with the fine amount based on the number of overdue days. - Provide search functionality to allow users to search for books by title, author, ISBN, or genre. - Generate reports listing all overdue books, including the member details and the amount of the due fine. - Ensure thread safety for concurrent access to the catalog and member data. Your implementation should be thorough and include exception handling to manage potential errors, such as invalid member ID or book ISBN. Develop test cases to validate each functionality of the system and demonstrate its robustness.","solution":"import threading from collections import defaultdict from datetime import datetime, timedelta class Library: def __init__(self): self.books = defaultdict(list) self.members = {} self.loaned_books = {} self.fine_per_day = 1 # Assumed fine amount per day self.lock = threading.Lock() def add_book(self, title, author, isbn, genre, copies): with self.lock: for _ in range(copies): self.books[isbn].append({\\"title\\": title, \\"author\\": author, \\"genre\\": genre, \\"issued_to\\": None}) def register_member(self, name, member_id, contact, member_type): with self.lock: if member_id in self.members: raise ValueError(\\"Member ID already exists\\") self.members[member_id] = {\\"name\\": name, \\"contact\\": contact, \\"member_type\\": member_type, \\"books_issued\\": []} def issue_book(self, isbn, member_id): with self.lock: if member_id not in self.members: raise ValueError(\\"Invalid member ID\\") if isbn not in self.books or all(book[\'issued_to\'] for book in self.books[isbn]): raise ValueError(\\"Book not available\\") if any(book[\'isbn\'] == isbn for book in self.members[member_id][\\"books_issued\\"]): raise ValueError(\\"Book already issued to this member\\") for book in self.books[isbn]: if not book[\'issued_to\']: book[\'issued_to\'] = member_id issue_date = datetime.now() self.members[member_id][\\"books_issued\\"].append({\\"isbn\\": isbn, \\"issue_date\\": issue_date}) self.loaned_books[(isbn, member_id)] = issue_date break def return_book(self, isbn, member_id): with self.lock: if member_id not in self.members: raise ValueError(\\"Invalid member ID\\") if (isbn, member_id) not in self.loaned_books: raise ValueError(\\"Book not issued to this member\\") for book in self.books[isbn]: if book[\'issued_to\'] == member_id: book[\'issued_to\'] = None break issue_info = next((item for item in self.members[member_id][\\"books_issued\\"] if item[\\"isbn\\"] == isbn), None) self.members[member_id][\\"books_issued\\"].remove(issue_info) del self.loaned_books[(isbn, member_id)] def calculate_fine(self, return_date, issue_date): overdue_days = (return_date - issue_date).days - 14 # Assuming 14 days borrowing period return self.fine_per_day * max(0, overdue_days) def search_books(self, search_key, search_value): result = [] for isbn, book_list in self.books.items(): for book in book_list: if book[search_key] == search_value: result.append(book) return result def get_overdue_books(self): overdue_books = [] for (isbn, member_id), issue_date in self.loaned_books.items(): if (datetime.now() - issue_date).days > 14: # Assuming 14 days borrowing period fine = self.calculate_fine(datetime.now(), issue_date) member = self.members[member_id] overdue_books.append({\\"isbn\\": isbn, \\"member_id\\": member_id, \\"member_name\\": member[\\"name\\"], \\"fine\\": fine}) return overdue_books"},{"question":"Using the Iris dataset available from sklearn, implement a k-means clustering algorithm to categorize the data into three distinct clusters. Once the clustering is completed, provide a detailed analysis by evaluating the accuracy of the clustering using external metrics such as the Adjusted Rand Index (ARI) and visualize the clusters along with the actual species to compare the results. Ensure your explanation connects the characteristics of the dataset with the performance of the clustering algorithm.","solution":"from sklearn import datasets from sklearn.cluster import KMeans from sklearn.metrics import adjusted_rand_score import matplotlib.pyplot as plt import numpy as np def kmeans_clustering_iris(): # Load the Iris dataset iris = datasets.load_iris() X = iris.data y_true = iris.target # Apply k-means clustering with 3 clusters kmeans = KMeans(n_clusters=3, random_state=0) y_pred = kmeans.fit_predict(X) # Evaluate the clustering using Adjusted Rand Index (ARI) ari = adjusted_rand_score(y_true, y_pred) # Plot the clusters plt.figure(figsize=(12, 6)) plt.subplot(1, 2, 1) plt.scatter(X[:, 0], X[:, 1], c=y_true, cmap=\'viridis\', edgecolor=\'k\', s=50) plt.title(\\"Actual Species\\") plt.xlabel(iris.feature_names[0]) plt.ylabel(iris.feature_names[1]) plt.subplot(1, 2, 2) plt.scatter(X[:, 0], X[:, 1], c=y_pred, cmap=\'viridis\', edgecolor=\'k\', s=50) plt.title(\\"K-means Clustering\\") plt.xlabel(iris.feature_names[0]) plt.ylabel(iris.feature_names[1]) plt.show() print(f\'Adjusted Rand Index (ARI): {ari:.3f}\') return ari, y_pred"},{"question":"You are given a list of integers representing daily temperatures. Your task is to create a function that will return a list where each element represents the number of days you would have to wait until a warmer temperature. If there is no future day with a higher temperature, the value should be 0. Example input: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] Expected output: [1, 1, 4, 2, 1, 1, 0, 0] Explanation: - On day 1, you have to wait 1 day until the temperature is warmer (from 73 to 74). - On day 2, you have to wait 1 day until the temperature is warmer (from 74 to 75). - On day 3, you have to wait 4 days until the temperature is warmer (from 75 to 76). - On day 4, you have to wait 2 days until the temperature is warmer (from 71 to 72). - On day 5, you have to wait 1 day until the temperature is warmer (from 69 to 72). - On day 6, you have to wait 1 day until the temperature is warmer (from 72 to 76). - On day 7, there is no future day with a higher temperature, so you return 0. - On day 8, there is no future day with a higher temperature, so you return 0. Write a function `waiting_days_for_warmer_temp(temperatures)` that implements this logic.","solution":"def waiting_days_for_warmer_temp(temperatures): Returns a list of integers where each element represents the number of days until a warmer temperature. If there is no future day with a higher temperature, the value should be 0. n = len(temperatures) result = [0] * n stack = [] # This will store indices of the temperatures list for current_day in range(n): while stack and temperatures[current_day] > temperatures[stack[-1]]: previous_day = stack.pop() result[previous_day] = current_day - previous_day stack.append(current_day) return result"},{"question":"Develop a scheduling program for a conference that deals with multiple tracks and varying session lengths. The system should be able to allocate rooms and time slots based on the given constraints: each track has a set of sessions that must fit within a predefined window, certain sessions cannot overlap due to required attendance by specific individuals, and some sessions may have flexible time slots. The solution should include a way to handle last-minute changes and conflicts in the schedule dynamically. Additionally, provide a user interface for organizers to input and adjust schedules, and write documentation explaining how to use the system and manage scheduling conflicts.","solution":"class ConferenceScheduler: def __init__(self): self.tracks = {} self.track_sessions = {} self.schedule = {} def add_track(self, track_name, start_time, end_time): self.tracks[track_name] = (start_time, end_time) self.track_sessions[track_name] = [] def add_session(self, track_name, session_name, duration, required_attendees=[]): if track_name not in self.tracks: raise ValueError(f\\"Track {track_name} does not exist.\\") self.track_sessions[track_name].append({ \'session_name\': session_name, \'duration\': duration, \'required_attendees\': required_attendees }) def create_schedule(self): # Simplified scheduling algorithm: Assign sessions in the order they are added for track_name, (start_time, end_time) in self.tracks.items(): available_time = start_time self.schedule[track_name] = [] for session in self.track_sessions[track_name]: if available_time + session[\'duration\'] > end_time: raise ValueError(f\\"Session {session[\'session_name\']} cannot be scheduled due to time constraints.\\") self.schedule[track_name].append({ \'session_name\': session[\'session_name\'], \'start_time\': available_time, \'end_time\': available_time + session[\'duration\'] }) available_time += session[\'duration\'] def update_schedule(self, track_name, session_name, new_start_time): # Placeholder for conflict resolution logic for session in self.schedule[track_name]: if session[\'session_name\'] == session_name: duration = session[\'end_time\'] - session[\'start_time\'] session[\'start_time\'] = new_start_time session[\'end_time\'] = new_start_time + duration def get_schedule(self): return self.schedule"},{"question":"The task is to determine the intersection of two integer arrays. Given two lists of integers `nums1` and `nums2`, the goal is to return an array that represents their intersection. Each element in the result must be unique and output can be in any order. For example: Example 1: Given: nums1 = [1, 2, 2, 1], nums2 = [2, 2] Expected Output: [2] Example 2: Given: nums1 = [4, 9, 5], nums2 = [9, 4, 9, 8, 4] Expected Output: [9, 4] (or [4, 9]) Note the following conditions: - The length of each array is no greater than 1000. - Each element is an integer between 0 and 1000.","solution":"def intersection(nums1, nums2): Returns the intersection of two arrays where each element in the result is unique. set1 = set(nums1) set2 = set(nums2) return list(set1 & set2)"},{"question":"Write a function that takes a string as input and returns the number of unique substrings that can be formed from it. A substring is defined as any contiguous sequence of characters within the string. Example: Input: \\"ababc\\" Output: 12 Explanation: The unique substrings are \\"a\\", \\"ab\\", \\"aba\\", \\"abab\\", \\"ababc\\", \\"b\\", \\"ba\\", \\"bab\\", \\"babc\\", \\"bc\\", \\"c\\", and \\"abc\\".","solution":"def count_unique_substrings(s): Returns the number of unique substrings that can be formed from the input string s. unique_substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"Write a function that accepts a list of strings where each string represents a mathematical expression containing integers and the basic arithmetic operators (+, -, *, /). Your function should evaluate these expressions and return a list of results. Ensure that division by zero and invalid expressions are handled gracefully by returning \'Error\' for such cases. The function must handle expressions with mixed operators and respect the operator precedence. expressions = [\\"3 + 5\\", \\"10 - 3 * 2\\", \\"6 / 0\\", \\"2 + 3 * x\\"]","solution":"def evaluate_expressions(expressions): Evaluates a list of mathematical expressions. Returns a list of results or \'Error\' for invalid expressions and division by zero. results = [] for expr in expressions: try: result = eval(expr) results.append(result) except ZeroDivisionError: results.append(\'Error\') except (SyntaxError, NameError): results.append(\'Error\') return results"},{"question":"Given a list of integers, write a Python function to return the first unique (non-repeating) integer. If there is no unique integer, return `None`. Ensure your solution handles edge cases, such as an empty list or a list where all elements are repeated. ```python def first_unique(lst): count = {} for num in lst: if num in count: count[num] += 1 else: count[num] = 1 for num in lst: if count[num] == 1: return num return None # Test cases print(first_unique([1, 2, 2, 1, 3])) # Output: 3 print(first_unique([4, 5, 4, 5, 6])) # Output: 6 print(first_unique([7, 7, 7, 7])) # Output: None print(first_unique([])) # Output: None ```","solution":"def first_unique(lst): Returns the first unique (non-repeating) integer from a list. If no unique integer is found, returns None. count = {} # Counting the occurrences of each number in the list for num in lst: if num in count: count[num] += 1 else: count[num] = 1 # Finding the first unique number for num in lst: if count[num] == 1: return num return None"},{"question":"Write a function `decrypt_message` that takes in a string containing an encrypted message and returns the decrypted message. The encryption algorithm replaces each letter with the 2nd next letter in the alphabet. For example, \'a\' becomes \'c\', \'b\' becomes \'d\', \'y\' becomes \'a\', and \'z\' becomes \'b\'. Non-letter characters remain the same. **Function Signature:** ```python def decrypt_message(encrypted_message: str) -> str ``` **Input:** - `encrypted_message` (string): The encrypted message containing alphabetical letters and potentially other characters. **Output:** - A string representing the decrypted message. **Examples:** ```python assert decrypt_message(\\"cde\\") == \\"abc\\" assert decrypt_message(\\"e f g!\\") == \\"c d e!\\" assert decrypt_message(\\"shift y z a!\\") == \\"qfgdr w x y!\\" ```","solution":"def decrypt_message(encrypted_message: str) -> str: Decrypts the given message by shifting each letter 2 positions back in the alphabet. Non-alphabetical characters remain unchanged. decrypted_message = [] for char in encrypted_message: if \'a\' <= char <= \'z\': decrypted_char = chr((ord(char) - ord(\'a\') - 2) % 26 + ord(\'a\')) decrypted_message.append(decrypted_char) elif \'A\' <= char <= \'Z\': decrypted_char = chr((ord(char) - ord(\'A\') - 2) % 26 + ord(\'A\')) decrypted_message.append(decrypted_char) else: decrypted_message.append(char) return \'\'.join(decrypted_message)"},{"question":"Create a function that takes an array of integers and a target integer. The function should return `true` if there are three distinct integers in the array whose sum is equal to the target integer, and `false` otherwise. You are not allowed to use the same element more than once. Your function should have a time complexity better than O(n^3). **Function Signature**: ```python def three_sum(nums: List[int], target: int) -> bool: pass ``` **Input**: - An array `nums` of integers (1 ≤ len(nums) ≤ 3000) - An integer `target` (-10^9 ≤ target ≤ 10^9) **Output**: - A boolean value `true` or `false` **Example**: ```python print(three_sum([1, 4, 45, 6, 10, 8], 22)) # Output: True print(three_sum([1, 2, 4, 3, 6], 10)) # Output: True print(three_sum([-1, 0, 1, 2, -1, -4], 0)) # Output: True print(three_sum([1, 2, 3, 4, 5], 50)) # Output: False ```","solution":"from typing import List def three_sum(nums: List[int], target: int) -> bool: Returns True if there are three distinct integers in nums whose sum is equal to target, otherwise returns False. nums.sort() # Sort the array to use two-pointer technique n = len(nums) for i in range(n - 2): # To avoid duplicates, skip elements that are the same as the previous one. if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 # Move the left pointer to the right else: right -= 1 # Move the right pointer to the left return False"},{"question":"Create a program that reads a list of integers, and separates them into two lists: one containing odd numbers and the other containing even numbers. The program should then return the two lists in sorted order. Additionally, the program should handle the situation where non-integer elements are included in the input list and output an error message for these elements, while still processing the remaining valid integers. For example: ```python input_list = [12, 3, \\"hello\\", 5, 8, 9, \\"world\\", 7, 2] # Expected output # Error: Non-integer value found - hello # Error: Non-integer value found - world # Sorted even numbers: [2, 8, 12] # Sorted odd numbers: [3, 5, 7, 9] ``` Additionally, discuss the computational complexity of your solution.","solution":"def separate_and_sort_numbers(input_list): Separates the input list into odd and even numbers, and sorts each list individually. Returns a tuple containing the sorted even numbers list and the sorted odd numbers list. odd_numbers = [] even_numbers = [] for item in input_list: if isinstance(item, int): if item % 2 == 0: even_numbers.append(item) else: odd_numbers.append(item) else: print(f\\"Error: Non-integer value found - {item}\\") return sorted(even_numbers), sorted(odd_numbers)"},{"question":"How would you implement a function in Python that takes a dictionary as input where keys are strings representing items and values are integers representing their respective quantities, and then returns a list of strings representing all items, each repeated according to its quantity? For example, given the dictionary `{\\"apple\\": 2, \\"banana\\": 3, \\"cherry\\": 1}`, the function should return `[\\"apple\\", \\"apple\\", \\"banana\\", \\"banana\\", \\"banana\\", \\"cherry\\"]`.","solution":"def repeat_items(item_dict): Takes a dictionary where keys are strings representing items and values are integers representing their quantities. Returns a list of strings with items repeated according to their quantities. result = [] for item, quantity in item_dict.items(): result.extend([item] * quantity) return result"},{"question":"Design and implement a cache system in Python for a web application that stores user session data. The cache should support basic operations like adding, retrieving, and deleting session information. Implement an eviction policy using LRU (Least Recently Used) when the cache reaches its maximum capacity. Ensure the cache is thread-safe to handle concurrent access. Additionally, integrate logging to monitor cache hits, misses, and evictions. The cache system should be secure and prevent race conditions and data inconsistencies.","solution":"import threading import logging from collections import OrderedDict class LRUCache: def __init__(self, capacity): Initialize a thread-safe LRU cache with a given capacity. self.capacity = capacity self.cache = OrderedDict() self.lock = threading.Lock() self._initialize_logging() def _initialize_logging(self): Initialize the logging configuration. logging.basicConfig(level=logging.DEBUG, format=\'%(asctime)s %(message)s\', handlers=[logging.FileHandler(\\"cache.log\\"), logging.StreamHandler()]) def get(self, key): Retrieve an item from the cache. with self.lock: if key not in self.cache: logging.info(f\\"Cache miss for key: {key}\\") return None value = self.cache.pop(key) self.cache[key] = value logging.info(f\\"Cache hit for key: {key}\\") return value def put(self, key, value): Add an item to the cache. with self.lock: if key in self.cache: self.cache.pop(key) elif len(self.cache) >= self.capacity: evicted_key, evicted_value = self.cache.popitem(last=False) logging.info(f\\"Cache eviction: key={evicted_key}, value={evicted_value}\\") self.cache[key] = value logging.info(f\\"Cache put: key={key}, value={value}\\") def delete(self, key): Delete an item from the cache. with self.lock: if key in self.cache: logging.info(f\\"Cache delete: key={key}\\") del self.cache[key] # Example usage # cache = LRUCache(2) # cache.put(\\"user1\\", \\"data1\\") # cache.put(\\"user2\\", \\"data2\\") # cache.get(\\"user1\\") # cache.put(\\"user3\\", \\"data3\\") # cache.get(\\"user2\\") # cache.delete(\\"user1\\")"},{"question":"Write a Python function that accepts two parameters: a list of integers and an integer n. The function should return a new list containing only the integers from the original list that are greater than n. The original order of the integers in the list should be preserved. For example, given the list `[1, 5, 8, 3, 12, 7]` and `n = 6`, the function should return `[8, 12, 7]`.","solution":"def filter_greater_than(numbers, n): Returns a new list containing only the integers from the original list that are greater than n. Args: numbers (list of int): The list of integers. n (int): The comparison integer. Returns: list of int: A list with integers greater than n. return [number for number in numbers if number > n]"},{"question":"Develop a function that takes an array of integers and an integer target as inputs and returns all unique quadruplets [a, b, c, d] such that a + b + c + d = target. The solution set must not contain duplicate quadruplets. Your function should take advantage of efficient algorithms for improved performance. Also, provide a brief explanation of your thought process and the algorithm\'s time complexity.","solution":"def four_sum(nums, target): Find all unique quadruplets in the array that sum up to the target. :param nums: List[int] - List of integers :param target: int - The target sum :return: List[List[int]] - List of unique quadruplets that sum up to the target nums.sort() res, n = [], len(nums) for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: s = nums[i] + nums[j] + nums[left] + nums[right] if s == target: res.append([nums[i], nums[j], nums[left], nums[right]]) left += 1 while left < right and nums[left] == nums[left - 1]: left += 1 elif s < target: left += 1 else: right -= 1 return res"},{"question":"Design a function named `evaluate_expression` that takes a string representing a mathematical expression as input. The expression will contain non-negative integers and the operators + and *. Implement the function to correctly compute and return the result of the expression, adhering to the standard mathematical order of operations (PEMDAS). # Example ```python print(evaluate_expression(\\"3+5*2\\")) # Output: 13 print(evaluate_expression(\\"10+2*6\\")) # Output: 22 print(evaluate_expression(\\"100*2+12\\")) # Output: 212 print(evaluate_expression(\\"1+2*5+3\\")) # Output: 14 print(evaluate_expression(\\"5*6+7*2\\")) # Output: 44 ``` # Constraints - The input string is non-empty and contains only digits and the operators + and *. - No parentheses are present in the expression. - The input does not necessarily have spaces separating numbers and operators. - The evaluation must respect the operator precedence (* before +). # Notes - You are not allowed to use the `eval()` function. - Handle errors and edge cases appropriately.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and the operators + and *, respecting the standard mathematical order of operations. # split expression by the \'+\' operator addition_parts = expression.split(\'+\') # initialize total to zero total = 0 # go through each part that was split by \'+\' for part in addition_parts: # if there are \'*\' operators in the current part, calculate the product if \'*\' in part: product = 1 multiply_parts = part.split(\'*\') for factor in multiply_parts: product *= int(factor) total += product else: total += int(part) return total"},{"question":"Given an array of integers, write a function `find_peak_elements` that identifies and returns all the \\"peak\\" elements in the array. A peak element is defined as an element which is greater than its neighbors. For elements at the boundaries of the array, they only need to be greater than their single neighbor. The function should return a list of tuples where each tuple contains the peak element and its index in the array. ```python def find_peak_elements(arr): Given a list of integers, return a list of tuples where each tuple contains a peak element and its index. Example: find_peak_elements([1, 3, 7, 1, 2, 6, 3, 2, 6]) == [(7, 2), (6, 5), (6, 8)] find_peak_elements([10, 20, 15, 2, 23, 90, 67]) == [(20, 1), (90, 5)] find_peak_elements([1, 2, 3, 4, 5]) == [(5, 4)] find_peak_elements([5, 4, 3, 2, 1]) == [(5, 0)] find_peak_elements([4, 1, 2, 1, 2, 1, 3, 1]) == [(4, 0), (2, 2), (2, 4), (3, 6)] find_peak_elements([]) == [] ```","solution":"def find_peak_elements(arr): Given a list of integers, return a list of tuples where each tuple contains a peak element and its index. Example: find_peak_elements([1, 3, 7, 1, 2, 6, 3, 2, 6]) == [(7, 2), (6, 5), (6, 8)] find_peak_elements([10, 20, 15, 2, 23, 90, 67]) == [(20, 1), (90, 5)] find_peak_elements([1, 2, 3, 4, 5]) == [(5, 4)] find_peak_elements([5, 4, 3, 2, 1]) == [(5, 0)] find_peak_elements([4, 1, 2, 1, 2, 1, 3, 1]) == [(4, 0), (2, 2), (2, 4), (3, 6)] find_peak_elements([]) == [] peaks = [] n = len(arr) if n == 0: return peaks for i in range(n): if (i == 0 and n == 1) or (i == 0 and arr[i] > arr[i + 1]) or (i == n - 1 and arr[i] > arr[i - 1]) or (i > 0 and i < n - 1 and arr[i] > arr[i - 1] and arr[i] > arr[i + 1]): peaks.append((arr[i], i)) return peaks"},{"question":"Write a function in Python that takes a list of integers and returns a list of integers that are both positive and even numbers. Example: input: [-10, -7, 0, 2, 3, 8, 11, 14] output: [2, 8, 14]","solution":"def positive_even_numbers(lst): Returns a list of integers that are both positive and even. return [num for num in lst if num > 0 and num % 2 == 0]"},{"question":"Given a string containing lowercase letters, return the length of the longest subsequence that is palindrome. Note: A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Example: Input: \\"abca\\" Output: 3 Explanation: The longest palindromic subsequence is \\"aba\\".","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the given string `s`. n = len(s) # Create a table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # All substrings of length 1 are palindromic for i in range(n): dp[i][i] = 1 # Build the table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"Write a Python program that takes a list of dictionaries where each dictionary contains information about a student (name, \'math\' score, \'english\' score, and \'science\' score). Your task is to calculate the average score of each student and return a dictionary with student names as keys and their average scores as values. Example input: students_scores = [ {\'name\': \'Alice\', \'math\': 85, \'english\': 78, \'science\': 92}, {\'name\': \'Bob\', \'math\': 79, \'english\': 85, \'science\': 88}, {\'name\': \'Charlie\', \'math\': 93, \'english\': 81, \'science\': 87} ] Expected output: {\'Alice\': 85.0, \'Bob\': 84.0, \'Charlie\': 87.0}","solution":"def calculate_average_scores(students_scores): Calculates the average score of each student and returns a dictionary with student names as keys and their average scores as values. :param students_scores: List[Dict[str, Union[str, int]]] :return: Dict[str, float] averages = {} for student in students_scores: name = student[\'name\'] scores = [student[\'math\'], student[\'english\'], student[\'science\']] average_score = sum(scores) / len(scores) averages[name] = round(average_score, 2) # rounding to 2 decimal places return averages"},{"question":"Write a Python function that takes a list of integers and returns a new list with the elements in reversed order, except for the first and last elements which should remain in their original positions. For example, given the list [10, 20, 30, 40, 50], the function should return [10, 40, 30, 20, 50].","solution":"def reverse_middle(lst): Returns a new list with the elements in reversed order except for the first and last elements. if len(lst) <= 2: return lst return [lst[0]] + lst[-2:0:-1] + [lst[-1]]"},{"question":"You are given a string containing a series of words separated by spaces. Your task is to write a function that takes this string and returns the number of unique words present in it. Words are considered the same regardless of their case, so \'word\' and \'Word\' should be counted as the same word. # Example: **Input:** \\"This is a test This test is\\" **Output:** 4 **Explanation:** The unique words in the input string are \\"this\\", \\"is\\", \\"a\\", and \\"test\\". # Constraints: - The input string will contain only alphabets and spaces. - The function should be case-insensitive, treating \'Word\' and \'word\' as the same. - The words are separated by one or more spaces.","solution":"def count_unique_words(s): Returns the number of unique words in the given string s. Words are considered case-insensitive. words = s.lower().split() unique_words = set(words) return len(unique_words)"},{"question":"Write a Python function that takes a list of strings and returns a dictionary where each key is a string from the list and the corresponding value is the length of that string. Example: ```python input_list = [\'apple\', \'banana\', \'cherry\'] output_dict = {\'apple\': 5, \'banana\': 6, \'cherry\': 6} ```","solution":"def strings_to_length_dict(input_list): Takes a list of strings and returns a dictionary where each key is a string from the list and the corresponding value is the length of that string. :param input_list: List of strings :return: Dictionary with string lengths return {string: len(string) for string in input_list}"},{"question":"Design a procedure, employing a programming language of your choice, to evaluate and display all palindromic substrings present within a specified string, such as \\"racecar\\".","solution":"def is_palindrome(s): Helper function to check if a given string is a palindrome. return s == s[::-1] def palindromic_substrings(string): Finds and returns all palindromic substrings in a given string. n = len(string) palindromes = [] for i in range(n): # Check all odd-length palindromes centered at i for j in range(n - i): if is_palindrome(string[j:j+i+1]): palindromes.append(string[j:j+i+1]) return palindromes"},{"question":"Develop a Python program to implement the k-means clustering algorithm from scratch. Utilize this implementation to categorize points in a provided dataset into a user-specified number of clusters. Ensure to include provisions for initialization, convergence criteria, and updating cluster centroids. Test your algorithm on a synthetic dataset with known clusters and evaluate the clustering performance using metrics such as the silhouette score and within-cluster sum of squares (WCSS).","solution":"import numpy as np from sklearn.metrics import silhouette_score class KMeans: def __init__(self, n_clusters, max_iter=300, tol=1e-4): self.n_clusters = n_clusters self.max_iter = max_iter self.tol = tol self.centroids = None def fit(self, X): # Randomly initialize centroids np.random.seed(42) initial_indices = np.random.permutation(np.arange(X.shape[0]))[:self.n_clusters] self.centroids = X[initial_indices] for iteration in range(self.max_iter): # Assign clusters based on closest centroid distances = np.linalg.norm(X[:, np.newaxis, :] - self.centroids, axis=2) closest_centroid_indices = np.argmin(distances, axis=1) # Update centroids new_centroids = np.array([X[closest_centroid_indices == i].mean(axis=0) for i in range(self.n_clusters)]) # Check for convergence based on centroid changes if np.max(np.linalg.norm(self.centroids - new_centroids, axis=1)) < self.tol: break self.centroids = new_centroids self.labels_ = closest_centroid_indices def predict(self, X): distances = np.linalg.norm(X[:, np.newaxis, :] - self.centroids, axis=2) return np.argmin(distances, axis=1) # Silhouette Score Calculation: def calculate_silhouette_score(X, labels): return silhouette_score(X, labels) # Within-Cluster Sum of Squares (WCSS) Calculation: def calculate_wcss(X, labels, centroids): wcss = 0 for i in range(len(centroids)): cluster_points = X[labels == i] wcss += np.sum((cluster_points - centroids[i]) ** 2) return wcss"},{"question":"Write a function that takes an array of integers and returns the length of the longest subsequence where the difference between consecutive elements is exactly 1. For example: - Given the array `[1, 2, 3, 4, 6, 5, 7]`, the function should return `7`, as the longest subsequence `[1, 2, 3, 4, 5, 6, 7]` has a length of `7`. - Given the array `[10, 9, 4, 3, 2]`, the function should return `3`, as the longest subsequence `[4, 3, 2]` has a length of `3`. Implement your solution in Python and provide the function signature `def longest_consecutive_subsequence(arr: List[int]) -> int`.","solution":"from typing import List def longest_consecutive_subsequence(arr: List[int]) -> int: if not arr: return 0 arr_set = set(arr) longest_streak = 0 for num in arr_set: if num - 1 not in arr_set: current_num = num current_streak = 1 while current_num + 1 in arr_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a Python function that takes a list of integers and returns a list of all duplicated integers. The order of elements in the output list should be according to their first occurrence in the input list, and each duplicated integer should appear only once in the output list. ```python def find_duplicates(nums): # Your code here # Example usage: nums = [4, 5, 6, 4, 7, 5, 8, 9, 7] print(find_duplicates(nums)) # Output should be [4, 5, 7] ```","solution":"def find_duplicates(nums): Returns a list of duplicated integers, ordered by their first occurrence. seen = set() duplicates = set() result = [] for num in nums: if num in seen: if num not in duplicates: duplicates.add(num) result.append(num) else: seen.add(num) return result"},{"question":"Devise a Python function `reverse_sentence` that takes a string as an input, where the string is a sentence consisting of words separated by spaces. The function should return a new string with the words in reverse order while maintaining the original spacing and punctuation. Example: Input: \\"This is a test.\\" Output: \\"test. a is This\\"","solution":"def reverse_sentence(sentence): Reverses the order of words in a given sentence. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Given a singly linked list, write a function to rearrange the nodes in such a way that all nodes at odd positions come before the nodes at even positions. Implement the `OddEvenLinkedList` class with the following methods: - `OddEvenLinkedList(ListNode* head)` Initializes the object with a singly linked list. - `ListNode* rearrange()` Rearranges the linked list such that all nodes at odd positions come before the nodes at even positions and returns the head of the rearranged linked list. # Example Input: ```python head = [1, 2, 3, 4, 5] oddEvenLinkedList = OddEvenLinkedList(head) newHead = oddEvenLinkedList.rearrange() # newHead is now [1, 3, 5, 2, 4] head = [2, 1, 3, 5, 6, 4, 7] oddEvenLinkedList = OddEvenLinkedList(head) newHead = oddEvenLinkedList.rearrange() # newHead is now [2, 3, 6, 7, 1, 5, 4] ``` # Constraints - The number of nodes in the input linked list is between `[0, 10^4]`. - `ListNode.val` is a unique integer within the range of `[1, 10^5]`. # Note - Use zero-based indexing for positions.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class OddEvenLinkedList: def __init__(self, head): self.head = head def rearrange(self): if not self.head or not self.head.next: return self.head odd = self.head even = self.head.next even_head = even while even and even.next: odd.next = even.next odd = odd.next even.next = odd.next even = even.next odd.next = even_head return self.head"},{"question":"Write a Python function that takes in a list of integers and returns a new list containing only the even integers from the original list, but squared. For example, given the input [1, 2, 3, 4, 5], the function should return [4, 16]. Do not use any built-in functions that directly perform this task. Ensure your solution has a time complexity of O(n).","solution":"def even_squares(nums): Returns a new list containing only the even integers from the original list, but squared. Args: nums (list): A list of integers. Returns: list: A list of squared even integers. result = [] for num in nums: if num % 2 == 0: result.append(num * num) return result"},{"question":"Write a function that takes in a list of integers representing the distances traveled by a vehicle in consecutive seconds. The function should return a string containing the starting and ending seconds of the longest continuous interval where the vehicle traveled the same distance every second. The interval should be inclusive. If there are multiple intervals with the same length, return the one that starts first. Example: ```python distances = [5, 5, 5, 7, 7, 7, 2, 2, 2, 2] ``` Expected Output: ``` \'6-9\' ```","solution":"def longest_constant_interval(distances): Returns the starting and ending seconds of the longest continuous interval where the vehicle traveled the same distance every second. n = len(distances) if n == 0: return \\"\\" max_start, max_end = 0, 0 current_start = 0 for i in range(1, n): if distances[i] != distances[current_start]: if (i - current_start) > (max_end - max_start + 1): max_start, max_end = current_start, i - 1 current_start = i if (n - current_start) > (max_end - max_start + 1): max_start, max_end = current_start, n - 1 return f\\"{max_start}-{max_end}\\""},{"question":"Write a function in Python that takes a list of integers and returns the length of the longest contiguous sublist that contains only even numbers. If there are no even numbers in the list, the function should return 0. lst = [5, 10, 20, 6, 3, 12, 14, 7]","solution":"def longest_even_sublist_length(lst): Returns the length of the longest contiguous sublist that contains only even numbers. If there are no even numbers in the list, the function returns 0. max_length = 0 current_length = 0 for num in lst: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length # Example usage: # lst = [5, 10, 20, 6, 3, 12, 14, 7] # print(longest_even_sublist_length(lst)) # Output should be 3"},{"question":"Implement a system to read a large text file and determine the frequency of each word in the file. You are to consider words in a case-insensitive manner and ignore all punctuation. The input text file could be several gigabytes in size, so your solution should be optimized for performance and memory usage. Your task includes: 1. Reading the text file in chunks to avoid memory overload. 2. Normalizing the text by converting it to lowercase and removing punctuation. 3. Counting the frequency of each word efficiently. 4. Reporting the top 10 most frequent words along with their counts. Additionally, generate a bar plot to visualize the frequency of the top 10 words. Summarize any considerations you made to handle large file sizes and any optimization techniques you implemented.","solution":"import os import string from collections import defaultdict, Counter import matplotlib.pyplot as plt def process_chunk(text): Normalizes the text by converting to lowercase and removing punctuation. Returns a list of words. translator = str.maketrans(\'\', \'\', string.punctuation) return text.translate(translator).lower().split() def count_word_frequencies(file_path, chunk_size=1024*1024): Reads the file in chunks, normalizes the text, and counts word frequencies. Returns a dictionary with word frequencies. word_counts = defaultdict(int) with open(file_path, \'r\', encoding=\'utf-8\') as file: while True: chunk = file.read(chunk_size) if not chunk: break words = process_chunk(chunk) for word in words: word_counts[word] += 1 return word_counts def get_top_n_words(word_counts, n=10): Returns the top n most frequent words from the word_counts dictionary. return Counter(word_counts).most_common(n) def plot_word_frequencies(word_counts): Plots a bar chart of the top 10 word frequencies. words, counts = zip(*word_counts) plt.figure(figsize=(10, 5)) plt.bar(words, counts) plt.xlabel(\'Words\') plt.ylabel(\'Frequency\') plt.title(\'Top 10 Most Frequent Words\') plt.xticks(rotation=45) plt.show() # Example usage: # file_path = \\"path/to/your/large/text/file.txt\\" # word_counts = count_word_frequencies(file_path) # top_words = get_top_n_words(word_counts) # plot_word_frequencies(top_words)"},{"question":"Create a Python function that takes a string as input and returns the first non-repeating character in it. If all characters are repeating or the input is empty, return None.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If all characters are repeating or the input is empty, returns None. char_frequency = {} # Count the frequency of each character in the string for char in s: if char in char_frequency: char_frequency[char] += 1 else: char_frequency[char] = 1 # Find the first non-repeating character for char in s: if char_frequency[char] == 1: return char return None"},{"question":"A company\'s database contains a list of sales transactions represented by tuples in the form (transaction_id, customer_id, date, amount). Write a function that, given the list of transactions and a specific date, returns the average sales amount per transaction on that date. Implement the function in Python and ensure it considers edge cases such as no transactions on the given date. ```python def average_sales_on_date(transactions, target_date): :param transactions: List of tuples in the form (transaction_id, customer_id, date, amount) :param target_date: The specific date to calculate the average sales :return: The average sales amount for transactions on the target_date. If no transactions, return 0. pass # Your code here ```","solution":"def average_sales_on_date(transactions, target_date): Returns the average sales amount for transactions on the target_date. If no transactions on that date, return 0. :param transactions: List of tuples in the form (transaction_id, customer_id, date, amount) :param target_date: The specific date to calculate the average sales :return: The average sales amount for transactions on the target_date. If no transactions, return 0. total_sales = 0 count = 0 for transaction in transactions: transaction_id, customer_id, date, amount = transaction if date == target_date: total_sales += amount count += 1 if count == 0: return 0 return total_sales / count"},{"question":"Write a function `is_prime` in Python that takes an integer `n` and returns a boolean indicating whether the number is a prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Optimize the function for efficiency. Specifically, ensure it does not perform unnecessary checks. For instance, it is unnecessary to check divisibility by numbers greater than the square root of `n`. The function signature should look like this: ```python def is_prime(n: int) -> bool: # your code here ``` Provide a few examples to demonstrate the correctness of your implementation: ```python print(is_prime(2)) # True print(is_prime(4)) # False print(is_prime(17)) # True print(is_prime(18)) # False ```","solution":"def is_prime(n: int) -> bool: Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that takes a list of strings and returns the string with the highest number of unique characters. If there is a tie, return the string that appears first in the list. Additionally, if the list is empty, return an empty string.","solution":"def string_with_most_unique_chars(strings): Takes a list of strings and returns the string with the highest number of unique characters. If there is a tie, returns the string that appears first in the list. If the list is empty, returns an empty string. if not strings: return \\"\\" def unique_char_count(s): return len(set(s)) return max(strings, key=lambda s: (unique_char_count(s), -strings.index(s)))"},{"question":"Write a function to compute the nth Fibonacci number using dynamic programming. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 The function should take an integer n and return the nth Fibonacci number, leveraging a bottom-up dynamic programming approach to ensure efficiency.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n == 0: return 0 if n == 1: return 1 fib = [0] * (n + 1) fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Implement a function `find_missing_number` that takes a list of unique integers where each integer is between 1 and n (inclusive) and exactly one integer is missing from the list. Your function should efficiently find and return the missing integer. Assume the length of the list is `n-1`, where `n` is a positive integer provided as the second argument to the function. The solution should have a linear time complexity and constant space complexity. Provide a main block to test your function with different inputs.","solution":"def find_missing_number(arr, n): Finds the missing number in the list of integers from 1 to n. :param arr: List[int] - list of unique integers where each integer is between 1 and n (inclusive) :param n: int - the size of the list should be n-1 :return: int - the missing integer # Calculate expected sum of first n natural numbers expected_sum = n * (n + 1) // 2 # Calculate actual sum of the array actual_sum = sum(arr) # Missing number is the difference between expected sum and actual sum return expected_sum - actual_sum"},{"question":"In a remote village, there are different types of crops planted by the farmers. Each crop has a unique water requirement, represented in liters per hectare. You are required to help the villagers plan their irrigation schedule by analyzing the water requirements for each type of crop and providing a summary. You are given two dictionaries: 1. crop_areas where the keys are the names of the crops, and the values are the areas in hectares for each crop. Example: ```python crop_areas = { \\"wheat\\": 50, \\"rice\\": 20, \\"corn\\": 40 } ``` 2. water_requirements where the keys are the names of the crops, and the values are the water requirements in liters per hectare. Example: ```python water_requirements = { \\"wheat\\": 400, \\"rice\\": 1200, \\"corn\\": 700 } ``` Your task is to create a function that calculates the total water requirement for each crop and returns a new dictionary with the crop names as keys and the total water requirement in liters as values. Function Signature: ```python def calculate_total_water(crop_areas: dict, water_requirements: dict) -> dict: pass ``` Example Input: ```python crop_areas = { \\"wheat\\": 50, \\"rice\\": 20, \\"corn\\": 40 } water_requirements = { \\"wheat\\": 400, \\"rice\\": 1200, \\"corn\\": 700 } ``` Example Output: ```python { \\"wheat\\": 20000, \\"rice\\": 24000, \\"corn\\": 28000 } ``` Note: If a crop present in the crop_areas dictionary is not found in the water_requirements dictionary, or vice versa, your function should raise a KeyError with an appropriate message.","solution":"def calculate_total_water(crop_areas: dict, water_requirements: dict) -> dict: Calculate the total water requirement for each crop. Parameters: - crop_areas (dict): A dictionary where keys are the names of the crops and values are the areas in hectares for each crop. - water_requirements (dict): A dictionary where keys are the names of the crops and values are the water requirements in liters per hectare. Returns: - dict: A dictionary with the crop names as keys and the total water requirement in liters as values. total_water_requirements = {} for crop, area in crop_areas.items(): if crop not in water_requirements: raise KeyError(f\\"Water requirement for crop \'{crop}\' is not found in water_requirements dictionary.\\") total_water_requirements[crop] = area * water_requirements[crop] return total_water_requirements"},{"question":"Determine the most frequent substring of length 3 in the given string. If there are multiple substrings with the same highest frequency, return them in alphabetical order as a list. example_string = \\"ababcabc\\"","solution":"def most_frequent_substrings_of_length_3(s): Returns the most frequent substrings of length 3 in alphabetical order. :param s: Input string :type s: str :return: List of most frequent substrings of length 3 :rtype: list from collections import defaultdict if len(s) < 3: return [] count = defaultdict(int) for i in range(len(s) - 2): substring = s[i:i + 3] count[substring] += 1 max_freq = max(count.values()) most_frequent_substrings = [k for k, v in count.items() if v == max_freq] return sorted(most_frequent_substrings)"},{"question":"Design a function `findDuplicates` that, given a list of integers, returns a list of integers that appear more than once in the input list. The output list should be sorted in ascending order and must contain each duplicated integer only once. If there are no duplicates, return an empty list. Example: - Input: [4, 3, 2, 7, 8, 2, 3, 1] - Output: [2, 3] - Input: [10, 5, 3, 8, 6] - Output: [] - Input: [1, 1, 2, 2, 2, 3, 3] - Output: [1, 2, 3]","solution":"def findDuplicates(nums): Returns a sorted list of integers that appear more than once in the input list. Each duplicated integer appears only once in the output list. from collections import Counter # Count the occurrences of each integer in the list count = Counter(nums) # Extract the integers that appear more than once duplicates = [num for num, freq in count.items() if freq > 1] # Return the sorted list of duplicates return sorted(duplicates)"},{"question":"Implement a function in Python called `find_paths` that finds all unique paths from the top-left corner to the bottom-right corner of an `m x n` grid. You can only move either down or right at any point in time. Your function should take two integers, `m` and `n`, as parameters and return a list of paths, where each path is represented as a string. Each character in the string should be either \'R\' for right or \'D\' for down to indicate the movement direction. ```python def find_paths(m, n): # Your code here # Example usage: print(find_paths(2, 2)) # Output: [\'RRDD\', \'RDDR\', \'RDRD\', \'DRRD\', \'DRDR\', \'DDRR\'] ```","solution":"def find_paths(m, n): def backtrack(i, j, path): if i == m - 1 and j == n - 1: paths.append(path) return if i < m - 1: backtrack(i + 1, j, path + \'D\') if j < n - 1: backtrack(i, j + 1, path + \'R\') paths = [] backtrack(0, 0, \'\') return paths"},{"question":"Write a function to determine if a given string is a palindrome (i.e., it reads the same forward and backward). Ignore case and any non-alphanumeric characters. example_string = \\"A man, a plan, a canal, Panama\\"","solution":"import re def is_palindrome(s): Determines if the given string s is a palindrome, ignoring case and non-alphanumeric characters. # Convert to lower case and remove non-alphanumeric characters cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if cleaned string is same forwards and backwards return cleaned == cleaned[::-1] # Example usage example_string = \\"A man, a plan, a canal, Panama\\" print(is_palindrome(example_string)) # Output: True"},{"question":"Develop a Python script that identifies and extracts the most frequently occurring word(s) from a given text document. Exclude any common stop words (such as \\"the\\", \\"is\\", \\"in\\", etc.) and ensure the analysis is case-insensitive. The script should return a list of the most frequent word(s) and their corresponding counts.","solution":"from collections import Counter import re def most_frequent_words(text): Identifies and extracts the most frequently occurring word(s) from a given text document. Excludes common stop words and is case-insensitive. stop_words = {\'the\', \'is\', \'in\', \'and\', \'to\', \'a\', \'with\', \'of\', \'on\', \'for\', \'as\', \'by\', \'at\', \'an\', \'be\', \'this\', \'that\', \'which\'} # Convert text to lowercase and split into words words = re.findall(r\'bw+b\', text.lower()) # Filter out stop words filtered_words = [word for word in words if word not in stop_words] # Count the occurrences of each word word_counts = Counter(filtered_words) if not word_counts: return [] # Find the maximum frequency max_count = max(word_counts.values()) # Extract the most frequent words most_frequent = [(word, count) for word, count in word_counts.items() if count == max_count] return most_frequent"},{"question":"Write a Python function to find the sum of all prime numbers less than a given number n. Implement the function using the Sieve of Eratosthenes algorithm to ensure efficiency. The function should have the following signature: ```python def sum_of_primes(n: int) -> int: # implementation here ``` Example: ``` Input: n = 10 Output: 17 Input: n = 20 Output: 77 ``` Note: 1. If n is less than or equal to 2, the function should return 0. 2. Optimize the function to handle large values of n efficiently.","solution":"def sum_of_primes(n: int) -> int: Returns the sum of all prime numbers less than a given number n using the Sieve of Eratosthenes algorithm. if n <= 2: return 0 # Initialize a boolean array \\"prime[0..n-1]\\" and set all entries it as true # A value in prime[i] will finally be false if i is Not a prime, else true prime = [True] * n p = 2 while (p * p <= n): # If prime[p] is not changed, then it is a prime if prime[p]: # Updating all multiples of p to not be prime for i in range(p * p, n, p): prime[i] = False p += 1 # Sum all prime numbers return sum(p for p in range(2, n) if prime[p])"},{"question":"Given a string containing both letters and digits, write a function to separate the letters and digits into two different strings. Ensure that the order of the characters in each respective string matches the order found in the original string. Additionally, implement the function to check if the input string contains any special characters (i.e., non-alphanumeric characters), and if any are found, the function should return a message: \\"Invalid input: string contains special characters.\\" Provide a solution with clear and efficient code.","solution":"def separate_letters_and_digits(s): Separates letters and digits from the input string into two different strings and checks for any special characters. :param s: Input string containing letters and digits :return: A tuple (letters, digits) if input is valid, otherwise an error message letters = [] digits = [] for char in s: if char.isalpha(): letters.append(char) elif char.isdigit(): digits.append(char) else: return \\"Invalid input: string contains special characters.\\" return \'\'.join(letters), \'\'.join(digits)"},{"question":"Write a function that takes an integer `n` and returns a list of all prime numbers up to and including `n`. Do not use any built-in libraries for checking prime numbers, and implement the function from scratch.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_numbers_up_to_n(n): Returns a list of all prime numbers up to and including n. primes = [] for number in range(2, n + 1): if is_prime(number): primes.append(number) return primes"},{"question":"Develop a function in Python that simulates the basic operations of a stack data structure (push, pop, and peek). Your task is to create a `Stack` class with the following methods: - `push(item)`: Adds an item to the top of the stack. - `pop()`: Removes and returns the item from the top of the stack. If the stack is empty, return `None`. - `peek()`: Returns the item at the top of the stack without removing it. If the stack is empty, return `None`. Additionally, implement a method `is_empty()` that checks if the stack is empty and a method `size()` to return the number of items in the stack. Ensure that your solution maintains the correct LIFO (Last In, First Out) behavior of the stack.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): Adds an item to the top of the stack. self.items.append(item) def pop(self): Removes and returns the item from the top of the stack. If the stack is empty, returns None. if self.is_empty(): return None return self.items.pop() def peek(self): Returns the item at the top of the stack without removing it. If the stack is empty, returns None. if self.is_empty(): return None return self.items[-1] def is_empty(self): Checks if the stack is empty. return len(self.items) == 0 def size(self): Returns the number of items in the stack. return len(self.items)"},{"question":"Write a Python function that takes a string containing a mathematical expression (consisting of non-negative numbers, +, -, *, and / operators, and spaces) and returns the evaluated result. Ensure that the function handles operator precedence correctly and raise an appropriate exception for any invalid inputs. The function should also support parentheses for grouping operations.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string and returns the result. Parameters: expression (str): The mathematical expression string to evaluate. Returns: float: The result of the evaluated expression. Raises: ValueError: If the provided expression is invalid. try: # Use eval to evaluate the expression while ensuring security result = eval(expression, {\\"__builtins__\\": None}, {}) # Return the result as a float for consistency return float(result) except Exception as e: raise ValueError(\\"Invalid expression\\") from e"},{"question":"Write a function that receives a string representing a mathematical expression and evaluates it. The mathematical expression can contain integers, the operators +, -, *, / and parentheses for indicating the order of operations. Your function should follow the proper order of operations (parentheses, exponents, multiplication and division from left to right, and addition and subtraction from left to right). Additionally, the function should handle invalid input gracefully by raising an appropriate exception. For instance, if the expression contains invalid characters or if parentheses are unbalanced, the function should raise a `ValueError` with a descriptive error message. Here\'s an example of the expected behavior: ```python evaluate_expression(\\"2 + 3 * (5 - 2)\\") # Output: 11 evaluate_expression(\\"10 / (5 - 5)\\") # Raises ValueError: Division by zero evaluate_expression(\\"5 * ^ 3\\") # Raises ValueError: Invalid character found evaluate_expression(\\"2 + (3 * 5\\") # Raises ValueError: Unbalanced parentheses ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression. The expression can contain integers, the operators +, -, *, / and parentheses. The function follows the proper order of operations and handles invalid input gracefully by raising appropriate exceptions. def check_invalid_characters(expression): allowed_chars = set(\\"0123456789+-*/() \\") for char in expression: if char not in allowed_chars: raise ValueError(f\\"Invalid character found: {char}\\") def check_balance_parentheses(expression): balance = 0 for char in expression: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: raise ValueError(\\"Unbalanced parentheses\\") if balance != 0: raise ValueError(\\"Unbalanced parentheses\\") def eval_expression(exp): try: return eval(exp) except ZeroDivisionError: raise ValueError(\\"Division by zero\\") except Exception as e: raise ValueError(str(e)) # Check for invalid characters check_invalid_characters(expression) # Check for balanced parentheses check_balance_parentheses(expression) # Evaluate the expression return eval_expression(expression)"},{"question":"Can you develop a function that determines if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases? Explain the approach and provide the implementation in your preferred programming language.","solution":"def is_palindrome(s): Determines if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. :param s: The input string to check :return: True if the string is a palindrome, False otherwise # Filter alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list is a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Create a sophisticated function that simulates a sequence of Fibonacci numbers, but with a twist: instead of the usual addition operation to generate the next number in the sequence, your algorithm must alternately add and multiply the previous two numbers. The sequence should start with the first two numbers taken as input from the user. Additionally, incorporate a validation check to ensure that the user inputs are positive integers. If invalid inputs are provided, the function must return a clear, meaningful error message. The function should be optimized to handle large sequences efficiently and include well-documented explanations of its operation, edge case handling, and computational complexity. Example: - For input values 2 and 3, the sequence should be: 2, 3, 5 (2+3), 15 (3*5), 20 (5+15), 300 (15*20), and so on. - For input values 0 or negative numbers, it should return an error message indicating invalid input.","solution":"def fibonacci_with_twist(a, b, n): Generates a sequence of \'n\' Fibonacci numbers with a twist: instead of the usual addition operation, the algorithm alternately adds and multiplies the previous two numbers. Parameters: a (int): The first number in the sequence. b (int): The second number in the sequence. n (int): The total length of the sequence to generate. Returns: list: The generated sequence. # Validation if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)): return \\"Invalid input: All input values must be integers\\" if a <= 0 or b <= 0 or n <= 0: return \\"Invalid input: All input values must be positive integers\\" sequence = [a, b] for i in range(2, n): if i % 2 == 0: next_value = sequence[-1] + sequence[-2] else: next_value = sequence[-1] * sequence[-2] sequence.append(next_value) return sequence"},{"question":"Write a function to merge two sorted linked lists into a single sorted linked list. Ensure your implementation efficiently handles edge cases such as one list being significantly longer than the other, or both lists being empty.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merge two sorted linked lists and return it as a new sorted list. dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next"},{"question":"Convert the following student grades from numerical form to letter grade form according to this scale: - A: 90-100 - B: 80-89 - C: 70-79 - D: 60-69 - F: 0-59 Example input: [85, 92, 78, 60, 45] Example output: [\'B\', \'A\', \'C\', \'D\', \'F\']","solution":"def convert_grades_to_letters(grades): Converts numerical grades to letter grades based on the following scale: - A: 90-100 - B: 80-89 - C: 70-79 - D: 60-69 - F: 0-59 Args: grades (list of int): List of numerical grades. Returns: list of str: List of letter grades corresponding to the input numerical grades. letter_grades = [] for grade in grades: if 90 <= grade <= 100: letter_grades.append(\'A\') elif 80 <= grade <= 89: letter_grades.append(\'B\') elif 70 <= grade <= 79: letter_grades.append(\'C\') elif 60 <= grade <= 69: letter_grades.append(\'D\') elif 0 <= grade <= 59: letter_grades.append(\'F\') else: raise ValueError(\\"Grade out of valid range: 0-100\\") return letter_grades"},{"question":"Identify and correct the errors in the given Python code. The goal is to calculate the total cost of items purchased, including a 15% sales tax. Ensure that the code follows proper Python conventions and syntax. ```python def calculate_total_cost(item_costs): sales_tax_rate = 0.15 total_cost = sum(item_costs) * (1 + sales_tax_rate) return total_cost items = [12.99, 23.45, 9.99, 5.49, 3.00] total = calculate_total_cost(items) print(\\"The total cost of the items is: \\", total) ``` Your tasks: 1. Identify and correct any syntax or logical errors in the code. 2. Ensure variable names and function names are clear and follow Python naming conventions. 3. Add any missing parts of the code if necessary to make it functional.","solution":"def calculate_total_cost(item_costs): Calculate the total cost including a 15% sales tax for a list of items. Parameters: item_costs (list of float): List containing the cost of each item. Returns: float: The total cost including sales tax. sales_tax_rate = 0.15 total_cost = sum(item_costs) * (1 + sales_tax_rate) return round(total_cost, 2) # Example usage: items = [12.99, 23.45, 9.99, 5.49, 3.00] total = calculate_total_cost(items) print(\\"The total cost of the items is:\\", total)"},{"question":"Design a program that decodes an encoded message from Morse code. Each message consists of multiple letters and words, with letters separated by a single space and words separated by three spaces. Use the provided dictionary for Morse code translation (with keys representing Morse code strings and values representing respective alphabetic characters). The Morse code mapping is as follows: morse_code_dict = { \'.-\': \'A\', \'-...\': \'B\', \'-.-.\': \'C\', \'-..\': \'D\', \'.\': \'E\', \'..-.\': \'F\', \'--.\': \'G\', \'....\': \'H\', \'..\': \'I\', \'.---\': \'J\', \'-.-\': \'K\', \'.-..\': \'L\', \'--\': \'M\', \'-.\': \'N\', \'---\': \'O\', \'.--.\': \'P\', \'--.-\': \'Q\', \'.-.\': \'R\', \'...\': \'S\', \'-\': \'T\', \'..-\': \'U\', \'...-\': \'V\', \'.--\': \'W\', \'-..-\': \'X\', \'-.--\': \'Y\', \'--..\': \'Z\' } For example, given an input string \\"... --- ... .... . .-.. .--.\\" representing \\"SOS HELP\\", the expected output would be \\"SOS HELP\\". Write a function `decodeMorse` that accepts a Morse code string and returns the decoded message.","solution":"morse_code_dict = { \'.-\': \'A\', \'-...\': \'B\', \'-.-.\': \'C\', \'-..\': \'D\', \'.\': \'E\', \'..-.\': \'F\', \'--.\': \'G\', \'....\': \'H\', \'..\': \'I\', \'.---\': \'J\', \'-.-\': \'K\', \'.-..\': \'L\', \'--\': \'M\', \'-.\': \'N\', \'---\': \'O\', \'.--.\': \'P\', \'--.-\': \'Q\', \'.-.\': \'R\', \'...\': \'S\', \'-\': \'T\', \'..-\': \'U\', \'...-\': \'V\', \'.--\': \'W\', \'-..-\': \'X\', \'-.--\': \'Y\', \'--..\': \'Z\' } def decodeMorse(morse_code): Decodes a Morse code string into an alphanumeric string. Parameters: morse_code (str): A string representing the Morse code. Returns: str: Decoded alphanumeric string. words = morse_code.split(\' \') decoded_message = [] for word in words: decoded_word = \'\'.join(morse_code_dict[letter] for letter in word.split()) decoded_message.append(decoded_word) return \' \'.join(decoded_message)"},{"question":"You are working on a text classification problem where you need to classify text messages into categories such as \\"spam\\" or \\"ham\\". You have preprocessed your text data and now you are ready to build a machine learning model. However, when you try to predict the categories of the text messages using a Logistic Regression model, you encounter a ValueError. Here is your code: ```python import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Load dataset data = pd.read_csv(r\\"path_to_filetext_messages.csv\\") # Feature extraction vectorizer = TfidfVectorizer() X = vectorizer.fit_transform(data[\'message\']) y = data[\'label\'] # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model = LogisticRegression() model.fit(X_train, y_train) # Predict on test data predictions = model.predict(X_test) # Calculate accuracy accuracy = accuracy_score(y_test, predictions) print(f\\"Accuracy: {accuracy}\\") ``` When you run this code, you get the following error: ``` ValueError: Unknown label type: \'continuous\' ``` # Task Review the provided code and pinpoint the source of the error. Suggest a solution to resolve this issue so that the model can be trained and used to make predictions without encountering a ValueError.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score def classify_text_messages(file_path): # Load dataset data = pd.read_csv(file_path) # Ensure labels are of categorical type data[\'label\'] = data[\'label\'].astype(str) # Feature extraction vectorizer = TfidfVectorizer() X = vectorizer.fit_transform(data[\'message\']) y = data[\'label\'] # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model = LogisticRegression() model.fit(X_train, y_train) # Predict on test data predictions = model.predict(X_test) # Calculate accuracy accuracy = accuracy_score(y_test, predictions) return accuracy # Usage # file_path = \\"path_to_file/text_messages.csv\\" # print(classify_text_messages(file_path))"},{"question":"Write a Python program that implements a class to manage a collection of books using object-oriented programming principles. The class should support the following functionality: 1. Adding a new book to the collection. 2. Removing a book by its title. 3. Searching for a book by the title to check if it exists in the collection. 4. Listing all the books sorted by their titles. Each book should be represented as an instance of a separate class `Book` with the following attributes: - `title` (string): The title of the book. - `author` (string): The author of the book. - `year` (integer): The year the book was published. Implement the following classes and methods: # Class `Book`: - **Constructor:** ```python def __init__(self, title: str, author: str, year: int) ``` Initializes a new Book instance with the provided title, author, and year. # Class `BookCollection`: - **Constructor:** ```python def __init__(self) ``` Initializes an empty book collection. - **Method to add a book:** ```python def add_book(self, book: Book) -> None ``` Adds a new book to the collection. If a book with the same title already exists, it should not be added again. - **Method to remove a book by title:** ```python def remove_book(self, title: str) -> bool ``` Removes the book with the given title from the collection. Returns `True` if the book was removed, and `False` if no book with the given title was found. - **Method to search for a book by title:** ```python def search_book(self, title: str) -> Optional[Book] ``` Searches for a book with the given title. Returns the `Book` instance if found, otherwise returns `None`. - **Method to list all books sorted by title:** ```python def list_books(self) -> List[Book] ``` Returns a list of all books in the collection, sorted by their titles. # Example Usage: ```python book1 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960) book2 = Book(\\"1984\\", \\"George Orwell\\", 1949) book3 = Book(\\"Pride and Prejudice\\", \\"Jane Austen\\", 1813) collection = BookCollection() collection.add_book(book1) collection.add_book(book2) collection.add_book(book3) print(collection.list_books()) # Should print a sorted list of books by title print(collection.search_book(\\"1984\\")) # Should return the Book instance for \\"1984\\" collection.remove_book(\\"Pride and Prejudice\\") # Should remove the book with the title \\"Pride and Prejudice\\" ```","solution":"from typing import List, Optional class Book: def __init__(self, title: str, author: str, year: int): self.title = title self.author = author self.year = year class BookCollection: def __init__(self): self.books = [] def add_book(self, book: Book) -> None: if not any(b.title == book.title for b in self.books): self.books.append(book) def remove_book(self, title: str) -> bool: for book in self.books: if book.title == title: self.books.remove(book) return True return False def search_book(self, title: str) -> Optional[Book]: for book in self.books: if book.title == title: return book return None def list_books(self) -> List[Book]: return sorted(self.books, key=lambda book: book.title)"},{"question":"Create a function \'sorted_words_length\' that accepts a string representing a sentence and returns a list of tuples. Each tuple contains a word from the sentence and its length, sorted by the length of the words in ascending order. If two words have the same length, they should be sorted lexicographically. Ignore punctuation, consider case insensitivity, and handle possible exceptions such as empty input or non-string input. Example: ```python >>> sorted_words_length(\\"An apple a day keeps the Doctor away!\\") [(\'a\', 1), (\'An\', 2), (\'day\', 3), (\'the\', 3), (\'away\', 4), (\'apple\', 5), (\'keeps\', 5), (\'Doctor\', 6)] ``` Implement the function as described: ```python import string def sorted_words_length(s): Construct a sorted_words_length function that accepts a string representing a sentence and returns a list of tuples with words and their lengths sorted by length and lexicographically for words of equal length. Ignore punctuation, consider case insensitivity, and handle exceptions. Example: >>> sorted_words_length(\\"An apple a day keeps the Doctor away!\\") [(\'a\', 1), (\'An\', 2), (\'day\', 3), (\'the\', 3), (\'away\', 4), (\'apple\', 5), (\'keeps\', 5), (\'Doctor\', 6)] if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") s = s.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() words = s.split() word_length_pairs = [(word, len(word)) for word in words] return sorted(word_length_pairs, key=lambda x: (x[1], x[0])) ```","solution":"import string def sorted_words_length(s): Construct a sorted_words_length function that accepts a string representing a sentence and returns a list of tuples with words and their lengths sorted by length and lexicographically for words of equal length. Ignore punctuation, consider case insensitivity, and handle exceptions. Example: >>> sorted_words_length(\\"An apple a day keeps the Doctor away!\\") [(\'a\', 1), (\'an\', 2), (\'day\', 3), (\'the\', 3), (\'away\', 4), (\'apple\', 5), (\'keeps\', 5), (\'doctor\', 6)] if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") # Remove punctuation and convert to lower case s = s.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() words = s.split() word_length_pairs = [(word, len(word)) for word in words] # Sort first by length, then lexicographically return sorted(word_length_pairs, key=lambda x: (x[1], x[0]))"},{"question":"Create a coding exercise where the task is to design and implement a function that takes a list of integers and returns a list of the same integers sorted such that all even numbers appear before all the odd numbers, while maintaining the relative order of the even and odd numbers from the original list. Complete the code below: from typing import List def sort_even_then_odd(numbers: List[int]) -> List[int]: Sort a list of integers such that all even numbers appear before all odd numbers, maintaining the relative order of even and odd numbers. >>> sort_even_then_odd([]) [] >>> sort_even_then_odd([1]) [1] >>> sort_even_then_odd([1, 2, 3, 4]) [2, 4, 1, 3] >>> sort_even_then_odd([4, 2, 1, 3]) [4, 2, 1, 3]","solution":"from typing import List def sort_even_then_odd(numbers: List[int]) -> List[int]: Sort a list of integers such that all even numbers appear before all odd numbers, maintaining the relative order of even and odd numbers. evens = [x for x in numbers if x % 2 == 0] odds = [x for x in numbers if x % 2 != 0] return evens + odds"},{"question":"Create a data structure in Python that represents a simplified banking system capable of handling multiple customer accounts. Each customer account should have features like deposit, withdrawal, and checking the current balance. Implement methods for creating new accounts, performing transactions, and displaying account details. Ensure that appropriate exceptions are raised for invalid operations, such as withdrawing more than the current balance or depositing a negative amount. Additionally, include functionality to list all accounts and their respective balances.","solution":"class InsufficientFunds(Exception): pass class InvalidAmount(Exception): pass class Account: _next_account_number = 1 def __init__(self, name): self.name = name self.account_number = Account._next_account_number Account._next_account_number += 1 self.balance = 0.0 def deposit(self, amount): if amount <= 0: raise InvalidAmount(\\"Deposit amount must be positive.\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise InvalidAmount(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise InsufficientFunds(\\"Insufficient funds for withdrawal.\\") self.balance -= amount def get_balance(self): return self.balance def display_details(self): return f\\"Account Number: {self.account_number}, Name: {self.name}, Balance: {self.balance}\\" class BankingSystem: def __init__(self): self.accounts = [] def create_account(self, name): account = Account(name) self.accounts.append(account) return account def list_accounts(self): return [account.display_details() for account in self.accounts]"},{"question":"Write a function to calculate the factorial of a given non-negative integer n. The factorial of a number n is defined as the product of all positive integers less than or equal to n (i.e., n! = n * (n-1) * ... * 1). Implement the function such that it returns the factorial of the input integer. ```python def factorial(n): # your code goes here # Example usage: # print(factorial(5)) should output 120 # print(factorial(0)) should output 1 ```","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n == 0: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Develop and implement an efficient algorithm for solving the problem of finding the shortest path in a grid with obstacles. Your solution should take a 2D array representing the grid, where `0` indicates an empty space and `1` indicates an obstacle. The goal is to find the shortest path from the top-left corner to the bottom-right corner, moving only up, down, left, or right. If no path exists, return -1. Additionally, optimize your algorithm to handle large grids efficiently. Describe the time and space complexity of your approach, and discuss any trade-offs you made to achieve the desired performance.","solution":"from collections import deque def shortest_path(grid): Finds the shortest path in a grid with obstacles from the top-left corner to the bottom-right corner using BFS. Returns the length of shortest path or -1 if no path exists. :param grid: List[List[int]], 2D array where 0 is an empty space and 1 is an obstacle. :return: int, length of the shortest path or -1 if no path exists. if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == rows - 1 and c == cols - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1 # Time complexity: O(rows * cols) as each cell is processed at most once # Space complexity: O(rows * cols) for the queue and the visited set"},{"question":"Given a list of integers, implement both the quicksort algorithm and the merge sort algorithm. Compare their efficiencies by analyzing the time complexities and suggesting which algorithm will perform better on average for large datasets. Correct any errors you might find in the following code snippets for both sorting techniques. Quicksort code snippet: ```python def partition(arr, low, high): i = (low-1) pivot = arr[high] for j in range(low, high): if arr[j] < pivot: i = i+1 arr[i], arr[j] = arr[j], arr[i] arr[i+1], arr[high] = arr[high], arr[i+1] return (i+1) def quickSort(arr, low, high): if low < high: pi = partition(arr, low, high) quickSort(arr, low, pi-1) quickSort(arr, pi+1, high) arr = [3, 7, 8, 5, 2, 1, 9, 5, 4] quickSort(arr, 0, len(arr)-1) ``` Merge Sort code snippet: ```python def merge(arr, l, m, r): n1 = m - l + 1 n2 = r - m L = [0] * (n1) R = [0] * (n2) for i in range(0, n1): L[i] = arr[l + i] for j in range(0, n2): R[j] = arr[m + 1 + j] i = 0 j = 0 k = l while i < n1 and j < n2: if L[i] <= R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < n1: arr[k] = L[i] i += 1 k += 1 while j < n2: arr[k] = R[j] j += 1 k += 1 def mergeSort(arr, l, r): if l < r: m = l+(r-l)//2 mergeSort(arr, l, m) mergeSort(arr, m+1, r) merge(arr, l, m, r) arr = [3, 7, 8, 5, 2, 1, 9, 5, 4] mergeSort(arr, 0, len(arr)-1) ```","solution":"def partition(arr, low, high): i = (low-1) pivot = arr[high] for j in range(low, high): if arr[j] < pivot: i = i+1 arr[i], arr[j] = arr[j], arr[i] arr[i+1], arr[high] = arr[high], arr[i+1] return (i+1) def quickSort(arr, low, high): if low < high: pi = partition(arr, low, high) quickSort(arr, low, pi-1) quickSort(arr, pi+1, high) def merge(arr, l, m, r): n1 = m - l + 1 n2 = r - m L = [0] * (n1) R = [0] * (n2) for i in range(0, n1): L[i] = arr[l + i] for j in range(0, n2): R[j] = arr[m + 1 + j] i = 0 j = 0 k = l while i < n1 and j < n2: if L[i] <= R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < n1: arr[k] = L[i] i += 1 k += 1 while j < n2: arr[k] = R[j] j += 1 k += 1 def mergeSort(arr, l, r): if l < r: m = l+(r-l)//2 mergeSort(arr, l, m) mergeSort(arr, m+1, r) merge(arr, l, m, r) # Analyze the efficiencies def compare_efficiency(): return { \\"Quicksort\\": \\"Average Case: O(n log n), Worse Case: O(n^2)\\", \\"Merge Sort\\": \\"Average Case: O(n log n), Worse Case: O(n log n)\\" } arr = [3, 7, 8, 5, 2, 1, 9, 5, 4] quickSort(arr, 0, len(arr)-1) arr2 = [3, 7, 8, 5, 2, 1, 9, 5, 4] mergeSort(arr2, 0, len(arr2)-1)"},{"question":"Write a function that takes a list of mixed data types and returns a new list where integers are sorted in ascending order, floats are sorted in descending order, strings are sorted by length (shortest to longest), and any other types are removed. ```python def mixed_sort(input_list): Sorts a given list based on the following criteria: - Integers in ascending order - Floats in descending order - Strings by length (shortest to longest) - Removes other data types Args: input_list (list): List containing elements of mixed data types. Returns: list: Sorted list with specified criteria and other data types removed. Examples: >>> mixed_sort([5, \\"apple\\", 3.14, {}, \\"cat\\", 1, 2.71, 7]) [1, 5, 7, 3.14, 2.71, \\"cat\\", \\"apple\\"] >>> mixed_sort([\\"longest\\", \\"short\\", 3, 0.5, 10, {}, None, \\"mild\\"]) [3, 10, 0.5, \\"mild\\", \\"short\\", \\"longest\\"] ```","solution":"def mixed_sort(input_list): Sorts a given list based on the following criteria: - Integers in ascending order - Floats in descending order - Strings by length (shortest to longest) - Removes other data types Args: input_list (list): List containing elements of mixed data types. Returns: list: Sorted list with specified criteria and other data types removed. # Filter and sort integers int_list = sorted([x for x in input_list if isinstance(x, int)]) # Filter and sort floats float_list = sorted([x for x in input_list if isinstance(x, float)], reverse=True) # Filter and sort strings str_list = sorted([x for x in input_list if isinstance(x, str)], key=len) # Combine all sorted lists result_list = int_list + float_list + str_list return result_list"},{"question":"Write a function that calculates the next date given a date string in the format \\"DD-MM-YYYY\\". Ensure your function takes into account leap years and the varying number of days in each month. For example, given the input \\"28-02-2020\\", the output should be \\"29-02-2020\\" and for \\"31-12-2021\\", the output should be \\"01-01-2022\\".","solution":"def is_leap_year(year): Check if a given year is a leap year. return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) def next_date(date_str): Calculate the next date given a date string in the format \\"DD-MM-YYYY\\". days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Parse the date string day, month, year = map(int, date_str.split(\'-\')) # Check for leap year and adjust days in February if month == 2 and is_leap_year(year): days_in_month[1] = 29 # Increment the day day += 1 # Check if day exceeds the days in the current month if day > days_in_month[month - 1]: day = 1 month += 1 if month > 12: month = 1 year += 1 return f\\"{day:02d}-{month:02d}-{year:04d}\\""},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the input list. Then, using this function, filter the prime numbers from the list `[12, 15, 7, 5, 8, 17]` and display the resulting list in the console. Make sure to include necessary helper functions for checking prime numbers. Start with the prompt: # Initial Python code def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def filter_primes(lst): pass print(\\"Filtered Primes List:\\")","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def filter_primes(lst): Filter prime numbers from the input list. return [num for num in lst if is_prime(num)] # Filtering prime numbers from the list [12, 15, 7, 5, 8, 17] and displaying the resulting list primes_list = filter_primes([12, 15, 7, 5, 8, 17]) print(\\"Filtered Primes List:\\", primes_list)"},{"question":"Write a Python script that takes a JSON file containing a list of students\' names, their scores in Mathematics, Science, and English, and calculates their average score. The script should then output the student\'s name and their average score in a new JSON file. Ensure you handle any potential errors, such as missing scores or incorrect data types, gracefully. Here is an example input: ```json [ {\\"name\\": \\"Alice\\", \\"scores\\": {\\"Mathematics\\": 85, \\"Science\\": 78, \\"English\\": 92}}, {\\"name\\": \\"Bob\\", \\"scores\\": {\\"Mathematics\\": 90, \\"Science\\": 88, \\"English\\": 84}} ] ``` And the expected output: ```json [ {\\"name\\": \\"Alice\\", \\"average_score\\": 85.0}, {\\"name\\": \\"Bob\\", \\"average_score\\": 87.33} ] ```","solution":"import json def calculate_average_scores(input_file, output_file): try: # Read the input file with open(input_file, \'r\') as file: students = json.load(file) result = [] # Process each student for student in students: name = student.get(\'name\') scores = student.get(\'scores\', {}) # Check if all required subjects\' scores are present try: math_score = float(scores[\'Mathematics\']) science_score = float(scores[\'Science\']) english_score = float(scores[\'English\']) average_score = (math_score + science_score + english_score) / 3 average_score = round(average_score, 2) except KeyError as e: print(f\\"Missing score for {e} in student {name}. Skipping this student.\\") continue except (TypeError, ValueError) as e: print(f\\"Incorrect data type for scores of student {name}. Skipping this student.\\") continue result.append({\\"name\\": name, \\"average_score\\": average_score}) # Write the output file with open(output_file, \'w\') as file: json.dump(result, file, indent=4) except FileNotFoundError: print(\\"The input file was not found.\\") except json.JSONDecodeError: print(\\"Error decoding the JSON input file.\\") except Exception as e: print(f\\"An unexpected error occurred: {e}\\")"},{"question":"Write a program to count the number of unique words in a given sentence using the Python `collections` module. The program should read the sentence, split it into words, and then use a `Counter` to determine how many unique words are present. Output the total number of unique words and the frequency of each unique word. For example, given the sentence \\"This is a test. This test is only a test.\\", the program should output `{\'This\': 2, \'is\': 2, \'a\': 2, \'test\': 3, \'only\': 1}` and the total number of unique words as 5.","solution":"from collections import Counter import re def count_unique_words(sentence): Counts unique words in a sentence and returns a dictionary with word counts and the number of unique words. Parameters: sentence (str): The input sentence. Returns: dict: A dictionary where keys are unique words and values are their counts. int: Total number of unique words. # Normalize the sentence to handle punctuation and case words = re.findall(r\'bw+b\', sentence.lower()) # Get the word counts using Counter word_counts = Counter(words) # Extract the total number of unique words unique_word_count = len(word_counts) return word_counts, unique_word_count"},{"question":"Design a scheduling algorithm for a multiprocessor system that balances the load between processors and minimizes context switching. Include considerations for handling priorities, preventing deadlocks, and ensuring fair allocation of processor time across all tasks without causing starvation.","solution":"import heapq from collections import deque, defaultdict import threading class Process: def __init__(self, pid, priority, burst_time): self.pid = pid self.priority = priority self.burst_time = burst_time self.remaining_time = burst_time class Scheduler: def __init__(self, num_processors): self.num_processors = num_processors self.queues = [deque() for _ in range(3)] # Three priority levels: 0, 1, 2 self.lock = threading.Lock() self.processors = defaultdict(lambda: None) def add_process(self, process): with self.lock: self.queues[process.priority].append(process) def get_next_process(self): with self.lock: for queue in self.queues: if queue: return queue.popleft() return None def run_scheduler(self): threads = [] for _ in range(self.num_processors): t = threading.Thread(target=self.assign_processor) t.start() threads.append(t) for t in threads: t.join() def assign_processor(self): while True: process = self.get_next_process() if process is None: break # No more processes to schedule self.execute_process(process) def execute_process(self, process): # Simulate process execution print(f\\"Executing Process PID={process.pid} on Processor\\") while process.remaining_time > 0: process.remaining_time -= 1 # Example reschedule: reinsert into lower priority if needed if process.remaining_time > 0: next_priority = min(2, process.priority + 1) process.priority = next_priority self.add_process(process) # Example usage scheduler = Scheduler(num_processors=4) # Adding some processes with varying priorities and burst times scheduler.add_process(Process(pid=1, priority=0, burst_time=5)) scheduler.add_process(Process(pid=2, priority=1, burst_time=3)) scheduler.add_process(Process(pid=3, priority=2, burst_time=1)) scheduler.run_scheduler()"},{"question":"Create a function that takes a JSON string representing employee data and processes it to calculate metrics for each department. The JSON string contains an array of objects, where each object represents an employee with the following fields: `name` (string), `age` (integer), `department` (string), `salary` (float), `years_of_experience` (integer), and `is_manager` (boolean). The function should compute the following metrics for each department: 1. The average salary 2. The average age 3. The number of employees 4. The number of managers 5. The average years of experience 6. The maximum salary The result should be a dictionary where the keys are the department names, and the values are dictionaries containing the calculated metrics. The function should handle erroneous data gracefully: - If a field is missing from an employee object, raise a ValueError with the employee\'s name and a description of the error. - If a field contains a value that cannot be converted to the required type, raise a TypeError with the employee\'s name and a description of the error. The function should also handle an empty array gracefully by returning an empty dictionary. Provide a basic implementation of the function and a piece of code with a typical mistake that a programmer might make. Analyze the mistake and explain the correction. Lastly, write unit tests to validate the functionality of the function, ensuring it handles all edge cases and large datasets efficiently.","solution":"import json def process_employee_data(json_string): employees = json.loads(json_string) if not employees: return {} departments = {} for emp in employees: if not all(k in emp for k in (\\"name\\", \\"age\\", \\"department\\", \\"salary\\", \\"years_of_experience\\", \\"is_manager\\")): raise ValueError(f\\"Missing fields in employee data for {emp.get(\'name\', \'unknown name\')}\\") try: age = int(emp[\\"age\\"]) salary = float(emp[\\"salary\\"]) years_of_experience = int(emp[\\"years_of_experience\\"]) is_manager = bool(emp[\\"is_manager\\"]) except ValueError as e: raise TypeError(f\\"Incorrect field type in employee data for {emp[\'name\']}: {e}\\") dept = emp[\\"department\\"] if dept not in departments: departments[dept] = { \'total_salary\': 0.0, \'total_age\': 0, \'num_employees\': 0, \'num_managers\': 0, \'total_years_of_experience\': 0, \'max_salary\': 0.0 } departments[dept][\'total_salary\'] += salary departments[dept][\'total_age\'] += age departments[dept][\'num_employees\'] += 1 if is_manager: departments[dept][\'num_managers\'] += 1 departments[dept][\'total_years_of_experience\'] += years_of_experience if salary > departments[dept][\'max_salary\']: departments[dept][\'max_salary\'] = salary for dept in departments: departments[dept][\'average_salary\'] = departments[dept][\'total_salary\'] / departments[dept][\'num_employees\'] departments[dept][\'average_age\'] = departments[dept][\'total_age\'] / departments[dept][\'num_employees\'] departments[dept][\'average_years_of_experience\'] = departments[dept][\'total_years_of_experience\'] / departments[dept][\'num_employees\'] # Remove intermediate data we used for calculation del departments[dept][\'total_salary\'] del departments[dept][\'total_age\'] del departments[dept][\'total_years_of_experience\'] return departments"},{"question":"Create a function `find_largest_subarray_sum` in Python that takes a list of integers as input and returns the largest sum of contiguous subarray using the Kadane\'s algorithm. The function should have a time complexity of O(n). Additionally, write a script that generates a list of random integers, utilizes the `find_largest_subarray_sum` function to determine and print the largest sum, and also prints the subarray itself.","solution":"def find_largest_subarray_sum(nums): Returns the largest sum of contiguous subarray using Kadane\'s algorithm. if not nums: return 0 max_current = max_global = nums[0] start = end = s = 0 for i in range(1, len(nums)): if nums[i] > max_current + nums[i]: max_current = nums[i] s = i else: max_current += nums[i] if max_current > max_global: max_global = max_current start = s end = i return max_global, nums[start:end+1]"},{"question":"A university wants to automate the process of assigning dorm rooms to students based on their preferences. Each student can list up to three dorm preferences in order of priority. The university has three dorms: Dorm A, Dorm B, and Dorm C with capacities of 100, 100, and 80 students respectively. Students should be assigned to their highest-preference dorm that has available space. If a student\'s preferred dorms are all full, they should be automatically assigned to any available dorm, starting from Dorm A to Dorm C sequentially. Write a program to allocate dorm rooms to students based on their preferences and dorm capacities. The program should take an input list of students and their preferences and output the allocation of students to dorm rooms. Example input format: ``` [ {\\"name\\": \\"Alice\\", \\"preferences\\": [\\"A\\", \\"B\\", \\"C\\"]}, {\\"name\\": \\"Bob\\", \\"preferences\\": [\\"B\\", \\"A\\", \\"C\\"]}, ... ] ``` Example output format: ``` Dorm A: [\\"Alice\\"] Dorm B: [\\"Bob\\"] Dorm C: [] ``` Ensure that the allocation process adheres to the following rules: 1. Each student is assigned to their highest-preference dorm that has not yet reached its capacity. 2. If all preferred dorms are full, assign the student to any dorm with available space. 3. In case multiple dorms have availability, assign students starting from Dorm A, then Dorm B, and finally Dorm C.","solution":"def allocate_dorms(students): # Dorm capacities dorms_capacity = {\\"A\\": 100, \\"B\\": 100, \\"C\\": 80} # Initialize the dorms with empty lists to hold student names dorms = {\\"A\\": [], \\"B\\": [], \\"C\\": []} # Function to find available dorm in order A, B, C def find_available_dorm(): for dorm in [\\"A\\", \\"B\\", \\"C\\"]: if len(dorms[dorm]) < dorms_capacity[dorm]: return dorm return None # Iterate over each student in the list for student in students: assigned = False # Check student preferences and assign to the first available preferred dorm for preference in student[\\"preferences\\"]: if len(dorms[preference]) < dorms_capacity[preference]: dorms[preference].append(student[\\"name\\"]) assigned = True break # If none of the preferred dorms have space, assign to any available dorm if not assigned: available_dorm = find_available_dorm() if available_dorm: dorms[available_dorm].append(student[\\"name\\"]) return dorms"},{"question":"Develop a Python function that takes a string containing a valid mathematical expression and evaluates it. The string may include the following operators: `+`, `-`, `*`, `/`, and parentheses `()`, as well as integer numbers. The function should return the result of the expression as a float. Consider the following requirements and constraints: 1. The input string will always be a syntactically correct expression (you do not need to handle incorrect input formats). 2. Your function should handle the proper order of operations (BIDMAS/BODMAS rules: Brackets, Orders (i.e., exponents), Division/Multiplication, Addition/Subtraction). 3. Implement the function without using the `eval` function in Python to ensure that the solution is robust and secure. 4. Allow for the handling of floating-point division and ensure that division by zero is handled gracefully, returning `None` in such cases. Write test cases to validate your function. Ensure that it correctly evaluates expressions with various levels of complexity, such as: - Simple operations without parentheses - Operations with multiple levels of nested parentheses - Expressions containing both integer and floating-point numbers - Handling edge cases like division by zero and empty input strings Example: 1. `evaluate_expression(\\"3 + 5\\")` should return `8.0` 2. `evaluate_expression(\\"(2+3) * 4\\")` should return `20.0` 3. `evaluate_expression(\\"10 / 2\\")` should return `5.0` 4. `evaluate_expression(\\"10 / 0\\")` should return `None` 5. `evaluate_expression(\\"\\")` should return `0.0`","solution":"def evaluate_expression(expression): Evaluates a mathematical expression given as a string. Supports +, -, *, / operators and parentheses. Returns the result as a float or None if division by zero is encountered. import re def parse_expression(expr): # Helper functions for basic mathematical operations def add(x, y): return x + y def subtract(x, y): return x - y def multiply(x, y): return x * y def divide(x, y): return None if y == 0 else x / y operators = {\'+\': add, \'-\': subtract, \'*\': multiply, \'/\': divide} precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} def shunting_yard(expression): Shunting Yard algorithm to convert infix to postfix output = [] stack = [] number = \'\' for token in expression: if token.isdigit() or token == \'.\': number += token else: if number: output.append(float(number)) number = \'\' if token in operators: while (stack and stack[-1] in operators and precedence[token] <= precedence[stack[-1]]): output.append(stack.pop()) stack.append(token) elif token == \'(\': stack.append(token) elif token == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # Pop the \'(\' if number: output.append(float(number)) while stack: output.append(stack.pop()) return output def evaluate_postfix(postfix): stack = [] for token in postfix: if isinstance(token, float): stack.append(token) else: y, x = stack.pop(), stack.pop() result = operators[token](x, y) if result is None: return None stack.append(result) return stack[0] if stack else 0.0 # Clean spaces in expression expression = re.sub(r\'s+\', \'\', expr) if not expression: return 0.0 postfix = shunting_yard(expression) return evaluate_postfix(postfix) if not expression.strip(): return 0.0 return parse_expression(expression)"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Ensure that the function handles edge cases, such as an empty list or a list with no prime numbers, appropriately. # Example ```python # Input find_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) # Output [2, 3, 5, 7] # Input find_primes([15, 18, 21, 24]) # Output [] # Input find_primes([]) # Output [] ``` # Constraints - The input list can contain both positive and negative integers, but only positive prime numbers should be included in the result. - The maximum length of the input list is 10^4. - The integers in the list will be between -10^6 and 10^6.","solution":"def is_prime(n): Determines if a number n is prime. if n <= 1: return False if n in (2, 3): return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes(lst): Returns a list of prime numbers from the original list. return [num for num in lst if is_prime(num)]"},{"question":"# Merge Two Sorted Linked Lists Description: Write a function to merge two sorted singly linked lists into a single sorted linked list and return its head. You are given the heads of two sorted linked lists `l1` and `l2`, and your task is to merge them into a single sorted list. For example, if `l1 = [1, 2, 4]` and `l2 = [1, 3, 4]`, the merged sorted linked list should be `[1, 1, 2, 3, 4, 4]`. Example 1: Input: `l1 = [1, 2, 4]`, `l2 = [1, 3, 4]` Output: `[1, 1, 2, 3, 4, 4]` Example 2: Input: `l1 = []`, `l2 = []` Output: `[]` Example 3: Input: `l1 = []`, `l2 = [0]` Output: `[0]` Example 4: Input: `l1 = [2, 3, 5]`, `l2 = [1, 4]` Output: `[1, 2, 3, 4, 5]` Example 5: Input: `l1 = [5, 6, 7]`, `l2 = [1, 2, 6]` Output: `[1, 2, 5, 6, 6, 7]` Constraints: - The number of nodes in each linked list is in the range `[0, 1000]`. - `-1000 <= Node.val <= 1000` - Both `l1` and `l2` are sorted in non-decreasing order. - The function should handle edge cases where one or both linked lists are empty. Note: The function should merge the lists in-place without creating additional lists, and it should maintain the sorted order of the final list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merge two sorted linked lists and return the head of the merged sorted list. dummy = ListNode() current = dummy while l1 and l2: if l1.val <= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 elif l2: current.next = l2 return dummy.next"},{"question":"Write a function in Python that takes an array of integers and an integer value `k`, and rotates the array to the right by `k` steps. The function should modify the input array in place and return the modified array. For example, given the array [1, 2, 3, 4, 5, 6, 7] and `k` = 3, the function should return [5, 6, 7, 1, 2, 3, 4]. Note that `k` can be larger than the length of the array, and the function should still handle such cases correctly by performing the rotation efficiently.","solution":"def rotate_right(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): The array of integers. k (int): The number of steps to rotate the array to the right. Returns: list: The modified array, rotated to the right by k steps. if not arr: return [] n = len(arr) k = k % n # Normalize k if it\'s larger than the length of the array arr[:] = arr[-k:] + arr[:-k] # Rotate in place return arr"},{"question":"Implement a Python function that finds the longest consecutive sequence of an integer in a list and returns the length of that sequence. Your function should run in O(n) time complexity where n is the length of the input list. **Function Signature** ```python def longest_consecutive(nums: List[int]) -> int: # Your code here ``` **Input** - `nums`: A list of integers, where the length can vary between 0 and 10^4. **Output** - An integer representing the length of the longest consecutive sequence of numbers. **Example** ```python assert longest_consecutive([100, 4, 200, 1, 3, 2]) == 4 # The longest consecutive sequence is [1, 2, 3, 4] assert longest_consecutive([0,3,7,2,5,8,4,6,0,1]) == 9 # The longest consecutive sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8] assert longest_consecutive([1,2,0,1]) == 3 # The longest consecutive sequence is [0, 1, 2] assert longest_consecutive([]) == 0 # The input list is empty, so the output is 0 ```","solution":"from typing import List def longest_consecutive(nums: List[int]) -> int: Finds the length of the longest consecutive sequence of integers in a list. Args: nums: A list of integers. Returns: An integer representing the length of the longest consecutive sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: # Only start counting from numbers that are the beginning of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"請寫一個函數，用來計算一個給定的字串中所有字符（包括標點符號和空格）的出現次數。該函數應該返回一個字典，字典的鍵是字符，值是該字符在字串中出現的次數。 範例輸入: \\"Hello, World!\\" 範例輸出: {\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \',\': 1, \' \': 1, \'W\': 1, \'r\': 1, \'d\': 1, \'!\': 1}","solution":"def character_count(s): Returns a dictionary where the keys are characters from the string \'s\' and values are their respective counts in the string. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write a function that takes a string as input and returns a reversed version of the string where the order of characters is reversed, but the position of spaces within the string remains unchanged. For example, if the input is \\"hello world\\", the output should be \\"dlrow olleh\\". # Constraints: - The input string will contain only lowercase Latin letters and spaces. - The length of the input string will not exceed 1000 characters. # Example: ```python Input: \\"hi there\\" Output: \\"ei rht eh\\" ```","solution":"def reverse_string_preserve_spaces(s): Returns a reversed version of the string where the order of characters is reversed, but the position of spaces within the string remains unchanged. s_list = list(s) chars = [ch for ch in s if ch != \' \'] chars.reverse() for i in range(len(s_list)): if s_list[i] != \' \': s_list[i] = chars.pop(0) return \'\'.join(s_list)"},{"question":"Write a program in Python that simulates a simple banking system. The program should allow users to create a new account, deposit money, withdraw money, and check their account balance. Each account must be protected by a unique PIN, and operations such as deposit and withdrawal should require PIN verification. The system should also ensure that withdrawals do not exceed the available balance and should handle invalid PIN or insufficient funds gracefully. The program should use classes to encapsulate the account details and operations, ensuring that data is securely handled.","solution":"class Account: def __init__(self, account_number, pin, initial_balance=0): self.account_number = account_number self.pin = pin self.balance = initial_balance def deposit(self, amount, pin): if self.pin == pin: if amount > 0: self.balance += amount return True else: return False else: return False def withdraw(self, amount, pin): if self.pin == pin: if 0 < amount <= self.balance: self.balance -= amount return True else: return False else: return False def check_balance(self, pin): if self.pin == pin: return self.balance else: return \\"Invalid PIN\\" class Bank: def __init__(self): self.accounts = {} def create_account(self, account_number, pin): if account_number not in self.accounts: self.accounts[account_number] = Account(account_number, pin) return True else: return False def get_account(self, account_number): return self.accounts.get(account_number, None)"},{"question":"You are given a dictionary where the keys are the names of countries and the values are dictionaries containing information about the country\'s capital city, population, and major language spoken. Write a Python function to find and print the name of the country with the highest population. Moreover, given the code snippet below, identify and correct the mistakes in it: ```python countries_info = { \'USA\': {\'capital\': \'Washington, D.C.\', \'population\': 331002651, \'language\': \'English\'}, \'Canada\': {\'capital\': \'Ottawa\', \'population\': \'37742154\', \'language\': \'English, French\'}, \'China\': {\'capital\': \'Beijing\', \'population\': 1439323776, \'language\': \'Mandarin\'}, } def find_most_populous_country(info): max_population = 0 max_country = \'\' for country, details in info.items(): if details[\'population\'] > max_population: # This line is erroneous max_population = details[\'population\'] max_country = country print(\\"The country with the highest population is:\\", max_country) find_most_populous_country(countries_info) ``` Ensure that the function handles cases where population data might be missing or not properly formatted as integers.","solution":"def find_most_populous_country(info): max_population = 0 max_country = \'\' for country, details in info.items(): population = details.get(\'population\', 0) try: population = int(population) except ValueError: population = 0 if population > max_population: max_population = population max_country = country return max_country"},{"question":"Write a function to solve the N-Queens problem. The N-Queens problem involves placing N queens on an N x N chessboard in such a way that no two queens threaten each other. Your implementation should return all distinct solutions to the N-Queens puzzle, and each solution should be a permutation of the columns where the ith index represents the row and the value at that index represents the column where a queen is placed. Additionally, provide a function to validate the correctness of your solutions. Make sure to incorporate edge case handling, such as when N equals 1 or 2, which have unique considerations. Example: ``` Input: 4 Output: [ [\\".Q..\\", // Solution 1 representation \\"...Q\\", \\"Q...\\", \\"..Q.\\"], [\\"..Q.\\", // Solution 2 representation \\"Q...\\", \\"...Q\\", \\".Q..\\"] ] ``` Make sure to comment your code thoroughly so it is easy to understand and maintain.","solution":"def solve_n_queens(n): Solves the N-Queens problem and returns a list of solutions. Each solution is represented as a list of strings. def is_valid(board, row, col): for i in range(row): # Check the column if board[i] == col: return False # Check the main diagonal if board[i] - i == col - row: return False # Check the secondary diagonal if board[i] + i == col + row: return False return True def solve(board, row): if row == n: solutions.append(board[:]) return for col in range(n): if is_valid(board, row, col): board[row] = col solve(board, row + 1) board[row] = -1 solutions = [] board = [-1] * n solve(board, 0) return convert_solutions_to_strings(solutions, n) def convert_solutions_to_strings(solutions, n): Converts the list of solutions from column indices to board string representations. converted_solutions = [] for solution in solutions: board = [] for row in solution: board.append(\'.\' * row + \'Q\' + \'.\' * (n - row - 1)) converted_solutions.append(board) return converted_solutions def validate_solutions(n, solutions): Validates the given solutions for the N-Queens problem. for solution in solutions: for row in range(n): for other_row in range(row + 1, n): if solution[row] == solution[other_row]: return False if abs(solution[row] - solution[other_row]) == abs(row - other_row): return False return True"},{"question":"Create a Python function named `rectangular_grid_path_count` that takes two integers as inputs, `m` and `n`, representing the number of rows and columns of a rectangular grid respectively. The function should return the total number of unique paths from the top-left corner to the bottom-right corner of the grid, assuming that you can only move either down or right at any point in time. Your solution should efficiently handle large inputs and you should also provide suitable unit tests to validate your function. Note: You may explore the use of dynamic programming techniques to optimize the solution.","solution":"def rectangular_grid_path_count(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n rectangular grid, moving only right or down. # Create a 2D list to store the number of paths to each cell dp = [[0]*n for _ in range(m)] # Initialize the first row and first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill in the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will contain the number of unique paths return dp[-1][-1]"},{"question":"You are given two arrays of integers, `nums1` and `nums2`, each of length N and M respectively. Write a function that finds all the numbers that are present in both arrays. The output should be a list of these common numbers, each number should be unique and the final list should be sorted in ascending order. **Function Signature:** ```python def find_common_elements(nums1: List[int], nums2: List[int]) -> List[int]: pass ``` **Input:** - `nums1`: A list of N integers, where 1 ≤ N ≤ 1000 - `nums2`: A list of M integers, where 1 ≤ M ≤ 1000 **Output:** - A sorted list of unique integers found in both `nums1` and `nums2` **Example:** ```python nums1 = [1, 2, 2, 1] nums2 = [2, 2] find_common_elements(nums1, nums2) should return [2] nums1 = [4, 9, 5] nums2 = [9, 4, 9, 8, 4] find_common_elements(nums1, nums2) should return [4, 9] ```","solution":"def find_common_elements(nums1, nums2): Returns a sorted list of unique integers found in both nums1 and nums2. Parameters: nums1 : List[int] A list of integers. nums2 : List[int] Another list of integers. Returns: List[int] Sorted list of unique integers found in both nums1 and nums2. # Convert both lists to sets to remove duplicates and find common elements set1 = set(nums1) set2 = set(nums2) # Find common elements common_elements = set1.intersection(set2) # Convert the set of common elements to a sorted list return sorted(list(common_elements))"},{"question":"Given a list of integers, write a function to identify and return the subarray with the maximum sum. If there are multiple subarrays with the same maximum sum, return the one that appears latest in the list. Additionally, provide a helper function to ensure the input list is non-empty and does not contain nested lists. Example input: `[-2, 1, -3, 4, -1, 2, 1, -5, 4]` Expected output: `[4, -1, 2, 1]`","solution":"def validate_input(lst): if not lst: raise ValueError(\\"Input list must not be empty\\") if not all(isinstance(i, int) for i in lst): raise ValueError(\\"Input list must only contain integers\\") def max_subarray(lst): validate_input(lst) max_sum = float(\'-inf\') current_sum = 0 end = start = 0 best_start = best_end = -1 for index in range(len(lst)): current_sum += lst[index] if current_sum > max_sum: max_sum = current_sum best_start = start best_end = index if current_sum == max_sum and (best_start == -1 or index > best_end): best_start = start best_end = index if current_sum < 0: current_sum = 0 start = index + 1 return lst[best_start:best_end+1]"},{"question":"You are given a list of tuples where each tuple contains a string and an integer. The string can represent a mathematical arithmetic operation (addition, subtraction, multiplication, division) with the number in the tuple. Implement a function that takes this list as an input and returns the cumulative result after performing each operation in sequence starting from an initial value of zero. If an operation results in a division by zero, return \'undefined\' immediately. For example, given the list [(\\"add\\", 5), (\\"multiply\\", 3), (\\"subtract\\", 2), (\\"divide\\", 3)], the function should return 3 because: 0 + 5 = 5 5 * 3 = 15 15 - 2 = 13 13 / 3 ≈ 4 (integer division) If the input list is [(\\"add\\", 5), (\\"subtract\\", 3), (\\"divide\\", 0)], the function should return \'undefined\' because division by zero occurs in the third operation. Implement the function signature: ```python def evaluate_operations(operations: List[Tuple[str, int]]) -> Union[int, str]: # your code here ```","solution":"from typing import List, Tuple, Union def evaluate_operations(operations: List[Tuple[str, int]]) -> Union[int, str]: result = 0 for operation, value in operations: if operation == \\"add\\": result += value elif operation == \\"subtract\\": result -= value elif operation == \\"multiply\\": result *= value elif operation == \\"divide\\": if value == 0: return \'undefined\' result //= value else: raise ValueError(f\\"Unsupported operation: {operation}\\") return result"},{"question":"Write a Python function `reverse_and_double(lst)` that takes a list of integers `lst` as an argument. The function should reverse the order of elements in the list and then double each element in the reversed list. The function should return the modified list. Example: ``` Input: [1, 2, 3, 4] Output: [8, 6, 4, 2] ``` Constraints: 1. Do not use the built-in `reverse()` method. 2. Assume all elements in the list are integers. 3. The input list can contain any integer values, including negative and zero. Provide the implementation of the function along with an explanation of your approach.","solution":"def reverse_and_double(lst): Reverses the order of elements in the list and then doubles each element. Parameters: lst (list of int): A list of integers. Returns: list of int: A new list with elements reversed and doubled. # Create an empty list to store the reversed and doubled elements reversed_doubled = [] # Loop through the list in reverse order and double each element for i in range(len(lst) - 1, -1, -1): reversed_doubled.append(lst[i] * 2) return reversed_doubled"},{"question":"Design a function to solve the problem of finding the longest common subsequence between two strings, `text1` and `text2`. Given two strings, `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return 0. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. For example, `\\"ace\\"` is a subsequence of `\\"abcde\\"` while `\\"aec\\"` is not. A common subsequence of two strings is a subsequence that is common to both strings. Example 1: Input: text1 = \\"abcde\\", text2 = \\"ace\\" Output: 3 Explanation: The longest common subsequence is \\"ace\\" and its length is 3. Example 2: Input: text1 = \\"abc\\", text2 = \\"abc\\" Output: 3 Explanation: The longest common subsequence is \\"abc\\" and its length is 3. Example 3: Input: text1 = \\"abc\\", text2 = \\"def\\" Output: 0 Explanation: There is no common subsequence. Constraints: - 1 <= text1.length, text2.length <= 1000 - text1 and text2 consist of only lowercase English characters. Function signature: ```python def longest_common_subsequence(text1: str, text2: str) -> int: pass ```","solution":"def longest_common_subsequence(text1: str, text2: str) -> int: Returns the length of the longest common subsequence between text1 and text2. m, n = len(text1), len(text2) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"# **String Compression** Implement a function `compress_string` that compresses a given string using the following rules: 1. If the length of the string is less than or equal to 2, return the string as is. 2. For longer strings, replace consecutive occurrences of the same character with that character followed by the count of its consecutive occurrences. 3. If the compressed string is not shorter than the original string, return the original string. The function signature is: ```python def compress_string(s: str) -> str: ``` Example: - `compress_string(\\"aabcccccaaa\\")` should return `\\"a2b1c5a3\\"` - `compress_string(\\"abc\\")` should return `\\"abc\\"` - `compress_string(\\"aa\\")` should return `\\"aa\\"` **Constraints:** - The input string `s` will only contain lowercase alphabetical characters (`a-z`). - The length of the input string `s` will not exceed 1000 characters. Note: - The goal is to reduce the string length without losing information. - You are required to implement the function and ensure it passes the provided examples. ```python def compress_string(s: str) -> str: if len(s) <= 2: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s # Example Usage print(compress_string(\\"aabcccccaaa\\")) # Output: \\"a2b1c5a3\\" print(compress_string(\\"abc\\")) # Output: \\"abc\\" print(compress_string(\\"aa\\")) # Output: \\"aa\\" ```","solution":"def compress_string(s: str) -> str: if len(s) <= 2: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a function that takes an integer as an input and returns a string representation of that integer with commas as thousand separators. For example, if the input is 1000, the function should return \\"1,000\\", and if the input is 1000000, the function should return \\"1,000,000\\". Ensure that the function can handle both positive and negative numbers.","solution":"def format_number_with_commas(number): Returns the string representation of the integer with commas as thousand separators. return \\"{:,}\\".format(number)"},{"question":"Given two lists of integers, write a Python function that returns a list containing only the common elements between the two lists. The returned list should not contain duplicate elements, and the elements should be sorted in ascending order. If there are no common elements, return an empty list. **Function Signature:** ```python def find_common_elements(list1: list, list2: list) -> list: pass ``` **Input:** - `list1` (List of integers): Example `[1, 2, 3, 4, 5]` - `list2` (List of integers): Example `[4, 5, 6, 7, 8]` **Output:** - A list of integers containing the common elements, sorted in ascending order. Example: `[4, 5]` **Example:** ```python list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8] print(find_common_elements(list1, list2)) # Output: [4, 5] list1 = [10, 20, 30, 40] list2 = [50, 60, 70] print(find_common_elements(list1, list2)) # Output: [] ``` **Note:** - Do not use any external libraries for sorting or finding unique elements. - Ensure that your solution is efficient and handles edge cases where one or both lists are empty.","solution":"def find_common_elements(list1: list, list2: list) -> list: Returns a list of common elements between list1 and list2 without duplicates and in ascending order. # Convert lists to sets to find common elements and eliminate duplicates set1 = set(list1) set2 = set(list2) # Find common elements common_elements = set1 & set2 # Convert to list and sort result = sorted(list(common_elements)) return result"},{"question":"Write a Python function that takes a dictionary as input and returns a list of keys sorted by their corresponding values in descending order. For instance, given the dictionary `{\'a\': 3, \'b\': 1, \'c\': 2}`, the function should return `[\'a\', \'c\', \'b\']`.","solution":"def sort_keys_by_values_desc(dictionary): Returns a list of keys sorted by their corresponding values in descending order. :param dictionary: Dictionary to be sorted. :return: List of keys sorted by their values in descending order. sorted_keys = sorted(dictionary, key=dictionary.get, reverse=True) return sorted_keys"},{"question":"Given a dataset of e-commerce transactions: https://www.kaggle.com/carrie1/ecommerce-data, create a visualization to track the number of transactions over time, broken down by country. Additionally, detect and handle any missing values in the dataset. Next, a piece of faulty code is given. Your task is to debug it, ensuring proper transaction visualization by country per month. Enhance your visualization using packages like Matplotlib or Plotly. Furthermore, implement an algorithm to dynamically identify and highlight peak shopping months for each country. Create a notification system that alerts when a new peak month is detected. Faulty code reference: ```python # Importing Required Libraries import pandas as pd import matplotlib.pyplot as plt # Load Dataset data = pd.read_csv(\'ecommerce_data.csv\') # Incorrect Missing Values Handling data.fillna(0, inplace=False) # Wrong Data Manipulation Process data[\'InvoiceDate\'] = pd.to_datetime(data[\'InvoiceDate\']) data = data.groupby([\'InvoiceDate\', \'Country\']).size().reset_index(name=\'TransactionCount\') # Faulty Visualization Code pivot_data = data.pivot(index=\'InvoiceDate\', columns=\'Country\', values=\'TransactionCount\') pivot_data.plot(kind=\'line\') plt.show() ```","solution":"import pandas as pd import matplotlib.pyplot as plt import numpy as np def load_and_clean_data(file_path): Load the dataset and perform missing value handling. # Load Dataset data = pd.read_csv(file_path) # Drop missing values data.dropna(inplace=True) # Ensure proper data types data[\'InvoiceDate\'] = pd.to_datetime(data[\'InvoiceDate\']) return data def group_data_by_month_and_country(data): Group data by month and country, counting transactions. # Adding year and month columns data[\'YearMonth\'] = data[\'InvoiceDate\'].dt.to_period(\'M\') # Grouping by YearMonth, Country and counting transactions group_data = data.groupby([\'YearMonth\', \'Country\']).size().reset_index(name=\'TransactionCount\') return group_data def create_transaction_plot(group_data): Create a plot to visualize transaction counts per month, broken down by country. # Pivots the data for plotting pivot_data = group_data.pivot(index=\'YearMonth\', columns=\'Country\', values=\'TransactionCount\').fillna(0) # Plotting pivot_data.plot(kind=\'line\', figsize=(15, 8)) plt.title(\\"Monthly Transaction Count by Country\\") plt.xlabel(\\"Date (Year-Month)\\") plt.ylabel(\\"Transaction Count\\") plt.show() def detect_peak_month(group_data): Detect peak shopping months for each country and print alerts. pivot_data = group_data.pivot(index=\'YearMonth\', columns=\'Country\', values=\'TransactionCount\').fillna(0) peak_months = pivot_data.idxmax() for country, peak_month in peak_months.items(): print(f\\"Peak month for {country} is {peak_month}\\") def main(file_path): data = load_and_clean_data(file_path) grouped_data = group_data_by_month_and_country(data) create_transaction_plot(grouped_data) detect_peak_month(grouped_data) if __name__ == \\"__main__\\": main(\'ecommerce_data.csv\')"},{"question":"Create a program in Python that simulates the functioning of a simplified stock market. You need to implement a `StockMarket` class with methods to add a company, buy shares, sell shares, and display the current status of the market. Each company should be represented by its name and current share price. The `StockMarket` class should keep track of the available shares for each company, and update accordingly after each transaction. Additionally, ensure you implement error handling for scenarios such as buying or selling more shares than available. Display the final status of the market in form of a table listing company name, share price, and available shares. ```python class StockMarket: def __init__(self): self.companies = {} def add_company(self, name, share_price, available_shares): # Implement this method to add a new company with its initial share price and number of shares. def buy_shares(self, name, shares): # Implement this method to buy a certain number of shares from a company. def sell_shares(self, name, shares): # Implement this method to sell a certain number of shares from a company. def display_market(self): # Implement this method to display the current status of the market in a table format. # Demonstrate the usage of the StockMarket class. ``` Additionally, provide a test case that adds three companies, performs a series of buy and sell transactions, and displays the final market status.","solution":"class StockMarket: def __init__(self): self.companies = {} def add_company(self, name, share_price, available_shares): if name not in self.companies: self.companies[name] = { \'share_price\': share_price, \'available_shares\': available_shares } def buy_shares(self, name, shares): if name in self.companies: company = self.companies[name] if shares <= company[\'available_shares\']: company[\'available_shares\'] -= shares else: raise ValueError(\\"Not enough shares available to buy.\\") def sell_shares(self, name, shares): if name in self.companies: company = self.companies[name] company[\'available_shares\'] += shares def display_market(self): print(f\\"{\'Company Name\':<20}{\'Share Price\':<15}{\'Available Shares\'}\\") print(\\"=\\"*50) for name, data in self.companies.items(): print(f\\"{name:<20}{data[\'share_price\']:<15}{data[\'available_shares\']}\\")"},{"question":"Write a Python function that generates all possible permutations of a given string. For example, for the input string \\"ABC\\", the function should output [\'ABC\', \'ACB\', \'BAC\', \'BCA\', \'CAB\', \'CBA\'].","solution":"from itertools import permutations def generate_permutations(s): Generates all possible permutations of the input string s. :param s: Input string :return: List of all permutations of the string return [\'\'.join(p) for p in permutations(s)]"},{"question":"Develop a function in Python to implement a simple genetic algorithm based on the following specifications: ```python import random # Sample dataset target = \\"HELLO, WORLD!\\" population_size = 200 mutation_rate = 0.01 generations = 1000 # Genetic Algorithm functions def create_individual(length): # Create random individual with given length return \'\'.join(random.choice(\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ, !\\") for _ in range(length)) def calculate_fitness(individual): # Fitness score based on matching characters with target return sum(t == i for t, i in zip(target, individual)) def mutate(individual): # Mutate randomly according to mutation rate individual = list(individual) for i in range(len(individual)): if random.random() < mutation_rate: individual[i] = random.choice(\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ, !\\") return \'\'.join(individual) def crossover(parent1, parent2): # Single point crossover cross_point = random.randint(0, len(parent1) - 1) return parent1[:cross_point] + parent2[cross_point:] def genetic_algorithm(): # Initialize population population = [create_individual(len(target)) for _ in range(population_size)] for generation in range(generations): # Calculate fitness for population fitness_scores = [calculate_fitness(ind) for ind in population] # Select parents based on fitness selected_individuals = random.choices( population=population, weights=fitness_scores, k=population_size ) # Create new population through crossover and mutation population = [ mutate(crossover(selected_individuals[i], selected_individuals[i+1])) for i in range(0, population_size, 2) ] # Print best individual from current generation best_individual = max(population, key=calculate_fitness) if calculate_fitness(best_individual) == len(target): print(f\\"Solution found in generation {generation}: {best_individual}\\") return best_individual print(f\\"No solution found in {generations} generations. Best guess: {best_individual}\\") return best_individual # Run the genetic algorithm genetic_algorithm() ```","solution":"import random # Sample dataset target = \\"HELLO, WORLD!\\" population_size = 200 mutation_rate = 0.01 generations = 1000 # Genetic Algorithm functions def create_individual(length): # Create random individual with given length return \'\'.join(random.choice(\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ, !\\") for _ in range(length)) def calculate_fitness(individual): # Fitness score based on matching characters with target return sum(t == i for t, i in zip(target, individual)) def mutate(individual): # Mutate randomly according to mutation rate individual = list(individual) for i in range(len(individual)): if random.random() < mutation_rate: individual[i] = random.choice(\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ, !\\") return \'\'.join(individual) def crossover(parent1, parent2): # Single point crossover cross_point = random.randint(0, len(parent1) - 1) return parent1[:cross_point] + parent2[cross_point:] def genetic_algorithm(): # Initialize population population = [create_individual(len(target)) for _ in range(population_size)] for generation in range(generations): # Calculate fitness for population fitness_scores = [calculate_fitness(ind) for ind in population] # Select parents based on fitness selected_individuals = random.choices( population=population, weights=fitness_scores, k=population_size ) # Create new population through crossover and mutation population = [ mutate(crossover(selected_individuals[i], selected_individuals[i+1])) for i in range(0, population_size, 2) ] # Print best individual from current generation best_individual = max(population, key=calculate_fitness) if calculate_fitness(best_individual) == len(target): print(f\\"Solution found in generation {generation}: {best_individual}\\") return best_individual print(f\\"No solution found in {generations} generations. Best guess: {best_individual}\\") return best_individual # Run the genetic algorithm genetic_algorithm()"},{"question":"Create a function that takes a string expression containing only non-negative integers and the operators +, -, *, and / (integer division), and evaluates the expression based on the order of operations (PEMDAS/BODMAS rules). The function should handle the precedence of operators correctly and return the final result as an integer. You may assume that the given expression is well-formed and without any spaces. For example, given the expression \\"3+2*2\\", the function should return 7, and for the expression \\"10-5/5\\", it should return 9.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and operators +, -, *, and /. The function processes the expression according to the order of operations (PEMDAS/BODMAS rules). Parameters: expression (str): A string containing the mathematical expression to evaluate. Returns: int: The result of the evaluated expression. def apply_operator(operands, operator): right = operands.pop() left = operands.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) elif operator == \'/\': operands.append(left // right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operands = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 operands.append(val) i -= 1 elif expression[i] in \\"+-*/\\": while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operands, operators.pop()) operators.append(expression[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"Write a function that takes a list of email addresses and a list of allowed domains and returns a filtered list of email addresses that belong to the allowed domains. Additionally, the function should sort the email addresses alphabetically. Use the email addresses [\\"bob@gmail.com\\", \\"alice@yahoo.com\\", \\"carol@gmail.com\\", \\"dave@hotmail.com\\", \\"eve@gmail.com\\"] and allowed domains [\\"gmail.com\\", \\"hotmail.com\\"] for your function.","solution":"def filter_and_sort_emails(email_addresses, allowed_domains): Filters the email addresses to include only those that belong to the allowed domains and sorts them alphabetically. Parameters: email_addresses (list): A list of email addresses (strings) allowed_domains (list): A list of allowed domains (strings) Returns: list: A list of filtered and sorted email addresses filtered_emails = [email for email in email_addresses if email.split(\'@\')[1] in allowed_domains] return sorted(filtered_emails) # Example usage emails = [\\"bob@gmail.com\\", \\"alice@yahoo.com\\", \\"carol@gmail.com\\", \\"dave@hotmail.com\\", \\"eve@gmail.com\\"] allowed_domains = [\\"gmail.com\\", \\"hotmail.com\\"] print(filter_and_sort_emails(emails, allowed_domains)) # [\\"bob@gmail.com\\", \\"carol@gmail.com\\", \\"dave@hotmail.com\\", \\"eve@gmail.com\\"]"},{"question":"Design a function that takes a list of strings as input, where each string represents a floating-point number. The function should return a tuple containing two elements: 1. The sum of all the floating-point numbers in the list. 2. A list of those floating-point numbers rounded to one decimal place. For example, given the input `[\\"1.234\\", \\"5.678\\", \\"9.1011\\"]`, the output should be `(16.0131, [1.2, 5.7, 9.1])`.","solution":"def process_floats(strings): Takes a list of strings, where each string represents a floating-point number. Returns a tuple containing the sum of all the floating-point numbers, and a list of those floating-point numbers rounded to one decimal place. :param strings: list of strings :return: tuple (sum of floating-point numbers, list of rounded floating-point numbers) floats = [float(s) for s in strings] total_sum = sum(floats) rounded_floats = [round(f, 1) for f in floats] return total_sum, rounded_floats"},{"question":"Formulate a function in Python that, given a string comprising alphanumeric characters, returns a new string wherein each character from the original string is followed by its frequency of occurrence in that string. The function should preserve the order of first occurrences of each character. For example, given the input string \\"aabccdeee\\", the function should return \\"a2b1c2d1e3\\".","solution":"from collections import Counter def char_frequency(s): Returns a new string where each character from the original string is followed by its frequency of occurrence. counter = Counter(s) result = [] for char in s: if char in counter: result.append(f\\"{char}{counter[char]}\\") del counter[char] # Ensures each character is processed only once return \'\'.join(result)"},{"question":"Design a Python function that takes a list of integers and an integer n as input. The function should return a list of lists, where each inner list contains n consecutive elements from the original list. If the number of elements in the original list is not perfectly divisible by n, the last inner list may contain fewer than n elements. Additionally, the function should handle edge cases gracefully, such as an empty list or a non-positive integer for n. Example: ```python def split_list(input_list, n): # Your code here print(split_list([1, 2, 3, 4, 5, 6, 7], 3)) # Output: [[1, 2, 3], [4, 5, 6], [7]] print(split_list([1, 2, 3, 4], 2)) # Output: [[1, 2], [3, 4]] print(split_list([], 2)) # Output: [] print(split_list([1, 2, 3], 0)) # Output: [] ``` This exercise will evaluate your ability to work with list manipulations and handle edge cases in the input data.","solution":"def split_list(input_list, n): Splits the input list into sublists, each of length n. :param input_list: List of integers to be split. :param n: Length of each sublist. :return: List of sublists. if n <= 0: return [] return [input_list[i:i+n] for i in range(0, len(input_list), n)]"},{"question":"Write a function to find the number of unique elements in an unsorted array of integers. Your function should not use any additional data structures such as sets or dictionaries.","solution":"def count_unique_elements(arr): Returns the number of unique elements in an unsorted array. if not arr: return 0 arr_sorted = sorted(arr) unique_count = 1 for i in range(1, len(arr_sorted)): if arr_sorted[i] != arr_sorted[i-1]: unique_count += 1 return unique_count"},{"question":"Write a function to perform matrix rotation. The function should take a square matrix (2D array) and an integer, `k`, representing the number of 90-degree clockwise rotations to perform. The function should return the rotated matrix. If `k` is negative, perform counterclockwise rotations instead. Ensure the function works for both small (e.g., 2x2) and large (e.g., 100x100) matrices. Example: - Input: matrix = [[1, 2], [3, 4]], k = 1 Output: [[3, 1], [4, 2]] - Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], k = -1 Output: [[3, 6, 9], [2, 5, 8], [1, 4, 7]] Note: The provided matrix is always square and non-empty.","solution":"def rotate_matrix(matrix, k): Rotates a square matrix (2D array) k times by 90 degrees clockwise. If k is negative, performs counterclockwise rotations instead. :param matrix: List[List[int]] - A square matrix :param k: int - Number of 90-degree rotations (positive for clockwise, negative for counterclockwise) :return: List[List[int]] - Rotated matrix def rotate_once(mat): Rotates the matrix 90 degrees clockwise once. :param mat: List[List[int]] - A square matrix :return: List[List[int]] - Rotated matrix N = len(mat) rotated = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated[j][N - 1 - i] = mat[i][j] return rotated k = k % 4 # Only 4 unique rotations needed as 4 rotations brings the matrix back to original if k == 0: return matrix if k < 0: k += 4 # Converting negative rotations to positive equivalent rotated_matrix = matrix for _ in range(k): rotated_matrix = rotate_once(rotated_matrix) return rotated_matrix"},{"question":"Given a string of lowercase alphabets, write a function that counts the number of distinct substrings of a given length `k`. The function should return an integer representing the count of these distinct substrings. **Function Signature:** ```python def count_distinct_substrings(s: str, k: int) -> int: pass ``` **Input:** - `s` (0 ≤ |s| ≤ 10^5): A string of lowercase alphabets. - `k` (1 ≤ k ≤ |s|): An integer representing the length of the substrings. **Output:** - An integer representing the number of distinct substrings of length `k`. **Example:** ```python print(count_distinct_substrings(\\"abcabc\\", 3)) # Output: 3 print(count_distinct_substrings(\\"aaaaa\\", 2)) # Output: 1 ``` **Explanation:** In the first example, the distinct substrings of length 3 are \\"abc\\", \\"bca\\", and \\"cab\\". Hence, the function returns 3. In the second example, there is only one distinct substring of length 2, which is \\"aa\\". Hence, the function returns 1.","solution":"def count_distinct_substrings(s: str, k: int) -> int: Counts the number of distinct substrings of length k in the given string s. :param s: A string of lowercase alphabets :param k: An integer representing the length of the substrings :return: An integer representing the count of distinct substrings of length k if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substrings.add(s[i:i+k]) return len(substrings)"},{"question":"Create a function in Python that takes an integer `n` as input and returns a list of the prime numbers less than `n`. Ensure that your function is optimized for performance, using appropriate algorithms to minimize time complexity. Additionally, provide a piece of erroneous sample code relating to this task and a corrected code which fixes the issues present in the erroneous code.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num in range(n) if sieve[num]] # Erroneous sample code def erroneous_prime_list(n): Erroneous method to return list of prime numbers less than n. primes = [] for num in range(2, n): is_prime = all(num % i != 0 for i in range(2, int(num**0.5) + 1)) if is_prime: primes.append(num) return primes # Corrected code def corrected_prime_list(n): Corrected method to return list of prime numbers less than n, using Sieve of Eratosthenes. return sieve_of_eratosthenes(n)"},{"question":"Write a function that simulates a simple inventory management system for a store. The function should support adding items to the inventory and querying the inventory. The function should take a list of commands as input, where each command is represented by a string in one of the following formats: - \\"ADD <item_name> <quantity>\\" - Adds the given quantity of the item to the inventory. The item_name is always a single word, and quantity is always a positive integer. - \\"QUERY <item_name>\\" - Returns the current quantity of the specified item in the inventory. If the item is not found, it returns 0. For example, the input list of commands might be: ```python [\\"ADD apple 10\\", \\"ADD banana 5\\", \\"QUERY apple\\"] ``` The function should output a list of results corresponding to the QUERY commands. In the above example, the output would be: ```python [10] ``` The function should handle edge cases, such as querying an item that has not been added to the inventory or adding items with the same name multiple times. Write the function with the following signature: ```python def manage_inventory(commands: List[str]) -> List[int]: ```","solution":"from typing import List def manage_inventory(commands: List[str]) -> List[int]: inventory = {} results = [] for command in commands: parts = command.split() operation = parts[0] item_name = parts[1] if operation == \\"ADD\\": quantity = int(parts[2]) if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity elif operation == \\"QUERY\\": results.append(inventory.get(item_name, 0)) return results"},{"question":"Write a Python function to determine whether a given integer \'n\' is a prime number. Your implementation should include a helper function, `is_prime(n)`, which returns a boolean value: `True` if `n` is prime and `False` otherwise. The main function should prompt the user to input an integer, use the helper function to check its primality, and print a message indicating whether the number is prime or not. Example: ``` Input: 17 Output: 17 is a prime number. Input: 22 Output: 22 is not a prime number. ```","solution":"def is_prime(n): Determines if the given number n is a prime number. Args: n (int): The number to be checked. Returns: bool: True if n is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Given a non-empty list of integers, you are required to find the range, i.e., the difference between the maximum and minimum values in the list. Write a Python function `calculate_range(numbers)` that takes a list of integers as an argument, and returns the range of the list. Here is the sample function structure for reference: ```python def calculate_range(numbers): # Your code here # Example usage: input_list = [10, 3, 5, 6, 2, 8, 1] print(calculate_range(input_list)) # Output should be 9 ``` Note: - You must not use Python\'s built-in `min` and `max` functions. - The list will always have at least one integer. - Ensure that the function is efficient even for large lists.","solution":"def calculate_range(numbers): Calculate the range of a list of integers (difference between max and min values). if not numbers: return 0 # Return 0 for an empty list (though the problem states list is non-empty) min_val = float(\'inf\') max_val = float(\'-inf\') for number in numbers: if number < min_val: min_val = number if number > max_val: max_val = number return max_val - min_val # Example usage: input_list = [10, 3, 5, 6, 2, 8, 1] print(calculate_range(input_list)) # Output should be 9"},{"question":"Create a function to determine if a given sentence is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once. Your function should ignore case and punctuation, and handle sentences in multiple languages where the concept of a pangram is applicable (such as the modern Latin alphabet for non-English languages). The program should also be robust enough to handle empty strings and strings with special characters. Example input: \'The quick brown fox jumps over the lazy dog.\' Output: True","solution":"import string def is_pangram(sentence): Determines if a given sentence is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once. Args: sentence (str): The sentence to be checked. Returns: bool: True if the sentence is a pangram, False otherwise. alphabet = set(string.ascii_lowercase) sentence_letters = set(c.lower() for c in sentence if c.isalpha()) return alphabet.issubset(sentence_letters)"},{"question":"Given two strings, determine if one string is a permutation of the other. The function should return true if the strings are permutations of each other and false otherwise. For example, if the strings are \\"abc\\" and \\"bca\\", the function should return true. However, for the strings \\"abc\\" and \\"abd\\", the function should return false. Consider edge cases such as strings of different lengths or empty strings.","solution":"def are_permutations(str1, str2): Determines if two strings are permutations of each other. # If the lengths of the strings are different, they cannot be permutations if len(str1) != len(str2): return False # Sort the characters in both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Implement a function that checks whether a given binary tree is a valid binary search tree (BST). A BST is defined as follows: the left subtree of a node contains only nodes with keys less than the node\'s key, the right subtree of a node contains only nodes with keys greater than the node\'s key, and both left and right subtrees must also be binary search trees. Your function should take the root of the binary tree and return a boolean indicating whether the tree is a valid BST. Example: ``` # Structure of the tree # 2 # / # 1 3 root = TreeNode(2) root.left = TreeNode(1) root.right = TreeNode(3) is_valid_bst(root) # Output: True # Structure of the tree # 5 # / # 1 4 # / # 3 6 root = TreeNode(5) root.left = TreeNode(1) root.right = TreeNode(4) root.right.left = TreeNode(3) root.right.right = TreeNode(6) is_valid_bst(root) # Output: False ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root): Checks whether the given binary tree is a valid binary search tree (BST). def validate(node, low=float(\'-inf\'), high=float(\'inf\')): if not node: return True if not (low < node.val < high): return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"Write the function \\"shift_and_count\\" that takes a list of integers `lst` and an integer `shift`. This function should shift the elements of `lst` to the right by `shift` positions. Elements that are shifted out of the end of the list should reappear at the beginning. After shifting, the function should return the number of even numbers in the shifted list. For example: - shift_and_count([1, 2, 3, 4, 5, 6], 2) should return 3, because the shifted list is [5, 6, 1, 2, 3, 4] and there are three even numbers (6, 2, and 4). - shift_and_count([7, 8, 9, 10], 1) should return 2, because the shifted list is [10, 7, 8, 9] and there are two even numbers (10 and 8). - shift_and_count([], 3) should return 0, because the shifted list is empty hence there are no even numbers. Here\'s your code to accomplish: ```python from typing import List def shift_and_count(lst: List[int], shift: int) -> int: 將列表 `lst` 的元素右移 `shift` 位，並返回右移後列表中的偶數個數。 >>> shift_and_count([1, 2, 3, 4, 5, 6], 2) 3 >>> shift_and_count([7, 8, 9, 10], 1) 2 >>> shift_and_count([], 3) 0 if not lst: return 0 shift = shift % len(lst) # Handle case when shift is larger than the list length shifted_lst = lst[-shift:] + lst[:-shift] return len([num for num in shifted_lst if num % 2 == 0]) ```","solution":"from typing import List def shift_and_count(lst: List[int], shift: int) -> int: Shifts the elements of the list `lst` to the right by `shift` positions. Returns the count of even numbers in the shifted list. >>> shift_and_count([1, 2, 3, 4, 5, 6], 2) 3 >>> shift_and_count([7, 8, 9, 10], 1) 2 >>> shift_and_count([], 3) 0 if not lst: return 0 shift = shift % len(lst) # Handle case when shift is larger than the list length shifted_lst = lst[-shift:] + lst[:-shift] return len([num for num in shifted_lst if num % 2 == 0])"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the even numbers, but in reverse order. Name your function `filter_and_reverse_evens(nums: List[int]) -> List[int]`.","solution":"from typing import List def filter_and_reverse_evens(nums: List[int]) -> List[int]: Returns a list of even numbers in reverse order from the input list of integers. evens = [num for num in nums if num % 2 == 0] return evens[::-1]"},{"question":"Implement a class structure to manage a library system. The system should include the following classes: \\"Book\\", \\"Member\\", \\"Librarian\\", and \\"Library\\". Ensure that each class has the necessary attributes and methods as outlined below: - \\"Book\\" class should contain: - Attributes: title, author, id, and a status indicating if the book is available or borrowed. - Methods: borrow_book(member_id), return_book(), and a method to represent the book\'s information as a string. - \\"Member\\" class should contain: - Attributes: name, member_id, and a list of borrowed books. - Methods: borrow(book_id), return_book(book_id), and a method to represent the member\'s information as a string. - \\"Librarian\\" class should contain: - Attributes: name, librarian_id, and a list of managed members. - Methods: add_book(book), remove_book(book_id), add_member(member), remove_member(member_id), and a method to represent the librarian\'s information as a string. - \\"Library\\" class should contain: - Attributes: list of books, list of members, and a librarian. - Methods: search_book(title), search_member(name), and a method to represent the library\'s information as a string. Additionally, provide functionality to: - Allow a \\"Librarian\\" to add or remove \\"Books\\" and \\"Members\\" from the \\"Library\\". - Ensure that a \\"Member\\" can borrow or return a \\"Book\\" from the \\"Library\\". - Provide methods to get a list of all available books, borrowed books, and books borrowed by a specific member. Note: Ensure to handle all necessary exceptions and edge cases. Provide proper documentation of the methods and structure of your classes.","solution":"class Book: def __init__(self, title, author, book_id): self.title = title self.author = author self.book_id = book_id self.is_available = True def borrow_book(self, member_id): if self.is_available: self.is_available = False return True return False def return_book(self): self.is_available = True def __str__(self): return f\\"Book ID: {self.book_id}, Title: {self.title}, Author: {self.author}, Status: {\'Available\' if self.is_available else \'Borrowed\'}\\" class Member: def __init__(self, name, member_id): self.name = name self.member_id = member_id self.borrowed_books = [] def borrow(self, book): if book.borrow_book(self.member_id): self.borrowed_books.append(book.book_id) return True return False def return_book(self, book): if book.book_id in self.borrowed_books: book.return_book() self.borrowed_books.remove(book.book_id) return True return False def __str__(self): return f\\"Member ID: {self.member_id}, Name: {self.name}, Borrowed Books: {self.borrowed_books}\\" class Librarian: def __init__(self, name, librarian_id): self.name = name self.librarian_id = librarian_id self.managed_members = [] def add_book(self, library, book): library.books.append(book) def remove_book(self, library, book_id): library.books = [book for book in library.books if book.book_id != book_id] def add_member(self, library, member): library.members.append(member) def remove_member(self, library, member_id): library.members = [member for member in library.members if member.member_id != member_id] def __str__(self): return f\\"Librarian ID: {self.librarian_id}, Name: {self.name}, Managed Members: {len(self.managed_members)}\\" class Library: def __init__(self, librarian): self.books = [] self.members = [] self.librarian = librarian def search_book(self, title): return [book for book in self.books if book.title.lower() == title.lower()] def search_member(self, name): return [member for member in self.members if member.name.lower() == name.lower()] def list_available_books(self): return [book for book in self.books if book.is_available] def list_borrowed_books(self): return [book for book in self.books if not book.is_available] def list_books_borrowed_by_member(self, member_id): for member in self.members: if member.member_id == member_id: return member.borrowed_books return [] def __str__(self): return f\\"Library: {len(self.books)} Books, {len(self.members)} Members, Librarian: {self.librarian.name}\\""},{"question":"Create a recursive function to solve the Tower of Hanoi problem for `N` disks. The function should output the steps required to move all disks from the source rod to the destination rod using an auxiliary rod. The initial call should be made with `source`, `destination`, and `auxiliary` rods named as `A`, `C`, and `B` respectively. Lastly, display the total number of moves performed.","solution":"def tower_of_hanoi(n, source=\'A\', destination=\'C\', auxiliary=\'B\'): Solves the Tower of Hanoi problem for `n` disks. Parameters: n (int): Number of disks. source (str): The name of the source rod. destination (str): The name of the destination rod. auxiliary (str): The name of the auxiliary rod. Returns: List[Tuple[str, str]]: A list of tuples representing the steps to move the disks from the source rod to the destination rod. steps = [] def move_disks(n, source, destination, auxiliary): if n == 1: steps.append((source, destination)) return move_disks(n-1, source, auxiliary, destination) steps.append((source, destination)) move_disks(n-1, auxiliary, destination, source) move_disks(n, source, destination, auxiliary) return steps def count_moves(n): Computes the total number of moves needed to solve the Tower of Hanoi problem for `n` disks. Parameters: n (int): Number of disks. Returns: int: The total number of moves needed. return (2 ** n) - 1"},{"question":"Write a function `find_unique_substrings(s: str, k: int) -> list` that returns a list of all unique substrings of length `k` from the given string `s`. The substrings should be unique and listed in the order they first appeared in the original string. Ensure the function handles edge cases such as when `k` is greater than the length of `s` or when `s` is an empty string. **Function Signature:** ```python def find_unique_substrings(s: str, k: int) -> list: pass ``` **Example:** ```python find_unique_substrings(\\"abac\\", 2) -> [\\"ab\\", \\"ba\\", \\"ac\\"] find_unique_substrings(\\"aaa\\", 1) -> [\\"a\\"] find_unique_substrings(\\"abcd\\", 3) -> [\\"abc\\", \\"bcd\\"] find_unique_substrings(\\"abc\\", 4) -> [] find_unique_substrings(\\"\\", 2) -> [] ```","solution":"def find_unique_substrings(s: str, k: int) -> list: Finds all unique substrings of length k from the given string s. The substrings are listed in the order they first appeared in s. Parameters: s (str): The input string. k (int): The length of the substrings. Returns: list: A list of unique substrings of length k. if k > len(s) or k <= 0: return [] unique_substrings = set() result = [] for i in range(len(s) - k + 1): substring = s[i:i+k] if substring not in unique_substrings: unique_substrings.add(substring) result.append(substring) return result"},{"question":"Design a function that, given an integer n, returns the list of all unique pairs (a, b) where a and b are positive integers such that a * b = n. The list should be sorted by the value of a. Ensure that your solution does not use Python\'s built-in set datatype and consider edge cases such as very large or very small values of n. def find_pairs(n: int): Return a sorted list of unique pairs (a, b) where a * b = n. >>> find_pairs(12) [(1, 12), (2, 6), (3, 4)] >>> find_pairs(28) [(1, 28), (2, 14), (4, 7)] >>> find_pairs(1) [(1, 1)] >>> find_pairs(9) [(1, 9), (3, 3)]","solution":"def find_pairs(n: int): Return a sorted list of unique pairs (a, b) where a * b = n. >>> find_pairs(12) [(1, 12), (2, 6), (3, 4)] >>> find_pairs(28) [(1, 28), (2, 14), (4, 7)] >>> find_pairs(1) [(1, 1)] >>> find_pairs(9) [(1, 9), (3, 3)] pairs = [] for a in range(1, int(n ** 0.5) + 1): if n % a == 0: b = n // a pairs.append((a, b)) return pairs"},{"question":"Write a Python function `word_frequency` that takes a list of strings and returns a dictionary with each unique word as the key and the number of times it appears as the value. Ensure the function handles case sensitivity (i.e., \\"Word\\" and \\"word\\" should be considered the same word). For extra credit, modify the function to ignore common English stop words (e.g., \\"the\\", \\"is\\", \\"in\\"). Provide appropriate test cases to demonstrate your function works correctly.","solution":"from collections import defaultdict import re def word_frequency(words, ignore_stop_words=True): Returns a dictionary with each unique word as the key and the number of times it appears as the value. Ignores common English stop words if ignore_stop_words is True. # List of common English stop words stop_words = {\'the\', \'is\', \'in\', \'and\', \'or\', \'an\', \'a\', \'of\', \'to\', \'it\', \'that\', \'on\', \'for\', \'with\', \'as\', \'by\', \'at\', \'from\'} # Collect all words in a single string and normalize to lower case text = \' \'.join(words).lower() # Remove punctuation text = re.sub(r\'[^ws]\', \'\', text) # Split text into words word_list = text.split() # Use a defaultdict for counting words frequency = defaultdict(int) for word in word_list: if ignore_stop_words and word in stop_words: continue frequency[word] += 1 return dict(frequency)"},{"question":"You are designing a simple application where users can rate items between 1 to 5 stars. The application should calculate the average rating for each item based on individual user ratings. Each user\'s rating for an item is collected in a list of tuples, where each tuple represents an item and the rating given by a user. The ratings should be rounded to one decimal place. Write a function `average_ratings()` that takes a list of tuples containing item names and corresponding user ratings, and returns a dictionary where the keys are item names and the values are the average rating for each item rounded to one decimal place. Example: ```python def average_ratings(ratings): # Your code here # Example input ratings = [ (\'item1\', 4), (\'item2\', 5), (\'item2\', 3), (\'item1\', 5), (\'item3\', 2), (\'item2\', 4) ] # Calling the function print(average_ratings(ratings)) ``` Expected output: ```python { \'item1\': 4.5, \'item2\': 4.0, \'item3\': 2.0 } ```","solution":"def average_ratings(ratings): Calculate the average rating for each item based on individual user ratings. Args: ratings (list of tuples): A list where each tuple contains an item name and a rating. Returns: dict: A dictionary where keys are item names and values are the average rating for each item rounded to one decimal place. from collections import defaultdict ratings_dict = defaultdict(list) for item, rating in ratings: ratings_dict[item].append(rating) average_rating_dict = {} for item, rating_list in ratings_dict.items(): average_rating_dict[item] = round(sum(rating_list) / len(rating_list), 1) return average_rating_dict"},{"question":"Implement a function that checks if a string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type. Your function should be able to handle edge cases such as an empty string, strings with none of the bracket characters, and strings that have interleaved unrelated characters. It should also be able to handle large input strings efficiently, ensuring that the time complexity is within acceptable limits. Additionally, ensure the solution is capable of managing nested structures correctly without running into stack overflow or excessive memory usage errors. Write the function in a preferred programming language, ensuring it considers case sensitivity and correctly processes Unicode characters and escape sequences.","solution":"def is_valid(s): Check if the input string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. stack = [] mapping = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in mapping: # if the character is a closing bracket top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: # if the character is an opening bracket stack.append(char) return not stack"},{"question":"Given an `n` x `n` matrix filled with integers, write a function to calculate the sum of the elements in the upper triangular part of the matrix (the area on and above the leading diagonal) and the lower triangular part of the matrix (the area on and below the leading diagonal). Your function should return a tuple containing these two sums. Ensure your solution handles matrices of sizes up to 100 x 100 efficiently. **Example:** For the matrix: ``` 1 2 3 4 5 6 7 8 9 ``` The upper triangular part is: ``` 1 2 3 5 6 9 ``` Sum = 1 + 2 + 3 + 5 + 6 + 9 = 26 The lower triangular part is: ``` 1 4 5 7 8 9 ``` Sum = 1 + 4 + 5 + 7 + 8 + 9 = 34 **Function Signature:** ```python def triangular_sums(matrix: List[List[int]]) -> Tuple[int, int]: pass ``` **Input/Output:** - Input: A list of lists of integers where the inner lists represent rows of the matrix. - Output: A tuple of two integers representing the sums of the upper and lower triangular parts, respectively.","solution":"from typing import List, Tuple def triangular_sums(matrix: List[List[int]]) -> Tuple[int, int]: n = len(matrix) upper_sum = 0 lower_sum = 0 for i in range(n): for j in range(n): if i <= j: upper_sum += matrix[i][j] if i >= j: lower_sum += matrix[i][j] return (upper_sum, lower_sum)"},{"question":"Design a function in Python named `balance_brackets` that takes a single string argument containing various types of brackets (i.e., `()`, `{}`, `[]`). The function should return `True` if all the brackets are balanced (i.e., every opening bracket has a corresponding closing bracket in the appropriate order), and `False` otherwise. Additionally, implement error handling to manage inputs that are not of string type or contain characters other than the designated brackets.","solution":"def balance_brackets(s): Returns True if all types of brackets in the string s are balanced, and False otherwise. if not isinstance(s, str): raise TypeError(\\"Input should be a string.\\") brackets = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} open_brackets = set(brackets.keys()) close_brackets = set(brackets.values()) stack = [] for char in s: if char in open_brackets: stack.append(char) elif char in close_brackets: if not stack or brackets[stack.pop()] != char: return False else: raise ValueError(\\"Input string should contain only brackets.\\") return not stack"},{"question":"Context You are a software developer tasked with creating a library management system for a small community library. The goal is to implement core features that will facilitate the basic operations of the library. The constraint is that the system must be efficient and easy to use, considering the limited technical expertise of the library staff. Requirements Design a class `Library` that can be used to manage books and patrons. The class should include methods to add books, remove books, check out books, and return books. Each book should be represented as an instance of a `Book` class, and each patron should be represented as an instance of a `Patron` class. # Implementation: 1. **Book Class**: - Attributes: - `title`: The title of the book (string). - `author`: The author of the book (string). - `ISBN`: The International Standard Book Number (ISBN) of the book (string). - `available`: A boolean indicating whether the book is available for checkout (initially `True`). - Methods: - `__init__(self, title, author, ISBN)`: Constructor method to initialize the book instance. - `__str__(self)`: Method to return a string representation of the book. 2. **Patron Class**: - Attributes: - `name`: The name of the patron (string). - `card_number`: The unique library card number of the patron (string). - `checked_out_books`: A list of books currently checked out by the patron. - Methods: - `__init__(self, name, card_number)`: Constructor method to initialize the patron instance. - `__str__(self)`: Method to return a string representation of the patron. 3. **Library Class**: - Attributes: - `books`: A list of books in the library. - `patrons`: A list of library patrons. - Methods: - `__init__(self)`: Constructor method to initialize the library instance. - `add_book(self, book)`: Method to add a book instance to the library. - `remove_book(self, ISBN)`: Method to remove a book from the library by its ISBN. - `add_patron(self, patron)`: Method to add a patron to the library. - `check_out_book(self, ISBN, card_number)`: Method to check out a book to a patron. - `return_book(self, ISBN, card_number)`: Method to return a book to the library. Example Use Case: ```python # Creating books book1 = Book(\\"1984\\", \\"George Orwell\\", \\"1234567890\\") book2 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", \\"2345678901\\") # Creating patrons patron1 = Patron(\\"Alice\\", \\"LIB001\\") patron2 = Patron(\\"Bob\\", \\"LIB002\\") # Creating a library and adding books/patrons library = Library() library.add_book(book1) library.add_book(book2) library.add_patron(patron1) library.add_patron(patron2) # Checking out and returning books library.check_out_book(\\"1234567890\\", \\"LIB001\\") library.return_book(\\"1234567890\\", \\"LIB001\\") ``` Requirements: 1. Implement the `Book`, `Patron`, and `Library` classes as described. 2. Ensure that edge cases (e.g., checking out a non-existent book, returning a book not checked out) are handled gracefully. 3. Provide meaningful error messages where appropriate (e.g., \\"Book not found\\", \\"Patron not found\\"). Your task is to write the complete implementation for the described classes and ensure the example use case works as expected.","solution":"class Book: def __init__(self, title, author, ISBN): Initialize the book with title, author, and ISBN. The book is initially marked as available for checkout. self.title = title self.author = author self.ISBN = ISBN self.available = True def __str__(self): Return a string representation of the book. return f\\"{self.title} by {self.author} (ISBN: {self.ISBN}), Available: {self.available}\\" class Patron: def __init__(self, name, card_number): Initialize the patron with name and card number. The patron initially has no books checked out. self.name = name self.card_number = card_number self.checked_out_books = [] def __str__(self): Return a string representation of the patron. return f\\"Patron: {self.name}, Card Number: {self.card_number}, Checked Out Books: {len(self.checked_out_books)}\\" class Library: def __init__(self): Initialize the library with empty lists of books and patrons. self.books = [] self.patrons = [] def add_book(self, book): Add a book instance to the library. self.books.append(book) def remove_book(self, ISBN): Remove a book from the library by its ISBN. for book in self.books: if book.ISBN == ISBN: self.books.remove(book) return raise ValueError(\\"Book not found\\") def add_patron(self, patron): Add a patron to the library. self.patrons.append(patron) def check_out_book(self, ISBN, card_number): Check out a book to a patron using the book\'s ISBN and the patron\'s card number. book = next((b for b in self.books if b.ISBN == ISBN), None) patron = next((p for p in self.patrons if p.card_number == card_number), None) if book is None: raise ValueError(\\"Book not found\\") if patron is None: raise ValueError(\\"Patron not found\\") if not book.available: raise ValueError(\\"Book is already checked out\\") book.available = False patron.checked_out_books.append(book) def return_book(self, ISBN, card_number): Return a book to the library using the book\'s ISBN and the patron\'s card number. book = next((b for b in self.books if b.ISBN == ISBN), None) patron = next((p for p in self.patrons if p.card_number == card_number), None) if book is None: raise ValueError(\\"Book not found\\") if patron is None: raise ValueError(\\"Patron not found\\") if book.available: raise ValueError(\\"Book was not checked out\\") if book not in patron.checked_out_books: raise ValueError(\\"This patron did not check out this book\\") book.available = True patron.checked_out_books.remove(book)"},{"question":"Design a Python function that reads a list of student records from a CSV file, calculates each student\'s average grade, and then saves the results to a new CSV file with an additional column \'Average Grade\'. Input CSV File Columns: \'Student ID\', \'Name\', \'Math\', \'Science\', \'English\' Output CSV File Columns: \'Student ID\', \'Name\', \'Math\', \'Science\', \'English\', \'Average Grade\'","solution":"import csv def calculate_average_grade(input_csv, output_csv): Reads a list of student records from a CSV file, calculates each student\'s average grade, and then saves the results to a new CSV file with an additional column \'Average Grade\'. Parameters: input_csv (str): The input CSV file path. output_csv (str): The output CSV file path. student_records = [] # Read the student records from the input CSV file with open(input_csv, mode=\'r\', newline=\'\') as infile: reader = csv.DictReader(infile) for row in reader: math = float(row[\'Math\']) science = float(row[\'Science\']) english = float(row[\'English\']) average_grade = (math + science + english) / 3 row[\'Average Grade\'] = round(average_grade, 2) student_records.append(row) # Write the updated student records to the output CSV file with open(output_csv, mode=\'w\', newline=\'\') as outfile: fieldnames = reader.fieldnames + [\'Average Grade\'] writer = csv.DictWriter(outfile, fieldnames=fieldnames) writer.writeheader() writer.writerows(student_records)"},{"question":"Given a list of unique integers, find all the possible subsets of the list. Each subset should be sorted in ascending order, and the subsets themselves should also be arranged in ascending order based on their lexicographic order. integers = [1, 2, 3]","solution":"from itertools import combinations def find_subsets(integers): Given a list of unique integers, find all the possible subsets of the list. Each subset should be sorted in ascending order, and the subsets themselves should also be arranged in ascending order based on their lexicographic order. :param integers: List of unique integers :return: List of subsets sorted as described integers.sort() subsets = [] for i in range(len(integers) + 1): for combo in combinations(integers, i): subsets.append(list(combo)) return subsets"},{"question":"In the context of a movie recommendation system, implement a function that takes a user\'s watch history (a list of movie IDs) and suggests other movies they might like. Utilize the given movie similarity dataset, where each entry contains a pair of movie IDs and a similarity score ranging from 0 to 1. The function should return a list of recommended movie IDs based on the highest aggregated similarity scores with the user\'s watch history. Assume movies already watched by the user should not be recommended again. Describe any assumptions made and ensure the function is optimized for performance.","solution":"from collections import defaultdict from heapq import nlargest def recommend_movies(watch_history, similarity_data, top_n=5): Recommends movies based on the user\'s watch history and provided movie similarity data. Args: - watch_history (list of int): A list of movie IDs the user has watched. - similarity_data (list of tuples): A list of (movie_id_1, movie_id_2, similarity_score). - top_n (int): The number of top recommendations to return. Returns: - List of recommended movie IDs. similarity_scores = defaultdict(float) for movie_id_1, movie_id_2, score in similarity_data: if movie_id_1 in watch_history and movie_id_2 not in watch_history: similarity_scores[movie_id_2] += score elif movie_id_2 in watch_history and movie_id_1 not in watch_history: similarity_scores[movie_id_1] += score recommended_movies = nlargest(top_n, similarity_scores, key=similarity_scores.get) return recommended_movies"},{"question":"Write a function that takes an integer `n` (where `n >= 2`) and generates an `n x n` matrix filled with random integers between 1 and 50. Ensure that the numbers in each column are in ascending order. After generating the matrix, write a function to rotate the matrix 90 degrees clockwise. Provide the Python code to implement these functionalities.","solution":"import random def generate_matrix(n): Generates an n x n matrix filled with random integers between 1 and 50 with each column in ascending order. matrix = [] for _ in range(n): col = sorted(random.randint(1, 50) for _ in range(n)) matrix.append(col) # Transpose the columns into the correct form transposed_matrix = [[matrix[j][i] for j in range(n)] for i in range(n)] return transposed_matrix def rotate_matrix_90_degrees(matrix): Rotates the given matrix 90 degrees clockwise. n = len(matrix) rotated_matrix = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)] return rotated_matrix"},{"question":"Create a Python function that takes a list of integers and an integer target sum. The function should return a tuple of two distinct indices whose corresponding values add up to the target sum. If no such indices exist, return `None`. Assume that each input would have exactly one solution, and you may not use the same element twice. Example: ```python nums = [8, 2, 7, 11] target = 9 ``` Output: ```python (1, 2) # Because nums[1] + nums[2] = 2 + 7 = 9. ```","solution":"def two_sum(nums, target): Returns a tuple of two distinct indices whose corresponding values add up to the target sum. Arguments: nums -- list of integers target -- target integer sum Returns: A tuple of two indices if found, else None. lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return (lookup[complement], i) lookup[num] = i return None"},{"question":"Devise a programming algorithm that takes a string composed of letters and numbers and sorts the letters alphabetically while keeping the numbers in their original positions. Example input: \\"4h3e5l2l1o\\" Output: \\"4e3h5l2l1o\\"","solution":"def sort_letters_keep_numbers(input_str): Sorts the letters alphabetically while keeping the numbers in their original positions. Parameters: input_str (str): The input string containing both letters and numbers. Returns: str: A string with letters sorted alphabetically and numbers in their original positions. letters = sorted([char for char in input_str if char.isalpha()]) result = list(input_str) letter_index = 0 for i, char in enumerate(input_str): if char.isalpha(): result[i] = letters[letter_index] letter_index += 1 return \'\'.join(result)"},{"question":"Given a list of unsorted integers, write a Python function that sorts the list in ascending order but only sorts the odd numbers while leaving the even numbers in their original positions. For example, given the list `[5, 3, 2, 8, 1, 4]`, the function should return `[1, 3, 2, 8, 5, 4]`. If the list is empty, return an empty list. Implement your function with the example provided to verify its correctness. ```python def sort_odd_numbers(arr): odds = sorted([x for x in arr if x % 2 != 0]) result = [] odd_index = 0 for x in arr: if x % 2 == 0: result.append(x) else: result.append(odds[odd_index]) odd_index += 1 return result # Test the function with the provided example print(sort_odd_numbers([5, 3, 2, 8, 1, 4])) # Output should be [1, 3, 2, 8, 5, 4] ```","solution":"def sort_odd_numbers(arr): odds = sorted([x for x in arr if x % 2 != 0]) result = [] odd_index = 0 for x in arr: if x % 2 == 0: result.append(x) else: result.append(odds[odd_index]) odd_index += 1 return result"},{"question":"Implement a function in Python that takes a string as input and returns the length of the longest substring that contains exactly two different characters. Substrings with more than two different characters should not be considered. The function should be efficient even for long input strings. Function signature: ```python def longest_two_char_substring(s: str) -> int: This function calculates the length of the longest substring of the input which consists of exactly two distinct characters. longest_two_char_substring(\\"eceba\\") == 3 # \\"ece\\" longest_two_char_substring(\\"ccaabbb\\") == 5 # \\"aabbb\\" longest_two_char_substring(\\"abaccc\\") == 4 # \\"abac\\" args: s : str : The input string returns: int : Length of the longest substring with exactly two distinct characters ```","solution":"def longest_two_char_substring(s: str) -> int: This function calculates the length of the longest substring of the input which consists of exactly two distinct characters. n = len(s) if n < 2: return 0 left = 0 max_len = 0 char_count = {} for right in range(n): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == 2: max_len = max(max_len, right - left + 1) return max_len"},{"question":"Devise a Python function to determine if a given string is a valid IPv4 address. An IPv4 address is valid if it consists of four integers (ranging from 0 to 255) separated by periods. Implement this function using a single-pass approach without using regular expressions. The function should return `True` if the provided string is a valid IPv4 address, otherwise `False`.","solution":"def is_valid_ipv4_address(ip): Determines if a given string is a valid IPv4 address. Parameters: ip (str): The string to be verified as an IPv4 address. Returns: bool: True if the string is a valid IPv4 address, otherwise False. parts = ip.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False if part != str(num): return False return True"},{"question":"Design a hash map that handles collisions using separate chaining with linked lists. Implement functions to insert, delete, and search for keys, ensuring each operation is efficient.","solution":"class ListNode: Node for the linked list used in separate chaining. def __init__(self, key=None, value=None): self.key = key self.value = value self.next = None class HashMap: def __init__(self, size=1000): self.size = size self.table = [None] * self.size def _hash(self, key): Hash function to map keys to bucket indices. return hash(key) % self.size def insert(self, key, value): Insert a key-value pair into the hash map. index = self._hash(key) if self.table[index] is None: self.table[index] = ListNode(key, value) else: current = self.table[index] while current: if current.key == key: current.value = value # Update the value if key already exists return if current.next is None: break current = current.next current.next = ListNode(key, value) def delete(self, key): Remove a key-value pair from the hash map if it exists. index = self._hash(key) current = self.table[index] if current is None: return if current.key == key: self.table[index] = current.next return prev = None while current: if current.key == key: prev.next = current.next return prev = current current = current.next def search(self, key): Search for a value by its key in the hash map. index = self._hash(key) current = self.table[index] while current: if current.key == key: return current.value current = current.next return None"},{"question":"Create a scalable microservices architecture using Node.js and Docker. The architecture should consist of at least three distinct services (e.g., user service, product service, and order service). Ensure each service has its own database and can interact with each other through RESTful APIs. Deploy the services using Docker containers managed by Kubernetes. Implement appropriate logging and monitoring solutions to maintain the health of the application. Additionally, secure the microservices with API gateway and JWT-based authentication, ensuring that all components integrate smoothly while maintaining scalability and fault tolerance.","solution":"# The solution will focus on a simplified Python representation of how you might organize your microservices architecture # and the components involved. We will not implement the entire solution which includes setting up Node.js, Docker, and Kubernetes, # but we will outline how such a setup can be organized. # For simplicity, we will write the main logic of each service in Python, even though in a real-world scenario # you would write them in Node.js. This will help in demonstrating the core structure. # Please note that writing the actual Docker and Kubernetes files requires quite a bit of infrastructure setup, # which we will represent as descriptive placeholders. def user_service(): Simulate User Service return \\"User Service Running\\" def product_service(): Simulate Product Service return \\"Product Service Running\\" def order_service(): Simulate Order Service return \\"Order Service Running\\" if __name__ == \\"__main__\\": print(user_service()) print(product_service()) print(order_service()) # In a real-world scenario, each of these services would be separate projects with their own database connections, # RESTful API endpoints, Dockerfiles for containerization, and YAML files for Kubernetes deployment. # The overall architecture would use: # 1. Node.js for implementing each microservice. # 2. Docker to containerize each microservice. # 3. Kubernetes to orchestrate and manage the containers. # 4. Prometheus for monitoring and logging. # 5. An API Gateway (e.g., Kong, NGINX) for routing traffic and handling JWT-based authentication."},{"question":"You are given the `root` of a binary tree. Your task is to return the level order traversal of its nodes\' values (i.e., from left to right, level by level). This problem requires you to traverse the nodes of the binary tree in a breadth-first manner and return the list of node values level by level. Example 1: Given Input: `root = [3,9,20,null,null,15,7]` Expected Output: `[[3], [9, 20], [15, 7]]` Example 2: Given Input: `root = [1]` Expected Output: `[[1]]` Example 3: Given Input: `root = []` Expected Output: `[]` The constraints to consider: - The number of nodes in the tree falls within the range `[0, 2000]`. - `-1000 <= Node.val <= 1000` Try optimizing your solution in terms of time and space complexity.","solution":"from collections import deque # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def levelOrder(root): Returns the level order traversal of node values of a binary tree. result = [] if not root: return result queue = deque([root]) while queue: level_size = len(queue) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(current_level) return result"},{"question":"Write a function that accepts a list of integers and returns a list of the same integers but with all prime numbers replaced by their immediate next higher prime number. This task requires a good understanding of both prime number validation and list manipulation: def replace_with_next_prime(lst): This function should replace each prime number in the list with the next higher prime number. Example: replace_with_next_prime([2, 3, 5, 8, 13, 17]) returns [3, 5, 7, 8, 17, 19] replace_with_next_prime([11, 14, 15, 16, 19]) returns [13, 14, 15, 16, 23] replace_with_next_prime([1, 4, 6, 7, 18]) returns [1, 4, 6, 11, 18]","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def next_prime(n): Helper function to find the next prime number greater than n. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate def replace_with_next_prime(lst): This function replaces each prime number in the list with the next higher prime number. return [next_prime(x) if is_prime(x) else x for x in lst]"},{"question":"Write a function that takes a string as input and returns the first non-repeating character. If all characters are repeating, return a message indicating that. Consider case sensitivity.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters are repeating, returns a message indicating that. Consider case sensitivity. char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \\"All characters are repeating\\""},{"question":"Create a program that simulates a booking system for a small conference room. The system should allow users to book the room for specific time slots throughout a day. Implement functionality to check for available time slots, book a slot if it\'s available, and cancel an existing booking. Ensure that there are no overlapping bookings, and the system can handle multiple users trying to book or cancel simultaneously. The program should also allow querying the schedule for a particular day to view all bookings.","solution":"class ConferenceRoomBooking: def __init__(self): # Dictionary to hold bookings, keyed by day. self.bookings = {} def is_available(self, day, start_time, end_time): Check if the time slot is available on the given day. if day not in self.bookings: return True for booking in self.bookings[day]: if not (end_time <= booking[0] or start_time >= booking[1]): return False return True def book_slot(self, day, start_time, end_time): Book a slot if it\'s available. if self.is_available(day, start_time, end_time): if day not in self.bookings: self.bookings[day] = [] self.bookings[day].append((start_time, end_time)) return True return False def cancel_booking(self, day, start_time, end_time): Cancel a booking if it exists. if day in self.bookings: if (start_time, end_time) in self.bookings[day]: self.bookings[day].remove((start_time, end_time)) return True return False def get_schedule(self, day): Get all bookings for the given day. return self.bookings[day] if day in self.bookings else []"},{"question":"Implement a function that takes a list of strings representing mathematical expressions and evaluates each expression to produce the result. The function should handle basic arithmetic operations: addition, subtraction, multiplication, and division. Ensure the function appropriately handles any potential division by zero errors by returning `None` for such cases. def evaluate_expressions(expressions): Given a list of strings expressions, each string contains a basic arithmetic expression. The function should evaluate each expression and return a list of results. If any expression involves a division by zero, return None for that specific expression. Example: >>> evaluate_expressions([\\"2 + 3\\", \\"4 * 5\\", \\"10 / 2\\", \\"8 - 3\\"]) == [5, 20, 5.0, 5] >>> evaluate_expressions([\\"2 + 3\\", \\"4 / 0\\", \\"10 * 2\\"]) == [5, None, 20] >>> evaluate_expressions([]) == []","solution":"def evaluate_expressions(expressions): Given a list of strings expressions, each string contains a basic arithmetic expression. The function should evaluate each expression and return a list of results. If any expression involves a division by zero, return None for that specific expression. Parameters: expressions (list of str): List containing mathematical expressions as strings. Returns: list: List of results of the evaluated expressions. For divisions by zero, return None. results = [] for expr in expressions: try: result = eval(expr, {\\"__builtins__\\": None}, {}) results.append(result) except ZeroDivisionError: results.append(None) except: results.append(None) # To handle any other potential evaluation error return results"},{"question":"Write a function that takes a list of strings as input and returns a dictionary where the keys are the unique strings from the list and the values are the number of times each string appears in the list. Ensure your function efficiently handles lists with a large number of strings and accounts for case sensitivity.","solution":"from collections import defaultdict def count_strings(strings): Takes a list of strings and returns a dictionary with the count of each unique string. Args: strings (list of str): A list of strings. Returns: dict: A dictionary with unique strings as keys and their counts as values. count_dict = defaultdict(int) for s in strings: count_dict[s] += 1 return dict(count_dict)"},{"question":"Write a function that performs an element-wise multiplication of two matrices. Each matrix is represented as a list of lists, where each internal list represents a row in the matrix. The function should take two matrices of the same dimensions and return a new matrix where each element is the product of the corresponding elements in the input matrices. Additionally, your function should handle cases where the input matrices are not of the same dimensions by raising a ValueError with an appropriate error message. Given Erroneous Code: ```python def multiply_matrices(matrix1, matrix2): result = [] for i in range(len(matrix1[0])): row = [] for j in range(len(matrix1)): row.append(matrix1[i][j] * matrix2[i][j]) result.append(row) return result matrix1 = [ [1, 2, 3], [4, 5, 6] ] matrix2 = [ [7, 8, 9], [10, 11, 12] ] print(multiply_matrices(matrix1, matrix2)) ``` Expected Output: [[7, 16, 27], [40, 55, 72]]","solution":"def multiply_matrices(matrix1, matrix2): Performs element-wise multiplication of two matrices. :param matrix1: List of lists representing the first matrix :param matrix2: List of lists representing the second matrix :return: A new matrix which is the element-wise product of matrix1 and matrix2 :raises ValueError: If the matrices are not of the same dimensions # Check if the dimensions match if len(matrix1) != len(matrix2) or any(len(row1) != len(row2) for row1, row2 in zip(matrix1, matrix2)): raise ValueError(\\"Matrices are not of the same dimensions.\\") result = [] for i in range(len(matrix1)): row = [] for j in range(len(matrix1[i])): row.append(matrix1[i][j] * matrix2[i][j]) result.append(row) return result"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the given list. Implement the prime-checking function as a helper function within your main function. Optimize the solution to minimize the number of divisibility checks.","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False limit = int(n ** 0.5) + 1 for i in range(3, limit, 2): if n % i == 0: return False return True def get_primes(numbers): Returns a list of prime numbers from the given list. return [num for num in numbers if is_prime(num)]"},{"question":"Implement a function that takes as input a list of integers and returns a list of integers where each element is the product of all the elements in the input list except the one at the current position. The function should not use division and should handle both positive and negative integers as well as zeros. To provide more details, ensure the following requirements are met: 1. The function should have a time complexity of O(n) and a space complexity of O(n), where n is the length of the input list. 2. The function should be able to handle lists of varying lengths, including an empty list and a single-element list. 3. Edge cases such as lists containing multiple zeros should be handled correctly. 4. The function should be optimized for efficiency both in terms of time and space. For example: - Input: [1, 2, 3, 4] - Output: [24, 12, 8, 6] - Input: [0, 1, 2, 3] - Output: [6, 0, 0, 0] - Input: [-1, 1, -2, 2] - Output: [-4, 4, -2, 2] Explain the logic behind the algorithm and the steps taken to achieve the desired output.","solution":"def product_except_self(nums): Returns a list where each element is the product of all the elements in the input list except the one at that position. Parameters: nums (list of int): List of integers. Returns: list of int: List of products. n = len(nums) if n == 0: return [] if n == 1: return [1] left_products = [1] * n right_products = [1] * n output = [1] * n # Construct the left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Construct the right_products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Construct the output array for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"Implement a function in Python to find the intersection of two linked lists. Each node in the linked lists carries an integer value, and the function should return a new linked list containing the common elements in the order they appeared in the first list. Ensure to handle edge cases such as empty lists. Below is the provided structure for the ListNode class and the function signature: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def get_intersection(head1: ListNode, head2: ListNode) -> ListNode: Find intersection of two linked lists. >>> node1 = ListNode(1, ListNode(2, ListNode(3, ListNode(4)))) >>> node2 = ListNode(2, ListNode(3, ListNode(5))) >>> result = get_intersection(node1, node2) >>> while result: >>> print(result.val, end=\\" \\") >>> result = result.next 2 3 set2 = set() while head2: set2.add(head2.val) head2 = head2.next dummy = ListNode() current = dummy while head1: if head1.val in set2: current.next = ListNode(head1.val) current = current.next head1 = head1.next return dummy.next ``` **Note**: Ensure to handle the traversal and list building correctly, keeping in mind potential edge cases and maintaining the order of elements as per their first occurrences in the provided lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def get_intersection(head1: ListNode, head2: ListNode) -> ListNode: Find intersection of two linked lists. set2 = set() while head2: set2.add(head2.val) head2 = head2.next dummy = ListNode() current = dummy while head1: if head1.val in set2: current.next = ListNode(head1.val) current = current.next head1 = head1.next return dummy.next"},{"question":"Implement a function that accepts two strings and determines whether the second string is a valid anagram of the first. An anagram is defined as a reordering of the letters of the first string to form the second string, using all the original letters exactly once. The function should ignore differences in case and should consider only alphanumeric characters, disregarding spaces, punctuation, and other non-alphanumeric characters. In cases where the second string is not a valid anagram of the first, the function should return a message indicating this. Additionally, the function should handle situations where either of the input strings is empty, returning an appropriate error message. The function needs to be optimized to handle large input strings efficiently.","solution":"import re from collections import Counter def is_valid_anagram(s1, s2): Determines whether the second string is a valid anagram of the first. It ignores case and considers only alphanumeric characters. Returns: - An error message if either string is empty. - A message indicating if the second string is not a valid anagram of the first. - True if the second string is a valid anagram of the first. if not s1 or not s2: return \\"Either of the input strings is empty.\\" # Using regular expression to remove non-alphanumeric characters and converting to lowercase cleaned_s1 = re.sub(r\'[^a-zA-Z0-9]\', \'\', s1).lower() cleaned_s2 = re.sub(r\'[^a-zA-Z0-9]\', \'\', s2).lower() if Counter(cleaned_s1) == Counter(cleaned_s2): return True else: return \\"The second string is not a valid anagram of the first.\\""},{"question":"Create a function that accepts a string containing words separated by spaces, and returns a dictionary mapping each unique word in the string to the number of times it appears. Ignore differences in capitalization.","solution":"def count_words(s): Returns a dictionary mapping each unique word in the string `s` to the number of times it appears. The function is case-insensitive. # Convert the string to lowercase to ignore differences in capitalization s = s.lower() # Split the string into words based on spaces words = s.split() # Create a dictionary to store the word counts word_counts = {} # Iterate through each word in the list for word in words: # If the word is already in the dictionary, increment its count if word in word_counts: word_counts[word] += 1 # If the word is not in the dictionary, add it with a count of 1 else: word_counts[word] = 1 return word_counts"},{"question":"Create a Python function that takes a numerical list as input and returns a new list where each element is the difference between the consecutive elements of the original list.","solution":"def get_consecutive_differences(numbers): Returns a new list where each element is the difference between the consecutive elements of the original list. if len(numbers) < 2: return [] return [numbers[i+1] - numbers[i] for i in range(len(numbers) - 1)]"},{"question":"Create a Python function that takes an unsorted list of integers and returns a new list containing only the prime numbers from the input list, sorted in ascending order. Implement a helper function to determine if a number is prime. Use efficient algorithms to handle large lists and numbers, ensuring the solution remains performant.","solution":"import math def is_prime(n): Determines if the given number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_and_sort_primes(numbers): Filters the prime numbers from the input list and returns them sorted in ascending order. primes = [num for num in numbers if is_prime(num)] return sorted(primes)"},{"question":"Write a function that determines if a given string contains balanced parentheses, brackets, and curly braces. The function should return True if the string is balanced and False otherwise. Consider the provided incorrect sample code and fix any errors: def faulty_is_balanced(input_str: str -> bool): Check if the input string has balanced parentheses, brackets, and curly braces. # Wrong Code # Your code here","solution":"def is_balanced(input_str: str) -> bool: Check if the input string has balanced parentheses, brackets, and curly braces. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in input_str: if char in \\"({[\\": stack.append(char) elif char in \\")}]\\": if not stack or stack.pop() != matching_bracket[char]: return False return not stack"},{"question":"Create a Python script that monitors and logs the usage statistics of different functions within a package. The script should dynamically intercept calls to any function within the package and log the function name, the number of times it was called, and the time taken for each execution. Ensure the logging mechanism does not intrude on the package\'s normal operation and maintains high efficiency.","solution":"import time import logging from functools import wraps # Configure the logging setup logging.basicConfig(filename=\'function_usage.log\', level=logging.INFO, format=\'%(asctime)s - %(message)s\') class FunctionMonitor: def __init__(self): self.stats = {} def monitor(self, func): @wraps(func) def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() if func.__name__ not in self.stats: self.stats[func.__name__] = {\'call_count\': 0, \'total_time\': 0.0} self.stats[func.__name__][\'call_count\'] += 1 self.stats[func.__name__][\'total_time\'] += (end_time - start_time) logging.info(f\\"Function \'{func.__name__}\' called. Total calls: {self.stats[func.__name__][\'call_count\']}. \\" f\\"Time taken: {end_time - start_time} seconds.\\") return result return wrapper monitor = FunctionMonitor() # To use the monitor, decorate the functions. # Example: @monitor.monitor def example_function(x, y): time.sleep(1) # Simulate some processing time return x + y @monitor.monitor def another_function(a): time.sleep(2) # Simulate some processing time return a * a"},{"question":"Write a function to determine if a given string can be rearranged to form a palindrome. The function should return `True` if it is possible and `False` otherwise. After that, extend your function to consider if the given string can be rearranged to form a palindrome by removing at most one character. Demonstrate the functionality of your function with several test cases.","solution":"from collections import Counter def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. count = Counter(s) odd_count = sum(1 for cnt in count.values() if cnt % 2 != 0) return odd_count <= 1 def can_form_palindrome_with_removal(s): Determines if a given string can be rearranged to form a palindrome by removing at most one character. if can_form_palindrome(s): return True for i in range(len(s)): temp_str = s[:i] + s[i+1:] if can_form_palindrome(temp_str): return True return False"},{"question":"Write a Python function that takes a string representing a mathematical expression containing only non-negative integers, the plus sign (+), and the minus sign (-). The function should evaluate the expression and return the result as an integer. The function should handle multiple consecutive operations and whitespace correctly. Example input: expression = \\"2 + 3 - 4 + 5\\" Expected output: result = 6","solution":"def evaluate_expression(expression): Takes a string representing a mathematical expression containing only non-negative integers, the plus sign (+), and the minus sign (-). Evaluates the expression and returns the result as an integer. # Remove any whitespace from the expression expression = expression.replace(\\" \\", \\"\\") # Initialize variables for the result and the current number result = 0 current_number = 0 sign = 1 # Iterate through the characters of the expression for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: # If we encounter an operator, add the current number to the result # then update the sign for the next number result += sign * current_number current_number = 0 if char == \'+\': sign = 1 elif char == \'-\': sign = -1 # Add the last number in the expression result += sign * current_number return result"},{"question":"Write a function that takes a string containing a series of words and a second argument as a list of banned words. Your function should return the most common word in the string that is not listed in the banned words. If there is a tie between two words, return the word that appears first in the string. Assume the input string contains only alphabetic characters and spaces, and that the case of letters should not affect the frequency count. For example, given the string \\"This is a test. This test is only a test.\\", and the banned words list [\\"is\\", \\"a\\"], your function should return \\"test\\".","solution":"def most_common_word(paragraph, banned): Returns the most common word in the paragraph that is not in the banned list. import re from collections import Counter # Normalize paragraph by removing non-alphabetic characters and lowercasing words = re.findall(r\'bw+b\', paragraph.lower()) # Filter out banned words filtered_words = [word for word in words if word not in banned] # Count word frequencies word_counts = Counter(filtered_words) # Find the most common word that is not banned max_count = 0 common_word = None for word in filtered_words: if word_counts[word] > max_count: max_count = word_counts[word] common_word = word return common_word"},{"question":"Develop a function to normalize a given list of integers. Normalization is the process of adjusting values measured on different scales to a common scale, often [0, 1]. For this function, normalization should be done by scaling the values in the list so that they fall within the range [0, 1], based on the minimum and maximum values of the original list. Your function should handle edge cases, such as an empty list or a list where all elements are identical. Additionally, provide a piece of faulty code that attempts to perform this normalization and explain the error in it. The mistake should be related to handling the edge cases improperly.","solution":"def normalize(data): Normalizes a list of integers to the range [0, 1]. Parameters: data (list): A list of integers to normalize. Returns: list: A list of normalized values in the range [0, 1]. if not data: return [] min_val = min(data) max_val = max(data) if min_val == max_val: return [0.5 for _ in data] return [(x - min_val) / (max_val - min_val) for x in data] # Faulty Code Example def faulty_normalize(data): min_val = min(data) max_val = max(data) return [(x - min_val) / (max_val - min_val) for x in data]"},{"question":"Given a binary tree, write a program to perform a zigzag level order traversal, also known as a zigzag or spiral order traversal, in which each level is traversed from left to right, and then right to left for the next level and alternate between. Your program should output the zigzag level order traversal of the tree as a list of lists, where each inner list represents a level in the zigzag order. For example, given the following binary tree: ``` 3 / 9 20 / 15 7 ``` The zigzag level order traversal of this tree would be: ``` [ [3], [20, 9], [15, 7] ] ```","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root): if not root: return [] results = [] node_queue = deque([root]) left_to_right = True while node_queue: level_size = len(node_queue) level_nodes = deque() for _ in range(level_size): node = node_queue.popleft() if left_to_right: level_nodes.append(node.val) else: level_nodes.appendleft(node.val) if node.left: node_queue.append(node.left) if node.right: node_queue.append(node.right) results.append(list(level_nodes)) left_to_right = not left_to_right return results"},{"question":"Write a function in Python that, given a binary tree, returns the sum of all the left leaves. A leaf is a node with no children. A left leaf is a leaf that is the left node of its parent. The function should take the root node of the binary tree as its parameter. Ensure your solution handles the edge case where the tree is empty. Example: ``` 3 / 9 20 / 15 7 ``` In the example binary tree above, the left leaves are 9 and 15, so the function should return 24.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_left_leaves(root): This function returns the sum of all left leaves in a binary tree. :param root: TreeNode, the root node of the binary tree :return: int, sum of all left leaves if not root: return 0 def is_leaf(node): return node and not node.left and not node.right def dfs(node): if not node: return 0 total_sum = 0 if is_leaf(node.left): total_sum += node.left.val total_sum += dfs(node.left) total_sum += dfs(node.right) return total_sum return dfs(root)"},{"question":"Write a Python function that takes a list of integers as input and returns a new list that contains the sum of every adjacent pair of integers in the original list. Ensure that the function handles edge cases such as an empty input list or a list with only one integer gracefully, returning an empty list in these situations. Additionally, include a brief explanation of the time complexity of your solution.","solution":"def sum_adjacent_pairs(numbers): Returns a new list that contains the sum of every adjacent pair of integers in the original list. If the input list is empty or contains only one integer, return an empty list. Time Complexity: O(n), where n is the length of the input list. if len(numbers) < 2: return [] result = [numbers[i] + numbers[i + 1] for i in range(len(numbers) - 1)] return result"},{"question":"Write a function in Python that takes a string as input and returns a dictionary. The keys of this dictionary should be each unique character present in the string, and the values should be the number of times each character appears in the string. Ensure that the function handles both upper and lower case characters as distinct characters. Example: Input: \\"HelloWorld\\" Output: {\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'W\': 1, \'r\': 1, \'d\': 1}","solution":"def count_characters(s): Returns a dictionary with each unique character in the input string as the key and the number of times each character appears in the string as the value. character_count = {} for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 return character_count"},{"question":"Develop a Python function that takes a string containing mathematical operations (addition and subtraction) and calculates the result. The string will consist of positive integers and operations `+` and `-` separated by spaces. Assume the input string is always valid. For example: - For the input string \\"3 + 5 - 2\\", the function should return 6. - For the input string \\"10 + 2 - 7 + 3\\", the function should return 8. Implement the function `calculate(expression: str) -> int`.","solution":"def calculate(expression: str) -> int: Takes a string containing mathematical operations (addition and subtraction) and calculates the result. Parameters: expression (str): A string with positive integers and operations `+` and `-` separated by spaces. Returns: int: The result of the calculation. tokens = expression.split() result = int(tokens[0]) i = 1 while i < len(tokens): if tokens[i] == \'+\': result += int(tokens[i + 1]) elif tokens[i] == \'-\': result -= int(tokens[i + 1]) i += 2 return result"},{"question":"Write a function that simulates a simple inventory management system for a store. The system should keep track of the inventory of different products and handle various operations such as adding new products, restocking existing products, and selling products. Additionally, implement an optional case_sensitive flag for product names, where if set to True, \\"Apple\\" and \\"apple\\" are considered different products. The input will be a list of tuples, each tuple containing a command and the necessary arguments. The possible commands are: - \\"add_product\\" with arguments (product_name: str, initial_stock: int) - \\"restock_product\\" with arguments (product_name: str, additional_stock: int) - \\"sell_product\\" with arguments (product_name: str, quantity: int) The function should return a dictionary representing the final inventory status after executing all operations. If a sell operation tries to reduce the stock of a product below zero, raise a custom exception named \\"OutOfStockException\\". Flawed code snippet: ```python def inventory_manager(operations: List[Tuple[str, str, int]]): inventory = {} for operation in operations: cmd, product, value = operation if cmd == \\"add_product\\": inventory[product] = value elif cmd == \\"restock_product\\": inventory[product] += value elif cmd == \\"sell_product\\": if inventory[product] < value: return \\"Out of stock\\" inventory[product] -= value return inventory ``` Here is an outline for the new code: ```python from typing import List, Tuple, Dict class OutOfStockException(Exception): pass def inventory_manager(operations: List[Tuple[str, str, int]], case_sensitive: bool = False) -> Dict[str, int]: Simulate an inventory management system for a store with the following operations: - \\"add_product\\" : Add a new product with initial stock. - \\"restock_product\\" : Increase the stock of an existing product. - \\"sell_product\\" : Decrease the stock of an existing product. Implement an optional case_sensitive flag where product names are treated with case sensitivity if True. If a sell operation results in negative stock, raise an \\"OutOfStockException\\". Args: operations: List of tuples containing operations and arguments. case_sensitive: Boolean, by default False. Returns: Dictionary representing the final inventory status. Examples: >>> inventory_manager([(\\"add_product\\", \\"Apple\\", 10), (\\"sell_product\\", \\"Apple\\", 5)]) {\'Apple\': 5} >>> inventory_manager([(\\"add_product\\", \\"Orange\\", 5), (\\"sell_product\\", \\"Orange\\", 6)]) OutOfStockException: \'Orange is out of stock.\' >>> inventory_manager([(\\"add_product\\", \\"Banana\\", 3), (\\"restock_product\\", \\"Banana\\", 10)], True) {\'Banana\': 13} >>> inventory_manager([(\\"add_product\\", \\"apple\\", 7), (\\"sell_product\\", \\"Apple\\", 2)], True) OutOfStockException: \'Apple is out of stock.\' # Your implementation here ```","solution":"from typing import List, Tuple, Dict class OutOfStockException(Exception): pass def inventory_manager(operations: List[Tuple[str, str, int]], case_sensitive: bool = False) -> Dict[str, int]: Simulate an inventory management system for a store with the following operations: - \\"add_product\\" : Add a new product with initial stock. - \\"restock_product\\" : Increase the stock of an existing product. - \\"sell_product\\" : Decrease the stock of an existing product. Implement an optional case_sensitive flag where product names are treated with case sensitivity if True. If a sell operation results in negative stock, raise an \\"OutOfStockException\\". Args: operations: List of tuples containing operations and arguments. case_sensitive: Boolean, by default False. Returns: Dictionary representing the final inventory status. inventory = {} def get_product_key(product_name): return product_name if case_sensitive else product_name.lower() for operation in operations: cmd, product_name, value = operation product_key = get_product_key(product_name) if cmd == \\"add_product\\": inventory[product_key] = value elif cmd == \\"restock_product\\": if product_key in inventory: inventory[product_key] += value else: raise ValueError(f\\"Cannot restock a non-existent product: {product_name}\\") elif cmd == \\"sell_product\\": if product_key not in inventory or inventory[product_key] < value: raise OutOfStockException(f\\"{product_name} is out of stock.\\") inventory[product_key] -= value # Rename keys to original case format for output consistency when case_sensitive is True if case_sensitive: final_inventory = {} for key, value in inventory.items(): for operation in operations: if get_product_key(operation[1]) == key: final_inventory[operation[1]] = value break return final_inventory return inventory"},{"question":"Write a Python function that takes a list of integers and returns a new list containing the elements which are multiples of the largest even number in the list. The function should include error handling to manage cases where there are no even numbers or where the input is not a valid list of integers. Additionally, the solution should be optimized to handle large lists efficiently. Consider the following example: For the given list [2, 4, 6, 7, 8, 15, 20, 25], the largest even number is 20, and the function should return [20]. For another example, given the list [3, 5, 9, 11], since there are no even numbers, the function should handle it appropriately and return an informative message or an empty list.","solution":"def multiples_of_largest_even(lst): Returns a list of elements which are multiples of the largest even number in the list. If there are no even numbers or the input is not a valid list of integers, return an empty list. if not isinstance(lst, list) or not all(isinstance(i, int) for i in lst): return [] even_numbers = [num for num in lst if num % 2 == 0] if not even_numbers: return [] largest_even = max(even_numbers) return [num for num in lst if num % largest_even == 0]"},{"question":"A robot is situated on a grid with `M` rows and `N` columns. The robot can move up, down, left or right, but it cannot move diagonally. Certain cells in the grid contain obstacles that the robot cannot pass through. Your task is to find out if there is a path for the robot to move from the top-left corner of the grid `(0, 0)` to the bottom-right corner of the grid `(M-1, N-1)`. You are provided with a 2D array `grid` where: - `grid[i][j] = 0` represents a free space that the robot can move through, - `grid[i][j] = 1` represents an obstacle. Write a function `canReachEnd(grid)` to determine if there is a path to the target cell `(M-1, N-1)`. # Example: ```python Input: grid = [ [0, 0, 1, 0], [0, 0, 0, 0], [1, 0, 1, 0], [0, 0, 0, 0] ] Output: True Explanation: There exists a path from the top-left to the bottom-right corner, for example: (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) ``` # Example: ```python Input: grid = [ [0, 1], [1, 0] ] Output: False Explanation: There is no path from the top-left to the bottom-right corner. ``` # Constraints: - `1 <= M, N <= 100` - `grid[i][j]` is either `0` or `1`.","solution":"def canReachEnd(grid): Determines if there exists a path from the top-left corner to the bottom-right corner of the grid. from collections import deque if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False M, N = len(grid), len(grid[0]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (M - 1, N - 1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False"},{"question":"Design a function to determine if two given strings are isomorphic. Two strings str1 and str2 are isomorphic if there is a one-to-one correspondence between their characters such that every character in str1 can be replaced to get str2. No two characters may map to the same character, but a character may map to itself. Example 1: Input: str1 = \\"egg\\", str2 = \\"add\\" Output: True Explanation: You can map \'e\' to \'a\' and \'g\' to \'d\' so that \\"egg\\" becomes \\"add\\". Example 2: Input: str1 = \\"foo\\", str2 = \\"bar\\" Output: False Explanation: There is no way to map \'f\' to \'b\', \'o\' to \'a\', and \'o\' to \'r\' without breaking the one-to-one correspondence rule. Example 3: Input: str1 = \\"paper\\", str2 = \\"title\\" Output: True Explanation: You can map \'p\' to \'t\', \'a\' to \'i\', \'p\' to \'t\', \'e\' to \'l\', and \'r\' to \'e\' so that \\"paper\\" becomes \\"title\\". Constraints: - Both strings str1 and str2 have lengths in the range [1, 10000]. - str1 and str2 contain only lowercase English letters. This function can help determine if two strings can be transformed into each other through character mapping.","solution":"def is_isomorphic(str1, str2): Determine if two strings are isomorphic. Strings are isomorphic if there is a one-to-one correspondence between their characters. if len(str1) != len(str2): return False # Dictionaries to store character mappings map_str1_to_str2 = {} map_str2_to_str1 = {} for char1, char2 in zip(str1, str2): if (char1 in map_str1_to_str2 and map_str1_to_str2[char1] != char2) or (char2 in map_str2_to_str1 and map_str2_to_str1[char2] != char1): return False map_str1_to_str2[char1] = char2 map_str2_to_str1[char2] = char1 return True"},{"question":"Calculate and return the longest substring in a given string `s` that contains at most two distinct characters. If multiple substrings meet the criteria with the same maximum length, return the first one. **Example:** Input: ``` s = \\"eceba\\" ``` Output: ``` \\"ece\\" ``` Input: ``` s = \\"ccaabbb\\" ``` Output: ``` \\"aabbb\\" ``` **Constraints:** 1. The string `s` will have a length between 1 and 1000. 2. The string `s` will consist of only lowercase English letters.","solution":"def longest_substring_with_two_distinct(s): Returns the longest substring with at most two distinct characters. if not s: return \\"\\" start = 0 max_length = 0 max_substring = \\"\\" char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:end + 1] return max_substring"},{"question":"Write a function that calculates the sum of all prime numbers up to and including a given number `n`. If the input is invalid (e.g., not a positive integer), the function should return 0. You are not allowed to use any external libraries or built-in functions for this task. Ensure your solution is efficient. ```python def sum_of_primes(n): # Your code here # Testing the function print(sum_of_primes(10)) # Expected output: 2 + 3 + 5 + 7 = 17 print(sum_of_primes(20)) # Expected output: 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 = 77 print(sum_of_primes(-5)) # Expected output: 0 print(sum_of_primes(\\"abc\\")) # Expected output: 0 ``` Hint: Use a helper function to determine if a number is prime and iterate through all numbers up to `n` to sum the prime numbers only.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True # 2 is the only even prime number if num % 2 == 0: return False # Check for factors from 3 to sqrt(num), using step of 2 to skip even numbers for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def sum_of_primes(n): Returns the sum of all prime numbers up to and including \'n\'. Returns 0 if the input is not a positive integer. if not isinstance(n, int) or n < 0: return 0 sum_primes = 0 for i in range(2, n + 1): if is_prime(i): sum_primes += i return sum_primes # Testing with provided test cases print(sum_of_primes(10)) # Expected output: 17 print(sum_of_primes(20)) # Expected output: 77 print(sum_of_primes(-5)) # Expected output: 0 print(sum_of_primes(\\"abc\\")) # Expected output: 0"},{"question":"Consider a list of integers where some elements are repeated. Write a function `find_unique_elements` that takes in such a list and returns a new list containing only the unique elements, with their original order preserved. Repeated elements should be removed. Optimize the solution for both time and space complexity. For example: ```python find_unique_elements([4, 5, 5, 3, 4, 7, 8, 8, 3]) ``` should return: ```python [4, 5, 3, 7, 8] ```","solution":"def find_unique_elements(lst): Returns a list of unique elements from the given list, keeping their original order. seen = set() unique_elements = [] for item in lst: if item not in seen: seen.add(item) unique_elements.append(item) return unique_elements"},{"question":"Create a function that takes an integer `n` and returns a list of all prime numbers less than or equal to `n`. The function should implement the Sieve of Eratosthenes algorithm to efficiently identify prime numbers.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Given an array of integers, find the subarray (contiguous sequence) which has the largest product of its elements. Write a method to calculate this product. **Function Signature:** ```python def max_product_subarray(nums: List[int]) -> int: pass ``` # Example: Input: ``` nums = [2, 3, -2, 4] ``` Output: ``` 6 ``` Explanation: The subarray `[2, 3]` has the largest product. Input: ``` nums = [-2, 0, -1] ``` Output: ``` 0 ``` Explanation: The result cannot be `2` (from `[-2, -1]`) since the subarray must be contiguous. # Constraints: - The array length will be at least 1. - The input array contains integers. - Time complexity should be linear (i.e., O(n)). To verify your solution, write a suite of unit tests that confirm the correctness of the implementation. Ensure to cover cases with all non-negative, all non-positive, mixed positive and negative numbers, and arrays of various lengths including edge cases such as a single element array.","solution":"from typing import List def max_product_subarray(nums: List[int]) -> int: if not nums: return 0 max_product = nums[0] current_max = nums[0] current_min = nums[0] for num in nums[1:]: if num < 0: current_max, current_min = current_min, current_max current_max = max(num, current_max * num) current_min = min(num, current_min * num) max_product = max(max_product, current_max) return max_product"},{"question":"Implement a function to determine whether a given string containing parentheses is balanced. Your implementation should handle three types of parentheses: round `()`, square `[]`, and curly `{}`. You need to write your code in Python programming language. Your task further involves correcting an erroneous Python function aimed at validating balanced parentheses. Here\'s the given code: ```python def is_balanced(s): stack = [] for char in s: if char in \'([{\': stack.append(char) elif char in \')]}\': if not stack: return False top = stack.pop() if char == \')\' and top != \'(\': return False elif char == \']\' and top != \'[\': return False elif char == \'}\' and top != \'{\': return False return len(stack) == 0 ``` This code is meant to check if a string of parentheses is balanced, but it has issues causing incorrect results. Identify and resolve these errors without changing the core logic. Finally, outline the time complexity of your final solution.","solution":"def is_balanced(s): Determines if the parentheses in the string s are balanced. - s: string containing round (), square [], and curly {} parentheses. stack = [] # Dictionary to keep mappings of closing to opening brackets bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} # Iterate through each character in the input string for char in s: if char in bracket_map.values(): # If it\'s an opening bracket stack.append(char) elif char in bracket_map: # If it\'s a closing bracket if not stack or stack.pop() != bracket_map[char]: return False return not stack # True if stack is empty, False otherwise"},{"question":"Write a function that accepts a list of tuples, each containing a pair of integers. The function should return a new list where each tuple\'s elements are multiplied together. Additionally, handle cases where the input list may be empty or contain only one tuple. Example input: [(2, 3), (4, 5), (6, 7)] Example output: [6, 20, 42] Note: If the input list is empty, return an empty list. If there is only one tuple in the input list, return a list containing a single product.","solution":"def multiply_tuples(input_list): Multiplies elements of each tuple in the input list and returns a new list with the results. Args: input_list (list): A list of tuples, each containing a pair of integers. Returns: list: A list of integers where each element is the product of the elements of the corresponding tuple. return [a * b for a, b in input_list]"},{"question":"Write a Python function to simulate a ticket booking system for a cinema. The cinema has a seating arrangement represented by an `n x m` grid, where `n` is the number of rows and `m` is the number of seats per row. Each seat can either be available (`0`) or booked (`1`). Implement functionalities to (1) book a seat for a given row and seat number, (2) cancel a booking for a given row and seat number, and (3) check if a specific seat is available. Ensure the seat selection is within the valid range and print appropriate messages for booking, canceling, and checking seat availability.","solution":"class Cinema: def __init__(self, n, m): self.seats = [[0] * m for _ in range(n)] self.rows = n self.cols = m def book_seat(self, row, seat): if self._is_valid_seat(row, seat): if self.seats[row][seat] == 0: self.seats[row][seat] = 1 return \\"Seat booked successfully.\\" else: return \\"Seat already booked.\\" return \\"Invalid seat selection.\\" def cancel_booking(self, row, seat): if self._is_valid_seat(row, seat): if self.seats[row][seat] == 1: self.seats[row][seat] = 0 return \\"Booking cancelled successfully.\\" else: return \\"Seat not booked yet.\\" return \\"Invalid seat selection.\\" def check_availability(self, row, seat): if self._is_valid_seat(row, seat): return self.seats[row][seat] == 0 return \\"Invalid seat selection.\\" def _is_valid_seat(self, row, seat): return 0 <= row < self.rows and 0 <= seat < self.cols"},{"question":"Build a Python function that takes a list of integers and returns a new list with the duplicate elements removed but preserving the order of their first occurrences. Ensure the function has an optimal time complexity: def remove_duplicates(lst): Extracts duplicates from the provided list while keeping the order of first appearances. >>> remove_duplicates([1, 2, 2, 3, 4, 4, 4, 5]) [1, 2, 3, 4, 5] >>> remove_duplicates([4, 5, 4, 6, 6, 7, 8, 8]) [4, 5, 6, 7, 8] >>> remove_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> remove_duplicates([10, 20, 20, 30, 40, 50, 50, 60]) [10, 20, 30, 40, 50, 60] >>> remove_duplicates([5, 6, 7, 5, 6, 7, 8]) [5, 6, 7, 8]","solution":"def remove_duplicates(lst): Extracts duplicates from the provided list while keeping the order of first appearances. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function that takes a list of strings and returns a new list where each string is reversed. For example, given the list [\\"apple\\", \\"banana\\", \\"cherry\\"], the function should return [\\"elppa\\", \\"ananab\\", \\"yrrehc\\"].","solution":"def reverse_strings(strings): Returns a new list where each string from the input list is reversed. Args: strings (list of str): The list of strings to be reversed. Returns: list of str: The list with each string reversed. return [string[::-1] for string in strings]"},{"question":"Implement a function that takes a list of strings as input and returns a list of those strings sorted by their lengths in descending order. If two strings have the same length, they should be ordered lexicographically in ascending order. Ensure your implementation efficiently handles both sorting criteria. For example, given the following input list: ```python input_list = [\\"apple\\", \\"orange\\", \\"fig\\", \\"pineapple\\", \\"lime\\"] ``` The output should be: ```python [\\"pineapple\\", \\"orange\\", \\"apple\\", \\"lime\\", \\"fig\\"] ``` Provide a complete implementation, demonstrating both the sorting logic and how to handle the tie-breaking lexicographical order when the string lengths are the same.","solution":"def sort_strings_by_length(strings): Sort a list of strings first by length in descending order, then lexicographically in ascending order if lengths are the same. return sorted(strings, key=lambda x: (-len(x), x))"},{"question":"Create a function that takes an m x n matrix and returns the matrix in spiral order as a list. Test your function on the following matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The output should be a list representing the matrix in spiral order.","solution":"def spiral_order(matrix): Returns the elements of the matrix in spiral order. if not matrix: return [] result = [] while matrix: result += matrix.pop(0) if matrix and matrix[0]: for row in matrix: result.append(row.pop()) if matrix: result += matrix.pop()[::-1] if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"Design and implement a program that will take an integer `n` as input and return a string representing the number spelled out in English. The program must handle numbers from 0 to 999,999. For example, if the input is 12345, the output should be \\"twelve thousand three hundred forty-five\\". No punctuation should be included in the output, and the input will always be a valid integer within the specified range. Function Signature The function signature is: ```python def number_to_words(n: int) -> str: ``` # Constraints - The input integer `n` will be in the range [0, 999,999]. - The output string must be in lower case with proper spacings as demonstrated below. # Examples ```python number_to_words(0) # Output: \\"zero\\" number_to_words(512) # Output: \\"five hundred twelve\\" number_to_words(99023) # Output: \\"ninety-nine thousand twenty-three\\" number_to_words(100000) # Output: \\"one hundred thousand\\" ``` # Requirements - You must implement the function to convert the number into its English word representation. - Think about how you will handle different components such as units, teens, tens, and hundreds, possibly breaking the problem into manageable parts. - Avoid using external libraries that would trivialize the conversion (for example, libraries that already provide this functionality).","solution":"def number_to_words(n: int) -> str: if n == 0: return \\"zero\\" units = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] teens = [\\"\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"ten\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] thousands = [\\"\\", \\"thousand\\"] def one_to_nine(num): return units[num] def ten_to_nineteen(num): if num == 10: return tens[1] else: return teens[num%10] def twenty_to_ninety_nine(num): if num < 20: return ten_to_nineteen(num) else: ten = num // 10 rest = num % 10 return tens[ten] + (\\" \\" + one_to_nine(rest) if rest != 0 else \\"\\") def one_to_ninety_nine(num): if num < 10: return one_to_nine(num) else: return twenty_to_ninety_nine(num) def one_to_nine_hundred_ninety_nine(num): hundred = num // 100 rest = num % 100 if hundred == 0: return one_to_ninety_nine(num) else: return units[hundred] + \\" hundred\\" + (\\" \\" + one_to_ninety_nine(rest) if rest != 0 else \\"\\") def one_to_thousand(num): if num < 1000: return one_to_nine_hundred_ninety_nine(num) thousand = num // 1000 rest = num % 1000 if rest == 0: return one_to_thousand(thousand) + \\" thousand\\" else: return one_to_thousand(thousand) + \\" thousand \\" + one_to_nine_hundred_ninety_nine(rest) return one_to_thousand(n)"},{"question":"A robot is located at the top-left corner of a `m x n` grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and empty space are marked as 1 and 0 respectively in the grid. Example 1: Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: obstacleGrid = [[0,1],[0,0]] Output: 1 Explanation: There is one obstacle in the middle of the 2x2 grid above. There is only one way to reach the bottom-right corner: 1. Down -> Right Constraints: - `m == obstacleGrid.length` - `n == obstacleGrid[i].length` - `1 <= m, n <= 100` - `obstacleGrid[i][j]` is 0 or 1.","solution":"def uniquePathsWithObstacles(obstacleGrid): Returns the number of unique paths from top-left to bottom-right in a grid with obstacles. if not obstacleGrid or obstacleGrid[0][0] == 1: return 0 m, n = len(obstacleGrid), len(obstacleGrid[0]) # DP array to store the number of ways to reach each cell dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = 1 for i in range(m): for j in range(n): if obstacleGrid[i][j] == 1: dp[i][j] = 0 elif i == 0 and j > 0: dp[i][j] = dp[i][j-1] elif j == 0 and i > 0: dp[i][j] = dp[i-1][j] elif i > 0 and j > 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function `balanced_parentheses` that takes a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and returns `True` if the input string is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type. For example, the input string `\\"{[()]}\\"` should return `True`, whereas the input string `\\"([)]\\"` should return `False`. ```python def balanced_parentheses(s: str) -> bool: stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack # Test cases print(balanced_parentheses(\\"{[()]}\\")) # Output: True print(balanced_parentheses(\\"([)]\\")) # Output: False print(balanced_parentheses(\\"{[]}\\")) # Output: True print(balanced_parentheses(\\"{[}\\")) # Output: False print(balanced_parentheses(\\"{[(([]))]}\\")) # Output: True ```","solution":"def balanced_parentheses(s: str) -> bool: Determines if the given string of parentheses is valid. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Refactor the following Python code snippet to accurately and effectively associate a unique square for every integer that falls within the given range, then systematically display the resultant values in a structured format: for num in range(1, 6): squared_value = num ** 2 print(f\\"The square of {num} is {squared_value}\\")","solution":"def calculate_squares(start, end): Calculates the square of each integer within a specified range and returns a formatted list of the results. :param start: The starting integer of the range (inclusive). :param end: The ending integer of the range (exclusive). :return: A list of strings with each string giving the square of an integer. results = [] for num in range(start, end): squared_value = num ** 2 results.append(f\\"The square of {num} is {squared_value}\\") return results"},{"question":"Write a Python function that takes a list of integers and a target integer as inputs. The function should use a recursive algorithm to determine if there is a subset of the list that adds up to the target integer. The function should return a boolean value indicating whether such a subset exists. Additionally, provide a brief explanation of how your code works. ```python def is_subset_sum(arr, target): def subset_sum_recursive(arr, n, target): # Base Cases if target == 0: return True if n == 0 and target != 0: return False # If the last element is greater than target, ignore it if arr[n-1] > target: return subset_sum_recursive(arr, n-1, target) # Otherwise, check if target can be obtained by including or excluding the last element return subset_sum_recursive(arr, n-1, target) or subset_sum_recursive(arr, n-1, target - arr[n-1]) return subset_sum_recursive(arr, len(arr), target) # Example use of the function arr = [3, 34, 4, 12, 5, 2] target = 9 print(is_subset_sum(arr, target)) ``` **Explanation:** The `is_subset_sum` function uses a helper function `subset_sum_recursive` to check if a subset sum equals the target. The base cases handle situations where the target is 0 (subset found) or where there are no more items to process but the target isn\'t zero (no subset found). The recursive cases either include the last element of the list or exclude it and proceed with the search. The chosen example checks if the target sum `9` can be formed from the provided list, demonstrating the function\'s capability.","solution":"def is_subset_sum(arr, target): def subset_sum_recursive(arr, n, target): # Base Cases if target == 0: return True if n == 0 and target != 0: return False # If the last element is greater than target, ignore it if arr[n-1] > target: return subset_sum_recursive(arr, n-1, target) # Otherwise, check if target can be obtained by including or excluding the last element return subset_sum_recursive(arr, n-1, target) or subset_sum_recursive(arr, n-1, target - arr[n-1]) return subset_sum_recursive(arr, len(arr), target) # Example use of the function arr = [3, 34, 4, 12, 5, 2] target = 9 print(is_subset_sum(arr, target))"},{"question":"Implement a function in Python that takes a list of strings and returns a new list containing only the strings that are anagrams of \\"binary\\". Ensure your solution is case-insensitive and provide a brief explanation of how your solution works.","solution":"def find_anagrams_of_binary(words): Returns a list containing only the strings from the input list that are anagrams of the word \\"binary\\". This function is case-insensitive. target = \\"binary\\" target_sorted = sorted(target.lower()) # Sort letters of the target word anagrams = [] for word in words: if sorted(word.lower()) == target_sorted: anagrams.append(word) return anagrams"},{"question":"Given a string `s` that represents a simple mathematical expression involving only positive integers and the operators `+`, `-`, `*`, and `/`, write a function to evaluate it and return the result as an integer. The expression does not contain any parentheses and follows the standard operator precedence rules (i.e., multiplication and division take precedence over addition and subtraction). You can assume that the given expression is always valid. Implement the function `evaluate_expression(s: str) -> int`. # Constraints - The input string `s` is a non-empty string that contains only digits and the operators `+`, `-`, `*`, and `/`. - The length of `s` does not exceed 10^4. - The division operator `/` always performs integer division. # Example ```python def evaluate_expression(s: str) -> int: # Your implementation here # Example 1 input_str = \\"3+2*2\\" print(evaluate_expression(input_str)) # Output: 7 # Example 2 input_str = \\" 3/2 \\" print(evaluate_expression(input_str)) # Output: 1 # Example 3 input_str = \\"3+5 / 2\\" print(evaluate_expression(input_str)) # Output: 5 ``` # Explanation - In Example 1, the expression `\\"3+2*2\\"` is evaluated as `3 + (2*2) = 3 + 4 = 7`. - In Example 2, the expression `\\"3/2\\"` is evaluated as `3 // 2 = 1`. - In Example 3, the expression `\\"3+5 / 2\\"` is evaluated as `3 + (5 // 2) = 3 + 2 = 5`.","solution":"def evaluate_expression(s: str) -> int: Evaluate a simple mathematical expression involving positive integers and the operators +, -, *, / without any parentheses, following standard operator precedence rules. The division operator \'/\' performs integer division. # Remove whitespace from the input string s = s.replace(\\" \\", \\"\\") # Initialize stack and variables to keep current number and last operator stack = [] num = 0 last_operator = \'+\' # Loop through characters in the string for i, ch in enumerate(s): if ch.isdigit(): num = num * 10 + int(ch) # Handle the operation when encountering an operator or the end of the string if ch in \\"+-*/\\" or i == len(s) - 1: if last_operator == \\"+\\": stack.append(num) elif last_operator == \\"-\\": stack.append(-num) elif last_operator == \\"*\\": stack[-1] = stack[-1] * num elif last_operator == \\"/\\": stack[-1] = int(stack[-1] / num) # Reset num and update last operator num = 0 last_operator = ch return sum(stack)"},{"question":"Create a function to manage inventory in a store. The function inventory_manager(inventory, action, item, quantity) manages an inventory system for a store. The function should be able to add and remove items, as well as check the stock. Ensure the following requirements are met: 1. The function should take four parameters: - inventory (a dictionary where keys are item names and values are quantities) - action (a string that can be one of three values: \'add\', \'remove\', \'check\') - item (the name of the item to perform the action on) - quantity (an integer representing amount to be added or removed, ignored if action is \'check\') 2. If the action is \'add\': - Add the specified quantity of the item to the inventory. - If the item does not exist, add it to the inventory. 3. If the action is \'remove\': - Subtract the specified quantity of the item from the inventory. - Ensure the quantity doesn\'t fall below 0. If the removal would result in a negative quantity, set it to 0. 4. If the action is \'check\': - Return the current quantity of the item in the inventory. - If the item does not exist in the inventory, return \'Item not in inventory\'. 5. The function should validate the input: - Ensure \'action\' is one of \'add\', \'remove\', \'check\'. - Ensure \'quantity\' is a positive integer for \'add\' and \'remove\' actions. - Handle incorrect item names or non-existent items gracefully. 6. The function should handle any exceptions and provide meaningful error messages. Implement this function to work as described.","solution":"def inventory_manager(inventory, action, item, quantity=0): Manages the inventory system of a store. :param inventory: dict, a dictionary where keys are item names and values are quantities :param action: str, the action to perform (\'add\', \'remove\', \'check\') :param item: str, the name of the item to perform the action on :param quantity: int, the amount to be added or removed (ignored if action is \'check\') :return: int or str, the current quantity of the item if action is \'check\', or None if action not in [\'add\', \'remove\', \'check\']: raise ValueError(\\"Invalid action. Action must be \'add\', \'remove\' or \'check\'.\\") if action in [\'add\', \'remove\'] and (not isinstance(quantity, int) or quantity < 0): raise ValueError(\\"Quantity must be a positive integer for \'add\' and \'remove\' actions.\\") if action == \'add\': if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif action == \'remove\': if item in inventory: inventory[item] = max(inventory[item] - quantity, 0) else: inventory[item] = 0 elif action == \'check\': if item in inventory: return inventory[item] else: return \'Item not in inventory\' return None"},{"question":"Correct the following code to reverse a string. def reverse_string(s): result = \\"\\" for i in range(len(s), 0): result += s[i] return result print(reverse_string(\\"hello\\"))","solution":"def reverse_string(s): Returns the reversed version of the input string s. result = \\"\\" for i in range(len(s) - 1, -1, -1): result += s[i] return result # Example usage print(reverse_string(\\"hello\\")) # Output should be \\"olleh\\""},{"question":"Develop a Python program that implements the following specifications. You are tasked with creating two Python classes: a `Book` class and an `Author` class. The `Book` class should represent a singular book in a library. It should include attributes like book title, author (instance of `Author`), and publication year. It should also contain a method to display the book details. The `Author` class should have attributes such as name, birth year, and a list of books (instances of `Book`). The `Author` class should include methods to add books, display all books written by the author, and a method to display the author\'s details. Additionally below is a piece of erroneous code related to class definition in Python, point out the errors in the given code snippet: ```python class Author name = \'\' year_of_birth = 0 written_books = [] def __init__(): pass def add_book(self, book): self.written.books.append(book) class Book: title = \\"\\" author = \\"\\" year_of_publication = 0 def __init__(self, title): self.title = \\"Sample Book\\" def set_author(self, author): self.author = Author def details(self): print(\\"Book Title:\\",self.title) print(\\"Publication Year:\\",str(self.year_of_publication)) print(\\"Author:\\",self.author.name) ```","solution":"class Book: def __init__(self, title, author, year_of_publication): Initializes a new book. self.title = title self.author = author self.year_of_publication = year_of_publication def details(self): Prints the details of the book. return f\\"Book Title: {self.title}nPublication Year: {self.year_of_publication}nAuthor: {self.author.name}\\" class Author: def __init__(self, name, year_of_birth): Initializes a new author. self.name = name self.year_of_birth = year_of_birth self.written_books = [] def add_book(self, book): Adds a book to the list of books written by the author. self.written_books.append(book) def list_books(self): Displays all the books written by the author. return [book.title for book in self.written_books] def details(self): Prints the details of the author. return f\\"Author: {self.name}nYear of Birth: {self.year_of_birth}nBooks Written: {\', \'.join(self.list_books())}\\" # Errors in the given code: # 1. class Author is missing a colon. # 2. In the Author class, __init__ method is missing parameters. # 3. self.written.books should be self.written_books in the add_book method of Author class. # 4. Incorrect assignments in __init__ method of Book class, it should receive title, author, year_of_publication arguments. # 5. self.author = Author should set the instance, so it should be self.author = author. # 6. In details method of Book class, it should use the author instance properly."},{"question":"Write a function that accepts a string representing a mathematical addition expression consisting of non-negative integers (each possibly having multiple digits) separated by plus signs (e.g., \\"3+25+7+40\\"). The function should parse the string to calculate the sum of all the integers and return the result. For example, given the string \\"3+25+7+40\\", the function returns 75.","solution":"def calculate_sum(expression): Parses a string representing a mathematical addition expression and returns the sum. Parameters: expression (str): The string containing the addition expression (e.g., \\"3+25+7+40\\") Returns: int: The sum of all the integers in the expression # Split the expression by the plus signs and convert the parts to integers numbers = map(int, expression.split(\'+\')) # Return the sum of the integers return sum(numbers)"},{"question":"Write a function that simulates a basic bank transaction system. The system should be able to handle three types of operations: deposit, withdraw, and check balance. - The function should accept a list of operations, with each operation being represented by a tuple. The first element of the tuple should be the operation type (either \'deposit\', \'withdraw\', or \'check\'), and the second element should be the amount in the case of \'deposit\' and \'withdraw\', or None in the case of \'check\'. - The function should start with an initial balance of 0. - For \'deposit\' operations, add the amount to the balance. - For \'withdraw\' operations, subtract the amount from the balance, but do not allow overdrafts (i.e., the balance should not go below zero). - For \'check\' operations, return the current balance. Example input: ```python transactions = [(\'deposit\', 100), (\'withdraw\', 50), (\'check\', None), (\'withdraw\', 60), (\'check\', None)] ``` Expected output: ```python [50, 0] ```","solution":"def bank_transactions(operations): Simulates a basic bank transaction system. Args: operations (list of tuple): List of operations, each represented as a tuple where the first element is the operation type (\'deposit\', \'withdraw\', \'check\'), and the second element is the amount (int) for \'deposit\' and \'withdraw\', or None for \'check\'. Returns: list: List of results for \'check\' operations. balance = 0 results = [] for operation in operations: type_op, amount = operation if type_op == \'deposit\': balance += amount elif type_op == \'withdraw\': balance = max(0, balance - amount) elif type_op == \'check\': results.append(balance) return results"},{"question":"Consider the following function in Python that calculates the factorial of a number using recursion. The function, as written, does not have any error handling and has potential issues with large input values. Improve the function by adding appropriate error handling and optimize it to handle larger input values more efficiently. ```python def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) ``` # Tasks: 1. Add error handling to manage invalid input (such as negative numbers or non-integer values). 2. Optimize the function to handle larger input values without causing a stack overflow (Hint: consider using iteration or memoization). # Example Usage: ```python print(factorial(5)) # Expected output: 120 print(factorial(-1)) # Expected output: Error message indicating invalid input print(factorial(1000)) # Expected output: Large number without causing a stack overflow ``` # Flawed Reference Code: ```python def factorial(n): if type(n) != int or n < 0: return \\"Invalid input\\" if n == 0: return 1 else: return n * factorial(n-1) ``` # Improved Code Requirements: - The improved code should include input validation. - The improved code should avoid recursion to prevent stack overflow. - Ensure the code is easily understandable and efficient.","solution":"def factorial(n): Calculate the factorial of a non-negative integer using iteration. Includes error handling for invalid inputs. Args: n: A non-negative integer. Returns: The factorial of the number n. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a Python program to find the longest subsequence within a list of integers that forms an arithmetic progression. The program should handle checking for sequences within potentially large lists efficiently and include error handling for non-integer inputs.","solution":"def find_longest_arith_seq(lst): Finds the longest subsequence in the list that forms an arithmetic progression. if not lst: return [] for item in lst: if not isinstance(item, int): raise ValueError(\\"All elements in the input list must be integers.\\") n = len(lst) if n <= 2: return lst lst.sort() longest_ap = [] dp = [{} for _ in range(n)] for i in range(n - 1): for j in range(i + 1, n): diff = lst[j] - lst[i] if diff in dp[i]: dp[j][diff] = dp[i][diff] + [lst[j]] else: dp[j][diff] = [lst[i], lst[j]] if len(dp[j][diff]) > len(longest_ap): longest_ap = dp[j][diff] return longest_ap"},{"question":"Write a function in Python that takes a list of strings, where each string represents a decimal number. The function should return a new list containing the strings sorted in ascending order according to their numeric value. If two strings represent the same number, their order should remain as in the input list (stable sorting).","solution":"def sort_decimal_strings(decimal_strings): Sorts a list of strings representing decimal numbers in ascending order based on their numeric value. Parameters: decimal_strings (list): List of strings where each string represents a decimal number. Returns: list: Sorted list of strings based on their numeric values. return sorted(decimal_strings, key=float)"},{"question":"Write a Python function that takes an unsorted list of integers as input and returns a list of the three largest distinct integers in ascending order. If there are fewer than three distinct integers in the input list, return all the distinct integers sorted in ascending order. For example: - Input: [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] - Output: [5, 6, 9] - Input: [5, 5, 5] - Output: [5] - Input: [1, 2] - Output: [1, 2] You can assume the list contains at least one integer.","solution":"def three_largest_distinct(nums): Returns a list of the three largest distinct integers in ascending order. If there are fewer than three distinct integers, return all distinct integers sorted in ascending order. distinct_nums = sorted(set(nums)) return distinct_nums[-3:] if len(distinct_nums) >= 3 else distinct_nums"},{"question":"Write a Python function that takes a list of strings and returns the number of strings that can be constructed using the characters of another list of strings. Each character in the second list of strings may only be used once per string formation. If a string cannot be completely constructed, it should not be counted. Additionally, correct an erroneous piece of code that attempts to solve the problem but fails to properly check character usage and construction feasibility. Example: ```python def can_construct_words(word_list, char_list): count = 0 for word in word_list: for char in char_list: for c in word: if c in char: char = char.replace(c, \'\', 1) count += 1 return count words = [\\"apple\\", \\"banana\\", \\"orange\\", \\"grape\\"] characters = [\\"aelpp\\", \\"aaabnn\\", \\"ognera\\", \\"grape\\"] print(can_construct_words(words, characters)) # Expected output: 4 ``` The given code incorrectly counts the strings. Fix the logic to accurately reflect whether each word can be formed according to the rules. The corrected code should ensure no character overlaps unnecessarily between different strings.","solution":"from collections import Counter def can_construct_words(word_list, char_list): Returns the number of words that can be constructed using the characters of the given list of strings. Each character in the second list may only be used once per string formation. count = 0 for word in word_list: word_counter = Counter(word) for char_set in char_list: char_counter = Counter(char_set) if all(word_counter[char] <= char_counter[char] for char in word_counter): count += 1 break # Move to the next word if this one can be constructed return count"},{"question":"Develop a Python function that takes two multi-dimensional dictionaries representing sparse matrices and returns their sum. Each dictionary contains keys as tuples representing the coordinates of non-zero elements, and values as the non-zero elements at those coordinates. Assume both dictionaries are of the same dimensions. For example, given: MatrixDict1 = { (0, 0): 1, (1, 2): 3, (2, 1): 4 } MatrixDict2 = { (0, 0): 2, (2, 1): 5, (3, 3): 7 } The function should return: { (0, 0): 3, (1, 2): 3, (2, 1): 9, (3, 3): 7 }","solution":"def add_sparse_matrices(matrix_dict1, matrix_dict2): Takes two sparse matrices represented as dictionaries and returns their sum. Each key is a tuple representing the coordinates and each value is the non-zero element at those coordinates. result = matrix_dict1.copy() # Make a copy to avoid mutation for key, value in matrix_dict2.items(): if key in result: result[key] += value else: result[key] = value return result"},{"question":"Write a Python function `longest_even_subsequence` that takes a list of integers as an input and returns the longest contiguous subsequence where all numbers are even. If there are multiple subsequences with the same maximum length, return the first one. If the list contains no even numbers, return an empty list. Additionally, handle cases where the input is not a list or contains non-integer elements by raising an appropriate exception with a descriptive error message. Write tests for various edge cases like empty lists, lists with all odd numbers, and lists with mixed data types. Here are some sample inputs and expected outputs: ```python Input: [1, 2, 4, 6, 1, 2, 8, 10, 3] Output: [2, 4, 6] Input: [1, 3, 5, 7] Output: [] Input: [2, 2, 2, 2] Output: [2, 2, 2, 2] ``` Example of erroneous input handling: ```python Input: [\\"1\\", 2, 3, 4] Output: Exception \\"Input must be a list of integers.\\" Input: 12345 Output: Exception \\"Input must be a list of integers.\\" ```","solution":"def longest_even_subsequence(nums): Returns the longest contiguous subsequence where all numbers are even. :param nums: list of integers :return: longest contiguous subsequence of even integers if not isinstance(nums, list): raise Exception(\\"Input must be a list of integers.\\") for num in nums: if not isinstance(num, int): raise Exception(\\"Input must be a list of integers.\\") max_len = 0 max_subseq = [] curr_len = 0 curr_start = 0 for i in range(len(nums)): if nums[i] % 2 == 0: curr_len += 1 if curr_len > max_len: max_len = curr_len max_subseq = nums[curr_start:i + 1] else: curr_len = 0 curr_start = i + 1 return max_subseq"},{"question":"Design and implement a Binary Search algorithm that operates on a descendingly sorted list of integers. The function should take a list and a target integer as inputs and return the index of the target integer if found, or -1 if not found. Assess the performance of your Binary Search algorithm by comparing it to a linear search on the same dataset. Include time complexity analysis and empirical runtime measurements for both algorithms on lists of varying sizes (e.g., 100, 1,000, 10,000, and 100,000 elements).","solution":"def binary_search_desc(arr, target): Performs a binary search on a descendingly sorted list of integers. Returns the index of target if found, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: right = mid - 1 else: left = mid + 1 return -1 def linear_search(arr, target): Performs a linear search on a list of integers. Returns the index of target if found, otherwise returns -1. for index, value in enumerate(arr): if value == target: return index return -1 # Performance testing and comparison def performance_test(): import time import random sizes = [100, 1000, 10000, 100000] for size in sizes: arr = sorted([random.randint(0, size*10) for _ in range(size)], reverse=True) target = random.choice(arr) start_time = time.time() binary_search_desc(arr, target) binary_search_time = time.time() - start_time start_time = time.time() linear_search(arr, target) linear_search_time = time.time() - start_time print(f\\"Size: {size}, Binary Search Time: {binary_search_time:.6f}, Linear Search Time: {linear_search_time:.6f}\\") performance_test()"},{"question":"Write a Python function to compute the factorial of a given non-negative integer `n`. Ensure that the input is validated to be a non-negative integer, and include appropriate error handling. Implement both an iterative and a recursive approach within the function, and provide a way for the user to select which method to use. ``` def factorial(n, method=\'iterative\'): if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") def iterative_factorial(n): result = 1 for i in range(1, n + 1): result *= i return result def recursive_factorial(n): if n == 0: return 1 else: return n * recursive_factorial(n - 1) if method == \'iterative\': return iterative_factorial(n) elif method == \'recursive\': return recursive_factorial(n) else: raise ValueError(\\"Method must be \'iterative\' or \'recursive\'.\\") ```","solution":"def factorial(n, method=\'iterative\'): Compute the factorial of a non-negative integer n using the specified method. Parameters: n (int): A non-negative integer whose factorial is to be computed. method (str): The method to use for computing the factorial (\'iterative\' or \'recursive\'). Returns: int: The factorial of the given number n. Raises: ValueError: If the input n is not a non-negative integer or if an invalid method is specified. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") def iterative_factorial(n): result = 1 for i in range(1, n + 1): result *= i return result def recursive_factorial(n): if n == 0: return 1 else: return n * recursive_factorial(n - 1) if method == \'iterative\': return iterative_factorial(n) elif method == \'recursive\': return recursive_factorial(n) else: raise ValueError(\\"Method must be \'iterative\' or \'recursive\'.\\")"},{"question":"Design the implementation for two Python methods, `compress_string` and `decompress_string`. The method `compress_string` takes an input string containing only alphabetic characters and returns a compressed version using run-length encoding. This encoding method shortens strings based on consecutive repetitions of characters, where each character is followed by the number of times it repeats consecutively. Conversely, the method `decompress_string` should take a compressed string and revert it to its original form using run-length decoding. Rules: - `compress_string` should replace sequences of the same character that occur more than once with that character followed by the number of occurrences (e.g., \\"aaabb\\" becomes \\"a3b2\\"). - For a single character or non-repeating characters, the method should leave them as they are (e.g., \\"abc\\" remains \\"abc\\"). - `decompress_string` should appropriately decode any string encoded using the described method. Examples to verify and test your implementation: - `compress_string(\'aaabbccaaa\')` should return `\'a3b2c2a3\'`. - `decompress_string(\'a3b2c2a3\')` should return `\'aaabbccaaa\'`. - `compress_string(\'abcdef\')` should return `\'abcdef\'`. - `decompress_string(\'abcdef\')` should return `\'abcdef\'`. ```python def compress_string(string: str) -> str: Compresses the input string using run-length encoding, returning the compressed version. If characters do not repeat consecutively, they are left unchanged. # Implement your solution here pass def decompress_string(string: str) -> str: Decompresses a run-length encoded string back to its original form. If a character is followed by a number, the character is repeated the specified number of times. # Implement your solution here pass ```","solution":"def compress_string(string: str) -> str: Compresses the input string using run-length encoding, returning the compressed version. If characters do not repeat consecutively, they are left unchanged. if not string: return \\"\\" compressed = [] count = 1 for i in range(1, len(string)): if string[i] == string[i - 1]: count += 1 else: compressed.append(string[i - 1]) if count > 1: compressed.append(str(count)) count = 1 # Add the last character and its count compressed.append(string[-1]) if count > 1: compressed.append(str(count)) return \'\'.join(compressed) def decompress_string(string: str) -> str: Decompresses a run-length encoded string back to its original form. If a character is followed by a number, the character is repeated the specified number of times. decompressed = [] i = 0 while i < len(string): char = string[i] count = 1 i += 1 # Check if there is a number following the character if i < len(string) and string[i].isdigit(): count_start = i while i < len(string) and string[i].isdigit(): i += 1 count = int(string[count_start:i]) decompressed.append(char * count) return \'\'.join(decompressed)"},{"question":"Write a Python function that takes a list of integers and returns a new list with the integers sorted in ascending order, but with all prime numbers appearing before non-prime numbers. Example: - Input: [3, 8, 5, 2, 11, 4] - Output: [2, 3, 5, 11, 4, 8] Note: To check if a number is prime, you can create a helper function `is_prime(n)` that returns `True` if the number `n` is a prime number, and `False` otherwise.","solution":"def is_prime(n): Check if a number is a prime number. Returns True if n is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sort_with_primes_first(arr): Takes a list of integers and returns a new list with the integers sorted in ascending order, but with all prime numbers appearing before non-prime numbers. primes = sorted([x for x in arr if is_prime(x)]) non_primes = sorted([x for x in arr if not is_prime(x)]) return primes + non_primes"},{"question":"Write a function called `pairwise_swap` that takes a list and returns a new list where each pair of adjacent elements has been swapped. If the list has an odd number of elements, the last element should remain in its original position. Consider the following ineffective implementation of this task: ```python def pairwise_swap(lst): result = [] for i in range(0, len(lst), 2): if i + 1 < len(lst): result.append(lst[i+1]) result.append(lst[i]) else: result.append(lst[i]) return result ``` The above function fails to address some edge cases and may not be efficient for very large lists. Refactor the `pairwise_swap` function to handle lists of any length properly and improve its efficiency.","solution":"def pairwise_swap(lst): Returns a new list where each pair of adjacent elements has been swapped. If the list has an odd number of elements, the last element remains in its original position. :param lst: List of elements to be swapped :return: A new list with swapped pairs result = lst[:] for i in range(0, len(result) - 1, 2): result[i], result[i+1] = result[i+1], result[i] return result"},{"question":"Given an array of integers `arr` and an integer `k`, find the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than `k`. Example 1: Input: arr = [10, 5, 2, 6], k = 100 Output: 8 Explanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6] Example 2: Input: arr = [1, 2, 3], k = 0 Output: 0 Explanation: There are no subarrays with product less than 0. Note: `1 <= arr.length <= 50000` `1 <= arr[i] <= 1000` `0 <= k <= 10^6`","solution":"def num_subarray_product_less_than_k(arr, k): if k <= 1: return 0 start = 0 product = 1 count = 0 for end in range(len(arr)): product *= arr[end] while product >= k: product /= arr[start] start += 1 count += end - start + 1 return count"},{"question":"Write a Python function that takes in a list of integers and returns the sum of all unique elements in the list. If the list contains nested lists, tuples, or dictionaries, the function should recursively traverse these structures, summing up only the unique integers across all nested levels. Non-integer elements should be ignored. Furthermore, the function should effectively handle integer overflow by safely managing the computation for excessively large sums. To add a layer of complexity, the function must also include an option to treat negative integers as zero during the summation. Ensure your function is optimized for both time and space complexities and can handle large, deeply nested structures efficiently.","solution":"def sum_of_unique_elements(elements, treat_neg_as_zero=False): Returns the sum of all unique integer elements in the list. Recursively processes nested lists, tuples, and dictionaries. Non-integer and duplicate elements are ignored. With option to treat negative integers as zero. unique_elements = set() running_sum = 0 def traverse_and_sum(elems): nonlocal running_sum if isinstance(elems, (list, tuple)): for item in elems: traverse_and_sum(item) elif isinstance(elems, dict): for key, value in elems.items(): traverse_and_sum(key) traverse_and_sum(value) elif isinstance(elems, int): element = elems if not (treat_neg_as_zero and elems < 0) else 0 if element not in unique_elements: unique_elements.add(element) running_sum += element traverse_and_sum(elements) return running_sum"},{"question":"Write a function that, given a list of integers, returns a new list with the square of each element, but with duplicate results removed and the list sorted in ascending order. For example, for the input list `[2, -3, 2, 4]`, the output should be `[4, 9, 16]`.","solution":"def unique_sorted_squares(numbers): Returns a sorted list of unique squares from the input list of integers. # Calculate the square of each number and put it in a set to remove duplicates squared_set = {num ** 2 for num in numbers} # Convert the set to a sorted list sorted_squares = sorted(squared_set) return sorted_squares"},{"question":"Write a Python function that, given a list of integers, returns a new list containing only the prime numbers from the original list. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Avoid using built-in functions or libraries specifically designed to identify prime numbers, and instead implement your own logic to determine the primality of each number. For testing purposes, use the initial list [10, 15, 3, 7, 19, 24, 5, 11], but ensure that your function works for any list of integers provided. Additionally, provide a sample piece of incorrect code that attempts to solve this problem, identify the bugs in this code, and explain why the erroneous code fails to return the correct list of prime numbers.","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"You are given a string consisting of parentheses \'(\' and \')\'. Your task is to determine the length of the longest valid (well-formed) parentheses substring. The input string is guaranteed to have no characters other than \'(\' and \')\'. Write a function `longestValidParentheses(s: str) -> int` that takes a single argument: - `s` (1 ≤ len(s) ≤ 10^5): a string consisting only of characters \'(\' and \')\'. Your function should return an integer representing the length of the longest valid parentheses substring. # Example ```python def longestValidParentheses(s: str) -> int: pass # Example 1: s = \\"(()\\" print(longestValidParentheses(s)) # Output: 2, the longest valid substring is \\"()\\" # Example 2: s = \\")()())\\" print(longestValidParentheses(s)) # Output: 4, the longest valid substring is \\"()()\\" # Example 3: s = \\"\\" print(longestValidParentheses(s)) # Output: 0, there is no valid substring # Example 4: s = \\"()(())\\" print(longestValidParentheses(s)) # Output: 6, the longest valid substring is \\"()(())\\" ```","solution":"def longestValidParentheses(s: str) -> int: max_length = 0 stack = [-1] # Initialize stack with base index for valid substring for i, char in enumerate(s): if char == \'(\': stack.append(i) else: # char == \')\' stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"Given a list of unique positive integers, modify the function to apply specific operations to sort the list in ascending order. Each operation has certain constraints, and not all operations are required. Return the sorted list if feasible, otherwise, return the original list. def constrained_sort(numbers): Given an unordered collection \'numbers\' of N unique positive integers elements numbers[1], numbers[2], ..., numbers[N], determine if it\'s possible to sort the list in ascending order by applying these operations: 1. Rotate the list to the left by any number of positions one or more times. 2. Swap the first and last elements of the list, but only once. 3. Remove exactly one element from the list, but only once. 4. Double the value of any single element, but only once. Check if the sorted list can be achieved given these operations. Return the sorted list if feasible; otherwise, return the original list. An empty list should return an empty list. Example, constrained_sort([3, 4, 5, 1, 2]) ==> [1, 2, 3, 4, 5] constrained_sort([3, 7, 4, 1, 2]) ==> [1, 2, 3, 4, 7] constrained_sort([1, 2, 3, 5, 6]) ==> [1, 2, 3, 5, 6] constrained_sort([5, 4, 3, 1, 2]) ==> [1, 2, 3, 4, 5] # Your code here","solution":"def constrained_sort(numbers): Given an unordered collection \'numbers\' of N unique positive integers elements numbers[1], numbers[2], ..., numbers[N], determine if it\'s possible to sort the list in ascending order by applying these operations: 1. Rotate the list to the left by any number of positions one or more times. 2. Swap the first and last elements of the list, but only once. 3. Remove exactly one element from the list, but only once. 4. Double the value of any single element, but only once. Check if the sorted list can be achieved given these operations. Return the sorted list if feasible; otherwise, return the original list. An empty list should return an empty list. if not numbers: return [] sorted_list = sorted(numbers) # Check if we can rotate the list to achieve sorted order for i in range(len(numbers)): rotated_list = numbers[i:] + numbers[:i] if rotated_list == sorted_list: return sorted_list # Check if swapping first and last elements achieves sorted order swapped_list = numbers[:] swapped_list[0], swapped_list[-1] = swapped_list[-1], swapped_list[0] if sorted(swapped_list) == sorted_list: return sorted_list # Check if removing any single element from the list achieves sorted order for i in range(len(numbers)): temp_list = numbers[:i] + numbers[i+1:] if sorted(temp_list) == sorted(temp_list): return sorted_list # Check if doubling any single element achieves sorted order for i in range(len(numbers)): doubled_list = numbers[:] doubled_list[i] *= 2 if sorted(doubled_list) == sorted_list: return sorted_list return numbers"},{"question":"You are tasked to create a class that mimics the behavior of built-in lists but only allows unique elements (no duplicate values). Your class should support basic list operations such as adding, removing, and accessing elements. # Requirements: 1. **Initialization**: Your class should start with an empty list or an optional initial list of elements, ensuring all elements are unique. 2. **Add Elements**: - Implement a method to add a new element to the list. - This method should ensure that the element is not added if it already exists in the list. 3. **Remove Elements**: - Implement a method to remove an element from the list. - Raise an appropriate exception if the element does not exist in the list. 4. **Access Elements**: - Overload the `__getitem__` method to get elements by their index, similar to a regular list. 5. **String Representation**: - Overload the `__str__` method to return a string representation of the list, showing all elements in their order of insertion. # Example Usage ```python unique_list = UniqueList([1, 2, 3]) unique_list.add(4) # Adds 4 to the list unique_list.add(2) # Does not add 2 again unique_list.remove(3) # Removes 3 from the list print(unique_list[1]) # Outputs 2 print(unique_list) # Outputs: [1, 2, 4] unique_list.remove(3) # Raises an exception ``` # Implementation Notes: - Use Python\'s built-in list to store the elements internally. - Ensure all list operations preserve the order of elements.","solution":"class UniqueList: def __init__(self, initial=None): self.elements = [] if initial: for item in initial: if item not in self.elements: self.elements.append(item) def add(self, item): if item not in self.elements: self.elements.append(item) def remove(self, item): if item in self.elements: self.elements.remove(item) else: raise ValueError(f\\"Item \'{item}\' not found in the list\\") def __getitem__(self, index): return self.elements[index] def __str__(self): return str(self.elements)"},{"question":"Design a Python function that takes a list of integers as input and returns a new list where each element is the square of the corresponding element in the input list. The function should handle an empty list appropriately and return an empty list in such a case.","solution":"def square_elements(input_list): Returns a list with each element being the square of the corresponding element in input_list. :param input_list: List of integers :return: List of integers where each element is squared return [x * x for x in input_list]"},{"question":"Construct a function that takes in a list of integers and returns a new list containing only the unique elements from the original list, maintaining their original order of appearance. Ensure that the function handles cases where the list might be empty or contain only duplicates efficiently.","solution":"def unique_elements(input_list): Returns a list of unique elements from the input list, maintaining their original order. seen = set() unique_list = [] for item in input_list: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Implement a function to analyze a given string and determine if it\'s a valid palindrome, ignoring case and non-alphanumeric characters. The function should return True if the string is a palindrome and False otherwise. For example, the string \\"A man, a plan, a canal, Panama!\\" should return True.","solution":"import re def is_palindrome(s): Returns True if the given string is a valid palindrome, ignoring case and non-alphanumeric characters. Returns False otherwise. # Remove all non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function that takes a list of integers and returns the index of the first occurrence of the largest integer in the list. Demonstrate the functionality of your function using the following list: [4, 2, 7, 1, 7, 5].","solution":"def index_of_first_largest(lst): Returns the index of the first occurrence of the largest integer in the list. Parameters: lst (list): A list of integers. Returns: int: The index of the first occurrence of the largest integer. if not lst: return -1 largest = max(lst) return lst.index(largest)"},{"question":"Write a function that accepts two sorted lists of integers and returns a single sorted list that contains all the elements of both input lists. Your solution should take advantage of the fact that the input lists are already sorted in order to achieve better performance than simply concatenating and sorting them again. Provide a brief analysis of the time complexity of your solution.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) return merged_list # Time Complexity Analysis: # The time complexity of the merge_sorted_lists function is O(n + m), where n is the length of list1 and m is the length of list2. # This is because the function processes each element of both lists exactly once."},{"question":"Write a function that takes a list of integers and a target integer as input and returns all unique combinations of elements from the list that sum up to the target integer. Each number in the list can only be used once in each combination, and the elements in each combination should be sorted in non-decreasing order. The function should return a list of lists containing these combinations. If no combination can be found, return an empty list. You can assume that the input list contains only positive integers.","solution":"def combination_sum(nums, target): Returns all unique combinations of elements from nums that sum up to the target integer. Each number in nums can only be used once in each combination. Args: nums (list of int): List of positive integers. target (int): Target integer. Returns: list of list of int: List of lists containing combinations that sum up to target. def backtrack(start, target, path, result): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue backtrack(i + 1, target - nums[i], path + [nums[i]], result) nums.sort() result = [] backtrack(0, target, [], result) return result"},{"question":"Develop a function that takes a string and returns the first non-repeated character in it. If there are no non-repeated characters, return an empty string. Write a function to verify the correctness of your solution. What is the time complexity of your approach?","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in a given string s. If no such character exists, returns an empty string. # Dictionary to store character counts char_count = {} # First pass to count occurrences for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first non-repeated character for char in s: if char_count[char] == 1: return char return \\"\\" # Time complexity: O(n) - where n is the length of the string"},{"question":"Write a function that rearranges all characters in a string so that no two adjacent characters are the same. If this is not possible, return an empty string. Finish the below code: def rearrange_string(s: str) -> str: Rearrange the characters in the string so that no two adjacent characters are the same. >>> rearrange_string(\\"aabb\\") \'abab\' >>> rearrange_string(\\"aaab\\") \'\'","solution":"from heapq import heappop, heappush from collections import Counter def rearrange_string(s: str) -> str: Rearrange the characters in the string so that no two adjacent characters are the same. If it\'s not possible to rearrange, return an empty string. Args: s (str): The input string to be rearranged. Returns: str: The rearranged string or an empty string if not possible. Examples: >>> rearrange_string(\\"aabb\\") \'abab\' >>> rearrange_string(\\"aaab\\") \'\' # Create a frequency counter for the characters in the string counter = Counter(s) # Create a max heap based on character frequency # Use negative counts because Python\'s heapq implements a min heap max_heap = [] for char, freq in counter.items(): heappush(max_heap, (-freq, char)) result = [] prev_freq, prev_char = 0, \\"\\" while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char # freq is negative, so add 1 to reduce absolute value rearranged_str = \\"\\".join(result) if len(rearranged_str) == len(s): return rearranged_str else: return \\"\\""},{"question":"Consider the following Python class definition: ```python class Counter: def __init__(self, start=0): self.count = start def increment(self): self.count += 1 def reset(self): self.count = 0 # Example usage: counter = Counter() counter.increment() counter.increment() print(counter.count) # Output: 2 counter.reset() print(counter.count) # Output: 0 ``` 1. Why does the `increment` method work correctly to increment the count by 1 each time it is called? 2. Suppose you want to modify the `increment` method to accept an optional parameter that specifies how much to increment by (defaulting to 1 if no argument is provided). How would you change the class definition to support this functionality? 3. Write the modified `Counter` class definition.","solution":"class Counter: def __init__(self, start=0): self.count = start def increment(self, amount=1): self.count += amount def reset(self): self.count = 0"},{"question":"Implement a function that takes a positive integer array as input, identifies all possible combinations of the array elements that sum up to a positive integer target, and returns the lists of these combinations in a non-decreasing order. Ensure each unique combination is returned only once, even if the elements in the array contain duplicates, and the elements in each combination must also be in non-decreasing order. Function Signature: ```python def find_combinations(nums: List[int], target: int) -> List[List[int]]: ``` **Example:** ``` Input: nums = [2, 3, 6, 7, 7] target = 7 Output: [[2, 2, 3], [7]] ``` **Constraints:** - The length of the input array `nums` will not exceed 30. - The values of the elements in `nums` will be non-negative integers not exceeding 20. - The target will be a positive integer not exceeding 100.","solution":"from typing import List def find_combinations(nums: List[int], target: int) -> List[List[int]]: nums.sort() result = [] def backtrack(start, path, target): if target == 0: result.append(path) return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue if nums[i] > target: break backtrack(i, path + [nums[i]], target - nums[i]) backtrack(0, [], target) return result"},{"question":"Implement a program that reads a CSV file containing a list of employees with their respective salaries and departments. The program should then calculate the total salary for each department and output the results. Ensure your solution handles large files efficiently.","solution":"import csv from collections import defaultdict def calculate_department_salaries(file_path): Read the CSV file and calculates the total salary for each department. Args: file_path (str) : The path to the CSV file. Returns: dict : A dictionary with department names as keys and total salaries as values. department_salaries = defaultdict(float) with open(file_path, mode=\'r\', newline=\'\') as csvfile: csv_reader = csv.DictReader(csvfile) for row in csv_reader: department = row[\'Department\'] salary = float(row[\'Salary\']) department_salaries[department] += salary return dict(department_salaries)"},{"question":"Create a function `find_winning_moves(board)` that evaluates the current state of a Tic-Tac-Toe board represented as a 3x3 list of lists and returns all possible winning moves for the \\"X\\" player. Assume that \\"X\\" is always the next player to move, \\"O\\" represents the opponent, and empty spots are denoted by an empty string `\\"\\"`. If there are no possible winning moves, return an empty list. # Example: ```python board = [ [\\"X\\", \\"O\\", \\"X\\"], [\\"O\\", \\"X\\", \\"\\"], [\\"\\", \\"O\\", \\"\\"] ] ``` # Expected output: ```python [(2, 0), (2, 2)] ``` In the given board state, the \\"X\\" player can win by placing an \\"X\\" either in the bottom-left corner (2, 0) or the bottom-right corner (2, 2). If there are multiple winning moves, return all of them as a list of tuples representing the row and column indices.","solution":"def check_win(board, player, row, col): Helper function to check if placing a player\'s mark at the position (row, col) would result in a win. test_board = [row.copy() for row in board] test_board[row][col] = player # Check row if all(cell == player for cell in test_board[row]): return True # Check column if all(test_board[r][col] == player for r in range(3)): return True # Check diagonals if row == col and all(test_board[i][i] == player for i in range(3)): return True if row + col == 2 and all(test_board[i][2 - i] == player for i in range(3)): return True return False def find_winning_moves(board): Returns a list of tuples representing the positions where \'X\' can place a mark to win the game. winning_moves = [] for row in range(3): for col in range(3): if board[row][col] == \\"\\" and check_win(board, \\"X\\", row, col): winning_moves.append((row, col)) return winning_moves"},{"question":"You are presented with a challenge named \\"Increasing Subsequences\\". The challenge is articulated as such: Given an integer array nums, your mission is to return all possible subsequences of the array in which the elements are in strictly increasing order. The solution set should not contain duplicate subsequences. For example, consider the following scenario: Input: [4, 6, 7, 7] Output: [[4, 6], [4, 6, 7], [4, 6, 7, 7], [4, 7], [4, 7, 7], [6, 7], [6, 7, 7], [7, 7]] This is because: - Subsequences [4, 6], [4, 6, 7], [4, 6, 7, 7], [4, 7], [4, 7, 7], [6, 7], [6, 7, 7], [7, 7] - All these subsequences are in strictly increasing order Please note the following limitations: - The length of the nums array will be in the range [1, 15]. - The integer values in the nums array will be within the range [-100, 100].","solution":"from typing import List def findSubsequences(nums: List[int]) -> List[List[int]]: def backtrack(start: int, path: List[int]): if len(path) > 1: result.add(tuple(path)) for i in range(start, len(nums)): if not path or nums[i] >= path[-1]: path.append(nums[i]) backtrack(i + 1, path) path.pop() result = set() backtrack(0, []) return [list(seq) for seq in result]"},{"question":"You are given a list of transactions, where each transaction is represented by a dictionary with keys \'amount\', \'type\', and \'category\'. Write a Python function that categorizes and computes the total income and expenses per category, and then calculates the net balance (total income - total expenses). The function should return a dictionary with each category as a key and a tuple as the value, where the tuple contains the total income, total expenses, and net balance for that category. ```python transactions = [ {\'amount\': 1000, \'type\': \'income\', \'category\': \'salary\'}, {\'amount\': 200, \'type\': \'income\', \'category\': \'freelance\'}, {\'amount\': 300, \'type\': \'expense\', \'category\': \'grocery\'}, {\'amount\': 150, \'type\': \'expense\', \'category\': \'entertainment\'}, {\'amount\': 500, \'type\': \'expense\', \'category\': \'utilities\'}, {\'amount\': 450, \'type\': \'income\', \'category\': \'salary\'}, {\'amount\': 100, \'type\': \'income\', \'category\': \'investment\'}, {\'amount\': 80, \'type\': \'expense\', \'category\': \'transportation\'}, {\'amount\': 700, \'type\': \'expense\', \'category\': \'rent\'}, {\'amount\': 300, \'type\': \'income\', \'category\': \'freelance\'} ] def categorize_transactions(transactions): # Your code here # Example usage: result = categorize_transactions(transactions) print(result) # Expected Output: # { # \'salary\': (1450, 0, 1450), # \'freelance\': (500, 0, 500), # \'grocery\': (0, 300, -300), # \'entertainment\': (0, 150, -150), # \'utilities\': (0, 500, -500), # \'investment\': (100, 0, 100), # \'transportation\': (0, 80, -80), # \'rent\': (0, 700, -700) # } ```","solution":"def categorize_transactions(transactions): Categorizes and computes the total income and expenses per category, and then calculates the net balance (total income - total expenses). Parameters: transactions (list): A list of transaction dictionaries. Returns: dict: A dictionary with categories as keys and tuples as values. Each tuple contains total income, total expenses, and net balance for that category. categories = {} for transaction in transactions: amount = transaction[\'amount\'] trans_type = transaction[\'type\'] category = transaction[\'category\'] if category not in categories: categories[category] = {\'income\': 0, \'expense\': 0} if trans_type == \'income\': categories[category][\'income\'] += amount elif trans_type == \'expense\': categories[category][\'expense\'] += amount result = {} for category, amounts in categories.items(): income = amounts[\'income\'] expenses = amounts[\'expense\'] net_balance = income - expenses result[category] = (income, expenses, net_balance) return result"},{"question":"Write a Python function named `merge_two_dicts` that takes in two dictionaries and returns a new dictionary by merging them. If there are any common keys, their values should be summed up. ```python def merge_two_dicts(dict1, dict2): Merges two dictionaries. If there are common keys, sums their values. Args: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary containing the merged data. pass # Example usage: dict1 = {\'a\': 1, \'b\': 2, \'c\': 3} dict2 = {\'b\': 3, \'c\': 4, \'d\': 5} # merge_two_dicts(dict1, dict2) should return {\'a\': 1, \'b\': 5, \'c\': 7, \'d\': 5} ```","solution":"def merge_two_dicts(dict1, dict2): Merges two dictionaries. If there are common keys, sums their values. Args: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary containing the merged data. merged_dict = dict1.copy() for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value else: merged_dict[key] = value return merged_dict"},{"question":"Write a function `merge_and_sort_dicts(dict1: dict, dict2: dict) -> dict` that takes two dictionaries as input. The function should merge the two dictionaries into one and then sort the resulting dictionary by its values in ascending order. If two values are the same, then the keys should be sorted in ascending order. The function should return the sorted dictionary. # Input - Two dictionaries `dict1` and `dict2`, where keys are strings and values are integers. # Output - A dictionary that is the merged and sorted version of the two input dictionaries. # Examples ```python merge_and_sort_dicts({\\"a\\": 3, \\"b\\": 1}, {\\"c\\": 2, \\"d\\": 2}) # Output: {\'b\': 1, \'c\': 2, \'d\': 2, \'a\': 3} merge_and_sort_dicts({\\"apple\\": 15, \\"banana\\": 6}, {\\"cherry\\": 7}) # Output: {\'banana\': 6, \'cherry\': 7, \'apple\': 15} ``` # Constraints - The input dictionaries will not be empty. - There will be no duplicate keys between the two dictionaries.","solution":"def merge_and_sort_dicts(dict1: dict, dict2: dict) -> dict: Merges two dictionaries and sorts the resulting dictionary by its values in ascending order. If two values are the same, then the keys should be sorted in ascending order. Parameters: - dict1: First dictionary to merge. - dict2: Second dictionary to merge. Returns: - A merged and sorted dictionary. merged_dict = {**dict1, **dict2} # Merging both dictionaries # Sorting by values then by keys if values are the same sorted_dict = dict(sorted(merged_dict.items(), key=lambda item: (item[1], item[0]))) return sorted_dict"},{"question":"Write a function in Python that takes a list of integers as input and returns a new list where each element is squared if it is even, and cubed if it is odd. Your function should maintain the original order of the elements. # Constraints: - The input list can contain up to 1000 integers. - Each integer in the list can be in the range of -10^5 to 10^5. # Example: Input: `[2, 3, 4, 5]` Output: `[4, 27, 16, 125]` Input: `[-2, -3, 0, 1]` Output: `[4, -27, 0, 1]` # Instructions: 1. Define a function named `transform_list` that accepts one argument (a list of integers). 2. Iterate through each element in the input list, square it if it is even, and cube it if it is odd. 3. Return the transformed list with the modified elements. # Function Signature: ```python def transform_list(arr: List[int]) -> List[int]: ``` Hint: You can use a list comprehension for a concise solution.","solution":"from typing import List def transform_list(arr: List[int]) -> List[int]: Takes a list of integers as input and returns a new list where each element is squared if it is even, and cubed if it is odd. return [(x ** 2 if x % 2 == 0 else x ** 3) for x in arr]"},{"question":"Write a Python function that uses the Pandas library to read a large CSV file, manages the data to replace all missing values in a specified column with the median of that column, and saves the cleaned dataset to a new CSV file. Your function should take three parameters: the input file path, the column name with missing values, and the output file path. Ensure the solution handles potential memory issues efficiently.","solution":"import pandas as pd def clean_csv(input_file_path, column_name, output_file_path): Reads a large CSV file, replaces all missing values in the specified column with the median of that column, and saves the cleaned dataset to a new CSV file. Parameters: input_file_path (str): The path to the input CSV file. column_name (str): The name of the column to clean missing values. output_file_path (str): The path to save the cleaned CSV file. # Chunk size for reading CSV to handle large files chunk_size = 10000 # Calculate the median of the column across all chunks median_values = [] for chunk in pd.read_csv(input_file_path, chunksize=chunk_size): median_values.append(chunk[column_name].median()) median_value = pd.Series(median_values).median() # Read and clean the data in chunks cleaned_chunks = [] for chunk in pd.read_csv(input_file_path, chunksize=chunk_size): chunk[column_name].fillna(median_value, inplace=True) cleaned_chunks.append(chunk) # Concatenate all cleaned chunks and save to new CSV file cleaned_data = pd.concat(cleaned_chunks) cleaned_data.to_csv(output_file_path, index=False)"},{"question":"Write a Python program that processes a JSON file containing multiple book records. Each book record includes: title, author, genre, published_year, and copies_sold. The program should: 1. Load the JSON data and filter out books published before the year 2000. 2. Group the remaining books by genre. 3. For each genre, print out the total number of books and the book with the highest number of copies sold. 4. Additionally, calculate and display the average number of copies sold per book for each genre. If there is any issue with reading the JSON file (e.g., file not found, incorrect format), the program should handle the error gracefully and inform the user. Ensure that the solution is efficient, as the JSON file may contain a large number of book records.","solution":"import json def process_books(json_file): try: with open(json_file, \'r\') as file: data = json.load(file) except FileNotFoundError: return \\"Error: File not found.\\" except json.JSONDecodeError: return \\"Error: Incorrect JSON format.\\" filtered_books = [book for book in data if book.get(\'published_year\', 0) >= 2000] books_by_genre = {} for book in filtered_books: genre = book.get(\'genre\', \'Unknown\') if genre not in books_by_genre: books_by_genre[genre] = [] books_by_genre[genre].append(book) result = {} for genre, books in books_by_genre.items(): total_books = len(books) highest_selling_book = max(books, key=lambda b: b.get(\'copies_sold\', 0)) total_copies_sold = sum(book.get(\'copies_sold\', 0) for book in books) avg_copies_sold = total_copies_sold / total_books if total_books > 0 else 0 result[genre] = { \'total_books\': total_books, \'highest_selling_book\': highest_selling_book, \'average_copies_sold\': avg_copies_sold } return result"},{"question":"Write a function that takes an integer as input and calculates the factorial of that number. The factorial of a number n is the product of all positive integers less than or equal to n. If the input integer is negative, the function should return -1 as factorial for negative numbers is undefined.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns -1 as factorial is undefined for negative numbers. if n < 0: return -1 elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Devise a function that discerns the most frequent element within a supplied list of integers. If multiple elements share the highest frequency, the function should return the smallest of these elements. Implement and return the ensuing value. Sample Input: [4, 1, 2, 2, 3, 3, 3, 4, 4, 4] Expected Output: 4","solution":"from collections import Counter def most_frequent_element(arr): Returns the most frequent element in the array. If multiple elements have the same frequency, the smallest one is returned. if not arr: raise ValueError(\\"Input list is empty\\") # Count the frequency of each element in the list counter = Counter(arr) # Find the maximum frequency max_freq = max(counter.values()) # Find all elements that have the maximum frequency most_frequent = [k for k, v in counter.items() if v == max_freq] # Return the smallest element among those with the highest frequency return min(most_frequent)"},{"question":"Suppose you are given a set of points in a 2D plane, each point represented by its (x, y) coordinates. You need to determine whether there is at least one pair of points that are exactly `d` units apart. For example, if the input points are `[(0, 0), (3, 4), (6, 8)]` and the value of `d` is `5`, the function should return `True` because the distance between the points (0, 0) and (3, 4) is 5 units (calculated using the distance formula). Write a function `has_pair_with_distance(points, d)` that takes a list of tuples representing the points and an integer `d`, and returns a boolean value indicating whether there is a pair of points with a distance of exactly `d` units. **Function Signature:** ```python def has_pair_with_distance(points: List[Tuple[int, int]], d: int) -> bool: ``` **Examples:** ```python has_pair_with_distance([(0, 0), (3, 4), (6, 8)], 5) # True has_pair_with_distance([(0, 0), (1, 1), (2, 2)], 3) # False has_pair_with_distance([(0, 0), (1, 1), (4, 5)], 5) # True ``` **Constraints:** - The list of points will contain at most 1000 points. - The coordinates of each point will be integers in the range [-10^4, 10^4]. - The value `d` will be a positive integer in the range [1, 10^4].","solution":"from typing import List, Tuple import math def has_pair_with_distance(points: List[Tuple[int, int]], d: int) -> bool: Determines if there are any two points with a distance of exactly d units. n = len(points) for i in range(n): for j in range(i + 1, n): # Calculate the distance between points[i] and points[j] dist = math.sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2) if dist == d: return True return False"},{"question":"Write a Python function that simulates a basic shopping cart system for an online store. The function should allow users to add items, remove items, and view the current items in the cart. Additionally, the cart should store the quantities for each item and provide a total cost of the items in the cart. The function should be able to handle the following operations: 1. Add an item to the cart along with its price and quantity. 2. Remove a specific quantity of an item from the cart. If the quantity to be removed exceeds the current quantity, remove the item completely. 3. Display all items in the cart with their respective quantities and total cost. 4. Handle errors and exceptions gracefully, such as removing an item that does not exist in the cart. Consider the cart to be a dictionary where the keys are item names and the values are dictionaries with \'price\' and \'quantity\' as keys. Example usage: ```python cart = {} add_item(cart, \\"Apple\\", 0.5, 10) add_item(cart, \\"Banana\\", 0.2, 5) remove_item(cart, \\"Apple\\", 3) remove_item(cart, \\"Orange\\", 1) # Should handle gracefully view_cart(cart) ``` Expected output after the operations: ``` Items in cart: Apple: 7 @ 0.5 each Banana: 5 @ 0.2 each Total cost: 5.5 ```","solution":"def add_item(cart, item_name, price, quantity): Adds an item with the specified price and quantity to the cart. If the item already exists, update its quantity and price. if item_name in cart: cart[item_name][\'quantity\'] += quantity cart[item_name][\'price\'] = price # Assume updating the price if different else: cart[item_name] = {\'price\': price, \'quantity\': quantity} def remove_item(cart, item_name, quantity): Removes the specified quantity of the item from the cart. If quantity to be removed exceeds the current quantity, remove the item completely. if item_name in cart: if cart[item_name][\'quantity\'] <= quantity: del cart[item_name] else: cart[item_name][\'quantity\'] -= quantity def view_cart(cart): Prints the current items in the cart with their quantities and total cost. total_cost = 0 print(\\"Items in cart:\\") for item_name, details in cart.items(): item_total = details[\'price\'] * details[\'quantity\'] total_cost += item_total print(f\\"{item_name}: {details[\'quantity\']} @ {details[\'price\']} each\\") print(f\\"Total cost: {total_cost:.2f}\\") # Usage example # cart = {} # add_item(cart, \\"Apple\\", 0.5, 10) # add_item(cart, \\"Banana\\", 0.2, 5) # remove_item(cart, \\"Apple\\", 3) # remove_item(cart, \\"Orange\\", 1) # Should handle gracefully # view_cart(cart)"},{"question":"Given a list of integers and the length n, write a Python function that performs the following operations: - Create a new list that contains only the prime numbers from the given list. - Next, return the difference between the smallest prime number in the list and the largest prime number in the list. If the list does not contain any prime numbers, your function should return -1. For example, given the list [10, 15, 3, 7, 2, 8, 5] and n = 7, your function should first create the list [3, 7, 2, 5] and then return the difference between the smallest prime (2) and the largest prime (7), which is 5. Please include test cases in your answer.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def prime_diff(lst, n): Given a list lst and its length n, returns the difference between the smallest prime number and the largest prime number in the list. If there are no prime numbers, return -1. primes = [num for num in lst if is_prime(num)] if not primes: return -1 return max(primes) - min(primes)"},{"question":"Create a function that takes a string as input and returns a list of all the unique characters in the string sorted by their frequency in descending order. If two characters have the same frequency, they should be sorted by their order of appearance in the string.","solution":"def unique_chars_sorted_by_frequency(s): from collections import Counter, OrderedDict # Count the frequency of each character count = Counter(s) # Keep original order of characters ordered_char_count = OrderedDict((char, count[char]) for char in s if count[char] > 0) # Sort characters by frequency (descending) sorted_chars = sorted(ordered_char_count.keys(), key=lambda x: (-ordered_char_count[x], s.index(x))) return sorted_chars"},{"question":"Prompt: Create a text-based adventure game where the player explores different rooms and interacts with objects. The game should have at least three interconnected rooms and allow the player to pick up items, use items, and move between rooms. Implement a system to save and load the game state, allowing the player to resume their adventure from where they left off. Additionally, provide a comprehensive explanation of how the save and load feature is designed to handle data integrity and ensure the game\'s state is accurately preserved and restored. Discuss any challenges faced with this feature and how they were overcome.","solution":"import json class Room: def __init__(self, name, description, items=None, connections=None): if items is None: items = [] if connections is None: connections = {} self.name = name self.description = description self.items = items self.connections = connections def connect(self, room, direction): self.connections[direction] = room class Player: def __init__(self, current_room): self.current_room = current_room self.inventory = [] def move(self, direction): if direction in self.current_room.connections: self.current_room = self.current_room.connections[direction] return f\\"Moved to {self.current_room.name}.\\" return \\"You can\'t go that way!\\" def pick_up(self, item): if item in self.current_room.items: self.current_room.items.remove(item) self.inventory.append(item) return f\\"Picked up {item}.\\" return f\\"No {item} here.\\" def use_item(self, item): if item in self.inventory: return f\\"You used {item}.\\" return f\\"You don\'t have {item}.\\" def save_game(player, filename=\'savefile.json\'): data = { \'current_room\': player.current_room.name, \'inventory\': player.inventory } with open(filename, \'w\') as f: json.dump(data, f) def load_game(rooms, filename=\'savefile.json\'): with open(filename, \'r\') as f: data = json.load(f) player = Player(rooms[data[\'current_room\']]) player.inventory = data[\'inventory\'] return player # Creating rooms living_room = Room(\\"Living Room\\", \\"A cozy living room\\", [\\"key\\"]) kitchen = Room(\\"Kitchen\\", \\"A place to cook food\\") bedroom = Room(\\"Bedroom\\", \\"A place to rest\\") # Connecting rooms living_room.connect(kitchen, \\"north\\") kitchen.connect(living_room, \\"south\\") kitchen.connect(bedroom, \\"east\\") bedroom.connect(kitchen, \\"west\\") # Available rooms dictionary rooms = { \\"Living Room\\": living_room, \\"Kitchen\\": kitchen, \\"Bedroom\\": bedroom } # Creating a player starting in the living room player = Player(living_room)"},{"question":"Write a function that takes a list of integers and a target integer as inputs and returns True if there are two distinct numbers in the list that add up to the target, and False otherwise. The function should have a time complexity of O(n). **Example:** ``` Input: [1, 2, 3, 9], 8 Output: False Input: [1, 2, 4, 4], 8 Output: True ``` **Note:** You may not use the same element twice.","solution":"def two_sum(nums, target): Returns True if there are two distinct numbers in the list that add up to the target. Args: nums: List of integers. target: Integer target. Returns: A boolean value indicating if there are two distinct numbers in the list that add up to the target. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Write a Python function that reads a CSV file containing data on daily weather observations. Each row represents an observation with columns for \'Date\', \'Temperature\', \'Wind Speed\', and \'Precipitation\'. The function should compute and display: 1. The average temperature and wind speed for the entire dataset. 2. The date with the highest recorded temperature. 3. Count the number of days with precipitation more significant than 0.1 inches. Handle exceptions that may arise if the file is not found or if there are issues with the data format.","solution":"import csv from datetime import datetime def parse_csv(file_path): Reads a CSV file and returns its contents as a list of dictionaries. try: with open(file_path, \'r\') as file: reader = csv.DictReader(file) data = [row for row in reader] return data except FileNotFoundError: print(f\\"File {file_path} not found.\\") return None except csv.Error as e: print(f\\"Error reading CSV file: {e}\\") return None def analyze_weather_data(file_path): Analyzes weather data from a CSV file. Output: 1. Average temperature and wind speed for the entire dataset. 2. The date with the highest recorded temperature. 3. Count of days with precipitation more significant than 0.1 inches. data = parse_csv(file_path) if data is None: return temperatures = [] wind_speeds = [] max_temp = float(\'-inf\') max_temp_date = None days_with_precipitation = 0 for row in data: try: temperature = float(row[\'Temperature\']) wind_speed = float(row[\'Wind Speed\']) precipitation = float(row[\'Precipitation\']) date = datetime.strptime(row[\'Date\'], \'%Y-%m-%d\') temperatures.append(temperature) wind_speeds.append(wind_speed) if temperature > max_temp: max_temp = temperature max_temp_date = date if precipitation > 0.1: days_with_precipitation += 1 except ValueError as e: print(f\\"Data format error: {e}\\") continue average_temp = sum(temperatures) / len(temperatures) if temperatures else 0 average_wind_speed = sum(wind_speeds) / len(wind_speeds) if wind_speeds else 0 print(f\\"Average Temperature: {average_temp:.2f}\\") print(f\\"Average Wind Speed: {average_wind_speed:.2f}\\") print(f\\"Date with Highest Temperature: {max_temp_date.strftime(\'%Y-%m-%d\') if max_temp_date else \'N/A\'}\\") print(f\\"Days with Precipitation > 0.1 inches: {days_with_precipitation}\\")"},{"question":"Write a function that takes a string as input and returns the first non-repeating character in the string. If there is no non-repeating character, return an underscore (\'_\'). Your solution should demonstrate efficient use of data structures to achieve optimal time complexity.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns an underscore (\'_\'). from collections import Counter # Count frequency of each character char_count = Counter(s) # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"Write a function to find the middle element of a linked list. If the linked list has an even number of elements, return the second of the two middle elements. Linked List: 4->5->1->8->9 Expected Output: 1","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_middle_element(head): Finds and returns the middle element of a linked list. If the linked list has an even number of elements, it returns the second of the two middle elements. slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow.val"},{"question":"Generate a Python script to implement a K-means clustering algorithm from scratch. The script should be able to: - Initialize centroids randomly - Assign data points to the nearest centroid - Update centroids based on the mean of assigned data points - Repeat the above steps until centroids do not change significantly - Output the final cluster centroids and assignment of data points Use the provided sample_iris dataset from Scikit-learn library.","solution":"import numpy as np from sklearn.datasets import load_iris from sklearn.preprocessing import StandardScaler def initialize_centroids(X, k): np.random.seed(0) indices = np.random.choice(X.shape[0], k, replace=False) return X[indices] def assign_clusters(X, centroids): distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2) return np.argmin(distances, axis=1) def update_centroids(X, labels, k): new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)]) return new_centroids def kmeans(X, k, max_iters=100, tol=1e-4): centroids = initialize_centroids(X, k) for i in range(max_iters): labels = assign_clusters(X, centroids) new_centroids = update_centroids(X, labels, k) if np.linalg.norm(new_centroids - centroids) < tol: break centroids = new_centroids return centroids, labels # Load sample data iris = load_iris() data = iris.data scaler = StandardScaler() data = scaler.fit_transform(data) # Example usage final_centroids, final_labels = kmeans(data, 3)"},{"question":"Write a Python function named `summarize_text` that takes a string of text as input and returns a summary of the text. The summary should be generated by extracting the first sentence from each paragraph. Paragraphs are defined by line breaks (\\"n\\"). If a paragraph contains more than one sentence, only the first sentence should be included in the summary. For this problem, a sentence is defined as a sequence of characters ending with a period (\\".\\"). Assume that the input text is well-formed and each sentence ends with a single period followed by a space. Example: Input: ``` text = Python is an interpreted, high-level and general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python design philosophy emphasizes code readability with its notable use of significant whitespace. Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Output: ``` \\"Python is an interpreted, high-level and general-purpose programming language.nPython is dynamically typed and garbage-collected.\\" ```","solution":"def summarize_text(text): Returns a summary of the text by extracting the first sentence from each paragraph. Parameters: text (str): The input text which may contain multiple paragraphs. Returns: str: A summary of the text formed by the first sentence of each paragraph. paragraphs = text.strip().split(\'n\') summary = [] for paragraph in paragraphs: if paragraph: sentences = paragraph.strip().split(\'. \') first_sentence = sentences[0] + \'.\' summary.append(first_sentence) return \'n\'.join(summary)"},{"question":"Write a function `isPalindrome` which takes a string as input and returns `True` if the string is a palindrome (reads the same backward as forward), and `False` otherwise. Ignore spaces, punctuation, and case differences when determining if the string is a palindrome.","solution":"import re def isPalindrome(s): Returns True if the input string is a palindrome, False otherwise. Ignores spaces, punctuation, and case differences. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is the same forwards and backwards return cleaned_string == cleaned_string[::-1]"},{"question":"Write a function that takes a list of integers and returns a dictionary with the keys \\"even\\" and \\"odd\\". The values should be lists of indices where even and odd numbers occur in the original list, respectively. Input: IndexParity([10, 23, 36, 41, 52, 65]) Output: {\\"even\\": [0, 2, 4], \\"odd\\": [1, 3, 5]} This challenge involves iterating over the list, checking the parity of each element, and organizing data into a dictionary format, similar in complexity and scope to handling time zones and daylight saving times.","solution":"def IndexParity(arr): Returns a dictionary with the keys \\"even\\" and \\"odd\\". The values are lists of indices where even and odd numbers occur in the original list, respectively. result = {\\"even\\": [], \\"odd\\": []} for index, value in enumerate(arr): if value % 2 == 0: result[\\"even\\"].append(index) else: result[\\"odd\\"].append(index) return result"},{"question":"Write a Python function `most_frequent_words(text, n)` that takes a string `text` and an integer `n`, and returns a list of tuples containing the `n` most frequent words in the `text` and their respective counts. The words in the input `text` should be treated as case-insensitive and should be stripped of any punctuation. The function should return the words in descending order of frequency. If multiple words have the same frequency, return them in alphabetical order. Example: ```python text = \\"Hello, hello! How are you? You look great, hello you.\\" n = 2 most_frequent_words(text, n) ``` Output: ```python [(\'hello\', 3), (\'you\', 3)] ```","solution":"import re from collections import Counter def most_frequent_words(text, n): Returns a list of tuples representing the n most frequent words and their counts. Words are treated case-insensitively and stripped of any punctuation. # Convert to lowercase and remove punctuation text = text.lower() text = re.sub(r\'[^ws]\', \'\', text) words = text.split() # Count the frequency of each word word_counts = Counter(words) # Sort words by frequency first, then alphabetically sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) return sorted_words[:n]"},{"question":"Design and implement a function that takes a list of integers and an integer threshold as input. The function should return a new list containing all the contiguous sublists from the original list where the sum of the elements in each sublist does not exceed the given threshold. The order of elements in the sublists should be maintained, and the sublists should be as long as possible without exceeding the threshold.","solution":"def find_sublists(nums, threshold): Returns all contiguous sublists from \'nums\' where the sum of elements in each sublist does not exceed \'threshold\'. Sublists are as long as possible without exceeding the threshold. result = [] current_sublist = [] current_sum = 0 for num in nums: if current_sum + num <= threshold: current_sublist.append(num) current_sum += num else: if current_sublist: result.append(current_sublist) current_sublist = [num] if num <= threshold else [] current_sum = num if num <= threshold else 0 if current_sublist: result.append(current_sublist) return result"},{"question":"Design a function that takes in a string containing a mix of uppercase and lowercase letters, digits, and special characters. The function should then categorize and count the number of uppercase characters, lowercase characters, digits, and special characters. Additionally, it should return the categorized counts in a dictionary format. If the string is empty, return an error message. For example: input = \\"HelloWorld123!@#\\" Output: { \\"uppercase\\": 2, \\"lowercase\\": 8, \\"digits\\": 3, \\"special_characters\\": 3 }","solution":"def categorize_counts(input_str): Categorizes and counts the number of uppercase characters, lowercase characters, digits, and special characters in the input string. If the string is empty, returns an error message. Parameters: input_str (str): The input string containing a mix of characters. Returns: dict: A dictionary with counts of uppercase, lowercase, digits, special_characters. str: An error message if the input string is empty. if not input_str: return \\"Error: The input string is empty\\" counts = { \\"uppercase\\": 0, \\"lowercase\\": 0, \\"digits\\": 0, \\"special_characters\\": 0 } for char in input_str: if char.isupper(): counts[\\"uppercase\\"] += 1 elif char.islower(): counts[\\"lowercase\\"] += 1 elif char.isdigit(): counts[\\"digits\\"] += 1 else: counts[\\"special_characters\\"] += 1 return counts"},{"question":"Given a list of stock prices for a company over a period of time, write a Python function to find the maximum possible profit you can achieve by buying and selling the stock at most once. The function should return 0 if no profit can be made. **Function Signature:** ```python def max_profit(prices: List[int]) -> int: ``` **Input:** - `prices`: A list of integers representing the stock prices where `prices[i]` is the price of the stock on day `i`. **Output:** - An integer representing the maximum profit that can be achieved. **Constraints:** - The length of `prices` will be in the range `[1, 10^5]`. - The value of each entry in `prices` will be in the range `[0, 10^4]`. **Example:** ```python prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5 ``` **Explanation:** - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. - Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. - If no profit is possible, the function should return 0. **Assumptions:** - You may not sell a stock before you buy one. - If the list is of length 1, the return value should be 0, as no transactions can be made.","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit that can be achieved by buying and selling the stock at most once. If no profit can be made, returns 0. if not prices or len(prices) == 1: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a function in Python that takes a list of integers as input and returns a tuple containing two elements: the first element is the list sorted in ascending order, and the second element is a dictionary with the original list\'s mean, median, and mode as its keys and their respective computed values as its values. If there are multiple modes, return any one of them. Your function should handle scenarios where the input list might be empty, and in such cases, return an empty list and an empty dictionary. For instance: If the input is `[4,1,2,2,5,4,7,8,8,8]`, the output should be `([1, 2, 2, 4, 4, 5, 7, 8, 8, 8], {\'mean\': 4.9, \'median\': 4.5, \'mode\': 8})`. Also, ensure to start your function with the following code template which you need to complete: ```python def analyze_numbers(numbers): if not numbers: return [], {} sorted_numbers = sorted(numbers) n = len(sorted_numbers) # Compute mean mean = sum(sorted_numbers) / n # Compute median if n % 2 == 0: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 else: median = sorted_numbers[n // 2] # Compute mode frequency = {} for number in sorted_numbers: frequency[number] = frequency.get(number, 0) + 1 mode = max(frequency, key=frequency.get) stats = { \'mean\': mean, \'median\': median, \'mode\': mode } return sorted_numbers, stats ``` Ensure the final function handles all edge cases effectively and passes all tests when implemented correctly.","solution":"def analyze_numbers(numbers): if not numbers: return [], {} sorted_numbers = sorted(numbers) n = len(sorted_numbers) # Compute mean mean = sum(sorted_numbers) / n # Compute median if n % 2 == 0: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 else: median = sorted_numbers[n // 2] # Compute mode frequency = {} for number in sorted_numbers: frequency[number] = frequency.get(number, 0) + 1 mode = max(frequency, key=frequency.get) stats = { \'mean\': mean, \'median\': median, \'mode\': mode } return sorted_numbers, stats"},{"question":"You are given a list of integers representing durations in minutes and a target duration. Your task is to find a pair of durations from the list whose sum is closest to the target duration. If there are multiple pairs with the same closest sum, return the pair with the smallest difference between the durations. If there are still multiple pairs, return the pair with the smallest individual duration first. Example: ```python durations = [45, 30, 60, 70, 15] target_duration = 75 ``` The function should return `(30, 45)` because 30 + 45 = 75 which is exactly the target duration. Write a Python function to solve this problem. The function signature is as follows: ```python def closest_duration_pair(durations, target_duration): pass ``` Consider edge cases where there might be no pairs or only one possible pair. Handle the inputs and outputs carefully and ensure your solution is efficient with respect to time complexity.","solution":"def closest_duration_pair(durations, target_duration): Finds the pair of durations whose sum is closest to the target duration. In case of multiple closest sums, returns the pair with the smallest difference. If still a tie, returns the pair with the smallest individual duration first. import itertools # If there are fewer than 2 durations, return None as we cannot form a pair if len(durations) < 2: return None closest_pair = None closest_sum_diff = float(\'inf\') closest_diff = float(\'inf\') # Checking all pairs of durations for dur1, dur2 in itertools.combinations(durations, 2): current_sum = dur1 + dur2 current_sum_diff = abs(current_sum - target_duration) current_diff = abs(dur1 - dur2) if current_sum_diff < closest_sum_diff: closest_pair = (min(dur1, dur2), max(dur1, dur2)) closest_sum_diff = current_sum_diff closest_diff = current_diff elif current_sum_diff == closest_sum_diff: if current_diff < closest_diff: closest_pair = (min(dur1, dur2), max(dur1, dur2)) closest_diff = current_diff elif current_diff == closest_diff: closest_pair = (min(dur1, dur2), max(dur1, dur2)) return closest_pair"},{"question":"Implement a function in Python that takes a string containing only digits and returns the largest number you can form by deleting exactly one digit. If the string has only one digit, return that digit itself. Example: Input: \'132\' Output: \'32\' Input: \'1001\' Output: \'101\' Input: \'9\' Output: \'9\'","solution":"def largest_number_by_deleting_one_digit(s): Returns the largest number that can be obtained by deleting one digit from the input string. If the string has only one digit, returns the digit itself. if len(s) == 1: return s max_num = \\"\\" for i in range(len(s)): current_num = s[:i] + s[i+1:] if current_num > max_num: max_num = current_num return max_num"},{"question":"Design a function that takes as input a list of integers and returns a new list containing only the prime numbers from the original list. Additionally, implement a method to optimize the prime number detection process. Finally, demonstrate the efficiency of your solution with a runtime analysis comparing it to a naive prime detection approach.","solution":"import math def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function that identifies the start of a cycle in a singly linked list. If the list contains a cycle, your function should return the node where the cycle begins. If there is no cycle, return `None`. Assume the singly linked list class and node class are defined as follows: ```python class ListNode: def __init__(self, x): self.val = x self.next = None class LinkedList: def __init__(self): self.head = None def findCycleStart(head: ListNode) -> ListNode: # Your code here ``` For example, given the list `3 -> 2 -> 0 -> -4` with a cycle that connects back to the node with value `2`, the function should return the node with value `2`. # Requirements - Your solution should handle both the case when there is a cycle and when there isn\'t. - Optimize for time and space complexity to ensure the function runs efficiently. Provide appropriate test cases to demonstrate your solution.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def findCycleStart(head: ListNode) -> ListNode: if not head or not head.next: return None slow = head fast = head # Detect if a cycle exists using the slow and fast pointers while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break # If no cycle exists, return None if not fast or not fast.next: return None # Move one pointer to the head and keep the other at the collision point # Each are k steps from the cycle start, where k is the distance to cycle start slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Using Python\'s numpy, pandas, and matplotlib.pyplot libraries, create a DataFrame containing 15 entries with \'Time\' and \'Distance\' columns. The \'Time\' column should consist of equally spaced values ranging from 0 to 7 hours. The \'Distance\' column should contain random float values between 0 and 50 kilometers. After constructing the DataFrame, plot \'Distance\' versus \'Time\' using a line plot. Customize the plot by adding gridlines, setting the line color to \'blue\', and changing the line style to dashed lines. Finally, label the x-axis as \'Time (hours)\' and the y-axis as \'Distance (km)\'.","solution":"import numpy as np import pandas as pd import matplotlib.pyplot as plt def create_dataframe_and_plot(): # Seed for reproducibility np.random.seed(0) # Creating DataFrame time_values = np.linspace(0, 7, 15) distance_values = np.random.uniform(0, 50, 15) data = {\'Time\': time_values, \'Distance\': distance_values} df = pd.DataFrame(data) # Plotting plt.figure(figsize=(10, 6)) plt.plot(df[\'Time\'], df[\'Distance\'], color=\'blue\', linestyle=\'--\') plt.grid(True) plt.xlabel(\'Time (hours)\') plt.ylabel(\'Distance (km)\') plt.title(\'Distance vs Time Plot\') plt.show() return df"},{"question":"Write a Python function that takes a sorted list of integers and a target integer as inputs, and returns a tuple containing two distinct indices from the list whose values add up to the target. If such a pair does not exist, return an empty tuple. Your solution should have a time complexity of O(n). Here is the function signature: ```python def two_sum_sorted(lst, target): \'\'\'Finds two distinct indices in a sorted list such that their values add up to the target.\'\'\' # Your code here ```","solution":"def two_sum_sorted(lst, target): \'\'\' Finds two distinct indices in a sorted list such that their values add up to the target. Parameters: lst (list): A sorted list of integers. target (int): The target sum. Returns: tuple: A tuple containing two distinct indices, or an empty tuple if no appropriate pair exists. \'\'\' left, right = 0, len(lst) - 1 while left < right: current_sum = lst[left] + lst[right] if current_sum == target: return (left, right) elif current_sum < target: left += 1 else: right -= 1 return ()"},{"question":"Given a list of strings, write a Python program to find the most frequently occurring character in each string. The program should print the characters along with their frequencies, sorted in descending order of frequency. If multiple characters have the same frequency, sort them alphabetically. Handle possible exceptions such as empty strings or non-string inputs gracefully by returning an appropriate error message. Consider edge cases and optimize the solution for performance when the input list contains a large number of strings. Implement the logic in a function that can be called for each string to find the most frequent characters and their counts.","solution":"import collections def most_frequent_characters(s): Returns a sorted list of tuples with the most frequently occurring characters in the string `s` along with their frequencies, sorted by frequency in descending order. If frequencies are the same, sorts alphabetically. Parameters: s (str): The input string. Returns: list: A list of tuples with characters and their frequencies. if not isinstance(s, str): return \\"Error: Input must be a string\\" if not s: return [] # Count frequencies of each character char_count = collections.Counter(s) # Sort by frequency (descending) and then alphabetically sorted_char_count = sorted(char_count.items(), key=lambda x: (-x[1], x[0])) return sorted_char_count"},{"question":"Write a program that determines the optimal point of convergence for three randomly positioned drones in a 2D space, represented as points with floating-point coordinates (x, y). Each drone travels at a constant speed, but potentially different from one another. Your task is to calculate the minimum time needed for all three drones to converge at a single point, and determine the coordinates of this point. To achieve this, implement the following steps: 1. **Distance Calculation**: Write a function that computes the Euclidean distance between two points. 2. **Time Calculation**: Write a function that determines the time it would take for each drone to reach a specific point based on its speed. 3. **Optimization**: Use an optimization algorithm (such as gradient descent or any other suitable approach) to find the point in 2D space that minimizes the maximum time needed for the three drones to converge at that point. 4. **Validation**: Ensure the algorithm can handle edge cases, such as when two or all three drones start at the same point, or when drones are aligned in such a way that causes potential infeasibilities. The output of your program should include: - The coordinates of the optimal convergence point, specified as two floating-point numbers. - The minimum time required for all drones to reach the convergence point. Consider inputs where the drones\' coordinates and speeds are given as: - Drone 1: (x1, y1) with speed s1 - Drone 2: (x2, y2) with speed s2 - Drone 3: (x3, y3) with speed s3 For implementation, you may assume the use of the Python programming language and any necessary libraries for mathematical computations. Provide comments and explanations within your code to clarify your approach and thinking process.","solution":"import numpy as np from scipy.optimize import minimize def distance(point1, point2): Compute the Euclidean distance between two 2D points. return np.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) def time_to_reach(convergence_point, starting_point, speed): Compute the time it takes for a drone to reach the convergence point from its starting point based on its speed. return distance(convergence_point, starting_point) / speed def total_time(convergence_point, drones): Compute the maximum time taken by any drone to reach the convergence point. return max(time_to_reach(convergence_point, drone[\'position\'], drone[\'speed\']) for drone in drones) def optimal_convergence(drones): Finds the optimal point of convergence for three drones that minimizes the maximum time to reach the point. initial_guess = np.mean([drone[\'position\'] for drone in drones], axis=0) result = minimize(lambda x: total_time(x, drones), initial_guess, method=\'Nelder-Mead\') convergence_point = result.x minimum_time = result.fun return convergence_point, minimum_time # Example usage drones = [ {\'position\': (0, 0), \'speed\': 1.0}, {\'position\': (1, 1), \'speed\': 1.0}, {\'position\': (2, 2), \'speed\': 1.0} ] optimal_point, min_time = optimal_convergence(drones) print(f\\"Optimal Convergence Point: {optimal_point}\\") print(f\\"Minimum Time to Converge: {min_time}\\")"},{"question":"Write a function that takes a list of integers and an integer `k` as input. The function should return the number of distinct pairs (i, j) such that `i` and `j` are indices in the list, and the absolute difference between `nums[i]` and `nums[j]` is equal to `k`. Ensure that each pair is counted only once and the pairs `(i, j)` and `(j, i)` are considered the same.","solution":"def count_pairs_with_difference(nums, k): Returns the number of distinct pairs (i, j) such that the absolute difference between nums[i] and nums[j] is equal to k. seen = set() pairs = set() for number in nums: if (number + k) in seen: pairs.add((min(number, number + k), max(number, number + k))) if (number - k) in seen: pairs.add((min(number, number - k), max(number, number - k))) seen.add(number) return len(pairs)"},{"question":"Design a function that restructures the elements of a given 2D list (matrix) by rotating the matrix 90 degrees clockwise. Additionally, include functionality to validate the matrix dimensions (i.e., it should be a non-empty list of non-empty lists and all rows must be of the same length). Implement the function that commences as: ```python from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the given 2D matrix 90 degrees clockwise and returns the result. Validates the matrix to ensure all rows are of the same length and the matrix is non-empty. >>> rotate_matrix([[1, 2], [3, 4]]) [[3, 1], [4, 2]] >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) [[7, 4, 1], [8, 5, 2], [9, 6, 3]] >>> rotate_matrix([[1]]) [[1]] ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the given 2D matrix 90 degrees clockwise and returns the result. Validates the matrix to ensure all rows are of the same length and the matrix is non-empty. # Validate the matrix if not matrix or any(len(row) != len(matrix[0]) for row in matrix): raise ValueError(\\"Matrix must be non-empty and all rows must be of the same length.\\") # Rotate the matrix rotated_matrix = list(zip(*matrix[::-1])) return [list(row) for row in rotated_matrix]"},{"question":"Write a function that takes a string as input and returns a dictionary. The keys of the dictionary should be the unique words in the string, and the values should be the number of times each word appears in the string. Your function should be case-insensitive, consider only alphanumeric characters (ignore punctuation), and handle any leading or trailing spaces in the string. If the input is not a string, the function should raise a TypeError. The function should not use any in-built Python libraries or methods for splitting the words.","solution":"def word_count(s): if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") # Remove punctuation and convert string to lowercase stripped_string = \'\' for char in s: if char.isalnum() or char.isspace(): stripped_string += char.lower() # Split the string into words and count occurrences words = [] current_word = \'\' for char in stripped_string: if char.isspace() and current_word: words.append(current_word) current_word = \'\' elif not char.isspace(): current_word += char if current_word: # Add the last word if there\'s any words.append(current_word) word_count_dict = {} for word in words: if word in word_count_dict: word_count_dict[word] += 1 else: word_count_dict[word] = 1 return word_count_dict"},{"question":"Develop a function that takes in a string and returns the string with each character\'s frequency appended to it consecutively. For example, \\"apple\\" would become \\"a1p2p1l1e1\\". Be mindful of the order in which characters appear and ensure the solution handles both uppercase and lowercase characters appropriately.","solution":"def append_frequency(s): Takes in a string s and returns the string with each character\'s frequency appended to it consecutively. freq = {} result = [] for char in s: freq[char] = freq.get(char, 0) + 1 result.append(f\\"{char}{freq[char]}\\") return \'\'.join(result)"},{"question":"Create a program that simulates an elevator system in a building. The building has a given number of floors and multiple elevators that can move up and down to transport passengers. The system should be able to take input requests from passengers who want to go up or down from a particular floor and assign the nearest available elevator to the request. You should consider the following constraints: 1. Each elevator can only serve one request at a time. 2. Elevators cannot be reassigned once they are on their way to a destination. 3. Elevators can be either idle or in motion at any given time. Your task is to develop a class-based solution that models the elevators and the control system. The control system should be able to handle new requests dynamically as they arrive and continuously update and optimize the movements of the elevators. Bonus: Extend your solution to handle express mode for certain elevators that can ignore intermediate stop requests to provide faster service for higher-priority passengers (e.g., VIP service).","solution":"class Elevator: def __init__(self, id, current_floor=0): self.id = id self.current_floor = current_floor self.target_floor = None self.moving_direction = None # \'up\' or \'down\' def move_to_floor(self, target_floor): self.target_floor = target_floor if self.target_floor > self.current_floor: self.moving_direction = \'up\' elif self.target_floor < self.current_floor: self.moving_direction = \'down\' else: self.moving_direction = None # It\'s already on the target floor def update_position(self): if self.moving_direction == \'up\': self.current_floor += 1 elif self.moving_direction == \'down\': self.current_floor -= 1 if self.current_floor == self.target_floor: self.moving_direction = None self.target_floor = None def is_idle(self): return self.moving_direction is None and self.target_floor is None class ElevatorSystem: def __init__(self, num_floors, num_elevators): self.num_floors = num_floors self.elevators = [Elevator(id=i) for i in range(num_elevators)] self.requests = [] def request_elevator(self, current_floor, direction): self.requests.append((current_floor, direction)) def find_nearest_elevator(self, current_floor, direction): nearest_elevator = None min_distance = float(\'inf\') for elevator in self.elevators: if elevator.is_idle() or (elevator.moving_direction == direction): distance = abs(elevator.current_floor - current_floor) if distance < min_distance: min_distance = distance nearest_elevator = elevator return nearest_elevator def step(self): # Assign requests to elevators for request in self.requests: current_floor, direction = request nearest_elevator = self.find_nearest_elevator(current_floor, direction) if nearest_elevator: nearest_elevator.move_to_floor(current_floor) self.requests.remove(request) # Move elevators for elevator in self.elevators: elevator.update_position()"},{"question":"Write a Python function that takes an integer n as input and returns a list of the first n numbers in the Fibonacci sequence. Additionally, the function should print the position index of each number in the sequence along with the sum of its digits. For example, if the input is 5, the function should return `[0, 1, 1, 2, 3]` and print: 0 - 0 (sum of digits: 0) 1 - 1 (sum of digits: 1) 2 - 1 (sum of digits: 1) 3 - 2 (sum of digits: 2) 4 - 3 (sum of digits: 3) Note: The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones, starting from 0 and 1.","solution":"def fibonacci_sequence(n): Returns a list of the first n numbers in the Fibonacci sequence. Additionally, prints the position index of each number in the sequence along with the sum of its digits. if n <= 0: return [] fibonacci = [0] if n >= 1 else [] if n >= 2: fibonacci.append(1) for i in range(2, n): fibonacci.append(fibonacci[-1] + fibonacci[-2]) for index, value in enumerate(fibonacci): digit_sum = sum(int(digit) for digit in str(value)) print(f\\"{index} - {value} (sum of digits: {digit_sum})\\") return fibonacci"},{"question":"You are given a string containing digits and special characters. Your task is to write a Python function `rearrange_string(s: str) -> str` that rearranges the string so that all the digits appear at the end while preserving the order of non-digit characters and digits. Below are the constraints and the function signature. # Constraints 1. The string `s` contains only digits (`0`-`9`) and special characters (`!@#%^&*()-_+=<>?/{}` etc.). 2. The length of string `s` is at most `100`. # Function Signature ```python def rearrange_string(s: str) -> str: pass ``` # Input - A single string `s`. # Output - A string with all digits moved to the end while maintaining the order of non-digit characters and digits. # Example ```python assert rearrange_string(\\"a1b2c3!\\") == \\"abc!123\\" assert rearrange_string(\\"12345!!!\\") == \\"!!!!!12345\\" assert rearrange_string(\\"!@#\\") == \\"!@#\\" assert rearrange_string(\\"123\\") == \\"123\\" ``` Please implement the function to solve the problem.","solution":"def rearrange_string(s: str) -> str: Rearranges the string so that all the digits appear at the end while preserving the order of non-digit characters and digits. Parameters: s (str): The input string containing digits and special characters. Returns: str: Rearranged string with digits at the end. non_digits = [ch for ch in s if not ch.isdigit()] digits = [ch for ch in s if ch.isdigit()] return \'\'.join(non_digits) + \'\'.join(digits)"},{"question":"Write a function that finds the second largest unique number in a given list of integers. If the list contains less than two unique numbers, return None. The function should handle both positive and negative integers. list = [10, 4, 10, 1, 4, -1, -3, 3]","solution":"def second_largest_unique(numbers): Returns the second largest unique number in the list. If less than two unique numbers are present, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) # Remove duplicates unique_numbers.sort(reverse=True) # Sort in descending order if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"Design a function that takes two strings as input and determines if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another, such as \\"binary\\" and \\"brainy\\". Your function should ignore spaces and capitalization. The function should return `True` if the strings are anagrams and `False` otherwise. Ensure that your implementation has an optimal time complexity.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other ignoring spaces and capitalization. Args: str1 (str): The first string to be compared. str2 (str): The second string to be compared. Returns: bool: True if str1 and str2 are anagrams, False otherwise. # Remove spaces and convert to lower case str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Check if sorted characters of both strings are the same return sorted(str1) == sorted(str2)"},{"question":"You are given a list of integers. Write a Python function that takes this list and a target integer as input and returns indices of the two numbers such that they add up to the target. Assume that each input has exactly one solution, and you may not use the same element twice. The function should return the indices as a tuple. **Function Signature:** ```python def two_sum(nums: List[int], target: int) -> Tuple[int, int]: # Your code here ``` **Example:** ```python assert two_sum([2, 7, 11, 15], 9) == (0, 1) assert two_sum([3, 2, 4], 6) == (1, 2) assert two_sum([3, 3], 6) == (0, 1) ```","solution":"from typing import List, Tuple def two_sum(nums: List[int], target: int) -> Tuple[int, int]: Find indices of two numbers in the list that add up to the target. Args: nums: List of integers. target: Target sum. Returns: A tuple containing indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index"},{"question":"<p>Given a string consisting of parentheses `(` and `)`, write a function that determines the length of the longest valid (well-formed) parentheses substring. A substring is considered valid if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are correctly nested. For example, in the string `\\"(()\\"`, the longest valid substring is `\\"()\\"`, which has a length of 2, while in the string `\\")()())\\"`, the longest valid substring is `\\"()()\\"`, which has a length of 4.</p> <p>Write a function with the following signature:</p> <pre>&lt;code&gt;int longestValidParentheses(String s)&lt;/code&gt;</pre> <p>The function should return the length of the longest valid parentheses substring.</p> <p><strong>Examples:</strong></p> <p><strong>Input:</strong> s = \\"(()\\"</p> <p><strong>Output:</strong> 2</p> <p><strong>Explanation:</strong> The longest valid substring is \\"()\\".</p> <p><strong>Input:</strong> s = \\")()())\\"</p> <p><strong>Output:</strong> 4</p> <p><strong>Explanation:</strong> The longest valid substring is \\"()()\\".</p> <p><strong>Input:</strong> s = \\"\\"</p> <p><strong>Output:</strong> 0</p> <p><strong>Explanation:</strong> The string is empty, so the length is 0.</p>","solution":"def longestValidParentheses(s): Determines the length of the longest valid parentheses substring in the given string s. max_length = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"Implement a function that takes a list of integers representing daily stock prices and returns the maximum profit that could have been achieved by buying on one day and selling on another. If no profit can be made, return 0. Ensure that the solution efficiently handles the case of large input sizes typical for stock price datasets. ```python def max_profit(prices): :param prices: List[int] :return: int # Implement the function logic here ```","solution":"def max_profit(prices): Calculate the maximum profit that can be achieved by buying and selling stock on different days. :param prices: List[int] - A list of integers representing daily stock prices :return: int - The maximum profit possible or 0 if no profit can be made if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Design an algorithm that takes an array of integers and a target integer, and returns an array of unique pairs where the sum of each pair equals the target integer. Ensure that the pairs in the resulting array are in non-decreasing order based on the first element, and if the first elements are the same, based on the second element. If no such pairs exist, return an empty array. # Function Signature ```python def find_pairs_with_target_sum(arr: List[int], target: int) -> List[Tuple[int, int]]: pass ``` # Input - `arr`: A list of integers representing the array of numbers. - `target`: An integer representing the target sum. # Output - A list of tuples, where each tuple contains two integers that sum up to the target integer. The list should be sorted in non-decreasing order of pairs. # Example ```python assert find_pairs_with_target_sum([1, 2, 3, 4, 5, 6], 7) == [(1, 6), (2, 5), (3, 4)] assert find_pairs_with_target_sum([1, 1, 2, 45, 46, 46], 47) == [(1, 46), (2, 45)] assert find_pairs_with_target_sum([3, 3, 4, 4], 8) == [(4, 4)] assert find_pairs_with_target_sum([1, 2, 3], 10) == [] ```","solution":"from typing import List, Tuple def find_pairs_with_target_sum(arr: List[int], target: int) -> List[Tuple[int, int]]: Returns a list of unique pairs where the sum of each pair equals the target integer. The pairs in the resulting array are in non-decreasing order based on the first element, and if the first elements are the same, based on the second element. arr.sort() left, right = 0, len(arr) - 1 result = [] seen = set() while left < right: current_sum = arr[left] + arr[right] if current_sum == target: if (arr[left], arr[right]) not in seen: result.append((arr[left], arr[right])) seen.add((arr[left], arr[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return result"},{"question":"Create a Python function that merges two dictionaries and returns the result. The function should take two dictionaries as input and add the contents of the second dictionary to the first. In case of a key conflict, sum the values from both dictionaries for that key. Provide a test case to verify the functionality of your implementation.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries. In case of key conflict, sums the values from both dictionaries. result = dict1.copy() # start with keys and values of dict1 for key, value in dict2.items(): if key in result: result[key] += value # sum values if key exists in both dictionaries else: result[key] = value # add new key-value pair return result"},{"question":"Create a function named `replace_char` that takes a string and two characters as input. It should replace all occurrences of the first character in the string with the second character. Ensure the function handles both lowercase and uppercase characters correctly. For example, if the input string is \\"Hello World\\", the character to replace is \'l\', and the replacement character is \'x\', the function should return \\"Hexxo Worxd\\".","solution":"def replace_char(s, old_char, new_char): Replaces all occurrences of old_char in the string s with new_char. return s.replace(old_char, new_char)"},{"question":"Implement a function `find_unique_elements` that takes two lists of integers `list1` and `list2`, and returns a list of elements that are unique to each list (i.e., present in one list but not the other). The resulting list should not contain any duplicates and should be sorted in ascending order. ```python def find_unique_elements(list1, list2): # Your implementation here # Examples print(find_unique_elements([1, 2, 3], [2, 3, 4])) # Output: [1, 4] print(find_unique_elements([5, 6, 7], [7, 8, 9])) # Output: [5, 6, 8, 9] print(find_unique_elements([10, 10, 11], [11, 12, 13])) # Output: [10, 12, 13] ``` # Constraints 1. The input lists will contain integers only. 2. The input lists can be empty. 3. The elements in the input lists can have duplicates.","solution":"def find_unique_elements(list1, list2): Returns a sorted list of elements that are unique to each list (i.e., present in one list but not the other). set1, set2 = set(list1), set(list2) unique_elements = (set1 - set2) | (set2 - set1) return sorted(unique_elements)"},{"question":"Implement a function in Python that takes a list of integers and returns a new list where each integer is squared but only if the integer is odd. If the integer is even, it should be left unchanged. Apply your function to the following list of integers: [4, 7, 2, 9, 3, 8, 6].","solution":"def process_list(lst): Returns a new list where each integer is squared if it is odd, and left unchanged if it is even. return [x**2 if x % 2 != 0 else x for x in lst] # Apply the function to the given list result = process_list([4, 7, 2, 9, 3, 8, 6]) print(result) # result should be: [4, 49, 2, 81, 9, 8, 6]"},{"question":"Write a program that simulates a simple inventory management system for a small store. The program should be able to handle the following operations: adding a new item with a unique identifier, updating the quantity of an existing item, removing an item, and displaying the current inventory status. Additionally, ensure that the program can handle invalid operations gracefully, such as attempting to remove an item that does not exist or updating the quantity with an invalid value.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, identifier, quantity): if identifier in self.items: raise ValueError(f\\"Item with identifier \'{identifier}\' already exists.\\") if quantity < 0: raise ValueError(\\"Quantity must be non-negative.\\") self.items[identifier] = quantity def update_item(self, identifier, quantity): if identifier not in self.items: raise ValueError(f\\"Item with identifier \'{identifier}\' does not exist.\\") if quantity < 0: raise ValueError(\\"Quantity must be non-negative.\\") self.items[identifier] = quantity def remove_item(self, identifier): if identifier not in self.items: raise ValueError(f\\"Item with identifier \'{identifier}\' does not exist.\\") del self.items[identifier] def display_inventory(self): return self.items"},{"question":"Write a function in Python that takes a list of integers and returns a new list with each element being the sum of its neighbors and itself. For example, if the input list is [1, 2, 3, 4], the output should be [3, 6, 9, 7]. If the list has fewer than 3 elements, the original list should be returned.","solution":"def sum_neighbors(lst): Takes a list of integers and returns a new list with each element being the sum of its neighbors and itself. If the list has fewer than 3 elements, the original list is returned. if len(lst) < 3: return lst result = [] for i in range(len(lst)): if i == 0: result.append(lst[i] + lst[i+1]) elif i == len(lst) - 1: result.append(lst[i-1] + lst[i]) else: result.append(lst[i-1] + lst[i] + lst[i+1]) return result"},{"question":"I have an array of integers in Python and I want to create a function that identifies the longest contiguous subarray having an equal number of 0s and 1s. The function should return the length of this subarray. For example, given the array [0, 0, 1, 0, 1, 1, 0], the function should return 6, because the longest subarray with equal number of 0s and 1s is [0, 1, 0, 1, 1, 0]. How can I implement this function efficiently?","solution":"def find_max_length(nums): Returns the length of the longest contiguous subarray with an equal number of 0s and 1s. count = 0 max_length = 0 count_map = {0: -1} # Initialize with count 0 at index -1 for i, num in enumerate(nums): if num == 0: count -= 1 else: count += 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Write a Python function that takes a string as input and returns the longest palindrome within that string. If there are multiple palindromes of the same length, return the first one that appears. Ensure your solution is efficient and can handle input strings of significant length.","solution":"def longest_palindrome(s): Returns the longest palindromic substring in s. If there are multiple palindromes of the same maximum length, the first one is returned. if not s: return \\"\\" n = len(s) start, max_length = 0, 1 # The longest palindrome\'s start index and length # Create a 2D DP table to keep track of palindromes dp = [[False for _ in range(n)] for _ in range(n)] # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True # Check for substrings of length 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for lengths greater than 2 for k in range(3, n+1): # k is the length of the substring for i in range(n-k+1): j = i + k - 1 # Ending index of the current substring # dp[i+1][j-1] was true and the characters at i and j are the same if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return s[start:start + max_length]"},{"question":"Given a string, write a function that finds the most frequently occurring character. In case of a tie (multiple characters with the same highest frequency), return all of the characters tied for the most frequent, sorted alphabetically. Ignore spaces and punctuation, and consider only alphabetic characters. Additionally, your function should handle both uppercase and lowercase characters by treating them as the same (i.e., make the function case-insensitive). Provide an explanation for your approach and any assumptions made in your function design.","solution":"from collections import Counter import string def most_frequent_char(text): Returns the most frequently occurring characters in the given text. Ignores spaces, punctuation, and is case-insensitive. If there is a tie, returns all characters tied for most frequent, sorted alphabetically. # Filter out non-alphabetic characters and convert to lowercase filtered_text = \'\'.join([ch for ch in text.lower() if ch in string.ascii_lowercase]) # Count the frequency of each character freq = Counter(filtered_text) # Find the maximum frequency max_freq = max(freq.values(), default=0) # Find all characters with the maximum frequency most_frequent = [char for char, count in freq.items() if count == max_freq] # Sort alphabetically most_frequent.sort() return \'\'.join(most_frequent)"},{"question":"Implement a function to rearrange a given string such that each character appears no more than once consecutively. If it is not possible to rearrange the string to meet this condition, return an empty string. def rearrange_string_no_consecutive_duplicates(s): Given a string \'s\', the goal is to rearrange it so that no two adjacent characters are the same. If such an arrangement is not possible, the function should return an empty string. For example: rearrange_string_no_consecutive_duplicates(\\"aaabbc\\") should return \\"ababac\\" or any other valid string. rearrange_string_no_consecutive_duplicates(\\"aaabbb\\") should return \\"ababab\\" or any other valid string. rearrange_string_no_consecutive_duplicates(\\"aaaaaa\\") should return \\"\\". Note: The function needs to handle uppercase and lowercase characters as distinct. # Implement your code here","solution":"from collections import Counter import heapq def rearrange_string_no_consecutive_duplicates(s): Given a string \'s\', the goal is to rearrange it so that no two adjacent characters are the same. If such an arrangement is not possible, the function should return an empty string. # Count the frequency of each character in the string char_count = Counter(s) # Create a max heap based on character frequency max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \\"\\" result = [] while max_heap: count, char = heapq.heappop(max_heap) # Append current character to result result.append(char) if prev_count < 0: # Push the previous character back to the heap if it still has a count left heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character and decrease its count prev_count, prev_char = count + 1, char # If the length of the result is equal to the input string, we have a valid rearrangement if len(result) == len(s): return \'\'.join(result) else: return \\"\\""},{"question":"Assuming there are various questions in the set, here\'s the new question: ``` Implement a function `reverse_words(sentence: str) -> str` that takes a string sentence containing multiple words separated by spaces, and returns a new string with the words in reverse order. Punctuation and capitalization should be preserved as in the original string. Example: Given the input `\\"Hello world! Welcome to the coding assessment.\\"` The output should be `\\"assessment. coding the to Welcome world! Hello\\"` ``` # Guidelines: - Do not use any library functions that directly reverse the words in a string. - Handle empty strings by returning an empty string. - Preserve the spacing between words as in the original string.","solution":"def reverse_words(sentence: str) -> str: if not sentence: return \\"\\" words = sentence.split() reversed_words = words[::-1] reversed_sentence = \\" \\".join(reversed_words) return reversed_sentence"},{"question":"Given a list of numbers, create a function that finds the three largest numbers and returns them in a new list sorted in descending order. Function Signature: ```python def find_top_three(nums: List[int]) -> List[int]: ``` Input: - nums: A list of integers. Output: - A list of the three largest unique integers from the input list sorted in descending order. Note: - If the list contains less than three unique values, pad the result with `None` values to ensure the length of the output is always three. - The input list can have duplicate values, but the output list should contain only unique values. Example: ```python find_top_three([10, 7, 5, 7, 3]) -> [10, 7, 5] find_top_three([10, 10, 10]) -> [10, None, None] find_top_three([1, 2]) -> [2, 1, None] ```","solution":"from typing import List def find_top_three(nums: List[int]) -> List[int]: Finds the three largest unique numbers in the list and returns them sorted in descending order. If there are fewer than three unique numbers, pads the result with None. # Convert the list to a set to remove duplicates, then sort in descending order unique_nums = sorted(set(nums), reverse=True) # Ensure the length of the result is three by padding with None if necessary result = unique_nums[:3] + [None] * (3 - len(unique_nums)) return result"},{"question":"In a given list of integers, find the maximum difference between any two elements such that the larger element appears after the smaller element. Write a function `max_difference(arr)` that takes a list of integers `arr` and returns the maximum difference. If no such element pairs exist, return -1. Example: ```python print(max_difference([2, 3, 10, 6, 4, 8, 1])) # Output: 8 (10 - 2) print(max_difference([7, 9, 5, 6, 3, 2])) # Output: 2 (9 - 7) print(max_difference([5, 4, 3, 2, 1])) # Output: -1 ```","solution":"def max_difference(arr): Returns the maximum difference between any two elements such that the larger element appears after the smaller one. If no such pair exists, returns -1. if not arr or len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Write a Python function that takes a list of integers and returns a dictionary where the keys are the integers and the values are the number of times each integer appears in the list. Example: Input: [4, 5, 7, 4, 2, 7, 4, 5, 6, 7] Output: {4: 3, 5: 2, 7: 3, 2: 1, 6: 1}","solution":"def count_occurrences(lst): Takes a list of integers and returns a dictionary where the keys are the integers and the values are the number of times each integer appears in the list. Args: lst (list): A list of integers Returns: dict: A dictionary with integers as keys and their counts as values. occurrence_dict = {} for item in lst: if item in occurrence_dict: occurrence_dict[item] += 1 else: occurrence_dict[item] = 1 return occurrence_dict"},{"question":"Write a Python function that receives two lists of integers and returns a new list that contains the elements found in both input lists (intersection), sorted in ascending order. Each number should appear in the resulting list only once, even if it is repeated in the input lists. Avoid using built-in set operations. Function signature: ```python def list_intersection(list1: List[int], list2: List[int]) -> List[int]: ``` # Examples ```python list_intersection([4, 9, 5], [9, 4, 9, 8, 4]) # Returns [4, 9] list_intersection([1, 2, 2, 1], [2, 2]) # Returns [2] list_intersection([1, 2, 3], [4, 5, 6]) # Returns [] ```","solution":"def list_intersection(list1, list2): Returns a sorted list containing unique elements found in both input lists. intersection = [] for num in list1: if num in list2 and num not in intersection: intersection.append(num) return sorted(intersection)"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. Additionally, the function should calculate and return the mean and median of these prime numbers. If there are no prime numbers in the input list, return an empty list for the primes and None for both the mean and median. For instance, given the list [4, 6, 7, 9, 11, 13, 15, 18, 19], the function should output ([7, 11, 13, 19], 12.5, 12.0). Note: You may use the statistics module to compute the mean and median.","solution":"import statistics def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def prime_numbers_with_stats(nums): primes = [num for num in nums if is_prime(num)] if not primes: return [], None, None mean = statistics.mean(primes) median = statistics.median(primes) return primes, mean, median"},{"question":"Develop a Python function that reads a CSV file containing student names and their respective grades in multiple subjects. The function should calculate the average grade for each student and then generate a new CSV file with only student names and their average grades. Ensure your function handles scenarios where some grade entries might be missing, assuming missing entries are denoted by an empty string or a null value, and you should exclude these from the average calculation. Provide a clear example of how to call your function and the expected output for a sample input file.","solution":"import csv def calculate_student_averages(input_file, output_file): Reads a CSV file containing student names and their respective grades in multiple subjects, calculates the average grade for each student, and writes a new CSV file with student names and their average grades. Args: input_file (str): The input CSV file path. output_file (str): The output CSV file path. student_averages = [] # Read the input CSV file with open(input_file, \'r\') as csvfile: reader = csv.reader(csvfile) header = next(reader) # Skip the header row for row in reader: student_name = row[0] grades = [float(grade) for grade in row[1:] if grade] if grades: average_grade = sum(grades) / len(grades) else: average_grade = 0 # Assuming 0 if no grades are available student_averages.append((student_name, average_grade)) # Write to the output CSV file with open(output_file, \'w\', newline=\'\') as csvfile: writer = csv.writer(csvfile) writer.writerow([\'Name\', \'Average Grade\']) writer.writerows(student_averages) # Example usage # calculate_student_averages(\'input.csv\', \'output.csv\')"},{"question":"I am working with a legacy system that outputs log data in text files. Each line of the text file represents a log entry formatted as: `Timestamp|Log Level|Message` Example: ``` 2023-10-01 12:00:00|INFO|Application started 2023-10-01 12:01:00|ERROR|Failed to connect to database 2023-10-01 12:02:00|WARN|Disk space low ``` I need to parse these log files, filter out the entries based on log level (e.g., only \\"ERROR\\" logs), and then process the filtered data to count the occurrences of each distinct error message in the log. Write a Python function that takes in the file path of the log file and a string representing the log level to filter by. The function should return a dictionary where the keys are the distinct error messages and the values are the count of occurrences for each error message. Example Function Signature: ```python def process_log_file(file_path: str, log_level: str) -> dict: pass ``` Example Usage: ```python # Given the example log file above result = process_log_file(\\"path/to/logfile.txt\\", \\"ERROR\\") print(result) # Output: {\\"Failed to connect to database\\": 1} ```","solution":"def process_log_file(file_path: str, log_level: str) -> dict: Processes the given log file and returns a dictionary of error messages and their counts filtered by the specified log level. Args: file_path (str): The path to the log file. log_level (str): The log level to filter by (e.g., \\"ERROR\\"). Returns: dict: A dictionary where keys are the distinct error messages and values are the count of occurrences for each error message. error_counts = {} with open(file_path, \'r\') as file: for line in file: parts = line.strip().split(\'|\') if len(parts) == 3: timestamp, level, message = parts if level == log_level: if message in error_counts: error_counts[message] += 1 else: error_counts[message] = 1 return error_counts"},{"question":"Write a function that takes a string consisting of words separated by spaces and returns the length of the shortest word. For example, given the input string \\"The quick brown fox jumps over the lazy dog\\", the function should return 3.","solution":"def length_of_shortest_word(s): Returns the length of the shortest word in the string s. words = s.split() if not words: return 0 shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Given a list of tasks, where each task is represented as a tuple consisting of the task\'s name and its duration in hours, and a list of time slots represented as tuples consisting of the day and the available time in hours for that day, write a function that distributes the tasks across the time slots such that: 1. Tasks are assigned to time slots in the order they appear. 2. If a task cannot be fully completed within the time slot, it should spill over to the next available time slot. 3. The function should return a dictionary where the keys are the days, and the values are lists of tuples representing the tasks assigned to each day with their corresponding duration assigned to that day. Assume there are always enough time slots to accommodate all tasks. # Example: ```python def distribute_tasks(tasks, time_slots): Distribute tasks across the given time slots. Parameters: tasks (list): A list of tuples where each tuple contains the task\'s name (string) and its duration in hours (int). time_slots (list): A list of tuples where each tuple contains the day (string) and the available time in hours (int). Returns: dict: A dictionary where the keys are the days (string), and the values are lists of tuples containing task\'s name (string) and the assigned duration in hours (int). # Your implementation here # Example Usage tasks = [(\\"Task A\\", 5), (\\"Task B\\", 3), (\\"Task C\\", 2)] time_slots = [(\\"Monday\\", 4), (\\"Tuesday\\", 3), (\\"Wednesday\\", 5)] print(distribute_tasks(tasks, time_slots)) ``` # Expected Output: ```python { \\"Monday\\": [(\\"Task A\\", 4)], \\"Tuesday\\": [(\\"Task A\\", 1), (\\"Task B\\", 2)], \\"Wednesday\\": [(\\"Task B\\", 1), (\\"Task C\\", 2)] } ```","solution":"def distribute_tasks(tasks, time_slots): Distribute tasks across the given time slots. Parameters: tasks (list): A list of tuples where each tuple contains the task\'s name (string) and its duration in hours (int). time_slots (list): A list of tuples where each tuple contains the day (string) and the available time in hours (int). Returns: dict: A dictionary where the keys are the days (string), and the values are lists of tuples containing task\'s name (string) and the assigned duration in hours (int). distribution = {} current_task_index = 0 remaining_duration = tasks[0][1] for day, available_time in time_slots: if day not in distribution: distribution[day] = [] while available_time > 0 and current_task_index < len(tasks): task_name, task_duration = tasks[current_task_index] if remaining_duration <= available_time: distribution[day].append((task_name, remaining_duration)) available_time -= remaining_duration current_task_index += 1 if current_task_index < len(tasks): remaining_duration = tasks[current_task_index][1] else: distribution[day].append((task_name, available_time)) remaining_duration -= available_time available_time = 0 return distribution"},{"question":"You are given a list of students, where each student has a name and a list of grades in different subjects. Write a program to calculate the average grade for each student and determine who has the highest average grade. If multiple students have the same highest average, list all their names. You may assume that there is at least one student in the list and each student has at least one grade in their list. Example Input: ```python students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [88, 76, 92]}, {\\"name\\": \\"Bob\\", \\"grades\\": [78, 85, 90]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [88, 91, 94]}, {\\"name\\": \\"Dave\\", \\"grades\\": [85, 80, 90]} ] ``` Example Output: ```python [\\"Charlie\\"] ```","solution":"def get_highest_average_students(students): Calculate the average grade for each student and determine the students with the highest average grade. Args: students (list): List of dictionaries where each dictionary contains the \'name\' of the student (str) and \'grades\' (list of int). Returns: list: List of names (str) of students with the highest average grade. highest_average = 0 highest_average_students = [] for student in students: average_grade = sum(student[\'grades\']) / len(student[\'grades\']) if average_grade > highest_average: highest_average = average_grade highest_average_students = [student[\'name\']] elif average_grade == highest_average: highest_average_students.append(student[\'name\']) return highest_average_students"},{"question":"Given an integer array `nums` and an integer `k`, your task is to return the number of non-empty subarrays such that the sum of their elements is divisible by `k`. A subarray is a contiguous part of an array. # Examples: Example 1: Input: `nums = [4, 5, 0, -2, -3, 1]`, `k = 5` Output: `7` Explanation: There are 7 subarrays whose sum is divisible by 5: - `[5]` - `[5, 0]` - `[5, 0, -2, -3, 1]` - `[0]` - `[0, -2, -3, 1]` - `[-2, -3]` - `[-2, -3, 1]` Example 2: Input: `nums = [1, 2, 3]`, `k = 3` Output: `3` Explanation: There are 3 subarrays whose sum is divisible by 3: - `[3]` - `[1, 2]` - `[1, 2, 3]` Example 3: Input: `nums = [1, -1, 2, 0]`, `k = 1` Output: `10` Explanation: Since every integer is divisible by 1, every subarray will have a sum divisible by 1. # Constraints: - `1 <= nums.length <= 30000` - `-10000 <= nums[i] <= 10000` - `2 <= k <= 10000`","solution":"def subarraysDivByK(nums, k): Returns the count of non-empty subarrays whose sum is divisible by k. count = 0 prefix_sum = 0 modulo_counts = {0: 1} for num in nums: prefix_sum += num modulo = prefix_sum % k if modulo < 0: modulo += k if modulo in modulo_counts: count += modulo_counts[modulo] modulo_counts[modulo] += 1 else: modulo_counts[modulo] = 1 return count"},{"question":"Create a function in Python that takes an integer `n` and an unordered list of integers as input. The function should return a list of integers from the input list that are divisible by `n`. Elements in the returned list should be in the same order as they appear in the original list. If no elements are divisible by `n`, return an empty list. Additionally, provide a brief explanation of the time complexity of your solution.","solution":"def divisible_by_n(n, lst): Returns a list of integers from the input list that are divisible by n. Parameters: n (int): The divisor. lst (list): The list of integers. Returns: list: A list of integers divisible by n. return [x for x in lst if x % n == 0] # Time Complexity: O(m), where m is the length of the input list. # We iterate through each element of the list once to check if it is divisible by n."},{"question":"Write a Python function that processes a list of positive integers and returns a new list of the same integers with duplicate elements removed, while maintaining the original order of their first occurrences. Your function should achieve this without using any built-in functions or libraries for eliminating duplicates. Additionally, provide a brief explanation of your approach.","solution":"def remove_duplicates(lst): Returns a new list with duplicates removed while maintaining the original order of their first occurrences. Args: lst: List of positive integers Returns: List of integers with duplicates removed seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a program to determine the probability of rolling a sum of 7 or 11 with two six-sided dice. The program should simulate the rolling of the dice a specified number of times and calculate how often sums of 7 or 11 occur. Ensure the output includes the total number of rolls, the number of times a 7 or 11 was rolled, and the probability of rolling a 7 or 11.","solution":"import random def roll_dice(): Simulate rolling two six-sided dice and return their sum. return random.randint(1, 6) + random.randint(1, 6) def simulate_rolls(num_rolls): Simulate rolling two six-sided dice num_rolls times and determine the probability of rolling a sum of 7 or 11. Parameters: num_rolls (int): The number of times to roll the dice. Returns: tuple: (total_rolls, num_seven_or_eleven, probability) num_seven_or_eleven = 0 for _ in range(num_rolls): roll_sum = roll_dice() if roll_sum == 7 or roll_sum == 11: num_seven_or_eleven += 1 probability = num_seven_or_eleven / num_rolls return num_rolls, num_seven_or_eleven, probability"},{"question":"Create a function that takes a string s and an integer n, and returns the nth term of the sequence generated by repeatedly applying the look-and-say operation to s. The look-and-say operation consists of reading off the digits of the input string, considering consecutive runs of the same digit. For example, the look-and-say sequence starting with \\"1\\" would be: \\"1\\", \\"11\\", \\"21\\", \\"1211\\", \\"111221\\", and so on. Given s = \\"1\\" and n = 5, the function should return \\"111221\\". Implement this function to handle any valid input string s and integer n. Example input and output: ``` s = \\"1\\" n = 5 => \\"111221\\" ```","solution":"def look_and_say_sequence(s, n): Generate the nth term of the look-and-say sequence starting with the string s. :param s: The starting string of the sequence. :param n: The number of terms to generate. :return: The nth term in the look-and-say sequence. def next_term(s): result = [] i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 result.append(f\\"{count}{s[i]}\\") i += 1 return \'\'.join(result) current_term = s for _ in range(n - 1): current_term = next_term(current_term) return current_term"},{"question":"Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \\"\\". You should not use any built-in functions to solve this problem. Additionally, discuss how you would handle edge cases such as an array containing only one string or an array where strings have different case sensitivity. Analyze the time complexity of your solution.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. Args: strs (List[str]): Array of strings. Returns: str: Longest common prefix if any, otherwise an empty string. if not strs: return \\"\\" # Sort the strings so that the first and last strings will have the minimum common prefix strs.sort() # Take the first and last strings first, last = strs[0], strs[-1] i = 0 # Compare characters of first and last string while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 # The common prefix is from the start to the ith character return first[:i]"},{"question":"Implement a function that converts an integer to its corresponding column title as it would appear in an Excel sheet. In Excel, column titles are similar to a base-26 number system, but without a zero. The alphabet \'A\' corresponds to 1, \'B\' to 2, ..., \'Z\' to 26, \'AA\' to 27, and so on. Your program should handle large numbers and produce the correct Excel column title. In addition, modify the function to convert an Excel column title back into its corresponding integer. Compare the performance of these two conversions. Here\'s the function signature: ```python def number_to_title(n: int) -> str: pass def title_to_number(s: str) -> int: pass ```","solution":"def number_to_title(n: int) -> str: Converts a given integer to its corresponding Excel column title. result = [] while n > 0: n -= 1 result.append(chr(n % 26 + ord(\'A\'))) n //= 26 result.reverse() return \'\'.join(result) def title_to_number(s: str) -> int: Converts a given Excel column title back to its corresponding integer. result = 0 for char in s: value = ord(char) - ord(\'A\') + 1 result = result * 26 + value return result"},{"question":"Develop a Python function that simulates the rolling of two six-sided dice. The function should return the sum of the values shown on both dice. Additionally, keep track of the number of times the function has been called and print this count each time the function is executed.","solution":"import random class DiceRoller: def __init__(self): self.counter = 0 def roll_dice(self): self.counter += 1 die1 = random.randint(1, 6) die2 = random.randint(1, 6) result = die1 + die2 print(f\\"Roll count: {self.counter}\\") return result dice_roller = DiceRoller()"},{"question":"Write a Python function that takes a list of dictionaries and returns the dictionary with the highest value for a given key. # Function Signature ```python def max_value_dict(dict_list: List[Dict[str, int]], key: str) -> Dict[str, int]: pass ``` # Input - `dict_list`: A list of dictionaries with string keys and integer values. Each dictionary in the list has the same keys. - `key`: A string that represents the key to compare the values. # Output - Return the dictionary from `dict_list` that has the highest value for the given `key`. If there are multiple dictionaries with the same highest value for the key, return any one of them. - If the list is empty, return an empty dictionary. # Example ```python dict_list = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"score\\": 95}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"score\\": 91}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"score\\": 95} ] key = \\"score\\" # Example output {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"score\\": 95} ``` # Constraints - The input list will contain at least one dictionary. - Each dictionary will contain the specified key. - The values associated with the key will always be integers.","solution":"from typing import List, Dict def max_value_dict(dict_list: List[Dict[str, int]], key: str) -> Dict[str, int]: Returns the dictionary with the highest value for the specified key from the list of dictionaries. If the list is empty, returns an empty dictionary. if not dict_list: return {} return max(dict_list, key=lambda x: x[key])"},{"question":"Create a function in Python that takes a string representing an arithmetic expression and evaluates it. The expression can include addition (+), subtraction (-), multiplication (*), and division (/). The function should handle the correct order of operations (PEMDAS/BODMAS rules) and be able to manage exceptions like division by zero or invalid characters in the input string. Additionally, implement error handling to return a meaningful message if the input expression is incorrectly formatted.","solution":"def evaluate_expression(expression): Evaluates the given arithmetic expression string according to PEMDAS/BODMAS rules. try: # Define the allowed characters allowed_chars = set(\\"0123456789+-*/(). \\") # Check for any invalid characters in the expression if not all(char in allowed_chars for char in expression): return \\"Invalid characters in the expression\\" # Evaluate the expression result = eval(expression) return result except ZeroDivisionError: return \\"Division by zero error\\" except SyntaxError: return \\"Syntax error in the expression\\" except Exception as e: return f\\"Error: {str(e)}\\""},{"question":"Write a Python function that accepts a list of integers and returns the smallest positive integer that does not appear in the list. The function should handle both consecutive and non-consecutive integers and avoid using extra space for another array. If the list is empty, the function should return 1. Example: Input: [3, 4, -1, 1] Output: 2 Input: [1, 2, 0] Output: 3 Input: [] Output: 1","solution":"def first_missing_positive(nums): Returns the smallest positive integer that does not appear in the list. Uses constant space and modifies the input list in-place. n = len(nums) # Base case if n == 0: return 1 # First pass, place each number in its corresponding index position for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Second pass, find the first place where the index doesn\'t match the value for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a program to simulate a ticket booking system for a theater. The theater has a fixed number of seats organized in rows and columns. Develop a class `Theater` with the following functionalities: 1. `__init__(self, rows: int, cols: int)`: Initializes the theater with the provided number of rows and columns. All seats should be marked as available initially. 2. `book_seat(self, row: int, col: int) -> bool`: Books a specified seat if it is available. Returns `True` if the booking is successful, `False` if the seat is already taken. 3. `cancel_booking(self, row: int, col: int) -> bool`: Cancels the booking of a specified seat if it is currently booked. Returns `True` if successful, `False` if the seat was not booked. 4. `display_seating(self) -> str`: Returns a string representation of the seating plan where available seats are marked with \'A\' and booked seats with \'B\'. Additionally, the program should handle: - edge cases such as invalid seat coordinates. - a situation where multiple booking, cancellation, or displaying operations might occur simultaneously (simulate with threading). Provide example usage and ensure the code is well-commented to explain the logic.","solution":"class Theater: def __init__(self, rows: int, cols: int): self.rows = rows self.cols = cols self.seats = [[\'A\' for _ in range(cols)] for _ in range(rows)] def book_seat(self, row: int, col: int) -> bool: if self._is_valid_seat(row, col) and self.seats[row][col] == \'A\': self.seats[row][col] = \'B\' return True return False def cancel_booking(self, row: int, col: int) -> bool: if self._is_valid_seat(row, col) and self.seats[row][col] == \'B\': self.seats[row][col] = \'A\' return True return False def display_seating(self) -> str: return \'n\'.join(\'\'.join(row) for row in self.seats) def _is_valid_seat(self, row: int, col: int) -> bool: return 0 <= row < self.rows and 0 <= col < self.cols # Example usage: # theater = Theater(5, 5) # print(theater.display_seating()) # Display initial seating arrangement # print(theater.book_seat(2, 3)) # Book seat at 2,3 # print(theater.display_seating()) # Display seating after booking # print(theater.cancel_booking(2, 3)) # Cancel booking at 2,3 # print(theater.display_seating()) # Display seating after cancellation"},{"question":"Design a Python function that takes in a list of integers and returns a tuple containing the minimum, maximum, and median values. If the list is empty, return a tuple with None values for each position. Ensure that your function handles lists of both even and odd lengths properly and includes adequate error handling for invalid inputs.","solution":"def find_min_max_median(numbers): Returns a tuple containing the minimum, maximum, and median values of a list of integers. If the list is empty, returns a tuple with None values for each position. if not isinstance(numbers, list) or any(not isinstance(i, int) for i in numbers): raise ValueError(\\"Input must be a list of integers\\") if not numbers: return (None, None, None) numbers_sorted = sorted(numbers) n = len(numbers_sorted) min_val = numbers_sorted[0] max_val = numbers_sorted[-1] if n % 2 == 1: # Odd number of elements, single middle element median_val = numbers_sorted[n // 2] else: # Even number of elements, average of two middle elements median_val = (numbers_sorted[n // 2 - 1] + numbers_sorted[n // 2]) / 2 return (min_val, max_val, median_val)"},{"question":"Using the Python programming language, utilizing the functionality provided by the itertools library, write a function that generates all possible permutations of a given string. The function should return the permutations as a list of strings, sorted in lexicographical order. For instance, given the input string \\"abc\\", the function should return `[\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\']`. Additionally, ensure that your function handles potential edge cases such as an empty string.","solution":"import itertools def generate_permutations(s): Generates all possible permutations of a given string and returns them as a list of strings sorted in lexicographical order. :param s: Input string :return: List of all possible permutations sorted lexicographically if not s: return [\\"\\"] permutations = itertools.permutations(s) unique_permutations = sorted(set(\'\'.join(p) for p in permutations)) return unique_permutations"},{"question":"Design a function that takes a list of strings and a target string and returns the index of the target string in the list. If the target string is not in the list, the function should return -1. Additionally, the function should ignore case (case-insensitive search) and handle strings with leading or trailing whitespaces. Implement the function: ```python def find_string_index(lst: list, target: str): Returns the index of the target string in the list \'lst\'. The search should be case-insensitive and should ignore leading or trailing whitespaces. If the target is not found, returns -1. ``` Examples for elaboration: ```python >>> find_string_index([\\" Apple \\", \\"banana\\", \\"Cherry\\"], \\"apple\\") 0 >>> find_string_index([\\"mango\\", \\"pear\\", \\"Peach \\"], \\"PEACH\\") 2 >>> find_string_index([\\"Grapes\\", \\"kiwi\\", \\"Pineapple\\"], \\"MELON\\") -1 ``` The function should handle edge cases, such as: 1. An empty list should always return -1. 2. A target string that is an empty string should return -1. 3. Lists or target strings with only whitespace should be processed correctly.","solution":"def find_string_index(lst: list, target: str) -> int: Returns the index of the target string in the list \'lst\'. The search should be case-insensitive and should ignore leading or trailing whitespaces. If the target is not found, returns -1. # Normalize the target string normalized_target = target.strip().lower() # Iterate over the list and check each string for index, string in enumerate(lst): # Normalize the current string in the list normalized_string = string.strip().lower() if normalized_string == normalized_target: return index return -1"},{"question":"Create a function that accepts a string as input and returns a new string where each character in the original string is repeated once. For example, if the input is \\"hello\\", the output should be \\"hheelllloo\\". Provide the correct implementation in Python. ```python def double_characters(input_string): result = \\"\\" for char in input_string: result += char * 2 return result # Examples # Input: \\"hello\\" # Output: \\"hheelllloo\\" # Input: \\"Python\\" # Output: \\"PPyytthhoonn\\" ```","solution":"def double_characters(input_string): Returns a new string where each character in the original string is repeated once. result = \\"\\" for char in input_string: result += char * 2 return result"},{"question":"Word Frequency Counter: You are given a text document containing a string of words where each word is separated by a space. Your task is to write a Python function that takes this document as input and returns the word that appears the most frequently. In case of a tie, return any one of the most frequent words. The desired output should resemble the following: ```python def most_frequent_word(text): # Your code here pass # Example usage: text = \\"the quick brown fox jumps over the lazy dog the fox was quick\\" result = most_frequent_word(text) print(result) # Output could be \\"the\\" or \\"fox\\", since both appear twice ``` The function should handle the following edge cases: 1. The document is empty. 2. All words appear with the same frequency. 3. The document contains punctuation marks. Only consider alphabetic words for frequency counting. Hints: - Use Python\'s `collections.Counter` to count the frequency of words. - Consider regular expressions from the `re` module to handle punctuation. Implementation: ```python import collections import re def most_frequent_word(text): if not text: return \\"\\" words = re.findall(r\'b[a-zA-Z]+b\', text) word_count = collections.Counter(words) most_common_word = word_count.most_common(1) return most_common_word[0][0] if most_common_word else \\"\\" # Example usage: text = \\"the quick brown fox jumps over the lazy dog. the fox was quick.\\" result = most_frequent_word(text) print(result) # Output could be \\"the\\" or \\"fox\\", since both appear twice ```","solution":"import collections import re def most_frequent_word(text): Returns the word that appears the most frequently in the given text. If the text is empty or words have same frequency, returns any one of the most frequent words. Only considers alphabetic words for frequency counting. if not text: return \\"\\" words = re.findall(r\'b[a-zA-Z]+b\', text) word_count = collections.Counter(words) most_common_word = word_count.most_common(1) return most_common_word[0][0] if most_common_word else \\"\\""},{"question":"Write a function that accepts a list of integers and returns a new list containing only the integers that are even palindromes. An even palindrome is a number that reads the same forwards and backwards and is divisible by 2. For example, 282 and 4884 are both even palindromes, while 121 and 1331 are not since they\'re odd. The function should also handle edge cases such as empty lists and single-element lists. The solution should be optimal and avoid unnecessary computations. Furthermore, provide a piece of incorrect code that attempts to solve the problem but fails due to a syntactical or logical error. The candidate should identify the error, explain why it occurs, and correct it. Note: Do not consider negative integers for this problem.","solution":"def even_palindrome_list(integers): Returns a list of even palindromes from the given list of integers. An even palindrome is a number that reads the same forwards and backwards and is divisible by 2. def is_palindrome(n): s = str(n) return s == s[::-1] return [x for x in integers if x % 2 == 0 and is_palindrome(x)]"},{"question":"Write a function that takes a string consisting of lowercase letters as input and returns the length of the longest substring without repeating characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_len = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_len = max(max_len, right - left + 1) return max_len"},{"question":"Implement an efficient function to determine if a given string of parentheses is balanced. A string of parentheses is considered balanced if each opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and they are correctly nested. Additionally, the function should be optimized to handle large inputs by utilizing non-blocking I/O operations to read the input string. The non-blocking I/O is crucial to enhance performance, especially when dealing with extensive strings. Note: Consider both traditional parentheses processing and the use of advanced input handling techniques to ensure optimal performance.","solution":"import sys import select def is_balanced_parentheses(s: str) -> bool: Determines if a given string of parentheses is balanced. A string of parentheses is considered balanced if each opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and they are correctly nested. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0 def read_input_non_blocking() -> str: Reads input from stdin in a non-blocking way to handle large strings efficiently. input_string = \\"\\" while sys.stdin in select.select([sys.stdin], [], [], 0)[0]: input_string += sys.stdin.read(1024) if not input_string: break return input_string"},{"question":"Create a Python program that reads a text file, counts the frequency of each word, and displays the words and their corresponding frequencies in descending order of frequency. The program should ignore punctuation and be case-insensitive. Additionally, the program should also be able to handle empty lines in the text file gracefully without causing any errors. For the word frequency count, consider words to be sequences of alphanumeric characters separated by white spaces or punctuation marks. For example, given a text file with the following content: ``` Hello world! This is a test. This test is only a test. Hello again; testing, one, two, three. ``` The output should be: ``` test: 3 hello: 2 this: 2 is: 2 a: 2 world: 1 again: 1 testing: 1 one: 1 two: 1 three: 1 only: 1 ``` You can assume the text file is named `sample.txt` and is located in the same directory as your Python script.","solution":"import re from collections import Counter def count_word_frequency(file_path): Reads a text file, counts the frequency of each word, and returns a dictionary with words as keys and their frequency as values, sorted in descending order of frequency. with open(file_path, \'r\') as file: text = file.read().lower() # Remove punctuation and split into words words = re.findall(r\'bw+b\', text) # Count the frequency of each word word_counts = Counter(words) # Sort words by frequency in descending order sorted_word_counts = dict(sorted(word_counts.items(), key=lambda item: item[1], reverse=True)) return sorted_word_counts"},{"question":"Write a function that takes a list of integers and returns the element that appears more than once in the list. If no such element exists, return -1. You can assume the list contains at most one duplicate element. The function should have a time complexity of O(n) and a space complexity of O(n). **Function Signature:** ```python def find_duplicate(nums: List[int]) -> int: # Your code here # Example Usage: # find_duplicate([1, 2, 3, 4, 5]) should return -1 # find_duplicate([1, 2, 3, 4, 2]) should return 2 # find_duplicate([3, 3, 3, 3, 3, 3]) should return 3 ```","solution":"from typing import List def find_duplicate(nums: List[int]) -> int: Takes a list of integers and returns the element that appears more than once. If no such element exists, returns -1. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Design a function that accepts an integer `n` and returns the `n-th` number in the `Fibonacci sequence`. Utilize a recursive approach to solve this problem. Ensure the function has proper handling for incorrect inputs, such as negative integers or non-integer values. In addition, provide a non-recursive solution by implementing an iterative approach. Compare the computational efficiency of both methods in terms of time and space complexity. Moreover, your script should include a testing mechanism to validate the correctness of both implementations against several test cases. Example: - Input: 6 - Output: 8 (The sequence is: 0, 1, 1, 2, 3, 5, 8) ```python def fibonacci_recursive(n): # Your solution here pass def fibonacci_iterative(n): # Your solution here pass # Testing mechanism def test_fibonacci(): test_cases = [0, 1, 2, 6, 10] expected_results = [0, 1, 1, 8, 55] for i, test in enumerate(test_cases): assert fibonacci_recursive(test) == expected_results[i], f\\"Test case {test} failed in recursive approach!\\" assert fibonacci_iterative(test) == expected_results[i], f\\"Test case {test} failed in iterative approach!\\" print(\\"All test cases passed.\\") # Running tests test_fibonacci() ```","solution":"def fibonacci_recursive(n): Returns the n-th number in the Fibonacci sequence using a recursive approach. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) def fibonacci_iterative(n): Returns the n-th number in the Fibonacci sequence using an iterative approach. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 prev, curr = 0, 1 for _ in range(n - 1): prev, curr = curr, prev + curr return curr"},{"question":"Design an algorithm that takes a string input representing a mathematical expression, validates it, and then evaluates the result. The expression can contain integers, addition (+), subtraction (-), multiplication (*), and division (/). Parentheses are also allowed to define the precedence of operations. Ensure error handling for cases like division by zero, invalid characters, and unbalanced parentheses. Implement the algorithm to follow the standard order of operations (PEMDAS).","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string containing integers, +, -, *, /, and parentheses. Returns the result and ensures the standard order of operations (PEMDAS). # Ensure expression is a string if not isinstance(expression, str): raise TypeError(\\"Expression must be a string\\") # Check for invalid characters in the expression valid_chars = \\"0123456789+-*/() \\" for char in expression: if char not in valid_chars: raise ValueError(f\\"Invalid character found in the expression: {char}\\") # Evaluate the expression using Python\'s eval safely try: result = eval(expression, {\\"__builtins__\\": {}}, {}) except ZeroDivisionError: raise ZeroDivisionError(\\"Division by zero is not allowed\\") except Exception as e: raise ValueError(f\\"Invalid mathematical expression: {expression}\\") return result"},{"question":"Develop a function that takes a string of parentheses as input and returns the length of the longest valid (well-formed) parentheses substring. For example, given the input \\"(()())\\", the function should return 6 since the entire string is a valid substring. If the input is \\")()())\\", the function should return 4, corresponding to the substring \\"()()\\".","solution":"def longest_valid_parentheses(s: str) -> int: Function to find the length of the longest valid (well-formed) parentheses substring. stack = [-1] max_length = 0 for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if len(stack) == 0: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"Create a program that simulates a simple inventory management system for a small store. The program should allow the user to add items with their names, quantities, and prices. Additionally, the program must be able to handle the following features: - Display the current inventory, listing all items along with their quantities and prices. - Update the quantity of an existing item. - Remove an item from the inventory. - Compute the total value of all the items in the inventory. Include error handling for cases such as adding items that already exist, updating non-existent items, removing non-existent items, and invalid input. In your solution, show an example usage of adding three items, updating the quantity of one, removing one, and then displaying the total value of the inventory.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, name, quantity, price): if name in self.items: raise ValueError(f\\"Item \'{name}\' already exists in the inventory.\\") self.items[name] = {\'quantity\': quantity, \'price\': price} def update_quantity(self, name, quantity): if name not in self.items: raise ValueError(f\\"Item \'{name}\' does not exist in the inventory.\\") self.items[name][\'quantity\'] = quantity def remove_item(self, name): if name not in self.items: raise ValueError(f\\"Item \'{name}\' does not exist in the inventory.\\") del self.items[name] def display(self): for name, info in self.items.items(): print(f\\"{name}: Quantity: {info[\'quantity\']}, Price: {info[\'price\']}\\") def total_value(self): return sum(info[\'quantity\'] * info[\'price\'] for info in self.items.values()) # Example usage inventory = Inventory() inventory.add_item(\'Apple\', 50, 0.5) inventory.add_item(\'Banana\', 100, 0.2) inventory.add_item(\'Orange\', 75, 0.3) inventory.update_quantity(\'Apple\', 60) inventory.remove_item(\'Banana\') inventory.display() print(f\\"Total Value: {inventory.total_value()}\\")"},{"question":"Construct a function in Python that calculates the nth Fibonacci number using dynamic programming. Ensure the function handles large inputs efficiently and provide a brief explanation of the approach used.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. The function is optimized for large inputs. if n <= 0: return 0 elif n == 1: return 1 # Initialize base cases fib = [0] * (n + 1) fib[1] = 1 # Compute Fibonacci numbers from 2 to n for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a Python function called `intersect_arrays` that takes two lists of integers, `list1` and `list2`, and returns a new list that contains only the elements that are present in both lists, without duplicates. The output list should be sorted in ascending order. Your function should handle cases where there are no common elements gracefully. Example: ```python list1 = [1, 3, 5, 7, 9] list2 = [5, 7, 11, 13] intersect_arrays(list1, list2) ``` Output: ```python [5, 7] ```","solution":"def intersect_arrays(list1, list2): Returns a new list that contains only the elements that are present in both lists, without duplicates. The output list is sorted in ascending order. return sorted(set(list1) & set(list2))"},{"question":"You are given a list of dictionary items where each dictionary contains `name` and `age` keys corresponding to a person\'s details. Write a Python function `group_people_by_age` that takes the list as an input, and returns a dictionary where the keys are the distinct ages appearing in the input list, and the values are lists of names of people who are of that age. Your solution should be able to handle a list with an arbitrary number of people. For example, given the list of people: ```python [ {\\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"name\\": \\"Bob\\", \\"age\\": 25}, {\\"name\\": \\"Charlie\\", \\"age\\": 30}, {\\"name\\": \\"David\\", \\"age\\": 25}, {\\"name\\": \\"Eve\\", \\"age\\": 35} ] ``` Your function should return: ```python { 30: [\\"Alice\\", \\"Charlie\\"], 25: [\\"Bob\\", \\"David\\"], 35: [\\"Eve\\"] } ``` Write a full function definition along with necessary imports, and test it with the example input to ensure it returns the correct output. Your task also involves ensuring that the output format is as expected and handling any edge cases such as empty input or missing `name` or `age` keys in the dictionaries within the list.","solution":"def group_people_by_age(people): Group people by age. Parameters: people (list of dict): A list of dictionaries where each dictionary contains \'name\' and \'age\' keys. Returns: dict: A dictionary where the keys are ages and the values are lists of names of people with that age. age_groups = {} for person in people: # Handle missing keys if \'age\' not in person or \'name\' not in person: continue age = person[\'age\'] name = person[\'name\'] if age in age_groups: age_groups[age].append(name) else: age_groups[age] = [name] return age_groups"},{"question":"Write a function `medal_tally` that calculates the total medal count in the Olympics for each country. The function takes a list of tuples as an argument, where each tuple contains a country\'s name and the medals they won in the format `(country, gold, silver, bronze)`. The function should return a dictionary where the keys are the country names and the values are the total number of medals won by that country. Example: ```python medals = [ (\\"USA\\", 10, 5, 4), (\\"Canada\\", 2, 3, 4), (\\"USA\\", 3, 6, 1), (\\"Japan\\", 1, 0, 1), (\\"Canada\\", 5, 0, 2) ] ``` Function Signature: ```python def medal_tally(medal_list: List[Tuple[str, int, int, int]]) -> Dict[str, int]: ``` Example Usage: ```python medals = [ (\\"USA\\", 10, 5, 4), (\\"Canada\\", 2, 3, 4), (\\"USA\\", 3, 6, 1), (\\"Japan\\", 1, 0, 1), (\\"Canada\\", 5, 0, 2) ] assert medal_tally(medals) == { \\"USA\\": 29, \\"Canada\\": 16, \\"Japan\\": 2 } ``` Constraints: - The input list will contain at least one tuple. - All medal counts are non-negative integers. - Country names are strings and may contain spaces. - All strings are case-sensitive, meaning \\"USA\\" and \\"usa\\" would be different countries. Implement the `medal_tally` function that processes the input list and returns the expected dictionary.","solution":"from typing import List, Tuple, Dict def medal_tally(medal_list: List[Tuple[str, int, int, int]]) -> Dict[str, int]: Calculates the total medal count for each country. :param medal_list: A list of tuples where each tuple contains a country\'s name and the number of gold, silver, and bronze medals. :return: A dictionary where the keys are the country names and the values are the total number of medals won by that country. tally = {} for country, gold, silver, bronze in medal_list: if country in tally: tally[country] += gold + silver + bronze else: tally[country] = gold + silver + bronze return tally"},{"question":"Write a Python function that takes a string of words and returns the lengths of all the words in the string. The function should return the result as a list of integers. For example, given the input string \\"The quick brown fox jumps over the lazy dog\\", the output should be [3, 5, 5, 3, 5, 4, 3, 4, 3]. Ignore punctuation and assume that words are separated by spaces.","solution":"def word_lengths(sentence): Given a string of words, return the lengths of all the words in the string. Parameters: sentence (str): A string of words separated by spaces. Returns: List[int]: A list of integers representing the lengths of each word. # Split the sentence into words words = sentence.split() # Return a list of the lengths of the words return [len(word) for word in words]"},{"question":"Design a function that simulates an elevator system in a building with 10 floors (numbered 0 to 9). Write a class called `Elevator` which should handle requests to move to floors and keep track of its current floor. The class should have the following methods: 1. `__init__(self)`: Initializes the elevator at floor 0. 2. `move_up(self)`: Moves the elevator up one floor if it is not on the top floor. 3. `move_down(self)`: Moves the elevator down one floor if it is not on the ground floor. 4. `go_to_floor(self, floor)`: Moves the elevator directly to the specified floor (if the floor is valid). 5. `current_floor(self)`: Returns the current floor of the elevator. Provide an example usage of this class, where the elevator is requested to: 1. Move up 3 floors from the ground floor. 2. Go directly to the 7th floor. 3. Move down 2 floors. 4. Move up 5 floors, ensuring that it does not go above the top floor. 5. Display the current floor after each operation to verify the state of the elevator. Your implementation and example usage should ensure safety checks for not moving below the ground floor or above the top floor.","solution":"class Elevator: def __init__(self): self.floor = 0 self.max_floor = 9 self.min_floor = 0 def move_up(self): if self.floor < self.max_floor: self.floor += 1 def move_down(self): if self.floor > self.min_floor: self.floor -= 1 def go_to_floor(self, floor): if self.min_floor <= floor <= self.max_floor: self.floor = floor def current_floor(self): return self.floor # Example usage elevator = Elevator() # Move up 3 floors from the ground floor for _ in range(3): elevator.move_up() print(elevator.current_floor()) # Expected output: 3 # Go directly to the 7th floor elevator.go_to_floor(7) print(elevator.current_floor()) # Expected output: 7 # Move down 2 floors for _ in range(2): elevator.move_down() print(elevator.current_floor()) # Expected output: 5 # Move up 5 floors (should stop at the top floor, floor 9) for _ in range(5): elevator.move_up() print(elevator.current_floor()) # Expected output: 9 # Display the current floor after each operation"},{"question":"Write a function that takes a string containing a mathematical expression and evaluates it. The expression will contain non-negative integers and the operators `+`, `-`, `*`, and `/` (integer division). The expression might contain spaces for enhanced readability. You need to handle operator precedence correctly (multiplication and division before addition and subtraction). For example: ```python def evaluate_expression(expression: str) -> int: # Your implementation here # Examples: print(evaluate_expression(\\"3+5 / 2\\")) # Output: 5 print(evaluate_expression(\\" 3+2*2 \\")) # Output: 7 print(evaluate_expression(\\" 12 + 3 / 3 * 2\\")) # Output: 14 print(evaluate_expression(\\"100\\")) # Output: 100 print(evaluate_expression(\\"1 - 1 + 1 \\")) # Output: 1 ``` # Constraints: 1. The input string is not empty and represents a valid expression. 2. Operators are separated by at least one space, and operands can be freely spaced.","solution":"def evaluate_expression(expression: str) -> int: def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b num, stack, sign, i = 0, [], \'+\', 0 while i < len(expression): if expression[i].isdigit(): while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) num = 0 elif expression[i] in \'+-*/\': sign = expression[i] i += 1 else: i += 1 return sum(stack)"},{"question":"Implement a function in Python that takes a list of tuples, where each tuple contains two elements: a string and an integer. The function should return a dictionary where the keys are the unique strings from the tuples, and the values are the sum of the integers associated with each string. Ensure that the function handles cases where the list may contain thousands of tuples efficiently. Example input: [(\'apple\', 1), (\'banana\', 2), (\'apple\', 3), (\'orange\', 4)] Expected output: {\'apple\': 4, \'banana\': 2, \'orange\': 4}","solution":"def sum_tuples(tuples_list): Takes a list of tuples where each tuple contains a string and an integer, and returns a dictionary with the sum of integers for each unique string. :param tuples_list: List of tuples [(str, int), ...] :return: Dictionary {str: int} result_dict = {} for key, value in tuples_list: if key in result_dict: result_dict[key] += value else: result_dict[key] = value return result_dict"},{"question":"Your task is to write a function `transpose_matrix(matrix: List[List[int]]) -> List[List[int]]` that takes a rectangular 2D list of integers and returns its transpose. The transpose of a matrix is formed by swapping the rows with columns. # Function Signature ```python def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` # Input - A list of lists `matrix` of size `m x n` where `1 ≤ m, n ≤ 1000`. # Output - A list of lists, which represents the transposed matrix of size `n x m`. # Example ```python input_matrix = [ [1, 2, 3], [4, 5, 6] ] output_matrix = transpose_matrix(input_matrix) print(output_matrix) # Output: [[1, 4], [2, 5], [3, 6]] ``` # Requirements 1. Ensure the function handles edge cases, such as an empty matrix or a matrix with only one row or one column. 2. Do not use any built-in transpose function, if available in the specific programming language. # Note The function should handle both square and non-square matrices efficiently.","solution":"from typing import List def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: Takes a rectangular 2D list of integers and returns its transpose. The transpose of a matrix is obtained by swapping the rows and columns. :param matrix: List of lists of integers representing the matrix :return: List of lists of integers representing the transposed matrix if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) transposed = [[0] * rows for _ in range(cols)] for i in range(rows): for j in range(cols): transposed[j][i] = matrix[i][j] return transposed"},{"question":"Given an array of integers `arr` and an integer `k`, your task is to determine if you can divide the array into `k` non-empty subsets whose sums are all the same. Return `true` if you can do this; otherwise, return `false`. # Example 1: ``` Input: arr = [4, 3, 2, 3, 5, 2, 1], k = 4 Output: true Explanation: It\'s possible to divide the array into 4 subsets (5), (1, 4), (2, 3), and (2, 3) with equal sums. ``` # Example 2: ``` Input: arr = [1, 2, 3, 4], k = 3 Output: false Explanation: It\'s not possible to divide the array into 3 subsets with equal sums. ``` # Constraints: - `1 <= k <= len(arr) <= 15` - `0 < arr[i] <= 10000` - The sum of the elements of `arr` is at most 10^5","solution":"def can_partition_k_subsets(arr, k): total_sum = sum(arr) if total_sum % k != 0: return False target_sum = total_sum // k used = [False] * len(arr) def can_partition(start_index, k_remaining, current_sum): if k_remaining == 0: return True if current_sum == target_sum: return can_partition(0, k_remaining - 1, 0) for i in range(start_index, len(arr)): if not used[i] and current_sum + arr[i] <= target_sum: used[i] = True if can_partition(i + 1, k_remaining, current_sum + arr[i]): return True used[i] = False return False return can_partition(0, k, 0)"},{"question":"Write a function that accepts a list of integers and returns the number of unique elements in the list. For example, given the list `[1, 2, 3, 2, 1, 4]`, the function should return `4` because there are four unique elements: `1, 2, 3, and 4`. Your solution should account for both positive and negative integers as well as zeros.","solution":"def count_unique_elements(lst): Returns the number of unique elements in the given list. return len(set(lst))"},{"question":"Develop a Python function that takes a list of integers and returns the largest possible number formed by concatenating the integers together. The function should handle edge cases such as lists with single digit numbers, numbers with different lengths, and should return the result as a string to avoid issues with extremely large numbers. Additionally, consider how two numbers should be compared when determining the order for concatenation.","solution":"from functools import cmp_to_key def largest_number(nums): Returns the largest possible number formed by concatenating the integers together. :param nums: List of integers :return: A string representing the largest possible concatenated number # Convert all integers to strings nums = list(map(str, nums)) # Custom comparator to decide the order of concatenation def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Sort numbers using the comparator nums.sort(key=cmp_to_key(compare)) # Join the numbers to form the largest number result = \'\'.join(nums) # Edge case: If the highest number is \'0\', the result is \'0\' return result if result[0] != \'0\' else \'0\'"},{"question":"Using the Pandas library, load a CSV file containing data about housing prices. Implement a linear regression model to predict house prices based on various features such as the number of bedrooms, size in square feet, and proximity to important landmarks. Finally, evaluate the model using RMSE (Root Mean Squared Error) and R² (coefficient of determination) to determine its performance.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score import numpy as np def load_data(csv_path): Load housing data from a CSV file. return pd.read_csv(csv_path) def train_model(df, target_column): Train a linear regression model to predict house prices. Arguments: df -- DataFrame containing housing data target_column -- string name of the column to be predicted Returns: model -- trained linear regression model X_test, y_test -- test sets for features and target variable X = df.drop(columns=[target_column]) y = df[target_column] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) model = LinearRegression() model.fit(X_train, y_train) return model, X_test, y_test def evaluate_model(model, X_test, y_test): Evaluate the model using RMSE and R². Arguments: model -- trained linear regression model X_test, y_test -- test sets for features and target variable Returns: rmse -- Root Mean Squared Error r2 -- coefficient of determination y_pred = model.predict(X_test) rmse = mean_squared_error(y_test, y_pred, squared=False) r2 = r2_score(y_test, y_pred) return rmse, r2"},{"question":"Calculate the total distance covered by the vehicle given the series of recorded trip distances. trips: [15.2, 23.6, 7.4, 10.1]","solution":"def total_distance(trips): Returns the total distance covered by summing all trip distances in the list. Args: trips (list of float): List of recorded trip distances. Returns: float: Total distance covered. return sum(trips)"},{"question":"Given two strings, write a Python function to find the length of their longest common substring. If there are multiple longest common substrings of the same length, return the one which appears first in the first string. Your function should be efficient for large input sizes. # Function Signature ```python def longest_common_substring(s1: str, s2: str) -> str: pass ``` # Input - `s1` (length (n)): a string of lowercase Latin letters (1 ≤ (n) ≤ 10^3). - `s2` (length (m)): a string of lowercase Latin letters (1 ≤ (m) ≤ 10^3). # Output - A string representing the longest common substring of `s1` and `s2`. If there are multiple such substrings with the same length, return the one that appears first in `s1`. # Examples ```python assert longest_common_substring(\\"abcdef\\", \\"zcdemf\\") == \\"cde\\" assert longest_common_substring(\\"abc\\", \\"def\\") == \\"\\" assert longest_common_substring(\\"abcdef\\", \\"ghijkl\\") == \\"\\" assert longest_common_substring(\\"abcdef\\", \\"bcdea\\") == \\"bcde\\" ``` # Note - The function should be efficient and work within acceptable time constraints for the input size. Consider using dynamic programming to optimize the solution.","solution":"def longest_common_substring(s1: str, s2: str) -> str: n = len(s1) m = len(s2) # Initialize the table with zeros dp = [[0] * (m + 1) for _ in range(n + 1)] longest_length = 0 longest_end_pos = 0 # Fill dp table for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > longest_length: longest_length = dp[i][j] longest_end_pos = i else: dp[i][j] = 0 # The longest common substring return s1[longest_end_pos - longest_length: longest_end_pos]"},{"question":"Write a Python function that simulates the behavior of a stack with an additional feature: the ability to retrieve the minimum element in constant time. Implement the methods `push`, `pop`, `top`, and `getMin`. Avoid using additional libraries and ensure the efficiency of each method. Function Specification: - `push(val)`: Pushes an element onto the stack. - `pop()`: Removes the element on the top of the stack. - `top()`: Gets the top element of the stack. - `getMin()`: Retrieves the minimum element in the stack. Challenge: Optimize the space complexity by preventing the use of extra space proportional to the number of elements pushed onto the stack.","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, val): self.stack.append(val) if not self.min_stack or val <= self.min_stack[-1]: self.min_stack.append(val) def pop(self): if self.stack: top = self.stack.pop() if top == self.min_stack[-1]: self.min_stack.pop() def top(self): if self.stack: return self.stack[-1] def getMin(self): if self.min_stack: return self.min_stack[-1]"},{"question":"Write a function that takes two lists of integers as arguments and returns a list that contains only the elements that appear in both lists without duplicates. The elements in the resulting list should be arranged in the same order they appear in the first list. Do not use any built-in set operations such as `intersection`. Example: ```python Input: list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8] Output: [4, 5] ```","solution":"def common_elements(list1, list2): Returns a list that contains only the elements that appear in both lists without duplicates and in the order they appear in the first list. list2_set = set(list2) result = [] for element in list1: if element in list2_set and element not in result: result.append(element) return result"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Also, provide a test case to verify the correctness of your function. Furthermore, review the provided Python snippet which attempts this task but has logical flaws, leading to incorrect results. Identify and fix all errors in the provided code and explain your reasoning. Here is the flawed Python snippet for reference: ```python def is_prime(n): if n <= 1: return False for i in range(2, n): if n / i == 0: return False return True def filter_primes(numbers): return [num for num in numbers if is_prime(num)] # Test with [2, 3, 4, 5, 6, 7, 8, 9, 10] print(filter_primes([2, 3, 4, 5, 6, 7, 8, 9, 10])) ```","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def filter_primes(numbers): return [num for num in numbers if is_prime(num)]"},{"question":"Optimize the routine to detect if a given string is an anagram of another string. Consider strings \\"listen\\" and \\"silent\\" as examples. The function should be case-sensitive and take into account all characters, including spaces and punctuation marks. Provide a brief explanation of how your solution addresses the problem efficiently.","solution":"def are_anagrams(s1, s2): Determines if two strings are anagrams of each other. An anagram is a rearrangement of the characters of one string to form another string. This function is case-sensitive and considers all characters, including spaces and punctuation marks. Args: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. # Anagrams must have the same length if len(s1) != len(s2): return False # Count characters in both strings from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"Implement a function that generates the Fibonacci series up to a given number `n`, where `n` is a positive integer. The Fibonacci series is a sequence of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes like 0, 1, 1, 2, 3, 5, 8, and so on. Your function should handle the following: - Return an empty list if `n` is less than or equal to 0. - Ensure the output is a list containing all Fibonacci numbers up to the given number `n`. Sample Input and Output: ``` python fibonacci_series(10) # Output: [0, 1, 1, 2, 3, 5, 8] fibonacci_series(5) # Output: [0, 1, 1, 2, 3, 5] fibonacci_series(0) # Output: [] fibonacci_series(-2) # Output: [] ``` Erroneous Code Reference: ```python def fibonacci_series(n): if n <= 0: return [] series = [0, 1] while len(series) < n: series.append(series[-1] + series[-2]) return series fibonacci_series(10) ``` This code incorrectly generates the Fibonacci series by limiting the length, not considering values up to `n`. You are expected to fix this issue in your function.","solution":"def fibonacci_series(n): Generates the Fibonacci series up to a given number `n`. Parameters: n (int): The upper limit for the Fibonacci series. Returns: List[int]: A list containing Fibonacci numbers up to `n`. if n <= 0: return [] series = [0, 1] while True: next_value = series[-1] + series[-2] if next_value > n: break series.append(next_value) return series"},{"question":"# Problem Statement: You are asked to implement a class that represents a simple mathematical vector in a 2-dimensional space. The class should support vector addition, scalar multiplication, and computing the dot product. Your implementation should include: 1. An `__init__` method to initialize the vector, given its x and y components. 2. An `__add__` method to support the addition of two vectors. 3. An `__mul__` method to support scalar multiplication. 4. A `dot` method to compute the dot product of two vectors. 5. A `__repr__` method for representing the vector as a string in the form of `Vector(x, y)`. # Examples: ```python v1 = Vector(1, 2) v2 = Vector(3, 4) # Vector addition v3 = v1 + v2 # v3 should be Vector(4, 6) # Scalar multiplication v4 = v1 * 3 # v4 should be Vector(3, 6) # Dot product result = v1.dot(v2) # result should be 1*3 + 2*4 = 11 # String representation print(v1) # Should output: Vector(1, 2) ``` # Requirements: - The `__init__` method should take two arguments, `x` and `y`, which are the components of the vector. - The `__add__` method should return a new vector which is the sum of the two vectors. - The `__mul__` method should return a new vector which is the result of scaling the original vector by a scalar. - The `dot` method should accept another vector as its argument and return the dot product of the two vectors. - The `__repr__` method should return the string representation of the vector. # Constraints: - You can assume that all the inputs are valid and no need to handle invalid inputs. - You don\'t need to account for performance optimizations. Implement the `Vector` class according to these specifications.","solution":"class Vector: def __init__(self, x, y): self.x = x self.y = y def __add__(self, other): return Vector(self.x + other.x, self.y + other.y) def __mul__(self, scalar): return Vector(self.x * scalar, self.y * scalar) def dot(self, other): return self.x * other.x + self.y * other.y def __repr__(self): return f\\"Vector({self.x}, {self.y})\\""},{"question":"Implement a Python function that takes a list of integers and an integer value \'k\' as inputs and returns a list of integers representing the first \'k\' largest unique elements from the input list. Your function should handle duplicates in the input list and ensure no duplicates appear in the output list. If the number of unique elements in the input list is less than \'k\', return the unique elements available. The function should be optimized for performance and must manage large inputs efficiently. Implement necessary error handling for invalid inputs and provide unit tests for the same. The solution should not use any built-in Python functions or libraries that directly solve this problem (e.g., `heapq.nlargest`).","solution":"def first_k_largest_unique_elements(nums, k): Returns the first k largest unique elements from the input list. Parameters: nums (list): List of integers. k (int): Number of largest unique elements to return. Returns: list: The first k largest unique elements from nums. if not isinstance(nums, list) or not all(isinstance(num, int) for num in nums): raise ValueError(\\"nums must be a list of integers\\") if not isinstance(k, int) or k <= 0: raise ValueError(\\"k must be a positive integer\\") unique_elems = set(nums) unique_list = list(unique_elems) unique_list.sort(reverse=True) return unique_list[:k]"},{"question":"Construct a function that takes a list of integers and returns the list sorted in descending order without using any built-in sorting functions. Ensure your implementation employs a sorting algorithm, such as bubble sort, selection sort, or insertion sort. Optional: Consider edge cases such as an empty list or a list with one element.","solution":"def sort_descending(lst): Sorts a list of integers in descending order using the bubble sort algorithm. Parameters: lst (list): A list of integers. Returns: list: A list of integers sorted in descending order. n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] < lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"question":"Create a Python program that reads a list of student records from a text file and performs various operations on the data. Each student record consists of a name, ID, and a list of grades. The file format is as follows, with each student record on a separate line: ``` John Doe, 21, 90, 85, 92 Jane Smith, 22, 88, 79, 85 Alice Johnson, 23, 95, 92, 98 ``` Your program should: 1. Provide a function `read_records(file_path)` that reads the student records from the specified text file and returns a list of dictionaries, where each dictionary represents a student. 2. Provide a function `get_student_average(student)` that takes a student dictionary and returns the average of their grades. 3. Provide a function `get_average_grades(students_list)` that takes the list of student dictionaries and prints each student\'s name along with their average grade. 4. Provide a function `get_highest_scorer(students_list)` that returns the name of the student with the highest average grade. Here\'s a skeleton of the program for you to complete: ```python def read_records(file_path): # Function to read student records from a text file pass def get_student_average(student): # Function to calculate the average grade of a student pass def get_average_grades(students_list): # Function to print each student\'s name and their average grade pass def get_highest_scorer(students_list): # Function to find the student with the highest average grade pass # Example usage if __name__ == \\"__main__\\": file_path = \\"students.txt\\" students = read_records(file_path) get_average_grades(students) highest_scorer = get_highest_scorer(students) print(f\\"Student with the highest average grade: {highest_scorer}\\") ``` Test your program with the provided example data and ensure it handles edge cases such as: - Empty records - Students with no grades - Invalid data format in the input file","solution":"def read_records(file_path): Reads student records from a text file and returns a list of dictionaries. :param file_path: Path to the input file :return: List of student records as dictionaries students = [] with open(file_path, \'r\') as file: for line in file: parts = line.strip().split(\',\') name, id = parts[0].strip(), int(parts[1].strip()) grades = list(map(int, parts[2:])) students.append({\'name\': name, \'id\': id, \'grades\': grades}) return students def get_student_average(student): Calculates the average grade of a student. :param student: Dictionary representing a student :return: Average grade of the student grades = student[\'grades\'] if not grades: return 0 return sum(grades) / len(grades) def get_average_grades(students_list): Prints each student\'s name and their average grade. :param students_list: List of student dictionaries for student in students_list: avg_grade = get_student_average(student) print(f\\"{student[\'name\']}: {avg_grade:.2f}\\") def get_highest_scorer(students_list): Finds the student with the highest average grade. :param students_list: List of student dictionaries :return: Name of the student with the highest average grade highest_avg = -1 highest_scorer = None for student in students_list: avg_grade = get_student_average(student) if avg_grade > highest_avg: highest_avg = avg_grade highest_scorer = student[\'name\'] return highest_scorer"},{"question":"Implement a function that takes a string as input and returns the longest palindromic substring within that string. A palindrome is a string that reads the same backward as forward. Your function should consider only alphanumeric characters and ignore case sensitivity. For instance, given the input string \\"A man, a plan, a canal, Panama,\\" the output should be \\"A man a plan a canal Panama\\". ```python def longest_palindromic_substring(s: str) -> str: # Your code here pass # Example usage: # longest_palindromic_substring(\\"A man, a plan, a canal, Panama\\") # should return \\"A man a plan a canal Panama\\" ```","solution":"def longest_palindromic_substring(s: str) -> str: def preprocess_string(s: str) -> str: return \'\'.join(e for e in s if e.isalnum()).lower() def expand_around_center(s: str, left: int, right: int) -> str: while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] s = preprocess_string(s) longest = \\"\\" for i in range(len(s)): # odd length palindromes odd_palindrome = expand_around_center(s, i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # even length palindromes even_palindrome = expand_around_center(s, i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Write a Python function to calculate the longest substring with all distinct characters for a given string. Also, provide an incorrect implementation of this function for correction. Ensure your code does not use any built-in strings functions (other than basic ones like len() or range()). Consider addressing edge cases such as strings with repetitive characters or very short strings. # Given String: input_string = \\"pwwkew\\" # Example Erroneous Code: Wrong Implementation of finding the longest substring with all distinct characters using an incorrect approach or inefficient logic. Note: Efficient handling of string traversal and correct addressing of edge cases should be considered in your function.","solution":"def longest_substring_distinct(s): Returns the length of the longest substring with all distinct characters. if len(s) <= 1: return len(s) max_length = 0 start = 0 seen = {} for end in range(len(s)): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function in Python that takes an integer `n` as input and returns a list of the first `n` prime numbers. Ensure that your function has efficient time complexity, suitable for handling relatively larger values of `n`.","solution":"def get_primes(n): Returns a list of the first n prime numbers. if n < 1: return [] primes = [] candidate = 2 while len(primes) < n: for p in primes: if p * p > candidate: primes.append(candidate) break if candidate % p == 0: break else: primes.append(candidate) candidate += 1 return primes"},{"question":"Write a function that processes a provided string of mathematical expressions separated by semicolons and evaluates each expression. The string can contain basic arithmetic operations (+, -, *, /) and parentheses for grouping. Return a list of evaluated results for each expression in the order they appear. For example, given the string `\\"5 + 3; 12 / 4; (7 - 1) * 3;\\"`, the function should return `[8, 3.0, 18]`. You may assume that the input string is well-formed and does not contain any invalid characters or malformed expressions. Function Signature: ```python def evaluate_expressions(expressions: str) -> list: pass ``` Example: ```python expressions = \\"5 + 3; 12 / 4; (7 - 1) * 3;\\" print(evaluate_expressions(expressions)) # Output: [8, 3.0, 18] ```","solution":"def evaluate_expressions(expressions: str) -> list: Evaluates a string of mathematical expressions separated by semicolons. Parameters: expressions (str): A string containing mathematical expressions separated by semicolons. Returns: list: A list containing the result of each evaluated expression in the order they appear. results = [] expression_list = expressions.split(\';\') for expr in expression_list: if expr.strip(): # check if the expression is not empty results.append(eval(expr.strip())) return results"},{"question":"Create a function that takes an integer `n` as input and returns a list of all the integer values from 1 to `n` that are perfect squares, arranged in descending order. A perfect square is an integer that is the square of an integer (e.g., 1, 4, 9, 16, etc.). The function should handle cases where `n` is less than 1 by returning an empty list. Additionally, optimize your solution to ensure efficient handling of large values of `n`.","solution":"import math def perfect_squares(n): Returns a list of all perfect squares from 1 to n in descending order. If n is less than 1, returns an empty list. if n < 1: return [] squares = [] for i in range(int(math.sqrt(n)), 0, -1): squares.append(i * i) return squares"},{"question":"Develop a function that processes an integer list and returns another list where each element is the product of all the integers in the original list except the one at the corresponding index. You are not allowed to use division for this problem. Your task involves creating a function `product_except_self(nums)` that takes a single list of integers, `nums`, as its argument. Implement an algorithm that iterates through the list multiple times to compute the desired result efficiently. Ensure your function handles edge cases, such as the list containing zeroes or having only one element. Write a comprehensive set of test cases to validate your solution, making sure to cover typical scenarios, boundary conditions, and special cases. Optimize the function for minimal time complexity and avoid using extra space beyond the output list.","solution":"def product_except_self(nums): Returns a list such that each element at index i is the product of all the elements in nums except nums[i]. length = len(nums) if length == 0: return [] if length == 1: return [1] # Initialize the output array products = [1] * length # Calculate products of all elements to the left of each index left_product = 1 for i in range(length): products[i] = left_product left_product *= nums[i] # Calculate products of all elements to the right of each index right_product = 1 for i in range(length - 1, -1, -1): products[i] *= right_product right_product *= nums[i] return products"},{"question":"Implement a function called \\"calculateAverageGrade\\" for the \\"Student\\" class. The function should iterate over a list of course grades, calculate the average grade, and return it. The grades are stored in a dictionary with course names as keys and corresponding grades as values. Ensure that the function handles cases where the student might have no grades yet, and account for any potential anomalous grades (e.g., negative values or grades exceeding the maximum allowable grade of 100).","solution":"class Student: def __init__(self, grades=None): Initializes a new Student instance. :param grades: Dictionary containing course grades with course names as keys and grades as values. if grades is None: grades = {} self.grades = grades def calculateAverageGrade(self): Calculates the average grade of the student. :return: The average grade, or None if there are no valid grades. # Filter out anomalous grades valid_grades = [grade for grade in self.grades.values() if 0 <= grade <= 100] if not valid_grades: return None average_grade = sum(valid_grades) / len(valid_grades) return average_grade"},{"question":"Create a function in Python that takes a list of integers and returns the list with all duplicate entries removed, while preserving the original order of the elements. Write the function and provide a test case to demonstrate that it correctly handles the input `[4, 5, 4, 2, 3, 2, 1, 5]`.","solution":"def remove_duplicates(lst): Returns a list with all duplicate entries removed, preserving the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Convert the following decimal number into its binary, octal, and hexadecimal equivalents. Decimal Numeral: 156","solution":"def decimal_to_binary(decimal): Converts a decimal number to its binary equivalent. return bin(decimal)[2:] def decimal_to_octal(decimal): Converts a decimal number to its octal equivalent. return oct(decimal)[2:] def decimal_to_hexadecimal(decimal): Converts a decimal number to its hexadecimal equivalent. return hex(decimal)[2:].upper() # Example conversions for decimal number 156 decimal_number = 156 binary_equivalent = decimal_to_binary(decimal_number) # \'10011100\' octal_equivalent = decimal_to_octal(decimal_number) # \'234\' hexadecimal_equivalent = decimal_to_hexadecimal(decimal_number) # \'9C\'"},{"question":"Implement a function that takes as input an array of non-negative integers representing the number of books read per month by various readers, and an integer k representing a threshold. The function should return a list of readers who have read more than k books in a month for each given month. For example, given the following array of books read per month by different readers and a threshold k: Books Read: [[3, 8, 5, 6], [10, 12, 9, 4], [7, 1, 2, 10]] Threshold (k): 5 Return a list of lists indicating which readers read more than k books in each month. The expected output for the example provided would be: [[1, 3], [0, 1, 2], [0, 3]] where the indices refer to the positions of readers in the array who read more than the threshold number of books in each respective month.","solution":"def readers_above_threshold(books_read, k): Determines which readers have read more than k books in each month. :param books_read: List of lists where each sublist contains the number of books read by each reader in a month. :param k: Integer threshold. :return: List of lists indicating the readers who have read more than k books in each month. result = [] for month_data in books_read: month_result = [] for idx, books in enumerate(month_data): if books > k: month_result.append(idx) result.append(month_result) return result"},{"question":"Download the \\"Iris\\" dataset from this URL: https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data. Utilize this data to create a classification model that can predict the species of an iris plant based on its features (sepal length, sepal width, petal length, and petal width). Employ any machine learning classification algorithm of your choice (e.g., decision tree, k-nearest neighbors, support vector machine). Evaluate the accuracy of your model using a suitable metric, such as accuracy score or F1 score, and provide a confusion matrix to visualize its performance.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import LabelEncoder from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import confusion_matrix, accuracy_score, classification_report def load_iris_data(): url = \\"https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\\" column_names = [\\"sepal_length\\", \\"sepal_width\\", \\"petal_length\\", \\"petal_width\\", \\"species\\"] df = pd.read_csv(url, header=None, names=column_names) return df def preprocess_data(df): X = df.iloc[:, :-1] y = df.iloc[:, -1] label_encoder = LabelEncoder() y = label_encoder.fit_transform(y) return train_test_split(X, y, test_size=0.2, random_state=42) def train_model(X_train, y_train): model = DecisionTreeClassifier(random_state=42) model.fit(X_train, y_train) return model def evaluate_model(model, X_test, y_test): y_pred = model.predict(X_test) acc_score = accuracy_score(y_test, y_pred) conf_matrix = confusion_matrix(y_test, y_pred) class_report = classification_report(y_test, y_pred) return acc_score, conf_matrix, class_report # Load and preprocess the iris dataset df_iris = load_iris_data() X_train, X_test, y_train, y_test = preprocess_data(df_iris) # Train the decision tree classifier iris_model = train_model(X_train, y_train) # Evaluate the model accuracy, confusion_mat, classif_report = evaluate_model(iris_model, X_test, y_test) # Print evaluation results print(\\"Accuracy:\\", accuracy) print(\\"Confusion Matrix:n\\", confusion_mat) print(\\"Classification Report:n\\", classif_report)"},{"question":"Build a Python application that reads a text file containing a list of numbers (one number per line) and calculates the median of these numbers. If the list has an odd number of elements, the median is the middle element. If it has an even number of elements, the median is the average of the two middle elements. The application should handle any potential errors, such as empty files, files with non-numeric data, or missing files, by displaying appropriate error messages.","solution":"import os def read_numbers_from_file(file_path): Reads a list of numbers from a specified file. The file should contain one number per line. Returns the list of numbers. if not os.path.isfile(file_path): raise FileNotFoundError(\\"The specified file does not exist.\\") numbers = [] with open(file_path, \'r\') as file: lines = file.readlines() if not lines: raise ValueError(\\"The file is empty.\\") for line in lines: try: number = float(line.strip()) numbers.append(number) except ValueError: raise ValueError(\\"The file contains non-numeric data.\\") return numbers def calculate_median(numbers): Calculates the median of a list of numbers. if not numbers: raise ValueError(\\"The list of numbers is empty.\\") numbers.sort() n = len(numbers) mid = n // 2 if n % 2 == 1: return numbers[mid] else: return (numbers[mid - 1] + numbers[mid]) / 2 def find_median_from_file(file_path): Finds the median of numbers read from a specified file. numbers = read_numbers_from_file(file_path) return calculate_median(numbers)"},{"question":"You are tasked with a challenge: Implementing a Cache System with Expiration. The task details are as follows: You are to design a cache that stores key-value pairs with a given Time-To-Live (TTL) value. The TTL value specifies the time (in seconds) until the cache entry expires. The cache system should support the following operations: 1. Setting a key\'s value along with an optional TTL value. 2. Retrieving a key\'s value, returning the stored value only if it has not expired; otherwise, return null. 3. Deleting a key\'s value from the cache. You are to implement the `TTLCache` class with the following methods: `TTLCache()` This method initializes the cache system. `void set(String key, int value, int ttl)` This method stores the key-value pair in the cache, and sets the TTL value for the key. If the key already exists in the cache, its value and TTL should be updated. If the `ttl` parameter is not provided, the entry should never expire. `Integer get(String key, int timestamp)` This method returns the value associated with the key if it exists and has not expired at the given `timestamp` (in seconds). If the key does not exist or has expired, return null. `void del(String key)` This method deletes the key and its associated value from the cache. Here is an example to illustrate the functionality: Input [\\"TTLCache\\",\\"set\\",\\"get\\",\\"set\\",\\"get\\",\\"del\\",\\"get\\"] [[], [\\"foo\\", 1, 5], [\\"foo\\", 1], [\\"foo\\", 2, 1], [\\"foo\\", 6], [\\"foo\\"], [\\"foo\\", 7]] Output [null, null, 1, null, null, null, null] Explanation TTLCache initializes an empty cache. set(\\"foo\\", 1, 5) stores the key \\"foo\\" with value 1 and TTL 5. get(\\"foo\\", 1) returns 1. set(\\"foo\\", 2, 1) updates the key \\"foo\\" with value 2 and TTL 1. get(\\"foo\\", 6) returns null because the entry has expired. del(\\"foo\\") deletes the key \\"foo\\". get(\\"foo\\", 7) returns null because the key \\"foo\\" no longer exists. The constraints are as follows: - Each `key` is a non-empty string consisting of alphanumeric characters. - The `value` is an integer. - `1 <= ttl <= 10^9`. - `1 <= timestamp <= 2 * 10^9`. - The cache size should be manageable, and assume the system handles no more than 1000 keys at any given time.","solution":"from time import time class TTLCache: def __init__(self): self.cache = {} def set(self, key, value, ttl=None): expire_at = time() + ttl if ttl is not None else None self.cache[key] = (value, expire_at) def get(self, key, timestamp=None): if key in self.cache: value, expire_at = self.cache[key] if expire_at is None or expire_at > time(): return value return None def del_key(self, key): if key in self.cache: del self.cache[key]"},{"question":"Write a Python function that accepts a list of integers and returns a dictionary containing the frequency count for each unique integer in the list. Additionally, if the input is not a list or contains non-integer elements, the function should return an appropriate error message. Input example: numbers = [1, 2, 2, 3, 3, 3, 4]","solution":"def frequency_count(numbers): Returns a dictionary containing the frequency count of each unique integer in the list. If the input is not a list or contains non-integer elements, returns an appropriate error message. if not isinstance(numbers, list): return \\"Error: Input should be a list.\\" frequency = {} for number in numbers: if not isinstance(number, int): return \\"Error: List should only contain integers.\\" frequency[number] = frequency.get(number, 0) + 1 return frequency"},{"question":"Write a function that takes a string input and returns the first non-repeating character. If there are no non-repeating characters, return an empty string. The function should be case-sensitive. # Example: ```python first_non_repeating_character(\\"stress\\") # returns \\"t\\" first_non_repeating_character(\\"sTreSs\\") # returns \\"T\\" first_non_repeating_character(\\"aabbcc\\") # returns \\"\\" ```","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string. If there are no non-repeating characters, returns an empty string. The function is case-sensitive. :param s: Input string :return: First non-repeating character or empty string # Create a dictionary to store the count of each character char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no non-repeating character found, return empty string return \\"\\""},{"question":"Write a Python function `transpose_matrix` that takes an `n x m` matrix (a list of lists) as input and returns its transpose (an `m x n` matrix). The input matrix may contain any numeric values. Ensure your function handles edge cases such as an empty matrix or a matrix with varying row lengths. Write test cases to verify your implementation. Example: ```python def transpose_matrix(matrix): Given a matrix as a list of lists, return its transpose. Parameters: matrix (list of lists): An n x m matrix containing numeric values. Returns: list of lists: An m x n transposed matrix. # your code here # Test cases print(transpose_matrix([[1, 2, 3], [4, 5, 6]])) # Expected output: [[1, 4], [2, 5], [3, 6]] print(transpose_matrix([[1]])) # Expected output: [[1]] print(transpose_matrix([])) # Expected output: [] print(transpose_matrix([[1, 2], [3], [4, 5, 6]])) # Handle edge case of varying row lengths if needed. ``` Note: You may assume the input is provided in a well-defined format (e.g., a valid list of lists).","solution":"def transpose_matrix(matrix): Given a matrix as a list of lists, return its transpose. Parameters: matrix (list of lists): An n x m matrix containing numeric values. Returns: list of lists: An m x n transposed matrix. if not matrix: # Handle the edge case of an empty matrix return [] # Ensure all rows have the same length row_lengths = [len(row) for row in matrix] if len(set(row_lengths)) > 1: raise ValueError(\\"Matrix rows have varying lengths.\\") return [[matrix[i][j] for i in range(len(matrix))] for j in range(len(matrix[0]))]"},{"question":"Write a function that takes a list of strings and returns a dictionary with the strings as keys and their lengths as values. example_list = [\\"apple\\", \\"banana\\", \\"pear\\", \\"grape\\"]","solution":"def strings_to_lengths(strings_list): Returns a dictionary with the strings as keys and their lengths as values. :param strings_list: List of strings :return: Dictionary with string lengths return {string: len(string) for string in strings_list}"},{"question":"Create a Python class `Circle` that includes a method to calculate the area of the circle and another method to calculate its circumference. The class should handle exceptions for invalid circle radii (non-numeric values or negative numbers). Provide an example of how to instantiate the class and call both methods.","solution":"import math class Circle: def __init__(self, radius): if not isinstance(radius, (int, float)) or radius < 0: raise ValueError(\\"Radius must be a non-negative number.\\") self.radius = radius def area(self): return math.pi * self.radius ** 2 def circumference(self): return 2 * math.pi * self.radius # Example of how to instantiate the class and call both methods # circle = Circle(5) # print(\\"Area:\\", circle.area()) # Output: Area: 78.53981633974483 # print(\\"Circumference:\\", circle.circumference()) # Output: Circumference: 31.41592653589793"},{"question":"Given a list of strings, write a program to group all anagrams together. The program should output a list of groups, where each group is itself a list containing strings that are anagrams of each other. For example, given the input `[\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]`, the output should be a list of lists like `[[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]]`. Note: The order of the output and the order within the inner lists does not matter.","solution":"from collections import defaultdict def group_anagrams(strs): Groups anagrams together from the given list of strings. Parameters: strs (List[str]): A list of strings. Returns: List[List[str]]: A list of sublists, each containing strings that are anagrams of each other. anagrams = defaultdict(list) for word in strs: sorted_word = tuple(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"<p> Consider an undirected graph represented as a grid where each cell can either be walkable (represented by 0) or blocked (represented by 1). You are given a starting cell (x_s, y_s) and a target cell (x_t, y_t). Your task is to determine the number of distinct shortest paths from the starting cell to the target cell, passing through only walkable cells. </p> <p> For instance, given the following grid: </p> <div align=\\"center\\"> <pre> 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 </pre> </div> <p> With the starting cell at (0,0) and the target cell at (3,3), there are 2 distinct shortest paths. The paths are (0,0) rightarrow (0,1) rightarrow (1,1) rightarrow (2,1) rightarrow (2,2) rightarrow (3,2) rightarrow (3,3) and (0,0) rightarrow (0,1) rightarrow (1,1) rightarrow (1,2) rightarrow (2,2) rightarrow (3,2) rightarrow (3,3). </p> <p> Write a function `count_shortest_paths(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int` that takes in a grid, the start cell, and the target cell, and returns the number of distinct shortest paths from the start to the target. </p> <p> Function signature: </p> <pre> def count_shortest_paths(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int: </pre> <p> Constraints: </p> <ul> <li>The grid will have dimensions N times M where 1 leq N, M leq 100.</li> <li>The start and target cells will always be walkable (0).</li> <li>There will always be at least one valid path from the start to the target.</li> </ul> <p> Example: </p> <pre> grid = [ [0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0] ] start = (0, 0) target = (3, 3) count_shortest_paths(grid, start, target) # Output: 2 </pre>","solution":"from typing import List, Tuple from collections import deque def count_shortest_paths(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int: rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) distances = [[float(\'inf\')] * cols for _ in range(rows)] distances[start[0]][start[1]] = 0 path_counts = [[0] * cols for _ in range(rows)] path_counts[start[0]][start[1]] = 1 while queue: r, c, dist = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0: if dist + 1 < distances[nr][nc]: distances[nr][nc] = dist + 1 path_counts[nr][nc] = path_counts[r][c] queue.append((nr, nc, dist + 1)) elif dist + 1 == distances[nr][nc]: path_counts[nr][nc] += path_counts[r][c] return path_counts[target[0]][target[1]]"},{"question":"Implement a function in Python that generates all possible permutations of a given string using recursion. # Specifications: - Your function should be named `generate_permutations`. - It should take a single parameter, a string `s`. - The function should return a list containing all the permutations of `s`. # Example: ```python def generate_permutations(s: str) -> List[str]: pass # Your code here # Test cases print(generate_permutations(\\"abc\\")) # Expected output: [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] print(generate_permutations(\\"a\\")) # Expected output: [\'a\'] print(generate_permutations(\\"\\")) # Expected output: [\'\'] ``` # Constraints: - The input string `s` will have length 10 or less, composed of English letters (`a-z`).","solution":"def generate_permutations(s): Generates all possible permutations of the given string using recursion. :param s: Input string :return: List of all permutations of the input string if len(s) == 0: return [\'\'] permutations = [] for i, char in enumerate(s): # Recursively get permutations of the remaining part of the string remaining = s[:i] + s[i+1:] for p in generate_permutations(remaining): permutations.append(char + p) return permutations"},{"question":"Write a function that checks if a given string is a valid palindrome after removing all non-alphanumeric characters and ignoring case differences. Your solution should handle Unicode characters. The function should return `True` if the string is a palindrome and `False` otherwise. # Example ```python is_valid_palindrome(\\"A man, a plan, a canal: Panama\\") # Returns True is_valid_palindrome(\\"race a car\\") # Returns False is_valid_palindrome(\\"Топот\\") # Returns True ``` # Constraints - The input string can be of any length from 1 to (10^5) characters. - Handle lowercase and uppercase English letters, digits, and possibly non-ASCII characters. # Function Signature ```python def is_valid_palindrome(s: str) -> bool: pass ```","solution":"import re def is_valid_palindrome(s: str) -> bool: Checks if a given string is a valid palindrome after removing all non-alphanumeric characters and ignoring case differences. The function handles Unicode characters. :param s: The input string to check. :return: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase sanitized_str = re.sub(r\'W+\', \'\', s, flags=re.UNICODE).lower() # Compare the string with its reverse return sanitized_str == sanitized_str[::-1]"},{"question":"<p>Consider an n times n grid where each cell contains a positive integer. You are allowed to move right or down from a cell to an adjacent one. Your goal is to move from the top-left cell (1, 1) to the bottom-right cell (n, n) such that the sum of the values in the chosen cells along the path is minimized.</p> <p>Write a function <code>min_path_sum</code> that takes an integer n representing the size of the grid and a 2D list <code>grid</code> of size n times n where each element represents the integer value in that cell. Your function should return the minimum path sum from the top-left cell to the bottom-right cell.</p> <p>For example, given the grid: <pre><code> grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] </code></pre> <p>The function should return <code>7</code>, which is the sum along the path 1 → 3 → 1 → 1 → 1.</p> <p><strong>Function Signature:</strong></p> <pre><code>def min_path_sum(n: int, grid: List[List[int]]) -> int:</code></pre> <p><strong>Constraints:</strong></p> <ul> <li>1 leq n leq 100</li> <li>All elements of <code>grid</code> are positive integers not exceeding 10^5.</li> </ul>","solution":"from typing import List def min_path_sum(n: int, grid: List[List[int]]) -> int: # Create a DP table with the same dimensions as the grid dp = [[0] * n for _ in range(n)] # Initialize the top-left cell with the same value as the grid dp[0][0] = grid[0][0] # Fill the first row of the DP table for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column of the DP table for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell of the DP table contains the answer return dp[n - 1][n - 1]"},{"question":"Implement a function that verifies whether a given string is a valid mnemonic for a color code that adheres to the following criteria: 1. The string must be 7 characters long. 2. The first character must be a \'#\'. 3. The remaining 6 characters must be valid hexadecimal digits (0-9, a-f, A-F). In addition to checking the validity, return the color code in uppercase if it\'s valid. If the string is invalid, the function should raise a ValueError with an appropriate message. Example function signature: `def validate_color_code(color_code: str) -> str:` Example Usage: ```python try: print(validate_color_code(\\"#1a2B3c\\")) # Output: #1A2B3C print(validate_color_code(\\"123456\\")) # Raises ValueError print(validate_color_code(\\"#123abz\\")) # Raises ValueError except ValueError as ve: print(ve) ```","solution":"def validate_color_code(color_code: str) -> str: Validates whether the given string is a valid color code and returns it in uppercase. Parameters: color_code (str): The string to validate. Returns: str: The valid color code in uppercase. Raises: ValueError: If the string is not a valid color code. if len(color_code) != 7: raise ValueError(\\"Color code must be 7 characters long.\\") if color_code[0] != \'#\': raise ValueError(\\"Color code must start with \'#\'.\\") if not all(c in \'0123456789abcdefABCDEF\' for c in color_code[1:]): raise ValueError(\\"The remaining characters must be valid hexadecimal digits.\\") return color_code.upper()"},{"question":"Write a function that accepts a string representing a mathematical expression and determine if the parentheses within the expression are balanced. The function should support three types of brackets: (), [], and {}. Implement an algorithm that runs in O(n) time complexity, where n is the length of the string. Additionally, provide a few test cases to demonstrate the working of your function.","solution":"def are_parentheses_balanced(expression): Returns True if the parentheses within the given expression are balanced, otherwise False. Supports (), [], and {} brackets. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in \'({[\': stack.append(char) elif char in \')}]\': if not stack or stack.pop() != matching_bracket[char]: return False return not stack"},{"question":"Implement a function to calculate the Levenshtein distance between two strings. The Levenshtein distance is defined as the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other. Your function should take two strings as input and return an integer representing the Levenshtein distance between them. **Function Signature:** ```python def levenshtein_distance(str1: str, str2: str) -> int: pass ``` **Constraints:** - The input strings will have a maximum length of 1000 characters. - The function should handle both empty strings and non-empty strings. **Example:** ```python levenshtein_distance(\\"kitten\\", \\"sitting\\") # returns 3 levenshtein_distance(\\"flaw\\", \\"lawn\\") # returns 2 levenshtein_distance(\\"\\", \\"\\") # returns 0 levenshtein_distance(\\"a\\", \\"\\") # returns 1 levenshtein_distance(\\"\\", \\"abc\\") # returns 3 ``` **Explanation:** - In the first example, the minimum edits to transform \\"kitten\\" to \\"sitting\\" are: replace \'k\' with \'s\', replace \'e\' with \'i\', and add \'g\'. - In the second example, the minimum edits to transform \\"flaw\\" to \\"lawn\\" are: replace \'f\' with \'l\' and add \'n\'.","solution":"def levenshtein_distance(str1: str, str2: str) -> int: Calculate the Levenshtein distance between two strings. :param str1: The first string. :param str2: The second string. :return: The Levenshtein distance between str1 and str2. if len(str1) == 0: return len(str2) if len(str2) == 0: return len(str1) matrix = [[0] * (len(str2) + 1) for _ in range(len(str1) + 1)] for i in range(len(str1) + 1): matrix[i][0] = i for j in range(len(str2) + 1): matrix[0][j] = j for i in range(1, len(str1) + 1): for j in range(1, len(str2) + 1): if str1[i - 1] == str2[j - 1]: cost = 0 else: cost = 1 matrix[i][j] = min(matrix[i - 1][j] + 1, # deletion matrix[i][j - 1] + 1, # insertion matrix[i - 1][j - 1] + cost) # substitution return matrix[-1][-1]"},{"question":"Write a function to determine if it\'s possible to partition an array of integers into two subsets such that the sum of elements in both subsets is equal. The function should return `true` if such a partition exists, otherwise, it should return `false`. You are not allowed to use any built-in Python functions that directly solve the problem. Instead, use a dynamic programming approach to achieve the solution. Your solution should also handle negative numbers in the array.","solution":"def can_partition(nums): total_sum = sum(nums) # Early return if total_sum is odd if total_sum % 2 != 0: return False subset_sum = total_sum // 2 n = len(nums) # dp array to keep track of possible sums dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for j in range(subset_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[subset_sum]"},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the unique elements from the original list, preserving their order of first appearance.","solution":"def unique_elements(lst): Returns a new list containing only the unique elements from the input list, preserving their order of first appearance. seen = set() unique_lst = [] for item in lst: if item not in seen: seen.add(item) unique_lst.append(item) return unique_lst"},{"question":"Write a Python function that takes a list of integers and returns the list sorted in ascending order, but without using any built-in sorting functions. Implement sorting algorithm from scratch.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Develop a Python function that takes a list of integers and determines whether the list forms an arithmetic progression (AP). An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. Handle edge cases such as empty lists, lists with one element, and lists where all elements are the same. Additionally, provide a breakdown of the time complexity and space complexity of your solution. The function should adhere to the following: - For an empty list, the function should return `True` as an empty sequence trivially satisfies the condition of an arithmetic progression. - For a list with a single element, the function should return `True` since a single element can be considered as an arithmetic progression. - For lists where all elements are identical, the function should properly recognize that they form an arithmetic progression. - The function should be able to handle negative numbers and large input sizes effectively. Consider this example list = [5, 7, 9, 11, 13].","solution":"def is_arithmetic_progression(lst): Determine if the given list of integers forms an arithmetic progression. Parameters: lst (list): A list of integers. Returns: bool: True if the list forms an arithmetic progression, False otherwise. if len(lst) <= 1: return True common_difference = lst[1] - lst[0] for i in range(2, len(lst)): if lst[i] - lst[i-1] != common_difference: return False return True # Time Complexity: O(n), where n is the length of the list. We traverse the list once. # Space Complexity: O(1), only a constant amount of extra space is used."},{"question":"Given a list of integers, write a Python function that finds and returns the first duplicate number in the list. If there are no duplicates, the function should return -1. For example, given the list `[2, 3, 1, 2, 4, 3]`, the function should return `2` as it is the first number that repeats in the sequence.","solution":"def first_duplicate(nums): Returns the first duplicate number in the list nums. If there are no duplicates, returns -1. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Design a function in Python that takes a list of integers and a target integer. The function should return the indices of the two numbers in the list that add up to the target. If no such pair exists, return an empty list. Assume that there is exactly one solution, and you may not use the same element twice. The function signature should be `def find_pair(nums: List[int], target: int) -> List[int]:`. # Example ```python # Example Usage nums = [2, 7, 11, 15] target = 9 find_pair(nums, target) # Output: [0, 1] ```","solution":"from typing import List def find_pair(nums: List[int], target: int) -> List[int]: Returns the indices of the two numbers in the list that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Write a function that takes a list of integers and an integer, k, and returns the kth smallest element in the list. Your function should handle the possible case where k is out of bounds by raising a ValueError. Additionally, the function should maintain O(n log n) time complexity. # Example: ```python def kth_smallest(arr, k): # Your implementation here # Example usage: arr = [7, 10, 4, 3, 20, 15] k = 3 print(kth_smallest(arr, k)) # Output: 7 arr = [7, 10, 4, 3, 20, 15] k = 6 print(kth_smallest(arr, k)) # Output: 20 arr = [2, 1, 5, 6] k = 5 print(kth_smallest(arr, k)) # Raises ValueError: \\"k is out of bounds\\" ```","solution":"def kth_smallest(arr, k): Returns the kth smallest element in the list arr. Raises ValueError if k is out of bounds. if k < 1 or k > len(arr): raise ValueError(\\"k is out of bounds\\") arr_sorted = sorted(arr) return arr_sorted[k - 1]"},{"question":"Write a Python function that accepts a list of sentences and returns a list of the lengths of the shortest and longest words in each sentence. Use multiprocessing to handle multiple sentences concurrently to optimize performance. The function should handle punctuation and special characters gracefully. Note: Each process will handle a single sentence from the list. sentences_list = [\\"The quick brown fox jumps over the lazy dog\\", \\"To be, or not to be, that is the question!\\", \\"A journey of a thousand miles begins with a single step.\\", \\"Can you solve this problem efficiently?\\"]","solution":"import multiprocessing import re def word_lengths(sentence): words = re.findall(r\'bw+b\', sentence) if not words: return (0, 0) else: lengths = [len(word) for word in words] return (min(lengths), max(lengths)) def process_sentences(sentences_list): with multiprocessing.Pool(processes=len(sentences_list)) as pool: result = pool.map(word_lengths, sentences_list) return result"},{"question":"Write a function that receives an array of words and groups the anagrams together. Anagrams are words that have the same characters in the same frequency but in different orders. The function should return a list of lists, where each sublist contains anagrams grouped together. **Example:** ```python Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] ``` **Constraints:** - All input strings are in lowercase. - The number of words in the array does not exceed 1000. - Each word consists of lowercase English letters and has length between 1 and 100.","solution":"from collections import defaultdict def group_anagrams(words): Groups a list of words into anagrams. :param words: List of words :return: List of lists with grouped anagrams anagram_groups = defaultdict(list) for word in words: # Sort the word and use it as the key sorted_word = \'\'.join(sorted(word)) anagram_groups[sorted_word].append(word) # Return the values of the dictionary return list(anagram_groups.values())"},{"question":"Write a function that takes a list of integers and returns the same list with all prime numbers filtered out. You are not allowed to use any external libraries or built-in functions that directly identify or filter prime numbers. Example: Input: numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Expected output: [1, 4, 6, 8, 9, 10]","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def filter_non_primes(numbers): Returns a list of integers with all prime numbers filtered out. return [num for num in numbers if not is_prime(num)]"},{"question":"Use the Titanic dataset from Kaggle to build a logistic regression model that predicts survival. Preprocess the data by handling missing values, encoding categorical features, and scaling numerical features. Evaluate the model\'s performance using precision, recall, and F1-score metrics. Additionally, implement cross-validation and plot the ROC curve to visualize the model\'s performance.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler, OneHotEncoder from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline from sklearn.impute import SimpleImputer from sklearn.metrics import precision_score, recall_score, f1_score, roc_curve, auc import matplotlib.pyplot as plt def load_data(): # Load the dataset url = \'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\' data = pd.read_csv(url) return data def preprocess_data(df): # Drop columns that are not useful for prediction df = df.drop(columns=[\'PassengerId\', \'Name\', \'Ticket\', \'Cabin\'], errors=\'ignore\') # Separate the target variable from features y = df[\'Survived\'] X = df.drop(columns=[\'Survived\']) # Define the preprocessing for numerical and categorical features num_features = X.select_dtypes(include=[\'int64\', \'float64\']).columns.tolist() cat_features = X.select_dtypes(include=[\'object\']).columns.tolist() num_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'mean\')), (\'scaler\', StandardScaler())]) cat_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'most_frequent\')), (\'onehot\', OneHotEncoder(handle_unknown=\'ignore\'))]) preprocessor = ColumnTransformer( transformers=[ (\'num\', num_transformer, num_features), (\'cat\', cat_transformer, cat_features)]) return X, y, preprocessor def build_model(preprocessor): # Create the logistic regression model with a pipeline model = Pipeline(steps=[ (\'preprocessor\', preprocessor), (\'classifier\', LogisticRegression(max_iter=1000))]) return model def evaluate_model(model, X_test, y_test): # Make predictions y_pred = model.predict(X_test) y_pred_prob = model.predict_proba(X_test)[:, 1] # Calculate evaluation metrics precision = precision_score(y_test, y_pred) recall = recall_score(y_test, y_pred) f1 = f1_score(y_test, y_pred) # Print evaluation metrics print(f\'Precision: {precision}\') print(f\'Recall: {recall}\') print(f\'F1-score: {f1}\') # Plot ROC Curve fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob) roc_auc = auc(fpr, tpr) plt.figure() plt.plot(fpr, tpr, color=\'darkorange\', lw=2, label=\'ROC curve (area = %0.2f)\' % roc_auc) plt.plot([0, 1], [0, 1], color=\'navy\', lw=2, linestyle=\'--\') plt.xlim([0.0, 1.0]) plt.ylim([0.0, 1.05]) plt.xlabel(\'False Positive Rate\') plt.ylabel(\'True Positive Rate\') plt.title(\'Receiver Operating Characteristic\') plt.legend(loc=\\"lower right\\") plt.show() return precision, recall, f1 def cross_validate_model(model, X, y): # Perform cross-validation cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=1) cv_results = cross_val_score(model, X, y, cv=cv, scoring=\'f1\') print(f\'Cross-validated F1 scores: {cv_results}\') print(f\'Mean Cross-validated F1 score: {cv_results.mean()}\') return cv_results def main(): df = load_data() X, y, preprocessor = preprocess_data(df) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify=y) model = build_model(preprocessor) # Fit the model model.fit(X_train, y_train) # Evaluate the model evaluate_model(model, X_test, y_test) # Cross-validate the model cross_validate_model(model, X, y) if __name__ == \\"__main__\\": main()"},{"question":"<p>Given an array of unique integers, create a function `find_target_sum_pairs` that identifies all pairs of numbers in the array whose sum is equal to a given target value. The function should return a list of tuples containing the pairs. If no such pairs exist, the function should return an empty list.</p> <p><strong>Function Signature:</strong></p> <pre><code>def find_target_sum_pairs(nums: list, target: int) -> list: </code></pre> <p><strong>Input:</strong></p> <p>- `nums` (list of int): A list of unique integers.</p> <p>- `target` (int): The target sum value for the pairs.</p> <p><strong>Output:</strong></p> <p>- (list of tuples): A list containing tuples of pairs that sum to the given target. Each tuple should contain two integers.</p> <p><strong>Examples:</strong></p> <pre><code>find_target_sum_pairs([2, 4, 3, 5, 7, 8, 1], 10) # Output: [(3, 7), (2, 8)] find_target_sum_pairs([1, 2, 3, 4, 5], 9) # Output: [(4, 5)] find_target_sum_pairs([1, 2, 3, 4, 5], 10) # Output: [] find_target_sum_pairs([], 5) # Output: [] </code></pre> <p><strong>Constraints:</strong></p> <p>- The elements in the array and the target value are all integers.</p> <p>- The array can be empty.</p> <p>- The order of the pairs in the output list does not matter.</p>","solution":"def find_target_sum_pairs(nums, target): Identifies all pairs of numbers in the array whose sum is equal to a given target value. Parameters: nums (list of int): A list of unique integers. target (int): The target sum value for the pairs. Returns: list of tuples: A list containing tuples of pairs that sum to the given target. pairs = [] indices = {} for num in nums: complement = target - num if complement in indices: pairs.append((complement, num)) indices[num] = True return pairs"},{"question":"Given a string `s` containing a mix of uppercase and lowercase characters, implement a function `character_frequency(s)` in Python to count the occurrence of each character in the string and return a dictionary where the keys are the characters and the values are their respective counts. The function should be case-sensitive, so \'A\' and \'a\' should be counted separately. For instance, for `s = \\"HelloWorld\\"`, the output should be `{\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'W\': 1, \'r\': 1, \'d\': 1}`. Additionally, provide a brief code analysis and discuss the time complexity of your solution. Furthermore, considering the erroneous code below: ```python def character_frequency(s): counts = {} for c in s: if c not in counts: counts[c] = 0 counts[c] += 1 return counts print(character_frequency(\\"HelloWorld\\")) ``` Identify and describe any inefficiencies or mistakes in the approach and propose improvements to enhance the code performance or readability.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each character in the string s. Characters are treated case-sensitively. counts = {} for c in s: if c in counts: counts[c] += 1 else: counts[c] = 1 return counts # Code Analysis and Time Complexity # The given solution uses a dictionary to keep track of character frequencies. # For each character in the input string, the presence of the character is checked in the dictionary and the count is updated. # This approach ensures that each character is processed in constant O(1) time. # Thus, the overall time complexity is O(n), where n is the length of the input string. # The space complexity is O(k), where k is the number of unique characters in the string."},{"question":"Implement a function that takes a string containing parentheses, and determines if the order of the parentheses is valid. A valid string of parentheses is one where every opening parenthesis has a corresponding closing parenthesis in the correct order. The function should return a boolean value. Additionally, the function should also remove any non-parenthesis characters from the string and perform the validation on the cleaned-up string. For example, given the string \\"a(b)c)d(e(f)g)h\\", the function should return `False`, and for the string \\"a(b(c)d)e(f)\\", it should return `True`.","solution":"def is_valid_parentheses(s): Determines if the order of parentheses in the string is valid. Removes non-parenthesis characters and validates the parentheses. :param s: Input string containing parentheses and other characters. :return: True if the parentheses are valid, False otherwise. # Filter out non-parenthesis characters cleaned_s = \'\'.join([char for char in s if char in \'()\']) # Use a stack to validate the parentheses stack = [] for char in cleaned_s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Design a function that takes a string with various mathematical expressions embedded within arbitrary text and performs the following operations in sequence: 1. Identify and extract all mathematical expressions enclosed in double curly braces (`{{` and `}}`). The expressions can include basic arithmetic operations (`+`, `-`, `*`, `/`) and parentheses. 2. Evaluate each extracted expression to a float result. 3. Replace each original expression in the string with the evaluated result in the same position, maintaining the text around them unchanged. 4. Return the modified string with all expressions replaced by their respective evaluations. For this task, you may assume that the given string is well-formed such that all opening double curly braces have corresponding closing double curly braces, and the content inside the braces is a valid arithmetic expression. Here is an example to illustrate the functionality: ```python input_string = \\"The total cost is {{12.5 + 7.3}}, and the tax is {{(12.5 + 7.3) * 0.07}}. The grand total is {{12.5 + 7.3 + (12.5 + 7.3) * 0.07}}.\\" output_string = process_string(input_string) print(output_string) # \\"The total cost is 19.8, and the tax is 1.386. The grand total is 21.186.\\" ``` Implement the `process_string` function that performs all the tasks described above.","solution":"import re def process_string(s): Processes the input string to evaluate expressions within {{ and }}. Args: s (str): Input string containing mathematical expressions enclosed in {{ }}. Returns: str: String with evaluated expressions. pattern = r\'{{(.*?)}}\' matches = re.findall(pattern, s) for match in matches: # Evaluate the expression try: result = eval(match) except Exception as e: result = f\'Error: {e}\' # Replace the expression in the original string s = s.replace(f\'{{{{{match}}}}}\', str(result)) return s"},{"question":"Write a function that takes a list of strings, each representing a mathematical expression, and returns a list of the results. Each string can represent an operation that includes addition, subtraction, multiplication, or division. You must evaluate these expressions safely, meaning you should handle division by zero and invalid expressions gracefully. If a division by zero occurs or the expression is invalid, the corresponding result should be `None`. For instance, given the list `[\\"3 + 2\\", \\"10 / 0\\", \\"5 * 6\\", \\"a + b\\"]`, the function should return `[5, None, 30, None]`.","solution":"def evaluate_expressions(expressions): Takes a list of strings representing mathematical expressions and returns a list of results. Handles division by zero and invalid expressions by returning None for those cases. results = [] for expr in expressions: try: result = eval(expr, {\\"__builtins__\\": None}, {}) results.append(result) except ZeroDivisionError: results.append(None) except Exception: results.append(None) return results"},{"question":"You are given two lists `sol2` and `cond2`. Write a function that creates a new list containing elements from `sol2` where the corresponding value in `cond2` is `True`. For example, if `True` occurs at `cond2[1], cond2[3]`, then the new list should contain `sol2[1], sol2[3]`. Implement the function and provide the expected output. `sol2 = [\'a\', \'b\', \'c\', \'d\', \'e\']` `cond2 = [False, True, False, True, False]` The expected output is `[\'b\', \'d\']`","solution":"def filter_list(sol2, cond2): Returns a new list containing elements from sol2 where the corresponding value in cond2 is True. :param sol2: List of elements to be filtered. :param cond2: List of boolean values indicating which elements to keep. :return: A list containing elements from sol2 where the corresponding value in cond2 is True. return [sol2[i] for i in range(len(sol2)) if cond2[i]]"},{"question":"Design a function that takes an array of integers and returns the maximum product of any three distinct elements in the array. If the array has fewer than three elements, return -1. **Example Input:** ```python arr = [1, 10, 3, 7, 6] ``` **Example Output:** ```python 420 ``` **Explanation:** The maximum product is obtained by multiplying the three largest elements: 10 * 7 * 6 = 420. **Constraints:** - The array will contain at least 1 element and at most 100 elements. - The elements in the array will be integers in the range of -10^3 to 10^3.","solution":"def max_product_of_three(arr): Returns the maximum product of any three distinct elements in the array. If the array has fewer than three elements, returns -1. if len(arr) < 3: return -1 arr_sorted = sorted(arr, reverse=True) # Product of the three largest elements max1 = arr_sorted[0] * arr_sorted[1] * arr_sorted[2] # In case of two large negative numbers and one large positive number max2 = arr_sorted[0] * arr_sorted[-1] * arr_sorted[-2] return max(max1, max2)"},{"question":"Write a function `convert_to_roman` that converts an integer to its Roman numeral equivalent. The function should handle integers ranging from 1 to 3999. Be sure to account for the subtractive combinations used in Roman numerals, such as IV for 4, IX for 9, etc. Provide a concise and efficient solution. Additionally, your function should include validation to handle input outside the valid range. ```python def convert_to_roman(num): # Code to convert integer to Roman numeral pass # Example usage: # convert_to_roman(9) -> \\"IX\\" # convert_to_roman(58) -> \\"LVIII\\" # convert_to_roman(1994) -> \\"MCMXCIV\\" ```","solution":"def convert_to_roman(num): if not (1 <= num <= 3999): raise ValueError(\\"Number out of range, must be between 1 and 3999\\") roman_numerals = [ (\'M\', 1000), (\'CM\', 900), (\'D\', 500), (\'CD\', 400), (\'C\', 100), (\'XC\', 90), (\'L\', 50), (\'XL\', 40), (\'X\', 10), (\'IX\', 9), (\'V\', 5), (\'IV\', 4), (\'I\', 1), ] result = [] for roman, value in roman_numerals: while num >= value: result.append(roman) num -= value return \'\'.join(result)"},{"question":"Design a Python function that takes a DataFrame as input, where each column represents a different category of student scores. The function should calculate the average score for each category and return a new DataFrame containing only these averages. Additionally, it should plot a bar chart using matplotlib with the category names on the x-axis and the average scores on the y-axis. Use necessary libraries such as pandas and matplotlib.pyplot. Provide the Python code to achieve this.","solution":"import pandas as pd import matplotlib.pyplot as plt def calculate_and_plot_averages(df): Takes a DataFrame as input where each column represents a different category of student scores. Calculates the average score for each category and returns a new DataFrame containing these averages. Also plots a bar chart with category names on the x-axis and average scores on the y-axis. Args: df (pd.DataFrame): DataFrame containing student scores in different categories. Returns: pd.DataFrame: DataFrame containing the average scores for each category. # Calculate average scores for each category averages = df.mean() # Convert it to a DataFrame avg_df = averages.reset_index() avg_df.columns = [\'Category\', \'Average Score\'] # Plotting plt.figure(figsize=(10, 6)) plt.bar(avg_df[\'Category\'], avg_df[\'Average Score\'], color=\'skyblue\') plt.xlabel(\'Category\') plt.ylabel(\'Average Score\') plt.title(\'Average Scores by Category\') plt.xticks(rotation=45) plt.tight_layout() plt.show() return avg_df"},{"question":"Write a function that accepts a string containing a mathematical expression in standard infix notation and converts it to postfix notation (also known as Reverse Polish Notation or RPN). The function should support the four basic arithmetic operations (+, -, *, /) and parentheses for grouping. Assume the input is a valid mathematical expression. Example: ```python Input: \\"3 + 4 * 2 / ( 1 - 5 )\\" Output: \\"3 4 2 * 1 5 - / +\\" Input: \\"( 1 + 2 ) * ( 3 / 4 )\\" Output: \\"1 2 + 3 4 / *\\" ``` Note: You may assume the input string is properly formatted with each token (numbers, operators, parentheses) separated by a single space.","solution":"def infix_to_postfix(expression): Convert an infix expression to postfix notation (Reverse Polish Notation). Parameters: expression (str): A string containing a mathematical expression in infix notation. Returns: str: The expression in postfix notation. precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] tokens = expression.split() for token in tokens: if token.isnumeric(): output.append(token) elif token in precedence: while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[token]): output.append(operators.pop()) operators.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # Remove the \'(\' from the stack while operators: output.append(operators.pop()) return \' \'.join(output)"},{"question":"Write a function in Python that takes two sorted arrays of integers and merges them into a single sorted array without using any built-in sort functions. arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8]","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array without using any built-in sort functions. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Add the remaining elements of arr1 (if any) while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Add the remaining elements of arr2 (if any) while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a Python function that accepts two integers, `start` and `end`. The function should return a list of prime numbers within the range [start, end). If `start` is greater than or equal to `end`, return an empty list. Also, ensure that your function can handle invalid input gracefully and return an appropriate message when necessary. In addition, here\'s a non-functional piece of code intended to achieve the same goal. Review the code and use it as a reference to write the correct function. ``` def find_primes(start, end): primes = [] for n in range(start, end): is_prime = True for i in range(2, n): if n % i == 0: is_prime = False break if is_prime: primes.append(n) return primes ``` Critique and identify what\'s wrong with the above code snippet. Be sure to handle edge cases such as negative numbers and non-integer inputs in your solution.","solution":"def find_primes(start, end): Returns a list of prime numbers within the range [start, end). If start >= end, returns an empty list. Handles invalid input gracefully. if not (isinstance(start, int) and isinstance(end, int)): return \\"Invalid input: start and end must be integers.\\" if start >= end: return [] if start < 2: start = 2 primes = [] for n in range(start, end): is_prime = True for i in range(2, int(n**0.5) + 1): if n % i == 0: is_prime = False break if is_prime: primes.append(n) return primes # Critique of the provided code: # 1. The code doesn\'t handle `start` greater than or equal to `end`. # 2. It doesn\'t handle negative inputs and non-integer inputs. # 3. The check for prime numbers is inefficient; it checks divisibility up to n-1 instead of √n."},{"question":"Develop a function in Python that simulates a basic word prediction feature. The function should take in a list of words (representing a corpus) and a prefix string. Your task is to find and return a list of words from the corpus that start with the given prefix. The function should be case-insensitive and return the matching words in alphabetical order. If no words match the prefix, the function should return an empty list. Example: ```python def predict_words(corpus, prefix): # Your code goes here # Sample Input corpus = [\\"apple\\", \\"application\\", \\"angle\\", \\"banana\\", \\"Appetizer\\", \\"apply\\"] prefix = \\"app\\" # Sample Output [\\"apple\\", \\"application\\", \\"apply\\"] ```","solution":"def predict_words(corpus, prefix): Returns a list of words from the corpus that start with the given prefix, case-insensitive, in alphabetical order. prefix_lower = prefix.lower() # Find words that start with the given prefix matching_words = [word for word in corpus if word.lower().startswith(prefix_lower)] # Sort the matching words in alphabetical order matching_words_sorted = sorted(matching_words, key=lambda x: x.lower()) return matching_words_sorted"},{"question":"Design a function that takes a list of strings where each string represents a mathematical expression (such as \\"4 + 3 * 2\\") and evaluates these expressions. The function should return a list of results corresponding to each expression. Assume the expressions include only non-negative integers, addition (+), subtraction (-), and multiplication (*) operations. Ensure that the evaluation respects the correct order of operations (i.e., multiplication before addition and subtraction).","solution":"def evaluate_expressions(expressions): Evaluate a list of mathematical expressions and return the list of results. :param expressions: List of strings, where each string is a mathematical expression. :return: List of integers, which are the results of evaluating the expressions. def evaluate(expression): # Evaluates a single expression # Splitting and organizing expression into tokens import re tokens = re.findall(r\'d+|+|-|*\', expression) # First pass: handle multiplication i = 0 while i < len(tokens): if tokens[i] == \'*\': left = int(tokens[i-1]) right = int(tokens[i+1]) result = left * right tokens = tokens[:i-1] + [str(result)] + tokens[i+2:] i -= 1 # step back to consider the current result as a left operand in further operations i += 1 # Second pass: handle addition and subtraction result = int(tokens[0]) i = 1 while i < len(tokens): operator = tokens[i] right = int(tokens[i+1]) if operator == \'+\': result += right elif operator == \'-\': result -= right i += 2 # skip to the next operator return result return [evaluate(expr) for expr in expressions]"},{"question":"You are given an undirected graph consisting of `n` nodes and `m` edges. Your task is to determine whether the graph contains a cycle. If a cycle exists, output \\"Cycle detected\\"; otherwise, output \\"No cycle\\". You need to implement a function `detect_cycle(n, edges)`, where: - `n` is an integer representing the number of nodes in the graph. - `edges` is a list of tuples, where each tuple `(u, v)` represents an undirected edge between nodes `u` and `v`. The function should return a string indicating the presence of a cycle. **Example:** ```python def detect_cycle(n, edges): # Your code here # Test case print(detect_cycle(5, [(0, 1), (1, 2), (2, 3), (3, 1), (3, 4)])) # Output: \\"Cycle detected\\" print(detect_cycle(4, [(0, 1), (1, 2), (2, 3)])) # Output: \\"No cycle\\" ``` **Explanation:** In the first example, there is a cycle formed by the nodes 1 -> 2 -> 3 -> 1. Hence, the output is \\"Cycle detected\\". In the second example, there is no cycle in the graph, so the output is \\"No cycle\\".","solution":"def detect_cycle(n, edges): from collections import defaultdict def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * n for i in range(n): if not visited[i]: if dfs(i, -1): return \\"Cycle detected\\" return \\"No cycle\\""},{"question":"Given the frequency of fraudulent activities in credit card transactions, developing a reliable detection system is crucial. Implement a Python script using Scikit-learn to build a binary classification model based on the random forest algorithm to detect fraudulent transactions. The dataset you use should be preprocessed to handle any missing values, normalize numerical features, and convert categorical variables into dummy/indicator variables. Additionally, ensure your model evaluation involves cross-validation to assess performance robustness. The target is to minimize false negatives, as missing fraudulent transactions have serious implications.","solution":"import pandas as pd from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split, cross_val_score from sklearn.preprocessing import StandardScaler from sklearn.metrics import confusion_matrix from sklearn.impute import SimpleImputer def preprocess_data(df): # Handling missing values imputer = SimpleImputer(strategy=\'mean\') df_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns) # Normalize numerical features scaler = StandardScaler() df_scaled = pd.DataFrame(scaler.fit_transform(df_imputed), columns=df_imputed.columns) # Creating dummy variables for categorical features df_preprocessed = pd.get_dummies(df_scaled) return df_preprocessed def train_random_forest(df, target): # Preprocess the data df_preprocessed = preprocess_data(df.drop(columns=[target])) y = df[target] # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(df_preprocessed, y, test_size=0.2, random_state=42) # Train the Random Forest model rf_model = RandomForestClassifier(random_state=42) rf_model.fit(X_train, y_train) # Evaluate model with cross-validation scores = cross_val_score(rf_model, X_train, y_train, cv=5, scoring=\'recall\') # Minimize false negatives (maximize recall) model_performance = scores.mean() return rf_model, model_performance def evaluate_model(rf_model, df, target): # Preprocess the data df_preprocessed = preprocess_data(df.drop(columns=[target])) y = df[target] # Make predictions y_pred = rf_model.predict(df_preprocessed) # Compute confusion matrix cm = confusion_matrix(y, y_pred) return cm"},{"question":"Write a program that counts the number of unique characters in a given string, ignoring case and non-alphabetic characters, and excluding spaces. For example, given the string \\"Hello, World!\\", the output should be 7 (H, e, l, o, W, r, d).","solution":"def count_unique_characters(s): This function counts the number of unique alphabetic characters in a given string, ignoring case, non-alphabetic characters, and spaces. Args: s (str): Input string Returns: int: Number of unique alphabetic characters # Normalize the string to lower case and filter only alphabetic characters cleaned_string = [char.lower() for char in s if char.isalpha()] # Use a set to count unique characters unique_chars = set(cleaned_string) return len(unique_chars)"},{"question":"Write a function in Python that accepts a list of integers and an integer `n`, and returns a list of integers from the input list that are divisible by `n`, in descending order. Do not use any built-in sorting functions.","solution":"def divisible_by_n_descending(lst, n): Returns a list of integers from the input list that are divisible by `n`, in descending order. # Filter the integers that are divisible by `n` filtered_list = [x for x in lst if x % n == 0] # Sort the filtered list in descending order using bubble sort for i in range(len(filtered_list)): for j in range(0, len(filtered_list) - i - 1): if filtered_list[j] < filtered_list[j + 1]: filtered_list[j], filtered_list[j + 1] = filtered_list[j + 1], filtered_list[j] return filtered_list"},{"question":"Write a function in Python that takes a string and returns a new string where each character in the original string is followed by a count of its consecutive occurrence. For example, given the input string \\"aaabbcaaa\\", the function should return \\"a3b2c1a3\\". Ensure your function handles both lowercase and uppercase letters and includes appropriate error handling for invalid inputs.","solution":"def encode_consecutive_characters(s): Returns a new string where each character in the original string is followed by a count of its consecutive occurrence. :param s: input string :type s: str :return: encoded string :rtype: str :raises TypeError: if input is not a string if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") if not s: return \\"\\" result = [] count = 1 previous_char = s[0] for char in s[1:]: if char == previous_char: count += 1 else: result.append(f\\"{previous_char}{count}\\") previous_char = char count = 1 result.append(f\\"{previous_char}{count}\\") return \'\'.join(result)"},{"question":"Implement a function that receives an array of integers and returns an array of two elements: the first being the integer that occurs the most frequently in the input array, and the second being the frequency of its occurrence. If multiple integers occur with the same highest frequency, return the smallest integer among them. Example: mostFrequentElement([1, 3, 1, 3, 2, 1]) returns [1, 3] mostFrequentElement([4, 5, 6, 5, 4, 3]) returns [4, 2] mostFrequentElement([5, 5, 5, 2, 2]) returns [5, 3]","solution":"def mostFrequentElement(arr): Returns the integer that occurs most frequently in the input array and its frequency of occurrence. If multiple integers occur with the same highest frequency, returns the smallest integer among them. from collections import Counter if not arr: return [None, 0] count = Counter(arr) max_freq = max(count.values()) most_freq_elements = [key for key, value in count.items() if value == max_freq] smallest_element = min(most_freq_elements) return [smallest_element, max_freq]"},{"question":"--- Context [Software Engineer: Original Requirements The company wants to develop an e-commerce web application that allows users to browse and purchase products. Users should be able to register or log in with their email, create and edit their profile, add and manage items in their cart, and proceed to checkout to complete a purchase. Product Goals ```python [ \\"Create a user-friendly e-commerce platform\\", \\"Enable user registration and login with email\\", \\"Allow users to browse products and view details\\", \\"Enable users to add products to a cart and manage the cart\\", \\"Provide a seamless checkout experience\\" ] ``` User Stories ```python [ \\"As a user, I want to register on the platform using my email\\", \\"As a user, I want to log in using my registered email\\", \\"As a user, I want to create and edit my profile\\", \\"As a user, I want to browse products and view their details\\", \\"As a user, I want to add products to my cart and manage my cart\\", \\"As a user, I want to proceed to checkout and complete my purchase\\", \\"As a user, I want to view my order history and current orders\\" ] ``` Competitive Analysis ```python [ \\"Amazon: Extensive product catalog and seamless checkout process. Highly scalable but complex to replicate.\\", \\"eBay: Offers both new and used products with auction feature. Checkout process can be cumbersome.\\", \\"Etsy: Focuses on handmade and vintage items. Easy checkout but limited product categories.\\", \\"Walmart: Comprehensive product range and user-friendly. Good checkout experience but less focus on small vendors.\\", \\"Shopify: Easy to set up stores for small businesses. Offers customizable checkout but needs integration.\\" ] ``` Competitive Quadrant Chart ```mermaid quadrantChart title User-friendliness and feature richness of e-commerce platforms x-axis Low User-friendliness --> High User-friendliness y-axis Low Feature Richness --> High Feature Richness quadrant-1 Excellent quadrant-2 Needs improvement quadrant-3 Evaluate quadrant-4 Risky \\"Amazon\\": [0.9, 0.8] \\"eBay\\": [0.6, 0.7] \\"Etsy\\": [0.7, 0.5] \\"Walmart\\": [0.8, 0.6] \\"Shopify\\": [0.7, 0.7] \\"Our Target Product\\": [0.6, 0.7] ``` Requirement Analysis The product should be an e-commerce platform allowing users to register and log in with their email, create and edit profiles, browse products, add products to a cart, manage the cart, and proceed to checkout. Requirement Pool ```python [ (\\"User registration and login with email\\", \\"P0\\"), (\\"Profile creation and editing\\", \\"P0\\"), (\\"Product browsing and viewing details\\", \\"P0\\"), (\\"Add products to cart and cart management\\", \\"P0\\"), (\\"Checkout process\\", \\"P0\\"), (\\"Order history viewing\\", \\"P1\\"), (\\"Search functionality for products\\", \\"P2\\") ] ``` UI Design draft The platform should feature a clean, intuitive design. The home page should showcase the product catalogue with search and filter options. A registration/login section should be prominently displayed. Logged-in users should see their profile and cart status at the top of the page. Each product page should display detailed information and an option to add the product to the cart. The cart page should allow users to review their selections and proceed to checkout. Anything UNCLEAR There are no unclear points.] Format example --- Implementation approach We will ... Python package name ```python \\"ecommerce_platform\\" ``` File list ```python [ \\"main.py\\", \\"user.py\\", \\"product.py\\", \\"cart.py\\", \\"checkout.py\\", \\"order_history.py\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class User{ +str email +str password +str full_name +str address +~register(email: str, password: str) : None +~login(email: str, password: str) : bool +~edit_profile(full_name: str, address: str) : None } class Product{ +int id +str name +str description +float price +~view_product_details() : str } class Cart{ +int user_id +List{Product} items +~add_to_cart(product: Product) : None +~remove_from_cart(product_id: int) : None +~view_cart() : List[Product] } class Checkout{ +int user_id +Cart cart +str payment_method +~proceed_to_checkout() : bool } class OrderHistory{ +int user_id +List{Order} orders +~view_order_history() : List[Order] } User \\"1\\" -- \\"1\\" Cart: has Cart \\"1\\" -- \\"1\\" Checkout: proceeds User \\"1\\" -- \\"1\\" OrderHistory: owns Order \\"1\\" -- \\"1\\" Product: contains ``` Program call flow ```mermaid sequenceDiagram participant U as User participant S as System U->>S: register(email, password) S->>U: confirmation message U->>S: login(email, password) S->>U: authentication token U->>S: edit_profile(full_name, address) U->>S: browse_product() S->>U: list of products U->>S: view_product_details(product_id) S->>U: product details U->>S: add_to_cart(product_id) U->>S: view_cart() S->>U: cart contents U->>S: proceed_to_checkout(payment_method) S->>U: order confirmation U->>S: view_order_history() S->>U: list of past orders ``` Anything UNCLEAR The requirement is clear to me. ---","solution":"class User: def __init__(self, email, password): self.email = email self.password = password self.full_name = \\"\\" self.address = \\"\\" def register(self, email, password): self.email = email self.password = password def login(self, email, password): return self.email == email and self.password == password def edit_profile(self, full_name, address): self.full_name = full_name self.address = address class Product: def __init__(self, id, name, description, price): self.id = id self.name = name self.description = description self.price = price def view_product_details(self): return f\\"ID: {self.id}, Name: {self.name}, Description: {self.description}, Price: {self.price}\\" class Cart: def __init__(self, user_id): self.user_id = user_id self.items = [] def add_to_cart(self, product): self.items.append(product) def remove_from_cart(self, product_id): self.items = [item for item in self.items if item.id != product_id] def view_cart(self): return self.items class Checkout: def __init__(self, user_id, cart, payment_method): self.user_id = user_id self.cart = cart self.payment_method = payment_method def proceed_to_checkout(self): # Mimic successful checkout process return True class OrderHistory: def __init__(self, user_id): self.user_id = user_id self.orders = [] def view_order_history(self): return self.orders"},{"question":"Write a Python script that reads a large text file and counts the frequency of each word. The script should then output the 10 most frequent words along with their frequencies. Ensure the script can handle large files efficiently and consider common word delimiters such as spaces, punctuation marks, and new lines.","solution":"import re from collections import Counter def read_and_count_words(file_path): Reads a large text file and counts the frequency of each word. :param file_path: str: the path to the text file :return: list of tuples: the 10 most frequent words and their counts word_count = Counter() with open(file_path, \'r\', encoding=\'utf-8\') as file: # Read the file incrementally to handle large files for line in file: words = re.findall(r\'bw+b\', line.lower()) word_count.update(words) return word_count.most_common(10)"},{"question":"Create a function that takes an input dictionary containing employee data and returns the average salary of employees only from the specified departments. The input dictionary has employee names as keys and another dictionary as the value containing \\"salary\\" and \\"department\\" as keys. Make sure to handle scenarios where the specified department does not exist or there are no employees in that department. Example: employee_data = { \\"Alice\\": {\\"salary\\": 70000, \\"department\\": \\"IT\\"}, \\"Bob\\": {\\"salary\\": 60000, \\"department\\": \\"HR\\"}, \\"Charlie\\": {\\"salary\\": 80000, \\"department\\": \\"IT\\"}, \\"David\\": {\\"salary\\": 45000, \\"department\\": \\"Finance\\"} } departments = [\\"IT\\", \\"HR\\"] Output: 70000","solution":"def average_salary_by_department(employee_data, departments): Returns the average salary of employees from the specified departments. :param employee_data: A dictionary containing employee data with names as keys and another dictionary with \\"salary\\" and \\"department\\". :param departments: A list of departments to consider for the average salary. :return: The average salary of employees from the specified departments. total_salary = 0 count = 0 for employee, data in employee_data.items(): if data[\\"department\\"] in departments: total_salary += data[\\"salary\\"] count += 1 if count == 0: return 0 return total_salary / count"},{"question":"Given a linked list, write a function to remove all nodes that have duplicate numbers, leaving only distinct numbers from the original list. The list is sorted in increasing order. For example, given the linked list 1->2->3->3->4->4->5, the updated list should be 1->2->5.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def deleteDuplicates(head): Removes all nodes that have duplicate numbers, leaving only distinct numbers from the original list. The list is sorted in increasing order. dummy = ListNode(0) dummy.next = head prev = dummy current = head while current: # Check if it\'s a duplicate number while current.next and current.val == current.next.val: current = current.next # If prev.next is not current, we met duplicates if prev.next == current: prev = prev.next else: prev.next = current.next current = current.next return dummy.next def list_to_linkedlist(lst): Converts a list to a linked list. dummy = ListNode(0) curr = dummy for val in lst: curr.next = ListNode(val) curr = curr.next return dummy.next def linkedlist_to_list(head): Converts a linked list to a list. lst = [] while head: lst.append(head.val) head = head.next return lst"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the elements that are perfect squares. Additionally, for each perfect square found, the function should compute the square root and return these values in a dictionary alongside the perfect squares. The function should maintain the order of the original list. Test your function with a list that includes both perfect squares and non-perfect squares.","solution":"import math def extract_perfect_squares(nums): Returns a dictionary with perfect squares from the list and their square roots. Args: nums (list): List of integers. Returns: dict: A dictionary with perfect squares as keys and their square roots as values. perfect_squares = {} for num in nums: if num >= 0 and math.isqrt(num) ** 2 == num: perfect_squares[num] = math.isqrt(num) return perfect_squares"},{"question":"Design and implement a system that reads a set of JSON data representing a collection of books, each with properties like `title`, `author`, `publication_year`, `genre`, and `isbn`. Your task is to write a function that allows the user to perform various operations on this dataset: 1. **Search Books**: Allow users to search for books by title, author, or genre. 2. **Filter Books**: Implement filters to find books published in a particular range of years. 3. **Sort Books**: Support sorting the books alphabetically by title or by publication year in ascending or descending order. 4. **Add Book**: Allow users to add a new book to the collection. 5. **Remove Book**: Allow users to remove a book by its ISBN. The function should handle potential errors gracefully, such as trying to remove a book that does not exist. Additionally, ensure the system can handle large sets of data efficiently. To display results, format the output clearly in a tabular format indicating the title, author, publication year, genre, and ISBN. Example functions to implement: - `search_books(data, **kwargs)`: Search based on title, author, or genre keywords. - `filter_books(data, start_year, end_year)`: Filter based on publication year range. - `sort_books(data, by, order)`: Sort by specified field either ascending or descending. - `add_book(data, book)`: Add a book entry. - `remove_book(data, isbn)`: Remove a book by ISBN. Ensure proper documentation of each function and provide example usage of how a user might interact with the system.","solution":"import json def search_books(data, **kwargs): Search books by title, author, or genre. Parameters: - data: List of book dictionaries. - kwargs: Search criteria (e.g., title=\'Some Title\', author=\'Some Author\', genre=\'Some Genre\'). Returns: List of books matching the search criteria. result = [] for book in data: match = True for key, value in kwargs.items(): if key in book and value.lower() not in book[key].lower(): match = False break if match: result.append(book) return result def filter_books(data, start_year, end_year): Filter books published in a particular range of years. Parameters: - data: List of book dictionaries. - start_year: Start of the publication year range. - end_year: End of the publication year range. Returns: List of books published within the specified year range. return [book for book in data if start_year <= int(book[\'publication_year\']) <= end_year] def sort_books(data, by=\'title\', order=\'asc\'): Sort books alphabetically by title or by publication year. Parameters: - data: List of book dictionaries. - by: Field to sort by (\'title\' or \'publication_year\') - order: Sort order (\'asc\' for ascending, \'desc\' for descending) Returns: Sorted list of books. reverse_order = (order == \'desc\') return sorted(data, key=lambda x: x[by], reverse=reverse_order) def add_book(data, book): Add a new book to the collection. Parameters: - data: List of book dictionaries. - book: Dictionary containing book details. Returns: None data.append(book) def remove_book(data, isbn): Remove a book by its ISBN. Parameters: - data: List of book dictionaries. - isbn: ISBN of the book to be removed. Returns: None for i, book in enumerate(data): if book[\'isbn\'] == isbn: data.pop(i) return raise ValueError(f\\"Book with ISBN {isbn} not found.\\") def display_books(data): Display the books in a formatted table. Parameters: - data: List of book dictionaries. Returns: None print(f\\"{\'Title\':<30} {\'Author\':<20} {\'Year\':<6} {\'Genre\':<15} {\'ISBN\':<13}\\") print(\\"=\\"*90) for book in data: print(f\\"{book[\'title\']:<30} {book[\'author\']:<20} {book[\'publication_year\']:<6} {book[\'genre\']:<15} {book[\'isbn\']:<13}\\") # Example dataset books_data = [ {\\"title\\": \\"Book One\\", \\"author\\": \\"Author A\\", \\"publication_year\\": \\"2001\\", \\"genre\\": \\"Fiction\\", \\"isbn\\": \\"1111111111111\\"}, {\\"title\\": \\"Book Two\\", \\"author\\": \\"Author B\\", \\"publication_year\\": \\"2005\\", \\"genre\\": \\"Non-Fiction\\", \\"isbn\\": \\"2222222222222\\"}, {\\"title\\": \\"Book Three\\", \\"author\\": \\"Author C\\", \\"publication_year\\": \\"2010\\", \\"genre\\": \\"Fiction\\", \\"isbn\\": \\"3333333333333\\"} ] # Example usage result = search_books(books_data, title=\\"Book One\\") display_books(result) filtered_books = filter_books(books_data, 2000, 2005) display_books(filtered_books) sorted_books = sort_books(books_data, by=\'publication_year\', order=\'desc\') display_books(sorted_books) new_book = {\\"title\\": \\"Book Four\\", \\"author\\": \\"Author D\\", \\"publication_year\\": \\"2020\\", \\"genre\\": \\"Science Fiction\\", \\"isbn\\": \\"4444444444444\\"} add_book(books_data, new_book) display_books(books_data) remove_book(books_data, \\"4444444444444\\") display_books(books_data)"},{"question":"Write a program that simulates a book reading tracker. The program should allow users to add books to their reading list, mark books as read, and display their current reading progress. The program should handle the following tasks: - Adding a new book: The user should be prompted to enter the book\'s title, author, and total number of pages. - Marking a book as read: The user should be able to mark a book as read by providing its title. - Displaying reading progress: The program should list all the books in the reading list, highlighting which books are read and which are not. Additionally, it should display the number of total books, the number of books read, and the percentage of books read. Optional: Allow users to update the read status of a book if they initially mark a book as unread by mistake. Implement the tracker as a console application, ensuring it is user-friendly and handles invalid inputs gracefully.","solution":"class BookReadingTracker: def __init__(self): self.reading_list = [] self.read_books = set() def add_book(self, title, author, total_pages): book = { \'title\': title, \'author\': author, \'total_pages\': total_pages } self.reading_list.append(book) def mark_as_read(self, title): for book in self.reading_list: if book[\'title\'].lower() == title.lower(): self.read_books.add(title.lower()) return f\\"Book \'{title}\' marked as read.\\" return f\\"Book \'{title}\' not found in the reading list.\\" def get_reading_progress(self): status = [] for book in self.reading_list: if book[\'title\'].lower() in self.read_books: status.append(f\\"{book[\'title\']} by {book[\'author\']} - Read\\") else: status.append(f\\"{book[\'title\']} by {book[\'author\']} - Not Read\\") total_books = len(self.reading_list) books_read = len(self.read_books) read_percentage = (books_read / total_books * 100) if total_books > 0 else 0 progress = { \'status\': status, \'total_books\': total_books, \'books_read\': books_read, \'percentage_read\': read_percentage } return progress"},{"question":"Create a class `Library` to manage a collection of books. Each book should have attributes for `title`, `author`, and `year`. The `Library` class should provide methods to: 1. Add a new book to the collection. 2. Remove a book by its title. 3. Search for books by a particular author. 4. List all books published before a given year. The class should handle edge cases such as trying to add a book that already exists, removing a book that isn\'t in the collection, and searching for authors or years that have no matches.","solution":"class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year class Library: def __init__(self): self.books = [] def add_book(self, title, author, year): if any(book.title == title for book in self.books): return \\"Book already exists\\" new_book = Book(title, author, year) self.books.append(new_book) def remove_book(self, title): for book in self.books: if book.title == title: self.books.remove(book) return \\"Book removed\\" return \\"Book not found\\" def search_books_by_author(self, author): return [book for book in self.books if book.author == author] def list_books_before_year(self, year): return [book for book in self.books if book.year < year] def list_all_books(self): return self.books"},{"question":"Write a Python function that takes a string as input and returns the longest substring without repeating characters. In case of a tie, return the substring that appears first in the input. Ensure the solution has an O(n) time complexity. Example: Input: \\"abcabcbb\\" Output: \\"abc\\" Input: \\"bbbbb\\" Output: \\"b\\" Input: \\"pwwkew\\" Output: \\"wke\\"","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. char_index = {} start = 0 longest = \\"\\" for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i if i - start + 1 > len(longest): longest = s[start:i + 1] return longest"},{"question":"Implement a function `find_missing_number(nums)` that accepts a list of integers containing n unique numbers taken from the range [0, n]. The list does not contain duplicates, and it is missing one number from the range. The function should return the missing number. # Example Input: `[3, 0, 1]` Output: `2` # Constraints - The length of the list `nums` is n. - Input `nums` has exactly one missing number from the range [0, n]. - The elements of `nums` are integers.","solution":"def find_missing_number(nums): This function finds the missing number in the list of integers. :param nums: List[int] :return: int n = len(nums) total_sum = n * (n + 1) / 2 actual_sum = sum(nums) return int(total_sum - actual_sum)"},{"question":"Design a function named \'most_common_words\' that accepts a string of text and an integer n. The function should return a list of the n most common words in the text. The words should be returned in descending order of frequency, and if multiple words have the same frequency, they should be returned in alphabetical order. Words are defined as consecutive sequences of alphabetic characters (ignoring punctuation and numbers). The comparison should be case-insensitive. For example: ``` most_common_words(\\"Hello world! Hello, how are you doing in this world?\\", 2) ``` should return: ``` [\\"hello\\", \\"world\\"] ```","solution":"import re from collections import Counter def most_common_words(text, n): Returns a list of the n most common words in the text. Words are sorted by frequency and then alphabetically if frequencies are the same. # Convert text to lowercase text = text.lower() # Use regex to find words words = re.findall(r\'b[a-z]+b\', text) # Count the frequency of words word_counts = Counter(words) # Get the n most common words sorted by frequency and alphabetically for tie cases most_common_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))[:n] # Extract and return just the words return [word for word, count in most_common_words]"},{"question":"Given a string s and an integer n, write a Python function to find the lexicographically smallest substring of length n. The function should return the smallest substring as per alphabetical order. If there are multiple substrings with the same smallest lexicographical order, return the first one occurring in the string s. For example, given the string \\"programming\\" and the integer n = 3, the lexicographically smallest substring of length 3 is \\"amm\\". Implement this in Python.","solution":"def smallest_lexicographical_substring(s, n): Returns the lexicographically smallest substring of length n from the given string s. if n > len(s): return \\"\\" smallest_substring = s[:n] for i in range(1, len(s) - n + 1): current_substring = s[i:i+n] if current_substring < smallest_substring: smallest_substring = current_substring return smallest_substring"},{"question":"Create a function that receives an array of integers and returns a new array containing only the prime numbers from the original array. Each element in the returned array should be a prime number, and the order should follow their original occurrence. # Input - An array of integers, e.g., `[10, 23, 4, 17, 18, 19, 21]`. # Output - A new array containing only the prime numbers, e.g., `[23, 17, 19]`. # Example - For the input array `[2, 3, 4, 5, 6, 7, 8, 9, 10]`, the output should be `[2, 3, 5, 7]`. # Constraints - The input array can contain numbers ranging from -10^6 to 10^6. - Negative numbers and zero are not considered prime. - Ensure that the function handles both small and large arrays efficiently.","solution":"def is_prime(num): Returns True if the number is prime, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(arr): Returns a list of prime numbers from the given array. return [num for num in arr if is_prime(num)]"},{"question":"Given an array of integers, implement a function that moves all zeros in the array to the end while preserving the order of the non-zero elements. The function should modify the input array in-place. Example: ``` Input: [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0] Input: [0, 0, 1] Output: [1, 0, 0] ```","solution":"def move_zeros_to_end(arr): Moves all zeros in the array to the end while preserving the order of the non-zero elements. Modifies the input array in-place. if not arr or len(arr) == 1: return insert_pos = 0 for num in arr: if num != 0: arr[insert_pos] = num insert_pos += 1 while insert_pos < len(arr): arr[insert_pos] = 0 insert_pos += 1"},{"question":"You are given a list of integers. Your task is to create a new list where each element at position `i` is the cumulative sum from the start of the list up to the position `i` in the original list. Write a function `cumulative_sum` that takes a list as input and returns the new list with cumulative sums. For example, if the input list is `[1, 2, 3, 4, 5]`, the output should be `[1, 3, 6, 10, 15]`. You must also handle the edge case where the input list is empty, in which case the output should be an empty list. **Function Signature:** ```python def cumulative_sum(numbers: List[int]) -> List[int]: ```","solution":"from typing import List def cumulative_sum(numbers: List[int]) -> List[int]: Returns a new list where each element at position `i` is the cumulative sum from the start of the list up to the position `i` in the original list. if not numbers: return [] cumulative = [] total = 0 for num in numbers: total += num cumulative.append(total) return cumulative"},{"question":"Create a function `find_missing_numbers(arr)` that takes a list of integers `arr` where the elements are in the range from 1 to n (inclusive) with some elements possibly missing, and returns a list of the missing numbers in sorted order. For example, given `arr = [3, 7, 1, 2, 8, 4, 5]` and `n = 10`, the function should return `[6, 9, 10]`. Assume that `n` will always be greater than or equal to the length of `arr` and that the list may not be in sorted order.","solution":"def find_missing_numbers(arr, n): Returns a list of numbers missing from the given array. Parameters: arr (list): List of integers. n (int): The maximum number to be considered in the range from 1 to n. Returns: list: Sorted list of missing numbers. complete_set = set(range(1, n + 1)) given_set = set(arr) missing_numbers = sorted(complete_set - given_set) return missing_numbers"},{"question":"Given a 2D array of integers representing a grid, write a function to count the number of \\"islands\\" in the grid. An island is a group of connected 1s (connected horizontally or vertically). The function should take the 2D array as input and return the number of islands. For example, in the grid: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1] ] ``` The function should return 3. **Function Signature:** ```python def count_islands(grid: List[List[int]]) -> int: pass ```","solution":"from typing import List def count_islands(grid: List[List[int]]) -> int: if not grid: return 0 num_rows = len(grid) num_cols = len(grid[0]) def dfs(x, y): if x < 0 or x >= num_rows or y < 0 or y >= num_cols or grid[x][y] == 0: return grid[x][y] = 0 # Mark the visited cell as 0 # Visit all 4 adjacent cells (up, down, left, right) dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) island_count = 0 for i in range(num_rows): for j in range(num_cols): if grid[i][j] == 1: island_count += 1 dfs(i, j) return island_count"},{"question":"Write a function that receives a list of integers and returns a new list containing only the elements that are greater than the average of the original list. The returned list should have its elements in the same order they appeared in the original list. If the original list is empty, return an empty list. Function Signature: ```python def filter_above_average(input_list: List[int]) -> List[int]: pass ``` Input: - `input_list`: A list of integers. Output: - A list of integers containing values from `input_list` that are greater than the average of `input_list`. Example: ```python input_list = [10, 20, 30, 40, 50] filter_above_average(input_list) ``` Output: ```python [40, 50] ``` Explanation: The average of `[10, 20, 30, 40, 50]` is 30. The function returns `[40, 50]` as they are the elements greater than the average.","solution":"from typing import List def filter_above_average(input_list: List[int]) -> List[int]: if not input_list: return [] average = sum(input_list) / len(input_list) return [num for num in input_list if num > average]"},{"question":"Write a function that takes an integer array as input and returns a new array containing only the unique elements from the original array, in the order that they first appeared. Do not use any built-in functions that directly perform this task. Example: Input: [4, 5, 9, 4, 5, 6, 7, 9] Output: [4, 5, 9, 6, 7]","solution":"def unique_elements(arr): Returns a new array containing only the unique elements from the original array, in the order that they first appeared. Parameters: arr (list): The input list of integers. Returns: list: A list of unique integers. seen = set() unique_list = [] for num in arr: if num not in seen: unique_list.append(num) seen.add(num) return unique_list"},{"question":"Design a function that takes a list of integers and returns a new list with each element replaced by the frequency of that element in the original list.","solution":"def frequency_replace(lst): Replace each element in the list with the frequency of that element in the original list. Args: lst: List of integers Returns: List of integers where each element is replaced by its frequency in the original list. # Create a dictionary to store the frequency of each element frequency = {} for item in lst: if item in frequency: frequency[item] += 1 else: frequency[item] = 1 # Create a new list with elements replaced by their frequency result = [frequency[item] for item in lst] return result"},{"question":"Create a function that checks the balance of parentheses in a given string, accounting for nested and unbalanced cases: def check_balance(s): Example: check_balance(\'()()\') returns True check_balance(\'(())\') returns True check_balance(\'(()\') returns False check_balance(\'())(\') returns False check_balance(\')(\') returns False","solution":"def check_balance(s): Check if the parentheses in the string s are balanced. Args: s (str): The string to check. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function that takes a string as input and returns a new string where each element from the original string is repeated a number of times equal to its position in the original string (1-indexed). For example, the character at position 1 in the input string should be repeated 1 time, the character at position 2 should be repeated 2 times, and so forth. **Example:** Input: \\"abc\\" Output: \\"abbccc\\" Input: \\"xyz\\" Output: \\"xyyzzz\\" Your function should have the following signature: ```python def repeat_by_position(s: str) -> str: ```","solution":"def repeat_by_position(s: str) -> str: Returns a new string where each character from the original string is repeated a number of times equal to its position in the original string (1-indexed). result = [] for i, char in enumerate(s, start=1): result.append(char * i) return \'\'.join(result)"},{"question":"Write a program to find the longest substring without repeating characters in a given string. The function should return this longest substring’s length. Assume that the input string consists of ASCII characters only. **Examples:** - Input: \\"abcabcbb\\" - Output: 3 - Explanation: The answer is \\"abc\\", with the length of 3. - Input: \\"bbbbb\\" - Output: 1 - Explanation: The answer is \\"b\\", with the length of 1. - Input: \\"pwwkew\\" - Output: 3 - Explanation: The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. **Constraints:** - The function should run in O(n) time complexity where n is the length of the string. - Implement the solution in Python. ```python def length_of_longest_substring(s: str) -> int: n = len(s) char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length # Test cases print(length_of_longest_substring(\\"abcabcbb\\")) # Output: 3 print(length_of_longest_substring(\\"bbbbb\\")) # Output: 1 print(length_of_longest_substring(\\"pwwkew\\")) # Output: 3 ```","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. n = len(s) char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"A library keeps track of its book rentals and knows that, on average, 3 out of every 8 books rented are mystery novels. If the library records a total of 640 book rentals last month, how many of those rentals were likely mystery novels?","solution":"def mystery_novel_rentals(total_rentals): Given the total number of rentals, returns the number of mystery novels rented. On average, 3 out of every 8 books rented are mystery novels. Parameters: total_rentals (int): The total number of book rentals. Returns: int: The number of mystery novel rentals. return (3/8) * total_rentals"},{"question":"In graph theory and network design, assume you\'re given an undirected, weighted graph where each edge represents a road between two cities and the weight corresponds to the time taken to travel between those cities. Your task is to design an algorithm that finds the shortest path from a given source city to all other cities in the network. Specify the name of the algorithm you would use, provide a high-level explanation of how it operates, and describe its time complexity.","solution":"import heapq def dijkstra(graph, start): Finds the shortest paths from the start node to all other nodes in the graph using Dijkstra\'s algorithm. Parameters: graph (dict): A dictionary where the keys are nodes and values are lists of tuples (neighbor, weight). start: The starting node. Returns: dict: A dictionary where the keys are nodes and values are the shortest distance from the start node. pq = [] distances = {node: float(\'inf\') for node in graph} distances[start] = 0 heapq.heappush(pq, (0, start)) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances"},{"question":"You are given a list of integers. Write a function to sort the list in non-decreasing order but using a special sorting algorithm. The special sorting algorithm works as follows: 1. Identify all odd numbers in the list. 2. Sort the odd numbers in non-decreasing order. 3. Replace the odd numbers in the original list with their sorted counterparts. 4. The even numbers remain in their original positions. For example, for the input list [5, 3, 2, 8, 1, 4], the output should be [1, 3, 2, 8, 5, 4]. Write a function special_sort(lst) that takes a list of integers as input and returns a list sorted by the described special sorting algorithm. # Function signature ```python def special_sort(lst: list) -> list: pass ``` # Input - lst (List[int]): A list of integers. # Output - List[int]: The list sorted according to the special sorting rules. # Constraints - The length of the list will be in the range [1, 10^6]. - Each element in the list will be in the range [-10^9, 10^9].","solution":"def special_sort(lst): This function sorts the input list such that the odd numbers are sorted in non-decreasing order and placed in their original positions. The even numbers remain unchanged in their original positions. Args: lst (list of int): A list of integers. Returns: list of int: The list sorted in the specified manner. # Identify all odd numbers odd_numbers = [num for num in lst if num % 2 != 0] # Sort the odd numbers odd_numbers.sort() # Create an iterator for the sorted odd numbers odd_iter = iter(odd_numbers) # Replace odd numbers in the original list with sorted odd numbers result = [next(odd_iter) if num % 2 != 0 else num for num in lst] return result"},{"question":"Write a function that takes a list of integers as an input and returns a new list that contains only the odd numbers from the input list sorted in ascending order. If there are no odd numbers, return an empty list. Provide clear examples. ```python def filter_and_sort_odds(arr): Implement a function that filters out even numbers and sorts the remaining odd numbers in ascending order. For instance: filter_and_sort_odds([4, 1, 3, 7, 10, 2, 5]) => [1, 3, 5, 7] filter_and_sort_odds([6, 8, 10, 12]) => [] filter_and_sort_odds([11, 13, 5, 7, 2, 4, 6]) => [5, 7, 11, 13] filter_and_sort_odds([1]) => [1] filter_and_sort_odds([]) => [] # Your implementation here ```","solution":"def filter_and_sort_odds(arr): Returns a new list containing only the odd numbers from the input list, sorted in ascending order. :param arr: List of integers :return: List of sorted odd integers odd_numbers = [num for num in arr if num % 2 != 0] return sorted(odd_numbers)"},{"question":"Develop a function that utilizes dynamic programming to compute the maximum total value achievable in a knapsack problem. Given a list of items, where each item has a weight and a value, and a maximum capacity limit for the knapsack, the function should return the maximum value that can be obtained by selecting items without exceeding the capacity. The function signature should be `def knapsack(items: List[Tuple[int, int]], capacity: int) -> int`, where `items` is a list of tuples representing (weight, value), and `capacity` is an integer representing the knapsack\'s weight limit.","solution":"from typing import List, Tuple def knapsack(items: List[Tuple[int, int]], capacity: int) -> int: Returns the maximum value achievable in a knapsack with given capacity. :param items: List of tuples where each tuple represents (weight, value) of an item. :param capacity: Maximum weight capacity of the knapsack. :return: Maximum value achievable without exceeding the weight capacity. n = len(items) # Create a 2D DP array where dp[i][w] represents the maximum value # that can be achieved with the first i items and capacity w. dp = [[0] * (capacity + 1) for _ in range(n + 1)] for i in range(1, n + 1): weight, value = items[i - 1] for w in range(capacity + 1): if weight <= w: # Consider the maximum value by either including the current item or excluding it dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: # If we can\'t include the item because it exceeds current capacity w dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Write a Python function that takes a dictionary of student names and their corresponding scores, and returns a list of names of students who have scored above 75. Each name in the output list should be prefixed with a congratulatory message: \\"Congratulations, [name]!\\" Ensure the function handles cases where the input dictionary is empty, and returns an appropriate message if no students meet the criteria.","solution":"def congratulations_students(scores_dict): Takes a dictionary of student names and their corresponding scores, and returns a list of congratulatory messages for students who have scored above 75. Parameters: scores_dict (dict): A dictionary with student names as keys and their scores as values. Returns: list: A list of congratulatory messages for students who scored above 75. result = [] for student, score in scores_dict.items(): if score > 75: result.append(f\\"Congratulations, {student}!\\") if not result: result = [\\"No students scored above 75.\\"] return result"},{"question":"Create a function that receives a string containing a mathematical expression composed of non-negative integers and the operators `+`, `-`, `*`, and `/`. Your task is to parse this expression and compute the resulting value. You must respect the standard operator precedence, where `*` and `/` operations are performed before `+` and `-` operations. Assume that integer division should truncate towards zero. **Function Signature:** ```python def evaluate_expression(expression: str) -> int: pass ``` **Input:** - `expression` (a string): A non-empty string containing a valid mathematical expression. The expression can include spaces between numbers and operators which should be ignored during evaluation. Example: \\"3+5 / 2 \\". **Output:** - Returns an integer representing the result of evaluating the provided mathematical expression. **Example:** ```python assert evaluate_expression(\\"3+2*2\\") == 7 assert evaluate_expression(\\"3/2\\") == 1 assert evaluate_expression(\\"3+5 / 2 \\") == 5 ```","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression in a string. Assumes the expression contains non-negative integers and the operators +, -, *, and /. def apply_op(operators, operands): right = operands.pop() left = operands.pop() op = operators.pop() if op == \'+\': operands.append(left + right) elif op == \'-\': operands.append(left - right) elif op == \'*\': operands.append(left * right) elif op == \'/\': operands.append(int(left / right)) # The int cast is for truncation towards zero def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 operators = [] operands = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 operands.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_op(operators, operands) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_op(operators, operands) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_op(operators, operands) return operands[-1]"},{"question":"Write a Python function `validate_brackets(expression: str) -> bool` that takes a string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and determines if the input string is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. Examples: - `validate_brackets(\\"()\\")` should return `True`. - `validate_brackets(\\"()[]{}\\")` should return `True`. - `validate_brackets(\\"(]\\")` should return `False`. - `validate_brackets(\\"([)]\\")` should return `False`. - `validate_brackets(\\"{[]}\\")` should return `True`. You may assume that the input string will not contain any characters other than \'(\', \')\', \'{\', \'}\', \'[\' and \']\'.","solution":"def validate_brackets(expression: str) -> bool: Determines if the input string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. Args: expression (str): A string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the string is valid, False otherwise. stack = [] bracket_map = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in expression: if char in bracket_map: # it\'s one of the closing brackets top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: # it\'s one of the opening brackets stack.append(char) return not stack"},{"question":"Design a function that takes a string of words and a positive integer k as input, and returns the k most frequent words in the string sorted by their frequency. In case of a tie, sort the words alphabetically. Ignore any non-alphabetic characters in the string. Example: Input: \\"The sun shines over the lake. The sun sets\\", k = 2 Output: [\\"the\\", \\"sun\\"] 备注: - Words should be case-insensitive for frequency calculation. - Only alphabetic characters should be considered in words, punctuation should be ignored. Function signature: `def top_k_frequent_words(s: str, k: int) -> List[str]:`","solution":"from typing import List from collections import Counter import re def top_k_frequent_words(s: str, k: int) -> List[str]: Returns the k most frequent words in the string s sorted by their frequency. In case of a tie, sort the words alphabetically. Non-alphabetic characters are ignored. # Remove non-alphabetic characters and convert to lowercase words = re.findall(r\'b[a-z]+b\', s.lower()) # Calculate the frequency of each word word_count = Counter(words) # Sort words first alphabetically and then by their frequency sorted_words = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) # Return the top k frequent words return [word for word, freq in sorted_words[:k]]"},{"question":"You are given a list of integers and a target sum. Implement a function that returns whether any two distinct numbers from the list add up to the target sum. Additionally, optimize the function to return all unique pairs of numbers in the list that add up to the target sum without using nested loops. lst = [2, 4, 3, 5, 7, 8, 1] target_sum = 9","solution":"def two_sum_pairs(lst, target_sum): Returns the list of unique pairs of distinct numbers from lst that add up to target_sum. Each pair is represented as a sorted tuple (smaller, larger). seen = set() pairs = set() for number in lst: complement = target_sum - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return list(pairs)"},{"question":"Design and implement a Python program that reads a large CSV file containing sales data, and performs the following data processing tasks: 1. Filter and keep only the records where the sale amount is greater than 500. 2. Group the filtered data by product category and compute the total sales amount for each category. 3. Find the top 3 product categories based on the total sales amount. Provide a summary report that includes: - The total number of sales records processed. - The number of records with sale amounts greater than 500. - The total sales amount for each product category. - The top 3 product categories by total sales amount. You are given a sample sales CSV file in the following format: ``` SaleID,ProductCategory,SaleAmount 1,Electronics,150.00 2,Furniture,550.25 3,Electronics,660.50 4,Clothing,780.00 ... ``` Implement the solution in Python and ensure your script can handle very large files efficiently. If any assumptions are made, clearly state them. Also, include comments explaining the various steps of your code together with a sample output of your script when run on a small subset of the data. --- **Notes:** - Use Python\'s built-in libraries and functionalities to solve the problem. - Optimization for handling large data sets is crucial. - Ensure readability and maintainability of your code with proper comments and documentation.","solution":"import csv from collections import defaultdict from heapq import nlargest def process_sales_data(file_path): total_records = 0 records_gt_500 = 0 category_sales = defaultdict(float) with open(file_path, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: total_records += 1 sale_amount = float(row[\'SaleAmount\']) if sale_amount > 500: records_gt_500 += 1 category_sales[row[\'ProductCategory\']] += sale_amount top_3_categories = nlargest(3, category_sales.items(), key=lambda x: x[1]) return { \'total_records\': total_records, \'records_gt_500\': records_gt_500, \'category_sales\': dict(category_sales), \'top_3_categories\': top_3_categories }"},{"question":"Design a WordCountEngine Class Description: Implement a WordCountEngine class that processes a large text and is able to: 1. Count the occurrences of all words in the text. 2. Return the `k` most frequently occurring words along with their counts. 3. The words should be returned in the order of their frequency; words with the same frequency should be ordered lexicographically. Implement the `WordCountEngine` class: - `__init__(self, text: str)` - Initializes the class with the provided text. - `count_words(self)` - Counts the occurrences of all words in the text. - `get_top_k_words(self, k: int) -> List[Tuple[str, int]]` - Returns a list of tuples where each tuple contains a word and its count, limited to the top `k` most frequent words. Constraints: - The input text contains only alphabetic characters and spaces. - Words are case-insensitive. - The length of the text does not exceed 1,000,000 characters. - `k` is a positive integer less than or equal to the number of unique words in the text. Example: ```python # Example usage: text = \\"The sun shines over the lake. The sun also rises.\\" engine = WordCountEngine(text) engine.count_words() top_words = engine.get_top_k_words(3) print(top_words) # Output: [(\'the\', 2), (\'sun\', 2), (\'also\', 1), (\'lake\', 1), (\'over\', 1), (\'rises\', 1), (\'shines\', 1)] ``` Explanation: - The word \'the\' appears 2 times. - The word \'sun\' appears 2 times. - The word \'also\' appears 1 time. - The word \'lake\' appears 1 time. - The word \'over\' appears 1 time. - The word \'rises\' appears 1 time. - The word \'shines\' appears 1 time.","solution":"from typing import List, Tuple from collections import Counter import re class WordCountEngine: def __init__(self, text: str): self.text = text.lower() self.word_count = Counter() def count_words(self): words = re.findall(r\'bw+b\', self.text) self.word_count = Counter(words) def get_top_k_words(self, k: int) -> List[Tuple[str, int]]: return sorted(self.word_count.items(), key=lambda x: (-x[1], x[0]))[:k]"},{"question":"Given a string representing a series of steps taken (where \'U\' means a step up and \'D\' means a step down), write a function that calculates the number of valleys traversed. A valley is defined as a sequence of steps below sea level, starting with a step down from sea level and ending with a step up to sea level. Ensure that your function works efficiently for long strings.","solution":"def count_valleys(steps): Calculates the number of valleys traversed in the given steps. :param steps: A string of \'U\' (up) and \'D\' (down) steps. :return: The number of valleys traversed. sea_level = 0 current_level = 0 valleys = 0 in_valley = False for step in steps: if step == \'U\': current_level += 1 elif step == \'D\': current_level -= 1 if current_level < sea_level and not in_valley: in_valley = True elif current_level == sea_level and in_valley: valleys += 1 in_valley = False return valleys"},{"question":"Given an integer matrix, write a function `spiral_order(matrix)` that returns the elements of the matrix in spiral order. Your implementation should work for any valid rectangular matrix (m x n dimensions). Make sure that the time complexity remains O(m * n) where m is the number of rows and n is the number of columns. **Function Signature:** ```python def spiral_order(matrix: List[List[int]]) -> List[int]: ``` **Input:** - A list of lists of integers representing the matrix (0 < m, n <= 100). **Output:** - A list of integers with the elements of the matrix in spiral order. **Example:** ``` Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] Input: matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] ```","solution":"from typing import List def spiral_order(matrix: List[List[int]]) -> List[int]: if not matrix: return [] result = [] rows, cols = len(matrix), len(matrix[0]) top, bottom, left, right = 0, rows - 1, 0, cols - 1 while top <= bottom and left <= right: # Traverse from left to right for the top row for col in range(left, right + 1): result.append(matrix[top][col]) top += 1 # Traverse from top to bottom for the right column for row in range(top, bottom + 1): result.append(matrix[row][right]) right -= 1 if top <= bottom: # Traverse from right to left for the bottom row for col in range(right, left - 1, -1): result.append(matrix[bottom][col]) bottom -= 1 if left <= right: # Traverse from bottom to top for the left column for row in range(bottom, top - 1, -1): result.append(matrix[row][left]) left += 1 return result"},{"question":"Create a Python function called `nested_list_depth` that takes a nested list of arbitrary depth and returns the maximum depth of the list. For example, the list `[1, [2, [3, [4, [5]]]]]` has a depth of 5. The function should be able to handle empty lists and return 0 for an empty list. Consider the edge cases where the input might be a single integer or an empty list of lists like `[[], [[]]]` which should return a depth of 2. Example: ```python def nested_list_depth(nested_list): # Your code here # Test cases: print(nested_list_depth([1, [2, [3, [4, [5]]]]])) # Output: 5 print(nested_list_depth([])) # Output: 0 print(nested_list_depth([[], [[]]])) # Output: 2 print(nested_list_depth([1])) # Output: 1 print(nested_list_depth(1)) # Output: 1 ```","solution":"def nested_list_depth(nested_list): Returns the maximum depth of the nested list. if isinstance(nested_list, list): if not nested_list: return 1 return 1 + max(nested_list_depth(item) for item in nested_list) else: return 0"},{"question":"Write a program that takes an integer array and a target value, and then returns all unique quadruplets `[a, b, c, d]` in the array such that each element of the quadruplet is distinct and the sum of `a`, `b`, `c`, and `d` is equal to the target value. Assume that the input array does not contain duplicate quadruplets and that the array length is at least 4. Given Array = [1, 0, -1, 0, -2, 2] Target Value = 0 Expected Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]","solution":"def four_sum(nums, target): Returns all unique quadruplets in the array which sum up to the target value. nums.sort() quadruplets = [] n = len(nums) for i in range(n-3): if i > 0 and nums[i] == nums[i-1]: continue for j in range(i+1, n-2): if j > i+1 and nums[j] == nums[j-1]: continue left, right = j+1, n-1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) left += 1 right -= 1 while left < right and nums[left] == nums[left-1]: left += 1 while left < right and nums[right] == nums[right+1]: right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Design a Python application that employs the pandas and scikit-learn libraries to perform data preprocessing and build a machine learning model for predicting house prices. The application should read the dataset from a CSV file, handle missing values, encode categorical features, split the dataset into training and testing sets, and finally train a Linear Regression model. The predicted results should be saved back into a new CSV file.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import OneHotEncoder from sklearn.impute import SimpleImputer from sklearn.linear_model import LinearRegression from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline def preprocess_and_train_model(input_csv, output_csv): # Load data from CSV file data = pd.read_csv(input_csv) # Separate features and target variable X = data.drop(\\"Price\\", axis=1) y = data[\\"Price\\"] # Identify numerical and categorical columns numerical_cols = X.select_dtypes(include=[\\"int64\\", \\"float64\\"]).columns categorical_cols = X.select_dtypes(include=[\\"object\\"]).columns # Define preprocessing for numerical data: impute missing values with mean numerical_transformer = SimpleImputer(strategy=\\"mean\\") # Define preprocessing for categorical data: impute missing values and apply one-hot encoding categorical_transformer = Pipeline(steps=[ (\\"imputer\\", SimpleImputer(strategy=\\"most_frequent\\")), (\\"onehot\\", OneHotEncoder(handle_unknown=\\"ignore\\")) ]) # Bundle preprocessing for numerical and categorical data preprocessor = ColumnTransformer( transformers=[ (\\"num\\", numerical_transformer, numerical_cols), (\\"cat\\", categorical_transformer, categorical_cols) ]) # Create and train the model model = Pipeline(steps=[(\\"preprocessor\\", preprocessor), (\\"model\\", LinearRegression())]) # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Fit the model model.fit(X_train, y_train) # Predict on test set predictions = model.predict(X_test) # Save predictions to a new CSV file output = pd.DataFrame({\\"PredictedPrice\\": predictions}) output.to_csv(output_csv, index=False)"},{"question":"Write a function that takes a list of integers representing temperatures in Celsius and returns a new list with the temperatures converted to Fahrenheit. The conversion formula is: ( F = C times frac{9}{5} + 32 ). The input list should remain unmodified. Example: ```python def celsius_to_fahrenheit(celsius_list): # Your code here # Sample input celsius_list = [0, -40, 100, 37] # Sample output # [32.0, -40.0, 212.0, 98.6] ```","solution":"def celsius_to_fahrenheit(celsius_list): Converts a list of temperatures in Celsius to Fahrenheit. :param celsius_list: List of temperatures in Celsius :return: List of temperatures in Fahrenheit return [(c * 9/5) + 32 for c in celsius_list]"},{"question":"Create a Python function that takes in a list of strings and returns a dictionary showing the frequency of each unique word across all the strings. Each string in the list contains a sentence with words separated by spaces, and punctuation marks (.,!?) should be ignored. Additionally, the function should be case-insensitive and treat words with differing cases as the same word. For example, given the input: ```python [ \\"Hello world!\\", \\"Hello again, World.\\", \\"HELLO... world?\\" ] ``` The output should be: ```python { \\"hello\\": 3, \\"world\\": 3, \\"again\\": 1 } ``` Provide detailed explanations in comments for the steps and logic used in your function to ensure clarity.","solution":"import re from collections import defaultdict def word_frequency(sentence_list): Takes a list of sentences (strings) and returns the frequency of each unique word. Words are case-insensitive and punctuation is ignored. frequency_dict = defaultdict(int) # Define a regular expression to remove punctuations punctuations = re.compile(r\'[.,!?]\') for sentence in sentence_list: # Convert sentence to lowercase and remove punctuations cleaned_sentence = punctuations.sub(\'\', sentence.lower()) # Split the sentence into words and update their frequencies words = cleaned_sentence.split() for word in words: frequency_dict[word] += 1 return dict(frequency_dict)"},{"question":"Create a recommendation system for an online bookstore. You are provided with a dataset containing users\' purchase histories, including user IDs, book IDs, and ratings given by the users. Your task is to analyze the dataset to build a collaborative filtering model to predict the ratings of books that have not yet been rated by users. Your system should also be able to recommend a list of top 5 books to a user based on their past purchases and the preferences of similar users. Ensure the model handles new users and books (cold start problem) effectively.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error from sklearn.neighbors import NearestNeighbors class BookRecommender: def __init__(self, ratings_df): self.ratings_df = ratings_df self.user_item_matrix = self._create_user_item_matrix(ratings_df) self.model = self._fit_model() def _create_user_item_matrix(self, df): return df.pivot_table(index=\'user_id\', columns=\'book_id\', values=\'rating\') def _fit_model(self): matrix = self.user_item_matrix.fillna(0).values model = NearestNeighbors(metric=\'cosine\', algorithm=\'brute\') model.fit(matrix) return model def predict_user_rating(self, user_id, book_id): if user_id not in self.user_item_matrix.index or book_id not in self.user_item_matrix.columns: return None user_index = list(self.user_item_matrix.index).index(user_id) distances, indices = self.model.kneighbors(self.user_item_matrix.fillna(0).iloc[user_index, :].values.reshape(1, -1), n_neighbors=5) user_neighbors = indices.flatten() neighbor_ratings = self.user_item_matrix.iloc[user_neighbors, self.user_item_matrix.columns.get_loc(book_id)] if neighbor_ratings.dropna().empty: return None predicted_rating = np.dot(distances.flatten(), neighbor_ratings.fillna(0)) return predicted_rating / distances.sum() def recommend_top_books(self, user_id, n=5): if user_id not in self.user_item_matrix.index: return [] user_ratings = self.user_item_matrix.loc[user_id] books_not_rated = user_ratings[user_ratings.isna()].index.tolist() predictions = [(book, self.predict_user_rating(user_id, book)) for book in books_not_rated] predictions = filter(lambda x: x[1] is not None, predictions) recommendations = sorted(predictions, key=lambda x: x[1], reverse=True)[:n] return [book for book, rating in recommendations]"},{"question":"Given a list of student dictionaries, where each student dictionary contains the student\'s name and their scores in various subjects, write a function to compute the average score for each student and return a dictionary that maps each student\'s name to their average score. Make sure your implementation handles cases where a student might have missing scores for some subjects. Example input: ```python students = [ {\'name\': \'Alice\', \'math\': 85, \'science\': 92}, {\'name\': \'Bob\', \'math\': 78}, {\'name\': \'Charlie\', \'science\': 70, \'math\': 80, \'english\': 90} ] ``` Expected output: ```python {\'Alice\': 88.5, \'Bob\': 78.0, \'Charlie\': 80.0} ``` Function signature: ```python def compute_average_scores(students): pass ``` Ensure that your solution handles the following scenarios: 1. A student dictionary may be missing scores for some subjects. 2. The function should not crash if the input list is empty. 3. Only include students who have at least one score in the returned dictionary. 4. The average score should be a floating-point number rounded to one decimal place.","solution":"def compute_average_scores(students): Computes the average score for each student and returns a dictionary mapping each student\'s name to their average score. Args: students (list of dict): A list of dictionaries where each dictionary contains the student\'s name and their scores in various subjects. Returns: dict: A dictionary mapping each student\'s name to their average score rounded to one decimal place. averages = {} for student in students: name = student.get(\'name\') scores = [score for key, score in student.items() if key != \'name\' and isinstance(score, (int, float))] if scores: average_score = round(sum(scores) / len(scores), 1) averages[name] = average_score return averages"},{"question":"Write a function called `has_unique_characters` which takes a string as input and returns `True` if the string contains only unique characters and `False` otherwise. For instance, the string \\"apple\\" should return `False` because it contains duplicate \'p\' characters, while \\"orange\\" should return `True`. Your solution must not use any additional data structures such as lists or dictionaries.","solution":"def has_unique_characters(s: str) -> bool: Check if the string contains only unique characters. :param s: The input string. :return: True if all characters in s are unique, False otherwise. if len(s) > 256: # There are only 256 different characters in ASCII return False # Check each character against all other characters. for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Write a function in Python that takes in a string of words separated by spaces and returns a list of all unique permutations of the string. Each permutation should be represented as a single string where the words are separated by a single space. In addition, ensure the function handles edge cases such as empty strings or strings with only one word. Finally, write test cases to validate your function’s output. # Requirements: - Use recursive or iterative methods to generate permutations. - Ensure no duplicate permutations are in the final list. - Handle edge cases appropriately. - Write test cases to cover various scenarios including empty strings and single-word strings. # Example: ```python # Input: input_string = \\"cat dog fish\\" # Possible Output: [\\"cat dog fish\\", \\"cat fish dog\\", \\"dog cat fish\\", \\"dog fish cat\\", \\"fish cat dog\\", \\"fish dog cat\\"] # Edge cases: input_string = \\"\\" # Output: [\\"\\"] input_string = \\"cat\\" # Output: [\\"cat\\"] ``` # Function Signature: ```python def unique_permutations(input_string: str) -> List[str]: pass # Test cases assert unique_permutations(\\"cat dog fish\\") == [\\"cat dog fish\\", \\"cat fish dog\\", \\"dog cat fish\\", \\"dog fish cat\\", \\"fish cat dog\\", \\"fish dog cat\\"] assert unique_permutations(\\"\\") == [\\"\\"] assert unique_permutations(\\"cat\\") == [\\"cat\\"] ```","solution":"from itertools import permutations def unique_permutations(input_string: str) -> list: Returns a list of all unique permutations of the words in the input string. Each permutation is represented as a single string with words separated by a space. if not input_string: return [\\"\\"] words = input_string.split() perm_set = set([\\" \\".join(p) for p in permutations(words)]) return list(perm_set)"},{"question":"Given two arrays of integers, return a new array consisting of elements that are common to both arrays, sorted in ascending order. The resulting array should not have any duplicate values. array1 = [4, 9, 5, 4, 8] array2 = [9, 4, 9, 8, 4] Output: [4, 8, 9]","solution":"def common_elements(array1, array2): Returns a sorted list of unique common elements from two arrays. # Convert both arrays to sets to remove duplicates and find common elements set1, set2 = set(array1), set(array2) common_set = set1 & set2 # Intersection of two sets # Convert the set to a sorted list return sorted(common_set)"},{"question":"Write a function `find_second_largest(numbers)` that accepts a list of integers `numbers` and returns the second largest number in the list. If the list does not have at least 2 distinct elements, the function should raise a `ValueError` with the message \\"List must contain at least two distinct elements\\". Your function must handle: - An empty list. - A list with all elements the same. - A standard list with distinct elements. Provide a complete solution in Python including the function definition and necessary imports. Example: ```python >>> find_second_largest([4, 2, 5, 1, 3]) 4 >>> find_second_largest([10]) ValueError: List must contain at least two distinct elements >>> find_second_largest([]) ValueError: List must contain at least two distinct elements >>> find_second_largest([6, 6, 6]) ValueError: List must contain at least two distinct elements ```","solution":"def find_second_largest(numbers): Returns the second largest number in the list of numbers. Raises a ValueError if the list has fewer than two distinct elements. if len(numbers) < 2: raise ValueError(\\"List must contain at least two distinct elements\\") # Eliminate duplicate elements distinct_numbers = list(set(numbers)) if len(distinct_numbers) < 2: raise ValueError(\\"List must contain at least two distinct elements\\") # Sort the distinct elements in descending order distinct_numbers.sort(reverse=True) # Return the second largest element return distinct_numbers[1]"},{"question":"You are given the task of finding the median of two sorted arrays. Note that the arrays may have different lengths. Design a function that, given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, returns the median of the two combined datasets. Your solution should run in O(log(min(m, n))) time complexity. Example 1: Input: nums1 = [1, 3], nums2 = [2] Output: 2.0 Explanation: Merging arrays gives [1, 2, 3]. The median is 2. Example 2: Input: nums1 = [1, 2], nums2 = [3, 4] Output: 2.5 Explanation: Merging arrays gives [1, 2, 3, 4]. The median is (2 + 3) / 2 = 2.5. Example 3: Input: nums1 = [0, 0], nums2 = [0, 0] Output: 0.0 Example 4: Input: nums1 = [], nums2 = [1] Output: 1.0 Constraints: * `nums1.length == m` * `nums2.length == n` * `0 <= m <= 1000` * `0 <= n <= 1000` * `1 <= m + n <= 2000` * `-10^6 <= nums1[i], nums2[i] <= 10^6`","solution":"def findMedianSortedArrays(nums1, nums2): Finds the median of two sorted arrays. if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 m, n = len(nums1), len(nums2) imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and nums1[i] < nums2[j - 1]: imin = i + 1 elif i > 0 and nums1[i - 1] > nums2[j]: imax = i - 1 else: if i == 0: left_max = nums2[j - 1] elif j == 0: left_max = nums1[i - 1] else: left_max = max(nums1[i - 1], nums2[j - 1]) if (m + n) % 2 == 1: return left_max if i == m: right_min = nums2[j] elif j == n: right_min = nums1[i] else: right_min = min(nums1[i], nums2[j]) return (left_max + right_min) / 2.0"},{"question":"Create a function that meets the following criteria: **Problem: Word Ladder Transitions** The challenge is to create a function that, given two words (beginWord and endWord) and a set of words (wordList), determines the shortest transformation sequence from beginWord to endWord such that only one letter can be changed at a time and each transformed word must exist in the wordList. Note that beginWord is not a part of the wordList. The function should return the length of the shortest transformation sequence, or 0 if no such transformation is possible. Each intermediate word must be in the wordList, which represents a dictionary of words available for transformation. The transformation sequence begins with the beginWord and ends with the endWord. Parameters: - `beginWord`: a string representing the initial word. - `endWord`: a string representing the target word. - `wordList`: a set containing strings representing the dictionary of intermediate words. Example: ```python findLaderLength(\\"hit\\", \\"cog\\", {\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"}) -> 5 findLaderLength(\\"hit\\", \\"cog\\", {\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"}) -> 0 ``` Function Signature: ```python def findLadderLength(beginWord: str, endWord: str, wordList: set) -> int: Given a begin word, an end word, and a set of intermediate dictionary words, returns the length of the shortest transformation sequence from begin word to end word, or 0 if no such sequence exists. Parameters: beginWord (str): Starting word of the transformation. endWord (str): Target word of the transformation. wordList (set): Set of valid intermediate words. Returns: int: Length of the shortest transformation sequence or 0 if no such sequence exists. ```","solution":"from collections import deque def findLadderLength(beginWord: str, endWord: str, wordList: set) -> int: Given a begin word, an end word, and a set of intermediate dictionary words, returns the length of the shortest transformation sequence from begin word to end word, or 0 if no such sequence exists. if endWord not in wordList: return 0 wordList.add(endWord) queue = deque([(beginWord, 1)]) word_length = len(beginWord) while queue: current_word, steps = queue.popleft() for i in range(word_length): for c in \'abcdefghijklmnopqrstuvwxyz\': if c == current_word[i]: continue next_word = current_word[:i] + c + current_word[i+1:] if next_word in wordList: if next_word == endWord: return steps + 1 queue.append((next_word, steps + 1)) wordList.remove(next_word) return 0"},{"question":"Implement a function in Python that takes a list of integers and returns a new list with the squares of those integers sorted in ascending order. The function should handle lists containing up to 10^6 elements efficiently. Additionally, consider that the input list may contain both negative and positive integers. Explain your approach and analyze the time and space complexity of your solution.","solution":"def sorted_squares(nums): Returns a sorted list of the squares of the integers in the input list. # Square each element in the list squared_nums = [x ** 2 for x in nums] # Sort the squared elements squared_nums.sort() return squared_nums # Approach: # 1. Square each element in the input list. # 2. Sort the resultant list of squares. # This approach ensures that we handle both positive and negative numbers, since squaring a negative number results in a positive number. # Time Complexity: O(N log N) due to the sorting step, where N is the number of elements in the input list. # Space Complexity: O(N) to store the squared values."},{"question":"Given an array of integers, your task is to find and return the maximum sum of any contiguous subarray within the input array. A subarray is defined as a contiguous portion of the array. Note that the array can contain both positive and negative integers, and it may also include zero. Implement a function `maxSubArraySum(arr)` that takes in an array of integers `arr` and returns the maximum sum of any contiguous subarray. For example: - Input: `[-2,1,-3,4,-1,2,1,-5,4]` - Output: `6` Explanation: The subarray with the maximum sum is `[4,-1,2,1]`, which adds up to `6`. - Input: `[1]` - Output: `1` Explanation: The only subarray is the array itself, which has a sum of `1`. - Input: `[-1,-2,-3,-4]` - Output: `-1` Explanation: The maximum sum of subarray is `-1`, which is the largest number in the array. Your solution should be efficient enough to handle large inputs within a reasonable time limit.","solution":"def maxSubArraySum(arr): Finds the maximum sum of any contiguous subarray within the input array. Parameters: arr (list of int): The input array of integers. Returns: int: The maximum sum of any contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Reverse Words in a String Keeping Spaces Intact Description: Given a string `s` which consists of words and spaces, reverse the words in the string but keep the spaces in their original positions. A word is defined as a sequence of non-space characters. The input string does not contain leading or trailing spaces, but it may have multiple spaces between words. Each word in the input string is reversed, while the spaces within `s` are retained in their original indices. Write a function `reverseWords` that reverses the words in the given string `s`. The input string `s` consists of printable ASCII characters and will have a length of `1` to `10^4`. Example 1: ``` Input: s = \\"hello world\\" Output: \\"olleh dlrow\\" Explanation: The words \\"hello\\" and \\"world\\" are reversed, and their positions remain the same. ``` Example 2: ``` Input: s = \\"a good example\\" Output: \\"a doog elpmaxe\\" Explanation: The words \\"a\\", \\"good\\", and \\"example\\" are reversed, and their positions remain the same. ``` Example 3: ``` Input: s = \\"keep the elements aligned\\" Output: \\"peek eht stnemele dengila\\" Explanation: Each word in \\"keep the elements aligned\\" is reversed, while all the spaces between and within the words remain intact. ```","solution":"def reverseWords(s): Reverses the words in the string while keeping the spaces intact. :param s: A string containing words and spaces :return: A string with words reversed and spaces in their original positions words = [] current_word = [] for char in s: if char != \' \': current_word.append(char) else: if current_word: words.append(current_word[::-1]) current_word = [] words.append(\' \') if current_word: words.append(current_word[::-1]) result = [] word_index = 0 for char in s: if char == \' \': result.append(\' \') else: while word_index < len(words) and words[word_index] == \' \': word_index += 1 result.append(words[word_index].pop(0)) if not words[word_index]: word_index += 1 return \'\'.join(result)"},{"question":"Build a program that accepts a string input, reverses the string, and checks if the reversed string is a palindrome. The program should be case-insensitive and ignore any non-alphanumeric characters in the comparison. Handle any possible edge cases gracefully.","solution":"import re def is_palindrome(s): Returns True if the given string is a palindrome, ignoring case and non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase filtered_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Reverse the filtered string reversed_string = filtered_string[::-1] # Check if the filtered string is equal to its reverse return filtered_string == reversed_string"}]'),F={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:R,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},O={class:"search-container"},S={class:"card-container"},P={key:0,class:"empty-state"},N=["disabled"],L={key:0},z={key:1};function j(r,e,l,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",O,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",S,[(n(!0),i(b,null,v(a.displayedPoems,(o,f)=>(n(),w(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",L,"See more"))],8,N)):u("",!0)])}const D=h(F,[["render",j],["__scopeId","data-v-548b5e35"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/2.md","filePath":"drive/2.md"}'),Y={name:"drive/2.md"},M=Object.assign(Y,{setup(r){return(e,l)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,M as default};
