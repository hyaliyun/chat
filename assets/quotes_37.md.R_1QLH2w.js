import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,m,a,r){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(q,[["render",E],["__scopeId","data-v-e46f520e"]]),S=JSON.parse('[{"question":"You are given n computers in a network. The network has become very complex with multiple direct connections between pairs of computers. Some connections might introduce a security vulnerability and hence need to be identified. For security reasons, we need to find all the \\"critical connections\\" in the network. A connection is critical if its removal causes the network to become disconnected. The network is represented as an undirected graph with nodes labeled from 0 to n-1, and an array `connections` where `connections[i] = [u, v]` represents a connection between nodes `u` and `v`. Write a function `criticalConnections` to find all critical connections in the network. You should return the list of critical connections in any order. # Function Signature ```python def criticalConnections(n: int, connections: List[List[int]]) -> List[List[int]]: ``` # Input - `n`: an integer representing the number of computers in the network (1 ≤ n ≤ 10^5). - `connections`: a list of lists where each inner list contains two integers `u` and `v` (0 ≤ u, v < n). # Output - A list of lists where each inner list represents a critical connection `[u, v]`. # Example ```python n = 4 connections = [[0,1],[1,2],[2,0],[1,3]] print(criticalConnections(n, connections)) # Output: [[1,3]] ``` Explanation: In the given example, there are 4 computers with connections between them as specified. The removal of connection [1,3] will cause the network to be disconnected (either node 1 or node 3 gets isolated), hence it is a critical connection. # Note - There might be multiple critical connections in the network. - You may return the critical connections in any order. - Each connection `[u, v]` appears at most once in the list `connections`. Your solution should use an efficient graph algorithm to ensure it runs within reasonable time limits for large inputs, such as 10^5 nodes and connections.","solution":"from typing import List, Dict def criticalConnections(n: int, connections: List[List[int]]) -> List[List[int]]: graph = {i: [] for i in range(n)} for u, v in connections: graph[u].append(v) graph[v].append(u) discovery = [-1] * n lowest = [-1] * n result = [] time = [0] def dfs(node: int, parent: int) -> None: discovery[node] = lowest[node] = time[0] time[0] += 1 for neighbor in graph[node]: if neighbor == parent: continue if discovery[neighbor] == -1: dfs(neighbor, node) lowest[node] = min(lowest[node], lowest[neighbor]) if lowest[neighbor] > discovery[node]: result.append([node, neighbor]) else: lowest[node] = min(lowest[node], discovery[neighbor]) for i in range(n): if discovery[i] == -1: dfs(i, -1) return result"},{"question":"You are given an array of n integers. We define a contiguous subarray of the array to be good if the number of distinct integers in the subarray is exactly k. Your task is to find the number of good subarrays. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2 * 10^5) — the size of the array and the exact number of distinct integers that must be in the subarray. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Print one integer — the number of good subarrays. **Example:** Input: ``` 5 2 1 2 1 2 3 ``` Output: ``` 7 ``` Explanation: The good subarrays are [1, 2], [2, 1], [1, 2], [2, 1, 2], [1, 2, 3], [2, 1, 2, 3], [1, 2, 3]. Total count is 7. In the first sample, there are 7 good subarrays in total.","solution":"from collections import defaultdict def count_good_subarrays(n, k, arr): Counts the number of good subarrays with exactly k distinct integers. def at_most_k_distinct(arr, k): count = defaultdict(int) i = 0 result = 0 for j in range(len(arr)): if count[arr[j]] == 0: k -= 1 count[arr[j]] += 1 while k < 0: count[arr[i]] -= 1 if count[arr[i]] == 0: k += 1 i += 1 result += j - i + 1 return result # Number of subarrays with at most k distinct integers at_most_k = at_most_k_distinct(arr, k) # Number of subarrays with at most k-1 distinct integers at_most_k_minus_1 = at_most_k_distinct(arr, k - 1) return at_most_k - at_most_k_minus_1"},{"question":"You have a round table with n seats numbered from 1 to n in clockwise order. There are n guests, each guest has a preferred seat. If a guest can\'t sit in their preferred seat, they will take the next available seat in the clockwise direction. Write a program to determine the seating order of the guests such that each guest either sits in their preferred seat or the next available one in a clockwise direction. The first line contains a single positive integer n (1 ≤ n ≤ 1000) — the number of seats and guests. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ n) — the preferred seat for each of the n guests. Print n space-separated integers representing the seating order of the guests, i.e., the seat number each guest will occupy in the order of their guest number. Note: - If multiple guests prefer the same seat, the first guest in input order will take that seat, and the subsequent guests will move to the next available seat found in clockwise order. Examples: Input 3 3 1 2 Output 2 3 1 Input 5 2 2 2 2 2 Output 2 3 4 5 1","solution":"def seating_order(n, preferences): Determine the seating order for n guests with their preferred seats. :param n: Number of seats and guests :param preferences: List of integers representing the preferred seat for each guest :return: List of integers representing the seating order for each guest occupied = [False] * n # Track occupied seats result = [0] * n # To store the seat each guest occupies for index, pref in enumerate(preferences): seat = pref - 1 # Convert to 0-based index while occupied[seat]: seat = (seat + 1) % n occupied[seat] = True # Mark the seat as occupied result[index] = seat + 1 # Convert back to 1-based index return result"},{"question":"In the magical world of Algoria, mages have a unique way of storing their magical energy. Each mage has a set amount of energy, represented as an integer e (1 ≤ e ≤ 10^9). Mages can split their energy into any number of parts and redistribute it among themselves. However, each part must be an exact power of 2 (i.e., 2^0, 2^1, 2^2, etc.). For instance, a mage with an energy of 9 can split it into 8 + 1. You\'ve been given an integer e representing the energy of a single mage. Your task is to determine the smallest number of parts the mage can split their energy into, such that each part is an exact power of 2. The input consists of a single line containing the integer e. Output the smallest number of parts into which the energy can be split. For example, if the mage has an energy of 13, the optimal split would be 8 + 4 + 1, which sums up to 3 parts. For an energy of 1, the split is just 1, which is 1 part. In the first example, the optimal way to split is into the parts 8, 4, and 1, totaling 3 parts. In the second example, the energy is already in its simplest part which is 1, totaling 1 part.","solution":"def count_parts_of_two(e): Returns the smallest number of parts into which the energy can be split, such that each part is an exact power of 2. count = 0 while e > 0: count += e & 1 e >>= 1 return count"},{"question":"Alice found a peculiar type of graph while practicing for her computer science exam. The graph is a directed acyclic graph (DAG), and each node has a characteristic value associated with it. She needs to find the maximum sum of characteristic values along any path in the DAG from a given starting node to any other node. You are given a DAG with `n` nodes and `m` directed edges. Each node has a characteristic value. Your task is to determine the maximum sum of characteristic values along any path starting from node `s`. The first line of the input contains three integers `n`, `m`, and `s` (1 ≤ n ≤ 100000, 1 ≤ m ≤ 200000, 1 ≤ s ≤ n), where `n` is the number of nodes, `m` is the number of edges, and `s` is the starting node. The second line contains `n` space-separated integers `val[i]` (1 ≤ val[i] ≤ 1000) representing the characteristic values of the nodes. The next `m` lines each describe an edge with two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), indicating a directed edge from node `u` to node `v`. Output a single integer — the maximum sum of characteristic values along any path starting from node `s`. Example: Input: ``` 5 6 1 2 3 1 5 4 1 2 1 3 2 3 2 4 3 5 4 5 ``` Output: ``` 14 ``` Explanation: The maximum sum path from node 1 is `1 -> 2 -> 4 -> 5` with a sum of `2 + 3 + 5 + 4 = 14`.","solution":"from collections import defaultdict, deque def max_sum_in_dag(n, m, s, values, edges): Find the maximum sum of characteristic values along any path in a DAG from a given starting node. Parameters: n (int): Number of nodes. m (int): Number of edges. s (int): Starting node. values (list): List of characteristic values of the nodes. edges (list): List of directed edges in the graph. Returns: int: Maximum sum of characteristic values along any path starting from node s. # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Perform a topological sort using Kahn\'s algorithm in_degree = {i: 0 for i in range(1, n+1)} for u, v in edges: in_degree[v] += 1 queue = deque() for node in range(1, n+1): if in_degree[node] == 0: queue.append(node) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Initialize dp array where dp[i] is the max sum path ending at node i dp = [-float(\'inf\')] * (n + 1) dp[s] = values[s - 1] # Traverse nodes in topological order and fill the dp array for node in topo_order: if dp[node] != -float(\'inf\'): for neighbor in graph[node]: dp[neighbor] = max(dp[neighbor], dp[node] + values[neighbor - 1]) # Return the maximum value in dp array return max(dp)"},{"question":"Jamie loves solving math problems, especially when they involve arrays and sequences. Today, he decided to create a sequence of length n using integers from 1 to n, but with a twist. The sequence must satisfy certain constraints on the products of specific subarrays. Specifically, Jamie wants the product of elements of any subarray of length m to be divisible by k. This means for every subarray of length m in the sequence, the product of its elements must be a multiple of k. Help Jamie construct such a sequence if it exists, or determine that it\'s impossible. The first line of input contains a single integer t (1 leq t leq 100) — the number of test cases. Each test case is described by three integers n, m, and k (1 leq n, m, k leq 1000) on a single line. For each test case, either print the sequence if it exists, or print \\"Impossible\\" if no such sequence can be constructed. In the first sample test, a sequence of length 5 with subarrays of length 2 having their products divisible by 2 can be [2, 2, 2, 2, 2]. In the second sample test, it\'s impossible to form a sequence of length 3 where subarrays of length 4 have their products divisible by 10. Example: Input ``` 3 5 2 2 3 4 10 7 3 6 ``` Output ``` 2 2 2 2 2 Impossible 6 6 6 6 6 6 6 ```","solution":"def construct_sequence(t, test_cases): results = [] def is_constructible(n, m, k): # If m > n, it\'s impossible to have a subarray of length m if m > n: return False, [] # Generate a sequence where every number is k sequence = [k] * n # If at least one element is k, any subarray product will be divisible by k if k == 1: return True, [1] * n return True, sequence for case in test_cases: n, m, k = case possible, sequence = is_constructible(n, m, k) if possible: results.append(\\" \\".join(map(str, sequence))) else: results.append(\\"Impossible\\") return results"},{"question":"The forest administration of a National Park keeps track of trees in a rectangular grid. Each cell in the grid is either empty or contains exactly one tree. The health of the forest is monitored using a certain metric, which considers the density of trees in various subgrids of the forest. Given a rectangular grid of size n x m (1 ≤ n, m ≤ 500), where each cell contains either \'0\' (empty) or \'1\' (tree), you need to process q queries. Each query is defined by four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) representing the top-left and bottom-right coordinates of a subgrid. For each query, you need to output the number of trees within the specified subgrid. The first line of the input contains two integers n and m. Each of the next n lines contains m characters (\'0\' or \'1\') representing the grid. The next line contains an integer q (1 ≤ q ≤ 1000), the number of queries. Each of the following q lines contains four integers x1, y1, x2, and y2. For each query, print a single integer representing the number of trees in the specified subgrid. Example: Input: 3 3 101 010 111 2 1 1 2 2 2 2 3 3 Output: 2 3","solution":"def count_trees(grid, queries): n = len(grid) m = len(grid[0]) # Create a prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + int(grid[i - 1][j - 1])) result = [] for x1, y1, x2, y2 in queries: total_trees = (prefix_sum[x2][y2] - prefix_sum[x1 - 1][y2] - prefix_sum[x2][y1 - 1] + prefix_sum[x1 - 1][y1 - 1]) result.append(total_trees) return result def process_input_output(input_str): data = input_str.strip().split(\'n\') n, m = map(int, data[0].split()) grid = data[1:n+1] q = int(data[n+1]) queries = [list(map(int, data[i].split())) for i in range(n+2, n+2+q)] results = count_trees(grid, queries) return \\"n\\".join(map(str, results))"},{"question":"Olivia is planning a party and she wants to prepare a gift bag for each attendee. Each gift bag should contain exactly one toy. She has a toy collection with weights ranging from 1 to n. She also has an array representing the maximum weight allowed for each gift bag. However, Olivia wants the difference in weight between every two adjacent toys in a gift bag to be at most k (where k is given). Given the maximum weight allowed for each gift bag, determine if Olivia can assign the toys to all gift bags according to the rule. If possible, print the weights of the toys assigned to each gift bag. If it is not possible to assign the toys, print \\"NO\\". The first line contains two integers n and k (1 ≤ n, k ≤ 100) — the number of toys (weights from 1 to n) and the maximum allowed weight difference between adjacent toys. The second line contains an integer m (1 ≤ m ≤ 100) — the number of gift bags. The third line contains m integers w1, w2, ..., wm (1 ≤ wi ≤ n) — the maximum weights allowed for each gift bag, separated by spaces. If it is possible to assign toys according to the rule, print \\"YES\\" on the first line. On the second line, print m integers, the i-th of these integers should be the weight of the toy assigned to the i-th gift bag. If it is not possible to assign toys, print \\"NO\\".","solution":"def assign_toys(n, k, m, max_weights): Determines if toys can be assigned to the gift bags according to the rules. Parameters: n (int): number of toys (weights from 1 to n) k (int): maximum allowed weight difference between adjacent toys m (int): number of gift bags max_weights (list of int): maximum weights allowed for each gift bag Returns: str: \\"YES\\" and the assigned weights if possible, otherwise \\"NO\\" assigned_weights = [] for max_w in max_weights: if max_w < 1 or max_w > n: return \\"NO\\" # Try to find a valid weight to assign found = False for w in range(max_w, max_w - k, -1): if 1 <= w <= n: assigned_weights.append(w) found = True break if not found: return \\"NO\\" return f\\"YESn{\' \'.join(map(str, assigned_weights))}\\""},{"question":"Polycarp is fascinated by beautiful strings. He considers a string beautiful if no two adjacent characters are the same. He has a string of length n and wants to make it beautiful by changing some characters in the string. He wants to determine the minimum number of characters he needs to change to make the string beautiful. Given a string consisting of lowercase English letters, you need to find the minimum number of changes required to make the string beautiful and output that minimum number. For example, if the input string is \\"aab\\", he can change it to \\"aba\\" by changing one character. Thus, the answer is 1. The first line of the input contains an integer n (1 leq n leq 1000) — the length of the string. The second line of the input contains a string of length n consisting of lowercase English letters. Output one integer — the minimum number of changes required to make the string beautiful. # Example Input: 5 aabaa Output: 2 Input: 6 abcdef Output: 0 # Explanation In the first example, changing the second \'a\' to \'b\' and the last \'a\' to \'b\' will result in the string \\"ababa\\", which is beautiful. Thus, the minimum changes required are 2. In the second example, the string is already beautiful, so no changes are required. Thus, the answer is 0.","solution":"def minimum_changes_to_beautiful(n, input_string): Function to determine the minimum number of changes needed to make the string beautiful. Parameters: - n: Length of the string (1 <= n <= 1000) - input_string: A string of length n consisting of lowercase English letters Returns: - Integer representing the minimum number of changes needed to make the string beautiful changes = 0 for i in range(1, n): if input_string[i] == input_string[i-1]: changes += 1 return changes"},{"question":"In the magical land of Pyroland, wizards and witches use runes for communication. Each rune is a string of lowercase English letters and is imbued with power based on the distinct characters it contains. The power of a rune is defined as the number of distinct characters in the string. Wizards want to form the most powerful magical phrase by concatenating a sequence of runes such that the power of the resulting phrase is maximized. However, the phrase must be formed by arranging a subsequence (not necessarily contiguous) of the given runes. You are given multiple test cases, and for each test case, you need to determine the maximum power of the phrase that can be formed. Each test contains multiple test cases. The first line contains the number of test cases ( t ) (( 1 leq t leq 10 )). Each test case begins with a line containing the integer ( n ) (( 1 leq n leq 50 )), the number of runes. The following ( n ) lines each contain a string ( s_i ) (( 1 leq |s_i| leq 50 )), representing a rune. Output a single integer for each test case, representing the maximum power of the phrase that can be formed. # Input Example ``` 2 3 abc bca cab 2 xyz yyy ``` # Output Example ``` 3 3 ``` In the first test case, the runes are \\"abc\\", \\"bca\\", and \\"cab\\". Any single rune contains all 3 distinct characters, so the maximum power of the phrase is 3. In the second test case, the runes are \\"xyz\\" and \\"yyy\\". The maximum power is achieved using the rune \\"xyz\\", which contains 3 distinct characters. The rune \\"yyy\\" has only 1 distinct character. Thus, the maximum power of the phrase is 3.","solution":"def max_power_of_phrase(test_cases): results = [] for t in test_cases: n, runes = t all_characters = set() for rune in runes: all_characters.update(rune) results.append(len(all_characters)) return results # Example usage: # test_cases = [ # (3, [\\"abc\\", \\"bca\\", \\"cab\\"]), # (2, [\\"xyz\\", \\"yyy\\"]) # ] # print(max_power_of_phrase(test_cases))"},{"question":"You are designing a network packet router algorithm that prioritizes packets based on assigned priorities and their arrival times. Each packet has a unique id, a priority level, and an arrival time. A higher priority level means the packet should be routed first. If two packets have the same priority level, the one that arrived earlier should be routed first. You need to implement a function that processes a list of packets and returns the sequence in which the packets should be routed. Each packet is represented as a tuple: (id, priority, arrival_time). The function should return a list of packet ids in the order they should be routed. # Function Signature ```python def route_packets(packets: List[Tuple[int, int, int]]) -> List[int]: pass ``` # Input - List of packets where each packet is represented as a tuple (id: int, priority: int, arrival_time: int). - 1 ≤ len(packets) ≤ 1000 - Each `id` is a unique integer. - 1 ≤ `priority` ≤ 10 - 0 ≤ `arrival_time` ≤ 1000000 # Output - A list of integer ids, representing the order in which the packets should be routed. # Example ```python packets = [ (1, 2, 100), (2, 1, 50), (3, 3, 75), (4, 2, 150), (5, 1, 100) ] print(route_packets(packets)) # Output: [3, 1, 4, 2, 5] ``` # Explanation The packet with `id=3` has the highest priority (3) and should be routed first. The packets with `ids=1` and `4` have the same priority (2), but packet `1` arrived earlier than packet `4`, so it should be routed before packet `4`. Finally, packets with `ids=2` and `5` have the same priority (1); packet `2` arrived earlier than packet `5` and should be routed first among them. # Criteria - Prioritize based on `priority` (higher first). - If priorities are the same, prioritize based on `arrival_time` (earlier first).","solution":"from typing import List, Tuple def route_packets(packets: List[Tuple[int, int, int]]) -> List[int]: Returns the sequence of packet ids sorted by priority (higher first) and arrival time (earlier first if priorities are the same). :param packets: A list of tuples where each tuple contains (id: int, priority: int, arrival_time: int). :return: A list of integer ids representing the order of routing. # Sort packets based on priority (higher first) and arrival time (earlier first) packets_sorted = sorted(packets, key=lambda packet: (-packet[1], packet[2])) # Extract the ids from the sorted packets sorted_ids = [packet[0] for packet in packets_sorted] return sorted_ids"},{"question":"Liza loves collecting prime numbers. Recently she has started wondering about prime sums. She came up with a problem and is eager to know the answer. Given an array of positive integers, can you determine if it is possible to split the array into two non-empty subsets such that the sum of the prime numbers in each subset is equal? If no prime numbers are present, the answer should be \\"NO\\". The first line contains a single integer n (2 ≤ n ≤ 100) — the size of the array. The next line contains n positive integers, each no more than 1000 — the elements of the array. Print \\"YES\\" (without the quotes) if it is possible to split the array into two non-empty subsets such that the sums of the prime numbers in both subsets are equal. Otherwise, print \\"NO\\" (without the quotes). In the first sample, one possible pair of subsets are [5] and [2, 3], where the sum of prime numbers in both subsets is 5. Therefore, the answer is \\"YES\\". In the second sample, there are no prime numbers, so the answer is \\"NO\\".","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def can_split_prime_sum(nums): Determines if it\'s possible to split the array into two non-empty subsets such that their prime sums are equal. primes = [num for num in nums if is_prime(num)] if len(primes) == 0: return \\"NO\\" prime_sum = sum(primes) if prime_sum % 2 != 0: return \\"NO\\" target = prime_sum // 2 n = len(primes) dp = [False] * (target + 1) dp[0] = True for prime in primes: for j in range(target, prime - 1, -1): dp[j] |= dp[j - prime] return \\"YES\\" if dp[target] else \\"NO\\" # Example usage: # n = 6 # nums = [1, 2, 3, 4, 5, 6] # print(can_split_prime_sum(nums)) # Output: \\"YES\\""},{"question":"Rodion is creating a new social network. Users can send friend requests to each other, and once accepted, they become friends. However, Rodion wants to analyze the connected nature of his social network, specifically determining the size of the largest group of friends. You are given a list of friend relationships among users in the social network. Your task is to determine the size of the largest group of friends. A group of friends is defined as a set of users where there is a path of mutual friends between any two users in the set. The first line of input contains two integers, n and m (1 ≤ n ≤ 100,000; 1 ≤ m ≤ 200,000), where n is the number of users and m is the number of friendships. The next m lines contain two integers each, u and v (1 ≤ u, v ≤ n), meaning that users u and v are friends. Output a single integer, the size of the largest group of connected friends. Example: Input: 5 3 1 2 2 3 4 5 Output: 3 Explanation: The largest group of friends is {1, 2, 3}, which consists of 3 users. There is another group {4, 5} consisting of 2 users. So, the output is 3.","solution":"def largest_group_of_friends(n, m, friendships): from collections import defaultdict, deque # Create adjacency list for the graph representation of friends graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) def bfs(start, visited): queue = deque([start]) visited[start] = True group_size = 0 while queue: node = queue.popleft() group_size += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return group_size visited = [False] * (n + 1) # Track visited users largest_group = 0 # Check each user to find all connected components for user in range(1, n + 1): if not visited[user]: group_size = bfs(user, visited) largest_group = max(largest_group, group_size) return largest_group # Example usage # n = 5 # m = 3 # friendships = [(1, 2), (2, 3), (4, 5)] # print(largest_group_of_friends(n, m, friendships)) # Output: 3"},{"question":"Benny loves binary strings and sequences. A binary string is a string consisting of only \'0\' and \'1\' characters. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Benny is particularly interested in finding the lexicographically smallest subsequence of a given binary string that has exactly k \'1\'s. For example, the lexicographically smallest subsequence of \\"1101\\" with two \'1\'s is \\"11\\", and with one \'1\' is \\"1\\". Given a binary string s and an integer k, help Benny find the lexicographically smallest subsequence with exactly k \'1\'s. If there is no such subsequence, output \\"-1\\". The first line contains a single integer k (0 ≤ k ≤ |s|) — the number of \'1\'s Benny desires in the subsequence. The second line contains a binary string s of length n (1 ≤ n ≤ 10^5). Print the lexicographically smallest subsequence of s containing exactly k \'1\'s. If no such subsequence exists, print \\"-1\\". For example, Input: 2 1101 Output: 11 Input: 3 1001 Output: -1","solution":"def lexicographically_smallest_subsequence(k, s): Returns the lexicographically smallest subsequence of s with exactly k \'1\'s. If no such subsequence exists, returns \\"-1\\". count_1 = s.count(\'1\') if k > count_1: return \\"-1\\" n = len(s) result = [] to_remove = count_1 - k for i in range(n): while result and s[i] < result[-1] and to_remove > 0: if result[-1] == \'1\': to_remove -= 1 result.pop() result.append(s[i]) result = [char for char in result if char == \'1\'] return \'\'.join(result[:k])"},{"question":"Damir is a food blogger and loves to create new recipes. He is trying to come up with unique dishes by mixing different ingredients. Each dish is made up of exactly three different ingredients, and no ingredient can repeat within the same dish. Damir has a list of ingredients he wants to use, and he needs your help to figure out all possible unique dishes he can create. The problem is defined as follows: The first line contains a single integer n (3 ≤ n ≤ 100) — the number of available ingredients. The second line contains n distinct strings, each representing an ingredient. Each ingredient\'s name consists of lowercase English letters only, with a length between 1 and 20 characters. Output all possible unique dishes that can be made using exactly three different ingredients. Each dish should be represented as a string of the concatenated names of the three ingredients in lexicographical order. The dishes should be listed in lexicographical order of their names. If there are no possible dishes, print a single line \\"Impossible\\". Please note that \\"unique dishes\\" means no two dishes have the same combination of ingredients, regardless of their order in the concatenation. Input: ``` 5 apple banana cherry date elderberry ``` Output: ``` applebananacherry applebananaelderberry applebananadate applecherrydate applecherryelderberry appledateelderberry bananacherrydate bananacherryelderberry bananadateelderberry cherrydateelderberry ``` In this task, Damir uses all combinations of ingredients taken three at a time to form unique dishes. Ensure the dishes are formed and listed according to the specifications.","solution":"from itertools import combinations def unique_dishes(n, ingredients): if n < 3: return [\\"Impossible\\"] ingredients.sort() combs = combinations(ingredients, 3) unique_dish_list = [\'\'.join(comb) for comb in combs] if not unique_dish_list: return [\\"Impossible\\"] return unique_dish_list"},{"question":"Alyssa is a software developer working on a project that processes a large stream of events. Each event has a unique identifier and a timestamp. Alyssa needs to process these events in reverse chronological order, but the challenge lies in efficiently handling insertions and retrievals of events from the stream. Your task is to implement a data structure that allows Alyssa to: 1. Insert a new event with a unique identifier and timestamp. 2. Retrieve the event with the most recent timestamp. 3. Retrieve the event with the k-th most recent timestamp, where k is given as input. Input: The first line contains an integer n (1 leq n leq 200000) – the number of operations. Each of the next n lines contains an operation in one of the following formats: - \\"INSERT id timestamp\\" where id is a positive integer and timestamp is a string in \\"YYYY-MM-DD HH:MM:SS\\" format. - \\"RETRIEVE\\" which retrieves the event with the most recent timestamp. - \\"RETRIEVE k\\" which retrieves the event with the k-th most recent timestamp (1 <= k <= current number of events). Output: For each \\"RETRIEVE\\" operation, output the id of the event. If there is no event to retrieve, output \\"NONE\\". Example: Input: 8 INSERT 1 2023-10-01 12:45:00 INSERT 2 2023-10-01 12:50:00 RETRIEVE INSERT 3 2023-10-01 12:40:00 RETRIEVE 2 INSERT 4 2023-10-01 12:55:00 RETRIEVE RETRIEVE 3 Output: 2 1 4 1","solution":"from bisect import insort from datetime import datetime class EventManager: def __init__(self): self.events = [] def insert(self, event_id, timestamp): Insert a new event with a unique identifier and timestamp. timestamp = datetime.strptime(timestamp, \'%Y-%m-%d %H:%M:%S\') insort(self.events, (timestamp, event_id)) def retrieve(self, k=1): Retrieve the event with the k-th most recent timestamp. if k > len(self.events): return \\"NONE\\" return self.events[-k][1] def process_operations(n, operations): event_manager = EventManager() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"INSERT\\": event_manager.insert(int(parts[1]), parts[2] + \\" \\" + parts[3]) elif parts[0] == \\"RETRIEVE\\": if len(parts) == 1: results.append(event_manager.retrieve()) else: results.append(event_manager.retrieve(int(parts[1]))) return results"},{"question":"Linda is a detective working on a case. She has a suspect who is hiding in one of n possible locations. To catch the suspect, she must search one location at a time. Linda has some information that can help her narrow down the search. Each piece of information gives her a set of locations that are guaranteed not to contain the suspect. Using this information, she wants to determine the minimum number of locations she needs to search before finding the suspect. You are given a list of n locations and m pieces of information. Each piece of information is a list of locations that do not contain the suspect. Your task is to determine the minimum number of searches Linda needs to perform to find the suspect. The first line of the input contains two integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ 50) – the number of locations and the number of pieces of information, respectively. Each of the next m lines contains a list of integers representing a piece of information. Each integer is a location number between 1 and n, and the integers in a line are space-separated. Output a single integer – the minimum number of searches Linda needs to perform to find the suspect. Example: Input: 5 3 2 3 1 4 2 5 Output: 1 In this example, the locations that are guaranteed not to contain the suspect are 1, 2, 3, 4, and 5. Therefore, the minimum number of searches Linda needs to perform to find the suspect is 1.","solution":"def min_searches_to_find_suspect(n, m, no_suspect_info): This function determines the minimum number of searches Linda needs to perform to find the suspect. :param n: int - number of locations :param m: int - number of pieces of information :param no_suspect_info: List[List[int]] - each sublist contains locations guaranteed not to have the suspect :return: int - minimum number of searches needed to find the suspect all_possible_locations = set(range(1, n + 1)) guaranteed_empty_locations = set() for info in no_suspect_info: guaranteed_empty_locations.update(info) # Locations that do not have guarantee of being empty possible_suspect_locations = all_possible_locations - guaranteed_empty_locations return len(possible_suspect_locations) # Example usage: # n = 5, m = 3 # no_suspect_info = [[2, 3], [1, 4], [2, 5]] # should return 1 n = 5 m = 3 no_suspect_info = [[2, 3], [1, 4], [2, 5]] print(min_searches_to_find_suspect(n, m, no_suspect_info))"},{"question":"Write a function that generates all valid parentheses combinations for a given number of pairs. Each pair consists of an opening parenthesis \'(\' and a closing parenthesis \')\'. The pairs have to be placed in a way that respects the proper order of parentheses. # Input: A single integer `n` (0 ≤ n ≤ 8) — the number of pairs of parentheses. # Output: An array of strings where each string is a valid parentheses combination. # Example: - Input: `3` - Output: `[\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"]` # Explanation: For `n=3`, there are five valid combinations of three pairs of parentheses. # Constraints: - The function should generate the combinations in lexicographical order. - Your solution should be efficient in terms of both time and space complexity. # Function Signature: ```python def generate_parentheses(n: int) -> List[str]: ``` Note: - You may assume that the input number is non-negative. - The function should return all possible valid combinations for the input number `n`.","solution":"from typing import List def generate_parentheses(n: int) -> List[str]: def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: combinations.append(s) return if left < n: backtrack(s+\'(\', left+1, right) if right < left: backtrack(s+\')\', left, right+1) combinations = [] backtrack() return combinations"},{"question":"Martha is playing a game on a grid with dimensions n x m. Initially, she is located at the top-left corner of the grid (1, 1). Her goal is to reach the bottom-right corner of the grid (n, m). However, there are some obstacles in her path, represented by cells with value 1, while the free cells are represented by value 0. Martha can only move right or down at each step. You need to determine the number of unique paths from the top-left corner to the bottom-right corner, avoiding the obstacles. If there are no valid paths, print 0. The input consists of the following: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - Each of the next n lines contains m integers (either 0 or 1) representing the grid. You need to output an integer — the number of unique paths from the top-left corner to the bottom-right corner. # Example **Input:** ``` 3 3 0 0 0 0 1 0 0 0 0 ``` **Output:** ``` 2 ``` **Explanation:** There are two paths from (1, 1) to (3, 3): 1. (1, 1) -> (1, 2) -> (2, 2) -> (3, 3) 2. (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3)","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from top-left corner to bottom-right corner in the grid while avoiding obstacles. n = len(grid) m = len(grid[0]) # If starting or ending point is an obstacle, return 0 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # Initialize the DP table dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Start position # Fill the DP table for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 # Obstacle cell else: if i > 0: dp[i][j] += dp[i-1][j] # From top if j > 0: dp[i][j] += dp[i][j-1] # From left return dp[n-1][m-1]"},{"question":"In a magical kingdom, there are n cities connected by m bidirectional roads. Each city belongs to one of two guilds: the Red Guild or the Blue Guild. The kingdom wants to ensure that no two cities belonging to different guilds can be directly connected by a road. Your task is to write a program that determines the minimum number of roads that need to be closed to achieve this requirement. If it\'s impossible to achieve this goal by closing roads, you should output -1. The first line of the input contains two integers, n and m (2 ≤ n ≤ 1000, 0 ≤ m ≤ 100000), representing the number of cities and the number of roads, respectively. The second line contains a string of length n, where each character is either \'R\' (for Red Guild) or \'B\' (for Blue Guild), indicating the guild to which each city belongs. The next m lines each contain two integers, xi and yi (1 ≤ xi, yi ≤ n, xi ≠ yi), representing that there is a road between city xi and city yi. A road should be closed if and only if it connects two cities from different guilds. Your goal is to minimize the number of such roads that are closed. Output the minimum number of roads that need to be closed. If it\'s impossible to satisfy the requirement, output -1. # Example Input ``` 5 6 RRBRB 1 2 1 3 2 4 3 4 3 5 4 5 ``` Output ``` 3 ``` # Explanation In the example, there are five cities. Cities 1, 2, and 4 are part of the Red Guild, while cities 3 and 5 are part of the Blue Guild. Three roads need to be closed to ensure that no city in the Red Guild is directly connected to a city in the Blue Guild.","solution":"def min_roads_to_close(n, m, guilds, roads): Returns the minimum number of roads that need to be closed to ensure no two cities belonging to different guilds (Red and Blue) are directly connected by roads. if m == 0: return 0 # No roads to close closed_roads = 0 for x, y in roads: if guilds[x-1] != guilds[y-1]: closed_roads += 1 return closed_roads # Example usage: n = 5 m = 6 guilds = \\"RRBRB\\" roads = [(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)] print(min_roads_to_close(n, m, guilds, roads)) # Output should be 3"},{"question":"You are given a list of integers and a series of queries. Each query consists of two integers x and y, representing a range within the list. For each query, find the sum of the minimum and maximum values within the specified range. The input format is as follows: The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of elements in the list and the number of queries, respectively. The second line contains n space-separated integers representing the elements of the list (1 ≤ each element ≤ 1,000,000). Next q lines contain two space-separated integers x and y (1 ≤ x, y ≤ n) representing the range for each query. Output q lines, each containing one integer — the sum of the minimum and maximum values for the specified range in the list. # Example Input ``` 5 3 1 3 5 7 9 1 3 2 5 1 5 ``` Output ``` 6 16 10 ``` # Explanation For the first query, the range is from index 1 to 3. The subarray [1, 3, 5] has a minimum value of 1 and a maximum value of 5. The sum is 1 + 5 = 6. For the second query, the range is from index 2 to 5. The subarray [3, 5, 7, 9] has a minimum value of 3 and a maximum value of 9. The sum is 3 + 9 = 12. For the third query, the range is from index 1 to 5. The entire array [1, 3, 5, 7, 9] has a minimum value of 1 and a maximum value of 9. The sum is 1 + 9 = 10.","solution":"def sum_of_min_and_max(n, q, array, queries): results = [] for x, y in queries: subarray = array[x-1:y] min_val = min(subarray) max_val = max(subarray) results.append(min_val + max_val) return results"},{"question":"John works as a farmer, and he has a rectangular garden of dimensions n x m. For an upcoming harvest festival, he wants to place scarecrows in the garden to protect his crops. John decides that each scarecrow can protect all cells in a 2x2 area including the cell where it is placed. However, due to financial constraints, he needs to use the minimum number of scarecrows necessary to cover the whole garden. If there are any cells that can\'t be covered by scarecrows, John would rather tighten his budget and leave those cells unprotected. The garden is represented by a grid of n rows and m columns. Your task is to determine the minimum number of scarecrows needed to cover the garden as much as possible. If it\'s not possible to cover the entire garden, minimize the uncovered cells. The input consists of two integers n and m separated by a space (1 ≤ n, m ≤ 1000) — the dimensions of the garden. Print one integer, the minimum number of scarecrows required to cover as much of the garden as possible. For example: Input: 4 5 Output: 6 Explanation: John can place 6 scarecrows in the garden as follows (S represents a scarecrow): S S S S S S S S S S S S In this configuration, 2 cells in the last row and 3 cells in the last column will not be covered by scarecrows, but the rest of the garden will be protected. Another example: Input: 3 3 Output: 4 Explanation: John can place 4 scarecrows in the garden as follows (S represents a scarecrow): S S S S S S In this configuration, 1 cell in the bottom row and 1 cell in the right column will not be covered by scarecrows.","solution":"def min_scarecrows(n, m): Returns the minimum number of scarecrows needed to cover as much as possible of a garden with dimensions n x m. Each scarecrow can cover a 2x2 area. rows_covered = n // 2 cols_covered = m // 2 remaining_rows = n % 2 remaining_cols = m % 2 # Scarecrows needed for fully covered rows and columns total_scarecrows = rows_covered * cols_covered # Handling remaining rows and columns if remaining_rows: total_scarecrows += cols_covered if remaining_cols: total_scarecrows += rows_covered if remaining_rows and remaining_cols: total_scarecrows += 1 return total_scarecrows"},{"question":"You are given a string s of length n consisting of the characters \'a\', \'b\', and \'c\' only. A substring of s is defined as a continuous sequence of characters within the string. You need to find the length of the shortest substring of s that contains at least one \'a\', one \'b\', and one \'c\'. The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the string. The second line contains the string s of length n consisting of characters \'a\', \'b\', and \'c\'. Print a single integer — the length of the shortest substring that contains at least one \'a\', one \'b\', and one \'c\'. If no such substring exists, print -1. Example input: ``` 7 abacbc ``` Example output: ``` 3 ``` In the given example, the shortest substring that contains at least one \'a\', one \'b\', and one \'c\' is \\"abc\\", which has a length of 3.","solution":"def shortest_substring_with_abc(s): Finds the length of the shortest substring that contains at least one \'a\', one \'b\', and one \'c\'. :param s: The input string consisting of characters \'a\', \'b\', and \'c\' :return: Length of the shortest substring containing at least one \'a\', one \'b\', and one \'c\'. If no such substring exists, return -1. n = len(s) # Initialize variables left = 0 min_length = float(\'inf\') current_count = {\'a\': 0, \'b\': 0, \'c\': 0} # Traverse the string using the two-pointer technique for right in range(n): if s[right] in current_count: current_count[s[right]] += 1 # Try to minimize the window size that contains \'a\', \'b\', and \'c\' while all(current_count[c] > 0 for c in \'abc\'): min_length = min(min_length, right - left + 1) if s[left] in current_count: current_count[s[left]] -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"In the land of Algorithmia, there exists a magical tree consisting of `n` nodes and `n-1` edges (1 ≤ n ≤ 100000). A tree is a connected acyclic graph. Each node in the tree has a unique number from 1 to `n`. Algorithmia\'s king wants to find the \\"dominant path\\" in the tree between any two nodes `u` and `v`. The \\"dominant path\\" between two nodes is the path that provides the highest sum of node values between `u` and `v`, inclusive. However, due to the tree structure, there is a unique path between any two nodes which simplifies our task to finding the path sum with nodes’ numbering involved. Given several queries, each asking for the sum of values on the path between two given nodes `u` and `v`, help the king provide the answers quickly. # Input The first line contains an integer `n` — the number of nodes in the tree. The second line contains `n` integers `a1, a2, ..., an` — the values assigned to the nodes. Each of the next `n-1` lines contains two integers `u` and `v` — an edge connecting node `u` with node `v`. The next line contains an integer `q` — the number of queries. Each of the next `q` lines contains two integers `u` and `v` — the nodes for which to determine the sum of values on the path between `u` and `v`. # Output For each query, output a single integer — the sum of values on the dominant path between nodes `u` and `v`. # Example Input ``` 5 1 3 2 4 5 1 2 1 3 2 4 2 5 3 1 4 1 5 3 4 ``` Output ``` 10 11 9 ``` # Explanation In the example: - For the query (1, 4), the path is 1 -> 2 -> 4 with node values 1 + 3 + 4 = 8 - For the query (1, 5), the path is 1 -> 2 -> 5 with node values 1 + 3 + 5 = 9 - For the query (3, 4), the path is 3 -> 1 -> 2 -> 4 with node values 2 + 1 + 3 + 4 = 10","solution":"import sys from collections import deque def dfs(node, parent, depth, values, adj, path_sum, parent_table): parent_table[node] = parent path_sum[node] = values[node] if parent != -1: path_sum[node] += path_sum[parent] depth[node] = 0 if parent == -1 else depth[parent] + 1 for neighbor in adj[node]: if neighbor != parent: dfs(neighbor, node, depth, values, adj, path_sum, parent_table) def lca(u, v, parent, depth): if depth[u] < depth[v]: u, v = v, u while depth[u] > depth[v]: u = parent[u] while u != v: u = parent[u] v = parent[v] return u def find_dominant_path_sum(n, values, edges, queries): sys.setrecursionlimit(200000) adj = [[] for _ in range(n + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) depth = [-1] * (n + 1) path_sum = [-1] * (n + 1) parent_table = [-1] * (n + 1) dfs(1, -1, depth, values, adj, path_sum, parent_table) result = [] for u, v in queries: ancestor = lca(u, v, parent_table, depth) result.append(path_sum[u] + path_sum[v] - 2 * path_sum[ancestor] + values[ancestor]) return result"},{"question":"Polycarp has recently been fascinated by the concept of \\"unique numbers\\". A number is called unique if all its digits are distinct. Polycarp has a number n, and he wants to find the largest unique number that can be formed using the digits of n without rearranging them. In other words, he can delete some digits from n (possibly zero), but the remaining digits must be in the same order as they appeared in the original number, and the resulting number must be unique. Your task is to write a program that finds the largest unique number that can be formed from the given number n. The first line of input contains a single integer n (1 ≤ n ≤ 10^18). Output a single integer - the largest unique number that can be formed from n. If there are multiple answers with the same numerical value, output the one which uses the most digits from left to right as they appear in n. # Example Input: 19827397 Output: 198273","solution":"def largest_unique_number(n): Finds the largest unique number that can be formed from the given number n. :param n: int, the input number :return: int, the largest unique number that can be formed n_str = str(n) seen_digits = set() result = [] for digit in n_str: if digit not in seen_digits: result.append(digit) seen_digits.add(digit) return int(\'\'.join(result))"},{"question":"Anna loves exploring geometric puzzles and came across this unique hexagonal grid. The grid consists of n hexagons arranged in a honeycomb pattern, and each hexagon has six sides. Anna wants to travel from her starting point (hexagon S) to a designated endpoint (hexagon E). She can move from one hexagon to any of its six neighboring hexagons. Due to time constraints, she wants to know the minimum number of moves required to get from S to E. The grid is represented using axial coordinates, with each hexagon having coordinates (q, r). The connected neighbors of a hexagon at (q, r) are given by (q+1, r), (q-1, r), (q, r+1), (q, r-1), (q+1, r-1), and (q-1, r+1). Given the coordinates of S and E, determine the minimum number of moves needed for Anna to travel from S to E. The first line contains a single integer n (1 ≤ n ≤ 1000), the number of hexagons in the grid. The second line contains two integers q1 and r1 (-500 ≤ q1, r1 ≤ 500), the coordinates of the starting hexagon S. The third line contains two integers q2 and r2 (-500 ≤ q2, r2 ≤ 500), the coordinates of the endpoint hexagon E. Output a single integer, the minimum number of moves required to travel from S to E. # Example Input: ``` 7 0 0 1 1 ``` Output: ``` 2 ``` Explanation: Anna can move from (0, 0) to (1, 0) and then to (1, 1) in 2 moves.","solution":"from collections import deque def hex_distance(q1, r1, q2, r2): Return the minimum number of moves required to travel from (q1, r1) to (q2, r2) in a hexagonal grid. directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, -1), (-1, 1)] # BFS initialization queue = deque([(q1, r1, 0)]) visited = set() visited.add((q1, r1)) # BFS loop while queue: q, r, steps = queue.popleft() # If we reached the end point if (q, r) == (q2, r2): return steps for dq, dr in directions: new_q, new_r = q + dq, r + dr if (new_q, new_r) not in visited: visited.add((new_q, new_r)) queue.append((new_q, new_r, steps + 1)) return float(\'inf\')"},{"question":"Anna loves candies and she has a habit of arranging all her candies in a single row in increasing order of their sweetness levels. However, for some special candies, the sweetness level suddenly increases and then goes back to a lower level, forming a peak. Anna calls these special candies \\"peaks\\". You are given an array of integers representing the sweetness levels of Anna\'s candies. A candy at position `i` is considered a peak if it is strictly greater than its neighbors (i.e., the candies before and after it). Write a program that finds the total number of peaks in the given array of sweetness levels. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of candies in Anna\'s collection. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the sweetness levels of the candies. # Output - Print a single integer — the total number of peaks in the array. # Example Input: ``` 8 1 3 2 4 6 5 3 4 ``` Output: ``` 2 ``` Explanation: - Candies at positions 1, 6, and 7 are peaks, but position 7 is not a peak because it is not greater than its previous element. - So, there are 2 peaks at positions 2 and 5 in the given array. Write a function `find_peaks(n: int, sweetness_levels: List[int]) -> int` to solve the problem.","solution":"from typing import List def find_peaks(n: int, sweetness_levels: List[int]) -> int: if n < 3: return 0 # Less than 3 elements, there can be no peaks peaks_count = 0 for i in range(1, n - 1): if sweetness_levels[i] > sweetness_levels[i - 1] and sweetness_levels[i] > sweetness_levels[i + 1]: peaks_count += 1 return peaks_count"},{"question":"You are given an array of integers and you task is to make all the integers equal by adding them in pairs. You can pick any two elements in the array and add their values together, putting the sum back into the array in place of the original two elements. The goal is to determine the minimum number of operations needed to make all elements in the array equal. The first line of input contains one integer N (1 ≤ N ≤ 100,000) — the number of elements in the array. The second line contains N integers representing the elements of the array (1 ≤ elements ≤ 10,000). The only line of output should contain the minimum number of operations needed to make all elements in the array equal. Note: - If the array already contains all equal elements, the output should be 0. - Multiple solutions may exist, any of them will be accepted. Example: Input: 4 1 2 3 4 Output: 3","solution":"def min_operations_to_make_equal(N, array): Returns the minimum number of operations needed to make all elements in the array equal by adding pairs of elements. return N - 1 # Example call # print(min_operations_to_make_equal(4, [1, 2, 3, 4])) # Should output 3"},{"question":"In a galaxy far, far away, there exists a planet named Troplon where a unique type of farming is practiced. The farmers grow N different types of hypercrops (h1, h2, ..., hN). Each hypercrop has a different growth rate and requires a specific sequence of nutrients for optimal growth. Each nutrient is represented by a non-negative integer Ni,2019_i (0 ≤ Ni ≤ 109). The sum of nutrients needed each day gives the daily nutrient requirement. You are given the number of nutrients Ns for each day of the year. Farmer Bob wants to minimize the total nutrient use over the year while ensuring that all hypercrops receive the nutrients they need every day. On each day, he can select any nutrient combination for each crop as long as the total nutrient requirement for the day does not exceed the daily nutrient availability Ns. However, due to certain economic constraints, once a nutrient combination is chosen for a crop, it has to be used throughout the year. Given the nutrient requirements for N types of hypercrops and daily nutrient availability Ns for each day of the year, calculate the optimal nutrient combinations to minimize the total use of nutrients over the year while keeping all crops nourished every day. The input format is as follows: - The first line contains an integer N (1 ≤ N ≤ 100,000), the number of hypercrops. - The second line contains N integers, representing the daily nutrient requirement for each hypercrop h1 to hN. - The third line contains 365 integers, representing the daily nutrient availability Ns for each day (1 ≤ Ns ≤ 109 for each day). The output should be a single integer, the minimum total use of nutrients over the year while keeping all hypercrops nourished every day. Example: Input: 3 2 3 1 3 3 3 3 3 3 3 3 3 3 ... Output: 2190 Explanation: - Each day, the optimal nutrient combination (nutrients for h1, h2, h3) is chosen such that their total does not exceed the daily nutrient availability (Ns = 3). - If nutrients for (h2 = 3), (h1 = 2, h3 = 1) are chosen, then the total nutrient use in a year is 3 * 365 + 3 * 365 + 1 * 365 = 2190. The challenge lies in determining an optimal nutrient combination that can be used throughout the year and fitting within the daily availability constraints.","solution":"def minimal_total_nutrient_use(N, nutrients, daily_availability): This function calculates the minimum total use of nutrients over the year while keeping all crops nourished every day given the nutrient requirements and daily nutrient availability. daily_availability.sort() nutrients.sort() total_nutrient_use = 0 for i in range(N): total_nutrient_use += nutrients[i] * 365 return total_nutrient_use"},{"question":"Detective Conan is trying to solve a mystery in the city of Beika. The city consists of n buildings connected by bidirectional roads, creating a complex network. Conan suspects that the culprit is hiding in one of the buildings connected in a loop, which forms a cycle in the network. He needs to identify whether there is any cycle in the network, and if so, the length of the shortest cycle. You are given the number of buildings and a list of roads connecting the buildings. Using this information, help Conan by determining if there is a cycle and by printing the length of the shortest cycle. If there are no cycles, output `-1`. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 3000) — the number of buildings and the number of roads. The next m lines contain two integers u and v (1 ≤ u, v ≤ n) each, indicating there is a road between building u and building v. Output a single integer — the length of the shortest cycle in the network, or `-1` if there are no cycles. # Example Input 5 6 1 2 2 3 3 4 4 5 3 5 1 5 Output 3 Explanation The cycle 3-5-4 forms the shortest cycle with length 3. Another possible cycle is 1-5-4-3-2-1, but its length is 5, which is longer than the shortest cycle.","solution":"from collections import deque, defaultdict def shortest_cycle_length(n, m, roads): if m == 0: return -1 graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start): dist = [-1] * (n + 1) dist[start] = 0 queue = deque([(start, -1)]) while queue: node, parent = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 queue.append((neighbor, node)) elif neighbor != parent: return dist[node] + dist[neighbor] + 1 return float(\'inf\') shortest_cycle = float(\'inf\') for i in range(1, n + 1): shortest_cycle = min(shortest_cycle, bfs(i)) return shortest_cycle if shortest_cycle != float(\'inf\') else -1"},{"question":"Alyssa, a software developer, discovered an important security vulnerability: dependency cycles between libraries can cause significant issues in the build process. Consequently, she needs to identify cycles in directed graphs representing the relationships between libraries. She decided to write a program to help with this task. You are given a directed graph with n vertices and m edges (the vertices represent libraries and the edges represent dependencies). Your task is to determine if there is a cycle in the graph. If there is a cycle, return \\"CYCLE FOUND\\" and print any of the cycles present in the graph. If there is no cycle, return \\"ACYCLIC\\". The first line contains two integers, n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000) — the number of vertices and edges, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) representing a directed edge from vertex u to vertex v. If a cycle is found, print \\"CYCLE FOUND\\" followed by the cycle. If multiple cycles exist, print any one of them. The cycle should be printed as a sequence of vertices starting and ending with the same vertex. If there is no cycle, print \\"ACYCLIC\\". In the first sample, the graph contains a cycle (1 -> 2 -> 3 -> 1), so the output is \\"CYCLE FOUND\\" followed by one possible cycle. In the second sample, the graph does not contain any cycles, so the output is \\"ACYCLIC\\". Sample Input 1: 3 3 1 2 2 3 3 1 Sample Output 1: CYCLE FOUND 1 2 3 1 Sample Input 2: 4 2 1 2 3 4 Sample Output 2: ACYCLIC","solution":"from collections import defaultdict, deque def detect_cycle_in_directed_graph(n, edges): def dfs(v): stack.append(v) visited[v] = 1 # mark as visiting for neighbour in adj[v]: if visited[neighbour] == 0: # if not visited if dfs(neighbour): return True elif visited[neighbour] == 1: # if visiting # cycle found, record the cycle path cycle_start = neighbour cycle_path.append(cycle_start) while stack and stack[-1] != cycle_start: cycle_path.append(stack.pop()) cycle_path.append(cycle_start) return True visited[v] = 2 # mark as visited stack.pop() return False adj = defaultdict(list) for u, v in edges: adj[u].append(v) visited = [0] * (n + 1) # 0: not visited, 1: visiting, 2: visited stack = [] cycle_path = [] for i in range(1, n + 1): if visited[i] == 0: # not visited if dfs(i): cycle_path.reverse() return \\"CYCLE FOUND\\", cycle_path return \\"ACYCLIC\\", [] # example usage input_data = [(3, 3), [(1, 2), (2, 3), (3, 1)]] n, edges = input_data[0][0], input_data[1] print(detect_cycle_in_directed_graph(n, edges)) # Output: \\"CYCLE FOUND\\", [1, 2, 3, 1] input_data = [(4, 2), [(1, 2), (3, 4)]] n, edges = input_data[0][0], input_data[1] print(detect_cycle_in_directed_graph(n, edges)) # Output: \\"ACYCLIC\\", []"},{"question":"Masha loves to play with arrays. She particularly enjoys finding the beauty in arrays. The beauty of an array is defined as the sum of differences between every pair of elements modulo `k`. Formally, if the array is `a` of length `n`, then the beauty is: [ text{beauty}(a) = sum_{1 leq i < j leq n} left( left| a[i] - a[j] right| mod k right) ] Masha is given an array of integers and a positive integer `k`. Your task is to help Masha find the beauty of the array. Write a function to calculate the beauty of the array for given `n`, `k`, and the array `a`. The first line of the input contains two integers `n` and `k` (1 ≤ `n` ≤ 105, 1 ≤ `k` ≤ 1000) — the number of elements in the array and the modulo value respectively. The second line contains `n` space-separated integers, `a1, a2, ..., an` (1 ≤ `ai` ≤ 109), representing the elements of the array. Print a single integer — the beauty of the array. # Sample Input ``` 4 5 1 6 8 4 ``` # Sample Output ``` 8 ``` # Explanation of Sample For the array `[1, 6, 8, 4]` and `k = 5`: - |1 - 6| % 5 = 5 % 5 = 0 - |1 - 8| % 5 = 7 % 5 = 2 - |1 - 4| % 5 = 3 % 5 = 3 - |6 - 8| % 5 = 2 % 5 = 2 - |6 - 4| % 5 = 2 % 5 = 2 - |8 - 4| % 5 = 4 % 5 = 4 Sum = 0 + 2 + 3 + 2 + 2 + 4 = 13","solution":"def find_beauty(n, k, a): Calculates the beauty of the array. Parameters: n (int): The number of elements in the array. k (int): The modulo value. a (list): The array of integers. Returns: int: The beauty of the array. beauty = 0 for i in range(n): for j in range(i + 1, n): beauty += abs(a[i] - a[j]) % k return beauty"},{"question":"A group of friends is playing a game where they take turns calling out numbers. Each number called must be either a multiple of the previous number or must be divisible by the previous number. You are given a sequence of numbers called out by the friends, and you need to determine if the sequence satisfies the rules of the game. The first line of input contains an integer n — the number of numbers in the sequence (2 ≤ n ≤ 105). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) representing the sequence of numbers called out. Print \\"YES\\" (without the quotes) if the sequence satisfies the rule of the game, and \\"NO\\" (without the quotes) otherwise. # Example Input 5 3 9 27 54 18 Output YES Input 4 7 14 8 4 Output NO Explanation In the first example, each number is either a multiple of the preceding number or divisible by it. In the second example, 8 is neither a multiple of 14 nor divisible by 14, hence the sequence does not satisfy the game\'s rules.","solution":"def is_valid_sequence(n, sequence): Checks if the sequence satisfies the game\'s rule. Parameters: n (int): Number of numbers in the sequence. sequence (list): The sequence of numbers. Returns: str: \\"YES\\" if the sequence satisfies the rule, \\"NO\\" otherwise. for i in range(1, n): if (sequence[i] % sequence[i-1] != 0) and (sequence[i-1] % sequence[i] != 0): return \\"NO\\" return \\"YES\\""},{"question":"You are given a sequence of n integers representing the daily temperatures recorded on an island. The government wants to identify the longest period during which the temperature did not drop. They want to calculate the length of the longest non-decreasing subsequence of temperatures. The temperatures are given in the order they were recorded, from the oldest to the most recent. Write a program to determine the length of this longest non-decreasing subsequence. The first line of the input contains a single integer n (1 leq n leq 10^5) — the number of days. The second line contains n integers separated by spaces, t_1, t_2, ..., t_n (-10^9 leq t_i leq 10^9) — the temperatures recorded on each day. Output a single integer, the length of the longest non-decreasing subsequence. # Examples: **Input:** ``` 6 1 2 2 3 2 4 ``` **Output:** ``` 4 ``` **Input:** ``` 5 5 4 4 4 3 ``` **Output:** ``` 3 ``` # Explanation: In the first example, the longest non-decreasing subsequence is [1, 2, 2, 3] or [1, 2, 2, 4], both with a length of 4. In the second example, the longest non-decreasing subsequence is [5, 4, 4] or [4, 4, 4], with a length of 3.","solution":"def longest_non_decreasing_subseq_length(n, temperatures): Returns the length of the longest non-decreasing subsequence of temperatures. Parameters: n (int): The number of days. temperatures (list of int): List of temperature readings. Returns: int: The length of the longest non-decreasing subsequence. if n == 0: return 0 longest_length = 1 current_length = 1 for i in range(1, n): if temperatures[i] >= temperatures[i - 1]: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 return longest_length"},{"question":"In a kingdom far, far away, there is a magical forest consisting of n trees located in a straight line. Each tree has a certain magical power value associated with it. The king of the kingdom wants to select a contiguous subsequence of trees so that the sum of their magical power values is maximized. However, to ensure that the magic is distributed fairly, the chosen subsequence must contain at least one tree with a positive power value. Your task is to help the king find this subsequence and determine its maximum possible sum. The first line of input consists of a single integer n (1 ≤ n ≤ 100,000) — the number of trees. The second line contains n space-separated integers where the i-th integer ai (-10^9 ≤ ai ≤ 10^9) represents the magical power value of the i-th tree. Output a single integer — the maximum sum of a contiguous subsequence that contains at least one tree with a positive power value. # Example Input ``` 5 -1 2 -3 4 5 ``` Output ``` 9 ``` Explanation In the example, the contiguous subsequence [4, 5] provides the maximum sum of 9. Other valid subsequences could be [2], [2, -3, 4, 5], etc., but the sum of [4, 5] is the highest.","solution":"def max_sum_with_positive(n, powers): Function to find the maximum sum of a contiguous subsequence that contains at least one tree with a positive power value. :param n: number of trees (integer) :param powers: list of integers representing the magical power values of the trees :return: maximum possible sum of the contiguous subsequence (integer) max_sum = -float(\'inf\') current_sum = 0 has_positive = False for power in powers: if power > 0: has_positive = True current_sum += power if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 # Ensure there is at least one positive value in the result if not has_positive: return max(powers) return max_sum"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Each edge has an associated integer weight `w_i`. You are tasked with finding the path with the maximum sum of weights such that no edge is used more than once in this path. However, the twist is that it has to be a circular path, meaning that the path must start and end at the same vertex. The input format is as follows: - The first line consists of two integers `n` and `m` (1 ≤ `n` ≤ 1000, 0 ≤ `m` ≤ 10000) representing the number of vertices and edges respectively. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ `u`, `v` ≤ `n`, 1 ≤ `w` ≤ 1000), describing an edge between vertices `u` and `v` with weight `w`. Your task is to find the maximum sum of weights of such a circular path. If there is no such circular path, print `-1`. # Example Input: ``` 5 7 1 2 3 2 3 4 3 4 5 4 5 6 5 1 7 2 5 2 3 1 3 ``` Output: ``` 25 ``` Explanation: The maximum sum circular path here is 1 -> 2 -> 3 -> 4 -> 5 -> 1, with a total weight of 25. Your output will be considered correct if the sum is accurate to the given input constraints.","solution":"import heapq from collections import defaultdict def max_weight_cycle(n, m, edges): def find_max_cycle(start_node): visited = [False] * (n + 1) max_cycle_weight = float(\'-inf\') def dfs(node, start_node, current_weight, parent): nonlocal max_cycle_weight visited[node] = True for neighbor, weight in graph[node]: if neighbor == parent: continue if neighbor == start_node: max_cycle_weight = max(max_cycle_weight, current_weight + weight) elif not visited[neighbor]: dfs(neighbor, start_node, current_weight + weight, node) visited[node] = False dfs(start_node, start_node, 0, -1) return max_cycle_weight # Create the graph as an adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) max_weight = float(\'-inf\') for i in range(1, n + 1): cycle_weight = find_max_cycle(i) if cycle_weight != float(\'-inf\'): max_weight = max(max_weight, cycle_weight) return max_weight if max_weight != float(\'-inf\') else -1 def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [] for line in lines[1:]: u, v, w = map(int, line.split()) edges.append((u, v, w)) return n, m, edges"},{"question":"A group of scientists discovered a new organism living in the forests. They noticed that this organism grows exponentially with a unique pattern. Each day, the organism splits into clusters that divide into smaller clusters on the next day, and the pattern continues. Given an integer, `n`, representing the number of days, help the scientists determine the amount of organisms present at the end of the `n`-th day. The organism follows the following growth rule: 1. On day 1, there is 1 organism. 2. On every subsequent day, each organism splits into exactly 3 new organisms. Hence, the number of organisms grows exponentially as follows: - Day 1: 1 organism - Day 2: 3 organisms - Day 3: 9 organisms - Day 4: 27 organisms Given an integer `day`, calculate the number of organisms present at the end of the given `day`. # Input - The first line contains a single integer `t` (1 ≤ t ≤ 100), the number of test cases. - Each of the next `t` lines contains an integer `day` (1 ≤ day ≤ 20), the day number for which the organisms count is to be calculated. # Output - For each test case, print a single line with the number of organisms at the end of the given day. # Examples Input ``` 3 1 2 4 ``` Output ``` 1 3 27 ``` # Notes - The number of organisms can be calculated using the formula ( 3^{(day-1)} ). - The problem constraints ensure that the number of organisms will always be manageable within standard integer ranges.","solution":"def calculate_organisms(day): Given a day number, return the number of organisms present at the end of that day. The number of organisms follows the exponential growth rule: 3^(day - 1). return 3 ** (day - 1) def process_requests(num_cases, days): Given the number of test cases and a list of days, return the corresponding number of organisms for each day. results = [] for day in days: results.append(calculate_organisms(day)) return results"},{"question":"You are given a string s which contains only lowercase Latin letters. Your task is to determine the number of distinct substrings of s. A substring is defined as a contiguous sequence of characters within a string. To help you in this, consider using efficient data structures such as suffix arrays or suffix trees which can be helpful in solving this problem within feasible time limits. The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000). Output a single integer — the number of distinct substrings in the given string. For example, for the input string \\"abab\\", the distinct substrings are \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"abab\\", making a total of 7 distinct substrings. Hence, the output should be 7. Note: Consider non-empty substrings only.","solution":"class SuffixTrieNode: def __init__(self): self.children = {} self.end_of_word = False class SuffixTrie: def __init__(self): self.root = SuffixTrieNode() self.count = 0 # To count distinct substrings def _insert_suffix(self, s): current = self.root for char in s: if char not in current.children: current.children[char] = SuffixTrieNode() self.count += 1 # Increment count for the new node (distinct substring) current = current.children[char] def insert(self, s): for i in range(len(s)): self._insert_suffix(s[i:]) def count_distinct_substrings(s): suffix_trie = SuffixTrie() suffix_trie.insert(s) return suffix_trie.count # Example Usage: # s = \\"abab\\" # print(count_distinct_substrings(s)) # Output: 7"},{"question":"A little village has n houses numbered from 1 to n connected by n-1 roads. This forms a tree-like structure where each house can be reached from any other house. The mayor wants to build a new conference hall in one of the houses, but he wants to minimize the maximum distance any resident needs to travel to reach the hall. You need to find and output the minimum possible value of the maximum distance any villager needs to travel to reach the hall from their house, if the hall is placed optimally. The first line contains one integer n (2 ≤ n ≤ 100,000) — the number of houses. Each of the next n-1 lines contains two integers a and b (1 ≤ a, b ≤ n) — the roads connecting house a and house b. Print one integer — the minimum possible value of the maximum distance any villager needs to travel. Example: Input: 6 1 2 1 3 2 4 2 5 3 6 Output: 2 Explanation: By placing the conference hall in house 1, the maximum distance a resident has to travel is 2.","solution":"from collections import defaultdict, deque def find_min_max_distance(n, roads): if n == 2: return 1 def bfs(start_node): visited = [-1] * (n + 1) queue = deque([start_node]) visited[start_node] = 0 farthest_node = start_node max_distance = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if visited[neighbor] == -1: visited[neighbor] = visited[current] + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) # Step 1: Start BFS from an arbitrary node (let\'s say node 1) to find the farthest node from it. farthest_node, _ = bfs(1) # Step 2: Perform BFS from the farthest node found in step 1 to find the maximum distance in the tree. most_distant_node, max_distance = bfs(farthest_node) # Step 3: The minimum possible value of the maximum distance to the conference hall is ceiling of half of the diameter return (max_distance + 1) // 2 # Example Usage print(find_min_max_distance(6, [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)])) # Output: 2"},{"question":"You are given an integer ( n ) and a list of ( n ) integers ( a_1, a_2, ldots, a_n ). Your task is to find the length of the longest contiguous subsequence of these numbers such that the sequence is strictly increasing. The first line contains a single integer ( n ) (( 1 leq n leq 10^6 )) — the length of the array. The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) (( 1 leq a_i leq 10^9 )) — the elements of the array. Print a single integer — the length of the longest strictly increasing contiguous subsequence in the array. For example, given ( n = 6 ) and ( a = [2, 2, 1, 3, 4, 5] ): The longest strictly increasing contiguous subsequence is ( [1, 3, 4, 5] ), which has a length of 4.","solution":"def longest_increasing_subsequence_length(n, a): Returns the length of the longest contiguous subsequence of the input list a such that the sequence is strictly increasing. Parameters: n (int): The number of elements in the list a. a (list of int): The list of integers. Returns: int: The length of the longest strictly increasing contiguous subsequence. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if a[i] > a[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given an array of integers, a \\"jump sequence\\" of the array is defined as follows: starting from the first element, repeatedly jump to the position (index + value at index) of the current element. The sequence ends when you either jump out of the array or land on a position you\'ve already visited. You need to find out the number of valid jump sequences that can be formed when starting from each index in the array. The valid jump sequences are those that, when followed, result in jumping out of the array bounds. # Input: - The first line contains a single integer `n` (1 ≤ n ≤ 1000) - the length of the array. - The second line contains `n` integers `a1, a2, ..., an` (-1000 ≤ ai ≤ 1000) - the elements of the array. # Output: - Print a single integer - the number of valid jump sequences that start from each possible position in the array. # Example: Input: ``` 5 2 3 1 -4 6 ``` Output: ``` 3 ``` # Explanation: - Starting from index 0: Jump sequence is 0 -> 2 (as a[0] = 2) -> end (out of bounds), valid. - Starting from index 1: Jump sequence is 1 -> 4 (as a[1] = 3) -> end (out of bounds), valid. - Starting from index 2: Jump sequence is 2 -> end (as a[2] = 1; 2+1=3 but value at 3 is -4, jumps to negative index which is out of bounds), valid. - Starting from index 3: Jump sequence is 3 -> -1 (out of bounds), valid. - Starting from index 4: Jump sequence is 4 -> 10 (out of bounds), valid. Thus, there are 3 valid jump sequences.","solution":"def count_valid_jump_sequences(n, arr): def is_valid_jump_sequence(start_idx): visited = set() current_idx = start_idx while True: if current_idx < 0 or current_idx >= n: return True if current_idx in visited: return False visited.add(current_idx) current_idx += arr[current_idx] valid_count = 0 for i in range(n): if is_valid_jump_sequence(i): valid_count += 1 return valid_count"},{"question":"You are given a sequence of n integers representing the heights of flowers in a garden. Each day, a gardener can choose one flower and increase its height by one unit. The gardener wants to make the heights of all flowers equal. Your task is to determine the minimum number of days required to achieve this. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of flowers in the garden. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^5) — the initial heights of the flowers. Output a single integer — the minimum number of days required to make all flower heights equal. In the first example, the gardener needs to make 1 increase on the first flower and 3 increases on the second flower, totaling 4 days. In the second example, the flowers are already of equal height, so no days are needed.","solution":"def min_days_to_make_flowers_equal(n, heights): Returns the minimum number of days required to make all flower heights equal. Parameters: n (int): The number of flowers. heights (list[int]): The initial heights of the flowers. Returns: int: The minimum number of days required. max_height = max(heights) total_days = sum(max_height - height for height in heights) return total_days"},{"question":"Ayaka is fascinated by strings and their potential palindrome properties. She likes to transform strings into palindromes. A palindrome is a string that reads the same forward and backward. One day, Ayaka came up with a challenging puzzle for her friends: given a string, she wants to know the minimum number of character insertions needed to make it a palindrome. An insertion means adding exactly one character at any position in the string. Can you help Ayaka by solving this puzzle? The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains one string s (1 ≤ |s| ≤ 1000, consisting of lowercase alphabetical letters only). For each test case, print a single line containing one integer, the minimum number of insertions needed to make the string a palindrome. Consider the samples: In the first example, the string \\"ab\\" needs one insertion, resulting in \\"aba\\" or \\"bab\\". In the second example, the string \\"race\\" can be transformed into \\"racecar\\" by inserting \\"c\\", \\"a\\", and \\"r\\". In the third example, the string \\"aaa\\" is already a palindrome, so zero insertions are needed.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions needed to make string s a palindrome. n = len(s) dp = [[0]*n for _ in range(n)] # Fill the dp array for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1] def solve(t, cases): results = [] for s in cases: results.append(min_insertions_to_palindrome(s)) return results"},{"question":"Karen works as a scheduler for a conference and needs to organize the event such that speakers have their sessions without conflicts. Each speaker can only be scheduled within specific time slots, and the goal is to maximize the number of speakers who get to present. You are given a list of n speakers, and each speaker i has a starting time s_i and an ending time e_i. The conference room is available from time 0 to time T. Karen can only schedule a speaker if their time slots do not overlap with another speaker\'s time slot. Two time slots [s_i, e_i] and [s_j, e_j] are considered overlapping if they share any common time point. Your task is to find the maximum number of non-overlapping sessions that can be scheduled. The first line of input contains two integers, n and T (1 leq n leq 10^5, 1 leq T leq 10^9), representing the number of speakers and the total time of the conference respectively. The next n lines contain two integers each, s_i and e_i (0 leq s_i < e_i leq T), denoting the start and end times of the speaker\'s session. Print a single integer representing the maximum number of non-overlapping sessions that can be scheduled. # Example Input: ``` 5 10 1 4 3 5 0 6 5 7 8 9 ``` Output: ``` 3 ``` Explanation: In this example, Karen can schedule the sessions [1, 4], [5, 7], and [8, 9] without any overlap. Therefore, the answer is 3.","solution":"def max_non_overlapping_sessions(n, T, sessions): Given a list of sessions with their start and end times, returns the maximum number of non-overlapping sessions. # Sort the sessions based on their ending times sessions.sort(key=lambda x: x[1]) max_sessions = 0 current_end_time = 0 for s, e in sessions: if s >= current_end_time: max_sessions += 1 current_end_time = e return max_sessions # Example input n = 5 T = 10 sessions = [(1, 4), (3, 5), (0, 6), (5, 7), (8, 9)] # Expected output: 3 print(max_non_overlapping_sessions(n, T, sessions))"},{"question":"You are given a list of `n` integers and a target integer `x`. Your task is to determine if there exists a pair of distinct indices (i) and (j) such that the sum of the elements at these indices is equal to (x). If such a pair exists, print \\"YES\\" followed by the 1-based indices of the pair. If no such pair exists, print \\"NO\\". **Input** The first line contains two integers `n` and `x` (1 ≤ `n` ≤ 100000, 1 ≤ `x` ≤ 10^9) — the length of the list and the target sum. The second line contains `n` integers (a_1, a_2, ..., a_n) (1 ≤ (a_i) ≤ 10^9) — the elements of the list. **Output** If there exists a pair of distinct indices (i) and (j) such that (a_i + a_j = x), print \\"YES\\" followed by the 1-based indices `i` and `j`. If no such pair exists, print \\"NO\\". **Example** Input: ``` 5 10 1 2 3 7 8 ``` Output: ``` YES 3 4 ``` Input: ``` 4 8 1 5 3 5 ``` Output: ``` YES 2 3 ``` Input: ``` 3 100 1 2 3 ``` Output: ``` NO ```","solution":"def find_pair_with_sum(n, x, arr): Determines if there exists a pair of distinct indices i and j such that the sum of the elements at these indices is equal to the target sum x. Args: n: integer, length of the list x: integer, target sum arr: list of integers Returns: A string \\"YES\\" followed by indices i and j (1-based) if such a pair exists, otherwise \\"NO\\". num_to_index = {} for index, num in enumerate(arr): complement = x - num if complement in num_to_index: return f\\"YES {num_to_index[complement] + 1} {index + 1}\\" num_to_index[num] = index return \\"NO\\" # Example usage if __name__ == \\"__main__\\": n = 5 x = 10 arr = [1, 2, 3, 7, 8] print(find_pair_with_sum(n, x, arr)) # Expected \\"YES 3 4\\""},{"question":"You are given a list of integers. Your task is to determine if there are any three distinct elements in the list that sum up to a given target value. The first line of input contains two integers n and k (3 ≤ n ≤ 500, -10^9 ≤ k ≤ 10^9) — the number of elements in the list and the target sum, respectively. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the list. If there are such three elements which sum up to k, print \\"YES\\" and the three elements. Otherwise, print \\"NO\\". If there are multiple solutions, print any of them. Example: ``` Input: 5 10 1 2 3 4 5 Output: YES 1 4 5 Input: 4 20 5 1 12 -4 Output: NO ```","solution":"def find_three_elements_sum_to_k(n, k, arr): This function finds if there are three distinct elements in the list that sum up to the given target k. If such three elements exist, it returns \\"YES\\" followed by the elements. Otherwise, it returns \\"NO\\". arr.sort() for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == k: return \\"YES\\", arr[i], arr[left], arr[right] elif current_sum < k: left += 1 else: right -= 1 return \\"NO\\","},{"question":"Vera likes to order souvenirs from different countries. One day, she decided to organize them in a special way on her shelf. Vera\'s shelf is divided into sections, and each section can hold a certain number of souvenirs. She wants to distribute her souvenirs in such a way that the difference in the number of souvenirs between the most crowded section and the least crowded section is minimized. Vera has a total of `n` souvenirs and her shelf has `s` sections. Vera can only distribute her souvenirs in the order she received them, meaning she can\'t rearrange the souvenirs themselves. Let\'s say Vera places some of her souvenirs in section 1, then in section 2, and so on until section `s`. If she runs out of sections before placing all her souvenirs, she starts again from section 1 until all souvenirs are distributed. Given the constraints of her shelf and the number of souvenirs, help Vera distribute the souvenirs as evenly as possible. # Input The first line contains two integers `n` and `s` (1 ≤ n, s ≤ 10^5) — the number of souvenirs and the number of sections on Vera\'s shelf. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^4) — the sizes of Vera\'s souvenirs in the order she received them. # Output Print a single integer — the minimized difference in the number of souvenirs between the most crowded section and the least crowded section after distributing all the souvenirs. # Example Input ``` 5 3 1 2 3 4 5 ``` Output ``` 1 ``` Explanation Vera distributes her souvenirs in sections as follows: - Section 1: 1, 4 (2 souvenirs) - Section 2: 2, 5 (2 souvenirs) - Section 3: 3 (1 souvenir) The difference between the most crowded section (2 souvenirs) and the least crowded section (1 souvenir) is 1. # Note The aim is to ensure the most even distribution possible so that the difference in the number of souvenirs between the most and least crowded sections is minimized.","solution":"def minimized_difference(n, s, souvenirs): Distribute the souvenirs into sections such that the difference in the number of souvenirs between the most crowded section and the least crowded section is minimized. Args: n (int): Number of souvenirs. s (int): Number of sections. souvenirs (list): List of souvenir sizes. Returns: int: The minimized difference in the number of souvenirs. # Count how many souvenirs go in each section section_counts = [0] * s for i in range(n): section_counts[i % s] += 1 # Difference between the most and least crowded sections return max(section_counts) - min(section_counts) # Example usage: # n = 5, s = 3, souvenirs = [1, 2, 3, 4, 5] # Output: 1"},{"question":"Anna is organizing a relay race event for a group of her friends. There are n participants lined up in a row, and each participant will hand over the relay baton to the next participant. Anna wants to make sure that the relay process is as smooth as possible. Each participant takes a certain amount of time to pass the baton to the next participant. However, the time each participant takes depends on their current energy level. Initially, the participants have energy levels e_i for all 1 le i le n. When participant i passes the baton to participant i+1, the time taken is equal to the current energy level of participant i minus the energy level of participant i+1. If this value is negative or zero, then it takes zero seconds to pass the baton. Anna wants to calculate the total time taken for all participants to pass the baton from the first to the last. In the first line, you are given an integer n (1 le n le 100,000) — the number of participants. In the next line, you are given n integers e_1, e_2, ldots, e_n (1 le e_i le 10^9) — the energy levels of the participants in order. Print the total time taken to pass the baton from the first participant to the last. # Example Input: ``` 5 5 3 4 2 1 ``` Output: ``` 10 ``` Explanation: - Participant 1 passes to Participant 2: time taken = max(5 - 3, 0) = 2 - Participant 2 passes to Participant 3: time taken = max(3 - 4, 0) = 0 - Participant 3 passes to Participant 4: time taken = max(4 - 2, 0) = 2 - Participant 4 passes to Participant 5: time taken = max(2 - 1, 0) = 1 Total time taken = 2 + 0 + 2 + 1 = 5","solution":"def total_time_to_pass_baton(n, energy_levels): total_time = 0 for i in range(n - 1): time_taken = max(energy_levels[i] - energy_levels[i + 1], 0) total_time += time_taken return total_time # Example usage: n = 5 energy_levels = [5, 3, 4, 2, 1] print(total_time_to_pass_baton(n, energy_levels)) # Output: 5"},{"question":"Pablo is a game enthusiast who loves experimenting with different game mechanics. Recently, he is trying to create a new game involving moving pieces on a grid. The game board is represented by an n times m grid, where each cell is either passable or impassable. The initial position of a piece is given, and the goal is to move the piece to the target position. However, some cells are impassable and cannot be traversed. You are to determine the minimum number of moves required to move the piece from the initial position to the target position. The piece can move up, down, left, or right, but cannot move diagonally. A move consists of moving the piece from its current cell to one of the adjacent cells. Input format: - The first line contains two integers n and m (1 le n, m le 1000) – the dimensions of the grid. - The second line contains two integers sx and sy (1 le sx le n, 1 le sy le m) – the initial position of the piece. - The third line contains two integers tx and ty (1 le tx le n, 1 le ty le m) – the target position of the piece. - The next n lines each contain m characters, where each character is either \'.\' (denoting a passable cell) or \'#\' (denoting an impassable cell). Output format: - Print a single integer representing the minimum number of moves required for the piece to reach the target position. If it is impossible to reach the target position, print -1. Example: Input: ``` 5 5 1 1 5 5 ..... .#. ..... .#. ..... ``` Output: ``` 8 ``` Explanation: The piece can move from (1, 1) to (1, 2), then to (1, 3), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5) in exactly 8 moves.","solution":"from collections import deque def min_moves(n, m, sx, sy, tx, ty, grid): Returns the minimum number of moves required to move the piece from (sx, sy) to (tx, ty) on the grid, or -1 if it is impossible. # Convert 1-indexed to 0-indexed coordinates sx -= 1 sy -= 1 tx -= 1 ty -= 1 # Directions for up, down, left, right moves directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue: (x, y, distance) queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() # If we\'ve reached the target position if (x, y) == (tx, ty): return dist # Explore all possible moves from the current position for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If target position is not reachable return -1 # Example usage: # n, m = 5, 5 # sx, sy = 1, 1 # tx, ty = 5, 5 # grid = [ # \\".....\\", # \\".#.\\", # \\".....\\", # \\".#.\\", # \\".....\\", # ] # print(min_moves(n, m, sx, sy, tx, ty, grid)) # Output: 8"},{"question":"In a magical forest, there were n enchanted trees. Each tree has a certain amount of magic power, represented as an integer. The trees are arranged in a straight line, and each tree can transfer some of its magic to its adjacent trees. The transfer rules are as follows: - A tree can transfer a portion of its magic to its left adjacent tree. - A tree can also transfer a portion of its magic to its right adjacent tree. The goal is to determine the maximum possible sum of the magic powers of a contiguous subarray of trees after performing a series of transfer operations. Each tree can transfer any non-negative amount of its magic to its neighbors, but the total magic power in the entire line of trees remains the same. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of trees. The second line contains n integers, a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the magic power of each tree. Output a single integer — the maximum possible sum of the magic powers of a contiguous subarray after performing the transfer operations. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 15 ``` Input: ``` 4 2 1 4 3 ``` Output: ``` 10 ```","solution":"def max_magic_sum(n, magic_powers): Returns the maximum possible sum of the magic powers of a contiguous subarray after performing the transfer operations. max_sum = current_sum = magic_powers[0] for i in range(1, n): current_sum = max(magic_powers[i], current_sum + magic_powers[i]) max_sum = max(max_sum, current_sum) return max_sum # Example usage: # n = 5 # magic_powers = [1, 2, 3, 4, 5] # print(max_magic_sum(n, magic_powers)) # Output: 15"},{"question":"You are given a binary matrix with dimensions n times m, where each cell contains either a 0 or a 1. The task is to find the maximum size of a square sub-matrix that contains only 1\'s. The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns of the matrix. Each of the next n lines contains m integers (either 0 or 1) representing the matrix. Print a single integer — the maximum size of a square sub-matrix that contains only 1\'s. # Example Input: ``` 4 5 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 ``` Output: ``` 3 ``` # Explanation: In the provided example, the maximum size of a square sub-matrix that contains only 1\'s is 3x3.","solution":"def max_square_submatrix(matrix, n, m): Return the size of the largest square sub-matrix containing only 1\'s in an n x m binary matrix. # Create a DP table initialized to 0 dp = [[0] * m for _ in range(n)] max_size = 0 # Fill dp table while keeping track of the maximum square size for i in range(n): for j in range(m): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"You are given an integer array a_1, a_2, ldots, a_n. Let\'s define the sum of some subarray a_l, a_{l + 1}, ldots, a_r as a_l + a_{l + 1} + ldots + a_r. We want to find the size of the smallest subarray with a sum greater than or equal to a given integer s. The first line contains two integers n and s (1 le n le 2 cdot 10^5, 1 le s le 10^9) — the length of the array and the target sum. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^5). Output the size of the smallest subarray with a sum greater than or equal to s. If there is no such subarray, print -1. Example: Input: ``` 10 15 1 2 3 4 5 6 7 8 9 10 ``` Output: ``` 2 ``` Explanation: In the first test case, the subarrays with sum greater than or equal to 15 are: [8, 9], [9, 10], [7, 8, 9], etc. The smallest subarray with the desired property is [8, 9] (or [9, 10]) which has a length of 2. Hence, the output is 2. In the second test case, the subarray [15] (single element) meets the condition with length 1. Hence, the output is 1.","solution":"def min_subarray_length(n, s, array): Returns the length of the smallest subarray with a sum greater than or equal to s. If no such subarray exists, returns -1. left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += array[right] while current_sum >= s: min_length = min(min_length, right - left + 1) current_sum -= array[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given an array of n integers and a positive integer k. You need to determine the k-th largest sum of any contiguous subarray of the given array. Formally, for an array A of length n, its contiguous subarrays are defined as A[i:j] for all 1 ≤ i ≤ j ≤ n. From the sums of all such subarrays, you need to identify the k-th largest sum. For example, for the array [3, -2, 4, -1], the sums of all contiguous subarrays are: - [3] -> 3 - [3, -2] -> 1 - [3, -2, 4] -> 5 - [3, -2, 4, -1] -> 4 - [-2] -> -2 - [-2, 4] -> 2 - [-2, 4, -1] -> 1 - [4] -> 4 - [4, -1] -> 3 - [-1] -> -1 Sorted in descending order, the sums are: [5, 4, 4, 3, 3, 2, 1, 1, -1, -2]. If k=3, the 3rd largest sum will be 4. The first line of input contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ (n(n+1))/2) where n is the number of integers in the array, and k is the 1-based index of the desired largest sum. The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109), the elements of the array. Output the k-th largest sum of any contiguous subarray of the given array. If there is no such k-th largest sum, output -1. Example: Input: 4 3 3 -2 4 -1 Output: 4","solution":"import heapq def kth_largest_sum(arr, k): Returns the k-th largest sum of any contiguous subarray of the given array. n = len(arr) min_heap = [] # Calculate all subarray sums and use a min heap to maintain the top k largest sums. for start in range(n): current_sum = 0 for end in range(start, n): current_sum += arr[end] if len(min_heap) < k: heapq.heappush(min_heap, current_sum) else: if current_sum > min_heap[0]: heapq.heappushpop(min_heap, current_sum) # The root of the min heap is the k-th largest sum. if len(min_heap) == k: return min_heap[0] else: return -1"},{"question":"George is an avid climber, and he decided to chart a route through the mountains using a grid map. Each cell in the grid represents a different part of the mountain, with various altitudes. George\'s goal is to find the highest peak in the grid while also identifying all cells connected to the peak that are of the same altitude. Two cells are considered connected if they share an edge. Given an n times m grid of integers where each integer represents the altitude of that part of the mountain, determine the size of the largest connected region with the peak altitude. The first line contains two integers, n and m (1 leq n, m leq 1000), representing the number of rows and columns in the grid, respectively. The following n lines each contain m integers, h_{ij} (0 leq h_{ij} leq 10^6), which represent the altitude at cell (i, j). Print a single integer that represents the size of the largest connected region of cells that share the peak altitude. # Example **Input:** ``` 3 3 1 2 2 3 3 2 2 3 3 ``` **Output:** ``` 4 ``` # Explanation In the example above, the highest peak altitude in the grid is 3. The largest connected region of cells with altitude 3 includes the cells (1, 1), (2, 2), (2, 1), and (3, 2), so the output is 4.","solution":"def find_largest_peak_region(n, m, grid): from collections import deque def bfs(start_i, start_j, peak_altitude): q = deque([(start_i, start_j)]) visited.add((start_i, start_j)) region_size = 0 while q: i, j = q.popleft() region_size += 1 for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and (ni, nj) not in visited and grid[ni][nj] == peak_altitude: visited.add((ni, nj)) q.append((ni, nj)) return region_size # 1. Find the highest peak altitude. max_altitude = max(max(row) for row in grid) # 2. Find the largest connected region with the peak altitude. max_region_size = 0 visited = set() for i in range(n): for j in range(m): if grid[i][j] == max_altitude and (i, j) not in visited: region_size = bfs(i, j, max_altitude) max_region_size = max(max_region_size, region_size) return max_region_size def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(map(int, lines[i + 1].split())) for i in range(n)] return n, m, grid def main(input_str): n, m, grid = parse_input(input_str) return str(find_largest_peak_region(n, m, grid))"},{"question":"Aria loves solving puzzles with numbers and recently she got intrigued by a sequence transformation puzzle. She has a sequence of integers of length `n` and she needs to transform it into another sequence with unique elements. The goal is to transform the sequence such that the absolute difference between any two consecutive elements in the new sequence is minimized. Your task is to help Aria by writing a function that transforms the sequence into a new sequence satisfying the above conditions. If there are multiple sequences possible, you can output any one of them. # Input The first line of input contains a single integer `n` (1 leq n leq 10^5). The second line contains `n` integers `a_1, a_2, ldots, a_n` (1 leq a_i leq 10^9). # Output Output a single line containing `n` integers - the transformed sequence. # Explanation For every integer in the input sequence, pick a distinct integer as close as possible to it that was not already picked for any previous element. The resulting sequence should minimize the difference between any two consecutive elements. # Example Input: ``` 5 5 3 8 6 2 ``` Output: ``` 5 4 6 7 3 ``` In the output sequence, the differences between consecutive elements are minimized. The order and exact values may vary as long as the conditions are met. Note: The sequences in the example are for illustrative purposes, and actual output may vary based on implementation.","solution":"def transform_sequence(n, sequence): Transforms the input sequence into a new sequence with unique elements while minimizing the differences between consecutive elements. Args: n : int : length of sequence sequence : list of int : input sequence Returns: new_sequence : list of int : transformed sequence with unique elements sorted_sequence = sorted(sequence) result = [] unique_elements = set() for num in sorted_sequence: # Find the nearest available unique number candidate = num while candidate in unique_elements: candidate += 1 result.append(candidate) unique_elements.add(candidate) return result"},{"question":"To help keep traffic flow smooth, a city planner is working on a pedestrian crossing signal pattern for an intersection where three roads meet. Each road has a pedestrian signal that can show either \\"Walk\\" (W) or \\"Don\'t Walk\\" (D). A pattern is considered safe if no two pedestrian signals show \\"Walk\\" at the same time. Given an integer n, representing the length of the pattern, and a string pattern of length n consisting of \\"W\\" and \\"D\\" characters, determine if the provided pattern is safe. If the pattern is not safe, find the minimum number of changes required to make the pattern safe. # Input - The first line contains an integer n (1 ≤ n ≤ 100), the length of the pattern. - The second line contains a string pattern of length n consisting only of characters \'W\' and \'D\'. # Output - If the pattern is already safe, print 0. - Otherwise, print the minimum number of changes required to make the pattern safe. # Example Input: ``` 6 WDWDDD ``` Output: ``` 0 ``` Input: ``` 5 WWDWW ``` Output: ``` 1 ``` # Explanation In the first example, the pattern is already safe because there is no point in time when more than one pedestrian signal shows \\"Walk\\". In the second example, we can change one of the \'W\' characters to \'D\' to make the pattern safe. For instance, by changing the third character to \'D\', resulting in \\"WDDWW\\". Thus, the minimum number of changes required is 1.","solution":"def is_safe_pattern(pattern): Determines if the pedestrian crossing signal pattern is safe and finds the minimum number of changes required to make the pattern safe. Args: pattern (str): A string of length n consisting of \'W\' and \'D\' characters. Returns: int: 0 if the pattern is safe, otherwise the minimum number of changes required. # Counting consecutive \'W\'s consecutive_walks = [c == \'W\' for c in pattern] # If two consecutive \'W\'s are found, pattern is not safe. for i in range(len(consecutive_walks) - 1): if consecutive_walks[i] and consecutive_walks[i + 1]: return 1 return 0"},{"question":"Sara loves solving puzzles that involve rearranging letters. She has a puzzle that requires her to determine if two strings can be made anagrams of each other with at most one swap. Two strings are anagrams if they contain the same characters with the same frequencies but possibly in different orders. Write a function to help Sara determine if two strings can be made anagrams of each other with at most one swap. The input consists of: - Two strings s1 and s2 (1 ≤ |s1|, |s2| ≤ 10^5), which contain only lowercase English letters. The function should return \\"YES\\" if the two strings can be made anagrams by at most one swap, otherwise, return \\"NO\\". Example: - Input 1: \\"abcd\\", \\"abdc\\" - Output 1: \\"YES\\" - Input 2: \\"abcd\\", \\"abdd\\" - Output 2: \\"NO\\" Note: - In Input 1, swapping characters \'c\' and \'d\' in \\"abdc\\" will result in \\"abcd\\", making the two strings anagrams. - In Input 2, even with one swap, \\"abcd\\" cannot be rearranged to match \\"abdd\\".","solution":"def can_be_anagrams_by_one_swap(s1, s2): Returns \\"YES\\" if s1 and s2 can be made anagrams with at most one swap, otherwise \\"NO\\". if len(s1) != len(s2): return \\"NO\\" # Check if they already are anagrams if sorted(s1) != sorted(s2): return \\"NO\\" # Identify the mismatched character positions mismatches = [] for i in range(len(s1)): if s1[i] != s2[i]: mismatches.append(i) # If there are no mismatches, they are already anagrams if len(mismatches) == 0: return \\"YES\\" elif len(mismatches) == 2: # Check if swapping these two mismatched indices would make them equal i, j = mismatches if s1[i] == s2[j] and s1[j] == s2[i]: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers where each element represents the height of a building. You want to jump from one building to another such that the height difference between the two buildings is at most `k` units. You can start your jump from any building. Find the maximum number of buildings you can visit, starting from any building, such that all jumps meet the height difference restriction. The first line of input contains two integers `n` and `k` (1 ≤ n ≤ 100, 1 ≤ k ≤ 50) — the number of buildings and the maximum acceptable height difference for a valid jump. The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 1000) representing the heights of the buildings. Output a single integer — the maximum number of buildings you can visit starting from any building while adhering to the height difference restriction. Example: Input: 6 2 1 3 2 5 4 7 Output: 4","solution":"def max_buildings_visited(n, k, heights): # Using Dynamic Programming to keep track of the maximum buildings that can be visited dp = [1] * n # Each building initially counts as one visit # Iterate over each building for i in range(n): # Compare with every other previous building for j in range(i): if abs(heights[i] - heights[j]) <= k: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Zara loves playing with strings and often tries different ways to manipulate them. She recently came across the concept of \\"valid palindrome\\" strings which she found intriguing. A \\"valid palindrome\\" string is one where, apart from being a palindrome, the substring formed from the first half can be transformed into the substring formed from the second half by changing at most one character. Given a string s of length n (1 le n le 10^5), determine if it is possible to transform it into a valid palindrome by changing at most one character. Return \\"YES\\" if it is possible, otherwise return \\"NO\\". For the input, you will be given multiple test cases. The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each of the following t lines contains a string s. Print \\"YES\\" (in any case) if the string can be transformed into a valid palindrome by changing at most one character, or \\"NO\\" otherwise. # Sample Input ``` 4 abca abccba abcdef a ``` # Sample Output ``` YES YES NO YES ``` # Explanation In the first case, changing the last character \'a\' to \'b\' makes the string \\"abcb\\", which is a valid palindrome. In the second case, the input is already a valid palindrome since changing the middle characters does not affect the result. In the third case, no single change can make \\"abcdef\\" a palindrome. In the fourth case, the string consists of a single character, which is trivially a valid palindrome.","solution":"def can_be_valid_palindrome(s): def is_palindrome(s): return s == s[::-1] n = len(s) if is_palindrome(s): return \\"YES\\" left, right = 0, n - 1 while left < right: if s[left] != s[right]: # Check by removing one mismatch and the rest being palindrome s1 = s[:left] + s[left+1:] s2 = s[:right] + s[right+1:] if is_palindrome(s1) or is_palindrome(s2): return \\"YES\\" return \\"NO\\" left += 1 right -= 1 return \\"YES\\" def valid_palindrome_cases(t, cases): results = [] for s in cases: results.append(can_be_valid_palindrome(s)) return results"},{"question":"You are tasked with setting up a team-building exercise for employees in a large company. The exercise takes place on a rectangular field, represented as an n × m grid. Some cells in this grid contain hurdles that employees cannot cross, while others are passable. Each employee starts from a specific cell and needs to reach a designated target cell. The goal is to determine the shortest path for each employee from their starting position to the target position, avoiding hurdles. The grid is provided as an n × m character matrix, where \'#\' denotes a hurdle, and \'.\' denotes a passable cell. You will also be given q queries, each consisting of two pairs of coordinates: the starting position (sx, sy) and the target position (tx, ty). Write a program to determine the shortest path for each query. If a path does not exist, return -1 for that query. Input format: - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000). - The next n lines each contain m characters (either \'.\' or \'#\'). - The next line contains a single integer q (1 ≤ q ≤ 1000). - The next q lines each contain four space-separated integers sx, sy, tx, and ty (1 ≤ sx, sy, tx, ty ≤ n, m). Output format: - For each query, print a single integer representing the length of the shortest path from (sx, sy) to (tx, ty). If the path does not exist, print -1. Example: Input: 5 5 ..... .#.#. ..... .#.#. ..... 3 1 1 5 5 2 2 4 4 1 5 5 1 Output: 8 -1 8 Note: - The coordinates are 1-based. - You can move up, down, left, and right from a cell but cannot move diagonally. - Plan to use Breadth-First Search (BFS) for pathfinding in the grid.","solution":"from collections import deque def bfs(grid, start, target): n, m = len(grid), len(grid[0]) queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y, dist = queue.popleft() if (x, y) == target: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 def shortest_path_in_grid(n, m, grid, queries): results = [] for sx, sy, tx, ty in queries: start = (sx - 1, sy - 1) target = (tx - 1, ty - 1) result = bfs(grid, start, target) results.append(result) return results"},{"question":"Alice wants to create an adjustable seating arrangement for a classroom. The classroom is a rectangular grid of size n × m, and each seat can be represented as an integer \'0\' or \'1\', where \'0\' represents an empty seat and \'1\' represents an occupied seat. Additionally, Alice can perform the following operation multiple times to change the seating arrangement: - Choose two cells in the grid (i1, j1) and (i2, j2) such that (i1, j1) and (i2, j2) form a rectangle with sides parallel to the grid lines, and swap the states of all cells in this rectangle. For instance, if cell (i1, j1) was \'0\' and cell (i2, j2) was \'1\', they are swapped to \'1\' and \'0\', respectively. Alice wants to know if she can convert the initial seating arrangement to the final desired arrangement using any number of these operations. The problem can be stated as: Given an initial and a desired seating arrangement, determine whether it is possible to obtain the desired arrangement from the initial arrangement using the described operation. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 50) - the number of rows and columns of the grid. - The next n lines contain m integers each (either \'0\' or \'1\'), representing the initial seating arrangement. - The following n lines contain m integers each (either \'0\' or \'1\'), representing the desired seating arrangement. Output: - Output \\"YES\\" if it is possible to convert the initial arrangement to the desired arrangement. Otherwise, output \\"NO\\". Example: Input: 4 4 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 Output: YES","solution":"def can_convert_initial_to_final(n, m, initial, final): Given an initial seating arrangement and a final seating arrangement, return whether it is possible to convert the initial arrangement to the final arrangement using the described operation. for row in range(n): if sum(initial[row]) % 2 != sum(final[row]) % 2: return \\"NO\\" for col in range(m): col_sum_initial = sum(initial[row][col] for row in range(n)) col_sum_final = sum(final[row][col] for row in range(n)) if col_sum_initial % 2 != col_sum_final % 2: return \\"NO\\" return \\"YES\\" # Example usage: # n = 4 # m = 4 # initial = [ # [0, 1, 0, 1], # [1, 0, 1, 0], # [0, 1, 0, 1], # [1, 0, 1, 0] # ] # final = [ # [1, 0, 1, 0], # [0, 1, 0, 1], # [1, 0, 1, 0], # [0, 1, 0, 1] # ] # print(can_convert_initial_to_final(n, m, initial, final)) # Output should be \\"YES\\""},{"question":"You are given a list of `n` integers and an integer `m`. Your task is to find the length of the longest contiguous subarray such that the sum of its elements is exactly `m`. If there\'s no such subarray, return `-1`. # Input - The first line contains two integers `n` and `m` (`1 <= n <= 200000` and `|m| <= 10^9`). - The second line contains `n` integers representing the elements of the array. Each integer is between `-10^9` and `10^9`. # Output - Print a single integer representing the length of the longest contiguous subarray whose sum is exactly `m`. If there is no such subarray, print `-1`. # Example Input ``` 5 5 1 2 3 4 5 ``` Output ``` 2 ``` Explanation The subarray `[2, 3]` sums to `5` and is the longest such subarray in the given array.","solution":"def longest_subarray_with_sum(arr, m): Returns the length of the longest contiguous subarray whose sum is exactly m. If no such subarray exists, returns -1. sum_indices = {0: -1} curr_sum = 0 max_len = -1 for i, num in enumerate(arr): curr_sum += num if (curr_sum - m) in sum_indices: max_len = max(max_len, i - sum_indices[curr_sum - m]) if curr_sum not in sum_indices: sum_indices[curr_sum] = i return max_len"},{"question":"You are given an array of integers where every element appears exactly three times, except for one element which appears exactly once. Find the element that appears only once. You should provide a solution with a linear runtime complexity and use only constant extra space. The first line contains a single integer n (4 le n le 3 cdot 10^5) —— the number of integers in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). Print the single integer that appears only once in the array. **Example:** ``` Input: 10 5 3 5 3 5 3 8 7 7 7 Output: 8 ``` Explanation: In the example above, 5 and 3 each appear three times, 7 also appears three times. The number 8 appears only once, which is the desired output.","solution":"def single_number(nums): This function takes a list of integers where each integer appears three times except one. It returns the integer that appears only once. ones, twos = 0, 0 for num in nums: twos |= ones & num ones ^= num common_mask = ~(ones & twos) ones &= common_mask twos &= common_mask return ones"},{"question":"Archaeologists have discovered an ancient device that can perform arithmetic operations in a unique way. They decided to digitize its functionality for their research. The device can process a sequence of integers and output a specific value based on a simple rule: It repeatedly removes pairs of adjacent elements from the sequence and replaces them with their sum. This process is repeated until only one integer remains. For instance, given the sequence [1, 2, 3, 4], it proceeds as follows: 1. [1, 2, 3, 4] → [3, 3, 4] → [6, 4] → [10] 2. The resulting single integer is 10. Your task is to write a function `ancient_device` that will take a list of integers as input and return the final integer obtained after applying the device’s rule until one integer remains. The first line of the input contains an integer n (1 ≤ n ≤ 100), which is the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6), representing the sequence. Print a single integer — the final result after repeatedly applying the device’s rule. Example: Input: 4 1 2 3 4 Output: 10 Each input will always be such that it is possible to apply the device’s rule until a single integer remains. The process is deterministic, meaning for any given input sequence, the result will always be the same.","solution":"def ancient_device(sequence): Given a sequence of integers, repeatedly replace pairs of adjacent elements with their sum until only one integer remains, and return that integer. while len(sequence) > 1: new_sequence = [] i = 0 while i < len(sequence) - 1: new_sequence.append(sequence[i] + sequence[i + 1]) i += 2 if i < len(sequence): new_sequence.append(sequence[-1]) sequence = new_sequence return sequence[0]"},{"question":"Evelyn is working on a project that requires her to parse and analyze a large document consisting of various sections, subsections, and paragraphs. She needs a program to help her extract specific information based on a given criterion. The document can be represented as a nested structure of sections and paragraphs: A document consists of: - Sections. - Each section has a title (a string). - Each section can contain paragraphs (strings) or subsections. - Subsections follow the same structure as sections. Given a document, Evelyn wants to find and extract all paragraphs under any section or subsection whose title contains a specific keyword. Your task is to write a function `extract_paragraphs_by_keyword(document, keyword)` that takes in: - `document`: a list representing the document structure. Each item in the list can represent a section with its subsections and paragraphs. - `keyword`: a string representing the keyword to search for in the title of sections and subsections. The function should return a list of all paragraphs (strings) under any section or subsection whose title contains the keyword. The document\'s structure and contents conform to the following rules: 1. Each section is represented as a dictionary with the keys \\"title\\" (a string), \\"paragraphs\\" (a list of strings), and \\"subsections\\" (a list of dictionaries representing subsections). 2. There can be an arbitrary level of nesting with sections and subsections. # Constraints - The document will contain at most 100 sections or subsections at each level. - Each section or subsection title and each paragraph can have a maximum length of 200 characters. # Example ```python document = [ { \\"title\\": \\"Introduction\\", \\"paragraphs\\": [\\"Welcome to the document.\\", \\"This is the introduction section.\\"], \\"subsections\\": [] }, { \\"title\\": \\"Methods\\", \\"paragraphs\\": [\\"This section describes the methods used.\\", \\"We used various techniques.\\"], \\"subsections\\": [ { \\"title\\": \\"Data Collection\\", \\"paragraphs\\": [\\"Data was collected from various sources.\\"], \\"subsections\\": [] }, { \\"title\\": \\"Data Analysis\\", \\"paragraphs\\": [\\"The collected data was analyzed using statistical tools.\\"], \\"subsections\\": [] } ] }, { \\"title\\": \\"Results\\", \\"paragraphs\\": [\\"This section presents the results of the analysis.\\"], \\"subsections\\": [] } ] keyword = \\"Data\\" print(extract_paragraphs_by_keyword(document, keyword)) # Output: # [\'Data was collected from various sources.\', \'The collected data was analyzed using statistical tools.\'] ``` Write a solution to implement the function `extract_paragraphs_by_keyword(document, keyword)`.","solution":"def extract_paragraphs_by_keyword(document, keyword): Extracts all paragraphs under any section or subsection whose title contains the keyword. :param document: A list representing the document structure. :param keyword: A string representing the keyword to search for in the title. :return: A list of paragraphs under sections/subsections with the keyword in the title. def extract_from_section(section, keyword): paragraphs = [] if keyword.lower() in section[\\"title\\"].lower(): paragraphs.extend(section[\\"paragraphs\\"]) for subsection in section[\\"subsections\\"]: paragraphs.extend(extract_from_section(subsection, keyword)) return paragraphs result = [] for section in document: result.extend(extract_from_section(section, keyword)) return result"},{"question":"A company wants to optimize the utilization of its conference rooms. Each conference room is equipped with a certain number of seats, and each meeting has a specific number of attendees. The goal is to assign each meeting to a conference room that meets the following criteria: 1. The conference room must have enough seats to accommodate all the attendees of the meeting. 2. Among all the conference rooms that satisfy the first criterion, the company prefers to use the smallest one to minimize wasted space. Given a list of available conference rooms and their respective seat counts, and a list of meetings with the required attendees count, determine the optimal room assignment for each meeting. If a meeting cannot be assigned to any conference room, denote it with `-1`. # Input Format: The first line contains two integers `r` and `m` (1 ≤ r, m ≤ 100), where `r` is the number of available conference rooms, and `m` is the number of meetings. The second line contains `r` integers representing the number of seats in each conference room. The third line contains `m` integers representing the number of attendees for each meeting. # Output Format: Output `m` integers separated by spaces. Each integer represents the index (1-based) of the conference room assigned to the corresponding meeting or `-1` if no suitable conference room is found. # Example: Input: ``` 3 4 10 20 15 5 10 12 25 ``` Output: ``` 1 1 3 -1 ``` Explanation: - The first meeting requires 5 seats, so it can be assigned to any room. The smallest available room is the first one (10 seats). - The second meeting requires 10 seats, so it can be assigned to the first room (10 seats). - The third meeting requires 12 seats, so it can be assigned to the third room (15 seats). - The fourth meeting requires 25 seats, which exceeds the capacity of any room, so it is assigned `-1`. **Note:** Each room can be used by multiple meetings as long as the criteria are met.","solution":"def assign_rooms(r, m, room_seats, meetings): result = [] for attendees in meetings: optimal_room = -1 min_seats = float(\'inf\') for i, seats in enumerate(room_seats): if seats >= attendees and seats < min_seats: min_seats = seats optimal_room = i + 1 result.append(optimal_room) return result"},{"question":"A company is organizing a sequence of team-building activities over several days. Each activity is either an indoor activity (represented by \'I\') or an outdoor activity (represented by \'O\'). The company realizes that if certain patterns of activities occur frequently, it adversely affects employee morale. Therefore, they want to transform the activity sequence such that the number of occurrences of these patterns is minimized while maintaining the total number of indoor and outdoor activities. Given the initial sequence of activities and a set of bad patterns that need to be minimized, rearrange the sequence to achieve this goal. The first line of input contains the initial sequence of activities, s, which is a string consisting of characters \'I\' (for indoor) and \'O\' (for outdoor) with a length of 1 ≤ |s| ≤ 100,000. The second line contains an integer p (1 ≤ p ≤ 100), the number of bad patterns. The following p lines, each contain a bad pattern, where each pattern is a string consisting of \'I\' and \'O\' characters with a maximum length of 100. Print the rearranged sequence of activities with the minimum number of occurrences of any bad pattern. If multiple sequences are possible, print any of them. **Example:** Input: ``` IIOIOO 2 IOI IOO ``` Output: ``` IIIIOO ``` Explanation: Rearranging the sequence to \\"IIIIOO\\" ensures that the bad patterns \\"IOI\\" and \\"IOO\\" do not appear. Another valid output could be \\"IIOIOO\\", if we were solely to minimize but not completely avoid pattern occurrences; however, it should avoid as many as possible. If multiple configurations yield the same number of minimized patterns, any can be chosen.","solution":"def minimize_bad_patterns(s, bad_patterns): Function to rearrange the sequence of activities to minimize occurrences of bad patterns. Parameters: s (str): The initial sequence of activities. bad_patterns (List[str]): List of bad patterns to be minimized. Returns: str: The rearranged sequence. # Count the number of indoor and outdoor activities count_I = s.count(\'I\') count_O = s.count(\'O\') # Create the new sequence by arranging all \'I\'s followed by all \'O\'s new_sequence = \'I\' * count_I + \'O\' * count_O return new_sequence"},{"question":"Given an array of integers and a target sum, you need to determine the number of distinct pairs (a, b) in the array such that a + b equals the target sum. Each pair should be counted only once, and the order of the elements in the pair does not matter (i.e., (a, b) is considered identical to (b, a)). If no such pairs exist, return 0. The first line of the input consists of two integers, n and x (1 ≤ n ≤ 10^5, -10^9 ≤ x ≤ 10^9) – the number of elements in the array and the target sum. The second line contains n space-separated integers, representing the elements of the array (−10^9 ≤ a_i ≤ 10^9). Your task is to print a single integer, the number of distinct pairs whose sum is equal to the target sum. For example, consider the following input: ``` 6 8 1 2 3 4 5 6 ``` The output for this example would be: ``` 2 ``` There are two pairs that sum to 8: (2, 6) and (3, 5). Note that (6, 2) and (5, 3) are considered the same as (2, 6) and (3, 5).","solution":"def count_distinct_pairs(n, x, array): seen = {} pairs = set() for num in array: target = x - num if target in seen: pairs.add(tuple(sorted((num, target)))) seen[num] = True return len(pairs)"},{"question":"Tony loves collecting unique sets of objects. He has recently come across a set of objects, each with a specific type described by a non-negative integer. Tony wants to find the largest subset of these objects in which all the types are distinct. The input consists of a single line containing N integers a_1, a_2, dots, a_N (0 le a_i le 10^9), which represent the types of the objects. The output should be a single integer indicating the size of the largest subset with all unique types. # Input A single line with N integers representing the types of objects, separated by spaces (1 le N le 10^6). # Output Print a single integer representing the size of the largest subset with all unique types. Example # Input ``` 1 2 2 3 4 4 4 5 5 6 ``` # Output ``` 6 ``` In the example above, the largest subset with all unique types is {1, 2, 3, 4, 5, 6}, which has size 6.","solution":"def largest_unique_subset_size(objects): Returns the size of the largest subset with unique types. # Convert the list of objects to a set to remove duplicates unique_objects = set(objects) # The size of the set is the size of the largest subset with unique types return len(unique_objects)"},{"question":"Limak is a little bear who loves to play with strings. He recently learned about palindromes and decided to create his own game out of it. He has a string `s` of length `n` and he wants to find out how many substrings of `s` are palindromes. A substring is a contiguous sequence of characters within a string. A string is a palindrome if it reads the same forward and backward. For example, \\"abccba\\" is a palindrome, but \\"abc\\" is not. Limak needs your help to count the number of palindrome substrings in the string `s`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the string `s`. - The second line contains the string `s` of length `n`, consisting of lowercase Latin letters. # Output - Print a single integer — the number of palindrome substrings in the string. # Example **Input:** ``` 5 ababa ``` **Output:** ``` 9 ``` **Explanation:** The palindromic substrings are: - \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\" (all single characters) - \\"aba\\", \\"bab\\", \\"aba\\" (three substrings) - \\"ababa\\" (the whole string) Total: 9 palindromic substrings.","solution":"def count_palindromic_substrings(n, s): Returns the number of palindromic substrings in the string s. n: int - length of the string s s: str - input string count = 0 def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd-length palindromes (single center) expand_around_center(i, i) # Even-length palindromes (double center) expand_around_center(i, i + 1) return count"},{"question":"You are given a binary tree where each node contains an integer value. Your task is to determine whether this binary tree is a Binary Search Tree (BST) or not. A Binary Search Tree (BST) is defined as follows: - The left subtree of a node contains only nodes with values less than or equal to the node\'s value. - The right subtree of a node contains only nodes with values greater than the node\'s value. - Both the left and right subtrees must also be binary search trees. Write a function `isBST(root)` that takes the root node of the binary tree as an input and returns `True` if the binary tree is a BST, otherwise returns `False`. Input: - The root node of the binary tree. Output: - A boolean value `True` if the tree is a BST; otherwise `False`. Example: For the following binary tree: ``` 4 / 2 5 / 1 3 ``` The function `isBST` should return `True`. For the following binary tree: ``` 4 / 2 5 / 1 6 ``` The function `isBST` should return `False` because 6 is in the left subtree of 4 but is greater than 4. Note: Your solution should have a time complexity of O(n), where n is the number of nodes in the binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isBST(root): Determines if a binary tree is a binary search tree (BST). Args: root (TreeNode): The root node of the binary tree. Returns: True if the binary tree is a BST, otherwise False. def validate(node, low=float(\'-inf\'), high=float(\'inf\')): if not node: return True if node.val <= low or node.val >= high: return False return (validate(node.left, low, node.val) and validate(node.right, node.val, high)) return validate(root)"},{"question":"Given a grid of cells with dimensions `n x m`, each cell can either be walkable (represented by \'.\') or a wall (represented by \'#\'). You can move from any cell to its adjacent cells (left, right, up, down) if they are walkable. You start at the top-left cell (1,1) and need to reach the bottom-right cell (n,m). Write a function to determine the minimum number of moves required to reach the bottom-right cell from the top-left cell. If it is impossible to reach the bottom-right cell, return -1. The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next `n` lines contain `m` characters each (either \'.\' or \'#\') representing the grid. Print a single integer — the minimum number of moves required to reach the bottom-right cell from the top-left cell or -1 if there is no possible path. **Sample Input:** ``` 5 5 ..... .#.#. .#..# ... ..... ``` **Sample Output:** ``` 8 ``` In the sample, an optimal path could be: (1,1) → (1,2) → (1,3) → (1,4) → (2,4) → (3,4) → (4,4) → (5,4) → (5,5).","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): Returns the minimum number of moves required to reach the bottom-right cell from the top-left cell. If it\'s impossible to reach the bottom-right cell, returns -1. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(0, 0, 0)]) # stores (x_position, y_position, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a rectangular grid with dimensions m x n, where each cell of the grid can hold a zombie represented by a \'Z\' character or be empty represented by a \'.\' character. A zombie at position ((i,j)) can infect adjacent cells — top, down, left, and right — one hour after it appears. The goal is to determine how many hours (minimum) it will take to infect the entire grid. If it is impossible to infect the entire grid, return -1. Input: - The first line contains two integers m and n (1 le m, n le 1000) — the number of rows and columns of the grid. - The next m lines contain n characters each, representing the grid. Each character is either \'Z\' for a zombie or \'.\' for an empty cell. Output: - Print a single integer representing the minimum number of hours required to infect the entire grid or -1 if it\'s impossible. Example: Input: 3 3 .Z. ... Z.. Output: 2 Explanation: - At hour 1: ZZZ Z.Z ZZ. - At hour 2: ZZZ ZZZ ZZZ The entire grid is infected after 2 hours.","solution":"from collections import deque def min_hours_to_infect(grid): Given a grid with \'Z\' representing zombie and \'.\' representing an empty cell, returns the minimum number of hours required to infect the entire grid or -1 if it\'s impossible. m = len(grid) if m == 0: return -1 n = len(grid[0]) queue = deque() for i in range(m): for j in range(n): if grid[i][j] == \'Z\': queue.append((i, j, 0)) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] hours = 0 while queue: i, j, hours = queue.popleft() for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < m and 0 <= nj < n and grid[ni][nj] == \'.\': grid[ni][nj] = \'Z\' queue.append((ni, nj, hours + 1)) for row in grid: if \'.\' in row: return -1 return hours"},{"question":"You are given a string containing a sequence of lowercase English letters and a set of words. You need to determine if you can form each word in the set by deleting some (possibly zero) characters from the given string without rearranging the remaining characters. Given a string `s` and `n` words, return a list of boolean values indicating whether each word can be formed from the string `s`. The first line of the input contains a single integer `n` (1 ≤ n ≤ 1000) – the number of words. The second line contains the string `s` (1 ≤ |s| ≤ 1000) – the sequence of lowercase English letters. Then, the next `n` lines contain one word each, consisting of lowercase English letters. It\'s guaranteed that each word’s length is between 1 and 1000 inclusive. For each word, print `\\"YES\\"` if the word can be formed from the string `s` by deleting some characters without rearranging the remaining characters, otherwise print `\\"NO\\"`. # Input ``` 3 abpcplea apple monkey plea ``` # Output ``` YES NO YES ``` # Explanation - The word \\"apple\\" can be formed from the string \\"abpcplea\\", so the output is \\"YES\\". - The word \\"monkey\\" cannot be formed from the string \\"abpcplea\\", so the output is \\"NO\\". - The word \\"plea\\" can be formed from the string \\"abpcplea\\", so the output is \\"YES\\".","solution":"def can_form_words(n, s, words): def can_form_word(word): it = iter(s) return all(char in it for char in word) results = [] for word in words: if can_form_word(word): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Farmer John has a field divided into a grid of n rows and m columns. In each cell of the grid, a certain number of flowers are planted. Farmer John wants to surround a rectangular area of the field with a fence. The goal is to maximize the number of flowers enclosed within the fenced area. You are given a 2D array where each element represents the number of flowers in that cell. Your task is to determine the maximum number of flowers that can be enclosed by a rectangular area of any size. The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the grid. The next n lines contain m integers each, where each integer represents the number of flowers in a cell. Each cell will contain a non-negative integer not greater than 1000. Print a single integer — the maximum number of flowers that can be enclosed by a rectangular area. # Example **Input:** ``` 3 4 1 2 3 4 5 6 7 8 9 10 11 12 ``` **Output:** ``` 78 ``` In this example, the rectangular area covering the entire grid contains the maximum number of flowers: 78. # Note The solution involves finding the submatrix with the maximum sum. One possible approach is to use Kadane\'s algorithm for 2D arrays, where we apply Kadane\'s algorithm on different possible rectangular areas by modifying the boundaries of the grid.","solution":"def max_flowers(n, m, grid): # Helper function to find the maximum sum of a 1D array def max_sub_array(arr): max_sum = float(\'-inf\') current_sum = 0 for value in arr: current_sum += value if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum max_sum = float(\'-inf\') # For each possible pair of starting and ending columns, apply Kadane\'s on the row sums for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += grid[i][right] max_sum = max(max_sum, max_sub_array(temp)) return max_sum # Example usage; this would be called in place of input statement in real scenario # n, m = 3, 4 # grid = [ # [1, 2, 3, 4], # [5, 6, 7, 8], # [9, 10, 11, 12] # ] # print(max_flowers(n, m, grid)) # Output: 78"},{"question":"Given an array of integers, we define the sum of beauty of the arrays as follows: 1. A subarray is defined as any contiguous segment of the array. 2. The beauty of a subarray is defined as the maximum element in the subarray minus the minimum element in the subarray. You are to determine the sum of the beauty of all possible subarrays of the given array. The first line contains a single integer, n (1 ≤ n ≤ 2 * 10^5), the number of elements in the array. The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 10^6) — the elements of the array. Print a single integer — the sum of the beauty of all possible subarrays of the given array. **Example:** Input: ``` 3 1 2 3 ``` Output: ``` 4 ``` Explanation: The subarrays of [1, 2, 3] are [1], [2], [3], [1, 2], [2, 3], [1, 2, 3]. - The beauty of [1] is 1 - 1 = 0 - The beauty of [2] is 2 - 2 = 0 - The beauty of [3] is 3 - 3 = 0 - The beauty of [1, 2] is 2 - 1 = 1 - The beauty of [2, 3] is 3 - 2 = 1 - The beauty of [1, 2, 3] is 3 - 1 = 2 Sum of all beauties: 0 + 0 + 0 + 1 + 1 + 2 = 4","solution":"def sum_of_beauty(arr): Calculate the sum of beauty of all subarrays of the given array. Parameters: arr (list of int): List of integers representing the array Returns: int: Sum of beauty of all subarrays n = len(arr) total_beauty = 0 for i in range(n): min_so_far = arr[i] max_so_far = arr[i] for j in range(i, n): min_so_far = min(min_so_far, arr[j]) max_so_far = max(max_so_far, arr[j]) total_beauty += (max_so_far - min_so_far) return total_beauty # Example: # n = 3 # arr = [1, 2, 3] # The result should be 4"},{"question":"George has a lovely garden with many trees bearing tasty fruits. The garden is represented as a 2D grid with `n` rows and `m` columns. Each cell in the grid contains exactly one tree, and each tree can bear a certain number of fruits. George\'s friend, Alice, has decided to help him pick the fruits. However, Alice can only move in a zigzag manner from left to right in the first row, then from right to left in the second row, and so forth. She starts at the first cell in the first row and traverses each row until she reaches the last cell of the last row. Help George find the total number of fruits Alice can collect by moving in this zigzag pattern. # Input The first line of input contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`) — the number of rows and columns in the garden. Each of the next `n` lines contains `m` integers representing the number of fruits on the trees in each row (`0 ≤ fruits ≤ 1000`). # Output Print one integer — the total number of fruits Alice can collect. # Example Input ``` 3 4 3 2 1 7 4 0 6 3 5 8 2 9 ``` Output ``` 50 ``` # Explanation Alice collects fruits in the following order: - First row (left to right): `3 + 2 + 1 + 7 = 13` - Second row (right to left): `3 + 6 + 0 + 4 = 13` - Third row (left to right): `5 + 8 + 2 + 9 = 24` Thus, the total number of fruits collected is `13 + 13 + 24 = 50`.","solution":"def total_fruits_in_zigzag(n, m, garden): total_fruits = 0 for i in range(n): if i % 2 == 0: total_fruits += sum(garden[i]) else: total_fruits += sum(garden[i][::-1]) return total_fruits"},{"question":"You are given a matrix of size n x m consisting of non-negative integers. You want to find the maximum sum of elements in a submatrix of size p x q for given dimensions p and q. A submatrix is defined as a contiguous block of cells. The first line of the input contains three integers n, m, and t (1 ≤ n, m ≤ 1000, 1 ≤ t ≤ 10^5) — the number of rows, the number of columns, and the number of test cases. Each of the next t test cases contains two integers p and q (1 ≤ p ≤ n, 1 ≤ q ≤ m) followed by the n x m matrix. For each test case, print a single integer — the maximum sum of elements in a submatrix of size p x q. Example: ``` Input: 2 2 1 1 1 1 2 3 4 Output: 4 ``` Explanation: In the first test case, we have the matrix: ``` 1 2 3 4 ``` If we choose the submatrix of size 1x1, the maximum sum is 4.","solution":"def max_submatrix_sum(matrix, n, m, p, q): Given an n x m matrix and dimensions p x q, finds the maximum sum of elements in a submatrix of size p x q. max_sum = -float(\'inf\') # Precompute the sum of submatrix from (0,0) to (i, j) using a prefix sum array prefix_sum = [[0] * (m+1) for _ in range(n+1)] for i in range(1, n+1): for j in range(1, m+1): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Find the maximum sum of submatrix of size p x q for i in range(p, n+1): for j in range(q, m+1): total = prefix_sum[i][j] - prefix_sum[i-p][j] - prefix_sum[i][j-q] + prefix_sum[i-p][j-q] max_sum = max(max_sum, total) return max_sum def solve_problem(n, m, t, queries): results = [] for p, q, matrix in queries: result = max_submatrix_sum(matrix, n, m, p, q) results.append(result) return results"},{"question":"You are given two strings s1 and s2 of lengths n and m respectively. You need to determine the minimum number of operations required to convert s1 into s2. The allowable operations are: 1. Insert a character. 2. Remove a character. 3. Replace a character. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000). The second line contains the string s1. The third line contains the string s2. Output a single integer which is the minimum number of operations required to convert s1 into s2. In the first example, s1 = \\"kitten\\" and s2 = \\"sitting\\". One possible way to convert s1 into s2 is: 1. kitten → sitten (replace \'k\' with \'s\') 2. sitten → sittin (replace \'e\' with \'i\') 3. sittin → sitting (insert \'g\') In the second example, s1 = \\"horse\\" and s2 = \\"ros\\". One possible way to convert s1 into s2 is: 1. horse → rorse (replace \'h\' with \'r\') 2. rorse → rose (remove \'r\') 3. rose → ros (remove \'e\') Thus the minimum number of operations is 3 for both examples.","solution":"def min_operations_to_convert(s1, s2): Returns the minimum number of operations required to convert s1 into s2. Allowable operations are: insert, remove, and replace a character. n, m = len(s1), len(s2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j # If s1 is empty, we need j insertions. elif j == 0: dp[i][j] = i # If s2 is empty, we need i deletions. elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[n][m]"},{"question":"In a parallel universe, there is a unique game played with a bucket and balls. The bucket has a capacity of holding exactly `k` balls at any given time. A player has `n` balls, each with a distinct weight. The player can only add balls to the bucket or remove them from the bucket, but the bucket can never exceed its capacity of `k` balls. The game starts with an empty bucket, and the goal is to determine the maximum weight that can be achieved in the bucket. The player can perform a sequence of operations to achieve the maximum possible weight in the bucket. An operation is defined as either: 1. Add a ball to the bucket. 2. Remove a ball from the bucket. Given the constraints of the game, can you determine the maximum weight that can be held in the bucket at any point? # Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 1000) — the number of balls and the capacity of the bucket. - The second line contains `n` integers `w1, w2, ..., wn` (1 ≤ wi ≤ 10^4) — the weights of the balls. # Output - Print a single integer — the maximum weight that can be achieved in the bucket. # Example Input ``` 5 3 3 1 8 4 6 ``` Output ``` 18 ``` Explanation - The player can choose the 3 heaviest balls (8, 6, and 4) to achieve the maximum weight of 18. Craft an algorithm to solve this problem efficiently and ensure it meets the input constraints. # Note - The player can choose any sequence of balls to add to the bucket as long as it does not exceed the capacity `k`.","solution":"def max_bucket_weight(n, k, weights): Returns the maximum weight that can be held in the bucket. Parameters: n (int): number of balls. k (int): capacity of the bucket. weights (List[int]): weights of the balls. Returns: int: maximum weight. weights.sort(reverse=True) return sum(weights[:k])"},{"question":"Eva is an adventurer exploring a mystical grid-land. This grid-land is represented as a 2D grid of size n x m where each cell may either contain a treasure or be empty. Eva starts from the top-left corner of the grid (cell (1, 1)) and her goal is to reach the bottom-right corner of the grid (cell (n, m)). Eva can only move right or down from any cell. During her journey, she wants to collect as many treasures as possible. Each cell containing a treasure is denoted by 1, and an empty cell is denoted by 0. Your task is to help Eva find the path that allows her to collect the maximum number of treasures by the time she reaches the bottom-right corner. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 50) — the number of rows and columns of the grid. The next n lines each contain m space-separated integers, representing the grid. Each integer is either 0 (for an empty cell) or 1 (for a cell with a treasure). Output a single integer — the maximum number of treasures Eva can collect on her path from the top-left to the bottom-right corner of the grid. # Example Input: ``` 3 4 0 0 1 0 1 1 0 0 0 0 0 1 ``` Output: ``` 3 ``` Explanation: In the given grid, the path that maximizes the treasures collected is: (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (3,4). The maximum number of treasures collected along this path is 3. # Note: - Eva can only move right or down at each step. - Eva starts at the top-left corner and needs to reach the bottom-right corner. - Each cell\'s coordinates are represented in a 1-based index system.","solution":"def max_treasures(n, m, grid): # Initialize a dp table with 0s dp = [[0] * m for _ in range(n)] # Fill the dp table dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"John is a botanist who is conducting an experiment on a rare species of plant. Each plant in the experiment grows over a sequence of days. On each day, a plant can either grow a certain number of centimeters or lose a certain number of centimeters in height due to environmental factors. John keeps a record of the growth and shrinking of each plant over a series of days in an array. He wants to know the maximum height a plant can achieve at any point during this period. Given an array of integers representing the daily growth or shrinking of a plant over n days, determine the maximum height the plant reaches during the given period. The starting height of the plant is zero and the height cannot go below zero at any time. Write a program that takes the number of days n and an array of integers representing the daily changes in height and outputs the maximum height reached by the plant. The following scenario illustrates the input and output: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of days. The second line contains n space-separated integers a_1, a_2, ..., a_n (−1000 ≤ a_i ≤ 1000) — the daily changes in the plant\'s height. Output a single integer — the maximum height reached by the plant during the period. **Example:** Input: ``` 5 2 -1 3 -2 4 ``` Output: ``` 6 ``` **Explanation:** On the first day, the plant grows by 2 cm (height = 2). On the second day, it shrinks by 1 cm (height = 1). On the third day, it grows by 3 cm (height = 4). On the fourth day, it shrinks by 2 cm (height = 2). On the fifth day, it grows by 4 cm (height = 6). The maximum height achieved during this period is 6 cm.","solution":"def max_plant_height(n, daily_changes): Returns the maximum height that the plant reaches during the given period. Args: n: an integer, the number of days (1 ≤ n ≤ 1000) daily_changes: a list of integers, the daily changes in plant\'s height (−1000 ≤ a_i ≤ 1000) Returns: An integer representing the maximum height reached by the plant. height = 0 max_height = 0 for change in daily_changes: height += change if height < 0: height = 0 if height > max_height: max_height = height return max_height"},{"question":"Yulia is passionate about numeric sequences. One day, she finds herself fascinated by a special sequence called a \\"happy sequence.\\" A sequence of integers is called a happy sequence if it satisfies the following properties: 1. Every element in the sequence is a non-negative integer. 2. The first element of the sequence is always 0. 3. Every subsequent element is strictly greater than or equal to the sum of all previous elements in the sequence. Given an integer k (2 ≤ k ≤ 100), your task is to generate the first k elements of the smallest possible happy sequence. The sequence should start from 0 and each next element should be the smallest possible non-negative integer that maintains the properties of a happy sequence. The first line contains integer k. Output a single line containing k integers, representing the first k elements of the smallest possible happy sequence. Explanation: For example, if k = 4, the smallest happy sequence that can be generated is: 0, 0, 0, 1 In this case: 1. The first element is 0. 2. The second and third elements are 0, which is non-negative and does not violate the property. 3. The fourth element is 1, which is greater than or equal to the sum of all previous elements (0 + 0 + 0 = 0). Another example, if k = 5, the smallest happy sequence that can be generated is: 0, 0, 0, 0, 1 The sum of the first four elements is 0, and the sum of all five elements is 1, maintaining the happy sequence properties.","solution":"def generate_happy_sequence(k): Generates the first k elements of the smallest possible happy sequence. :param k: int - number of elements in the happy sequence (2 ≤ k ≤ 100) :return: list of k integers representing the happy sequence if k < 2 or k > 100: raise ValueError(\\"k must be between 2 and 100\\") # Start the sequence with one element: 0 sequence = [0] # The sum of sequence elements so far total_sum = 0 for i in range(1, k): # Append the smallest non-negative integer that meets the happy sequence criteria sequence.append(total_sum) total_sum += total_sum return sequence"},{"question":"You are given a grid with m rows and n columns. Each cell in the grid contains a non-negative integer representing the cost associated with stepping into that cell. You need to find the minimum cost path from the top-left cell (0,0) to the bottom-right cell (m-1,n-1). You can only move either down or right at any point in time. Write a function that takes a 2D list of integers representing the grid and returns the minimum cost to reach the bottom-right cell from the top-left cell. # Function Signature ```python def min_cost_path(grid: List[List[int]]) -> int: pass ``` # Input - A 2D list `grid` with integers such that `1 <= len(grid), len(grid[0]) <= 100` - Each element `grid[i][j]` is a non-negative integer `0 <= grid[i][j] <= 1000` # Output - An integer representing the minimum cost to reach the bottom-right cell from the top-left cell. # Example ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_cost_path(grid)) # Output: 7 ``` In this example: - The path with the minimum cost is: 1 → 3 → 1 → 1 → 1 - Total cost: 1 + 3 + 1 + 1 + 1 = 7","solution":"from typing import List def min_cost_path(grid: List[List[int]]) -> int: Returns the minimum cost path from the top-left to the bottom-right of the grid. You can only move either down or right at any point in time. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Populate the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1] # Example usage grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_cost_path(grid)) # Output: 7"},{"question":"You are given a sequence of integers where each integer represents the profit or loss from a day\'s trading activity. The total profit/loss for any subsequence of days is the sum of the profits/losses for those days. Given the sequence of daily profits/losses, you need to determine the maximum possible sum you can achieve by selecting a non-empty subsequence of consecutive days. However, you can select at most one subsequence. The first line of the input contains an integer T (1 ≤ T ≤ 200) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100000) — the number of days in that test case. The second line of each test case contains n integers, where each integer a_i (−10^5 ≤ a_i ≤ 10^5) represents the profit or loss on the i-th day. Output the maximum possible sum of profits for each test case. Note that the sum of n over all test cases does not exceed 200000. # Example **Input:** ``` 3 5 -1 2 3 -2 4 4 -5 -2 -3 -4 1 10 ``` **Output:** ``` 7 -2 10 ``` # Explanation - In the first test case, the subsequence [2, 3, -2, 4] has the maximum sum = 7. - In the second test case, the best subsequence is [-2], hence the output is -2. - In the third test case, there\'s only one day with a profit of 10, so the output is 10. # Constraints - The implementation should be efficient to handle the sum of n over all test cases up to 200000. - The input guarantees at least one test case, and every test case has at least one day. Solve this problem efficiently using an algorithm such as Kadane\'s algorithm.","solution":"def max_subsequence_sum(t, test_cases): Determine the maximum possible sum you can achieve by selecting a non-empty subsequence of consecutive days for each test case. :param t: Number of test cases :param test_cases: List of tuples, each containing integer n (number of days) and a list of integers representing the daily profits/losses. :return: List of integers where each integer is the maximum possible sum for the corresponding test case. results = [] for n, days in test_cases: current_sum = max_sum = days[0] for i in range(1, n): current_sum = max(days[i], current_sum + days[i]) if current_sum > max_sum: max_sum = current_sum results.append(max_sum) return results"},{"question":"A small nation operates an intricate network of reservoirs and channels that supply water to its cities. To ensure stability, each city must receive water from exactly one reservoir. However, due to geological constraints, each reservoir can only supply a limited number of cities. To minimize risk, the nation wants to connect its cities and reservoirs in such a way that no city depends on multiple reservoirs and every city receives water supply. You are given a network with n cities and m reservoirs. Each reservoir has a maximum capacity, indicating the number of cities it can supply water to. You must determine if it is possible to supply water to all cities without exceeding the reservoirs\' capacities. The first line contains two integers n and m: the number of cities and the number of reservoirs (1 ≤ n, m ≤ 1000). The second line contains m integers c1, c2, ..., cm: the maximum capacities of the reservoirs (1 ≤ ci ≤ n). The following n lines each contain an integer ri (1 ≤ ri ≤ m), indicating which reservoir can supply water to the i-th city. Output \\"YES\\" (without quotes) if there is a feasible way to supply water to all cities. Otherwise, print \\"NO\\". In the first example, each city has a separate reservoir that can supply it, and the capacities fit perfectly. In the second example, there are fewer capacities than necessary because the first reservoir cannot supply all cities assigned to it.","solution":"def can_supply_all_cities(n, m, capacities, city_reservoir_map): Determines if all cities can be supplied from the reservoirs without exceeding their respective capacities. Args: n (int): number of cities. m (int): number of reservoirs. capacities (list[int]): list of integers, each representing the maximum capacity of reservoirs. city_reservoir_map (list[int]): list of integers, each representing which reservoir a city can be supplied from. Returns: str: \\"YES\\" if all cities can be supplied, otherwise \\"NO\\". # Dictionary to keep track of the number of cities assigned to each reservoir reservoir_usage = [0] * (m + 1) # Count the number of cities each reservoir is supposed to supply for city in city_reservoir_map: reservoir_usage[city] += 1 # Check if any reservoir is exceeding its capacity for i in range(1, m + 1): if reservoir_usage[i] > capacities[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given two integers n and k. Consider a sequence of positive integers where the sum of any two integers in this sequence is always greater than or equal to k. Your task is to determine the smallest possible value of the largest integer in such a sequence of length n. The first line contains a single integer t (1 ≤ t ≤ 10000) – the number of test cases. Each of the following t lines contains two space-separated integers n (1 ≤ n ≤ 1000) and k (2 ≤ k ≤ 1000). For each test case, output a single integer – the smallest possible value of the largest integer in a sequence of length n where the sum of any two integers from the sequence is always greater than or equal to k. Input: The first line contains an integer t. The next t lines each contain two integers n and k. Output: For each test case, output the smallest possible value of the largest integer in the sequence. Example: Input: 3 3 10 4 12 2 5 Output: 6 9 3","solution":"def smallest_largest_in_sequence(n, k): Returns the smallest possible value of the largest integer in a sequence of length n where the sum of any two integers is at least k. return k - (n - 1)"},{"question":"Alice loves playing games with strings. Recently, she invented a game where she takes a string and tries to find out how many distinct substrings it contains. Given a string, she wants to find the number of its distinct substrings. A substring is any continuous segment of a given string. Two substrings are different if they start or end at different positions in the string, even if they contain the same sequence of characters. Could you help Alice find out the number of distinct substrings of a given string? The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Print a single integer — the number of distinct substrings of the given string. Consider the first example. The input string \\"abab\\" has the following distinct substrings: \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"abab\\". The input string \\"aaa\\" has the following distinct substrings: \\"a\\", \\"aa\\", \\"aaa\\". Notice that in second example, although \\"a\\" appears three times and \\"aa\\" appears twice, they are counted only once as distinct substrings.","solution":"def count_distinct_substrings(n, s): Returns the number of distinct substrings of the given string s of length n. substrings = set() # Generate all possible substrings by varying the start and end indices for start in range(n): for end in range(start + 1, n + 1): substrings.add(s[start:end]) return len(substrings)"},{"question":"You are given a string of characters. Your task is to find and print the most frequent character in the string. If there are multiple characters with the same highest frequency, print the one that appears first in the string. Input data contains one line with a non-empty string consisting of lowercase English letters. The length of the string will be at most 1000 characters. Output the most frequent character in the string. Example: Input: ``` abacabad ``` Output: ``` a ```","solution":"def most_frequent_char(s): Returns the most frequent character in the string. If there are multiple characters with the same highest frequency, returns the one that appears first in the string. from collections import defaultdict frequency = defaultdict(int) max_freq = 0 most_frequent_char = None for char in s: frequency[char] += 1 if frequency[char] > max_freq: max_freq = frequency[char] most_frequent_char = char return most_frequent_char"},{"question":"You are given a string containing numbers and lowercase English letters. Your task is to reorder the string so that all the numbers appear before any of the letters, while preserving the relative order of the numbers and the relative order of the letters. The first and only line of input contains the string s (1 ≤ |s| ≤ 100), which consists of numbers (\'0\' - \'9\') and lowercase English letters only. Print the reordered string, where all numbers come before any letters, preserving their relative order. Example: Input: `b3a2d1` Output: `321bad` Input: `a1b2c3` Output: `123abc`","solution":"def reorder_string(s): Reorders the string so that all numbers appear before any letters, preserving the relative order of both numbers and letters. numbers = [char for char in s if char.isdigit()] letters = [char for char in s if char.isalpha()] return \'\'.join(numbers + letters)"},{"question":"You are given two integers, n and m. Here, n represents the number of steps in a staircase and m represents the maximum number of steps you can take at once. Your goal is to count the number of distinct ways you can reach the top of the staircase if you can climb between 1 and m steps at a time. The first line of the input contains two integers n (1 le n le 1000) and m (1 le m le 100). Print the number of distinct ways to reach the top of the staircase. For example, if n = 4 and m = 2, the possible ways to reach the top are: - Taking 1 step four times (1+1+1+1) - Taking 1 step two times and then 2 steps one time (1+1+2) - Taking 2 steps one time and then 1 step two times (2+1+1) - Taking 2 steps two times (2+2) Thus, the answer would be 5.","solution":"def staircase_ways(n, m): Returns the number of distinct ways to reach the top of a staircase with \'n\' steps, if you can climb between 1 and \'m\' steps at a time. # Base case: If there are no steps, there\'s only 1 way to stay at the start (doing nothing) if n == 0: return 1 # dp array where dp[i] represents the number of ways to reach step i dp = [0] * (n + 1) dp[0] = 1 # There is one way to stay at the ground (step 0) for i in range(1, n + 1): for j in range(1, m + 1): if i - j >= 0: dp[i] += dp[i - j] return dp[n] # Example usage: # n = 4, m = 2 # Expected output: 5 (4 distinct ways as detailed above) print(staircase_ways(4, 2)) # Output: 5"},{"question":"Given an integer array `nums`, represent the number of elements in the array. Your task is to determine the minimum number of moves required to make all array elements equal, where a move is incrementing or decrementing an element by 1. Write a function that takes an integer array `nums` and returns the minimum number of moves. # Input - An integer array `nums` of length `n` (1 ≤ n ≤ 10^5) where each element is between 1 and 10^6. # Output - A single integer representing the minimum number of moves to make all elements of the array equal. # Examples Example 1: - Input: `nums = [1, 2, 3]` - Output: `2` - Explanation: The optimal way is to move the 1 to 2 and the 3 to 2, so that all elements become 2. The total number of moves is 2. Example 2: - Input: `nums = [1, 10, 2, 9]` - Output: `16` - Explanation: The optimal way is to move 1 -> 9 (or any similar balanced movements). The total number of moves is 16. # Notes - The optimal solution can be derived using the median of the array elements, as making all elements equal to the median minimizes the total number of moves. - You may assume that the input array `nums` will always produce a feasible solution.","solution":"def min_moves(nums): Returns the minimum number of moves required to make all array elements equal. nums.sort() median = nums[len(nums) // 2] return sum(abs(x - median) for x in nums)"},{"question":"Given a directed graph with N nodes and M edges, your task is to determine if it\'s possible to start at node A and visit every other node exactly once and return to node A (i.e., form a Hamiltonian cycle). If it is possible, the output should be the sequence of nodes forming the Hamiltonian cycle, starting and ending at node A. If it\'s not possible, output \\"No Hamiltonian Cycle\\". The graph is given as a list of edges, where each edge is represented by two integers u and v (1 ≤ u, v ≤ N), indicating an edge from node u to node v. # Input - The first line contains three integers, N, M, and A (1 ≤ N ≤ 20, 0 ≤ M ≤ 100, 1 ≤ A ≤ N) — the number of nodes, the number of edges, and the starting node respectively. - Each of the following M lines contains two integers u and v (1 ≤ u, v ≤ N), representing a directed edge from node u to node v. # Output - If a Hamiltonian cycle exists, print \\"Cycle found:\\" followed by the sequence of nodes in the cycle (including the starting node A at the end). - If no Hamiltonian cycle exists, print \\"No Hamiltonian Cycle\\". # Example Input ``` 4 6 1 1 2 2 3 3 4 4 1 2 4 4 2 ``` Output ``` Cycle found: 1 2 3 4 1 ``` Input ``` 4 4 1 1 2 2 3 3 4 4 2 ``` Output ``` No Hamiltonian Cycle ``` # Notes - The problem constraints ensure that N is small enough for a solution to be found using backtracking. - A Hamiltonian cycle is a cycle in a directed graph that visits each node exactly once and returns to the starting node.","solution":"def find_hamiltonian_cycle(N, M, A, edges): from collections import defaultdict # Create the adjacency list of the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Helper function to check for Hamiltonian cycle using backtracking def backtrack(path): current = path[-1] # If path length equals N and there\'s an edge back to the start node if len(path) == N: if A in graph[current]: path.append(A) return path else: return None for neighbor in graph[current]: if neighbor not in path: result = backtrack(path + [neighbor]) if result: return result return None cycle = backtrack([A]) if cycle: return f\\"Cycle found: {\' \'.join(map(str, cycle))}\\" else: return \\"No Hamiltonian Cycle\\" # Example usage: # print(find_hamiltonian_cycle(4, 6, 1, [(1, 2), (2, 3), (3, 4), (4, 1), (2, 4), (4, 2)])) # print(find_hamiltonian_cycle(4, 4, 1, [(1, 2), (2, 3), (3, 4), (4, 2)]))"},{"question":"Given a string s consisting of lowercase Latin letters and integers, rearrange the string such that the letters appear first in lexicographical order followed by the digits in ascending order. The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string s of length n. Print the rearranged string. # Example Input: ``` 8 dacb3214 ``` Output: ``` abcd1234 ``` Input: ``` 5 a1c2b ``` Output: ``` abc12 ```","solution":"def rearrange_string(n, s): Rearrange the string such that letters appear first in lexicographical order followed by digits in ascending order. :param n: Length of the string :param s: Input string :return: Rearranged string letters = sorted([char for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(letters + digits)"},{"question":"Given a binary string s of length n, your task is to partition the string into the maximum number of substrings such that each substring contains an equal number of \'0\'s and \'1\'s. For example, if s = \\"0101101011\\", one possible partition is [\\"01\\", \\"01\\", \\"10\\", \\"10\\", \\"11\\"] with a total of 5 substrings. The first line contains an integer n (1 leq n leq 10^5). The second line contains a binary string s of length n. Output a single integer, indicating the maximum number of substrings with an equal number of \'0\'s and \'1\'s. **Examples:** Input: ``` 6 010101 ``` Output: ``` 3 ``` Input: ``` 10 0110011100 ``` Output: ``` 4 ``` **Explanation:** In the first example, the string \\"010101\\" can be partitioned into [\\"01\\", \\"01\\", \\"01\\"], each with equal \'0\'s and \'1\'s. The count of such substrings is 3. In the second example, the string \\"0110011100\\" can be partitioned into [\\"01\\", \\"10\\", \\"01\\", \\"10\\"], each with equal \'0\'s and \'1\'s. The count of such substrings is 4.","solution":"def max_equal_substrings(n, s): Returns the maximum number of substrings such that each substring contains an equal number of \'0\'s and \'1\'s. Parameters: n (int): The length of the binary string. s (str): The binary string. Returns: int: The maximum number of substrings with equal number of \'0\'s and \'1\'s. count = 0 balance = 0 for char in s: if char == \'0\': balance -= 1 else: balance += 1 if balance == 0: count += 1 return count"},{"question":"A company organizes a relay running event where teams of runners compete. Each runner runs a segment of the race, passes the baton to the next runner, and so on until the race is complete. To determine the winning team, the company measures the time each runner takes to complete their segment. Given a sequence of times representing how long each runner took to complete their segment, you are tasked to find the length of the longest increasing subsequence of running times. This will help identify the longest duration of improving performance by consecutive runners within the team. A subsequence is a sequence derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. The first line of the input contains a single integer n (1 le n le 3 cdot 10^5), representing the number of runners. The second line contains n integers t_1, t_2, ldots, t_n (1 le t_i le 10^9), where t_i represents the time taken by the ith runner to complete their segment. Output a single integer representing the length of the longest increasing subsequence of the given running times. For example: ``` Input: 6 5 2 8 6 3 6 Output: 3 ``` In this example, the longest increasing subsequence is either [2, 3, 6] or [5, 6, 6], both of length 3.","solution":"def longest_increasing_subsequence_length(times): Given a list of times representing the completion time of segments by runners, return the length of the longest increasing subsequence. if not times: return 0 from bisect import bisect_left lis = [] for time in times: pos = bisect_left(lis, time) if pos == len(lis): lis.append(time) else: lis[pos] = time return len(lis)"},{"question":"You are given a list of words, and your task is to determine how many pairs of words from the list can form palindromes when concatenated. A palindrome is a string that reads the same backward as forward. Note that the order of concatenation matters, meaning that for words `w1` and `w2`, both `w1 + w2` and `w2 + w1` need to be checked. The first line contains an integer `n` (1 le n le 10^5) — the number of words in the list. The following `n` lines contain a word of the list. Each word only consists of lowercase alphabets and has a length between 1 and 20. Output a single integer — the number of pairs of words whose concatenation forms a palindrome. # Example Input: ``` 5 bat tab cat act tac ``` Output: ``` 4 ``` # Explanation The pairs of words that concatenated together form palindromes are: 1. \\"bat\\" + \\"tab\\" = \\"battab\\", which is a palindrome. 2. \\"tab\\" + \\"bat\\" = \\"tabbat\\", which is a palindrome. 3. \\"cat\\" + \\"tac\\" = \\"cattac\\", which is a palindrome. 4. \\"tac\\" + \\"act\\" = \\"tacact\\", which is a palindrome. Each pair is counted only once, so the total number of pairs is 4.","solution":"def count_palindromic_pairs(words): Returns the number of pairs of words whose concatenation forms a palindrome. def is_palindrome(s): return s == s[::-1] count = 0 n = len(words) for i in range(n): for j in range(n): if i != j: combined = words[i] + words[j] if is_palindrome(combined): count += 1 return count"},{"question":"Consider a grid with n rows and m columns consisting of non-negative integers. You can perform the following operation any number of times: choose any two adjacent cells in the grid and add 1 to both cells. Two cells are considered adjacent if they share a common edge. Your task is to find the minimum possible value of the maximum cell in the grid after performing the operation any number of times. The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns of the grid. The next n lines each contain m integers representing the initial values of the grid. Print a single integer — the minimum possible value of the maximum cell in the grid. Example: ``` Input: 2 3 1 2 4 0 3 1 Output: 4 ``` Explanation: In this example, you can perform the operation a few times to achieve the following grid configuration: ``` 2 3 4 1 4 2 ``` The maximum cell value is 4, and it is not possible to reduce this maximum any further by applying more operations. Thus, the answer is 4.","solution":"def min_possible_max_value(n, m, grid): Returns the minimum possible maximum value of the grid after performing the operation. An operation consists of choosing any two adjacent cells and adding 1 to both cells. from heapq import heapify, heappop, heappush def can_balance(mid): # This function checks if we can make all elements <= mid by using given operations heap = [(-grid[i][j], i, j) for i in range(n) for j in range(m)] heapify(heap) visited = set() while heap: value, x, y = heappop(heap) value = -value # max heap if value <= mid: return True if (x, y) in visited: continue visited.add((x, y)) for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: if (nx, ny) not in visited: # Apply the operation and add 1 to both cells grid[x][y] -= 1 grid[nx][ny] -= 1 heappush(heap, (-(grid[x][y]), x, y)) heappush(heap, (-(grid[nx][ny]), nx, ny)) return False # Applying binary search to find the minimum maximum value left, right = max(max(row) for row in grid), sum(sum(row) for row in grid) while left < right: mid = (left + right) // 2 if can_balance(mid): right = mid else: left = mid + 1 return left"},{"question":"In Moria, there are n dungeons arranged in a line, numbered from 1 to n. Each dungeon is connected to the next one by a passage, it takes a certain number of minutes to pass from one dungeon to the next. The Dark Lord assigns you a task: starting from dungeon 1, you must visit all the dungeons in order, ensuring you complete the journey from dungeon 1 to dungeon n within exactly a specified number of minutes. Each passage between the dungeons has a minimum and a maximum time that it can take to traverse. You can adjust the traversal time within those limits for each passage. Given the number of dungeons, the minimum and maximum travel time for each passage, and the total number of minutes you must take to complete the journey, determine if you can meet the exact requirement. If it\'s possible, output \\"YES\\"; otherwise, output \\"NO\\". The first line of the input contains two positive integers n (2 ≤ n ≤ 1000) and T (1 ≤ T ≤ 10^6) — the number of dungeons and the required total number of minutes for the journey. Each of the following n - 1 lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 1000) — the minimum and maximum time needed to traverse the passage from dungeon i to dungeon i+1. Output \\"YES\\" if you can adjust the travel times to match exactly T minutes, otherwise output \\"NO\\". Example: Input: 5 10 1 3 2 4 1 2 2 2 1 3 Output: YES Explanation: One possible appropriate timing is: 1+2+1+2+1 = 10. Another Example: Input: 4 15 2 5 1 6 1 2 Output: NO Explanation: The maximum time you can travel is 5+6+2 = 13 which is less than the required 15 minutes. So, it\'s not possible to travel exactly 15 minutes.","solution":"def can_meet_exact_time(n, T, times): Determines if one can visit all dungeons in exactly T minutes by adjusting travel times within the given limits. Args: - n (int): Number of dungeons. - T (int): Required total number of minutes for the journey. - times (list of tuples): Each tuple contains two integers l_i and r_i representing the minimum and maximum time needed to traverse the passage from dungeon i to dungeon i+1. Returns: - str: \\"YES\\" if it\'s possible to adjust travel times to match exactly T minutes, otherwise \\"NO\\". min_time = sum(l for l, r in times) max_time = sum(r for l, r in times) if min_time <= T <= max_time: return \\"YES\\" else: return \\"NO\\""},{"question":"In a distant galaxy, there is a complex system of space tunnels connecting various planets. The transportation authority wants to ensure that each planet can communicate directly or indirectly with all other planets using the least number of tunnels. The system can be represented as an undirected graph where planets are nodes and tunnels are edges. Given the number of planets and a list of tunnels between them, determine the minimum number of new tunnels that need to be added to make the graph connected (i.e., there should be a path between any two planets). The first line contains two integers n and m (1 le n le 1000, 0 le m le 10000) — the number of planets and the number of existing tunnels. The next m lines each contain two integers u and v (1 le u, v le n) representing an existing tunnel between planet u and planet v. Print a single integer — the minimum number of tunnels required to connect all the planets. In the first example, since there are already tunnels connecting every planet, the answer is 0. In the second example, we can add tunnels to create the following possible connections to make the graph fully connected: Thus, the answer is 3.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_tunnels_to_connect_all_planets(n, m, tunnels): parent = [i for i in range(n)] rank = [0] * n num_components = n for u, v in tunnels: u -= 1 # zero-indexing v -= 1 # zero-indexing uroot = find(parent, u) vroot = find(parent, v) if uroot != vroot: union(parent, rank, uroot, vroot) num_components -= 1 return num_components - 1"},{"question":"You are given a grid with m rows and n columns, where each cell in the grid is either a wall (‘W’) or an empty space (‘E’). Your task is to find the number of distinct regions in the grid that are fully enclosed by walls. A region is considered fully enclosed if: - It is surrounded entirely by walls when viewed from any of the four cardinal directions (up, down, left, right). - It does not contain any border cells (cells that lie on the edges of the grid). The first line contains two integers m and n (1 ≤ m, n ≤ 500), the dimensions of the grid. The next m lines each contain n characters (‘W’ or ‘E’) representing the grid. Output a single integer — the number of fully enclosed regions in the grid. # Example: Input: 6 6 WWEWWW WEEWEW WEWEWW WWWEWW WEEWWW WWWEEE Output: 3 Explanation: There are 3 fully enclosed regions in the grid: one in the second row and third column, one in the second row and fourth column, and one in the fifth row and sixth column. The rest of the ‘E’ cells either touch the border or are not surrounded by ‘W’ on all four sides.","solution":"def count_enclosed_regions(grid): def close_to_border(x, y): return x == 0 or x == m-1 or y == 0 or y == n-1 def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if visited[cx][cy]: continue visited[cx][cy] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'E\': stack.append((nx, ny)) m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] for i in range(m): for j in range(n): if grid[i][j] == \'E\' and close_to_border(i, j) and not visited[i][j]: dfs(i, j) enclosed_regions = 0 for i in range(1, m-1): for j in range(1, n-1): if grid[i][j] == \'E\' and not visited[i][j]: enclosed_regions += 1 dfs(i, j) return enclosed_regions"},{"question":"In a virtual world, a network of computers is represented as a grid of n rows and m columns. Each cell in the grid either contains a server (represented by 1) or is empty (represented by 0). Servers can only communicate directly with adjacent servers (horizontally and vertically). Your task is to determine the number of isolated groups of servers in the grid. An isolated group of servers is defined as a set of 1s where any two 1s are connected through a path of 1s, and there are no 1s outside this set that are adjacent (horizontally or vertically) to any of its members. The input starts with two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid, respectively. Following this are n lines, each containing m integers (either 0 or 1), representing the grid. Your program should output a single integer representing the number of isolated groups of servers. Input Format: ``` n m grid[1][1] grid[1][2] ... grid[1][m] grid[2][1] grid[2][2] ... grid[2][m] ... grid[n][1] grid[n][2] ... grid[n][m] ``` Output Format: ``` number_of_isolated_groups ``` Example: ``` Input 4 5 1 0 0 1 0 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 Output 4 ``` Explanation: There are four isolated groups of servers in the grid: 1. Servers at (1,1) and (2,1). 2. Servers at (1,4), (2,3), and (2,4). 3. Server at (4,1). 4. Server at (4,5).","solution":"def count_isolated_groups_of_servers(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return grid[x][y] = 0 # marks the cell as visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) isolated_groups = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: isolated_groups += 1 dfs(i, j) return isolated_groups"},{"question":"A large company has multiple departments and each department has a different number of employees. The company wants to organize a team-building event and plans to set up teams such that each team contains exactly the same number of employees. The goal is to form the largest possible teams with an equal number of employees using employees from different departments. Can you help to find out the maximum team size and the number of such teams that can be formed? The first line contains a single integer n (1 le n le 10^5)— the number of departments. The second line contains n space-separated integers e_1, e_2, ..., e_n (1 le e_i le 10^5) — the number of employees in each department. Output two integers - the maximum team size and the number of such teams that can be formed. For example, for the input: ``` 4 12 15 18 9 ``` The output should be: ``` 9 6 ``` Explanation: - The greatest common divisor (GCD) of 12, 15, 18, and 9 is 3, so each team can have a maximum size of 3 employees. - The total number of employees is 54 (12+15+18+9), resulting in 54/3 = 18/3 = 6 teams.","solution":"import math from functools import reduce def find_gcd(a, b): while b: a, b = b, a % b return a def maximum_team_size_and_count(n, departments): # Finding the GCD of all elements in the list gcd_all = reduce(find_gcd, departments) # Sum of all employees total_employees = sum(departments) team_size = gcd_all num_teams = total_employees // gcd_all return team_size, num_teams"},{"question":"Quack networking is a fun hobby for Dr. Platy the Platypus, who loves quacking with his friends. In the quack network, Dr. Platy and his friends communicate through devices called quackles. Each quackle in the network can either initiate or relay quacks between any two friends. The network is represented as a directed graph with quackles as nodes and communication channels as edges. Dr. Platy wants to determine the effectiveness of the network by finding out how many quackles can directly communicate with each other. A quackle u can directly communicate with another quackle v if there exists a directed path from u to v and a directed path from v to u. Given the structure of the quack network, help Dr. Platy find the number of quackles that can directly communicate with each other. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000), the number of quackles (nodes) and the number of communication channels (edges), respectively. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating a communication channel from quackle u to quackle v. Output: - A single integer representing the number of quackles that can directly communicate with each other. Example: ``` Input: 5 5 1 2 2 3 3 4 4 2 5 4 Output: 3 ``` Explanation: In this quack network, quackles 1, 2, 3, and 4 form a strongly connected component where each quackle can directly communicate with each other. Quackle 5 can only communicate with quackle 4, but not vice-versa. Hence, only quackle 1, 2, 3, and 4 can be part of the maximal group of quackles that directly communicate with each other, and thus the output is 3.","solution":"def find_scc_count(n, m, edges): Finds the number of nodes in the largest Strongly Connected Component (SCC) in a directed graph with n nodes and m edges. Arguments: - n: Integer, number of nodes. - m: Integer, number of edges. - edges: List of tuples, each tuple (u, v) indicates a directed edge from node u to node v. Returns: - Integer, number of nodes in the largest SCC. from collections import defaultdict, deque def dfs(v, graph, visited, stack): visited[v] = True for u in graph[v]: if not visited[u]: dfs(u, graph, visited, stack) stack.append(v) def reverse_dfs(v, rev_graph, visited): visited[v] = True count = 1 for u in rev_graph[v]: if not visited[u]: count += reverse_dfs(u, rev_graph, visited) return count # Step 1: Create graph and reverse graph graph = defaultdict(list) rev_graph = defaultdict(list) for u, v in edges: graph[u].append(v) rev_graph[v].append(u) # Step 2: Perform DFS to get finish times stack = [] visited = [False] * (n + 1) for v in range(1, n + 1): if not visited[v]: dfs(v, graph, visited, stack) # Step 3: Reverse DFS based on finish times visited = [False] * (n + 1) max_scc_size = 0 while stack: v = stack.pop() if not visited[v]: scc_size = reverse_dfs(v, rev_graph, visited) max_scc_size = max(max_scc_size, scc_size) return max_scc_size # Example usage: # edges = [(1, 2), (2, 3), (3, 4), (4, 2), (5, 4)] # print(find_scc_count(5, 5, edges)) # Output: 3"},{"question":"You are given a set of integers. You need to perform the following query: for each pair of given indices (i, j) inclusive, find the largest element in that subarray. Efficiently handle multiple queries. The input begins with two integers n and q (1 ≤ n, q ≤ 100000), where n is the number of integers in the array and q is the number of queries. The next line contains n space-separated integers, representing the elements of the array (each element is between −10^9 and 10^9). Each of the next q lines contains two integers i and j (1 ≤ i ≤ j ≤ n), representing the inclusive range [i, j] for which you need to find the maximum element. Output q lines—each should contain the maximum element in the subarray [i, j]. For efficient processing of queries, consider preprocessing the input array using appropriate data structures, such as segment trees or sparse tables. Example input: 5 3 1 3 2 7 9 2 4 1 5 3 5 Example output: 7 9 9","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = data[i] # Initialize internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def query(self, l, r): l += self.n r += self.n res = -float(\'inf\') while l < r: if l % 2: res = max(res, self.tree[l]) l += 1 if r % 2: r -= 1 res = max(res, self.tree[r]) l //= 2 r //= 2 return res def find_max_in_subarray(arr, queries): st = SegmentTree(arr) results = [] for i, j in queries: results.append(st.query(i - 1, j)) return results"},{"question":"You are given an array of integers `a` with length `n`. Your task is to process `q` queries of the following types on the array: 1. Update: Change the element at a specified index to a new value. Each update query is given by two integers `i` (1 ≤ i ≤ n) and `v` where `i` is the 1-based index of the element to be updated and `v` is the new value. 2. Range Sum: Calculate the sum of elements in a specified subarray. Each range sum query is given by two integers `l` and `r` (1 ≤ l ≤ r ≤ n), representing the 1-based starting and ending indices of the subarray (inclusive). Implement a system to efficiently process both types of queries on the array. # Input The first line contains two space-separated integers `n` and `q` (1 ≤ n, q ≤ 100000). The second line contains `n` space-separated integers representing the initial elements of the array. The following `q` lines describe the queries. Each query is either in the form `1 i v` (update query) or `2 l r` (range sum query). # Output For each range sum query, output the sum of the specified subarray. # Sample Input ``` 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 1 3 6 2 1 3 ``` # Sample Output ``` 6 17 17 ``` # Explanation 1. The initial array is [1, 2, 3, 4, 5]. 2. Query `2 1 3` requests the sum from index 1 to 3, which is 1 + 2 + 3 = 6. 3. Query `1 2 10` updates the element at index 2 to 10, resulting in array [1, 10, 3, 4, 5]. 4. Query `2 1 3` requests the sum from index 1 to 3, which is 1 + 10 + 3 = 14. 5. Query `1 3 6` updates the element at index 3 to 6, resulting in array [1, 10, 6, 4, 5]. 6. Query `2 1 3` requests the sum from index 1 to 3, which is 1 + 10 + 6 = 17.","solution":"class QueryProcessor: def __init__(self, n, initial_array): self.array = initial_array self.n = n def update(self, i, v): self.array[i - 1] = v def range_sum(self, l, r): return sum(self.array[l - 1:r]) def process_queries(n, initial_array, queries): qp = QueryProcessor(n, initial_array) results = [] for query in queries: if query[0] == 1: _, i, v = query qp.update(i, v) elif query[0] == 2: _, l, r = query results.append(qp.range_sum(l, r)) return results"},{"question":"Michael is an avid collector of rare coins, and he has a large collection of coins sorted by their year of minting. He stores them in a single row in his display case, and he likes to take a look at his collection from time to time. Recently, Michael has become interested in finding out the maximum number of consecutive years in his collection. Coin years might not always be contiguous due to certain rare years missing from his collection. You are given an integer list representing the years of the coins in Michael\'s collection. The list is unsorted and may contain duplicates. Help Michael determine the maximum number of consecutive years in his collection. The input consists of a single line containing a list of integers, each separated by a space. The length of the list is between 1 and 1000 inclusive, and each integer is a valid year (from 1 to 9999). Output a single integer — the maximum number of consecutive years. Example Input 1: 1945 1947 1946 1948 1950 1951 Example Output 1: 4 Example Input 2: 2001 2003 2005 2007 2009 Example Output 2: 1","solution":"def max_consecutive_years(years): Given a list of years, return the maximum number of consecutive years. Args: years (list): List of integers representing the years of coins in Michael\'s collection. Returns: int: The maximum number of consecutive years. # Removing duplicates and sorting the years years = sorted(set(years)) max_streak = 1 current_streak = 1 for i in range(1, len(years)): if years[i] == years[i-1] + 1: current_streak += 1 else: max_streak = max(max_streak, current_streak) current_streak = 1 max_streak = max(max_streak, current_streak) return max_streak"},{"question":"You are given an array of integers representing the heights of a stack of boxes. You can choose exactly two boxes from the stack to form a single new stack, with a height equal to the sum of their heights. You want to minimize the difference between the height of the new stack and the height of its complement stack (the remaining boxes). Determine the minimum possible difference between the heights of these two stacks. The first line contains an integer n (2 ≤ n ≤ 10^5), the number of boxes in the stack. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), the heights of the boxes. Output a single integer, the minimum possible difference between the height of the new stack and the height of the complement stack. Examples: Input: 4 4 6 7 11 Output: 2 Input: 3 8 12 16 Output: 4 Explanation: In the first example, we can combine boxes of heights 6 and 7 to form a new stack of height 13. The heights of the remaining boxes are 4 and 11. The difference between the heights of the two stacks is |13 - (4 + 11)| = |13 - 15| = 2. In the second example, we can combine boxes of heights 8 and 16 to form a new stack of height 24. The height of the remaining box is 12. The difference between the heights of the two stacks is |24 - 12| = 12. This problem requires finding a pair of boxes to minimize the difference between the sum of their heights and the sum of the heights of the remaining boxes, ensuring the minimum possible imbalance in the heights.","solution":"def min_height_difference(n, heights): Returns the minimum possible difference between the height of a new stack formed by combining two boxes and the height of the complement stack. Parameters: n (int): The number of boxes heights. heights (List[int]): The list of heights of the boxes. Returns: int: The minimum possible difference between the new stack height and the complement stack height. if n == 2: return abs(heights[0] - heights[1]) total_height = sum(heights) min_difference = float(\'inf\') heights.sort() for i in range(n): for j in range(i + 1, n): combined_height = heights[i] + heights[j] remaining_height = total_height - combined_height difference = abs(combined_height - remaining_height) min_difference = min(min_difference, difference) return min_difference"},{"question":"A robot is placed on an infinite 2D grid at position (0, 0). It can perform the following types of moves: 1. \\"R\\" (right): Move one unit to the right, i.e., from (x, y) to (x+1, y). 2. \\"L\\" (left): Move one unit to the left, i.e., from (x, y) to (x-1, y). 3. \\"U\\" (up): Move one unit up, i.e., from (x, y) to (x, y+1). 4. \\"D\\" (down): Move one unit down, i.e., from (x, y) to (x, y-1). Given a sequence of these moves, you need to determine if the robot returns to its original position (0, 0) after performing all the moves. The input contains a single string of moves, where each character is one of \\"R\\", \\"L\\", \\"U\\", or \\"D\\". The length of the move sequence is at least 1 and at most 10^5. Print \\"YES\\" if the robot returns to its original position and \\"NO\\" otherwise. # Input: A single string consisting of the characters \'R\', \'L\', \'U\', and \'D\', representing the sequence of moves. # Output: Output \\"YES\\" if the robot returns to the original position and \\"NO\\" otherwise. # Example: Input: ``` RRULLDUD ``` Output: ``` YES ``` Input: ``` RUURDDL ``` Output: ``` NO ```","solution":"def returns_to_origin(moves): Determines if the robot returns to the origin (0, 0) after performing all the moves. Args: moves (str): A string of moves consisting of \'R\', \'L\', \'U\', and \'D\'. Returns: str: \\"YES\\" if the robot returns to the original position, otherwise \\"NO\\". x, y = 0, 0 for move in moves: if move == \'R\': x += 1 elif move == \'L\': x -= 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"Alex loves writing codes that generate patterns. One of his favorite exercises is to generate a grid of size n x m filled with characters based on specific rules. Each cell in the grid can contain either of two characters: \'X\' or \'O\'. The pattern is such that no \'X\' character is surrounded by \'O\' characters on all four sides, and no \'O\' character is surrounded by \'X\' characters on all four sides. In other words, if there is an \'X\' at position (i, j), then at least one of the adjacent cells (either above, below, left, or right) must also contain an \'X\'. Similarly, if there is an \'O\' at position (i, j), at least one adjacent cell must also contain an \'O\'. Given the values of n and m, construct an n x m grid that satisfies these conditions. The first line contains two integers n and m (1 ≤ n, m ≤ 100). Print the n x m grid where each cell contains either \'X\' or \'O\' and follows the above rules. For example: Input: 3 3 Output: XOX OXO XOX Input: 4 5 Output: XOXOX OXOXO XOXOX OXOXO","solution":"def generate_grid(n, m): grid = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: row.append(\'X\') else: row.append(\'O\') grid.append(\\"\\".join(row)) return grid"},{"question":"Alice has a special string game. She has a string `s` consisting of lowercase English letters. Alice wants to find out if it\'s possible to rearrange `s` such that no two adjacent characters are the same. If it is possible, print \\"Yes\\" followed by any valid rearrangement of the string. If it is not possible, print \\"No\\". Input: - The first line contains an integer `t` (1 ≤ `t` ≤ 100) — the number of test cases. - The next `t` lines contain one string `s` each (1 ≤ |`s`| ≤ 1000). Output: For each test case, print \\"Yes\\" and a valid rearranged string in a new line if it\'s possible. Otherwise, print \\"No\\". Example Input: 3 aabb aaab aabbcc Output: Yes abab No Yes abcabc Explanation: 1. In the first test case, the string \\"aabb\\" can be rearranged to \\"abab\\" where no two adjacent characters are the same. 2. In the second test case, the string \\"aaab\\" cannot be rearranged such that no two adjacent characters are the same. 3. In the third test case, the string \\"aabbcc\\" can be rearranged to \\"abcabc\\" where no two adjacent characters are the same.","solution":"from collections import Counter import heapq def rearrange_string(t, strings): def can_rearrange_string(s): count = Counter(s) max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged_string = \'\'.join(result) if len(rearranged_string) == len(s): return \\"Yes\\", rearranged_string else: return \\"No\\", results = [] for s in strings: results.append(can_rearrange_string(s)) return results"},{"question":"A world-renowned robotics competition has recognized a new challenge this year: orchestrating synchronized robot dances. Each dance must consist of a specific number of unique moves, and your team needs to program the robots to learn and execute these moves in the given sequence. The moves are indexed and have to be learned progressively; meaning a robot must complete move 1 before move 2, move 2 before move 3, and so forth. You have a total of n robots available, each with a distinct learning speed. Robot i takes a_i seconds to learn each move, regardless of the complexity of the move. Your task is to determine the minimum time required for the robots to learn and execute exactly k unique dance moves in sequence. You can assign any robot to any move, but a single robot can handle only one move. The first line contains two integers n and k (1 le n, k le 10^5) — the number of robots and the number of unique moves required for the dance. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the time each robot takes to learn one move. Output a single integer — the minimum total time required for learning and executing exactly k unique dance moves in sequence. **Example:** **Input:** ``` 3 2 2 3 5 ``` **Output:** ``` 5 ``` **Explanation:** To achieve optimal time, the fastest robot (taking 2 seconds per move) can be assigned the first move (cost 2 seconds) and the second fastest robot (taking 3 seconds per move) can handle the second move (cost 3 seconds). Therefore, the total time is 2 + 3 = 5 seconds.","solution":"def minimum_learning_time(n, k, learning_times): Returns the minimum total time required for learning and executing exactly k unique dance moves in sequence. Parameters: - n: the number of robots - k: the number of unique moves - learning_times: a list of n integers, where each integer represents the time a robot takes to learn one move Returns: Integer representing the minimum total time required. # Sort the learning times in ascending order learning_times.sort() # Sum the first k elements (the smallest k learning times) return sum(learning_times[:k])"},{"question":"You are given two strings, `s` and `t`, where `s` is a shuffled permutation of a string that contains letters from `a` to `z` and `t`. Your task is to find and return the original string `t`. The first line of the input contains string `s`, which is a permutation of a string that includes all the letters from `a` to `z` exactly once, plus string `t`. The length of `s` does not exceed 10^5. The second line contains string `t`, which is a substring of the original string added to the alphabet letters to form `s`. The length of `t` does not exceed 10^5. Output the string `t`. # Input Format - The first line contains a string `s` (1 ≤ |s| ≤ 10^5). - The second line contains a string `t` (1 ≤ |t| ≤ 10^5). # Output Format - Output the original string `t`. # Example Input: ``` abcdefghijklmnopqrstuvwxyzteststring teststring ``` Output: ``` teststring ``` Input: ``` abcdefghijlmnopqrstuvwxyztestcasek testcasek ``` Output: ``` testcasek ```","solution":"def find_original_string(s, t): Given a string s which is a shuffled permutation of a string that contains letters from \'a\' to \'z\' plus string t, this function returns the original string t. return t"},{"question":"You are given an integer array nums and an integer target. Your task is to find a pair of distinct indices (i, j) such that their corresponding elements in the array add up to the target value. Return the indices of the two numbers such that they add up to the target, and if multiple such pairs exist, return any one of them. Formally, find indices i and j (0 leq i, j < n and i neq j) such that nums[i] + nums[j] = target. You need to implement the function `pair_indices(nums, target)` that returns the indices (i, j) as a tuple. The first line contains an integer n (2 le n leq 10^5) - the number of elements in the array nums. The second line contains n space-separated integers nums[i] (-10^9 le nums[i] le 10^9) - the elements of the array. The third line contains an integer target (-2 cdot 10^9 le target le 2 cdot 10^9). Output a tuple containing two indices (i, j) (0-indexed) such that nums[i] + nums[j] = target. If no such pair exists, output an empty tuple. Example: Input: ``` 5 2 7 11 15 1 9 ``` Output: ``` (0, 1) ``` Explanation: The element nums[0] = 2 and nums[1] = 7 add up to the target value 9 (2 + 7 = 9). Hence, the function returns (0, 1).","solution":"def pair_indices(nums, target): Returns a pair of indices such that the corresponding elements in the array add up to the target value. Args: nums: List[int] - List of integers. target: int - The target sum. Returns: Tuple[int, int] - A tuple of indices (i, j) such that nums[i] + nums[j] = target. If no such pair exists, returns an empty tuple. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return () # Example usage: # nums = [2, 7, 11, 15, 1] # target = 9 # print(pair_indices(nums, target)) # Output: (0, 1)"},{"question":"A famous gallery has an exhibition hall organized as a circular corridor. The corridor can be represented as a sequence of n sections, with each section having an artwork displayed in it. Each artwork can be described by its desirable exposure direction: ‘L’ for left and ‘R’ for right. Due to limited space, each section can only showcase one artwork. The gallery manager wants to rearrange the artworks such that there is no two consecutive artworks that both have the same exposure direction. Given the current arrangement of the artworks, you need to determine if it is possible to rearrange them according to the requirement. If it is possible, print “YES”. Otherwise, print “NO”. You may swap any two artworks as many times as needed, but each section must end up with exactly one artwork. The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of sections in the corridor. The second line contains a string of n characters, each either \'L\' or \'R\', representing the current arrangement of artworks. Output \\"YES\\" if it is possible to rearrange the artworks such that no two consecutive sections have artworks with the same exposure direction. Otherwise, print \\"NO\\". For example: - Input: ``` 4 LRLR ``` Output: ``` YES ``` - Input: ``` 5 LLLRR ``` Output: ``` NO ```","solution":"def can_rearrange_artworks(n, artwork_sequence): Determines if the artworks can be rearranged such that no two consecutive sections have artworks with the same exposure direction. Parameters: n (int): Number of sections in the corridor. artwork_sequence (str): Current arrangement of artworks (\'L\' or \'R\'). Returns: str: \\"YES\\" if it\'s possible to rearrange, \\"NO\\" otherwise. count_L = artwork_sequence.count(\'L\') count_R = artwork_sequence.count(\'R\') # It\'s possible to rearrange if there is no consecutive same exposure direction when enough different ones. if abs(count_L - count_R) > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given an n x n grid filled with non-negative integers. Your task is to traverse the grid from the top-left corner to the bottom-right corner, collecting as many rewards as possible. You can only move either right or down at any point in time. However, there is a twist: every time you move to a cell that has a certain number of rewards, it decreases the value in that cell by 1. Once the value in a cell reaches 0, it stays at 0 and no further rewards can be collected from that cell. The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. Each test case consists of the following: - The first line contains an integer n (1 ≤ n ≤ 300) — the size of the grid. - The next n lines each contain n integers, the rewards in each cell of the grid. For each test case, output the maximum number of rewards you can collect on a single trip from the top-left corner to the bottom-right corner of the grid. Input: - The first line is a single integer t (the number of test cases). - The following lines describe each test case: - One integer n - n lines of n integers: the grid Output: - For each test case, print the maximum number of rewards that can be collected. Example: ``` Input: 2 3 1 2 3 4 5 6 7 8 9 2 1 2 1 9 Output: 29 12 ``` In the first test case, for example, the optimal path is 1 → 2 → 3 → 6 → 9, collecting a total of 1 + 2 + 3 + 6 + 9 = 21 rewards. The optimal path for the second test case is 1 → 2 → 9, collecting a total of 1 + 2 + 9 = 12 rewards.","solution":"def find_max_rewards(t, test_cases): from functools import lru_cache results = [] for case in test_cases: n, grid = case @lru_cache(maxsize=None) def dfs(x, y): if x == n - 1 and y == n - 1: return grid[x][y] max_rewards = 0 if x + 1 < n: # Move down max_rewards = max(max_rewards, dfs(x + 1, y)) if y + 1 < n: # Move right max_rewards = max(max_rewards, dfs(x, y + 1)) return grid[x][y] + max_rewards results.append(dfs(0, 0)) return results # Example usage if __name__ == \\"__main__\\": t = 2 test_cases = [ (3, [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]), (2, [ [1, 2], [1, 9] ]) ] print(find_max_rewards(t, test_cases)) # Output: [29, 12]"},{"question":"A new employee is learning to use a custom data processing tool that can analyze and process strings formatted as key-value pairs. In this tool, each string contains keys and values in the form \\"key1=value1;key2=value2;...\\". The employee needs to modify these key-value strings based on specified rules. The rules are as follows: 1. Remove all key-value pairs where the key is in a provided list of keys to remove. 2. For the remaining key-value pairs, replace all occurrences of a specific substring in the values with another substring. You will be given the original key-value string and the list of keys to remove. Additionally, you will be given the substring to be replaced and the substring to replace it with. Write a function that takes the original key-value string, the list of keys to remove, the target substring, and the replacement substring as input. The function should output the modified key-value string. **Input format:** - The first line contains the key-value string, where entries are separated by semicolons (;), and keys are separated from values by an equals sign (=). - The second line contains the list of keys to remove, separated by spaces. - The third line contains the substring to be replaced. - The fourth line contains the substring to replace with. **Output format:** - Print the modified key-value string. The order of the remaining key-value pairs should remain the same as in the original string. The last key-value pair should not have a trailing semicolon. **Constraints:** - The length of the original key-value string does not exceed 1000 characters. - The total number of distinct keys in the key-value string does not exceed 100. - The length of each key and value does not exceed 100 characters. - The list of keys to remove does not exceed 100 keys. - The length of the target and replacement substrings does not exceed 100 characters. **Example:** Input: ``` name=John;age=30;country=US;city=New York age country York York City ``` Output: ``` name=John;city=New York City ```","solution":"def process_key_value_string(kv_string, keys_to_remove, target_substring, replacement_substring): Processes the key-value string according to the given rules: 1. Removes key-value pairs for keys in keys_to_remove. 2. Replaces all occurrences of target_substring in the remaining values with replacement_substring. keys_to_remove = set(keys_to_remove.split()) # Split the key-value string into pairs kv_pairs = kv_string.split(\';\') # Process each key-value pair processed_pairs = [] for pair in kv_pairs: key, value = pair.split(\'=\') if key not in keys_to_remove: # Replace target substring with the replacement in the value value = value.replace(target_substring, replacement_substring) processed_pairs.append(f\\"{key}={value}\\") # Join the processed pairs into the final string return \';\'.join(processed_pairs)"},{"question":"You are given a list of integers and a target sum. Your task is to determine if there are any three integers in the list that add up to the target sum. If such a triplet exists, print \\"YES\\"; otherwise, print \\"NO\\". The first line of input contains two integers: the number of elements in the list, N (3 ≤ N ≤ 1000), and the target sum, T (-10^6 ≤ T ≤ 10^6). The second line contains N space-separated integers representing the elements of the list. The integers range between -10^6 and 10^6. For example: ``` Input: 6 10 1 2 4 5 6 8 Output: YES ``` In this example, the triplet (1, 4, 5) adds up to the target sum of 10. # Guidelines: - You should aim to find a solution with a reasonable time complexity (ideally O(N^2 log N) or better). - Make sure to handle diverse cases, including cases where the list contains negative numbers, zeroes, or very large or very small integers.","solution":"def find_triplet_with_sum(arr, target_sum): This function checks if there exists any three integers in the given list that add up to the target sum. arr.sort() n = len(arr) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target_sum: return \\"YES\\" elif current_sum < target_sum: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex is labeled with a unique integer between 1 and n. An edge exists between vertex u and vertex v if and only if the two vertices are directly connected. Your task is to determine whether the graph contains a cycle, and if it does, return the length of the shortest cycle. A cycle is a path of edges and vertices wherein a vertex is reachable from itself in which no vertex or edge is repeated. The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 3 × 10^5) — the number of vertices and the number of edges, respectively. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the vertices that form an edge. There are no multiple edges or self-loops. If there is no cycle, print -1. Otherwise, print the length of the shortest cycle found. Example: Input: 5 5 1 2 2 3 3 4 4 5 3 5 Output: 3 In this example, the graph has a cycle 3 - 4 - 5 - 3 with length 3, which is the shortest cycle in the graph.","solution":"from collections import deque, defaultdict def find_shortest_cycle(n, m, edges): def bfs(start, adj): dist = [-1] * (n + 1) parent = [-1] * (n + 1) q = deque([start]) dist[start] = 0 while q: v = q.popleft() for u in adj[v]: if dist[u] == -1: dist[u] = dist[v] + 1 parent[u] = v q.append(u) elif parent[v] != u: return dist[v] + dist[u] + 1 return float(\'inf\') adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) shortest_cycle = float(\'inf\') for v in range(1, n + 1): shortest_cycle = min(shortest_cycle, bfs(v, adj)) return shortest_cycle if shortest_cycle != float(\'inf\') else -1"},{"question":"You are given a tree consisting of `n` nodes rooted at node 1. Each node has a value associated with it. Determine the maximum sum of values of nodes from the root to any leaf node. A leaf node is a node with no children. The first line of input contains an integer `n` (1 ≤ n ≤ 100,000) — the number of nodes. The second line of input contains `n` integers `v1, v2, ..., vn` (−10^9 ≤ vi ≤ 10^9) — the values of the nodes. `vi` is the value of the i-th node. Each of the next `n-1` lines contains two integers `ui` and `vi` (1 ≤ ui, vi ≤ n) — an edge between nodes `ui` and `vi`. Output a single integer — the maximum sum from the root to any leaf node in the tree. **Example:** **Input:** ``` 5 3 2 1 10 -1 1 2 1 3 2 4 3 5 ``` **Output:** ``` 12 ``` Explanation: The paths from the root (node 1) to each leaf are: - 1 -> 2 -> 4: sum is 3 + 2 + 10 = 15 - 1 -> 3 -> 5: sum is 3 + 1 + -1 = 3 The maximum sum is 15.","solution":"from collections import defaultdict, deque def max_sum_to_leaf(n, node_values, edges): if n == 1: return node_values[0] tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Perform a BFS to calculate the maximum sum from root to any leaf max_sum = float(\'-inf\') queue = deque([(1, node_values[0])]) # (current node, current path sum) visited = set([1]) while queue: current_node, current_sum = queue.popleft() is_leaf = True for neighbor in tree[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_sum + node_values[neighbor - 1])) is_leaf = False if is_leaf: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a 2D grid of size n x m where each cell contains an integer representing the height of that cell. You are currently standing on the top-left cell of the grid (1, 1). Your goal is to reach the bottom-right cell of the grid (n, m). You can move to an adjacent cell in four possible directions: up, down, left, or right. However, the height difference between the cell you are currently on and the cell you are moving to must not exceed a given integer k. Write a program that determines whether it is possible to reach the bottom-right cell from the top-left cell under the given conditions. If it is possible, print \\"Yes\\", otherwise print \\"No\\". The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ 1000) — the number of rows, the number of columns, and the maximum allowed height difference, respectively. The next n lines each contain m integers, representing the heights of the cells in the grid. Output \\"Yes\\" if it is possible to reach the bottom-right cell from the top-left cell, otherwise print \\"No\\". Example input: 3 3 2 1 3 2 4 3 2 5 6 7 Example output: Yes Example input: 3 3 1 1 3 2 4 3 2 5 6 7 Example output: No","solution":"def can_reach_bottom_right(n, m, k, grid): Determines if it\'s possible to reach the bottom-right cell from the top-left cell under the given conditions. :param n: Number of rows :param m: Number of columns :param k: Maximum allowed height difference :param grid: 2D list representing the heights of the cells :return: \\"Yes\\" if possible to reach the bottom-right cell, otherwise \\"No\\" from collections import deque # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS to check reachability with constraints def bfs(): queue = deque([(0, 0)]) visited = {(0, 0)} while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: if abs(grid[nx][ny] - grid[x][y]) <= k: visited.add((nx, ny)) queue.append((nx, ny)) return False return \\"Yes\\" if bfs() else \\"No\\""},{"question":"You are given an array of integers `arr` and an integer `d`. Your task is to find the maximum length of a subsequence such that the absolute difference between any two consecutive elements of this subsequence is exactly `d`. # Input - The first line of input contains a single integer `t` (1 le t le 1000) — the number of test cases. - The first line of each test case contains a single integer `n` (1 le n le 1000) — the number of elements in the array. - The second line of each test case contains `n` integers — the elements of the array `arr` (1 le arr[i] le 10^9). - The third line of each test case contains a single integer `d` (1 le d le 10^9) — the required absolute difference between consecutive elements of the subsequence. # Output For each test case, print a single integer — the maximum length of the desired subsequence. # Example Input ``` 2 5 1 5 9 13 17 4 6 1 2 3 4 5 6 1 ``` Output ``` 5 6 ``` # Explanation - In the first test case, the array is [1, 5, 9, 13, 17] with d = 4. The entire array is a valid subsequence since the difference between each consecutive element is exactly 4. - In the second test case, the array is [1, 2, 3, 4, 5, 6] with d = 1. The entire array is a valid subsequence since the difference between each consecutive element is exactly 1.","solution":"def max_subseq_length(arr, d): Returns the maximum length of a subsequence such that the absolute difference between any two consecutive elements of this subsequence is exactly d. n = len(arr) arr_set = set(arr) max_length = 0 while arr_set: current = arr_set.pop() length = 1 # Check lower chain (current, current - d, current - 2d, ...) lower = current - d while lower in arr_set: arr_set.remove(lower) length += 1 lower -= d # Check upper chain (current, current + d, current + 2d, ...) upper = current + d while upper in arr_set: arr_set.remove(upper) length += 1 upper += d max_length = max(max_length, length) return max_length def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] d = test_cases[i][2] results.append(max_subseq_length(arr, d)) return results"},{"question":"Sophia and Lucas are playing a game on an initially empty sequence of integers. The game is turn-based, and the game starts with Sophia. On a player\'s turn, they must add a non-negative integer to the sequence such that the greatest common divisor (GCD) of the entire sequence is maximized. Sophia and Lucas both play optimally, meaning they seek to maximize the GCD on every turn. The game ends when a player cannot make a move that will increase the GCD of the sequence. Given an integer n (1 ≤ n ≤ 100,000), representing the number of turns the game can last if both players make optimal moves, determine if Sophia will win or lose given that she starts the game. The single line of input contains the integer n. Output \\"Win\\" if Sophia will win the game, or \\"Lose\\" if Lucas will win the game. For example, for n = 1, Sophia will always win because she makes the first move and no subsequent move is possible. For n = 2, Lucas will win because Sophia\'s optimal move on the first turn will be followed by Lucas\'s optimal move, ending the game with Lucas\'s win.","solution":"def game_outcome(n): Determine if Sophia will win or lose given that she starts the game and game lasts n turns. Parameters: n (int): Number of turns the game can last (1 ≤ n ≤ 100,000) Returns: str: \\"Win\\" if Sophia will win, \\"Lose\\" if Lucas will win. if n % 2 == 1: return \\"Win\\" else: return \\"Lose\\""},{"question":"Riku loves playing games that involve sequences and numbers. Recently, he stumbled upon an interesting game involving two sequences. The game is as follows: Given two sequences of integers, A and B, with lengths n and m respectively, the goal is to find the minimum number of operations required to make the subsequence represented by B appear as a continuous subsequence in A. An operation consists of either inserting an integer into A or deleting an integer from A. Formally, you are given two sequences: - A = [a_1, a_2, ..., a_n] - B = [b_1, b_2, ..., b_m] You need to determine the minimum number of insertions and deletions required for B to be a continuous subsequence in A. # Input: - The first line contains two integers, n and m, representing the lengths of sequences A and B respectively (1 leq m leq n leq 2000). - The second line contains n integers representing the sequence A (1 leq a_i leq 10^9). - The third line contains m integers representing the sequence B (1 leq b_i leq 10^9). # Output: - Print a single integer which is the minimum number of operations required to make B a continuous subsequence in A. # Example: Input: ``` 5 3 1 2 3 4 5 2 3 4 ``` Output: ``` 0 ``` Input: ``` 7 3 1 2 3 5 6 2 3 2 3 4 ``` Output: ``` 1 ``` In the first example, sequence B is already a continuous subsequence in sequence A, so no operations are needed. In the second example, we need at least one operation (inserting 4 between 3 and 5) to make B a continuous subsequence in A.","solution":"def min_operations_to_subsequence(n, m, A, B): Function to compute the minimum number of operations required to make B a continuous subsequence in A. :param n: Length of sequence A :param m: Length of sequence B :param A: List of integers representing sequence A :param B: List of integers representing sequence B :return: Minimum number of operations # dp[i][j] will store the minimum number of operations required for B[0..j-1] to match A[0..i-1] dp = [[0] * (m + 1) for _ in range(n + 1)] # Initialize dp table for i in range(n + 1): dp[i][0] = 0 for j in range(1, m + 1): dp[0][j] = float(\'inf\') for i in range(1, n + 1): for j in range(1, m + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1) return min(dp[i][m] for i in range(n+1))"},{"question":"Andryusha loves solving problems related to strings, and today he came across a unique challenge. Given a string ( s ) of length ( n ), he needs to transform ( s ) according to a specific set of rules: - If a character appears more than once consecutively, it should be replaced with the count of its occurrences followed by the character itself. For example, \\"aaa\\" should be replaced with \\"3a\\". - If a character does not appear consecutively, it should remain unchanged. Andryusha wants to write a program that performs this transformation. Can you help him? # Input - The first line contains an integer ( n ) ((1 leq n leq 100)) — the length of the string. - The second line contains a string ( s ) consisting of lowercase English letters. # Output - Output the transformed string according to the rules described above. # Example Input ``` 7 aaabbbc ``` Output ``` 3a3bc ``` Input ``` 5 hello ``` Output ``` he2llo ``` # Note - In the first example, \\"aaabbbc\\" becomes \\"3a3bc\\" (three \'a\'s, three \'b\'s, and \'c\'). - In the second example, \\"hello\\" becomes \\"he2llo\\" (single \'h\', single \'e\', two \'l\'s, and single \'o\'). Implement this transformation to help Andryusha.","solution":"def transform_string(n, s): Transforms the input string according to the specified rules. Parameters: n (int): Length of the string s (str): Input string Returns: str: Transformed string if n == 0: return \\"\\" transformed = [] count = 1 for i in range(1, n): if s[i] == s[i-1]: count += 1 else: if count > 1: transformed.append(f\\"{count}{s[i-1]}\\") else: transformed.append(s[i-1]) count = 1 # Append the last sequence if count > 1: transformed.append(f\\"{count}{s[-1]}\\") else: transformed.append(s[-1]) return \\"\\".join(transformed)"},{"question":"Maria is very fond of string operations. Recently, she came across a problem where she needs to find the longest substring that contains at most two distinct characters. For example, in the string \\"eceba\\", the longest substring that contains at most two distinct characters is \\"ece\\". Help Maria solve this by writing a program that, given a string, determines the length of the longest substring which contains at most two distinct characters. The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the string. The second line contains a string s of length n, consisting of only lowercase English letters. Print the length of the longest substring that contains at most two distinct characters.","solution":"def length_of_longest_substring_two_distinct(s: str) -> int: Returns the length of the longest substring which contains at most two distinct characters. if len(s) == 0: return 0 max_length = 0 left = 0 character_count = {} for right in range(len(s)): # Add characters to the map and count their frequency character = s[right] if character in character_count: character_count[character] += 1 else: character_count[character] = 1 # If there are more than 2 distinct characters, move the left pointer while len(character_count) > 2: left_character = s[left] character_count[left_character] -= 1 if character_count[left_character] == 0: del character_count[left_character] left += 1 # Calculate the max_length max_length = max(max_length, right - left + 1) return max_length"},{"question":"Veronica is a software engineer who enjoys solving puzzles. She recently stumbled across a puzzle involving special sequences and decided to explore it further. The sequence is defined as follows: - An `n`-length sequence is called special if: 1. It contains only the digits 0 and 1. 2. The number of 1’s in the sequence is even. 3. The sequence is lexicographically smallest possible sequence for its length and condition. Given an integer `n` (1 ≤ n ≤ 10^5), Veronica wants to find out this special sequence for a given length `n`. Can you help Veronica find the lexicographically smallest special sequence of length `n`? The first and only line of input contains a single integer `n`. Output the lexicographically smallest special sequence of length `n`. For example: - Input: `4` - Output: `0001` - Input: `5` - Output: `00010` Explanation: - In the first example, the smallest sequence of length 4 with an even number of 1’s and lexicographically smallest is `0001`. - In the second example, the smallest sequence of length 5 with an even number of 1’s and lexicographically smallest is `00010`. Note: - You may assume the input number always allows for a sequence that satisfies the above conditions.","solution":"def smallest_special_sequence(n): Returns the lexicographically smallest special sequence of length n. if n % 2 == 0: return \'0\' * (n - 2) + \'11\' else: return \'0\' * (n - 1) + \'1\'"},{"question":"Petya is learning about number theory and has encountered the concept of \\"coprime\\" numbers. Two integers are said to be coprime if their greatest common divisor (gcd) is 1. Petya has n pairs of integers and wants to know for each pair if the two integers in the pair are coprime. Can you help Petya determine whether the integers in each pair are coprime? The first line of input contains a single integer n (1 ≤ n ≤ 100). Each of the following n lines contains two integers a and b (1 ≤ a, b ≤ 1000). For each pair, print \\"YES\\" if the integers are coprime, otherwise print \\"NO\\". Sample Input: ``` 3 8 15 12 18 7 9 ``` Sample Output: ``` YES NO YES ``` Explanation: For the pairs (8, 15), the gcd(8, 15) is 1, so they are coprime. For the pairs (12, 18), the gcd(12, 18) is 6, so they are not coprime. For the pairs (7, 9), the gcd(7, 9) is 1, so they are coprime.","solution":"import math def are_coprime_pairs(n, pairs): For each pair of integers, determine if they are coprime. :param n: number of pairs. :param pairs: list of tuples, where each tuple contains two integers. :return: list of strings \\"YES\\" or \\"NO\\" for each pair. results = [] for a, b in pairs: if math.gcd(a, b) == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a tree with `n` nodes. Each node has a value associated with it. You need to perform `m` queries on this tree. Each query can be one of two types: 1. `U v x` — Update the value of the `v`-th node to `x`. 2. `Q v` — Find the sum of the values of all nodes in the subtree rooted at node `v`. Initially, you are given the values of the `n` nodes and the tree\'s structure. You need to support these queries efficiently. The first line of the input contains two integers `n` and `m` (`1 ≤ n, m ≤ 10^5`) — the number of nodes in the tree and the number of queries, respectively. The second line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 10^9`), where `ai` is the value of the `i`-th node. Each of the next `n-1` lines contains two integers `u` and `v` (`1 ≤ u, v ≤ n`), representing an edge between nodes `u` and `v`. Each of the next `m` lines contains a query in the format described above. Output the answer to each query of type `Q`. **Example:** Input: ``` 5 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Q 1 U 2 10 Q 2 Q 3 U 1 15 Q 1 ``` Output: ``` 15 14 3 32 ``` The tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` **Explanation of the example:** 1. Initially, sum of all nodes in the subtree rooted at node 1 is `1+2+3+4+5 = 15`. 2. Update the value of node 2 to 10. 3. Sum of nodes in the subtree rooted at node 2 is `10+4+5 = 19`. 4. Sum of nodes in the subtree rooted at node 3 is `3`. 5. Update the value of node 1 to 15. 6. Sum of nodes in the subtree rooted at node 1 is `15+10+3+4+5 = 37`. Consider efficient data structures and algorithms to support these operations within the given constraints.","solution":"class Tree: def __init__(self, values, edges): self.n = len(values) self.values = values self.tree = [[] for _ in range(self.n)] for u, v in edges: self.tree[u-1].append(v-1) self.tree[v-1].append(u-1) self.subtree_sums = [0] * self.n self.parent = [-1] * self.n self.dfs_setup(0) def dfs_setup(self, node): self.subtree_sums[node] = self.values[node] for child in self.tree[node]: if child != self.parent[node]: self.parent[child] = node self.dfs_setup(child) self.subtree_sums[node] += self.subtree_sums[child] def update(self, v, x): diff = x - self.values[v-1] self.values[v-1] = x self.propagate_update(v-1, diff) def propagate_update(self, node, diff): self.subtree_sums[node] += diff if self.parent[node] != -1: self.propagate_update(self.parent[node], diff) def query(self, v): return self.subtree_sums[v-1] def process_queries(n, m, values, edges, queries): tree = Tree(values, edges) results = [] for query in queries: if query[0] == \'U\': tree.update(query[1], query[2]) elif query[0] == \'Q\': results.append(tree.query(query[1])) return results"},{"question":"Alex is creating a secure messaging app. For added security, he decided to implement a feature that shifts each alphabet character in a message by a fixed number of positions in the alphabet (a technique known as Caesar Cipher). The shifting works as follows: - Each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, \'D\' would be replaced by \'A\', \'E\' would become \'B\', and so on. - The alphabet is cyclic, so after \'Z\', it wraps around back to \'A\'. Given a string representing the original message and an integer representing the shift, implement the encoding mechanism for the Caesar Cipher. The first line contains an integer n (1 ≤ n ≤ 100) — the length of the string. The second line contains the string of n characters consisting only of uppercase English letters. The third line contains an integer k (1 ≤ k ≤ 25) — the number of positions each letter should be shifted. Print the encoded string. Example: Input: 5 HELLO 4 Output: LIPPS","solution":"def caesar_cipher(n, message, k): Encode the given message using Caesar Cipher shifting technique Parameters: n (int): length of the message message (str): the original message consisting only of uppercase English letters k (int): the number of positions to shift each letter Returns: str: the encoded message encoded_message = [] for char in message: # Calculate the new character shifted by k positions new_char = chr(((ord(char) - ord(\'A\') + k) % 26) + ord(\'A\')) encoded_message.append(new_char) return \\"\\".join(encoded_message)"},{"question":"You are given an undirected weighted graph with n nodes and m edges. Your task is to find the longest simple path in this graph. A simple path is a path that does not revisit any node. The input consists of multiple test cases. Each test case starts with two numbers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ n*(n-1)/2) — the number of nodes and the number of edges, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) representing an edge between nodes u and v with weight w. The nodes are numbered from 1 to n. Output the length of the longest simple path for each test case. Here\'s an example input: ``` 2 1 1 2 3 4 3 1 2 1 2 3 2 3 4 3 ``` And the corresponding output: ``` 3 6 ``` Note: - The first test case has 2 nodes and 1 edge with weight 3, so the longest path is just that edge itself. - The second test case has 4 nodes and 3 edges. The longest simple path in this graph is from node 1 to 4 passing through nodes 2 and 3, resulting in a total weight of 6.","solution":"def longest_simple_path(n, m, edges): from itertools import permutations def path_length(path, graph): length = 0 for i in range(len(path) - 1): if (path[i], path[i+1]) in graph: length += graph[(path[i], path[i+1])] else: return float(\'-inf\') return length graph = {} for u, v, w in edges: graph[(u, v)] = w graph[(v, u)] = w nodes = list(range(1, n+1)) max_len = float(\'-inf\') for perm in permutations(nodes): max_len = max(max_len, path_length(perm, graph)) return max_len def process_input(input_data): lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(lines): n, m = map(int, lines[index].split()) index += 1 edges = [] for _ in range(m): u, v, w = map(int, lines[index].split()) edges.append((u, v, w)) index += 1 results.append(longest_simple_path(n, m, edges)) return results"},{"question":"Given an array with n integers where each integer can either be 1 or -1, you are to reorder the array such that the sum of every contiguous subarray of length k (1 ≤ k ≤ n) is non-zero. The first line will contain a single integer n (1 ≤ n ≤ 100,000), the number of integers in the array. The second line will contain n integers, each being either 1 or -1, representing the elements of the array. If it is possible to reorder the array to meet the condition, print \\"YES\\" followed by the reordered array. If it is not possible, print \\"NO\\". For example: # Input: 5 1 -1 1 -1 1 # Output: YES 1 1 -1 -1 1 In this case, all possible subarrays of length k (1 ≤ k ≤ 5) will have non-zero sums. If there are multiple correct arrays, you can print any of them.","solution":"def reorder_array(n, array): Reorders the array such that every contiguous subarray of length k (1 ≤ k ≤ n) has a non-zero sum. Returns \'YES\' and the reordered array if possible, otherwise returns \'NO\'. ones = array.count(1) minus_ones = n - ones # Since the array consists only of 1 and -1 if ones == minus_ones: return \\"NO\\" if ones > minus_ones: reordered = [1] * ones + [-1] * minus_ones else: reordered = [-1] * minus_ones + [1] * ones return \\"YES\\", reordered # Example usage based on the Instructions input_nums = [1, -1, 1, -1, 1] n = len(input_nums) result = reorder_array(n, input_nums) print(result)"},{"question":"The citizens of Algora City are organizing a large chess tournament. The tournament format includes multiple stages, where each contestant must defeat others in their respective groups to advance. There are multiple groups of contestants in each stage. In each group, every contestant will play exactly one game with every other contestant in the same group. Each game will have a winner, and thus the winner earns a point. There is no possibility of a draw or tie. The total points earned by each contestant will be used to determine the winners who will advance to the next stages. You have been asked to calculate the total number of points that will be distributed in each group at the end of all matches. The task is to write a function that, given the number of groups and the sizes of the groups, calculates the total points distributed per group. The first line of input contains a single integer g (1 ≤ g ≤ 1000) — the number of groups. The second line contains g space-separated integers gi (2 ≤ gi ≤ 100) — the sizes of the groups. Print g integers, where each integer represents the total points distributed in the i-th group. For example, in the first sample, you can compute the total points distributed as 10 because in a group of size 5, each player plays 4 games (one with each other player), resulting in 5 * 4 / 2 = 10 points. # Input The first line contains an integer g (1 ≤ g ≤ 1000) — the number of groups. The second line contains g space-separated integers gi (2 ≤ gi ≤ 100) — the sizes of the groups. # Output Print g integers, where each integer represents the total points distributed in the i-th group. # Example Input: ``` 2 3 5 ``` Output: ``` 3 10 ``` # Explanation: For the first group of 3 contestants: Each contestant plays 2 matches: total 3 * 2 / 2 = 3 points distributed. For the second group of 5 contestants: Each contestant plays 4 matches: total 5 * 4 / 2 = 10 points distributed.","solution":"def calculate_points(g, group_sizes): Given the number of groups and the sizes of the groups, calculates the total points distributed per group. Parameters: g (int): The number of groups. group_sizes (list of int): The sizes of the groups. Returns: list of int: A list where each integer represents the total points distributed in the i-th group. points = [] for size in group_sizes: # The formula to calculate the number of matches in a round-robin tournament is gi * (gi - 1) / 2 total_points = size * (size - 1) // 2 points.append(total_points) return points"},{"question":"You are given a sophisticated mechanical clock that operates in a peculiar manner. The clock has `n` gears, each represented by a positive integer that indicates the number of teeth on that gear. The gears are connected in such a way that if gear `i` rotates, it causes gear `i+1` to rotate, but in the opposite direction. Additionally, if the product of the teeth of some consecutive gears is even, those gears will stop rotating entirely. The clock starts with a single rotation of the first gear, and you need to determine the number of rotations that each gear will have after the machine has been running for a favored interval of time. If during this interval, some gears stop entirely because the product of their teeth is even, it\'s considered that those gears and any gear connected downstream of them stop rotating. The first line of input contains a single integer `n` (1 ≤ `n` ≤ 100,000) — the number of gears. The second line contains `n` integers `t1, t2, ..., tn` (1 ≤ `ti` ≤ 1,000,000) — the number of teeth on each gear. Output the number of rotations for each gear after the favored interval of time. If a gear stops rotating, output 0 for that gear. # Example: **Input:** ``` 5 3 5 7 2 9 ``` **Output:** ``` 1 1 1 0 0 ``` **Explanation:** - The first gear has 3 teeth and rotates once. - The second gear has 5 teeth and because the first rotated, it also rotates once but in the opposite direction. - The third gear has 7 teeth, and it rotates once as well. - The fourth gear has 2 teeth, and now the product of the teeth from gear 3 and gear 4 is even (7 * 2 = 14), causing them to stop. - Consequently, the fifth gear with 9 teeth attached to the fourth gear also stops and does not rotate. Write a function to handle this problem in an optimized manner so as to return the number of rotations each gear will have after the favored interval of time.","solution":"def teeth_rotations(n, gears): rotations = [1] * n for i in range(1, n): if gears[i - 1] * gears[i] % 2 == 0: for j in range(i, n): rotations[j] = 0 break return rotations"},{"question":"Emma is an avid gardener and loves arranging her flowers in various patterns. Recently, she came upon an interesting challenge involving her garden beds. Emma has n flower beds arranged in a row, each with a certain number of flowers. She wants to place m dividers between the flower beds such that each segment between two dividers (or the start/end of the row and a divider) has exactly k flower beds, and the sum of the flowers in each segment is the maximum possible. Can you help Emma determine the maximum possible sum of flowers in each segment, considering the given constraints? The first line of the input contains three integers n, m, and k (1 ≤ k ≤ n ≤ 100, 0 ≤ m ≤ (n-1)/k) — the number of flower beds, the number of dividers, and the number of flower beds in each segment. The second line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ 1000) — the number of flowers in each flower bed. Output a single integer — the maximum possible sum of flowers in each segment. In the first example, there are multiple ways to place dividers to get an optimal sum. In the second example, there may be only one way to maximize the sum. Example: Input: 10 2 3 1 2 3 4 5 6 7 8 9 10 Output: 24 Explanation: By placing dividers between the 6th and 7th beds, and between the 9th and 10th beds, the sums of flowers in the segments would be 15, 21, and 24, with 24 being the maximum sum for a segment.","solution":"def max_segment_sum(n, m, k, flowers): Returns the maximum sum of flowers in each segment of k flower beds with m dividers between flower beds. :param n: int - number of flower beds. :param m: int - number of dividers. :param k: int - number of flower beds in each segment. :param flowers: list of int - flower counts in each flower bed. :return: int - maximum possible sum of flowers in each segment. max_sum = 0 # Convert lists of flower beds into segments for i in range(0, n, k): max_sum = max(max_sum, sum(flowers[i:i+k])) return max_sum"},{"question":"You are given a list of integers where some elements appear twice and others appear once. Find an element that appears only once and return it. The first line of the input contains a single integer n (1 ≤ n ≤ 10^6) — the number of integers. The second line contains n space-separated integers — the elements of the list. Each integer in the list is between -10^9 and 10^9. The output should be a single integer that is the element which appears only once in the list. It is guaranteed that at least one such element exists. # Example Input ``` 5 4 3 2 4 3 ``` Output ``` 2 ```","solution":"def find_unique_element(n, arr): Given a list of integers where some elements appear twice and others appear once, find an element that appears only once and return it. :param n: int - number of integers in the list :param arr: list of int - the list of integers :return: int - the element that appears only once element_count = {} # Counting occurrences of each element for num in arr: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 # Finding the element that appears only once for num, count in element_count.items(): if count == 1: return num"},{"question":"Tom works at a warehouse and is in charge of monitoring the stock of different items. He needs a way to efficiently check the quantity of items available within a range of storage units. Each storage unit has a certain item quantity, and Tom often needs to sum up the quantities across a range of contiguous storage units to ensure that the stock levels are adequate. Tom is provided with an initial list of item quantities in each storage unit. After preparing the initial list, Tom will be answering a series of queries where each query asks for the sum of item quantities in a specific range of storage units. You are given an array `stock` of length `n` where `stock[i]` represents the quantity of items in the `i`-th storage unit, and `m` queries, each specifying a range `[l, r]`. For each query, you need to output the sum of item quantities in the storage units from index `l` to index `r` inclusive. **Input:** - The first line contains an integer `n` (1 leq n leq 100,000) — the number of storage units. - The second line contains `n` integers stock[1], stock[2], ldots, stock[n] (0 leq stock[i] leq 10^9) — the quantities of items in each storage unit. - The third line contains an integer `m` (1 leq m leq 100,000) — the number of queries. - Each of the next `m` lines contains two integers `l` and `r` (1 leq l leq r leq n) — the boundaries of the query, 1-based index. **Output:** - For each query, output a single integer — the sum of item quantities in the storage units from index `l` to index `r` inclusive. **Sample Input:** ``` 5 2 3 5 7 11 3 1 3 2 4 1 5 ``` **Sample Output:** ``` 10 15 28 ``` **Explanation:** For the first query, the range is from storage unit 1 to 3, and the sum of quantities is `2 + 3 + 5 = 10`. For the second query, the range is from storage unit 2 to 4, and the sum of quantities is `3 + 5 + 7 = 15`. For the third query, the range is from storage unit 1 to 5, and the sum of quantities is `2 + 3 + 5 + 7 + 11 = 28`.","solution":"def preprocess_stock(stock): Preprocess the stock list to create a prefix sum array. prefix_sum = [0] * (len(stock) + 1) for i in range(1, len(stock) + 1): prefix_sum[i] = prefix_sum[i - 1] + stock[i - 1] return prefix_sum def query_sum(l, r, prefix_sum): Given the prefix sum array, calculate the sum from index l to r (1-based). return prefix_sum[r] - prefix_sum[l - 1] def process_queries(stock, queries): Process a list of queries on the stock list. Returns a list of results for each query. prefix_sum = preprocess_stock(stock) results = [] for l, r in queries: results.append(query_sum(l, r, prefix_sum)) return results"},{"question":"Given a square grid of size n times n where each cell can either be empty (represented by \'.\') or blocked (represented by \'#\'), you need to determine the number of unique paths from the top-left corner of the grid to the bottom-right corner. The only moves allowed are to the right or down. Write a function that returns the number of unique paths. The function should take the following argument: - A 2D list grid of size n times n consisting of characters \'.\' and \'#\'. The first cell (top-left) and the last cell (bottom-right) will not be blocked. Note: - A path is valid if it only passes through empty cells (\'.\'). - The grid can have obstacles represented by \'#\'. - You have to count paths which are avoiding obstacles. The first line contains an integer n (1 le n le 100) — the size of the grid. The next n lines contain n characters each, either \'.\' or \'#\', representing the grid. Output the number of unique paths from the top-left corner to the bottom-right corner. The function should return the number of unique paths as an integer or `0` if there are no such paths. Example: Input: 3 . . # . # . . . . Output: 2","solution":"def unique_paths(grid): Returns the number of unique paths from the top-left to the bottom-right corner steping only into empty cells (\'.\'). n = len(grid) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 # Starting point for i in range(n): for j in range(n): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"Peter is planning a party and wants to prepare a seating arrangement. There are n seats in a row. Each seat can either be occupied or left empty. Given the current state of the seating arrangement as a string consisting of \\"0\\" (indicating an empty seat) and \\"1\\" (indicating an occupied seat), Peter wants to make sure that no two occupied seats are next to each other. Peter can either leave a seat as it is or move someone from an occupied seat to an empty one. For each seat that was initially occupied in the arrangement, determine the minimum number of moves required to achieve a seating arrangement where no two occupied seats are adjacent. The first line contains a single integer n (1 le n le 10^5) — the number of seats. The second line contains a string of length n, which is the current seating arrangement. Output a single integer — the minimum number of moves required. Examples: ``` Input 8 10011001 Output 1 Input 5 11001 Output 1 Input 4 1111 Output 2 ```","solution":"def min_moves_to_separate_seats(n, seating): # Let\'s start by storing all occupied seat indices in a list occupied_indices = [i for i, seat in enumerate(seating) if seat == \'1\'] # Initialize number of moves to 0 moves = 0 # Process each pair-wise adjacent \'1\'s in the list for i in range(1, len(occupied_indices)): # Calculate the distance between two occupied seats distance = occupied_indices[i] - occupied_indices[i-1] # If the distance is 1, it means they are adjacent and we need to move one of them if distance == 1: moves += 1 # Move the current seat one position away to the left (if possible) occupied_indices[i] -= 1 return moves # Example usage: # If you test with the input, \\"8n10011001\\", it should return 1 # print(min_moves_to_separate_seats(8, \\"10011001\\"))"},{"question":"Sandra has just bought a new robot vacuum cleaner. The robot starts at a specific position on a grid and must visit every cell exactly once. The grid consists of n rows and m columns, and some of the cells are obstacles that the robot cannot pass through or clean. Sandra can program the robot to move up, down, left, or right, and she wants to know if it\'s possible to set a sequence of moves that allows the robot to clean all the non-obstacle cells exactly once. Determine if there is a path for the robot to visit each non-obstacle cell exactly once. The first line of input contains two integers n and m (1 le n, m le 10^3) — the number of rows and columns, respectively. The next n lines describe the grid, where each line contains m characters. Each character is either: - \'.\' indicating a cleanable cell, - \'#\' indicating an obstacle, or - \'S\' indicating the starting position of the robot (there is exactly one \'S\'). Print \\"YES\\" if there exists a path that visits every cleanable cell exactly once, and \\"NO\\" otherwise. **Example:** **Input:** ``` 3 4 S..# ..#. ..#. ``` **Output:** ``` NO ```","solution":"def can_robot_clean_every_cell(n, m, grid): from collections import deque # Find the starting position start = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) def is_valid(x, y, visited): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and (x, y) not in visited # Perform BFS to check if all cells can be visited exactly once directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() to_visit = deque([(start, visited)]) while to_visit: (x, y), visited = to_visit.popleft() visited.add((x, y)) if len(visited) == sum(row.count(\'.\') for row in grid): return \'YES\' for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, visited): new_visited = visited.copy() new_visited.add((nx, ny)) if len(new_visited) <= sum(row.count(\'.\') for row in grid): to_visit.append(((nx, ny), new_visited)) return \'NO\' # Example usage: n = 3 m = 4 grid = [ \\"S..#\\", \\"..#.\\", \\"..#.\\" ] print(can_robot_clean_every_cell(n, m, grid)) # Output: NO"},{"question":"In a distant land, there are n cities connected by m bidirectional roads. Each road connects two different cities and has a certain length associated with it. The cities are numbered from 1 to n. Your task is to help the king by determining the shortest path from a specified starting city to all other cities. However, not all cities are reachable from any starting city due to some roads being blocked by snow during the winter. You need to provide the shortest path length from the starting city to each of the other cities. If a city is not reachable from the starting city, return -1 for that city. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of cities and the number of roads. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000) — representing a road between cities u and v with length w. The last line contains an integer s (1 ≤ s ≤ n) — the starting city. Output n integers where the i-th integer is the shortest distance from the starting city s to the i-th city. If a city is not reachable, print -1 for that city. Note that the distance from the starting city to itself should be 0. Example: Input: 5 6 1 2 4 1 3 2 3 2 1 3 4 7 2 4 5 4 5 3 1 Output: 0 3 2 8 11","solution":"import heapq def shortest_paths(n, m, roads, s): Determines the shortest path lengths from city `s` to all other cities using Dijkstra\'s algorithm. Parameters: - n (int): Number of cities. - m (int): Number of roads. - roads (list of tuples): Each tuple contains three integers (u, v, w) representing a road. - s (int): The starting city. Returns: - List of integers representing shortest paths from city `s` to each city from 1 to n. If a city is not reachable, the distance is -1. Distance to the starting city is 0. # Initialize adjacency list adj = [[] for _ in range(n + 1)] for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) # Initialize distances with inf, except for the starting city dist = [float(\'inf\')] * (n + 1) dist[s] = 0 # Min-heap to get the city with the smallest distance min_heap = [(0, s)] # (distance, city) while min_heap: current_distance, u = heapq.heappop(min_heap) # Skip processing if we find a better path if current_distance > dist[u]: continue for v, weight in adj[u]: distance = current_distance + weight # If a shorter path to v is found if distance < dist[v]: dist[v] = distance heapq.heappush(min_heap, (distance, v)) # Replace \'inf\' with -1 for unreachable cities and remove 0th index return [-1 if d == float(\'inf\') else d for d in dist][1:]"},{"question":"Polycarp is organizing a coding competition with n participants. Each participant has a unique integer rating, where the rating is an integer between 1 and n inclusive. However, at the last moment, one of the participants dropped out and Polycarp now has a list of n-1 unique ratings. Polycarp is now trying to figure out which participant’s rating is missing from the list. Input The first line contains a single integer n (2 ≤ n ≤ 100,000) — the original number of participants. The second line contains n-1 distinct integers r1, r2, ..., rn-1 (1 ≤ ri ≤ n) — the ratings of the remaining participants. Output Print a single integer — the rating of the participant who dropped out. Example Input 5 1 2 4 5 Output 3","solution":"def find_missing_rating(n, remaining_ratings): Finds the missing rating in the list of participants. Parameters: n (int): The original number of participants. remaining_ratings (list): List of ratings of remaining participants. Returns: int: The missing rating. total_sum = n * (n + 1) // 2 remaining_sum = sum(remaining_ratings) return total_sum - remaining_sum"},{"question":"Karina is preparing for a hiking trip and she wants to buy a backpack. There are several models available, each with different capacities and prices. In addition to capacity, each backpack has a weight, and Karina can only carry a certain maximum weight on her back. She wants to maximize the capacity of the backpack she chooses while ensuring that the backpack\'s weight does not exceed her carrying capacity and the price is within her budget. Given the details for each backpack and Karina\'s constraints, determine the model of the backpack with the highest capacity that meets her requirements. If there are multiple models with the same capacity, choose the cheapest one. The first line of the input contains three integers n, W, and B (1 ≤ n ≤ 10^5, 1 ≤ W, B ≤ 10^9) — the number of available backpack models, the maximum weight Karina can carry, and her budget, respectively. Each of the next n lines contains three integers ci, vi, and wi (1 ≤ ci, vi, wi ≤ 10^9) — the price, capacity, and weight of the i-th backpack model. Print the capacity of the best backpack model that Karina can buy that meets her carrying capacity and budget constraints. If no such backpack exists, print -1. **Example Input:** ``` 5 15 100 80 40 10 60 25 15 70 30 14 50 20 8 90 35 12 ``` **Example Output:** ``` 40 ``` In the example, Karina can buy the first backpack which has a capacity of 40, a weight of 10, and a price of 80. This is the highest capacity within her carrying capacity and budget constraints.","solution":"def best_backpack(n, W, B, models): Returns the capacity of the best backpack model that Karina can buy, which meets her weight and budget constraints. max_capacity = -1 best_price = float(\'inf\') for price, capacity, weight in models: if weight <= W and price <= B: if capacity > max_capacity or (capacity == max_capacity and price < best_price): max_capacity = capacity best_price = price return max_capacity # Example usage # n = 5 # W = 15 # B = 100 # models = [(80, 40, 10), (60, 25, 15), (70, 30, 14), (50, 20, 8), (90, 35, 12)] # print(best_backpack(n, W, B, models)) # Expected output: 40"},{"question":"You have been tasked with developing a new feature for a social media application. The feature involves managing friend requests and verifying friendships among users. Each user can send and receive a friend request. If a user accepts a friend request, both users become friends. Additionally, users can verify if they are friends with other users by querying the system. Formally, you are given a series of operations of the following types: - \\"FRIEND X Y\\": This operation means user X sends a friend request to user Y. If user Y accepts, then X and Y become friends. - \\"VERIFY X Y\\": This operation means you need to verify if user X and user Y are friends. Consider that friend requests are always accepted. If X sends a friend request to Y, they become friends immediately. Additionally, friendship is symmetric: if X is a friend of Y, then Y is a friend of X. Write a program that processes a series of operations and outputs whether the given users are friends after each \\"VERIFY\\" operation. The first line contains an integer t (1 leq t leq 100)—the number of test cases. The description of the test cases follows. Each test case starts with an integer q (1 leq q leq 1000)—the number of operations. Each of the next q lines contains an operation in one of the formats: \\"FRIEND X Y\\" or \\"VERIFY X Y\\". Users are represented by positive integers not greater than 1000. For each \\"VERIFY X Y\\" operation, output \\"YES\\" if X and Y are friends, otherwise output \\"NO\\". Example: ``` Input: 2 5 FRIEND 1 2 FRIEND 2 3 VERIFY 1 3 FRIEND 3 4 VERIFY 1 4 3 FRIEND 5 6 VERIFY 5 6 VERIFY 5 7 Output: YES YES YES NO ``` Explanation: In the first test case: 1. Users 1 and 2 become friends. 2. Users 2 and 3 become friends. 3. Since user 1 is a friend of user 2, and user 2 is a friend of user 3, user 1 and user 3 are friends. So, the output for the first \\"VERIFY\\" is \\"YES\\". 4. Users 3 and 4 become friends. 5. Since user 1 is a friend of user 2, user 2 is a friend of user 3, and user 3 is a friend of user 4, user 1 and user 4 are friends. The output for the second \\"VERIFY\\" is \\"YES\\". In the second test case: 1. Users 5 and 6 become friends. 2. User 5 and user 6 are directly friends, so the output for the first \\"VERIFY\\" is \\"YES\\". 3. User 5 and user 7 have no friendship connection, so the output for the second \\"VERIFY\\" is \\"NO\\".","solution":"class FriendManager: def __init__(self): self.parent = {} self.rank = {} def find(self, user): if self.parent[user] != user: self.parent[user] = self.find(self.parent[user]) return self.parent[user] def union(self, user1, user2): root1 = self.find(user1) root2 = self.find(user2) if root1 != root2: if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 else: self.parent[root2] = root1 self.rank[root1] += 1 def add_user(self, user): if user not in self.parent: self.parent[user] = user self.rank[user] = 0 def friend(self, user1, user2): self.add_user(user1) self.add_user(user2) self.union(user1, user2) def verify(self, user1, user2): if user1 in self.parent and user2 in self.parent and self.find(user1) == self.find(user2): return \\"YES\\" return \\"NO\\" def process_operations(t, test_cases): results = [] for i in range(t): manager = FriendManager() for operation in test_cases[i]: op, x, y = operation.split() x, y = int(x), int(y) if op == \\"FRIEND\\": manager.friend(x, y) elif op == \\"VERIFY\\": results.append(manager.verify(x, y)) return results"},{"question":"You are given an array of integers and a positive integer k. Find the maximum number of distinct integers in any subarray of length k in the given array. Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2 * 10^5) — the size of the array and the length of the subarray, respectively. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output: - Print a single integer — the maximum number of distinct integers in any subarray of length k. Example: Input: 7 3 4 1 4 5 6 4 2 Output: 3 Explanation: In the array [4, 1, 4, 5, 6, 4, 2], the subarrays of length 3 are: - [4, 1, 4] with 2 distinct integers (4 and 1) - [1, 4, 5] with 3 distinct integers (1, 4, and 5) - [4, 5, 6] with 3 distinct integers (4, 5, and 6) - [5, 6, 4] with 3 distinct integers (5, 6, and 4) - [6, 4, 2] with 3 distinct integers (6, 4, and 2) Thus, the maximum number of distinct integers in any subarray of length 3 is 3.","solution":"def max_distinct_integers_in_subarray(n, k, arr): Finds the maximum number of distinct integers in any subarray of length k. if not arr or k > n: return 0 from collections import defaultdict max_distinct_count = 0 current_distinct_count = 0 counts = defaultdict(int) # Initialize the counts for the first window for i in range(k): if counts[arr[i]] == 0: current_distinct_count += 1 counts[arr[i]] += 1 max_distinct_count = current_distinct_count # Slide the window across the array for i in range(k, n): # Remove the element that\'s left the window if counts[arr[i - k]] == 1: current_distinct_count -= 1 counts[arr[i - k]] -= 1 # Add the new element if counts[arr[i]] == 0: current_distinct_count += 1 counts[arr[i]] += 1 # Update the maximum distinct count max_distinct_count = max(max_distinct_count, current_distinct_count) return max_distinct_count"},{"question":"You are given an array of integers of length n, and you need to handle q queries. Each query consists of two integers, `l` and `r` (1 ≤ l ≤ r ≤ n) and asks for the sum of the elements in the subarray from index l to index r (both inclusive). The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the length of the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n ( - 10^9 ≤ a_i ≤ 10^9) — the elements of the array. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) for the queries. Output q lines, the i-th of them should contain the sum of the elements in the subarray from index l to r for the i-th query. Example Input: 5 3 1 2 3 4 5 1 3 2 4 1 5 Output: 6 9 15 Explanation: For the first query, the subarray is [1, 2, 3], and the sum is 6. For the second query, the subarray is [2, 3, 4], and the sum is 9. For the third query, the subarray is [1, 2, 3, 4, 5], and the sum is 15.","solution":"def preprocess_prefix_sum(array): Preprocess the array to create a prefix sum array. n = len(array) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + array[i] return prefix_sum def sum_query(prefix_sum, l, r): Returns the sum of the subarray from index l to index r inclusive. return prefix_sum[r] - prefix_sum[l - 1] def handle_queries(n, q, array, queries): Handles multiple queries and returns the results as a list. prefix_sum = preprocess_prefix_sum(array) results = [] for l, r in queries: results.append(sum_query(prefix_sum, l, r)) return results"},{"question":"You run a food delivery service that delivers fresh meals to customers based on their specific dietary preferences. You have a list of orders coming from customers, each specifying a dietary requirement and a delivery time to be scheduled for within the next 24 hours. The orders need to be scheduled in such a way that meals are delivered timely and efficiently, without any two deliveries happening at exactly the same time to avoid driver conflicts. Each order is represented by a customer ID, the delivery time (in minutes from now), and a dietary flag that can be vegan, vegetarian, gluten-free, or regular. Your job is to write a function that schedules these deliveries in a conflict-free manner, minimizing any delays when scheduling conflicts are resolved. The function should take an integer n (the number of orders) followed by n lines, each containing the customer ID, the delivery time (as an integer in minutes from now), and a dietary flag (as a string from the set {\\"vegan\\", \\"vegetarian\\", \\"gluten-free\\", \\"regular\\"}). Your function should output the scheduled delivery time for each order in the same order they were input. If a conflict occurs, resolve it by scheduling the conflicting delivery for every subsequent minute until no conflicts remain. The dietary flag and customer ID are not used in resolving conflicts but must be included in the output. # Input - The first line contains an integer n (1 ≤ n ≤ 100). - The next n lines each contain a customer ID (an integer between 1 and 10^6), a delivery time (an integer between 0 and 1439, representing minutes within a 24-hour period), and a dietary flag (one of \\"vegan\\", \\"vegetarian\\", \\"gluten-free\\", \\"regular\\"). # Output - Print n lines, each containing the customer ID, the (possibly adjusted) delivery time, and the dietary flag in the same order they were input. # Example Input ``` 5 101 30 vegan 102 30 vegetarian 103 45 gluten-free 104 60 regular 105 60 vegan ``` Output ``` 101 30 vegan 102 31 vegetarian 103 45 gluten-free 104 60 regular 105 61 vegan ``` # Note This problem requires handling scheduling conflicts to ensure that no two deliveries are scheduled at the same time. Adjust delivery times while maintaining the original order of customers and providing a conflict-free schedule.","solution":"def schedule_deliveries(n, orders): scheduled_times = {} result = [] for order in orders: customer_id, delivery_time, dietary_flag = order while delivery_time in scheduled_times: delivery_time += 1 scheduled_times[delivery_time] = (customer_id, dietary_flag) result.append((customer_id, delivery_time, dietary_flag)) return result"},{"question":"A team of researchers is analyzing a sequence of numbers representing celestial readings taken at regular intervals. They believe that there is a contiguous subsequence within this sequence that has the maximum possible sum. Your task is to help them find this subsequence. You are given an array of integers. You need to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. **Input:** - The first line contains a single integer n (1 le n le 10^5), the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9), representing the elements of the array. **Output:** - Output a single integer, the maximum sum of the contiguous subarray. **Example:** Input: ``` 8 -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 ``` Explanation: The contiguous subarray `[4, -1, 2, 1]` has the largest sum = 6. Consider using an efficient algorithm to solve this problem, such as Kadane\'s algorithm, to ensure that your solution runs in optimal time complexity.","solution":"def max_subarray_sum(nums): Function to find the maximum sum of a contiguous subarray using Kadane\'s Algorithm. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Example usage: # if __name__ == \\"__main__\\": # n = int(input().strip()) # nums = list(map(int, input().strip().split())) # print(max_subarray_sum(nums))"},{"question":"John has several boxes of chocolates, each containing a different number of chocolates. He wants to distribute these chocolates to his friends as evenly as possible. However, he only can give away all the chocolates from a box to one friend at a time, meaning one box cannot be split between multiple friends. John is also curious about how many friends can get at least one box of chocolates. Given the number of chocolate boxes and the number of chocolates in each box, determine the number of friends who can get chocolates such that the total amount of chocolates each friend receives differs by no more than one box from any other friend. The first line contains an integer n (1 ≤ n ≤ 100), the number of boxes of chocolates. The second line contains n integers, where the i-th integer ci (1 ≤ ci ≤ 1000) represents the number of chocolates in the i-th box. Print a single integer — the maximal number of friends who can get at least one box of chocolates. # Example: **Input:** ``` 5 8 6 5 7 10 ``` **Output:** ``` 5 ``` **Explanation:** In this case, John can distribute the boxes to 5 friends such that each one gets exactly one box, which is the maximum number possible.","solution":"def max_friends(n, chocolates): Determine the maximum number of friends who can receive at least one box of chocolates. Parameters: n (int): Number of boxes chocolates (list): List of integers representing chocolates in each box Returns: int: Maximum number of friends who can receive at least one box of chocolates # The maximum number of friends who can receive chocolates is simply the # number of chocolate boxes, since each box must go to one friend and cannot be split. return n"},{"question":"You are given an array of integers representing the heights of students. The students need to line up such that there are no consecutive students with the same height. You are allowed to rearrange the order of the students in any way, but if it\'s not possible to avoid consecutive students of the same height, you should determine that too. Write a function that determines if such an arrangement is possible. If it is possible, return one such arrangement. If it is not possible, return \\"NO\\". Input: The first line contains an integer n (1 ≤ n ≤ 1000), the number of students. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), the heights of the students. Output: If it\'s possible to rearrange the students such that no two consecutive students have the same height, print \\"YES\\" and a possible rearrangement in the second line. Otherwise, print \\"NO\\". Example 1: Input: 5 1 1 2 2 3 Output: YES 1 2 1 3 2 Example 2: Input: 4 4 4 4 4 Output: NO","solution":"from collections import Counter from heapq import heappush, heappop def line_up_students(n, heights): if not heights: return \\"NO\\" counter = Counter(heights) if max(counter.values()) > (n + 1) // 2: return \\"NO\\" max_heap = [] for height, count in counter.items(): heappush(max_heap, (-count, height)) result = [] prev_count, prev_height = 0, 0 while max_heap: count, height = heappop(max_heap) result.append(height) if prev_count < 0: heappush(max_heap, (prev_count, prev_height)) prev_count = count + 1 prev_height = height return \\"YESn\\" + \' \'.join(map(str, result)) # Example Usage: # n = 5 # heights = [1, 1, 2, 2, 3] # print(line_up_students(n, heights))"},{"question":"The kingdom of Zaloria is divided into numerous towns connected by a network of roads. The kingdom is governed by a wise queen who wants to ensure that her subjects can travel efficiently between towns. She plans to improve the road network by ensuring all towns are accessible by a series of bidirectional roads. However, the kingdom’s treasury is limited and can only support the construction of the shortest possible new roads to achieve this goal. You are tasked with determining the minimum total length of the new roads required to ensure all towns are accessible from each other. The input consists of: 1. An integer n (2 ≤ n ≤ 1000), the number of towns. 2. An nxn matrix where the jth number in the ith row represents the length of the road between town i and town j. If there is no direct road between town i and town j, the entry is -1. In the first line, print a single integer – the minimum total length of the new roads needed to make all towns connected. If it\'s not possible to connect all towns, print \\"IMPOSSIBLE\\". **Constraints:** - -1 ≤ a_ij ≤ 10^6 for 1 ≤ i, j ≤ n - a_ii = 0 - If a_ij = -1 and i ≠ j, there\'s no direct road between town i and town j. **Example Input:** ``` 5 0 2 -1 6 -1 2 0 3 8 5 -1 3 0 -1 7 6 8 -1 0 9 -1 5 7 9 0 ``` **Example Output:** ``` 16 ``` **Explanation:** In the provided example, the optimal solution constructs a new road network while ensuring the minimum total length of roads to connect all towns.","solution":"def minimum_new_road_length(n, roads): # Implement Kruskal\'s algorithm for finding the Minimum Spanning Tree (MST) import heapq def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 edges = [] for i in range(n): for j in range(i+1, n): if roads[i][j] != -1: edges.append((roads[i][j], i, j)) # Sort all the edges in non-decreasing order of their weight heapq.heapify(edges) parent = [i for i in range(n)] rank = [0] * n result = 0 edge_count = 0 while edges and edge_count < n - 1: weight, u, v = heapq.heappop(edges) root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: edge_count += 1 result += weight union(parent, rank, root_u, root_v) if edge_count != n - 1: return \\"IMPOSSIBLE\\" return result"},{"question":"Pitfalla, a young alchemist, wants to create a powerful elixir that requires three types of rare ingredients. She has a mixture containing quantities of these ingredients along with some impurities. Given the current quantities of the ingredients and the required quantities for the elixir, Pitfalla wants to know the minimum quantity of impurities she can have if she forms the new mixture with the required quantities. You are given six integers a1, a2, a3, r1, r2, r3 where a1, a2, a3 represent the current quantities of the three ingredients and r1, r2, r3 represent the required quantities for the elixir. Additionally, there are some units of impurities in the current mixture, which do not affect the quantities of the ingredients. Determine the minimum total quantity of impurities that Pitfalla can have in the new mixture if she takes out the required amounts of the ingredients. The first line of the input contains six space-separated integers a1, a2, a3, r1, r2, r3 (0 ≤ a1, a2, a3, r1, r2, r3 ≤ 2000). It is guaranteed that it is possible to obtain the required quantities. Print a single integer — the minimum quantity of impurities in the new mixture after extracting the required ingredients. In the first example, Pitfalla can use exactly the required quantities of the ingredients without taking any impurities. Thus, the impurities will be 0. In the second example, Pitfalla uses the exact required quantities of the ingredients as well. Input: 3 4 5 1 2 3 Output: 0 Input: 10 15 20 5 10 15 Output: 0","solution":"def minimal_impurities(a1, a2, a3, r1, r2, r3): Given the current quantities of three ingredients (a1, a2, a3) and the required quantities (r1, r2, r3), this function returns the minimum quantity of impurities that can be left in the new mixture after extracting the required ingredients. # Calculate the surplus amounts after taking out required amounts surplus1 = a1 - r1 surplus2 = a2 - r2 surplus3 = a3 - r3 # Impurities are the surplus amounts added together impurities = surplus1 + surplus2 + surplus3 return impurities # The function returns the minimum impurities as the sum of all the extra parts after using up # the exact required quantities since impurities is not explicitly provided in the problem"},{"question":"Lena has a string s consisting of lowercase English letters. She wants to transform this string into a palindrome by performing a series of operations. In one operation, she can choose any character in the string and change it to any other lowercase English letter. Help Lena find the minimum number of operations required to transform the given string into a palindrome. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The descriptions of the test cases follow. Each test case is described by a single line containing a string s (1 ≤ |s| ≤ 1000) — the string that Lena wants to transform into a palindrome. For each test case, output a single integer — the minimum number of operations required to transform the given string into a palindrome. # Sample Input ``` 3 abc aabb abcd ``` # Sample Output ``` 1 2 2 ``` # Explanation - For the first test case, \\"abc\\" can be turned into \\"aba\\", \\"aaa\\" or \\"cbc\\" with just one change. - For the second test case, one of the possible transformations is changing the first \\"a\\" to \\"b\\" and the last \\"b\\" to \\"a\\" to get \\"baab\\". - For the third test case, \\"abcd\\" can be turned into \\"abca\\" by changing \'d\' to \'a\' and changing \'c\' to \'b\'.","solution":"def min_operations_to_palindrome(s): Return the minimum number of operations required to transform the given string into a palindrome. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations def process_test_cases(test_cases): results = [] for s in test_cases: results.append(min_operations_to_palindrome(s)) return results"},{"question":"In a city, there are several cafes, each located at a point on a street that can be represented by a one-dimensional number line. You are given the positions of these cafes, and your task is to determine the minimum distance from each position on the street to the nearest cafe. Cafes are represented by their positions on the number line. For simplicity, assume the street can be represented as an integer range from 0 to m. Given the positions of n cafes, you need to compute and return an array of size m+1, where each element at index i represents the minimum distance from point i to the nearest cafe. For example, if there are cafes at positions 2 and 6, the distance array would be: ``` Distances: [2, 1, 0, 1, 2, 1, 0, 1, 2, ...] ``` # Input - The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), representing the number of cafes and the length of the street. - The second line contains n distinct integers ci (0 ≤ ci ≤ m), the positions of the cafes. # Output - Print m+1 integers, where the i-th integer represents the minimum distance from point i to the nearest cafe. # Example Input ``` 2 10 2 6 ``` Output ``` 2 1 0 1 2 1 0 1 2 3 4 ``` # Note For the position array [2, 6], the distance of each point from the nearest cafe is computed and printed as a sequence. Make sure to optimize your solution to handle the maximum constraint sizes efficiently.","solution":"def minimum_distances_to_cafes(n, m, cafes): Returns the minimum distance from each point on the street to the nearest cafe. Parameters: n (int): Number of cafes. m (int): Length of the street. cafes (list of int): Positions of the cafes. Returns: list of int: Minimum distances from each point on the street to the nearest cafe. distances = [float(\'inf\')] * (m + 1) for cafe in cafes: distances[cafe] = 0 # Forward pass to calculate distances for i in range(1, m + 1): distances[i] = min(distances[i], distances[i - 1] + 1) # Backward pass to calculate distances for i in range(m - 1, -1, -1): distances[i] = min(distances[i], distances[i + 1] + 1) return distances"},{"question":"You\'re given an array of integers representing the heights of blocks. The goal is to construct the longest strictly increasing subsequence of blocks by rearranging the blocks. However, you can only move a block if it is to an adjacent position in the current sequence. Find the length of the longest strictly increasing subsequence you can achieve. The first line contains a single integer n (1 le n le 2 cdot 10^5), the number of blocks. The second line contains n space-separated integers h_1, h_2, ldots, h_n (1 le h_i le 10^9), representing the heights of the blocks. Output a single integer, the length of the longest strictly increasing subsequence that can be obtained through adjacent swaps. In the first sample, the blocks are already arranged in an increasing order. In the second sample, the optimal arrangement is [2, 3, 4], moving the 3 after the 2 and then the 4 to the end. Example: Input: 5 1 2 3 4 5 Output: 5 Input: 5 5 3 4 2 1 Output: 3","solution":"def longest_increasing_subsequence(n, heights): Returns the length of the longest strictly increasing subsequence that can be achieved through adjacent swaps. # Special cases if n == 1: return 1 # Find the longest increasing subsequence with adjacent constraint max_len = 1 current_len = 1 for i in range(1, n): if heights[i] > heights[i-1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"You are given an unsorted array of integers. Find the length of the longest consecutive elements sequence. The array contains n integers where n (1 ≤ n ≤ 10^5). Each integer in the array lies in the range [-10^9, 10^9]. Your task is to write a function that takes this array as input and returns an integer representing the length of the longest consecutive elements sequence. The function signature should be: ```python def longest_consecutive(nums: List[int]) -> int: ``` Note: - A consecutive sequence is a series of numbers in which each number is exactly one more than the previous number. - The order of elements in the input array doesn\'t affect the result. # Example Input: ``` nums = [100, 4, 200, 1, 3, 2] ``` Output: ``` 4 ``` Explanation: The longest consecutive sequence is [1, 2, 3, 4]. Its length is 4. # Example Input: ``` nums = [0, -1, 2, -3, 3, 0, 2] ``` Output: ``` 2 ``` Explanation: The longest consecutive sequence is [-1, 0]. Its length is 2. Constraints: - Time complexity should ideally be O(n) to handle large arrays efficiently.","solution":"from typing import List def longest_consecutive(nums: List[int]) -> int: Returns the length of the longest consecutive elements sequence in a list of integers. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only start a new streak if number is the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 # Check the next numbers in the sequence while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given an array of size n that contains non-negative integers. An array segment sum is defined as the sum of a contiguous subarray. Your task is to answer q queries, where each query asks for the maximum segment sum in an array subsegment defined by given indices. The first line of the input contains two integers n and q (1 le n le 10^6, 1 le q le 10^5) — the length of the array and the number of queries. The second line contains n non-negative integers a_1, a_2, ldots, a_n (0 le a_i le 10^6) — the elements of the array. The next q lines contain two integers l and r (1 le l le r le n) — the left and right indices of the subsegment. For each query, output the maximum segment sum in the subsegment defined by the indices l and r. # Example Input ``` 6 3 3 2 5 -1 2 4 1 3 2 5 1 6 ``` Output ``` 10 8 15 ``` **Note:** In the explanation of the example, the first query asks for the maximum segment sum of the subsegment from index 1 to 3. The array segment is [3, 2, 5] and the maximum segment sum is 10. The second query asks for the subsegment from index 2 to 5. The array segment is [2, 5, -1, 2] and the maximum segment sum is 8. The third query asks for the subsegment from index 1 to 6. The array segment is [3, 2, 5, -1, 2, 4] and the maximum segment sum is 15.","solution":"def max_segment_sum(arr, queries): def max_subarray_sum(nums): max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global result = [] for l, r in queries: subarray = arr[l-1:r] result.append(max_subarray_sum(subarray)) return result"},{"question":"Given two integers `a` and `b`, determine the smallest non-negative integer `x` such that the bitwise AND of `a` and `x` is zero, and `a + x` is divisible by `b`. Formally, you need to find the smallest non-negative integer `x` such that: 1. `(a & x) == 0` 2. `(a + x) % b == 0` The first line of input contains a single integer `t` (1 ≤ t ≤ 10^4), denoting the number of test cases. Each of the next `t` lines contains two integers `a` and `b` (1 ≤ a, b ≤ 10^9). Print `t` lines. In the i-th line, print the smallest non-negative integer `x` that meets the conditions above for the i-th test case. # Example Input: ``` 3 5 7 10 6 8 4 ``` Output: ``` 2 2 0 ``` # Explanation: 1. For `a = 5` and `b = 7`, the smallest `x` that satisfies `(5 & x) == 0` and `(5 + x) % 7 == 0` is `2` because `5 & 2 == 0` and `(5 + 2) % 7 == 0`. 2. For `a = 10` and `b = 6`, the smallest `x` that satisfies `(10 & x) == 0` and `(10 + x) % 6 == 0` is `2` because `10 & 2 == 0` and `(10 + 2) % 6 == 0`. 3. For `a = 8` and `b = 4`, the smallest `x` that satisfies `(8 & x) == 0` and `(8 + x) % 4 == 0` is `0` because `8 & 0 == 0` and `(8 + 0) % 4 == 0`.","solution":"def find_smallest_x(a, b): Returns the smallest non-negative integer x such that: 1. (a & x) == 0 2. (a + x) % b == 0 remainder = a % b if remainder == 0: return 0 return b - remainder def process_test_cases(t, test_cases): results = [] for a, b in test_cases: results.append(find_smallest_x(a, b)) return results"},{"question":"A tool company produces a series of special wrenches. Each wrench is characterized by its length and a strength factor. A wrench can only be used in a continuous range of lengths on a bolt. The company has just received an order to use a series of wrenches to tighten bolts. Finding the optimal set of wrenches that can cover the entire requested range of bolt lengths is challenging. Given a list of wrenches, each described by its length and strength factor, and the range of bolt lengths we need to cover, determine if it is possible to select a subset of these wrenches such that the sum of their lengths equals exactly the required bolt length range and the sum of their strength factors meets or exceeds a given threshold. Formally: - The first line contains three integers, n (1 ≤ n ≤ 1000), l (1 ≤ l ≤ 1000), and s (1 ≤ s ≤ 10000) — the number of available wrenches, the required length range of the bolt, and the required sum of strength factors respectively. - The second line contains n integers, representing the lengths of the wrenches. - The third line contains n integers, representing the strength factors of the wrenches. Output \\"YES\\" if it is possible to select a subset of wrenches such that their total length is exactly l and their total strength factor is at least s. Otherwise, output \\"NO\\". # Example Input: ``` 4 8 15 3 5 2 6 5 7 3 10 ``` Output: ``` YES ``` Explanation: - Selecting the wrenches with lengths 3 and 5 gives a total length of 8, and the corresponding strength factors are 5 and 7, totaling 12, which is less than 15. - Selecting the wrenches with lengths 2 and 6 gives a total length of 8, and the corresponding strength factors are 3 and 10, totaling 13, which is also less than 15. - No subset meets both criteria. Therefore, the correct output is actually \\"NO\\".","solution":"def can_cover_range(n, l, s, lengths, strengths): Determine if it\'s possible to select a subset of wrenches such that their total length is exactly `l` and their total strength factor is at least `s`. Parameters: n (int): Number of wrenches available l (int): Required length range of the bolt s (int): Required sum of strength factors lengths (list of int): Lengths of the wrenches strengths (list of int): Strength factors of the wrenches Returns: bool: True if it is possible, False otherwise # dp[length][strength] = True if a combination with `length` and `strength` # can be achieved using a subset of wrenches. dp = [[False] * (s + 1) for _ in range(l + 1)] dp[0][0] = True # base case: zero length requires zero strength for i in range(n): length = lengths[i] strength = strengths[i] for j in range(l, length - 1, -1): for k in range(s, -1, -1): if dp[j - length][k]: dp[j][min(k + strength, s)] = True return any(dp[l][k] for k in range(s, s + 1)) # Example Usage: # n, l, s = 4, 8, 15 # lengths = [3, 5, 2, 6] # strengths = [5, 7, 3, 10] # print(can_cover_range(n, l, s, lengths, strengths)) # Should output: NO"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. The vertices are numbered from `1` to `n`. Your task is to determine the smallest number of edges that need to be added to the graph so that all vertices are connected in a single connected component. The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (0 ≤ m ≤ 2 * 10^5). The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) indicating there is an edge between vertex `u` and vertex `v`. Output a single integer — the minimum number of edges to add to make the graph connected. Here is a sample input and output for clarification: **Input:** ``` 4 2 1 2 3 4 ``` **Output:** ``` 1 ``` Here, there are 4 vertices and 2 edges. The graph has two connected components: {1, 2} and {3, 4}. We need at least one more edge to connect these two components, so the output is 1.","solution":"def find_min_edges_to_connect_graph(n, m, edges): Determines the minimum number of edges to add to make the graph connected. Parameters: n (int): The number of vertices. m (int): The number of edges. edges (list of tuple of int): List of edges as tuples (u, v) where 1 ≤ u, v ≤ n. Returns: int: The minimum number of edges to add. from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited[node] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if n <= 1: return 0 # Adjacency list representation of the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # To keep track of visited nodes visited = [False] * (n + 1) num_components = 0 # Perform BFS to determine the number of connected components for node in range(1, n+1): if not visited[node]: bfs(node) num_components += 1 # Number of edges needed to connect the components is number of components - 1 return num_components - 1"},{"question":"Alice is organizing a party and needs to arrange tables for n guests. Each table can seat exactly m guests. However, there is a twist: some guests do not get along with others and should not be seated at the same table. Given the number of guests n and the table capacity m, along with a list of pairs of guests who cannot be seated together, determine the minimum number of tables needed to seat all guests satisfying all the constraints. Input: - The first line contains two integers n and m (1 ≤ m ≤ n ≤ 1000) — the number of guests and the number of seats per table. - The second line contains an integer k (0 ≤ k ≤ n*(n-1)/2) — the number of pairs of guests who cannot be seated together. - Each of the following k lines contains two integers a and b (1 ≤ a, b ≤ n; a ≠ b) — indicating that guest a cannot sit with guest b. Output: - Print a single integer — the minimum number of tables required. Example: ``` Input: 6 2 3 1 2 3 4 5 6 Output: 3 ``` Note: 1. The problem guarantees that it is always possible to seat all guests under the given constraints. 2. Guests are 1-indexed.","solution":"def min_tables(n, m, k, constraints): from collections import defaultdict from itertools import combinations # Create adjacency list for graph graph = defaultdict(list) for a, b in constraints: graph[a].append(b) graph[b].append(a) # Greedy Coloring Algorithm def greedy_coloring(): result = [-1] * n result[0] = 0 # First color to the first vertex available = [False] * n for u in range(1, n): for v in graph[u+1]: if result[v-1] != -1: available[result[v-1]] = True # Find the first available color cr = 0 while cr < n: if not available[cr]: break cr += 1 result[u] = cr for v in graph[u+1]: if result[v-1] != -1: available[result[v-1]] = False return max(result) + 1 chromatic_number = greedy_coloring() tables_required = (n + m - 1) // m # Round up division, each table can seat up to m guests return max(tables_required, chromatic_number)"},{"question":"Given a set of integers and a list of queries, you are to implement a range update and sum retrieval system. Each update query specifies an increment to be added to elements within a particular range, while each retrieval query specifies the range whose sum is to be computed. The first line contains two integers n and q (1 ≤ n, q ≤ 10^5), representing the number of elements in the array and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the initial elements of the array. Each of the next q lines contains a query of one of the following types: 1. \\"U l r k\\" (1 ≤ l ≤ r ≤ n, |k| ≤ 10^9), increment elements from index l to index r (inclusive) by k. 2. \\"S l r\\" (1 ≤ l ≤ r ≤ n), retrieve the sum of elements from index l to index r (inclusive). For each sum retrieval query, output the result on a new line. Example: Input: ``` 5 3 1 2 3 4 5 U 2 4 3 S 1 5 S 2 4 ``` Output: ``` 18 15 ``` Explanation: - Initial array: [1, 2, 3, 4, 5] - After the first query (U 2 4 3), the array becomes [1, 5, 6, 7, 5] - The first sum retrieval query (S 1 5) returns the sum of all elements, which is 1+5+6+7+5 = 24. - The second sum retrieval query (S 2 4) returns the sum of elements from index 2 to 4, which is 5+6+7 = 18.","solution":"class RangeUpdateSum: def __init__(self, n, array): self.n = n self.array = array self.prefix_sum = self._compute_prefix_sum(array) def _compute_prefix_sum(self, array): prefix_sum = [0] * (len(array) + 1) for i in range(len(array)): prefix_sum[i+1] = prefix_sum[i] + array[i] return prefix_sum def update_range(self, l, r, k): for i in range(l-1, r): self.array[i] += k self.prefix_sum = self._compute_prefix_sum(self.array) def sum_range(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l-1] def process_queries(n, q, array, queries): rus = RangeUpdateSum(n, array) result = [] for query in queries: if query[0] == \'U\': _, l, r, k = query rus.update_range(l, r, k) elif query[0] == \'S\': _, l, r = query result.append(rus.sum_range(l, r)) return result"},{"question":"Alice has N books that she wants to arrange in a shelf. Each book has a distinct height given in an array H of length N. Unfortunately, the shelf has limited space and it can contain up to K books. Alice wants the books on the shelf to look as aesthetically pleasing as possible. Alice believes that a sequence of book heights is aesthetically pleasing if the heights form an increasing sequence. To maximize the aesthetic value of her arrangement, Alice wants to choose a subsequence of the book heights such that the subsequence is of maximal length and all the heights form a strictly increasing sequence. Given the heights of all N books, determine the length of the longest increasing subsequence of heights that Alice can place on the shelf. You need to solve this problem for multiple test cases. Input: The first line contains a single integer T (1 ≤ T ≤ 10^5) — the number of test cases. The description of each test case follows. The first line of each test case contains two integers N (1 ≤ N ≤ 10^5) and K (1 ≤ K ≤ N) — the number of books and the maximum number of books the shelf can contain. The second line of each test case contains N integers H_1, H_2, ..., H_N (1 ≤ H_i ≤ 10^9) — the height of each book. Output: For each test case, print a single integer — the maximum length of an increasing subsequence of heights that Alice can place on the shelf. Example: Input: 2 5 3 3 10 2 1 20 7 4 10 22 9 33 21 50 41 Output: 3 4 Explanation: In the first test case, Alice can choose the books with heights [3, 10, 20] which form an increasing sequence of length 3. In the second test case, Alice can choose the books with heights [10, 22, 33, 50] which form an increasing sequence of length 4.","solution":"def length_of_lis(arr): Helper function to calculate length of longest increasing subsequence (LIS). from bisect import bisect_left if not arr: return 0 lis = [] for height in arr: pos = bisect_left(lis, height) if pos < len(lis): lis[pos] = height else: lis.append(height) return len(lis) def max_books_on_shelf(test_cases): Function to process multiple test cases to find the longest increasing subsequence of book heights. results = [] for case in test_cases: N, K, heights = case lis_length = length_of_lis(heights) results.append(min(lis_length, K)) return results"},{"question":"A large company has a policy where employees can log the amount of time they spend on various tasks. Tasks are recorded in chronological order and often overlap. The company wants to analyze how effectively time is being utilized considering the overlapping intervals. For each task, an employee logs the start time and the end time, and the duration is considered the entire time from the start to the end, regardless of overlaps. The task is to find the maximum number of overlapping intervals (tasks) at any given time and the total time cumulatively spent without counting overlaps multiple times. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of tasks logged. The next n lines contain two integers each, si and ei (0 ≤ si < ei ≤ 10^9) — the start time and the end time of the i-th task. Output two values: 1. The maximum number of overlapping tasks at any given time. 2. The total effective time spent on tasks without counting overlapping time multiple times. Example input: ``` 3 1 5 2 6 4 8 ``` Example output: ``` 3 7 ``` Explanation: - There are three tasks: (1, 5), (2, 6), and (4, 8). - The maximum number of overlapping tasks is 3 (from time 4 to 5). - When overlapped intervals are combined, the total time effectively utilized is from time 1 to 8, minus the overlaps, which totals 7 units of time.","solution":"def analyze_tasks(n, intervals): events = [] for start, end in intervals: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() max_overlaps = 0 current_overlaps = 0 last_time = None total_time = 0 for time, event in events: if current_overlaps > 0 and last_time is not None: total_time += time - last_time if event == \'start\': current_overlaps += 1 max_overlaps = max(max_overlaps, current_overlaps) else: current_overlaps -= 1 last_time = time return max_overlaps, total_time # Example usage n = 3 intervals = [(1, 5), (2, 6), (4, 8)] max_overlaps, total_time = analyze_tasks(n, intervals) print(max_overlaps) # Output: 3 print(total_time) # Output: 7"},{"question":"Arin is working on a secure way to send messages. He wants to encode a message such that it can be transformed back to the original message, but using a different key for each encoding. Arin decided to use a special binary transformation. The transformation works as follows: 1. The original message is converted to a binary string using ASCII encoding of characters. 2. A key, which is a binary string of the same length as the encoded message, is used to XOR each bit of the message. 3. The result of the XOR operation is the encoded binary message. Given an encoded binary message and the key used to encode it, your task is to decode the message back to its original form. # Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the binary encoded message and the key. The second line contains a binary string of length n representing the encoded message. Each character in the string is either \'0\' or \'1\'. The third line contains a binary string of length n representing the key. Each character in the string is either \'0\' or \'1\'. # Output Print a single line containing the decoded message in its binary form. # Example **Input:** ``` 8 11001010 10101100 ``` **Output:** ``` 01100110 ``` **Explanation:** The encoded message is `11001010`, and the key is `10101100`. XORing each bit of the message with the corresponding bit of the key results in the original message: - `1 XOR 1 = 0` - `1 XOR 0 = 1` - `0 XOR 1 = 1` - `0 XOR 0 = 0` - `1 XOR 1 = 0` - `0 XOR 1 = 1` - `1 XOR 0 = 1` - `0 XOR 0 = 0` Thus, the decoded message is `01100110`.","solution":"def decode_message(encoded, key): Decodes the given encoded binary message using the provided key by performing XOR operation. Parameters: encoded (str): The encoded binary string. key (str): The key used to encode the message, also in binary format. Returns: str: The decoded binary message. decoded = \'\'.join(\'1\' if encoded[i] != key[i] else \'0\' for i in range(len(encoded))) return decoded"},{"question":"Misha has found an interesting tree in his backyard. The tree has n nodes connected by n-1 edges, and each node has a value associated with it. Misha wants to color each node with one of two colors: red or blue. The rules for coloring are: 1. The total sum of values of nodes colored red should be as large as possible. 2. The tree should remain connected after coloring. This means there cannot be a subtree containing only red nodes disjoint from the rest of the tree. Help Misha determine the largest possible sum of values of nodes colored red while satisfying the above conditions. The first line contains an integer n (1 le n le 100000) — the number of nodes in the tree. The second line contains n integers v_i (-10^9 le v_i le 10^9) — the value associated with the i-th node. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) indicating that there is an edge between node u and node v. Print one integer — the largest possible sum of values of nodes colored red.","solution":"def max_red_sum(nodes, values, edges): from collections import defaultdict # Create adjacency list representation of the tree graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Initialize memoization dictionaries memo_include = {} memo_exclude = {} def dfs(node, parent): if node in memo_include: return memo_include[node], memo_exclude[node] include_node = values[node] exclude_node = 0 for neighbor in graph[node]: if neighbor == parent: continue include_neighbor, exclude_neighbor = dfs(neighbor, node) include_node += exclude_neighbor exclude_node += max(include_neighbor, exclude_neighbor) memo_include[node] = include_node memo_exclude[node] = exclude_node return include_node, exclude_node # Start DFS from node 0 include_root, exclude_root = dfs(0, -1) return max(include_root, exclude_root) # Input reading and handling logic def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) values = list(map(int, data[1:n+1])) edges = [] for i in range(n-1): u, v = int(data[n+1 + 2*i]) - 1, int(data[n+2 + 2*i]) - 1 edges.append((u, v)) result = max_red_sum(range(n), values, edges) print(result)"},{"question":"You are given an integer array of length N. Your task is to determine the number of distinct pairs (i, j) such that the sum of the elements at those indices is even. The first line of the input contains a single integer N (2 ≤ N ≤ 1000). The second line contains N space-separated integers a1, a2, ..., aN (-1000 ≤ ai ≤ 1000). Output a single integer representing the number of distinct pairs (i, j) for which the sum of ai and aj is even, where 1 ≤ i < j ≤ N. Example: Input: 5 1 2 3 4 5 Output: 4","solution":"def count_even_sum_pairs(arr): Returns the number of pairs (i, j) such that the sum of arr[i] and arr[j] is even. even_count = sum(1 for x in arr if x % 2 == 0) odd_count = len(arr) - even_count # Combinations of even elements even_pairs = even_count * (even_count - 1) // 2 # Combinations of odd elements odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs # For handling input and output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) print(count_even_sum_pairs(arr))"},{"question":"You are given three integers h, w, and n - the height, width, and number of photographs that you need to place on a grid of size h x w. The photographs are initially represented as a list of integers where each integer ai (1 ≤ ai ≤ hw) indicates the number of units of space each photograph takes up on this grid. The task is to determine if it is possible to arrange all the photographs on the grid such that no photograph overlaps another and each photograph occupies consecutive cells either row-wise or column-wise. Input: - The first line contains three integers h, w, and n (1 ≤ h, w ≤ 100, 1 ≤ n ≤ h * w). - The next line contains n space-separated integers, where each integer ai (1 ≤ ai ≤ hw) is the number of units each photograph takes up. Output: - Print \\"YES\\" if it is possible to arrange all the photographs on the grid. Otherwise, print \\"NO\\". Examples: Input: 4 4 4 4 4 4 4 Output: YES Input: 2 2 3 1 2 2 Output: NO In the first example, each photograph takes up 4 cells and there are exactly 4 photographs to be placed on a 4x4 grid, which is possible. But in the second example, the total number of cells required to place all the photographs exceeds the available cells, making it impossible to arrange them on the given grid.","solution":"def can_place_photographs(h, w, n, photographs): Determines if all photographs can be placed on the grid of size h x w without overlapping. Args: h : int : height of the grid w : int : width of the grid n : int : number of photographs photographs : list of int : list containing sizes of each photograph Returns: str : \\"YES\\" if it\'s possible to place all photographs, otherwise \\"NO\\" total_grid_cells = h * w total_photograph_cells = sum(photographs) if total_photograph_cells <= total_grid_cells: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given two strings, `s1` and `s2`. Your task is to check whether `s2` can be obtained by reordering the characters in `s1` (an anagram of `s1`). In this context, `s1` and `s2` are considered anagrams of each other if one string can be obtained by rearranging the characters of the other string. The first line of input contains the string `s1` with length n (1 ≤ n ≤ 10^5). The second line of input contains the string `s2` with length n (1 ≤ n ≤ 10^5). Output \\"YES\\" if `s2` is an anagram of `s1`, otherwise output \\"NO\\". # Example Input ``` listen silent ``` Output ``` YES ``` Input ``` hello bello ``` Output ``` NO ```","solution":"def is_anagram(s1, s2): Checks if s2 is an anagram of s1. Args: s1: A string. s2: A string. Returns: \\"YES\\" if s2 is an anagram of s1, otherwise \\"NO\\". if sorted(s1) == sorted(s2): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of integers. Determine whether there exists a pair of integers in the list such that their sum is equal to a given target value. The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of elements in the list. The second line contains n integers separated by spaces representing the elements of the list. The last integer on the second line is the target value t (1 ≤ t ≤ 10^9). Output \\"YES\\" if there exists a pair of integers in the list that sums to the target value, otherwise output \\"NO\\".","solution":"def has_pair_with_sum(numbers, target): Determines if there are two numbers in the list that add up to the target sum. Parameters: - numbers: list of integers - target: integer, the target sum Returns: A string \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for number in numbers: if (target - number) in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"In the town of Techville, there are n bus stops connected by m bus routes. The bus system is designed in such a way that it is always possible to travel from any bus stop to any other bus stop through a series of bus routes. Each bus stop can represent an intersection, and each bus route can be considered a one-way road connecting two intersections. The length of a travel route from one bus stop to another is defined as the number of bus routes one has to traverse along the path. The shortest travel route from one bus stop v to another bus stop u is the route with the minimum number of bus routes. Alice lives near bus stop s and works near bus stop t. Every day she takes a bus following a fixed route with the bus stops enumerated as p_1, p_2, ..., p_k (where p_1 = s and p_k = t), and she never visits the same bus stop more than once during her commute. Alice\'s bus pass includes a route recommendation system which provides the shortest travel route from her current bus stop to her destination t. Whenever Alice deviates from this recommended route and chooses a different bus stop to travel to, the system recalculates the shortest travel route from her new location. Given the map of Techville and Alice\'s daily commute route, determine the minimum and maximum number of recalculations that could occur due to Alice\'s deviations from the recommended routes. Input The first line contains two integers n and m (2 ≤ n ≤ m ≤ 2 ⋅ 10^5) — the number of bus stops and bus routes in Techville, respectively. Then m lines follow, each describing a bus route. Each line contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) denoting a one-way bus route from bus stop u to bus stop v. All bus routes in Techville are pairwise distinct, meaning that each ordered pair (u, v) appears at most once among these m lines (though both (u, v) and (v, u) can exist). The following line contains one integer k (2 ≤ k ≤ n) — the number of bus stops in Alice\'s commute route. The last line contains k integers p_1, p_2, ..., p_k (1 ≤ p_i ≤ n, all these integers are pairwise distinct) — the bus stops along Alice\'s route in the order of her travel. p_1 is the bus stop where Alice starts (s = p_1), and p_k is the bus stop where her workplace is situated (t = p_k). It is guaranteed that for every i ∈ [1, k - 1], there is a bus route from p_i to p_{i + 1}. Output Print two integers: the minimum and the maximum number of recalculations that could have happened during Alice\'s journey. Examples Input 6 9 1 5 5 4 1 2 2 3 3 4 4 1 2 6 6 4 4 2 4 1 2 3 4 Output 1 2 Input 7 7 1 2 2 3 3 4 4 5 5 6 6 7 7 1 7 1 2 3 4 5 6 7 Output 0 0 Input 8 13 8 7 8 6 7 5 7 4 6 5 6 4 5 3 5 2 4 3 4 2 3 1 2 1 1 8 5 8 7 5 2 1 Output 0 3","solution":"from collections import deque, defaultdict def bfs(graph, start): distances = {node: float(\'inf\') for node in graph} distances[start] = 0 queue = deque([start]) while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = distances[current] + 1 queue.append(neighbor) return distances def route_recomputations(n, m, routes, k, commute): graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in routes: graph[u].append(v) reverse_graph[v].append(u) end = commute[-1] distances_from_end = bfs(reverse_graph, end) min_recals, max_recals = 0, 0 for i in range(k - 1): current_stop = commute[i] next_stop = commute[i + 1] if distances_from_end[current_stop] != distances_from_end[next_stop] + 1: min_recals += 1 recompute = False for neighbor in graph[current_stop]: if neighbor == next_stop: continue if distances_from_end[neighbor] == distances_from_end[current_stop] - 1: recompute = True break if recompute: max_recals += 1 return min_recals, max_recals"},{"question":"Write a function that takes a list of non-negative integers and another non-negative integer target as input. The function should determine if there are three distinct elements in the list that add up to the target. If such a combination exists, return `True`. Otherwise, return `False`. # Function Signature ```python def three_sum(nums: List[int], target: int) -> bool: ``` # Input - `nums`: A list of non-negative integers. - `target`: A non-negative integer. # Output - A boolean value (`True` or `False`). # Example ```python assert three_sum([1, 2, 3, 4, 5], 9) == True assert three_sum([1, 2, 3, 4, 5], 15) == False ``` # Constraints - Do not use a library function to perform this. - The length of the list, `len(nums)`, is between `0` and `1000`. - Each number in `nums` is between `0` and `10^5`. # Note - One potential solution involves the use of nested loops to iterate through each combination of three elements and checking their sum against the target. Ensure the function performs efficiently.","solution":"from typing import List def three_sum(nums: List[int], target: int) -> bool: Determine if there are three distinct elements in the list that add up to the target. nums.sort() n = len(nums) for i in range(n-2): if i > 0 and nums[i] == nums[i-1]: continue l, r = i + 1, n - 1 while l < r: total = nums[i] + nums[l] + nums[r] if total == target: return True elif total < target: l += 1 else: r -= 1 return False"},{"question":"You work as a developer at a company that values efficient computation. One of your colleagues faces a challenge in data processing where they need to determine the number of unique subarrays having a specified sum from a given array of integers. A subarray is a contiguous portion of the array. Your task is to write a program that, given an array of integers and a target sum, computes the number of unique subarrays whose elements sum up to the target value. # Input The input consists of two lines: 1. The first line contains two integers, n (1 ≤ n ≤ 105) and target (|target| ≤ 109), where n is the number of elements in the array. 2. The second line contains n integers, representing the elements of the array. Each element of the array is between -109 and 109. # Output Output a single integer which is the number of unique subarrays that sum to the target. # Examples Input 7 5 1 2 3 4 5 -3 -2 Output 2 Input 5 -2 -1 -1 -1 -2 -1 Output 3 Note In the first example, the subarrays summing to the target 5 are: - [2, 3] - [5] In the second example, the subarrays summing to the target -2 are: - [-1, -1] - [-2] - [-1, -1] Each subarray considered is unique and the program should count all such possible subarrays.","solution":"def count_unique_subarrays_with_target_sum(nums, target): This function returns the number of unique subarrays that sum to the target value. n = len(nums) count = 0 prefix_sum = 0 prefix_sum_dict = {0: 1} for num in nums: prefix_sum += num if (prefix_sum - target) in prefix_sum_dict: count += prefix_sum_dict[prefix_sum - target] if prefix_sum in prefix_sum_dict: prefix_sum_dict[prefix_sum] += 1 else: prefix_sum_dict[prefix_sum] = 1 return count # Helper function to handle input in specified format def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) target = int(data[1]) nums = list(map(int, data[2:2+n])) print(count_unique_subarrays_with_target_sum(nums, target))"},{"question":"Anita is arranging books in her library. She wants to organize them such that the thickness of books in a single row strictly increases from left to right. She has N books with various thicknesses given as a list. To achieve the desired arrangement, Anita can swap any two books\' positions. Determine the minimum number of swaps required for Anita to organize the books in strictly increasing order of their thicknesses. Input The first line of input contains a single integer T, the number of test cases. Each of the next T test cases begins with a single integer N, the number of books, followed by N space-separated integers representing the thickness of each book. Output For each test case, output a single line with the minimum number of swaps required to arrange the books in strictly increasing order of their thicknesses. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Thickness of each book ≤ 1000 Example Input: 3 5 4 3 1 2 5 4 10 30 20 40 3 2 1 3 Output: 3 1 1 Explanation Example case 1: Anita can perform the following swaps to organize the books: - Swap book 1 (thickness 4) and book 3 (thickness 1) - Swap book 2 (thickness 3) and book 4 (thickness 2) - Swap book 1 (thickness 1) and book 2 (thickness 2) Example case 2: One possible swap is: - Swap book 2 (thickness 30) and book 3 (thickness 20) Example case 3: Swap book 1 (thickness 2) and book 2 (thickness 1).","solution":"def min_swaps_to_sort_books(t, test_cases): Determines the minimum number of swaps required to sort books by their thicknesses in increasing order. Parameters: t (int): Number of test cases test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of books and their thicknesses. Returns: List[int]: List of minimum number of swaps for each test case results = [] for i in range(t): n, books = test_cases[i] swaps = 0 # Create a list of tuples where each tuple is (thickness, index) arr_with_indices = list(enumerate(books)) # Sort the array by the thickness values arr_with_indices.sort(key=lambda x: x[1]) visited = [False] * n # Loop through each element to determine the cycle lengths for j in range(n): if visited[j] or arr_with_indices[j][0] == j: continue cycle_length = 0 x = j while not visited[x]: visited[x] = True x = arr_with_indices[x][0] cycle_length += 1 if cycle_length > 1: swaps += cycle_length - 1 results.append(swaps) return results"},{"question":"You are given a 2D grid of dimensions m x n consisting of non-negative integers. Your task is to find the sum of all numbers present in the sub-grid defined by the corners (r1, c1) and (r2, c2), inclusive. The grid is 1-indexed. Input: The first line contains two integers m and n (1 ≤ m, n ≤ 500), separated by a space – the dimensions of the grid. The next m lines each contain n integers separated by spaces, representing the grid. Each integer is between 0 and 1000, inclusive. The following line contains four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ m, 1 ≤ c1 ≤ c2 ≤ n), separated by spaces, defining the corners of the sub-grid. Output: Print a single integer – the sum of all numbers in the sub-grid defined by the corners (r1, c1) and (r2, c2). Examples: Input: 3 4 1 2 3 4 5 6 7 8 9 10 11 12 2 2 3 4 Output: 54 Input: 2 2 1 1 1 1 1 1 2 2 Output: 4 Note: In the first sample test, the selected sub-grid is: 6 7 8 10 11 12 The sum is 6 + 7 + 8 + 10 + 11 + 12 = 54. In the second sample test, the entire grid is selected, and the sum of all elements which is 1+1+1+1 = 4.","solution":"def sum_of_subgrid(grid, r1, c1, r2, c2): Returns the sum of numbers in the sub-grid defined by (r1, c1) to (r2, c2), inclusive. Note: The grid is 1-indexed. total_sum = 0 for i in range(r1-1, r2): for j in range(c1-1, c2): total_sum += grid[i][j] return total_sum"},{"question":"You are given a sequence of n integers. Your task is to answer q queries, where each query involves finding the sum of a specific subarray in the sequence. More formally, you are given an array of integers a_1, a_2, ..., a_n. Each query is described by two integers l and r (1 ≤ l ≤ r ≤ n), and you need to find the sum of elements from a_l to a_r inclusive. Input - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the length of the array and the number of queries. - The next line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9), representing the elements of the array. - The following q lines contain two integers l and r each (1 ≤ l ≤ r ≤ n), representing the subarray for which you have to find the sum. Output - Print q integers, each representing the sum of the corresponding subarray. Examples Input 6 3 3 -2 5 1 -6 3 1 3 2 5 3 6 Output 6 -2 3 Input 5 2 1 2 3 4 5 1 5 2 4 Output 15 9","solution":"def prefix_sums(arr): # Create a prefix sums array n = len(arr) ps = [0] * (n + 1) for i in range(1, n + 1): ps[i] = ps[i - 1] + arr[i - 1] return ps def sum_subarray(prefix_sum, l, r): # Calculate the sum of subarray using prefix sums return prefix_sum[r] - prefix_sum[l - 1] def solve(n, q, arr, queries): # Compute prefix sums pre_sum = prefix_sums(arr) # Answer each query result = [] for l, r in queries: result.append(sum_subarray(pre_sum, l, r)) return result"},{"question":"An online retailer is having a promotional campaign. They have a list of products each identified by a unique product ID and an array containing the number of occurrences of each product ID in the sales dataset. The retailer wishes to identify which product has been sold the largest number of times. If there are multiple products with the highest sales count, return the product ID that appears first in the input list. Input The single line of input contains an integer \'n\' (1 ≤ n ≤ 10^5), followed by \'n\' space-separated integers representing the product IDs sold. Output Print a single integer representing the product ID that is the most frequently sold. If there is a tie, print the first product ID that reaches the highest count. Examples Input 6 1 2 3 1 2 2 Output 2 Input 5 4 4 5 5 4 Output 4 Note For the first example, product ID \'2\' is sold 3 times, which is the highest count. For the second example, product IDs \'4\' and \'5\' both are sold 3 times, but \'4\' appears first.","solution":"def most_frequently_sold_product(n, products): from collections import Counter # Create counter for all product sales product_counter = Counter(products) # Determine the product with the maximum sales count max_count = max(product_counter.values()) # Find the first product ID with the maximum sales count for product_id in products: if product_counter[product_id] == max_count: return product_id"},{"question":"You are responsible for assigning tasks to employees in a company. Each task requires a certain amount of time to complete, and can only be started after the previous task is completed. Given the time required for each task, determine the earliest time by which all tasks can be completed. Consider the following rules: * Tasks must be performed in the order they are given. * The predefined start time for the first task is time 0. Constraints * All values in input are integers. * 1 leq N leq 100 * 1 leq T_i leq 1000 Input Input is given from Standard Input in the following format: N T_1 T_2 dots T_N Output Print the total time required to complete all tasks. Examples Input 4 3 5 7 2 Output 17 Input 3 10 20 30 Output 60","solution":"def total_time_to_complete_tasks(n, task_times): Computes the total time to complete all tasks given their durations. Parameters: n (int): The number of tasks. task_times (list of int): The time required for each task. Returns: int: The total time required to complete all tasks. return sum(task_times) # Example usage: # n = 4 # task_times = [3, 5, 7, 2] # print(total_time_to_complete_tasks(n, task_times)) # Output: 17"},{"question":"You are provided with a collection of strings representing file names. Your task is to come up with a unique name for a new file by appending a number, starting from 1, to the base name until an unused name is found. The base name of a file is defined as the file name without an extension, and the extension is the substring after the last \'.\' character. Write a function that takes a list of file names and a proposed file name, and returns a unique file name that does not exist in the list. If the proposed file name does not have an extension, assume it is just the base name. **Input** - A list of strings representing the existing file names. - A string representing the proposed file name. **Output** - A string representing the unique file name. **Function signature** The function signature is provided below: ```python def generate_unique_filename(existing_files: List[str], proposed_file: str) -> str: # implementation ``` **Example** ```python # Example 1 existing_files = [\\"document.txt\\", \\"document1.txt\\", \\"image.png\\", \\"image1.png\\", \\"image2.png\\"] proposed_file = \\"document.txt\\" print(generate_unique_filename(existing_files, proposed_file)) # Output: \\"document2.txt\\" # Example 2 existing_files = [\\"note.txt\\", \\"file.doc\\", \\"file1.doc\\", \\"file2.doc\\"] proposed_file = \\"file.doc\\" print(generate_unique_filename(existing_files, proposed_file)) # Output: \\"file3.doc\\" # Example 3 existing_files = [\\"data\\", \\"data1\\", \\"data2\\"] proposed_file = \\"data\\" print(generate_unique_filename(existing_files, proposed_file)) # Output: \\"data3\\" ```","solution":"from typing import List def generate_unique_filename(existing_files: List[str], proposed_file: str) -> str: Generates a unique filename by appending a number to the base name if needed. :param existing_files: List of existing file names. :param proposed_file: Proposed file name that needs to be made unique. :return: A unique file name. # Split the proposed_file into base name and extension if \'.\' in proposed_file: base, ext = proposed_file.rsplit(\'.\', 1) ext = \'.\' + ext # include the dot in extension else: base = proposed_file ext = \'\' # Initialize the counter for the filenames counter = 1 # Generate the unique filename unique_file = proposed_file while unique_file in existing_files: unique_file = f\\"{base}{counter}{ext}\\" counter += 1 return unique_file"},{"question":"Beach Cleanup Operations You have been hired to manage a beach cleanup operation. The beach is represented as a straight line with multiple sections, each having varying amounts of trash. You have a group of cleanup teams who will work on the beach sections. Each cleanup team can clean a continuous segment of the beach from start to finish. However, each team charges different amounts per unit of trash removed. The objective is to assign cleanup teams to segments of the beach in a way that minimizes the total cost of cleaning the entire beach. You are given the following inputs: 1. n - the number of sections on the beach. 2. m - the number of cleanup teams. 3. An array t of length n where t[i] represents the amount of trash in section i. 4. An array c of length m where c[j] represents the cost per unit of trash for cleanup team j. Each cleanup team can clean multiple contiguous sections, but each section of the beach must be cleaned exactly once. Determine the minimum cost to clean all sections of the beach. Input The input consists of multiple datasets. Each dataset is in the following format: n m t1 t2 … tn c1 c2 … cm n is the number of beach sections, a positive integer not exceeding 1000. m is the number of cleanup teams, a positive integer not exceeding 50. ti gives the amount of trash in the i-th section, an integer between 1 and 1000. ci gives the cost per unit trash of the j-th cleanup team, a positive integer between 1 and 100. The end of the input is indicated by a line containing two zeros. Output For each dataset, output in a line the minimum cost of cleaning all beach sections. Sample Input 5 3 5 8 6 3 9 2 3 1 4 2 4 5 1 8 4 2 0 0 Output for the Sample Input 77 46 Explanation of the sample input: For the first dataset: - Cleanup team 1 charges 2 per unit of trash. - Cleanup team 2 charges 3 per unit of trash. - Cleanup team 3 charges 1 per unit of trash. The optimal assignment is to have: - Cleanup team 3 clean all sections, leading to a minimum cost of (5+8+6+3+9) * 1 = 31 For the second dataset: - Cleanup team 1 charges 4 per unit of trash. - Cleanup team 2 charges 2 per unit of trash. The optimal assignment is to have: - Cleanup team 2 clean all sections, leading to a minimum cost of (4+5+1+8) * 2 = 36 Example Input 5 3 5 8 6 3 9 2 3 1 4 2 4 5 1 8 4 2 0 0 Output 31 36","solution":"def minimum_cleanup_cost(n, m, t, c): Returns the minimum cost to clean all sections of the beach. # We will use dynamic programming (DP) to solve this problem. # dp[i] will represent the minimum cost to clean the first i sections of the beach # considering using j cleanup teams. INF = float(\'inf\') dp = [INF] * (n + 1) dp[0] = 0 # Cost to clean no sections is 0 # Iterate over all sections for i in range(1, n + 1): # Iterate over each cleanup team for j in range(m): cost_per_unit_trash = c[j] total_trash = 0 # Consider all possible segments ending at section i for k in range(i, 0, -1): total_trash += t[k-1] # Update the minimum cost to clean first i sections dp[i] = min(dp[i], dp[k-1] + total_trash * cost_per_unit_trash) return dp[n] def process_input(input_lines): results = [] index = 0 while index < len(input_lines): n, m = map(int, input_lines[index].split()) if n == 0 and m == 0: break index += 1 t = list(map(int, input_lines[index].split())) index += 1 c = list(map(int, input_lines[index].split())) index += 1 results.append(minimum_cleanup_cost(n, m, t, c)) return results"},{"question":"John works in a library and needs to manage a large collection of books. Each book can be added to the collection, checked out, or checked for availability based on its ISBN number. The ISBN number of the book is a unique identifier composed of digits. Each request falls into one of the following categories: 1. + ISBN — add a book with the given ISBN to the collection. 2. - ISBN — check out a book with the given ISBN from the collection. It\'s guaranteed that there will be at least one book with that ISBN in the collection. 3. ? ISBN — check if a book with the given ISBN is currently available in the collection. Return \\"YES\\" if available, otherwise \\"NO\\". Input The first line of the input contains an integer t (1 ≤ t ≤ 100,000) — the number of operations John needs to perform. Next t lines provide the descriptions of the requests in order they appear in the input file. The i-th row starts with a character ci — the type of the corresponding operation. If ci is equal to \'+\' or \'-\' then it\'s followed by a space and an integer ISBN (0 ≤ ISBN < 10^18) without leading zeroes (unless it\'s 0). If ci equals \'?\' then it\'s followed by a space and an integer ISBN. Output For each query of the third type, print \\"YES\\" (without quotes) if the book is available, otherwise print \\"NO\\" (without quotes). Examples Input 8 + 9783161484100 + 9781234567897 ? 9783161484100 - 9783161484100 ? 9783161484100 ? 9781234567897 - 9781234567897 ? 9781234567897 Output YES NO YES NO Note Consider the following step-by-step: 1. Add ISBN 9783161484100 to the collection. 2. Add ISBN 9781234567897 to the collection. 3. Check availability of ISBN 9783161484100 — it\'s available, so the answer is \\"YES\\". 4. Check out ISBN 9783161484100 from the collection. 5. Check availability of ISBN 9783161484100 — it\'s not available anymore, so the answer is \\"NO\\". 6. Check availability of ISBN 9781234567897 — it\'s still available, so the answer is \\"YES\\". 7. Check out ISBN 9781234567897 from the collection. 8. Check availability of ISBN 9781234567897 — it\'s not available anymore, so the answer is \\"NO\\".","solution":"def process_requests(t, operations): collection = {} results = [] for operation in operations: op_type, isbn = operation[0], operation[2:] if op_type == \'+\': collection[isbn] = collection.get(isbn, 0) + 1 elif op_type == \'-\': if collection[isbn] == 1: del collection[isbn] else: collection[isbn] -= 1 elif op_type == \'?\': if isbn in collection: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Problem Description Alex is part of a team that is responsible for cleaning and transforming text data for analysis. They frequently encounter input strings with unwanted substrings that need to be removed. The task often requires identifying and removing these substrings, while preserving the required segments of the text. Your task is to help Alex by writing a function that removes all instances of a specific unwanted substring from a given input string. # Input - A single line containing the input string `S` which consists of only uppercase letters. The length of the string `|S|` satisfies `1 ≤ |S| ≤ 10^4`. - A single line containing the distinct, unwanted substring `T` which also consists of uppercase letters. The length of the string `|T|` satisfies `1 ≤ |T| ≤ 100`. # Output Output the transformed string after removing all instances of the unwanted substring `T` from the input string `S`. The output should be written in a single line. # Examples Example 1 **Input:** ``` ALEXRULESALEX ALEX ``` **Output:** ``` RULES ``` Example 2 **Input:** ``` HELLOCODEBROCODEHELLO CODE ``` **Output:** ``` HELLOBROHELLO ``` Example 3 **Input:** ``` DATACLEANINGDATACLEANING CLEANING ``` **Output:** ``` DATADATACLEANING ``` Example 4 **Input:** ``` PROGRAMMINGISFUN HARD ``` **Output:** ``` PROGRAMMINGISFUN ``` # Note 1. If the unwanted substring `T` does not appear in the input string `S`, the output will be the same as the input string `S`. 2. The removal should be case-sensitive and should not affect other parts of the text.","solution":"def remove_unwanted_substring(S, T): Removes all instances of the substring T from the string S. return S.replace(T, \\"\\")"},{"question":"You are given an array of integers and need to determine if it is possible to delete exactly one element so that the remaining elements form a strictly increasing sequence. A strictly increasing sequence means that for any two consecutive elements a_i and a_{i+1}, a_i < a_{i+1} holds true. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains a single integer n (2 ≤ n ≤ 100) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. Output For each test case, output \\"YES\\" if it is possible to delete exactly one element to get a strictly increasing sequence, and \\"NO\\" otherwise. Example Input 4 5 1 3 2 4 5 5 1 1 2 3 4 6 1 2 2 3 4 5 3 3 2 1 Output YES YES YES NO Explanation In the first test case, by deleting the element 2, we get the sequence [1, 3, 4, 5], which is strictly increasing. In the second test case, by deleting the element 1 at index 2, we get the sequence [1, 2, 3, 4], which is strictly increasing. In the third test case, by deleting the element 2 at index 3, we can get the sequence [1, 2, 3, 4, 5], which is strictly increasing. In the fourth test case, there is no way to delete exactly one element to form a strictly increasing sequence.","solution":"def can_become_strictly_increasing(arr): Determines if it is possible to delete exactly one element to get a strictly increasing sequence. n = len(arr) def is_strictly_increasing(sequence): for i in range(len(sequence) - 1): if sequence[i] >= sequence[i + 1]: return False return True for i in range(n): # Create a new sequence by skipping element at index i new_sequence = arr[:i] + arr[i+1:] if is_strictly_increasing(new_sequence): return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases. results = [] for i in range(t): n, arr = test_cases[i] result = can_become_strictly_increasing(arr) results.append(result) return results"},{"question":"Problem Statement You are participating in a virtual coding competition where you need to maximize your score by unlocking various levels. Each level provides you a certain score if you unlock it successfully. However, you need a specific number of keys to unlock each level, and you can also earn additional keys by unlocking certain levels. The competition rules are as follows: * Each level i (from 1 to n) can be unlocked if you have at least `keys_required_i` keys. * Unlocking level i provides you `score_i` points and `additional_keys_i` additional keys. * You can only unlock each level once. * You need to maximize your total score. Given the initial number of keys you have and the details of each level (number of keys required, score and additional keys earned), your task is to determine the maximum score you can achieve. Input The input consists of a single test case: ``` n k keys_required_1 score_1 additional_keys_1 keys_required_2 score_2 additional_keys_2 . . . keys_required_n score_n additional_keys_n ``` Where: * `n` (1 <= n <= 100) is the total number of levels. * `k` (1 <= k <= 100) is the initial number of keys you have. * For each level i (1 <= i <= n): - `keys_required_i` (1 <= keys_required_i <= 100) is the number of keys required to unlock level i. - `score_i` (1 <= score_i <= 1000) is the score you earn for unlocking level i. - `additional_keys_i` (0 <= additional_keys_i <= 100) is the additional keys you earn for unlocking level i. Output Output the maximum score you can achieve. Sample Input 1 ``` 3 5 3 50 2 2 40 1 4 100 3 ``` Output for Sample Input 1 ``` 190 ``` Explanation for Sample Input 1 With 5 keys initially, you can: - Unlock level 2 (2 keys required, earns 40 points and 1 additional key): Total score = 40, Keys = 5 - 2 + 1 = 4 - Unlock level 1 (3 keys required, earns 50 points and 2 additional keys): Total score = 90, Keys = 4 - 3 + 2 = 3 - Unlock level 3 (4 keys required, earns 100 points and 3 additional keys): Total score = 190, Keys = 3 - 4 + 3 = 2 (not enough keys for any other level so max score remains 190) Sample Input 2 ``` 2 3 3 60 2 2 30 1 ``` Output for Sample Input 2 ``` 90 ``` Explanation for Sample Input 2 With 3 keys initially, you can: - Unlock level 2 (2 keys required, earns 30 points and 1 additional key): Total score = 30, Keys = 3 - 2 + 1 = 2 - Unlock level 1 (3 keys required, earns 60 points and 2 additional keys): Total score = 90, Keys = 2 (not enough keys for any other level so max score remains 90) Note: It is possible to unlock levels in different sequences to achieve the maximum score.","solution":"def max_score(n, k, levels): Calculate the maximum score achievable with given initial keys and level details. :param n: Number of levels :param k: Initial number of keys :param levels: List of levels where each level is a tuple (keys_required, score, additional_keys) :return: Maximum score levels.sort(key=lambda x: (x[0], -x[1], -x[2])) # Sort levels by keys_required, then by score (descending), then by additional_keys (descending) from heapq import heappush, heappop max_score = 0 available_levels = [] while True: for i, (keys_required, score, additional_keys) in enumerate(levels): if keys_required <= k: heappush(available_levels, (-score, additional_keys, i)) if not available_levels: break # Pick the best available level best_score, additional_keys, idx = heappop(available_levels) max_score += -best_score k += additional_keys # Earn additional keys # Remove the adopted level from levels list to mark it as used levels.pop(idx) available_levels = [] return max_score"},{"question":"A local council organizes various musical events in the city every summer. Due to the popularity of these events, they need a system to manage the schedule and avoid conflicts. There are n events scheduled, each identified by two numbers: si and ei — the start time and end time of the event, respectively (both inclusive). The times are given in 24-hour format (0 ≤ si < ei ≤ 23). The council has m venues available, and they want to assign the events to these venues in such a way that no two events overlap in the same venue. Your task is to determine the maximum number of events that can be scheduled without any conflicts. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of events. The next n lines each contain two integers: si and ei (0 ≤ si < ei ≤ 23) — the start and end time of the i-th event. The subsequent line contains an integer m (1 ≤ m ≤ 1000) — the number of available venues. Output In the first line, print the maximum number of events that can be scheduled without conflicts followed by the number of venues used to achieve this scheduling. Then print k lines, where k is the number of events scheduled, each line containing three space-separated integers: the event number (1-based index as given in input), the assigned venue (1-based index), and the start and end times of the assigned event. If there are multiple optimal answers, print any of them. Examples Input 5 1 5 2 6 4 7 7 9 8 10 2 Output 4 2 1 1 1 5 3 1 4 7 4 2 7 9 5 2 8 10","solution":"def schedule_events(events, num_venues): n = len(events) events = sorted(enumerate(events, 1), key=lambda x: x[1][1]) venue_end_time = [0] * num_venues scheduled_events = [] for event_id, (s, e) in events: for v in range(num_venues): if s >= venue_end_time[v]: venue_end_time[v] = e + 1 scheduled_events.append((event_id, v + 1, s, e)) break return len(scheduled_events), scheduled_events def maximum_events(n, events, m): num_scheduled, scheduled_events = schedule_events(events, m) print(f\\"{num_scheduled} {m}\\") for event in scheduled_events: print(\\" \\".join(map(str, event))) return num_scheduled, scheduled_events"},{"question":"In a certain game, there is a battlefield represented as a 2D grid with dimensions N x M. Each cell in the grid contains either a \'.\' representing an open space or a \'#\' representing an obstacle. The player can move up, down, left, or right but cannot move through obstacles. Additionally, the player can install portals in the grid. A portal allows the player to instantly move from one portal to another. Portals can only be installed in open spaces. When the player uses a portal, they can choose any other portal as their destination, but can only use each portal pair once. Given the grid and the coordinates of the starting position (Sx, Sy) and the target position (Tx, Ty), determine the minimum number of moves required for the player to reach the target, using portals optimally. If it\'s impossible to reach the target, return -1. # Input Format - First line: N (number of rows), M (number of columns) - Next N lines: M characters each (grid) - Following line: Sx, Sy (starting coordinates) - Following line: Tx, Ty (target coordinates) # Output Format - Single integer: Minimum number of moves required to reach the target, or -1 if impossible. # Constraints - 1 ≤ N, M ≤ 1000 - Grid consists of only \'.\' and \'#\' - 0 ≤ Sx, Sy, Tx, Ty < N, M - Start and target positions are guaranteed to be open spaces (\'.\'). # Example Input ``` 5 5 ..... .#. ..#.. .#. ..... 0 0 4 4 ``` Output ``` 8 ``` *Explanation*: The player moves down 3 times, right 4 times, and down 1 more time to reach the target. Input ``` 5 5 ..... .#. ..#.. .#. ..... 0 0 4 0 ``` Output ``` 4 ``` *Explanation*: The player moves down 4 times from (0, 0) to (4, 0). Input ``` 5 5 # # # # ..... 0 0 4 4 ``` Output ``` -1 ``` *Explanation*: The target is unreachable as the player cannot cross the wall of obstacles.","solution":"from collections import deque def min_moves(N, M, grid, Sx, Sy, Tx, Ty): Returns the minimum number of moves required to reach target (Tx, Ty) from (Sx, Sy). If it\'s impossible to reach the target, returns -1. # Direction vectors for up, down, left, and right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize queue for BFS and visited set queue = deque([(Sx, Sy, 0)]) # (x, y, distance) visited = set((Sx, Sy)) while queue: x, y, dist = queue.popleft() # Check if target is reached if (x, y) == (Tx, Ty): return dist # Explore neighboring cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If target is unreachable return -1"},{"question":"Given a list of phrases, determine the longest common prefix. If there is no common prefix among the phrases, return an empty string. Write a function that reads a list of phrases from the input and prints the longest common prefix. Constraints * The phrases consist only of lowercase English letters. * 1 ≤ number of phrases ≤ 200 * Each phrase has a length between 1 and 1000 inclusive. Input A list of phrases with each phrase given on a new line. Output Print the longest common prefix in a line. Example Input flower flow flight Output fl","solution":"def longest_common_prefix(phrases): Returns the longest common prefix from a list of phrases. if not phrases: return \\"\\" # Start with the first phrase as the reference prefix = phrases[0] for phrase in phrases[1:]: while not phrase.startswith(prefix): prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"Alice has a collection of n unique books she wants to read. Each book takes a different amount of time to complete, which increases exponentially per the order of the book. The time required to finish each book is given in an array t where t[i] is the time required to finish the i-th book. Alice plans to read exactly k of these books in a specific order, and she wants to minimize the total reading time. However, there is a restriction—she can only read a book if she has read all previously ordered books that take less time than the current one. In other words, once Alice picks the next book in the order, she needs to have read all books with lesser times before she can start this one. Calculate the minimum total time Alice needs to read exactly k books. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2000) — the number of unique books and the number of books Alice plans to read. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^6) where t_i is the time required to finish the i-th book. Output Print the minimum total reading time required for Alice to read exactly k books. Examples Input 5 2 10 20 30 40 50 Output 30 Input 4 3 2 3 5 7 Output 10","solution":"def min_total_reading_time(n, k, times): Returns the minimum total time Alice needs to read exactly k books. :param n: int: number of books :param k: int: number of books to read :param times: list of int: time required to read each book :return: int: minimum total reading time times.sort() return sum(times[:k])"},{"question":"Given a list of non-negative integers, determine the minimum number of moves required to make all elements of the list equal. A move is defined as incrementing n - 1 elements of the list by 1. This means in a single move, you can choose any element, increment it by 1, and do so for every element in the list except one. Constraints * 1 ≤ n ≤ 10^5 * 0 ≤ elements in list ≤ 10^9 Input The input is given from Standard Input in the following format: n list of integers Output Print the minimum number of moves required to make all elements of the list equal. Examples Input 3 1 2 3 Output 3 Input 4 1 1 1 1 Output 0 Input 5 5 5 8 8 5 Output 6","solution":"def min_moves(nums): Returns the minimum number of moves required to make all elements of the list equal. A move is defined as incrementing n - 1 elements of the list by 1. # To make all elements equal, the optimal way is to increment n-1 elements repeatedly, # which is equivalent to decrementing one element each time or making all elements equal to the minimum element. min_element = min(nums) moves = sum(num - min_element for num in nums) return moves # Handle input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:])) print(min_moves(nums))"},{"question":"You are given a directed graph with n nodes and m edges. In each operation, you can pick any directed edge and reverse its direction. You have an initial configuration of edges and a target configuration. Determine if it is possible to achieve the target configuration with a finite number of operations, and if possible, output the sequence of operations that leads to the target configuration. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000) — the number of nodes and edges in the graph, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that there is a directed edge from node u to node v in the initial configuration. The next m lines contain the target configuration in the same format. Output If there is no sequence of operations that leads to the target configuration, output \\"NO\\". If there is a sequence of operations that leads to the target configuration, output \\"YES\\" in the first line. In the second line, output k — the number of operations (0 ≤ k ≤ 10^5). In the next k lines, output the operations in the format of “u v” indicating you reverse the edge from node u to node v. Examples Input 5 5 1 2 2 3 3 4 4 5 5 1 2 1 3 2 4 3 5 4 1 5 Output YES 5 1 2 2 3 3 4 4 5 5 1 Input 4 3 1 2 2 3 3 4 1 3 2 4 3 1 Output NO","solution":"def can_transform_graph(n, m, initial_config, target_config): Determines if it is possible to transform the initial graph into the target graph by reversing the direction of the edges. :param n: Number of nodes. :param m: Number of edges. :param initial_config: List of tuples representing the initial configuration edges (u, v). :param target_config: List of tuples representing the target configuration edges (u, v). :return: Tuple (possible: bool, operations: list) where possible is True if transformation is possible, and operations is the sequence of edge reversals (each operation represented as a (u, v) tuple). initial_set = set(initial_config) target_set = set(target_config) # Find needed reversals to_reverse = initial_set - target_set to_add = target_set - initial_set if len(to_reverse) != len(to_add): return False, [] operations = [] while to_reverse: u, v = to_reverse.pop() if (v, u) in to_add: to_add.remove((v, u)) operations.append((u, v)) else: return False, [] return True, operations"},{"question":"Sum of Even and Odd Rows A research lab has recently collected data from a series of experiments, and the data is stored in a two-dimensional matrix. Each row in the matrix corresponds to an experiment and each column represents a set of measurements taken during that experiment. The scientists want to analyze the results by finding the sum of measurements from all even-numbered rows separately from the sum of measurements from all odd-numbered rows. The rows are numbered starting from 1. Your task is to write a program that will process this data and compute the sum of measurements for all even-numbered rows as well as the sum for all odd-numbered rows for each dataset provided. # Input The input consists of multiple datasets, each formatted as follows: > r c > e1,1 e1,2 ... e1,c > e2,1 e2,2 ... e2,c > ... > er,1 er,2 ... er,c The first line of each dataset contains two integers r and c. r is the number of rows (1 ≤ r ≤ 1000), and c is the number of columns (1 ≤ c ≤ 1000). Each of the following r lines contains c integers, which are the measurements taken during the corresponding experiment. ej,i represents the measurement in the j-th row and i-th column (1 ≤ j ≤ r, 1 ≤ i ≤ c). Each measurement satisfies -1000 ≤ ej,i ≤ 1000. The end of the input is indicated by a line containing two zeros. The number of datasets does not exceed 100. # Output For each dataset, output two integers: the sum of measurements for all even-numbered rows and the sum of measurements for all odd-numbered rows, separated by a space. # Sample Input ``` 3 3 1 2 3 4 5 6 7 8 9 2 2 -1 -2 3 4 0 0 ``` # Sample Output ``` 15 39 4 -3 ``` # Explanation of Sample Output - For the first dataset, the sum of odd-numbered rows (1st and 3rd rows) is 1+2+3+ 7+8+9 = 30. The sum of even-numbered rows (2nd row) is 4+5+6 = 15. - For the second dataset, the sum of odd-numbered rows (1st row) is -1+-2 = -3. The sum of even-numbered rows (2nd row) is 3+4 = 7.","solution":"def sum_even_odd_rows(datasets): results = [] for dataset in datasets: r = dataset[0][0] c = dataset[0][1] sum_odd = 0 sum_even = 0 for i in range(r): row_sum = sum(dataset[i + 1]) if (i + 1) % 2 == 0: sum_even += row_sum else: sum_odd += row_sum results.append((sum_even, sum_odd)) return results"},{"question":"Mallory enjoys solving mathematical problems. Given an integer array `nums`, she wants to find out the length of the longest subarray with all distinct elements. Could you help her? Input The first line contains a single integer `n` (1 ≤ n ≤ 10⁵) representing the number of elements in the array. The second line contains `n` space-separated integers representing the elements of the array `nums` (0 ≤ nums[i] ≤ 10⁶ for each valid i). Output Print the length of the longest subarray with all distinct elements. Examples Input 5 2 1 2 3 2 Output 3 Input 6 4 2 4 5 6 2 Output 4 Note In the first example, the longest subarray with all distinct elements is [1, 2, 3] which has a length of 3. In the second example, the longest subarray with all distinct elements is [4, 5, 6, 2] which has a length of 4.","solution":"def longest_subarray_with_distinct_elements(nums): Returns the length of the longest subarray with all distinct elements. num_set = set() left = 0 max_length = 0 for right in range(len(nums)): while nums[right] in num_set: num_set.remove(nums[left]) left += 1 num_set.add(nums[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given two strings s and t, you need to determine the minimum number of operations required to convert s into t. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character The cost of each operation is 1. Input: The first line contains the string s (1 ≤ |s| ≤ 1000) — the initial string. The second line contains the string t (1 ≤ |t| ≤ 1000) — the target string. Output: Output the minimum number of operations required to convert s into t. Examples Input horse ros Output 3 Input intention execution Output 5","solution":"def min_operations(s, t): Returns the minimum number of operations required to convert string s into string t. Operations allowed: Insert, Delete, Replace a character. Each has a cost of 1. m, n = len(s), len(t) # Create a 2D array to store the minimum operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the 2D array with the base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Compute the minimum operations using the DP approach for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1] # Replace ) return dp[m][n]"},{"question":"In a small town, the local government is planning to construct a series of new roads to improve connectivity among several neighborhoods. The town has n neighborhoods numbered from 1 to n. Currently, there are no roads directly connecting any neighborhoods. The government has a list of m proposed roads, where each road connects two neighborhoods and has a certain construction cost. Because of budget constraints, not all proposed roads may be built. Moreover, the government aims to ensure that all neighborhoods remain connected if possible. Your task is to find the minimum total cost required to construct a subset of the proposed roads such that all the neighborhoods are connected (i.e., there is a path between any two neighborhoods). If it is not possible to connect all the neighborhoods, return -1. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10^5) — the number of neighborhoods and the number of proposed roads respectively. The following m lines describe the proposed roads. Each line contains three integers a, b and c (1 ≤ a, b ≤ n, 1 ≤ c ≤ 10^6) — the two neighborhoods connected by the road and the construction cost of that road. Output Print a single integer — the minimum total cost to connect all neighborhoods, or -1 if it is not possible. Example Input 4 5 1 2 3 2 3 4 3 4 5 1 4 1 2 4 2 Output 7 Explanation The minimum total cost is obtained by using the roads (1-4), (1-2), and (2-3), which cover all neighborhoods with a total cost of 1 + 3 + 3 = 7.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_cost_to_connect_all(n, m, roads): if m < n-1: # not enough edges to connect all nodes return -1 roads.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) e = 0 i = 0 result = [] while e < n-1 and i < len(roads): a, b, c = roads[i] i += 1 x = find(parent, a-1) y = find(parent, b-1) if x != y: e += 1 result.append([a, b, c]) union(parent, rank, x, y) if e != n-1: return -1 minimum_cost = sum([c for a, b, c in result]) return minimum_cost"},{"question":"Write a program that finds the smallest prime factor of a given integer n and prints its exponent in the factorization of n. If n is a prime number, its smallest prime factor is itself, and the exponent will be 1. Input A single integer n (2 ≤ n ≤ 10^12). Output Print two numbers separated by a space: the smallest prime factor of n and its exponent in the factorization of n. Examples Input 18 Output 2 1 Input 100 Output 2 2 Input 97 Output 97 1 Note In the first example, the smallest prime factor of 18 is 2, and 18 = 2^1 * 3^2. In the second example, the smallest prime factor of 100 is 2, and 100 = 2^2 * 5^2. In the third example, 97 is a prime number, so the smallest prime factor is 97 with exponent 1.","solution":"def smallest_prime_factor_and_exponent(n): Returns the smallest prime factor of a given integer n and its exponent. if n <= 1: raise ValueError(\\"Input should be an integer greater than 1\\") def smallest_prime_factor(n): if n % 2 == 0: return 2 for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return i return n spf = smallest_prime_factor(n) exponent = 0 while n % spf == 0: n //= spf exponent += 1 return spf, exponent"},{"question":"Given a string consisting of lowercase letters, write a function to verify if the string is a palindrome by removing at most one character. A palindrome is a string that reads the same backward as forward. Input One string of lowercase letters. The length of the string does not exceed 1000 characters. Output Return True if the string can be a palindrome by removing at most one character, otherwise return False. Example Input abcba abcca Output True True","solution":"def valid_palindrome(s): Given a string s, returns True if it can be a palindrome by removing at most one character. def is_palindrome_range(i, j): Helper function to check if the substring s[i:j+1] is a palindrome return all(s[k] == s[j - k + i] for k in range(i, j)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Skip one character either from the left or the right and check if it forms a palindrome return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"Mrs.Z is creating a new product line and needs a specific type of numbering system for each product. She wants to generate a unique code for each item in the line. The code should be derived from the product ID by creating a permutation of the digits that form the largest possible number. However, she has strict criteria to ensure that the generated code is valid. Specifically, the resulting code must follow a descending sequence — the largest digit first, down to the smallest digit. Additionally, no leading zeroes are permitted in the code. She seeks your assistance in writing a program to generate these unique product codes. Input The first line of input contains an integer T, the number of test cases. The first line of each test case contains one integer P, the product ID without leading zeroes. Output For each test case, output the largest permutation of digits of P that follows Mrs.Z\'s criteria. Constraints 1 ≤ T ≤ 100 1 ≤ P ≤ 10^9 Example Input: 3 231 503 1 Output: 321 530 1 Explanation - For the first test case, the largest permutation of 231 is 321. - For the second test case, the largest permutation of 503 is 530, considering the criteria of no leading zeroes and descending order. - For the third test case, the largest permutation of 1 is 1 itself.","solution":"def generate_large_code(n): Given an integer n, returns the largest permutation of its digits that follows the descending sequence. # Convert integer to a string to manipulate digits digits = list(str(n)) # Sort the digits in descending order digits.sort(reverse=True) # Join the sorted digits back into a string and convert to integer largest_code = int(\\"\\".join(digits)) return largest_code def process_test_cases(T, test_cases): Processes a given list of test cases. Each test case is an integer P. Returns a list of largest permutation of digits of each P in descending order. results = [] for P in test_cases: results.append(generate_large_code(P)) return results"},{"question":"Consider a grid of n rows and m columns where each cell contains an integer representing a certain elevation level. Your task is to compute the maximum difference in elevation between any two cells in a rectangle subgrid within the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the size of the grid. Each of the next n lines contains m integers separated by spaces, representing the elevation levels of the cells. Output Print a single integer — the maximum difference in elevation between any two cells in a rectangle subgrid within the grid. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 8 Input 2 4 10 20 30 40 15 25 35 45 Output 35 Input 1 3 100 150 200 Output 100 Note In the first example, the entire grid is the optimal subgrid. The elevation levels range from 1 to 9, and the max difference is 9 - 1 = 8. In the second example, any rectangle containing the smallest and largest values is valid. The max difference is 45 - 10 = 35. In the third example, there are only three cells in a single row, and the max difference is between 100 and 200, which is 100.","solution":"def max_elevation_diff(n, m, grid): Calculates the maximum difference in elevation between any two cells in the grid. Args: n: Number of rows in the grid. m: Number of columns in the grid. grid: 2D list of integers representing the elevation levels. Returns: Maximum difference in elevation. min_elevation = float(\'inf\') max_elevation = float(\'-inf\') for row in grid: for elevation in row: if elevation < min_elevation: min_elevation = elevation if elevation > max_elevation: max_elevation = elevation return max_elevation - min_elevation"},{"question":"Given an integer n as input, print the sum of the first n natural numbers. Constraints * 1 leq n leq 50 * n is an integer. Input Input is given from Standard Input in the following format: n Output Print the sum of the first n natural numbers as an integer. Examples Input 5 Output 15 Input 10 Output 55","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. n: int - A positive integer representing how many natural numbers to sum. 1 <= n <= 50 return n * (n + 1) // 2"},{"question":"A network of computers is represented as an undirected graph where nodes are computers and edges represent a direct connection between two computers. Each computer can send data to any other computer directly if they have a direct connection, or indirectly through other computers. A network is resilient if removing any single computer does not disconnect the network. Your task is to determine if the given network is resilient. # Input The input consists of multiple datasets. Each dataset has the following format: - An integer `N`, the number of computers in the network. - An integer `M`, the number of direct connections between the computers. - `M` pairs of integers `u` and `v` (0 ≤ u, v < N), each representing a direct connection between computer `u` and computer `v`. `N` and `M` are such that 1 ≤ N ≤ 100 and 0 ≤ M ≤ 4950. The last dataset is followed by a line containing `0 0`, which should not be processed. # Output For each dataset, output `Yes` if the network is resilient, or `No` otherwise. # Example Input ``` 4 4 0 1 1 2 2 3 3 0 4 3 0 1 1 2 2 3 0 0 ``` Output ``` Yes No ``` **Explanation**: - In the first dataset, removing any single computer still leaves the remaining computers connected, thus the output is `Yes`. - In the second dataset, removing computer 1 or computer 2 will disconnect the network, thus the output is `No`.","solution":"def is_network_resilient(n, m, connections): from collections import defaultdict, deque def bfs(start, removed): visited = [False] * n queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor != removed and not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return all(visited[i] or i == removed for i in range(n)) def is_connected_excluding(removed): for i in range(n): if i != removed: return bfs(i, removed) graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) if n == 1: return \\"Yes\\" for i in range(n): if not is_connected_excluding(i): return \\"No\\" return \\"Yes\\" def evaluate_datasets(datasets): results = [] for n, m, connections in datasets: results.append(is_network_resilient(n, m, connections)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): n, m = map(int, lines[i].strip().split()) if n == 0 and m == 0: break connections = [] for _ in range(m): i += 1 connections.append(tuple(map(int, lines[i].strip().split()))) datasets.append((n, m, connections)) i += 1 return datasets"},{"question":"You are given an array of n integers. Your task is to find the number of distinct pairs (i, j) such that 1 ≤ i < j ≤ n and the sum of the elements at index i and j is even. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the array. Output For each test case, output a single integer — the number of distinct pairs (i, j) such that the sum of the elements at index i and j is even. Example Input: 3 4 1 2 3 4 3 2 4 6 5 1 3 5 7 9 Output: 2 3 10 Note In the first test case, there are two pairs with even sums: (2, 4) and (1, 3). In the second test case, all the pairs have even sums: (2, 4), (2, 6), (4, 6). In the third test case, all elements are odd, so every pair has an even sum. The 10 pairs are: (1, 3), (1, 5), (1, 7), (1, 9), (3, 5), (3, 7), (3, 9), (5, 7), (5, 9), and (7, 9).","solution":"def count_even_sum_pairs(t, test_cases): results = [] for test in test_cases: n, array = test odd_count = sum(1 for x in array if x % 2 != 0) even_count = n - odd_count # All pairs of even numbers and all pairs of odd numbers: even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 results.append(even_pairs + odd_pairs) return results"},{"question":"Sara is a computer science student working on a new project where she needs to verify whether a given sequence of numbers can be rearranged to form a contiguous subsequence without any duplicates. A contiguous subsequence is a sequence of numbers where each element appears exactly once and each number is a consecutive integer, such as {4, 5, 6, 7} or {10, 11, 12}. Sara\'s task is to determine whether the given sequence can be rearranged into such a contiguous subsequence. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the size of the sequence. The second line contains n integers representing Sara\'s sequence. Each of these integers will be between 1 and 1 000 000 inclusive. Output Print \\"YES\\" if the sequence can be rearranged to form a contiguous subsequence without duplicates, and \\"NO\\" otherwise. Examples Input 5 4 7 5 6 3 Output YES Input 4 1 3 2 4 Output YES Input 4 1 2 4 6 Output NO Note In the first example, the sequence can be rearranged into {3, 4, 5, 6, 7}, which is a contiguous subsequence. In the second example, the sequence can be rearranged into {1, 2, 3, 4}, which is a contiguous subsequence. In the third example, no rearrangement of the sequence can form a contiguous subsequence because there are gaps between the numbers.","solution":"def can_form_contiguous_subsequence(n, sequence): Determines whether the given sequence can be rearranged into a contiguous subsequence without duplicates. Parameters: n (int): The size of the sequence sequence (List[int]): The list containing the sequence of numbers Returns: str: \\"YES\\" if the sequence can be rearranged to form a contiguous subsequence, \\"NO\\" otherwise. unique_sequence = set(sequence) # If the number of unique elements is not the same as the length of the list, there are duplicates. if len(unique_sequence) != n: return \\"NO\\" min_value = min(unique_sequence) max_value = max(unique_sequence) # Check if the length of the unique sequence is the same as the range from min to max values. if max_value - min_value + 1 == n: return \\"YES\\" return \\"NO\\""},{"question":"# Problem Statement Alice has a list of `n` positive integers and wants to find out the minimal number of integers she needs to remove from the list so that the greatest common divisor (GCD) of the remaining integers is equal to `k`. You are given the integer `n`, the integer `k`, and the list of `n` integers. Your task is to determine the minimum number of integers to remove such that the GCD of the remaining integers is equal to `k`. If it\'s not possible to achieve a GCD of `k` with any subset of the list, return `-1`. # Input The first line contains an integer `n` denoting the size of the list. The second line contains `n` space-separated positive integers. The third line contains an integer `k`. # Output Output a single integer representing the minimum number of integers to remove. # Constraints * 1 ≤ n ≤ 1000 * 1 ≤ k ≤ 10^6 * 1 ≤ list[i] ≤ 10^6 # Example Input ``` 5 2 3 4 9 8 2 ``` Output ``` 2 ``` Input ``` 4 5 7 11 13 2 ``` Output ``` -1 ``` # Explanation In the first example, by removing `3` and `9`, the remaining integers are `[2, 4, 8]` and their GCD is `2`. Thus, 2 removals are needed. In the second example, it is impossible to achieve a GCD of `2` with any subset of the given list, so the output is `-1`.","solution":"from math import gcd from functools import reduce def minimal_removals_to_gcd_k(n, lst, k): def gcd_list(lst): return reduce(gcd, lst) # Filtering out the elements that are not divisible by k filtered_lst = [x for x in lst if x % k == 0] # If no elements are divisible by k, return -1 if not filtered_lst: return -1 # Calculating the gcd of the entire filtered list overall_gcd = gcd_list(filtered_lst) # If the gcd of the filtered list is already k, no need to remove any elements if overall_gcd == k: return len(lst) - len(filtered_lst) # Removing elements one-by-one to see if we can get the GCD down to k min_removals = float(\'inf\') for i in range(len(filtered_lst)): temp_lst = filtered_lst[:i] + filtered_lst[i+1:] if temp_lst and gcd_list(temp_lst) == k: min_removals = min(min_removals, len(lst) - len(temp_lst)) return min_removals if min_removals != float(\'inf\') else -1"},{"question":"Design a data structure and implement an algorithm to simulate the operations of a playlist manager. The playlist should support adding songs, removing songs, playing the next song, playing the previous song, and listing all songs in the current order. Details You are required to create a Playlist class with the following methods: # `add_song(self, song)` - Adds the specified song to the end of the playlist. - A song is represented as a string with the song\'s name. # `remove_song(self, song)` - Removes the specified song from the playlist. - If the song does not exist in the playlist, do nothing. # `next_song(self)` - Moves to the next song in the playlist and returns the song\'s name. - If the current song is the last one, wrap around and return the first song. - If the playlist is empty, return `None`. # `previous_song(self)` - Moves to the previous song in the playlist and returns the song\'s name. - If the current song is the first one, wrap around and return the last song. - If the playlist is empty, return `None`. # `list_songs(self)` - Returns a list of all songs currently in the playlist in their current order. # Example Usage ```python playlist = Playlist() playlist.add_song(\\"Song A\\") playlist.add_song(\\"Song B\\") playlist.add_song(\\"Song C\\") assert playlist.list_songs() == [\\"Song A\\", \\"Song B\\", \\"Song C\\"] assert playlist.next_song() == \\"Song A\\" assert playlist.next_song() == \\"Song B\\" assert playlist.previous_song() == \\"Song A\\" playlist.remove_song(\\"Song B\\") assert playlist.list_songs() == [\\"Song A\\", \\"Song C\\"] assert playlist.previous_song() == \\"Song C\\" assert playlist.next_song() == \\"Song A\\" ``` # Constraints - The playlist should maintain the order of songs in which they were added. - Assume that song names are unique within the playlist. - The user of this class will not perform operations concurrently (no need for thread safety). Implement the Playlist class in Python.","solution":"class Playlist: def __init__(self): self.songs = [] self.current_index = -1 def add_song(self, song): self.songs.append(song) def remove_song(self, song): if song in self.songs: song_index = self.songs.index(song) self.songs.remove(song) if self.current_index >= song_index: self.current_index -= 1 if not self.songs: self.current_index = -1 def next_song(self): if not self.songs: return None self.current_index = (self.current_index + 1) % len(self.songs) return self.songs[self.current_index] def previous_song(self): if not self.songs: return None self.current_index = (self.current_index - 1) % len(self.songs) return self.songs[self.current_index] def list_songs(self): return self.songs"},{"question":"You are organizing a relay race competition in your school. For the competition, there are N teams, each consisting of M players. You have to determine the final positions of the players after the relay race is completed. The race is conducted on a straight track of length L meters, where each player covers the distance between two specific points on the track in a given time and then hands over the baton to the next player in their team. Each player starts from their assigned starting point and runs to their assigned destination point, which are strictly within the length of the track (0 to L meters). For each player, you are given their starting point S_{i,j}, their destination point D_{i,j}, and the time T_{i,j} it takes them to cover the distance. Here, i denotes the player\'s team (1 to N), and j denotes the player\'s position within the team (1 to M). The total distance each player runs is |D_{i,j} - S_{i,j}| meters. To determine the final positions of the players after all the relay rounds are completed, simulate the movement of the players based on the input and compute the final positions based on the total time taken for each team. Determine the minimum time taken by a team to complete the relay race and print the final positions of all the players. Example Input 2 3 100 10 30 5 30 60 5 60 90 5 90 70 10 70 40 10 40 10 10 Output 20 10 30 60 90 90 70 40 10 Explanation Team 1: - Player 1 starts at 10m and reaches 30m in 5s. - Player 2 takes over the baton at 30m and reaches 60m in 5s. - Player 3 takes over the baton at 60m and reaches 90m in 5s. Team 2: - Player 1 starts at 90m and reaches 70m in 10s. - Player 2 takes over the baton at 70m and reaches 40m in 10s. - Player 3 takes over the baton at 40m and reaches 10m in 10s. Total time for Team 1 is 15 seconds. Total time for Team 2 is 30 seconds. Therefore, the minimum time taken for team to finish the race is 15 seconds and the race player positions for each team are: Team 1: 10, 30, 60, 90 Team 2: 90, 70, 40, 10","solution":"def relay_race(N, M, L, players_data): Determines the minimum time taken by a team to complete the relay race and final positions of all the players. :param N: int - Number of teams :param M: int - Number of players per team :param L: int - Length of the track :param players_data: list of tuples - Each entry is (S_ij, D_ij, T_ij) :return: tuple - (minimum time taken, final positions for each team) # Split the player data by teams teams_data = [] for i in range(N): team_data = players_data[i * M: (i + 1) * M] teams_data.append(team_data) # Calculate total time for each team and keep track of final positions final_positions = [] min_time = float(\'inf\') for team in teams_data: total_time = 0 team_positions = [] for (S, D, T) in team: total_time += T team_positions.append(S) team_positions.append(team[-1][1]) # Add final destination of the last player final_positions.append(team_positions) min_time = min(min_time, total_time) return min_time, final_positions"},{"question":"You have been tasked with building a library to manage a collection of books. For this problem, each book in the library has a title, author, year of publication, and the number of pages. The goal is to implement a class `Book` that models a book and a class `Library` that manages a collection of books. The `Book` class should have: - A constructor that takes the title, author, year of publication, and number of pages as arguments. - A method `__str__` that returns a string representation of the book in the format: `\\"Title by Author, Year, Pages pages\\"`. The `Library` class should have: - A method to add a new book. - A method to remove a book by title. - A method to find a book by title. - A method to list all books sorted by year of publication. Input - The first line contains an integer `n`, the number of operations (1 ≤ n ≤ 100). - The next `n` lines contain operations. There are four types of operations: 1. `\\"ADD title, author, year, pages\\"` to add a new book. 2. `\\"REMOVE title\\"` to remove a book by title. 3. `\\"FIND title\\"` to find and print a book by title. 4. `\\"LIST\\"` to list all books sorted by year of publication in ascending order. Each book should be printed on a new line. Output - For each `FIND` operation, print the string representation of the found book. - For each `LIST` operation, print all books sorted by year of publication. Examples Input 6 ADD Harry Potter, J.K. Rowling, 1997, 309 ADD The Hobbit, J.R.R. Tolkien, 1937, 310 LIST FIND The Hobbit REMOVE Harry Potter LIST Output The Hobbit by J.R.R. Tolkien, 1937, 310 pages The Hobbit by J.R.R. Tolkien, 1937, 310 pages","solution":"class Book: def __init__(self, title, author, year, pages): self.title = title self.author = author self.year = year self.pages = pages def __str__(self): return f\\"{self.title} by {self.author}, {self.year}, {self.pages} pages\\" class Library: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def remove_book_by_title(self, title): self.books = [book for book in self.books if book.title != title] def find_book_by_title(self, title): for book in self.books: if book.title == title: return book return None def list_books_sorted_by_year(self): return sorted(self.books, key=lambda book: book.year)"},{"question":"Peter has a tree with n nodes and n-1 edges. A tree is an undirected connected acyclic graph. Each node is assigned an integer value. Peter wants to find out all the unique pairs of nodes (u, v) such that the values of these nodes form an arithmetic progression with a difference of 1 when sorted in ascending order. An arithmetic progression with a difference of 1 is any sequence of the form {a, a+1, a+2, ..., a+k}. Your task is to find the number of unique pairs (u, v) such that the values of nodes u and v form an arithmetic progression with a difference of 1. Input The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of nodes in the tree. The second line contains n space-separated distinct integers vi (1 ≤ vi ≤ 10^9), where vi is the value assigned to the i-th node. Each of the next n-1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v. Output Print a single integer — the number of unique pairs (u, v) that form an arithmetic progression with a difference of 1. Examples Input 5 3 2 1 4 5 1 2 1 3 3 4 3 5 Output 4 Input 4 1 4 3 2 1 2 1 3 2 4 Output 3 Note In the first example, the values of the nodes after sorting are [1, 2, 3, 4, 5]. The valid pairs are (1, 2), (2, 3), (3, 4), and (4, 5). In the second example, the values of the nodes after sorting are [1, 2, 3, 4]. The valid pairs are (1, 2), (2, 3), and (3, 4).","solution":"def find_unique_pairs(n, values, edges): Returns the number of unique pairs (u, v) such that the values of nodes u and v form an arithmetic progression with a difference of 1. # Sorting the values to easily find consecutive differences of 1 values.sort() # Counting pairs with consecutive differences of 1 pair_count = 0 for i in range(1, n): if values[i] - values[i-1] == 1: pair_count += 1 return pair_count"},{"question":"You are given a sequence of integers `a=[a_1,a_2,...,a_n]` of length `n`. We define an \\"ascending subsequence\\" as a subsequence in which each element is greater than or equal to the previous one. For example, for the sequence `a=[1,3,2,4,3,5]`: * `[1,3,4,5]`, `[1,2,4,5]`, `[1,3,5]` are some of the possible ascending subsequences; * `[3,2,4]`, `[4,3,5]`, `[4,2,2]` are not ascending subsequences. You need to answer `m` queries. Each query consists of two integers `l` and `r` (1 ≤ l ≤ r ≤ n), representing a subarray of `a` from the `l-th` to `r-th` position inclusive. For each query, determine the length of the longest ascending subsequence that can be obtained from that subarray. **Input:** The first line contains an integer `n` (1 ≤ n ≤ 1000) — the length of the sequence `a`. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^4) — the elements of the sequence `a`. The third line contains an integer `m` (1 ≤ m ≤ 100) — the number of queries. The following `m` lines contain pairs of integers `l_j` and `r_j` (1 ≤ l_j ≤ r_j ≤ n) — the queries. **Output:** Print `m` integers — the length of the longest ascending subsequence for each query. **Examples:** **Input:** ``` 6 1 3 2 4 3 5 3 1 6 2 4 3 6 ``` **Output:** ``` 4 2 3 ``` **Explanation:** For the first example: - The full array is `[1, 3, 2, 4, 3, 5]`. A possible longest ascending subsequence is `[1, 3, 4, 5]` with length 4. - For subarray `[3, 2, 4]`, the longest ascending subsequence is `[3, 4]` with length 2. - For subarray `[2, 4, 3, 5]`, the longest ascending subsequence is `[2, 4, 5]` with length 3.","solution":"def longest_ascending_subsequence_length(arr, l, r): subarray = arr[l-1:r] n = len(subarray) if n == 0: return 0 # Initialize DP array to store the lengths of the longest ascending subsequence ending at each element dp = [1] * n # Compute the length of the longest ascending subsequence using a dynamic programming approach for i in range(1, n): for j in range(i): if subarray[i] >= subarray[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest ascending subsequence is the maximum value in dp return max(dp) def process_queries(n, arr, queries): results = [] for l, r in queries: results.append(longest_ascending_subsequence_length(arr, l, r)) return results"},{"question":"Given an array of integers, a \\"mountain\\" is defined as a sequence of consecutive elements that first strictly increase to a peak (the maximum value of the sequence), and then strictly decrease. The length of the mountain is the number of elements in the sequence. Your task is to write a program that finds the length of the longest \\"mountain\\" in the array. If there is no mountain, the output should be 0. Input The input consists of two lines. The first line contains a single integer n (2 ≤ n ≤ 1000) which represents the number of elements in the array. The second line contains n integers separated by a space, each representing an element of the array. Each integer is between -100 and 1000, inclusive. Output Print a single integer, the length of the longest mountain in the array. If there is no mountain, print 0. Example Input 9 2 1 4 7 3 2 5 1 6 Output 5 Explanation The longest mountain is [1, 4, 7, 3, 2], which has length 5. Input 5 2 2 2 2 2 Output 0 Explanation There are no mountains in the array.","solution":"def longest_mountain(arr): Returns the length of the longest mountain in the array. n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"Develop a function that takes a string representing a time duration in the format `HH:MM:SS` and converts it into total seconds. Input The input consists of multiple datasets, where each dataset is a string representing a time duration in the format `HH:MM:SS`. The input string conforms to a 24-hour time format, with `HH` representing hours (00-23), `MM` representing minutes (00-59), and `SS` representing seconds (00-59). Output For each input dataset, the output should be the total number of seconds that correspond to the given time duration. Example Input ``` 00:00:01 01:02:03 23:59:59 12:34:56 09:45:12 ``` Output ``` 1 3723 86399 45296 35112 ``` Note: - Each output should be a separate line in the same order as the input datasets. - Your function should handle multiple inputs efficiently.","solution":"def time_to_seconds(time_str): Converts a time duration string in the format \'HH:MM:SS\' to total seconds. Args: time_str (str): A string representing a time duration in the format \'HH:MM:SS\'. Returns: int: The total number of seconds corresponding to the given time duration. hh, mm, ss = map(int, time_str.split(\\":\\")) total_seconds = hh * 3600 + mm * 60 + ss return total_seconds"},{"question":"Luna loves playing with sequences. She has a sequence of numbers A of length n. Luna can perform the following operation on the sequence: 1. Choose any two indices i and j (1 ≤ i, j ≤ n, i ≠ j), and remove these two elements from the sequence. 2. Insert their sum back into the sequence at either the i-th or j-th position. Luna wants to know the maximum possible value of the remaining element after performing the operation exactly n-1 times (until only one element is left). Write a program that outputs the maximum possible remaining value. Input: The first line contains an integer n (the length of the sequence A). The second line contains n integers A1, A2, ..., An (the elements of the sequence). Output: Output a single integer, the maximum possible remaining value. Constraints: 1 ≤ n ≤ 100,000 1 ≤ Ai ≤ 1,000 Example: Input: 5 1 2 3 4 5 Output: 15 Explanation: Luna can perform the operations as follows: Sum 1 and 2 to get 3, the sequence becomes [3, 3, 4, 5] Sum 3 and 3 to get 6, the sequence becomes [6, 4, 5] Sum 6 and 4 to get 10, the sequence becomes [10, 5] Sum 10 and 5 to get 15, the sequence becomes [15] In this way, she maximizes the remaining element value to be 15.","solution":"def max_remaining_element(n, A): Returns the maximum possible value of the remaining element after performing the operation n-1 times. Args: n : int : the length of the sequence A A : list of int : the elements of the sequence Returns: int : the maximum possible remaining value return sum(A)"},{"question":"Helen is an avid collector of rare gemstones, and she loves organizing her collection. One day, she decides to sort her gemstones based on their rarity. She classifies each gemstone with a rarity score, which is an integer. She has devised a set of rules for sorting: 1. A higher rarity score indicates that a gemstone is rarer. 2. For gemstones with the same rarity score, their order should be based on their initial positions - i.e., maintain their relative order. Helen asks for your help to sort her collection. She provides you with a list of gemstones, each represented by their rarity score, and expects them to be returned in sorted order based on the rules defined. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 100000) indicating the number of gemstones in Helen\'s collection. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 100000) representing the rarity scores of the gemstones. Output: - The output should be a list of gemstones\' rarity scores, sorted in non-ascending order by rarity. If two gemstones have the same rarity score, they should appear in the same order as in the input. Example Input: 5 3 1 4 4 5 Output: 5 4 4 3 1 Input: 7 10 7 3 9 9 4 1 Output: 10 9 9 7 4 3 1","solution":"def sort_gemstones(n, gemstones): Sort gemstones based on their rarity score in non-ascending order while maintaining the relative order of gemstones with the same rarity score. Parameters: n (int): Number of gemstones. gemstones (list): List of integers representing the rarity scores of the gemstones. Returns: list: Sorted list of gemstones\' rarity scores. return sorted(gemstones, key=lambda x: -x)"},{"question":"Given an array of integers, a \\"mountain\\" is defined as a subset of elements that increases to a peak and then decreases. The length of the mountain is defined by the number of elements in it including the peak. Write a function to find the length of the longest mountain in the array. The function should take an integer array `arr` and return the length of the longest mountain subarray. Input: The first line contains the integer n (1 ≤ n ≤ 10^4), the number of elements in the array. The second line contains n space-separated integers, each representing an element of the array. Output: Output a single integer representing the length of the longest mountain in the array. If there is no mountain, return 0. Examples Input 9 2 1 4 7 3 2 5 1 1 Output 5 Input 6 2 2 2 2 2 2 Output 0","solution":"def longest_mountain(arr): Given an array of integers, find the length of the longest mountain subarray. A mountain is defined as a subset of elements that increases to a peak and then decreases. The length of the mountain is defined by the number of elements in it including the peak. If there is no mountain, return 0. n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"Limak is fascinated by palindromes these days. He is learning about them and decides to create a new challenge for himself. He has a sequence of lowercase English letters and he wants to make the longest possible palindrome by rearranging the letters. If there are multiple palindromes with the same maximum length, he simply needs one of them. A palindrome is a word that reads the same backward as forward, for example, \\"radar\\" or \\"level\\". Can you help Limak to find out the length of the longest possible palindrome he can make from the given sequence of letters? Input The input consists of a single string s (1 ≤ |s| ≤ 105) consisting of lowercase English letters. Output Print a single integer representing the length of the longest possible palindrome that Limak can make from the given string. Examples Input abccccdd Output 7 Input a Output 1 Input aaabbbb Output 7","solution":"def longest_palindrome_length(s): Returns the length of the longest possible palindrome that can be made from the given string. from collections import Counter count = Counter(s) length = 0 has_odd_count = False for freq in count.values(): if freq % 2 == 0: length += freq else: length += freq - 1 has_odd_count = True # Add one if there is at least one character with an odd frequency (to place in the center) if has_odd_count: length += 1 return length"},{"question":"You are given a piece of string containing a mixture of uppercase, lowercase letters, and digits. The task is to rearrange the string such that all digits appear before all the letters, while preserving the relative order of digits and letters among themselves. For example, if the input string is \\"a1b2c3\\", the expected output would be \\"123abc\\". Constraints * The length of the string is between 1 and 1000. * The string will not contain any special characters or spaces. Input The input is given from Standard Input in the following format: s Output Print the rearranged string. Examples Input a1b2c3 Output 123abc Input Z9Y8X7 Output 987ZYX Input test123 Output 123test","solution":"def rearrange_string(s): Rearrange the given string such that all digits appear before all the letters, while preserving the relative order of digits and letters among themselves. digits = [char for char in s if char.isdigit()] letters = [char for char in s if char.isalpha()] return \'\'.join(digits + letters) # Example usage: # input_str = \'a1b2c3\' # print(rearrange_string(input_str)) # Output: \'123abc\'"},{"question":"Mimi loves playing with sequences of integers. She makes up a game where she takes a sequence and can perform the following operation any number of times: * Choose two different positions i and j in the sequence such that the absolute difference between the values at these positions is greater than or equal to a given integer d. * Swap the values at positions i and j in the sequence. Mimi wants to know the lexicographically smallest sequence she can obtain by performing the above operation any number of times. Constraints * The sequence will have at least 2 and at most 100 integers. * Each integer in the sequence will be between -10^9 and 10^9. * The integer d will be between 1 and 10^9. Input The input is given from Standard Input in the following format: n d a1 a2 ... an Where n is the number of elements in the sequence, d is the given integer, and ai represents the integer in the sequence. Output Print the lexicographically smallest sequence that can be obtained by performing the operation any number of times. Examples Input 5 3 5 2 10 8 7 Output 2 5 7 8 10 Input 4 1 3 1 4 2 Output 1 2 3 4","solution":"def lexicographically_smallest_sequence(n, d, sequence): Returns the lexicographically smallest sequence possible given the constraints. n: int - number of elements in the sequence d: int - the given integer sequence: list of int - the sequence of integers Returns: list of int - lexicographically smallest sequence # Sort the sequence to get the lexicographically smallest order sorted_sequence = sorted(sequence) return sorted_sequence"},{"question":"A car navigation system must map out the optimal route from a starting location to a destination across a city\'s grid-based layout. The city is represented as an MxN grid of blocks, with streets running between the blocks. Certain blocks contain obstacles that cannot be crossed. Given a grid of dimensions M (rows) and N (columns), the position of the starting block, the position of the destination block, and the locations of obstacles, your task is to write a program that computes the minimum number of streets that must be crossed to travel from the start to the destination block. You can assume that you can only move up, down, left, or right. If the destination is not reachable from the start position, output -1. Input: - The first line contains two integers M and N (1 <= M, N <= 1000) which represent the dimensions of the grid. - The second line contains two integers x_start and y_start which are the coordinates of the starting block. - The third line contains two integers x_end and y_end which are the coordinates of the destination block. - The fourth line contains an integer K (0 <= K <= 1000), representing the number of obstacles. - The next K lines each contain two integers x_obs and y_obs, representing the coordinates of each obstacle block. Output: - A single integer representing the minimum number of streets to be crossed from the start block to the destination block, or -1 if the destination is not reachable. Example: Input: 5 5 0 0 4 4 3 1 2 2 2 3 3 Output: 8","solution":"from collections import deque def min_streets_to_cross(M, N, x_start, y_start, x_end, y_end, obstacles): grid = [[0] * N for _ in range(M)] for x, y in obstacles: grid[x][y] = 1 # mark obstacles directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < M and 0 <= y < N and grid[x][y] == 0 def bfs(start, end): queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, dist + 1)) return -1 return bfs((x_start, y_start), (x_end, y_end))"},{"question":"A company wants to design a security system that allows employees to enter the building with a special passcode. Each passcode is represented by a string composed solely of digits (\'0\' to \'9\'). The passcode is considered valid if it does not contain any two adjacent digits that are the same. You need to write a function that determines whether a passcode is valid. Input: - An integer T (1 ≤ T ≤ 100) — the number of passcodes to check. - T lines follow, each containing a single string composed solely of digits (\'0\' to \'9\'), representing a passcode to be checked. Output: - For each passcode, print \\"Valid\\" if the passcode is valid and \\"Invalid\\" otherwise. Example Input: 5 123456 112345 121212 987654321 223344 Output: Valid Invalid Valid Valid Invalid","solution":"def is_valid_passcode(passcodes): results = [] for passcode in passcodes: if all(passcode[i] != passcode[i + 1] for i in range(len(passcode) - 1)): results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results def check_passcodes(T, passcodes): results = is_valid_passcode(passcodes) for result in results: print(result)"},{"question":"A research team is tasked with monitoring the migration patterns of a particular species of birds. The birds move from one location to another, and each location is identified by a unique number. Scientists want to determine if the birds can reach a specific location using exactly a certain number of stops, starting from their current location. The birds can revisit any location multiple times. To help the research team, you need to write a program that establishes if the birds can reach their destination using the exact number of stops specified. Locations are numbered from 1 to N, with the starting location being 1 and the target location being N. The movement between locations is described by pairs of integers which represent direct connections. All connections are bi-directional, and there is at most one connection between any two locations, with no connection from a location to itself. The input consists of multiple test cases. Each test case is provided in the following format: N M S a1 b1 a2 b2 ... aM bM Here: - N is the total number of locations. - M is the total number of connections. - S is the number of stops the birds need to reach the target location. - ai and bi (1 ≤ i ≤ M) are integers representing the locations with a direct connection between them. N, M, and S are positive integers such that: 2 ≤ N ≤ 30, 1 ≤ M ≤ 100, 1 ≤ S ≤ 10^9. The input ends with a line containing `0 0 0`. Output For each dataset, output a single line containing `\\"yes\\"` if the birds can reach the target location using exactly S stops, otherwise output `\\"no\\"`. Example Input 4 4 3 1 2 2 3 3 4 4 2 3 3 2 1 2 2 3 3 1 6 7 4 1 2 1 3 2 4 3 5 4 6 5 6 6 1 7 9 5 1 2 1 3 2 4 2 5 3 6 3 7 4 6 5 7 6 7 0 0 0 Output yes yes no yes","solution":"def can_reach_target_with_stops(N, M, S, connections): from collections import defaultdict, deque # Build the adjacency list adj_list = defaultdict(list) for a, b in connections: adj_list[a].append(b) adj_list[b].append(a) # Use BFS to check if it\'s possible to reach node N using exactly S steps queue = deque([(1, 0)]) # (current_position, current_steps) visited = defaultdict(set) # Store steps and positions to prevent re-visiting while queue: position, steps = queue.popleft() if steps == S: if position == N: return \\"yes\\" continue if S - steps > (N - 1): # More stops than potentially required, skip. continue for neighbor in adj_list[position]: if steps + 1 not in visited[neighbor]: visited[neighbor].add(steps + 1) queue.append((neighbor, steps + 1)) return \\"no\\" def process_test_cases(input_data): results = [] i = 0 while i < len(input_data): N, M, S = map(int, input_data[i].split()) if N == 0 and M == 0 and S == 0: break connections = [] for j in range(1, M+1): connections.append(tuple(map(int, input_data[i+j].split()))) results.append(can_reach_target_with_stops(N, M, S, connections)) i += M + 1 return results"},{"question":"Write a program to determine the number of unique elements in the intersection of two arrays. Input The first line contains an integer n (1 ≤ n ≤ 100) representing the number of elements in the first array. The second line contains n integers separated by spaces, each integer being between -100 and 100, inclusive. The third line contains an integer m (1 ≤ m ≤ 100) representing the number of elements in the second array. The fourth line contains m integers separated by spaces, each integer being between -100 and 100, inclusive. Output Print the number of unique elements that are present in both arrays. Examples Input 5 1 2 3 4 5 4 2 3 5 7 Output 3 Input 3 1 2 2 4 3 3 3 4 Output 0","solution":"def count_unique_intersection_elements(n, arr1, m, arr2): Returns the number of unique elements in the intersection of two arrays. Parameters: n (int): Number of elements in the first array. arr1 (list of int): The first array of integers. m (int): Number of elements in the second array. arr2 (list of int): The second array of integers. Returns: int: Number of unique intersecting elements. set1 = set(arr1) set2 = set(arr2) intersection = set1.intersection(set2) return len(intersection)"},{"question":"Write a function to determine if a robot returns to its original position after a sequence of moves. You are given a string moves that represents the movements of the robot. The robot starts at (0, 0) and each movement is a single character that indicates its direction: - \'U\' for moving up by one unit. - \'D\' for moving down by one unit. - \'L\' for moving left by one unit. - \'R\' for moving right by one unit. The function should return `True` if the robot returns to its original position after completing all of its moves, or `False` otherwise. Input: The first line contains the number of test cases `t`, then `t` lines follow, each containing a string `moves` representing the sequence of robot moves. Output: For each test case, output \\"True\\" if the robot returns to its original position, otherwise output \\"False\\". SAMPLE INPUT 4 UD LL RRDDUULL DLUR SAMPLE OUTPUT True False True True Explanation Testcase 1: After the sequence \'UD\', the robot returns to its original position (0, 0). Testcase 2: After the sequence \'LL\', the robot is two units to the left of its starting position at (-2, 0). Testcase 3: After the sequence \'RRDDUULL\', the robot performs a complete loop and returns to (0, 0). Testcase 4: After the sequence \'DLUR\', the robot returns to its starting position at (0, 0).","solution":"def is_robot_return_origin(moves): Determines if the robot returns to its original position after a sequence of moves. :param moves: A string representing the sequence of moves. :return: True if the robot returns to its original position, False otherwise. x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"The new battle arena is ready, and teams are excited to compete in the battle of spells! Each wizard team has a certain power level for their spell, represented by an integer. The organizers of the competition want to make sure that the battles are challenging and fair. Therefore, for any battle between two wizard teams, the power level difference between the two competing teams should be as close as possible. Your task is to form the most fair matches from the list of given wizard team power levels. To keep it simple, you will only match teams in pairs and any team can participate in at most one match. For each wizard team power level list, find the sum of absolute differences of the power levels in all the possible fair matches. Input The first line of the input contains one integer q (1 ≤ q ≤ 100) — the number of test cases. The first line of each test case contains one integer n (2 ≤ n ≤ 100) — the number of wizard teams. The second line of each test case contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 1000), where p_i is the power level of the i-th wizard team. It is guaranteed that n is even. Output For each test case, print one integer — the minimum possible sum of absolute differences of the power levels in all the possible fair matches. Example Input 2 4 10 1 7 4 6 8 6 3 1 2 9 Output 6 5 Explanation In the first test case, the most fair matches that can be formed are between wizard teams with power levels (1, 4) and (7, 10). The sum of absolute differences is |1-4| + |7-10| = 3 + 3 = 6. In the second test case, the most fair matches that can be formed are (2, 3), (6, 8), and (1, 9). The sum of absolute differences is |2-3| + |6-8| + |1-9| = 1 + 2 + 8 = 11. However, pairing (1, 2), (3, 6) and (8, 9) gives the absolute differences sum of |1-2| + |3-6| + |8-9| = 1 + 3 + 1 = 5, which is minimal.","solution":"def minimum_sum_of_absolute_differences(q, test_cases): results = [] for i in range(q): n = test_cases[i][0] power_levels = sorted(test_cases[i][1]) total_difference = 0 for j in range(0, n, 2): total_difference += abs(power_levels[j] - power_levels[j+1]) results.append(total_difference) return results"},{"question":"You are given a new kind of problem related to sequences and sorting. You need to find the minimum amount of jumps needed to make all the elements in a sequence equal. You are allowed to jump from one element to another only if both elements have the same value. If no jumps are possible, report that it is impossible to make all elements equal. Input The first line contains a single integer n (1 ≤ n ≤ 300,000), the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000), the initial sequence of elements. Output Print a single integer — the minimum number of jumps needed to make all elements equal, or print -1 if it\'s not possible. Examples Input 5 1 3 3 1 3 Output 1 Input 4 2 2 2 2 Output 0 Input 3 1 2 3 Output -1 Note Consider the first example: Initially, [1, 3, 3, 1, 3]. You can jump from the first \'1\' to the second \'1\'. In one jump, all \'1\'s and \'3\'s become the same value \'3\'. In the second example: All elements are already equal, so no jumps are needed. Therefore, the answer is 0. In the third example: No jumps are possible as all the elements are distinct. Thus, it is impossible to make all elements equal, and the answer is -1.","solution":"def min_jumps_to_equal_elements(n, sequence): Returns the minimum number of jumps needed to make all elements in the sequence equal, or -1 if it is not possible. from collections import Counter # Count the frequency of each element in the sequence element_count = Counter(sequence) # If all elements are already the same, no jumps are needed if len(element_count) == 1: return 0 # Find the most common element most_common_element, most_common_count = element_count.most_common(1)[0] # Extract the positions of the most common element positions = [i for i, x in enumerate(sequence) if x == most_common_element] # If the most common element has frequency 1, it\'s impossible to make all elements equal if most_common_count == 1: return -1 # We need to count the gaps between consecutive positions of the most common element jumps_needed = 0 prev_position = positions[0] for current_position in positions[1:]: if current_position - prev_position > 1: jumps_needed += 1 prev_position = current_position return jumps_needed"},{"question":"You are given an undirected tree with `n` nodes. Each node has a unique value assigned to it. Your task is to write a function that takes the root of the tree and the values of two nodes, and returns the value of their Lowest Common Ancestor (LCA). The Lowest Common Ancestor of two nodes `v` and `w` in a tree is the deepest node `u` that has both `v` and `w` as descendants, where we allow a node to be a descendant of itself. The tree is represented as a list of edges and a list of values assigned to each node. Each edge is a tuple `(u, v)`, indicating an undirected edge between node `u` and node `v`. The values are given in the form of a dictionary where the key is the node and the value is the value assigned to the node. Your function should be: ```python def find_lca(n: int, edges: List[Tuple[int, int]], values: Dict[int, int], root: int, node1: int, node2: int) -> int: # Your code here ``` # Input - `n` (2 ≤ n ≤ 10^5): an integer representing the number of nodes in the tree. - `edges`: a list of `Tuple[int, int]` representing the edges of the tree. - `values`: a `Dict[int, int]`, where each key represents a node, and the corresponding value represents the unique value assigned to that node. - `root` (1 ≤ root ≤ n): an integer representing the root node of the tree. - `node1`, `node2` (1 ≤ node1, node2 ≤ n): integers representing the two nodes whose LCA is to be found. # Output - Return the value assigned to the LCA of the given nodes. # Examples ```python # Example 1 n = 5 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] values = {1: 3, 2: 7, 3: 5, 4: 0, 5: 9} root = 1 node1 = 2 node2 = 4 # Expected output: 3 # Example 2 n = 7 edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)] values = {1: 15, 2: 10, 3: 30, 4: 40, 5: 50, 6: 25, 7: 35} root = 1 node1 = 4 node2 = 5 # Expected output: 10 ```","solution":"from typing import List, Tuple, Dict def find_lca(n: int, edges: List[Tuple[int, int]], values: Dict[int, int], root: int, node1: int, node2: int) -> int: from collections import defaultdict, deque def build_graph(edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) return graph def dfs(node, parent): parent_map[node] = parent for neighbor in graph[node]: if neighbor != parent: dfs(neighbor, node) def find_path_to_root(node): path = [] while node is not None: path.append(node) node = parent_map[node] return path # Step 1: Build graph graph = build_graph(edges) # Step 2: Perform DFS to map each node to its parent parent_map = {} dfs(root, None) # Step 3: Find paths from node1 and node2 to the root path1 = find_path_to_root(node1) path2 = find_path_to_root(node2) # Step 4: Find the common ancestor in both paths lca_node = None path1_set = set(path1) for node in path2: if node in path1_set: lca_node = node break return values[lca_node]"},{"question":"Shikamaru is organizing a shogi tournament with n players. Each player will play exactly one match against every other player. After all the matches are completed, Shikamaru records the results in a matrix, where `results[i][j]` is 1 if player `i` defeated player `j`, and 0 otherwise. Note that `results[i][i]` is always 0 because a player does not play against themselves. Given the results of the matches, determine the minimum number of players that need to change their results (from win to loss or from loss to win) to make the tournament results consistent with a specific ranking (i.e., there exists a ranking of players such that every player who defeated another player is ranked higher than the player they defeated). Input The first line of the input contains an integer `t` (1 ≤ t ≤ 10), denoting the number of test cases. Their descriptions follow. For each test case, the first line contains an integer `n` (2 ≤ n ≤ 200) denoting the number of players. Each of the next `n` lines contains `n` integers (either 0 or 1), representing the results matrix. The `j`-th integer in the `i`-th line represents `results[i][j]`. Output For each test case, output a single integer - the minimum number of players that need to change their results in order to make the tournament results consistent with some ranking. Example Input 2 3 0 1 0 0 0 1 1 0 0 4 0 1 1 1 0 0 1 1 0 0 0 1 0 0 0 0 Output 2 0 Explanation In the first test case, the results matrix is: 0 1 0 0 0 1 1 0 0 We can change results[0][2] and results[2][0] to make the matrix consistent with the ranking 2 > 0 > 1. The total number of changes required is 2. In the second test case, the results matrix is already consistent with the ranking 0 > 1 > 2 > 3, so no changes are required. The total number of changes required is 0.","solution":"from itertools import permutations def minimum_changes(t, test_cases): results = [] for tc in test_cases: n = tc[0] matrix = tc[1] min_changes = float(\'inf\') for perm in permutations(range(n)): changes = 0 valid = True for i in range(n): for j in range(n): if i != j: if perm.index(i) < perm.index(j) and matrix[i][j] == 1: continue elif perm.index(i) > perm.index(j) and matrix[i][j] == 0: continue else: changes += 1 if changes < min_changes: min_changes = changes results.append(min_changes) return results def format_input(input_str): data = input_str.split() idx = 0 t = int(data[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(data[idx]) idx += 1 matrix = [] for _ in range(n): matrix.append([int(x) for x in data[idx:idx + n]]) idx += n test_cases.append((n, matrix)) return t, test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"Write a function that takes an integer `n` as input and generates an `n x n` spiral matrix. The matrix should be filled with the numbers from 1 to n^2 in a clockwise spiral pattern. Example: 1) Input: n = 3 Output: [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] 2) Input: n = 4 Output: [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] SAMPLE INPUT 3 SAMPLE OUTPUT 1 2 3 8 9 4 7 6 5 Explanation: For `n = 3`, the spiral matrix is created by starting from the top-left corner and moving to the right, then down, then left, and finally up, repeating this pattern in a spiral manner until all elements are filled.","solution":"def generate_spiral_matrix(n): Generates an n x n spiral matrix filled with numbers from 1 to n^2 in a clockwise spiral pattern. if n <= 0: return [] # Create an empty n x n matrix matrix = [[0]*n for _ in range(n)] # Define the boundaries top, bottom = 0, n-1 left, right = 0, n-1 # Start with number 1 num = 1 while top <= bottom and left <= right: # Traverse from left to right on the top boundary for i in range(left, right+1): matrix[top][i] = num num += 1 top += 1 # Traverse from top to bottom on the right boundary for i in range(top, bottom+1): matrix[i][right] = num num += 1 right -= 1 # Traverse from right to left on the bottom boundary for i in range(right, left-1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # Traverse from bottom to top on the left boundary for i in range(bottom, top-1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"You are participating in a coding competition where one of the problems requires you to efficiently manage a list of integers with various operations. The operations you need to perform are as follows: * `1 x y`: Insert the integer y at the x-th position (1-based index) in the list. If x is greater than the current size of the list, append y to the end. * `2 x`: Remove the integer at the x-th position (1-based index) from the list. If x is out of bounds, ignore the operation. * `3 x y`: Replace the integer at the x-th position (1-based index) with y. If x is out of bounds, ignore the operation. * `4 y`: Count the number of times the integer y appears in the list. You are required to handle these operations efficiently as there could be a large number of them. Input The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^6) — the initial size of the list and the number of operations. The second line contains n integers representing the initial elements of the list. Each of the following q lines describes an operation in the format given in the statement. Output For each operation of type 4, print the count of integer y in the list. Example Input 7 11 1 2 3 4 5 6 7 1 3 10 1 10 20 2 5 2 8 3 6 15 4 10 4 15 4 2 4 7 4 100 Output 1 0 1 0 0 Explanation 1. List after initial values: [1, 2, 3, 4, 5, 6, 7] 2. Insert 10 at position 3: [1, 2, 10, 3, 4, 5, 6, 7] 3. Insert 20 to the end (pos 10 exceeds list length): [1, 2, 10, 3, 4, 5, 6, 7, 20] 4. Remove value at position 5: [1, 2, 10, 3, 4, 6, 7, 20] 5. Remove value at position 8: [1, 2, 10, 3, 4, 6, 7] 6. Replace value at position 6 with 15: [1, 2, 10, 3, 4, 15, 7] 7. Count of 10: 1 8. Count of 15: 1 9. Count of 2: 1 10. Count of 7: 1 11. Count of 100: 0","solution":"def manage_list(n, q, initial_list, operations): result_list = initial_list result = [] for operation in operations: op = operation.split() type_of_operation = int(op[0]) if type_of_operation == 1: x = int(op[1]) y = int(op[2]) if x > len(result_list): result_list.append(y) else: result_list.insert(x - 1, y) elif type_of_operation == 2: x = int(op[1]) if 1 <= x <= len(result_list): result_list.pop(x - 1) elif type_of_operation == 3: x = int(op[1]) y = int(op[2]) if 1 <= x <= len(result_list): result_list[x - 1] = y elif type_of_operation == 4: y = int(op[1]) result.append(result_list.count(y)) return result"},{"question":"You are given an integer array `nums`. Your task is to determine if any value appears at least twice in the array, and if so, return `true`. If every element is distinct, return `false`. Constraints * 1 leq `nums.length` leq 1000 * -1000 leq `nums[i]` leq 1000 Input Input is given from Standard Input in the following format: `n` `nums[0] nums[1] ... nums[n-1]` Output Print `true` if any value appears at least twice in the array, otherwise print `false`. Examples Input 5 1 2 3 1 Output true Input 4 1 2 3 4 Output false Input 6 1 1 1 3 3 4 Output true","solution":"def contains_duplicate(nums): Returns true if any value appears at least twice in the array, otherwise false. seen = set() for num in nums: if num in seen: return True seen.add(num) return False if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:])) print(contains_duplicate(nums))"},{"question":"You are provided with a list of words and a `target` word. Your task is to find all words in the list that are anagrams of the `target` word. An anagram of a word is a new word formed by rearranging the letters of the original word using each letter exactly once. Input: The first line of input contains an integer `t` which is the number of test cases. Each test case consists of two lines: - The first line contains the `target` word. - The second line contains a space-separated list of words. Output: For each test case, output a list of words (in any order) from the input list that are anagrams of the `target` word. Constraints: 1 ≤ t ≤ 100 1 ≤ length of target word ≤ 100 1 ≤ number of words in list ≤ 10^3 1 ≤ length of each word in the list ≤ 100 SAMPLE INPUT 2 listen enlist google inlets banana silent triangle integral angle linger SAMPLE OUTPUT [\'enlist\', \'inlets\', \'silent\'] [\'integral\'] Explanation: In the first test case, the `target` word is \\"listen\\". The anagrams of \\"listen\\" from the given list are \\"enlist\\", \\"inlets\\", and \\"silent\\". In the second test case, the `target` word is \\"triangle\\". The only anagram of \\"triangle\\" from the given list is \\"integral\\".","solution":"def find_anagrams(target, words): Returns a list of anagrams of the `target` word from the given list of `words`. target_sorted = sorted(target) anagrams = [word for word in words if sorted(word) == target_sorted] return anagrams def process_test_cases(t, test_cases): Processes multiple test cases and returns a list of results for each test case. results = [] for case in test_cases: target, words = case result = find_anagrams(target, words) results.append(result) return results"},{"question":"A library catalog system needs a function to find books based on specific search criteria. Each book in the library is represented as a dictionary with the following keys: \'title\', \'author\', and \'year\'. You need to create a function that takes a list of books and a search criterion dictionary, and returns a list of books that match the criteria. The search criteria can include one or more of the following: - \'title\': a substring that should be present in the book\'s title (case-insensitive) - \'author\': a substring that should be present in the author\'s name (case-insensitive) - \'year\': the exact publication year The function should return the books that satisfy all the given criteria. **Function Signature:** ```python def find_books(books: List[Dict[str, Union[str, int]]], criteria: Dict[str, Union[str, int]]) -> List[Dict[str, Union[str, int]]]: pass ``` **Input:** - A list of books. Each book is a dictionary with the keys \'title\' (string), \'author\' (string), and \'year\' (integer). - A dictionary containing the search criteria. **Output:** - A list of dictionaries representing the books that match all the given search criteria. **Example:** ```python books = [ {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": 1960}, {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": 1949}, {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": 1925}, {\\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"J.D. Salinger\\", \\"year\\": 1951} ] criteria1 = {\\"author\\": \\"George Orwell\\"} criteria2 = {\\"title\\": \\"the\\", \\"year\\": 1925} print(find_books(books, criteria1)) # Output: [{\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": 1949}] print(find_books(books, criteria2)) # Output: [{\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": 1925}] ``` Write the function `find_books` to solve the problem. (Note: You can assume the input list of books and the criteria dictionary are both non-empty.)","solution":"from typing import List, Dict, Union def find_books(books: List[Dict[str, Union[str, int]]], criteria: Dict[str, Union[str, int]]) -> List[Dict[str, Union[str, int]]]: result = [] for book in books: match = True if \'title\' in criteria: if criteria[\'title\'].lower() not in book[\'title\'].lower(): match = False if \'author\' in criteria: if criteria[\'author\'].lower() not in book[\'author\'].lower(): match = False if \'year\' in criteria: if book[\'year\'] != criteria[\'year\']: match = False if match: result.append(book) return result"},{"question":"A warehouse has a series of storage racks arranged in a row, each rack having a certain number of items stored. You are tasked with developing a program that can answer queries about the total number of items in any given segment of the racks. You will receive updates to the number of items in specific racks, and you need to be able to reflect these changes in the queries. Write a program that processes these operations: 1. **Update**: Changes the number of items in a specific rack. 2. **Query**: Returns the total number of items in a specified range of racks. Constraints: * 1 ≤ n ≤ 100,000 (number of racks) * 0 ≤ q ≤ 100,000 (number of operations) * 0 ≤ items in a rack ≤ 1000 Input: The first line contains an integer n, the number of racks. The second line contains n space-separated integers, where the i-th integer represents the number of items in the i-th rack. The third line contains an integer q, the number of operations. The next q lines contain either: * \\"U x y\\": Update operation which sets the number of items in the x-th rack to y. * \\"Q x y\\": Query operation which returns the total number of items from the x-th rack to the y-th rack (inclusive). Output: For each query operation, print the result on a new line. Example: Input: ``` 5 10 5 6 7 8 3 Q 1 3 U 3 0 Q 1 3 ``` Output: ``` 21 15 ``` Explanation: After the first query, the total number of items in racks 1 to 3 is 10 + 5 + 6 = 21. After updating the number of items in the 3rd rack to 0, the second query reflects the new total, 10 + 5 + 0 = 15.","solution":"class Warehouse: def __init__(self, racks): self.racks = racks self.n = len(racks) self.prefix_sum = self._build_prefix_sum() def _build_prefix_sum(self): prefix_sum = [0] * (self.n + 1) for i in range(1, self.n + 1): prefix_sum[i] = prefix_sum[i - 1] + self.racks[i - 1] return prefix_sum def update(self, index, value): diff = value - self.racks[index - 1] self.racks[index - 1] = value for i in range(index, self.n + 1): self.prefix_sum[i] += diff def query(self, start, end): return self.prefix_sum[end] - self.prefix_sum[start - 1] def process_operations(n, racks, operations): warehouse = Warehouse(racks) results = [] for op in operations: if op[0] == \'U\': _, x, y = op warehouse.update(x, y) elif op[0] == \'Q\': _, x, y = op results.append(warehouse.query(x, y)) return results # Example usage: # n = 5 # racks = [10, 5, 6, 7, 8] # operations = [[\'Q\', 1, 3], [\'U\', 3, 0], [\'Q\', 1, 3]] # print(process_operations(n, racks, operations)) # Output: [21, 15]"},{"question":"Polycarp is baking a large batch of cookies for his friends. He has n friends, and each friend has a specific request for the number of cookies ai (1 ≤ ai ≤ 100). Polycarp wants to ensure that the sum of all cookies he gives to his friends is equal to exactly c cookies (1 ≤ c ≤ 10000). Additionally, he wants to avoid giving any friend more cookies than they requested and keep the total number of cookies distributed as close to c as possible. Given the list of requested cookies a1, a2, ..., an, determine if it\'s possible to distribute exactly c cookies among his friends while respecting their requests. If it\'s possible, output one such valid distribution. Otherwise, output -1. Input The first line contains two integers n and c (1 ≤ n ≤ 100, 1 ≤ c ≤ 10000). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100). Output Output n integers representing the number of cookies each friend receives. If there are multiple answers, print any of them. If it\'s impossible to distribute exactly c cookies, output -1. Examples Input 3 10 4 4 4 Output 4 4 2 Input 3 20 10 10 10 Output 10 5 5 Input 4 5 1 2 3 4 Output 1 2 2 0 Input 2 15 7 7 Output -1 Note In the first example, Polycarp can distribute cookies as (4, 4, 2) to exactly sum up to 10. In the second example, one possible distribution is (10, 5, 5) to sum up to 20. In the third example, one possible way is (1, 2, 2, 0), which sums up to 5. In the fourth example, it is not possible to distribute 15 cookies since each friend can get a maximum of 7 cookies, and 7 + 7 = 14 which is less than 15.","solution":"def distribute_cookies(n, c, requests): if sum(requests) < c: return -1 distribution = [0] * n total = 0 for i in range(n): max_possible = min(requests[i], c - total) distribution[i] = max_possible total += max_possible if total != c: return -1 return distribution"},{"question":"A carpenter has a set of n wooden planks. Each plank can be cut to any desired length or left as is, to be used in constructing a rectangular frame. The goal is to use exactly four of these planks to form the frame of the largest possible rectangle. Each plank can only be used once, and it cannot be rejoined once cut. Your task is to write a program that determines the area of the largest possible rectangle that can be formed using exactly four out of the n planks. Input The input contains multiple test cases. Each test case is provided in the following format: n l1 l2 l3 ... ln The first integer n (4 ≤ n ≤ 100) is the number of planks. The next n integers represent the lengths of the planks l1, l2, ..., ln (1 ≤ li ≤ 10^4). The end of the input is indicated by a single zero. Output For each test case, output the area of the largest possible rectangle that can be formed. If it is not possible to form any rectangle using exactly four planks from the given lengths, output 0. Example Input 5 10 10 20 30 20 6 5 10 15 20 25 30 4 1 1 1 1 6 8 8 15 15 15 15 0 Output 200 0 1 225 Explanation - In the first test case, the largest possible rectangle can be formed using the planks of lengths 10, 10, 20, and 20, giving an area of 200. - In the second test case, it\'s not possible to form any rectangle, so the output is 0. - In the third test case, a rectangle of 1x1 can be formed, giving an area of 1. - In the fourth test case, the largest rectangle can be formed using the planks of lengths 15, 15, 15, and 15, giving an area of 225.","solution":"def largest_rectangle_area(planks): from collections import Counter plank_counts = Counter(planks) lengths = [] for length in sorted(plank_counts.keys(), reverse=True): count = plank_counts[length] pairs = count // 2 lengths.extend([length] * pairs) if len(lengths) < 2: return 0 area = 0 if len(lengths) >= 2: lengths.sort(reverse=True) area = lengths[0] * lengths[1] return area def process_input(input_data): results = [] i = 0 while i < len(input_data): n = input_data[i] if n == 0: break planks = input_data[i + 1] i += 2 results.append(largest_rectangle_area(planks)) return results"},{"question":"You are given an array of n non-negative integers representing heights of columns where the width of each column is 1. You want to fill water between the columns. The goal is to find out how much water the columns can trap after raining. Consider that each column will trap water according to the heights of the columns on its left and right. Specifically, the amount of water trapped on top of each column i is determined by the height of the highest column to the left of i and the height of the highest column to the right of i. Write a function that calculates the total amount of water trapped between these columns. Function Signature: ```python def trap(height: List[int]) -> int: pass ``` Input The function takes a list of integers representing the height of columns: - `height` (0 ≤ len(height) ≤ 10^5, 0 ≤ height[i] ≤ 10^4). Output Return a single integer representing the total units of water trapped between the columns after raining. Examples Input ```python height = [0,1,0,2,1,0,1,3,2,1,2,1] ``` Output ```python 6 ``` Input ```python height = [4,2,0,3,2,5] ``` Output ```python 9 ``` Note In the first example, 6 units of water (the areas shaded in blue) are trapped: - 1 unit between column 1 and 3 (bounded by heights 1 and 2). - 2 units between column 3 and 7 (bounded by heights 2 and 3). - 1 unit between column 7 and 9 (bounded by heights 2 and 2). - 2 units between column 9 and 11 (bounded by heights 2 and 1). In the second example, 9 units of water are trapped: - 3 units between column 0 and 3 (bounded by heights 4 and 3). - 1 unit between column 3 and 5 (bounded by heights 3 and 5). - 2 units between column 1 and 2 (bounded by heights 2 and 3). - 3 units between column 4 and 5 (bounded by heights 2 and 5).","solution":"def trap(height): if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"There is a company that wants to optimize the process of assigning its projects to employees. An employee can only take one project at a time, and each project takes a specific amount of time to be completed. The company wants to ensure that the projects are assigned in a way that minimizes the total time taken to complete all projects. Given multiple employees and projects, you need to determine the optimal project assignment. Each project has a specific duration, and each employee has a set of skills represented by proficiency levels. Each project requires a specific skill to be completed, and the time taken by an employee to complete a project depends on their proficiency in the required skill. You are given n employees and m projects. Each project i (1 ≤ i ≤ m) requires a specific skill si (1 ≤ si ≤ k) to be completed, where k is the total number of skills. Each employee j (1 ≤ j ≤ n) has proficiency levels p1, p2, ..., pk for the k skills. The time taken by an employee j to complete a project i, which requires skill si, is the inverse of their proficiency level for that skill. If their proficiency level is 0, they cannot complete that project. Write a program to determine the assignment of projects to employees that minimizes the total time taken to complete all projects. If it is not possible to assign all projects to be completed, return -1. # Input - The first line of input contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the number of employees and the number of projects, respectively. - The second line contains an integer k (1 ≤ k ≤ 100) — the number of different skills. - The next n lines contain k integers each, representing the proficiency levels of each employee in each skill. - The final line contains m integers, representing the skills required for each project. # Output - Print a single integer representing the minimum total time taken to complete all projects. If it is not possible to complete all projects, print -1. # Example Input ``` 3 3 3 1 2 3 2 3 1 3 1 2 1 2 3 ``` Output ``` 1 ``` # Note In the example input, there are 3 employees and 3 projects, and each project requires a different skill: - Project 1 requires skill 1. - Project 2 requires skill 2. - Project 3 requires skill 3. Employee 1 has proficiency levels [1, 2, 3] for skills [1, 2, 3] respectively: - Time for Project 1: 1 (1/1) - Time for Project 2: 0.5 (1/2) - Time for Project 3: 0.333 (1/3) Employee 2 has proficiency levels [2, 3, 1] for skills [1, 2, 3] respectively: - Time for Project 1: 0.5 (1/2) - Time for Project 2: 0.333 (1/3) - Time for Project 3: 1 (1/1) Employee 3 has proficiency levels [3, 1, 2] for skills [1, 2, 3] respectively: - Time for Project 1: 0.333 (1/3) - Time for Project 2: 1 (1/1) - Time for Project 3: 0.5 (1/2) An optimal assignment would be: - Project 1 to Employee 1 (time 1) - Project 2 to Employee 2 (time 0.333) - Project 3 to Employee 3 (time 0.5) Thus, the total minimum time is 1.833, but since we\'re returning an integer, we could make it precisely `floor(1.833) = 1`.","solution":"from itertools import permutations def assign_projects_to_employees(n, m, k, proficiencies, project_skills): # Function to calculate time taken by an employee to complete a project def time_taken(employee, project): skill_required = project_skills[project] proficiency = proficiencies[employee][skill_required - 1] if proficiency == 0: return float(\'inf\') # cannot complete return 1 / proficiency # Generate all permutations of employee assignments to projects all_permutations = permutations(range(n), m) min_time = float(\'inf\') for perm in all_permutations: time = 0 for project in range(m): time += time_taken(perm[project], project) if time >= min_time: break # No need to continue if already larger than min_time min_time = min(min_time, time) # If minimal time is still infinity, it means not all projects can be completed if min_time == float(\'inf\'): return -1 return int(min_time) # Example Usage if __name__ == \\"__main__\\": n, m = 3, 3 k = 3 proficiencies = [ [1, 2, 3], [2, 3, 1], [3, 1, 2] ] project_skills = [1, 2, 3] print(assign_projects_to_employees(n, m, k, proficiencies, project_skills)) # Should output 1"},{"question":"A chemical company is analyzing its data for chemical compounds and encountered a problem with the notation system. They want to replace all instances of the subscript notation for numbers in chemical formulas within the text to the standard notation. Specifically, they want to replace \\"_x_\\" with \\"_{x}\\", where x represents any digit from 0 to 9. Your task is to write a program that converts the subscript notation to the standard notation. Input The input consists of several datasets. There will be the number of datasets ( n ) in the first line. There will be ( n ) lines. Each line consists of a chemical formula represented as a string containing subscript notation. Output For each dataset, print the converted chemical formula in a line. Example Input 3 H_2O CH_4 C_6H_{12}O_6 Output H{2}O CH{4} C{6}H{12}O{6}","solution":"def convert_chemical_notation(n, chemical_formulas): Convert subscript notation to the standard notation in chemical formulas. :param n: int, number of chemical formulas. :param chemical_formulas: list of str, each str is a chemical formula. :return: list of str, converted chemical formulas. import re result = [] subscript_pattern = re.compile(r\'_(({)?[d]+(})?)\') for formula in chemical_formulas: formatted_formula = subscript_pattern.sub(lambda m: f\'{{{m.group(1).strip(\\"{}\\")}}}\', formula) result.append(formatted_formula) return result"},{"question":"You are given a string that contains lowercase letters and digits. You need to find the length of the longest substring that contains distinct characters only. A substring is defined as a contiguous sequence of characters within a string. Note that the substring must contain only distinct characters, which means that if a character appears more than once in the substring, it breaks the condition. Write a program to determine the length of this longest substring consisting of distinct characters. Input The input is given from the standard input in the following format: - A single string `s` with length (1 leq text{length of } s leq 100000). Output Output the length of the longest substring with all distinct characters. Examples # Input ``` abcabcbb ``` # Output ``` 3 ``` # Explanation The longest substring with all distinct characters is \\"abc\\", with length 3. # Input ``` bbbbb ``` # Output ``` 1 ``` # Explanation The longest substring with all distinct characters is \\"b\\", with length 1. # Input ``` pwwkew ``` # Output ``` 3 ``` # Explanation The longest substrings with all distinct characters are \\"wke\\" and \\"kew\\", both with length 3. However, \\"pwke\\" is not a valid substring. # Input ``` abcdef ``` # Output ``` 6 ``` # Explanation The whole string \\"abcdef\\" is the longest substring with all distinct characters, with length 6. Implement your solution efficiently to handle the given constraints.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a city, there are N houses arranged in a row and each house is labeled with a unique integer from 1 to N (1-indexed). Each house has a certain number of candies. A child wants to collect as many candies as possible, but with a specific rule: the child can only enter a house if it is not a direct neighbor of the last house they visited. Given an integer array `candies` where `candies[i]` represents the number of candies in the `i-th` house, determine the maximum number of candies the child can collect if they start from any house. Input format The first line contains an integer N, the number of houses. The second line contains N integers, the candies in each house. Constraints * 1 leq N leq 100 * 1 leq candies[i] leq 100 Output format Output a single integer, the maximum number of candies the child can collect. Example Input 5 3 2 3 6 1 Output 9 Explanation The child can start at house 1 (3 candies), move to house 3 (3 candies), and then house 5 (1 candy), collecting a total of 3 + 3 + 1 = 7 candies. Alternatively, they can start at house 2 (2 candies), move to house 4 (6 candies), collecting a total of 2 + 6 = 8 candies. Input 6 3 2 5 10 7 12 Output 20 Explanation The child can start at house 1 (3 candies), skip house 2, go to house 3 (5 candies), skip house 4, and go to house 6 (12 candies), collecting a total of 3 + 5 + 12 = 20 candies. Alternatively, they can start at house 2 (2 candies), skip house 3, go to house 4 (10 candies), and then to house 6 (12 candies), collecting a total of 2 + 10 + 12 = 24 candies.","solution":"def max_candies(N, candies): Returns the maximum number of candies the child can collect by visiting non-adjacent houses. if N == 0: return 0 elif N == 1: return candies[0] dp = [0] * N dp[0] = candies[0] dp[1] = max(candies[0], candies[1]) for i in range(2, N): dp[i] = max(dp[i - 1], dp[i - 2] + candies[i]) return dp[-1]"},{"question":"Given an integer N. Integers A, B, and C are chosen randomly in the range [1..N]. Calculate the probability that the maximum of A, B, and C equals to N. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single integer N on a separate line. Output For each test case, output a single line containing probability as an irreducible fraction. Example Input: 3 1 2 3 Output: 1/1 7/8 19/27 Constraints 1 <= T <= 10^3 1 <= N <= 10^9","solution":"from fractions import Fraction def probability_for_max_equals_N(N): Calculate the probability that max(A, B, C) equals N when A, B, and C are chosen randomly in the range [1, N]. total_outcomes = N ** 3 favorable_outcomes = (N - 1) ** 3 # Choosing all 3 numbers in [1, N-1] favorable_outcomes = total_outcomes - favorable_outcomes probability = Fraction(favorable_outcomes, total_outcomes) return probability def solve(t, test_cases): results = [] for N in test_cases: results.append(probability_for_max_equals_N(N)) return results"},{"question":"In a kingdom far away, there is a grand festival held every year. As part of the celebration, a unique shield arrangement contest is organized. The kingdom is divided into regions, each of which has multiple shields. The contest has the following rules: - Each region must form a shield formation with exactly p shields. - A shield formation must consist of shields with p unique integers representing their distinct properties. - Your task is to assign the distinct properties (integers from 1 to p) to the shields in each region such that no two shields of the same region have the same property. - Additionally, no two adjacent regions should share the same property for any corresponding shields in their formations. (i.e., if Region X and Region Y are adjacent, the property assigned to the ith shield in Region X should not be the same as the property assigned to the ith shield in Region Y for any i). You are given the regions\' adjacency list and the number of shields each region has to arrange. Your task is to assign the properties to the shields in each region while satisfying the given conditions. Input The first line contains two space-separated integers r (1 ≤ r ≤ 100) and p (2 ≤ p ≤ 100) — the number of regions and the number of properties, respectively. The next line contains r integers where the ith integer ri (1 ≤ ri ≤ r) represents the number of shields in the ith region. Then follows an adjacency list of the regions. Each of the next r lines contains the indices of the regions that are adjacent to the ith region, separated by spaces. Each region is connected to at least one other region. Output Print r lines. Each line should contain p space-separated integers where the j-th integer represents the property assigned to the j-th shield of the respective region. If there are multiple valid solutions, print any of them. It is guaranteed that at least one solution exists. Example Input 3 3 2 3 3 2 3 1 3 1 2 Output 1 2 3 2 3 1 1 3 1 2 2 Input 5 4 4 4 4 4 4 2 3 1 2 3 4 * Output 1 2 3 4 2 3 4 1 3 4 1 2 4 1 2 3 ```","solution":"def assign_shield_properties(r, p, shields_per_region, adj_list): def is_valid_assignment(region, shield_properties): for adj_region in adj_list[region]: if shield_properties[region] == shield_properties[adj_region - 1]: return False return True def dfs(region, shield_properties): if region == r: return True for i in range(p): shield_properties[region] = [(i + j) % p + 1 for j in range(shields_per_region[region])] if is_valid_assignment(region, shield_properties): if dfs(region + 1, shield_properties): return True shield_properties[region] = [0] * shields_per_region[region] return False shield_properties = [[0] * shields_per_region[i] for i in range(r)] dfs(0, shield_properties) return shield_properties # Driver function to read input and print output def main(): import sys input = sys.stdin.read data = input().split() idx = 0 r = int(data[idx]) p = int(data[idx + 1]) idx += 2 shields_per_region = [int(data[idx + i]) for i in range(r)] idx += r adj_list = [] for i in range(r): adj_list.append([int(x) for x in data[idx].split() if x]) idx += 1 result = assign_shield_properties(r, p, shields_per_region, adj_list) for region in result: print(\\" \\".join(map(str, region)))"},{"question":"Implement a function that takes a string consisting of lowercase letters and returns the length of the longest substring without repeating characters. The function should have the following signature: ```python def longest_unique_substring_length(s: str) -> int: # Your code here ``` # Input - A single string `s` (1 ≤ |s| ≤ 1000), where |s| denotes the length of the string. # Output - An integer, the length of the longest substring of `s` that contains no repeating characters. # Examples Input ``` \\"abcabcbb\\" ``` Output ``` 3 ``` Input ``` \\"bbbbb\\" ``` Output ``` 1 ``` Input ``` \\"pwwkew\\" ``` Output ``` 3 ``` # Explanation In the first example, the answer is \\"abc\\", which has a length of 3. In the second example, the answer is \\"b\\", with a length of 1. In the third example, the answer is \\"wke\\", with a length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_unique_substring_length(s: str) -> int: Returns the length of the longest substring without repeating characters. last_index = {} # Stores the index of the last occurrence of each character. max_length = 0 start = 0 # Start index of the current substring. for end, char in enumerate(s): if char in last_index and last_index[char] >= start: # If the character is already in the current substring, move the start index. start = last_index[char] + 1 last_index[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a string `s` consisting of lowercase English letters. You are allowed to rearrange the characters of the string, but you can only swap two adjacent characters at a time. Your task is to find the minimum number of adjacent swaps required to transform the string `s` into its lexicographically smallest form. Input The input consists of a single string `s` (1 ≤ |s| ≤ 100 000). Output Print a single integer, the minimum number of adjacent swaps required to reorder the string into its lexicographically smallest form. Examples Input `dcab` Output 5 Input `aaab` Output 0 Note For the first example, the process to achieve the smallest lexicographical order \\"abcd\\": 1. Swap \'d\' and \'c\': `cdab` 2. Swap \'d\' and \'a\': `cadb` 3. Swap \'c\' and \'a\': `acdb` 4. Swap \'d\' and \'b\': `acbd` 5. Swap \'c\' and \'b\': `abcd` Thus, 5 swaps are required in total. For the second example, the string is already in lexicographically smallest order, so no swaps are needed.","solution":"def min_adjacent_swaps_lexico_smallest(s): def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left j = mid + 1 k = left inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort(arr, temp_arr, left, mid) inv_count += merge_sort(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count n = len(s) sorted_s = sorted(s) index_map = {ch: [] for ch in sorted_s} for i, ch in enumerate(s): index_map[ch].append(i) target_positions = [] for ch in sorted_s: target_positions.append(index_map[ch].pop(0)) temp_arr = [0]*n min_swaps = merge_sort(target_positions, temp_arr, 0, n-1) return min_swaps"},{"question":"In a far-away land called Technovia, there is a peculiar road system consisting of n towns connected by m bidirectional roads. Each road has a certain length, and there can be more than one road directly connecting two towns. The king of Technovia wants to build a new road to increase the connectivity of the towns while minimizing the increase in the total length of roads required for connecting all towns together. Specifically, the king wants to build a single new road between two distinct towns such that: 1. The total length of roads in the connected component that initially includes at least one of these two towns is minimized after adding the new road. 2. The new road should not already exist in the current road system. Your task is to assist the king by determining the best possible pair of towns to connect with the new road to achieve his objective. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^6) — the number of towns and the number of roads. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 10^4) — representing a road between towns u and v with length l. It is guaranteed that u ≠ v. Output Output three integers u, v, and l indicating the best possible pair of towns (u, v) to connect with a new road of any length l that minimizes the connectivity length. If there are multiple answers, you may print any of them. If no such pair exists that can reduce the connectivity length, output \\"-1\\". Examples Input 4 3 1 2 7 2 3 2 3 4 3 Output 1 3 1 Input 5 2 1 2 8 3 4 5 Output 2 3 1 Input 4 0 Output 1 2 1","solution":"def find_new_road(n, m, roads): from collections import defaultdict import heapq def kruskal(n, edges): parent = list(range(n + 1)) def find(v): if parent[v] != v: parent[v] = find(parent[v]) return parent[v] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: parent[root_v] = root_u return True return False edges.sort(key=lambda x: x[2]) # Sort edges based on their weights mst_weight = 0 for u, v, weight in edges: if union(u, v): mst_weight += weight return mst_weight adjacency_matrix = defaultdict(dict) for u, v, l in roads: adjacency_matrix[u][v] = l adjacency_matrix[v][u] = l if not roads: return 1, 2, 1 # Finding MST using Kruskal\'s algorithm initial_mst_weight = kruskal(n, roads) min_edge_length = float(\'inf\') best_u, best_v = -1, -1 for i in range(1, n + 1): for j in range(i + 1, n + 1): if j not in adjacency_matrix[i]: if 1 < min_edge_length: min_edge_length = 1 best_u, best_v = i, j if best_u == -1: return -1 return best_u, best_v, min_edge_length # Example uses: # print(find_new_road(4, 3, [(1, 2, 7), (2, 3, 2), (3, 4, 3)])) # Expected: (1, 3, 1) or other valid road # print(find_new_road(5, 2, [(1, 2, 8), (3, 4, 5)])) # Expected: (2, 3, 1) or other valid road # print(find_new_road(4, 0, [])) # Expected: (1, 2, 1)"},{"question":"Maria and Pascal Triangle Maria is learning about Pascal\'s Triangle in her mathematics class. She is fascinated with the symmetrical properties of it. Now, she wants to write a program to generate the Pascal Triangle given the number of rows. Help Maria by writing the program for her. Pascal\'s Triangle is defined as follows: - The first row is always [1]. - Each subsequent row is constructed by adding the number above and to the left with the number above and to the right, treating empty elements as 0. For example, the first 5 rows of Pascal\'s Triangle are: ``` [1] [1, 1] [1, 2, 1] [1, 3, 3, 1] [1, 4, 6, 4, 1] ``` Input: - The input contains a single integer n which denotes the number of rows of Pascal\'s Triangle to generate (1 ≤ n ≤ 30). Output: - Print n lines of Pascal\'s Triangle, with each row\'s elements separated by space. Sample Input: 5 Sample Output: 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1","solution":"def generate_pascals_triangle(n): Generates Pascal\'s Triangle with n rows. if n < 1: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle def print_pascals_triangle(triangle): Prints Pascal\'s Triangle. for row in triangle: print(\\" \\".join(map(str, row)))"},{"question":"You are given a list of integers. Your task is to find the length of the longest contiguous subarray such that all elements in the subarray are distinct. # Input - The first line contains an integer n (1 leq n leq 100,000) — the number of elements in the list. - The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9), the elements of the list. # Output - Print a single integer — the length of the longest contiguous subarray where all elements are distinct. # Example Input ``` 7 1 2 1 3 4 2 3 ``` Output ``` 4 ``` # Explanation In the example given, the longest contiguous subarray with all distinct elements is `[1, 3, 4, 2]`, which has a length of 4.","solution":"def longest_distinct_subarray(arr): Returns the length of the longest contiguous subarray with all distinct elements. last_index = {} max_length = 0 start = 0 for i, value in enumerate(arr): if value in last_index: start = max(start, last_index[value] + 1) last_index[value] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Alice and Bob are playing a game with a sequence of integers. The game requires them to rearrange the sequence in a special manner. The sequence consists of N integers where N is an odd number. Alice wants to rearrange the sequence such that the median of the sequence is minimized. The median is defined as the middle element in the sorted array. Your task is to help Alice find this rearranged sequence. Input The first line contains a single integer N (1 ≤ N ≤ 10^5) – the number of elements in the sequence. The second line contains N integers a_1, a_2, ..., a_N (−10^9 ≤ a_i ≤ 10^9). Output Print a single line containing N integers in the rearranged sequence that minimizes the median. Example Input 5 9 2 1 4 5 Output 1 2 4 5 9 Note In the example, the original sequence is [9, 2, 1, 4, 5]. When it is rearranged in ascending order, the sequence becomes [1, 2, 4, 5, 9]. The median value (the third element in the sorted sequence) is 4, which is minimized.","solution":"def rearrange_to_minimize_median(n, arr): Rearranges the array to minimize the median. Parameters: n (int): The number of elements in the sequence, which is an odd number. arr (list of int): The sequence of integers. Returns: list of int: The rearranged sequence. # Sorting the input array to minimize the median when it\'s an odd-sized array arr.sort() return arr"},{"question":"You are given an integer array `arr` of size `n` and an integer `threshold`. You can perform any number of operations (including zero) to transform the array. In each operation, you may pick two distinct elements of the array and replace one of them with any integer number you desire (positive, negative, or zero). Determine the minimum possible sum of the array that can be achieved such that the sum is not smaller than the given `threshold`. Your program should answer `q` independent test cases. Input The first line contains one integer `q` (1 ≤ q ≤ 100) — the number of test cases. Each test case starts with a line containing two integers `n` (1 ≤ n ≤ 100) — the size of the array, and `threshold` (1 ≤ threshold ≤ 10^9). The next line contains `n` integers representing the elements of the array `arr` (1 ≤ arr[i] ≤ 10^4). Output For each test case, print the minimum possible sum of the array that is not smaller than the given `threshold`. Example Input 2 3 10 3 1 2 4 20 2 2 2 2 Output 10 20 Note In the first test case, one possible way to achieve the threshold is to replace the first element with 4, resulting in the array [4, 3, 2] with a sum of 9. However, since 9 is less than the threshold 10, we may need to replace another element to meet the requirement, eventually achieving the minimum possible sum exactly at 10. In the second test case, replacing any two elements with greater values to reach the threshold exactly will result in the sum 20. No other smaller sum can meet the defined threshold exactly.","solution":"def minimum_possible_sum(q, test_cases): results = [] for test in test_cases: n, threshold, arr = test arr.sort(reverse=True) current_sum = sum(arr) if current_sum >= threshold: results.append(current_sum) continue i = 0 while current_sum < threshold: diff = threshold - current_sum # Find the difference required to meet the threshold current_sum += diff break results.append(current_sum) return results # Example usage: # q = 2 # test_cases = [ # (3, 10, [3, 1, 2]), # (4, 20, [2, 2, 2, 2]) # ] # print(minimum_possible_sum(q, test_cases)) # Output: [10, 20]"},{"question":"You are doing research on the migration patterns of certain bird species. You have a map of the regions in which the birds can travel. The map can be represented as an undirected graph with regions as nodes and migratory paths as edges. Your goal is to determine the shortest unique tour that starts and ends in the same region and visits every other region exactly once. This unique tour is known as a Hamiltonian circuit. However, not all graphs will have a Hamiltonian circuit. If it is not possible to form such a circuit, you should output -1. Input The first line of the input contains an integer n (2 ≤ n ≤ 20) representing the number of regions. The second line contains an integer m (1 ≤ m ≤ 190) representing the number of migratory paths. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n; ui ≠ vi) indicating that there is a migratory path between region ui and region vi. Output Output a single integer: the length of the shortest Hamiltonian circuit if it exists, or -1 if such a circuit does not exist. Examples Input 4 5 1 2 1 3 2 3 3 4 4 1 Output 4 Input 4 3 1 2 2 3 3 4 Output -1","solution":"from itertools import permutations def shortest_hamiltonian_circuit(n, m, edges): INF = float(\'inf\') # Create adjacency matrix dist = [[INF] * n for _ in range(n)] # Fill adjacency matrix for u, v in edges: dist[u-1][v-1] = 1 dist[v-1][u-1] = 1 # Use DP to find the shortest Hamiltonian circuit dp = [[INF] * n for _ in range(1 << n)] dp[1][0] = 0 for mask in range(1 << n): for u in range(n): if not (mask & (1 << u)): continue for v in range(n): if mask & (1 << v) or dist[u][v] == INF: continue dp[mask | (1 << v)][v] = min(dp[mask | (1 << v)][v], dp[mask][u] + dist[u][v]) circuit_length = min(dp[(1 << n) - 1][v] + dist[v][0] for v in range(1, n) if dist[v][0] != INF) return circuit_length if circuit_length != INF else -1"},{"question":"John is a treasure hunter and has found a grid-shaped map of size M x M, where each cell of the map contains a number representing the amount of treasure in that cell. John can start at any cell and can only travel right or down to collect the treasure. He aims to collect the maximum possible amount of treasure by traveling from the top-left corner (1, 1) to the bottom-right corner (M, M). John needs your help to determine the maximum amount of treasure that can be collected. Constraints: * 1 ≤ M ≤ 200 * Each cell value is a non-negative integer Input Input is given from Standard Input in the following format: M map_11 map_12 ... map_1M map_21 map_22 ... map_2M : map_M1 map_M2 ... map_MM Output Print the maximum amount of treasure that can be collected. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 29 Input 4 1 0 3 4 2 5 1 3 9 2 4 2 3 1 2 5 Output 25","solution":"def max_treasure(M, treasure_map): Given a grid-shaped map of size M x M where each cell contains an amount of treasure, this function calculates the maximum amount of treasure that can be collected moving only right or down, starting from the top-left corner and ending at the bottom-right corner. :param M: size of the grid :param treasure_map: list of lists representing the grid of treasure :return: the maximum amount of treasure that can be collected # Initializing a dp array with the same dimensions as the treasure map dp = [[0] * M for _ in range(M)] # Initializing the starting point dp[0][0] = treasure_map[0][0] # Fill out the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + treasure_map[0][j] # Fill out the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + treasure_map[i][0] # Fill out the rest of the dp array for i in range(1, M): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + treasure_map[i][j] # The bottom-right cell contains the maximum treasure collected return dp[M-1][dp[M-1].index(max(dp[M-1]))] # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = list(map(str.strip, input().split())) M = int(data[0]) treasure_map = [] index = 1 for i in range(M): row = list(map(int, data[index:index + M])) treasure_map.append(row) index += M print(max_treasure(M, treasure_map))"},{"question":"Consider a rectangular grid of size N x M that consists of cells with either a wall \'#\' or an empty cell \'.\'. You are given a start position (Sx, Sy) and a finish position (Fx, Fy) in the grid. You need to find the minimum number of steps required to move from the start position to the finish position. You can only move up, down, left, or right into an empty cell \'.\', and you cannot pass through walls \'#\'. Input First line contains an integer T denoting the number of test cases. For each test case, the first line contains two integers N and M denoting the dimensions of the grid. The next N lines contain a string of length M each, representing the grid. The next line contains two integers Sx and Sy, denoting the starting position. The next line contains two integers Fx and Fy, denoting the finishing position. Output For each test case, print the minimum number of steps required to reach the finish position. If it is not possible to reach the finish position, print -1. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 0 ≤ Sx, Sy, Fx, Fy < 100 SAMPLE INPUT 2 5 5 ..... .#.#. ..... .#.#. ..... 0 0 4 4 3 3 # #...# #.# #.... # 1 4 3 3 SAMPLE OUTPUT 8 -1 Explanation In the first test case, the minimum path to reach from (0,0) to (4,4) involves 8 steps: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (4,4). In the second test case, it\'s not possible to reach from (1,4) to (3,3) as there is no path that does not pass through walls.","solution":"from collections import deque def min_steps(N, M, grid, Sx, Sy, Fx, Fy): if grid[Sx][Sy] == \'#\' or grid[Fx][Fy] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(Sx, Sy, 0)]) visited = set((Sx, Sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (Fx, Fy): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 def solve(grid_data): output = [] for data in grid_data: N = data[\'N\'] M = data[\'M\'] grid = data[\'grid\'] Sx, Sy = data[\'start\'] Fx, Fy = data[\'finish\'] output.append(min_steps(N, M, grid, Sx, Sy, Fx, Fy)) return output"},{"question":"In the world of e-commerce, product search and recommendation play a vital role. Given a list of products available in a store and the search terms entered by users, develop a system to identify the most relevant products based on the search criteria. You are given a list of products, where each product is represented as a string, and a list of search terms. Your task is to write a function that returns the list of products that contain all the search terms (case-insensitive). The order of the products in the result should be the same as their order in the input list. If no product matches all the search terms, return an empty list. Input - First line contains an integer n (1 ≤ n ≤ 100), the number of products. - The next n lines contain the product names, one per line. - Next line contains an integer m (1 ≤ m ≤ 10), the number of search terms. - The next m lines contain the search terms, one per line. Output Output the list of products that contain all the search terms. If no such product exists, output an empty list. Example Input 5 Apple iPhone Samsung Galaxy Google Pixel OnePlus Nord Sony Xperia 2 Samsung Galaxy Output Samsung Galaxy","solution":"def filter_products(products, search_terms): Returns the list of products that contain all the search terms (case-insensitive). result = [] for product in products: product_lower = product.lower() if all(term.lower() in product_lower for term in search_terms): result.append(product) return result"},{"question":"Given a list of integers, identify all the integers that are \\"perfect squares.\\" A perfect square is an integer that is the square of an integer. Print \'YES\' for the indices where the numbers are perfect squares and \'NO\' where they are not. SAMPLE INPUT 4 16 20 25 30 SAMPLE OUTPUT YES NO YES NO","solution":"import math def identify_perfect_squares(arr): result = [] for num in arr: if num >= 0 and (math.isqrt(num)) ** 2 == num: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"A famous algorithm puzzle is to find the shortest path in a maze. You are given a rectangular maze, with some cells passable and others impassable. You can start at any passable cell in the first row and your goal is to get to any passable cell in the last row of the grid with the minimum number of steps. You can move up, down, left, or right, but you cannot move diagonally. You cannot pass through impassable cells. The maze is described by a grid of size N x M (with 1 ≤ N, M ≤ 1000), where `0` represents a passable cell and `1` represents an impassable cell. The maze can have multiple solutions but you are to find the shortest path. If there is no possible path, return -1. Write a function `shortest_path(grid)` that takes a 2D list of integers representing the maze and returns the length of the shortest path from the first row to the last row. If no such path exists, return -1. **Input** An integer N and an integer M, representing the dimensions of the maze, followed by a 2D list with N rows and M columns consisting of 0s and 1s. The 2D list is provided as a sequence of rows, where each row is a sequence of N space-separated integers (either 0 or 1). **Output** An integer representing the length of the shortest path from the first row to the last row. If no such path exists, return -1. **Example** Input: 5 5 0 1 0 0 0 0 1 1 1 0 0 0 0 1 0 1 1 0 1 1 0 0 0 0 1 Output: 7 Explanation: One of the shortest paths is as follows with steps denoted: 0 1 S 0 0 0 1 E 1 0 0 0 0 E 0 1 1 0 E 1 0 0 0 0 E Where \\"S\\" is the start and \\"E\\" is the endpoint.","solution":"from collections import deque def shortest_path(grid): Finds the shortest path from any passable cell in the first row to any passable cell in the last row in a maze. If no such path exists, returns -1. N = len(grid) M = len(grid[0]) # directions for movement (right, left, down, up) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Preparing the queue for BFS, starting from all passable cells in the first row queue = deque() for j in range(M): if grid[0][j] == 0: queue.append((0, j, 1)) # (x, y, distance) grid[0][j] = 2 # mark as visited by changing it to a value other than 0 or 1 while queue: x, y, dist = queue.popleft() # If we have reached the last row if x == N - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) grid[nx][ny] = 2 # mark as visited # If we finish the BFS and haven\'t reached the last row, return -1 return -1"},{"question":"A popular quiz game has a special round named \\"Number Guessing\\". In this round, the contestant is required to guess a secret number within a specific range. The game provides feedback after each guess, indicating whether the guess was too low, too high, or correct. The contestant has a limited number of attempts to guess the correct number. Your task is to implement an efficient guessing strategy given the number of attempts allowed and the range of the secret number. The guessing strategy should aim to guess the correct number within the provided constraints. # Input The input consists of multiple test cases. Each test case is given in the following format: ``` L U A ``` - `L` is the lower bound of the range (inclusive). - `U` is the upper bound of the range (inclusive). - `A` is the number of attempts allowed. For example: ``` 1 100 7 30 50 5 10 500 10 ``` # Output For each test case, output a series of guesses followed by feedback based on the following rules: - \\"TOO LOW\\" if the guess is less than the secret number. - \\"TOO HIGH\\" if the guess is greater than the secret number. - \\"CORRECT\\" if the guess is exactly the secret number. The output should follow the format: ``` Guess Feedback ``` The guesses should be based on a strategy designed to find the secret number within the allowed attempts. # Example Input ``` 1 100 7 30 50 5 10 500 10 ``` Output Assuming the secret number is 68 for the first test case, 40 for the second, and 200 for the third: ``` 51 TOO LOW 76 TOO HIGH 63 TOO LOW 69 TOO HIGH 67 TOO LOW 68 CORRECT 40 CORRECT 255 TOO HIGH 132 TOO LOW 193 TOO LOW 224 TOO HIGH 208 TOO HIGH 200 CORRECT ``` # Explanation For each test case, your program should determine a strategy to make guesses that efficiently narrow down the possible range until the secret number is found or the attempts run out.","solution":"def guess_number(L, U, A, secret): Function to guess the secret number within the given range and attempts. Parameters: L (int): Lower bound of range U (int): Upper bound of range A (int): Number of attempts secret (int): Secret number to guess Returns: List of tuples [(guess, feedback), ...] results = [] attempts = 0 while attempts < A: guess = (L + U) // 2 if guess < secret: feedback = \\"TOO LOW\\" L = guess + 1 elif guess > secret: feedback = \\"TOO HIGH\\" U = guess - 1 else: feedback = \\"CORRECT\\" results.append((guess, feedback)) break results.append((guess, feedback)) attempts += 1 return results # Example usage (this will be used in unit tests) print(guess_number(1, 100, 7, 68)) print(guess_number(30, 50, 5, 40)) print(guess_number(10, 500, 10, 200))"},{"question":"John loves playing with numbers and finds number sequences fascinating. Recently, John came across an interesting problem involving arithmetic progressions. An arithmetic progression (AP) is a sequence of numbers where the difference of any two successive members is a constant. John now has a sequence of numbers and wants to find out the length of the longest contiguous subarray that forms an arithmetic progression. Input The first line contains an integer n (1 ≤ n ≤ 10^5) representing the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) representing the sequence. Output Print the length of the longest contiguous subarray that forms an arithmetic progression. Examples Input 6 10 20 30 40 50 52 Output 5 Input 8 3 6 9 12 15 8 4 0 Output 5 Input 5 2 4 6 8 1 Output 4 Note In the first example, the entire sequence except for the last element forms an arithmetic progression with a common difference of 10. In the second example, the sequence [3, 6, 9, 12, 15] forms an arithmetic progression with a common difference of 3. In the third example, the sequence [2, 4, 6, 8] forms an arithmetic progression with a common difference of 2.","solution":"def longest_ap_length(n, nums): Returns the length of the longest contiguous subarray that forms an arithmetic progression. if n == 1: return 1 longest = 2 current_length = 2 diff = nums[1] - nums[0] for i in range(2, n): if nums[i] - nums[i - 1] == diff: current_length += 1 else: diff = nums[i] - nums[i - 1] current_length = 2 longest = max(longest, current_length) return longest"},{"question":"You are given a string of length N consisting of uppercase and lowercase English letters. Your task is to sort this string such that: 1. All uppercase letters are sorted in non-decreasing order and appear before all lowercase letters. 2. All lowercase letters are sorted in non-decreasing order and appear after the uppercase letters. Input The first line contains a single integer N, the length of the string. The second line contains a string of length N consisting of uppercase and lowercase English letters. Output Print the sorted string according to the described conditions. Constraints 1 ≤ N ≤ 10^5 Example Input: 6 dAcBba Output: ABabcd Explanation The uppercase letters \\"dAcBba\\" are \'A\', \'B\', \'c\', \'B\' in non-decreasing order to obtain \\"AB\\". The lowercase letters \\"dAcBba\\" are \'c\', \'a\', \'b\', \'a\' in non-decreasing order to obtain \\"abcd\\". The final result is \\"ABabcd\\".","solution":"def sort_string(n, s): Sorts a string such that all uppercase letters come first in non-decreasing order, followed by all lowercase letters in non-decreasing order. Parameters: n (int): Length of the string s (str): Input string consisting of uppercase and lowercase English letters Returns: str: Sorted string according to the described conditions upper_case = sorted([char for char in s if char.isupper()]) lower_case = sorted([char for char in s if char.islower()]) return \'\'.join(upper_case + lower_case)"},{"question":"In a certain network of cities, there are n cities and m direct highways connecting these cities. Each highway has a certain toll fee associated with it. Lisa is planning to travel from her city, which is city c1, to her friend\'s city, which is city c2. However, Lisa has a limited budget of b dollars for toll fees. She wants to find the cheapest path from city c1 to city c2 that costs less than or equal to her budget. If there is no such path, she will stay at home. Determine the minimum toll fee required for Lisa to travel from city c1 to city c2 without exceeding her budget. Input The first line contains three integers n, m, and b (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^5, 0 ≤ b ≤ 10^4) — the number of cities, highways, and Lisa’s budget respectively. Each of the next m lines contains three integers ui, vi, ti (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ ti ≤ 1000), where ui and vi are the cities connected by the i-th highway, and ti is the toll fee for that highway. Note that highways are bidirectional. The last line contains two integers c1 and c2 (1 ≤ c1, c2 ≤ n) — the cities where Lisa is starting at and her friend’s city respectively. Output Print the minimum toll fee required for Lisa to travel from city c1 to city c2 without exceeding her budget, or print \\"IMPOSSIBLE\\" (without quotes) if no such path exists. Examples Input 6 7 10 1 2 2 2 3 3 3 4 4 4 5 3 5 6 2 1 3 5 3 6 4 1 6 Output 9 Input 4 3 5 1 2 3 2 3 4 3 4 5 1 4 Output IMPOSSIBLE","solution":"import heapq def find_min_toll_fee(n, m, b, highways, c1, c2): # Graph represented as adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, t in highways: graph[u].append((v, t)) graph[v].append((u, t)) # Min-heap to perform Dijkstra\'s algorithm pq = [(0, c1)] # (cost, city) min_cost = {i: float(\'inf\') for i in range(1, n+1)} min_cost[c1] = 0 while pq: current_cost, u = heapq.heappop(pq) if current_cost > b: continue # Ignore if the cost exceeds budget if u == c2: return current_cost for v, toll in graph[u]: new_cost = current_cost + toll if new_cost < min_cost[v]: min_cost[v] = new_cost heapq.heappush(pq, (new_cost, v)) return \\"IMPOSSIBLE\\" # Example usage: # n, m, b = 6, 7, 10 # highways = [(1, 2, 2), (2, 3, 3), (3, 4, 4), (4, 5, 3), (5, 6, 2), (1, 3, 5), (3, 6, 4)] # c1, c2 = 1, 6 # print(find_min_toll_fee(n, m, b, highways, c1, c2)) # Output should be 9"},{"question":"You are given an integer N. Determine if it is a prime number. If it is prime, output \\"prime\\", otherwise output \\"not prime\\". Constraints * N is an integer. * 1 ≤ N ≤ 100 Input Input is given from Standard Input in the following format: N Output If N is a prime number, print the string \\"prime\\" (case-sensitive); otherwise, print the string \\"not prime\\". Examples Input 5 Output prime Input 4 Output not prime","solution":"def is_prime(N): Determines if an integer N is a prime number. Returns \\"prime\\" if N is prime, otherwise \\"not prime\\". if N <= 1: return \\"not prime\\" for i in range(2, int(N ** 0.5) + 1): if N % i == 0: return \\"not prime\\" return \\"prime\\""},{"question":"Sherlock is a detective and he is trying to solve a case involving encrypted messages. The messages are encrypted using a simple substitution cipher where each letter in the alphabet is mapped to another letter. More specifically, each letter `c_i` in the alphabet is mapped to some letter `d_i`, such that \'a\' <= `c_i`, `d_i` <= \'z\' and `c_i` != `d_i`. The mapping is unique and one-to-one. Given an encrypted message, Sherlock\'s task is to determine the original message. He has obtained the cipher key, which is a string of length 26 where the i-th character is the substitution of the i-th letter of the alphabet (i.e., the 1st character corresponds to \'a\', the 2nd to \'b\', and so on). Your job is to write a program that, given an encrypted message and the cipher key, returns the decrypted message. Input: - The first input line contains a string s (1 ≤ |s| ≤ 1000), the encrypted message consisting of lowercase English letters. - The second input line contains a string t of length 26, the cipher key. Output: - Output a single string — the decrypted message. Examples: Input: bqqmf bcdefghijklmnopqrstuvwxyza Output: apple Input: ifmmp bcdefghijklmnopqrstuvwxyza Output: hello Note: In the first example, the cipher key `bcdefghijklmnopqrstuvwxyza` maps \'b\' to \'a\', \'q\' to \'p\', \'l\' to \'l\', \'m\' to \'m\', and \'f\' to \'e\', thus the encrypted message \\"bqqmf\\" is decrypted to \\"apple\\". In the second example, the cipher key `bcdefghijklmnopqrstuvwxyza` maps \'i\' to \'h\', \'f\' to \'e\', \'m\' to \'l\', \'m\' to \'l\', and \'p\' to \'o\', thus the encrypted message \\"ifmmp\\" is decrypted to \\"hello\\".","solution":"def decrypt_message(encrypted_message, cipher_key): Decrypts an encrypted message using a given cipher key. Args: encrypted_message (str): The encrypted message consisting of lowercase English letters. cipher_key (str): A string of length 26 representing the cipher key. Returns: str: The decrypted message. # Create a dictionary from the cipher key decryption_dict = {cipher_key[i]: chr(97 + i) for i in range(26)} # Decrypt the message decrypted_message = \'\'.join(decryption_dict[char] for char in encrypted_message) return decrypted_message"},{"question":"Alan is a rookie data analyst trying to understand stock prices. He is given daily closing prices of a particular stock for `n` consecutive days. Alan is particularly interested in identifying the best day to buy and the best day to sell to achieve the maximum profit. He needs to decide these two days such that the buying day is strictly before the selling day. Given the daily closing prices of the stock, help Alan find the maximum profit he can achieve. If no profit can be made, return 0. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) denoting the number of days. The second line contains `n` integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^6) where p_i denotes the closing price of the stock on the i-th day. Output Print a single integer denoting the maximum profit Alan can achieve. If no profit can be made, return 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Explanation In the first example, the maximum profit can be achieved by buying on day 2 (price = 1) and selling on day 5 (price = 6). The profit is 6 - 1 = 5. In the second example, no transaction is done, i.e. max profit = 0.","solution":"def max_profit(n, prices): Returns the maximum profit that can be achieved by buying and selling the stock on the given days. If no profit can be made, return 0. Parameters: n (int): Number of days. prices (List[int]): List of integers representing daily closing prices. Returns: int: Maximum profit achievable. if n == 0: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given an array of size N consisting of integers. An integer F is called a frequency majorant if it appears more than N/2 times in the array. Your task is to find the frequency majorant in the array, if it exists, otherwise return -1. Constraints * 1 leq N leq 10^6 * -10^9 leq a_i leq 10^9 * a_i is an integer. Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the frequency majorant or -1 if it does not exist. Examples Input 5 3 3 4 2 3 Output 3 Input 4 1 2 3 4 Output -1","solution":"def find_frequency_majorant(n, arr): Function to find the frequency majorant if it exists, otherwise return -1. if n == 0: return -1 count = {} for num in arr: if num in count: count[num] += 1 else: count[num] = 1 if count[num] > n // 2: return num return -1"},{"question":"You are working on a weather application where you need to display the temperature trend for the upcoming days. You have been given the temperature predictions in Celsius for the next few days. Your task is to find out how many days have temperatures higher than the previous day. Input The input consists of a single line of space-separated integers. The first number is n (1 ≤ n ≤ 10) — the size of the array. The following n numbers are the temperature predictions for the next n days (-50 ≤ ti ≤ 50). Output Output a single integer, representing the number of days with a higher temperature compared to the previous day. Example Input 6 5 6 7 7 8 9 Output 4 Note Your application users are very curious about weather trends, so you must ensure accurate results!","solution":"def count_higher_temperatures(data): Returns the number of days with a higher temperature compared to the previous day. :param data: List of integers where the first number is n, followed by n temperature predictions. :return: Integer, number of days with a higher temperature compared to the previous day. n = data[0] temps = data[1:] count = 0 for i in range(1, n): if temps[i] > temps[i - 1]: count += 1 return count"},{"question":"You are given a list of integers representing the height of buildings in a city skyline. Your task is to determine the number of buildings that have an unobstructed view of the sunset. A building has an unobstructed view of the sunset if it is strictly taller than all the buildings to its right. The input will consist of multiple test cases. For each test case, you will be given a list of integers where each integer represents the height of a building. Your output should be the count of buildings with an unobstructed view of the sunset for each test case. Input: The first line contains the number of test cases. For each test case, a line containing space-separated integers representing the heights of the buildings. Output: For each test case, print the number of buildings with an unobstructed view of the sunset. SAMPLE INPUT 3 3 7 8 3 6 1 5 4 3 2 1 1 2 3 4 5 SAMPLE OUTPUT 3 5 1 Explanation: Testcase 1: The skyline is [3, 7, 8, 3, 6, 1] Buildings with heights 8, 6, and 1 have an unobstructed view of the sunset. Thus, the output should be 3. Testcase 2: The skyline is [5, 4, 3, 2, 1] All buildings have an unobstructed view of the sunset since each building is taller than the ones to its right. Thus, the output should be 5. Testcase 3: The skyline is [1, 2, 3, 4, 5] Only the last building has an unobstructed view of the sunset. Thus, the output should be 1.","solution":"def count_unobstructed_views(test_cases): Given a list of test cases, each containing heights of buildings, return a list of counts of buildings with unobstructed views of the sunset. results = [] for heights in test_cases: max_height = float(\'-inf\') count = 0 # Traverse from right to left for height in reversed(heights): if height > max_height: count += 1 max_height = height results.append(count) return results"},{"question":"# Problem Statement You are given an array of integers a1, a2, ..., an. Your task is to transform this array into a non-decreasing array by modifying the minimum number of elements. You can change any element to any integer. Input The first line contains one integer n (1 ≤ n ≤ 100) - the length of the array. The second line contains n space-separated integers representing the array a1, a2, ..., an (-1000 ≤ ai ≤ 1000). Output Print a single number — the minimum number of changes needed to make the array non-decreasing. Examples Input 5 4 2 3 1 5 Output 2 Note The initial array is 4, 2, 3, 1, 5. One possible way to make it non-decreasing with 2 changes is to change the second element from 2 to 4 and the fourth element from 1 to 4. The modified array is 4, 4, 4, 4, 5. Another valid solution with 2 changes could be to change the third element from 3 to 4 and the fourth element from 1 to 5 making the array 4, 2, 4, 5, 5.","solution":"def min_changes_to_non_decreasing(arr): Returns the minimum number of changes needed to transform the array into a non-decreasing array. n = len(arr) dp = [0] * n for i in range(1, n): if arr[i] < arr[i - 1]: dp[i] = dp[i - 1] + 1 else: dp[i] = dp[i - 1] return min(dp[-1], n - 1) # Example usage: # n = 5 # arr = [4, 2, 3, 1, 5] # print(min_changes_to_non_decreasing(arr)) # Output: 2"},{"question":"The annual Coding Marathon features M different stages. Each stage i (1≦i≦M) has a certain difficulty level represented by a positive integer. Takahashi, a participant, wants to maximize his total difficulty score by choosing a subset of stages to complete. However, his goal is to ensure that no two chosen stages have consecutive difficulty levels. Help Takahashi determine the maximum total difficulty score he can achieve under these conditions. Constraints * 1≦M≦2×10^4 * 1≦difficulty level of each stage≦10^3 Input The input is given from Standard Input in the following format: ``` M difficulty1 difficulty2 ... difficultyM ``` Output Print a single integer, representing the maximum total difficulty score Takahashi can achieve. Examples Input ``` 5 6 1 2 7 4 ``` Output ``` 13 ``` Input ``` 3 4 10 3 ``` Output ``` 10 ``` Input ``` 6 5 5 10 40 50 35 ``` Output ``` 80 ```","solution":"def max_difficulty_score(M, difficulties): Returns the maximum total difficulty score Takahashi can achieve by choosing stages such that no two chosen stages have consecutive difficulty levels. if M == 0: return 0 if M == 1: return difficulties[0] dp = [0] * M dp[0] = difficulties[0] dp[1] = max(difficulties[0], difficulties[1]) for i in range(2, M): dp[i] = max(dp[i-1], dp[i-2] + difficulties[i]) return dp[M-1] # Example case M = 5 difficulties = [6, 1, 2, 7, 4] print(max_difficulty_score(M, difficulties)) # Output: 13"},{"question":"Jasmin loves deciphering secret codes. One day, she came across a piece of paper with n integers written on it, forming an encoded message. She realized that the message was encoded using a specific pattern and wants to decode it to reveal the original sequence of integers. The encoding process involves shifting the position of each integer in the sequence to the right by r positions. If an integer is shifted beyond the end, it wraps around to the start. For example, if the sequence is [1, 2, 3, 4] and r is 2, the encoded sequence will be [3, 4, 1, 2]. Given the encoded sequence of integers, your task is to determine the original sequence before it was encoded. Input The first line contains two integers n and r (1 ≤ n ≤ 100, 1 ≤ r ≤ 100). The second line contains n space-separated integers representing the encoded sequence. Output Print the original sequence of integers before it was encoded. Examples Input 5 3 4 5 1 2 3 Output 1 2 3 4 5 Input 4 2 3 4 1 2 Output 1 2 3 4 Input 6 4 5 6 1 2 3 4 Output 1 2 3 4 5 6 Input 3 1 2 3 1 Output 1 2 3 Note In the first sample, the original sequence [1, 2, 3, 4, 5] was shifted to the right by 3 positions to form the encoded sequence [4, 5, 1, 2, 3]. In the second sample, the original sequence [1, 2, 3, 4] was shifted to the right by 2 positions to form the encoded sequence [3, 4, 1, 2].","solution":"def decode_sequence(n, r, encoded_sequence): Given the encoded sequence and the right shift value r, decode it to return the original sequence. # The original sequence can be retrieved by shifting left by r positions r = r % n # In case r is larger than n return encoded_sequence[-r:] + encoded_sequence[:-r] # Example usage: # n = 4, r = 2, encoded_sequence = [3, 4, 1, 2] # original_sequence = decode_sequence(n, r, encoded_sequence) # print(original_sequence) # Output: [1, 2, 3, 4]"},{"question":"Sarah loves playing with strings. Her teacher gave her an interesting challenge that involves strings and their substrings. The challenge is as follows: Sarah\'s teacher provided her with a string consisting of lowercase English letters, and asked her to find the number of distinct substrings of the given string that are palindromes. Since Sarah found the task to be a bit difficult to do manually, she decided to seek your help in solving it. Your task is to write a program that counts the number of distinct palindromic substrings in the given string. INPUT The first line of the input contains a single integer t, the number of test cases. The following t lines each contain a single string s, consisting of lowercase English letters, for which you need to find the number of distinct palindromic substrings. OUTPUT For each test case, output a single line containing the number of distinct palindromic substrings for that test case. CONSTRAINTS 1 ≤ t ≤ 100 1 ≤ length of s ≤ 1000 SAMPLE INPUT 2 abba abcd SAMPLE OUTPUT 4 4","solution":"def count_distinct_palindromic_substrings(s): Count the number of distinct palindromic substrings in a given string s. def is_palindrome(subs): return subs == subs[::-1] palindromic_substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): substr = s[i:j] if is_palindrome(substr): palindromic_substrings.add(substr) return len(palindromic_substrings) def find_palindromic_substrings(test_cases): Given a list of test cases, return a list of results, each representing the number of distinct palindromic substrings for the corresponding test case. results = [] for s in test_cases: results.append(count_distinct_palindromic_substrings(s)) return results"},{"question":"You are given an array of `n` integers. You need to perform a series of `m` operations on it. Each operation is defined by two integers `l` and `r`, which specify a range within the array. The operation involves sorting the subarray from index `l` to `r` in non-decreasing order. After performing all operations, you must output the resulting array. If the operations conflict in a way that can cause an inconsistent result (i.e., they force an element to have multiple different values), output `-1`. Input The first line contains integers `n` and `m` (1 ≤ n, m ≤ 105). The second line contains `n` integers – the initial elements of the array. Each of the next `m` lines contains a pair of integers `l` and `r` (1 ≤ l ≤ r ≤ n) – the range for the sorting operation. Output Print the resulting array after all operations. If the operations are inconsistent, print `-1`. Examples Input 5 2 4 3 1 5 2 1 3 2 5 Output 1 2 3 4 5 Input 5 1 2 4 3 5 1 1 5 Output 1 2 3 4 5 Input 3 2 3 2 1 1 2 2 3 Output -1","solution":"def perform_operations(n, m, arr, operations): for l, r in operations: arr[l-1:r] = sorted(arr[l-1:r]) for l, r in operations: expected_segment = sorted(arr[l-1:r]) if arr[l-1:r] != expected_segment: return -1 return arr def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) arr = list(map(int, data[2:n+2])) operations = [] index = n + 2 for i in range(m): l = int(data[index]) r = int(data[index + 1]) operations.append((l, r)) index += 2 result = perform_operations(n, m, arr, operations) if result == -1: print(-1) else: print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"Alice and Bob are playing a different kind of game this time. They have a long string of lowercase alphabets. They decided to have a friendly competition to find out if the string can be transformed into a palindrome by rearranging its characters. A palindrome is a string that reads the same forward and backward. Your task is to determine if the given string can be rearranged into a palindrome. Input The input consists of a single line containing a string s (1 ≤ length of s ≤ 10^5). The string contains only lowercase alphabets. Output Print \\"YES\\" if it is possible to rearrange the string into a palindrome, otherwise print \\"NO\\". Examples Input civic Output YES Input ivicc Output YES Input hello Output NO Note In the first example, the string \\"civic\\" is already a palindrome, so the answer is \\"YES\\". In the second example, the string \\"ivicc\\" can be rearranged to form \\"civic\\" or \\"viciv\\", both of which are palindromes, so the answer is \\"YES\\". In the third example, the string \\"hello\\" cannot be rearranged to form a palindrome, so the answer is \\"NO\\".","solution":"def can_form_palindrome(s): Determine if the given string can be rearranged into a palindrome. Parameters: s (str): The input string containing only lowercase alphabets. Returns: str: \\"YES\\" if it is possible to rearrange the string into a palindrome, otherwise \\"NO\\". from collections import Counter char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Kai is planning to paint N (1 ≤ N ≤ 500,000) sections of a fence. There are M (1 ≤ M ≤ 200,000) distinct ranges of sections that need to be painted using exactly K (1 ≤ K ≤ 100) different colors. Each range can be painted in any one of the K colors, but two adjacent sections must not be painted the same color. Help Kai determine if such a coloring is possible. Input The first line contains three integers N, M, and K. The second line contains M pairs of integers `a_i` and `b_i` (1 ≤ a_i ≤ b_i ≤ N) indicating the start and end of each range. Output Output \\"YES\\" if it is possible to paint the fence as described. Otherwise, output \\"NO\\". Example Input: 5 3 2 1 3 2 4 3 5 Output: YES Explanation One possible solution is to paint the sections: 1 2 1 2 1. All ranges have adjacent sections with different colors.","solution":"def is_coloring_possible(n, m, k, ranges): if k < 2: return \\"NO\\" adjacent_list = [[] for _ in range(n+1)] for start, end in ranges: for i in range(start, end): adjacent_list[i].append(i+1) adjacent_list[i+1].append(i) def dfs(node, colors, color): colors[node] = color for neighbour in adjacent_list[node]: if colors[neighbour] == color: return False if colors[neighbour] == 0 and not dfs(neighbour, colors, 3 - color): return False return True for section in range(1, n+1): colors = [0] * (n+1) if colors[section] == 0 and not dfs(section, colors, 1): return \\"NO\\" return \\"YES\\""},{"question":"Alice loves graph theory and has recently acquired a special kind of graph called a \\"tree.\\" In a tree, there is exactly one path between any pair of vertices, and therefore no cycles. Alice wants to determine the length of the longest path in her tree, known as the tree\'s diameter. The diameter of a tree is the length of the longest path between any two vertices in the tree. You are given a tree with `n` vertices. The vertices are numbered from 1 to n. The tree is represented as an adjacency list where each vertex has a list of its directly connected vertices. Your task is to write a program to find the diameter of the tree. **Input:** The first line of the input contains an integer `n` (2 ≤ n ≤ 100,000) — the number of vertices in the tree. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — indicating that there is an edge between vertex `u` and vertex `v`. **Output:** Output a single integer — the diameter of the tree. **Example:** Input: ``` 5 1 2 1 3 3 4 3 5 ``` Output: ``` 3 ``` Note: In the example provided, the longest path in the tree is from vertex 2 to vertex 4 (or vertex 2 to vertex 5) with a path length of 3.","solution":"from collections import deque, defaultdict def find_tree_diameter(n, edges): def bfs(start_node): visited = [False] * (n + 1) queue = deque([(start_node, 0)]) # (current node, current distance) visited[start_node] = True farthest_node, max_distance = start_node, 0 while queue: current_node, current_distance = queue.popleft() for neighbor in graph[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, current_distance + 1)) if current_distance + 1 > max_distance: max_distance = current_distance + 1 farthest_node = neighbor return farthest_node, max_distance graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Step 1: Perform BFS from an arbitrary node to find the farthest node farthest_node, _ = bfs(1) # Step 2: Perform BFS from the farthest node found in step 1 to find the tree diameter _, diameter = bfs(farthest_node) return diameter"},{"question":"Given an array `nums` of length n, you need to find the number of distinct pairs `(i, j)` (where `0 <= i < j < n`) such that the sum of `nums[i]` and `nums[j]` is equal to a given integer `target`. Input The first line of the input contains an integer `t`, the number of test cases. Each test case consists of two lines: 1. The first line contains two integers `n` (the number of elements in the array) and `target`. 2. The second line contains `n` integers, the elements of the array `nums`. Output For each test case, output the number of distinct pairs `(i, j)` that sum up to `target`. Constraints - 1 <= n <= 10^5 - -10^9 <= nums[i] <= 10^9 - The sum of n over all test cases does not exceed 10^6. - 1 <= t <= 100 Example Input: 2 4 5 1 2 3 4 4 6 1 5 5 10 Output: 2 1 Explanation Example case 1: There are two pairs (1, 4) and (2, 3) which sum up to 5. Example case 2: There is one pair (1, 5) (second element 5) which sums up to 6.","solution":"from collections import defaultdict def count_distinct_pairs(nums, target): Returns the count of distinct pairs (i, j) such that nums[i] + nums[j] = target. num_counts = defaultdict(int) pair_count = 0 for num in nums: complement = target - num if complement in num_counts and num_counts[complement] > 0: pair_count += 1 num_counts[complement] -= 1 else: num_counts[num] += 1 return pair_count def solve(test_cases): results = [] for n, target, nums in test_cases: results.append(count_distinct_pairs(nums, target)) return results"},{"question":"Given an array of positive integers, find the largest sum of a contiguous subarray using the divide-and-conquer approach. Your function should use recursion to solve the problem. Input The input consists of: - The first line is an integer n (1 ≤ n ≤ 300000), the number of elements in the array. - The second line is n space-separated integers representing the elements of the array (-10^9 ≤ Ai ≤ 10^9). Output Print a single integer that represents the largest sum of a contiguous subarray. Example Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation The subarray [4, -1, 2, 1] has the largest sum 6.","solution":"def max_crossing_sum(arr, left, mid, right): Find the maximum sum of a subarray that crosses the midpoint. left_sum = float(\'-inf\') sum = 0 for i in range(mid, left - 1, -1): sum += arr[i] if sum > left_sum: left_sum = sum right_sum = float(\'-inf\') sum = 0 for i in range(mid + 1, right + 1): sum += arr[i] if sum > right_sum: right_sum = sum return left_sum + right_sum def max_sub_array_sum(arr, left, right): Find the maximum sum of a contiguous subarray using divide and conquer. if left == right: return arr[left] mid = (left + right) // 2 left_max = max_sub_array_sum(arr, left, mid) right_max = max_sub_array_sum(arr, mid + 1, right) crossing_max = max_crossing_sum(arr, left, mid, right) return max(left_max, right_max, crossing_max) def max_sum_of_subarray(arr): Returns the maximum sum of a contiguous subarray. return max_sub_array_sum(arr, 0, len(arr) - 1) # Example usage: n = 9 arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(max_sum_of_subarray(arr)) # Output should be 6"},{"question":"A group of knights in a kingdom are gearing up for a grand tournament. Invitations are sent out to n knights, who are labeled by integers from 1 to n. Each knight has a unique preference of days on which they would prefer to joust. There are k days available for the tournament, and each day, a knight can compete if it is their preferred day. However, to ensure excitement and fairness, each day must have at least one knight who hasn\'t jousted on any of the previous days. Your task is to determine the minimum number of days k required for the tournament where the preferences of all the knights are satisfied. Additionally, provide a possible schedule of knights participating each day that meets the requirements. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of knights. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n), where ai represents the preferred day on which the i-th knight wants to compete. Output In the first line, print a number k — the minimum number of days required for the tournament. Then in k lines, print the schedule with the knights assigned each day. Each line should contain the knight(s) who are participating on that particular day, separated by a space. Examples Input 5 1 2 2 3 1 Output 3 1 5 2 3 4 Input 6 1 2 3 4 2 3 Output 4 1 2 5 3 6 4","solution":"def tournament_schedule(n, preferences): # Create a dictionary to store the days and corresponding knights days = {} for knight, preferred_day in enumerate(preferences, start=1): if preferred_day not in days: days[preferred_day] = [] days[preferred_day].append(knight) # Sort the days to get the correct schedule sorted_days = sorted(days.items()) k = len(sorted_days) schedule = [knights for day, knights in sorted_days] return k, schedule # Example usage: n = 5 preferences = [1, 2, 2, 3, 1] print(tournament_schedule(n, preferences))"},{"question":"You are given an enchanting forest which is a grid of size NxM. Each cell in the grid either contains a tree (represented by \'#\') or is empty (represented by \'.\'). A tree can spread its magical aura if there is an empty cell adjacent to it (in the four possible directions: north, south, east, and west). The magical aura from a tree converts the adjacent empty cell into another tree. This process continues for T hours in which during each hour all current trees spread their aura simultaneously. Your task is to determine the state of the forest after T hours. INPUT: The first line contains three integers N, M, and T representing the number of rows, number of columns, and the number of hours, respectively. The next N lines each contain M characters representing the initial state of the forest. OUTPUT: Output N lines each containing M characters representing the state of the forest after T hours. CONSTRAINTS: 1 ≤ N, M ≤ 1000 1 ≤ T ≤ 100 The initial state will contain at least one tree. SAMPLE INPUT 3 3 2 .#. ... #.. SAMPLE OUTPUT # # # Explanation: Initially, the forest is: . # . . . . # . . After the first hour: # # # # # # # . # After the second hour: # # # # # # # # # All cells have turned into trees by the end of the second hour.","solution":"def spread_forest(N, M, T, forest): def spread_once(forest): new_forest = [row[:] for row in forest] # Copy the current forest for r in range(N): for c in range(M): if forest[r][c] == \'#\': # Tree found, spread to adjacent cells if r > 0 and forest[r-1][c] == \'.\': # North new_forest[r-1][c] = \'#\' if r < N-1 and forest[r+1][c] == \'.\': # South new_forest[r+1][c] = \'#\' if c > 0 and forest[r][c-1] == \'.\': # West new_forest[r][c-1] = \'#\' if c < M-1 and forest[r][c+1] == \'.\': # East new_forest[r][c+1] = \'#\' return new_forest forest = [list(row) for row in forest] for _ in range(T): forest = spread_once(forest) return [\'\'.join(row) for row in forest] # Function to parse input and output the result def enchanting_forest_solution(N, M, T, grid): result_forest = spread_forest(N, M, T, grid) return \\"n\\".join(result_forest)"},{"question":"A carpenter has a set of wooden planks with varying lengths. He wants to cut these planks into equal-length pieces for a project. However, he can only make cuts at fixed intervals to minimize waste. Given the total length of each plank and the required length of each piece, determine the maximum number of pieces of the required length that can be obtained from each plank. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 10^9) — the length of the plank and the required length of each piece respectively. Output For each test case, output one integer — the maximum number of pieces of the required length that can be obtained from the plank. Example Input 2 10 2 15 4 Output 5 3 Note In the first test case, a plank of length 10 can be cut into 5 pieces of length 2. In the second test case, a plank of length 15 can be cut into 3 pieces of length 4, leaving a remaining piece of length 3 which is too short to be used.","solution":"def max_pieces(t, cases): Determines the maximum number of pieces of the required length that can be obtained from each plank for multiple test cases. Args: t (int): The number of test cases. cases (list of tuples): Each tuple contains two integers n and m, where n is the length of the plank and m is the required length of each piece. Returns: list: A list of integers where each integer represents the maximum number of pieces of length m that can be obtained from plank of length n. results = [] for n, m in cases: results.append(n // m) return results"},{"question":"Problem Statement Mr. Smith is a tech enthusiast and a sequence lover. He is particularly interested in sequences that exhibit special properties. One day, he came across a sequence of N integers and instantly challenged himself to find the longest sub-sequence which has an equal number of even and odd integers. Given an array of N integers, your task is to find the length of the longest sub-sequence that contains an equal number of even and odd integers. Input The first line of the input contains an integer T, denoting the number of test cases. Each of the next T pairs of lines represent a test case. The first line of each test case contains a single integer N, representing the length of the sequence. The second line contains N space-separated integers A1, A2, ..., AN which represent the sequence. Output For each test case, output a single line containing the length of the longest sub-sequence that has an equal number of even and odd integers. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ Ai ≤ 10^9 Example Input 3 5 1 2 3 4 5 6 1 1 1 1 1 1 4 2 4 6 8 Output 4 0 0 Explanation In the first test case, the longest sub-sequence with an equal number of even and odd integers is [1, 2, 3, 4] which has a length of 4. In the second and third test cases, no subsequence exists that has an equal number of even and odd integers, thus the length is 0.","solution":"def longest_equal_even_odd_subsequence(T, test_cases): Given the number of test cases and test cases themselves, this function returns the lengths of the longest sub-sequences which have an equal number of even and odd integers. Args: T : int : The number of test cases. test_cases : list of tuples : Each tuple holds two elements: - First element is an int N indicating the length of the sequence. - Second element is a list of integers representing the sequence. Returns: list of int : The lengths of the longest sub-sequences for each test case. results = [] for i in range(T): N, sequence = test_cases[i] # Track difference counts count_dict = {0: -1} count = 0 max_length = 0 for idx in range(N): if sequence[idx] % 2 == 0: count += 1 else: count -= 1 if count in count_dict: max_length = max(max_length, idx - count_dict[count]) else: count_dict[count] = idx results.append(max_length) return results"},{"question":"Shiny-Princess: Find the Number of Circuits (小公主の数学) Problem Shiny-Princess loves undirected graphs. One day, she came across a graph with N vertices and M edges. Each vertex is labeled from 1 to N and each edge i connects two vertices u_i and v_i. Shiny-Princess is interested in finding the number of circuits in this graph. A circuit is a path that starts and ends at the same vertex, passing through at least one other vertex, and no vertex (except the starting/ending vertex) is visited more than once. Help Shiny-Princess find the number of distinct circuits in the graph. Input Format The input is provided in the following format: N M u_1 v_1 vdots u_M v_M In line 1, two integers N and M are provided, representing the number of vertices and edges respectively. For each of the next M lines, two integers u_i and v_i are given, indicating an edge between vertex u_i and vertex v_i. Constraints * 2 leq N leq 100 * 1 leq M leq 200 * 1 leq u_i, v_i leq N, u_i neq v_i (1 leq i leq M) * For each i, j (1 leq i < j leq M), u_i neq u_j or v_i neq v_j are satisfied. Output Format Print the number of distinct circuits in the graph. Example 1 Input 4 4 1 2 2 3 3 4 4 1 Output 1 There is exactly one circuit in this graph: 1-2-3-4-1. Example 2 Input 5 6 1 2 1 3 2 3 2 4 4 5 5 2 Output 2 There are two distinct circuits in this graph: 2-4-5-2 and 1-2-3-1.","solution":"def find_circuits(N, M, edges): Finds the number of circuits in an undirected graph. Parameters: N (int): Number of vertices. M (int): Number of edges. edges (list of tuples): Each tuple contains two vertices representing an edge. Returns: int: Number of distinct circuits. from collections import defaultdict # Helper function to perform DFS and count cycles def dfs(v, visited, parent): nonlocal cycle_count visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: dfs(neighbor, visited, v) elif neighbor != parent: cycle_count += 1 # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) cycle_count = 0 # Perform DFS from each vertex for v in range(1, N + 1): if not visited[v]: dfs(v, visited, -1) # Each cycle is counted twice, so divide by 2 return cycle_count // 2"},{"question":"The National Library is celebrating its annual book fair where readers rent books for a specific period. To ensure fair usage, the library enforces a simple rule: no reader can rent more than one book at a time. The library\'s system records each borrowing event in a log with the following structure: - Reader\'s ID: a unique alphanumeric string representing the reader. - Book\'s ID: a unique alphanumeric string representing the book. - Event Type: either \\"borrow\\" (when a reader borrows a book) or \\"return\\" (when a reader returns a book). - Timestamp: a string in the format \\"YYYY-MM-DD HH:MM:SS\\" representing when the event occurred. Given the log of borrowing events, your task is to determine which readers violated the policy by borrowing more than one book at once. # Input Format - The first line contains an integer `n`, the number of events in the log. - Each of the next `n` lines contains a record with the reader\'s ID, book\'s ID, event type, and timestamp separated by a space. # Output Format - Output the unique IDs of the readers who violated the borrowing policy, one per line. - The output should list the IDs in ascending order. # Constraints - `1 <= n <= 10^5` - Each reader ID and book ID is a string containing alphanumeric characters and may include special characters such as hyphens. # Example Input ``` 7 r1 b1 borrow 2023-03-01 10:00:00 r2 b2 borrow 2023-03-01 10:05:00 r1 b1 return 2023-03-02 09:00:00 r1 b3 borrow 2023-03-02 09:05:00 r3 b4 borrow 2023-03-02 09:10:00 r3 b5 borrow 2023-03-02 09:15:00 r2 b2 return 2023-03-02 09:20:00 ``` Output ``` r3 ```","solution":"def find_rule_breakers(n, events): Finds readers who violated the borrowing policy by borrowing more than one book at once. Args: n (int): Number of events in the log. events (List[str]): List of event records. Returns: List[str]: List of unique reader IDs who violated the policy, sorted in ascending order. from collections import defaultdict borrowed_books = defaultdict(int) # Keeps count of borrowed books per reader rule_breakers = set() # Keeps track of readers who violated the policy for event in events: reader_id, book_id, event_type, _ = event.split(maxsplit=3) if event_type == \\"borrow\\": borrowed_books[reader_id] += 1 if borrowed_books[reader_id] > 1: rule_breakers.add(reader_id) elif event_type == \\"return\\": borrowed_books[reader_id] -= 1 return sorted(rule_breakers)"},{"question":"You are a security engineer responsible for monitoring a network. Your log contains IP addresses of devices that have connected to your network over various time intervals. You are given a list of IP addresses, each represented as a string. Each device connects for a certain period, and its connection timestamps are logged. Your task is to find the total number of distinct devices that have connected to the network. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of IP addresses in the log. Each of the next n lines contains a string representing an IP address. Output Output a single integer representing the total number of distinct IP addresses. Example Input 5 192.168.1.1 192.168.1.2 192.168.1.1 10.0.0.1 10.0.0.1 Output 3 Note In the example, the distinct IP addresses are \\"192.168.1.1\\", \\"192.168.1.2\\", and \\"10.0.0.1\\". The total number of distinct IP addresses is 3.","solution":"def count_distinct_ips(n, ip_addresses): Returns the number of distinct IP addresses from the list. :param n: int - number of IP addresses in the log :param ip_addresses: List[str] - list of IP addresses :return: int - number of distinct IP addresses return len(set(ip_addresses))"},{"question":"You are given a singly linked list where each node contains a lowercase letter and an integer. You need to reverse the nodes such that the alphabets are in reverse order but the integers remain in their respective positions. Implement a function `reverseList` that takes the head of the linked list as input and returns the new head after the reversal. # Function Signature ```python def reverseList(head: ListNode) -> ListNode: pass ``` # Input - A singly linked list where each node contains a lowercase letter and an integer. # Output - The head of the modified linked list with alphabets in reverse order but the integers in their original positions. # Constraints - 1 ≤ Length of the linked list ≤ 10^5 - Each node contains a letter (\'a\' to \'z\') and an integer. # Example Input The linked list: ``` \'a\', 1 -> \'b\', 3 -> \'c\', 5 -> \'d\', 2 -> None ``` Output The modified linked list: ``` \'d\', 1 -> \'c\', 3 -> \'b\', 5 -> \'a\', 2 -> None ``` # Explanation After reversing the alphabets but keeping the integers in place: - The first node originally contained \'a\' and 1. After reversal, it contains \'d\' and 1. - The second node originally contained \'b\' and 3. After reversal, it contains \'c\' and 3. - The third node originally contained \'c\' and 5. After reversal, it contains \'b\' and 5. - The fourth node originally contained \'d\' and 2. After reversal, it contains \'a\' and 2. The order of the integers does not change but the order of the letters is reversed.","solution":"class ListNode: def __init__(self, letter: str, num: int): self.letter = letter self.num = num self.next = None def reverseList(head: ListNode) -> ListNode: if not head: return None # Collect all the letters letters = [] current = head while current: letters.append(current.letter) current = current.next # Reverse the collected letters letters.reverse() # Assign the reversed letters back to the nodes current = head index = 0 while current: current.letter = letters[index] index += 1 current = current.next return head"},{"question":"As a software developer, you are tasked with developing a utility that processes a sequence of financial transactions. In particular, you need to compute the balance of an account after a series of transactions. Each transaction can either be a deposit or a withdrawal. Input: The first line contains an integer N denoting the number of transactions. The following N lines each contain a transaction in the format: - \\"D amount\\" for a deposit. - \\"W amount\\" for a withdrawal. Output: Print the resulting balance after all transactions. If any withdrawal transaction causes the balance to drop below zero, print \\"Overdrawn\\" and terminate the program without processing the remaining transactions. Constraints: 1 ≤ N ≤ 100 1 ≤ amount ≤ 10000 Note: - The initial balance is 0. - The amount is always an integer. SAMPLE INPUT 1 5 D 100 W 50 D 200 W 100 W 150 SAMPLE OUTPUT 1 0 SAMPLE INPUT 2 3 D 50 W 100 D 20 SAMPLE OUTPUT 2 Overdrawn","solution":"def compute_balance(transactions): Processes the sequence of financial transactions to calculate the balance. Args: transactions (list of str): List of transactions in the format \\"D amount\\" or \\"W amount\\". Returns: int or str: Resulting balance after all transactions, or \\"Overdrawn\\" if balance goes below zero. balance = 0 for transaction in transactions: type, amount = transaction.split() amount = int(amount) if type == \'D\': balance += amount elif type == \'W\': balance -= amount if balance < 0: return \\"Overdrawn\\" return balance"},{"question":"You are given a series of movements represented as a sequence of characters along a straight line. The movements can either be left (\'L\') or right (\'R\'). Your task is to determine if it is possible to reach the starting point from the initial position after performing exactly one valid movement. A valid movement consists of performing one \'L\' or \'R\' operation. If it is possible to reach the starting point, print \\"YES\\" in the first line. In the second line, print either \'L\' or \'R\' to indicate which movement should be performed. If it is not possible, print \\"NO\\". Input The input consists of a single line containing a sequence of characters denoting the movements. Output Print \\"YES\\" and the valid movement (\'L\' or \'R\') if it is possible to reach the starting point. Else, print \\"NO\\". Examples Input LLLRR Output YES R Input LRL Output NO Notes: In the first example, performing one \'R\' operation to the sequence leaves it as \\"LLLRRR\\", which can return to the start point. In the second example, there is no valid single movement that can bring the position back to the start point.","solution":"def can_return_to_start(sequence): if sequence.count(\'L\') == sequence.count(\'R\'): return \\"NO\\" elif sequence.count(\'L\') == sequence.count(\'R\') + 1: return \\"YES\\", \'R\' elif sequence.count(\'R\') == sequence.count(\'L\') + 1: return \\"YES\\", \'L\' else: return \\"NO\\""},{"question":"You are given a tree with n nodes. Each node has a unique value from 1 to n. Your task is to find the minimum number of edges that need to be removed so that the tree becomes a forest with exactly k components, where each component is a tree. Input The first line of input contains an integer n (2 ≤ n ≤ 100), the number of nodes in the tree. The following n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that there is an edge between nodes u and v. The last line contains an integer k (1 ≤ k ≤ n). Output Output the minimum number of edges that need to be removed to divide the tree into exactly k components. Example Input 7 1 2 1 3 2 4 2 5 3 6 3 7 3 Output 2 Note In the example, removing the edges (1, 3) and (3, 6) would divide the tree into 3 components: {1, 2, 4, 5}, {3}, and {6, 7}, which are three separate trees.","solution":"def min_edges_to_remove(n, edges, k): Returns the minimum number of edges that need to be removed to create exactly k components. Arguments: n : int : number of nodes in the tree edges : List[Tuple[int, int]] : list of n-1 edges k : int : desired number of components Returns: int : minimum number of edges to be removed. # For a tree with n nodes, it has exactly n-1 edges and it\'s connected # To obtain k components from a tree, we need to remove (k-1) edges return k - 1"},{"question":"You are developing a simple text editor, and you want to implement a feature that generates a unique identifier for each document. The identifier is based on the document creation order, starting with \\"DOC0001\\", \\"DOC0002\\", and so on. However, every 1000 documents, you want to change the prefix from \\"DOC\\" to \\"DOG\\" (just for differentiation). For example, the first 1000 documents should be labeled as \\"DOC0001\\" to \\"DOC1000\\", the next 1000 as \\"DOG0001\\" to \\"DOG1000\\", and then cycle back to \\"DOC\\" for the next 1000 documents, and so forth. You are given an integer M between 1 and 1000000 (inclusive). Print the identifier for the M-th document. # Constraints - 1 ≤ M ≤ 1000000 - M is an integer. # Input Input is given from Standard Input in the following format: M # Output Print the identifier for the M-th document. # Examples Input 1 Output DOC0001 Input 1000 Output DOC1000 Input 1001 Output DOG0001 Input 2001 Output DOC0001 Input 3000 Output DOG1000","solution":"def generate_document_identifier(M): Generates a unique document identifier based on the document creation order. Parameters: M (int): The document creation order number (1 ≤ M ≤ 1000000) Returns: str: The unique document identifier cycle = (M - 1) // 1000 + 1 index = (M - 1) % 1000 + 1 prefix = \\"DOC\\" if cycle % 2 != 0 else \\"DOG\\" return f\\"{prefix}{index:04d}\\""},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB There is a grid with `n` rows and `m` columns. Each cell of the grid contains an integer value representing the elevation of that cell. Your task is to find the highest elevation that can be reached starting from any boundary cell and moving only to adjacent cells (top, bottom, left, right). Input: The first line contains two integers, `n` and `m` (`1 ≤ n, m ≤ 1000`), the number of rows and columns of the grid. Each of the next `n` lines contains `m` integers representing the elevation values in the grid. The elevation of the `j`-th cell in the `i`-th row is provided as `grid[i][j]` (`0 ≤ grid[i][j] ≤ 1000`). Output: Output a single integer which is the highest elevation that can be reached from any boundary cell. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 9 Explanation: Starting from any of the boundary cells, the highest elevation reachable is `9`, which is reachable from the cell `(2, 2)`.","solution":"def highest_elevation_from_boundary(n, m, grid): Find the highest elevation that can be reached starting from any boundary cell. Parameters: n (int): Number of rows. m (int): Number of columns. grid (List[List[int]]): Elevation values in the grid. Returns: int: Highest reachable elevation. from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_within_bounds(x, y): return 0 <= x < n and 0 <= y < m def bfs(): visited = [[False] * m for _ in range(n)] max_elevation = 0 queue = deque() # Initialize queue with boundary cells for i in range(n): queue.append((i, 0)) queue.append((i, m - 1)) visited[i][0] = True visited[i][m - 1] = True for j in range(1, m - 1): queue.append((0, j)) queue.append((n - 1, j)) visited[0][j] = True visited[n - 1][j] = True while queue: x, y = queue.popleft() max_elevation = max(max_elevation, grid[x][y]) for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return max_elevation return bfs()"},{"question":"Sana is a robotics engineer working on a team designing a robot that can traverse a grid. The robot starts at the top-left corner of the grid (at position (1, 1)) and aims to reach the bottom-right corner (at position (n, m)). The grid is composed of cells, and each cell contains a non-negative integer representing the cost to move through that cell. The robot can only move to the right or downward at each step. Write a function that calculates the minimum total cost for the robot to reach the bottom-right corner of the grid. The robot cannot move outside the grid boundaries. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. Each of the next n lines contains m integers — the cost to move through each cell in the grid. Output: Print a single integer: the minimum total cost for the robot to reach the bottom-right corner of the grid. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 Explanation: In the first example, the optimal path would be to move right, right, down, down. Total cost: 1 + 3 + 1 + 1 + 1 = 7. In the second example, the optimal path would be to move right, then down. Total cost: 1 + 2 + 1 = 4.","solution":"def min_cost(grid): Calculates the minimum total cost for the robot to reach the bottom-right corner of the grid. Parameters: grid (list of list of int): The grid with non-negative integers representing the cost of each cell. Returns: int: The minimum total cost to reach the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) # Create a 2D dp array to store the minimum costs dp = [[0] * m for _ in range(n)] # Initialize the first cell with the same value as grid\'s first cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1] # Function to read the grid input and calculate the minimum cost def calculate_min_cost(n, m, grid_values): grid = [] idx = 0 for i in range(n): row = [] for j in range(m): row.append(grid_values[idx]) idx += 1 grid.append(row) return min_cost(grid)"},{"question":"A famous restaurant serves dishes in the order of customers\' requests. Each dish takes a certain amount of time to prepare, and the chef can only prepare one dish at a time. Given a sequence of customer requests and the preparation times for each dish, write a program to find out the maximum number of dishes that can be prepared starting from any customer\'s request while ensuring the dishes are prepared in the order of requests. Additionally, compute the total preparation time for this sequence of dishes. Input: - The first line contains an integer n (1 ≤ n ≤ 105), the number of customer requests. - The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 106), where ti is the time it takes to prepare the ith dish. Output: - On the first line, print the maximum number of consecutive dishes that can be prepared starting from any request. - On the second line, print the total preparation time for these dishes. Example: Input: 5 2 3 1 4 2 Output: 5 12 Explanation: - By starting from the first request, all 5 dishes can be prepared consecutively with a total preparation time of 12 (2+3+1+4+2=12). Input: 7 4 3 2 1 5 6 2 Output: 7 23 Explanation: - By starting from the first request, all 7 dishes can be prepared consecutively with a total preparation time of 23 (4+3+2+1+5+6+2=23). Note: - The output should consider consecutive dishes starting from the first request to maximize the count and preparation time.","solution":"def max_consecutive_dishes(n, times): Returns the maximum number of consecutive dishes that can be prepared starting from the first customer\'s request and the total preparation time. Parameters: n (int): The number of customer requests. times (list of int): The time it takes to prepare each dish. Returns: tuple: (max_dishes, total_time) where max_dishes is the maximum number of dishes that can be prepared consecutively, and total_time is the total preparation time for those dishes. # Since we are asked for the maximum number of consecutive dishes starting from the # first request, the result is always the total number of requests, and the total # preparation time is the sum of all preparation times. max_dishes = n total_time = sum(times) return max_dishes, total_time"},{"question":"Time Limit: 5 sec / Memory Limit: 256 MB Given an integer array, you need to find the number of unique pairs (i, j) such that the sum of elements at these indices is equal to a target value. Indices i and j should be distinct (i ≠ j). Input The first line of the input contains two integers n (1 ≤ n ≤ 100,000) and k (|k| ≤ 1,000,000,000). The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 1,000,000,000). Output Output a single integer, the number of unique pairs (i, j) with i ≠ j such that a_i + a_j = k. Example Input 5 7 1 3 4 2 5 Output 2","solution":"def count_unique_pairs_with_sum(arr, k): Returns the number of unique pairs (i, j) such that a_i + a_j = k and i ≠ j. seen = set() pairs = set() for num in arr: if (k - num) in seen: pairs.add((min(num, k - num), max(num, k - num))) seen.add(num) return len(pairs)"},{"question":"A common problem in data manipulation is calculating aggregate metrics based on specific conditions. Consider the following problem: You are given an array of integers and a number of queries. Each query consists of two integers `L` and `R`, representing a range within the array. For each query, you need to calculate the sum of the elements in the array from index `L` to index `R` (both inclusive). # Input - The first line contains two integers `N` and `Q` (1 ≤ N, Q ≤ 10^5) — the number of elements in the array and the number of queries, respectively. - The second line contains `N` integers `a_1, a_2, ..., a_N` (-10^4 ≤ a_i ≤ 10^4) — the elements of the array. - Each of the following `Q` lines contains two integers `L` and `R` (0 ≤ L ≤ R < N) — the range for each query. # Output - For each query, print a single integer — the sum of the elements in the array from index `L` to index `R`. # Example Input ``` 5 3 1 2 3 4 5 0 2 1 3 0 4 ``` Output ``` 6 9 15 ``` # Note In the example above: - The sum of elements from index 0 to index 2 is 1 + 2 + 3 = 6. - The sum of elements from index 1 to index 3 is 2 + 3 + 4 = 9. - The sum of elements from index 0 to index 4 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def range_sum(arr, queries): Returns the sum of the elements in the array for each range specified in the queries. Parameters: arr (list): List of integers representing the array. queries (list): List of tuples, where each tuple consists of two integers (L, R) representing the range. Returns: list : List of integers representing the sum for each query. prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] results = [] for L, R in queries: results.append(prefix_sums[R + 1] - prefix_sums[L]) return results # Example usage: # N, Q = 5, 3 # arr = [1, 2, 3, 4, 5] # queries = [(0, 2), (1, 3), (0, 4)] # print(range_sum(arr, queries)) # Output: [6, 9, 15]"},{"question":"We have an array of integers representing the height of buildings in a skyline. You are given a crane that can increase the height of any building by 1 unit at a time. Given that you can perform exactly K operations with the crane, determine the minimal possible difference between the height of the tallest building and the shortest building after performing the operations. Constraints * 1 leq N leq 10^5 * 1 leq A_i leq 10^9 * 0 leq K leq 10^9 * A_i is an integer. Input Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N Output Print the minimal possible difference between the height of the tallest building and the shortest building after performing exactly K operations. Examples Input 5 3 1 3 5 7 9 Output 6 Input 4 0 2 4 6 8 Output 6 Input 5 10 1 2 3 4 5 Output 0","solution":"def minimize_height_difference(N, K, heights): heights.sort() low = 0 high = heights[-1] - heights[0] while low < high: mid = (low + high) // 2 max_increase = [0] * N for i in range(N): max_increase[i] = min(heights[0] + mid, heights[i]) remaining_operations = K for i in range(N): diff = heights[i] - max_increase[i] if diff > 0: remaining_operations -= diff if remaining_operations >= 0: high = mid else: low = mid + 1 return low # Function to handle input and output def process_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) heights = list(map(int, data[2:2+N])) result = minimize_height_difference(N, K, heights) print(result)"},{"question":"Alex is given an array of integers a = [a_1, a_2, ..., a_n]. He wants to perform exactly one operation on this array to maximize the sum of all its elements. The operation he can perform is: Choose any two indexes i and j (1 ≤ i, j ≤ n, i ≠ j), and swap the elements a_i and a_j. After performing this swap operation, Alex will then take each element a_k (1 ≤ k ≤ n) and replace it with the square of the absolute value of that element, i.e., each element a_k will be replaced with (|a_k|)^2. Help Alex find the maximum possible sum of elements of the array after performing this operation. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of integers in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6) — the elements of the array. Output Print a single integer — the maximum possible sum of elements of the array after performing the operation and replacing each element with its square as described. Examples Input 4 1 2 -3 4 Output 30 Input 3 -1 -2 -3 Output 14","solution":"def maximize_sum_after_swap_and_square(n, a): Returns the maximum possible sum after performing one swap and squaring each element. if n == 1: return abs(a[0])**2 original_sum = sum(abs(x) ** 2 for x in a) max_squared_sum = original_sum # Find the pair (i, j) with minimum absolute value and maximum absolute value element min_abs_val = min(a, key=abs) max_abs_val = max(a, key=abs) for i in range(n): for j in range(n): if i != j: temp_a = a[:] temp_a[i], temp_a[j] = temp_a[j], temp_a[i] current_sum = sum(abs(x) ** 2 for x in temp_a) max_squared_sum = max(max_squared_sum, current_sum) return max_squared_sum"},{"question":"You are given a list of movie titles (movie_titles.txt) and their corresponding user ratings (ratings.txt) in a text file format. Each line in the movie_titles.txt contains a unique movie title. The ratings.txt file contains ratings given by users in the format \\"movie_title, rating\\". Your task is to calculate the average rating for each movie and output the titles of the top 10 highest-rated movies in descending order of their average ratings. If two movies have the same average rating, order them alphabetically. Input - A text file movie_titles.txt containing one movie title per line. - A text file ratings.txt containing ratings information, one entry per line in the format \\"movie_title, rating\\", where rating is an integer between 1 and 5. Output Output the titles of the top 10 highest-rated movies, one per line in descending order of their average ratings. If there are fewer than 10 movies, print all of them. Note: Handle ties by arranging movies with the same average rating in alphabetic order.","solution":"def read_movie_titles(file_path): with open(file_path, \\"r\\") as file: return [line.strip() for line in file.readlines()] def read_movie_ratings(file_path): ratings = {} with open(file_path, \\"r\\") as file: for line in file: movie_title, rating = line.strip().split(\\", \\") rating = int(rating) if movie_title not in ratings: ratings[movie_title] = [] ratings[movie_title].append(rating) return ratings def calculate_average_ratings(ratings): avg_ratings = {} for movie_title, rating_list in ratings.items(): avg_ratings[movie_title] = sum(rating_list) / len(rating_list) return avg_ratings def get_top_10_movies(avg_ratings): sorted_movies = sorted(avg_ratings.items(), key=lambda x: (-x[1], x[0])) top_10_movies = [title for title, _ in sorted_movies[:10]] return top_10_movies def main(): movie_titles = read_movie_titles(\\"movie_titles.txt\\") movie_ratings = read_movie_ratings(\\"ratings.txt\\") avg_ratings = calculate_average_ratings(movie_ratings) top_10_movies = get_top_10_movies(avg_ratings) for movie in top_10_movies: print(movie) if __name__ == \\"__main__\\": main()"},{"question":"A password manager application needs a function to generate secure passwords. The password must follow these rules: 1. The password length should be exactly n characters. 2. It must include at least one lowercase letter, one uppercase letter, one digit, and one special character (!, @, #, , %, ^, &, *). 3. Each character in the password should be randomly selected. Write a Python function `generate_password(n)` that generates a password following the above rules. If it is not possible to generate a password with the specified length (i.e., n < 4), the function should return an empty string. Input - An integer n (1 ≤ n ≤ 100). Output - A single string representing the generated password or an empty string if n < 4. Example Input 8 Output aH6&Kx! Note The actual output will vary as the characters are selected randomly. The provided example illustrates possible output format.","solution":"import random import string def generate_password(n): if n < 4: return \\"\\" # Define possible characters for each category lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits special_chars = \\"!@#%^&*\\" # Ensure each rule is met by including at least one from each category password = [ random.choice(lowercase), random.choice(uppercase), random.choice(digits), random.choice(special_chars) ] # Fill the remaining n-4 characters with random choices from all categories if n > 4: all_chars = lowercase + uppercase + digits + special_chars password.extend(random.choices(all_chars, k=n-4)) # Shuffle to ensure randomness random.shuffle(password) return \'\'.join(password)"},{"question":"Bob has a string `s` composed of lowercase alphabetic characters. Bob wants to find out how many times a given substring appears in the concatenated result of that string after performing k cyclic right shifts. In a cyclic right shift, the last character of the string is moved to the front. For example: - If `s` is \\"abcd\\" and `k` is 1, the string after 1 cyclic right shift will be \\"dabc\\". - If `s` is \\"abcd\\" and `k` is 3, the string after 3 cyclic right shifts will be \\"bcda\\". Help Bob determine the number of occurrences of the given substring in the concatenated result of the strings after performing each of the k cyclic right shifts. Input The first line contains an integer k (1 ≤ k ≤ 10^5) — the number of cyclic right shifts. The second line contains a string s (1 ≤ |s| ≤ 100) — the original string. The third line contains a string t (1 ≤ |t| ≤ 100) — the substring Bob is looking for. Output Print a single integer — the number of times the substring t appears in the concatenated result of the strings after performing each of the k cyclic right shifts. Examples Input: 3 abcd d Output: 3 Input: 4 abac ba Output: 4 Note: In the first example, the strings after each cyclic right shift are: - 1 shift: \\"dabc\\" - 2 shifts: \\"cdab\\" - 3 shifts: \\"bcda\\" The concatenated result is \\"dabccdabbcda\\" and \\"d\\" appears 3 times. In the second example, the strings after each cyclic right shift are: - 1 shift: \\"caba\\" - 2 shifts: \\"acab\\" - 3 shifts: \\"baca\\" - 4 shifts: \\"abac\\" The concatenated result is \\"cabaacabacababac\\" and \\"ba\\" appears 4 times.","solution":"def count_substring_occurrences(k, s, t): Returns the number of times the substring t appears in the concatenated result of the strings after performing each of the k cyclic right shifts on the string s. n = len(s) concatenated_result = (s * 2)[-n:] * k return concatenated_result.count(t)"},{"question":"Samantha is trying to write a program to generate all possible unique permutations of a given string. She decided to write the permutations in lexicographical order. However, since she plans to handle very long strings, she wants to ensure that the program is efficient and does not generate duplicate permutations if the input string contains repeated characters. She seeks your help to accomplish this. Given a string S consisting of lowercase alphabets, your task is to generate all unique permutations of the string in lexicographical order. Input The input contains a single string S. Output Print all unique permutations of the string in lexicographical order, each permutation on a new line. Constraints 1 ≤ |S| ≤ 9 SAMPLE INPUT abc SAMPLE OUTPUT abc acb bac bca cab cba Explanation The possible permutations of the string \\"abc\\" are listed in lexicographical order. Since there are no duplicate characters, all permutations are unique. SAMPLE INPUT 2 aab SAMPLE OUTPUT 2 aab aba baa Explanation The possible permutations of the string \\"aab\\" are listed in lexicographical order.Duplicate permutations are not considered.","solution":"from itertools import permutations def unique_permutations(s): Generates all unique permutations of the string s in lexicographical order. # Generate all permutations perm = set(permutations(s)) # Convert each tuple to a string and sort the list sorted_permutations = sorted(\'\'.join(p) for p in perm) # Print each unique permutation in lexicographical order for permutation in sorted_permutations: print(permutation) # Example usage unique_permutations(\\"abc\\") # From sample inputs unique_permutations(\\"aab\\")"},{"question":"Little bunny Bolo loves prime numbers. Given an integer n, he wants to find the smallest positive integer that is greater than or equal to n and is a prime number. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, the first 5 prime numbers are 2, 3, 5, 7, and 11. Write a program to help Bolo find this smallest prime number. Input The single line contains a positive integer n (1 ≤ n ≤ 10^6). Output Print a single integer that is the smallest prime number greater than or equal to n. Examples Input 14 Output 17 Input 29 Output 29","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_prime_greater_or_equal(n): Finds the smallest prime number greater than or equal to n. while not is_prime(n): n += 1 return n"},{"question":"A company has developed a new algorithm to compress data files. The algorithm works by eliminating redundant sequences but has a known flaw: it struggles to compress files with many unique sequences. Your task is to write a program that can identify the longest sequence in a file that could cause the compression algorithm to perform poorly. Your program should take as input an array of integers, which represents the data file. The array consists of `n` integers, where `1 ≤ n ≤ 10^5`. Your task is to find the length of the longest subsequence such that all elements of the subsequence are unique. Input - The first line contains an integer `n`, the number of integers in the array. - The second line contains `n` integers representing the array itself. Each integer in the array is between 1 and 10^9. Output - Output a single integer — the length of the longest subsequence with all unique elements. Example Input 10 1 2 1 3 4 2 3 5 6 7 Output 6 Explanation The longest subsequence with all unique elements in the array `[1, 2, 1, 3, 4, 2, 3, 5, 6, 7]` is `[1, 3, 4, 2, 5, 6]`, which has length `6`.","solution":"def longest_unique_subsequence_length(n, array): Returns the length of the longest subsequence with all unique elements. longest_length = 0 current_subsequence = set() left = 0 for right in range(n): while array[right] in current_subsequence: current_subsequence.remove(array[left]) left += 1 current_subsequence.add(array[right]) longest_length = max(longest_length, right - left + 1) return longest_length"},{"question":"Alexa is learning about number theory and has come across an interesting problem involving prime numbers. She is trying to find an efficient way to determine whether numbers in a given range are prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Alexa decided to write a program that can handle multiple queries efficiently. For each query, the program should return the count of prime numbers between two given integers, inclusive. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10^5) - the number of queries. The next t lines each contain two integers l and r (1 ≤ l ≤ r ≤ 10^6) - the range for each query. Output For each query, output a single integer - the count of prime numbers between l and r, inclusive. Example Input 3 1 10 11 19 20 30 Output 4 4 2 Note - In the first query, the prime numbers between 1 and 10 are [2, 3, 5, 7]. - In the second query, the prime numbers between 11 and 19 are [11, 13, 17, 19]. - In the third query, the prime numbers between 20 and 30 are [23, 29].","solution":"def count_primes_in_range(l, r, prime_sieve, prime_counts): Returns the count of prime numbers between l and r, inclusive. prime_sieve: list of booleans where prime_sieve[i] is True if i is a prime number prime_counts: list where prime_counts[i] is the number of prime numbers <= i return prime_counts[r] - prime_counts[l - 1] def preprocess_primes(limit=1000000): Preprocess primes using the Sieve of Eratosthenes up to the given limit. Returns a boolean list indicating prime status and a list of prime counts. sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False prime_counts = [0] * (limit + 1) for i in range(1, limit + 1): prime_counts[i] = prime_counts[i - 1] + (1 if sieve[i] else 0) return sieve, prime_counts def process_queries(queries, prime_sieve, prime_counts): Processes a list of queries and returns the results. results = [] for l, r in queries: results.append(count_primes_in_range(l, r, prime_sieve, prime_counts)) return results"},{"question":"String Permutation and Substring Check Problem Statement You are given two strings S and T. Your task is to determine if a permutation of string S exists that is a substring of string T. Input * S * T The input consists of two lines: 1. The first line contains the string S. 2. The second line contains the string T. Constraints * The length of string S (denoted as |S|) and the length of string T (denoted as |T|) satisfy 1 ≤ |S| ≤ |T| ≤ 1000. * Both strings S and T consist of lowercase English letters only. Output Output `True` if a permutation of string S exists as a substring of string T, otherwise output `False`. Sample Input 1 abc cbabadcbbabbcbabaabccbabc Sample Output 1 True Sample Input 2 hello world Sample Output 2 False Example Input abc cbabadcbbabbcbabaabccbabc Output True","solution":"def check_permutation_in_substring(S, T): Determines if a permutation of S exists as a substring of T. from collections import Counter len_s = len(S) counter_s = Counter(S) for i in range(len(T) - len_s + 1): substring = T[i:i+len_s] if Counter(substring) == counter_s: return True return False"},{"question":"You are given a grid representing a standard Tic-Tac-Toe game state. The grid is a 3x3 matrix where each cell is either \'X\', \'O\', or \'.\' (indicating an empty cell). Your task is to determine the current state of the game. The possible states are: \\"X wins\\", \\"O wins\\", \\"Draw\\", or \\"Game still in progress\\". The winner of the game is the player who has three of their symbols in a horizontal, vertical, or diagonal row. A draw occurs when all cells are filled, and there is no winner. The game is still in progress if there are one or more empty cells and no winner yet. Input The input consists of exactly 3 lines, each containing 3 characters (either \'X\', \'O\' or \'.\') with no whitespaces. This describes the current state of the Tic-Tac-Toe game. Output Output a single line containing one of \\"X wins\\", \\"O wins\\", \\"Draw\\", or \\"Game still in progress\\". Example Input XOX XXO O.O Output Game still in progress Input OOX XXO XOX Output X wins","solution":"def tic_tac_toe_state(grid): def check_winner(char): for i in range(3): if all(grid[i][j] == char for j in range(3)): # Check rows return True if all(grid[j][i] == char for j in range(3)): # Check columns return True if all(grid[i][i] == char for i in range(3)): # Check main diagonal return True if all(grid[i][2 - i] == char for i in range(3)): # Check anti-diagonal return True return False if check_winner(\'X\'): return \\"X wins\\" if check_winner(\'O\'): return \\"O wins\\" if any(grid[i][j] == \'.\' for i in range(3) for j in range(3)): # Check for any empty cells return \\"Game still in progress\\" return \\"Draw\\""},{"question":"Peter loves to draw shapes, and he wants to draw a right-angled triangle using stars (\'*\'). He wants his triangle to be aligned with rows and columns in such a way that the right angle is at the bottom-left corner. Write a program that takes an integer input `h` which represents the height of the triangle and prints the right-angled triangle of that height. Input A single integer `h` (1 ≤ h ≤ 100) — the height of the triangle. Output Print `h` lines where the i-th line (1 ≤ i ≤ h) contains exactly i stars (\'*\'). Examples Input 3 Output * ** *** Input 5 Output * ** *** **** *****","solution":"def draw_right_angled_triangle(h): Draws a right-angled triangle of height `h` using stars (\'*\'). Parameters: h (int): The height of the right-angled triangle. Returns: str: A string representing the right-angled triangle. return \'n\'.join(\'*\' * i for i in range(1, h + 1))"},{"question":"You are given a grid of letters with rows and columns of specified dimensions. Develop a program that finds and prints the longest sequence of identical letters that can be formed by moving either horizontally, vertically, or diagonally. Input The input data is given in the following format. m n grid[0] grid[1] :: grid[m-1] Where: - `m` is the number of rows (1 ≤ m ≤ 100). - `n` is the number of columns (1 ≤ n ≤ 100). - Each `grid[i]` is a string of length `n` representing the ith row of the grid, and each character is an uppercase letter (A-Z). Output Print the length of the longest sequence of identical letters that can be formed by moving either horizontally, vertically, or diagonally. Examples Input 3 3 AAA BAC DAA Output 3 Input 4 5 ABCDE KLMNO ABCDE KLMNO Output 1","solution":"def longest_sequence(m, n, grid): def length_of_sequence(x, y, dx, dy): count = 0 current_char = grid[x][y] while 0 <= x < m and 0 <= y < n and grid[x][y] == current_char: count += 1 x += dx y += dy return count max_length = 0 directions = [(1, 0), (0, 1), (1, 1), (1, -1)] # down, right, down-right, down-left for i in range(m): for j in range(n): for dx, dy in directions: max_length = max(max_length, length_of_sequence(i, j, dx, dy)) return max_length"},{"question":"Vlad loves collecting rare stamps and has recently acquired a collection of n stamps, each with a unique beauty value. Vlad can display exactly k stamps in his album such that the sum of their beauty values is maximized. However, to ensure the display is beautiful, the k stamps chosen must form a continuous subsequence in his collection. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2000) — the total number of stamps Vlad has and the number of stamps he wants to display. The next line contains n integers bi (1 ≤ bi ≤ 1000) — the beauty values of the stamps. Output Print a single number — the maximum sum of beauty values of any continuous subsequence of k stamps. Examples Input 5 2 1 3 2 5 4 Output 9 Input 6 3 4 1 3 2 6 5 Output 13 Input 4 4 5 2 1 6 Output 14","solution":"def max_beauty(n, k, beauties): max_sum = sum(beauties[:k]) current_sum = max_sum for i in range(k, n): current_sum += beauties[i] - beauties[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum # Example usage: # n, k = 5, 2 # beauties = [1, 3, 2, 5, 4] # print(max_beauty(n, k, beauties)) # Output should be 9"},{"question":"You have a sequence of n integers a1, a2, ..., an. You are allowed to perform any number of the following operation: choose two adjacent elements of the sequence and replace them with their sum. For example: if the sequence is [1, 2, 3], you can replace a1 and a2 with their sum to get the sequence [3, 3], or replace a2 and a3 to get the sequence [1, 5]. Your task is to determine the maximum possible value of the final single element after performing the operation any number of times. Input The first line of input contains an integer n (1 ≤ n ≤ 105), the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) - the elements of the sequence. Output Output a single integer - the maximum possible value of the final element. Examples Input 3 1 2 3 Output 6 Input 2 10 20 Output 30","solution":"def max_final_element(n, elements): Returns the maximum possible value of the final element after performing the described operation any number of times on the list of elements. Parameters: n (int): Number of elements in the sequence elements (list of int): The sequence of integers Returns: int: The maximum possible value of the final single element return sum(elements)"},{"question":"Given an array of integers `nums` and a number `k`, you need to perform `k` splitting operations on the array. A splitting operation consists of splitting any number `num` in the array into two parts `x` and `y` such that `x + y = num` and `x`, `y` > 0. After performing `k` such operations, find the minimum possible maximum value in the array. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers nums[1], nums[2], ..., nums[n] (1 ≤ nums[i] ≤ 10^9). The third line contains a single integer k (0 ≤ k ≤ 10^5) — the number of splitting operations. Output Print one integer — the minimum possible maximum value in the array after `k` splitting operations. Example Input 5 10 20 7 14 8 4 Output 10 Note In the first example, one possible sequence of operations is as follows: - Split 20 into 10 and 10. - Split 14 into 7 and 7. - The array becomes [10, 10, 7, 7, 10, 8]. - The maximum value in this array is 10, which is the minimum possible maximum value after 4 operations.","solution":"import heapq def min_max_after_splitting(nums, k): max_heap = [-num for num in nums] heapq.heapify(max_heap) for _ in range(k): max_value = -heapq.heappop(max_heap) x = max_value // 2 y = max_value - x heapq.heappush(max_heap, -x) heapq.heappush(max_heap, -y) return -max_heap[0]"},{"question":"Masha loves sequences of integers. She finds them very intriguing and often spends time creating problems for her friends to solve. One day, she came up with a unique problem: Given a sequence of integers, determine the length of the longest contiguous subarray that has a sum equal to zero. A contiguous subarray is a part of the array that consists of some consecutive elements from the array, and its sum is the total obtained by adding all these elements. Input The first line contains an integer n (1 ≤ n ≤ 105) - the size of the sequence. The second line contains n integers a1, a2, ..., an (-104 ≤ ai ≤ 104) - the elements of the sequence. Output Print a single integer - the length of the longest contiguous subarray with a sum equal to zero. If there is no such subarray, print 0. Examples Input 5 3 -1 -4 1 4 Output 4 Input 6 1 2 -3 1 2 -3 Output 6 Input 3 1 2 3 Output 0 Note In the first example, the subarray [-1, -4, 1, 4] has a sum equal to 0 and is the longest such subarray with a length of 4. In the second example, the entire array has a sum equal to 0 and is the longest such subarray with a length of 6. In the third example, there is no subarray with a sum equal to 0, so the output is 0.","solution":"def longest_zero_sum_subarray(arr): Returns the length of the longest contiguous subarray with sum equal to 0. n = len(arr) prefix_sums = {} prefix_sum = 0 max_length = 0 for i in range(n): prefix_sum += arr[i] if prefix_sum == 0: max_length = i + 1 if prefix_sum in prefix_sums: max_length = max(max_length, i - prefix_sums[prefix_sum]) else: prefix_sums[prefix_sum] = i return max_length"},{"question":"**Problem Statement: Finding Anagrammatic Pairs** An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, the words \\"listen\\" and \\"silent\\" are anagrams of each other. In this question, our goal is to find the number of anagrammatic pairs of substrings in a given string. Write a function that takes a string and returns the count of all anagrammatic pairs of substrings. A pair of substrings (i.e., substrings at different positions in the string but having the same characters with the same frequency) are considered anagrammatic. Input The input consists of a single string `s` of length n (1 ≤ n ≤ 50) containing lowercase English letters only. Output Output a single integer, the number of anagrammatic pairs of substrings in the given string. Examples Input abba Output 4 Input ifailuhkqq Output 3 Explanation of the examples: In the first example, the 4 anagrammatic pairs are: 1. (\\"a\\", \\"a\\") 2. (\\"ab\\", \\"ba\\") 3. (\\"b\\", \\"b\\") 4. (\\"abb\\", \\"bba\\") In the second example, the 3 anagrammatic pairs are: 1. (\\"i\\", \\"i\\") 2. (\\"q\\", \\"q\\") 3. (\\"ifa\\", \\"afi\\") Note: Each anagrammatic pair is counted only once.","solution":"from collections import defaultdict def count_anagrammatic_pairs(s): Returns the count of all anagrammatic pairs of substrings in the given string s. substr_freq = defaultdict(int) string_length = len(s) # Generate all possible substrings for i in range(string_length): for j in range(i + 1, string_length + 1): substr = \'\'.join(sorted(s[i:j])) substr_freq[substr] += 1 # Count all anagrammatic pairs anagrammatic_pairs_count = 0 for count in substr_freq.values(): anagrammatic_pairs_count += count * (count - 1) // 2 return anagrammatic_pairs_count"},{"question":"A company is organizing a round-robin tournament with N players, where each player competes with every other player exactly once. The company wants to find the player who won the highest number of matches. If there are multiple such players, the player who appeared first among them in the input should be chosen. You are given a matrix results of size N x N where results[i][j] is \'W\' if the player i defeated player j and \'L\' otherwise. There are no ties in the tournament. Constraints: * 2 ≤ N ≤ 100 * results[i][j] is either \'W\' or \'L\' * results[i][i] does not exist since a player cannot compete against themselves. Input: Input is given from Standard Input in the following format: ``` N results[0][0] results[0][1] ... results[0][N-1] results[1][0] results[1][1] ... results[1][N-1] ... results[N-1][0] results[N-1][1] ... results[N-1][N-1] ``` Output: Print the 0-indexed position of the player with the highest number of wins. If there are multiple such players, print the smallest index among them. Examples: Input: ``` 3 W L L L W L W W W ``` Output: ``` 2 ``` Input: ``` 4 L W W L L L L W W W L L W L W W ``` Output: ``` 3 ``` Input: ``` 2 L W W L ``` Output: ``` 0 ``` Input: ``` 3 L L W W W L L W L ``` Output: ``` 1 ``` Input: ``` 4 L W W W L L L L L L L L L L L L ``` Output: ``` 0 ```","solution":"def find_top_player(results): Finds the player with the highest number of wins. Arguments: results -- A list of lists representing the results matrix. Returns: Index of the player with the highest number of wins. N = len(results) win_counts = [0] * N for i in range(N): for j in range(N): if results[i][j] == \'W\': win_counts[i] += 1 max_wins = max(win_counts) for i in range(N): if win_counts[i] == max_wins: return i"},{"question":"You are given a number, and you need to determine whether it is a \\"zigzag number.\\" A zigzag number is defined as a number where each digit is either 1 greater than, 1 less than, or equal to the digit to its immediate left. For example, 1232321, 4556, and 78765 are zigzag numbers, while 1357 and 4219 are not. The task is to determine if the given number is a zigzag number. Input The input consists of a single integer number n (1 ≤ n < 10^18). Output Output \\"YES\\" if the number is a zigzag number, otherwise output \\"NO\\". Examples Input 121212 Output YES Input 1423 Output NO Input 8 Output YES Note For the first example, the provided number is \\"121212\\" where each digit is alternating between 1 and 2, making it a zigzag number. For the second example, the number \\"1423\\" does not fulfill the condition as the difference between 2 and 4 is not 1. For the third example, the number \\"8\\" is trivially a zigzag number as there are no other digits to compare with.","solution":"def is_zigzag_number(n): Determines whether a number is a zigzag number. Parameters: n (int): The number to check. Returns: str: \'YES\' if the number is a zigzag number, \'NO\' otherwise. s = str(n) for i in range(1, len(s)): if abs(int(s[i]) - int(s[i - 1])) > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid-based board with some cells blocked and others free. Starting at the top-left corner of the grid, you need to find the total number of unique paths to reach the bottom-right corner of the grid. You can only move either down or right at any point in time. Write a function `uniquePathsWithObstacles(obstacleGrid)` that takes a list of lists `obstacleGrid` as an input, where `obstacleGrid[i][j] == 1` represents a blocked cell and `obstacleGrid[i][j] == 0` represents a free cell. This function should return the number of unique paths from the start to the destination. Input - A list of N lists, where each sublist has M integers (either 0 or 1). - 1 ≤ N, M ≤ 100. Output - An integer representing the number of unique paths. Example ```python def uniquePathsWithObstacles(obstacleGrid): # Your code here # Example call obstacleGrid = [ [0,0,0], [0,1,0], [0,0,0] ] print(uniquePathsWithObstacles(obstacleGrid)) # Output: 2 ``` Explanation In the provided example, there are two unique paths from the top-left to the bottom-right. One path goes right, down, down, right and the other path goes down, right, right, down. The obstacle in the middle prevents any other paths.","solution":"def uniquePathsWithObstacles(obstacleGrid): Calculates the number of unique paths from top-left to bottom-right of a grid with obstacles. :param obstacleGrid: List[List[int]] - 2D grid with obstacles marked as 1 and free cells marked as 0. :return: int - Number of unique paths from start to destination. if not obstacleGrid or obstacleGrid[0][0] == 1: return 0 m, n = len(obstacleGrid), len(obstacleGrid[0]) # Create a 2D dp array with the same dimensions as obstacleGrid dp = [[0] * n for _ in range(m)] # Starting point has 1 way to be reached if it\'s not blocked dp[0][0] = 1 # Fill the values row by row for i in range(m): for j in range(n): if obstacleGrid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] # Example call obstacleGrid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(uniquePathsWithObstacles(obstacleGrid)) # Output: 2"},{"question":"You are given an array of integers and multiple queries. Each query consists of a pair of indices, and the task is to compute the sum of the elements between these indices (inclusive). Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, …, an (1 ≤ ai ≤ 10000) — the elements of the array. The third line contains an integer q (1 ≤ q ≤ 50000) — the number of queries. The next q lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ n) — the indices for the queries. Output Print q integers. For each query, print the sum of the elements from index li to ri (inclusive). Print each sum on a new line. Example Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 6 9 15 Note For the first query in the example, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6.","solution":"def preprocess_prefix_sums(arr): Preprocesses the array to compute the prefix sums for efficient range-sum queries. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + arr[i] return prefix_sums def range_sum(prefix_sums, l, r): Computes the sum of elements in the range [l, r] using the prefix sums array. return prefix_sums[r] - prefix_sums[l - 1] def process_queries(n, arr, queries): Processes multiple queries for range sums. prefix_sums = preprocess_prefix_sums(arr) result = [] for l, r in queries: result.append(range_sum(prefix_sums, l, r)) return result # Example usage: n = 5 arr = [1, 2, 3, 4, 5] queries = [(1, 3), (2, 4), (1, 5)] print(process_queries(n, arr, queries)) # Output: [6, 9, 15]"},{"question":"Mike is preparing for a coding competition and decided to create a training problem for himself and his friends. He designed the following problem: Given a connected undirected graph, find the smallest integer k such that by removing k edges, you end up with exactly two connected components. Mike\'s graph is represented with n vertices and m edges. Each edge in the graph has a non-negative integer weight. Efficiently find the minimum value of k. Input The first line contains two integers n (2 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 200,000) — the number of vertices and edges in the graph, respectively. Each of the following m lines contains three integers u, v (1 ≤ u, v ≤ n, u ≠ v), and w (0 ≤ w ≤ 10^6) — the endpoints of the edge and its weight. Output Print a single integer — the minimum number of edges k that needs to be removed to split the graph into exactly two connected components. Examples Input 4 4 1 2 1 2 3 2 3 4 1 4 1 3 Output 1 Input 5 6 1 2 5 2 3 3 3 4 4 4 5 2 5 1 6 2 5 1 Output 1 Input 3 2 1 2 1 2 3 2 Output 1","solution":"from heapq import heapify, heappop from collections import defaultdict def min_edges_to_remove(n, m, edges): Return the minimum number of edges to remove to split the graph into two connected components. :param n: Number of vertices :param m: Number of edges :param edges: List of edges (u, v, w) :return: Minimum number of edges to remove # Function to find the representative of a node def find_parent(parent, u): if parent[u] == u: return u parent[u] = find_parent(parent, parent[u]) return parent[u] # Function to unite two sets def union(parent, rank, u, v): root_u = find_parent(parent, u) root_v = find_parent(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 # Initialize parent and rank arrays parent = list(range(n + 1)) rank = [0] * (n + 1) # Sort the edges based on their weights edges.sort(key=lambda x: x[2]) # Kruskal\'s Algorithm to use Minimum Spanning Tree technique mst_edges = [] for u, v, w in edges: if find_parent(parent, u) != find_parent(parent, v): union(parent, rank, u, v) mst_edges.append((u, v, w)) # The maximum weight edge in the MST is the answer if len(mst_edges) == 0: return 0 return 1"},{"question":"You are given an integer array A of size N. You need to determine if there exists a pair of indices (i, j) such that A[i] + A[j] is equal to a given target sum S (where i ≠ j). If such a pair exists, print \\"YES\\"; otherwise, print \\"NO\\". Input Format: The first line contains two integers N and S denoting the size of the array and the target sum, respectively. The next line contains N space-separated integers denoting the elements of the array. Output Format: Print \\"YES\\" if there exists a pair of indices with the target sum, otherwise print \\"NO\\". Constraints: 1 ≤ N ≤ 10^3 1 ≤ A[i] ≤ 10^3 1 ≤ S ≤ 2*10^3 SAMPLE INPUT 5 9 1 2 3 4 5 SAMPLE OUTPUT YES Explanation The elements of the array are [1, 2, 3, 4, 5]. The sum of indices (0, 3) (1 + 4) or (1, 2) (2 + 3) is equal to the given target sum 9. Therefore, the output is \\"YES\\".","solution":"def has_pair_with_sum(arr, target_sum): Determines if there exists a pair of indices (i, j) such that arr[i] + arr[j] == target_sum seen = set() for num in arr: if target_sum - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"There is a video game where the player must navigate a character through a rectangular grid representing a maze. Each cell in the grid contains either a \'.\' indicating an empty space the character can move into, a \'#\' indicating a wall the character cannot pass through, an \'S\' indicating the character\'s starting position, and \'E\' indicating the location of the exit. The character can move up, down, left, or right but cannot move outside the bounds of the grid or through walls. The objective is to help the character reach the exit from the starting position. Write a program to determine if the character can reach the exit. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), specifying the dimensions of the grid. The next n lines each contain m characters, representing the maze. It is guaranteed that there is exactly one \'S\' and one \'E\' in the maze. Output Output \\"YES\\" (without quotes), if the character can reach the exit. If not, output \\"NO\\" (without quotes). Examples Input 5 5 S..#E #.#.. #.#.# #...# # Output YES Input 3 4 S.#. ..#E Output NO Note In the first example, the character can navigate around the walls to reach the exit. In the second example, the character is unable to reach the exit because the path is blocked by walls.","solution":"def can_reach_exit(n, m, grid): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right # Find the starting position start = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) break if start: break # BFS to find the shortest path to the exit queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if grid[x][y] == \'E\': return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Background Sarah, an avid book lover, has recently started a book swap club where members can exchange books with each other. Each member brings a subset of their book collection to each meeting, hoping to swap their books with others. Over time, Sarah observed a pattern in how books are swapped among the members and decided to write a program to optimize the swapping process. Problem You will be given a list of members and the books they bring to the swap meeting. Your task is to find the maximum number of unique books that can be collected by a single member after performing the optimal swaps. Each book is represented by its unique ID (a positive integer). A member can only swap their books for books brought by others at the meeting. There is no limit to the number of swaps a single member can make during one meeting. For example, consider a meeting where there are three members bringing books with IDs as follows: - Member 1: [1, 3, 5] - Member 2: [2, 4] - Member 3: [3, 6] In this setup, if members swap intelligently, a member can end up with all six unique books. Input The input consists of: - An integer N (1 ≤ N ≤ 100) representing the number of members. - N subsequent lines, each containing the list of book IDs (positive integers) brought by each member. - Each list of books includes at least one book and at most 50 books, and no book ID exceeds 10^9. Output Output the maximum number of unique books that can be collected by a single member after optimally performing swaps. Examples Input 3 1 3 5 2 4 3 6 Output 6 Input 4 1 2 2 3 4 4 5 6 6 7 Output 7","solution":"def max_unique_books(members_books): Given a list of lists where each inner list represents the books brought by a member, this function returns the maximum number of unique books that can be collected by a single member after optimal swaps. unique_books = set() for books in members_books: unique_books.update(books) return len(unique_books)"},{"question":"Miranda is the logistics manager for the Byteforces Annual Gala, an event that involves allocating tables between groups of attendees. She wants to make sure that each table is properly balanced in terms of the parity (odd or even) of the attendees\' favorite numbers. She believes that balanced tables will enhance the interaction and enjoyment of the attendees. In this problem, you are given a list of attendees, each with their favorite number. A table is considered balanced if it contains an equal number of attendees with odd favorite numbers and even favorite numbers. Miranda asks you to determine the maximum number of balanced tables she can create. Each table must have exactly two attendees. Input In the first line of the input is an integer n (2 ≤ n ≤ 100,000) — the number of attendees. The second line contains n integers separated by spaces, denoting the favorite numbers of the attendees. Each favorite number is a positive integer not exceeding 1,000,000,000. Output Output a single integer — the maximum number of balanced tables that Miranda can create. Examples Input 6 1 2 3 4 5 6 Output 3 Input 5 1 3 5 7 9 Output 0 Note In the first sample, we can form three balanced tables: (1, 2), (3, 4), and (5, 6). In the second sample, as there are no even numbers, no balanced tables can be formed.","solution":"def max_balanced_tables(num_attendees, favorite_numbers): Returns the maximum number of balanced tables that can be created. :param num_attendees: int - The number of attendees :param favorite_numbers: list - The list of favorite numbers :return: int - The maximum number of balanced tables odd_count = 0 even_count = 0 for num in favorite_numbers: if num % 2 == 0: even_count += 1 else: odd_count += 1 return min(odd_count, even_count)"},{"question":"Polycarp recently encountered a fascinating problem while browsing through his music library. He found out that some of his song files had extra trailing zeros or leading zeros in the minutes and seconds of the duration but essentially represented the same duration. Polycarp wants to identify unique song durations while ignoring these unnecessary zeros. Formally, a song duration will be given as \\"mm:ss\\", where \\"mm\\" is the minutes (00 to 99) and \\"ss\\" is the seconds (00 to 59). Leading zeros in the minutes part and trailing zeros in the seconds part should be ignored when comparing durations. For example, \\"01:05\\" and \\"1:5\\" represent the same duration, and \\"03:00\\" and \\"3:0\\" also represent the same duration. However, \\"3:00\\" and \\"3:0\\" should also be considered the same. Polycarp has a list of such song durations and wants to group the equivalent durations together. Input The first line of the input contains a positive integer n (1 ≤ n ≤ 20,000) - the number of song durations in Polycarp\'s library. The following n lines contain the song durations, one per line. It is guaranteed that the durations are correctly formatted. All the given lines are distinct. Output Print the number of unique durations and then in the next lines print a description of each unique duration. In the i-th line, print the number of durations that are equivalent and all the corresponding durations separated by a space. It is allowed to print the unique durations and the corresponding equivalent durations in any order. Print the durations exactly as they were given in the input. Each duration should belong to exactly one group. Examples Input 6 01:05 1:5 03:00 3:0 02:30 2:30 Output 3 2 01:05 1:5 2 03:00 3:0 2 02:30 2:30","solution":"def group_durations(n, durations): from collections import defaultdict # Function to normalize a given duration def normalize(duration): mm, ss = duration.split(\':\') mm = str(int(mm)) # Remove leading zeros ss = str(int(ss)) # Remove leading zeros return f\\"{mm}:{ss}\\" # Dictionary to hold normalized duration keys mapping to actual input representations dur_dict = defaultdict(list) # Populate the dictionary with normalized keys for duration in durations: norm_dur = normalize(duration) dur_dict[norm_dur].append(duration) # Preparing the output output = [] output.append(str(len(dur_dict))) for dur_list in dur_dict.values(): output.append(f\\"{len(dur_list)} \\" + \\" \\".join(dur_list)) return output # Example usage: # n = 6 # durations = [\\"01:05\\", \\"1:5\\", \\"03:00\\", \\"3:0\\", \\"02:30\\", \\"2:30\\"] # print(group_durations(n, durations))"},{"question":"Given a string s of length n, you need to manipulate the string to contain only characters \'0\' and \'1\'. You are allowed to perform the following operation any number of times: - Choose any character at index i (1 le i le n) and flip it (i.e., change \'0\' to \'1\' or \'1\' to \'0\'). Your goal is to make sure that for any two consecutive characters in the resulting string, there is at least one \'1\'. In other words, the transformed string should not contain the substring \\"00\\". Return the minimum number of operations required to achieve the goal. # Constraints: - 1 le n le 100,000 - s[i] is any character from \'0\' to \'9\'. # Input Format: Input is given from Standard Input in the following format: ``` n s ``` # Output Format: Print the minimum number of operations required to transform the given string into a valid string. # Examples: Input 1: 5 01100 Output 1: 1 Input 2: 6 000100 Output 2: 2 Input 3: 4 1111 Output 3: 0 # Explanation: **Example 1:** Flip the first \'0\' to \'1\', resulting in \\"11100\\". **Example 2:** Flip the first and second \'0\'s to \'1\', resulting in \\"111100\\". **Example 3:** The string is already valid, so no operations are required.","solution":"def min_operations_to_avoid_double_zeros(n, s): if n == 1: return 0 if s == \'1\' else 1 operations = 0 i = 0 while i < n - 1: if s[i] == \'0\' and s[i + 1] == \'0\': operations += 1 i += 2 # Skip the next character as we have handled this pair else: i += 1 return operations"},{"question":"Dr. Crypton, a renowned mathematician, is working on a new encryption algorithm that involves manipulating strings. He has discovered that a specific type of permutation of the characters in a string has interesting cryptographic properties. These permutations are called \\"special permutations\\" and are defined as follows: a permutation of a string is special if no character remains in its original position. Dr. Crypton has asked for your help to compute the number of special permutations for various strings. Given a set of strings, your task is to determine how many special permutations exist for each string. Input You are given a collection of strings on distinct lines. The first line contains a number (let’s call it m) that indicates how many strings there are. This is followed by m lines, each containing a string of uppercase letters (A-Z) with a length less than or equal to 12. Output The output should consist of m lines. The i-th line is the number of special permutations for the string described in the i-th line. The output will fit inside a 64-bit integer. Example Input: 3 AB ABC ABCD Output: 1 2 9","solution":"import math def count_derangements(n): Calculate the number of derangements (permutations where no element remains in its original position) for a given n (length of the string). if n == 0: return 1 elif n == 1: return 0 elif n == 2: return 1 der = [0] * (n + 1) der[0] = 1 der[1] = 0 der[2] = 1 for i in range(3, n + 1): der[i] = (i - 1) * (der[i - 1] + der[i - 2]) return der[n] def special_permutations(strings): For each string in the list `strings`, calculate the number of special permutations. results = [] for string in strings: n = len(string) results.append(count_derangements(n)) return results def process_input(input_lines): Process input to extract the number of strings and the strings themselves. m = int(input_lines[0]) strings = input_lines[1:m + 1] return strings def compute_special_permutations(input_lines): Process the input lines and compute the special permutations count for each string. strings = process_input(input_lines) return special_permutations(strings)"},{"question":"You have been assigned the task of creating a stock ticker that processes stock trades in real-time. The system should be able to handle a sequence of stock trades and provide the moving average stock price over a specified window size. Implement a function that provides this functionality. Write a function `moving_average` that takes two parameters: 1. `trades`: a list of tuples where each tuple contains a string (stock symbol) and an integer (trade price). 2. `window_size`: an integer representing the size of the moving window for which the average price needs to be calculated. Your function should process each trade and output the moving average price for each stock symbol whenever a new trade for that stock is processed. If the number of trades for a stock is less than the window size, calculate the average using all available trades. Input: - The input `trades` is a list where each element is a tuple containing two values (stock symbol as string, trade price as integer). - The `window_size` is an integer. Output: - Your function should output a list of strings where each string represents a stock symbol followed by the latest moving average price rounded to two decimal places. Constraints: - 1 ≤ len(trades) ≤ 1000 - 1 ≤ window_size ≤ 100 - The trade price for each stock is between 1 and 1000 inclusive. SAMPLE INPUT trades = [(\\"AAPL\\", 250), (\\"AAPL\\", 260), (\\"AAPL\\", 270), (\\"GOOG\\", 600), (\\"GOOG\\", 590), (\\"AAPL\\", 280)] window_size = 3 SAMPLE OUTPUT [\\"AAPL 250.00\\", \\"AAPL 255.00\\", \\"AAPL 260.00\\", \\"GOOG 600.00\\", \\"GOOG 595.00\\", \\"AAPL 270.00\\"]","solution":"from collections import defaultdict, deque def moving_average(trades, window_size): This function processes a sequence of stock trades and provides the moving average stock price over the specified window size. Parameters: - trades: list of tuples, where each tuple contains a string (stock symbol) and an integer (trade price) - window_size: integer, the size of the moving window for which the average price needs to be calculated Output: - list of strings, where each string represents a stock symbol followed by the latest moving average price rounded to two decimal places output = [] trade_history = defaultdict(deque) trade_sums = defaultdict(int) for symbol, price in trades: if len(trade_history[symbol]) == window_size: trade_sums[symbol] -= trade_history[symbol].popleft() trade_history[symbol].append(price) trade_sums[symbol] += price average = trade_sums[symbol] / len(trade_history[symbol]) output.append(f\\"{symbol} {average:.2f}\\") return output"},{"question":"Given a collection of points in a 2D plane, a subset of these points form a convex polygon. Your task is to write a function to determine if a given point is inside the convex polygon. Note: - The input will contain multiple datasets. - For each dataset, the first line contains an integer N (3 ≤ N ≤ 100) representing the number of vertices of the polygon. - The next N lines each contain two integers, x and y (-10000 ≤ x, y ≤ 10000), representing the coordinates of each vertex of the polygon in clockwise or counter-clockwise order. - The last line of the dataset contains two integers, x and y, representing the coordinates of the point to check. Output: - For each dataset, print \\"INSIDE\\" if the point is inside the polygon, or \\"OUTSIDE\\" if the point is outside the polygon or on the boundary. Example: Input: 2 4 0 0 4 0 4 4 0 4 2 2 3 1 1 2 5 6 2 3 3 Output: INSIDE OUTSIDE Your task is to write a function that processes the input according to the problem statement and outputs the correct result for each dataset.","solution":"def is_point_inside_polygon(n, polygon, point): def cross_product_sign(p1, p2, p3): Returns positive if p3 is to the left of the line formed by p1 and p2, negative if to the right, and 0 if p3 is on the line. return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0]) def is_convex(poly): Returns True if the polygon vertices are in clockwise or counter-clockwise order. pos = neg = False for i in range(len(poly)): p1, p2, p3 = poly[i], poly[(i + 1) % len(poly)], poly[(i + 2) % len(poly)] sign = cross_product_sign(p1, p2, p3) if sign > 0: pos = True elif sign < 0: neg = True if pos and neg: return False return True def check_point(p, poly): Returns whether the point is inside the polygon. for i in range(len(poly)): p1, p2 = poly[i], poly[(i + 1) % len(poly)] if cross_product_sign(p1, p2, p) <= 0: return \\"OUTSIDE\\" return \\"INSIDE\\" if not is_convex(polygon): return \\"OUTSIDE\\" return check_point(point, polygon) def process_input(datasets): results = [] index = 0 while index < len(datasets): n = datasets[index] index += 1 polygon = [] for _ in range(n): polygon.append(datasets[index]) index += 1 point = datasets[index] index += 1 results.append(is_point_inside_polygon(n, polygon, point)) return results"},{"question":"In a warehouse, goods are stored in a grid of shelves with n rows and m columns. Each shelf can be occupied by a single item or be left empty. For inventory purposes, each item is identified by a unique code. You need to determine if there is any duplicate item code in the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and columns in the warehouse grid. Each of the next n lines contains m integers representing the item codes. An item code of 0 indicates that the shelf is empty. All item codes are within the range 0 to 10^9. Output Print \\"YES\\" if there is any duplicate item code (excluding the empty shelves), otherwise print \\"NO\\". Example Input 3 3 10 20 30 40 20 50 60 70 80 Output YES Input 2 2 1 2 3 4 Output NO Note In the first example, the item code 20 appears twice, so the output is \\"YES\\". In the second example, all item codes are unique, hence the output is \\"NO\\".","solution":"def has_duplicate_item(n, m, grid): Determines if there is any duplicate item code in the grid, excluding empty shelves (item code 0). Args: n (int): number of rows in the warehouse grid m (int): number of columns in the warehouse grid grid (list of list of int): the warehouse grid with item codes and 0 for empty shelves Returns: str: \\"YES\\" if there is any duplicate item code, otherwise \\"NO\\" item_seen = set() for row in grid: for item in row: if item != 0: if item in item_seen: return \\"YES\\" item_seen.add(item) return \\"NO\\""},{"question":"Given an integer `n`, determine the number of contiguous subarrays that have an odd sum. Constraints * 1 ≤ n ≤ 10^5 * 1 ≤ array[i] ≤ 10^9 Input * An integer `n` representing the number of elements in the array. * An array of `n` integers. Output * Output a single integer, the number of contiguous subarrays with an odd sum. Examples Input 5 1 2 3 4 5 Output 9 Input 3 2 4 6 Output 0","solution":"def number_of_odd_sum_subarrays(n, array): Determines the number of contiguous subarrays that have an odd sum. Parameters: n (int): The number of elements in the array. array (list): The array of integers. Returns: int: The number of contiguous subarrays with an odd sum. odd_count = 0 # To count subarrays with odd sums even_count = 1 # To count subarrays with even sums, starts with 1 as the initial prefix sum is 0 prefix_sum = 0 odd_subarrays = 0 for num in array: prefix_sum += num if prefix_sum % 2 == 0: odd_subarrays += odd_count even_count += 1 else: odd_subarrays += even_count odd_count += 1 return odd_subarrays"},{"question":"You are given a grid of size `n x m` consisting of cells, where each cell is either empty (represented by `.`) or contains an obstacle (represented by `#`). You are also given the initial position of a player in the grid and a series of commands. The player can perform the following commands: - `U`: Move up - `D`: Move down - `L`: Move left - `R`: Move right The player will move in the grid according to the sequence of commands. If the player\'s move would take them into an obstacle or outside the grid, the player ignores that move and remains in their current position. Your task is to determine the final position of the player after executing all the commands. Input The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 10000) – the number of rows and columns of the grid, and the number of commands, respectively. The next `n` lines contain `m` characters each, representing the grid. Each character is either `.` (an empty cell) or `#` (an obstacle). The next line contains two integers `x` and `y` (0 ≤ x < n, 0 ≤ y < m) – the starting position of the player. It is guaranteed that the starting position is an empty cell. The following line contains a string of length `k` consisting of commands (`U`, `D`, `L`, `R`). Output Print two integers, the final coordinates of the player (x, y) after executing all the commands. Example Input 5 5 10 ..... ..... .#. ..... ..... 1 1 RRDDLLUU Output 1 1 Explanation Initially, the player starts at (1, 1). The sequence of commands is `RRDDLLUU`. Here\'s how the player moves: - `R`: Moves to (1, 2) - `R`: Moves to (1, 3) - `D`: Moves to (2, 3) - `D`: Stays at (2, 3) (obstacle) - `L`: Moves to (2, 2) - `L`: Moves to (2, 1) - `U`: Moves to (1, 1) - `U`: Moves to (0, 1) After executing all the commands, the player ends at position (0, 1).","solution":"def final_position(n, m, k, grid, x, y, commands): Determines the final position of the player after executing all commands. Parameters: n: int: number of rows in the grid m: int: number of columns in the grid k: int: number of commands grid: List[str]: the grid representation x: int: starting row position of the player y: int: starting column position of the player commands: str: sequence of commands Returns: Tuple[int, int]: final coordinates of the player directions = {\\"U\\": (-1, 0), \\"D\\": (1, 0), \\"L\\": (0, -1), \\"R\\": (0, 1)} for command in commands: if command in directions: dx, dy = directions[command] new_x, new_y = x + dx, y + dy if 0 <= new_x < n and 0 <= new_y < m and grid[new_x][new_y] == \'.\': x, y = new_x, new_y return x, y"},{"question":"You are given a 2D grid of size n x m, where each cell contains a non-negative integer representing the height of terrain at that point. You can perform the following operation: 1. Choose any cell (i, j) and increment the height of all adjacent cells (left, right, up, and down) by 1. Determine if it is possible to make all the heights in the grid equal. If yes, print the operations that lead the grid to the state where all cells have the same height. Your solution should not contain more than (n * m + 10) operations. It can be shown that it is possible to make all heights equal in no more than this number of operations whenever it is possible to do so at all. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines contain m integers each, representing the heights h_ij (0 ≤ h_ij ≤ 1000). Output Print \\"YES\\" (without quotes) if you can make all heights equal, otherwise print \\"NO\\" (without quotes). You can print each letter in any case (upper or lower). If there is an answer, in the second line print an integer k (0 ≤ k ≤ n * m + 10) — the number of operations in your answer. In the next k lines, print two integers x_i and y_i (1 ≤ x_i ≤ n, 1 ≤ y_i ≤ m) representing the 1-indexed coordinates of the cell where you performed the operation. Examples Input 3 3 1 2 1 3 2 3 1 2 1 Output YES 4 2 2 2 2 2 2 2 2 Input 2 3 1 2 3 4 5 6 Output NO Note In the first example, performing the operation four times on the center cell (2, 2) results in all heights becoming equal to 5: * 1 2 1 2 3 2 3 4 3 4 5 4 5 5 5 * 3 2 3 -> 4 3 4 -> 5 4 5 -> 6 5 6 -> 7 6 7 -> 8 7 8 * 1 2 1 2 3 2 3 4 3 4 5 4 5 5 5 In the second example, it is impossible to make all the heights equal with the allowed operations.","solution":"def equalize_heights(n, m, grid): Check if it possible to make all the heights in the grid equal. If possible, return the sequence of operations. min_height = float(\'inf\') for row in grid: min_height = min(min_height, *row) target = min_height operations = [] for i in range(n): for j in range(m): while grid[i][j] > target: operations += [(i + 1, j + 1)] for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m: grid[ni][nj] += 1 grid[i][j] -= 1 target = grid[i][j] if all(grid[i][j] == target for i in range(n) for j in range(m)): print(\\"YES\\") print(len(operations)) for op in operations: print(op[0], op[1]) else: print(\\"NO\\")"},{"question":"A library has a large number of books, each identified by a unique serial number. The librarian wants to organize these books into shelves where: 1. Each shelf can contain books with serial numbers that fall within a specified range. 2. Each book can be placed on multiple shelves if its serial number fits within the range of those shelves. 3. The librarian can query for the total number of books on any given shelf. You are required to help the librarian manage this system by implementing functionalities to add shelves, add books, and query the number of books on a shelf. Input: 1. The first line contains an integer Q, the number of queries. 2. Each of the next Q lines describes a query as follows: a. \\"ADD_SHELF L R\\" means add a new shelf with books\' serial numbers in the range [L, R]. b. \\"ADD_BOOK S\\" means add a book with serial number S. c. \\"QUERY_SHELF i\\" means query how many books are there on the i-th shelf (where shelves are 1-indexed). Output: For each \\"QUERY_SHELF\\" query, output the number of books on that shelf. Constraints: 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ 10^9 1 ≤ S ≤ 10^9 SAMPLE INPUT 6 ADD_SHELF 10 20 ADD_SHELF 15 25 ADD_BOOK 12 ADD_BOOK 17 QUERY_SHELF 1 QUERY_SHELF 2 SAMPLE OUTPUT 2 1","solution":"class Library: def __init__(self): self.shelves = [] self.book_count = [] self.books = set() def add_shelf(self, l, r): self.shelves.append((l, r)) self.book_count.append(0) # Update book count for the new shelf for book in self.books: if l <= book <= r: self.book_count[-1] += 1 def add_book(self, s): self.books.add(s) # Update book counts for all shelves for i, (l, r) in enumerate(self.shelves): if l <= s <= r: self.book_count[i] += 1 def query_shelf(self, i): return self.book_count[i - 1]"},{"question":"Given an unsorted integer array, you need to find and return the length of longest consecutive elements sequence. Consecutive sequence means the numbers are in an increasing order without any gaps. For example, given `[100, 4, 200, 1, 3, 2]`, the longest consecutive elements sequence is `[1, 2, 3, 4]`, which has a length of 4. Your algorithm should run in O(n) complexity. # Input * The first line of the input contains an integer `n`, the number of elements in the array. * The second line contains `n` integers, which are the elements of the array. # Constraints * 1 leq n leq 10^5 * -10^9 leq nums[i] leq 10^9 # Output * Print the length of the longest consecutive elements sequence. # Example Input: 6 100 4 200 1 3 2 Output: 4 # Note You must write an algorithm that runs in O(n) time complexity.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in the array nums. if not nums: return 0 num_set = set(nums) # use a set for O(1) lookups longest_streak = 0 for num in nums: # we only want to start counting from the beginning of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A security firm has developed a state-of-the-art biometric access system that grants entry based on a unique code. The code is derived from a specific pattern within a string made up of digits. The system requires you to identify the longest substring of consecutive digits that adheres to a unique \'ascending plus descending\' numeric pattern. An \'ascending plus descending\' numeric pattern is defined as a sequence where digits first strictly increase to a peak and then strictly decrease. To illustrate, given the string \\"1234321\\", the longest substring displaying an \'ascending plus descending\' numeric pattern is \\"1234321\\" itself. Your goal is to implement a function that, given a string of digits, finds and returns the length of the longest substring that forms an \'ascending plus descending\' numeric pattern. Input - The first line contains an integer T, representing the number of test cases. - Each of the next T lines contains a string composed of digits (0-9). Output For each test case, output a single integer, which is the length of the longest substring displaying the \'ascending plus descending\' numeric pattern. If no such substring exists, return 0. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ length of each string ≤ 10^3 Example Input: 3 1234321 1294878 12321 Output: 7 4 5 Explanation: Test #1: The entire string \\"1234321\\" forms an \'ascending plus descending\' numeric pattern, hence its length is 7. Test #2: The longest substring that forms the pattern is \\"1294\\", and its length is 4. Test #3: The entire string \\"12321\\" forms an \'ascending plus descending\' numeric pattern, hence its length is 5.","solution":"def longest_ascending_descending(s): max_len = 0 for i in range(len(s)): peak = i while peak + 1 < len(s) and s[peak] < s[peak + 1]: peak += 1 decline = peak while decline + 1 < len(s) and s[decline] > s[decline + 1]: decline += 1 if peak > i and decline > peak: max_len = max(max_len, decline - i + 1) return max_len def longest_ascending_descending_multiple(test_cases): results = [] for s in test_cases: results.append(longest_ascending_descending(s)) return results"},{"question":"Linda loves planting flowers and has a beautiful garden at her home. She wants to create a new section in her garden to plant a row of flowers, but she has a unique requirement. Linda wants no two adjacent flowers to be of the same type as it diminishes the aesthetic appeal of her garden. She has n flowers of m different types. The types of the flowers are represented by distinct integers from 1 to m. Linda can choose any flowers in any random order from the available types for planting, but she must ensure that no two adjacent flowers are of the same type. Can you help Linda determine the maximum number of flowers she can plant in a single row under these constraints? Input The first line contains two integers n (1 ≤ n ≤ 105) — the total number of flowers Linda has, and m (1 ≤ m ≤ 100) — the number of different types of flowers. The second line contains n integers, t1, t2, ..., tn (1 ≤ ti ≤ m), which represent the types of the flowers available. Output Print a single integer — the maximum number of flowers Linda can plant in a single row following the rules. Examples Input 5 3 1 2 1 2 3 Output 5 Input 4 2 1 1 2 2 Output 3 Note In the first example, Linda can plant the flowers in the exact order {1, 2, 1, 2, 3} since there are no two adjacent flowers of the same type. In the second example, Linda can plant a maximum of three flowers. For example, she can plant the flowers in the order {1, 2, 1}. The last flower of type \'2\' cannot be planted because it would be adjacent to another flower of the same type.","solution":"def max_flowers(n, m, flower_types): Returns the maximum number of flowers Linda can plant in a row such that no two adjacent flowers are of the same type. if n == 1: return 1 max_count = 1 # We can always plant at least one flower for i in range(1, n): if flower_types[i] != flower_types[i - 1]: max_count += 1 return max_count"},{"question":"A city has **n** intersections, labeled from 1 to n, and **m** two-way roads connecting some intersections. Each road has an associated toll fee. The city government wants to improve the road system by changing the tolls of some roads to zero, so that the total minimum toll fee for traveling between any pair of intersections is minimized. You are given the number of intersections, the number of roads, and the list of roads with their toll fees. Your task is to determine the minimum total toll fee for traveling between any pair of intersections that can be achieved by changing the toll fees of zero or more roads to zero. Input The first line of input contains two integers, **n** and **m** (1 ≤ n ≤ 1000, 0 ≤ m ≤ 500000), the number of intersections and the number of roads, respectively. Each of the next **m** lines contains three integers, **u**, **v**, and **w** (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), which represent a road between intersection **u** and intersection **v** with a toll fee of **w**. Output Print a single integer - the minimum total toll fee for traveling between any pair of intersections after changing the toll fees of zero or more roads to zero. Examples Input 4 5 1 2 10 2 3 10 3 4 10 1 3 15 2 4 5 Output 0 Input 3 3 1 2 3 2 3 4 3 1 5 Output 0 Input 5 7 1 2 1 2 3 2 3 4 1 4 5 2 1 3 2 2 4 3 3 5 3 Output 2 Note In the first example, the minimum total toll fee can be achieved by setting the toll fee of the roads (1, 2), (2, 3), and (3, 4) to zero. In the second example, the minimum total toll fee can be achieved by setting the toll fee of all the roads to zero. In the third example, the minimum total toll fee can be achieved by setting the toll fee of the roads (1, 2), (3, 4) to zero.","solution":"def find_min_total_toll(n, m, roads): Finds the minimum total toll fee for traveling between any pair of intersections. from collections import defaultdict import heapq def prim(n, graph): Prim\'s algorithm to find the minimum spanning tree (MST) of the graph. in_tree = [False] * n min_toll = 0 min_heap = [(0, 0)] # (cost, vertex) while min_heap: cost, v = heapq.heappop(min_heap) if in_tree[v]: continue min_toll += cost in_tree[v] = True for next_cost, next_v in graph[v]: if not in_tree[next_v]: heapq.heappush(min_heap, (next_cost, next_v)) return min_toll if all(in_tree) else float(\'inf\') graph = defaultdict(list) for u, v, w in roads: graph[u - 1].append((w, v - 1)) graph[v - 1].append((w, u - 1)) return prim(n, graph)"},{"question":"A large network of computers is being set up for a university\'s new campus. The computers are connected in a special way: each computer is either directly connected to another computer or is indirectly connected through a series of connections. The computers are uniquely identified by integers from 1 to n. The university wants to ensure that despite the complexity of the network, crucial parts of the network (clusters or groups of computers) can still function independently if some connections are lost due to maintenance or faults. To facilitate maintenance and robustness analysis, your task is to implement a function that determines the number of distinct sets of computers which are still connected after each specified connection is removed. # Input The input consists of: - An integer `n` denoting the number of computers. - An integer `m` denoting the number of initial connections. - The next `m` lines each contain two integers `u` and `v` representing a bidirectional connection between computers `u` and `v`. - An integer `q` denoting the number of connections to be removed. - The next `q` lines each contain two integers `u` and `v` representing a connection to be removed. # Output Output `q` lines, each containing an integer, representing the number of distinct sets of connected computers after each specified connection is removed. # Constraints - (1 leq n leq 500) - (0 leq m leq 1000) - (1 leq q leq 500) - (1 leq u, v leq n) # Example Input ``` 6 5 1 2 2 3 3 4 4 5 5 6 2 2 3 4 5 ``` Output ``` 2 3 ``` # Explanation - Initially, all 6 computers are connected in a single network. - Removing connection (2, 3) results in 2 disconnected sets: {1, 2} and {3, 4, 5, 6}. - Removing connection (4, 5) in addition to the above, results in 3 disconnected sets: {1, 2}, {3, 4}, and {5, 6}.","solution":"def num_disconnected_sets(n, m, connections, q, removals): Returns the number of distinct sets of connected computers after each specified connection is removed. # Initialize parent and rank for union-find parent = list(range(n)) rank = [0] * n def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def reconnect(): for i in range(n): parent[i] = i for u, v in connections: union(u - 1, v - 1) results = [] for remove_u, remove_v in removals: connections = [conn for conn in connections if conn != (remove_u, remove_v)] reconnect() distinct_sets = len(set(find(x) for x in range(n))) results.append(distinct_sets) return results"},{"question":"A frog is sitting on the first stone in a line of `n` stones, where the stones are numbered from 1 to `n`. The frog can jump to the next stone or skip one stone to land on the stone after. Write a program to calculate the number of different ways the frog can reach the last stone. Input The input is a single integer `n` (1 <= n <= 50), representing the number of stones. Output Print a single integer representing the number of different ways the frog can reach the last stone. ***Example:*** Input 4 Output 5 ***Explanation:*** For `n = 4`, the frog can reach the last stone in the following ways: 1. 1 -> 2 -> 3 -> 4 2. 1 -> 3 -> 4 3. 1 -> 2 -> 4 4. 1 -> 2 -> 3 -> 4 5. 1 -> 3 -> 4 Thus, there are 5 different ways the frog can reach stone 4.","solution":"def number_of_ways(n): Returns the number of ways the frog can reach the last stone. if n == 1: return 1 elif n == 2: return 2 dp = [0] * (n + 1) dp[1] = 1 dp[2] = 2 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"You are tasked with organizing a special event for the Emblem Guild. The guild has members who possess different badges indicating their levels of expertise. Each member of the guild has at least one badge which represents their skill in a particular area. The event involves two types of activities: basic training sessions and expert training sessions. For a basic training session, you need to find pairs of members where both have at least one badge in common. For an expert training session, you need pairs of members where each member possesses exactly the same set of badges. Given the badge sets for each member, you need to determine the number of basic training pairs and the number of expert training pairs. Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of members. - The next N lines each describe the badges of a member. Each line starts with an integer K (the number of badges the member has), followed by K unique integers representing the badges. Output: For each test case, output the number of basic training pairs and the number of expert training pairs. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^4 - 1 ≤ K ≤ 100 - 1 ≤ Badge number ≤ 10^4 SAMPLE INPUT 2 2 2 1 2 2 2 3 3 2 1 2 2 2 3 2 1 2 SAMPLE OUTPUT 1 0 3 1 Explanation: In the first test case, there\'s one pair of members (1 and 2) who share a common badge (badge 2), so there\'s 1 basic training pair and no expert training pair. In the second test case, members 1 and 3 have the same set of badges (1, 2), making 1 expert training pair. There are three basic training pairs: (1 and 2), (1 and 3), and (2 and 3), sharing at least one badge between them.","solution":"def count_training_pairs(test_cases): results = [] for badges_list in test_cases: n = len(badges_list) basic_pairs = 0 expert_pairs = 0 badge_dict = {} for idx, badges in enumerate(badges_list): badg_tuple = tuple(sorted(badges)) if badg_tuple not in badge_dict: badge_dict[badg_tuple] = [] badge_dict[badg_tuple].append(idx) # Counting expert_pairs for key in badge_dict: count = len(badge_dict[key]) if count > 1: expert_pairs += count * (count - 1) // 2 for i in range(n): for j in range(i + 1, n): if set(badges_list[i]).intersection(set(badges_list[j])): basic_pairs += 1 results.append((basic_pairs, expert_pairs)) return results # Parsing the input def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) index += 1 badges_list = [] for _ in range(N): badges = list(map(int, input_lines[index].split()[1:])) badges_list.append(badges) index += 1 test_cases.append(badges_list) return test_cases def solution(input_data): test_cases = parse_input(input_data) results = count_training_pairs(test_cases) return \\"n\\".join(f\\"{basic} {expert}\\" for basic, expert in results)"},{"question":"Farmer John has just installed a new automated watering system for his garden. Each plant in the garden needs a certain amount of water each day. The garden is arranged in a grid of m rows and n columns, and John can target any rectangular subgrid to water all plants within it uniformly. The water required by each plant is given in a matrix of size m x n. John wants to optimize the use of his watering system by ensuring that he waters the plants as uniformly as possible while minimizing the total number of operations (each targeting a rectangular subgrid counts as one operation). Given the water requirement matrix of the garden, help Farmer John determine the minimum number of operations needed to achieve his goal. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains two integers m and n (1 ≤ m, n ≤ 50) — the number of rows and columns in the water requirement matrix. The next m lines each contain n integers ai,j (1 ≤ ai,j ≤ 100) — the water requirement of the plant in the i-th row and j-th column. Output For each test case, print a single integer — the minimum number of operations needed to water the garden uniformly. Example Input 3 2 3 2 2 3 2 2 2 3 3 1 1 1 1 2 2 1 1 1 2 2 5 5 5 5 Output 2 1 1 Explanation In the first test case, one possible solution is: - Water the subgrid (1,1) to (2,2). - Water the cell (1,3). In the second test case, one possible solution is: - Water the subgrid (1,1) to (3,3). In the third test case, only one operation is needed as the grid already requires uniform watering.","solution":"def min_operations_to_uniform_water(t, test_cases): results = [] for case in test_cases: m, n, grid = case[\'m\'], case[\'n\'], case[\'grid\'] unique_values = set() for row in grid: unique_values.update(row) results.append(len(unique_values)) return results # Read inputs def from_input_string(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] line_index = 1 for _ in range(t): m, n = map(int, lines[line_index].split()) line_index += 1 grid = [] for _ in range(m): row = list(map(int, lines[line_index].split())) line_index += 1 grid.append(row) test_cases.append({\'m\': m, \'n\': n, \'grid\': grid}) return t, test_cases def to_output_string(output): return \'n\'.join(map(str, output)) def from_output_string(output_string): return list(map(int, output_string.strip().split(\'n\')))"},{"question":"Determine the range difference. Input: The first line contains an integer T - the number of test cases. For each test case, there are two lines. The first line contains an integer N - the number of elements in the array. The second line contains N space-separated integers A[1] to A[N] - the elements of the array. Output: For each test case, print the difference between the maximum and minimum element in the array in a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ A[i] ≤ 10^5 Sample Input 3 5 5 3 8 1 4 4 2 2 2 2 6 7 7 9 10 1 2 Sample Output 7 0 9","solution":"def range_difference(test_cases): results = [] for case in test_cases: n, array = case results.append(max(array) - min(array)) return results def parse_input(input_data): lines = input_data.split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((N, array)) index += 2 return test_cases"},{"question":"In a certain city, there are n intersections and m bidirectional roads connecting them. Each road has a specific travel time associated with it. The city decided to replace the old street lamps with new eco-friendly street lamps. The goal is to ensure each intersection has enough light to be adequately visible, both directly and indirectly through other intersections. The new street lamps will be installed on some of the intersections, and each street lamp can light up all intersections it can reach within a maximum travel time t. Given the travel times for each road and the maximum travel time t, can you determine the minimum number of street lamps required so that every intersection in the city is adequately lit? Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of intersections and the number of roads. Each of the following m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — indicating a bidirectional road between intersections u and v with travel time w. The last line contains one integer t (1 ≤ t ≤ 10^6) — the maximum travel time within which a street lamp can light up an intersection. Output Print one integer — the minimum number of street lamps required to ensure that all intersections are adequately lit. Example Input 4 4 1 2 2 2 3 4 3 4 1 4 1 3 3 Output 2","solution":"import heapq def dijkstra(n, graph, start, max_time): distances = [float(\'inf\')] * n distances[start] = 0 min_heap = [(0, start)] while min_heap: current_distance, u = heapq.heappop(min_heap) if current_distance > distances[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return [i for i in range(n) if distances[i] <= max_time] def find_min_street_lamps(n, roads, max_time): graph = [[] for _ in range(n)] for u, v, w in roads: graph[u-1].append((v-1, w)) graph[v-1].append((u-1, w)) all_intersections = set(range(n)) street_lamps = 0 while all_intersections: u = all_intersections.pop() reachable = set(dijkstra(n, graph, u, max_time)) all_intersections -= reachable street_lamps += 1 return street_lamps def solution(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) roads = [] index = 2 for _ in range(m): u, v, w = map(int, (data[index], data[index+1], data[index+2])) roads.append((u, v, w)) index += 3 max_time = int(data[index]) print(find_min_street_lamps(n, roads, max_time))"},{"question":"A museum wants to install a new security system to monitor its priceless artifacts. The museum consists of n rooms connected by m corridors. To enhance the security, each room and corridor should be covered by exactly one security camera, and each camera can only cover either a room or a single corridor that directly connects two rooms. To achieve complete coverage, identify the minimum number of security cameras required. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) – the number of rooms and corridors respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) – representing that there\'s a corridor between room u and room v. Output Print the only integer – the minimum number of security cameras needed to cover all rooms and corridors. Examples Input 3 3 1 2 2 3 3 1 Output 3 Input 5 4 1 2 2 3 3 4 4 5 Output 5 Note In the first example: * Room 1 can be covered by one camera. * The corridor between room 1 and room 2 can be covered by another camera. * The corridor between room 2 and room 3 can be covered by the third camera. So, we need 3 cameras in total. In the second example: * Room 1 can be covered by one camera. * The corridor between room 1 and room 2 can be covered by another camera. * The corridor between room 2 and room 3 can be covered by a third camera. * The corridor between room 3 and room 4 can be covered by a fourth camera. * Room 5 can be covered by the fifth camera. So, we need 5 cameras in total.","solution":"def min_security_cameras(n, m, connections): Determine the minimum number of security cameras required to cover all rooms and corridors. Parameters: n (int): Number of rooms m (int): Number of corridors connections (list of tuples): List of tuples where each tuple represents a corridor between two rooms. Returns: int: Minimum number of security cameras required return max(n, m)"},{"question":"You are given an array of integers `arr` of size `n`. You want to split the array into several subarrays, each containing at least one element. You can perform the following operation any number of times: - Choose a subarray with elements equal to each other and replace every element in this subarray with its sum. For example, if the subarray is `[3, 3, 3]`, you can replace it with `[9]`. After performing the operations, you want to maximize the sum of the array. Your task is to find the maximum possible sum of the array after executing the operations optimally. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ a_i ≤ 10^5) — the elements of the array. Output Print a single integer — the maximum possible sum of the array after the operations. Examples Input 8 1 1 1 3 3 3 2 2 Output 22 Input 5 5 5 10 10 10 Output 40 Note In the first example, the optimal way to perform the operations is as follows: - Combine the first three `1`s to get `3`. - Combine the next three `3`s to get `9`. - Combine the last two `2`s to get `4`. The array becomes `[3, 9, 4]` and the sum is `3 + 9 + 4 = 16`. In the second example, the optimal way involves: - Combining the first two `5`s to get `10`. - Combining the next three `10`s to get `30`. The array becomes `[10, 30]` and the sum is `10 + 30 = 40`.","solution":"def max_possible_sum(n, arr): Returns the maximum possible sum of the array after executing the optimal operations. if not arr: return 0 max_sum = 0 i = 0 while i < n: current_value = arr[i] subarray_sum = 0 while i < n and arr[i] == current_value: subarray_sum += arr[i] i += 1 max_sum += subarray_sum return max_sum"},{"question":"Given an array of integers and a target integer, find all unique combinations of numbers in the array where the numbers sum to the target. Each number in the array may only be used once in the combination. The solution set must not contain duplicate combinations. Write a function `combinationSum2` to solve the problem. The function should take two arguments: 1. `candidates` (List[int]): the list of integers. 2. `target` (int): the target sum. Return a list of all unique combinations that sum to the target. You may return the combinations in any order. **Constraints:** - 1 <= len(candidates) <= 30 - -10^9 <= target <= 10^9 - -10^9 <= candidates[i] <= 10^9 # Example: Input: candidates = [10,1,2,7,6,1,5] target = 8 Output: [[1,1,6],[1,2,5],[1,7],[2,6]] Input: candidates = [2,5,2,1,2] target = 5 Output: [[1,2,2],[5]] **Note:** - The order of the numbers in each combination does not matter. - The solution set must not contain duplicate combinations. # Signature: ```python def combinationSum2(candidates: List[int], target: int) -> List[List[int]]: ```","solution":"from typing import List def combinationSum2(candidates: List[int], target: int) -> List[List[int]]: def backtrack(start, target, path): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(candidates)): if i > start and candidates[i] == candidates[i-1]: continue # skip duplicates backtrack(i+1, target-candidates[i], path+[candidates[i]]) candidates.sort() result = [] backtrack(0, target, []) return result"},{"question":"You are running a logistics company, and you are responsible for handling shipments of various container sizes. The containers are rectangular in shape and can be stacked on top of each other, but you need to ensure the stability of the stacks. Each container is described by its length, width, and height. A container can be stacked on another container if and only if the base area (length x width) of the top container is strictly smaller than the base area of the bottom container. Given a list of containers, your task is to determine the maximum height you can achieve by stacking these containers following the rules mentioned above. Input The input consists of multiple test cases. The first line contains a single integer T, the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 100), the number of containers. The following N lines each contain three integers l, w, h (1 ≤ l, w, h ≤ 100), the length, width, and height of each container. Output For each test case, print the maximum height that can be achieved by stacking the containers. Example Input 2 4 4 4 5 3 3 6 2 2 3 1 1 2 3 10 10 1 9 9 2 8 8 3 Output 16 6","solution":"def max_height_stacks(test_cases): Returns a list of maximum heights for each test case by stacking containers. results = [] for containers in test_cases: # Sort containers by base area in descending order containers.sort(key=lambda x: x[0] * x[1], reverse=True) # Initialize a dp array to store the maximum height at each index n = len(containers) dp = [0] * n # Fill dp array, where dp[i] represents the maximum height achievable with container i at the bottom for i in range(n): dp[i] = containers[i][2] # Height of container i for j in range(i): if containers[j][0] > containers[i][0] and containers[j][1] > containers[i][1]: dp[i] = max(dp[i], dp[j] + containers[i][2]) # The answer is the maximum value in dp array results.append(max(dp)) return results def process_input(data): Processes the input to extract test cases conveniently. lines = data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) containers = [] for j in range(N): l, w, h = map(int, lines[index + j + 1].split()) containers.append((l, w, h)) test_cases.append(containers) index += N + 1 return test_cases def process_output(results): Formats the output to the required format. for result in results: print(result) # Example usage: data = 2 4 4 4 5 3 3 6 2 2 3 1 1 2 3 10 10 1 9 9 2 8 8 3 test_cases = process_input(data) results = max_height_stacks(test_cases) process_output(results)"},{"question":"Grace is working on a schedule management system for a group of lecturers. Each lecturer has a list of lectures they need to give, each associated with a specific start and end time. Grace wants to ensure that each lecturer\'s schedule does not have any overlapping lectures, meaning a lecturer cannot have two or more lectures scheduled at the same time. Your task is to write a program that validates the schedule of each lecturer. If there\'s no overlapping lecture in a lecturer\'s schedule, the lecturer is said to have a \\"valid schedule\\". Otherwise, their schedule is \\"invalid\\". Input The input consists of multiple test cases. The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. Each test case starts with an integer L (1 ≤ L ≤ 1000), the number of lecturers. For each lecturer, the input starts with an integer N (1 ≤ N ≤ 100), the number of lectures. Then, N lines follow, each containing two integers S and E (0 ≤ S < E ≤ 1000), the start and end times of the lecture. Output For each test case, output \\"valid schedule\\" if none of the lectures overlap for any lecturer in that test case, otherwise output \\"invalid schedule\\". Sample Input 3 2 3 10 20 20 30 30 40 2 5 10 15 20 1 2 5 10 8 12 4 6 4 10 15 15 20 0 5 8 12 1 3 0 10 10 20 5 15 Sample Output valid schedule invalid schedule invalid schedule","solution":"def is_schedule_valid(lectures): Returns True if there are no overlapping lectures in the list of lectures, False otherwise. lectures.sort(key=lambda x: x[0]) # Sort lectures by start time for i in range(1, len(lectures)): if lectures[i][0] < lectures[i-1][1]: return False return True def validate_schedules(test_cases): Validates the schedules for multiple test cases. Each test case includes multiple lecturers and each lecturer has a list of lectures with start and end times. results = [] for lectures_for_each_lecturer in test_cases: valid = True for lectures in lectures_for_each_lecturer: if not is_schedule_valid(lectures): valid = False break if valid: results.append(\\"valid schedule\\") else: results.append(\\"invalid schedule\\") return results # Read input def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): L = int(data[index]) index += 1 lecturers = [] for _ in range(L): N = int(data[index]) index += 1 lectures = [] for _ in range(N): S = int(data[index]) E = int(data[index+1]) index += 2 lectures.append((S, E)) lecturers.append(lectures) test_cases.append(lecturers) results = validate_schedules(test_cases) for result in results: print(result) if __name__ == \'__main__\': main()"},{"question":"The Technical Director of the company StartTech is organizing the start-up\'s annual hackathon event. For this, the director needs to ensure that the headlining teams are given the chance to present their projects in such a manner that the flow of interest is maintained throughout. The director understands that if team x presents immediately after team y, the flow of interest should ideally increase or remain the same. To achieve this, each team is given a rating based on their project. The director wants to present teams in such an order that no team with a lower rating presents immediately after a team with a higher rating. You have been assigned the task to determine the order of team presentations such that no team with a lower rating follows a team with a higher rating. If there are multiple correct orders, any valid one will do. Input The first line contains an integer n — the number of teams. The second line contains n space-separated integers ri (1 ≤ ri ≤ 100) — the ratings of the teams. The ratings are provided in the order of team numbers from 1 to n. Output Print a permutation of n integers — a valid order of team presentations. Examples Input 5 3 1 4 3 2 Output 1 5 2 4 3 Input 4 2 2 2 2 Output 1 2 3 4","solution":"def order_teams(n, ratings): Returns a permutation of n integers - a valid order of team presentations such that no team with a lower rating follows a team with a higher rating. Parameters: n (int): Number of teams ratings (list): List of integer ratings of the teams Returns: list: A permutation of n integers representing the order of team presentations # Create a list of (rating, index) tuples indexed_ratings = [(ratings[i], i + 1) for i in range(n)] # Sort the list based on ratings (first element of each tuple) indexed_ratings.sort() # Extract the indices (team numbers) from the sorted list ordered_teams = [team[1] for team in indexed_ratings] return ordered_teams"},{"question":"You are given an array `a` of n integers, where 1 ≤ n ≤ 10^5 and 1 ≤ a[i] ≤ 10^9. You need to find the maximum value of j-i such that a[j] ≥ a[i]. Input The first line contains a single integer n — the length of the array. The second line contains n integers — the elements of the array. Output Print a single integer — the maximum value of j-i such that a[j] ≥ a[i]. Examples Input 6 5 3 4 3 5 9 Output 5 Input 4 1 2 3 4 Output 3 Input 5 4 3 2 1 5 Output 4 Note In the first example, the maximum value of j-i is achievable with indices 0 and 5 (5 ≤ 9). In the second example, as the array is sorted in increasing order, the maximum difference is between the first and last indices. In the third example, the maximum value of j-i is achievable with indices 0 and 4 (4 ≤ 5).","solution":"def max_value_j_minus_i(n, a): Finds the maximum value of j-i such that a[j] ≥ a[i]. Parameters: n (int): The length of the array. a (List[int]): The elements of the array. Returns: int: The maximum value of j-i such that a[j] ≥ a[i]. left_min = [0] * n right_max = [0] * n left_min[0] = a[0] for i in range(1, n): left_min[i] = min(left_min[i - 1], a[i]) right_max[n - 1] = a[n - 1] for j in range(n - 2, -1, -1): right_max[j] = max(right_max[j + 1], a[j]) i, j, max_diff = 0, 0, 0 while i < n and j < n: if left_min[i] <= right_max[j]: max_diff = max(max_diff, j - i) j += 1 else: i += 1 return max_diff"},{"question":"You are given two values - `a` and `b`, which represent the legs of a right-angled triangle. Your task is to determine the hypotenuse of the triangle. The hypotenuse is the longest side of a right triangle and is given by the formula: [ text{hypotenuse} = sqrt{a^2 + b^2} ] Since the value might be a floating-point number, round it to the nearest integer. Input A single line contains two space-separated integers: a and b (1 ≤ a, b ≤ 1000). Output Print a single integer - the length of the hypotenuse rounded to the nearest integer. Examples Input 3 4 Output 5 Input 5 12 Output 13 Input 8 15 Output 17","solution":"import math def calculate_hypotenuse(a, b): Returns the length of the hypotenuse of a right-angled triangle with legs of lengths a and b, rounded to the nearest integer. hypotenuse = math.sqrt(a**2 + b**2) return round(hypotenuse)"},{"question":"In a large company, employees use their computers to send and receive emails throughout the day. The IT department needs your help to analyze the flow of emails in case of an internal investigation. You are tasked with writing a program to analyze email traffic and determine the most active sender and receiver in a given time period. Your program should: 1. Parse a log of email records. 2. Identify the employee who sent the most emails within the time period. 3. Identify the employee who received the most emails within the time period. Each email record contains the sender\'s employee ID, receiver\'s employee ID, and the timestamp of the email. You need to implement the following operations to analyze the email traffic: * `send sender_id receiver_id timestamp` - This represents an email being sent by `sender_id` to `receiver_id` at the given `timestamp`. * `query start_time end_time` - This represents a request to analyze the email traffic between `start_time` and `end_time`. Your program should calculate and print the employee who sent the most emails and the employee who received the most emails within this period. If there is a tie, output any one of the employees. Constraints: * 1 ≤ number of employees ≤ 100 * 1 ≤ number of email records ≤ 1000 * Timestamp is a string in the format \\"YYYY-MM-DD HH:MM:SS\\" * Employee IDs are unique integers between 1 and 100 inclusive. * Start and end times are valid timestamps that are always within the range of recorded email log timestamps. Input: The input consists of a series of email records followed by one or more query operations. Each operation is provided on a new line, and the input terminates with an \\"end\\" statement. Output: For each `query` operation, output the employee ID who sent the most emails and the employee ID who received the most emails within the specified period, separated by a space. Example: Input: ``` send 1 2 2023-01-10 08:00:00 send 1 3 2023-01-10 09:00:00 send 2 1 2023-01-10 09:30:00 send 3 1 2023-01-10 10:00:00 query 2023-01-10 08:00:00 2023-01-10 09:00:00 query 2023-01-10 08:00:00 2023-01-10 10:00:00 end ``` Output: ``` 1 2 1 1 ```","solution":"from collections import defaultdict import datetime class EmailLog: def __init__(self): self.logs = [] def send(self, sender_id, receiver_id, timestamp): self.logs.append((int(sender_id), int(receiver_id), self._parse_timestamp(timestamp))) def query(self, start_time, end_time): start_time = self._parse_timestamp(start_time) end_time = self._parse_timestamp(end_time) send_count = defaultdict(int) receive_count = defaultdict(int) for sender_id, receiver_id, timestamp in self.logs: if start_time <= timestamp <= end_time: send_count[sender_id] += 1 receive_count[receiver_id] += 1 most_active_sender = max(send_count, key=send_count.get, default=None) most_active_receiver = max(receive_count, key=receive_count.get, default=None) return most_active_sender, most_active_receiver @staticmethod def _parse_timestamp(timestamp): return datetime.datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") def process_input(input_lines): email_log = EmailLog() result = [] for line in input_lines: if line == \\"end\\": break parts = line.split() command = parts[0] if command == \\"send\\": email_log.send(parts[1], parts[2], parts[3] + \\" \\" + parts[4]) elif command == \\"query\\": most_active_sender, most_active_receiver = email_log.query(parts[1] + \\" \\" + parts[2], parts[3] + \\" \\" + parts[4]) result.append(f\\"{most_active_sender} {most_active_receiver}\\") return result"},{"question":"Two friends, Alice and Bob, are solving coding problems. They each have a list of coding problems they have solved. Alice has solved problems represented as integers in list A, and Bob has solved problems in list B. They want to compare their lists and find which problems they have both solved. Write a program to help them determine the common problems they\'ve solved. Input The first line contains an integer T, the number of test cases. For each test case: - The next line contains an integer n, the size of list A. - The following line contains n space-separated integers, representing the problems Alice has solved. - The next line contains an integer m, the size of list B. - The following line contains m space-separated integers, representing the problems Bob has solved. Output For each test case, output a single line containing the common problems in sorted order. If there are no common problems, print \\"No common problems\\". Constraints 1 ≤ T ≤ 100 1 ≤ n, m ≤ 100000 0 ≤ A[i], B[i] ≤ 1000000 Example Input: 2 3 1 3 5 3 3 5 7 4 1 2 3 4 4 5 6 7 8 Output: 3 5 No common problems","solution":"def find_common_problems(T, test_cases): results = [] for i in range(T): n, A = test_cases[i][0], set(test_cases[i][1]) m, B = test_cases[i][2], set(test_cases[i][3]) common = sorted(list(A & B)) if common: results.append(\\" \\".join(map(str, common))) else: results.append(\\"No common problems\\") return results # Example function call # T = 2 # test_cases = [ # (3, [1, 3, 5], 3, [3, 5, 7]), # (4, [1, 2, 3, 4], 4, [5, 6, 7, 8]) # ] # print(find_common_problems(T, test_cases)) # should output [\\"3 5\\", \\"No common problems\\"]"},{"question":"Bob is planning to create a new festival named \\"Cyber Fun Fest\\". This festival consists of two competitions: coding and gaming. Participants need to complete x coding tasks and y gaming sessions. A winner is someone who finishes all their gaming sessions before anyone else (there may be multiple winners). Before the festival starts, Bob knows that there are m participants registered for the event. He also knows that the i-th participant\'s coding speed is ci tasks per hour and their gaming speed is gi sessions per hour. Unfortunately, he doesn\'t know x and y, but he knows that they are real numbers greater than 0. Bob wants to cheer for the potential winners. So, he wants to determine all the participants who might win. A participant might win if and only if there exist some values of x and y such that with these values, they could be the winner. Since Bob is busy organizing the event, he asked for your help to figure this out. Input The first line of input contains a single integer m (1 ≤ m ≤ 2 × 105). The next m lines contain the details of the participants. The i-th line contains two integers ci and gi (1 ≤ ci, gi ≤ 104). Output In the first and only line of output, print a sequence of numbers of possible winners in increasing order. Examples Input 4 2 3 4 2 5 5 3 4 Output 1 2 4 Input 3 3 4 3 3 4 3 Output 1 3","solution":"def potential_winners(m, participants): winners = [] max_gaming_speed = 0 for i in range(m): _, gi = participants[i] if gi > max_gaming_speed: max_gaming_speed = gi for i in range(m): _, gi = participants[i] if gi == max_gaming_speed: winners.append(i + 1) return winners"},{"question":"Evelyn has a garden where she grows a special kind of magical plant. Each plant grows at a constant rate of `g` centimeters per day. Evelyn records the height of each plant at the end of each day. She wants to know the total growth of each plant over a given period of days. Your task is to help Evelyn compute the total height of each plant after a specified number of days, given their initial heights and growth rates. # Input The input consists of: - The first line contains two integers, `k` (1 ≤ k ≤ 100,000) — the number of plants, and `d` (1 ≤ d ≤ 10^6) — the number of days. - The second line contains `k` integers, where the `i-th` integer represent the initial height of the `i-th` plant. - The third line contains `k` integers, where the `i-th` integer represent the growth rate `g` of the `i-th` plant per day. # Output Output `k` integers, where the `i-th` integer represents the total height of the `i-th` plant after `d` days. # Example Input ``` 3 10 5 3 7 2 1 3 ``` Output ``` 25 13 37 ``` Note In this example, there are 3 plants, and we need to calculate their heights after 10 days: - The first plant starts with an initial height of 5 and grows by 2 cm each day. After 10 days, its height will be 5 + 2 * 10 = 25 cm. - The second plant starts with an initial height of 3 and grows by 1 cm each day. After 10 days, its height will be 3 + 1 * 10 = 13 cm. - The third plant starts with an initial height of 7 and grows by 3 cm each day. After 10 days, its height will be 7 + 3 * 10 = 37 cm.","solution":"def calculate_heights_after_days(k, d, initial_heights, growth_rates): Calculates the height of each plant after a specified number of days. Parameters: k (int): Number of plants. d (int): Number of days. initial_heights (list): List of initial heights of each plant. growth_rates (list): List of growth rates (per day) of each plant. Returns: list: List of heights after d days. final_heights = [] for i in range(k): final_height = initial_heights[i] + growth_rates[i] * d final_heights.append(final_height) return final_heights"},{"question":"You are given a list of integers. Your task is to find the number of pairs (i, j) such that: 1. 0 <= i < j < N 2. The sum of the elements at indices i and j is even. Input The first line contains an integer N, the number of elements in the list (1 <= N <= 105). The second line contains N integers separated by spaces, where each integer x satisfies -106 <= x <= 106. Output Print a single integer which represents the number of pairs (i, j) such that the sum of elements at indices i and j is even. Examples Input 5 1 2 3 4 5 Output 4 Input 4 2 4 6 8 Output 6","solution":"def count_even_sum_pairs(N, arr): Returns the number of pairs (i, j) such that: 1. 0 <= i < j < N 2. The sum of the elements at indices i and j is even even_count = 0 odd_count = 0 for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 # Pairs of even numbers even_pairs = (even_count * (even_count - 1)) // 2 # Pairs of odd numbers odd_pairs = (odd_count * (odd_count - 1)) // 2 return even_pairs + odd_pairs"},{"question":"Matthew is an avid traveler who loves exploring new cities. He recently discovered a new city with \'n\' intersections and \'m\' roads. The intersections are numbered from 1 to \'n\', and the roads are directional, meaning they can only be traversed in one specified direction. Matthew is curious about finding the shortest path from one intersection to another. Given a list of roads with the distances between intersections, you need to help Matthew calculate the shortest distance from a starting intersection \'s\' to a destination intersection \'t\'. Write a program that takes the number of intersections, the number of roads, the starting and destination intersections, and the list of roads with their distances as input. The program should output the shortest distance from the start to the destination intersection. If the destination is not reachable from the starting intersection, output -1. Input The first line contains three integers n, m, and s, t (1 ≤ n ≤ 5000, 1 ≤ m ≤ 20000, 1 ≤ s, t ≤ n) representing the number of intersections, the number of roads, the starting intersection, and the destination intersection respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) representing a road from intersection u to intersection v with distance w. Output Output a single integer representing the shortest distance from the starting intersection to the destination intersection. If it\'s not possible to go from the starting intersection to the destination intersection, output -1. Examples Input 4 4 1 3 1 2 1 2 3 3 1 3 10 3 4 2 Output 4 Input 3 2 1 3 1 2 5 2 3 7 Output 12 Input 6 4 5 2 1 3 2 1 4 4 3 4 1 4 2 1 Output -1","solution":"import heapq def shortest_path(n, m, s, t, roads): # Create an adjacency list adj_list = {i: [] for i in range(1, n + 1)} for u, v, w in roads: adj_list[u].append((v, w)) # Dijkstra\'s algorithm def dijkstra(start, end): # Distance to each node initialized to infinity dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 priority_queue = [(0, start)] # (distance, node) heapq.heapify(priority_queue) while priority_queue: current_dist, current_node = heapq.heappop(priority_queue) if current_node == end: return current_dist if current_dist > dist[current_node]: continue for neighbor, weight in adj_list[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 if dist[end] == float(\'inf\') else dist[end] return dijkstra(s, t)"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Each edge has a weight associated with it. Write a program to find the shortest path from a given start vertex `s` to an end vertex `t`. If there are multiple shortest paths, return any one of them. Input The input consists of multiple datasets. Each dataset is represented in the following format: > n m > u1 v1 w1 > u2 v2 w2 > ... > um vm wm > s t n and m are integers representing the number of vertices and the number of edges, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w`, which represent an edge between vertices `u` and `v` with weight `w`. The last line of the dataset contains two integers `s` and `t` representing the start and end vertices respectively. The end of the input is represented by a line consisting of only one `#`. The number of datasets does not exceed 100. Constraints 1 ≤ n ≤ 1000 1 ≤ m ≤ 10000 1 ≤ w ≤ 1000 0 ≤ u, v, s, t < n Output For each dataset, output the length of the shortest path from `s` to `t`. If there is no path from `s` to `t`, output -1. If there is a path, output the sequence of vertices comprising one of the shortest paths. Sample Input 5 6 0 1 2 1 2 4 2 3 1 3 0 7 3 4 3 1 4 5 0 4 3 3 0 1 1 1 2 1 0 2 5 0 2 # Sample Output 8 0 1 4 2 0 1 2 Explanation In the first dataset, the shortest path from vertex `0` to vertex `4` goes through vertices `0 -> 1 -> 4` with a path length of `2 + 5 = 7`. In the second dataset, the shortest path from vertex `0` to vertex `2` goes through vertices `0 -> 1 -> 2` with a path length of `1 + 1 = 2`.","solution":"import heapq import sys def dijkstra(n, adj_list, start, end): dist = [sys.maxsize] * n dist[start] = 0 prev = [-1] * n pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in adj_list[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance prev[v] = u heapq.heappush(pq, (distance, v)) if dist[end] == sys.maxsize: return -1, [] # Reconstruct the path path = [] u = end while u != -1: path.append(u) u = prev[u] path.reverse() return dist[end], path def shortest_paths(datasets): results = [] for dataset in datasets: n, m = dataset[\'n\'], dataset[\'m\'] adj_list = [[] for _ in range(n)] for u, v, w in dataset[\'edges\']: adj_list[u].append((v, w)) adj_list[v].append((u, w)) s, t = dataset[\'s\'], dataset[\'t\'] length, path = dijkstra(n, adj_list, s, t) results.append((length, path)) return results def process_input(input_string): datasets = [] lines = input_string.strip().split(\'n\') i = 0 while i < len(lines): if lines[i] == \'#\': break n, m = map(int, lines[i].split()) i += 1 edges = [] for _ in range(m): u, v, w = map(int, lines[i].split()) edges.append((u, v, w)) i += 1 s, t = map(int, lines[i].split()) i += 1 datasets.append({\'n\': n, \'m\': m, \'edges\': edges, \'s\': s, \'t\': t}) return datasets def generate_output(results): output = [] for length, path in results: if length == -1: output.append(\\"-1\\") else: output.append(str(length)) output.append(\\" \\".join(map(str, path))) return \\"n\\".join(output) def main(): import sys input_string = sys.stdin.read() datasets = process_input(input_string) results = shortest_paths(datasets) output = generate_output(results) print(output)"},{"question":"Treeland is a forest country consisting of n cities connected by bidirectional roads forming a tree structure. The citizens of Treeland respect certain ancient rules pertaining to paths within the country: for any two cities, there is exactly one simple path between them (no cycles). The king of Treeland wants to enhance the defense mechanism of the country against invasions. He has hired you to identify the k most critical roads in the country\'s infrastructure. A road is critical if its removal would increase the number of connected components (make the country disconnected). Given the map of Treeland\'s cities and roads, determine which k roads are the most critical. If there are multiple sets of k roads with the same level of criticality, output any set. Input The first line contains two integers n and k (2 ≤ n ≤ 200000, 1 ≤ k < n) — the number of cities and the number of critical roads to identify. The following n-1 lines contain roads, one road per line. Each line contains a pair of integers x_i, y_i (1 ≤ x_i, y_i ≤ n) — the cities connected by the i-th road. Output Output k lines containing two integers each, representing the k most critical roads. Each pair of integers represents the cities connected by a road. If there are multiple possible answers, print any of them. Examples Input 5 2 1 2 1 3 3 4 2 5 Output 1 3 1 2 Input 7 3 1 2 2 3 3 4 4 5 5 6 5 7 Output 4 5 5 6 5 7","solution":"def find_critical_roads(n, k, roads): Returns the k critical roads in the country\'s infrastructure. Parameters: n (int): The number of cities. k (int): The number of critical roads to identify. roads (list of tuples): List of roads where each road is a tuple (x_i, y_i). Returns: list of tuples: The k most critical roads. # Since every road is critical in a tree (removal of any road splits the component into two) # We can return any k roads from the given list return roads[:k]"},{"question":"Given an integer array **nums** and an integer **k**, your task is to determine if there are two distinct indices **i** and **j** in the array such that **nums[i] == nums[j]** and the absolute difference between **i** and **j** is at most **k**. # Input - The first line of input contains two integers **n** and **k** where, - **n** is the length of the integer array (1 ≤ **n** ≤ 10^5) - **k** is an integer (1 ≤ **k** ≤ n) - The second line contains **n** integers separated by spaces which represents the array **nums** (|**nums[i]**| ≤ 10^9). # Output - Output \\"YES\\" if there exist two distinct indices **i** and **j** such that **nums[i] == nums[j]** and **|i - j| ≤ k**. - Otherwise, output \\"NO\\". # Example Input ``` 8 3 1 2 3 1 2 3 1 2 ``` Output ``` YES ``` Input ``` 6 1 1 2 3 1 2 3 ``` Output ``` NO ``` # Constraints - The solution should be optimized with respect to both time and space complexity due to the large possible size of the input.","solution":"def has_nearby_duplicates(nums, k): Check if there are any two distinct indices i and j in the array such that nums[i] == nums[j] and the absolute difference between i and j is at most k. num_index_map = {} for i, num in enumerate(nums): if num in num_index_map and i - num_index_map[num] <= k: return \\"YES\\" num_index_map[num] = i return \\"NO\\""},{"question":"You are managing a factory that operates multiple conveyor belts. Each conveyor belt has a set number of items it can process per minute. Given the processing speeds of the conveyor belts and a list of tasks that come into the factory, you need to determine the minimum time required for each task to be completed. Each task specifies the total number of items that need to be processed. Tasks need to be assigned to the conveyor belts such that the time taken to process all items in each task is minimized. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^4) — the number of conveyor belts in the factory. The second line contains n integers a_i (1 ≤ a_i ≤ 10^3) — the processing speed of each conveyor belt in items per minute. The third line contains an integer t (1 ≤ t ≤ 10^4) — the number of tasks. The fourth line contains t integers b_i (1 ≤ b_i ≤ 10^9) — the number of items for each task. Output For each task, print the minimum time in minutes required to process all items using the given conveyor belts. Each output should be on a new line in the order of tasks provided. Example Input 3 2 3 1 4 10 21 5 17 Output 4 7 2 6 Explanation: - For the first task, task 1 can be processed in 4 minutes: split the task between the conveyors with speeds 2 and 3, then the conveyor with speed 1 can also help. - For the second task, task 2 can be processed in 7 minutes: split the items optimized according to conveyor speeds. - For the third task, task 3 can be processed in 2 minutes: send 5 items to the conveyor belt with speed 3. - For the fourth task, task 4 can be processed in 6 minutes: split the task between the conveyors similarly to minimize total time.","solution":"def minimum_time(n, conveyor_speeds, t, tasks): Function to determine the minimum time required for each task to be completed. Parameters: n (int): Number of conveyor belts. conveyor_speeds (list of int): List of speeds for each conveyor belt. t (int): Number of tasks. tasks (list of int): List of number of items for each task. Returns: list of int: List containing the minimum time required for each task. conveyor_speeds.sort(reverse=True) # Sorting conveyor speeds in descending order for optimization times = [] for items in tasks: min_time = float(\'inf\') for speed in conveyor_speeds: time = (items + speed - 1) // speed # Calculate time needed if all items were handled by this belt min_time = min(min_time, time) times.append(min_time) return times"},{"question":"Azeem has an array `a` of length `n`. He is planning to make certain moves such that any single move consists of picking any two adjacent elements and swapping them if the first element is greater than the second. Formally, in one move, if `a[i] > a[i+1]`, he can swap `a[i]` and `a[i+1]` (1 ≤ i < n). Azeem wonders how many moves he needs to sort the array in non-decreasing order. Given the array `a`, calculate the minimum number of such moves needed to sort the array. Input The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains an integer `n` (1 ≤ n ≤ 1000), the length of the array `a`. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 1000), the elements of the array `a`. Output For each test case, print the minimum number of moves needed to sort the array `a` in non-decreasing order. Examples Input 3 5 5 1 4 2 3 4 1 3 2 4 3 2 1 3 Output 6 1 1 Explanation In the first example, the array `[5, 1, 4, 2, 3]` can be sorted in 6 moves: 1. swap(5,1) → [1, 5, 4, 2, 3] 2. swap(5,4) → [1, 4, 5, 2, 3] 3. swap(5,2) → [1, 4, 2, 5, 3] 4. swap(5,3) → [1, 4, 2, 3, 5] 5. swap(4,2) → [1, 2, 4, 3, 5] 6. swap(4,3) → [1, 2, 3, 4, 5] In the second example, the array `[1, 3, 2, 4]` can be sorted in 1 move: 1. swap(3,2) → [1, 2, 3, 4] In the third example, the array `[2, 1, 3]` can be sorted in 1 move: 1. swap(2,1) → [1, 2, 3]","solution":"def count_moves_to_sort(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] swaps = 0 sorted_flag = False # Perform a bubble sort and count the swaps while not sorted_flag: sorted_flag = True for j in range(n-1): if a[j] > a[j+1]: a[j], a[j+1] = a[j+1], a[j] swaps += 1 sorted_flag = False results.append(swaps) return results"},{"question":"Arya Stark is practicing her sword fighting skills and needs to measure her performance. She has recorded her scores for the last \'n\' training sessions. She wants to identify the smallest sub-array (contiguous segment) of her scores such that the sum of its elements is greater than or equal to a given threshold \'k\'. This task involves two main steps: 1. Identify and print the length of the smallest sub-array whose elements\' sum is at least \'k\'. 2. If multiple sub-arrays meet this requirement with the same smallest length, print any one of them. If no such sub-array exists, print `-1`. Arya has asked for your help to accomplish this. Given the number of training sessions \'n\', the threshold \'k\', and the list of integers representing her scores, write a function that finds the smallest sub-array with the required properties. Input: The first line of input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^6) representing the number of training sessions and the threshold respectively. The second line of input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) representing the scores of each training session. Output: Output a single integer representing the length of the smallest sub-array whose sum is at least \'k\', followed by the elements of the sub-array. If no such sub-array exists, output `-1`. Example: Input: 10 15 1 2 3 4 5 6 7 8 9 10 Output: 2 8 9 Explanation: The smallest sub-array with a sum of at least 15 is [8, 9] which has a length of 2. Another example could be [7, 8], also with a length of 2, that satisfies the condition. Hence, either output is correct. If no sub-array that sums up to at least 15 exists, output `-1`.","solution":"def smallest_subarray_with_sum_at_least_k(n, k, scores): min_length = float(\'inf\') start = 0 current_sum = 0 subarray = [] for end in range(n): current_sum += scores[end] while current_sum >= k: if (end - start + 1) < min_length: min_length = end - start + 1 subarray = scores[start:end+1] current_sum -= scores[start] start += 1 if min_length == float(\'inf\'): return -1 else: return (min_length, subarray)"},{"question":"A game company is designing a new type of challenge for their latest puzzle game. The player must align a series of sliders that control different LEDs to achieve a certain goal. Each slider can be set to a position between 0 and 1000, inclusive. Each LED has an assigned threshold value T_i which is a non-negative integer. For each slider\'s position, the LED controlled by the slider lights up if the slider\'s position is greater than or equal to its threshold value T_i. The goal is for the player to set the sliders so that every LED is lit up exactly once. Given the threshold values of the LEDs, determine if there is a possible configuration of the sliders to light up each LED exactly once. Input The first line contains a positive integer N (1 ≤ N ≤ 100,000), denoting the number of LEDs (and thus sliders). The next line contains N space-separated integers T_i (0 ≤ T_i ≤ 1000), representing the threshold values of the LEDs. Output Output \\"Possible\\" if the player can set the sliders such that each LED is lit up exactly once. Otherwise, output \\"Impossible\\". Examples Input 3 10 20 30 Output Possible Input 4 15 15 15 15 Output Impossible Note In the first sample, the LEDs have distinct threshold values (10, 20, 30), so setting the sliders to these respective positions can light up each LED exactly once. In the second sample, all LEDs have the same threshold value of 15. Thus, it is impossible to set the sliders such that each LED is lit up exactly once, since multiple LEDs would be lit if a slider is set to 15.","solution":"def is_configuration_possible(n, thresholds): Determine if it is possible to set the sliders so that every LED (controlled by the slider) lights up exactly once. :param n: int: the number of LEDs (and thus sliders). :param thresholds: List[int]: a list of non-negative integers representing the threshold values of the LEDs. :return: str: \\"Possible\\" if a configuration is possible, otherwise \\"Impossible\\". # Utilizing a set to check for unique threshold values. unique_thresholds = set(thresholds) # If the number of unique thresholds is equal to the number of LEDs, it is possible. if len(unique_thresholds) == n: return \\"Possible\\" else: return \\"Impossible\\""},{"question":"Given a collection of up to 10 products in a store, each with a unique product ID and price, create a program that can perform two types of queries: 1. Find IDs of all products within a given price range, inclusive. 2. Given a product ID, find its price. Your task is to read a sequence of queries and output the results accordingly. The queries are provided in two formats: - `R X Y` - find all products with prices between X and Y, inclusive. - `Q Z` - find the price of the product with ID Z. The sequence of inputs will be terminated by a line containing the word \\"END\\". Input: - The first line contains an integer n (1 ≤ n ≤ 10), the number of products. - The next n lines each contain a product ID (unique integer between 1 and 100) and a price (integer between 1 and 1000). - Following the product information, a sequence of queries is provided, with each query on a new line. - The last line of the input will be \\"END\\". Output: - For each `R X Y` query, output the sorted list of product IDs within the given price range, or \\"NONE\\" if no products fall within that range. - For each `Q Z` query, output the price of the product with ID Z, or \\"NOT FOUND\\" if no such product exists. Example: Input: ``` 5 1 100 2 150 3 200 4 250 5 300 R 100 200 Q 4 R 50 100 Q 6 END ``` Output: ``` 1 2 3 250 1 NOT FOUND ```","solution":"def store_queries(n, product_data, queries): # Store product information in a dictionary products = {} for data in product_data: product_id, price = map(int, data.split()) products[product_id] = price results = [] for query in queries: if query == \\"END\\": break elif query.startswith(\'R\'): _, X, Y = query.split() X, Y = int(X), int(Y) # Get all product IDs within the price range [X, Y] product_ids_in_range = [pid for pid, price in products.items() if X <= price <= Y] if product_ids_in_range: results.append(\\" \\".join(map(str, sorted(product_ids_in_range)))) else: results.append(\\"NONE\\") elif query.startswith(\'Q\'): _, Z = query.split() Z = int(Z) # Get the price for the product with ID Z if Z in products: results.append(str(products[Z])) else: results.append(\\"NOT FOUND\\") return results"},{"question":"In a city, there are \'n\' intersections, forming a network of roads. Each road connects exactly two different intersections. The roads are bidirectional, so if there\'s a road between intersections x and y, you can travel from x to y and vice versa. Due to current road construction and repairs, the city planning committee wants to know the most extended journey one can make on these roads by visiting any intersection no more than once. This journey, known as the \\"longest simple path,\\" is measured by the number of roads traveled. You are to develop a program that computes the length of the longest simple path in the given network of intersections and roads. # Input - The first line of the input contains a single integer, n (2 ≤ n ≤ 100000) — the number of intersections. - The following n-1 lines each contain two integers, u and v (1 ≤ u, v ≤ n), describing a road between intersections u and v. # Output - Print one number — the length of the longest simple path in the network of intersections. # Example Input ``` 4 1 2 1 3 3 4 ``` Output ``` 3 ``` # Note In the example, one of the longest simple paths is [2, 1, 3, 4]. It travels through three roads - from 2 to 1, from 1 to 3, and from 3 to 4. Another example of a longest simple path in this network is [4, 3, 1, 2], also traveling through three roads.","solution":"from collections import defaultdict, deque def longest_simple_path(n, roads): # Create an adjacency list graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Function to perform BFS and return the furthest node and its distance def bfs(start): visited = [-1] * (n + 1) queue = deque([(start, 0)]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: node, dist = queue.popleft() if dist > max_distance: max_distance = dist farthest_node = node for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = dist + 1 queue.append((neighbor, dist + 1)) return farthest_node, max_distance # Perform BFS from an arbitrary node (1) to find one end of the longest path far_node_1, _ = bfs(1) # Perform BFS from this farthest node to find the maximum distance in the network _, max_distance = bfs(far_node_1) return max_distance # Example usage: n = 4 roads = [(1, 2), (1, 3), (3, 4)] print(longest_simple_path(n, roads)) # Output should be 3"},{"question":"Alice is participating in a treasure hunt game where she needs to collect treasures from different rooms in a cave. Each room has a certain number of treasures, and she can move from one room to another. The cave can be represented as a directed graph with `n` rooms and `m` one-way paths. Each room can contain zero or more treasures. Alice starts in room `1` and wants to finish in room `n`. On her way from room `1` to room `n`, she should collect as many treasures as possible. However, not all paths may be accessible, and she can only move along the given paths. Write a program that finds out the maximum number of treasures Alice can collect from room `1` to room `n`. Input - The first line contains two integers `n` and `m` (2 ≤ n ≤ 500, 1 ≤ m ≤ 10000) — the number of rooms and the number of paths. - The second line contains `n` integers `t1, t2, ..., tn` (0 ≤ ti ≤ 1000) — the number of treasures in each room. - The next `m` lines describe the paths. Each path is represented by two integers `u` and `v` (1 ≤ u, v ≤ n), which means there is a one-way path from room `u` to room `v`. Output Print a single integer — the maximum number of treasures Alice can collect on her way from room `1` to room `n`. If there is no way to reach room `n` from room `1`, print `-1`. Example Input 5 6 5 2 3 7 1 1 2 2 3 3 4 2 4 4 5 3 5 Output 18","solution":"from collections import deque, defaultdict def max_treasures(n, m, treasures, paths): graph = defaultdict(list) for u, v in paths: graph[u].append(v) # Initialize the maximum treasures to collect from each room as -1 (unreachable) max_treasures = [-1] * (n + 1) max_treasures[1] = treasures[0] # Starting from room 1 queue = deque([1]) while queue: curr_room = queue.popleft() for next_room in graph[curr_room]: if max_treasures[next_room] < max_treasures[curr_room] + treasures[next_room - 1]: max_treasures[next_room] = max_treasures[curr_room] + treasures[next_room - 1] queue.append(next_room) return max_treasures[n] if max_treasures[n] != -1 else -1"},{"question":"A messaging app records the duration of messages in seconds sent throughout the day. However, the company wants to correct their data system so that all messages longer than 60 seconds are truncated to exactly 60 seconds. You are asked to write a program to help them correct their data. You will be given a list of integers, where each integer represents the duration of a message in seconds. Your task is to transform this list so that any duration that exceeds 60 is set to 60. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of messages. - The second line contains n integers separated by spaces, representing the durations of the messages in seconds. Each integer will be in the range [1, 10^6]. Output: - Print the transformed list of message durations, with any duration exceeding 60 replaced by 60. Examples: Input: 5 45 67 120 30 90 Output: 45 60 60 30 60 Input: 3 15 10 5 Output: 15 10 5 Note: In the first example, the durations 67, 120, and 90 are all reduced to 60. In the second example, no durations exceed 60, so the list remains unchanged.","solution":"def transform_durations(n, durations): Transforms the list so that any duration that exceeds 60 seconds is replaced by 60 seconds. Parameters: n (int): Number of durations durations (List[int]): List of message durations Returns: List[int]: Transformed list of durations return [min(duration, 60) for duration in durations]"},{"question":"Ema is organizing a series of lectures in her conference hall. The hall is equipped with a large screen that can display one lecture at a time. Each lecture has a start time and an end time. Ema wants to know the maximum number of lectures that can be scheduled without any overlaps. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of lectures. The next n lines each contain two integers si and ei (1 ≤ si < ei ≤ 10^9) — the start time and end time of each lecture. Output Print a single integer, the maximum number of lectures that can be scheduled without overlaps. Examples Input 3 1 2 2 3 3 4 Output 3 Input 3 1 3 2 4 3 5 Output 2 Note In the first example, all lectures can be scheduled one after the other without any overlaps. Therefore, the maximum number of lectures is 3. In the second example, only two non-overlapping lectures can be scheduled: either (1,3) and (3,5) or (2,4) and (3,5). Therefore, the maximum number of lectures is 2.","solution":"def max_non_overlapping_lectures(n, lectures): Returns the maximum number of non-overlapping lectures that can be scheduled. :param n: Number of lectures :param lectures: List of tuples, each containing the start and end time of a lecture :return: Maximum number of non-overlapping lectures # Sort lectures by their end time lectures.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in lectures: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given a string containing lowercase letters and digits. Your task is to create the lexicographically smallest string possible by inserting exactly one space somewhere in the original string. The string must be split into exactly two non-empty parts by the inserted space. Input A single line containing a string s of length n (2 ≤ n ≤ 1000) consisting of lowercase letters and digits. Output A single line containing the lexicographically smallest string that can be obtained by inserting exactly one space. Examples Input ab12 Output a b12 Input a1b2 Output a 1b2 Input bca123 Output b ca123","solution":"def smallest_lexicographic_split(s): Returns the lexicographically smallest string possible by inserting exactly one space somewhere in the original string such that the string is split into exactly two non-empty parts. n = len(s) smallest_string = s # Iterate over all possible positions to insert the space for i in range(1, n): # Create the string with the space inserted split_string = s[:i] + \' \' + s[i:] # Update the smallest_string if the new string is lexicographically smaller if split_string < smallest_string: smallest_string = split_string return smallest_string"},{"question":"You are a software engineer working for a smart home company. One of your tasks is to help integrate smart temperature sensors into the home system. These sensors report the temperature data from various rooms in the house at different times throughout the day. You need to develop a program to display the highest temperature recorded in each room over the entire day. Input The input consists of multiple test cases. Each test case is provided in the following format: ``` r room1 t1,1 t1,2 ... t1,n1 room2 t2,1 t2,2 ... t2,n2 ... roomr tr,1 tr,2 ... tr,nr ``` - `r` (1 ≤ r ≤ 20) is the number of rooms. - `roomi` is the name of the room, a string containing only uppercase or lowercase letters, and has a maximum length of 15 characters. - `ti,j` (-100 ≤ ti,j ≤ 100) is an integer representing the temperature recorded in room `i`. There are `ni` temperatures recorded for this room (1 ≤ ni ≤ 50). The end of input is indicated by an `r` value of 0. Output For each test case, output the name of the room (in lexicographical order) and the highest temperature recorded in that room, separated by a single space. Each room\'s output should be on a new line. After printing the output for each test case, print a blank line to separate the results of different test cases. Example Input ``` 3 livingroom 22 25 24 21 kitchen 30 29 28 32 bedroom 19 20 18 2 office 15 16 14 bathroom 26 27 28 0 ``` Output ``` bedroom 20 kitchen 32 livingroom 25 bathroom 28 office 16 ```","solution":"def highest_temperatures(data): Returns the highest temperature recorded in each room in lexicographical order. parsed_data = data.strip().split(\'n\') results = [] idx = 0 while idx < len(parsed_data): r = int(parsed_data[idx]) if r == 0: break idx += 1 rooms = [] for _ in range(r): line = parsed_data[idx].split() room = line[0] temperatures = list(map(int, line[1:])) max_temp = max(temperatures) rooms.append((room, max_temp)) idx += 1 rooms.sort(key=lambda x: x[0]) results.append(\\"n\\".join(f\\"{room} {temp}\\" for room, temp in rooms)) return \\"nn\\".join(results) # Example usage: data = 3 livingroom 22 25 24 21 kitchen 30 29 28 32 bedroom 19 20 18 2 office 15 16 14 bathroom 26 27 28 0 print(highest_temperatures(data))"},{"question":"Imagine you are tasked with building an amusement park attraction that consists of a series of interconnected rides and pathways. Each ride and pathway can be thought of as nodes and edges in a graph, respectively. Each edge has a specific length, which represents the distance between the nodes it connects. You need to find the shortest path between the entrance of the park and the exit, providing the distance as output. Input: - The first line contains integers N and M: N is the number of nodes (rides) and M is the number of edges (pathways). - The second line contains the start node S (entrance) and the end node E (exit). - The next M lines each contain three integers u, v, and w, representing an edge from node u to node v with length w. Output: - Print the length of the shortest path from the entrance (S) to the exit (E). If there is no path, print -1. Constraints: 1 ≤ N ≤ 10^5 1 ≤ M ≤ 5*10^5 1 ≤ u, v ≤ N 0 ≤ w ≤ 10^9 Note: The nodes are numbered from 1 to N, and all paths are bidirectional. SAMPLE INPUT 6 9 1 6 1 2 7 1 3 9 1 6 14 2 3 10 2 4 15 3 4 11 3 6 2 4 5 6 5 6 9 SAMPLE OUTPUT 11","solution":"import heapq def shortest_path(N, M, S, E, edges): Find the shortest path in an undirected graph using Dijkstra\'s algorithm. Args: N (int): Number of nodes. M (int): Number of edges. S (int): Start node. E (int): End node. edges (list of tuples): List of edges, each tuple is (u, v, w). Returns: int: Length of the shortest path from S to E, or -1 if there is no path. graph = {i: [] for i in range(1, N+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm initialization pq = [(0, S)] # Priority queue of (distance, node) dist = {i: float(\'inf\') for i in range(1, N+1)} dist[S] = 0 visited = set() while pq: current_dist, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) if current_node == E: return current_dist for neighbor, weight in graph[current_node]: if neighbor not in visited: new_distance = current_dist + weight if new_distance < dist[neighbor]: dist[neighbor] = new_distance heapq.heappush(pq, (new_distance, neighbor)) return -1 if dist[E] == float(\'inf\') else dist[E]"},{"question":"A string is called a \\"Unique Shuffler\\" if no two adjacent characters in the string are the same. You are given a string and you need to determine if it is possible to rearrange the string such that it becomes a Unique Shuffler. If it is possible, return the rearranged string. If there are multiple possible rearrangements, return any of them. If it is not possible, return \\"Not Possible\\". Input: - The first line contains an integer T, the number of test cases. - The next T lines each contain a string S. Output: - For each test case, output a rearranged string or \\"Not Possible\\". Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 S contains only lowercase English letters. SAMPLE INPUT 2 aab aaab SAMPLE OUTPUT aba Not Possible","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(S): Rearranges the string S such that no two adjacent characters are the same. If it is not possible, returns \\"Not Possible\\". # Create a frequency dictionary freq = Counter(S) # Create a max heap based on character frequencies max_heap = [] for char, count in freq.items(): heappush(max_heap, (-count, char)) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heappop(max_heap) result.append(char) # If there is a previous character that needs to be pushed back into heap if prev_char and prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Update previous character and its count prev_char = char prev_count = count + 1 result_str = \\"\\".join(result) if len(result_str) == len(S): return result_str else: return \\"Not Possible\\" def process_test_cases(test_cases): results = [] for S in test_cases: results.append(rearrange_string(S)) return results # Function to read input and output results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] for i in range(1, T + 1): test_cases.append(data[i]) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Given a string S consisting of lowercase English letters, we define a \\"substring palindrome\\" as a contiguous substring of S that reads the same backwards as forwards. Write a function to determine the number of unique \\"substring palindromes\\" in S. # Function Signature ```python def unique_palindromic_substrings(S: str) -> int: pass ``` # Input - A single string S (1 ≤ |S| ≤ 100). # Output - An integer representing the number of unique \\"substring palindromes\\" in S. # Example ```python print(unique_palindromic_substrings(\\"ababa\\")) # Output: 5 # Explanation: The unique palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". ``` # Approach 1. Generate all possible substrings of S. 2. Check if each substring is a palindrome. 3. Use a set to collect unique palindromic substrings. 4. Return the size of the set. # Note - A substring is a contiguous sequence of characters within a string. - A substring that reads the same both forwards and backwards is considered a palindrome. - Two substrings are considered different if their starting or ending positions in the original string are different. For instance, in the string \\"ababa\\", \\"a\\" appears at indices 0, 2, and 4 and should only be counted once.","solution":"def unique_palindromic_substrings(S: str) -> int: Returns the number of unique palindromic substrings in the given string S. def is_palindrome(s): return s == s[::-1] palindromic_substrings = set() for i in range(len(S)): for j in range(i + 1, len(S) + 1): substring = S[i:j] if is_palindrome(substring): palindromic_substrings.add(substring) return len(palindromic_substrings)"},{"question":"There are N different types of candies arranged in a row. Each type of candy is represented by a distinct number. You need to perform Q operations on this arrangement. In each operation, you will be given two integers L and R, representing the indices of the segment (1-based) of the candies that need to be reversed. Input: - First line contains two integers N and Q, the number of candies and the number of queries. - Second line contains N space-separated integers, representing the candy types. - Each of the following Q lines contains two integers L and R, indicating the indices of the segment to be reversed (inclusive). Output: For each query, print the new arrangement of the candies after performing the specified segment reversal. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N 1 ≤ candy-type ≤ 10^9 SAMPLE INPUT 5 3 1 2 3 4 5 1 3 2 4 1 5 SAMPLE OUTPUT 3 2 1 4 5 3 4 1 2 5 5 2 1 4 3 Explanation: After the first query, the segment from index 1 to 3 is reversed. New arrangement: [3, 2, 1, 4, 5] After the second query, the segment from index 2 to 4 is reversed. New arrangement: [3, 4, 1, 2, 5] After the third query, the segment from index 1 to 5 is reversed. New arrangement: [5, 2, 1, 4, 3]","solution":"def reverse_segments(n, q, candies, queries): result = [] for L, R in queries: # Adjust the indices to be 0-based for Python lists L -= 1 R -= 1 # Reverse the subsequence candies = candies[:L] + candies[L:R+1][::-1] + candies[R+1:] # Append the current arrangement to the result result.append(list(candies)) return result # Driver code to interact with console I/O if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) q = int(data[1]) candies = list(map(int, data[2:n+2])) queries = [] index = n + 2 for _ in range(q): L = int(data[index]) R = int(data[index+1]) queries.append((L, R)) index += 2 results = reverse_segments(n, q, candies, queries) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"Implement a function that, given a matrix of integers, returns the size of the largest square submatrix which contains all identical elements. # Function Signature ```python def largest_identical_square(matrix: List[List[int]]) -> int: ``` # Input - `matrix`: a 2D list of integers where each integer represents an element of the matrix. The matrix can have a size up to `1000 x 1000` elements. # Output - An integer which represents the size of the largest square submatrix consisting of identical elements. # Explanation You need to determine the size (i.e., the length of one side) of the largest possible square submatrix that can be found in the given matrix, where all elements of the submatrix are the same. If no square of size greater than 1x1 exists, the function should return 1. # Example ```python matrix = [ [2, 2, 3, 4], [5, 2, 2, 2], [9, 2, 2, 2], [7, 7, 7, 7] ] print(largest_identical_square(matrix)) # Output: 2 ``` # Constraints - The function should be optimized to handle matrices as large as `1000 x 1000` elements efficiently within reasonable time limits. - Elements in the matrix are arbitrary integers.","solution":"from typing import List def largest_identical_square(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 nrows = len(matrix) ncols = len(matrix[0]) dp = [[0] * ncols for _ in range(nrows)] max_square_size = 1 for i in range(nrows): for j in range(ncols): if i == 0 or j == 0: dp[i][j] = 1 else: if matrix[i][j] == matrix[i-1][j] and matrix[i][j] == matrix[i][j-1] and matrix[i][j] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_square_size = max(max_square_size, dp[i][j]) return max_square_size"},{"question":"In the kingdom of Quadrantland, there is a special grid used for communication. This grid is made up of cells, each containing a non-negative integer. Citizens love to send messages by selecting a subgrid (a rectangular section of the main grid) and calculating its \\"weight\\". The weight of a subgrid is defined as the sum of all integers within that subgrid. Given a grid of size n x m and q queries, each query describing a subgrid by its top-left and bottom-right corners, calculate the weight of each subgrid. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid, respectively. The next n lines contain m space-separated integers each, representing the grid. Each integer is between 0 and 10^5 inclusive. The following line contains an integer q (1 ≤ q ≤ 10^4), representing the number of queries. Each of the next q lines contains four space-separated integers r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m), describing the top-left (r1, c1) and bottom-right (r2, c2) corners of the subgrid for that query. Output For each query, print the weight of the corresponding subgrid. Examples Input 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output 12 28 Note In the first example, the grid is: 1 2 3 4 5 6 7 8 9 For the first query, the subgrid from (1, 1) to (2, 2) is: 1 2 4 5 The weight of this subgrid is 1 + 2 + 4 + 5 = 12. For the second query, the subgrid from (2, 2) to (3, 3) is: 5 6 8 9 The weight of this subgrid is 5 + 6 + 8 + 9 = 28.","solution":"def preprocess_grid(grid): n = len(grid) m = len(grid[0]) prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def query_weight(prefix_sum, r1, c1, r2, c2): return prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] def solve(grid, queries): prefix_sum = preprocess_grid(grid) results = [] for r1, c1, r2, c2 in queries: results.append(query_weight(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"In a small village, there is a peculiar tradition during their yearly festival. The village inhabitants participate in an event called \\"The Circular Run\\". In this event, participants run around a circular track that has several checkpoints. Each participant is given a record sheet that tracks the checkpoints they have passed. Due to the circular nature of the track, a participant passes the same checkpoints multiple times. However, the record sheets are not perfect, and some checkpoints might not be recorded due to errors. Your task is to determine the number of distinct checkpoints a participant has passed based on their record sheet. Input The first line contains an integer n (1 ≤ n ≤ 100) — the total number of entries on the participant\'s record sheet. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 50) — the sequence of checkpoint numbers that the participant has recorded. Output Print a single integer — the number of distinct checkpoints the participant has passed. Examples Input 7 1 2 3 4 5 2 3 Output 5 Input 5 3 1 4 1 5 Output 4 Input 6 10 20 30 20 10 30 Output 3 Note In the first example, the checkpoints recorded are [1, 2, 3, 4, 5, 2, 3]. The participant has passed checkpoints 1, 2, 3, 4, and 5, thus the number of distinct checkpoints is 5. In the second example, the checkpoints recorded are [3, 1, 4, 1, 5]. The participant has passed checkpoints 3, 1, 4, and 5, thus the number of distinct checkpoints is 4. In the third example, the checkpoints recorded are [10, 20, 30, 20, 10, 30]. The participant has passed checkpoints 10, 20, and 30, thus the number of distinct checkpoints is 3.","solution":"def count_distinct_checkpoints(n, checkpoints): Determines the number of distinct checkpoints a participant has passed. Args: n (int): The total number of entries on the participant\'s record sheet. checkpoints (list of int): The sequence of checkpoint numbers recorded. Returns: int: The number of distinct checkpoints the participant has passed. return len(set(checkpoints))"},{"question":"Sort File Entries In a file system, a directory contains many files. Each file has a unique name that consists of alphanumeric characters and is case-insensitive. Files can be listed in alphabetical order or by their size. For the same file name, if sorting by size, the order should be by increasing size. If sorting by alphabetical order, the comparisons should be case-insensitive (e.g., \\"File.txt\\" and \\"file.txt\\" should be treated as the same). Write a program that outputs the sorted list of file names according to the specified criteria. Input Format The input will include several test cases. Each test case starts with a line containing an integer N (1 ≤ N ≤ 100), the number of files. The next N lines each contain a string representing the file name followed by an integer representing the file size (1 ≤ size ≤ 1000). The file name is composed of only alphanumeric characters and has a maximum length of 50. After the file entries, there is a sorting criterion specified as either \\"name\\" or \\"size\\". A single zero on a line by itself marks the end of input. Output Format For each test case, output the filenames sorted according to the given criterion, each name on a new line. Sample Input ``` 3 FileA 10 fileb 8 fileC 15 name 2 alpha 20 Beta 15 size 0 ``` Sample Output ``` fileA fileb fileC Beta alpha ```","solution":"def sort_files(test_cases): results = [] for case in test_cases: N = case[\'number_of_files\'] files = case[\'files\'] criterion = case[\'criterion\'] if criterion == \'name\': files.sort(key=lambda x: x[0].lower()) elif criterion == \'size\': files.sort(key=lambda x: (x[1], x[0].lower())) result = [file[0] for file in files] results.append(result) return results"},{"question":"A new software system has been implemented to manage a savings account. This system needs to handle multiple operations, specifically depositing, withdrawing, and querying the balance. Your task is to create a simulation of this system based on a sequence of operations. **Operations:** - \\"D x\\": Deposit an amount x (0 < x ≤ 1000) to the account. - \\"W x\\": Withdraw an amount x (0 < x ≤ 1000) from the account. If the account has insufficient funds (balance < x), no withdrawal is made. - \\"Q\\": Query the current balance of the account. You need to process a sequence of n operations and output the results of each \\"Q\\" operation. **Input:** - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of operations. - The next n lines each contain an operation as described above. **Output:** - For each \\"Q\\" operation, print a single integer — the current balance of the account after that operation. **Example:** **Input:** ``` 6 D 100 Q W 50 Q W 60 Q ``` **Output:** ``` 100 50 50 ``` **Note:** - Initially, the balance of the account is 0. - Deposits increase the balance, withdrawals decrease it but cannot result in a negative balance.","solution":"def simulate_savings_account(n, operations): balance = 0 query_results = [] for operation in operations: op = operation.split() if op[0] == \\"D\\": balance += int(op[1]) elif op[0] == \\"W\\": amount = int(op[1]) if balance >= amount: balance -= amount elif op[0] == \\"Q\\": query_results.append(balance) return query_results"},{"question":"You are given an array of non-negative integers. You are allowed to perform the following operation exactly once: - Choose any two elements from the array and swap them. Determine the lexicographically smallest array that can be obtained after performing the swap exactly once. A sequence of integers a is lexicographically smaller than a sequence of integers b, if: - there is an index i (1 ≤ i ≤ min(n, m)) such that the first i-1 elements of the sequences a and b are the same, and the i-th element of sequence a is smaller than the i-th element of sequence b; - or the first min(n, m) elements in the sequences a and b are the same and n < m. Input The first line contains one integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the array. Output Print the lexicographically smallest array that can be obtained after performing the swap exactly once. Examples Input 5 3 2 1 5 4 Output 1 2 3 5 4 Input 6 1 9 8 7 6 5 Output 1 5 8 7 6 9","solution":"def lexicographically_smallest_after_swap(n, arr): Determine the lexicographically smallest array after exactly one swap. Parameters: n (int): The number of elements in the array. arr (list): The array of non-negative integers. Returns: list: The lexicographically smallest array. sorted_arr = sorted(arr) for i in range(n): if arr[i] != sorted_arr[i]: swap_pos = arr.index(sorted_arr[i]) # Perform the swap to get the smallest lexicographical order arr[i], arr[swap_pos] = arr[swap_pos], arr[i] break return arr"},{"question":"In this problem, you will be given two integer arrays, A and B, both of size N. Your task is to determine if array A can be transformed into array B by performing a series of operations. In one operation, you can select two adjacent elements in array A and swap them. If it is possible, print \\"POSSIBLE\\" otherwise print \\"IMPOSSIBLE\\". Input First line of input contains integer T denoting number of test cases. For each test case T, the first line of input contains number N denoting size of arrays A and B. The second line contains N space-separated integers denoting elements of array A and the third line contains N space-separated integers denoting elements of array B. Output Print \\"POSSIBLE\\" or \\"IMPOSSIBLE\\" as explained above. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100,000 1 ≤ A[i], B[i] ≤ 1,000,000,000 Sample Input 2 3 1 3 2 1 2 3 4 4 1 3 2 1 2 3 4 Sample Output POSSIBLE POSSIBLE","solution":"def is_transform_possible(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] B = test_cases[i][2] if sorted(A) == sorted(B): results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"Given a list of N integers representing the heights of a series of buildings standing in a row, you will be asked to process Q queries. Each query will provide two integers L and R, representing a range of buildings. Your task is to count how many of these buildings in the given range have heights that are strictly greater than both their neighboring buildings. Note: For the first and last building in the range, consider the neighboring building to be nonexistent. Input: The first line of the input will contain N, the number of buildings. The next line will contain N space-separated integers representing the heights of the buildings. The next line will contain Q, the number of queries. Then Q subsequent lines will each contain two integers L and R. Output: For each query, output the answer in a separate line. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Height of buildings ≤ 10^9 1 ≤ Q ≤ 10^4 1 ≤ L ≤ R ≤ N SAMPLE INPUT 6 3 4 5 2 1 7 2 1 4 2 6 SAMPLE OUTPUT 1 2 Explanation For the first query (1 to 4), the possible buildings are at heights 3, 4, 5, 2. Building with height 5 is strictly greater than both 4 and 2. Hence the answer is 1. For the second query (2 to 6), the possible buildings are at heights 4, 5, 2, 1, 7. Buildings with heights 5 and 7 both are strictly greater than their neighboring buildings. Hence the answer is 2.","solution":"def count_tall_buildings(buildings, queries): results = [] for L, R in queries: count = 0 for i in range(L - 1, R): if (i == 0 or buildings[i] > buildings[i - 1]) and (i == len(buildings) - 1 or buildings[i] > buildings[i + 1]): count += 1 results.append(count) return results"},{"question":"Palindrome Chain: A palindrome is a sequence that reads the same backward as forward. Sometimes, by reversing the digits of a number and adding it to the original number, we might get a larger number that is a palindrome. If the resulting sum is not a palindrome, we repeat the process until we obtain a palindrome. For this problem, you need to write a program that reports the number of iterations required to obtain a palindrome for a given integer. Input A sequence of integers is given as input. You may assume that each integer is positive and less than 10,000. The end of the input is indicated by a number 0. Output Corresponding to each number, the program should output the number of iterations required to reach a palindrome. Each output should be printed on a new line. Example Input 87 89 75 0 Output 4 24 2 Explanation: - 87 requires 4 iterations: 87 + 78 = 165, 165 + 561 = 726, 726 + 627 = 1353, 1353 + 3531 = 4884 (palindrome). - 89 requires 24 iterations to reach 8813200023188. - 75 requires 2 iterations: 75 + 57 = 132, 132 + 231 = 363 (palindrome).","solution":"def reverse_number(n): Returns the reverse of integer n. For example, reverse_number(123) returns 321. return int(str(n)[::-1]) def is_palindrome(n): Checks if integer n is a palindrome. For example, is_palindrome(121) returns True, is_palindrome(123) returns False. return str(n) == str(n)[::-1] def palindrome_chain_length(n): Returns the number of iterations required to transform n into a palindrome by repeatedly reversing its digits and adding the result to the original number. iterations = 0 while not is_palindrome(n): n += reverse_number(n) iterations += 1 return iterations def iterations_to_palindrome(numbers): Takes a list of positive integers and returns the number of iterations required to transform each integer into a palindrome. It assumes end of input is indicated by the integer 0. results = [] for number in numbers: if number == 0: break results.append(palindrome_chain_length(number)) return results"},{"question":"Sarah is planning a treasure hunt in a park and wants to hide a few treasure chests along a trail. She decides that each chest should be hidden at specific positions along the trail, and she wants to optimize the locations of the chests to maximize the distance from any given chest to the nearest chest. Sarah has identified all the possible hiding spots along the trail, represented by an array of distinct integers `positions`, where each integer indicates the position of a possible hiding spot. Sarah also decides on the total number of treasure chests she wants to hide, given by the integer `k`. Help Sarah to determine the largest possible minimum distance between any two chests if she hides exactly `k` chests along the trail. Input: - The first line contains two integers, `n` and `k` (2 ≤ k ≤ n ≤ 100,000) — the number of possible hiding spots and the number of chests to hide, respectively. - The second line contains `n` distinct integers `positions[i]` (0 ≤ positions[i] ≤ 1,000,000,000), describing the possible positions along the trail, given in any order. Output: - Print the largest possible minimum distance between any two chests. Example: Input: 5 3 1 2 8 4 9 Output: 3 Explanation: In this example, Sarah can place the first chest at position 1, the second chest at position 4, and the third chest at position 8. The minimum distances between any two chests are: |4-1| = 3, |8-4| = 4, |8-1| = 7. Hence, the maximum possible minimum distance is 3.","solution":"def largest_min_distance(n, k, positions): Function to determine the largest possible minimum distance between any two chests when exactly k chests are hidden along the trail at n possible positions. positions.sort() def is_possible(min_dist): count = 1 last_position = positions[0] for i in range(1, n): if positions[i] - last_position >= min_dist: count += 1 last_position = positions[i] if count == k: return True return False low, high = 1, positions[-1] - positions[0] best_dist = 0 while low <= high: mid = (low + high) // 2 if is_possible(mid): best_dist = mid low = mid + 1 else: high = mid - 1 return best_dist"},{"question":"Write a program that determines the number of trailing zeros in the factorial of a given number n. Constraints * 0 ≤ n ≤ 1,000,000 * The number of data sets ≤ 50 Input Input consists of several data sets. Each data set contains a single integer n in a line. The input terminates with EOF. Output For each data set, print the number of trailing zeros in the factorial of n. Example Input 10 25 Output 2 6","solution":"def count_trailing_zeros(n): Returns the number of trailing zeros in the factorial of n. count = 0 while n >= 5: n //= 5 count += n return count def process_input(data_sets): Processes the list of data sets and returns the results as a list of number of trailing zeros for each set. results = [] for n in data_sets: results.append(count_trailing_zeros(n)) return results # Example usage: # data_sets = [10, 25] # print(process_input(data_sets)) # Output: [2, 6]"},{"question":"A group of friends decided to play a game on their holiday trip where they stand in a straight line. Each friend has a distinct energy level given by an array of positive integers. The game goes as follows: Starting from the first friend, each person tries to pass their energy to the next friend such that the next friend can either receive all or a part of the energy. The objective is to maximize the minimum energy level held by any friend at the end of the game. The friends can rearrange themselves in the line before starting the energy passing game to achieve this. Given the initial energy levels of the friends, find the maximum possible minimum energy level that can be achieved. Each friend should have at least some non-zero energy after the redistribution. Input: - The first line contains an integer n (2 ≤ n ≤ 100), representing the number of friends. - The second line contains n positive integers, representing the energy levels of the friends. Output: - Print a single integer, which is the maximum possible minimum energy level after the optimal redistribution. Examples: Input: 5 1 2 3 4 5 Output: 3 Input: 4 9 7 5 3 Output: 6 Explanation: In the first example, friends can rearrange themselves as follows: [1, 3, 5, 2, 4] to achieve minimum energy level of 3 for everyone after redistribution. In the second example, friends can optimally rearrange as [7, 9, 5, 3], achieving minimum energy level of 6 after redistribution.","solution":"def max_min_energy(n, energies): Returns the maximum possible minimum energy level that can be achieved by optimally redistributing the given energy levels of friends. def can_achieve_min_energy(target): total_energy = sum(energies) required_energy = target * n return total_energy >= required_energy # Sort the energies in descending order for easier separation energies.sort(reverse=True) # Binary search to find the maximum possible minimum energy level left, right = 1, sum(energies) // n while left < right: mid = (left + right + 1) // 2 if can_achieve_min_energy(mid): left = mid else: right = mid - 1 return left"},{"question":"Problem Pascal is working on an advanced robotic control system for a series of automated manufacturing machines. To ensure optimal performance, he needs to synchronize the movement schedules of multiple robots. Each robot follows a predefined set of instructions to perform its tasks, but due to various constraints, tasks can only be initiated at time intervals that are multiples of a specific integer. Pascal needs to find the earliest possible time at which all robots can start their unique set of tasks simultaneously, considering the interval constraints for each robot. Given the number of robots, and an array representing the allowable start intervals for each robot, write a program to calculate the earliest common start time for all robots. Constraints The input satisfies the following conditions. * All inputs are integers. * 2 ≤ number of robots ≤ 1000 * 1 ≤ start interval for each robot ≤ 1000000 Input The input consists of multiple test cases. One test case is given in the following format. The end of input is indicated by EOF. n a1 a2 a3 ... an here, * n: Number of robots * a1, a2, ... an: Start intervals for each robot Output Output the earliest common start time for each test case on one line. Example Input 3 3 4 5 2 6 7 4 8 12 15 20 Output 60 42 120","solution":"import sys import math def lcm(x, y): return x * y // math.gcd(x, y) def earliest_start_time(intervals): result = intervals[0] for interval in intervals[1:]: result = lcm(result, interval) return result def main(): input = sys.stdin.read().strip() for line in input.split(\\"n\\"): if line.strip(): parts = list(map(int, line.split())) n = parts[0] intervals = parts[1:] print(earliest_start_time(intervals)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string consisting of digits from \'0\' to \'9\'. Your task is to determine whether the string can be rearranged to form a multiple of 3. A number is a multiple of 3 if and only if the sum of its digits is divisible by 3. Write a function that takes a string as input and returns \\"YES\\" if the digits of the string can be rearranged to form a multiple of 3, and \\"NO\\" otherwise. # Input - A single line containing a string of digits, `s` (1 ≤ |s| ≤ 10^5). # Output - A single line containing \\"YES\\" or \\"NO\\". # Example Input ``` 123 ``` Output ``` YES ``` Input ``` 011 ``` Output ``` YES ``` Input ``` 9981 ``` Output ``` YES ``` Input ``` 770 ``` Output ``` NO ``` # Note In the first example, the sum of the digits is 1 + 2 + 3 = 6, which is divisible by 3, so the output is \\"YES\\". In the second example, the sum of the digits is 0 + 1 + 1 = 2, which is not divisible by 3, but by re-arranging to form 110, sum of the digits is also 1 + 1 + 0 = 2, which is not divisible by 3, so the output should be \\"YES\\". In the third example, the sum of the digits is 9 + 9 + 8 + 1 = 27, which is divisible by 3, so the output is \\"YES\\". In the fourth example, the sum of the digits is 7 + 7 + 0 = 14, which is not divisible by 3, and no re-arrangement can change that, so the output is \\"NO\\".","solution":"def can_form_multiple_of_3(s): Returns \\"YES\\" if the digits of the string can be rearranged to form a multiple of 3, and \\"NO\\" otherwise. # Calculate the sum of the digits total_sum = sum(int(digit) for digit in s) # Check if the sum is divisible by 3 if total_sum % 3 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers, find out the length of the longest subarray that forms a valid mountain. A mountain subarray satisfies the following conditions: 1. The subarray contains at least three elements. 2. There exists an index `i` (1 <= i < length of subarray - 1) such that: - `arr[0] < arr[1] < ... < arr[i]` - `arr[i] > arr[i+1] > ... > arr[length-1]` Write a function that takes an array of integers and returns the length of the longest mountain subarray. If no mountain subarray exists, return 0. # Input The input consists of two lines: 1. The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of elements in the array. 2. The second line contains `n` integers `arr[i]` (-10^5 ≤ arr[i] ≤ 10^5), representing the elements of the array. # Output Print a single integer representing the length of the longest mountain subarray, or 0 if no such subarray exists. # Example Input ``` 9 2 1 4 7 3 2 5 7 6 ``` Output ``` 5 ``` Input ``` 6 2 2 2 2 2 2 ``` Output ``` 0 ``` # Note In the first example, the longest mountain subarray is `[1, 4, 7, 3, 2]` with length 5. In the second example, there is no mountain subarray; thus the output is 0.","solution":"def longest_mountain(arr): n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i-1] < arr[i] > arr[i+1]: # peek of the mountain left = i right = i # Move left pointer to the start of the mountain while left > 0 and arr[left-1] < arr[left]: left -= 1 # Move right pointer to the end of the mountain while right < n-1 and arr[right+1] < arr[right]: right += 1 # Update the longest mountain length longest = max(longest, right - left + 1) return longest"},{"question":"You are given a sequence of operations to be performed on an initially empty stack. The operations are of three types: 1. **PUSH x**: Push the integer x onto the stack. 2. **POP**: Remove the top element from the stack. 3. **MAX**: Output the maximum element currently in the stack. For each operation of type **MAX**, print the maximum element from the stack on a new line. If the stack is empty at the time of the **MAX** operation, print \\"EMPTY\\". Input The first line contains an integer n — the number of operations (1 ≤ n ≤ 100000). The next n lines describe the operations. Each line will be either: - PUSH x (1 ≤ x ≤ 1000000) - POP - MAX Output For each **MAX** operation, print the maximum element in the stack. If the stack is empty at the time of the **MAX** operation, print \\"EMPTY\\". Examples Input 6 PUSH 3 PUSH 2 MAX POP POP MAX Output 3 EMPTY Input 8 PUSH 1 PUSH 2 PUSH 3 MAX POP MAX POP MAX Output 3 2 1 Note In the first example, after pushing 3 and 2 onto the stack, the maximum element is 3. After two pop operations, the stack becomes empty, so the second **MAX** operation outputs \\"EMPTY\\". In the second example, pushing 1, 2, and 3 onto the stack results in 3 being the maximum. After popping 3, the maximum is 2, and after popping 2, the maximum is 1.","solution":"class Stack: def __init__(self): self.stack = [] self.max_stack = [] def push(self, x): self.stack.append(x) if not self.max_stack or x >= self.max_stack[-1]: self.max_stack.append(x) def pop(self): if self.stack: top_element = self.stack.pop() if top_element == self.max_stack[-1]: self.max_stack.pop() def max(self): if not self.max_stack: return \\"EMPTY\\" return self.max_stack[-1] def process_operations(operations): stack = Stack() result = [] for operation in operations: if operation.startswith(\\"PUSH\\"): _, value = operation.split() stack.push(int(value)) elif operation == \\"POP\\": stack.pop() elif operation == \\"MAX\\": result.append(stack.max()) return result"},{"question":"Given an undirected graph with `n` nodes and `m` edges, determine if it\'s possible to color the graph using exactly 3 colors such that no two adjacent nodes share the same color. If possible, output a valid coloring. Otherwise, output -1. Input The first line contains two integers `n` (1 ≤ n ≤ 100) and `m` (0 ≤ m ≤ 200) — the number of nodes and the number of edges. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) representing an undirected edge between nodes `u` and `v`. Output If it is possible to color the graph using exactly 3 colors such that no two adjacent nodes share the same color, output \\"YES\\" followed by a line with `n` integers where the `i`th integer is the color of node `i` (an integer from 1 to 3). If it is not possible, output \\"NO\\". Example Input 6 7 1 2 2 3 3 4 4 5 5 6 6 1 1 4 Output YES 1 2 1 2 1 3 Input 4 5 1 2 2 3 3 4 4 1 1 3 Output NO","solution":"def possible_to_color_graph(n, m, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) colors = [0] * (n + 1) def bfs(start): queue = deque([start]) colors[start] = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if colors[neighbor] == 0: colors[neighbor] = 4 - colors[node] if colors[node] != 3 else 1 queue.append(neighbor) elif colors[neighbor] == colors[node]: return False return True for node in range(1, n + 1): if colors[node] == 0: if not bfs(node): return \\"NO\\" return \\"YESn\\" + \' \'.join(map(str, colors[1:])) # Example usage: # n = 6 # m = 7 # edges = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1), (1, 4)] # print(possible_to_color_graph(n, m, edges))"},{"question":"Write a function to calculate the total distance walked. Input: The first line contains T, the number of test cases. For each test case, there is one line containing space-separated integers representing the positions (in meters) at which a walker changes direction. Output: For each test case, print the total distance walked by the walker in separate lines. Constraints: 1 ≤ T ≤ 10 1 ≤ Number of positions in each test case ≤ 10^5 -10^5 ≤ Position value ≤ 10^5 SAMPLE INPUT: 3 2 5 8 -3 -1 2 4 0 0 0 0 7 SAMPLE OUTPUT: 6 7 7","solution":"def total_distance_walked(test_cases): results = [] for positions in test_cases: total_distance = sum(abs(positions[i] - positions[i-1]) for i in range(1, len(positions))) results.append(total_distance) return results"},{"question":"Problem Statement Given a string containing only \'(\' and \')\' characters, determine if it is a valid parentheses string. A valid parentheses string is defined as: 1. An empty string is a valid string. 2. If \'A\' and \'B\' are valid strings, then \'AB\' is also a valid string. 3. If \'A\' is a valid string, then \'(A)\' is also a valid string. Write a function to check if the given string is valid. # Input: The input consists of a single line containing a string `S` of length `N` (1 ≤ N ≤ 100), composed of only \'(\' and \')\'. # Output: Print `True` if the string `S` is a valid parentheses string, otherwise print `False`. # Example Input: ``` (()) ``` Output: ``` True ``` Input: ``` (())) ``` Output: ``` False ``` Input: ``` ((()())) ``` Output: ``` True ``` Input: ``` ()) ``` Output: ``` False ```","solution":"def is_valid_parentheses(s): Determine if the input string containing only \'(\' and \')\' is a valid parentheses string. Args: s (str): Input string containing only \'(\' and \')\'. Returns: bool: True if the string is a valid parentheses string, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack # The stack should be empty if the string is valid"},{"question":"You are given a string S of length N consisting of lowercase alphabets. Process Q queries of the following types. The i-th query is represented by three integers T_i, L_i, and R_i, and a character C_i where applicable. * T_i=1: Replace all characters in the substring S[L_i:R_i] (inclusive) with C_i. * T_i=2: Check if the substring S[L_i:R_i] is a palindrome. Note: A palindrome is a string that reads the same backward as forward, for example, \\"radar\\" or \\"level\\". Constraints * 1 leq N leq 10^5 * 1 leq Q leq 10^5 * 1 leq L_i leq R_i leq N * \'a\' leq C_i leq \'z\' * All values in Input are integer or lowercase alphabets. Input Input is given from Standard Input in the following format: N Q S T_1 L_1 R_1 C_1 T_2 L_2 R_2 vdots T_Q L_Q R_Q (C_Q) Output For each query with T_i=2, print \\"YES\\" if the substring is a palindrome, otherwise print \\"NO\\". Example Input 7 4 abcdefg 2 1 3 1 2 4 x 2 1 3 2 2 4 Output NO NO YES","solution":"def process_queries(n, q, s, queries): s = list(s) # Convert string to list for easier manipulation results = [] for query in queries: t, l, r = query[0], query[1], query[2] if t == 1: # Replace all characters in the substring S[L_i:R_i] (1-indexed) with C_i c = query[3] for i in range(l-1, r): s[i] = c elif t == 2: # Check if the substring S[L_i:R_i] (1-indexed) is a palindrome substring = s[l-1:r] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of positive integers and an integer k. Your task is to determine if the array can be split into k consecutive subarrays, where each subarray has the same sum. Input The first input line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n), where n is the number of elements in the array and k is the number of required subarrays. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output If it is possible to split the array into k consecutive subarrays where each subarray has the same sum, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 6 3 2 2 2 2 2 2 Output YES Input 6 2 1 2 3 4 5 6 Output NO","solution":"def can_split_into_k_consecutive_subarrays(n, k, arr): Determines if the array can be split into k consecutive subarrays of equal sum. Args: n : int : The number of elements in the array k : int : The number of required subarrays arr : List[int] : The array of positive integers Returns: str : \\"YES\\" if it is possible to split the array into k consecutive subarrays with equal sum, otherwise \\"NO\\". if n % k != 0: return \\"NO\\" target_sum = sum(arr) // k current_sum = 0 subarray_count = 0 for num in arr: current_sum += num if current_sum == target_sum: subarray_count += 1 current_sum = 0 elif current_sum > target_sum: return \\"NO\\" return \\"YES\\" if subarray_count == k else \\"NO\\""},{"question":"Given an array of integers where the ith element represents the price of a stock on day i, write a function to find the maximum profit you can achieve from a single buy and sell transaction. You cannot sell a stock before you buy one. Your function should be optimal with a time complexity of O(n). Input The first line of the input contains an integer t (1 <= t <= 100) - the number of test cases. Each of the next t lines contains an integer n (1 <= n <= 100,000), the number of days and an array of n integers representing the stock prices. Output For each test case, output the maximum profit that can be achieved from one transaction, or 0 if no profit is possible. Example Input 3 6 7 1 5 3 6 4 5 7 6 4 3 1 5 1 2 3 4 5 Output 5 0 4 Explanation In the first test case, the maximum profit can be achieved by buying the stock on day 2 (price = 1) and selling it on day 5 (price = 6), resulting in a profit of 6 - 1 = 5. In the second test case, the prices are decreasing, and no profitable transaction is possible, so the output is 0. In the third test case, the maximum profit can be achieved by buying the stock on day 1 (price = 1) and selling it on day 5 (price = 5), resulting in a profit of 5 - 1 = 4.","solution":"def max_profit(prices): Returns the maximum profit from a single buy and sell transaction. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_test_cases(t, test_cases): Process multiple test cases and return a list of results for each test case. results = [] for i in range(t): n = test_cases[i][0] prices = test_cases[i][1] results.append(max_profit(prices)) return results"},{"question":"Eva likes to create secret codes using numbers. She considers a number as a valid code if it is the same when read forwards and backwards. She has a list of secret codes and wants to identify the longest valid code from the list. Write a program to determine the length of the longest valid secret code. If there are multiple codes with the same maximum length, return the smallest one among them. If no valid code is found, return -1. INPUT The first line of input contains the integer N, the number of possible secret codes. Each of the following N lines contains a single integer, its length being between 1 and 15 digits inclusive. OUTPUT The first and only line of output must contain the length of the longest valid code. If there are multiple codes with the same maximum length, print the smallest one among them. If no valid code is found, return -1. CONSTRAINTS 1 ≤ N ≤ 100 SAMPLE INPUT 5 12321 45654 78987 12345 6789 SAMPLE OUTPUT 5","solution":"def longest_valid_code_length(codes): Returns the length of the longest valid secret code that is a palindrome. If there are multiple codes with the same maximum length, returns the smallest one. If no valid code is found, returns -1. valid_codes = [code for code in codes if code == code[::-1]] if not valid_codes: return -1 longest_code = max(valid_codes, key=lambda x: (len(x), int(x))) return len(longest_code) # Example usage # N = 5 # codes = [\\"12321\\", \\"45654\\", \\"78987\\", \\"12345\\", \\"6789\\"] # print(longest_valid_code_length(codes)) # Output: 5"},{"question":"Given a list of integers, your task is to determine if there are two distinct indices i and j in the list such that the sum of the integers at those indices is equal to a given target value. Input The first line of input contains an integer n (2 ≤ n ≤ 100) representing the number of integers in the list. The second line contains n space-separated integers, each between -1000 and 1000, inclusive. The third line contains an integer target, which is the target sum value. Output Output \\"YES\\" if there are two distinct indices i and j such that arr[i] + arr[j] equals the target, otherwise output \\"NO\\". Examples Input 5 1 4 45 6 10 16 Output YES Input 4 1 2 3 9 8 Output NO","solution":"def has_pair_with_sum(n, arr, target): Given a list of integers, determines if there are two distinct indices i and j in the list such that the sum of the integers at those indices equals the given target value. Parameters: n (int): The number of integers in the list. arr (list of int): The list of integers. target (int): The target sum value. Returns: str: \\"YES\\" if there are two such distinct indices, otherwise \\"NO\\". seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given two integers N and M which represent the number of rows and columns in a grid. Write a program to find the total number of cells in the grid. Constraints * 1 leq N, M leq 100 * All values in input are integers. Input Input is provided via standard input in the following format: N M Output Print the total number of cells in the grid. Examples Input 3 4 Output 12 Input 5 5 Output 25 Input 1 10 Output 10","solution":"def total_cells_in_grid(N, M): Computes the total number of cells in a grid with N rows and M columns. :param N: Number of rows, 1 <= N <= 100 :param M: Number of columns, 1 <= M <= 100 :return: Total number of cells in the grid return N * M"},{"question":"Li has just bought a new smartphone and installed the popular game \\"Amazing Maze.\\" In this game, Li is presented with a rectangular maze represented by a grid of cells. Each cell either contains a \'. \' indicating open paths or a \'#\' indicating walls that cannot be crossed. Li starts from the top-left cell and must navigate through the maze to reach the bottom-right cell. He can move only in four directions: up, down, left, and right. Li wants to know the minimum number of moves required to get from the top-left cell to the bottom-right cell. If it is impossible to reach the target cell, you should tell him as well. Write a program that takes the dimensions of the maze and the maze itself as input and outputs the minimum number of moves required for Li to reach the target cell, or `-1` if it is impossible. Input The first line contains two integers n and m (2 ≤ n, m ≤ 500), which are the number of rows and columns in the maze. Each of the following n lines contains a string of length m consisting of characters \'.\' and \'#\', representing the maze. Output Output a single integer representing the minimum number of moves required to get from the top-left cell to the bottom-right cell, or `-1` if it is impossible. Example Input 5 5 ..... .#. ..... #.. ..... Output 8 Explanation Li moves as follows: right -> right -> down -> down -> down -> right -> right -> right. Total moves: 8. Input 3 3 ... # ... Output -1 Explanation It is impossible to reach the bottom-right cell since the middle row is completely filled with walls.","solution":"from collections import deque def min_moves_to_exit_maze(n, m, maze): Returns the minimum number of moves required to get from the top-left cell to the bottom-right cell in the maze, or -1 if it is impossible. def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in moves: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"A city has N intersections connected by M bidirectional roads. Each road has an associated maintenance cost. The city administration wants to ensure that every intersection is reachable from one another at minimal cost. Your task is to calculate the minimal total maintenance cost needed to ensure all intersections are connected, or determine if it is impossible to connect all intersections. Input: The first line contains two integers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 10000). Each of the next M lines contains three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000), denoting a road between intersections u and v with maintenance cost w. Output: Print the minimal total maintenance cost to connect all intersections, or print “-1” if it is impossible. Constraints: - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 10000 SAMPLE INPUT 4 5 1 2 3 2 3 2 3 4 4 4 1 1 2 4 5 SAMPLE OUTPUT 6 Explanation: There are 4 intersections and 5 roads. The roads are: - Between 1 and 2 with cost 3 - Between 2 and 3 with cost 2 - Between 3 and 4 with cost 4 - Between 4 and 1 with cost 1 - Between 2 and 4 with cost 5 To connect all intersections at minimal cost, choose roads with costs 1, 2, and 3. Thus, the minimal total maintenance cost is 6.","solution":"def find_minimal_maintenance_cost(N, M, roads): parent = list(range(N + 1)) rank = [0] * (N + 1) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 edges = sorted(roads, key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) mst_cost += w edges_used += 1 if edges_used == N - 1: break if edges_used == N - 1: return mst_cost else: return -1"},{"question":"A company is developing a new system for processing and evaluating employees\' performance based on their contributions to multiple projects. Each employee works on several projects, and each project has a certain impact score. The company wants to calculate a contribution score for each employee that is the sum of the impact scores of all projects he/she has contributed to. Your task is to write a program that will read the list of employees and their projects, and then compute the contribution score for each employee. Input The input consists of: - The first line contains two integers n and m (1 ≤ n ≤ 200, 1 ≤ m ≤ 1000), where n is the number of employees and m is the number of projects. - The next m lines describe the projects. Each line contains one project description in the following format: * An integer k (1 ≤ k ≤ n) — the number of employees working on this project, * Followed by k integers and one float number separated by spaces, where the integers are the indices of employees (from 1 to n) working on that project, and the float number is the impact score of the project. Output Print n lines, each containing a single float number. The i-th line should contain the contribution score of the i-th employee. The scores should be displayed with exactly two decimal places. Examples Input 3 2 2 1 3 10.5 3 1 2 3 15.2 Output 25.70 15.20 25.70 Input 4 3 2 1 2 5.0 2 2 3 6.1 1 4 7.3 Output 5.00 11.10 6.10 7.30","solution":"def compute_contribution_scores(n, m, projects): # Initialize the contribution scores for each employee to zero contribution_scores = [0.0] * n for project in projects: project_data = list(map(float, project.split())) k = int(project_data[0]) # number of employees in this project employees = list(map(int, project_data[1:k+1])) # employee indices impact_score = project_data[-1] # impact score of the project # Add the impact score to each employee\'s contribution score for employee in employees: contribution_scores[employee - 1] += impact_score # Format each contribution score to exactly two decimal places formatted_scores = [format(score, \\".2f\\") for score in contribution_scores] return formatted_scores"},{"question":"You are organizing a fleet of delivery robots in a warehouse. The warehouse is a grid of size H times W meters, where the height is H meters and the width is W meters. Each cell in the grid is 1 meter by 1 meter, and a point in the grid is specified by (x, y), where x is the row number (top to bottom) and y is the column number (left to right). There are N robots, each starting at different positions (S_i, T_i) and each needs to deliver a package to a designated position (D_i, E_i). The robots can move in 4 directions: north, south, east, or west, and can change direction at any time. Moving to an adjacent cell (1 meter) in the grid costs 1 unit of energy. Your task is to coordinate the movements of all robots such that the total energy spent by the fleet is minimized. Write a program that calculates the minimum total energy required for all robots to complete their deliveries. # Input The input consists of: - An integer H and an integer W (the size of the warehouse grid). - An integer N (the number of robots). - N lines, each containing the positions (S_i, T_i) and (D_i, E_i) for the start and destination of the i-th robot. # Output Output the minimum total energy required for all robots to reach their destinations. # Example Input ``` 5 5 3 1 1 5 5 2 2 4 4 3 3 1 1 ``` Output ``` 12 ``` # Explanation The three robots have the following shortest paths and energy costs: 1. Robot 1: From (1, 1) to (5, 5) requires 4 moves south and 4 moves east, costing 8 units of energy. 2. Robot 2: From (2, 2) to (4, 4) requires 2 moves south and 2 moves east, costing 4 units of energy. 3. Robot 3: From (3, 3) to (1, 1) requires 2 moves north and 2 moves west, costing 4 units of energy. The total minimum energy required is 8 + 4 + 4 = 16 units. Thus, the output should be `16`.","solution":"def calculate_minimum_energy(H, W, N, robots): Calculate the minimum total energy required for all robots to reach their destinations. Parameters: H (int): The height of the warehouse grid. W (int): The width of the warehouse grid. N (int): The number of robots. robots (list of tuples): Each tuple contains (S_i, T_i, D_i, E_i) representing the start and destination positions of the i-th robot. Returns: int: The minimum total energy required. total_energy = 0 for start_x, start_y, dest_x, dest_y in robots: # Calculate the Manhattan distance between the start and destination points distance = abs(dest_x - start_x) + abs(dest_y - start_y) total_energy += distance return total_energy"},{"question":"A delivery company needs to calculate the minimum cost required to deliver parcels to various cities using different transportation routes. Each route connects two cities and has a certain cost associated with it. To maximize efficiency, the company wants to ensure that the total delivery cost is minimized while covering all cities. The delivery network can be described as an undirected graph where cities are nodes and routes are edges with given costs. Given the number of cities and a list of routes with their respective costs, determine the minimum cost required to cover all cities such that the delivery company can deliver parcels between any pair of cities either directly or indirectly. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of cities and the number of transportation routes, respectively. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100,000), where u and v represent the cities connected by a route, and w represents the cost of the route. Output Print one integer — the minimum total cost required to cover all cities. If it is impossible to cover all cities, print \\"IMPOSSIBLE\\". Examples Input 4 5 1 2 2 1 3 3 2 3 1 2 4 4 3 4 5 Output 7 Input 3 1 1 2 3 Output IMPOSSIBLE Note In the first sample, the minimum cost to cover all cities is 7, achieved by using the routes with costs 2, 1, and 4. In the second sample, it is impossible to cover all cities because there is no route connecting city 3 to the rest. Therefore, the output is \\"IMPOSSIBLE\\".","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[yroot] < rank[xroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = 0 # Store the minimum cost edges = sorted(edges, key=lambda item: item[2]) # Sort edges by their weights parent = []; rank = [] for node in range(n): parent.append(node) rank.append(0) e = 0 # Count of edges included in the minimum spanning tree i = 0 # Initial index of sorted edges while e < n - 1 and i < len(edges): u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result += w union(parent, rank, x, y) if e == n - 1: return result else: return \\"IMPOSSIBLE\\" def minimum_delivery_cost(n, m, routes): return kruskal(n, routes) # Example usage: # n = 4 # m = 5 # routes = [ # (1, 2, 2), # (1, 3, 3), # (2, 3, 1), # (2, 4, 4), # (3, 4, 5), # ] # print(minimum_delivery_cost(n, m, routes)) # Output: 7"},{"question":"A warehouse contains a collection of storage shelves arranged in a grid. Each storage shelf can hold a variety of items represented by their unique item IDs. Your task is to develop a program that manages the inventory in these shelves by performing a series of operations. The operations include adding, removing, and querying items in the shelves. The grid is represented as an `n x m` matrix where `n` is the number of rows and `m` is the number of columns. # Input: 1. The first line contains two integers `n` and `m` representing the dimensions of the grid. 2. The next `n` lines each contains `m` space-separated integers representing the initial items in each shelf. Use `-1` to represent an empty shelf. 3. The next line contains an integer `q` representing the number of operations to be performed. 4. The following `q` lines each describe an operation in one of the following formats: - `ADD i j k`: Add item `k` to the shelf at row `i` and column `j`. - `REMOVE i j`: Remove the item from the shelf at row `i` and column `j` (set it to `-1`). - `QUERY i j`: Output the item ID at the shelf located at row `i` and column `j`. # Output: For each `QUERY` operation, print the item ID at the specified location. If the location is empty, print `-1`. # Example Input: ``` 3 3 1 2 3 -1 5 6 7 -1 -1 5 ADD 1 1 10 REMOVE 0 2 QUERY 1 1 QUERY 0 2 QUERY 2 2 ``` Output: ``` 10 -1 -1 ``` # Explanation: - There are 3 rows and 3 columns in the warehouse grid. - The initial state of the grid is: ``` 1 2 3 -1 5 6 7 -1 -1 ``` - `ADD 1 1 10` adds item `10` to the shelf at (1, 1). The grid becomes: ``` 1 2 3 -1 10 6 7 -1 -1 ``` - `REMOVE 0 2` removes the item from the shelf at (0, 2). The grid becomes: ``` 1 2 -1 -1 10 6 7 -1 -1 ``` - The next three operations are `QUERY` operations, which output the contents of the specified shelves. Write a program that processes inventory operations as described above.","solution":"def manage_warehouse(n, m, initial_grid, operations): grid = [row[:] for row in initial_grid] # clone the initial grid results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \'ADD\': i, j, k = map(int, parts[1:]) grid[i][j] = k elif command == \'REMOVE\': i, j = map(int, parts[1:]) grid[i][j] = -1 elif command == \'QUERY\': i, j = map(int, parts[1:]) results.append(grid[i][j]) return results"},{"question":"Anagram Subsets Given an array of lowercase strings, determine the number of unique subsets where each subset forms an anagram group. An anagram group is a set of words that after reordering the letters, form the same string. Input The first line contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N denoting the number of strings in that test case. The second line contains N space-separated strings. Output For each test case, output a single line with the answer which denotes the number of unique anagram groups. Constraints 1 ≤ T ≤ 30 1 ≤ N ≤ 50 1 ≤ length(S) ≤ 100, where S is a string in the array Example Input: 2 3 eat tea tan 5 listen silent enlist inlets tinsel Output: 2 1 Explanation: Example case 1. The input strings are [\\"eat\\", \\"tea\\", \\"tan\\"]. \\"eat\\" and \\"tea\\" are anagrams forming one group, while \\"tan\\" forms another. Thus, there are 2 unique anagram groups. Example case 2. The input strings are [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\", \\"tinsel\\"]. All these strings are anagrams of each other, forming exactly 1 unique anagram group.","solution":"def count_anagram_groups(test_cases): This function takes a list of test cases, where each test case is a tuple containing the number of strings and the list of strings. It returns a list of results where each result is the number of unique anagram groups in the corresponding test case. from collections import defaultdict results = [] for case in test_cases: N, strings = case anagram_dict = defaultdict(list) for s in strings: sorted_s = \'\'.join(sorted(s)) anagram_dict[sorted_s].append(s) results.append(len(anagram_dict)) return results"},{"question":"Alex has recently subscribed to an online music streaming service which offers two types of subscription plans: Premium and Standard. With the Premium subscription plan, Alex can listen to an unlimited number of songs, while with the Standard subscription plan, there is a daily limit on the number of songs that can be listened to. The service also imposes network bandwidth restrictions that can affect both types of subscriptions. Alex has compiled a list of songs and their respective sizes in megabytes (MB) and wants to determine how to maximize the number of songs he can listen to given the daily bandwidth limit. Your task is to write a program that takes in the total number of songs, the size of each song, the daily bandwidth limit, and whether Alex has the Premium or Standard subscription. If Alex has a Standard subscription, additional input will specify the daily limit of songs he can listen to. Your program should output the maximum number of songs Alex can listen to within the given constraints. Input: - The first line contains a string `subscription` which can be either \\"Premium\\" or \\"Standard\\". - The second line contains two integers, n (1 ≤ n ≤ 100,000) and b (1 ≤ b ≤ 10^9), where n is the number of songs, and b is the daily bandwidth limit in MB. - The third line contains n integers representing the size of each song in MB. - If the subscription is \\"Standard\\", then an additional integer d (1 ≤ d ≤ n) is provided on the fourth line, representing the daily limit on the number of songs that can be listened to. Output: - Output a single integer representing the maximum number of songs Alex can listen to within the given constraints. Example: Input: ``` Standard 5 100 10 20 30 40 50 3 ``` Output: ``` 3 ``` Explanation: - Alex can listen to up to 3 songs daily due to the Standard subscription. - He can select songs with sizes 10, 20, and 30 MB, using up all 100 MB of his daily bandwidth. He cannot include the 40 or 50 MB songs as they would exceed the daily bandwidth limit or daily song limit.","solution":"def max_songs(subscription, n, b, sizes, d=None): Calculates the maximum number of songs Alex can listen to given the subscription type and constraints. :param subscription: String, either \\"Premium\\" or \\"Standard\\" :param n: Integer, the total number of songs :param b: Integer, the daily bandwidth limit in MB :param sizes: List of Integers, sizes of each song in MB :param d: Integer, the daily limit of songs for Standard subscription, optional :return: Integer, the maximum number of songs Alex can listen to sizes.sort() songs_count = 0 total_bandwidth_used = 0 for size in sizes: if total_bandwidth_used + size > b: break if subscription == \\"Standard\\" and songs_count >= d: break total_bandwidth_used += size songs_count += 1 return songs_count"},{"question":"You are given a programming language interpreter that follows a specific rule set to evaluate mathematical expressions. You need to create a function that will read these expressions from a provided input format and then compute their values accordingly. # Interpreter rules: 1. The expressions are composed of constants (integers between 0 and 1000) and the symbols \'+\', \'-\', \'*\', \'/\', \'(\', \')\'. 2. The operator precedence is the same as standard mathematical precedence: parentheses first, then multiplication and division (left to right), and addition and subtraction (left to right). 3. Division \'/\' is integer division; it should truncate towards zero. # Input format: - A single string that represents the expression to be evaluated. - The string may contain spaces which should be ignored when evaluating the expression. # Output format: - The evaluated result of the expression as an integer. - If the expression is invalid (e.g., division by zero or mismatched parentheses), output \\"Invalid\\". # Examples: Example 1 Input: ``` \\" 3 + ( 2 * 2 ) \\" ``` Output: ``` 7 ``` Example 2 Input: ``` \\"10 / 2 + 3 * (2 - 1)\\" ``` Output: ``` 8 ``` Example 3 Input: ``` \\"(1 + 2\\" ``` Output: ``` Invalid ``` Example 4 Input: ``` \\"3 / (2 - 2)\\" ``` Output: ``` Invalid ``` # Constraints: 1. The maximum length of the expression string is 1000 characters. 2. The calculation should handle intermediate results within the range of 32-bit signed integers. Design the function to interpret and evaluate expressions accurately while ensuring it handles invalid scenarios appropriately.","solution":"def evaluate(expression): def tokenize(expression): tokens = [] number = \'\' for char in expression: if char.isdigit(): number += char else: if number: tokens.append(int(number)) number = \'\' if char in \'+-*/()\': tokens.append(char) if number: tokens.append(int(number)) return tokens def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_op(operators, values): op = operators.pop() right = values.pop() left = values.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': if right == 0: raise ZeroDivisionError values.append(int(left / right)) def evaluate_expression(tokens): values = [] operators = [] idx = 0 while idx < len(tokens): token = tokens[idx] if type(token) == int: values.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_op(operators, values) operators.pop() elif token in \'+-*/\': while operators and precedence(operators[-1]) >= precedence(token): apply_op(operators, values) operators.append(token) idx += 1 while operators: apply_op(operators, values) return values[-1] try: tokens = tokenize(expression.replace(\' \', \'\')) result = evaluate_expression(tokens) return result except: return \\"Invalid\\""},{"question":"The company ClockWorks Co. is developing a new software system designed to minimize the electricity consumption of a smart city. The city contains n buildings, and some pairs of the buildings are connected directly with power cables, each having a specific power loss rate. The goal is to establish a network of power cables such that every building can be reached from any other building while ensuring that the total power loss rate is minimized. Additionally, the power plant is located at building 1, and it must be the central hub of the network. Input The first input line contains two integers, n and m (1 ≤ n ≤ 5000; 0 ≤ m ≤ 10^5), where n is the number of buildings and m is the number of power cables. Each of the next m lines contains three numbers ai, bi, li (1 ≤ ai, bi ≤ n; 1 ≤ l ≤ 105), where ai and bi are the numbers of the buildings connected by the power cable, and li is the power loss rate of that cable. It is guaranteed that there is no more than one cable between any two buildings and no cable connects a building to itself. The power plant\'s building number is 1. Output In the first line, print the total power loss rate of the minimal connecting network. In the next line, print the number of cables used in the network followed by the indices of these cables in ascending order. If it is impossible to connect all buildings, print -1. Examples Input 4 5 1 2 2 2 3 1 3 4 4 1 3 5 2 4 3 Output 6 3 1 2 5","solution":"def minimize_power_loss(n, m, connections): import heapq from collections import defaultdict if n == 1: return 0, 0, [] graph = defaultdict(list) for idx, (u, v, w) in enumerate(connections): graph[u].append((w, v, idx + 1)) graph[v].append((w, u, idx + 1)) visited = set() min_heap = [(0, 1, -1)] # (power_loss, node, cable index) total_loss = 0 cables_used = [] while min_heap and len(visited) < n: loss, node, cable_idx = heapq.heappop(min_heap) if node in visited: continue visited.add(node) if cable_idx != -1: total_loss += loss cables_used.append(cable_idx) for cost, neighbour, idx in graph[node]: if neighbour not in visited: heapq.heappush(min_heap, (cost, neighbour, idx)) if len(visited) != n: return -1 cables_used.sort() return total_loss, len(cables_used), cables_used"},{"question":"You are given an array of integers that represents the heights of various towers. Towers with a height of zero are considered to be empty and need to be filled with new bricks. The goal is to ensure that all towers have at least one brick, while maintaining a non-decreasing height sequence. In each operation, you can choose any empty tower and fill it with any number of bricks. Formally, you have an array of n integers where the i-th element is the height of the i-th tower. You can perform any number of operations where you set the height of any empty tower (height 0) to any positive integer value. Your task is to determine the minimum number of operations required to make the tower heights non-decreasing from left to right. Input The first line of input contains an integer n (1 ≤ n ≤ 200 000) — the number of towers. The second line contains n integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 10^9), representing the initial heights of the towers. Output Output a single integer — the minimum number of operations required to make the towers\' heights non-decreasing. If it\'s already non-decreasing, output 0. Examples Input 5 2 0 3 4 0 Output 2 Input 6 0 0 0 0 0 0 Output 5 Input 4 1 2 3 4 Output 0 Note In the first example, we can perform the following operations: - Set the height of tower 2 to 2 (so it becomes 2). - Set the height of tower 5 to 5 (so it becomes 5). After these operations, the heights are [2, 2, 3, 4, 5] which is non-decreasing. In the second example, we need to set the heights of the first five towers to 1, 2, 3, 4, and 5 respectively to make the sequence non-decreasing. In the third example, the height sequence is already non-decreasing, so no operations are needed.","solution":"def min_operations_to_non_decreasing(n, heights): Determines the minimum number of operations required to make the towers\' heights non-decreasing. Parameters: n (int): The number of towers. heights (list of int): The initial heights of the towers. Returns: int: The minimum number of operations required. operations = 0 for i in range(1, n): if heights[i] == 0: # Find the next non-zero height next_non_zero_index = i while next_non_zero_index < n and heights[next_non_zero_index] == 0: next_non_zero_index += 1 next_non_zero_height = heights[next_non_zero_index] if next_non_zero_index < n else heights[i - 1] + 1 heights[i] = max(heights[i - 1], next_non_zero_height) operations += 1 return operations"},{"question":"Alice is planning a hiking trip with her friends. They have decided to hike on a trail that crosses several hills. Alice wants to ensure that the group\'s energy is conserved by choosing the optimal path. The trail is represented as a grid of size n x m, where each cell contains a positive integer height that denotes the altitude at that point. The group can only move up, down, left, or right to an adjacent cell. The difficulty of the trail is determined by the maximum altitude difference between any two consecutive cells on the chosen path from the start to the end. The lower the maximum altitude difference, the easier the trail. Alice wants to find the easiest path from the top-left corner (1,1) to the bottom-right corner (n,m). Can you help her by finding the easiest path and the maximum altitude difference along this path? # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. - The next n lines each contain m integers, where the j-th integer in the i-th line represents the height of the cell at (i, j). # Output Print a single integer which is the maximum altitude difference along the easiest path from (1,1) to (n,m). # Example Input 4 3 1 2 2 3 4 2 2 2 1 1 3 3 Output 1 # Explanation Among the possible paths from the top-left corner to the bottom-right corner, the easiest path could be (1,1) -> (1,2) -> (2,2) -> (3,3) -> (4,3) with the maximum altitude difference being 1. # Notes - It is guaranteed that there is a path from the start to the end. - Each cell can have a different height, and the heights are positive integers. - The output is a single integer representing the minimum possible value for the maximum altitude difference along any path from (1,1) to (n,m).","solution":"import heapq def easiest_path(n, m, grid): Find the path from the top-left to the bottom-right with the minimum possible maximum altitude difference. def neighbors(x, y): for nx, ny in [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]: if 0 <= nx < n and 0 <= ny < m: yield nx, ny # Priority queue with elements (current_max_diff, x, y) pq = [(0, 0, 0)] max_diff = [[float(\'inf\')] * m for _ in range(n)] max_diff[0][0] = 0 while pq: current_max_diff, x, y = heapq.heappop(pq) if (x, y) == (n-1, m-1): return current_max_diff for nx, ny in neighbors(x, y): diff = abs(grid[nx][ny] - grid[x][y]) new_max_diff = max(current_max_diff, diff) if new_max_diff < max_diff[nx][ny]: max_diff[nx][ny] = new_max_diff heapq.heappush(pq, (new_max_diff, nx, ny)) return -1 # It should never reach here due to guaranteed path condition # Example usage: # n, m = 4, 3 # grid = [ # [1, 2, 2], # [3, 4, 2], # [2, 2, 1], # [1, 3, 3] # ] # print(easiest_path(n, m, grid)) # Output: 1"},{"question":"Problem: In a library, each book is associated with a genre, and each genre has a particular section in the library. The librarian wants to collect a list of all the unique books in a custom order where for each unique book name, the output should contain the name of the book followed by its genre. The books and genres should be sorted in alphabetical order. Your task is to help the librarian by transforming the list of books such that it contains unique book names sorted alphabetically along with their respective genres. Input: The first line contains N, the number of books in the initial list. The next N lines each contain a book name followed by its genre, separated by a space. Output: Print the total number of unique book names. Then print each unique book name followed by its genre on a new line, sorted alphabetically by the book name. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Length of each book name and genre ≤ 20 Book names and genres consist only of lowercase and uppercase English alphabets (a-z, A-Z), and spaces. SAMPLE INPUT 8 HarryPotter Fantasy TheHobbit Fantasy harrypotter Fantasy WarAndPeace Classic TheHobbit fantasy WarAndPeace Classic ToKillAMockingbird Classic HarryPotter Fantasy SAMPLE OUTPUT 5 HarryPotter Fantasy TheHobbit Fantasy ToKillAMockingbird Classic WarAndPeace Classic harrypotter Fantasy","solution":"def unique_books_with_genres(n, books_genres): Transforms the list of books to a list of unique book names sorted alphabetically along with their respective genres. unique_books = {} for book_genre in books_genres: book, genre = book_genre.split() if book not in unique_books: unique_books[book] = genre sorted_unique_books = sorted(unique_books.items()) output = [] output.append(str(len(sorted_unique_books))) for book, genre in sorted_unique_books: output.append(f\\"{book} {genre}\\") return output"},{"question":"Adam and Eve are playing a game of pair swapping. They start with a list of n distinct integers and Adam wants to know how many steps it will take for Eve to make the list sorted by performing only the allowed operation: swapping adjacent elements. Your task is to write a function that takes this list and returns the number of adjacent swaps needed to sort the list in ascending order. Input The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of integers in the list. The second line contains n distinct space-separated integers representing the list. Output Output a single integer representing the number of adjacent swaps required to sort the list. Examples Input 5 5 3 2 4 1 Output 8 Input 6 1 3 5 2 4 6 Output 3 Note In the first sample, the list [5, 3, 2, 4, 1] can be sorted in the following way: - Swap elements at index 1 and 2 -> [3, 5, 2, 4, 1] - Swap elements at index 2 and 3 -> [3, 2, 5, 4, 1] - Swap elements at index 1 and 2 -> [2, 3, 5, 4, 1] - Swap elements at index 3 and 4 -> [2, 3, 4, 5, 1] - Swap elements at index 3 and 4 -> [2, 3, 4, 1, 5] - Swap elements at index 2 and 3 -> [2, 3, 1, 4, 5] - Swap elements at index 1 and 2 -> [2, 1, 3, 4, 5] - Swap elements at index 0 and 1 -> [1, 2, 3, 4, 5] So, it takes 8 swaps to sort the list. In the second sample, the list [1, 3, 5, 2, 4, 6] can be sorted in the following way: - Swap elements at index 2 and 3 -> [1, 3, 2, 5, 4, 6] - Swap elements at index 1 and 2 -> [1, 2, 3, 5, 4, 6] - Swap elements at index 3 and 4 -> [1, 2, 3, 4, 5, 6] So, it takes 3 swaps to sort the list.","solution":"def count_adjacent_swaps_to_sort(arr): Returns the number of adjacent swaps needed to sort the list in ascending order. n = len(arr) swaps = 0 for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 return swaps"},{"question":"In a far-off land, there\'s a wonderful market that sells magical fruits. Each type of fruit has a unique number of enchantment points associated with it. As a curious visitor, you want to maximize the enchantment points you collect by purchasing a specific number of fruits. You are given an array of integers where each integer represents the enchantment points of a fruit. You can select at most K fruits. However, there is a twist: you are only allowed to select fruits in a way that no two selected fruits are adjacent in the array. Write a function to determine the maximum enchantment points you can collect while adhering to these constraints. Input - The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ N) which represent the number of fruits and the maximum number of fruits you can select, respectively. - The second line contains N integers, each representing the enchantment points of a fruit (1 ≤ enchantment points ≤ 10^4). Output - Print a single integer, the maximum enchantment points you can collect. Example Input 7 3 1 10 3 5 7 2 9 Output 26 Explanation The optimal selection of fruits is the second, fifth, and seventh fruits, yielding maximum enchantment points of 10 + 7 + 9 = 26.","solution":"def max_enchantment_points(N, K, enchantment_points): # Create a list to store the maximum enchantment points we can get using i fruits. # Initialize with -infinity to indicate initially they are not reachable. dp = [-float(\'inf\')] * (K + 1) dp[0] = 0 # Zero fruits selected means zero enchantment points # Iterate through the enchantment points list for points in enchantment_points: # Iterate from K down to 1 to prevent using the same point more than once. for k in range(K, 0, -1): if dp[k-1] != -float(\'inf\'): dp[k] = max(dp[k], dp[k-1] + points) return max(dp) # The answer is the maximum value in the dp array."},{"question":"A spaceship is collecting samples from various planets in a solar system. The spaceship can travel directly from any planet to any other planet but must optimize its route to minimize the total travel distance while visiting each planet exactly once before returning to its starting planet. This problem is known as the \\"Traveling Salesperson Problem\\" (TSP). However, the spaceship has limited fuel, and the fuel is sufficient only for a specified maximum travel distance during the entire journey. Given the distances between all pairs of planets and the maximum travel distance the spaceship can travel, determine if it is possible for the spaceship to complete its journey without exceeding the fuel limit. If it is possible, calculate the minimal total travel distance; otherwise, return -1. Input The first input line contains two integers n and d_max (2 ≤ n ≤ 20, 1 ≤ d_max ≤ 10^4), where n is the number of planets and d_max is the maximum distance the spaceship can travel. The next n lines each contain n integers, where the j-th integer on the i-th line represents the distance between planet i and planet j (0 ≤ distance ≤ 500). The distance from planet i to itself will always be 0. Output Print a single integer: the minimal total travel distance if it\'s possible to complete the journey within the given maximum distance, or -1 if it\'s not possible. Example Input 4 100 0 20 42 35 20 0 30 34 42 30 0 12 35 34 12 0 Output 97","solution":"from itertools import permutations def min_travel_distance(n, d_max, distances): if n == 1: return 0 if d_max >= 0 else -1 def calc_distance(route): return sum(distances[route[i]][route[i+1]] for i in range(len(route)-1)) + distances[route[-1]][route[0]] planets = list(range(n)) min_distance = float(\'inf\') for perm in permutations(planets[1:]): route = [0] + list(perm) distance = calc_distance(route) if distance < min_distance: min_distance = distance return min_distance if min_distance <= d_max else -1 # Example Usage n = 4 d_max = 100 distances = [ [0, 20, 42, 35], [20, 0, 30, 34], [42, 30, 0, 12], [35, 34, 12, 0] ] print(min_travel_distance(n, d_max, distances)) # Output: 97"},{"question":"You are managing a warehouse and need to keep track of incoming and outgoing shipments. Each shipment is represented by a pair of integers: the first integer indicates the type of the shipment (1 for incoming, 2 for outgoing), and the second integer indicates the number of items in the shipment. You need to track the number of items in the warehouse at each given point in time. Write a function that processes a list of shipments in the order they are received and returns the count of items in the warehouse after each shipment. Input Format The first line contains the number of shipments, N. Each of the next N lines contains two integers, Ti and Xi. Output Format N lines. The ith line contains the number of items in the warehouse after processing the ith shipment. Constraints 1 ≤ N ≤ 10^5 1 ≤ Ti ≤ 2 1 ≤ Xi ≤ 10^3 SAMPLE INPUT 5 1 100 2 20 1 50 2 35 1 60 SAMPLE OUTPUT 100 80 130 95 155","solution":"def warehouse(shipments): Processes a list of shipments and returns the count of items in the warehouse after each shipment. :param shipments: List of tuples, where each tuple contains two integers (Ti, Xi) :return: List of integers representing the number of items in the warehouse after each shipment item_count = 0 results = [] for shipment in shipments: Ti, Xi = shipment if Ti == 1: item_count += Xi elif Ti == 2: item_count -= Xi results.append(item_count) return results def process_input(n, inputs): Converts input to the format required by the warehouse function. :param n: Integer, number of shipments :param inputs: List of strings, each containing two space-separated integers :return: Result from the warehouse function shipments = [tuple(map(int, line.strip().split())) for line in inputs] return warehouse(shipments)"},{"question":"You are given a maze represented by a 2D array filled with integers. Each cell in the maze can either be a clear path or a wall. You are required to find the shortest path from the top-left corner of the maze to the bottom-right corner. You can only move up, down, left, or right, but you cannot move through walls. The maze is represented by an n x m matrix, where `maze[i][j]` equals 0 indicates a clear path and `maze[i][j]` equals 1 indicates a wall. Write a function `shortest_path(n, m, maze)` that returns the minimum number of moves required to reach the bottom-right corner from the top-left corner. If there is no possible path, return -1. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), where n is the number of rows and m is the number of columns. - The next n lines each contain m integers (either 0 or 1), representing the maze. Output: - A single integer representing the minimum number of moves required to reach the bottom-right corner from the top-left corner, or -1 if there is no possible path. Examples: Input: 4 4 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 Output: 6 Input: 3 3 0 1 1 1 1 0 0 0 0 Output: -1 Note: In the first example, one possible path is marked by a sequence of moves: [(0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3)], which requires 6 moves. In the second example, there is no possible path to reach the bottom-right corner from the top-left corner.","solution":"from collections import deque def shortest_path(n, m, maze): Finds the shortest path in a maze from the top-left corner to the bottom-right corner. n: number of rows m: number of columns maze: 2D array representing the maze if maze[0][0] == 1 or maze[n-1][m-1] == 1: return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we reached the bottom-right corner if x == n - 1 and y == m - 1: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and maze[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 # No path found"},{"question":"In a certain kingdom, there is a unique type of tree known as the \\"Pyramid Tree\\". This tree has n levels, with level 1 being at the top and level n at the bottom. Each level i (1 ≤ i ≤ n) has exactly i nodes. Each node generates one unit of fruit every day, and the fruits are rolled down to the nodes directly below it (if any). When fruits from two or more nodes reach the same node, only one unit of fruit remains as the rest are squeezed out. Each day, after the fruits are collected at the bottom level n, the fruits start rolling down from the top level to the bottom. Fruits from each node in level i roll down to the closest neighboring nodes in level i+1. If there are multiple possible paths, the fruits are distributed uniformly as much as possible to balance the load. Help the kingdom determine how many units of fruit can be harvested at the bottom level n on day k. Input The single line of input contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ 1000) — the number of levels in the pyramid tree and the number of days after the process starts. Output Output a single integer — the number of units of fruit harvested at the bottom level n on day k. Example Input 4 3 Output 4 Input 5 2 Output 5 Note In the first example, on day 1, each node on the top level produces one fruit, which will fall down to lower levels. By day 3, every node in the bottom level will have received one unit of fruit resulting in 4 units of fruit in total. In the second example, regardless of the redistributions, the bottom level will have received exactly one fruit from each node above, resulting in 5 units as it is a straightforward calculation.","solution":"def harvest_fruits(n, k): Given the number of levels n and the number of days k, returns the number of units of fruit harvested at the bottom level. return n # since the number of fruits at the bottom level reaches steady state which is `n`."},{"question":"You are given N unique numbers between 1 and 10000 inclusive. Write a program to find all possible pairs of numbers from the given set that add up to a specific target value T. Each pair must consist of distinct numbers from the set. Input: - The first line contains an integer N denoting the number of elements in the set. - The second line contains N unique integers separated by spaces, representing the set elements. - The third line contains a single integer T, the target sum. Output: - Print each distinct pair of numbers that add up to T, one pair per line. Each pair should be printed in ascending order (i.e., the smaller number should appear first). If there are multiple pairs, sort them and print each pair on a new line. - If no pairs are found, print \\"No pairs found\\". Example: Input: ``` 6 2 7 11 15 1 8 10 ``` Output: ``` 2 8 ``` Input: ``` 5 1 2 3 4 5 10 ``` Output: ``` No pairs found ``` Note: - Elements within each pair should be in ascending order. - Pairs themselves should also be sorted in ascending order if there are multiple pairs. - Each element in the pair should be unique (i.e., a pair of the same number cannot be used).","solution":"def find_pairs(nums, target): Returns all unique pairs of numbers from the given set that add up to the target value. Each pair is returned in ascending order and the entire list of pairs is sorted. pairs = [] nums_set = set(nums) for num in nums: complement = target - num if complement in nums_set and complement != num: pairs.append((min(num, complement), max(num, complement))) nums_set.discard(num) # remove this number from the set to prevent duplicates pairs = list(set(pairs)) # remove any duplicates pairs.sort() # sort pairs in ascending order return pairs if pairs else \\"No pairs found\\""},{"question":"Given a sequence of n integers, Happy PMP needs to find the length of the longest subsequence that is strictly increasing. A subsequence is derived by deleting some, or none, of the elements in the sequence, without changing the order of the remaining elements. Input The first line contains a single integer n (1 ≤ n ≤ 2·105) — the length of the sequence. The next line contains n space-separated integers representing the sequence. Output Print a single integer denoting the length of the longest strictly increasing subsequence in the given sequence. Examples Input 6 5 2 8 6 3 6 9 7 Output 4 Input 4 3 10 2 1 Output 2 Input 5 1 2 3 4 5 Output 5 Note In the first example, the longest strictly increasing subsequence is 2, 3, 6, 9 which has length 4. In the second example, the longest strictly increasing subsequence is either 3, 10 or 2, 10 both of which have length 2. In the third example, the entire sequence is already strictly increasing, so the longest subsequence is the sequence itself with length 5.","solution":"def longest_increasing_subsequence(sequence): Returns the length of the longest strictly increasing subsequence in the given sequence. if not sequence: return 0 n = len(sequence) lis = [1] * n # Initialize LIS value for all indexes as 1 # Compute optimized LIS values in a bottom-up manner for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis[] return max(lis)"},{"question":"Problem You are given an integer array `arr` consisting of non-negative integers. Your task is to determine the minimum number of elements to remove from the array such that no two consecutive elements in the remaining array have the same value. If it is not possible, return -1. # Constraints - The input satisfies the following constraints: - 1 ≤ `arr.length` ≤ 10^5 - 0 ≤ `arr[i]` ≤ 10^5 # Input - The input is given in the following format: ``` n arr1 arr2 arr3 ... arrn ``` where `n` is the number of elements in the array `arr`, and `arri` represents the ith element in the array. # Output - Output the minimum number of elements required to be removed so that no two consecutive elements in the remaining array are the same, or if it is not possible, return -1. # Examples Example 1 **Input:** ``` 5 1 2 2 3 4 ``` **Output:** ``` 1 ``` **Explanation:** Removing one of the \'2\'s makes the array [1, 2, 3, 4] which satisfies the condition. Example 2 **Input:** ``` 4 1 1 1 1 ``` **Output:** ``` 3 ``` **Explanation:** You need to remove three \'1\'s to make the array [1] which satisfies the condition. Example 3 **Input:** ``` 6 1 3 2 2 2 3 ``` **Output:** ``` 2 ``` **Explanation:** Removing two \'2\'s makes the array [1, 3, 2, 3] which satisfies the condition. Example 4 **Input:** ``` 2 5 5 ``` **Output:** ``` 1 ``` **Explanation:** Removing one \'5\' makes the array [5] which satisfies the condition. Example 5 **Input:** ``` 1 7 ``` **Output:** ``` 0 ``` **Explanation:** No removal is needed since there\'s only one element.","solution":"def min_removals_for_no_consecutive_duplicates(arr): n = len(arr) if n <= 1: return 0 # Initialize a variable to keep the count of removals needed removals = 0 # Iterate through the array and count necessary removals for i in range(1, n): if arr[i] == arr[i - 1]: removals += 1 return removals"},{"question":"In a small village, there is a single straight road with `n` houses aligned sequentially. Each house has some residents who need food supplies. A food truck can make deliveries by visiting these houses. However, the truck can only deliver to a maximum of `k` houses in a single trip, and those houses must be consecutive due to the efficiency of delivery routes. The problem is to determine the minimum number of trips the food truck needs to make in order to ensure that food supplies are delivered to all houses in the village. Input: - The first line contains two integers, `n` and `k` (1 ≤ k ≤ n ≤ 1000). - The second line contains `n` integers, representing the number of residents in each house. (1 ≤ residents ≤ 1000 for each house). Output: - Print a single integer representing the minimum number of trips required to deliver food to all the houses. Example: Input: 6 3 2 3 4 5 1 2 Output: 2 Explanation: The food truck can cover the first three houses (2, 3, 4) in one trip, and the remaining three houses (5, 1, 2) in another trip, making a total of 2 trips. Therefore, the minimum number of trips is 2.","solution":"def min_trips(n, k, residents): Determines the minimum number of trips required to deliver food to all houses. Parameters: n (int): Number of houses. k (int): Maximum number of houses the truck can deliver to in a single trip. residents (list): List of integers representing the number of residents in each house. Returns: int: Minimum number of trips required. return (n + k - 1) // k"},{"question":"Valera is studying trees this time. A tree is a connected graph with no cycles. Valera finds trees particularly interesting because there is exactly one unique path between any two nodes. Valera is given a tree with n nodes labeled from 1 to n. He wants to perform some queries on this tree. Each query consists of specifying two nodes, u and v, and asking for the length of the unique path between these two nodes. A tree is represented via its edges, and Valera already has these edges in his hands. However, for efficiency in answering multiple queries, Valera wants to preprocess the tree. Help Valera by writing a function to preprocess the tree and answer the queries efficiently. Input - The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of nodes in the tree. - The next n-1 lines each contain two integers, u and v (1 ≤ u, v ≤ n) — representing an edge between nodes u and v. - The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. - The next q lines each contain two integers, u and v — the nodes for which Valera wants to find the length of the path. Output - For each query, output a single integer — the length of the path between the nodes u and v. Example Input 5 1 2 1 3 3 4 3 5 3 2 4 2 5 4 5 Output 3 3 2","solution":"from collections import defaultdict, deque def preprocess_tree(n, edges): Preprocess the tree to prepare for efficient path length queries. :param n: Number of nodes in the tree :param edges: List of tuples representing edges in the tree :return: parent, depth arrays used for LCA computation tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) parent = [-1] * (n + 1) depth = [-1] * (n + 1) # Depth and Parent arrays def bfs(): queue = deque([1]) depth[1] = 0 while queue: node = queue.popleft() for neighbor in tree[node]: if depth[neighbor] == -1: depth[neighbor] = depth[node] + 1 parent[neighbor] = node queue.append(neighbor) bfs() return parent, depth def lca(u, v, parent, depth): Function to find the Lowest Common Ancestor (LCA) of two nodes using the parent and depth arrays if depth[u] < depth[v]: u, v = v, u # Lift node u to the same level as node v while depth[u] > depth[v]: u = parent[u] # Find LCA while u != v: u = parent[u] v = parent[v] return u def distance(u, v, parent, depth): Compute the distance between two nodes using LCA :param u: starting node :param v: ending node :param parent: parent array from BFS :param depth: depth array from BFS :return: distance between nodes u and v ancestor = lca(u, v, parent, depth) return depth[u] + depth[v] - 2 * depth[ancestor] def process_queries(n, edges, queries): parent, depth = preprocess_tree(n, edges) results = [] for u, v in queries: results.append(distance(u, v, parent, depth)) return results"},{"question":"In a company, each employee is represented by an ID, which is a positive integer. The management wants to schedule meetings based on the seniority of employees. The seniority is determined by the number of divisors of the employee ID; the more divisors an employee ID has, the more senior the employee is. If two employees have the same number of divisors, the employee with the smaller ID is considered senior. Write a program to find the ID of the most senior employee from a given list of employee IDs. Input The first line contains an integer T, the total number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of employee IDs in the test case. The second line contains N space-separated positive integers representing the employee IDs. Output For each test case, display the ID of the most senior employee. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Employee ID ≤ 10000 Example Input 2 3 10 6 8 4 15 9 16 22 Output 6 16","solution":"def count_divisors(n): Returns the number of divisors of n. count = 0 for i in range(1, int(n ** 0.5) + 1): if n % i == 0: count += 1 if i != n // i: count += 1 return count def most_senior_employee(T, test_cases): Returns the ID of the most senior employee for each test case. results = [] for i in range(T): N, employee_ids = test_cases[i] max_divisors = -1 senior_id = None for emp_id in employee_ids: divisors = count_divisors(emp_id) if divisors > max_divisors or (divisors == max_divisors and (senior_id is None or emp_id < senior_id)): max_divisors = divisors senior_id = emp_id results.append(senior_id) return results"},{"question":"Given a string and a set of words, determine if the string can be segmented into a sequence of one or more dictionary words from the set. Input 1. First line contains the string S (1 ≤ |S| ≤ 1000), consisting of only lowercase English letters. 2. Second line contains an integer M (1 ≤ M ≤ 1000) representing the size of the set of words. 3. Each of the next M lines contains a word (1 ≤ |word| ≤ 100), consisting of only lowercase English letters. Output Output \\"YES\\" if the string can be segmented into one or more words from the set. Otherwise, print \\"NO\\". Example Input: leetcode 2 leet code Output: YES Explanation: The string \\"leetcode\\" can be segmented as \\"leet\\" + \\"code\\". Input: applepenapple 2 apple pen Output: YES Explanation: The string \\"applepenapple\\" can be segmented as \\"apple\\" + \\"pen\\" + \\"apple\\". Input: catsandog 5 cats dog sand and cat Output: NO Explanation: The string \\"catsandog\\" cannot be segmented into a sequence of one or more dictionary words.","solution":"def can_segment_string(S, words): Determine if the string S can be segmented into a sequence of one or more dictionary words from the set. word_set = set(words) dp = [False] * (len(S) + 1) dp[0] = True for i in range(1, len(S) + 1): for j in range(i): if dp[j] and S[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(S)] else \\"NO\\""},{"question":"You are a software developer at a smart home device company. Your team is designing a new feature for understanding the usage of various smart home sensors. Each sensor logs its data in a specific format, recording its sensor ID and the usage duration. Your task is to write a function that will analyze the sensor data and determine which sensor has the highest total usage duration within a given timeframe. # Input The function should accept the following parameters: - `sensor_logs`: A list of sensor logs, where each log is represented as a tuple `(sensor_id, usage_duration)`. The `sensor_id` is a unique integer identifying the sensor, and `usage_duration` is an integer representing the time (in seconds) that the sensor was active. - `timeframe`: A list of two integers representing the start and end time (inclusive) during which the total usage duration should be calculated. The logs may not be sorted in any specific order. The input timeframe will always be within the bounds of the logged data timeframe. # Output The function should return the `sensor_id` of the sensor with the highest total usage duration within the given timeframe. If there are multiple sensors with the same highest usage duration, return the sensor with the smallest `sensor_id`. # Example ```python sensor_logs = [ (1, 300), # sensor 1 for 300 seconds (2, 200), # sensor 2 for 200 seconds (2, 500), # sensor 2 for 500 seconds (3, 100), # sensor 3 for 100 seconds (1, 200), # sensor 1 for 200 seconds (3, 400) # sensor 3 for 400 seconds ] timeframe = [100, 600] # In this timeframe: # sensor 1 has a total usage duration of 300 + 200 = 500 seconds # sensor 2 has a total usage duration of 200 + 500 = 700 seconds # sensor 3 has a total usage duration of 100 + 400 = 500 seconds # Sensor 2 has the highest usage duration (700 seconds), so the function should return 2 ``` # Constraints - The number of sensor logs will not exceed 1000. - `usage_duration` will always be a positive integer. - The `sensor_id` will be an integer within the range [1, 100]. # Function Signature ```python def highest_usage_sensor(sensor_logs: List[Tuple[int, int]], timeframe: List[int]) -> int: pass ```","solution":"from typing import List, Tuple def highest_usage_sensor(sensor_logs: List[Tuple[int, int]], timeframe: List[int]) -> int: sensor_usage = {} # Filter logs within the timeframe and calculate total usage for each sensor for sensor_id, usage_duration in sensor_logs: if timeframe[0] <= usage_duration <= timeframe[1]: if sensor_id not in sensor_usage: sensor_usage[sensor_id] = 0 sensor_usage[sensor_id] += usage_duration max_duration = -1 highest_sensor_id = None # Determine the sensor with the maximum usage within the timeframe for sensor_id in sorted(sensor_usage.keys()): if sensor_usage[sensor_id] > max_duration: max_duration = sensor_usage[sensor_id] highest_sensor_id = sensor_id return highest_sensor_id"},{"question":"Write a program to display an inverted right triangle of height N using the \'*\' character. Constraints * 1 ≤ N ≤ 100 Input The input consists of a single integer N. Output Print the inverted right triangle with height N. Example Input 5 Output ***** **** *** ** * Input 3 Output *** ** *","solution":"def inverted_right_triangle(N): Prints an inverted right triangle of height N using \'*\' character. :param N: int for i in range(N, 0, -1): print(\'*\' * i)"},{"question":"In a distant galaxy, there is a new type of currency called \\"GalaxyCoins\\". Each GalaxyCoin has a value represented by a string of lowercase English letters. The value of a GalaxyCoin string \\"val\\" is defined as follows: 1. If \\"val\\" is a palindrome, then the value is the length of the string. 2. If \\"val\\" is not a palindrome, then the value is twice the length of the longest palindromic subsequence in \\"val\\". Chef has been given several GalaxyCoins and wants to determine the value of each coin. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a program to help Chef determine the value of each GalaxyCoin given its string representation. Input The first line of the input contains an integer T, the number of test cases. Then T lines follow, each containing a GalaxyCoin string val. Output For each test case, output a single integer representing the value of the GalaxyCoin. Constraints 1 ≤ T ≤ 100 1 ≤ |val| ≤ 1000 Example Input: 3 abba abc cbbd Output: 4 4 4 Explanation In the first test case, \\"abba\\" is already a palindrome, so its value is 4. In the second test case, the longest palindromic subsequence of \\"abc\\" is \\"a\\", \\"b\\", or \\"c\\", each with length 1, so its value is 2 * 1 = 2. In the third test case, the longest palindromic subsequence of \\"cbbd\\" is \\"bb\\", and its length is 2, so its value is 2 * 2 = 4.","solution":"def is_palindrome(s): return s == s[::-1] def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n-cl+1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] def galaxy_coin_value(val): if is_palindrome(val): return len(val) return 2 * longest_palindromic_subsequence(val) def solve(t, cases): results = [] for val in cases: results.append(galaxy_coin_value(val)) return results"},{"question":"Alice has a collection of N magical items, each with a distinct weight and a value assigned to them. She wants to select a subset of these items such that the total weight of the selected items does not exceed W, a given weight limit. Since Alice is interested in maximizing the total value of her selected items, she needs your help to determine the maximum possible value she can achieve without exceeding the weight limit W. Input: The first line of input consists of a single integer T denoting the number of test cases. For each test case: - The first line contains two integers, N and W, denoting the number of items and the weight limit, respectively. - Each of the next N lines contains two integers, weight and value, of the i-th item. Output: For each test case, print a single integer denoting the maximum value that can be achieved without exceeding the weight limit W. Print a new line after each test case. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ W ≤ 1000 1 ≤ weight, value ≤ 1000 SAMPLE INPUT 1 3 50 10 60 20 100 30 120 SAMPLE OUTPUT 220","solution":"def knapsack_max_value(test_cases): Returns the maximum value that can be achieved without exceeding the weight limit for each test case. results = [] for N, W, items in test_cases: dp = [0] * (W + 1) for weight, value in items: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) results.append(dp[W]) return results"},{"question":"You are given a string consisting of parentheses \'(\', \')\', curly braces \'{\', \'}\', square brackets \'[\', \']\', and alphanumeric characters. The string can be considered balanced if: 1. Each opening bracket has a corresponding closing bracket of the same type. 2. The brackets are properly nested and closed in the correct order. Your task is to determine if the given string is balanced. Constraints * The string length does not exceed 10^5 characters. Input The input is a single line containing the string. Output Output \\"Yes\\" if the string is balanced, otherwise output \\"No\\". Examples Input {[a + (b + c)] + (d + e)} Output Yes Input {[a + (b + c)] + (d + e)] Output Yes Input {a + (b * c) + (d + e)} Output Yes Input {a + b * c) + (d + e} Output No","solution":"def is_balanced(string): Determines if a given string with brackets and alphanumeric characters is balanced. stack = [] opening = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} closing = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in string: if char in opening: stack.append(char) elif char in closing: if stack and stack[-1] == closing[char]: stack.pop() else: return \\"No\\" return \\"Yes\\" if not stack else \\"No\\""},{"question":"You are given an array of n integers that represent the heights of buildings arranged in a row. The task is to identify the maximum water that can be trapped within these buildings after raining. Each building is represented as an integer in the array, and the width of each building is 1 unit. For example, given an array `heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]`, the maximum water that can be trapped is 6 units. The water traps will occur as follows: - Between buildings indexed at 1 and 3. - Between buildings indexed at 4 and 7. - Between buildings indexed at 8 and 10. Input: - The first line contains a single integer t (1 ≤ t ≤ 50), the number of test cases. - Each test case consists of two lines. - The first line contains an integer n (1 ≤ n ≤ 10^4), the number of buildings. - The second line contains n integers separated by spaces, where each integer h_i (0 ≤ h_i ≤ 10^4) represents the height of the ith building. Output: For each test case, print a single integer representing the maximum units of water that can be trapped between buildings. Example: Input 3 12 0 1 0 2 1 0 1 3 2 1 2 1 8 4 2 0 3 2 5 4 2 5 1 2 1 0 1 Output 6 9 1 Explanation: For the first test case, the maximum amount of water trapped is 6 units, as explained previously. For the second test case, 9 units of water are trapped between the buildings. For the third test case, only 1 unit of water can be trapped between the buildings.","solution":"def max_water_trapped(heights): Calculate the maximum water that can be trapped within the buildings. :param heights: List[int] - A list of integers representing the heights of buildings :return: int - The maximum units of water that can be trapped if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the accumulated water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Alex loves collecting stamps. He has a notebook where he places his stamps. Each stamp is characterized by its unique number and the notebook is divided into numbered pages. Alex wants to place each stamp on its own page such that he minimizes the total number of pages used. Given a list of stamp numbers representing the stamps Alex has collected in the order he obtained them, and the maximum number of stamps that can fit on a single page, determine the smallest number of pages Alex needs for his collection. A page can contain only unique stamps. Input The first line contains two space-separated integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 104) — the number of stamps and the maximum number of stamps per page. The second line contains n space-separated integers representing the stamp numbers. Output Print a single integer — the minimum number of pages Alex needs to place all his stamps. Examples Input 6 3 1 2 3 1 2 3 Output 2 Input 5 2 4 4 4 4 4 Output 1","solution":"def min_number_of_pages(n, k, stamps): Returns the minimum number of pages needed to place all stamps. n: int : Number of stamps k: int : Maximum number of stamps per page stamps: List[int] : List of stamp numbers # Use a set to keep track of unique stamps seen so far unique_stamps = set() # Counter for pages pages = 0 for stamp in stamps: # Add the stamp to the set of unique stamps unique_stamps.add(stamp) # If the set reaches the capacity of k if len(unique_stamps) == k: # Increment the page count pages += 1 # Reset the set for new page unique_stamps = set() # Account for leftover stamps if any if unique_stamps: pages += 1 return pages"},{"question":"Implement a function to determine whether a given year is a leap year in the Gregorian calendar. Constraints * 1 leq year leq 10^6 * All input values are integers. Input The input is given from Standard Input as an integer representing the year. Output Print \\"YES\\" if the given year is a leap year, otherwise print \\"NO\\". A year is a leap year if: 1. It is divisible by 4. 2. If it is divisible by 100, it should also be divisible by 400. Examples Input 2000 Output YES Input 1900 Output NO Input 2016 Output YES","solution":"def is_leap_year(year): Determines whether a given year is a leap year in the Gregorian calendar. Args: year (int): The year to check. Returns: str: \'YES\' if the year is a leap year, otherwise \'NO\'. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return \\"YES\\" else: return \\"NO\\" else: return \\"YES\\" else: return \\"NO\\""},{"question":"In the medieval period, merchants used a balance scale to measure the weights of goods using weights of known quantities. Given the weights they had, they would place weights on either side of the balance scale to determine the weight of an object. Assuming they had a set of weights {w1, w2, ..., wk}, they could measure all weights from 1 to the sum of all these weights inclusively by distributing the weights properly. In this problem, you need to determine the minimum number of weights needed to measure every weight from 1 to the given input weight. You may assume that each weight is a power of 3 (i.e., 1, 3, 9, 27, …). Input The input is a single integer number n which represents the maximum weight to be measured. You may assume 1 ≤ n ≤ 2000. Output The output should be a single integer which is the minimum number of weights required to measure all weights from 1 to the given input weight n. Example Input 17 Output 3 Explanation To measure every weight from 1 to 17, you can use the weights [1, 3, 9]. These weights can be combined in various ways to measure any weight from 1 to 17 inclusively. Consider another example: Input 40 Output 4 Explanation To measure every weight from 1 to 40, you can use the weights [1, 3, 9, 27]. These weights cover all required weights through proper weight placement on either side of the balance.","solution":"def min_weights(n): Find the minimum number of weights needed to measure every weight from 1 to the given input weight n using powers of 3. weights = [] current_weight = 1 while current_weight <= n: weights.append(current_weight) current_weight *= 3 return len(weights)"},{"question":"You are given a list of n integers where each integer is in the range 1 to n. Your task is to determine whether it is possible to reorder the list so that no integer remains in its initial position. If such a reordering exists, print \\"YES\\", otherwise print \\"NO\\". Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the list. The second line contains n integers, the elements of the list. Each element will be between 1 and n inclusive. Output Print \\"YES\\" if there is a reordering that meets the condition, otherwise print \\"NO\\". Examples Input 4 1 2 3 4 Output YES Input 1 1 Output NO Input 5 1 2 3 4 5 Output YES","solution":"def can_reorder_to_avoid_initial_positions(n, arr): Determine if it is possible to reorder the list so that no integer remains in its initial position. Parameters: n (int): The length of the list. arr (list of int): The list of n integers. Returns: str: \\"YES\\" if such a reordering is possible, \\"NO\\" otherwise. if n == 1: return \\"NO\\" return \\"YES\\""},{"question":"Given an integer `n`, returns the prime factorization of all numbers from 1 to `n` (inclusive). The prime factorization of a number `k` is a representation of `k` as a product of prime numbers. The prime factorization should be presented in the format `{prime: exponent}`, where each prime factor and its corresponding exponent are included in the dictionary. Constraints: * 1 leq n leq 100 Input: Single integer `n`. Output: List of prime factorization dictionaries for each integer from 1 to `n`. Each dictionary should include the prime factors and their exponents for that integer. Example: Input: 5 Output: [ {1: 1}, {2: 1}, {3: 1}, {2: 2}, {5: 1} ] Input: 10 Output: [ {1: 1}, {2: 1}, {3: 1}, {2: 2}, {5: 1}, {2: 1, 3: 1}, {7: 1}, {2: 3}, {3: 2}, {2: 1, 5: 1} ]","solution":"def prime_factors(n): Returns a list of dictionaries where each dictionary represents the prime factorization of integers from 1 to n. def factorize(num): if num == 1: return {1: 1} factors = {} divisor = 2 while num >= 2: while num % divisor == 0: if divisor in factors: factors[divisor] += 1 else: factors[divisor] = 1 num //= divisor divisor += 1 return factors return [factorize(i) for i in range(1, n + 1)]"},{"question":"A string ( s ) is a valid arithmetic expression in a specific notation if either: - ( s ) consists of only a single digit from \'0\' to \'9\'. - ( s ) has the form \\"(op x y)\\" where: - ( op ) is one of the operators \'+\', \'-\', \'*\', or \'/\'. - ( x ) and ( y ) are valid arithmetic expressions in this notation. Given a valid arithmetic expression in this notation, compute its value. You can assume that the input is always a valid arithmetic expression, and division by zero will not occur. The expression must be evaluated using normal arithmetic rules: - Addition (\'+\') means sum of two numbers. - Subtraction (\'-\') means difference of two numbers. - Multiplication (\'*\') means product of two numbers. - Division (\'/\') means quotient of two numbers. # Constraints: - The length of the input string will not exceed 1000 characters. # Input: Input consists of a single line containing a valid arithmetic expression. # Output: Output a single number, which is the value of the arithmetic expression rounded to 2 decimal places. # Examples: Input: ``` ( + 4 5 ) ``` Output: ``` 9.00 ``` Input: ``` ( * ( - 10 3 ) ( / 6 2 ) ) ``` Output: ``` 21.00 ``` Input: ``` ( + 7 ( * 2 3 ) ) ``` Output: ``` 13.00 ```","solution":"def evaluate_expression(expression): def helper(expr): expr = expr.strip() if expr.isdigit(): return float(expr) if expr[0] == \'(\': expr = expr[1:-1].strip() parts = [] i = 0 start = 0 while i < len(expr): if expr[i] == \' \': if expr[start:i].strip(): parts.append(expr[start:i].strip()) start = i + 1 elif expr[i] == \'(\': nest = 1 j = i + 1 # find the closing parenthesis while j < len(expr) and nest > 0: if expr[j] == \'(\': nest += 1 elif expr[j] == \')\': nest -= 1 j += 1 parts.append(expr[i:j].strip()) i = j - 1 start = j i += 1 if expr[start:].strip(): parts.append(expr[start:].strip()) op = parts[0] x = helper(parts[1]) y = helper(parts[2]) if op == \'+\': return x + y elif op == \'-\': return x - y elif op == \'*\': return x * y elif op == \'/\': return x / y return round(helper(expression), 2)"},{"question":"A robot called R2-D2 has been programmed to operate in a 2D grid of size n x m. The robot starts at the top-left corner of the grid (position (1, 1)) and wants to reach the bottom-right corner of the grid (position (n, m)). However, there are certain cells in the grid that are forbidden, and the robot cannot move through these cells. The robot can only move to the right or down from its current cell. Your task is to determine the number of different paths the robot can take to reach the bottom-right corner from the top-left corner without passing through any forbidden cells. If it is not possible for the robot to reach the bottom-right corner, return 0. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The second line of the input contains an integer k (0 ≤ k ≤ n * m) — the number of forbidden cells. The next k lines each contain two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the positions of the forbidden cells. Output Print the number of different valid paths from the top-left corner to the bottom-right corner. If no such path exists, print 0. Examples Input 3 3 1 2 2 Output 2 Input 3 3 2 2 2 3 1 Output 1 Input 3 3 3 2 2 3 1 1 3 Output 0 Note In the first example, two valid paths are: (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) (1, 1) → (1, 2) → (2, 2) (invalid, forbidden) (1, 1) → (2, 1) → (2, 2) (invalid, forbidden) The only paths left are: (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3) (1, 1) → (1, 2) → (2, 2) (invalid, forbidden) Therefore there are 2 valid paths. In the third example, no valid path exists due to the forbidden cells blocking all possible routes.","solution":"def num_paths(n, m, k, forbidden): # Create a grid initialized with 0 grid = [[0] * m for _ in range(n)] # Mark the forbidden cells for x, y in forbidden: grid[x-1][y-1] = -1 # Start position if grid[0][0] != -1: grid[0][0] = 1 # Fill the grid with path counts for i in range(n): for j in range(m): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] # The number of paths to the bottom-right corner return grid[n-1][m-1] if grid[n-1][m-1] != -1 else 0"},{"question":"Philip, a wildlife researcher, is tracking the movements of a group of migratory birds. He records the daily altitude changes of these birds over a period of n days. For each day, he notes down the change in altitude compared to the previous day. Philip needs to identify the longest stretch of continuous days where the birds either gained or maintained altitude each day. Given a list of integers representing the daily altitude changes, find the length of the longest subsequence where all elements are non-negative (i.e., the altitude did not decrease). Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of days Philip tracked the birds. The second line contains n integers separated by spaces, where each integer represents the altitude change on that day (a positive value indicates an altitude gain, zero indicates no change, and a negative value indicates an altitude loss). Each integer is between -100 and 100 inclusive. Output Output a single integer — the length of the longest stretch of days with non-negative altitude changes. Examples Input 10 -1 2 3 -5 4 0 3 2 -2 3 Output 4 Input 5 0 0 0 0 0 Output 5 Input 7 -1 -2 -3 -4 -5 -6 -7 Output 0 Note In the first example, the longest stretch where the birds did not lose altitude is [4, 0, 3, 2], which has a length of 4. In the second example, every day has a non-negative change, so the length of the longest stretch is 5. In the third example, there are no days with non-negative altitude changes, so the longest stretch is 0.","solution":"def longest_non_negative_stretch(n, altitude_changes): longest_stretch = 0 current_stretch = 0 for change in altitude_changes: if change >= 0: current_stretch += 1 longest_stretch = max(longest_stretch, current_stretch) else: current_stretch = 0 return longest_stretch"},{"question":"You are given three integers x, y, and z. Determine if x+y=z, xtimes y=z, or neither holds. Constraints * 1 leq x, y, z leq 100 * All values in input are integers. Input Input is given from Standard Input in the following format: x y z Output If x+y=z, print `+`; if xtimes y=z, print `*`; if neither holds, print `x`. Examples Input 10 5 15 Output + Input 4 5 20 Output * Input 2 3 8 Output x","solution":"def determine_operation(x, y, z): Determines whether x + y = z, x * y = z, or neither. Returns \'+\' if x + y = z, \'*\' if x * y = z, \'x\' if neither. if x + y == z: return \'+\' elif x * y == z: return \'*\' else: return \'x\'"},{"question":"Sam is a collector who loves beautiful sequences of numbers. One day, he decides to create an aesthetic sequence where the adjacent numbers differ by exactly 1. After he collects the numbers in this manner, he starts to wonder how long his sequence can be without creating any duplicate numbers. He wants to create the sequence starting with a given number S, and he establishes the following rule: At each step, he can either increment or decrement the current number by one to add a new number to the sequence. His goal is to create the longest possible sequence consisting of unique numbers only. Write a program to help Sam find the length of the longest possible sequence starting from S without including any duplicate numbers. Input format: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single integer S, the starting number of the sequence. Output format: For each test case, print the length of the longest possible sequence of unique numbers that can be created starting from S. Constraints: 1 ≤ T ≤ 100 1 ≤ S ≤ 10^9 SAMPLE INPUT 2 1 3 SAMPLE OUTPUT 3 3 Explanation: In the first test case, starting from 1, the possible sequence is: 1, 2, 3 or 1, 0, -1 (both are counted as having length 3). In the second test case, starting from 3, the possible sequence is: 3, 4, 5 or 3, 2, 1 (again, both have length 3).","solution":"def longest_sequence_length(start): Calculates the longest sequence length of unique numbers starting from the given number. return 3 def process_test_cases(test_cases): Processes multiple test cases and returns results for each. results = [] for t in test_cases: results.append(longest_sequence_length(t)) return results"},{"question":"Philip is interested in learning about number theory and he came across the concept of Euler\'s Totient Function φ(n). The Euler\'s Totient Function φ(n) for an integer n is defined as the number of integers k in the range 1 ≤ k ≤ n such that gcd(n, k) = 1. Given an integer n, Philip wants to compute the value of φ(n) to further explore its properties. Write a function `euler_totient(n)` that calculates and returns the value of φ(n). **Input**: - An integer n (1 ≤ n ≤ 10^9). **Output**: - A single integer which is the value of φ(n). **Example**: **Input**: ``` 9 ``` **Output**: ``` 6 ``` **Explanation**: The integers 1, 2, 4, 5, 7, and 8 fit the criteria because the gcd of each with 9 is 1. **Note**: - The function `euler_totient(n)` should be efficient enough to handle large values of n. - Pay attention to edge cases such as the smallest possible value for n.","solution":"def euler_totient(n): Computes Euler\'s Totient Function φ(n). if n == 1: return 1 result = n p = 2 while p * p <= n: if n % p == 0: while n % p == 0: n //= p result -= result // p p += 1 if n > 1: result -= result // n return result"},{"question":"A recent graduate named Charlie is tasked with organizing a large archive of research papers. Each paper has a unique identifier and a list of keywords associated with it. Charlie wants to maintain a quick lookup system to determine which papers are related based on shared keywords. Your task is to build a program that, given a list of papers and their keywords, determines the number of pairs of papers that share at least one keyword. Write a program that takes an integer n (2 ≤ n ≤ 10,000), representing the number of papers, followed by n lines where each line contains a paper identifier (a string of up to 32 single-byte characters) and a list of keywords (each keyword is a string of up to 32 single-byte characters, and keywords are space-separated). The end of the input is indicated by a single line with zero. For each dataset, output the number of pairs of papers that share at least one keyword. Input ``` The input is provided as follows: n paper1 keyword1 keyword2 ... keywordm paper2 keyword1 keyword2 ... keywordm :: papern keyword1 keyword2 ... keywordm 0 ``` Output ``` For each dataset, output a single integer indicating the number of paper pairs that share at least one keyword. ``` Example Input ``` 3 paperA biology chemistry paperB physics biology paperC chemistry mathematics 5 paperD physics chemistry paperE biology paperF physics paperG mathematics paperH chemistry biology 0 ``` Output ``` 2 3 ```","solution":"def count_paper_pairs(n, papers): from collections import defaultdict keyword_to_papers = defaultdict(set) # Parse papers and build a dictionary to track papers by keyword for paper in papers: data = paper.split() paper_id = data[0] keywords = data[1:] for keyword in keywords: keyword_to_papers[keyword].add(paper_id) # Use a set to keep track of all unique pairs pairs = set() # For each papers set in keyword_to_papers, create a combination of papers that have that keyword for paper_set in keyword_to_papers.values(): paper_list = list(paper_set) size = len(paper_list) for i in range(size): for j in range(i + 1, size): pair = tuple(sorted([paper_list[i], paper_list[j]])) pairs.add(pair) return len(pairs) def process_input(input_lines): results = [] index = 0 while index < len(input_lines): n = int(input_lines[index].strip()) if n == 0: break index += 1 papers = [] for _ in range(n): papers.append(input_lines[index].strip()) index += 1 result = count_paper_pairs(n, papers) results.append(result) return results"},{"question":"You are given a string S and Q queries. For each query, you are given two integers, L and R, which denote the range of indices (inclusive) in the string. Your task is to find the lexicographically smallest and largest characters in the substring S[L:R]. Input: The first line contains the string S. The second line contains an integer Q, denoting the number of queries. The following Q lines each contain two integers L and R. Output: For each query, print the lexicographically smallest and largest characters in the substring S[L:R] separated by a space. Constraints: 1 ≤ |S| ≤ 10^5 1 ≤ Q ≤ 10^5 0 ≤ L ≤ R < |S| SAMPLE INPUT abcdefg 3 1 3 0 6 2 4 SAMPLE OUTPUT b d a g c e","solution":"def smallest_and_largest_chars(S, queries): For each query, find the lexicographically smallest and largest characters in the substring S[L:R]. Parameters: S (str): The input string. queries (list of tuples): Each tuple (L, R) represents a query with L and R being the inclusive range of indices. Returns: list of tuples: Each tuple contains the smallest and largest characters for the respective query range. results = [] for L, R in queries: substring = S[L:R + 1] smallest_char = min(substring) largest_char = max(substring) results.append((smallest_char, largest_char)) return results"},{"question":"Your task is to create a function that evaluates a string and determines whether it can be converted to a palindrome by removing at most one character. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function that returns \\"Yes\\" if the string can be turned into a palindrome by removing at most one character, and \\"No\\" otherwise. Input – a single string Output – “Yes” if it can be a palindrome by removing one character or none, “No” otherwise (quotes for clarity only) Sample Input: radakr Sample Output: Yes SAMPLE INPUT abcdefdba SAMPLE OUTPUT No","solution":"def can_be_palindrome_by_removing_one(s): This function returns \'Yes\' if the input string can be turned into a palindrome by removing at most one character, otherwise it returns \'No\'. def is_palindrome_range(start, end): while start < end: if s[start] != s[end]: return False start += 1 end -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: if is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1): return \\"Yes\\" else: return \\"No\\" left += 1 right -= 1 return \\"Yes\\""},{"question":"Given an undirected graph with N vertices and M edges, determine the total number of connected components in the graph. A connected component is a set of vertices such that there is a path between any two vertices in this set, and which is connected to no additional vertices in the supergraph. Constraints * 1 leq N leq 10^5 * 0 leq M leq 2 cdot 10^5 Input The input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 . . . u_M v_M Each of the next M lines contains the pair of vertices u_i, v_i which denote that there is an edge between vertex u_i and vertex v_i. Output Print the number of connected components in the graph. Examples Input 6 3 1 2 2 3 4 5 Output 3 Input 8 5 1 2 3 4 4 5 6 7 7 8 Output 3 Input 5 0 Output 5","solution":"def count_components(n, edges): Returns the number of connected components in an undirected graph. :param n: Number of vertices :param edges: List of edges as pairs (u, v) :return: Number of connected components from collections import defaultdict, deque # Build graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # To keep track of visited nodes visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) components = 0 # Check all nodes from 1 to n for node in range(1, n + 1): if node not in visited: bfs(node) components += 1 return components # Example usage: # N = 6 # M = 3 # edges = [(1, 2), (2, 3), (4, 5)] # print(count_components(N, edges)) # Output should be 3"},{"question":"Problem: You are given a list of N integers. Your task is to find the number of pairs (i, j) such that 1 leq i < j leq N and the sum of A_i and A_j is divisible by K. Constraints The input satisfies the following conditions. - 2 leq N leq 10^5 - 1 leq K leq 10^5 - 0 leq A_i leq 10^9 Input All inputs are given as integers in the following format: N K A_1 A_2 A_3 ... A_N The first line contains two integers N and K which represent the number of elements in the list and the divisor respectively. The second line contains N integers, A_1, A_2, ..., A_N which represent the elements of the list. Output Output a single integer which is the number of pairs satisfying the given condition. Examples Input 5 3 1 2 3 4 5 Output 4 Input 6 5 5 10 15 20 25 30 Output 15","solution":"def count_divisible_pairs(N, K, A): Returns the number of pairs (i, j) such that 1 <= i < j <= N and the sum A_i + A_j is divisible by K. :param N: Number of elements in the list :param K: Divisor :param A: List of integers :return: Number of pairs remainder_count = [0] * K for number in A: remainder_count[number % K] += 1 count = 0 count += (remainder_count[0] * (remainder_count[0] - 1)) // 2 for i in range(1, (K // 2) + 1): if i != K - i: count += remainder_count[i] * remainder_count[K - i] if K % 2 == 0: count += (remainder_count[K // 2] * (remainder_count[K // 2] - 1)) // 2 return count"},{"question":"In a city, there are n houses connected by m bidirectional roads. The city has a unique network such that there is exactly one path between any pair of houses. This means the network forms a tree structure. The mayor has decided to install a new communication system in this city. The system connects certain pairs of houses directly to ensure that the maximum distance between any two houses in the city is minimized. The maximum distance between any two houses in the city is defined as the largest number of roads one must take to travel between any two houses, which is also known as the diameter of the tree. Given the network of roads, your task is to find the largest distance between any two houses and report the diameter of the tree. # Input - The first line contains an integer `n` (2 ≤ n ≤ 10000) — the number of houses in the city. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v) indicating that there is a road between houses `u` and `v`. # Output - Print a single integer — the diameter of the tree. # Example Input ``` 5 1 2 1 3 3 4 3 5 ``` Output ``` 3 ``` # Explanation The longest path in the tree is between Node 2 and Node 4 or Node 2 and Node 5, each requiring 3 roads to traverse. Thus, the diameter of the tree is 3. By ensuring the correct identification of the furthest nodes from any given node and re-evaluating the distances, you can compute the diameter of the tree accurately.","solution":"from collections import deque, defaultdict def find_diameter(n, roads): if n == 2: return 1 def bfs(start_node): visited = [-1] * n visited[start_node] = 0 queue = deque([start_node]) furthest_node, max_distance = start_node, 0 while queue: current = queue.popleft() current_distance = visited[current] for neighbor in adj[current]: if visited[neighbor] == -1: visited[neighbor] = current_distance + 1 if visited[neighbor] > max_distance: max_distance = visited[neighbor] furthest_node = neighbor queue.append(neighbor) return furthest_node, max_distance adj = defaultdict(list) for u, v in roads: adj[u-1].append(v-1) adj[v-1].append(u-1) # First BFS to find the furthest node from an arbitrary start (node 0) furthest_node, _ = bfs(0) # Second BFS to find the distance to the furthest node from the previous furthest node _, diameter = bfs(furthest_node) return diameter"},{"question":"Implement a function that finds the k-th largest element in an unsorted array. Your function should take two parameters: 1. An array of integers `nums`. 2. An integer `k` denoting the position of the k-th largest element. The function should return the k-th largest element in the array. Note: You must solve it without sorting the entire array. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n integers `nums[i]` (-10^4 ≤ nums[i] ≤ 10^4), representing the elements of the array. - The third line contains an integer `k` (1 ≤ k ≤ n), representing the position of the k-th largest element. Output - Output the k-th largest element in the array. Examples Input 6 3 2 1 5 6 4 2 Output 5 Input 8 10 20 15 12 40 25 18 30 4 Output 20","solution":"import heapq def find_kth_largest(nums, k): Finds the k-th largest element in an unsorted array. Parameters: nums (list of int): The array of integers. k (int): The position of the k-th largest element. Returns: int: The k-th largest element in the array. # Use a min-heap of size k to keep track of the k largest elements seen so far min_heap = [] for num in nums: heapq.heappush(min_heap, num) if len(min_heap) > k: heapq.heappop(min_heap) return min_heap[0]"},{"question":"Alice is playing a game with an array of integers. The rules of the game are as follows: 1. Alice can choose any two elements in the array and replace them with their sum. 2. She can repeat this operation as many times as she wants. Alice wants to make sure that the game takes the minimum number of operations. More specifically, she wants to know how many operations it will take for the array to become a single integer. Your task is to help Alice determine the minimum number of operations required to reduce the array to a single integer. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. The first line of the test case contains an integer n (2 ≤ n ≤ 100) — the length of the array. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. Output For each test case, print the minimum number of operations required to reduce the array to a single integer. Example Input 3 3 1 2 3 4 4 3 2 1 5 5 5 5 5 5 Output 2 3 4 Explanation In the first test case, Alice can perform the following operations: 1. Add 1 and 2 to get [3, 3] 2. Add 3 and 3 to get [6] In the second test case, Alice can perform the following operations: 1. Add 4 and 3 to get [7, 2, 1] 2. Add 7 and 2 to get [9, 1] 3. Add 9 and 1 to get [10] In the third test case, Alice can perform the following operations: 1. Add 5 and 5 to get [10, 5, 5, 5] 2. Add 10 and 5 to get [15, 5, 5] 3. Add 15 and 5 to get [20, 5] 4. Add 20 and 5 to get [25]","solution":"def minimum_operations(t, test_cases): Returns the minimum number of operations required to reduce each array in the test cases to a single integer. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains the length of the array and the array itself. Returns: list: List of minimum operations for each test case. results = [] for i in range(t): n, arr = test_cases[i] results.append(n - 1) return results"},{"question":"Your task is to identify and print the length of the Longest Balanced Subsequence (LBS) in a given string consisting of only parentheses \'(\' and \')\'. A subsequence is defined as \'balanced\' if for every open parenthesis \'(\', there is a corresponding closed parenthesis \')\'. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, for the sequence \\"(()())\\", the subsequence \\"()()\\" is also balanced. You need to find the length of the longest balanced subsequence in the provided string. Function Signature: ```python def find_lbs_length(s: str) -> int: ``` Input: - A single string `s` (1 ≤ len(s) ≤ 10^6) containing only the characters \'(\' and \')\'. Output: - Output a single integer representing the length of the Longest Balanced Subsequence. Examples: Input: ``` (())) ``` Output: ``` 4 ``` Explanation: - The longest balanced subsequence is \\"()\\" \\"()\\" and its length is 4. Input: ``` ((((( ``` Output: ``` 0 ``` Explanation: - There is no closing parenthesis, so the longest balanced subsequence has length 0. Input: ``` ()()() ``` Output: ``` 6 ``` Explanation: - The entire string is already balanced and thus its length is 6. Note: - Although the input size can be large, your solution should be efficient enough to handle it within reasonable time limits.","solution":"def find_lbs_length(s: str) -> int: Returns the length of the Longest Balanced Subsequence (LBS) in the given string consisting of only parentheses \'(\' and \')\'. open_count = 0 close_count = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 close_count += 1 # Each pair of open and close parentheses contributes 2 to the length return close_count * 2"},{"question":"Alice is preparing some cookies and wants to arrange them on multiple trays. She has M trays and a total of C cookies. She wants to distribute the cookies as evenly as possible among the trays so that each tray gets nearly the same number of cookies. If the cookies cannot be evenly distributed, some trays may hold one less or one more than the others. At least how many cookies will the tray with the most cookies get? Constraints * M and C are integers. * 1 leq M leq 100 * 1 leq C leq 1000 Input Input is given from Standard Input in the following format: M C Output Print the answer. Examples Input 3 8 Output 3 Input 4 7 Output 2 Input 5 12 Output 3","solution":"def max_cookies_per_tray(M, C): Return the maximum number of cookies a single tray will get. base_cookies = C // M remainder = C % M if remainder > 0: return base_cookies + 1 return base_cookies"},{"question":"Your friend is an avid electronics hobbyist and is currently working on a new project involving LEDs. She wants to create a pattern with her LEDs using specific commands. Each LED can be either ON or OFF. There are two types of commands she can use: 1) Toggle Command: Given an index of an LED, toggle its current state (if it\'s ON, turn it OFF; if it\'s OFF, turn it ON). 2) Query Command: Given an index of an LED, output its current state (\\"ON\\" or \\"OFF\\"). Initially, all LEDs are OFF. Help her manage these commands to create the desired pattern. Input: The first line contains an integer N, the number of LEDs. The second line contains an integer Q, the number of commands. The following Q lines contain one of the following commands: A Toggle Command is indicated by two space-separated integers \\"1\\" and X (the index of the LED to be toggled). A Query Command is indicated by two space-separated integers \\"2\\" and X (the index of the LED to query). Output: For each Query Command, output \\"ON\\" if the LED at the given index is ON and \\"OFF\\" if it is OFF. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ X ≤ N SAMPLE INPUT 5 6 1 1 2 1 1 1 2 1 1 3 2 3 SAMPLE OUTPUT ON OFF ON Explanation: Initially, all LEDs are OFF. After the first Toggle Command, the LED at index 1 is toggled to ON. The first Query Command confirms that the LED at index 1 is ON. After the second Toggle Command, the LED at index 1 is toggled back to OFF. The second Query Command confirms that the LED at index 1 is OFF. After the third Toggle Command, the LED at index 3 is toggled to ON. The third Query Command confirms that the LED at index 3 is ON.","solution":"def manage_leds(N, commands): Manages LEDs based on toggle and query commands. Parameters: N (int): Number of LEDs. commands (list of tuple): List of commands where each command is a tuple (type, index). Returns: list of str: A list containing results for Query Commands (\\"ON\\" or \\"OFF\\"). # Initialize the LEDs; all are initially OFF leds = [False] * N # Store the results of Query Commands result = [] for command in commands: if command[0] == 1: # Toggle Command index = command[1] - 1 # Convert to 0-based index leds[index] = not leds[index] elif command[0] == 2: # Query Command index = command[1] - 1 # Convert to 0-based index result.append(\\"ON\\" if leds[index] else \\"OFF\\") return result"},{"question":"Ana loves to collect postcards. She has a collection of N postcards from M different cities. Each postcard from the same city has the same design, but postcards from different cities are unique. Ana wants to display her collection in a special album, where she can place up to X postcards. However, Ana prefers diversity in her display album, meaning she wants to maximize the number of different city designs in her album. Help Ana determine the maximum number of unique city designs she can place in her album while not exceeding the limit of X postcards. Input The first line contains three integers N, M, and X. The second line contains N integers where the i-th integer denotes the city ID (an integer from 1 to M) for the i-th postcard in Ana\'s collection. Output Output a single integer: the maximum number of unique city designs Ana can place in her album. Example Input: 7 3 5 1 1 2 2 2 3 3 Output: 3 Explanation Ana has 7 postcards in total from 3 cities (city IDs 1, 2, and 3). She can place up to 5 postcards in her album. By selecting 2 postcards from city 1, 2 postcards from city 2, and 1 postcard from city 3, Ana can include postcards from all 3 cities within the limit of 5 postcards. Scoring 1 ≤ X ≤ 10^6 for each test case; 1 ≤ N ≤ 10^6 for each test case; 1 ≤ M ≤ 10^5 for each test case.","solution":"def max_unique_city_designs(N, M, X, city_ids): Determines the maximum number of unique city designs Ana can place in her album. Parameters: N (int): The total number of postcards in Ana\'s collection. M (int): The number of different cities. X (int): The maximum number of postcards Ana can place in her album. city_ids (list of int): The city IDs for each postcard in Ana\'s collection. Returns: int: The maximum number of unique city designs Ana can place in her album. from collections import Counter city_count = Counter(city_ids) unique_city_designs = len(city_count) if unique_city_designs <= X: return unique_city_designs return X"},{"question":"Beth is organizing a robotics competition. Each robot can perform a set of tasks, and she wants to ensure that each robot meets the minimum performance criteria before the competition starts. The criteria is that each robot must complete at least half of the tasks it attempts successfully. You are given the performance data for each robot. Each task attempt by a robot results in either a success or a failure. The total number of tasks attempted by each robot and the number of successful attempts are provided. Your task is to determine for each robot whether it meets the minimum performance criteria. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of robots. Each of the following n lines contains two space-separated integers ai and si (1 ≤ ai ≤ 1000; 0 ≤ si ≤ ai) — the number of tasks attempted by the i-th robot and the number of successful attempts of the i-th robot, respectively. Output Print n lines. For each robot, print \\"QUALIFIED\\" if it meets the minimum performance criteria, otherwise print \\"DISQUALIFIED\\". Examples Input 3 10 5 7 4 8 3 Output QUALIFIED QUALIFIED DISQUALIFIED Input 2 6 2 5 3 Output DISQUALIFIED QUALIFIED Notes In the first example: - The first robot attempted 10 tasks and successfully completed 5, which is exactly half, so it qualifies. - The second robot attempted 7 tasks and successfully completed 4, which is more than half, so it qualifies. - The third robot attempted 8 tasks and successfully completed only 3, which is fewer than half, so it is disqualified. In the second example: - The first robot attempted 6 tasks but only completed 2 successfully, failing to meet the minimum criteria. - The second robot attempted 5 tasks and succeeded in 3, qualifying it for the competition.","solution":"def check_robot_performance(n, performance_data): Determines if each robot meets the minimum performance criteria. Parameters: n (int): The number of robots. performance_data (list of tuples): List containing tuples in which each tuple contains two integers representing the number of tasks attempted and the number of successful attempts. Returns: list of str: List containing \\"QUALIFIED\\" or \\"DISQUALIFIED\\" for each robot based on its performance. results = [] for ai, si in performance_data: if si >= ai / 2: results.append(\\"QUALIFIED\\") else: results.append(\\"DISQUALIFIED\\") return results"},{"question":"Nikola is examining a special kind of sequence, called a balanced array. An array is considered balanced if its sum is zero. To ensure this, the array must contain an equal number of elements with positive and negative values. For this task, you are required to construct such arrays. More formally, given an integer k, construct a balanced array of length 2 * k that contains exactly k positive integers and k negative integers. Each positive integer in the array must be equal to its corresponding negative integer in absolute value. For example, if k = 2, an example of a balanced array would be [-1, 1, -2, 2] or [-3, 3, -4, 4]. Arrays like [1, -1, 2, -2] or [2, -2, 1, -1] are also valid. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The only line for each test case contains one integer k (1 ≤ k ≤ 500). Output For every test case, print one line containing 2 * k integers which form a balanced array. If there are multiple valid arrays, you can print any of them. Examples Input 3 1 2 3 Output -1 1 -1 1 -2 2 -1 1 -2 2 -3 3 Note In the first test case, the only array of length 2 * 1 = 2 that is balanced is [-1, 1]. In the second test case, there are several arrays of length 2 * 2 = 4 that can be balanced, for example: [-1, 1, -2, 2] or [-3, 3, -4, 4]. In the third test case, the balanced arrays of length 2 * 3 = 6 can include variations like: [-1, 1, -2, 2, -3, 3] or [-4, 4, -5, 5, -6, 6].","solution":"def balanced_array(k): Constructs a balanced array of length 2 * k with k positive and k negative integers. Each positive integer in the array must be equal to its corresponding negative integer in absolute value. balanced_arr = [] for i in range(1, k + 1): balanced_arr.append(-i) balanced_arr.append(i) return balanced_arr def generate_balanced_arrays(test_cases): Produces balanced arrays for each test case. :param test_cases: A list of integers representing the value of k for each test case. :return: A list of balanced arrays corresponding to each test case. results = [] for k in test_cases: results.append(balanced_array(k)) return results"},{"question":"Gara and Kankuro like to challenge each other with various puzzles. Today, they are playing a game with sequences of integers. Given a sequence, each player can choose any subsequence of the sequence such that: * The subsequence is strictly increasing. * The length of the subsequence is at least 2. Gara always moves first, and they alternate turns. A player loses if they cannot make a move on their turn. Determine who will win if both players play optimally. Input The first line contains the integer t (1 ≤ t ≤ 1000) - the number of test cases. Each test case starts with an integer n (2 ≤ n ≤ 1000) - the length of the sequence. The second line contains n space-separated integers denoting the elements of the sequence (1 ≤ a_i ≤ 10^5). Output For each test case, print \\"Gara\\" if Gara can secure a victory and \\"Kankuro\\" otherwise. Examples Input 3 4 1 3 2 4 5 5 3 2 1 4 3 1 2 3 Output Gara Kankuro Gara Note In the first example, Gara can choose the subsequence [1, 3], leaving Kankuro with [2, 4]. Kankuro cannot make a move because there\'s no strictly increasing subsequence of length 2 left. Hence, Gara wins. In the second example, Gara will face optimal counterstrikes from Kankuro, who will be left with sequences where they can always pick a valid subsequence eventually leading to Gara losing. In the third example, Gara can always pick the optimal subsequence first and leave no available subsequences for Kankuro. Hence, Gara wins.","solution":"def can_gara_win(sequence): Determine if Gara can secure a victory in the game with the given sequence. Args: sequence (list): List of integers representing the sequence. Returns: str: \\"Gara\\" if Gara can secure a victory, \\"Kankuro\\" otherwise. # The logic here follows that if there is a strictly increasing subsequence # of length >= 2 then the number of such subsequences will determine the outcome. n = len(sequence) # If the number of elements is odd, Gara will always win, because # Gara can make the first move and there will be an odd number of moves # to be made, so Gara gets the last move. if n % 2 == 1: return \\"Gara\\" else: # Since the total length of the sequence is even, Kankuro will always # have the last move assuming both play optimally. return \\"Kankuro\\" def game_results(test_cases): Process multiple test cases and determine the results for each case. Args: test_cases (list): List of test cases, where each test case is a tuple (n, sequence). Returns: list: List of strings with the results for each test case. results = [] for n, sequence in test_cases: results.append(can_gara_win(sequence)) return results"},{"question":"Alice and Bob are playing a number sequence game. In this game, there is an array of n integers. A move consists of choosing any two adjacent elements of the array and replacing them with their sum. Alice always starts first, and they alternate turns until they can no longer make a move. The game ends when the array contains only one element. The player who cannot make a move loses. Assuming both players play optimally, who will win the game? Consider an example: n = 3 and the array is [2, 1, 4]. Possible moves are: 1. [2, 1, 4] -> [3, 4] (sum of 2 and 1) 2. [2, 1, 4] -> [2, 5] (sum of 1 and 4) Suppose that Alice chooses the first move and transforms the array into [3, 4]. Now, it\'s Bob\'s turn. He can either: 1. Combine 3 and 4 to form [7], game ends and Alice wins because Bob made the last move. Input: - The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of integers in the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — denoting the elements of the array. Output: - Print \\"Alice\\" (without quotes) if Alice will win, or \\"Bob\\" (without quotes) if Bob will win. The output characters are case-sensitive. Examples: Input: 3 2 1 4 Output: Alice Input: 4 1 1 1 1 Output: Bob Input: 2 10 20 Output: Alice Note: In the first example, Alice will make the first move [2, 1, 4] -> [3, 4] and Bob will combine them to make [7], resulting in Alice\'s win. In the second example, optimal play results in Bob winning. Regardless of Alice\'s first move, Bob will always make the optimal move to ensure that Alice cannot make the last move.","solution":"def game_winner(n, arr): Determines the winner of the game. Alice starts first, and players alternate moves. The player who cannot make a move loses the game. Args: n: int, the number of integers in the array. arr: list of int, the array of integers. Returns: str: \\"Alice\\" if Alice wins the game, \\"Bob\\" if Bob wins the game. # If the total number of elements n is odd, Alice wins (Alice always starts) # If n is even, Bob wins (Alice always starts but Bob makes the last move) return \\"Alice\\" if n % 2 == 1 else \\"Bob\\""},{"question":"A local cargo transport company operates a fleet of trucks to deliver packages to various destinations. Each truck has a maximum weight capacity and a list of packages to be delivered, where each package has a specific weight. The company wants to optimize the delivery of packages by ensuring that each truck\'s total load does not exceed its weight capacity. The task is to determine the maximum number of packages that can be delivered by each truck without exceeding its weight capacity. Input: - The first input line contains two integers, n and m, where n is the number of trucks and m is the number of packages (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000). - The second input line contains n integers representing the maximum weight capacity of each truck. - The third input line contains m integers representing the weight of each package. Output: - One line containing the maximum number of packages that can be delivered by the trucks. Example: Input: 3 5 15 10 20 5 8 12 2 7 Output: 5 Explanation: 1. Truck 1 with capacity 15 can carry packages with weights 5, 8, and 2 (total: 15). 2. Truck 2 with capacity 10 can carry packages with weights 7 and 2 (total: 9). 3. Truck 3 with capacity 20 can carry packages with weights 12, 5, and 2 (total: 19). In this case, the total number of packages that can be delivered is 5.","solution":"def max_packages(n, m, truck_capacities, package_weights): Returns the maximum number of packages that can be delivered by the trucks without exceeding their capacity. :param n: Number of trucks :param m: Number of packages :param truck_capacities: List of integers representing the maximum weight capacity of each truck :param package_weights: List of integers representing the weight of each package :return: Maximum number of packages that can be delivered truck_capacities.sort(reverse=True) package_weights.sort(reverse=True) total_packages_delivered = 0 for capacity in truck_capacities: current_load = 0 for i in range(len(package_weights)): if package_weights[i] != -1 and current_load + package_weights[i] <= capacity: current_load += package_weights[i] package_weights[i] = -1 total_packages_delivered += 1 return total_packages_delivered"},{"question":"A team of archaeologists is sent to explore a series of ancient tunnels beneath a historic site. The tunnel system can be represented as a grid of n rows and m columns, where each cell in the grid is either passable (represented by \'.\') or impassable (represented by \'#\'). The archaeologists start their exploration from the top-left corner of the grid (cell (1, 1)) and aim to reach the bottom-right corner (cell (n, m)). A team member can move one step at a time in any of the four directions: up, down, left, or right. However, they cannot move into an impassable cell or move outside the boundaries of the grid. The archaeologists are curious to know the number of distinct paths they can take to reach the bottom-right corner from the top-left corner of the grid. Write a program to compute the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of rows and m is the number of columns in the grid. Each of the next n lines contains a string of exactly m characters, representing the grid. Output Print the number of distinct paths from the top-left corner to the bottom-right corner of the grid. If no such path exists, print 0. Examples Input 3 3 ... .#. ... Output 2 Input 4 4 .... .. .... .... Output 4","solution":"def num_paths(n, m, grid): Returns the number of distinct paths from the top-left to the bottom-right corner of the grid. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] # Example usage: # n = 3 # m = 3 # grid = [ # \\"...\\", # \\".#.\\", # \\"...\\" # ] # print(num_paths(n, m, grid)) # Output: 2"},{"question":"Samuel is examining a binary tree and wants to determine the minimum number of swaps needed to convert the tree into a binary search tree (BST). The binary tree is represented as an array where each node contains a distinct integer. The left child of a node at index `i` is at index `2*i + 1` and the right child is at index `2*i + 2`. A swap is defined as exchanging the values of two nodes in the array. Write a program to determine the minimum number of swaps required to rearrange the binary tree into a BST. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of nodes in the binary tree. The second line contains `n` integers, representing the values of nodes in the binary tree. Output Print a single integer — the minimum number of swaps required to convert the binary tree into a binary search tree. Example Input 7 5 2 4 1 3 6 7 Output 3 Explanation Original binary tree: 5 / 2 4 / / 1 3 6 7 Converted to BST: 4 / 2 6 / / 1 3 5 7 One of the possible swap sequences: 1. Swap 4 and 5 resulting in [4, 2, 5, 1, 3, 6, 7] 2. Swap 5 and 6 resulting in [4, 2, 6, 1, 3, 5, 7] 3. Swap 5 and 6 again resulting in [4, 2, 6, 1, 3, 5, 7] Therefore, the minimum number of swaps required is 3.","solution":"def binary_tree_to_bst(nums): Convert binary tree to BST with the minimum number of swaps. if not nums: return 0 # Indexing the elements indexed_nums = list(enumerate(nums)) # Sort the array to know the target positions of elements in BST indexed_nums.sort(key=lambda x: x[1]) visited = {i: False for i in range(len(nums))} swaps = 0 for i in range(len(nums)): # If already visited or already at the correct position, continue if visited[i] or indexed_nums[i][0] == i: continue # Calculate cycle size cycle_size = 0 x = i while not visited[x]: visited[x] = True x = indexed_nums[x][0] cycle_size += 1 # If the cycle size is n, we do (n-1) swaps. if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"You are working on developing a simple simulation of an inventory system for a grocery store. The store needs a program to help manage the stock of products, specifically to add, remove, and check current stock levels of various items. Your task is to create a class `Inventory` that supports the following operations: 1. **Add Items**: Add a specific quantity of a product to the inventory. 2. **Remove Items**: Remove a specific quantity of a product from the inventory. 3. **Check Stock**: Check the current quantity of a particular product in the inventory. 4. **Get All Items**: Retrieve a list of all products currently with their quantities in the inventory. # Class Definition The class should be designed as follows: ```python class Inventory: def __init__(self): Initializes an empty inventory. pass def add_item(self, item: str, quantity: int) -> None: Adds a specific quantity of a product to the inventory. pass def remove_item(self, item: str, quantity: int) -> bool: Removes a specific quantity of a product from the inventory. Returns True if the removal is successful, and False if there is an insufficient quantity. pass def check_stock(self, item: str) -> int: Checks the current quantity of a particular product in the inventory. Returns the quantity if the product exists, or 0 if the product is not found. pass def get_all_items(self) -> list: Returns a list of tuples containing all items and their quantities in the inventory. Each tuple contains (item_name, quantity). pass ``` # Requirements and Constraints - Inventory quantities should be managed as integers. Negative quantities are not allowed. - If `add_item` is called, it should increase the quantity of the item by the specified amount. If the item does not exist in the inventory, it should be added. - If `remove_item` is called and the inventory does not have enough of the product, it should not reduce the quantity and return `False`. - The `get_all_items` method should return a sorted list of products by their names in alphabetical order. - The functions `add_item`, `remove_item`, `check_stock`, and `get_all_items` should run in constant or logarithmic time. # Example ```python inventory = Inventory() inventory.add_item(\'apple\', 10) inventory.add_item(\'banana\', 5) print(inventory.check_stock(\'apple\')) # Output: 10 print(inventory.remove_item(\'banana\', 2)) # Output: True print(inventory.remove_item(\'banana\', 10)) # Output: False print(inventory.check_stock(\'banana\')) # Output: 3 print(inventory.get_all_items()) # Output: [(\'apple\', 10), (\'banana\', 3)] ``` Implement the `Inventory` class with the specified behavior.","solution":"class Inventory: def __init__(self): Initializes an empty inventory. self.items = {} def add_item(self, item: str, quantity: int) -> None: Adds a specific quantity of a product to the inventory. if item in self.items: self.items[item] += quantity else: self.items[item] = quantity def remove_item(self, item: str, quantity: int) -> bool: Removes a specific quantity of a product from the inventory. Returns True if the removal is successful, and False if there is an insufficient quantity. if item in self.items and self.items[item] >= quantity: self.items[item] -= quantity if self.items[item] == 0: del self.items[item] return True return False def check_stock(self, item: str) -> int: Checks the current quantity of a particular product in the inventory. Returns the quantity if the product exists, or 0 if the product is not found. return self.items.get(item, 0) def get_all_items(self) -> list: Returns a list of tuples containing all items and their quantities in the inventory. Each tuple contains (item_name, quantity). return sorted(self.items.items())"},{"question":"Given a list of integers representing the heights of trees in a forest, your objective is to collect the maximum number of wood pieces by cutting down some trees. Each tree can either be cut down or left as is. When a tree is cut down, you collect a single wood piece if its height is an even number. However, there\'s a condition: no two adjacent trees can be cut down. Your task is to determine the maximum number of wood pieces you can collect by cutting down the optimal set of trees following the aforementioned condition. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of trees in the forest. The second line contains n integers h_1, h_2, ..., h_{n} (1 ≤ h_i ≤ 1000) — the heights of the trees. Output The first line should contain the maximum number of wood pieces you can collect. Examples Input 7 4 7 2 8 6 10 1 Output 3 Input 5 3 5 7 9 11 Output 0 Note In the first example, the optimal strategy is to cut down trees at heights 4, 8, and 10, collecting 3 wood pieces. No two adjacent trees are cut down. In the second example, all trees have odd heights, so no wood pieces can be collected, resulting in an output of 0.","solution":"def max_wood_pieces(n, heights): if n == 0: return 0 # dp[i] will store the maximum wood pieces we can collect by considering the first i trees dp = [0] * n # Start by considering the first tree if heights[0] % 2 == 0: dp[0] = 1 if n == 1: return dp[0] # Now, consider the second tree if heights[1] % 2 == 0: dp[1] = max(dp[0], 1) else: dp[1] = dp[0] # Fill dp array for subsequent trees for i in range(2, n): if heights[i] % 2 == 0: dp[i] = max(dp[i-1], dp[i-2] + 1) else: dp[i] = dp[i-1] return dp[-1]"},{"question":"A technology company logs the user activity on its platform for analytics purposes. Each activity is recorded with a username and a status indicating whether the user was \\"online\\" or \\"offline\\". You need to determine the duration each user was online. Write a program to process the log entries and calculate the total online duration for each user. Input The first line of input contains an integer n, the number of log entries (1 ≤ n ≤ 1000). Each of the next n lines contains a log entry consisting of a timestamp (in seconds), a username, and a status (\\"online\\" or \\"offline\\"). The entries are ordered by timestamp. Each user always starts with being \\"online\\". Output For each user, print the username followed by the total online duration in seconds. The users should be listed in alphabetic order by their usernames. Example Input 7 10 alice online 15 bob online 30 alice offline 35 bob offline 50 alice online 80 alice offline 100 bob online Output alice 50 bob 20","solution":"def calculate_online_durations(logs): Calculate the total online duration for each user from the given log entries. :param logs: List of logs where each log is a tuple (timestamp, username, status). :return: A dictionary with username as key and total online duration in seconds as value. user_sessions = {} online_times = {} for log in logs: timestamp, username, status = log if username not in online_times: online_times[username] = 0 if status == \\"online\\": user_sessions[username] = timestamp elif status == \\"offline\\": if username in user_sessions: online_times[username] += (timestamp - user_sessions[username]) del user_sessions[username] return {user: online_times[user] for user in sorted(online_times)} # Example usage: logs_input = [(10, \\"alice\\", \\"online\\"), (15, \\"bob\\", \\"online\\"), (30, \\"alice\\", \\"offline\\"), (35, \\"bob\\", \\"offline\\"), (50, \\"alice\\", \\"online\\"), (80, \\"alice\\", \\"offline\\"), (100, \\"bob\\", \\"online\\")] print(calculate_online_durations(logs_input)) # Expected output: {\'alice\': 50, \'bob\': 20}"},{"question":"Sara is tasked with distributing candies to children in her neighborhood during Halloween. She has a large bag containing n candies of k different types. Each candy type i is represented as an integer ai, indicating the number of candies of that type. Sara wants to ensure that every child she gives candies to receives an equal total number of candies, but the type of candy each child gets can vary. Sara wants to know the maximum number of children she can distribute the candies to such that each child receives exactly the same number of candies, and no candies are left undistributed. Input The first line of input contains two integers n and k (1 ≤ n ≤ 200 000, 1 ≤ k ≤ 200 000) — the total number of candies and the number of different types. The second line contains k integers a1, a2, ..., ak (1 ≤ ai ≤ 109), where ai represents the number of candies of the i-th type. Output Print the maximum number of children who can receive the same total number of candies. Examples Input 10 3 2 3 5 Output 5 Input 12 4 2 4 6 8 Output 12 Input 8 2 4 4 Output 4 Note In the first sample, the candies can be distributed as follows: each child gets 2 candies (1 from type 1 and 1 from type 2). In the second sample, each child can receive 1 candy. Since there are 4 types of candies and 12 candies in total, Sara can distribute them to 12 children. In the third sample, Sara can give 2 candies to each child and distribute them to a maximum of 4 children.","solution":"def max_children(n, k, a): from math import gcd from functools import reduce def find_gcd(arr): return reduce(gcd, arr) return find_gcd(a)"},{"question":"In a faraway land, there are M villages connected by a network of roads. Each road connects exactly two villages and has a certain transportation capacity, which is the maximum number of units of goods that can be transported through that road at a time. The villagers want to know the maximum capacity to transport goods between pairs of villages. You are required to process R queries of the form: t a b c where t denotes the type of query and can be 0 or 1. If t is 0, it denotes that a new road is constructed between villages a and b with capacity c. When t is 1, you need to answer what is the maximum capacity of goods transportable between villages a and b through the current road network. Input The first line contains 2 integers M and R denoting the number of villages and number of queries respectively. In the next R lines, each line has a query of the form \\"t a b c\\". Output For each query of type 1, on separate lines print the maximum capacity of goods transportable between villages a and b. If there is no path between the villages, print \\"0\\" (without quotes). Constraints 2 ≤ M ≤ 10^5 1 ≤ R ≤ 10^5 1 ≤ a, b ≤ M 1 ≤ c ≤ 10^9 Example Input 5 6 0 1 2 4 0 2 3 3 1 1 3 0 3 4 2 1 1 4 1 2 4 0 4 5 5 Output 3 2 2 5 Explanation Initially no villages are connected. Connect 1-2 with capacity 4. Connect 2-3 with capacity 3. The maximum capacity to transport goods between 1 and 3 is the minimum of capacities on the path 1-2-3, which is 3. Connect 3-4 with capacity 2. Maximum capacity between 1 and 4 is minimum of capacities on the path 1-2-3-4, which is 2. Maximum capacity between 2 and 4 is similarly 2. Connect 4-5 with capacity 5. Maximum capacity between 1 and 5 is the minimum capacity on the path 1-2-3-4-5, which is 2.","solution":"from collections import defaultdict import heapq class RoadNetwork: def __init__(self, M): self.M = M self.graph = defaultdict(list) def add_road(self, a, b, c): self.graph[a].append((b, c)) self.graph[b].append((a, c)) def max_capacity(self, a, b): if a == b: return float(\'inf\') max_cap = [0] * (self.M + 1) max_cap[a] = float(\'inf\') pq = [(-float(\'inf\'), a)] while pq: curr_capacity, node = heapq.heappop(pq) curr_capacity = -curr_capacity if node == b: return curr_capacity for neighbor, capacity in self.graph[node]: new_capacity = min(curr_capacity, capacity) if new_capacity > max_cap[neighbor]: max_cap[neighbor] = new_capacity heapq.heappush(pq, (-new_capacity, neighbor)) return 0 def process_queries(M, R, queries): rn = RoadNetwork(M) results = [] for query in queries: t, a, b, c = query if t == 0: rn.add_road(a, b, c) elif t == 1: results.append(rn.max_capacity(a, b)) return results"},{"question":"A gardener wants to arrange his garden by planting flowers in n pots, each pot should contain exactly one flower. Flowers are of different types, represented by positive integers. The beauty of the garden is determined by the sum of the beauty values of individual flowers, and each flower type has a specific beauty value associated with it. The gardener can perform the following two operations any number of times in order to maximize the beauty of his garden: - Operation 1: Swap the flowers in any two pots. - Operation 2: Replace the current flower in a pot with another flower from a predefined set of m flower types, where each flower type has an associated beauty value. Your task is to determine the maximum beauty value that the gardener can achieve for his garden. Input The first line contains two space-separated integers n (1 ≤ n ≤ 30) and m (1 ≤ m ≤ 100) — the number of pots and the number of flower types in the predefined set. The second line contains n space-separated integers representing the initial arrangement of flowers in the pots. The third line contains m space-separated integers representing the beauty values of the predefined set of flower types. Output Print a single integer — the maximum beauty value that the gardener can achieve. Example Input 3 4 1 2 3 10 20 30 40 Output 120 Input 2 3 2 3 15 25 35 Output 50 Note In the first example, the gardener can replace all flowers with the flower type that has a beauty value of 40, thus achieving a maximum beauty value of 40 * 3 = 120. In the second example, the gardener can replace all flowers with the flower type that has a beauty value of 25, achieving a maximum beauty value of 25 * 2 = 50.","solution":"def max_beauty(n, m, initial, beauty_values): Calculate the maximum beauty value the gardener can achieve. Parameters: n (int): Number of pots m (int): Number of flower types in the predefined set initial (list of int): The initial arrangement of flowers in pots beauty_values (list of int): The beauty values of the predefined set of flower types Returns: int: Maximum beauty value max_beauty_value = max(beauty_values) # Get the maximum beauty value from the predefined set return max_beauty_value * n # Max value is achieved by replacing all pots with the flower of max beauty"},{"question":"In programming contests, integers are often needed to be written as words. Your task is to write a function to convert a non-negative integer to its equivalent words representation. The valid range for the integer n is from 0 to 999,999. Here the list of words you must use: - Numbers from 0 to 19: \\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\" - Tens: \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\" - Hundreds: \\"hundred\\" - Thousands up to millions: \\"thousand\\" The function needs to handle white spaces correctly and return the number word in a grammatically correct manner with no leading or trailing spaces. The case of text (lower or upper) must be consistent as per the examples provided. Input A non-negative integer n (0 ≤ n ≤ 999999). Output A single line containing the words representation of the integer n. Examples Input 5 Output five Input 12345 Output twelve thousand three hundred forty five Input 100001 Output one hundred thousand one","solution":"def number_to_words(n): Convert a non-negative integer to its words representation. below_20 = [\\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] def words(n): if n < 20: return below_20[n] elif n < 100: return tens[n // 10] + (\'\' if n % 10 == 0 else \' \' + below_20[n % 10]) elif n < 1000: return below_20[n // 100] + \' hundred\' + (\'\' if n % 100 == 0 else \' \' + words(n % 100)) elif n < 1000000: return words(n // 1000) + \' thousand\' + (\'\' if n % 1000 == 0 else \' \' + (words(n % 1000))) return words(n)"},{"question":"Given an integer array nums and an integer k, you need to find the number of unique k-diff pairs in the array. Here, a k-diff pair is defined as an integer pair (a, b), where a and b are both numbers in the array and their absolute difference is k. Write a function `findPairs` that receives two arguments: - an integer array `nums` - an integer `k` The function should return the number of unique k-diff pairs in the array. **Function Signature:** ```python def findPairs(nums: List[int], k: int) -> int: ``` **Input:** - `nums`: an integer array with length between 1 and 10^4, where each element is an integer (-10^7 ≤ nums[i] ≤ 10^7) - `k`: an integer (0 ≤ k ≤ 10^7) **Output:** The function should return an integer representing the number of unique k-diff pairs. **Example:** ```python input: nums = [3, 1, 4, 1, 5], k = 2 output: 2 ``` Explanation: There are two 2-diff pairs in the array: (1, 3) and (3, 5). ```python input: nums = [1, 2, 3, 4, 5], k = 1 output: 4 ``` Explanation: There are four 1-diff pairs in the array: (1, 2), (2, 3), (3, 4), and (4, 5). **Note:** 1. Pairs (a, b) and (b, a) are considered the same pair. 2. The elements in each pair must be unique. **Hints:** - You can use a set to keep track of the numbers you have seen and a set to keep track of the pairs you have encountered to ensure uniqueness. - Consider edge cases, such as when k is 0 or when there are duplicate elements in the array.","solution":"from typing import List def findPairs(nums: List[int], k: int) -> int: if k < 0: return 0 pairs = set() seen = set() for num in nums: if num - k in seen: pairs.add((num - k, num)) if num + k in seen: pairs.add((num, num + k)) seen.add(num) return len(pairs)"},{"question":"A company\'s HR department wants to generate unique employee IDs for each new hire. Each employee ID is generated using the employee’s full name and a unique number assigned to them. The unique number starts from 1 and increments by 1 for each new hire. The ID format follows these rules: - The ID begins with the first letter of the employee\'s first name (in uppercase), followed by the first letter of their last name (in uppercase). - This is followed by a hyphen (\'-\'). - The unique number is then placed after the hyphen. For example, an employee named \\"John Doe\\" assigned the number 1 will have the ID \\"JD-1\\". The next new employee named \\"Alice Smith\\", with the number 2, will have the ID \\"AS-2\\". Write a program that generates the unique employee ID for each new hire based on their full name and the assigned number. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of new hires. - Each of the next n lines contains a string — the full name of the new hire, consisting of two words separated by space, where each word contains only uppercase and lowercase English letters, and an integer i (1 ≤ i ≤ 10000) — the unique number assigned to the new hire. Output - Print n lines. Each line contains the generated unique employee ID for the corresponding new hire. Examples Input 3 John Doe 1 Alice Smith 2 Bob Johnson 3 Output JD-1 AS-2 BJ-3 Input 2 Chris Evans 25 Tony Stark 26 Output CE-25 TS-26","solution":"def generate_employee_id(name, number): Generates a unique employee ID based on the provided full name and unique number. Parameters: name (str): The full name of the employee in the format \\"FirstName LastName\\". number (int): The unique number assigned to the employee. Returns: str: The generated employee ID. first_name, last_name = name.split() employee_id = first_name[0].upper() + last_name[0].upper() + \'-\' + str(number) return employee_id def process_new_hires(n, hires): Processes multiple new hires and generates unique employee IDs for each. Parameters: n (int): The number of new hires. hires (list of tuples): List of (name, number) tuples for each hire. Returns: list: List of generated employee IDs for each new hire. employee_ids = [] for name, number in hires: employee_ids.append(generate_employee_id(name, number)) return employee_ids"},{"question":"You are given an array of integers and some queries. For each query, you will be given two integers L and R (1 ≤ L ≤ R ≤ n), and you need to find the sum of elements in the array from index L to R (both inclusive). The array is 1-indexed. Input The first line of the input contains two integers, n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Then q lines follow, each containing two integers L and R — the indices for the sum query. Output For each query, print one integer on a new line — the sum of elements from index L to R. Examples Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Explanation - For the first query (1, 3), the sum of elements is 1 + 2 + 3 = 6. - For the second query (2, 4), the sum of elements is 2 + 3 + 4 = 9. - For the third query (1, 5), the sum of elements is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def prefix_sum(array): Computes the prefix sum of the given array. prefix = [0] * (len(array) + 1) for i in range(1, len(array) + 1): prefix[i] = prefix[i - 1] + array[i - 1] return prefix def range_sum(prefix, L, R): Computes the range sum using the prefix sum array. return prefix[R] - prefix[L - 1] def sum_queries(n, q, array, queries): Computes the sum for each query in the list of queries. prefix = prefix_sum(array) results = [] for L, R in queries: results.append(range_sum(prefix, L, R)) return results"},{"question":"Maya has a rectangular grid of size m x n where each cell can either be empty or contain an obstacle. The grid is represented as a 2D matrix where 0 represents an empty cell and 1 represents a cell with an obstacle. A robot starts at the top-left corner of the grid and needs to reach the bottom-right corner. The robot can only move down or right at each step. Maya wants to know in how many unique ways the robot can reach the bottom-right corner, given the constraints of the obstacles. If the starting or ending cell has an obstacle, return 0 as the robot cannot make any move. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. Each of the following m lines contains n integers (either 0 or 1) — representing the grid. Output Print a single integer — the number of unique paths from the top-left corner to the bottom-right corner. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1 Note In the first example, there are two ways for the robot to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there is only one way for the robot to reach the bottom-right corner: 1. Down -> Right","solution":"def unique_paths_with_obstacles(grid): m, n = len(grid), len(grid[0]) # If the start or end points are blocked, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize the dp array dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Start point # Fill the first row for j in range(1, n): if grid[0][j] == 0: dp[0][j] = dp[0][j-1] else: dp[0][j] = 0 # Fill the first column for i in range(1, m): if grid[i][0] == 0: dp[i][0] = dp[i-1][0] else: dp[i][0] = 0 # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[m-1][n-1]"},{"question":"The United Geological Survey (UGS) is conducting a study on river systems throughout the country. They are analyzing river flows in terms of their volume and the regions they irrigate. The data collected includes the name of the region, the name of the river, and the daily volume of water flowing through that river in cubic meters (m³). The UGS needs a program to analyze this data and generate a report providing the following details: 1. For each river, the program should output the highest, the average, and the lowest daily volumes of water flow in cubic meters observed during the study period. 2. For each region, the program should output the total volume of water received from all rivers in that region. Input The input consists of multiple datasets. Each dataset represents the data collected over one study period. The first line of each dataset contains an integer m (m < 1000) which indicates the number of data entries. Each data entry consists of the name of the region, the name of the river, and the volume of water (in cubic meters) observed. The name of a region and a river is a string of less than 20 characters, consisting of capital alphabetical letters and spaces. The observed volume is a positive integer less than 100000. The end of the input is indicated by a line containing a zero. Output For each dataset, print two parts separated by a line containing two hyphens (`--`). The first part is the output for rivers. For each river that appears in the dataset, output the name of the river and the highest, the average (rounded down to the nearest integer), and the lowest water volume observed for that river, separated by a single space character. The output should only contain rivers for which data entries exist and the order of the output must be lexicographical based on the river names. The second part is the output for regions. For each region, output the name of the region and the total water volume it received from all rivers, separated by a single space character. The output should only contain regions for which data entries exist and the order of the output must be lexicographical based on the region names. The output for each dataset should be followed by a line containing ten hyphens (`----------`). Example Input 5 WESTERN NILE 5000 EASTERN NILE 7000 WESTERN AMAZON 3000 EASTERN AMAZON 8000 WESTERN MISSISSIPPI 2500 3 NORTHERN MISSISSIPPI 6000 NORTHERN NILE 4000 SOUTHERN AMAZON 4500 2 EASTERN MISSISSIPPI 7000 WESTERN MISSISSIPPI 5500 0 Output AMAZON 8000 5500 3000 MISSISSIPPI 2500 2500 2500 NILE 7000 6000 5000 -- EASTERN 15000 WESTERN 10500 ---------- AMAZON 4500 4500 4500 MISSISSIPPI 6000 6000 6000 NILE 4000 4000 4000 -- NORTHERN 10000 SOUTHERN 4500 ---------- MISSISSIPPI 7000 6250 5500 -- EASTERN 7000 WESTERN 5500 ----------","solution":"def analyze_rivers(data): import sys input = sys.stdin.read lines = input().splitlines() i = 0 while i < len(lines): num_entries = int(lines[i]) if num_entries == 0: break river_data = {} region_data = {} for j in range(i + 1, i + 1 + num_entries): region, river, volume = lines[j].rsplit(\' \', 2) volume = int(volume) # Update river data if river not in river_data: river_data[river] = {\\"high\\": volume, \\"low\\": volume, \\"sum\\": volume, \\"count\\": 1} else: river_data[river][\\"high\\"] = max(river_data[river][\\"high\\"], volume) river_data[river][\\"low\\"] = min(river_data[river][\\"low\\"], volume) river_data[river][\\"sum\\"] += volume river_data[river][\\"count\\"] += 1 # Update region data if region not in region_data: region_data[region] = volume else: region_data[region] += volume # Print river data for river in sorted(river_data.keys()): high = river_data[river][\\"high\\"] low = river_data[river][\\"low\\"] avg = river_data[river][\\"sum\\"] // river_data[river][\\"count\\"] print(f\\"{river} {high} {avg} {low}\\") print(\\"--\\") # Print region data for region in sorted(region_data.keys()): total = region_data[region] print(f\\"{region} {total}\\") print(\\"----------\\") i += num_entries + 1"},{"question":"In a distant kingdom, there is a grand library that houses an extensive collection of scrolls. Each scroll contains a sequence of magical runes. The wizards of the kingdom are interested in finding the most powerful subsection of these scrolls based on the magical energy they emit. Each rune in a scroll can be represented by an integer, which indicates its magical energy level. The power of a subsection of the scroll is defined as the sum of the magical energy levels of the runes in that subsection. The wizards believe that the most powerful golem can be summoned using the subsection with the maximum energy sum. Given a sequence of integers representing the runes on a scroll, your task is to find the most powerful contiguous subsection (subarray) of the scroll, and then output the sum of the magical energies of this subsection. Input The input consists of multiple test cases. The first line contains an integer T (1 ≤ T ≤ 100), representing the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 10^5), denoting the number of runes on the scroll. The next line contains N integers, where each integer a_i (−10^4 ≤ a_i ≤ 10^4) represents the magical energy of the i-th rune. Output For each test case, output a single integer which is the sum of the magical energies of the most powerful subsection. Example Input 3 8 -2 1 -3 4 -1 2 1 -5 4 1 5 5 1 2 3 -2 5 Output 6 5 9 Explanation For the first test case, the most powerful subsection is [4, -1, 2, 1], which has a sum of 6. For the second test case, there is only one rune with a power of 5, so the sum is 5. For the third test case, the most powerful subsection is [1, 2, 3, -2, 5], which sums to 9.","solution":"def max_subarray_sum(T, test_cases): Finds the maximum subarray sum for each test case. Parameters: T (int): The number of test cases. test_cases (list of tuples): Each tuple contains an integer N and a list of N integers representing the magical energy levels of the runes. Returns: list: A list of integers representing the maximum subarray sum for each test case. max_sums = [] for i in range(T): N, runes = test_cases[i] max_current = runes[0] max_global = runes[0] for j in range(1, N): max_current = max(runes[j], max_current + runes[j]) if max_current > max_global: max_global = max_current max_sums.append(max_global) return max_sums"},{"question":"You are given a balanced parentheses string S of length n. Your task is to determine the minimum number of reversals needed to make the parentheses string balanced. A balanced parentheses string can be empty, or it can be in the form of (A), where A is a balanced parentheses string, or it can be in the form of AB, where A and B are balanced parentheses strings. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string S. The second line contains the parentheses string S consisting of \'(\' and \')\'. Output Output a single integer — the minimum number of reversals needed to make the string balanced. Examples Input 4 )(()) Output 1 Input 6 ((())) Output 0 Input 8 ()()((() Output 1 Note In the first example, by reversing the first \')\' to \'(\', we get a balanced string (()()). In the second example, the string is already balanced, so no reversals are needed. In the third example, by reversing the fourth \'(\' to \')\', we get a balanced string ()()()().","solution":"def min_reversals_to_balance(n, S): Function to determine the minimum number of reversals needed to make a parentheses string balanced. :param n: Length of the string S :param S: Parentheses string consisting of \'(\' and \')\' :return: Minimum number of reversals needed if n % 2 == 1: # If length is odd, it\'s impossible to balance return -1 left_brackets = 0 right_brackets_needed = 0 for char in S: if char == \'(\': left_brackets += 1 else: # char == \')\' if left_brackets == 0: right_brackets_needed += 1 else: left_brackets -= 1 # Each unmatched pair of left or right brackets can be balanced by one reversal return (left_brackets // 2) + (right_brackets_needed // 2) + (left_brackets % 2 + right_brackets_needed % 2)"},{"question":"Farmer John\'s cows have found an interesting way to communicate using a binary string. They represent their messages using two types of subsequences: - Type 1: Substrings (continuous segments of the binary string). - Type 2: 0-separated subsequences (subsequences in which the digits are separated by exactly one or more \'0\'s). Consider a binary string `s` of length `n`. Find the binary string `t` that appears the most times either as a Type 1 or Type 2 subsequence of `s`. If there are multiple such strings, return the lexicographically smallest one if there is a tie. As an example, in the string `00110`: - Substrings: `0` appears 3 times, `1` appears 2 times, `00` appears 1 time, `01` appears 1 time, etc. - 0-separated subsequences: `0` appears 3 times, `1` appears 2 times, `10` appears 2 times, `001` appears 1 time, etc. The number of occurrences of the most frequent subsequence is `3` (\'0\'). Input The input contains a binary string `s` (1 ≤ |s| ≤ 1000). Output Output the binary string `t` that appears the most times as a Type 1 or Type 2 subsequence. If there is a tie, output the lexicographically smallest one. Examples Input 00110 Output 0 Input 111 Output 1 Input 1011001 Output 1 Note In the first example, considering both types of subsequences, the string `0` appears the most times (3 occurrences as a Type 1 substring). In the second example, the string `1`, in all cases, appears 3 times making it the most frequent subsequence. In the third example, both \'1\' and \'0\' appear multiple times, but \'1\' appears more frequently, hence \'1\' is the output.","solution":"def most_frequent_substring(s): from collections import defaultdict n = len(s) count = defaultdict(int) # Type 1: Count all substrings (continuous segments) for i in range(n): for j in range(i + 1, n + 1): count[s[i:j]] += 1 # Type 2: Count all 0-separated subsequences substrings = set(count.keys()) # Collect all substrings to use as possible subsequences for subseq in substrings: idx = -1 while True: idx = s.find(subseq[0], idx + 1) if idx == -1: break matched = True pos = idx + 1 for char in subseq[1:]: pos = s.find(\'0\', pos) if pos == -1: matched = False break pos = s.find(char, pos + 1) if pos == -1: matched = False break if matched: count[subseq] += 1 # Finding the most frequent binary string most_frequent_str = max(count, key=lambda x: (count[x], -len(x), -ord(x[0]))) return most_frequent_str"},{"question":"Consider a sequence of N integers indexed 1 to N, where each integer indicates the number of steps you can take from that position. For example, if the integer at position 1 is 3, you can move up to 3 steps ahead to positions 2, 3, or 4 from position 1. Write a function to determine the minimum number of steps required to reach the last position of the sequence, starting from the first position. If it’s not possible to reach the last position, return -1. Constraints - 2 leq N leq 100 - 1 leq A_i leq 100 - All values in input are integers. Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_{N-1} A_N Output Print the minimum number of steps required to reach the last position, or -1 if it\'s not possible. Examples Input 5 2 3 1 1 4 Output 2 Input 6 3 2 1 0 4 2 Output -1 Input 8 1 1 2 3 1 1 1 1 Output 5","solution":"def min_steps_to_reach_end(n, arr): if n == 1: return 0 max_reach, steps, jumps = arr[0], arr[0], 1 if max_reach == 0: return -1 for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"Given an integer array `arr` of length n, you need to rearrange the array into a permutation such that the difference between adjacent elements is never equal to 1. If there are multiple valid permutations, return any of them. If no such permutation exists, return an empty array. Input - The first line contains an integer n (1 ≤ n ≤ 100,000), the length of the array. - The second line contains n integers `arr[i]` (1 ≤ arr[i] ≤ n), the elements of the array. Output Print a permutation of the array such that the difference between any two adjacent elements is not 1. If it\'s not possible, print an empty array. Example Input 5 4 3 5 1 2 Output 5 1 4 2 3 Input 3 1 2 2 Output []","solution":"def rearrange_array(n, arr): Returns a permutation of the array such that the difference between any two adjacent elements is not 1. If no such permutation exists, returns an empty array. from collections import Counter count = Counter(arr) if any(count[num] > (n + 1) // 2 for num in count): return [] arr.sort() result = [0] * n left = 0 right = (n + 1) // 2 j = 0 for i in range(n): if i & 1: result[i] = arr[right] right += 1 else: result[i] = arr[left] left += 1 for i in range(1, n): if abs(result[i] - result[i - 1]) == 1: return [] return result"},{"question":"Petya loves string manipulations and recently he came across a new challenge. He has a string `S` consisting of lowercase English letters, and he wants to find the frequency of palindromic substrings within `S`. A palindromic substring is a sequence of characters that reads the same forward and backward. Given a string `S`, Petya asks you to determine the total number of palindromic substrings in `S`. Input The input consists of a single line containing the string `S` (1 ≤ |S| ≤ 1000), where |S| denotes the length of the string. Output Output a single integer — the number of palindromic substrings in `S`. Examples Input abba Output 6 Input abc Output 3 Input aaa Output 6 Note In the first example, the palindromic substrings are `[a, b, b, a, bb, abba]`. In the second example, the palindromic substrings are `[a, b, c]`. In the third example, the palindromic substrings are `[a, a, a, aa, aa, aaa]`.","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 # Create a 2D table to keep track of palindromic substrings dp = [[False] * n for _ in range(n)] # Single character substrings are palindromes for i in range(n): dp[i][i] = True count += 1 # Check for palindromic substrings of length 2 and more for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if S[i] == S[j]: if length == 2 or dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count"},{"question":"A large e-commerce company wants to improve its customer satisfaction by ensuring their delivery routing is efficient. They have a list of warehouses and a list of delivery points. Each warehouse has a certain number of delivery vans available, and each delivery point has a certain number of packages that need to be delivered. The goal is to find out the minimum number of total trips required for all packages to be delivered. Each van can only make a single trip from its warehouse to a delivery point and can carry any number of packages. A van cannot make multiple trips. Write a program to determine the minimum number of delivery vans required to deliver all the packages. It may not be possible to deliver all packages, in which case, return -1. Input The first line of the input contains two space-separated integers m and n (1 ≤ m, n ≤ 100), representing the number of warehouses and delivery points, respectively. The next line contains m space-separated integers v1, v2, ..., vm (0 ≤ vi ≤ 100), representing the number of vans available at each warehouse. The following line contains n space-separated integers p1, p2, ..., pn (0 ≤ pi ≤ 100), representing the number of packages at each delivery point. Output Print the minimum number of delivery vans required to ensure all packages are delivered. If it is not possible to deliver all packages, print -1. Examples Input 3 4 10 5 3 8 3 15 9 Output 4 Input 2 3 1 1 5 6 7 Output -1 Input 2 2 2 2 1 1 Output 2 Note In the first example, a possible optimal solution is: - Use 4 vans from the first warehouse to deliver packages to all delivery points (since 4 vans can cover 3+8+9+15 = 35 packages). In the second example, it is impossible to deliver all packages with only 2 vans having a maximum capacity of 2 packages each, but 18 packages need to be delivered. In the third example, both vans from each warehouse can deliver 1 package to each delivery point respectively.","solution":"def minimum_vans(m, n, vans, packages): Determine the minimum number of vans required to deliver all packages. :param m: Number of warehouses :param n: Number of delivery points :param vans: List of integers representing number of vans available at each warehouse :param packages: List of integers representing number of packages at each delivery point :return: Minimum number of vans required or -1 if impossible total_vans = sum(vans) total_packages = len(packages) # If total vans are less than delivery points, we cannot deliver all packages. if total_vans < total_packages: return -1 return total_packages # Example use case if __name__ == \\"__main__\\": # Reading inputs manually m, n = 2, 2 vans = [2, 2] packages = [1, 1] print(minimum_vans(m, n, vans, packages)) # Output: 2"},{"question":"You are given an array of non-negative integers where each element represents the amount of water trapped at that position. A position may or may not actually contain water depending on the height of the surrounding bars, and no water is trapped along the edges. Write a program to calculate the total amount of water trapped in the array. Input: - The first line contains a single integer n (1 ≤ n ≤ 100,000), representing the length of the array. - The second line contains n non-negative integers h1, h2, ..., hn (0 ≤ hi ≤ 10,000), representing the height of bars at each position. Output: - Print a single integer representing the total amount of water trapped. Example: Input: 6 0 1 0 2 1 0 1 3 2 1 2 1 Output: 6 Explanation: The given elevation map can trap 6 units of water in total. Constraints: - The array length n will be at most 100,000. - Each element in the array will be a non-negative integer ≤ 10,000. Note: In the example above, the water traps between tall bars, clearly showing the amount trapped at each position. Bars at the positions 2, 5, 6, 10, and 11 trap the water efficiently, culminating in a total of 6 units. The edge cases, such as arrays with all elements being the same height or having 0-length arrays, should be considered to ensure robust solutions.","solution":"def calculate_trapped_water(height): Calculate the total amount of water trapped in the given elevation map. Args: height (list): A list of non-negative integers representing the height of the bars. Returns: int: The total amount of water trapped. if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water # Example usage: n = 12 heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] print(calculate_trapped_water(heights)) # Output: 6"},{"question":"Alex is playing a card game with a deck of N cards. Each card has a distinct value. Alex likes to play a continuous sub-sequence of cards if they form a valid sequence according to a specific rule: the difference between every two consecutive cards in the sub-sequence should be exactly 1. Given the deck of cards, determine the length of the longest continuous sub-sequence that satisfies the rule. Input The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of cards. - The second line contains N space-separated integers representing the values of the cards. Output For each test case, print the length of the longest valid continuous sub-sequence. Constraints 1 <= T <= 10 1 <= N <= 1000 1 <= card value <= 100000 Example Input: 2 6 10 12 11 14 13 15 5 3 5 2 4 1 Output: 6 5","solution":"def longest_continuous_subsequence(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] cards = test_cases[i][1] if N == 0: results.append(0) continue cards.sort() max_length = 1 current_length = 1 for j in range(1, N): if cards[j] == cards[j-1] + 1: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) results.append(max_length) return results # To use the function: def solution(input_str): lines = input_str.splitlines() T = int(lines[0]) test_cases = [(int(lines[i*2+1]), list(map(int, lines[i*2+2].split()))) for i in range(T)] results = longest_continuous_subsequence(T, test_cases) for result in results: print(result)"},{"question":"You are developing a game where the player navigates a grid of size n x m. The grid contains barriers and the player\'s movement is constrained by these obstacles. The player\'s goal is to move from the top-left corner of the grid (1,1) to the bottom-right corner of the grid (n,m). However, the player can only move right or down in each step. Your task is to write a program to calculate the number of distinct paths the player can take to reach the goal. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m characters, describing the grid. Each character is either: - \'.\' indicating an open cell the player can traverse. - \'#\' indicating a barrier cell the player cannot traverse. Output Print one integer — the number of distinct paths from the top-left to the bottom-right corner of the grid. Example Input 3 3 . . . . # . . . . Output 2 Note In the given example, there are two distinct paths the player can take from (1,1) to (3,3): 1. Move Right ➔ Right ➔ Down ➔ Down 2. Move Down ➔ Down ➔ Right ➔ Right","solution":"def num_paths(grid): n = len(grid) m = len(grid[0]) # Ensure top-left and bottom-right are not barriers if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Initialize DP table dp = [[0]*m for _ in range(n)] # Start position dp[0][0] = 1 # Fill DP table for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def parse_input(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(line.split()) for line in lines[1:]] return grid # Complete solution function def count_paths(input_string): # Parse the input string grid = parse_input(input_string) # Calculate number of distinct paths using DP return num_paths(grid)"},{"question":"Alex enjoys playing with sequences of numbers. He decides to test some algorithms for finding the longest subsequence with a given difference between consecutive elements. Alex wants you to write a program that helps him determine such subsequences for various lists of numbers. Given a list of integers and a difference D, your task is to find the length of the longest subsequence where the difference between consecutive elements is exactly D. If no such subsequence exists, return 0. # Input The input consists of two lines: - The first line contains an integer N, the number of integers in the list. - The second line contains N space-separated integers, the elements of the list. - The third line contains an integer D, the required difference between consecutive elements. # Output Output a single integer, the length of the longest subsequence with the required difference, or 0 if no such subsequence exists. # Constraints - 1 <= N <= 1000 - -10000 <= Integer values in the list <= 10000 - -10000 <= D <= 10000 # Example Input: ``` 7 1 5 9 1 5 9 13 4 ``` Output: ``` 4 ``` Explanation: The subsequence [1, 5, 9, 13] has a difference of 4 between all consecutive elements. The length of this subsequence is 4. Input: ``` 5 2 2 2 2 2 0 ``` Output: ``` 5 ``` Explanation: The entire sequence has a difference of 0 between all consecutive elements. The length of this subsequence is 5. Input: ``` 4 1 3 5 7 2 ``` Output: ``` 4 ``` Explanation: The subsequence [1, 3, 5, 7] has a difference of 2 between all consecutive elements. The length of this subsequence is 4.","solution":"def longest_subsequence_with_difference(N, arr, D): Given a list of integers and a difference D, finds the length of the longest subsequence where the difference between consecutive elements is exactly D. If no such subsequence exists, returns 0. Parameters: N (int): The number of integers in the list. arr (list of int): The list of integers. D (int): The required difference between consecutive elements. Returns: int: The length of the longest subsequence with the required difference. if N == 0: return 0 # Dictionary to keep track of longest subsequences ending with each number dp = {} max_length = 0 for num in arr: if num - D in dp: dp[num] = dp[num - D] + 1 else: dp[num] = 1 max_length = max(max_length, dp[num]) return max_length"},{"question":"You are organizing a knitting contest where participants could add or remove stitches from their projects in each round. The goal is to track and report the progress of the participant who currently has the most stitches on their project after each round. Create a program that reads the participant number and the number of stitches added or removed in order as one event, and outputs the participant number and the number of stitches of the leading project immediately after each event. If there are multiple participants with the highest number of stitches (or if all participants are at zero), output the one with the lowest participant number. Input The input is given in the following format: n m b1 c1 b2 c2 :: bm cm n (1 ≤ n ≤ 1000000) represents the number of participants and m (1 ≤ m ≤ 100000) represents the number of events. bi (1 ≤ bi ≤ n) ci (-100 ≤ ci ≤ 100) indicates that participant bi added or removed ci stitches during the i-th event. For ci, a positive value indicates stitches added to the project, a negative value indicates stitches removed, and 0 is never given. Output For each event, print on one line the participant number and the number of stitches of the project that is leading immediately after that event, separated by a single space. Example Input 4 6 1 10 3 15 2 5 1 -3 4 20 3 -5 Output 1 10 3 15 3 15 3 15 4 20 4 20","solution":"def knitting_contest(n, m, events): Tracks and reports the progress of the participant who currently has the most stitches after each round. Args: n (int): Number of participants. m (int): Number of events. events (list of tuples): Each tuple contains two integers bi and ci indicating the participant number and the stitches added/removed respectively. Returns: list of tuples: Each tuple contains the participant number and the number of stitches of the leading project immediately after each event. stitches = [0] * (n + 1) leader = (1, 0) results = [] for bi, ci in events: stitches[bi] += ci if (stitches[bi] > leader[1]) or (stitches[bi] == leader[1] and bi < leader[0]): leader = (bi, stitches[bi]) results.append(leader) return results"},{"question":"Mike and Eva are playing a game with strings. They have two strings, A and B, of equal length. The game involves selecting a character from string A and a character from string B at the same index and comparing them. Mike scores a point if the characters are the same, while Eva scores a point if the characters are different. Both players play optimally to score the maximum number of points possible for themselves. Your task is to determine the final score of both players after all possible pairs of characters have been compared. Input The first line contains a single integer n (1 ≤ n ≤ 105), the length of the strings. The second line contains the string A, which consists of n lowercase English letters. The third line contains the string B, which consists of n lowercase English letters. Output Output two space-separated integers, the score of Mike and the score of Eva, respectively. Examples Input 5 abcde abfde Output 4 1 Input 3 xyz pqr Output 0 3 Note In the first test sample, A and B are compared as follows: - \'a\' vs. \'a\' -> Mike scores - \'b\' vs. \'b\' -> Mike scores - \'c\' vs. \'f\' -> Eva scores - \'d\' vs. \'d\' -> Mike scores - \'e\' vs. \'e\' -> Mike scores Hence, Mike scores 4 points, while Eva scores 1 point. In the second test sample, none of the characters match, so Eva scores all 3 points.","solution":"def calculate_scores(n, A, B): mike_score = 0 eva_score = 0 for i in range(n): if A[i] == B[i]: mike_score += 1 else: eva_score += 1 return mike_score, eva_score if __name__ == \\"__main__\\": n = int(input().strip()) A = input().strip() B = input().strip() mike_score, eva_score = calculate_scores(n, A, B) print(mike_score, eva_score)"},{"question":"In a quiet little village, there are n houses aligned on a straight street, numbered from 1 to n. The village council wants to install street lights to brighten up the area during the night. Each street light installed on the i-th house will illuminate that house and its immediate neighbors (i-1 and i+1). It is mandatory to illuminate each house at least once. Determine the minimum number of street lights required to illuminate all the houses. Input The first line contains a single positive integer t (1 ≤ t ≤ 10^5) — the number of test cases. Each of the following t lines contains one integer n (1 ≤ n ≤ 10^4) — the number of houses on the street. Output For each test case, output one integer — the minimum number of street lights required to illuminate all the houses. Note that the sum of all n in all test cases does not exceed 10^5. Example Input 3 1 2 3 Output 1 1 1 Explanation In the first test case, one street light is enough to illuminate the only house. In the second test case, placing one street light in the first house will illuminate both the first and the second house. In the third test case, placing one street light in the second house will illuminate all three houses.","solution":"def min_street_lights_required(t, n_list): result = [] for n in n_list: result.append((n + 2) // 3) return result"},{"question":"A software company is developing a log monitoring system. One of the tasks is to analyze a special log file that tracks the sequential order of operations executed by the server. Each operation is represented as a timestamp followed by a unique identifier and the operation type - either \\"START\\" or \\"END\\". The task is to determine the total execution time for each unique operation. The execution time of an operation is the difference between its \\"END\\" timestamp and \\"START\\" timestamp. Each unique operation will have exactly one \\"START\\" and one \\"END\\" entry in the log file. Input: The first line contains an integer n (1 ≤ n ≤ 100000) — the number of log entries. The next n lines each contain a timestamp (an integer, 1 ≤ timestamp ≤ 10^9), an operation ID (a string, 1 ≤ operation_ID length ≤ 10), and the operation type (a string which is either \\"START\\" or \\"END\\"). Output: Print the total execution time for each unique operation ID. Each output line should contain the operation ID and its total execution time, separated by a space. The operation IDs should be printed in the order they first appear in the input. Examples: Input: 6 1 op1 START 2 op2 START 5 op1 END 6 op3 START 7 op2 END 10 op3 END Output: op1 4 op2 5 op3 4","solution":"def compute_execution_times(log_entries): Computes the total execution time for each unique operation ID based on log entries. Args: log_entries: List of tuples containing log data (timestamp, operation_ID, operation_type) Returns: A dictionary with operation_ID as keys and their total execution time as values start_times = {} execution_times = {} order = [] for timestamp, operation_id, operation_type in log_entries: if operation_type == \\"START\\": start_times[operation_id] = timestamp if operation_id not in execution_times: execution_times[operation_id] = 0 order.append(operation_id) elif operation_type == \\"END\\": if operation_id in start_times: execution_times[operation_id] += timestamp - start_times[operation_id] result = [(op_id, execution_times[op_id]) for op_id in order] return result def parse_input_and_compute_execution_times(n, lines): log_entries = [] for line in lines: parts = line.split() timestamp = int(parts[0]) operation_id = parts[1] operation_type = parts[2] log_entries.append((timestamp, operation_id, operation_type)) return compute_execution_times(log_entries)"},{"question":"You are given an array of n integers a[1], a[2], ..., a[n]. Your task is to perform q queries of two types on this array: 1. Update the value at a given position. 2. Find the minimum value in a given subarray. Input The first line of input contains an integer n (1 ≤ n ≤ 100000) - the number of elements in the array. The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 100000). The third line contains an integer q (1 ≤ q ≤ 100000) - the number of queries. The following q lines contain instructions for the queries: - If the query type is 1, it follows the format \\"1 x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 100000), which means to update the value of a[x] to y. - If the query type is 2, it follows the format \\"2 l r\\" (1 ≤ l ≤ r ≤ n), which asks for the minimum value in the subarray a[l], a[l+1], ..., a[r]. Output For each query of the second type, print a single integer - the minimum value in the specified subarray. Example Input 5 1 5 2 4 3 3 2 1 3 1 2 1 2 1 3 Output 1 1 Explanation: Initially, the array is [1, 5, 2, 4, 3]. For the first query, the subarray [1, 5, 2] has a minimum value of 1. After updating the second element to 1, the array becomes [1, 1, 2, 4, 3]. For the third query, the subarray [1, 1, 2] has a minimum value of 1. Note: Your solution should be efficient enough to handle the maximum input sizes. Consider segment trees or binary indexed trees for efficient range minimum queries and updates.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize the segment tree self.build(data) def build(self, data): # Build the tree from the data array for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, pos, value): # Update value at position pos pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = min(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_min(self, l, r): # Get the minimum value in the range [l, r) l += self.n r += self.n min_val = float(\'inf\') while l < r: if l % 2: min_val = min(min_val, self.tree[l]) l += 1 if r % 2: r -= 1 min_val = min(min_val, self.tree[r]) l //= 2 r //= 2 return min_val def process_queries(n, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: # Update query _, x, y = query seg_tree.update(x - 1, y) elif query[0] == 2: # Range minimum query _, l, r = query results.append(seg_tree.range_min(l - 1, r)) return results"},{"question":"Bucky the Beaver is designing a water channel system for his community. He needs to find the optimal distribution of water stations based on the terrain\'s elevations. Given a list of integer elevations, his task is to find the maximum water level that can be achieved between the elevations, assuming the water can only be trapped between lower elevations. Your task is to help Bucky by writing a function that takes an array of integers representing the elevation heights and returns the maximum amount of water that can be trapped between the elevations after raining. Input The input consists of a single integer array `heights` of length n (1 ≤ n ≤ 100000), where each integer represents the height of the elevation (0 ≤ heights[i] ≤ 1000000). Output The output is a single integer representing the maximum amount of water that can be trapped. Example Input [0,1,0,2,1,0,1,3,2,1,2,1] Output 6 Note In the example provided, the maximum amount of water that can be trapped between the elevations is calculated as follows: - Between index 1 and 3, 1 unit of water is trapped. - Between index 3 and 7, 2 units of water are trapped at index 5, 1 unit at index 6, resulting in 3 units. - Between index 7 and 10, 2 units of water are trapped at index 8, 1 unit at index 9, resulting in 3 units. Thus, the total amount of water trapped is 6 units.","solution":"def max_water_trapped(heights): Returns the maximum amount of water that can be trapped between elevations. if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = heights[left], heights[right] trapped_water = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) trapped_water += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) trapped_water += right_max - heights[right] return trapped_water"},{"question":"Write a program that takes an integer N and outputs a pattern of stars in the shape of a right-angle triangle, where N specifies the number of rows. Constraints * 1 ≤ N ≤ 100 Input The input consists of multiple datasets. Each dataset consists of a single integer N. The input ends with a 0 (when N is zero). Output For each dataset, print the right-angle triangle of stars with N rows. Print a blank line after each dataset. Example Input 3 5 2 0 Output * ** *** * ** *** **** ***** * **","solution":"def generate_triangle_patterns(dataset): Generate and returns right-angle triangle patterns based on the given dataset. Parameters: dataset (list): A list of integers where each integer N represents the number of rows for the triangle. Returns: list: A list of strings, each representing a right-angle triangle pattern. result = [] for N in dataset: if N == 0: break pattern = \\"n\\".join([\\"*\\" * (i + 1) for i in range(N)]) result.append(pattern) return \\"nn\\".join(result)"},{"question":"Rita enjoys sequences of integers where each number in the sequence is the sum of its digits multiplied by a given integer k. Your task is to determine whether there exists any sequence of length n such that each number in the sequence (except the first one) follows the described rule. Input The first line contains three integers n, k, and x (1 ≤ n ≤ 100, 1 ≤ k ≤ 10, 1 ≤ x < 1000000), where n is the length of the sequence, k is the multiplier, and x the starting number of the sequence. Output Print \\"YES\\" if such a sequence exists, otherwise print \\"NO\\". If \\"YES\\", also print the sequence. If there are multiple valid sequences, print any of them. Examples Input 4 3 5 Output YES 5 12 24 42","solution":"def sum_of_digits(n): Returns the sum of the digits of n. return sum(int(digit) for digit in str(n)) def find_sequence(n, k, x): Determines if there exists a sequence of length n starting with x where each number is the sum of its digits multiplied by k. If it exists, returns the sequence. sequence = [x] while len(sequence) < n: next_number = sum_of_digits(sequence[-1]) * k sequence.append(next_number) return sequence def sequence_exists(n, k, x): Checks and prints whether a sequence of length n exists starting with x where each number is the sum of its digits multiplied by k. Prints the sequence if it exists. if n == 1: print(\\"YES\\") print(x) return seq = find_sequence(n, k, x) print(\\"YES\\") print(\\" \\".join(map(str, seq)))"},{"question":"``` In a magical kingdom, there are N enchanted tiles arranged in a straight line, each with a value. Princess Amelia can perform a \\"jump\\" where she starts on any tile and moves to the next tile only if it has a greater value than the current one. She can jump from one tile to another in a contiguous manner until she either reaches the last tile or there are no higher value tiles to jump to. Amelia wants to know the maximum number of tiles she can jump through consecutively, starting from any tile. Your task is to help Princess Amelia find this maximum jump length for given tile values. Constraints: 1 ≤ t ≤ 100 (Number of test cases) 1 ≤ N ≤ 1000 (Number of tiles in each test case) 1 ≤ Value of each tile ≤ 10^9 Input: The first line contains T, the number of test cases. For each test case: The first line contains N, the number of tiles. The second line contains N space-separated integers representing the values of the tiles. Output: For each test case, print the maximum number of tiles Princess Amelia can jump through consecutively. SAMPLE INPUT 2 6 1 2 3 4 5 6 5 5 4 3 2 1 SAMPLE OUTPUT 6 1 ```","solution":"def max_jumps(t, test_cases): Function to find the maximum jump length for given test case tile values. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains two elements: - The first element is an integer N (number of tiles). - The second element is a list of integers representing the values of the tiles. Returns: list: A list of integers representing the maximum number of tiles she can jump through consecutively for each test case. results = [] for case in test_cases: N, tiles = case max_length = 1 current_length = 1 for i in range(1, N): if tiles[i] > tiles[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 results.append(max_length) return results # Example of function usage: # test_cases = [ # (6, [1, 2, 3, 4, 5, 6]), # (5, [5, 4, 3, 2, 1]) # ] # print(max_jumps(2, test_cases)) -> Output: [6, 1]"},{"question":"Problem You are given a list of employee records containing their IDs and their respective manager IDs. The company\'s organizational structure forms a tree where the CEO is the root (indicated by a manager ID of -1). Each employee can have multiple subordinates but only one direct manager. You need to determine the number of direct and indirect subordinates that each employee has in the hierarchy. Your task is to implement the function `count_subordinates` to calculate the number of direct and indirect subordinates for each employee. # Function Signature ```python def count_subordinates(n: int, employees: List[Tuple[int, int]]) -> List[int]: pass ``` # Input - `n` (integer): The number of employees in the company. - `employees` (list of tuples): A list of tuples where each tuple contains two integers. The first integer is the employee ID and the second integer is the manager ID. # Output - Return a list of integers where the i-th element is the total number of direct and indirect subordinates of the employee with ID i. # Constraints * 1 ≤ n ≤ 100,000 * The employee IDs are unique and range from 0 to n-1. * The manager ID for the CEO is -1. # Example Input ```python n = 6 employees = [(0, -1), (1, 0), (2, 0), (3, 1), (4, 1), (5, 2)] ``` Output ```python [5, 2, 1, 0, 0, 0] ``` Explanation - Employee 0 (CEO) has 5 subordinates: 1, 2, 3, 4, 5. - Employee 1 has 2 subordinates: 3, 4. - Employee 2 has 1 subordinate: 5. - Employees 3, 4, and 5 have no subordinates.","solution":"from typing import List, Tuple def count_subordinates(n: int, employees: List[Tuple[int, int]]) -> List[int]: from collections import defaultdict # Build the adjacency list for the tree tree = defaultdict(list) root = -1 for emp, manager in employees: if manager == -1: root = emp else: tree[manager].append(emp) # Array to store the results subordinates_count = [0] * n # Function to perform DFS and count subordinates def dfs(employee): total_subordinates = 0 for subordinate in tree[employee]: total_subordinates += 1 + dfs(subordinate) subordinates_count[employee] = total_subordinates return total_subordinates # Start DFS from the root (the CEO) dfs(root) return subordinates_count"},{"question":"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Given two strings s1 and s2, determine if s2 is an anagram of s1. Input The first line contains the string s1. The second line contains the string s2. Both strings consist of small Latin letters and their lengths are between 1 and 100. Output Print \\"YES\\" if s2 is an anagram of s1, otherwise print \\"NO\\". Examples Input listen silent Output YES Input hello billion Output NO","solution":"def is_anagram(s1, s2): Checks if s2 is an anagram of s1. Parameters: s1 (str): First string s2 (str): Second string Returns: str: \\"YES\\" if s2 is an anagram of s1, otherwise \\"NO\\" # Sort both strings and compare return \\"YES\\" if sorted(s1) == sorted(s2) else \\"NO\\""},{"question":"**Problem Statement** You are provided with a list of people, along with their respective heights in centimeters. The goal is to group them by their heights. Given an integer `k`, you need to find all the unique height groups with at least `k` people in each group and return these groups in descending order of height. # Input - The first line contains an integer `T` denoting the number of test cases. The description of T test cases follows. - Each test case consists of multiple lines: - The first line contains an integer `n` (1 ≤ n ≤ 10000) — the number of people in the list. - The second line contains `n` integers `h1, h2, ..., hn` (50 ≤ hi ≤ 250) — the heights of the people. - The third line contains an integer `k` (1 ≤ k ≤ n) — the minimum number of people required to form a group. # Output For each test case output a single line containing the unique height groups with at least `k` people, sorted in descending order of height. If no such group exists, output `-1`. # Example **Input:** ``` 2 7 170 160 160 180 190 170 150 2 5 200 200 150 150 150 3 ``` **Output:** ``` 170 160 150 ``` # Explanation: In the first test case, for `k = 2`, the heights 170 and 160 appear at least twice. Thus, they form valid groups and are output in descending order. In the second test case, for `k = 3`, only the height 150 appears at least three times, making it the only valid group. # Constraints: - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 10000 - 50 ≤ hi ≤ 250 - 1 ≤ k ≤ n","solution":"def find_height_groups(T, test_cases): results = [] for test_case in test_cases: n, heights, k = test_case height_count = {} for height in heights: if height in height_count: height_count[height] += 1 else: height_count[height] = 1 valid_heights = [height for height, count in height_count.items() if count >= k] if valid_heights: valid_heights.sort(reverse=True) results.append(\\" \\".join(map(str, valid_heights))) else: results.append(\\"-1\\") return results"},{"question":"John has an array b of m integers [b_1, b_2, ..., b_m]. In one step, John can multiply any element of the array by 2. Formally, in one step he can choose any integer index j (1 ≤ j ≤ m) and do b_j := b_j * 2. John wants to make all elements of the array unique. What is the minimum number of steps required to achieve this? Input Each test contains multiple test cases. The first line contains the number of test cases k (1 ≤ k ≤ 1000). The description of the test cases follows. The first line of each test case contains an integer m (1 ≤ m ≤ 100) — the size of the array. The second line of each test case contains m integers b_1, b_2, ..., b_m (-1000 ≤ b_i ≤ 1000) — the elements of the array. Output For each test case, output the minimum number of steps required to make all elements of the array unique. Example Input 3 3 2 2 3 4 1 2 3 3 2 5 5 Output 1 1 1 Note In the first test case, by multiplying any one of the \'2\' by 2, the array will become [2, 4, 3] which has all unique elements. In the second test case, multiplying one of the \'3\'s by 2 will make it \'6\'. The resulting array [1, 2, 3, 6] has all unique elements. In the third test case, by multiplying one of the \'5\'s by 2, the array will become [5, 10], which has all unique elements.","solution":"def min_steps_to_unique(k, test_cases): def min_steps(arr): seen = set() steps = 0 for num in arr: while num in seen: num *= 2 steps += 1 seen.add(num) return steps results = [] for m, b in test_cases: results.append(min_steps(b)) return results"},{"question":"You are given an integer n and an array of integers of length n. You need to perform a series of operations to transform the array such that all elements in the array become equal. The allowed operation is to pick any two different elements of the array, and change both of them to the smallest of the two values. Design a way to achieve this transformation. The number of operations should not exceed 5 ⋅ 10^5. Input - The first line contains a single integer n (1 ≤ n ≤ 15 000). - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n). Output - In the first line, print q (0 ≤ q ≤ 5 ⋅ 10^5) — the number of operations. - In each of the next q lines, print two integers x_i, y_i (1 ≤ x_i, y_i ≤ n), indicating that in the i-th operation you changed the elements at positions x_i and y_i to the smaller value among the two. It should be true for any initial array a that the array can be transformed this way. If there are multiple possible sequences of operations, you can print any. Examples Input 3 3 2 1 Output 2 1 2 2 3 Input 4 4 3 2 1 Output 3 1 2 2 3 3 4 Note In the first example, after performing the transformations, the array will become [2, 2, 1] after the first operation and [1, 1, 1] after the second operation. In the second example, the array will become [3, 3, 2, 1] after the first operation, [2, 2, 2, 1] after the second operation and [1, 1, 1, 1] after the third operation.","solution":"def transform_to_equal_array(n, arr): Transforms the array such that all elements become equal by performing allowed operations, and returns the number of operations and the operations performed. :param n: Length of the array :param arr: List of integers :return: Tuple of the number of operations and the list of operations min_value = min(arr) operations = [] # Find all positions of the minimum value min_positions = [i + 1 for i, value in enumerate(arr) if value == min_value] # Ensure at least one minimum position exists to start the comparison operations for i in range(n): if arr[i] != min_value: operations.append((min_positions[0], i + 1)) return len(operations), operations"},{"question":"A group of scientists is conducting an experiment on a remote island. The island has a network of research stations connected by bidirectional paths. Each station is represented as a node, and each path has a specific length. The scientists are initially located at one research station and need to gather samples from all other stations. They want to minimize the total distance traveled. However, not all paths are safe due to recent landslides. Therefore, the scientists have to follow a specific route plan. A route plan is a sequence of nodes starting at the initial station where the scientists begin their journey. They can revisit nodes and use any paths, provided they return to the initial station at the end of their journey. The scientists need to determine the shortest circular route that allows them to visit all stations at least once. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 10,000), where n is the number of research stations and m is the number of paths. The following m lines contain three integers each, u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating there is a bidirectional path between stations u and v with length w. Output Print a single integer — the length of the shortest circular route covering all stations and returning to the initial station. Examples Input 4 4 1 2 1 2 3 4 3 4 2 4 1 3 Output 10 Input 3 3 1 2 2 2 3 3 3 1 1 Output 6 Note In the first example, the optimal route might be 1 → 2 → 3 → 4 → 1 with a total distance of 10. In the second example, the optimal route is 1 → 2 → 3 → 1 with a total distance of 6.","solution":"import sys def tsp(n, m, edges): # Create the distance matrix, initialize with infinite distances dist = [[float(\'inf\')] * n for _ in range(n)] for u, v, w in edges: u -= 1 v -= 1 dist[u][v] = w dist[v][u] = w # Initialize the dp table and path table dp = [[float(\'inf\')] * n for _ in range(1 << n)] dp[1][0] = 0 # Fill the dp table for mask in range(1 << n): for i in range(n): if dp[mask][i] == float(\'inf\'): continue for j in range(n): if mask & (1 << j) == 0: new_mask = mask | (1 << j) dp[new_mask][j] = min(dp[new_mask][j], dp[mask][i] + dist[i][j]) # Finding the minimum route cost that returns to node 0 answer = min(dp[(1 << n) - 1][i] + dist[i][0] for i in range(1, n)) return answer # Read input from stdin def main(): input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] idx = 2 for _ in range(m): u = int(data[idx]) v = int(data[idx + 1]) w = int(data[idx + 2]) edges.append((u, v, w)) idx += 3 result = tsp(n, m, edges) print(result)"},{"question":"A company is organizing a team-building event and has several activities planned. Each activity has a certain duration, and to ensure optimum participation, the company wants to schedule the activities in such a way that no two activities overlap. Given the start and end times of various activities, write a program to determine the maximum number of non-overlapping activities that can be scheduled. Input The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer N denoting the number of activities. Each of the next N lines contains two integers start and end denoting the start time and the end time of an activity. Output For each test case, output a single integer representing the maximum number of non-overlapping activities that can be scheduled. Constraints ``` 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ start < end ≤ 10^5 ``` Example Input: ``` 2 3 1 4 2 3 3 5 4 1 3 2 4 3 5 5 6 ``` Output: ``` 2 3 ``` Explanation: Example case 1: The optimal way to schedule the maximum number of non-overlapping activities is to pick activities (1, 4) and (3, 5). Example case 2: The optimal way to schedule the maximum number of non-overlapping activities is to pick activities (1, 3), (3, 5), and (5, 6).","solution":"def max_non_overlapping_activities(activities): Determine the maximum number of non-overlapping activities that can be scheduled. :param activities: List of tuples where each tuple contains (start, end) times of an activity. :return: Maximum number of non-overlapping activities. # Sort activities based on their end times activities.sort(key=lambda x: x[1]) max_count = 0 last_end_time = 0 for activity in activities: if activity[0] >= last_end_time: max_count += 1 last_end_time = activity[1] return max_count def schedule_activities(test_cases): Function to handle multiple test cases. :param test_cases: List of lists of activity start and end times :return: List of maximum number of non-overlapping activities for each test case. results = [] for activities in test_cases: results.append(max_non_overlapping_activities(activities)) return results"},{"question":"Parking Lot Simulation You are in charge of managing a parking lot. The parking lot has a fixed number of parking spaces, some of which are handicap accessible. The parking lot keeps track of whether a spot is occupied or not, and if it is handicap accessible. You need to write a program that helps manage incoming and outgoing cars. Each car is either an ordinary car or a handicap car. If a handicap car arrives, it should first try to park in an available handicap-accessible spot; if none are available, it can park in any available spot. An ordinary car can park in any available non-handicap spot. If no appropriate spot is available for the incoming car, it should be turned away. Create a class `ParkingLot` to manage the parking lot state. Properly implement the following functionalities: - Initialization of the parking lot with given number of total spots and number of handicap spots. - Handling the arrival of an ordinary car. - Handling the arrival of a handicap car. - Handling the departure of a car given its parking spot number. # Class `ParkingLot` Properties: - `total_spots`: an integer representing the total number of parking spots. - `handicap_spots`: an integer representing the number of handicap spots. - `parking_status`: a list representing the parking spots, where each spot is either `0` (empty ordinary spot), `1` (occupied ordinary spot), `2` (empty handicap spot), or `3` (occupied handicap spot). Methods: - `__init__(self, total_spots, handicap_spots)`: Initializes the parking lot with given total spots and handicap spots. - `arrive(self, car_type)`: Handles the arrival of a car of the specified type (`\\"ordinary\\"` or `\\"handicap\\"`). Returns the spot number if the car is parked; otherwise, returns `\\"Turned Away\\"`. - `depart(self, spot_number)`: Handles the departure of a car from the specified spot number. It updates the state to indicate the spot is now empty. # Input - The input consists of multiple operations. Each operation corresponds to either the initialization of the parking lot, arrival of a car, or departure of a car. - Initialization: `I total_spots handicap_spots` - Car arrival: `A car_type` (where `car_type` is either `\\"ordinary\\"` or `\\"handicap\\"`) - Car departure: `D spot_number` - The end of the input is indicated by the command `\\"E\\"` # Output For each car arrival operation, output the spot number if the car is parked; otherwise, output `\\"Turned Away\\"`. # Example Input ``` I 10 3 A ordinary A handicap A handicap A ordinary D 0 A handicap E ``` Output ``` 0 4 5 1 0 ``` The above example initializes a parking lot with 10 total spots, 3 of which are handicap spots. When ordinary and handicap cars arrive, they are parked in appropriate spots as per the described rules. Departing cars free up their respective spots.","solution":"class ParkingLot: def __init__(self, total_spots, handicap_spots): self.total_spots = total_spots self.handicap_spots = handicap_spots self.parking_status = [] for i in range(handicap_spots): self.parking_status.append(2) # empty handicap spot for i in range(total_spots - handicap_spots): self.parking_status.append(0) # empty ordinary spot def arrive(self, car_type): if car_type == \\"handicap\\": for i in range(self.handicap_spots): if self.parking_status[i] == 2: # empty handicap spot self.parking_status[i] = 3 # occupied handicap spot return i for i in range(self.handicap_spots, self.total_spots): if self.parking_status[i] == 0: # empty ordinary spot self.parking_status[i] = 3 # occupied handicap spot return i elif car_type == \\"ordinary\\": for i in range(self.handicap_spots, self.total_spots): if self.parking_status[i] == 0: # empty ordinary spot self.parking_status[i] = 1 # occupied ordinary spot return i return \\"Turned Away\\" def depart(self, spot_number): if self.parking_status[spot_number] == 1: # if occupied ordinary spot self.parking_status[spot_number] = 0 # empty ordinary spot elif self.parking_status[spot_number] == 3: # if occupied handicap spot self.parking_status[spot_number] = 2 if spot_number < self.handicap_spots else 0 # change back to empty spot"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each edge is described by a tuple `(u, v)` meaning there is a direct edge from node `u` to node `v`, and it takes exactly 1 hour to travel from `u` to `v`. Determine the shortest time required to travel from the node numbered 1 to a node numbered `n`. If there is no such path, return -1. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 105, 0 ≤ m ≤ 2·105) — the number of nodes and the number of edges in the graph, respectively. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) — denoting a directed edge from node `u` to node `v`. Output Output a single integer — the shortest time required to travel from node 1 to node `n`. If there\'s no such path, print -1. Examples Input 5 6 1 2 2 3 3 4 4 5 1 3 3 5 Output 2 Input 4 2 1 2 2 3 Output -1 Notes Explanation of the first example: The multiple paths from node 1 to node 5 include: - 1 -> 3 -> 5, which requires 2 hours. - 1 -> 2 -> 3 -> 4 -> 5, which requires 4 hours. The shortest path thus takes 2 hours. Explanation of the second example: There is no path from node 1 to node 4 in the given graph, hence the output is -1.","solution":"from collections import deque def shortest_travel_time(n, m, edges): Returns the shortest time required to travel from node 1 to node n in a directed graph. If there\'s no such path, returns -1. :param n: Number of nodes :param m: Number of edges :param edges: List of tuples representing the directed edges in the graph :return: Shortest travel time or -1 if no path exists if n == 1: return 0 # No travel needed if starting and ending node are the same # Create adjacency list adj = {i: [] for i in range(1, n+1)} for u, v in edges: adj[u].append(v) # Queue for BFS queue = deque([(1, 0)]) # (current_node, current_time) visited = set() while queue: current, time = queue.popleft() if current == n: return time if current not in visited: visited.add(current) for neighbor in adj[current]: if neighbor not in visited: queue.append((neighbor, time + 1)) # If we exit the loop without finding node n return -1"},{"question":"A popular social media platform wants to implement a new feature that allows users to form clusters based on their interests. Each user has a unique set of interest tags. The platform plans to organize events where users with the most overlapping interests can participate together. To assist with this, they need to determine which pair of users share the highest number of common interest tags. You are given a list of users, each with a list of their interest tags. Your task is to find the pair of users with the maximum number of common interest tags and return that count. Input: - The first line contains an integer N, the number of users (1 ≤ N ≤ 1000). - The next N lines each contain a string of space-separated integers representing a user\'s interest tags. Each interest tag is a unique integer between 1 and 10000 and each user\'s tags are unique. Output: - Print a single integer, the maximum number of common interest tags shared by any pair of users. Example: Input: 4 1 2 3 4 2 3 5 1 3 5 2 4 6 Output: 2 Explanation: - The first user has interest tags {1, 2, 3, 4}. - The second user has interest tags {2, 3, 5}. - The third user has interest tags {1, 3, 5}. - The fourth user has interest tags {2, 4, 6}. - The first and second users share 2 common interest tags: {2, 3}. - The second and third users also have 2 common interest tags: {3, 5}. - No other pair shares more than 2 tags. Thus, the maximum number of common interest tags is 2.","solution":"def max_common_interests(N, user_tags): Returns the maximum number of common interest tags shared by any pair of users. Args: N : int : number of users user_tags : list of list of int : users\' interest tags Returns: int : maximum number of common interest tags shared by any pair of users max_common = 0 user_sets = [set(tags) for tags in user_tags] for i in range(N): for j in range(i + 1, N): common_tags = user_sets[i] & user_sets[j] max_common = max(max_common, len(common_tags)) return max_common # Helper function to parse input def parse_input(input_data): data = input_data.split(\'n\') N = int(data[0]) user_tags = [list(map(int, line.split())) for line in data[1:N+1]] return N, user_tags"},{"question":"Given a grid of size m by n consisting of cells with positive integer values, you need to find the largest value along any simple path that starts from the top-left corner (1,1) and ends at the bottom-right corner (m,n). A simple path is defined as a path that does not reuse any cell. You can move in four possible directions: up, down, left, and right. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 10^3) — the number of rows and columns in the grid. The next m lines each contain n positive integers, representing the grid, where each integer is between 1 and 10^9. Output Output the largest value along any simple path from (1,1) to (m,n). Example Input 3 3 4 5 6 7 8 9 10 2 1 Output 10 Note In the example, one of the possible paths is: - Start at (1,1) with the value 4 - Move to (2,1) with the value 7 - Move to (3,1) with the value 10 The largest value along this path is 10. There could be other paths that yield different maximum values, but we are interested in the maximum value encountered on any simple path.","solution":"def find_largest_value_in_path(grid): Finds the largest value along any simple path from (0, 0) to (m-1, n-1). Parameters: grid (List[List[int]]): 2D list representing the grid. Returns: int: The largest value encountered in any simple path. m = len(grid) n = len(grid[0]) # Initialize a memoization table to store the largest value encountered for any path # ending in the current cell. dp = [[-float(\'inf\')] * n for _ in range(m)] dp[0][0] = grid[0][0] # Starting point is the value of top-left corner for i in range(m): for j in range(n): if i > 0: dp[i][j] = max(dp[i][j], max(dp[i-1][j], grid[i][j])) if j > 0: dp[i][j] = max(dp[i][j], max(dp[i][j-1], grid[i][j])) if i < m-1: dp[i+1][j] = max(dp[i+1][j], dp[i][j], grid[i+1][j]) if j < n-1: dp[i][j+1] = max(dp[i][j+1], dp[i][j], grid[i][j+1]) return dp[m-1][n-1]"},{"question":"Lena just started learning math at school and got fascinated by prime numbers. She wants to count how many prime numbers exist between two given numbers, inclusive. However, she doesn\'t know how to check for prime numbers effectively. Can you help her write a program to solve her problem? Input: The first line contains t, the number of test cases. For each test case, there is one line containing two space-separated integers l and r. Output: For each test case, print the count of prime numbers between l and r, inclusive. Constraints: 1 ≤ t ≤ 10000 1 ≤ l ≤ r ≤ 10^5 SAMPLE INPUT 3 1 10 11 20 20 30 SAMPLE OUTPUT 4 4 2 Explanation Consider the first test case. Prime numbers between 1 and 10 are [2, 3, 5, 7]. Therefore, the output is 4. Consider the second test case. Prime numbers between 11 and 20 are [11, 13, 17, 19]. Therefore, the output is 4. Consider the third test case. Prime numbers between 20 and 30 are [23, 29]. Therefore, the output is 2.","solution":"def sieve_of_eratosthenes(n): Generate a boolean array prime[0..n] where prime[i] will be True if i is a prime number prime = [True] * (n + 1) p = 2 while (p * p <= n): if prime[p] == True: for i in range(p * p, n + 1, p): prime[i] = False p += 1 prime[0], prime[1] = False, False return prime def count_primes_between_l_and_r(l, r, primes): Count the number of primes between l and r inclusive. return sum(primes[l:r + 1]) def prime_counts_for_ranges(test_cases): Given a list of test cases, return the count of prime numbers for each range. results = [] max_r = max(r for _, r in test_cases) primes = sieve_of_eratosthenes(max_r) for l, r in test_cases: results.append(count_primes_between_l_and_r(l, r, primes)) return results"},{"question":"Given a list of integers, find the longest contiguous subarray that has the same integer in all its positions. You need to output the length of this subarray and the integer that forms this subarray. Input: - The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. - Each of the next t lines contains: - An integer n (1 ≤ n ≤ 1000) — the length of the array. - Followed by n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. Output: For each test case, print two integers: the length of the longest contiguous subarray with the same integer and the integer that forms this subarray. If there are multiple such subarrays of the same length, print the smallest integer among them. Example: Input: 4 7 2 2 3 3 3 2 2 5 1 1 1 1 1 8 4 4 4 4 3 3 3 3 6 5 5 2 2 2 5 Output: 3 3 5 1 4 3 3 2 Explanation: In the first test case, the longest contiguous subarray is [3, 3, 3] with length 3. In the second test case, the entire array is the contiguous subarray with the same integer 1, which has length 5. In the third test case, there are two subarrays with the same length (4) but the integer with the smallest value is chosen (3). In the fourth test case, the longest contiguous subarray is [2, 2, 2] with length 3.","solution":"def find_longest_subarray(test_cases): results = [] for a in test_cases: n, arr = a max_length = 1 current_length = 1 best_value = arr[0] current_value = arr[0] for i in range(1, n): if arr[i] == current_value: current_length += 1 else: if current_length > max_length or (current_length == max_length and current_value < best_value): max_length = current_length best_value = current_value current_value = arr[i] current_length = 1 if current_length > max_length or (current_length == max_length and current_value < best_value): max_length = current_length best_value = current_value results.append((max_length, best_value)) return results # Example usage: # test_cases = [ # (7, [2, 2, 3, 3, 3, 2, 2]), # (5, [1, 1, 1, 1, 1]), # (8, [4, 4, 4, 4, 3, 3, 3, 3]), # (6, [5, 5, 2, 2, 2, 5]) # ] # print(find_longest_subarray(test_cases)) # Output: [(3, 3), (5, 1), (4, 3), (3, 2)]"},{"question":"In computer science, an anagram is a word formed by rearranging the letters of another, such as \\"cinema\\" formed from \\"iceman.\\" Given a list of words, write a function to find all unique anagram groups. An anagram group consists of words that can be rearranged to form one another. Your task is to implement a function that receives a list of strings and returns a list of lists, where each list contains words that are anagrams of each other. Each individual list should be sorted in lexicographical order, and the final output should also be sorted by the first word of each list in lexicographical order. # Input - A list of strings `words` of length n (1 ≤ n ≤ 1000), where each string has a length between 1 and 100 characters, and contains only lowercase English letters. # Output - A list of lists, where each list contains strings that are anagrams of each other, sorted in lexicographical order. # Examples Input ``` [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] ``` Output ``` [[\\"ate\\", \\"eat\\", \\"tea\\"], [\\"bat\\"], [\\"nat\\", \\"tan\\"]] ``` Input ``` [\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"ohell\\"] ``` Output ``` [[\\"enlist\\", \\"listen\\", \\"silent\\"], [\\"hello\\", \\"ohell\\"]] ``` # Note Consider using a dictionary to map the sorted version of each word to all anagrams of that word. Then sort each group and the final list as specified.","solution":"def find_anagram_groups(words): Returns a list of lists, where each list contains anagrams of each other. Each list is sorted in lexicographical order, and the final output is sorted by the first word of each list. from collections import defaultdict anagram_dict = defaultdict(list) # Group words by sorted character tuple for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) # Sort each anagram group lexicographically for key in anagram_dict: anagram_dict[key].sort() # Convert to list and sort by the first word of each anagram group result = list(anagram_dict.values()) result.sort(key=lambda x: x[0]) return result"},{"question":"Given an integer array A of length N and Q queries, you need to process each query of the following two types: * Type 1: update the element at the i_q-th position of A to x_q. (Do nothing if the i_q-th element is already x_q.) * Type 2: compute the sum of the elements in the subarray of A between the l_q-th and r_q-th positions (inclusive). Constraints * N, Q, i_q, l_q, and r_q are integers. * A is an array of integers. * x_q is an integer. * 1 ≤ N ≤ 500000 * 1 ≤ Q ≤ 20000 * 1 ≤ A[i] ≤ 10^9 for all valid indices i * 1 ≤ i_q ≤ N * 1 ≤ l_q ≤ r_q ≤ N * There is at least one query of type 2 in each testcase. Input Input is given from Standard Input in the following format: N A Q Query_1 ... Query_Q Here, Query_i in the 4-th through (Q+3)-th lines is one of the following: 1 i_q x_q 2 l_q r_q Output For each query of type 2, print a line containing the answer. Example Input 5 1 2 3 4 5 4 2 1 5 1 3 10 2 2 4 2 3 3 Output 15 16 10","solution":"def process_queries(N, A, Q, queries): Processes the queries and returns the results for type 2 queries. Parameters: N : int - Number of elements in array A A : list of int - Array containing N integers Q : int - Number of queries queries : list of tuple - Each tuple represents a query Returns: list of int - Results for each type 2 query results = [] for query in queries: if query[0] == 1: i_q, x_q = query[1], query[2] if A[i_q - 1] != x_q: A[i_q - 1] = x_q elif query[0] == 2: l_q, r_q = query[1], query[2] results.append(sum(A[l_q - 1 : r_q])) return results # Function to parse input data and run the provided function def main(input_data): input_lines = input_data.strip().split(\\"n\\") N = int(input_lines[0]) A = list(map(int, input_lines[1].split())) Q = int(input_lines[2]) queries = [] for i in range(3, 3 + Q): query = list(map(int, input_lines[i].split())) queries.append(query) results = process_queries(N, A, Q, queries) for result in results: print(result)"},{"question":"A company, \\"RoboManufacture,\\" specializes in producing automated robots for various tasks. They received a special order to program a new type of robot that can carry out an essential task in their warehouse: managing the inventory. The warehouse consists of a grid of cells, and the robot has to move from a starting cell to a target cell. However, the robot only has a limited number of movements it can perform. Here\'s how the robot can move: - Up (U) - Down (D) - Left (L) - Right (R) Given the number of moves the robot can execute and the dimensions of the warehouse grid, your job is to determine if the robot can reach the target cell from the starting cell using exactly the given number of moves. Input The first line contains three space-separated integers n, m, and k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ 200) – the number of rows and columns of the warehouse grid, and the exact number of moves the robot can make. The second line contains four space-separated integers sx, sy, tx, and ty (1 ≤ sx, sy, tx, ty ≤ 100) – the starting cell coordinates (sx, sy) and the target cell coordinates (tx, ty). Output Print \\"YES\\" if the robot can reach the target cell from the starting cell in exactly k moves. Otherwise, print \\"NO\\". Examples Input 5 5 6 1 1 3 3 Output YES Input 5 5 3 1 1 2 2 Output NO Input 5 5 4 1 1 1 1 Output YES Note In the first example, the robot can reach the target (3, 3) in exactly 6 moves, for instance: \\"RRDDDR\\". In the second example, it is impossible to reach (2, 2) from (1, 1) in exactly 3 moves as it requires at least 2 moves but doesn\'t match exactly 3 moves. In the third example, the robot is already at the target cell (1, 1) and does not need to move, satisfying 0 moves, which is exactly 4 moves as no moves are needed.","solution":"def can_reach_in_exact_moves(n, m, k, sx, sy, tx, ty): Determines if the robot can reach the target cell from the starting cell in exactly k moves. # Calculate the Manhattan distance between the start and target cells manhattan_distance = abs(sx - tx) + abs(sy - ty) # Check if the remaining number of moves after reaching the target # is non-negative and even. This ensures that we can reach the target # and use any remaining moves to move back and forth without changing position. return (k >= manhattan_distance) and ((k - manhattan_distance) % 2 == 0)"},{"question":"A software company maintains a system with N servers interconnected with each other. Each server can communicate with all other servers either directly or through another server. The system performs necessary updates over the weekend, and the updates can be rolled out only if every server can communicate with every other server within a given time threshold T. Communication time between two servers is represented by a matrix where `comm_time[i][j]` denotes the time taken to communicate between server `i` and server `j`. A possible update time of a server group is the maximum time taken to communicate between any two servers in that group. You need to determine if there is a way to partition the servers into multiple groups such that each group can perform updates independently while ensuring their update times do not exceed the given threshold T. For example, consider 4 servers where the communication times are given by: ``` comm_time = [ [0, 1, 4, 2], [1, 0, 4, 3], [4, 4, 0, 2], [2, 3, 2, 0] ] ``` With T = 2, you can group the servers into `[0, 1]` and `[2, 3]`, where the maximum communication times within each group are 1 and 2, respectively. Write a program that determines whether such partitioning is possible. If yes, print \\"YES\\"; otherwise, print \\"NO\\". Input - The first line contains two integers `N` (the number of servers) and `T` (the maximum allowed update time). - The next N lines each contain N integers representing the communication time matrix `comm_time`. Output - Print \\"YES\\" if partitioning is possible; otherwise, print \\"NO\\". Example Input: 4 2 0 1 4 2 1 0 4 3 4 4 0 2 2 3 2 0 Output: YES","solution":"def can_partition_servers(N, T, comm_time): def floyd_warshall(graph): distance = list(map(lambda i: list(map(lambda j: j, i)), graph)) for k in range(N): for i in range(N): for j in range(N): distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j]) return distance critical_distance = floyd_warshall(comm_time) def is_group_within_threshold(threshold): visited = [False] * N def dfs(node, threshold): stack = [node] while stack: current = stack.pop() for neighbor in range(N): if not visited[neighbor] and critical_distance[current][neighbor] <= threshold: visited[neighbor] = True stack.append(neighbor) components = 0 for node in range(N): if not visited[node]: components += 1 visited[node] = True dfs(node, threshold) return components return \\"YES\\" if is_group_within_threshold(T) == 1 else \\"NO\\""},{"question":"In a faraway land, there exists a special type of tree known as a \\"Magic Binary Search Tree\\" (MBST). An MBST follows the same properties as a regular Binary Search Tree (BST), but with an additional magical rule: for every node `n` in the tree, the difference between the height of its left and right subtrees should not exceed 1. Essentially, an MBST is a balanced BST. You are given a sequence of distinct integers. Your task is to construct the MBST by inserting the integers into the tree in the given order and then perform an in-order traversal of the tree to display the sorted sequence of the integers. Input: The first line consists of a single integer n (1 ≤ n ≤ 1000) - the number of integers in the sequence. The second line consists of n space-separated integers representing the sequence to be inserted into the MBST. Each integer is unique and will fit within a 32-bit signed integer. Output: Print the n space-separated integers that form the in-order traversal of the MBST. Sample Input: 5 3 1 4 2 5 Sample Output: 1 2 3 4 5 Explanation: The given sequence forms the following MBST: ``` 3 / 1 4 2 5 ``` The in-order traversal of this tree will yield: 1 2 3 4 5","solution":"class TreeNode: def __init__(self, key): self.val = key self.left = None self.right = None def insert(root, key): if root is None: return TreeNode(key) if key < root.val: root.left = insert(root.left, key) else: root.right = insert(root.right, key) return balance(root) def height(node): if node is None: return 0 return max(height(node.left), height(node.right)) + 1 def get_balance_factor(node): if node is None: return 0 return height(node.left) - height(node.right) def right_rotate(z): y = z.left T3 = y.right y.right = z z.left = T3 return y def left_rotate(z): y = z.right T2 = y.left y.left = z z.right = T2 return y def balance(node): if node is None: return node balance_factor = get_balance_factor(node) if balance_factor > 1: if get_balance_factor(node.left) < 0: node.left = left_rotate(node.left) return right_rotate(node) if balance_factor < -1: if get_balance_factor(node.right) > 0: node.right = right_rotate(node.right) return left_rotate(node) return node def inorder_traversal(root, res): if root: inorder_traversal(root.left, res) res.append(root.val) inorder_traversal(root.right, res) def build_mbst(sequence): root = None for num in sequence: root = insert(root, num) res = [] inorder_traversal(root, res) return res"},{"question":"Input The input consists of a single string s with length n (1 ≤ n ≤ 1000), containing only lowercase alphabetic characters. Output Print the lexicographically smallest permutation of the string s. Examples Input code Output cdeo Input abbc Output abbc Input zebra Output aberz Input alphabet Output aabehlpt","solution":"def lexicographically_smallest_permutation(s): Returns the lexicographically smallest permutation of the string s. return \'\'.join(sorted(s))"},{"question":"In a given list of integers, find and return the longest subsequence such that consecutive elements have a difference of 1. Constraints * 1 ≤ n ≤ 10^5 * 1 ≤ element in the list ≤ 10^4 Input A single line containing space-separated integers Output Return the longest subsequence with elements having consecutive differences of 1. In case of multiple subsequences of the same length, return any one of them. Examples Input 1 2 3 5 6 7 8 Output 5 6 7 8 Input 10 11 12 14 15 16 17 18 Output 14 15 16 17 18","solution":"def find_longest_consecutive_subsequence(nums): Returns the longest subsequence such that consecutive elements have a difference of 1. :param nums: A list of integers. :return: The longest subsequence with consecutive differences of 1. if not nums: return [] nums_set = set(nums) longest_seq = [] for num in nums: if num - 1 not in nums_set: # start of a new sequence current_seq = [] current_num = num while current_num in nums_set: current_seq.append(current_num) current_num += 1 if len(current_seq) > len(longest_seq): longest_seq = current_seq return longest_seq"},{"question":"Sarah loves reading books and recently joined an online book club where members share their book collections. She has a peculiar interest in unique books - those that appear only once within the entire club\'s collection. However, the club\'s library system can be cumbersome to navigate due to the extensive number of books and the limitations on naming conventions and other factors. Sarah seeks your help to find all unique books among the members\' shared collections to decide which books to borrow. Given a list of books each member has shared, your task is to identify the titles that appear exactly once across the entire collection. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of books shared by all members combined. The next n lines each contain a single string, representing the title of a book. Titles consist of lowercase Latin letters and contain between 1 and 30 characters. Output Output all the unique book titles (that appear exactly once) in alphabetical order, each on a new line. If there are no unique books, output a single string \\"no unique books\\". Examples Input 5 harrypotter lordoftherings harrypotter gameofthrones prideandprejudice Output gameofthrones lordoftherings prideandprejudice Input 4 threehundred inception threehundred inception Output no unique books","solution":"def find_unique_books(n, book_titles): from collections import Counter # Count the occurrences of each book title book_count = Counter(book_titles) # Filter titles that appear exactly once unique_books = [book for book, count in book_count.items() if count == 1] # Sort the unique books alphabetically unique_books.sort() # Return the result if unique_books: return unique_books else: return [\\"no unique books\\"]"},{"question":"Isomorphic Strings Note Isomorphic strings are strings in which the characters in one string can be replaced to get the second string. All occurrences of a character must be replaced with another character while preserving the order of characters. Input The first line of the input contains an integer T. The next T lines will each contain two space-separated strings. Output For each test case, output \\"Yes\\" if the strings are isomorphic, otherwise print \\"No\\". Constraints 1 ≤ T ≤ 5000 1 ≤ length of either string ≤ 20 The strings only consist of lowercase characters. Problem Setter: Your Name SAMPLE INPUT 3 egg add foo bar paper title SAMPLE OUTPUT Yes No Yes","solution":"def is_isomorphic(s: str, t: str) -> bool: if len(s) != len(t): return False map_s_t = {} map_t_s = {} for char_s, char_t in zip(s, t): if (char_s in map_s_t and map_s_t[char_s] != char_t) or (char_t in map_t_s and map_t_s[char_t] != char_s): return False map_s_t[char_s] = char_t map_t_s[char_t] = char_s return True def check_isomorphic_strings(test_cases): results = [] for s, t in test_cases: if is_isomorphic(s, t): results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Example usage: # test_cases = [(\\"egg\\", \\"add\\"), (\\"foo\\", \\"bar\\"), (\\"paper\\", \\"title\\")] # print(check_isomorphic_strings(test_cases))"},{"question":"Sara is writing a program to analyze a list of words. She needs to count how many of these words contain the letter \'a\' at least once. You are tasked with helping her achieve this. Write a function `count_words_with_a` that takes in a list of strings `words` and returns the count of words that contain the letter \'a\'. The search should be case-insensitive, meaning \'A\' and \'a\' are considered the same. # Function Signature ```python def count_words_with_a(words: List[str]) -> int: ``` # Input - `words`: A list of strings containing the words to be analyzed. # Output - An integer representing the number of words that contain the letter \'a\'. # Example SAMPLE INPUT ```python [\\"Apple\\", \\"Banana\\", \\"Cherry\\", \\"Date\\", \\"Eggfruit\\", \\"Fig\\", \\"Grape\\"] ``` SAMPLE OUTPUT ```python 5 ``` # Constraints - All words in the input list are non-empty and contain only alphabetic characters. - The length of the list `words` will not exceed 1000. - Each word\'s length will not exceed 100 characters.","solution":"def count_words_with_a(words): This function takes a list of words and returns the count of those words that contain the letter \'a\' (case-insensitive). count = 0 for word in words: if \'a\' in word.lower(): count += 1 return count"},{"question":"Alex has an MxM matrix. Each element at the position (i, j) in the matrix is given by the formula: Matrix[i][j] = (i + j) % M where 0 ≤ i, j < M. Your task is to find the sum of all unique elements in this matrix for a given M. Input: First line contains T - the number of test cases. Following T lines each contains an integer M - the size of the matrix. Output: For each test case, output the sum of all unique elements in the matrix in a new line. Constraints: 1 ≤ T ≤ 100000 (10^5) 1 ≤ M ≤ 1000000000000000000 (10^18) SAMPLE INPUT 2 2 3 SAMPLE OUTPUT 1 3 Explanation: For M=2, the matrix will look like: 0 1 1 0 The unique elements are 0 and 1. Their sum is 1. For M=3, the matrix will look like: 0 1 2 1 2 0 2 0 1 The unique elements are 0, 1, and 2. Their sum is 3.","solution":"def sum_of_unique_elements(M): Returns the sum of all unique elements in an MxM matrix where elements are given by (i + j) % M. return (M * (M - 1)) // 2 def process_test_cases(test_cases): results = [] for M in test_cases: results.append(sum_of_unique_elements(M)) return results"},{"question":"Harry is organizing a coding camp in his town. To manage the organization, he needs to collect registration data from multiple participants. Each participant provides their name during registration. However, Harry wants to ensure that each participant has a unique identifier since some participants might have the same name. Harry decides to add a suffix to each duplicate name to make it unique. The suffix will start with _(1) for the first duplicate, _(2) for the second, and so on. Harry wants to automate this process to handle a large number of participants efficiently. Can you help him write a function that takes a list of names and returns a list of the names with appropriate suffixes added to duplicate names? Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of participants. - The next n lines contain one string each, the names of the participants. Each name consists of lowercase alphabetic characters only and has a length between 1 and 100. Output - Output n lines - the list of participant names with suffixes added appropriately so that each name is unique in the list. Example Input 5 alice bob alice alice bob Output alice bob alice_1 alice_2 bob_1 Input 3 carl carl carl Output carl carl_1 carl_2 Note In the first example, the first \\"alice\\" and \\"bob\\" don\'t need a suffix since they are the first occurrences. The second \\"alice\\" gets the suffix \\"_1\\" and the third \\"alice\\" gets \\"_2\\". The second \\"bob\\" gets the suffix \\"_1\\". In the second example, the first \\"carl\\" doesn\'t need a suffix. The second and third occurrences of \\"carl\\" get suffixed with \\"_1\\" and \\"_2\\" respectively.","solution":"def unique_names(n, names): name_count = {} result = [] for name in names: if name in name_count: name_count[name] += 1 new_name = f\\"{name}_{name_count[name]}\\" else: name_count[name] = 0 new_name = name result.append(new_name) return result"},{"question":"You are given a list of integers and a target sum. Determine whether there is a pair of distinct integers in the list that adds up to the target sum. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the list. The second line contains n integers separated by spaces, representing the elements of the list. The third line contains a single integer, the target sum. Output Output \\"YES\\" if there are distinct integers in the list whose sum is equal to the target sum; otherwise, output \\"NO\\". Examples Input 5 1 2 3 4 5 9 Output YES Input 4 1 2 3 4 8 Output NO Note In the first example, the integers 4 and 5 add up to 9. In the second example, there are no two distinct integers that add up to 8.","solution":"def has_pair_with_sum(n, lst, target_sum): Checks if there are two distinct integers in the list `lst` that add up to `target_sum`. Parameters: n (int): The number of elements in the list. lst (list): A list of integers. target_sum (int): The target sum. Returns: str: \\"YES\\" if there are two distinct integers that add up to the target sum, otherwise \\"NO\\". seen = set() for num in lst: if (target_sum - num) in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Ali is fascinated with binary strings lately. He came up with an interesting problem and he needs your help to solve it: You are given a binary string consisting of \'0\'s and \'1\'s. Your task is to partition this binary string into the minimum number of substrings such that each substring contains an equal number of \'0\'s and \'1\'s. Input The first line contains a positive integer T (1 ≤ T ≤ 100), representing the number of test cases. Each of the next T lines contains a binary string (maximum length of 105) — the binary string to be partitioned. Output For each test case, output one number, representing the minimum number of substrings that satisfy the given condition. Examples Input 2 110011 00110011 Output 1 2 Note The first example: 1. You can partition the binary string \\"110011\\" into \\"110011\\", which contains 3 \'0\'s and 3 \'1\'s. The second example: 1. You can partition the binary string \\"00110011\\" into \\"0011\\" and \\"0011\\", each containing 2 \'0\'s and 2 \'1\'s.","solution":"def min_partitions_with_equal_zeros_and_ones(binary_string): count_0, count_1 = 0, 0 partitions = 0 for char in binary_string: if char == \'0\': count_0 += 1 else: count_1 += 1 if count_0 == count_1: partitions += 1 return partitions def solve(test_cases): results = [] for binary_string in test_cases: results.append(min_partitions_with_equal_zeros_and_ones(binary_string)) return results"},{"question":"Martina is working on a sequencing problem where she wants to align two DNA sequences. Given two sequences A and B, she wants to determine the minimum number of operations required to convert sequence A into sequence B. The operations allowed are: 1. Insert a character 2. Delete a character 3. Replace a character Help Martina by writing a function to find the minimum number of these operations required to transform sequence A into sequence B. Input The first line contains an integer T (1 ≤ T ≤ 100) — the number of test cases. Each of the next T test cases includes two lines: - The first line contains the string A (1 ≤ |A| ≤ 100), representing the first DNA sequence. - The second line contains the string B (1 ≤ |B| ≤ 100), representing the second DNA sequence. Output For each test case, print a single integer — the minimum number of operations required to transform sequence A into sequence B. Example Input 3 kitten sitting flaw lawn abc abcd Output 3 2 1 Explanation In the first test case, the minimum operations required to convert \\"kitten\\" to \\"sitting\\" are: 1. Replace \'k\' with \'s\' -> \\"sitten\\" 2. Replace \'e\' with \'i\' -> \\"sittin\\" 3. Insert \'g\' at the end -> \\"sitting\\" In the second test case, the minimum operations required to convert \\"flaw\\" to \\"lawn\\" are: 1. Replace \'f\' with \'l\' -> \\"law\\" 2. Insert \'n\' at the end -> \\"lawn\\" In the third test case, the minimum operations required to convert \\"abc\\" to \\"abcd\\" is: 1. Insert \'d\' at the end -> \\"abcd\\"","solution":"def min_operations(seq1, seq2): Compute the minimum number of operations required to convert seq1 into seq2. Allowed operations are insert a character, delete a character, or replace a character. Uses dynamic programming to solve the problem. m = len(seq1) n = len(seq2) # Create a table to store results of subproblems dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill dp table for i in range(m + 1): for j in range(n + 1): # If seq1 is empty, we need to insert all characters of seq2 if i == 0: dp[i][j] = j # Minimum operations = j # If seq2 is empty, we need to delete all characters of seq1 elif j == 0: dp[i][j] = i # Minimum operations = i # If the characters are same, no operation is required elif seq1[i - 1] == seq2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the characters are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n] def process_test_cases(test_cases): results = [] for seq1, seq2 in test_cases: results.append(min_operations(seq1, seq2)) return results"},{"question":"You are given an array of integers representing the heights of buildings in a row. Each building height is given by a_i. Your task is to determine the minimum number of buildings that need to be adjusted such that every pair of adjacent buildings has a height difference of at most 1. You can only decrease the height of a building (i.e., you cannot increase the height). Input - The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of buildings. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the height of the i-th building. Output - Print one integer — the minimum number of buildings that need to be adjusted. Examples Input 5 4 3 2 1 5 Output 1 Input 5 1 3 5 7 9 Output 4 Input 5 5 4 3 2 1 Output 0","solution":"def min_adjustments_needed(n, heights): Returns the minimum number of buildings that need to be adjusted such that every pair of adjacent buildings has a height difference of at most 1. We can only decrease the height of a building. count_adjustments = 0 for i in range(1, n): if heights[i] > heights[i-1] + 1: count_adjustments += 1 heights[i] = heights[i-1] + 1 return count_adjustments"},{"question":"You are designing a new data structure that supports three types of operations on a list of integers: add a value to the list, remove a value from the list, and retrieve the median value of the list. The median value of an even-length list is the average of the two middle numbers. The median value of an odd-length list is the middle number. Write a program that processes a series of operations and maintains the median of the list. Input The first line contains an integer n, the number of operations (1 ≤ n ≤ 100000). Each of the following n lines describes an operation: - \\"a x\\" (add x to the list, where x is an integer, -10^9 ≤ x ≤ 10^9) - \\"r x\\" (remove x from the list, where x is an integer) - \\"m\\" (print the current median value of the list) Output For each \\"m\\" operation, print the median of the current list, rounded to one decimal place. Note: - If a remove operation is called with an element not present in the list, ignore that operation. - It is guaranteed that when a median retrieval operation is executed, the list will not be empty. Example Input 7 a 1 a 2 a 3 m r 2 m a 4 m Output 2.0 2.0 3.0 Explanation - After adding 1, 2, 3, the list is [1, 2, 3], and the median is 2. - After removing 2, the list is [1, 3], and the median is (1+3)/2 = 2.0. - After adding 4, the list is [1, 3, 4], and the median is 3.","solution":"import bisect class MedianMaintainer: def __init__(self): self.data = [] def add(self, x): bisect.insort(self.data, x) def remove(self, x): if x in self.data: self.data.remove(x) def get_median(self): n = len(self.data) if n % 2 == 1: return float(self.data[n // 2]) else: return (self.data[n // 2 - 1] + self.data[n // 2]) / 2.0 def process_operations(n, operations): mm = MedianMaintainer() results = [] for operation in operations: if operation[0] == \'a\': mm.add(int(operation[1])) elif operation[0] == \'r\': mm.remove(int(operation[1])) elif operation[0] == \'m\': results.append(f\\"{mm.get_median():.1f}\\") return results"},{"question":"Consider a grid with n rows and m columns, initially filled with zeroes. You need to perform two types of operations on this grid: 1. Update the value at a specific cell. 2. Query the sum of values in a rectangular subgrid. The operations are described as follows: 1. Update operation: `1 x y v` - Set the value at cell (x, y) to v. 2. Query operation: `2 x1 y1 x2 y2` - Find the sum of the values in the subgrid whose top-left corner is (x1, y1) and bottom-right corner is (x2, y2). The coordinates are 1-based. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. The second line contains an integer q (1 ≤ q ≤ 10000), the number of operations to be performed. The next q lines contain the operations in one of the two formats described above. Output For each query operation, print the sum of the values in the corresponding subgrid. Example Input 4 4 5 1 1 1 3 1 2 2 2 2 1 1 2 2 1 3 3 5 2 2 2 4 4 Output 5 7 Explanation After the first update operation, the grid is: 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 After the second update operation, the grid is: 3 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 The first query operation sums the values from (1, 1) to (2, 2), which is a 2x2 subgrid with values: 3 0 0 2 The sum is 3 + 0 + 0 + 2 = 5. After the third update operation, the grid is: 3 0 0 0 0 2 0 0 0 0 5 0 0 0 0 0 The second query operation sums the values from (2, 2) to (4, 4), which is a 3x3 subgrid with values: 2 0 0 0 5 0 0 0 0 The sum is 2 + 0 + 0 + 0 + 5 + 0 + 0 + 0 + 0 = 7.","solution":"class Grid: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * m for _ in range(n)] def update(self, x, y, v): self.grid[x-1][y-1] = v def query(self, x1, y1, x2, y2): sum_value = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): sum_value += self.grid[i][j] return sum_value def process_operations(n, m, operations): grid = Grid(n, m) results = [] for operation in operations: if operation[0] == 1: _, x, y, v = operation grid.update(x, y, v) elif operation[0] == 2: _, x1, y1, x2, y2 = operation result = grid.query(x1, y1, x2, y2) results.append(result) return results"},{"question":"You have recently come across a unique way of arranging books in your bookshelf. You want to place n books in a line but with specific constraints. Each book has a thickness, and certain pairs of books must be adjacent to each other. You have two lists: - A list of integers `t` where `t_i` represents the thickness of the `i-th` book. - A list of pairs of integers `pairs` where each pair `(a, b)` indicates that the `a-th` and `b-th` books must be adjacent to each other. Your task is to determine the minimum possible width of the bookshelf if all the constraints are satisfied. If it is impossible to satisfy all the constraints, return `-1`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 200,000) — the number of books. - The second line contains `n` integers `t_1, t_2, ..., t_n` (1 ≤ t_i ≤ 1000) — where `t_i` denotes the thickness of the `i-th` book. - The third line contains an integer `m` (0 ≤ m ≤ 200,000) — the number of constraints. - Each of the next `m` lines contains two integers `a` and `b` (1 ≤ a < b ≤ n) — indicating that book `a` and book `b` must be placed adjacent to each other. # Output Output one integer — the minimum possible width of the bookshelf if all constraints are satisfied, or `-1` if it is impossible. # Examples Input ``` 4 3 1 4 2 2 1 2 3 4 ``` Output ``` 10 ``` Input ``` 3 2 2 2 3 1 2 2 3 1 3 ``` Output ``` -1 ``` Input ``` 5 5 3 2 4 1 0 ``` Output ``` 15 ``` # Note In the first example, one possible arrangement that satisfies the constraints is: book 1 (thickness 3), book 2 (thickness 1), book 3 (thickness 4), book 4 (thickness 2). The total width is 3 + 1 + 4 + 2 = 10. In the second example, it\'s not possible to satisfy all the constraints, so the answer is `-1`. In the third example, there are no constraints, so you can place all the books in any order, and the total width is the sum of the thicknesses of all books.","solution":"def minimum_bookshelf_width(n, t, m, pairs): from collections import defaultdict, deque # Create an adjacency list for the graph adjacency_list = defaultdict(list) for a, b in pairs: adjacency_list[a - 1].append(b - 1) adjacency_list[b - 1].append(a - 1) visited = [False] * n def bfs(start): queue = deque([start]) visited[start] = True component = [] while queue: node = queue.popleft() component.append(node) for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component components = [] for i in range(n): if not visited[i]: component = bfs(i) components.append(component) width = 0 for component in components: sub_width = 0 edges = 0 for node in component: sub_width += t[node] edges += len(adjacency_list[node]) if edges // 2 != len(component) - 1: return -1 # Not a tree, hence not possible to place them as needed width += sub_width return width"},{"question":"Alice is a collector of unique items. She has a collection of n items each identified by a unique integer ID. She frequently goes to a marketplace where she might find new items to add to her collection. The marketplace offers m different items, each also identified by a unique integer ID. Alice wants to know how many items from the marketplace are not already in her collection so that she can decide if it\'s worth the trip to the marketplace. Write a program that takes Alice\'s collection and the marketplace offerings and calculates the number of new items she can find in the marketplace. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of items in Alice\'s collection. The second line contains n integers representing the unique IDs of the items in Alice\'s collection. The third line contains an integer m (1 ≤ m ≤ 10^5), the number of items in the marketplace. The fourth line contains m integers representing the unique IDs of the items in the marketplace. Output Print one integer — the number of new items in the marketplace that are not already in Alice\'s collection. Example Input 5 1 2 3 4 5 5 4 5 6 7 8 Output 3 Note In the example, Alice\'s collection contains the items with IDs {1, 2, 3, 4, 5}, and the marketplace offers the items with IDs {4, 5, 6, 7, 8}. The new items Alice can find in the marketplace are {6, 7, 8}, so the answer is 3.","solution":"def new_items_count(n, collection, m, marketplace): Determines the number of new items in the marketplace that are not in Alice\'s collection. :param n: int, number of items in Alice\'s collection :param collection: list of int, IDs of items in Alice\'s collection :param m: int, number of items in the marketplace :param marketplace: list of int, IDs of items in the marketplace :return: int, number of new items in the marketplace not in Alice\'s collection collection_set = set(collection) marketplace_set = set(marketplace) new_items = marketplace_set - collection_set return len(new_items)"},{"question":"Given two strings, write a function that determines if one string is a permutation of the other. A permutation is a rearrangement of the characters in the string. The function should return True if the two strings are permutations of each other and False otherwise. Input Two space-separated strings. Output A single boolean value, either True or False. Constraints * The input strings will only contain printable ASCII characters. * The length of the strings will be between 1 and 100,000. Examples Input abcd bcda Output True Input abcde edcba Output True Input abcd efg Output False Input xyz abc Output False","solution":"def are_permutations(str1, str2): Determines if two strings are permutations of each other. Args: str1 (str): First string. str2 (str): Second string. Returns: bool: True if the strings are permutations of each other, False otherwise. if len(str1) != len(str2): return False return sorted(str1) == sorted(str2) # Example usage # result = are_permutations(\\"abcd\\", \\"bcda\\") # print(result) # output should be: True"},{"question":"The land of Faraway has recently adopted a new farming system implemented by the Ministry of Agriculture. The system aims to maximize the variety of crops planted on a rectangular plot of land. The plot is divided into a grid of size n x m, and each cell in the grid can be used to plant one type of crop. The farmers in Faraway have agreed upon the following rules: - No two adjacent cells (horizontally, vertically, or diagonally) can have the same type of crop. - There are k different types of crops available, represented by integers from 1 to k. To help the farmers, you are to develop a program that generates a valid planting plan for the grid or determines if it is impossible to create one with the given k crop types. Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 50, 1 ≤ k ≤ 10) which represent the number of rows, number of columns, and the number of different crop types respectively. Output If no valid planting plan exists, print a single word \\"NO\\" (without quotes). Otherwise, print \\"YES\\" (without quotes) on the first line, followed by n lines, each containing m integers. The j-th integer in the i-th line should denote the type of crop planted in the cell at the i-th row and j-th column. Examples Input 3 3 2 Output YES 1 2 1 2 1 2 1 2 1 Input 2 2 1 Output NO Note: In the first example, a valid planting plan is presented where no two adjacent cells have the same type of crop. In the second example, it is impossible to comply with the rules using only one type of crop.","solution":"def generate_planting_plan(n, m, k): if k == 1 and (n > 1 or m > 1): return [\\"NO\\"] plan = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): plan[i][j] = ((i + j) % k) + 1 return [\\"YES\\"] + [\' \'.join(map(str, row)) for row in plan]"},{"question":"Sam is organizing a book collection and wants to keep track of where each book is stored in his library. Each book is categorized by both genre and year of publication. He maintains indices to quickly find all books within a specific genre from a specific year. Your job is to write a program that inputs Sam\'s library data and then answers a series of queries regarding the books in his collection. Input The input contains several test cases. Each test case starts with an integer `N` (1 ≤ N ≤ 100), representing the number of books. The following `N` lines each contain a string `title` (a string without spaces) followed by a string `genre` and an integer `year` (between 1900 and 2022), indicating the title, genre, and year of publication of the book, respectively. After the list of books, the next line contains an integer `Q` (1 ≤ Q ≤ 100), representing the number of queries. The following `Q` lines each contain a string `genre` and an integer `year`, asking for the titles of books of that genre and year. The end of input is indicated by a single line containing a zero. Output For each test case, for each query, print the titles of books that match the genre and year in the order they were given in the input. Each query\'s result should start with \\"Query:\\", followed by the titles of the matching books, or \\"No books found\\" if there are no matches. Separate consecutive test cases with a blank line. Example Input 3 TheHobbit Fantasy 1937 1984 Dystopian 1949 Dune SciFi 1965 2 Fantasy 1937 SciFi 1965 4 TreasureIsland Adventure 1883 HeartOfDarkness Adventure 1899 Gatsby Classic 1925 Mockingbird Classic 1960 2 Classic 1925 Adventure 1883 0 Output Query: TheHobbit Query: Dune Query: Gatsby Query: TreasureIsland","solution":"def process_library_data(input_data): results = [] lines = input_data.strip().split(\'n\') index = 0 while index < len(lines): N = int(lines[index]) if N == 0: break index += 1 books = [] for _ in range(N): entry = lines[index].split() title = entry[0] genre = entry[1] year = int(entry[2]) books.append((title, genre, year)) index += 1 Q = int(lines[index]) index += 1 queries = [] for _ in range(Q): genre, year = lines[index].split() year = int(year) queries.append((genre, year)) index += 1 if results: results.append(\'\') for genre, year in queries: matching_books = [title for title, book_genre, book_year in books if book_genre == genre and book_year == year] if matching_books: results.append(\'Query:\') results.extend(matching_books) else: results.append(\'Query:\') results.append(\'No books found\') return \'n\'.join(results) # Example usage: # input_data = \'\'\'3 # TheHobbit Fantasy 1937 # 1984 Dystopian 1949 # Dune SciFi 1965 # 2 # Fantasy 1937 # SciFi 1965 # 4 # TreasureIsland Adventure 1883 # HeartOfDarkness Adventure 1899 # Gatsby Classic 1925 # Mockingbird Classic 1960 # 2 # Classic 1925 # Adventure 1883 # 0\'\'\' # print(process_library_data(input_data))"},{"question":"**Problem Statement:** Alex, a software engineer, is working on an application to optimize the schedule of delivery trucks for a logistics company. Each delivery truck can handle a single route on a given day. The company has n delivery routes that need to be completed within a specified time window on the same day. Each route is described by two time intervals: [sa_i, ea_i] and [sb_i, eb_i]. These intervals represent the starting and ending times for the routes when taken by Truck A or Truck B, respectively. The routes are said to conflict if they overlap in time. Formally, two routes [x, y] and [u, v] overlap if and only if max(x, u) ≤ min(y, v). Alex needs to determine if it\'s possible to assign routes to either Truck A or Truck B such that no two assigned routes overlap. Write a program to determine if such an assignment is possible. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100 000), the number of delivery routes. - The next n lines each contain four integers sa_i, ea_i, sb_i, eb_i (1 ≤ sa_i, ea_i, sb_i, eb_i ≤ 10^9, sa_i ≤ ea_i, sb_i ≤ eb_i). These values describe the intervals for the routes if taken by Truck A or Truck B. **Output:** - Print \\"Possible\\" if it\'s possible to assign the routes to Trucks A and B such that no two routes conflict. Print \\"Impossible\\" otherwise. **Examples:** **Input:** 3 1 3 4 6 2 5 7 8 4 6 9 11 **Output:** Possible **Input:** 4 1 4 2 5 3 5 3 6 4 7 1 3 8 10 9 11 **Output:** Impossible **Explanation:** In the first example, the routes can be assigned to the trucks as follows: - Assign route 1 to Truck A: [1, 3] - Assign route 2 to Truck A: [2, 5] - Assign route 3 to Truck B: [9, 11] In the second example, no matter how the routes are assigned, some routes will necessarily overlap, making it impossible to avoid conflicts. Determine if it\'s possible to assign the routes to the trucks without conflicts.","solution":"def can_assign_routes(n, intervals): def can_schedule_non_conflicting(intervals): intervals.sort(key=lambda x: x[1]) # sort by the end time end_time = -1 for start, end in intervals: if start <= end_time: return False end_time = end return True truck_a_intervals = [(sai, eai) for sai, eai, _, _ in intervals] truck_b_intervals = [(sbi, ebi) for _, _, sbi, ebi in intervals] return can_schedule_non_conflicting(truck_a_intervals) or can_schedule_non_conflicting(truck_b_intervals) if __name__ == \\"__main__\\": n = int(input().strip()) intervals = [tuple(map(int, input().strip().split())) for _ in range(n)] result = can_assign_routes(n, intervals) print(\\"Possible\\" if result else \\"Impossible\\")"},{"question":"A company runs a high-traffic website. The website performs a variety of tasks for users, and each task generates a log entry that indicates when the task started and ended. You work in the site performance monitoring team, and your job is to analyze these logs to find the periods when the server was most heavily loaded. You are provided with a log of start and end timestamps for various tasks. Your task is to find the maximum number of concurrent tasks that the server was running at any point in time. Write a program that takes the logs as input and reports the maximum number of concurrent tasks. input The input consists of multiple lines. The first line consists of one integer T (1 ≤ T ≤ 100000), the number of tasks. Each of the following T lines contains two integers si and ei (1 ≤ si < ei ≤ 1000000000), the start time and end time of the i-th task. Each task\'s start and end time are unique. output Output a single integer, the maximum number of concurrent tasks. Example Input 5 1 4 2 5 9 12 5 9 5 12 Output 3","solution":"def max_concurrent_tasks(task_intervals): Given a list of task intervals, each interval being a tuple (start, end), finds the maximum number of concurrent tasks. task_intervals: List[Tuple[int, int]] Returns an integer indicating the maximum number of concurrent tasks. events = [] for start, end in task_intervals: events.append((start, \'start\')) events.append((end, \'end\')) events.sort(key=lambda x: (x[0], x[1] == \'end\')) current_tasks = 0 max_tasks = 0 for time, event in events: if event == \'start\': current_tasks += 1 max_tasks = max(max_tasks, current_tasks) else: current_tasks -= 1 return max_tasks if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) tasks = [(int(data[i]), int(data[i+1])) for i in range(1, len(data), 2)] print(max_concurrent_tasks(tasks))"},{"question":"Given an array of integers and a target integer, determine the indices of the two numbers in the array that add up to the target integer. **Function Signature:** ```python def find_two_sum(nums: List[int], target: int) -> List[int]: ``` **Input:** - `nums` (List[int]): A list of integers where 2 ≤ len(nums) ≤ 10^4 and -10^9 ≤ nums[i] ≤ 10^9. - `target` (int): An integer -10^9 ≤ target ≤ 10^9. **Output:** - Return a list of two integers, where the integers are the zero-based indices of the two numbers in `nums` that add up to `target`. **Example:** ```python find_two_sum([2, 7, 11, 15], 9) -> [0, 1] find_two_sum([3, 2, 4], 6) -> [1, 2] ``` **Explanation:** In the first example, the numbers at indices 0 and 1 (2 + 7) add up to the target 9. In the second example, the numbers at indices 1 and 2 (2 + 4) add up to the target 6. **Constraints:** - Each input would have exactly one solution, and you may not use the same element twice.","solution":"from typing import List def find_two_sum(nums: List[int], target: int) -> List[int]: Return indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"Consider a town with N houses and M roads connecting these houses. Each road connecting two houses has a certain distance. The town council wants to minimize the distance a mailman has to travel in order to deliver letters to all houses. The mailman starts at any house and it should be possible to attend to all houses by traveling the fewest possible total distance. Your task is to write a program that finds the minimum total distance the mailman has to travel. Input format: - The first line contains two integers N and M, the number of houses and the number of roads, respectively. - The next M lines each contain three integers u, v, d, representing a road between houses u and v with distance d. Output format: - Output a single integer, the minimum distance the mailman has to travel to deliver letters to all houses. Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ 2000 1 ≤ u, v ≤ N 1 ≤ d ≤ 10000 Note: - It is guaranteed that there is at least one possible way for the mailman to travel between all houses. SAMPLE INPUT 4 5 1 2 5 1 3 10 1 4 9 2 3 8 3 4 6 SAMPLE OUTPUT 19","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rank[rootX] < rank[rootY]: parent[rootX] = rootY elif rank[rootX] > rank[rootY]: parent[rootY] = rootX else: parent[rootY] = rootX rank[rootX] += 1 def kruskal(n, edges): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda edge: edge[2]) mst_weight = 0 mst_edges = 0 for edge in edges: u, v, weight = edge if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_weight += weight mst_edges += 1 if mst_edges == n - 1: break return mst_weight def minimum_distance_to_travel(N, M, roads): edges = [(u-1, v-1, d) for u, v, d in roads] return kruskal(N, edges) # Example usage N, M = 4, 5 roads = [(1, 2, 5), (1, 3, 10), (1, 4, 9), (2, 3, 8), (3, 4, 6)] print(minimum_distance_to_travel(N, M, roads))"},{"question":"In a country called Zynar, there are many ancient castles connected by a series of tunnels. Some tunnels are mysteriously enchanted such that once a castle is entered, the exit time at the other end is magically determined. The problem is that a tunnel cannot be used again within a given magical cooldown period, otherwise the magical properties reset, and the travelers have to restart their journey. You are to determine the minimum total travel time for a group of travelers to journey through a series of castles following a particular order. Given a list of tunnels between castles, where the time to travel through a tunnel is known and a magical cooldown period for each tunnel, your task is to calculate the minimal time needed for the travelers to complete their journey while abiding by the cooldown constraint. Input The first line of input contains two integers N and M, where N is the number of castles and M is the number of tunnels. The next M lines each contain four integers u, v, t, c, describing a tunnel between castles u and v (1 ≤ u, v ≤ N) with a travel time t (1 ≤ t ≤ 1000) and a magical cooldown period c (0 ≤ c ≤ 1000). The next line contains an integer K, the number of stops the travelers need to make. The final line contains K integers representing the sequence of castles to be visited. * 2 ≤ N ≤ 1000 * 1 ≤ M ≤ 5000 * 1 ≤ K ≤ 100 * 1 ≤ u, v ≤ N for all tunnels * 1 ≤ t ≤ 1000 for all tunnels * 0 ≤ c ≤ 1000 for all tunnels * 1 ≤ si ≤ N for all 1 ≤ i ≤ K Output Output a single integer representing the minimum time required for the travelers to complete their journey through the specified series of castles. Examples Input 4 5 1 2 10 5 1 3 20 0 2 4 15 0 3 4 30 0 1 4 25 10 3 1 3 4 Output 50 Note The travelers first take the tunnel from castle 1 to castle 3, which takes 20 minutes. Then they go from castle 3 to castle 4, taking the shortest route there which is via the tunnel with 30 minutes of travel time. The total travel time is 20+30 = 50 minutes, which is minimal given the constraints on tunnel cooldowns.","solution":"def minimal_travel_time(N, M, tunnels, K, sequence): from heapq import heappop, heappush from collections import defaultdict import sys adj = defaultdict(list) for u, v, t, c in tunnels: adj[u].append((v, t, c)) adj[v].append((u, t, c)) def dijkstra(start, end): heap = [(0, start, 0)] visited = {} while heap: travel_time, current, cooldown = heappop(heap) if (current, cooldown) in visited and visited[(current, cooldown)] <= travel_time: continue visited[(current, cooldown)] = travel_time if current == end: return travel_time for neighbor, travel_cost, cooldown_period in adj[current]: next_time = travel_time + travel_cost if next_time < visited.get((neighbor, cooldown_period), sys.maxsize): heappush(heap, (next_time, neighbor, cooldown_period)) return sys.maxsize total_time = 0 for i in range(K - 1): total_time += dijkstra(sequence[i], sequence[i + 1]) return total_time"},{"question":"Implement a function that takes in a positive integer k and returns the kth number in the sorted list of all the numbers that are the sum of two positive cubes in two or more different ways. A number x is the sum of two positive cubes in two different ways if there exist distinct pairs of positive integers (a, b) and (c, d) such that x = a^3 + b^3 = c^3 + d^3. For example, 1729 is the sum of cubes of 1 and 12 (1^3 + 12^3) and the sum of cubes of 9 and 10 (9^3 + 10^3). INPUT: A positive integer k. 1 <= k <= 100 OUTPUT: A single integer representing the kth number in the sorted list of all numbers that are the sum of cubes in two or more different ways. Function Signature: ```python def find_kth_sum_of_cubes(k: int) -> int: # Your code here ``` EXAMPLE: INPUT 1 OUTPUT 1729 INPUT 2 OUTPUT 4104","solution":"def find_kth_sum_of_cubes(k): # A dictionary for storing sums of cubes and their pairs cube_sums = {} # Iterate over a range of numbers to find sums of cubes limit = 100 for a in range(1, limit): for b in range(a, limit): cube_sum = a**3 + b**3 if cube_sum in cube_sums: cube_sums[cube_sum].add((a, b)) else: cube_sums[cube_sum] = {(a, b)} # Filter out the sums that have at least two different pairs valid_sums = [sum_ for sum_, pairs in cube_sums.items() if len(pairs) > 1] # Sort the valid sums and return the kth element valid_sums.sort() return valid_sums[k - 1]"},{"question":"Playlist Organizer Template in Python Constraints * 1 ≤ m ≤ 10000 * 1 ≤ n ≤ 10000 * 1 ≤ length of song name ≤ 50 * 1 ≤ playtimei ≤ 1000 Input m n song1 playtime1 song2 playtime2 ... songm playtimem The first line contains the number of songs m in the playlist and the maximum playtime n in seconds, separated by a single space. In the following m lines, names and playtimes for the m songs are given. namei and playtimei are separated by a single space. Output Print the songs that can be added to the playlist such that their total playtime does not exceed the given maximum playtime n. If there are multiple solutions, any valid one will be accepted. Each song should be printed on a new line in the order they appear in the input. Example Input 5 1000 song1 200 song2 300 song3 250 song4 450 song5 150 Output song1 song2 song3 song5","solution":"def create_playlist(m, n, songs): Returns the list of songs that can be added to the playlist such that their total playtime does not exceed the given maximum playtime n. The songs are selected in the order they appear in the input. :param m: Number of songs :param n: Maximum playtime in seconds :param songs: List of tuples where each tuple contains the name of the song and its playtime :return: List of song names that can fit within the given maximum playtime result = [] total_time = 0 for song, playtime in songs: if total_time + playtime <= n: result.append(song) total_time += playtime return result # Example usage: # m, n = 5, 1000 # songs = [(\\"song1\\", 200), (\\"song2\\", 300), (\\"song3\\", 250), (\\"song4\\", 450), (\\"song5\\", 150)] # print(create_playlist(m, n, songs))"},{"question":"**Vending Machine Change** A vending machine in a cafeteria accepts coins of denominations 1, 2, and 5 units. Given a total amount that a user needs to pay, the machine dispenses the change using the least number of coins possible. Write a program to determine the minimum number of coins that the machine should dispense for the given amount. Input The first line contains one integer T - the number of test cases. The following T lines contain one integer each - the amount that needs to be paid. Output For each test case, output the minimum number of coins necessary to dispense the amount. Constraints 1 ≤ T ≤ 1000 1 ≤ amount ≤ 10^9 SAMPLE INPUT 3 11 24 5 SAMPLE OUTPUT 3 6 1","solution":"def min_coins(amount): Calculate the minimum number of coins needed to make the given amount using denominations 1, 2, and 5. coins = 0 # Start with the largest denomination coins += amount // 5 amount %= 5 # Then use the second largest denomination coins += amount // 2 amount %= 2 # Finally use the smallest denomination coins += amount return coins def vending_machine_change(T, amounts): For each amount, calculate the minimum number of coins and return the results. results = [] for amount in amounts: results.append(min_coins(amount)) return results"},{"question":"Write a function that simulates a simple banking system with two types of accounts: savings and checking. Your function should process a list of transactions and modify account balances accordingly. Constraints * Each transaction will be in one of the following formats: - Deposit `(\\"D\\", \\"account_type\\", amount)` - Withdraw `(\\"W\\", \\"account_type\\", amount)` * `account_type` can be either \\"savings\\" or \\"checking\\". * The initial balance of both savings and checking accounts is 0. * Amount will be a positive integer no larger than 10^6. * The list of transactions will contain at most 1000 transactions. * Withdrawals that exceed the account balance should be ignored. * If the final balance is non-positive for both accounts, print \\"Both accounts empty\\". Input In the first line, the number of transactions `n` is given. In the next `n` lines, each transaction is given in one of the formats described above. Output After processing all transactions, print the final balances of both accounts. If both accounts have a non-positive balance, print \\"Both accounts empty\\". Examples Input 5 (\\"D\\", \\"savings\\", 500) (\\"D\\", \\"checking\\", 200) (\\"W\\", \\"savings\\", 100) (\\"W\\", \\"checking\\", 300) (\\"W\\", \\"checking\\", 200) Output Savings balance: 400 Checking balance: 0 Input 3 (\\"D\\", \\"checking\\", 150) (\\"W\\", \\"checking\\", 150) (\\"W\\", \\"savings\\", 50) Output Both accounts empty","solution":"def banking_system(transactions): savings_balance = 0 checking_balance = 0 for transaction in transactions: operation, account_type, amount = transaction if operation == \\"D\\": if account_type == \\"savings\\": savings_balance += amount elif account_type == \\"checking\\": checking_balance += amount elif operation == \\"W\\": if account_type == \\"savings\\": if savings_balance >= amount: savings_balance -= amount elif account_type == \\"checking\\": if checking_balance >= amount: checking_balance -= amount if savings_balance <= 0 and checking_balance <= 0: print(\\"Both accounts empty\\") else: print(f\\"Savings balance: {savings_balance}\\") print(f\\"Checking balance: {checking_balance}\\") # Example usage: transactions = [ (\\"D\\", \\"savings\\", 500), (\\"D\\", \\"checking\\", 200), (\\"W\\", \\"savings\\", 100), (\\"W\\", \\"checking\\", 300), (\\"W\\", \\"checking\\", 200) ] banking_system(transactions)"},{"question":"A painting competition involves children drawing on a rectangular canvas. The canvas is of size `N x M`, and it is divided into `1x1` unit squares, each identified with coordinates `(i, j)` where `0 ≤ i < N` and `0 ≤ j < M`. Some of the unit squares contain obstacles. Children have to draw straight lines between different unit squares without passing through any obstacles. Given the coordinates of these obstacles and two pairs of coordinates (start and end points), determine if it is possible to draw a straight line between these two points without crossing any obstacles. A straight line can be either horizontal, vertical, or diagonal at 45 degrees. Input - The first line contains two integers, `N` and `M`, representing the dimensions of the canvas (`1 ≤ N, M ≤ 1000`). - The second line contains two integers, `K`, the number of obstacles (`0 ≤ K ≤ 1000`). - Each of the next `K` lines contains two integers, `o_i` and `o_j` (`0 ≤ o_i < N`, `0 ≤ o_j < M`), representing the coordinates of obstacles. - The next line contains four integers, `x1`, `y1`, `x2`, and `y2` (`0 ≤ x1, x2 < N`, `0 ≤ y1, y2 < M`), representing the coordinates of the start and end points. Output Output \\"YES\\" if it is possible to draw the straight line between the start and end points without crossing any obstacles, otherwise output \\"NO\\". Examples Input 5 5 1 1 2 0 0 4 4 Output NO Input 5 5 0 0 0 4 4 Output YES Input 5 5 2 1 2 3 2 0 0 4 4 Output YES Input 5 5 3 1 2 3 2 2 2 0 0 4 4 Output NO Input 5 5 0 0 0 0 4 Output YES","solution":"def is_straight_line_possible(N, M, K, obstacles, x1, y1, x2, y2): obstacle_set = set((o_i, o_j) for o_i, o_j in obstacles) def check_path(x1, y1, x2, y2): if x1 == x2: step = 1 if y1 < y2 else -1 for y in range(y1, y2 + step, step): if (x1, y) in obstacle_set: return False return True elif y1 == y2: step = 1 if x1 < x2 else -1 for x in range(x1, x2 + step, step): if (x, y1) in obstacle_set: return False return True elif abs(x2 - x1) == abs(y2 - y1): x_step = 1 if x1 < x2 else -1 y_step = 1 if y1 < y2 else -1 for i in range(abs(x2 - x1) + 1): if (x1 + i * x_step, y1 + i * y_step) in obstacle_set: return False return True else: return False return \\"YES\\" if check_path(x1, y1, x2, y2) else \\"NO\\""},{"question":"You are given two integers x and y. You need to determine if they can be represented as the sum of two perfect squares. Specifically, if there exist non-negative integers (a) and (b) such that (x = a^2 + b^2) and (y = c^2 + d^2) where (a, b, c,) and (d) are integers. Write a function `check_sums` that takes two integers (x) and (y) as input, and returns \\"Yes\\" if both integers can be represented as the sum of two perfect squares, and \\"No\\" otherwise. Constraints * (0 leq x, y leq 10^6) Input Two integers (x) and (y) are given on a single line separated by a space. Output Print \\"Yes\\" if both integers (x) and (y) can be represented as the sum of two perfect squares, otherwise print \\"No\\". Examples Input 5 10 Output Yes Input 3 17 Output No","solution":"import math def is_sum_of_two_squares(n): Check if n can be represented as a sum of two perfect squares. for a in range(int(math.isqrt(n)) + 1): b = n - a * a if math.isqrt(b) ** 2 == b: return True return False def check_sums(x, y): Returns \\"Yes\\" if both x and y can be represented as the sum of two perfect squares, otherwise returns \\"No\\". if is_sum_of_two_squares(x) and is_sum_of_two_squares(y): return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a list of N integers. Your task is to divide them into two groups such that the absolute difference between the sums of the two groups is minimized. Output the minimal absolute difference. Constraints * 1 leq N leq 20 * 1 leq A_i leq 1000 * All values in input are integers. Input Input is given from Standard Input in the following format: N A_0 A_1 cdots A_{N-1} Output Print the minimal absolute difference between the sums of the two groups. Examples Input 4 1 6 11 5 Output 1 Input 3 10 20 15 Output 5 Input 5 3 1 4 2 2 Output 0","solution":"def minimal_difference(n, arr): import itertools total = sum(arr) min_diff = total # Initialize with a large number (total is the upper bound) for group_size in range(n + 1): for group in itertools.combinations(arr, group_size): group_sum = sum(group) current_diff = abs(total - 2 * group_sum) if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"You have been given a list of words and you need to determine if there is a chain of words where each successive word is formed by permuting the previous word\'s letters and adding exactly one additional letter. For example, starting with \\"cat\\", you can generate \\"acta\\" by permuting \\"cat\\" and adding an \\"a\\". The length of the chain is defined as the number of words in the sequence, including the starting word. If multiple chains are possible, find the longest one. Input The first line contains an integer N (1 ≤ N ≤ 100,000), representing the number of words in the list. Each of the next N lines contains a single word consisting of only lowercase English letters from \'a\' to \'z\'. The total number of letters in the input will be less than 1,000,000. Output Output a single integer representing the length of the longest possible chain. Example Input 6 a ab abc cad def fdea Output 3 Explanation One possible chain is: 1. a → ab → abc Another possible chain is: 1. a → ab → cad or def Note that adding \\"d\\" to \\"cad\\" or \\"def\\" results in \\"fdea\\", so another chain is possible: 1. cad → fdea or def → fdea Thus, the longest possible chain length is 3.","solution":"def longest_chain(words): from collections import defaultdict def can_form_chain(word1, word2): if len(word2) == len(word1) + 1: char_count = defaultdict(int) for char in word2: char_count[char] += 1 for char in word1: if char_count[char] == 0: return False char_count[char] -= 1 return True return False word_set = set(words) dp = {word: 1 for word in words} words = sorted(words, key=len) for word in words: for next_word in word_set: if can_form_chain(word, next_word): dp[next_word] = max(dp[next_word], dp[word] + 1) return max(dp.values())"},{"question":"In a certain game, players can collect two types of items: Potions and Spells. Every Potion increases the player\'s health by P units, and every Spell increases the player\'s magic points by M units. The player needs at least a certain amount of health H and a certain amount of magic points Mp to proceed to the next level of the game. Write a program to determine whether the player has collected enough health and magic points to proceed to the next level. Constraints * 1 leq P leq 100 * 0 leq M leq 100 * 1 leq num_potions leq 100 * 0 leq num_spells leq 100 * 1 leq H leq 10000 * 0 leq Mp leq 10000 * All values in input are integers. Input Input is given from Standard Input in the following format: P M num_potions num_spells H Mp Output If the player has collected enough health and magic points to proceed to the next level, print `Proceed`; otherwise, print `Stay`. Examples Input 10 5 100 100 500 500 Output Proceed Input 10 0 100 0 1000 1 Output Stay Input 50 50 100 99 5000 5000 Output Proceed","solution":"def can_proceed(P, M, num_potions, num_spells, H, Mp): Returns \'Proceed\' if the player can proceed to the next level, otherwise returns \'Stay\'. total_health = P * num_potions total_magic_points = M * num_spells if total_health >= H and total_magic_points >= Mp: return \'Proceed\' else: return \'Stay\' if __name__ == \\"__main__\\": import sys input = sys.stdin.read() P, M, num_potions, num_spells, H, Mp = map(int, input.strip().split()) print(can_proceed(P, M, num_potions, num_spells, H, Mp))"},{"question":"You are participating in a coding competition where one of the tasks involves analyzing a conversation log from a customer service chat system. The system categorizes messages into three types: \\"Request\\", \\"Complaint\\", and \\"Suggestion\\". Each message type is associated with a unique integer: 1 for \\"Request\\", 2 for \\"Complaint\\", and 3 for \\"Suggestion\\". The conversation log is available for download at the following link: http://download4.example.com/conversation_log.zip. The archive contains a single file named \\"log.txt\\". Each line in the file represents a single message from the conversation. Every message starts with a special identifier, which is an integer that indicates the type of the message. The identifier is followed by the actual text of the message, all on the same line. Format of each line in \\"log.txt\\": <identifier> <message> You need to write a program that calculates the total number of messages for each type. Your program should read the \\"log.txt\\" file and output three integers: the count of \\"Request\\" messages, the count of \\"Complaint\\" messages, and the count of \\"Suggestion\\" messages. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of messages in the log file. Each of the next n lines contains a single message in the described format. Output Print three integers separated by spaces — the number of \\"Request\\" messages, the number of \\"Complaint\\" messages, and the number of \\"Suggestion\\" messages. Example Input ``` 5 1 Can I change my order? 2 The item I received is damaged. 1 What are your working hours? 3 You should offer more payment options. 2 I am not happy with the delivery time. ``` Output ``` 2 2 1 ``` Explanation In the provided example: - There are 2 \\"Request\\" messages (messages with identifier 1). - There are 2 \\"Complaint\\" messages (messages with identifier 2). - There is 1 \\"Suggestion\\" message (a message with identifier 3).","solution":"def analyze_conversation_log(log_lines): Analyzes a list of conversation log lines and returns the count of each message type. Args: log_lines (list of str): The list containing the lines from the conversation log. Returns: tuple: A tuple containing three integers (request_count, complaint_count, suggestion_count). request_count = 0 complaint_count = 0 suggestion_count = 0 for line in log_lines: identifier = int(line.split()[0]) if identifier == 1: request_count += 1 elif identifier == 2: complaint_count += 1 elif identifier == 3: suggestion_count += 1 return (request_count, complaint_count, suggestion_count)"},{"question":"A company wants to create a security system with specific access controls. Each employee has a unique security ID consisting of letters and numbers. Based on the security ID, the system determines their level of access. The rules for determining the access level are as follows: 1. If the security ID contains both letters and numbers, their access level is 3. 2. If the security ID contains only letters, their access level is 2. 3. If the security ID contains only numbers, their access level is 1. 4. If the security ID is empty, the access level is 0. Write a function that takes a list of security IDs and returns a list of corresponding access levels. Input The function should accept a single argument: - A list of strings, `ids` (1 ≤ |ids| ≤ 104), where each string (1 ≤ |string| ≤ 20) represents a unique security ID that consists of upper/lowercase letters and digits. Output The function should return a list of integers where each integer is the access level corresponding to the security ID in the same order. Example Input [\\"user123\\", \\"admin\\", \\"12345\\", \\"user\\", \\"\\"] Output [3, 2, 1, 3, 0] Input [\\"emp01\\", \\"manager\\", \\"42\\", \\"director@\\"] Output [3, 2, 1, 3] Explanation - In the first example, \\"user123\\" contains both letters and numbers, so its access level is 3. \\"admin\\" contains only letters, so its access level is 2. \\"12345\\" contains only numbers, so its access level is 1. \\"user\\" is a mixed-type input still treated as type 3 because it contains at least one letter and one number. The last entry is empty, so its access level is 0.","solution":"def access_levels(ids): Returns a list of access levels corresponding to the given security IDs. Args: ids: List of strings where each string represents a security ID. Returns: List of integers representing the access levels. result = [] for id in ids: if not id: result.append(0) elif any(char.isdigit() for char in id) and any(char.isalpha() for char in id): result.append(3) elif all(char.isalpha() for char in id): result.append(2) elif all(char.isdigit() for char in id): result.append(1) else: result.append(3) # Any other case with special characters included with letters/numbers return result"},{"question":"You are given an integer array nums and an integer k. The task is to find the kth smallest element in the sorted order of the array. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n), where n is the number of elements in the array and k is the position of the element to find in the sorted order. The second line contains n integers (1 ≤ nums[i] ≤ 10^9) representing the elements of the array. Output Output a single integer — the kth smallest element in the sorted order of the array. Note You need to find the kth smallest element in the sorted array constructed from the input array. Examples Input 5 2 4 7 1 3 9 Output 3 Input 6 4 1 5 2 7 3 6 Output 5 Input 3 1 9 8 7 Output 7","solution":"def kth_smallest_element(nums, k): Returns the kth smallest element in sorted order of the array. # Sort the array nums.sort() # Return the (k-1)th element (0-based index) return nums[k - 1]"},{"question":"Write a program that reads the dimensions and elements of a square matrix ( A ) and computes its transpose matrix ( A^T ). The transpose of a matrix is obtained by swapping its rows and columns. Specifically, the element ( a_{ij} ) in the original matrix becomes the element ( a_{ji} ) in the transpose matrix. Note * The matrix is guaranteed to be square, i.e., the number of rows is equal to the number of columns. Constraints * ( 1 leq n leq 100 ) * ( 0 leq a_{ij} leq 10000 ) Input The first line contains an integer ( n ), the dimension of the square matrix. The following ( n ) lines each contain ( n ) integers, representing the elements of the matrix ( A ). Output Print the elements of the transpose matrix ( A^T ). Print a single space character between adjacent elements. Example Input 3 1 2 3 4 5 6 7 8 9 Output 1 4 7 2 5 8 3 6 9","solution":"def transpose_matrix(matrix): Given a square matrix, returns its transpose. n = len(matrix) transpose = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): transpose[j][i] = matrix[i][j] return transpose def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) matrix = [] index = 1 for i in range(n): row = list(map(int, data[index:index + n])) index += n matrix.append(row) transpose = transpose_matrix(matrix) for row in transpose: print(\\" \\".join(map(str, row))) if __name__ == \\"__main__\\": main()"},{"question":"You are given a sequence of integers. Find the length of the longest subsequence which can be rearranged to form a contiguous sequence of integers (i.e., the integers can be arranged to form a sequence where each number is exactly one more than the previous number). Input The first line of the input will contain a single integer T, the number of test cases. Then there will be T descriptions of the test cases. Each description starts with a line containing a single integer N, indicating the length of the sequence. The next line contains N integers which represent the sequence. Output For each test case, display the length of the longest subsequence that can be rearranged to form a contiguous sequence. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 Each integer in the sequence will be between 1 and 10^9, inclusive. Sample Input 2 6 1 6 3 5 7 2 4 10 12 11 15 Sample Output 3 3 Explanation For the 1st test case, the longest contiguous subsequence is [1, 2, 3] or [5, 6, 7], which has the length of 3. For the 2nd test case, the longest contiguous subsequence is [10, 11, 12], which has the length of 3.","solution":"def find_longest_subsequence_length(T, test_cases): Finds the length of the longest subsequence that can be rearranged to form a contiguous sequence. results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] if N == 0: results.append(0) continue # Use a set to remove duplicates and then convert to sorted list sequence_set = set(sequence) sorted_sequence = sorted(sequence_set) max_length = 1 current_length = 1 for j in range(1, len(sorted_sequence)): if sorted_sequence[j] == sorted_sequence[j - 1] + 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 results.append(max_length) return results"},{"question":"Petya recently started learning algorithms and he was given a task to identify all prime numbers within a given range. As part of this task, he needs to implement an algorithm that finds all prime numbers from a to b (inclusive). A number is prime if it is greater than 1 and has no positive divisors other than 1 and itself. The range [a, b] will always be such that 1 ≤ a ≤ b ≤ 10^6 and the difference b - a will not exceed 10^5. Petya is overwhelmed with the problem and has asked for your help. Write a program that takes an integer t (the number of test cases), and for each test case, outputs all prime numbers in the specified range [a, b]. Input The first line contains the integer t (1 ≤ t ≤ 10^2). Then t test cases follow. Each test case consists of a single line containing two integers a and b (1 ≤ a ≤ b ≤ 10^6; b - a ≤ 10^5). Output For each test case, print all prime numbers in the range [a, b] (inclusive), each test case\'s result on a new line. If there are no prime numbers in the range, print an empty line. Example Input 3 2 10 11 20 22 29 Output 2 3 5 7 11 13 17 19 23 29 Note For the first test case, the prime numbers between 2 and 10 are 2, 3, 5, and 7. For the second test case, the prime numbers between 11 and 20 are 11, 13, 17, and 19. For the third test case, the prime numbers between 22 and 29 are 23 and 29.","solution":"def sieve(n): Sieve of Eratosthenes finds all primes up to n is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_numbers = [] for p in range(2, n + 1): if is_prime[p]: prime_numbers.append(p) return prime_numbers def find_primes_in_range(a, b): Finds all prime numbers in the inclusive range [a, b] if a < 2: a = 2 sieve_limit = int(b**0.5) + 1 primes_up_to_sqrt_b = sieve(sieve_limit) is_prime_in_range = [True] * (b - a + 1) for prime in primes_up_to_sqrt_b: # Find the minimum number in the range [a, b] that is # a multiple of prime and greater than or equal to prime^2 start = max(prime*prime, (a + prime - 1) // prime * prime) for j in range(start, b + 1, prime): is_prime_in_range[j - a] = False primes_in_range = [num for num, is_prime in enumerate(is_prime_in_range, start=a) if is_prime] return primes_in_range def display_prime_ranges(test_cases): results = [] for (a, b) in test_cases: primes = find_primes_in_range(a, b) results.append(\\" \\".join(map(str, primes))) return results"},{"question":"A company wants to manage the working hours of their employees in an efficient way. Each employee\'s working hours for a week are recorded and they need to determine which employees have worked overtime. Overtime is defined as working more than 40 hours in a week. Write a program that reads the number of employees followed by the weekly working hours of each employee. The program should then output the IDs of employees who have worked overtime. Input The input starts with an integer `N` (1 ≤ N ≤ 50), which represents the number of employees. This is followed by `N` lines, each containing an employee ID (a string consisting of alphanumeric characters) and 7 integers representing the number of hours worked each day from Monday to Sunday. Output Output the employee IDs of those who have worked more than 40 hours in a week, one per line. If no employees have worked overtime, print `NO OVERTIME`. Example Input 4 E01 8 8 8 8 8 0 0 E02 7 7 7 7 7 7 7 E03 6 6 6 6 6 6 1 E04 9 9 9 9 9 0 0 Output E01 E02 Explanation - Employee E01 has worked 8 + 8 + 8 + 8 + 8 + 0 + 0 = 40 hours, which is not overtime. - Employee E02 has worked 7 + 7 + 7 + 7 + 7 + 7 + 7 = 49 hours, which is overtime. - Employee E03 has worked 6 + 6 + 6 + 6 + 6 + 6 + 1 = 37 hours, which is not overtime. - Employee E04 has worked 9 + 9 + 9 + 9 + 9 + 0 + 0 = 45 hours, which is overtime. Hence, the output is E02 and E04, indicating these employees have worked overtime.","solution":"def find_overtime_employees(employee_data): Given a list of employee working hours for a week, returns the IDs of employees who worked overtime (> 40 hours). overtime_employees = [] for data in employee_data: employee_id = data[0] weekly_hours = data[1:] total_hours = sum(weekly_hours) if total_hours > 40: overtime_employees.append(employee_id) if not overtime_employees: return [\\"NO OVERTIME\\"] return overtime_employees"},{"question":"Tournament Tree Problem Problem: You are given a binary tournament that takes place in a single-elimination format. Each player has a unique skill rating from 1 to N. Players with higher skill ratings always win against players with lower skill ratings. The tournament proceeds as follows: 1. Players are initially paired up in the order given. 2. The winner of each match from the first round advances to the next round. 3. In the next round, the winners are again paired up in the order they advanced. This process repeats until only one player remains, who is declared the champion. You are required to simulate this tournament and determine the final champion based on the initial pairing. Constraints: The input satisfies the following conditions: - 2 ≤ N ≤ 10^5 - N will always be a power of 2. Input: The input is given in the following format: N skill1 skill2 ... skillN The integer N is given on the first line. N integers skill1, skill2, ..., skillN are given on the second line, separated by spaces. Output: Print the skill rating of the champion. Examples Input: 4 3 1 4 2 Output: 4 Input: 8 1 2 3 4 5 6 7 8 Output: 8 Explanation: Example 1: 1. In the first round, players with skill ratings 3 vs 1 and 4 vs 2 compete. Players with skills 3 and 4 win. 2. In the next round, the players 3 vs 4 compete, and player 4 wins. 3. Player 4 is the champion. Example 2: 1. In the first round, the players 1 vs 2, 3 vs 4, 5 vs 6, and 7 vs 8 compete. Players with skills 2, 4, 6, and 8 win. 2. In the second round, players 2 vs 4 and 6 vs 8 compete. Players with skills 4 and 8 win. 3. In the final round, players 4 vs 8 compete, and player 8 wins. 4. Player 8 is the champion.","solution":"def find_tournament_champion(N, skills): Simulate the tournament and find the champion\'s skill rating. :param N: int - the number of players :param skills: List[int] - the skill ratings of the players :return: int - the skill rating of the champion while len(skills) > 1: next_round = [] for i in range(0, len(skills), 2): next_round.append(max(skills[i], skills[i+1])) skills = next_round return skills[0]"},{"question":"John is organizing a marathon that will take place along a straight line road from point x = 0 to point x = n. To make the race more interesting, he has decided to place a certain number of water stations along the route for the runners to hydrate. There are m water stations, each located at specific positions along the route (denoted as w1, w2, ..., wm where 0 < wi < n). The marathon consists of s stages, and the runners must complete each stage without running out of water. Each runner starts with an empty water bottle that holds up to c liters of water. While passing by a water station, a runner can fill their water bottle to its full capacity. The runner requires exactly 1 liter of water per unit distance. You need to determine the minimum number of stops a runner needs to make at the water stations to complete the marathon, ensuring that at every stage between two water stations, the runner has enough water to reach the next one. Input The first line contains four integers n, c, m, s (1 ≤ n ≤ 10^6, 1 ≤ c, m, s ≤ 10^9) — the endpoint of the marathon, the capacity of the water bottle, the number of water stations, and the number of stages. The second line contains m integers w1, w2, ..., wm (0 < wi < n) — the positions of the water stations along the route in ascending order. Output Print the minimum number of stops a runner needs to make at the water stations to complete the marathon. If it is impossible for the runner to complete the marathon, print -1. Examples Input 10 3 3 2 2 5 8 Output 3 Input 10 7 2 3 3 9 Output 1 Input 10 5 3 2 2 4 7 Output 2 Note In the first example, the runner makes stops at positions 2, 5, and 8. In the second example, the runner can fill the bottle at position 3, which is enough to reach the finish line. In the third example, the runner makes stops at positions 4 and 7.","solution":"def min_stops(n, c, m, s, water_stations): # Start initially from 0 distance current_position = 0 stops = 0 i = 0 # Add the final destination as a virtual water station water_stations.append(n) while current_position < n: last_position = current_position # Try to go maximum distance without refilling while i < len(water_stations) and water_stations[i] - current_position <= c: last_position = water_stations[i] i += 1 # If we can\'t move any further if last_position == current_position: return -1 # Update the current position to the furthest we can reach with current water current_position = last_position # If the runner hasn\'t reached the end, increment the number of stops if current_position < n: stops += 1 return stops"},{"question":"Given an undirected graph with N nodes and M edges, determine if it is possible to divide the graph\'s nodes into two disjoint sets such that there are no edges within the same set. Constraints * 1 ≤ N ≤ 1000 * 0 ≤ M ≤ 5000 * 1 ≤ u, v ≤ N (For each edge (u, v)) Input The input is given from Standard Input in the following format: ``` N M u1 v1 u2 v2 ... uM vM ``` Output Print \\"YES\\" if it is possible to divide the nodes into two sets as described, otherwise print \\"NO\\". Examples Input ``` 3 3 1 2 1 3 2 3 ``` Output ``` NO ``` Input ``` 4 4 1 2 1 3 2 4 3 4 ``` Output ``` YES ```","solution":"def is_bipartite_graph(n, edges): from collections import deque # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) # 0: Uncolored, 1: Color 1, -1: Color 2 color = {i: 0 for i in range(1, n + 1)} def bfs(start): queue = deque([start]) color[start] = 1 while queue: node = queue.popleft() current_color = color[node] for neighbor in graph[node]: if color[neighbor] == 0: color[neighbor] = -current_color queue.append(neighbor) elif color[neighbor] == current_color: return False return True for node in range(1, n + 1): if color[node] == 0: # Unvisited if not bfs(node): return \'NO\' return \'YES\' if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) edges = [(int(data[2 + i * 2]), int(data[2 + i * 2 + 1])) for i in range(m)] print(is_bipartite_graph(n, edges))"},{"question":"You are given the task to design a car rental system for a car rental company. The system should be able to handle multiple cars and customer reservations and ensure that no car is double-booked. Each car can only be rented once at any given time. Your task is to implement the booking system with the following requirements: * Add a new car to the rental system. * Check the availability of a car for a given time interval. * Make a reservation for a car for a given time interval, ensuring no double-booking. Input The first input line contains a single integer t — the number of operations (1 ≤ t ≤ 10^5). Each of the next t lines contains a single operation. The operations can be: * `addCar` followed by an integer carID (1 ≤ carID ≤ 10^5) - Adding a new car to the system. * `checkAvailability` followed by an integer carID, an integer start, and an integer end (1 ≤ start < end ≤ 10^9) - Check the availability of the car with carID for the period from start to end. Print `YES` or `NO` for this operation. * `makeReservation` followed by an integer carID, an integer start, and an integer end (1 ≤ start < end ≤ 10^9) - Make a reservation for the car with carID for the period from start to end. If the reservation is possible (no double-booking), print `RESERVED`, otherwise print `UNAVAILABLE`. Output For each `checkAvailability` and `makeReservation` operation, print the appropriate result. Example Input 8 addCar 1 addCar 2 makeReservation 1 10 20 checkAvailability 1 15 25 checkAvailability 1 20 30 makeReservation 2 15 25 makeReservation 1 25 35 checkAvailability 1 25 35 Output RESERVED NO YES RESERVED RESERVED YES Note In the given example, the car with ID 1 is successfully reserved from 10 to 20. Checking availability from 15 to 25 returns `NO` as it overlaps with the existing reservation, while checking from 20 to 30 returns `YES`. The reservation for car with ID 2 from 15 to 25 is successful, and the subsequent reservation for car with ID 1 from 25 to 35 is also successful since it does not overlap with the previous reservation. Finally, checking availability of car with ID 1 from 25 to 35 confirms that the reservation made just before is recorded properly.","solution":"class CarRentalSystem: def __init__(self): self.cars = {} def addCar(self, carID): if carID not in self.cars: self.cars[carID] = [] def checkAvailability(self, carID, start, end): if carID not in self.cars: return \\"NO\\" for (s, e) in self.cars[carID]: if not (end <= s or start >= e): return \\"NO\\" return \\"YES\\" def makeReservation(self, carID, start, end): if self.checkAvailability(carID, start, end) == \\"NO\\": return \\"UNAVAILABLE\\" self.cars[carID].append((start, end)) return \\"RESERVED\\""},{"question":"Karina and her brother love playing with blocks that have numbers written on them. They stack the blocks to form the tallest tower possible with certain conditions. Each block can only be placed on top of another block if the number on the top block is greater than or equal to the number on the bottom block. However, Karina likes to make her towers as tall as possible, while her brother likes them to be as short as possible. Given an array of positive integers representing the numbers on the blocks, determine the maximum and minimum heights of the tower they can create. Input The first line contains a single integer n (1 ≤ n ≤ 1000) representing the number of blocks. The second line contains n space-separated integers representing the numbers written on the blocks. Each number is between 1 and 1000. Output Print two lines. The first line should contain the maximum height of the tower. The second line should contain the minimum height of the tower. Examples Input 5 4 3 2 6 7 Output 5 1 Input 3 10 20 10 Output 3 2 Explanation In the first example, any arrangement of the blocks will form a tower with height 5 because there are 5 blocks and all can be placed on top of each other. The shortest tower is of height 1 because any single block can form a valid tower. In the second example, the longest tower has height 3 using all blocks stacked such as [10, 10, 20]. The shortest tower is of height 2 because the remaining blocks [10, 20] can be placed in ascending order.","solution":"def max_min_tower_heights(n, blocks): Returns the maximum and minimum heights of the tower that can be built. # The maximum height is simply the number of blocks max_height = n # For the minimum height, we count the unique numbers in the blocks min_height = len(set(blocks)) return max_height, min_height # Example usage: # n = 5 # blocks = [4, 3, 2, 6, 7] # print(max_min_tower_heights(n, blocks)) # Output should be (5, 5)"},{"question":"Lisa has recently taken an interest in cryptography. She is developing a simple encryption algorithm where each letter in a word is shifted a certain number of places down the alphabet. If the shift goes past \'z\', it wraps around to the beginning of the alphabet. She needs help to find out what the encrypted word will look like for various given inputs. Write a function that accepts a list of words and a corresponding list of integers representing the shift values for each word. Each word should be encrypted using the Caesar cipher technique, where each letter in the word is shifted by the given integer value. Input: The first line contains an integer N (1 ≤ N ≤ 100), the number of words. Each of the next N lines contains a single word (length between 1 and 100) and an integer S (0 ≤ S ≤ 25), the shift value. Each word contains only lowercase letters. Output: The function should output N new words, each representing the encrypted version of the corresponding input word. Example Input: 3 abc 1 xyz 3 hello 5 Example Output: bcd abc mjqqt Explanation: - For the first word \\"abc\\" with a shift of 1, each letter is shifted one place forward: \'a\' -> \'b\', \'b\' -> \'c\', \'c\' -> \'d\', resulting in \\"bcd\\". - For the second word \\"xyz\\" with a shift of 3, \'x\' -> \'a\', \'y\' -> \'b\', \'z\' -> \'c\', resulting in \\"abc\\". - For the third word \\"hello\\" with a shift of 5, \'h\' -> \'m\', \'e\' -> \'j\', \'l\' -> \'q\', \'o\' -> \'t\', resulting in \\"mjqqt\\".","solution":"def encrypt_words(words, shifts): Encrypts a list of words using the Caesar cipher technique with respective shift values. :param words: List of words to be encrypted. :param shifts: List of shift values for each word. :return: List of encrypted words. encrypted_words = [] for word, shift in zip(words, shifts): encrypted_word = [] for char in word: # Calculate the new character after shifting new_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) encrypted_word.append(new_char) encrypted_words.append(\'\'.join(encrypted_word)) return encrypted_words"},{"question":"Problem: Vikram is fond of creating patterns with numbers. He now wants to create a special sequence where each number in the sequence is the sum of the two preceding ones, but with a twist. Instead of starting with two fixed numbers, he wants to start with two numbers that are defined by the user. Given two initial numbers `a` and `b`, generate the first `N` numbers of Vikram\'s special sequence and print them. The sequence is defined as follows: - The first number is `a` - The second number is `b` - For every subsequent number, it is the sum of the two preceding numbers Input The first line of input consists of an integer `T`, the number of test cases. The next T lines each consist of three integers `a`, `b`, and `N`. Output For each test case, print the first `N` numbers of Vikram\'s special sequence. Each number should be separated by a single space. Print the result for each test case on a new line. Constraints: - 1 ≤ T ≤ 5 - 1 ≤ a, b ≤ 100 - 1 ≤ N ≤ 20 SAMPLE INPUT 3 1 1 5 2 3 6 5 8 4 SAMPLE OUTPUT 1 1 2 3 5 2 3 5 8 13 21 5 8 13 21","solution":"def generate_sequence(a, b, N): Generate the first N numbers of the special sequence starting with a and b. sequence = [a, b] for _ in range(2, N): sequence.append(sequence[-1] + sequence[-2]) return sequence def process_test_cases(T, test_cases): Process T number of test cases and return the results. results = [] for case in test_cases: a, b, N = case sequence = generate_sequence(a, b, N) results.append(sequence) return results"},{"question":"A large company employs a matrix of binary sensors to monitor various environmental factors in their main server room. The matrix is represented as a 2D grid where each cell contains either a 0 (inactive sensor) or a 1 (active sensor). The company wants to identify the largest rectangular subgrid where every cell contains a 1. To help the company, write a program that determines the area of the largest rectangle containing only 1s in the given binary matrix. Input The first line contains two integers m and n (1 ≤ m, n ≤ 2000) representing the number of rows and columns in the matrix. Next m lines each contain n integers (0 or 1), representing the matrix. Output Print a single integer representing the area of the largest rectangle containing only 1s. Example Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6 Note In the given example, the largest rectangle containing only 1s has an area of 6 and is formed by the subgrid from row 2, column 3 to row 3, column 5.","solution":"def maximalRectangle(matrix): if not matrix: return 0 m = len(matrix) n = len(matrix[0]) max_area = 0 heights = [0] * n for i in range(m): for j in range(n): if matrix[i][j] == 1: heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 for i, h in enumerate(heights + [0]): while stack and heights[stack[-1]] >= h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area # Example usage # matrix = [ # [1, 0, 1, 0, 0], # [1, 0, 1, 1, 1], # [1, 1, 1, 1, 1], # [1, 0, 0, 1, 0] # ] # print(maximalRectangle(matrix)) # Output: 6"},{"question":"You are working on a new software system, and one of your responsibilities is to implement the event scheduler. An event can be scheduled on a specific day and has a start time and end time. Your task is to find out if a new event can be added to the schedule without causing any time conflicts with existing events. Each day consists of 24 hours, starting from 00:00 to 23:59. An event is defined by its start time and end time in the format \\"HH:mm\\". An event where start time is equal to end time means the event lasts for one minute. Create a function `can_schedule(day_events, new_event)` that takes two parameters: - `day_events`: a list of tuples where each tuple contains two strings representing the start and end time of an existing event. - `new_event`: a tuple of two strings representing the start and end time of the new event to be scheduled. The function should return `True` if the new event can be added to the day\'s schedule without overlapping other events, and `False` otherwise. Input - `day_events`: A list of tuples with each tuple containing two strings representing the start and end time of an event (formatted as \\"HH:mm\\"). - `new_event`: A tuple containing two strings representing the start and end time of the new event (formatted as \\"HH:mm\\"). Output - Return `True` if the new event can be scheduled without any time conflict. Return `False` otherwise. Example Input: ``` day_events = [(\\"09:00\\", \\"10:00\\"), (\\"11:30\\", \\"12:30\\"), (\\"14:00\\", \\"15:00\\")] new_event = (\\"12:30\\", \\"13:00\\") ``` Output: ``` True ``` Input: ``` day_events = [(\\"09:00\\", \\"10:00\\"), (\\"10:00\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\")] new_event = (\\"10:30\\", \\"11:15\\") ``` Output: ``` False ``` Function Signature: ```python def can_schedule(day_events: List[Tuple[str, str]], new_event: Tuple[str, str]) -> bool: ```","solution":"def time_to_minutes(time_str): Convert time string in \\"HH:mm\\" format to minutes since 00:00. hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def can_schedule(day_events, new_event): Check if the new event can be scheduled without overlapping existing events. new_start, new_end = new_event new_start_minutes = time_to_minutes(new_start) new_end_minutes = time_to_minutes(new_end) for start, end in day_events: start_minutes = time_to_minutes(start) end_minutes = time_to_minutes(end) # Check for overlap if not (new_end_minutes <= start_minutes or new_start_minutes >= end_minutes): return False return True"},{"question":"Problem A pharmaceutical company is working on a sequence of capsules, where each capsule contains a unique dosage of a drug. The dosages of the capsules are represented as an array of integers. The company has discovered that some capsules can be toxic if taken with other specific dosages, and thus needs to identify and avoid these combinations. Given an array of capsule dosages and a list of pairings that represent toxic combinations, your task is to determine the length of the longest subsequence of capsules that can be taken safely without including any toxic combination. Constraints * 1 ≤ n ≤ 20 * 1 ≤ dosages[i] ≤ 1000 * 0 ≤ m ≤ 50 * 1 ≤ toxic_pairs[j][0], toxic_pairs[j][1] ≤ 1000 Input The first line contains an integer n, the number of capsule dosages. The second line contains n integers, the dosages of the capsules. The third line contains an integer m, the number of toxic pairs. The next m lines contain two integers each, representing a toxic pair of dosages. Output Output a single integer representing the length of the longest subsequence of capsules that can be taken safely. Examples Input 5 3 5 7 8 10 3 3 5 7 10 8 10 Output 3 Input 6 1 2 3 4 5 6 2 2 3 4 5 Output 4","solution":"from itertools import combinations def longest_safe_subsequence(n, dosages, m, toxic_pairs): toxic_set = set((min(pair), max(pair)) for pair in toxic_pairs) def is_safe(subseq): for i in range(len(subseq)): for j in range(i + 1, len(subseq)): if (min(subseq[i], subseq[j]), max(subseq[i], subseq[j])) in toxic_set: return False return True max_length = 0 for length in range(1, n + 1): for subseq in combinations(dosages, length): if is_safe(subseq): max_length = max(max_length, length) return max_length"},{"question":"A company wants to organize a team-building event for its employees, where employees will be paired to complete a set of tasks. Each pair should consist of two employees with different skill levels to maximize the event’s effectiveness. An employee\'s skill level is represented as an integer. Employees are represented as a list of skills where the ith element is the skill level of the ith employee. Due to limited resources, the event management wants to know if it is possible to pair all the employees such that no two employees in a pair have the same skill level. Input The first line contains one integer n (1 ≤ n ≤ 100,000) — the number of employees. The second line contains n space-separated integers ai (0 ≤ ai ≤ 1,000,000,000) — the skill levels of employees. Output Print \\"Yes\\" if it’s possible to pair all the employees such that no two employees in a pair have the same skill level, or \\"No\\" otherwise. Examples Input 6 1 2 3 4 5 6 Output Yes Input 4 1 1 2 2 Output Yes Input 3 1 2 2 Output No Input 5 3 3 3 3 3 Output No Note Explanation of the first test case: It’s possible to pair up the employees as (1,4), (2,5), and (3,6). Explanation of the second test case: It’s possible to pair up the employees as (1,2) and (1,2), even though the pairs will be identical, each pair has different skills.","solution":"def can_pair_employees(skill_levels): Determine if it’s possible to pair all the employees such that no two employees in a pair have the same skill level. Parameters: skill_levels (list of int): List of skill levels of the employees Returns: str: \\"Yes\\" if it\'s possible to pair employees as described, \\"No\\" otherwise from collections import Counter skill_counts = Counter(skill_levels) # If any skill level appears more than half the number of employees, it\'s not possible to pair everyone n = len(skill_levels) max_count = max(skill_counts.values()) if max_count > n // 2: return \\"No\\" else: return \\"Yes\\""},{"question":"Given an array `arr` with `n` integers (1 ≤ |n| ≤ 10^6), you need to determine the smallest subarray size that contains at least one of the maximum and one of the minimum elements of the array. Your task is to find this smallest subarray and print its length. Input The first line contains an integer `n` (1 ≤ n ≤ 10^6) -- the length of the array. The second line contains `n` integers `arr_1, arr_2, ..., arr_n` (1 ≤ arr_i ≤ 10^9) -- the elements of the array. Output Print a single integer -- the length of the smallest subarray that contains at least one maximum element and one minimum element of the array. Examples Input 5 1 5 2 5 1 Output 2 Input 6 7 1 7 1 7 1 Output 2 Input 4 4 4 4 4 Output 1 Note In the first example, the smallest subarray that contains at least one maximum element (which is 5) and one minimum element (which is 1) is of length 2, for example the subarray [1, 5]. In the second example, the smallest subarray that contains at least one maximum element (which is 7) and one minimum element (which is 1) is of length 2, for example the subarray [7, 1]. In the third example, the maximum and minimum elements are the same (which is 4), so the smallest possible subarray is of length 1.","solution":"def smallest_subarray_length(n, arr): minimum = min(arr) maximum = max(arr) if minimum == maximum: return 1 min_indices = [] max_indices = [] for i in range(n): if arr[i] == minimum: min_indices.append(i) if arr[i] == maximum: max_indices.append(i) min_indices.reverse() max_indices.reverse() min_len = float(\'inf\') for mi in min_indices: for mj in max_indices: if abs(mi - mj) + 1 < min_len: min_len = abs(mi - mj) + 1 return min_len"},{"question":"Alice loves training her dog, Max, using a series of commands. One of the advanced commands she has developed is \\"Palindrome Command\\". In this command, she guides Max to recognize sequences that form palindromes. To make the training more challenging, she only uses sequences that consist of the character \\"A\\" and can contain wildcards represented by the character \\"?\\". A wildcard can be replaced by either \\"A\\" or \\"B\\". Alice needs your help to evaluate the training sequences she provides to Max. The goal is to determine if there exists at least one replacement for each wildcard such that the sequence becomes a palindrome purely consisting of the character \\"A\\". Design a function `is_palindromic_sequence(n, queries)` to help Alice with her training. The function should take in an integer `n` (number of queries) and an array of strings `queries` (containing the sequences for each query). For each sequence in `queries`, return a Boolean value indicating whether it is possible to convert the sequence into a palindrome consisting only of the character \\"A\\". **Input:** - An integer `n` representing the number of queries. - An array `queries` containing `n` strings, each string representing a sequence. **Output:** - An array of Boolean values. Each value should be `True` if it is possible to replace the wildcards such that the sequence becomes a palindrome consisting only of the character \\"A\\"; otherwise, `False`. **Constraints:** - 1 ≤ n ≤ 10^5 - 1 ≤ length of each sequence ≤ 10^5 - Total length of all sequences combined ≤ 10^6 **Example Input:** ``` 3 [\\"A?A\\", \\"AA?B\\", \\"?A?\\"] ``` **Example Output:** ``` [True, False, True] ``` **Explanation:** - For the sequence \\"A?A\\", replacing \\"?\\" with \\"A\\" results in \\"AAA\\", which is a palindrome. - For the sequence \\"AA?B\\", it is impossible to replace \\"?\\" with \\"A\\" to make it a palindrome consisting only of \\"A\\". - For the sequence \\"?A?\\", replacing both \\"?\\"s with \\"A\\" results in \\"AAA\\", which is a palindrome.","solution":"def is_palindromic_sequence(n, queries): For each sequence in queries, determine if it can be converted to a palindrome consisting only of \\"A\\" by replacing wildcards (\\"?\\") with \\"A\\". :param int n: Number of queries :param list queries: List of sequences to be checked :return: List of boolean values, each indicating if the sequence can be converted to a valid palindrome :rtype: list of bool results = [] for seq in queries: can_be_palindrome = True length = len(seq) # Compare from the two ends of the string moving toward the center for i in range(length // 2): left_char = seq[i] right_char = seq[length - 1 - i] if left_char == \'A\' and right_char == \'A\': continue elif left_char == \'?\' or right_char == \'?\': continue else: can_be_palindrome = False break results.append(can_be_palindrome) return results"},{"question":"You are given a string representation of a Roman numeral. Your task is to convert this Roman numeral into an integer. Roman numerals are represented by seven unique symbols: I, V, X, L, C, D, and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given a string S representing a Roman numeral, convert S to an integer. Input Input will be a single string S containing a Roman numeral, with length at most 15 characters. The string is guaranteed to be a valid Roman numeral representation in the range from 1 to 3999. Output Output a single integer representing the converted value of the given Roman numeral. Examples Input III Output 3 Input IV Output 4 Input IX Output 9 Input LVIII Output 58 Input MCMXCIV Output 1994","solution":"def roman_to_integer(s): Convert a Roman numeral to an integer. roman_values = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} total = 0 previous_value = 0 for char in reversed(s): current_value = roman_values[char] if current_value < previous_value: total -= current_value else: total += current_value previous_value = current_value return total"},{"question":"You are given a grid of cells with n rows and m columns. Each cell is either empty (represented by \'.\') or contains a block (represented by \'#\'). You need to find out if there exists a path from the top-left cell (1, 1) to the bottom-right cell (n, m) such that you can move only to adjacent cells either rightward, leftward, upward, or downward, and can destroy at most one block to facilitate the path. Writing a program to solve this problem for multiple datasets. Input The first line contains t, the number of datasets. Each of the following t sections starts with a line containing two integers n and m (1 ≤ n, m ≤ 50), the number of rows and columns in the grid respectively. The next n lines each contain a string of m characters, representing the grid. Output For each dataset, output \\"YES\\" if there exists a path from the top-left cell to the bottom-right cell, destroying at most one block, and \\"NO\\" otherwise. Example Input 2 3 3 .#. .#. ... 4 4 .... ..#. .#.. .. Output YES YES","solution":"def is_path_possible(grid, n, m): from collections import deque def bfs(start, end, destroy): queue = deque([(start, destroy)]) visited = set((start, destroy)) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: (x, y), can_destroy = queue.popleft() if (x, y) == end: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: if grid[nx][ny] == \'.\' and ((nx, ny), can_destroy) not in visited: visited.add(((nx, ny), can_destroy)) queue.append(((nx, ny), can_destroy)) elif grid[nx][ny] == \'#\' and can_destroy and ((nx, ny), False) not in visited: visited.add(((nx, ny), False)) queue.append(((nx, ny), False)) return False start = (0, 0) end = (n - 1, m - 1) return bfs(start, end, True) def find_path(t, datasets): results = [] for i in range(t): n, m = datasets[i][0] grid = datasets[i][1] if is_path_possible(grid, n, m): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Building Bridges You are given a list of cities positioned along a straight line (x-axis). Each city is represented by a unique integer coordinate. You need to build bridges between pairs of cities such that each bridge connects exactly two cities. You must ensure that the bridges do not overlap, i.e., no two bridges share any common coordinate along the x-axis. Your task is to find the maximum number of bridges that can be built under the given constraints. Input The input consists of a single test case of the following format. m x_1 x_2 ... x_m The first line contains an integer m (2 leq m leq 100 000), the number of cities. The following m lines each contain a single integer x_i (-10^9 leq x_i leq 10^9), the coordinate of the i-th city. It is ensured that all coordinates are distinct. Output Output a single integer, the maximum number of non-overlapping bridges that can be built. Sample Input 1 5 1 5 3 9 7 Sample Output 1 2 Explanation In the given example, you can build a bridge between cities at coordinates (1, 5) and (3, 9), or (1, 5) and (3, 7), but not both due to overlap constraints. One optimal solution is to pair (1, 5) and (7, 9). Example Input 5 1 5 3 9 7 Output 2","solution":"def max_non_overlapping_bridges(m, coordinates): Returns the maximum number of non-overlapping bridges that can be built. Each bridge connects exactly two cities at distinct coordinates. # Sort coordinates coordinates.sort() # Maximum bridges is simply half of the number of cities (each coordinated paired) return m // 2"},{"question":"A park is being designed in a city, and it needs a simple management system to track trees planted in different sections. The city officials need a program that can manage this tree planting task efficiently. You are tasked with creating a system that can add and remove trees in specific sections of the park and query the total number of trees in a given section after several operations. **Input:** - The first line of input contains an integer `N`, the number of initial sections in the park, numbered from 1 to N. - The second line contains `N` integers, where the `i-th` integer denotes the initial number of trees in the `i-th` section. - The third line contains an integer `Q`, the number of operations to be performed. - The next `Q` lines contain the operations. Each operation is in one of the following three forms: - `\\"ADD x y\\"`: Add `y` trees to section `x`. - `\\"REMOVE x y\\"`: Remove `y` trees from section `x`, without allowing the number of trees to go negative. - `\\"QUERY x\\"`: Output the current number of trees in section `x`. **Output:** - For each `\\"QUERY x\\"` operation, output the current number of trees in section `x` on a new line. **Example:** **Input:** ``` 3 5 10 15 6 ADD 1 5 REMOVE 2 10 QUERY 1 QUERY 2 ADD 3 10 QUERY 3 ``` **Output:** ``` 10 0 25 ``` **Explanation:** Initially, there are 5, 10, and 15 trees in section 1, 2, and 3 respectively. 1. After the `\\"ADD 1 5\\"` operation, section 1 has 10 trees. 2. After the `\\"REMOVE 2 10\\"` operation, section 2 has 0 trees (as we cannot have a negative number of trees). 3. `\\"QUERY 1\\"` outputs the current number of trees in section 1 which is 10. 4. `\\"QUERY 2\\"` outputs the current number of trees in section 2 which is 0. 5. After the `\\"ADD 3 10\\"` operation, section 3 has 25 trees. 6. `\\"QUERY 3\\"` outputs the current number of trees in section 3 which is 25.","solution":"class Park: def __init__(self, initial_trees): Initializes the park with the given initial number of trees in sections. :param initial_trees: List of integers representing the initial number of trees in each section. self.sections = initial_trees def add_trees(self, section, number): Add trees to a specific section. :param section: The section number (1-based index). :param number: The number of trees to add. self.sections[section - 1] += number def remove_trees(self, section, number): Remove trees from a specific section without going negative. :param section: The section number (1-based index). :param number: The number of trees to remove. self.sections[section - 1] = max(0, self.sections[section - 1] - number) def query_trees(self, section): Returns the current number of trees in the specified section. :param section: The section number (1-based index). :return: The number of trees in the section. return self.sections[section - 1] def manage_park(input_data): input_lines = input_data.strip().split(\'n\') N = int(input_lines[0]) initial_trees = list(map(int, input_lines[1].split())) Q = int(input_lines[2]) operations = input_lines[3:] park = Park(initial_trees) result = [] for operation in operations: parts = operation.split() if parts[0] == \\"ADD\\": section = int(parts[1]) number = int(parts[2]) park.add_trees(section, number) elif parts[0] == \\"REMOVE\\": section = int(parts[1]) number = int(parts[2]) park.remove_trees(section, number) elif parts[0] == \\"QUERY\\": section = int(parts[1]) result.append(str(park.query_trees(section))) return \'n\'.join(result)"},{"question":"Write a program to determine whether a set of three given lengths can form a scalene triangle. A scalene triangle is a triangle in which all three sides have different lengths. Input The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains three integers a, b, and c, representing the lengths of the sides of a possible triangle. Output Display \'YES\' if the given lengths can form a scalene triangle and \'NO\' otherwise. Constraints 1 ≤ T ≤ 1000 1 ≤ a, b, c ≤ 1000 Example Input 3 7 10 5 3 3 3 8 15 17 Output YES NO YES","solution":"def can_form_scalene_triangle(a, b, c): Returns \'YES\' if the lengths a, b, and c can form a scalene triangle, \'NO\' otherwise. if a != b and b != c and a != c and a + b > c and a + c > b and b + c > a: return \'YES\' return \'NO\' def process_test_cases(T, test_cases): Processes multiple test cases and returns a list of results for each test case. results = [] for i in range(T): a, b, c = test_cases[i] results.append(can_form_scalene_triangle(a, b, c)) return results # Example usage: # T = 3 # test_cases = [(7, 10, 5), (3, 3, 3), (8, 15, 17)] # results = process_test_cases(T, test_cases) # for result in results: # print(result)"},{"question":"Vincent is designing a deep-sea exploration mission using autonomous underwater drones. Each drone can dive to certain depths before returning to the surface for recharging. The goal is to maximize the number of unique depth levels explored within a given energy budget. You are provided with n depth levels (each with a unique identifier and energy cost associated), and Vincent has a total energy budget of E. Each drone starts with a full energy budget of E and uses it up in order to explore depths and return. Your task is to determine the maximum number of unique depth levels that can be explored by utilizing the available energy budget effectively. Input The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains two integers n (1 ≤ n ≤ 100) and E (1 ≤ E ≤ 10^5) — the number of depth levels and the total energy budget. The next n lines contain two integers di and ci (1 ≤ di ≤ 10^5, 1 ≤ ci ≤ 10^4) — the identifier of the depth level and the energy cost to explore that depth level. Output For each test case, print a single integer: the maximum number of unique depth levels that can be explored within the given energy budget. Example Input 3 4 10 1 4 2 6 3 2 4 8 3 15 5 5 6 10 7 3 5 20 8 2 7 3 9 4 10 1 11 15 Output 3 2 5 Note In the first example, Vincent can explore depth levels with identifiers 3, 1, and 2 which cost a total of 2 + 4 + 6 = 12 energy units. In the second example, the best strategy is to explore depth levels with identifiers 7 and 5, costing 3 + 5 = 8 energy units. In the third example, Vincent can explore all the given depth levels since the total cost (2 + 3 + 4 + 1 + 15 = 25 energy units) is within the energy budget of 20 units.","solution":"def max_unique_depth_levels(t, test_cases): results = [] for i in range(t): n, E = test_cases[i][0] depths = test_cases[i][1] # Sort depths based on energy cost (ci) depths.sort(key=lambda x: x[1]) total_cost = 0 unique_depths = 0 for depth in depths: if total_cost + depth[1] <= E: total_cost += depth[1] unique_depths += 1 else: break results.append(unique_depths) return results"},{"question":"You are given a list of integers where each element represents the height of a vertical line on a 2D graph. The width of each line is 1. Your task is to find the two lines that together with the x-axis form a container that holds the most water. The height of the container is dictated by the shorter of the two lines and the width is the distance between the two lines. You need to write a function that calculates and returns the maximum amount of water this container can hold. Input - A list of integers `heights` where 1 ≤ `len(heights)` ≤ 1000 and 1 ≤ `heights[i]` ≤ 10^4 for each valid index `i`. Output - An integer representing the maximum amount of water the container can hold. Function Signature ```python def max_container_water(heights: List[int]) -> int: pass ``` Example Input heights = [1, 8, 6, 2, 5, 4, 8, 3, 7] Output 49 Input heights = [1, 1] Output 1 Input heights = [4, 3, 2, 1, 4] Output 16 Input heights = [1, 2, 1] Output 2 Explanation In the first example, the container is formed by lines at indices 1 and 8 (using 1-based index) with heights 8 and 7 respectively. The width of the container is 8 - 1 = 7. The height is min(8, 7) = 7. Therefore, the amount of water the container can hold is 7 * 7 = 49.","solution":"from typing import List def max_container_water(heights: List[int]) -> int: left, right = 0, len(heights) - 1 max_water = 0 while left < right: width = right - left height = min(heights[left], heights[right]) max_water = max(max_water, width * height) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"You are given an array a of integers, which contains n unique integers, where n is odd (i.e., n % 2 == 1). Your task is to rearrange the array such that the sum of absolute differences between consecutive elements is as small as possible. If there are multiple valid rearrangements, any of them will be accepted. Input The first line contains an integer n (1 ≤ n ≤ 1,000,000). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000). Output Output a single line of n integers representing the rearranged array that minimizes the sum of absolute differences between consecutive elements. Examples Input 5 3 1 4 1 5 Output 1 3 4 5 1 Input 3 3 2 1 Output 1 2 3","solution":"def minimize_absolute_differences(arr): Rearranges the array such that the sum of absolute differences between consecutive elements is as small as possible. Args: arr: List[int] - An array of n unique integers Returns: List[int] - The rearranged array arr.sort() n = len(arr) # Create a new list by taking from the two ends alternately result = [] for i in range((n + 1) // 2): result.append(arr[i]) if i != n // 2: result.append(arr[-(i + 1)]) return result"},{"question":"You are given a sequence of integers. For each consecutive subsequence of length 3 (triplet), you need to determine if it forms an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference of any two successive members is a constant. Input The first line contains an integer n (3 ≤ n ≤ 200,000) – the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the elements of the sequence. Output Output a single integer – the number of triplets that form an arithmetic progression in the sequence. Examples Input 7 1 3 5 9 11 13 17 Output 4 Input 5 2 4 6 8 10 Output 3 Note In the first example, the valid triplets are: (1, 3, 5), (3, 5, 7), (5, 9, 13), and (11, 13, 15). In the second example, all possible triplets form arithmetic progressions: (2, 4, 6), (4, 6, 8), and (6, 8, 10).","solution":"def count_arithmetic_triplets(n, sequence): Returns the number of triplets in the sequence that form an arithmetic progression. count = 0 for i in range(n - 2): if sequence[i + 1] - sequence[i] == sequence[i + 2] - sequence[i + 1]: count += 1 return count"},{"question":"You are given a sequence of N integers. Your task is to remove exactly one integer from the sequence such that the sum of the remaining integers is maximized. If there are multiple choices, return the smallest such integer that can be removed. Constraints * 2 ≤ N ≤ 100,000 * Each integer in the sequence is between -1,000,000 and 1,000,000 Input The input is given from Standard Input in the following format: ``` N A1 A2 A3 ... AN ``` Output Output the smallest integer that can be removed to achieve the maximum possible sum of the remaining integers. Examples Input 5 1 2 3 4 5 Output 1 Input 4 -1 -2 -3 -4 Output -4","solution":"def find_min_integer_to_remove(numbers): Returns the smallest integer to be removed to maximize the sum of the remaining integers. If there are multiple choices, return the smallest integer. total_sum = sum(numbers) max_sum = float(\'-inf\') candidate = None for num in sorted(numbers): current_sum = total_sum - num if current_sum > max_sum: max_sum = current_sum candidate = num elif current_sum == max_sum: candidate = min(candidate, num) return candidate"},{"question":"You are given a rectangular grid of size n x m. Each cell of the grid can contain either a 0 or a 1. Your task is to find the size of the largest square subgrid that contains only 1s, and output that size. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. Each of the next n lines contains m integers (either 0 or 1) separated by spaces, representing the grid. Output Output a single integer, the size of the largest square subgrid consisting entirely of 1s. Examples Input 5 6 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 Output 3 Input 4 5 0 1 0 0 1 1 1 1 1 0 0 1 1 1 0 0 0 0 0 0 Output 2 Note In the first example, the size of the largest square subgrid containing only 1s is 3, and this subgrid is: 1 1 1 1 1 1 1 1 1 In the second example, the size of the largest square subgrid containing only 1s is 2, and this subgrid is: 1 1 1 1","solution":"def largest_square_subgrid(n, m, grid): if not grid or not n or not m: return 0 dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if i == 0 or j == 0: dp[i][j] = grid[i][j] elif grid[i][j] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 0 if dp[i][j] > max_side: max_side = dp[i][j] return max_side"},{"question":"Write an algorithm to compress a given string `s` such that the compressed string has the form of each character followed by the count of consecutive occurrences. If the compressed string is not smaller than the original string, return the original string. Input The input is a string, s, of length n (1 ≤ n ≤ 1000), consisting of lowercase and uppercase English letters. Output Output the compressed version of the string `s`. If the compression does not result in a smaller string, output the original string `s`. Examples Input aaabccccdd Output a3b1c4d2 Input abcdef Output abcdef Input aabbccddeeffgg Output aabbccddeeffgg Input aabcccccaaa Output a2b1c5a3","solution":"def compress_string(s): Compress the string by counting consecutive occurrences of characters. Return the compressed string if it is shorter than the original, otherwise return the original string. if not s: return s compressed = [] count = 1 last_char = s[0] for char in s[1:]: if char == last_char: count += 1 else: compressed.append(f\\"{last_char}{count}\\") last_char = char count = 1 compressed.append(f\\"{last_char}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Alyssa works with arrays. She has an array of N distinct integers and an integer X. She wants to find if there exists a pair of elements in the array such that their sum is equal to X. If such a pair exists, print \\"YES\\". Otherwise, print \\"NO\\". Constraints * 2 leq N leq 10^5 * -10^9 leq X leq 10^9 * -10^9 leq array[i] leq 10^9 for all 1 leq i leq N Input The input is given from Standard Input in the following format: N X array[0] array[1] ... array[N-1] Output Print \\"YES\\" if there exists a pair of elements in the array whose sum equals X, otherwise print \\"NO\\". Examples Input 5 9 1 2 3 7 8 Output YES Input 6 10 5 6 1 2 -7 15 Output NO","solution":"def pair_with_sum_exists(n, x, array): Checks if there exists a pair of elements in the array such that their sum is equal to x. Returns \\"YES\\" if such a pair exists, otherwise returns \\"NO\\". nums_seen = set() for num in array: if x - num in nums_seen: return \\"YES\\" nums_seen.add(num) return \\"NO\\" def from_input_string(input_string): lines = input_string.strip().split(\'n\') n, x = map(int, lines[0].split()) array = list(map(int, lines[1].split())) return n, x, array def to_input_string(inputs): n, x, array = inputs return f\\"{n} {x}n{\' \'.join(map(str, array))}\\" def from_output_string(output_string): return output_string.strip() def to_output_string(output): return output"},{"question":"You\'re given an array of integers and an integer `k`. Write a function that finds the maximum number of distinct elements in any subarray of length `k`. Function Signature: ```python def max_distinct_subarray(arr: List[int], k: int) -> int: ``` # Input - `arr` - a list of integers representing the array. - `k` - an integer representing the length of the subarray. # Output - Return an integer representing the maximum number of distinct elements in any subarray of length `k`. # Constraints - 1 ≤ len(arr) ≤ 10^5 - 1 ≤ arr[i] ≤ 10^5 - 1 ≤ k ≤ len(arr) # Example Example 1 Input: ```python arr = [1, 2, 1, 3, 4, 2, 3] k = 4 ``` Output: ```python 4 ``` Explanation: The subarrays of length 4 are: - [1, 2, 1, 3] which has 3 distinct elements. - [2, 1, 3, 4] which has 4 distinct elements. - [1, 3, 4, 2] which has 4 distinct elements. - [3, 4, 2, 3] which has 3 distinct elements. The maximum number of distinct elements is 4. Example 2 Input: ```python arr = [4, 1, 1, 1, 3, 2, 1, 3, 4] k = 5 ``` Output: ```python 4 ``` Explanation: The subarrays of length 5 are: - [4, 1, 1, 1, 3] which has 3 distinct elements. - [1, 1, 1, 3, 2] which has 3 distinct elements. - [1, 1, 3, 2, 1] which has 3 distinct elements. - [1, 3, 2, 1, 3] which has 4 distinct elements. - [3, 2, 1, 3, 4] which has 4 distinct elements. The maximum number of distinct elements is 4.","solution":"from collections import defaultdict from typing import List def max_distinct_subarray(arr: List[int], k: int) -> int: if k == 0: return 0 # Dictionary to store the count of elements in the current window count_dict = defaultdict(int) max_distinct = 0 current_distinct = 0 # Initialize the first window for i in range(k): if count_dict[arr[i]] == 0: current_distinct += 1 count_dict[arr[i]] += 1 max_distinct = current_distinct # Slide the window for i in range(k, len(arr)): # Remove the element going out of the window count_dict[arr[i - k]] -= 1 if count_dict[arr[i - k]] == 0: current_distinct -= 1 # Add the new element coming into the window if count_dict[arr[i]] == 0: current_distinct += 1 count_dict[arr[i]] += 1 max_distinct = max(max_distinct, current_distinct) return max_distinct"},{"question":"Ada has a collection of colored marbles. Today, she wants to group marbles based on their colors and determine how many unique groups she has. Help her accomplish this task by writing a function that counts the number of unique colors present in her collection. Input The first line contains an integer n (1 ≤ n ≤ 105), representing the number of marbles in Ada\'s collection. The following line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 109), where ci represents the color of the i-th marble. Output Print a single integer — the number of unique colors in the collection. Examples Input 5 1 2 3 2 1 Output 3 Input 4 5 5 5 5 Output 1 Input 6 1 2 3 4 5 6 Output 6","solution":"def count_unique_colors(n, colors): Returns the number of unique colors in the collection. Parameters: n (int): The number of marbles in the collection. colors (list of int): A list of integers representing the color of each marble. Returns: int: The number of unique colors. return len(set(colors))"},{"question":"Find the Shortest Unique Prefix Imagine you have a dictionary with several words. Your task is to write a program that finds the shortest unique prefix for each word in the dictionary such that no other word in the dictionary starts with that prefix. Input The first line contains an integer n (2 ≤ n ≤ 100000) – the number of words in the dictionary. Each of the following n lines contains a single word consisting of lowercase English letters. The words will be distinct and their lengths will not exceed 100 characters. Output Output n lines. For each word, output the shortest prefix that makes this word unique among the given words in the dictionary. Example Input 5 dog cat apple apricot fish Output d c app apr f","solution":"class TrieNode: def __init__(self): self.children = {} self.frequency = 0 class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.frequency += 1 def get_unique_prefix(self, word): node = self.root prefix = \'\' for char in word: prefix += char node = node.children[char] if node.frequency == 1: break return prefix def shortest_unique_prefixes(words): trie = Trie() for word in words: trie.insert(word) return [trie.get_unique_prefix(word) for word in words] # Sample usage: # words = [\\"dog\\", \\"cat\\", \\"apple\\", \\"apricot\\", \\"fish\\"] # print(shortest_unique_prefixes(words)) # Output: [\\"d\\", \\"c\\", \\"app\\", \\"apr\\", \\"f\\"]"},{"question":"You are given a list of n integers, (a_1, a_2, ldots, a_n), where (1 leq a_i leq 10^9). You are allowed to perform the following operation any number of times (including zero): choose two different indices i and j (1 ≤ i, j ≤ n) such that (a_i) is divisible by (a_j), and set (a_i = frac{a_i}{a_j}). You need to determine the minimum possible sum of the list after applying the above operation any number of times. Input The first line contains a single integer n (1 ≤ n ≤ 3·10^5)—the number of elements in the list. The second line contains n integers (a_1, a_2, ldots, a_n) (1 ≤ (a_i) ≤ 10^9). Output Print a single integer—the minimum possible sum of the list. Examples Input 4 4 8 2 1 Output 4 Input 3 10 20 30 Output 10 Input 7 16 4 8 2 32 1 16 Output 7","solution":"def min_possible_sum(n, arr): Returns the minimum possible sum of the list after applying the operation any number of times. The operation allows choosing two different indices i and j such that a_i is divisible by a_j, and setting a_i = a_i / a_j. Parameters: n (int): The number of elements in the list. arr (list): The list of integers. Returns: int: The minimum possible sum of the list. # The minimum sum is simply the sum of all the smallest elements. return n # since each element is reduced to 1"},{"question":"Alex enjoys games that involve playing with numbers. Recently, he came across a game that involves a series of operations on an integer sequence. The game consists of the following steps: 1. Start with an integer n. 2. Generate a sequence of length n consisting of integers from 1 to n. 3. For every integer k (1 ≤ k ≤ n) in the sequence, apply the following rule: - If k is divisible by both 2 and 3, replace k with \\"FizzBuzz\\". - If k is divisible by 2 but not by 3, replace k with \\"Fizz\\". - If k is divisible by 3 but not by 2, replace k with \\"Buzz\\". 4. Print the final sequence. Alex wants to write a program to automate this process. Could you help him build this program? Input The input contains a single integer n (1 ≤ n ≤ 10^5). Output Print the final sequence of length n where the terms are either integers or the strings \\"Fizz\\", \\"Buzz\\", or \\"FizzBuzz\\" according to the rules mentioned above. Example Input 15 Output 1 2 Buzz 4 Fizz Buzz 7 8 Buzz Fizz 11 Buzz 13 14 FizzBuzz","solution":"def fizzbuzz_sequence(n): Generates the sequence based on FizzBuzz rules for integer n. Parameters: n (int): The length of the sequence. Returns: list: The resulting sequence with integers or substituted strings. result = [] for k in range(1, n+1): if k % 6 == 0: result.append(\\"FizzBuzz\\") elif k % 2 == 0: result.append(\\"Fizz\\") elif k % 3 == 0: result.append(\\"Buzz\\") else: result.append(k) return result"},{"question":"You are tasked with writing a program to simulate a simple game where a robot navigates on a 2D grid. The robot can make a series of moves represented by the letters \'U\', \'D\', \'L\', and \'R\', corresponding to Up, Down, Left, and Right moves, respectively. Each move will change the robot\'s position by one unit in the respective direction. Given the initial position of the robot and a series of moves, your goal is to determine the robot\'s final position. Input The first line contains two integers x_0 and y_0 (−10^9 ≤ x_0, y_0 ≤ 10^9) — the initial coordinates of the robot. The second line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string representing the series of moves. The third line contains a string of length n consisting only of the characters \'U\', \'D\', \'L\', and \'R\'. Output Output two integers x_f and y_f — the final coordinates of the robot. Examples Input 0 0 5 ULDRU Output 0 1 Input -2 3 4 RRDD Output 0 1 Input 2 -1 3 UDL Output 1 -1 Note In the first example, the moves are as follows: - \'U\' moves the robot from (0, 0) to (0, 1) - \'L\' moves the robot from (0, 1) to (-1, 1) - \'D\' moves the robot from (-1, 1) to (-1, 0) - \'R\' moves the robot from (-1, 0) to (0, 0) - \'U\' moves the robot from (0, 0) to (0, 1) Therefore, the final position is (0, 1). In the second example, the moves are as follows: - \'R\' moves the robot from (-2, 3) to (-1, 3) - \'R\' moves the robot from (-1, 3) to (0, 3) - \'D\' moves the robot from (0, 3) to (0, 2) - \'D\' moves the robot from (0, 2) to (0, 1) Therefore, the final position is (0, 1). In the third example, the moves are as follows: - \'U\' moves the robot from (2, -1) to (2, 0) - \'D\' moves the robot from (2, 0) to (2, -1) - \'L\' moves the robot from (2, -1) to (1, -1) Therefore, the final position is (1, -1).","solution":"def final_position(x_0, y_0, n, moves): Determines the final position of a robot given initial coordinates and a series of moves. Parameters: x_0 (int): Initial x-coordinate y_0 (int): Initial y-coordinate n (int): Number of moves moves (str): String representing series of moves Returns: tuple: Final coordinates (x_f, y_f) x, y = x_0, y_0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x, y"},{"question":"You are given a grid representing a city with rows and columns. Each cell in the grid is either a building (\'B\') or an empty plot (\'.\'). Your task is to determine the minimum number of buildings that need to be added to make each row and column contain at least one building. Input The first line of input contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. Each of the next `n` lines contains a string of `m` characters where each character is either \'B\' (building) or \'.\' (empty plot). Output Print a single integer, the minimum number of buildings needed. Examples Input 3 4 .... .B.. .... Output 3 Input 2 2 .. .. Output 2 Input 3 3 .B. .B. .B. Output 0 Note In the first example, you need to add one building in the first row and one building in the last row, for instance, making rows like [\'..B.\', \'.B..\', \'..B.\']. Additionally, you need to add one building in the fourth column. In the second example, you need to place at least one building in each row and one in each column since there are no buildings at all. In the third example, there\'s already at least one building in each row and column, so no new buildings are necessary.","solution":"def min_buildings_needed(grid): Determine the minimum number of buildings needed to ensure each row and column contains at least one building. Parameters: grid (List[str]): A list of strings representing the grid. Returns: int: The minimum number of buildings needed. n = len(grid) m = len(grid[0]) if n > 0 else 0 rows_with_building = set() cols_with_building = set() for r in range(n): for c in range(m): if grid[r][c] == \'B\': rows_with_building.add(r) cols_with_building.add(c) needed_rows = n - len(rows_with_building) needed_cols = m - len(cols_with_building) return max(needed_rows, needed_cols)"},{"question":"A farmer has a peculiar way of arranging his cattle in the barn. Each cattle has a unique strength value associated with it. The farmer wants to create a line of cattle such that no two adjacent cattle have strengths whose greatest common divisor (GCD) is greater than 1. You are given the strength values of the cattle, and you need to determine if it\'s possible to arrange them in such a manner. Given an array of N integers where each integer represents the strength of a cattle, check if you can arrange the cattle such that any two adjacent cattle have GCD equal to 1. If possible, print \\"YES\\"; otherwise, print \\"NO\\". Input format: - The first line contains an integer T, denoting the number of test cases. Then, T test cases follow. - Each test case consists of two lines: - The first line contains an integer N, denoting the number of cattle. - The second line contains N integers, denoting the strength values of the cattle. Output format: For each test case, output \\"YES\\" if it\'s possible to arrange the cattle as per the given conditions, otherwise print \\"NO\\". Constraints: - 1 ≤ T ≤ 10^2 - 1 ≤ N ≤ 10^5 - 1 ≤ strength ≤ 10^6 SAMPLE INPUT 2 3 7 3 5 4 2 4 6 8 SAMPLE OUTPUT YES NO","solution":"import math import itertools def can_arrange_cattle(cattle_strengths): Determines if the given list of cattle strengths can be arranged such that no two adjacent cattle have GCD greater than 1. n = len(cattle_strengths) if n == 1: return \\"YES\\" for perm in itertools.permutations(cattle_strengths): valid = True for i in range(n-1): if math.gcd(perm[i], perm[i+1]) > 1: valid = False break if valid: return \\"YES\\" return \\"NO\\" def process_input_output(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] index = 1 for _ in range(T): N = int(lines[index]) strengths = list(map(int, lines[index+1].split())) result = can_arrange_cattle(strengths) results.append(result) index += 2 return results"},{"question":"A botanist, Dr. Leaf Green, is researching the growth patterns of a particular species of plant known as the Fibonacci Fern. This plant has a unique growth pattern where the number of new leaves that sprout in a given month follows the Fibonacci sequence. In other words, in the nth month, the number of new leaves sprouted by the Fibonacci Fern is the sum of the number of new leaves sprouted in the (n-1)th month and the (n-2)th month, with the first month starting with one leaf. Dr. Green has a collection of Fibonacci Ferns, each one starting as a single leaf, and she wants to track their total growth over a period of M months. For each fern in her collection, she wants to determine the total number of leaves that will be present at the end of M months, including both new and existing leaves. Your task is to help Dr. Green by calculating the number of leaves each fern will have after M months. Note that the fern starts with one leaf in the first month, and the second month also adds one new leaf. Input The input consists of multiple datasets. Each dataset comes with a line that contains a single positive integer M (1 ≤ M ≤ 40). The end of input is indicated by a line that contains a zero. This should not be processed. Output For each dataset, print the total number of leaves on the Fibonacci Fern after M months, including both new and existing leaves. Example Input 1 2 3 5 10 0 Output 1 2 3 8 89 Explanation - For M = 1, the fern has 1 leaf after the first month. - For M = 2, the fern has 2 leaves: 1 original leaf and 1 new leaf. - For M = 3, the fern has 3 leaves: 1 original leaf and 2 new leaves (1 from the 2nd month and 1 from the 3rd month). - For M = 5, the fern has 8 leaves, following the Fibonacci sequence up to the 5th term. - For M = 10, the fern has 89 leaves, following the Fibonacci sequence up to the 10th term.","solution":"def fibonacci_leaves(M): This function calculates the number of leaves on the Fibonacci Fern after M months. if M == 1: return 1 elif M == 2: return 2 prev, curr = 1, 2 for _ in range(3, M + 1): prev, curr = curr, prev + curr return curr def process_input(data): This function processes the input data, computes the results and returns them in a list. results = [] for month in data: if month == 0: break results.append(fibonacci_leaves(month)) return results"},{"question":"Suppose you are in charge of organizing a coding competition where the participants are given different levels of problems to solve. Each problem has an associated difficulty rating, and you want to distribute the problems in such a way that the sum of difficulty ratings of the problems in each group is as equal as possible. Given an even number of problems, you need to divide them into two groups such that the difference between the sums of the difficulty ratings of the two groups is minimized. Input: The first line contains an integer T, the number of test cases. For each test case, the second line contains an integer n (the number of problems, which is always even and 2 ≤ n ≤ 100000), followed by n integers representing the difficulty ratings of the problems. Output: For each test case, print the difference between the sums of the difficulty ratings of the two groups. Example: Input: 2 4 1 3 5 9 6 4 5 6 7 8 9 Output: 0 1","solution":"def min_diff_in_groups(T, test_cases): results = [] for i in range(T): n, difficulties = test_cases[i] total_sum = sum(difficulties) half_sum = total_sum // 2 # Initialize a dp array dp = [False] * (half_sum + 1) dp[0] = True for difficulty in difficulties: for j in range(half_sum, difficulty - 1, -1): dp[j] |= dp[j - difficulty] for j in range(half_sum, -1, -1): if dp[j]: diff = total_sum - 2 * j results.append(diff) break return results # Example usage: T = 2 test_cases = [ (4, [1, 3, 5, 9]), (6, [4, 5, 6, 7, 8, 9]) ] print(min_diff_in_groups(T, test_cases)) # Output: [0, 1]"},{"question":"Given an array of integers, perform a sequence of the following operations: * add(x): Add x to each element in the array and report the array content after the operation. * multiply(y): Multiply each element in the array by y and report the array content after the operation. * query: Report the current array. Constraints * 1 leq n leq 100,000 (size of the initial array) * 1 leq q leq 100,000 (total number of operations) * 1 leq x, y leq 1,000,000 (values to be added or multiplied) Input The input is given in the following format. n (size of the array) array q operation_1 operation_2 : operation_q Each operation operation_i is given by: 1 x or 2 y or 3 Where the first digits 1, 2 and 3 represent add, multiply and query operations respectively. Output For each query operation, print the current state of the array. Example Input 5 1 2 3 4 5 4 1 2 3 2 3 3 Output 3 4 5 6 7 9 12 15 18 21","solution":"def perform_operations(n, array, operations): Perform the specified add, multiply, and query operations on the array. Args: n: int - the size of the initial array. array: list of int - the initial array of integers. operations: list of tuples - the operations to perform on the array. Returns: list of lists: the results of the query operations. results = [] # List to store the outcomes of \'query\' operations for operation in operations: if operation[0] == 1: # add(x) x = operation[1] array = [elem + x for elem in array] elif operation[0] == 2: # multiply(y) y = operation[1] array = [elem * y for elem in array] elif operation[0] == 3: # query results.append(array) return results"},{"question":"A factory produces widgets in batches. Each batch is supposed to contain exactly `N` widgets. However, sometimes due to errors in the production process, extra widgets are produced. You are given an array `widgets` where `widgets[i]` indicates the number of widgets in the `i-th` batch. Your task is to calculate how many extra widgets have been produced across all batches. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ len(widgets) ≤ 1000 * 1 ≤ widgets[i] ≤ 2000 Input The input is given from Standard Input in the following format: ``` N len(widgets) widgets[0] widgets[1] ... widgets[len(widgets) - 1] ``` Output Print the total number of extra widgets produced across all batches. Examples Input ``` 10 5 12 10 15 9 13 ``` Output ``` 11 ``` Input ``` 7 3 7 7 8 ``` Output ``` 1 ```","solution":"def calculate_extra_widgets(N, widgets): Calculates the total number of extra widgets produced across all batches. Args: N (int): The intended number of widgets per batch. widgets (list of int): List containing the number of widgets in each batch. Returns: int: The total number of extra widgets. extra_widgets = 0 for count in widgets: if count > N: extra_widgets += count - N return extra_widgets # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) length = int(data[1]) widgets = [int(data[i + 2]) for i in range(length)] print(calculate_extra_widgets(N, widgets))"},{"question":"Given a list of integers, write a program to find and print the list\'s median. If the list contains an even number of elements, the median is the average of the two middle numbers. Constraints * 1 leq length of list leq 1000 * -10^6 leq each integer leq 10^6 Input Input is given from Standard Input in the following format: The first line contains an integer N, the length of the list. The second line contains N space-separated integers, the elements of the list. Output Print the median of the list. If the median is not an integer, output it as a floating-point number with exactly one decimal place. Examples Input 5 2 3 1 4 5 Output 3 Input 4 1 2 3 4 Output 2.5","solution":"def find_median(N, numbers): Finds and returns the median of a list of numbers. If the list contains an even number of elements, the median is the average of the two middle numbers. sorted_numbers = sorted(numbers) middle_index = N // 2 if N % 2 == 1: # If odd, return the middle number median = sorted_numbers[middle_index] else: # If even, return the average of the two middle numbers median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2 if median % 1 == 0: return int(median) else: return float(\\"{:.1f}\\".format(median))"},{"question":"You are given an n x n grid, representing a labyrinth with some barriers. Each cell in the grid can be either empty or contain a barrier. Your task is to determine the shortest path from the top-left corner of the grid to the bottom-right corner. You can move in four directions: up, down, left, and right. A cell with a barrier cannot be passed through. If it is not possible to reach the bottom-right corner from the top-left, output -1. Input The first line contains an integer n (2 ≤ n ≤ 100), which is the size of the grid. Each of the following n lines contains n characters (\'#\' or \'.\'), where \'#\' represents a barrier, and \'.\' represents an empty cell. The top-left and bottom-right corners of the grid are guaranteed to be empty cells. Output Print the length of the shortest path from the top-left to the bottom-right corner. If there is no such path, output -1. Examples Input 4 .... ..#. ..#. .... Output 6 Input 4 .... .... .... Output -1 Note In the first test case, the shortest path is (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3), so the output is 6. In the second test case, the barriers block the path, so the output is -1.","solution":"from collections import deque def shortest_path_labyrinth(n, grid): directions = [(0,1), (1,0), (0,-1), (-1,0)] def is_within_bounds(x, y): return 0 <= x < n and 0 <= y < n visited = [[False for _ in range(n)] for _ in range(n)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"In a given town, there are multiple houses aligned on a straight road. Each house has a unique number representing its position on the road. An organization wants to plant trees in front of each house, ensuring that no three trees are in a straight line. Given the positions of the houses, find the maximum number of trees that can be planted. Input The first line contains an integer N (1 ≤ N ≤ 1000) — the number of houses. The second line contains N distinct integers representing the positions of the houses on the road. Output Print a single integer — the maximum number of trees that can be planted such that no three trees are in a straight line. Examples Input 5 1 2 3 4 5 Output 2 Input 6 1 3 5 7 9 11 Output 2","solution":"def max_trees(house_positions): Returns the maximum number of trees that can be planted such that no three trees are in a straight line. n = len(house_positions) # When there are 2 or less houses, we can always plant trees in front of each of them if n <= 2: return n # Sort the house positions house_positions.sort() # We can always plant at least 2 trees such that they are not in a straight line return 2"},{"question":"You are given a string consisting of the characters \'a\', \'b\', and \'c\'. You can perform the following operation any number of times (including zero): choose any substring of length 2 and swap its characters. Your task is to determine the minimum number of swaps required to make the string either non-decreasing or non-increasing. Input The first line contains an integer t (1 ≤ t ≤ 10^4), the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 10^5) consisting of the characters \'a\', \'b\', and \'c\'. Output For each test case, print the minimum number of swaps required to make the string either non-decreasing or non-increasing. Examples Input 3 bac abc ccc Output 1 0 0 Note In the first example, one possible way to make the string non-decreasing is to swap the characters \'b\' and \'a\' resulting in the string \\"abc\\". In the second example, the string is already non-decreasing, so no swaps are needed. In the third example, the string is already non-decreasing (and non-increasing), so no swaps are needed.","solution":"def min_swaps_to_sort_string(s: str) -> int: n = len(s) def count_swaps(target): swaps = 0 j = 0 for i in range(n): while j < n and target[j] != s[i]: j += 1 if j < n: swaps += abs(i - j) j += 1 return swaps sorted_string = \'\'.join(sorted(s)) rev_sorted_string = \'\'.join(sorted(s, reverse=True)) return min(count_swaps(sorted_string), count_swaps(rev_sorted_string)) def min_swaps_all_cases(test_cases): results = [] for s in test_cases: results.append(min_swaps_to_sort_string(s)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = data[1:t + 1] results = min_swaps_all_cases(test_cases) for res in results: print(res)"},{"question":"In a large city, the public transportation system includes both buses and subway trains. The city prides itself on the efficiency and punctuality of its transportation services. To further optimize and ensure the best travel schedule for commuters, the city plans to analyze the train operation and make necessary adjustments. There are N subway trains in the system, each with its specific operation schedule and attributes. Commuters often want to know the earliest train they can catch to minimize their waiting time. Each train has an operating schedule described by the following parameters: 1. `start_time` (S): The time the train begins its operation in the day. 2. `interval` (I): The interval time between subsequent trains. 3. `duration` (D): The total duration for which each train travels before the next train commences. Given the specific `query_time` (Q), you are required to find the earliest available train that a commuter can catch at or after the `query_time`. The train schedules are provided in the input along with the `query_time`, and your program should determine the earliest train a commuter can board. Input The input contains multiple datasets. Each dataset consists of several lines: 1. The first line contains a single integer N (1 ≤ N ≤ 1000), the number of trains. 2. The next N lines each contain three integers representing the schedule of a train: - S (0 ≤ S < 1440): The start time in minutes from midnight. - I (1 ≤ I ≤ 1440): The interval time in minutes between trains. - D (1 ≤ D ≤ 1440): The duration in minutes of each train\'s trip time. 3. The last line contains a single integer Q (0 ≤ Q < 1440), the query time in minutes from midnight. The input is terminated by a dataset where N is 0, which must not be processed. Output For each dataset, output the earliest available train\'s departure time in minutes from midnight that a commuter can catch at or after the `query_time`. If no such trains are available, output \\"No available trains\\". Example: Input 3 60 30 10 120 15 5 180 20 15 45 2 300 60 10 360 20 5 320 0 Output 60 360","solution":"def find_earliest_train(train_schedules, query_time): earliest_time = float(\'inf\') for (S, I, D) in train_schedules: if query_time <= S: earliest_time = min(earliest_time, S) else: next_train_after_query = ((query_time - S + I - 1) // I) * I + S if next_train_after_query < (1440) and next_train_after_query <= (S + I + D): earliest_time = min(earliest_time, next_train_after_query) return earliest_time if earliest_time != float(\'inf\') else \\"No available trains\\" def process_input(input_data): result = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): N = int(lines[i]) if N == 0: break i += 1 train_schedules = [] for _ in range(N): S, I, D = map(int, lines[i].split()) train_schedules.append((S, I, D)) i += 1 Q = int(lines[i]) i += 1 result.append(find_earliest_train(train_schedules, Q)) return result # Example usage: input_data = 3 60 30 10 120 15 5 180 20 15 45 2 300 60 10 360 20 5 320 0 output = process_input(input_data) for o in output: print(o)"},{"question":"Given an array of integers, find and print all the unique pairs of elements (a, b) such that their sum is equal to a given target value x. Each pair should be printed only once, even if there are multiple ways to form the pair from the array elements. The pair (a, b) and (b, a) are considered the same, and they should be printed in ascending order (i.e., as (a, b) where a <= b). Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers n and x, where n is the number of elements in the array and x is the target sum. - The second line contains n integers representing the elements of the array. Output: For each test case, output the unique pairs of integers that sum up to x. Each pair should be printed on a new line, in the format (a, b), where a <= b. If no such pairs exist, print \\"No pairs\\". Example: Input: 2 6 10 1 9 8 2 4 6 4 8 1 2 4 4 Output: (1, 9) (2, 8) (4, 6) (4, 4) No pairs Note: - Output pairs in ascending order. - Ensure all pairs are unique even if more than one pair can generate the target sum. For instance, given an array of [4, 4, 2, 2] and target 6, output should be only one instance of (2, 4).","solution":"def find_pairs(arr, target): Returns a list of unique pairs (a, b) such that a + b equals target value. Pairs are returned in ascending order and each pair (a, b) is unique. pairs = set() seen = set() for num in arr: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return sorted(pairs) def solve(test_cases): results = [] for case in test_cases: n, x, array = case pairs = find_pairs(array, x) if pairs: results.append(\'n\'.join(f\\"({a}, {b})\\" for a, b in pairs)) else: results.append(\\"No pairs\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): n, x = map(int, lines[idx].split()) array = list(map(int, lines[idx + 1].split())) test_cases.append((n, x, array)) idx += 2 return test_cases # To use this solution, make sure to parse your input and call `solve` function: # input_str = ... (some string containing the input text) # test_cases = parse_input(input_str) # results = solve(test_cases) # for result in results: # print(result)"},{"question":"In a parallel universe, robots are controlling the traffic at various intersections in a city. Each intersection is represented as a node in a graph, and the roads between them are edges with various travel times. A robot at an intersection needs to determine the shortest path to every other intersection in real-time to optimize traffic flow. Your task is to help the robot by implementing an algorithm to find the shortest path from a given source intersection to all other intersections in the city graph. INPUT: First line contains two integers n and m representing the number of intersections (nodes) and roads (edges) respectively. Next m lines each contain three integers u, v and w representing a road between intersection u and intersection v with a travel time of w. Last line contains a single integer s representing the source intersection. OUTPUT: Output consists of n lines, each containing an integer denoting the shortest travel time from the source intersection s to the intersection i (0 ≤ i < n). If there is no path from s to i, print \\"Infinity\\". CONSTRAINTS: 1 ≤ n ≤ 1000 1 ≤ m ≤ 10000 1 ≤ w ≤ 1000 Note: The final graph can have multiple roads between two intersections but no self-loops. SAMPLE INPUT 4 4 0 1 1 0 2 4 1 2 2 1 3 6 0 SAMPLE OUTPUT 0 1 3 7","solution":"import heapq def dijkstra(n, m, edges, source): graph = {i: [] for i in range(n)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) distances = {i: float(\'inf\') for i in range(n)} distances[source] = 0 priority_queue = [(0, source)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [distances[i] if distances[i] != float(\'inf\') else \\"Infinity\\" for i in range(n)]"},{"question":"You are given two arrays of integers A and B of length N. A sequence of arrays {S_n} is defined as follows: 1. S_1 = A, S_2 = B 2. For each n ≥ 1, S_{n+2}[i] is the bitwise AND of S_n[i] and S_{n+1}[i] for all 1 ≤ i ≤ N Given a positive integer K, find S_K. # Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ K ≤ 10^9 * 0 ≤ A_i, B_i < 2^30 # Input Input is given from Standard Input in the following format: ``` N K A_1 A_2 ... A_N B_1 B_2 ... B_N ``` # Output Print N integers, with spaces in between. The i-th integer (1 ≤ i ≤ N) should be the i-th element in S_K. # Examples Input ``` 3 3 1 2 3 3 2 1 ``` Output ``` 1 2 1 ``` Input ``` 4 5 0 1 3 7 7 3 1 0 ``` Output ``` 0 1 1 7 ``` Input ``` 2 1000000000 123456789 987654321 555555555 444444444 ``` Output ``` 123456789 444444444 ```","solution":"def determine_S_k(N, K, A, B): Determines the K-th sequence based on given arrays A and B. return A if K % 2 == 1 else B"},{"question":"\'Mary is organizing a competition where participants have to find a specific kind of number sequence. She defines a \\"unique number sequence\\" as a sequence of integers where each number differs from the others by 1. For example, [3, 4, 5] and [6, 5, 4] are unique sequences, but [2, 3, 5] is not. Mary gives participants a large list of integers and a target integer k. She asks them to find the length of the longest unique number sequence within this list where all numbers are no more than k steps apart from each other in the sequence. Write a function to help Mary find the length of such a sequence. FUNCTION SIGNATURE def find_longest_unique_sequence(nums: List[int], k: int) -> int: INPUT - A single list of integers nums, containing 1 ≤ |nums| ≤ 10^5 elements, each between 1 and 10^5 inclusive. - An integer k where 1 ≤ k ≤ |nums|. OUTPUT - An integer representing the length of the longest unique number sequence within the list. SAMPLE INPUT find_longest_unique_sequence([1, 3, 5, 7, 8, 9], 4) SAMPLE OUTPUT 4 EXPLANATION In the given example, the longest sequences where each number differs by no more than 4 are [5, 7, 8, 9] and [3, 5, 7, 8]. Therefore, the length of the longest unique sequence is 4.\'","solution":"from typing import List def find_longest_unique_sequence(nums: List[int], k: int) -> int: nums = sorted(set(nums)) n = len(nums) if n == 0: return 0 max_length = 1 start = 0 for end in range(1, n): if nums[end] - nums[start] > k: start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"A rectangular matrix of positive integers is given. Your task is to check if there exists a row or column such that the sum of the elements of that row or column is divisible by a given integer D. Input The first line of input contains three space-separated integers: the number of rows R (1 ≤ R ≤ 10), the number of columns C (1 ≤ C ≤ 10), and the divisor D (1 ≤ D ≤ 100). Each of the next R lines contains C space-separated integers. Each integer is between 1 and 1000. Output Output \\"YES\\" if there exists a row or column such that the sum of its elements is divisible by D. Otherwise, output \\"NO\\". Examples Input 3 3 4 1 2 3 4 5 6 7 8 9 Output YES Input 2 3 10 1 2 3 4 5 6 Output NO","solution":"def check_sum_divisible(matrix, R, C, D): for row in matrix: if sum(row) % D == 0: return \\"YES\\" for col in range(C): col_sum = sum(matrix[row][col] for row in range(R)) if col_sum % D == 0: return \\"YES\\" return \\"NO\\" def matrix_sum_divisible(R, C, D, matrix): return check_sum_divisible(matrix, R, C, D)"},{"question":"A well-known geography task is to determine the shortest distance between two points on a map. However, due to various terrains and obstacles like rivers, mountains, or roads, certain paths can be longer than if traveling in a straight line. Write a program that helps determine the shortest journey possible given a number of towns and the direct roads connecting them. Each road between two towns has an associated distance. Your task is to determine the shortest path from a starting town to a destination town. You will be given a list of towns and roads between them. Each road is bidirectional. You need to find the shortest distance between the starting town and the destination town. Input The first input line contains two integers n and m (2 ≤ n ≤ 300, 1 ≤ m ≤ n*(n-1)/2), where n is the number of towns and m is the number of roads. Each town is represented by an integer from 1 to n. The next m lines each contain three integers ai, bi, ci (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ci ≤ 1000) representing a road between towns ai and bi with an associated distance ci. The last input line contains two integers s and t (1 ≤ s, t ≤ n) representing the starting town and the destination town. Output Print the minimal distance between the starting town and the destination town. If there is no path between s and t, print \\"No path\\". Examples Input 4 4 1 2 10 2 3 10 3 4 10 1 4 30 1 3 Output 20 Input 3 2 1 2 5 2 3 7 1 3 Output 12 Input 5 2 1 2 10 2 3 10 4 5 6 1 5 Output No path","solution":"import heapq def shortest_path(n, m, roads, start, end): graph = {i: [] for i in range(1, n+1)} for ai, bi, ci in roads: graph[ai].append((ci, bi)) graph[bi].append((ci, ai)) # Use Dijkstra\'s algorithm to find the shortest path priority_queue = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while priority_queue: current_distance, current_town = heapq.heappop(priority_queue) if current_town == end: return current_distance for weight, neighbor in graph[current_town]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return \\"No path\\""},{"question":"You are given an array of n integers. Your task is to find the maximum sum of non-adjacent elements in the array. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 ≤ n ≤ 100). The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. Output For each test case, print a single integer which is the maximum sum of non-adjacent elements in the array. Example Input 3 5 3 2 5 10 7 4 3 2 7 10 2 5 5 Output 15 13 5 Note In the first test case, the maximum sum of non-adjacent elements is 3 + 10 + 2 = 15. In the second test case, the maximum sum is 3 + 10 = 13. In the third test case, the only choice is to take one of the elements since there are only two elements. Taking either one of the 5s gives a maximum sum of 5.","solution":"def max_sum_non_adjacent(t, test_cases): Returns an array of integers where each integer is the maximum sum of non-adjacent elements for the corresponding test case. results = [] for i in range(t): n, arr = test_cases[i] if n == 0: results.append(0) continue if n == 1: results.append(arr[0]) continue # Dynamic programming approach prev1, prev2 = 0, 0 for num in arr: curr = max(prev1, prev2 + num) prev2 = prev1 prev1 = curr results.append(prev1) return results"},{"question":"A new restaurant management system aims to optimize table assignments. You are tasked with developing an algorithm to help with this problem. The restaurant has M tables and N reservations for the evening. Each reservation is for a specified number of people, and each table has a maximum capacity. The goal is to accommodate as many reservations as possible without exceeding the table capacities. Note that each reservation must be assigned to a single table, and no table can host multiple reservations. Input: - The first line contains two integers, M and N, representing the number of tables and number of reservations respectively. - The next line contains M integers ti (1 ≤ i ≤ M), representing the maximum capacity of each table. - The following N lines each contain an integer ri (1 ≤ i ≤ N), representing the number of people for each reservation. Output: - Output the maximum number of reservations that can be accommodated. Example: Input: 3 4 5 8 6 2 4 4 8 Output: 3 Explanation: In this example, three reservations can fit into the available tables as follows: - The first table can accommodate the reservation with 2 people. - The third table can accommodate the reservation with 4 people. - The second table can accommodate the reservation with 8 people. - The second reservation with 4 people does not fit into any of the remaining tables. Thus, the output is 3.","solution":"def max_reservations(M, N, table_capacities, reservations): This function takes the number of tables (M), number of reservations (N), a list of table capacities, and a list of reservations and returns the maximum number of reservations that can be accommodated. table_capacities.sort() reservations.sort() table_index = 0 reservation_index = 0 accommodated_reservations = 0 while table_index < M and reservation_index < N: if reservations[reservation_index] <= table_capacities[table_index]: accommodated_reservations += 1 reservation_index += 1 table_index += 1 else: table_index += 1 return accommodated_reservations"},{"question":"You are in charge of managing a warehouse inventory system. The inventory is stored in a dictionary where the keys are item names and the values are the quantities of each item. Implement a set of functions to perform inventory operations. **Operations:** 1. **Add Item** - Add an item to the inventory with the specified quantity. If the item already exists, increase its quantity by the specified amount. 2. **Remove Item** - Remove a specified quantity of an item from the inventory. If the item does not exist, print an error message. If the specified quantity exceeds the available quantity, remove only the available quantity. 3. **Check Inventory** - Return the current quantity of a specified item. If the item does not exist, return 0. 4. **Print Inventory** - Print all items and their quantities in the inventory. Implement the following functions: ```python def add_item(inventory, item, quantity): Adds a specified quantity of the item to the inventory. :param inventory: dict, the current inventory. :param item: str, the item to add. :param quantity: int, the quantity to add. def remove_item(inventory, item, quantity): Removes a specified quantity of the item from the inventory. :param inventory: dict, the current inventory. :param item: str, the item to remove. :param quantity: int, the quantity to remove. def check_inventory(inventory, item): Checks the quantity of a specified item in the inventory. :param inventory: dict, the current inventory. :param item: str, the item to check. :return: int, the quantity of the item. def print_inventory(inventory): Prints all items and their quantities in the inventory. :param inventory: dict, the current inventory. ``` **Input** The functions will not read from input, but to help in understanding, the input can be considered as a series of commands: ``` add_item(\\"apple\\", 10) add_item(\\"banana\\", 5) remove_item(\\"apple\\", 3) check_inventory(\\"apple\\") ``` **Output** The functions will not produce any output directly, but the expected outputs given the example inputs would be: ``` remove_item: \'apple\' after removal of 3 units check_inventory: 7 print_inventory: apple 7, banana 5 ``` **Constraints** - The item names will only consist of lowercase Latin letters (a-z) and spaces, and their lengths will not exceed 50 characters. - The quantities will be positive integers not exceeding 1000. - The number of operations will not exceed 10000.","solution":"def add_item(inventory, item, quantity): Adds a specified quantity of the item to the inventory. :param inventory: dict, the current inventory. :param item: str, the item to add. :param quantity: int, the quantity to add. if item in inventory: inventory[item] += quantity else: inventory[item] = quantity def remove_item(inventory, item, quantity): Removes a specified quantity of the item from the inventory. :param inventory: dict, the current inventory. :param item: str, the item to remove. :param quantity: int, the quantity to remove. if item in inventory: if inventory[item] > quantity: inventory[item] -= quantity else: inventory[item] = 0 else: print(f\\"Error: {item} does not exist in the inventory.\\") def check_inventory(inventory, item): Checks the quantity of a specified item in the inventory. :param inventory: dict, the current inventory. :param item: str, the item to check. :return: int, the quantity of the item. return inventory.get(item, 0) def print_inventory(inventory): Prints all items and their quantities in the inventory. :param inventory: dict, the current inventory. for item, quantity in inventory.items(): print(f\\"{item}: {quantity}\\")"},{"question":"You are tasked with creating a scheduling algorithm for a robotic arm in a factory. The robotic arm operates on an assembly line that processes various types of widgets. Each widget has a different production time associated with it. Your algorithm needs to determine the optimal order of production so that the total idle time of the robotic arm is minimized. The robotic arm processes widgets in a sequential manner – it can only work on one widget at a time. At the start of production, the robotic arm is idle and can begin working on any widget. Once a widget is completely processed, the robotic arm will immediately start processing the next widget in the schedule, unless it has finished all assigned widgets. The objective is to minimize the total idle time, which is the sum of the idle times (time periods when the robotic arm is not working due to waiting for the next widget to become available). Assume that moving from one widget to the next does not incur any time cost. Input The first line of input contains a single integer n (1 ≤ n ≤ 105), the number of widgets. The next line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 104), where ti represents the production time required for the ith widget in seconds. Output Output a single integer, the minimized total idle time of the robotic arm when processing the widgets in the optimal order. If there are multiple optimal schedules, output the total idle time for any of them. Example Input 4 3 6 2 8 Output 0 Input 5 2 3 5 1 2 Output 0 Explanation In the first example, the optimal order is already [3, 6, 2, 8], and the robotic arm does not have any idle time in between processing these widgets. In the second example, one optimal order would be [1, 2, 2, 3, 5]. Again, the robotic arm does not have any idle time in this arrangement. Note: The conditions ensure that there will always be an order to minimize the total idle time to zero as the robotic arm can always move on to the next widget immediately after finishing the current one without needing to wait.","solution":"def min_total_idle_time(n, production_times): Given the number of widgets and their respective production times, returns the minimized total idle time of the robotic arm. # Sorting the production times helps in minimizing the idle time production_times.sort() return 0 # As the optimal order has 0 idle time"},{"question":"Objective Develop a program to manage a simple task scheduler. The scheduler will execute tasks in the order of their priority and arrival time. In case two tasks have the same priority, the one that arrived first should be executed first. The tasks will be represented as tuples of the form (arrival_time, priority, task_name). Task You need to implement the function `schedule_tasks(tasks: List[Tuple[int, int, str]]) -> List[str]`. Given a list of tasks represented as tuples (arrival_time, priority, task_name), the function should return a list of task names in the order they should be executed. Input The function will take a single argument: - `tasks` (List[Tuple[int, int, str]]): A list of tuples representing the tasks. Each tuple contains: - `arrival_time` (int): The time at which the task arrives. - `priority` (int): The priority level of the task. Lower values indicate higher priority. - `task_name` (str): The name of the task. Constraints: - `1 <= len(tasks) <= 100` - `0 <= arrival_time <= 10^4` - `0 <= priority <= 10` - Task names are unique strings. Output The function should return a list of strings representing the names of the tasks in the order they should be executed. Examples # Example 1 Input: ```python tasks = [ (0, 1, \\"A\\"), (1, 2, \\"B\\"), (2, 1, \\"C\\"), (3, 0, \\"D\\") ] ``` Output: ```python [\\"D\\", \\"A\\", \\"C\\", \\"B\\"] ``` # Example 2 Input: ```python tasks = [ (0, 2, \\"task1\\"), (2, 1, \\"task2\\"), (1, 1, \\"task3\\"), (3, 3, \\"task4\\") ] ``` Output: ```python [\\"task3\\", \\"task2\\", \\"task1\\", \\"task4\\"] ``` # Example 3 Input: ```python tasks = [ (0, 0, \\"x\\"), (0, 1, \\"y\\") ] ``` Output: ```python [\\"x\\", \\"y\\"] ``` Notes - The tasks should be scheduled primarily based on their priority. - If two tasks have the same priority, schedule the one with the earlier arrival time first. - You may assume all tasks have unique names and no two tasks arrive at the same time with the same priority. Implement the `schedule_tasks` function to complete the task.","solution":"from typing import List, Tuple def schedule_tasks(tasks: List[Tuple[int, int, str]]) -> List[str]: # Sort the tasks first by priority, then by arrival time tasks.sort(key=lambda x: (x[1], x[0])) # Extract and return the task names in sorted order return [task[2] for task in tasks]"},{"question":"A software company is developing an inventory management system. One of the requirements is to have an efficient method to track the history of inventory levels for each product. You need to implement a version control system for inventory levels. The system should allow two main operations: 1. Update the inventory level of a product at a specific time. 2. Query the inventory level of a product at a particular timestamp. To simplify, assume that each product has a unique ID and inventory level can be represented by an integer. Input - The first line contains two integers `n` (1 ≤ n ≤ 1000) and `q` (1 ≤ q ≤ 100000) — the number of products and the number of operations. - The next `q` lines describe the operations. Each operation has the following format: - \\"update `product_id` `timestamp` `level`\\" — update the inventory level of the product specified by `product_id` at the given `timestamp` to `level`. - \\"query `product_id` `timestamp`\\" — query the inventory level of the product specified by `product_id` at the given `timestamp`. It is guaranteed that `product_id` will be an integer between 1 and `n`, and `timestamp` is a non-negative integer. Output - For each query operation, output the inventory level of the specified product at the specified timestamp. If there was no update before that timestamp for that product, output \\"No record\\". Example Input 5 6 update 1 5 100 update 3 3 50 update 1 10 300 query 1 7 query 3 2 query 3 4 Output 100 No record 50","solution":"import bisect from collections import defaultdict class InventoryManagementSystem: def __init__(self, n): self.n = n self.history = defaultdict(list) def update(self, product_id, timestamp, level): self.history[product_id].append((timestamp, level)) def query(self, product_id, timestamp): if product_id not in self.history: return \\"No record\\" timestamps = [t for t, l in self.history[product_id]] pos = bisect.bisect_right(timestamps, timestamp) if pos == 0: return \\"No record\\" return self.history[product_id][pos - 1][1] def manage_inventory(n, operations): ims = InventoryManagementSystem(n) results = [] for operation in operations: if operation[0] == \\"update\\": _, product_id, timestamp, level = operation ims.update(product_id, timestamp, level) elif operation[0] == \\"query\\": _, product_id, timestamp = operation result = ims.query(product_id, timestamp) results.append(result) return results"},{"question":"Given a list of numbers, your task is to determine whether the list forms a valid arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference between any two consecutive numbers is the same. Input The input contains two lines: 1. An integer n (2 ≤ n ≤ 100) – the number of elements in the list. 2. n space-separated integers – the elements of the list. Output Print \\"YES\\" if the list forms an arithmetic progression, otherwise print \\"NO\\". Examples Input 5 2 4 6 8 10 Output YES Input 4 3 1 3 7 Output NO Input 3 5 5 5 Output YES Note An arithmetic progression with a common difference of 0, like [5, 5, 5], is considered valid.","solution":"def is_arithmetic_progression(n, numbers): Determines if the list of numbers forms an arithmetic progression. Args: n (int): The number of elements in the list. numbers (list of int): The elements of the list. Returns: str: \\"YES\\" if the list forms an arithmetic progression, otherwise \\"NO\\". if n <= 1: return \\"NO\\" numbers.sort() common_difference = numbers[1] - numbers[0] for i in range(2, n): if numbers[i] - numbers[i - 1] != common_difference: return \\"NO\\" return \\"YES\\""},{"question":"A company is organizing a marathon and needs to determine the optimum number of water stations to place along the marathon route. Participants have a maximum distance they can run without needing water. Determine the minimum number of water stations required to ensure all participants can finish the marathon without exceeding their maximum running distance without water. Constraints * 1 ≤ D ≤ 10^9 (total distance of the marathon) * 1 ≤ M ≤ 10^9 (maximum distance a participant can run without water) Input Input is given from Standard Input in the following format: D M Output Print the minimum number of water stations needed along the route. Examples Input 42 10 Output 4 Input 100 20 Output 4 Input 30 15 Output 1 Input 1 1 Output 0","solution":"def min_water_stations(D, M): Determines the minimum number of water stations required for a marathon. Parameters: D (int): Total distance of the marathon. M (int): Maximum distance a participant can run without water. Returns: int: Minimum number of water stations needed. if D <= M: return 0 return (D + M - 1) // M - 1"},{"question":"You are given two integer arrays, nums1 and nums2, representing the digits of two large numbers. The digits are stored in reverse order and each of their elements contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Input - Two lines of input, first line contains the digits of nums1. - Second line contains the digits of nums2. Output - Output the sum as a linked list, where each node contains a single digit. Constraints - 1 ≤ nums1.length, nums2.length ≤ 100 - 0 ≤ nums1[i], nums2[i] ≤ 9 Sample Input [2,4,3] [5,6,4] Sample Output [7,0,8] Output Details: 342 + 465 = 807.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(nums1, nums2): def list_to_number(lst): num = 0 for i in range(len(lst)): num += lst[i] * (10 ** i) return num def number_to_list(num): if num == 0: return [0] result = [] while num > 0: result.append(num % 10) num = num // 10 return result num1 = list_to_number(nums1) num2 = list_to_number(nums2) total = num1 + num2 result_list = number_to_list(total) dummy_head = ListNode() current = dummy_head for digit in result_list: current.next = ListNode(digit) current = current.next return dummy_head.next"},{"question":"A warehouse management system operates by placing boxes on shelves in a specific order. Each shelf has a limit on the weight it can bear. The warehouse receives boxes of different weights to be placed on the shelves sequentially. The task is to determine whether it is possible to place all the boxes on the available shelves without exceeding the weight limits. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), the number of boxes and shelves, respectively. The second line contains n integers, where the i-th number represents the weight of the i-th box (1 ≤ weight ≤ 1000). The third line contains m integers, where the j-th number represents the weight limit of the j-th shelf (1 ≤ limit ≤ 1000). Output Print \\"YES\\" (without quotes) if it is possible to place all the boxes on the shelves without exceeding any shelf\'s weight limit. Print \\"NO\\" (without quotes) otherwise. Examples Input 3 2 10 20 30 50 50 Output YES Input 3 2 10 20 30 40 15 Output NO","solution":"def can_place_boxes_on_shelves(n, m, box_weights, shelf_limits): Determines if it is possible to place all boxes on the shelves without exceeding the weight limits. Parameters: n (int): Number of boxes m (int): Number of shelves box_weights (list of int): Weights of the boxes shelf_limits (list of int): Weight limits of the shelves Returns: str: \\"YES\\" if all boxes can be placed without exceeding shelf limits, \\"NO\\" otherwise box_weights.sort(reverse=True) shelf_limits.sort(reverse=True) for i in range(min(n, m)): if box_weights[i] > shelf_limits[i]: return \\"NO\\" return \\"YES\\""},{"question":"Given a positive integer n, write a function that determines if n is a happy number. A happy number is defined by the following process: 1. Starting with any positive integer, replace the number by the sum of the squares of its digits. 2. Repeat the process until the number either equals 1 or loops endlessly in a cycle that does not include 1. 3. If it equals 1, then it is a happy number. 4. If it does not, then it is not a happy number. For example, the number 19 is a happy number, as the process works as follows: 1. 1² + 9² = 82 2. 8² + 2² = 68 3. 6² + 8² = 100 4. 1² + 0² + 0² = 1 Therefore, since it arrives at 1, 19 is a happy number. Write a function `is_happy_number(n: int) -> bool` that takes a positive integer n and returns True if n is a happy number, and False otherwise. Function Signature: ```python def is_happy_number(n: int) -> bool: ``` # Input * An integer `n` (1 ≤ n ≤ 10^5). # Output * A boolean value: `True` if `n` is a happy number, `False` otherwise. # Example ```python print(is_happy_number(19)) # True print(is_happy_number(2)) # False ```","solution":"def is_happy_number(n: int) -> bool: Determines if a number is a happy number. A happy number is a number defined by the following process: 1. Replace the number by the sum of the squares of its digits. 2. Repeat the process until the number equals 1 or it loops endlessly in a cycle. 3. If it equals 1, then it is a happy number. 4. If it does not, then it is not a happy number. Args: n: A positive integer. Returns: bool: True if n is a happy number, False otherwise. def get_next(number): return sum(int(x) ** 2 for x in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1"},{"question":"Karen loves working with alphabets and palindromes. She wants to form the longest palindrome from a given string. A palindrome is a string that reads the same backward as forward. In forming the palindrome, she can rearrange the characters of the given string in any order. Help Karen determine the length of the longest possible palindrome she can make. Input The input consists of a single string s (1 ≤ |s| ≤ 1000) consisting of lowercase and uppercase English letters. Output Output a single integer, the length of the longest palindrome that can be formed using the characters of the given string. Examples Input abccccdd Output 7 Input aA Output 1 Note In the first example, one of the longest palindromes that can be formed is \\"dccaccd\\", whose length is 7. In the second example, since palindromes are case sensitive and we have \'a\' and \'A\', the longest palindrome that can be formed has length 1 because neither can pair with anything.","solution":"def longest_palindrome_length(s): Determines the length of the longest palindrome that can be formed using the characters of the given string. from collections import Counter count = Counter(s) length = 0 odd_found = False for freq in count.values(): if freq % 2 == 0: length += freq else: length += freq - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Pari gave Arya another interesting problem. Arya enjoys solving problems to find the number of unique paths in different environments. Pari then realized Arya never encountered problems involving multiple constraints. So, it\'s time for a new challenge! Arya needs to calculate the number of unique paths from the top-left corner to the bottom-right corner of a grid. However, this time, Arya must avoid obstacles and ensure that he does not visit any blocked cells. Here\'s how he defines the problem: Given a grid of size m x n, where each cell is either empty or an obstacle, find the number of unique paths from the top-left corner to the bottom-right corner. Arya can only move either down or right at any point in time. y represents a cell that is empty, while x represents a cell with an obstacle. Arya should write a code that computes the number of valid paths avoiding all obstacles. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and the number of columns in the grid respectively. Each of the next m lines contains exactly n characters (\'y\' for an empty cell, \'x\' for an obstacle). Output Print a single integer — the number of unique paths from the top-left corner to the bottom-right corner, avoiding all obstacles. Examples Input 3 4 yyyy yxxy yyyy Output 4 Input 2 2 yy yx Output 0","solution":"def unique_paths_with_obstacles(m, n, grid): if grid[0][0] == \'x\' or grid[m-1][n-1] == \'x\': return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == \'x\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a list of N integers, where the i-th integer is B_i. Your task is to determine if there exists a contiguous subarray (a consecutive subsequence) that has a sum equal to a given integer M. Constraints * 1 leq N leq 10^5 * -10^9 leq B_i leq 10^9 * -10^9 leq M leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N M B_1 B_2 ... B_N Output Print \\"YES\\" if there exists a contiguous subarray whose sum is equal to M; otherwise, print \\"NO\\". Examples Input 5 7 1 2 3 4 5 Output YES Input 5 15 1 2 3 4 5 Output YES Input 3 10 2 2 2 Output NO","solution":"def has_subarray_with_sum(N, M, B): Determines if there exists a contiguous subarray whose sum is equal to M. Args: N -- the number of elements in the list M -- the target sum B -- list of integers Returns: \\"YES\\" if such subarray exists, otherwise \\"NO\\" current_sum = 0 prefix_sums = {0} for i in range(N): current_sum += B[i] if (current_sum - M) in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"A rearranged number is created by rearranging its digits. For example, the numbers 123, 132, 213, 231, 312, and 321 are all rearranged versions of 123. You are given a positive integer n and must find the minimum possible rearranged number that is greater than n. If no such number exists, return -1. Input A single integer n (1 ≤ n ≤ 10^9). Output Print the smallest rearranged number greater than n, or -1 if no such number exists. Examples Input 123 Output 132 Input 321 Output -1 Input 2041 Output 2104 Input 201 Output 210","solution":"def smallest_rearranged_number(n): Find the smallest rearranged number greater than the given number `n`. If no such number exists, return -1. digits = list(str(n)) length = len(digits) # Find the first digit from the end that is smaller than its next digit for i in range(length - 2, -1, -1): if digits[i] < digits[i + 1]: break else: return -1 # No such digit found, n is the largest rearranged number # Find the smallest digit on the right side of digits[i] that is larger than digits[i] for j in range(length - 1, i, -1): if digits[j] > digits[i]: break # Swap the found digits[i] and digits[j] digits[i], digits[j] = digits[j], digits[i] # Reverse the sequence after the position i to get the smallest number digits = digits[:i + 1] + sorted(digits[i + 1:]) return int(\\"\\".join(digits))"},{"question":"You are given a grid with some cells containing obstacles. Create a program to find the number of distinct paths from the top-left corner to the bottom-right corner of the grid, moving only down or right at any step while avoiding obstacles. The grid will be in the form of an `n x m` matrix, where 1 ≤ n, m ≤ 1000. Each cell is denoted by `0` (an empty cell) or `1` (an obstacle), and the top-left and bottom-right cells will always be `0` (no obstacles). **Input** - The first line contains two integers, `n` and `m`, representing the dimensions of the grid. - The next `n` lines each contain `m` integers (either `0` or `1`), representing the grid. **Output** - A single integer, the number of distinct paths from the top-left to the bottom-right of the grid. **Example Input | Example Output** --- | --- | 3 3 | 2 0 0 0 | 0 1 0 | 0 0 0 | 3 3 | 1 0 1 0 | 0 1 0 | 0 0 0 | 4 4 | 1 0 0 0 0 | 1 1 1 0 | 0 0 0 0 | 0 0 0 0 | 2 2 | 1 0 1 | 0 0 | **Input** The input consists of multiple datasets. Input ends when `n` and `m` are both 0. The number of datasets does not exceed 10, and you can assume that each dataset has at least one possible path if `n` and `m` are both more than 1. **Output** For each dataset, output the number of distinct paths on a new line. **Example Input** 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 4 4 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 2 2 0 1 0 0 0 0 **Example Output** 2 1 1 1","solution":"def find_paths(grid): n = len(grid) m = len(grid[0]) # Create a DP table to store the number of ways to reach each cell. dp = [[0 for _ in range(m)] for _ in range(n)] # Initialize the starting point dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def process_input(input_data): lines = input_data.split(\'n\') result = [] idx = 0 while idx < len(lines): n, m = map(int, lines[idx].split()) if n == 0 and m == 0: break idx += 1 grid = [] for _ in range(n): grid.append(list(map(int, lines[idx].split()))) idx += 1 result.append(find_paths(grid)) return result def main(input_data): results = process_input(input_data) for res in results: print(res) input_data = 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 4 4 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 2 2 0 1 0 0 0 0 main(input_data)"},{"question":"Emma is a park designer and she is tasked with creating a new park in a city. The park has multiple flowerbeds, placed consecutively in a line. Each flowerbed has a specific height of flowers. Emma wants to place decorative fences between consecutive flowerbeds. Each fence can connect two flowerbeds only if the height difference between the flowers of these two flowerbeds is less than or equal to a certain limit. Given the heights of the flowers in the flowerbeds and the maximum allowed height difference, determine if it is possible to place decorative fences between all pairs of consecutive flowerbeds. Additionally, if it is possible, specify the fence height for each pair of consecutive flowerbeds. Input - The first line contains two integers n (2 ≤ n ≤ 2×10^5) and d (1 ≤ d ≤ 10^9) — the number of flowerbeds and the maximum allowed height difference. - The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the flowers in the flowerbeds. Output - If it is impossible to place decorative fences between each pair of consecutive flowerbeds, print \\"No\\" (without the quotes). - Otherwise, print \\"Yes\\" (without the quotes) in the first line, and in the second line print n - 1 integers f1, f2, ..., fn - 1, where fi is the height difference between the i-th and (i + 1)-th flowerbeds, that satisfies the condition. Examples Input 5 3 4 7 9 11 14 Output Yes 3 2 2 3 Input 3 1 5 7 8 Output No Input 4 5 1 6 10 15 Output Yes 5 4 5 Note In the first sample, the differences between flowerbed heights are 3, 2, 2, and 3, all of which are less than or equal to the allowed height difference of 3. In the second sample, the difference between the first and second flowerbeds is 2, which exceeds the allowed difference of 1, making it impossible to place the fence between all flowerbeds. In the third sample, the differences between flowerbed heights are within the allowed limit of 5.","solution":"def is_possible_to_place_fences(n, d, heights): Function to determine if it is possible to place fences between every pair of consecutive flowerbeds given the height differences. differences = [] for i in range(n - 1): diff = abs(heights[i] - heights[i + 1]) if diff > d: return \\"No\\" differences.append(diff) return \\"Yesn\\" + \' \'.join(map(str, differences))"},{"question":"In an ancient kingdom, there is a village with a row of houses numbered from 1 to n. Each house has a unique treasure with a certain value associated with it. Due to an ancient curse, some treasures are negative while others may be positive. The villagers want to find a contiguous sequence of houses such that the sum of the values of their treasures is maximized. Your task is to help the villagers by finding the maximum sum of a contiguous subsequence of houses. Write a program that, given an integer n and an array of n integers representing the treasure values of the houses, returns the maximum sum of a contiguous subsequence of houses. # Input - The first line contains an integer n (1 ≤ n ≤ 100000) — the number of houses in the village. - The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the treasure values of the houses. # Output Output a single integer — the maximum sum of a contiguous subsequence of houses. # Example Input ``` 5 -2 1 -3 4 -1 2 1 -5 4 ``` Output ``` 6 ``` Explanation The contiguous subsequence with maximum sum is [4, -1, 2, 1] which has the sum 6. # Note Ensure that your program efficiently handles the given constraints. Consider dynamic programming techniques to achieve optimal results.","solution":"def max_subarray_sum(n, arr): Returns the maximum sum of a contiguous subsequence of houses. :param n: int, number of houses :param arr: List[int], treasure values of the houses :return: int, maximum sum of a contiguous subsequence of houses current_sum = max_sum = arr[0] for value in arr[1:]: current_sum = max(value, current_sum + value) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Kevin will celebrate his birthday soon and he loves prime numbers. A prime number is a positive integer greater than 1, that has no positive integer divisors other than 1 and itself. Kevin\'s favorite task is to count the number of prime numbers that exist between two given integers l and r (inclusive). Kevin knows you are good at programming, so he decided to give you a challenge. He asks you to write a program that, given two integers l and r, finds the number of prime numbers between l and r (inclusive). Input The only line of the input contains two space-separated integers l and r (1 ≤ l ≤ r ≤ 10^6). Output Print the number of prime numbers between l and r (inclusive). Examples Input 10 20 Output 4 Input 1 10 Output 4 Note In the first example, the prime numbers between 10 and 20 are 11, 13, 17, and 19. In the second example, the prime numbers between 1 and 10 are 2, 3, 5, and 7.","solution":"def count_primes_in_range(l, r): Returns the number of prime numbers between l and r (inclusive). if l > r: return 0 # Sieve of Eratosthenes to find all primes less than equal to r is_prime = [True] * (r + 1) is_prime[0], is_prime[1] = False, False p = 2 while p * p <= r: if is_prime[p]: for i in range(p * p, r + 1, p): is_prime[i] = False p += 1 # Count primes in given range [l, r] count = 0 for i in range(l, r + 1): if is_prime[i]: count += 1 return count"},{"question":"You are given a matrix of size n x n, where each cell contains an integer. Your task is to find the sum of the maximum element in each row. Input format The first line contains one integer n — the size of the matrix. Each of the next n lines contains n integers describing the elements of the matrix. Output format Print one integer — the sum of the maximum element in each row. Constraints 1 ≤ n ≤ 100 1 ≤ matrix elements ≤ 10^9 SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 18 Explanation In the sample test, the matrix is: 1 2 3 4 5 6 7 8 9 The maximum elements in each row are 3, 6, and 9, and their sum is 3 + 6 + 9 = 18.","solution":"def sum_of_max_elements(matrix): Returns the sum of the maximum element in each row of the given matrix. Args: matrix (list of list of int): A 2D list representing the matrix. Returns: int: Sum of the maximum elements in each row. return sum(max(row) for row in matrix) def get_matrix_and_sum(n, matrix_values): Given the size of the matrix and the matrix values, this function constructs the matrix and returns the sum of the maximum elements in each row. Args: n (int): size of the matrix. matrix_values (list of list of int): matrix elements Returns: int: Sum of the maximum elements in each row. matrix = [] idx = 0 for i in range(n): row = [matrix_values[idx + j] for j in range(n)] matrix.append(row) idx += n return sum_of_max_elements(matrix)"},{"question":"In a distant kingdom, there is an ancient land divided into a grid of n rows and m columns, where each cell is either land (denoted by 1) or water (denoted by 0). The kingdom is experiencing a period of heavy rains, which causes certain areas of land to become submerged in water. The king wants to know how many distinct islands are currently in his kingdom. An island is defined as a group of adjacent land cells (1s) connected horizontally or vertically (not diagonally). Given the grid representation of the kingdom after the rains, help the king determine the number of islands present. Input The first line of input contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), representing the number of rows and columns in the grid, respectively. The next n lines each contain m space-separated integers (either 0 or 1), representing the grid cells. Output Print a single integer - the number of distinct islands in the grid. Examples Input 4 5 1 1 0 0 0 1 1 0 1 1 0 0 0 1 1 0 0 0 0 0 Output 2 Input 3 3 1 0 0 0 1 1 1 0 1 Output 3","solution":"def count_islands(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return grid[x][y] = 0 # Mark this cell as visited # Explore all four directions dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: # Found an island island_count += 1 dfs(i, j) # Mark all its parts return island_count"},{"question":"A small bakery has recently decided to automate their order processing system. They receive orders that consist of various baked goods with specified quantities. Each type of baked good has a different preparation time, and the bakery can prepare one type of baked good at a time. The goal is to determine the minimum total preparation time required to fulfill the given orders. You are given a list of orders, where each order includes the type of baked good and the quantity ordered. You are also given the preparation time for each type of baked good per unit. Write a function to help the bakery minimize the total preparation time for all orders. The function should take the following inputs: 1. An integer n, the number of different types of baked goods. 2. An integer m, the number of orders. 3. An array t of length n, where t[i] is an integer representing the preparation time (in minutes) for one unit of the (i+1)-th type of baked good. 4. An array orders of length m, where each element is a tuple (type_i, quantity_i) representing an order for quantity_i units of the (type_i)-th type of baked good. The function should output a single integer, the minimum total preparation time to fulfill all orders. Examples: ```python def minimum_preparation_time(n, m, t, orders): # your code here ``` Input: 3 4 [5, 3, 8] [(1, 2), (2, 5), (3, 1), (2, 3)] Output: 41 Explanation: - The orders require the following preparation times: - 2 units of type 1 good: 2 * 5 = 10 minutes - 5 units of type 2 good: 5 * 3 = 15 minutes - 1 unit of type 3 good: 1 * 8 = 8 minutes - 3 additional units of type 2 good: 3 * 3 = 9 minutes - The total preparation time is 10 + 15 + 8 + 9 = 41 minutes.","solution":"def minimum_preparation_time(n, m, t, orders): Calculate the minimum total preparation time to fulfill all orders. Parameters: n (int): Number of different types of baked goods. m (int): Number of orders. t (List[int]): Preparation time for each type of baked good. orders (List[Tuple[int, int]]): List of orders, where each order is a tuple (type, quantity). Returns: int: Minimum total preparation time to fulfill all orders. total_time = 0 for order in orders: type_i, quantity_i = order total_time += t[type_i - 1] * quantity_i return total_time"},{"question":"Write a program that takes an integer N as input, followed by N integers representing an array A. The task is to create a new array B where each element B[i] is the sum of all elements in the array A except the element A[i]. Output each element of the array B in a new line. Input: There will be N+1 lines of input: - The first line contains the integer N. - The next N lines contain each integer of the array A. Output: Print N lines where each line contains the element B[i]. Constraints: 1 ≤ N ≤ 10 1 ≤ A[i] ≤ 10 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 5 4 3","solution":"def create_new_array(N, A): Given an array of integers, this function returns a new array where each element at position i is the sum of all elements in the original array except the one at position i. Parameters: N (int): The number of elements in the array. A (list): List of integers. Returns: list: The new list with the desired sums. total_sum = sum(A) # Calculate the sum of all elements once B = [] for i in range(N): B.append(total_sum - A[i]) # Append the sum excluding A[i] return B # Example usage: # N = 3 # A = [1, 2, 3] # print(create_new_array(N, A)) # Output should be [5, 4, 3]"},{"question":"Imagine that you are working on a project where you need to manage a collection of rectangular plots of land. Each plot can have one or more trees planted on it, represented by a two-dimensional grid where `1` indicates a tree and `0` indicates an empty space. You need to write a program to perform various operations on these plots, including counting the number of trees, adding a new row or column, and transplanting trees between different plots. You will implement a class `Plot` with the following methods: 1. **__init__ (matrix)**: Initializes the plot with the given 2D grid `matrix` (a list of lists of integers). 2. **add_row (row)**: Adds a new row `row` (list of integers) to the bottom of the plot. 3. **add_column (col)**: Adds a new column `col` (list of integers) to the right side of the plot. 4. **count_trees()**: Returns the number of trees (`1`s) in the plot. 5. **transplant_trees (other_plot, coordinates)**: Transplants trees from the `other_plot` to the current plot. The `coordinates` argument is a list of four integers `[x1, y1, x2, y2]` that specifies the top-left and bottom-right corners of the rectangular section of `other_plot` to be transplanted. The transplanted section should replace the corresponding section in the current plot. If the coordinates are out of bounds of either plot, or if the section dimensions do not match, raise a ValueError. Assume that the inputs are valid and the initial grid is non-empty. Implement the class `Plot` to perform the specified operations. # Sample Input and Output ```python # Initialize a plot plot1 = Plot([[0, 1, 0], [1, 0, 0], [0, 0, 1]]) plot2 = Plot([[1, 1], [0, 0], [1, 0]]) # Count trees in plot1 print(plot1.count_trees()) # Output: 3 # Add a new row to plot1 plot1.add_row([0, 0, 1]) print(plot1.count_trees()) # Output: 4 # Add a new column to plot2 plot2.add_column([1, 0, 1]) print(plot2.count_trees()) # Output: 4 # Transplant trees from plot2 to plot1 plot1.transplant_trees(plot2, [0, 0, 1, 1]) print(plot1.count_trees()) # Output: 5 ``` # Constraints - The number of rows and columns in any plot will not exceed 1000. - Each row and column addition will have the same number of elements as the existing columns and rows respectively.","solution":"class Plot: def __init__(self, matrix): self.matrix = matrix def add_row(self, row): if len(row) != len(self.matrix[0]): raise ValueError(\\"Row length must match the number of columns in the plot\\") self.matrix.append(row) def add_column(self, col): if len(col) != len(self.matrix): raise ValueError(\\"Column length must match the number of rows in the plot\\") for i in range(len(self.matrix)): self.matrix[i].append(col[i]) def count_trees(self): return sum(sum(row) for row in self.matrix) def transplant_trees(self, other_plot, coordinates): x1, y1, x2, y2 = coordinates if x2 - x1 != len(other_plot.matrix) - 1 or y2 - y1 != len(other_plot.matrix[0]) - 1: raise ValueError(\\"The dimensions of the transplant section must match the size of the other plot section\\") for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): self.matrix[i][j] = other_plot.matrix[i - x1][j - y1]"},{"question":"You are given a list of integers and a target integer. Your task is to determine if there are two distinct indices i and j in the list such that the sum of the integers at these indices equals the target. Input The first line contains an integer n (2 ≤ n ≤ 105), the number of integers in the list. The second line contains n integers, each separated by a space. Each integer is between -109 and 109 inclusive. The third line contains a single integer, the target sum. Output Output a single line containing \\"YES\\" (without quotes) if such indices exist, otherwise print \\"NO\\". Examples Input 5 2 7 11 15 1 9 Output YES Input 4 1 2 3 4 8 Output NO Explanation In the first example, the integers at indices 0 and 1 (2 + 7) sum up to 9, which is the target. Hence, the output is \\"YES\\". In the second example, no two distinct indices have elements that sum up to the target 8. Hence, the output is \\"NO\\".","solution":"def find_indices_with_sum(nums, target): Determines if there are two distinct indices i and j in the list such that the sum of the integers at these indices equals the target. seen = set() for num in nums: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Problem You are given two non-negative integers `a` and `b`. You need to find the smallest non-negative integer `x` such that `(a + x) % b == 0`. Constraints The input satisfies the following conditions: * 0 leq a leq 10^9 * 1 leq b leq 10^9 Input The input is given in the following format: a b Output Output the smallest non-negative integer `x` that satisfies the condition in one line. Examples Input 5 3 Output 1 Input 10 7 Output 4","solution":"def smallest_x(a, b): Returns the smallest non-negative integer x such that (a + x) % b == 0 remainder = a % b if remainder == 0: return 0 else: return b - remainder"},{"question":"Dean is working on a new feature for a mobile application that involves animating text in a circular pattern. He needs a function that will help him rotate the text by a given number of positions. Specifically, Dean wants to create a function that can rotate the characters in the input string to the right by a specified number of positions. Input The input consists of two lines. The first line contains a non-empty string s (1 ≤ |s| ≤ 10^5) consisting of only lowercase English alphabets. The second line contains an integer d (0 ≤ d ≤ 10^5) which represents the number of positions to rotate the string to the right. Output Print the rotated string after rotating the characters to the right by d positions. Examples Input hello 2 Output lohel Input rotate 3 Output aterot Note In the first example, rotating the string \\"hello\\" to the right by 2 positions gives \\"lohel\\". In the second example, rotating the string \\"rotate\\" to the right by 3 positions gives \\"aterot\\".","solution":"def rotate_string(s, d): Rotates the string s to the right by d positions. Parameters: s (str): The input string to rotate. d (int): The number of positions to rotate the string to the right. Returns: str: The rotated string. n = len(s) d = d % n # To handle the cases when d is larger than the length of s return s[-d:] + s[:-d]"},{"question":"A company operates an infinite two-dimensional grid network of roads and junction points, where each point on the grid (i, j) is a junction. The company has constructed a special task that requires traveling through these grid points. An engineer starts at the point (0, 0) and needs to travel to the point (x, y). The engineer can only move either to the right or upwards to neighboring junctions. However, to complete the task in the minimum amount of time, the engineer must find the number of distinct shortest paths from (0, 0) to (x, y). Given this information, you need to determine how many such paths exist. Input: - The input consists of a single line containing two integers x and y (0 ≤ x, y ≤ 100). Output: - Output a single integer, which is the number of distinct shortest paths from (0, 0) to (x, y). Example Input 2 2 Output 6 Input 3 3 Output 20 Input 4 2 Output 15","solution":"def distinct_paths(x, y): from math import comb # The number of distinct shortest paths from (0, 0) to (x, y) is given by combinations return comb(x + y, x)"},{"question":"Given a coordinate plane with a directed graph embedded into it, you need to find the shortest path from point A to point B. The graph\'s edges are defined by a list of line segments on the plane and each segment has a weight representing the cost to traverse that segment. Each edge is represented by two endpoints ((x1, y1), (x2, y2)) and a weight w, indicating a directed edge from (x1, y1) to (x2, y2) with cost w. You are provided with the coordinates of points A and B, and a list of all the edges. Your task is to determine the minimum cost required to travel from point A to point B, or determine if there is no path from A to B. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of multiple lines: 1. The first line contains two integers xA and yA, the coordinates of point A. 2. The second line contains two integers xB and yB, the coordinates of point B. 3. The third line contains an integer n (1 ≤ n ≤ 500), the number of edges. 4. The next n lines each contain five integers x1, y1, x2, y2, and w, defining an edge from (x1, y1) to (x2, y2) with cost w (1 ≤ w ≤ 10^6). Output For each test case, output a single integer: the minimum cost to travel from point A to point B, or -1 if there is no path from A to B. Example Input 2 0 0 3 3 3 0 0 1 1 4 1 1 2 2 1 2 2 3 3 2 0 0 4 4 4 0 0 1 1 1 1 1 2 2 1 2 2 3 3 1 3 3 4 4 1 Output 7 4 Note In the first test case, the minimum cost path to travel from (0, 0) to (3, 3) is from (0, 0) -> (1, 1) -> (2, 2) -> (3, 3) with a total cost of 4 + 1 + 2 = 7. In the second test case, the minimum cost path to travel from (0, 0) to (4, 4) is from (0, 0) -> (1, 1) -> (2, 2) -> (3, 3) -> (4, 4) with a total cost of 1 + 1 + 1 + 1 = 4.","solution":"import heapq from collections import defaultdict import sys def dijkstra(graph, start, end): priority_queue = [(0, start)] distances = {start: 0} while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_vertex == end: return current_distance for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if neighbor not in distances or distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 def find_shortest_path(t, test_cases): results = [] for i in range(t): xA, yA = test_cases[i][\'A\'] xB, yB = test_cases[i][\'B\'] n = test_cases[i][\'edges_count\'] edges = test_cases[i][\'edges\'] graph = defaultdict(list) for (x1, y1, x2, y2, w) in edges: graph[(x1, y1)].append(((x2, y2), w)) start = (xA, yA) end = (xB, yB) result = dijkstra(graph, start, end) results.append(result) return results # Example test case to check the function t = 2 test_cases = [ { \'A\': (0, 0), \'B\': (3, 3), \'edges_count\': 3, \'edges\': [ (0, 0, 1, 1, 4), (1, 1, 2, 2, 1), (2, 2, 3, 3, 2), ] }, { \'A\': (0, 0), \'B\': (4, 4), \'edges_count\': 4, \'edges\': [ (0, 0, 1, 1, 1), (1, 1, 2, 2, 1), (2, 2, 3, 3, 1), (3, 3, 4, 4, 1), ] } ] print(find_shortest_path(t, test_cases)) # Output: [7, 4]"},{"question":"Jill is a botanist who has been monitoring the growth of a particular species of plant. She records the height of the plant every day for n days. Jill wants to find patterns in the growth and has decided to look for the longest contiguous subarray where the plant grows in a strictly increasing manner each day. A strictly increasing subarray is one where each element is greater than the previous element. To help Jill with her analysis, you need to determine the length of the longest strictly increasing contiguous subarray of the plant heights. Input The first line contains the single integer n (1 ≤ n ≤ 105) denoting the number of days Jill has recorded the height of the plant. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 105), where hi represents the height of the plant on the i-th day. Output Print a single integer denoting the length of the longest strictly increasing contiguous subarray. Examples Input 7 1 2 2 3 4 1 5 Output 3 Input 5 5 4 3 2 1 Output 1 Input 6 1 3 5 2 4 6 Output 3 Note In the first sample, the longest strictly increasing contiguous subarray is {2, 3, 4}, which has a length of 3. In the second sample, no elements are strictly increasing, so the length of the longest strictly increasing contiguous subarray is 1. In the third sample, the longest strictly increasing contiguous subarray is {2, 4, 6}, which has a length of 3.","solution":"def longest_increasing_subarray_length(n, heights): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given an array with integers where each integer represents the height of a person standing in a line. People are asked to form a queue such that each person is standing behind someone taller than themselves. If there are multiple such configurations, the queue with the maximum number of people should be chosen. However, a person cannot stand behind another person if they are of the same height. Write a function that outputs the sequence of heights in the queue according to the criteria mentioned. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of people in the line. The second line contains n integers representing the heights of the individuals. Output Output the sequence of heights forming the queue with the maximum number of people. If there are multiple sequences possible, return the one which starts with the shortest height. Examples Input 5 5 3 2 6 1 Output 1 2 3 5 6 Input 4 4 2 3 2 Output 2 3 4 Note In the first example, the resultant line is formed as follows: 1 -> 2 -> 3 -> 5 -> 6 In the second example, heights are considered so that: 2 -> 3 -> 4 It\'s ensured that no two adjacent elements in the queue have the same height, and each person stands behind someone taller. The queue cannot be formed with the repeated height \'2\'.","solution":"def form_queue(heights): Returns the sequence of heights forming the queue with the maximum number of people. The queue should be such that every person is standing behind someone taller than themselves. If there are multiple sequences possible, return the one which starts with the shortest height. unique_heights = sorted(set(heights)) return unique_heights # Example usage: # n = 5 # heights = [5, 3, 2, 6, 1] # Output: [1, 2, 3, 5, 6]"},{"question":"You are given an array of integers. You need to answer a series of queries on this array. Each query will ask for the sum of the elements between two specified indices, inclusive. You must process each query efficiently. Constraints * 1≤N≤10^5 - Number of elements in the array. * 1≤Q≤10^5 - Number of queries. * 1≤A[i]≤10^9 - Elements of the array. * 1≤L, R≤N - Indices for each query. Input The input is given from Standard Input in the following format: ``` N Q A_1 A_2 ... A_N L_1 R_1 L_2 R_2 ... L_Q R_Q ``` Output Print Q lines. The i-th line should contain the sum of elements from index L_i to R_i (1-based) in the array for the i-th query. Examples Input ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output ``` 6 9 15 ``` Input ``` 6 2 3 1 4 1 5 9 3 5 1 6 ``` Output ``` 10 23 ```","solution":"def preprocess_prefix_sums(array): Preprocess the prefix sums for the given array. n = len(array) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i-1] + array[i-1] return prefix_sums def range_sum(prefix_sums, L, R): Get the sum of the subarray from index L to R (1-based). return prefix_sums[R] - prefix_sums[L-1] def solve(N, Q, A, queries): prefix_sums = preprocess_prefix_sums(A) results = [] for L, R in queries: results.append(range_sum(prefix_sums, L, R)) return results"},{"question":"Create a function that determines how many people knew about a rumor after a specific number of days, given that each person who hears the rumor tells it to a certain number of new people every day. The function will receive the initial number of people who know the rumor, the number of new people each one tells per day, and the number of days. # Input - `initial_people`: an integer representing the initial number of people who know the rumor. - `new_people_per_day`: an integer representing the number of new people each person tells each day. - `days`: an integer representing the number of days. # Output - Return the total number of people who knew about the rumor after the given number of days. # Example Input: ```python initial_people = 3 new_people_per_day = 2 days = 2 ``` Output: ```python 15 ``` # Explanation - Day 0: 3 people know the rumor. - Day 1: 3 initial people + (3 * 2) new people = 3 + 6 = 9 people. - Day 2: 9 people from Day 1 + (9 * 2) new people = 9 + 18 = 27 people. So after 2 days, 27 people know about the rumor. The formula used for this problem grows exponentially, representing a form of exponential growth in rumor spread.","solution":"def number_of_people_knowing_rumor(initial_people, new_people_per_day, days): Returns the total number of people who know about the rumor after a given number of days. Parameters: initial_people (int): Initial number of people who know the rumor. new_people_per_day (int): Number of new people each one tells per day. days (int): Number of days. Returns: int: Total number of people who know the rumor. if days == 0: return initial_people total_people = initial_people for _ in range(days): total_people += total_people * new_people_per_day return total_people"},{"question":"Background Alex is a computer science student who enjoys solving problems using algorithms and data structures. One day, he stumbled upon a new puzzle involving prime numbers and decided to write a program for it. Problem You are given a list of `n` integers. Your task is to find the maximum sum of any sub-sequence (not necessarily contiguous) of this list that consists of prime numbers only. If there are no prime numbers in the list, output `0`. Constraints * The input satisfies the following conditions. * All inputs are integers. * 1 ≤ n ≤ 100 * 1 ≤ a[i] ≤ 1000 Input The input format is as follows. n a[1] a[2] ... a[n] Output Output the maximum sum of any sub-sequence of prime numbers. If no prime numbers exist in the list, print `0`. Examples Input 5 3 11 8 13 4 Output 27 Input 4 1 6 8 10 Output 0 Input 7 7 5 9 3 12 2 11 Output 28","solution":"def is_prime(num): Returns True if the number is prime, otherwise False. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def max_prime_subsequence_sum(n, a): Returns the maximum sum of any sub-sequence of prime numbers in the list. If there are no prime numbers in the list, returns 0. prime_sum = sum(x for x in a if is_prime(x)) return prime_sum"},{"question":"Given an integer `N` and an array of `N` integers, write a function to determine if it\'s possible to rearrange the array such that the difference between each pair of adjacent elements is at most `1`. # Input - The first line contains an integer `N` (1 <= N <= 100), the number of elements in the array. - The second line contains `N` integers separated by spaces, representing the elements of the array. Each element is between -100 and 100. # Output - Output \\"YES\\" if it\'s possible to rearrange the array to meet the condition. Otherwise, output \\"NO\\". # Example Example 1 # Input ``` 4 1 2 3 4 ``` # Output ``` YES ``` Example 2 # Input ``` 3 5 1 2 ``` # Output ``` NO ``` # Explanation: - In Example 1, we can arrange the elements as they are or in reverse order and the difference between any two consecutive elements will be at most 1. - In Example 2, there\'s no way to order the elements such that the difference between all adjacent pairs is at most 1.","solution":"def can_rearrange(N, arr): Determines if the array can be rearranged such that the difference between each pair of adjacent elements is at most 1. arr.sort() for i in range(N - 1): if abs(arr[i] - arr[i+1]) > 1: return \\"NO\\" return \\"YES\\""},{"question":"You have a garden with n trees planted in a single row, and each tree is represented by its height. You are given a sequence of numbers where each number represents the height of a tree. For a given height h, you need to calculate how many trees in the garden have a height greater than or equal to h. Write a program that reads an integer n and a list of n integers representing the heights of the trees, followed by several queries. Each query contains a single integer h, and for each h, you must return the number of trees in the garden with height greater than or equal to h. Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of trees. - The second line contains n space-separated integers, where each integer represents the height of a tree (1 ≤ height ≤ 100). - The third line contains an integer q (1 ≤ q ≤ 100) — the number of queries. - The next q lines each contain a single integer h — a height for which you need to determine the count of trees with height greater than or equal to h. Output: - For each query, print a single integer — the number of trees in the garden with height greater than or equal to the given height h. Example: Input: 5 2 3 4 3 1 3 4 1 5 Output: 1 5 0 Explanation: - For the first query, there is 1 tree with height greater than or equal to 4. - For the second query, there are 5 trees with height greater than or equal to 1. - For the third query, there are no trees with height greater than or equal to 5.","solution":"def count_trees_greater_equal_heights(tree_heights, queries): Returns the list of counts of trees greater than or equal to given heights. :param tree_heights: List[int], List of heights of trees in the garden. :param queries: List[int], List of heights to query. :return: List[int], List of counts of trees greater than or equal to query heights. results = [] for h in queries: count = sum(1 for height in tree_heights if height >= h) results.append(count) return results"},{"question":"Maxi and Dumpy are conducting a fun experiment with numbers. Maxi generates a series of numbers, one per minute, and Dumpy carefully records each number in a sequence. Sometimes, Maxi goes off script and forgets to increase the number by one for each minute. Dumpy wants to identify these mistakes and correct them by ensuring the number sequence is strictly increasing by one every minute starting from the first number. Input: The first line contains an integer N, which represents the total number of minutes Maxi generated numbers. The second line contains N space-separated integers where Ai is the number generated at the i\'th minute. Output: Print the corrected space-separated list of strictly increasing numbers starting from the first number recorded. Constraints: 1 ≤ N ≤ 10^5 0 ≤ Ai ≤ 10^6 SAMPLE INPUT 6 5 6 5 7 8 9 SAMPLE OUTPUT 5 6 7 8 9 10","solution":"def correct_sequence(N, A): corrected_sequence = [A[0]] for i in range(1, N): next_value = corrected_sequence[-1] + 1 corrected_sequence.append(next_value) return corrected_sequence # Example usage: # N = 6 # A = [5, 6, 5, 7, 8, 9] # print(correct_sequence(N, A)) # Output: [5, 6, 7, 8, 9, 10]"},{"question":"A subsequence is derived by deleting some or none of the elements from an array without changing the order of the remaining elements. Given a sequence of integers, write a program to find the length of the longest increasing subsequence (LIS). Input The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers. Output Print a single integer representing the length of the longest increasing subsequence. Example Input: 6 10 22 9 33 21 50 Output: 4 Explanation: The longest increasing subsequence is [10, 22, 33, 50] and its length is 4.","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A company has a training program where every employee must attend several sessions. Each session has a start time and an end time. If two sessions overlap, an employee cannot attend both. Given a list of sessions, where each session is represented as a pair of start and end times, determine the maximum number of sessions an employee can attend. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of sessions. Next n lines contain two integers start and end (1 ≤ start < end ≤ 1,000,000) — the start and end times of each session. Output Print a single number — the maximum number of sessions an employee can attend. Examples Input 5 1 2 2 3 3 4 1 3 4 5 Output 4 Input 3 1 4 2 5 3 6 Output 1 Note In the first example, the employee can attend sessions from [1, 2], [2, 3], [3, 4], and [4, 5]. In the second example, due to overlapping times, the employee can only attend one session.","solution":"def max_sessions(sessions): Determines the maximum number of non-overlapping sessions an employee can attend. Parameters: sessions (List[Tuple[int, int]]): A list of tuples where each tuple contains start and end times of a session Returns: int: Maximum number of sessions an employee can attend # Sort sessions by their end times sessions.sort(key=lambda x: x[1]) # Initialize the count of maximum sessions and the end time of the last attended session max_count = 0 last_end_time = 0 # Iterate over the sorted sessions for start, end in sessions: if start >= last_end_time: # If the session starts after or exactly when the last one ends, attend this one max_count += 1 last_end_time = end return max_count"},{"question":"A group of researchers are exploring a recently discovered uninhabited island. The island is full of peculiar trees, each of which can grow and shrink in height over a period of time depending on various environmental factors. For this assessment, you are given a simplified model of the island\'s tree height variations. The island is represented as a line of `n` trees positioned at coordinates `1` through `n`. Each tree initially has a specific height `hi` and will grow or shrink in height exactly once during the observation period. Specifically, you are given two arrays: - `growth[]` of length `n` where `growth[i]` represents the amount by which tree i\'s height changes (can be positive or negative). - `range[]` of length `n` where `range[i]` indicates the interval after which the ith tree changes height (starting from 1). You are tasked with determining the height of each tree after all changes take place. Input: - First line contains an integer `n` (1 ≤ n ≤ 100,000). - Second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9). - Third line contains `n` integers `growth1, growth2, ..., growthn` (-10^9 ≤ growthi ≤ 10^9). - Fourth line contains `n` integers `range1, range2, ..., range3` (1 ≤ rangei ≤ n). Output: - Output the height of each tree after all changes on a single line, separated by spaces. Example: Input ``` 5 10 20 30 40 50 -5 10 0 -20 25 1 2 3 4 5 ``` Output ``` 5 30 30 20 75 ``` Explanation: - Tree 1 starts at height 10 and decreases by 5 after 1 interval, so its final height is 5. - Tree 2 starts at height 20 and increases by 10 after 2 intervals, so its final height is 30. - Tree 3 starts at height 30 and has no change after 3 intervals, so it stays at 30. - Tree 4 starts at height 40 and decreases by 20 after 4 intervals, so its final height is 20. - Tree 5 starts at height 50 and increases by 25 after 5 intervals, so its final height is 75.","solution":"def final_heights(n, heights, growth, intervals): Computes the final heights of the trees after the given intervals based on their respective growth changes. Parameters: n (int): Number of trees heights (List[int]): Initial heights of the trees growth (List[int]): Growth changes for the trees intervals (List[int]): Intervals after which the growth changes occur Returns: List[int]: Final heights of the trees final_heights = [heights[i] + growth[i] for i in range(n)] return final_heights"},{"question":"A scientist is working on a new experiment that involves mixing chemicals in a specific order. There are n chemicals available, each with a unique identifier ranging from 1 to n. The scientist needs to mix the chemicals in a sequence such that the identifier of each chemical in the sequence is either greater than or equal to the identifier of the previous one. Additionally, the scientist prefers to keep the sequence as short as possible because long sequences are difficult to manage. Help the scientist determine the length of the shortest sequence of chemical identifiers that satisfies the conditions. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of chemicals available. Output Print a single integer — the length of the shortest sequence of chemical identifiers that satisfies the conditions. Examples Input 5 Output 1 Input 10 Output 1 Note In both examples, the optimal sequence can contain any single chemical identifier, as a single element sequence trivially satisfies the condition of a non-decreasing order. Thus, the shortest valid sequence always has a length of 1.","solution":"def shortest_sequence_length(n): Returns the length of the shortest valid sequence of chemical identifiers. return 1"},{"question":"Imagine you have a grid of size M x N. You are currently located at the top-left cell and want to move to the bottom-right cell. However, you can only move right or down. Given M and N, calculate the number of unique paths from the top-left to the bottom-right of the grid. Input: The first and only line contains two space-separated integers M and N. Output: Print the number of unique paths. Constraints: 1 ≤ M, N ≤ 100 SAMPLE INPUT 3 2 SAMPLE OUTPUT 3","solution":"def unique_paths(m, n): Calculate the number of unique paths from top-left to bottom-right of an MxN grid. # Create a 2D array to store the number of paths for each cell dp = [[0] * n for _ in range(m)] # Initialize the first row and first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a list of integers where each integer indicates the height of a tree in a linear row of trees. Your task is to decide the maximum number of trees you can cut down so that the remaining trees still form a strictly increasing sequence from left to right. Constraints * 1 ≤ number of trees ≤ 1000 * 1 ≤ height of each tree ≤ 10^9 Input The input consists of one line containing a list of integers separated by spaces. Output Print the maximum number of trees that can be cut down to maintain a strictly increasing sequence with the remaining trees. Examples Input 3 10 4 5 3 Output 2 Input 1 2 3 4 5 Output 0 Input 9 8 7 6 5 Output 4 Input 4 1 3 2 4 Output 2","solution":"def max_trees_cut_to_increasing(arr): Returns the maximum number of trees that can be cut down so that the remaining trees form a strictly increasing sequence. Parameters: arr (list): List of integers representing the heights of the trees. Returns: int: Maximum number of trees that can be cut down. n = len(arr) # To find the length of the longest increasing subsequence # (LIS) using dynamic programming lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # The number of trees to cut to form the longest increasing subsequence max_lis_len = max(lis) return n - max_lis_len"},{"question":"You have a garden represented by a grid of size m x n (1 ≤ m, n ≤ 50). Each cell in the grid can either be empty (denoted by \'.\') or contain a plant (denoted by \'P\'). A plant can spread to adjacent cells in the north, south, east, and west directions if the adjacent cell is empty and was not already converted by another plant. Given the initial state of the garden, determine the final state after all possible plants have spread. Input The first line contains two integers m and n — the number of rows and columns in the grid. The next m lines contain n characters each — the description of the garden. Output Output the final state of the garden as m lines each containing n characters. Examples Input 3 3 .P. ..P P.. Output PPP PPP PPP Input 4 4 P..P .PP. ..P. P..P Output PPPP PPPP PPPP PPPP Note In the first example: - The plant at (1, 2) spreads to (1, 1), (1, 3), (2, 2) - The plant at (2, 3) spreads to (2, 2), (3, 3), (2, 4) - The plant at (3, 1) spreads to (2, 1), (3, 2), (4, 1) Final garden: PPP PPP PPP In the second example, all cells will eventually be covered by plants after the spreading process is complete.","solution":"def spread_plants(m, n, garden): from collections import deque # Directions for north, south, east, west directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue to perform BFS queue = deque() # Add initial plants\' positions to queue for i in range(m): for j in range(n): if garden[i][j] == \'P\': queue.append((i, j)) # BFS to spread the plants while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and garden[nx][ny] == \'.\': garden[nx][ny] = \'P\' queue.append((nx, ny)) return garden def garden_simulation(m, n, grid): garden = [list(row) for row in grid] spread_plants(m, n, garden) return [\'\'.join(row) for row in garden]"},{"question":"Alice has a collection of n unique items she wants to organize in her warehouse. Each item i (1 ≤ i ≤ n) has a value value_i which represents the importance of the item for her business. Due to limited space, she also wants to place as many items as possible into a stack such that the sum of values of the items in the stack does not exceed a given threshold T. Alice wants to maximize the number of items in the stack, but if there are multiple ways to achieve this (multiple stacks with the same maximum number of items), she wants the one with the greatest total value of items. If there are still multiple ways, she prefers the stack where the item with the greatest single value is as large as possible. Help Alice determine the best possible stack of items. # Input - The first line contains two integers n and T (1 ≤ n ≤ 1000, 1 ≤ T ≤ 100000), representing the number of items and the maximum threshold value, respectively. - The second line contains n integers value_1, value_2, ..., value_n (1 ≤ value_i ≤ 1000), representing the values of the items. # Output - Output two integers: the maximum number of items in the stack and the greatest total value of these items under the rules described. # Examples Example 1 # Input ``` 5 10 1 2 3 4 5 ``` # Output ``` 4 10 ``` Example 2 # Input ``` 6 15 5 5 5 10 2 1 ``` # Output ``` 4 13 ``` Example 3 # Input ``` 2 5 8 3 ``` # Output ``` 1 3 ``` # Explanation - In Example 1, Alice can pick items with values [1, 2, 3, 4]. The sum of their values is 10 and there are 4 items. - In Example 2, Alice can pick items with values [5, 2, 5, 1]. The sum of their values is 13, which is made up of 4 items. - In Example 3, Alice can pick the item with value 3 only, since 8 exceeds the threshold. Hence, she picks 1 item, with total value of 3.","solution":"def maximize_items(n, T, values): values.sort(reverse=True) # Sort values in descending order best_count = 0 best_sum = 0 best_values = [] def get_stack(items): current_sum = 0 stack = [] for item in items: if current_sum + item <= T: current_sum += item stack.append(item) return stack for i in range(n): stack = get_stack(values[i:]) stack_sum = sum(stack) if len(stack) > best_count or (len(stack) == best_count and stack_sum > best_sum): best_count = len(stack) best_sum = stack_sum best_values = stack return best_count, best_sum"},{"question":"Leah has recently become fascinated with prime numbers. She came up with a game involving prime numbers and intervals. Given two integers, L and R, Leah wants to determine the number of prime numbers in the interval [L, R] (both inclusive). For example, if L=10 and R=20, the prime numbers in this interval are 11, 13, 17, and 19. Hence, the answer would be 4. Your task is to help Leah by writing a function that takes two integers, L and R, and returns the number of prime numbers in the interval [L, R]. Input: - Two integers L and R (1 ≤ L ≤ R ≤ 10^6) Output: - A single integer which is the number of prime numbers in the given interval. Example: Input: ``` 10 20 ``` Output: ``` 4 ``` Note: The input consists of two space-separated integers representing the bounds of the interval. The output should be the count of prime numbers in the range between L and R. Make sure to handle large intervals efficiently.","solution":"def sieve_of_eratosthenes(max_num): Helper function to generate a list of primes up to max_num using the Sieve of Eratosthenes. is_prime = [True] * (max_num + 1) is_prime[0], is_prime[1] = False, False for start in range(2, int(max_num ** 0.5) + 1): if is_prime[start]: for multiple in range(start * start, max_num + 1, start): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime] def count_primes_in_interval(L, R): Returns the number of prime numbers in the interval [L, R] (both inclusive). if L < 1 or R < 1 or L > R or R > 10**6: raise ValueError(\\"Inputs should be in range 1 ≤ L ≤ R ≤ 10^6\\") primes = sieve_of_eratosthenes(R) count = 0 for prime in primes: if L <= prime <= R: count += 1 return count"},{"question":"You are given a collection of books, each with a varying number of pages. You are supposed to distribute these books among several students such that each student gets at least one book and the maximum number of pages assigned to a student is minimized. Your task is to determine the minimum possible value of the maximum number of pages assigned to a student under these conditions. Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers N and K, where N is the number of books and K is the number of students. - The second line contains N integers representing the number of pages in each book. Output: - For each test case, print the minimum possible value of the maximum number of pages assigned to a student. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ K ≤ N ≤ 10^5 - 1 ≤ Pages ≤ 10^9 Sample Input: 2 4 2 12 34 67 90 3 3 5 6 7 Sample Output: 113 7 Explanation: - In the first test case, the optimal way to distribute the books can be: - Student 1: 12, 34, 67 (total 113 pages) - Student 2: 90 (total 90 pages) This results in 113 pages as the maximum number of pages assigned to a student. - In the second test case, each student gets exactly one book, so the maximum number of pages assigned to a student is precisely the number of pages in the largest book, which is 7.","solution":"def distribute_books(T, test_cases): def is_possible(books, n, k, max_pages): student_count = 1 current_pages = 0 for pages in books: if current_pages + pages > max_pages: student_count += 1 current_pages = pages if student_count > k: return False else: current_pages += pages return True results = [] for case in test_cases: N, K, pages = case[\'N\'], case[\'K\'], case[\'pages\'] low, high = max(pages), sum(pages) result = high while low <= high: mid = (low + high) // 2 if is_possible(pages, N, K, mid): result = mid high = mid - 1 else: low = mid + 1 results.append(result) return results"},{"question":"Jane is planning a party and has `n` guests. She wants to arrange `k` tables such that each table has an equal number of guests. In case it\'s not possible to have an equal number of guests at each table, the difference between the maximum number of guests at any table and the minimum number of guests at any table should be minimized. Your task is to help Jane determine the optimal distribution of guests among tables to minimize this difference. Input The input consists of two integers `n` and `k` (1 ≤ n ≤ 10^9, 1 ≤ k ≤ 10^5) — the number of guests and the number of tables. Output Output two integers: the maximum number of guests at any table and the minimum number of guests at any table after the optimal distribution. Examples Input 10 3 Output 4 3 Input 7 4 Output 2 1 Note In the first example, Jane has 10 guests and 3 tables. If she distributes the guests optimally, she can place 4 guests at one table and 3 guests at each of the other two tables, resulting in a maximum of 4 guests at any table and a minimum of 3 guests at any table. In the second example, Jane has 7 guests and 4 tables. She can place 2 guests at three tables and 1 guest at one table, resulting in a maximum of 2 guests at any table and a minimum of 1 guest at any table.","solution":"def optimal_table_distribution(n, k): Determine the optimal distribution of guests among tables. Parameters: n (int): The number of guests. k (int): The number of tables. Returns: tuple: A tuple containing two integers: the maximum number of guests at any table and the minimum number of guests at any table. # Calculate the base number of guests per table base_guests_per_table = n // k # Calculate the number of tables that will have one extra guest extra_guests_tables = n % k # Maximum guests at any table max_guests = base_guests_per_table + 1 if extra_guests_tables > 0 else base_guests_per_table # Minimum guests at any table min_guests = base_guests_per_table return max_guests, min_guests"},{"question":"A common technique in text analysis is to highlight the most frequent words in a document. In this task, you have to implement a function to find the top k frequent words in a given list of strings. The input to the function consists of a list of words and an integer k. Your function should return the k most frequent words from the input list sorted in non-ascending order by their frequency. If two words have the same frequency, then the word with the lower alphabetical order comes first. Input - The first line contains an integer n, indicating the number of words in the list. - The following n lines each contain a single word, which is a string consisting of lowercase Latin letters. - The last line contains an integer k (1 ≤ k ≤ number of unique words in the input list). Output The function should return a list of k words sorted by their frequency in non-ascending order. In case of ties, sort the words with the same frequency in alphabetical order. Examples Input 6 i love leetcode i love coding 2 Output [\'i\', \'love\'] Input 8 the day is sunny the the the sunny 4 Output [\'the\', \'sunny\', \'day\', \'is\'] Note In the first example, \\"i\\" and \\"love\\" are the two most frequent words, each appearing twice. In the second example, \\"the\\" appears four times, \\"sunny\\" appears twice, and both \\"day\\" and \\"is\\" appear once. Since k = 4, the function returns the four most frequent words.","solution":"from collections import Counter def top_k_frequent_words(words, k): Find the top k frequent words in a given list of strings. :param words: List[str] - a list of words :param k: int - the number of most frequent words to return :return: List[str] - the k most frequent words sorted by frequency and alphabetically # Count the frequency of each word word_counts = Counter(words) # Sort the words first by frequency in non-ascending order, then alphabetically in case of ties sorted_words = sorted(word_counts.keys(), key=lambda word: (-word_counts[word], word)) # Return the top k frequent words return sorted_words[:k]"},{"question":"You are given a weighted, directed graph consisting of vertices and edges, and an initial assignment of flow on each edge. The goal is to determine whether the given flow satisfies the constraints of the max-flow min-cut theorem. Specifically, you\'ll check whether the current flow from the source to the sink is maximized. A valid flow must satisfy the following conditions: 1. Capacity Constraint: For every edge (u, v) in the graph, the flow f(u, v) must not exceed the edge\'s capacity c(u, v). That is, 0 ≤ f(u, v) ≤ c(u, v). 2. Flow Conservation: For every vertex v (except the source s and the sink t), the total incoming flow must equal the total outgoing flow. Mathematically, for all v ∈ V {s, t}: ∑ f(u, v) = ∑ f(v, w), for all edges (u, v) entering and (v, w) leaving vertex v. 3. Max-Flow Condition: The flow from the source to the sink should be maximized, meaning no more flow can be sent from the source to the sink without violating either the capacity constraint or the flow conservation condition. Given the initial flow, determine if increasing or adjusting the assignment can lead to a greater flow without violating the constraints, or verify if the current assignment already represents the maximum flow. Input The first line contains two integers n and m (2 ≤ n ≤ 100, 0 ≤ m ≤ 100) — the number of nodes and edges in the graph, respectively. The next m lines each contain five integers ui, vi, ci, fi, and ri (1 ≤ ui, vi ≤ n and ui ≠ vi; 0 ≤ ci, fi ≤ 1 000 000; 0 ≤ ri ≤ 1 000) — representing: - ui: the starting vertex of an edge, - vi: the ending vertex of an edge, - ci: the capacity of the edge, - fi: the current flow on the edge, - ri: the residual capacity of the edge. Nodes are numbered from 1 to n. Node 1 is always the source, and node n is always the sink. No edge may have a residual capacity that makes it impossible to saturate capacity (fi + ri ≤ ci). Output Print \\"YES\\" if the given flow is already at its maximum possible value. Otherwise, print \\"NO\\". Examples Input 4 5 1 2 10 5 5 1 3 5 2 3 2 3 4 4 0 2 4 10 0 10 3 4 8 6 2 Output NO Input 3 3 1 2 5 5 0 1 3 7 7 0 2 3 3 3 0 Output YES Note: In the first sample, the initial flow assignment can still be increased, and thus it is not in a maximum flow state. In the second sample, the flow assignments are saturated or satisfy the conditions, representing a maximum possible flow.","solution":"def check_max_flow(n, m, edges): from collections import defaultdict, deque graph = defaultdict(list) capacity = {} flow = {} # Initialize the graph, capacity, and flow from the given edges for u, v, c, f, r in edges: graph[u].append(v) graph[v].append(u) capacity[(u, v)] = c capacity[(v, u)] = 0 # Reverse edge initial capacity is 0 flow[(u, v)] = f flow[(v, u)] = -f # Reverse flow # Implement BFS to find if there\'s an augmenting path def bfs(source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: curr = queue.popleft() for neighbor in graph[curr]: if neighbor not in visited and flow[(curr, neighbor)] < capacity[(curr, neighbor)]: queue.append(neighbor) visited.add(neighbor) parent[neighbor] = curr if neighbor == sink: return True return False source, sink = 1, n parent = {} # Check for the existence of an augmenting path if bfs(source, sink, parent): return \\"NO\\" else: return \\"YES\\""},{"question":"You are given an array of integers `arr` of length `n`. You need to find a subarray with the maximum possible sum. Subarray is defined as a contiguous part of an array. If there are multiple subarrays with the same maximum sum, return the one which has the smallest length. If there are still multiple answers, return the subarray which starts at the smallest index. Your task is to write a function that returns this subarray. Input - The first line contains a single integer, `n` (1 ≤ n ≤ 100000), the length of the array. - The second line contains `n` integers, the elements of the array `arr` (-10000 ≤ arr[i] ≤ 10000). Output Print the subarray with the maximum sum. If there are multiple subarrays with the same maximum sum, return the one which has the smallest length. If there are multiple such subarrays, return the one starting at the smallest index. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 4 -1 2 1 Input 5 1 2 3 4 5 Output 1 2 3 4 5 Note In the first example, the subarray [4, -1, 2, 1] has the maximum sum 6. Other subarrays with the same sum do not exist. In the second example, the entire array is the subarray with the maximum sum, which is 15. There are no other subarrays with the same sum.","solution":"def max_subarray(arr): n = len(arr) max_sum = -float(\'inf\') current_sum = 0 start = end = temp_start = 0 for i in range(n): if current_sum <= 0: temp_start = i current_sum = arr[i] else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i elif current_sum == max_sum: if (i - temp_start) < (end - start): start = temp_start end = i return arr[start:end+1]"},{"question":"A group of scientists is working on a research project in a lab. The lab has several devices, each of which can be used by only one scientist at a time. Scientists are scheduled based on a work schedule that dictates when they start and finish using a device. Each scientist can work only on one device at any time. The goal is to find the maximum number of scientists that can be scheduled such that no two scientists use the same device at the same time. Write a program to calculate the maximum number of scientists that can be accommodated based on their schedules. Input The input consists of multiple lines: - The first line contains an integer n (1 ≤ n ≤ 100), representing the number of scientists. - Each of the following n lines contains three integers, representing the start time, end time, and device ID (1 ≤ start < end ≤ 1,000, 1 ≤ ID ≤ 100). Output Output the maximum number of scientists that can be scheduled without any time conflicts on the same device. Examples Input 4 1 4 1 2 6 1 5 7 1 3 8 2 Output 3 Input 3 1 3 2 2 5 2 4 6 2 Output 2 Input 5 1 5 1 2 6 1 3 8 2 5 9 1 6 10 2 Output 3 Explanation In the first example, the maximum number of scientists that can be scheduled without any time conflict on the same device is 3: - Scientist 1 uses device 1 from time 1 to 4. - Scientist 3 uses device 1 from time 5 to 7. - Scientist 4 uses device 2 from time 3 to 8. In the second example, the maximum number of scientists that can be scheduled without any time conflict on the same device is 2: - Scientist 1 uses device 2 from time 1 to 3. - Scientist 3 uses device 2 from time 4 to 6. In the third example, the maximum number of scientists that can be scheduled without any time conflict on the same device is 3: - Scientist 1 uses device 1 from time 1 to 5. - Scientist 4 uses device 1 from time 5 to 9. - Scientist 5 uses device 2 from time 6 to 10.","solution":"def max_scheduled_scientists(n, schedules): from collections import defaultdict # Group schedules by device device_schedules = defaultdict(list) for start, end, device in schedules: device_schedules[device].append((start, end)) def max_non_overlapping_intervals(intervals): # Sort intervals based on their end times intervals.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in intervals: if start >= end_time: count += 1 end_time = end return count # Calculate max scientists for each device and sum them up total_scientists = 0 for device, intervals in device_schedules.items(): total_scientists += max_non_overlapping_intervals(intervals) return total_scientists"},{"question":"A company has implemented a new rewards program for its employees based on their quarterly performance. Each employee receives a score for each quarter, and at the end of the year, the company wants to determine the employees who have shown the most consistent performance throughout the year. The consistency of an employee\'s performance is measured by the variance in their quarterly scores. The lower the variance, the more consistent the performance. Your task is to determine the most consistent performer among a list of employees based on their quarterly scores. Input The first line of the input contains an integer t (1 ≤ t ≤ 200) — the number of test cases. Each test case consists of two parts: 1. The first line contains an integer n (1 ≤ n ≤ 100) — the number of employees. 2. The next n lines each contain 4 integers q1, q2, q3, q4 (0 ≤ q1, q2, q3, q4 ≤ 100), representing the quarterly scores of an employee. Output For each test case, print a single line containing the index (1-based) of the employee with the most consistent performance. If there are multiple employees with the same consistency, choose the one with the smallest index. Example Input 3 3 90 80 85 95 85 85 85 85 80 90 70 60 2 75 75 75 75 80 80 90 70 4 60 60 60 60 55 65 60 58 70 85 60 90 80 80 75 70 Output 2 1 1 Note: - To calculate the variance of an employee\'s quarterly scores, use the formula: ![Variance](https://wikimedia.org/api/rest_v1/media/math/render/svg/ee86dcc7a64d27acea6429c18aa6b143ee346b6c)","solution":"def find_most_consistent_performer(test_cases): Returns the 1-based index of the employee with the most consistent performance based on quarterly scores. Args: test_cases: List of tuples, where each tuple contains: - An integer n, the number of employees - A list of n lists, each containing 4 integers representing quarterly scores Returns: List of integers representing the index of the most consistent performer for each test case def variance(scores): Calculate the variance of 4 quarterly scores. average = sum(scores) / 4 return sum((x - average) ** 2 for x in scores) / 4 results = [] for test in test_cases: n, scores_list = test consistencies = [(variance(scores), index + 1) for index, scores in enumerate(scores_list)] # Select the employee with the lowest variance most_consistent = min(consistencies, key=lambda x: (x[0], x[1])) results.append(most_consistent[1]) return results"},{"question":"An e-commerce website tracks the number of times customers view different products. You are given data representing the timestamp of each product view and need to determine the most frequently viewed product within specified time intervals. # Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000), the number of product views. The next `n` lines each contain a pair of integers `t` (1 ≤ t ≤ 1,000,000) and `p` (1 ≤ p ≤ 1,000,000), representing the timestamp and the product ID of a product view, respectively. The next line contains an integer `q` (1 ≤ q ≤ 100,000), the number of queries. The next `q` lines each contain a pair of integers `start` and `end` (1 ≤ start ≤ end ≤ 1,000,000), representing the start and end timestamps (inclusive) of the query interval. # Output For each query, output the product ID of the most frequently viewed product in the given time interval. If there\'s a tie, output the smallest product ID among the tied products. # Example Input ``` 6 1 101 2 102 2 101 3 102 4 101 5 103 3 1 3 2 4 1 5 ``` Output ``` 101 101 101 ``` # Explanation 1. In the first query, within the time interval [1, 3], product IDs 101 and 102 are viewed twice. Since both are tied, the smaller ID (101) is chosen. 2. In the second query, within the time interval [2, 4], product ID 101 is viewed twice while 102 is viewed once. 3. In the third query, within the time interval [1, 5], product ID 101 is viewed three times, more frequently than any other product.","solution":"from collections import defaultdict from bisect import bisect_left, bisect_right def most_frequently_viewed_product(product_views, queries): Find the most frequently viewed product in the specified time intervals. :param product_views: List of tuples, each containing a timestamp and a product ID. :param queries: List of tuples, each containing a start and end time for queries. :return: List of product IDs that are most frequently viewed in the specified intervals. # Dictionary to store views based on time time_product_dict = defaultdict(list) for timestamp, product_id in product_views: time_product_dict[timestamp].append(product_id) # Convert dictionary to sorted list of tuples for quick lookups sorted_times = sorted(time_product_dict.keys()) # Function to get product counts in a given time range def get_product_counts(start, end): product_counts = defaultdict(int) start_idx = bisect_left(sorted_times, start) end_idx = bisect_right(sorted_times, end) - 1 for time in sorted_times[start_idx:end_idx + 1]: for product in time_product_dict[time]: product_counts[product] += 1 return product_counts results = [] for start, end in queries: product_counts = get_product_counts(start, end) # Determine the most frequently viewed product max_views = 0 most_viewed_product = None for product, count in product_counts.items(): if count > max_views or (count == max_views and product < most_viewed_product): max_views = count most_viewed_product = product results.append(most_viewed_product) return results # Wrapper to read input and output results def e_commerce_site(input_lines): lines = input_lines.strip().split(\'n\') n = int(lines[0]) product_views = [] for i in range(1, n + 1): t, p = map(int, lines[i].split()) product_views.append((t, p)) q = int(lines[n + 1]) queries = [] for j in range(n + 2, n + 2 + q): start, end = map(int, lines[j].split()) queries.append((start, end)) return most_frequently_viewed_product(product_views, queries)"},{"question":"You are given a binary search tree (BST) with n nodes. The task is to handle q operations on this tree, where each operation is one of the following: 1. Insertion of a new node, 2. Deletion of an existing node, 3. Finding the k-th smallest element in the BST. Input The first line contains two space-separated integers n and q (1 ≤ n, q ≤ 100,000) – the number of initial nodes in the tree and the number of operations to be performed. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10⁹). These integers represent the initial nodes of the BST, and they are given in the order they will be inserted into the tree. The next q lines describe the operations. Each operation is in one of the following formats: - 1 x (1 ≤ x ≤ 10⁹), meaning insert a node with value x into the BST. - 2 x (1 ≤ x ≤ 10⁹), meaning delete the node with value x from the BST (assume x always exists in the BST). - 3 k (1 ≤ k ≤ current_size_of_BST), meaning output the k-th smallest element in the BST. Output For each operation of type 3, output the k-th smallest element in the BST on a new line. Example Input ``` 5 5 10 5 15 3 7 1 8 2 10 3 3 2 5 3 2 ``` Output ``` 7 7 ``` Note In the given example, the initial BST is: ``` 10 / 5 15 / 3 7 ``` After the first operation (insertion of 8), the BST becomes: ``` 10 / 5 15 / 3 7 8 ``` The second operation deletes the node with value 10, leading to the BST: ``` 8 / 5 15 / 3 7 ``` The third operation asks for the 3rd smallest element, which is 7. The fourth operation deletes the node with value 5, leading to the BST: ``` 8 / 7 15 / 3 ``` The fifth operation asks for the 2nd smallest element, which is also 7.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key self.size = 1 # To keep track of the size of the subtree rooted at this node class BST: def __init__(self): self.root = None def insert(self, key): self.root = self._insert(self.root, key) def _insert(self, node, key): if not node: return TreeNode(key) if key < node.val: node.left = self._insert(node.left, key) else: node.right = self._insert(node.right, key) node.size = 1 + self._get_size(node.left) + self._get_size(node.right) return node def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, node, key): if not node: return node if key < node.val: node.left = self._delete(node.left, key) elif key > node.val: node.right = self._delete(node.right, key) else: if not node.left: return node.right elif not node.right: return node.left temp = self._minValueNode(node.right) node.val = temp.val node.right = self._delete(node.right, temp.val) node.size = 1 + self._get_size(node.left) + self._get_size(node.right) return node def _minValueNode(self, node): current = node while current.left is not None: current = current.left return current def kth_smallest(self, k): return self._kth_smallest(self.root, k) def _kth_smallest(self, node, k): left_size = self._get_size(node.left) if k - 1 == left_size: return node.val elif k <= left_size: return self._kth_smallest(node.left, k) else: return self._kth_smallest(node.right, k - left_size - 1) def _get_size(self, node): if not node: return 0 return node.size def handle_operations(n, q, initial_nodes, operations): bst = BST() for key in initial_nodes: bst.insert(key) result = [] for operation in operations: op = operation[0] value = operation[1] if op == 1: bst.insert(value) elif op == 2: bst.delete(value) elif op == 3: result.append(bst.kth_smallest(value)) return result # Example usage n = 5 q = 5 initial_nodes = [10, 5, 15, 3, 7] operations = [ (1, 8), (2, 10), (3, 3), (2, 5), (3, 2) ] print(handle_operations(n, q, initial_nodes, operations)) # Output: [7, 7]"},{"question":"Write a function to determine if a string is a palindrome with case insensitivity and ignoring non-alphanumeric characters. A palindrome is a string that reads the same backward as forward. To account for case insensitivity, consider \\"A\\" and \\"a\\" to be the same character. Ignore characters that are not letters or digits, such as punctuation and spaces. Implement the function `is_palindrome(s: str) -> bool` which takes a single string `s` as input and returns `True` if the string is a palindrome, and `False` otherwise. Constraints * The length of string `s` is between 1 and 1000. Input The function takes a single string `s` as input. Output Return a boolean value - `True` if the string is a palindrome, `False` otherwise. Examples Input \\"A man, a plan, a canal: Panama\\" Output True Input \\"race a car\\" Output False Input \\"\\" Output True Input \\"0P\\" Output False","solution":"def is_palindrome(s: str) -> bool: Returns True if the given string s is a palindrome, considering case insensitivity and ignoring non-alphanumeric characters. # Filter out non-alphanumeric characters and convert to lowercase cleaned_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Example Given a list of integers representing the heights of buildings, return the maximum area of water that can be contained between two buildings. You are given an array `heights` where each `heights[i]` represents the height of the i-th building. The area of water between two buildings is calculated as the width between the two buildings multiplied by the minimum height of the two buildings. The width is the distance between the two buildings. Input An integer array `heights` where `1 <= heights.length <= 10^5` and `0 <= heights[i] <= 10^4`. Output An integer representing the maximum area of water that can be contained. Example Input [1,8,6,2,5,4,8,3,7] Output 49","solution":"def max_area(heights): Returns the maximum area of water that can be contained between two buildings. left, right = 0, len(heights) - 1 max_area = 0 while left < right: height = min(heights[left], heights[right]) width = right - left current_area = height * width max_area = max(max_area, current_area) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Clara and her friend decided to play a game with an array `a` of length `n`. The game revolves around finding a subarray whose elements, when summed, give an odd number. Clara is curious to find out the length of the longest subarray with an odd sum. Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 100) — the size of the array. The second line of the input contains `n` integers `a1, a2, ..., an` (-10^3 ≤ ai ≤ 10^3), where `ai` is the element at the i-th position of the array. Output Print a single integer — the length of the longest subarray with an odd sum. If no such subarray exists, print 0. Examples Input 5 3 2 4 1 5 Output 5 Input 4 2 4 6 8 Output 1 Input 3 1 2 3 Output 3 Note In the first sample, the entire array can be taken as the subarray since the sum of subarray [3, 2, 4, 1, 5] is 15, an odd number. In the second sample, the sum of any subarray of even numbers will always be even. The longest subarray with an odd sum could only be 0-length which means we should consider individual elements alone. Here, only elements forming their own subarray can provide any odd sum. In the third sample, selecting the entire array [1, 2, 3] gives us the odd sum of 6, which offers the longest subarray possible with an odd number. The subarray can be further split to check other odd sums if necessary but will not exceed the length of the complete array.","solution":"def longest_odd_sum_subarray(n, arr): odd_count = sum(1 for x in arr if x % 2 != 0) even_count = n - odd_count if odd_count == 0: return 0 # No odd numbers, no odd sum subarray possible if even_count % 2 == 0 and odd_count % 2 == 0: return n - 1 # Both counts even means total sum must be even, remove one element for odd sum return n # Otherwise, we can use the whole array"},{"question":"Rika is a gardener and she likes to arrange flowers in her garden in a specific way. She has a certain number of flower patches, denoted as n, and each patch has a unique index from 1 to n. She wants to plant different types of flowers in these patches such that the arrangements follow a specific pattern. Rika has another garden with n patches, and she wants to replicate the arrangement from this garden but in a circular manner. The arrangement is represented as an array a of length n, where a[i] represents the flower type at the i-th patch. To replicate this, Rika can start planting from any patch and continue in a circular fashion. However, she also wants to maintain the aesthetic appeal by using the lexicographically smallest arrangement possible. Your task is to find this smallest lexicographical arrangement starting from any patch. Constraints - 2 leq n leq 10^5 - 1 leq a_i leq 10^9 Input Input is given from Standard Input in the following format: ``` n a_1 a_2 ... a_n ``` Output Print the lexicographically smallest arrangement when traversed in a circular manner. Examples Input ``` 4 3 2 1 4 ``` Output ``` 1 4 3 2 ``` Input ``` 5 5 4 2 1 3 ``` Output ``` 1 3 5 4 2 ``` Input ``` 6 4 1 5 3 2 6 ``` Output ``` 1 5 3 2 6 4 ```","solution":"def lexicographically_smallest_arrangement(n, arr): Given an array \'arr\' of length \'n\', the function returns the lexicographically smallest arrangement of the array in circular order. Args: n: int : the number of elements in the array. arr: list of int : the array of flower types. Returns: list of int : the lexicographically smallest arrangement. smallest_arrangement = arr for i in range(1, n): new_arr = arr[i:] + arr[:i] if new_arr < smallest_arrangement: smallest_arrangement = new_arr return smallest_arrangement"},{"question":"Given a string s and a list of words, find which words from the list can be formed by deleting some characters of the string s without reordering the remaining characters. Input The first line contains the string s (1 ≤ |s| ≤ 105), consisting of lowercase Latin letters. The second line contains an integer n (1 ≤ n ≤ 10^3), the number of words in the list. Each of the next n lines contains a word from the list. Each word consists of lowercase Latin letters and has a length of at most 100. Output Output all words from the list which can be formed by deleting some characters of the string s without reordering the remaining characters. Print the words in the same order as they appear in the input. Example Input abpcplea 3 apple ale monkey Output apple ale Note In the given example, \\"apple\\" can be formed from \\"abpcplea\\" by deleting \'b\', \'c\', \'p\', and \'a\'. Similarly, \\"ale\\" can be formed by deleting \'b\', \'p\', \'c\', \'p\', \'l\', and \'e\'. \\"monkey\\" cannot be formed from \\"abpcplea\\" by deleting any characters.","solution":"def can_form(s, word): Checks if \'word\' can be formed by deleting some characters of \'s\' without reordering the remaining characters. it = iter(s) return all(char in it for char in word) def words_from_string(s, words): Finds all words from the list that can be formed by deleting some characters of \'s\' without reordering the remaining characters. result = [] for word in words: if can_form(s, word): result.append(word) return result def solution(): s = input().strip() n = int(input().strip()) words = [input().strip() for _ in range(n)] result = words_from_string(s, words) for word in result: print(word)"},{"question":"You are given a binary string s of length n. You can perform the following operation exactly once: choose an arbitrary substring of s and toggle every bit of this substring (changing \'0\' to \'1\' and \'1\' to \'0\'). Your task is to find the maximum number of consecutive \'1\'s in the resulting binary string after applying this operation optimally. If the given string already consists of only \'1\'s, return n. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the binary string. The second line contains a binary string s of length n. Output Print a single integer — the maximum number of consecutive \'1\'s that can be obtained after applying the described operation exactly once. Examples Input 6 110110 Output 5 Input 5 00000 Output 5 Input 7 1010101 Output 3 Note In the first example, you can toggle the substring \\"0110\\" to get \\"111110\\", which contains 5 consecutive \'1\'s. In the second example, you can toggle the entire string to get \\"11111\\", which contains 5 consecutive \'1\'s. In the third example, you can toggle either \\"10\\" to get \\"1110101\\" or \\"01\\" to get \\"1011101\\", both contain 3 consecutive \'1\'s.","solution":"def max_consecutive_ones(n, s): This function returns the maximum number of consecutive \'1\'s that can be obtained after toggling one substring of the given binary string s exactly once. if \'0\' not in s: # If the string already consists only of \'1\'s return n max_ones = 0 s = list(s) for i in range(n): for j in range(i, n): # Create a copy of the list to toggle a substring new_s = s[:] # Toggle the substring s[i:j+1] for k in range(i, j + 1): new_s[k] = \'1\' if new_s[k] == \'0\' else \'0\' # Calculate the maximum number of consecutive \'1\'s in the new string current_max_ones = max(len(x) for x in \'\'.join(new_s).split(\'0\')) max_ones = max(max_ones, current_max_ones) return max_ones"},{"question":"You are given an array `A` consisting of `n` integers (0 ≤ A[i] ≤ 10^9). Your task is to perform the following operations on the array: - Add a specified value to a subarray. - Query the maximum value within a subarray. Input The first line of input contains two integers `n` and `q` (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of elements in the array and the number of operations. The second line contains `n` space-separated integers representing the array `A`. The following `q` lines describe the operations. Each operation is in one of the following formats: - `1 l r v` (1 ≤ l ≤ r ≤ n, 0 ≤ v ≤ 10^9) — add the value `v` to each element in the subarray `A[l], A[l+1], ..., A[r]`. - `2 l r` (1 ≤ l ≤ r ≤ n) — query the maximum value in the subarray `A[l], A[l+1], ..., A[r]`. Output For each query of the second type, output the maximum value in the specified subarray. Example Input 6 5 1 3 5 7 9 11 1 2 4 5 2 1 5 2 2 6 1 3 5 10 2 4 6 Output 12 12 19 Explanation Initially, the array is [1, 3, 5, 7, 9, 11]. After the first operation (1 2 4 5), the array becomes [1, 8, 10, 12, 9, 11]. After the second operation (2 1 5), the maximum value in the subarray [1, 8, 10, 12, 9] is 12. After the third operation (2 2 6), the maximum value in the subarray [8, 10, 12, 9, 11] is also 12. After the fourth operation (1 3 5 10), the array becomes [1, 8, 20, 22, 19, 11]. Finally, after the fifth operation (2 4 6), the maximum value in the subarray [22, 19, 11] is 22.","solution":"class ArrayManipulator: def __init__(self, array): self.array = array def add_to_subarray(self, l, r, v): for i in range(l, r + 1): self.array[i] += v def query_max_in_subarray(self, l, r): return max(self.array[l:r + 1]) def perform_operations(array, operations): manipulator = ArrayManipulator(array) results = [] for op in operations: if op[0] == 1: # Add to subarray _, l, r, v = op manipulator.add_to_subarray(l - 1, r - 1, v) elif op[0] == 2: # Query max in subarray _, l, r = op results.append(manipulator.query_max_in_subarray(l - 1, r - 1)) return results"},{"question":"Given a string s, you need to compress it using the following algorithm: For each group of consecutive repeating characters in s, append the character followed by the length of the group. If the length of the group is 1, append only the character. The compressed string should be as short as possible. For example: - The string \\"aaabbccccd\\" compresses to \\"a3b2c4d\\". - The string \\"aabba\\" compresses to \\"a2b2a\\". Write a function that performs the compression. Input - A single line string containing only lowercase Latin letters. The length of the string is between 1 and 100 characters. Output - A single line containing the compressed version of the input string. Examples Input: aaabbccc Output: a3b2c3 Input: abcd Output: abcd","solution":"def compress_string(s): Compress the string using the specified algorithm. Parameters: s (str): The input string containing only lowercase Latin letters. Returns: str: The compressed version of the input string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 # Add the last group compressed.append(s[-1]) if count > 1: compressed.append(str(count)) return \'\'.join(compressed)"},{"question":"You are given an unsorted array of integers and you need to sort the array in a specific ascending order such that every third element is taken first, followed by every second element, and then every first element. For example, given an input array `[3, 1, 2, 5, 4]`, you should sort the numbers `5, 4, 3, 2, 1` first into `[1, 2, 3, 4, 5]` and then rearrange them according to the specific pattern described: 1. Place every third element first. 2. Place every second element next. 3. Place every first element last. Output the resulting array after it has been reordered according to the above rules. Input: The first line of input contains an integer N, representing the number of elements in the array. The second line of input contains N space-separated integers, representing the elements of the array. Output: Output the array sorted as per the specified conditions. Constraints: 1 ≤ N ≤ 100 1 ≤ A[i] ≤ 1000 Example Input: 5 3 1 2 5 4 Example Output: 1 4 2 5 3","solution":"def custom_sort(arr): Given an unsorted array of integers, this function sorts the array in a specific order: 1. Sorts the array in ascending order. 2. Reorders the array such that every third element is taken first, followed by every second element, and then every first element. Parameters: arr (list): The list of integers to be sorted and reordered. Returns: list: The reordered list. if not arr: return [] sorted_arr = sorted(arr) n = len(sorted_arr) third_elements = sorted_arr[::3] second_elements = sorted_arr[1::3] first_elements = sorted_arr[2::3] result = third_elements + second_elements + first_elements return result"},{"question":"John is a detective who loves solving mysteries. Recently, he came across a hotel with several rooms arranged in a straight row. Each room has a certain number of gold coins, and each room is either occupied or unoccupied. John suspects that the unoccupied rooms might have hidden passages with additional gold coins. To confirm his theory, he needs to repeatedly ask questions about specific rooms. However, John is only allowed to ask about the gold coins in individual rooms a limited number of times. Your task is to help John determine the total number of gold coins across all the rooms, taking into account that some of the rooms might have hidden passages that add additional coins to the total. # Problem John can ask about any room i (1 ≤ i ≤ N) and get the number of gold coins in that room. Additionally, if a room is unoccupied, you need to treat it as if it has double the gold coins originally present due to the hidden passages. Write a program that: 1. Takes the number of rooms N (1 ≤ N ≤ 10000). 2. Executes up to Q (1 ≤ Q ≤ 20000) queries in the form `? i` where `i` is the room number. 3. Responds to each query with the number of gold coins in room i. 4. Calculates and outputs the total number of gold coins across all the rooms, considering the double value for unoccupied rooms. The input will be provided by standard input and the output must be provided by standard output. Note that you should ensure to flush the output after each query in your program. The format for queries and final output is as follows: 1. To ask a query about the number of gold coins in room i: ``` ? i ``` You will receive an integer in response, which represents the number of gold coins in room i. If the room is unoccupied, consider the response to be double that value. 2. After gathering the necessary information, output the total number of gold coins: ``` ! total_coins ``` # Example Assume the input format is adapted for illustrating multiple queries interactively. Sample Input ``` 5 ? 1 4 ? 2 2 ? 3 3 ? 4 0 (unoccupied) ? 5 5 ``` Sample Output ``` ? 1 ? 2 ? 3 ? 4 ? 5 28 ``` Explanation - Room 1: 4 coins - Room 2: 2 coins - Room 3: 3 coins - Room 4: 0 coins (unoccupied, hence 0 * 2 = 0 coins) - Room 5: 5 coins Total coins = 4 + 2 + 3 + 0 + 5 = 14 (if the hidden passage multiplication is not applied). However, since the 4th room is unoccupied, it would be doubled as 0 * 2. In this example, there are no additional hidden passages counted explicitly based on the given information. **Note:** Ensure you consider the possibility of unoccupied rooms affecting the total calculation appropriately.","solution":"def determine_total_coins(N, queries_responses): Determines the total number of gold coins, considering double coins for unoccupied rooms. :param N: int - Number of rooms. :param queries_responses: list of tuples - Each tuple contains (room_index, coins_count, is_occupied) :return: int - Total number of gold coins across all rooms. total_coins = 0 for i in range(N): room_index, coins_count, is_occupied = queries_responses[i] if not is_occupied: coins_count *= 2 total_coins += coins_count return total_coins"},{"question":"Write a function that takes a list of integers and returns the sum of all prime numbers in the list. If there are no prime numbers in the list, the function should return 0. Constraints * 1 ≤ len(list) ≤ 100 * -1000 ≤ list elements ≤ 1000 Input A list of integers separated by spaces is given in a line. Output Sum of all prime numbers in the list, or 0 if there are no prime numbers. Examples Input 1 3 4 5 6 7 Output 15 Input -3 -2 -1 0 1 4 6 8 9 Output 0 Input 2 17 19 23 Output 61","solution":"def is_prime(n): Determines if a number n is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def sum_of_primes(arr): Returns the sum of all prime numbers in the list. return sum(x for x in arr if is_prime(x))"},{"question":"Design a function that identifies whether a given Sudoku board configuration is valid. The Sudoku board could be partially filled, where empty cells are denoted by the character `\'.\'`. The function should return `True` if the given board configuration is valid according to Sudoku rules, and `False` otherwise. A Sudoku board is valid if: 1. Each row must contain the numbers \'1\'-\'9\' without repetition. 2. Each column must contain the numbers \'1\'-\'9\' without repetition. 3. Each of the nine 3x3 sub-boxes of the grid must contain the numbers \'1\'-\'9\' without repetition. **Input** The input will be a single 2D list representing the board, where each element is a character from \'1\' to \'9\' or \'.\'. **Output** The output will be a boolean value, `True` if the board configuration is valid and `False` otherwise. **Example** Input: `````` Output: ``` True ```","solution":"def isValidSudoku(board): Check if a given Sudoku board is valid. :param board: List[List[str]]: 2D list representing the board :return: bool: True if the board configuration is valid, otherwise False def is_valid_unit(unit): numbers = [num for num in unit if num != \'.\'] return len(numbers) == len(set(numbers)) # Check rows for row in board: if not is_valid_unit(row): return False # Check columns for col in range(9): if not is_valid_unit([board[row][col] for row in range(9)]): return False # Check 3x3 sub-boxes for box_row in range(3): for box_col in range(3): unit = [ board[row][col] for row in range(box_row * 3, (box_row + 1) * 3) for col in range(box_col * 3, (box_col + 1) * 3) ] if not is_valid_unit(unit): return False return True"},{"question":"You are participating in a treasure hunt game that involves decoding a sequence of numbers. The treasure map is described as an array of N integers. There is a special numeric code that you need to extract from this sequence. The code is the sum of the elements at prime indices in the array. A prime index is an index that is a prime number (2, 3, 5, 7, 11, etc.). Indexing is 1-based, meaning the first element of the array is considered at index 1. Write a program that calculates the special numeric code for a given array of integers. Input Format - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers denoting the elements of the array. Output Format - Output the special numeric code. Constraints - 1 ≤ N ≤ 10^6 - -10^9 ≤ each element ≤ 10^9 SAMPLE INPUT 5 4 7 6 5 3 SAMPLE OUTPUT 15 Explanation In this example, the array indices are: 1, 2, 3, 4, 5 Prime indices are 2, 3, 5 Elements at these indices are 7, 6, 3 Special numeric code = 7 + 6 + 3 = 16","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def special_numeric_code(arr): special_sum = 0 for idx in range(1, len(arr) + 1): if is_prime(idx): special_sum += arr[idx - 1] return special_sum"},{"question":"Professor Boggle, a renowned computer scientist, is fascinated by patterns in large datasets. He has a large matrix filled only with the numbers 0 and 1, and he is interested in finding the dimensions of the largest square submatrix composed entirely of 1s. Your task is to write a program that identifies the size of such a square within given matrices. # Input The input consists of multiple datasets representing matrices. Each dataset has the following format: > n m > row_1 > row_2 > ... > row_n Where `n` (1 ≤ n ≤ 1000) is the number of rows and `m` (1 ≤ m ≤ 1000) is the number of columns in the matrix. Each of the following `n` lines contains `m` integers that are either 0 or 1, separated by spaces. The end of the input is indicated by a line containing two zeros separated by a space (i.e., `n = 0` and `m = 0`). # Output For each dataset, output a single integer representing the size of the largest square submatrix filled with 1s. If no such submatrix exists, output 0. # Example Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 3 3 0 1 1 1 1 1 0 1 1 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 ``` Output ``` 2 2 5 ```","solution":"def find_largest_square(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if i == 0 or j == 0: dp[i][j] = matrix[i][j] elif matrix[i][j] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if dp[i][j] > max_side: max_side = dp[i][j] return max_side def process_input(input_string): input_lines = input_string.strip().split(\'n\') results = [] i = 0 while i < len(input_lines): n, m = map(int, input_lines[i].strip().split()) if n == 0 and m == 0: break matrix = [] for j in range(i+1, i+1+n): row = list(map(int, input_lines[j].strip().split())) matrix.append(row) results.append(find_largest_square(matrix)) i += n + 1 return results"},{"question":"You are given two strings a and b of the same length n consisting of lowercase Latin letters. The target is to make strings a and b each anagrams of some common string c by removing exactly one character from each string. An anagram of a string is any string that can be formed by rearranging the characters of that string. For example, the strings \\"abc\\" and \\"cba\\" are anagrams of the string \\"cab\\". Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The descriptions of the t test cases follow. Each test case consists of: * A single integer n (2 ≤ n ≤ 10^5) — the length of strings a and b. * The string a consisting of n lowercase Latin letters. * The string b consisting of n lowercase Latin letters. Output For each test case, print \\"YES\\" (without quotes) if you can make both strings a and b anagrams of the same string c by removing exactly one character from each string a and b, and \\"NO\\" otherwise. Example Input: 3 5 abcbc bccba 3 aaa bbb 4 xxyy yyxx Output: YES NO YES","solution":"def can_form_common_anagram(t, test_cases): results = [] for case in test_cases: n, a, b = case freq_a = {} freq_b = {} # Counting frequency of each character in a and b for char in a: if char in freq_a: freq_a[char] += 1 else: freq_a[char] = 1 for char in b: if char in freq_b: freq_b[char] += 1 else: freq_b[char] = 1 # Check if there\'s at least one common character can_form = False for char in freq_a: if char in freq_b: can_form = True break if can_form: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: t = 3 test_cases = [ (5, \\"abcbc\\", \\"bccba\\"), (3, \\"aaa\\", \\"bbb\\"), (4, \\"xxyy\\", \\"yyxx\\") ] print(can_form_common_anagram(t, test_cases))"},{"question":"You are given a list `a` consisting of `N` integers. Your task is to find two distinct integers `x` and `y` from the list such that the product of `x` and `y` is maximum. If there are multiple pairs with the same product, choose the pair with the smallest `x`. If still tied, choose the smallest `y`. Constraints * All values in the input are integers. * 2 leq N leq 100 * -10^4 leq a_i leq 10^4 Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the integers `x` and `y` such that their product is maximum. Examples Input 4 1 4 3 2 Output 3 4 Input 5 -10 -20 3 4 5 Output -10 -20","solution":"def find_maximum_product_pair(N, a): Find two distinct integers x and y from the list a such that the product of x and y is maximum. If there are multiple pairs with the same product, choose the pair with the smallest x. If still tied, choose the smallest y. max_product = float(\'-inf\') x, y = None, None for i in range(N): for j in range(i + 1, N): product = a[i] * a[j] if (product > max_product) or (product == max_product and (a[i] < x or (a[i] == x and a[j] < y))): max_product = product x, y = a[i], a[j] return (min(x, y), max(x, y)) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) a = list(map(int, data[1:])) x, y = find_maximum_product_pair(N, a) print(x, y) if __name__ == \\"__main__\\": main()"},{"question":"Create a program that reads a list of students\' scores and outputs the highest student score, lowest student score, and the mean score. The input data contains student scores as integer values ranging from 0 to 100, and there can be up to 50 students. Input A comma-separated list of student scores is given. Each score is an integer between 0 and 100. The list does not contain more than 50 scores. Output Highest score on the first line Lowest score on the second line Mean score (rounded to two decimal places) on the third line Example Input 85,70,90,55,60,78,94,82,67,80 Output 94 55 76.10","solution":"def student_scores_analysis(scores_str): Given a comma-separated string of student scores, this function returns the highest score, the lowest score, and the mean score rounded to two decimal places as a tuple. Parameters: scores_str (str): Comma-separated scores string Returns: highest (int): The highest score lowest (int): The lowest score mean (float): The mean score rounded to two decimal places scores = list(map(int, scores_str.split(\',\'))) highest = max(scores) lowest = min(scores) mean = round(sum(scores) / len(scores), 2) return highest, lowest, mean"},{"question":"A city in Byteland wants to establish a new postal service. The city has n neighborhoods and m direct connections between them. Each connection is bidirectional and has a specific distance d. The postal service aims to establish a central post office in one of the neighborhoods such that the maximum distance any resident has to travel to access the post office is minimized. Your task is to help determine the best neighborhood for establishing the central post office. Input The first line of the input contains two integers, n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of neighborhoods and the number of direct connections, respectively. The next m lines each contain three integers u, v, d (1 ≤ u, v ≤ n, 1 ≤ d ≤ 10^6, u ≠ v) — denoting that there exists a direct connection between neighborhood u and neighborhood v with a distance of d. It is guaranteed that you can travel between any two neighborhoods (possibly passing through some intermediate neighborhoods). Output Output a single integer, the minimum possible maximum distance from the central post office to any neighborhood. Examples Input 4 4 1 2 1 2 3 1 3 4 1 4 1 1 Output 2 Input 5 6 1 2 2 2 3 3 3 4 4 4 5 2 5 1 3 3 5 5 Output 5 Note In the first sample, if you establish the central post office in any neighborhood, the maximum distance to any other neighborhood is 2. The optimal choice can be either neighborhood 1, 2, 3, or 4 as they are all equidistant. In the second sample, the optimal neighborhood for the post office is neighborhood 3, where the longest distance to any other neighborhood is 5. The idea is to find the central post office such that the maximum travel distance to any neighborhood is minimized. This involves determining the optimal center for the network represented by the neighborhoods and connections.","solution":"import heapq def dijkstra(n, edges, start): Helper function using Dijkstra\'s algorithm to find the shortest paths from `start` to all other nodes in the graph. distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in edges[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_optimal_post_office(n, m, connections): This function finds the optimal neighborhood to establish the central post office such that the maximum distance to any other neighborhood is minimized. # Build the adjacency list edges = {i: [] for i in range(1, n + 1)} for u, v, d in connections: edges[u].append((v, d)) edges[v].append((u, d)) # Perform Dijkstra from every node to every other node min_max_distance = float(\'inf\') for i in range(1, n + 1): distances = dijkstra(n, edges, i) max_distance = max(distances.values()) if max_distance < min_max_distance: min_max_distance = max_distance return min_max_distance"},{"question":"You are given an initial string `S` of lowercase English alphabets. You can perform the following operation any number of times: 1. Choose a substring of `S` (possibly the whole string) and delete it. You need to determine if you can completely delete all characters from the string by performing the above operation such that after each operation, the new string formed is lexicographically smaller than the string formed before the operation. Write a function to check if it is possible to perform the operations such that the string becomes empty while satisfying the given condition. Constraints: * 1 <= |S| <= 10^5 Input * A single line containing the string `S`. Output * Print `YES` if it is possible to perform the operations to make the string empty, while satisfying the condition. Otherwise, print `NO`. Examples Input abc Output YES Input acbd Output NO Input zyx Output YES","solution":"def can_delete_lexicographically(S): Determines if S can be completely deleted such that after each operation, the new string is lexicographically smaller than the previous one. n = len(S) # Function to check the characters in non-increasing order def is_non_strictly_decreasing(s): return all(s[i] >= s[i + 1] for i in range(len(s) - 1)) if is_non_strictly_decreasing(S): return \'YES\' return \'NO\'"},{"question":"You are given a list of integers representing the heights of pine trees planted along both sides of a straight road. Your task is to plant the trees in such a way that they form a valley. That means the sequence of heights should first strictly decrease to a certain point and then strictly increase thereafter. Input The first line contains a single integer n (3 ≤ n ≤ 10^5) — the number of trees. The second line contains n integers: h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the trees. Output Print a single integer — the maximum number of trees that can be arranged to form such a valley. Examples Input 7 5 3 1 2 4 6 7 Output 7 Input 6 7 4 2 1 8 3 Output 5 Note For the first example, one possible arrangement forming a valley is [5, 3, 1, 2, 4, 6, 7]. For the second example, the arrangement [4, 2, 1, 3, 8, 7] forms the longest valley, which includes 5 trees.","solution":"def max_valley_trees(n, heights): if n < 3: return 0 left = [1] * n right = [1] * n # Calculate the longest decreasing subsequence length from left to right for i in range(1, n): if heights[i] < heights[i - 1]: left[i] = left[i - 1] + 1 # Calculate the longest increasing subsequence length from right to left for i in range(n - 2, -1, -1): if heights[i] < heights[i + 1]: right[i] = right[i + 1] + 1 max_valley_length = 0 # Find the maximum valley length for i in range(n): if left[i] > 1 and right[i] > 1: max_valley_length = max(max_valley_length, left[i] + right[i] - 1) return max_valley_length"},{"question":"In a city, there are n streets and m intersections. Each intersection connects with other intersections via streets. Some streets have tolls associated with them, while others are toll-free. An adventurer plans to travel from the starting intersection to a destination intersection with the objective of minimizing the total toll. You are given a matrix, where element (i, j) represents the toll cost of traveling from intersection i to intersection j. If there is no direct street between the intersections, the toll cost is indicated as infinite (or a very high number). Your task is to determine the minimum toll cost to travel from the given start intersection to the destination intersection. If it is not possible to reach the destination intersection from the start intersection, output \\"IMPOSSIBLE\\". Input The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of intersections and the number of streets. The second line contains two integers s and d (1 ≤ s, d ≤ n) — the start intersection and the destination intersection. The next m lines describe the streets, each containing three integers u, v, t (1 ≤ u, v ≤ n, 0 ≤ t ≤ 10^6) — indicating that there is a street from intersection u to intersection v with a toll cost of t. Note that there could be multiple streets between the same pair of intersections with different toll costs. Output Print the minimum toll cost to travel from intersection s to intersection d if there is a path, otherwise print \\"IMPOSSIBLE\\". Examples Input 4 4 1 4 1 2 5 2 3 10 3 4 1 2 4 7 Output 12 Input 3 2 1 3 1 2 2 2 1 2 Output IMPOSSIBLE Note In the first example: * The path from intersection 1 to 4 is 1 → 2 → 4 with a total toll of 5 + 7 = 12. * There is another path 1 → 2 → 3 → 4, but it has a higher toll of 5 + 10 + 1 = 16. In the second example: * There is no possible path from intersection 1 to 3. Use Dijkstra\'s algorithm or any other shortest path algorithm to solve this problem efficiently.","solution":"import heapq def minimum_toll_cost(n, m, s, d, streets): Determine the minimum toll cost to travel from start intersection to destination intersection. Parameters: n (int): Number of intersections. m (int): Number of streets. s (int): Starting intersection index. d (int): Destination intersection index. streets (list): List of tuples where each tuple consists of (u, v, t) indicating a street from intersection u to intersection v with a toll cost of t. Returns: int or str: Minimum toll cost or \\"IMPOSSIBLE\\" if there\'s no path from s to d. graph = {i: [] for i in range(1, n + 1)} for u, v, t in streets: graph[u].append((v, t)) # Priority queue for Dijkstra\'s algorithm pq = [(0, s)] tolls = {i: float(\'inf\') for i in range(1, n + 1)} tolls[s] = 0 while pq: current_toll, u = heapq.heappop(pq) if current_toll > tolls[u]: continue for v, t in graph[u]: new_toll = current_toll + t if new_toll < tolls[v]: tolls[v] = new_toll heapq.heappush(pq, (new_toll, v)) return tolls[d] if tolls[d] != float(\'inf\') else \\"IMPOSSIBLE\\""},{"question":"You\'re designing a conference room booking system for a popular tech company. They have one large conference room, and any team in the company can book this room for their meetings. Your task is to write a program that reads a booking request and determines whether the room is available for the requested time. If the room is available, book it and return \\"Booking successful\\". Otherwise, return \\"Room already booked\\". Hint You may store the bookings in a list and check each request against the current bookings to determine availability. Constraints The number of booking requests, Q, is less than or equal to 400. 1≤N≤500 Input The input consists of multiple booking requests. Each request is given in the following format: N REQUEST1 REQUEST2 ... REQUESTN N is the number of booking requests. REQUESTi(1≤i≤N) is a string which has the following format: team_name start end - team_name is the name of the team making the request. This is a string having between 1 and 32 characters. - start is the starting time of the meeting. This is an integer between 600 and 2400. First one or two digits represent the hour and the last two digits represent the minutes. For example, a time of \\"1300\\" represents 1:00 PM. - end is the ending time of the meeting. The same format as start is used. Note: The end time is always greater than the start time, and you can assume the meeting ends on the same day. The last line contains a single \\"0\\" which represents the end of input. Output For each booking request, output a string \\"Booking successful\\" if the room is available, and \\"Room already booked\\" if the room is already booked for that time. Example Input 3 TeamA 1000 1030 TeamB 1015 1100 TeamC 1100 1130 0 Output Booking successful Room already booked Booking successful","solution":"def booking_system(requests): Determines if each booking request can be fulfilled and returns the appropriate response. bookings = [] # List to store the current bookings result = [] for request in requests: team_name, start, end = request.split() start = int(start) end = int(end) # Check if the requested time overlaps with existing bookings available = True for booking in bookings: if not (end <= booking[0] or start >= booking[1]): available = False break if available: # Add to bookings if available bookings.append((start, end)) result.append(\\"Booking successful\\") else: result.append(\\"Room already booked\\") return result"},{"question":"You are given two strings A and B, each with a length of n. Your task is to recreate the second string B in a minimum number of operations, starting from an empty string and performing the following operations: 1. Append any character to the end of the string. 2. Delete the last character of the string. You can perform any number of operations of either type in whatever order you like. Your task is to find the minimum number of operations required to transform the empty string into string B. Input The first line contains the integer n (1 ≤ n ≤ 1000) – the length of strings A and B. The second line contains the string A. The third line contains the string B. Output Print a single integer – the minimum number of operations required. Examples Input 4 abcd abdc Output 8 Input 5 hello ohell Output 10 Input 6 abcdef fedcba Output 12","solution":"def min_operations_to_transform(n, A, B): Calculate the minimum number of operations required to transform an empty string into string B. Args: n (int): The length of strings A and B A (str): The first string B (str): The second string Returns: int: The minimum number of operations to transform the empty string into string B. # We need to append each character of B which takes n operations # And then delete the character from the end of string which again takes n operations return 2 * n"},{"question":"You are given a list of integers representing the daily temperatures for a week. Implement a function to determine how many days you would wait until a warmer temperature for each day. If there is no future day for which this is possible, record 0 for that day. Input A list of 7 integers where each integer T[i] represents the temperature on day i. Output A list of 7 integers where each integer represents the number of days you would have to wait until a warmer temperature. If there is no warmer temperature in the future for a particular day, store 0 for that day. Example Input [73, 74, 75, 71, 69, 72, 76] Output [1, 1, 4, 2, 1, 1, 0]","solution":"def daily_temperatures(T): Given a list of temperatures T, returns a list of how many days you would need to wait until a warmer temperature. If there is no future day for which this is possible, returns 0 for that day. answer = [0] * len(T) stack = [] for i, current_temp in enumerate(T): while stack and T[stack[-1]] < current_temp: prev_idx = stack.pop() answer[prev_idx] = i - prev_idx stack.append(i) return answer"},{"question":"Samantha loves to play with numbers. She recently encountered an interesting problem and decided to solve it using her programming skills. Given an array of positive integers, she needs to transform the array such that every element in the array is equal to the greatest element in the given array. However, she can only perform a specific operation: she can increment any element of the array by 1. Samantha wants to know the minimum number of increments required to make all the elements of the array equal to the maximum element in the original array. Input The first line contains an integer n (1 ≤ n ≤ 10^6), which is the size of the array. The second line contains n integers, the elements of the array, each between 1 and 10^9. Output Print the minimum number of increments required to make all elements in the array equal to the maximum element in the original array. Examples Input 5 1 2 3 4 5 Output 10 Input 3 5 5 5 Output 0 Input 4 1 1 1 100 Output 297 Explanation Let\'s consider the first example: The maximum element in the array is 5. To make the first element (1) equal to 5, we need 4 increments (5-1). To make the second element (2) equal to 5, we need 3 increments (5-2). To make the third element (3) equal to 5, we need 2 increments (5-3). To make the fourth element (4) equal to 5, we need 1 increment (5-4). The fifth element is already 5, so it needs 0 increments. Thus, the total number of increments is 4 + 3 + 2 + 1 = 10.","solution":"def min_increments_to_max(arr): Returns the minimum number of increments required to make all elements in the array equal to the maximum element. max_element = max(arr) return sum(max_element - x for x in arr)"},{"question":"Aliens have landed on Earth and they bring with them sophisticated technology that can perform complex calculations at lightning speed. They want to test human programmers by presenting a problem that involves sorting and closest pair selection. Your task is to help solve their problem. Given an array of N positive integers, you need to find two distinct indices i and j (1 ≤ i, j ≤ N, i ≠ j) such that the difference between array[i] and array[j] is minimal among all possible pairs in the array. In other words, you need to find the closest pair of elements in the array in terms of their value. Input The first line contains a single integer N (2 ≤ N ≤ 10^5) — the number of elements in the array. The second line contains N positive integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Output a single integer — the minimal difference between any pair of elements in the array. Example Input 5 1 5 3 19 18 Output 1 Note In the example, the pairs and their differences are: - |1 - 5| = 4 - |1 - 3| = 2 - |1 - 19| = 18 - |1 - 18| = 17 - |5 - 3| = 2 - |5 - 19| = 14 - |5 - 18| = 13 - |3 - 19| = 16 - |3 - 18| = 15 - |19 - 18| = 1 The smallest difference is 1 (between 19 and 18).","solution":"def find_minimal_difference(arr): Finds the minimal difference between any pair of elements in the array by sorting the array and checking the differences between consecutive elements. Args: arr (list of int): The list of positive integers. Returns: int: The minimal difference between any pair of elements. arr.sort() min_diff = float(\'inf\') for i in range(1, len(arr)): diff = arr[i] - arr[i-1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"Given a piece of plain text, encode it using a simple Run-Length Encoding (RLE) algorithm. The RLE algorithm works by replacing sequences of the same character that appear consecutively in the text with a single instance of that character, followed by the number of times it appears. For instance: - The string \\"aaabbcccc\\" would be encoded as \\"a3b2c4\\". - The string \\"abcd\\" would be encoded as \\"a1b1c1d1\\". Your task is to write a function that performs the run-length encoding on the given input string and returns the encoded string. # Constraints - The input string will have a length between 1 and ( 10^6 ). - The input string will only contain lowercase English letters (\'a\' to \'z\'). # Input Input is given from Standard Input in the following format: ``` text ``` # Output Print the encoded string. # Example Input ``` aaabbcccc ``` Output ``` a3b2c4 ``` Input ``` abcd ``` Output ``` a1b1c1d1 ``` # Note The function should handle very long strings efficiently and should ensure that the encoded string correctly represents the run-length encoding of the entire input string.","solution":"def run_length_encoding(text): Encodes the input text using Run-Length Encoding (RLE). Parameters: - text (str): The input string to encode. Returns: - str: The encoded string using RLE. if not text: return \\"\\" encoded_string = [] current_char = text[0] count = 1 for char in text[1:]: if char == current_char: count += 1 else: encoded_string.append(f\\"{current_char}{count}\\") current_char = char count = 1 # Append the last character and its count encoded_string.append(f\\"{current_char}{count}\\") return \'\'.join(encoded_string)"},{"question":"You are given a collection of strings, each string being either a word or a number. Your task is to re-organize the collection by placing all the words at the beginning in lexicographically sorted order and all the numbers at the end in ascending numerical order. The words and numbers should preserve their respective orders. If two strings are identical except for the type (one is a word and the other is a number), the number should be considered smaller and be placed in the numbers\' section. Input The first line of input contains an integer N (1 ≤ N ≤ 100) representing the number of strings in the collection. The following N lines each contain one string (each string either a word or a number). All input strings will consist of lowercase alphabets or digits only, and each string will be non-empty. Output Output the re-organized collection of strings, with all the words at the beginning in lexicographically sorted order and all the numbers at the end in ascending numerical order. Examples Input 5 apple 4 banana 2 cherry Output apple banana cherry 2 4 Input 4 3 1 2 apple Output apple 1 2 3 Input 3 banana apple 23 Output apple banana 23 Note In the first example, \\"apple\\", \\"banana\\", and \\"cherry\\" are words that are sorted lexicographically, and \\"2\\" and \\"4\\" are numbers sorted numerically. In the second example, \\"apple\\" is the only word and is placed at the beginning. The numbers \\"1\\", \\"2\\", and \\"3\\" are sorted numerically. In the third example, \\"apple\\" and \\"banana\\" are sorted lexicographically, and \\"23\\" is a number that is placed at the end.","solution":"def reorganize_collection(N, collection): Reorganize a collection of strings by placing all words at the beginning in lexicographically sorted order and all numbers at the end in ascending numerical order. Args: N : int : number of strings in the collection collection : list : a list of strings (each string either a word or a number) Returns: list : a list of rearranged strings as described words = [] numbers = [] for item in collection: if item.isdigit(): numbers.append(item) else: words.append(item) words.sort() numbers.sort(key=int) return words + numbers"},{"question":"A transportation company named TransFast is working on an optimized route management system. The company uses a fleet of vehicles that can carry a limited weight. Each day, a list of packages, with their individual weights, needs to be loaded onto the vehicles, and each vehicle has a maximum weight it can carry. Your task is to write a program that determines the minimum number of vehicles required to load all the packages considering the maximum weight capacity of each vehicle. Input The input consists of two lines. The first line contains two integers, N (1 ≤ N ≤ 50000) the number of packages, and W (1 ≤ W ≤ 1000000000) the maximum weight capacity of each vehicle. The second line contains N integers, each representing the weight of a package, where each weight is a positive integer not exceeding W. Output Print the minimum number of vehicles required to transport all the packages. Example Input 5 10 2 3 4 5 6 Output 2","solution":"def min_vehicles_to_transport_packages(num_packages, max_capacity, package_weights): Returns the minimum number of vehicles required to transport all packages given each vehicle\'s maximum capacity. package_weights.sort(reverse=True) vehicles = 0 while package_weights: current_vehicle_load = 0 vehicles += 1 for weight in package_weights[:]: if current_vehicle_load + weight <= max_capacity: current_vehicle_load += weight package_weights.remove(weight) return vehicles"},{"question":"L is practicing his music on a xylophone. The xylophone has n keys, with each key having a distinct integer frequency value. L can play a sequence of notes by pressing any key in increasing order of their position in the xylophone. L now wants to compose a melody with a length m using the keys of the xylophone. The melody should be composed by selecting m keys in strictly increasing order of their frequency values. His goal is to maximize the sum of the frequencies of the selected keys. Given the frequencies of the keys on the xylophone and the length of the desired melody, determine the maximum possible sum of the frequency values that L can achieve by choosing the keys optimally. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case contains two lines: - The first line contains two integers n (1 ≤ n ≤ 100) — the number of keys on the xylophone and m (1 ≤ m ≤ n) — the length of the desired melody. - The second line contains n integers f_1, f_2, ..., f_n (1 ≤ f_i ≤ 1000) — the frequencies of the keys. Output For each test case, print a single integer — the maximum possible sum of the frequencies of the selected keys for the desired melody. Example Input 2 5 3 10 20 30 40 50 4 2 15 25 35 45 Output 120 80 Explanation In the first test case, L can select the keys with frequencies 30, 40, and 50 to achieve the maximum sum of 120. In the second test case, L can select the keys with frequencies 35 and 45 to achieve the maximum sum of 80.","solution":"def calculate_max_sum(t, test_cases): results = [] for i in range(t): n, m, frequencies = test_cases[i] # Sort the frequencies in descending order to select the m highest frequencies frequencies.sort(reverse=True) # Sum the m highest frequencies max_sum = sum(frequencies[:m]) results.append(max_sum) return results"},{"question":"Jiro and Aoi are stranded on an island, and they want to play a game to keep their spirits up. They have a sequence of n integers, and they want to find the longest contiguous subsequence which has an equal number of even and odd numbers. The challenge is to write a function that takes in the sequence and returns the length of the longest contiguous subsequence with an equal number of even and odd numbers. Function Signature: ``` def longest_even_odd_subseq(arr: List[int]) -> int: ``` # Input - An integer `n` (1 ≤ n ≤ 10^5) — the length of the sequence. - An array `arr` of `n` integers (1 ≤ arr[i] ≤ 10^9). # Output - A single integer representing the length of the longest contiguous subsequence having an equal number of even and odd numbers. # Examples Example 1 # Input ``` 7 1 2 3 4 5 6 7 ``` # Output ``` 6 ``` # Explanation The longest contiguous subsequence with an equal number of even and odd numbers is `[1, 2, 3, 4, 5, 6]`. Example 2 # Input ``` 6 2 4 6 1 3 5 ``` # Output ``` 6 ``` # Explanation The entire array `[2, 4, 6, 1, 3, 5]` has an equal number of even and odd numbers. Example 3 # Input ``` 5 1 3 5 7 9 ``` # Output ``` 0 ``` # Explanation There is no subsequence with an equal number of even and odd numbers in the array `[1, 3, 5, 7, 9]`. # Notes - The elements of the array can be very large. - The function should be optimized for performance since n can go up to 100,000.","solution":"def longest_even_odd_subseq(arr): Returns the length of the longest contiguous subsequence with an equal number of even and odd numbers. n = len(arr) # Dictionary to store the first occurrence of each diff value diff_map = {0: -1} max_len = 0 diff = 0 # This will store the difference of counts of even and odd numbers for i in range(n): if arr[i] % 2 == 0: diff += 1 # Even number else: diff -= 1 # Odd number if diff in diff_map: max_len = max(max_len, i - diff_map[diff]) else: diff_map[diff] = i return max_len"},{"question":"You are given an array of integers and an integer k. You need to determine the length of the shortest contiguous subarray that contains at least one instance of k distinct integers. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n) — the length of the array and the number of distinct integers required, respectively. The second line contains n integers representing the elements of the array (1 ≤ array[i] ≤ 10^5). Output Output a single integer — the length of the shortest contiguous subarray that contains at least one instance of k distinct integers. If no such subarray exists, output -1. Example Input 8 3 1 2 1 2 3 4 5 3 Output 3 Note In the example, the shortest subarray that contains at least one instance of 3 distinct integers is [2, 3, 4], which has a length of 3.","solution":"def shortest_subarray_length_with_k_distinct(n, k, arr): Returns the length of the shortest contiguous subarray that contains at least one instance of k distinct integers. from collections import defaultdict if k > n: return -1 left = 0 right = 0 distinct_count = 0 frequency = defaultdict(int) min_length = float(\'inf\') while right < n: frequency[arr[right]] += 1 if frequency[arr[right]] == 1: distinct_count += 1 while distinct_count >= k: min_length = min(min_length, right - left + 1) frequency[arr[left]] -= 1 if frequency[arr[left]] == 0: distinct_count -= 1 left += 1 right += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a rectangular grid with n rows and m columns, where each cell contains either a dot (.) or an asterisk (*). You need to determine if it\'s possible to traverse from the top-left corner (1, 1) to the bottom-right corner (n, m) of the grid without stepping on any asterisks (*), using the following movement rules: - You can move one step up, down, left, or right. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m characters, either \'.\' or \'*\', representing the grid. Output Output \\"YES\\" (without quotes) if it is possible to traverse from the top-left corner to the bottom-right corner without stepping on any asterisks (*). Otherwise, output \\"NO\\" (without quotes). You can choose the case (lower or upper) for each letter arbitrarily. Examples Input 3 3 . * . . . . * . . Output YES Input 3 3 * . . . * . . . . Output NO Input 2 2 . * * . Output NO Input 4 4 . . . . . * * * . . . . . * . . Output YES Note In the first sample, you can move in the following sequence to reach the bottom-right corner: (1, 1) -> (2, 1) -> (2, 2) -> (2, 3) -> (3, 3). In the second sample, there is no way to reach the bottom-right corner because the cell (2, 2) with an asterisk blocks all potential paths. In the last example, one possible path is: (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (2, 4) -> (3, 4) -> (3, 3) -> (3, 2) -> (4, 2) -> (4, 3) -> (4, 4).","solution":"def can_traverse(n, m, grid): Determine if it\'s possible to traverse from the top-left corner to the bottom-right corner without stepping on any asterisks. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: List of strings representing the grid, with \'.\' or \'*\' :return: \\"YES\\" if traversal is possible, otherwise \\"NO\\" from collections import deque if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"A courier company needs to deliver packages between different warehouses. The company has N warehouses located in different cities, identified by indices from 1 to N. The locations of these warehouses are represented by coordinates (x_i, y_i). Two warehouses, A and B, can be directly connected by a road, and the cost of building this road is equal to the Euclidean distance between the two warehouses. However, to minimize the total road construction cost, the company decides to build a minimal spanning tree (MST) connecting all the warehouses, ensuring the lowest possible total cost for roads while keeping all warehouses connected. Your task is to write a program that calculates the minimum total road construction cost required to connect all the warehouses. Input The input is given in the following format: ``` N x_1 y_1 x_2 y_2 ... x_N y_N ``` The first line provides the number of warehouses, N (2 leq N leq 1000). Each of the subsequent N lines provides the coordinates of the i-th warehouse (x_i, y_i) as integers (-10^6 leq x_i, y_i leq 10^6). Output Output the minimum total road construction cost. Example Input ``` 4 0 0 0 2 2 2 2 0 ``` Output ``` 6.8284 ``` Input ``` 3 1 1 4 5 7 8 ``` Output ``` 9.2426 ``` Note In the first example, the minimal spanning tree (MST) connects all four warehouses with the minimum total cost calculated as follows: - Connect (0,0) to (0,2): distance = 2 - Connect (0,2) to (2,2): distance = 2 - Connect (2,2) to (2,0): distance = 2 Thus, the total minimum cost = 2 + 2 + 2 = 6. In the second example, the MST connects the three warehouses with the minimum total cost: - Connect (1,1) to (4,5): distance = 5 - Connect (4,5) to (7,8): distance ≈ 4.2426 Thus, the total minimum cost ≈ 5 + 4.2426 ≈ 9.2426. The output should be rounded to 4 decimal places.","solution":"import math from heapq import heappop, heappush def calculate_minimum_road_construction_cost(N, coordinates): def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) adj = [[] for _ in range(N)] for i in range(N): for j in range(i + 1, N): distance = euclidean_distance(coordinates[i], coordinates[j]) adj[i].append((distance, j)) adj[j].append((distance, i)) visited = [False] * N min_heap = [(0, 0)] total_cost = 0 while min_heap: cost, u = heappop(min_heap) if visited[u]: continue visited[u] = True total_cost += cost for next_cost, v in adj[u]: if not visited[v]: heappush(min_heap, (next_cost, v)) return round(total_cost, 4)"},{"question":"In the mystical land of Gridilia, there is a famous maze called the Labyrinth of Paths. The labyrinth is represented as an `n x m` grid where each cell can either be an open path (\'.\') or a wall (\'#\'). You start at a given cell (sx, sy), and your goal is to find the shortest path to the exit cell (ex, ey). You can move in the four cardinal directions: north, south, east, or west, but you cannot move into a wall or outside the boundaries of the grid. Moving between any two adjacent cells takes exactly one unit of time. Given the maze layout and the start and exit coordinates, determine the minimum time required to reach the exit cell from the start cell. If it is not possible to reach the exit, return -1. # Input: - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000), the dimensions of the grid. - The following `n` lines each contain `m` characters representing the grid where \'.\' is an open path and \'#\' is a wall. - The next line contains two integers, `sx` and `sy` (0 ≤ sx < n, 0 ≤ sy < m), the starting cell coordinates. - The last line contains two integers, `ex` and `ey` (0 ≤ ex < n, 0 ≤ ey < m), the exit cell coordinates. # Output: - Output the minimum time to reach the exit cell from the start cell. If it is not possible, print -1. # Example: Input: ``` 5 5 ..... .#. ...#. .#. ..... 0 0 4 4 ``` Output: ``` 8 ``` Explanation: One of the shortest paths is to move right, right, down, down, down, left, left, down. Input: ``` 5 5 # #.#.# #.# #.# # 1 1 3 3 ``` Output: ``` -1 ``` Explanation: It is not possible to find a path to the exit because it is surrounded by walls.","solution":"from collections import deque def shortest_path(n, m, grid, sx, sy, ex, ey): if grid[sx][sy] == \'#\' or grid[ex][ey] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # north, south, west, east queue = deque([(sx, sy, 0)]) # (x, y, distance) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() if x == ex and y == ey: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are planning to paint a fence with a certain number of posts in a row using two distinct colors. Your task is to write a program that determines the number of possible ways to paint the fence such that no more than two adjacent posts have the same color. For example, say you use colors A and B to paint the fence. The sequence of colors should follow these rules: - No more than two adjacent posts can be the same color. - You must use exactly two colors. Input The input consists of multiple datasets. Each dataset is described by a single integer n (1 ≤ n ≤ 1000) which represents the number of fence posts. The input is terminated by a line that contains zero. Output For each dataset, output the number of ways to paint the fence. Example Input 3 4 5 0 Output 6 10 16 Explanation of the example: In each input case: - For 3 posts, the valid sequences are AAB, ABA, ABB, BAA, BAB, BBA. - For 4 posts, the valid sequences are AABA, ABAB, ABBA, BAAB, BABA, BABB, ABAA, BAAA, BBAB, AABB. - For 5 posts, the valid sequences should be calculated following the same principle. Note Consider that you cannot have more than two adjacent posts painted in the same color; e.g., for 3 posts, \\"AAA\\" and \\"BBB\\" are invalid sequences.","solution":"def paint_fence(n): Calculate the number of ways to paint the fence with `n` posts using two colors such that no more than two adjacent posts have the same color. :param n: Number of fence posts :type n: int :return: Number of ways to paint the fence :rtype: int if n == 1: return 2 # AA or BB elif n == 2: return 4 # AB, BA, AA, BB same = 2 # cases where the last two posts are the same color diff = 2 # cases where the last two posts are different colors for i in range(3, n+1): new_same = diff new_diff = (same + diff) * 1 # New post can be different color from the last one same = new_same diff = new_diff return same + diff def process_input(input_data): results = [] for n in input_data: if n == 0: break results.append(paint_fence(n)) return results"},{"question":"A company has implemented a new payroll system and wants to automate the calculation of employee salaries, including bonuses. The company policy dictates that each employee\'s bonus is calculated based on their years of service. Given the number of years an employee has worked at the company, the following rules apply: - For each year of service, the employee receives a bonus of 100. - In the 5th year, an additional one-time bonus of 500 is given. - In the 10th year, an additional one-time bonus of 1000 is given (in addition to the 5th year bonus). Write a function that computes the total bonus for an employee based on their years of service. Input: - An integer `Y` representing the number of years the employee has worked at the company (1 ≤ Y ≤ 50). Output: - An integer representing the total bonus the employee is entitled to. Example: Input: 7 Output: 1200 Explanation: - For each year from 1 to 7, the employee receives 100, which totals to 700. - Additionally, they receive a bonus of 500 in the 5th year. - Thus, the total bonus is 700 + 500 = 1200.","solution":"def calculate_bonus(Y): Returns the total bonus for an employee based on their years of service. :param Y: int : Number of years the employee has worked at the company (1 ≤ Y ≤ 50) :return: int: Total bonus the employee is entitled to base_bonus = Y * 100 additional_bonus = 0 if Y >= 5: additional_bonus += 500 if Y >= 10: additional_bonus += 1000 return base_bonus + additional_bonus"},{"question":"Bob is a fan of fantasy worlds, and he loves reading stories about kingdoms, knights, and dragons. He recently came across an interesting kingdom represented as a matrix of size n x n. This matrix contains integers where each integer represents the height of a hill located at that position within the kingdom. A unit step can be taken between any two adjacent cells (vertically, horizontally, or diagonally). Bob wondered if there is a path from the top-left corner of the matrix to the bottom-right corner where the difference in heights between consecutive cells on the path does not exceed a given integer k. Can you help Bob determine if such a path exists? Input - The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 10^4) — the size of the matrix and the maximum allowed difference in heights. - The next n lines each contain n integers — the matrix representing heights within the kingdom. Each integer in the matrix will be between 0 and 10^4. Output - Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner where the height difference between consecutive cells does not exceed k. - Print \\"NO\\" otherwise. Examples Input 3 2 1 3 2 6 5 4 7 8 5 Output YES Input 3 1 1 2 3 4 5 6 7 8 9 Output NO Note In the first example, a valid path from the top-left to the bottom-right exists: (1 -> 3 -> 2 -> 4 -> 5), where the maximum height difference between consecutive cells is 2, which is within the allowed limit k. In the second example, no valid path exists where the height difference between consecutive cells does not exceed 1.","solution":"def is_path_possible(n, k, kingdom): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] def is_valid(x, y, height): return 0 <= x < n and 0 <= y < n and not visited[x][y] and abs(kingdom[x][y] - height) <= k visited = [[False] * n for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == n - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, kingdom[x][y]): visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Valera and Arcady are back with a new twist to their game \\"GAGA: Go And Go Again\\". This time, they have added a variation where soldiers are arranged in a circular formation and each soldier can only shoot at adjacent enemies. The game consists of three steps as before: first Valera makes a move, then Arcady, then Valera again, and the game ends. Each soldier can target the soldier immediately to their left or right. Valera has the first move and aims to maximize the number of soldiers killed. Arcady then makes his move, targeting to minimize Valera\'s kills while maximizing his own kills. Valera concludes with the final move with the same goal as his first. You are asked to calculate the maximum total number of soldiers that may be killed during the game. Input The input consists of a single integer n (4 ≤ n ≤ 1000, n is even), representing the total number of soldiers in each army. Each player has n soldiers arranged in a circle. Output Print a single number — the maximum total number of soldiers that could be killed over the course of the three turns. Examples Input 4 Output 3 Input 6 Output 5 Note For n = 4: 1) Valera\'s soldiers can strategically choose targets to ensure maximum kills in the first move. 2) Arcady then targets back, balancing between minimizing Valera\'s future targets and maximizing his own kills. 3) Valera finishes by targeting the remaining viable soldiers. In this example, Valera and Arcady\'s effective targeting results in 3 soldiers being killed in total. For higher values, the complexity of strategic targeting increases, but an optimal strategy ensures maximum kills totalizing as computed.","solution":"def max_soldiers_killed(n): Calculates the maximum number of soldiers that can be killed in the game. Args: n: int - Number of soldiers in each army (4 ≤ n ≤ 1000, n is even) Returns: int - Maximum total number of soldiers that can be killed # Given the problem description, the pattern emerges that the maximum number # of soldiers killed is n - 1. return n - 1"},{"question":"Problem Armed with vital data, you have been tasked with managing a collection of books in a library. Each book is identified by a unique ID, and each ID has a corresponding rating value. Your job is to efficiently handle queries that will update the ratings of books and calculate the total ratings within a specified range of book IDs. You will process the following two types of queries: 1. Update Query 1 i v - Update the rating of the book with ID i to a new value v . 2. Range Query 2 l r - Calculate the total rating of all books from ID l to ID r (inclusive). Constraints The input satisfies the following conditions: - 1 leq N leq 10^5 - Number of books - 1 leq Q leq 10^5 - Number of queries - 1 leq i, l, r leq N - 1 leq v leq 10^4 Input The input is given in the following format: N Q initial_rating_1 initial_rating_2 dots initial_rating_N query_1 query_2 vdots query_Q The first line contains the integer N , the number of books, and Q , the number of queries, separated by a single space. The second line contains N integers which represent the initial ratings of the books. Each of the following Q lines describes a query in one of the two formats outlined above. Output For each Range Query (type 2), print the total rating of books in the specified range on a new line. Examples Input 5 5 5 3 6 2 1 2 1 3 1 3 10 2 2 4 1 4 8 2 1 5 Output 14 15 27 Input 4 4 1 2 3 4 2 1 4 1 2 5 2 1 3 2 3 4 Output 10 9 7","solution":"class Library: def __init__(self, initial_ratings): self.ratings = initial_ratings self.N = len(initial_ratings) self.tree = [0] * (self.N + 1) for i in range(self.N): self._update_tree(i + 1, self.ratings[i]) def _update_tree(self, i, delta): while i <= self.N: self.tree[i] += delta i += (i & -i) def _query_tree(self, i): s = 0 while i > 0: s += self.tree[i] i -= (i & -i) return s def update_rating(self, i, new_value): delta = new_value - self.ratings[i - 1] self.ratings[i - 1] = new_value self._update_tree(i, delta) def range_query(self, l, r): return self._query_tree(r) - self._query_tree(l - 1) def manage_library(N, Q, initial_ratings, queries): library = Library(initial_ratings) result = [] for query in queries: if query[0] == 1: library.update_rating(query[1], query[2]) elif query[0] == 2: result.append(library.range_query(query[1], query[2])) return result # Example usage: N = 5 Q = 5 initial_ratings = [5, 3, 6, 2, 1] queries = [(2, 1, 3), (1, 3, 10), (2, 2, 4), (1, 4, 8), (2, 1, 5)] print(manage_library(N, Q, initial_ratings, queries))"},{"question":"You are given an array of integers and a target integer. Your task is to find out whether there are two distinct indices i and j in the array such that the sum of the elements at these indices is equal to the target integer. Write a function to return True if such indices exist, otherwise return False. Input - The first line contains an integer n (2 ≤ n ≤ 10^5), the length of the array. - The second line contains n integers, the elements of the array. - The third line contains the target integer t. Output Output \\"True\\" if there are two distinct indices i and j such that array[i] + array[j] = t, otherwise output \\"False\\". Example Input 6 1 2 3 4 5 6 9 Output True Note In the first example: * 3 + 6 = 9 * 4 + 5 = 9 Hence, the answer is True because there are pairs of indices where the sum is equal to the target.","solution":"def has_pair_with_sum(arr, target): Returns True if there are two distinct indices i and j in the array such that the sum of the elements at these indices is equal to the target. Otherwise, returns False. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Implement a class `EventScheduler` that manages and schedules events. The class should support three main operations: scheduling a new event, removing an existing event, and listing all scheduled events in a sorted order according to time. Each event has a name and a time. Events are represented as tuples where the first element is the event name (string) and the second element is the event time (integer). The time is given in minutes from the start of the scheduling period. The `EventScheduler` class should support the following methods: 1. **schedule_event(event)**: - Takes a tuple `(name, time)` as input and adds the event to the schedule. - If an event with the same name already exists, it should update the time to the new value. 2. **remove_event(name)**: - Takes a string `name` as input and removes the event with that name from the schedule. - If no such event exists, it does nothing. 3. **list_events()**: - Returns a list of all scheduled events, sorted by time in ascending order. - If two events have the same time, they should be sorted by name in ascending order. Implement the `EventScheduler` class and provide a test script that demonstrates the functionality of the methods. **Input Examples:** ``` scheduler = EventScheduler() scheduler.schedule_event((\\"Meeting\\", 30)) scheduler.schedule_event((\\"Workshop\\", 60)) scheduler.schedule_event((\\"Lunch\\", 45)) scheduler.schedule_event((\\"Meeting\\", 50)) # Update the time for \'Meeting\' scheduler.remove_event(\\"Lunch\\") events = scheduler.list_events() print(events) ``` **Output Example:** ``` [(\'Meeting\', 50), (\'Workshop\', 60)] ``` **Note:** - Event names are unique and case-sensitive. - Event times are non-negative integers. - The ordering of events by time and name should be consistent with Python\'s default tuple comparison.","solution":"class EventScheduler: def __init__(self): self.events = {} def schedule_event(self, event): name, time = event self.events[name] = time def remove_event(self, name): if name in self.events: del self.events[name] def list_events(self): return sorted(self.events.items(), key=lambda event: (event[1], event[0]))"},{"question":"A researcher is studying sequences of numbers and their properties. He is particularly interested in finding the longest contiguous subsequence where the sum of the subsequence is zero. Given a sequence of integers, find the length of such a subsequence. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000) — the elements of the sequence. Output Output a single integer — the length of the longest contiguous subsequence with a sum of zero. If there is no such subsequence, output 0. Example Input 8 1 2 -3 1 2 -2 -2 3 Output 5 Note In the example, the subsequence 2 -3 1 2 -2 has a sum of zero, and its length is 5. This is the longest such subsequence for the given input.","solution":"def longest_zero_sum_subsequence(arr): prefix_sum = 0 prefix_sum_dict = {} max_length = 0 for i, val in enumerate(arr): prefix_sum += val if prefix_sum == 0: max_length = i + 1 if prefix_sum in prefix_sum_dict: max_length = max(max_length, i - prefix_sum_dict[prefix_sum]) else: prefix_sum_dict[prefix_sum] = i return max_length"},{"question":"A scientist is studying the migration patterns of birds and needs to identify the longest sequence of birds flying in a straight path. He tracks the positions of birds at different snapshots and wants to determine the maximum length of a sequence where each bird is positioned at equal distances from its neighbors on either side. Your task is to help the scientist by analyzing the tracked positions of birds and identifying the length of the longest subsequence where the positions form an arithmetic progression. Input The input consists of two lines: 1. An integer N (0 < N < 100001), the number of positions tracked. 2. N space-separated integers representing the positions at each snapshot, in meters (0 ≤ positions ≤ 100000). Output Output the length of the longest subsequence of positions that form an arithmetic progression. SAMPLE INPUT 10 1 7 10 13 14 19 20 33 36 2 SAMPLE OUTPUT 4 Explanation The longest subsequences that form an arithmetic progression are: 1. (1, 7, 13, 19) with a common difference of 6. 2. (10, 14, 18, 22) with a common difference of 4. 3. (7, 13, 19, 25) with a common difference of 6. The maximum length among these subsequences is 4.","solution":"def longest_arithmetic_subsequence_length(positions): N = len(positions) if N == 0: return 0 if N == 1: return 1 positions.sort() longest = 1 dp = [{} for _ in range(N)] for i in range(N): for j in range(i): diff = positions[i] - positions[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 longest = max(longest, dp[i][diff]) return longest"},{"question":"Takahashi is organizing a series of workshops. There are N participants who will join. These participants are conveniently numbered from 1 to N. Takahashi wants to schedule M workshops, numbered from 1 to M. Each participant has a preference list of workshops, ranked from most preferred to least preferred. A participant will attend the most preferred workshop that has not yet reached its capacity limit. Each workshop has the same fixed capacity limit, which is L participants. If a participant cannot attend any of their preferred workshops because all their preferred workshops are full, they will not attend any workshop. Takahashi wants to determine the minimum capacity limit L such that all participants can attend at least one workshop. Constraints * 1 leq N leq 300 * 1 leq M leq 300 * 1 leq P_{ij} leq M (P_{ij} denotes participant i\'s j-th preferred workshop) Input Input is given from Standard Input in the following format: N M P_{11} P_{12} ... P_{1M} P_{21} P_{22} ... P_{2M} : P_{N1} P_{N2} ... P_{NM} Output Print the minimum capacity limit L such that all participants can attend at least one workshop. Examples Input 4 3 1 2 3 2 3 1 3 1 2 1 3 2 Output 2 Input 3 2 1 2 2 1 1 2 Output 2","solution":"def can_all_attend(preferences, N, M, L): workshop_slots = [0] * M for participant_pref in preferences: for workshop in participant_pref: if workshop_slots[workshop - 1] < L: workshop_slots[workshop - 1] += 1 break return sum(workshop_slots) == N def find_minimum_capacity(N, M, preferences): low, high = 1, N while low < high: mid = (low + high) // 2 if can_all_attend(preferences, N, M, mid): high = mid else: low = mid + 1 return low # Input and output handling part (not strictly needed for the solution definition) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) preferences = [] idx = 2 for _ in range(N): preferences.append(list(map(int, data[idx:idx + M]))) idx += M print(find_minimum_capacity(N, M, preferences))"},{"question":"Write a program that simulates a robot moving in a 2D grid while avoiding obstacles. The robot can move in four directions: up, down, left, and right. The grid is represented as a list of lists, where `1` denotes an obstacle and `0` denotes a free cell. The robot starts at the top-left corner of the grid, and the goal is to reach the bottom-right corner. Your task is to determine whether the robot can reach the bottom-right corner of the grid without colliding with any obstacles. If the robot can reach the end, print \\"Yes\\". Otherwise, print \\"No\\". Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. The next n lines each contain m integers (either 0 or 1), representing the grid. Output Print \\"Yes\\" if the robot can reach the bottom-right corner, otherwise, print \\"No\\". Example Input 3 3 0 0 1 0 1 0 1 0 0 Output No Input 4 4 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 Output Yes Note In the first example, there is no way for the robot to reach the bottom-right corner without encountering an obstacle. In the second example, the robot can move from the top-left corner (position [0][0]) to the bottom-right corner (position [3][3]) through the cells with value 0.","solution":"def can_reach_end(grid): Determines if the robot can reach the bottom-right corner of the grid avoiding obstacles. n = len(grid) m = len(grid[0]) def is_valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 def dfs(x, y): if not is_valid_move(x, y): return False if (x, y) == (n-1, m-1): return True grid[x][y] = -1 # Mark as visited directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] for dx, dy in directions: if dfs(x + dx, y + dy): return True return False return \\"Yes\\" if dfs(0, 0) else \\"No\\""},{"question":"You are given a list of cities represented as an array cities[] where each city has a number of residents residents[]. Your task is to implement a function to redistribute the residents such that the number of residents in each city is as close to the average number of residents as possible. Here\'s how to approach this: 1. Calculate the average number of residents per city. 2. Redistribute the residents in such a way that each city\'s residents is as close as possible to the average number of residents. 3. Return the minimum number of moves required to achieve this distribution. A \\"move\\" is defined as transferring a resident from one city to another city. Constraints * 2 leq n leq 100,000 * 0 leq residents[i] leq 1,000,000 Input * An integer n representing the number of cities. * An array cities[] of integers representing the number of residents in each city. Output * An integer representing the minimum number of moves required to achieve the distribution. Example Input 5 cities: [1, 2, 5, 4, 8] Output 5 Explanation 1. The average number of residents is (1 + 2 + 5 + 4 + 8) / 5 = 20 / 5 = 4. 2. For city 0: Residents needed to reach average = 4 - 1 = 3 moves 3. For city 1: Residents needed to reach average = 4 - 2 = 2 moves 4. For city 2: Residents to redistribute = 5 - 4 = 1 move 5. For city 3: Residents needed to reach average = 4 - 4 = 0 moves 6. For city 4: Residents to redistribute = 8 - 4 = 4 moves 7. Total moves = 3 + 2 + 1 + 0 + 4 = 10 moves and then divide by 2 (since each move is transferring one resident from a city to another) = 5 moves","solution":"def min_moves_to_redistribute(n, cities): Returns the minimum number of moves required to redistribute the residents such that the number of residents in each city is as close to the average number of residents as possible. Parameters: n (int): The number of cities. cities (List[int]): The number of residents in each city. Returns: int: The minimum number of moves required. total_residents = sum(cities) average_residents = total_residents // n moves = 0 for city in cities: moves += abs(city - average_residents) return moves // 2"},{"question":"In a distant kingdom, there is a magical garden with n different types of flowers. Each flower has a unique beauty factor associated with it, and the flowers are planted in a linear row. The king of the land wants to find out the maximum beauty that can be found in any contiguous subarray of these flowers. Given the beauty factors of the flowers as an array, your task is to find the maximum sum of beauty factors in any subarray. Input The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of flowers in the garden. The second line contains n integers bi (−10^6 ≤ bi ≤ 10^6) — the beauty factors of the flowers. Output Print a single integer — the maximum sum of beauty factors in any contiguous subarray. Examples Input 5 -1 2 3 -5 4 Output 5 Input 4 -2 -3 -1 -4 Output -1","solution":"def max_beauty_subarray(n, beauty_factors): Returns the maximum sum of beauty factors in any contiguous subarray. Parameters: n (int): The number of flowers. beauty_factors (List[int]): A list of integers representing the beauty factors of the flowers. Returns: int: The maximum sum of beauty factors in any contiguous subarray. # Initialize variables max_current = beauty_factors[0] max_global = beauty_factors[0] for i in range(1, n): max_current = max(beauty_factors[i], max_current + beauty_factors[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"In a faraway kingdom, there are numerous castles connected by roads. Each road connects exactly two castles and is bidirectional. The king wants to fortify the kingdom by ensuring that there is at least one direct or indirect road connecting every pair of castles. To achieve this, the king needs to determine the minimum number of roads that need to be added. Given a map of castles and roads as a graph, where castles are nodes and roads are edges, write a program to compute the minimum number of roads required to ensure that every pair of castles is connected either directly or indirectly. Simply put, find the minimum number of edges needed to make the graph connected. # Input - The first line contains two integers `N` and `M` (1 ≤ N ≤ 100, 0 ≤ M ≤ N*(N-1)/2), where `N` is the number of castles and `M` is the number of existing roads. - The next `M` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ N) indicating that there is a road between castles `u` and `v`. # Output Print a single integer representing the minimum number of roads required to make the whole network of castles connected. # Example Input ``` 5 2 1 2 3 4 ``` Output ``` 2 ``` Input ``` 3 1 1 2 ``` Output ``` 1 ``` # Note In the first example, there are 5 castles and only 2 roads. The minimum number of additional roads required to connect all castles is 2 (one between castle 2 and castle 3, another between castle 4 and castle 5). In the second example, there are 3 castles and 1 road. To connect all castles, we only need 1 additional road (between castles 2 and 3). Consider using graph traversal algorithms like DFS or BFS to check connectivity and then find the number of disjoint sets you need to connect.","solution":"def count_components(n, roads): parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY for u, v in roads: union(u - 1, v - 1) return len(set(find(x) for x in range(n))) def minimum_additional_roads(n, m, roads): # Count the number of connected components connected_components = count_components(n, roads) # Number of roads to add is number of disjoint components minus 1 return connected_components - 1"},{"question":"A tech company is organizing a hackathon, and they want to group participants into teams based on their skill levels. Each participant has a skill level, and the company has specific rules for forming the teams: 1. Each team must consist of exactly 3 participants. 2. The skill level difference between the highest and lowest skill levels in a team must not exceed 2. Write a program that determines the maximum number of teams that can be formed according to these rules. INPUT: The first line contains an integer n, the number of participants. The second line contains n integers, each representing the skill level of a participant. OUTPUT: Print a single integer, the maximum number of teams that can be formed. CONSTRAINTS: 1 ≤ n ≤ 100 1 ≤ skill level ≤ 100 SAMPLE INPUT 6 1 5 3 3 2 4 SAMPLE OUTPUT 2 EXPLANATION: The maximum number of teams that can be formed is 2. Possible teams are: - Team 1: [1, 2, 3] - Team 2: [3, 4, 5] Note that \\"3\\" can be used in both teams as different members. However, in the output, such overlapping is not permissible. Each participant can only be in one team.","solution":"def max_teams(n, skill_levels): Determines the maximum number of teams that can be formed based on the given rules. Args: n (int): The number of participants. skill_levels (list of int): The skill levels of the participants. Returns: int: The maximum number of teams that can be formed. skill_levels.sort() i = 0 teams_count = 0 while i + 2 < n: if skill_levels[i + 2] - skill_levels[i] <= 2: teams_count += 1 i += 3 else: i += 1 return teams_count"},{"question":"SuperMart is a popular grocery store chain that tracks the sales of various products. The store manager wants to analyze the sales data collected over several days. Each day\'s sales data consists of a list of integers representing the number of units sold for each product. The manager is particularly interested in identifying the first product that was sold out (i.e., sold exactly zero units) on any given day. Your task is to write a program that processes the sales data for multiple days and determines the first product that sold exactly zero units for each day. If no product was sold out on a given day, output \\"None\\" for that day. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer d denoting the number of days. The next d lines contain a list of space-separated integers, each representing the sales data for that day (each list has a varying number of integers). Output For each test case, output d lines, where each line contains the first product (index-based, starting from 1) that sold exactly zero units on that day, or \\"None\\" if no product sold exactly zero units. Constraints 1 ≤ T ≤ 10^4 1 ≤ d ≤ 10^3 1 ≤ length of sales data for each day ≤ 10^3 0 ≤ sales figure ≤ 10^3 Example Input: 2 3 1 2 3 0 4 5 6 7 8 9 0 1 2 3 2 0 0 1 2 2 0 2 2 Output: 4 None 1 1 3","solution":"def first_sold_out_product(T, test_cases): results = [] for days_and_sales in test_cases: d, sales_data = days_and_sales daily_results = [] for sales in sales_data: zero_index = next((i+1 for i, sale in enumerate(sales) if sale == 0), \\"None\\") daily_results.append(zero_index) results.append(daily_results) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): d = int(lines[index]) sales_data = [list(map(int, lines[index + 1 + i].split())) for i in range(d)] test_cases.append((d, sales_data)) index += d + 1 return T, test_cases def format_output(results): return \'n\'.join(\'n\'.join(map(str, day_results)) for day_results in results) def main(input_data): T, test_cases = parse_input(input_data) results = first_sold_out_product(T, test_cases) return format_output(results)"},{"question":"# Dice Roller You are given two lists of integers, representing the faces of two six-sided dice. Your task is to determine if a given target number can be achieved by rolling both dice and summing the two resulting numbers. Input The input consists of three lines: - The first line contains six integers representing the faces of Dice A. - The second line contains six integers representing the faces of Dice B. - The third line contains a single integer, the target number. Output Output \\"Yes\\" if there is a combination of faces from both Dice A and Dice B whose sums equal the target number. Otherwise, output \\"No\\". Example Input ``` 1 2 3 4 5 6 1 2 3 4 5 6 7 ``` Output ``` Yes ``` Input ``` 1 1 2 2 3 3 2 2 3 3 4 4 10 ``` Output ``` No ```","solution":"def can_achieve_target(dice_a, dice_b, target): Returns \'Yes\' if there is a combination of faces from both Dice A and Dice B whose sums equal the target number. Otherwise, returns \'No\'. for face_a in dice_a: for face_b in dice_b: if face_a + face_b == target: return \\"Yes\\" return \\"No\\""},{"question":"Create a program to prioritize tasks in a task manager application. Each task has a specific priority level and must be completed in order. You are given a list of tasks and their corresponding priorities and must determine the order of tasks based on their priorities. Input The input consists of multiple datasets. Each dataset is given in the following format. The first line of the dataset contains the number of tasks t (1 ≤ t ≤ 1000). The following t lines contain two integers pi and di (1 ≤ pi ≤ 10000, 1 ≤ di ≤ 10000), where pi is the priority of the ith task and di is the duration (in minutes) of the ith task. The end of the input is indicated by a line containing \'0\'. Output For each dataset, output the list of tasks sorted by priority in descending order. If two tasks have the same priority, they should be sorted by duration in ascending order. Print each task in the format \\"Task i: priority, duration\\". Examples Input 5 2 30 1 20 3 25 3 40 2 35 3 1 45 2 20 2 15 0 Output Task 3: 3, 25 Task 5: 3, 40 Task 1: 2, 30 Task 4: 2, 35 Task 2: 1, 20 Task 2: 2, 15 Task 3: 2, 20 Task 1: 1, 45","solution":"def prioritize_tasks(task_datasets): Given a list of datasets, each containing a number of tasks with corresponding priorities and durations, sort the tasks by priority in descending order. If two tasks have the same priority, sort them by duration in ascending order. Parameters: task_datasets (List[List[Tuple[int, int]]]): List of datasets, each dataset is a list of tuples where each tuple contains (priority, duration) Returns: List[List[Tuple[int, int]]]: Sorted lists of tasks for each dataset. result = [] for tasks in task_datasets: # Sort based on priority (desc), then duration (asc) tasks.sort(key=lambda x: (-x[0], x[1])) result.append(tasks) return result"},{"question":"You are given an array of `n` integers. You need to find out if you can rearrange the elements of the array such that no two adjacent elements have the same value. Input The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of integers in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the elements of the array. Output If it is possible to rearrange the elements of the array such that no two adjacent elements are the same, print \\"YES\\". Otherwise, print \\"NO\\". Example Input 5 1 2 2 3 3 Output YES Input 4 1 1 1 1 Output NO Note In the first example, you can rearrange the array as follows: [1, 2, 3, 2, 3] or [3, 1, 2, 3, 2]. No two adjacent elements are the same. In the second example, there is no way to rearrange the array such that no two adjacent elements are the same, hence the answer is \\"NO\\".","solution":"def can_rearrange_no_adjacent_same(n, arr): Determine if an array can be rearranged such that no two adjacent elements are the same. Parameters: - n (int): The number of integers in the array. - arr (list of int): The elements of the array. Returns: - str: \\"YES\\" if it is possible to rearrange the elements as required, otherwise \\"NO\\". from collections import Counter if n == 1: return \\"YES\\" # A single element array trivially satisfies the condition. count = Counter(arr) max_occur = max(count.values()) # The condition to return \\"NO\\" is when the most frequent element occurs more than (n + 1) // 2 times. if max_occur > (n + 1) // 2: return \\"NO\\" else: return \\"YES\\""},{"question":"Create a function that takes a list of integers and a single integer target value. The function should return a list of unique pairs (tuples) from the input list that add up to the target value. Each pair should be in ascending order, and the list of pairs should also be sorted in ascending order. Definition ```python def find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]: # Your code here ``` Example ```python nums = [1, 2, 3, 4, 5, 6] target = 7 print(find_pairs(nums, target)) ``` Output ```python [(1, 6), (2, 5), (3, 4)] ``` Example ```python nums = [0, -1, 2, -3, 1] target = -2 print(find_pairs(nums, target)) ``` Output ```python [(-3, 1)] ```","solution":"from typing import List, Tuple def find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]: Returns a list of unique pairs (tuples) from the input list that add up to the target value. Each pair should be in ascending order, and the list of pairs should also be sorted in ascending order. nums.sort() seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(pairs)"},{"question":"A museum is planning a new security system involving non-overlapping laser sensors. Each sensor covers a rectangular area defined by its top-left corner and bottom-right corner. Your task is to determine the maximum number of sensors that can be installed without overlapping any other sensor. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of sensors proposed. Each of the next n lines contains four space-separated integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ 1000, 1 ≤ y1 ≤ y2 ≤ 1000), defining the coordinates of each sensor\'s top-left corner (x1, y1) and bottom-right corner (x2, y2). Output Print a single integer representing the maximum number of non-overlapping sensors that can be installed. Examples Input 3 1 1 4 4 2 2 5 5 6 6 8 8 Output 2 Input 5 1 1 3 3 2 2 5 5 4 4 6 6 5 1 7 3 8 8 10 10 Output 3","solution":"def max_non_overlapping_sensors(sensors): Given a list of sensors where each sensor is defined by the coordinates of the top-left and bottom-right corners, determines the maximum number of non-overlapping sensors that can be installed. Parameters: sensors (list of tuples): List of sensors, each defined by a tuple of four integers (x1, y1, x2, y2). Returns: int: Maximum number of non-overlapping sensors. # Sort the sensors by their bottom-right x coordinate (x2), and in case of tie by y2 sensors.sort(key=lambda sensor: (sensor[2], sensor[3])) count = 0 last_x2, last_y2 = -1, -1 for sensor in sensors: x1, y1, x2, y2 = sensor # Check if current sensor does not overlap with the last placed sensor if x1 > last_x2 or y1 > last_y2: count += 1 last_x2, last_y2 = x2, y2 return count"},{"question":"Suppose you are developing a new social media platform where users can connect and share posts with each other. One of the features of the platform is to display trending hashtags. A hashtag is a word or phrase preceded by the hash \'#\' symbol, commonly used in social media posts to index keywords or topics. Your task is to implement a feature that, given a list of posts, extracts all hashtags from them and determines which hashtag appears the most frequently. If multiple hashtags have the highest frequency, return the one that appears first in the posts list. Input - The input consists of a single integer N (1 ≤ N ≤ 100) followed by N lines, each containing a string representing a post. A post may contain multiple words and hashtags. Output - Print the hashtag that appears the most frequently. If there is a tie, print the first occurring hashtag from the posts list. Example Input 5 Loving the new features on #SocialConnect Happy Friday! #WeekendVibes #Love Can\'t believe it\'s already #Friday #WeekendVibes Enjoying a lovely day at the park. #Nature Check out my new blog post! #BlogLife #Friday Output #Friday Explanation The hashtag \'#Friday\' appears the most frequently (3 times) in the list of posts, and therefore it is the output. Even though \'#WeekendVibes\' also appears 2 times, it is not the most frequent, and it does not need to be printed.","solution":"def most_frequent_hashtag(posts): Given a list of posts, extracts all hashtags from them and determines which hashtag appears the most frequently. If multiple hashtags have the highest frequency, return the one that appears first in the posts list. :param posts: List of strings where each string is a post containing hashtags :return: The most frequently occurring hashtag from collections import Counter, defaultdict import re hashtag_pattern = re.compile(r\'#w+\') hashtag_counts = Counter() first_appearance = defaultdict(int) index = 0 for post in posts: hashtags = hashtag_pattern.findall(post) for hashtag in hashtags: hashtag_counts[hashtag] += 1 if hashtag not in first_appearance: first_appearance[hashtag] = index index += 1 # Finding the most frequent hashtag, and in case of a tie, the one that appears first most_frequent = max(hashtag_counts.items(), key=lambda x: (x[1], -first_appearance[x[0]])) return most_frequent[0] # Function to handle the input and output def handle_input(): import sys input = sys.stdin.read data = input().split(\'n\') N = int(data[0].strip()) posts = [data[i+1].strip() for i in range(N)] print(most_frequent_hashtag(posts))"},{"question":"You are organizing a marathon race and you need to distribute water bottles to the participants. Each participant can hold only one bottle of water at a time. The water bottles are provided in packs, and each pack contains a variable number of bottles. Your task is to distribute the bottles in such a way that the number of unused bottles is minimized. Write a program to determine the number of unused water bottles after distributing them to the participants. Note that each participant must receive exactly one bottle of water and you cannot break the packs. INPUT: The first line of input contains a number T denoting the number of test cases. T test cases follow. In each test case, the first line contains two integers P and K, where P denotes the number of participants and K denotes the number of packs. The next line contains K integers, where each integer represents the number of bottles in a pack. OUTPUT: For each test case, output a single line that denotes the number of unused water bottles after distributing them to the participants. CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ P ≤ 1000 1 ≤ K ≤ 100 1 ≤ pack size ≤ 100 SAMPLE INPUT 3 10 3 3 5 6 15 2 5 5 8 4 2 2 2 3 SAMPLE OUTPUT 4 5 1 Explanation: In the first test case, you have 3 packs with 3, 5, and 6 bottles respectively. You can distribute 10 bottles to the participants, leaving 4 bottles unused (6 bottles from the third pack minus 10 participants). In the second test case, you have 2 packs each with 5 bottles. You need 15 bottles for 15 participants, but you only have 10, so all bottles would be used and 5 participants would not get any bottle resulting in 5 unused bottles. In the third test case, you have 4 packs with a total of 9 bottles (2+2+2+3), and you need to distribute 8 bottles, hence 1 bottle will be left unused.","solution":"def unused_bottles_per_test_case(P, K, packs): Calculate the number of unused water bottles after distributing them to the participants. total_bottles = sum(packs) unused_bottles = total_bottles - P if total_bottles >= P else P - total_bottles return unused_bottles def main(T, test_cases): results = [] for case in test_cases: P, K, packs = case results.append(unused_bottles_per_test_case(P, K, packs)) return results"},{"question":"Given a list of integers, the task is to find the maximum sum subsequence that is strictly increasing. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input The first line of input contains the integer n, the number of elements in the list. The second line contains n integers separated by spaces representing the elements of the list. Constraints 1 <= n <= 1000 -1000 <= arr[i] <= 1000 (where arr[i] is any element in the list provided) Output Print the maximum sum of the strictly increasing subsequence. Example Input: 6 10 5 4 3 11 6 Output: 21 Explanation A strictly increasing subsequence with the maximum sum from the given list is [10, 11], and its sum is 21. Another subsequence such as [4, 6] has a sum of 10 but is not the maximum possible sum.","solution":"def max_sum_increasing_subsequence(arr): Find the maximum sum of a strictly increasing subsequence in the list. Parameters: arr (list): List of integers. Returns: int: The maximum sum of a strictly increasing subsequence. n = len(arr) if n == 0: return 0 # Initialize the dp array dp = arr[:] # Build the dp array to find the maximum sum increasing subsequence for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]: dp[i] = dp[j] + arr[i] # Find the maximum value in dp array return max(dp)"},{"question":"As a software engineer, you often have the task of analyzing log files. One of the regular tasks you perform is identifying anomaly patterns. You receive a log file containing timestamps of events in the format \\"hh:mm:ss\\". Each event is logged when it occurs, and the logs are sorted in chronological order. Your task is to determine if an event occurred more than once within a 10-second interval at any point in the log file. If so, return \\"YES\\", otherwise return \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of events logged. The next n lines each contain a timestamp in the format \\"hh:mm:ss\\" — the exact times the events occurred. Output Print \\"YES\\" if there is any event that occurred more than once within any 10-second interval, otherwise print \\"NO\\". Note: - An interval includes its start and end points. For example, an event occurring at 12:00:00 would be within the same 10-second interval as an event occurring at 12:00:10. Examples Input 5 12:00:00 12:00:05 12:00:09 12:00:20 12:00:29 Output YES Input 3 08:45:00 08:45:15 08:46:00 Output NO Input 4 23:59:59 00:00:05 00:00:10 00:00:20 Output YES Note In the first example, events occur at 12:00:05 and 12:00:09, both within the interval starting from 12:00:00, hence the output is \\"YES\\". In the second example, all events are spaced apart by more than 10 seconds, so the output is \\"NO\\". In the third example, while the day changes at midnight, the events still respect the 10-second rule, and events at 23:59:59 and 00:00:05 fall within the same interval. Hence, the output is \\"YES\\".","solution":"def check_anomaly(n, timestamps): This function checks if any event occurred more than once within a 10-second interval in the given log file. Parameters: n (int): The number of events logged timestamps (list of str): The exact times the events occurred in the format \\"hh:mm:ss\\" Returns: str: \\"YES\\" if there is any event that occurred more than once within any 10-second interval, otherwise \\"NO\\" def to_seconds(time): h, m, s = map(int, time.split(\':\')) return h * 3600 + m * 60 + s times_in_seconds = [to_seconds(time) for time in timestamps] for i in range(len(times_in_seconds) - 1): if times_in_seconds[i + 1] - times_in_seconds[i] <= 10: return \\"YES\\" return \\"NO\\""},{"question":"You are given two strings, s and t. You need to determine if you can convert string s into string t by replacing exactly one character in s with another character and rearranging the characters. If it\'s possible, print \\"YES\\", otherwise print \\"NO\\". Input Each test contains multiple test cases. The first line contains the number of test cases n (1 ≤ n ≤ 100) — the number of test cases. The first line of each test case contains the string s (1 ≤ |s| ≤ 1000) — the original string. The second line of each test case contains the string t (1 ≤ |t| ≤ 1000) — the target string. Both strings consist only of lowercase English letters. Output For each test case, print \\"YES\\" if you can convert string s into string t by replacing exactly one character in s with another character and rearranging the characters, and \\"NO\\" otherwise. Example Input 3 abcd abcf abcd efgh aaaa aaab Output YES NO YES Note In the first test case, you can replace \'d\' with \'f\' and rearrange to get \\"abcf\\". In the second test case, it\'s impossible to convert \\"abcd\\" to \\"efgh\\" with only one replacement and rearrangement. In the third test case, you can replace one \'a\' with \'b\' and the rest will match \\"aaab\\".","solution":"def can_convert(s, t): Determines if you can convert string s into string t by replacing exactly one character in s with another character and rearranging the characters. if s == t: return \\"NO\\" if len(s) != len(t): return \\"NO\\" from collections import Counter s_counter = Counter(s) t_counter = Counter(t) diff_count = sum((s_counter - t_counter).values()) + sum((t_counter - s_counter).values()) return \\"YES\\" if diff_count == 2 else \\"NO\\" def process_test_cases(test_cases): results = [] for s, t in test_cases: results.append(can_convert(s, t)) return results"},{"question":"You are organizing a birthday party and want to play a specific game that requires string manipulation. You have a string consisting of lowercase alphabets and you want to identify and remove consecutive duplicate characters from this string. Consecutive characters are considered duplicates if they are adjacent in the string and have the same value. Write a function to remove consecutive duplicate characters and return the resulting string. Input Input description: The first line contains an integer T, the number of test cases. The next T lines each contain a string S, the string to process. Output Output description: For each test case, output the resulting string after removing consecutive duplicates. Example Input: 3 aabbcc abcaa aabbca Output: abc abca abca Explanation For the first test case, input string \\"aabbcc\\" is processed to remove all consecutive duplicates, resulting in \\"abc\\". For the second test case, input string \\"abcaa\\" is processed to get \\"abca\\". For the third test case, input string \\"aabbca\\" is processed to get \\"abca\\".","solution":"def remove_consecutive_duplicates(T, test_cases): Removes consecutive duplicate characters from each string in the test cases. Parameters: - T: integer, the number of test cases. - test_cases: list of strings, strings to process. Returns: List of resulting strings after removing consecutive duplicates for each test case. results = [] for S in test_cases: if not S: results.append(\\"\\") continue result = [S[0]] for char in S[1:]: if char != result[-1]: result.append(char) results.append(\\"\\".join(result)) return results"},{"question":"In a distant galaxy, there are numerous planets inhabited by different civilizations. The Galactic Union has decided to organize an Interplanetary Treasure Hunt. Each planet has a secret treasure hidden in a specific location. The location of the treasure is represented by a single unique integer on each planet. The rules of the treasure hunt are as follows: - Participants can move from one planet to another, but each planet can only be visited once. - Only one participant is allowed to collect the treasure from each planet. - The participant starts from a specific planet and has to collect as many treasures as possible while adhering to the rules. Each participant travels through the galaxy using warp gates which connect different planets. These warp gates allow the participant to instantly transport from one planet to another. You are given information about the warp gates in the form of directed edges between planets. Each edge defines a one-way warp gate from one planet to another. Write a program to determine the maximum number of treasures a participant can collect starting from a specified planet. Input: - The first line contains an integer T denoting the number of test cases. - The description of T test cases follows. - Each test case begins with two integers, N and M, representing the number of planets and the number of warp gates, respectively. - The next line contains N integers, where each integer represents the treasure value on the corresponding planet. - The next M lines contain two integers u and v each, indicating a directed warp gate from planet u to planet v. - The last line contains an integer S, indicating the starting planet for the participant. Output: For each test case, output a single line containing the maximum number of treasures the participant can collect starting from planet S. Constraints: 1 ≤ T ≤ 100 1 ≤ N, M ≤ 10000 0 ≤ treasure value on each planet ≤ 1000 1 ≤ u, v ≤ N 1 ≤ S ≤ N Sample Input: 2 5 4 1 2 3 4 5 1 2 1 3 3 4 2 5 1 3 2 10 20 30 1 2 2 3 1 Output: 15 60 Explanation: In the first test case, the participant can collect treasures from planets in the following order: 1 -> 3 -> 4 (total treasures = 1 + 3 + 4 = 8) or 1 -> 2 -> 5 (total treasures = 1 + 2 + 5 = 8) or any other valid path. In the second test case, the participant can collect treasures from planets in the following order: 1 -> 2 -> 3 (total treasures = 10 + 20 + 30 = 60)","solution":"def max_treasures(T, test_cases): def dfs(planet, treasures, visited, graph): visited[planet] = True total_treasures = treasures[planet - 1] for neighbour in graph[planet]: if not visited[neighbour]: total_treasures += dfs(neighbour, treasures, visited, graph) return total_treasures results = [] for case in test_cases: N, M, treasures, edges, S = case # Build graph graph = {i: [] for i in range(1, N+1)} for u, v in edges: graph[u].append(v) # Run DFS from the starting planet visited = [False] * (N + 1) max_treasure = dfs(S, treasures, visited, graph) results.append(max_treasure) return results"},{"question":"A company is organizing a hackathon and wants to provide snacks to its participants. The participants are divided into two groups — coders and designers. Each group has n participants. The company has a list of the preferred snack for each participant for each group, but they wish to distribute the maximum number of distinct snacks without anyone having their least preferred option. Let\'s say there are m distinct snacks available. Each participant in both groups has a ranked preference list. The company wants to choose a snack for each coder and each designer while ensuring that no one gets their least preferred snack. Additionally, they want to maximize the distinct snacks distributed if possible. Input The first line contains two integers n (1 ≤ n ≤ 100) — the number of participants in each group, and m (2 ≤ m ≤ 100) — the number of distinct snacks. Each of the next 2*n lines corresponds to a participant\'s ranked snack preference list. The first n lines correspond to coders, and the following n lines correspond to designers. Each line contains a permutation of m integers representing a participant\'s ranked snack preference list (1 being the most preferred and m being the least preferred). Output Output a list of n integers for coders and a list of n integers for designers. Each integer represents the chosen snack for each participant, ensuring that no participant gets their least preferred snack. If there are multiple valid solutions, output any. Examples Input 3 5 3 1 4 5 2 2 3 4 5 1 5 4 3 1 2 1 2 5 3 4 5 4 3 2 1 3 4 5 2 1 Output 3 2 5 1 4 3 Input 2 3 1 3 2 3 1 2 2 1 3 3 1 2 Output 1 3 2 1 Note In the first sample, there are 3 coders and 3 designers. The first coder\'s preferred list is 3, 1, 4, 5, 2 and so on. The goal is to distribute the snacks while ensuring that no one gets their least preferred option. In the second sample, each coder/designer has a preference list, and the distribution avoids their least preferred snack while still choosing distinct snacks where possible.","solution":"def distribute_snacks(n, m, preference_lists): import numpy as np from scipy.optimize import linear_sum_assignment def convert_preferences_to_cost_matrix(preferences): matrix = [] for pref in preferences: cost = [m - r for r in pref] matrix.append(cost) return np.array(matrix) coder_prefs = preference_lists[:n] designer_prefs = preference_lists[n:] coder_cost_matrix = convert_preferences_to_cost_matrix(coder_prefs) designer_cost_matrix = convert_preferences_to_cost_matrix(designer_prefs) row_ind, col_ind = linear_sum_assignment(coder_cost_matrix) coders_choice = col_ind + 1 # snacks are 1-indexed row_ind, col_ind = linear_sum_assignment(designer_cost_matrix) designers_choice = col_ind + 1 # Ensure no one gets their least preferred option coders_result = [] for i in range(n): if coder_prefs[i][-1] == coders_choice[i]: coders_choice[i] = np.setdiff1d(range(1, m + 1), coders_choice)[0] coders_result.append(coders_choice[i]) designers_result = [] for i in range(n): if designer_prefs[i][-1] == designers_choice[i]: designers_choice[i] = np.setdiff1d(range(1, m + 1), designers_choice)[0] designers_result.append(designers_choice[i]) return coders_result, designers_result"},{"question":"Pac-Man has found himself in a maze consisting of n rows and m columns. Each cell in the maze is either empty (represented by \'.\') or contains a wall (represented by \'#\'). Pac-Man can move horizontally or vertically to an adjacent empty cell. Given the layout of the maze, determine if there is a path from the top-left corner (position (1, 1)) to the bottom-right corner (position (n, m)). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the maze. The next n lines contain m characters each, representing the maze layout. The character \'.\' denotes an empty cell, and the character \'#\' denotes a wall. Output Print \\"YES\\" if there is a path from (1, 1) to (n, m). Otherwise, print \\"NO\\". Note that (1, 1) and (n, m) are always empty cells (\'.\'). Example Input 4 4 .... .#.. ..#. .... Output YES Input 4 4 .... ..#. .... Output NO","solution":"def pac_man_maze_path(n, m, maze): Determines whether there is a path from top-left to bottom-right in the maze. Uses Depth-First Search (DFS) to explore the maze. :param n: Number of rows in the maze :param m: Number of columns in the maze :param maze: List of strings representing the maze layout :return: \\"YES\\" if there is a path, otherwise \\"NO\\" def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' and not visited[x][y] def dfs(x, y): if x == n - 1 and y == m - 1: return True visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and dfs(nx, ny): return True return False visited = [[False] * m for _ in range(n)] return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Given an unsorted array of integers, find the maximum difference between the successive elements in its sorted form. Constraints * All values in input are integers. * 2 ≤ array length ≤ 10^6 * -10^9 ≤ array elements ≤ 10^9 Input Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n Output Print the maximum difference between the successive elements in the sorted array. Examples Input 6 3 6 9 1 Output 3 Input 4 10 5 1 8 Output 4","solution":"def maximum_gap(nums): Finds the maximum difference between the successive elements in the sorted form of the given array nums. if len(nums) < 2: return 0 nums.sort() max_gap = 0 for i in range(1, len(nums)): max_gap = max(max_gap, nums[i] - nums[i - 1]) return max_gap def read_input_and_compute_max_gap(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:n+1])) print(maximum_gap(nums))"},{"question":"You are given an integer array consisting of N non-negative integers. Your task is to determine the minimum number of deletions required such that the array contains no two adjacent elements with the same value. Input The first line of the input contains an integer N, the size of the array. The second line contains N space-separated integers representing the elements of the array. Output Output a single integer, the minimum number of deletions required. Constraints 1 ≤ N ≤ 10^5 0 ≤ Ai ≤ 10^9 Example Input 1: 5 1 1 2 3 3 Output 1: 2 Input 2: 6 4 4 4 4 4 4 Output 2: 5 Explanation In the first example, we can remove one of the \'1\'s and one of the \'3\'s to make the array [1, 2, 3]. In the second example, at least five deletions are needed to ensure no two adjacent elements are the same.","solution":"def min_deletions_to_make_unique_adjacent(arr): Returns the minimum number of deletions required such that the array contains no two adjacent elements with the same value. if not arr: return 0 deletions = 0 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: deletions += 1 return deletions"},{"question":"There is a rapidly growing company called TechHub that needs an efficient way to manage tasks among its teams. Each task in the company has dependencies: some tasks must be completed before others can start. The management wants to know the minimum time required to complete all tasks if tasks can be performed in parallel whenever possible. The company has n tasks, numbered from 1 to n, and m dependencies. Each dependency is represented by a pair (ai, bi), meaning that task ai must be completed before task bi can start. Each task takes exactly one unit of time to complete, and multiple tasks can be carried out simultaneously as long as all their dependencies are met. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^5), denoting the number of tasks and the number of dependencies, respectively. The following m lines describe the dependencies. The i-th line contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), indicating that task ai must be completed before task bi. Output Print the minimum time required to complete all tasks. Examples Input 5 4 1 2 1 3 3 4 4 5 Output 4 Input 5 3 1 2 2 3 4 5 Output 3 Note For the first sample, one of the optimal ways to complete the tasks is: - Time 1: Complete task 1 - Time 2: Complete tasks 2 and 3 (both dependent on task 1) - Time 3: Complete task 4 (dependent on task 3) - Time 4: Complete task 5 (dependent on task 4) For the second sample, one of the optimal ways to complete the tasks is: - Time 1: Complete tasks 1 and 4 - Time 2: Complete task 2 (dependent on task 1) and task 5 (independent) - Time 3: Complete task 3 (dependent on task 2)","solution":"from collections import deque, defaultdict def min_time_to_complete_tasks(n, m, dependencies): indegree = [0] * (n + 1) adj_list = defaultdict(list) # Build adjacency list and compute in-degrees for a, b in dependencies: adj_list[a].append(b) indegree[b] += 1 # Queue for tasks with no incoming edges queue = deque() for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) time = 0 tasks_completed = 0 # Process tasks while there are tasks in the queue while queue: # Number of tasks that can be done in parallel at this time unit size = len(queue) tasks_completed += size for _ in range(size): task = queue.popleft() for neighbor in adj_list[task]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) time += 1 # If all tasks are completed, return the time taken if tasks_completed == n: return time else: return -1 # This would mean there is a cycle or some error # Sample usage with the provided examples if __name__ == \\"__main__\\": n1, m1 = 5, 4 dependencies1 = [(1, 2), (1, 3), (3, 4), (4, 5)] print(min_time_to_complete_tasks(n1, m1, dependencies1)) # Expected output: 4 n2, m2 = 5, 3 dependencies2 = [(1, 2), (2, 3), (4, 5)] print(min_time_to_complete_tasks(n2, m2, dependencies2)) # Expected output: 3"},{"question":"A game involves moving coins along a straight line. The line is divided into n positions numbered 1 through n. Each position may contain a coin or be empty, and you are given an array of length n where a \'1\' indicates a coin at that position, and a \'0\' indicates an empty position. The goal is to move all the coins to consecutive positions using the minimum number of moves. In one move, you can shift a coin from position i to position i-1 or i+1. Moving a coin from one position to an adjacent position counts as one move. Write a program to find the minimum number of moves required to gather all the coins into any set of consecutive positions. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of positions on the line. The second line contains a binary string of length n consisting of \'1\'s and \'0\'s, representing the initial state of the line. Output Print a single integer — the minimum number of moves required to gather all coins into consecutive positions. Examples Input 5 10001 Output 3 Input 9 000000000 Output 0 Input 6 110011 Output 4 Note In the first example, the coins at the positions 1 and 5 can be moved to positions 3 and 4 respectively, requiring 2 + 1 = 3 moves. In the second example, there are no coins to move, so the answer is 0. In the third example, the four \'1\'s can be grouped together by moving the two rightmost coins one step to the left and the two leftmost coins one step to the right, requiring 2 + 2 = 4 moves.","solution":"def min_moves_to_gather_coins(n, positions): Given the number of positions n and a string `positions`, calculates the minimum number of moves required to gather all the coins into consecutive positions. :param n: int - number of positions on the line :param positions: str - binary string of length n :return: int - minimum number of moves required coin_positions = [i for i, pos in enumerate(positions) if pos == \'1\'] if not coin_positions: return 0 median_idx = len(coin_positions) // 2 median = coin_positions[median_idx] moves = 0 for i, pos in enumerate(coin_positions): moves += abs(pos - (median - median_idx + i)) return moves"},{"question":"Ali loves playing with numbers and mathematical operations. He is trying to create a new problem for his coding club. He uses basic arithmetic operations and some additional rules for his challenge. The goal is to manipulate a permutation of the first n natural numbers to form an arithmetic progression through a series of predefined steps. In Ali\'s challenge, you are given a sequence of n integers: 1, 2, ..., n. In a single step, you can perform one of the following operations on any two numbers a and b in the sequence: - Addition: a + b - Subtraction: a - b - Multiplication: a * b After performing a step, you replace the two numbers with the result of the operation and continue until only one number remains. Ali wants to determine if it is possible to form a sequence such that the final resulting number is an element of the arithmetic progression with the first term `a0` and common difference `d`. If it is possible, print \\"YES\\" and provide the necessary operations to achieve the result; otherwise, print \\"NO\\". # Input - The first line contains a single integer, `n` (1 ≤ n ≤ 105). - The second line contains two integers, `a0` and `d` (-1018 ≤ a0, d ≤ 1018). # Output - If it is possible to achieve the result that is part of the arithmetic progression, print \\"YES\\" in the first line. - In the following n - 1 lines, print the required operations in the form: \\"a op b = c\\", where a and b are the numbers, `op` is one of \\"+\\", \\"-\\", \\"*\\", and c is the result. Note that the absolute value of c must not exceed 1018. The result of the last operation must be a term in the arithmetic progression. - If there are multiple valid answers, print any of them. - If it is not possible, print \\"NO\\". # Examples Example 1 ``` Input: 3 5 3 Output: YES 1 + 2 = 3 3 + 3 = 6 ``` Example 2 ``` Input: 4 10 2 Output: NO ```","solution":"def is_arithmetic_progression_possible(n, a0, d): # If n is 1 and a0 is in the arithmetic progression, print it if n == 1: if a0 == 1: print(\\"YES\\") return else: print(\\"NO\\") return if d == 0: required_number = a0 if required_number in range(1, n + 1): print(\\"YES\\") for i in range(1, n): print(f\\"{i} + {i + 1} = {i + i + 1}\\") return sequence_sum = (1 + n) * n // 2 # Calculate the first few terms of the arithmetic progression found = False target = None for i in range(n): if sequence_sum == a0 + i * d: found = True target = sequence_sum break if not found: print(\\"NO\\") return print(\\"YES\\") arr = list(range(1, n + 1)) while len(arr) > 1: a = arr.pop(0) b = arr.pop(0) result = a + b print(f\\"{a} + {b} = {result}\\") arr.insert(0, result)"},{"question":"You are given a grid of size n x m containing cells where each cell is either blocked (represented by \'*\') or empty (represented by \'.\'). A robot can only move right or down, i.e., from cell (i, j) it can move to (i, j+1) or (i+1, j) if the destination cell is within bounds and is not blocked. The robot starts at the top-left corner of the grid (cell (1, 1)) and wants to reach the bottom-right corner of the grid (cell (n, m)). Determine whether there exists a path that the robot can take to reach the bottom-right corner from the top-left corner. Input: The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain a string of length m consisting of characters \'*\' and \'.\' — the description of the grid. Output: Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". Example Input: 3 3 .** ..* .. Output: YES Input: 3 3 .*. .*. .*. Output: NO Note: - The top-left and bottom-right cells will always be empty. - The robot can only move to the right or down if it does not encounter a blocked cell.","solution":"def can_robot_reach_end(n, m, grid): Determines if there exists a path from the top-left to bottom-right of the grid. if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return \\"NO\\" # Create a dp table to store the reachability of each cell dp = [[False] * m for _ in range(n)] dp[0][0] = True for i in range(n): for j in range(m): if grid[i][j] == \'*\': dp[i][j] = False else: if i > 0: dp[i][j] = dp[i][j] or dp[i-1][j] if j > 0: dp[i][j] = dp[i][j] or dp[i][j-1] return \\"YES\\" if dp[-1][-1] else \\"NO\\""},{"question":"You are given a 2D grid of m rows and n columns that represents a maze. Each cell in the grid can either be open (\'.\') or blocked (\'#\'). A person starts at the top-left cell (0, 0) and wants to reach the bottom-right cell (m-1, n-1). The person can move up, down, left, or right, but cannot leave the bounds of the grid or move into a blocked cell. Your task is to determine the number of distinct paths from the top-left cell to the bottom-right cell. Two paths are considered distinct if they differ in at least one cell that is visited along the path. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns of the grid, respectively. Each of the next m lines contains a string of length n consisting of characters \'.\' (open cell) and \'#\' (blocked cell). Output Print a single integer — the number of distinct paths from (0, 0) to (m-1, n-1). If no path exists, return 0. Examples Input 3 3 ... .#. ... Output 2 Input 2 2 .# #. Output 0 Input 3 3 ..# # ..# Output 0 Input 3 4 .... ..#. .... Output 4 Note In the first example, there are two distinct paths from (0, 0) to (2, 2): 1. Right -> Down -> Down -> Right -> Right 2. Down -> Right -> Right -> Down -> Right In the second example, there is no path from (0, 0) to (1, 1) because (0, 1) and (1, 0) are both blocked. In the third example, the path is blocked by the `#` row of cells, so no path exists. In the fourth example, there are four distinct paths.","solution":"def count_paths(grid): Returns the number of distinct paths in the grid from the top-left corner to the bottom-right corner. A person can move up, down, left, or right, but cannot enter a blocked cell (\'#\'). if grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"Background A transportation network company is implementing a ride-sharing feature. The feature allows passengers to share a ride if their pickup and drop-off locations are within close proximity. The company needs your help to determine the best pairings of rides to maximize passenger satisfaction. Problem Given N ride requests defined by their pickup and drop-off coordinates, and a maximum distance D within which two rides can be considered for sharing, determine all the pairs of rides that can share a ride. Each ride request is represented by a pair of coordinates (pickup_x, pickup_y, dropoff_x, dropoff_y). Two rides can be paired if the Euclidean distance between their pickup points is less than or equal to D and the Euclidean distance between their drop-off points is also less than or equal to D. For each pair, output the indices of the ride requests in ascending order. Note: Use zero-based indexing for the ride requests. Constraints * 1 ≤ N ≤ 10^3 * 0 ≤ pickup_x, pickup_y, dropoff_x, dropoff_y ≤ 10^4 * 0 ≤ D ≤ 10^4 Input The input is given in the following format: N D pickup_x1 pickup_y1 dropoff_x1 dropoff_y1 pickup_x2 pickup_y2 dropoff_x2 dropoff_y2 ... pickup_xN pickup_yN dropoff_xN dropoff_yN The first line contains two integers, N (the number of ride requests) and D (the maximum distance for considering ride sharing). Each of the next N lines contains four integers, representing the pickup and dropoff coordinates of the ride requests. Output Print the indices of all pairs of rides that can share a ride, one pair per line. Each pair should be in ascending order. If there are no pairs, print an empty line. Examples Input 3 5 1 1 5 5 2 2 4 4 10 10 15 15 Output 0 1 Input 4 3 1 2 3 4 2 3 3 4 4 5 6 7 5 6 7 8 Output 0 1 2 3","solution":"import math def can_share_ride(pickup1, dropoff1, pickup2, dropoff2, D): def euclidean_distance(point1, point2): return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) pickup_distance = euclidean_distance(pickup1, pickup2) dropoff_distance = euclidean_distance(dropoff1, dropoff2) return pickup_distance <= D and dropoff_distance <= D def find_shared_rides(N, D, rides): ride_pairs = [] for i in range(N): for j in range(i + 1, N): pickup1, dropoff1 = rides[i][:2], rides[i][2:] pickup2, dropoff2 = rides[j][:2], rides[j][2:] if can_share_ride(pickup1, dropoff1, pickup2, dropoff2, D): ride_pairs.append((i, j)) return ride_pairs # Example usage: # rides = [ # (1, 1, 5, 5), # (2, 2, 4, 4), # (10, 10, 15, 15) # ] # N = 3 # D = 5 # print(find_shared_rides(N, D, rides))"},{"question":"You are given an array of n integers with some or all elements repeating any number of times. Your task is to permute the elements of the array to form a non-decreasing sequence. If it is not possible to permute the array to meet this requirement, return -1. Output the modified array if the task is possible. Input Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10 000). The description of the test cases follows. The first line of each test case contains a single integer n (1≤ n ≤ 10^5) — the size of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. Output For each test case, output the non-decreasing permutation of the array. If no such permutation exists, output -1. Example Input 3 5 4 3 2 1 5 3 2 5 5 4 1 2 2 3 Output 1 2 3 4 5 -1 1 2 2 3 Note In the first test case, permuting the array to [1, 2, 3, 4, 5] forms a non-decreasing sequence. In the second test case, since two instances of 5 are there and there is no smaller number to position before them, we cannot form a non-decreasing sequence hence returned -1. In the third test case, the array is already in non-decreasing order [1, 2, 2, 3].","solution":"def permute_to_non_decreasing(arrays): Accepts a list of arrays and returns a list of results where each result is either a non-decreasing permutation of corresponding array or -1 if not possible. Args: arrays (List[List[int]]): List containing multiple test case arrays Returns: List[List[int] or int]: List of results for each test case results = [] for array in arrays: # Sort the array to check non-decreasing permutation sorted_array = sorted(array) results.append(sorted_array) # Always add sorted array since it should be valid return results"},{"question":"Alice is a computer science student working on a project that involves basic arithmetic operations on large integers. She has a sequence of n integers, and for her project, she needs to perform various operations on specific ranges within the sequence. One common operation she needs to perform repeatedly is finding the sum of elements within a given range. To automate this part of her project, she wants to write a program that can handle the following functionalities: 1. Initialize the sequence with given integers. 2. Update the value at a specific position in the sequence. 3. Compute the sum of integers within a specific range. Your task is to help Alice by writing a program that supports these functionalities efficiently. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of integers in the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial values of the sequence. The third line contains a single integer q (1 ≤ q ≤ 100,000) — the number of operations to be performed. The following q lines describe the operations. Each operation is in one of the following two formats: 1. `1 x v` — Update the value at position x to v (1 ≤ x ≤ n, 1 ≤ v ≤ 10^9). 2. `2 l r` — Compute the sum of elements from position l to r (1 ≤ l ≤ r ≤ n). Output For each operation of the second type, output the computed sum on a new line. Example Input 5 1 2 3 4 5 5 2 1 3 1 3 10 2 2 5 1 5 20 2 1 5 Output 6 39 33 Explanation Initially, the sequence is [1, 2, 3, 4, 5]. - Operation 1: Compute the sum from position 1 to 3. The sum is 1 + 2 + 3 = 6. - Operation 2: Update the value at position 3 to 10. The sequence becomes [1, 2, 10, 4, 5]. - Operation 3: Compute the sum from position 2 to 5. The sum is 2 + 10 + 4 + 5 = 21. - Operation 4: Update the value at position 5 to 20. The sequence becomes [1, 2, 10, 4, 20]. - Operation 5: Compute the sum from position 1 to 5. The sum is 1 + 2 + 10 + 4 + 20 = 37.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = array[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): # Change the index to leaf pos += self.n # Update the value at the leaf node self.tree[pos] = value # Update the values of nodes in the path while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def sum_range(self, l, r): # Change indices to leaf nodes l += self.n r += self.n sum_val = 0 while l <= r: if l % 2 == 1: sum_val += self.tree[l] l += 1 if r % 2 == 0: sum_val += self.tree[r] r -= 1 l //= 2 r //= 2 return sum_val def process_operations(n, sequence, operations): seg_tree = SegmentTree(sequence) result = [] for operation in operations: if operation[0] == 1: seg_tree.update(operation[1] - 1, operation[2]) elif operation[0] == 2: result.append(seg_tree.sum_range(operation[1] - 1, operation[2] - 1)) return result"},{"question":"You are given an array consisting of integers, and you need to find the smallest-length subarray that, when sorted, makes the entire array sorted in non-decreasing order. The aim is to find the minimal length of the subarray such that, after sorting only that subarray, the whole array will be in non-decreasing order. # Input - An integer array `arr` of length `n` (1 ≤ `n` ≤ 10^5). - The array may contain both positive and negative integers. # Output - Output the length of the smallest subarray that needs to be sorted to make the entire array sorted. - If the array is already sorted, output 0. # Examples Example 1 Input ``` arr = [1, 3, 2, 4, 5] ``` Output ``` 2 ``` Example 2 Input ``` arr = [1, 2, 3, 4, 5] ``` Output ``` 0 ``` Example 3 Input ``` arr = [5, 4, 3, 2, 1] ``` Output ``` 5 ``` # Explanation - In the first example, sorting the subarray `[3, 2]` (indexes 1 to 2) makes the whole array `[1, 2, 3, 4, 5]` sorted. - In the second example, the array is already sorted, so no subarray needs to be sorted. - In the third example, the whole array is in descending order, so sorting the entire array is necessary to achieve non-decreasing order.","solution":"def find_unsorted_subarray(arr): Returns the length of the smallest subarray that needs to be sorted to make the entire array sorted in non-decreasing order. n = len(arr) if n <= 1: return 0 start = 0 end = n - 1 while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 while end > 0 and arr[end] >= arr[end - 1]: end -= 1 if start >= end: return 0 min_subarray = min(arr[start:end + 1]) max_subarray = max(arr[start:end + 1]) while start > 0 and arr[start - 1] > min_subarray: start -= 1 while end < n - 1 and arr[end + 1] < max_subarray: end += 1 return end - start + 1"},{"question":"A prominent high-frequency trading firm wants to improve the performance of its trading algorithms by analyzing historical stock prices. The firm is particularly interested in finding a pattern of continuous increasing and then decreasing stock prices, as such patterns indicate potential opportunities or risks. The pattern of interest is called the \\"mountain sequence\\". A mountain sequence is defined as a contiguous subarray of stock prices such that there exists a peak at some index i (0 ≤ i < k) in the subarray where: - The stock prices strictly increase from the starting index to the peak index i. - The stock prices strictly decrease from the peak index i to the end of the subarray. Formally, for a subarray arr[l..r] to be a mountain sequence, there must exist an index i (l ≤ i ≤ r) such that arr[l] < arr[l+1] < ... < arr[i] > arr[i+1] > ... > arr[r]. Given a list of historical stock prices, determine the length of the longest mountain sequence within that list. If no mountain sequence exists, return 0. Input: - The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the number of recorded stock prices. - The second line contains n integers arr[i] (0 ≤ arr[i] ≤ 10^6) — the stock prices over n consecutive days. Output: - Print a single integer — the length of the longest mountain sequence. If no mountain sequence exists, print 0. Examples: Input: 9 2 1 4 7 3 2 5 4 3 Output: 5 Input: 5 2 2 2 2 2 Output: 0 Input: 12 1 2 3 4 5 6 5 4 3 2 1 0 Output: 12 Note: In the first example, the mountain sequence (1, 4, 7, 3, 2) has the maximum length of 5. In the second example, there is no mountain sequence, so the output is 0. In the third example, the entire array (1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 0) forms a mountain sequence of length 12.","solution":"def longest_mountain(prices): Returns the length of the longest mountain sequence in the given list of prices. n = len(prices) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if prices[i - 1] < prices[i] > prices[i + 1]: left = i right = i while left > 0 and prices[left - 1] < prices[left]: left -= 1 while right < n - 1 and prices[right] > prices[right + 1]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"You have been given a function `find_max_subsequence(arr)` that will return the maximum contiguous subsequence sum from the input array `arr`. Implement this function in a programming language of your choice. Input The function will receive an array `arr` which will contain a mix of positive, negative, and zero integers. Output The function should return an integer which is the maximum sum of any contiguous subsequence in the array. Examples - Input: `[3, -2, 5, -1, 4, -10]` Output: `9` (The maximum subsequence is `[3, -2, 5, -1, 4]` which sums to `9`) - Input: `[-3, -2, -1, -5]` Output: `-1` (The maximum subsequence is `[-1]` with sum `-1`) - Input: `[1, 2, 3, -2, 5]` Output: `9` (The maximum subsequence is `[1, 2, 3, -2, 5]` which sums to `9`) - Input: `[4, -1, 2, 1]` Output: `6` (The maximum subsequence is `[4, -1, 2, 1]` which sums to `6`)","solution":"def find_max_subsequence(arr): Returns the maximum sum of any contiguous subsequence in the array. :param arr: List of integers :return: Integer, maximum subsequence sum if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Ayesha is working on an algorithm problem for her coding class assignment. She needs to determine the shortest distance from the top-left corner to the bottom-right corner of a grid, where some cells are blocked and cannot be traversed. You are given a 2D grid of size N x M filled with integers. Each integer represents a type of cell: - 0: Empty cell (can be traversed) - 1: Blocked cell (cannot be traversed) You can move up, down, left, or right from an empty cell to another empty cell. Your task is to compute the shortest path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1). If such a path does not exist, return -1. Input: The first line contains T denoting the number of test cases. Each test case consists of: - Two integers N and M denoting the number of rows and columns of the grid. - An N x M grid filled with 0s and 1s. Output: Print the length of the shortest path for each test case. SAMPLE INPUT 3 3 3 0 0 0 1 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 2 2 0 1 1 0 SAMPLE OUTPUT 4 4 -1 Explanation Explanation: - In the first test case, one of the shortest paths is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), which has a length of 4. - In the second test case, the shortest path is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2), which has a length of 4. - In the third test case, there is no path from (0,0) to (1,1) because cells (0,1) and (1,0) are blocked.","solution":"from collections import deque def shortest_path(grid): N, M = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[N-1][M-1] == 1: return -1 directions = [(0,1), (1,0), (0,-1), (-1,0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: r, c, dist = queue.popleft() if r == N-1 and c == M-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 def process_test_cases(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] grid = test_cases[t][1] results.append(shortest_path(grid)) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},P={key:0,class:"empty-state"},F=["disabled"],R={key:0},z={key:1};function L(s,e,u,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",R,"See more"))],8,F)):h("",!0)])}const C=d(A,[["render",L],["__scopeId","data-v-6aa3a936"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/37.md","filePath":"quotes/37.md"}'),D={name:"quotes/37.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(C)]))}});export{B as __pageData,G as default};
