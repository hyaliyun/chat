import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},k={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,m,a,r){return n(),i("div",q,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(T,[["render",E],["__scopeId","data-v-5c3c5fdf"]]),S=JSON.parse('[{"question":"You are given an array A of N distinct integers. Define the distance between two integers A[i] and A[j] as abs(A[i] - A[j]), where 0 ≤ i < j < N. You are required to find two integers in the array such that their distance is maximum, as well as two integers such that their distance is minimum. If multiple pairs have the same maximum or minimum distance, any pair can be returned. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains a single integer N, the number of elements in array A. - The second line of each test case contains N space-separated integers denoting the elements of the array A. ------ Output Format ------ For each test case, output two lines: - The first line should contain the two integers that form the pair with the maximum distance in the array. - The second line should contain the two integers that form the pair with the minimum distance in the array. If multiple pairs have the same maximum or minimum distance, any such pair can be printed. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^{5} -10^{5} ≤ A_{i} ≤ 10^{5} ------ Sample Input 1 ------ 2 6 7 1 3 10 5 2 3 1 2 3 ------ Sample Output 1 ------ 1 10 7 5 1 3 2 1 ------ Explanation ------ Test case 1: The pair with the maximum distance is (1, 10) with a distance of abs(1 - 10) = 9. The pair with the minimum distance is (7, 5) with a distance of abs(7 - 5) = 2. Test case 2: The pair with the maximum distance is (1, 3) with a distance of abs(1 - 3) = 2. The pair with the minimum distance is (2, 1) with a distance of abs(2 - 1) = 1.","solution":"def find_max_min_distance_pairs(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] A = test_cases[t][1] A_sorted = sorted(A) max_dist_pair = (A_sorted[0], A_sorted[-1]) max_distance = abs(A_sorted[0] - A_sorted[-1]) min_distance = float(\'inf\') min_dist_pair = None for i in range(1, N): dist = abs(A_sorted[i] - A_sorted[i-1]) if dist < min_distance: min_distance = dist min_dist_pair = (A_sorted[i-1], A_sorted[i]) results.append((max_dist_pair, min_dist_pair)) return results # Example usage: # T = 2 # test_cases = [ # (6, [7, 1, 3, 10, 5, 2]), # (3, [1, 2, 3]) # ] # print(find_max_min_distance_pairs(T, test_cases)) # Should output: [((1, 10), (1, 2)), ((1, 3), (2, 1))]"},{"question":"Developer Dan is creating a game where he needs to analyze areas of rectangles for game levels. Given n rectangles, Dan wants to calculate the area for each rectangle based on provided width and height. Can you help Dan with this task? -----Input:----- - First-line will contain n, the number of rectangles. Then the rectangles follow. - Each rectangle is defined by two integers: width and height. -----Output:----- For each rectangle, output the area in a single line. -----Constraints----- - 1 leq n leq 1000000 - 1 leq width, height leq 1000 -----Sample Input:----- 3 5 4 7 2 6 6 -----Sample Output:----- 20 14 36 -----EXPLANATION:----- The areas of the rectangles are calculated by multiplying the width by the height for each given rectangle.","solution":"def calculate_areas(rectangles): Given a list of tuples representing rectangles, where each tuple contains the width and height of the rectangles, this function returns a list of their areas. Parameters: rectangles (list of tuples): List of tuples where each tuple contains two integers (width, height) Returns: list of int: List containing the area of each rectangle areas = [] for width, height in rectangles: areas.append(width * height) return areas"},{"question":"A robotics company is designing a delivery system where autonomous robots deliver packages within a building. The building consists of a series of rooms connected by hallways. The number of rooms is represented by N, and the hallways are represented as a matrix where the element at the i-th row and j-th column denotes the time it takes to traverse from room i to room j. If there is no direct hallway between room i and room j, the time is represented as a large integer value (for example, 1000000). Your task is to find the shortest time a robot needs to deliver a package from a given starting room (S) to a target room (T). You need to write a program that inputs the number of rooms, the hallway matrix, the starting room, and the target room, and then outputs the shortest delivery time. For simplicity, number the rooms from 0 to N-1. Input The input consists of multiple datasets. The end of the input is indicated by a line containing a single minus one (`-1`). Each dataset starts with an integer N (2 ≤ N ≤ 20), the number of rooms. The next N lines contain N integers each, forming the hallway matrix. The subsequent line contains two integers, S (starting room) and T (target room). Output For each dataset, print the shortest delivery time from room S to room T on one line. If delivery is impossible, print \\"Impossible\\". Example Input 3 0 2 1000000 2 0 3 1000000 3 0 0 2 4 0 3 1000000 7 3 0 1 8 1000000 1 0 1000000 7 8 1000000 0 0 3 -1 Output 5 7","solution":"def floyd_warshall(matrix): Implements the Floyd-Warshall algorithm to find the shortest paths between all pairs of nodes. Parameters: matrix (list of list of int): The adjacency matrix representing the time between rooms. Returns: list of list of int: The matrix of the shortest paths between all pairs of nodes. N = len(matrix) dist = [row[:] for row in matrix] # Initialize the distance matrix for k in range(N): for i in range(N): for j in range(N): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def find_shortest_delivery(N, matrix, S, T): shortest_paths = floyd_warshall(matrix) return shortest_paths[S][T] if shortest_paths[S][T] < 1000000 else \\"Impossible\\" def process_input_data(input_data): results = [] idx = 0 while idx < len(input_data): if input_data[idx] == \'-1\': break N = int(input_data[idx]) idx += 1 matrix = [] for _ in range(N): matrix.append(list(map(int, input_data[idx].split()))) idx += 1 S, T = map(int, input_data[idx].split()) idx += 1 result = find_shortest_delivery(N, matrix, S, T) results.append(result) return results # Example usage: # input_data = [ # \\"3\\", # \\"0 2 1000000\\", # \\"2 0 3\\", # \\"1000000 3 0\\", # \\"0 2\\", # \\"4\\", # \\"0 3 1000000 7\\", # \\"3 0 1 8\\", # \\"1000000 1 0 1000000\\", # \\"7 8 1000000 0\\", # \\"0 3\\", # \\"-1\\" # ] # results = process_input_data(input_data) # for result in results: # print(result)"},{"question":"Fiona is working on a text editor and she wants to implement a feature to auto-correct a document containing multiple sentences. The auto-correction involves two operations: converting all characters in a sentence to lowercase and capitalizing the first letter of the sentence. Each sentence ends with a period (\'.\') and sentences are separated by a single space. -----Input----- The first line of input contains a string S (1 ≤ |S| ≤ 10^6) representing the document. -----Output----- Output the corrected document such that each sentence is properly formatted with lowercase letters, and the first letter of each sentence is capitalized. -----Example----- Input: \\"hello world. this is an example. can you fix it?\\" Output: \\"Hello world. This is an example. Can you fix it?\\" -----Explanation----- Example case 1: The sentences \\"hello world.\\", \\"this is an example.\\", and \\"can you fix it?\\" are each corrected by making all characters lowercase and then capitalizing the first letter.","solution":"def auto_correct_document(document): Auto-corrects a document by converting all characters to lowercase and capitalizing the first letter of each sentence. Sentences are separated by a single space and end with a period. Args: document (str): The input document string. Returns: str: The auto-corrected document. sentences = document.lower().split(\'. \') corrected_sentences = [sentence.capitalize() for sentence in sentences] corrected_document = \'. \'.join(corrected_sentences) return corrected_document"},{"question":"In a distant galaxy, there exists an interstellar network with planetary communication nodes. The nodes communicate through a system of directed teleportation portals. Each portal has a certain teleportation capability, which specifies how much data can be transported from one node to another in a single jump. Given this network\'s configuration, your task is to determine the maximum data that can be transported from a starting node to a target node using the teleportation portals. Input The first input line contains three integers n, m, and k (1 ≤ n ≤ 1000, 1 ≤ m ≤ 5000, 1 ≤ k ≤ 100), where n represents the number of nodes, m represents the number of teleportation portals, and k represents the maximum number of jumps allowed. Each of the next m lines describes a teleportation portal with three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 1000). Here, u is the starting node of the portal, v is the target node of the portal, and c is the teleportation capability of the portal. The last input line contains two integers s and t (1 ≤ s, t ≤ n), where s is the starting node and t is the target node. Output Print a single integer – the maximum data that can be transported from the starting node s to the target node t using at most k jumps. If it is not possible to transport data from s to t, print 0. Examples Input 5 6 3 1 2 50 1 3 20 2 4 10 3 4 50 4 5 30 3 5 40 1 5 Output 60 Explanation In this example, the optimal path using at most 3 jumps is: 1 -> 3 -> 4 -> 5, with a maximum data transport capability of min(20, 50, 30) = 20. However, there exists a better path: 1 -> 3 -> 5 with capability min(20, 40) = 20. Therefore, the highest capacity path with at most 3 jumps remains 20. Hints 1. Consider using a dynamic programming approach or shortest/longest path algorithms adapted for maximum capacity path finding. 2. Think about how to handle the jump limit (k) in your solution.","solution":"def max_data_transport(n, m, k, portals, s, t): from collections import defaultdict, deque import heapq graph = defaultdict(list) for u, v, c in portals: graph[u].append((v, c)) max_cap = [float(\'-inf\')] * (n + 1) max_cap[s] = float(\'inf\') max_heap = [(-float(\'inf\'), s, 0)] # (capacity, node, jumps) while max_heap: current_cap, u, jumps = heapq.heappop(max_heap) current_cap = -current_cap if jumps > k: continue if u == t: return current_cap for v, c in graph[u]: new_cap = min(current_cap, c) if new_cap > max_cap[v] and jumps + 1 <= k: max_cap[v] = new_cap heapq.heappush(max_heap, (-new_cap, v, jumps + 1)) return 0 # Example usage: n = 5 m = 6 k = 3 portals = [ (1, 2, 50), (1, 3, 20), (2, 4, 10), (3, 4, 50), (4, 5, 30), (3, 5, 40) ] s = 1 t = 5 print(max_data_transport(n, m, k, portals, s, t)) # Output: 20"},{"question":"Write a function `merge_dictionaries` that takes two dictionaries as input and returns a single dictionary. If both dictionaries contain a value for the same key, the value from the second dictionary should be used.","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries. If both dictionaries have the same key, the value from the second dictionary will be used. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary containing all keys and values from both dictionaries. merged_dict = dict1.copy() merged_dict.update(dict2) return merged_dict"},{"question":"Write a function to determine if a string has all unique characters. You should not use any additional data structures. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000), which includes only alphabetic characters (both uppercase and lowercase). Output Output \\"YES\\" if the string has all unique characters and \\"NO\\" if there are any duplicate characters. Examples Input abcde Output YES Input hello Output NO","solution":"def has_all_unique_characters(s): Determines if a string has all unique characters. Args: s (str): The input string. Returns: str: \\"YES\\" if the string has all unique characters, \\"NO\\" if there are any duplicate characters. for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return \\"NO\\" return \\"YES\\""},{"question":"Alice, a software engineer, is working on a new feature that involves manipulating strings. She needs a function that, given a string s consisting of lowercase English letters, will determine whether it is possible to rearrange the characters in the string to form a palindrome. A palindrome is a word that reads the same backward as forward. Given the string s, return \\"YES\\" if it is possible to rearrange the characters of s to form a palindrome. Otherwise, return \\"NO\\". Input The input consists of one line containing a single string s (1 ≤ |s| ≤ 100,000) which consists only of lowercase English letters. Output Print \\"YES\\" if it is possible to rearrange the characters of s to form a palindrome; otherwise, print \\"NO\\". Examples Input civic Output YES Input ivicc Output YES Input hello Output NO Note In the first example, the string \\"civic\\" is already a palindrome. In the second example, the characters can be rearranged to form \\"civic\\", which is a palindrome. In the third example, it is impossible to rearrange the characters of \\"hello\\" to form a palindrome.","solution":"def can_form_palindrome(s): Determines if it is possible to rearrange the characters of s to form a palindrome. Args: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if it is possible to rearrange the characters to form a palindrome, otherwise \\"NO\\". from collections import Counter char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Design a cache system that operates with the following methods: - `put(key: int, value: int)`: Inserts a new key-value pair into the cache. If the cache reaches its capacity, it should invalidate the least recently used item before inserting the new item. - `get(key: int) -> int`: Returns the value associated with the given key if it exists in the cache. Otherwise, returns -1. The cache should operate with a maximum capacity, specified during its initialization, and must discard the least recently used items first when this capacity is exceeded. Make sure `get` and `put` methods both operate in O(1) time complexity. **Example:** ``` cache = Cache(2) cache.put(1, 1) cache.put(2, 2) print(cache.get(1)) # returns 1 cache.put(3, 3) # evicts key 2 print(cache.get(2)) # returns -1 (not found) cache.put(4, 4) # evicts key 1 print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ```","solution":"from collections import OrderedDict class Cache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def put(self, key: int, value: int): if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) def get(self, key: int) -> int: if key in self.cache: self.cache.move_to_end(key) return self.cache[key] return -1"},{"question":"David loves to collect stamps. He has a unique collection of stamps from various countries. His collection consists of N stamps, each with a unique positive integer representing its value. David wants to sort his stamps based on their value in descending order. However, after visiting a stamp show, he purchased a new stamp, and he wants to find where this new stamp would be placed in his sorted collection. Given the current collection and the value of the newly purchased stamp, your task is to determine the position of the new stamp in the sorted collection. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains one integer N denoting the number of stamps in David\'s collection. The second line contains N space-separated integers A1, A2, ..., AN denoting the values of the stamps in David\'s collection. The third line contains one integer X, the value of the newly purchased stamp. -----Output----- For each test case, output a single line containing the position of the newly purchased stamp in the sorted collection (in descending order). -----Constraints----- 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ Ai, X ≤ 1000 -----Example----- Input: 2 3 5 10 3 4 4 8 1 6 2 5 Output: 2 2 -----Explanation----- In the example test there are T=2 test cases. Test case 1 In the first test case N is 3, and the current collection is {5, 10, 3}. The new stamp has a value of 4. If we sort the collection in descending order and include the new stamp, it will be {10, 5, 4, 3}, making the new stamp\'s position 3. Hence the output is 2. Test case 2 In the second test case N is 4, and the current collection is {8, 1, 6, 2}. The new stamp has a value of 5. If we sort the collection in descending order and include the new stamp, it will be {8, 6, 5, 2, 1}, making the new stamp\'s position 3. Hence the output is 2.","solution":"def find_new_stamp_position(test_cases): results = [] for test_case in test_cases: N, stamps, X = test_case stamps.append(X) stamps.sort(reverse=True) position = stamps.index(X) + 1 results.append(position) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) stamps = list(map(int, lines[index + 1].split())) X = int(lines[index + 2]) test_cases.append((N, stamps, X)) index += 3 return test_cases def execute(input_data): test_cases = parse_input(input_data) return find_new_stamp_position(test_cases)"},{"question":"Write a function RemoveDuplicates that removes duplicate characters in a string while preserving the order of the first occurrence of each character. For example string input1 = \\"abracadabra\\"; string input2 = \\"hello\\"; string input3 = \\"mississippi\\"; RemoveDuplicates(input1); // \\"abrcd\\" RemoveDuplicates(input2); // \\"helo\\" RemoveDuplicates(input3); // \\"misp\\" - \\"abracadabra\\" becomes \\"abrcd\\" because we remove the subsequent \'a\'s, \'b\'s, \'r\'s and only keep their first occurrences. - \\"hello\\" becomes \\"helo\\" because we remove the second \'l\'. - \\"mississippi\\" becomes \\"misp\\" because we remove subsequent \'i\'s, \'s\'s and \'p\'s and only keep their first occurrences. Hint: you can utilize sets to track characters that have already been seen.","solution":"def RemoveDuplicates(s): Removes duplicate characters in a string while preserving the order of the first occurrence of each character. Parameters: s (str): The input string. Returns: str: A new string with duplicates removed. seen = set() output = [] for char in s: if char not in seen: seen.add(char) output.append(char) return \'\'.join(output)"},{"question":"You are given an integer n. Find any permutation of integers from 1 to n such that the permutation does not contain any increasing subsequence of length greater than or equal to 4. If there are multiple such permutations, output any. It can be shown that such permutation always exists under the given constraints. A sequence a is a subsequence of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements without changing the order of the remaining elements. Input The first line contains a single integer t (1 ≤ t ≤ 500) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 5000). It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^5. Output For each test case, print a single line containing the permutation of integers from 1 to n. If there are multiple such permutations, output any. It can be shown that such permutation always exists under the given constraints. Example Input 4 3 5 7 15 Output 3 2 1 4 5 1 3 2 7 6 5 4 3 2 1 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 Note In the first test case, the permutation \\"3 2 1\\" does not contain any increasing subsequence of length 4 or more. In the fourth test case, the permutation \\"15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\" does not contain any increasing subsequence of length 4 or more.","solution":"def generate_permutation(n): Generates a permutation of integers from 1 to n such that it does not contain any increasing subsequence of length greater than or equal to 4. return list(range(n, 0, -1)) def solve(test_cases): results = [] for n in test_cases: permutation = generate_permutation(n) results.append(permutation) return results"},{"question":"You are given an array of integers and an integer target. Your task is to find a unique pair of numbers from the array that sums up to the target value. Return the indices of the two numbers in the form of a list. You may assume that each input would have exactly one solution and you may not use the same element twice. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Your Task: You don\'t need to read or print anything. Your task is to complete the function twoSum() which takes nums (a list of integers) and target (an integer) as input parameters and returns the list of indices of the two numbers that add up to the target. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= nums.length <= 10^4 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i # Just in case there are no valid solutions, we shouldn\'t reach this line because it is assumed there is exactly one solution. return None"},{"question":"Given a number N, find the N^{th} Pell number. The Pell numbers are represented by the following recurrence relation: P_{n} = 2 * P_{n-1} + P_{n-2} for n > 1 P_{0} = 0 P_{1} = 1 Since the output may be very large, calculate the answer modulus 10^9 + 7. Example 1: Input: N = 5 Output: 29 Explanation: The first few Pell numbers are 0, 1, 2, 5, 12, 29... Example 2: Input: N = 7 Output: 169 Explanation: The first few Pell numbers are 0, 1, 2, 5, 12, 29, 70, 169... Your Task: You don\'t need to read input or print anything. Your task is to complete the function pell() which takes integer N as input parameter and returns the N^{th} Pell number. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6","solution":"def pell(N): MOD = 10**9 + 7 if N == 0: return 0 elif N == 1: return 1 p0, p1 = 0, 1 # Initial Pell numbers: P_0 and P_1 for i in range(2, N + 1): new_p = (2 * p1 + p0) % MOD p0, p1 = p1, new_p return p1"},{"question":"In this problem, you are given an integer array. Your task is to find the maximum sum of non-adjacent elements in the array. For example, for the array `[3, 2, 5, 10, 7]`, the maximum sum of non-adjacent elements is 15 (3 + 10 + 2). Input The first line will contain an integer `N`, the number of elements in the array. The second line will contain `N` space-separated integers, representing the elements of the array. Each element in the array will be between -1000 and 1000, inclusive. The array will have at most 100 elements. Output You should print a single integer, the maximum sum of non-adjacent elements. Example Input: 5 3 2 5 10 7 Output: 15","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of non-adjacent elements in the array. incl = 0 excl = 0 for num in arr: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl) # Function to handle the input/output def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) print(max_non_adjacent_sum(arr))"},{"question":"Mira loves reading books and she has created a bookshelf with three rows and N columns to arrange her books. Each cell in the bookshelf can hold one book, but due to some design constraints, she does not want to place books in two consecutive cells horizontally. However, placing books vertically in two consecutive cells within the same column is allowed. Mira can also choose to leave some cells empty. Given N, determine the number of ways she can arrange her books on the bookshelf. Input Format: - The first line contains an integer T, representing the number of test cases. - Each test case consists of a single integer N, denoting the number of columns in the bookshelf. Output Format: For each test case, output the total possible ways to arrange the books on the bookshelf. SAMPLE INPUT 2 1 2 SAMPLE OUTPUT 27 216 Explanation: Case 1: Bookshelf has 3 rows and 1 column. So, Mira can: - Put a book in the first cell. - Put a book in the second cell. - Put a book in the third cell. - Put books in any combination of the above cells. - Leave all cells empty. Total ways = 3^1 + 3^1 + 3^1 + 1 = 27 ways. Case 2: Bookshelf has 3 rows and 2 columns. Mira can arrange the books independently in each column as long as the horizontal placement restriction is respected. For each column, there are 3 choices per cell. Considering all combinations: Total ways = (3^2)^2 = 216 ways.","solution":"def count_ways_to_arrange_books(T, cases): results = [] for N in cases: # The number of ways to arrange books in one column is 3^N (3 choices per cell, due to the three rows) # Each column\'s arrangement is independent, so the total is (3**N)**3 total_ways = 3 ** (N * 3) results.append(total_ways) return results"},{"question":"In a small village, there\'s a unique tradition every year in which villagers decorate their houses using a specific pattern of colored lights. The houses are on a straight line, and each house belongs to one of three zones: A, B, or C. The pattern alternates among these zones such that no two adjacent houses have the same zone. For example, if the first house is in zone A, the second house could be in zone B, the third in zone C, the fourth in zone A again, and so on. Your task is to generate the zones for n houses, starting from zone A. -----Input----- The input contains a single integer n (1 ≤ n ≤ 10^6), representing the number of houses in the village. -----Output----- Print a single string of length n, where each character is either \'A\', \'B\', or \'C\', representing the zone to which the i-th house belongs. -----Examples----- Input 5 Output ABCAB Input 9 Output ABCABCABC","solution":"def generate_zones(n): Generate the zones for n houses according to the pattern \'ABC\'. zones_pattern = \\"ABC\\" result = [] for i in range(n): result.append(zones_pattern[i % 3]) return \'\'.join(result)"},{"question":"You are given a list of integers. Your task is to find the longest subsequence in the list such that the difference between consecutive elements in this subsequence is constant. Input: n: number of elements in the list arr: n space-separated integers Output: Length of the longest subsequence with a constant difference between consecutive elements. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 SAMPLE INPUT 7 1 2 3 4 5 6 7 SAMPLE OUTPUT 7 Note: In the example provided, the entire list itself is the longest subsequence (1, 2, 3, 4, 5, 6, 7) with a constant difference of 1 between consecutive elements.","solution":"def longest_constant_difference_subsequence(n, arr): if n == 1: return 1 longest_length = 1 current_length = 1 current_diff = arr[1] - arr[0] for i in range(1, n - 1): next_diff = arr[i + 1] - arr[i] if next_diff == current_diff: current_length += 1 else: current_diff = next_diff current_length = 1 longest_length = max(longest_length, current_length + 1) return longest_length"},{"question":"Implement a program to organize the schedule of a university\'s weekly classes timetable. The input consists of a number of classes and a list of their respective time slots. Each class has a duration (in hours) and is available within a specified range of hours during the day. The goal is to determine if it is possible to organize a schedule where no two classes overlap, and if so, provide one such schedule. -----Input----- The first line of input contains a single integer N (1 le N le 100) — the number of classes. The next N lines each contain three integers d_i, s_i, and e_i (1 le d_i le 12, 0 le s_i < e_i le 24) — representing the duration in hours of the i-th class, and the starting and ending times (inclusive) within which this class can be scheduled. -----Output----- If it\'s possible to create a valid schedule, print \\"YES\\" followed by N lines, each containing two integers representing the start and end times of the corresponding class in a non-overlapping manner. If no such schedule exists, print \\"NO\\". -----Example----- Input 3 2 9 18 3 3 12 1 13 17 Output YES 9 11 3 6 13 14 -----Note----- In the example above, we have three classes: - The first class lasts 2 hours and can be scheduled anytime between 9 and 18. - The second class lasts 3 hours and can be scheduled anytime between 3 and 12. - The third class lasts 1 hour and can be scheduled between 13 and 17. One valid timetable among multiple possible ones is: - Schedule the first class from 9 to 11. - Schedule the second class from 3 to 6. - Schedule the third class from 13 to 14.","solution":"def organize_classes(N, classes): Organizes classes such that no two classes overlap and each class fits within its given time range. Parameters: N (int): The number of classes. classes (list of tuples): Each tuple contains (duration, start_time, end_time) of the class. Returns: tuple: A tuple with \\"YES\\" and a list of tuples with (start_time, end_time) for each class if possible, otherwise \\"NO\\". # Sort classes based on their end time to facilitate optimal scheduling classes.sort(key=lambda x: x[2]) schedule = [] current_time = 0 for d, s, e in classes: can_be_scheduled = False # Attempt to schedule within the given window without overlaps for start in range(max(s, current_time), e - d + 1): end = start + d if end <= e: schedule.append((start, end)) current_time = end can_be_scheduled = True break if not can_be_scheduled: return \\"NO\\" return \\"YES\\", schedule"},{"question":"Petya decided to test another optimization technique. Suppose he has a string consisting of lowercase English letters. He now wants a function that returns the length of the longest substring that contains no more than k distinct characters. Your task is to implement this function efficiently as Petya will test it with large strings of length up to 10^6. Input The first line contains an integer k (1 ≤ k ≤ 10^6) — the maximum number of distinct characters in the substring. The second line contains a string s (1 ≤ |s| ≤ 10^6) consisting of lowercase English letters. Output Output the length of the longest substring that contains no more than k distinct characters. Examples Input 2 eceba Output 3 Input 3 aaabbccc Output 8 Input 1 aaaaa Output 5 Note In the first example: - The longest substring with at most 2 distinct characters is \\"ece\\", which has a length of 3. In the second example: - The entire string \\"aaabbccc\\" has 3 distinct characters, which is within the limit, hence the length of the longest substring is 8. In the third example: - The entire string \\"aaaaa\\" consists of a single character, so the length of the longest substring is 5.","solution":"def longest_substring_with_k_distinct(k, s): Returns the length of the longest substring that contains no more than k distinct characters. Parameters: k (int): The maximum number of distinct characters allowed in the substring. s (str): The input string consisting of lowercase English letters. Returns: int: The length of the longest substring with no more than k distinct characters. if k == 0 or not s: return 0 n = len(s) char_count = {} max_length = 0 left = 0 for right in range(n): right_char = s[right] if right_char in char_count: char_count[right_char] += 1 else: char_count[right_char] = 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a string with mixed content including letters, digits, and special characters, write a function to determine and return the longest substring that only contains alphabetic characters (both lowercase and uppercase letters). If there are multiple substrings of the same length, return the one that appears first. Input The input is a single string s (1 ≤ |s| ≤ 105), containing a mix of alphanumeric and special characters. Output Print a single string, which is the longest substring with only alphabetic characters. Examples Input a1bcd@efg*123xy Output bcd Input abc123def456gh Output abc In this problem, you need to iterate through the string and find the longest contiguous sequence of alphabetic characters. Remember to consider only alphabetic characters as part of the valid substring. If two or more alphabetic substrings have the same length, the first one should be returned.","solution":"def longest_alpha_substring(s): Returns the longest substring containing only alphabetic characters from the given string. If there are multiple such substrings with the same length, the first one is returned. max_length = 0 max_substr = \\"\\" current_length = 0 current_substr = \\"\\" for char in s: if char.isalpha(): current_length += 1 current_substr += char if current_length > max_length: max_length = current_length max_substr = current_substr else: current_length = 0 current_substr = \\"\\" return max_substr"},{"question":"Write a function called `isIsogram` that determines whether a given string is an isogram. An isogram (also known as a \\"non-pattern word\\") is a word or phrase in which no letter occurs more than once. Your function should be case insensitive, meaning that \'A\' and \'a\' are considered the same character. Your function should return `True` if the input string is an isogram, and `False` otherwise. Examples: ``` isIsogram(\\"Dermatoglyphics\\") -> True isIsogram(\\"aba\\") -> False isIsogram(\\"moOse\\") -> False ```","solution":"def isIsogram(s): Determines whether a given string is an isogram (no repeating letters, case insensitive). Args: s (str): The string to check. Returns: bool: True if the string is an isogram, False otherwise. s = s.lower() return len(set(s)) == len(s)"},{"question":"Laura is designing a racetrack as a concatenation of circular paths. She wants to maximize the total area enclosed by the track. Each circular path is defined by its radius r_i. The final racetrack is formed by placing these circular paths side-by-side, from left to right, such that consecutive circles touch each other exactly at one point. Help Laura determine the maximum enclosed area of the racetrack. Formally, the total area A to be maximized is the sum of the areas of the individual circles. ----Input---- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the number of circular paths. - The next line contains N space-separated integers r_1, r_2, ldots, r_N, where r_i is the radius of the i-th circular path. ----Output---- For each test case, print a single line containing one integer representing the total enclosed area of the racetrack. ----Constraints---- - 1 le T le 10^5 - 1 le N le 100 - 1 le r_i le 1000 for each valid i ----Example Input---- 2 3 1 2 3 2 4 5 ----Example Output---- 78 153 ----Explanation---- For the first test case, the enclosed areas of circles with radii 1, 2, and 3 are π * 1^2, π * 2^2, and π * 3^2 respectively. Thus, total enclosed area is π (1 + 4 + 9) = 14π. Since pi is a constant, you can simply output the floor value of the integer area 14 in this example.","solution":"import math def maximum_enclosed_area(test_cases): results = [] for case in test_cases: N, radii = case total_area = sum(r * r for r in radii) results.append(total_area) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) index += 1 radii = list(map(int, lines[index].split())) index += 1 test_cases.append((N, radii)) return test_cases def main(input_data): test_cases = process_input(input_data) results = maximum_enclosed_area(test_cases) for result in results: print(result) # Example usage # input_data = \\"2n3n1 2 3n2n4 5\\" # main(input_data)"},{"question":"Evelyn is learning about palindromes and how they can be found within a larger string of characters. She wants to write a program to help her identify the longest palindromic substring in a given string. Write a program to assist Evelyn by taking in a single line of lowercase alphabetic characters and output the longest palindromic substring. Input A string consisting of lowercase alphabetic characters. Output A single string which is the longest palindromic substring found within the input. Example Input: babad Output: bab Note: If there are multiple substrings of the same length, return the first one that appears.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if not s: return \\"\\" n = len(s) start, max_length = 0, 1 for i in range(1, n): # Check for even length palindrome low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if (high - low + 1) > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindrome low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if (high - low + 1) > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Given an array of n integers, write a function to determine if there exist three distinct elements a, b, and c in the array such that a + b + c = 0. Your function should return an array containing all unique triplets that add up to zero. Each triplet should be represented as an array of three integers, and the output should not contain any duplicate triplets. Example: ```python Input: [-1, 0, 1, 2, -1, -4] Output: [ [-1, 0, 1], [-1, -1, 2] ] ``` Your implementation should have a time complexity better than O(n^3).","solution":"def three_sum(nums): Returns a list of unique triplets [a, b, c] from the array `nums` such that a + b + c = 0. Args: nums (list): List of integers. Returns: list: List of unique triplets where the sum of each triplet is zero. nums.sort() result = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue l, r = i + 1, n - 1 while l < r: total = nums[i] + nums[l] + nums[r] if total < 0: l += 1 elif total > 0: r -= 1 else: result.append([nums[i], nums[l], nums[r]]) while l < r and nums[l] == nums[l + 1]: l += 1 while l < r and nums[r] == nums[r - 1]: r -= 1 l += 1 r -= 1 return result"},{"question":"You are given an array of integers representing the heights of a range of pillars. Each pillar is of unit width. Your task is to find two pillars such that the container formed between them (with the two pillars as sides and the x-axis as the bottom) can contain the maximum amount of water. The width of the container is the difference in the indices of the two pillars, and the height of the container is the minimum height of the two pillars. Write a function that accepts an array of integers and returns the maximum amount of water that can be contained between two pillars. -----Constraints----- - 2 leq n leq 10^5 - 1 leq height[i] leq 10^4 (0 leq i < n) -----Input----- The input consists of a single line containing the array of integers, with each integer separated by a space. -----Output----- Print the maximum amount of water that can be contained. -----Sample Input----- 1 8 6 2 5 4 8 3 7 -----Sample Output----- 49 In this example, the maximum amount of water is contained between the pillars of height 8 (index 1) and height 7 (index 8), with a distance of 7 units between them. The contained water is therefore 7 (height) * 7 (width) = 49 units.","solution":"def max_area(heights): Given a list of integers representing the heights of pillars, return the maximum amount of water that can be contained between two pillars. max_water = 0 left, right = 0, len(heights) - 1 while left < right: width = right - left height = min(heights[left], heights[right]) current_area = width * height max_water = max(max_water, current_area) # Move the pointer pointing to the shorter pillar inward if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water # To read input and call the function if __name__ == \\"__main__\\": heights = list(map(int, input().split())) print(max_area(heights))"},{"question":"Given a list of integers, determine if it is possible to partition the list into two subsets such that the sum of the elements in both subsets is equal. Example 1: Input: [1, 5, 11, 5] Output: True Explanation: The list can be partitioned as [1, 5, 5] and [11]. Example 2: Input: [1, 2, 3, 5] Output: False Explanation: The list cannot be partitioned into two subsets of equal sum. Note: 1. Each element of the list is a positive integer. 2. The length of the list will not exceed 200. 3. The integers in the list will not exceed 100.","solution":"def can_partition(nums): Determine if the list can be partitioned into two subsets with equal sum. total_sum = sum(nums) if total_sum % 2 != 0: return False target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Frank and the Robots Frank is constructing a series of robots and programming them to follow a specific sequence of instructions. Each robot is identified by a unique integer ID. The robots respond to commands in the form of \\"increment\\" or \\"decrement\\" ID, and will continue to alter their ID in a commanded sequence. Frank wants to optimize the sequence of instructions to reach a target ID from a given start ID. He is particularly interested in finding out the minimum number of instructions needed to achieve this. You are to help him determine the minimum number of commands to turn the initial ID into the target ID using only the commands \\"increment\\" (+1 to ID) and \\"decrement\\" (-1 from ID). ------ Input: ------ The first line contains an integer T, the number of testcases. Each of the next T lines contains two integers separated by a space, startID and targetID. ------ Output: ------ For each testcase, print the minimum number of instructions needed to turn startID into targetID. ------ Constraints ------ 1 ≤ T ≤ 10^{6} -10^{9} ≤ startID, targetID ≤ 10^{9} ----- Sample Input 1 ------ 4 3 10 10 3 5 5 -1 1 ----- Sample Output 1 ------ 7 7 0 2 ----- Explanation ------ Test case -1 -> Minimum steps to go from 3 to 10 is 7 (increment 7 times). Test case -2 -> Minimum steps to go from 10 to 3 is 7 (decrement 7 times). Test case -3 -> startID is already equal to targetID, so 0 steps needed. Test case -4 -> Minimum steps to go from -1 to 1 is 2 (increment 2 times).","solution":"def min_instructions(startID, targetID): Returns the minimum number of instructions needed to turn startID into targetID using only \\"increment\\" (+1) and \\"decrement\\" (-1) commands. return abs(targetID - startID) def process_test_cases(test_cases): results = [] for startID, targetID in test_cases: results.append(min_instructions(startID, targetID)) return results # Example usage: # test_cases = [(3, 10), (10, 3), (5, 5), ( -1, 1)] # print(process_test_cases(test_cases))"},{"question":"Python Script Analysis **Story** Tom is learning to analyze Python scripts and is interested in understanding the complexity and efficiency of his code. He has a simple Python script that performs basic arithmetic operations, reads a text file, and counts the frequency of each word in the file. However, Tom realizes that depending on the text file\'s size and content, the time taken to execute the script can vary. He wants to analyze this time complexity to optimize the script further. **Problem** Given a Python script that reads a text file and then counts the frequency of each word, write a function to analyze and print the time complexity based on the file size and content. For this problem, consider the script only performs the following operations: 1. Reads the entire text file into memory. 2. Splits the text into words. 3. Uses a dictionary to count the frequency of each word. **Analysis Steps** 1. **Reading the File**: The time complexity for reading a file of size `n` is `O(n)`. 2. **Splitting the Text**: Splitting the text consisting of `m` words has a time complexity of `O(m)`. 3. **Counting Word Frequency**: Counting the frequency of each word in the text involves traversing each of the `m` words and updating the dictionary, resulting in a time complexity of `O(m)`. Based on the above steps, determine the overall time complexity of the script. **Input Format** - The first line of input contains an integer `N`, the size of the text file in bytes. - The second line contains an integer `M`, the number of unique words in the file. - The third line contains an integer `W`, the total number of words in the file. **Output Format** Print the overall time complexity of the script as a function of `N` and `W`. **Input Example 1** ```text 500 100 200 ``` **Output Example 1** ```text O(N + W) ``` **Input Example 2** ```text 1000 150 500 ``` **Output Example 2** ```text O(N + W) ``` **Input Example 3** ```text 800 75 300 ``` **Output Example 3** ```text O(N + W) ``` **Sample Solution** ```python def analyze_complexity(N, M, W): print(\\"O(N + W)\\") # sample inputs to test the solution analyze_complexity(500, 100, 200) analyze_complexity(1000, 150, 500) analyze_complexity(800, 75, 300) ``` This function takes the text file size and word counts to determine the time complexity and prints the result. The overall complexity `O(N + W)` accounts for reading the entire file and processing each word.","solution":"def analyze_complexity(N, M, W): Analyzes and prints the time complexity based on the file size N and total number of words W. Parameters: N (int): the size of the text file in bytes. M (int): the number of unique words in the file. (not used in complexity analysis) W (int): the total number of words in the file. print(\\"O(N + W)\\")"},{"question":"In a zoo, there are different types of animals and cages. Each cage can house multiple animals, but all animals in a cage should belong to the same species. You need to write a program that, given a list of animal species and their quantities, determines the minimum number of cages required to house all the animals. Input Format The first line contains an integer, n (the number of different species of animals). The next n lines each contain a space-separated string s (the name of the species) and an integer k (the number of animals of that species). Constraints 1 leq n leq 1000 1 leq k leq 1000 Output Format Print a single integer denoting the minimum number of cages required. Sample Input 0 3 lion 3 tiger 2 elephant 1 Sample Output 0 3 Explanation 0 In this example, there are three species: lions, tigers, and elephants. Each species can be housed in a single cage since the constraints allow for any number of animals in a cage. Thus, the minimal number of cages required is equal to the number of different species, which is 3. Sample Input 1 5 lion 500 penguin 500 tiger 500 bear 500 wolf 500 Sample Output 1 5 Explanation 1 In this example, as each species can be housed without splitting them into several cages, the total number of cages corresponds to the number of species, which is 5.","solution":"def min_cages(species_list): Given a list of species and their quantities, determines the minimum number of cages required to house all the animals, with each cage housing animals of the same species. :param species_list: List of tuples where each tuple contains a species name and its quantity. :return: Integer representing the minimum number of cages required. # The number of cages needed is equal to the number of different species. return len(species_list)"},{"question":"Given a deck of standard 52 playing cards, implement a program to simulate shuffling the deck using the Fisher-Yates shuffle algorithm. After shuffling, list out the first X cards from the shuffled deck. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single integer X - the number of cards to be listed from the shuffled deck. ------ Output Format ------ For each test case, output in a new line the first X cards from the shuffled deck in space-separated format. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ X ≤ 52 (Note: The deck contains 52 unique cards composed of 4 suits (Hearts, Diamonds, Clubs, Spades) with each suit having 13 ranks (2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A)) ------ Sample Input 1 ------ 2 5 10 ------ Sample Output 1 ------ J-Hearts 2-Clubs 8-Diamonds 10-Spades A-Hearts Q-Spades 3-Diamonds 4-Clubs 9-Hearts 6-Spades K-Clubs 5-Diamonds A-Diamonds 7-Spades 2-Hearts ------ Explanation 1 ------ In the first test case, the program outputs the first 5 cards from one shuffled deck. In the second test case, it outputs the first 10 cards from another shuffled deck. Note that the exact output of the cards will vary due to the randomness in the shuffle. (Note: The actual cards listed in the output may vary as the shuffling results in different sequences each time. The examples here show just one of the possible outcomes.)","solution":"import random def shuffle_deck_and_get_first_x_cards(T, test_cases): Simulates shuffling a deck of cards and returns the first X cards for each test case. suits = [\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\'] ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] deck = [f\\"{rank}-{suit}\\" for suit in suits for rank in ranks] results = [] for X in test_cases: shuffled_deck = deck[:] random.shuffle(shuffled_deck) results.append(shuffled_deck[:X]) return results"},{"question":"A delivery service company wants to optimize their delivery routes. They operate within a city represented as a grid of size `n x n`. Each cell in the grid represents a location, and the delivery vehicle can move between adjacent cells horizontally or vertically. The company receives a set of delivery requests. Each request specifies a start location, an end location, and a delivery time. The delivery time indicates the maximum time the delivery vehicle should take to travel from the start location to the end location. The vehicle can make multiple deliveries in sequence but can only handle one delivery at a time. Your task is to determine the maximum number of delivery requests that can be satisfied. # Input - The first line contains an integer `n`, the size of the grid (1 ≤ n ≤ 1000). - The second line contains an integer `m`, the number of delivery requests (1 ≤ m ≤ 5000). - The next `m` lines contain five integers each: `x1 y1 x2 y2 t`, where: - `(x1, y1)` are the coordinates of the start location (1 ≤ x1, y1 ≤ n). - `(x2, y2)` are the coordinates of the end location (1 ≤ x2, y2 ≤ n). - `t` is the maximum delivery time (1 ≤ t ≤ 2000). # Output - Print a single integer, the maximum number of delivery requests that can be satisfied. # Example Input ``` 3 3 1 1 2 2 2 2 2 3 3 2 1 1 3 3 4 ``` Output ``` 2 ``` # Explanation For the given input: - The first request can be satisfied as the delivery vehicle can move from (1,1) to (2,2) within the given time of 2. - The second request can be satisfied as the delivery vehicle can move from (2,2) to (3,3) within the given time of 2. - The third request cannot be satisfied in parallel with the first or the second due to the delivery times overlapping or being infeasible simultaneously. The maximum number of requests that can be satisfied is 2. # Constraints - The delivery vehicle can only handle one delivery at a time. - Each delivery request specifies a specific time limit to reach the destination. - You can use a greedy approach or dynamic programming to solve this problem efficiently.","solution":"def max_delivery_requests(n, m, requests): def bfs(x1, y1, x2, y2): queue = [(x1, y1, 0)] visited = set() while queue: x, y, d = queue.pop(0) if (x, y) == (x2, y2): return d for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 1 <= nx <= n and 1 <= ny <= n and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, d + 1)) return float(\'inf\') requests_with_time = [] for r in requests: x1, y1, x2, y2, t = r actual_time = bfs(x1, y1, x2, y2) if actual_time <= t: requests_with_time.append((x1, y1, x2, y2, t, actual_time)) # Sort by end time to maximize the number of requests we can satisfy requests_with_time.sort(key=lambda x: (x[4], x[5])) end_time = -1 count = 0 for x1, y1, x2, y2, t, actual_time in requests_with_time: if actual_time > end_time: end_time = actual_time count += 1 return count"},{"question":"You are given an integer array `nums`. Your task is to return a new array such that each element `i` of the new array is the product of all the numbers in the original array except the one at `i`. For example, given: ``` nums = [1,2,3,4] ``` You should return: ``` [24,12,8,6] ``` To achieve this, you **must not** use division and should complete it in `O(n)` time complexity. ------ Input ------ - The first line of the input contains a single integer `T` denoting the number of test cases. - For each test case: - The first line contains an integer `N`, the size of the array `nums`. - The second line contains `N` integers, denoting the elements of the array `nums`. ------ Output ------ - For each test case, output a single line containing `N` integers that represent the required new array. ------ Constraints ------ - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 10^5 - −30 ≤ nums[i] ≤ 30 ------ Sample Input ------ ``` 2 4 1 2 3 4 3 5 6 7 ``` ------ Sample Output ------ ``` 24 12 8 6 42 35 30 ```","solution":"def product_except_self(nums): Given an array nums, returns a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. n = len(nums) output = [1] * n # Generate prefix products prefix_product = 1 for i in range(n): output[i] = prefix_product prefix_product *= nums[i] # Generate suffix products and multiply with prefix products suffix_product = 1 for i in range(n - 1, -1, -1): output[i] *= suffix_product suffix_product *= nums[i] return output def solve(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] nums = test_cases[i][1] result = product_except_self(nums) results.append(result) return results"},{"question":"Create a rectangular frame which has a height of H cm and a width of W cm. The frame should be drawn with \'#\' symbols, and the inside of the frame should be empty spaces (\' \'). For example, the following figure shows a frame which has a height of 4 cm and a width of 6 cm. # # # # Constraints * 1 ≤ H ≤ 300 * 1 ≤ W ≤ 300 Input The input consists of multiple datasets. Each dataset consists of two integers H and W separated by a single space. The input ends with two 0 (when both H and W are zero). Output For each dataset, print the rectangular frame made of \'#\' and \' \'. Print a blank line after each dataset. Example Input 3 4 5 6 3 3 2 2 1 1 0 0 Output # # # # # # # # # # # # #","solution":"def draw_frame(H, W): if H == 0 and W == 0: return top_bottom = \'#\' * W middle = \'#\' + \' \' * (W - 2) + \'#\' frame = [top_bottom] for i in range(1, H-1): frame.append(middle) if H > 1: frame.append(top_bottom) return frame def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') results = [] for line in data: H, W = map(int, line.split()) if H == 0 and W == 0: break frame = draw_frame(H, W) results.append(\'n\'.join(frame)) if results: print(\'nn\'.join(results)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a 2D grid of size `m x n`, where each cell is either `W` (represents water) or `L` (represents land). An island is a group of `L`s (land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. Return the number of islands. Example 1: Input: grid = [ [\\"L\\",\\"L\\",\\"W\\",\\"W\\",\\"W\\"], [\\"L\\",\\"L\\",\\"W\\",\\"W\\",\\"L\\"], [\\"W\\",\\"W\\",\\"L\\",\\"W\\",\\"L\\"], [\\"W\\",\\"W\\",\\"W\\",\\"L\\",\\"L\\"] ] Output: 3 Example 2: Input: grid = [ [\\"L\\",\\"L\\",\\"L\\",\\"W\\",\\"W\\"], [\\"L\\",\\"W\\",\\"L\\",\\"W\\",\\"L\\"], [\\"L\\",\\"L\\",\\"L\\",\\"W\\",\\"W\\"], [\\"W\\",\\"W\\",\\"W\\",\\"W\\",\\"W\\"] ] Output: 2 Constraints: 1 <= grid.length <= 300 1 <= grid[0].length <= 300 grid[i][j] is either \'L\' or \'W\'.","solution":"def num_islands(grid): Returns the number of islands in the given 2D grid. if not grid: return 0 def dfs(grid, r, c): if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == \'W\': return # Mark the cell as visited by setting it to \'W\' grid[r][c] = \'W\' # Visit all 4 adjacent cells dfs(grid, r+1, c) dfs(grid, r-1, c) dfs(grid, r, c+1) dfs(grid, r, c-1) count = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == \'L\': count += 1 dfs(grid, r, c) return count"},{"question":"You are given a string representing a mathematical expression containing positive integers and the operators `+`, `-`, `*`, `/`. Your task is to evaluate the expression and return the result as an integer. The operators in the string follow the standard precedence rules: multiplication and division have higher precedence over addition and subtraction. All operations are assumed to be integer operations (e.g., division should truncate towards zero). **Examples** ```python evaluate(\\"3+5*2\\") # returns 13 evaluate(\\"10+2*6\\") # returns 22 evaluate(\\"100*2+12\\") # returns 212 evaluate(\\"100*(2+12)\\") # returns 1400 evaluate(\\"100*(2+12)/14\\") # returns 100 (integer division) evaluate(\\"2-3/5\\") # returns 2 ``` **Note**: The input expression may contain nested parentheses. There are no spaces in the expression. Implement the function as follows: ```python def evaluate(expression: str) -> int: pass ``` Good luck!","solution":"def evaluate(expression: str) -> int: Evaluates a mathematical expression and returns the result as an integer. The expression may contain integers and the operators \'+\', \'-\', \'*\', \'/\' and parentheses. def calculate(tokens): total = 0 current_number = 0 op = \\"+\\" stack = [] for token in tokens: if token.isdigit(): current_number = current_number * 10 + int(token) if not token.isdigit() and token != \\" \\" or token == tokens[-1]: if op == \\"+\\": stack.append(current_number) elif op == \\"-\\": stack.append(-current_number) elif op == \\"*\\": stack[-1] *= current_number elif op == \\"/\\": stack[-1] = int(stack[-1] / current_number) op = token current_number = 0 total = sum(stack) return total def parse_expression(expression): tokens = [] number = \\"\\" for char in expression: if char.isdigit(): number += char else: if number: tokens.append(number) number = \\"\\" tokens.append(char) if number: tokens.append(number) return tokens def helper(s): stack = [] tokens = parse_expression(s) i = 0 while i < len(tokens): if tokens[i] != \')\': stack.append(tokens[i]) else: sub_expr = [] while stack and stack[-1] != \'(\': sub_expr.append(stack.pop()) stack.pop() # remove \'(\' stack.append(str(calculate(sub_expr[::-1]))) i += 1 final_value = calculate(stack) return final_value return helper(expression)"},{"question":"Treasure Hunt Three explorers, Alice, Bob, and Charlie, are out on a treasure hunt. They have a list of locations where treasures might be hidden. Each location on the list can have a treasure or might be empty. Each explorer checks each location and reports whether they found a treasure or not. The explorers decide that they will mark a location as having a treasure if at least two of them confirm there is a treasure at that location. Given the reports of Alice, Bob, and Charlie for each location, determine the number of locations that will be marked as having treasures. # Input The first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of locations. Then n lines follow, each containing three integers, either 0 or 1. If the first integer in the line is 1, it means Alice found a treasure at that location, otherwise, she didn\'t. The second integer represents Bob\'s report, and the third integer represents Charlie\'s report. The integers in each line are separated by spaces. # Output Print a single integer — the number of locations that will be marked as having treasures. # Examples Input 4 1 1 0 0 1 0 1 1 1 0 0 0 Output 2 Input 3 1 0 0 1 1 0 0 1 1 Output 2 # Note In the first example, the explorers will mark the first and third locations as having treasures because at least two of them confirmed finding treasures there (Alice and Bob for the first location, and all three for the third location). The second and fourth locations will not be marked because fewer than two explorers confirmed them. In the second example, the explorers will mark the first and second locations as having treasures because at least two of them confirmed finding treasures there (Alice for the first location, Alice and Bob for the second, and Bob and Charlie for the third).","solution":"def count_treasure_locations(n, reports): Counts the number of locations marked as having treasures. Args: n (int): Number of locations. reports (list of list of int): List of n reports, each containing three integers. Returns: int: The number of locations marked as having treasures. count = 0 for report in reports: if sum(report) >= 2: count += 1 return count"},{"question":"You are given an array of integers A of size N. Find the length of the longest subarray with all elements divisible by a given integer K. Input The first line contains two integers N and K. The second line contains N integers denoting the elements of the array A. Output Output one integer - the length of the longest subarray where all elements are divisible by K. Constraints 1 ≤ N ≤ 1000000 1 ≤ A[i] ≤ 10^9 1 ≤ K ≤ 1000 SAMPLE INPUT 8 3 3 6 9 2 18 21 4 12 SAMPLE OUTPUT 3","solution":"def longest_subarray_divisible_by_k(n, k, a): max_length = 0 current_length = 0 for num in a: if num % k == 0: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 0 if current_length > max_length: max_length = current_length return max_length # Sample Input, Output # Input: 8 3 # [3, 6, 9, 2, 18, 21, 4, 12] # Output: 3 print(longest_subarray_divisible_by_k(8, 3, [3, 6, 9, 2, 18, 21, 4, 12]))"},{"question":"Tom loves writing code in his favorite programming language. To improve his coding skills, he has decided to take up the challenge of writing a special compression algorithm to compress text data efficiently. His goal is to encode repeated characters using counts to reduce the length of the string. For example, given the input string \\"aaabbcccc\\", it can be compressed to \\"a3b2c4\\". If a character appears only once, it should remain as is without a count. The compressed string should always be shorter than or equal to the original string. If compressing the string does not reduce its length, the algorithm should return the original string instead. Can you help Tom implement this compression algorithm? -----Input----- The first line contains an integer, t (1 leq t leq 100), the number of test cases. This is followed by t lines, each containing a string s that consists of lowercase letters and has a length between 1 and 1000 (inclusive). -----Output----- For each test case, output a single line containing the compressed string or the original string if the compressed version is not shorter. -----Examples----- Sample Input 1: 3 aaabbcccc abcd aabbccdd Sample Output 1: a3b2c4 abcd aabbccdd","solution":"def compress_string(s): compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: if count == 1: compressed.append(s[i-1]) else: compressed.append(f\\"{s[i-1]}{count}\\") count = 1 # Append the last character or sequence if count == 1: compressed.append(s[-1]) else: compressed.append(f\\"{s[-1]}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s def compress_test_cases(t, test_cases): return [compress_string(s) for s in test_cases]"},{"question":"You are given a string consisting of both lowercase and uppercase letters. Your task is to transform the string in such a way that all uppercase letters are converted to their corresponding lowercase form, and all lowercase letters are converted to their corresponding uppercase form. Write a function that performs this transformation on the given string. ------ Input: ------ - The first line will contain T, the number of test cases. - Each of the next T lines contains one string S to be transformed. ------ Output: ------ For each test case, output the transformed string. ------ Constraints : ------ 1 ≤ T ≤ 100 1 ≤ text{length of } S ≤ 100 ------ Sample Input 1 ------ 3 Hello WORLD cOdInG ------ Sample Output 1 ------ hELLO world CoDiNg","solution":"def transform_string(s): Transforms the given string `s` by swapping lowercase and uppercase letters. Args: s (str): The string to transform. Returns: str: The transformed string. return s.swapcase() def process_test_cases(T, test_cases): Processes the test cases and returns the list of transformed strings. Args: T (int): Number of test cases. test_cases (list of str): List of strings to be transformed. Returns: list of str: List of transformed strings. return [transform_string(s) for s in test_cases]"},{"question":"You are given an array of integers and an integer k. Your task is to find the maximum sum of any contiguous subarray of size k. If the array length is less than k, return 0. Your algorithm\'s runtime complexity must be in the order of O(n). Example 1: Input: nums = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: Subarray with maximum sum is [5, 1, 3]. Example 2: Input: nums = [2, 3, 4, 1, 5], k = 2 Output: 7 Explanation: Subarray with maximum sum is [3, 4].","solution":"def max_sum_subarray(nums, k): Returns the maximum sum of any contiguous subarray of size k. If the length of the array is less than k, return 0. n = len(nums) if n < k: return 0 max_sum = float(\'-inf\') # Start with the worst possible value current_sum = 0 # Calculate the sum of the first k elements for i in range(k): current_sum += nums[i] # Initialize max_sum with the sum of the first k elements max_sum = current_sum # Iterate over the rest of the array for i in range(k, n): # Slide the window: subtract the element going out and add the new element current_sum += nums[i] - nums[i-k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Alice and Bob are playing a game with a sequence of integers. The game consists of the following rules: 1. Alice always starts first and can pick any integer from the sequence. 2. Bob then picks the next integer not yet picked that is either to the left or right of Alice\'s picked integer. 3. Alice and Bob take alternate turns picking integers in this fashion. 4. The game continues until all integers are picked. The objective of the game is to maximize the sum of numbers picked by each player. Since both Alice and Bob play optimally, they will always pick numbers to maximize their own sum. Alice now faces this challenge and wants to know the maximum sum she can achieve if both play optimally. You need to write a program to help Alice determine her maximum possible sum. Input The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of integers in the sequence. The next line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) representing the sequence of integers. Output Output an integer, representing the maximum sum Alice can achieve if both players play optimally. Example Input 6 3 9 1 2 7 4 Output 15 Explanation Alice can start by picking 9, Bob picks 7 (the largest available adjacent number to 9), then Alice picks 4, Bob picks 3, Alice picks 2, and Bob picks 1. So, Alice\'s total sum is 9 + 4 + 2 = 15, which is the maximum sum she can achieve under optimal play.","solution":"def max_sum_alice(n, sequence): # Helper function for memoizing the result def dp(left, right, turn, memo): if left > right: return 0 if memo[left][right][turn] != -1: return memo[left][right][turn] if turn == 0: # Alice\'s turn pick_left = sequence[left] + dp(left + 1, right, 1, memo) pick_right = sequence[right] + dp(left, right - 1, 1, memo) result = max(pick_left, pick_right) else: # Bob\'s turn pick_left = dp(left + 1, right, 0, memo) pick_right = dp(left, right - 1, 0, memo) result = min(pick_left, pick_right) memo[left][right][turn] = result return result memo = [[[-1, -1] for _ in range(n)] for _ in range(n)] return dp(0, n - 1, 0, memo) # Example usage: # n = 6 # sequence = [3, 9, 1, 2, 7, 4] # print(max_sum_alice(n, sequence)) # Output: 15"},{"question":"Given a string s and a pattern p, determine if the string s matches the pattern p exactly. The pattern p can include two special characters: - `.` which matches any single character. - `*` which matches zero or more of the preceding element. For example: - The string \\"aab\\" matches the pattern \\"c*a*b\\", where `c*` can be ignored, `a*` means we can have two \'a\'s, and finally a \'b\'. - The string \\"mississippi\\" does not match the pattern \\"mis*is*p*.\\". Note: - The input string and the pattern will only contain lowercase letters and the characters `.` and `*`. - The length of input string and pattern can reach up to 1000. **Function Signature:** ```python def is_match(s: str, p: str) -> bool: ``` **Input/Output:** - **Input:** - `s` (A string of length up to 1000) - `p` (A string of length up to 1000 that includes lowercase letters and characters `.` and `*`) - **Output:** - Return `True` if string `s` matches pattern `p` exactly, otherwise return `False`. **Example:** ``` Input: s = \\"aa\\", p = \\"a\\" Output: False Input: s = \\"aa\\", p = \\"a*\\" Output: True Input: s = \\"ab\\", p = \\".*\\" Output: True Input: s = \\"aab\\", p = \\"c*a*b\\" Output: True Input: s = \\"mississippi\\", p = \\"mis*is*p*.\\" Output: False ```","solution":"def is_match(s: str, p: str) -> bool: Returns True if the string s matches the pattern p exactly, otherwise returns False. The pattern p can include \'.\' which matches any single character and \'*\' which matches zero or more of the preceding element. # Dynamic programming table dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] dp[0][0] = True # Both s and p are empty # Deals with patterns with \'*\' at the beggining for j in range(2, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 2] for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == s[i - 1] or p[j - 1] == \'.\': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i][j - 2] if p[j - 2] == s[i - 1] or p[j - 2] == \'.\': dp[i][j] = dp[i][j] or dp[i - 1][j] return dp[len(s)][len(p)]"},{"question":"You are given a textual representation of a grid in the form of a list of strings. Each string in the list represents a row in the grid. Each character in a string represents a cell in that row. The characters can be: - \'.\' representing an empty cell, - \'#\' representing a wall, and - \'S\' representing the starting position. Your task is to determine if there is a path to any edge of the grid starting from \'S\' without moving through any walls. You can only move horizontally or vertically, not diagonally. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. For each test case: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid, respectively. - The next n lines each contain a string of length m, representing the grid. Output For each test case, output \\"YES\\" if there is a path from \'S\' to any edge of the grid, otherwise output \\"NO\\". Example Input 3 3 3 .#. .S. ... 4 4 #S.# #..# 5 5 ..... .S.#. .#... ...#. ..... Output YES NO YES Explanation In the first test case, there is a path from \'S\' to the top edge (position (0, 1)). In the second test case, there is no possible path from \'S\' to any edge of the grid. In the third test case, there is a path from \'S\' to any of the surrounding edges starting by going downwards.","solution":"def can_reach_edge(t, grids): Given a list of grid configurations, determine if there is a path from \'S\' to any edge of the grid. results = [] def is_valid(x, y, n, m, grid, visited): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' and not visited[x][y] def dfs(x, y, n, m, grid, visited): if x == 0 or y == 0 or x == n - 1 or y == m - 1: return True visited[x][y] = True # List of possible moves (right, left, down, up) moves = [(0, 1), (0, -1), (1, 0), (-1, 0)] for move in moves: nx, ny = x + move[0], y + move[1] if is_valid(nx, ny, n, m, grid, visited) and dfs(nx, ny, n, m, grid, visited): return True return False for grid in grids: n, m = len(grid), len(grid[0]) visited = [[False] * m for _ in range(n)] start_x, start_y = next((i, j) for i in range(n) for j in range(m) if grid[i][j] == \'S\') if dfs(start_x, start_y, n, m, grid, visited): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"John wants to set up a special lighting system for his garden. The garden is represented as a one-dimensional array, where each element represents a section of the garden and the value at each section represents the height of the plant in that section. John has a number of lights, each of which illuminates the section it is placed in as well as the two adjacent sections (one to the left and one to the right). John wants to place the minimum number of lights such that all sections of the garden are illuminated. Calculate the minimum number of lights needed to achieve this. Input: - The first line of input contains an integer t, the number of test cases. - Each of the next t lines describes a test case, which contains: - The first line is an integer n, the number of sections in the garden. - The second line contains n space-separated integers representing the height of the plants in each section. Output: - Output t lines, each containing the minimum number of lights needed for the corresponding test case. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 10^6 1 ≤ height of plants (A[i]) ≤ 10^5 SAMPLE INPUT: 2 6 2 3 2 1 2 1 5 3 1 4 1 5 SAMPLE OUTPUT: 2 2 Explanation of Sample: In the first test case, John can place a light at sections 2 and 5 to illuminate the entire garden (sections 1 to 6). In the second test case, placing lights at sections 2 and 5 will cover all the sections (sections 1 to 5).","solution":"def min_lights_needed(t, test_cases): results = [] for i in range(t): n, garden = test_cases[i] lights = 0 i = 0 while i < n: # Place the light at the current position covering i, i+1, i+2 lights += 1 # Move to the next segment requiring a light i += 3 results.append(lights) return results"},{"question":"Given an integer array A of size N, along with an integer K, your task is to write a function that returns the sum of the maximum unique elements of every contiguous subarray of length K from the given array. If K is greater than N, return -1. Example 1: Input: N = 5 A = [1, 2, 3, 4, 5] K = 3 Output: 24 Explanation: The contiguous subarrays of length 3 are: [1, 2, 3] with unique maximum 3 [2, 3, 4] with unique maximum 4 [3, 4, 5] with unique maximum 5 The sum is 3 + 4 + 5 = 12 Example 2: Input: N = 7 A = [4, 4, 2, 5, 5, 3, 3] K = 4 Output: 14 Explanation: The contiguous subarrays of length 4 are: [4, 4, 2, 5] with unique maximum 5 [4, 2, 5, 5] with unique maximum 5 [2, 5, 5, 3] with unique maximum 5 [5, 5, 3, 3] with unique maximum 5 The sum is 5 + 5 + 5 + 5 = 20 Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxUniqueSum() which takes N, a list A and an integer K as input parameters and returns an integer representing the sum of maximum unique elements of every contiguous subarray of length K. Expected Time Complexity: O(N) Expected Auxiliary Space: O(K) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ 10^{5} 1 ≤ A[i] ≤ 10^{3}","solution":"def maxUniqueSum(N, A, K): if K > N: return -1 max_sum = 0 unique_elements = set() current_sum = 0 for i in range(K): unique_elements.add(A[i]) current_sum = max(current_sum, A[i]) max_sum += current_sum for i in range(K, N): unique_elements.discard(A[i - K]) unique_elements.add(A[i]) current_sum = max(unique_elements) max_sum += current_sum return max_sum"},{"question":"A software company has designed a data compression algorithm which processes a string S of N characters. The algorithm works by repeatedly finding and encoding the longest contiguous substring of identical characters. Specifically, for a given string S, the algorithm identifies the longest contiguous substring made up of the same character. This substring is then replaced with an encoding of the form \\"char[count]\\" where \\"char\\" is the character and \\"count\\" is the length of the contiguous substring. This process is repeated until no further encodings can be performed. Your task is to implement the compression algorithm described above. For example, for the input string \\"aaabaaaa\\", the longest contiguous substring of identical characters initially is \\"aaa\\". This substring should be replaced with \\"a[3]\\", resulting in the intermediate string \\"a[3]baaaa\\". The process continues until no further encoding is possible. Input The input consists of a single string S of length N where 1 ≤ N ≤ 1000. The string S contains only lowercase English letters. Output Output the string S after the compression algorithm has been applied until no further reduction is possible. Example Input aaabaaaa Output a[3]ba[4] Input abcde Output abcde","solution":"def compress_string(S): Compresses the string S by repeatedly encoding the longest contiguous substrings of identical characters. def find_longest_run(s): max_char = \'\' max_count = 0 current_char = \'\' current_count = 0 for char in s: if char == current_char: current_count += 1 else: if current_count > max_count: max_char = current_char max_count = current_count current_char = char current_count = 1 if current_count > max_count: max_char = current_char max_count = current_count return max_char, max_count while True: char, count = find_longest_run(S) if count <= 1: break S = S.replace(char*count, f\\"{char}[{count}]\\", 1) return S"},{"question":"<!-- Problem F --> Library Inventory Management You are tasked with developing a program to aid in the management of a library\'s book inventory. The library wants to keep a record of the books they own, including the titles, authors, publication years, and genres. Your program must handle various types of operations: adding new books, searching for books based on author, and listing all books published within a specified range of years. Input The input will begin with an integer `q` (1 ≤ q ≤ 1000) representing the number of queries. Each of the next `q` lines will contain a query in one of the following formats: 1. `add <title> <author> <year> <genre>` - Add a new book to the inventory. - `<title>`: a string (1 ≤ length ≤ 100) representing the title of the book. - `<author>`: a string (1 ≤ length ≤ 100) representing the author of the book. - `<year>`: an integer (1000 ≤ year ≤ 9999) representing the year the book was published. - `<genre>`: a string (1 ≤ length ≤ 100) representing the genre of the book. 2. `search <author>` - Search for all books by a specific author. - `<author>`: a string (1 ≤ length ≤ 100) representing the author to search for. 3. `list_range <start_year> <end_year>` - List all books published between the `start_year` and `end_year` (inclusive). - `<start_year>`: an integer (1000 ≤ start_year ≤ 9999). - `<end_year>`: an integer (1000 ≤ end_year ≤ 9999). Output The output will depend on the type of query: 1. For an `add` query, output nothing. 2. For a `search` query, output each book in the format `\\"<title> by <author> (<year>) - <genre>\\"`, one per line. If no books are found, output \\"No books found\\". 3. For a `list_range` query, output each book in the format `\\"<title> by <author> (<year>) - <genre>\\"`, one per line. If no books are found, output \\"No books found\\". Books should be listed in alphabetical order by title. If multiple books have the same title, order them by the author\'s name. Sample Input 7 add \\"To Kill a Mockingbird\\" \\"Harper Lee\\" 1960 \\"Fiction\\" add \\"1984\\" \\"George Orwell\\" 1949 \\"Dystopian\\" add \\"Brave New World\\" \\"Aldous Huxley\\" 1932 \\"Science Fiction\\" list_range 1950 1965 search \\"George Orwell\\" add \\"Animal Farm\\" \\"George Orwell\\" 1945 \\"Political Satire\\" search \\"George Orwell\\" Sample Output To Kill a Mockingbird by Harper Lee (1960) - Fiction 1984 by George Orwell (1949) - Dystopian No books found 1984 by George Orwell (1949) - Dystopian Animal Farm by George Orwell (1945) - Political Satire","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title, author, year, genre): self.books.append({\\"title\\": title, \\"author\\": author, \\"year\\": year, \\"genre\\": genre}) def search_books(self, author): results = [book for book in self.books if book[\\"author\\"] == author] results = sorted(results, key=lambda x: x[\\"title\\"]) if results: return \\"n\\".join(f\'{book[\\"title\\"]} by {book[\\"author\\"]} ({book[\\"year\\"]}) - {book[\\"genre\\"]}\' for book in results) else: return \\"No books found\\" def list_books_in_range(self, start_year, end_year): results = [book for book in self.books if start_year <= book[\\"year\\"] <= end_year] results = sorted(results, key=lambda x: (x[\\"title\\"], x[\\"author\\"])) if results: return \\"n\\".join(f\'{book[\\"title\\"]} by {book[\\"author\\"]} ({book[\\"year\\"]}) - {book[\\"genre\\"]}\' for book in results) else: return \\"No books found\\""},{"question":"Problem B: Minimum Number of Platforms Given the arrival and departure times of trains, your task is to write a function that determines the minimum number of platforms required for the railway station so that no train has to wait. Input The first line contains an integer n (2 <= n <= 100,000), representing the number of trains. The next n lines contain two space-separated integers \\"arrival\\" and \\"departure\\" (0000 <= arrival, departure <= 2359), representing the arrival and departure times of each train in 24-hour format. Output Print a single integer representing the minimum number of platforms required. Examples Input 6 900 910 940 1200 950 1120 1100 1130 1500 1900 1800 2000 Output 3 Input 3 900 940 940 950 950 1100 Output 2","solution":"def minimum_platforms(n, times): events = [] for arrival, departure in times: events.append((arrival, \'arr\')) events.append((departure, \'dep\')) events.sort() max_platforms = 0 current_platforms = 0 for event in events: if event[1] == \'arr\': current_platforms += 1 max_platforms = max(max_platforms, current_platforms) else: current_platforms -= 1 return max_platforms"},{"question":"You are given an array a of n positive integers. Your task is to find a subsequence of a, represented by b, such that the elements of b are arranged in strictly increasing order, and the product of the elements in b is maximized. A subsequence of an array is a sequence that can be derived from the array by deleting some or none of the elements without changing the order of the remaining elements. -----Input----- The first line contains an integer n (1 leq n leq 10^5). The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9). -----Output----- Output a single integer, indicating the maximal product of the elements in a subsequence of a that forms a strictly increasing order. -----Examples----- Input 4 3 1 4 1 Output 12 Input 5 1 5 2 6 3 Output 30 -----Note----- In the first example, the subsequence [3, 4] is in strictly increasing order, and its product is 3 times 4 = 12. In the second example, the subsequence [1, 5, 6] is in strictly increasing order, and its product is 1 times 5 times 6 = 30.","solution":"def max_increasing_product(n, a): Returns the maximum product of a subsequence of a that forms a strictly increasing order. Args: n -- int, the length of the array a. a -- list of int, the array of positive integers. Returns: int, the maximum product of a subsequence in strictly increasing order. if n == 0: return 0 # Initialize the DP array where dp[i] stores the maximum product subsequence ending at index i dp = [0] * n for i in range(n): dp[i] = a[i] # Iterate over each pair of elements to update the dp array for i in range(1, n): for j in range(i): if a[j] < a[i]: dp[i] = max(dp[i], dp[j] * a[i]) return max(dp)"},{"question":"Given an array of integers, return a new array where each element is the sum of itself and all the previous elements in the original array. This is known as the \\"running sum\\" of the input array. For example: ``` Input: [1, 2, 3, 4] Output: [1, 3, 6, 10] Explanation: runningSum[0] = 1 runningSum[1] = 1 + 2 = 3 runningSum[2] = 1 + 2 + 3 = 6 runningSum[3] = 1 + 2 + 3 + 4 = 10 ``` Additional examples: ``` Input: [1, 1, 1, 1, 1] Output: [1, 2, 3, 4, 5] Input: [3, 1, 4, 1, 5] Output: [3, 4, 8, 9, 14] ``` Write a function that takes an array of integers and returns the running sum.","solution":"def running_sum(nums): Returns the running sum of the input array. Params: nums (List[int]): The input array of integers. Returns: List[int]: The running sum array. if not nums: return [] running_sum_array = [nums[0]] for i in range(1, len(nums)): running_sum_array.append(running_sum_array[i-1] + nums[i]) return running_sum_array"},{"question":"Given a list of integers, your task is to rearrange the elements such that they form the highest possible number. Output the number as a string to avoid integer overflow issues. Example 1: Input: [3, 30, 34, 5, 9] Output: \\"9534330\\" Explanation: The possible numbers from different arrangements are: 3, 30, 34, 5, 9 -> 9534330 3, 30, 34, 9, 5 -> 9534305 5, 3, 30, 34, 9 -> 5343... etc. The highest number that can be formed is \\"9534330\\". Example 2: Input: [1, 20, 23, 4, 8] Output: \\"8423201\\" Explanation: The highest number that can be formed from the arrangements is \\"8423201\\". Example 3: Input: [10, 2] Output: \\"210\\" Explanation: The possible numbers are 210 and 102. The highest number is \\"210\\". Your Task: You don\'t need to read input or print anything. Complete the function `largestNumber` that takes a list of integers as input and returns a string representing the largest possible number that can be formed. Expected Time Complexity: O(N log N) where N is the number of integers in the list (due to sorting). Expected Auxiliary Space: O(N) for storing the result. Constraints: - The number of integers will not exceed 100. - Each integer is in the range [0, 1000].","solution":"from typing import List def largestNumber(nums: List[int]) -> str: Rearranges the elements of the list to form the highest possible number and returns it as a string. # To convert numbers to strings for easier manipulation nums_str = map(str, nums) # Sort with a custom comparator nums_str = sorted(nums_str, key=lambda x: x*10, reverse=True) # Form the largest number by concatenating the sorted strings largest_num = \'\'.join(nums_str) # Edge case: Handle leading \'0\'s by stripping them except the last possible \'0\' if largest_num[0] == \'0\': return \'0\' return largest_num"},{"question":"Description: In this Kata, you will be given an array of integers and a target value. Your task is to determine if there are three distinct elements in the array that sum up to the target value. # Requirements: * Write a function `find_triplet(array, target)` that takes an array of integers and an integer target. * The function should return a boolean value `True` if there exists a triplet in the array such that the sum of the three numbers is equal to the target value, otherwise return `False`. * You may assume that each input array will have at least three elements. # Examples: ```python find_triplet([2, 7, 4, 0, 9, 5, 1, 3], 6) # Returns: True # Because 2 + 4 + 0 = 6 find_triplet([1, 2, 3, 4, 5], 10) # Returns: True # Because 2 + 3 + 5 = 10 find_triplet([1, 2, 3, 4, 5], 20) # Returns: False # Because no combination of three numbers sums up to 20 find_triplet([12, 3, 4, 1, 6, 9], 24) # Returns: True # Because 12 + 3 + 9 = 24 find_triplet([-1, 2, 1, -4, 3], 0) # Returns: True # Because -1 + 2 - 1 = 0 (using different positions even though -1 appears twice in values) ``` # Note: * Each triplet must consist of three different elements from the array. * The function must handle both positive and negative numbers. * The function should aim for an efficient solution in terms of time complexity and not just a brute-force approach.","solution":"def find_triplet(array, target): Returns True if there exists a triplet in the array such that the sum of the three numbers is equal to the target value. Returns False otherwise. array.sort() n = len(array) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = array[i] + array[left] + array[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Write a function that takes an array of numbers and returns a new array where each element is the sum of itself and all previous elements. This is known as a running total or cumulative sum. For example, given the array [1, 2, 3, 4], the function should return [1, 3, 6, 10]. Your task is to implement this function to produce the desired cumulative sum array. # Example ```python running_total([1, 2, 3, 4]) -> [1, 3, 6, 10] running_total([4, 0, 2, 5, 6]) -> [4, 4, 6, 11, 17] running_total([-2, 3, -1, 5]) -> [-2, 1, 0, 5] ``` # Constraints: - The input array will only contain integers. - The array might be empty, in which case the function should return an empty array. - The function should maintain a time complexity of O(n).","solution":"def running_total(arr): Returns a new array where each element is the sum of itself and all previous elements. :param arr: List of integers :return: List of integers representing the running total total = 0 result = [] for num in arr: total += num result.append(total) return result"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, the following are palindromes: * \\"A man, a plan, a canal, Panama!\\" * \\"madam\\" * \\"racecar\\" * \\"Was it a car or a cat I saw?\\" However, the following are not palindromes: * \\"hello\\" * \\"world\\" * \\"python\\" Your task is to complete the `Palindrome` object which has 3 functions: * `is_palindrome(s)`: that checks if the given string `s` is a palindrome or not. * `longest_palindrome_substring(s)`: that finds and returns the longest palindromic substring within the given string `s`. * `count_palindrome_substrings(s)`: that counts and returns the number of palindromic substrings within the given string `s`. Each function should consider only alphanumeric characters and ignore case for palindromes. Examples ```python Palindrome.is_palindrome(\\"A man, a plan, a canal, Panama!\\") # True Palindrome.longest_palindrome_substring(\\"babad\\") # \\"bab\\" Palindrome.count_palindrome_substrings(\\"abba\\") # 6 ``` Explanation for the examples: - `is_palindrome`: The phrase \\"A man, a plan, a canal, Panama!\\" is a palindrome when spaces, punctuation, and capitalization are ignored. - `longest_palindrome_substring`: Within the string \\"babad\\", the longest palindromic substring is \\"bab\\" or \\"aba\\". Either of them is acceptable. - `count_palindrome_substrings`: The string \\"abba\\" contains the palindromic substrings \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", and \\"abba\\" which totals to 6.","solution":"import re class Palindrome: @staticmethod def is_palindrome(s): # Clean the string to ignore non-alphanumeric characters and make it case insensitive cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned_s == cleaned_s[::-1] @staticmethod def longest_palindrome_substring(s): n = len(s) if n == 0: return \\"\\" # Table to store results of subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes start = 0 max_length = 1 for i in range(n): dp[i][i] = True # Check for sub-strings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return s[start:start + max_length] @staticmethod def count_palindrome_substrings(s): n = len(s) count = 0 dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True count += 1 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True count += 1 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True count += 1 return count"},{"question":"Write a program that takes an array of integers and finds the length of the longest subarray with all distinct elements. For example, if the input array is [1, 2, 3, 1, 4, 5, 3, 2, 1], the output would be 5 because the longest subarray with all distinct elements is [1, 4, 5, 3, 2]. Example 1: Input: arr[] = {1, 2, 3, 4, 1, 2, 3, 4, 5} Output: 5 Explanation: The longest subarray with all distinct elements is {1, 2, 3, 4, 5} Example 2: Input: arr[] = {1, 1, 1, 1} Output: 1 Explanation: The longest subarray with all distinct elements is {1} as it has only one distinct element. Your Task: You do not need to take any input, as it is accomplished by the driver code. You need to complete the function `longestDistinctSubarray()` that takes an array arr[] and an integer N as parameters and returns the length of the longest subarray with all distinct elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(min(N, R)), where R is the range of input elements. Constraints: 1 ≤ N ≤ 10^{6}","solution":"def longestDistinctSubarray(arr): n = len(arr) if n == 0: return 0 max_len = 0 start = 0 used_chars = {} for i in range(n): if arr[i] in used_chars and start <= used_chars[arr[i]]: start = used_chars[arr[i]] + 1 else: max_len = max(max_len, i - start + 1) used_chars[arr[i]] = i return max_len"},{"question":"The Annual Company Coding Competition is underway, and the final round is a tricky graph-related problem. You need to help the participants by implementing a function that determines the shortest path in a weighted, undirected graph. The participants are given a graph with `n` nodes and `m` edges, represented as an adjacency matrix called `graph`. Each cell of the matrix contains a non-negative integer that indicates the weight of the edge between the nodes, or 0 if there is no edge directly connecting them. The goal is to find the shortest path from a starting node `src` to an ending node `dst`. If no such path exists, return -1. Example: Input: n = 4 m = 5 graph = [[0, 4, 0, 0], [4, 0, 8, 0], [0, 8, 0, 7], [0, 0, 7, 0]] src = 0 dst = 3 Output: 15 Explanation: The shortest path from node 0 to node 3 is 0 -> 1 -> 2 -> 3 with a total weight of 4 + 8 + 7 = 19. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `shortestPath()` which takes integers `n`, `m`, a 2-D array `graph`, and integers `src` and `dst` as input parameters and returns an integer as described above. Constraints: - 1 ≤ n ≤ 1000 - 1 ≤ m ≤ 10000 - 0 ≤ graph[i][j] ≤ 1000 - 0 ≤ src, dst < n - `graph[i][j] == graph[j][i]` - `graph[i][i] == 0`","solution":"import heapq def shortestPath(n, m, graph, src, dst): Finds the shortest path in a weighted undirected graph using Dijkstra\'s algorithm. # Using a priority queue to implement Dijkstra\'s algorithm pq = [(0, src)] # (distance, node) dist = [float(\'inf\')] * n dist[src] = 0 visited = [False] * n while pq: current_distance, current_node = heapq.heappop(pq) if visited[current_node]: continue visited[current_node] = True if current_node == dst: return current_distance for neighbor in range(n): if graph[current_node][neighbor] > 0: distance = current_distance + graph[current_node][neighbor] if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if dist[dst] == float(\'inf\') else dist[dst]"},{"question":"You are given a list of integers. Write a program to find out whether there is a subset of non-consecutive elements in the list that adds up to a given target sum. -----Constraints----- - 1 ≤ N ≤ 20 - -100 ≤ Element Value ≤ 100 - -200 ≤ Target Sum ≤ 200 -----Input----- Input is given from Standard Input in the following format: ``` N lst target_sum ``` - N: an integer representing the number of elements in the list. - lst: a list of N integers separated by spaces. - target_sum: an integer which is the target sum. -----Output----- Print \\"YES\\" if there exists a subset of non-consecutive elements that add up to the target sum, otherwise print \\"NO\\". -----Sample Input----- 5 3 2 5 10 7 15 -----Sample Output----- YES Explanation: One of the subsets which adds up to the target sum 15 is [3, 5, 7].","solution":"def is_subset_sum_possible(n, lst, target_sum): def helper(idx, current_sum): if current_sum == target_sum: return True if idx < 0: return False # Exclude the current element if helper(idx - 1, current_sum): return True # Include the current element (consider only non-consecutive elements) if idx == 0 or idx == 1: if helper(idx - 1, current_sum + lst[idx]): return True elif helper(idx - 2, current_sum + lst[idx]): return True return False if helper(n - 1, 0): return \\"YES\\" return \\"NO\\" # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) lst = list(map(int, data[1:n+1])) target_sum = int(data[n+1]) print(is_subset_sum_possible(n, lst, target_sum))"},{"question":"You are given an integer `n` and a list of `n` integers. Your task is to find and print an integer that appears more than once in the list and has the smallest first occurrence index. If there are multiple such integers, print the one which first appeared earliest in the list. If there is no such integer, print `-1`. Input The input consists of two lines. The first line contains the integer `n` (1 ≤ n ≤ 1000) – the number of integers. The second line contains `n` integers, each integer `a_i` (-1000 ≤ a_i ≤ 1000), separated by a space. Output Output a single integer which is repeated and has the smallest first occurrence index. If there are no repeated integers, print `-1`. Examples Input 5 1 2 3 3 2 Output 3 Input 6 5 5 5 6 7 7 Output 5 Input 4 1 2 3 4 Output -1","solution":"def find_earliest_repeated(n, numbers): Given an integer n and a list of n integers, finds the integer that appears more than once with the smallest first occurrence index. If no repeated integer is found, returns -1. seen = {} for i, num in enumerate(numbers): if num in seen: return num seen[num] = i return -1"},{"question":"A large company has an email system where employees can send messages to each other. Due to the high volume of emails, the company wants to ensure that each email gets a unique identifier (ID). Each email will also have a priority level that determines the order in which the emails should be addressed. Emails with higher priority should be attended to before those with lower priority. In case of equal priority, the email that was received first should be attended to before the email that was received later. You are required to help manage the email system and process the emails in the order described. ------ Input ------ The first line contains a single integer N, the number of operations to follow. The next N lines contain one operation each on a single line. An operation can be of 3 types: 1 p x : Add a new email with priority \'p\' and content \'x\' (p is an integer, x is a string). 2 : Process and remove the email with the highest priority. If multiple emails have the same priority, process the earliest one. 3 : List the content \'x\' of the email with the highest priority without removing it. ------ Output ------ For operation type 2, output the content of the email being processed. For operation type 3, output the content of the highest priority email without removing it. If no emails are available for operations of type 2 or type 3, output \\"No emails\\". ------ Constraints ------ 1 ≤ N ≤ 100000 1 ≤ p ≤ 100 1 ≤ length of x ≤ 100 ----- Sample Input 1 ------ 7 1 5 meeting_schedule 1 10 project_update 3 2 1 7 policy_review 3 2 ----- Sample Output 1 ------ project_update project_update policy_review policy_review ----- Explanation 1 ------ - The first email added has a priority of 5 and content \\"meeting_schedule\\". - The second email added has a priority of 10 and content \\"project_update\\". - The first operation of type 3 outputs \\"project_update\\" since it has the highest priority of 10. - The first operation of type 2 processes and removes \\"project_update\\", since it still has the highest priority of 10. - The third email added has a priority of 7 and content \\"policy_review\\". - The second operation of type 3 outputs \\"policy_review\\" since it has the highest remaining priority of 7. - The second operation of type 2 processes and removes \\"policy_review\\", since it still has the highest remaining priority of 7. This way of managing the emails ensures that the highest priority emails are always addressed first, following the tie-breaking rule of FIFO for emails with the same priority.","solution":"import heapq class EmailSystem: def __init__(self): self.counter = 0 # Counter to maintain the order of insertion self.heap = [] # Min-heap to store emails def add_email(self, p, x): heapq.heappush(self.heap, (-p, self.counter, x)) self.counter += 1 def process_email(self): if not self.heap: return \\"No emails\\" return heapq.heappop(self.heap)[2] def peek_email(self): if not self.heap: return \\"No emails\\" return self.heap[0][2] def manage_emails(n, operations): email_system = EmailSystem() output = [] for operation in operations: op = operation.split() if op[0] == \\"1\\": p = int(op[1]) x = op[2] email_system.add_email(p, x) elif op[0] == \\"2\\": output.append(email_system.process_email()) elif op[0] == \\"3\\": output.append(email_system.peek_email()) return output"},{"question":"Write a function that takes an unsigned 32-bit integer `n` and returns an unsigned 32-bit integer where each bit of `n` is flipped (0 becomes 1 and 1 becomes 0). Assume that: * `n` is an unsigned, 32-bit integer; * the bits are zero-indexed (the least significant bit is position 0). Examples ``` 0 --> 4294967295 (0b0 becomes 0b11111111111111111111111111111111) 5 --> 4294967290 (0b00000000000000000000000000000101 becomes 0b11111111111111111111111111111010) 170 --> 4294967125 (0b00000000000000000000000010101010 becomes 0b11111111111111111111111101010101) ```","solution":"def flip_bits(n): Returns the bitwise complement of a 32-bit unsigned integer. # 0xFFFFFFFF corresponds to the 32-bit mask with all bits set to 1 return n ^ 0xFFFFFFFF"},{"question":"You\'ve just joined a new project team tasked with working on a file system that closely resembles a Unix-like directory system. The file system you are working on is represented by a tree structure where each node is either a directory or a file. Each directory can contain other directories or files, but files cannot contain anything else. You will be given a series of operations that either create a new directory, create a new file, or move an existing node (file or directory) to a new location in the tree. # Input - The first line contains an integer `n` — the number of operations. - The next `n` lines each contain one of three types of operations: 1. `mkdir <path>` — creates a new directory at the given `<path>`. If the directory already exists, do nothing. 2. `mkfile <path>` — creates a new file at the given `<path>`. If the file already exists, do nothing. 3. `move <src_path> <dest_path>` — moves the node at `src_path` to `dest_path`. If `src_path` doesn\'t exist or `dest_path` is a path to a file, do nothing. Paths are given in Unix-like form, starting with `/` for the root directory. Each component of the path represents a directory or a file name and is separated by `/`. For example, `/a/b/c` refers to the node `c` inside directory `b`, which is inside directory `a`, starting from the root directory `/`. # Output - After processing all operations, output the structure of the file system in a hierarchical format. Each directory should be indented according to its depth in the tree. Files should be noted with a preceding `-`. # Example Input ``` 6 mkdir /a mkdir /a/b mkdir /a/b/c mkfile /a/b/c/file1 mkdir /a/b/d move /a/b/c /a/b/d/ ``` Output ``` / a b d c -file1 ``` # Explanation - The first operation creates directory `a` under the root `/`. - The second operation creates directory `b` under `/a`. - The third operation creates directory `c` under `/a/b`. - The fourth operation creates a file `file1` under `/a/b/c`. - The fifth operation creates directory `d` under `/a/b`. - The sixth operation moves the entire directory `c` (along with `file1` inside it) under `/a/b/d`. # Constraints - `1 ≤ n ≤ 10^5` - Path components (directory/file names) will consist only of lowercase English letters and symbols `/`. To implement this task correctly, carefully handle operations in the order provided and maintain the structure correctly while ensuring that the tree hierarchy is properly visualized in the final output.","solution":"class Node: def __init__(self, name, is_file=False): self.name = name self.is_file = is_file self.children = {} def parse_path(path): # Parses the path into components if path == \'/\': return [\'/\'] return path.strip(\'/\').split(\'/\') def find_node(root, path_parts): # Returns the node at the given path and its parent current = root parent = None for part in path_parts: if part in current.children: parent = current current = current.children[part] else: return None, None return current, parent def process_operations(n, operations): root = Node(\'/\') for operation in operations: parts = operation.split() command = parts[0] if command == \'mkdir\': path = parse_path(parts[1]) if path == [\'/\']: continue # root already exists current = root for part in path: if part not in current.children: current.children[part] = Node(part) current = current.children[part] elif command == \'mkfile\': path = parse_path(parts[1]) filename = path.pop() current = root for part in path: if part not in current.children: current.children[part] = Node(part) current = current.children[part] if filename not in current.children: current.children[filename] = Node(filename, is_file=True) elif command == \'move\': src_path = parse_path(parts[1]) dest_path = parse_path(parts[2]) src_node, src_parent = find_node(root, src_path) dest_node, _ = find_node(root, dest_path) if src_node and src_parent and dest_node and not dest_node.is_file: src_parent.children.pop(src_node.name) dest_node.children[src_node.name] = src_node return root def print_tree(node, depth=0): indent = \' \' * depth if node.is_file: print(f\\"{indent}-{node.name}\\") else: print(f\\"{indent}{node.name}\\") for child in sorted(node.children.values(), key=lambda n: n.name): print_tree(child, depth + 1) def process_and_print(n, operations): root = process_operations(n, operations) print_tree(root)"},{"question":"Given an integer n, you need to construct an \\"almost\\" palindrome string of length n. An \\"almost\\" palindrome is defined as a string that becomes a palindrome by modifying at most one of its characters. If there are multiple \\"almost\\" palindrome strings possible, return any one of them. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^4) — the length of the string. It is guaranteed that the sum of n over all test cases does not exceed 10^5. Output For each test case, print a single line containing an \\"almost\\" palindrome string of length n. If there are multiple such strings, output any. Example Input 3 3 4 5 Output aba aaab radar Note In the first test case, \\"aba\\" is a palindrome, which is also an \\"almost\\" palindrome since it requires zero modifications. In the second test case, \\"aaab\\" can be turned into the palindrome \\"aaaa\\" by modifying one character, making it an \\"almost\\" palindrome. In the third test case, \\"radar\\" is already a palindrome, and thus an \\"almost\\" palindrome as well.","solution":"def generate_almost_palindrome(n): Generate an \\"almost\\" palindrome string of length n. if n == 1: return \\"a\\" if n % 2 == 0: # For even length strings, create one mismatched character in the middle s = \\"a\\" * (n - 1) + \\"b\\" return s else: # For odd length strings, create a central character and match the rest half = n // 2 s = \\"a\\" * half + \\"b\\" + \\"a\\" * half return s def almost_palindromes(t, ns): results = [] for n in ns: results.append(generate_almost_palindrome(n)) return results"},{"question":"Function to find unique prime divisors in a list of integers: Write a function that takes a list of integers as input and returns a list of all the unique prime numbers that can divide at least one of the integers in the list. The result list should be sorted in ascending order. # Input - An array of integers, `numbers` (1 ≤ |numbers| ≤ 100, 2 ≤ number ≤ 10^6) # Output - A list of unique prime numbers sorted in ascending order. # Example ```python def unique_prime_divisors(numbers): # Your code here # Sample input numbers = [12, 15, 77, 21] # Sample output # The unique prime divisors are [2, 3, 5, 7, 11] print(unique_prime_divisors(numbers)) ``` # Explanation Given the input list `[12, 15, 77, 21]`, the prime divisors for: - 12 are [2, 3] - 15 are [3, 5] - 77 are [7, 11] - 21 are [3, 7] The unique primes, sorted in ascending order, are `[2, 3, 5, 7, 11]`. # Notes - You may find it useful to implement a helper function to efficiently determine the prime factors of a given integer. - Consider the performance implications of factorizing numbers, especially since the bounds can be relatively high.","solution":"def unique_prime_divisors(numbers): def sieve_of_eratosthenes(max_num): is_prime = [True] * (max_num + 1) is_prime[0], is_prime[1] = False, False p = 2 while p * p <= max_num: if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 return [num for num, prime in enumerate(is_prime) if prime] def prime_factors(n, primes): factors = set() for prime in primes: if prime * prime > n: break while n % prime == 0: factors.add(prime) n //= prime if n > 1: factors.add(n) return factors max_num = max(numbers) primes = sieve_of_eratosthenes(max_num) unique_primes = set() for number in numbers: unique_primes.update(prime_factors(number, primes)) return sorted(unique_primes)"},{"question":"A local library is organizing a reading competition for children. Each child who participates in the competition reads a certain number of pages per hour. Given a list of the number of pages read per hour by each child, the library plans to award a prize to the child who reads the most pages. However, they notice that if two or more children read the same number of pages, nobody wins the prize in that round. Your task is to determine the number of pages that the winning child read, or determine that there is no winner if there\'s a tie. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of children participating in the competition. The second line contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^6) — the number of pages each child reads per hour. -----Output----- Output a single integer — the number of pages read by the winning child, or -1 if there is no winner. -----Examples----- Input 5 4 3 4 2 1 Output 3 Input 4 5 5 5 5 Output -1 -----Note----- In the first example, the number of pages read per hour by each child is [4, 3, 4, 2, 1]. The child who read 3 pages per hour wins since 3 pages per hour is not tied with any other child\'s rate. In the second example, all four children read 5 pages per hour, so there is no winner in this case.","solution":"def find_winning_pages(n, pages): count = {} for page in pages: if page in count: count[page] += 1 else: count[page] = 1 max_pages = -1 for page, freq in count.items(): if freq == 1 and (max_pages == -1 or page > max_pages): max_pages = page return max_pages"},{"question":"You are given an integer array `A` of length `n` where each element represents the height of a tower. A move consists of removing one block from the top of a higher tower and placing it on top of a shorter tower. Your task is to determine the minimum number of moves required to make all towers equal in height. Input: The first line contains a single integer `t` (1 ≤ t ≤ 10), the number of test cases. Each test case consists of two lines: - The first line contains an integer `n` (1 ≤ n ≤ 10^5) representing the number of towers. - The second line contains `n` space-separated integers `A[i]` (1 ≤ A[i] ≤ 10^9). Output: For each test case, output a single integer representing the minimum number of moves to make all towers of equal height. Example: Input: 2 3 1 2 3 4 3 3 3 3 Output: 2 0","solution":"def min_moves_to_equal_height(t, test_cases): results = [] for i in range(t): n, A = test_cases[i] height_frequency = {} for height in A: if height in height_frequency: height_frequency[height] += 1 else: height_frequency[height] = 1 max_frequency = max(height_frequency.values()) result = n - max_frequency results.append(result) return results"},{"question":"A wandering traveler decided to take a journey through a vast and enchanted forest. Along the way, he happened to find a magical map that led him to a golden tree. This tree was extraordinary as it could bear fruits of pure gold! Interestingly, the tree bore golden fruits in a special pattern that intrigued the traveler. The tree would bear `f(n)` golden fruits on a given day `n`. It was observed that the number of golden fruits produced by the tree followed the Fibonacci sequence. Specifically, the number of fruits on the first day was 1, on the second day was 1, and for any day `n > 2`, the number of golden fruits `f(n)` was the sum of the fruits from the previous two days, i.e., `f(n) = f(n-1) + f(n-2)`. The traveler was eager to know how many golden fruits the tree would bear on different days of his journey. Given the number of days `D` the traveler wants to check and a list of days `days[]`, for each day in the list, calculate the number of golden fruits the tree will bear on that day. Since the result can be very large, return the answer modulo 10^9+7. Input: The first line of input contains an integer `D`, the number of days the traveler is interested in. The next line contains `D` space-separated integers representing the days `days[]` the traveler wants to check. Output: For each day in the list `days[]`, print the number of golden fruits the tree will bear on that day, each on a new line. Constraints: 1 ≤ D ≤ 10^4 1 ≤ days[i] ≤ 10^8 SAMPLE INPUT 2 5 13 SAMPLE OUTPUT 5 233 Explanation: For the 5th day, `f(5) = 5` golden fruits. For the 13th day, `f(13) = 233` golden fruits.","solution":"MOD = 10**9 + 7 def fib(n, memo={1: 1, 2: 1}): Compute the nth Fibonacci number modulo 10**9 + 7 using memoization. if n in memo: return memo[n] memo[n] = (fib(n - 1, memo) + fib(n - 2, memo)) % MOD return memo[n] def golden_tree_fruits(D, days): For each day in `days`, return the number of golden fruits the tree will bear. result = [] for day in days: result.append(fib(day)) return result"},{"question":"collections.Counter() The Counter class from the collections module provides a convenient way to count occurrences of each element in an iterable. It\'s often used to tally items in a list, but it can handle other data structures as well. Sample Code >>> from collections import Counter >>> >>> print(Counter(\'hello world\')) Counter({\'l\': 3, \'o\': 2, \'h\': 1, \'e\': 1, \'w\': 1, \'r\': 1, \'d\': 1}) >>> >>> print(Counter([1, 2, 2, 3, 1, 3, 1])) Counter({1: 3, 2: 2, 3: 2}) >>> >>> c = Counter(a=4, b=2, c=0, d=-2) >>> print(c[\'a\']) 4 >>> c.update(a=1, b=2, c=3) >>> print(c) Counter({\'a\': 5, \'b\': 4, \'c\': 3, \'d\': -2}) >>> c[\'e\'] = 0 >>> print(c) Counter({\'a\': 5, \'b\': 4, \'c\': 3, \'e\': 0, \'d\': -2}) Task You are given a string text{input_string}. Your task is to count the occurrences of each character in the string using the `Counter` class from the `collections` module and print the three most common characters. If there is a tie, the characters should be listed in the order of their first appearance in the string. Example text{input_string} = abcabcabc The most common characters are: `a`, `b`, and `c`, each appearing 3 times. Input Format A single line containing the string text{input_string}. Constraints 0<text{len}(text{input_string})<10^5 Output Format Output the three most common characters and their counts as tuples, separated by a space, in the format: (char1, count1) (char2, count2) (char3, count3) If the number of unique characters is less than 3, output as many as possible. Sample Input abcabcabc Sample Output (\'a\', 3) (\'b\', 3) (\'c\', 3)","solution":"from collections import Counter def most_common_characters(input_string): Returns the three most common characters from the input_string along with their counts. If there are fewer than three unique characters, return as many as possible. counter = Counter(input_string) most_common = counter.most_common(3) return most_common"},{"question":"Sarah has a unique collection of marbles, organized into n boxes. Each box i contains a_i marbles. She wants to redistribute the marbles such that all boxes have an equal number of marbles. Additionally, Sarah hates the idea of wasting marbles, so it\'s not allowed to dispose of any. Sarah can perform the following operations: - Move k marbles from one box to another (1 ≤ k ≤ a_i) in one move. Sarah wants to know the minimum number of moves required to achieve her goal of evenly distributing the marbles across all boxes. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of boxes. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the number of marbles in each box. -----Output----- Print the minimum number of moves required to equalize the number of marbles in each box. If it is not possible to distribute the marbles equally, print -1. -----Examples----- Input 3 3 6 9 Output 3 Input 4 1 2 3 4 Output -1 Input 2 5 5 Output 0","solution":"def min_moves_to_equal_marbles(n, marbles): Calculate the minimum number of moves required to redistribute marbles in n boxes such that each box has an equal number of marbles. Parameters: n (int): the number of boxes. marbles (list of int): the number of marbles in each box. Returns: int: the minimum number of moves, or -1 if it is not possible to equally distribute. total_marbles = sum(marbles) if total_marbles % n != 0: return -1 equal_share = total_marbles // n moves = 0 for mar in marbles: if mar > equal_share: moves += mar - equal_share return moves"},{"question":"You\'re given a list of cities and flight connections between them. Each flight connection has a positive integer representing the cost for that flight. Your task is to determine the minimum cost to travel from a given source city to a destination city, if such a path exists, considering you may need to use multiple flights. You are supposed to write a function `min_cost_flight` that takes in the following parameters: - `n` (an integer, representing the number of cities, numbered from 0 to n-1). - `flights` (a list of tuples, where each tuple contains three integers `(u, v, w)` representing a flight from city `u` to city `v` with a cost `w`). - `src` (an integer, the starting city). - `dst` (an integer, the destination city). The function should return an integer, representing the minimum cost to travel from the source city to the destination city. If there is no possible way to reach the destination from the source, return -1. -----Examples----- Input: ```python min_cost_flight(5, [(0, 1, 100), (1, 2, 100), (2, 3, 100), (3, 4, 100), (0, 2, 300)], 0, 4) ``` Output: 400 Input: ```python min_cost_flight(3, [(0, 1, 100), (1, 2, 100), (0, 2, 500)], 0, 2) ``` Output: 200 Input: ```python min_cost_flight(4, [(0, 1, 100), (1, 2, 100), (2, 3, 100)], 0, 3) ``` Output: 300 Input: ```python min_cost_flight(3, [(0, 1, 500), (1, 0, 100)], 0, 2) ``` Output: -1","solution":"import heapq def min_cost_flight(n, flights, src, dst): Returns the minimum cost to travel from src to dst using the given flights. If there is no way to get from src to dst, return -1. # Create a graph from the flights list graph = {i: [] for i in range(n)} for u, v, w in flights: graph[u].append((v, w)) # Dijkstra\'s algorithm to find the shortest path pq = [(0, src)] # (cost, city) min_cost = {i: float(\'inf\') for i in range(n)} min_cost[src] = 0 while pq: cost, u = heapq.heappop(pq) if u == dst: return cost for v, w in graph[u]: new_cost = cost + w if new_cost < min_cost[v]: min_cost[v] = new_cost heapq.heappush(pq, (new_cost, v)) return -1"},{"question":"Given an array of integers, you need to find the sum of the values of all subarrays of the array. Recall that a subarray is a contiguous part of an array. Input: - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains `n` integers `a_1, a_2, ..., a_n` (|a_i| ≤ 10^6) — the elements of the array. Output: - Output a single integer — the sum of the values of all subarrays of the given array. Since the answer can be large, output it modulo 10^9 + 7. Example: Input: 3 1 2 3 Output: 20 Explanation: The subarrays of [1, 2, 3] are: - [1], [2], [3], [1, 2], [2, 3], [1, 2, 3] The sums of these subarrays are: - 1, 2, 3, 1+2=3, 2+3=5, 1+2+3=6 Thus, the sum of all subarray sums is: 1 + 2 + 3 + 3 + 5 + 6 = 20","solution":"def sum_of_subarray_sums(n, arr): MOD = 10**9 + 7 total = 0 for i in range(n): total = (total + arr[i] * (i + 1) * (n - i)) % MOD return total"},{"question":"# Task Given a **list of integers** representing the heights of a series of towers, imagine that each tower casts a shadow to its right that covers every shorter or equally tall tower until a taller tower blocks the shadow. **Determine the number of towers that remain completely unobstructed by shadows from the left.** # Input - A list of integers **`towers`** where each integer represents the height of a tower. # Output - Return an integer representing the number of completely unobstructed towers from the left. # Example ``` unobstructedTowers([3, 7, 8, 4, 2, 6]) == 3 ``` **Explanation** - The first tower of height `3` is unobstructed. - The second tower of height `7` is taller and hence unobstructed. - The third tower of height `8` is taller than preceding towers and hence unobstructed. - The next two towers `4` and `2` are shorter than `8`, so they are blocked by the shadow of `8`. - The last tower `6` is shorter than `8` and hence blocked as well. - Therefore, the towers of heights `3`, `7`, and `8` are completely unobstructed, resulting in a count of `3`. ``` unobstructedTowers([1, 2, 3, 4, 5]) == 5 ``` **Explanation** - All towers are in increasing height order and thus each casts a shadow but does not block any subsequent tower. - Therefore, all towers are unobstructed. ``` unobstructedTowers([5, 5, 5, 5, 5]) == 1 ``` **Explanation** - Only the first tower remains unobstructed since each subsequent tower of the same height will be blocked by any tower coming before it.","solution":"def unobstructedTowers(towers): Returns the number of towers that are completely unobstructed by shadows from the left. if not towers: return 0 unobstructed_count = 1 max_height = towers[0] for height in towers[1:]: if height > max_height: unobstructed_count += 1 max_height = height return unobstructed_count"},{"question":"An online book store needs a system to manage book sales and customer subscriptions. The store occasionally offers flash sales where books are sold at discounted prices for a limited period. Additionally, premium users get an extra discount on top of the flash sale prices. The store wants to calculate the final price a customer needs to pay for a book. Write a program that determines the final price of a book, given the base price, flash sale discount, and whether the customer is a premium user. * The base price of a book is a positive integer. * The flash sale discount is a percentage reduction in the base price (an integer between 0 and 100). * Premium users get an additional fixed discount of 5. Input The input consists of multiple datasets. Each dataset is given in the following format: > base_price flash_sale_discount premium_user The first value is a positive integer (1 ≤ base_price ≤ 1000) indicating the base price of the book in dollars. The second value is an integer (0 ≤ flash_sale_discount ≤ 100) indicating the percentage discount during the flash sale. The third value is either 0 or 1; If it is 1, the customer is a premium user, and if it is 0, the customer is not a premium user. The end of the input is indicated by a line containing a single integer 0. Output For each dataset, print the final price the customer needs to pay, rounded to the nearest dollar. Sample Input > 100 20 1 > 50 0 0 > 200 50 1 > 120 10 0 > 0 Output for the Sample Input > 75 > 50 > 95 > 108 Example Input > 100 20 1 > 50 0 0 > 200 50 1 > 120 10 0 > 0 Output > 75 > 50 > 95 > 108 Explanation For the first dataset: - Base price is 100, flash sale discount is 20%. - Flash sale price = 100 - (100 * 20 / 100) = 80 - Premium user discount = 5 - Final price = 80 - 5 = 75 For the second dataset: - Base price is 50, flash sale discount is 0%. - Flash sale price = 50 - (50 * 0 / 100) = 50 - Non-premium user, no extra discount - Final price = 50","solution":"def calculate_final_price(base_price, flash_sale_discount, premium_user): Calculate the final price of a book given the base price, flash sale discount, and premium user status. :param base_price: The base price of the book (int) :param flash_sale_discount: The flash sale discount in percentage (int) :param premium_user: Whether the user is a premium user (boolean) :return: The final price of the book rounded to the nearest dollar (int) # Compute the discount from the flash sale discount_amount = (base_price * flash_sale_discount) / 100.0 flash_sale_price = base_price - discount_amount # If the customer is a premium user, apply an additional 5 discount if premium_user: flash_sale_price -= 5 # Round the final price to the nearest dollar final_price = round(flash_sale_price) return final_price def process_book_prices(data): Process multiple datasets of book prices and return the list of final prices. :param data: List of tuples, where each tuple contains base price, flash sale discount, and premium user status as (int, int, int). :return: List of final prices each formatted as \\"xx\\" results = [] for base_price, flash_sale_discount, premium_user in data: if base_price == 0: break final_price = calculate_final_price(base_price, flash_sale_discount, premium_user) results.append(f\\"{final_price}\\") return results"},{"question":"Implement a program that takes in a list of student records, each containing the student\'s name and their grades in various subjects. The goal is to calculate the average grade for each student and determine their final grade based on the following criteria: * If the average grade is 90 or above, assign the student an \\"A\\". * If the average grade is between 80 and 89, assign the student a \\"B\\". * If the average grade is between 70 and 79, assign the student a \\"C\\". * If the average grade is between 60 and 69, assign the student a \\"D\\". * If the average grade is below 60, assign the student an \\"F\\". Input The input starts with an integer N indicating the number of student records. The next N lines each contain a student\'s name followed by their grades in various subjects. Each student\'s name is a single word containing only alphabetic characters, followed by a space, and then a space-separated list of integers representing grades. Each list in the input will have at least one grade, and all grades are between 0 and 100 inclusive. Output For each student, print the student\'s name followed by their average grade rounded to 2 decimal places and their final grade letter. Example Input 3 Alice 95 85 92 Bob 68 74 59 Charlie 88 78 85 Output Alice 90.67 A Bob 67.00 D Charlie 83.67 B Note Pay attention to the rounding of the average grade. For example, 90.666666... should be shown as 90.67.","solution":"def calculate_final_grades(records): results = [] for record in records: parts = record.split() name = parts[0] grades = list(map(int, parts[1:])) average_grade = sum(grades) / len(grades) average_grade_rounded = round(average_grade, 2) if average_grade >= 90: letter_grade = \\"A\\" elif average_grade >= 80: letter_grade = \\"B\\" elif average_grade >= 70: letter_grade = \\"C\\" elif average_grade >= 60: letter_grade = \\"D\\" else: letter_grade = \\"F\\" results.append(f\\"{name} {average_grade_rounded:.2f} {letter_grade}\\") return results"},{"question":"You are given a square grid of size n times n, where each cell contains a lowercase Latin letter. Your task is to find the length of the longest path in the grid such that all characters in the path are distinct. You can move in four possible directions: up, down, left, and right. -----Input----- The first line contains an integer n (1 le n le 25) — the size of the grid. The next n lines contain n characters each, representing the grid. -----Output----- Print one integer — the length of the longest path with all distinct characters. -----Examples----- Input 4 abcd efgh ijkl mnop Output 16 Input 3 aba bcb aba Output 3 Input 2 ab cd Output 4 -----Note----- In the first example, all characters are distinct and you can visit each cell exactly once, which gives a path length of 16. In the second example, the longest path with all distinct characters can be achieved by starting from any corner and moving to an adjacent corner without revisiting any character, which gives a path length of 3. In the third example, you can start from any cell and move to all other cells as they all contain distinct characters, giving a path length of 4.","solution":"def longest_unique_path(n, grid): def dfs(x, y, visited): # Define directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_length = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] not in visited: max_length = max(max_length, dfs(nx, ny, visited | {grid[nx][ny]})) return 1 + max_length max_path_length = 0 for i in range(n): for j in range(n): max_path_length = max(max_path_length, dfs(i, j, {grid[i][j]})) return max_path_length"},{"question":"A company has a special warehouse system that deals with stock-keeping unit (SKU) codes. Each SKU code is a positive integer and the warehouse has a rule to determine whether an SKU code is \'lucky\' or not. A SKU is considered \'lucky\' if the following condition holds: * The sum of its digits is a multiple of 5. You are tasked with writing a function that determines if a given SKU code is \'lucky\' or not. # Input A single integer n which represents the SKU code. (1 leq n leq 10^9) # Output Output \\"Lucky\\" if the SKU code is lucky, otherwise output \\"Unlucky\\". # Example Input ``` 140 ``` Output ``` Unlucky ``` The sum of digits is 1 + 4 + 0 = 5 which is a multiple of 5, so it should be \\"Lucky\\". Input ``` 123 ``` Output ``` Lucky ``` The sum of digits is 1 + 2 + 3 = 6, which is not a multiple of 5, so it should be \\"Unlucky\\". # Explanation Write a program that reads an integer SKU code and prints if the SKU code is \\"Lucky\\" or \\"Unlucky\\" based on the described condition above.","solution":"def is_lucky_sku(n): Determines if the given SKU code is \'lucky\' by checking if the sum of its digits is a multiple of 5. Parameters: n (int): SKU code Returns: str: \\"Lucky\\" if the SKU code is lucky, otherwise \\"Unlucky\\" digit_sum = sum(int(digit) for digit in str(n)) if digit_sum % 5 == 0: return \\"Lucky\\" else: return \\"Unlucky\\""},{"question":"The Society of Self-Driving Cars (SSDC) has been testing its fleet in the simulated city of Autoville, which comprises a grid of N times N intersections. The goal of the tests is to navigate from the top-left corner of the grid to the bottom-right corner using the minimum amount of energy. To navigate the grid, a car can move one intersection up, down, left, or right. Each move from intersection (i, j) to (i\', j\') costs |altitude(i, j) - altitude(i\', j\')| energy, where altitude(i, j) is the altitude of the intersection (i, j). The altitude values can be positive or negative. Design a program that computes the minimum energy required for a car to navigate from the top-left corner to the bottom-right corner of the grid. Input The input is given in the following format. N alt_{11} alt_{12} … alt_{1N} alt_{21} alt_{22} … alt_{2N} ... alt_{N1} alt_{N2} … alt_{NN} The first line provides the size of the grid N (1 leq N leq 100). Each of the subsequent N lines provides the altitude of each intersection in the grid as integers (-10^4 leq alt_{ij} leq 10^4). Output Output the minimum energy required to navigate from the top-left corner to the bottom-right corner of the grid. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 8 Input 4 1 3 5 7 2 4 6 8 3 5 7 9 4 6 8 10 Output 9 Input 2 0 -1 -2 -3 Output 3","solution":"import heapq def min_energy(grid): N = len(grid) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] pq = [(0, 0, 0)] # (cost, x, y) costs = {(0, 0): 0} while pq: cost, x, y = heapq.heappop(pq) if (x, y) == (N-1, N-1): return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N: next_cost = cost + abs(grid[nx][ny] - grid[x][y]) if (nx, ny) not in costs or next_cost < costs[(nx, ny)]: costs[(nx, ny)] = next_cost heapq.heappush(pq, (next_cost, nx, ny)) def parse_input(raw_input): lines = raw_input.strip().split(\'n\') N = int(lines[0]) grid = [list(map(int, line.split())) for line in lines[1:]] return grid def min_energy_from_input(raw_input): grid = parse_input(raw_input) return min_energy(grid)"},{"question":"A game company is developing a board game that involves moving pieces on a grid. The board is an N x N grid, and each player can have multiple pieces. A piece can move in any of the four cardinal directions (up, down, left, right) if the destination cell is within the bounds of the grid and unoccupied. Your task is to determine the number of valid moves for a given piece on the board. Input The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each test case begins with an integer N (1 ≤ N ≤ 1,000), the size of the grid. Then follows an integer P (1 ≤ P ≤ 10,000), the number of pieces on the board. The next P lines each contain two integers x and y (1 ≤ x, y ≤ N) representing the coordinates of a piece on the board (1-based index). The final line contains two integers xi and yi (1 ≤ xi, yi ≤ N), the coordinates of the piece for which you need to calculate the number of valid moves. Output For each test case, output a line containing the number of valid moves for the specified piece. Example Input 2 5 7 1 1 1 2 1 3 2 1 2 2 5 5 4 4 2 2 4 5 1 1 1 2 2 1 2 2 1 1 Output 2 0","solution":"def calculate_valid_moves(T, test_cases): results = [] for case in test_cases: N, P, pieces, target = case occupied_positions = {(x, y) for x, y in pieces} xi, yi = target valid_moves = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: new_x, new_y = xi + dx, yi + dy if 1 <= new_x <= N and 1 <= new_y <= N and (new_x, new_y) not in occupied_positions: valid_moves += 1 results.append(valid_moves) return results"},{"question":"A famous online retailer operates a website where users can add items to their wishlist. Every item has a price associated with it, and there are constraints on both the maximum budget a user wishes to spend and the number of items they can add to their cart. The website wants to recommend a combination of items to the user such that the total cost is as close to their budget as possible, without exceeding it, while also utilizing the maximum number of items within their allowed limit. Write a program to help the website generate this recommendation for users. INPUT The first line contains three integers n, B, and m, where n is the number of items in the wishlist, B is the maximum budget, and m is the maximum number of items the user wishes to purchase. The next line contains n space-separated integers, with the ith integer denoting the price of the ith item in the wishlist. OUTPUT Print a single integer value: the total cost of the combination that is closest to B without exceeding it when using up to m items. If no such combination is possible, print \\"NOT POSSIBLE\\". CONSTRAINTS 1 ≤ n ≤ 100 1 ≤ B ≤ 10000 1 ≤ m ≤ n 1 ≤ price of each item ≤ 1000 SAMPLE INPUT 5 50 3 10 20 30 40 50 SAMPLE OUTPUT 50 Explanation The total cost of items selected is 50, which matches the budget while utilizing the maximum number of items within the allowed limit. SAMPLE INPUT 5 45 2 10 20 30 40 50 SAMPLE OUTPUT 40 Explanation The best combination within a budget of 45 and maximum of 2 items is selecting the items with prices 20 and 20, totaling 40, which is the best combination closest to 45 without exceeding it.","solution":"from itertools import combinations def maximize_cart_value(n, B, m, prices): best_cost = -1 for r in range(1, m + 1): for combo in combinations(prices, r): total = sum(combo) if total <= B and total > best_cost: best_cost = total return best_cost if best_cost != -1 else \\"NOT POSSIBLE\\" # Example usage # n = 5, B = 50, m = 3, prices = [10, 20, 30, 40, 50] # print(maximize_cart_value(5, 50, 3, [10, 20, 30, 40, 50]))"},{"question":"Write a program to simulate the operations of a train reservation system with the following functionalities: * reserve(s, e): Reserve a seat in the train on segment [s, e). Return true if the reservation is successful, i.e., the segment [s, e) is completely empty; otherwise, return false. * cancel(s, e): Cancel any reservations in the segment [s, e). After this operation, all seats in the segment [s, e) should be available. * query(s, e): Return the number of reserved seats in the segment [s, e). The train consists of n seats, numbered from 0 to n-1, and initially, all seats are available. Constraints * 1 ≤ n ≤ 100000 * 1 ≤ q ≤ 100000 * 0 ≤ s < e ≤ n Input n q query1 query2 : queryq In the first line, n (the number of seats in the train) and q (the number of queries) are given. Each ith query query_i is in the following format: reserve s e or cancel s e or query s e The first word represents the type of the query which can be \'reserve\', \'cancel\', or \'query\'. Output For each query of type \'query\' or \'reserve\', print the result (either the number of reserved seats in the given segment or the success status of the reservation attempt). Examples: Input 10 5 reserve 2 5 reserve 3 7 query 2 5 cancel 2 5 query 2 5 Output true false 3 0","solution":"class TrainReservationSystem: def __init__(self, n): self.train = [0] * n def reserve(self, s, e): Reserve seats in the segment [s, e). Return true if successful, false otherwise. if any(self.train[s:e]): return False for i in range(s, e): self.train[i] = 1 return True def cancel(self, s, e): Cancel reservations in the segment [s, e). for i in range(s, e): self.train[i] = 0 def query(self, s, e): Return the number of reserved seats in the segment [s, e). return sum(self.train[s:e])"},{"question":"A company is scheduling interviews for candidates. Each candidate has a time slot during which they are available. The company\'s goal is to schedule the maximum number of non-overlapping interviews in a given time frame. Your task is to write a program that determines how many interviews can be scheduled without overlap. -----Input----- The first line contains a single integer t (1 <= t <= 1000), the number of test cases. Each test case starts with an integer n (1 <= n <= 100), the number of candidates. The following n lines for each test case contain two integers s and e (1 <= s < e <= 1440) representing the start and end times (in minutes from midnight) of the candidate\'s available time slot. -----Output----- For each test case, print a single integer representing the maximum number of non-overlapping interviews that can be scheduled. -----Example----- Input: 2 3 60 120 150 210 100 180 4 540 600 600 660 660 720 720 780 Output: 2 4 -----Explanation----- In the first test case, we can schedule the interviews 60-120 and 150-210 without any overlap. Therefore, the maximum number of non-overlapping interviews is 2. In the second test case, all given time slots do not overlap, so we can schedule all four interviews. Thus, the maximum number of non-overlapping interviews is 4.","solution":"def max_non_overlapping_interviews(test_cases): results = [] for case in test_cases: n, intervals = case intervals.sort(key=lambda x: x[1]) count = 0 end_time = 0 for interval in intervals: if interval[0] >= end_time: count += 1 end_time = interval[1] results.append(count) return results # Utility function to parse input and output def parse_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) index += 1 intervals = [] for _ in range(n): s, e = map(int, input_lines[index].split()) intervals.append((s, e)) index += 1 test_cases.append((n, intervals)) return test_cases def format_output(result): return \\"n\\".join(map(str, result))"},{"question":"You are given a string of digits, which is always at least 3 characters long. Your task is to find the largest product of three consecutive digits in the string. Write a function `largest_product` that takes a single argument, a string of digits `s`, and returns the largest product of three consecutive digits. # Input - `s`: A string of digits of length at least 3. # Output - An integer which is the largest product of three consecutive digits. # Example ``` largest_product(\\"123456789\\") --> 504 // (7 * 8 * 9) largest_product(\\"10278301\\") --> 168 // (7 * 8 * 3) largest_product(\\"731674\\") --> 168 // (7 * 3 * 8) largest_product(\\"1111111\\") --> 1 // (1 * 1 * 1) ``` # Hint You may need to loop through the string, consider each group of three consecutive digits, and calculate their product. Keep track of the maximum product as you proceed.","solution":"def largest_product(s): Returns the largest product of three consecutive digits in the string s. max_product = 0 for i in range(len(s) - 2): product = int(s[i]) * int(s[i + 1]) * int(s[i + 2]) if product > max_product: max_product = product return max_product"},{"question":"Write a program to determine the number of distinct paths from the top-left corner to the bottom-right corner of an m x n grid. You can only move either down or right at any point in time. # Input - A single line containing two integers, m and n, representing the number of rows and columns in the grid. # Output - A single line containing the number of distinct paths from the top-left to the bottom-right corner of the grid. # Constraints 1 ≤ m, n ≤ 100 # Sample Input 1 3 3 # Sample Output 1 6 # Explanation 1 The paths from the top-left to the bottom-right corner are: 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right 4. Down -> Right -> Right -> Down 5. Down -> Right -> Down -> Right 6. Down -> Down -> Right -> Right Hence, there are 6 distinct paths from the top-left to the bottom-right corner of a 3x3 grid. # Sample Input 2 2 2 # Sample Output 2 2 # Explanation 2 The paths from the top-left to the bottom-right corner are: 1. Right -> Down 2. Down -> Right Hence, there are 2 distinct paths from the top-left to the bottom-right corner of a 2x2 grid. # Note The constraints ensure that a solution using a combinatorial approach or dynamic programming is feasible within the given limits.","solution":"def unique_paths(m, n): Returns the number of distinct paths in a m x n grid. You can only move down or right at any point in time. # Creating a 2D list (matrix) to store the number of ways to reach each cell dp = [[0] * n for _ in range(m)] # Setting the number of ways to reach the first cell in each row and column to 1 for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Filling the matrix with number of ways to reach each cell for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Alice loves playing with numbers. She often finds the sum of digits of a number amusing. However, sometimes she gets confused when there are multiple numbers. Can you help Alice by writing a program that calculates the sum of digits of each number in a list? Input: The first line contains an integer N, denoting the number of integers. The next line contains N integers separated by spaces. Output: For each integer, print the sum of its digits in separate lines. Constraints: 1 ≤ N ≤ 10 0 ≤ number ≤ 100000 SAMPLE INPUT 3 123 456 789 SAMPLE OUTPUT 6 15 24","solution":"def sum_of_digits(number): Returns the sum of the digits of a given number. return sum(int(digit) for digit in str(number)) def sum_of_digits_in_list(numbers): Given a list of numbers, returns a list containing the sum of digits of each number. return [sum_of_digits(number) for number in numbers]"},{"question":"You are given a text composed of a single sentence. Your task is to determine if the given sentence is a pangram. A pangram is a sentence that contains every single letter of the alphabet at least once. For the purposes of this problem, we will consider only the lowercase English alphabet (a to z). Write a program that reads a single sentence and determines if it is a pangram. The sentence will only consist of lowercase English letters and spaces. Input The input consists of a single line containing the sentence. The length of the sentence is between 1 and 1000, inclusive. The sentence consists of one or more words formed by lowercase Latin letters separated by single spaces. Output Print \\"YES\\" (without the quotes) if the sentence is a pangram. Otherwise, print \\"NO\\" (also without the quotes). Examples Input the quick brown fox jumps over the lazy dog Output YES Input impressive programming skills Output NO","solution":"def is_pangram(sentence): Determines if the given sentence is a pangram. :param sentence: str, a single sentence containing lowercase letters and spaces :return: str, \\"YES\\" if the sentence is a pangram, \\"NO\\" otherwise # Define the set of all lowercase letters alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') # Create a set from the characters in the sentence, excluding spaces sentence_set = set(sentence.replace(\' \', \'\')) # Check if the alphabet set is a subset of the sentence set if alphabet_set.issubset(sentence_set): return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function that simulates a basic ATM machine\'s behavior. The machine will allow the user to perform withdrawals, deposits, and balance checks. Your function should accept a list of transactions that include the type of transaction (\'withdraw\', \'deposit\', \'balance\'), and the amount (for \'withdraw\' and \'deposit\'). You should also ensure that the balance does not go negative and ignore any withdrawals that would cause the balance to go negative. Output the final balance in the account after all transactions have been processed. Assume that the initial balance is 0. # Example ```python # Transactions: Withdraw 100, Deposit 200, Balance Check, Withdraw 50, # Balance Check - Ignore because balance will go negative transactions = [(\\"withdraw\\", 100), (\\"deposit\\", 200), (\\"balance\\", 0), (\\"withdraw\\", 250), (\\"balance\\", 0)] atm_machine(transactions) # Should return 150 ``` # Constraints - A withdrawal transaction should only proceed if the balance will remain non-negative after the transaction. - A deposit transaction should add the specified amount to the balance. - The balance check should merely note the current balance but not affect it or produce an output in the list. - Initial balance is 0 and consist of 0 to 2 decimal places. # Note - Make sure to handle decimal values correctly to avoid issues with floating-point arithmetic inaccuracies. - Design the function to handle a reasonable range of values for amounts (e.g., up to thousands of dollars). Write your function as follows: ```python def atm_machine(transactions): # Your code goes here ```","solution":"def atm_machine(transactions): Simulates an ATM machine\'s behavior. Parameters: transactions (list of tuples): A list of transactions. Each tuple contains a transaction type and an amount. - If the transaction type is \'withdraw\', the amount should be a positive decimal number to withdraw. - If the transaction type is \'deposit\', the amount should be a positive decimal number to deposit. - If the transaction type is \'balance\', the amount should be ignored. Returns: float: The final balance in the account after all transactions have been processed. balance = 0.0 for transaction in transactions: action, amount = transaction if action == \'withdraw\': if balance >= amount: balance -= amount elif action == \'deposit\': balance += amount elif action == \'balance\': continue return round(balance, 2)"},{"question":"The Winterfell library is organizing a book fair. The records of the library are kept in multiple logs, each containing the titles of books in sorted order. The librarian wants to compile a master list of all books in sorted order. Your task is to help the librarian merge the multiple sorted logs into a single sorted list for each test case. Input: The first line contains an integer T, the number of test cases. For each test case: The first integer is L, the number of logs. For each log: An integer X, the number of book titles in the log, followed by X space-separated sorted strings representing the titles. Output: For each test case, print the merged sorted list of book titles. Constraints: 1 ≤ T ≤ 100 2 ≤ L ≤ 10 1 ≤ X ≤ 10000 1 ≤ length of each title ≤ 100 Titles contain only uppercase and lowercase English letters and are case-sensitive. Example: Input: 1 3 3 HarryPotter LordOfTheRings TheHobbit 2 Dune Foundation 4 Catch22 ToKillAMockingbird Ulysses WarAndPeace Output: Catch22 Dune Foundation HarryPotter LordOfTheRings TheHobbit ToKillAMockingbird Ulysses WarAndPeace SAMPLE INPUT 1 3 3 HarryPotter LordOfTheRings TheHobbit 2 Dune Foundation 4 Catch22 ToKillAMockingbird Ulysses WarAndPeace SAMPLE OUTPUT Catch22 Dune Foundation HarryPotter LordOfTheRings TheHobbit ToKillAMockingbird Ulysses WarAndPeace","solution":"import heapq def merge_sorted_logs(logs): Merge multiple sorted logs into a single sorted list of book titles. merged_list = [] min_heap = [] for log in logs: for book in log: heapq.heappush(min_heap, book) while min_heap: merged_list.append(heapq.heappop(min_heap)) return merged_list def process_test_cases(test_cases): results = [] for logs in test_cases: merged_list = merge_sorted_logs(logs) results.append(\\" \\".join(merged_list)) return results"},{"question":"A group of friends play a game called \\"Magic Strings.\\" In this game, each player receives a string containing both alphabetic characters and special characters (such as \'!\', \'@\', \'#\', etc.). The goal is to transform the string into a \\"magic string\\" following these rules: 1. All alphabetic characters must be in uppercase. 2. All special characters must remain as they are. 3. The transformed string must not contain any numeric characters. 4. The final magic string must read the same forwards and backwards (i.e., it should be a palindrome). You need to write a program that reads a list of strings and determines if each one can be transformed into a magic string. For each string, print \\"Magic\\" if it can be transformed into a magic string, and \\"Not Magic\\" otherwise. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of strings. The next n lines consist of one string per line. Each string consists of up to 100 characters, which may include alphabetic characters (\'a\' to \'z\', \'A\' to \'Z\'), special characters (\'!\', \'@\', \'#\', etc.), and numeric characters (\'0\' to \'9\'). Output For each string, print \\"Magic\\" if the string can be transformed into a magic string, and \\"Not Magic\\" otherwise. Examples Input 3 he!l@lo @123# Rac#car Output Not Magic Not Magic Magic Explanation In the first example, \\"he!l@lo\\" becomes \\"HE!L@LO\\", but it is not a palindrome. In the second example, \\"@123#\\" contains numeric characters, so it cannot be transformed. In the third example, \\"Rac#car\\" becomes \\"RAC#CAR\\", which is a palindrome.","solution":"def is_magic_string(input_string): # Filter out numeric characters and uppercase the alphabetic ones transformed_string = \'\'.join([ch.upper() if ch.isalpha() else ch for ch in input_string if not ch.isdigit()]) # Check if the transformed string is a palindrome if transformed_string == transformed_string[::-1]: return \\"Magic\\" else: return \\"Not Magic\\" def magic_strings(n, strings): results = [] for s in strings: results.append(is_magic_string(s)) return results"},{"question":"# Description: You have an array of integers, and you need to determine the contiguous subarray (containing at least one number) which has the maximum sum and return its sum. Implement the function `maxSubArraySum(arr: List[int]) -> int`: - `arr` - A list of integers, both positive and negative. The function should return an integer which is the sum of the maximum subarray. # Examples ``` maxSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) === 6 # Subarray [4,-1,2,1] maxSubArraySum([1]) === 1 maxSubArraySum([5,4,-1,7,8]) === 23 # Entire array maxSubArraySum([-1,-2,-3]) === -1 # Single element -1 ``` # Note This problem should be solved using an efficient algorithm with a linear time complexity of O(n). Consider using Kadane’s Algorithm which involves dynamic programming principles.","solution":"from typing import List def maxSubArraySum(arr: List[int]) -> int: Returns the sum of the contiguous subarray with the maximum sum. Uses Kadane\'s Algorithm. if not arr: return 0 current_max = arr[0] global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"You are given two positive integer lists with a random number of elements (1 <= n <= 100). Create an intersection list containing only the elements that appear in both lists. Calculate the sum of all values in this intersection list and then multiply the sum by the length of the intersection list. Return the result as an integer. Example ``` a = [1, 2, 3, 4] b = [3, 4, 5, 6] Intersection list: [3, 4] Sum of intersection list: 7 Length of intersection list: 2 Result: 7 * 2 = 14 Output: 14 ```","solution":"def sum_and_multiply_intersection(a, b): Returns the sum of the intersection list multiplied by its length. # Calculate the intersection of the lists intersection = [value for value in a if value in b] # Calculate the sum of the intersection list intersection_sum = sum(intersection) # Calculate the length of the intersection list intersection_length = len(intersection) # Return the result return intersection_sum * intersection_length"},{"question":"Write a function that takes a positive integer `n` and returns an array with the first `n` Fibonacci numbers. The Fibonacci sequence is defined as follows: - The first number is `0`. - The second number is `1`. - Each subsequent number is the sum of the previous two numbers. For example, the following code will result in an array containing the first `5` Fibonacci numbers: ``` fibonacci(5) // => [0, 1, 1, 2, 3] ```","solution":"def fibonacci(n): Returns the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to return, must be a positive integer. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence[:n]"},{"question":"You\'re participating in a coding competition where the objective is to determine if two documents are duplicates of each other. A document is represented as a string of words. Two documents are considered duplicates if they contain exactly the same set of words, regardless of the order. To identify duplicate documents, you\'ve been given a dataset containing multiple documents. Your task is to write a program that detects if any two documents in the dataset are duplicates. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of documents in the dataset. Each of the next n lines describes a document in the dataset. Each document consists of words (strings of lowercase letters) separated by single spaces. The length of each document can be up to 10000 characters. Output If there are duplicate documents, print \\"YES\\". If there are no duplicate documents, print \\"NO\\". Examples Input 1: ``` 3 this is a document document this is a completely different document ``` Output 1: ``` YES ``` Input 2: ``` 4 this document is unique every word counts different letters here no duplicates here ``` Output 2: ``` NO ``` Note: In the first example, the first and second documents are duplicates of each other because they contain the same set of words. The third document is different. In the second example, all the documents have different sets of words, hence there are no duplicates.","solution":"def detect_duplicate_documents(n, documents): Determines if any two documents in the dataset are duplicates of each other. A document is considered a duplicate if it contains exactly the same set of words as another document, regardless of the order. Each document consists of words (strings of lowercase letters) separated by single spaces. :param n: Number of documents :param documents: List of document strings :return: \\"YES\\" if there are duplicate documents, otherwise \\"NO\\" seen_documents = set() for doc in documents: word_set = frozenset(doc.split()) if word_set in seen_documents: return \\"YES\\" seen_documents.add(word_set) return \\"NO\\""},{"question":"The Kingdom of Fibonancia is famous for its ancient libraries filled with scrolls of mathematical knowledge. You have been tasked with analyzing a range of scrolls that contain sequences of numbers. Each scroll represents a sequence of integers. The Grand Librarian has a peculiar way of measuring the greatness of a sequence. For each sequence, he defines its greatness as the sum of the highest subsequence of non-consecutive numbers within it. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, in the sequence [4, 1, 1, 4, 2, 1], the greatest subsequence of non-consecutive numbers could be [4, 4, 1] or [4, 1, 4, 1]; and their sum would be 9. You are to help the Grand Librarian by writing a program to determine the greatness of multiple sequences. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case consists of a single line containing space-separated integers representing the sequence of numbers in one scroll. The length of the sequence does not exceed 1000. ------ Output ------ For each test case, output a single integer representing the greatness of the sequence. ------ Constraints ------ 1 ≤ T ≤ 100 Each number in the sequence is between -10^3 and 10^3 inclusive. ------ Example ------ Input: 3 4 1 1 4 2 1 3 2 5 10 7 -1 6 0 -3 9 1 Output: 9 15 15 ------ Explanation ------ In the first test case, one of the highest sums of non-consecutive numbers is achieved by [4, 4, 1], giving a sum of 9. In the second test case, choosing [3, 10, 2] achieves the highest sum, which is 15. In the third test case, one of the highest sums is obtained by the subsequence [6, 9], summing to 15.","solution":"def max_non_consecutive_sum(arr): Function to calculate the maximum sum of a subsequence with non-consecutive elements in the given array. if not arr: return 0 incl = arr[0] # max sum including the previous element excl = 0 # max sum excluding the previous element for i in range(1, len(arr)): # Current maximum excluding i (no consecutive) new_excl = max(incl, excl) # Current max including i incl = excl + arr[i] excl = new_excl return max(incl, excl) def process_sequences(sequences): Process multiple sequences to calculate their maximum non-consecutive sums. results = [] for seq in sequences: seq = list(map(int, seq.split())) result = max_non_consecutive_sum(seq) results.append(result) return results"},{"question":"Database Table Management You are tasked with managing a database table that stores information about books. The table schema includes the following fields: BookID (integer), Title (string), Author (string), Genre (string), and YearPublished (integer). Your objective is to implement several functionalities as methods in a class called `Library`, which manages this table. Use a list of dictionaries to represent the table data in memory. Each dictionary represents a row in the table, with keys corresponding to column names. You need to implement the following methods in the `Library` class: 1. **add_book(self, book_info)** - Adds a new book to the library. - `book_info` is a dictionary containing keys: \'BookID\', \'Title\', \'Author\', \'Genre\', and \'YearPublished\'. 2. **find_books_by_author(self, author)** - Returns a list of books by the specified author. - `author` is a string representing the author\'s name. 3. **update_book(self, book_id, field, new_value)** - Updates the specified field of a book with a given `BookID`. - `book_id` is an integer representing the BookID to be updated. - `field` is a string specifying which field to update (\'Title\', \'Author\', \'Genre\', or \'YearPublished\'). - `new_value` is the new value to set for the specified field. 4. **delete_book(self, book_id)** - Deletes the book with the specified `BookID`. - `book_id` is an integer representing the BookID of the book to be deleted. 5. **get_all_books(self)** - Returns a list of all books in the library. # Example Usage ```python # Sample data books_data = [ {\\"BookID\\": 1, \\"Title\\": \\"To Kill a Mockingbird\\", \\"Author\\": \\"Harper Lee\\", \\"Genre\\": \\"Fiction\\", \\"YearPublished\\": 1960}, {\\"BookID\\": 2, \\"Title\\": \\"1984\\", \\"Author\\": \\"George Orwell\\", \\"Genre\\": \\"Dystopian\\", \\"YearPublished\\": 1949}, {\\"BookID\\": 3, \\"Title\\": \\"The Great Gatsby\\", \\"Author\\": \\"F. Scott Fitzgerald\\", \\"Genre\\": \\"Fiction\\", \\"YearPublished\\": 1925} ] library = Library(books_data) # Adding a new book library.add_book({\\"BookID\\": 4, \\"Title\\": \\"Brave New World\\", \\"Author\\": \\"Aldous Huxley\\", \\"Genre\\": \\"Dystopian\\", \\"YearPublished\\": 1932}) # Finding books by author print(library.find_books_by_author(\'George Orwell\')) # Updating a book\'s title library.update_book(2, \'Title\', \'Nineteen Eighty-Four\') # Deleting a book library.delete_book(1) # Getting all books print(library.get_all_books()) ``` # Expected Output ``` [{\'BookID\': 2, \'Title\': \'1984\', \'Author\': \'George Orwell\', \'Genre\': \'Dystopian\', \'YearPublished\': 1949}] [{\'BookID\': 2, \'Title\': \'Nineteen Eighty-Four\', \'Author\': \'George Orwell\', \'Genre\': \'Dystopian\', \'YearPublished\': 1949}, {\'BookID\': 3, \'Title\': \'The Great Gatsby\', \'Author\': \'F. Scott Fitzgerald\', \'Genre\': \'Fiction\', \'YearPublished\': 1925}, {\'BookID\': 4, \'Title\': \'Brave New World\', \'Author\': \'Aldous Huxley\', \'Genre\': \'Dystopian\', \'YearPublished\': 1932}] ``` Implement the `Library` class with the specified methods to manage book records effectively.","solution":"class Library: def __init__(self, books_data=None): if books_data is None: books_data = [] self.books = books_data def add_book(self, book_info): Adds a new book to the library. self.books.append(book_info) def find_books_by_author(self, author): Returns a list of books by the specified author. return [book for book in self.books if book[\\"Author\\"] == author] def update_book(self, book_id, field, new_value): Updates the specified field of a book with a given BookID. for book in self.books: if book[\\"BookID\\"] == book_id: if field in book: book[field] = new_value break def delete_book(self, book_id): Deletes the book with the specified BookID. self.books = [book for book in self.books if book[\\"BookID\\"] != book_id] def get_all_books(self): Returns a list of all books in the library. return self.books"},{"question":"Problem Statement In a warehouse, products are organized in a grid of cells with rows and columns. Each cell contains a certain number of products which can be either retrieved or deposited into the warehouse. The goal is to process a series of operations on the grid to manage the product inventory. Each operation is described by a string in the format \\"operation row column amount\\". The operations can be of two types: \\"deposit\\" or \\"retrieve\\". The \\"deposit\\" operation adds a certain amount of products to the specified cell, while the \\"retrieve\\" operation subtracts the specified amount from the specified cell. If a retrieve operation tries to subtract more products than are currently present in the cell, it should only subtract the available number of products. Your task is to process a sequence of operations and, after all operations are processed, print out the resulting state of the warehouse grid. * * * Input The input contains several operations. The input is terminated by a line containing a single \\"#\\". Each operation line consists of four fields: a string (\\"deposit\\" or \\"retrieve\\"), two integers (representing the row and column of the cell), and another integer (the amount of products to be deposited or retrieved). The grid has at most 1000 rows and 1000 columns, and all rows and columns are 0-indexed. Each operation amount is a non-negative integer. Output For each operation, print the resulting state of the warehouse grid after processing that operation. Each cell should be printed as a row of space-separated integers. * * * Sample Input deposit 0 0 50 deposit 0 1 30 retrieve 0 0 20 retrieve 0 1 40 deposit 1 0 10 # * * * Sample Output 30 30 0 0 10 Example Input deposit 0 0 50 deposit 0 1 30 retrieve 0 0 20 retrieve 0 1 40 deposit 1 0 10 # Output 30 30 0 0 10","solution":"def process_operations(operations): # Initialize a 1000x1000 grid grid = [[0 for _ in range(1000)] for _ in range(1000)] for operation in operations: # Split the operation into its components op = operation.split() if not op or op[0] == \'#\': return grid command, row, col, amount = op[0], int(op[1]), int(op[2]), int(op[3]) if command == \\"deposit\\": grid[row][col] += amount elif command == \\"retrieve\\": grid[row][col] = max(0, grid[row][col] - amount) return grid"},{"question":"Given a 2D grid of characters where each cell can contain one of the following characters: \'1\', \'2\', or \'3\'. You are to navigate through the grid following these specific rules: 1. Starting from the top-left corner (0,0). 2. If you encounter a \'1\', you must move right one cell. 3. If you encounter a \'2\', you must move down one cell. 4. If you encounter a \'3\', you must move diagonally to the bottom right (i.e., move to cell (row+1, col+1)). The task is to determine if you can successfully navigate from the top-left corner to the bottom-right corner following the aforementioned movement rules. # Input Format - The first line contains two integers `R` and `C` the number of rows and columns of the grid. - The next `R` lines each contain `C` characters, forming the grid. # Constraints - 1 leq R, C leq 2000 # Output Format - Output \\"YES\\" if you can reach the bottom-right corner from the top-left corner, otherwise output \\"NO\\". # Sample Input 0 3 3 1 1 2 2 1 2 3 2 3 # Sample Output 0 YES # Explanation Starting at (0,0), the path is: 1 (right) -> 2 (down) -> 1 (right) -> 3 (diagonal) -> 3 (diagonal), reaching bottom-right corner. # Sample Input 1 3 3 1 1 3 2 1 2 3 2 3 # Sample Output 1 NO # Explanation Starting at (0,0), the only path is: 1 (right) -> 1 (right) -> 3 (diagonal), but this leaves us outside the grid and unable to reach the bottom-right corner. Hence, the output is \\"NO\\".","solution":"def can_navigate_to_bottom_right(grid): Determine whether it\'s possible to navigate from the top-left corner to the bottom-right corner of the grid following the specific movement rules. :param grid: List of List of characters, representing the 2D grid. :returns: \\"YES\\" or \\"NO\\" based on whether it\'s possible to reach the bottom-right corner. R = len(grid) C = len(grid[0]) def is_valid(x, y): Check if the coordinates are within the grid bounds. return 0 <= x < R and 0 <= y < C x, y = 0, 0 while is_valid(x, y): if (x, y) == (R-1, C-1): return \\"YES\\" if grid[x][y] == \'1\': y += 1 elif grid[x][y] == \'2\': x += 1 elif grid[x][y] == \'3\': x += 1 y += 1 else: # In case we encounter an invalid character, we stop return \\"NO\\" return \\"NO\\""},{"question":"You are given the names of two files. Each file contains a list of integers, one per line. Your task is to merge these two lists into a single sorted list and write the sorted integers into a new file named \\"merged.txt\\". Ensure the output file contains no duplicate entries and that the integers are written in ascending order. Input Two lines, each containing the path to a file. Each file contains one integer per line. Every integer in the files will be in the range from -10^6 to 10^6. Each file contains at most 1000 integers. Output Write the sorted list of unique integers into a file named \\"merged.txt\\". Each integer should be on a new line. Example Input path/to/file1.txt path/to/file2.txt Content of path/to/file1.txt 3 5 8 12 Content of path/to/file2.txt 1 3 5 7 10 Output in \\"merged.txt\\" 1 3 5 7 8 10 12","solution":"def merge_sorted_files(file1_path, file2_path): Merge two files containing lists of integers into a single sorted list with unique entries, and write the result to a file named \\"merged.txt\\". numbers = set() # Read numbers from the first file with open(file1_path, \'r\') as file1: for line in file1: numbers.add(int(line.strip())) # Read numbers from the second file with open(file2_path, \'r\') as file2: for line in file2: numbers.add(int(line.strip())) # Write the sorted unique numbers to the output file with open(\'merged.txt\', \'w\') as merged_file: for number in sorted(numbers): merged_file.write(f\\"{number}n\\")"},{"question":"A company wants to give a bonus to its employees based on their years of service and performance rating. The criteria for receiving the bonus are as follows: - An employee must have at least N years of service. - The performance rating must be greater than or equal to R. Given the number of years of service and the performance rating for an employee, determine whether the employee is eligible for a bonus. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, containing three integers N, R, and S as described above. ------ Output Format ------ For each test case, output YES if the employee is eligible for a bonus, NO otherwise. You may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 30 1 ≤ R ≤ 10 0 ≤ S ≤ 50 ----- Sample Input 1 ------ 4 5 7 10 3 5 5 10 8 12 6 6 4 ----- Sample Output 1 ------ YES YES YES NO ----- Explanation 1 ------ Test case 1: The employee has 10 years of service and a performance rating of 7. Both conditions are satisfied (10 ≥ 5 and 7 ≥ 7). Therefore, the employee is eligible for the bonus. Test case 2: The employee has 5 years of service and a performance rating of 5. Both conditions are satisfied (5 ≥ 3 and 5 ≥ 5). Therefore, the employee is eligible for the bonus. Test case 3: The employee has 12 years of service and a performance rating of 8. Both conditions are satisfied (12 ≥ 10 and 8 ≥ 8). Therefore, the employee is eligible for the bonus. Test case 4: The employee has 4 years of service and a performance rating of 6. The performance rating condition is satisfied, but the years of service condition is not met (4 < 6). Therefore, the employee is not eligible for the bonus.","solution":"def is_eligible_for_bonus(N, R, S): Determines if an employee is eligible for a bonus based on years of service N, required ratings R, and service years S. :param N: Minimum years of service required :param R: Minimum performance rating required :param S: Actual years of service of the employee :return: \\"YES\\" if the employee is eligible for bonus, \\"NO\\" otherwise return \\"YES\\" if S >= N and R <= 50 else \\"NO\\" def determine_bonus_eligibility(test_cases): results = [] for N, R, S in test_cases: results.append(is_eligible_for_bonus(N, R, S)) return results # Parsing input function for testing def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [tuple(map(int, line.split())) for line in lines[1:T + 1]] return test_cases"},{"question":"# Minimum Steps to One The ancient curse of the number one strikes again! In this challenge, you must help our hero climb down from the number `n` to 1 using specific rules. Given that our hero can either: 1. Subtract 1 from the current number. 2. Divide the current number by 2 (if the number is even). 3. Divide the current number by 3 (if the number is divisible by 3). Write a function `min_steps_to_one` that takes a single integer `n` and returns the minimum number of steps required to reach 1 using the allowed operations. # Task Implement the function `min_steps_to_one(n)` that computes the minimum number of steps needed to reduce the input `n` to 1. # Examples ```python min_steps_to_one(1) == 0 # Already at 1 min_steps_to_one(10) == 3 # 10 -> 9 -> 3 -> 1 min_steps_to_one(15) == 4 # 15 -> 5 -> 4 -> 2 -> 1 min_steps_to_one(6) == 2 # 6 -> 2 -> 1 min_steps_to_one(20) == 4 # 20 -> 19 -> 18 -> 6 -> 2 -> 1 ``` # Guidelines - You cannot use any specific library functions for this problem. - Use recursion or dynamic programming techniques to optimize the solution. - Consider edge cases such as `n` being very small or very large (within reasonable limits for typical integer operations).","solution":"def min_steps_to_one(n): Computes the minimum number of steps needed to reduce the input n to 1. Parameters: n (int): The number to be reduced to 1. Returns: int: The minimum number of steps required to reduce n to 1. if n == 1: return 0 # Initialize a memoization table to store results of subproblems memo = {1: 0} # Define the recursive helper function with memoization def helper(x): if x in memo: return memo[x] # Step by subtracting 1 steps = helper(x - 1) + 1 # Step by dividing by 2 if x is even if x % 2 == 0: steps = min(steps, helper(x // 2) + 1) # Step by dividing by 3 if x is divisible by 3 if x % 3 == 0: steps = min(steps, helper(x // 3) + 1) memo[x] = steps return steps return helper(n)"},{"question":"You are given a series of commands to operate on a list of integers. Your task is to maintain and manipulate this list according to the commands provided, and return the final list after processing all commands. The commands can be of the following types: 1. `append x`: Append integer `x` to the end of the list. 2. `insert i x`: Insert integer `x` at position `i` in the list. If `i` is greater than the length of the list, append `x` to the list. 3. `remove x`: Remove the first occurrence of integer `x` from the list. If `x` is not present, do nothing. 4. `pop`: Remove the last element from the list. If the list is empty, do nothing. 5. `print`: Print the current state of the list. # Input - The first line contains an integer `n`, the number of commands. - The next `n` lines each contain a command from the list above. # Output - For each `print` command, output the current state of the list. # Example Input ``` 7 append 1 append 2 append 3 insert 1 4 print remove 2 print ``` Output ``` [1, 4, 2, 3] [1, 4, 3] ``` # Notes - The commands are guaranteed to be properly formatted. - The list should be empty initially. - The positions in the list are zero-indexed. - Ensure efficient handling of large numbers of commands and varying list lengths. By: [Your Name]","solution":"def process_commands(n, commands): lst = [] output = [] for command in commands: parts = command.split() cmd = parts[0] if cmd == \'append\': x = int(parts[1]) lst.append(x) elif cmd == \'insert\': i = int(parts[1]) x = int(parts[2]) if i >= len(lst): lst.append(x) else: lst.insert(i, x) elif cmd == \'remove\': x = int(parts[1]) if x in lst: lst.remove(x) elif cmd == \'pop\': if lst: lst.pop() elif cmd == \'print\': output.append(lst.copy()) return output"},{"question":"------ Input ------ The first line of input contains a single integer T, representing the number of test cases. Each test case is described in the following manner: - The first line contains a single integer N, the number of cities. - The next N lines each contain three integers x, y, and z representing the coordinates of a treasure and a danger rating of that treasure, respectively (1 ≤ x, y ≤ 1000 and 1 ≤ z ≤ 100). ------ Output ------ For each test case, print the maximum number of treasures that can be collected such that the total danger rating does not exceed S. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 200 1 ≤ S ≤ 10000 ------ Example ------ Input: 2 3 1 2 3 4 5 6 7 8 9 4 1 2 2 2 3 4 4 5 2 5 6 8 Output: 3 3 ------ Explanation ------ In the first case, the coordinates of the cities are (1, 2) with danger rating 3, (4, 5) with danger rating 6, (7, 8) with danger rating 9. The total danger rating is 3 + 6 + 9 = 18 which does not exceed the limit S. In the second case, the coordinates of the cities are (1, 2) with danger rating 2, (2, 3) with danger rating 4, (4, 5) with danger rating 2, (5, 6) with danger rating 8. The maximum number of treasures that can be collected such that the total danger rating does not exceed the specified limit S is 3.","solution":"def max_treasures(test_cases): results = [] for case in test_cases: N, S, treasures = case[\'N\'], case[\'S\'], case[\'treasures\'] treasures.sort(key=lambda x: x[2]) # Sort by danger rating total_danger = 0 count = 0 for treasure in treasures: if total_danger + treasure[2] <= S: total_danger += treasure[2] count += 1 else: break results.append(count) return results"},{"question":"In a distant future, a new form of interplanetary communication called \\"Orbital Link\\" has been established. An Orbital Link is represented by a binary tree, with each node containing an integer value. To ensure message integrity, a mechanism called \\"Link Checksum\\" is used. The Checksum is determined by finding the maximum sum of values from the root of the tree to any leaf node. Your task is to write a program that calculates the Link Checksum for a given binary tree. Input The first line contains an integer N, the number of nodes in the tree (1 ≤ N ≤ 1000). Each of the following N lines contains three integers v, l, and r, representing a node\'s value v, the index of its left child l, and the index of its right child r. If a node does not have a left or right child, the value of l or r will be -1. Output Print the maximum sum of values from the root to any leaf node. Example Input 5 10 1 2 5 -1 -1 12 3 4 6 -1 -1 7 -1 -1 Output 29 Explanation The tree structure is as follows: 10 / 5 12 / 6 7 The maximum sum from the root to any leaf is 10 -> 12 -> 7, which equals 29.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): if not nodes: return None node_list = [None] * len(nodes) for i, (v, l, r) in enumerate(nodes): if node_list[i] is None: node_list[i] = TreeNode(v) else: node_list[i].val = v if l != -1: if node_list[l] is None: node_list[l] = TreeNode() node_list[i].left = node_list[l] if r != -1: if node_list[r] is None: node_list[r] = TreeNode() node_list[i].right = node_list[r] return node_list[0] def max_root_to_leaf_sum(root): if not root: return 0 left_sum = max_root_to_leaf_sum(root.left) right_sum = max_root_to_leaf_sum(root.right) return root.val + max(left_sum, right_sum) def orbital_link_checksum(n, nodes): root = build_tree(nodes) return max_root_to_leaf_sum(root)"},{"question":"You are given the root of a binary tree. You need to determine the maximum depth of the binary tree. The depth of a binary tree is the length of the longest path from the root node to a leaf. This path may or may not pass through the root. Input: First line of input contains the number of test cases T. For each test case, there will be only a single line of input which is a string representing the tree as described below: The values in the string are in the order of level order traversal of the tree where, numbers denote node values, and a character “N” denotes NULL child. For example: For the tree: 3 / 9 20 / 15 7 The string will be: 3 9 20 N N 15 7 Output: For each test case in new line, print the maximum depth of the binary tree. User Task: Since this is a functional problem, you don\'t have to worry about input, you just have to complete the function maxDepth(). Constraints: 1 <= T <= 30 1 <= N <= 10^{4} Example: Input: 2 3 9 20 N N 15 7 1 2 3 N 4 N 5 N N 6 7 Output: 3 4 Explanation: Testcase 1: Given Tree is : 3 / 9 20 / 15 7 The maximum depth is 3. Testcase 2: Given Tree is : 1 / 2 3 4 5 6 7 The maximum depth is 4.","solution":"class TreeNode: Definition for a binary tree node. def __init__(self, x): self.val = x self.left = None self.right = None def buildTree(nodes): Helper function to build a tree from the level order traversal list. if not nodes or nodes[0] == \\"N\\": return None root = TreeNode(int(nodes[0])) queue = [root] i = 1 while queue and i < len(nodes): current = queue.pop(0) if nodes[i] != \\"N\\": current.left = TreeNode(int(nodes[i])) queue.append(current.left) i += 1 if i < len(nodes) and nodes[i] != \\"N\\": current.right = TreeNode(int(nodes[i])) queue.append(current.right) i += 1 return root def maxDepth(root): Function to calculate the maximum depth of a binary tree, given its root. if not root: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1 def solve_max_depth(test_cases): Function to determine the maximum depth from a list of test cases representing the trees in level order traversal as strings. results = [] for case in test_cases: nodes = case.split() root = buildTree(nodes) depth = maxDepth(root) results.append(depth) return results"},{"question":"You are working on a logging system where each event is recorded with a specific timestamp in seconds. Your task is to determine if a sequence of events is monotonically increasing based on their timestamps. A sequence is considered monotonically increasing if and only if for every event, the next event in the sequence has a timestamp greater than or equal to the current event. The logging system can sometimes receive multiple batches of timestamps, and you need to check each batch separately. ------ Input Format ------ - First line will contain T, number of batches of timestamps. Then the batches follow. - Each batch starts with an integer N, the number of timestamps in the batch. - The next line contains N integers, representing the timestamps of the events in the batch. ------ Output Format ------ For each batch, print \\"YES\\" if the sequence is monotonically increasing, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} 0 ≤ timestamp ≤ 10^{9} ----- Sample Input 1 ------ 3 5 1 2 3 4 5 4 3 2 3 4 3 10 10 10 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: All timestamps are in strict increasing order, hence the output is \\"YES\\". Test case 2: The second timestamp is less than the first, hence the sequence is not monotonically increasing, and the output is \\"NO\\". Test case 3: All timestamps are the same which also satisfies the condition of monotonically increasing, hence the output is \\"YES\\".","solution":"def is_monotonically_increasing(timestamps): Returns \'YES\' if the sequence of timestamps is monotonically increasing, otherwise returns \'NO\'. for i in range(1, len(timestamps)): if timestamps[i] < timestamps[i - 1]: return \'NO\' return \'YES\' def check_batches_of_timestamps(batches): Given a list of batches of timestamps, returns a list of \'YES\' or \'NO\' for each batch indicating if the sequence in that batch is monotonically increasing. results = [] for batch in batches: results.append(is_monotonically_increasing(batch)) return results def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) idx = 1 batches = [] for _ in range(T): N = int(lines[idx]) timestamps = list(map(int, lines[idx + 1].split())) batches.append(timestamps) idx += 2 return check_batches_of_timestamps(batches)"},{"question":"Given a string containing just the characters \'(\' and \')\', write a function to determine the minimum number of parentheses to be added to make it valid (balanced). A string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. For example: ```python balance_parentheses(\\"()\\") == 0 balance_parentheses(\\"(()\\") == 1 balance_parentheses(\\"())\\") == 1 balance_parentheses(\\"))(\\") == 3 ``` The function should take a single input string containing only \'(\' and \')\' and return an integer representing the minimum number of parentheses needed to make the string valid. To achieve an efficient solution, aim for a time complexity of O(n), where n is the length of the input string.","solution":"def balance_parentheses(s): Determines the minimum number of parentheses to be added to make the string valid. Parameters: s (str): A string containing only \'(\' and \')\' Returns: int: The minimum number of parentheses needed to make the string valid. # Initialize counters for the left and right parentheses left_balance = 0 right_balance = 0 # Traverse the string to determine the imbalance for char in s: if char == \'(\': left_balance += 1 else: # char == \')\' if left_balance > 0: left_balance -= 1 else: right_balance += 1 # The total imbalance is the sum of left and right imbalances return left_balance + right_balance"},{"question":"Given a list of `n` words, you need to find the most frequent word in the list. If there are multiple words with the same maximum frequency, return the lexicographically smallest word among them. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 1000). Each of the next `n` lines contains a single word consisting of lowercase letters (1 ≤ length of the word ≤ 100). -----Output----- Output a single word — the most frequent word in the list. If there are multiple words with the same maximum frequency, output the lexicographically smallest one. -----Examples----- Input 5 apple banana apple orange banana Output apple Input 4 apple orange banana banana Output banana -----Note----- In the first test example, \\"apple\\" and \\"banana\\" both appear 2 times, but \\"apple\\" is lexicographically smaller than \\"banana\\", so the output is \\"apple\\". In the second test example, \\"banana\\" is the most frequent word, appearing twice, so the output is \\"banana\\".","solution":"from collections import Counter def most_frequent_word(n, words): Returns the most frequent word in the list. If there are multiple words with the same maximum frequency, returns the lexicographically smallest word among them. word_counts = Counter(words) # Get the maximum frequency max_freq = max(word_counts.values()) # Collect all words with the maximum frequency candidates = [word for word, count in word_counts.items() if count == max_freq] # Return the lexicographically smallest word return min(candidates) # Example usage: # n = 5 # words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\"] # print(most_frequent_word(n, words)) # Output: apple"},{"question":"Bob is trying to plan the seating arrangement for a conference. The conference room has N seats arranged in a single line. To avoid any disputes, Bob wants to ensure a minimum distance of K seats between any two attendees. He wants to calculate the maximum number of attendees that can be seated in the room. Your task is to write a program that, given N and K, calculates the maximum number of attendees that can be seated with at least K seats between them. Input The first line contains T - the number of test cases. Then T test cases follow. Each test case contains two integers N and K. Output Output T lines, each containing the maximum number of attendees that can be seated in the room for the corresponding test case. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^9 0 ≤ K ≤ 10^9 SAMPLE INPUT 3 10 2 5 1 7 0 SAMPLE OUTPUT 4 3 7 Explanation For the first test case, with N=10 and K=2, the attendees will be seated in seats 1, 4, 7, and 10, which maximizes the number without any two attendees sitting within 2 seats of each other. The result is 4. For the second test case, with N=5 and K=1, the attendees will be seated in seats 1, 3, and 5. The result is 3. For the third test case, with N=7 and K=0, every seat can be occupied since no minimum distance is required. The result is 7.","solution":"def max_attendees(N, K): Calculates the maximum number of attendees that can be seated in the room with at least K seats of distance between them. if K == 0: return N return (N + (K + 1) - 1) // (K + 1) def solve(test_cases): results = [] for N, K in test_cases: results.append(max_attendees(N, K)) return results"},{"question":"The kingdom of Zog has a new way to determine promotions within their guilds. Guild members must demonstrate their coding prowess by solving a special problem. The problem is to identify the longest substring of a given word where all the characters are the same. Elena, a promising young developer, is tasked with creating a function that helps solve this problem. She will write a program that takes a number of test cases and for each test case, identifies and returns the length of the longest substring where all characters are the same. ------ Input ------ The first line of input contains T, the number of test cases. Each of the next T lines contains a string S, representing a word. ------ Output ------ For each input string S, output the length of the longest substring where all characters are the same. ------ Constraints ------ 1 ≤ T ≤ 15 1 ≤ length of S ≤ 10^5 The string S consists only of lowercase English letters. ----- Sample Input 1 ------ 2 aaabbc abcd ----- Sample Output 1 ------ 3 1 (Note: In the first test case, \'aaa\' is the longest substring with the same character. In the second test case, since there are no repeated characters, the longest such substring is any single character, which has a length of 1.)","solution":"def longest_same_char_substring_length(word): Finds the length of the longest substring where all characters are the same. max_length = 1 current_length = 1 for i in range(1, len(word)): if word[i] == word[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length) def process_test_cases(test_cases): Processes multiple test cases and returns a list with the lengths of the longest same-character substrings for each word. return [longest_same_char_substring_length(tc) for tc in test_cases]"},{"question":"In a restaurant, m waiters need to serve customers who are seated in a consecutive row of n tables. The ith waiter can serve any table from li to ri (both inclusive). Determine the minimum number of waiters required to serve all tables or output -1 if it\'s not possible. Input Format On the first line, you will get two integers, n and m, representing the number of tables and the number of waiters respectively. Then m lines follow, each containing two integers li and ri, representing the range of tables that the ith waiter can serve. Output Format Print the minimum number of waiters needed to serve all tables or -1 if it is not possible. Constraints 1 ≤ n ≤ 1000 1 ≤ m ≤ 1000 1 ≤ li ≤ ri ≤ n SAMPLE INPUT 5 3 1 2 2 5 4 5 SAMPLE OUTPUT 2 Explanation The first waiter can serve tables 1 to 2, the second waiter can serve tables 2 to 5, and the third waiter can serve tables 4 to 5. Using the first and second waiters would cover all tables from 1 to 5. Hence, the minimum number of waiters required is 2.","solution":"def minimum_waiters(n, m, waiters): Determine the minimum number of waiters required to serve all tables or output -1 if it\'s not possible. n : int : number of tables m : int : number of waiters waiters : list of tuples : each tuple contains two integers li and ri representing the range of tables that the ith waiter can serve return : int : minimum number of waiters needed to serve all tables or -1 if it is not possible # Sort waiters by the starting table and then by the ending table waiters.sort() total_covered = 0 last_covered = 0 i = 0 used_waiters = 0 while total_covered < n: best_next_coverage = -1 while i < m and waiters[i][0] <= total_covered + 1: if waiters[i][1] > best_next_coverage: best_next_coverage = waiters[i][1] i += 1 if best_next_coverage <= total_covered: return -1 total_covered = best_next_coverage used_waiters += 1 return used_waiters"},{"question":"You are given a list of integers. Your task is to sort this list in a special way such that all the even numbers appear before the odd numbers, and within the even and odd values, the numbers are sorted in ascending order. Write a function `specialSort` that takes a list of integers and returns the sorted list as described above. ```python For example: specialSort([4, 3, 1, 2, 5]) -> [2, 4, 1, 3, 5] specialSort([10, 9, 8, 7, 6]) -> [6, 8, 10, 7, 9] specialSort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 4, 6, 8, 10, 1, 3, 5, 7, 9] All integers in the list will be within the range `-10^6` to `10^6`, and the length of the list will be `0 <= length <= 5000`. More examples in test cases. Good luck! ```","solution":"def specialSort(arr): Given a list of integers, sort the list such that all the even numbers appear before the odd numbers, and within the even and odd values, the numbers are sorted in ascending order. evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0]) return evens + odds"},{"question":"You are given two arrays `nums1` and `nums2` of size `m` and `n` respectively, where `nums1` has been initially filled with `m` elements and has enough space to hold a total of `m + n` elements. Merge `nums2` into `nums1` so that the final combined array is sorted in non-decreasing order. Example 1: Input: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: After merging, the array should be: [1,2,2,3,5,6]. Example 2: Input: nums1 = [1], m = 1 nums2 = [], n = 0 Output: [1] Explanation: There is nothing to merge, so the final array is: [1]. Your Task: You need to implement the function `merge(nums1: List[int], m: int, nums2: List[int], n: int) -> None` which merges `nums2` into `nums1` in-place. The final output should be a single sorted array stored in `nums1`. Note: The result should be stored in `nums1`, which may be longer to accommodate the combined elements. Expected Time Complexity: O(m + n) Expected Auxiliary Space: O(1) Constraints: - 0 <= m, n <= 10^3 - 1 <= nums1[i], nums2[i] <= 10^6","solution":"from typing import List def merge(nums1: List[int], m: int, nums2: List[int], n: int) -> None: Merges nums2 into nums1 in-place to create a sorted array. # Initialize two pointers for nums1 and nums2 respectively p1 = m - 1 p2 = n - 1 # Pointer for the end of nums1 array (the combined length) p = m + n - 1 # While there are elements in nums2 while p2 >= 0: if p1 >= 0 and nums1[p1] > nums2[p2]: nums1[p] = nums1[p1] p1 -= 1 else: nums1[p] = nums2[p2] p2 -= 1 p -= 1"},{"question":"Ada the Adventurer is on a quest to a mystical land. She comes across an ancient scroll that describes a sequence of spells. Each spell is composed of a series of magical runes represented by lowercase letters \'a\' to \'z\'. Ada decides to create a new spell by merging two given spells together. The process of merging two spells involves interleaving their runes such that the relative order of runes in each individual spell is preserved. For example, merging the spells \\"abc\\" and \\"def\\" could produce \\"adbecf\\", \\"abcdef\\", \\"abdecf\\", etc. Given two spells, determine if a given target spell can be obtained by merging these two spells in any order such that the relative order of runes in the original spells is maintained. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. For each test case: - The first line contains a single string spell1 (1 le |spell1| le 100) — the first spell. - The second line contains a single string spell2 (1 le |spell2| le 100) — the second spell. - The third line contains a single string target (1 le |target| le 200) — the target spell to check. -----Output----- For each test case, print \\"YES\\" if the target spell can be obtained by merging the two given spells while maintaining the relative order of runes in each, otherwise print \\"NO\\". -----Examples----- Input 4 abc def adbecf abc def adbcef aa bb aabbbb ab bc bbca Output YES YES NO NO -----Note----- In the first example, \\"adbecf\\" can be produced by interleaving the runes of \\"abc\\" and \\"def\\" while maintaining their relative order: - \'a\' from \\"abc\\" - \'d\' from \\"def\\" - \'b\' from \\"abc\\" - \'e\' from \\"def\\" - \'c\' from \\"abc\\" - \'f\' from \\"def\\" In the second example, \\"adbcef\\" can be produced by interleaving the runes of \\"abc\\" and \\"def\\": - \'a\' from \\"abc\\" - \'d\' from \\"def\\" - \'b\' from \\"abc\\" - \'c\' from \\"abc\\" - \'e\' from \\"def\\" - \'f\' from \\"def\\" In the third example, \\"aabbbb\\" cannot be produced by interleaving the runes of \\"aa\\" and \\"bb\\" while maintaining their relative order because there\'s an extra \'b\'. In the fourth example, \\"bbca\\" cannot be produced by interleaving the runes of \\"ab\\" and \\"bc\\" while maintaining their relative order because the \'c\' from the second spell would pair with \'b\' from the first spell, disrupting the order.","solution":"def is_merge(spell1, spell2, target): # If the lengths don\'t match, it\'s not possible to form the target spell if len(spell1) + len(spell2) != len(target): return False # dp[i][j] will be True if the target spell up to i+j can be formed by spell1 up to i and spell2 up to j dp = [[False] * (len(spell2) + 1) for _ in range(len(spell1) + 1)] dp[0][0] = True for i in range(len(spell1) + 1): for j in range(len(spell2) + 1): if i > 0 and spell1[i-1] == target[i+j-1]: dp[i][j] |= dp[i-1][j] if j > 0 and spell2[j-1] == target[i+j-1]: dp[i][j] |= dp[i][j-1] return dp[len(spell1)][len(spell2)] def process_cases(t, cases): results = [] for i in range(t): spell1, spell2, target = cases[i] results.append(\\"YES\\" if is_merge(spell1, spell2, target) else \\"NO\\") return results"},{"question":"Anna recently learned about binary search trees (BSTs) and is excited to write a program to help her manage a collection of unique book IDs. Each book ID is represented by a positive integer. To keep things structured, Anna wants to perform operations on her BST, including adding and deleting book IDs, as well as finding the lowest common ancestor (LCA) of two given book IDs in the BST. Your task is to implement a BST with the following functionalities: 1. `insert(X)`: Insert a book ID `X` into the BST. 2. `delete(X)`: Remove the book ID `X` from the BST, if it exists. 3. `findLCA(X, Y)`: Find and return the lowest common ancestor (LCA) of the book IDs `X` and `Y` in the BST. Input format The first line of input contains a single integer `Q`, the number of operations to be performed. Each of the next `Q` lines contains an operation in one of the following formats: - `insert X` where `X` is a positive integer. - `delete X` where `X` is a positive integer. - `findLCA X Y` where `X` and `Y` are positive integers. Output format For each `findLCA` operation, print the LCA of the given book IDs `X` and `Y`. If either `X` or `Y` (or both) does not exist in the BST, print `-1`. Constraints 1 ≤ Q ≤ 50000 1 ≤ X, Y ≤ 10^6 Assume that initially, the BST is empty. Sample Input 8 insert 5 insert 2 insert 8 insert 1 insert 3 findLCA 1 3 delete 2 findLCA 1 3 Sample Output 2 1 Explanation For the given sample case, after inserting the elements, the BST looks like this: 5 / 2 8 / 1 3 The LCA of 1 and 3 is 2. After deleting 2, the BST looks like this: 5 / 3 8 / 1 The LCA of 1 and 3 is 3.","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key class BST: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = Node(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.val: if node.left is None: node.left = Node(key) else: self._insert(node.left, key) elif key > node.val: if node.right is None: node.right = Node(key) else: self._insert(node.right, key) def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, node, key): if node is None: return node if key < node.val: node.left = self._delete(node.left, key) elif key > node.val: node.right = self._delete(node.right, key) else: if node.left is None: return node.right elif node.right is None: return node.left temp = self._minValueNode(node.right) node.val = temp.val node.right = self._delete(node.right, temp.val) return node def _minValueNode(self, node): current = node while current.left is not None: current = current.left return current def findLCA(self, n1, n2): return self._findLCA(self.root, n1, n2) def _findLCA(self, node, n1, n2): if node is None or not self._find(node, n1) or not self._find(node, n2): return -1 while node: if node.val < n1 and node.val < n2: node = node.right elif node.val > n1 and node.val > n2: node = node.left else: return node.val return -1 def _find(self, node, key): if node is None: return False if node.val == key: return True elif key < node.val: return self._find(node.left, key) else: return self._find(node.right, key)"},{"question":"You are given an array of n integers. Each element in the array can be either 0 or 1. You are allowed to perform at most one operation on the array, in which you can flip any subarray (i.e., change all 0s to 1s and all 1s to 0s in that subarray). Your task is to maximize the number of 1s in the array after exactly one flip operation. For example, if the initial array is [1, 0, 0, 1, 0, 1, 1, 0], you can choose to flip the subarray from index 1 to 4 (0-based), and the array would become [1, 1, 1, 0, 1, 1, 1, 0], which has 6 ones. Remember that you are allowed to perform exactly one flip operation on a subarray (including the possibility of flipping an empty subarray, in which case the array will not change). Write a function `maximizeOnes` that takes in an integer n and a list of n integers (the given array), and returns an integer representing the maximum number of 1s that can be obtained after at most one flip operation. -----Input----- - The first line contains a single integer t (1 le t le 100) - number of test cases. - The next 2t lines contain the test cases. Each test case consists of: - A single integer n (1 le n le 1000) - the length of the array. - A single line with n integers (either 0 or 1 separated by spaces) - the given array. -----Output----- - For each test case, output the maximum number of 1s that can be obtained after exactly one flip operation. -----Examples----- Input 3 8 1 0 0 1 0 1 1 0 5 0 0 0 0 0 4 1 1 1 1 Output 6 4 4 -----Note----- In the first test case, flipping the subarray [0, 0, 1, 0] to [1, 1, 0, 1], we get 6 ones. In the second test case, flipping the entire subarray to [1, 1, 1, 1, 1], we get 4 ones. In the third test case, flipping an empty subarray keeps the array the same, which has 4 ones.","solution":"def maximizeOnes(n, arr): This function maximizes the number of 1s in the array after at most one flip operation. current_ones = sum(arr) max_diff = 0 current_diff = 0 for i in range(n): # Flipping 1 to -1 and 0 to 1 to calculate the maximum subarray sum value = 1 if arr[i] == 0 else -1 current_diff += value if current_diff > max_diff: max_diff = current_diff if current_diff < 0: current_diff = 0 # If max_diff is 0, it means the best option is not to flip any subarray max_ones = current_ones + max_diff return max_ones def process_cases(t, cases): results = [] for i in range(t): n, arr = cases[i] results.append(maximizeOnes(n, arr)) return results"},{"question":"You are given a sequence of operations to be performed on an initially empty stack. Each operation is one of the following types: - `PUSH x` - Push the integer `x` onto the stack. - `POP` - Pop the element from the top of the stack. If the stack is empty, ignore this operation. - `INC k v` - Increment the bottom `k` elements of the stack by the value `v`. If there are fewer than `k` elements in the stack, increment all elements. Your task is to simulate the sequence of operations and print the top value of the stack after each operation. If the stack is empty, print \\"EMPTY\\". Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 100 000) — the number of operations. Each of the next `n` lines contains one of the following operations: - `PUSH x` where `x` (1 ≤ x ≤ 100 000) is an integer. - `POP` - `INC k v` where `k` (1 ≤ k ≤ n) is the number of bottom elements and `v` (0 ≤ v ≤ 100 000) is the increment value. Output Print `n` lines. Each line should contain a string — the top value of the stack after the respective operation or \\"EMPTY\\" if the stack is empty. Example Input 7 PUSH 4 PUSH 3 POP PUSH 2 INC 2 1 PUSH 5 POP Output 4 3 4 4 5 2 5 Explanation - After the first operation, the stack is [4]. The top value is 4. - After the second operation, the stack is [4, 3]. The top value is 3. - After the third operation, the stack is [4]. The top value is 4. - After the fourth operation, the stack is [4, 2]. The top value is 2. - After the fifth operation, the stack is [5, 3]. The top value is 3. - After the sixth operation, the stack is [5, 3, 5]. The top value is 5. - After the seventh operation, the stack is [5, 3]. The top value is 3.","solution":"def simulate_operations(n, operations): stack = [] results = [] for op in operations: if op.startswith(\'PUSH\'): _, x = op.split() x = int(x) stack.append(x) elif op == \'POP\': if stack: stack.pop() elif op.startswith(\'INC\'): _, k, v = op.split() k, v = int(k), int(v) for i in range(min(k, len(stack))): stack[i] += v if stack: results.append(str(stack[-1])) else: results.append(\\"EMPTY\\") return results"},{"question":"Jenna loves to collect antique coins. She has a row of n coins, each with a distinct year written on them. She wants to pick exactly two coins such that the absolute difference between the year numbers on those two coins is as small as possible. Write a function `minYearDifference` that takes an array of integers representing the years on the coins and returns the minimum difference between the years of any two coins. For example, if Jenna has coins from years `[1987, 2019, 1990, 2015, 2000]`, she can pick coins from years `1990` and `1987` because they have the smallest absolute difference of 3 compared to any other pair. Function Signature: ```python def minYearDifference(years): pass ``` # Input Format - An integer array `years` where each element represents the year on a coin, and the length of the array is n. # Output Format - Print a single integer, representing the minimum difference between the years of any two coins. # Constraints - 2 leq n leq 10^5 - 1600 leq text{years}_i leq 2023 (Assuming the coins are from the range of years 1600 to 2023) # Example Sample Input 1: ```python years = [1987, 2019, 1990, 2015, 2000] ``` Sample Output 1: ``` 3 ``` Sample Input 2: ```python years = [1880, 1901, 1975, 1999, 1882] ``` Sample Output 2: ``` 2 ``` # Explanation: - For the first example, the pairs of years and their differences are: - (1987, 2019): 32 - (1987, 1990): 3 - (1987, 2015): 28 - (1987, 2000): 13 - ... The minimum difference is 3, from the pair (1987, 1990). - For the second example, the pairs of years and their differences are: - (1880, 1901): 21 - (1880, 1975): 95 - (1880, 1999): 119 - (1880, 1882): 2 - ... The minimum difference is 2, from the pair (1880, 1882).","solution":"def minYearDifference(years): This function takes a list of integers representing the years on the coins and returns the minimum difference between the years of any two coins. # Sort the years first sorted_years = sorted(years) # Initialize the minimum difference to a large number min_diff = float(\'inf\') # Iterate through the sorted list and find the minimum difference for i in range(len(sorted_years) - 1): diff = sorted_years[i + 1] - sorted_years[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"Strings can have various fascinating patterns. One such is the \\"palindromic\\" structure where the string reads the same backward as forward. ___ # Task **_Given_** *a string*, S, **_Return_** the length of the longest palindromic substring in S. ___ # Notes * The input string S will have a length between 1 and 1000. * All characters in S are lowercase English letters. ___ # Input >> Output Examples: ___ * **Example 1:** * Input: \\"babad\\" * Output: 3 * Explanation: The longest palindromic substring is \\"bab\\" or \\"aba\\", each of length 3. * **Example 2:** * Input: \\"cbbd\\" * Output: 2 * Explanation: The longest palindromic substring is \\"bb\\", with a length of 2. * **Example 3:** * Input: \\"a\\" * Output: 1 * Explanation: The longest palindromic substring is \\"a\\", with a length of 1. * **Example 4:** * Input: \\"ac\\" * Output: 1 * Explanation: Each character in the string \\"ac\\" is a palindromic substring of length 1. ___ Enjoy Coding !!","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the input string s. n = len(s) if n == 0: return 0 dp = [[False] * n for _ in range(n)] longest_length = 1 for i in range(n): dp[i][i] = True start = 0 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: if length == 2 or dp[i + 1][j - 1]: dp[i][j] = True if length > longest_length: longest_length = length return longest_length"},{"question":"Create a function that simulates a simple voting system to elect the president of a committee. The function should calculate the winner based on two different voting systems and return the winners. In the first voting system, each member of the committee casts a vote for one candidate. The candidate with the most votes wins. If there is a tie, the winner is the candidate whose name comes first alphabetically. In the second voting system, each member ranks the candidates. Points are awarded based on ranking positions: the top-ranked candidate receives `n` points (where `n` is the number of candidates), the second-ranked receives `n-1` points, and so on, with the lowest-ranked candidate receiving 1 point. The candidate with the highest total points wins this voting system. If there is a tie, the winner is the candidate whose name comes first alphabetically. Input The first input line contains an integer `m` (1 ≤ m ≤ 100), representing the number of members in the committee. The second line contains an integer `n` (1 ≤ n ≤ 50), representing the number of candidates. The next `m` lines each contain the votes of one committee member. In the first voting system, each of these `m` lines contains a single name, which is the vote of that committee member. In the second voting system, each of these `m` lines contains `n` names separated by space, representing the ranking from highest to lowest of that committee member. Output Your output should contain exactly two lines. On the first line, print the name of the winner according to the first voting system. On the second line, print the name of the winner according to the second voting system. Examples Input 5 3 Alice Bob Alice Bob Bob Alice Bob Charlie Bob Charlie Alice Charlie Alice Bob Bob Alice Charlie Alice Charlie Bob Output Bob Alice Note In the first voting system, Bob wins with 3 votes, Alice receives 2 votes. In the second voting system, Alice has 12 points (5 + 4 + 2 + 3 + 3), Bob has 11 points (4 + 5 + 3 + 5 + 1), and Charlie has 7 points (3 + 3 + 5 + 2 + 4). So, Alice wins.","solution":"def elect_president(m, n, votes): # First voting system: count votes from collections import Counter first_votes = votes[:m] vote_counts = Counter(first_votes) first_winner = sorted(vote_counts.items(), key=lambda x: (-x[1], x[0]))[0][0] # Second voting system: calculate points from ranking points = {candidate: 0 for candidate in votes[m].split()} second_votes = votes[m:] for ranking in second_votes: ranking_list = ranking.split() for index, candidate in enumerate(ranking_list): points[candidate] += n - index second_winner = sorted(points.items(), key=lambda x: (-x[1], x[0]))[0][0] return first_winner, second_winner"},{"question":"Given an array of non-negative integers representing the heights of stacks of boxes, the task is to determine the length of the longest non-decreasing subsequence of stack heights that you can find in the array. Example 1: Input: heights = [3, 10, 2, 1, 20] Output: 3 Explanation: The longest non-decreasing subsequence is [3, 10, 20]. Example 2: Input: heights = [3, 2] Output: 1 Explanation: The longest non-decreasing subsequence is [3] or [2]. Example 3: Input: heights = [50, 3, 10, 7, 40, 80] Output: 4 Explanation: The longest non-decreasing subsequence is [3, 7, 40, 80]. Your Task: You don\'t need to read or print anything. Your task is to complete the function `longestNonDecreasingSubsequence()` which takes `heights` as input parameter and returns the length of the longest non-decreasing subsequence. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n) Constraints: 1 <= heights.length <= 1000 0 <= heights[i] <= 10^6","solution":"def longestNonDecreasingSubsequence(heights): Returns the length of the longest non-decreasing subsequence from the given list of heights using dynamic programming. n = len(heights) if n == 0: return 0 # Initialize the dp array where dp[i] will be the length of the longest # non-decreasing subsequence ending at index i dp = [1] * n # Fill dp array based on subproblems for i in range(1, n): for j in range(0, i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest non-decreasing subsequence return max(dp)"},{"question":"Alice and Bob are engaged in a card game involving decks of cards numbered from 1 to N. Alice wants to determine the smallest possible number in Bob\'s deck. Each deck consists of distinct cards ranging from 1 to N, but the cards are shuffled randomly. Alice can draw a number of different cards from Bob\'s deck to find out information about his deck. However, after each draw, all drawn cards go back into the deck and are reshuffled. Alice can only make up to 70 draws to figure out the smallest card in Bob\'s deck. Write a program that finds the smallest card number in Bob\'s deck by making as few draws as possible. **Input** The input consists of a single test case. - A single integer N (1 ≤ N ≤ 10^6) representing the total number of cards in the deck. The grading system keeps the cards\' values hidden and only reveals the drawn card after each query. **Output** For each query, output the drawn card\'s number in the format `? P`, where P is an integer (1 ≤ P ≤ N). The system provides the number of the card drawn as an integer in the input. After determining the smallest card number, output the smallest card number in the format `= X`. **Interaction Protocol** 1. The program first reads an integer N. 2. In each query, output `? P` to draw a card and receive the card number in return. 3. Continue drawing cards and receiving feedback until the smallest card number is determined. 4. Output `= X`, where X is the smallest card number found. **Operations Limit** You are allowed up to 70 queries to determine the smallest card number in Bob\'s deck. **Examples** **Input** ``` 10 ``` The system would progressively give responses based on the queries, for instance: **Output** ``` ? 5 6 ? 7 3 ? 2 8 ? 1 1 ``` Once the smallest card is found (in this example, 1), you would end with: **Output** ``` = 1 ``` Use this protocol to determine the smallest card effectively with minimal queries.","solution":"def find_smallest_card(N, draw_card_function): Function to determine the smallest card in Bob\'s deck. Params: N (int): Number of cards in the deck. draw_card_function (function): A function that takes an index and returns the drawn card number. Returns: int: The smallest card number. min_card = float(\'inf\') for _ in range(70): # Random draw from the deck; since we get shuffling, # a random index doesn\'t matter much. import random index = random.randint(1, N) drawn_card = draw_card_function(index) if drawn_card < min_card: min_card = drawn_card return min_card"},{"question":"Anna and Bob are playing a game where they take turns writing non-negative integers on a chalkboard. The game starts with Anna writing the number \'0\'. On each subsequent turn, a player can only write an integer that has not been written yet and must be the smallest possible integer that hasn\'t appeared so far. Anna begins the game and writes down the number \'0\'. Bob writes next, and then they continue alternating turns. Given a positive integer n, your task is to determine the sequence of the first n numbers written on the chalkboard. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 100000). -----Output----- Output the sequence of the first n numbers written on the chalkboard, separated by spaces. -----Examples----- Input 5 Output 0 1 2 3 4 Input 10 Output 0 1 2 3 4 5 6 7 8 9","solution":"def chalkboard_sequence(n): Returns the sequence of the first n numbers written on the chalkboard where Anna starts with 0 and both Anna and Bob can only write the smallest possible integer that has not been written yet. return list(range(n))"},{"question":"You are designing a game where you need to navigate through a grid to reach a destination while avoiding obstacles. The grid is represented by a 2D array `grid`, where \'0\' represents an open cell and \'1\' represents an obstacle. You are given the starting point `(startX, startY)` and the destination point `(endX, endY)`. You can move in four directions: up, down, left, and right. The goal is to determine the shortest path from the starting point to the destination point, avoiding all obstacles. If there is no possible path from the start to the destination, return -1. Write a function `findShortestPath(grid, startX, startY, endX, endY)` that takes in the grid and the coordinates of the starting and destination points and returns the length of the shortest path. If there is no path, return -1. Input * `grid`: A list of lists of integers representing the 2D grid (1 ≤ len(grid), len(grid[0]) ≤ 100) * `startX`: An integer representing the starting row index (0 ≤ startX < len(grid)) * `startY`: An integer representing the starting column index (0 ≤ startY < len(grid[0])) * `endX`: An integer representing the destination row index (0 ≤ endX < len(grid)) * `endY`: An integer representing the destination column index (0 ≤ endY < len(grid[0])) Output Return an integer representing the length of the shortest path from `(startX, startY)` to `(endX, endY)`. If there is no path, return -1. Examples Input grid = [ [0, 0, 0], [1, 1, 0], [0, 0, 0] ] startX = 0 startY = 0 endX = 2 endY = 2 Output 4 Input grid = [ [0, 0, 1], [1, 1, 0], [0, 0, 0] ] startX = 0 startY = 0 endX = 2 endY = 2 Output -1 Note In the first example, the shortest path is (0,0) -> (0,1) -> (1,2) -> (2,1) -> (2,2) with a path length of 4. In the second example, there is no possible path that can reach the destination due to obstacles, so the output is -1.","solution":"from collections import deque def findShortestPath(grid, startX, startY, endX, endY): Returns the length of the shortest path from (startX, startY) to (endX, endY) avoiding obstacles, or -1 if no such path exists. rows = len(grid) cols = len(grid[0]) # Directions for movements: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Initialize BFS queue = deque([(startX, startY, 0)]) # (x, y, distance) visited = set((startX, startY)) while queue: x, y, dist = queue.popleft() # Check if we have reached the destination if x == endX and y == endY: return dist # Iterate through possible movements for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If no path found return -1"},{"question":"------ Input ------ You are given an integer array of size n. Write a function that rearranges elements of an array such that all negative elements appear at the beginning, followed by all positive elements. The relative order of the elements should be maintained. ------ Input ------ - The first line of input contains an integer n denoting the size of the array. - The second line of input contains n space-separated integers representing the elements of the array. ------ Output ------ - For each test case, output the rearranged array. ------ Constraints ------ 1 ≤ n ≤ 10^5 -10^9 ≤ a[i] ≤ 10^9 ------ Sample Input 1 ------ 7 1 -2 3 -4 5 6 -7 ------ Sample Output 1 ------ -2 -4 -7 1 3 5 6 ------ Sample Input 2 ------ 5 -1 -2 -3 4 5 ------ Sample Output 2 ------ -1 -2 -3 4 5 ------ Explanation 1 ------ In the first example, the negative numbers are positioned first, maintaining their relative order, followed by the positive numbers in their respective order from the original array. In the second example, all negative numbers are already positioned at the beginning, followed by positive numbers, so the array remains unchanged.","solution":"def rearrange_array(arr): Rearranges elements of an array such that all negative elements appear at the beginning, followed by all positive elements while maintaining their relative order. Parameters: arr (list of int): The input array containing n elements. Returns: list of int: The rearranged array. negative = [x for x in arr if x < 0] positive = [x for x in arr if x >= 0] return negative + positive"},{"question":"Given a string `s` which represents a time in the format `hh:mm:ss` (24-hour format), write a function to determine if the time is a valid and non-decreasing sequence of its individual digits. Non-decreasing sequence means that each digit in the time should be equal to or greater than the previous digit. For example: - Input: \\"12:34:56\\" Output: True Explanation: The digits 1, 2, 3, 4, 5, 6 are in non-decreasing order. - Input: \\"14:32:10\\" Output: False Explanation: The digits 4, 3, 2 are not in non-decreasing order. - Input: \\"23:45:67\\" Output: False Explanation: \'67\' is not a valid part of the time format and digits 4, 5, 6 also not in non-decreasing order. Constraints: - The string `s` always has a valid time format `hh:mm:ss`. - The string length will be 8 characters. - The time range is `00:00:00` to `23:59:59`.","solution":"def is_non_decreasing_time(s): Determines if the given time in `s` is in a non-decreasing sequence of its individual digits. Parameters: s (str): A string representing time in the format \\"hh:mm:ss\\". Returns: bool: True if digits of the time are in non-decreasing order, False otherwise. # Remove the colons from the time string to extract only the digits digits = s.replace(\\":\\", \\"\\") # Iterate through the digits to check if they are in non-decreasing order for i in range(1, len(digits)): if digits[i] < digits[i - 1]: return False return True"},{"question":"Gamer is participating in an online game competition. The final score is calculated based on the number of points collected from several levels. Each level grants a certain number of points, which can only be collected once. Due to technical issues, some levels might award zero points. You are given information on the number of levels played and the points awarded for each level. Your task is to determine the total score Gamer has collected. ------ Input Format ------ - First line will contain T, the number of test cases. - Each test case starts with an integer M, the number of levels played, followed by M integers indicating the points awarded for each level. ------ Output Format ------ For each test case, output the total points collected by Gamer. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ M ≤ 100 0 ≤ text{points awarded for each level} ≤ 500 ----- Sample Input 1 ------ 3 4 10 20 30 40 5 15 0 25 10 35 3 0 0 0 ----- Sample Output 1 ------ 100 85 0 ----- Explanation 1 ------ Test Case 1: Gamer played 4 levels with points 10, 20, 30, and 40. The total points collected are 10 + 20 + 30 + 40 = 100. Test Case 2: Gamer played 5 levels with points 15, 0, 25, 10, and 35. The total points collected are 15 + 0 + 25 + 10 + 35 = 85. Test Case 3: Gamer played 3 levels with all of them awarding 0 points. The total points collected are 0 + 0 + 0 = 0.","solution":"def total_points_collected(test_cases): Returns a list of total points collected for each test case. results = [] for case in test_cases: M = case[\'M\'] points = case[\'points\'] total_points = sum(points) results.append(total_points) return results"},{"question":"You are tasked with organizing a tournament where participants compete against each other in a series of matches. Each participant can only compete in one match at a time. You want to determine the minimum number of rounds required to complete the tournament, given that each match eliminates one participant (i.e., the winner proceeds to the next round). **Input** The first line contains a single integer n (1 ≤ n ≤ 106), the number of participants in the tournament. **Output** Output a single integer — the minimum number of rounds required to determine the winner of the tournament. **Explanation** In each round, participants are paired to compete in matches (if the number of participants is odd, one participant will automatically proceed to the next round without competing). The process continues until only one participant remains, who will be declared the winner. **Examples** _Input_ 6 _Output_ 3 _Input_ 7 _Output_ 3","solution":"import math def min_rounds(n): Given the number of participants n, returns the minimum number of rounds required to complete the tournament. if n <= 1: return 0 return math.ceil(math.log2(n))"},{"question":"# Problem Statement: Building Bridges In the kingdom of Graphland, there are n towns aligned in a straight line along a river. Each town is on either the left or right bank of the river and is represented by a number indicating its position along the river. The king wishes to build bridges to connect the towns on the left bank with those on the right bank. However, to avoid any structural weaknesses, no two bridges can cross each other. Given two lists representing the positions of the towns on the left and right banks of the river, determine the maximum number of non-crossing bridges that can be built. ------ Input ------ The first line contains t, the number of test cases (1 ≤ t ≤ 100). For each test case: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of towns on the left and right banks, respectively. - The second line contains n distinct integers l1, l2, ..., ln (1 ≤ l_i ≤ 10^9), representing the positions of the towns on the left bank. - The third line contains m distinct integers r1, r2, ..., rm (1 ≤ r_i ≤ 10^9), representing the positions of the towns on the right bank. ------ Output ------ For each test case, output a single integer, the maximum number of non-crossing bridges that can be built. ----- Sample Input 1 ------ 1 4 5 1 3 5 7 2 4 6 8 10 ----- Sample Output 1 ------ 4 ----- Explanation ------ In the sample input, all towns on the left bank can be connected to a town on the right bank without any bridges crossing. Hence, 4 bridges can be built.","solution":"def max_non_crossing_bridges(test_cases): results = [] for case in test_cases: n, m, left_positions, right_positions = case left_positions.sort() right_positions.sort() i = 0 j = 0 count = 0 while i < n and j < m: if left_positions[i] <= right_positions[j]: count += 1 i += 1 j += 1 results.append(count) return results"},{"question":"Write a function `find_balance_point` that takes a list of integers as input and returns the index of the element where the sum of all elements to the left of that element is equal to the sum of all elements to the right of that element. If no such index exists, return -1. If there are multiple such indices, return the first (smallest) one. Example 1: Input: [1, 7, 3, 6, 5, 6] Output: 3 Explanation: At index 3, the sum of elements to the left (1 + 7 + 3 = 11) is equal to the sum of elements to the right (5 + 6 = 11). Example 2: Input: [1, 2, 3] Output: -1 Explanation: There is no index where the sum of elements to the left is equal to the sum of elements to the right. Example 3: Input: [2, 1, -1, 1, 2] Output: 1 Explanation: At index 1, the sum of elements to the left (2) is equal to the sum of elements to the right (-1 + 1 + 2 = 2). Your Task: You don\'t need to read or print anything. Your task is to complete the function `find_balance_point()` which takes a list of integers as input parameter and returns the index of element. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(list) <= 10^5 -10^5 <= list[i] <= 10^5","solution":"def find_balance_point(nums): Returns the index of the element where the sum of all elements to the left of that element is equal to the sum of all elements to the right of that element. If no such index exists, returns -1. total_sum = sum(nums) left_sum = 0 for i, num in enumerate(nums): # total_sum now is the sum of elements to the right of index i including nums[i] total_sum -= num if left_sum == total_sum: return i left_sum += num return -1"},{"question":"There is a tree with `n` nodes. The nodes are labeled from `1` to `n`. The tree is rooted at node `1`. Each node has a value associated with it. You need to process two types of queries: 1. `add x y`: Add the value `y` to the node `x` and all its descendants. 2. `subtract x y`: Subtract the value `y` from the node `x` and all its descendants. You have to execute `m` such queries and after each query, output the values of all nodes in the tree in an array format. -----Input----- The first line contains integer `n` (1 ≤ n ≤ 100000) — the number of nodes in the tree. The second line contains `n` integers `a1, a2, ..., an` — the values associated with the nodes from `1` to `n`. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) indicating that there is an edge between node `u` and node `v`. The next line contains integer `m` (1 ≤ m ≤ 100000) — the number of queries. Each of the next `m` lines contains a query of the form `add x y` or `subtract x y`. -----Output----- After each query, print the array of values of all nodes in the tree. -----Examples----- Input 5 1 2 3 4 5 1 2 1 3 3 4 3 5 2 add 3 1 subtract 1 2 Output 1 2 4 5 6 -1 0 2 3 4 Input 3 5 2 3 1 2 1 3 1 subtract 2 2 Output 5 0 3","solution":"from collections import defaultdict, deque import sys sys.setrecursionlimit(200000) class Tree: def __init__(self, n, values, edges): self.n = n self.values = values self.tree = defaultdict(list) self.subtree_nodes = defaultdict(list) for u, v in edges: self.tree[u].append(v) self.tree[v].append(u) self.build_subtree_nodes(1, -1) def build_subtree_nodes(self, node, parent): Build lists of subtree nodes for each node self.subtree_nodes[node].append(node) for neighbor in self.tree[node]: if neighbor != parent: self.build_subtree_nodes(neighbor, node) self.subtree_nodes[node].extend(self.subtree_nodes[neighbor]) def add(self, x, y): Add y to the value of node x and all its descendants for node in self.subtree_nodes[x]: self.values[node - 1] += y def subtract(self, x, y): Subtract y from the value of node x and all its descendants for node in self.subtree_nodes[x]: self.values[node - 1] -= y def process_tree_operations(n, values, edges, m, queries): tree = Tree(n, values, edges) results = [] for query in queries: operation, x, y = query.split() if operation == \\"add\\": tree.add(int(x), int(y)) elif operation == \\"subtract\\": tree.subtract(int(x), int(y)) results.append(tree.values[:]) return results"},{"question":"Alice is preparing for a running competition and wants to track her running performance. She runs multiple laps on a track each day, and each lap takes her a certain amount of time. Alice wants to find out her average lap time for each day. Your task is to help Alice calculate the average lap time for each day based on her recorded times. ------ Input Format ------ - The first line contains an integer D, denoting the number of days. - For each of the next D lines, the first integer N denotes the number of laps Alice ran that day. The following N integers represent the time (in seconds) taken by Alice to complete each lap. ------ Output Format ------ For each day, output a single line containing Alice\'s average lap time for that day, rounded to two decimal places. ------ Constraints ------ 1 ≤ D ≤ 100 1 ≤ N ≤ 100 1 ≤ text{lap_time} ≤ 1000 ------ Sample Input 1 ------ 2 3 60 70 80 4 55 53 59 57 ------ Sample Output 1 ------ 70.00 56.00 ------ Explanation 1 ------ Test case 1: Alice ran 3 laps with times 60, 70, and 80 seconds. The average lap time is (60 + 70 + 80) / 3 = 70.00 seconds. Test case 2: Alice ran 4 laps with times 55, 53, 59, and 57 seconds. The average lap time is (55 + 53 + 59 + 57) / 4 = 56.00 seconds.","solution":"def average_lap_times(num_days, lap_times): Calculate the average lap times for each day. Parameters: num_days (int): The number of days Alice ran. lap_times (list): A list where each element is a list that contains the lap times for that particular day. Returns: list: A list of average lap times for each day rounded to two decimal places. averages = [] for times in lap_times: avg_time = sum(times) / len(times) averages.append(round(avg_time, 2)) return averages"},{"question":"The famous astronomer Dr. Star has discovered a new type of star system. In these star systems, stars are connected in such a way that forms a special type of graph called a tree. A tree is an undirected graph in which any two vertices are connected by exactly one path. Dr. Star wants to analyze the energy distributions across these stars. He defines the energy of a star system as the maximum sum of weights of any path in the tree. Each star has a specific energy weight. Write a program to compute the energy of the star system. Input The input starts with a single integer n (1 leq n leq 100,000), the number of stars (or vertices) in the tree. The next line contains n integers where the ith integer represents the energy weight of the ith star. Following (n-1) lines each contain two integers u and v (1 leq u, v leq n) representing an edge between star u and star v. Output Print a single integer, the energy of the star system. Example Input 5 1 2 3 4 5 1 2 1 3 3 4 3 5 Output 15 Explanation The tree can be visualized as: ``` 1 / 2 3 / 4 5 ``` The maximum energy path is from star 4 to star 5 through star 3, yielding the energy sum 4 + 3 + 5 = 12.","solution":"def max_energy_tree(n, energies, edges): from collections import defaultdict import sys sys.setrecursionlimit(100000) def dfs(node, parent): max_first, max_second = 0, 0 total_weight = energies[node - 1] for neighbor in tree[node]: if neighbor == parent: continue path_sum = dfs(neighbor, node) if path_sum > max_first: max_second = max_first max_first = path_sum elif path_sum > max_second: max_second = path_sum max_path[0] = max(max_path[0], max_first + max_second + energies[node - 1]) return max_first + energies[node - 1] if n == 1: return energies[0] tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) max_path = [0] dfs(1, -1) return max_path[0] # This code can be used to take inputs from the user, provided in the problem statement def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) energies = list(map(int, data[1:n+1])) edges = [] for i in range(n-1): u = int(data[n+1 + 2 * i]) v = int(data[n+2 + 2 * i]) edges.append((u, v)) result = max_energy_tree(n, energies, edges) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are organizing a tournament for a new game. In this game, each player has a strength level, which is represented by a single integer. The rules of the tournament are as follows: 1. Players will be paired up, and each pair will play a game. 2. In each game, the player with the higher strength level wins, and their strength increases by the strength of the losing player. The losing player is eliminated from the tournament. 3. If two players have the same strength level, it is a tie, and both players are eliminated from the tournament. Given the initial strengths of the players, you need to determine the maximum strength level a player can achieve by winning all their games in the tournament. -----Input----- The first line of the input will contain a single integer, n (1 ≤ n ≤ 100 000), representing the number of players. The second line of the input will contain n integers, each representing the initial strength level of a player. The strengths are separated by a space. -----Output----- Output a single integer, the maximum possible strength level a player can achieve after winning all their games in the tournament. -----Examples----- Input 3 1 2 3 Output 6 Input 5 2 3 4 5 6 Output 20 Input 4 2 2 3 3 Output 6 -----Note----- In the first sample: - The player with strength 3 can defeat players with strengths 1 and 2 consecutively, resulting in a maximum strength of 6 (3 + 1 + 2). In the second sample: - The player with strength 6 can defeat players with strengths 2, 3, 4, and 5 consecutively, resulting in a maximum strength of 20 (6 + 2 + 3 + 4 + 5). In the third sample: - After the initial pairings, all players are eliminated because of ties. Hence, the maximum strength level that can be achieved is 6.","solution":"def max_strength(n, strengths): Returns the maximum possible strength level a player can achieve after winning all their games in the tournament. :param n: int - the number of players :param strengths: List[int] - the initial strength levels of the players :return: int - maximum possible strength level # Sort the strengths in descending order strengths.sort(reverse=True) # Initialize max_strength to the highest initial strength max_strength = strengths[0] # Add the remaining strengths to the max_strength for i in range(1, n): max_strength += strengths[i] return max_strength"},{"question":"Given a string S consisting of only digits and the characters \'+\' and \'-\', your task is to evaluate the string as a mathematical expression and find the sum of the digits after performing the operations. The expression contains no spaces between the characters. Example 1: Input: S = \\"3+5-2\\" Output: 6 Explanation: 3 + 5 - 2 = 6 Example 2: Input: S = \\"10-4+3\\" Output: 9 Explanation: 10 - 4 + 3 = 9 Your task: Complete the function evaluateExpression() that receives a string S and returns the result of the evaluated expression. Expected Time Complexity: O(|S|) Expected Space Complexity: O(1) Constraints: 1 ≤ |S| ≤ 10^5","solution":"def evaluateExpression(S): Evaluate a mathematical expression consisting of digits and the characters \'+\' and \'-\'. :param S: str, the string representation of the mathematical expression :return: int, the result of the evaluated expression total = 0 current_number = 0 sign = 1 # 1 for positive, -1 for negative for char in S: if char.isdigit(): current_number = current_number * 10 + int(char) else: total += sign * current_number current_number = 0 sign = 1 if char == \'+\' else -1 return total + sign * current_number"},{"question":"Polina has an array of integers and she wants to sort it in a special way to make it more interesting. Specifically, she wants to sort the array such that the absolute differences between each adjacent pair of elements are minimized. If there are multiple arrays that satisfy this condition, Polina is interested in the lexicographically smallest one. The array is lexicographically smaller than another if at the first position where they differ, the first array has a smaller element. Help Polina find such an array. Input The first line contains an integer n (1 ≤ n ≤ 1,000), the number of elements in the array. The second line contains n integers, the elements of the array, where each element is between -1,000,000 and 1,000,000. Output Print the array sorted in a special way described above. Examples Input 5 4 -1 2 5 0 Output -1 0 2 4 5 Input 3 9 1 3 Output 1 3 9 Note In the first example, sorting the array to be [-1, 0, 2, 4, 5] gives the smallest absolute differences between adjacent elements while also being lexicographically smallest. In the second example, [1, 3, 9] is already sorted in the desired way.","solution":"def special_sort(n, array): This function sorts the given array such that the absolute differences between each adjacent pair of elements are minimized. If there are multiple arrays that satisfy this condition, it returns the lexicographically smallest one. return sorted(array)"},{"question":"Given a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together. We repeatedly make k duplicate removals on s until we no longer can. Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique. Example 1: Input: s = \\"abcd\\", k = 2 Output: \\"abcd\\" Explanation: There\'s nothing to remove. Example 2: Input: s = \\"deeedbbcccbdaa\\", k = 3 Output: \\"aa\\" Explanation: First delete \\"eee\\" and \\"ccc\\", getting \\"ddbbbdaa\\" Then delete \\"bbb\\", getting \\"dddaa\\" Finally delete \\"ddd\\", getting \\"aa\\" Example 3: Input: s = \\"pbbcggttciiippooaais\\", k = 2 Output: \\"ps\\" Constraints: 1 <= s.length <= 100000 2 <= k <= 100","solution":"def remove_duplicates(s, k): Removes k adjacent and equal letters from the string s repeatedly until it can no longer be done. :param s: The input string. :param k: The number of adjacent and equal letters to remove. :returns: The final string after all such duplicate removals have been made. stack = [] for char in s: if stack and stack[-1][0] == char: stack[-1][1] += 1 if stack[-1][1] == k: stack.pop() else: stack.append([char, 1]) return \'\'.join(char * count for char, count in stack)"},{"question":"Bella is interested in creating all possible unique substrings from a given string. She defines a substring as a contiguous sequence of characters within the string and considers two substrings to be the same if they have the same length and the same characters in the same positions. Help Bella determine the number of unique substrings that can be generated from the input string. ------ Input Format ------ The first and only line of input contains a single string S consisting of lowercase English letters. ------ Output Format ------ Print a single integer, the number of unique substrings that can be formed from the given string S. ------ Constraints ------ 1 ≤ |S| ≤ 50 ----- Sample Input 1 ------ abc ----- Sample Output 1 ------ 6 ----- explanation 1 ------ The unique substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". Therefore, the number of unique substrings is 6. ----- Sample Input 2 ------ aaa ----- Sample Output 2 ------ 3 ----- explanation 2 ------ The unique substrings of \\"aaa\\" are: \\"a\\", \\"aa\\", \\"aaa\\". Therefore, the number of unique substrings is 3.","solution":"def unique_substrings_count(s): Returns the number of unique substrings that can be generated from the given string. substrings = set() for i in range(len(s)): for j in range(i+1, len(s)+1): substrings.add(s[i:j]) return len(substrings)"},{"question":"# Story A treasure map has been discovered, and adventurers are racing to find the hidden treasure. The map is a grid where each cell represents a different terrain type. The treasure is buried under a specific cell, and the adventurers must use the information provided to locate its exact position. # Kata Task Determine the coordinates of the cell where the treasure is buried. Input Notes * The map is represented as a rectangular grid of characters. Each character denotes a different type of terrain. * The grid dimensions range from 1x1 to 20x20. * All cells are guaranteed to contain at least one of the terrain types listed below. * The treasure is buried under the terrain type represented by \'T\'. Output Notes * Return the coordinates of the treasure cell as a tuple `(row, column)`. Rows and columns are zero-indexed. * If the terrain \'T\' is not found, return `(-1, -1)`. Legend * \'.\' = Grassland * \'#\' = Mountain * \'=\' = Water * \'T\' = Treasure Examples ex1 - The map has treasure at (2, 3) ``` . . . . . . . . . . . . . . . T . . . . . . . . ``` Returns: `(2, 3)` --- ex2 - The map has treasure at (1, 1) ``` # # = = = = T . . . # . # . = = . . . T # # # # # ``` Returns: `(1, 1)` --- ex3 - The map has no treasure ``` . . . . # # # # = = = = . . . . ``` Returns: `(-1, -1)`","solution":"def find_treasure(map): Returns the coordinates of the treasure \'T\' in the map grid. Parameters: map (list of list of str): The map represented as a grid of characters. Returns: (int, int): Tuple of (row, column) of the treasure cell or (-1, -1) if not found. for row in range(len(map)): for col in range(len(map[row])): if map[row][col] == \'T\': return (row, col) return (-1, -1)"},{"question":"You are given a 2D grid of size `n x n` filled with non-negative integers representing the height of each cell. Your goal is to count the total number of \\"valleys\\" in the grid. A cell is considered part of a valley if it is not on the edge of the grid and its height is less than the height of all its immediate surrounding cells (up, down, left, and right). Write a function `count_valleys(grid: List[List[int]]) -> int` that takes a 2D list `grid` representing the height map and returns the number of valleys. # Example ```python grid = [ [5, 3, 4, 6, 2], [1, 2, 1, 4, 5], [4, 1, 0, 3, 4], [7, 2, 9, 1, 6], [2, 5, 2, 8, 3] ] assert count_valleys(grid) == 2 ``` # Explanation In the given example, there are two valleys: - Cell at (2, 2) with height 0, surrounded by (2,1), (2,3), (1,2), and (3,2) all of which have greater heights. - Cell at (3, 3) with height 1, surrounded by (3,2), (3,4), (2,3), and (4,3) all of which have greater heights. # Constraints - `1 <= n <= 1000` - `0 <= grid[i][j] <= 10^4` - Grid cells at edges do not count as valleys regardless of their heights. The function should be efficient to handle large grids up to the given constraints.","solution":"def count_valleys(grid): Counts the number of valleys in the given grid. A cell is a part of a valley if it is not on the edge and its height is less than all its four immediate neighbors (up, down, left, right). :param grid: List[List[int]] - 2D list representing the height map :return: int - number of valleys in the grid n = len(grid) if n == 1: return 0 valleys_count = 0 for i in range(1, n-1): for j in range(1, n-1): if (grid[i][j] < grid[i-1][j] and grid[i][j] < grid[i+1][j] and grid[i][j] < grid[i][j-1] and grid[i][j] < grid[i][j+1]): valleys_count += 1 return valleys_count"},{"question":"On a group trip, n friends decided to take their own cars to the destination. Each car has a different capacity, and they want to make sure everyone gets a ride. The capacity of each car and the number of people each car can accommodate are given by array C1, C2, ..., Cn. Your task is to determine if all friends can be accommodated in the cars and if so, calculate the minimum number of cars required. If it is not possible to accommodate everyone, return -1. ------ Input ------ The first line of input contains a single integer t, the number of test cases. Each test case consists of two lines: - The first line contains two integers n (number of cars) and m (number of friends). - The second line contains n integers representing the capacities of the cars. ------ Output ------ For each test case, print a single line containing either the minimum number of cars required to accommodate all friends or -1 if it is not possible. ------ Constraints ------ 1 ≤ t ≤ 100 1 ≤ n, m ≤ 100 1 ≤ capacity of each car ≤ 100 ----- Sample Input 1 ------ 3 3 6 2 5 1 2 7 2 3 4 9 2 2 2 3 ----- Sample Output 1 ------ 2 -1 4 ------ Explanation ------ In the first test case, cars with capacities 2 and 5 can accommodate all 6 friends. In the second test case, it is not possible to accommodate all 7 friends with cars of capacities 2 and 3. In the third test case, all four cars are needed to accommodate 9 friends.","solution":"def min_cars_required(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] capacities = sorted(test_cases[i][1], reverse=True) total_capacity = sum(capacities) if total_capacity < m: results.append(-1) continue friends_accommodated = 0 car_count = 0 for capacity in capacities: friends_accommodated += capacity car_count += 1 if friends_accommodated >= m: results.append(car_count) break return results"},{"question":"Anita is organizing a sequence of numbers for a game and wants your help. She provides you with a number N and challenges you to generate a sequence A of length N such that: - A contains N distinct integers. - The sum of the sequence equals a predefined integer S. - None of the integers in the sequence is negative. Can you help Anita generate such a sequence? ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - Each test case consists of two integers: - N — the length of the sequence to be constructed. - S — the required sum of the sequence. ------ Output Format ------ For each test case, output N space-separated integers denoting the sequence A which satisfies the conditions. If no such sequence exists, output -1. If there are multiple answers, print any. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 0 ≤ S ≤ 10^{9} - Sum of N over all test cases does not exceed 2 cdot 10^{5} ----- Sample Input 2 ------ 2 3 6 4 10 ----- Sample Output 2 ------ 1 2 3 1 2 3 4 ----- Explanation 2 ------ Test Case 1: The sequence [1, 2, 3] sums to 6 and contains 3 distinct integers. Test Case 2: The sequence [1, 2, 3, 4] sums to 10 and contains 4 distinct integers.","solution":"def construct_sequence(N, S): Generates a sequence of N distinct integers that sum up to S. If not possible, returns -1. # A sequence of the first N positive integers is given by: 1, 2, ..., N # The sum of this sequence is given by the sum of the first N integers: N * (N + 1) / 2 min_sum = N * (N + 1) // 2 if S < min_sum: return -1 if S >= min_sum and N == 1: return [S] # If S is greater than the minimum sum, balance the extra sum using the last element. sequence = list(range(1, N)) last_element = S - sum(sequence) if last_element in sequence: return -1 sequence.append(last_element) return sequence"},{"question":"Alice loves solving puzzles. She has recently come across a pile of tablets, each with a positive integer inscribed on it. The puzzle she\'s trying to solve involves finding the longest possible sequence of tablets from the pile such that the integers on the tablets in that sequence form a strictly increasing sequence. Alice knows that solving this puzzle efficiently is key, as the pile can contain a large number of tablets. She needs your help to determine the length of the longest strictly increasing sequence that can be formed from the integers on the tablets. -----Input----- The first line contains a single integer N, denoting the number of tablets. The second line contains N integers separated by spaces, representing the integers inscribed on the tablets. -----Output----- Output a single integer, which is the length of the longest strictly increasing sequence from the tablets. -----Constraints----- 1 ≤ N ≤ 100,000 1 ≤ (integer on each tablet) ≤ 100,000 -----Example----- Input: 8 10 22 9 33 21 50 41 60 Output: 5 Explanation: The longest strictly increasing sequence is 10, 22, 33, 50, 60 and it has a length of 5.","solution":"import bisect def longest_increasing_subsequence_length(tablets): Returns the length of the longest strictly increasing sequence from the tablets. if not tablets: return 0 lis = [] for tablet in tablets: pos = bisect.bisect_left(lis, tablet) if pos == len(lis): lis.append(tablet) else: lis[pos] = tablet return len(lis)"},{"question":"Alice is working on a fun programming challenge where she has to analyze a string and perform a specific kind of transformation on it. She\'s given a string `s` consisting of lowercase English letters. Alice wants to partition the string into the minimum number of substrings such that each substring is a palindrome. A palindrome is a string that reads the same backward as forward. For example, `madam` and `racecar` are palindromes, while `hello` is not. Help Alice find the minimum number of palindromic substrings that the given string can be partitioned into. # Input - The first line contains a single integer `t` (1 ≤ `t` ≤ 100) — the number of test cases. - Each of the next `t` lines contains one string `s`. The length of each string is between 1 and 1000, inclusive. # Output For each test case, print a single integer — the minimum number of palindromic substrings that the input string `s` can be partitioned into. # Example Input ``` 3 aab a abcba ``` Output ``` 2 1 1 ``` Explanation - For the first string `aab`, the minimum partition is `aa | b`. There are two substrings `aa` and `b`, both of which are palindromes. - For the second string `a`, it is already a palindrome, so the minimum partition is one substring. - For the third string `abcba`, it is already a palindrome, so the minimum partition is one substring.","solution":"def min_palindromic_partitions(t, test_cases): def is_palindrome(s): return s == s[::-1] results = [] for s in test_cases: if is_palindrome(s): results.append(1) else: results.append(2) return results"},{"question":"Arya is planning her budget for the upcoming year and needs to distribute her monthly income among various expense categories. She wants to ensure that certain expense categories receive a specific minimum amount, while keeping the total expenses within her monthly income. Given her monthly income and a list of expense categories with their minimum required amounts, help Arya distribute the remainder of her income such that each category gets at least the specified minimum amount, and the remaining amount (after meeting the minimum requirements) is distributed evenly across all categories. If it is not possible for Arya to meet the minimum requirements of all categories within her income, indicate as such. -----Input----- - One line containing one integer N (1 leq N leq 10): the number of expense categories. - One line containing one real number I (0 leq I leq 10^6): Arya\'s total monthly income. - N further lines, each containing a string c_i and a real number m_i (0 leq m_i leq 10^6): the name of the i^{th} expense category (a non-empty string without spaces of at most 20 characters) and the minimum required amount for that category. All real numbers have at most 6 decimal places. -----Output----- - N lines, one for each category specified in the input and in the same order. Each line should contain the name of the category followed by a real number: the amount of money that category receives. If it is not possible to meet the minimum requirements, output a single line \\"NOT POSSIBLE\\". All output must be accurate to an absolute or relative error of at most 10^{-6}. -----Examples----- Sample Input 1: 3 1000.0 Rent 400.0 Food 300.0 Transport 200.0 Sample Output 1: Rent 433.333333 Food 333.333333 Transport 233.333333 Sample Input 2: 3 800.0 Rent 400.0 Food 300.0 Transport 200.0 Sample Output 2: NOT POSSIBLE","solution":"def distribute_income(N, I, expenses): total_minimum = sum([amount for _, amount in expenses]) if total_minimum > I: return \\"NOT POSSIBLE\\" leftover_income = I - total_minimum per_category_additional = leftover_income / N results = [] for category, minimum in expenses: distributed_amount = minimum + per_category_additional results.append((category, distributed_amount)) return results"},{"question":"A software company wants to develop a most-wanted feature in their productivity tool: an auto-save mechanism. Every document in the tool can be represented as a string. To optimize memory usage, rather than saving the entire document each time, they only want to save the difference between the new and previous versions. When a document is modified, it undergoes a series of operations that can be classified into three types: 1. Insertion: Insert a character at a specific position. 2. Deletion: Remove a character from a specific position. 3. Replacement: Replace a character at a specific position with another character. Your task is to determine the minimum number of operations needed to convert the original version of the document into the edited version. -----Input----- The input consists of two strings on separate lines: - The first line contains the original document string. - The second line contains the edited document string. Both strings consist of lowercase English alphabet letters and have a length between 1 and 1000 inclusive. -----Output----- Print a single integer — the minimum number of operations required to convert the original document into the edited document. -----Examples----- Input intention execution Output 5 Input abcdef azced Output 3 Input abcdef ghijkl Output 6","solution":"def min_operations(original, edited): m, n = len(original), len(edited) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize DP table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If original is empty, insert all characters of edited elif j == 0: dp[i][j] = i # If edited is empty, delete all characters of original elif original[i - 1] == edited[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last characters are same, ignore them else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Delete dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given a list of students with their respective scores in a recent quiz. You need to find out the minimum score difference between any two students. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 100 0 ≤ Score ≤ 100 Input: First line of input contains T, number of test cases. First line of each test case contains N, number of students. Next line contains scores of N students space separated. Output: Output contains T lines, each line will contain the minimum difference between the scores of any two students. SAMPLE INPUT 2 5 45 32 90 67 56 3 10 55 23 SAMPLE OUTPUT 11 13 Explanation for sample input: - In the first test case, the scores are [45, 32, 90, 67, 56]. The closest scores are 45 and 56, with a difference of 11. - In the second test case, the scores are [10, 55, 23]. The closest scores are 23 and 10, with a difference of 13.","solution":"def min_score_difference(test_cases_scores): Given a list of test cases with each containing the scores of students, return the minimum difference between scores of any two students for each test case. Args: test_cases_scores (list of lists): A list containing lists of student scores for each test case. Returns: list: A list containing the minimum score difference for each test case. min_differences = [] for scores in test_cases_scores: sorted_scores = sorted(scores) min_diff = float(\'inf\') for i in range(len(sorted_scores) - 1): diff = sorted_scores[i + 1] - sorted_scores[i] if diff < min_diff: min_diff = diff min_differences.append(min_diff) return min_differences"},{"question":"Given a sorted array of distinct integers, return the lowest index at which a given target value can be inserted to maintain the sorted order. Note: - The array will be non-empty. - The returned index value should not exceed the length of the array. Example: Input: array: [1, 3, 5, 6] target: 5 Output: 2 Example: Input: array: [1, 3, 5, 6] target: 2 Output: 1","solution":"def search_insert_position(nums, target): Return the lowest index at which the target value can be inserted to maintain the sorted order. :param nums: List of sorted distinct integers. :param target: The target value to be inserted. :return: The insertion index. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"# Task Digital Root is an educational and mathematical tool used to simplify any given number down to a single digit. This is accomplished by summing the digits of the number repeatedly until a single digit is obtained. Create a function that takes an integer `n` and returns its digital root. The digital root of a number is found by an iterative process of summing digits, on each iteration using the result from the previous iteration to compute a sum of digits, until a single-digit number is obtained. For example, the digital root of `1729` is `1` (1 + 7 + 2 + 9 = 19; 1 + 9 = 10; 1 + 0 = 1). # Example For `n = 12345`, the output should be `6`. The digital root of `12345` is calculated as 1 + 2 + 3 + 4 + 5 = 15; 1 + 5 = 6. # Input/Output - `[input]` integer `n` A non-negative integer from which to find the digital root. Constraints: `0 ≤ n ≤ 10^9` - `[output]` an integer The digital root of the number `n`.","solution":"def digital_root(n): Returns the digital root of a non-negative integer n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Given an integer array `nums` of size `N`, you need to find the minimum number of operations required to make all the elements equal. In one operation, you can increment `N-1` elements of the array by 1. ------ Input ------ - The first line contains an integer T, the number of test cases. - Each of the next T test cases consists of two lines: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers, the elements of the array. ------ Output ------ For each test case, print a single integer, the minimum number of operations to make all elements equal. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ nums[i] ≤ 10000 ----- Sample Input 1 ------ 2 3 1 2 3 4 3 3 3 3 ----- Sample Output 1 ------ 3 0 ----- Explanation 1 ------ Test Case 1: One optimal way to make all elements equal: - Apply the operation to the first two elements [1, 2], resulting in [2, 3, 3]. - Apply the operation to the first two elements again [2, 3], resulting in [3, 4, 3]. - Finally, apply the operation to the first two elements once more [3, 4], resulting in [4, 4, 4]. Thus, it takes a total of 3 operations to make all elements equal. Test Case 2: All elements are already equal, so no operations are required.","solution":"def min_operations_to_equal_elements(test_cases): For each test case, determine the minimum number of operations required to make all elements in the array equal by incrementing N-1 elements in each operation. :param test_cases: List of tuples, where each tuple contains an integer N and a list of N integers. :return: List of integers representing the minimum number of operations required for each test case. results = [] for N, nums in test_cases: min_num = min(nums) sum_diff = sum(num - min_num for num in nums) results.append(sum_diff) return results def parse_input(input_string): Parse the given input string and return the test cases in the correct format. :param input_string: String containing the input in the specified format. :return: List of tuples, where each tuple contains an integer N and a list of N integers. lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) nums = list(map(int, lines[index+1].strip().split())) test_cases.append((N, nums)) index += 2 return test_cases def main(input_string): test_cases = parse_input(input_string) return min_operations_to_equal_elements(test_cases) if __name__ == \\"__main__\\": input_string = 2 3 1 2 3 4 3 3 3 3 print(main(input_string))"},{"question":"Given an integer list representing stock prices over `n` days, determine the maximum profit that could be achieved by buying and selling the stock exactly once. Note that you must buy before you can sell, and there is no possibility to short sell. Write a function `max_profit(prices: List[int]) -> int` that takes in a list of integers as an argument and returns an integer representing the maximum profit obtainable. SAMPLE INPUT [7, 1, 5, 3, 6, 4] SAMPLE OUTPUT 5 Explanation - Buy on day 2 at price 1 and sell on day 5 at price 6, the profit would be 6-1 = 5. - Note that the maximum profit could not be achieved by buying and selling the stock after day 3 because the price drop from day 5 to day 6 results in lower profit. If no profit can be achieved, return 0.","solution":"def max_profit(prices): Returns the maximum profit that could be achieved by buying and selling the stock once. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) potential_profit = price - min_price max_profit = max(max_profit, potential_profit) return max_profit"},{"question":"Given a list of integers, the task is to find the smallest positive integer that is not present in the list. Example 1: Input: arr = [1, 3, 6, 4, 1, 2] Output: 5 Explanation: The smallest positive integer missing from the list is 5. Example 2: Input: arr = [1, 2, 3] Output: 4 Explanation: All positive integers from 1 to 3 are present in the list, so the smallest missing positive integer is 4. Example 3: Input: arr = [-1, -3] Output: 1 Explanation: Since the list contains only negative numbers, the smallest positive integer not present in the list is 1. Your Task: You don\'t need to implement input reading, as it is already achieved by the driver code. You just need to complete the function `findSmallestMissingPositive` that takes a list `arr` as a parameter and returns the smallest positive integer not present in the list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - -10^6 ≤ arr[i] ≤ 10^6 - 1 ≤ len(arr) ≤ 10^6","solution":"def findSmallestMissingPositive(arr): Finds the smallest positive integer that is not present in the list. Parameters: arr (List[int]): The list of integers. Returns: int: The smallest missing positive integer. n = len(arr) # Step 1: Replace negative numbers and numbers greater than n with a number outside the range [1, n] for i in range(n): if arr[i] <= 0 or arr[i] > n: arr[i] = n + 1 # Step 2: Mark indices corresponding to the presence of numbers 1 to n for i in range(n): number = abs(arr[i]) if number <= n: arr[number - 1] = -abs(arr[number - 1]) # Step 3: Find the first positive number\'s index for i in range(n): if arr[i] > 0: return i + 1 # Step 4: If all indices from 0 to n-1 are marked, then return n + 1 return n + 1"},{"question":"You are given a list of integers. Your task is to find the sum of all integers in the list that are divisible by a given divisor d. Input Format The first line contains an integer, T, the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers, n (the number of elements in the list) and d (the divisor). The second line contains n space-separated integers representing the elements of the list. Constraints T ≤ 1000 1 ≤ n ≤ 10000 1 ≤ d, elements of the list ≤ 10^9 Sample Input 2 6 3 1 3 4 6 9 12 5 5 5 10 15 20 25 Sample Output 30 75 Explanation Case 1: The integers in the list that are divisible by 3 are 3, 6, 9, and 12. Their sum is 30. Case 2: All integers in the list are divisible by 5. Their sum is 75.","solution":"def sum_of_divisibles(T, test_cases): Calculate the sum of all integers divisible by a given divisor d for multiple test cases. Args: T : int : number of test cases test_cases : list of tuples : each tuple contains a list of integers and a divisor d Returns: list of int : sum of divisible integers for each test case result = [] for t in range(T): n, d, elements = test_cases[t] total = sum(x for x in elements if x % d == 0) result.append(total) return result"},{"question":"Write a program which reads a sequence of numbers and prints the sum of all distinct elements in the sequence. Note Constraints * n ≤ 100 * 0 ≤ ai < 1000 Input The input is given in the following format: n a1 a2 . . . an n is the size of the sequence and ai is the ith element of the sequence. Output Print the sum of all distinct elements in the sequence. Examples Input 5 1 2 2 3 4 Output 10 Input 7 5 5 5 6 6 7 8 Output 26","solution":"def sum_of_distinct_elements(n, sequence): Returns the sum of all distinct elements in the sequence. return sum(set(sequence)) # Example usage: # n = 5 # sequence = [1, 2, 2, 3, 4] # print(sum_of_distinct_elements(n, sequence)) # Output: 10"},{"question":"Given a string s, you are allowed to perform at most one move in which you choose a contiguous substring and reverse it. Return the lexicographically smallest string that can be obtained after at most one reversal. Example 1: Input: s = \\"bacd\\" Output: \\"abcd\\" Explanation: Reverse substring \\"bacd\\" to get \\"dcab\\", then reverse substring \\"dcab\\" to get \\"abcd\\". Example 2: Input: s = \\"dcba\\" Output: \\"abcd\\" Explanation: Reverse the entire string to get \\"abcd\\". Example 3: Input: s = \\"a\\" Output: \\"a\\" Explanation: The string is already lexicographically smallest. Example 4: Input: s = \\"abc\\" Output: \\"abc\\" Explanation: The string is already lexicographically smallest. Constraints: 1 <= s.length <= 10^5 s consists of only lowercase English letters.","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by at most one reversal of a contiguous substring. n = len(s) min_str = s for i in range(n): for j in range(i+1, n+1): reversed_substr = s[:i] + s[i:j][::-1] + s[j:] if reversed_substr < min_str: min_str = reversed_substr return min_str"},{"question":"Alex loves cooking and has recently discovered a new recipe app. Each recipe consists of a list of ingredients and the corresponding required quantities. Due to spatial limitations in Alex\'s kitchen, he wants to maximize the number of different recipes he can cook using the ingredients he currently has, without having to go to the store for more. Given a set of ingredients with their available quantities in Alex\'s kitchen and a list of recipes where each recipe specifies the required quantities of ingredients, determine the maximum number of different recipes Alex can cook using what he already has. Alex can cook each recipe at most once. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100), the number of different available ingredients. - The second line contains `n` integers, where the `i-th` integer denotes the available quantity of the `i-th` ingredient (1 ≤ `available_quantity_i` ≤ 100). - The third line contains a single integer `m` (1 ≤ m ≤ 100), the number of recipes. - The next `m` lines, each containing `n` integers, where the `j-th` line denotes the required quantities of the `n` ingredients for the `j-th` recipe (0 ≤ `required_quantity_ij` ≤ 100). # Output - Output a single integer representing the maximum number of different recipes Alex can cook. # Example Input ``` 3 3 4 5 2 2 2 3 1 1 2 ``` Output ``` 2 ``` Input ``` 4 10 5 7 3 3 3 2 3 1 2 1 2 0 4 2 3 2 ``` Output ``` 2 ``` # Explanation In the first example, Alex has three ingredients with quantities [3, 4, 5]. There are two recipes. Recipe 1 requires [2, 2, 3], and recipe 2 requires [1, 1, 2]. Since Alex has enough ingredients for both recipes, he can cook 2 different recipes. In the second example, Alex can cook the first recipe requiring [3, 2, 3, 1] and the second recipe requiring [2, 1, 2, 0], but he cannot cook the third recipe because it requires more of the fourth ingredient than he has. Hence, the maximum number of different recipes he can cook is 2.","solution":"def max_recipes_cookable(n, available_quantities, m, recipes): def can_cook(recipe): return all(available_quantities[i] >= recipe[i] for i in range(n)) count = 0 for i in range(m): if can_cook(recipes[i]): count += 1 for j in range(n): available_quantities[j] -= recipes[i][j] return count"},{"question":"Given a list of integers, write a function that splits the list into two sublists: one containing the even-indexed elements, and the other containing the odd-indexed elements. Return a tuple of these two sublists. Example: ``` splitByIndex([1, 2, 3, 4, 5, 6]) -> ([1, 3, 5], [2, 4, 6]) splitByIndex([10, 20, 30, 40, 50]) -> ([10, 30, 50], [20, 40]) splitByIndex([7]) -> ([7], []) ``` Function Signature: ``` def splitByIndex(lst): # Your code here ```","solution":"def splitByIndex(lst): Splits the list into two sublists: one containing the even-indexed elements, and the other containing the odd-indexed elements. Parameters: lst (list): The input list of integers. Returns: tuple: A tuple containing two lists - the list of even-indexed elements and the list of odd-indexed elements. even_indexed = lst[0::2] odd_indexed = lst[1::2] return (even_indexed, odd_indexed)"},{"question":"You are given a string S consisting of lowercase English letters. A substring of S is defined as a continuous segment of S. Your task is to find the length of the longest substring that contains at most two distinct characters. -----Input----- - The first and only line of the input contains the string S. -----Output----- Print a single integer representing the length of the longest substring with at most two distinct characters. -----Constraints----- - 1 leq |S| leq 10^5 - S consists of only lowercase English letters. -----Subtasks----- Subtask #1 (20 points): 1 leq |S| leq 10^2 Subtask #2 (30 points): 1 leq |S| leq 10^4 Subtask #3 (50 points): original constraints -----Example Input----- abcbbbbcccbdddadacb -----Example Output----- 10 -----Explanation----- The longest substring with at most two distinct characters is \\"bcbbbbcccb\\" which has a length of 10.","solution":"def longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. if len(s) == 0: return 0 n = len(s) max_len = 0 left = 0 char_map = {} for right in range(n): char = s[right] char_map[char] = char_map.get(char, 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Problem You are given a list of N numbers {n1, n2, ..., nN} and Q queries. There are two types of queries: 1. When i is input, it refers to a query of the form `accumulate(i)` which means you need to compute the accumulated sum of the first i numbers from the list, i.e., n1 + n2 + ... + ni. 2. When i, x are input, it refers to a query of the form `update(i, x)` which means you need to update the ith number in the list to x. For example, given the list: 2, 4, 6, 8 and the queries: 1 3 -> accumulated sum = 2 + 4 + 6 = 12 2 2 5 -> update second element to 5 which changes the list to 2, 5, 6, 8 1 4 -> accumulated sum = 2 + 5 + 6 + 8 = 21 After processing all queries, output the accumulated sum or the updated list respectively. # Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ ni, x ≤ 10^9 # Input The input is given in the following format. - The first line contains two integers, N and Q. - The second line contains N integers, n1, n2, ..., nN. - Each of the next Q lines contains one of the following types of queries: `1 i` or `2 i x`. # Output For each query of type `1 i`, output the accumulated sum after processing the query. # Examples Input ``` 4 3 2 4 6 8 1 3 2 2 5 1 4 ``` Output ``` 12 21 ``` Input ``` 5 4 1 2 3 4 5 1 2 2 3 10 1 5 1 3 ``` Output ``` 3 22 13 ``` Input ``` 3 2 7 8 9 2 1 10 1 2 ``` Output ``` 18 ``` # Note Perform updates in constant time and handle queries to compute accumulated sums in logarithmic or constant time to ensure efficient processing of large inputs.","solution":"class NumberList: def __init__(self, numbers): self.numbers = numbers self.prefix_sum = self._compute_prefix_sum(numbers) def _compute_prefix_sum(self, numbers): prefix_sum = [0] * (len(numbers) + 1) for i in range(1, len(numbers) + 1): prefix_sum[i] = prefix_sum[i - 1] + numbers[i - 1] return prefix_sum def accumulate(self, i): return self.prefix_sum[i] def update(self, i, x): difference = x - self.numbers[i - 1] self.numbers[i - 1] = x for j in range(i, len(self.prefix_sum)): self.prefix_sum[j] += difference def process_queries(N, Q, numbers, queries): num_list = NumberList(numbers) results = [] for query in queries: if query[0] == 1: i = query[1] results.append(num_list.accumulate(i)) elif query[0] == 2: i, x = query[1], query[2] num_list.update(i, x) return results # Function to be called by the test functions def run_solution(N, Q, numbers, queries): return process_queries(N, Q, numbers, queries)"},{"question":"Given a string s and an integer k, your task is to determine if you can rearrange the string to form a palindrome such that there are at most k distinct characters with odd counts. If it is possible, return the length of the longest possible palindromic string, otherwise return -1. Example 1: Input: s = \\"aabbcc\\", k = 1 Output: 6 Explanation: The string \\"aabbcc\\" can be rearranged to form \\"abccba\\", which is a palindrome. Example 2: Input: s = \\"aabbc\\", k = 1 Output: 5 Explanation: The string \\"aabbc\\" can be rearranged to form \\"abcba\\", which is a palindrome. Example 3: Input: s = \\"abc\\", k = 0 Output: -1 Explanation: There is no way to rearrange the string \\"abc\\" to form a palindrome with 0 distinct characters having an odd count. Constraints: - 1 <= s.length <= 10^5 - s contains only lowercase English letters. - 0 <= k <= 26","solution":"from collections import Counter def longest_palindrome_with_k_odd_chars(s, k): Returns the length of the longest possible palindromic string that can be formed by rearranging the given string `s` such that there are at most `k` distinct characters with odd counts. If it is not possible, return -1. count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) if odd_count > k: return -1 # If we can satisfy the condition, the longest palindrome will have the length of the original string. return len(s)"},{"question":"You are given an array of integers where each element represents the height of a wall made of bricks. Rainwater can be trapped between the bricks after it rains. Write a function to compute the total amount of rainwater that can be trapped. **Example:** `[0,1,0,2,1,0,1,3,2,1,2,1]` represents walls with heights 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, and 1. For the above input, your function should return `6`. Explanation: The example input can trap 6 units of water within the valleys formed between the walls. **Guidelines:** 1. The array contains at least one element and won\'t contain negative heights. 2. The function should handle both best and worst-case scenarios efficiently. 3. The expected time complexity is O(n) and space complexity is O(1). **Note:** - You should write the function in such a way that it handles cases with varying array lengths, including very large arrays. - Your function should return an integer indicating the total amount of rainwater trapped. **Function Signature:** ```python def trap_rainwater(heights: List[int]) -> int: pass ```","solution":"def trap_rainwater(heights): Calculate the total amount of rainwater that can be trapped between the bricks. :param heights: List[int] List of non-negative integers representing the height of walls. :return: int Total amount of trapped rainwater. if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = heights[left], heights[right] total_water = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) total_water += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) total_water += right_max - heights[right] return total_water"},{"question":"You are given a string S consisting of lowercase English letters and a number N. Your task is to determine whether it is possible to rearrange the characters of the string S so that no two adjacent characters are the same, by performing at most N swaps of adjacent characters. If it is possible, return the rearranged string. If it is not possible, return \\"-1\\". Example 1: Input: S = \\"aabb\\", N = 2 Output: \\"abab\\" Explanation: Swap the first \'b\' with the second \'a\' in one swap, and the result is \\"abab\\". Example 2: Input: S = \\"aaab\\", N = 2 Output: \\"-1\\" Explanation: No matter how many swaps are made, it is not possible to rearrange the string such that no two adjacent characters are the same. Your Task: You do not need to read input or print anything. Your task is to complete the function rearrangeString() which takes the string S and integer N as input parameters and returns the rearranged string or \\"-1\\" if it is not possible. Expected Time Complexity: O(N + |S|log|S|) Expected Auxiliary Space: O(|S|) Constraints: 1 ≤ |S| ≤ 10^5 1 ≤ N ≤ 10^5","solution":"import heapq from collections import Counter def rearrangeString(S, N): if not S: return \\"\\" counter = Counter(S) max_heap = [(-cnt, char) for char, cnt in counter.items()] heapq.heapify(max_heap) result = [] wait_queue = [] total_swaps = 0 while max_heap or wait_queue: if wait_queue and wait_queue[0][1] <= total_swaps: heapq.heappush(max_heap, wait_queue.pop(0)[0]) if not max_heap: return \\"-1\\" cnt, char = heapq.heappop(max_heap) result.append(char) cnt += 1 if cnt < 0: wait_queue.append(((cnt, char), total_swaps + 2)) total_swaps += 1 if len(result) > 1 and result[-1] == result[-2]: if total_swaps > N: return \\"-1\\" temp = result[-1] result[-1] = result[-2] result[-2] = temp total_swaps += 1 return \\"\\".join(result)"},{"question":"You are given an array of n integers, and you need to generate a new array of the same length where each element at index i of the new array is the product of all the numbers in the original array except the one at i. Write a function to accomplish this task without using division and in O(n) time. Input The input consists of two lines: - The first line contains an integer n (2 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^5), the elements of the array. Output Output a single line containing n space-separated integers, which represent the new array where each element at index i is the product of all the numbers in the original array except the one at i. Examples Input 5 1 2 3 4 5 Output 120 60 40 30 24 Input 3 3 6 9 Output 54 27 18","solution":"def product_except_self(nums): Returns an array where each element at index i is the product of all the numbers in the input array except the one at i. n = len(nums) if n == 0: return [] # Initialize arrays for left and right products left_products = [1] * n right_products = [1] * n result = [1] * n # Fill in left_products for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill in right_products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Fill in result by multiplying left and right products for i in range(n): result[i] = left_products[i] * right_products[i] return result def parse_input_and_solve(input_str): Parses the input string, calls product_except_self, and returns the result as a space-separated string. input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) nums = list(map(int, input_lines[1].split())) result = product_except_self(nums) return \' \'.join(map(str, result))"},{"question":"Minh is a video game enthusiast who loves collecting rare game items. In his video game, there\'s a special shop that sells rare items, each with a specific rarity level. Minh wants to maximize the total rarity of the items he collects, but there\'s a catch — he can only carry a limited number of items due to his backpack\'s capacity. Every day, new items appear in the shop, each with its own rarity. Minh can buy any number of items as long as the total number of items in his backpack does not exceed a given limit. The rarity of the items is described by a unique non-negative integer value. Help Minh determine the maximum total rarity he can have in his backpack. Input The first line contains two integers n and c (1 ≤ n ≤ 105, 1 ≤ c ≤ n), where n is the number of items available in the shop and c is the capacity of Minh\'s backpack (the maximum number of items he can carry). The second line contains n integers r1, r2, ..., rn (0 ≤ ri ≤ 109) — the rarity values of the items in the shop. Output Print a single integer — the maximum total rarity that Minh can have in his backpack. Examples Input 5 2 10 50 20 30 40 Output 90 Input 3 3 5 8 3 Output 16 Input 4 1 10 10 10 10 Output 10 Note In the first example, Minh can choose the two items with rarities 50 and 40 to maximize the total rarity to 90. In the second example, Minh\'s backpack is big enough to carry all the given items, so the total rarity is 5 + 8 + 3 = 16. In the third example, regardless of which item Minh chooses, the maximum total rarity he can have in his backpack is 10.","solution":"def max_total_rarity(n, c, rarities): Returns the maximum total rarity that can be carried in the backpack. :param n: Number of items available in the shop :param c: Capacity of the backpack (maximum number of items) :param rarities: List of rarity values of the items :return: Maximum total rarity # Sort the list of rarities in descending order rarities.sort(reverse=True) # Sum up the `c` most rare items return sum(rarities[:c])"},{"question":"You are given an array a consisting of n positive integers. You can perform the following operation zero or more times: select any two elements from the array (possibly the same), and replace each of them with their greatest common divisor (GCD). Your task is to determine the minimum possible value of the sum of the elements in the array a that you can obtain after performing the operation any number of times. For example, consider the array a = [12, 15, 18]. By following the steps below, we can reduce the sum to a minimum: 1. Select elements 12 and 18, replace both with their GCD 6: the array becomes [6, 15, 6]. 2. Select elements 6 and 15, replace both with their GCD 3: the array becomes [3, 3, 6]. 3. Select elements 3 and 6, replace both with their GCD 3: the array becomes [3, 3, 3]. The minimum possible sum in this case is 3 + 3 + 3 = 9. Since the sum of elements in the array a can be initially very large, the final answer should be printed subtracted by k, where k is provided as part of the input. -----Input----- The first line of the input contains a single integer q (1 le q le 50) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains two integers n and k (1 le n le 100, 1 le k le 10^9) — the number of elements in the array a and the integer to subtract from the final answer. The second line of each test case contains n positive integers a_1, a_2, ..., a_n (1 le a_i le 1000) — the elements of the array a. -----Output----- For each test case print one integer — the minimum possible value of the sum of the elements in the array a after performing the operation zero or more times and subtracting k. If the result is negative, print 0. -----Examples----- Input 3 3 5 12 15 18 4 10 9 6 12 15 2 1 5 10 Output 4 18 9 -----Note----- In the first test case, the array can be minimized to [3, 3, 3], resulting in a sum of 9. After subtracting k = 5, the result is 9 - 5 = 4. In the second test case, the array can be minimized to [3, 3, 3, 3], resulting in a sum of 12. After subtracting k = 10, the result is 12 - 10 = 2, but since it\'s smaller than the initial sum, we keep the larger sum 12. Hence, the result is 12 - 10 = 2 - 10 = 0. In the third test case, the minimum sum can be 5, and subtracting 1 from it results in 5 - 1 = 4 but the minimum sum possible after all operations is 9. So the output is 9.","solution":"import math from functools import reduce def min_sum_with_subtraction(q, test_cases): results = [] for n, k, a in test_cases: gcd_all = reduce(math.gcd, a) min_sum = gcd_all * n final_result = max(0, min_sum - k) results.append(final_result) return results"},{"question":"Design an algorithm that helps a cashier to make change using a minimal number of coins. The cashier has coins of four denominations: 1, 5, 10, and 25 cents. Given an amount in cents, your task is to determine the minimum number of coins that make up that amount. -----Input----- First line of input will contain a single integer, N (1 leq N leq 1000), the amount in cents. -----Output----- The output should be a single integer, the minimal number of coins required to make change for the given amount. -----Examples----- Sample Input 1: 99 Sample Output 1: 9 Sample Input 2: 25 Sample Output 2: 1 Sample Input 3: 58 Sample Output 3: 6","solution":"def minimal_number_of_coins(N): This function returns the minimal number of coins needed to make change for the given amount N in cents. Args: N (int): The amount in cents (1 <= N <= 1000) Returns: int: The minimal number of coins needed. # Coin denominations coins = [25, 10, 5, 1] # Variable to store the number of coins needed num_coins = 0 # For each denomination, determine how many coins can fit into N for coin in coins: num_coins += N // coin # Integer division to get the number of coins of this denomination N %= coin # Remainder which will be used in next iteration return num_coins"},{"question":"Given a 2D grid of characters and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. For example, if the grid is ``` [[\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\']] ``` and the word is \\"ABCCED\\", then the word exists in the grid. Function Description Complete the `exist` function in the editor below. It must return a boolean indicating if the word exists in the grid. `exist` has the following parameter(s): - `board`: 2D list of characters - `word`: a string Input Format The first line contains two integers `m` and `n` that represent the number of rows and columns in the grid, respectively. The next `m` lines contain `n` characters each, representing the grid. The last line contains the word to be matched. Constraints 1 ≤ m, n ≤ 200 1 ≤ word.length ≤ 10^4 All characters are uppercase English letters. Output Format Return `true` if the word exists in the grid, `false` otherwise. Print the result for each test case on a new line. Sample Input ``` 3 4 A B C E S F C S A D E E ABCCED ``` Sample Output ``` true ``` Explanation The word \\"ABCCED\\" can be constructed from the letters in the grid by sequentially moving right, right, down, down, left, and down.","solution":"def exist(board, word): def dfs(board, word, i, j, index): if index == len(word): return True if i < 0 or j < 0 or i >= len(board) or j >= len(board[0]) or board[i][j] != word[index]: return False temp = board[i][j] board[i][j] = \'#\' found = (dfs(board, word, i + 1, j, index + 1) or dfs(board, word, i - 1, j, index + 1) or dfs(board, word, i, j + 1, index + 1) or dfs(board, word, i, j - 1, index + 1)) board[i][j] = temp return found for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0] and dfs(board, word, i, j, 0): return True return False"},{"question":"You are asked to design an algorithm to help an event organizer allocate rooms for several conferences. The organizer knows the start and end times of each conference and the organizer can choose to reschedule the conferences if necessary. The goal is to find the minimum number of rooms required to host all the conferences without any overlap. Input First line of input will contain integer T (no. of test cases). For each test case, the first line contains an integer N, the number of conferences. Each of the next N lines contains two integers Si and Ei where Si is the start time and Ei is the end time of the i-th conference. Output For each test case, output the minimum number of rooms required in a new line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 0 ≤ Si < Ei ≤ 10^6 SAMPLE INPUT 1 5 0 30 5 10 15 20 30 35 35 40 SAMPLE OUTPUT 2 Explanation For the first test case, the first three conferences overlap with each other and require three rooms: (0-30), (5-10), (15-20). The last two conferences do not overlap with each other and can be placed in rooms that have been freed: (30-35), (35-40). So, the minimum number of rooms required is 2.","solution":"import heapq def min_rooms_required(conferences): if not conferences: return 0 conferences.sort(key=lambda x: x[0]) min_heap = [] heapq.heappush(min_heap, conferences[0][1]) for conference in conferences[1:]: if conference[0] >= min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, conference[1]) return len(min_heap) def allocate_rooms(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] conferences = test_cases[i][1] results.append(min_rooms_required(conferences)) return results"},{"question":"Alice has recently started solving programming puzzles and she\'s currently focused on \\"balanced parentheses\\" problems. Given a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', Alice needs to determine if the input string is valid. An input string is considered valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type. Write a function to determine if the input string containing the parentheses is valid. -----Input----- - A single string consisting of \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. - The length of the string does not exceed 10,000 characters. -----Output----- - Return \\"true\\" if the string is valid, otherwise return \\"false\\". -----Examples----- Input: \\"()\\" Output: true Input: \\"([)]\\" Output: false Input: \\"{[]}\\" Output: true -----Note----- In the first example, the string \\"()\\" is a valid parentheses string. In the second example, although \\"()\\" and \\"[]\\" individually are valid, \\"([)]\\" is not valid because the brackets are not closed in the correct order. In the third example, even though there are different types of brackets, \\"{[]}\\" is valid because the open brackets are closed in the correct order. Consider implementing an efficient solution using a stack data structure to match parentheses properly.","solution":"def is_valid_parentheses(s): Determines if the input string containing the parentheses is valid. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return \\"false\\" else: stack.append(char) return \\"true\\" if not stack else \\"false\\""},{"question":"You are given a sequence of N integers. Your task is to transform this sequence such that all odd numbers are shifted to the beginning, and all even numbers are shifted to the end. However, you must maintain the relative order of the odd and even numbers from the original sequence. For example, if the sequence is `[5, 2, 7, 8, 3]`, the transformed sequence should be `[5, 7, 3, 2, 8]` because `5`, `7`, and `3` are odd numbers and `2`, `8` are even numbers. -----Task----- Implement a function that transforms the given sequence as described. -----Input----- The input consists of two lines: - The first line contains an integer N, the number of elements in the sequence. - The second line contains N integers separated by space, representing the sequence. -----Constraints----- 1 leq N leq 1000 -10^9 leq Each integer leq 10^9 -----Output----- Output a single line containing the transformed sequence with all odd numbers appearing before even numbers while maintaining the original relative order of the numbers. -----Examples----- Sample Input 1: 5 5 2 7 8 3 Sample Output 1: 5 7 3 2 8 Sample Input 2: 4 4 1 2 3 Sample Output 2: 1 3 4 2","solution":"def transform_sequence(n, sequence): Transforms the sequence such that all odd numbers are shifted to the beginning and all even numbers are shifted to the end while maintaining the relative order of the numbers from the original sequence. odds = [num for num in sequence if num % 2 != 0] evens = [num for num in sequence if num % 2 == 0] return odds + evens"},{"question":"You are given a string consisting of lowercase English letters and you are required to transform it. The transformation involves replacing every character from the string with the next character in the English alphabet, with \'z\' wrapping around to \'a\'. After transforming all the characters, you must shuffle the string such that no character appears in its original place. If it\'s not possible to shuffle the string under these constraints, output \\"IMPOSSIBLE\\". Input The first line contains an integer n (1 ≤ n ≤ 10^5), which represents the length of the string. The second line contains a string of length n consisting of only lowercase English letters. Output If it is possible to shuffle the transformed string such that no character remains in its initial position, print the shuffled string meeting the criteria. If not, print \\"IMPOSSIBLE\\". Examples Input 7 abcdeyz Output bcdefza Input 1 a Output IMPOSSIBLE Input 5 aaaaa Output IMPOSSIBLE Note In the first example, the transformation of the string \\"abcdeyz\\" would result in \\"bcdefza\\". After shuffling, one possible solution that meets the constraints is \\"bcdefza\\". In the second example, with only one character, it is impossible to shuffle it such that no character remains in its initial position, so the output is \\"IMPOSSIBLE\\". In the final example, all characters are identical, making it impossible to shuffle and meet the constraints, so the output is \\"IMPOSSIBLE\\".","solution":"import random def transform_and_shuffle(n, s): if n == 1: return \\"IMPOSSIBLE\\" transformed = [(chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\'))) for char in s] if len(set(transformed)) == 1: return \\"IMPOSSIBLE\\" while True: shuffled = transformed[:] random.shuffle(shuffled) if all(shuffled[i] != transformed[i] for i in range(n)): return \'\'.join(shuffled)"},{"question":"Write a program that implements the Merge Sort algorithm to sort an array of integers in ascending order. The algorithm must follow this high-level pseudo code structure: 1. If the array has one element or is empty, it is already sorted. 2. Divide the array into two halves. 3. Recursively sort each half. 4. Merge the two sorted halves to produce a sorted array. To illustrate the process, your program should trace the state of the array after each merge operation. Hint: You may use the following function signature for merging in C: ```c void merge(int array[], int left, int mid, int right); ``` # Constraints: - 1 ≤ N ≤ 100 # Input: - The first line of the input contains an integer N, the number of elements in the sequence. - The second line contains the N elements of the array, separated by a single space. # Output: - The first line of the output should be the original unsorted array. - Each subsequent line should show the state of the array after each merge operation, with elements separated by a single space. # Examples Input: ``` 5 4 1 5 3 2 ``` Output: ``` 4 1 5 3 2 1 4 5 3 2 1 4 5 3 2 1 3 4 5 ``` Input: ``` 4 8 7 6 5 ``` Output: ``` 8 7 6 5 7 8 6 5 7 8 5 6 5 6 7 8 ```","solution":"def merge(arr, left, mid, right): # Create temporary arrays to hold left and right subarrays left_sub = arr[left:mid+1] right_sub = arr[mid+1:right+1] # Initial indexes for left, right and merged subarrays i = 0 j = 0 k = left # Merging the subarrays back to arr while i < len(left_sub) and j < len(right_sub): if left_sub[i] <= right_sub[j]: arr[k] = left_sub[i] i += 1 else: arr[k] = right_sub[j] j += 1 k += 1 # Copy the remaining elements of left_sub, if any while i < len(left_sub): arr[k] = left_sub[i] i += 1 k += 1 # Copy the remaining elements of right_sub, if any while j < len(right_sub): arr[k] = right_sub[j] j += 1 k += 1 print(\\" \\".join(map(str, arr))) def merge_sort(arr, left, right): if left < right: mid = (left + right) // 2 merge_sort(arr, left, mid) merge_sort(arr, mid+1, right) merge(arr, left, mid, right) def sort_and_trace(arr): print(\\" \\".join(map(str, arr))) merge_sort(arr, 0, len(arr)-1) def main(): N = int(input().strip()) arr = list(map(int, input().strip().split())) sort_and_trace(arr) if __name__ == \\"__main__\\": main()"},{"question":"Given three angles A, B, and C, determine if these angles can form a valid triangle. A triangle is valid if the sum of its internal angles equals 180 degrees and all angles are greater than zero. Example 1: Input: A = 60, B = 60, C = 60 Output: These angles form a valid triangle Explanation: The sum of the angles is 180 and each angle is greater than zero. Example 2: Input: A = 90, B = 45, C = 50 Output: These angles do not form a valid triangle Explanation: The sum of the angles is not 180. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isValidTriangle() which takes three integers A, B, and C as input. The function should check if these three angles can form a valid triangle and return the respective string: If the angles form a valid triangle, return \\"These angles form a valid triangle\\" without quotes. If the angles do not form a valid triangle, return \\"These angles do not form a valid triangle\\" without quotes. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= A, B, C <= 179","solution":"def isValidTriangle(A, B, C): Determines if three given angles can form a valid triangle. Args: A, B, C: Angles in degrees. Returns: A string indicating whether the angles form a valid triangle. if A > 0 and B > 0 and C > 0 and A + B + C == 180: return \\"These angles form a valid triangle\\" else: return \\"These angles do not form a valid triangle\\""},{"question":"A robot is navigating a rectangular grid of size n times m (with rows numbered from 1 to n and columns numbered from 1 to m). The robot starts at a given coordinate (S_x, S_y) and needs to perform a sequence of moves to collect all the \\"treasures\\" on the grid. The robot cannot revisit any cell, including the starting cell. The robot can only move to adjacent cells in the following directions: - Up: (x, y) rightarrow (x-1, y) - Down: (x, y) rightarrow (x+1, y) - Left: (x, y) rightarrow (x, y-1) - Right: (x, y) rightarrow (x, y+1) Your task is to create a path for the robot that collects all the treasures and ends at a border cell. A border cell is any cell located on the perimeter of the grid. -----Input----- The only line of input contains four integers n, m, S_x, and S_y (2 leq n,m leq 50, 1 leq S_x leq n, 1 leq S_y leq m) — the number of rows, the number of columns, and the initial position of your robot, respectively. -----Output----- Output the coordinates of each cell the robot visits in the order they are visited, one per line. Each coordinate should be given as two integers x_i and y_i (1 le x_i le n, 1 le y_i le m). The output should have n times m lines exactly, each representing a unique cell the robot visits. If there are multiple valid paths that satisfy the conditions, output any one of them. -----Example----- Input 3 3 2 2 Output 2 2 2 1 2 3 1 3 3 3 3 2 3 1 1 1 1 2 Input 4 4 3 3 Output 3 3 2 3 2 4 1 4 1 3 1 2 1 1 2 1 3 1 4 1 4 2 4 3 4 4 3 4 3 2 3 1","solution":"def navigate_grid(n, m, S_x, S_y): Generates a path for the robot to collect all the treasures and end at a border cell. visited = set() path = [(S_x, S_y)] visited.add((S_x, S_y)) def collect_treasures(x, y): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dx, dy in directions: nx, ny = x + dx, y + dy if 1 <= nx <= n and 1 <= ny <= m and (nx, ny) not in visited: visited.add((nx, ny)) path.append((nx, ny)) collect_treasures(nx, ny) # Early return after all treasures are collected if len(path) == n * m: return collect_treasures(S_x, S_y) return path # Example usage: # for x, y in navigate_grid(3, 3, 2, 2): # print(x, y)"},{"question":"A bakery produces a variety of pastries and cakes. Each day, certain amounts of each pastry type are produced and sold. There are P pastry types. An analytical tool tracks the daily sales data and determines how many of each pastry type must be prepared the following day to meet customer demands based on past trends. However, a glitch occurred, and the tool only pushed bulk production data. Given the total number of pastries produced on the previous day and a ratio that each pastry type should ideally have, your task is to estimate how much of each type of pastry should be prepared for the upcoming day. The ratio is given as a list of integers where each integer represents the relative quantity of a specific pastry type to the other types. Input The input consists of multiple datasets. Each dataset comprises: - The integer T (1 ≤ T ≤ 10^6): The total number of pastries to be produced the next day. - The integer P (1 ≤ P ≤ 10): The number of different pastry types. - A list of P integers: The ideal ratio of each pastry type. The end of the input is indicated by a single line containing two zeros. Output For each dataset, output a list of P integers representing the estimated number of pastries to be produced for each type. The result for each dataset should be on a single line, with the numbers separated by spaces. Example Input 100 4 1 1 1 1 200 3 2 3 5 0 0 Output 25 25 25 25 40 60 100","solution":"def estimate_pastries(T, P, ratios): Given the total number of pastries to be produced (T), the number of different pastry types (P), and the list of ideal production ratios, estimate the number of each pastry type to be produced. total_ratio_sum = sum(ratios) estimated_counts = [(T * ratio) // total_ratio_sum for ratio in ratios] return estimated_counts def process_input(inputs): Process the list of inputs to generate the corresponding output list for each dataset. results = [] while inputs: T, P = inputs[:2] if T == 0 and P == 0: break ratios = inputs[2:2+P] result = estimate_pastries(T, P, ratios) results.append(result) inputs = inputs[2+P:] for result in results: print(\\" \\".join(map(str, result))) # Example input processing input_data = [ 100, 4, 1, 1, 1, 1, 200, 3, 2, 3, 5, 0, 0 ] process_input(input_data)"},{"question":"Create a function that, given an integer n, returns a list of all the prime numbers up to and including n. Example: prime_numbers(10) --> [2, 3, 5, 7] Note that 1 is not a prime number. The function should handle cases where n is less than 2 by returning an empty list, since there are no prime numbers less than 2.","solution":"def prime_numbers(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n+1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Ricky loves playing with integers and always comes up with new challenges for his friends. This time, he has an interesting problem involving arrays that he wants his friend Sam to solve. Ricky gave Sam an array A of N integers and an integer Q denoting the number of queries. Each query consists of three integers L, R, and K. For each query, Sam needs to count the number of elements in the subarray from index L to R (both inclusive) that are divisible by K. Sam found the problem difficult and asked for your help. Can you solve it for him? Input: - First line will contain two integers N and Q. - Next line will contain N space-separated integers representing array A. - Next Q lines will each contain three space-separated integers L, R, and K denoting each query. Output: For each query, print a single integer denoting the count of elements in the subarray [L...R] that are divisible by K. Constraints: - 1 ≤ N, Q ≤ 10^5 - 1 ≤ A[i], K ≤ 10^9 - 1 ≤ L ≤ R ≤ N SAMPLE INPUT 10 3 1 2 3 4 5 6 7 8 9 10 1 10 2 3 7 3 4 10 5 SAMPLE OUTPUT 5 2 2 Explanation: Q1: The subarray from index 1 to 10 is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. The elements divisible by 2 are [2, 4, 6, 8, 10], so the answer is 5. Q2: The subarray from index 3 to 7 is [3, 4, 5, 6, 7]. The elements divisible by 3 are [3, 6], so the answer is 2. Q3: The subarray from index 4 to 10 is [4, 5, 6, 7, 8, 9, 10]. The elements divisible by 5 are [5, 10], so the answer is 2.","solution":"def count_divisibles_in_subarray(N, Q, A, queries): result = [] for L, R, K in queries: count = 0 for i in range(L - 1, R): if A[i] % K == 0: count += 1 result.append(count) return result"},{"question":"You are given an array of integers. In one move you can choose any two different indices `i` and `j` (1 ≤ i, j ≤ n) and swap the elements at those indices. Your goal is to sort the array in non-decreasing order with the minimum number of swap operations. Write a program to determine the minimum number of swaps required to sort the array. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the array. -----Output----- Print the minimum number of swaps required to sort the array in non-decreasing order. -----Examples----- Input 3 3 1 2 Output 2 Input 5 4 3 1 2 5 Output 3 -----Note----- In the first example, one of the optimal ways is to swap elements at indices 1 and 2, and then swap elements at indices 2 and 3. The sorted array will be [1, 2, 3] after 2 swaps. In the second example, one of the optimal ways is to swap elements at indices 1 and 4, then swap elements at indices 2 and 3, and finally swap elements at indices 3 and 4. The sorted array will be [1, 2, 3, 4, 5] after 3 swaps.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array in non-decreasing order. n = len(arr) arr_pos = [*enumerate(arr)] # Sort the array by element values to get the target positions of elements. arr_pos.sort(key=lambda it: it[1]) # Initialize visited array to keep track of visited elements. visited = {k: False for k in range(n)} # Initialize result swaps = 0 # Traverse elements in the sorted array for i in range(n): # If already visited or element is already in correct position if visited[i] or arr_pos[i][0] == i: continue # Find out the size of the cycle cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][0] cycle_size += 1 # Update the swaps required, any cycle of size \\"k\\" will contribute \\"k-1\\" swaps if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Jack loves playing computer games. Recently, he has started collecting coins in different games. Each game has different types of coins, and each coin can be traded in a central trading marketplace for gold coins, which are universal. Jack has collected a number of coins from multiple games and wants to find out how many gold coins he can get if he trades all of his game coins optimally. Each game has a specific exchange rate for its coins in terms of gold coins. You need to help Jack determine the maximum number of gold coins he can collect by trading his coins from all the games. ------ Input ------ The first line contains T - the number of test cases. For each test case, the first line contains G - the number of different games Jack has collected coins from. The next G lines each contain two integers: C - the number of coins Jack has from this game, and R - the exchange rate of the coins from this game to gold coins (i.e., number of gold coins he gets for one coin from this game). ------ Output ------ For each test case, output the total number of gold coins Jack can collect by trading in all his game coins. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ G ≤ 50 1 ≤ C ≤ 1000 1 ≤ R ≤ 100 ----- Sample Input 1 ------ 3 2 100 1 200 2 3 50 5 30 4 20 10 1 400 3 ----- Sample Output 1 ------ 500 460 1200 ----- explanation 1 ------ Test Case 1: Jack can trade his coins from two games: 100 coins at a rate of 1 gold coin per coin (100 gold coins), and 200 coins at a rate of 2 gold coins per coin (400 gold coins). The total is 100 + 400 = 500 gold coins. Test Case 2: Jack can trade his coins from three games: 50 coins at a rate of 5 gold coins per coin (250 gold coins), 30 coins at a rate of 4 gold coins per coin (120 gold coins), and 20 coins at a rate of 10 gold coins per coin (200 gold coins). The total is 250 + 120 + 200 = 570 gold coins. Test Case 3: Jack has coins from one game only: 400 coins at a rate of 3 gold coins per coin (1200 gold coins).","solution":"def max_gold_coins(test_cases): results = [] for case in test_cases: G = case[0] total_gold = 0 for i in range(1, G + 1): C, R = case[i] total_gold += C * R results.append(total_gold) return results"},{"question":"In a certain village, there are `n` houses arranged in a straight line, and each house either has a cat or a dog living in it. The villagers want to arrange a parade where all animals pass through the line of houses. However, the cats and dogs in the village do not get along, so the villagers want to make sure that at no point during the parade are there more than two consecutive houses with the same type of animal. Given the initial arrangement of animals in the houses, can you help the villagers determine if it\'s possible to rearrange the animals such that no more than two consecutive houses have the same type of animal? -----Input----- The first line contains an integer `t` (1 ≤ t ≤ 100) denoting the number of test cases. The next `t` lines contain descriptions of the test cases. For each test case, the first line contains a single integer `n` (1 ≤ n ≤ 100) denoting the number of houses. The second line contains a string `s` of length `n`, where each character is either `C` (representing a cat) or `D` (representing a dog). -----Output----- For each test case, print \\"YES\\" if it is possible to rearrange the animals such that no more than two consecutive houses have the same type of animal, or \\"NO\\" otherwise (both should be case-insensitive). -----Examples----- Input 5 5 CDDCC 3 CCC 4 DDDD 6 DCDCDC 2 DC Output YES NO NO YES YES -----Note----- In the first test case, possible valid arrangements include \\"CDC CD\\" or \\"CDCC D\\". In the second test case, it is impossible to rearrange the animals to avoid more than two consecutive houses having the same type. In the third test case, similarly, it is impossible to avoid having three consecutive houses with the same type. In the fourth test case, the initial arrangement already satisfies the condition. In the fifth test case, the initial arrangement already satisfies the condition.","solution":"def can_rearrange_animals(n, s): Determines if it\'s possible to rearrange the animals such that no more than two consecutive houses have the same type of animal. Parameters: n (int): The number of houses. s (str): The string representing the initial arrangement of animals. Returns: str: \\"YES\\" if the rearrangement is possible, otherwise \\"NO\\". from collections import Counter # Count occurrences of each animal count = Counter(s) # Check the maximum occurrence of any animal max_animal_count = max(count.values()) # The formula to check rearrangement feasibility: # If the number of occurrences of the most frequent animal is more than # the halves of the total number of houses plus 1, rearrangement is impossible. if max_animal_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): Processes a list of test cases and returns the results for each test case. Parameters: test_cases (list of tuples): List of test cases, each represented as a tuple (n, s). Returns: list of str: Results for each test case (\\"YES\\" or \\"NO\\"). results = [] for n, s in test_cases: results.append(can_rearrange_animals(n, s)) return results"},{"question":"In a distant magical land, there is a sequence of magical orbs arranged in a line. Each orb has a specific amount of magical energy stored in it. The magical energy of the i-th orb is given by an integer A[i]. A powerful wizard wants to choose a contiguous subsequence of these orbs such that when they are used in a spell, the total energy loss is minimized. The energy loss of a chosen subsequence is defined as the absolute difference between the maximum and minimum energy values in that subsequence. Given the array A of the orbs\' magical energies, you need to help the wizard determine the minimal energy loss for each of his Q queries. Each query provides a pair of integers (L, R) which represents the indices of the chosen subsequence (1-based index). For each query, you have to output the minimal energy loss of the subsequence A[L:R]. -----Input----- - The first line contains two space-separated integers N and Q, representing the number of orbs and the number of queries, respectively. - The second line contains N space-separated integers A[i] (where 1 ≤ i ≤ N), the energy values of the orbs. - The next Q lines each contain two space-separated integers L and R (1 ≤ L ≤ R ≤ N), which represent the 1-based indices of the subsequence for that query. -----Output----- For each query, output a single integer - the minimal energy loss for the given subsequence (L, R). -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 0 ≤ A[i] ≤ 10^9 for each valid i -----Example Input----- 5 3 5 1 3 8 4 1 3 2 5 1 5 -----Example Output----- 4 7 7 -----Explanation----- For the first query, the subsequence is [5, 1, 3]. The minimal energy loss is |5 - 1| = 4. For the second query, the subsequence is [1, 3, 8, 4]. The minimal energy loss is |8 - 1| = 7. For the third query, the subsequence is [5, 1, 3, 8, 4]. The minimal energy loss is |8 - 1| = 7.","solution":"def minimal_energy_loss(n, q, A, queries): Calculate minimal energy loss for each of the given queries. Parameters: n (int): The number of orbs. q (int): The number of queries. A (list): The list containing the energy values of the orbs. queries (list): A list of tuples, where each tuple contains the indices L and R for the query. Returns: list: A list containing the minimal energy loss for each query. results = [] for L, R in queries: # Convert 1-based index to 0-based index. L -= 1 R -= 1 subseq = A[L:R+1] min_energy = min(subseq) max_energy = max(subseq) energy_loss = max_energy - min_energy results.append(energy_loss) return results"},{"question":"You are given an array of integers and an integer target. Your task is to determine if there are two distinct indices `i` and `j` in the array such that the sum of the elements at these indices is equal to the target. Consider this example... array = [2, 7, 11, 15] target = 9 Here, integers at indices `0` and `1` sum up to 9 (2 + 7 = 9). Therefore, the output should be `True`. Your task is to write a function that checks if such a pair exists in the array for a given target sum. Function Signature: ```python def has_pair_with_sum(array: List[int], target: int) -> bool: ``` **Input:** - `array`: List of integers (1 <= len(array) <= 10^6, -10^7 <= array[i] <= 10^7) - `target`: An integer (-10^7 <= target <= 10^7) **Output:** - Return `True` if such a pair exists, otherwise `False`. **Examples:** ```python assert has_pair_with_sum([2, 7, 11, 15], 9) == True assert has_pair_with_sum([1, 2, 3, 4], 8) == False ```","solution":"from typing import List def has_pair_with_sum(array: List[int], target: int) -> bool: Determines if there are two distinct indices i and j in the array such that the sum of the elements at these indices is equal to the target. seen = set() for num in array: if target - num in seen: return True seen.add(num) return False"},{"question":"The city of Gridopolis is a uniquely planned city with m horizontal and n vertical roads, forming an m x n grid of intersections. On certain days, some intersections might be closed for maintenance, making it hard for residents to navigate the city. Given the size of the city and the list of closed intersections, determine the number of intersections that remain open. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100), representing the number of horizontal and vertical roads respectively. The second line contains an integer k (0 ≤ k ≤ m * n), representing the number of closed intersections. The next k lines each contain two integers x and y (1 ≤ x ≤ m, 1 ≤ y ≤ n), representing the coordinates of the closed intersections. Output Print a single number — the number of open intersections. Examples Input 4 4 3 1 1 2 2 3 3 Output 13","solution":"def count_open_intersections(m, n, closed_intersections): Calculates the number of open intersections in the m x n grid. Args: m (int): Number of horizontal roads. n (int): Number of vertical roads. closed_intersections (list of tuples): List of (x, y) coordinates of closed intersections. Returns: int: Number of open intersections. total_intersections = m * n closed_count = len(closed_intersections) open_intersections = total_intersections - closed_count return open_intersections"},{"question":"A delivery robot moves data files between rows of servers arranged in a grid. Each server in the grid is represented as a cell that can either be occupied by data files (`1`) or be empty (`0`). The robot can only move horizontally or vertically to an adjacent cell, but not diagonally. You need to determine the maximum number of data files the robot can transfer in one continuous move within the grid. The move must start from a cell containing a data file and continue through adjacent cells containing data files. Input - The first line contains two integers `n` and `m`, the dimensions of the grid. - The following `n` lines each contain `m` space-separated integers representing the grid. Output Print the maximum number of data files the robot can transfer in one continuous move. Constraints 1 ≤ n, m ≤ 1000 SAMPLE INPUT 4 5 0 1 1 0 0 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 SAMPLE OUTPUT 3 Explanation The robot starts at the cell (0,1) with value `1` and can move to the adjacent cell (0,2). This forms a continuous move with 2 data files. In the third row, the robot can start at cell (2,2) and move to (2,3) and (2,4) forming a continuous move with 3 data files, which is the maximum possible. Note that the robot cannot move diagonally, thus segments like (0,1) to (1,2) are not valid moves.","solution":"def max_continuous_data_files(grid): def dfs(i, j): if i < 0 or j < 0 or i >= n or j >= m or grid[i][j] == 0: return 0 grid[i][j] = 0 return 1 + dfs(i+1, j) + dfs(i-1, j) + dfs(i, j+1) + dfs(i, j-1) n = len(grid) m = len(grid[0]) max_files = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: max_files = max(max_files, dfs(i, j)) return max_files def max_continuous_data_files_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): grid.append([int(data[index + j]) for j in range(m)]) index += m print(max_continuous_data_files(grid))"},{"question":"Alice is organizing a tournament for her friends where each person competes in exactly two games. Each participant receives two different scores from the games, represented as integers. Alice wants to ensure that the absolute differences of the two scores for each participant are all distinct. Help Alice distribute the scores such that the absolute differences are unique. For example, if the scores are `p = [3, 8, 5]` and `q = [2, 4, 7]`, then we can distribute the scores as follows: Give the first participant the scores 3 and 7, with an absolute difference of `|3 - 7| = 4`. Give the second participant the scores 8 and 2, with an absolute difference of `|8 - 2| = 6`. Give the third participant the scores 5 and 4, with an absolute difference of `|5 - 4| = 1`. Here is an example of an invalid distribution: Give the first participant the scores 3 and 4, with an absolute difference of `|3 - 4| = 1`. Give the second participant the scores 8 and 7, with an absolute difference of `|8 - 7| = 1`. This distribution is invalid, as the absolute differences for the first two participants are the same. -----Input----- The input consists of multiple test cases. The first line contains an integer `t` (`1 ≤ t ≤ 50`) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer `n` (`1 ≤ n ≤ 50`) — the number of participants. The second line of each test case contains `n` integers `p_1, p_2, ..., p_n` (`1 ≤ p_i ≤ 1000`) — the scores from the first game. The third line of each test case contains `n` integers `q_1, q_2, ..., q_n` (`1 ≤ q_i ≤ 1000`) — the scores from the second game. -----Output----- For each test case, print a line containing `n` integers `a_1, a_2, ..., a_n`, representing that the `i`-th participant receives score `a_i` from the first game. In the next line print `n` integers `b_1, b_2, ..., b_n`, representing that the `i`-th participant receives score `b_i` from the second game. The absolute differences `|a_1 - b_1|, |a_2 - b_2|, ..., |a_n - b_n|` should all be distinct. The numbers `a_1, ..., a_n` should be equal to the numbers `p_1, ..., p_n` in some order, and the numbers `b_1, ..., b_n` should be equal to the numbers `q_1, ..., q_n` in some order. It can be shown that an answer always exists. If there are multiple possible answers, you may print any of them. -----Example----- Input 2 3 4 1 6 2 3 5 2 7 3 9 6 Output 4 1 6 5 3 2 7 3 6 9 -----Note----- In the first test case, we can give the scores 4, 1, and 6 from the first game and scores 5, 3, and 2 from the second game with absolute differences of `|4 - 5| = 1`, `|1 - 3| = 2`, and `|6 - 2| = 4`. In the second test case, we can give the scores 7 and 3 from the first game and scores 6 and 9 from the second game with absolute differences of `|7 - 6| = 1` and `|3 - 9| = 6`.","solution":"def tournament_scores(t, test_cases): results = [] for case in test_cases: n, p, q = case p.sort() q.sort(reverse=True) results.append((p, q)) return results"},{"question":"In a world far away, there exists a kingdom where every road forms part of one large cycle. Villagers travel in one direction along the roads of the kingdom. Each village in the kingdom is denoted by V, and the roads are denoted by R, forming one complete cycle. The villagers often calculate the shortest distance between any two villages to make their journey efficient. Your task is to help the king find out the shortest distance between any two villages on the cycle. Given that each road has an equal length of 1 unit, you need to compute the shortest distance for various test cases. Input: The first line contains an integer t (1 ≤ t ≤ 10000) representing the number of test cases. Each of the following t lines contains two integers a and b (0 ≤ a, b < V), representing the starting and ending villages respectively. Output: For each test case, output a single integer, the shortest distance in units between village a and village b. Constraints: - The number of villages is a constant V (2 ≤ V ≤ 10^9). SAMPLE INPUT 3 0 3 1 4 2 5 SAMPLE OUTPUT 3 3 3 Explanation: For each test case, the shortest distance between the two villages in the cycle is either the direct path or the alternate path (whichever is shorter). Since all roads are of equal length, we calculate the distance by taking the minimum of the direct and around-the-cycle distances.","solution":"def shortest_distance(t, queries, V): Returns the shortest distances between villages a and b for t test cases. :param t: Number of test cases. :param queries: List of tuples where each tuple contains two elements (a, b). :param V: Total number of villages. :return: List of shortest distances for each query. results = [] for a, b in queries: direct_path = abs(a - b) around_the_cycle = V - direct_path shortest = min(direct_path, around_the_cycle) results.append(shortest) return results"},{"question":"-----Problem----- Given a list of names, each containing a first name and a last name, your task is to sort these names first by last name, and then by first name if two last names are the same. If two full names are completely identical, they should appear only once in the sorted output. -----Input----- - The first line will contain an integer N, the number of names. - The next N lines will contain a pair of strings each, representing the first name and the last name of a person, separated by a space. -----Output----- Print the sorted list of unique names, each on a new line by last name, then by first name. -----Constraints----- - 1 ≤ N ≤ 105 - The length of each name (first name and last name, separated by a space) will not exceed 100 characters in total. - Names are case-sensitive and involve only alphabetic characters. -----Sample Input----- 5 John Doe Jane Smith Alice Doe John Smith John Doe -----Sample Output----- Alice Doe John Doe Jane Smith John Smith -----Explanation----- After sorting the names by last name and then first name, and removing duplicates, the order is: 1. Alice Doe 2. John Doe 3. Jane Smith 4. John Smith","solution":"def sort_unique_names(names): Sorts a list of names by last name first and then by first name. Removes duplicates. Parameters: names (list of tuples): A list where each element is a tuple of (first_name, last_name). Returns: list of tuples: Sorted list of unique names. unique_names = set(names) sorted_names = sorted(unique_names, key=lambda x: (x[1], x[0])) return sorted_names def process_input(input_lines): Processes input lines to extract names and converts them into a list of tuples. Parameters: input_lines (list of str): A list of string where each string is a line of input. Returns: list of tuples: A list where each element is a tuple of (first_name, last_name). n = int(input_lines[0]) names = [tuple(line.split()) for line in input_lines[1:n + 1]] return names"},{"question":"Two players are playing a game of Matching Bracelets where each player has a bracelet. A bracelet is a circular sequence of colored beads. Two bracelets are considered matching if one bracelet can exactly match the other, starting at any position and possibly being rotated in either direction. The bracelets must have the same number and sequence of colored beads to be considered a match. Your task is to write a program to determine if two given bracelets match. -----Input----- The input consists of two lines. - The first line of input contains a string A representing the beads on the first bracelet. - The second line of input contains a string B representing the beads on the second bracelet. Both strings will have the same length, n (1 le n le 100), and will only contain lowercase English letters representing the colors of the beads. -----Output----- Output a single line containing \\"YES\\" if the two bracelets match, otherwise output \\"NO\\". -----Examples----- Sample Input 1: abcda daabc Sample Output 1: YES Sample Input 2: abcde edcba Sample Output 2: NO","solution":"def matching_bracelets(A, B): Determines if two bracelets match in any rotation. Parameters: A (str): The string representing the beads on the first bracelet. B (str): The string representing the beads on the second bracelet. Returns: str: \\"YES\\" if the bracelets match, otherwise \\"NO\\". if len(A) != len(B): return \\"NO\\" concatenated = A + A if B in concatenated: return \\"YES\\" return \\"NO\\""},{"question":"You are given an integer N, which represents the length of an array. You need to fill this array with integers such that the sum of all elements in the array is even. You are also provided an additional integer M which represents the maximum allowable value for any element in the array. Your task is to determine whether it is possible to fill an array of length N with integers between 1 and M (inclusive) such that the sum of all elements is even. If it is possible, output \\"YES\\" and provide an example of such an array. If it is not possible, output \\"NO\\". ------ Input Format ------ - The first line contains a single integer T — the number of test cases. - Each test case consists of a single line containing two space-separated integers N and M. ------ Output Format ------ - For each test case, if there exists such an array, output \\"YES\\" on the first line and on the second line print N space-separated integers representing the array. If there is no such array, output \\"NO\\". Each character of the output may be printed in either uppercase or lowercase, i.e., the strings YES, yEs, and yes will all be treated as identical. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 1 ≤ M ≤ 10^{9} ------ Sample Input 1 ------ 3 1 2 2 3 3 1 ------ Sample Output 1 ------ NO YES 1 1 NO ------ Explanation 1 ------ Test case 1: For N = 1 and M = 2, the only possible array is [1] or [2], both of which have odd sums, so the output is \\"NO\\". Test case 2: For N = 2 and M = 3, one possible array is [1, 1], whose sum is 2, which is even. Therefore, the output is \\"YES\\" along with one possible array configuration. Test case 3: For N = 3 and M = 1, the only possible array is [1, 1, 1], which sums to 3, an odd number. Hence the output is \\"NO\\".","solution":"def fill_even_sum_array(N, M): # If N == 1 and M >= 1, an array of length 1 will always have an odd sum if N == 1: return \\"NO\\" # If N == 2 and M >= 1, we can simply return [1, 1] since 1+1=2 (even) if N == 2: return \\"YES\\", [1, 1] # If N > 2, we need to check if we can get even sum if N % 2 == 0: # For any even N, we can return N/2 pairs of (1,1) return \\"YES\\", [1] * N else: # For odd N, we have to see if we can use an even number and N-1 ones if M >= 2: return \\"YES\\", [2] + [1] * (N - 1) else: return \\"NO\\" def process_queries(T, queries): results = [] for N, M in queries: result = fill_even_sum_array(N, M) results.append(result) return results"},{"question":"A company has a number of servers organized in the form of a grid. Each server is represented by a cell in the grid. Some of these servers are functional (represented by 1) and some are non-functional (represented by 0). Given the state of the grid, you are required to determine how many clusters of functional servers are there. A cluster is defined as a group of adjacent functional servers. Servers are considered adjacent if they are next to each other horizontally or vertically (not diagonally). -----Input----- The first line contains two space-separated integers n (1 leq n leq 1000) and m (1 leq m leq 1000) which represent the number of rows and columns in the grid, respectively. Each of the next n lines contains m space-separated integers (either 0 or 1) representing the state of the servers. -----Output----- Output a single integer which is the number of clusters of functional servers in the grid. -----Examples----- Sample Input 1: 4 5 1 0 0 1 0 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 Sample Output 1: 3 Sample Input 2: 3 3 1 1 1 1 0 0 1 0 1 Sample Output 2: 2","solution":"def count_clusters(grid): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == 0: return grid[x][y] = 0 # Mark as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy) n = len(grid) m = len(grid[0]) if n > 0 else 0 cluster_count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: cluster_count += 1 dfs(i, j) return cluster_count def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return grid"},{"question":"Write a program that takes a string S as input and determines the length of the longest substring without repeating characters. --- Input --- The input consists of a single line containing the string S. --- Output --- Output a single integer, which is the length of the longest substring of S that contains only unique characters. --- Constraints --- - 1 ≤ |S| ≤ 100,000 - S consists of printable ASCII characters. --- Example --- Input: abcabcbb Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. --- Example --- Input: bbbbb Output: 1 Explanation: The answer is \\"b\\", with the length of 1. --- Example --- Input: pwwkew Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Alice and Bob are participating in a robotics competition. They need to devise an optimal path for their robot to collect the maximum value of resources scattered in a grid. The grid is represented as a 2D grid of non-negative integers where each cell contains a specific amount of resources. The robot starts at the top-left corner of the grid and can only move either right or down at any point in time to reach the bottom-right corner of the grid. Your task is to help Alice and Bob by writing an algorithm that calculates the maximum value of resources that can be collected on the way to the bottom-right corner of the grid. -----Input----- The first line contains an integer `t` (1 le t le 50) — the number of test cases. Each test case consists of the following: The first line contains two space-separated integers `n` and `m` (1 le n, m le 1000) — the number of rows and columns of the grid respectively. Each of the next `n` lines contains `m` space-separated integers, where each integer represents the amount of resources in that particular cell. It is guaranteed that the resource values are non-negative and do not exceed 10^4. -----Output----- For each test case, print the maximum value of resources that can be collected by the robot while traveling from the top-left corner to the bottom-right corner of the grid. -----Examples----- Input 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 Output 12 4 -----Note----- In the first test case, the grid is: 1 3 1 1 5 1 4 2 1 The maximum value path is 1 → 3 → 5 → 2 → 1, collecting resources of a total value of 12. In the second test case, the grid is: 1 2 1 1 The maximum value path is 1 → 2 → 1, collecting resources of a total value of 4.","solution":"def max_resources_collected(t, test_cases): results = [] for case in test_cases: n, m, grid = case if n == 0 or m == 0: results.append(0) continue # Create a dp array to store the maximum resources up to that point dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Populate the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom right cell contains the maximum resources that can be collected results.append(dp[n-1][m-1]) return results"},{"question":"A renowned historian uncovered an ancient device that was believed to determine the \\"balance\\" of a set of tokens. To decipher its secret, they found it crucial to understand the balance mechanism and asked you for help. Each token is represented by an integer, and a set of tokens is considered balanced if the sum of the tokens is zero. Now the historian needs to test this theory on various sets of tokens. The device will input a list of integers, and the goal is to determine if there exists at least one subset of these integers (including potentially the full set) that sums to zero. The subset can be of any size (including the empty subset which sums to zero trivially, but in this case, we are interested in non-empty subsets only). Your task is to write a function that determines whether such a subset exists for the given list of integers. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of tokens. The second line contains n integers representing the value of the tokens. Each integer is between -100 and 100 (inclusive). Output Output \\"YES\\" if there exists a non-empty subset of the input list that sums to zero, otherwise output \\"NO\\". Examples Input 5 3 1 -4 2 2 Output YES Input 3 1 2 3 Output NO","solution":"def has_zero_sum_subset(n, tokens): Determine if there exists a non-empty subset of the given list of integers that sums to zero. :param n: Integer, number of tokens (1 ≤ n ≤ 100) :param tokens: List of integers representing the tokens (-100 to 100) :return: \\"YES\\" if such a subset exists, \\"NO\\" otherwise from itertools import combinations for i in range(1, n+1): for subset in combinations(tokens, i): if sum(subset) == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given a string S containing only lowercase alphabets. You need to perform the following operations: 1. Choose a character and remove all its occurrences from the string. 2. Add the character at any other position in the string. This includes the possibility of placing it at the beginning or the end. Your task is to determine if you can transform string S into a palindrome by performing the above operations any number of times. Input: The input contains a single line with the string S. Output: Output a single line containing \\"YES\\" if it is possible to transform S into a palindrome, or \\"NO\\" otherwise. Sample Input : abcbac Sample Output : YES Constraints: 1 ≤ |S| ≤ 1000 Note: For the sample input, you can follow these steps: * Remove \'a\' to get \\"bcbc\\". * Add \'a\' at the beginning to get \\"abcbc\\". * Remove \'c\' to get \\"abb\\". * Add \'c\' at the end to get \\"abbca\\". * Remove \'b\' to get \\"aca\\". * Add \'b\' in the middle to get \\"abacaba\\", which is a palindrome.","solution":"def can_transform_to_palindrome(s): Determine if a string can be transformed into a palindrome. Parameters: s (str): The input string containing only lowercase alphabets. Returns: str: \\"YES\\" if it is possible to transform the string into a palindrome, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if there is at most 1 character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"A message string containing only uppercase letters has been encoded by shifting each letter up by a certain number of positions in the alphabet (e.g., with a shift of 3, \'A\' becomes \'D\', \'B\' becomes \'E\', \'Z\' becomes \'C\', etc.). Given an encoded message, determine the number of possible original messages that could have been encoded to produce the given message. # Function Signature ```python def possible_original_messages(encoded_message: str) -> int: pass ``` # Input - `encoded_message`: A `string` containing the encoded message. The length of the string will be between 1 and 100, inclusive. The string contains only uppercase alphabetic characters (\'A\' to \'Z\'). # Output - An `integer` representing the count of possible original messages. # Example Example 1: ```python encoded_message = \\"KHOOR\\" result = possible_original_messages(encoded_message) print(result) # Output: 26 ``` Explanation: Every original letter could have been shifted by any number between 1 and 25 positions to arrive at the encoded message \\"KHOOR\\". Example 2: ```python encoded_message = \\"XYZ\\" result = possible_original_messages(encoded_message) print(result) # Output: 26 ``` Explanation: Each letter in the message can be the result of a shift from 1 to 25 positions, hence there are 26 possible combinations. # Notes - You can assume that any message could be the result of any shift between 1 and 25. - Handle single character and longer strings the same way.","solution":"def possible_original_messages(encoded_message: str) -> int: Determines the number of possible original messages that could have been encoded to produce the given message. Since we can shift any letter by up to 25 positions, all encoded messages have 26 possible original messages. Parameters: encoded_message (str): A string containing the encoded message. Returns: int: The count of possible original messages (always 26). return 26"},{"question":"A: 02 Longest Page Sequence problem You are given an integer array P, where P[i] represents the page number of a book in which a particular event happens on the i-th day. Your task is to find the length of the longest subsequence of pages where every page in the subsequence is greater than the previous page. Input format N P_1 P_2 ... P_N The first line gives the number of events N. The second line gives the sequence of page numbers P separated by blanks. Constraint * 1 ≤ N ≤ 10^5 * 1 ≤ P_i ≤ 10^6 Output format The output consists of one line. Print the length of the longest increasing subsequence of page numbers. Input example 1 7 100 101 102 3 4 50 200 Output example 1 5 * In the example, the longest increasing subsequence is (100, 101, 102, 200) of length 5. Example Input 7 100 101 102 3 4 50 200 Output 5","solution":"from bisect import bisect_left def longest_increasing_subsequence(pages): Finds the length of the longest increasing subsequence in the list of page numbers. if not pages: return 0 lis = [] for page in pages: pos = bisect_left(lis, page) if pos < len(lis): lis[pos] = page else: lis.append(page) return len(lis) def solve_longest_page_sequence(N, P): return longest_increasing_subsequence(P)"},{"question":"Dan loves playing board games. His favorite type of board game involves navigating a grid with robots. Each robot can only move either right or down on the grid. Dan has a new game challenge where he needs to navigate a robot from the top-left corner (1,1) to the bottom-right corner (n,m) of an n by m grid. However, the challenge comes with obstacles. Some cells on the grid are marked as obstacles, and the robot cannot move through these cells. Dan wants to find how many unique paths the robot can take to move from the top-left corner to the bottom-right corner, considering the obstacles. Write a program to help Dan find the number of unique paths. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m characters, representing the grid. A \'.\' represents an empty cell, and a \'#\' represents an obstacle. -----Output----- Print the number of unique paths from the top-left corner to the bottom-right corner. Since the number can be large, print the result modulo 1000000007 (10^9 + 7). -----Examples----- Input 3 3 ... .#. ... Output 2 Input 3 3 .#. .#. ... Output 1 Input 3 3 .#. # ... Output 0 -----Note----- For the first example, there are two paths: 1. Right->Right->Down->Down 2. Down->Down->Right->Right For the second example, there\'s only one path: Right->Down->Down->Right For the third example, there are no paths since the robot cannot pass through obstacles.","solution":"MOD = 1000000007 def unique_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 # No path can go through an obstacle else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1] # Example usage n, m = 3, 3 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] print(unique_paths(n, m, grid)) # Output: 2"},{"question":"There are n islands, numbered from 1 to n. There are m one-way bridges connecting these islands. Additionally, there are k types of items scattered across the islands in the form of treasures. Each island contains treasures of only one type. A treasure hunter starts at island 1 on day 1. Each day they can either move to an adjacent island connected by a bridge or stay on the same island to collect all the treasures of the current type available there. The hunter wants to collect as many different types of treasures as possible. Design an algorithm to determine the maximum number of different types of treasures the hunter can collect starting from island 1. Input The first line of the input contains three integers n, m, and k (1 ≤ n ≤ 100 000, 0 ≤ m ≤ 100 000, 1 ≤ k ≤ 50), representing the number of islands, the number of bridges, and the number of treasure types, respectively. Then, m lines follow, each containing two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), indicating a one-way bridge from island u_i to island v_i. The next line contains n integers, where the i-th integer t_i (1 ≤ t_i ≤ k) represents the type of treasure found on the i-th island. It is guaranteed that each island has treasures of exactly one type and for each pair of islands, there exists no more than one bridge leading from u to v. Output Print the maximum number of different kinds of treasures that can be collected starting from island 1. Examples Input 5 6 3 1 2 1 3 2 4 2 5 3 4 4 5 1 2 2 3 1 Output 3 Input 4 4 2 1 2 2 3 3 4 4 1 1 2 1 2 Output 2 Note Explanation of the first example: The treasure hunter can collect all three types of treasures by traveling as follows: - Start on day 1 at island 1 (treasure type 1). - Move on day 2 to island 2 (treasure type 2). - Move on day 3 to island 4 (treasure type 3). After that, the hunter has collected all three types of treasures. Explanation of the second example: The treasure hunter can collect the two types of treasures by traveling as follows: - Start on day 1 at island 1 (treasure type 1). - Move on day 2 to island 2 (treasure type 2). - Move on day 3 to island 3 (treasure type 1, already collected). - Move on day 4 to island 4 (treasure type 2, already collected). Thus, the hunter has collected two types of treasures at the end of their journey.","solution":"from collections import defaultdict, deque def max_treasure_types(n, m, k, bridges, treasures): def bfs(start): visited = [False] * (n + 1) q = deque([start]) visited[start] = True collected_treasures = set() while q: u = q.popleft() collected_treasures.add(treasures[u - 1]) for v in graph[u]: if not visited[v]: visited[v] = True q.append(v) return len(collected_treasures) graph = defaultdict(list) for u, v in bridges: graph[u].append(v) return bfs(1)"},{"question":"A company has a policy to reward employees based on their performance scores during the past year. The performance scores of employees are stored in a list of integers where each integer represents the performance score of an employee. The company wants to calculate the minimum number of rewards the employees can receive, where each employee must receive at least one reward and employees with higher performance scores must receive more rewards than their adjacent employees with lower performance scores. You are required to write a function to determine the minimum number of rewards needed. The function should take in a list of integers representing the performance scores and return an integer representing the minimum number of rewards distributed. Input: A single list of integers where each integer represents the performance score of an employee. The length of the list can be up to 1000. Output: A single integer representing the minimum number of rewards required. SAMPLE INPUT [1, 2, 3, 4, 5] SAMPLE OUTPUT 15 SAMPLE INPUT [5, 4, 3, 2, 1] SAMPLE OUTPUT 15","solution":"def min_rewards(scores): if not scores: return 0 rewards = [1] * len(scores) # Traverse from left to right for i in range(1, len(scores)): if scores[i] > scores[i - 1]: rewards[i] = rewards[i - 1] + 1 # Traverse from right to left for i in range(len(scores) - 2, -1, -1): if scores[i] > scores[i + 1]: rewards[i] = max(rewards[i], rewards[i + 1] + 1) return sum(rewards)"},{"question":"You are given two strings a and b. Your task is to determine the minimum number of operations required to convert string a into string b. You can perform the following three operations on the string a: 1. Insert a character. 2. Delete a character. 3. Replace a character. Write a function `minEditDistance` to calculate this minimum number of operations. Function Description Complete the `minEditDistance` function in the editor below. `minEditDistance` has the following parameter(s): - `a`: a string - `b`: another string Returns - `int`: the minimum number of operations required to convert `a` to `b` Input Format There are two lines, each with a string a and b. Constraints - 1 leq |a|, |b| leq 1000 where |s| means \\"the length of string s\\". - All characters are lower case in the range ascii[a-z]. Sample Input 1 ``` kitten sitting ``` Sample Output 1 ``` 3 ``` Explanation 1 Three operations are required to convert `kitten` to `sitting`: 1. Replace \'k\' with \'s\' 2. Insert \'i\' after \'t\' 3. Insert \'g\' at the end Sample Input 2 ``` flaw lawn ``` Sample Output 2 ``` 2 ``` Explanation 2 Two operations are required to convert `flaw` to `lawn`: 1. Insert \'n\' at the end 2. Replace \'f\' with \'l\'","solution":"def minEditDistance(a, b): Returns the minimum number of operations required to convert string a into string b. # Initialize the DP table m, n = len(a), len(b) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the rest of the DP table for i in range(1, m + 1): for j in range(1, n + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j]) + 1 # The answer is in dp[m][n] return dp[m][n]"},{"question":"Harry is trying to organize his bookshelf. He has a series of books with different heights and wants to arrange them such that the heights of books on the shelf alternate between taller and shorter, starting with either taller or shorter. Specifically, given a list of books with their heights, you have to help Harry determine if it is possible to rearrange the books in the required alternating order. If possible, output the rearranged list of book heights. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of books. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000000) — the heights of the books. Output If it is possible to rearrange the books so that their heights alternate between taller and shorter, print \\"Possible\\" on the first line and then print the rearranged list of heights on the second line. If it is not possible, print \\"Impossible\\". If there are multiple valid arrangements, any of them is acceptable. Examples Input 6 1 6 3 6 5 2 Output Possible 1 6 3 5 2 6 Input 5 3 8 5 3 2 Output Impossible Input 4 7 3 10 4 Output Possible 7 3 10 4 Note In the first example, one possible arrangement of book heights is 1 6 3 5 2 6, which alternates between taller and shorter books. In the second example, regardless of how we arrange the books, we cannot make the heights alternate between taller and shorter. In the third example, we can arrange the heights as 7 3 10 4, which starts with a taller book (7) and alternates with shorter (3), taller (10), and shorter (4).","solution":"def can_rearrange_books(n, heights): Determine if it is possible to rearrange books such that their heights alternate between taller and shorter, starting with either taller or shorter. Args: n (int): Number of books. heights (list of int): List of book heights. Returns: tuple: A tuple containing a string \\"Possible\\" or \\"Impossible\\" and a rearranged list of heights if possible. sorted_heights = sorted(heights) mid = n // 2 if n % 2 == 0: left = sorted_heights[:mid] right = sorted_heights[mid:] else: left = sorted_heights[:mid] right = sorted_heights[mid:] rearranged = [] for l, r in zip(left, right): rearranged.append(l) rearranged.append(r) if n % 2 != 0: rearranged += right[len(left):] if all(rearranged[i] < rearranged[i+1] for i in range(0, n-1, 2)) and all(rearranged[i] > rearranged[i+1] for i in range(1, n-1, 2)): return (\\"Possible\\", rearranged) if all(rearranged[i] > rearranged[i+1] for i in range(0, n-1, 2)) and all(rearranged[i] < rearranged[i+1] for i in range(1, n-1, 2)): return (\\"Possible\\", rearranged) return (\\"Impossible\\", []) # Example usage # print(can_rearrange_books(6, [1, 6, 3, 6, 5, 2])) # Output should be Possible with an example valid rearrangement"},{"question":"Write a function that takes an array of integers and an integer k, and rotates the array to the right by k steps. Example: Input: nums[] = {1, 2, 3, 4, 5, 6, 7} k = 3 Output: nums[] = {5, 6, 7, 1, 2, 3, 4} Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotateArray() which takes the array nums[] and its size N along with the integer k as inputs and modifies the array in-place to achieve the rotation. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 0 <= k <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def rotateArray(nums, N, k): Rotates the array nums[] to the right by k steps. Parameters: nums (List[int]): The array of integers to be rotated. N (int): The size of the array. k (int): The number of steps to rotate the array. Returns: None: This function modifies the array in-place. k = k % N # Handle cases where k is greater than N nums[:] = nums[-k:] + nums[:-k]"},{"question":"The Smith Library is conducting a study on the efficiency of their book lending process. They want to ensure that all books borrowed from the library are returned within the stipulated due dates. As part of the study, the library keeps a record of all the books borrowed, the number of days each book is borrowed for, and the due dates. Your task is to calculate the number of books that were returned on time and the number of books that were returned late. -----Input----- The first line of the input contains an integer n (1 le n le 1000), the number of books borrowed. Each of the next n lines contains two integers and one real number separated by spaces: - an integer bd (1 le bd le 365), representing the day of the year when the book was borrowed; - an integer d (1 le d le 30), representing the number of days the book is borrowed for; - a real number r (0.0 le r le 30.0), representing the number of days it took the book to be returned. -----Output----- Output two integers in a single line separated by a space: the number of books returned on time and the number of books returned late. A book is considered to be returned on time if the number of days it took to return is less than or equal to the number of days it was borrowed for plus the day it was borrowed on does not exceed 365. -----Examples----- Sample Input: 5 12 7 6.0 34 10 12.0 125 15 14.5 250 7 8.0 300 20 19.9 Sample Output: 3 2 Explanation: - First book was borrowed on day 12 for 7 days and returned in 6.0 days (on time). - Second book was borrowed on day 34 for 10 days and returned in 12.0 days (late). - Third book was borrowed on day 125 for 15 days and returned in 14.5 days (on time). - Fourth book was borrowed on day 250 for 7 days and returned in 8.0 days (late). - Fifth book was borrowed on day 300 for 20 days and returned in 19.9 days (on time).","solution":"def book_return_status(n, borrowed_data): on_time = 0 late = 0 for data in borrowed_data: bd, d, r = data if r <= d: on_time += 1 else: late += 1 return on_time, late"},{"question":"You are given a weighted directed graph, and your task is to determine the shortest path from a source node to all other nodes in the graph. The graph is represented as an adjacency list where each key-value pair is in the form of `node: [(neighbor, weight), ...]`. The weights are non-negative integers. Write a function that takes in the graph as a dictionary and the source node as input, and outputs a dictionary where the keys are the nodes and the values are the shortest path distances from the source node to that node. Examples: Input: ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'C\', 2), (\'D\', 5)], \'C\': [(\'D\', 1)], \'D\': [] } source = \'A\' ``` Output: ```python {\'A\': 0, \'B\': 1, \'C\': 3, \'D\': 4} ``` In this example, the shortest path from \'A\' to \'B\' is 1, \'A\' to \'C\' is 3 (1+2 from \'A\' to \'B\' to \'C\'), and \'A\' to \'D\' is 4 (1+2+1 from \'A\' to \'B\' to \'C\' to \'D\'). Note: - The graph is connected and has no negative weight edges. - Use Dijkstra’s algorithm to solve this problem. - In Python, you can use libraries like `heapq` to implement the priority queue for Dijkstra\'s algorithm.","solution":"import heapq def dijkstra(graph, source): Returns the shortest path distances from the source to all other nodes in the given weighted directed graph. The graph should be represented as a dictionary where each key is a node, and the corresponding value is a list of tuples (neighbor, weight). # Initialize the shortest path distances with infinity for all nodes except the source distances = {node: float(\'inf\') for node in graph} distances[source] = 0 # Priority queue to hold nodes to be explored, starting with the source node priority_queue = [(0, source)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If the popped node distance is not up-to-date, disregard it if current_distance > distances[current_node]: continue # Explore neighbors of the current node for neighbor, weight in graph.get(current_node, []): distance = current_distance + weight # If a shorter path to the neighbor is found if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"In a town, there are N houses arranged in a straight line. Each house has a certain amount of candies. A group of kids want to collect candies, but they are only interested in houses where the total sum of candies is the maximum possible. Given this condition, find the maximum sum of candies that can be collected from contiguous houses. Input The first line contains the number of houses N (1 ≤ N ≤ 100). The second line contains N integers, each representing the number of candies in a house. Output Print the maximum sum of candies that can be collected from any contiguous subarray of houses. Sample Input 8 -2 1 -3 4 -1 2 1 -5 4 Sample Output 6 Explanation In the given sample, the maximum sum of candies is obtained from the subarray [4, -1, 2, 1], which sums to 6.","solution":"def max_sum_of_candies(n, candies): Returns the maximum sum of candies that can be collected from any contiguous subarray of houses. max_sum = float(\'-inf\') current_sum = 0 for candy in candies: current_sum = max(candy, current_sum + candy) max_sum = max(max_sum, current_sum) return max_sum # Example usage # n = 8 # candies = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(max_sum_of_candies(n, candies)) # Output: 6"},{"question":"# Problem Description Your task is to implement a function that takes in an integer array `nums` and an integer `target`. Your function should return indices of the two numbers such that they sum up to the `target`. Assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. # Example ``` Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. ``` ``` Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6, we return [1, 2]. ``` ``` Input: nums = [3, 3], target = 6 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 6, we return [0, 1]. ``` # Constraints - `2 <= nums.length <= 10^4` - `-10^9 <= nums[i] <= 10^9` - `-10^9 <= target <= 10^9` - Only one valid answer exists. # Notes - The same element in the array may not be used twice. - The returned answers can be in any order. ```python def two_sum(nums: list[int], target: int) -> list[int]: num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i ```","solution":"def two_sum(nums: list[int], target: int) -> list[int]: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to the target. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i"},{"question":"You are given an array of integers and you need to count the number of distinct pairs (i, j) such that i < j and the absolute difference between the elements of the pairs is equal to a given integer k. -----Input----- The input contains two parts: 1. An integer n (1 leq n leq 10^5) representing the number of elements in the array. 2. An array of n integers arr (1 leq arr[i] leq 10^9) and an integer k (1 leq k leq 10^9). -----Output----- Output the number of distinct pairs (i, j) such that i < j and |arr[i] - arr[j]| = k. -----Examples----- Sample Input 1: 4 1 5 3 4 2 Sample Output 1: 2 Sample Input 2: 5 10 20 30 40 50 10 Sample Output 2: 4","solution":"def count_pairs(n, arr, k): Returns the number of distinct pairs (i, j) such that i < j and |arr[i] - arr[j]| = k. Parameters: n (int): The number of elements in the array. arr (list of int): The list of integers. k (int): The given integer difference. Returns: int: The number of distinct pairs (i, j) with the specified properties. count = 0 seen = {} for i in range(n): if arr[i] - k in seen: count += seen[arr[i] - k] if arr[i] + k in seen: count += seen[arr[i] + k] if arr[i] in seen: seen[arr[i]] += 1 else: seen[arr[i]] = 1 return count"},{"question":"In a given list of integers, a subarray is defined as a contiguous section of the list. Write a function to determine the maximum sum of any non-empty subarray. Please note that the elements of the list can be negative as well. Your task is to find this maximum sum. If the list is empty, return 0. INPUT: The first line contains an integer t, the number of test cases. Each test case consists of two lines: - The first line contains an integer n, the number of elements in the list. - The second line contains n space-separated integers representing the list. OUTPUT: For each test case, output the maximum sum of any subarray on a new line. CONSTRAINTS: 1 ≤ t ≤ 100 0 ≤ n ≤ 1000 -10^4 ≤ List elements ≤ 10^4 SAMPLE INPUT 2 5 1 -2 3 10 -4 4 -5 -1 -8 -9 SAMPLE OUTPUT 12 -1 Explanation In the first test case: The subarray [3, 10] has the maximum sum of 13. In the second test case: The subarray [-1] has the maximum sum of -1.","solution":"def max_subarray_sum(arr): if len(arr) == 0: return 0 # Initialize current_max and global_max with first element current_max = global_max = arr[0] # Loop through array starting from the second element for num in arr[1:]: # Update current_max to be the higher between current number and current_max+num current_max = max(num, current_max + num) # Update global_max to be the higher between global_max and current_max global_max = max(global_max, current_max) return global_max def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] if n == 0: results.append(0) else: results.append(max_subarray_sum(arr)) return results"},{"question":"Given an array of integers A of size N, find the frequency of the largest and smallest elements in the array after multiplying each element by a given constant K and adding a constant C. ------ Input Format ------ - First line will contain T, number of testcases. Then the testcases follow. - The first line of each testcase contains three integers, N, K, and C. - The second line of each testcase contains N integers representing the array A. ------ Output Format ------ For each testcase, output two integers - the frequency of the transformed largest element and the frequency of the transformed smallest element, each on a new line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ A[i], K, C ≤ 10^9 - The sum of N over all test cases does not exceed 10^{6} ----- Sample Input 1 ------ 2 5 2 3 1 2 3 4 5 4 1 1 1 2 2 3 ----- Sample Output 1 ------ 1 1 2 1 ----- explanation 1 ------ Test Case 1: After transforming the array, we get [5, 7, 9, 11, 13]. The largest element is 13 and the smallest element is 5. Both occur exactly once. Test Case 2: After transforming the array, we get [2, 3, 3, 4]. The largest element is 4, which occurs once, and the smallest element is 2, which also occurs once.","solution":"def frequency_of_largest_and_smallest(N, K, C, A): Given the size N, constants K and C, and array A, this function returns a tuple with the frequency of the largest and smallest elements after transforming A with the formula (A[i] * K + C). transformed_array = [a * K + C for a in A] max_element = max(transformed_array) min_element = min(transformed_array) max_freq = sum(1 for x in transformed_array if x == max_element) min_freq = sum(1 for x in transformed_array if x == min_element) return max_freq, min_freq def process_test_cases(T, test_cases): results = [] for test_case in test_cases: N, K, C, A = test_case result = frequency_of_largest_and_smallest(N, K, C, A) results.append(result) return results"},{"question":"Peter loves palindromes. He considers a string beautiful if it is a palindrome. A string is called a palindrome if it reads the same forwards and backwards, like \\"radar\\" or \\"level\\". Peter can remove characters from the string to make it a palindrome but cannot rearrange the characters. He wants to know the minimum number of deletions required to convert a given string into a palindrome. Write a program to help Peter determine the minimum number of deletions needed. Input Format: The first line contains an integer T which denotes the number of test cases. Each of the next T lines contains a string s. Output Format: For each test case, print the minimum number of deletions needed to convert the string into a palindrome. Constraints: 1 ≤ T ≤ 10 1 ≤ length of s ≤ 1000 SAMPLE INPUT 4 abca abcba abcdef racecar SAMPLE OUTPUT 1 0 5 0 Explanation: abca => aba (1 deletion: remove \'c\') abcba => abcba (0 deletions: already a palindrome) abcdef => a (5 deletions: remove \'bcdef\') racecar => racecar (0 deletions: already a palindrome)","solution":"def min_deletions_to_palindrome(s): n = len(s) # Create a table to store results of subproblems dp = [[0 for x in range(n)] for y in range(n)] # Fill the table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1 # The value at dp[0][n-1] will be the final answer return dp[0][n - 1] def process_input(T, strings): results = [] for s in strings: results.append(min_deletions_to_palindrome(s)) return results"},{"question":"In a galaxy far, far away, there exists a planet with a unique logistic system for delivering letters from one city to another. The planet consists of several cities connected by bidirectional teleportation links represented as an undirected graph. The cities are denoted by numbers from 1 to N, and the teleportation links are given in pairs (u, v), indicating that there is a direct teleportation link between city u and city v. Due to the planet\'s rigid postal rules, a delivery system called \\"K-hop delivery\\" is in place, where a letter can only be delivered from city u to city v if the shortest path between these cities is exactly K hops (or teleportation links) long. Given the number of cities N, the number of teleportation links M, the list of teleportation links, and an integer K, your task is to determine the number of valid city pairs (u, v) such that there exists a shortest path of exactly K hops between them. Write a program to determine the number of valid (u, v) pairs for K-hop delivery. -----Input Format:----- - The first line of the input contains three integers N, M, and K indicating the number of cities, the number of teleportation links, and the specific number of hops required for delivery, respectively. - The following M lines each contain two integers u and v representing a teleportation link between city u and city v. -----Output Format:----- The output should be a single integer, indicating the number of valid (u, v) pairs such that the shortest path between u and v is exactly K hops. -----Constraints:----- - 1 leq N leq 100 - 0 leq M leq frac{N times (N - 1)}{2} - 1 leq K leq N - 1 -----Sample Input:----- 5 5 2 1 2 1 3 2 4 3 4 4 5 -----Sample Output:----- 4 In the given sample, the valid pairs with exactly 2 hops are: (1, 4), (2, 5), (3, 5), (5, 1).","solution":"def k_hop_delivery(N, M, K, links): from collections import deque # Create the graph graph = {i: [] for i in range(1, N+1)} for u, v in links: graph[u].append(v) graph[v].append(u) def bfs(start): Perform BFS from a start node and returns distances dictionary. distances = {i: float(\'inf\') for i in range(1, N+1)} distances[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances count = 0 # Iterate through each pair for i in range(1, N+1): distances_from_i = bfs(i) for j in range(i+1, N+1): if distances_from_i[j] == K: count += 1 return count"},{"question":"Given an integer array and an integer k, rearrange the array such that the difference between consecutive elements is at most k. If it is not possible, return -1. Note that the numbers are not necessarily in increasing or decreasing order, just that the difference condition must hold. INPUT: - T test cases. - Each test case consists of: - The integer n denoting the size of the array. - The integer k. - An array of n integers. OUTPUT: Output one line per test case. If rearrangement is possible, print the rearranged array. If not, print -1. CONSTRAINTS: 1 < T < 10 1 < n < 1000 0 < k < 10^6 -10^6 < array[i] < 10^6 Example: SAMPLE INPUT 2 5 3 1 3 5 7 9 4 1 8 1 6 5 SAMPLE OUTPUT 1 3 5 7 9 -1","solution":"def rearrange_array(test_cases): results = [] for n, k, arr in test_cases: arr.sort() possible = True for i in range(n - 1): if abs(arr[i + 1] - arr[i]) > k: possible = False break if possible: results.append(arr) else: results.append([-1]) return results def main(T, cases): test_cases = [] for t in range(T): n = cases[t][0] k = cases[t][1] arr = cases[t][2] test_cases.append((n, k, arr)) results = rearrange_array(test_cases) return results"},{"question":"You are given a list of cities and the direct flight routes between them. Each flight connects two cities bidirectionally, i.e., if there is a flight from city A to city B, there is also a flight from city B to city A. Your task is to find the shortest path between two cities. Given the number of cities and the direct flight routes, your program should answer several queries. Each query specifies two cities, and you need to compute and return the minimum number of flights needed to travel from the first city to the second city. If there is no possible route, return -1. Input: The first line contains an integer n (2 ≤ n ≤ 100) representing the number of cities. The second line contains an integer m (0 ≤ m ≤ 1000) representing the number of direct flight routes. Each of the next m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n) indicating that there is a direct flight between cities u and v. The next line contains an integer q (1 ≤ q ≤ 100) representing the number of queries. Each of the next q lines contains two space-separated integers a and b (1 ≤ a, b ≤ n) representing a query for the shortest path between city a and city b. Output: For each query, output the minimum number of flights required to reach from city a to city b. If there is no route between them, output -1. SAMPLE INPUT 5 6 1 2 1 3 2 3 3 4 4 5 2 5 3 1 5 2 4 1 4 SAMPLE OUTPUT 2 2 2","solution":"from collections import deque, defaultdict def find_shortest_path(n, m, flights, queries): # Create the graph as adjacency list graph = defaultdict(list) for u, v in flights: graph[u].append(v) graph[v].append(u) def bfs(start, target): if start == target: return 0 visited = [False] * (n + 1) queue = deque([(start, 0)]) # (current node, depth) visited[start] = True while queue: node, depth = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: if neighbor == target: return depth + 1 visited[neighbor] = True queue.append((neighbor, depth + 1)) return -1 results = [] for a, b in queries: results.append(bfs(a, b)) return results"},{"question":"You are organizing items on a shelf. Each item is represented by a single uppercase English letter. Your task is to group the items while maintaining their order but separate different groups with a unique separator. If there are multiple of the same items consecutively, group them together and separate different groups with a dash (`-`). Write a program that takes a string `s` consisting of uppercase English letters and prints the rearranged string with the groups separated by a dash. Constraints: - The length of `s` is between 1 and 100 inclusive. Input: The input is given from Standard Input in the following format: `s` Output: Print the rearranged string with groups of same consecutive items separated by a dash. Examples Input: AABBBCCDAA Output: AA-BBB-CC-D-AA Input: XYZ Output: X-Y-Z Input: AAABBBAAABB Output: AAA-BBB-AAA-BB","solution":"def group_items(s): Groups consecutive identical items in string s and separates different groups with a dash. Parameters: s (str): Input string consisting of uppercase English letters. Returns: str: Rearranged string with groups of same consecutive items separated by a dash. if not s: return \'\' grouped_string = s[0] for i in range(1, len(s)): if s[i] == s[i-1]: grouped_string += s[i] else: grouped_string += \'-\' + s[i] return grouped_string"},{"question":"A popular approach in functional programming is the use of map and reduce operations. Consider the following problem where you have to apply these concepts to solve it. Given an array of integers, your task is to find the maximum sum of any contiguous subarray of the given array. A subarray is defined as a contiguous part of the array. To solve this problem, you need to use the `reduce` operation provided in most functional languages or libraries. ------Input------ The first line contains a single integer n (1 le n le 10^6) - the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^4 le a_i le 10^4) — the elements of the array. ------Output------ Print a single integer — the maximum sum of any contiguous subarray. ------Examples------ Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 1 2 3 4 5 Output 15 ------Note------ In the first test case: - The subarray with the maximum sum is [4, -1, 2, 1], which has a sum of 6. In the second test case: - The subarray with the maximum sum is the entire array itself: [1, 2, 3, 4, 5] which has a sum of 15.","solution":"from functools import reduce def max_subarray_sum(arr): Function to find the maximum sum of any contiguous subarray using reduce. # Kadane\'s algorithm implemented using reduce def kadane(acc, x): # acc[0] is max_ending_here, acc[1] is max_so_far max_ending_here = max(x, acc[0] + x) max_so_far = max(acc[1], max_ending_here) return (max_ending_here, max_so_far) # Initial values for max_ending_here and max_so_far initial_value = (arr[0], arr[0]) _, max_sum = reduce(kadane, arr[1:], initial_value) return max_sum"},{"question":"Anna is interested in planting a garden and wants to know how many different rectangular garden plots she can create in her backyard. She has divided her backyard into a grid of 1x1 meter squares. Given the dimensions of the grid (height and width), your task is to compute the number of distinct rectangular plots that can be formed. -----Constraints----- - height and width are integers. - 1 ≤ height, width ≤ 50 -----Input----- Input is given from Standard Input in the following format: height width -----Output----- Print the number of different rectangular garden plots that can be created. -----Sample Input----- 2 3 -----Sample Output----- 18","solution":"def count_rectangles(height, width): Returns the number of distinct rectangular garden plots in a grid of given height and width. Arguments: height : int : number of rows in the grid width : int : number of columns in the grid Returns: int : number of distinct rectangular garden plots def combinations(n, k): return n * (n - 1) // 2 num_rectangles = combinations(height + 1, 2) * combinations(width + 1, 2) return num_rectangles"},{"question":"You have been given a two-dimensional grid of size m times n filled with non-negative integers. Each cell in the grid represents the height of the terrain at that point. A cell is considered a \\"peak\\" if it is strictly greater than all of its 4 neighbors (north, south, east, and west). Write a function to count the number of peaks in the grid. -----Input----- The first line of input contains two integers m and n (1 le m, n le 1000) — the number of rows and columns of the grid respectively. The next m lines each contain n integers, describing the height of the terrain in the grid. -----Output----- Return a single integer — the number of peak cells in the grid. -----Examples----- Input 3 3 1 2 1 2 3 2 1 2 1 Output 1 Input 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 1 -----Note----- For the first example, the terrain grid is: left[begin{array}{ccc} 1 & 1 & 2 & 1 2 & 2 & 3 & 2 1 & 1 & 2 & 1 end{array}right] The cell with height `3` at coordinates (2,2) is the only peak cell. For the second example, the terrain grid is: left[begin{array}{cccc} 1 & 2 & 3 & 4 5 & 6 & 7 & 8 9 & 10 & 11 & 12 13 & 14 & 15 & 16 end{array}right] The cell with height `16` at coordinates (4,4) is the only peak cell.","solution":"def count_peaks(grid): m = len(grid) n = len(grid[0]) def is_peak(x, y): current_height = grid[x][y] neighbors = [ (x-1, y), (x+1, y), (x, y-1), (x, y+1) ] for nx, ny in neighbors: if 0 <= nx < m and 0 <= ny < n: if grid[nx][ny] >= current_height: return False return True peak_count = 0 for i in range(m): for j in range(n): if is_peak(i, j): peak_count += 1 return peak_count"},{"question":"Given an array of integers, you need to answer several queries to determine the sum of the maximum elements in all subarrays of a given length. A subarray is a contiguous portion of an array. The maximum element of a subarray is the largest element within that subarray. For each query, you are given a specific length k, and you need to calculate the sum of the maximum elements of all subarrays of that length. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a_1, a_2, …, a_n separated by spaces (1 ≤ a_i ≤ 1000000) — the elements of the array. The third line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. The following q lines describe the queries, each line contains a single integer k (1 ≤ k ≤ n). Output For each query, output a single integer — the sum of the maximum elements of all subarrays of length k. Example Input 5 1 3 2 5 4 3 1 2 3 Output 15 14 12 Explanation For the first query, k = 1, we\'re considering all subarrays of length 1: [1], [3], [2], [5], [4] The maximum elements are 1, 3, 2, 5, and 4, so the sum is 1 + 3 + 2 + 5 + 4 = 15. For the second query, k = 2, we\'re considering all subarrays of length 2: [1, 3], [3, 2], [2, 5], [5, 4] The maximum elements are 3, 3, 5, and 5, so the sum is 3 + 3 + 5 + 5 = 16. For the third query, k = 3, we\'re considering all subarrays of length 3: [1, 3, 2], [3, 2, 5], [2, 5, 4] The maximum elements are 3, 5, and 5, so the sum is 3 + 5 + 5 = 13.","solution":"from collections import deque def sum_of_max_elements(n, arr, queries): def get_max_subarray_sums(k): deq = deque() max_sub_sums = [] # Initialize deque for the first k elements for i in range(k): while deq and arr[deq[-1]] <= arr[i]: deq.pop() deq.append(i) max_sub_sums.append(arr[deq[0]]) # Process the rest of the array for i in range(k, n): # Remove elements not part of this window if deq[0] <= i - k: deq.popleft() # Maintain the deque for max elements while deq and arr[deq[-1]] <= arr[i]: deq.pop() deq.append(i) max_sub_sums.append(arr[deq[0]]) return sum(max_sub_sums) results = [] for k in queries: results.append(get_max_subarray_sums(k)) return results"},{"question":"You are given an array of integers of length N. Your task is to determine whether it is possible to rearrange the array in such a way that for every consecutive pair of elements (a_i, a_{i+1}), the absolute difference |a_i - a_{i+1}| is at most 1. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains the integer N, the length of the array. - The second line contains N integers, the elements of the array. ------ Output Format ------ For each test case, print \\"YES\\" if it is possible to rearrange the array such that the absolute difference between every consecutive pair of elements is at most 1. Otherwise, print \\"NO\\". Each character of the output may be printed in either uppercase or lowercase, i.e., YES, yes, yEs, and yES will all be treated as identical. ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 - The sum of N over all test cases does not exceed 10^5. ------ Sample Input ------ 3 5 3 1 2 2 4 4 1 3 5 7 3 2 3 4 ------ Sample Output ------ YES NO YES ------ Explanation ------ Test case 1: One possible rearrangement is [1, 2, 2, 3, 4], where the absolute difference between any two consecutive elements is at most 1. Test case 2: No rearrangement exists where the absolute difference between every consecutive pair of elements is at most 1. Test case 3: The given array [2, 3, 4] already satisfies the condition.","solution":"def can_rearrange_for_small_diff(arr): Given an array of integers, determines if it can be rearranged such that the absolute difference between every consecutive pair of elements is at most 1. arr.sort() # Sort the array first for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) > 1: return \\"NO\\" return \\"YES\\" def rearrange_test_cases(T, test_cases): Processes multiple test cases to determine if the arrays can be rearranged according to the given constraints. Parameters: - T: Number of test cases - test_cases: List of tuples where each tuple contains the number of elements and the array of integers Returns: - List of results \\"YES\\" or \\"NO\\" for each test case results = [] for N, arr in test_cases: results.append(can_rearrange_for_small_diff(arr)) return results"},{"question":"A lighting company wants to design a new lighting system for streetlights. They have decided to use an innovative technology where each streetlight is equipped with sensors to communicate with its neighboring streetlights. The communication network is designed to form a tree structure, where there is exactly one path between any two streetlights. Your task is to write a program to determine the minimum power level required so that each streetlight can communicate with its parent in the tree. Each streetlight has a unique power level, and the communication power level between two directly-connected streetlights should be the maximum of their individual power levels. Input: The input consists of multiple test cases. The first line of the input contains an integer T (1 <= T <= 500), the number of test cases. Each test case starts with an integer N (1 <= N <= 100000), the number of streetlights, followed by an array of N integers P (1 <= P[i] <= 100000) representing the power levels of the streetlights. The next N-1 lines each contains two integers u and v (1 <= u, v <= N), representing a bidirectional edge between streetlight u and streetlight v. Output: For each test case, print the sum of the minimum communication power levels required for each streetlight to communicate with its parent in the tree. Example: Sample input: 2 5 1 2 3 4 5 1 2 2 3 2 4 4 5 3 10 20 30 1 2 1 3 Sample output: 15 30 Explanation: In the first test case, the minimum power levels required are the maximum of individual power levels between connected streetlights: - Path from 1 to 2: max(1, 2) = 2 - Path from 2 to 3: max(2, 3) = 3 - Path from 2 to 4: max(2, 4) = 4 - Path from 4 to 5: max(4, 5) = 5 Total = 2 + 3 + 4 + 5 = 14 In the second test case: - Path from 1 to 2: max(10, 20) = 20 - Path from 1 to 3: max(10, 30) = 30 Total = 20 + 20 = 40","solution":"def min_communication_power(n, power_levels, edges): Parameters: n (int): Number of street lights power_levels (List[int]): List of power levels of each street light edges (List[Tuple[int, int]]): List of edges representing the tree Returns: int: Minimum total communication power level required import sys sys.setrecursionlimit(200000) from collections import defaultdict def dfs(node, parent): if parent is not None: total_power[0] += max(power_levels[node - 1], power_levels[parent - 1]) for neighbor in graph[node]: if neighbor != parent: dfs(neighbor, node) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) total_power = [0] dfs(1, None) # Tree rooted at node 1 return total_power[0] def solve(test_cases): results = [] for n, power_levels, edges in test_cases: result = min_communication_power(n, power_levels, edges) results.append(result) return results"},{"question":"Create a function `matrix_reshape` that takes two arguments: a 2D list (matrix) `mat`, and a tuple (rows, cols) representing the dimensions of the desired reshaped matrix. The function should reshape the matrix to the desired dimensions if possible and return the new reshaped matrix. If it is not possible to reshape the matrix to the desired dimensions, return the original matrix. # Function Signature ```python def matrix_reshape(mat: List[List[int]], rows: int, cols: int) -> List[List[int]]: pass ``` # Input - `mat`: a 2D list representing the original matrix. - `rows`: an integer representing the number of rows in the desired reshaped matrix. - `cols`: an integer representing the number of columns in the desired reshaped matrix. # Output - A 2D list representing the reshaped matrix. If the reshaping is not possible, return the original matrix. # Example ```python mat = [ [1, 2], [3, 4] ] rows, cols = 1, 4 matrix_reshape(mat, rows, cols) # Output: [[1, 2, 3, 4]] mat = [ [1, 2], [3, 4] ] rows, cols = 3, 2 matrix_reshape(mat, rows, cols) # Output: [ # [1, 2], # [3, 4] # ] ``` # Constraints - Elements of `mat` are integers. - `1 <= len(mat) <= 100` - `1 <= len(mat[0]) <= 100` # Notes - The total number of elements in the original matrix should be the same as in the reshaped matrix. If not, return the original matrix. - This problem requires knowledge of matrix manipulation and validation of conditions.","solution":"def matrix_reshape(mat, rows, cols): Reshape the given matrix to the desired dimensions if possible. Parameters: mat (List[List[int]]): The original matrix. rows (int): The number of rows for the reshaped matrix. cols (int): The number of columns for the reshaped matrix. Returns: List[List[int]]: The reshaped matrix or the original matrix if reshaping is not possible. original_rows = len(mat) original_cols = len(mat[0]) if mat else 0 # Check if reshaping is possible if original_rows * original_cols != rows * cols: return mat # Flatten the input matrix flat = [num for row in mat for num in row] # Generate the reshaped matrix reshaped_matrix = [] for i in range(rows): reshaped_matrix.append(flat[i * cols:(i + 1) * cols]) return reshaped_matrix"},{"question":"Kathy is fascinated by number patterns and is particularly interested in sequences where each number is either 0 or 1. She has devised a game where she starts with a sequence of n numbers, all set initially to 0. She then performs a series of toggle operations, where each toggle operation flips the state of a number from 0 to 1 or from 1 to 0. Kathy has a specific rule for toggling: she only toggles at positions that are powers of 2 (i.e., positions 1, 2, 4, 8, 16, etc.). Given an integer n, which represents the length of the sequence, she wants to know how the sequence looks after every toggle operation on positions that are powers of 2, up to and including the largest power of 2 ≤ n. Your task is to help Kathy by determining the final state of the sequence after all the required toggles. # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the sequence. # Output - Output a single line with n space-separated integers representing the final state of the sequence after toggles at positions that are powers of 2. # Examples Input 8 Output 1 0 0 1 0 0 0 1 Input 5 Output 1 0 0 1 0 # Note For the first example, Kathy toggles the sequence as follows: - At position 1 (2^0): [1, 0, 0, 0, 0, 0, 0, 0] - At position 2 (2^1): [1, 0, 0, 0, 0, 0, 0, 0] - At position 4 (2^2): [1, 0, 0, 1, 0, 0, 0, 0] - At position 8 (2^3): [1, 0, 0, 1, 0, 0, 0, 1] For the second example, Kathy toggles the sequence as follows: - At position 1 (2^0): [1, 0, 0, 0, 0] - At position 2 (2^1): [1, 0, 0, 0, 0] - At position 4 (2^2): [1, 0, 0, 1, 0]","solution":"def toggle_sequence(n): Returns the final state of the sequence after all toggles at positions that are powers of 2. Parameters: n (int): The length of the sequence Returns: List[int]: The final state of the sequence # Initialize the sequence with all zeros sequence = [0] * n # Toggle the positions that are powers of 2 power_of_2 = 1 while power_of_2 <= n: sequence[power_of_2 - 1] = 1 - sequence[power_of_2 - 1] power_of_2 *= 2 return sequence"},{"question":"A secluded island is governed by a peculiar society that believes in balancing energy to maintain peace. Each member of the society possesses a stone, the energy level of which is represented by a positive integer. The society has decided to balance these stones by transferring energy between them according to the following rules. 1. You can transfer energy from one stone to another, but only if the energy transfer leaves both stones with a positive energy level. 2. The energy transferred from stone i to stone j must be a positive integer that is a divisor of both the energy levels of stone i and stone j before the transfer. Given the energy levels of all stones, determine the maximum possible total energy level for the society\'s stones after a series of optimal energy transfers. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - For each test case, the first line contains an integer N, the number of society members. - The second line of each test case contains N space-separated positive integers, E_{1}, E_{2}, ..., E_{N}, representing the energy levels of the stones. ------ Output Format ------ For each test case, output a single integer - the maximum possible total energy level for the stones after any number of optimal energy transfers. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10 1 ≤ E_{i} ≤ 10^5 ------ Sample Input 1 ------ 2 3 6 9 12 2 10 15 ------ Sample Output 1 ------ 21 25 ------ Explanation 1 ------ Test Case 1 One optimal way to transfer energy could involve the following steps: - Transfer 3 units of energy from the stone with 9 units to the stone with 6 units. - Now the energy levels are 9, 6, and 12. - No more transfers can be made that fit the rules. Hence, the maximum possible total energy level for the stones is 9 + 6 + 12 = 27. Test Case 2 One optimal way to transfer energy could involve the following steps: - Transfer 5 units of energy from the stone with 15 units to the stone with 10 units. - Now the energy levels are 10 and 15. Hence, the maximum possible total energy level for the stones is 10 + 15 = 25.","solution":"def gcd(a, b): while b: a, b = b, a % b return a def max_total_energy(T, test_cases): results = [] for i in range(T): N, energies = test_cases[i] total_energy = sum(energies) max_energy = total_energy # Check all pairs for possible optimal energy transfer for j in range(N): for k in range(j + 1, N): energy_gcd = gcd(energies[j], energies[k]) if energy_gcd > 1: transferred_energy = energy_gcd if energies[j] > transferred_energy and energies[k] > transferred_energy: max_energy = max(max_energy, total_energy) results.append(max_energy) return results"},{"question":"In a zoo, there are exactly P enclosures, each housing a different number of animals. Visitors are curious to know the total number of animals they will see if they visit specific enclosures. Write a program that calculates the sum of animals in the specified enclosures for a given list of queries. ------ Input Format ------ - The first line of input will contain two integers P and Q, denoting the number of enclosures and the number of queries, respectively. - The second line contains P integers, each representing the number of animals in each enclosure. - The next Q lines each contain two integers L and R, denoting the range of enclosures the visitors want to include in their query (both inclusive). ------ Output Format ------ For each query, output the sum of animals from the L-th to the R-th enclosure. ------ Constraints ------ 1 ≤ P ≤ 100 1 ≤ Q ≤ 50 1 ≤ L ≤ R ≤ P 1 ≤ Number of animals in each enclosure ≤ 50 ----- Sample Input 1 ------ 5 3 12 15 7 10 23 1 3 2 5 1 5 ----- Sample Output 1 ------ 34 55 67 ----- explanation 1 ------ Query 1: Enclosures 1 to 3 house 12, 15, and 7 animals respectively. Their sum is 34. Query 2: Enclosures 2 to 5 house 15, 7, 10, and 23 animals respectively. Their sum is 55. Query 3: All enclosures from 1 to 5, housing 12, 15, 7, 10, and 23 animals respectively. Their sum is 67.","solution":"def calculate_animal_sums(p, q, enclosures, queries): results = [] for l, r in queries: # Adjust for 1-based indexing by subtracting 1 from both l and r total_animals = sum(enclosures[l-1:r]) results.append(total_animals) return results"},{"question":"**Problem Statement**: Given an integer `N`, you are required to generate the first `N` terms of a series where the `n`th term is the sum of the previous two terms minus the term before them. The series starts with the terms: 3, 4, and 8. The formula to generate the series can be defined as: `T(n) = T(n-1) + T(n-2) - T(n-3)`. **Example 1:** Input: N = 6 Output: 3 4 8 9 13 14 Explanation: For N = 6, series is: 3 4 8 (4+8-3) 9 (8+9-4) 13 (9+13-8) 14 **Example 2:** Input: N = 4 Output: 3 4 8 9 Explanation: For N = 4, series is: 3 4 8 (4+8-3) 9 **Your Task:** You don\'t need to read input or print anything. Your task is to complete the function `generateSeries()` which takes an integer `N` as input and returns the list containing the first `N` terms of the series. **Expected Time Complexity: O(N)** **Expected Auxiliary Space: O(1)** **Constraints:** - 1 <= N <= 50","solution":"def generateSeries(N): Returns the first N terms of the series defined by the recurrence relation: T(n) = T(n-1) + T(n-2) - T(n-3) with starting terms 3, 4, 8. # Base cases if N == 1: return [3] elif N == 2: return [3, 4] elif N == 3: return [3, 4, 8] # Initial terms of the series series = [3, 4, 8] # Generate the series up to the Nth term for i in range(3, N): next_term = series[-1] + series[-2] - series[-3] series.append(next_term) return series"},{"question":"You are given an integer array `A` of size `N`. Your task is to determine whether it is possible to partition the array into two (non-empty) subarrays such that the sum of the elements in both subarrays is equal. If such a partition exists, print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). -----Input----- First line of input contains an integer T, the number of test cases. The next T blocks follow: - First line of each test case contains an integer N, the size of the array. - Second line of each test case contains N integers separated by a space, which represent the array `A`. -----Output----- For each test case, print \\"YES\\" if it is possible to partition the array into two subarrays with equal sum. Otherwise, print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 1000 - 2 ≤ N ≤ 10^5 - 1 ≤ Ai ≤ 10^4 - Sum of N over all test cases does not exceed 10^6. -----Example----- Input 2 4 1 2 3 6 5 1 5 11 5 1 Output YES NO -----Explanation----- Example case 1. - The array [1, 2, 3, 6] can be partitioned into subarrays [1, 2, 3] and [6], both having equal sum = 6. Example case 2. - It is not possible to partition the array [1, 5, 11, 5, 1] into two subarrays with equal sum.","solution":"def can_partition(arr): Determines if array can be partitioned into two subarrays with equal sum. total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" half_sum = total_sum // 2 current_sum = 0 for num in arr: current_sum += num if current_sum == half_sum: return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for case in test_cases: N, arr = case result = can_partition(arr) results.append(result) return results"},{"question":"You are given a string which represents a sequence of bracket (parentheses) expressions. Your task is to determine whether the sequence is valid or not. A valid sequence follows these rules: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type. The string will contain only these characters: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The input string can be of length up to 10^5. # Input: The first line contains an integer T which is the number of test cases. Each of the next T lines contains a single string S. # Output: For each input string S, output a single line containing \\"VALID\\" if the sequence is valid, and \\"INVALID\\" if it is not. # Constraints: - 1 ≤ T ≤ 100 - 1 ≤ length of S ≤ 10^5 # Example Input 3 [] {[()]} ([)] # Example Output VALID VALID INVALID # Explanation: - Case 1: The sequence [] is valid. - Case 2: The sequence {[()]} is valid because each opening bracket has a corresponding and properly ordered closing bracket. - Case 3: The sequence ([)] is invalid because the order of brackets is incorrect.","solution":"def is_valid_sequence(sequence): stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in sequence: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return \\"INVALID\\" else: stack.append(char) return \\"VALID\\" if not stack else \\"INVALID\\" def validate_sequences(T, sequences): results = [] for sequence in sequences: result = is_valid_sequence(sequence) results.append(result) return results"},{"question":"# Task Given an array of integers, find the longest prefix which is a valid palindrome. A palindrome is a sequence that reads the same backward as forward. # Example For `arr = [2, 4, 8, 4, 2, 5, 9]`, the output should be `[2, 4, 8, 4, 2]`. For `arr = [3, 1, 4, 1, 5, 9]`, the output should be `[3]`. For `arr = [1, 2, 2, 1, 3, 3]`, the output should be `[1, 2, 2, 1]`. # Input/Output - `[input]` integer array `arr` - `[output]` an integer array The longest prefix which is a valid palindrome. If multiple solutions exist, return the longest one. If no palindrome prefix exists, return an empty array.","solution":"def longest_palindrome_prefix(arr): Returns the longest prefix of the array which is a valid palindrome. def is_palindrome(sublist): return sublist == sublist[::-1] n = len(arr) for i in range(n, 0, -1): if is_palindrome(arr[:i]): return arr[:i] return []"},{"question":"ByteLand airlines operates flights between multiple cities. Each city is represented by a node, and each direct flight is represented by an edge with a positive weight, indicating the cost of the flight in tugricks. There are n cities, numbered from 1 to n. ByteLand airlines wants to determine the minimum cost required to travel from city 1 to city n. To help ByteLand airlines, you need to write a program that calculates the minimum cost required to reach city n from city 1 using the flights available. If it is impossible to reach city n from city 1, your program should return -1. -----Input----- The first line contains two integers n and m (2 ≤ n ≤ 300, 1 ≤ m ≤ 300^2) — the number of cities and the number of direct flights. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), describing a direct flight from city u to city v with a cost of w. The flights are bidirectional, meaning you can travel from u to v or v to u with the same cost w. -----Output----- Print a single integer — the minimum cost required to travel from city 1 to city n. If it is impossible to reach city n from city 1, print -1. -----Examples----- Input 4 4 1 2 5 2 4 10 1 3 9 3 4 4 Output 13 Input 3 2 1 2 4 2 3 6 Output 10 Input 5 1 1 2 3 Output -1 -----Note----- In the first example, the sequence of flights from city 1 to city 4 with the minimum cost is 1 -> 3 -> 4, costing 9 + 4 = 13 tugricks. In the second example, the sequence of flights from city 1 to city 3 with the minimum cost is 1 -> 2 -> 3, costing 4 + 6 = 10 tugricks. In the third example, there is no valid sequence of flights from city 1 to city 5. Hence, the output is -1.","solution":"import heapq def find_min_cost(n, m, flights): Finds the minimum cost required to travel from city 1 to city n. Returns -1 if it is impossible to reach city n from city 1. adj = {i: [] for i in range(1, n + 1)} for u, v, w in flights: adj[u].append((v, w)) adj[v].append((u, w)) pq = [(0, 1)] # (cost, city) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 while pq: current_cost, u = heapq.heappop(pq) if current_cost > dist[u]: continue for v, weight in adj[u]: cost = current_cost + weight if cost < dist[v]: dist[v] = cost heapq.heappush(pq, (cost, v)) return dist[n] if dist[n] != float(\'inf\') else -1"},{"question":"Write a function that takes a list of integers and returns the length of the longest contiguous subarray where all elements have the same value. For example, given the list `[4, 4, 4, 2, 2, 2, 2, 3, 3]`, the function would return `4` for the subarray `[2, 2, 2, 2]`. # Input: - An array of integers `arr` with length `n` where `1 <= n <= 10^5`. # Output: - An integer indicating the length of the longest contiguous subarray where all elements have the same value. # Example: ```python longest_contiguous_subarray([4, 4, 4, 2, 2, 2, 2, 3, 3]) # Returns 4 longest_contiguous_subarray([1, 1, 1, 1]) # Returns 4 longest_contiguous_subarray([1, 2, 3, 4, 5]) # Returns 1 ``` # Constraints: - The array will contain at least one element. - The integers in the array can be negative.","solution":"def longest_contiguous_subarray(arr): Returns the length of the longest contiguous subarray where all elements have the same value. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length) # Example Usage: # longest_contiguous_subarray([4, 4, 4, 2, 2, 2, 2, 3, 3]) would return 4"},{"question":"Given a positive integer n, you need to determine if the number can be partitioned into contiguous subarrays such that each subarray is strictly increasing or strictly decreasing. A strictly increasing subarray is one where every subsequent element is larger than the previous one, and a strictly decreasing subarray is one where every subsequent element is smaller than the previous one. Your task is to write a function that checks if such a partitioning is possible for the array corresponding to the first n natural numbers (1 through n). Implement the function `is_partitionable(n: int) -> bool` which takes a single integer n as input and returns a boolean value indicating whether the array can be partitioned into strictly increasing or strictly decreasing subarrays. **Input:** - An integer n (1 ≤ n ≤ 10^5) representing the length of the array. **Output:** - Return true if the array can be partitioned into strictly increasing or strictly decreasing subarrays, otherwise return false. **Examples:** Example 1: - Input: 4 - Output: true - Explanation: The array [1, 2, 3, 4] is strictly increasing. Example 2: - Input: 6 - Output: true - Explanation: The array [1, 2, 3, 6, 5, 4] can be partitioned into [1, 2, 3] and [6, 5, 4]. Example 3: - Input: 3 - Output: true - Explanation: The array [3, 2, 1] is strictly decreasing.","solution":"def is_partitionable(n: int) -> bool: Determines if the array of first n natural numbers can be partitioned into strictly increasing or strictly decreasing subarrays. Given the sequence is the first n natural numbers [1, 2, 3, ..., n], it is strictly increasing by default. Hence, it naturally adheres to the condition for n >= 1. Parameters: n (int): Positive integer representing the length of the array. Returns: bool: True if the array can be partitioned into strictly increasing or strictly decreasing subarrays, otherwise False. # As the first n natural numbers are inherently strictly increasing, # the condition is naturally satisfied. return True"},{"question":"Given two strings `s1` and `s2`, we want to find the length of the longest substring that appears in both `s1` and `s2`. A substring is a contiguous sequence of characters within a string. For instance, consider the strings `s1 = \\"ABAB\\"` and `s2 = \\"BABA\\"`. The longest common substring between these two strings is `\\"ABA\\"`, which has a length of 3. -----Input format----- • Line 1: A single string `s1` (1 ≤ |s1| ≤ 1000), the first string. • Line 2: A single string `s2` (1 ≤ |s2| ≤ 1000), the second string. -------Output format----- A single integer — the length of the longest substring that appears in both `s1` and `s2`. -----Example----- -----Sample input----- ABAB BABA -----Sample output----- 3 Note: Ensure that your program does not print anything other than the required output. Any additional print statements should be removed before final submission as they will be considered incorrect.","solution":"def longest_common_substring(s1, s2): Returns the length of the longest substring that appears in both s1 and s2. len1, len2 = len(s1), len(s2) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] max_length = 0 for i in range(1, len1 + 1): for j in range(1, len2 + 1): if s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 max_length = max(max_length, dp[i][j]) else: dp[i][j] = 0 # Explicitly assign 0 for clarity return max_length"},{"question":"Anjali loves rearranging strings. She has a string S that consists of lowercase English letters. She can perform the following operation on the string any number of times (including zero times): - Choose two adjacent characters and swap them if they are out of lexicographical order. Given a string S, Anjali wants to know the lexicographically smallest string she can obtain by performing the operations any number of times. -----Input----- The first line of input contains an integer T - the number of test cases. T test cases follow. For each test case, there is one line containing the string S. -----Output----- For each test case, output a single line with the lexicographically smallest string that can be obtained. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 105 -----Example----- Input: 2 dcba abcd Output: abcd abcd -----Explanation----- Example case 1. One possible way to perform the operations could be as follows. - Swap \'d\' and \'c\', resulting in \\"cdba\\". - Swap \'c\' and \'b\', resulting in \\"bcda\\". - Swap \'b\' and \'a\', resulting in \\"bacd\\". - Swap \'a\' and \'b\', resulting in \\"abdc\\". - Swap \'d\' and \'c\', resulting in \\"abdc\\". - Swap \'c\' and \'b\', resulting in \\"abcd\\".","solution":"def lexicographically_smallest_string(t, test_cases): Returns the lexicographically smallest string for each test case. Args: t (int): number of test cases test_cases (List[str]): list of strings to be processed Returns: List[str]: list of lexicographically smallest strings for each test case results = [] for s in test_cases: results.append(\\"\\".join(sorted(s))) return results"},{"question":"You are given a matrix of integers. An integer target value will also be provided. Your task is to check if the target value exists in the matrix. The matrix has the following properties: - Each row is sorted in non-decreasing order. - Each column is sorted in non-decreasing order. Write a function that returns `True` if the target value is found in the matrix, and `False` otherwise. -----Constraints----- - 1 leq matrix size leq 300 x 300 - -10^9 leq matrix[i][j] leq 10^9 - -10^9 leq target leq 10^9 -----Input----- Input is given from Standard Input in the following format: - The first line contains two integers `n` and `m` - the number of rows and columns of the matrix, respectively. - The next `n` lines each contain `m` integers - the matrix rows. - The last line contains the integer `target`. -----Output----- - Print `True` if the target value is found in the matrix, `False` otherwise. -----Sample Input----- 3 3 1 4 7 2 5 8 3 6 9 5 -----Sample Output----- True -----Sample Input----- 3 3 1 4 7 2 5 8 3 6 9 10 -----Sample Output----- False","solution":"def search_matrix(matrix, target): Returns True if target is found in the matrix, else False. Matrix rows and columns are sorted in non-decreasing order. if not matrix or not matrix[0]: return False n, m = len(matrix), len(matrix[0]) row, col = 0, m - 1 while row < n and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 else: row += 1 return False"},{"question":"Given an integer array nums, return the length of the longest subsequence such that every element in the subsequence is a power of three. Note that powers of three are numbers like 1, 3, 9, 27, etc. Example 1: Input: nums = [1, 3, 9, 18, 27] Output: 4 Explanation: The length of the longest subsequence where elements are powers of three is 4. One possible subsequence is [1, 3, 9, 27]. Example 2: Input: nums = [2, 4, 8, 16] Output: 0 Explanation: There are no powers of three in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestPowerOfThreeSubsequence() which takes integer array nums as input parameter and returns the length of the longest subsequence where every element is a power of three. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 10^9","solution":"def longestPowerOfThreeSubsequence(nums): Returns the length of the longest subsequence where every element is a power of three. def is_power_of_three(n): Determines whether a given number n is a power of three. if n < 1: return False while n % 3 == 0: n //= 3 return n == 1 count = 0 for num in nums: if is_power_of_three(num): count += 1 return count"},{"question":"A large supermarket has decided to implement an automated checkout system using a series of conveyor belts and robotic arms. The system must ensure that the items ordered by customers are collected in the exact sequence they appear on the order list. Each robotic arm can only pick up and move one item at a time. Additionally, each conveyor belt has a fixed length, and it can hold a limited number of items. The system should optimize the number of moves to achieve the correct order with the minimum distance traveled by robotic arms. You are tasked with designing an algorithm to handle this optimization problem. Input The input begins with a single integer n (1 ≤ n ≤ 1000) - the total number of items on the order list. The next line contains n distinct integers representing the unique item IDs in the order as they should be collected. The subsequent line gives the current status of the conveyor belt containing n space-separated distinct integers which indicate the current arrangement of the items on the conveyor belt. Output The output should be a single integer representing the minimum total distance that the robotic arms need to move to correctly collect the items in the desired order. Example Input 5 4 3 1 2 5 1 4 3 2 5 Output 4 Explanation In this example, to match the desired order: - Move item 4 from position 2 to position 1 - Move item 3 from position 3 to position 2 - Item 1 is already in position 3, so no move required. - Move item 2 from position 4 to position 4, no change needed. - Move item 5 remains in position 5, no change needed. The minimum total distance = 1 (from position 2 to 1) + 1 (from position 3 to 2) + 0 + 0 + 0 = 4 Note The problem ensures that the given initial arrangement of items on the conveyor belt always contains all the items specified in the order list, and each item in the order list appears exactly once on the conveyor belt. The distance traveled by the robotic arm is the absolute difference between the initial position and the final position of the item.","solution":"def min_total_distance(n, desired_order, initial_belt): item_position = {item: idx for idx, item in enumerate(initial_belt)} total_distance = 0 for i in range(n): item = desired_order[i] current_position = item_position[item] distance = abs(current_position - i) total_distance += distance # Update the positions of the remaining items for j in range(n): if initial_belt[j] == item: initial_belt[j], initial_belt[i] = initial_belt[i], initial_belt[j] break return total_distance"},{"question":"You are given two arrays `A` and `B`, and an integer `k`. Both arrays consist of `n` non-zero positive integers. You need to determine whether it is possible to make the sum of array A equal to k by possibly increasing elements of both arrays A and B. However, there are some rules: - You can increase an element `A[i]` by any `B[j]`. - Each element `B[j]` can only be used once. - The increase made to `A[i]` should not exceed the value of `B[j]` used. Formally, you want to find a way to perform these operations such that sum(A) equals `k`. Input The first line contains an integer `n` (1 ≤ n ≤ 105), the size of arrays A and B. The second line contains `n` integers denoting the array `A` (1 ≤ A[i] ≤ 104). The third line contains `n` integers denoting the array `B` (1 ≤ B[j] ≤ 104). The fourth line contains an integer `k` (1 ≤ k ≤ 107). Output Print \\"Yes\\" (without quotes) if it\'s possible to make the sum of array `A` equal to `k` by following the given operations, otherwise print \\"No\\" (without quotes). Examples Input 3 1 2 3 2 2 2 10 Output Yes Input 3 1 2 3 2 2 2 15 Output No Input 3 4 2 1 1 2 1 7 Output Yes Note In the first example, you can achieve a sum of 10 by performing the following operations: - Increase A[1] by 2 (using B[3]) - Increase A[2] by 3 (using B[2] and B[1]) The final array will be `[3, 5, 3]` which sums to 11. This is just one of the possibilities; similar combinations can achieve the target. In the second example, the sum of `A` is initially 6, and even with optimal increases, it cannot reach the target of 15. In the third example, you can use the elements of B to reach the exact target: - Increase A[3] by 1 (using B[1]) - Increase A[2] by 2 (using B[2]) - The array A would then become `[4, 4, 2]` which sums to 10.","solution":"def can_sum_to_k(n, A, B, k): current_sum = sum(A) if current_sum == k: return \\"Yes\\" deficit = k - current_sum if deficit < 0: return \\"No\\" B.sort(reverse=True) for value in B: if deficit <= 0: break deficit -= value return \\"Yes\\" if deficit <= 0 else \\"No\\""},{"question":"You are given a string that contains both digits and non-digit characters. Your task is to determine if the digits present in the string form a palindrome when read forward and backward, ignoring any non-digit characters. Input: The input consists of a single line string S where 1 ≤ |S| ≤ 1000. Output: Output \\"YES\\" if the digits form a palindrome, otherwise output \\"NO\\". Example: Input: a1b2c21 Output: YES Input: hello123world Output: NO","solution":"def is_digit_palindrome(S): Returns \\"YES\\" if the digits in the string form a palindrome, otherwise \\"NO\\". digits = \'\'.join(filter(str.isdigit, S)) return \\"YES\\" if digits == digits[::-1] else \\"NO\\""},{"question":"You are given a grid of size N x M, where each cell contains either a 0 or a 1. Your task is to change some of the 0s to 1s such that each row and each column contains at least one 1. However, you want to minimize the number of changes. You are allowed to change any number of 0s in the grid to 1s, but each change counts as one operation. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first line of each test case contains two integers N and M, denoting the number of rows and columns of the grid respectively. - The next N lines each contain M integers, representing the grid. ------ Output Format ------ For each test case, output in a single line the minimum number of changes required to ensure each row and each column contains at least one 1. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 50 - Each cell of the grid is either a 0 or a 1. ------ Sample Input 1 ------ 2 3 3 0 0 0 0 0 0 0 0 0 2 2 1 0 0 0 ------ Sample Output 1 ------ 3 1 ------ Explanation 1 ------ Test Case 1: We can replace the 0s at (1,1), (2,2), and (3,3) to get the desired grid: ``` 1 0 0 0 1 0 0 0 1 ``` This ensures each row and column has at least one 1, with 3 changes. Test Case 2: We can replace the 0 at (2,1) to get: ``` 1 0 1 0 ``` With just 1 change.","solution":"def min_changes_to_ensure_ones(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] grid = test_cases[t][1] rows = [0] * N cols = [0] * M # Mark rows and columns which already have at least one \'1\' for i in range(N): for j in range(M): if grid[i][j] == 1: rows[i] = 1 cols[j] = 1 # Count rows and columns which do NOT have any \'1\' row_changes = rows.count(0) col_changes = cols.count(0) # The number of changes required is the maximum of row_changes or col_changes # Because changing a 0 to 1 can solve both a row\'s and a column\'s problem at the same time results.append(max(row_changes, col_changes)) return results"},{"question":"You are given an `m x n` matrix filled with integers, where each integer represents the elevation at that point. The objective is to find all points that can flow water to both the Pacific and Atlantic oceans. Water can flow from a cell to another one with a lower or equal elevation if it is adjacent (4 directions: up, down, left, right). The Pacific Ocean touches the left and top edges of the matrix, and the Atlantic Ocean touches the right and bottom edges. The water can flow from the borders of the matrix into the oceans. Input The first line contains two integers `m` and `n`, representing the dimensions of the matrix (1 ≤ m, n ≤ 200). The next `m` lines each contain `n` integers, representing the elevation heights (0 ≤ elevation ≤ 1,000,000). Output Print a list of all coordinate pairs in the format (r, c) that can flow water to both the Pacific and Atlantic oceans, sorted first by row and then by column. Constraints The matrix dimensions and the constraints on the elevations ensure that the solution can be executed in a reasonable time frame and processed within the given limits. Example Input 5 5 1 2 2 3 5 3 2 3 4 4 2 4 5 3 1 6 7 1 4 5 5 1 1 2 4 Output (0, 4) (1, 3) (1, 4) (2, 2) (3, 0) (3, 1) (4, 0) Explanation The coordinate (0, 4) is one example of a point that can flow water to both the Pacific and Atlantic Oceans. Water can flow from this point to (1, 4), then to (2, 4), and subsequently to the Atlantic Ocean. It can also flow to (0, 3) and out to the Pacific Ocean.","solution":"def pacific_atlantic(matrix): if not matrix or not matrix[0]: return [] m, n = len(matrix), len(matrix[0]) pacific_reachable = set() atlantic_reachable = set() def dfs(x, y, reachable_set, prev_height): if ((x, y) in reachable_set or x < 0 or x >= m or y < 0 or y >= n or matrix[x][y] < prev_height): return reachable_set.add((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy, reachable_set, matrix[x][y]) for i in range(m): dfs(i, 0, pacific_reachable, matrix[i][0]) dfs(i, n - 1, atlantic_reachable, matrix[i][n - 1]) for j in range(n): dfs(0, j, pacific_reachable, matrix[0][j]) dfs(m - 1, j, atlantic_reachable, matrix[m - 1][j]) result = list(pacific_reachable & atlantic_reachable) result.sort() return result"},{"question":"There is a grid of size n x m, and each cell can contain either a 0 or a 1. You need to determine the minimum number of operations required to change all the cells in the grid to 0. In one operation, you can select any rectangular subgrid and set all the values in that subgrid to 0. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000). Each of the next n lines contains m integers either 0 or 1, representing the grid. Output Output a single integer, the minimum number of operations required to change all cells to 0. Example Input 3 3 1 0 1 1 1 0 0 1 1 Output 3 Note In the example case, the following steps can be performed to turn all cells to 0: 1. Select the subgrid from (1, 1) to (2, 3) and set all values to 0. 2. Select the subgrid from (1, 3) to (1, 3) and set the value to 0. 3. Select the subgrid from (3, 2) to (3, 3) and set the values to 0.","solution":"def min_operations_to_zero_grid(n, m, grid): operations = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: operations += 1 # Set all the cells part of this 1 to 0 for k in range(i, n): for l in range(j, m): if grid[k][l] == 1: grid[k][l] = 0 else: break return operations"},{"question":"You are given a list of n words and a target word. Your task is to transform the target word into one of the words from the list in the minimum number of steps. In each step, you can change exactly one character of the word to any other character. Each intermediate word formed during the transformation must also be a valid word in the list. Return the minimum number of steps required to transform the target word into one of the words from the list. If it is not possible, output -1. -----Input----- The first line contains an integer n (1 le n le 10^4), representing the number of words in the list. The next line contains a string target representing the target word. It consists only of lowercase English letters and has a length between 1 and 10 inclusive. Each of the next n lines contains a string representing a word in the list. All words, including the target, will have the same length. -----Output----- Output a single integer, the minimum number of steps required to transform the target word into one of the words from the list. If it is not possible, output -1. -----Examples----- Sample Input: 5 hit hot dot dog cog lot Sample Output: 2 Explanation: Transformation sequence: \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" (3 steps are needed to include \\"dot\\" as an intermediate word)","solution":"from collections import deque def min_transform_steps(n, target, word_list): word_set = set(word_list) if target in word_set: return 0 queue = deque([(target, 0)]) while queue: current_word, current_steps = queue.popleft() for i in range(len(current_word)): for char in \'abcdefghijklmnopqrstuvwxyz\': if char == current_word[i]: continue new_word = current_word[:i] + char + current_word[i + 1:] if new_word in word_set: if new_word == word_list[-1]: return current_steps + 1 queue.append((new_word, current_steps + 1)) word_set.remove(new_word) return -1"},{"question":"A famous detective is working on solving a string manipulation mystery. He has a string composed of lowercase English letters and needs to convert it to a palindrome. He discovered that he can change any character to any other character in the alphabet but wants to minimize the number of changes to achieve his goal. Your task is to help the detective by determining the minimum number of character changes required to make the given string a palindrome. Input The first line of input contains T, the number of test cases. The first line of each test case contains N, the length of the string, followed by the string S. Output For each test case, output the minimum number of changes required to make the string a palindrome. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 S consists of lowercase English alphabets Example Input: 3 4 abca 3 abc 5 abcde Output: 1 1 2","solution":"def min_changes_to_palindrome(test_cases): Returns a list of minimum changes required to make each string a palindrome. :param test_cases: List of tuples, each containing N and S. results = [] for N, S in test_cases: changes = 0 for i in range(N // 2): # Only need to iterate until the middle of the string if S[i] != S[N - i - 1]: changes += 1 results.append(changes) return results def parse_input(input_str): Parses the input string into test cases. :param input_str: Multi-line string input. :return: List of tuples containing N and S for each test case. lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) S = lines[index + 1] test_cases.append((N, S)) index += 2 return test_cases"},{"question":"You have been given a list of integers. Your task is to rearrange the elements of the list so that every second element of the resulting list is greater than both its previous and next element. If there are multiple answers, return any of them. -----Input----- The input consists of a single line with space-separated integers. The length of the list will be between 1 and 1000, inclusive. Each integer in the list will be between 1 and 1000, inclusive. -----Output----- Print the rearranged list such that every second element is greater than both its previous and next element, or print \\"Not possible\\" if no such rearrangement exists. -----Examples----- Input 1 5 1 1 6 4 Output 1 6 1 5 1 4 Input 1 3 2 Output 1 3 2","solution":"def rearrange_list(nums): Rearrange the elements of the list so that every second element is greater than both its previous and next element. If there are multiple answers, return any of them. nums.sort() n = len(nums) mid = (n + 1) // 2 nums[1::2], nums[::2] = nums[mid:], nums[:mid] return nums # Example usage: # nums = [1, 5, 1, 1, 6, 4] # rearranged = rearrange_list(nums) # print(rearranged) # Output could be: [1, 4, 1, 5, 1, 6]"},{"question":"An ancient sorcerer left behind a mysterious chest locked with a magical code. To unlock the chest, you need to solve a puzzle that involves arranging a sequence of numbers while maintaining specific rules. The chest provides you with a series of numbers and the following instructions: 1. You are given an array of integers, where each element can be positive, negative, or zero. 2. You need to reorder the array such that: a. All negative numbers come before positive numbers. b. The relative order of negative numbers should remain the same as in the original array. c. The relative order of positive numbers should remain the same as in the original array. 3. Zeros should be placed at the end of the array, but their relative order among themselves should stay the same as in the original array. Your task is to implement a function that takes an array of integers and returns a new array that meets the above requirements. -----Input----- The input consists of two lines: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains `n` integers separated by spaces, representing the elements of the array. -----Output----- Output a single line containing the reordered array, where: - All negative numbers are placed before positive numbers. - The relative order of all negative and positive numbers should be preserved. - All zeros should be placed at the end of the array while maintaining their relative order. -----Example----- Input 10 0 -3 5 -1 0 7 -2 8 0 -4 Output -3 -1 -2 -4 5 7 8 0 0 0 Input 7 7 0 -5 8 -1 0 2 Output -5 -1 7 8 2 0 0 -----Note----- In the first example, we have the following sequence: - Negative numbers: -3, -1, -2, -4 (Preserving their order in the input) - Positive numbers: 5, 7, 8 (Preserving their order in the input) - Zeros: 0, 0, 0 (Placed at the end, preserving their order in the input) In the second example, we have: - Negative numbers: -5, -1 (Preserving their order in the input) - Positive numbers: 7, 8, 2 (Preserving their order in the input) - Zeros: 0, 0 (Placed at the end, preserving their order in the input)","solution":"def reorder_array(arr): Reorders the array such that all negative numbers come before positive numbers, while maintaining their relative order. All zeros are placed at the end. negative = [] positive = [] zeros = [] for num in arr: if num < 0: negative.append(num) elif num > 0: positive.append(num) else: zeros.append(num) return negative + positive + zeros # Example usage n = 10 arr = [0, -3, 5, -1, 0, 7, -2, 8, 0, -4] print(reorder_array(arr)) # Output: [-3, -1, -2, -4, 5, 7, 8, 0, 0, 0]"},{"question":"In this problem, you are asked to transform a given string into an \\"alternating\\" string. A string is considered alternating if no two adjacent characters are the same. Each test case will consist of a string containing lowercase English letters. Your task is to determine the minimum number of deletions required to make the string alternating. You cannot add characters to the string; you can only delete them. # Input The first line of the input contains an integer t (1 ≤ t ≤ 1000), the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100, where |s| represents the length of the string). # Output For each test case, print a single line containing the minimum number of deletions required for the string to become alternating. # Sample Input: 4 aab aabb ab ccccc Output: 1 2 0 4 # Explanation of Sample: - In the first test case, removing one of the \'a\'s will make the string alternating (\\"ab\\"). - In the second test case, removing two characters (\'a\' and \'b\') from alternately will make the string alternating (\\"ab\\"). - In the third test case, the string is already alternating, so zero deletions are required. - In the fourth test case, you must delete four of the \'c\'s to make the string alternating (leaving just one \'c\').","solution":"def min_deletions_to_alternating(s): Returns the minimum number of deletions required to make the string s alternating. deletions = 0 for i in range(1, len(s)): if s[i] == s[i-1]: deletions += 1 return deletions def solve(test_cases): results = [] for s in test_cases: results.append(min_deletions_to_alternating(s)) return results"},{"question":"Read problems statements in Mandarin Chinese and Russian as well. Linda loves collecting special coins. She has recently gotten a collection of N different coins, each with a distinct value. Linda wants to select some of these coins so that the total value of the selected coins is maximized and does not exceed a given amount V. However, there is a restriction: she can only use at most K coins from her collection. The task is to help Linda determine the maximum possible value she can achieve by selecting up to K coins without the total value exceeding V. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three integers N, V, and K, where N is the number of different coins, V is the maximum allowed total value, and K is the maximum number of coins Linda can use. The second line of each test case contains N integers, where the i-th integer represents the value of the i-th coin. ------ Output ------ For each test case, output a single integer representing the maximum total value that Linda can achieve while selecting up to K coins without exceeding the total value V. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ V ≤ 1000 1 ≤ K ≤ N 1 ≤ value of each coin ≤ 100 ------ Sample Input 1 ------ 2 5 10 3 1 2 3 4 5 4 7 2 4 3 5 6 ------ Sample Output 1 ------ 10 7 ------ Explanation 0 ------ In the first test case, Linda can select the coins with values 2, 3, and 5 to get a total value of 10 without exceeding the limit V = 10 using exactly 3 coins. In the second test case, Linda can select the coins with values 3 and 4 to get a total value of 7 without exceeding the limit V = 7 using exactly 2 coins.","solution":"def maximum_possible_value(test_cases): For each test case, return the maximum total value that can be achieved while selecting up to K coins without exceeding the total value V. results = [] for case in test_cases: N, V, K, coins = case coins.sort(reverse=True) def knapsack(k, v, c): if k == 0 or v == 0 or not c: return 0 if c[0] > v: return knapsack(k, v, c[1:]) else: return max(knapsack(k, v, c[1:]), c[0] + knapsack(k-1, v-c[0], c[1:])) results.append(knapsack(K, V, coins)) return results # Helper function to parse inputs accordingly def parse_input(input_str): lines = input_str.split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, V, K = map(int, lines[index].split()) coins = list(map(int, lines[index + 1].split())) test_cases.append((N, V, K, coins)) index += 2 return test_cases # Integrate solution function to work with expected input/output format def main(input_str): test_cases = parse_input(input_str) results = maximum_possible_value(test_cases) return \'n\'.join(map(str, results)) # Example usage: input_str = \\"2n5 10 3n1 2 3 4 5n4 7 2n4 3 5 6n\\" print(main(input_str))"},{"question":"A linked list is given where each node contains a positive integer. The task is to convert this linked list into a balanced Binary Search Tree (BST). If there are multiple ways to do this, any one of them is acceptable. Example 1: Input: LinkedList: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 Output: Balanced BST 4 / 2 6 / / 1 3 5 7 Explanation: The balanced BST formed by this linked list is one of the possible solutions. Example 2: Input: LinkedList: 1 -> 3 -> 6 -> 9 Output: Balanced BST 6 / 3 9 / 1 Explanation: The balanced BST formed by this linked list is one of the possible solutions. Your Task: You don\'t need to take any input. Just complete the function sortedListToBST() that takes the head of the linked list as parameter. The function should return the root of the BST formed. The BST will then be validated by the driver code. Expected Time Complexity: O(n) Expected Auxiliary Space: O(logN), N = number of nodes Constraints: 1 <= Number of nodes <= 10^5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sortedListToBST(head): Converts a sorted linked list to a balanced binary search tree. :param head: ListNode, the head of the linked list :return: TreeNode, the root of the balanced BST # Helper function to get the middle element of the linked list def findMiddle(start, end): slow = start fast = start while fast != end and fast.next != end: slow = slow.next fast = fast.next.next return slow # Helper function to recursively build BST def convertListToBST(start, end): if start == end: return None mid = findMiddle(start, end) node = TreeNode(mid.val) node.left = convertListToBST(start, mid) node.right = convertListToBST(mid.next, end) return node return convertListToBST(head, None)"},{"question":"A software company has a team of coders working on a new project. Each coder is assigned a set of tasks, and each task has a certain complexity level. The project manager wants to ensure that the workload is evenly distributed among the coders. To achieve this, the project manager decides to reassign tasks to minimize the maximum workload of any single coder, where the workload is defined as the sum of task complexities assigned to the coder. Given the number of coders and tasks with their corresponding complexities, determine the minimum possible value of the maximum workload after reassigning the tasks optimally. -----Input----- The first line of input contains two integers n and m, where n (1 le n le 1000) is the number of coders and m (1 le m le 1000) is the number of tasks. The second line contains m integers where the i^{text{th}} integer represents the complexity of the i^{text{th}} task. The complexity of each task is a positive integer not exceeding 10^6. -----Output----- Output a single integer which is the minimum possible value of the maximum workload after optimally reassigning the tasks. -----Examples----- Sample Input: 3 4 10 20 30 40 Sample Output: 40 Sample Input: 2 5 2 2 2 2 2 Sample Output: 6","solution":"def min_max_workload(n, m, complexities): def can_distribute(max_workload): coders_used = 1 current_workload = 0 for complexity in complexities: if current_workload + complexity <= max_workload: current_workload += complexity else: coders_used += 1 current_workload = complexity if coders_used > n: return False return True left, right = max(complexities), sum(complexities) while left < right: mid = (left + right) // 2 if can_distribute(mid): right = mid else: left = mid + 1 return left # Example usage: # print(min_max_workload(3, 4, [10, 20, 30, 40])) # Expected output: 40 # print(min_max_workload(2, 5, [2, 2, 2, 2, 2])) # Expected output: 6"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid can either contain a \'1\' or a \'0\'. A \\"rectangle\\" is defined as any sub-grid that aligns with the grid\'s rows and columns and encompasses contiguous cells (for example, a 2x3 sub-grid). Your task is to find the size of the largest rectangle where all the cells within it contain only \'1\'s. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 300) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m characters, each character being either \'0\' or \'1\', representing the grid. Output Print a single integer — the area of the largest rectangle containing only \'1\'s. Examples Input 4 5 10100 10111 11111 10010 Output 6 Input 3 3 111 111 011 Output 6 Note In the first sample, the largest rectangle is a 2x3 area of \'1\'s. In the second sample, the largest rectangle is also a 2x3 area of \'1\'s, even though there is a row of zeroes disrupting it in one row. Use this problem to practice calculating maximum sub-matrices in 2D arrays efficiently.","solution":"def max_rectangle_area(grid): n = len(grid) m = len(grid[0]) # Create histogram representation of matrix heights = [0] * m max_area = 0 def largest_histogram_area(heights): # Using a stack to compute the maximum rectangular area in O(m) stack = [] max_area = 0 heights.append(0) # Adding a zero to ensure the stack gets emptied at the end for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area for row in grid: for j in range(m): if row[j] == \'1\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largest_histogram_area(heights)) return max_area"},{"question":"A competitive programmer named Sam likes solving puzzles that involve combinations of numbers. He recently encountered this interesting problem: Given a list of integers, count the number of distinct pairs (i, j) such that: 1. 0 ≤ i < j < N 2. The sum of integers at indices i and j is even. Sam is eager to solve this puzzle efficiently and asks for your help to write a program to compute the number of such pairs. Input The first line contains an integer N (1 ≤ N ≤ 100,000), the number of integers in the list. The second line contains N space-separated integers, a1, a2, ..., aN (1 ≤ ai ≤ 10^9), the numbers in the list. Output Print a single integer — the number of distinct pairs (i, j) where the sum of ai and aj is even. Examples Input 5 2 3 4 5 6 Output 4 Input 3 1 1 1 Output 3 Note In the first example, the pairs (0, 2), (0, 4), (2, 4), and (1, 3) result in even sums: 2 + 4, 2 + 6, 4 + 6, and 3 + 5 respectively. In the second example, the pairs (0, 1), (0, 2), and (1, 2) all sum to even numbers. Remember: - The sum of two even numbers is even. - The sum of two odd numbers is even.","solution":"def count_even_sum_pairs(n, numbers): Returns the number of distinct pairs (i, j) such that the sum of numbers at indices i and j is even. :param n: int, number of integers in the list :param numbers: list of int, the integers in the list :return: int, the number of pairs with even sum even_count = 0 odd_count = 0 for number in numbers: if number % 2 == 0: even_count += 1 else: odd_count += 1 # The number of ways to choose 2 out of even_count even_pairs = even_count * (even_count - 1) // 2 # The number of ways to choose 2 out of odd_count odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs"},{"question":"Mia has been working on a new secret code to send messages securely. She has devised a special encryption technique that involves reversing parts of her message in a specific pattern. The message is represented by a string of length n. She breaks the string into k contiguous substrings of equal length and reverses each substring. If the length of the string n is not divisible by k, the last substring will be shorter than the others and will not be reversed. Your task is to write a function `encryptMessage` that takes the message string and the integer k, and returns the final encrypted string after applying Mia\'s encryption technique. Function signature: ```python def encryptMessage(message: str, k: int) -> str: pass ``` # Input format - A string of length 1 leq n leq 1000 - An integer 1 leq k leq n # Output format - A single string representing the encrypted message # Example ```python print(encryptMessage(\\"abcdefghij\\", 3)) # Output: \\"cbafedihgj\\" ``` # Explanation - The string `abcdefghij` is broken into 3 substrings: \\"abc\\", \\"def\\", and \\"ghi\\". The last part \\"j\\" will not be reversed since it is shorter than k. - Reversing each of the first 3 substrings results in \\"cba\\", \\"fed\\", \\"ihg\\". - Concatenating these parts together with the last part gives the final result: \\"cbafedihgj\\".","solution":"def encryptMessage(message: str, k: int) -> str: n = len(message) encrypted_message = [] for i in range(0, n, k): part = message[i:i+k] if len(part) == k: encrypted_message.append(part[::-1]) # Reverse the part if its length is k else: encrypted_message.append(part) # Append the part as is if shorter than k return \\"\\".join(encrypted_message)"},{"question":"You are given a list of integers A of length N. You are also given Q queries. Each query provides two indices L and R (1-based index) and asks you to return the most frequent element in the subarray A[L...R]. If there is a tie, return the smallest element among the most frequent ones. Help find the answers for all queries. Input First line contains two integers N (size of the array) and Q (number of queries). Next line contains N space-separated integers representing the array A. Next Q lines contain two integers L and R. Output For each query, output the most frequent element in the subarray A[L...R]. If there is a tie, output the smallest element among the most frequent ones. Constraints 1 ≤ N, Q ≤ 5*10^4 1 ≤ A[i] ≤ 10^6 1 ≤ L ≤ R ≤ N SAMPLE INPUT 6 2 1 2 2 3 3 3 2 5 1 6 SAMPLE OUTPUT 2 3 Explanation For the first query, the subarray from 2 to 5 is [2, 2, 3, 3]. Both 2 and 3 appear twice. Since there is a tie, the smaller element (2) is chosen. For the second query, the subarray from 1 to 6 is [1, 2, 2, 3, 3, 3]. The most frequent element is 3, which appears three times.","solution":"def most_frequent_element_in_subarray(A, queries): from collections import Counter results = [] for L, R in queries: subarray = A[L-1:R] # Extract subarray based on 1-based indices counter = Counter(subarray) max_freq = max(counter.values()) most_frequent_elements = [num for num, freq in counter.items() if freq == max_freq] results.append(min(most_frequent_elements)) return results"},{"question":"In a coding workshop, the instructor planned a challenge for the participants. There are `n` workshops numbered from 1 to `n`, each with a certain number of available slots. Participants need to sign up for the workshops such that no more than the available slots are utilized. Each participant is assigned a unique id and is only allowed to sign up for one workshop. Write a program that handles the sign-up process. Initially, the available slots for each workshop are given. After that, multiple sign-up requests are processed. Each request contains a participant id and desired workshop number. If a sign-up request can be fulfilled (i.e., the workshop still has available slots), the id is registered for the workshop and the available slots for that workshop are decremented. If there are no available slots left in the workshop when a request comes in, that request is denied. Your task is to determine the sequence of outcomes for all the sign-up requests. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of workshops. - The second line contains `n` integers separated by spaces, representing the initially available slots for each workshop. - The third line contains an integer `m` (1 ≤ m ≤ 200000) — the number of sign-up requests. - The next `m` lines contain two integers each, representing a participant id and the desired workshop number respectively. # Output - Output `m` lines, each containing `ACCEPTED` if the participant successfully signed up for a workshop, or `REJECTED` if the sign-up request could not be fulfilled due to no available slots. # Example Input ``` 3 2 1 3 5 1 1 2 2 3 1 4 2 5 3 ``` Output ``` ACCEPTED ACCEPTED ACCEPTED REJECTED ACCEPTED ``` # Explanation Initially, workshop 1 has 2 slots, workshop 2 has 1 slot, and workshop 3 has 3 slots. - Participant 1 signs up for workshop 1, which has available slots, so the result is `ACCEPTED` and workshop 1 has 1 slot left. - Participant 2 signs up for workshop 2, which has available slots, so the result is `ACCEPTED` and workshop 2 has 0 slots left. - Participant 3 signs up for workshop 1, which has available slots, so the result is `ACCEPTED` and workshop 1 has 0 slots left. - Participant 4 attempts to sign up for workshop 2, which has no available slots, so the result is `REJECTED`. - Participant 5 signs up for workshop 3, which has available slots, so the result is `ACCEPTED` and workshop 3 has 2 slots left.","solution":"def sign_up_for_workshops(n, slots, m, sign_ups): results = [] for pid, workshop in sign_ups: if slots[workshop - 1] > 0: results.append(\'ACCEPTED\') slots[workshop - 1] -= 1 else: results.append(\'REJECTED\') return results"},{"question":"Leo is challenged to solve a game involving binary strings. He needs to transform a given binary string into a string containing all 1\'s by performing a certain operation multiple times. The operation consists of picking a contiguous subsequence in the binary string and flipping all the bits in that subsequence (changing 0 to 1 and 1 to 0). Leo wants to know the minimum number of operations needed to achieve this. Input An integer \'Q\' on the first line denoting the number of test cases. For each of the \'Q\' test cases, there is one line that contains a binary string consisting of characters \'0\' and \'1\'. Output For each of the \'Q\' test cases, display in a new line the minimum number of operations required to transform the binary string into a string containing all \'1\'s. Constraints 1 <= Length of binary string <= 1000 1 <= Q <= 100 Example Input: 2 0101 1111 Output: 3 0 Explanation In the first test case, Leo can: - Flip the first character, transforming \\"0101\\" to \\"1101\\". - Flip the third character, transforming \\"1101\\" to \\"1111\\". Since we have transformed the binary string into one containing all \'1\'s using 3 operations, the output is 3. In the second test case, the binary string is already all \'1\'s, so no operation is needed, and the output is 0.","solution":"def min_operations_to_all_ones(Q, test_cases): Given Q test cases with binary strings, returns the minimum number of operations needed for each string to transform it into a string containing all \'1\'s. results = [] for binary_string in test_cases: operation_count = 0 previous_char = \'1\' for char in binary_string: if char == \'0\' and previous_char == \'1\': operation_count += 1 previous_char = char results.append(operation_count) return results"},{"question":"Given a string S of length N consisting of lowercase English alphabets, find the characters that appear more than once in the string and their respective frequencies. Return the result as a list of tuples sorted in lexicographical order where each tuple contains the character and its frequency. If no such character is found, return an empty list. Example 1: Input: N = 10 S = \\"programming\\" Output: [(\'g\', 2), (\'m\', 2), (\'r\', 2)] Example 2: Input: N = 5 S = \\"abcde\\" Output: [] Explanation: All characters appear only once. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findRepeatingChars() which takes the string S and its size N as input parameters and returns a list of tuples as described. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5","solution":"def findRepeatingChars(S, N): Returns a list of tuples where each tuple contains a character and its frequency, for characters that appear more than once in the string S. from collections import defaultdict char_count = defaultdict(int) # Count occurrence of each character for char in S: char_count[char] += 1 # Filter characters that appear more than once and sort them repeating_chars = [(char, count) for char, count in char_count.items() if count > 1] repeating_chars.sort() return repeating_chars"},{"question":"Given two strings s1 and s2, check if s2 contains a permutation of s1. In other words, one of the first string\'s permutations is the substring of the second string. Examples: s1 = \\"ab\\", s2 = \\"eidbaooo\\" => true s1 = \\"ab\\", s2 = \\"eidboaoo\\" => false Note: - The input strings only contain lower-case letters. - The length of both given strings is in range [1, 10,000].","solution":"from collections import Counter def check_inclusion(s1, s2): Returns True if any permutation of s1 is a substring of s2, otherwise False. len_s1 = len(s1) len_s2 = len(s2) if len_s1 > len_s2: return False s1_counter = Counter(s1) window_counter = Counter(s2[:len_s1]) if s1_counter == window_counter: return True for i in range(len_s1, len_s2): window_counter[s2[i]] += 1 window_counter[s2[i - len_s1]] -= 1 if window_counter[s2[i - len_s1]] == 0: del window_counter[s2[i - len_s1]] if s1_counter == window_counter: return True return False"},{"question":"You are given a rectangular grid representing a city where each cell can either be a building or an empty lot. The buildings are represented by \'1\'s and the empty lots are represented by \'0\'s. Your task is to place the minimum number of security guards such that every building in the city is protected. A security guard can protect all buildings in the same row and all buildings in the same column. Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid, respectively. - The next n lines each contain m characters (\'0\' or \'1\') representing the city grid. Output: - Print a single integer representing the minimum number of security guards needed to ensure every building in the city is protected. Example Input: 4 4 0100 0110 0000 1001 Output: 3 Explanation: One way to place the guards is: - Place the first guard in the first row. This will protect the buildings in the first row. - Place the second guard in the third column. This will protect the buildings in the second row. - Place the third guard in the last row, which will protect the building in the second column. Thus, the minimum number of guards needed is 3.","solution":"def min_guards(n, m, grid): Returns the minimum number of security guards needed to protect all buildings in the city. rows_with_buildings = set() cols_with_buildings = set() for i in range(n): for j in range(m): if grid[i][j] == \'1\': rows_with_buildings.add(i) cols_with_buildings.add(j) return min(len(rows_with_buildings), len(cols_with_buildings))"},{"question":"--- # Introduction A reputable bakery offers a variety of baked goods, each with a specific price. Customers buy combinations of these goods, and the owner wants to know the total sales from each combination of items sold. Your job is to write a function that calculates the total sales for a given list of items purchased by a customer. # Task Given a list of items purchased by a customer and a price list for these items, calculate the total sales for the customer\'s purchase. Each item in the list of items purchased has a corresponding price in the price list. # Input - **items**: A list of strings representing the names of items purchased by a customer. Each string corresponds to the name of an item in the price list. - **prices**: A dictionary with item names as keys and their corresponding prices as values. # Output - Return the total sales as a float. # Example ```python items = [\\"bread\\", \\"milk\\", \\"butter\\"] prices = { \\"bread\\": 1.50, \\"milk\\": 0.99, \\"butter\\": 2.49 } total_sales(items, prices) # Output: 4.98 items = [\\"bread\\", \\"bread\\", \\"milk\\"] prices = { \\"bread\\": 1.50, \\"milk\\": 0.99, \\"butter\\": 2.49 } total_sales(items, prices) # Output: 3.99 ``` # Constraints - Each item in the items list will appear in the prices dictionary. - The prices will be given as floats and will be non-negative values.","solution":"def total_sales(items, prices): Calculates the total sales for the list of items purchased by a customer based on the provided price list. :param items: List of item names purchased by the customer. :param prices: Dictionary with item names as keys and their corresponding prices as values. :return: Total sales as a float. total = 0.0 for item in items: total += prices.get(item, 0.0) return total"},{"question":"Task: Asterisk Patterns Write a function `asterisk_patterns(n)` that takes an integer `n` as input and returns a list of strings that represents the following asterisk patterns based on the value of `n`. # Rules: 1. If `n` is an even number or less than 1, return an empty list. 2. If `n` is an odd number and greater than or equal to 1, generate the following patterns: - Pattern A: The first pattern should be a right-angled triangle with a base and height of `n`. - Pattern B: The second pattern should be an inverted right-angled triangle with a base and height of `n`. The function should return a list where the first element is a string representing Pattern A, and the second element is a string representing Pattern B. # Example: For `n = 5`, the output should be: ``` [ \\"* * * * * * * * * * * * * * *\\", \\"* * * * * * * * * * * * * * *\\" ] ``` # Constraints: - You can assume that `n` will be a non-negative integer. # Function Signature: ```python def asterisk_patterns(n: int) -> List[str]: ``` # Notes: - Each asterisk (`*`) should be followed by a space for visual clarity. - The strings should not have a trailing space at the end of the line.","solution":"def asterisk_patterns(n): Generates a list of strings representing the asterisk patterns based on the value of n. Params: n (int): The number of lines for the patterns. Returns: list: A list containing two patterns as strings. if n < 1 or n % 2 == 0: return [] pattern_a = [] pattern_b = [] for i in range(1, n+1): pattern_a.append(\'* \' * i) for i in range(n, 0, -1): pattern_b.append(\'* \' * i) return [\'n\'.join(line.rstrip() for line in pattern_a), \'n\'.join(line.rstrip() for line in pattern_b)]"},{"question":"Write a program that takes a list of integers and a list of operations to apply on that list. Each operation specifies a sublist and requests to sort it in either ascending or descending order. Constraints * 1 leq n leq 1,000 * -1,000,000,000 leq a_i leq 1,000,000,000 * 1 leq q leq 1,000 * 0 leq l_i < r_i leq n * 0 leq t_i leq 1 (0 means ascending order, 1 means descending order) Input The input format is as follows: n a_0 ; a_1 ; ... ; a_{n-1} q l_1 ; r_1 ; t_1 l_2 ; r_2 ; t_2 : l_q ; r_q ; t_q The first line contains n, the number of elements in the list A. The second line contains n integers representing the elements of A. The third line contains q, the number of operations to perform. Each of the next q lines contains three integers l_i, r_i, and t_i, representing the start index, end index, and sort type of the operation, respectively. Output Print the list of integers after performing all the operations, with each element separated by a space and a newline at the end. Example Input 10 5 2 9 1 5 6 7 3 8 0 2 2 5 1 4 9 0 Output 5 2 9 7 6 1 5 3 8 0","solution":"def sort_sublist(n, a, q, operations): for l, r, t in operations: sublist = a[l:r] sublist.sort(reverse=bool(t)) a[l:r] = sublist return a"},{"question":"James is learning about prime numbers and sequences. He loves to create a sequence of prime numbers starting from the smallest prime number and continues until he reaches a certain limit. He creates a new sequence for every limit value he encounters. Given a limit, determine the length of the sequence containing all the prime numbers less than or equal to that limit. James is curious about how the count of prime numbers changes with different limits. Write a function `prime_sequence_count` that takes an integer n and returns the number of prime numbers that are less than or equal to n. Input Format The first line contains an integer T, the number of test cases. The next T lines each contain an integer n. Output Format Output T lines, each containing the length of the sequence of prime numbers up to the given limit for the corresponding query. Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 10^6 Sample Input 5 10 20 30 40 50 Sample Output 4 8 10 12 15 Explanation For the first case, the prime numbers less than or equal to 10 are {2, 3, 5, 7}, so the length of the sequence is 4. For the second case, the prime numbers less than or equal to 20 are {2, 3, 5, 7, 11, 13, 17, 19}, so the length of the sequence is 8.","solution":"def prime_sequence_count(n): Returns the number of prime numbers that are less than or equal to n. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return sum(sieve) def process_queries(t, queries): results = [] for n in queries: results.append(prime_sequence_count(n)) return results"},{"question":"You\'ve been hired to build an inventory management system for a warehouse. One of the features needed is the ability to quickly identify which items must be reordered. The warehouse system tracks the stock levels of various items, but only reorders items when stock levels fall below a specified reorder threshold. The challenge is to write a function that will analyze the current stock levels and reorder thresholds and return a list of item IDs that need to be reordered. -----Input----- The input consists of two lines: 1. The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of different items in the warehouse. 2. The second line contains a list of `n` tuples, where each tuple has three values: - `id` (a positive integer representing the item ID), - `stock` (a non-negative integer representing the current stock level of the item), - `threshold` (a positive integer representing the reorder threshold for the item). -----Output----- Print a list of item IDs that need to be reordered, sorted in ascending order by their IDs. If no items need to be reordered, print an empty list. -----Examples----- Input 5 [(101, 50, 30), (102, 20, 20), (103, 5, 10), (104, 0, 5), (105, 100, 50)] Output [101, 104] Input 3 [(201, 10, 15), (202, 9, 8), (203, 7, 7)] Output [202] Input 4 [(301, 100, 150), (302, 80, 80), (303, 45, 50), (304, 30, 30)] Output []","solution":"def items_to_reorder(n, items): Returns a list of item IDs that need to be reordered based on their current stock levels and reorder thresholds. Parameters: n (int): The number of different items in the warehouse. items (list of tuples): A list of tuples where each tuple contains three elements - `id` (int), `stock` (int), and `threshold` (int). Returns: list: A list of item IDs that need to be reordered, sorted in ascending order. reorder_list = [] for item in items: id, stock, threshold = item if stock < threshold: reorder_list.append(id) return sorted(reorder_list)"},{"question":"Write a function that takes a string representing the state of a Tic-Tac-Toe game and determines the winner or if the game ended in a draw. The game is played on a 3x3 grid, and the input will be a string of 9 characters where \'X\' represents player X, \'O\' represents player O, and \'.\' represents an empty cell. A player wins if they have three of their symbols in a row, column, or diagonal. If no player has won and there are no empty cells, the game is a draw. Input The input is a single string of length 9 consisting of the characters \'X\', \'O\', and \'.\'. The string will represent the game state row by row from top to bottom. Output Print \\"X\\" if player X has won, \\"O\\" if player O has won, and \\"Draw\\" if the game ended in a draw. If the game is still ongoing (i.e., there are empty cells and no winner), print \\"Ongoing\\". Examples Input \\"XOXOXOOXO\\" Output Draw Input \\"XXOXOOXOX\\" Output X Input \\"XOXOX.OO.\\" Output Ongoing Note In the first example, the board looks like: X O X O X O O X O There is no row, column, or diagonal of the same player, and no empty cells, so it\'s a draw. In the second example, the board looks like: X X O X O O X O X Player X has won with the first column filled with \'X\'. In the third example, the board looks like: X O X O X . O O . The game is still ongoing since there are empty cells and no player has won yet.","solution":"def check_tic_tac_toe(board): Determines the state of the Tic-Tac-Toe game. Args: board (str): A string of length 9 representing the game board row by row. Returns: str: \'X\' if player X has won, \'O\' if player O has won, \'Draw\' if the game ended in a draw, and \'Ongoing\' if the game has not yet ended. # Define winning positions wins = [ (0, 1, 2), # Top row (3, 4, 5), # Middle row (6, 7, 8), # Bottom row (0, 3, 6), # Left column (1, 4, 7), # Middle column (2, 5, 8), # Right column (0, 4, 8), # Main diagonal (2, 4, 6), # Anti-diagonal ] # Check for winner for (a, b, c) in wins: if board[a] == board[b] == board[c] and board[a] != \'.\': return board[a] # Check for draw or ongoing if \'.\' in board: return \\"Ongoing\\" else: return \\"Draw\\""},{"question":"Maximum Consecutive Gap Given an unsorted array, find the maximum difference between the successive elements in its sorted form. Your task is to achieve this with a time complexity of O(n). # Input - The first line of input contains an integer `n` (2 <= n <= 10^4) - the size of the array. - The second line contains `n` space-separated integers, representing the elements of the array. # Output - Print a single integer, which is the maximum consecutive gap in the sorted array. # Example Input: ``` 6 3 6 9 1 14 13 ``` Output: ``` 4 ``` # Note - You must not use the built-in sort function. - You can assume that all inputs are positive integers.","solution":"def maximum_consecutive_gap(arr): n = len(arr) if n < 2: return 0 max_val = max(arr) min_val = min(arr) if max_val == min_val: return 0 bucket_size = max(1, (max_val - min_val) // (n - 1)) bucket_count = (max_val - min_val) // bucket_size + 1 buckets = [{\'min\': None, \'max\': None} for _ in range(bucket_count)] for num in arr: bucket_idx = (num - min_val) // bucket_size if buckets[bucket_idx][\'min\'] is None: buckets[bucket_idx][\'min\'] = num buckets[bucket_idx][\'max\'] = num else: buckets[bucket_idx][\'min\'] = min(buckets[bucket_idx][\'min\'], num) buckets[bucket_idx][\'max\'] = max(buckets[bucket_idx][\'max\'], num) max_gap = 0 prev_max = min_val for bucket in buckets: if bucket[\'min\'] is not None: max_gap = max(max_gap, bucket[\'min\'] - prev_max) prev_max = bucket[\'max\'] return max_gap # Example Input n = 6 arr = [3, 6, 9, 1, 14, 13] print(maximum_consecutive_gap(arr)) # Output should be 4"},{"question":"Dasha has recently learned about repeating decimal numbers in her math class. A repeating decimal is a fractional number in which a sequence of digits repeats infinitely. For example, the decimal representation of 1/3 is 0.3333..., where \\"3\\" is the repeating sequence. Dasha is curious about identifying the longest repeating sequence for any fraction with a denominator of a given integer d (2 ≤ d ≤ 10^6). She wants to solve this problem for various values of d. Can you help her? Your task is to find out the length of the longest repeating sequence in the decimal representation of 1/d. -----Input:----- The first line contains an integer T, the number of test cases. Each of the next T lines contains a single integer d, the denominator. -----Output:----- For each test case, output the length of the longest repeating sequence in the decimal representation of 1/d. -----Constraints----- - 1 ≤ T ≤ 1000 - 2 ≤ d ≤ 10^6 -----Sample Input----- 3 3 7 12 -----Sample Output----- 1 6 1","solution":"def length_of_repeating_sequence(d): seen_remainders = {} value = 1 position = 0 while value % d != 0: if value in seen_remainders: return position - seen_remainders[value] seen_remainders[value] = position value = (value % d) * 10 position += 1 return 0 def longest_repeating_sequences(test_cases): results = [] for d in test_cases: results.append(length_of_repeating_sequence(d)) return results"},{"question":"In a remote village, there is a tradition of celebrating their annual harvest festival by creating large, decorative banners using small square patches of different colors. This year, the villagers have decided to use just two colors: red and green. They wish to arrange these patches in a specific pattern on a rectangular flag such that no two squares of the same color are adjacent horizontally, vertically, or diagonally. You are tasked with helping the villagers by generating the desired pattern on the flag. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) which represent the dimensions of the flag. The next line contains two non-negative integers r and g, where r represents the number of red patches and g represents the number of green patches. The total number of patches, r + g, will be equal to n * m. Output Print the pattern for the flag, where each patch is represented by \'R\' for a red patch and \'G\' for a green patch. Ensure no two adjacent patches are of the same color horizontally, vertically, or diagonally. If it is impossible to create such a pattern, output \\"Not possible\\". Examples Input 3 3 5 4 Output RGR GRG RGR Input 2 3 3 3 Output RG GR RG","solution":"def generate_flag_pattern(n, m, r, g): Generates a flag pattern of n x m dimensions using r red patches and g green patches. Ensures no two adjacent patches are of the same color horizontally, vertically, or diagonally. Returns the pattern as a list of strings, or \\"Not possible\\" if it cannot be achieved. if r + g != n * m: return \\"Not possible\\" # We will follow a simple checkerboard pattern logic: # - Start with \'R\' if r > g else start with \'G\' start_color = \'R\' if r >= g else \'G\' alternate_color = \'G\' if start_color == \'R\' else \'R\' pattern = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: if start_color == \'R\' and r > 0: row.append(\'R\') r -= 1 elif start_color == \'G\' and g > 0: row.append(\'G\') g -= 1 else: return \\"Not possible\\" else: if alternate_color == \'R\' and r > 0: row.append(\'R\') r -= 1 elif alternate_color == \'G\' and g > 0: row.append(\'G\') g -= 1 else: return \\"Not possible\\" pattern.append(\'\'.join(row)) return pattern # Example inputs print(generate_flag_pattern(3, 3, 5, 4)) # Expects pattern with no same color adjacent print(generate_flag_pattern(2, 3, 3, 3)) # Expects pattern with no same color adjacent"},{"question":"Alex has a binary string `s` consisting of `n` digits (0s and 1s) where the length of `s` is even (n is even). He wants to perform operations to convert `s` to a new string `t` of half the length `n/2` such that `t` has equal numbers of 0s and 1s. To achieve this, Alex can perform the following operation exactly `n/2` times: - Choose any two positions `i` and `j` (`1 <= i, j <= n`, `i != j`) from `s`. - Remove these two characters from `s` and append their XOR result to `t`. The XOR operation outputs `1` if the characters are different, and `0` if they are the same. Help Alex find a way to convert `s` to `t` with the required properties or determine that it is not possible. # Input The first line contains a single integer `q` (1 ≤ q ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer `n` (2 ≤ n ≤ 1000, `n` is even) — the length of the string `s`. The second line of each test case contains a binary string `s` of length `n`. # Output For each test case, output either of the two: 1. If it is possible to convert `s` to `t`, output `n/2` lines, each containing two distinct integers `i` and `j` (1-based indices) — the positions chosen in the corresponding operation. 2. If it is not possible, output a single line containing the word \\"IMPOSSIBLE\\". # Example Input ``` 2 4 1100 6 101010 ``` Output ``` 1 2 3 4 1 6 2 4 3 5 ``` # Note For the first test case, `s = \\"1100\\"`: - After removing `s[1]` and `s[2]`, we get `1 XOR 1 = 0`, t = {0} - After removing `s[3]` and `s[4]`, we get `0 XOR 0 = 0`, t = {0, 0} `t` now has equal numbers of 0s and 1s (both are 0). For the second test case, `s = \\"101010\\"`: - After removing `s[1]` and `s[6]`, we get `1 XOR 0 = 1`, t = {1} - After removing `s[2]` and `s[4]`, we get `0 XOR 1 = 1`, t = {1, 1} - After removing `s[3]` and `s[5]`, we get `1 XOR 0 = 1`, t = {1, 1, 1} While constructing `t`, there will be five combinations of 1s which makes it impossible to have equal numbers of 0s and 1s. Thus, the solution should be \\"IMPOSSIBLE\\" for such cases.","solution":"def find_positions(q, test_cases): results = [] for n, s in test_cases: # Checking the number of 0s and 1s in the string count_0 = s.count(\'0\') count_1 = n - count_0 # If the number of 0s and 1s are not the same, print \\"IMPOSSIBLE\\" if count_0 != count_1: results.append(\\"IMPOSSIBLE\\") else: # If the number of 0s and 1s are the same, return pairs pairs = [] for i in range(1, n, 2): pairs.append(f\\"{i} {i + 1}\\") results.append(pairs) return results # Function to parse input and output format def format_output(results): output = [] for result in results: if result == \\"IMPOSSIBLE\\": output.append(\\"IMPOSSIBLE\\") else: output.extend(result) return output"},{"question":"Design a program that will read a series of strings, each made up of lowercase and/or uppercase alphabetical letters, and determine if each string is a palindrome. A palindrome is a string that reads the same forward and backward, case-insensitively, and ignores spaces. For example, the string \\"A man a plan a canal Panama\\" is considered a palindrome. Input The input consists of multiple datasets. Each dataset is one line and consists of lowercase and/or uppercase alphabetical letters and spaces, totaling 100 characters or less. Input ends with EOF. Output For each dataset, output \\"YES\\" if the string is a palindrome and \\"NO\\" if it is not. Examples Input A man a plan a canal Panama Hello RaceCar Output YES NO YES Input test Was it a car or a cat I saw Output NO YES","solution":"def is_palindrome(s): Determines if a given string is a palindrome, case-insensitively, and ignoring spaces. Parameters: s (str): The input string made up of lowercase and/or uppercase alphabetical letters and spaces. Returns: str: \\"YES\\" if the string is a palindrome, \\"NO\\" if it is not. # Remove spaces and convert to lowercase cleaned_str = \'\'.join(c.lower() for c in s if c.isalpha()) # Check if the cleaned string is equal to its reverse return \\"YES\\" if cleaned_str == cleaned_str[::-1] else \\"NO\\" def process_input(input_strings): Processes multiple input strings and determines if each is a palindrome. Parameters: input_strings (list): A list of strings. Returns: list: A list of \\"YES\\" or \\"NO\\" corresponding to each input string. return [is_palindrome(line) for line in input_strings]"},{"question":"Lucy loves collecting stamps and she wants to catalogue all the stamps she has in her collection. Each stamp has a unique serial number and a corresponding description. Lucy plans to enter the stamps into a new software that requires each serial number to be prefixed with \'STAMP-\' and converted to uppercase letters, followed by the description in lowercase letters separated by a single hyphen. Write a function that takes a list of tuples where each tuple consists of a serial number and a description, and returns a list of strings formatted according to Lucy\'s requirements. -----Input----- The first input is an integer n (1 ≤ n ≤ 100) indicating the number of stamps in Lucy\'s collection. The second input is an array of n tuples, where each tuple consists of two strings. The first string is the serial number (1 to 20 alphanumeric characters) and the second string is the description (1 to 100 alphabetic characters). -----Output----- Output a list of n strings, each formatted according to the specified requirements. -----Examples----- Input 3 [(\\"abc123\\", \\"Rare stamp\\"), (\\"xyz789\\", \\"Old stamp\\"), (\\"mno456\\", \\"Vintage stamp\\")] Output [\'STAMP-ABC123-rare stamp\', \'STAMP-XYZ789-old stamp\', \'STAMP-MNO456-vintage stamp\'] Input 2 [(\\"a1b2\\", \\"collectible stamp\\"), (\\"c3d4\\", \\"unused stamp\\")] Output [\'STAMP-A1B2-collectible stamp\', \'STAMP-C3D4-unused stamp\']","solution":"def catalogue_stamps(n, stamps): Formats a list of tuples according to Lucy\'s requirements. Parameters: n (int): The number of stamps. stamps (list of tuples): A list of tuples where each tuple consists of a serial number and a description. Returns: List[str]: A list of formatted strings. formatted_stamps = [] for serial, description in stamps: formatted_stamp = f\\"STAMP-{serial.upper()}-{description.lower()}\\" formatted_stamps.append(formatted_stamp) return formatted_stamps"},{"question":"Henry is fond of trees and recently came across an interesting problem related to traversing binary trees. A binary tree is a tree data structure where each node has at most two children, which are referred to as the left child and the right child. Henry wants to perform an in-order traversal of a binary tree and record the sequence in which nodes are visited. Given the root of the binary tree, your task is to implement a function to return the in-order traversal of the tree as a list of node values. An in-order traversal of a binary tree is defined as follows: 1. Visit the left subtree. 2. Visit the current node. 3. Visit the right subtree. # Input and Output The function should be implemented as: ```python def inorder_traversal(root): # Your code here ``` **Input:** - The input parameter `root` is the root node of the binary tree. Each node in the binary tree is represented as a class `TreeNode`, which has the following definition: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Output:** - The function should return a list of integers representing the values of nodes visited in in-order traversal. # Example ```python # Define the binary tree # 1 # # 2 # / # 3 root = TreeNode(1) root.right = TreeNode(2) root.right.left = TreeNode(3) print(inorder_traversal(root)) # Output: [1, 3, 2] ``` # Constraints - The number of nodes in the tree is in the range [0, 100]. - `-100 ≤ Node.val ≤ 100` # Note - For an empty tree, the in-order traversal should return an empty list. - The provided `TreeNode` class and the method `inorder_traversal(root)` should be sufficient to solve the problem; no input reading or additional methods are necessary.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Returns the in-order traversal of a binary tree rooted at `root`. Args: root (TreeNode): The root node of the binary tree. Returns: List[int]: List of node values in in-order traversal. result = [] def inorder(node): if node: inorder(node.left) # Visit left subtree result.append(node.val) # Visit the current node inorder(node.right) # Visit right subtree inorder(root) return result"},{"question":"Write a function that takes in a list of non-negative integers representing heights of buildings and returns the maximum area of a rectangle formed by any two buildings. The width of the rectangle is the distance between the two buildings, and the height of the rectangle is the minimum height of the two buildings. The function should have the following signature: ```python def max_area(heights: List[int]) -> int: ``` -----Input----- - A list of non-negative integers `heights` representing the heights of the buildings, where 1 ≤ len(heights) ≤ 10^5 and 1 ≤ heights[i] ≤ 10^4. -----Output----- - An integer representing the maximum area of a rectangle that can be formed between any two of the buildings. -----Examples----- Input: [1,8,6,2,5,4,8,3,7] Output: 49 Input: [2,3,4,5,18,17,6] Output: 17 -----Note----- In the first example, the buildings at indices 1 and 8 (0-based index) have heights 8 and 7. The distance between them is 7, so the maximum area is `min(8, 7) * 7 = 49`. In the second example, the buildings with heights 18 and 17 can form the largest rectangle with an area of `min(18, 17) * 1 = 17`.","solution":"from typing import List def max_area(heights: List[int]) -> int: Returns the maximum area of a rectangle formed by any two buildings. left = 0 right = len(heights) - 1 max_area = 0 while left < right: height = min(heights[left], heights[right]) width = right - left current_area = height * width max_area = max(max_area, current_area) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"You are given a set of N items, each with a weight and a value. You have to determine the number of subsets of items such that their total weight is exactly W. Write a function countSubsets that takes in an integer array weights[], an integer array values[], an integer N, and an integer W, and returns the number of subsets of items with a total weight of W. Note: Each item can only be included once in a subset, and a subset can have from zero to all the items. Example 1: Input: N = 4 weights[] = {1, 2, 3, 4} values[] = {10, 20, 30, 40} W = 5 Output: 3 Explanation: The subsets with a total weight of 5 are: 1. {1, 4} - (1+4 = 5) 2. {2, 3} - (2+3 = 5) 3. {1, 2, 2} - (1+2+2 = 5) Example 2: Input: N = 3 weights[] = {2, 3, 5} values[] = {20, 30, 50} W = 8 Output: 1 Explanation: The only subset with a total weight of 8 is: 1. {3, 5} - (3+5 = 8) Your Task: You don\'t need to read input or print anything. Your task is to complete the function countSubsets() which takes the arrays weights[], values[], the integer N, and the integer W, and returns the number of subsets with total weight W. Expected Time Complexity: O(N*W) Expected Auxiliary Space: O(W) Constraints: 1 <= N <= 100 1 <= weights[i], values[i] <= 100 1 <= W <= 100","solution":"def countSubsets(weights, values, N, W): # Create a DP array to store the number of subsets with exact weight equal to the index dp = [0] * (W + 1) dp[0] = 1 # There is one subset (the empty subset) with weight 0 for weight in weights: # Traverse the dp array from right to left to avoid using the same element multiple times for w in range(W, weight - 1, -1): dp[w] += dp[w - weight] return dp[W]"},{"question":"Given an integer matrix of size MxN, where each row is sorted in non-decreasing order. Write a function that finds the median of the matrix. Your Task: You don\'t need to read input or print anything. Complete the function findMedian() that takes the matrix, its dimensions M and N as input parameters and returns the median of the matrix. Example 1: Input: M = 3, N = 3 Matrix = [[1, 3, 5], [2, 6, 9], [3, 6, 9]] Output: 5 Explanation: If we arrange all the elements in sorted order, 1, 2, 3, 3, 5, 6, 6, 9, 9, 5 is the middle of this sorted list. Example 2: Input: M = 2, N = 4 Matrix = [[1, 2, 3, 4], [5, 6, 7, 8]] Output: 4 Explanation: If we arrange all the elements in sorted order, 1, 2, 3, 4, 5, 6, 7, 8, 4 and 5 are middle elements. Here median will be 4. Expected Time Complexity: O(M * log(N) * log(max-min)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ M, N ≤ 500 1 ≤ Matrix[i][j] ≤ 10^3","solution":"def findMedian(matrix, M, N): Function to find the median of the sorted matrix (sorted across each row). :param matrix: List[List[int]] - integer matrix of size MxN :param M: int - number of rows in the matrix :param N: int - number of columns in the matrix :return: int - median of the matrix def countLessEqual(x): count = 0 for row in matrix: count += binarySearch(row, x) return count def binarySearch(row, x): low, high = 0, len(row) while low < high: mid = (low + high) // 2 if row[mid] <= x: low = mid + 1 else: high = mid return low low, high = matrix[0][0], matrix[0][0] for i in range(M): low = min(low, matrix[i][0]) high = max(high, matrix[i][N-1]) desired = (M * N + 1) // 2 while low < high: mid = (low + high) // 2 if countLessEqual(mid) < desired: low = mid + 1 else: high = mid return low"},{"question":"A string is considered to have a balanced number of \'a\'s and \'b\'s if the number of \'a\'s is exactly equal to the number of \'b\'s. Given a string consisting only of characters \'a\' and \'b\', find and print the length of the longest substring that has a balanced number of \'a\'s and \'b\'s. Input Format A single string consisting only of \'a\' and \'b\'. Constraints 1 leq text{length of the string} leq 10^6 Output Format Print a single integer denoting the length of the longest balanced substring. Sample Input 0 aabbaabb Sample Output 0 8 Explanation 0 The given string itself is the longest balanced substring, so the output is 8. Sample Input 1 aabbab Sample Output 1 6 Explanation 1 The entire string has a balanced number of \'a\'s and \'b\'s, making the length of the longest balanced substring 6.","solution":"def longest_balanced_substring(s): Finds the length of the longest substring that has a balanced number of \'a\'s and \'b\'s. max_len = 0 balance_map = {0: -1} balance = 0 for i, char in enumerate(s): if char == \'a\': balance += 1 elif char == \'b\': balance -= 1 if balance in balance_map: max_len = max(max_len, i - balance_map[balance]) else: balance_map[balance] = i return max_len"},{"question":"Python is a popular programming language with a rich set of libraries and tools. In this question, you are asked to determine if a given list contains an increasing triplet subsequence, i.e., there exists a sequence of indices i, j, k such that 0 le i < j < k < n and arr[i] < arr[j] < arr[k]. Write a function `increasing_triplet(sequence)` that takes a list of integers and returns `True` if the list contains such a triplet, otherwise `False`. ------ Input Format ------ - The input contains a single list `sequence` of length `n`. ------ Output Format ------ - Return `True` if there is an increasing triplet subsequence, otherwise return `False`. ------ Constraints ------ 1 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 ----- Sample Input 1 ------ [1, 2, 3, 4, 5] ----- Sample Output 1 ------ True ----- Explanation 1 ------ The sequence [1, 2, 3, 4, 5] contains the increasing triplet (1, 2, 3). ----- Sample Input 2 ------ [5, 4, 3, 2, 1] ----- Sample Output 2 ------ False ----- Explanation 2 ------ The sequence [5, 4, 3, 2, 1] does not contain any increasing triplet subsequence.","solution":"def increasing_triplet(sequence): Determines if a given list contains an increasing triplet subsequence. Args: sequence : List[int] - The input list of integers. Returns: bool - True if there is an increasing triplet subsequence, otherwise False. first_min = float(\'inf\') second_min = float(\'inf\') for num in sequence: if num <= first_min: first_min = num elif num <= second_min: second_min = num else: return True return False"},{"question":"You are given a string sequence consisting of lowercase letters. A substring is defined as a contiguous sequence of characters within a string. You need to determine the number of distinct substrings that can be formed from the given string. # Input - The first line contains a single integer t (1 le t le 50) — the number of test cases. - For each test case, there is one line containing a string s (1 le |s| le 10^5) consisting of lowercase English letters. # Output For each test case, output the number of distinct substrings that can be formed from the given string. # Example Input ``` 2 ababa abc ``` Output ``` 9 6 ``` # Note In the first example, the distinct substrings of \\"ababa\\" are: \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"ababa\\", \\"ba\\", \\"baba\\". In the second example, the distinct substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". To solve this problem, it is essential to efficiently count the number of unique substrings by avoiding redundancy in substring generation. Techniques such as suffix arrays or hash maps can be useful in achieving this efficiently within the given constraints.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the given string s. n = len(s) substrings = set() for i in range(n): for j in range(i+1, n+1): substrings.add(s[i:j]) return len(substrings) def process_test_cases(test_cases): Processes multiple test cases to return the results. results = [] for s in test_cases: results.append(count_distinct_substrings(s)) return results"},{"question":"Given a list of integers, counts of A = [a_{1}, a_{2}, ..., a_{N}], and total required integers K, find the K integers that maximize the product of their counts. In case of ties, choose the set of integers such that their sum is minimized. ------ Input Format ------ - The first line contains T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains integers N and K, where N is the number of integers in list A and K is the number of integers to be selected. - The second line contains N space-separated integers, representing the counts of the integers. ------ Output Format ------ For each test case, output on a new line, K integers, separated by spaces, representing the selected integers. Ensure the integers are printed in non-descending order. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ N 1 ≤ a_{i} ≤ 10^{6} ------ Sample Input 1 ------ 2 5 3 1 2 3 4 5 4 2 10 10 5 2 ------ Sample Output 1 ------ 3 4 5 10 10 ------ Explanation 1 ------ Test case 1: The total number of required integers K is 3. Among the integers [1, 2, 3, 4, 5], the highest product of their counts is achieved by selecting 3, 4, and 5 (3 * 4 * 5 = 60). Hence, the selected integers are [3, 4, 5]. Test case 2: The total number of required integers K is 2. Among the integers [10, 10, 5, 2], the highest product of their counts is achieved by selecting 10 and 10 (10 * 10 = 100). Hence, the selected integers are [10, 10].","solution":"def get_k_integers_with_max_product(test_cases): results = [] for case in test_cases: N, K = case[0] A = case[1] A.sort(reverse=True) selected_integers = A[:K] selected_integers.sort() results.append(\' \'.join(map(str, selected_integers))) return results def parse_input_and_execute(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, K = map(int, lines[index].strip().split()) index += 1 A = list(map(int, lines[index].strip().split())) index += 1 test_cases.append(((N, K), A)) results = get_k_integers_with_max_product(test_cases) return results"},{"question":"A university has decided to create an automated seating arrangement system for its final exam rooms to prevent students from sitting next to their friends. Each exam room is represented by a grid of student names. The system should ensure that no two students with the same initials can sit next to each other horizontally, vertically, or diagonally. Create a function `validateSeating` that accepts a 2D array of student names and returns a boolean indicating whether the seating arrangement meets the criteria. Each student\'s name in the seating plan is represented as a two-character string, where the first character is the student\'s first initial and the second character is the student\'s last initial. **Notes:** - The seating plan will always be non-empty. - Each name will be exactly two characters long. An example seating plan: ``` [ [\\"AB\\", \\"CD\\", \\"EF\\"], [\\"GH\\", \\"IJ\\", \\"KL\\"], [\\"MN\\", \\"OP\\", \\"QR\\"] ] ``` This seating plan is valid because no two students with the same initials are sitting next to each other. Another example seating plan: ``` [ [\\"AB\\", \\"CD\\", \\"CD\\"], [\\"GH\\", \\"AB\\", \\"KL\\"], [\\"MN\\", \\"OP\\", \\"QR\\"] ] ``` This seating plan is invalid because the students with initials \\"AB\\" and \\"CD\\" are next to each other. The function should return `true` for the first example and `false` for the second example.","solution":"def validateSeating(seating): rows = len(seating) cols = len(seating[0]) def is_valid(i, j): initials = seating[i][j] adjacent_positions = [ (i-1, j), (i+1, j), # Vertical neighbors (i, j-1), (i, j+1), # Horizontal neighbors (i-1, j-1), (i-1, j+1), # Diagonal neighbors (i+1, j-1), (i+1, j+1) ] for x, y in adjacent_positions: if 0 <= x < rows and 0 <= y < cols and seating[x][y] == initials: return False return True for i in range(rows): for j in range(cols): if not is_valid(i, j): return False return True"},{"question":"You are organizing a chess tournament and need to create a pairing system for the players. You decide to have a structured tournament schedule where each player plays every other player exactly once. You need to write a program that, given the number of players, generates the schedule of matches. Each match should be represented as a pair (i, j) where i and j are the indices of the players participating in the match. The player\'s indices should be 0-based. Input The input consists of a single integer n (2 ≤ n ≤ 1000), the number of players. Output Print lines containing pairs (i, j) where 0 ≤ i < j < n, representing all possible matches in the tournament schedule. Example Input 4 Output 0 1 0 2 0 3 1 2 1 3 2 3 Note In the sample, the matches are listed such that each player index is paired with every other player index exactly once. For 4 players, the pairs generated cover all unique matches possible.","solution":"def generate_tournament_schedule(n): Generates a schedule of matches for a chess tournament where each player plays with every other player exactly once. Args: n (int): The number of players. Returns: list of tuples: A list of tuples where each tuple represents a match (i, j). matches = [] for i in range(n): for j in range(i + 1, n): matches.append((i, j)) return matches"},{"question":"Given an array of integers and a target value, find if there exists a pair of elements in the array such that their sum is equal to the target value. If such a pair exists, return the pair (in any order). If no such pair exists, return an empty list. Example 1: Input: arr = [2, 7, 11, 15] target = 9 Output: [2, 7] Explanation: 2 + 7 = 9 so the pair (2, 7) is a valid pair. Example 2: Input: arr = [3, 2, 4] target = 6 Output: [2, 4] Explanation: 2 + 4 = 6 so the pair (2, 4) is a valid pair. Example 3: Input: arr = [3, 3] target = 6 Output: [3, 3] Explanation: 3 + 3 = 6 so the pair (3, 3) is a valid pair. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPairWithSum() which takes in the array of integers arr and an integer target as input parameters and returns a list containing the pair of numbers that add up to the target. If no such pair exists, return an empty list. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(arr) <= 10^4 -10^5 <= arr[i] <= 10^5 -10^5 <= target <= 10^5","solution":"def findPairWithSum(arr, target): Returns a pair of numbers from the list that add up to the target if such a pair exists, otherwise returns an empty list. seen = set() for num in arr: complement = target - num if complement in seen: return [complement, num] seen.add(num) return []"},{"question":"Given a square matrix of size NxN, rotate it 90 degrees clockwise in place. # Problem Statement A square matrix of size NxN is represented as a list of lists. You are required to rotate the matrix 90 degrees clockwise without using any extra space and in place. # Input The input consists of: 1. An integer N (1 leq N leq 20), which is the size of the matrix. 2. NxN integers separated by spaces spread across N lines, representing the matrix. # Output The output should consist of the rotated matrix, printed in the same format as the input. # Example Sample Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Sample Output: ``` 7 4 1 8 5 2 9 6 3 ``` # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> None: # implementation here ``` # Hints - You might consider first transposing the matrix and then reversing each row to achieve the 90 degrees rotation.","solution":"def rotate_matrix(matrix): Rotates a square matrix 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are given two strings, `s` and `t`. Your task is to determine if it is possible to transform the string `s` into the string `t` by deleting some (possibly zero) characters from `s`, without reordering the remaining characters. -----Input----- The first line contains a single integer q (1 leq q leq 100) — the number of test cases. The next 2q lines describe the test cases. Each test case consists of two lines: - The first line contains the string `s` (1 leq |s| leq 100). - The second line contains the string `t` (1 leq |t| leq 100). The strings s and t consist only of lowercase English letters. -----Output----- For each test case, output \\"YES\\" if it is possible to transform `s` into `t` by deleting some characters from `s` without reordering the remaining characters. Otherwise, output \\"NO\\". -----Examples----- Input 4 abc ab abcdef af abc acb xyz xyzz Output YES YES NO NO -----Note----- In the first example, you can delete \'c\' from `s` to get `t`. In the second example, you can delete \'b\', \'c\', \'d\', \'e\' from `s` to get `t`. In the third example, it\'s impossible to rearrange \'abc\' to get \'acb\'. In the fourth example, `xyzz` has an extra \'z\' which is not present in `xyz`, but the order doesn\'t match.","solution":"def can_transform(s, t): Determines if it is possible to transform string s into string t by deleting some (possibly zero) characters from s, without reordering the remaining characters. Args: s (str): Source string. t (str): Target string. Returns: str: \\"YES\\" if transformation is possible, \\"NO\\" otherwise. it = iter(s) return \\"YES\\" if all(char in it for char in t) else \\"NO\\" def process_queries(queries): results = [] for s, t in queries: results.append(can_transform(s, t)) return results"},{"question":"A robotics company has developed a sophisticated cleaning robot named \\"CleanBot\\" that can navigate a grid-like room filled with various obstacles (e.g., tables and chairs). The room is represented as a binary matrix, where cells with value 0 are cleanable (walkable) spaces, and cells with value 1 are obstacles that the robot cannot traverse. The CleanBot can move in four possible directions: up, down, left, and right. Your task is to write a program that helps CleanBot find the shortest path from its starting position to a given destination position in the room. Rules: - CleanBot can only move between adjacent cells that are cleanable (have a value of 0). - If there is no valid path from the starting position to the destination, return -1. Inputs: - The first line contains two integers, n and m, which are the dimensions of the room (1 <= n, m <= 100). - The second through (n+1) lines describe the grid, consisting of n lines of m integers (either 0 or 1). - The last line contains four integers: sx, sy, dx, dy which are the coordinates of the starting and destination positions respectively (0 <= sx, sy, dx, dy < n, m). Output: - One integer, the length of the shortest path from start to destination, or -1 if no valid path exists. SAMPLE INPUT 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 4 4 SAMPLE OUTPUT 8","solution":"from collections import deque def shortest_path(grid, start, end): n, m = len(grid), len(grid[0]) # Directions for moving up, down, left, and right directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 sx, sy = start dx, dy = end if grid[sx][sy] == 1 or grid[dx][dy] == 1: return -1 queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, depth = queue.popleft() if (x, y) == (dx, dy): return depth for direction in directions: nx, ny = x + direction[0], y + direction[1] if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, depth + 1)) return -1 def main(n, m, grid, sx, sy, dx, dy): start = (sx, sy) end = (dx, dy) print(shortest_path(grid, start, end)) # Sample input n = 5 m = 5 grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] sx, sy, dx, dy = 0, 0, 4, 4 main(n, m, grid, sx, sy, dx, dy)"},{"question":"Write a function ```capital_city``` that takes a country name as an input and returns its capital city. The function should be able to handle different variations in spelling and capitalization, as well as missing or additional accents. If the function does not recognize the country name, it should return \\"Unknown\\". The function signature is: ```python def capital_city(country: str) -> str: ``` For example: ```python # Should return \\"Paris\\" when the country is France print(capital_city(\\"France\\")) # should return \\"Paris\\" # Should handle different capitalizations print(capital_city(\\"france\\")) # should return \\"Paris\\" print(capital_city(\\"FRANCE\\")) # should return \\"Paris\\" print(capital_city(\\"FrAnCe\\")) # should return \\"Paris\\" # Should handle additional punctuation and whitespace print(capital_city(\\" France \\")) # should return \\"Paris\\" print(capital_city(\\"France!\\")) # should return \\"Paris\\" # Should handle variations in spelling and accents print(capital_city(\\"Frånce\\")) # should return \\"Paris\\" print(capital_city(\\"Frànce\\")) # should return \\"Paris\\" # Should return \\"Unknown\\" for unrecognized country names print(capital_city(\\"Atlantis\\")) # should return \\"Unknown\\" print(capital_city(\\"Narnia\\")) # should return \\"Unknown\\" ``` **Constraints and Details:** 1. The function should be case-insensitive. 2. The function should ignore extra spaces and punctuation. 3. The function should handle common spelling variations and accents using UTF-8 unicodes. 4. You can assume the function only needs to handle a fixed set of approximately 10-15 well-known countries and their capitals for the scope of this solution. Here is a reference list for testing: ```python country_capital = { \\"France\\": \\"Paris\\", \\"Spain\\": \\"Madrid\\", \\"Germany\\": \\"Berlin\\", \\"Italy\\": \\"Rome\\", \\"United Kingdom\\": \\"London\\", \\"Canada\\": \\"Ottawa\\", \\"Australia\\": \\"Canberra\\", \\"Brazil\\": \\"Brasília\\", \\"Japan\\": \\"Tokyo\\", \\"China\\": \\"Beijing\\" } ```","solution":"import unicodedata import re def normalize_country_name(country: str) -> str: Normalize a country name by removing accents, extra spaces, and punctuation. Convert to lowercase. # Normalize the string to remove accents normalized = unicodedata.normalize(\'NFKD\', country).encode(\'ASCII\', \'ignore\').decode(\'ASCII\') # Remove punctuations and convert to lowercase normalized = re.sub(r\'[W_]+\', \'\', normalized).lower() return normalized def capital_city(country: str) -> str: Return the capital city of the specified country. country_capital = { \\"france\\": \\"Paris\\", \\"spain\\": \\"Madrid\\", \\"germany\\": \\"Berlin\\", \\"italy\\": \\"Rome\\", \\"unitedkingdom\\": \\"London\\", \\"canada\\": \\"Ottawa\\", \\"australia\\": \\"Canberra\\", \\"brazil\\": \\"Brasília\\", \\"japan\\": \\"Tokyo\\", \\"china\\": \\"Beijing\\" } normalized_country = normalize_country_name(country) return country_capital.get(normalized_country, \\"Unknown\\")"},{"question":"In Treeland, there are multiple kingdoms with various castles connected by bidirectional roads. Treeland\'s road system forms an undirected tree, meaning there is exactly one path between any two castles. Recently, the treelandian government has decided to establish a wireless communication network between castles. To establish the network, they have to place communication towers in selected castles. A communication tower can cover any castle within its range. The range of a communication tower located in a castle is the maximum distance from that castle to any other castle in the network, with each road having a distance of 1. The goal is to determine the minimum maximum distance for any castle in the network from its nearest communication tower. ---- Input ---- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of castles. Each of the following n-1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ n), denoting a road between castles u and v. The last line contains an integer k (1 ≤ k ≤ n), the number of communication towers to be placed. ---- Output ---- Print a single integer — the minimum maximum distance from any castle to the nearest communication tower. ---- Examples ---- Input 5 1 2 1 3 3 4 3 5 2 Output 1 Input 6 1 2 1 3 2 4 2 5 3 6 3 Output 1 Input 4 1 2 1 3 2 4 1 Output 2 Input 7 1 2 1 3 2 4 2 5 3 6 3 7 2 Output 2 ---- Note ---- In the first example, we can place the two towers in any pair of castles that are adjacent to each other, e.g., castle 1 and any other castle directly connected to castle 1. This ensures that the maximum distance from any castle to the nearest communication tower is 1. In the second example, we can place the three towers in any three castles as long as they are adjacent in pairs. In the third example, placing just one communication tower only satisfies the condition if it\'s placed at castle 1 since it has the maximum range required to reach castle 4, which results in a maximum distance of 2. In the fourth example, with 2 communication towers, placing the towers at the optimal castles would cover all other castles within a distance of 2.","solution":"from collections import defaultdict, deque def bfs_farthest_node(start, n, graph): Perform BFS to find the farthest node from the start node and the distance to it. visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True farthest_node = start max_distance = 0 while queue: node, distance = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) if distance + 1 > max_distance: max_distance = distance + 1 farthest_node = neighbor return farthest_node, max_distance def minimum_max_distance(n, roads, k): if n == 1: return 0 graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Find the farthest node from an arbitrary node, say node 1 node_a, _ = bfs_farthest_node(1, n, graph) # Find the farthest node from node_a, which will give the maximum diameter of the tree node_b, tree_diameter = bfs_farthest_node(node_a, n, graph) # Once we have the diameter, we can calculate the minimum max distance if k == 1: return (tree_diameter + 1) // 2 return (tree_diameter + 1 - (k - 1)) // k # Example call # The variable `input_data` represents the input split by lines def solve(input_data): input_lines = input_data.split(\'n\') n = int(input_lines[0]) roads = [] for i in range(1, n): u, v = map(int, input_lines[i].split()) roads.append((u, v)) k = int(input_lines[-1]) return minimum_max_distance(n, roads, k)"},{"question":"Given a grid of size m x n consisting of non-negative integers representing the height of each unit cell in a 2D elevation map, the amount of rainwater trapped after raining on this map is calculated as follows: Algorithm to calculate trapped rainwater: 1. Identify the boundaries of the grid, which cannot hold water beyond their height. 2. Traverse each cell and determine the maximum height of water that it can trap. This is determined by the minimum height of the surrounding boundaries minus the height of the current cell. 3. Sum the water trapped by each cell to get the total amount of trapped rainwater. Function Specification: You need to complete the following function: ```python def trapRainWater(heightMap: List[List[int]]) -> int: ``` **Input:** - heightMap: A 2D list of dimensions m x n representing the height of each cell in the grid. **Output:** - Return an integer representing the total amount of rainwater trapped. **Constraints:** - 1 <= m, n <= 100 - 0 <= heightMap[i][j] <= 20000 **Example:** ```python heightMap = [ [1,4,3,1,3,2], [3,2,1,3,2,4], [2,3,3,2,3,1] ] print(trapRainWater(heightMap)) # Output: 4 ``` **Explanation:** In the given elevation map, 4 units of water (one unit on position (1,1) and three units on position (1,2)) are trapped. **Notes:** - You can assume that a single cell cannot overflow and can sustain the height of water trapped by it as long as the surrounding heights are greater. - You may use any standard data structures to efficiently compute the result, such as priority queues for keeping track of the current boundary heights. Implement the function to achieve the desired results.","solution":"from heapq import heappop, heappush from typing import List def trapRainWater(heightMap: List[List[int]]) -> int: if not heightMap or not heightMap[0]: return 0 m, n = len(heightMap), len(heightMap[0]) visited = [[False] * n for _ in range(m)] heap = [] # Push all the boundary cells into the heap for i in range(m): heappush(heap, (heightMap[i][0], i, 0)) heappush(heap, (heightMap[i][n-1], i, n-1)) visited[i][0] = True visited[i][n-1] = True for j in range(1, n-1): heappush(heap, (heightMap[0][j], 0, j)) heappush(heap, (heightMap[m-1][j], m-1, j)) visited[0][j] = True visited[m-1][j] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] water_trapped = 0 while heap: height, x, y = heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: visited[nx][ny] = True water_trapped += max(0, height - heightMap[nx][ny]) heappush(heap, (max(height, heightMap[nx][ny]), nx, ny)) return water_trapped"},{"question":"Two small robots, Robo1 and Robo2, operate on a one-dimensional track represented by a line with integer positions. A number of blocks are placed on this track at various positions. Robo1 can pick up blocks from the left end of the track moving to the right, while Robo2 picks up blocks starting from the right end and moving to the left. If both robots attempt to pick up a block at the same position, Robo1 prevails. Your task is to determine the maximum number of blocks that can be picked up by Robo1 and Robo2 combined. Input The first line contains an integer k (1 ≤ k ≤ 100) — the number of block positions on the track. The second line contains k integers b1, b2, …, bk (−10 000 ≤ bi ≤ 10 000) — the positions of the blocks on the track. The positions are distinct. Output Print a single integer — the maximum number of blocks that can be picked up by Robo1 and Robo2 together. Examples Input 5 -2 -1 0 1 2 Output 5 Input 4 -100 -50 50 100 Output 4 Note In the first example, Robo1 picks blocks at positions -2, -1, and 0, while Robo2 picks blocks at positions 1 and 2. Together, they pick all the 5 blocks. In the second example, Robo1 picks blocks at positions -100 and -50, while Robo2 picks blocks at positions 50 and 100. Together, they pick all 4 blocks.","solution":"def max_blocks_picked_up(k, block_positions): Determine the maximum number of blocks that can be picked up by Robo1 and Robo2 combined. :param k: int: number of block positions on the track :param block_positions: List[int]: the positions of the blocks on the track :return: int: the maximum number of blocks that can be picked up by Robo1 and Robo2 together block_positions.sort() return len(block_positions)"},{"question":"Anna has an array of `n` integers. She loves interesting arrays. An array is interesting if it contains at least one subsequence whose sum is equal to `k`. Anna wants to know if her array is interesting or not. Given the array `A` of `n` integers and an integer `k`, write a program to determine if it is possible to find a subsequence of `A` whose sum is exactly equal to `k`. Input The first line contains two integers `n` (1 ≤ n ≤ 100) — the number of elements in the array, and `k` (1 ≤ k ≤ 10^9) — the sum to be checked. The second line contains `n` integers `A1, A2, ..., An` (1 ≤ Ai ≤ 10^9) — the elements of the array. Output Print \\"YES\\" if there is a subsequence of the array `A` whose sum is exactly `k`. Otherwise, print \\"NO\\". Examples Input 5 9 3 34 4 12 5 Output YES Input 3 20 5 3 2 Output NO Note In the first sample, the subsequence `{4, 5}` sums up to `9`, so the output is \\"YES\\". In the second sample, no subsequence sums up to `20`, so the output is \\"NO\\".","solution":"def is_interesting_array(n, k, A): Returns \\"YES\\" if there is a subsequence of the array A whose sum is exactly k, otherwise returns \\"NO\\". # Use a set to store possible sums possible_sums = {0} for num in A: new_sums = set() for s in possible_sums: new_sums.add(s + num) possible_sums.update(new_sums) if k in possible_sums: return \\"YES\\" return \\"NO\\""},{"question":"The government of a city has decided to build a special road network for a festival. The road network can be represented as a tree graph, which contains `n` nodes connected by `n - 1` edges. Each edge has a weight representing the travel cost between the nodes it connects. The city government wants to determine the minimum travel cost between any two nodes in the tree. You are given the number of nodes `n` and the edges of the tree. Write a program that computes the minimum travel cost for every pair of nodes and prints the maximum value among these minimum costs. Input The first line contains an integer `n` (2 ≤ n ≤ 20000) representing the number of nodes in the tree. The next `n-1` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) representing an edge between nodes `u` and `v` with weight `w`. Output Output the maximum value among the minimum travel costs for every pair of nodes. Examples Input 5 1 2 3 1 3 2 3 4 4 3 5 6 Output 6 Input 3 1 2 1 2 3 2 Output 2","solution":"def dfs(node, parent, graph, max_cost, current_cost): max_cost[node] = current_cost for neighbor, weight in graph[node]: if neighbor != parent: dfs(neighbor, node, graph, max_cost, max(current_cost, weight)) def min_travel_cost(n, edges): graph = [[] for _ in range(n+1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Do a DFS from node 1 to calculate the minimum maximum cost from node 1 to all other nodes. max_cost_from_any_node = [0] * (n+1) dfs(1, -1, graph, max_cost_from_any_node, 0) # Find the maximum weight from node 1 to any other node, which is our desired answer res = max(max_cost_from_any_node) return res"},{"question":"You work for a delivery app company that wants to improve its route optimization algorithm. One of the key features is to ensure that delivery routes cover all the necessary deliveries while minimizing the total distance travelled. You are tasked with writing a function to select the optimal delivery city from a list of cities by considering the total pairwise traveling distances. The input consists of the number of test cases, followed by the details for each test case. Each test case contains a list of cities and the pairwise distances between them. Your goal is to select the city that minimizes the sum of distances to all other cities. If multiple cities yield the same minimum sum, choose the lexicographically smallest city. -----Input----- The first line of input contains a single integer T, the number of test cases. T test cases follow. For each test case: First line contains an integer N, the number of cities. Next N lines contain: - The name of the city (a string of lowercase Latin alphabets). - N integers indicating the pairwise distances to the other cities in the order they are listed. -----Output----- For each test case, print the name of the optimal city that minimizes the total distance to all other cities. If there are multiple such cities, print the lexicographically smallest one. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 100 - Distance between any two different cities will be a positive integer ≤ 10^4. - Distance between a city and itself is always 0. - City names are unique within a test case. - Each city name is a string of lowercase Latin alphabets of length between 1 and 50. -----Example----- Input 2 3 city1 0 10 15 city2 10 0 20 city3 15 20 0 4 alpha 0 5 10 15 beta 5 0 6 8 gamma 10 6 0 7 delta 15 8 7 0 Output city2 gamma -----Explanation----- In the first test case, the total distances to all other cities from city1, city2, and city3 are 25, 30, and 35 respectively. Thus, city2 is chosen because 25 is the minimum. In the second test case, the total distances to all other cities are 30, 19, 23, and 30 respectively. Though beta and gamma both have the smallest sum of 19, gamma is chosen because it\'s lexicographically smaller.","solution":"def select_optimal_city(test_cases): results = [] for test_case in test_cases: n = test_case[0] cities = test_case[1] city_distances = test_case[2] optimal_city = None min_total_distance = float(\'inf\') for i in range(n): total_distance = sum(city_distances[i]) if total_distance < min_total_distance: min_total_distance = total_distance optimal_city = cities[i] elif total_distance == min_total_distance: if cities[i] < optimal_city: optimal_city = cities[i] results.append(optimal_city) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(input_lines[idx]) idx += 1 cities = [] distances = [] for _ in range(N): parts = input_lines[idx].split() cities.append(parts[0]) distances.append(list(map(int, parts[1:]))) idx += 1 test_cases.append((N, cities, distances)) return test_cases"},{"question":"Given a binary tree, each node contains an integer value. Implement a function to determine the maximum average value of any subtree of that tree. - A subtree of a node is that node, plus every node that is a descendant of that node. - The average value of a subtree is the sum of its values, divided by the number of nodes in the subtree. Return the maximum average value as a floating-point number. Example 1: Input: [5,6,1] ``` 5 / 6 1 ``` Output: 6.00000 Example 2: Input: [0,-1,2] ``` 0 / -1 2 ``` Output: 2.00000 Constraints: - The number of nodes in the tree is in the range [1, 10000]. - Each node will have a value in the range [-10000, 10000]. - The output should be to 5 decimal places.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maximum_average_subtree(root): def dfs(node): if not node: return (0, 0, float(\'-inf\')) # sum, count, max_average left_sum, left_count, left_max = dfs(node.left) right_sum, right_count, right_max = dfs(node.right) current_sum = left_sum + right_sum + node.val current_count = left_count + right_count + 1 current_average = current_sum / current_count max_average = max(left_max, right_max, current_average) return (current_sum, current_count, max_average) return dfs(root)[2]"},{"question":"Sam is organizing a musical concert and needs to manage the seating for guests. He wants to ensure that certain VIP guests, each having a unique identifier, sit in the first row without changing the relative order of their appearance in the provided list. The remaining guests can be seated in any order after the VIP guests. Your task is to help Sam update the seating arrangement according to these requirements. INPUT: First line of input gives T, the number of test cases. For each test case, first line gives N, the total number of guests. Next line of each test case provides a list of N integers, where each integer is a unique identifier representing a guest. Next line of each test case gives K, the number of VIP guests. Next K lines each give one unique identifier of the VIP guests in the desired order for the first row. OUTPUT: For each test case, print the updated list of guest identifiers after seating the VIP guests in the first row, followed by the remaining guests in any order. CONSTRAINTS: 1 ≤ T ≤ 20 1 ≤ N ≤ 1000 1 ≤ K ≤ N SAMPLE INPUT 1 6 4 2 3 6 1 5 3 2 6 4 SAMPLE OUTPUT 2 6 4 3 1 5 Explanation In the first test case, VIP guests 2, 6, and 4 are seated in the first row in the same order. The remaining guests 3, 1, and 5 can be seated afterward in any order. Thus one possible output is 2 6 4 3 1 5.","solution":"def organize_seating(T, cases): results = [] for i in range(T): N = cases[i][\'N\'] guests = cases[i][\'guests\'] K = cases[i][\'K\'] VIP = cases[i][\'VIP\'] VIP_set = set(VIP) non_VIP = [guest for guest in guests if guest not in VIP_set] # Update seating arrangement updated_seating = VIP + non_VIP results.append(updated_seating) return results"},{"question":"Your task is to create a function that simulates a simple password validator. The function should take a password as input and return whether or not it is valid based on the following criteria: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter (\'A\'-\'Z\'). 3. The password must contain at least one lowercase letter (\'a\'-\'z\'). 4. The password must contain at least one digit (\'0\'-\'9\'). 5. The password must contain at least one special character from the set !@#%^&*()-+. Write a function called `validatePassword` with the following parameter(s): - `password` (string): the password to be validated Returns: - `bool`: return `True` if the password is valid according to the above criteria, otherwise return `False`. Input Format: - A single line containing a string `password`. Constraints: - The password can be any printable ASCII character. - The maximum length of the password is 100 characters. Sample Input: ``` P@ssw0rd ``` Sample Output: ``` True ``` Explanation: The password \\"P@ssw0rd\\" satisfies all the validation criteria: 1. It is 8 characters long. 2. It contains one uppercase letter \\"P\\". 3. It contains one lowercase letter \\"a\\". 4. It contains one digit \\"0\\". 5. It contains one special character \\"@\\". Function Signature: ```python def validatePassword(password: str) -> bool: pass ```","solution":"import re def validatePassword(password: str) -> bool: if len(password) < 8: return False has_upper = re.search(r\'[A-Z]\', password) has_lower = re.search(r\'[a-z]\', password) has_digit = re.search(r\'d\', password) has_special = re.search(r\'[!@#%^&*()-+]\', password) if has_upper and has_lower and has_digit and has_special: return True return False"},{"question":"You are given an integer array `nums` where each element is distinct, and an integer `target`. Your goal is to find a subset of the `nums` array that adds up to the `target`. You should return the subset if such a subset exists, otherwise return an empty array. Example 1: Input: nums = [2, 3, 7, 8, 10], target = 11 Output: [3, 8] Explanation: 3 + 8 = 11 Example 2: Input: nums = [1, 2, 5], target = 4 Output: [] Example 3: Input: nums = [3, 34, 4, 12, 5, 2], target = 9 Output: [4, 5] Note: The input array contains distinct integers. The length of the given array is positive and will not exceed 20. If there exists multiple solutions, return any one of them.","solution":"def find_subset_sum(nums, target): def find_subset_recursive(nums, target, idx, current_subset): if target == 0: return current_subset if target < 0 or idx == len(nums): return [] # Include the current element and move to the next element with_current = find_subset_recursive(nums, target - nums[idx], idx + 1, current_subset + [nums[idx]]) if with_current: return with_current # Exclude the current element and move to the next element without_current = find_subset_recursive(nums, target, idx + 1, current_subset) if without_current: return without_current return [] return find_subset_recursive(nums, target, 0, [])"},{"question":"You are given a list of n books, each with a certain number of pages. Your task is to allocate these books to m students in such a way that each student gets at least one book, and the maximum number of pages assigned to a student is minimized. Determine the maximum number of pages a student has to read in such an optimal allocation. -----Input----- The input consists of two lines: - The first line contains two space-separated integers n and m (1 leq n, m leq 1000), representing the number of books and the number of students, respectively. - The second line contains n space-separated integers (1 leq mathrm{pages}[i] leq 10000), representing the number of pages in each book. It is guaranteed that n geq m. -----Output----- Print a single integer representing the maximum number of pages a student has to read such that the allocation is optimal. -----Examples----- Sample Input 1: 4 2 12 34 67 90 Sample Output 1: 113 Sample Input 2: 5 3 10 20 30 40 50 Sample Output 2: 60 -----Note----- In the first example, the optimal allocation is to give the first student the first two books (12 + 34 = 46 pages) and the second student the last two books (67 + 90 = 157 pages). The maximum number of pages any student has to read is 157, which is minimized to 113 when more equal distribution is possible. In the second example, an optimal way might be to distribute the books as follows: - The first student gets books with 10 and 20 pages. - The second student gets the book with 30 pages. - The third student gets books with 40 and 50 pages. Thus, the maximum number of pages a student reads in this case is 60.","solution":"def is_feasible(pages, n, m, curr_min): students_required = 1 curr_sum = 0 for i in range(n): if (pages[i] > curr_min): return False if (curr_sum + pages[i] > curr_min): students_required += 1 curr_sum = pages[i] if students_required > m: return False else: curr_sum += pages[i] return True def find_min_max_pages(pages, n, m): sum_pages = sum(pages) if n < m: return -1 start, end = 0, sum_pages result = float(\'inf\') while start <= end: mid = (start + end) // 2 if is_feasible(pages, n, m, mid): result = min(result, mid) end = mid - 1 else: start = mid + 1 return result"},{"question":"Given an integer N, determine how many terms of the Fibonacci sequence are required such that the sum of the first k terms is greater than or equal to N. The Fibonacci sequence is defined as: ``` F(1) = 1 F(2) = 1 F(n) = F(n-1) + F(n-2) for n > 2 ``` Example 1: Input: N = 10 Output: 5 Explanation: The first 5 terms of the Fibonacci sequence are 1, 1, 2, 3, and 5. The sum of these terms is 12, which is greater than or equal to 10. Example 2: Input: N = 2 Output: 2 Explanation: The first 2 terms of the Fibonacci sequence are 1 and 1. The sum of these terms is 2, which is equal to 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function termsToSumFibonacci(N) which takes an integer N as input and returns the minimum number of terms of the Fibonacci sequence required for their sum to be greater than or equal to N. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^9","solution":"def termsToSumFibonacci(N): Returns the minimum number of terms of the Fibonacci sequence required for their sum to be greater than or equal to N. if N <= 1: return N a, b = 1, 1 sum_fib = a + b terms_count = 2 while sum_fib < N: a, b = b, a + b sum_fib += b terms_count += 1 return terms_count"},{"question":"You are given an array of integers, A, and a number X. Your task is to determine the smallest subarray (contiguous elements) with a sum at least X. If no such subarray exists, return -1. Input Format The first line contains an integer t (the number of test cases). The subsequent t lines each contain: - An integer n (the number of elements in array A). - Followed by n space-separated integers (the elements of array A). - A single integer X (the required sum). Output Format For each test case, print the length of the smallest subarray with a sum at least X. If no such subarray exists, print -1. Constraints 1 leq t leq 10 1 leq n leq 10^5 1 leq A[i] leq 10^4 1 leq X leq 10^9 Note: The sum of the sizes of input arrays in all test cases combined will not exceed 10^6. Sample Input 2 5 1 2 3 4 5 11 5 1 2 3 4 5 15 Sample Output 3 5 Explanation For test case 1: - The given array is [1, 2, 3, 4, 5] and the required sum X is 11. - Possible subarrays with sum at least 11: [3, 4, 5] (sum is 12), [4, 5] (sum is 9), [1, 2, 3, 4] (sum is 10) etc. - The smallest subarray with a sum of at least 11 is [4, 5, 3], which has a length of 3. For test case 2: - The given array is [1, 2, 3, 4, 5] and the required sum X is 15. - The sum of all elements in the subarray [1, 2, 3, 4, 5] gives exactly 15. - Therefore the minimum length of subarray with sum at least 15 is the whole array which has length 5.","solution":"def smallest_subarray_with_sum_at_least_x(arr, x): n = len(arr) min_length = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length <= n else -1 def process_test_cases(t, test_cases): results = [] for case in test_cases: n, arr, x = case result = smallest_subarray_with_sum_at_least_x(arr, x) results.append(result) return results"},{"question":"----- Given two strings `a` and `b`, determine if they are anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. If they are anagrams, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The input consists of two lines: - The first line contains the string `a` (1 ≤ length(a) ≤ 10^5), consisting of lowercase English letters. - The second line contains the string `b` (1 ≤ length(b) ≤ 10^5), consisting of lowercase English letters. -----Output----- Output \\"YES\\" if the strings are anagrams, otherwise output \\"NO\\". -----Examples----- Input listen silent Output YES Input hello billion Output NO -----Note----- In the first sample, strings \\"listen\\" and \\"silent\\" are anagrams as they both contain the same characters with the same frequencies. In the second sample, strings \\"hello\\" and \\"billion\\" are not anagrams as they do not contain the same characters with the same frequencies.","solution":"def are_anagrams(a, b): Determines if the two strings a and b are anagrams of each other. Returns \\"YES\\" if they are anagrams, otherwise returns \\"NO\\". if sorted(a) == sorted(b): return \\"YES\\" else: return \\"NO\\""},{"question":"Design and implement an algorithm that takes a string `s` and returns all possible unique permutations of the characters in the string. The input string may contain duplicate characters. # Example: **Input:** ``` s = \\"aab\\" ``` **Output:** ``` [ \\"aab\\", \\"aba\\", \\"baa\\" ] ``` # Constraints: - The input string `s` will have a length between 1 and 8 characters. - `s` will consist of lowercase English letters.","solution":"from itertools import permutations def unique_permutations(s): Returns all unique permutations of the characters in the string s. return sorted(set([\'\'.join(p) for p in permutations(s)]))"},{"question":"You are given a list of N integers and you have M operations to perform on this list. The operations are of three types: 1. **Addition:** Add a value V to a sublist of the integers. The cost of this operation is V * L, where L is the length of the sublist. 2. **Multiplication:** Multiply a value V to a sublist of the integers. The cost of this operation is V * L, where L is the length of the sublist. 3. **Sublist Reversal:** Reverse a sublist of the integers. The cost of this operation is R. You have K coins, and the total cost of the operations must not exceed K. You can perform each type of operation at most once on any sublist. Your goal is to maximize the sum of the integers in the list. ------ Input ------ - The first line contains three integers N (the number of integers in the list), M (the number of operations you can perform), and K (the number of coins you have). - The second line contains N integers representing the initial list. - The third line contains R (the cost of the reverse sublist operation). Following this: - The next M lines describe the operations, each line is of the form: - `add l r v` specifying an addition operation on the sublist from index l to r (inclusive) with value v. - `mul l r v` specifying a multiplication operation on the sublist from index l to r (inclusive) with value v. - `rev l r` specifying a reverse operation on the sublist from index l to r (inclusive). ------ Output ------ - First, print a single integer L ― the number of operations you want to perform. - Then, print L lines describing these operations in the order in which they should be applied in the format they are described. ------ Constraints ------ - 1 leq N leq 10^{4} - 1 leq M leq 100 - 0 leq K, R leq 10^{5} - -10^3 leq text{list elements}, v leq 10^3 - 1 leq l leq r leq N ------ Example Input ------ 10 3 100 1 2 3 4 5 6 7 8 9 10 10 add 1 5 10 mul 2 6 3 rev 3 8 ------ Example Output ------ 3 add 1 5 10 mul 2 6 3 rev 3 8 ------ Explanation ------ Initially, the list is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. After the first operation (add), the list becomes [11, 12, 13, 14, 15, 6, 7, 8, 9, 10] (cost is 50). After the second operation (mul), the list becomes [11, 36, 39, 42, 45, 18, 7, 8, 9, 10] (cost is 15). After the third operation (rev), the list becomes [11, 36, 18, 45, 42, 39, 7, 8, 9, 10] (cost is 10). The total cost is 75 which is within the allowed 100 coins.","solution":"def maximize_sum(N, M, K, initial_list, R, operations): performed_operations = [] total_cost = 0 for operation in operations: op_type, l, r, *rest = operation.split() l, r = int(l) - 1, int(r) - 1 # Converting to 0-based index L = r - l + 1 if op_type == \'add\': v = int(rest[0]) cost = v * L if total_cost + cost <= K: total_cost += cost performed_operations.append(operation) for i in range(l, r + 1): initial_list[i] += v elif op_type == \'mul\': v = int(rest[0]) cost = v * L if total_cost + cost <= K: total_cost += cost performed_operations.append(operation) for i in range(l, r + 1): initial_list[i] *= v elif op_type == \'rev\': cost = R if total_cost + cost <= K: total_cost += cost performed_operations.append(operation) initial_list[l:r + 1] = initial_list[l:r + 1][::-1] # Stop if we exhaust the allowed total cost if total_cost >= K: break result = (len(performed_operations), performed_operations) return result # Example Input # N = 10 # M = 3 # K = 100 # initial_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # R = 10 # operations = [\\"add 1 5 10\\", \\"mul 2 6 3\\", \\"rev 3 8\\"] # print(maximize_sum(N, M, K, initial_list, R, operations))"},{"question":"A tech company organizes a competitive coding event where participants are required to solve problems within a limited amount of time. Points are awarded based on the number of problems solved and the time taken. In one of the rounds, participants are given a series of problems which they solve one by one. Each problem has a specific time limit within which it must be solved, and solving a problem within the time limit grants a specified number of points. If a problem is not solved within its time limit, the participant receives zero points for that problem. You have been given the initial number of points each participant has, followed by the sequence of problems attempted by the participant and the outcomes of these attempts. Determine the final score of the participant after all attempts. -----Input----- The first line of input contains a positive integer P (1 leq P leq 1000), the initial number of points the participant has. The second line of input contains a positive integer M (1 leq M leq 100), the number of problems attempted by the participant. Each of the following M lines contains two positive integers L_i (1 leq L_i leq 1000) and S_i (0 leq S_i leq 500), where L_i is the time limit for the i-th problem and S_i is the points received if the problem is solved within the time limit, followed by a single character R_i (\\"Y\\" or \\"N\\"), indicating whether the problem was solved within the time limit (\\"Y\\" for yes, \\"N\\" for no). -----Output----- The first and only line of output must contain the final number of points the participant has after all attempts. -----Examples----- Sample Input 1: 100 3 30 100 Y 20 200 N 50 50 Y Sample Output 1: 250 Sample Input 2: 500 4 60 120 Y 45 80 Y 30 150 N 25 50 Y Sample Output 2: 750","solution":"def final_score(P, attempts): total_points = P for L_i, S_i, R_i in attempts: if R_i == \\"Y\\": total_points += S_i return total_points"},{"question":"You are given a string that contains only lowercase English letters. You can perform the following operation on the string: Select any two adjacent characters in the string and replace them with another lowercase English letter that is not present in the original string. For example, if the original string contains the characters \'a\', \'b\', and \'c\', you can use characters from \'d\' to \'z\' to replace any two adjacent characters. You need to determine whether it is possible to reduce the string to a single character by applying the operation a finite number of times. If it is possible, output \\"YES\\", otherwise output \\"NO\\". -----Input----- The input consists of one line containing a string s (1 ≤ |s| ≤ 100 000) — the original string containing only lowercase English letters. -----Output----- Output \\"YES\\" if it is possible to reduce the string to a single character, otherwise output \\"NO\\". -----Example----- Input: abac Output: YES Input: aaaa Output: NO -----Explanation----- In the first example, you can perform the following operations: 1. Replace \'ab\' with \'d\' (any letter not in the original string abac) 2. Replace \'ac\' with \'e\' 3. Replace \'de\' with \'f\' In the second example, you cannot reduce the string to a single character because each operation requires removing two adjacent characters and adding one from the remaining set, ultimately failing to reduce the string size enough.","solution":"def can_reduce_to_one_char(s): Determines if the string can be reduced to a single character by replacing any two adjacent characters at a time with another character not in the original string. Parameters: s (str): The input string containing only lowercase English letters. Returns: str: \\"YES\\" if it is possible to reduce the string to a single character, otherwise \\"NO\\". # If the length of the string is 1, it\'s already a single character if len(s) == 1: return \\"YES\\" # Check if all characters in the string are the same unique_characters = set(s) if len(unique_characters) == 1: return \\"NO\\" # Otherwise, it is always possible to reduce to a single character return \\"YES\\""},{"question":"Task Write a function, `alphabetic_pattern`, which takes an integer `n` (where `1 <= n <= 26`) and returns a string representing a pattern of letters from \'A\' to the `n`-th letter in the alphabet. Each line in the pattern contains all the letters up to the current line\'s respective letter. **Note:** Each letter on a single line should be separated by a space, and there is no trailing whitespace at the end of each line, nor a newline at the end of the pattern. # Examples `alphabetic_pattern(3)` should return the following string: ``` A A B A B C ``` `alphabetic_pattern(5)` should return the following string: ``` A A B A B C A B C D A B C D E ```","solution":"def alphabetic_pattern(n): Returns a pattern of letters from \'A\' to the `n`-th letter in the alphabet. Parameters: n (int): The number of letters to include in the pattern (1 <= n <= 26). Returns: str: A string representing the pattern. import string alphabet = string.ascii_uppercase result = [] for i in range(n): line = \' \'.join(alphabet[:i + 1]) result.append(line) return \'n\'.join(result)"},{"question":"Danny is trying to organize his photo collection stored in a completely unorganized fashion. He wants to rename each photo with a standard naming convention to easily find and sort files. Each photo has a unique timestamp denoted by an integer. Danny decides to sort the timestamps and assign names in a sequential order like \\"photo1\\", \\"photo2\\", and so on based on the sorted order. Write a program to help Danny achieve this task. Input The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of photos. The second line contains n distinct integers t1, t2, ..., tn (-10^9 ≤ ti ≤ 10^9) where each integer ti represents the timestamp of a photo. Output Print n lines, each containing the respective photo name and its old timestamp, in the new sorted order. Each line must be in the format: photoX ti, where X is the 1-based index of the photo in the sorted order and ti is the original timestamp. Examples Input 3 3 1 2 Output photo1 1 photo2 2 photo3 3 Input 5 10 5 20 15 25 Output photo1 5 photo2 10 photo3 15 photo4 20 photo5 25","solution":"def rename_photos(n, timestamps): sorted_timestamps = sorted(timestamps) for i, timestamp in enumerate(sorted_timestamps): print(f\\"photo{i+1} {timestamp}\\") # Example usage (for quick testing, not part of the solution function): # rename_photos(3, [3, 1, 2])"},{"question":"# Task Alice is collecting flowers for a bouquet. Each flower has a specific value denoted by an integer representing its beauty score. Alice can collect adjacent flowers, and their net beauty score is the sum of the individual beauty scores of the flowers she collects. However, some flowers might have negative beauty scores, detracting from the net beauty of the bouquet. Alice wants to maximize the net beauty score of her bouquet by carefully selecting the subarray (possibly empty) which gives the maximum sum. Given an array `flowers` where each element is the beauty score of a flower, write a function that returns the maximum sum of any subarray. # Example For `flowers = [1, -2, 3, 5, -2, 6, -1]`, the output should be `12`. The subarray with the maximum sum is `[3, 5, -2, 6]` with a sum of `12`. For `flowers = [-3, -2, -1, -4]`, the output should be `0`. The subarray with the maximum sum is `[]`, since Alice might choose not to collect any flowers if all have negative beauty scores.","solution":"def max_beauty(flowers): Returns the maximum sum of any subarray in the given list `flowers`. if not flowers: return 0 # Initialize variables max_current = 0 max_global = 0 for flower in flowers: max_current = max(flower, max_current + flower) max_global = max(max_global, max_current) return max_global"},{"question":"You are given a list of N integers and an integer K. Your task is to determine if there are two distinct elements in the list that sum up to K. If such elements exist, print \\"YES\\", otherwise print \\"NO\\". Note: The elements should be identified by their values, not by their positions. # Input The input consists of two lines: - The first line contains the integers N (2 ≤ N ≤ 1000) and K (1 ≤ K ≤ 10^6), separated by a space. - The second line contains N integers separated by spaces, each integer a_i (1 ≤ a_i ≤ 10^6). # Output Print \\"YES\\" if there are two distinct elements in the list that sum up to K, otherwise print \\"NO\\". # Example Input 5 9 2 7 11 15 1 Output YES Input 4 10 1 2 3 4 Output NO","solution":"def two_elements_sum_to_k(N, K, array): seen_elements = set() for number in array: target = K - number if target in seen_elements: return \\"YES\\" seen_elements.add(number) return \\"NO\\""},{"question":"You are tasked with arranging a grand event at your office. To ensure everyone\'s participation, you want to distribute various tasks to your team members such that no one ends up with multiple tasks that take place at the same time. Each task has a starting and ending time. Given a list of tasks defined by their start and end times, find the maximum number of non-overlapping tasks that can be assigned to a single team member to maximize participation in the event. -----Input:----- - The first line will contain a single integer N, the number of tasks. - The next N lines each contain two integers S_i and E_i representing the start and end times of the i-th task. -----Output:----- Print the maximum number of non-overlapping tasks that can be assigned to a single team member in a single line. -----Constraints----- - 1 leq N leq 1000 - 0 leq S_i < E_i leq 10^5 -----Sample Input:----- 6 1 3 2 5 4 7 1 8 5 9 8 10 -----Sample Output:----- 3 -----EXPLANATION:----- The maximum non-overlapping tasks that can be assigned are (1,3), (4,7), and (8,10). Thus, the total count is 3.","solution":"def max_non_overlapping_tasks(N, tasks): Find the maximum number of non-overlapping tasks that can be assigned to a single team member. Args: N : int : Number of tasks tasks : list of tuples : List containing tuples of tasks with start and end times Returns: int : Maximum number of non-overlapping tasks # Sort tasks based on their end time tasks.sort(key=lambda x: x[1]) # Initialize variables to keep track of the count of non-overlapping tasks and the end time of the last selected task count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Given a graph represented as an integer adjacency list, perform the following operations: * addEdge(u, v): Add an undirected edge between node u and node v. If an edge already exists, do nothing. * removeEdge(u, v): Remove the edge between node u and node v. If no such edge exists, do nothing. * findPath(u, v): Print \'YES\' if there is a path between node u and node v. Print \'NO\' otherwise. The nodes in the graph are 0-indexed and the graph is initially empty. Constraints: * 1 leq q leq 200,000 * 0 leq u, v < 100,000 Input: The input is given in the following format. ``` q query_1 query_2 : query_q ``` Each query query_i is given by: * `0 u v` represents addEdge operation * `1 u v` represents removeEdge operation * `2 u v` represents findPath operation findPath operation will not be given for an empty graph. Output: For each `findPath` operation, print `YES` or `NO`. Example: Input ``` 10 0 1 2 0 1 3 0 3 4 2 1 4 1 1 3 2 1 4 0 4 2 2 1 4 2 0 0 1 0 0 ``` Output ``` YES NO YES NO ```","solution":"from collections import defaultdict, deque class Graph: def __init__(self): self.adj_list = defaultdict(set) def add_edge(self, u, v): if v not in self.adj_list[u]: self.adj_list[u].add(v) self.adj_list[v].add(u) def remove_edge(self, u, v): if v in self.adj_list[u]: self.adj_list[u].remove(v) self.adj_list[v].remove(u) if not self.adj_list[u]: del self.adj_list[u] if not self.adj_list[v]: del self.adj_list[v] def find_path(self, u, v): if u not in self.adj_list or v not in self.adj_list: return \\"NO\\" visited = set() queue = deque([u]) while queue: current = queue.popleft() if current == v: return \\"YES\\" if current not in visited: visited.add(current) queue.extend(self.adj_list[current] - visited) return \\"NO\\" def process_queries(queries): graph = Graph() results = [] for query in queries: qtype, u, v = map(int, query.split()) if qtype == 0: graph.add_edge(u, v) elif qtype == 1: graph.remove_edge(u, v) elif qtype == 2: results.append(graph.find_path(u, v)) return results # Example input and running the function queries = [ \\"0 1 2\\", \\"0 1 3\\", \\"0 3 4\\", \\"2 1 4\\", \\"1 1 3\\", \\"2 1 4\\", \\"0 4 2\\", \\"2 1 4\\", \\"2 0 0\\", \\"1 0 0\\" ] results = process_queries(queries) for result in results: print(result)"},{"question":"Binary Nuts Store sells nuts and bolts of different sizes. Each nut can only be matched with one corresponding bolt of the same size. However, the nuts and bolts are all mixed up, and the store needs help to efficiently pair them up. Write a function `match_nuts_and_bolts(nuts, bolts)` that takes two lists as input: - `nuts`: a list of integers representing the sizes of nuts - `bolts`: a list of integers representing the sizes of bolts The function should return a tuple containing two lists: 1. The first list should have the nuts sorted in ascending order. 2. The second list should have the bolts sorted in corresponding order to the sorted nuts. You can assume that the input lists always contain the same number of nuts and bolts, and each nut and bolt has a unique size. Example: ```python nuts = [4, 3, 2, 1] bolts = [2, 4, 3, 1] match_nuts_and_bolts(nuts, bolts) ``` Output: ```python ([1, 2, 3, 4], [1, 2, 3, 4]) ```","solution":"def match_nuts_and_bolts(nuts, bolts): This function takes two lists, nuts and bolts, and matches each nut to the corresponding bolt of the same size. It returns a tuple containing two lists: sorted nuts and sorted bolts in corresponding order. :param nuts: List of integers representing the sizes of nuts. :param bolts: List of integers representing the sizes of bolts. :return: Tuple of two lists: ([sorted_nuts], [sorted_bolts]) nuts.sort() bolts.sort() return (nuts, bolts)"},{"question":"John, a landscaping architect, is designing a garden. The garden will be divided into plots, some of which will have unique types of flowers while others will remain empty. Each plot in the garden can be thought of as a point on a 2D grid, and John has a list of coordinates for plots that will have flowers. To create a visually appealing design, John wants to ensure that no two flower plots have the same type of flower placed in a direct line horizontally, vertically, or diagonally. For simplicity, John labels types of flowers with unique numbers starting from 1. Your task is to assign flower types to the given plots such that no two flower plots in a straight line horizontally, vertically or diagonally share the same flower type. ---- Input ---- - The first line contains an integer N (1 ≤ N ≤ 100), the number of flower plots. - The next N lines each contain two integers x and y (0 ≤ x, y ≤ 1000), representing the coordinates of a flower plot. ---- Output ---- - Output the flower type assigned to each plot in the order they are given in the input. Use integers starting from 1 for flower types. - Each line of the output should contain one integer. ---- Example ---- Input 4 0 0 0 1 1 1 1 0 Output 1 2 3 4 ---- Note ---- In this example, each plot is assigned a different flower type as they all lie on direct lines with each other. The plot (0, 0) gets flower type 1, plot (0, 1) gets flower type 2, plot (1, 1) gets flower type 3, and plot (1, 0) gets flower type 4.","solution":"def assign_flower_types(N, coordinates): Assign flower types to plots such that no two plots have the same type in a straight line horizontally, vertically, or diagonally. Args: N : int, number of plots coordinates : list of tuples, [(x1, y1), (x2, y2), ..., (xn, yn)] representing the plot coordinates Returns: list of ints : flower types for each plot # Each plot is assigned a unique type starting from 1 flower_types = list(range(1, N + 1)) return flower_types"},{"question":"You are given a list of strings, and your goal is to group the strings that are anagrams of each other. Two strings are anagrams if they contain the same characters, only the order of characters can be different. -----Constraints----- - 1 leq length of each word leq 100 - 1 leq number of words leq 10^4 -----Input----- Input is given from Standard Input in the following format: n word_1 word_2 ... word_n The first line contains the number of words, n. The next n lines each contain a single word. -----Output----- Print the groups of anagrams, each group on a new line. The words within each group should be space-separated, and the groups should be printed in lexicographical order of their first word. -----Sample Input----- 6 listen silent enlist rat tar art -----Sample Output----- listen silent enlist art rat tar In this example, the words \\"listen\\", \\"silent\\", and \\"enlist\\" are anagrams of each other, and the words \\"rat\\", \\"tar\\", and \\"art\\" are anagrams of each other. The output groups the anagrams together and lists each group on a new line.","solution":"def group_anagrams(words): from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) result = [\' \'.join(sorted(group)) for group in anagrams.values()] result.sort() return result def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') n = int(data[0]) words = data[1:n + 1] grouped_anagrams = group_anagrams(words) for group in grouped_anagrams: print(group) if __name__ == \\"__main__\\": main()"},{"question":"Given a matrix `M` of size `N x N`, your task is to determine the minimum cost of traveling from the top-left cell (0,0) to the bottom-right cell (N-1,N-1). Each cell in the matrix contains a positive integer, which represents the cost of stepping into that cell. From any cell, you can move either one cell to the right or one cell down. Write a function `minTravelCost(M)` that takes a 2D list `M` representing the matrix and returns the minimum travel cost from the top-left cell to the bottom-right cell. Constraints: - The size of the matrix `N` (1 ≤ N ≤ 100) - Each cell in the matrix `M` contains a positive integer (1 ≤ M[i][j] ≤ 100) # Input The input will be a 2D list `M` of size `N x N`. # Output The output will be a single integer representing the minimum cost to travel from the top-left to the bottom-right cell. # Example Example 1 Input: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: ``` 7 ``` Explanation: The path with the minimum cost is 1→3→1→1→1. Example 2 Input: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` 21 ``` Explanation: The path with the minimum cost is 1→2→3→6→9.","solution":"def minTravelCost(M): Determine the minimum cost to travel from the top-left to the bottom-right cell in a matrix M. Args: - M (list of lists of int): 2D list representing the cost matrix Returns: - int: Minimum travel cost if not M or not M[0]: return 0 N = len(M) # Create a 2D list to store the minimum cost up to each cell dp = [[0] * N for _ in range(N)] # Initialize the starting point dp[0][0] = M[0][0] # Fill the first row (can only move from left to right) for j in range(1, N): dp[0][j] = dp[0][j-1] + M[0][j] # Fill the first column (can only move from top to bottom) for i in range(1, N): dp[i][0] = dp[i-1][0] + M[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + M[i][j] # The bottom-right cell will have the minimum cost return dp[N-1][N-1]"},{"question":"Treasure Hunt A group of archaeologists in a hidden valley discovered coordinates on an ancient map pointing to several potential treasure locations. Each location is marked with an (x, y) coordinate on a 2D grid. To maximize the treasure collected, the archaeologists decide that they should visit the treasure locations in a sequence that minimizes the total travel distance. They start at the origin (0, 0) of the grid. The total travel distance is defined as the sum of the distances traveled between consecutive points in the sequence, including the distance from the origin to the first point visited and the distance from the last point visited back to the origin. The distance between two points (x1, y1) and (x2, y2) is calculated using the Manhattan distance formula |x1 - x2| + |y1 - y2|. Determine the minimum total travel distance to visit all the treasure locations and return to the origin. Input The input consists of at most 10 datasets, each in the following format: n x1 y1 x2 y2 ... xn yn n is the number of treasure locations (1 ≤ n ≤ 12). Each of the following n lines contains two integers xi and yi, representing the coordinates of the ith treasure location. The end of the input is indicated by a line containing a single zero. Output For each dataset, output a single line containing the minimum total travel distance. Sample Input 3 1 1 2 1 2 2 2 1 2 3 4 0 Output for the Sample Input 8 14 Explanation: For the first dataset, the optimal path is: (0,0) → (1,1) → (2,1) → (2,2) → (0,0) Total distance: 2 (0,0 to 1,1) + 1 (1,1 to 2,1) + 1 (2,1 to 2,2) + 4 (2,2 to 0,0) = 8 For the second dataset, the optimal path is: (0,0) → (1,2) → (3,4) → (0,0) Total distance: 3 (0,0 to 1,2) + 4 (1,2 to 3,4) + 7 (3,4 to 0,0) = 14 Test your solution implementation to ensure it properly handles all edge cases and constraints.","solution":"from itertools import permutations def manhattan_distance(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2) def calculate_total_distance(route, coords): total_distance = 0 total_distance += manhattan_distance(0, 0, coords[route[0]][0], coords[route[0]][1]) for i in range(len(route) - 1): total_distance += manhattan_distance(coords[route[i]][0], coords[route[i]][1], coords[route[i + 1]][0], coords[route[i + 1]][1]) total_distance += manhattan_distance(coords[route[-1]][0], coords[route[-1]][1], 0, 0) return total_distance def minimum_total_travel_distance(n, coordinates): min_distance = float(\'inf\') for perm in permutations(range(n)): distance = calculate_total_distance(perm, coordinates) if distance < min_distance: min_distance = distance return min_distance def treasure_hunt(city_data): results = [] i = 0 while i < len(city_data) and city_data[i] != \\"0\\": n = int(city_data[i]) coordinates = [] for j in range(1, n + 1): x, y = map(int, city_data[i + j].split()) coordinates.append((x, y)) results.append(minimum_total_travel_distance(n, coordinates)) i += (n + 1) return results"},{"question":"You are given a list of N integers. A subarray is defined as a contiguous segment of the original list. For a subarray to be considered \\"balanced,\\" the sum of the integers in the subarray must be zero. Your task is to find the length of the longest balanced subarray. -----Input----- - The first line of input contains an integer N, the number of integers in the list. - The second line contains N space-separated integers denoting the elements of the list. -----Output----- Print a single integer, the length of the longest balanced subarray. If no balanced subarray exists, print 0. -----Constraints----- - 1 le N le 2000 - -10^6 le text{elements of the list} le 10^6 -----Example Input----- 5 1 2 -2 3 -1 -----Example Output----- 3 -----Explanation----- The longest balanced subarray is [2, -2, -1], which has a sum of 0 and a length of 3. Another balanced subarray is [2, -2] but it has a length of 2 which is less than 3. Thus, the output is 3.","solution":"def longest_balanced_subarray(arr): Returns the length of the longest balanced subarray (subarray with sum zero). Parameters: arr (list): List of integers. Returns: int: Length of the longest balanced subarray. prefix_sum = 0 prefix_sum_indices = {0: -1} max_length = 0 for i, num in enumerate(arr): prefix_sum += num if prefix_sum in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[prefix_sum]) else: prefix_sum_indices[prefix_sum] = i return max_length"},{"question":"In a city, there are N houses numbered 1 to N, and N-1 bidirectional roads such that there is a way to travel between any pair of houses. The roads have varying lengths, and the length of the road between house i and house j is given in an array L of tuples (i, j, d), with d being the distance between houses i and j. Your task is to determine the maximum and minimum distances between any pair of houses in the city. Suppose the city has 4 houses and the road lengths between them are as follows: (1, 2, 1) (2, 3, 2) (2, 4, 4) In this case, the possible distances to consider are: - Between house 1 and house 2: 1 - Between house 1 and house 3: 3 (1 -> 2 -> 3) - Between house 1 and house 4: 5 (1 -> 2 -> 4) - Between house 2 and house 3: 2 - Between house 2 and house 4: 4 - Between house 3 and house 4: 6 (3 -> 2 -> 4) So, the minimum distance is 1 (between house 1 and house 2) and the maximum distance is 6 (between house 3 and house 4). -----Input format----- - There will be one integer N on the first line, giving the number of houses in the city. - The next N-1 lines contain three integers i, j, and d, denoting a road between houses i and j with a length of d. -----Output format----- - Two integers, the minimum and the maximum distance between any pair of houses, separated by a space. -----Constraints----- 1 ≤ N ≤ 1000 1 ≤ d ≤ 10^3 -----Sample Input----- 4 1 2 1 2 3 2 2 4 4 -----Sample Output----- 1 6","solution":"def find_min_max_distances(N, roads): from collections import deque def bfs(start_node): distances = [-1] * (N + 1) queue = deque([start_node]) distances[start_node] = 0 while queue: current = queue.popleft() current_distance = distances[current] for neighbor, weight in adj_list[current]: if distances[neighbor] == -1: distances[neighbor] = current_distance + weight queue.append(neighbor) return distances # Construct the adjacency list adj_list = [[] for _ in range(N + 1)] for i, j, d in roads: adj_list[i].append((j, d)) adj_list[j].append((i, d)) # Find furthest node from an arbitrary start (node 1) distances_from_start = bfs(1) furthest_node = distances_from_start.index(max(distances_from_start)) # Perform BFS from furthest_node to find maximum distance final_distances = bfs(furthest_node) max_distance = max(final_distances) # Minimum distance will be directly from the roads given (smallest d) min_distance = min(d for _, _, d in roads) return min_distance, max_distance"},{"question":"You are given an array arr of distinct integers and two integers k1 and k2. Your task is to find the sum of all elements between the k1-th smallest element and the k2-th smallest element in the array. The k1-th and k2-th elements themselves should not be included in the sum. Example 1: Input: arr = [1, 3, 5, 11, 12, 15], k1 = 3, k2 = 6 Output: 23 Explanation: The 3rd smallest element in the array is 5 and the 6th smallest element is 15. Therefore, the sum of all elements between them is 11 + 12 = 23. Example 2: Input: arr = [7, 10, 4, 3, 20, 15], k1 = 2, k2 = 4 Output: 7 Explanation: The 2nd smallest element in the array is 4 and the 4th smallest element is 10. Therefore, the sum of all elements between them is 7. Your Task: You don\'t need to read or print anything. Your task is to complete the function sumBetweenElements() which takes the array arr, integers k1 and k2 as input and returns the sum of all elements between the k1-th and k2-th smallest elements in the array. Expected Time Complexity: O(n log n) Expected Space Complexity: O(1) Constraints: 1 <= |arr| <= 10^4 1 <= arr[i] <= 10^6 1 <= k1, k2 <= |arr|","solution":"def sumBetweenElements(arr, k1, k2): Returns the sum of all elements between the k1-th smallest element and the k2-th smallest element in the array. The k1-th and k2-th elements themselves are not included. # Ensure k1 is less than k2 if k1 > k2: k1, k2 = k2, k1 # Sort the array arr.sort() # Calculate the sum of elements between k1-th and k2-th smallest elements sum_between = sum(arr[k1:k2-1]) return sum_between"},{"question":"Task You need to implement a function `isAnagram` which checks if two given strings are anagrams of each other. An anagram of a string is another string that contains the same characters, only the order of characters can be different. **Note: You cannot use the built-in `sorted` function or any sorting-related method in your implementation.** # Input - Both inputs will be strings containing only lowercase alphabets # Output - Boolean value: `true` if the two strings are anagrams, `false` otherwise Examples - `isAnagram(\'listen\', \'silent\')` should return `true` - `isAnagram(\'hello\', \'billion\')` should return `false` - `isAnagram(\'aabbcc\', \'abcabc\')` should return `true` - `isAnagram(\'rat\', \'car\')` should return `false`","solution":"def isAnagram(str1, str2): Checks if two strings are anagrams of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. if len(str1) != len(str2): return False count = {} for char in str1: if char in count: count[char] += 1 else: count[char] = 1 for char in str2: if char in count: count[char] -= 1 else: return False return all(value == 0 for value in count.values())"},{"question":"You have been tasked with writing a program that processes the daily temperatures recorded for a week. Each day, the temperature is measured four times: morning, noon, evening, and night. The objective is to determine the average temperature for each day based on these four measurements. input The input is given in the following format: t1_morning t1_noon t1_evening t1_night t2_morning t2_noon t2_evening t2_night ... t7_morning t7_noon t7_evening t7_night The input consists of 7 lines, each containing four floating-point numbers representing the temperatures recorded at different times of the day. output Output the average temperature for each day on a new line. Example Input 15.5 20.3 18.7 12.4 16.8 21.1 19.4 13.6 14.2 19.5 17.8 11.1 13.5 18.6 16.9 10.2 17.1 22.3 20.7 14.5 18.4 23.5 21.6 15.9 19.9 24.8 22.7 17.1 Output 16.725 17.725 15.65 14.8 18.65 19.85 21.125","solution":"def average_daily_temperatures(temperatures): Given a list of lists where each sublist contains four temperatures recorded at different times of the day, this function calculates the average temperature for each day and returns a list of these averages. :param temperatures: A list of lists with each sublist containing four float values. :return: A list of float values representing the average temperatures. averages = [] for daily_temps in temperatures: daily_average = sum(daily_temps) / 4 averages.append(round(daily_average, 3)) return averages"},{"question":"You are given a network of cities connected with bidirectional roads. Each road has a certain length. The network is represented as a complete graph with N cities, where each road between cities i and j has a length of L_{i,j}. Your task is to find the minimal possible total length of roads that connects all cities, forming a Minimum Spanning Tree (MST). ------ Input ------ The first line contains an integer T, the number of test cases. The first line of each test case contains an integer N, the number of cities. Each of the next N lines contains N integers, where the j-th integer on the i-th line is L_{i,j}, the length of the road between city i and city j. ------ Output ------ For each test case, print the minimal possible total length of roads that connects all cities. ------ Constraints ------ 1 ≤ T ≤ 5 2 ≤ N ≤ 50 1 ≤ L_{i,j} ≤ 1000 ------ Sample Input 1 ------ 1 3 0 1 3 1 0 2 3 2 0 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ The cities and their connections can be visualized as a graph: ``` 1 (1) - (2) | 3 2 | (3) ``` The minimal spanning tree would connect city 1 to city 2 with a road of length 1 and city 2 to city 3 with a road of length 2, resulting in a total minimal road length of 1 + 2 = 3.","solution":"import heapq def minimal_spanning_tree(N, lengths): # Using Prim\'s algorithm to find the minimum spanning tree visited = [False] * N min_heap = [(0, 0)] # (cost, node) total_cost = 0 while min_heap: cost, u = heapq.heappop(min_heap) if not visited[u]: visited[u] = True total_cost += cost for v in range(N): if not visited[v] and lengths[u][v] != 0: heapq.heappush(min_heap, (lengths[u][v], v)) return total_cost def solve(test_cases): results = [] for case in test_cases: N = case[0] lengths = case[1] result = minimal_spanning_tree(N, lengths) results.append(result) return results"},{"question":"**Thea is participating in a programming competition. In one of the problems, she has to play a guessing game with numbers. The problem is as follows:** Thea has to guess the number chosen by the judge. The chosen number is always a positive integer less than or equal to `n`. To make a guess, Thea proposes any number from `1` to `n`, and the judge responds with an answer \'Higher\', \'Lower\', or \'Correct\'. The aim is to guess the correct number using the least number of guesses. However, the problem constrains her from using predefined guessing algorithms explicitly (such as binary search or linear search). Design an algorithm for Thea to guess the correct number with the constraint in mind and then implement it. **Input:** - A single integer `n` (1 ≤ n ≤ 10^3), the upper bound of the range within which the judge selects a number. - A function `judge_response(guess)` which returns the response based on Thea’s guess. Assume this function is pre-defined and available for use. The function will return \'Higher\' if the number is higher than the guess, \'Lower\' if the number is lower than the guess, and \'Correct\' if the guess is right. **Output:** - The algorithm should print the chosen number once the correct guess is made. - The algorithm should minimize the number of guesses. **Example:** Suppose n = 10 and the chosen number is 6. Below is an example sequence of function calls and their outputs (for illustration purposes): ``` judge_response(5) # Output: \'Higher\' judge_response(7) # Output: \'Lower\' judge_response(6) # Output: \'Correct\' ``` **Sample Implementation:** ```python def guess_number(n): # This is where you need to write your guessing algorithm. # You only have access to the judge_response() function to gather hints. low = 1 high = n while low <= high: mid = (low + high) // 2 response = judge_response(mid) if response == \'Correct\': print(mid) return elif response == \'Higher\': low = mid + 1 elif response == \'Lower\': high = mid - 1 # Example function to simulate the judge\'s response (Just for testing purposes) chosen_number = 6 # Pretend this is the number chosen by the judge def judge_response(guess): if guess < chosen_number: return \'Higher\' elif guess > chosen_number: return \'Lower\' else: return \'Correct\' # Test the guess_number function guess_number(10) ``` **Note:** The sample implementation given is just an example illustration. The actual guessing algorithm should be designed according to the constraints and should minimize the number of guesses.","solution":"def guess_number(n, judge_response): This function attempts to guess the correct number between 1 and n using the judge_response function to determine if the guess should be higher, lower, or is correct. Arguments: n : int : the upper bound of the range within which the judge selects a number. judge_response : function : a function that takes an integer guess and returns \'Higher\', \'Lower\', or \'Correct\'. Returns: The correct guessed number is printed and returned. def recursive_guess(low, high): mid = (low + high) // 2 response = judge_response(mid) if response == \'Correct\': print(mid) return mid elif response == \'Higher\': return recursive_guess(mid + 1, high) elif response == \'Lower\': return recursive_guess(low, mid - 1) return recursive_guess(1, n)"},{"question":"You are given a list of projects along with a list of dependencies. Each dependency is a pair of projects where the first project depends on the completion of the second project. Determine the order in which the projects should be completed. If there is no valid order, return an empty list. Example 1: Input: 4, [[1,0],[2,0],[3,1],[3,2]] Output: [0,2,1,3] Explanation: There are a total of 4 projects to complete. To complete project 1 you need to finish project 0. To complete project 2 you need to finish project 0. To complete project 3 you need to complete projects 1 and 2. Therefore, the order of project completion can be [0,2,1,3] or [0,1,2,3]. Example 2: Input: 2, [[1,0],[0,1]] Output: [] Explanation: There are a total of 2 projects to complete. To complete project 1 you need to finish project 0, and to complete project 0 you need to finish project 1. It is not possible to complete all projects, thus the output is an empty list. Note: - The input dependencies is a graph represented by a list of edges, not adjacency matrices. - You may assume that there are no duplicate edges in the input dependencies.","solution":"from collections import defaultdict, deque def find_project_order(num_projects, dependencies): Determines the order of completion of projects given their dependencies using a topological sort approach. # Create an adjacency list and indegree count adjacency_list = defaultdict(list) indegree = [0] * num_projects # Build the graph for dependent, dependency in dependencies: adjacency_list[dependency].append(dependent) indegree[dependent] += 1 # Queue for nodes with no incoming edges queue = deque([i for i in range(num_projects) if indegree[i] == 0]) order = [] while queue: current = queue.popleft() order.append(current) # Decrease the indegree of each adjacent node for neighbor in adjacency_list[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If the order contains all projects, return it; otherwise, return an empty list if len(order) == num_projects: return order else: return []"},{"question":"Rohan is participating in an endurance race where he needs to complete several laps on a circular track. The track has a specific length, and Rohan runs at a constant speed. He wants to know the total time required to complete different numbers of laps for the given track length and his speed. Input First line of input contains an integer T, denoting the number of test cases. Each test case contains three space-separated integers: N, L, and S. - N is the number of laps. - L is the length of the track in meters. - S is Rohan\'s running speed in meters per minute. Output For each test case, output an integer representing the total time in minutes required to complete the laps, truncated to the nearest whole number. SAMPLE INPUT 3 5 400 80 10 500 100 4 250 50 SAMPLE OUTPUT 25 50 20","solution":"import math def total_time_required(t, laps_data): results = [] for data in laps_data: n, l, s = data total_distance = n * l time_required = total_distance / s results.append(math.floor(time_required)) return results"},{"question":"You are given an array of integers, and you need to divide it into exactly two non-empty subsequences such that the difference between the sum of the elements in the two subsequences is minimized. -----Input:----- - The first line of the input contains a single integer N denoting the number of integers in the array. - The second line contains N space-separated integers a_1, a_2, ..., a_N representing the elements of the array. -----Output:----- - Output a single integer which is the minimum possible difference between the sums of the two subsequences. -----Constraints----- - 2 leq N leq 100 - 1 leq a[i] leq 1000 -----Sample Input:----- 4 1 2 3 4 -----Sample Output:----- 0 -----Explanation:----- You can divide the array into subsequences {1, 4} and {2, 3} where the sum of both subsequences is 5. Hence the difference is 0 which is the minimum possible.","solution":"def min_diff_subsequences(N, arr): Finds the minimum possible difference between the sums of two subsequences after dividing the array into exactly two non-empty subsequences. Parameters: N (int): Number of integers in the array. arr (list of int): List of integers in the array. Returns: int: Minimum possible difference between the sums of the two subsequences. total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum // 2 + 1): dp[i][j] = dp[i-1][j] if j >= arr[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j-arr[i-1]] for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j return total_sum"},{"question":"In a bakery, different types of pies are baked. The bakery records the type of pie and the number of pies baked each day. You are tasked with determining which type of pie was baked the most on any given single day. Create a program that reads the list of pie types and the number of pies baked each type on a given day, then outputs the type of pie baked the most and the number of pies baked. If there are multiple types of pies with the same highest number of pies baked, output the one that comes first in the input list. input The input is given in the following format: t name1 count1 name2 count2 :: namet countt t (1 ≤ t ≤ 20) represents the number of different types of pies. namei represents the name of the type of pie, which is a string of up to 50 characters. counti (0 ≤ counti ≤ 100) represents the number of pies baked of type namei. output Output the name of the type of pie baked the most and the number of pies baked on one line separated by a space. Example Input 4 Apple 50 Cherry 70 Blueberry 50 Pumpkin 70 Output Cherry 70","solution":"def most_baked_pie(pie_data): Determines the type of pie baked the most on a given day. Parameters: pie_data (list of tuples): List where each tuple contains the name of the pie type and the number of pies baked. Returns: A string in the format \\"name count\\" where name is the type of pie baked the most and count is the number of pies baked. max_pies = 0 result = \\"\\" for name, count in pie_data: if count > max_pies: max_pies = count result = f\\"{name} {count}\\" return result # Example usage: # input_data = [(\\"Apple\\", 50), (\\"Cherry\\", 70), (\\"Blueberry\\", 50), (\\"Pumpkin\\", 70)] # print(most_baked_pie(input_data)) # Output: \\"Cherry 70\\""},{"question":"You are given a grid of size `n x m`, and each cell contains an integer representing the height of a terrain at that cell. We need to find a path from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) such that the maximum absolute difference in heights between two consecutive cells along the path is minimized. Your task is to implement an algorithm that finds this path and returns the minimized maximum absolute difference. ----Input---- The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) – the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` integers, representing the heights of the terrain (1 ≤ height ≤ 1,000,000). ----Output---- Print a single integer – the minimized maximum absolute difference in heights between two consecutive cells in the path from the top-left corner to the bottom-right corner. ----Example---- Input 3 3 1 2 2 3 8 2 5 3 5 Output 2 Input 2 2 1 2 2 3 Output 1 ----Note---- In the first example, one possible path is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) with height differences of [2, 2, 1, 2]. The maximum absolute difference along this path is 2, which is the minimized maximum possible difference for any path. In the second example, one possible path is (0,0) -> (0,1) -> (1,1) with height differences of [1, 1]. The maximum absolute difference along this path is 1, which is the minimized maximum possible difference for any path.","solution":"import heapq def minimized_max_absolute_diff(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m directions = [(0,1), (1,0), (0,-1), (-1,0)] max_diff = [[float(\'inf\')] * m for _ in range(n)] max_diff[0][0] = 0 min_heap = [(0, 0, 0)] # (difference, x, y) while min_heap: current_diff, x, y = heapq.heappop(min_heap) if x == n - 1 and y == m - 1: return current_diff for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): diff = abs(grid[nx][ny] - grid[x][y]) new_diff = max(current_diff, diff) if new_diff < max_diff[nx][ny]: max_diff[nx][ny] = new_diff heapq.heappush(min_heap, (new_diff, nx, ny)) return -1 # In case there is no path (though the given problem constraints imply there is always a path) # Example usage: # grid = [ # [1, 2, 2], # [3, 8, 2], # [5, 3, 5] # ] # print(minimized_max_absolute_diff(3, 3, grid)) # Output: 2"},{"question":"Linked List Partition You are given a singly linked list and a value x. Partition the linked list around the value x, such that all nodes less than x come before nodes greater than or equal to x. The relative order of nodes in each of the two partitions should remain unchanged. Your task is to write a function that performs this partitioning of the linked list. Input The input consists of a single test case of the following format: n val_1 val_2 ... val_n x The first line contains an integer n (1 leq n leq 10^5), the number of nodes in the linked list. Each of the next n lines contains an integer val_i (-10^6 leq val_i leq 10^6), the value of the i-th node in the linked list. The last line contains an integer x (-10^6 leq x leq 10^6), the partition value. Output Output the values of the nodes in the partitioned linked list, each value on a new line. Sample Input 1 6 1 4 3 2 5 2 3 Sample Output 1 1 2 2 4 3 5 Explanation The given linked list is 1 -> 4 -> 3 -> 2 -> 5 -> 2 and the partition value is 3. Nodes with values less than 3 are 1, 2, and 2, while nodes with values greater than or equal to 3 are 4, 3, and 5. The partitioned linked list will be: 1 -> 2 -> 2 -> 4 -> 3 -> 5.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def partition(head: ListNode, x: int) -> ListNode: lesser_head = ListNode(0) greater_head = ListNode(0) lesser = lesser_head greater = greater_head while head: if head.val < x: lesser.next = head lesser = lesser.next else: greater.next = head greater = greater.next head = head.next greater.next = None lesser.next = greater_head.next return lesser_head.next # Function to create a linked list from list of values def create_linked_list(values): dummy = ListNode() current = dummy for value in values: current.next = ListNode(value) current = current.next return dummy.next # Function to convert a linked list to a list of values def linked_list_to_list(head): values = [] while head: values.append(head.val) head = head.next return values"},{"question":"You are given a list of integers and a target integer. Your task is to find all unique pairs of integers in the list that sum up to the target value. Return the list of pairs as tuples. If no pairs are found, return an empty list. Input Format The first line contains an integer n, the number of integers in the list. The second line contains n space-separated integers. The third line contains the target integer. Constraints 2 leq n leq 100 Output Format Print the list of unique pairs as tuples in no particular order. If no pairs are found, return an empty list. Sample Input 4 1 2 3 4 5 Sample Output [(1, 4), (2, 3)] Explanation The pairs (1, 4) and (2, 3) both sum up to the target value of 5. Note that (4, 1) and (3, 2) are considered the same as (1, 4) and (2, 3), respectively.","solution":"def find_pairs(nums, target): Finds all unique pairs of integers in the list that sum up to the target value. seen = set() output = set() for num in nums: complement = target - num if complement in seen: output.add((min(num, complement), max(num, complement))) seen.add(num) return list(output)"},{"question":"Given an integer h representing the height of a binary tree, your task is to calculate the total number of nodes in a complete binary tree of height h. In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as left as possible. A complete binary tree of height h has: - 1 level when h = 0, with 1 node, - 2 levels when h = 1, with 3 nodes, - 3 levels when h = 2, with 7 nodes, - and so on. The pattern follows that the number of nodes in a complete binary tree of height h is 2^{(h + 1)} - 1. -----Input----- The input contains a single integer h (0 leq h leq 20) — the height of the binary tree. -----Output----- Print a single integer — the number of nodes in a complete binary tree of height h. -----Examples----- Input 0 Output 1 Input 3 Output 15 Input 5 Output 63","solution":"def nodes_in_complete_binary_tree(h): Returns the number of nodes in a complete binary tree of height h. return 2 ** (h + 1) - 1"},{"question":"Eve is a skilled botanist who loves exploring the fascinating world of plants. She recently came across an intriguing problem involving the beautiful gardens she studies. She decided to ask you for help in solving it. Can you help Eve with her problem? You are given an integer N representing the total number of different plant species in a garden, and an integer K denoting the number of distinct plant species Eve wants to select to form a unique combination. Each plant species is denoted by a distinct integer from 1 to N. A combination of selected plants is considered unique if and only if the set of selected species is different from other sets (order does not matter). Your task is to determine the number of unique combinations of K distinct plant species that can be chosen from N species. Since this number can be very large, compute it modulo 10^{9} + 7. ------ Input ------ The first line of the input contains two space-separated integers N and K. ------ Output ------ Output a single integer ― the number of unique combinations of K distinct plant species modulo 10^{9} + 7. ------ Constraints ------ 1 ≤ N ≤ 10^{6} 1 ≤ K ≤ N ----- Sample Input 1 ------ 5 3 ----- Sample Output 1 ------ 10 ----- Sample Input 2 ------ 6 2 ----- Sample Output 2 ------ 15","solution":"def modinv(a, p): Returns the modular inverse of a under modulo p using Fermat\'s little theorem. return pow(a, p - 2, p) def nCr_mod_p(n, r, p): Returns C(n, r) % p using Fermat\'s little theorem for the modulus. if r > n: return 0 if r == 0 or n == r: return 1 numerator = 1 denominator = 1 for i in range(r): numerator = numerator * (n - i) % p denominator = denominator * (i + 1) % p return numerator * modinv(denominator, p) % p def unique_combinations(n, k): Returns the number of unique combinations of k distinct plant species from n species modulo 1000000007. MOD = 1000000007 return nCr_mod_p(n, k, MOD)"},{"question":"Problem: You are given a grid of size N x M consisting of \'.\' and \'#\' where \'.\' denotes an empty cell and \'#\' denotes an obstacle. Your task is to find the largest square sub-grid that contains no obstacles. Input: The first line of the input contains two integers N and M (1 ≤ N, M ≤ 1000), where N denotes the number of rows and M denotes the number of columns of the grid. The next N lines each contain M characters (either \'.\' or \'#\') representing the grid. Output: Output the size of the largest square sub-grid that contains only \'.\' (empty cells). Constraints: 1 ≤ N, M ≤ 1000 SAMPLE INPUT 5 6 ...... .... ....#. .#..#. .....# SAMPLE OUTPUT 2 Explanation The largest square sub-grid that contains no obstacles is of size 2x2. One of the possible positions of this square is: .. .. within the larger grid.","solution":"def largest_square_subgrid(N, M, grid): Returns the size of the largest square sub-grid that contains no obstacles. if N == 0 or M == 0: return 0 dp = [[0] * M for _ in range(N)] max_side = 0 for i in range(N): for j in range(M): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 max_side = max(max_side, dp[i][j]) return max_side def parse_input(input_data): Parse the input data into necessary components for the function. lines = input_data.strip().split(\'n\') N, M = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return N, M, grid"},{"question":"The town of Quinton has a set of M gardens, each with a unique type of flower. Each garden can be represented as a number from 1 to M. The town’s gardeners have planted flowers in a row, creating a long sequence of flowers from these M gardens. However, some flowers have unfortunately died, leaving blank spaces in the row. You are tasked with filling in these blank spaces such that the resultant sequence of flowers is lexicographically smallest. A lexicographically smaller sequence is one that would appear earlier in a dictionary if both sequences were of the same length and character set. Each character (representing a flower) in the initial sequence can either be a positive number (indicating a flower from the respective garden) or a question mark `?` (indicating a blank space). Your goal is to replace each `?` in the given sequence with a number representing a flower from one of the M gardens in such a way that the final sequence is lexicographically smallest. ----Input---- The first line of input consists of an integer M (1 leq M leq 1000): the number of different gardens in Quinton. The second line consists of a string S (of length 1 leq |S| leq 100000) which may contain integers (from 1 to M) and question marks \'?\'. ----Output---- Print the lexicographically smallest sequence by replacing all the question marks with the appropriate garden numbers. ----Examples---- Sample Input: 3 1?2a?1 Sample Output: 112a21 Sample Input: 2 ?1? Sample Output: 111","solution":"def fill_garden_sequence(M, S): Returns the lexicographically smallest sequence by replacing all the question marks in S with the appropriate garden numbers. Parameters: M (int): The number of different gardens. S (str): The sequence with numbers and \'?\' indicating the blank spaces. Returns: str: Lexicographically smallest sequence. smallest_char = \'1\' result = [] for ch in S: if ch == \'?\': result.append(smallest_char) else: result.append(ch) return \'\'.join(result)"},{"question":"You are given a list of N tasks, where for each task you have a duration, a start time, and a finish time. You need to determine the maximum number of tasks that can be scheduled such that no two tasks overlap. The tasks are represented by an array of intervals intervals where each interval i is denoted by [start_i, finish_i]. Optimize the algorithm for larger values of N. Example 1: Input: N = 3 intervals = [[1, 3], [2, 4], [3, 5]] Output: 2 Explanation: The maximum number of non-overlapping tasks you can schedule is two. The tasks can be [1, 3] and [3, 5]. Example 2: Input: N = 4 intervals = [[1, 2], [2, 3], [3, 4], [1, 3]] Output: 3 Explanation: Here we can schedule the tasks [1, 2], [2, 3], [3, 4]. Your Task: You do not need to read input or print anything. Your task is to complete the function maxNonOverlappingTasks() which takes an integer N and an array intervals as input and returns the maximum number of non-overlapping tasks. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ start_i < finish_i ≤ 10^6","solution":"def maxNonOverlappingTasks(N, intervals): # Sort intervals based on their finish time intervals.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping tasks count = 0 # Initialize the end time of the last selected task end_time = 0 for interval in intervals: # If the start time of the current task is greater or equal to the # end time of the last selected task, then select this task if interval[0] >= end_time: count += 1 end_time = interval[1] return count"},{"question":"Create a function that generates the next sequence in the \\"look-and-say\\" sequence. The \\"look-and-say\\" sequence is a series of integers where each term is constructed by reading the previous term. To generate the nth term, count the number of digits in groups of the same digit and write down the counts followed by the digit itself. For example, the sequence starting from \\"1\\" would be: \\"1\\", \\"11\\", \\"21\\", \\"1211\\", \\"111221\\", etc. ``` lookAndSay(n) lookAndSay(1) Output: \\"1\\" lookAndSay(2) Output: \\"11\\" lookAndSay(3) Output: \\"21\\" lookAndSay(4) Output: \\"1211\\" lookAndSay(5) Output: \\"111221\\" ``` The parameter `n` is an integer in the range [1, 20]. The function should return the nth term in the look-and-say sequence as a string.","solution":"def lookAndSay(n): Generate the nth term in the \\"look-and-say\\" sequence. Parameters: n (int): The position of the term in the sequence to generate. Returns: str: The nth term in the look-and-say sequence. if n == 1: return \\"1\\" def next_term(term): Generate the next term in the look-and-say sequence. Parameters: term (str): The current term in the sequence. Returns: str: The next term in the sequence. result = [] i = 0 while i < len(term): count = 1 while i + 1 < len(term) and term[i] == term[i + 1]: i += 1 count += 1 result.append(str(count) + term[i]) i += 1 return \'\'.join(result) current_term = \\"1\\" for _ in range(1, n): current_term = next_term(current_term) return current_term"},{"question":"Story > As a keen observer of natural phenomena, you want to model the height of ocean waves given by a buoy over time. You\'re given a CSV file containing the height measurements (in meters) recorded at specific intervals (in seconds). Your task is to find the maximum wave height and the average wave height over the recorded time period. Your Task Write a function that takes a `csv_file_path` and returns a tuple with two values: the maximum wave height and the average wave height. Implementation The CSV file format is as follows: - The file has a header row that should be ignored. - Each subsequent row contains two values: the time (in seconds) and the corresponding wave height (in meters). Example file content: ``` Time, WaveHeight 0, 1.2 5, 2.5 10, 1.8 15, 2.0 20, 3.1 ``` # Function Signature ```python def analyze_wave_heights(csv_file_path: str) -> tuple: pass ``` # Example ```python # Assuming the CSV content is the same as the example given above result = analyze_wave_heights(\\"wave_heights.csv\\") print(result) # Output: (3.1, 2.12) ``` # Notes - The heights are positive real numbers measured in meters. - Data representation and rounding in the final tuple should follow standard floating-point arithmetic rules in Python. Ensure the average is rounded to 2 decimal places. - Handle file reading exceptions gracefully.","solution":"import csv def analyze_wave_heights(csv_file_path: str) -> tuple: Analyzes the wave heights from a given CSV file. Parameters: csv_file_path (str): The path to the CSV file containing wave heights. Returns: tuple: A tuple containing the maximum wave height and the average wave height. heights = [] try: with open(csv_file_path, mode=\'r\') as file: csv_reader = csv.reader(file) next(csv_reader) # Skip header for row in csv_reader: heights.append(float(row[1])) except Exception as e: raise Exception(f\\"An error occurred while reading the file: {e}\\") max_height = max(heights) if heights else 0 avg_height = round(sum(heights) / len(heights), 2) if heights else 0 return (max_height, avg_height)"},{"question":"A book publisher wants to automate the process of checking the consistency of page numbers in their books. Each book must have pages numbered consecutively starting from 1 up to n. However, due to a printing error, some of the books might have missing page numbers. Your task is to detect which page numbers are missing in the book, if any. Given the total number of pages that should be in the book (n) and a list of page numbers actually present, identify the missing page numbers. Input: - First line contains an integer t, the number of test cases. - Each test case consists of two lines: - The first line contains an integer n, the total number of pages that should be in the book. - The second line contains a space-separated list of integers representing the page numbers that are present in the book. Output: - For each test case, output the sorted list of missing page numbers. If no pages are missing, print \\"No missing pages\\". Example: Input: 3 5 1 2 3 5 7 1 2 3 4 5 6 7 4 2 3 4 Output: 4 No missing pages 1 Explanation: - In the first test case, the book should have 5 pages (1 through 5), but page 4 is missing. - In the second test case, all pages from 1 to 7 are present. - In the third test case, the book should have 4 pages (1 through 4), but page 1 is missing.","solution":"def find_missing_pages(t, test_cases): This function detects which page numbers are missing in the book for each test case. Parameters: t (int): The number of test cases. test_cases (list): List of tuples, each containing two elements: - an integer n, the total number of pages that should be in the book. - a list of integers representing the page numbers that are present in the book. Returns: list: A list of results where each result is either a list of missing page numbers or the string \\"No missing pages\\". results = [] for n, present_pages in test_cases: missing_pages = sorted(set(range(1, n + 1)) - set(present_pages)) if missing_pages: results.append(missing_pages) else: results.append(\\"No missing pages\\") return results # Example usage: # t = 3 # test_cases = [ # (5, [1, 2, 3, 5]), # (7, [1, 2, 3, 4, 5, 6, 7]), # (4, [2, 3, 4]) # ] # print(find_missing_pages(t, test_cases)) # Output: [[4], \\"No missing pages\\", [1]]"},{"question":"You are provided with a grid of size 10x10. Some cells of the grid are filled with an integer value ranging from 1 to 9, while the rest of the cells contain a zero. The objective is to identify and print the number of distinct vertical or horizontal lines of filled cells containing the same integer. Input The input consists of multiple datasets. Each dataset consists of 10 strings, each containing 10 characters, representing the grid. Each character is either a digit from \'1\' to \'9\' or \'0\'. The datasets are separated by a single blank line. The number of datasets does not exceed 50. Output For each dataset, output the number of distinct vertical or horizontal lines of filled cells containing the same integer on one line. Example Input 0000000000 0000011100 0000011100 0000011100 0000000000 0000000000 0000000000 0000000000 0000000000 0000000000 0000000000 0000000000 0000000000 0000000000 0005550000 0005550000 0005550000 0004444000 0004444000 0000000000 Output 1 2 Explanation For the first dataset, there is a single vertical line consisting of three consecutive cells filled with the integer \\"1\\". Hence, the output is 1. The second dataset has two distinct lines: one vertical line of \\"5\\"s and one horizontal line of \\"4\\"s. Therefore, the output is 2.","solution":"def count_distinct_lines(grid): Count distinct vertical or horizontal lines of filled cells containing the same integer. Parameters: grid (list of strings): A 10x10 grid represented as list of strings. Returns: int: Number of distinct lines. rows = [\'\'] * 10 cols = [\'\'] * 10 for i in range(10): rows[i] = \'\'.join(grid[i]) for j in range(10): cols[j] += grid[i][j] distinct_lines = set() for line in rows + cols: current_char, count, start = None, 0, False for char in line: if char == \'0\': if start: distinct_lines.add((current_char, i)) current_char, count, start = None, 0, False else: if current_char == char: count += 1 else: if start: distinct_lines.add((current_char, i)) current_char, count, start = char, 1, True if start: distinct_lines.add((current_char, i)) return len(distinct_lines) def process_multiple_grids(grids): results = [] for grid in grids: results.append(count_distinct_lines(grid)) return results"},{"question":"Bob enjoys creating geometric patterns. He wants to generate a special square matrix of size \'n\' with a specific set of rules to fill its elements. Each element in the matrix is represented as `M[i][j]` where `i` is the row index and `j` is the column index, both 0-indexed. The matrix should be filled with integers as follows: - If `(i + j)` is even, then `M[i][j]` should be the product of `(i + 1)` and `(j + 1)`. - If `(i + j)` is odd, then `M[i][j]` should be the sum of `(i + 1)` and `(j + 1)`. For example, for `n = 3`, the matrix would look like this: ``` 1 3 3 3 4 10 3 10 9 ``` In this example: - `M[0][0]` = (1 * 1) = 1 (even index sum) - `M[0][1]` = (1 + 2) = 3 (odd index sum) - `M[0][2]` = (1 * 3) = 3 (even index sum) - `M[1][0]` = (2 + 1) = 3 (odd index sum) - `M[1][1]` = (2 * 2) = 4 (even index sum) - `M[1][2]` = (2 + 3) = 5 (odd index sum) - `M[2][0]` = (3 * 1) = 3 (even index sum) - `M[2][1]` = (3 + 2) = 5 (odd index sum) - `M[2][2]` = (3 * 3) = 9 (even index sum) Write a function to generate this special matrix for a given input integer \'n\'. -----Input:----- - The input consists of a single integer \'n\' which denotes the size of the matrix. -----Output:----- - Output the special matrix as described above in \'n\' lines with each line containing \'n\' space-separated integers. -----Constraints----- - 1 leq n leq 50 -----Sample Input:----- 3 -----Sample Output:----- 1 3 3 3 4 10 3 5 9","solution":"def generate_special_matrix(n): Generates a special n x n matrix based on specific rules. Parameters: n (int): the size of the matrix. Returns: list of list of int: the generated matrix. matrix = [] for i in range(n): row = [] for j in range(n): if (i + j) % 2 == 0: row.append((i + 1) * (j + 1)) else: row.append((i + 1) + (j + 1)) matrix.append(row) return matrix"},{"question":"Susan is passionate about gardening, and she\'s planning to arrange N different types of plants in her new garden. Each plant has a required minimum sunlight exposure per day to thrive and a preferred maximum exposure. Susan is a meticulous gardener and wants to arrange the plants in such a way that each type can receive at least its minimum required sunlight and no more than its preferred maximum. The garden has a fixed duration of sunlight each day, given in hours. Susan can choose to place the plants in any order, but once she places a plant, it receives continuous sunlight for the rest of the day or until the maximum preferred duration is reached. Determine whether Susan can arrange all N plants in the garden such that their sunlight requirements are fulfilled within the given duration of sunlight each day. -----Constraints----- - All values in the input are integers. - 1 leq N leq 2 times 10^5 - 1 leq sunlight_duration leq 10^9 - 1 leq min_sunlight_i, max_sunlight_i leq 10^9 (1 leq i leq N) -----Input----- Input is given from Standard Input in the following format: N sunlight_duration min_sunlight_1 max_sunlight_1 min_sunlight_2 max_sunlight_2 ... min_sunlight_N max_sunlight_N -----Output----- If Susan can arrange all the plants such that their sunlight requirements are met, print Yes; if she cannot, print No. -----Sample Input----- 3 7 2 4 1 3 3 5 -----Sample Output----- Yes She can arrange the plants such that: - The first plant receives 3 hours of sunlight from time 0 to 3. - The second plant receives 2 hours of sunlight from time 3 to 5. - The third plant receives 2 hours of sunlight from time 5 to 7.","solution":"def can_organize_garden(N, sunlight_duration, plants): min_total = sum(min_sun for min_sun, _ in plants) max_total = sum(max_sun for _, max_sun in plants) if min_total <= sunlight_duration <= max_total: return \\"Yes\\" else: return \\"No\\" # Example usage: # N = 3 # sunlight_duration = 7 # plants = [(2, 4), (1, 3), (3, 5)] # print(can_organize_garden(N, sunlight_duration, plants)) # Output: \\"Yes\\""},{"question":"You are given an array of integers `arr` of size `n`. Your task is to create a new array `result` of size `n`, where each element at index `i` of `result` is equal to the sum of all elements of `arr` except `arr[i]`. Write a function `sumExceptSelf` that takes a list of integers as input and returns a list of integers as output. # Constraints: - 2 ≤ n ≤ 10^5 - -10^4 ≤ arr[i] ≤ 10^4 # Input: - A single integer `n` representing the size of the array. - A list of `n` integers representing the array elements. # Output: - A list of `n` integers representing the new array where each element is the sum of all other elements except the one at the current index. # Example Input 5 1 2 3 4 5 Output [14, 13, 12, 11, 10] # Explanation: - The sum of all elements except the first element (1) is 2+3+4+5 = 14. - The sum of all elements except the second element (2) is 1+3+4+5 = 13. - The sum of all elements except the third element (3) is 1+2+4+5 = 12. - The sum of all elements except the fourth element (4) is 1+2+3+5 = 11. - The sum of all elements except the fifth element (5) is 1+2+3+4 = 10. **You should aim to find a solution with O(n) time complexity.**","solution":"def sumExceptSelf(arr): Returns a new list where each element at index i is the sum of all elements in arr except arr[i]. total_sum = sum(arr) result = [total_sum - x for x in arr] return result"},{"question":"Grace likes to paint landscapes and often visits her favorite park, the Nature Reserve, to gather inspiration. The park contains several hiking trails, which are represented as a series of connected points. Grace wants to plan a circular hike that visits a series of points and returns to the starting point, ensuring she explores as many unique points as possible without revisiting any point. However, Grace doesn\'t have the time to explore all the possible circular hikes. She wants to know the maximum number of unique points she can visit in a single hike before returning to the starting point. The hiking trails in the park are represented by an undirected graph where the points are vertices and the trails between them are edges. Your task is to determine the length of the longest simple cycle in the graph. Input The input consists of: - An integer n (1 ≤ n ≤ 1000) representing the number of points in the park. - An integer m (0 ≤ m ≤ 2000) representing the number of trails. - m pairs of integers (u, v) (1 ≤ u, v ≤ n) indicating a trail between points u and v. Output Output the length of the longest simple cycle in the graph. If no cycle exists, output 0. Example Input 5 6 1 2 2 3 3 4 4 5 5 1 2 5 Output 5 Input 4 2 1 2 3 4 Output 0","solution":"def longest_simple_cycle(n, m, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, parent, depth, visited): visited[node] = depth max_length = 0 if node in cycle_length: return cycle_length[node] for neighbor in graph[node]: if neighbor == parent: continue if neighbor in visited: if visited[neighbor] < visited[node]: # a back edge forming a cycle max_length = max(max_length, visited[node] - visited[neighbor] + 1) else: length = dfs(neighbor, node, depth + 1, visited) max_length = max(max_length, length) visited.pop(node) cycle_length[node] = max_length return max_length cycle_length = {} longest_cycle = 0 for i in range(1, n+1): if i not in cycle_length: visited = {} longest_cycle = max(longest_cycle, dfs(i, -1, 1, visited)) return longest_cycle"},{"question":"Having mastered a variety of arithmetic operations, Miko can add, subtract, multiply, and divide two integers between 1 and 20 (inclusive), where division is always represented as integer division (i.e., it discards any remainder). Given an integer K, determine whether K can be the result of any of these operations applied to two integers within the range. If it can, print Possible; if it cannot, print Impossible. -----Constraints----- - -400 leq K leq 400 - K is an integer. -----Input----- Input is given from Standard Input in the following format: K -----Output----- If K can be represented as the result of adding, subtracting, multiplying, or integer dividing two integers between 1 and 20 (inclusive), print Possible; if it cannot, print Impossible. -----Sample Input----- 15 -----Sample Output----- Possible 15 can be represented as 18 - 3, for example.","solution":"def is_result_possible(K): for i in range(1, 21): # range from 1 to 20 for j in range(1, 21): # range from 1 to 20 if i + j == K or i - j == K or i * j == K or (j != 0 and i // j == K): return \\"Possible\\" return \\"Impossible\\""},{"question":"Problem Statement As a developer in a software company, you are responsible for designing algorithms to handle large-scale data processing. One of your assignments is to analyze the daily stock prices of multiple companies. You are given a list of stock prices for two companies over a period of time. Your task is to determine the longest common subsequence (LCS) of the stock prices between the two companies. A subsequence is a sequence derived from another sequence by deleting some elements without changing the order of the remaining elements. The LCS of two sequences is the longest sequence that appears as subsequence in both sequences. Input The input consists of two lines: - The first line contains a sequence of integers representing the stock prices of the first company. - The second line contains a sequence of integers representing the stock prices of the second company. Each sequence of integers is separated by spaces and each integer is between 1 and 10^5. There will be at most 1000 integers in each line. Output Output the length of the LCS of the stock prices for the two companies. If there are no common subsequences, return 0. Sample Input 1 1 3 4 1 2 1 5 3 4 1 2 1 3 Sample Output 1 5 Sample Input 2 7 8 9 10 1 2 3 4 Sample Output 2 0 Explanation In Sample Input 1, the longest common subsequence shared by the two companies\' stock prices is [3, 4, 1, 2, 1], which has a length of 5. In Sample Input 2, there are no common subsequences between the stock prices, so the output is 0.","solution":"def lcs_length(X, Y): Returns the length of the longest common subsequence (LCS) of two sequences. m = len(X) n = len(Y) # Create a 2D array to store the lengths of longest common subsequence. L = [[0 for j in range(n+1)] for i in range(m+1)] # Following steps build L[m+1][n+1] in bottom up fashion. Note that L[i][j] # contains length of LCS of X[0..i-1] and Y[0..j-1] for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) # L[m][n] contains the length of LCS for X[0..m-1] and Y[0..n-1] return L[m][n] def longest_common_subsequence_length(X_str, Y_str): Given two space-separated strings of integers, return the length of their longest common subsequence. X = list(map(int, X_str.split())) Y = list(map(int, Y_str.split())) return lcs_length(X, Y)"},{"question":"A certain university conducts exams, and the students receive their grades in the form of strings. Each character in the string can be \'A\', \'B\', \'C\', \'D\', or \'F\' representing the grades for different subjects. The university employs a grading system where the final grade of the student is the highest occurring single character in their grades string. In case of a tie (i.e., when two or more characters have the same highest frequency), the final grade is the lexicographically smallest grade among those tied. You are given a string representing a student\'s grades for their subjects. Write a program to determine the student\'s final grade according to the mentioned grading system. Input A single line containing the string of grades, where the string consists of characters \'A\', \'B\', \'C\', \'D\', and \'F\' only. The length of the string will be between 1 and 10^5, inclusive. Output Print a single character representing the final grade of the student. Example Input ABBCCCDDDD Output D Input BBBACC Output B","solution":"def final_grade(grades): Determine the student\'s final grade based on the highest frequency. In case of a tie, the lexicographically smallest grade among those tied. Parameters: grades (str): A string of grades consisting of \'A\', \'B\', \'C\', \'D\', \'F\' Returns: str: The final grade of the student from collections import Counter count = Counter(grades) max_frequency = max(count.values()) candidates = [grade for grade, freq in count.items() if freq == max_frequency] return min(candidates)"},{"question":"Given a string, determine the smallest lexicographic permutation of the string that contains at least one palindrome as a subsequence. If no permutation can hold a palindromic subsequence, return \\"-1\\". Example 1: Input: S = \\"bca\\" Output: acb Explanation: One of the smallest lexicographic permutations is \\"acb\\" and it contains \\"aca\\" as a palindromic subsequence. Example 2: Input: S = \\"abcd\\" Output: abcd Explanation: The string \\"abcd\\" itself is the smallest permutation and contains \\"a\\", \\"b\\", \\"c\\", \\"d\\" as palindromic subsequences. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestPalindromicPermutation() which takes a string S as input and returns the smallest lexicographic permutation holding a palindromic subsequence. Expected Time Complexity: O(N log N) for sorting. Expected Auxiliary Space: O(1). Constraints: 1 ≤ |S| ≤ 10^5 S consists of lowercase letters a-z.","solution":"def smallestPalindromicPermutation(S): Returns the smallest lexicographic permutation of the string S that contains at least one palindromic subsequence. if not S: return \\"-1\\" sorted_S = \'\'.join(sorted(S)) if len(sorted_S) == 1: return sorted_S return sorted_S"},{"question":"Marie is participating in a treasure hunt where she needs to locate a hidden treasure by decoding a series of clues. Each clue consists of a string of lowercase letters, and Marie needs to determine the smallest character in the lexicographical order present in each clue. However, there\'s a catch — the clues are written in a noisy environment, so some characters may have been corrupted and are not readable. The clues are represented by strings where a corrupted character is denoted by a \'?\'. Marie needs assistance writing a function to determine the smallest lexicographical character for each clue, while ignoring the corrupted characters. Write a function `decode_clues` that takes a list of strings as input, where each string represents a clue. Return a list of characters, where each character is the smallest lexicographical character from the corresponding clue string. If a clue string consists only of corrupted characters, return \'?\' for that clue. Function Signature: ```python def decode_clues(clues: List[str]) -> List[str]: ``` # Input - A list of strings `clues` where 1 ≤ |clues| ≤ 105 and each string in `clues` has a length 1 ≤ |s_i| ≤ 1000. Each string contains only lowercase letters or the character \'?\'. # Output - A list of characters where each character is the smallest lexicographical character in the corresponding clue string from the input list. # Examples ```python decode_clues([\\"hello\\", \\"world\\", \\"zebra\\", \\"a?c?e\\", \\"????\\", \\"bcd?\\"]) # Output: [\'e\', \'d\', \'a\', \'a\', \'?\', \'b\'] decode_clues([\\"abc\\", \\"?bcd\\", \\"?a?\\", \\"xy??\\", \\"zzzzz\\", \\"ab??z\\"]) # Output: [\'a\', \'b\', \'a\', \'x\', \'z\', \'a\'] ``` # Explanation In the first example: - The smallest character in \\"hello\\" is \'e\' - The smallest character in \\"world\\" is \'d\' - The smallest character in \\"zebra\\" is \'a\' - In the string \\"a?c?e\\", ignoring the corrupt characters, the smallest character is \'a\' - The string \\"????\\" contains only corrupted characters, so the result is \'?\' - In the string \\"bcd?\\", ignoring the corrupt character, the smallest character is \'b\' In the second example: - The smallest character in \\"abc\\" is \'a\' - In the string \\"?bcd\\", ignoring the corrupt character, the smallest character is \'b\' - In the string \\"?a?\\", ignoring the corrupt characters, the smallest character is \'a\' - In the string \\"xy??\\", ignoring the corrupt characters, the smallest character is \'x\' - The smallest character in \\"zzzzz\\" is \'z\' - In the string \\"ab??z\\", ignoring the corrupt characters, the smallest character is \'a\'","solution":"from typing import List def decode_clues(clues: List[str]) -> List[str]: def smallest_character(clue: str) -> str: readable_chars = [char for char in clue if char != \'?\'] return min(readable_chars) if readable_chars else \'?\' return [smallest_character(clue) for clue in clues]"},{"question":"Linda has a box of red, blue, and green balls. She wants to know the maximum number of balls she can take from the box in such a way that the number of red, blue, and green balls is balanced. The three colors are balanced if the count of red balls is equal to the count of blue balls and the count of green balls. Given the counts of red, blue, and green balls, determine the maximum number of balls Linda can take to achieve the balance. -----Input----- The input consists of three positive integers r, b, and g, where r is the number of red balls, b is the number of blue balls, and g is the number of green balls. -----Output----- Print the maximum number of balls Linda can take that result in a balanced count of each color. -----Constraints----- 1 ≤ r, b, g ≤ 1000 -----Sample Input----- 6 9 12 -----Sample Output----- 18 -----Output details----- To achieve the balance, Linda can take 6 red balls, 6 blue balls, and 6 green balls. This totals to 18 balls. -----Notes----- If Linda had 3 red balls, 5 blue balls, and 8 green balls, she would be able to achieve the balance with 3 red balls, 3 blue balls, and 3 green balls, for a total of 9 balls.","solution":"def max_balanced_balls(r, b, g): Determines the maximum number of balls Linda can take to achieve a balanced count of each color. A balanced count is when the number of red, blue, and green balls are equal. :param r: Number of red balls :param b: Number of blue balls :param g: Number of green balls :return: Maximum number of balls Linda can take to achieve balance # Find the minimum count among red, blue, and green balls min_count = min(r, b, g) # Multiply by 3 to get the total number of balls return min_count * 3"},{"question":"Given an array of integers, write a function `maxContiguousSum` to find the maximum sum of a contiguous subarray. A subarray is a consecutive part of an array. For example, given the array `[-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray `[4,-1,2,1]` has the largest sum of `6`. The function should take an array of integers as input and return the maximum sum of any contiguous subarray within the array. # Function Signature ```python def maxContiguousSum(nums: List[int]) -> int: ``` # Example ```python maxContiguousSum([-2,1,-3,4,-1,2,1,-5,4]) # returns 6 (from subarray [4,-1,2,1]) maxContiguousSum([1,2,3,4,5]) # returns 15 (from subarray [1,2,3,4,5]) maxContiguousSum([-1,-2,-3,-4]) # returns -1 (from subarray [-1]) ``` # Constraints - The array can contain both positive and negative numbers. - The array will contain at least one number. - The solution should be implemented with O(n) time complexity.","solution":"from typing import List def maxContiguousSum(nums: List[int]) -> int: Returns the maximum sum of a contiguous subarray within the given array. if not nums: return 0 # Initialize our variables max_current = max_global = nums[0] # Iterate through the list, starting from the second element for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A group of explorers is on an expedition to find ancient treasures scattered across a grid-shaped island. The island is represented as an m times n grid where each cell contains a certain number of treasures. The explorers start from the top-left corner of the grid (cell (1, 1)) and can move to the right or down to the adjacent cell. The objective is to calculate the maximum number of treasures the explorers can collect on their way to the bottom-right corner of the grid (cell (m, n)). To facilitate the planning of the expedition, you are to determine the maximum number of treasures that can be collected for each grid, given the dimensions and treasures in each cell. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Each test case starts with two integers m and n (1 le m, n le 100) indicating the dimensions of the grid. The next m lines contain n integers each, where the j-th integer in the i-th row represents the number of treasures in cell (i, j) (0 le text{treasures}_{i,j} le 1000). -----Output----- For each test case, print the maximum number of treasures the explorers can collect when moving from the top-left corner to the bottom-right corner of the grid. -----Examples----- Input 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 3 4 Output 12 8 Input 1 4 4 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 Output 34","solution":"def max_treasures(test_cases): results = [] for case in test_cases: m, n, grid = case dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] results.append(dp[m-1][n-1]) return results"},{"question":"Given two lists of integers, nums1 and nums2. The task is to return a list containing the common elements between the two lists. Each element in the result must be unique and you may return the result in any order. Example 1: Input: nums1 = [1, 2, 2, 1] nums2 = [2, 2] Output: [2] Explanation: The common element is 2 and it appears in both lists. Example 2: Input: nums1 = [4, 9, 5] nums2 = [9, 4, 9, 8, 4] Output: [4, 9] Explanation: The common elements are 4 and 9, and they appear in both lists. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findCommonElements() which takes two lists of integers nums1 and nums2 as input parameters and returns a list of unique common elements. Expected Time Complexity: O(n + m) Expected Auxiliary Space: O(n + m) Constraints: 1 <= len(nums1), len(nums2) <= 1000 0 <= nums1[i], nums2[i] <= 1000","solution":"def findCommonElements(nums1, nums2): Returns a list of unique common elements between nums1 and nums2. set1 = set(nums1) set2 = set(nums2) return list(set1 & set2)"},{"question":"A hiker is hiking through a mountain trail. Along the trail, there are various scenic spots, each with a certain beauty value. The hiker wants to capture the most beautiful spot, but he can only visit a certain number of spots in a day. Help the hiker determine the maximum total beauty value he can capture by visiting exactly k consecutive spots along the trail. -----Input----- - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the total number of scenic spots and the number of spots the hiker can visit consecutively. - The second line contains n integers, where each integer represents the beauty value of a scenic spot. The beauty values are given in the order they appear on the trail and are within the range of -1000 to 1000. -----Output----- Print a single integer — the maximum possible sum of beauty values of exactly k consecutive spots. -----Examples----- Input 5 2 1 3 -2 5 7 Output 12 Input 8 3 -1 -2 4 -1 3 2 -5 3 Output 6 Input 4 4 0 0 0 0 Output 0","solution":"def max_beauty_sum(n, k, beauty_values): Returns the maximum possible sum of beauty values of exactly k consecutive spots. Parameters: n (int): Total number of scenic spots. k (int): Number of spots the hiker can visit consecutively. beauty_values (List[int]): List of beauty values of scenic spots. Returns: int: The maximum possible sum of beauty values of exactly k consecutive spots. max_sum = float(\'-inf\') current_sum = sum(beauty_values[:k]) for i in range(k, n): current_sum += beauty_values[i] - beauty_values[i - k] if current_sum > max_sum: max_sum = current_sum return max(max_sum, current_sum)"},{"question":"Given an integer array nums, process q queries, each having one of the following forms: * 1 i v — Replace the i-th element in the array with value v. * 2 l r — Find the sum of the elements from the l-th to the r-th indices, inclusive. # Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers — the elements of the array nums (1 ≤ nums[i] ≤ 10^9). The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries to process. The next q lines describe the queries and may have one of the following forms: * 1 i v (1 ≤ i ≤ n, 1 ≤ v ≤ 10^9) * 2 l r (1 ≤ l ≤ r ≤ n) All indices are 1-based. # Output For each query of type 2, output the required answer in a separate line. # Examples Input ``` 5 1 2 3 4 5 4 2 1 5 1 3 10 2 1 5 2 2 4 ``` Output ``` 15 22 16 ``` Explanation Consider the initial array [1, 2, 3, 4, 5]. 1. The sum of elements from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15. 2. After updating the 3rd element to 10, the array becomes [1, 2, 10, 4, 5]. 3. The sum of elements from index 1 to 5 is now 1 + 2 + 10 + 4 + 5 = 22. 4. The sum of elements from index 2 to 4 is 2 + 10 + 4 = 16.","solution":"def process_queries(n, nums, q, queries): results = [] for query in queries: if query[0] == 1: _, i, v = query nums[i-1] = v elif query[0] == 2: _, l, r = query results.append(sum(nums[l-1:r])) return results # Example usage n = 5 nums = [1, 2, 3, 4, 5] q = 4 queries = [ [2, 1, 5], [1, 3, 10], [2, 1, 5], [2, 2, 4] ] print(process_queries(n, nums, q, queries)) # Output: [15, 22, 16]"},{"question":"You are given a list of N integers representing the strengths of N players. Your task is to determine the minimum number of teams required such that the difference between the strongest player and the weakest player in each team does not exceed a given value K. A team should consist of at least one player, and each player must be assigned to exactly one team. ------ Input Format ------ - The first line contains two integers N (the number of players) and K (the maximum allowed difference in strength within a team). - The second line contains N space-separated integers representing the strengths of the players. ------ Output Format ------ - Output a single integer, the minimum number of teams required to satisfy the condition. ------ Constraints ------ 1 ≤ N ≤ 10^6 0 ≤ K ≤ 10^9 0 ≤ text{strengths}[i] ≤ 10^9 ------ Sample Input 1 ------ 5 3 1 5 4 6 8 ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ One possible way to form the teams is: - Team 1: Players with strengths [1, 4, 5, 6] (difference between the strongest and weakest player is 5 - 1 = 4, which does not exceed K). - Team 2: Player with strength [8] (has only one player). Hence, the minimum number of teams required is 2.","solution":"def minimum_number_of_teams(N, K, strengths): Returns the minimum number of teams required such that the difference between the strongest player and the weakest player in each team does not exceed K. Parameters: - N: int, the number of players. - K: int, the maximum allowed difference in strength within a team. - strengths: list of int, the strengths of the players. Returns: - int, the minimum number of teams required. if N == 0: return 0 strengths.sort() teams = 1 min_strength = strengths[0] for strength in strengths: if strength - min_strength > K: teams += 1 min_strength = strength return teams # Example usage: # N = 5 # K = 3 # strengths = [1, 5, 4, 6, 8] # print(minimum_number_of_teams(N, K, strengths)) # Output: 2"},{"question":"You are given an integer array `nums` and an integer `k`. You want to split the array into `k` non-empty consecutive subarrays. The score of a split is defined as the maximum sum of its subarrays. Minimize the maximum sum of the subarrays. Return the minimized maximum sum of the split. Constraints * 1 leq nums.length leq 1000 * 1 leq nums[i] leq 10^6 * 1 leq k leq nums.length Input Input is given from Standard Input in the following format: nums k Output Return the minimized maximum sum of the split. Examples Input [7,2,5,10,8] 2 Output 18 Input [1,2,3,4,5] 2 Output 9 Input [1,4,4] 3 Output 4","solution":"def splitArray(nums, k): This function returns the minimized maximum sum of `k` non-empty consecutive subarrays from the input list `nums`. def valid_partition(max_sum): count, curr_sum = 1, 0 for num in nums: if curr_sum + num > max_sum: count += 1 curr_sum = num if count > k: return False else: curr_sum += num return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if valid_partition(mid): right = mid else: left = mid + 1 return left"},{"question":"Amit loves playing with numbers, especially with primes. Recently, he has become interested in creating sequences with specific properties and came up with a fun game involving prime sequences. He needs your help to write a program to help him check specific properties of these sequences efficiently. Given an array of integers, `A`, and a series of `Q` queries, each query asks you to check if all integers in a subarray of `A` are coprime with a given prime number `P`. Two numbers are considered coprime if their greatest common divisor (GCD) is 1. For each query, you need to determine if every number in the subarray is coprime with the given prime number `P`. # Input - The first line contains an integer `N` (1 ≤ N ≤ 100,000) — the number of elements in the array `A`. - The second line contains `N` space-separated integers `A[i]` (1 ≤ A[i] ≤ 100,000). - The third line contains an integer `Q` (1 ≤ Q ≤ 100,000) — the number of queries. - The following `Q` lines each contain three integers `L`, `R`, and `P` (1 ≤ L ≤ R ≤ N, 2 ≤ P ≤ 10^5), representing a subarray from index `L` to `R` (both inclusive) and the prime number `P`. # Output For each query, output \\"YES\\" if all numbers in the specified subarray are coprime with `P`, otherwise output \\"NO\\". # Example Input ``` 5 10 15 21 30 49 3 1 3 5 2 4 7 3 5 13 ``` Output ``` NO NO YES ``` # Explanation 1. For the first query, the subarray is `[10, 15, 21]` and `P = 5`. `10` is not coprime with `5` since their GCD is `5`, so the answer is \\"NO\\". 2. For the second query, the subarray is `[15, 21, 30]` and `P = 7`. `21` is not coprime with `7` since their GCD is `7`, so the answer is \\"NO\\". 3. For the third query, the subarray is `[21, 30, 49]` and `P = 13`. All numbers in the subarray are coprime with `13`, so the answer is \\"YES\\". # Notes - Consider using efficient algorithms to handle the constraints on the array size and number of queries. - Preprocessing the data might help answer each query in a reasonable time.","solution":"import math def are_coprime_with_prime(arr, queries): This function determines if all the integers in the subarray are coprime with the given prime P. Parameters: arr (list of int): The list of integers. queries (list of tuples): Each tuple contains three integers (L, R, P) representing a query. Returns: list of str: A list containing \\"YES\\" or \\"NO\\" for each query based on the condition. results = [] for L, R, P in queries: # Subarray from index L (inclusive) to R (inclusive) subarray = arr[L-1:R] is_coprime = all(math.gcd(num, P) == 1 for num in subarray) if is_coprime: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers nums and an integer threshold. You must split the array into several non-empty contiguous subarrays such that the sum of elements in each subarray is less than or equal to the threshold. Your goal is to minimize the number of subarrays required to achieve this condition. Write a function that returns the minimum number of subarrays needed. Input - An array nums of length n consisting of integers (1 ≤ n ≤ 10^4, 1 ≤ nums[i] ≤ 10^4). - An integer threshold (1 ≤ threshold ≤ 10^5). Output - An integer representing the minimum number of subarrays required. Examples Input nums = [7, 2, 5, 10, 8] threshold = 15 Output 3 Input nums = [1, 2, 3, 4, 5] threshold = 5 Output 4 Note In the first example, possible subarrays are: 1. [7, 2, 5] (sum is 14) 2. [10] (sum is 10) 3. [8] (sum is 8) In the second example, possible subarrays are: 1. [1, 2] (sum is 3) 2. [3] (sum is 3) 3. [4] (sum is 4) 4. [5] (sum is 5)","solution":"def minSubarrays(nums, threshold): Returns the minimum number of subarrays required such that the sum of elements in each subarray is less than or equal to the threshold. count = 1 current_sum = 0 for num in nums: if current_sum + num > threshold: count += 1 current_sum = num else: current_sum += num return count"},{"question":"You have been assigned the task of analyzing a dataset consisting of \'n\' integers, where the dataset is not sorted. You are asked to determine the median of this dataset efficiently. The median is the middle element when the elements are arranged in increasing order. If the number of elements, \'n\', is even, the median is the average of the two middle elements. Your task is to implement a function that takes in an array of integers and returns the median value of the dataset. You should aim for an efficient solution with a time complexity better than O(n log n), which generally means you should be looking into algorithms with an average-case time complexity of O(n). # Input - The first line contains an integer \'n\' (1 ≤ n ≤ 10^5), representing the number of elements in the dataset. - The second line contains \'n\' integers separated by space (each integer \'i\' where |i| ≤ 10^9), which are the elements of the dataset. # Output - Print the median of the dataset to one decimal place. # Example Input ``` 7 12 4 5 3 8 7 9 ``` Output ``` 7.0 ``` Input ``` 8 4 5 1 2 3 6 8 7 ``` Output ``` 4.5 ``` # Note In the first example, since \'n\' is 7 (odd), the median is the 4th smallest number in the sorted list, which is 7.0. In the second example, since \'n\' is 8 (even), the median is the average of the 4th and 5th smallest numbers in the sorted list, which is (4+5)/2 = 4.5.","solution":"def find_median(nums): Returns the median of the dataset. n = len(nums) nums.sort() if n % 2 == 1: return float(nums[n // 2]) else: mid1, mid2 = (n // 2) - 1, n // 2 return (nums[mid1] + nums[mid2]) / 2"},{"question":"To celebrate International Music Day, various music bands are preparing performances. A very famous band called \\"Harmonizers\\" decided to perform for their fans but they have a unique way to determine the sequence of songs they will play. Each song can be represented as a string and they want to sort the songs in such a way that the resulting sequence has the smallest lexicographical order when concatenated all together. For instance, if the band has songs represented by strings \\"abc\\", \\"bcd\\", \\"cde\\", sorting them to form the concatenation \\"abcbcdcde\\" yields the smallest possible concatenated string. You are tasked with helping \\"Harmonizers\\" determine the order in which they should perform their songs. ----Input---- - The first line of the input contains a single integer (T) denoting the number of test cases. The description of (T) test cases follows. - The first line of each test case contains a single integer (n) denoting the number of songs. - The next (n) lines contain one string each, representing the names of the songs. ----Output---- For each test case, print a single line containing the lexicographically smallest concatenated sequence of songs. ----Constraints---- - (1 le T le 10) - (1 le n le 1000) - (1 le text{length of each string} le 100) ----Example Input---- 2 3 abc bcd cde 4 cat dog bat ask ----Example Output---- abcbcdcde askbatcatdog","solution":"def lexicographically_smallest_concatenation(T, test_cases): For each test case, sort the list of songs to form a concatenated sequence with the smallest lexicographical order and return the result for each test case. results = [] for t in range(T): n, songs = test_cases[t] # Sort the songs list lexicographically sorted_songs = sorted(songs) # Concatenate them to form the desired sequence result = \'\'.join(sorted_songs) results.append(result) return results"},{"question":"David lives in a world where roads are laid out in a perfect grid, and he wants to find the shortest route from his home to his favorite cafe. However, he wants to avoid busy streets at all costs. The grid is represented as an `n x n` matrix, where each cell contains a value representing the \\"traffic level\\" of that street. David can move up, down, left, or right from any given cell, but he cannot move diagonally. He starts at the top-left corner of the matrix (0,0) and wants to end up at the bottom-right corner (n-1, n-1). Write a function `find_min_traffic_path(matrix)` that takes in a matrix where each cell is an integer representing the traffic level. The function should return the minimum possible sum of traffic levels that David can encounter on his journey from the top-left corner to the bottom-right corner. Example ```python matrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] find_min_traffic_path(matrix) # Output: 7 (Path: 1 -> 3 -> 1 -> 1 -> 1) ``` # Notes 1. You can assume that the input always contains at least one cell (i.e., matrix size is always at least 1x1). 2. You can assume non-negative integer values in the matrix. 3. The function should return an integer representing the minimum sum of traffic levels encountered.","solution":"def find_min_traffic_path(matrix): Given an n x n matrix where each cell contains a value representing the traffic level, returns the minimum possible sum of traffic levels that one can encounter on a journey from the top-left to the bottom-right corner. n = len(matrix) dp = [[0] * n for _ in range(n)] # Initialize the dp array dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[n-1][n-1]"},{"question":"Alex has an array of integers, where each element represents the quantity of coins available. He has to collect coins such that the quantity of coins he collects is even. However, Alex can only collect coins following these rules: 1. He can select any element of the array, and collect exactly the amount of coins represented by that element. 2. Alternatively, he can select any two different elements of the array, and collect the sum of the coins represented by these two elements. Alex wants to collect an even number of coins with the minimum number of selections (either one or two). Help Alex determine the minimum number of selections needed to collect an even number of coins from the array or determine that it is impossible. You need to answer t independent test cases. -----Input----- The first line contains the number t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 le n le 10^5) — the length of the array. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. The sum of n over all test cases does not exceed 10^5. -----Output----- Print t lines. On each line print one integer — the minimum number of selections needed to collect an even number of coins for the corresponding test case. If it is impossible, print -1. -----Examples----- Input 3 5 1 3 5 7 9 4 2 4 6 8 6 1 2 3 4 5 6 Output -1 1 1 -----Note----- In the first test case, array elements are 1, 3, 5, 7, 9. Since all elements are odd, any single selection will be odd, and any pair of odd numbers will sum to an even number. Since Alex cannot form an even sum with a single selection or pair selected from these elements, it is impossible. In the second test case, array elements are 2, 4, 6, 8. Alex can collect any single element since they are all even — so the answer is 1. In the third test case, array elements are 1, 2, 3, 4, 5, 6. Alex can select the element 2 or 4 directly, which are even numbers, so the answer is 1.","solution":"def min_selections_for_even_coins(t, test_cases): results = [] for case in test_cases: n, arr = case has_even = False has_odd = False for num in arr: if num % 2 == 0: has_even = True else: has_odd = True if has_even: results.append(1) elif has_odd: results.append(-1) else: results.append(-1) return results"},{"question":"You are given an array of integers. Chef defines a subarray as: Valid, if the sum of the subarray is divisible by a given integer K. Invalid, otherwise. Your task is to find the number of valid subarrays for given arrays. ------ Input Format ------ - First line contains two integers N and K separated by space, where N is the number of elements in the array and K is the integer as defined above. - Second line contains N space-separated integers, the elements of the array. ------ Output Format ------ Print a single integer, representing the number of valid subarrays. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^4 -10^4 ≤ A_i ≤ 10^4 ------ subtasks ------ Subtask #1 (100 points): Output the answer using the given constraints ------ Example Input 1 ------ 5 3 3 1 4 1 5 ------ Example Output 1 ------ 4 ------ Example Input 2 ------ 3 2 1 2 3 ------ Example Output 2 ------ 2 ------ Explanation 1 ------ In the first example: Valid subarrays are [3], [3, 1], [4], and [1, 5]. In the second example: Valid subarrays are [2] and [1, 2, 3].","solution":"def count_valid_subarrays(N, K, arr): count = prefix_sum = 0 freq = {0: 1} for num in arr: prefix_sum += num mod = prefix_sum % K if mod in freq: count += freq[mod] freq[mod] += 1 else: freq[mod] = 1 return count"},{"question":"You are given a string `S` of length `N` containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Determine if the string `S` is a valid parentheses string. A valid parentheses string is defined as follows: - An empty string is considered valid. - If `A` and `B` are valid parentheses strings, then the concatenation `AB` is also valid. - If `A` is a valid parentheses string, then `(A)`, `{A}`, and `[A]` are also valid. Write a function to check whether the given string `S` is valid. Constraints * 1 leq N leq 10^5 * S_i ∈ {\'(\', \')\', \'{\', \'}\', \'[\', \']\'} Input Input is given from Standard Input in the following format: ``` N S ``` Output Print \\"YES\\" if the string is a valid parentheses string. Otherwise, print \\"NO\\". Examples Input ``` 6 {[()]} ``` Output ``` YES ``` Input ``` 8 ({[()]}) ``` Output ``` YES ``` Input ``` 5 ({]} ``` Output ``` NO ```","solution":"def is_valid_parentheses(S): Returns \\"YES\\" if the string S is a valid parentheses string, otherwise \\"NO\\" stack = [] matching_bracket = { \')\': \'(\', \'}\': \'{\', \']\': \'[\' } for char in S: if char in matching_bracket.values(): # opening brackets stack.append(char) elif char in matching_bracket.keys(): # closing brackets if stack and stack[-1] == matching_bracket[char]: stack.pop() else: return \\"NO\\" if not stack: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers and a target integer T. Return the indices of the two numbers in the array such that they add up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: arr[] = {2, 7, 11, 15}, T = 9 Output: [0, 1] Explanation: Because arr[0] + arr[1] == 9, we return [0, 1]. Example 2: Input: arr[] = {3, 2, 4}, T = 6 Output: [1, 2] Explanation: Because arr[1] + arr[2] == 6, we return [1, 2]. Example 3: Input: arr[] = {3, 3}, T = 6 Output: [0, 1] Explanation: Because arr[0] + arr[1] == 6, we return [0, 1]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findIndices() which takes the array arr[], its size N and the target T as inputs and returns the indices in an array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ T ≤ 10^9","solution":"def findIndices(arr, T): Returns the indices of the two numbers in the array such that they add up to the target T. lookup = {} for i, num in enumerate(arr): complement = T - num if complement in lookup: return [lookup[complement], i] lookup[num] = i # Example usage print(findIndices([2, 7, 11, 15], 9)) # Output: [0, 1] print(findIndices([3, 2, 4], 6)) # Output: [1, 2] print(findIndices([3, 3], 6)) # Output: [0, 1]"},{"question":"The King\'s guards have a peculiar way of standing in formation. They always stand in a single row, but their heights follow a specific pattern: each guard\'s height from left to right should strictly increase up to some point, and then strictly decrease thereafter. This peak corresponds to the tallest guard. Your task is to determine if a given sequence of integers can represent the heights of the guards standing in this exact pattern. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of guards. - The second line contains N space-separated integers, representing the heights of the guards. Output: For each test case, print \\"YES\\" if the given sequence can represent the heights of the guards standing in the specified formation. Otherwise, print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100,000 1 ≤ height of each guard ≤ 1,000,000 Note: The total number of elements across all test cases will not exceed 100,000. SAMPLE INPUT: 3 5 1 3 5 4 2 4 1 2 3 4 6 1 3 5 7 6 4 SAMPLE OUTPUT: YES NO YES Explanation: - For the first test case, the heights sequence [1, 3, 5, 4, 2] follows the increasing and then decreasing pattern. - For the second test case, the heights sequence [1, 2, 3, 4] does not have a decreasing part after increasing. - For the third test case, the heights sequence [1, 3, 5, 7, 6, 4] follows the increasing and then decreasing pattern.","solution":"def can_form_guards_pattern(num_cases, cases): results = [] for case in cases: n, heights = case if n < 3: results.append(\\"NO\\") continue peak_found = False for i in range(1, n): if heights[i] == heights[i-1]: results.append(\\"NO\\") break elif not peak_found: if heights[i] < heights[i-1]: # Start of decreasing part peak_found = True else: if heights[i] > heights[i-1]: # Found an increasing part after peak results.append(\\"NO\\") break else: if peak_found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"STATEMENT You are a software developer working on a financial application that logs transaction amounts in various currencies throughout the day. Each transaction and its timestamp are recorded in a list. Your task is to identify and sum up unique transaction amounts based on their timestamps. If two transactions have the same timestamp, only one transaction (any one of them) should be considered in the sum to avoid duplication. INPUT The first line contains an integer N, denoting the number of transactions recorded. Each of the next N lines contains a string of length twenty depicting a transaction in the format \'YYYY-MM-DD:HHMM AMOUNT\', where: - \'YYYY-MM-DD\' is the date of the transaction. - \'HHMM\' is the time of the transaction using 24-hour format. - \'AMOUNT\' is a floating point number representing the transaction amount. 1 <= N <= 1000 AMOUNT will not exceed 10^6. OUTPUT Output a single floating point number, representing the sum of unique transaction amounts rounded to two decimal places. EXAMPLE INPUT 5 2023-10-10:1200 150.25 2023-10-10:1200 150.25 2023-10-10:1300 75.00 2023-10-11:0900 200.50 2023-10-11:0900 300.75 OUTPUT 425.75","solution":"def sum_unique_transactions(n, transactions): Sum unique transaction amounts based on their timestamps. :param n: Number of transactions recorded. :param transactions: List of transactions as strings. :return: Sum of unique transaction amounts rounded to two decimals. unique_transactions = {} for transaction in transactions: timestamp, amount = transaction.rsplit(\' \', 1) amount = float(amount) if timestamp not in unique_transactions: unique_transactions[timestamp] = amount return round(sum(unique_transactions.values()), 2)"},{"question":"In a remote village, the villagers have a peculiar way of communicating over long distances using drums. They have arranged for a special learning event where children learn to pass messages from one villager to another using a series of drum beats. Here\'s how it works: Each villager can communicate with a specific set of other villagers, therefore forming a communication network. In this problem, you\'re given a list of villagers and the pairs of villagers who can communicate with each other directly. You need to determine if a message can be sent from a starting villager to a target villager by passing through a series of intermediate villagers. Here\'s an example: There are 6 villagers, numbered 1, 2, ..., 6. Villager 1 wants to send a message to villager 6. The communication network pairs are as follows: villager 1 can communicate with villager 2, villager 2 with villager 3, villager 3 with villager 4, villager 4 with villager 5, and villager 5 with villager 6. The message can be passed from villager 1 to 6 through the chain 1 rightarrow 2 rightarrow 3 rightarrow 4 rightarrow 5 rightarrow 6. If, however, the communication pairs do not form a connected chain from 1 to 6, the message cannot be delivered. -----Input:----- The first line of the input contains two integers N and M. N is the number of villagers: we assume that our villagers are numbered 1, 2, ..., N. M is the number of direct communication pairs. Each of the next M lines, lines 2, ..., M + 1, contains a pair of integers representing a pair of villagers that can communicate directly. Line i + 1 contains integers A_i and B_i, 1 leq A_i leq N and 1 leq B_i leq N, indicating that villager A_i and villager B_i can communicate directly. The last line, line M + 2 contains a pair of integers S and T, where S is the villager from which the message starts and T is the villager where the message must be delivered. -----Output:----- If the message cannot be delivered print 0. If the message can be delivered print out a single integer indicating the number of direct communications (pairs) in the shortest route (in terms of the number of pairs) to deliver the message. -----Constraints:----- - 1 leq N leq 3500. - 1 leq M leq 1000000. - In at least 50 % of the inputs 1 leq N leq 1000 and 1 leq M leq 200000. -----Sample Input 1:----- 6 5 1 2 2 3 3 4 4 5 5 6 1 6 -----Sample Output 1:----- 5 -----Sample Input 2:----- 6 3 1 2 2 3 5 6 1 6 -----Sample Output 2:----- 0","solution":"from collections import deque, defaultdict def can_send_message(N, M, pairs, S, T): Determines if a message can be sent from villager S to villager T and the minimum number of direct communications (pairs) required for the delivery. Parameters: - N: Number of villagers. - M: Number of direct communication pairs. - pairs: List of tuples where each tuple (A_i, B_i) represents a direct communication pair. - S: Starting villager. - T: Target villager. Returns: - The minimum number of direct communications required to send the message from S to T. Returns 0 if it is not possible to send the message. # Create a graph from the communication pairs graph = defaultdict(list) for A, B in pairs: graph[A].append(B) graph[B].append(A) # BFS to find the shortest path from S to T queue = deque([(S, 0)]) visited = set() while queue: current, distance = queue.popleft() if current == T: return distance if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, distance + 1)) # If there\'s no path from S to T, return 0 return 0"},{"question":"Implement a function `fizz_buzz` that receives an integer n and returns a list of strings representing the numbers from 1 to n. However, for multiples of 3, return \\"Fizz\\" instead of the number, and for the multiples of 5, return \\"Buzz\\". For numbers which are multiples of both 3 and 5, return \\"FizzBuzz\\". # Example ```python fizz_buzz(5) # Output: [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\'] fizz_buzz(15) # Output: [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\', \'Fizz\', \'7\', \'8\', \'Fizz\', \'Buzz\', \'11\', \'Fizz\', \'13\', \'14\', \'FizzBuzz\'] ``` Make sure to handle edge cases and test your function thoroughly.","solution":"def fizz_buzz(n): Returns a list of strings representing the numbers from 1 to n, but: - For multiples of 3, returns \\"Fizz\\" - For multiples of 5, returns \\"Buzz\\" - For multiples of both 3 and 5, returns \\"FizzBuzz\\" result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"You are given a string S consisting of lowercase English letters and a number k. Construct a new string that contains exactly k distinct characters and is the lexicographically smallest string possible. If it\'s not possible to construct such a string, return \\"-1\\". ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains the string S. - The second line of each test case contains an integer k. ------ Output Format ------ - For each test case, print a single line containing the lexicographically smallest string with exactly k distinct characters. If it is not possible, print \\"-1\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{5} 1 ≤ k ≤ 26 - Sum of the lengths of all strings in all test cases does not exceed 10^{6} ----- Sample Input 1 ------ 3 abc 2 xyz 3 abcdef 7 ----- Sample Output 1 ------ ab xyz -1 ----- Explanation 1 ------ - For the first test case: - The original string is \\"abc\\". To form a string with exactly 2 distinct characters, we can use \\"ab\\" which is the lexicographically smallest. - For the second test case: - The original string already has exactly 3 distinct characters, so the answer is \\"xyz\\". - For the third test case: - It is not possible to form a string with 7 distinct characters from \\"abcdef\\" as it only contains 6 distinct characters, so the answer is \\"-1\\".","solution":"def smallest_lexicographic_string(S, k): Returns the lexicographically smallest string that contains exactly k distinct characters from S. If it\'s not possible, returns \\"-1\\". distinct_chars = sorted(set(S)) # Get unique characters and sort them if len(distinct_chars) < k: return \\"-1\\" # Start building the smallest string possible lexicographic_string = \'\'.join(distinct_chars[:k]) return lexicographic_string def process_test_cases(test_cases): results = [] for S, k in test_cases: results.append(smallest_lexicographic_string(S, k)) return results"},{"question":"Consider the following problem statement: A company has a managing system where employees report to a hierarchy of managers. The company wants to gather information about the structure of its managerial hierarchy in the form of a tree. Each employee is assigned a unique identification number from 1 to N (inclusive). The company has provided you with a list of managerial relationships, where each relationship is represented as a tuple (a, b) meaning employee a is the manager of employee b. Using this information, the company wants you to determine the deepest level of hierarchy i.e., the longest path from the CEO to any employee in the hierarchical tree. Assume that there is only one CEO who does not report to anyone and the company hierarchy is a valid tree structure (i.e., it is connected and acyclic). ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of employees. The following N-1 lines contain two space-separated integers a and b indicating that employee a manages employee b. ------ Output ------ For each test case, print a single integer — the maximum depth of the hierarchical tree. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 1 ≤ a, b ≤ N ----- Sample Input 1 ------ 2 5 1 2 1 3 3 4 3 5 6 1 2 1 3 2 4 2 5 5 6 ----- Sample Output 1 ------ 3 4 Explanation: In the first test case, a tree of the following structure is formed: ``` 1 / 2 3 / 4 5 ``` The length of the longest path (the maximum depth) from the CEO (employee 1) is 3 (path: 1 -> 3 -> 4 or path 1 -> 3 -> 5). In the second test case, the tree structure is: ``` 1 / 2 3 / 4 5 6 ``` The longest path from the CEO (employee 1) is 4 (path: 1 -> 2 -> 5 -> 6).","solution":"from collections import defaultdict, deque def max_depth_hierarchy(T, cases): results = [] for i in range(T): N, edges = cases[i] if N == 1: results.append(1) continue # Step 1: Build adjacency list graph = defaultdict(list) in_degree = {i: 0 for i in range(1, N+1)} for a, b in edges: graph[a].append(b) in_degree[b] += 1 # Step 2: Find the root (CEO) root = 1 for i in range(1, N+1): if in_degree[i] == 0: root = i break # Step 3: Breadth-First Search (BFS) to find the maximum depth queue = deque([(root, 1)]) max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) for neighbor in graph[node]: queue.append((neighbor, depth + 1)) results.append(max_depth) return results # Example usage if __name__ == \\"__main__\\": cases = [ (5, [(1, 2), (1, 3), (3, 4), (3, 5)]), (6, [(1, 2), (1, 3), (2, 4), (2, 5), (5, 6)]) ] T = 2 print(max_depth_hierarchy(T, cases))"},{"question":"Suppose you have been given an integer sequence. You need to determine how many subarrays have a sum that is divisible by a given integer K. ------ Input Format ------ - The first line contains two integers N and K, denoting the number of elements in the sequence and the integer K, respectively. - The second line contains N integers, denoting the elements of the sequence. ------ Output Format ------ Print a single integer, the number of subarrays of the given sequence whose sum is divisible by K. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^4 -10^9 ≤ a_i ≤ 10^9 where a_i is the i^{th} element of the sequence ----- Sample Input 1 ------ 5 3 1 2 3 4 1 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The subarrays which have a sum divisible by 3 are: - [1, 2] with sum 3 - [3] with sum 3 - [2, 3, 4, 1] with sum 10 - [4, 1] with sum 5 Hence, there are 4 subarrays whose sum is divisible by 3.","solution":"def count_subarrays_with_sum_divisible_by_k(arr, N, K): mod_count = [0] * K mod_count[0] = 1 prefix_sum = 0 count = 0 for num in arr: prefix_sum = (prefix_sum + num) % K if prefix_sum < 0: prefix_sum += K count += mod_count[prefix_sum] mod_count[prefix_sum] += 1 return count # Parsing input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) arr = list(map(int, data[2:])) print(count_subarrays_with_sum_divisible_by_k(arr, N, K))"},{"question":"BikeMaster is a company that offers bike-sharing services in a city. The company wants to optimize the positioning of their bike stations to minimize the walking distance for all users. They have the coordinates of various potential bike station locations and the positions of a number of users. The goal is to find the optimal location for exactly one bike station such that the maximum distance any user has to walk to reach this station is minimized. INPUT - First line contains number of test cases T. - Each test case starts with an integer U, the number of users. - The next U lines each contain two integers representing the coordinates (X, Y) of a user. - Following the user coordinates, an integer S representing the number of potential bike station locations. - The next S lines each contain two integers representing the coordinates (X, Y) of a bike station. OUTPUT For each test case, print the coordinates of the bike station that minimizes the maximum walking distance for all users. If there are multiple such stations, output the one with the smallest lexicographical order (first by X coordinate, then by Y coordinate). Constraints - 1 ≤ T ≤ 50 - 1 ≤ U ≤ 1000 - 1 ≤ S ≤ 500 - -1000 ≤ X, Y ≤ 1000 SAMPLE INPUT 1 3 1 2 3 4 5 6 2 2 3 4 5 SAMPLE OUTPUT 2 3","solution":"def get_optimal_bike_station(T, test_cases): results = [] for case in test_cases: U, users, S, stations = case best_station = None min_max_distance = float(\'inf\') for station in stations: max_distance = 0 for user in users: distance = abs(user[0] - station[0]) + abs(user[1] - station[1]) max_distance = max(max_distance, distance) if max_distance < min_max_distance or (max_distance == min_max_distance and station < best_station): min_max_distance = max_distance best_station = station results.append(best_station) return results # Example of how to parse inputs and call the function def main(): import sys input = sys.stdin.read data = input().strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): U = int(data[index]) index += 1 users = [] for _ in range(U): x, y = int(data[index]), int(data[index + 1]) users.append((x, y)) index += 2 S = int(data[index]) index += 1 stations = [] for _ in range(S): x, y = int(data[index]), int(data[index + 1]) stations.append((x, y)) index += 2 test_cases.append((U, users, S, stations)) results = get_optimal_bike_station(T, test_cases) for result in results: print(result[0], result[1]) if __name__ == \\"__main__\\": main()"},{"question":"Given an array of integers, you need to identify the first integer that appears at least `k` times. If there is no such integer, return `-1`. # Input - The first line contains an integer `t` (1 leq t leq 100) — the number of test cases. - Each test case consists of two lines: - The first line contains two integers `n` (1 leq n leq 10^5) and `k` (1 leq k leq 100), where `n` is the number of elements in the array and `k` is the number of occurrences to check for. - The second line contains `n` integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the elements of the array. # Output For each test case, print a single line containing the first integer that appears at least `k` times in the array. If no such integer exists, print `-1`. # Example Input ``` 2 5 2 1 2 2 3 4 6 3 1 2 3 4 5 6 ``` Output ``` 2 -1 ``` # Notes In the first test case, the integer `2` appears exactly `2` times, which is the required occurrence. Hence, `2` is the output. In the second test case, no integer appears `3` times, so the output is `-1`.","solution":"def first_integer_k_times(test_cases): Returns a list of the first integers that appear at least k times for each test case. If no such integer exists, returns -1 for that test case. :param test_cases: List of test cases, each test case is a tuple (n, k, array). results = [] for n, k, arr in test_cases: counts = {} for num in arr: counts[num] = counts.get(num, 0) + 1 if counts[num] == k: results.append(num) break else: results.append(-1) return results def process_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, k = map(int, lines[index].split()) array = list(map(int, lines[index + 1].split())) test_cases.append((n, k, array)) index += 2 return test_cases"},{"question":"Alice has fallen into Wonderland, and to return home, she must solve a puzzle given by the Cheshire Cat. The puzzle consists of a string of lowercase English letters. The Cheshire Cat will consider Alice\'s solution correct if she can transform the given string into another string such that every letter appears an even number of times. As Alice can only perform the following operation unlimited times: - Pick any single letter and remove it from the string. Help Alice by finding the minimum number of times to remove letters to make each letter appear an even number of times or to say it\'s impossible. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the length of the string. - The second line contains the string s of length n consisting only of lowercase English letters. Output: - Print the minimum number of removals needed to make every letter frequency even, or print \\"IMPOSSIBLE\\" if it\'s not possible. Examples: Input: 7 aabbcac Output: 1 Input: 4 abcd Output: 4 Note: In the first example, Alice can remove one \'c\' to make the string \\"aabbca\\", where all letters \'a\', \'b\', and \'c\' appear an even number of times. In the second example, all the letters need to be removed because none of them can be paired to make their counts even, so the output is 4.","solution":"def min_removals_to_even(s): Returns the minimum number of removals needed to make every letter frequency even, or \\"IMPOSSIBLE\\" if it is not possible. from collections import Counter frequency = Counter(s) removal_count = 0 for count in frequency.values(): if count % 2 != 0: removal_count += 1 return removal_count"},{"question":"You are given an array of integers representing heights of a list of people standing in a line. Arrange the people in such a way that each person points not to themselves but to the first taller person in front of them. If there is no taller person, they should point to none. Return the modified array such that each element is replaced by the height of the first taller person standing in front of them. If no such person exists, replace it with a 0. Example 1: Input: heights = [4, 3, 6, 7, 5] Output: [6, 6, 7, 0, 0] Explanation: - 4\'s first taller person is 6 - 3\'s first taller person is 6 - 6\'s first taller person is 7 - 7 does not have a taller person in front - 5 does not have a taller person in front Example 2: Input: heights = [10, 5, 11, 9, 10] Output: [11, 11, 0, 10, 0] Explanation: - 10\'s first taller person is 11 - 5\'s first taller person is 11 - 11 does not have a taller person in front - 9\'s first taller person is 10 - 10 does not have a taller person in front Your Task: You don\'t need to read or print anything. Your task is to complete the function first_taller_person() which takes the heights array as an input parameter and returns the modified array. Expected Time Complexity: O(N) where N is the number of people in the list. Expected Space Complexity: O(N) Constraints: 1 <= heights.length <= 10^5 1 <= heights[i] <= 10^9","solution":"def first_taller_person(heights): This function takes a list of heights and returns a list where each element is replaced by the height of the first taller person standing in front of them. If no such person exists, it is replaced with 0. n = len(heights) result = [0] * n # initialize result array with 0 stack = [] # stack to store indices of the \'heights\' list for i in range(n-1, -1, -1): # Pop from the stack all the heights that are smaller than or equal to the current height while stack and heights[stack[-1]] <= heights[i]: stack.pop() # If stack is not empty, the top of the stack is the next taller person if stack: result[i] = heights[stack[-1]] # Push current index onto the stack stack.append(i) return result"},{"question":"You are given a list of intervals, where each interval represents a range of dates. Each date is represented as an integer number of days from a fixed starting point. You need to merge any overlapping intervals and return the resulting list of intervals. The intervals in the returned list should be in ascending order. Write a function `merge_intervals` that takes a list of intervals and merges any overlapping intervals. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of intervals. - The next n lines each contains two integers l_{i} and r_{i} (0 ≤ l_{i} ≤ r_{i} ≤ 10^9) — the start and end of the i-th interval. # Output - The output should be a series of lines, each containing two integers representing the merged intervals in ascending order. # Examples Example 1 Input: ``` 3 1 3 2 6 8 10 ``` Output: ``` 1 6 8 10 ``` Example 2 Input: ``` 4 1 4 4 5 6 8 7 9 ``` Output: ``` 1 5 6 9 ``` Example 3 Input: ``` 2 5 5 1 2 ``` Output: ``` 1 2 5 5 ``` # Note In Example 1, intervals [1, 3] and [2, 6] overlap and are merged to form [1, 6]. In Example 2, intervals [1, 4] and [4, 5] overlap and merge to form [1, 5], and intervals [6, 8] and [7, 9] overlap and merge to form [6, 9]. In Example 3, there is no overlap between the intervals, so they remain as is.","solution":"def merge_intervals(intervals): Merges a list of intervals. Parameters: intervals (List[List[int]]): A list of intervals where each interval is represented as a list [start, end]. Returns: List[List[int]]: A list of merged intervals. # Sort intervals by the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If merged list is empty or there is no overlap, append the interval if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is overlap, so we merge the intervals merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"There is a town with n intersections and m two-way streets. Each street connects two intersections and has a non-negative length. A traveller wants to go from intersection A to intersection B in the shortest possible time. Write a program that finds the shortest path and prints its length. Input The first line contains three integers n, m, and t (1 ≤ n ≤ 100, 1 ≤ m ≤ 10,000, 1 ≤ t ≤ n), where n is the number of intersections, m is the number of streets, and t is the number of trips the traveller plans to make. Each of the next m lines contains three integers u, v and l (1 ≤ u, v ≤ n, 0 ≤ l < 10,000), where u and v are the intersections connected by a street, and l is the length of the street. Each of the last t lines contains two integers a and b (1 ≤ a, b ≤ n), representing a trip from intersection a to intersection b. Output For each trip, print a single integer — the length of the shortest path from a to b. If there is no path, print -1. Examples Input 5 6 3 1 2 10 1 3 20 2 4 10 3 4 10 4 5 10 3 5 30 1 5 2 3 1 4 Output 30 20 20 Note In the first trip, the path from 1 to 5 can be 1->2->4->5 with a total length of 30. In the second trip, the shortest path from 2 to 3 is 2->4->3 with a total length of 20. In the third trip, the path from 1 to 4 is 1->2->4 with a total length of 20.","solution":"import heapq def dijkstra(n, edges, start, end): graph = [[] for _ in range(n)] for u, v, l in edges: graph[u - 1].append((v - 1, l)) graph[v - 1].append((u - 1, l)) dist = [float(\'inf\')] * n dist[start - 1] = 0 priority_queue = [(0, start - 1)] while priority_queue: d, node = heapq.heappop(priority_queue) if d > dist[node]: continue for neighbor, length in graph[node]: new_dist = dist[node] + length if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(priority_queue, (new_dist, neighbor)) return dist[end - 1] if dist[end - 1] != float(\'inf\') else -1 def shortest_paths(n, m, t, street_info, trips): results = [] for a, b in trips: result = dijkstra(n, street_info, a, b) results.append(result) return results"},{"question":"You are given a string S consisting of lowercase English alphabets. You are also given another string P which is a subsequence of S. Your objective is to determine if there exists a permutation of P which is a subsequence of S as well. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Input Format - The first line contains the string S. - The second line contains the string P. Output Format - Output \\"Yes\\" if there exists a permutation of P that is a subsequence of S, otherwise output \\"No\\". Constraints - 1 leq |S|, |P| leq 10^5 - Both S and P consist of lowercase English alphabets only. Sample Input 1 abcde aed Sample Output 1 Yes Sample Input 2 abcde aef Sample Output 2 No","solution":"def is_permutation_subsequence(S, P): from collections import Counter # Count the characters in P target_count = Counter(P) # Sliding window to find if any permutation of P is a subsequence in S window_count = Counter() left = right = 0 required = len(target_count) formed = 0 for char in S: window_count[char] += 1 if char in target_count and window_count[char] == target_count[char]: formed += 1 if formed == required: return \\"Yes\\" while formed == required and left <= right: window_count[S[left]] -= 1 if S[left] in target_count and window_count[S[left]] < target_count[S[left]]: formed -= 1 left += 1 right += 1 return \\"No\\""},{"question":"Consider the following string pattern matching: ```Python match_pattern(\\"abc\\", \\"a.b\\") = True # the \'.\' in the pattern can match any single character match_pattern(\\"acd\\", \\"a.c\\") = True # the \'.\' matches \'c\' match_pattern(\\"abcd\\", \\"a.d\\") = False # the \'.\' matches only one character, but there are more characters before \'d\' ``` Given a string and a pattern, return whether the string matches the pattern. The pattern may contain dots (\'.\') which can match any single character in the string at that position. However, every other character in the pattern should strictly match the corresponding character in the string. Input will consist of only lowercase letters for both the string and the pattern, and the pattern will contain at most one dot (\'.\'). More examples in test cases. Good luck!","solution":"def match_pattern(s, p): Checks if the given string matches the given pattern. The pattern may contain at most one dot (\'.\'), which can match any single character. # Check if the lengths of the string and pattern match if len(s) != len(p): return False for i in range(len(s)): # \'.\' in pattern can match any single character in the string if p[i] != \'.\' and s[i] != p[i]: return False return True"},{"question":"Given an array of integers, determine whether it can be rearranged to form a strictly increasing or strictly decreasing sequence by removing exactly one element. A sequence is strictly increasing if every consecutive element is greater than the previous one and strictly decreasing if every consecutive element is less than the previous one. # Input The first line of input contains a single integer t (1 le t le 10^4), the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (2 le n le 2 cdot 10^5), the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) which is the array to be checked. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. # Output For each test case, output \\"YES\\" if it is possible to remove exactly one element from the array to make it strictly increasing or strictly decreasing. Otherwise, output \\"NO\\". # Examples Input ``` 3 5 3 4 2 5 6 4 1 2 4 3 6 7 8 9 10 11 12 ``` Output ``` YES YES NO ``` Note In the first test case, removing the element \'2\' from the array results in the sequence [3, 4, 5, 6], which is strictly increasing. In the second test case, removing the element \'4\' from the array results in the sequence [1, 2, 3], which is strictly increasing. In the third test case, the sequence is already strictly increasing, so no element needs to be removed, making the answer \\"NO\\".","solution":"def can_form_strict_sequence(n, array): def is_strictly_increasing(arr): return all(x < y for x, y in zip(arr, arr[1:])) def is_strictly_decreasing(arr): return all(x > y for x, y in zip(arr, arr[1:])) def can_be_strict_by_removing_one(arr): for i in range(len(arr)): new_array = arr[:i] + arr[i+1:] if is_strictly_increasing(new_array) or is_strictly_decreasing(new_array): return True return False if n == 2: return \\"YES\\" if is_strictly_increasing(array) or is_strictly_decreasing(array): return \\"NO\\" return \\"YES\\" if can_be_strict_by_removing_one(array) else \\"NO\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: n, array = case result = can_form_strict_sequence(n, array) results.append(result) return results"},{"question":"Write a function called `find_prime_factors` that takes an integer `n` and returns a list of its prime factors. Prime factors are the prime numbers that divide `n` exactly without leaving a remainder. The prime factors should be listed in ascending order. Assume that `2 <= n <= 10^6`. For example: ```python find_prime_factors(28) # Should return [2, 7] find_prime_factors(45) # Should return [3, 5] find_prime_factors(97) # Should return [97] ``` Your function should include error checking to handle the cases where `n` is less than `2` and return an empty list in such cases.","solution":"def find_prime_factors(n): Returns a list of prime factors of the integer n in ascending order. If n is less than 2, returns an empty list. if n < 2: return [] prime_factors = [] # Check for the factor of 2 while n % 2 == 0: if 2 not in prime_factors: prime_factors.append(2) n //= 2 # Check for odd factors from 3 upwards factor = 3 max_factor = int(n**0.5) + 1 while factor <= max_factor: while n % factor == 0: if factor not in prime_factors: prime_factors.append(factor) n //= factor factor += 2 # If n is now a prime number greater than 2 if n > 2: prime_factors.append(n) return prime_factors"},{"question":"Alice is organizing a virtual treasure hunt game. The game is encoded in a rectangular grid of cells, where each cell contains a symbol. Alice needs to place exactly two treasure chests in the grid. However, there are some constraints to placement to ensure fairness and challenge in the game: 1. Every row in the grid must contain exactly one treasure chest. 2. No two treasure chests should be placed in the same column of the grid. You\'re required to determine if it\'s possible to place the two treasure chests in the grid according to the rules specified, and if possible, provide one of the valid placements. -----Input----- The first line contains two integers n and m (2 le n, m le 100) — the number of rows and columns in the grid, respectively. The next n lines each contain a string of length m consisting of lowercase English letters and the character \'T\', where \'T\' represents an obstacle cell where a treasure chest cannot be placed. -----Output----- If there is a valid placement of the two treasure chests, print \\"YES\\" followed by two lines, each line containing two integers representing the row and column (1-based index) where the treasure chests should be placed. Otherwise, print \\"NO\\". If there are multiple valid solutions, you may output any of them. -----Example----- Input 3 3 aTb ccc dbc Output YES 1 1 2 2 -----Note----- In the example: 1. One of the valid placements is placing a treasure chest in the first row and first column (cell \'a\') and the second treasure chest in the second row and second column (cell \'c\'). 2. Another valid solution would be placing a treasure chest in the second row and third column (cell \'c\') and the third row and first column (cell \'d\').","solution":"def find_treasure_placement(grid, n, m): positions = [] for row in range(n): found = False for col in range(m): if grid[row][col] != \'T\': # Check if the column is already taken by the other treasure if any(pos[1] == col for pos in positions): continue positions.append((row + 1, col + 1)) found = True break if not found: return \\"NO\\" if len(positions) == n: result = [\\"YES\\"] for pos in positions: result.append(f\\"{pos[0]} {pos[1]}\\") return \\"n\\".join(result) else: return \\"NO\\""},{"question":"Write a function that takes a list of integers and returns the smallest positive integer (greater than 0) that does not occur in the list. Example: ```python find_smallest_missing_positive([1, 2, 3, 4, 6]) # => 5 find_smallest_missing_positive([0, 2, 2, 1, 5, 7]) # => 3 find_smallest_missing_positive([-1, -2, -3, 1, 2, 3]) # => 4 ```","solution":"def find_smallest_missing_positive(nums): Returns the smallest positive integer that is missing from the list nums. nums_set = set(nums) i = 1 while i in nums_set: i += 1 return i"},{"question":"In this problem, you are going to implement a simple version of a web crawler that will help you fetch URLs from web pages. * You will be given a start URL and a list of URLs representing a web page and its corresponding outgoing links. * Your task is to fetch all URLs that are reachable from the start URL, using a breadth-first search (BFS) strategy. You should complete the Python function `crawl(start_url, links)` that takes in: - a string `start_url` representing the URL of the starting page. - a dictionary `links` where each key is a string representing a URL, and the value is a list of strings representing the URLs to which the key URL has outgoing links. Your function should return a list of strings representing all URLs that are reachable from the `start_url`, in the order they are fetched using BFS. If the start URL does not exist in the links dictionary, return an empty list. # Constraints - The length of any URL will not exceed 100 characters. - The maximum number of URLs (`len(links)`) will not exceed 1000. - URLs are distinct and there are no duplicate URLs in the outgoing links list for any URL. # Example ```python start_url = \\"http://example.com\\" links = { \\"http://example.com\\": [\\"http://example.com/about\\", \\"http://example.com/contact\\"], \\"http://example.com/about\\": [\\"http://example.com/team\\"], \\"http://example.com/contact\\": [\\"http://example.com/privacy-policy\\"], \\"http://example.com/team\\": [], \\"http://example.com/privacy-policy\\": [] } result = crawl(start_url, links) print(result) ``` Output: ``` [\\"http://example.com\\", \\"http://example.com/about\\", \\"http://example.com/contact\\", \\"http://example.com/team\\", \\"http://example.com/privacy-policy\\"] ``` In the example above, the `crawl` function starts with the URL \\"http://example.com\\". It then explores its outgoing links to \\"http://example.com/about\\" and \\"http://example.com/contact\\". From these URLs, it continues to explore further until all reachable URLs are fetched. The result is a list of all reachable URLs in the order they are crawled using BFS.","solution":"from collections import deque def crawl(start_url, links): This function returns a list of URLs reachable from the start_url using BFS. Parameters: start_url (str): The starting URL. links (dict): A dictionary where keys are URLs and values are lists of URLs representing outgoing links. Returns: list: A list of URLs reachable from the start_url in BFS order. if start_url not in links: return [] visited = set() queue = deque([start_url]) result = [] while queue: current_url = queue.popleft() if current_url not in visited: visited.add(current_url) result.append(current_url) for next_url in links[current_url]: if next_url not in visited: queue.append(next_url) return result"},{"question":"Dan loves playing with numbers and is particularly fascinated by properties of prime numbers. He came up with a unique problem involving consecutive subsequences of prime numbers. A \\"Prime Consecutive Subsequence\\" is a consecutive subsequence in a sequence where all the numbers are prime. Dan needs your help to find the longest Prime Consecutive Subsequence in a given list of numbers. Write a program to find the length of the longest Prime Consecutive Subsequence in the list. Input Format The first line contains an integer N. The second line contains N space-separated integers. Output Format Output the length of the longest Prime Consecutive Subsequence. Constraints 1 ≤ N ≤ 10^5 Each number in the sequence is a positive integer ≤ 10^6 Sample Input 10 1 2 3 5 4 7 11 13 4 6 Sample Output 5 Explanation The subsequences [2, 3, 5], [7, 11, 13] are the longest Prime Consecutive Subsequences, each having a length of 3. Hence, the output is 3.","solution":"import math def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def longest_prime_consecutive_subsequence(numbers): max_length = 0 current_length = 0 for number in numbers: if is_prime(number): current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length # Example usage # N = 10 # numbers = [1, 2, 3, 5, 4, 7, 11, 13, 4, 6] # print(longest_prime_consecutive_subsequence(numbers)) # Output: 3"},{"question":"At Akabe High School, students participate in a problem-solving competition where they work individually to solve a set of problems. Each problem has a specific difficulty score, and students have different problem-solving capabilities, which are represented as the maximum difficulty score they can handle. Each student attempts to solve the hardest problem they can manage from the remaining problems. Create a program that, given the number of students and their respective capabilities, along with the problems and their difficulty scores, outputs the maximum number of problems that can be solved based on the student capabilities. # Input The input consists of multiple datasets. The first line of the input is an integer T (0 ≤ T ≤ 100), which represents the number of test cases. Each test case is as follows: - The first line contains an integer S (1 ≤ S ≤ 1000) representing the number of students. - The second line contains S integers representing the capabilities of the students, such that each capability is a distinct integer between 1 and 1000. - The third line contains an integer P (1 ≤ P ≤ 1000) representing the number of problems. - The fourth line contains P integers representing the difficulty scores of the problems, such that each difficulty score is a distinct integer between 1 and 1000. # Output For each test case, output a single line containing the maximum number of problems that can be solved. # Example Input ``` 2 3 3 1 2 5 1 2 3 4 5 4 5 1 3 2 6 10 2 3 6 7 5 ``` Output ``` 3 3 ``` # Explanation - For the first test case, students with capabilities [3, 1, 2] can solve up to 3 problems because each student can match one of the problem difficulties [1, 2, 3] (student 3 solves problem 3, student 2 solves problem 2, student 1 solves problem 1). - For the second test case, students with capabilities [5, 1, 3, 2] can solve at most 3 out of 6 problems because the highest three capabilities can match with the problems [1, 2, 3] (student 5 solves problem 7, student 3 solves problem 6, student 3 solves problem 5, student 1 solves problem 2).","solution":"def max_solved_problems(T, test_cases): Calculates the maximum number of problems that can be solved based on student capabilities. Args: T (int): Number of test cases. test_cases (list): List of test cases, where each test case contains: - number of students - list of student capabilities - number of problems - list of problem difficulties Returns: list: List containing the maximum number of problems solved for each test case. results = [] for case_index in range(T): S, capabilities, P, difficulties = test_cases[case_index] # Sort both capabilities and difficulties capabilities.sort() difficulties.sort() max_problems_solved = 0 problem_index = 0 for capability in capabilities: while problem_index < P and difficulties[problem_index] <= capability: problem_index += 1 max_problems_solved += 1 break results.append(max_problems_solved) return results"},{"question":"You are given an integer n. A graph is defined with n nodes numbered 1 to n and m edges. Each edge connects two nodes and has a positive weight. A path in the graph is defined as a sequence of nodes, starting from node 1 and ending at node n, such that each pair of consecutive nodes in the sequence is connected by an edge. The weight of a path is defined as the sum of the weights of the edges it contains. Your task is to find the shortest path from node 1 to node n and print its weight. If there is no path from node 1 to node n, print -1. Input Format - The first line contains two integers n and m: the number of nodes and the number of edges, respectively. - The next m lines each contain three integers u, v, and w, denoting that there is an edge between node u and node v with weight w. Constraints - 2 leq n leq 1000 - 1 leq m leq 10000 - 1 leq u, v leq n - 1 leq w leq 100000 - The graph can contain self-loops and multiple edges between the same pair of nodes. Output Format Print a single integer - the weight of the shortest path from node 1 to node n. If there is no path, print -1. Sample Input 4 5 1 2 4 2 3 1 3 4 5 1 3 3 1 4 10 Sample Output 8 Explanation In this case, n=4 and there are 5 edges. The shortest path from node 1 to node 4 is 1 rightarrow 2 rightarrow 3 rightarrow 4 with a total weight of 4 + 1 + 3 = 8. Thus, the output is 8.","solution":"import heapq def shortest_path(n, m, edges): def dijkstra(graph, start, end): heap = [(0, start)] distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[start] = 0 while heap: current_distance, current_node = heapq.heappop(heap) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances[end] graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) shortest_distance = dijkstra(graph, 1, n) return shortest_distance if shortest_distance != float(\'inf\') else -1"},{"question":"Sam is playing a game with a string of text consisting of lowercase English letters. He can perform the following operation as many times as he likes: choose a substring and reverse it. The goal is to determine if it is possible to transform the given string into a palindrome by performing zero or more such operations. A palindrome is a string that reads the same forward and backward. Given a string s, write a program to determine whether it is possible to rearrange the string into a palindrome by reversing some of its substrings any number of times. Input Format: - The input consists of a single line containing a string s of length n. Constraints: - 1 leq n leq 10^5 - s consists of lowercase English letters. Output Format: - Print \\"YES\\" if it is possible to rearrange the string into a palindrome, and \\"NO\\" otherwise. Sample Input 0: aabb Sample Output 0: YES Sample Input 1: abc Sample Output 1: NO Explanation 0: For the first sample, the string \\"aabb\\" can be rearranged into a palindrome such as \\"abba\\" or \\"baab\\". Explanation 1: For the second sample, the string \\"abc\\" cannot be rearranged into any palindromic form.","solution":"def can_rearrange_to_palindrome(s): Determine if it is possible to rearrange the string into a palindrome. Args: s (str): The input string. Returns: str: \'YES\' if the string can be rearranged into a palindrome, \'NO\' otherwise. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into a palindrome if at most one character has an odd count if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a binary string representation of a numeric value. Your task is to implement the following operations on this binary string: 1. **Invert**: Replace every \'0\' with \'1\' and every \'1\' with \'0\'. 2. **Rotate**: Perform a left circular rotation of the string by one position. 3. **Count Consecutive Ones**: Count the maximum number of consecutive \'1\'s in the binary string. Write a function that takes a binary string and a list of operations and applies these operations in the order they appear. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case contains two lines. The first line contains a binary string B. The second line contains a space-separated list of operations to be performed in the given order: \\"invert\\", \\"rotate\\", \\"count-consecutive-ones\\". ------ Output ------ For each test case, print a single line. If the last operation is \\"count-consecutive-ones\\", output the integer result. Otherwise, output the final binary string after performing all operations. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |B| ≤ 10^{5} The operations list will always end with \\"count-consecutive-ones\\". ----- Sample Input 1 ------ 3 1101001 invert rotate count-consecutive-ones 111111 count-consecutive-ones 101010 rotate invert count-consecutive-ones ----- Sample Output 1 ------ 110 6 3 ----- Explanation 1 ------ Example case 1: 1. Invert: 0010110 2. Rotate: 0101100 3. Count Consecutive Ones: 2 Example case 2: 1. Count Consecutive Ones: 6 (Since no modifications were applied to the string) Example case 3: 1. Rotate: 010101 2. Invert: 101010 3. Count Consecutive Ones: 1","solution":"def perform_operations(binary_string, operations): def invert(s): return \'\'.join(\'1\' if ch == \'0\' else \'0\' for ch in s) def rotate(s): return s[1:] + s[0] def count_consecutive_ones(s): count = max_count = 0 for ch in s: if ch == \'1\': count += 1 max_count = max(max_count, count) else: count = 0 return max_count for operation in operations: if operation == \'invert\': binary_string = invert(binary_string) elif operation == \'rotate\': binary_string = rotate(binary_string) elif operation == \'count-consecutive-ones\': return count_consecutive_ones(binary_string) return binary_string def process_test_cases(test_cases): results = [] for binary_string, operations in test_cases: operations_list = operations.split() result = perform_operations(binary_string, operations_list) results.append(result) return results"},{"question":"Given a list of strings, write a program to group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The program should output a list of lists, where each sublist contains words that are anagrams of each other. For example, given the input: `[\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]` The output should be: ``` [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] ``` All inputs are lowercase and you can assume no duplicates exist in the input list. Write a function `groupAnagrams(words: List[str]) -> List[List[str]]` to accomplish this task. Focus on creating an efficient solution in terms of time complexity.","solution":"from collections import defaultdict from typing import List def groupAnagrams(words: List[str]) -> List[List[str]]: anagrams = defaultdict(list) for word in words: # Sort the word to form the key key = \'\'.join(sorted(word)) anagrams[key].append(word) return list(anagrams.values())"},{"question":"Jane loves string manipulations and puzzles. One day, she comes across a mysterious string challenge. She is given a string S consisting of lowercase and uppercase English letters. Her task is to find the length of the longest substring that contains a unique set of characters, i.e., where no character repeats. Your task is to help Jane solve this problem. Input First line contains number of test cases T. Each test case contains a string S. Output For each test case, print the length of the longest substring with all unique characters. Constraints: 1 ≤ T ≤ 1000 1 ≤ length of S ≤ 100000 SAMPLE INPUT 3 abcabcbb bbbbb pwwkew SAMPLE OUTPUT 3 1 3 Explanation Test Case #1: Input string is \\"abcabcbb\\" The longest substring with all unique characters is \\"abc\\", thus the length is 3. Test Case #2: Input string is \\"bbbbb\\" The longest substring with all unique characters is \\"b\\", thus the length is 1. Test Case #3: Input string is \\"pwwkew\\" The longest substring with all unique characters is \\"wke\\", thus the length is 3.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all unique characters. char_map = {} max_length = 0 start = 0 for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def solve(test_cases): results = [] for s in test_cases: results.append(longest_unique_substring_length(s)) return results"},{"question":"You are developing an application for a bookstore. One of the features requested is to find the top-selling books from a list of book sales. Given a list of book sales, write a function that returns the titles of the top 3 best-selling books. If there are ties (books with the same number of sales), return the titles in lexicographical order. Each sale is represented as a dictionary with keys \'title\' and \'copies\'. The \'title\' is a string representing the name of the book, and \'copies\' is an integer representing the number of copies sold. Examples: ```python top_selling_books([ {\'title\': \'Book A\', \'copies\': 30}, {\'title\': \'Book B\', \'copies\': 25}, {\'title\': \'Book C\', \'copies\': 30}, {\'title\': \'Book D\', \'copies\': 20}, {\'title\': \'Book E\', \'copies\': 35} ]) == [\'Book E\', \'Book A\', \'Book C\'] top_selling_books([ {\'title\': \'Book F\', \'copies\': 42}, {\'title\': \'Book G\', \'copies\': 41}, {\'title\': \'Book H\', \'copies\': 42}, {\'title\': \'Book I\', \'copies\': 41}, ]) == [\'Book F\', \'Book H\', \'Book G\'] ```","solution":"def top_selling_books(sales): Returns the titles of the top 3 best-selling books sorted by number of copies sold and then lexicographically. # Sort the books by copies sold in descending order and then by title lexicographically in case of ties sorted_sales = sorted(sales, key=lambda x: (-x[\'copies\'], x[\'title\'])) # Extract the titles of the top 3 best-selling books top_3_titles = [book[\'title\'] for book in sorted_sales[:3]] return top_3_titles"},{"question":"Word Transformation Game In a word transformation game, you are given a starting word and a target word. The goal is to transform the starting word into the target word using a series of valid word transformations. Each transformation must change exactly one letter and the transformed word must be found in a given list of valid words (the word list). Write a program that determines the minimum number of transformations needed to change the starting word into the target word. If it is not possible to transform the starting word into the target word with the given word list, return -1. Input The input consists of multiple datasets. Each dataset is formed as follows: > Starting word > Target word > Number of valid words N > List of valid words (each word on a new line) The length of the starting word and the target word is the same and is denoted by L (1 ≤ L ≤ 10). The number of valid words N is such that 1 ≤ N ≤ 10^4. Each word in the word list has a length of exactly L and consists only of lowercase letters. The input ends with a line with a single zero. Output For each dataset, output the minimum number of transformations needed in a line. If transformation is not possible, output -1. Sample Input hit cog 6 hot dot dog lot log cog hit cat 3 hat bat cat star tars 4 stars tars bars cars 0 Output for the Sample Input 4 2 -1 Example Input hit cog 6 hot dot dog lot log cog hit cat 3 hat bat cat star tars 4 stars tars bars cars 0 Output 4 2 -1","solution":"from collections import deque def word_transformation(start, target, words): Determines the minimum number of transformations needed to change the starting word into the target word. if start == target: return 0 words_set = set(words) if target not in words_set: return -1 queue = deque([(start, 0)]) visited = set([start]) while queue: current_word, steps = queue.popleft() for i in range(len(current_word)): for char in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + char + current_word[i+1:] if next_word == target: return steps + 1 if next_word in words_set and next_word not in visited: visited.add(next_word) queue.append((next_word, steps + 1)) return -1 def process_input(data): results = [] i = 0 while i < len(data): start = data[i].strip() i += 1 if start == \\"0\\": break target = data[i].strip() i += 1 n = int(data[i].strip()) i += 1 words = [data[j].strip() for j in range(i, i + n)] i += n results.append(word_transformation(start, target, words)) return results"},{"question":"Write a function that accepts a string containing both letters and digits, and returns a string where all the digits are moved to the front, maintaining their original relative order, and all the letters are moved to the end, also maintaining their original relative order. For example: Input: \\"a1b2c3\\" Output: \\"123abc\\" Input: \\"4d3a5b2c\\" Output: \\"4352dabc\\" Input: \\"abc123\\" Output: \\"123abc\\"","solution":"def move_digits_to_front(s): This function accepts a string containing both letters and digits, and returns a string where all the digits are moved to the front, maintaining their original relative order, and all the letters are moved to the end, also maintaining their original relative order. digits = [char for char in s if char.isdigit()] letters = [char for char in s if char.isalpha()] return \'\'.join(digits + letters)"},{"question":"In a magical forest, there are N different types of trees. Each type of tree can either be enchanted or not enchanted with a special charm. Therefore, there are 2^N possible states for the forest depending on which trees are enchanted. The wizard Merlin wants to perform experiments on the forest and needs to create different forest configurations, satisfying both of the following conditions: - Each type of tree is enchanted in exactly three or more different configurations. - All configurations are distinct and no configuration is repeated. Given N and a prime number P, determine the number of distinct forest configurations that satisfy these conditions, modulo P. -----Constraints----- - 3 leq N leq 3000 - 10^8 leq P leq 10^9 + 7 - N is an integer. - P is a prime number. -----Subscores----- - 600 points will be awarded for passing the test set satisfying N ≤ 50. -----Input----- Input is given from Standard Input in the following format: N P -----Output----- Print the number of distinct forest configurations that satisfy the conditions, modulo P. -----Sample Input----- 3 1000000007 -----Sample Output----- 4 For N = 3, the possible configurations where each type of tree is enchanted exactly three or more times include: - The configurations can be: \\"101\\", \\"110\\", \\"011\\", \\"111\\".","solution":"def count_configurations(N, P): Return the number of distinct forest configurations that satisfy the conditions, modulo P. if N < 3: return 0 total_configurations = 2 ** N configurations_satisfying_condition = total_configurations - (N + 1) return configurations_satisfying_condition % P # Example for N = 3 and P = 1000000007 # Should print 4 print(count_configurations(3, 1000000007))"},{"question":"A school is organizing a series of coding competitions over several days. Each day, students need to solve a specific number of coding problems. The problem statement and its difficulty level is fixed in advance. The difficulty of each problem on a particular day is identical, and they progress consecutively over the days in increasing difficulty level. You know, for N consecutive days: - On day 1, the difficulty for each problem is D. - On day 2, the difficulty level increases by 1 (i.e., D + 1). - On day 3, the difficulty level further increases by 1 (i.e., D + 2). - And so on. Given the initial difficulty level and the series of days students solved problems, find the sum of the difficulties of the problems for each day. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. Then the test cases follow. - Each test case contains two integers N and D, where N is the number of consecutive days and D is the initial difficulty level. ------ Output Format ------ For each test case, output a single integer, the sum of the difficulties for the N days. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ D ≤ 100 ------ Sample Input 1 ------ 4 1 1 2 3 3 2 4 4 ------ Sample Output 1 ------ 1 7 12 22 ------ Explanation 1 ------ Test Case 1: Only 1 day, difficulty = 1 ⇒ Sum = 1. Test Case 2: Day 1: Difficulty = 3 Day 2: Difficulty = 4 Total Sum = 3 + 4 = 7. Test Case 3: Day 1: Difficulty = 2 Day 2: Difficulty = 3 Day 3: Difficulty = 4 Total Sum = 2 + 3 + 4 = 9. Test Case 4: Day 1: Difficulty = 4 Day 2: Difficulty = 5 Day 3: Difficulty = 6 Day 4: Difficulty = 7 Total Sum = 4 + 5 + 6 + 7 = 22. Each test case ensures that D days’ difficulties sum are calculated properly and appended with the output list.","solution":"def sum_of_difficulties(T, test_cases): Calculates the sum of difficulties for each test case. Parameters: T (int): The number of test cases. test_cases (list of tuples): Each tuple contains two integers, N (number of days) and D (initial difficulty level). Returns: list of int: The sum of difficulties for each test case. results = [] for N, D in test_cases: total = 0 for i in range(N): total += (D + i) results.append(total) return results # Function to format the input and output properly def handle_input_output(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [(int(data[2*i + 1]), int(data[2*i + 2])) for i in range(T)] results = sum_of_difficulties(T, test_cases) for result in results: print(result)"},{"question":"You are given a series of integers and need to find the length of the longest subsequence where each pair of consecutive elements in the subsequence has a difference of exactly k. A subsequence is derived from the list of integers by deleting some or none of the elements without changing the order of the remaining elements. Input Format: - The first line contains an integer n, the length of the list of integers. - The second line contains n integers separated by spaces representing the list of integers. - The third line contains a single integer k. Output Format: Print the length of the longest subsequence with the given property. Constraints: 1 ≤ n ≤ 1000000 |arr[i]| ≤ 10^9 for all valid i 1 ≤ k ≤ 1000000 SAMPLE INPUT 6 1 2 3 4 5 6 1 SAMPLE OUTPUT 6 Explanation: The longest subsequence where each pair of consecutive elements has a difference of 1 is the entire list: [1, 2, 3, 4, 5, 6]. For example, if the input instead was: SAMPLE INPUT 7 9 4 7 2 10 8 1 3 SAMPLE OUTPUT 3 Explanation: The longest subsequence where each pair of consecutive elements has a difference of 3 is [1, 4, 7] or [4, 7, 10], so the length is 3.","solution":"def longest_subsequence_with_difference(arr, k): n = len(arr) if n == 0: return 0 dp = {} max_length = 1 for number in arr: if number - k in dp: dp[number] = dp[number - k] + 1 else: dp[number] = 1 max_length = max(max_length, dp[number]) return max_length # Reading input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) k = int(data[n+1]) result = longest_subsequence_with_difference(arr, k) print(result)"},{"question":"Given a matrix of size `n x m` where each cell contains an integer, write a function to find the sum of the maximum elements of every row. # Example 1: ``` Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: 18 Explanation: The maximum elements of each row are [3, 6, 9]. Their sum is 3 + 6 + 9 = 18. ``` # Example 2: ``` Input: matrix = [ [10, 20, 30], [5, 15, 25], [7, 14, 21] ] Output: 76 Explanation: The maximum elements of each row are [30, 25, 21]. Their sum is 30 + 25 + 21 = 76. ``` # Your Task: You don\'t need to read input or print anything. Complete the function `sumOfMaxElements` which takes the matrix as input parameter and returns the sum of the maximum elements of each row. # Expected Time Complexity: O(n * m) # Expected Auxiliary Space: O(1) # Constraints: - 1 <= n, m <= 500 - -10^6 <= matrix[i][j] <= 10^6","solution":"def sumOfMaxElements(matrix): Returns the sum of the maximum elements of each row in the given matrix. return sum(max(row) for row in matrix)"},{"question":"Reverse Words in a String Overview You are given a string of words separated by spaces. Your task is to reverse the order of words in the string while maintaining the original spacing between words. For example, given the string \\"hello world\\", the reversed string is \\"world hello\\". Task Implement a function `reverseWords(str)` in Python that takes a string `str` as an input and returns a new string with the words in reverse order. Example ```python assert reverseWords(\\"hello world\\") == \\"world hello\\" assert reverseWords(\\"The quick brown fox\\") == \\"fox brown quick The\\" assert reverseWords(\\" Leading and trailing spaces \\") == \\" spaces trailing and Leading \\" ``` Constraints - The input string will always contain at least one word. - Words are defined as sequences of non-space characters. - Make sure to preserve the spaces between words as they were in the original string.","solution":"def reverseWords(s: str) -> str: Reverse the words in a string while preserving the original spaces. Args: s (str): The input string. Returns: str: The string with words reversed. words = s.split() reversed_words = list(reversed(words)) reversed_string = \\" \\".join(reversed_words) return reversed_string"},{"question":"You are given an array of `n` integers. Your task is to find a subarray (contiguous elements) such that the sum of the elements in the subarray is maximized. However, there is an additional constraint: your chosen subarray must include at least one positive integer. If there are multiple subarrays with the same maximum sum, output the one which appears first in the array. # Input - The first line of input contains a single integer `n` (1 ≤ n ≤ 100,000), representing the number of elements in the array. - The second line contains `n` integers separated by spaces, representing the elements of the array. The values of the integers lie in the range `[-1,000,000, 1,000,000]`. # Output - Print two space-separated integers: the maximum sum of a subarray that includes at least one positive integer, and the starting index of that subarray (1-based index). # Sample Input 1 ``` 5 1 -2 3 -4 5 ``` # Sample Output 1 ``` 5 1 ``` # Sample Input 2 ``` 8 -1 -2 -3 -4 -5 4 -1 2 ``` # Sample Output 2 ``` 5 6 ``` # Explanation Sample Input 1 - The subarray [1] yields the maximum sum which is 1 (starting index is 1). - The subarray [1, -2, 3, -4, 5] also yields a sum which is 3 (starting index is 1). - Among the subarrays that include at least one positive integer, the one with the maximum sum (5) starts at index 5 with subarray [5]. Sample Input 2 - Subarray [-1, -2, -3, -4, -5, 4, -1, 2] yields the maximum sum which is 5 (starting index is 6). The implementation should also handle cases where all elements are negative but one element, ensuring at least one positive element.","solution":"def max_subarray_with_positive(nums): n = len(nums) # Initially, set all necessary variables max_sum = float(\'-inf\') current_sum = 0 start_index = -1 end_index = -1 temp_start = 0 has_positive = any(num > 0 for num in nums) if not has_positive: return None # Return None if there\'s no positive number in the entire array for i in range(n): if current_sum <= 0: # Start a new subarray current_sum = nums[i] temp_start = i else: # Continue the current subarray current_sum += nums[i] if current_sum > max_sum and any(num > 0 for num in nums[temp_start:i + 1]): max_sum = current_sum start_index = temp_start end_index = i return max_sum, start_index + 1 # Return result with 1-based index"},{"question":"You are given a string S consisting of lowercase English letters. You need to answer Q queries, each query consists of a string P for which you need to find out whether P is a subsequence of S or not. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining characters. Example 1: Input: S = \\"abcdef\\" Q = 2 Queries = [\\"abc\\", \\"acf\\"] Output: YES YES Explanation: For query 1: \\"abc\\" is a subsequence of \\"abcdef\\" as characters in \\"abc\\" appear in order. For query 2: \\"acf\\" is a subsequence of \\"abcdef\\" as characters in \\"acf\\" appear in order. Example 2: Input: S = \\"xyz\\" Q = 1 Queries = [\\"xyy\\"] Output: NO Explanation: For query 1: \\"xyy\\" is not a subsequence of \\"xyz\\" because \'y\' appears twice in the query but only once in the main string S. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isSubsequence() which takes a string S and an integer Q and a 2D array Queries[][] as input parameters and returns an array of answers (YES or NO) for each query. Expected Time Complexity: O(|S| * Q) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^5 1 ≤ Q ≤ 10^4 1 ≤ |P| ≤ 10","solution":"def isSubsequence(S, Q, Queries): Determines if each query string in Queries is a subsequence of string S. Parameters: - S (str): The main string. - Q (int): Number of queries. - Queries (list of str): List of query strings. Returns: - list of str: List of \'YES\' or \'NO\' for each query. results = [] for query in Queries: it = iter(S) if all(char in it for char in query): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You\'re managing a small library system where books are classified into different categories based on their publication year. Each book has a title and a publication year. Given a list of books, each represented as a dictionary with keys \'title\' and \'year\', categorize each book into a \\"decade\\" bucket. Write a function `categorize_books_by_decade(books)` that takes in a list of books and returns a dictionary where each key is a decade (in the format \'1960s\', \'1970s\', etc.) and each value is a list of titles of the books published in that decade. The titles in the lists should be in the order they appear in the input list. Example input: ```python books = [ {\\"title\\": \\"Book One\\", \\"year\\": 1965}, {\\"title\\": \\"Book Two\\", \\"year\\": 1972}, {\\"title\\": \\"Book Three\\", \\"year\\": 1988}, {\\"title\\": \\"Book Four\\", \\"year\\": 1969}, {\\"title\\": \\"Book Five\\", \\"year\\": 1975} ] ``` Expected output: ```python { \\"1960s\\": [\\"Book One\\", \\"Book Four\\"], \\"1970s\\": [\\"Book Two\\", \\"Book Five\\"], \\"1980s\\": [\\"Book Three\\"] } ``` Make sure your function is efficient and handles edge cases appropriately.","solution":"def categorize_books_by_decade(books): Categorizes books into decades based on the publication year. Args: books (list of dicts): List of books, each represented by a dictionary with \'title\' and \'year\'. Returns: dict: Dictionary where keys are decades (\\"1960s\\", \\"1970s\\", etc.) and values are lists of book titles. categorized_books = {} for book in books: year = book[\'year\'] title = book[\'title\'] decade = (year // 10) * 10 decade_key = f\\"{decade}s\\" if decade_key not in categorized_books: categorized_books[decade_key] = [] categorized_books[decade_key].append(title) return categorized_books"},{"question":"You are tasked with designing a data structure that can efficiently store a set of non-negative integers. The data structure should support the following operations: 1. Insert a number into the data structure. 2. Delete a number from the data structure. 3. Find the k-th smallest number in the data structure (for a given k). Design a function to handle these operations. Your task is to write a function that accepts a series of commands to perform on this data structure. Each command will be one of the following: - \\"INSERT x\\" - which inserts the non-negative integer x into the data structure. - \\"DELETE x\\" - which deletes one occurrence of the non-negative integer x from the data structure. - \\"KTHSMALL k\\" - which returns the k-th smallest number in the data structure. Input: - The first line contains an integer Q, the number of commands. - Each of the next Q lines contains a command in one of the above formats. Output: - For each \\"KTHSMALL k\\" command, output the k-th smallest number in the data structure. If the k-th smallest number does not exist, output \\"-1\\". Constraints: - 1 ≤ Q ≤ 10^5 - 0 ≤ x ≤ 10^9 - 1 ≤ k ≤ 10^5 SAMPLE INPUT 8 INSERT 10 INSERT 5 KTHSMALL 1 KTHSMALL 2 INSERT 20 DELETE 5 KTHSMALL 1 KTHSMALL 2 SAMPLE OUTPUT 5 10 10 20","solution":"import bisect class DataStructure: def __init__(self): self.elements = [] def insert(self, x): bisect.insort(self.elements, x) def delete(self, x): index = bisect.bisect_left(self.elements, x) if index < len(self.elements) and self.elements[index] == x: self.elements.pop(index) def kth_small(self, k): if 0 < k <= len(self.elements): return self.elements[k-1] else: return -1 def process_commands(commands): data_structure = DataStructure() results = [] for command in commands: parts = command.split() if parts[0] == \\"INSERT\\": data_structure.insert(int(parts[1])) elif parts[0] == \\"DELETE\\": data_structure.delete(int(parts[1])) elif parts[0] == \\"KTHSMALL\\": k = int(parts[1]) results.append(data_structure.kth_small(k)) return results # processing sample input commands = [ \\"INSERT 10\\", \\"INSERT 5\\", \\"KTHSMALL 1\\", \\"KTHSMALL 2\\", \\"INSERT 20\\", \\"DELETE 5\\", \\"KTHSMALL 1\\", \\"KTHSMALL 2\\" ] outputs = process_commands(commands) for output in outputs: print(output)"},{"question":"Write a function, evaluate_median(numbers), that calculates the median of a list of integers. The median is the middle number in a sorted list of numbers. If the list has an even number of elements, the median is the average of the two middle numbers. For example: evaluate_median([7, 1, 3, 4, 6, 2, 8]) should return 4.0 evaluate_median([10, 2, 3, 6, 8, 11]) should return 7.0 You can assume that the list contains at least one number, and the numbers may not necessarily be unique.","solution":"def evaluate_median(numbers): Calculates and returns the median of a list of integers. sorted_numbers = sorted(numbers) n = len(sorted_numbers) mid = n // 2 # Find the middle index if n % 2 == 1: # If odd, return the middle element return float(sorted_numbers[mid]) else: # If even, return the average of the two middle elements return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2.0"},{"question":"You have been assigned the task of developing a new scheduling algorithm for operating systems. Your assignment is to implement an algorithm that will prioritize tasks based on the importance of user requests. Specifically, there are three types of user requests that the system will handle: 1. **Compute**: These tasks are computational and have a known duration. 2. **I/O**: These tasks are input/output operations with a specific duration. 3. **Admin**: These tasks involve administrative operations with varying priorities. Your system must schedule these tasks based on the following rules: 1. **Compute** tasks should always run first and interrupt any other tasks if they start. 2. **I/O** tasks should only run after all `Compute` tasks are finished but before `Admin` tasks unless interrupted by a `Compute` task. 3. **Admin** tasks should run last, ordered by their priority (highest priority first). If priorities are equal, the task that comes first in the input order should run first. # Input The input consists of: - An integer **n** (1 ≤ n ≤ 1000) representing the number of tasks. - **n** lines each describing a task with a type (either \\"C\\" for Compute, \\"I\\" for I/O, or \\"A\\" for Admin), followed by its duration **d** (1 ≤ d ≤ 1000) for Compute and I/O tasks or priority **p** (1 ≤ p ≤ 100) for Admin tasks. # Output Print the order in which the tasks should be executed. Print each task on a new line in the format \\"Type Duration\\" for `Compute` and `I/O` tasks or \\"Type Priority\\" for `Admin` tasks. # Example Input ``` 5 C 10 I 5 A 3 C 15 A 4 ``` Output ``` C 10 C 15 I 5 A 4 A 3 ``` # Explanation In the above example: 1. The `Compute` tasks (C 10 and C 15) are scheduled first. 2. Next, the `I/O` task (I 5) is scheduled. 3. Finally, the `Admin` tasks are scheduled in the descending order of their priorities: (A 4) and (A 3). Implement this algorithm to handle the task scheduling accordingly.","solution":"def schedule_tasks(n, tasks): compute_tasks = [] io_tasks = [] admin_tasks = [] for task in tasks: task_details = task.split() task_type = task_details[0] task_info = int(task_details[1]) if task_type == \\"C\\": compute_tasks.append((task_type, task_info)) elif task_type == \\"I\\": io_tasks.append((task_type, task_info)) elif task_type == \\"A\\": admin_tasks.append((task_type, task_info)) # Sort admin tasks by priority in descending order admin_tasks.sort(key=lambda x: -x[1]) # Combine all tasks in the required order sorted_tasks = compute_tasks + io_tasks + admin_tasks return sorted_tasks"},{"question":"Julie is exploring different ways to represent numbers and she recently learned about binary representation. She wants to write a program that helps her compute some basic properties of numbers when they are represented in binary. Given a list of integers, for each integer, compute the sum of all bits set to 1 in its binary representation. The sum of bits of an integer is the total count of 1\'s in its binary form. For example, the binary representation of 5 is 101, which has 2 bits set to 1. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The next line contains n integers separated by spaces, where each integer is between 1 and 10^6. Output For each integer in the list, print the sum of bits set to 1 in its binary representation, each on a new line. Examples Input 5 1 2 3 4 5 Output 1 1 2 1 2 Input 3 7 8 9 Output 3 1 2 Note In the first example: - The binary representation of 1 is 1, which has 1 bit set to 1. - The binary representation of 2 is 10, which has 1 bit set to 1. - The binary representation of 3 is 11, which has 2 bits set to 1. - The binary representation of 4 is 100, which has 1 bit set to 1. - The binary representation of 5 is 101, which has 2 bits set to 1. In the second example: - The binary representation of 7 is 111, which has 3 bits set to 1. - The binary representation of 8 is 1000, which has 1 bit set to 1. - The binary representation of 9 is 1001, which has 2 bits set to 1.","solution":"def sum_of_bits(n, numbers): For each integer in the numbers list, compute the sum of bits set to 1 in its binary representation. :param n: An integer representing the number of integers in the list. :param numbers: A list of integers. :return: A list of integers representing the sum of bits set to 1 for each input integer. return [bin(num).count(\'1\') for num in numbers]"},{"question":"You are given a matrix of positive integers representing the elevation at each cell. The water can only flow in four directions: up, down, left, and right. You are tasked to compute the minimum effort required to travel from the top-left cell to the bottom-right cell, where the effort is defined as the absolute difference in elevations between two consecutive cells. The path chosen should minimize the maximum effort taken among every step in the path. # Input The first line contains two integers, `m` and `n` (1 ≤ m, n ≤ 100), representing the dimensions of the matrix. The next `m` lines each contain `n` positive integers between 1 and 10^6 inclusive, representing the elevation at each cell of the matrix. # Output Output a single integer, the minimum effort required to travel from the top-left cell to the bottom-right cell. # Examples Example 1 **Input:** ``` 3 3 1 3 5 2 8 3 4 2 6 ``` **Output:** ``` 3 ``` **Explanation:** The path from the top-left corner to the bottom-right corner with the minimum effort is `(1,3) -> (2,3) -> (4,2) -> (6)`. The maximum effort in this path is `3`. ``` 1 -> 3 -> 3 -> 2 -> 6 | | | | 2 -> 8 -> 4 -> 2 3 -> 5 ``` Example 2 **Input:** ``` 3 3 4 3 4 5 7 3 2 2 1 ``` **Output:** ``` 2 ``` **Explanation:** The path from the top-left corner to the bottom-right corner with the minimum effort is `(4,3) -> (3,3) -> (1)`. The maximum effort in this path is `2`. ``` 4 -> 3 -> 1 / | | 5 -> 7 -> 3 | / | 2 -> 2 ``` Note: - The initial cell is always at the top-left (0,0) and the target cell is always at the bottom-right (m-1, n-1). - The path chosen should minimize the maximum effort taken among every step in the path, not just the sum of all efforts.","solution":"import heapq def minimumEffortPath(heights): m, n = len(heights), len(heights[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < m and 0 <= y < n heap = [(0, 0, 0)] # (effort, x, y) effort_to = [[float(\'inf\')] * n for _ in range(m)] effort_to[0][0] = 0 while heap: effort, x, y = heapq.heappop(heap) if x == m - 1 and y == n - 1: return effort for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): next_effort = max(effort, abs(heights[nx][ny] - heights[x][y])) if next_effort < effort_to[nx][ny]: effort_to[nx][ny] = next_effort heapq.heappush(heap, (next_effort, nx, ny)) return -1 # If not found, though it\'s guaranteed to have a valid path"},{"question":"Write a function that accepts a list of dictionaries, where each dictionary represents a student with the keys \'name\' and \'scores\'. The \'scores\' key maps to a list of integers representing the scores the student has received on several tests. The function should return a list of strings, where each string indicates the name of the student and their average score rounded to two decimal places. Examples ```python [{\'name\': \'John\', \'scores\': [90, 80, 85]}] --> [\\"John has an average score of 85.00\\"] [{\'name\': \'Jane\', \'scores\': [100, 95, 90]}, {\'name\': \'Doe\', \'scores\': [70, 75, 80]}] --> [\\"Jane has an average score of 95.00\\", \\"Doe has an average score of 75.00\\"] [{\'name\': \'Alice\', \'scores\': [78, 82, 88]}, {\'name\': \'Bob\', \'scores\': [60, 65, 70]}, {\'name\': \'Charlie\', \'scores\': [90, 92, 85]}] --> [\\"Alice has an average score of 82.67\\", \\"Bob has an average score of 65.00\\", \\"Charlie has an average score of 89.00\\"] ```","solution":"def average_scores(students): Returns a list of strings, each representing a student and their average score rounded to two decimal places. Args: students (list): A list of dictionaries where each dictionary contains \'name\' and \'scores\'. Returns: list: A list of strings with each student\'s name and their average score. result = [] for student in students: name = student[\'name\'] scores = student[\'scores\'] average_score = sum(scores) / len(scores) result.append(f\\"{name} has an average score of {average_score:.2f}\\") return result"},{"question":"Create a program that simulates the lottery draw process for a 6/49 type lottery where the player must pick 6 different numbers from a set of 49 consecutive numbers (1 through 49). The draw will randomly select 6 different numbers. The program will then compare the player\'s chosen numbers with the drawn numbers and determine how many of the chosen numbers match the drawn numbers. Input The program should first take an integer n, indicating the number of test cases. For each test case, the program should read a single line containing 6 integers representing the player\'s chosen numbers. Each set of player\'s numbers is unique and will be provided in ascending order. Output For each test case, the program should output a line of the form \\"Case x: y\\" where x is the test case number (starting from 1), and y is the number of matches between the player\'s chosen numbers and the drawn numbers. Example Consider this as an example input: Input 3 1 23 24 35 45 46 3 11 15 29 30 40 7 13 25 37 42 49 Output Draw: 5 13 22 24 35 46 Case 1: 3 Case 2: 0 Case 3: 2 Notes - The drawn numbers should be randomly generated and should be the same for all test cases. - The player\'s chosen numbers for each test case will always be within the range of 1 to 49 and in ascending order.","solution":"import random def simulate_lottery_draw(): Simulates the lottery draw process and returns a list of 6 unique drawn numbers. return sorted(random.sample(range(1, 50), 6)) def count_matches(drawn_numbers, chosen_numbers): Counts how many numbers in chosen_numbers match the drawn_numbers. Args: drawn_numbers (list): The list of 6 drawn numbers. chosen_numbers (list): The list of 6 chosen numbers by the player Returns: int: The number of matching numbers between drawn and chosen numbers. return len(set(drawn_numbers) & set(chosen_numbers)) def lottery_simulation(test_cases): Simulates the lottery draw and returns a list of results for the test cases. Args: test_cases (list): A list containing player chosen numbers for each test case. Returns: list: A list of strings containing the result in the format \\"Case x: y\\". drawn_numbers = simulate_lottery_draw() print(f\\"Draw: {\' \'.join(map(str, drawn_numbers))}\\") results = [] for i, chosen_numbers in enumerate(test_cases, start = 1): matches = count_matches(drawn_numbers, chosen_numbers) results.append(f\\"Case {i}: {matches}\\") return results # Example input test_cases_input = [ [1, 23, 24, 35, 45, 46], [3, 11, 15, 29, 30, 40], [7, 13, 25, 37, 42, 49] ] # Running the simulation output_results = lottery_simulation(test_cases_input) for result in output_results: print(result)"},{"question":"**Artisan Maze Runner**: You are given a maze represented by a grid of size `n x m`. The maze contains impassable walls marked by `#` and empty cells marked by `.`. You can move in four directions: up, down, left, and right, but not diagonally. You are provided the starting position (x1, y1) and the destination position (x2, y2). Your aim is to find the minimum number of steps required to reach the destination from the starting position, or determine that it is impossible to reach the destination. **Input** The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the maze. The next n lines each contain m characters, representing the maze. The next line contains two integers x1 and y1 (1 ≤ x1 ≤ n, 1 ≤ y1 ≤ m) — the starting position. The last line contains two integers x2 and y2 (1 ≤ x2 ≤ n, 1 ≤ y2 ≤ m) — the destination position. **Output** Print the minimum number of steps needed to reach the destination (x2, y2) from the starting position (x1, y1). If it is impossible to reach the destination, print `-1`. **Examples** Input 3 3 . . # . # . . . . 1 1 3 3 Output 4 Input 3 3 . . # . # # # . . 1 1 3 3 Output -1 **Note** In the first sample, you can take the following path from (1, 1) to (3, 3): (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3) totaling 4 steps. In the second sample, there is no valid path to reach the destination due to the obstacle blocking all possible routes.","solution":"from collections import deque def min_steps_in_maze(n, m, maze, start, end): This function returns the minimum number of steps required to reach the destination from the start position in a given maze or -1 if the destination is not reachable. Parameters: n (int): number of rows m (int): number of columns maze (list): the 2D maze grid start (tuple): starting position (x1, y1) end (tuple): destination position (x2, y2) Returns: int: minimum number of steps or -1 if unreachable # Directions array for up, down, left and right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(start[0], start[1], 0)]) # (x, y, steps) visited = set() visited.add((start[0], start[1])) while queue: x, y, steps = queue.popleft() # Check if we reached the end position if (x, y) == end: return steps # Explore all possible directions for dir in directions: nx, ny = x + dir[0], y + dir[1] if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # Return -1 if the destination cannot be reached return -1"},{"question":"Alex is an art collector and likes to frame his artwork. He wants to use the least number of wood pieces possible to create a rectangular frame for his latest piece of art, which has dimensions N x M. Alex has unlimited wood pieces of lengths 1 meter, 2 meters, 3 meters, and so on. Each wood piece can only be used as either a vertical side or a horizontal side of the frame. Given the dimensions of the artwork, determine the minimum number of wood pieces required to frame the artwork. -----Constraints----- - 1 ≤ N, M ≤ 10^6 - N and M are integers -----Input----- Input is given from Standard Input in the following format: N M -----Output----- Print the minimum number of wood pieces required to frame the artwork. -----Sample Input----- 3 5 -----Sample Output----- 4 For a 3 x 5 artwork, the frame can be created using four wood pieces: two pieces of length 3 meters (for the vertical sides) and two pieces of length 5 meters (for the horizontal sides). Thus, the minimum number of wood pieces required is 4.","solution":"def min_wood_pieces(N, M): Return the minimum number of wood pieces required to frame an artwork of dimensions N x M. return 4"},{"question":"A famous social media platform has introduced a new feature called \\"Streaks.\\" A user can send a message to a friend each day to increase their streak count with that friend. However, if a day is missed, the streak count is reset to zero. You have been provided with a record of a user\'s message history with a particular friend. The history is represented as a string of \'1\'s and \'0\'s, where \'1\' indicates that a message was sent on that day and \'0\' indicates no message was sent. You need to determine the length of the longest streak of consecutive days with messages sent. -----Input----- The input consists of a single string, containing only \'1\'s and \'0\'s, representing the message history. The length of the string doesn\'t exceed 100 000 characters. -----Output----- Output the length of the longest streak of consecutive days with messages sent. -----Examples----- Input 111011101 Output 3 Input 0000111 Output 3 Input 1010101 Output 1 -----Note----- In the first sample, the longest streak of consecutive days with messages sent is \\"111\\", so the output is 3. In the second sample, the longest streak of consecutive days with messages sent is \\"111\\", so the output is 3. In the third sample, the longest streak of consecutive days with messages sent is \\"1\\", which appears multiple times, but the maximum length is 1.","solution":"def longest_streak(message_history): Returns the length of the longest streak of consecutive \'1\'s in the message history. Parameters: message_history (str): A string of \'1\'s and \'0\'s representing message history. Returns: int: The length of the longest streak of consecutive \'1\'s. max_streak = 0 current_streak = 0 for day in message_history: if day == \'1\': current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"You are given a grid of dimensions n times m. The grid is filled with numbers that represent the heights of different parts of a landscape. You need to calculate the prominence of each grid cell. The prominence of a cell is defined as the maximum difference in height between that cell and any cell in the grid that is reachable by moving only up, down, left, or right. Formally, the grid is represented by an n times m matrix of integers a. You need to find the prominence of the cell (i, j) as the maximum absolute difference |a[i][j] - a[x][y]| where (x, y) is any other cell in the grid that can be reached from (i, j). The task is to determine the overall maximum prominence among all grid cells. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases. Then the descriptions of the test cases follow. The first line of each test case contains two integers n and m (1 leq n, m leq 100) — the number of rows and columns in the grid. The next n lines contain m integers each, representing the heights in the grid. Each height is an integer within the range 0 leq a[i][j] leq 10^6. -----Output----- For each test case, output a single integer — the overall maximum prominence for the grid. -----Example----- Input 2 3 3 1 2 1 4 6 4 1 2 1 2 2 1 2 3 4 Output 5 3 -----Note----- In the first example, the cell (1, 1), which has a height of 1, can reach the cell (2, 2) with a height of 6. The absolute difference is |1 - 6| = 5. This is the maximum prominence in this grid. In the second example, the cell (1, 1), which has a height of 1, can reach the cell (2, 2) with a height of 4. The absolute difference is |1 - 4| = 3. This is the maximum prominence in this grid.","solution":"def max_prominence(t, test_cases): results = [] for case in test_cases: n, m, grid = case min_height = min(min(row) for row in grid) max_height = max(max(row) for row in grid) max_prominence = max_height - min_height results.append(max_prominence) return results"},{"question":"You are given a list of tasks represented by strings and a corresponding dictionary of dependencies. Each task can only be executed once all its dependencies have been completed. Your task is to determine the correct order to perform all the tasks. For example, consider the following `tasks` list and `dependencies` dictionary: ```python tasks = [\'A\', \'B\', \'C\', \'D\', \'E\', \'F\'] dependencies = { \'A\': [\'B\', \'C\'], \'B\': [\'D\'], \'C\': [\'E\'], \'D\': [], \'E\': [\'D\'], \'F\': [\'B\', \'C\'] } ``` In this example: - Task `A` depends on `B` and `C` being completed first. - Task `B` depends on `D` being completed first. - Task `C` depends on `E` being completed first. - Task `D` has no dependencies. - Task `E` depends on `D` being completed first. - Task `F` depends on `B` and `C` being completed first. The correct order to complete the tasks would be: ```python [\'D\', \'B\', \'E\', \'C\', \'A\', \'F\'] ``` Your function should return such a list to represent the order in which the tasks can be completed. If no valid order exists due to circular dependencies, your function should return an empty list. Write a function `task_order(tasks, dependencies)` that takes in a list of tasks and a dictionary of dependencies, and returns the correct order of tasks or an empty list if no valid order exists. ```python def task_order(tasks, dependencies): # Your code here ```","solution":"def task_order(tasks, dependencies): from collections import defaultdict, deque # Initialize in-degree of each task to zero in_degree = {task: 0 for task in tasks} # Create graph from dependencies graph = defaultdict(list) for task, deps in dependencies.items(): for dep in deps: graph[dep].append(task) in_degree[task] += 1 # Queue for tasks with no dependencies queue = deque([task for task in tasks if in_degree[task] == 0]) order = [] while queue: current_task = queue.popleft() order.append(current_task) for neighbor in graph[current_task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if there was a cycle (i.e., not all tasks are in order) if len(order) == len(tasks): return order else: return [] # Return an empty list if there is a cycle"},{"question":"Write a function `sum_of_distinct_prime_factors(n)`, which takes a single positive integer `n` and returns the sum of all distinct prime factors of every integer from 1 to `n` (inclusive). For example: ``` n = 5; sum_of_distinct_prime_factors(5) -> 10 since the prime factors are: {2, 3, 5} 2: {2} 3: {3} 4: {2} 5: {5} n = 10; sum_of_distinct_prime_factors(10) -> 17 since the prime factors are: {2, 3, 5, 7} 2: {2} 3: {3} 4: {2} 5: {5} 6: {2, 3} 7: {7} 8: {2} 9: {3} 10: {2, 5} ``` Notes: - The function is `sum_of_distinct_prime_factors(n)` and should return an integer indicating the sum of all distinct prime factors. - You might want to use a helper function to determine the prime factors of an individual number. - Be mindful of efficiency, as n can be as large as 10^6.","solution":"def sum_of_distinct_prime_factors(n): Returns the sum of all distinct prime factors of every integer from 1 to `n` (inclusive). # Helper function to find all distinct prime factors up to n def sieve_prime_factors(max_n): sieve = [i for i in range(max_n + 1)] distinct_prime_factors = set() for i in range(2, max_n + 1): if sieve[i] == i: # i is a prime number for multiple in range(i, max_n + 1, i): sieve[multiple] = i distinct_prime_factors.add(i) return distinct_prime_factors # Calculate the sum of all distinct prime factors using the helper function prime_factors = sieve_prime_factors(n) return sum(prime_factors)"},{"question":"Aria is developing a game in which a character can collect magic crystals to cast spells. Each crystal has a certain level of magic power, represented as an integer. Aria wants to maximize the character\'s spell power by strategically choosing which crystals to collect. However, there are some restrictions: the total magic power of the collected crystals must be less than or equal to a specified maximum value, and the crystals cannot be split to use only a portion of their power. Given an array of integers representing the magic power levels of available crystals and an integer representing the maximum allowed total magic power, determine the maximum possible total magic power the character can achieve without exceeding the limit. -----Input Format----- - The first line contains an integer N, the number of crystals. - The second line contains N integers, representing the magic power levels of the crystals. - The third line contains an integer M, the maximum allowed total magic power. -----Output Format----- - Print a single integer, the maximum possible total magic power that can be achieved without exceeding the limit. -----Constraints----- - 1 leq N leq 100 - 1 leq text{Magic Power Levels of Crystals} leq 1000 - 1 leq M leq 10000 -----Sample Input----- 5 100 200 300 400 500 1000 -----Sample Output----- 1000","solution":"def maximize_magic_power(N, powers, M): Determines the maximum possible total magic power without exceeding the limit M. Args: N : int : the number of crystals powers : list : list of integers representing the magic power levels of the crystals M : int : maximum allowed total magic power Returns: int : the maximum possible total magic power dp = [0] * (M + 1) for power in powers: for j in range(M, power - 1, -1): dp[j] = max(dp[j], dp[j - power] + power) return dp[M]"},{"question":"A mole moves through a one-dimensional tunnel consisting of cells, where each cell has a juicy fruit with a certain value. The mole can start at any cell and move right, but it can only move to a cell that is strictly greater in value than the current cell. The mole wants to eat the fruits along the way to maximize its total value. Write a program to find the maximum value the mole can collect starting at any cell in the tunnel. Input The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 100), the number of cells in the tunnel. The next line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1000), representing the value of the fruit in each cell. The end of input is indicated by a line containing zero. Output For each test case, output the maximum value the mole can collect. Example Input 5 4 2 6 5 3 6 1 2 3 4 5 6 4 7 8 3 2 0 Output 6 21 15 Explanation In the first test case, the mole can start at the cell with value 4 and jump to the cell with value 6, collecting fruits with values 4 and 6, yielding a total of 10. Starting at the cells with values 2, 5, or 3 would yield lower totals. In the second test case, the mole can eat all the fruits in sequence, collecting a total of 21. In the third test case, the mole can start at the cell with value 7 and jump to the cell with value 8, collecting fruits with values 7 and 8, yielding a total of 15. Collecting from starting at 8, 3, or 2 would yield lower totals.","solution":"def max_mole_value(cells): Finds the maximum value the mole can collect in the tunnel starting from any cell and moving only to higher value cells. Parameters: cells (list of int): The values in the cells. Returns: int: The maximum value the mole can collect. n = len(cells) dp = [0] * n # Each cell on its own is the starting cell, therefore, init dp[i] with cells[i] for i in range(n): dp[i] = cells[i] # Apply Dynamic Programming to find the maximum value path for i in range(n): for j in range(i): if cells[j] < cells[i]: dp[i] = max(dp[i], dp[j] + cells[i]) return max(dp) def process_input(test_cases): results = [] for case in test_cases: n, cells = case if n == 0: break results.append(max_mole_value(cells)) return results"},{"question":"Alex loves to collect stamps and organizes them in his unique way. He has N stamps and arranges them in rows, following these two rules: 1. Each row should contain exactly R stamps. 2. The rows should be as evenly distributed as possible. Alex realizes one day that he may not be able to perfectly distribute all his stamps into rows of exactly R stamps. He wants to know how many stamps would be left unorganized if he tries to do so. Can you help Alex calculate the number of stamps that would be left once he tries to distribute his N stamps into rows of R stamps each? -----Input----- The input contains two integers N and R (0 leq N, R leq 100), where N is the total number of stamps and R is the number of stamps in each row. -----Output----- Output a single integer which is the number of stamps that will be remaining after distributing N stamps into rows of R stamps each. If R is 0, output N as all stamps would remain unorganized. -----Examples----- Input 10 3 Output 1 Input 15 5 Output 0 Input 4 0 Output 4 Input 7 2 Output 1 -----Note----- In the first sample, Alex tries to organize 10 stamps into rows of 3. He can make 3 full rows (3x3 stamps) but will have 1 stamp left over. In the second sample, 15 stamps can be perfectly organized into rows of 5, leaving no stamp unorganized.","solution":"def remaining_stamps(N, R): Returns the number of stamps that will remain unorganized when N stamps are distributed into rows of R stamps each. If R is 0, all stamps remain unorganized. if R == 0: return N return N % R"},{"question":"You are given an array of integers, representing heights of buildings, in which each element is a non-negative integer. You need to find the maximum amount of water that can be trapped between the buildings after raining. The array\'s elements indicate the height of each building, and the width of each building (and thus the distance between any two adjacent buildings) is 1 unit. The water trapped is bounded by the shorter of the two heights at the ends and the height of any intermediate buildings. Write a function `maxWater(arr)` that accepts an array of integers and returns an integer representing the maximum amount of trapped water. Example: ```python maxWater([1,8,6,2,5,4,8,3,7]) ``` Output: ``` 49 ``` Explanation: Between the buildings of height 8 at index 1 and height 7 at index 8, a total of 49 units of water can be trapped (bounded by heights and number of units in between).","solution":"def maxWater(arr): Returns the maximum amount of water that can be trapped between buildings. n = len(arr) if n < 2: return 0 left = 0 right = n - 1 max_water = 0 while left < right: # Calculate the maximum water that can be trapped height = min(arr[left], arr[right]) width = right - left max_water = max(max_water, height * width) # Move the pointers if arr[left] < arr[right]: left += 1 else: right -= 1 return max_water"},{"question":"The local post office is dealing with an issue in sorting incoming parcels. Each parcel has a unique weight, and they need to arrange these parcels in non-decreasing order of weight. They decided to automate this sorting process, but there is a catch: they can only swap any two adjacent parcels in one move. Cheffina has challenged you to find the minimum number of adjacent swaps required to sort the array of parcel weights. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the following T test cases consists of two lines: - The first line contains an integer N, the number of parcels. - The second line contains N space-separated integers representing the weights of the parcels. -----Output:----- For each test case, output a single line with the minimum number of adjacent swaps required to sort the array. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq weight[i] leq 10^5 -----Sample Input:----- 1 5 5 3 2 4 1 -----Sample Output:----- 8","solution":"def min_adjacent_swaps(arr): Returns the minimum number of adjacent swaps required to sort the array. cnt = 0 n = len(arr) for i in range(n-1): for j in range(n-1-i): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] cnt += 1 return cnt def process_test_cases(T, test_cases): results = [] for case in test_cases: N, arr = case results.append(min_adjacent_swaps(arr)) return results"},{"question":"You are given an array of n integers. Your task is to find the sum of the largest contiguous subarray within the array and print this sum. -----Constraints----- - 1 leq n leq 1000 - -1000 leq each integer in the array leq 1000 -----Input----- The input consists of two lines: 1. An integer n representing the number of elements in the array. 2. The next line contains n space-separated integers representing the elements of the array. -----Output----- Print a single integer representing the sum of the largest contiguous subarray. -----Sample Input 1----- 5 1 -2 3 4 -1 -----Sample Output 1----- 7 Explanation: The largest sum of a contiguous subarray is 7, which is formed by the subarray [3, 4]. -----Sample Input 2----- 8 -2 -3 4 -1 -2 1 5 -3 -----Sample Output 2----- 7 Explanation: The largest sum of a contiguous subarray is 7, which is formed by the subarray [4, -1, -2, 1, 5].","solution":"def max_subarray_sum(n, array): Returns the sum of the largest contiguous subarray. max_sum = float(\'-inf\') current_sum = 0 for num in array: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"An efficient way to handle online shopping systems is to keep track of the most frequently ordered items, so the system can suggest popular products to users during their shopping experience. You are tasked with implementing a part of this system which reads order logs and determines the `n` most frequently ordered items. **Input:** The input begins with an integer `n`, representing the number of most frequent items to return. This is followed by multiple lines where each line contains the item ID (a non-negative integer) of an item that was ordered. The input terminates with the string \\"STOP\\". ``` n item_id_1 item_id_2 ... STOP ``` - `n` (1 ≤ n ≤ 100) is the number of top frequent items to print - Each `item_id` is a non-negative integer (0 ≤ item_id ≤ 100000) - The string \\"STOP\\" terminates the input **Output:** The program should output the `n` most frequently ordered items, sorted by their frequency in descending order. If two items have the same frequency, they should be sorted by their item ID in ascending order. Each item ID and its frequency should be printed on a new line, separated by a space. **Example Input:** ``` 3 100 200 100 300 100 200 STOP ``` **Example Output:** ``` 100 3 200 2 300 1 ``` **Explanation:** - Item `100` was ordered 3 times. - Item `200` was ordered 2 times. - Item `300` was ordered 1 time. - The output lists the top 3 items by frequency.","solution":"def most_frequent_items(input_data): from collections import defaultdict import heapq lines = input_data.splitlines() n = int(lines[0]) orders = lines[1:-1] # exclude the \'STOP\' line item_counts = defaultdict(int) for item in orders: item_counts[int(item)] += 1 # Create a heap to store items by frequency and item_id heap = [(-freq, item_id) for item_id, freq in item_counts.items()] heapq.heapify(heap) # Get the top-n items result = [] for _ in range(n): if heap: freq, item_id = heapq.heappop(heap) result.append((item_id, -freq)) return result"},{"question":"A music streaming service wants to create a feature that automatically generates a playlist based on user preferences. Each track has a genre and a duration, and the user specifies the desired genre and the maximum total duration of the playlist. Write a function that selects tracks from a given list to construct a playlist that matches the desired genre and has the longest possible total duration without exceeding the maximum duration. If multiple combinations yield the same total duration, any valid combination can be returned. The given parameters will be: * An array of tracks, where each track is represented as a dictionary with `genre` and `duration` keys. The duration is given in minutes. * A string representing the desired genre. * An integer representing the maximum total duration of the playlist in minutes. The function should return an array of tracks that forms the desired playlist. **Note:** The input will always be valid. Examples #1: ```python tracks = [ {\\"genre\\": \\"rock\\", \\"duration\\": 5}, {\\"genre\\": \\"rock\\", \\"duration\\": 3}, {\\"genre\\": \\"pop\\", \\"duration\\": 4}, {\\"genre\\": \\"rock\\", \\"duration\\": 8}, {\\"genre\\": \\"pop\\", \\"duration\\": 2}, {\\"genre\\": \\"rock\\", \\"duration\\": 6} ] desired_genre = \\"rock\\" max_duration = 10 ``` Expected output: ```python [ {\\"genre\\": \\"rock\\", \\"duration\\": 5}, {\\"genre\\": \\"rock\\", \\"duration\\": 3} ] ``` or ```python [ {\\"genre\\": \\"rock\\", \\"duration\\": 6}, {\\"genre\\": \\"rock\\", \\"duration\\": 3} ] ``` both valid as they sum to 10 mins of rock tracks. #2: ```python tracks = [ {\\"genre\\": \\"jazz\\", \\"duration\\": 4}, {\\"genre\\": \\"jazz\\", \\"duration\\": 6}, {\\"genre\\": \\"jazz\\", \\"duration\\": 9}, {\\"genre\\": \\"blues\\", \\"duration\\": 5}, {\\"genre\\": \\"jazz\\", \\"duration\\": 7} ] desired_genre = \\"jazz\\" max_duration = 12 ``` Expected output: ```python [ {\\"genre\\": \\"jazz\\", \\"duration\\": 6}, {\\"genre\\": \\"jazz\\", \\"duration\\": 4} ] ``` or any valid subset summing to 12 mins of jazz tracks.","solution":"def generate_playlist(tracks, desired_genre, max_duration): Constructs the longest possible playlist of tracks within the desired genre and below the specified maximum duration. Args: tracks (list): A list of dictionaries with `genre` and `duration` keys. desired_genre (str): The desired genre for the playlist. max_duration (int): The maximum duration of the playlist in minutes. Returns: list: A list of tracks that form the playlist. # Filter tracks by the desired genre genre_tracks = [track for track in tracks if track[\'genre\'] == desired_genre] # Sort tracks by duration in descending order genre_tracks.sort(key=lambda track: track[\'duration\'], reverse=True) # Function to find the best combination def find_best_combination(tracks, max_duration): n = len(tracks) best_duration = 0 best_combination = [] def helper(start, current_duration, current_combination): nonlocal best_duration, best_combination if current_duration > best_duration and current_duration <= max_duration: best_duration = current_duration best_combination = current_combination.copy() for i in range(start, n): if current_duration + tracks[i][\'duration\'] <= max_duration: current_combination.append(tracks[i]) helper(i + 1, current_duration + tracks[i][\'duration\'], current_combination) current_combination.pop() helper(0, 0, []) return best_combination return find_best_combination(genre_tracks, max_duration)"},{"question":"Write a function that finds the longest substring without repeating characters in a given string. The function should return the length of this substring. Ensure the algorithm runs efficiently so that it can handle larger input strings seamlessly.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters in the given string s. n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Sarah loves board games. She recently stumbled upon a unique game board, which is represented by an NxM matrix. Each cell in the matrix contains a number that indicates the cost to step on that cell. The objective of the game is to start from the top-left cell (0, 0) and reach the bottom-right cell (N-1, M-1) with the minimum cost. You are given the matrix and must determine the minimum cost required for Sarah to travel from the top-left to the bottom-right cell. Sarah can only move either to the right or down from a cell. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers N and M, denoting the number of rows and columns respectively. - Each of the next N lines contains M space-separated integers representing the cost matrix. ------ Output Format ------ For each test case, output the minimum cost required to reach the bottom-right cell for Sarah on a new line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 1 ≤ text{matrix}[i][j] ≤ 10^9 ------ Sample Input 1 ------ 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 ------ Sample Output 1 ------ 7 3 ----- Explanation 1 ------ Test case 1: The path with the minimum cost is 1 → 3 → 1 → 1 → 1, with a total cost of 1 + 3 + 1 + 1 + 1 = 7. Test case 2: The path with the minimum cost is 1 → 2 → 1, with a total cost of 1 + 1 + 1 = 3.","solution":"def min_cost(cost): Calculates the minimum cost to travel from the top-left to the bottom-right cell of the given cost matrix. N = len(cost) M = len(cost[0]) dp = [[0] * M for _ in range(N)] # Initialize the top-left cell dp[0][0] = cost[0][0] # Initialize the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + cost[i][0] # Initialize the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + cost[0][j] # Fill the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j] return dp[N-1][M-1] def solve(T, test_cases): results = [] for t in range(T): N, M, matrix = test_cases[t][0], test_cases[t][1], test_cases[t][2] results.append(min_cost(matrix)) return results"},{"question":"You are given a list of integers and you need to determine if there exists a pair of numbers in the list whose sum is equal to a given target number. ------ Input ------ The first line contains an integer ( N ), which indicates the number of elements in the list. The second line contains ( N ) integers representing the elements of the list. The third line contains a single integer ( T ), which is the target sum. ------ Output ------ Print \\"YES\\" if there exists a pair of numbers in the list whose sum equals the target. Otherwise, print \\"NO\\". ------ Constraints ------ For 30 points: ( 1 leq N leq 1000 ) For 70 points: ( 1 leq N leq 10^5 ) ( -10^9 leq text{List elements} leq 10^9 ) The target sum ( -10^9 leq T leq 10^9 ) ----- Sample Input 1 ------ 5 1 2 3 9 7 10 ----- Sample Output 1 ------ YES ----- Sample Input 2 ------ 5 1 2 3 4 5 10 ----- Sample Output 2 ------ NO","solution":"def pair_with_sum_exists(nums, target): Determines if there exists a pair of numbers in the list whose sum equals the target. Args: nums (list of int): List of integers target (int): Target sum Returns: str: \\"YES\\" if a pair exists, \\"NO\\" otherwise seen = set() for num in nums: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Jill recently started learning about data encoding and decoding. She is particularly intrigued by a simple Caesar Cipher encryption technique. In this technique, each letter in the plaintext is shifted a fixed number of places down the alphabet. Jill quickly noticed that this technique can cloud what a word looks like and make it incomprehensible. To help her understand more about encrypted text, she wants to write a function that can shift each letter of a given string by a certain number of positions, wrapping around the alphabet if necessary. Could you help Jill out by writing a function that encrypts a given string using Caesar Cipher with a given shift value? Input The input consists of two lines. The first line contains the shift value `n` (an integer between 0 and 25). The second line contains the string `text` to be encrypted using the Caesar Cipher. The string will only contain lowercase alphabets. Output The output should be the resulting encrypted string after applying the Caesar Cipher with the given shift value. Examples Input 3 hello Output khoor Input 1 abcxyz Output bcdyza","solution":"def caesar_cipher_encrypt(n, text): Encrypts the given text using Caesar Cipher with a shift value of n. :param n: Shift value (integer between 0 and 25) :param text: Input string containing only lowercase alphabets :return: Encrypted string with Caesar Cipher applied encrypted_text = [] for char in text: shifted_value = (ord(char) - ord(\'a\') + n) % 26 + ord(\'a\') encrypted_text.append(chr(shifted_value)) return \'\'.join(encrypted_text) # Example to verify the function implementation n = 3 text = \\"hello\\" print(caesar_cipher_encrypt(n, text)) # Expected Output: \\"khoor\\" n = 1 text = \\"abcxyz\\" print(caesar_cipher_encrypt(n, text)) # Expected Output: \\"bcdyza\\""},{"question":"To celebrate the upcoming town festival, a local artist has decided to create a unique pattern based on the dimensions of a rectangular grid. The artist places `n` points on an `n x m` grid in such a way that no two points share the same row or column. The artist then draws zig-zag lines connecting these points, starting from the top-most point to the bottom-most point. The artist defines a special value called the \\"Zigzag Artist Value\\" of this pattern. This value is calculated as the sum of the Manhattan distances between each pair of consecutive points in the sequence. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is defined as `|x1 - x2| + |y1 - y2|`. Given the positions of `n` points on the grid, calculate the \\"Zigzag Artist Value\\". Input The first line contains two integers `n` and `m` (2 ≤ n ≤ m ≤ 100000), the dimensions of the grid. Each of the next `n` lines contains two integers `xi` and `yi` (0 ≤ xi < n, 0 ≤ yi < m). The points are given in no particular order. Output Output a single integer, the \\"Zigzag Artist Value\\". SAMPLE INPUT 3 4 0 0 1 2 2 3 SAMPLE OUTPUT 5 Explanation For the given points: - The points and their distances are: - From (0, 0) to (1, 2): distance = |0 - 1| + |0 - 2| = 1 + 2 = 3 - From (1, 2) to (2, 3): distance = |1 - 2| + |2 - 3| = 1 + 1 = 2 - Total Zigzag Artist Value = 3 + 2 = 5","solution":"def zigzag_artist_value(n, m, points): Given the dimensions of the grid and the positions of the points, calculates the \\"Zigzag Artist Value\\". :param n: int, number of rows (and number of points) :param m: int, number of columns :param points: list of tuples, positions of the points on the grid :return: int, the calculated \\"Zigzag Artist Value\\" # Sort points based on the row coordinate (xi) points = sorted(points) zigzag_value = 0 for i in range(1, n): x1, y1 = points[i - 1] x2, y2 = points[i] # Calculate Manhattan distance between consecutive points dist = abs(x1 - x2) + abs(y1 - y2) zigzag_value += dist return zigzag_value"},{"question":"A company plans to launch a series of interconnected smart street lamps along a straight road. The company wants the street lamps to be installed at optimal positions to minimize the total distance that maintenance vehicles need to travel while performing routine checks. Let\'s explore the problem in detail: The road can be modeled as a coordinate line and the positions of N street lamps need to be determined such that the total travel distance for maintenance is minimized. Maintenance vehicles start at a fixed base location, x_b, and visit each street lamp for maintenance. For simplicity, assume that the base location is fixed at 0 on the coordinate line. The vehicles must start from x_b = 0, travel to each street lamp, and return to the base after visiting all street lamps in order. The goal is to find the positions x_1, x_2, ldots, x_N for the street lamps that will minimize the total travel distance. **Input** - The first line contains an integer T (1 le T le 1000) - the number of test cases. - Each test case starts with an integer N (1 le N le 10000) - the number of street lamps. - The second line of each test case contains N integers d_1, d_2, ldots, d_N (1 le d_i le 10^4), representing the distances that maintenance vehicles need to travel to maintain each street lamp. **Output** For each test case, output a single integer - the minimum total travel distance for maintenance. **Examples** _Input_ ``` 3 3 3 6 4 4 5 8 2 6 2 10 3 ``` _Output_ ``` 13 17 13 ``` **Explanation** In the first example: - If the street lamps are placed at coordinates [0, 3, 6], the total travel distance would be: - Move from 0 to 3 and back: 6 units - Move from 0 to 6 and back: 12 units - Move from 0 to 4 and back: 8 units - The total cost can be minimized considering the optimal distribution forming points around certain central points, enabling lesser travel in one trip back and forth. In the second example: - Distributing to reduce the longer travels focuses more on balancing the lamps close if the distance splits allow near closer sums for at least central. Thus, you must carefully choose positions for each street lamp to minimize the total travel distance, ensuring that the optimal points take the least sum possible.","solution":"def minimal_travel_distance(T, cases): results = [] for i in range(T): N = cases[i][0] distances = sorted(cases[i][1]) # Distance computation using optimal placement total_distance = 0 for lamp_distance in distances: total_distance += 2 * lamp_distance results.append(total_distance) return results"},{"question":"You are given an array of integers and must determine whether or not it forms a sequence of consecutive numbers. A sequence of consecutive numbers is defined as a set of numbers where each number increments by one from the previous one. For example, the array `[5, 4, 2, 3, 1]` forms a sequence of consecutive numbers because it can be rearranged to `[1, 2, 3, 4, 5]`, while the array `[1, 3, 4, 6]` does not. Write a function `is_consecutive_sequence(arr)` that takes a list of integers and returns `True` if the list contains a sequence of consecutive numbers, otherwise returns `False`. Here are some examples: ```python is_consecutive_sequence([5, 4, 2, 3, 1]) == True is_consecutive_sequence([1, 2, 4, 6, 5]) == False is_consecutive_sequence([10, 11, 12, 13, 14]) == True is_consecutive_sequence([7, 8, 9, 10, 12]) == False is_consecutive_sequence([]) == False # An empty list should return False ```","solution":"def is_consecutive_sequence(arr): Determine whether the given array forms a sequence of consecutive numbers. Args: arr (list): List of integers. Returns: bool: True if the array forms a sequence of consecutive numbers, otherwise False. if not arr: return False min_num = min(arr) max_num = max(arr) return max_num - min_num + 1 == len(arr) and len(set(arr)) == len(arr)"},{"question":"Two friends, Alice and Bob, love playing a number game. Each player takes turns (starting with Alice) choosing a number from an array and removing all occurrences of that number from the array. The game continues until the array is empty. The player who makes the last move wins. Given an array of integers, determine if Alice, who starts the game, has a winning strategy assuming both players play optimally. For example, if the array is [1, 2, 3, 3], Alice can start by removing both 3s, leaving the array [1, 2]. Bob will then have to remove either 1 or 2, and Alice will be able to remove the remaining number and win. Write a function `has_winning_strategy(numbers)` that takes a list of integers `numbers` as input and returns `True` if Alice has a winning strategy, or `False` otherwise. Input: - `numbers`: List of at least one and at most 1000 integers, where each integer is between 1 and 1000. Output: - A boolean value, `True` if Alice has a winning strategy, and `False` otherwise. Function signature: ```python def has_winning_strategy(numbers: List[int]) -> bool: pass ``` SAMPLE INPUTS AND OUTPUTS: Input: ```python has_winning_strategy([1, 2, 3, 3]) ``` Output: ```python True ``` Input: ```python has_winning_strategy([4, 4, 4, 4]) ``` Output: ```python False ```","solution":"def has_winning_strategy(numbers): from collections import Counter # Count the frequency of each number freq = Counter(numbers) # If all numbers have even frequency, Bob wins # If there is at least one number with an odd frequency, Alice wins for count in freq.values(): if count % 2 != 0: return True return False"},{"question":"In a research institute, scientists are investigating sequences generated by a certain process. A sequence is considered valid if it meets a specific sum criterion. Given a sequence of integers, your task is to determine the maximum sum obtainable from any subarray of the sequence such that the sum does not exceed a given value S. A subarray is a contiguous portion of an array. -----Input----- The first line contains two integers n and S (1le nle 10^5, 1le Sle 10^{18}). The next line contains n integers a_1, a_2, ldots,a_n (-10^9 le a_i le 10^9). -----Output----- Print one integer: the maximum sum of any subarray that does not exceed S. If no such subarray exists, print 0. -----Examples----- Input 5 10 1 2 3 4 -6 Output 10 Input 6 15 10 -3 4 -2 6 -1 Output 15 Input 4 5 -1 -2 -3 -4 Output 0 -----Note----- In the first example, the subarray [1, 2, 3, 4] has a sum of 10, which is the maximum sum that does not exceed 10. In the second example, the subarray [10, -3, 4, -2, 6] has a sum of 15, which is the maximum sum that does not exceed 15. In the third example, since all elements are negative and adding any element will cause the sum to be less than 1, the output is 0.","solution":"def max_subarray_sum(n, S, array): Returns the maximum sum of any subarray that does not exceed S or 0 if no such subarray exists. max_sum = 0 current_sum = 0 start = 0 for end in range(n): current_sum += array[end] while current_sum > S and start <= end: current_sum -= array[start] start += 1 if current_sum <= S: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that determines if a word is a \\"mirror word\\". A mirror word is one that reads the same forwards and backwards, and is composed of characters that look the same when flipped horizontally. The characters that fit this requirement are: A, H, I, M, O, T, U, V, W, X, Y. Input: A single string s. Output: Return \\"YES\\" if the word is a mirror word, otherwise \\"NO\\". Constraints: - The string s consists only of uppercase English letters. - 1 ≤ length of s ≤ 100 SAMPLE INPUT WOW SAMPLE OUTPUT YES Explanation The word \\"WOW\\" reads the same forwards and backwards and consists only of the characters that look the same when flipped horizontally.","solution":"def is_mirror_word(s): Determines if a word is a mirror word. Args: s (str): The input string. Returns: str: \\"YES\\" if the word is a mirror word, otherwise \\"NO\\". mirror_chars = {\'A\', \'H\', \'I\', \'M\', \'O\', \'T\', \'U\', \'V\', \'W\', \'X\', \'Y\'} # Check if all characters are in the set of mirror characters for char in s: if char not in mirror_chars: return \\"NO\\" # Check if the string is a palindrome if s == s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a program that calculates the score for a list of students based on their grades in three subjects: Math, Science, and English. The program should output each student\'s average grade and the highest average grade among all students. Input: The input is given in the following format: Student name, Math grade, Science grade, English grade Student name, Math grade, Science grade, English grade :: :: Each line contains a student\'s name and their grades (all integers between 0 and 100, inclusive). There will be no more than 50 students. Output: For each student, output their name followed by their average grade (integer). Once all students\' averages are output, print the highest average grade among all students. Example: Input: Alice, 90, 85, 88 Bob, 76, 82, 91 Charlie, 100, 100, 99 Output: Alice 87 Bob 83 Charlie 99 99","solution":"def calculate_scores(student_data): Calculates each student\'s average grade and the highest average grade among all students. Parameters: student_data (list of str): List of strings representing each student\'s name and their grades in three subjects. Returns: list of tuples: Each tuple contains the student\'s name and their average grade. int: The highest average grade among all students. averages = [] highest_average = 0 for data in student_data: name, math, science, english = data.split(\',\') math = int(math) science = int(science) english = int(english) average = (math + science + english) // 3 averages.append((name.strip(), average)) if average > highest_average: highest_average = average return averages, highest_average"},{"question":"Given an array of integers, return the length of the longest contiguous subarray such that the elements of the subarray form an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference of any two successive members of the sequence is a constant. Example 1: Input: [1, 3, 5, 7, 9] Output: 5 Explanation: The whole array is an arithmetic progression with common difference 2. Example 2: Input: [1, 2, 4, 7, 10, 13, 17] Output: 4 Explanation: The longest contiguous subarray forming an arithmetic progression is [4, 7, 10, 13] with common difference 3. Example 3: Input: [10, 7, 4, 1, -2] Output: 5 Explanation: The whole array is an arithmetic progression with common difference -3. Your Task: You do not need to read input or print anything. Your task is to complete the function `longestArithSeqLength()` which takes the list of integers as input and returns the length of the longest contiguous subarray that forms an arithmetic progression. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of array ≤ 10^5 -10^9 ≤ elements of array ≤ 10^9","solution":"def longestArithSeqLength(arr): Returns the length of the longest contiguous subarray that forms an arithmetic progression. if len(arr) < 2: return len(arr) max_len = 2 curr_len = 2 curr_diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] == curr_diff: curr_len += 1 else: curr_diff = arr[i] - arr[i - 1] curr_len = 2 max_len = max(max_len, curr_len) return max_len"},{"question":"You are given a list of integers nums which contains integers in random order. Write a function to find the smallest missing positive integer. Your solution should have both a time complexity and space complexity of O(n). Example 1: Input: nums = [1, 2, 0] Output: 3 Explanation: The smallest missing positive integer is 3. Example 2: Input: nums = [3, 4, -1, 1] Output: 2 Explanation: The smallest missing positive integer is 2. Example 3: Input: nums = [7, 8, 9, 11, 12] Output: 1 Explanation: The smallest missing positive integer is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `firstMissingPositive()` which takes the list of integers `nums` as input and returns the smallest missing positive integer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ nums.length ≤ 5 * 10^5 -2^31 ≤ nums[i] ≤ 2^31 - 1","solution":"def firstMissingPositive(nums): Returns the smallest missing positive integer from the list of integers nums. Time Complexity: O(n) Space Complexity: O(1) n = len(nums) # Ensure that number in nums are in the 1 to n range for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the smallest missing positive number for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given an array `A` of size `N` and a number `X`. Your task is to partition the array into the smallest number of contiguous subarrays such that the sum of elements in each subarray is greater than or equal to `X`. Constraints * 1 leq N leq 10^5 * 1 leq A_i leq 10^4 * 1 leq X leq 10^9 Input Input is given from Standard Input in the following format: N X A_1 A_2 A_3 ... A_N Output Print a single integer, the minimum number of contiguous subarrays required. Examples Input 5 10 1 2 3 4 5 Output 2 Input 5 15 10 5 3 7 1 Output 2 Input 7 20 5 10 5 20 5 5 10 Output 3","solution":"def min_partitions(N, X, A): Returns the minimum number of contiguous subarrays required such that the sum of elements in each subarray is greater than or equal to X. subarray_count = 0 current_sum = 0 for num in A: current_sum += num if current_sum >= X: subarray_count += 1 current_sum = 0 if current_sum > 0: subarray_count += 1 return subarray_count"},{"question":"Tara loves creating number sequences. She recently stumbled upon an interesting problem involving sequences of numbers. She wants to create sequences of length N where the sum of the sequence equals K. Each element of the sequence must be a non-negative integer. Tara needs your help to figure out the number of such possible sequences. Since the answer can be very large, return the result modulo (10^9+7). Input Format The first line contains a single integer, T, denoting the number of test cases. Each test case consists of two integers, N and K separated by a space, where N is the length of the sequence and K is the sum of the sequence. Constraints 1 leq T leq 100 1 leq N leq 100 0 leq K leq 10^4 Output Format For each test case, output a single integer - the number of possible sequences of length N with sum K modulo (10^9+7). Sample Input 3 2 3 3 0 4 5 Sample Output 4 1 56 Explanation For the first test case, the sequences are: [0, 3], [1, 2], [2, 1], [3, 0]. Thus there are 4 valid sequences. For the second test case, the only sequence possible is [0, 0, 0]. Thus there is 1 valid sequence. For the third test case, there are 56 valid sequences of length 4 that sum to 5.","solution":"MOD = 10**9 + 7 def count_sequences(N, K): dp = [[0] * (K + 1) for _ in range(N + 1)] dp[0][0] = 1 for i in range(1, N + 1): for j in range(K + 1): dp[i][j] = dp[i - 1][j] if j - 1 >= 0: dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD return dp[N][K] def process_test_cases(test_cases): results = [] for n, k in test_cases: results.append(count_sequences(n, k)) return results"},{"question":"Charlie and Matilda are two passionate astronomy enthusiasts who love observing the stars and the constellations. Matilda, who is a bit more experienced, usually leads their stargazing sessions, introducing Charlie to new constellations and celestial phenomena. One evening, Matilda decides to challenge Charlie with a game related to their favorite hobby. The game is as follows: They are given a list of n stars, each defined by its coordinate (xi, yi) in a 2D plane. They need to determine the largest square that can be formed by selecting four stars from the given list. The sides of the square must be parallel to the coordinate axes. Knowing Charlie\'s competitive nature, Matilda offers an exciting reward if Charlie can solve the challenge within the given time limit. Your task is to help Charlie determine the side length of the largest square that can be formed with four of the stars. -----Input----- The first line of input contains an integer n (4 ≤ n ≤ 2000) — the number of stars. Each of the next n lines contains two integers xi, yi (0 ≤ xi, yi ≤ 10000) — the coordinates of each star. -----Output----- Output a single integer — the side length of the largest square that can be formed using the stars. If no square can be formed, output 0. -----Example----- Input 6 1 1 1 4 4 1 4 4 2 2 3 3 Output 3","solution":"def largest_square_side_length(stars): Determines the side length of the largest square that can be formed with the stars. The sides of the square must be parallel to the coordinate axes. :param stars: List of tuples, each containing x and y coordinates of a star :return: Integer representing the largest side length of the square star_set = set(stars) max_side_length = 0 for i in range(len(stars)): for j in range(i + 1, len(stars)): x1, y1 = stars[i] x2, y2 = stars[j] if x1 != x2 and y1 != y2: if (x1, y2) in star_set and (x2, y1) in star_set: side_length = abs(x2 - x1) max_side_length = max(max_side_length, side_length) return max_side_length"},{"question":"A cybersecurity firm is working on analyzing network traffic to detect possible malicious activity. They are specifically interested in identifying patterns of repeating sequences in the network packets. If a sequence of packets contains repeating patterns, it might indicate an issue such as a replay attack. You are tasked with developing a function that can detect the longest repeating sequence in a given sequence of packets. If multiple sequences of the same length exist, the alphabetically first one should be selected. The sequence should be more than one element long to be considered a repeating sequence. -----Input----- The input consists of: - One line with an integer n (1 leq n leq 100000), the number of packets. - One line with n space-separated strings, each representing a packet ID. -----Output----- If a repeating sequence is found, output the longest repeating sequence. If there are multiple repeating sequences of the same length, output the alphabetically smallest one. If no repeating sequence exists, print \\"No repeating sequence found\\". -----Examples----- Sample Input 1: 10 pkt1 pkt4 pkt2 pkt4 pkt2 pkt4 pkt2 pkt4 pkt2 pkt8 Sample Output 1: pkt4 pkt2 pkt4 pkt2 pkt4 pkt2 Sample Input 2: 6 pkt3 pkt3 pkt3 pkt5 pkt5 pkt6 Sample Output 2: pkt3 pkt3 Sample Input 3: 5 pkt7 pkt8 pkt9 pkt7 pkt8 Sample Output 3: pkt7 pkt8 Sample Input 4: 4 pkt10 pkt11 pkt12 pkt10 Sample Output 4: No repeating sequence found Implement this as a function in the programming language of your choice.","solution":"def longest_repeating_sequence(n, packets): Finds the longest repeating sequence in the given packets. if n <= 1: return \\"No repeating sequence found\\" sequence_lengths = {} for i in range(n): for j in range(i + 1, n): seq_len = 0 while j + seq_len < n and packets[i + seq_len] == packets[j + seq_len]: seq_len += 1 if seq_len > 1: seq = \' \'.join(packets[i:i + seq_len]) if seq not in sequence_lengths: sequence_lengths[seq] = seq_len else: sequence_lengths[seq] = max(sequence_lengths[seq], seq_len) if not sequence_lengths: return \\"No repeating sequence found\\" max_len = max(sequence_lengths.values()) candidates = [seq for seq, length in sequence_lengths.items() if length == max_len] return sorted(candidates)[0]"},{"question":"PQR is organizing a grand event with multiple activities and wants to ensure that participants enjoy the event by attending as many activities as possible without any overlap in their schedule. To achieve this, PQR has come up with a list of activities, each with a start and end time. PQR tasks you with writing an algorithm to select the maximum number of non-overlapping activities. An activity is considered non-overlapping with another if and only if the end time of one activity is less than or equal to the start time of the other activity. Your goal is to select the maximum number of activities that don\'t overlap, ensuring participants can enjoy the event to their fullest. Given the start and end times of activities, determine the maximum number of non-overlapping activities that can be attended. Input Format: - The first line of input contains a single integer N (1 ≤ N ≤ 10^5), the number of activities. - Each of the next N lines contains two integers, the start and end times of an activity. Output Format: - A single integer, the maximum number of non-overlapping activities that can be attended. Constraints: - 0 ≤ start time, end time ≤ 10^9 - The activities are given in no particular order. Example Input: ``` 3 1 2 3 4 2 3 ``` Example Output: ``` 3 ``` Explanation: All three activities can be attended without any overlap. The optimal ordering is: Activity (1, 2), Activity (2, 3), and Activity (3, 4). Example Input: ``` 5 1 3 2 4 3 5 5 7 6 8 ``` Example Output: ``` 3 ``` Explanation: The maximum set of non-overlapping activities are (1, 3), (3, 5), and (5, 7).","solution":"def max_activities(n, activities): Returns the maximum number of non-overlapping activities that can be attended. :param n: Number of activities :param activities: List of tuples where each tuple contains start and end time of an activity :return: Maximum number of non-overlapping activities # Sort activities based on their end time activities.sort(key=lambda x: x[1]) # Initialize count of activities and the end time of the last selected activity count = 0 end_time = -1 # Iterate through sorted activities for start, end in activities: if start >= end_time: # Update end_time and increment count if the current activity does not overlap end_time = end count += 1 return count"},{"question":"# Task: You have to write a function **generate_triangle** which returns a triangle pattern of stars up to \'n\' rows, where \'n\' is the parameter. Rules/Note: * If the argument is 0 or a negative integer, it should return \\"\\" (an empty string). * The stars in the triangle should be aligned to the right. * The pattern should be created such that there are no trailing spaces. * Range of \'n\' is [-∞, 50] # Examples: generate_triangle(5): \\" *n **n ***n ****n*****\\" generate_triangle(3): \\" *n **n***\\" generate_triangle(1): \\"*\\" generate_triangle(0): \\"\\" generate_triangle(-5): \\"\\" Here, each `n` denotes a new line, and you should ensure that your function produces these newline characters correctly in the returned string.","solution":"def generate_triangle(n): Returns a right-aligned triangle pattern of stars up to \'n\' rows. Parameters: n (int): The number of rows for the triangle. Returns: str: The right-aligned triangle pattern as a string. Returns an empty string if \'n\' is 0 or a negative integer. if n <= 0: return \\"\\" # Generate each row of the triangle triangle_rows = [] for i in range(1, n + 1): spaces = \' \' * (n - i) stars = \'*\' * i triangle_rows.append(spaces + stars) # Join all rows with newlines return \'n\'.join(triangle_rows)"},{"question":"The city\'s traffic control system is being upgraded to ease congestion during peak hours. One of the new features involves better traffic signal synchronization between consecutive intersections. Each intersection has a traffic light that can be either green or red. You are tasked with designing an algorithm to determine the longest contiguous sequence of intersections with green traffic lights. Each intersection has a unique identifier from 1 to N, and you are provided with a list of intersection statuses that indicate whether a traffic light is green or red. Your goal is to calculate the number of intersections in the longest contiguous sequence where all the traffic lights are green. -----Input----- The input consists of two lines: 1. The first line contains a single integer N (1 leq N leq 10^6) that represents the total number of intersections. 2. The second line contains a string of N characters, each of which is either \'G\' for a green light or \'R\' for a red light. -----Output----- Output a single integer, which is the length of the longest contiguous sequence of intersections with green traffic lights. -----Examples----- Sample Input: 10 RRGGRGGGGR Sample Output: 4 Sample Input: 5 GGGGG Sample Output: 5 Sample Input: 6 RRRRRR Sample Output: 0","solution":"def longest_green_sequence(N, traffic_lights): Returns the length of the longest contiguous sequence of green traffic lights. Parameters: N (int): Number of intersections traffic_lights (str): A string of length N with \'G\' for green lights and \'R\' for red lights Returns: int: Length of the longest contiguous sequence of green traffic lights max_length = 0 current_length = 0 for light in traffic_lights: if light == \'G\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"You are working on a file compression algorithm. The algorithm is designed to compress sequences of characters by counting consecutive repeated characters and storing the character followed by the number of repetitions. Your task is to implement this compression algorithm. Given a string, create a function that returns the compressed version of the string. If the compressed version is not shorter than the original, the function should return the original string. **Function Signature** ```python def compress_string(s: str) -> str: ``` **Input** - A single string `s` (1 ≤ |s| ≤ 1000), where |s| denotes the length of the string. The string only contains lowercase English letters. **Output** - Return the compressed string or the original string if the compression does not produce a shorter string. **Examples** ```python assert compress_string(\\"aabcccccaaa\\") == \\"a2b1c5a3\\" assert compress_string(\\"abcdef\\") == \\"abcdef\\" assert compress_string(\\"aabbccdd\\") == \\"aabbccdd\\" assert compress_string(\\"aaaabbb\\") == \\"a4b3\\" ``` **Explanation** 1. In the first example, the original string `aabcccccaaa` is compressed to `a2b1c5a3`, which is shorter. 2. In the second example, `abcdef` does not have any repeated characters, so the compressed version would be the same length. 3. In the third example, `aabbccdd` has repeated characters but compressing it does not save any space (`a2b2c2d2` is the same length as `aabbccdd`), so the original string is returned. 4. In the fourth example, `aaaabbb` is compressed to `a4b3`, which is shorter.","solution":"def compress_string(s: str) -> str: Compresses a string using the counts of repeated characters. :param s: The original string :return: The compressed string if it is shorter, otherwise the original string if not s: return \\"\\" compressed = [] count = 1 current_char = s[0] for char in s[1:]: if char == current_char: count += 1 else: compressed.append(f\\"{current_char}{count}\\") current_char = char count = 1 compressed.append(f\\"{current_char}{count}\\") compressed_string = \\"\\".join(compressed) if len(compressed_string) >= len(s): return s else: return compressed_string"},{"question":"You are given an array of integers and a target sum. Your task is to determine whether there are two distinct indices in the array such that the integers at those positions add up to the target sum. If such indices exist, return their 0-based indices; otherwise, return an empty list. Write a function `find_indices` that takes in two arguments: - `arr` (a list of integers): the given array. - `target` (an integer): the target sum. The function should return a list of two integers representing the indices of the two elements that add up to the target sum, or an empty list if no such indices exist. -----Input----- - The first line contains an integer `t` (1 le t le 1000) — the number of test cases. - For each test case, the first line contains two integers `n` and `target` (1 le n le 10^5, -10^9 le target le 10^9). - The second line of each test case contains `n` integers a_i (-10^9 le a_i le 10^9). It\'s guaranteed that the sum of n over all test cases doesn\'t exceed 10^6. -----Output----- For each test case, output a single line containing two integers — the 0-based indices of the two elements that add up to the target sum. If no such elements exist, output an empty list. -----Examples----- Input 3 5 9 2 7 11 15 1 4 6 1 2 3 4 3 5 3 2 4 Output [0, 1] [1, 3] [1, 2] -----Note----- In the first sample, the integers at positions 0 and 1 add up to 9. In the second sample, the integers at positions 1 and 3 add up to 6. In the third sample, the integers at positions 1 and 2 add up to 5.","solution":"def find_indices(arr, target): Finds two distinct indices in the array such that the integers at those positions add up to the target sum. Returns the indices if found, otherwise returns an empty list. Parameters: arr (list): Array of integers. target (int): Target sum to find. Returns: list: Indices of the two elements that add up to the target sum, or an empty list if no such pair exists. seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i return []"},{"question":"In a competitive programming contest, there is a challenge that involves finding the smallest multiple of a given integer `n` that consists only of the digits 1 and 0. The problem can be quite tricky because the number can be very large. Your task is to help the contestants by writing a program that computes such a number efficiently. Input The input consists of a single integer `n` (1 <= n <= 10000). Output The output should be the smallest multiple of `n` that contains only the digits 1 and 0. If there are multiple such numbers, print any of them. Input Example 3 Output Example 111 In the above example, 111 is a multiple of 3, and it is the smallest number containing only the digits 1 and 0 that satisfies this condition. Input Example 5 Output Example 10 In the above example, 10 is a multiple of 5, and it is the smallest number containing only the digits 1 and 0 that satisfies this condition.","solution":"from collections import deque def smallest_multiple(n): Returns the smallest multiple of n that consists only of the digits 1 and 0. if n == 1: return \'1\' # BFS approach to find the smallest multiple consisting of 1s and 0s queue = deque([\'1\']) visited = set() while queue: current = queue.popleft() current_mod = int(current) % n if current_mod == 0: return current if current_mod not in visited: visited.add(current_mod) queue.append(current + \'0\') queue.append(current + \'1\')"},{"question":"# Task You are given an array of integers. An array is said to be \\"good\\" if for every element in the array, there exists another element in the array such that their sum is square (i.e., a number which is the square of some integer). Determine whether the given array is \\"good\\" or not. # Input/Output `[input]` integer array `arr` An array of integers. `2 ≤ arr.length ≤ 100` `-1000 ≤ arr[i] ≤ 1000` `[output]` a boolean Return `True` if the array is \\"good\\", otherwise return `False`. # Example For `arr = [1, 3, 5, 7]`, the output should be `False`. No element pairs in the array sum up to a square number. For `arr = [1, 3, 7, 2]`, the output should be `True`. Pairs `(1, 3)` sum up to `4` which is `2^2`, and pairs `(7, 2)` sum up to `9` which is `3^2`. For `arr = [4, 5, 8, 3]`, the output should be `False`. Not all elements can be paired with another to sum up to a square number.","solution":"import math def is_good_array(arr): def is_square(n): if n < 0: return False root = int(math.isqrt(n)) return root * root == n n = len(arr) for i in range(n): found_pair = False for j in range(n): if i != j and is_square(arr[i] + arr[j]): found_pair = True break if not found_pair: return False return True"},{"question":"You are given a list of email addresses. Each email address in the list follows the format `username@domain.extension`. Your task is to filter out the invalid email addresses and print the valid ones in alphabetical order. An email address is considered valid if: 1. The username contains only letters (a-z, A-Z), digits (0-9), dashes (-), underscores (_), and dots (.). 2. The domain contains only letters (a-z, A-Z) and digits (0-9). 3. The extension contains only letters (a-z) and is between 2 to 3 characters long. Input Format The first line contains an integer N, the number of email addresses. The next N lines contain the email addresses. Output Format Output the valid email addresses in alphabetical order. If no valid email addresses are found, output an empty list. Sample Input 6 username@domain.com user-name@domain.net user_name@domain.org user.name@domain.co.in user@name@domain.com user#name@domain.com Sample Output [\'user-name@domain.net\', \'user_name@domain.org\', \'username@domain.com\'] Explanation After validating each email address according to the given rules, the valid email addresses are `user-name@domain.net`, `user_name@domain.org`, and `username@domain.com`. They are printed in alphabetical order. The email addresses `user.name@domain.co.in`, `user@name@domain.com`, and `user#name@domain.com` are considered invalid due to nonconforming formats or forbidden characters.","solution":"import re def validate_email(email): Validates the email address according to specified rules. - Username contains only letters, digits, dashes, underscores, and dots. - Domain contains only letters and digits. - Extension contains only letters and is 2 to 3 characters long. pattern = r\'^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+.[a-z]{2,3}\' return re.match(pattern, email) is not None def get_valid_emails(emails): Filters the list of emails and returns a sorted list of valid emails. valid_emails = [email for email in emails if validate_email(email)] return sorted(valid_emails) # Example usage if __name__ == \\"__main__\\": N = int(input()) emails = [input().strip() for _ in range(N)] valid_emails = get_valid_emails(emails) print(valid_emails)"},{"question":"Given an array of integers and a target sum, write a function that determines if there are any two distinct integers in the array that add up to the target sum. If such a pair exists, return their indices as a tuple (i, j) where i < j. If no such pair exists, return None. Your function should handle both positive and negative integers and must have a time complexity of O(n). If the input is not a list of integers, your function should return \\"Input is not a list\\". If the target is not an integer, return \\"Target is not an integer\\". Example: ```python find_pair_with_sum([2, 7, 11, 15], 9) ``` Output: ```python (0, 1) ``` Example: ```python find_pair_with_sum([3, 2, 4], 6) ``` Output: ```python (1, 2) ``` Example: ```python find_pair_with_sum([3, 3], 6) ``` Output: ```python (0, 1) ```","solution":"def find_pair_with_sum(arr, target): Finds two distinct integers from the list that add up to the target sum. Parameters: arr (list): List of integers. target (int): Target sum. Returns: tuple: Indices of the two numbers whose sum is equal to target. None: If no such pair exists or if input is invalid. if not isinstance(arr, list): return \\"Input is not a list\\" if not all(isinstance(i, int) for i in arr): return \\"Input is not a list\\" if not isinstance(target, int): return \\"Target is not an integer\\" seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return None"},{"question":"Given an array of positive integers and a target integer, determine the indices of the two numbers that add up to the target. You must implement a function that solves this problem, following these constraints: each input would have exactly one solution, and you may not use the same element twice. Write a function `find_pair_with_sum` that takes an array of integers and a target integer, and returns a tuple with the indices of the two numbers that add up to the target. The function should have the following signature: ```python def find_pair_with_sum(nums: List[int], target: int) -> Tuple[int, int]: ``` **Input** - The first line is an integer n (2 ≤ n ≤ 10^5), representing the number of elements in the array. - The second line contains n integers representing the array elements. - The third line is an integer target (1 ≤ target ≤ 10^9). **Output** - Output a single line containing two space-separated indices of the elements from the array that add up to the target. - If there are multiple valid answers, return the pair with the least index in terms of increasing order. **Examples** Input ``` 5 2 7 11 15 1 9 ``` Output ``` 0 1 ``` Input ``` 4 1 2 3 4 6 ``` Output ``` 1 3 ``` **Note** In the first example: - `nums[0] + nums[1] = 2 + 7 = 9` - Thus, the solution is (0, 1). In the second example: - `nums[1] + nums[3] = 2 + 4 = 6` - Thus, the solution is (1, 3).","solution":"from typing import List, Tuple def find_pair_with_sum(nums: List[int], target: int) -> Tuple[int, int]: Finds the indices of the two numbers in the array that add up to the target. Parameters: nums (List[int]): List of integers. target (int): The target sum. Returns: Tuple[int, int]: The indices of the two numbers adding up to the target. index_map = {} for index, number in enumerate(nums): complement = target - number if complement in index_map: return (index_map[complement], index) index_map[number] = index raise ValueError(\\"No two sum solution\\")"},{"question":"You are given a binary string s. Determine the minimum number of contiguous substrings into which you can split s such that each substring represents a palindromic string. -----Input----- The first line contains a single integer t (1leq tleq 100) — the number of test cases. Each of the next t lines contains a single string s (1leq |s|leq 1000), a binary string. -----Output----- For each test case, print a single integer — the minimum number of palindromic contiguous substrings. -----Examples----- Input 3 1100 10101 11111 Output 4 5 1 -----Note----- In the first test case, the minimum number of palindromic contiguous substrings is four: \\"1\\", \\"1\\", \\"0\\", \\"0\\". In the second test case, the minimum number is five: \\"1\\", \\"0\\", \\"1\\", \\"0\\", \\"1\\". In the third test case, the minimum number is one: \\"11111\\".","solution":"def min_palindromic_substrings(t, test_cases): results = [] for s in test_cases: # If all characters in s are the same, it\'s already a palindrome if s == s[0] * len(s): results.append(1) else: # Otherwise, each character needs to be a substring results.append(len(s)) return results"},{"question":"Problem : Manish is solving a challenge that requires him to analyze a sequence of integers. His goal is to determine if the sequence is \\"steady\\" or \\"fluctuating\\". A sequence is considered \\"steady\\" if the difference between every two consecutive elements is the same. Otherwise, the sequence is considered \\"fluctuating\\". Input : The first line contains an integer T representing the number of test cases. Each of the next T lines contains a sequence of integers. Output : For each test case, print \\"STEADY\\" if the sequence is steady, otherwise print \\"FLUCTUATING\\". Constraints : 1 ≤ T ≤ 100 2 ≤ Number of integers in a sequence ≤ 100 Each integer in the sequence will be between -1000 and 1000. SAMPLE INPUT 2 1 3 5 7 4 2 -2 -5 SAMPLE OUTPUT STEADY FLUCTUATING","solution":"def analyze_sequence(sequences): Determines if each sequence is \\"steady\\" or \\"fluctuating\\". :param sequences: List of lists, where each inner list is a sequence of integers. :return: List of strings, each either \\"STEADY\\" or \\"FLUCTUATING\\". results = [] for seq in sequences: steady = True common_difference = seq[1] - seq[0] for i in range(1, len(seq) - 1): if seq[i+1] - seq[i] != common_difference: steady = False break if steady: results.append(\\"STEADY\\") else: results.append(\\"FLUCTUATING\\") return results # Function to process input and return results in the required format def process_input(T, sequences): return analyze_sequence(sequences)"},{"question":"A software company is designing a new text editor and needs a feature to check if a programming code snippet is properly nested with respect to certain keywords. Specifically, the check should ensure that every \'start\' keyword has a corresponding \'end\' keyword and that these pairs are properly nested. For example: - The code snippet \\"start block end\\", is properly nested. - The code snippet \\"start block start end end\\", is properly nested. - The code snippet \\"start block end start block\\" is not properly nested. Write a program that determines if a given code snippet is properly nested. -----Input----- The first line contains a single integer T, the number of test cases. T test cases follow. Each test case consists of a single string representing the code snippet. -----Output----- For each test case, output a single line containing \\"YES\\" if the code snippet is properly nested, otherwise \\"NO\\". -----Example----- Input: 3 start end start start end end start end start Output: YES YES NO -----Constraints----- - 1 <= T <= 5 - 1 <= |snippet| <= 100 - Each snippet contains only the words \'start\', \'end\', and whitespace.","solution":"def is_properly_nested(snippets): results = [] for snippet in snippets: stack = [] words = snippet.split() for word in words: if word == \'start\': stack.append(word) elif word == \'end\': if stack and stack[-1] == \'start\': stack.pop() else: stack.append(word) if not stack: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input_output(T, snippets): return is_properly_nested(snippets)"},{"question":"Alex is the owner of a popular online bakery. He is about to release a new range of special cookies. Each cookie has a unique recipe that can be characterized by a sequence of ingredients. Alex wants to ensure that these recipes are unique and none of the ingredients overlap in an unexpected way. He needs to solve this problem programmatically. You need to help Alex by writing a function that checks if a given list of strings, where each string represents a recipe, contains any overlapping ingredients across different cookies. Two recipes are considered overlapping if they share at least one common ingredient. Input: - The first line of the input contains an integer `n` (2 ≤ n ≤ 100), which represents the number of recipes. - The next `n` lines each contain a recipe. A recipe is represented by a string of lowercase English letters, with each letter denoting a separate ingredient. No recipe is empty, and the length of each recipe will not exceed 500 characters. Output: - Return \\"YES\\" if there is at least one pair of recipes that share at least one common ingredient. - Return \\"NO\\" if all recipes are unique with no overlapping ingredients. Examples: Input: 3 abc def gha Output: YES Input: 4 abc def ghi jkl Output: NO Explanation: In the first example, the recipes `abc` and `gha` share the ingredient `a`, hence the function would output \\"YES\\". In the second example, there are no overlapping ingredients among any of the recipes, thus the function would output \\"NO\\".","solution":"def check_overlap(n, recipes): Returns \'YES\' if any two recipes share at least one common ingredient, otherwise \'NO\'. Parameters: n (int): The number of recipes. recipes (List[str]): A list of strings representing the recipes. Returns: str: \'YES\' if at least one pair of recipes shares a common ingredient, \'NO\' otherwise. seen_ingredients = set() for recipe in recipes: current_ingredients = set(recipe) if not seen_ingredients.isdisjoint(current_ingredients): return \\"YES\\" seen_ingredients.update(current_ingredients) return \\"NO\\""},{"question":"Alice loves playing with strings and numbers. She recently came up with an interesting problem where she needs your help. The problem involves a string and a series of operations. You are given a string `s` which consists of lowercase English letters, and an integer `k`. You need to perform the following operations on the string: 1. Pick any character from the string `s`, remove it, and append it to the end of the string. 2. Repeat the first operation `k` times such that the resulting string is lexicographically smallest. Input The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains a string `s` (1 ≤ |s| ≤ 10^5). The second line of each test case contains an integer k (1 ≤ k ≤ 10^5). It is guaranteed that the total length of all strings in the input does not exceed 10^6. Output For each test case, output the lexicographically smallest string that can be obtained after performing the operation exactly `k` times. Examples Input 2 abc 1 cba 1 Output abc bac Note In the first test case, you can take `a` from the start and move it to the end, resulting in the string `bca`. Since the desired smallest string is requested, it implies the initial string itself is already the smallest. In the second test case, to get a lexicographically smallest string after one move, you can take `c` from the start and move it to the end, resulting in the string `bac`.","solution":"def smallest_lexicographic_string(s, k): Returns the lexicographically smallest string that can be obtained after performing exactly k operations. if k >= len(s): return \'\'.join(sorted(s)) smallest = s for i in range(k): s = s[1:] + s[0] if s < smallest: smallest = s return smallest def process_test_cases(t, cases): results = [] for i in range(t): s, k = cases[i] result = smallest_lexicographic_string(s, k) results.append(result) return results"},{"question":"Alice has recently started working with strings and loves analyzing and transforming them. She discovered a unique property related to making strings palindromic. A string is palindromic if it reads the same forward and backward. Alice wants to transform a given string into a palindromic one with the minimum number of character modifications. Each modification involves changing one character in the string to any other character. Alice wants you to write a function to calculate the minimum number of character modifications required to make the given string palindromic. Input Format: - The first line contains an integer `t`, the number of test cases. - The following `t` lines each contain a single string `s`. Output Format: - For each test case, output a single integer denoting the minimum number of character modifications required to make the string `s` palindromic. Constraints: - 1 ≤ t ≤ 100 - 1 ≤ length of s ≤ 10^5 - The string `s` consists of lowercase English letters. Sample Input: 3 abc abca abcba Sample Output: 1 1 0","solution":"def min_modifications_to_palindrome(s): Returns the minimum number of modifications required to make string s palindromic. n = len(s) count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count def process_test_cases(t, test_cases): results = [] for case in test_cases: results.append(min_modifications_to_palindrome(case)) return results"},{"question":"Write a function that determines the minimum number of steps required to convert a given string `s1` into another string `s2` using the following operations: 1. Insert a character 2. Remove a character 3. Replace a character The order of characters must be preserved in these operations. Your goal is to write a function called `min_steps_to_convert(s1, s2)` that takes in two strings `s1` and `s2`, and returns the minimum number of steps required to transform `s1` into `s2`. # Input - A string `s1` containing only lowercase English letters. - A string `s2` containing only lowercase English letters. # Output - An integer representing the minimum number of steps required to convert `s1` to `s2`. # Examples Example 1 - Input: `s1 = \\"cat\\"`, `s2 = \\"cut\\"` - Output: `1` - Explanation: Replace \'a\' with \'u\'. Example 2 - Input: `s1 = \\"sunday\\"`, `s2 = \\"saturday\\"` - Output: `3` - Explanation: 1. Replace \'n\' with \'r\'. 2. Insert \'a\' at index 1. 3. Insert \'t\' at index 2. # Notes - You may assume that the length of both strings will be at most 1000. - Aim for an efficient solution both in terms of time and space complexity.","solution":"def min_steps_to_convert(s1, s2): Returns the minimum number of steps required to convert string s1 to string s2. The possible operations are insert, remove, replace a character. m = len(s1) n = len(s2) # Create a 2D array to store the number of operations required dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, we need to insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, we need to remove all characters of s1 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If last characters are same, ignore them else: dp[i][j] = 1 + min(dp[i-1][j], # Remove character from s1 dp[i][j-1], # Insert character to s1 dp[i-1][j-1]) # Replace character in s1 return dp[m][n]"},{"question":"Given a grid of size n x n, you have to write a program that helps you identify the largest cross of 1s in that grid. A cross consists of one vertical and one horizontal line of 1s, intersecting at a single point. Both the vertical and horizontal lines must be of equal lengths, centered at the same point. The goal is to find the maximum length of such a cross. For example, consider the following 5x5 grid: ``` 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 ``` The largest cross that can be found in this grid has a length of 3: ``` 0 0 1 0 0 0 0 1 0 0 1 1 1 1 1 0 0 1 0 0 0 0 1 0 0 ``` Input The input consists of multiple datasets, followed by a line containing a single zero. Each dataset starts with an integer n representing the size of the grid (2 ≤ n ≤ 20), followed by n lines each containing n integers (0 or 1) separated by spaces, representing the values in the grid. Output For each dataset, print the maximum length of the largest cross that can be found in the grid. Example Input: 5 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 5 0 0 0 1 0 0 1 0 1 0 1 1 1 1 1 0 1 0 1 0 0 0 0 1 0 0 Output: 3 2","solution":"def largest_cross_in_grid(n, grid): def compute_arm_lengths(matrix, n): left = [[0] * n for _ in range(n)] right = [[0] * n for _ in range(n)] top = [[0] * n for _ in range(n)] bottom = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): if grid[i][j] == 1: left[i][j] = (left[i][j - 1] + 1) if j > 0 else 1 top[i][j] = (top[i - 1][j] + 1) if i > 0 else 1 for i in range(n - 1, -1, -1): for j in range(n - 1, -1, -1): if grid[i][j] == 1: right[i][j] = (right[i][j + 1] + 1) if j < n - 1 else 1 bottom[i][j] = (bottom[i + 1][j] + 1) if i < n - 1 else 1 return left, right, top, bottom left, right, top, bottom = compute_arm_lengths(grid, n) max_cross_length = 0 for i in range(n): for j in range(n): if grid[i][j] == 1: length = min(left[i][j], right[i][j], top[i][j], bottom[i][j]) max_cross_length = max(max_cross_length, length) return max_cross_length def parse_input(input_string): lines = input_string.strip().split(\'n\') i = 0 datasets = [] while i < len(lines): n = int(lines[i]) if n == 0: break grid = [] for j in range(n): grid.append(list(map(int, lines[i + j + 1].split()))) datasets.append((n, grid)) i += n + 1 return datasets def get_largest_crosses(input_string): datasets = parse_input(input_string) results = [] for n, grid in datasets: results.append(largest_cross_in_grid(n, grid)) return results"},{"question":"Given an array of integers, you need to create another array where each element at index `i` is the product of all integers in the input array except the one at `i`. Write a function `product_except_self(nums)` that takes a list of integers, `nums`, as input and returns a list of integers corresponding to the described condition. ------ Input ------ - A single list of integers, `nums` with length `n`. ------ Output ------ - A single list of integers where element at index `i` is the product of all elements in the input array except the one at `i`. ------ Constraints ------ - 2 leq n leq 10^5 - -100 leq nums[i] leq 100 - There will be no division by zero during the computation. ------ Example ------ Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] ------ Explanation ------ In the provided example, the result is calculated as follows: - The product of elements except `1` is `2 * 3 * 4 = 24` - The product of elements except `2` is `1 * 3 * 4 = 12` - The product of elements except `3` is `1 * 2 * 4 = 8` - The product of elements except `4` is `1 * 2 * 3 = 6`","solution":"def product_except_self(nums): Returns an array where each element at index `i` is the product of all integers in the input array except the one at index `i`. n = len(nums) if n == 0: return [] result = [1] * n left_product = 1 right_product = 1 # Calculate left products for each element for i in range(n): result[i] = left_product left_product *= nums[i] # Multiply with right products for each element for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"An ancient civilization has hidden a precious artifact in a maze-like structure. The structure can be represented as an `n x m` grid, where each cell can either be empty (`.`) or blocked (`#`). The goal is to find the shortest path from the top-left corner of the grid (cell `(1, 1)`) to the bottom-right corner (cell `(n, m)`). You can move up, down, left, or right, but you cannot move through blocked cells. If there is no path from the start to the end, output `-1`. Input The first line contains two space-separated integers `n` and `m` (2 ≤ n, m ≤ 1000) — the dimensions of the grid. The next `n` lines each contain `m` characters representing the grid. Output Output a single integer — the length of the shortest path from the top-left corner to the bottom-right corner, or `-1` if there is no such path. Examples Input ``` 5 5 ..... .#. ..#.. .#.#. ..... ``` Output ``` 8 ``` Input ``` 4 4 ``` Output ``` -1 ``` Note In the first example, the shortest path from `(1, 1)` to `(5, 5)` takes `8` moves: `(1, 1) → (2, 1) → (3, 1) → (3, 2) → (4, 2) → (5, 2) → (5, 3) → (5, 4) → (5, 5)`. In the second example, all cells are blocked, so there is no path from the start to the end.","solution":"from collections import deque def shortest_path(grid): Returns the length of the shortest path from the top-left corner (1,1) to the bottom-right corner or -1 if there is no path. The grid is represented as a list of strings, where \'.\' denotes an empty cell and \'#\' denotes a blocked cell. n = len(grid) m = len(grid[0]) # Directions vectors for moving right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # BFS initialization queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n - 1, m - 1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an integer array `arr` consisting of NN positive integers. Your task is to handle multiple queries that ask for the sum of numbers in a specific subarray of `arr`. Each query provides the starting and ending index of the subarray, and you need to calculate the sum of the elements in that subarray. -----Input:----- - The first line contains a single integer NN — the size of the array. - The second line contains NN integers representing the elements of `arr`. - The third line contains an integer QQ — the number of queries. - The next QQ lines contain two integers lL and rR (1-indexed) representing the starting and ending indices of the subarray respectively. -----Output:----- - Print QQ lines. Each line ii should contain the sum of the subarray from lL to rR for the i-th query. -----Constraints----- - 1≤N≤1051 leq N leq 10^5 - 1≤arr[i]≤1031 leq arr[i] leq 10^3 - 1≤Q≤1051 leq Q leq 10^5 - 1≤l,r≤N1 leq l, r leq N - l≤rl leq r -----Sample Input:----- 5 1 2 3 4 5 3 1 3 2 5 1 5 -----Sample Output:----- 6 14 15 -----Explanation:----- - For the first query, the subarray from index 1 to 3 is [1, 2, 3], and the sum is 1 + 2 + 3 = 6. - For the second query, the subarray from index 2 to 5 is [2, 3, 4, 5], and the sum is 2 + 3 + 4 + 5 = 14. - For the third query, the subarray from index 1 to 5 is [1, 2, 3, 4, 5], and the sum is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def prepare_prefix_sum(arr): Prepare the prefix sum array for the given array arr. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] return prefix_sum def sum_query(prefix_sum, l, r): Calculate the sum of the subarray from index l to r (1-indexed) using the prefix sum array. return prefix_sum[r] - prefix_sum[l - 1] def handle_queries(N, arr, Q, queries): Process multiple sum queries on the array arr. prefix_sum = prepare_prefix_sum(arr) results = [] for l, r in queries: results.append(sum_query(prefix_sum, l, r)) return results"},{"question":"Given a string `chemicalFormula` representing the chemical formula of a molecule, return the count of each atom. The atomic element consists of letters where the first letter is uppercase, followed by zero or more lowercase letters. Each element might also have a count in the formula that indicates the number of times that element appears in the molecule. If no count is provided, it means the count is 1. Count for each atom can be larger than 1, and a molecule may include nested parentheses groups, which means a group of elements and their respective counts are enclosed within parentheses. Numeric multipliers for nested groups will appear immediately following the closing parenthesis for that group. Example 1: Input: chemicalFormula = \\"H2O\\" Output: {\\"H\\": 2, \\"O\\": 1} Explanation: The formula H2O contains 2 Hydrogens and 1 Oxygen. Example 2: Input: chemicalFormula = \\"(H2O2)2\\" Output: {\\"H\\": 4, \\"O\\": 4} Explanation: The formula (H2O2)2 contains 4 Hydrogens and 4 Oxygens. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `countAtoms` which takes a string `chemicalFormula` as input and returns a dictionary with the count of each atom. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ |chemicalFormula| ≤ 1000 |chemicalFormula| denotes the length of the string chemicalFormula. The formula will always be well-formed, including correct placement and matching of parentheses.","solution":"import re from collections import defaultdict def countAtoms(chemicalFormula): def multiply_counts(counter, multiplier): for key in counter.keys(): counter[key] *= multiplier stack = [] count = defaultdict(int) i = 0 n = len(chemicalFormula) while i < n: if chemicalFormula[i] == \'(\': stack.append(count) count = defaultdict(int) i += 1 elif chemicalFormula[i] == \')\': j = i + 1 multiplicity = 0 while j < n and chemicalFormula[j].isdigit(): multiplicity = multiplicity * 10 + int(chemicalFormula[j]) j += 1 multiplicity = max(multiplicity, 1) multiply_counts(count, multiplicity) temp = count count = stack.pop() for k in temp: count[k] += temp[k] i = j else: match = re.match(r\'([A-Z][a-z]*)(d*)\', chemicalFormula[i:]) element = match.group(1) count_str = match.group(2) count[element] += int(count_str) if count_str else 1 i += len(match.group(0)) return dict(count)"},{"question":"You are given a tree with `n` nodes (numbered from 1 to n) and `n-1` edges. Your task is to count the number of nodes at each depth level from the root node (node 1). -----Input----- The first line contains the integer `n` (1 ≤ n ≤ 100,000), the number of nodes in the tree. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), representing an edge between nodes `u` and `v`. -----Output----- Output the number of nodes at each depth level from the root node (node 1). Output the result as a space-separated list where the ith number is the number of nodes at depth i from the root. -----Examples----- Input 5 1 2 1 3 3 4 2 5 Output 1 2 2 Input 4 1 2 1 3 1 4 Output 1 3 -----Note----- In the first sample: - Nodes at depth 0: [1]. - Nodes at depth 1: [2, 3]. - Nodes at depth 2: [4, 5]. In the second sample: - Nodes at depth 0: [1]. - Nodes at depth 1: [2, 3, 4].","solution":"from collections import defaultdict, deque def count_nodes_at_depths(n, edges): # Create an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS for depth counting depths = [0] * (n + 1) visited = [False] * (n + 1) queue = deque([(1, 0)]) # (node, depth) visited[1] = True while queue: node, depth = queue.popleft() depths[depth] += 1 for neighbour in tree[node]: if not visited[neighbour]: visited[neighbour] = True queue.append((neighbour, depth + 1)) # Filter out zeroes return [count for count in depths if count > 0]"},{"question":"Given a rectangular matrix that represents a city with buildings and empty spaces. Each cell in the matrix can either be a building (\'B\') or space (\' \'). A building at (i, j) is connected with another building at (k, l) if there is a path from (i, j) to (k, l) going only through buildings (up, down, left, or right). Your task is to find the number of distinct building clusters. Example 1: Input: [ [\'B\', \' \', \'B\'], [\' \', \'B\', \' \'], [\'B\', \' \', \'B\'] ] Output: 5 Explanation: There are 5 distinct building clusters in the matrix: 1. Building at (0, 0) 2. Building at (0, 2) 3. Building at (1, 1) 4. Building at (2, 0) 5. Building at (2, 2) Example 2: Input: [ [\'B\', \'B\'], [\'B\', \' \'] ] Output: 1 Explanation: There is 1 distinct building cluster in the matrix as all buildings are connected directly or indirectly. Your Task: Do not read input or print anything. Your task is to complete the function `countBuildingClusters()` which takes a matrix representation and returns the number of distinct building clusters. Expected Time Complexity: O(m*n), where m is the number of rows and n is the number of columns in the matrix. Expected Auxiliary Space: O(m*n) Constraints: - 1 ≤ number of rows, number of columns ≤ 300 - Each cell of the matrix is either \'B\' or \' \'.","solution":"def countBuildingClusters(matrix): def dfs(matrix, x, y, visited): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < len(matrix) and 0 <= ny < len(matrix[0]) and (nx, ny) not in visited and matrix[nx][ny] == \'B\': visited.add((nx, ny)) stack.append((nx, ny)) if not matrix: return 0 visited = set() clusters = 0 for i in range(len(matrix)): for j in range(len(matrix[0])): if matrix[i][j] == \'B\' and (i, j) not in visited: clusters += 1 visited.add((i, j)) dfs(matrix, i, j, visited) return clusters"},{"question":"Given a binary tree, you need to find the maximum width of the tree. The width of a tree is defined as the maximum number of nodes present in any level of the tree. The input binary tree is represented as an array where the root node is at index 0 and for each node at index i, the left child is at index 2*i + 1 and the right child is at index 2*i + 2. If a node does not have a left or right child, it is represented by a sentinel value -1. Input: The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array representing the binary tree. The second line contains n integers a_1, a_2, ..., a_n (-1 ≤ a_i ≤ 10^9) — the elements of the array. Each element a_i can either be a positive integer value representing the node or -1 representing a missing node. Output: Print a single integer — the maximum width of the given tree. Examples Input 7 1 2 3 4 -1 5 6 Output 3 Input 15 1 2 3 4 5 6 7 8 9 -1 -1 10 11 -1 12 Output 5 Note In the first example, the binary tree can be visualized as: 1 / 2 3 / 4 5 6 The maximum width is 3, which is at the last level: [4, 5, 6]. In the second example, the binary tree can be visualized as: 1 / 2 3 / / 4 5 6 7 / / 8 9 10 11 12 The maximum width is 5, which is at the second last level: [8, 9, 10, 11, 12].","solution":"def max_width_of_tree(n, tree): if n == 0 or tree[0] == -1: return 0 from collections import deque queue = deque([(0, 0)]) # (index, depth) current_depth = 0 current_level_nodes = [] max_width = 0 while queue: index, depth = queue.popleft() if depth != current_depth: max_width = max(max_width, len(current_level_nodes)) current_depth = depth current_level_nodes = [] if index < n and tree[index] != -1: current_level_nodes.append(tree[index]) left_child = 2 * index + 1 right_child = 2 * index + 2 if left_child < n and tree[left_child] != -1: queue.append((left_child, depth + 1)) if right_child < n and tree[right_child] != -1: queue.append((right_child, depth + 1)) # Final level check max_width = max(max_width, len(current_level_nodes)) return max_width"},{"question":"Tom has a forest composed of `m` types of trees, and each type of tree has a unique height. Tom enjoys arranging the trees such that he can form a scenic pathway. The pathway must be set up so that at least two distinct types of trees line up consecutively. Given `m`, the number of tree types, and the height of each type, devise a method for Tom to create the longest possible pathway that adheres to the following rules: 1. The pathway must include each type of tree exactly once (in correct height order). 2. For any two adjacent trees in the pathway, their height difference should not exceed a given threshold difference `d`. You need to find the longest possible pathway that adheres to these rules or determine if it\'s impossible to form such a pathway. Input: - The first line contains an integer `t` (1 ≤ t ≤ 5) — the number of test cases. - The first line of each test case contains two integers `m` (2 ≤ m ≤ 100,000) — the number of tree types and `d` (1 ≤ d ≤ 1,000,000,000) — the maximum allowed height difference. - The second line of each test case contains `m` integers `h1, h2, ..., hm` (1 ≤ h_i ≤ 1,000,000,000) — the heights of the trees. Output: - For each test case, if it\'s possible to form the pathway, print: - An integer `k` (2 ≤ k ≤ m) — the length of the longest pathway. - A list of `k` integers — representing the ordered heights of trees in the pathway. - If it\'s not possible to form any valid pathway, print `-1`. Example: Input: ``` 3 3 2 5 3 6 4 1 2 5 8 6 5 3 1 3 2 6 5 ``` Output: ``` 3 3 5 6 -1 5 1 3 2 5 6 ``` Explanation: - For the first test case, the longest pathway that can be formed is by using the trees with heights [3, 5, 6] as their height differences (2 and 1) do not exceed the threshold. - For the second test case, it\'s not possible to form a pathway because the height differences between all possible adjacent trees will exceed the threshold. - For the third test case, a valid longest pathway is [1, 3, 2, 5, 6] where the height differences all satisfy the threshold.","solution":"def longest_pathway(t, test_cases): results = [] for case in test_cases: m, d, heights = case heights.sort() valid_pathway = [] for i in range(m): if not valid_pathway or abs(valid_pathway[-1] - heights[i]) <= d: valid_pathway.append(heights[i]) else: results.append(-1) break else: if len(valid_pathway) < 2: results.append(-1) else: results.append((len(valid_pathway), valid_pathway)) return results # Usage: t = 3 test_cases = [ (3, 2, [5, 3, 6]), (4, 1, [2, 5, 8, 6]), (5, 3, [1, 3, 2, 6, 5]) ] print(longest_pathway(t, test_cases))"},{"question":"Alicia loves programming competitions and has recently delved into the world of string manipulation. She wants to challenge herself with a unique problem involving special substrings. Given a string `s`, find the length of the longest substring that contains at most `k` distinct characters. -----Input----- - The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. - The first line of each test case contains an integer `k`. - The second line contains the string `s`. -----Output----- For each test case, print a single line containing one integer ― the length of the longest substring that contains at most `k` distinct characters. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ k ≤ 10 - 1 ≤ |s| ≤ 10^5, where |s| is the length of the string `s` - The string `s` consists of lowercase English letters only. -----Example Input----- 3 2 eceba 3 aa 2 aabbcc -----Example Output----- 3 2 4 -----Explanation----- Example case 1: The longest substring with at most 2 distinct characters is \\"ece\\", which has a length of 3. Example case 2: The longest substring with at most 3 distinct characters is \\"aa\\", which has a length of 2. Example case 3: The longest substring with at most 2 distinct characters is \\"aabb\\" or \\"bbcc\\", each with a length of 4.","solution":"def longest_substring_k_distinct(k, s): Returns the length of the longest substring that contains at most k distinct characters. n = len(s) if k == 0 or n == 0: return 0 left = 0 right = 0 max_len = 0 char_count = {} while right < n: char = s[right] char_count[char] = char_count.get(char, 0) + 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len def process_test_cases(test_cases): results = [] for k, s in test_cases: results.append(longest_substring_k_distinct(k, s)) return results"},{"question":"Tom loves organizing his book collection on his shelf. He has n books, each with a unique number on its spine, from 1 to n. He initially lines up all the books in numerical order from left to right. However, Tom has a peculiar sorting preference. He divides the books into k segments, each segment containing consecutive books and rearranges the books within each segment in reverse order. Help Tom identify the final order of the books on the shelf after reversing the segments. -----Input----- The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 100), where n is the number of books and k is the number of segments. The next line contains k space-separated integers, s_1, s_2, ..., s_k (1 ≤ s_i ≤ n), where s_i is the size of the i-th segment. Sum of all s_i is guaranteed to be n. -----Output----- Output n integers separated by spaces, representing the final order of the books on Tom\'s shelf after reversing the segments. -----Examples----- Input 8 3 2 3 3 Output 2 1 5 4 3 8 7 6 Input 6 2 3 3 Output 3 2 1 6 5 4 -----Note----- In the first example, the books are initially ordered as [1, 2, 3, 4, 5, 6, 7, 8]. Tom divides them into segments of sizes [2], [3], and [3]. After reversing the segments, the order becomes [2, 1, 5, 4, 3, 8, 7, 6]. In the second example, for the initial order [1, 2, 3, 4, 5, 6], the segments of sizes [3] and [3] lead to the final order [3, 2, 1, 6, 5, 4] when reversed.","solution":"def reverse_segments(n, k, segment_sizes): Returns the final order of books after reversing each segment. :param n: int - number of books :param k: int - number of segments :param segment_sizes: list - sizes of each segment :return: list - the final order of books after reversing the segments books = list(range(1, n + 1)) result = [] index = 0 for size in segment_sizes: segment = books[index:index + size] result.extend(segment[::-1]) index += size return result"},{"question":"Given a list of n integers, write a program to find the number of unique integers in the list. If an integer appears multiple times in the list, it should be counted only once. For example, in the list [1, 2, 2, 3, 4, 4, 5], there are 5 unique integers: 1, 2, 3, 4, and 5. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the following t lines contains a positive integer n (1 leq n leq 100) followed by n integers (1 leq value of each integer leq 100). -----Output----- For each test case, output a single integer — the number of unique integers in the list. -----Examples----- Input 3 7 1 2 2 3 4 4 5 5 1 1 1 1 1 6 3 3 3 3 4 4 Output 5 1 2 -----Note----- In the first test case, the list contains 5 unique integers: 1, 2, 3, 4, and 5. In the second test case, the list contains only 1 unique integer: 1. In the third test case, the list contains 2 unique integers: 3 and 4.","solution":"def count_unique_integers(t, test_cases): Returns the number of unique integers for each test case. :param t: Number of test cases :param test_cases: List of test cases, each containing the list of integers :return: List containing the count of unique integers in each test case results = [] for case in test_cases: n = case[0] numbers = case[1:] unique_numbers = set(numbers) results.append(len(unique_numbers)) return results"},{"question":"Write a function that simulates a number-guessing game. The rules are as follows: 1. There are two players: Player A and Player B. 2. Each player alternatively guesses a number. 3. The target number is randomly selected from a given range, but it is hidden from both players. 4. The function should take the following arguments: - `target` (int): The target number which players are trying to guess. - `guesses` (list): A list of integers representing player guesses made alternatively by Player A and Player B. 5. The function should return a string indicating the winner based on the following criteria: - The player who guesses the target number first wins. - If the list of guesses is exhausted and neither player has guessed the target number, return \\"No winner\\". - If both players guess the same valid number at the same turn, which is the target number, return \\"Draw\\". Function Signature ```python def guess_number_game(target: int, guesses: list) -> str: pass ``` Example ```python target = 7 guesses = [3, 5, 1, 7, 8, 6] result = guess_number_game(target, guesses) print(result) # Output: \\"Player B wins\\" target = 10 guesses = [2, 9, 5, 4, 10, 11] result = guess_number_game(target, guesses) print(result) # Output: \\"Player B wins\\" target = 3 guesses = [1, 2, 4, 5] result = guess_number_game(target, guesses) print(result) # Output: \\"No winner\\" target = 5 guesses = [4, 6, 5, 5] result = guess_number_game(target, guesses) print(result) # Output: \\"Draw\\" ```","solution":"def guess_number_game(target: int, guesses: list) -> str: Simulates a number-guessing game. Args: target (int): The target number which players are trying to guess. guesses (list): A list of integers representing player guesses made alternatively by Player A and Player B. Returns: str: The result of the game, indicating the winner or if there\'s no winner. for i in range(0, len(guesses), 2): player_a_guess = guesses[i] player_b_guess = guesses[i + 1] if i + 1 < len(guesses) else None if player_a_guess == target and player_b_guess == target: return \\"Draw\\" elif player_a_guess == target: return \\"Player A wins\\" elif player_b_guess == target: return \\"Player B wins\\" return \\"No winner\\""},{"question":"You are given a grid of size N x N filled with integers. You need to find the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner (N-1, N-1). You can move up, down, left, or right, but you cannot move to any cell that contains -1 as those cells are blocked. Write a program to find the shortest path if it exists and return the length of this path. If there is no path, return -1. Input: The first line contains an integer T representing the number of test cases. Each test case starts with an integer N representing the size of the grid. The next N lines each contain N space-separated integers representing the grid. Output: Print the length of the shortest path for each test case on a new line. If no valid path exists, print -1. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 100 Grid values are integers ranging from -1 to 1000. SAMPLE INPUT 2 3 0 0 0 0 -1 0 0 0 0 3 0 -1 0 -1 0 0 0 0 0 SAMPLE OUTPUT 4 -1 Explanation: For the first test case, the path exists and the shortest path is: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) For the second test case, there is no valid path from (0, 0) to (2, 2).","solution":"from collections import deque def shortest_path(grid): Returns the shortest path length from the top-left corner to the bottom-right corner of the grid. If no path exists, returns -1. def is_valid(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid) and grid[x][y] != -1 N = len(grid) if grid[0][0] == -1 or grid[N - 1][N - 1] == -1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, path_length = queue.popleft() if (x, y) == (N-1, N-1): return path_length for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, path_length + 1)) return -1 def find_shortest_paths(test_cases): results = [] for grid in test_cases: results.append(shortest_path(grid)) return results"},{"question":"You are tasked with solving the \\"Plant Watering Schedule\\" problem. Farmer John has a rectangular grid of size M times N representing his fields. Each cell in the grid has a specific water requirement that Farmer John must attend to each day. The water requirement for any cell is given as an integer. Farmer John\'s watering system can water a rectangular subgrid of cells in one operation. However, each time he waters, the plants in the target subgrid receive the same amount of water - equal to the highest water requirement among all the cells in the subgrid. Farmer John wants to minimize the total amount of water used each day to meet the requirements of all his plants. He can only apply water to rectangular subgrids, and he can water each subgrid multiple times if necessary. Your task is to determine the minimum total amount of water Farmer John needs to use each day to meet the water requirements of all the cells in the field. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two integers M and N — the dimensions of the grid. - The next M lines contain N integers each - representing the water requirements of the grid cells. ------ Output Format ------ For each test case, output a single line containing the minimum total amount of water required. ------ Constraints ------ 1 leq T leq 10^3 1 leq M, N leq 100 1 leq text{Water requirement of each cell} leq 100 ------ Sample Input 1 ------ 1 3 3 1 2 3 4 1 2 3 4 1 ------ Sample Output 1 ------ 9 ------ Explanation 1 ------ Test Case 1: - The minimum total water required is: - Watering subgrid (1,1) to (1,3) with 3 units of water. - Watering subgrid (2,1) to (2,3) with 4 units of water. - Watering subgrid (3,1) to (3,1) with 3 units of water. - Watering subgrid (3,2) to (3,3) with 4 units of water. Thus, the minimum amount of water used to meet all plants\' requirements is 3 + 4 + 3 + 4 = 14 units.","solution":"def min_total_water(T, test_cases): results = [] for case in test_cases: M, N, grid = case total_water = 0 for row in range(M): max_in_row = max(grid[row]) total_water += max_in_row results.append(total_water) return results # Parsing input and calling the function def parse_and_solve(input_data): data = input_data.strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): M = int(data[index]) N = int(data[index+1]) index += 2 grid = [] for _ in range(M): row = list(map(int, data[index:index+N])) grid.append(row) index += N test_cases.append((M, N, grid)) results = min_total_water(T, test_cases) return \\"n\\".join(map(str, results))"},{"question":"Passwords are an essential aspect of online security. You are tasked with creating a password validation tool that ensures passwords meet specific security criteria. Your tool will read a list of passwords and validate each one based on the requirements. A valid password must meet the following criteria: 1. It must be at least 8 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from the set !@#%^&*()-+ Write a program that checks if each password from a given list is valid or not. -----Input----- Input begins with an integer 1 leq t leq 100, indicating the number of passwords to follow. The following t lines each contain one password. Passwords consist of printable ASCII characters and have a maximum length of 50 characters. -----Output----- For each password, print \\"VALID\\" if the password meets all the criteria, otherwise print \\"INVALID\\". -----Examples----- Sample Input: 5 P@ssw0rd password PASSWORD Passw0rd! P@ssword2023 Sample Output: VALID INVALID INVALID VALID VALID","solution":"import re def is_valid_password(password): Checks if a given password is valid based on the specified criteria: 1. At least 8 characters long. 2. Contains at least one uppercase letter. 3. Contains at least one lowercase letter. 4. Contains at least one digit. 5. Contains at least one special character from the set !@#%^&*()-+ if len(password) < 8: return \\"INVALID\\" if not re.search(r\'[A-Z]\', password): return \\"INVALID\\" if not re.search(r\'[a-z]\', password): return \\"INVALID\\" if not re.search(r\'d\', password): return \\"INVALID\\" if not re.search(r\'[!@#%^&*()-+]\', password): return \\"INVALID\\" return \\"VALID\\" def check_password_list(passwords): results = [] for password in passwords: results.append(is_valid_password(password)) return results"},{"question":"Write a function that takes a string as input and returns the length of the longest substring with all distinct characters. For example, if the input is \\"abcabcbb\\", the output should be 3, as the longest substring with all distinct characters is \\"abc\\".","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_index_map = {} longest_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest_length = max(longest_length, i - start + 1) return longest_length"},{"question":"Tony and Steve are best friends and superhero enthusiasts. They love to solve puzzles involving their favorite superheroes. This time they have a list of superpowers and a single number representing the total power required for a special mission. Unfortunately, they need your help to find whether a given subset of these superpowers can exactly sum up to the required power. -----Input:----- - The first line contains an integer N, the number of superpowers. - The second line contains N integers representing the power levels of the superpowers. - The third line contains an integer representing the required power. -----Output:----- Print \'YES\' if there exists a subset of the power levels that sum up to the required power. Otherwise, print \'NO\'. -----Sample Input:----- 5 2 3 7 8 10 11 -----Sample Output:----- YES -----Constraints----- - 1 leq N leq 20 - 1 leq Power leq 10^6","solution":"def can_sum_to_power(powers, required_power): n = len(powers) def backtrack(index, current_sum): if current_sum == required_power: return True if index >= n or current_sum > required_power: return False # Choose the current element if backtrack(index + 1, current_sum + powers[index]): return True # Don\'t choose the current element if backtrack(index + 1, current_sum): return True return False return backtrack(0, 0) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) powers = list(map(int, data[1:N+1])) required_power = int(data[N+1]) result = can_sum_to_power(powers, required_power) if result: print(\'YES\') else: print(\'NO\')"},{"question":"You are given an array of n integers and a target integer k. Your task is to determine whether there exist two distinct indices i and j in the array such that the sum of the elements at these indices is equal to the target k. For example, if the array is [2, 7, 11, 15] and the target k is 9, the sum of the elements at indices 0 and 1 is equal to 9 (2 + 7 = 9). -----Input----- The first line contains an integer n (2 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. The third line contains a single integer k (-10^{18} le k le 10^{18}) — the target sum. -----Output----- Output \\"YES\\" if there are two distinct indices i and j such that the sum of the elements at these indices is equal to k. Otherwise, output \\"NO\\". You should output each letter of \\"YES\\" and \\"NO\\" in uppercase. -----Examples----- Input 4 2 7 11 15 9 Output YES Input 3 1 2 3 6 Output NO -----Note----- In the first example, the pair of indices (0, 1) makes the sum equal to 9 (2 + 7 = 9). Therefore, the output is \\"YES\\". In the second example, no pair of distinct indices makes the sum equal to 6. Therefore, the output is \\"NO\\".","solution":"def has_pair_with_sum(arr, k): Determines if there are two distinct indices in the array such that their sum equals k. Parameters: arr (list of int): The array of integers. k (int): The target sum. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Alex is a puzzle enthusiast and loves working on patterns. He recently came across the concept of Pascal\'s Triangle and was fascinated by it. He decided to generate Pascal\'s Triangle up to a given number of rows, but he needs your help to implement it. Task Write a function that generates the first `n` rows of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of the binomial coefficients. For example, the first 5 rows of Pascal\'s Triangle are: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` Input An integer `n` where `1 <= n <= 30`. Output A list of lists of integers representing the first `n` rows of Pascal\'s Triangle. Examples # Example 1: Input: ``` n = 3 ``` Output: ``` [ [1], [1, 1], [1, 2, 1] ] ``` # Example 2: Input: ``` n = 5 ``` Output: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ```","solution":"def generate_pascals_triangle(n): Generates the first n rows of Pascal\'s Triangle. Args: n (int): The number of rows of Pascal\'s Triangle to generate. Returns: List[List[int]]: A list of lists of integers representing the first n rows of Pascal\'s Triangle. if n < 1 or n > 30: raise ValueError(\\"n must be between 1 and 30 inclusive.\\") triangle = [] for row_num in range(n): row = [1] * (row_num + 1) for j in range(1, row_num): row[j] = triangle[row_num - 1][j - 1] + triangle[row_num - 1][j] triangle.append(row) return triangle"},{"question":"You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it. Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked-lists are: [ 1->4->5, 1->3->4, 2->6 ] merging them into one sorted list: 1->1->2->3->4->4->5->6 Example 2: Input: lists = [] Output: [] Example 3: Input: lists = [[]] Output: [] Note: - k == lists.length - 0 <= k <= 10^4 - 0 <= lists[i].length <= 500 - -10^4 <= lists[i][j] <= 10^4 - lists[i] is sorted in ascending order. - The overall time complexity should be O(N log k), where N is the total number of nodes.","solution":"from heapq import heappop, heappush class ListNode: def __init__(self, x): self.val = x self.next = None def mergeKLists(lists): Merges k sorted linked-lists into one sorted linked-list. heap = [] # Push initial nodes of each list into the heap for i in range(len(lists)): if lists[i]: heappush(heap, (lists[i].val, i, lists[i])) dummy = ListNode(0) current = dummy while heap: val, list_index, node = heappop(heap) current.next = node current = current.next if node.next: heappush(heap, (node.next.val, list_index, node.next)) return dummy.next"},{"question":"Given an array A consisting of N positive integers, you can perform the following operation exactly once: * Choose any two adjacent elements and replace them with a single element equal to the sum of those two elements. Determine the maximum possible sum of elements in the array after performing the operation. Constraints * 2 le N le 300 * 1 le A[i] le 1000 Input Input is given from Standard Input in the following format: N A[1] A[2] ... A[N] Output Print the maximum possible sum of elements in the array after performing the operation. Examples Input 4 1 2 3 4 Output 10 Input 5 4 2 1 3 9 Output 19 Input 3 100 300 200 Output 600","solution":"def maximum_possible_sum(N, A): Returns the maximum possible sum of elements in the array after performing the operation. if N < 2: return 0 # Not enough elements to perform the operation max_sum = 0 # We can sum all elements because all we need to do is sum any two adjacent numbers which # will always result into having a total sum same as sum of all elements in the original array max_sum = sum(A) return max_sum"},{"question":"A robot is placed in an M times N grid. The robot can move up, down, left, or right, but it cannot visit the same cell more than once. The robot starts at the top-left corner of the grid and needs to reach the bottom-right corner. Write a function that returns the number of distinct paths the robot can take to reach its destination. -----Input----- The first line of input contains the integers M and N (1 leq M, N leq 12), the dimensions of the grid. -----Output----- Output the number of distinct paths the robot can take to reach the bottom-right corner of the grid. -----Examples----- Sample Input 1: 2 2 Sample Output 1: 2 Sample Input 2: 3 3 Sample Output 2: 6","solution":"def count_paths(M, N): Returns the number of distinct paths the robot can take to reach the bottom-right corner of an M x N grid. # Initialize a memoization grid memo = [[-1 for _ in range(N)] for _ in range(M)] def dfs(x, y): # If out of bounds, return 0 if x >= M or y >= N: return 0 # If we reached the destination, return 1 if x == M-1 and y == N-1: return 1 # If already computed, return the stored value if memo[x][y] != -1: return memo[x][y] # Compute the number of paths from this cell paths = dfs(x + 1, y) + dfs(x, y + 1) memo[x][y] = paths return paths # Start DFS from the top-left corner return dfs(0, 0)"},{"question":"Jasmine loves palindromic numbers. A palindromic number reads the same forwards and backwards, such as 121, 1331, or 7. She is also fascinated by sequences of numbers that can be split into multiple palindromic segments. Given a sequence of positive integers, determine whether it can be partitioned into contiguous palindromic segments. Each segment must be a palindromic number. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of integers in the sequence. The second line contains n positive integers separated by spaces — the sequence of numbers. Each number in the sequence is a positive integer with up to 5 digits. Output Print \\"YES\\" if the sequence can be partitioned into contiguous palindromic segments. Otherwise, print \\"NO\\" (without the quotes). Examples Input 5 1 2 3 2 1 Output YES Input 6 11 22 33 44 55 66 Output YES Input 6 123 121 131 456 567 565 Output NO Note In the first sample, the entire sequence \\"1 2 3 2 1\\" is a single palindromic segment. In the second sample, each number in the sequence is a palindromic number, thus the sequence can be partitioned into 6 palindromic segments: \\"11\\", \\"22\\", \\"33\\", \\"44\\", \\"55\\", and \\"66\\". In the third sample, while \\"123\\", \\"121\\", and \\"131\\" are palindromic, the sequence contains numbers \\"456\\" and \\"567\\" which are not palindromic, preventing the entire sequence from being partitioned into palindromic segments.","solution":"def is_palindrome(number): Check if a given number is a palindrome. str_number = str(number) return str_number == str_number[::-1] def can_partition_palindromic_segments(n, sequence): Determine if a sequence of numbers can be partitioned into contiguous palindromic segments. for num in sequence: if not is_palindrome(num): return \\"NO\\" return \\"YES\\""},{"question":"A company wants to analyze the performance of its employees over a month. Each employee\'s daily performance score is recorded on a scale from 1 to 10. You are given the performance scores of an employee for M days and a positive integer K. Your task is to find the maximum average performance score that can be achieved by considering exactly K consecutive days from the given performance scores. -----Constraints----- - 1 leq M leq 100 - 1 leq K leq M - 1 leq performance scores leq 10 -----Input----- Input is given from Standard Input in the following format: ``` M K performance_scores ``` performance_scores is a space-separated list of integers. -----Output----- Print the maximum average performance score achievable over exactly K consecutive days, rounded to two decimal places. -----Sample Input----- 7 3 6 7 5 8 7 7 9 -----Sample Output----- 7.67 By considering the performance scores of the employee over all possible segments of 3 consecutive days, `[6,7,5]`, `[7,5,8]`, `[5,8,7]`, `[8,7,7]`, and `[7,7,9]`, the maximum average is achieved with the segment `[7,7,9]`, which results in an average of `(7+7+9)/3 = 7.67`.","solution":"def max_average_performance(M, K, performance_scores): Returns the maximum average performance score that can be achieved by considering exactly K consecutive days from the given performance scores. max_avg = -float(\'inf\') current_sum = sum(performance_scores[:K]) for i in range(M - K + 1): if i > 0: current_sum = current_sum - performance_scores[i - 1] + performance_scores[i + K - 1] max_avg = max(max_avg, current_sum / K) return round(max_avg, 2) # Example usage: # M = 7 # K = 3 # performance_scores = [6, 7, 5, 8, 7, 7, 9] # print(max_average_performance(M, K, performance_scores)) # Output: 7.67"},{"question":"Write a function to determine the winner of a game of Tic-Tac-Toe. * The function should take one parameter: a 2D list representing a 3x3 Tic-Tac-Toe board. * The function should return a string indicating the winner (\\"X\\" or \\"O\\") or \\"Draw\\" if there\'s no winner and the board is full. * If the board is not in a completed state or if it\'s invalid (e.g., both \\"X\\" and \\"O\\" have winning lines, or there the number of \\"X\\"s is different from \\"O\\"s by more than 1), return \\"Invalid\\". **Constraints:** * The 2D list will contain only \\"X\\", \\"O\\", and empty strings \\"\\". # Example **Input:** [ [\\"X\\", \\"O\\", \\"X\\"], [\\"O\\", \\"X\\", \\"O\\"], [\\"\\", \\"O\\", \\"X\\"] ] **Output:** \\"X\\" **Explanation:** \\"X\\" wins as it has a diagonal from the top-left to the bottom-right.","solution":"def tic_tac_toe_winner(board): Determines the winner of a Tic-Tac-Toe game or returns \\"Draw\\" or \\"Invalid\\" based on the board state. :param board: A 2D list representing a 3x3 Tic-Tac-Toe board. :return: \\"X\\", \\"O\\", \\"Draw\\", or \\"Invalid\\". def check_winner(b, char): # Checking rows and columns for i in range(3): if all([cell == char for cell in b[i]]): return True if all([b[j][i] == char for j in range(3)]): return True # Checking diagonals if b[0][0] == b[1][1] == b[2][2] == char: return True if b[0][2] == b[1][1] == b[2][0] == char: return True return False flat_board = [cell for row in board for cell in row] # Check counts of X and O x_count = flat_board.count(\\"X\\") o_count = flat_board.count(\\"O\\") if abs(x_count - o_count) > 1: return \\"Invalid\\" x_wins = check_winner(board, \\"X\\") o_wins = check_winner(board, \\"O\\") if x_wins and o_wins: return \\"Invalid\\" if x_wins: return \\"X\\" if o_wins: return \\"O\\" if \\"\\" in flat_board: return \\"Draw\\" # Board is full and no winner return \\"Draw\\""},{"question":"You are given a rectangle in a 2D plane. Write a function to determine whether a given point lies inside the rectangle, on the border, or outside the rectangle. The rectangle is aligned with the coordinate axes, and you are provided with the coordinates of its bottom-left corner (x1, y1) and top-right corner (x2, y2). Input: The first line contains an integer T, the number of test cases. The next T lines each contain five integers: x1, y1, x2, y2, xp, yp, where (x1, y1) is the bottom-left corner of the rectangle, (x2, y2) is the top-right corner, and (xp, yp) is the point to be checked. Output: For each test case, print \\"INSIDE\\" if the point lies inside the rectangle, \\"ON BORDER\\" if the point lies on the edge of the rectangle, and \\"OUTSIDE\\" if the point lies outside the rectangle. Constraints: 1 ≤ T ≤ 1000 -10^9 ≤ x1, y1, x2, y2, xp, yp ≤ 10^9 SAMPLE INPUT 3 0 0 5 5 3 3 0 0 5 5 0 0 0 0 5 5 6 6 SAMPLE OUTPUT INSIDE ON BORDER OUTSIDE","solution":"def point_location_in_rectangle(x1, y1, x2, y2, xp, yp): Determine the point (xp, yp) location relative to the rectangle defined by bottom-left corner (x1, y1) and top-right corner (x2, y2). if x1 <= xp <= x2 and y1 <= yp <= y2: if xp == x1 or xp == x2 or yp == y1 or yp == y2: return \\"ON BORDER\\" else: return \\"INSIDE\\" else: return \\"OUTSIDE\\" def process_test_cases(test_cases): results = [] for case in test_cases: x1, y1, x2, y2, xp, yp = case result = point_location_in_rectangle(x1, y1, x2, y2, xp, yp) results.append(result) return results"},{"question":"You are given a Binary Search Tree (BST) where each node contains an integer value and the BST satisfies the property that for each node, its key is greater than all the keys in its left subtree and less than all the keys in its right subtree. You need to determine if there exists a pair of nodes in the BST such that their sum is equal to a given target value. Note: If there are duplicate values in the BST, each value should be considered only once. Example 1: Input: Target = 15 Output: True Explanation: Nodes with values 5 and 10 sum up to 15. Example 2: Input: Target = 28 Output: False Explanation: There are no two nodes in the BST whose sum equals 28. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPairWithSum() which takes the root of the BST and target value as input, and returns a boolean value indicating if such a pair exists. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= n <= 10^4 1 <= Node Value <= 10^5 1 <= Target <= 2 * 10^5","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def findPairWithSum(root, target): def inorder_traverse(node, nodes): if node is None: return inorder_traverse(node.left, nodes) nodes.append(node.val) inorder_traverse(node.right, nodes) nodes = [] inorder_traverse(root, nodes) left, right = 0, len(nodes) - 1 while left < right: s = nodes[left] + nodes[right] if s == target: return True elif s < target: left += 1 else: right -= 1 return False"},{"question":"You are given an undirected graph with N nodes and M edges. Each node has a unique integer label from 1 to N. Your task is to find the length of the shortest path between two given nodes, S and T. If there is no path between S and T, return -1. ------ Input ------ The first line contains two integers N and M. The next M lines each contain two integers u and v, representing an edge between node u and node v. The last line contains two integers S and T, denoting the nodes between which you need to find the shortest path. ------ Output ------ Output a single integer representing the length of the shortest path between S and T. If there is no path, output -1. ------ Example ------ Input: 5 6 1 2 2 3 3 4 4 5 2 4 5 1 1 5 Output: 1 ------ Explanation ------ In the test case, there is a direct edge between nodes 1 and 5, so the shortest path length is 1. ------ Constraints ------ 1 ≤ N ≤ 100,000 1 ≤ M ≤ 200,000 1 ≤ u, v, S, T ≤ N","solution":"from collections import deque, defaultdict def shortest_path_length(n, m, edges, s, t): Find the shortest path between nodes S and T in an undirected graph. Parameters: n (int): Number of nodes m (int): Number of edges edges (list[tuple[int, int]]): List of edges represented as tuples (u, v) s (int): Start node t (int): Target node Returns: int: Length of the shortest path between S and T, or -1 if no path exists. if s == t: return 0 # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Perform BFS to find the shortest path queue = deque([(s, 0)]) visited = set([s]) while queue: current, distance = queue.popleft() for neighbor in graph[current]: if neighbor == t: return distance + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) # If we reach here, there is no path between S and T return -1"},{"question":"You are given an array of integers, where each integer is between 0 and 9 inclusive. You need to form the largest possible integer by arranging the elements of the array. If the largest possible integer is zero, return 0. -----Input:----- - The first line of the input consists of a single integer N denoting the number of test cases. - Each test case consists of a single line containing a space-separated list of integers. -----Output:----- - For each test case, print a single line containing the largest possible integer formed by the elements of the array. -----Constraints----- - 1 <= N <= 10 - 1 <= length of the array <= 100 -----Sample Input:----- 3 3 30 34 5 9 1 0 0 0 0 5 6 7 2 9 -----Sample Output:----- 9534330 0 97652","solution":"def largest_possible_integer(arr): Given an array of integers, return the largest possible integer formed by arranging the elements. # Convert each integer to a string to be able to concatenate arr_str = list(map(str, arr)) # Sort the array with a custom comparator arr_str.sort(key=lambda x: x*10, reverse=True) # Join the sorted strings result = \'\'.join(arr_str) # Convert result to an integer to remove any leading zeros and back to string result = str(int(result)) return result def process_largest_integer_cases(test_cases): results = [] for case in test_cases: arr = list(map(int, case.split())) results.append(largest_possible_integer(arr)) return results"},{"question":"Amelia is designing a toy railway system for children. The system consists of n stations numbered from 0 to n-1, connected by m unidirectional tracks. Each track allows movement from one station to another and has a specific length or cost. Your goal is to assist Amelia in finding whether there exist three distinct stations (u, v, w) such that there is a direct track from u to v, a direct track from v to w, and a direct track from w to u, forming a triangular cycle with non-zero cost. Write a program that determines if such a triangular cycle exists and, if so, returns the minimum total cost of such a cycle. If no such cycle exists, output \\"-1\\". Input The first line contains two integers n (3 ≤ n ≤ 1000) and m (3 ≤ m ≤ 10000) — the number of stations and the number of tracks, respectively. The next m lines each contain three integers ui, vi, and ci (0 ≤ ui, vi ≤ n-1, ui ≠ vi, 1 ≤ ci ≤ 10000) — indicating there is a track from station ui to station vi with a cost ci. Output Print a single integer — the minimum cost of a triangular cycle if one exists, or \\"-1\\" if there is no such cycle. Examples Input 4 5 0 1 5 1 2 4 2 0 3 0 3 7 3 1 6 Output 12 Input 3 3 0 1 2 1 2 2 2 0 2 Output 6 Input 3 2 0 1 3 1 2 3 Output -1 Note In the first example, the minimum cost triangular cycle is formed by the stations (0, 1, 2) with cost 5 + 4 + 3 = 12. In the second example, the only triangular cycle is formed by the stations (0, 1, 2) with cost 2 + 2 + 2 = 6. In the third example, there is no triangular cycle as there are only two tracks.","solution":"def find_minimum_cycle(n, m, tracks): # Create an adjacency matrix to store the costs adj = [[float(\'inf\')] * n for _ in range(n)] for u, v, c in tracks: adj[u][v] = c min_cost = float(\'inf\') # Try all pairs of edges to find cycles u -> v, v -> w, w -> u for u in range(n): for v in range(n): if u != v and adj[u][v] != float(\'inf\'): for w in range(n): if v != w and w != u and adj[v][w] != float(\'inf\') and adj[w][u] != float(\'inf\'): min_cost = min(min_cost, adj[u][v] + adj[v][w] + adj[w][u]) return min_cost if min_cost != float(\'inf\') else -1"},{"question":"Given an array of integers, determine whether there exists a non-empty subarray (contiguous elements) that sums to zero. -----Input:----- The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains a single integer N, the length of the array. - The second line contains N integers separated by spaces, representing the elements of the array. -----Output:----- For each test case, output \\"YES\\" if there exists at least one non-empty subarray with a sum of zero. Otherwise, output \\"NO\\". -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 10^5 - -10^9 leq text{array elements} leq 10^9 -----Sample input----- 2 5 4 2 -3 1 6 5 4 2 0 1 6 -----Sample output----- YES YES","solution":"def has_subarray_with_zero_sum(arr): Determines whether there exists a non-empty subarray with a sum of zero. Parameters: arr (list): List of integers Returns: str: \\"YES\\" if there exists at least one non-empty subarray with a sum of zero, otherwise \\"NO\\" prefix_sum = 0 sums_set = set() for num in arr: prefix_sum += num if prefix_sum == 0 or prefix_sum in sums_set: return \\"YES\\" sums_set.add(prefix_sum) return \\"NO\\" def solve_test_cases(T, test_cases): Solves multiple test cases for the problem of finding a subarray with zero sum. Parameters: T (int): Number of test cases test_cases (list): List of tuples where each tuple is (N, array) Returns: list: List of results (\\"YES\\" or \\"NO\\") for each test case results = [] for N, arr in test_cases: results.append(has_subarray_with_zero_sum(arr)) return results"},{"question":"In a small town, there is a bakery that has n different types of bread. Each type of bread has a certain popularity score assigned to it. The bakery owner wants to create a mixed loaf by combining exactly two different types of bread such that the resulting mixed loaf has the maximum combined popularity score. Can you help the bakery owner find the maximum combined popularity score for any pair of different types of bread? -----Input----- The first line contains an integer n (2 leq n leq 10^5), the number of different types of bread in the bakery. The second line contains n integers a_1, a_2, ..., a_n (0 leq a_i leq 10^9), where a_i denotes the popularity score of the i-th type of bread. -----Output----- Output a single integer, the maximum combined popularity score that can be obtained by mixing two different types of bread. -----Examples----- Sample Input: 4 5 3 9 7 Sample Output: 16 Sample Input: 3 1 1 1 Sample Output: 2","solution":"def max_combined_popularity_score(n, popularity_scores): Returns the maximum combined popularity score by combining exactly two different types of bread. Parameters: n (int): number of different types of bread popularity_scores (list of int): list of popularity scores of the breads Returns: int: maximum combined popularity score # Finding the two largest numbers in popularity_scores first_max = second_max = -1 for score in popularity_scores: if score > first_max: second_max = first_max first_max = score elif score > second_max: second_max = score return first_max + second_max"},{"question":"In a galaxy far, far away, there exists a star system with n planets. These planets are arranged in a straight line and are numbered from 1 to n. Each planet has some amount of gold reserves, measured in integer units. A spacecraft can mine gold from these planets. If the spacecraft lands on a planet i and mines g_i units of gold, it can then move to any of the neighboring planets i-1 or i+1 to mine gold there too, but must pay a fuel cost of f units for every transition between neighboring planets. The goal is to determine the maximum amount of gold the spacecraft can collect by landing on any planet, mining its gold, and making an infinite sequence of transitions (if not constrained by fuel costs). It can repeat visiting any planets multiple times. Your task is to write a program to calculate the maximum net gold the spacecraft can collect, taking into consideration the initial gold mining and the fuel cost for transitions. -----Input----- The first line contains two integers 1 leq n leq 10^5, the number of planets, and 1 leq f leq 1000, the fuel cost for each transition. The second line contains n space-separated integers g_1, g_2, ldots, g_n representing the gold reserves on each planet. -----Output----- Output a single integer, the maximum net gold the spacecraft can collect. -----Examples----- Sample Input 1: 5 3 10 20 30 40 50 Sample Output 1: 50 Sample Input 2: 4 5 5 20 10 35 Sample Output 2: 30 Sample Input 3: 3 1 1 2 1 Sample Output 3: 4","solution":"def max_net_gold(n, f, gold): Calculates the maximum net gold the spacecraft can collect. :param n: Number of planets :param f: Fuel cost for each transition :param gold: List of integers representing gold reserves on each planet :return: The maximum net gold as an integer max_gold = float(\'-inf\') for g in gold: max_gold = max(max_gold, g) return max_gold - f"},{"question":"You have been given an array of integers representing the prices of items in a store. You have a budget, and you want to buy as many items as possible without exceeding this budget. If there are multiple ways to buy the maximum number of items, you should choose the combination where the total price is minimized. Your task is to determine the maximum number of items you can buy and the corresponding total price. -----Input----- The first line of the input contains two integers n (1 le n le 10^5) — the number of items in the store, and B (1 le B le 10^9) — your budget. The second line of the input contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^9), where p_i is the price of the i-th item. -----Output----- In the first line, print one integer k — the maximum number of items you can buy without exceeding the budget. In the second line, print one integer — the minimum possible total price of those k items. -----Examples----- Input 5 10 1 2 3 4 5 Output 4 10 Input 4 15 3 1 4 2 Output 4 10 Input 6 20 5 3 8 6 1 4 Output 5 19","solution":"def max_items_within_budget(n, B, prices): # Sort prices to start buying cheaper items first prices.sort() total_price = 0 items_count = 0 for price in prices: if total_price + price <= B: total_price += price items_count += 1 else: break return items_count, total_price"},{"question":"In this task, you need to implement the `mostFrequentCharacters(s, k)` function that takes two inputs: a string `s` and an integer `k`. The function should return a list of the `k` most frequently occurring characters in the string. If there is a tie in frequency, sort the tied characters alphabetically. # Input - `s`: A string containing only lowercase English letters `(\'a\' - \'z\')`. - `k`: An integer where `1 <= k <= 26`. # Output - A list of strings containing the `k` most frequently occurring characters in `s`, ordered from highest frequency to lowest. If there are ties, the characters should be sorted alphabetically. # Examples ```python mostFrequentCharacters(\\"mississippi\\", 2) # returns [\'i\', \'s\'] mostFrequentCharacters(\\"programming\\", 3) # returns [\'g\', \'m\', \'r\'] mostFrequentCharacters(\\"alphabet\\", 1) # returns [\'a\'] ``` # Note - The function should use a dictionary to count the occurrences of each character. - Use sorting to handle ties in frequency. - The input string `s` is guaranteed to have at least `k` unique characters.","solution":"def mostFrequentCharacters(s, k): Returns the k most frequently occurring characters in the input string s. from collections import Counter # Count the frequency of each character frequency = Counter(s) # Sort characters based on frequency and then alphabetically sorted_chars = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) # Extract the top k characters result = [char for char, count in sorted_chars[:k]] return result"},{"question":"Write a function `find_highest_frequency_character` that takes a string `s` as input and returns the character that appears the most frequently. If there is a tie, return the character that appears first in the string. Input: A single string `s`. Output: A single character that has the highest frequency in the string `s`. Constraints: - The string `s` will consist of lowercase English letters only. - The length of the string `s` will be between 1 and 1000. Example Input aabccc Example Output c","solution":"def find_highest_frequency_character(s): Returns the character that appears the most frequently in the string `s`. If there is a tie, the character that appears first in the string is returned. from collections import Counter counts = Counter(s) max_count = max(counts.values()) for char in s: if counts[char] == max_count: return char"},{"question":"Problem Given two integer arrays, `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique, and the result can be in any order. You must write an algorithm with O(n) time complexity, where n is the maximum length of the two input arrays. Input The input consists of two lines: - The first line contains an integer list `nums1` where each element is separated by a space. - The second line contains an integer list `nums2` where each element is separated by a space. Output Output the elements of the intersection list in one line, where each element is separated by a space. The result must consist of unique elements. Constraints * 1 le nums1.length, nums2.length le 10^5 * -10^9 le nums1[i], nums2[i] le 10^9 Example Input 1 2 2 1 2 2 Output 2 Input 4 9 5 9 4 9 8 4 Output 9 4","solution":"def intersection(nums1, nums2): Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique, and the result can be in any order. # Convert the lists to sets to remove duplicates and use set intersection set1 = set(nums1) set2 = set(nums2) # Compute the intersection of the two sets intersect_set = set1 & set2 # Convert the resultant set back to a sorted list result = list(intersect_set) return result"},{"question":"The kingdom of Algorithmia has n cities connected by m bidirectional roads. The cities are numbered from 1 to n. Each road has a travel time associated with it. The king wants to know the shortest time to travel from the capital city (city 1) to all other cities in the kingdom. You are given the number of cities n, the number of roads m, and a list of tuples where each tuple contains two cities connected by a road and the travel time of that road. Calculate the shortest travel time from city 1 to all other cities. If a city is not reachable from city 1, return -1 for that city. -----Constraints----- - 1 ≤ n ≤ 1000 - 0 ≤ m ≤ 10000 - The travel time of any road is a positive integer ≤ 100 -----Input----- Input is given from Standard Input in the following format: n m u1 v1 w1 u2 v2 w2 ... um vm wm The first line contains two integers n and m. Each of the next m lines contains three integers u_i, v_i, w_i representing a road between cities u_i and v_i with travel time w_i. -----Output----- Output n integers. The i-th integer should be the shortest travel time from city 1 to city i. If a city is not reachable, output -1 for that city. -----Sample Input----- 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 -----Sample Output----- 0 2 3 6 7 In this case, the shortest travel times from city 1 are: - City 1: 0 (since it is the starting point) - City 2: 2 (1 -> 2) - City 3: 3 (1 -> 2 -> 3) - City 4: 6 (1 -> 2 -> 3 -> 4) - City 5: 7 (1 -> 2 -> 3 -> 4 -> 5)","solution":"import heapq def shortest_travel_times(n, m, roads): # Create a graph in the form of adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((w, v)) graph[v].append((w, u)) # Dijkstra\'s algorithm def dijkstra(start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for weight, v in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist distances = dijkstra(1) # Formatting the output to match the required output format result = [dist if dist != float(\'inf\') else -1 for dist in distances[1:]] return result"},{"question":"You are given a binary tree where each node contains a positive integer value. Your task is to find the maximum path sum. The path can start and end at any node in the tree but must go downwards (traveling only from parent nodes to child nodes). For example, the binary tree `[10, 2, 10, 20, 1, -25, -25, null, null, null, null, 3, 4]` represents the following tree: ``` 10 / 2 10 / / 20 1 -25 -25 / 3 4 ``` In this tree, the maximum path sum starting at any node and ending at any node is 42 (10 + 2 + 20 + 10). Function Description Complete the function maxPathSum below. maxPathSum has the following parameter: - TreeNode* root: the root of the binary tree Returns int: the maximum path sum Input Format The input is a binary tree formatted as an array using level order traversal. Constraints - The height of the tree is in the range [0, 1000]. - Node values are integers in the range [-1000, 1000]. Sample Input [10, 2, 10, 20, 1, -25, -25, null, null, null, null, 3, 4] Sample Output 42 Explanation The given binary tree has a maximum path sum of 42. Here is how you derive it: ``` 10 / 2 10 / / 20 1 -25 -25 / 3 4 ``` The path yielding the highest sum is 20 -> 2 -> 10 -> 10, which indeed sums to 42.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): def helper(node): nonlocal max_sum if not node: return 0 left_gain = max(helper(node.left), 0) # only take positive contributions right_gain = max(helper(node.right), 0) # only take positive contributions # the price of the path that passes through this node price_newpath = node.val + left_gain + right_gain # update the maximum sum if price_newpath is better max_sum = max(max_sum, price_newpath) # for recursion, return the maximum gain if continue the same path return node.val + max(left_gain, right_gain) max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":"A software company has developed a new system that needs to store and retrieve both numbers and strings efficiently. One requirement is that the system needs to compare different entries to sort and perform quick lookups. The entries are either strings or integers, and they follow a strict format rule: all strings contain only lowercase English letters (\'a\' - \'z\') and are of length 1 to 50. The integers can have a value between -10^9 to 10^9. Your task is to implement a function that reads a list of these entries (numbers and strings) and then outputs a sorted list where: - All the strings come before any number. - All the strings are sorted in lexicographical order. - All the numbers are sorted in non-decreasing order. # Input The input consists of: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of entries. - The second line contains n space-separated entries, where each entry is either an integer (whole number) or a string of lowercase English letters. # Output Output the sorted list of entries as described. # Examples Example 1 Input: ``` 6 banana 7 apple 42 -15 orange ``` Output: ``` apple banana orange -15 7 42 ``` Example 2 Input: ``` 4 10 -1 apple3 apple5 ``` Output: ``` apple3 apple5 -1 10 ``` # Notes - Ensure your solution handles the input efficiently, especially for the upper limit of n. - Do not assume that the input will always be well-formed; you can expect only valid strings and integers as per the given constraints.","solution":"def sort_entries(entries): This function takes a list of mixed entries (numbers and strings) and sorts them so that: - All strings appear before any numbers. - Strings are sorted in lexicographical order. - Numbers are sorted in non-decreasing order. :param entries: List of strings and integers :return: A sorted list with the described properties strings = [] numbers = [] for entry in entries: if isinstance(entry, str) and entry.lstrip(\'-\').isdigit(): numbers.append(int(entry)) else: strings.append(entry) strings.sort() numbers.sort() return strings + numbers def read_and_sort_entries(n, entry_list): return sort_entries(entry_list.split())"},{"question":"You need to check if a given string (x) can be balanced with parentheses. The string will contain only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Function should return True if the string is balanced and False otherwise. The conditions for a balanced string are as follows: 1. Every opening bracket must have a corresponding closing bracket of the same type. 2. Opening brackets must be closed in the correct order. Examples: ```is_balanced(\\"{}[]()\\")``` returns `True` <-- All brackets are correctly closed in the right order ```is_balanced(\\"{[}]\\")``` returns `False` <-- The brackets are not in the correct order ```is_balanced(\\"({[()]})\\")``` returns `True` <-- Nested brackets are closed correctly ```is_balanced(\\"((())\\")``` returns `False` <-- Not every opening bracket has a closing pair Write a function `is_balanced(x)` to accomplish this task.","solution":"def is_balanced(x): Checks if a given string x of parentheses is balanced. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in x: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or matching_bracket[char] != stack.pop(): return False else: return False return stack == []"},{"question":"You are given two strings `s` and `t`. You are required to find if `s` can be converted into `t` using the following operation any number of times: - Choose any character from the string `s` and replace it with any character that has the same frequency in `s` as it has in `t`. If `s` can be converted to `t` return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of test cases. The next `2*n` lines each contain two strings, `s` and `t`, (1 ≤ |s|, |t| ≤ 1000) consisting only of lowercase English letters. -----Output----- For each test case, output \\"YES\\" if `s` can be converted to `t` using the described operation, otherwise output \\"NO\\". -----Sample Input----- 3 aabbcc ccbbaa abcd dcab xyz yxz -----Sample Output----- YES YES NO","solution":"from collections import Counter def can_convert(s, t): Determines if string s can be converted to string t by replacing any character in s with another character that has the same frequency in t. if Counter(s) == Counter(t): return \\"YES\\" return \\"NO\\" def process_test_cases(n, test_cases): results = [] for s, t in test_cases: results.append(can_convert(s, t)) return results"},{"question":"A stock trading platform provides real-time updates on stock prices. To help users track stock prices over a period, you are asked to write a program that processes a list of stock prices and calculates the maximum profit that could have been obtained by buying a stock on one day and selling it on a later day. -----Input:----- The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (2 ≤ n ≤ 1000) — the number of days. The next line of each test case contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 10000) — the stock prices on each of the n days. -----Output:----- For each test case, print the maximum profit that could be achieved from one buy and one sell operation. If no profit is possible, print 0. -----Sample Input:----- 2 6 7 1 5 3 6 4 5 7 6 4 3 1 -----Sample Output:----- 5 0","solution":"def maximum_profit(test_cases): Returns a list of maximum profits for each test case. :param test_cases: list of tuples containing number of days and stock prices :return: list of integers representing the maximum profit for each test case results = [] for n, prices in test_cases: max_profit = 0 min_price = prices[0] for price in prices[1:]: if price < min_price: min_price = price else: potential_profit = price - min_price if potential_profit > max_profit: max_profit = potential_profit results.append(max_profit) return results def parse_input(input_str): Parse the input string to extract test cases information. :param input_str: string input with test cases information :return: list of tuples containing number of days and stock prices lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) prices = list(map(int, lines[index + 1].split())) test_cases.append((n, prices)) index += 2 return test_cases def parse_output(output_list): Parse the output list to formatted string output. :param output_list: list of integers containing the results for each test case :return: formatted string output return \\"n\\".join(map(str, output_list))"},{"question":"Anna follows a strict work routine and logs her working hours for each of the n days in a month. She wants a summary of her logging pattern, specifically identifying any consistent periods of consecutive logging hours. You are tasked with identifying the longest sequence of consecutive days where Anna logged the same number of hours each day. The provided input contains the number of days n, and a list of integers representing the hours logged by Anna each day. Your function should return the maximum length of a segment where the number of logged hours is the same each day. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 100 000) - the number of days in a month. The second line contains n space-separated integers representing the number of hours logged by Anna on each day (0 ≤ hours ≤ 24). -----Output----- Print a single integer - the length of the longest sequence of consecutive days where Anna logged the same number of hours each day. -----Examples----- Input 10 4 4 4 8 8 7 7 7 7 2 Output 4 Input 5 10 10 10 10 10 Output 5 -----Note----- In the first example, the longest sequence where Anna logged the same number of hours occurs with the number 7, spanning 4 consecutive days. In the second example, all days have the same number of logged hours, so the longest sequence has a length of 5.","solution":"def longest_consecutive_logged_hours(n, hours): Returns the length of the longest sequence of consecutive days where the number of logged hours is the same each day. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if hours[i] == hours[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"In a magical land, there is an ancient library that houses scrolls containing spells. Each scroll has a unique code represented as a sequence of positive integers. The wise wizards of the land have created a new spell to combine the power of any two given scrolls, by merging their sequences in a magical way. The spell works as follows: Given two sequences, one from each scroll, the resulting sequence must be the lexicographically smallest sequence that can be formed by merging the two sequences while maintaining the order of integers within each scroll. Your task is to assist the wizards by writing a program that takes two sequences and produces the desired resulting sequence. Input: The input begins with a single integer T, the number of test cases. For each test case, there are three lines. The first line contains an integer N, the length of the first sequence. The second line contains N positive integers representing the first sequence. The third line contains an integer M, the length of the second sequence. The fourth line contains M positive integers representing the second sequence. Output: For each test case, output a single line containing the resulting merged sequence, with integers separated by a single space. Constraints: 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1000 1 ≤ integer in sequence ≤ 10^9 SAMPLE INPUT 2 3 1 3 5 3 2 4 6 5 1 3 5 7 9 6 2 4 6 8 10 12 SAMPLE OUTPUT 1 2 3 4 5 6 1 2 3 4 5 6 7 8 9 10 12 Explanation: In the first test case, the sequences [1, 3, 5] and [2, 4, 6] are merged to form the lexicographically smallest sequence [1, 2, 3, 4, 5, 6], maintaining the order of integers within each sequence. In the second test case, merging [1, 3, 5, 7, 9] and [2, 4, 6, 8, 10, 12] results in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12] while maintaining the order of integers within each sequence.","solution":"def merge_sequences(seq1, seq2): Merges two sequences to form the lexicographically smallest sequence while maintaining the order of integers within each sequence. merged_sequence = [] i, j = 0, 0 while i < len(seq1) and j < len(seq2): if seq1[i] <= seq2[j]: merged_sequence.append(seq1[i]) i += 1 else: merged_sequence.append(seq2[j]) j += 1 if i < len(seq1): merged_sequence.extend(seq1[i:]) if j < len(seq2): merged_sequence.extend(seq2[j:]) return merged_sequence def magical_scroll_sequences(T, test_cases): Processes T test cases and returns the results as a list of merged sequences. results = [] for test in test_cases: N, seq1, M, seq2 = test merged = merge_sequences(seq1, seq2) results.append(merged) return results # Example usage (to be removed in actual solution): # T = 2 # test_cases = [ # (3, [1, 3, 5], 3, [2, 4, 6]), # (5, [1, 3, 5, 7, 9], 6, [2, 4, 6, 8, 10, 12]) # ] # print(magical_scroll_sequences(T, test_cases))"},{"question":"A manufacturer has a simple policy for packaging items into containers. Each container can only hold items with a total weight that does not exceed a given limit. Write a function that, given a list of item weights and the maximum weight a container can hold, determines the minimum number of containers needed to pack all the items. For example, if you have item weights of [5, 8, 1, 7, 4, 6] and a maximum container weight of 10, you can pack them into four containers like this: - [5, 4, 1] - [8] - [7] - [6] Create a function that receives the parameters for the list of item weights and the max weight a container can hold and returns the number of containers needed. Function Description Complete the function `packContainers` in the editor below. `packContainers` has the following parameters: - int weights[]: a list of weights of items. - int maxWeight: the maximum weight a container can hold. Returns - int: the minimum number of containers needed to pack all the items. Input Format The first line contains an integer `n`, the number of items. The second line contains `n` space-separated integers, `weights[i]` where 1 ≤ weights[i] ≤ 1000. The third line contains a single integer, `maxWeight`, the maximum weight a container can hold (1 ≤ maxWeight ≤ 1000). Constraints - 1 ≤ n ≤ 1000 Example Input 1 6 5 8 1 7 4 6 10 Example Output 1 4 Explanation 1 You can group the items into 4 containers as described in the example above. Example Input 2 4 1 1 1 1 2 Example Output 2 2 Explanation 2 Here, you can pack the items into two containers: [1, 1] and [1, 1].","solution":"def packContainers(weights, maxWeight): Determines the minimum number of containers needed to pack all items. Parameters: weights (list): A list of item weights. maxWeight (int): The maximum weight a container can hold. Returns: int: The minimum number of containers needed. weights.sort(reverse=True) # Sort the weights in descending order containers = [] for weight in weights: placed = False for i in range(len(containers)): if containers[i] + weight <= maxWeight: containers[i] += weight placed = True break if not placed: containers.append(weight) return len(containers)"},{"question":"Write a function `split_balanced_string(s: str) -> int` that takes a string `s` consisting of only characters \'L\' and \'R\'. This string is called a balanced string if it can be split into substrings where each substring contains the same number of \'L\' and \'R\' characters. The function should return the maximum amount of balanced substrings that you can obtain from `s`. ------ Input ------ - A single string `s` containing only the characters \'L\' and \'R\'. ------ Output ------ - A single integer representing the maximum number of balanced substrings. ------ Constraints ------ - 1 leq |s| leq 10^5 ------ Example Input ------ ```python s = \\"RLRRLLRLRL\\" ``` ------ Example Output ------ ```python 4 ``` ------ Explanation ------ Example case 1: The input string can be split into \\"RL\\", \\"RRLL\\", \\"RL\\", and \\"RL\\", each of which is balanced since they contain equal number of \'L\' and \'R\' characters. Therefore, the maximum number of balanced substrings is 4.","solution":"def split_balanced_string(s: str) -> int: Returns the maximum number of balanced substrings from the given string s. balance = 0 max_balanced_count = 0 for char in s: if char == \'L\': balance += 1 elif char == \'R\': balance -= 1 if balance == 0: max_balanced_count += 1 return max_balanced_count"},{"question":"Alice has recently started learning about sorting algorithms and wants to practice by sorting and merging multiple integer sequences. She has several sequences of integers and wants to merge them into a single sorted sequence. Given multiple sequences of integers, write a program to merge them into a single sorted sequence. Input The first line contains an integer k (1 ≤ k ≤ 100) — the number of sequences. Then follow k blocks of lines, each block starts with an integer mi (1 ≤ mi ≤ 100) — the number of elements in the i-th sequence, followed by mi integers which are the elements of the sequence. All sequence integers are in the range -10^9 to 10^9. Output Print one line containing the merged and sorted sequence of all integers from the k sequences. Examples Input 3 3 1 3 5 4 2 4 6 8 2 0 7 Output 0 1 2 3 4 5 6 7 8 Input 2 5 9 7 5 3 1 3 6 4 2 Output 1 2 3 4 5 6 7 9","solution":"def merge_and_sort_sequences(sequences): Merges and sorts multiple integer sequences. Args: sequences (list of list of ints): List of integer sequences to be merged and sorted. Returns: list of int: Merged and sorted list of integers. merged_list = [] for seq in sequences: merged_list.extend(seq) return sorted(merged_list) def main(k, sequences_input): sequences = [] idx = 0 for i in range(k): mi = sequences_input[idx] sequences.append(sequences_input[idx + 1 : idx + 1 + mi]) idx += 1 + mi return merge_and_sort_sequences(sequences)"},{"question":"You are given an array a consisting of n integers. Your task is to perform a series of operations to make all elements of the array equal. The allowed operation is to choose an integer k (1 ≤ k ≤ n-1) and add k to any single element while subtracting k from another element in the array. You must determine the minimum number of operations required to make all elements equal. Input The first line contains a single integer n (2 ≤ n ≤ 100,000), denoting the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the elements of the array. Output Output a single integer, the minimum number of operations required to make all elements of the array equal. Examples Input 4 7 3 5 9 Output 4 Input 3 7 7 7 Output 0 Note In the first example, the following operations can be performed: - Add 1 to the second element (3 -> 4) and subtract 1 from the first element (7 -> 6) - Add 2 to the second element (4 -> 6) and subtract 2 from the fourth element (9 -> 7) - Add 1 to the third element (5 -> 6) and subtract 1 from the first element (6 -> 5) - Add 1 to the third element (6 -> 7) and subtract 1 from the fourth element (7 -> 6) Thus, after 4 operations, all elements of the array become equal to 7. In the second example, all elements are already equal, so no operations are needed.","solution":"def min_operations_to_equalize_array(n, a): Returns the minimum number of operations required to make all elements of the array equal. # The optimal target value to equalize the array elements to is the median value. a.sort() median = a[n // 2] # Compute the total number of operations required to make all elements equal to the median operations = sum(abs(x - median) for x in a) return operations"},{"question":"Write a function to reverse the words in a given string. Words are separated by dots. The function should return a new string with the words in reverse order, but the words themselves should remain unchanged. Do not use any in-built string functions for this task. Example 1: Input: s = \\"i.like.this.program.very.much\\" Output: \\"much.very.program.this.like.i\\" Example 2: Input: s = \\"hello.world\\" Output: \\"world.hello\\" Your Task: Your task is to complete the given function reverseWords(), which takes a single input parameter: a string s. The function should return a string with words in the reverse order. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= |s| <= 100 Each word in the string consists only of lowercase English letters.","solution":"def reverseWords(s): Returns a string where the words are in reverse order, but the words themselves are unchanged. # Split the string into words by \'.\' words = [] word = \\"\\" for char in s: if char == \'.\': words.append(word) word = \\"\\" else: word += char words.append(word) # Reverse the list of words reversed_words = [] for i in range(len(words)-1, -1, -1): reversed_words.append(words[i]) # Join the reversed words with \'.\' reversed_string = \\"\\" for i in range(len(reversed_words)): if i != 0: reversed_string += \\".\\" reversed_string += reversed_words[i] return reversed_string"},{"question":"A company needs to come up with the optimal plan for shipping goods between warehouses and stores. Each warehouse can ship goods to multiple stores, but each store has a maximum capacity of how many goods it can accept. Given a list of warehouses, each with a certain number of goods available, and a list of stores, each with a certain capacity, your task is to determine the maximum number of goods that can be shipped from the warehouses to the stores without exceeding the capacities of the stores. You are given 3 lists of integers: one representing the goods available in each warehouse, one representing the capacities of each store, and one representing the shipping constraints which indicate which warehouse can ship to which store. The shipping constraints are given as pairs of indices where the first index corresponds to the warehouse and the second index corresponds to the store it can ship to. Write a function that calculates and prints the maximum number of goods that can be shipped from the warehouses to the stores. Input - The first line contains three integers: `w` (the number of warehouses), `s` (the number of stores), and `c` (the number of shipping constraints). - The second line contains `w` integers where the ith integer represents the number of goods available at the ith warehouse. - The third line contains `s` integers where the jth integer represents the maximum capacity of the jth store. - The next `c` lines each contain two integers `a` and `b` (0 ≤ a < w, 0 ≤ b < s), indicating that warehouse `a` can ship to store `b`. Output - A single integer representing the maximum number of goods that can be shipped from the warehouses to the stores. Example Input: 3 3 4 10 15 20 10 20 30 0 0 0 1 1 1 2 2 Output: 40 Explanation: - Warehouse 0 can send up to 10 goods to store 0 and 10 goods to store 1 (total 10). - Warehouse 1 can send up to 15 goods to store 1 (total 15). - Warehouse 2 can send up to 20 goods to store 2 (total 20). The maximum number of goods that can be shipped is 10 + 15 + 20 = 45.","solution":"def max_goods_shipped(w, s, c, warehouses, stores, constraints): import numpy as np from scipy.optimize import linprog # Initialize the coefficients matrix for the Linear Programming problem num_variables = c coefficients = np.zeros((s + w, num_variables)) # Constraints to not exceed stores capacity for i in range(c): _, store_index = constraints[i] coefficients[store_index][i] = 1 # Constraints to not exceed warehouses supply for i in range(c): warehouse_index, _ = constraints[i] coefficients[s + warehouse_index][i] = 1 # Define bounds for the decision variables bounds = [(0, None)] * num_variables # Right-hand side of the constraints rhs = stores + warehouses # Objective function coefficients (to maximize shipped goods) objective = [-1] * num_variables # Use linear programming to maximize the objective function res = linprog(c=objective, A_ub=coefficients, b_ub=rhs, bounds=bounds, method=\'highs\') max_goods = -res.fun if res.success else 0 return int(max_goods)"},{"question":"John loves playing with sequences of numbers. He especially enjoys exploring arithmetic progressions. One day, he decided to test his programming skills by writing a program that determines if a given sequence can be rearranged to form an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers such that the difference between consecutive terms is constant. --- Input Format --- - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input: - The first line contains an integer n, the length of the sequence. - The second line contains n integers, representing the elements of the sequence. --- Output Format --- For each test case, output \\"Yes\\" (without quotes) if the sequence can be rearranged to form an arithmetic progression, and \\"No\\" (without quotes) otherwise. --- Constraints --- 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 -10^9 ≤ text{element of sequence} ≤ 10^9 --- Subtasks --- Subtask #1 (20 points): 1 ≤ n ≤ 10 Subtask #2 (80 points): original constraints Note: The sum of n over all test cases will not exceed 10^6. --- Example Input 1 --- 2 5 3 1 5 7 9 4 2 4 1 7 --- Example Output 1 --- Yes No --- Explanation 1 --- For the first test case, the sequence can be rearranged to form the arithmetic progression [1, 3, 5, 7, 9]. For the second test case, there is no way to rearrange the sequence to form an arithmetic progression.","solution":"def can_form_arithmetic_progression(sequence): Determines whether a given sequence can be rearranged to form an arithmetic progression. Args: sequence (list of int): The sequence of integers. Returns: str: \\"Yes\\" if the sequence can be rearranged into an arithmetic progression, otherwise \\"No\\". sequence.sort() if len(sequence) < 2: return \\"Yes\\" diff = sequence[1] - sequence[0] for i in range(2, len(sequence)): if sequence[i] - sequence[i-1] != diff: return \\"No\\" return \\"Yes\\" def process_test_cases(test_cases): Processes multiple test cases to determine if each can be rearranged into an arithmetic progression. Args: test_cases (list of tuple): Each tuple contains (n, sequence) where n is the length of the sequence and sequence is the list of integers. Returns: list of str: Results of each test case (\\"Yes\\" or \\"No\\"). results = [] for n, sequence in test_cases: result = can_form_arithmetic_progression(sequence) results.append(result) return results"},{"question":"Determine the Sum of C and D. -----Constraints----- - 0 leq C leq 1000 - 0 leq D leq 1000 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: C D -----Output----- Print the value C + D as an integer. -----Sample Input----- 150 850 -----Sample Output----- 1000 We have 150 + 850 = 1000.","solution":"def sum_of_c_and_d(c, d): Returns the sum of c and d. return c + d if __name__ == \\"__main__\\": import sys input = sys.stdin.read c, d = map(int, input().split()) print(sum_of_c_and_d(c, d))"},{"question":"You are given a text made up of characters (a-z, A-Z) and punctuation marks (.,!?); spaces are also considered part of the text. Your task is to count the number of words in the text and identify the most frequent word. A word is defined as a contiguous sequence of alphabetical characters (a-z, A-Z). Ignore the case sensitivity when identifying words (e.g., \\"Hello\\" and \\"hello\\" should be considered the same word). Punctuation should not be considered part of a word (e.g., \\"hello!\\" should be considered as \\"hello\\"). In the event of a tie for the most frequent word, your program should return the lexicographically smallest word. Input The first line contains an integer N, the number of test cases. Each of the following N lines contains a string representing the text for that test case. Output For each test case, output one line in the format: Case #x: y z Where x is the test case number (starting from 1), y is the total number of words in the text, and z is the most frequent word. CONSTRAINTS 1 ≤ N ≤ 100. 1 ≤ length of each text ≤ 1,000. SAMPLE INPUT 2 Hello world! Hello Universe. Madam, in Eden, I\'m Adam. SAMPLE OUTPUT Case #1: 4 hello Case #2: 5 adam","solution":"import re from collections import Counter def process_text(text): # Convert text to lower case and replace non-words with spaces cleaned_text = re.sub(r\'[^a-zA-Zs]\', \'\', text.lower()) # Split the cleaned text into words words = cleaned_text.split() word_count = len(words) # If words list is empty when empty text is passed (we should handle it as special case) if word_count == 0: return (0, \\"\\") # Count the frequency of each word frequency = Counter(words) # Find the most frequent word, in case of tie smallest lexicographically word is selected most_frequent_word = min(frequency, key=lambda word: (-frequency[word], word)) return (word_count, most_frequent_word) def count_words_find_most_frequent(N, texts): results = [] for i in range(N): word_count, most_frequent_word = process_text(texts[i]) results.append(f\\"Case #{i+1}: {word_count} {most_frequent_word}\\") return results"},{"question":"Given a list of integers and a target value, write a function that returns the number of unique quadruplets (i.e., four numbers) which sum is equal to the target value. Each input set will have at least one unique solution. Examples: Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: 3 Explanation: The unique quadruplets are: [-1, 0, 0, 1] [-2, -1, 1, 2] [-2, 0, 0, 2] Input: nums = [1, 1, 1, 1, 1, 1], target = 4 Output: 1 Explanation: The only unique quadruplet is: [1, 1, 1, 1] Input: nums = [2, 2, 2, 2, 2], target = 8 Output: 1 Explanation: The only unique quadruplet is: [2, 2, 2, 2] Constraints: 1 <= nums.length <= 200 -1000 <= nums[i] <= 1000 -10^9 <= target <= 10^9","solution":"def four_sum_count(nums, target): Returns the number of unique quadruplets that sum to the target value. nums.sort() quadruplets = set() n = len(nums) for i in range(n): for j in range(i + 1, n): left, right = j + 1, n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruplets.add((nums[i], nums[j], nums[left], nums[right])) left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return len(quadruplets)"},{"question":"Define a function `findPaintCommands(m, n, start, end, path)` that can determine the commands necessary to paint a mural based on a specified path. A rectangular grid of size `m x n` represents the mural, with the top-left corner being `(1,1)`. A painter will start at a given starting position `start` and must paint a specified path `path` to reach an endpoint `end`. # Input - `m`: An integer representing the number of rows in the grid (2 ≤ m ≤ 100). - `n`: An integer representing the number of columns in the grid (2 ≤ n ≤ 100). - `start`: A tuple `(sx, sy)` representing the starting position of the painter, where `1 ≤ sx ≤ m` and `1 ≤ sy ≤ n`. - `end`: A tuple `(ex, ey)` representing the ending position of the painter, where `1 ≤ ex ≤ m` and `1 ≤ ey ≤ n`. - `path`: A string consisting of the characters \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). The path describes the sequence of moves the painter will take from the start to reach the end. Each step in the path moves the painter one unit in the specified direction. # Output - The function should return a list of commands, where each command is represented by a string of format: \\"`PAINT (x, y)`\\" indicating the painter should paint the cell at coordinates `(x, y)`. # Constraints - The path provided is guaranteed to lead from the starting position to the ending position within the constraints of the grid. # Examples Example 1 Input: ```python m = 3 n = 3 start = (1, 1) end = (1, 3) path = \'RR\' ``` Output: ```python [\'PAINT (1, 1)\', \'PAINT (1, 2)\', \'PAINT (1, 3)\'] ``` Example 2 Input: ```python m = 4 n = 4 start = (2, 2) end = (4, 4) path = \'DDRR\' ``` Output: ```python [\'PAINT (2, 2)\', \'PAINT (3, 2)\', \'PAINT (4, 2)\', \'PAINT (4, 3)\', \'PAINT (4, 4)\'] ``` # Implementation ```python def findPaintCommands(m, n, start, end, path): commands = [] x, y = start commands.append(f\'PAINT ({x}, {y})\') for move in path: if move == \'U\': x -= 1 elif move == \'D\': x += 1 elif move == \'L\': y -= 1 elif move == \'R\': y += 1 commands.append(f\'PAINT ({x}, {y})\') return commands ```","solution":"def findPaintCommands(m, n, start, end, path): Determine the commands necessary to paint a mural based on the specified path. Parameters: m (int): Number of rows in the grid. n (int): Number of columns in the grid. start (tuple of int, int): starting position of the painter. end (tuple of int, int): ending position of the painter. path (str): sequence of moves the painter will take. Returns: list of str: Each command indicating a cell to paint. commands = [] x, y = start commands.append(f\'PAINT ({x}, {y})\') for move in path: if move == \'U\': x -= 1 elif move == \'D\': x += 1 elif move == \'L\': y -= 1 elif move == \'R\': y += 1 commands.append(f\'PAINT ({x}, {y})\') return commands"},{"question":"You are given a list of integers representing the heights of mountains. Your goal is to determine the maximum number of mountains you can see standing at the start of the list (leftmost position) without other mountains blocking your view. A mountain blocks the view of another mountain if it is taller and positioned between the starting position and the other mountain. Input - The first line consists of an integer N (1 ≤ N ≤ 10^5), representing the number of mountains. - The second line contains N integers h1, h2, ..., hN (1 ≤ hi ≤ 10^9), representing the heights of the mountains in order from left to right. Output Print one integer representing the maximum number of mountains you can see from the start of the list. Example Input 6 1 3 2 5 4 3 Output 3 Explanation From the start of the list (leftmost position), you can see mountains with heights [1, 3, 5]. The mountains with heights 2 and 4 are blocked by the taller mountains in between. Thus, the output is 3.","solution":"def max_mountains_visible(N, heights): Function to determine the maximum number of mountains you can see standing at the start of the list. Parameters: N (int): Number of mountains. heights (list of int): Heights of the mountains in order from left to right. Returns: int: The maximum number of mountains that can be seen. if N == 0: return 0 visible_count = 1 # The first mountain is always visible max_height = heights[0] for i in range(1, N): if heights[i] > max_height: visible_count += 1 max_height = heights[i] return visible_count"},{"question":"You are asked to implement a function named `rearrangeString` that takes a single string input and returns a string where the characters are sorted in such a way that there are no two adjacent characters that are the same. If such a rearrangement is not possible, return an empty string. In other words, the function will rearrange the input string so that there are no two characters appearing consecutively in the result string. Example: `input`: \\"aab\\" `output`: \\"aba\\" `input`: \\"aaab\\" `output`: \\"\\" You can assume the input will only contain lowercase English letters. The length of the input string is between 1 and 100. Note: You do not need to validate the input.","solution":"from heapq import heappop, heappush from collections import Counter def rearrangeString(s): Rearranges the input string such that no two adjacent characters are the same. Returns an empty string if no such arrangement is possible. # Count the frequency of each character freq = Counter(s) # Create a max heap based on the frequency of characters max_heap = [] for char, count in freq.items(): heappush(max_heap, (-count, char)) # Resultant string list result = [] # Previous character initialization prev_char = None prev_count = 0 while max_heap: count, char = heappop(max_heap) # Add previous character back to heap if its count was greater than zero if prev_char and prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Append current character to result result.append(char) # Update previous character and count prev_char = char prev_count = count + 1 # since we used one instance of char # Join the resultant list into a string rearranged = \'\'.join(result) # If we successfully use all characters, return the result if len(rearranged) == len(s): return rearranged else: return \\"\\""},{"question":"Given a binary tree, the task is to check if it is height-balanced. In a height-balanced binary tree, the depth of the two subtrees of every node never differs by more than 1. Example 1: Input: 1 / 2 3 / 4 5 Output: True Explanation: The given tree is balanced. The left subtree of node 1 has height 2, the right subtree has height 1. The left subtree of node 2 has height 1, the right subtree has height 0. Example 2: Input: 1 / 2 3 / 4 / 5 Output: False Explanation: The given tree is not balanced. The left subtree of node 1 has height 3, the right subtree has height 1. Your task: Since this is a functional problem you don\'t have to worry about input, you just have to complete the function isBalanced() that takes the root of the binary tree as a parameter and returns true or false. The printing is done by the driver code. Expected Time Complexity: O(N). Expected Auxiliary Space: O(Height of the Tree). Constraints: 1 <= Number of nodes <= 10^{5} 1 <= Data of a node <= 10^{5}","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isBalanced(root): Determines if a binary tree is height-balanced. def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_height = 1 + max(left_height, right_height) current_balanced = ( left_balanced and right_balanced and abs(left_height - right_height) <= 1 ) return current_height, current_balanced _, balanced = check_height(root) return balanced"},{"question":"Eva loves to play with numbers and create new sequences. One day, she came up with a sequence by starting with a positive integer and repeatedly applying a specific transformation until she gets the number 1. The transformation she uses is: if the number is even, she divides it by 2; if the number is odd, she multiplies it by 3 and adds 1. She calls this transformation the \\"Collatz transformation.\\" Eva is now curious about how many steps it takes for various starting numbers to reach 1 using the Collatz transformation. She wants to write a program that helps her find this out. Can you help Eva by writing a program to compute the number of steps required for a given starting number to reach 1? -----Input----- The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of different starting integers for which Eva wants to know the number of steps to reach 1. The next n lines each contain a single integer x (1 ≤ x ≤ 1 000 000) — a starting integer for the Collatz transformation. -----Output----- For each starting integer, print the number of steps it takes to reach the integer 1 using the Collatz transformation on a new line. -----Examples----- Input 3 6 19 27 Output 8 20 111 Input 5 2 3 7 15 1 Output 1 7 16 17 0","solution":"def collatz_steps(x): Returns the number of steps required for a given starting number x to reach 1 using the Collatz transformation. steps = 0 while x != 1: if x % 2 == 0: x //= 2 else: x = 3 * x + 1 steps += 1 return steps def collatz_steps_for_multiple_numbers(numbers): Returns a list with the number of steps for each number in the input list. Args: numbers: List of integers Returns: List of integers representing the number of steps to reach 1 for each integer using the Collatz transformation. result = [] for number in numbers: result.append(collatz_steps(number)) return result"},{"question":"Martha is participating in a treasure hunt event. She needs to find the shortest path to reach the treasure. The field is represented as an N by M grid. Each cell in the grid can either be passable (denoted by \'.\') or contain an obstacle (denoted by \'#\'). Martha starts from the cell marked with \'S\' and needs to reach the cell marked with \'T\'. Martha can move up, down, left, or right, but cannot move diagonally or through an obstacle. Help Martha find the length of the shortest path to the treasure, or determine that it’s impossible to reach the treasure. Write a function `find_shortest_path(n, m, grid)` that takes in integers N and M representing the dimensions of the grid, and a list of strings representing the grid itself. The function should return an integer representing the length of the shortest path if it exists, or -1 if there\'s no possible path. **Input:** - The first line contains two integers N and M (1 leq N, M leq 500), the dimensions of the grid. - The following N lines contains M characters each, representing the grid with \'.\' for passable cells, \'#\' for obstacles, \'S\' for Martha\'s starting cell, and \'T\' for the treasure. **Output:** - Output a single integer, the length of the shortest path from \'S\' to \'T\', or -1 if it’s impossible to reach the treasure. **Example:** Sample Input 1: ``` 4 4 S... .. ..#. ...T ``` Sample Output 1: ``` 6 ``` Sample Input 2: ``` 3 3 S .#T # ``` Sample Output 2: ``` -1 ```","solution":"from collections import deque def find_shortest_path(n, m, grid): def get_neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\': yield nx, ny start = end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': end = (i, j) if not start or not end: return -1 queue = deque([(start[0], start[1], 0)]) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"\'\'\' Given an integer array nums of length n, return the maximum possible sum of a non-empty subsequence such that all the elements of the subsequence are sorted in strictly increasing order. Example 1 Input: nums = [10, 5, 4, 3, 7, 2, 8] Output: 25 Explanation: The subsequence [5, 7, 8] is strictly increasing and its sum is 20, which is the maximum sum possible. Example 2 Input: nums = [1, 101, 2, 3, 100, 4, 5] Output: 106 Explanation: The subsequence [1, 2, 3, 100] is strictly increasing and its sum is 106, which is the maximum sum possible. Your Task: Complete the function maxSumIncreasingSubsequence() that takes the array nums and its length n as arguments and returns the maximum possible sum of the required subsequence. Expected Time Complexity: O(n^2). Expected Auxiliary Space: O(n). Constraints: 1 <= n <= 1000 -10^4 <= nums[i] <= 10^4 \'\'\'","solution":"def maxSumIncreasingSubsequence(nums): Returns the maximum possible sum of a non-empty subsequence such that all the elements of the subsequence are sorted in strictly increasing order. n = len(nums) if n == 0: return 0 # Create an array to store the maximum sum of an increasing subsequence that ends with nums[i] max_sum = nums[:] # Populate the max_sum array for i in range(1, n): for j in range(i): if nums[i] > nums[j] and max_sum[i] < max_sum[j] + nums[i]: max_sum[i] = max_sum[j] + nums[i] # Return the maximum value in max_sum array return max(max_sum)"},{"question":"Detect Palindromes in Sentences Given a sentence, determine if there are any palindrome words present in the sentence. A palindrome is a word that reads the same backward as forward. Input: The first line contains the number of test cases, T. T lines follow, each of which contains a sentence with multiple words. Output: For each test case, output \\"YES\\" if there is at least one palindrome word in the sentence, and \\"NO\\" if there are none. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of each sentence ≤ 100 SAMPLE INPUT 3 madam likes to racecar the quick brown fox never odd or even SAMPLE OUTPUT YES NO YES Explanation: In the first input, both \'madam\' and \'racecar\' are palindrome words. In the second input, there are no palindrome words. In the third input, \'never\' and \'even\' are not palindromes, but \'noon\' is a palindrome.","solution":"def is_palindrome(word): Returns True if the word is a palindrome, False otherwise. return word == word[::-1] def detect_palindromes(test_cases): Determines if there are any palindrome words in each sentence of the test cases. Params: test_cases: List of sentences Returns: List of results, where each element is \\"YES\\" if there are palindrome words, otherwise \\"NO\\". results = [] for sentence in test_cases: words = sentence.split() if any(is_palindrome(word) for word in words): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid with n rows and m columns, where each cell contains an uppercase letter from \'A\' to \'Z\'. Define a contiguous block of cells as connected if it forms a rectangle and all cells within it contain the same letter. In one operation, you can remove a connected block and shift all cells above the removed block downward, filling the empty space at the top with \'.\' indicating an empty cell. Determine the minimum number of operations required to turn the entire grid into empty cells (\'.\'). -----Input----- The first line contains one integer t (1 leq t leq 100) — the number of test cases. Then follow the descriptions of each test case. The first line of each test case contains two integers n and m (1 leq n, m leq 50) — the size of the grid. Each of the following n lines contains a string of m uppercase English letters — the description of the grid. It is guaranteed that the sum of n times m over all test cases does not exceed 2500. -----Output----- For each test case, output the minimum number of operations required to turn the entire grid into empty cells. -----Examples----- Input 2 3 4 AAAA BBBB CCCC 2 2 AB BA Output 3 2 -----Note----- In the first testcase, an optimal sequence of operations could be: 1. Remove the block \'AAAA\' in the first row, the grid looks like: .... BBBB CCCC 2. Remove the block \'BBBB\' in the second row, the grid looks like: .... .... CCCC 3. Remove the block \'CCCC\' in the last row, the grid becomes: .... .... .... In the second testcase, blocks \'AB\' in the first row and \'BA\' in the second can be removed in any order and result in 2 operations.","solution":"def min_operations_to_clear_grid(n_cases, cases): results = [] for case in cases: n, m, grid = case seen_letters = set() for row in grid: seen_letters.update(row) results.append(len(seen_letters)) return results"},{"question":"Write a function that adjusts the scores of students based on a curved grading system. The function takes a list of integers representing the current scores of the students and a single integer representing the maximum possible score. The function should mutate the input list so that the highest score in the list becomes equal to the maximum score provided, and all other scores are increased proportionally. If the maximum score is less than the highest score in the list, the scores should remain unchanged. See example: ```python scores = [72, 88, 95, 100] max_score = 120 curve_scores(scores, max_score) # mutates scores list scores => [86, 106, 114, 120] # scores are adjusted proportionally ``` Info: - **MUTATE the input list, don\'t return anything** - Input list is guaranteed to contain at least one score and all scores will be positive integers. - The maximum possible score will be a positive integer greater than zero.","solution":"def curve_scores(scores, max_score): Adjusts the scores of students based on a curved grading system. Parameters: scores (list of int): List of current scores of students. max_score (int): The maximum possible score in the curved grading system. Returns: None, but mutates the input list \'scores\'. if not scores: return current_max_score = max(scores) # If the maximum provided score is less than or equal to the highest score in the list, # do not change the scores. if max_score <= current_max_score: return # Calculate the proportion factor to adjust the scores factor = max_score / current_max_score # Mutate the input list with the adjusted scores for i in range(len(scores)): scores[i] = round(scores[i] * factor)"},{"question":"Geek is learning dynamic programming and he wants to solve a variation of the coin change problem. This time, he wants to find out the number of ways to make a certain amount \'n\' using an unlimited supply of coins with given denominations. Given a list of integers \'coins\' representing the denominations of the coins, and an integer \'n\' representing the target amount, return the number of ways to make up that amount. If that amount cannot be made up by any combination of the coins, return 0. Example 1: Input: coins = [1, 2, 3] n = 4 Output: 4 Explanation: There are four ways to make up the amount 4: 4 = 1+1+1+1 4 = 1+1+2 4 = 2+2 4 = 1+3 Example 2: Input: coins = [2, 5, 3, 6] n = 10 Output: 5 Explanation: There are five ways to make up the amount 10: 10 = 2+2+2+2+2 10 = 5+5 10 = 2+3+5 10 = 2+2+3+3 10 = 6+2+2 Constraints: 1 <= n <= 10^3 1 <= coins.length <= 30 1 <= coins[i] <= 50 Your Task: You don\'t need to read input or print anything. Your task is to complete the function countWays() which takes coins (denominations) and n (target amount) as input parameters and returns the number of ways to make up that amount. Expected Time Complexity: O(n*len(coins)) Expected Auxiliary Space: O(n)","solution":"def countWays(coins, n): Returns the number of ways to make up amount n using given coin denominations. Parameters: coins (list of int): List of coin denominations. n (int): Target amount. Returns: int: Number of ways to make up the target amount. dp = [0] * (n + 1) dp[0] = 1 for coin in coins: for amount in range(coin, n + 1): dp[amount] += dp[amount - coin] return dp[n]"},{"question":"You are given a list of N integers and Q queries. Each query consists of two integers, L and R. The task is to find the sum of the integers from the L-th position to the R-th position, inclusive. The answer can be very large, so output it modulo 10^9 + 7. -----Constraints----- - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq L leq R leq N - Each integer in the list is between -10^9 and 10^9 -----Input----- Input is given from Standard Input in the following format: N Q A_1 A_2 ... A_N L_1 R_1 L_2 R_2 . . . L_Q R_Q -----Output----- For each query, print the sum (modulo 10^9 + 7) of the integers from the L-th position to the R-th position, inclusive. -----Sample Input----- 5 3 1 2 3 4 5 1 3 2 4 1 5 -----Sample Output----- 6 9 15 Explanation: - For the first query (1, 3), the sum of elements from position 1 to 3 is (1 + 2 + 3 = 6). - For the second query (2, 4), the sum of elements from position 2 to 4 is (2 + 3 + 4 = 9). - For the third query (1, 5), the sum of elements from position 1 to 5 is (1 + 2 + 3 + 4 + 5 = 15).","solution":"def range_sum_modulo(N, Q, A, queries): MOD = 10**9 + 7 # Precompute prefix sums prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = (prefix_sums[i-1] + A[i-1]) % MOD results = [] for L, R in queries: sum_range = (prefix_sums[R] - prefix_sums[L-1]) % MOD results.append(sum_range) return results"},{"question":"Two arrays A and B are called permutations of each other if they contain the same elements, only the order of elements can be different. For example, arrays [1, 2, 3] and [3, 1, 2] are permutations of each other while [1, 2, 2] and [1, 2, 3] are not. You are given two arrays of integers A and B. Write a program to check if they are permutations of each other. Input: The first line contains an integer t representing the number of test cases. The first line of each test case contains an integer n representing the number of elements in the arrays. The second line of each test case contains n space-separated integers representing the elements of array A. The third line of each test case contains n space-separated integers representing the elements of array B. 1 ≤ t ≤ 100 1 ≤ n ≤ 1000 0 ≤ A[i], B[i] ≤ 1000 Output: For each test case, print \\"YES\\" if arrays A and B are permutations of each other, otherwise print \\"NO\\". SAMPLE INPUT 2 3 1 2 3 3 1 2 4 1 2 2 3 1 2 3 4 SAMPLE OUTPUT YES NO","solution":"def are_permutations(A, B): Check if two arrays A and B are permutations of each other. return sorted(A) == sorted(B) def check_test_cases(t, test_cases): results = [] for i in range(t): n, A, B = test_cases[i] if are_permutations(A, B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Tom is planning to organize a marathon, and he needs to mark the water station points along the marathon route. The marathon route is represented as a straight line divided into M (1 ≤ M ≤ 100) segments, with each segment described by its length in kilometers. To ensure the runners are well-hydrated, Tom wants to place a water station at the end of every N kilometers along the route, starting from the start of the marathon. If a water station falls exactly on the end of a segment, it should still be considered valid. Write a function `water_stations` that takes two arguments: 1. A list of integers, `segments`, where each integer represents the length of a segment in kilometers. 2. An integer `N`, representing the interval (in kilometers) at which to place water stations. The function should return the number of water stations placed along the marathon route. Input: ``` segments: List[int], N: int ``` Output: ``` int ``` Example: Input: ``` segments = [3, 5, 2], N = 2 ``` Output: ``` 5 ``` Explanation: The marathon route is 3 + 5 + 2 = 10 kilometers long. Water stations are placed at 2, 4, 6, 8, and 10 kilometers. Thus, the function will return 5, as there are 5 water stations along the marathon route.","solution":"def water_stations(segments, N): total_distance = sum(segments) if total_distance == 0: return 0 return (total_distance // N) + (1 if total_distance % N != 0 else 0)"},{"question":"Given two strings s1 and s2, you need to determine if s2 is a scrambled string of s1. To scramble the string, we may choose any non-leaf node and swap its two children. For each node, a leaf node is a single character, and a non-leaf node is a string represented by a pair of non-leaf or leaf nodes. Two strings of length n are scrambled if all characters are present after performing some sequence of swaps. Return True if s2 is a scrambled string of s1; otherwise, return False. Here are a couple of examples: Example 1: Input: s1 = \\"great\\", s2 = \\"rgeat\\" Output: true Explanation: We can scramble \\"great\\" into \\"rgeat\\" as follows: \\"great\\" -> \\"gr/eat\\" (swap the first two characters) -> \\"rgeat\\" Example 2: Input: s1 = \\"abcde\\", s2 = \\"caebd\\" Output: false Explanation: It is impossible to scramble \\"abcde\\" to \\"caebd\\". Example 3: Input: s1 = \\"a\\", s2 = \\"a\\" Output: true Constraints: - Both s1 and s2 consist only of lowercase English letters. - 1 <= s1.length <= 30 - s1.length == s2.length","solution":"def is_scramble(s1, s2): Returns whether s2 is a scrambled string of s1 or not. if len(s1) != len(s2): return False if s1 == s2: return True if sorted(s1) != sorted(s2): return False n = len(s1) for i in range(1, n): if (is_scramble(s1[:i], s2[:i]) and is_scramble(s1[i:], s2[i:])) or (is_scramble(s1[:i], s2[-i:]) and is_scramble(s1[i:], s2[:-i])): return True return False"},{"question":"In this problem, you need to implement a simplified version of a recommendation system for a video streaming platform. The platform tracks a list of videos that a user has watched recently. For simplicity, assume that each video is represented by a unique integer identifier. When suggesting a new video to a user, the recommendation system aims to suggest videos that the user has not watched yet but are currently popular among other users. The system maintains a list of popular videos, ordered by their popularity score. Your task is to implement a function `recommend_videos()`. The function should take three lists as input: 1. `watched_videos` - a list of integers representing the video identifiers that the user has watched recently. 2. `popular_videos` - a list of tuples, where each tuple contains a video identifier and its corresponding popularity score. The list is ordered by popularity score in descending order. 3. `k` - an integer representing the number of video recommendations to return to the user. The function should return a list of at most `k` video identifiers that the user has not watched yet. The recommended videos should also maintain the order of their popularity scores as given in the `popular_videos` list. -----Input----- The function will be called with the following inputs: - `watched_videos`: a list of integers, 5 ≤ len(watched_videos) ≤ 10^5. - `popular_videos`: a list of tuples, where each tuple contains an integer identifier and an integer score. 10 ≤ len(popular_videos) ≤ 10^5. - `k`: an integer, 1 ≤ k ≤ 50. -----Output----- Return a list of at most `k` video identifiers that the user has not watched yet, maintaining the order of their popularity scores. -----Examples----- Input watched_videos = [1, 2, 3, 4, 5] popular_videos = [(6, 100), (2, 98), (7, 97), (4, 95), (8, 93), (9, 92)] k = 3 Output [6, 7, 8] Input watched_videos = [5, 6, 7, 8, 9, 10] popular_videos = [(1, 105), (2, 101), (3, 99), (4, 98)] k = 2 Output [1, 2] Input watched_videos = [10, 20, 30, 40, 50] popular_videos = [(60, 90), (70, 85), (80, 80), (20, 75), (30, 70), (90, 65)] k = 4 Output [60, 70, 80, 90] -----Function Signature----- def recommend_videos(watched_videos: List[int], popular_videos: List[Tuple[int, int]], k: int) -> List[int]:","solution":"from typing import List, Tuple def recommend_videos(watched_videos: List[int], popular_videos: List[Tuple[int, int]], k: int) -> List[int]: Recommend at most \'k\' popular videos that the user has not watched yet. :param watched_videos: List of integers representing video identifiers that the user has watched recently. :param popular_videos: List of tuples where each tuple contains a video identifier and its popularity score. The list is ordered by popularity score in descending order. :param k: Number of video recommendations to return to the user. :return: List of video identifiers (max \'k\') maintaining the order of their popularity scores. watched_set = set(watched_videos) recommendations = [] for video_id, score in popular_videos: if video_id not in watched_set: recommendations.append(video_id) if len(recommendations) == k: break return recommendations"},{"question":"The aim is to identify whether a given Sudoku board is valid or not. A Sudoku board (9x9) is valid if every row, every column, and every 3x3 sub-grid contains the digits 1 through 9 exactly once. The given Sudoku board could be partially filled, where empty cells are represented by the character \'.\'. Example 1: Input: board[][] = [ [\'5\',\'3\',\'.\',\'.\',\'7\',\'.\',\'.\',\'.\',\'.\'], [\'6\',\'.\',\'.\',\'1\',\'9\',\'5\',\'.\',\'.\',\'.\'], [\'.\',\'9\',\'8\',\'.\',\'.\',\'.\',\'.\',\'6\',\'.\'], [\'8\',\'.\',\'.\',\'.\',\'6\',\'.\',\'.\',\'.\',\'3\'], [\'4\',\'.\',\'.\',\'8\',\'.\',\'3\',\'.\',\'.\',\'1\'], [\'7\',\'.\',\'.\',\'.\',\'2\',\'.\',\'.\',\'.\',\'6\'], [\'.\',\'6\',\'.\',\'.\',\'.\',\'.\',\'2\',\'8\',\'.\'], [\'.\',\'.\',\'.\',\'4\',\'1\',\'9\',\'.\',\'.\',\'5\'], [\'.\',\'.\',\'.\',\'.\',\'8\',\'.\',\'.\',\'7\',\'9\'] ]; Output: True Explanation: Each row, column, and 3x3 sub-grid is valid. Example 2: Input: board[][] = [ [\'8\',\'3\',\'.\',\'.\',\'7\',\'.\',\'.\',\'.\',\'.\'], [\'6\',\'.\',\'.\',\'1\',\'9\',\'5\',\'.\',\'.\',\'.\'], [\'.\',\'9\',\'8\',\'.\',\'.\',\'.\',\'.\',\'6\',\'.\'], [\'8\',\'.\',\'.\',\'.\',\'6\',\'.\',\'.\',\'.\',\'3\'], [\'4\',\'.\',\'.\',\'8\',\'.\',\'3\',\'.\',\'.\',\'1\'], [\'7\',\'.\',\'.\',\'.\',\'2\',\'.\',\'.\',\'.\',\'6\'], [\'.\',\'6\',\'.\',\'.\',\'.\',\'.\',\'2\',\'8\',\'.\'], [\'.\',\'.\',\'.\',\'4\',\'1\',\'9\',\'.\',\'.\',\'5\'], [\'.\',\'.\',\'.\',\'.\',\'8\',\'.\',\'.\',\'7\',\'9\'] ]; Output: False Explanation: The digit \'8\' is repeated in the first and fourth rows making the board invalid. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isValidSudoku() which takes a 2D character array of size 9x9 representing the Sudoku board as input parameter and returns a boolean value denoting if it is a valid Sudoku board or not. Expected Time Complexity: O(1), as the board size is fixed. Expected Auxiliary Space: O(1) Constraints: - The board[i][j] in board can either be a digit \'1\'-\'9\' or a \'.\' to represent an empty cell.","solution":"def isValidSudoku(board): Determines if a given Sudoku board is valid. :param board: List[List[str]], a 2D character array of size 9x9 representing the Sudoku board :return: bool, True if the Sudoku board is valid, otherwise False def is_valid_block(block): block = [num for num in block if num != \'.\'] return len(block) == len(set(block)) # check rows for row in board: if not is_valid_block(row): return False # check columns for col in range(9): if not is_valid_block([board[row][col] for row in range(9)]): return False # check 3x3 sub-grids for block_row in range(3): for block_col in range(3): block = [] for row in range(3): for col in range(3): block.append(board[block_row * 3 + row][block_col * 3 + col]) if not is_valid_block(block): return False return True"},{"question":"In a city, there is a florist who wants to display his flowers in a sequence. He has two types of flowers: roses and daisies. A sequence of flowers can be represented as an array of integers where 0 represents a rose and 1 represents a daisy. The florist wants to make sure the sequence of flowers looks beautiful. He believes that the sequence is beautiful if it does not contain three consecutive roses or three consecutive daisies. Your task is to determine the minimum number of flowers that need to be replaced in the array to make it beautiful. -----Input----- The first line contains an integer n (1 le n le 100) — the number of flowers in the sequence. The second line contains n integers a_1, a_2, dots, a_n (a_i in {0, 1}) — the sequence of flowers. -----Output----- Print only one integer — the minimum number of flowers that need to be replaced to make the sequence beautiful. -----Examples----- Input 6 0 0 0 1 1 1 Output 2 Input 5 0 1 0 1 0 Output 0 Input 4 1 1 1 0 Output 1 -----Note----- In the first example, you can replace the second or third 0 with a 1 and the fifth or sixth 1 with a 0 to avoid three consecutive same flowers. In the second example, no replacements are needed as there are no three consecutive same flowers. In the third example, you can replace the first or second 1 with a 0 to make the sequence beautiful.","solution":"def min_replacements_to_beautiful(n, flowers): Returns the minimum number of replacements needed to make the sequence beautiful. replacements = 0 for i in range(2, n): if flowers[i] == flowers[i - 1] == flowers[i - 2]: replacements += 1 flowers[i] = 1 - flowers[i] # Flip current flower return replacements"},{"question":"A sequence of numbers is called a Duplicated Sequence if every element appears exactly twice. For example, [1, 2, 1, 2] and [3, 3, 2, 2] are both Duplicated Sequences, but [1, 1, 2] and [1, 2, 2, 3, 3] are not. Write a program to determine if a given sequence of integers is a Duplicated Sequence. Input The input consists of a single dataset. The dataset consists of n integers separated by spaces (1 ≤ n ≤ 100, 1 ≤ each integer ≤ 1000). Output Your program should output \\"YES\\" if the given sequence is a Duplicated Sequence, and \\"NO\\" otherwise. Example Input 1 2 1 2 Output YES Input 1 2 2 3 Output NO","solution":"def is_duplicated_sequence(seq): Determine if the given sequence of integers is a Duplicated Sequence. Parameters: seq (list of int): List of integers to check. Returns: str: \'YES\' if the sequence is a Duplicated Sequence, otherwise \'NO\'. from collections import Counter counts = Counter(seq) for count in counts.values(): if count != 2: return \\"NO\\" return \\"YES\\""},{"question":"Given a grid of size NxN consisting of empty cells (\'.\') and cells containing obstacles (\'#\'), you are required to find out the number of unique paths from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) using the following movement rules: - From any cell, you can move to the right or down. - You cannot move onto cells containing obstacles and cannot move out of bounds of the grid. If there is no possible path, the output should be 0. # Input The first line contains an integer T (1 ≤ T ≤ 50), the number of test cases. For each test case: - The first line contains an integer N (1 ≤ N ≤ 50), the size of the grid. - The following N lines each contain a string of length N. The j-th character of the i-th string specifies the content of the cell at position (i, j), which is either \'.\' (an empty cell) or \'#\' (an obstacle). # Output For each test case, print a single integer — the number of unique paths from the top-left corner to the bottom-right corner. # Example Input ``` 2 3 ... ... ... 3 .#. .#. ... ``` Output ``` 6 1 ``` # Explanation - In the first test case, there are 6 unique paths from (0, 0) to (N-1, N-1) avoiding obstacles. - In the second test case, there is only 1 unique path due to the obstacles present. # Constraints - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 50 You are encouraged to utilize dynamic programming to solve this problem efficiently given the constraints.","solution":"def unique_paths_with_obstacles(grid): N = len(grid) if grid[0][0] == \'#\' or grid[N-1][N-1] == \'#\': return 0 dp = [[0] * N for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(N): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][N-1] def process_test_cases(T, test_cases): results = [] for i in range(T): N, grid = test_cases[i] results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"Gaurav is a product manager at an electronics factory which manufactures gadgets like phones, laptops, and tablets. Each gadget has a specific cost associated with it, and Gaurav needs to run a promotion where customers can buy a bundle of gadgets with a specific maximum budget. The challenge is to maximize the number of different types of gadgets in the bundle without exceeding the given budget. Your task is to help Gaurav determine the maximum number of different types of gadgets that can be included in the bundle without exceeding the budget. If it is not possible to include any gadget within the budget, print \\"Not Possible\\". -----Input:----- First line contains an integer T denoting the number of test cases. Each test case starts with two integers N and B. N denotes the number of different types of gadgets available and B denotes the maximum budget. The next line contains N space-separated integers denoting the cost of each type of gadget. -----Output:----- For each test case, print the maximum number of different types of gadgets that can be included in the bundle in a single line. -----Constraints:----- 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ B ≤ 100000 1 ≤ cost of each gadget ≤ 10000 -----Example:----- Input: 2 4 50 10 20 30 40 3 15 5 10 20 Output: 2 2 -----Explanation:----- In the first test case, with a budget of 50, the maximum number of different types of gadgets Gaurav can include are 10 and 20, utilizing 2 types. In the second test case, with a budget of 15, the maximum number of different types of gadgets Gaurav can include are 5 and 10, utilizing 2 types of gadgets.","solution":"def max_gadgets_in_budget(T, test_cases): Returns the maximum number of different types of gadgets that can be included in the bundle within the budget for each test case. results = [] for i in range(T): N, B = test_cases[i][0] costs = sorted(test_cases[i][1]) count = 0 total_cost = 0 for cost in costs: if total_cost + cost <= B: total_cost += cost count += 1 else: break if count == 0: results.append(\\"Not Possible\\") else: results.append(count) return results"},{"question":"You are given an array of integers `nums` and an integer `k`. You need to determine if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`. If there is a pair of such indices, return `true`, otherwise, return `false`. Example 1: Input: nums = [1,2,3,1], k = 3 Output: true Explanation: There is a pair of duplicate numbers at indices 0 and 3, and the absolute difference between these indices is 3, which is equal to k. Example 2: Input: nums = [1,0,1,1], k = 1 Output: true Explanation: There are duplicate numbers at indices 2 and 3, and the absolute difference between these indices is 1, which is less than or equal to k. Example 3: Input: nums = [1,2,3,1,2,3], k = 2 Output: false Explanation: There are no such pairs of indices where the duplicates are within k indices of each other. Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9 0 <= k <= 10^5","solution":"def contains_nearby_duplicate(nums, k): Checks if there are two distinct indices i and j in the array such that nums[i] == nums[j] and the absolute difference between i and j is at most k. :param nums: List[int] - The list of integers. :param k: int - The maximum allowed index difference. :return: bool - True if such pairs exist, otherwise False. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"You are given an array of integers A of length N. You need to perform the following operation zero or more times: - Choose two integers x and y such that 1 le x < y le N. - Swap the elements A[x] and A[y]. Your task is to determine if it is possible to sort the array A in non-decreasing order by performing the above operation any number of times. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers denoting the array A. -----Output----- For each test case, print \\"YES\\" if it is possible to sort the array A using the given operation, otherwise print \\"NO\\". -----Constraints----- - 1 le T le 2,000 - 1 le N le 1,000 - -10^9 le A[i] le 10^9 -----Example Input----- 2 3 3 2 1 4 4 3 2 1 -----Example Output----- YES YES -----Explanation----- Example case 1: We can swap A[1] and A[3] to get the array 1, 2, 3. Example case 2: We can swap A[1] and A[4], then A[2] and A[3] to get the array 1, 2, 3, 4.","solution":"def can_sort_array(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] sorted_A = sorted(A) if A == sorted_A: results.append(\\"YES\\") else: results.append(\\"YES\\") return results"},{"question":"Write a function that checks if a given string is a valid palindrome after removing exactly one character. A palindrome is a string that reads the same forwards and backwards. -----Constraints----- - The input string consists of lowercase letters only. - The length of the input string will not exceed 10,000 characters. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print \\"YES\\" if the input string can be a palindrome after removing exactly one character, otherwise print \\"NO\\". -----Sample Input----- abca -----Sample Output----- YES When the character \\"b\\" is removed, \\"aca\\" is a palindrome.","solution":"def valid_palindrome_after_removal(s): Returns \'YES\' if the string can be a palindrome after removing exactly one character; otherwise, \'NO\'. def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check both possibilities: removing the character at \'left\' or the character at \'right\' if is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\" # Example usage: # print(valid_palindrome_after_removal(\\"abca\\"))"},{"question":"Raul is organizing a small treasure hunt game for his group of friends in the park. He has hidden some clues in different locations. Each clue is represented by a unique lowercase letter. Raul has also prepared a master sequence of letters that represents the order in which the clues should be found. For the game to be enjoyable, the friends should follow the exact order without any deviation. Raul now wants to verify if his friends are following the sequence correctly. Given a string S that represents the sequence in which the friends have found the clues, determine if it follows the master sequence exactly. -----Input----- Input contains two strings: 1. A string M (1 ≤ |M| ≤ 100) denoting the master sequence of letters. 2. A string S (1 ≤ |S| ≤ 100) denoting the sequence in which the friends have found the clues. Both strings consist of only lowercase letters. -----Output----- Output \\"correct\\" if the friends have followed the master sequence exactly, otherwise output \\"incorrect\\". -----Constraints----- 1 ≤ |M| ≤ 100 1 ≤ |S| ≤ 100 -----Examples----- Input 1: abc abc Output 1: correct Input 2: abcdef abdcef Output 2: incorrect Input 3: hgfedcba h g f e d c b a Output 3: incorrect","solution":"def verify_sequence(master_sequence, found_sequence): Returns \\"correct\\" if the found sequence follows the master sequence exactly, otherwise returns \\"incorrect\\". if master_sequence == found_sequence: return \\"correct\\" else: return \\"incorrect\\""},{"question":"Given a list of integers, find the longest contiguous subsequence of elements that are either strictly increasing or strictly decreasing, and return its length. Note that the elements in the subsequence must follow one of the two orders throughout, either all are increasing or all are decreasing. For example: - Input: `[1, 3, 5, 4, 7]` Output: `3` Explanation: The longest contiguous subsequence is either `[1, 3, 5]` (increasing) or `[5, 4, 7]` (with a single element decrease and increase). - Input: `[2, 2, 2, 2, 2]` Output: `1` Explanation: All elements are the same, so the longest sequence is just any single element. Implement the following function: ```python def longest_contiguous_sequence(nums: List[int]) -> int: # Your code here ```","solution":"from typing import List def longest_contiguous_sequence(nums: List[int]) -> int: if not nums: return 0 longest = 1 current_length = 1 increasing = None for i in range(1, len(nums)): if nums[i] > nums[i - 1]: if increasing is None or increasing: current_length += 1 else: current_length = 2 increasing = True elif nums[i] < nums[i - 1]: if increasing is None or not increasing: current_length += 1 else: current_length = 2 increasing = False else: current_length = 1 increasing = None longest = max(longest, current_length) return longest"},{"question":"Your task is to implement a function that counts the number of unique characters in a string. Given a string s consisting of upper-case and lower-case letters, spaces, commas, periods, exclamation points, and/or question marks, return the count of unique alphabetic characters (ignoring case). Spaces, punctuation, and alphabetic case are ignored. -----Input----- The single line of input contains a string s (1 le |s| le 32000) of upper-case or lower-case letters, spaces, commas, periods, exclamation points, and/or question marks. The line will contain at least one letter. -----Output----- Output a single integer, which is the count of unique alphabetic characters in s when case is ignored. -----Examples----- Sample Input 1: Hello, World! Sample Output 1: 7 Sample Input 2: A Sample Output 2: 1","solution":"def count_unique_chars(s): Returns the count of unique alphabetic characters in the string `s`, ignoring case, spaces, and punctuation. # Initialize an empty set to store unique characters unique_chars = set() # Iterate through each character in the string for char in s: # Check if the character is an alphabet letter if char.isalpha(): # Convert to lowercase and add to the set unique_chars.add(char.lower()) # Return the size of the set return len(unique_chars)"},{"question":"Write a function that takes an array of positive integers and returns a new array containing all the prime numbers from the input array. If there are no prime numbers in the input array, return an empty array. Example: ```python findPrimes([10, 15, 3, 7, 2]) // should return [3, 7, 2] findPrimes([18, 20, 25, 30]) // should return [] ``` Note: - A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def findPrimes(arr): Returns a list of prime numbers from the input list of positive integers. Parameters: arr (list of int): The input list of positive integers. Returns: list of int: A new list containing all the prime numbers from the input list. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True return [num for num in arr if is_prime(num)]"},{"question":"You are given a sequence of n positive integers. You can perform the following operation any number of times: choose any two elements of the sequence, say a_i and a_j (where i neq j), and replace them with their greatest common divisor (GCD) and least common multiple (LCM). Determine the smallest possible value of the maximum element in the sequence after performing any number of operations. -----Input----- The first line contains a single integer n (1 leq n leq 50). The second line contains n positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). -----Output----- Print the smallest possible value of the maximum element in the sequence after performing any number of operations. -----Examples----- Input 3 4 6 8 Output 6 Input 5 10 15 20 25 30 Output 30 -----Note----- In the first sample, one optimal strategy is to choose 4 and 6, yielding GCD(4, 6) = 2 and LCM(4, 6) = 12. Then we can choose 2 and 8, yielding GCD(2, 8) = 2 and LCM(2, 8) = 8. Finally, choose 2 and 12, yielding GCD(2, 12) = 2 and LCM(2, 12) = 12. Hence, the sequence becomes {2, 8, 12} or {8, 12}, and the maximum element is 8. A better strategy is to combine pairs differently to ensure the maximum element is minimized, resulting in the minimum possible maximum element being 6. In the second sample, regardless of the order of operations, the minimum possible maximum element is 30.","solution":"from math import gcd from functools import reduce def smallest_max_after_operations(n, a): Determines the smallest possible value of the maximum element in the sequence after performing any number of operations. :param n: int - Number of elements in the sequence :param a: List[int] - The sequence of positive integers :return: int - The smallest possible value of the maximum element def lcm(x, y): return x * y // gcd(x, y) # Reducing the entire array to a single LCM overall_lcm = reduce(lcm, a) return overall_lcm"},{"question":"Write a function that takes an array of integers and determines whether it can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Example 1: Input: [1, 2, 3, 2, 1] Output: True Explanation: The array can be rearranged into [1, 2, 3, 2, 1], which is a palindrome. Example 2: Input: [1, 2, 3, 4, 5] Output: False Explanation: It is impossible to rearrange [1, 2, 3, 4, 5] into a palindrome. Example 3: Input: [1, 1, 1, 2, 2, 2, 2] Output: True Explanation: The array can be rearranged into [1, 2, 2, 2, 2, 1, 1], which is a palindrome. Your Task: Complete the function canFormPalindrome(arr) that takes an array of integers as its parameter and returns a boolean value indicating whether the array can be rearranged into a palindrome or not. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ len(arr) ≤ 10^5 1 ≤ arr[i] ≤ 10^5","solution":"def canFormPalindrome(arr): Determines whether the array of integers can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each element in the array frequency = Counter(arr) # Count how many elements have an odd frequency odd_count = sum(1 for count in frequency.values() if count % 2 != 0) # A palindrome can have at most one element with an odd frequency return odd_count <= 1"},{"question":"Given a list of integers `nums`, return the length of the longest arithmetic subsequence of `nums`. A subsequence is considered arithmetic if the difference between consecutive elements is constant. An arithmetic subsequence of length 1 or 2 is trivially arithmetic. Example 1: Input: [3, 6, 9, 12] Output: 4 Explanation: The entire sequence is arithmetic with a common difference of 3. Example 2: Input: [9, 4, 7, 2, 10] Output: 3 Explanation: The longest arithmetic subsequence is [4, 7, 10]. Example 3: Input: [20, 1, 15, 3, 10, 5, 8] Output: 4 Explanation: The longest arithmetic subsequence is [20, 15, 10, 5]. Note: - 2 <= nums.length <= 1000 - 0 <= nums[i] <= 500","solution":"def longest_arith_seq_length(nums): if len(nums) <= 1: return len(nums) max_length = 1 dp = [{} for _ in range(len(nums))] for i in range(len(nums)): for j in range(i): diff = nums[i] - nums[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Problem Statement: Prime Sum Ranges Given a list of N integers and Q queries, each query specifies a range [L, R] (1-indexed). For each query, output the sum of all prime numbers within that range of the list. # Input Format - The first line contains an integer N, the size of the list. - The second line contains N space-separated integers, the elements of the list. - The third line contains an integer Q, the number of queries. - The next Q lines each contain two integers L and R, representing the range for the respective query. # Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ List[i] ≤ 10^6 - 1 ≤ Q ≤ 10^4 - 1 ≤ L ≤ R ≤ N # Output Format For each query, output a single integer: the sum of all prime numbers in the given range [L, R]. # Sample Input ``` 6 1 2 3 4 5 6 3 1 3 2 5 4 6 ``` # Sample Output ``` 5 10 5 ``` # Explanation **Query 1**: Primes in range [1, 3] are 2 and 3. Their sum is 5. **Query 2**: Primes in range [2, 5] are 2, 3, and 5. Their sum is 10. **Query 3**: The only prime in range [4, 6] is 5. Its sum is 5.","solution":"def is_prime(n): Helper function to check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_sum_ranges(N, arr, queries): Given a list of N integers and a list of queries, each query specifies a range [L, R] (1-indexed). The function returns the sum of all prime numbers within that range for each query. # Pre-calculate prime indicators for elements in the array prime_flags = [is_prime(x) for x in arr] # Pre-calculate prefix sums for prime numbers prime_prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prime_prefix_sums[i] = prime_prefix_sums[i - 1] + (arr[i - 1] if prime_flags[i - 1] else 0) # Process each query and compute the required sum results = [] for L, R in queries: prime_sum = prime_prefix_sums[R] - prime_prefix_sums[L - 1] results.append(prime_sum) return results"},{"question":"Given a list of integers representing the heights of buildings in a row, plan a strategy for how the sunlight reaches each building in the morning (assume sunlight comes from the left side). Each building either blocks sunlight for the buildings to its right or allows it to pass through based on its height. Determine how many buildings receive direct sunlight. A building receives direct sunlight if there is no taller building to its left that blocks the sunlight from reaching it. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 10^6) — the heights of the buildings. -----Output----- Print a single integer — the number of buildings that receive direct sunlight. -----Examples----- Input 5 3 1 4 5 2 Output 3 Input 4 7 4 2 1 Output 1 Input 6 1 2 3 4 5 6 Output 6 -----Note----- In the first sample case, the first building (height 3) receives sunlight. The second building (height 1) is blocked by the first one. The third (height 4) and fourth (height 5) buildings are taller than any buildings to their left, so they receive sunlight. The last building (height 2) is blocked by the fourth building. Thus, three buildings receive sunlight in this case. In the second sample case, only the first building receives sunlight because it is the tallest and all other buildings are shorter than it. In the final sample case, all buildings receive sunlight because each subsequent building is taller than the previous one, so no building blocks the sunlight for the next one.","solution":"def count_sunlit_buildings(heights): Returns the number of buildings that receive direct sunlight. Parameters: heights (list of int): A list of integers representing the heights of the buildings. Returns: int: The number of buildings that receive direct sunlight. if not heights: return 0 max_height = heights[0] count = 1 for height in heights[1:]: if height > max_height: count += 1 max_height = height return count"},{"question":"\\"Detective\'s Riddle\\" Detective Lance is facing an interesting riddle. A wise sage has presented a puzzle involving strings, and Lance needs to identify if a given string can be rearranged to form a palindrome. A string is a palindrome if it reads the same forwards and backwards. The sage has provided Lance with several strings, and for each string, Lance must determine if it can be transformed into a palindrome or not. Your task is to help Detective Lance by writing a program that checks if the given string can be rearranged to form a palindrome. -----Input----- The first line contains T, the number of test cases. Each of the next T lines contains a single string S consisting of lowercase letters only. -----Output----- For each test case, output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". -----Constraints----- 1 <= T <= 20 1 <= |S| <= 1000 -----Subtasks----- Subtask #1: (20 points) 1 <= T <= 5 1 <= |S| <= 100 Subtask #2: (80 points) 1 <= T <= 20 1 <= |S| <= 1000 -----Example----- Input: 3 aabb abc aab Output: YES NO YES","solution":"def can_form_palindrome(s): Checks if the given string can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the string count = Counter(s) # Check the number of characters that have an odd count odd_count = sum(1 for v in count.values() if v % 2 != 0) # A string can form a palindrome if it has at most one odd character count return odd_count <= 1 def solve_riddle(cases): Determines if each string in the given list of cases can be rearranged to form a palindrome. results = [] for s in cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Tim the Traveler is standing at the starting point of a one-dimensional road that extends infinitely to the right. Tim has a map that tells him the distances of n landmarks from the starting point. Tim wants to visit all the landmarks and return to the starting point in such a way that minimizes the total distance traveled. You are to help Tim find the minimum possible distance he has to travel to achieve this. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) representing the number of landmarks. The second line contains n integers d_1, d_2, ..., d_{n} (1 ≤ d_{i} ≤ 10^6) — the distances of the landmarks from the starting point. -----Output----- Print a single integer — the minimum possible distance that Tim has to travel to visit all the landmarks and return to the starting point. -----Examples----- Input 3 2 5 1 Output 14 Input 4 8 2 4 7 Output 32 -----Note----- Consider the following situation in the first example. Tim visits the landmarks in the order of their distances: 1, 2, 5. The total distance traveled is 1 (to the first landmark) + (2-1) (to the second) + (5-2) (to the third) + 5 (back to the starting point) + 2 (to the second landmark) + (1-2) (back to the starting point) = 14. In the second example, the order of visiting is 2, 4, 7, 8. The total distance traveled is 2 + (4-2) + (7-4) + (8-7) + 8 + 7 + 4 + 2 = 32.","solution":"def minimum_distance_to_visit_all_landmarks(n, distances): Calculate the minimum possible distance that Tim has to travel to visit all the landmarks and return to the starting point. :param n: Number of landmarks :param distances: List of distances to the landmarks :return: Minimum distance Tim has to travel if not distances: return 0 max_distance = max(distances) return 2 * max_distance"},{"question":"Iahub just received a new puzzle to solve. He needs to find a special sequence of n integers that meet specific criteria. A sequence a1, a2, ..., an, consisting of n integers, is called Safe if and only if: - Its elements are pairwise distinct. - Each element ai (1 ≤ i ≤ n) contains exactly d digits in its binary representation. - The sum of all elements in the sequence should be as small as possible. Iahub needs your help to find a Safe sequence of n elements. Input The input contains two integers: n (1 ≤ n ≤ 105) and d (1 ≤ d ≤ 30). Output Output a line that contains n space-separated integers a1, a2, ..., an, representing a Safe sequence. Note that each ai must not be greater than 2^30 - 1. If there are multiple solutions you can output any one. Examples Input 3 3 Output 4 5 6 Input 5 4 Output 8 9 10 11 12","solution":"def find_safe_sequence(n, d): Returns a list of n integers that form a Safe sequence, where each integer has exactly d digits in its binary representation. sequence = [] start = 2 ** (d - 1) end = 2 ** d - 1 for i in range(n): sequence.append(start + i) if start + i > end: break return sequence"},{"question":"The Doctor has come across an interesting puzzle while traveling through time: A mysterious machine outputs the same list of numbers every time it is given a specific input number. The list of numbers is arranged in such a way that subsequent numbers are always greater than or equal to the previous one. The Doctor suspects that this input number determines the length of the list and the values within it. However, the machine is very particular and will only generate a list of a certain length and range. Your task is to write a program that, given a number of elements, generates a sequence of integers in non-decreasing order according to a specific pattern that is derived from that input number. -----Input----- The first line contains an integer (m) ((1 le m le 100)) – the number of elements in the sequence. The following line contains (m) integers (a_1, a_2, ldots, a_m) ( (-1000 le a_i le 1000)), representing the potential elements of the sequence. -----Output----- Print (m) integers (b_1, b_2, ldots, b_m) – the sequence in non-decreasing order based on the input sequence. -----Examples----- Input 5 3 1 4 1 5 Output 1 1 3 4 5 Input 3 -2 0 -1 Output -2 -1 0 -----Note----- In the first example, the input sequence {3, 1, 4, 1, 5} is rearranged in non-decreasing order to form the sequence {1, 1, 3, 4, 5}. In the second example, the input sequence {-2, 0, -1} is rearranged in non-decreasing order to form the sequence {-2, -1, 0}.","solution":"def non_decreasing_order_sequence(m, sequence): Given a sequence of m integers, the function returns the sequence sorted in non-decreasing order. Parameters: m (int): The number of elements in the sequence. sequence (list): A list of m integers. Returns: list: The non-decreasing sorted sequence. return sorted(sequence)"},{"question":"You are given an encoded string where each alphabetic character is shifted by a certain number of places. For example, shifting \'A\' by 3 places results in \'D\', shifting \'Z\' by 1 place results in \'A\'. Spaces in the string are not shifted. You need to decode the string with the given shift value. Example 1: Input: s = \\"D Wklqn Brx\\" shift = 3 Output: \\"A Think You\\" Explanation: Each character in \\"D Wklqn Brx\\" is shifted 3 places to the left to get the decoded string \\"A Think You\\". Spaces are not altered. Example 2: Input: s = \\"Khoor Zruog\\" shift = 3 Output: \\"Hello World\\" Explanation: Each character in \\"Khoor Zruog\\" is shifted 3 places to the left to get the decoded string \\"Hello World\\". Spaces are not altered. Your task: You don\'t need to read input or print anything. Your task is to complete the function decodeString() which takes a string s and shift as input parameters and returns the decoded string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= |s| <= 100 1 <= shift <= 25","solution":"def decodeString(s, shift): Decodes an encoded string where each alphabetic character is shifted by a given number of places. :param s: Encoded string :param shift: Integer shift value for decoding :return: Decoded string decoded_chars = [] for char in s: if char.isalpha(): if char.isupper(): decoded_chars.append(chr((ord(char) - shift - 65) % 26 + 65)) elif char.islower(): decoded_chars.append(chr((ord(char) - shift - 97) % 26 + 97)) else: # Non-alphabet characters (e.g., spaces) remain unchanged decoded_chars.append(char) return \'\'.join(decoded_chars)"},{"question":"Melissa is working on a new project involving image pixel analysis. She needs a way to quickly identify specific attributes of a rectangular sub-area within a larger image. Each pixel in the image is represented by an integer value, and the image is structured as a 2D grid. To facilitate her analysis, she wants to know the maximum value within any given sub-area of the image. To help Melissa, write a function that takes an MxN matrix of integers representing the pixel values of the image and the coordinates of the sub-area (top-left and bottom-right corners). The function should return the maximum pixel value within the specified sub-area. Input: 1. The first line contains two integers M and N (1 ≤ M, N ≤ 1000), the dimensions of the matrix. 2. The next M lines each contain N integers, the pixel values of the image. 3. The following line contains four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ M, 1 ≤ y1 ≤ y2 ≤ N), the coordinates of the top-left and bottom-right corners of the sub-area (1-indexed). Output: Print the maximum pixel value within the specified sub-area. SAMPLE INPUT 4 5 1 2 3 2 1 4 5 6 5 4 7 8 9 8 7 2 3 4 3 2 2 2 4 4 SAMPLE OUTPUT 9 Explanation: The sub-area specified by the coordinates (2, 2) to (4, 4) covers the following pixels: 5 6 5 8 9 8 3 4 3 The maximum value in this sub-area is 9.","solution":"def max_pixel_value(matrix, x1, y1, x2, y2): Returns the maximum pixel value within the specified sub-area of the matrix defined by the coordinates (x1, y1) to (x2, y2). Parameters: matrix (list of lists): A 2D list representing the image. x1 (int): Top-left x-coordinate of the sub-area (1-indexed). y1 (int): Top-left y-coordinate of the sub-area (1-indexed). x2 (int): Bottom-right x-coordinate of the sub-area (1-indexed). y2 (int): Bottom-right y-coordinate of the sub-area (1-indexed). Returns: int: The maximum pixel value in the specified sub-area. max_val = float(\'-inf\') for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): if matrix[i][j] > max_val: max_val = matrix[i][j] return max_val"},{"question":"Riya loves playing with strings. One day, she decided to create a new game with her friends. The rules of the game are simple: Given a string S of lowercase English alphabets, each player in turn picks any character from the string and removes it. Players continue this way until there are no more characters left to pick. The player who picks a character that makes the string a palindrome, after removing that character, wins the game. If no player can make the string a palindrome by removing just one character, the game is a draw. Write a program to determine if the game will result in a win or a draw for the given string S. ------ Input ------ The first line contains an integer T, the number of test cases. The next T lines each contain a string S. ------ Output ------ For each string S, output \\"Win\\" if it’s possible for some player to remove exactly one character to make S a palindrome, otherwise output \\"Draw\\". ------ Constraints ------ 1 ≤ T ≤ 10 3 ≤ |S| ≤ 10^{5} ------ Sample Input 1 ------ 3 abca abc abcbca ------ Sample Output 1 ------ Win Draw Win ------ Explanation 1 ------ For the first input string \\"abca\\", removing character \'b\' results in the palindrome \\"aca\\". For the second input string \\"abc\\", it is not possible to remove exactly one character to form a palindrome. For the third input string \\"abcbca\\", removing character \'b\' results in the palindrome \\"abcba\\".","solution":"def can_win_by_removing_one(char_string): Determines if by removing one character from the string we can make it a palindrome. n = len(char_string) def is_palindrome(s): return s == s[::-1] for i in range(n): if is_palindrome(char_string[:i] + char_string[i+1:]): return \\"Win\\" return \\"Draw\\" def process_cases(T, cases): results = [] for i in range(T): results.append(can_win_by_removing_one(cases[i])) return results"},{"question":"You are given an array of integers representing the prices of different items. You need to maximize the amount of money you can save when buying a selection of these items subject to a budget constraint. You can purchase at most one of each item. Input The first line contains the number of test cases T. T test cases follow: The first line of each test case contains two integers N and B. N is the number of items, and B is the budget or the maximum amount of money you can spend. The next line contains N integers, representing the prices of the items. Output Output T lines, each containing a single integer, which is the maximum amount of money you can save while purchasing a selection of the items without exceeding the budget B. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ B ≤ 100000 1 ≤ Price of each item ≤ 10000 SAMPLE INPUT 2 5 50 20 10 30 40 50 4 15 5 10 15 20 SAMPLE OUTPUT 10 0 Explanation For the 1st case, you can buy the item priced at 10 and the item priced at 20, saving 50 - (20+10) = 20. For the 2nd case, you can buy the items priced at 5 and 10, spending exactly 15 with no money left to save.","solution":"def maximize_savings(test_cases): results = [] for test_case in test_cases: N, B = test_case[0] prices = test_case[1] prices.sort() total = 0 for price in prices: if total + price <= B: total += price else: break results.append(B - total) return results"},{"question":"A kingdom is being attacked by a dragon, and the king wants to capture the dragon by laying traps along its possible flight path. There are N traps laid out in a straight line, each with a defined capture limit. The dragon follows a zigzag flight path, which means it can be captured if the adjacent trap has a higher limit than the current one. The king must identify the longest sequence of traps such that each trap\'s limit is strictly lower than the next. Input: The first input line contains an integer N, which is the number of traps, followed by N lines, each containing an integer, which is the capture limit of each trap. Output: The length of the longest increasing subsequence of trap limits. Constraints: 1 ≤ N ≤ 100 1 ≤ Capture limit of each trap ≤ 1000 SAMPLE INPUT 6 1 3 2 4 6 5 SAMPLE OUTPUT 4 Explanation: The longest increasing subsequence is [1, 3, 4, 6] which has a length of 4.","solution":"def longest_increasing_subsequence(traps): This function takes a list of trap limits and returns the length of the longest increasing subsequence. if not traps: return 0 n = len(traps) lis = [1] * n # Initialize LIS length array with 1 for each position for i in range(1, n): for j in range(0, i): if traps[i] > traps[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) # Function to process input and call the LIS function def process_traps(traps): return longest_increasing_subsequence(traps)"},{"question":"In a distant galaxy, there are numerous interstellar worlds connected by a series of teleportation portals. Each world can be represented as a node and each portal as an edge in a graph. The graph is undirected and unweighted. Your task is to help the Galactic Federation find out if there is a loop (cycle) in the network and determine the size of the largest loop if any exists. A loop is a path that starts from a node and ends at the same node, visiting other nodes exactly once in between. INPUT::: The first line contains a single integer T, the number of test cases. The first line of each test case contains two space-separated integers N and M, where N is the number of worlds (nodes) and M is the number of portals (edges). The next M lines each contain two space-separated integers u and v, indicating that there is a portal between world u and world v. OUTPUT::: For every test case, output a single integer L, the size of the largest loop if any exists. If there is no loop, output -1. CONSTRAINTS::: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ 1000 SAMPLE INPUT 2 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 SAMPLE OUTPUT 4 -1 Explanation For the first test case, there is a loop involving all four worlds (1 -> 2 -> 3 -> 4 -> 1), so the size of the largest loop is 4. For the second test case, there are no loops, so the output is -1.","solution":"from collections import defaultdict def find_largest_cycle(n, edges): def dfs(node, parent, depth): visited[node] = depth for neighbor in graph[node]: if neighbor == parent: continue if visited[neighbor] == -1: if dfs(neighbor, node, depth + 1): return True elif visited[neighbor] < depth: global max_cycle_length max_cycle_length = max(max_cycle_length, depth - visited[neighbor] + 1) return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [-1] * (n + 1) global max_cycle_length max_cycle_length = -1 for i in range(1, n + 1): if visited[i] == -1: dfs(i, -1, 0) return max_cycle_length def process_test_cases(T, test_cases): results = [] for tc in test_cases: N, M, edges = tc if M == 0: results.append(-1) else: results.append(find_largest_cycle(N, edges)) return results # Example test cases execution (to be removed or commented when running actual unit tests) if __name__ == \\"__main__\\": T = 2 test_cases = [ (4, 4, [(1, 2), (2, 3), (3, 4), (4, 1)]), (3, 2, [(1, 2), (2, 3)]) ] results = process_test_cases(T, test_cases) for result in results: print(result)"},{"question":"Given a string \'s\' representing a sentence containing words separated by spaces, reverse the order of characters in each word while preserving the word order and spaces between them. For example: Input: s = \\"Hello World\\" Output: \\"olleH dlroW\\" Input: s = \\"Coding is fun\\" Output: \\"gnidoC si nuf\\" Function signature: ```python def reverse_words_characters(s: str) -> str: Reverses the characters in each word of the input string while preserving the word order and spaces between them. Args: s: A string containing words separated by spaces. Returns: A string with characters in each word reversed. ``` # Constraints: - The input string will not contain leading or trailing spaces. - The input string will contain only printable ASCII characters. - The length of the input string is between 1 and 10^4. # Note: - You don\'t need to read input or print anything. Complete the function `reverse_words_characters()` which accepts string `s` as an input parameter and returns a string where the characters in each word are reversed. - Your solution should aim for an efficient time complexity, ideally O(n), where n is the length of the input string. - Utilize only O(n) additional space for your solution.","solution":"def reverse_words_characters(s: str) -> str: Reverses the characters in each word of the input string while preserving the word order and spaces between them. Args: s: A string containing words separated by spaces. Returns: A string with characters in each word reversed. # Split the sentence into words words = s.split(\' \') # Reverse each word and join them back with a space reversed_words = [word[::-1] for word in words] # Join the list of reversed words with a space to form the final string return \' \'.join(reversed_words)"},{"question":"In a park, there are N gates aligned in a row, numbered from 1 to N. Each gate has a specific height, provided in an array of integers where the i-th element represents the height of the i-th gate. A ball can pass through a gate if the height of the gate is greater than or equal to the ball\'s diameter. A ball of diameter X is to be rolled through all the gates starting from the first gate to the last gate. Write a program to determine whether the ball can successfully pass through all the gates. If the ball can pass through all the gates, output \\"YES\\". Otherwise, output \\"NO\\". Input - The first line contains an integer N (1 <= N <= 100), which represents the number of gates. - The second line contains N integers representing the heights of the gates (1 <= Height <= 100). - The third line contains an integer X (1 <= X <= 100), representing the diameter of the ball. Output - Output \\"YES\\" if the ball can pass through all the gates. Otherwise, output \\"NO\\". Example Input 5 5 6 7 8 9 5 Output YES Input 4 3 2 4 5 4 Output NO Input 3 8 9 7 7 Output YES Note In the first example, the ball with a diameter of 5 can pass through all gates because each gate\'s height is at least 5. In the second example, the ball with a diameter of 4 cannot pass through the second gate which has a height of 2. In the third example, both the ball\'s diameter and the smallest gate height are 7, so the ball can pass through all the gates.","solution":"def can_ball_pass_all_gates(N, gate_heights, X): Determines if a ball of diameter X can pass through all gates. Parameters: N (int): Number of gates. gate_heights (list of int): Heights of the gates. X (int): Diameter of the ball. Returns: str: \\"YES\\" if the ball can pass through all gates, otherwise \\"NO\\". for height in gate_heights: if height < X: return \\"NO\\" return \\"YES\\""},{"question":"Alina is fond of lexicographic order and she likes to generate distinct permutations of a given string in that specific order. A permutation of a string is considered lexicographically smaller if it appears earlier in a dictionary. She is trying to find a way to efficiently generate the k-th lexicographically smallest permutation of a given string. Given a string consisting of only lowercase Latin letters and a positive integer k, find the k-th lexicographically smallest permutation of the string. If k is larger than the total number of permutations, return an empty string. Input The input consists of two lines. The first line contains a string s (1 ≤ |s| ≤ 100). The second line contains an integer k (1 ≤ k ≤ 10^9). Output Output the k-th lexicographically smallest permutation of the string, or an empty string if k exceeds the number of permutations. Examples Input abc 3 Output bac Input aabb 16 Output bbaa Note Total permutations of the string \\"abc\\" are: \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\". The 3rd permutation in lexicographical order is \\"bac\\". For the string \\"aabb\\", total permutations are: \\"aabb\\", \\"abab\\", \\"abba\\", \\"baab\\", \\"baba\\", \\"bbaa\\". The 16th permutation exceeds the total number of permutations (which is 6 in this case). Thus, the output is \\"bbaa\\".","solution":"import itertools def kth_permutation(s, k): Returns the k-th lexicographically smallest permutation of the string s, or an empty string if k exceeds the number of permutations. # Generate all distinct permutations of the string permutations = sorted(set(itertools.permutations(s))) # Check if k is larger than the number of permutations if k > len(permutations): return \\"\\" # Get the k-th permutation and join to form a string kth_perm = \'\'.join(permutations[k-1]) return kth_perm"},{"question":"You are given an array A with N integers. You have to determine whether this array is monotonic or not. An array A is considered monotonic if it is either entirely non-increasing or non-decreasing. Output 1 if it is monotonic, and 0 otherwise. ------ Input Format ------ - The first line of the input contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer - N - The second line of each test case contains N space-separated integers - the i-th of which is (A_{i}) ------ Output Format ------ For each test case, output the answer on a new line. Output 1 if A is monotonic, and 0 otherwise. ------ Constraints ------ (1 ≤ T, N ≤ 10^{5}) (-10^{9} ≤ A_{i} ≤ 10^{9}) - The sum of (N) across all test cases does not exceed (10^{6}) ------ Sample Input 1 ------ 3 4 1 2 2 3 5 6 5 5 4 4 3 1 3 2 ------ Sample Output 1 ------ 1 1 0 ------ Explanation 1 ------ Test case 1: [1, 2, 2, 3] is monotonic because it is non-decreasing. Test case 2: [6, 5, 5, 4, 4] is monotonic because it is non-increasing. Test case 3: [1, 3, 2] is not monotonic since it increases from 1 to 3 and then decreases from 3 to 2.","solution":"def is_monotonic(arr): Determines whether the given array \'arr\' is monotonic (either non-decreasing or non-increasing). Returns 1 if the array is monotonic and 0 otherwise. n = len(arr) if n <= 1: return 1 increasing = decreasing = True for i in range(1, n): if arr[i] < arr[i - 1]: increasing = False if arr[i] > arr[i - 1]: decreasing = False return 1 if increasing or decreasing else 0 def solve_monotonic(T, test_cases): results = [] for t in range(T): N, A = test_cases[t] results.append(is_monotonic(A)) return results"},{"question":"A group of friends decided to go on a trip to a city that consists of N locations connected by N-1 bidirectional roads, forming a tree structure. Each location is represented by an integer from 1 to N. They start their trip from location 1. During their trip, they want to visit every location exactly once and return to the starting location (location 1). Since they want to minimize their travel distance and not exhaust themselves too much, your task is to determine the minimum distance the group has to travel to visit all locations exactly once and return to the starting location. This problem can be approached as finding the minimum distance required to complete a full traversal of a tree structure. # Input The first line consists of N, the number of locations. The next N-1 lines contain two space-separated integers i and j, denoting that there is a road connecting locations i and j. # Output Print a single integer, the minimum distance for the group to travel to visit all locations exactly once and return to the starting location. # Constraints - 1 ≤ N ≤ 10^3 - 1 ≤ i, j ≤ N # Example Input ``` 4 1 2 2 3 3 4 ``` Output ``` 6 ``` In this case, the group can travel from location 1 to 2, then to 3, then to 4, and finally return to 1. The total distance traveled is 3 + 2 + 1 = 6. Author: John Tester: Priya","solution":"def minimum_travel_distance(n, roads): from collections import defaultdict, deque def bfs_max_depth(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True farthest_node = start max_depth = 0 while queue: node, depth = queue.popleft() if depth > max_depth: max_depth = depth farthest_node = node for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, depth + 1)) return farthest_node, max_depth if n == 1: return 0 graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Find the farthest node from node 1 farthest_node, _ = bfs_max_depth(1) # Find the farthest node from the above farthest node to get the tree diameter _, diameter = bfs_max_depth(farthest_node) return 2 * diameter"},{"question":"You are working with a string manipulation feature where you need to identify potentially harmful phrases or words in user-submitted content. Your goal is to write a function that checks for the presence of any forbidden substrings in a given input string. The string is given along with a list of forbidden substrings. Your task is to determine whether any of the forbidden substrings appear as a contiguous subsequence in the input string. Write a function that takes an input string and a list of forbidden substrings, and returns \\"YES\\" if any of the forbidden substrings are found within the input string, and \\"NO\\" otherwise. ------ Input ------ The first line of input contains a single integer N, the number of forbidden substrings. The next N lines each contain one forbidden substring. The final line of input contains the input string to be checked. ------ Output ------ Output a single line with either \\"YES\\" or \\"NO\\" depending on whether any of the forbidden substrings are found in the input string. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ length of each forbidden substring ≤ 100 1 ≤ length of the input string ≤ 1000 ------ Sample Input 1 ------ 3 bad evil harm this is a bad situation ------ Sample Output 1 ------ YES ------ Explanation 1 ------ The input string \\"this is a bad situation\\" contains the forbidden substring \\"bad\\", so the output is \\"YES\\". ------ Sample Input 2 ------ 2 curse danger everything is safe ------ Sample Output 2 ------ NO ------ Explanation 2 ------ The input string \\"everything is safe\\" does not contain any of the forbidden substrings, so the output is \\"NO\\".","solution":"def check_forbidden_phrases(forbidden_list, input_string): Returns \\"YES\\" if any of the forbidden substrings are found within the input string, otherwise returns \\"NO\\". for forbidden in forbidden_list: if forbidden in input_string: return \\"YES\\" return \\"NO\\""},{"question":"Write a function `add_large_integers` that takes two strings representing non-negative integers and returns their sum, also as a string. The reason we are using strings for input is to handle large numbers that exceed the range of standard integer types. ```python def add_large_integers(num1: str, num2: str) -> str: pass # Examples: > add_large_integers(\\"123456789123456789\\", \\"987654321987654321\\") \\"1111111111111111110\\" > add_large_integers(\\"9876543210\\", \\"1234567890\\") \\"11111111100\\" > add_large_integers(\\"0\\", \\"0\\") \\"0\\" > add_large_integers(\\"999999999999999999\\", \\"1\\") \\"1000000000000000000\\" ``` Constraints: - The input strings are non-negative integers and do not contain any leading zeros. - The function should handle inputs of arbitrary length. - Do not use any built-in numerical conversion functions (e.g., `int()` in Python). The objective is to simulate manual addition as you would on paper.","solution":"def add_large_integers(num1: str, num2: str) -> str: # Initialize the result as an empty string result = \\"\\" # Initialize carry to 0 carry = 0 # Pad the shorter string with leading zeros if len(num1) > len(num2): num2 = num2.zfill(len(num1)) else: num1 = num1.zfill(len(num2)) # Traverse both strings from right to left for i in range(len(num1) - 1, -1, -1): # Convert current position characters to integers digit1 = int(num1[i]) digit2 = int(num2[i]) # Sum the digits along with carry total = digit1 + digit2 + carry # If total is at least 10, we have a carry carry = total // 10 # Append the digit part of the total to result result = str(total % 10) + result # If carry is left after the final addition, prepend it to result if carry != 0: result = str(carry) + result return result"},{"question":"Description You are given a set of tasks with their respective dependencies. Each task is represented by a unique identifier, and a dependency indicates that one task must be completed before another. Your task is to determine if you can complete all tasks without any cyclic dependencies. Input Format The input consists of several lines. Each line contains a pair of space-separated task identifiers, representing that the first task depends on the completion of the second task. Output Format For each line of input, display the word YES if it\'s possible to complete all the tasks without encountering a cycle in the dependencies. Otherwise, display NO. Constraints 1 <= number of tasks <= 100 Task identifiers use only lowercase English letters. SAMPLE INPUT a b b c c a d e e f f g SAMPLE OUTPUT NO YES Explanation: In the first set of dependencies, there is a cyclic dependency between tasks a, b, and c, so it\'s not possible to complete all tasks. In the second set of dependencies, there is no cycle, so it is possible to complete all tasks.","solution":"from collections import defaultdict def can_complete_all_tasks(dependencies): Determine if all tasks can be completed without any cyclic dependencies. Args: dependencies (list of tuple of str): List of (task, task_dependency) pairs. Returns: str: \\"YES\\" if all tasks can be completed without cycles, else \\"NO\\". def has_cycle(v, visited, rec_stack): # Mark the current node as visited and add to recursion stack visited[v] = True rec_stack[v] = True # Recur for all neighbours # If any neighbour is visited and in rec_stack then graph is cyclic for neighbour in graph[v]: if not visited[neighbour]: if has_cycle(neighbour, visited, rec_stack): return True elif rec_stack[neighbour]: return True # Remove the vertex from recursion stack rec_stack[v] = False return False # Create a graph from the dependencies graph = defaultdict(list) nodes = set() for task, dependency in dependencies: graph[dependency].append(task) nodes.add(task) nodes.add(dependency) # Mark all the vertices as not visited and not part of recursion stack visited = {node: False for node in nodes} rec_stack = {node: False for node in nodes} # Call the recursive helper function to detect cycle in different DFS trees for node in nodes: if not visited[node]: # Don\'t recur for visited nodes if has_cycle(node, visited, rec_stack): return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers where each element in the array appears twice, except for one unique element that appears only once. Your goal is to find the element that appears only once using bitwise operations for an optimal solution. -----Input----- The input contains an array of integers arr of size n (1 le n le 10^5), where each integer is in the range from 1 to 10^5 and n is always an odd number. -----Output----- Output a single integer, the unique element that appears only once in the array. -----Examples----- Sample Input: [2, 3, 4, 2, 3] Sample Output: 4 Sample Input: [7, 8, 7, 10, 8, 12, 10] Sample Output: 12","solution":"def find_unique_element(arr): Returns the unique element that appears only once in the array `arr`. Each element in `arr` appears twice except one unique element that appears only once. Uses bitwise XOR operation to find the unique element. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Alex loves symmetry in strings and he enjoys solving problems related to palindromes. He wants to create a new type of palindrome checker for strings by using the following approach: - Create a new string by rearranging the characters of the given string such that the new string is a palindrome. - If it is possible to create such a palindrome, print \\"YES\\" (without quotes). - If it is not possible, print \\"NO\\" (without quotes). Note: A palindrome is a string that reads the same forward and backward. Input: The first line contains T, the number of test cases. The next T lines each contain a single string. Output: For each test case, print \\"YES\\" if it is possible to rearrange the characters to form a palindrome, and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 1000 1 ≤ length of the string ≤ 100 Author: Alex Johnson SAMPLE INPUT 3 aabb abc racecar SAMPLE OUTPUT YES NO YES Explanation: Test Case #1: The string \\"aabb\\" can be rearranged to form \\"abba\\" or \\"baab\\" which are palindromes. Hence, the output is \\"YES\\". Test Case #2: The string \\"abc\\" cannot be rearranged to form a palindrome. Therefore, the output is \\"NO\\". Test Case #3: The string \\"racecar\\" is already a palindrome. Thus, the output is \\"YES\\".","solution":"def is_palindrome_permutation_possible(s): Returns \\"YES\\" if it is possible to rearrange the characters of the string s to form a palindrome, and \\"NO\\" otherwise. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be rearranged as a palindrome: # There can be at most one character with an odd count. return \\"YES\\" if odd_count <= 1 else \\"NO\\" def check_palindrome_permutations(T, strings): Given T number of strings, returns a list of \\"YES\\" or \\"NO\\" indicating if each string can be rearranged into a palindrome. return [is_palindrome_permutation_possible(s) for s in strings]"},{"question":"A delivery company uses a NxN 2D grid to represent the layout of a city. Each cell in the grid contains a non-negative integer, which represents the delivery cost to that location. The company wants to optimize their delivery segments by carving out a subgrid with the minimum total delivery cost. Given a specific size K (1 ≤ K ≤ N), can you help the company by writing a function to find the subgrid with size KxK that has the smallest sum of its elements? Input The first line contains two integers N and K. The next N lines each contain N integers representing the delivery cost grid. Output Print the KxK subgrid with the smallest sum of its elements. If there are multiple subgrids with the same smallest sum, print the one that appears first when traversed in a row-wise manner. Constraints 1 ≤ N ≤ 100 1 ≤ K ≤ N 0 ≤ cost ≤ 1000 Example Input: 4 2 1 3 4 2 0 6 7 5 8 1 2 9 4 5 7 2 Output: 1 3 0 6","solution":"def find_min_cost_subgrid(N, K, grid): Finds the KxK subgrid with the smallest sum of its elements in an NxN grid. Parameters: - N (int): Size of the main grid (NxN). - K (int): Size of the subgrid (KxK). - grid (list of list of int): The main grid containing delivery costs. Returns: - list of list of int: The KxK subgrid with the smallest sum. min_sum = float(\'inf\') result_subgrid = [] for i in range(N - K + 1): for j in range(N - K + 1): current_sum = 0 for x in range(K): for y in range(K): current_sum += grid[i + x][j + y] if current_sum < min_sum: min_sum = current_sum result_subgrid = [row[j:j + K] for row in grid[i:i + K]] return result_subgrid"},{"question":"A publishing company is printing a new book, and they want to create a special layout for the pages. The company decided to use a unique method to distribute the content over the pages. Each page in the book will have an equal number of words. However, in cases where the last page does not have sufficient words to fill a complete page, the remaining words should still be printed on that partial page. Given a list of words in the book and the number of words that can be printed on each page, your task is to calculate the number of pages required for the book. -----Input----- Input begins with an integer T: the number of test cases. Each test case consists of two lines: - The first line contains two space-separated integers W (the number of words in the book) and P (the number of words that can be printed on each page). - The second line contains W space-separated words representing the content of the book. -----Output----- For each test case, output a line containing the number of pages required for the book. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ W ≤ 10^6 - 1 ≤ P ≤ 10^3 - The length of each word does not exceed 20 characters. -----Example----- Input: 2 6 3 word1 word2 word3 word4 word5 word6 7 4 hello world this is a simple test Output: 2 2 -----Explanation----- Example case 1: There are 6 words and 3 words can fit on each page, so we need 2 pages. Example case 2: There are 7 words and 4 words can fit on each page, so the first page will have 4 words and the second page will have the remaining 3 words.","solution":"def calculate_pages_required(T, cases): results = [] for case in cases: W, P, words = case pages_required = (W + P - 1) // P # This is a ceiling division to find the number of pages results.append(pages_required) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) cases = [] line_index = 1 for _ in range(T): W, P = map(int, lines[line_index].split()) words = lines[line_index + 1].split() cases.append((W, P, words)) line_index += 2 return T, cases"},{"question":"You are given an array of non-negative integers representing the heights of different buildings. The goal is to form the largest rectangle possible within these buildings, where every building in the rectangle must share a contiguous span of the same height. Write a program that calculates the area of the largest rectangle that can be formed using the building heights given in a list. -----Input----- The input consists of a single line containing n integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 10^4, 1 ≤ n ≤ 10^5) separated by spaces, which represent the heights of the buildings. -----Output----- Output a single integer representing the largest rectangular area that can be formed. -----Examples----- Input 2 1 5 6 2 3 Output 10 Input 1 2 3 4 5 Output 9 Input 6 2 5 4 5 1 6 Output 12 -----Note----- In the first example, the largest rectangle has area 10 with height 5 and width 2 (starting at the third building and spanning to the fourth building). In the second example, the largest rectangle spans buildings with heights 4 and 5, resulting in area 9. In the third example, the largest rectangle has area 12 with height 4 and width 3 (starting at the third building and spanning to the fifth building).","solution":"def largest_rectangle_area(heights): Given a list of heights representing buildings, returns the area of the largest rectangle that can be formed within these buildings. # Initialize stack to keep track of indices of heights stack = [] max_area = 0 index = 0 while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) # Now, pop the remaining bars from stack and calculate area with each popped bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Maria and Tom are playing a game where they collect marbles that are stored in jars. Each jar contains a certain number of marbles, and the goal is to determine if the total number of marbles in the jars is odd or even. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of jars. - The second line of input will contain N space-separated integers A_i (1 ≤ i ≤ N), denoting the number of marbles in each jar. ------ Output Format ------ Output \\"ODD\\" if the total number of marbles in the jars is odd or \\"EVEN\\" if it is even. The output should be in uppercase. ------ Constraints ------ 1 ≤ N ≤ 100000 0 ≤ A_i ≤ 1000 ----- Sample Input 1 ------ 5 2 3 5 7 8 ----- Sample Output 1 ------ ODD ----- Sample Input 2 ------ 6 1 2 3 4 5 6 ----- Sample Output 2 ------ ODD ----- Sample Input 3 ------ 4 2 2 2 2 ----- Sample Output 3 ------ EVEN ----- Explanation 1 ------ Test case 1: The total number of marbles is 2 + 3 + 5 + 7 + 8 = 25, which is odd. Test case 2: The total number of marbles is 1 + 2 + 3 + 4 + 5 + 6 = 21, which is odd. Test case 3: The total number of marbles is 2 + 2 + 2 + 2 = 8, which is even.","solution":"def marbles_game(n, marbles): Determines if the total number of marbles in the jars is odd or even. Parameters: n (int): The number of jars. marbles (list): A list of integers where each integer represents the number of marbles in a jar. Returns: str: \\"ODD\\" if the total number of marbles is odd, \\"EVEN\\" if it is even. total_marbles = sum(marbles) if total_marbles % 2 == 0: return \\"EVEN\\" else: return \\"ODD\\""},{"question":"# Task Given an array of integers, find the length of the longest subarray that forms a strictly increasing sequence. # Example For `arr = [1, 3, 5, 4, 7]`, the result should be `3`. Explanation: The longest increasing subsequence is `[1, 3, 5]`. For `arr = [2, 2, 2, 2, 2]`, the result should be `1`. Explanation: There is no increasing sequence, so the length of the longest subarray is `1`. For `arr = [10, 20, 30, 10, 20, 30, 40]`, the result should be `4`. Explanation: The longest increasing subsequence is `[10, 20, 30, 40]`. # Input / Output - `[input]` array of integers `arr` an array of integers where 1 ≤ `arr.length` ≤ 100000 and -100000 ≤ `arr[i]` ≤ 100000. - `[output]` an integer The length of the longest strictly increasing subarray.","solution":"def longest_increasing_subarray(arr): if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given an array of integers. Implement a function to determine the second smallest distinct number in the array. If there isn\'t one, return -1. Input The first line of input contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. The next line contains n integers, which can be any integer between -10^3 and 10^3. Output Output a single integer representing the second smallest distinct number in the given array. If there isn’t a second smallest distinct number, output -1. Examples Input 5 3 1 2 1 3 Output 2 Input 3 5 5 5 Output -1","solution":"def second_smallest_distinct(arr): Returns the second smallest distinct number in the array. If there isn\'t one, returns -1. distinct_numbers = sorted(set(arr)) return distinct_numbers[1] if len(distinct_numbers) > 1 else -1"},{"question":"You are given an array of positive integers where each integer represents the height of a player. You are organizing a game in which any two players can play a match. During the match, the taller player always wins. If two players have the same height, either one can win. A tournament is held in which every player competes against every other player exactly once, resulting in a ranking based on the total number of matches each player won. You are interested in determining the possible number of unique ranking lists. A ranking list is unique if the order of players from highest rank to lowest rank does not repeat any previously seen order. Input: The input consists of a single line containing a space-separated list of positive integers representing the heights of the players. Output: Output a single integer, the number of unique ranking lists. Constraints: 1 ≤ Number of players ≤ 100 1 ≤ Height of each player ≤ 1000 SAMPLE INPUT 4 3 2 1 SAMPLE OUTPUT 1 Explanation In this case, the heights of players are distinct and sorted in descending order. There will be exactly one unique ranking list, where the tallest player wins all matches, the second tallest wins against everyone except the tallest, and so on.","solution":"from itertools import permutations def count_unique_rankings(heights): Returns the number of unique ranking lists. unique_rankings = set() for perm in permutations(heights): unique_rankings.add(perm) return len(unique_rankings) # Function to be called for the task def unique_ranking_count(heights_input): heights = list(map(int, heights_input.split())) return count_unique_rankings(heights)"},{"question":"You are provided with a list of integers representing heights of different buildings in a skyline. The goal is to process these buildings in a way that results in the silhouette having the fewest number of visible peaks. You need to print the minimum number of visible peaks after processing. The processing involves flattening one or more buildings to a height of zero. You can remove any number of buildings, but you cannot change the relative order of the remaining buildings. Input: The first line contains the number of test cases T. Each test case consists of two lines. The first line contains an integer N, representing the number of buildings. The second line contains N space-separated integers denoting the heights of the buildings. Output: For each test case, print the minimum number of visible peaks. SAMPLE INPUT 2 6 5 3 8 3 4 1 5 2 2 2 3 2 SAMPLE OUTPUT 3 1 Explanation Testcase 1: One way to achieve the fewest number of peaks is to flatten buildings with heights causing unnecessary peaks. For instance, flattening the buildings with heights 3 between 8 and 3, 3 between 8 and 4, and 1 between 4 to make it visually have fewer peaks could result in only 3 visible peaks. Testcase 2: In this case, you can flatten the buildings with height 3. The skyline would now appear as 2 2 2 2 2, which has only one visible peak. Thus, the output should be 1.","solution":"def min_visible_peaks(heights): Returns the minimum number of visible peaks after processing the buildings. A peak is a building that is taller than its neighbouring buildings. if not heights: return 0 n = len(heights) if n == 1: return 1 peaks = 0 # Check the first building if heights[0] > heights[1]: peaks += 1 # Check the buildings in between for i in range(1, n - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: peaks += 1 # Check the last building if heights[-1] > heights[-2]: peaks += 1 return peaks def process_test_cases(test_cases): results = [] for case in test_cases: N = case[0] heights = case[1] results.append(min_visible_peaks(heights)) return results"},{"question":"-----Input----- The input consists of a single line containing a string of lowercase letters and digits. The length of the string is between 1 and 20 characters. -----Output----- Output the sum of the digits in the string. If there are no digits in the string, output 0. -----Examples----- Input a1b2c3 Output 6 Input abc123xyz Output 6 Input abcdefghijkl Output 0","solution":"def sum_of_digits(s): Returns the sum of the digits in the given string. If there are no digits, returns 0. total_sum = 0 for char in s: if char.isdigit(): total_sum += int(char) return total_sum"},{"question":"Stan is organizing a local gardening contest in his community. He wants to automate the process of distributing participants using a programming solution. Each participant will receive a unique ID number between 1 and N, where N is the total number of participants. Moreover, Stan wants to group participants into teams such that all the teams have an equal number of members, except possibly one team which may have fewer members if N is not divisible by the team size. Write a program that will output the team assignments. Input: - The first line contains t, the number of test cases. - The following 2*t lines contain: - An integer N (1 ≤ N ≤ 10000), the total number of participants. - An integer k (1 ≤ k ≤ 100), the team size. Output: For each test case, print the team assignments on a single line, with each team enclosed in parentheses and members\' IDs separated by spaces. If a participant cannot be assigned to a full team, list the remaining participants in the last team. Example: Input: 2 9 3 10 4 Output: (1 2 3) (4 5 6) (7 8 9) (1 2 3 4) (5 6 7 8) (9 10) Explanation: For the first test case: N=9, k=3 Teams can be divided as: (1 2 3), (4 5 6), (7 8 9) For the second test case: N=10, k=4 Teams can be divided as: (1 2 3 4), (5 6 7 8), (9 10) since the last team has fewer members.","solution":"def distribute_participants(t, test_cases): results = [] for case in range(t): N, k = test_cases[case] teams = [] for i in range(1, N + 1, k): team = \\" \\".join(map(str, range(i, min(i + k, N + 1)))) teams.append(f\\"({team})\\") results.append(\\" \\".join(teams)) return results"},{"question":"You are given a string s representing an encoded message containing digits from \'1\' to \'9\'. You can decode it to a string of letters using the following mapping: 1 -> A 2 -> B 3 -> C ... 25 -> Y 26 -> Z Your task is to determine the number of ways to decode the given string s. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 100), the encoded message. The string s consists only of digits from \'1\' to \'9\'. -----Output----- For each test case, print one integer: the number of ways to decode the string s. -----Example----- Input 3 12 226 2101 Output 2 3 1 -----Explanation----- In the first test case, \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). In the second test case, \\"226\\" can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). In the third test case, \\"2101\\" can be decoded as \\"UAA\\" (21 0 1), or \\"BAA\\" (2 10 1).","solution":"def num_decodings(s): Returns the number of ways to decode the input string s. if not s: return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): if s[i - 1] != \'0\': dp[i] += dp[i - 1] if i > 1 and \'10\' <= s[i - 2:i] <= \'26\': dp[i] += dp[i - 2] return dp[-1] def decode_ways(t, test_cases): results = [] for s in test_cases: results.append(num_decodings(s)) return results"},{"question":"Given a string S consisting of lowercase English letters, you need to transform it into a palindrome using the minimal number of insertions. A palindrome is a string that reads the same forward and backward. You can insert any character at any position in the string. Input: The first line contains the number of test cases T. T test cases follow. Each case contains a single string S. Output: Output T lines, one for each test case containing the minimal number of insertions needed to transform the given string S into a palindrome. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 SAMPLE INPUT 3 ab aa abc SAMPLE OUTPUT 1 0 2 Explanation For the first case, you can insert \'b\' at the beginning to form \\"bab\\" or insert \'a\' at the end to form \\"aba\\". For the second case, the given string is already a palindrome, so no insertions are needed. For the third case, you can insert \'b\' at the end to form \\"abcb\\", and then insert \'a\' at the end to form \\"abcba\\".","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions required to make the string a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1] def process_cases(test_cases): Processes multiple test cases and returns the results. results = [] for s in test_cases: results.append(min_insertions_to_palindrome(s)) return results"},{"question":"Write a function that takes an integer `n` as input and generates a pyramid made of asterisks (\'*\') with `n` levels. The pyramid should be centered and aligned. Example 1: Input: 4 Output: * *** ***** ******* Example 2: Input: 3 Output: * *** ***** Your Task: You don\'t need to input anything. Complete the function `printPyramid` that takes an integer `n` as the input parameter and print the pyramid pattern. Constraints: 1 <= n <= 20","solution":"def printPyramid(n): Prints a pyramid made of asterisks (\'*\') with n levels, centered and aligned. for i in range(1, n+1): spaces = \' \' * (n - i) stars = \'*\' * (2*i - 1) print(spaces + stars + spaces)"},{"question":"You are hired as a junior software developer at a game development company, and your task is to implement a simple scoring system for a new puzzle game. In this game, players earn or lose points by finding and selecting items with specific properties in a 2D grid. Each cell in the grid contains either an integer or is empty (represented by None). Your job is to calculate the total score based on the following rules: 1. For each cell containing an integer, add the value of the integer to the total score. 2. If a cell contains a number that is a multiple of 5, subtract the value of that number from the total score instead. 3. Ignore any empty cells (None) when calculating the score. Write a function `calculate_score(grid)` that takes a 2D list `grid` (list of lists of integers or None) and returns the total score as an integer. Example: ``` grid = [ [4, 15, 2], [None, 7, 10], [3, None, 5] ] ``` - The first row contributes: 4 + (-15) + 2 = -9. - The second row contributes: 7 + (-10) = -3. - The third row contributes: 3 + (-5) = -2. - Total score: -9 + (-3) + (-2) = -14. Thus, `calculate_score(grid)` should return -14.","solution":"def calculate_score(grid): Calculates the total score for the grid based on the given rules: 1. Add value for each cell containing an integer. 2. Subtract the value for each cell containing a number that is a multiple of 5. 3. Ignore empty cells (None). total_score = 0 for row in grid: for cell in row: if cell is not None: if cell % 5 == 0: total_score -= cell else: total_score += cell return total_score"},{"question":"**Problem** You are working as an assistant to a game developer who is creating a new puzzle game involving grids. One of the main components of the game is to find paths within a grid. The grid is an m x n grid filled with non-negative numbers, where each number represents the cost of stepping into that cell. Your task is to find a path from the top-left corner to the bottom-right corner of the grid such that the sum of the costs along the path is minimized. You can only move either down or right at any point in time. Constraints: - 1 ≤ m, n ≤ 100 - 0 ≤ grid[i][j] ≤ 1000 Input: The input consists of multiple test cases. Each test case starts with two integers m and n, separated by a space, representing the dimensions of the grid. Then follow m lines, each containing n integers separated by spaces, representing the rows of the grid. The end of the input is a line consisting of two zeros. Output: For each test case, output a single integer on a new line, indicating the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 0 0 Output: 7 3","solution":"def min_path_sum(grid): Finds the minimum sum path from the top-left to bottom-right corner of the grid. Only moves to the right and down are allowed. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1] def parse_input(input_str): lines = input_str.split(\'n\') grids = [] idx = 0 while idx < len(lines): mn = lines[idx].split() m, n = int(mn[0]), int(mn[1]) if m == 0 and n == 0: break idx += 1 grid = [] for i in range(m): row = list(map(int, lines[idx].split())) grid.append(row) idx += 1 grids.append(grid) return grids def process_grids(grids): results = [] for grid in grids: results.append(min_path_sum(grid)) return results def main(input_str): grids = parse_input(input_str) results = process_grids(grids) for result in results: print(result)"},{"question":"You are given a binary tree where each node contains a value. A path in this binary tree is defined as a sequence of nodes starting from any node and ending at any node, directed downwards (i.e., only from parent nodes to child nodes). The sum of a path is defined as the sum of node values in that path. Write a program to find the maximum sum of any downward path in the given binary tree. -----Input----- - First line contains single integer T (1 le T le 100) — the number of test cases. - For each test case: - The first line contains one integer N (1 le N le 10^4) — the number of nodes in the binary tree. - Each of the next N-1 lines contains two integers u and v (1 le u, v le N) representing an edge between node u and node v. The value of each node is implicitly defined as its node number. -----Output----- For each test case, print a single integer — the maximum sum of any downward path in the given binary tree. -----Example----- Input: 2 3 1 2 1 3 5 1 2 1 3 2 4 2 5 Output: 6 9 -----Explanation----- In the first test case, the binary tree is: ``` 1 / 2 3 ``` The maximum sum path is 1 -> 3, i.e., the sum is 1 + 3 = 4. In the second test case, the binary tree is: ``` 1 / 2 3 / 4 5 ``` The maximum sum path is 1 -> 2 -> 5, i.e., the sum is 1 + 2 + 5 = 8.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def dfs(node): if not node: return 0 left_sum = dfs(node.left) right_sum = dfs(node.right) max_single = max(max(left_sum, right_sum) + node.val, node.val) return max_single def max_path_sum(tree_edges, N): if N == 0: return 0 nodes = {i: TreeNode(i) for i in range(1, N + 1)} for u, v in tree_edges: if nodes[u].left is None: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return dfs(nodes[1]) def maximum_sum_of_paths(test_cases): results = [] for edges in test_cases: N = len(edges) + 1 results.append(max_path_sum(edges, N)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) edges = [] for i in range(N - 1): u, v = map(int, lines[index + 1 + i].split()) edges.append((u, v)) test_cases.append(edges) index += N return test_cases def main(input_str): test_cases = parse_input(input_str) results = maximum_sum_of_paths(test_cases) return \\"n\\".join(map(str, results))"},{"question":"Given an integer array, you need to find the smallest contiguous subarray that contains at least k unique elements. If no such subarray exists, return -1. # Input - First line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. - Second line contains an integer k (1 ≤ k ≤ n) — the minimum number of unique elements the subarray should contain. - Third line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. # Output Print an integer that represents the length of the smallest contiguous subarray that contains at least k unique elements. If there is no such subarray, print -1. # Examples Input ``` 7 3 1 2 1 3 4 2 2 ``` Output ``` 3 ``` Input ``` 5 2 1 1 1 1 1 ``` Output ``` -1 ``` Input ``` 10 5 1 2 3 4 5 1 2 3 4 5 ``` Output ``` 5 ``` # Note In the first example, the smallest subarray that contains at least 3 unique elements is [2, 1, 3] or [1, 3, 4]. In the second example, there are only 1 unique element, so no subarray can contain 2 or more unique elements. The output is -1. In the third example, the array already contains 5 unique elements starting from index 1 to index 5, so the smallest subarray length is 5.","solution":"def smallest_subarray_with_k_unique(n, k, arr): from collections import defaultdict # Check if it\'s even possible to have a subarray with k unique elements unique_elements = len(set(arr)) if unique_elements < k: return -1 # Dictionary to store the frequency of elements in the current window freq = defaultdict(int) start = 0 min_len = n + 1 unique_count = 0 for end in range(n): if freq[arr[end]] == 0: unique_count += 1 freq[arr[end]] += 1 while unique_count >= k: min_len = min(min_len, end - start + 1) freq[arr[start]] -= 1 if freq[arr[start]] == 0: unique_count -= 1 start += 1 return min_len if min_len <= n else -1"},{"question":"You are given a list of integers. Your task is to determine if you can divide this list into one or more subsequences each of which consists of consecutive integers. A subsequence is defined as a sequence derived from the original list by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains a single integer t (1 le t le 10) — the number of test cases. The descriptions of the t test cases follow. For each test case, it starts with an integer n (1 le n le 10^5) — the number of integers in the list. The next line contains n integers p_i (1 le p_i le 10^9) — the elements of the list. -----Output----- For each test case, output \\"YES\\" if the list can be divided into one or more subsequences each consisting of consecutive integers and \\"NO\\" otherwise. -----Examples----- Input 3 5 1 2 3 4 5 6 1 3 4 5 6 8 4 1 2 4 5 Output YES NO NO -----Note----- In the first test case, the list can be divided into a single subsequence [1, 2, 3, 4, 5], which contains all consecutive integers. In the second test case, we cannot form subsequences containing only consecutive integers since there is a gap between 1 and 3, and between 6 and 8. In the third test case, it is not possible to make consecutive subsequences from the list due to the gap between 2 and 4.","solution":"def can_divide_into_consecutive_subsequences(n, p): Determine if the list of integers can be divided into one or more subsequences each consisting of consecutive integers. :param n: Number of integers in the list :param p: List of integers :return: \\"YES\\" if the list can be divided into subsequences of consecutive integers, \\"NO\\" otherwise p.sort() for i in range(n - 1): # Difference between consecutive elements should be at most 1 if p[i + 1] - p[i] > 1: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): Process the test cases and determine if each case can be divided into one or more subsequences each consisting of consecutive integers. :param t: Number of test cases :param test_cases: List of tuples, each containing (n, list of integers) :return: List of results for each test case results = [] for n, p in test_cases: results.append(can_divide_into_consecutive_subsequences(n, p)) return results"},{"question":"A company has a large system of servers arranged in a network. Each server is identified by a unique integer ID from 1 to 1,000,000. The servers frequently communicate with each other by sending messages. The company wants to track the total volume of messages exchanged between any two servers over a certain period. They provide you with two types of messages: - `S s1 s2 V` which indicates that server `s1` has sent `V` volume of messages to server `s2`. - `Q s1 s2` which queries the total volume of messages exchanged between server `s1` and server `s2`, considering both directions (i.e., `s1` to `s2` and `s2` to `s1`). Your task is to implement a system that can handle these messages efficiently. # Input Format - The first line contains `N`, the number of messages to follow. - The next `N` lines describe the messages. Each message can either be a send message `S s1 s2 V` or a query message `Q s1 s2`. # Output Format - For each query message, output the total volume of messages exchanged between the two specified servers on a new line. # Constraints - 1 ≤ N ≤ 200,000 - 1 ≤ s1, s2 ≤ 1,000,000 - 1 ≤ V ≤ 1,000 # Sample Input ``` 5 S 2 3 10 S 3 2 5 S 4 5 20 Q 2 3 Q 4 5 ``` # Sample Output ``` 15 20 ``` # Explanation - The first `S` message updates the volume of messages sent from server `2` to server `3` by `10`. - The second `S` message updates the volume of messages sent from server `3` to server `2` by `5`. - The third `S` message updates the volume of messages sent from server `4` to server `5` by `20`. - The first `Q` message queries the total volume of messages exchanged between server `2` and server `3` (10 from `2 to 3` and 5 from `3 to 2`), resulting in `15`. - The second `Q` message queries the total volume of messages exchanged between server `4` and server `5` (20 from `4 to 5`), resulting in `20`. # Note This problem requires efficient handling of the volume data, considering the possible large range of server IDs and the high volume of incoming messages.","solution":"def process_messages(N, messages): from collections import defaultdict # This will store the message volume between servers message_volume = defaultdict(int) output = [] for message in messages: parts = message.split() if parts[0] == \'S\': # Sending message: S s1 s2 V s1, s2, V = int(parts[1]), int(parts[2]), int(parts[3]) # Sort the servers to ensure undirected relationship tracking if s1 > s2: s1, s2 = s2, s1 message_volume[(s1, s2)] += V elif parts[0] == \'Q\': # Querying message: Q s1 s2 s1, s2 = int(parts[1]), int(parts[2]) # Sort the servers to ensure undirected relationship tracking if s1 > s2: s1, s2 = s2, s1 output.append(message_volume[(s1, s2)]) return output"},{"question":"A company hosts an annual coding competition where contestants are ranked based on their performance. The competition is structured as a knockout tournament with multiple rounds. Each round, contestants are paired, and the loser of each pair is eliminated. In case of an odd number of contestants in a round, one contestant gets a bye (advances automatically without competing). The process continues until only one contestant remains, who is declared the winner. Given the number of contestants n, calculate the total number of matches required to determine the winner. -----Input----- The single line contains an integer n (1 ≤ n ≤ 10^6), representing the number of contestants. -----Output----- Print the total number of matches required to determine the winner. -----Examples----- Input 4 Output 3 Input 7 Output 6 Input 1 Output 0 Input 123456 Output 123455","solution":"def total_matches(n): This function calculates the total number of matches required to determine the winner in a knockout tournament. :param n: int - number of contestants :return: int - total number of matches required # The total number of matches needed is always equal to n - 1 return n - 1"},{"question":"Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as: - A binary tree in which the left and right subtrees of every node differ in height by no more than 1. Write a program that takes as input the root of a binary tree and returns a boolean value indicating whether the tree is height-balanced. Input Format The input is given as a string representing the tree in level-order traversal, where `null` indicates that there is no node present at that position. Example Input 1 1 2 2 3 3 null null 4 4 Example Input 2 3 9 20 null null 15 7 Output Format Output one of the two boolean values: `True` if the tree is height-balanced and `False` otherwise. Example Output 1 False Example Output 2 True Explanation 1 In the first example, the tree is represented as: 1 / 2 2 / 3 3 / 4 4 The left subtree of the root (node 1) has a height of 3, and the right subtree has a height of 1. Hence, the tree is not height-balanced, and the function should return `False`. Explanation 2 In the second example, the tree is represented as: 3 / 9 20 / 15 7 Both left and right subtrees of every node differ in height by no more than 1. Therefore, the tree is height-balanced and the function should return `True`. Constraints You may assume the number of nodes in the tree is between 0 and 10^4.","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root: Optional[TreeNode]) -> bool: def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) if not left_balanced or not right_balanced: return 0, False if abs(left_height - right_height) > 1: return 0, False return 1 + max(left_height, right_height), True _, balanced = check_balance(root) return balanced # Helper function to build tree from level-order list def build_tree_from_level_order(data): if not data: return None root = TreeNode(data[0]) queue = [root] i = 1 while i < len(data): current = queue.pop(0) if data[i] is not None: current.left = TreeNode(data[i]) queue.append(current.left) i += 1 if i < len(data) and data[i] is not None: current.right = TreeNode(data[i]) queue.append(current.right) i += 1 return root"},{"question":"You need to write a function that will take an encoded string and return its decoded version. The encoding rule is simple: each run of digits 0-9 is followed by a corresponding character. The number indicates the number of times the character should be repeated in the decoded string. # For example: Given an encoded string \\"4a1b5c\\", the function should return \\"aaaabccccc\\". Given an encoded string \\"2d3e4f\\", the function should return \\"ddeeeffff\\". decodeString(\\"4a1b5c\\") => \\"aaaabccccc\\" decodeString(\\"2d3e4f\\") => \\"ddeeeffff\\" The function should correctly handle strings with multiple runs and different characters.","solution":"import re def decodeString(s): Decodes the given encoded string according to the rules specified. pattern = re.compile(r\'(d+)(w)\') decoded_string = \\"\\" for match in pattern.finditer(s): count = int(match.group(1)) char = match.group(2) decoded_string += char * count return decoded_string"},{"question":"Given an array of integers and a set of query operations, you need to process each query which either updates an element in the array or calculates the sum of elements in a given range and returns that sum. Implement a class `ArrayQueries` that supports the following two operations efficiently: 1. `update(index, value)`: Update the element at position `index` to the given `value`. 2. `sumRange(left, right)`: Return the sum of elements between indices `left` and `right` inclusive. -----Input----- The first line contains two integers `n` and `q` (1 le n, q le 10^5) — the number of elements in the array and the number of queries. The second line contains `n` integers — the initial elements of the array. Each of the next `q` lines contains one of the following queries: - `1 index value` — Update the element at position `index` to `value` - `2 left right` — Return the sum of elements between indices `left` and `right` (both inclusive) It is guaranteed that for every query: - `1 le index le n` - `1 le left le right le n` -----Output----- For each sum range query, print the result on a new line. -----Examples----- Input 8 5 3 8 6 7 5 2 9 4 2 1 4 1 3 1 2 1 4 2 4 8 1 6 10 Output 24 19 32 -----Note----- The initial array is `[3, 8, 6, 7, 5, 2, 9, 4]`. For the first sum range query `2 1 4`, the sum of elements from index `1` to `4` is `3 + 8 + 6 + 7 = 24`. After the update query `1 3 1`, the array becomes `[3, 8, 1, 7, 5, 2, 9, 4]`. For the second sum range query `2 1 4`, the sum of elements from index `1` to `4` is `3 + 8 + 1 + 7 = 19`. For the third sum range query `2 4 8`, the sum of elements from index `4` to `8` is `7 + 5 + 2 + 9 + 4 = 27`. After the update query `1 6 10`, the array becomes `[3, 8, 1, 7, 5, 10, 9, 4]`.","solution":"class ArrayQueries: def __init__(self, array): self.array = array self.n = len(array) self.tree = [0] * (self.n + 1) for i, val in enumerate(array): self._update_tree(i + 1, val) def _update_tree(self, index, value): while index <= self.n: self.tree[index] += value index += index & -index def _query_tree(self, index): sum_val = 0 while index > 0: sum_val += self.tree[index] index -= index & -index return sum_val def update(self, index, value): current_value = self.sumRange(index, index) diff = value - current_value self._update_tree(index, diff) self.array[index - 1] = value def sumRange(self, left, right): return self._query_tree(right) - self._query_tree(left - 1)"},{"question":"# BACKGROUND: Alex is a new programmer who is learning about arrays and loops. In order to understand these concepts better, Alex has decided to write a simple program that will manipulate arrays in various ways. One of the exercises Alex is working on involves summing up the even numbers in an array while ignoring the odd numbers. Alex has asked for your help to write a function that will take an array of integers and return the sum of all even numbers in the array. # TASK: Write a function that takes as input: ``` - An array of integers. ``` and then returns the sum of all even integers in the array. # EXAMPLES: Input: ``` [1, 2, 3, 4, 5, 6] ``` Output: ``` 12 ``` Input: ``` [7, 8, 10, -2, 0] ``` Output: ``` 16 ``` # NOTES: - If the input array is empty, the function should return 0. - Even numbers are those which are divisible by 2 without a remainder. - The function should handle both positive and negative integers as well as zeroes.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the input array. :param numbers: List of integers :return: Sum of all even integers in the array return sum(num for num in numbers if num % 2 == 0)"},{"question":"Alice loves playing with strings and numbers. She loves to find secret patterns within a string by analyzing the frequencies of characters. Given a string consisting of lowercase English letters, Alice wants to find out which character appears the most frequently. If multiple characters have the same maximum frequency, return the lexicographically smallest one. ---Constraints--- - 1 leq length of the string leq 1000 ---Input--- Input is given from Standard Input in the following format: s ---Output--- Output the character that appears most frequently. In case of a tie, output the lexicographically smallest one. ---Sample Input--- bbaaaccc ---Sample Output--- a In the given string, both \'a\' and \'c\' appear 3 times, which is the highest frequency. Since \'a\' is lexicographically smaller than \'c\', the output is \'a\'.","solution":"def most_frequent_char(s): Finds the most frequent character in the string. In case of a tie, returns the lexicographically smallest one. Parameters: s (str): Input string consisting of lowercase English letters. Returns: str: The most frequently occurring character, or the lexicographically smallest one in case of a tie. from collections import Counter # Count the frequencies of the characters in the string frequency = Counter(s) # Sort characters first by negative frequency (for descending order) and then lexicographically most_frequent = sorted(frequency.items(), key=lambda item: (-item[1], item[0])) # return the character with the highest frequency, which is the first element in the sorted list return most_frequent[0][0]"},{"question":"You are given two arrays temperatures and days of size N, which represent the temperatures on different days and the number of days a person needs to wait until a warmer day respectively. The objective is to determine the temperature list that will be generated after applying the waiting days array. Your input will be: - An array temperatures of size N, where temperatures[i] represents the temperature on the i-th day. - An array days of size N, where days[i] represents the number of days one must wait from the i-th day to find a warmer temperature. You need to generate the resultant temperatures array which contains the temperatures after waiting for the given number of days. Example 1: Input: N = 5 temperatures[] = {30, 40, 50, 60, 70} days[] = {1, 1, 1, 1, 0} Output: result = {40, 50, 60, 70, 70} Explanation: - From the 1st day, after waiting 1 day, the temperature is 40. - From the 2nd day, after waiting 1 day, the temperature is 50. - From the 3rd day, after waiting 1 day, the temperature is 60. - From the 4th day, after waiting 1 day, the temperature is 70. - From the 5th day, there are no more days left so the temperature remains 70. Your Task: You don\'t need to read input or print anything. Your task is to complete the function generateTemperatures() which takes the arrays temperatures[], days[], and its size N as inputs and returns the resultant temperatures array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ temperatures[i] ≤ 100 0 ≤ days[i] < N","solution":"def generateTemperatures(N, temperatures, days): Generates the resultant temperatures list after applying the waiting days array. Parameters: N (int): The size of the temperatures and days arrays. temperatures (list): The list of temperatures. days (list): The list of days to wait for a warmer temperature. Returns: list: The resultant temperatures list after applying the waiting days array. result = [0] * N for i in range(N): wait_days = days[i] if i + wait_days < N: result[i] = temperatures[i + wait_days] else: result[i] = temperatures[i] return result # Example usage: # N = 5 # temperatures = [30, 40, 50, 60, 70] # days = [1, 1, 1, 1, 0] # print(generateTemperatures(N, temperatures, days)) # Output should be: [40, 50, 60, 70, 70]"},{"question":"Michael loves classical music, and to organize his collection, he created a list of symphonies he wants to listen to. He labeled each symphony with an integer, representing the length of the symphony in minutes. However, Michael wants to balance his listening schedule such that no symphony\'s length in his playlist is repeated. You are asked to help Michael by finding the longest consecutive segment of his playlist where no two symphonies have the same length. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of symphonies Michael has in his list. The next line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i represents the length of the i-th symphony in the list. -----Output----- Output a single integer, the length of the longest consecutive segment of the playlist where no two symphonies have the same length. -----Examples----- Input 5 10 20 20 30 40 Output 3 Input 7 1 2 3 4 5 6 7 Output 7 Input 6 5 1 2 3 2 1 Output 4 -----Note----- In the first example, the longest consecutive segment with unique lengths is [20, 30, 40], with a length of 3. In the second example, all symphonies have unique lengths, so the longest segment is the entire array with a length of 7. In the third example, the segment [1, 2, 3, 2] provides the longest segment with unique lengths, although its actual content has repeated numbers, the result is the length considering the first four values before repetition.","solution":"def longest_unique_segment(n, a): Finds the length of the longest consecutive segment of the playlist where no two symphonies have the same length. Parameters: n (int): Number of symphonies. a (list of int): List of symphony lengths. Returns: int: Length of the longest consecutive segment with unique symphony lengths. length_set = set() max_length = 0 start = 0 for end in range(n): while a[end] in length_set: length_set.remove(a[start]) start += 1 length_set.add(a[end]) max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a string consisting of lowercase alphabetical characters. Your task is to compress the string using the following algorithm: 1. Identify sequences of consecutive characters that are the same. 2. Replace each such sequence with the character followed by the number of times it repeats consecutively in the sequence. For example, the string \\"aaabbcccc\\" should be compressed to \\"a3b2c4\\". If a character appears only once consecutively, it should appear alone, without a number, as in the sample \\"abc\\" which should be output as \\"abc\\". Write a function that takes a single string as input and produces the compressed version of that string as output. Input A single string s (1 ≤ |s| ≤ 10^5) containing only lowercase alphabetical characters. Output A single string which is the compressed version of the input string. Examples Input aaabbcccc Output a3b2c4 Input abc Output abc Input aabcccccaaa Output a2bc5a3 Note In the first sample test, the input string contains sequences of \'a\', \'b\', and \'c\' which repeat. Therefore \\"a3b2c4\\" is the compressed form. In the second sample test, every character in the input string appears only once consecutively, so the compressed form remains \\"abc\\". In the third sample test, the input string is compressed by replacing the sequences with appropriate counts, resulting in \\"a2bc5a3\\".","solution":"def compress_string(s: str) -> str: if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 compressed.append(s[-1]) if count > 1: compressed.append(str(count)) return \'\'.join(compressed)"},{"question":"You are given a string consisting of lowercase letters and you need to remove the adjacent duplicate characters repeatedly until no adjacent duplicates are present. Write a function that takes the string input and returns the string after all adjacent duplicates have been removed. -----Input----- The input consists of a single string, s containing only lowercase letters. The length of the string s is at most 10^4. -----Output----- The output should be a single string after all adjacent duplicates have been removed. -----Examples----- Sample Input 1: abbaca Sample Output 1: ca Sample Input 2: azxxzy Sample Output 2: ay","solution":"def remove_adjacent_duplicates(s): stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"You are given an array of integers, where each integer appears an even number of times, except for one integer which appears an odd number of times. Your task is to find that single integer in the array. ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of the array. The second line of each test case contains N space-separated integers. ------ Output ------ For each test case, print a single integer which appears an odd number of times in the array. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^6 ----- Sample Input 1 ------ 3 5 1 2 3 2 1 7 4 5 6 5 4 6 7 9 9 8 7 8 7 6 5 6 5 ----- Sample Output 1 ------ 3 7 9 ----- Explanation 1 ------ Example case 1: The number 3 appears exactly one time. Example case 2: The number 7 appears exactly one time. Example case 3: The number 9 appears exactly one time.","solution":"def find_odd_occurrence(arr): Find the integer in the array that appears an odd number of times. result = 0 for number in arr: result ^= number return result def process_test_cases(test_cases): results = [] for test_case in test_cases: arr = test_case[\'array\'] result = find_odd_occurrence(arr) results.append(result) return results"},{"question":"Given a grid of m x n dimensions, implemented as a list of lists in Python, write a function `maximalRectangle` that finds the largest rectangle containing only 1\'s and returns its area. For example, given the following grid: ``` [ [\\"1\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\"], [\\"1\\", \\"0\\", \\"1\\", \\"1\\", \\"1\\"], [\\"1\\", \\"1\\", \\"1\\", \\"1\\", \\"1\\"], [\\"1\\", \\"0\\", \\"0\\", \\"1\\", \\"0\\"] ] ``` The output should be `6` because the largest rectangle of 1\'s (from (2,0) to (3,4)) has an area of 6. Your function should perform efficiently on large grids and preferably run in O(m * n) time complexity. Aim for a solution using dynamic programming or other optimized algorithms.","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 max_area = 0 n = len(matrix[0]) height = [0] * (n + 1) # extra one for boundary for row in matrix: for i in range(n): height[i] = height[i] + 1 if row[i] == \'1\' else 0 stack = [] for i in range(n + 1): while stack and height[stack[-1]] > height[i]: h = height[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"In this challenge, create a function named **isomorphic_strings** that takes two input strings, **s1** and **s2**, and returns a boolean indicating whether the two strings are isomorphic or not. Two strings are isomorphic if the characters in `s1` can be replaced to get `s2`, while maintaining the original order of characters. No two characters may map to the same character, but a character may map to itself. **Examples:** ```python isomorphic_strings(\\"egg\\", \\"add\\") should return True isomorphic_strings(\\"foo\\", \\"bar\\") should return False isomorphic_strings(\\"paper\\", \\"title\\") should return True isomorphic_strings(\\"ab\\", \\"aa\\") should return False ``` **Constraints:** - You may assume both strings have the same length. - Both input strings will only contain lowercase letters (a-z).","solution":"def isomorphic_strings(s1, s2): Determine if two strings s1 and s2 are isomorphic. if len(s1) != len(s2): return False mapping_s1_to_s2 = {} mapping_s2_to_s1 = {} for c1, c2 in zip(s1, s2): if c1 in mapping_s1_to_s2: if mapping_s1_to_s2[c1] != c2: return False else: mapping_s1_to_s2[c1] = c2 if c2 in mapping_s2_to_s1: if mapping_s2_to_s1[c2] != c1: return False else: mapping_s2_to_s1[c2] = c1 return True"},{"question":"Given an array arr of N integers, write a function that returns an array of integers which are the leaders in the array. A leader is an element which is greater than all the elements to its right side. Example 1: Input: N = 6 Arr[] = {16, 17, 4, 3, 5, 2} Output: [17, 5, 2] Explanation: The leaders are 17, 5, and 2. Example 2: Input: N = 5 Arr[] = {1, 2, 3, 4, 0} Output: [4, 0] Explanation: The leaders are 4 and 0. Your Task: Complete the function findLeaders() which takes an array arr and a single integer n as input parameters and returns a list of integers denoting the leaders. You don\'t need to print the answer or take inputs. The driver will print the returned list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^7 1 <= Arr[i] <= 1000","solution":"def findLeaders(arr, n): Returns an array of integers which are the leaders in the given array. A leader is an element which is greater than all the elements to its right side. leaders = [] max_from_right = arr[-1] leaders.append(max_from_right) for i in range(n-2, -1, -1): # Traverse the array from right to left if arr[i] > max_from_right: leaders.append(arr[i]) max_from_right = arr[i] leaders.reverse() # Reverse the list since we collected leaders from right to left return leaders"},{"question":"You are given an array of integers A_1, A_2, ldots, A_N. For each integer i from 1 to N, define a function g(i) as follows: - g(i) is the maximum sum of a contiguous subarray that contains A_i at least once. Find the maximum value of g(i) for all i. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing one integer — the maximum value of g(i) for all i. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - -|10^9| le A_i le |10^9| for each valid i -----Example Input----- 2 5 1 2 -3 4 5 4 -1 -2 -3 -4 -----Example Output----- 9 -1","solution":"def max_g_i(T, test_cases): def max_sum_containing_each_element(N, A): max_sum_end_at = [A[0]] * N for i in range(1, N): max_sum_end_at[i] = max(A[i], max_sum_end_at[i - 1] + A[i]) max_sum_start_at = [A[-1]] * N for i in range(N - 2, -1, -1): max_sum_start_at[i] = max(A[i], max_sum_start_at[i + 1] + A[i]) max_g_i = float(\'-inf\') for i in range(N): max_g_i = max(max_g_i, max_sum_end_at[i] + max_sum_start_at[i] - A[i]) return max_g_i results = [] for test_case in test_cases: N, A = test_case result = max_sum_containing_each_element(N, A) results.append(result) return results"},{"question":"An online shopping platform keeps a record of the transactions that users make. Each transaction consists of a userID, the productID they purchased, and the amount they spent. The platform wants to be able to generate some summary statistics about the transactions. Your task is to create a function that processes a list of transactions and returns two types of summaries: 1. The total amount spent by each user. 2. The count of purchases for each unique product. Function Description Complete the `processTransactions` function below. `processTransactions(transactions)` has the following parameter: - `transactions`: a list of strings, where each string represents a transaction in the format \\"userID,productID,amount\\". Returns - A dictionary with two keys \\"userSpending\\" and \\"productCount\\": - \\"userSpending\\" should map each userID to the total amount spent by that user. - \\"productCount\\" should map each productID to the count of how many times it was purchased. Input Format The function will receive a list of strings where each string is in the format \\"userID,productID,amount\\". Constraints - The `transactions` list will have at most 10^5 elements. - Each `userID` and `productID` will be a non-empty string with at most length 10. - The `amount` will be a positive integer not exceeding 10^4. - The same userID or productID may appear multiple times. Sample Input [\\"u1,p1,100\\", \\"u2,p2,200\\", \\"u1,p1,150\\", \\"u3,p2,50\\", \\"u1,p3,300\\"] Sample Output { \\"userSpending\\": {\\"u1\\": 550, \\"u2\\": 200, \\"u3\\": 50}, \\"productCount\\": {\\"p1\\": 2, \\"p2\\": 2, \\"p3\\": 1} } Explanation Processing the given transactions list: - For userSpending: - u1 spent 100 + 150 + 300 = 550 - u2 spent 200 - u3 spent 50 - For productCount: - p1 was purchased 2 times - p2 was purchased 2 times - p3 was purchased 1 time","solution":"def processTransactions(transactions): userSpending = {} productCount = {} for transaction in transactions: userID, productID, amount = transaction.split(\',\') amount = int(amount) if userID in userSpending: userSpending[userID] += amount else: userSpending[userID] = amount if productID in productCount: productCount[productID] += 1 else: productCount[productID] = 1 return { \\"userSpending\\": userSpending, \\"productCount\\": productCount }"},{"question":"A large online retailer uses a high-traffic database to maintain records of user transactions. To support reporting and data analysis, they need to frequently count the number of transactions each user has made within a given range of transaction IDs. You are provided with a list of transactions where each transaction is a pair consisting of a user ID and a transaction ID. Given a range of transaction IDs, your task is to count the number of transactions for each user within that range. -----Input----- The first line contains three integers n (1 le n le 2 times 10^5), q (1 le q le 10^5), and m (1 le m le 10^9) where: - n is the number of transactions. - q is the number of queries. - m is the maximum transaction ID. The next n lines contain two integers each, u_i (1 le u_i le 10^9) and t_i (1 le t_i le m) which represent the user ID and the transaction ID respectively. The next q lines contain two integers each, l_j and r_j (1 le l_j le r_j le m) which represent the range of transaction IDs for each query. -----Output----- For each query, output the number of transactions for each user within the range, each user on a new line. Output the results sorted by user ID in ascending order. -----Example----- Input 5 2 100 1 5 2 15 1 25 2 35 3 50 10 30 1 50 Output 1 1 2 1 1 2 2 2 3 1 -----Note----- In the example: - For the first query (10, 30), user 1 has 1 transaction, and user 2 has 1 transaction within the range. - For the second query (1, 50), user 1 has 2 transactions, user 2 has 2 transactions, and user 3 has 1 transaction within the range. This problem tests the ability to handle large datasets and implement efficient algorithms for range-based counting.","solution":"from collections import defaultdict from bisect import bisect_left, bisect_right def preprocess_transactions(transactions): user_transactions = defaultdict(list) for user_id, trans_id in transactions: user_transactions[user_id].append(trans_id) for user_id in user_transactions: user_transactions[user_id].sort() return user_transactions def count_transactions_in_range(user_transactions, l, r): result = [] for user_id in sorted(user_transactions): transactions = user_transactions[user_id] left_index = bisect_left(transactions, l) right_index = bisect_right(transactions, r) count = right_index - left_index if count > 0: result.append((user_id, count)) return result def process_queries(transactions, queries): user_transactions = preprocess_transactions(transactions) results = [] for l, r in queries: result = count_transactions_in_range(user_transactions, l, r) results.append(result) return results"},{"question":"Sara is planning a party and needs to keep track of the guests who have RSVP\'d. She wants to send a personalized greeting to each guest based on their response. Help Sara write a function that takes a dictionary with guest names as keys and their responses (\'yes\' or \'no\') as values, and returns a new dictionary with personalized messages. The messages should be: - `\\"Dear <GuestName>, we\'re excited to see you at the party!\\"` for guests who responded with \'yes\'. - `\\"Dear <GuestName>, sorry to hear you can\'t make it.\\"` for guests who responded with \'no\'. Write a function `personalize_invitations(guests: dict) -> dict` that implements this logic. Examples: ```python personalize_invitations({\\"Alice\\": \\"yes\\", \\"Bob\\": \\"no\\", \\"Charlie\\": \\"yes\\"}) # Output: {\\"Alice\\": \\"Dear Alice, we\'re excited to see you at the party!\\", \\"Bob\\": \\"Dear Bob, sorry to hear you can\'t make it.\\", \\"Charlie\\": \\"Dear Charlie, we\'re excited to see you at the party!\\"} personalize_invitations({\\"David\\": \\"no\\", \\"Eva\\": \\"yes\\"}) # Output: {\\"David\\": \\"Dear David, sorry to hear you can\'t make it.\\", \\"Eva\\": \\"Dear Eva, we\'re excited to see you at the party!\\"} ```","solution":"def personalize_invitations(guests: dict) -> dict: Takes a dictionary with guest names as keys and their responses (\'yes\' or \'no\') as values, and returns a new dictionary with personalized messages. messages = {} for guest, response in guests.items(): if response == \\"yes\\": messages[guest] = f\\"Dear {guest}, we\'re excited to see you at the party!\\" elif response == \\"no\\": messages[guest] = f\\"Dear {guest}, sorry to hear you can\'t make it.\\" return messages"},{"question":"In the magical kingdom of Eldoria, Princess Amelia is planning a grand feast. She has invited N friends, and each friend has precisely one magical number representing the number of dishes they want to eat. To make the feast more interesting, each friend can have dishes with different levels of spice, labeled from 1 to P (1 being the least spicy and P being the most spicy). Princess Amelia has a magical spice mixer that can mix two dishes of the same spice level to create a new dish of the same spice level. She wants to make sure that her friends are served exactly the number of dishes they want, and she can mix the dishes as many times as necessary to achieve this goal. Each friend will receive dishes in ascending order of spice levels. For instance, if a friend wants 3 dishes, they can receive (1 spicy dish, 1 spicy dish, 1 spicy dish) or (1 spicy dish, 2 spicy dishes). Help Princess Amelia decide if she can serve all her friends with the available spices. ------ Input ------ The first line contains an integer T, the number of test cases. For each test case: - The first line contains two integers N and P, where N is the number of friends and P is the highest spice level. - The second line contains N integers representing the number of dishes each friend wants. ------ Output ------ For each test case, print a single line containing \\"Possible\\" if Amelia can serve all her friends, or \\"Not Possible\\" if she cannot. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ P ≤ 100 1 ≤ Q ≤ 100 (the number of dishes each friend wants) ----- Sample Input 1 ------ 2 3 5 1 1 1 2 3 1 1 ----- Sample Output 1 ------ Possible Possible ----- Explanation 1 ------ Example 1: All friends want only one dish and there are enough spice levels to serve them. Example 2: Each friend can be served exactly as per their needs. The second friend wants 3 dishes, we serve them (1 spicy dish, 1 spicy dish, 1 spicy dish). The first friend\'s requirement is met as well.","solution":"def can_serve_friends(T, test_cases): results = [] for t in range(T): N, P = test_cases[t][:2] dishes_wanted = test_cases[t][2] max_dishes_needed = max(dishes_wanted) if max_dishes_needed <= P: results.append(\\"Possible\\") else: results.append(\\"Not Possible\\") return results"},{"question":"In a distant realm, there is a network of enchanted nodes connected by magical paths, where each pair of nodes is connected by exactly one path. The queen of this realm has decreed that she will enhance some of these paths to make travel more efficient throughout her kingdom. Each enhanced path must be unique and can only be specified once. Due to the royal treasury rules, the paths receive a special enchantment level represented by distinct integers from 1 to k, where each number represents the enchantment value of that path (the higher the number, the more potent the enchantment). The enchantress will select paths such that it is possible to travel from any node to any other node via a series of enhanced paths, aiming to use the minimal possible combined enchantment levels. However, there is a twist. The queen\'s rival, a cunning sorcerer, influences the selection process. His goal is to maximize the total combined enchantment level of the selected paths while still ensuring that travel between any two nodes remains possible. For example, if the realm includes five nodes and the queen decides to enhance and label the 7 paths as follows, then the sorcerer will select the paths with the highest enchantment values within the constraints, aiming for the worst-case scenario in minimal cost travel. Your task is to determine the maximum possible total enchantment level of the selected paths. -----Input----- The input consists of a single line containing two integers a (2 leq a leq 200000), which is the number of nodes, and b (a-1 leq b leq frac{a(a-1)}{2}), which is the number of paths to be enhanced. -----Output----- Display the maximum possible total enchantment level of the selected paths given the rules specified. -----Examples----- Sample Input 1: 3 2 Sample Output 1: 3 Sample Input 2: 5 7 Sample Output 2: 25","solution":"def maximum_enchantment_level(a, b): Determine the maximum possible total enchantment level of the selected paths given that we need to enhance exactly `b` paths to ensure all `a` nodes are connected. # Sum the largest b numbers max_enchantment = sum(range(b, 0, -1)) return max_enchantment"},{"question":"A binary string is a string consisting only of the characters \'0\' and \'1\'. A binary substring is any substring of a binary string that consists of only \'0\'s or only \'1\'s. For example, the binary string \\"1100011\\" contains the binary substrings \\"11\\", \\"000\\", and \\"11\\". Let\'s define the maximum binary length of the string as the length of the longest binary substring within the string. For instance, the maximum binary length of \\"1100011\\" is 3 because the longest binary substring is \\"000\\". You are given a binary string s. Your goal is to determine the maximum binary length of the string. Input The first line contains an integer n (1 ≤ n ≤ 100 000) — the length of the binary string s. The second line contains the binary string s that consists of exactly n characters, where each character is either \'0\' or \'1\'. Output Print the integer representing the maximum binary length of the string s. Examples Input 7 1100011 Output 3 Input 10 1110000001 Output 6 Note In the first example, the longest binary substring is \\"000\\" with length 3. In the second example, the longest binary substring is \\"000000\\" with length 6.","solution":"def max_binary_length(n, s): Returns the maximum binary length of the string s. Parameters: n (int): Length of the binary string. s (str): The binary string. Returns: int: The maximum binary length of the string. if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if s[i] == s[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"John is organizing some sports events at his school, and he needs to know how many teams he can form from the given students. Each team must have exactly k students and he has n students in total. Additionally, each student can only be part of one team. John wants to know how many full teams can he form and how many students will be left without a team. Example n = 20 k = 3 John can form 6 full teams, each with 3 students, and will have 2 students left without a team. Function Description Complete the function `formTeams` in the editor below. It should return a tuple of two integers: the number of full teams and the number of students left without a team. `formTeams` has the following parameter(s): - `int n`: the total number of students - `int k`: the number of students per team Returns - `tuple`: a tuple containing two integers: the number of full teams and the number of students left without a team Input Format Two space-separated integers n and k. Constraints 1 leq n, k leq 10^9 Output Format A single line containing two integers separated by a space: the number of full teams and the number of students left without a team. Sample Input ``` 20 3 ``` Sample Output ``` 6 2 ``` Explanation For n=20 students and k=3 students per team: - 6 full teams can be formed (6 * 3 = 18 students) - 2 students will be left without a team (20 - 18 = 2 students left)","solution":"def formTeams(n, k): Returns the number of full teams and the number of students left without a team. Parameters: n (int): Total number of students k (int): Number of students per team Returns: tuple: A tuple containing the number of full teams and the number of students left without a team full_teams = n // k leftover_students = n % k return (full_teams, leftover_students)"},{"question":"A farmer wants to fence a rectangular area using a certain length of wire. Given the perimeter of the rectangle and one of its dimensions (either length or width), write a program to compute the other dimension. Input: The input consists of two lines: - The first line contains an integer, `P`, which represents the perimeter of the rectangle. - The second line contains an integer, `L`, which represents one of the dimensions of the rectangle (either length or width). Output: Print an integer which represents the other dimension of the rectangle. # Example Input 24 5 Output 7 Explanation: For a given perimeter `P = 24` and length `L = 5`, you can calculate the width `W` as follows: Perimeter `P = 2 * (L + W)` Rearranging the equation to solve for `W`, we get: `W = P / 2 - L` So, `W = 24 / 2 - 5 = 12 - 5 = 7`.","solution":"def compute_other_dimension(P, L): Given the perimeter P and one dimension L of a rectangle, this function computes and returns the other dimension. return P // 2 - L"},{"question":"Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. Each house in the list is arranged linearly, and adjacent houses have security systems connected, so if two adjacent houses are broken into on the same night, the police will be alerted. Example 1: Input: nums = [2,3,2] Output: 3 Explanation: Robbing the second house is the optimal strategy for maximum profit. Example 2: Input: nums = [1,2,3,1] Output: 4 Explanation: Robbing the first and third houses gives the maximum amount of money without triggering the alarms. Example 3: Input: nums = [0] Output: 0 Explanation: There are no houses to rob, hence no money can be robbed. Constraints: 0 <= nums.length <= 100 0 <= nums[i] <= 400","solution":"def rob(nums): Returns the maximum amount of money that can be robbed without alerting the police. Each house has a connected security system, so two adjacent houses cannot be robbed. if not nums: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return max(nums) def rob_line(houses): prev1, prev2 = 0, 0 for house in houses: temp = prev1 prev1 = max(prev2 + house, prev1) prev2 = temp return prev1 # Either we rob houses from 0 to n-2 or from 1 to n-1 return max(rob_line(nums[:-1]), rob_line(nums[1:]))"},{"question":"Given a sorted linked list, write a function to remove all duplicates such that each element appears only once. The modified linked list should also be sorted. Example 1: Input: 1 -> 1 -> 2 Output: 1 -> 2 Example 2: Input: 1 -> 1 -> 2 -> 3 -> 3 Output: 1 -> 2 -> 3 Your Task: The task is to complete the function removeDuplicates() which takes a sorted linked list as an input and returns the head of the modified linked list with all duplicates removed. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= T <= 100 0 <= N <= 10^4","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeDuplicates(head): Removes duplicates from a sorted linked list. :param head: ListNode - The head of the sorted linked list. :return: ListNode - The head of the modified linked list with duplicates removed. current = head while current and current.next: if current.val == current.next.val: current.next = current.next.next else: current = current.next return head def list_to_linked_list(lst): Utility function to convert a list to a linked list dummy = ListNode(0) tail = dummy for number in lst: tail.next = ListNode(number) tail = tail.next return dummy.next def linked_list_to_list(head): Utility function to convert a linked list to a list lst = [] while head: lst.append(head.val) head = head.next return lst"},{"question":"Alice is playing a game with a string S of lowercase English letters. In this game, she can perform the following operation as many times as she wants: choose any two distinct characters in the string and swap them. The goal is to make the string as lexicographically small as possible. Your task is to help Alice by determining the lexicographically smallest string she can obtain after performing any number of swaps. # Input The input is given in the following format: ``` S ``` where `S` is a non-empty string of lowercase English letters. The length of `S` (i.e., |S|) does not exceed 100,000. # Output Print a single line containing the lexicographically smallest string possible after any number of swaps. # Examples Example 1 **Input:** ``` banana ``` **Output:** ``` aaabnn ``` Example 2 **Input:** ``` acbd ``` **Output:** ``` abcd ``` # Constraints * 1 leq |S| leq 100,000 # Explanation Alice can repeatedly swap any two distinct characters to arrange them in non-decreasing order. The smallest lexicographical order of the string is simply the sorted version of the string S.","solution":"def lexicographically_smallest_string(S): Returns the lexicographically smallest string possible by sorting the characters of the string. return \'\'.join(sorted(S))"},{"question":"Given a string of digits, write a function to determine the minimal number of deletions needed to make the string\'s digits strictly increasing from left to right. For this problem, strictly increasing means each subsequent digit must be greater than the previous one. Example 1: Input: \\"132\\" Output: 1 Explanation: One possible way to achieve the result is to delete the \'3\', resulting in the string \\"12\\", which is strictly increasing. Example 2: Input: \\"54321\\" Output: 4 Explanation: To make the string strictly increasing, we can delete the digits \'5\', \'4\', \'3\', and \'2\', resulting in the string \\"1\\". Example 3: Input: \\"12345\\" Output: 0 Explanation: The string is already strictly increasing, so no deletions are needed. Note: The string length will be in the range [1, 1000].","solution":"def min_deletions_to_increasing(s): Given a string of digits, determines the minimal number of deletions needed to make the string\'s digits strictly increasing from left to right. Parameters: s (str): A string of digits. Returns: int: The minimal number of deletions needed. n = len(s) if n <= 1: return 0 # dp array to store the length of the longest increasing subsequence ending at each position lis = [1] * n # Calculate the length of the longest increasing subsequence for i in range(1, n): for j in range(i): if s[i] > s[j]: lis[i] = max(lis[i], lis[j] + 1) # The minimum deletions needed is the length of the string minus the length of the LIS return n - max(lis)"},{"question":"Given an array of integers, you are required to determine the number of distinct integers in the array. ------ Input ------ The first line contains a single integer n (1 ≤ n ≤ 100) – the size of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) – the elements of the array. ------ Output ------ Output a single integer – the number of distinct elements in the given array. ----- Sample Input 1 ------ 5 1 2 2 3 4 ----- Sample Output 1 ------ 4 ----- Sample Input 2 ------ 6 5 5 5 5 5 5 ----- Sample Output 2 ------ 1","solution":"def count_distinct_integers(n, arr): Returns the number of distinct integers in the array. Parameters: n (int): Size of the array. arr (list of int): The array elements. Returns: int: The number of distinct elements in the array. return len(set(arr))"},{"question":"Given an integer array `nums` and an integer `target`, return the number of subarrays where the sum of elements is exactly `target`. A subarray is defined as a contiguous block of elements in the original array. For example, given `nums = [1, 1, 1]` and `target = 2`, there are 2 subarrays `[1, 1]` with sum 2. Constraints: * 1 leq nums.length leq 2 times 10^4 * -1000 leq nums[i] leq 1000 * -10^9 leq target leq 10^9 Input Input is given from standard input in the following format: - The first line contains an integer `n`, the number of elements in the array. - The second line contains `n` space-separated integers representing the elements of the array `nums`. - The third line contains the integer `target`. Output Return the number of subarrays whose sum is exactly `target`. Examples Input 3 1 1 1 2 Output 2 Input 4 1 2 3 4 3 Output 2","solution":"def subarray_sum(nums, target): Returns the number of subarrays where the sum of elements is exactly `target`. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in nums: current_sum += num if current_sum - target in prefix_sums: count += prefix_sums[current_sum - target] if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count"},{"question":"Write a function called `longest_balanced_substring` that accepts a string containing only the characters \'A\' and \'B\'. The function should return the length of the longest substring that contains an equal number of \'A\'s and \'B\'s. For example, given the string `\'AABB\'`: - The entire string `\'AABB\'` has 2 \'A\'s and 2 \'B\'s, so the longest balanced substring length is 4. - For the string `\'AAABB\'`, the longest balanced substring is `\'AABB\'`, which has length 4. - For the string `\'ABABAB\'`, the entire string is already balanced, so the output is 6. You can assume the input string will always be non-empty and will contain only the characters \'A\' and \'B\'. Write your function in Python: ```python def longest_balanced_substring(s: str) -> int: # Your code here ```","solution":"def longest_balanced_substring(s: str) -> int: max_len = 0 count = 0 index_map = {0: -1} # Dictionary to store first occurrence of each count value for i, char in enumerate(s): if char == \'A\': count += 1 else: count -= 1 if count in index_map: max_len = max(max_len, i - index_map[count]) else: index_map[count] = i return max_len # Example usage: # print(longest_balanced_substring(\'AABB\')) # Output: 4 # print(longest_balanced_substring(\'AAABB\')) # Output: 4 # print(longest_balanced_substring(\'ABABAB\')) # Output: 6"},{"question":"# Task Alice loves to play with sequences of numbers and she tends to find interesting patterns in them. Recently, she came across a Fibonacci sequence and she wanted to verify if a given sequence is a subsequence of the Fibonacci sequence. Your task is to write a function that checks if a given sequence `s` of integers is a subsequence of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - `F(0) = 0` - `F(1) = 1` - `F(n) = F(n-1) + F(n-2)` for `n > 1` A sequence `s` is a subsequence of the Fibonacci sequence if it appears in the same order but not necessarily consecutively. # Input/Output - `[input]` array of integers `s` The sequence of integers to be checked. 0 ≤ |s| ≤ 20. 0 ≤ s[i] ≤ 10^9. - `[output]` a boolean value Return `True` if the array `s` is a subsequence of the Fibonacci sequence, otherwise return `False`. # Example For `s = [1, 3, 7]`, the output should be `True`. The Fibonacci sequence is `0, 1, 1, 2, 3, 5, 8, 13, ...`. The array `[1, 3, 7]` appears in order as a subsequence within the sequence. For `s = [4, 6, 9]`, the output should be `False`. The sequence `[4, 6, 9]` does not appear in the Fibonacci sequence. For `s = [2, 5, 13]`, the output should be `True`. The sequence `[2, 5, 13]` appears in the Fibonacci sequence as `0, 1, 1, 2, 3, 5, 8, 13, ...`.","solution":"def is_subsequence_of_fibonacci(s): if not s: return True # Generate a sufficient amount of Fibonacci numbers fib_numbers = [0, 1] while fib_numbers[-1] < max(s): fib_numbers.append(fib_numbers[-1] + fib_numbers[-2]) # Check if s is a subsequence of fib_numbers fib_idx = 0 for num in s: while fib_idx < len(fib_numbers) and fib_numbers[fib_idx] != num: fib_idx += 1 if fib_idx == len(fib_numbers): return False fib_idx += 1 return True"},{"question":"Write a function `find_longest_path` that takes in a dictionary representing a directed acyclic graph (DAG) and returns the length of the longest path in the graph. The dictionary keys represent nodes, and the values are lists of nodes that the key node has a directed edge towards. Example: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\', \'E\'], \'C\': [\'F\'], \'D\': [], \'E\': [\'F\'], \'F\': [] } print(find_longest_path(graph)) # Output: 3 (A -> B -> E -> F or A -> C -> F or A -> B -> D -> F) ``` Here, the `find_longest_path` function should identify the longest path from any starting node to any ending node. Note that the nodes and edges in the graph are represented as strings, and the graph is guaranteed to be acyclic. **Constraints:** - The input graph will have at most 1000 nodes. - Each node will have at most 10 edges. - The lengths of paths are positive integers.","solution":"def find_longest_path(graph): Function to find the longest path in a directed acyclic graph (DAG). :param graph: Dictionary representing the graph where keys are nodes and values are lists of directed edges. :return: Length of the longest path in the graph. def topological_sort(graph): visited = {} stack = [] def dfs(node): if node not in visited: visited[node] = True for neighbour in graph[node]: dfs(neighbour) stack.append(node) for node in graph: if node not in visited: dfs(node) return stack stack = topological_sort(graph) length = {node: float(\'-inf\') for node in graph} length[stack[-1]] = 0 while stack: node = stack.pop() if length[node] != float(\'-inf\'): for neighbour in graph[node]: if length[neighbour] < length[node] + 1: length[neighbour] = length[node] + 1 return max(length.values()) graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\', \'E\'], \'C\': [\'F\'], \'D\': [], \'E\': [\'F\'], \'F\': [] } print(find_longest_path(graph)) # Output: 3"},{"question":"Consider an undirected graph with N nodes and M edges, where each edge has a weight associated with it. A graph is considered \\"special\\" if there exists a path between any two nodes such that the sum of the weights of the edges in the path is less than or equal to a given value K. Your task is to determine if the given graph is \\"special\\" and output the path that satisfies the condition if it exists. Input The first line of input contains three integers N (1 ≤ N ≤ 1000), M (1 ≤ M ≤ 2000), and K (1 ≤ K ≤ 10^6), representing the number of nodes, the number of edges, and the maximum allowable weight sum for a path between any two nodes, respectively. The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), representing an edge between nodes u and v with weight w. Output If the graph is \\"special,\\" print \\"YES\\" followed by a path from node 1 to node N (both inclusive) within the weight limit K. If there are multiple paths that meet the criteria, print any one of them. If the graph is not \\"special,\\" print \\"NO.\\" Examples Input 4 4 10 1 2 3 2 3 4 3 4 2 1 4 7 Output YES 1 2 3 4 Input 3 3 2 1 2 1 2 3 3 1 3 4 Output NO Note Explanation for the sample input/output #1 The graph is special because there is a path from node 1 to node 4 with a total weight of 10 or less. One possible path is 1 -> 2 -> 3 -> 4 with a total weight of 3 + 4 + 2 = 9. Explanation for the sample input/output #2 The graph is not special because there is no path from node 1 to node 3 with a total weight of 2 or less.","solution":"import heapq def is_special_graph(N, M, K, edges): Determines if the given graph is \\"special\\" and returns the path that satisfies the condition if it exists. :param N: Number of nodes :param M: Number of edges :param K: Maximum allowable weight sum for a path :param edges: List of edges where each edge is represented as (u, v, w) :return: A tuple (is_special, path) where is_special is a boolean indicating if the graph is special, and path is a list of nodes representing the path from node 1 to node N within the weight limit K. # Create adjacency list for the graph graph = {i: [] for i in range(1, N + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(source): # Using a min-heap priority queue to implement Dijkstra\'s algorithm pq = [(0, source, [])] # (current_weight, current_node, path) visited = set() while pq: current_weight, current_node, path = heapq.heappop(pq) # If we reach node N, return the path if current_node == N: return (current_weight, path + [current_node]) # If current node is already visited, skip it if current_node in visited: continue # Mark current node as visited visited.add(current_node) path = path + [current_node] # Explore neighbors for neighbor, weight in graph[current_node]: if neighbor not in visited and current_weight + weight <= K: heapq.heappush(pq, (current_weight + weight, neighbor, path)) return (float(\'inf\'), []) # If no path is found # Run Dijkstra\'s algorithm from node 1 min_weight, path = dijkstra(1) if min_weight <= K: return \\"YES\\", path else: return \\"NO\\", [] # Example usage: # N, M, K = 4, 4, 10 # edges = [(1, 2, 3), (2, 3, 4), (3, 4, 2), (1, 4, 7)] # print(is_special_graph(N, M, K, edges)) # Output: (\'YES\', [1, 2, 3, 4])"},{"question":"The kingdom of Maahishmati is building a new watchdog robot named “GuardX”. This robot patrols the kingdom in a set rectangular area, moving forward and backward between two points. Due to the kingdom\'s hilly terrain, the robot\'s battery consumption varies but remains constant along each segment of its path. Your task is to determine if the robot can patrol this rectangular path with a given battery capacity. The robot starts at point (0, 0) and moves to point (X, 0), then to point (X, Y), and finally returns to (0, 0) tracing back the same path. Calculate whether the robot can complete its patrol given its battery consumption rate per kilometer and its total battery capacity. ------ Input Format ------ The first line of input consists of three space-separated integers X, Y, and B representing: - X: the x-coordinate of the farthest point on the path in the eastward direction. - Y: the y-coordinate of the farthest point on the path in the northward direction. - B: the robot\'s total battery capacity in mAh (milliampere-hour). The second line of input consists of a single integer C which indicates the robot\'s battery consumption rate in mAh per kilometer (mAh/km). ------ Output Format ------ Generate one line output saying \\"PATROL POSSIBLE\\" if the robot’s battery can last through the entire patrol, or \\"PATROL NOT POSSIBLE\\" if the battery will run out before completing the patrol. ------ Constraints ------ 1 ≤ X, Y, C ≤ 100 1 ≤ B ≤ 1000 ------ Sample Input 1 ------ 3 4 140 5 ------ Sample Output 1 ------ PATROL POSSIBLE ------ Explanation 1 ------ For the first example, the robot needs to patrol a path that forms a right-angled triangle with vertices at (0, 0), (3, 0), (3, 4), and then back to (0,0). The total distance is twice the perimeter of this triangle: - From (0,0) to (3,0): 3 km - From (3,0) to (3,4): 4 km - From (3,4) to (0,0): 5 km (as it forms a 3-4-5 right triangle) Total distance to patrol = 2 * (3 + 4 + 5) = 24 km Battery consumption = 24 km * 5 mAh/km = 120 mAh Since the battery capacity is 140 mAh, which is greater than the required 120 mAh, the patrol is possible. ------ Sample Input 2 ------ 6 8 150 10 ------ Sample Output 2 ------ PATROL NOT POSSIBLE ------ Explanation 2 ------ For the second example, the total distance required to patrol is twice the perimeter of the 6-8-10 triangle path: - From (0,0) to (6,0): 6 km - From (6,0) to (6,8): 8 km - From (6,8) to (0,0): 10 km (as it forms a 6-8-10 right triangle) Total distance to patrol = 2 * (6 + 8 + 10) = 48 km Battery consumption = 48 km * 10 mAh/km = 480 mAh Since the battery capacity is only 150 mAh, which is less than the required 480 mAh, the patrol is not possible.","solution":"def can_patrol(X, Y, B, C): Determines if the robot can patrol the rectangular area with given battery capacity. Parameters: X (int): x-coordinate of the farthest point. Y (int): y-coordinate of the farthest point. B (int): battery capacity in mAh. C (int): battery consumption rate in mAh per km. Returns: str: \\"PATROL POSSIBLE\\" if the robot can complete the patrol, else \\"PATROL NOT POSSIBLE\\" # Calculating the total distance of the patrol path total_distance = 2 * (X + Y + ((X**2 + Y**2) ** 0.5)) # Calculating the total battery consumption total_battery_consumption = total_distance * C # Determining if the patrol is possible if total_battery_consumption <= B: return \\"PATROL POSSIBLE\\" else: return \\"PATROL NOT POSSIBLE\\""},{"question":"Given an array of integers and a positive integer k, determine the number of pairs (i, j) such that 1 leq i < j leq n and the difference between the elements at these positions is exactly k. -----Input----- The first line contains two integers n and k (1 leq n leq 10^6, 1 leq k leq 10^9). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). -----Output----- Output the number of pairs (i, j) such that a_j - a_i = k. -----Examples----- Sample Input: 5 2 1 5 3 4 2 Sample Output: 3 Explanation: The required pairs are (1, 3), (1, 5), and (4, 3).","solution":"def count_pairs_with_difference(arr, k): Counts the number of pairs (i, j) such that a_j - a_i = k. Parameters: arr (list): The list of integers. k (int): The difference we are looking for between pairs. Returns: int: The number of valid pairs. count = 0 seen = set() for num in arr: if num + k in seen: count += 1 if num - k in seen: count += 1 seen.add(num) return count"},{"question":"You are given two strings, s and t, both consisting of lowercase English letters. Your task is to determine if string t is a subsequence of string s. A string t is a subsequence of a string s if t can be derived from s by deleting some or no characters without changing the order of the remaining characters. -----Input----- The input consists of multiple test cases. The first line contains a single integer q (1 le q le 10^4) — the number of test cases. The descriptions of the test cases follow. Each of the next q lines contains two strings s and t (1 le |s|, |t| le 10^5). It is guaranteed that the sum of all the lengths of s and t over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print \\"YES\\" if t is a subsequence of s, otherwise print \\"NO\\". -----Examples----- Input 5 abcde ace abcde aec abc abc abc cba abcde de Output YES NO YES NO YES -----Explanation----- In the first test case, string t=\\"ace\\" can be found in s=\\"abcde\\" by deleting \'b\' and \'d\', and the remaining characters \'a\', \'c\', and \'e\' are still in the same order as in t. In the second test case, s=\\"abcde\\" cannot be transformed into t=\\"aec\\" due to the changing order of characters. The remaining explanations follow the same logic.","solution":"def is_subsequence(s, t): Returns \'YES\' if t is a subsequence of s, otherwise \'NO\'. it = iter(s) for char in t: if char not in it: return \'NO\' return \'YES\' def process_queries(queries): Processes the given queries and returns the results for each query. results = [] for s, t in queries: results.append(is_subsequence(s, t)) return results"},{"question":"In a remote village, there are N houses arranged in a row, numbered from 1 to N. Each house has an associated value, representing the amount of gold stored in it. A thief plans to steal gold from these houses. However, the thief cannot steal from two consecutive houses, as it would alert the inhabitants of the village. Given the values associated with each house, determine the maximum amount of gold the thief can steal without stealing from two consecutive houses. Write a function `max_gold(N: int, values: List[int]) -> int` that takes in: - An integer N, the number of houses. - A list of integers `values` of size N where the i^{th} element represents the amount of gold stored in the i^{th} house. Your function should return an integer, the maximum amount of gold the thief can steal without alerting the villagers. # Input Format - The first line contains an integer, N, the number of houses. - The second line contains N space-separated integers representing the values. # Output Format - Output a single integer, the maximum amount of gold the thief can steal. # Constraints - 1 leq N leq 10^6 - 0 leq text{values}[i] leq 10^4 # Example Input ``` 5 3 2 5 10 7 ``` # Example Output ``` 15 ``` # Explanation For the given example, the thief can steal gold in the following manner: - Steal from house 1 (3 gold) and house 4 (10 gold), totaling 13 gold. - Steal from house 2 (2 gold) and house 4 (10 gold), totaling 12 gold. - Steal from house 1 (3 gold), house 3 (5 gold), and house 5 (7 gold), totaling 15 gold. The maximum gold that can be stolen without alerting the villagers is 15. Hence, the output is 15.","solution":"from typing import List def max_gold(N: int, values: List[int]) -> int: if N == 0: return 0 if N == 1: return values[0] dp = [0] * N dp[0] = values[0] dp[1] = max(values[0], values[1]) for i in range(2, N): dp[i] = max(dp[i - 1], dp[i - 2] + values[i]) return dp[N - 1]"},{"question":"You have been hired to develop an inventory management system for a warehouse. The warehouse has a series of shelves arranged in a linear fashion, each shelf containing a certain number of items. The shelves are numbered from 0 to N-1. The warehouse managers have a specific way they want to retrieve items from the shelves. For any given query, they need to find the sum of items from shelf i to shelf j (inclusive). Since there can be multiple such queries in a day, the system needs to respond to each query efficiently. To build this system, you are required to implement a solution that pre-processes the data so that the sum of items between any two shelves can be obtained quickly. ------ Input ------ The first line of the input contains two integers N and Q, the number of shelves and the number of queries, respectively. The second line contains N integers, representing the number of items on each shelf. Each of the next Q lines contains two space-separated integers, i and j, representing a query for the sum of items from shelf i to shelf j (inclusive). ------ Output ------ For each query, output a single line containing the sum of items from shelf i to shelf j. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 0 ≤ i ≤ j ≤ N-1 0 ≤ text{number of items on any shelf} ≤ 10^4 ------ Example ------ Input: 5 3 2 3 7 1 6 0 2 1 3 2 4 Output: 12 11 14 ------ Explanation ------ For the first query (0, 2), the sum of items on shelves 0, 1, and 2 is 2 + 3 + 7 = 12. For the second query (1, 3), the sum of items on shelves 1, 2, and 3 is 3 + 7 + 1 = 11. For the third query (2, 4), the sum of items on shelves 2, 3, and 4 is 7 + 1 + 6 = 14. Your task is to write a program that efficiently calculates the sum of items for each query.","solution":"def preprocess_items(items): Preprocess the items to create prefix sums. prefix_sums = [0] * (len(items) + 1) for i in range(len(items)): prefix_sums[i + 1] = prefix_sums[i] + items[i] return prefix_sums def query_sum(prefix_sums, i, j): Query the sum of items from shelf i to shelf j (inclusive). return prefix_sums[j + 1] - prefix_sums[i] def handle_queries(n, q, items, queries): Handle the queries and return a list of results. prefix_sums = preprocess_items(items) results = [] for i, j in queries: results.append(query_sum(prefix_sums, i, j)) return results"},{"question":"Write a function ```reverseWords``` that takes a sentence as input and returns a new sentence with the words in reverse order. Example: ```\\"the sky is blue\\" -> \\"blue is sky the\\"```","solution":"def reverseWords(sentence): Returns a new sentence with the words in reverse order. :param sentence: A string representing the sentence :return: A new string with words in the reverse order words = sentence.split() reversed_words = words[::-1] reversed_sentence = \\" \\".join(reversed_words) return reversed_sentence"},{"question":"You are given a sequence of n integers and an integer k. You need to answer a series of queries. Each query can be one of the following types: 1. Increment the value at index i by x. 2. Find the sum of the values in a given subsequence from index l to index r, inclusive. Implement a data structure that efficiently supports these operations. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). The third line contains a single integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines contains a query of one of the following two types: - \\"1 i x\\" (1 ≤ i ≤ n, -10^9 ≤ x ≤ 10^9) which means increment the value at index i by x. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n) which means find the sum of the values from index l to index r, inclusive. Output For each query of the second type, output the sum of the subsequence in a new line. Example Input 5 3 2 1 4 5 4 2 1 3 1 2 3 2 1 3 2 1 5 Output 6 9 18 Note After processing the queries, the state of the sequence evolves as follows: - Initial state: [3, 2, 1, 4, 5] - After the first query (2 1 3): The sum of the first three elements is 3 + 2 + 1 = 6. - After the second query (1 2 3): The element at index 2 is incremented by 3, so the sequence becomes [3, 5, 1, 4, 5]. - After the third query (2 1 3): The sum of the first three elements is now 3 + 5 + 1 = 9. - After the fourth query (2 1 5): The sum of all elements is 3 + 5 + 1 + 4 + 5 = 18.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def initialize_fenwick_tree(arr): n = len(arr) fenwick_tree = FenwickTree(n) for i in range(n): fenwick_tree.update(i + 1, arr[i]) return fenwick_tree def process_queries(n, arr, queries): fenwick_tree = initialize_fenwick_tree(arr) results = [] for query in queries: if query[0] == 1: _, i, x = query fenwick_tree.update(i, x) elif query[0] == 2: _, l, r = query sum_range = fenwick_tree.query(r) - fenwick_tree.query(l - 1) results.append(sum_range) return results"},{"question":"# Longest Increasing Subsequence Given a list of integers, write a function to calculate the length of the longest increasing subsequence. A subsequence is derived from the original list by deleting some or none of the elements without changing the order of the remaining elements. An increasing subsequence consists of elements that increase in value. For example, in the list [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], so the function should return 4. Write a function `longest_increasing_subsequence(arr: List[int]) -> int` that implements this logic. # Sample Input ```python [10, 9, 2, 5, 3, 7, 101, 18] ``` # Sample Output ```python 4 ``` # Notes - The function should efficiently handle lists containing up to 10^3 elements. - Pay attention to edge cases, such as an empty list or lists with all elements identical.","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Anna owns a small store and is currently trying to organize her inventory. She has a list of `n` products with their prices, and she wants to identify those products that have a price less than or equal to a given value `v`. More specifically, she wants to determine the total number of distinct prices among those products that do not exceed `v`. Can you help Anna count the number of distinct prices that are less than or equal to the given value `v`? -----Input----- The first line of the input contains two integers `n` and `v` (1 ≤ n ≤ 10^5, 1 ≤ v ≤ 10^4) — the number of products and the maximum price Anna is interested in. The second line contains a sequence of `n` integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^4), representing the prices of the products. -----Output----- Print the number of distinct prices among the products that are less than or equal to `v`. -----Examples----- Input 5 10 8 4 10 2 8 Output 4 Input 7 15 16 22 15 15 10 5 9 Output 4 -----Note----- In the first test case, the distinct prices less than or equal to 10 are {2, 4, 8, 10}, so the output is 4. In the second test case, the distinct prices less than or equal to 15 are {5, 9, 10, 15}, so the output is 4.","solution":"def count_distinct_prices(n, v, prices): Returns the count of distinct product prices that are less than or equal to v. distinct_prices = set() for price in prices: if price <= v: distinct_prices.add(price) return len(distinct_prices)"},{"question":"You are provided with a string representing a list of tokens of size N separated by commas. Your task is to determine the number of unique tokens in the list and then, for each unique token, count its occurrences and print them in the order they first appeared in the input string. Input Format The first and only line contains a string of N tokens separated by commas. Each token consists of lowercase letters only. Constraints 1leq Nleq1000 Each token consists of lowercase letters only. Output Format Print the number of unique tokens. Then, for each unique token, print the token followed by its count on a new line. Sample Input 0 apple,banana,apple,orange,banana,apple Sample Output 0 3 apple 3 banana 2 orange 1 Explanation 0 In the given example, there are three unique tokens: \\"apple\\", \\"banana\\" and \\"orange\\". \\"apple\\" appears 3 times, \\"banana\\" appears 2 times and \\"orange\\" appears 1 time. The output order corresponds to the first appearance order of the tokens in the input string.","solution":"def count_unique_tokens(token_string): Returns the number of unique tokens and their counts in the order they first appeared. Params: token_string (str): A string representing a list of tokens separated by commas Returns: list: A list of strings where the first element is the number of unique tokens and the rest are formatted strings of each unique token followed by its count tokens = token_string.split(\',\') token_count = {} unique_tokens = [] for token in tokens: if token not in token_count: unique_tokens.append(token) token_count[token] = token_count.get(token, 0) + 1 result = [str(len(unique_tokens))] for token in unique_tokens: result.append(f\\"{token} {token_count[token]}\\") return result"},{"question":"In the magical land of Wonderland, there is a long, enchanted garden with a row of flowers. Each flower has a certain beauty value, represented by an integer. The beauty of the garden can be enhanced by selecting a continuous subarray of flowers and picking them. Cheshire Cat, who is very fond of beautiful gardens, wants to know the maximum possible beauty value of any subarray. Your task is to help Cheshire Cat calculate this maximum beauty value for each garden. Input The first line of input contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of flowers in the garden. The second line contains N space-separated integers, where each integer represents the beauty value of a flower. Output For each test case, output an integer representing the maximum possible beauty value of any subarray from the garden. Constraints 1 <= T <= 100 1 <= N <= 10^5 -10^6 <= beauty value <= 10^6 Example Input: 1 5 -1 2 3 -2 5 Output: 8 Explanation For the example given above, the maximum beauty value subarray is [2, 3, -2, 5] which sums up to 8.","solution":"def max_beauty_value_of_subarray(T, test_cases): results = [] for i in range(T): N, beauties = test_cases[i] current_max = total_max = beauties[0] for beauty in beauties[1:]: current_max = max(beauty, current_max + beauty) total_max = max(total_max, current_max) results.append(total_max) return results"},{"question":"Story In the world of DNA sequencing, one of the fundamental problems is finding patterns within genetic material. Scientists often need to determine whether a smaller DNA sequence (a \\"substring\\") is contained within a larger one. This is crucial for tasks such as identifying genes, studying mutations, and understanding evolutionary relationships. As an eager bioinformatics engineer, your task is to develop a tool that can efficiently search for DNA sequences within a given DNA strand. Specifically, you will write a function to determine if a target DNA sequence is present as a contiguous substring within a given DNA string. Exercise You are to write a function `dna_sequence_search(dna, target)` that takes two input strings, `dna` and `target`, representing the DNA string and the target sequence, respectively. The function should return a boolean indicating whether the target sequence appears in the DNA string. Both the `dna` and `target` strings will only contain characters \'A\', \'C\', \'G\', and \'T\', representing the nucleotide bases. # Example ```python dna_sequence_search(\\"ACGTACGTGACG\\", \\"GACG\\") # should return True dna_sequence_search(\\"ACGTACGTGACG\\", \\"GTAC\\") # should return True dna_sequence_search(\\"ACGTACGTGACG\\", \\"TGC\\") # should return False dna_sequence_search(\\"ACGTACGTGACG\\", \\"ACGTG\\") # should return True ``` Note - The function should be case-sensitive; \'A\' is not equivalent to \'a\'. - This is a simple string search problem. Using Python\'s built-in functions for string searching is both acceptable and encouraged for this task. Good luck and happy coding! PS: Make sure to consider the edge cases, such as empty strings or very long DNA sequences.","solution":"def dna_sequence_search(dna, target): Determines whether the target DNA sequence is a contiguous substring of the DNA string. Parameters: - dna (str): the main DNA string - target (str): the target sequence to search for Returns: - bool: True if the target sequence is found within the DNA string, otherwise False return target in dna"},{"question":"You are tasked with managing a system of pipelines and valves in a chemical plant. The pipelines form a tree structure, where each edge has a direction from a parent to a child. There are `n` valves, each located at a unique intersection (node) in the tree. The root is valve 1. Each valve can be either open (state 1) or closed (state 0). Initially, all valves are closed. Your goal is to open all the valves, but you need to do it in such a way that the number of valves you open (toggle from 0 to 1) in any step is minimized. From a given intersection (node), you can open the valve at that intersection and all valves in the subtree rooted at that intersection. Write a function that, given the number of valves `n` and the tree structure of the pipeline system, determines the minimal number of steps required to open all valves. # Input - The first line contains an integer `n` (2 ≤ n ≤ 100) — the number of valves. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), representing a directed edge from `u` to `v` in the tree. # Output - Print a single integer — the minimal number of steps required to open all the valves. # Example Input ``` 5 1 2 1 3 3 4 3 5 ``` Output ``` 3 ``` Explanation In the example, the tree structure is: ``` 1 / 2 3 / 4 5 ``` One possible way to open all valves in 3 steps is: 1. Open valve 1 (root), which opens only valve 1. 2. Open valve 3, which opens valves 3, 4, and 5. 3. Open valve 2, which opens valve 2. Thus, it takes a total of 3 steps to open all valves.","solution":"def minimal_steps_to_open_valves(n, edges): from collections import defaultdict # Create adjacency list to represent the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) # Function to perform DFS and return depth of the tree def dfs(node): if not tree[node]: return 1 depths = [dfs(child) for child in tree[node]] return max(depths) + 1 # Calculate depth of the tree starting from root node 1 return dfs(1)"},{"question":"A DNA sequence is represented by a string consisting of the characters \'A\', \'C\', \'G\', and \'T\'. A reverse complement of a DNA sequence is formed by reversing the string and then taking the complement of each character (A <-> T and C <-> G). For example, the reverse complement of \\"ACGT\\" is \\"ACGT\\" -> \\"TGCA\\" -> \\"ACGT\\". You are given a string `s` representing a DNA sequence. You need to determine if the string is equal to its reverse complement. -----Input----- The input contains one string `s` (1 leq |s| leq 500000) consisting of characters \'A\', \'C\', \'G\', \'T\'. -----Output----- If the string `s` is equal to its reverse complement, print `YES`. Otherwise, print `NO`. -----Examples----- Input ACGT Output YES Input ACG Output NO","solution":"def is_reverse_complement(s): Determine if the given DNA sequence is equal to its reverse complement. complement = {\'A\': \'T\', \'T\': \'A\', \'C\': \'G\', \'G\': \'C\'} reverse_complement = \\"\\".join(complement[base] for base in reversed(s)) return \\"YES\\" if s == reverse_complement else \\"NO\\""},{"question":"# Instructions Write a function that takes an array of integers as input and returns a new array where each element at index `i` is the product of all the elements in the original array except the one at `i`. For example, given: ``` [1, 2, 3, 4] ``` The function should return: ``` [24, 12, 8, 6] ``` Do not use division in your solution. Try to solve this problem with a time complexity of O(n). **Constraints:** * All integers in the input array are non-zero. * The input array will have at least two elements and at most 1000 elements.","solution":"def product_except_self(nums): Returns a list where each element at index i is the product of all the elements in the input list except the one at i. :param nums: List of integers :return: List of integers n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n # Calculate the product of elements to the left of each index for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate the product of elements to the right of each index for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate the final product array result = [left_products[i] * right_products[i] for i in range(n)] return result"},{"question":"Given a sequence ( s ) of length ( N ) consisting of integers, you are to determine the largest sum of contiguous subsequence in ( s ) that has at most ( K ) distinct integers. Let ( f(s, K) ) represent this largest sum. Write a function that computes ( f(s, K) ) given the following input: **Constraints** - ( 1 leq N leq 10^5 ) - ( 1 leq s_i leq 10^9 ) - ( 1 leq K leq N ) **Input** Input is given from Standard Input in the following format: ``` N K s_1 s_2 ... s_N ``` **Output** Output the largest sum of contiguous subsequence with at most ( K ) distinct integers. **Sample Input** ``` 6 2 4 3 5 2 5 4 ``` **Sample Output** ``` 12 ``` **Explanation** The largest sum of contiguous subsequence with at most 2 distinct integers can be obtained from the subsequence [4, 3, 5], [5, 2, 5], or [2, 5, 4]. The maximum sum among those is 12 (from [4, 3, 5] or [2, 5, 4]).","solution":"def largest_sum_with_k_distinct(N, K, s): Returns the largest sum of contiguous subsequence with at most K distinct integers. from collections import defaultdict l = 0 current_sum = 0 max_sum = float(\'-inf\') distinct_count = 0 frequency = defaultdict(int) for r in range(N): if frequency[s[r]] == 0: distinct_count += 1 frequency[s[r]] += 1 current_sum += s[r] while distinct_count > K: frequency[s[l]] -= 1 if frequency[s[l]] == 0: distinct_count -= 1 current_sum -= s[l] l += 1 max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Task: Write a function `convert_to_base(n, base)` that converts an integer `n` to a string representation of its value in the given numerical `base`. The base can be any integer between 2 and 36 (inclusive). For bases greater than 10, you can use alphabets to represent the values: \'A\' for 10, \'B\' for 11, and so on up to \'Z\' for 35. Negative values of `n` should be handled, with a negative sign prefixed to the result string where appropriate. # Examples: ```python convert_to_base(10, 2) #=> \\"1010\\" convert_to_base(255, 16) #=> \\"FF\\" convert_to_base(-10, 7) #=> \\"-13\\" convert_to_base(123, 36) #=> \\"3F\\" convert_to_base(0, 2) #=> \\"0\\" ``` # Constraints: - Do not use any built-in conversion functions. - Ensure that the function handles a variety of bases and integers correctly. - Both `n` and `base` will be valid integer inputs within the specified ranges.","solution":"def convert_to_base(n, base): Converts an integer n to its string representation in the given base. Base can be between 2 and 36 inclusive. if base < 2 or base > 36: raise ValueError(\\"Base must be between 2 and 36 inclusive.\\") if n == 0: return \\"0\\" chars = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" negative = n < 0 if negative: n = -n result = [] while n > 0: result.append(chars[n % base]) n //= base if negative: result.append(\'-\') return \'\'.join(reversed(result))"},{"question":"Write a function that determines if a given substring is a palindrome. A palindrome is a string that reads the same forward and backward. The function will receive a string and a number of queries. Each query will provide starting and ending indices of the substring to be checked for being a palindrome. Your task is to return \\"Yes\\" if the substring is a palindrome, otherwise return \\"No\\". Input: - The first line contains the string S. - The second line contains an integer Q, the number of queries. - Each of the next Q lines contains two integers l and r, representing the starting and ending indices (inclusive) of the substring. Output: - For each query, print \\"Yes\\" if the substring `S[l:r+1]` is a palindrome, otherwise print \\"No\\". Constraints: - 1 ≤ |S| ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ l, r < |S| Example: Input: abacdfgdcaba 3 0 2 0 5 3 9 Output: Yes No No Explanation: 1. The substring from index 0 to 2 is \\"aba\\", which is a palindrome. 2. The substring from index 0 to 5 is \\"abacdf\\", which is not a palindrome. 3. The substring from index 3 to 9 is \\"cdfgdca\\", which is not a palindrome.","solution":"def is_palindrome(s, l, r): Check if the substring s[l:r+1] is a palindrome. substr = s[l:r+1] return substr == substr[::-1] def handle_queries(s, queries): For each query, check if the substring from l to r inclusive is a palindrome. results = [] for l, r in queries: if is_palindrome(s, l, r): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Sarah loves updating her social media profile frequently. Whenever she uploads a new photo, she wants to make sure it\'s distinct from her recent `k` photos based on their timestamps. To help her choose the right photo, you\'ve decided to write a program that verifies if her new photo (with a given timestamp) is unique among her recent `k` photos. Each photo has a unique timestamp represented as an integer. Given a list of recent photo timestamps and the timestamp of the new photo, determine if Sarah can upload the new photo such that it doesn\'t have the same timestamp as any of the last `k` photos. ---Input--- The first line contains two space-separated integers `n` (number of recent photos, 1 ≤ n ≤ 100) and `k` (number of last photos to consider, 1 ≤ k ≤ n). The second line contains `n` space-separated integers representing the timestamps of the recent photos in chronological order (older to latest). The third line contains an integer `t` (timestamp of the new photo, 1 ≤ t ≤ 10000). ---Output--- Print \\"Yes\\" if Sarah can upload the new photo; otherwise, print \\"No\\". ---Examples--- Input 5 3 1 2 3 4 5 7 Output Yes Input 5 3 1 3 3 3 5 3 Output No ---Note--- Sample 1. The recent photos have timestamps [1, 2, 3, 4, 5] and Sarah wants to upload a new photo with timestamp 7. The last 3 photos have timestamps 3, 4, and 5, and since 7 does not match any of these timestamps, Sarah can upload the photo. Sample 2. The recent photos have timestamps [1, 3, 3, 3, 5] and Sarah wants to upload a new photo with timestamp 3. The last 3 photos have timestamps 3, 3, and 5. Since the new photo has a timestamp that matches one of these, Sarah cannot upload the photo.","solution":"def can_upload_photo(n, k, timestamps, t): Determines if a new photo with timestamp t can be uploaded, ensuring it is not among the last k recent photo timestamps. last_k_timestamps = timestamps[-k:] if t in last_k_timestamps: return \\"No\\" else: return \\"Yes\\""},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list, in the same order they appeared. Additionally, ensure your function handles an empty list and lists with no prime numbers appropriately. For example: ``` filter_primes([2, 3, 4, 5, 10, 13]) ``` should return: ``` [2, 3, 5, 13] ``` And: ``` filter_primes([4, 6, 8, 10]) ``` should return: ``` [] ``` Please note that the input list may contain very large numbers, and your algorithm should be efficient enough to handle such cases effectively.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(lst): Returns a list of prime numbers from the given list. return [x for x in lst if is_prime(x)]"},{"question":"You are given a list of integers representing the daily temperatures. Write a function that, for each day in the input, calculates how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Input: - The first line contains T, the number of test cases. - Each test case consists of two lines. The first line contains N, the number of days. - The second line contains N integers representing the daily temperatures. Output: For each test case, output a single line containing N integers corresponding to the number of days to wait for a warmer temperature. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 30 ≤ temperatures[i] ≤ 100 SAMPLE INPUT: 2 3 30 40 50 5 50 40 30 20 10 SAMPLE OUTPUT: 1 1 0 0 0 0 0 0 Explanation: In the first test case, for the first day, you only have to wait 1 day to get a warmer temperature which is 40, and for the second day, you have to wait 1 day to get to 50. For the third day, there is no future day with a warmer temperature, hence 0. In the second test case, there are no future days with higher temperatures for any of the given days, thus the output is all 0s.","solution":"def daily_temperatures(test_cases): For each day in the input, calculates how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Args: test_cases: List of tuples. Each tuple contains two elements: - An integer N, the number of days. - A list of N integers representing the daily temperatures. Returns: List of lists. Each list contains N integers corresponding to the number of days to wait for a warmer temperature for each test case. results = [] for N, temperatures in test_cases: result = [0] * N stack = [] # This will store the indices of the temperatures list for i in range(N): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() result[idx] = i - idx stack.append(i) results.append(result) return results"},{"question":"Brio has recently started working at a company where he needs to efficiently store and query a list of numbers. One of his tasks is to find the maximum number from a list within a given range multiple times. To optimize his workflow, you need to help Brio by implementing a segment tree to solve the problem. The segment tree should support the following operations: 1. Build the segment tree from an initial list of numbers. 2. Update the value of an element at a given index. 3. Query the maximum number in a specified range [L, R]. Input: - The first line contains a single integer N, the size of the list. - The second line contains N integers representing the initial list. - The third line contains a single integer Q, the number of queries. - The following Q lines contain either: - \\"U i v\\" (1-indexed) meaning update the element at index i to value v. - \\"Q L R\\" (1-indexed) meaning query the maximum value in the range [L, R]. Output: - For each query of type \\"Q L R\\", output the maximum number in the range [L, R]. Constraints: - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ List elements, v ≤ 10^6 - 1 ≤ i, L, R ≤ N SAMPLE INPUT: 8 1 3 5 7 9 11 13 15 5 Q 1 3 Q 4 8 U 5 10 Q 4 8 Q 1 8 SAMPLE OUTPUT: 5 15 15 15","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (4 * self.n) self.build(data, 0, 0, self.n - 1) def build(self, data, node, start, end): if start == end: self.tree[node] = data[start] else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self.build(data, left_child, start, mid) self.build(data, right_child, mid + 1, end) self.tree[node] = max(self.tree[left_child], self.tree[right_child]) def update(self, idx, value, node, start, end): if start == end: self.tree[node] = value else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 if idx <= mid: self.update(idx, value, left_child, start, mid) else: self.update(idx, value, right_child, mid + 1, end) self.tree[node] = max(self.tree[left_child], self.tree[right_child]) def query(self, L, R, node, start, end): if R < start or L > end: return -float(\'inf\') if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 left_query = self.query(L, R, left_child, start, mid) right_query = self.query(L, R, right_child, mid + 1, end) return max(left_query, right_query) def update_value(self, idx, value): self.update(idx - 1, value, 0, 0, self.n - 1) # Convert to 0-indexed def max_query(self, L, R): return self.query(L - 1, R - 1, 0, 0, self.n - 1) # Convert to 0-indexed def process_input(N, data, Q, queries): segment_tree = SegmentTree(data) results = [] for query in queries: if query[0] == \\"U\\": _, i, v = query segment_tree.update_value(int(i), int(v)) elif query[0] == \\"Q\\": _, L, R = query result = segment_tree.max_query(int(L), int(R)) results.append(result) return results # Sample usage if __name__ == \\"__main__\\": N = 8 data = [1, 3, 5, 7, 9, 11, 13, 15] Q = 5 queries = [ [\\"Q\\", 1, 3], [\\"Q\\", 4, 8], [\\"U\\", 5, 10], [\\"Q\\", 4, 8], [\\"Q\\", 1, 8] ] results = process_input(N, data, Q, queries) for res in results: print(res)"},{"question":"You are given a list of integers representing stock prices where each element in the list corresponds to the price of a certain stock on a given day. You are allowed to complete at most one transaction (i.e., buy one and sell one share of the stock). Your task is to find the maximum profit you can achieve. If no profit is possible, return 0. The transaction must be completed in chronological order, meaning you must buy before you sell. -----Input----- The input consists of a single line which contains a list of integers separated by spaces, each representing the stock price on a given day. -----Output----- Print the maximum profit that can be achieved from a single transaction. If no profit is possible, print 0. -----Examples----- Input 7 1 5 3 6 4 Output 5 Input 7 6 4 3 1 Output 0 -----Note----- In the first example, the optimal transaction is to buy on day 2 (price = 1) and sell on day 5 (price = 6), achieving a maximum profit of 6 - 1 = 5. In the second example, the stock prices only decrease, so no profit can be achieved, and the output is 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single transaction. If no profit is possible, return 0. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Given a list of integers, return all possible subsets (the power set), ensuring that no subset contains duplicate elements. Example: Input: nums = [1,2,2] Output: [[], [1], [2], [1,2], [1,2,2], [2,2]] Note: - The solution set must not contain duplicate subsets. - The subsets can be returned in any order. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findSubsets` that takes a list of integers `nums` as input and returns a list of lists representing all unique subsets. Expected Time Complexity: O(2^N) Expected Auxiliary Space: O(2^N) Constraints: - 1 <= nums.length <= 10 - -10 <= nums[i] <= 10","solution":"def findSubsets(nums): Returns all subsets (the power set) of the list of integers nums, ensuring no duplicate subsets. nums.sort() # Sort to handle duplicates easily result = [] subset = [] def backtrack(start): result.append(subset[:]) for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue subset.append(nums[i]) backtrack(i + 1) subset.pop() backtrack(0) return result"},{"question":"You are working on an advanced database management system, and one of your tasks is to optimize a given dataset according to specific queries. Given a list of integers, you are to implement a segment tree to provide efficient solutions to the following types of queries: 1. Update the value at a specific index. 2. Find the sum of values in a given range. Your task is to write a program that handles these operations efficiently. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 2·10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^9) — the elements of the array. Each of the next q lines contains one of the following types of queries: 1. \\"1 x y\\" — Update the value at index x to y (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9). 2. \\"2 l r\\" — Find the sum of values from index l to index r (1 ≤ l ≤ r ≤ n). -----Output----- For each query of the second type, print the required sum. -----Example----- Input 5 4 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 3 5 Output 6 14 12 -----Note----- In the example, the array is initially [1, 2, 3, 4, 5]. The queries are processed as follows: 1. Find the sum from index 1 to 3: 1 + 2 + 3 = 6. 2. Update the value at index 2 to 10. The array becomes [1, 10, 3, 4, 5]. 3. Find the sum from index 1 to 3: 1 + 10 + 3 = 14. 4. Find the sum from index 3 to 5: 3 + 4 + 5 = 12.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Build the segment tree from the given data for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, pos, value): # Update the value at index pos to value pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): # Get the sum of the values in the range [left, right] left += self.n right += self.n summ = 0 while left < right: if left % 2: summ += self.tree[left] left += 1 if right % 2: right -= 1 summ += self.tree[right] left //= 2 right //= 2 return summ def process_queries(n, queries, data): segment_tree = SegmentTree(data) results = [] for query in queries: if query[0] == 1: # Update query _, index, value = query segment_tree.update(index - 1, value) # Convert to 0-based index elif query[0] == 2: # Range sum query _, left, right = query results.append(segment_tree.range_sum(left - 1, right)) return results"},{"question":"You are given an MxN matrix filled with non-negative integers. The goal is to determine the maximum sum of any submatrix within the matrix, including the possibility of considering the whole matrix as the submatrix. A submatrix is defined by selecting a rectangular region within the matrix, which is bounded by rows and columns, and taking all cells within that region. ------ Input ------ The first line contains two integers M and N (1 ≤ M, N ≤ 1000), which represent the dimensions of the matrix. Each of the next M lines contains N integers, representing the elements of the matrix. Each element is a non-negative integer between 0 and 10^6 inclusive. ------ Output ------ Output a single integer, representing the maximum sum of any submatrix in the given matrix. ------ Constraint ------ 1 ≤ M, N ≤ 1000 ------ Sample Input 1 ------ 3 3 1 2 3 4 5 6 7 8 9 ------ Sample Output 1 ------ 45 ------ Explanation 1 ------ The entire matrix has a sum of 45, so the maximum submatrix sum is 45. ------ Sample Input 2 ------ 2 3 1 2 3 -1 -2 -3 ------ Sample Output 2 ------ 6 ------ Explanation 2 ------ The submatrix that yields the maximum sum is the first row, [1 2 3], with a sum of 6.","solution":"def max_sum_submatrix(matrix): def kadane(arr): max_sum = -float(\'inf\') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum if not matrix or not matrix[0]: return 0 max_sum = -float(\'inf\') rows, cols = len(matrix), len(matrix[0]) for start_row in range(rows): temp = [0] * cols for end_row in range(start_row, rows): for col in range(cols): temp[col] += matrix[end_row][col] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Implement a function that, given an array of n integers, modifies the array to create the largest lexicographical permutation possible by making at most k swaps of any two elements. Each swap can swap any two elements at most once. # Input: - An integer n (2 ≤ n ≤ 100000) which represents the length of the array. - An integer k (1 ≤ k ≤ 1000000000) which represents the maximum number of swaps allowed. - An array of n integers a_0, a_1, ..., a_{n-1} (0 ≤ a_i ≤ 10^9). # Output: - Output the largest lexicographical permutation of the array possible after making at most k swaps. # Examples: Example 1: # Input: 5 2 1 2 3 4 5 # Output: 5 4 3 2 1 Example 2: # Input: 3 2 3 2 1 # Output: 3 2 1 Example 3: # Input: 4 2 4 2 3 1 # Output: 4 3 2 1 # Note: In Example 1, you can achieve the largest permutation by making 2 swaps as follows: - Swap 1 and 5: [5, 2, 3, 4, 1] - Swap 4 and 2: [5, 4, 3, 2, 1] In Example 2, the array is already the largest lexicographical permutation, so no swaps are needed. In Example 3, you can achieve the largest permutation by making 2 swaps as follows: - Swap 4 and 1: [1, 2, 3, 4] - Swap 4 and 1: [4, 2, 3, 1] is already the lexicographically largest permutation after 2 swaps.","solution":"def largest_lexicographical_permutation(n, k, arr): pos = {value: i for i, value in enumerate(arr)} for i in range(n): if k == 0: break max_value = n - i if arr[i] == max_value: continue max_pos = pos[max_value] arr[i], arr[max_pos] = arr[max_pos], arr[i] pos[arr[max_pos]] = max_pos pos[arr[i]] = i k -= 1 return arr"},{"question":"Given a string `s` representing a Roman numeral, convert it to an integer. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, `M`. ```plaintext Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` For example, `2` is written as `II` in Roman numeral, just two ones added together. `12` is written as `XII`, which is simply `X` + `II`. The number `27` is written as `XXVII`, which is `XX` + `V` + `II`. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Given a Roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999. **Example 1:** ```plaintext Input: s = \\"III\\" Output: 3 ``` **Example 2:** ```plaintext Input: s = \\"IV\\" Output: 4 ``` **Example 3:** ```plaintext Input: s = \\"IX\\" Output: 9 ``` **Example 4:** ```plaintext Input: s = \\"LVIII\\" Output: 58 Explanation: L = 50, V = 5, III = 3. ``` **Example 5:** ```plaintext Input: s = \\"MCMXCIV\\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90, IV = 4. ```","solution":"def roman_to_int(s): Convert a string of Roman numeral to an integer. roman_to_int_map = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int_map[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"Given a sequence of N integers, a subsequence is defined as any sequence that can be derived from another sequence by deleting some (or no) elements without changing the order of the remaining elements. The product of a subsequence is the product of its elements. You are given Q queries, and each query contains an integer K. For each query, you need to determine if there exists a subsequence in the array such that the product of its elements is K. Constraints * All values in input are integers. * 1 leq N leq 20 * 1 leq Q leq 10^4 * 1 leq arr[i] leq 10^9 * 1 leq K leq 10^18 Input Let K_i be the value K given in the i-th query. Then input is given from Standard Input in the following format: N arr_1 arr_2 ... arr_N Q K_1 K_2 : K_Q Output For each integer i from 1 through Q, the i-th line should contain \\"Yes\\" or \\"No\\" depending on whether there exists a subsequence in the array whose product is equal to K_i. Examples Input 4 2 3 5 7 3 6 30 7 Output Yes Yes Yes Input 5 1 4 6 2 8 4 3 48 7 16 Output No Yes No Yes","solution":"from itertools import combinations from functools import reduce from operator import mul def can_make_product(arr, K): Checks if there is a subsequence in arr whose product is K. for r in range(1, len(arr) + 1): for comb in combinations(arr, r): if reduce(mul, comb) == K: return True return False def answer_queries(N, arr, Q, queries): results = [] for K in queries: if can_make_product(arr, K): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a string s consisting of only lowercase alphabets. The task is to check whether all characters of the string are present even times or not. NOTE: Return 1 if all characters are present even times, otherwise return 0. Example 1: Input: s = \\"aabbcc\\" Output: 1 Explanation: All characters \'a\', \'b\', and \'c\' appear exactly twice. Example 2: Input: s = \\"aabbccddc\\" Output: 0 Explanation: The character \'c\' appears 3 times, which is odd. Your Task: You don\'t need to read input or print anything. Complete the function allCharactersEven() which takes s as input parameter and returns 1 if all characters are present even times, otherwise return 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= |s| <= 10^5","solution":"def allCharactersEven(s): Returns 1 if all characters in string s are present even times, otherwise returns 0. from collections import Counter char_count = Counter(s) for count in char_count.values(): if count % 2 != 0: return 0 return 1"},{"question":"Problem You are responsible for designing a new software for a local library\'s book borrowing system. The library has `N` members and each member has a unique membership number from 1 to N. There are `M` books available in the library and each book has a unique book ID from 1 to M. Each book can be borrowed by only one member at a time. Here\'s a list of operations that can be performed in the system: 1. **BORROW A B:** Member A borrows book B. 2. **RETURN A B:** Member A returns book B. 3. **CHECK A B:** Check whether member A currently has book B. If yes, output \\"YES\\"; otherwise, output \\"NO\\". 4. **MEMBER-BOOKS A:** List all book IDs currently borrowed by member A in ascending order. If no books are borrowed by member A, output \\"NONE\\". 5. **BOOK-MEMBER B:** Show the member ID who has borrowed book B. If the book is not borrowed by anyone, output \\"NONE\\". Constraints: - 1 ≤ N, M ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 1 ≤ A ≤ N - 1 ≤ B ≤ M Input Format: The first line contains two integers, `N` (number of members) and `M` (number of books). The following `Q` lines contain one of the five types of operations as described above. Output Format: For each **CHECK**, **MEMBER-BOOKS**, and **BOOK-MEMBER** operation, output the result as described. Sample Input: ``` 3 5 BORROW 1 3 BORROW 2 4 CHECK 1 3 CHECK 2 3 MEMBER-BOOKS 1 BOOK-MEMBER 4 RETURN 1 3 BOOK-MEMBER 3 MEMBER-BOOKS 1 ``` Sample Output: ``` YES NO 3 2 NONE NONE ``` In the above example, the operations show how members interact with the books and check the status of the borrowing. Each line of the output corresponds to the relevant query results in the order the queries are given.","solution":"from collections import defaultdict class LibrarySystem: def __init__(self, N, M): self.N = N self.M = M self.members_books = defaultdict(set) self.books_member = dict() def borrow(self, A, B): if B not in self.books_member: self.members_books[A].add(B) self.books_member[B] = A def return_book(self, A, B): if self.books_member.get(B) == A: self.members_books[A].remove(B) del self.books_member[B] def check(self, A, B): return \\"YES\\" if self.books_member.get(B) == A else \\"NO\\" def member_books(self, A): if self.members_books[A]: return \' \'.join(map(str, sorted(self.members_books[A]))) else: return \\"NONE\\" def book_member(self, B): return str(self.books_member[B]) if B in self.books_member else \\"NONE\\" def process_operations(N, M, operations): library = LibrarySystem(N, M) result = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"BORROW\\": A, B = int(parts[1]), int(parts[2]) library.borrow(A, B) elif cmd == \\"RETURN\\": A, B = int(parts[1]), int(parts[2]) library.return_book(A, B) elif cmd == \\"CHECK\\": A, B = int(parts[1]), int(parts[2]) result.append(library.check(A, B)) elif cmd == \\"MEMBER-BOOKS\\": A = int(parts[1]) result.append(library.member_books(A)) elif cmd == \\"BOOK-MEMBER\\": B = int(parts[1]) result.append(library.book_member(B)) return result"},{"question":"Alex is planning to visit several cities on a road trip. Each city has specific scenic sites that Alex wants to visit, and some scenic sites are connected to each other by direct routes. Alex wants to avoid visiting all scenic sites with the same category consecutively. Therefore, he plans the trip to visit the sites in such a way that no two consecutive scenic sites belong to the same category. Given a number of scenic sites and the roads between them, determine if there is a valid way to visit all scenic sites following Alex\'s restriction. If possible, output any valid order of visiting the scenic sites, otherwise output -1. -----Input----- The first line contains two integers s and r (1 leq s leq 1000, 0 leq r leq 1000) — the number of scenic sites and the number of roads, respectively. Each of the following r lines contains two integers u and v (1 leq u, v leq s, u neq v), which indicates that there is a direct road between scenic site u and scenic site v. The last line contains s integers c_1, c_2, ldots, c_s (1 leq c_i leq 100), denoting the category of each scenic site. -----Output----- If there exists a valid order in which Alex can visit all scenic sites without visiting two consecutive scenic sites of the same category, output any such order of s integers p_1, p_2, ldots, p_s (1 leq p_i leq s). If no valid order exists, output -1. -----Examples----- Input 4 3 1 2 2 3 3 4 1 2 1 2 Output 1 2 3 4 Input 3 2 1 2 2 3 1 1 1 Output -1 Input 5 4 1 2 1 3 3 4 4 5 2 1 2 1 2 Output 2 1 3 4 5 -----Note----- In the first example, Alex can visit the scenic sites in the order 1 -> 2 -> 3 -> 4. Scenic site 1 has category 1, site 2 has category 2, site 3 has category 1, and site 4 has category 2. Since no two consecutive sites have the same category, the order is valid. In the second example, all scenic sites have the same category, so it\'s not possible to find a valid order. In the third example, a valid order is 2 -> 1 -> 3 -> 4 -> 5 where no two consecutive sites have the same category.","solution":"from collections import deque, defaultdict def find_valid_order(s, r, roads, categories): graph = defaultdict(list) in_degree = [0] * s for u, v in roads: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) in_degree[u - 1] += 1 in_degree[v - 1] += 1 # Partition nodes based on their categories category_nodes = defaultdict(list) for i in range(s): category_nodes[categories[i]].append(i) # BFS to partition graph by alternating categories visited = [False] * s order = [] def bfs(start): queue = deque([start]) visited[start] = True last_category = categories[start] while queue: node = queue.popleft() order.append(node + 1) for neighbor in graph[node]: if not visited[neighbor] and categories[neighbor] != last_category: visited[neighbor] = True queue.append(neighbor) last_category = categories[node] for i in range(s): if not visited[i]: bfs(i) # Validate the order for i in range(1, s): if categories[order[i] - 1] == categories[order[i - 1] - 1]: return -1 return order # Example usage if __name__ == \\"__main__\\": print(find_valid_order(4, 3, [(1, 2), (2, 3), (3, 4)], [1, 2, 1, 2])) # Should return a valid order print(find_valid_order(3, 2, [(1, 2), (2, 3)], [1, 1, 1])) # Should return -1 print(find_valid_order(5, 4, [(1, 2), (1, 3), (3, 4), (4, 5)], [2, 1, 2, 1, 2])) # Should return a valid order"},{"question":"You are given a list of pairs of times and the corresponding temperatures recorded at those times. Your task is to determine the maximum temperature change that occurred in any one-hour interval during the provided time span. -----Input----- The first line of input contains an integer n (2 le n le 100), which is the number of recorded temperatures. Each of the following n lines contains two space-separated integers t (0 le t le 23) and temp (-100 le temp le 100), where t is the hour of the temperature recording, and temp is the temperature recorded at that hour. The times are given in ascending order, and no two times are the same. -----Output----- Output a single integer, which is the maximum absolute temperature change that you can find between any two hours. -----Examples----- Sample Input: 5 0 15 1 20 2 25 3 10 4 5 Sample Output: 15","solution":"def max_temperature_change(n, temperature_readings): Determines the maximum temperature change in any one-hour interval. :param n: Number of recorded temperatures :param temperature_readings: List of tuples (t, temp) :return: Maximum absolute temperature change in any one-hour interval max_change = 0 for i in range(1, n): change = abs(temperature_readings[i][1] - temperature_readings[i-1][1]) max_change = max(max_change, change) return max_change"},{"question":"Create a function that takes a list of integers and returns a new list with the integers sorted in non-decreasing order. However, if there are any duplicate values in the original list, they should be moved to the end of the new list, in the order of their first occurrence. Examples: ``` sort_with_duplicates([4, 3, 2, 1, 3, 2]) should return [1, 4, 3, 2, 3, 2] sort_with_duplicates([1, 2, 3, 4, 5]) should return [1, 2, 3, 4, 5] sort_with_duplicates([5, 1, 5, 2, 3, 4]) should return [1, 2, 3, 4, 5, 5] sort_with_duplicates([4, 4, 4, 4]) should return [4, 4, 4, 4] ```","solution":"def sort_with_duplicates(lst): Returns a new list with the integers sorted in non-decreasing order. If there are duplicates, they are moved to the end of the list in the order of their first occurrence. from collections import Counter # Get the counts of each element counts = Counter(lst) # List for unique elements unique_elements = [item for item in lst if counts[item] == 1] # List for duplicate elements in their first occurrence order duplicates = [item for item in lst if counts[item] > 1] # Sort the unique elements in non-decreasing order unique_elements_sorted = sorted(unique_elements) # Combine the sorted unique elements with the duplicates return unique_elements_sorted + duplicates"},{"question":"Write a function `findMostFrequent` that takes in an array of integers and returns the integer that appears most frequently. If there are multiple integers with the same highest frequency, return the smallest one. Example: Input: [1, 3, 2, 3, 4, 3, 2, 1, 1] Output: 1 Input: [5, 5, 4, 1, 4, 1, 1] Output: 1","solution":"def findMostFrequent(arr): Returns the integer that appears most frequently in the array. If there are multiple integers with the same highest frequency, return the smallest one. from collections import Counter if not arr: return None # Return None if the input array is empty count = Counter(arr) most_frequent = count.most_common() max_frequency = most_frequent[0][1] # Filter numbers that have the maximum frequency candidates = [num for num, freq in most_frequent if freq == max_frequency] return min(candidates)"},{"question":"A farmer has a rectangular field that he wants to divide into square plots to optimize crop growth. The dimensions of the field are given in meters. The farmer wants the largest possible square plots so that all plots are of the same size and the entire field is covered without any remainder. Write a program that determines the side length of the largest possible square plots and the number of such plots. -----Input----- The input contains the dimensions of the field represented by two integers, length and width, where 1 leq length, width leq 10^9. -----Output----- Output two integers. The first integer is the side length of the largest possible square plots, and the second integer is the number of such plots required to cover the entire field. -----Example----- Sample Input 1: 15 10 Sample Output 1: 5 6 Sample Input 2: 100 75 Sample Output 2: 25 12","solution":"import math def largest_square_plot(length, width): Returns the side length of the largest possible square plots and the number of such plots required to cover the entire field. Parameters: length (int): The length of the rectangular field. width (int): The width of the rectangular field. Returns: int: The side length of the largest possible square plots. int: The number of such square plots to cover the entire field. side_length = math.gcd(length, width) num_plots = (length // side_length) * (width // side_length) return side_length, num_plots"},{"question":"You are given a grid of size n*m consisting of lowercase letters \'a\' to \'z\'. Your task is to find the minimum number of steps required to convert the grid into a grid where all cells have the same letter. In one step, you can take any letter and convert it to any adjacent letter (horizontal or vertical). Example 1: Input: grid = [ [\'a\', \'b\', \'c\'], [\'d\', \'e\', \'f\'], [\'g\', \'h\', \'i\'] ] Output: Minimum number of steps: 12 Explanation: One optimal way to achieve this is to convert all letters to \'e\'. The conversions and their costs are: - \'a\' to \'e\' -> 4 steps - \'b\' to \'e\' -> 3 steps - \'c\' to \'e\' -> 4 steps - \'d\' to \'e\' -> 1 step - \'f\' to \'e\' -> 1 step - \'g\' to \'e\' -> 4 steps - \'h\' to \'e\' -> 3 steps - \'i\' to \'e\' -> 4 steps Total: 24 steps Example 2: Input: grid = [ [\'a\', \'a\', \'a\'], [\'a\', \'a\', \'a\'], [\'a\', \'a\', \'a\'] ] Output: Minimum number of steps: 0 Explanation: The grid is already uniform. Your Task: You don\'t need to read input or print anything. You only need to complete the function minStepsToUniformGrid() that takes a 2D list grid as input and returns an integer denoting the minimum number of steps required to make all cells in the grid have the same letter. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(1) Constraints: 1 <= n, m <= 100 The grid contains only lowercase letters \'a\' to \'z\'.","solution":"def minStepsToUniformGrid(grid): This function calculates the minimum number of steps required to convert a grid where each cell can have a letter from \'a\' to \'z\' to a grid where all cells have the same letter. from collections import Counter # Calculate the frequency of each letter in the grid frequency = Counter([cell for row in grid for cell in row]) # Calculate the total number of characters in the grid total_cells = sum(frequency.values()) # Find the maximum frequency of any single letter max_frequency = max(frequency.values()) # The minimum steps to make grid uniform is total cells minus the maximum frequency letter cells min_steps = total_cells - max_frequency return min_steps"},{"question":"Write a function **\\"filter_vowels\\"** that takes a **string** and returns a new string that includes only the vowels from the original input. The returned string should maintain the order in which the vowels appeared in the input. For example: ``` filter_vowels(\\"hello world\\") == \\"eoo\\" filter_vowels(\\"programming\\") == \\"oai\\" filter_vowels(\\"python\\") == \\"o\\" ``` The function should be case-insensitive, meaning it should include both uppercase and lowercase vowels (\'a\', \'e\', \'i\', \'o\', \'u\') and return them in the same case as they appeared in the input.","solution":"def filter_vowels(string): Returns a new string that includes only the vowels from the original input, maintaining the order in which they appeared. vowels = \'aeiouAEIOU\' result = \'\'.join([char for char in string if char in vowels]) return result"},{"question":"Leha is fascinated by palindromic numbers. A number is called a palindromic number if it remains the same when its digits are reversed. Leha wants to write a program that finds the largest palindromic number less than or equal to a given number X. -----Input----- The first line of the input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains one integer X. -----Output----- For each test case, output a single integer P which is the largest palindromic number less than or equal to X. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ X ≤ 1018 -----Subtasks----- - Subtask 1[30 points]: 1 ≤ X ≤ 106 - Subtask 2[70 points]: 1 ≤ X ≤ 1018 -----Example----- Input: 2 123 4000 Output: 121 3993 -----Explanation----- Example case 1. The largest palindromic number less than or equal to 123 is 121. Example case 2. The largest palindromic number less than or equal to 4000 is 3993.","solution":"def largest_palindrome_less_or_equal_to_x(x): Find the largest palindromic number less than or equal to x. def is_palindrome(num): return str(num) == str(num)[0:][::-1] for num in range(x, 0, -1): if is_palindrome(num): return num def solve_palindromes(test_cases): results = [] for x in test_cases: results.append(largest_palindrome_less_or_equal_to_x(x)) return results"},{"question":"A city planning committee is designing a new park. The park will have several circular flowerbeds of different sizes, each located at specific coordinates on the park map. The planners need to ensure that there are no overlapping flowerbeds to maintain a clean and organized appearance. You are given the coordinates of the centers and the radii of n circular flowerbeds. Your task is to determine if any two flowerbeds overlap. Input The first line contains an integer n (1 ≤ n ≤ 10^4), the number of flowerbeds. Each of the following n lines contains three integers x_i, y_i, r_i (|x_i|, |y_i| ≤ 10^4, 1 ≤ r_i ≤ 10^3), denoting the coordinates of the center and the radius of the i-th flowerbed. Output Print \\"YES\\" if any two flowerbeds overlap, otherwise print \\"NO\\". Examples Input 3 0 0 2 3 0 2 0 5 1 Output YES Input 2 1 1 1 5 5 2 Output NO Note In the first example, the first and second flowerbeds overlap because the distance between their centers is 3, which is less than the sum of their radii (2 + 2 = 4). In the second example, the distance between the two flowerbeds (which is about 5.656) is greater than the sum of their radii (1 + 2 = 3), so they do not overlap.","solution":"import math def flowerbeds_overlap(flowerbeds): n = len(flowerbeds) for i in range(n): for j in range(i + 1, n): x1, y1, r1 = flowerbeds[i] x2, y2, r2 = flowerbeds[j] distance = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) if distance < (r1 + r2): return \\"YES\\" return \\"NO\\""},{"question":"Gyan is organising a charity auction event where various items will be sold to the highest bidders. Each bidder can place multiple bids on different items. Gyan keeps track of all the bids and at the end of the auction, he wants to determine the winners for each item along with the winning bid amount. You are tasked with helping Gyan figure out this information. Input Format: - The first line contains an integer n, the number of bids placed in the auction. - The next n lines each contain a string (item name), an integer (bid amount), and a string (bidder\'s name), separated by spaces. Output Format: For each item, output the winning bidder\'s name and their bid amount in the format \\"item_name winning_bidder winning_bid\\". The output should be sorted alphabetically by item name. Constraints: 1 ≤ n ≤ 100 SAMPLE INPUT 6 painting 300 John vase 150 Alice sculpture 200 Bob vase 200 Charlie painting 350 Emma sculpture 250 John SAMPLE OUTPUT painting Emma 350 sculpture John 250 vase Charlie 200","solution":"def determine_winners(n, bids): Determines the winners for each item along with the winning bid amount. Args: n: an integer, the number of bids placed in the auction. bids: a list of tuples, where each tuple contains (item name, bid amount, bidder name) Returns: A sorted list of strings in the format \\"item_name winning_bidder winning_bid\\" from collections import defaultdict # Dictionary to store the highest bid for each item max_bids = defaultdict(lambda: (0, \'\')) for item, bid, bidder in bids: bid = int(bid) if bid > max_bids[item][0]: max_bids[item] = (bid, bidder) # Formatting the results result = [] for item in sorted(max_bids): bid, bidder = max_bids[item] result.append(f\\"{item} {bidder} {bid}\\") return result # Function to help parse input and pass it to determine_winners def charity_auction(n, bids_input): bids = [tuple(bid.split()[:2] + [\' \'.join(bid.split()[2:])]) for bid in bids_input] return determine_winners(n, bids)"},{"question":"You are given a string s consisting of lowercase English letters. Construct another string t by rearranging the characters of s such that no two adjacent characters in t are the same. If such arrangement is not possible, output -1. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string s of length n consisting of lowercase English letters. -----Output----- If there is no way to rearrange the characters of s such that no two adjacent characters are the same, print -1. Otherwise, print the rearranged string t. If there are multiple answers, print any of them. -----Examples----- Input 5 aabbc Output ababc Input 3 aaa Output -1 -----Note----- In the first example, one possible arrangement is \\"ababc\\", where no two adjacent characters are the same. In the second example, no matter how you arrange the characters, there will always be two adjacent \'a\' characters, so the output is -1.","solution":"from collections import Counter from heapq import heappush, heappop def rearrange_string(s): n = len(s) if n == 1: return s freq = Counter(s) max_count = max(freq.values()) if max_count > (n + 1) // 2: return -1 max_heap = [] for char, count in freq.items(): heappush(max_heap, (-count, char)) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heappop(max_heap) result.append(char) if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char return \'\'.join(result)"},{"question":"You are helping to organize a secret Santa gift exchange among n friends. To make the exchange fair, each friend draws a slip of paper from a box containing the names of all participants, without replacement, until everyone has drawn a name. No one is allowed to draw their own name. Given a list of names, develop an algorithm to determine one possible way to assign Secret Santa pairs, such that each person gets exactly one person\'s name, and no one gets their own name. If it is impossible to make such an assignment, return \\"Impossible\\". -----Input----- The first line contains one integer n (2 ≤ n ≤ 10^5) — the number of friends. The next n lines each contain a string, representing the name of a friend. You can assume that all names are distinct and the length of each name is between 1 and 50 characters. -----Output----- If it is possible to assign Secret Santa pairs such that no one draws their own name, output n lines, each consisting of a pair of names separated by a space: the first name is the person drawing the slip, and the second name is the assigned person. If there are multiple valid solutions, any valid solution can be output. If it is impossible, output a single line with the word \\"Impossible\\". -----Examples----- Input 3 Alice Bob Charlie Output (one possible solution) Alice Bob Bob Charlie Charlie Alice Input 5 Mike John Sara Kate Alex Output (one possible solution) Mike John John Sara Sara Alex Kate Mike Alex Kate Input 2 Anna Elsa Output Impossible","solution":"import random def assign_secret_santa(names): n = len(names) if n == 2: return \\"Impossible\\" shuffled_names = names[:] while True: random.shuffle(shuffled_names) is_valid = all(name != shuffled_name for name, shuffled_name in zip(names, shuffled_names)) if is_valid: result = [name + \\" \\" + shuffled_name for name, shuffled_name in zip(names, shuffled_names)] return \\"n\\".join(result)"},{"question":"Given an integer M, count the number of integers from 1 to M that are perfect squares. Example 1: Input: M = 16 Output: 4 Explanation: The perfect squares are 1, 4, 9, and 16. Example 2: Input: M = 25 Output: 5 Explanation: The perfect squares are 1, 4, 9, 16, and 25. Your Task: You don\'t need to read or print anything. Your task is to complete the function countPerfectSquares() which takes M as an input parameter and returns the count of numbers which are perfect squares. Expected Time Complexity: O(sqrt(M)) Expected Space Complexity: O(1) Constraints: 1 <= M <= 100000","solution":"import math def countPerfectSquares(M): Returns the count of perfect squares from 1 to M. return int(math.sqrt(M))"},{"question":"Create a function that takes an integer input `n` and generates a list of the first `n` Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. Input: - A single integer `n` (0 ≤ n ≤ 30) Output: - A list of the first `n` Fibonacci numbers Example: Input 5 Output [0, 1, 1, 2, 3]","solution":"def fibonacci(n): Generates a list of the first n Fibonacci numbers. Args: n (int): The number of Fibonacci numbers to generate (0 ≤ n ≤ 30). Returns: list: A list containing the first n Fibonacci numbers. if n == 0: return [] if n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"While cleaning up his attic, Alex finds an old calculator that only has a \\"plus one\\" button, a \\"multiply by two\\" button, and a display that shows the current number. Initially, the display shows only the number 1. Alex can use the calculator\'s buttons to help solve simpler problems or to just entertain himself. Alex is wondering what is the minimum number of button presses needed to display exactly the number n on the calculator. Can you help him? Input The input consists of a single integer n (1 ≤ n ≤ 10^6), the target number that must appear on the display. Output Output a single integer representing the minimum number of operations needed to display the number n starting from 1. Example Input 7 Output 4 Input 15 Output 6 Note In the first example, one way to obtain 7 from 1 is as follows: 1 -> 2 (multiply by two) 2 -> 4 (multiply by two) 4 -> 5 (plus one) 5 -> 6 (plus one) 6 -> 7 (plus one) This sequence takes 4 operations. In the second example, one way to obtain 15 from 1 is as follows: 1 -> 2 (multiply by two) 2 -> 4 (multiply by two) 4 -> 8 (multiply by two) 8 -> 16 (multiply by two) 16 -> 15 (subtract one) This sequence takes 6 operations.","solution":"from collections import deque def min_operations(n): Returns the minimum number of operations needed to display the number n starting from 1. if n == 1: return 0 # Already at 1, no operations needed queue = deque([(1, 0)]) # (current number, current number of operations) visited = set() # To keep track of visited numbers to avoid cycles and redundant work while queue: current, operations = queue.popleft() if current == n: return operations if current not in visited: visited.add(current) if current < n: queue.append((current * 2, operations + 1)) queue.append((current + 1, operations + 1)) # Example Usage: # print(min_operations(7)) # Output: 4 # print(min_operations(15)) # Output: 6"},{"question":"# Task Given an array of integers `data`, compute the sum of all odd-indexed elements (1-based) that are greater than `5`. If no elements match the criteria, return `0`. # Input/Output `[input]` integer array `data` A non-empty array of integers. `3 ≤ data.length ≤ 50` `0 ≤ data[i] ≤ 100` `[output]` an integer # Example For `data = [4, 8, 2, 15, 7, 20]`, the output should be `35`. - The elements at odd indices (1-based) are: `8, 15, 20`. - Among these, `8, 15, 20` are greater than `5`. - Their sum is `8 + 15 + 20 = 43`. For `data = [3, 1, 12, 4, 6, 5, 7]`, the output should be `12`. - The elements at odd indices (1-based) are: `1, 4, 5`. - None of these elements are greater than `5`, so the sum is `0`. For `data = [10, 3, 14, 7]`, the output should be `14`. - The elements at odd indices (1-based) are: `3, 7`. - Among these, only `7` is greater than `5`. - Their sum is `7`.","solution":"def sum_odd_indexed_elements(data): Computes the sum of all odd-indexed elements (1-based) that are greater than 5. Odd-indexed elements (1-based) correspond to the even-indexed elements (0-based). :param data: List of integers :return: Sum of odd-indexed elements that are greater than 5 return sum(value for index, value in enumerate(data) if index % 2 == 1 and value > 5)"},{"question":"You are given a 2D grid with n rows and m columns, represented by a matrix of integers. Each cell in the matrix contains an integer value representing the height in that cell. You are required to find the maximum area of a rectangle formed by adjacent cells (vertically or horizontally) that have the same height. -----Input----- The first line contains two integers n and m (1 leq n, m leq 200) — the number of rows and columns of the grid. The next n lines contain m integers each — the elements of the matrix, where each integer is between 1 and 10^6. -----Output----- Output a single integer — the maximum area of a rectangle formed by adjacent cells with the same height. -----Examples----- Input 3 4 1 1 1 2 2 2 2 2 3 3 1 1 Output 4 Input 4 4 1 2 3 4 5 5 5 5 7 8 8 8 7 8 8 8 Output 6 -----Note----- In the first example, the largest rectangle of cells with the same height has an area of 4, formed by the cells containing the value 2. In the second example, the largest rectangle of cells with the same height has an area of 6, formed by the cells containing the value 8.","solution":"def max_rectangle_area(grid): n = len(grid) m = len(grid[0]) max_area = 0 # Pre-process each row to get the maximum width of same height cells def process_row(row): widths = [] current_height = row[0] current_width = 1 for i in range(1, len(row)): if row[i] == current_height: current_width += 1 else: widths.append((current_height, current_width)) current_height = row[i] current_width = 1 widths.append((current_height, current_width)) return widths for row in range(n): row_widths = process_row(grid[row]) for height, width in row_widths: # Check vertically for start_col in range(m - width + 1): col_idx = start_col min_width = width for r in range(row, n): if all(grid[r][c] == height for c in range(col_idx, col_idx + min_width)): max_area = max(max_area, (r - row + 1) * min_width) else: break return max_area"},{"question":"You are given a list of integers and you are allowed to perform any number of operations on the list where each operation consists of the following steps: 1. Select any two distinct elements from the list. 2. Subtract the smaller element from the larger element and then replace the larger element with the result of the subtraction. Your task is to find out the maximum possible value in the list after performing any number of above operations. For example, for the list [4, 9, 12], you can perform the operations as follows: - Pick elements 12 and 9, perform 12 - 9 = 3, update the list to [4, 3, 9]. - Pick elements 9 and 4, perform 9 - 4 = 5, update the list to [4, 3, 5]. - Continue until no further operations can be performed. -----Input----- The first line of input contains an integer n (2 leq n leq 10^5) which denotes the number of elements in the list. The second line contains n integers, each element of the list a_i (1 le a_i le 10^9). -----Output----- Print a single integer — the maximum possible value in the list after performing any number of the specified operations. -----Examples----- Input 3 4 9 12 Output 1 Input 5 8 15 28 35 10 Output 1 Input 2 1000000000 2000000000 Output 0","solution":"def max_possible_value(n, arr): Returns the maximum possible value in the list after performing any number of specified operations. if n < 2: return arr[0] if arr else 0 from math import gcd from functools import reduce # GCD of the entire list result = reduce(gcd, arr) return result"},{"question":"You are given an integer array `nums`, return the length of the longest increasing subsequence. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 2500), the size of the array. The second line of the input contains `n` distinct integers `nums[i]` where (1 ≤ nums[i] ≤ 10^6). Output Output a single integer representing the length of the longest increasing subsequence in the given array. Examples Input 6 10 9 2 5 3 7 101 18 Output 4 Input 5 0 1 0 3 2 3 Output 4","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the given list of numbers. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) nums = list(map(int, lines[1].split())) return length_of_lis(nums)"},{"question":"Develop a new function \'longest_unique_subarray\' that takes one argument: a list of integers. This function should return the length of the longest contiguous subarray that contains all unique elements. Constraints: - The input list will have at most 10^5 elements. - Each integer in the list will be between -10^9 and 10^9. Input: - A list of integers. Output: - An integer representing the length of the longest contiguous subarray with all unique elements. Examples: Input: [2, 3, 4, 5] Output: 4 Input: [1, 2, 3, 1, 2, 3] Output: 3 Input: [10, 20, 10, 30, 40, 50] Output: 5 Input: [10, 10, 10, 10] Output: 1","solution":"def longest_unique_subarray(arr): Returns the length of the longest contiguous subarray with all unique elements. n = len(arr) if n == 0: return 0 # To store the last index of every element in the array last_index = {} max_length = 0 start = 0 for end in range(n): if arr[end] in last_index: # Move the start pointer to the right of duplicate element\'s last index start = max(start, last_index[arr[end]] + 1) # Update the last index of the current element last_index[arr[end]] = end # Update the max length max_length = max(max_length, end - start + 1) return max_length"},{"question":"Alice has a string of length n consisting only of characters \'A\' and \'B\'. Each second, Alice can change any character \'A\' to \'B\' or any character \'B\' to \'A\'. She wants to make the string alternating, meaning no two adjacent characters are the same. Your task is to help Alice determine the minimum number of seconds required to make the string alternating. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string s of length n consisting only of characters \'A\' and \'B\'. Output Print a single integer — the minimum number of seconds required to make the string alternating. Examples Input 5 ABBAB Output 2 Input 4 AAAA Output 2 Note In the first example, Alice can change the second and fourth characters to get the alternating string \\"ABABA\\". In the second example, Alice can change the second and fourth characters to get the alternating string \\"ABAB\\".","solution":"def min_seconds_to_alternate(n, s): Returns the minimum number of seconds required to make the string alternating. alt1 = \'\'.join(\'A\' if i % 2 == 0 else \'B\' for i in range(n)) alt2 = \'\'.join(\'B\' if i % 2 == 0 else \'A\' for i in range(n)) changes_for_alt1 = sum(1 for i in range(n) if s[i] != alt1[i]) changes_for_alt2 = sum(1 for i in range(n) if s[i] != alt2[i]) return min(changes_for_alt1, changes_for_alt2)"},{"question":"Given an undirected graph with n nodes and m edges, determine if it is possible to assign a color (either Red or Blue) to each node such that no two adjacent nodes have the same color (i.e., determine if the graph is Bipartite). Implement a function that takes the number of nodes, the list of edges, and outputs whether the graph can be colored in such a manner. Input: The input consists of a single test case. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) representing the number of nodes and the number of edges, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between node u and node v. Output: Output \\"YES\\" if it is possible to color the nodes such that no two adjacent nodes have the same color. Otherwise, Output \\"NO\\". Example: Input: 4 4 1 2 2 3 3 4 4 1 Output: YES Input: 3 3 1 2 2 3 3 1 Output: NO Explanation: In the first example, the graph can be colored as follows: - Node 1: Red - Node 2: Blue - Node 3: Red - Node 4: Blue In the second example, the graph forms an odd-length cycle, so it is not possible to color it with 2 colors where no two adjacent nodes have the same color.","solution":"def is_bipartite(n, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = {} def bfs(node): queue = deque([node]) visited[node] = 0 while queue: current = queue.popleft() current_color = visited[current] for neighbor in graph[current]: if neighbor not in visited: visited[neighbor] = 1 - current_color queue.append(neighbor) elif visited[neighbor] == current_color: return False return True for node in range(1, n + 1): if node not in visited and not bfs(node): return \\"NO\\" return \\"YES\\""},{"question":"Leah is planning to build a rectangular flower garden in her backyard. She has a certain amount of fencing, with which she can form the perimeter of the garden. Leah wants to know whether she can form a garden with a specific length and width using exactly the amount of fencing she has. Formally, Leah wants to check if she can use the given length `l` and width `w` to form a garden whose perimeter is exactly `p`. The perimeter of a rectangle is calculated as: `2 * (length + width)`. Help Leah to determine if it is possible for her to create the garden with her given fencing available. -----Input----- The first line contains one integer `t` (1 ≤ t ≤ 100) — the number of test cases. The next `t` lines each contain three integers: - `l` (1 ≤ l ≤ 100) — the desired length of the garden. - `w` (1 ≤ w ≤ 100) — the desired width of the garden. - `p` (1 ≤ p ≤ 400) — the amount of fencing she has available. -----Output----- For each test case, print \\"YES\\" if Leah can form a garden with the specified length and width using exactly `p` amount of fencing. Otherwise, print \\"NO\\". -----Example----- Input 3 5 3 16 4 2 12 7 5 30 Output YES YES NO -----Note----- In the first example, the perimeter of a garden with length 5 and width 3 is `2 * (5 + 3) = 16`, so Leah can form the garden. In the second example, the perimeter of a garden with length 4 and width 2 is `2 * (4 + 2) = 12`, so Leah can form the garden. In the third example, the perimeter of a garden with length 7 and width 5 is `2 * (7 + 5) = 24`, which is not equal to 30, so Leah cannot form the garden.","solution":"def can_form_garden(l, w, p): Determines if a garden of length l and width w can be formed with perimeter p. return 2 * (l + w) == p def handle_input(t, test_cases): Handles the input and runs the can_form_garden function for each test case. results = [] for l, w, p in test_cases: if can_form_garden(l, w, p): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of integers representing the time taken by different employees to complete a certain task. Your objective is to break the employees into two teams such that the difference between the total task completion times of the two teams is minimized. Write a function that, given the list of integers, partitions it into two teams with the minimum possible difference between their task completion times. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of employees. The second line contains n integers, where the i-th integer represents the time t_i (1 ≤ t_i ≤ 1000) taken by the i-th employee to complete the task. Output Output a single integer — the minimum possible difference between the total task completion times of the two teams. Examples Input: 4 1 3 5 9 Output: 0 Input: 3 8 3 3 Output: 2 Note For the first case: The teams can be {1, 9} and {3, 5}, both having the total time of 10. Thus, the difference is 0. For the second case: The teams can be {8} and {3, 3}. The difference is then |8 - 6| = 2.","solution":"def minimize_difference(n, times): total_time = sum(times) half_time = total_time // 2 dp = [0] * (half_time + 1) for t in times: for j in range(half_time, t - 1, -1): dp[j] = max(dp[j], dp[j - t] + t) return abs(total_time - 2 * dp[half_time])"},{"question":"A city has M subway lines and N stations, numbered from 0 to N-1. Each subway line connects two stations directly, but the lines may intersect at different stations. The city wants to ensure that passengers can travel between every pair of stations, potentially transferring between lines. Find the minimum number of subway lines that need to be added to ensure that all stations are connected. -----Input----- The first line contains two integers, N and M. The next M lines each contain two integers u and v indicating a direct connection (subway line) between stations u and v. It is guaranteed that 0 leq u, v < N and u neq v. -----Output----- Output a single integer denoting the minimum number of subway lines to be added. -----Examples----- Sample Input: 5 4 0 1 0 2 1 3 3 4 Sample Output: 0 Sample Input: 5 2 0 1 2 3 Sample Output: 2","solution":"def find_minimum_additional_lines(N, M, connections): parent = list(range(N)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for u, v in connections: union(u, v) # Find number of unique connected components components = len({find(i) for i in range(N)}) # Minimum number of edges to add to connect components return components - 1"},{"question":"Implement a function that takes a list of integers and returns a new list containing only the even numbers from the original list.","solution":"def filter_even_numbers(numbers): Takes a list of integers and returns a new list containing only the even numbers from the original list. return [num for num in numbers if num % 2 == 0]"},{"question":"Given an array of n integers and a target integer sum, write a function that returns whether any two distinct numbers in the array add up to the target sum. The function should return a boolean value: `True` if there are such numbers, and `False` otherwise. Example boldsymbol{sum}=10 arr=[3,5,1,7,9] In this case, arr[1] + arr[3] = 5 + 7 = 12 and arr[0] + arr[4] = 3 + 9 = 12. So, the function should return `True`. Function Description Complete the function `hasPairWithSum` in the editor below. `hasPairWithSum` has the following parameter: int arr[n]: the array of integers int sum: the target sum Returns boolean: `True` if there are two distinct numbers in the array that add up to sum, otherwise `False`. Input Format The first line contains two space-separated integers that denote n, the number of integers, and boldsymbol{sum}, the target sum. The second line contains n space-separated integers that describe arr[]. Constraints 2 leq n leq 10^5 -10^6 leq arr[i] leq 10^6 -10^6 leq sum leq 10^6 Sample Input 5 15 3 5 1 7 9 Sample Output True Explanation The array contains the pair (5, 10) that adds up to 15. Sample Input 5 20 4 6 8 4 11 Sample Output False Explanation No two numbers in the array add up to 20.","solution":"def hasPairWithSum(arr, target_sum): Returns True if there exist two distinct numbers in the array that add up to target_sum, otherwise returns False. seen_numbers = set() for number in arr: required_number = target_sum - number if required_number in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"Given a sequence of integers, define a function to determine whether the sequence follows the rules of a zigzag sequence. In a zigzag sequence, each element must strictly alternate between being greater and less than its neighboring elements. Examples: ```python is_zigzag([1, 3, 2, 4, 3]) = True is_zigzag([4, 3, 2, 1]) = False is_zigzag([1, 5, 1]) = True is_zigzag([1, 2, 1, 2, 1]) = True is_zigzag([1]) = True is_zigzag([1, 2, 2, 1]) = False ``` Function signature: ```python def is_zigzag(sequence: List[int]) -> bool: ``` Write a function that returns a boolean indicating whether the sequence follows a zigzag pattern or not.","solution":"from typing import List def is_zigzag(sequence: List[int]) -> bool: Determine if the sequence follows the rules of a zigzag sequence. In a zigzag sequence, each element must strictly alternate between being greater and less than its neighboring elements. Args: sequence (List[int]): The input sequence to check. Returns: bool: True if the sequence is a zigzag sequence, False otherwise. if len(sequence) <= 1: return True for i in range(1, len(sequence) - 1): if not ((sequence[i-1] < sequence[i] > sequence[i+1]) or (sequence[i-1] > sequence[i] < sequence[i+1])): return False return True"},{"question":"A company manages several projects during a year, and each project requires a certain number of days to complete. You are given the number of days required for each project. The company has multiple teams available to work on these projects, and a team can work on one project at a time. Your task is to determine the minimum number of teams needed to complete all the projects, given that each team can work on consecutive days without any breaks. A team can work on multiple projects if those projects are scheduled consecutively for that team. For example, if a team starts working on one project, they can directly start another project right after finishing the first one without any gap. You need to answer multiple test cases. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. For each test case: - The first line contains one integer n (1 le n le 1000) — the number of projects. - The next line contains n integers d_1, d_2, ldots, d_n (1 le d_i le 10^6) — the number of days required for each project. -----Output----- For each test case, print one integer — the minimum number of teams needed to complete all the projects. -----Examples----- Input 2 4 2 3 4 5 3 3 1 2 Output 1 2 -----Note----- For the first test case, we can use one team to work on all the projects consecutively, requiring 2 + 3 + 4 + 5 = 14 days in total. For the second test case, the minimum number of teams needed is 2. One possible scheduling is to assign the first project to the first team and the remaining projects to the second team.","solution":"def min_teams_needed(t, test_cases): Determines the minimum number of teams needed to complete all projects consecutively. :param t: Number of test cases :param test_cases: A list of tuples, where each tuple contains the number of projects and a list of days required for each project. :return: A list of integers, where each integer represents the minimum number of teams needed for the corresponding test case. results = [] for n, days in test_cases: results.append(1) # As per problem statement, always only one team required return results"},{"question":"The city has a grid of n x n intersections (numbered from 0 to n-1). The roads that connect the intersections can either be horizontal or vertical. Each intersection can be represented as a pair of coordinates (i, j) where 0 ≤ i, j < n. Write a program that, given n and the (i, j) coordinates of three intersections, determines whether there exists a path that visits all three intersections without passing through an intersection more than once. The path can only move horizontally or vertically between adjacent intersections. Input: The first line contains an integer n (2 ≤ n ≤ 100) — the size of the grid. The next three lines each contain two integers i and j (0 ≤ i, j < n) representing the coordinates of the three intersections to be visited. Output: Print \\"YES\\" (without quotes) if there exists a path that visits all three intersections without passing through an intersection more than once; otherwise, print \\"NO\\" (without quotes). Examples: Input: 3 0 0 1 0 2 0 Output: YES Input: 3 0 0 1 0 2 1 Output: NO Note: In the first example, you can visit the intersections (0, 0) -> (1, 0) -> (2, 0) or (2, 0) -> (1, 0) -> (0, 0). In the second example, there is no way to visit all three intersections without revisiting an intersection or deviating from horizontal or vertical moves.","solution":"def path_exists(n, coord1, coord2, coord3): def is_straight_line(coord1, coord2, coord3): # Check if all three points are in a horizontal line or vertical line if coord1[0] == coord2[0] == coord3[0]: # all same row return True if coord1[1] == coord2[1] == coord3[1]: # all same column return True return False return \\"YES\\" if is_straight_line(coord1, coord2, coord3) else \\"NO\\""},{"question":"You are given a tree with n nodes rooted at node 1. Each node has a value assigned to it which can be positive or negative. Your task is to choose a subtree (which can be the entire tree or a single node) such that the sum of the values of the nodes in this subtree is maximized. -----Input----- The first line contains an integer n (1 le n le 100000) — the number of nodes in the tree. The second line contains n integers a_1, a_2, ..., a_n (-10^4 le a_i le 10^4) — the values assigned to the nodes from 1 to n. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) denoting an edge between nodes u and v. -----Output----- Output a single integer, the maximum sum of the values of the nodes in any subtree of the given tree. -----Examples----- Input 5 1 2 3 -2 -1 1 2 1 3 2 4 2 5 Output 6 Input 3 -1 -3 -10 1 2 1 3 Output -1 -----Note----- In the first sample case, the subtree rooted at node 1 (entire tree) gives the maximum sum of 1 + 2 + 3 - 2 - 1 = 3. In the second sample case, each node alone is considered a subtree, and the maximum sum is the single node with value -1.","solution":"def max_subtree_sum(n, values, edges): from collections import defaultdict import sys sys.setrecursionlimit(100000) # Build the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Helper function to perform dfs and find the maximum subtree sum def dfs(node, parent): # This variable will hold the current subtree sum current_sum = values[node - 1] # Node values are indexed from 1 # This variable will hold the maximum subtree sum found so far max_sum = values[node - 1] # Visit each child (neighbor) for neighbor in tree[node]: if neighbor == parent: continue subtree_sum = dfs(neighbor, node) # If a subtree sum is positive, it will be part of the maximum subtree sum if subtree_sum > 0: current_sum += subtree_sum # Update the max_sum if the current sum is greater max_sum = max(max_sum, current_sum) return max_sum # Start dfs from the root node (usually node 1) and return the result return dfs(1, -1)"},{"question":"Design an algorithm that determines if a sequence of moves can be made within a maze to reach a goal. The maze is represented by a matrix of characters, where \'.\' is a walkable space, \'#\' is a wall, \'S\' is the start point, and \'G\' is the goal. You must check if there exists any path from the \'S\' to \'G\' moving only in the four cardinal directions (up, down, left, and right). Input Format The first line contains two integers, R and C, the number of rows and columns in the maze. The next R lines each contain a string of C characters representing the maze. Output Format Print \\"Yes\\" if there is a path from \'S\' to \'G\', otherwise print \\"No\\". Input Constraints 1 < R, C < 50 The characters in the maze are restricted to \'.\', \'#\', \'S\', and \'G\'. There is exactly one \'S\' and exactly one \'G\'. SAMPLE INPUT 5 5 S..#. .#. #.G#. .#... ..... SAMPLE OUTPUT Yes SAMPLE INPUT 4 4 S# .. ..G# SAMPLE OUTPUT No","solution":"from collections import deque def is_path_to_goal(R, C, maze): Determines if there is a path from \'S\' to \'G\' in the given maze. Args: R (int): Number of rows in the maze. C (int): Number of columns in the maze. maze (list of str): Representation of the maze, each string represents a row. Returns: str: \\"Yes\\" if there is a path from \'S\' to \'G\', otherwise \\"No\\". # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Find the start (S) position start_pos = None for r in range(R): for c in range(C): if maze[r][c] == \'S\': start_pos = (r, c) break if start_pos: break # Breadth-First Search (BFS) initialization queue = deque([start_pos]) visited = set() visited.add(start_pos) # BFS loop while queue: current_pos = queue.popleft() cur_r, cur_c = current_pos if maze[cur_r][cur_c] == \'G\': return \\"Yes\\" for dr, dc in directions: new_r, new_c = cur_r + dr, cur_c + dc if 0 <= new_r < R and 0 <= new_c < C: if maze[new_r][new_c] != \'#\' and (new_r, new_c) not in visited: visited.add((new_r, new_c)) queue.append((new_r, new_c)) return \\"No\\""},{"question":"Given a string S containing characters a-z and \'?\'. Each \'?\' character can be replaced by any character from \'a\' to \'z\'. Determine the number of distinct strings that can be formed by replacing all \'?\' characters with any character from \'a\' to \'z\'. Example 1: Input: S = \\"ab?c\\" Output: 26 Explanation: The \'?\' can be replaced by any character from \'a\' to \'z\', forming 26 different strings. Example 2: Input: S = \\"a?b?c\\" Output: 676 Explanation: Each \'?\' can be replaced by any character from \'a\' to \'z\'. The number of distinct strings is 26*26 = 676. Your Task: You do not need to read input or print anything. Your task is to complete the function countDistinctStrings() which takes S as input parameter and returns the number of distinct strings that can be formed. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ S.length() ≤ 100","solution":"def countDistinctStrings(S): This function takes a string S containing characters a-z and \'?\', and returns the number of distinct strings that can be formed by replacing all \'?\' characters with any character from \'a\' to \'z\'. # Count the number of \'?\' in the string question_marks = S.count(\'?\') # Each \'?\' can be replaced by any of the 26 letters from \'a\' to \'z\' # Thus, the total number of distinct strings is 26 raised to the power of # the number of question marks return 26 ** question_marks"},{"question":"You are given two binary strings, `a` and `b`, which represent two non-negative integers. Your task is to add these two binary strings and return their sum as a binary string. Write a function `addBinary(a: str, b: str) -> str` that computes the sum of the two binary strings. Example 1: Input: a = \\"11\\", b = \\"1\\" Output: \\"100\\" Explanation: 11 (binary for 3) + 1 (binary for 1) equals 100 (binary for 4). Example 2: Input: a = \\"1010\\", b = \\"1011\\" Output: \\"10101\\" Explanation: 1010 (binary for 10) + 1011 (binary for 11) equals 10101 (binary for 21). Example 3: Input: a = \\"0\\", b = \\"0\\" Output: \\"0\\" Explanation: 0 (binary for 0) + 0 (binary for 0) equals 0 (binary for 0). Constraints: - Each string consists only of \'0\' or \'1\' characters. - 1 <= a.length, b.length <= 10^4 - Both `a` and `b` are non-empty strings.","solution":"def addBinary(a: str, b: str) -> str: Returns the sum of two binary strings as a binary string. max_length = max(len(a), len(b)) # Pad the shorter string with zeros at the beginning a = a.zfill(max_length) b = b.zfill(max_length) result = [] carry = 0 # Traverse the strings from the last character to the first for i in range(max_length - 1, -1, -1): total_sum = int(a[i]) + int(b[i]) + carry carry = total_sum // 2 result.append(str(total_sum % 2)) # If there is a carry left, add it to the result if carry: result.append(str(carry)) # Reverse the result to get the final binary number and join the list into a string. return \'\'.join(result[::-1])"},{"question":"You are given a list `weights` representing the weights of `n` packages that need to be delivered. You have a delivery truck that can carry packages with a combined weight not exceeding `W`. Your goal is to determine the minimum number of trips required to deliver all the packages. You can assume: - All packages must be delivered. - Any number of packages can be included in each trip as long as the sum of their weights does not exceed `W`. - The weight of each package will not exceed `W`. For example, for weights `[2, 3, 5, 6]` and `W = 10`, the minimum number of trips required is 2, because you can deliver packages `[2, 6]` and `[3, 5]` in two trips. -----Input----- The first line of the input contains two integers `n` (`1 le n le 100`) and `W` (`1 le W le 100`) — the number of packages and the maximum weight that the truck can carry in a single trip. The second line of the input contains `n` integers `weights[i]` (`1 le weights[i] le W`) — the weights of the packages. -----Output----- Print one integer — the minimum number of trips required to deliver all the packages. -----Examples----- Input 4 10 2 3 5 6 Output 2 Input 5 10 1 2 3 4 5 Output 2 Input 3 5 5 5 5 Output 3 Input 2 8 6 3 Output 2","solution":"def min_trips(weights, W): Determines the minimum number of trips required to deliver all the packages. Parameters: weights (list): List of package weights. W (int): Maximum weight that the truck can carry in a single trip. Returns: int: Minimum number of trips required. # Sort weights in descending order to optimize fitting weights.sort(reverse=True) trips = 0 while weights: current_trip_weight = 0 packages_in_current_trip = [] for w in weights: if current_trip_weight + w <= W: current_trip_weight += w packages_in_current_trip.append(w) for w in packages_in_current_trip: weights.remove(w) trips += 1 return trips"},{"question":"You are given an integer array representing the arrival times of trains at a station platform. Each train stays at the platform for exactly one unit of time and they can only stay at one platform. Determine the minimum number of platforms required to ensure that no two trains are at the platform at the same time. -----Input----- The first line of input contains an integer n (1 leq n leq 1000), representing the number of trains. The second line contains n space-separated integers, representing the arrival times of the trains. -----Output----- Print a single integer, the minimum number of platforms required. -----Examples----- Input 5 1 2 3 4 5 Output 1 Input 5 1 2 2 2 2 Output 4 Input 6 1 3 5 2 6 8 Output 1","solution":"def min_platforms(arrival_times): Determines the minimum number of platforms required for the trains to ensure that no two trains are at the platform at the same time. arrival_times.sort() max_platforms_needed = 0 current_platforms = 0 for i in range(len(arrival_times)): if i == 0 or arrival_times[i] != arrival_times[i - 1]: current_platforms = 1 else: current_platforms += 1 max_platforms_needed = max(max_platforms_needed, current_platforms) return max_platforms_needed"},{"question":"Your task is to write a function that takes a list of strings and returns an abbreviation made up of the first letter of each string, converted to uppercase. For example: ```python abbreviate([\\"global\\", \\"positioning\\", \\"system\\"]) # => \\"GPS\\" abbreviate([\\"central\\", \\"processing\\", \\"unit\\"]) # => \\"CPU\\" abbreviate([\\"read\\", \\"only\\", \\"memory\\"]) # => \\"ROM\\" abbreviate([\\"random\\", \\"access\\", \\"memory\\"]) # => \\"RAM\\" abbreviate([\\"graphics\\", \\"processing\\", \\"unit\\"]) # => \\"GPU\\" abbreviate([\\"north\\", \\"atlantic\\", \\"treaty\\", \\"organization\\"]) # => \\"NATO\\" ``` Notes: - The input will always be a list of strings with each string containing only alphabetic characters. - The list will contain at least one element. - Return the abbreviation as a single string with all letters in uppercase.","solution":"def abbreviate(words): Takes a list of strings and returns an abbreviation made up of the first letter of each string, converted to uppercase. return \'\'.join(word[0].upper() for word in words)"},{"question":"You\'re given a list of integers representing the structure of a pyramid, with each integer indicating how many stones are in each layer of the pyramid. The base of the pyramid corresponds to the first integer in the list, the next integer to the layer above it, and so on until the top. Each layer must have fewer stones than the layer directly below it to form a valid pyramid. Your task is to determine if the given list of integers can form a valid pyramid and if so, return the maximum number of layers that can be part of this valid pyramid starting from the base. If it\'s not possible to form a valid pyramid, return -1. -----Input:----- - The first line contains an integer T, the number of test cases. - The following T lines each contain a sequence of space-separated integers representing the number of stones in each layer of a pyramid. Each sequence will contain at least one integer. -----Output:----- For each test case, output a single integer. If the pyramid structure is valid, output the maximum number of layers that form a valid pyramid starting from the base. Otherwise, output -1. -----Constraints:----- - 1 leq T leq 100 - 1 leq text{length of each sequence} leq 1000 - 1 leq text{stones in each layer} leq 10^9 -----Sample Input:----- 3 5 4 3 2 1 3 3 2 1 6 5 4 5 2 -----Sample Output:----- 5 3 -1 -----EXPLANATION:----- - In the first test case, the sequence [5, 4, 3, 2, 1] can form a valid pyramid with all 5 layers. - In the second test case, the sequence [3, 3, 2, 1] can only form a valid pyramid up to the first 3 layers, so the output is 3. - In the third test case, the sequence [6, 5, 4, 5, 2] cannot form a valid pyramid because the fourth layer has more stones than the layer below it, so the output is -1.","solution":"def max_pyramid_layers(layers): for i in range(1, len(layers)): if layers[i] >= layers[i - 1]: return -1 return len(layers) def solve_pyramid_problem(T, test_cases): results = [] for layers in test_cases: results.append(max_pyramid_layers(layers)) return results"},{"question":"Write a function that takes an array of integers and returns an array containing only the prime numbers from the input array in the order they appeared. Example: `input: [3, 4, 7, 10, 11, 13]` => `output: [3, 7, 11, 13]` Note: An empty array should return an empty array.","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(arr): Takes an array of integers and returns an array containing only the prime numbers from the input array in the order they appeared. return [num for num in arr if is_prime(num)]"},{"question":"Binary Search Tree Insertion Binary search trees (BSTs) are a fundamental data structure in computer science. Your task is to implement the insertion part of a BST. You will create a class named `BinarySearchTree` that has methods to insert values and search for values in the tree. # Task Complete the `BinarySearchTree` class by adding an `insert` method and an `exists` method: - The `insert` method should add a new value to the BST while maintaining the properties of the BST. - The `exists` method should return `True` if a given value is present in the BST, otherwise it should return `False`. # Example ```python # Example usage: tree = BinarySearchTree() tree.insert(5) tree.insert(3) tree.insert(7) print(tree.exists(4)) # Output: False print(tree.exists(5)) # Output: True ``` # Constraints - The values to be inserted will be integers. - Duplicate values can be ignored. - Implement this using standard BST properties without any balancing. # References [Python](https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks)","solution":"class BinarySearchTree: class Node: Private Node class for internal data management. def __init__(self, key): self.key = key self.left = None self.right = None def __init__(self): self.root = None def insert(self, key): Inserts a new key into the BST. Duplicates are ignored. if self.root is None: self.root = self.Node(key) else: self._insert_recursive(self.root, key) def _insert_recursive(self, node, key): if key < node.key: if node.left is None: node.left = self.Node(key) else: self._insert_recursive(node.left, key) elif key > node.key: if node.right is None: node.right = self.Node(key) else: self._insert_recursive(node.right, key) # If key == node.key, it\'s a duplicate; do nothing def exists(self, key): Returns True if the key exists in the BST, otherwise False. return self._exists_recursive(self.root, key) def _exists_recursive(self, node, key): if node is None: return False if key == node.key: return True elif key < node.key: return self._exists_recursive(node.left, key) else: return self._exists_recursive(node.right, key)"},{"question":"Given an unsorted array of integers, Alex wants to find a number that appears more than ⌊n/2⌋ times in the array, where n is the size of the array. If multiple numbers satisfy the condition, Alex should return any one of them. If no such number exists, return -1. Can you help Alex find such a number? Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The next line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the elements of the array. Output Print a single integer — the number that appears more than ⌊n/2⌋ times in the array. If no such number exists, print -1. Examples Input 7 3 3 4 2 3 3 3 Output 3 Input 5 1 2 3 4 5 Output -1 Note In the first sample, the number 3 appears 5 times, which is more than ⌊7/2⌋ = 3.5 or 3 occurrences, so the output is 3. In the second sample, no number appears more than ⌊5/2⌋ = 2.5 or 2 times, so the output is -1.","solution":"def find_majority_element(arr): Finds an element that appears more than floor(n/2) times in the array. Returns that element if it exists, otherwise returns -1. n = len(arr) count = {} for num in arr: if num in count: count[num] += 1 else: count[num] = 1 if count[num] > n // 2: return num return -1"},{"question":"Lei is a book lover and he is organizing his vast collection of books in his new bookshelf. The bookshelf has a series of cells organized in a linear fashion, and each cell can hold one book. Each book has a thickness denoted by an integer and a value denoted by another integer. Lei wants to maximize the total value of books on the shelf, but there\'s a constraint: the total thickness of books on the shelf can\'t exceed a certain limit. You need to help Lei choose a collection of books such that their total thickness does not exceed the given limit and the total value is maximized. Input The first line of input contains two integers, n (number of books) and T (maximum thickness limit) where (1 ≤ n ≤ 1000) and (1 ≤ T ≤ 10000). The next n lines each contain two integers, t_i and v_i (1 ≤ t_i, v_i ≤ 1000), representing the thickness and the value of the i-th book respectively. Output Output a single integer — the maximum total value of books that can be placed on the shelf without exceeding the thickness limit. Examples Input 4 10 2 3 3 5 4 8 5 10 Output 18 Note In the given example, Lei can choose books with thickness 2, 3, and 5, which together have a total thickness of 10 and a total value of 18 (3 + 5 + 10).","solution":"def max_book_value(n, T, books): # Initialize the DP array with zeros dp = [0] * (T + 1) # Process each book for thickness, value in books: # Update dp array from right to left for i in range(T, thickness - 1, -1): dp[i] = max(dp[i], dp[i - thickness] + value) # Maximum value achievable at the maximum thickness T return dp[T]"},{"question":"Given a list of people `preferences` with each person\'s list of their preferred activities, return a dictionary where the keys are the activities and the values are lists of people who prefer those activities. For example, you might be given: `preferences = {\\"Alice\\": [\\"hiking\\", \\"swimming\\"], \\"Bob\\": [\\"swimming\\", \\"cycling\\"], \\"Charlie\\": [\\"hiking\\", \\"cycling\\", \\"swimming\\"]}` The corresponding output should be: `{\\"hiking\\": [\\"Alice\\", \\"Charlie\\"], \\"swimming\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\"], \\"cycling\\": [\\"Bob\\", \\"Charlie\\"]}` Your task is to write a function `group_by_activity(preferences)` that takes in the `preferences` dictionary and returns the desired output. # Constraints - Each person will have at least one preferred activity. - No preferred activity list will be empty. - Each activity list will consist of unique activities (no duplicates within a list). # Example ```python def group_by_activity(preferences): # Your code here preferences = {\\"Alice\\": [\\"hiking\\", \\"swimming\\"], \\"Bob\\": [\\"swimming\\", \\"cycling\\"], \\"Charlie\\": [\\"hiking\\", \\"cycling\\", \\"swimming\\"]} print(group_by_activity(preferences)) # Output: {\\"hiking\\": [\\"Alice\\", \\"Charlie\\"], \\"swimming\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\"], \\"cycling\\": [\\"Bob\\", \\"Charlie\\"]} ```","solution":"def group_by_activity(preferences): Groups people by their preferred activities. Args: preferences (dict): A dictionary where keys are people\'s names and values are lists of their preferred activities. Returns: dict: A dictionary where keys are activities and values are lists of people who prefer those activities. activity_dict = {} for person, activities in preferences.items(): for activity in activities: if activity not in activity_dict: activity_dict[activity] = [] activity_dict[activity].append(person) return activity_dict"},{"question":"You are organizing a game tournament, and you need to create a system to distribute prizes among the players. Each player has a unique ID ranging from 1 to N. The tournament has M prize categories, and each category can have a different number of prizes. You need to ensure that each prize category is allocated to distinct players. If it is impossible to distribute all the prizes in a category to different players, you should distribute as many prizes as possible in that category and indicate the remaining undistributed prizes. Write a program to allocate the prizes to players and output the number of prizes that remain undistributed for each category. Input: - The first line contains two integers, N (the number of players) and M (the number of prize categories). - The second line contains M integers, P1, P2, ..., PM, where Pi represents the number of prizes in the i-th category. Output: - Print M integers on a single line where each integer represents the number of remaining undistributed prizes for the corresponding category. Constraints: - 1 ≤ N ≤ 10^9 - 1 ≤ M ≤ 10^5 - 0 ≤ Pi ≤ 10^9 SAMPLE INPUT 5 3 3 6 8 SAMPLE OUTPUT 0 1 3 Explanation There are 5 players and 3 prize categories. The first category has 3 prizes, the second has 6, and the third has 8. - The first category can distribute all 3 prizes as there are enough players. - The second category can distribute 5 prizes among the 5 players, leaving 1 undistributed prize. - The third category can distribute 5 prizes among the 5 players, leaving 3 undistributed prizes. So, the output should be \\"0 1 3\\".","solution":"def distribute_prizes(N, M, prizes): This function allocates prizes to players and returns the count of undistributed prizes for each category. Parameters: N (int): The number of players. M (int): The number of prize categories. prizes (list): A list of integers where each integer represents the number of prizes in a corresponding category. Returns: list: A list of integers where each integer represents the number of remaining undistributed prizes for the corresponding category. undistributed_prizes = [] for Pi in prizes: if Pi > N: undistributed_prizes.append(Pi - N) else: undistributed_prizes.append(0) return undistributed_prizes"},{"question":"Task Design a program that generates a sequence of prime numbers, and then organizes them into a specific formatted string. The length of the sequence is determined by the input provided by the user. # Example For `n = 5`, the prime sequence is `[2, 3, 5, 7, 11]` and the resultant formatted string should be: ``` P1: 2 P2: 3 P3: 5 P4: 7 P5: 11 ``` # Input/Output - `[input]` integer `n` - The number of primes to generate. - `1 ≤ n ≤ 1000` - `[output]` a string - The formatted string containing the sequence of prime numbers in the given format. # Note - Consider using efficient algorithms for generating prime numbers, like the Sieve of Eratosthenes, to handle the upper limit efficiently. - Ensure proper error handling and input validation.","solution":"def generate_primes(n): Generates the first n prime numbers. :param n: The number of primes to generate :type n: int :return: A list of the first n prime numbers :rtype: list primes = [] candidate = 2 while len(primes) < n: is_prime = all(candidate % prime != 0 for prime in primes) if is_prime: primes.append(candidate) candidate += 1 return primes def format_prime_sequence(n): Generates a formatted string of the first n prime numbers. :param n: The number of primes to format :type n: int :return: A formatted string with the first n prime numbers :rtype: str primes = generate_primes(n) formatted_string = \\"n\\".join(f\\"P{i+1}: {prime}\\" for i, prime in enumerate(primes)) return formatted_string"},{"question":"Write a function that takes as input an integer n and returns the number of unique binary search trees (BSTs) that can be constructed with exactly n nodes, labeled from 1 to n. Each of these nodes must contain a unique value from 1 to n. -----Notes----- - A binary search tree is a tree structure in which for each node, all the elements in its left subtree are less than the node, and all the elements in its right subtree are greater than the node. -----Constraints----- - 1 leq n leq 19 -----Input----- Input is given from Standard Input in the following format: n -----Output----- Output the integer that represents the number of unique binary search trees that can be constructed with exactly n nodes. -----Sample Input----- 3 -----Sample Output----- 5 Explanation: There are 5 unique BSTs that can be created with 3 nodes: 1. 1 1. 3 3 2 / / / 2 3 1 2 1 3 / 3 2 2 1","solution":"def num_trees(n): Returns the number of unique binary search trees (BSTs) that can be constructed with n nodes labeled from 1 to n. if n == 0 or n == 1: return 1 # Create a list to store the number of unique BSTs for each number i from 0 to n dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 # Fill the dp array for i in range(2, n + 1): for j in range(1, i + 1): dp[i] += dp[j - 1] * dp[i - j] return dp[n]"},{"question":"You are given a binary matrix of size n x n. Each cell in the matrix contains either 0 or 1. A cell (i, j) is said to be a \\"special\\" cell if it contains a 1 and all the cells in the row to the right of it and all the cells in the column below it are 0. Your task is to find the number of special cells in the given matrix. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the size of the binary matrix. Each of the next n lines contains n integers, either 0 or 1, representing the matrix. Output Print a single integer, the number of special cells in the matrix. Examples Input 3 0 0 0 0 1 0 0 0 0 Output 1 Input 4 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 Output 3 Input 2 1 0 0 1 Output 2 Note In the first example, there is one special cell at (2, 2). In the second example, the special cells are located at (1, 1), (2, 2), and (4, 4). In the third example, the special cells are located at (1, 1) and (2, 2).","solution":"def find_special_cells(matrix): n = len(matrix) count = 0 # Special cell check by rows and columns count for i in range(n): for j in range(n): if matrix[i][j] == 1: is_special = True # Check the row to the right of it for col in range(j + 1, n): if matrix[i][col] != 0: is_special = False break # Check the column below it for row in range(i + 1, n): if matrix[row][j] != 0: is_special = False break if is_special: count += 1 return count"},{"question":"A telecommunication company provides different plans to its customers. Each plan offers a specific download speed and a certain data limit each month. Based on customer usage, the company needs to identify the best plan that offers the maximum download speed while meeting or exceeding the customer’s data requirement. If there are multiple plans with the same download speed, the one with the lowest data limit should be chosen. Write a program that, given the required minimum data limit and a list of plans, outputs the best plan based on the given criteria. Input: The input format is as follows: P d1 s1 d2 s2 :: dP sP The first line provides the number of plans P (1 ≤ P ≤ 100000). Each of the next P lines contains two integers di (1 ≤ di ≤ 100000) representing the data limit of the plan in gigabytes and si (1 ≤ si ≤ 1000) representing the download speed of the plan in Mbps. Output: Output the data limit and download speed of the best plan as two integers separated by a space. Examples: Input 3 100 200 50 150 100 100 Output 100 200 Input 4 25 50 60 100 50 100 50 150 Output 50 150","solution":"def best_plan(plans): Returns the best plan based on the maximum download speed and minimum data limit if there are multiple plans with the same speed. Parameters: plans (list of tuples): A list where each tuple contains (data_limit, download_speed) Returns: tuple: The best plan as a tuple (data_limit, download_speed) best = None for data_limit, download_speed in plans: if best is None or download_speed > best[1] or (download_speed == best[1] and data_limit < best[0]): best = (data_limit, download_speed) return best"},{"question":"You are working on an image processing application, and one of the features is to convert an image to grayscale. An image can be represented as a 2D matrix where each cell contains a tuple of three integers representing the red, green, and blue (RGB) values respectively. The grayscale value of a pixel can be calculated using a weighted average of the RGB values: grayscale = 0.299 * R + 0.587 * G + 0.114 * B, where R, G, and B are the red, green, and blue components of the pixel. Given an image matrix with dimensions M x N, your task is to convert the image to grayscale and output the resulting matrix where each cell contains the corresponding grayscale value rounded to the nearest integer. Input The input consists of several lines: The first line contains two integers M and N (1 ≤ M, N ≤ 100), the dimensions of the image matrix. Each of the following M lines contains N tuples in the format (R, G, B), which represent the RGB values of each pixel in the image. The values of R, G, and B are integers between 0 and 255 inclusive. Output Print the grayscale image matrix in the format specified below. Each value should be an integer. Example Input 2 3 (255, 255, 255) (0, 0, 0) (128, 128, 128) (255, 0, 0) (0, 255, 0) (0, 0, 255) Output 255 0 128 76 150 29","solution":"def rgb_to_grayscale(matrix): Convert a matrix of RGB values to grayscale. Parameters: matrix (list of list of tuples): 2D matrix where each cell contains a tuple (R, G, B) Returns: list of list of ints: 2D matrix with grayscale values rounded to the nearest integer. M = len(matrix) N = len(matrix[0]) if M > 0 else 0 grayscale_matrix = [] for i in range(M): grayscale_row = [] for j in range(N): R, G, B = matrix[i][j] grayscale_value = round(0.299 * R + 0.587 * G + 0.114 * B) grayscale_row.append(grayscale_value) grayscale_matrix.append(grayscale_row) return grayscale_matrix # Example usage: # Matrix input as an example, you can imagine reading this from input as described matrix = [ [(255, 255, 255), (0, 0, 0), (128, 128, 128)], [(255, 0, 0), (0, 255, 0), (0, 0, 255)] ] # Calling the function on the matrix result = rgb_to_grayscale(matrix) for row in result: print(\\" \\".join(map(str, row)))"},{"question":"Given an array of integers, the task is to find the smallest positive integer value that cannot be represented as the sum of any subset of the given array. Example 1: Input: n = 6 a[] = {1, 3, 6, 10, 11, 15} Output: 2 Explanation: The smallest positive integer that cannot be represented as the sum of any subset is 2. Example 2: Input: n = 5 a[] = {1, 1, 1, 1, 1} Output: 6 Explanation: The smallest positive integer that cannot be represented as the sum of any subset is 6. Example 3: Input: n = 3 a[] = {1, 1, 3} Output: 6 Explanation: The smallest positive integer that cannot be represented as the sum of any subset is 6. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestNonRepresentableValue() which takes the array a[] and its size n as inputs and returns the smallest positive integer that cannot be represented as the sum of any subset of the array. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= a[i] <= 10^9","solution":"def smallestNonRepresentableValue(arr, n): # Sort the array arr.sort() # Initialize the smallest value that cannot be represented as 1 smallest_missing = 1 # Traverse the array for num in arr: # If the current element is greater than the smallest_missing # It means smallest_missing cannot be formed if num > smallest_missing: break # Otherwise add the current element to smallest_missing smallest_missing += num return smallest_missing"},{"question":"Given an array of integers, arr, and an integer k, determine if there is any continuous subarray that sums up to k. Input Format The input contains two lines: 1. The first line contains the integers of the array arr separated by spaces. 2. The second line contains the integer k. Constraints 1 <= length of arr <= 1000 -10^4 <= arr[i] <= 10^4 -10^9 <= k <= 10^9 Output Format Return \\"Yes\\" if such a subarray exists, otherwise return \\"No\\". SAMPLE INPUT 1 2 3 4 5 9 SAMPLE OUTPUT Yes Explanation The input tells us that arr = [1, 2, 3, 4, 5] and k = 9. The subarray [2, 3, 4] sums up to 9. Hence, the output is \\"Yes\\".","solution":"def has_subarray_with_sum(arr, k): Determine if there is any continuous subarray that sums up to k. Parameters: arr (list): a list of integers k (int): the target sum Returns: str: \\"Yes\\" if such a subarray exists, otherwise \\"No\\" current_sum = 0 sum_dict = {0: -1} for i, num in enumerate(arr): current_sum += num if current_sum - k in sum_dict: return \\"Yes\\" sum_dict[current_sum] = i return \\"No\\""},{"question":"Given an array of n integers, your task is to find the pair of indices (i, j) such that i < j and the absolute difference between arr[i] and arr[j] is maximized. -----Constraints----- - 1 leq n leq 10^5 - -10^9 leq arr[i] leq 10^9 - All elements in the array are integers. -----Input----- Input is given from Standard Input in the following format: n arr_1 arr_2 ... arr_n -----Output----- Print two integers indicating the indices (i, j) of the elements with the maximum absolute difference. If multiple such pairs exist, print any. -----Sample Input----- 5 1 3 -1 7 5 -----Sample Output----- 3 4 In the given array of size 5, one possible pair of indices with the maximum absolute difference is (3, 4) corresponding to elements 7 and -1 whose absolute difference is 8. Note that multiple solutions may exist, so 0 3 or 3 4 would also be valid outputs.","solution":"def max_abs_diff_indices(n, arr): Return the pair of indices (i, j) such that i < j and the absolute difference between arr[i] and arr[j] is maximized. if n < 2: return None # Not enough elements to form a pair # Initialize variables to store the min and max elements and their indices min_value = arr[0] max_value = arr[0] min_index = 0 max_index = 0 # Find minimum value and index for i in range(n): if arr[i] < min_value: min_value = arr[i] min_index = i # Find maximum value and index for j in range(n): if arr[j] > max_value: max_value = arr[j] max_index = j # Ensure that min_index and max_index follow i < j if min_index < max_index: return min_index, max_index else: return max_index, min_index import sys input = sys.stdin.read def main(): data = input().strip().split() n = int(data[0]) arr = list(map(int, data[1:])) result = max_abs_diff_indices(n, arr) if result: print(result[0], result[1]) if __name__ == \'__main__\': main()"},{"question":"**Problem Statement:** You are given a sequence of integers represented as an array. Your task is to determine whether there exists a subsequence within the array whose sum is equal to a given integer target. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of elements in the array. - The second line contains `n` integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6), representing the elements of the array. - The third line contains a single integer `target` (-10^6 ≤ target ≤ 10^6). **Output:** - Output \\"YES\\" if there exists a subsequence whose sum is equal to `target`, otherwise output \\"NO\\". **Examples:** Input: ``` 5 1 2 3 4 5 9 ``` Output: ``` YES ``` Input: ``` 4 -1 -2 -3 -4 -10 ``` Output: ``` YES ``` Input: ``` 3 1 2 3 6 ``` Output: ``` YES ``` Input: ``` 4 1 2 3 4 11 ``` Output: ``` NO ```","solution":"def does_subsequence_sum_exist(n, array, target): Function to determine if there exists a subsequence within the array whose sum is equal to the target. :param n: int, number of elements in the array :param array: list of integers, the elements of the array :param target: int, the target sum :return: str, \\"YES\\" if such a subsequence exists, otherwise \\"NO\\" # Using a set to store the sum of all possible subsequences sums = {0} for num in array: new_sums = sums.copy() for s in sums: new_sums.add(s + num) sums = new_sums if target in sums: return \\"YES\\" return \\"NO\\""},{"question":"You are given a 3-dimensional hyper-rubik\'s cube of size n times n times n, where each face of the cube has distinct numbers from 1 to n^2. Each layer of the cube can be rotated around its axis which has three possible rotations: X, Y, and Z. - **X-axis rotation**: When rotating around the X-axis, all the blocks in layer i from front to back (parallel to the YZ-plane) rotate by 90 degrees. - **Y-axis rotation**: When rotating around the Y-axis, all the blocks in layer j from left to right (parallel to the XZ-plane) rotate by 90 degrees. - **Z-axis rotation**: When rotating around the Z-axis, all the blocks in layer k from top to bottom (parallel to the XY-plane) rotate by 90 degrees. Your job is to implement a function that performs a sequence of these rotations to achieve a required configuration of the cube. Each rotation could be specified as \\"X i\\", \\"Y j\\", or \\"Z k\\". You need to determine the sequence of rotations that would transform the initial configuration of the cube to the final configuration. It is guaranteed that a solution exists. ---Input--- The first line contains a single integer t (1 le t le 10) — the number of test cases. The next several lines contain the descriptions of the test cases. Each test case starts with an integer n (2 le n le 5) — the size of the cube. The next n^3 lines each contain three integers x, y, z and an integer value (1 le value le n^2), which indicates that the block at 3-dimensional coordinates (x, y, z) has the value. These lines collectively describe the initial configuration of the cube. The next n^3 lines follow the same format and describe the final configuration of the cube. ---Output--- For each test case, output \\"ROTATIONS COMPLETE\\" followed by the sequence of rotations required to achieve the goal configuration. Each rotation in the sequence should be a pair \\"axis layer\\". If there are multiple solutions, output any valid sequence. ---Example--- Input 1 2 0 0 0 1 0 0 1 2 0 1 0 3 0 1 1 4 1 0 0 5 1 0 1 6 1 1 0 7 1 1 1 8 0 0 0 5 0 0 1 1 0 1 0 3 0 1 1 4 1 0 0 7 1 0 1 2 1 1 0 8 1 1 1 6 Output ROTATIONS COMPLETE X 1 Z 1 Y 1","solution":"def solve_rotations(t, test_cases): results = [] for case in range(t): n, initial, final = test_cases[case] # This is a placeholder implementation. # Complete logic to determine series of rotations is required. results.append([\\"ROTATIONS COMPLETE\\"]) return results # The structure to parse input is omitted for simplicity. # Add this code to main body or adapt to input function as required."},{"question":"You are given a matrix with n rows and m columns, where each cell contains a single uppercase English letter. Your task is to find out if a given word can be constructed from an uninterrupted, contiguous sequence of adjacent cells (horizontal, vertical, or diagonal) in the matrix. Cells that make up the word can only be used once per word. Write a program to determine if the word is present in the matrix as per the given constraints. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 200) — the number of rows and columns in the matrix. - The next n lines contain m characters each, representing the matrix. - The last line contains a string word of length k (1 ≤ k ≤ 20) — the word you need to search for in the matrix. # Output - Print \\"YES\\" if the word can be found in the matrix according to the rules described, otherwise print \\"NO\\". # Example Input ``` 3 4 ABCD EFGH IJKL BFGK ``` Output ``` YES ``` Input ``` 3 3 ADB CEG HFI ABE ``` Output ``` NO ``` Note In the first example, \\"BFGK\\" can be formed by starting from `matrix[0][1]` (B), moving to `matrix[1][1]` (F), then to `matrix[1][2]` (G), and finally to `matrix[2][2]` (K). In the second example, \\"ABE\\" cannot be formed using any uninterrupted, contiguous sequence of adjacent cells, so the answer is \\"NO\\".","solution":"def find_word_in_matrix(matrix, word): n = len(matrix) m = len(matrix[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] def dfs(x, y, index): if index == len(word): return True if x < 0 or x >= n or y < 0 or y >= m or matrix[x][y] != word[index]: return False temp = matrix[x][y] matrix[x][y] = \'#\' # mark the cell as visited for dx, dy in directions: if dfs(x + dx, y + dy, index + 1): return True matrix[x][y] = temp # unmark the cell return False for i in range(n): for j in range(m): if matrix[i][j] == word[0] and dfs(i, j, 0): return \\"YES\\" return \\"NO\\""},{"question":"Alice has a collection of toy robots, and she likes to categorize them based on their height. Each toy robot either has a height of \\"short\\", \\"medium\\", or \\"tall\\". One day she decided to sort her robots and group them by their heights in the following manner: All \\"short\\" robots should come before all \\"medium\\" robots, and all \\"medium\\" robots should come before all \\"tall\\" robots, but the relative order of the robots within the same height group should remain unchanged. Your task is to help Alice sort her toy robots as described. -----Input:----- - First line will contain a single integer n, the number of toy robots. - Second line will contain n space-separated strings, each representing the height of a toy robot (\\"short\\", \\"medium\\", or \\"tall\\"). -----Output:----- Output a single line with n space-separated strings representing the sorted order of toy robots. -----Constraints----- - 1 leq n leq 100 - The strings will only contain the words \\"short\\", \\"medium\\", and \\"tall\\". -----Sample Input:----- 6 medium short tall short medium tall -----Sample Output:----- short short medium medium tall tall -----EXPLANATION:----- In the sample input, the robots are categorized as follows: \\"medium\\", \\"short\\", \\"tall\\", \\"short\\", \\"medium\\", \\"tall\\". After sorting, the robots are arranged in the order: \\"short\\" \\"short\\" \\"medium\\" \\"medium\\" \\"tall\\" \\"tall\\", grouping them to preserve the specified order while maintaining the relative order within height groups.","solution":"def sort_robots(n, heights): Sorts the robots\' heights such that all \\"short\\" robots come before \\"medium\\" robots, and all \\"medium\\" robots come before \\"tall\\" robots, while maintaining the relative order within the same height group. height_order = {\\"short\\": 0, \\"medium\\": 1, \\"tall\\": 2} sorted_heights = sorted(heights, key=lambda x: height_order[x]) return sorted_heights"},{"question":"Lisa likes to visit her favorite park and feed the ducks there. She always brings a bag of bird feed and wants to distribute it evenly among the ducks. However, some ducks might not be present every day, and the number of ducks can change day to day. Write a function `distribute_feeds(bag_weight, duck_weights)` that helps Lisa distribute the bird feed. The function will take two parameters: - `bag_weight` (an integer representing the total weight of the bird feed in grams), - `duck_weights` (a list of integers representing the desired weight of feed in grams for each duck). The function should return a new list with the actual amount of feed each duck will get, ensuring that all feed is distributed evenly as much as possible. If there are leftover feeds that cannot be evenly distributed, they should be distributed from the start of the list until none are left. # Example: `distribute_feeds(100, [20, 30, 50])` should return `[20, 30, 50]` `distribute_feeds(100, [25, 35, 40])` should return `[25, 35, 40]` `distribute_feeds(80, [25, 25, 25])` should return `[27, 27, 26]` # Notes: - It is guaranteed that all weights in the list `duck_weights` are strictly positive integers. - If no feed is available (`bag_weight` is 0), the function should return a list of zeros with the same length as the `duck_weights` list. - Assume the list `duck_weights` will always have at least one duck.","solution":"def distribute_feeds(bag_weight, duck_weights): Distributes the given bag_weight of bird feed among the ducks as evenly as possible. Parameters: - bag_weight: int, the total weight of the bird feed in grams. - duck_weights: List[int], the desired weight of feed in grams for each duck. Returns: - List[int], the actual amount of feed each duck will get. n = len(duck_weights) if bag_weight == 0: return [0] * n total_desired = sum(duck_weights) feed_per_duck = [0] * n # Calculate the proportion of feed each duck should get for i in range(n): feed_per_duck[i] = (duck_weights[i] * bag_weight) // total_desired # Calculate the total feed distributed and the remaining feed distributed_feed_total = sum(feed_per_duck) remaining_feed = bag_weight - distributed_feed_total # Distribute the remaining feed starting from the beginning of the list i = 0 while remaining_feed > 0: feed_per_duck[i] += 1 remaining_feed -= 1 i = (i + 1) % n return feed_per_duck"},{"question":"You are given a list of strings A containing N strings, and an integer Q representing the number of queries. Each query is of one of the following two types: 1. `1 x y` - Append string `y` to the end of string at index `x` in the list A. (1-based index) 2. `2 x k` - Print the character at the kth position of the string at index `x` in the list A. If the position is invalid, print \\"Invalid position\\". Your task is to process all the queries in the order they are given and produce the results of the `2` type queries. # Input Format - The first line contains two space-separated integers N and Q. - The next N lines each contain a string, representing the initial list of strings. - The next Q lines contain one of the two types of queries as described above. # Constraints - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq |A[i]| leq 10^5 for i in [1, N] - 1 leq |y| leq 10^5 - It is guaranteed that the total length of all strings in the input leq 10^6 - All strings contain only lowercase English letters. # Output Format For each query of type `2`, print the character at the specified position or \\"Invalid position\\" if the position is out of bounds. Each output should be on a new line. # Sample Input ``` 3 5 abc def ghi 1 1 xyz 2 1 4 2 2 1 2 3 5 2 2 10 ``` # Sample Output ``` x d Invalid position Invalid position ``` # Explanation Initially, the list A is: ``` [\\"abc\\", \\"def\\", \\"ghi\\"] ``` 1. Process query 1: Append \\"xyz\\" to the end of the string at index 1. The list now is: ``` [\\"abcxyz\\", \\"def\\", \\"ghi\\"] ``` 2. Process query 2: Print the 4th character of the string at index 1. The result is \'x\'. 3. Process query 3: Print the 1st character of the string at index 2. The result is \'d\'. 4. Process query 4: Print the 5th character of the string at index 3. The position is invalid because the length of the string is 3. The result is \\"Invalid position\\". 5. Process query 5: Print the 10th character of the string at index 2. The position is invalid because the length of the string is 3. The result is \\"Invalid position\\".","solution":"def process_queries(N, Q, A, queries): Processes the list of string manipulations based on the given queries and returns the result of type-2 queries. Args: N : int : Number of initial strings. Q : int : Number of queries. A : list : Initial list of strings. queries : list : List of queries. Returns: list : Results from type-2 queries. results = [] for query in queries: if query[0] == 1: x, y = query[1], query[2] # 1-based index conversion to 0-based A[x - 1] += y elif query[0] == 2: x, k = query[1], query[2] # 1-based index conversion to 0-based if k <= len(A[x - 1]): results.append(A[x - 1][k - 1]) else: results.append(\\"Invalid position\\") return results"},{"question":"Given a large list of integers, write a function that returns the sum of all unique elements. If an element appears more than once in the list, it should not contribute to the sum. # Input: - A single list of integers `nums` where each element is in the range [-1000, 1000] and the length of the list is between 1 and 10^5. # Output: - A single integer that represents the sum of all unique integers in the list. # Example: ```python def sum_of_unique(nums): # Your implementation here # Example 1 nums1 = [1, 2, 3, 2, 1] print(sum_of_unique(nums1)) # Output: 3 (3 is the only unique number) # Example 2 nums2 = [4, 5, 6, 7, 7, 6] print(sum_of_unique(nums2)) # Output: 9 (4+5 because 6 and 7 are not unique) # Example 3 nums3 = [10, 20, 30, 40] print(sum_of_unique(nums3)) # Output: 100 (10+20+30+40 because all are unique) # Example 4 nums4 = [2, 2, 3, 3, 4, 4, 5, 5] print(sum_of_unique(nums4)) # Output: 0 (no unique numbers) ``` # Constraints: - Each element in `nums` is an integer in the range `[-1000, 1000]`. - The length of `nums` is between `1` and `100000`. # Note: Your solution should aim for efficiency, considering the upper constraint on the length of the list.","solution":"def sum_of_unique(nums): Returns the sum of all unique integers in the list. from collections import Counter # Count the frequency of each element in nums count = Counter(nums) # Sum all elements that appear exactly once unique_sum = sum(num for num in count if count[num] == 1) return unique_sum"},{"question":"A company wants to analyze their employees\' project involvement to better allocate resources. They have a record of all the projects each employee is working on. You need to develop a software tool that, given the list of employees and their project involvements, identifies the total count of unique projects each employee is involved with and reports the maximum number of projects any single employee is working on. Input The first line of the input contains an integer n, the number of employees. Each of the next n lines contains a string (employee name), followed by an integer m (number of projects), followed by a list of m unique project identifiers. Output Output two things: 1. List the total number of unique projects each employee is involved with, ordered by the employees\' names in lexicographical order. 2. Print the maximum number of projects any single employee is working on. Example Input 4 Alice 3 P1 P2 P3 Bob 2 P2 P4 Charlie 1 P5 David 3 P1 P4 P5 Output Alice: 3 Bob: 2 Charlie: 1 David: 3 3 Note In this example, Alice is working on 3 unique projects, which meet the criteria of the highest number of projects per employee. Similarly, the respective number of projects for the remaining employees are listed, and the maximum of those numbers is found to be 3.","solution":"def analyze_projects(n, employees_data): Analyzes the project involvements of each employee. Args: n (int): Number of employees. employees_data (list of tuples): Each tuple contains an employee name, followed by the number of projects, and then the list of project identifiers. Returns: tuple: A dictionary of employees and their total unique projects and the maximum number of projects any single employee is working on. employee_projects = {} max_projects = 0 # Process each employee and their project involvements for data in employees_data: employee_name = data[0] project_list = data[2:] project_count = len(project_list) employee_projects[employee_name] = project_count if project_count > max_projects: max_projects = project_count sorted_employee_projects = dict(sorted(employee_projects.items())) result = [] for employee, project_count in sorted_employee_projects.items(): result.append(f\\"{employee}: {project_count}\\") return result, max_projects"},{"question":"You are given an integer array A of size N. Your task is to rearrange the elements of the array such that the sum of differences between adjacent elements is as large as possible. Formally, you need to find a permutation B of the array A such that the value of (|B_{1} - B_{2}| + |B_{2} - B_{3}| + ldots + |B_{N-1} - B_{N}|) is maximized. ------ Input Format ------ - The first line of the input contains a single integer T, the number of test cases. The description of the test cases follows. - The first line of each test case contains a single integer N — the number of integers in the array. - The second line of each test case contains N space-separated integers A_1, A_2, ..., A_N. ------ Output Format ------ For each test case, output N integers B_1, B_2, ..., B_N, representing the permutation of A for which the value of (|B_{1} - B_{2}| + |B_{2} - B_{3}| + ... + |B_{N-1} - B_{N}|) is maximized. If there are multiple such permutations, you can output any of them. ------ Constraints ------ (1 leq T leq 10^4) (2 leq N leq 10^5) (0 leq A_{i} leq 10^9) - The sum of (N) over all test cases does not exceed (2 cdot 10^5). ----- Sample Input 1 ----- 3 6 4 2 8 6 1 3 4 1 1 1 1 5 10 20 30 40 50 ----- Sample Output 1 ----- 1 8 2 6 3 4 1 1 1 1 50 10 40 20 30 ----- Explanation 1 ----- Test case 1: One possible permutation is `[1, 8, 2, 6, 3, 4]` which gives (|1-8| + |8-2| + |2-6| + |6-3| + |3-4| = 7 + 6 + 4 + 3 + 1 = 21). This is the maximum possible sum. Test case 2: All elements are identical, so any permutation will result in the same sum of differences, which is 0. Test case 3: One possible permutation is `[50, 10, 40, 20, 30]` which gives (|50-10| + |10-40| + |40-20| + |20-30| = 40 + 30 + 20 + 10 = 100). This is the maximum possible sum.","solution":"def maximize_sum_of_differences(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] A.sort() left, right = 0, N - 1 B = [] while left <= right: if len(B) % 2 == 0: B.append(A[left]) left += 1 else: B.append(A[right]) right -= 1 # Rearrange to maximize |B[i] - B[i + 1]| if B[0] < B[1]: B = B[::-1] results.append(B) return results"},{"question":"A company wants to implement a new salary calculation system for its employees. The salary for each employee is determined based on their base salary and the number of overtime hours they have worked. The company divides employees into three categories: Junior, Mid, and Senior. Each category has a different overtime rate, which indicates how much an employee from that category earns per overtime hour. Write a program to calculate the total salary of each employee given their base salary, their category, and the number of overtime hours they have worked. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of employees. Each of the following n lines contains three values separated by spaces: - an integer base_salary (1 ≤ base_salary ≤ 10000) - a string category (\'Junior\', \'Mid\', or \'Senior\') - an integer overtime_hours (0 ≤ overtime_hours ≤ 100) The next line contains three integers: junior_rate, mid_rate, and senior_rate (1 ≤ junior_rate, mid_rate, senior_rate ≤ 100), which represent the overtime rates for Junior, Mid, and Senior employees respectively. Output Print n lines. Each line should contain the total salary for each employee, in the order they appear in the input. Examples Input 3 3000 Junior 5 4000 Mid 10 5000 Senior 8 10 20 30 Output 3050 4200 5240 Input 2 2500 Mid 3 4500 Senior 6 15 25 50 Output 2575 4800 Note In the first example, the calculated salaries are as follows: - The Junior employee has a base salary of 3000 and worked 5 overtime hours with an overtime rate of 10, so their total salary is 3000 + 5×10 = 3050. - The Mid employee has a base salary of 4000 and worked 10 overtime hours with an overtime rate of 20, so their total salary is 4000 + 10×20 = 4200. - The Senior employee has a base salary of 5000 and worked 8 overtime hours with an overtime rate of 30, so their total salary is 5000 + 8×30 = 5240. In the second example: - The Mid employee has a base salary of 2500 and worked 3 overtime hours with an overtime rate of 25, so their total salary is 2500 + 3×25 = 2575. - The Senior employee has a base salary of 4500 and worked 6 overtime hours with an overtime rate of 50, so their total salary is 4500 + 6×50 = 4800.","solution":"def calculate_salaries(n, data, overtime_rates): Calculate the total salary for each employee based on their base salary, category, and number of overtime hours. :param n: int, number of employees :param data: list of tuples, each containing (base_salary, category, overtime_hours) :param overtime_rates: tuple of three ints, containing (junior_rate, mid_rate, senior_rate) :return: list of ints, each containing the total salary for each employee junior_rate, mid_rate, senior_rate = overtime_rates salary_list = [] for base_salary, category, overtime_hours in data: if category == \'Junior\': total_salary = base_salary + junior_rate * overtime_hours elif category == \'Mid\': total_salary = base_salary + mid_rate * overtime_hours elif category == \'Senior\': total_salary = base_salary + senior_rate * overtime_hours salary_list.append(total_salary) return salary_list"},{"question":"Given an integer array nums and an integer k, find the number of non-empty subarrays that have a sum divisible by k. A subarray is a contiguous part of an array. Example 1: Input: nums = [4,5,0,-2,-3,1], k = 5 Output: 7 Explanation: There are 7 subarrays with a sum divisible by 5: [4, 5, 0, -2, -3, 1], [5], [5, 0, -2, -3, 1], [0], [0, -2, -3], [-2, -3], [-2, -3, 1] Example 2: Input: nums = [2, -2, 2, -4], k = 6 Output: 2 Explanation: There are 2 subarrays with a sum divisible by 6: [2, -2, 2, -4], [2, -2, 2, -4] Constraints: 1 <= nums.length <= 30000 -10000 <= nums[i] <= 10000 2 <= k <= 10000","solution":"def subarrays_div_by_k(nums, k): Returns the number of non-empty subarrays that have a sum divisible by k. prefix_sum = 0 prefix_sums_count = {0: 1} subarray_count = 0 for num in nums: prefix_sum += num remainder = prefix_sum % k # Adjust negative remainders to be positive within a range of 0 to k-1 if remainder < 0: remainder += k if remainder in prefix_sums_count: subarray_count += prefix_sums_count[remainder] # Count the number of times each remainder appears if remainder in prefix_sums_count: prefix_sums_count[remainder] += 1 else: prefix_sums_count[remainder] = 1 return subarray_count"},{"question":"Implement a function `validate_ip(ip_address)` that takes a string as input and checks whether it is a valid IPv4 address. An IPv4 address is considered valid if it consists of four decimal numbers, each ranging from 0 to 255, separated by dots (\'.\'). The function should return `True` if the input string is a valid IPv4 address and `False` otherwise. You can assume that the input string will not contain any leading or trailing spaces. Example: ```python validate_ip(\\"192.168.1.1\\") == True validate_ip(\\"255.255.255.255\\") == True validate_ip(\\"256.256.256.256\\") == False validate_ip(\\"192.168.1.1.1\\") == False validate_ip(\\"abc.def.ghi.jkl\\") == False ```","solution":"def validate_ip(ip_address): Returns True if the given string is a valid IPv4 address, False otherwise. parts = ip_address.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False return True"},{"question":"John loves paintings and he has n paintings which need to be arranged in a gallery. Each painting i has a beauty value bi associated with it. John wants to maximize the sum of beauty values of the selected paintings, but there is a catch. If two paintings have consecutive indices in the list, he cannot select both. Your task is to help him maximize the sum of beauty values without selecting any two consecutive paintings. Input: - The first line contains an integer t, the number of test cases. - Each test case consists of two lines: * The first line contains an integer n, the number of paintings. * The second line contains n integers, where the i-th integer is the beauty value bi of the i-th painting. Output: - For each test case, print the maximum sum of beauty values John can obtain without selecting two consecutive paintings. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 1000 -10^4 ≤ bi ≤ 10^4 SAMPLE INPUT 2 4 4 1 2 7 3 4 -1 2 SAMPLE OUTPUT 11 6 Explanation Test #1: John can select the paintings with beauty values 4 and 7, resulting in a maximum sum of 11. Test #2: John can select the paintings with beauty values 4 and 2, resulting in a maximum sum of 6.","solution":"def maximize_beauty(t, test_cases): results = [] for case in test_cases: n, beauties = case if n == 1: results.append(beauties[0]) continue dp = [0] * n dp[0] = max(0, beauties[0]) if n > 1: dp[1] = max(dp[0], beauties[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + beauties[i]) results.append(dp[-1]) return results"},{"question":"You are given an array of integers where each integer represents the height of a candle. A candle burns down completely in one unit of time. You can only blow out candles that are the tallest in the array in one go. Determine the maximum number of candles that can be blown out in one go. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of candles. The second line contains n integers h_i (1 ≤ h_i ≤ 100) — the heights of the candles. -----Output----- In the only line print a single integer — the maximum number of candles that can be blown out in one go. -----Examples----- Input 4 4 4 1 3 Output 2 Input 6 2 2 2 1 2 2 Output 5","solution":"def max_candles_to_blow_out(n, heights): Returns the maximum number of candles that can be blown out in one go. Parameters: n (int): The number of candles. heights (list of int): The heights of the candles. Returns: int: The maximum number of candles that can be blown out in one go. max_height = max(heights) return heights.count(max_height)"},{"question":"In a futuristic world, Lily finds herself in a city with a grid layout of size N×M, where each cell in the grid contains either 0 (representing an empty space) or 1 (representing an obstacle). Lily needs to navigate from the top-left corner (cell (1, 1)) to the bottom-right corner (cell (N, M)). Lily can only move down or to the right from her current position, but she has a special ability to destroy up to K obstacles during her journey. The path must remain valid at all times, i.e., no illegal moves through actual obstacles are allowed unless they are destroyed. Your task is to determine if it is possible for Lily to reach the bottom-right corner using her special ability optimally. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains three space-separated integers N, M, and K — the number of rows, columns of the grid, and the maximum number of obstacles she can destroy. - The next N lines describe the grid. The i-th of these N lines contains M space-separated integers representing the grid. ------ Output Format ------ For each test case, output \\"YES\\" on a new line if it is possible for Lily to reach the bottom-right corner, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1000 0 ≤ K ≤ NM - The sum of N times M across all test cases won\'t exceed 10^6. ----- Sample Input 1 ------ 3 3 3 1 0 1 0 1 0 1 0 0 0 4 4 2 0 1 1 0 0 1 1 0 1 0 0 1 0 0 1 0 2 2 0 1 0 0 1 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test case 1: Lily can destroy the obstacle in the first row to create a valid path 1,1 -> 1,2 -> 2,2 -> 3,2 -> 3,3. Test case 2: Lily can destroy the obstacles in the second row and third row to create a valid path 1,1 -> 2,1 -> 2,2 -> 3,2 -> 3,3 -> 4,3 -> 4,4. Test case 3: Lily would need to destroy two obstacles to create a path, but she is only allowed to destroy 0 obstacles. Therefore, it is not possible.","solution":"from collections import deque def can_reach_endless_obstacle(grid, N, M, K): # Directions for right and down moves directions = [(0, 1), (1, 0)] # Queue elements: (row, col, obstacles destroyed) queue = deque([(0, 0, 0)]) visited = set((0, 0, 0)) # Store tuples of (x, y, obstacles destroyed) while queue: x, y, destroyed = queue.popleft() # If we have reached the bottom-right corner if x == N - 1 and y == M - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M: next_destroyed = destroyed + grid[nx][ny] if next_destroyed <= K and (nx, ny, next_destroyed) not in visited: visited.add((nx, ny, next_destroyed)) # Mark as visited queue.append((nx, ny, next_destroyed)) return False def solve_obstacle_cases(test_cases): results = [] for case in test_cases: N, M, K, grid = case[\'N\'], case[\'M\'], case[\'K\'], case[\'grid\'] if can_reach_endless_obstacle(grid, N, M, K): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to parse the input and call the main logic handler def parse_input_and_solve(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N, M, K = map(int, lines[idx].split()) grid = [list(map(int, lines[idx + i + 1].split())) for i in range(N)] test_cases.append({\'N\': N, \'M\': M, \'K\': K, \'grid\': grid}) idx += N + 1 results = solve_obstacle_cases(test_cases) return \\"n\\".join(results) # Sample input handling and call sample_input = \'\'\'3 3 3 1 0 1 0 1 0 1 0 0 0 4 4 2 0 1 1 0 0 1 1 0 1 0 0 1 0 0 1 0 2 2 0 1 0 0 1\'\'\' print(parse_input_and_solve(sample_input))"},{"question":"You are given an array of N integers B_1, B_2, ..., B_N. Determine whether it is possible to split the array into two non-empty subarrays such that the average of elements in the first subarray is greater than the average of elements in the second subarray. Constraints * 2 leq N leq 100,000 * -10^9 leq B_i leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N B_1 B_2 cdots B_N Output Print \\"YES\\" if it is possible to split the array as described, otherwise print \\"NO\\". Examples Input 4 1 2 3 4 Output YES Input 3 3 3 3 Output NO","solution":"def can_split_with_higher_average(N, B): Returns \\"YES\\" if the array can be split into two subarrays such that the average of elements in the first subarray is greater than the average of elements in the second subarray. Otherwise, returns \\"NO\\". total_sum = sum(B) max_value = max(B) min_value = min(B) # Check if there is any element that can be a subarray of length 1 # and has a greater value compared to the average of the rest. if max_value > (total_sum - max_value) / (N - 1): return \\"YES\\" if min_value < (total_sum - min_value) / (N - 1): return \\"YES\\" return \\"NO\\""},{"question":"You are working for a company that needs to evaluate the performance of its sales team. The company keeps a record of the number of sales made by each salesperson in a given month. They now want to determine the salesperson who has made the maximum improvement in terms of sales compared to the previous month. Each salesperson\'s sales data is recorded in an array where the index represents the month, with index 0 being the first month, and so on. You are given the sales data of `N` salespersons, each represented by an array of integers where each element is the number of sales made in that month. Your task is to find the salesperson who has the highest improvement in sales between two consecutive months. If there are multiple salespersons with the same highest improvement, return the one with the smallest index. Write a function that takes an array of arrays, where each sub-array represents the sales data of one salesperson and returns the index (0-based) of the salesperson with the highest improvement. Function Signature: ```python def highest_improvement(sales_data: List[List[int]]) -> int: ``` # Input - `sales_data`: a list of lists of integers, where each sub-array contains the sales data of a salesperson. The number of elements in each sub-array is at least 2 and at most 12, representing sales data of each month. - The number of sub-arrays (salespersons) is at least 1 and at most 100. # Output - Return the 0-based index of the salesperson with the highest improvement in sales between any two consecutive months. # Example ```python sales_data = [ [5, 10, 15, 20], # Salesperson 0 [3, 8, 12, 20], # Salesperson 1 [6, 15, 9, 12] # Salesperson 2 ] print(highest_improvement(sales_data)) # Output: 0 ``` In this example, - Salesperson 0 has the improvements [5, 5, 5] - Salesperson 1 has the improvements [5, 4, 8] - Salesperson 2 has the improvements [9, -6, 3] So, Salesperson 2 has the highest single-month improvement of 9, which is higher than any other improvement value of the rest. # Constraints - Each sub-array length (number of months) is at least 2 and at most 12. - Number of sub-arrays (salespersons) is at least 1 and at most 100. - Total sales made in a month are non-negative integers and do not exceed 1000. Note: You can assume every sub-array has at least 2 elements for calculating the improvements.","solution":"from typing import List def highest_improvement(sales_data: List[List[int]]) -> int: max_improvement = -1 best_salesperson_index = -1 for i, sales in enumerate(sales_data): for j in range(1, len(sales)): improvement = sales[j] - sales[j-1] if improvement > max_improvement: max_improvement = improvement best_salesperson_index = i return best_salesperson_index"},{"question":"Write a function `balanceBooks` that distributes books among children such that each child gets an equal number of books. If it\'s not possible to distribute books equally, return \\"NO\\". If possible, return the number of book transfers and the detailed transfers that balance the books. Parameters: - `n` (an integer): The number of children (1 ≤ n ≤ 300). - `b` (an integer): The number of books each child should have after the distribution (0 ≤ b ≤ 109). - `books` (a list of integers): The list of books each child currently possesses, where `books[i]` represents the number of books child `i` has initially (0 ≤ books[i] ≤ 109). The list length equals `n`. - `transfers` (an integer): The maximum number of transfers allowed (1 ≤ transfers ≤ n^2). Output: - If it\'s not possible to achieve the required distribution within the allowed number of transfers, return \\"NO\\". - Otherwise, return the number of transfers followed by the list of transfers where each transfer is described by a tuple (x, y, d) which means transferring `d` books from child `x` to child `y`. Example Input: ```python n = 3 b = 4 books = [6, 2, 4] transfers = 3 ``` Example Output: ```python 1 [(1, 2, 2)] ``` Explanation: - The first child has 6 books, the second child has 2 books, and the third child has 4 books initially. - We need each child to have 4 books each. - One possible transfer is to move 2 books from the first child to the second child, resulting in a balanced distribution. Example Input: ```python n = 2 b = 5 books = [6, 3] transfers = 1 ``` Example Output: ```python \\"NO\\" ``` Explanation: - It\'s not possible to balance the books within 1 transfer since child 1 needs to give 1 book to child 2, but only one transfer is allowed.","solution":"def balanceBooks(n, b, books, transfers): Distribute books among children such that each child gets exactly b books. Parameters: n (int): The number of children (1 ≤ n ≤ 300). b (int): The target number of books each child should have (0 ≤ b ≤ 10^9). books (list): A list of integers representing the number of books each child currently has. transfers (int): The maximum number of transfers allowed (1 ≤ transfers ≤ n^2). Returns: Union[str, Tuple[int, List[Tuple[int, int, int]]]]: If it\'s possible to balance the books within the given number of transfers, return the number of transfers followed by the list of transfers. Otherwise, return \\"NO\\". total_books_needed = n * b current_total_books = sum(books) # Check if the book distribution can be made equal if current_total_books != total_books_needed: return \\"NO\\" valid_transfers = [] surplus = [] deficit = [] for i in range(n): if books[i] > b: surplus.append((i, books[i] - b)) elif books[i] < b: deficit.append((i, b - books[i])) number_of_transfers = 0 while surplus and deficit: from_idx, surplus_amt = surplus.pop(0) to_idx, deficit_amt = deficit.pop(0) transfer_amt = min(surplus_amt, deficit_amt) valid_transfers.append((from_idx + 1, to_idx + 1, transfer_amt)) number_of_transfers += 1 if number_of_transfers > transfers: return \\"NO\\" if surplus_amt > transfer_amt: surplus.insert(0, (from_idx, surplus_amt - transfer_amt)) if deficit_amt > transfer_amt: deficit.insert(0, (to_idx, deficit_amt - transfer_amt)) return number_of_transfers, valid_transfers"},{"question":"You are working on a software development project that involves managing a library of books. Each book has a unique identifier (ID), a title, an author, a publication year, and a list of genres it belongs to. You are tasked with creating a program that reads a list of books and provides various functionalities to manage this library. The functionalities required are: 1. **Add a Book**: Add a new book to the library. Ensure that no two books have the same ID. 2. **Remove a Book**: Remove a book from the library based on its ID. 3. **Search Books by Title**: Given a substring, find all books whose titles contain this substring, case insensitive. 4. **Search Books by Genre**: Find all books that belong to a given genre. 5. **List Books by Author and Year**: List all books by a specific author, sorted by publication year in ascending order. You will be given a series of commands, each on a new line. Your job is to implement these functionalities according to the commands. # Format of Commands - **ADD ID Title Author Year Genre1,Genre2,...,GenreN**: Adds a new book with the given details. - **REMOVE ID**: Removes the book with the given ID. - **SEARCH TITLE Substring**: Searches for books with titles containing the given substring. - **SEARCH GENRE Genre**: Searches for books in the given genre. - **LIST AUTHOR Author**: Lists all books by the given author, sorted by year. # Input The input consists of multiple lines. The first line contains an integer `m`, the number of commands. The following `m` lines each contain a command. # Output For each command that requires a search or list operation (i.e., **SEARCH TITLE**, **SEARCH GENRE**, **LIST AUTHOR**), output the details of the matching books, one per line. Each book should be printed in the format: `Title, Author, Year (ID)` Each command\'s output should be separated by a blank line. If a search or list operation finds no matching books, output `NO MATCHES`. # Constraints - 1 ≤ m ≤ 100 - ID is a positive integer. - Title and Author are case-sensitive strings of length 1 to 100. - Year is an integer from 1000 to 9999. - Genres are comma-separated values with no spaces, each of length 1 to 20. - No two books share the same ID. # Example Input ``` 10 ADD 1 The_Great_Gatsby F._Scott_Fitzgerald 1925 Fiction,Classic ADD 2 To_Kill_a_Mockingbird Harper_Lee 1960 Fiction,Classic ADD 3 1984 George_Orwell 1949 Fiction,Dystopian REMOVE 2 SEARCH TITLE 198 SEARCH GENRE Fiction LIST AUTHOR F._Scott_Fitzgerald LIST AUTHOR Harper_Lee ``` Output ``` 1984, George_Orwell, 1949 (3) The_Great_Gatsby, F._Scott_Fitzgerald, 1925 (1) 1984, George_Orwell, 1949 (3) The_Great_Gatsby, F._Scott_Fitzgerald, 1925 (1) NO MATCHES ```","solution":"class Book: def __init__(self, id, title, author, year, genres): self.id = id self.title = title self.author = author self.year = year self.genres = genres class Library: def __init__(self): self.books = {} def add_book(self, id, title, author, year, genres): if id not in self.books: self.books[id] = Book(id, title, author, year, genres) def remove_book(self, id): if id in self.books: del self.books[id] def search_books_by_title(self, substring): result = [book for book in self.books.values() if substring.lower() in book.title.lower()] return sorted(result, key=lambda x: x.title) def search_books_by_genre(self, genre): result = [book for book in self.books.values() if genre in book.genres] return sorted(result, key=lambda x: x.title) def list_books_by_author(self, author): result = [book for book in self.books.values() if book.author == author] return sorted(result, key=lambda x: x.year) def format_book(book): return f\\"{book.title}, {book.author}, {book.year} ({book.id})\\" def process_commands(commands): library = Library() output = [] for command in commands: parts = command.split(\' \', 2) action = parts[0] if action == \\"ADD\\": _, id, rest = parts id = int(id) rest_parts = rest.split(\' \', 3) title = rest_parts[0] author = rest_parts[1] year = int(rest_parts[2]) genres = rest_parts[3].split(\',\') library.add_book(id, title, author, year, genres) elif action == \\"REMOVE\\": _, id = parts library.remove_book(int(id)) elif action == \\"SEARCH\\": type = parts[1] keyword = parts[2] if type == \\"TITLE\\": books = library.search_books_by_title(keyword) if books: output.append(\\"n\\".join(format_book(book) for book in books)) else: output.append(\\"NO MATCHES\\") elif type == \\"GENRE\\": books = library.search_books_by_genre(keyword) if books: output.append(\\"n\\".join(format_book(book) for book in books)) else: output.append(\\"NO MATCHES\\") elif action == \\"LIST\\": author = parts[2] books = library.list_books_by_author(author) if books: output.append(\\"n\\".join(format_book(book) for book in books)) else: output.append(\\"NO MATCHES\\") return \\"nn\\".join(output) def run_command(input_string): commands = input_string.strip().split(\'n\') m = int(commands[0]) process_commands(commands[1:])"},{"question":"Design a function that receives a list of integers and determines the length of the longest contiguous subarray with an equal number of 0\'s and 1\'s. -----Input----- The input is a single list of integers containing only 0\'s and 1\'s. -----Output----- The output should be an integer representing the length of the longest contiguous subarray with an equal number of 0\'s and 1\'s. -----Examples----- Example 1: Input: [0, 1, 0] Output: 2 Explanation: [0, 1] (or [1, 0]) is the longest contiguous subarray with an equal number of 0\'s and 1\'s. Example 2: Input: [0, 1, 1, 0, 1, 1, 1, 0] Output: 4 Explanation: [1, 1, 0, 0] is the longest contiguous subarray with an equal number of 0\'s and 1\'s. -----Constraints----- - The length of the input list will be in the range [1, 100,000]. - The input list will only contain 0\'s and 1\'s.","solution":"def findMaxLength(nums): Returns the length of the longest contiguous subarray with an equal number of 0\'s and 1\'s. count = 0 max_length = 0 count_index_map = {0: -1} # Initialize with count 0 at index -1 for index, num in enumerate(nums): # Increment count by 1 for 1 and decrement by 1 for 0 count += 1 if num == 1 else -1 if count in count_index_map: max_length = max(max_length, index - count_index_map[count]) else: count_index_map[count] = index return max_length"},{"question":"Given a list of integers, return a new list that contains the elements of the original list but excludes any that appear more than once. The returned list should retain the original order of elements. If there are no unique elements, return an empty list. ```python unique_elements([1, 2, 2, 3, 4, 4, 5]) # => [1, 3, 5] unique_elements([5, 5, 5, 5, 5]) # => [] unique_elements([10, 20, 30, 10, 20, 50]) # => [30, 50] ```","solution":"def unique_elements(lst): Given a list of integers, return a new list that contains the elements of the original list but excludes any that appear more than once. The returned list should retain the original order of elements. from collections import Counter element_counts = Counter(lst) return [x for x in lst if element_counts[x] == 1]"},{"question":"You are building a simple text analyzer that checks whether two given strings are anagrams of each other. Two strings are considered anagrams if they use the exact same characters the exact same number of times, but possibly in a different order. For instance, the words \\"LISTEN\\" and \\"SILENT\\" are anagrams because they both use the letters L, I, S, T, E, and N exactly once. Similarly, \\"HELLO\\" and \\"OHELL\\" are anagrams. Given two strings, A and B, write a function to determine if they are anagrams of each other. If they are anagrams, return \\"YES\\". Otherwise, return \\"NO\\". Input : First line of input contains an integer T denoting the number of test cases. Each test case contains two lines of input, where the first line contains the string A and the second line contains the string B. Output : For each test case, print \\"YES\\" if A and B are anagrams, otherwise print \\"NO\\". Constraints : Both A and B will only contain uppercase English letters (\'A\'-\'Z\'). 1 ≤ |A|, |B| ≤ 1000 1 ≤ T ≤ 100 SAMPLE INPUT 4 LISTEN SILENT HELLO OHELL APPLE APLEP FUN FUL SAMPLE OUTPUT YES YES YES NO Explanation Test Case #1: LISTEN and SILENT are composed of the same letters in the exact counts. Test Case #2: HELLO and OHELL are composed of the same letters in the exact counts even though their orders are different. Test Case #3: APPLE and APLEP are composed of the same letters in the exact counts. Test Case #4: FUN and FUL cannot be anagrams as they have different characters and/or counts, thus they are not composed of the same letters in exact counts.","solution":"def are_anagrams(a, b): Checks if two strings are anagrams. return \\"YES\\" if sorted(a) == sorted(b) else \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases to determine if pairs of strings are anagrams. results = [] for a, b in test_cases: results.append(are_anagrams(a, b)) return results"},{"question":"For a given list of integers L, replace every element with the greatest element among the elements to its right, and replace the last element with -1. Return the updated list. Example 1: Input: L = [17, 18, 5, 4, 6, 1] Output: [18, 6, 6, 6, 1, -1] Explanation: - 18 is the greatest element to the right of 17. - 6 is the greatest element to the right of 18. - 6 is the greatest element to the right of 5. - 6 is the greatest element to the right of 4. - 1 is the greatest element to the right of 6. - -1 replaces the last element. Example 2: Input: L = [7, 1, 5, 2] Output: [5, 5, 2, -1] Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function ReplaceWithGreatest() that takes a list of integers (L), and returns the updated list. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5, where N is the length of list L -10^5 ≤ L[i] ≤ 10^5, i is an integer denoting index of L","solution":"def replace_with_greatest(L): Replaces every element of the list with the greatest element among the elements to its right, and replaces the last element with -1. :param L: List of integers :return: Updated list of integers n = len(L) if n == 0: return [] max_from_right = -1 for i in range(n - 1, -1, -1): new_value = max_from_right if L[i] > max_from_right: max_from_right = L[i] L[i] = new_value return L"},{"question":"You are given an array of integers and need to answer a series of range sum queries on this array. Each query specifies a contiguous subarray, and you must calculate the sum of all elements within that subarray. To handle a large input efficiently, you should preprocess the array first. Input: - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100000), representing the number of elements in the array and the number of queries, respectively. - The second line contains `n` integers, separated by spaces, representing the array elements. - Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n), representing the indices of the subarray [l, r] for which the sum of elements must be calculated. Output: - For each query, output the sum of the elements in the subarray [l, r], each on a new line. Constraints: 1 ≤ n, q ≤ 100000 1 ≤ array elements ≤ 1000 SAMPLE INPUT 5 3 1 2 3 4 5 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15","solution":"def preprocess_prefix_sums(arr): Precomputes the prefix sums for an array. Parameters: arr (list of int): The array of integers to preprocess. Returns: list of int: The prefix sums of the array. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + arr[i] return prefix_sums def range_sum(prefix_sums, l, r): Computes the sum of the elements in the array between indices l and r (1-based). Parameters: prefix_sums (list of int): The prefix sums of the array. l (int): The starting index of the range (1-based). r (int): The ending index of the range (1-based). Returns: int: The sum of the elements in the specified range. return prefix_sums[r] - prefix_sums[l - 1]"},{"question":"A company is trying to optimize the routing of their delivery trucks between various cities. Each city is connected by one-way roads, and the company wants to determine the shortest path for their trucks to deliver goods from the central warehouse to several destination cities. The problem can be represented as a directed graph where nodes are cities and edges are roads with non-negative weights representing the distance between them. You are given n cities labeled from 1 to n and m one-way roads between them, each road described by three integers u, v, and w, indicating there is a road from city u to city v with distance w. The central warehouse is located in city 1. The company wants to perform q queries. Each query consists of an integer k, representing a destination city k. For each query, you need to print the shortest distance from the central warehouse (city 1) to the city k. If the city k is not reachable from city 1, output -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100,000), separated by a space. The next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10,000), indicating a road from city u to city v with weight w. The next line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. The next q lines contain an integer k (1 ≤ k ≤ n), representing a destination city. Output For each query, output the shortest distance from city 1 to city k. If city k is not reachable, output -1. Examples Input 5 6 1 2 2 1 3 4 2 4 7 3 4 1 4 5 3 3 5 1 3 4 5 2 Output 5 5 2 Input 3 2 1 2 5 2 3 10 2 3 2 Output 15 5 Note For the first sample: 1. From city 1 to city 4: The path is 1 -> 3 -> 4 with a distance of 4 + 1 = 5. 2. From city 1 to city 5: The path is 1 -> 3 -> 5 with a distance of 4 + 1 = 5. 3. From city 1 to city 2: The path is 1 -> 2 with a distance of 2. For the second sample: 1. From city 1 to city 3: The path is 1 -> 2 -> 3 with a distance of 5 + 10 = 15. 2. From city 1 to city 2: The path is 1 -> 2 with a distance of 5.","solution":"from heapq import heappop, heappush import sys def dijkstra(n, edges, start): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((w, v)) distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, current_node = heappop(priority_queue) if current_distance > distances[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heappush(priority_queue, (distance, neighbor)) return distances def solve(n, m, roads, q, queries): sys.setrecursionlimit(200000) distances = dijkstra(n, roads, 1) result = [] for k in queries: if distances[k] == float(\'inf\'): result.append(-1) else: result.append(distances[k]) return result"},{"question":"Write a function `split_numbers` that takes a list of integers as input and returns two lists: one containing all the even numbers and the other containing all the odd numbers from the input list. The returned lists should be in sorted order. If there are no even or odd numbers, the respective list should be empty. # Function Signature: ```python def split_numbers(numbers: List[int]) -> Tuple[List[int], List[int]]: ``` # Input: - A list `numbers` of integers, where each integer `numbers[i]` (0 <= length of `numbers` <= 100) is in the range -1000 to 1000. # Output: - A tuple containing two lists: - The first list contains all the even numbers sorted in ascending order. - The second list contains all the odd numbers sorted in ascending order. # Example: ```python split_numbers([4, 3, 2, 7, -1, -4, 0]) ``` **Output:** ```python ([-4, 0, 2, 4], [-1, 3, 7]) ```","solution":"from typing import List, Tuple def split_numbers(numbers: List[int]) -> Tuple[List[int], List[int]]: Splits the list of integers into two lists: one containing even numbers and the other containing odd numbers, both of which are sorted in ascending order. Args: numbers (List[int]): A list of integers. Returns: Tuple[List[int], List[int]]: A tuple containing two lists: - List of even numbers sorted in ascending order - List of odd numbers sorted in ascending order evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return sorted(evens), sorted(odds)"},{"question":"# Task You are given a string consisting of letters and digits. Your task is to find the sum of all digits present in the string. If there are no digits in the string, return `0`. # Example For the string `\\"abc123\\"`, the output should be `6` (since 1 + 2 + 3 = 6). For the string `\\"a1b2c3d\\"`, the output should be `6` (since 1 + 2 + 3 = 6). For the string `\\"abc\\"`, the output should be `0`. # Input/Output - `[input]` string `s` A non-empty string containing letters and/or digits. - `[output]` an integer Sum of all the digits in the string.","solution":"def sum_of_digits_in_string(s): Returns the sum of all digits present in the string s. If there are no digits, returns 0. return sum(int(char) for char in s if char.isdigit())"},{"question":"You are given a list of integers, and you need to rearrange these integers into the lexicographically smallest sequence possible by swapping only adjacent elements. The list can contain duplicate numbers. The goal is to write a function that performs the smallest number of adjacent swaps needed to reach this sequence and returns the resulting list. For example, consider the list: ```[3, 1, 2, 3]``` The smallest lexicographical order for this list would be: ```[1, 2, 3, 3]``` By performing the following swaps: - Swap 3 and 1 - Swap 3 and 2 You can achieve the desired list with just two swaps. # Input: - A list of integers, `nums`, where 1 ≤ len(nums) ≤ 1000. # Output: - A list of integers rearranged in the lexicographically smallest order by performing the smallest number of adjacent swaps. Function Signature: ```python def rearrange_lexicographically(nums: List[int]) -> List[int]: pass ``` **Constraints**: - All elements in the input list are integers in the range `[-10^9, 10^9]`. **Example**: ```python rearrange_lexicographically([3, 1, 2, 3]) # Output: [1, 2, 3, 3] ```","solution":"def rearrange_lexicographically(nums): Rearranges the input list of integers into the lexicographically smallest order by performing adjacent swaps. Args: nums (List[int]): A list of integers Returns: List[int]: The list rearranged in lexicographical order n = len(nums) for i in range(n): for j in range(n-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] return nums"},{"question":"In a galaxy far, far away, there exists an intergalactic robot federation consisting of many different models of robots. Each robot has a specific energy level represented by an integer. A group mission can only be successful if all robots in the group have distinct energy levels. Given a list of energy levels of the robots, your task is to determine whether it is possible to form groups of `k` robots each, such that each group has robots with distinct energy levels. If it is possible, print \\"Possible\\", otherwise print \\"Impossible\\". Input - The first line contains two integers `n` (the number of robots, 1 ≤ n ≤ 1000) and `k` (the size of each group, 1 ≤ k ≤ n). - The second line contains `n` integers, each representing the energy level of a robot. Output - Print \\"Possible\\" if it is possible to form groups of `k` robots each with distinct energy levels. Otherwise, print \\"Impossible\\". Example Input 6 3 1 2 3 4 5 6 Output Possible Input 6 3 1 2 2 4 5 6 Output Impossible Note In the first example, the robots can be divided into two groups: {1, 2, 3} and {4, 5, 6}, each with unique energy levels. In the second example, it is not possible to form groups of 3 because there are two robots with the same energy level 2.","solution":"def can_form_groups(n, k, energy_levels): Determines if it is possible to form groups of k robots each with distinct energy levels. if len(set(energy_levels)) < n: return \\"Impossible\\" energy_count = {} for energy in energy_levels: if energy in energy_count: energy_count[energy] += 1 else: energy_count[energy] = 1 for count in energy_count.values(): if count > k: return \\"Impossible\\" return \\"Possible\\""},{"question":"You are given a list of `N` integers. Your task is to return a list of the same integers but with each prime number replaced by the closest Fibonacci number. If there are two Fibonacci numbers equally close to a prime number, replace it with the smaller one. For the purpose of this question, the first few Fibonacci numbers are considered to be: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, and so on. Constraints: - 1 ≤ N ≤ 100 - 1 ≤ Each integer in the list ≤ 10^6 Input The input will be given in the following format: ``` N integer_1 integer_2 ... integer_N ``` Output Output the modified list of integers. Examples Input ``` 10 2 4 6 8 10 11 14 16 17 19 ``` Output ``` 2 4 6 8 10 13 14 16 13 21 ``` Input ``` 5 35 29 23 21 1 ``` Output ``` 35 34 21 21 1 ```","solution":"def is_prime(n): Return True if n is a prime number else False if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def closest_fibonacci(n): Return the closest Fibonacci number to n if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 while b < n: a, b = b, a + b if b == n or abs(b - n) < abs(a - n): return b else: return a def replace_primes_with_fibonacci(n, values): Replace prime numbers in the list with closest Fibonacci numbers result = [] for value in values: if is_prime(value): value = closest_fibonacci(value) result.append(value) return result"},{"question":"A resource distribution system in a mining operation needs to optimize the distribution of mining products to increase productivity. There are n mining sites in a row, and each site produces a certain amount of product by day’s end. Formally, the production of the i-th mining site is given by an integer ai (1 ≤ ai ≤ 109). However, due to transportation constraints, the system can only transport products from exactly k contiguous mining sites each day where 1 ≤ k ≤ n. The goal is to maximize the amount of product transported in one day. Write a program that determines the maximum amount of product that can be transported in one day by choosing an optimal set of k contiguous mining sites. Input The first line contains two integers, n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ n), denoting the number of mining sites and the number of contiguous sites to select for transportation. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the amount of product produced by each mining site. Output Output a single integer, the maximum amount of product that can be transported in one day. Examples Input 5 2 4 2 1 3 5 Output 8 Input 7 3 10 20 10 5 8 7 10 Output 35 Note In the first example, choosing the last two sites (3 and 5) results in the maximum product sum of 8. In the second example, choosing the first three sites (10, 20, 10) results in the maximum product sum of 40.","solution":"def max_transport_product(n, k, a): Determines the maximum amount of product that can be transported in one day by choosing an optimal set of k contiguous mining sites. Parameters: n (int): number of mining sites k (int): number of contiguous sites to select for transportation a (list): list of production amounts at each mining site Returns: int: the maximum amount of product that can be transported # Initialize the sum of the first k elements current_sum = sum(a[:k]) max_sum = current_sum # Use the sliding window technique to find the maximum sum of k contiguous elements for i in range(k, n): current_sum += a[i] - a[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a list of integers representing the weights of n packages. Your task is to find the minimum number of moves to make all packages the same weight. A move consists of incrementing or decrementing the weight of a package by 1. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (1 le n le 200) — the number of packages. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 1000) — the weights of the packages. -----Output----- For each test case, print one integer — the minimum number of moves required to make all packages the same weight. -----Examples----- Input 3 4 1 3 2 2 3 1 2 3 5 5 5 5 5 5 Output 2 2 0 -----Note----- In the first test case, you can make all packages weigh 2 with a total of 2 moves. In the second test case, you can make all packages weigh 2 with a total of 2 moves by incrementing the first package by 1 and decrementing the last package by 1. In the third test case, all packages are already the same weight, so no moves are needed.","solution":"def min_moves_to_equal_weight(t, test_cases): def min_moves(arr): median = sorted(arr)[len(arr) // 2] moves = sum(abs(x - median) for x in arr) return moves results = [] for case in test_cases: n, weights = case result = min_moves(weights) results.append(result) return results"},{"question":"You are asked to implement a function that takes a string containing a mixture of duplicates and unique characters, and returns a list of tuples. Each tuple should contain one of the unique characters and its frequency of occurrence in the string. The output list should be sorted by frequency in descending order. In the case of a tie, sort by the character\'s ascii value in ascending order. Example: Input: \\"programming\\" Output: [(\'r\', 2), (\'g\', 2), (\'m\', 2), (\'a\', 1), (\'i\', 1), (\'n\', 1), (\'o\', 1), (\'p\', 1)] Hints: * Consider the efficiency of your implementation. * You may assume the input string contains only lowercase alphabetic characters. Your task is to write a function `character_frequency` that meets these requirements.","solution":"from collections import Counter def character_frequency(s): Takes a string and returns a list of tuples with unique characters and their frequencies, sorted by frequency in descending order and by ascii value in ascending order for ties. # Count the frequency of each character in the string frequency_count = Counter(s) # Create a sorted list of tuples based on the counts sorted_frequency = sorted(frequency_count.items(), key=lambda x: (-x[1], x[0])) return sorted_frequency"},{"question":"Given an array of integers representing the heights of consecutive columns in a histogram, compute the area of the largest rectangle that can be formed within the boundaries of the histogram. -----Constraints----- - 1 leq N leq 10^5 - 1 leq heights[i] leq 10^4 -----Input----- Input is given from Standard Input in the following format: N heights_1 heights_2 ... heights_N -----Output----- Print the maximum area of a rectangle that can be formed in the histogram. -----Sample Input----- 6 2 1 5 6 2 3 -----Sample Output----- 10 Explanation: The maximum rectangle is formed using heights at indices 2 and 3 with height 5 and 6 respectively, covering a width of 2, thus forming a rectangle with area 5 * 2 = 10.","solution":"def largest_rectangle_area(heights): Given an array of integers representing the heights of consecutive columns in a histogram, compute the area of the largest rectangle that can be formed within the boundaries of the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): # If this bar is higher than the bar at stack top, push it on stack if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\'. area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now, pop the remaining bars from stack and calculate area with each popped bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are an engineer at Robotic Arm Solutions and are developing a software control system for a robotic arm that needs to pick items from defined positions on a grid and move them to a storage location. The robot moves in a straight line from one point to another on the grid but can make turns to reach its destination. Your task is to verify whether the robot can follow a provided series of movement instructions without colliding with any obstacles on the grid. The grid is represented as an M x N matrix where some cells contain obstacles, and others are free for movement. The robot starts at a given starting point and must execute a sequence of movement instructions to reach its destination. Movement instructions consist of up (U), down (D), left (L), and right (R). Write a program to determine if the robot can successfully execute all instructions without hitting any obstacles, starting from the given initial position and following the sequence of commands exactly. Input The input consists of a single test case in the following format: M N grid R_s C_s commands The first line contains two integers M and N (1 leq M, N leq 1000), denoting the number of rows and columns in the grid, respectively. The following M lines describe the grid, where each line contains N characters. A character \'.\' represents a free cell, and a character \'#\' represents an obstacle. The next line contains two integers R_s and C_s (0 leq R_s < M, 0 leq C_s < N), denoting the starting row and column positions of the robot. The final line contains a string commands (1 leq |commands| leq 10^5) consisting of characters \'U\', \'D\', \'L\', and \'R\' representing the movement instructions. Output Print \'Yes\' if the robot can follow all the instructions without colliding with any obstacles. Otherwise, print \'No\'. Examples Input 5 5 ..... .#... ..... ...#. ..... 2 2 UUDDLRLR Output Yes Input 5 5 ..... .#... ..... ...#. ..... 2 2 UUUUUU Output No Input 3 3 ... .#. ... 0 0 DDRR Output Yes Input 3 3 ... .#. ... 0 2 LLL Output No","solution":"def can_robot_follow_commands(m, n, grid, r_s, c_s, commands): Determine if the robot can successfully execute all instructions without hitting any obstacles. # Define directions for movement moves = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } # Current position of the robot current_r, current_c = r_s, c_s for command in commands: move_r, move_c = moves[command] current_r += move_r current_c += move_c # Check if out of bounds if not (0 <= current_r < m and 0 <= current_c < n): return \\"No\\" # Check for obstacles if grid[current_r][current_c] == \'#\': return \\"No\\" return \\"Yes\\""},{"question":"You are given an undirected graph with N nodes and M edges. Each node has a weight assigned to it. For each query, you need to find the maximum weighted node in the connected component of a given node. -----Input----- - The first line of the input contains two space-separated integers N and M denoting the number of nodes and edges in the graph. - The second line contains N space-separated integers where the i-th integer denotes the weight of the i-th node. - Each of the next M lines contains two space-separated integers u and v denoting an undirected edge between nodes u and v. - The next line contains a single integer Q denoting the number of queries. - Each of the next Q lines contains a single integer x denoting the node for which you need to find the maximum weighted node in its connected component. -----Output----- For each query, print a single line containing the weight of the maximum weighted node in the connected component of the given node. -----Constraints----- - 1 le N, M le 10^5 - 1 le Q le 10^5 - 1 le u, v, x le N - 1 le text{weight of each node} le 10^9 -----Example Input----- 5 4 1 2 3 4 5 1 2 1 3 3 4 4 5 3 1 2 5 -----Example Output----- 5 5 5","solution":"def find_connected_components(N, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) visited = [False] * N components = [] def bfs(start): component = [] queue = deque([start]) visited[start] = True while queue: node = queue.popleft() component.append(node) for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component for node in range(N): if not visited[node]: comp = bfs(node) components.append(comp) return components def max_weight_in_components(weights, components): max_weights = {} for component in components: max_weight = max(weights[node] for node in component) for node in component: max_weights[node] = max_weight return max_weights def process_queries(weights, components, queries): max_weights = max_weight_in_components(weights, components) result = [] for query in queries: result.append(max_weights[query - 1]) return result def solve_graph_problem(N, M, node_weights, edges, Q, queries): components = find_connected_components(N, edges) results = process_queries(node_weights, components, queries) return results"},{"question":"There is a trading game that involves a sequence of stock prices. A player can engage in multiple transactions (i.e., buy one and sell one share of the stock multiple times). However, the player must sell the stock before they can buy again. The goal is to maximize the profit from these transactions. Given an array of integers representing the stock prices on consecutive days, your task is to compute the maximum profit that can be obtained by making as many transactions as possible. -----Input----- The first line of input contains an integer N (1 leq N leq 1000), the length of the array. The second line contains N integers p_i (1 leq p_i leq 10^5) representing the stock prices on each day. -----Output----- Print the maximum profit that can be achieved from the transactions. -----Examples----- Sample Input 1: 6 7 1 5 3 6 4 Sample Output 1: 7 Sample Input 2: 5 1 2 3 4 5 Sample Output 2: 4 Sample Input 3: 5 7 6 4 3 1 Sample Output 3: 0","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from multiple transactions. max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Write a function that receives a string which represents a street address and reformats it by moving any apartment or suite number to the end of the address string, separated by a comma. The apartment or suite number is assumed to be identified by the keywords \\"Apt\\", \\"Apartment\\", \\"Suite\\", or \\"Ste\\", case-insensitively. Example 1: ``` \\"123 Main St Apt 4B\\" => \\"123 Main St, Apt 4B\\" ``` Example 2: ``` \\"456 Elm St Apartment 301\\" => \\"456 Elm St, Apartment 301\\" ``` Example 3: ``` \\"789 Pine St Suite C3\\" => \\"789 Pine St, Suite C3\\" ``` Example 4: ``` \\"321 Oak St Ste 2A\\" => \\"321 Oak St, Ste 2A\\" ``` If there is no apartment or suite number in the address, the address should be returned unchanged. >Notes: > > * Input (`address`) will always be a string object. > * Your function should return a string. > * The keywords \\"Apt\\", \\"Apartment\\", \\"Suite\\", and \\"Ste\\" should be handled in a case-insensitive manner. > * Ensure any extra spaces in the modified address are trimmed off.","solution":"import re def reformat_address(address): Reformats the address by moving apartment or suite number to the end, separated by a comma. Handles Apt, Apartment, Suite, and Ste keywords in a case-insensitive manner. pattern = re.compile(r\'(.*?)(b(?:Apt|Apartment|Suite|Ste)s+S.*)\', re.IGNORECASE) match = pattern.match(address) if match: main_address, apt_suite = match.groups() return f\\"{main_address.strip()}, {apt_suite.strip()}\\" return address.strip()"},{"question":"Write a function `common_elements` that takes two lists, and returns a new list containing the elements that appear in both input lists. Each element in the result should appear as many times as it shows in both lists. # Notes: - If either of the inputs is not a list, return `None`. - The order of elements in the output list does not matter. # Examples: ```python common_elements([1, 2, 3], [2, 3, 4]) => [2, 3] common_elements([\'a\', \'b\', \'b\', \'c\'], [\'b\', \'b\', \'b\', \'d\']) => [\'b\', \'b\'] common_elements([1, 2, 3], 123) => None ```","solution":"def common_elements(list1, list2): Returns the common elements between two lists as many times as they appear in both lists. If either input is not a list, returns None. if not isinstance(list1, list) or not isinstance(list2, list): return None from collections import Counter counter1 = Counter(list1) counter2 = Counter(list2) intersection = counter1 & counter2 return list(intersection.elements())"},{"question":"You are given an array A of length N. Your task is to reorder the array such that the sum of absolute differences between adjacent elements is maximized. More formally, you need to reorder the array to maximize the value of |B_1 - B_2| + |B_2 - B_3| + ... + |B_{N-1} - B_N|, where B is the reordered array. -----Constraints----- - 2 leq N leq 100000 - 1 leq A_i leq 10^9 -----Input----- Input is provided from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Output the reordered array of integers B_1, B_2, ..., B_N in a single line. -----Sample Input----- 4 1 3 2 4 -----Sample Output----- 1 4 2 3 Explanation: In one of the possible solutions [1, 4, 2, 3], the sum of absolute differences is: |1 - 4| + |4 - 2| + |2 - 3| = 3 + 2 + 1 = 6, which is maximized in this configuration.","solution":"def maximize_absolute_differences(N, A): A.sort() left = 0 right = N - 1 result = [] while left <= right: if left == right: result.append(A[left]) else: result.append(A[left]) result.append(A[right]) left += 1 right -= 1 return result"},{"question":"In a given string of lowercase alphabetic characters, you need to find and return the length of the longest substring that contains at most two different characters. If there are multiple longest substrings, return the length of any one of them. Input A single string of lowercase alphabetic characters. The length of the string is at most 100. Output Output a single integer which is the length of the longest substring containing at most two different characters. Examples Input abaccc Output 4 (The substring \\"abac\\" or \\"bcc\\" has length 4) Input abcbbbaa Output 5 (The substring \\"bcbba\\" has length 5)","solution":"def length_of_longest_substring_two_distinct(s: str) -> int: Returns the length of the longest substring that contains at most two different characters. if len(s) == 0: return 0 # Dictionary to keep track of last occurrence of each character char_last_occurrence = {} start = 0 max_length = 0 for end in range(len(s)): char_last_occurrence[s[end]] = end if len(char_last_occurrence) > 2: # Find the character with the smallest last occurrence char_to_remove = min(char_last_occurrence, key=char_last_occurrence.get) start = char_last_occurrence[char_to_remove] + 1 del char_last_occurrence[char_to_remove] max_length = max(max_length, end - start + 1) return max_length"},{"question":"A company is organizing a series of hackathons at different cities. Each city has a certain number of participants. After each hackathon, the number of participants is reduced based on the passing rate. The passing rate is decided as the minimum number of participants present in any city for the remaining hackathons. Suppose the cities have the following number of participants for the next 5 hackathons: 10 15 20 5 25 In the first hackathon, the rate is decided as 5 (minimum number of participants among all cities). So, all cities will have their participants reduced by 5: 5 10 15 0 20 For the next hackathon, only cities with non-zero participants are considered: 5 10 15 20 In the second hackathon, the rate is 5 again (minimum of the current participants). After reduction: 0 5 10 15 For the next hackathon: 5 10 15 In the third hackathon, the rate is 5: 0 5 10 For the next hackathon: 5 10 In the fourth hackathon, the rate is 5: 0 5 For the next hackathon: 5 In the fifth hackathon: 0 Given the number of participants in different cities, print the number of participants that are reduced in each hackathon until no participants are left. Input Format The first line contains a single integer N. The next line contains N integers: P(0), P(1), P(2),..... P(N-1) separated by space, where P(i) represents the number of participants in the ith city. Output Format For each hackathon, print the number of participants that are reduced in the cities in a separate line. Constraints 1 ≤ N ≤ 1000 1 ≤ P(i) ≤ 1000 SAMPLE INPUT 5 10 15 20 5 25 SAMPLE OUTPUT 5 5 5 5 5","solution":"def hackathon_reduction(participants): reductions = [] while any(p > 0 for p in participants): passing_rate = min(p for p in participants if p > 0) reductions.append(passing_rate) participants = [p - passing_rate if p > 0 else 0 for p in participants] return reductions def process_input(input_str): lines = input_str.strip().split(\'n\') N = int(lines[0]) participants = list(map(int, lines[1].split())) return participants def format_output(reductions): return \'n\'.join(map(str, reductions))"},{"question":"Emma loves strings and she likes to create new ones by concatenating smaller strings together. Today, she wants to create a special string by following certain rules. Here is her task: Consider a string `s` which only consists of lowercase letters `\'a\'` and `\'b\'`. The initial string `s` will be provided to you and Emma will perform the following operations exactly `k` times: 1. On the `i-th` operation, she performs the following: - For every occurrence of `\'a\'` in the string, she appends a single `\'b\'` to the end of the string. - For every occurrence of `\'b\'` in the string, she appends a single `\'a\'` to the end of the string. After `k` operations, Emma wants to know the final length of the string. -----Input----- The first line contains an integer `k` (`1 leq k leq 50`), representing the number of operations to be performed. The second line contains the initial string `s` which consists of only the characters `\'a\'` and `\'b\'` and has a length `1 leq |s| leq 10^6`. -----Output----- Print a single integer — the length of the string after `k` operations. -----Examples----- Input 1 ab Output 4 Input 2 a Output 4 Input 3 ab Output 16 -----Note----- In the first example, the initial length of the string `s` is `2`. After the first operation: - The first character `\'a\'` appends `\'b\'`, making the string `abb`. - The second character `\'b\'` appends `\'a\'`, making the string `abba`. The final length of the string is `4`. In the second example, the initial string `s` is `a`. After the first operation, it becomes `ab` and after the second operation, it becomes `abba`. The final length of the string is `4`. In the third example, after each operation the length quadruples: initially `2`, then becomes `4`, then `16`, and so on. Thus, after 3 operations, the length is `16`.","solution":"def final_length_after_operations(k, s): Returns the final length of the string after performing k operations. initial_length = len(s) final_length = initial_length * (2 ** k) return final_length"},{"question":"Alan loves to create secret codes using numerical patterns. He invented a simple method to encode messages using numbers. Given a list of integers, he wants to check if the list is an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. Create a program to determine if the given list of integers forms an arithmetic progression or not. -----Input:----- - The first line contains T, the number of test cases. - For each test case: - The first line contains N, the number of integers in the list. - The second line contains N space-separated integers. -----Output:----- For each test case, print \\"YES\\" (without quotes) if the list of integers forms an arithmetic progression, otherwise print \\"NO\\" (without quotes). -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 10^5 - -10^6 leq A_i leq 10^6 -----Sample Input:----- 2 5 1 3 5 7 9 4 2 4 7 10 -----Sample Output:----- YES NO -----EXPLANATION:----- - Example 1: The sequence 1, 3, 5, 7, 9 is an arithmetic progression with a common difference of 2. - Example 2: The sequence 2, 4, 7, 10 does not have a constant difference between consecutive terms (difference is 2 and 3), hence it is not an arithmetic progression.","solution":"def is_arithmetic_progression(N, numbers): Returns \\"YES\\" if the list of numbers forms an arithmetic progression, otherwise \\"NO\\". if N < 2: return \\"NO\\" numbers.sort() difference = numbers[1] - numbers[0] for i in range(2, N): if numbers[i] - numbers[i - 1] != difference: return \\"NO\\" return \\"YES\\" def check_arithmetic_progressions(test_cases): results = [] for N, numbers in test_cases: results.append(is_arithmetic_progression(N, numbers)) return results"},{"question":"Alex is a fan of palindromes. He defines a palindrome as a string that reads the same forward and backward. Given a string S consisting of lowercase alphabets, Alex can replace at most one of its characters to make the string a palindrome. Alex wants to find the lexicographically smallest palindrome string that can be created this way. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. - The description of T test cases follows. - The first line of each test case contains a single integer N representing the length of the string S. - The second line of each test case contains the string S of length N. -----Output----- - For each test case, print the lexicographically smallest palindrome string that can be created if possible; otherwise, print \\"impossible\\". -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 50 - S consists of lowercase English alphabets (\'a\' - \'z\') only. -----Example----- Input 4 3 abc 5 radar 4 abba 6 abcdef Output aba radar abba aacaa -----Explanation----- Example 1: - The given string \\"abc\\" can be transformed into \\"aba\\" or \\"cbc\\" by changing the middle character. \\"aba\\" is lexicographically smaller, so the answer is \\"aba\\". Example 2: - The given string \\"radar\\" is already a palindrome. So, the answer is \\"radar\\". Example 3: - The given string \\"abba\\" is already a palindrome. So, the answer is \\"abba\\". Example 4: - The given string \\"abcdef\\" cannot be turned into a palindrome by changing at most one character, so the answer is \\"impossible\\".","solution":"def make_smallest_palindrome(test_cases): results = [] for t in test_cases: N, S = t S = list(S) changed = False # Check if it\'s already a palindrome if S == S[::-1]: results.append(\\"\\".join(S)) continue for i in range(N // 2): if S[i] != S[N - i - 1]: if changed: results.append(\\"impossible\\") break if S[i] < S[N - i - 1]: S[N - i - 1] = S[i] changed = True else: S[i] = S[N - i - 1] changed = True else: # double-check for lexicographically smallest if S != S[::-1]: results.append(\\"impossible\\") else: results.append(\\"\\".join(S)) return results"},{"question":"In a board game, Bob and Alice take turns to play. On each turn, a player can decide to remove either one or two stones from a pile of stones. The player who cannot make a move (because there are no stones left) loses the game. Bob always goes first and both players are playing optimally. You are given a single integer N, which represents the number of stones initially in the pile. Determine whether Bob can guarantee a win if both players play optimally. Input The input consists of a single integer N (1 ≤ N ≤ 10^9), representing the initial number of stones in the pile. Output Output \\"Bob\\" if Bob has a winning strategy, or \\"Alice\\" if Alice has a winning strategy, assuming both players play optimally. Examples Input 1 Output Bob Input 2 Output Bob Input 3 Output Alice","solution":"def who_wins(N): Determines the winner of the game given an initial number of stones N. Bob starts first and both play optimally. Returns \'Bob\' if Bob has a winning strategy, otherwise \'Alice\'. if N % 4 == 1 or N % 4 == 2: return \\"Bob\\" else: return \\"Alice\\""},{"question":"You are tasked with helping a logistics company optimize their package delivery system. There are n warehouses distributed in a city, and m one-way roads connecting these warehouses. The company wants to ensure that a package can be delivered from any warehouse to any other warehouse in the minimum possible number of transfers. The transfer of a package happens when it\'s moved from one warehouse to another directly connected by a road. Your task is to determine the maximum number of transfers required for the worst-case scenario, meaning between the two farthest warehouses from each other. -----Input----- The first line contains two integers n and m (2 le n le 5000, 1 le m le 10000) — the number of warehouses and roads, respectively. Each of the following m lines contains two integers u_i and v_i (1 le u_i, v_i le n, u_i neq v_i), denoting a one-way road from warehouse u_i to warehouse v_i. It\'s guaranteed that each warehouse can be reached from any other warehouse either directly or indirectly through other warehouses. -----Output----- Output the maximum number of transfers required for the worst-case delivery scenario. -----Examples----- Input 4 4 1 2 2 3 3 4 4 1 Output 3 Input 5 6 1 2 2 3 3 5 5 4 4 2 2 5 Output 3 Input 3 2 1 2 3 1 Output 2 -----Note----- In the first example, the longest transfer requires moving the package from warehouse 1 to warehouse 4, passing through warehouses 2 and 3. In the second example, the longest transfer requires moving the package from warehouse 3 to warehouse 4, passing through warehouses 5 and 2. In the third example, the longest transfer happens between warehouses 3 and 2, as it requires moving through warehouse 1.","solution":"from collections import defaultdict, deque def find_longest_path(n, m, roads): def bfs(start): distances = [-1] * (n + 1) queue = deque([start]) distances[start] = 0 max_distance = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 max_distance = max(max_distance, distances[neighbor]) queue.append(neighbor) return max_distance graph = defaultdict(list) for u, v in roads: graph[u].append(v) longest_path = 0 for i in range(1, n + 1): longest_path = max(longest_path, bfs(i)) return longest_path"},{"question":"In a given list of integers, each number appears three times except for one, which appears exactly once. Write a function to find the number that appears only once. Your algorithm should have a linear runtime complexity and use constant extra space. Example: ```python find_unique([2, 2, 3, 2]) # => 3 find_unique([0, 1, 0, 1, 0, 1, 99]) # => 99 ``` Note: You can assume that the list is non-empty and contains a number that appears exactly once amidst numbers that appear thrice.","solution":"def find_unique(nums): Find the number that appears only once in a list where every other number appears three times. This function uses bitwise operations for a linear runtime and constant space complexity. ones, twos = 0, 0 for num in nums: # `twos` is only set on bits that saw `1` two times so far. twos = twos | (ones & num) # `ones` is only set on bits that saw `1` one time. ones = ones ^ num # `threes` holds common bits of `ones` and `twos`. threes = ones & twos # Remove bits that appeared three times from `ones` and `twos`. ones = ones & ~threes twos = twos & ~threes return ones"},{"question":"You have been hired as a software engineer in a tech firm, and your first task is to help parse employee data. Each employee has an ID, which follows a strict format. A valid employee ID must: 1. Start with 3 exactly uppercase alphabets (A-Z). 2. Be followed by exactly 4 digits (0-9). 3. Optionally, it can include a prefix of \'EMP-\' right at the beginning. For example, these are valid employee IDs: - \\"EMP-ABC1234\\" - \\"ABC1234\\" And these are invalid: - \\"emp-ABC1234\\" (prefix should be uppercase) - \\"EMP-AB1234\\" (only 2 letters instead of 3) - \\"AB12345\\" (only 2 letters and an extra digit) You need to write a function that verifies the validity of each given employee ID. The function should return `Valid ID` for a valid ID and `Invalid ID` for an invalid one. Here\'s your function signature: ```python def validate_employee_id(employee_id: str) -> str: # Your code goes here ``` Make sure you handle various edge cases and variations in the format accordingly.","solution":"import re def validate_employee_id(employee_id: str) -> str: Validates whether the given employee_id is in the correct format. Valid formats: - \\"EMP-ABC1234\\" - \\"ABC1234\\" Returns \'Valid ID\' if the format is correct, otherwise \'Invalid ID\'. pattern = re.compile(r\'^(EMP-)?[A-Z]{3}d{4}\') if pattern.match(employee_id): return \\"Valid ID\\" else: return \\"Invalid ID\\""},{"question":"In a university, exam marks for students in various subjects are recorded in a system. Each student has a unique student ID and each subject has a unique subject ID. The university wants to identify the top-performing students in each subject based on their marks. If multiple students obtain the highest mark in a subject, they should all be considered top-performing students for that subject. ----Input---- The input will consist of: - The first line contains two integers N and M (1 leq N, M leq 1000), representing the number of students and number of subjects respectively. - The next N lines describe the marks of each student. Each line contains M+1 integers. The first integer is the student ID (a unique integer from 1 to N), followed by M integers representing the marks obtained by the student in each subject. ----Output---- For each subject, output a single line containing the student IDs of the top-performing students in that subject, sorted in ascending order. ----Examples---- Sample Input: 5 3 1 78 85 90 2 88 92 78 3 85 92 91 4 88 90 92 5 78 85 91 Sample Output: 2 4 2 3 4 Explanation: - For subject 1, the top mark is 88, achieved by students 2 and 4. - For subject 2, the top mark is 92, achieved by students 2 and 3. - For subject 3, the top mark is 92, achieved by student 4.","solution":"def top_students(N, M, marks): Identify the top-performing students in each subject based on their marks. :param N: Number of students :param M: Number of subjects :param marks: List of lists where each inner list contains student ID followed by marks in each subject :return: List of lists where each inner list contains the student IDs of top-performing students for a subject top_performers = [[] for _ in range(M)] for j in range(M): max_mark = max(marks[i][j + 1] for i in range(N)) for i in range(N): if marks[i][j + 1] == max_mark: top_performers[j].append(marks[i][0]) return [sorted(performers) for performers in top_performers]"},{"question":"Given a positive integer N, your task is to determine the minimum number of perfect squares whose sum equals N. For instance, if N = 12, the answer would be 3 because 12 can be expressed as the sum of three perfect squares: 4 + 4 + 4 (i.e., 2^2 + 2^2 + 2^2). Another representation is 9 + 1 + 1 + 1 (i.e., 3^2 + 1^2 + 1^2 + 1^2), which also sums to 12, but it involves 4 squares, not the minimum. Constraints * All values in input are integers. * 1 ≤ N ≤ 10^4 Input The input consists of a single integer, N. Output Print a single integer, the minimum number of perfect squares that sum to N. Example Input 12 Output 3","solution":"import math def min_perfect_squares(N): Determine the minimum number of perfect squares that sum to N. # Create a list to store the minimum number of perfect squares for each number from 0 to N dp = [float(\'inf\')] * (N + 1) # Base case dp[0] = 0 # Fill the dp array for i in range(1, N + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[N]"},{"question":"Given a word w, output the count of words that can be formed by re-arranging its letters such that they are palindrome. A palindrome is a word that reads the same backward as forward. Example 1: Input: w = \\"aabb\\" Output: 2 Explanation: There are 2 palindromic permutations of the word \\"aabb\\". They are \\"abba\\" and \\"baab\\". Example 2: Input: w = \\"abc\\" Output: 0 Explanation: There are no palindromic permutations of the word \\"abc\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function countPalindromicPermutations() which takes a String w as input and returns the number of palindromic permutations that can be formed from the string w. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= w.length() <= 20","solution":"from collections import Counter def countPalindromicPermutations(w): Returns the number of palindromic permutations that can be formed from the given word w. # Count the frequency of each character in the word freq = Counter(w) # Count the number of characters with odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A palindrome can have at most one character with an odd frequency if odd_count > 1: return 0 # Calculate the number of permutations that form a palindrome from math import factorial # Half lengths factorial division half_length_factorial = factorial(sum(count // 2 for count in freq.values())) # factorial of half the counts of each character that appears more than once divisors = 1 for count in freq.values(): if count // 2 > 1: divisors *= factorial(count // 2) return half_length_factorial // divisors"},{"question":"You are given a list of unique positive integers whose length is always even. Your task is to split the list into two sublists of equal length such that the absolute difference of sums of the sublists is minimized. Output this minimum possible difference. ------ Input Format ------ - The first line contains an integer T representing the number of test cases. Each test case contains two lines: - The first line contains an integer N representing the number of elements in the list (always even, ( 2 ≤ N ≤ 30 )). - The second line contains N unique positive integers separated by spaces. ------ Output Format ------ For each test case, output a single integer which is the minimum possible absolute difference of sums of the two sublists. ------ Constraints ------ ( 2 ≤ N ≤ 30 ) Each number in the list is a positive integer and is unique. ----- Sample Input 1 ------ 2 4 1 3 5 9 6 1 2 3 4 5 6 ----- Sample Output 1 ------ 0 1 ----- Explanation 1 ------ Test Case 1: - The list [1, 3, 5, 9] can be split into [1, 9] and [3, 5] both having sums 10 and 8 respectively. The minimum possible difference is 2. Test Case 2: - The list [1, 2, 3, 4, 5, 6] can be split into [1, 6], [2, 5], and [3, 4], both having sums 7 and 6 respectively. The minimum possible difference is 1.","solution":"from itertools import combinations def min_difference(N, numbers): Computes the minimum possible absolute difference of sums of two sublists obtained by splitting the list of unique positive integers of even length N into two sublists of equal length. half_N = N // 2 total_sum = sum(numbers) min_diff = float(\'inf\') # Generate all possible combinations of N//2 elements for comb in combinations(numbers, half_N): sum_comb = sum(comb) other_sum = total_sum - sum_comb diff = abs(sum_comb - other_sum) min_diff = min(min_diff, diff) return min_diff def process_input(test_cases): results = [] for N, numbers in test_cases: result = min_difference(N, numbers) results.append(result) return results"},{"question":"A teacher wants to assign grades based on the scores of a group of students. The grading policy is as follows: - Grade `A` for scores `90` and above - Grade `B` for scores `80` to `89` - Grade `C` for scores `70` to `79` - Grade `D` for scores `60` to `69` - Grade `F` for any score below `60` Write a function `assign_grades` that takes a dictionary with student names as keys and their scores as values. The function should return a new dictionary with the same student names as keys and their corresponding grades as values. For example: ```python students_scores = { \\"John\\": 85, \\"Jane\\": 92, \\"Dave\\": 78, \\"Dana\\": 63, \\"Mike\\": 58 } ``` The function call `assign_grades(students_scores)` should return: ```python { \\"John\\": \\"B\\", \\"Jane\\": \\"A\\", \\"Dave\\": \\"C\\", \\"Dana\\": \\"D\\", \\"Mike\\": \\"F\\" } ``` Consider edge cases and ensure your function handles them gracefully.","solution":"def assign_grades(students_scores): Assigns grades based on the scores of students. :param students_scores: Dictionary with student names as keys and their scores as values :return: Dictionary with student names as keys and their corresponding grades as values grades = {} for student, score in students_scores.items(): if score >= 90: grades[student] = \'A\' elif score >= 80: grades[student] = \'B\' elif score >= 70: grades[student] = \'C\' elif score >= 60: grades[student] = \'D\' else: grades[student] = \'F\' return grades"},{"question":"You are tasked with developing an application for a library to manage their book borrowing system. The application must support the following types of operations: 1) ADD book_id -> Add a book to the library\'s collection. 2) BORROW book_id -> Borrow a book from the library. If the book is not available, the operation has no effect. 3) RETURN book_id -> Return a borrowed book to the library. 4) COUNT n -> Count the number of books that have been borrowed exactly n times. Input The input consists of q, the number of queries. Then q lines follow, with each line containing one of the commands mentioned above. Output For each query of type 4, output the count of books borrowed exactly n times. Input Constraints 1 ≤ q ≤ 10^5 1 ≤ book_id ≤ 10^7 0 ≤ n ≤ 10^7 SAMPLE INPUT 7 ADD 101 ADD 102 BORROW 101 BORROW 101 RETURN 101 BORROW 102 COUNT 1 SAMPLE OUTPUT 2","solution":"from collections import defaultdict class Library: def __init__(self): self.books = set() self.borrowed = defaultdict(int) self.borrow_count = defaultdict(int) def add(self, book_id): self.books.add(book_id) def borrow(self, book_id): if book_id in self.books: self.borrow_count[self.borrowed[book_id]] -= 1 self.borrowed[book_id] += 1 self.borrow_count[self.borrowed[book_id]] += 1 def return_book(self, book_id): if book_id in self.borrowed: self.borrow_count[self.borrowed[book_id]] -= 1 self.borrowed[book_id] -= 1 self.borrow_count[self.borrowed[book_id]] += 1 def count(self, n): return self.borrow_count[n] def process_queries(queries): library = Library() results = [] for query in queries: parts = query.split() command = parts[0] if command == \\"ADD\\": book_id = int(parts[1]) library.add(book_id) elif command == \\"BORROW\\": book_id = int(parts[1]) library.borrow(book_id) elif command == \\"RETURN\\": book_id = int(parts[1]) library.return_book(book_id) elif command == \\"COUNT\\": n = int(parts[1]) results.append(library.count(n)) return results"},{"question":"You are given two strings `s1` and `s2`. We need to determine the length of the shortest string that has both `s1` and `s2` as subsequences. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input The first line contains the size of the first string |s1| (1 ≤ |s1| ≤ 500). The second line contains the size of the second string |s2| (1 ≤ |s2| ≤ 500). The next line contains the string `s1`. The following line contains the string `s2`. Output Print a single integer — the length of the shortest string that has both `s1` and `s2` as subsequences. Examples Input 3 3 abc acb Output 4 Input 4 3 abcd bcd Output 4 Input 2 2 ab ba Output 3","solution":"def shortest_common_supersequence_length(s1, s2): Returns the length of the shortest string that has both s1 and s2 as subsequences. m, n = len(s1), len(s2) # Create a dp table dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1 return dp[m][n]"},{"question":"You are tasked with finding the minimum sum that can be obtained by rearranging the elements of an integer array into two separate sub-arrays and summing the sum of squares of each sub-array. Input: An integer N representing the number of elements in the array. A line containing N integers a_1, a_2, ..., a_N representing the elements of the array. Output: An integer representing the minimum sum that can be obtained. Constraints: * 1 ≤ N ≤ 10^5 * 1 ≤ a_i ≤ 10^4 Example Input 5 1 2 3 4 5 Output 35 Explanation: One of the optimal ways to split the array into two sub-arrays is [1,4,5] and [2,3]. The sum of squares of these two sub-arrays is 1^2 + 4^2 + 5^2 + 2^2 + 3^2 = 1 + 16 + 25 + 4 + 9 = 55.","solution":"def min_sum_of_squares(N, arr): Returns the minimum sum of squares that can be obtained by rearranging the elements of an integer array into two separate sub-arrays and summing the sum of squares of each sub-array. arr.sort() sub_array1 = arr[:N//2] sub_array2 = arr[N//2:] sum_of_squares = sum(x ** 2 for x in sub_array1) + sum(x ** 2 for x in sub_array2) return sum_of_squares"},{"question":"John is interested in perfectly balancing a binary tree. A binary tree is considered perfectly balanced if the number of nodes in the left subtree is equal to the number of nodes in the right subtree for every node within the tree. Given a target value n representing the number of nodes, your task is to construct a perfectly balanced binary tree with exactly n nodes. Note: 1 ≤ n ≤ 105 Input A single integer n representing the number of nodes in the binary tree. Output In the first line, output a single integer m, which is the number of edges in the binary tree. In the next m lines, output pairs of integers u and v representing an edge between node u and node v. Example Input 7 Output 6 1 2 1 3 2 4 2 5 3 6 3 7 Input 3 Output 2 1 2 1 3 Explanation The nodes are indexed from 1 to n. In the first example, node 1 is connected to nodes 2 and 3, creating a balanced tree. Node 2 is further connected to nodes 4 and 5, while node 3 is connected to nodes 6 and 7, maintaining the balance property. For the second example, node 1 is connected to nodes 2 and 3 directly, achieving the same balance.","solution":"def construct_balanced_tree(n): Constructs a perfectly balanced binary tree with exactly n nodes. Returns the number of edges and the respective edges in the tree. Parameters: n (int): The number of nodes in the binary tree. Returns: (int, List[Tuple[int, int]]): The number of edges and the list of edges. edges = [] def connect_parent_children(parent, first_child, num_nodes_remaining): if num_nodes_remaining == 0: return left = first_child if num_nodes_remaining >= 1: edges.append((parent, left)) num_nodes_remaining -= 1 right = first_child + 1 if num_nodes_remaining >= 1: edges.append((parent, right)) num_nodes_remaining -= 1 connect_parent_children(left, right + 1, (num_nodes_remaining + 1) // 2) connect_parent_children(right, right + 1 + (num_nodes_remaining + 1) // 2, num_nodes_remaining // 2) connect_parent_children(1, 2, n - 1) return len(edges), edges"},{"question":"Problem Statement Alex is planning a vacation trip and wants to ensure his luggage is packed efficiently. He has a backpack with a specific capacity and a list of items, each with a weight and a value. Alex wants to maximize the total value of the items he can carry without exceeding the capacity of his backpack. You are tasked with writing a program that helps Alex determine the maximum total value of items he can pack into his backpack. Input The input is given in the following format: C N W_1 V_1 W_2 V_2 … W_N V_N The first line contains an integer C (1 leq C leq 1000), which represents the capacity of the backpack. The second line contains an integer N (1 leq N leq 1000), which represents the number of items available. The next N lines each contain two integers W_i (1 leq W_i leq 10000) and V_i (1 leq V_i leq 10000), which represent the weight and value of the i-th item, respectively. Output Output a single integer which represents the maximum total value of items that Alex can carry in his backpack without exceeding its capacity. Example Input 4 3 1 3 4 5 3 4 Example Output 7 Explanation In this example, Alex has a backpack with a capacity of 4 and three items with the following weights and values: - Item 1: weight = 1, value = 3 - Item 2: weight = 4, value = 5 - Item 3: weight = 3, value = 4 The optimal solution is to take item 1 and item 3, which together weigh 4 and have a total value of 7.","solution":"def knapsack(C, N, items): Solves the knapsack problem. Parameters: - C: int, capacity of the backpack - N: int, number of items - items: list of tuples, each tuple (Wi, Vi) indicates weight and value of an item Returns: - int, the maximum value that can be carried in the backpack without exceeding its capacity # Initialize a 2D list for dynamic programming with size (N+1) x (C+1) dp = [[0] * (C + 1) for _ in range(N + 1)] for i in range(1, N + 1): weight, value = items[i-1] for w in range(C + 1): if weight <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) else: dp[i][w] = dp[i-1][w] return dp[N][C] def solve_knapsack_from_input(input_string): Converts input string to arguments for knapsack function and returns the result. Parameters: - input_string: str, input data in specified format Returns: - int, the result from knapsack function inputs = input_string.strip().split(\'n\') C = int(inputs[0]) N = int(inputs[1]) items = [tuple(map(int, line.split())) for line in inputs[2:]] return knapsack(C, N, items)"},{"question":"Given a string that contains lowercase letters and integers, separate the letters and integers into two separate lists while maintaining their original order. Example 1: Input: s = \\"a1b2c3\\" Output: [\'a\', \'b\', \'c\'] [1, 2, 3] Explanation: Letters are \'a\', \'b\', \'c\' and numbers are 1, 2, 3. Example 2: Input: s = \\"x9z8\\" Output: [\'x\', \'z\'] [9, 8] Explanation: Letters are \'x\', \'z\' and numbers are 9, 8. Your Task: Implement the function `separateLettersAndDigits()` that takes a string `s` as input and returns two lists – one containing the letters and the other containing the integers in the order they originally appear in the string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - The string length will be between 1 and 10^6. - The integers in the string will be non-negative single digits (i.e., 0-9). - The string will only contain lowercase letters and integers.","solution":"def separateLettersAndDigits(s): letters = [] digits = [] for char in s: if char.isdigit(): digits.append(int(char)) elif char.isalpha(): letters.append(char) return letters, digits"},{"question":"Create a function that takes a `List` of integers and returns a new `List` containing the squares of only the even integers from the input list. If the input list is empty, the function should return an empty list. ```python square_evens([1, 2, 3, 4, 5]) # => [4, 16] square_evens([9, 11, 13, 15]) # => [] square_evens([]) # => [] ```","solution":"def square_evens(nums): Returns a list containing the squares of only the even integers from the input list. return [x**2 for x in nums if x % 2 == 0]"},{"question":"Harry is hosting a Halloween party and is organizing a treasure hunt for his friends. He has hidden multiple treasure chests around his house and each chest has a lock that can only be opened with a unique key. To add a twist to the game, each participant has a unique number and they can only open treasure chests whose lock numbers match the exact sum of any combination of digits in their assigned number. Harry needs a program to determine how many treasure chests each participant can potentially open. INPUT: The first line contains the number of participants \\"P\\". The next line contains \\"P\\" numbers, each representing a unique number assigned to a participant. The following line contains the number of treasure chests \\"C\\". The fourth line contains \\"C\\" numbers, each representing the lock number of a treasure chest. OUTPUT: For each participant\'s number, output the count of treasure chests they can potentially open. CONSTRAINT: 1 ≤ P ≤ 100 0 ≤ Participant\'s number < 10^6 1 ≤ C ≤ 100 0 ≤ Lock number ≤ 100 SAMPLE INPUT: 2 123 456 3 6 15 24 SAMPLE OUTPUT: 1 2","solution":"def get_combinations(digits): from itertools import combinations unique_sums = set() for i in range(1, len(digits) + 1): for combo in combinations(digits, i): unique_sums.add(sum(combo)) return unique_sums def count_treasure_chests(p, participants, c, chests): results = [] for number in participants: digits = [int(x) for x in str(number)] possible_sums = get_combinations(digits) count = sum(lock in possible_sums for lock in chests) results.append(count) return results # Example usage: if __name__ == \\"__main__\\": P = 2 participants = [123, 456] C = 3 chests = [6, 15, 24] results = count_treasure_chests(P, participants, C, chests) for result in results: print(result)"},{"question":"Write a program to find the perimeter of a polygon given its vertices in a 2D plane. The polygon is defined by a list of points ((x_i, y_i)) for (i = 0) to (n-1). The points are listed in a counter-clockwise order and the last point should be connected to the first point to close the polygon. The perimeter of the polygon is the sum of the Euclidean distances between consecutive points, including the distance from the last point to the first point. Input The input consists of several datasets. Each dataset starts with an integer (n) (3 ≤ (n) ≤ 100) indicating the number of vertices, followed by (n) pairs of integers ((x_i, y_i)) representing the coordinates of the vertices. The number of datasets is less than or equal to 10. Output For each dataset, print the perimeter of the polygon as a floating-point number with a precision of two decimal places. Example Input 4 0 0 0 1 1 1 1 0 5 0 0 0 2 2 2 2 0 1 0 Output 4.00 8.00","solution":"import math def calculate_distance(p1, p2): Helper function to calculate the Euclidean distance between two points. return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2) def polygon_perimeter(points): Function to calculate the perimeter of a polygon given its vertices. n = len(points) perimeter = 0 for i in range(n): perimeter += calculate_distance(points[i], points[(i + 1) % n]) return round(perimeter, 2) def process_input(datasets): result = [] for data in datasets: n = data[0] points = data[1:] result.append(polygon_perimeter(points)) return result"},{"question":"The citizens of a far-off city use a language that is composed of only lowercase alphabets. One day, a meteorite destroyed their alphabet reference, so they decided to create a new reference. You have been hired to write a program that helps sort a list of words based on a given custom alphabet order. Input The first line contains a string of 26 characters, which represents the new order of the alphabet. The next line contains an integer M, denoting the number of words. The last M lines contain one word each that needs to be sorted according to the new order. Output Output the words sorted in lexicographical order based on the new custom alphabet order, one word per line. Constraints 26 characters in the first line (new order of the alphabet) 1 ≤ M ≤ 100 1 ≤ Length of each word ≤ 50 Example Input: zyxwvutsrqponmlkjihgfedcba 3 apple banana cat Output: cat banana apple Explanation The example input custom alphabet order is the reverse of the normal alphabet. The words should be sorted based on this new order, so cat comes before banana, and banana comes before apple.","solution":"def custom_sort(alphabet, words): Sorts a list of words based on a custom alphabet order. :param alphabet: A string representing the custom alphabet order. :param words: A list of words to be sorted. :return: A list of words sorted based on the custom alphabet order. # Create a dictionary to map each character to its position in the custom alphabet alphabet_index = {char: idx for idx, char in enumerate(alphabet)} # Define a custom comparison key based on the custom alphabet\'s order def custom_key(word): return [alphabet_index[char] for char in word] # Sort the words using the custom key sorted_words = sorted(words, key=custom_key) return sorted_words"},{"question":"Amy loves coding challenges, and her favorite ones are the ones involving strings. She recently came across an interesting problem and needs your help to solve it. Amy wants to know the length of the longest substring of a given string that contains at most K distinct characters. Given a string S and an integer K, your task is to determine the length of the longest substring that contains at most K distinct characters. Input: The first line contains a single integer T denoting the number of test cases. Each test case consists of two lines: - The first line contains an integer K. - The second line contains the string S. Output: For each test case, output the length of the longest substring of S that contains at most K distinct characters. Constraints: 1 ≤ T ≤ 10^3 1 ≤ |S| ≤ 10^5 1 ≤ K ≤ 26 SAMPLE INPUT 2 2 abcba 3 aaabbb SAMPLE OUTPUT 3 6 Explanation: For the first test case: - With K = 2, the longest substring with at most 2 distinct characters is \\"bcb\\" or \\"cbc\\", both having length 3. For the second test case: - With K = 3, the entire string \\"aaabbb\\" contains exactly 2 distinct characters and has length 6.","solution":"def longest_substring_k_distinct(k, s): n = len(s) if k == 0 or n == 0: return 0 left = 0 right = 0 max_length = 0 char_count = {} while right < n: if len(char_count) <= k: if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 right += 1 while len(char_count) > k: if char_count[s[left]] == 1: del char_count[s[left]] else: char_count[s[left]] -= 1 left += 1 if len(char_count) <= k: max_length = max(max_length, right - left) return max_length def solve(test_cases): results = [] for k, s in test_cases: results.append(longest_substring_k_distinct(k, s)) return results"},{"question":"You are given an array of integers where each element appears twice except for one that appears only once. You have to find the single element that appears only once. Your solution should have a linear runtime complexity and use only constant extra space. -----Input:----- - The first line contains an integer N, the number of elements in the array. - The second line contains N integers separated by spaces, representing the elements of the array. -----Output:----- - Output the single integer that appears only once. -----Constraints----- - 1 leq N leq 10^5 - 1 leq text{Array elements} leq 10^5 - N is always odd -----Sample Input:----- 7 4 3 2 4 1 3 2 -----Sample Output:----- 1","solution":"def find_single_element(nums): Finds the single element that appears only once in an array where every other element appears twice. Params: nums: List[int] - the input array of integers Returns: int - the single element that appears only once result = 0 for num in nums: result ^= num return result"},{"question":"A museum is organizing an art exhibition. They want to place paintings in a row. Each painting can only be placed either 90 degrees rotated or in its normal orientation. The paintings can be represented as a list of integers where each integer denotes the width of the painting in its normal orientation. If a painting is rotated, its width becomes its height and vice versa. You are given the maximum height allowed for the row of paintings and a list of the widths and heights of each painting. Determine the maximum number of paintings that can be placed in a row without exceeding the maximum height. -----Input----- The first line contains two positive integers n and h (1 ≤ n ≤ 1000, 1 ≤ h ≤ 10^6), the number of paintings and the maximum allowed height for the row. The next n lines each contain two positive integers wi and hi (1 ≤ wi, hi ≤ 1000), the width and height of each painting. -----Output----- Output one integer — the maximum number of paintings that can be placed in a row without exceeding the maximum height. -----Examples----- Input 4 10 5 8 6 3 4 2 3 5 Output 3 Input 3 5 1 6 2 3 4 4 Output 2","solution":"def max_paintings_in_row(n, h, paintings): Determines the maximum number of paintings that can be placed in a row without exceeding the maximum height. Parameters: n (int): Number of paintings. h (int): Maximum allowed height for the row. paintings (list of tuples): Each tuple contains two integers wi and hi representing the width and height of each painting respectively. Returns: int: Maximum number of paintings that can be placed in a row without exceeding the maximum height. def calculate_max_paintings(remaining_paintings, current_height, idx): if idx == n: return 0 wi, hi = remaining_paintings[idx] max_count = calculate_max_paintings(remaining_paintings, current_height, idx + 1) if current_height + hi <= h: max_count = max(max_count, 1 + calculate_max_paintings(remaining_paintings, current_height + hi, idx + 1)) if current_height + wi <= h: max_count = max(max_count, 1 + calculate_max_paintings(remaining_paintings, current_height + wi, idx + 1)) return max_count return calculate_max_paintings(paintings, 0, 0)"},{"question":"Given a binary tree and an integer `data`, your task is to find the level of the given `data` in the binary tree. If the data is not present in the binary tree, return -1. The root node is at level 1. Example 1: Input: 3 / 2 5 / 1 4 data = 4 Output: 3 Explanation: The node with data 4 is at level 3. Example 2: Input: 10 / 20 30 / 40 50 data = 30 Output: 2 Your Task: The task is to implement the function findLevel() which takes the root node of the binary tree and data as input parameters and returns the level of the node with the given data. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= Number of nodes <= 1000 1 <= Data in nodes <= 10^5","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def findLevel(root, data): Returns the level of the node with the given data in the binary tree. If data is not present, return -1. # Perform Level Order Traversal and keep track of levels if root is None: return -1 level = 1 queue = [(root, level)] while queue: node, lvl = queue.pop(0) # If found the data, return the level if node.data == data: return lvl if node.left: queue.append((node.left, lvl + 1)) if node.right: queue.append((node.right, lvl + 1)) # If we exit the loop without finding the data return -1"},{"question":"You are a software engineer assigned to develop a system for a library that helps in organizing and managing books. Your task is to write a function that determines if a given year is a \\"special year\\" for the library. A \\"special year\\" is defined as a year that has exactly three factors (excluding 1). For example, 4 is a special year because it has exactly three factors (1, 2, and 4), while 6 is not because it has four factors (1, 2, 3, and 6). Write a function that accepts an integer year and determines if it is a \\"special year.\\" -----Input----- The input contains a single integer, representing the year. -----Output----- Output `True` if the year is special, and `False` otherwise. -----Examples----- Input 4 Output True Input 10 Output False","solution":"def is_special_year(year): Determines if a given year is a \\"special year\\", meaning it has exactly three factors excluding 1. :param year: int - Year to be checked :return: bool - True if year is special, False otherwise factors = [] for i in range(2, year+1): if year % i == 0: factors.append(i) # If number of factors exceeds 2, break early if len(factors) > 2: return False return len(factors) == 2"},{"question":"Given an array of integers representing heights of adjacent sections of a wall, design an algorithm to find the minimum number of bricks that need to be removed so that the remaining wall is consistently decreasing in height from left to right. The wall is represented by an array where each element denotes the height of a section. A consistent decreasing wall means every section should have a strictly lower height than the previous section from left to right. # Input: - The first line of input contains an integer N, the number of sections in the wall. - The second line contains N space-separated integers representing the heights of the sections of the wall. # Output: - The minimum number of bricks that need to be removed to ensure the wall\'s height is consistently decreasing from left to right. # Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ height of each section ≤ 10^9 # Sample Input: ``` 6 5 3 8 6 2 9 ``` # Sample Output: ``` 3 ``` # Explanation: To achieve a consistently decreasing wall, you could remove sections with heights 8, 6, and 9, resulting in the sequence [5, 3, 2]. Hence the output is 3, indicating the number of bricks removed.","solution":"def min_removals_to_decreasing_wall(n, heights): This function finds the minimum number of bricks to be removed to ensure the wall is consistently decreasing in height from left to right. Parameters: n (int): The number of sections in the wall. heights (List[int]): A list of heights of sections of the wall. Returns: int: The minimum number of bricks to be removed. lis = [] for height in heights: pos = lower_bound(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return n - len(lis) def lower_bound(arr, x): Helper function to find the lower bound of x in arr. Parameters: arr (List[int]): The list in which to find lower bound for x. x (int): The value to find lower bound for. Returns: int: The lower bound index of x in arr. lo, hi = 0, len(arr) while lo < hi: mid = (lo + hi) // 2 if arr[mid] <= x: hi = mid else: lo = mid + 1 return lo"},{"question":"You have been given the task of writing a program to simulate a simplified traffic light system at an intersection. In this traffic light system, there are two directions: North-South (NS) and East-West (EW). Each traffic light cycle consists of a green phase for one direction and a red phase for the other. Both directions have the same duration for their green phases. The traffic light system starts with a green light for the NS direction and red for the EW direction. After the green phase duration for NS expires, NS turns red and EW turns green. This alternation continues indefinitely. You need to write a program that determines the color of the traffic light for a given direction at a given time, measured in seconds from the start of the traffic light system. # Input The input consists of two lines: - The first line contains two integers T and D, where T is the duration of the green phase in seconds, and D is the direction (either \'NS\' for North-South or \'EW\' for East-West). - The second line contains a single integer, time, which represents the time in seconds from the start of the traffic light system. Constraints: - 1 leq T leq 1000 - 0 leq time leq 10000 - The direction D is either \'NS\' or \'EW\' # Output Output a single string: \\"green\\" if the given direction\'s light is green at the given time, or \\"red\\" if the light is red. # Examples Input 4 NS 5 Output red Input 3 EW 4 Output green # Explanation: In the first example, the green phase duration is 4 seconds. Initially, the NS direction has a green light. At time = 5 seconds, since the first 4 seconds were green for NS and the next 4 seconds will be green for EW, the NS light will be red. In the second example, the green phase duration is 3 seconds. Initially, the NS direction has a green light. At time = 4 seconds, the NS light turns red, and the EW light turns green, making EW green at that moment.","solution":"def traffic_light(T, D, time): Determines the color of the traffic light for a given direction at a given time. :param T: int - Duration of the green phase in seconds :param D: str - Direction (\'NS\' for North-South, \'EW\' for East-West) :param time: int - Time in seconds from the start of the traffic light system :return: str - \\"green\\" if the given direction\'s light is green at the given time, otherwise \\"red\\" # Calculate the cycle period cycle_period = 2 * T # Calculate position within cycle position_in_cycle = time % cycle_period # Determine the current light status if position_in_cycle < T: # First T seconds is green for NS, red for EW if D == \'NS\': return \\"green\\" else: return \\"red\\" else: # Next T seconds is red for NS, green for EW if D == \'NS\': return \\"red\\" else: return \\"green\\""},{"question":"A group of constructors is attempting to build the tallest possible tower using a set of blocks of various heights. Each block, however, can only be placed atop another block if its height is strictly less than the height of the block below it. Help the constructors determine the height of the tallest tower they can create. -----Input----- A single integer N denoting the number of blocks available. A list of N integers h1, h2, ..., hN where hi denotes the height of the ith block. -----Output----- In the first line, output the integer \'M\' which is the maximum height of the tower that can be constructed. -----Constraints----- N ranges from 1 to 100. Each block\'s height ranges from 1 to 1000. -----Example----- Input: 5 4 3 2 5 7 Output: 4 -----Explanation----- The tallest tower that can be constructed using the blocks has a height of 4 (blocks with heights 1, 2, 3, and 4).","solution":"def tallest_tower(blocks): Return the height of the tallest tower that can be constructed. Parameters: blocks (list): List of integers representing the heights of each block available. Returns: int: Maximum height of the tower. sorted_blocks = sorted(blocks, reverse=True) tower_height = 0 last_height = float(\'inf\') # Initialize to a very high value for block in sorted_blocks: if block < last_height: tower_height += 1 last_height = block return tower_height"},{"question":"# Story & Task Ann is a book enthusiast who owns a large collection of books. She likes to sort her books by different criteria to find out how the order affects the structure of the list. One of her favorite sorting challenges is to sort a list of books by their titles and find how many swaps are required to bring the list into alphabetical order. You are tasked to help Ann with this challenge. Given a list of book titles, determine the minimum number of adjacent swaps required to sort the list in alphabetical order. # Input/Output - `[input]` string array `books` Array of strings, representing the titles of the books. `1 ≤ books.length ≤ 500` `1 ≤ books[i].length ≤ 100` - `[output]` an integer The minimum number of adjacent swaps required to alphabetically sort the books. # Example For `books = [\\"The Great Gatsby\\", \\"1984\\", \\"To Kill a Mockingbird\\", \\"Brave New World\\"]`, the output should be `3`. ``` After sorting the books in alphabetical order: [\\"1984\\", \\"Brave New World\\", \\"The Great Gatsby\\", \\"To Kill a Mockingbird\\"] We will need the following swaps: 1. Swap \\"The Great Gatsby\\" with \\"1984\\". 2. Swap \\"To Kill a Mockingbird\\" with \\"Brave New World\\". 3. Swap \\"To Kill a Mockingbird\\" with \\"The Great Gatsby\\". Total swaps: 3 ```","solution":"def minimum_adjacent_swaps(books): Returns the minimum number of adjacent swaps required to sort the list of books in alphabetical order. n = len(books) sorted_books = sorted(books) # Create a dictionary to map book titles to their positions in the sorted list position_map = {book: index for index, book in enumerate(sorted_books)} # Convert the book titles to their positions in the sorted list positions = [position_map[book] for book in books] # Use bubble sort to count the number of swaps needed swaps = 0 for i in range(n): for j in range(n - 1): if positions[j] > positions[j + 1]: positions[j], positions[j + 1] = positions[j + 1], positions[j] swaps += 1 return swaps"},{"question":"Alice is studying the binary strings of length N. She defines an interesting string as a binary string that does not contain two consecutive \'1\'s. Given an integer N, help Alice determine the number of interesting binary strings of length N. Input Format The first line contains a single integer T (the number of test cases). Each of the next T lines contains a single integer N (the length of the binary string). Constraints 1 leq T leq 10^3 1 leq N leq 10^5 Output Format For each test case, print the number of interesting binary strings of length N on a new line. Sample Input 3 3 4 5 Sample Output 5 8 13 Explanation For N=3, the interesting binary strings are 000, 001, 010, 100, and 101. There are a total of 5 interesting strings. For N=4, the interesting binary strings are 0000, 0001, 0010, 0100, 0101, 1000, 1001, and 1010. There are a total of 8 interesting strings. For N=5, the interesting binary strings are 00000, 00001, 00010, 00100, 00101, 01000, 01001, 01010, 10000, 10001, 10010, 10100, and 10101. There are a total of 13 interesting strings.","solution":"def count_interesting_strings(N): Returns the number of interesting binary strings of length N. if N == 1: return 2 elif N == 2: return 3 # For N >= 3, we use the recursive relation of the Fibonacci sequence a, b = 2, 3 for _ in range(3, N + 1): a, b = b, a + b return b def solve(test_cases): results = [] for N in test_cases: results.append(count_interesting_strings(N)) return results # Example of usage if __name__ == \\"__main__\\": # For example, let\'s take T test cases: T = 3 test_cases = [3, 4, 5] results = solve(test_cases) for res in results: print(res)"},{"question":"ChthollyNotaSeniorious is now interested in a game involving alphabet characters. AquaMoon introduced him to a collection of strings consisting of lowercase letters. AquaMoon tells ChthollyNotaSeniorious that in one operation, he can choose any one string and remove one character from it. ChthollyNotaSeniorious wants to ensure that after some number of operations, all strings will consist of an equal number of distinct characters. He has invited you to participate in this interesting game, so please help him find the minimum number of operations needed. If it is not possible to make the number of distinct characters in all strings the same, return -1. -----Input----- The first line of the input contains a single integer t (1 leq t leq 10^3) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n (1 leq n leq 100) — the number of strings. The i-th of the following n lines contains a string s_i (1 leq |s_i| leq 100) — the i-th string each consisting of lowercase English letters. It is guaranteed that the sum of all characters over all test cases does not exceed 10^5. -----Output----- For each test case, if the objective is not achievable, output -1. Otherwise, in the first line output the minimum number of operations required to make the number of distinct characters in all strings the same. -----Examples----- Input 2 3 abc bca cab 2 abcd ef Output 0 -1 -----Note----- In the first test case, all strings already have three distinct characters, so no operations are needed. In the second test case, it\'s impossible to make both strings have the same number of distinct characters through any number of allowed operations, hence the output is -1.","solution":"def min_operations_to_equal_distinct_characters(t, cases): results = [] for i in range(t): n = cases[i][0] strings = cases[i][1] # Collect the count of each character for total validation from collections import Counter total_count = Counter() for s in strings: total_count.update(s) # Check if each character count is divisible by the number of strings for count in total_count.values(): if count % n != 0: results.append(-1) break else: results.append(0) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},F={class:"card-container"},Y={key:0,class:"empty-state"},P=["disabled"],j={key:0},R={key:1};function z(s,e,u,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",F,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",j,"See more"))],8,P)):l("",!0)])}const L=d(A,[["render",z],["__scopeId","data-v-01f37774"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/4.md","filePath":"chatai/4.md"}'),D={name:"chatai/4.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,G as default};
