import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,a,r){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(q,[["render",O],["__scopeId","data-v-3ffa5ae8"]]),S=JSON.parse('[{"question":"You are given a 2D list of integers representing a grid where each cell has a certain amount of \\"gold\\". An entry in matrix `grid[i][j]` represents the amount of gold in the cell `(i, j)`. Your task is to design a function that summarizes how much maximum gold can be collected, starting from any cell and moving only in four possible directions (up, down, left, right) to adjacent cells, without visiting any cell more than once. **Function Signature:** ```python def getMaximumGold(grid: List[List[int]]) -> int: ``` **Example:** ```python grid = [ [1, 0, 7], [2, 0, 6], [3, 4, 5], [0, 3, 0] ] Output: 28 Explanation: One of the paths to get the maximum gold is 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7. ``` **Constraints:** - `1 <= grid.length, grid[i].length <= 15` - `0 <= grid[i][j] <= 100` - There are at most 25 cells with gold. **Note:** - You can start and stop collecting gold from any grid cell. - You may assume that there is always a path that allows at least one gold to be collected.","solution":"from typing import List def getMaximumGold(grid: List[List[int]]) -> int: def dfs(x, y, visited): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0 or (x, y) in visited: return 0 visited.add((x, y)) gold = grid[x][y] max_gold = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: max_gold = max(max_gold, dfs(x + dx, y + dy, visited)) visited.remove((x, y)) return gold + max_gold max_gold = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] != 0: max_gold = max(max_gold, dfs(i, j, set())) return max_gold"},{"question":"Design a min-stack that supports push, pop, top, and retrieving the minimum element in constant time. Example 1: Input: push(-2) push(0) push(-3) getMin() -> -3 pop() top() -> 0 getMin() -> -2 Your Task: You are required to implement a class `MinStack` with the following methods: - `void push(int x)`: Pushes an integer x onto the stack. - `void pop()`: Removes the element on the top of the stack. - `int top()`: Gets the top element of the stack. - `int getMin()`: Retrieves the minimum element in the stack. Expected Time Complexity: O(1) for all methods. Expected Auxiliary Space: O(n), where n is the number of elements in the stack. Constraints: 1 <= Number of operations <= 10^4 -10^5 <= value of elements <= 10^5","solution":"class MinStack: def __init__(self): Initialize the stack and a helper stack to keep track of minimums. self.stack = [] self.min_stack = [] def push(self, x: int) -> None: Push element x onto the stack and update the min stack. self.stack.append(x) # If the min stack is empty or the current element is smaller or equal # to the element at the top of the min stack, push it onto the min stack. if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -> None: Removes the element on the top of the stack and updates the min stack. if self.stack: top_element = self.stack.pop() # If the top element is the same as the top of the min stack, pop from the min stack as well. if top_element == self.min_stack[-1]: self.min_stack.pop() def top(self) -> int: Get the top element of the stack. if self.stack: return self.stack[-1] return None # If the stack is empty def getMin(self) -> int: Retrieve the minimum element in the stack. if self.min_stack: return self.min_stack[-1] return None # If the min stack is empty"},{"question":"Given an integer array arr and an integer k, rearrange the array in such a way that the difference between any two consecutive elements in the rearranged array is at most k. Input The first line of input contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n space-separated integers arr1, arr2, ..., arrn (1 ≤ arri ≤ 1000000) — the elements of the array. The third line contains a single integer k (1 ≤ k ≤ 1000000), the maximum allowed difference between consecutive elements. Output Print any valid rearrangement of the array such that the absolute difference between any two consecutive elements is at most k. If no such arrangement exists, print a single line containing \\"-1\\". Examples Input 6 1 2 9 12 15 16 3 Output 1 2 1 5 6 9 12 15 Input 3 10 3 20 15 Output 10 3 20 Note In the first example, the output array could be [1, 2, 5, 6, 9, 12, 15]. One possible valid output is [1, 4, 6, 8], but the numbers could be in any order that satisfies the conditions. In the second example, the output array could be [10, 3, 20] or [10, 20], which fulfill the conditions imposed by k.","solution":"def rearrange_array(arr, k): Rearranges the array so that the difference between any two consecutive elements is at most k. Parameters: arr (list): List of integers. k (int): Maximum allowed difference between consecutive elements. Returns: list: Rearranged list that satisfies the condition or [-1] if not possible. arr.sort() for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) > k: return [-1] return arr # Example usage: # arr = [1, 2, 9, 12, 15, 16] # k = 3 # print(rearrange_array(arr, k)) # Output: [1, 2, 9, 12, 15, 16] or any valid permutation"},{"question":"Alice and Bob are playing a modified version of a popular game called \\"Tower of Hanoi\\". In this game, instead of moving all disks from one rod to another, players need to move a subset of disks from the initial rod to a target rod in a restricted number of moves. The goal is to check whether it\'s possible to achieve the desired configuration within the given number of moves. # Problem Specification You are given: - Number of disks (`n`) - Number of moves allowed (`m`) - Initial configuration of the rods (`initial`) - Desired configuration of the rods (`target`) The rods are labeled as A, B, and C. Each rod can contain between 0 to n disks, represented by numbers from 1 to n, where 1 is the smallest disk and n is the largest. # Input One or multiple test cases will be given. For each test case: 1. An integer n, representing the number of disks (1 ≤ n ≤ 10). 2. An integer m, representing the number of moves allowed (1 ≤ m ≤ 30). 3. Three lines describing the initial configuration of the rods, one rod per line. 4. Three lines describing the target configuration of the rods. Each of the rod configuration lines contains a rod\'s label followed by zero or more integers, representing the disks placed on that rod, from top to bottom. The end of input is signified by a line with a single zero. # Output For each test case, output \\"YES\\" if it\'s possible to achieve the target configuration of the rods within m moves, otherwise output \\"NO\\". # Example Input ``` 3 3 A 1 2 3 B C A 3 B 2 C 1 3 7 A 1 2 3 B C A B C 1 2 3 0 ``` Output ``` NO YES ``` # Explanation 1. In the first test case, it\'s not possible to achieve the target configuration within 3 moves, hence the output is \\"NO\\". 2. In the second test case, it is possible to achieve the target configuration within 7 moves, hence the output is \\"YES\\". --- By adhering to these constraints, you should ensure that implementations can efficiently solve the problem within reasonable time limits.","solution":"def is_hanoi_solvable(n, m, initial, target): def move_disks(num_disks, from_rod, to_rod, aux_rod): if num_disks == 0: return 0 if num_disks == 1: return 1 # one move # Move num_disks-1 disks from from_rod to aux_rod using to_rod moves1 = move_disks(num_disks - 1, from_rod, aux_rod, to_rod) # Move the nth disk from from_rod to to_rod moves2 = 1 # Move the num_disks-1 disks from aux_rod to to_rod using from_rod moves3 = move_disks(num_disks - 1, aux_rod, to_rod, from_rod) return moves1 + moves2 + moves3 def extract_state(config): state = {\'A\': [], \'B\': [], \'C\': []} for line in config.splitlines(): parts = line.split() rod = parts[0] disks = list(map(int, parts[1:])) state[rod] = disks return state initial_state = extract_state(initial) target_state = extract_state(target) def is_same_state(state1, state2): for rod in [\'A\', \'B\', \'C\']: if state1[rod] != state2[rod]: return False return True if is_same_state(initial_state, target_state): return \\"YES\\" total_moves = move_disks(n, \'A\', \'C\', \'B\') if total_moves <= m: return \\"YES\\" else: return \\"NO\\" def solve_hanoi_games(input_data): lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): n = int(lines[index]) if n == 0: break m = int(lines[index + 1]) initial_config = \'n\'.join(lines[index + 2: index + 5]) target_config = \'n\'.join(lines[index + 5: index + 8]) result = is_hanoi_solvable(n, m, initial_config, target_config) results.append(result) index += 8 return \'n\'.join(results)"},{"question":"Write a program that simulates an animal shelter using a queue to process adoption requests. The shelter only keeps dogs and cats, and operates on a strictly \\"first in, first out\\" basis when adopting out animals. When a person adopts an animal, they can specify if they want a dog, a cat, or the oldest (either the earliest arrived dog or cat, regardless of species). Implement the operations of the shelter: - `enqueueAnimal(species, name)` - adds an animal to the shelter. `species` is either \\"dog\\" or \\"cat\\", and `name` is a string representing the animal’s name. - `dequeueAny()` - removes and returns the name of the oldest animal. - `dequeueDog()` - removes and returns the name of the oldest dog. - `dequeueCat()` - removes and returns the name of the oldest cat. Input The input consists of a series of operations to be performed in the shelter until the word \\"end\\" is encountered, indicating the end of operations. Each operation is given on a new line in one of the following formats: - \\"enqueue species name\\" - \\"dequeueAny\\" - \\"dequeueDog\\" - \\"dequeueCat\\" - \\"end\\" Output For each `dequeueAny`, `dequeueDog`, and `dequeueCat` operation, output the name of the adopted animal on a new line. If there is no animal to adopt of the requested type, output \\"No animals available\\". Example Input ``` enqueue dog Max enqueue cat Whiskers enqueue dog Buddy dequeueAny enqueue cat Fluffy dequeueDog dequeueCat dequeueAny end ``` Output ``` Max Buddy Whiskers Fluffy ```","solution":"from collections import deque class AnimalShelter: def __init__(self): self.dogs = deque() self.cats = deque() self.order = 0 def enqueueAnimal(self, species, name): if species == \\"dog\\": self.dogs.append((name, self.order)) elif species == \\"cat\\": self.cats.append((name, self.order)) self.order += 1 def dequeueAny(self): if not self.dogs and not self.cats: return \\"No animals available\\" if not self.dogs: return self.dequeueCat() if not self.cats: return self.dequeueDog() if self.dogs[0][1] < self.cats[0][1]: return self.dequeueDog() else: return self.dequeueCat() def dequeueDog(self): if not self.dogs: return \\"No animals available\\" name, _ = self.dogs.popleft() return name def dequeueCat(self): if not self.cats: return \\"No animals available\\" name, _ = self.cats.popleft() return name # Example usage def process_operations(input_operations): shelter = AnimalShelter() results = [] for operation in input_operations: if operation.startswith(\\"enqueue\\"): _, species, name = operation.split() shelter.enqueueAnimal(species, name) elif operation == \\"dequeueAny\\": results.append(shelter.dequeueAny()) elif operation == \\"dequeueDog\\": results.append(shelter.dequeueDog()) elif operation == \\"dequeueCat\\": results.append(shelter.dequeueCat()) elif operation == \\"end\\": break return results"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward (ignoring spaces and punctuation). Given a string, you need to find the longest palindromic substring. Function Description Complete the function longestPalindromicSubstring in the editor below. longestPalindromicSubstring has the following parameter(s): string s: the input string Returns string: the longest palindromic substring Constraints 1 ≤ s.length ≤ 1000 s consists of only ASCII characters. Input Format A single line containing a string, s. Sample Input babad Sample Output bab Explanation The longest palindromic substring of \\"babad\\" is \\"bab\\". Note that \\"aba\\" is also a valid answer.","solution":"def longestPalindromicSubstring(s): Returns the longest palindromic substring of the input string s. n = len(s) if n <= 1: return s start, max_length = 0, 1 for i in range(1, n): # Even length palindromes, search centered at i-1 and i low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Odd length palindromes, search centered at i low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"You are given a rectangular grid representing a 2D maze with walls, paths, and an exit. Your task is to implement a function to find if there exists a path from the start position to the exit. # Parameters: * `maze` - a two-dimensional list of integers where: * `0` represents a path, * `1` represents a wall, and * `2` represents the exit. * `start` - a tuple `(row, column)` indicating the starting position of the search. # Output: Return `True` if there is a path from the start position to the exit, otherwise return `False`. # Constraints: * The maze will always be at least 2x2 in size. * The start position is always on a path (`0`). * The exit (`2`) is unique and there is exactly one in the maze. * You may move up, down, left, or right but cannot move through walls (`1`). # Example: ```python maze = [ [0, 1, 0, 0], [0, 1, 1, 0], [0, 0, 0, 1], [1, 1, 2, 0] ] start = (0, 0) maze_solver(maze, start) # should return: True ``` In the example above, starting at position `(0, 0)`, there is a path that reaches the exit at the coordinates `(3, 2)`. --- # Additional considerations: - Your implementation should be efficient in terms of time complexity. - You may use any commonly known pathfinding algorithms like BFS or DFS. # Suggested Function Signature: ```python def maze_solver(maze: List[List[int]], start: Tuple[int, int]) -> bool: pass ```","solution":"from typing import List, Tuple def maze_solver(maze: List[List[int]], start: Tuple[int, int]) -> bool: Determines if there is a path from start position to the exit in the maze. Parameters: maze (List[List[int]]): A two-dimensional list representing the maze. start (Tuple[int, int]): The starting position (row, column). Returns: bool: True if there is a path from start to exit, otherwise False. rows, cols = len(maze), len(maze[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_exit(r, c): return maze[r][c] == 2 def is_valid(r, c): return 0 <= r < rows and 0 <= c < cols and maze[r][c] != 1 def dfs(r, c): if not is_valid(r, c) or maze[r][c] == -1: return False if is_exit(r, c): return True # mark the current cell as visited maze[r][c] = -1 for dr, dc in directions: if dfs(r + dr, c + dc): return True return False start_row, start_col = start return dfs(start_row, start_col)"},{"question":"Varun is fascinated by sequences and loves to analyze them. He recently came across a special sequence and needs your help with some queries. Given is an integer ( M ) and a sequence of ( M ) distinct integers ( A ). Varun has to answer ( Q ) queries, each of the form ( T , X ). Here ( T ) is the type of query and ( X ) is an integer. If ( T = 1 ), Varun must find the number of elements in ( A ) that are less than ( X ). If ( T = 2 ), Varun must find the number of elements in ( A ) that are greater than ( X ). If ( T = 3 ), Varun must find the number of elements in ( A ) that are equal to ( X ). Varun can do this easily, but he is busy with his studies. Thus, he has asked you to write a program that will help him. # Input - There will be an integer ( M ) in the first line. - The second line will have ( M ) distinct integers ( A ). - The third line will have an integer ( Q ). - The next ( Q ) lines will have two integers each: ( T ) and ( X ). # Output For each of the ( Q ) lines, output the result for the corresponding query in a separate line. Constraints 1 ≤ ( M ) ≤ 10^5 1 ≤ ( A[i] ) ≤ 10^9 1 ≤ ( Q ) ≤ 10^5 1 ≤ ( T ) ≤ 3 1 ≤ ( X ) ≤ 10^9 # Sample Input 6 3 1 4 2 7 5 4 1 4 2 3 3 5 1 2 # Sample Output 3 3 1 1 # Explanation Numbers for each query: Query 1: {3, 1, 2} are less than 4, so result is 3. Query 2: {4, 7, 5} are greater than 3, so result is 3. Query 3: {5} is equal to 5, so result is 1. Query 4: {1} is less than 2, so result is 1.","solution":"def process_queries(M, A, queries): def count_less_than(X): return sum(1 for value in A if value < X) def count_greater_than(X): return sum(1 for value in A if value > X) def count_equal_to(X): return sum(1 for value in A if value == X) results = [] for T, X in queries: if T == 1: results.append(count_less_than(X)) elif T == 2: results.append(count_greater_than(X)) elif T == 3: results.append(count_equal_to(X)) return results # Example usage: A = [3, 1, 4, 2, 7, 5] M = len(A) queries = [(1, 4), (2, 3), (3, 5), (1, 2)] print(process_queries(M, A, queries))"},{"question":"Ozmalda enjoys playing board games, and recently, she\'s been intrigued by a game involving dice rolls. The game includes a special n-sided die, where each face is labeled with a distinct integer from 1 to n. Ozmalda wants to analyze the game by generating all possible outcomes of rolling the die k times in a sequence and then computing the possible sum combinations. Your task is to help Ozmalda by writing a program that outputs all the unique sums that can be obtained by rolling the n-sided die k times. # Input - The first line contains two space-separated integers n and k (1 ≤ n, k ≤ 10), the number of faces on the die and the number of times it is rolled respectively. # Output - Print the unique sums in ascending order, each sum on a new line. # Examples Example 1 **Input:** ``` 4 2 ``` **Output:** ``` 2 3 4 5 6 7 8 ``` Example 2 **Input:** ``` 2 3 ``` **Output:** ``` 3 4 5 6 ```","solution":"from itertools import product def all_possible_sums(n, k): Generates unique sums of outcomes from rolling an n-sided die k times. Parameters: n (int): The number of faces on the die. k (int): The number of times the die is rolled. Returns: list: A list of unique sums in ascending order. # Generate all possible outcomes using product outcomes = product(range(1, n+1), repeat=k) # Calculate all possible sums sums = {sum(outcome) for outcome in outcomes} # Return the sorted list of unique sums return sorted(sums) # Example usage: # n, k = map(int, input().split()) # for s in all_possible_sums(n, k): # print(s)"},{"question":"A Little Elephant from the Zoo of Lviv likes symmetrical numbers, i.e., numbers that remain the same when their digits are reversed. The Little Elephant has L favorite symmetrical numbers C_{1}, C_{2}, ..., C_{L}. He thinks the symmetrical number P is special if either |P| ≥ 5 or for some j from 1 to L we have that C_{j} is a substring of P. The Little Elephant has found M symmetrical numbers D_{1}, D_{2}, ..., D_{M} in the treasure chest. Now he wants to know which of them are special. Help him and find for each i from 1 to M whether the number D_{i} is special or not. Notes. Let P be some symmetrical number. Then |P| denotes the length of the number P; P[i] (1 ≤ i ≤ |P|) denotes the i^{th} digit of P (the numeration of digits starts from 1); The number Q of the length N is called a substring of P if for some k from 0 to |P| - N we have Q[1] = P[k + 1], Q[2] = P[k + 2], ..., Q[N] = P[k + N]. ------ Input ------ The first line of the input file contains two integers L and M, the number of favorite symmetrical numbers of the Little Elephant and the number of symmetrical numbers he has found in the treasure chest. Each of the following L lines contains one favorite symmetrical number. Namely, j^{th} line among these L lines contains the number C_{j}. Each of the following M lines contains one symmetrical number that was found in the treasure chest. Namely, i^{th} line among these M lines contains the number D_{i}. The input file does not contain any whitespaces. ------ Output ------ For each of the M symmetrical numbers that were found in the treasure chest print Special if it is special, and Ordinary otherwise. ------ Constraints ------ 1 ≤ L, M ≤ 50 For each number P in the input file we have 1 ≤ |P| ≤ 50. Each number in the input file consists only of the digits 0-9. ----- Sample Input 1 ------ 2 4 121 1221 12321 454 75557 1234554321 ----- Sample Output 1 ------ Special Ordinary Special Special ----- explanation 1 ------ The number P = 454 is special since it is of length 5. The number P = 75557 is special since the favorite number 75557 is its substring. The number P = 1234554321 is special since its length is greater than or equal to 5. The number P = 1221 is ordinary since none of the favorite numbers 121 and 1221 are its substring. Note, however, that P does not have any favorite substrings at all.","solution":"def is_special(L, M, favorites, chests): Determine if each chest number is special. Parameters: L (int): Number of favorite symmetrical numbers. M (int): Number of symmetrical numbers found in the treasure chest. favorites (list of str): List of favorite symmetrical numbers. chests (list of str): List of symmetrical numbers found in treasure chest. Returns: List of str: \\"Special\\" or \\"Ordinary\\" for each symmetrical number in chests. results = [] for chest in chests: if len(chest) >= 5: results.append(\\"Special\\") else: is_special = False for favorite in favorites: if favorite in chest: is_special = True break if is_special: results.append(\\"Special\\") else: results.append(\\"Ordinary\\") return results"},{"question":"Problem D: Numerical Pattern Finder Consider a series of integers where each number in the series is generated based on the following process: 1. Start with a positive integer N. 2. If the current number is even, the next number in the series is obtained by dividing the current number by 2. 3. If the current number is odd, the next number in the series is obtained by multiplying the current number by 3 and then adding 1. 4. The process continues until the number 1 is reached. For example, if the series starts with 6, the numbers generated are: 6, 3, 10, 5, 16, 8, 4, 2, 1. Your task is to write a program that takes an integer N as input and prints the length of the series ending at 1 if the series is generated through the above process. # Input The input consists of one line which contains a single integer N (1 <= N <= 1,000,000). # Output For the given N, your program should print a single integer representing the length of the series ending at 1. # Examples Input 6 Output 9 Input 19 Output 21 # Explanation For N = 6, the series is: 6, 3, 10, 5, 16, 8, 4, 2, 1. The length is 9. For N = 19, the series is: 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1. The length is 21.","solution":"def find_pattern_length(N): This function calculates the length of the series starting from N and ending at 1 following the specified pattern. Parameters: N (int): The starting integer of the series Returns: int: The length of the series ending at 1 length = 1 while N != 1: if N % 2 == 0: N //= 2 else: N = 3 * N + 1 length += 1 return length"},{"question":"Sarah is participating in a robot programming competition. She needs to instruct her robot to move in a 2D grid. The robot starts at position (0,0) and follows a sequence of commands. The commands available are: - \'U\' (move up) - \'D\' (move down) - \'L\' (move left) - \'R\' (move right) The robot will execute a series of commands, and you need to find the final position of the robot after executing all the given commands. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, which is a string of commands consisting of the characters \'U\', \'D\', \'L\', \'R\'. ------ Output Format ------ For each test case, output in a single line the final position of the robot as \\"X Y\\", where X is the final x-coordinate and Y is the final y-coordinate of the robot. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ text{length of the command string} ≤ 10^4 ------ Sample Input 1 ------ 3 UUDDLRLR UUUUDDDD LRLRLRLR ------ Sample Output 1 ------ 0 0 0 0 0 0 ----- Explanation 1 ------ Test case 1: The robot moves up 2 times (U), down 2 times (D), left 1 time (L), right 1 time (R), left 1 time (L), and right 1 time (R). Therefore, the final position is (0,0). Test case 2: The robot moves up 4 times (U) and down 4 times (D). Therefore, the robot returns to the starting position (0,0). Test case 3: The robot moves left 1 time (L), right 1 time (R), left 1 time (L), right 1 time (R), left 1 time (L), and right 1 time (R). Therefore, the final position is (0,0).","solution":"def final_robot_position(T, commands_list): results = [] for commands in commands_list: x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 results.append(f\\"{x} {y}\\") return results"},{"question":"You are given an integer n. Your task is to generate a string of length n where each character is randomly chosen from the set {a, b, c}. Additionally, the resulting string must not contain three consecutive identical characters. If it is impossible to generate such a string, return an empty string. Example 1: Input: 3 Output: \\"abc\\" Example 2: Input: 5 Output: \\"abcbc\\" Your Task: You don\'t need to input anything. Complete the function generateString() which takes an integer n as the input parameter and returns the generated string. Constraints: 1<= N <= 100","solution":"import random def generateString(n): Generates a string of length n with characters randomly chosen from {a, b, c} ensuring no three consecutive identical characters. if n <= 0: return \\"\\" result = [] while len(result) < n: if len(result) < 2: result.append(random.choice(\\"abc\\")) else: choices = \\"abc\\".replace(result[-1], \'\').replace(result[-2], \'\') result.append(random.choice(choices)) return \'\'.join(result)"},{"question":"Create a program that simulates a basic text editor with the following features: inserting characters, deleting characters, and printing the current state of the text. The program should support a single linked list structure to perform these operations. # Operations The text editor supports the following operations: - `insert x`: Insert the character `x` at the position right after the cursor. If the cursor is at the end of the text, insert `x` at the end. - `delete`: Delete the character right after the cursor position. If the cursor is at the end, this operation does nothing. - `moveLeft`: Move the cursor one position to the left. If the cursor is at the start, this operation does nothing. - `moveRight`: Move the cursor one position to the right. If the cursor is at the end, this operation does nothing. - `print`: Print the current state of the text from start to end. # Input Format The input consists of multiple operations given line by line. Each operation is represented by a string as described above. The sequence of operations ends with the word `END`. # Output Format Each `print` operation should output the current state of the text on a new line. If the text is empty, output an empty string. # Constraints - The number of operations will not exceed 1000. - Each character inserted is an alphanumeric character (i.e., a-z, A-Z, 0-9). - The text can be considered to initially contain no characters and the cursor is at the start. # Example Input ``` insert a insert b insert c moveLeft delete print insert d print END ``` Output ``` ab abd ``` This example shows how the operations modify the text step-by-step with the cursor position influenced by the `moveLeft` and `insert` commands. The `print` command outputs the current state of the content as specified.","solution":"class Node: def __init__(self, char=None): self.char = char self.next = None self.prev = None class TextEditor: def __init__(self): self.head = Node() # Dummy node at the start self.cursor = self.head # Cursor starts at the dummy node def insert(self, x): new_node = Node(x) next_node = self.cursor.next new_node.prev = self.cursor new_node.next = next_node self.cursor.next = new_node if next_node: next_node.prev = new_node self.cursor = new_node def delete(self): next_node = self.cursor.next if next_node: self.cursor.next = next_node.next if next_node.next: next_node.next.prev = self.cursor next_node.prev = None next_node.next = None def moveLeft(self): if self.cursor != self.head: self.cursor = self.cursor.prev def moveRight(self): if self.cursor.next: self.cursor = self.cursor.next def getText(self): result = [] node = self.head.next while node: result.append(node.char) node = node.next return \'\'.join(result) def simulate_text_editor(operations): editor = TextEditor() results = [] for operation in operations: if operation == \\"END\\": break elif operation.startswith(\\"insert\\"): _, char = operation.split() editor.insert(char) elif operation == \\"delete\\": editor.delete() elif operation == \\"moveLeft\\": editor.moveLeft() elif operation == \\"moveRight\\": editor.moveRight() elif operation == \\"print\\": results.append(editor.getText()) return results"},{"question":"Alex is an avid puzzle lover. One day, he decided to create a unique puzzle using a grid of numbers. He ensures that each cell in the grid contains a positive integer, and he wants to find the longest path in this grid where each integer in the path must be strictly greater than the previous one. The path can only move in four possible directions (left, right, up, and down). Your task is to help Alex by writing a program to determine the length of the longest path. Each cell\'s value must be strictly greater than the value of the cell that it came from. You do not need to return the path, only the length of the longest increasing path. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 500), which represent the number of rows and columns of the grid, respectively. The next m lines contain n integers each representing the grid. Each integer in the grid is between 1 and 1000. Output Print a single integer — the length of the longest increasing path in the grid. Examples Input 3 3 9 9 4 6 6 8 2 1 1 Output 4 Input 4 4 7 8 9 4 6 5 4 3 7 2 1 6 8 7 6 5 Output 7 Note In the first example, the longest increasing path is either 1 → 2 → 6 → 9 or 1 → 4 → 8 → 9. In the second example, the longest increasing path is 3 → 4 → 5 → 6 → 7 → 8 → 9.","solution":"def longest_increasing_path(matrix): Given a matrix, finds the longest increasing path in the matrix. Each step in the path must be strictly greater than the previous one. The path can only move left, right, up, and down. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[-1] * n for _ in range(m)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] > matrix[x][y]: max_length = max(max_length, 1 + dfs(nx, ny)) dp[x][y] = max_length return dp[x][y] longest_path = 0 for i in range(m): for j in range(n): longest_path = max(longest_path, dfs(i, j)) return longest_path if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() m, n = map(int, data[:2]) matrix = [] index = 2 for i in range(m): matrix.append(list(map(int, data[index:index + n]))) index += n print(longest_increasing_path(matrix))"},{"question":"Write a function that calculates the product of all prime numbers less than a given number \\"N\\". If there are no prime numbers less than \\"N\\", return 1. -----Input----- Input will start with an integer T, the count of test cases. Each case will have an integer N. -----Output----- Output each value, on a newline. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 100000 -----Example----- Input: 2 10 5 Output: 210 6 -----Explanation----- Example case 1. Prime numbers less than 10 are 2, 3, 5, and 7. Their product is 2 * 3 * 5 * 7 = 210. Example case 2. Prime numbers less than 5 are 2 and 3. Their product is 2 * 3 = 6.","solution":"def product_of_primes(n): Returns the product of all prime numbers less than n. if n <= 2: return 1 primes = [] is_prime = [True] * n for p in range(2, n): if is_prime[p]: primes.append(p) for multiple in range(p*2, n, p): is_prime[multiple] = False product = 1 for prime in primes: product *= prime return product def handle_test_cases(test_cases): results = [] for n in test_cases: results.append(product_of_primes(n)) return results"},{"question":"You are given an integer array `nums` of length `n`, and another integer `k`. Your task is to perform a sequence of operations on the array. In each operation, you must choose any subarray of `nums` and increase each element of that subarray by 1. You need to find the minimum number of operations needed such that the maximum value of the array is at least `k` greater than the original maximum value. Input - The first line of the input contains two integers `n` and `k` (1 ≤ n, k ≤ 200000) — the length of the array and the value to be added to the maximum value of the array. - The second line contains `n` integers `nums[i]` (1 ≤ nums[i] ≤ 100000) — the initial values of the array. Output - Output a single integer — the minimum number of operations needed. Examples Input 5 3 1 2 3 4 5 Output 3 Input 4 10 100 200 300 400 Output 10 Note In the first example, we need the maximum value 5 to become at least 8. We can perform three operations on the subarray [1, 5] increasing each element in this subarray by 1 in each operation: [1 2 3 4 5] -> [2 3 4 5 6] -> [3 4 5 6 7] -> [4 5 6 7 8]. In the second example, we need the maximum value 400 to become at least 410, so we need to perform exactly 10 operations regardless of the subarray we choose in each operation.","solution":"def min_operations_to_increase_max(nums, n, k): Returns the minimum number of operations needed such that the maximum value of the array is at least `k` greater than the original maximum value max_value = max(nums) target_value = max_value + k return target_value - max_value"},{"question":"Peter is a data scientist tasked with analyzing large datasets. He is currently working on a project that requires him to identify clusters of related values in an array. Specifically, his goal is to find the largest contiguous subarray where all elements have the same value. Given an array of integers, your task is to determine the length of the longest contiguous subarray where all elements are the same. -----Input----- The first line contains a single integer n (1 leq n leq 10^6) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. -----Output----- Print a single integer — the length of the longest contiguous subarray where all elements are the same. -----Examples----- Input 8 1 1 2 2 2 3 3 4 Output 3 Input 5 7 7 7 7 7 Output 5 Input 6 1 2 2 3 3 3 Output 3 -----Note----- In the first example, the longest contiguous subarray with the same elements is 2, 2, 2, which has a length of 3. In the second example, the entire array has the same value (7), so the longest contiguous subarray is the entire array with a length of 5. In the third example, the longest contiguous subarray with the same elements is 3, 3, 3, which has a length of 3.","solution":"def longest_contiguous_subarray(arr): Returns the length of the longest contiguous subarray where all elements are the same. if not arr: return 0 max_len, current_len = 1, 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 return max(max_len, current_len)"},{"question":"LCD City Corporation has installed n surveillance cameras at different locations to ensure security in the city. Each camera has a fixed position and a field of view represented as a rectangle with its top-left and bottom-right corners given. Your task is to find out if a specific point in the city is covered by at least one surveillance camera. Constraints * 1 ≤ n ≤ 1000 * 0 ≤ x, y ≤ 10^6 (coordinates for the query point) * 0 ≤ xi1, yi1, xi2, yi2 ≤ 10^6 (camera field of view corners) * xi1 <= xi2 and yi1 <= yi2 (top-left corner is always less than or equal to the bottom-right corner) Input n x1_1 y1_1 x2_1 y2_1 ... x1_n y1_n x2_n y2_n x y Output Output \\"Covered\\" if the point (x, y) is within the field of view of at least one camera, and \\"Uncovered\\" otherwise. Examples Input 3 1 3 5 5 2 4 6 7 0 0 3 2 4 4 Output Covered Input 2 10 10 20 20 30 30 40 40 25 25 Output Uncovered","solution":"def is_point_covered(n, camera_views, x, y): Checks if the given point (x, y) is covered by at least one camera. Parameters: n (int): The number of cameras. camera_views (list of tuples): A list of tuples where each tuple contains the top-left and bottom-right corners of the camera view. x (int): The x-coordinate of the point. y (int): The y-coordinate of the point. Returns: str: \\"Covered\\" if the point is covered by at least one camera, else \\"Uncovered\\". for (x1, y1, x2, y2) in camera_views: if x1 <= x <= x2 and y1 <= y <= y2: return \\"Covered\\" return \\"Uncovered\\""},{"question":"Emma loves playing with blocks that have different colors. She has N blocks, each with a unique color. She wants to arrange these blocks in a sequence but with one condition: no two blocks of the same color should be adjacent to each other. Given an integer N representing the total number of blocks, your task is to find the total number of ways to arrange these N blocks such that no two adjacent blocks have the same color. Since this number can be very large, return the answer modulo (10^9 + 7). Input Format: T, the number of test cases. Following T lines contain N, the number of blocks. Output Format: T lines indicating the number of valid arrangements. Print the answer modulo (10^9 + 7). Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 SAMPLE INPUT 2 6 3 SAMPLE OUTPUT 720 6","solution":"MOD = 10**9 + 7 def factorial(n): Returns the factorial of n % MOD. result = 1 for i in range(2, n + 1): result = (result * i) % MOD return result def number_of_ways(T, cases): Returns the number of valid arrangements for each case in cases. The answer for each case is the factorial of the number of blocks. Args: T (int): Number of test cases. cases (list): List of integers representing the number of blocks in each test case. Returns: list: List of integers representing number of ways for each test case. result = [] for N in cases: result.append(factorial(N)) return result"},{"question":"Given a positive integer n, you need to find a string of length n such that every substring of length k (1 le k le n) is unique. A substring is a contiguous sequence of characters within a string. For example, \\"abc\\" has the substrings \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Your task is to construct such a string. The string you create should consist only of lowercase English letters (from \'a\' to \'z\'). If there are multiple valid strings, you may print any of them. -----Input----- The first line of the input contains a single integer n (1 le n le 26): the length of the string to be generated. -----Output----- Output a single line containing a string of length n such that every substring of length k (1 le k le n) is unique. -----Examples----- **Input** 1 **Output** a **Input** 3 **Output** abc **Input** 5 **Output** abcde **Explanation** For the first example, the only option for n=1 is to output any single character such as \\"a\\". For the second example, when n=3, one possible output is \\"abc\\". This choice ensures all substrings of lengths 1, 2, and 3 are unique: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". For the third example, when n=5, one feasible output is \\"abcde\\", guaranteeing all substrings of lengths 1, 2, 3, 4, and 5 are unique: \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"de\\", \\"abc\\", \\"bcd\\", \\"cde\\", \\"abcd\\", \\"bcde\\", \\"abcde\\".","solution":"def generate_unique_substrings(n): Generate a string of length n such that every substring of length k (1 <= k <= n) is unique. The string will consist of the first n lowercase English letters. import string return string.ascii_lowercase[:n]"},{"question":"Given an integer array `nums` of length N, an integer P, and an integer Q, re-arrange the elements of `nums` in such a way that the sum of the absolute differences between every adjacent pair of elements is minimized, while ensuring that `P` becomes the first element and `Q` becomes the last element in the re-arranged array. Example 1: Input: nums = [10, 1, 8, 12, 7], P = 8, Q = 10 Output: [8, 7, 10, 1, 12] Explanation: The sequence [8, 7, 10, 1, 12] minimizes the sum of absolute differences, and starts with 8 and ends with 10. Example 2: Input: nums = [4, 2, 5, 9, 3], P = 9, Q = 2 Output: [9, 3, 4, 5, 2] Explanation: The sequence [9, 3, 4, 5, 2] minimizes the sum of absolute differences, and starts with 9 and ends with 2. Your Task: You do not need to read input or print anything. Your task is to complete the function `rearrangeArray` which takes the list of integers `nums`, and the integers `P` and `Q` as input and returns the re-arranged list. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 1000 1 <= nums[i] <= 10000 nums contains unique elements.","solution":"def rearrangeArray(nums, P, Q): Rearranges the elements of nums such that the sum of absolute differences between every adjacent pair of elements is minimized, with P as the first element and Q as the last element. :param nums: List of integers :param P: Integer that must be the first element of the rearranged list :param Q: Integer that must be the last element of the rearranged list :return: Rearranged list of integers # Removing P and Q from the list `nums` to rearrange the remaining elements nums.remove(P) nums.remove(Q) # Sorting the elements to minimize the absolute differences nums.sort() # Preparing the result with P at the start and Q at the end result = [P] + nums + [Q] # Return the rearranged list return result"},{"question":"Nimish has a robot placed in a 2D grid of size N x M. Initially, the robot is positioned at the top-left cell (1, 1) and needs to reach the bottom-right cell (N, M). However, some cells in the grid are blocked and the robot cannot move through them. The robot can only move right or down at any step. Determine the number of unique paths the robot can take to reach the destination. Since the number of ways can be large, return the result modulo 10^9 + 7. ------ Input Format ------ - The first line contains T, the number of test cases. - The first line of each test case contains two integers N and M, representing the dimensions of the grid. - The next N lines each contain M integers, where a 0 indicates an open cell, and a 1 indicates a blocked cell. ------ Output Format ------ For each test case, output a single line with the number of unique paths from the top-left to the bottom-right, modulo 10^9 + 7. ------ Constraints ------ - 1 ≤ T ≤ 1000 - 1 ≤ N, M ≤ 1000 - The sum of N * M across all test cases does not exceed 10^6 ------ Sample Input 1 ------ 3 3 3 0 0 0 0 1 0 0 0 0 3 3 0 0 0 1 1 0 0 0 0 3 3 0 0 0 1 1 1 0 0 0 ------ Sample Output 1 ------ 2 1 0 ------ Explanation 1 ------ Test case 1: The robot can take two paths: right->right->down->down or down->down->right->right. Test case 2: The only valid path is right->right->down->down->down->right. Test case 3: The robot cannot reach the destination due to the blocked cells. So, the answer is 0.","solution":"MOD = 10**9 + 7 def unique_paths(grid): Function to calculate the number of unique paths in a grid where some cells may be blocked. The function returns the result modulo 10^9 + 7. N = len(grid) M = len(grid[0]) if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[-1][-1] def process_test_cases(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] grid = test_cases[i][1] results.append(unique_paths(grid)) return results"},{"question":"String Compression # Problem You are given a string `s` consisting of lowercase English letters. Your task is to compress the string using the following method: for a group of consecutive repeating characters, replace the group with the character followed by the number of repetitions. If a character does not repeat, it should remain as it is. # Input Format - A single line containing the string `s` of length `n`. # Constraints * 1 leq n leq 10^5 * `s` consists of lowercase English letters only. # Output Format - Print the compressed version of the string in one line. Ensure that there is no extra space or newline at the end. # Input Example 1 aaabbccddd # Output Example 1 a3b2c2d3 # Input Example 2 abcdef # Output Example 2 abcdef # Input Example 3 aabbcc # Output Example 3 a2b2c2 # Explanation In the first example, the string `aaabbccddd` is compressed as follows: - \'a\' appears 3 times consecutively, resulting in `a3` - \'b\' appears 2 times consecutively, resulting in `b2` - \'c\' appears 2 times consecutively, resulting in `c2` - \'d\' appears 3 times consecutively, resulting in `d3` Thus, the compressed string is `a3b2c2d3`. In the second example, there are no consecutive repeating characters, so the string remains `abcdef`. In the third example, each character repeats exactly twice, so the compressed string is `a2b2c2`.","solution":"def compress_string(s): Compress the string by replacing groups of consecutive repeating characters with the character followed by the number of repetitions. If a character does not repeat, it remains as it is. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: The compressed version of the input string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 # Add the last group compressed.append(s[-1]) if count > 1: compressed.append(str(count)) return \'\'.join(compressed)"},{"question":"Given an array of integers, your task is to determine the maximum length of a contiguous subarray with an equal number of 0s and 1s. Example 1: ``` Input: [0, 1] Output: 2 Explanation: [0, 1] contains an equal number of 0s and 1s and its length is 2. ``` Example 2: ``` Input: [0, 1, 0] Output: 2 Explanation: [0, 1] (or [1, 0]) is the longest contiguous subarray with equal number of 0s and 1s. ``` Example 3: ``` Input: [1, 1, 1, 0, 0] Output: 4 Explanation: [1, 1, 0, 0] is the longest contiguous subarray with equal number of 0s and 1s. ``` Example 4: ``` Input: [1, 1, 1, 1] Output: 0 Explanation: There is no such subarray. ``` Function Signature: ```python def find_max_length(nums: List[int]) -> int: ```","solution":"from typing import List def find_max_length(nums: List[int]) -> int: Returns the maximum length of a contiguous subarray with an equal number of 0s and 1s in the given list. # Transform the list: Replace 0 by -1 and keep 1 as it is transformed = [-1 if num == 0 else 1 for num in nums] # Dictionary to store the first occurrence of each prefix sum prefix_sum_indices = {0: -1} max_length = 0 current_sum = 0 for i in range(len(transformed)): current_sum += transformed[i] if current_sum in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[current_sum]) else: prefix_sum_indices[current_sum] = i return max_length"},{"question":"Determine if a String is a Palindrome. Constraints * The string will only contain alphanumeric characters and can be of any length up to 1000 characters. * Ignore case and non-alphanumeric characters while checking for palindromes. Input The input will include multiple lines, each containing a single string. The input will be terminated by EOF. Output For each input string, if it is a palindrome, print \\"YES\\"; otherwise, print \\"NO\\". Example Input A man, a plan, a canal: Panama race a car No lemon, no melon Output YES NO YES","solution":"def is_palindrome(s): Determines if the given string s is a palindrome. Ignores non-alphanumeric characters and is case insensitive. # Filter out unwanted characters and make the string lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1] def process_input(input_lines): Processes multiple lines of input strings, determines if each is a palindrome, and prints YES or NO. for line in input_lines: if is_palindrome(line): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"A group of scientists is working on developing vaccine distribution plans for an upcoming flu season. They have a list of cities, connected with bidirectional roads, where vaccines can be distributed from certain distribution centers. You are given a graph with `N` cities and `M` roads. Each city is numbered from 1 to N. A vaccine distribution center can be set up in any one of the cities. For each city, the cost to set up a distribution center and the cost to distribute vaccines to adjacent cities through roads is provided. Given the following: - A list of cities and their corresponding setup costs. - A list of roads and the costs to distribute vaccines through them. Your task is to determine the minimum cost to ensure every city gets a vaccine, either by setting up a distribution center in the city or receiving it through a road connected to a city with a distribution center. -----Input:----- - First line has two integers N and M, which represent the number of cities and the number of roads, respectively. - Second line contains N integers, where the i^{th} integer represents the setup cost for the i^{th} city. - Next M lines each contain three integers u, v, and w, where u and v are cities connected by a road with a distribution cost w. -----Output:----- - Print a single integer, the minimum cost to ensure every city gets a vaccine. -----Constraints:----- - 1 leq N leq 10^4 - 0 leq M leq 10^5 - 1 leq setup_cost_i leq 10^6 - 1 leq u, v leq N - 1 leq w leq 10^6 - It\'s guaranteed that every city is reachable from at least one other city. -----Sample input:------ 5 6 3 2 5 7 1 1 2 1 1 3 4 2 3 2 2 4 8 3 5 3 4 5 2 -----Sample output:----- 8 -----Explanation:----- To minimize the distribution cost: - Set up a distribution center in city 2 with cost 2. - Distribute vaccines from city 2 to city 1 with cost 1. - Distribute vaccines from city 2 to city 3 with cost 2. - Set up a distribution center in city 5 with cost 1. - Distribute vaccines from city 5 to city 4 with cost 2. - Therefore, the total minimum cost is 2 (setup cost in city 2) + 1 (road cost to city 1) + 2 (road cost to city 3) + 1 (setup cost in city 5) + 2 (road cost to city 4) = 8.","solution":"import heapq def min_vaccine_distribution_cost(N, M, setup_costs, roads): # Create adjacency list for the graph with road costs graph = [[] for _ in range(N+1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Prim\'s algorithm using a Min-Heap to find Minimum Spanning Tree min_heap = [] visited = [False] * (N+1) # Start from a dummy node which connects to all nodes with their setup cost for i in range(1, N+1): heapq.heappush(min_heap, (setup_costs[i-1], i)) result = 0 count = 0 while min_heap and count < N: cost, city = heapq.heappop(min_heap) if not visited[city]: visited[city] = True result += cost count += 1 for neighbor, road_cost in graph[city]: if not visited[neighbor]: heapq.heappush(min_heap, (road_cost, neighbor)) return result"},{"question":"You have been provided with a string `s` that consists of lowercase alphabetic characters \'a\' to \'z\'. You need to process the given string by replacing each vowel (\'a\', \'e\', \'i\', \'o\', \'u\') with the next vowel in the sequence, where the sequence is cyclic. That means, \'a\' should be replaced by \'e\', \'e\' by \'i\', \'i\' by \'o\', \'o\' by \'u\', and \'u\' by \'a\'. All consonants in the string should remain unchanged. Your task is to print the processed result of the string after replacing the vowels as described. -----Constraints----- - 1 <= |s| <= 100 - s consists of only lowercase alphabetic characters. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print the resulting string after each vowel has been replaced by the next vowel in the cyclic sequence. -----Sample Input----- hello -----Sample Output----- hillu Replace the vowel \'e\' with \'i\' and the vowel \'o\' with \'u\'. The answer is \\"hillu\\".","solution":"def replace_vowels(s): Replaces each vowel in the string `s` with the next vowel in the cyclic sequence. Args: s (str): The input string consisting of lowercase alphabetic characters. Returns: str: The processed string with the vowels replaced. vowel_map = {\'a\': \'e\', \'e\': \'i\', \'i\': \'o\', \'o\': \'u\', \'u\': \'a\'} result = [] for char in s: if char in vowel_map: result.append(vowel_map[char]) else: result.append(char) return \'\'.join(result)"},{"question":"A librarian is organizing a shelf of books. Each book has a different width, and the shelf can only be organized by swapping two books that are next to each other. Given a list of book widths, determine the minimum number of adjacent swaps required to arrange the books in ascending order of their widths. Write a function `minSwaps` that takes a list of integers representing the widths of the books and returns the minimum number of swaps needed to sort the list. Example 1: Input: widths = [4, 3, 1, 2] Output: 5 Explanation: Swap 1: [4, 1, 3, 2] Swap 2: [4, 1, 2, 3] Swap 3: [4, 1, 2, 3] Swap 4: [1, 4, 2, 3] Swap 5: [1, 2, 3, 4] Example 2: Input: widths = [2, 4, 3, 1] Output: 4 Explanation: Swap 1: [2, 3, 4, 1] Swap 2: [2, 3, 1, 4] Swap 3: [2, 1, 3, 4] Swap 4: [1, 2, 3, 4] Your task: You do not need to read input or print anything. Complete the function `minSwaps` which takes a list of integers `widths` as input and returns an integer representing the minimum number of swaps required to sort the list in ascending order. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= widths.length <= 100 1 <= widths[i] <= 1000","solution":"def minSwaps(widths): Returns the minimum number of adjacent swaps needed to sort the list `widths` in ascending order. :param widths: List[int] :return: int # Initialize swap count swaps = 0 n = len(widths) # Bubble sort algorithm to count swaps for i in range(n): for j in range(n - 1): if widths[j] > widths[j + 1]: # Swap adjacent elements widths[j], widths[j + 1] = widths[j + 1], widths[j] swaps += 1 return swaps"},{"question":"A common type of data validation involves checking that a provided input adheres to a specified format. In this task, you are required to validate a sequence of strings to ensure they match a given format representing an IPv4 address. IPv4 addresses are written in the format `d.d.d.d`, where `d` represents a decimal number between 0 and 255 (inclusive). Write a program that takes an integer `n` followed by `n` strings. Each string needs to be checked whether it is a valid IPv4 address or not. If a string is a valid IPv4 address, print `VALID`, otherwise print `INVALID`. Input Format The first line of the input contains an integer `n`, the number of strings to validate. The next `n` lines each contain a string representing an IP address. Constraints 1 ≤ n ≤ 100 Each string is guaranteed to be non-empty and contain only printable ASCII characters. Output Format Print `VALID` or `INVALID` for each of the `n` strings, in the order they are provided. Sample Input 3 192.168.0.1 256.100.50.0 123.045.067.089 Sample Output VALID INVALID INVALID Explanation In the input example: 1. `192.168.0.1` is a valid IPv4 address. 2. `256.100.50.0` is invalid because 256 is outside the range 0-255. 3. `123.045.067.089` is invalid because the numbers should not contain leading zeros.","solution":"def is_valid_ipv4_address(ip): Validates if the given IP address string is a valid IPv4 address. parts = ip.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False if len(part) != len(str(num)): # This checks for leading zeroes return False return True def validate_ipv4_addresses(n, ip_addresses): Validates a list of IP addresses and prints \'VALID\' or \'INVALID\' for each. results = [] for ip in ip_addresses: if is_valid_ipv4_address(ip): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"You are given an nxn grid where every cell contains a distinct integer from 1 to n^2. A path through the grid is defined as starting at any cell and moving to any adjacent cell (up, down, left, right) without revisiting any cell. The weight of a path is the sum of all integers in the cells forming the path. Write a function that finds the maximum weight path that can be created from any starting point in the grid. Constraints: * 1 leq n leq 5 Input: The input is given in the following format: - The first line contains an integer `n` (the size of the grid). - The next n lines contain n integers each, representing the grid. Output: Return the maximum weight of any path in the grid. Example: Input: 3 1 2 3 4 5 6 7 8 9 Output: 45 Explanation: One possible path with the maximum weight is 1 -> 2 -> 3 -> 6 -> 9 -> 8 -> 7 -> 4 -> 5. Its weight is 1+2+3+6+9+8+7+4+5=45.","solution":"def max_weight_path(grid): Returns the maximum weight path in the grid. n = len(grid) max_sum = 0 def dfs(x, y, visited, path_sum): nonlocal max_sum max_sum = max(max_sum, path_sum) for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: visited.add((nx, ny)) dfs(nx, ny, visited, path_sum + grid[nx][ny]) visited.remove((nx, ny)) for i in range(n): for j in range(n): dfs(i, j, {(i, j)}, grid[i][j]) return max_sum"},{"question":"You are given an array of integers representing the prices of a set of books in a store. Due to a special discount, if the total price of books a customer buys is a prime number, the customer gets a discount equivalent to the smallest price among the selected books (inclusive). Your task is to determine the maximum discount a customer can achieve. To clarify, you need to write a function that: 1. Takes the array of book prices. 2. Finds all possible subsets of books. 3. Checks if the total price of each subset is a prime number. 4. Calculates the discount for each valid subset. 5. Returns the maximum discount possible from these subsets. -----Input----- The first line contains an integer n (1 ≤ n ≤ 20) — the number of books in the store. The second line contains n integers p_1, ..., p_n (1 ≤ p_{i} ≤ 100), where p_{i} is the price of the ith book. -----Output----- Print an integer which is the maximum discount a customer can achieve. -----Examples----- Input 5 6 10 3 15 7 Output 7 Input 4 4 6 8 5 Output 5 Input 3 8 2 3 Output 3 -----Note----- In the first sample, the subset {10, 7} has a total price of 17, which is a prime number. The smallest price in this subset is 7, giving a discount of 7. Other valid subsets result in smaller discounts. In the second sample, the only subset where the total price is a prime number is {5} with a discount of 5. In the third sample, the subset {2, 3} has a total price of 5, which is a prime number. The smallest price in this subset is 2 but because there are no other valid subsets giving a higher discount, the maximum discount is from {3}.","solution":"from itertools import chain, combinations from sympy import isprime def calculate_discount(prices): Calculate the maximum discount based on the prime sum condition. def all_subsets(arr): Generate all non-empty subsets of a list. return chain(*map(lambda x: combinations(arr, x), range(1, len(arr) + 1))) def find_min_price_valid_subset(subset): Calculate the total price of the subset, check if prime, and return smallest price. total_price = sum(subset) if isprime(total_price): return min(subset) return 0 max_discount = 0 for subset in all_subsets(prices): max_discount = max(max_discount, find_min_price_valid_subset(subset)) return max_discount # Example usage: # prices = [6, 10, 3, 15, 7] # print(calculate_discount(prices)) # Output: 7"},{"question":"Scramble a given words list: Write a function that takes in a list of words and a string pattern. Shuffle the characters of each word such that after shuffling, no word contains any character in the same position as in the original word. If it is impossible to shuffle a word in such a way, leave the word unchanged. The relative order of words in the list should remain the same. # Input - A list of words `words` containing strings with lowercase letters (1 ≤ |words[i]| ≤ 100 for each word and 1 ≤ len(words) ≤ 1000). - A string `pattern` with lowercase letters that represents the required character distribution if possible. # Output - A list of transformed words that meet the shuffling criteria. # Example ```python def scramble_words(words, pattern): # Implementation here # Example Usage words = [\\"apple\\", \\"banana\\", \\"cherry\\"] pattern = \\"xyzzy\\" print(scramble_words(words, pattern)) # Output: [\'aaple\', \'banany\', \'chyerr\'] ``` Explanation: In the above example, the function scrambles the characters of each word in the list according to the pattern. The pattern helps define the new character positions but does not change the length or content character-wise of the original words. If for some word it’s impossible to shuffle as per the given constraints, that word remains unchanged.","solution":"import random def scramble_words(words, pattern): def shuffle_word(word): if len(set(word)) == 1: # If all characters are the same, shuffling is impossible return word shuffled_word = list(word) original_indices = list(range(len(word))) while True: random.shuffle(shuffled_word) if all(shuffled_word[i] != word[i] for i in range(len(word))): # Ensure no character is in the same position break return \'\'.join(shuffled_word) scrambled_words = [shuffle_word(word) for word in words] return scrambled_words"},{"question":"A company is planning a new project and needs to form a team. Each candidate for the team has a certain skill level represented by a positive integer. The project has a difficulty rating that also expressed as a positive integer. A candidate can only contribute to the project if their skill level is greater than or equal to the difficulty rating. Additionally, the overall contribution of the team is the sum of the skill levels of all its members who meet the criteria. Your task is to help the company maximize the overall contribution of the team given the candidates and the difficulty rating of the project. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and D, where N is the number of candidates and D is the difficulty rating of the project. The second line contains N space-separated integers representing the skill levels of the candidates. ------ Output ------ For each test case, print a single integer representing the maximum possible overall contribution of the team. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ D ≤ 1000 1 ≤ text{Skill level of each candidate} ≤ 1000 ------ Sample Input 1 ------ 2 4 5 6 7 3 8 3 10 15 20 5 ------ Sample Output 1 ------ 21 35","solution":"def max_contribution(test_cases): results = [] for case in test_cases: N, D, skills = case[\'N\'], case[\'D\'], case[\'skills\'] contribution = sum(skill for skill in skills if skill >= D) results.append(contribution) return results"},{"question":"A student is studying the string manipulation operations in their computer science class. They are particularly interested in finding the longest palindromic substring within a given string. Your task is to help the student by writing a program that receives a string as input and returns the longest palindromic substring in that string. A palindrome is a sequence of characters that reads the same backward as forward. # Input - A single string `s` of length `1 <= |s| <= 1000`. The string consists of only lowercase English letters. # Output - A single string which is the longest palindromic substring of the given string `s`. If there are multiple palindromic substrings of the same length, return the one that appears first in `s`. # Constraints - The length of the input string will be at most 1000. - Assume that the input string contains only lowercase English letters. # Example - Input: `babad` - Output: `bab` (Note: `aba` is also a valid answer but `bab` appears first) - Input: `cbbd` - Output: `bb` # Explanation In the first example, the input string `babad` has two palindromic substrings of length 3: `bab` and `aba`. `bab` appears first. In the second example, the input string `cbbd` contains a palindromic substring `bb` of length 2. There is no longer palindromic substring in the string.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. Args: s (str): The input string. Returns: str: The longest palindromic substring in s. if not s: return \\"\\" n = len(s) start = 0 max_length = 1 # Create a 2D list to store the palindrome information dp = [[False for _ in range(n)] for _ in range(n)] # Each character itself is a palindrome for i in range(n): dp[i][i] = True # Check for palindromes of length 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for palindromes of length greater than 2 for length in range(3, n+1): for i in range(n-length+1): j = i+length-1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True start = i max_length = length return s[start:start+max_length]"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has a weight associated with it. Your task is to find the Minimum Spanning Tree (MST) of the graph using Kruskal’s algorithm and return the total weight of the MST. If the graph is not connected, return -1. Constraints * 1 ≤ N ≤ 10^5 * 0 ≤ M ≤ 2*10^5 * 1 ≤ u_i, v_i ≤ N * 1 ≤ w_i ≤ 1000 Input The input is given from Standard Input in the following format: N M u_1 v_1 w_1 ... u_M v_M w_M Output Print the total weight of the MST if the graph is connected. Otherwise, print -1. Examples Input 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 Output 6 Input 4 2 1 2 3 3 4 4 Output -1","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): return -1 u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def find_mst_weight(n, m, graph_data): edges = [tuple(map(int, edge.split())) for edge in graph_data] result = kruskal_mst(n, edges) return result"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to write a program that finds and prints all the distinct permutations of the given string in lexicographical order. Input: A string `s` (1 ≤ |s| ≤ 9) consisting of lowercase English letters. Output: Each line should contain one distinct permutation of the string in lexicographical order. Example: Input: abc Output: abc acb bac bca cab cba","solution":"from itertools import permutations def lexicographical_permutations(s): Returns all distinct permutations of the given string in lexicographical order. perm_set = set(permutations(s)) sorted_permutations = sorted([\'\'.join(p) for p in perm_set]) return sorted_permutations # Example usage: # s = \\"abc\\" # result = lexicographical_permutations(s) # for perm in result: # print(perm)"},{"question":"You are given a list of integers. You can perform the following operation as many times as you want: choose any two integers from the list, say a and b (where a ≠ b), and replace both of them with |a-b| (the absolute difference of a and b). Your task is to determine the number of distinct integers that can exist in the list after performing any number of such operations. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of integers in the list. The next line contains n space-separated integers ai (1 ≤ ai ≤ 1000) which are the elements of the list. Output Output a single integer — the number of distinct integers that can be obtained in the list after performing any number of the described operations. Examples Input 4 1 5 3 9 Output 3 Input 5 2 4 6 8 10 Output 1 Input 3 7 7 7 Output 1 Note In the first sample, all possible distinct integers are 0, 1, and 2. In the second sample, since all the integers are even, the absolute difference operation will always result in an even number, so the list will eventually contain only one distinct number, 0. In the third sample, since all integers are the same, no operation can be performed, and the list contains one distinct integer, 7.","solution":"def distinct_integers_after_operations(n, array): Returns the number of distinct integers that can exist in the list after performing the specified operations any number of times. if n == 1: return 1 # Check if all elements are the same if len(set(array)) == 1: return 1 # If there are any odd numbers in the array, we will be able to get 1 as a distinct integer # We will also be able to get 0 (if we subtract equal numbers) if any(x % 2 != 0 for x in array): return 2 if 0 in array else 3 else: return 1"},{"question":"Given a list of integers and a target integer, determine if there exists a contiguous subarray whose sum equals the target integer. If such a subarray exists, return the starting and ending indices of the subarray. If there are multiple subarrays that meet the condition, return the indices of any one of them. If no such subarray exists, return `None`. For example, given the list `[1, 2, 3, 7, 5]` and target `12`, the function should return `(1, 3)` because the subarray `[2, 3, 7]` sums to `12`. For the list `[1, 2, 3, 4, 5]` and target `9`, the function should return `(1, 3)` because the subarray `[2, 3, 4]` sums to `9`. For the list `[1, 2, 3, 4, 5]` and target `15`, the function should return `(0, 4)` as the entire list sums to `15`. If no subarray is found, return `None`. Write a function named `find_subarray_with_sum` that implements this problem. The function signature is: ```python def find_subarray_with_sum(arr: list[int], target: int) -> tuple[int, int]: # your code here ```","solution":"def find_subarray_with_sum(arr, target): Determine if there exists a contiguous subarray whose sum equals the target. Returns the starting and ending indices of the subarray if found, otherwise None. current_sum = 0 start_index = 0 sum_indices = {} for end_index, value in enumerate(arr): current_sum += value if current_sum == target: return (start_index, end_index) if current_sum - target in sum_indices: return (sum_indices[current_sum - target] + 1, end_index) sum_indices[current_sum] = end_index return None"},{"question":"Given an array of integers `arr` of length `n`, a sequence of non-negative integers `ops` is defined such that `ops[i]` (0 ≤ `i` < n) represents the number of operations applied to the element `arr[i]`. In each operation, you can increment the element by 1. After applying all the operations, the goal is to maximize the sum of elements of the array `arr` under the following constraint: - For each element `arr[i]`, set an upper bound `B[i]` such that `arr[i]` cannot exceed `B[i]` even after applying all the operations. Write a function `maximize_sum(n, arr, ops, B)` that takes the integer `n`, the integer array `arr`, the integer array `ops`, and the integer array `B`, and returns the maximum possible sum of the array after applying all operations. # Function Signature ```python def maximize_sum(n: int, arr: List[int], ops: List[int], B: List[int]) -> int: ``` # Input - `n` (1 ≤ `n` ≤ 10^5): an integer representing the length of the arrays. - `arr` (0 ≤ `arr[i]` ≤ 10^9): a list of integers representing the array elements. - `ops` (0 ≤ `ops[i]` ≤ 10^9): a list of integers representing the number of operations. - `B` (0 ≤ `B[i]` ≤ 10^9): a list of integers representing the upper bounds. # Output - Return an integer representing the maximum possible sum of the modified array after applying all operations. # Example Input ```plaintext 4 [1, 2, 3, 4] [3, 3, 3, 3] [7, 8, 6, 5] ``` Output ```plaintext 27 ``` # Explanation - For the given input, the resulting array after applying operations will be `[4, 5, 6, 5]`. - The maximum sum is 4 + 5 + 6 + 5 = 20.","solution":"def maximize_sum(n, arr, ops, B): Maximize the sum of the array after applying `ops` arrays while respecting the upper bounds `B`. Parameters: n (int): Length of the arrays. arr (List[int]): Array of integers to which operations will be applied. ops (List[int]): Number of operations that can be applied to each element of `arr`. B (List[int]): Upper bounds for each element of `arr`. Returns: int: The maximum possible sum of the array after applying all operations. total_sum = 0 for i in range(n): # The new value is the minimum between arr[i] + ops[i] and B[i] new_value = min(arr[i] + ops[i], B[i]) total_sum += new_value return total_sum"},{"question":"Anna recently joined a book club where the members are interested in knowing the total number of distinct books read by the members. During each meeting, Anna records the number of books read by each member. However, sometimes two or more members might read the same book. Anna wants to determine the minimum and the maximum number of distinct books read by the members. You need to help Anna by writing a program that given the number of books read by each member, calculates the minimum and maximum number of distinct books. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of the T test cases follows. Each test case consists of a line containing an integer N (the number of members) followed by N integers representing the number of books read by each member. -----Output----- For each test case, output a single line containing two space separated integers, the minimum and maximum number of distinct books read by the members. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ B_i ≤ 1000 -----Example----- Input: 2 3 2 3 5 4 1 1 1 1 Output: 5 10 1 1","solution":"def distinct_books(test_cases): Determines the minimum and maximum distinct books read by club members for each test case. :param test_cases: List of tuples/lists, each containing the number of members and their respective books read. :return: List of tuples, where each tuple contains the min and max number of distinct books for the corresponding test case. result = [] for case in test_cases: N, books = case[0], case[1:] min_distinct = len(set(books)) max_distinct = sum(books) result.append((min_distinct, max_distinct)) return result"},{"question":"In a busy zoo, the lion section has a unique feeding routine. There are n lions, each with its own cage arranged in a circle. Each lion gets fed in sequence from lion 1 to lion n and then back to lion 1, repeatedly. The sequence is maintained by a rotating handler who moves in a circular manner. The feeding begins with the handler at lion a. From there, the handler will move to the next lion in sequence after the current one has been fed, taking exactly one minute to move from one lion to the next and deliver the food. Upon hearing the handler\'s footsteps, the lion in the next cage eagerly starts counting down the seconds, expecting food delivery. The zookeeper wants to know the exact time (in minutes) when each lion will be fed for the first time, starting from lion a and continuing through the circle. Write a function that given the total number of lions n and the lion where the feeding begins a, returns an array where the value at the i-th position represents the time in minutes when the i-th lion will be fed for the first time. -----Input----- - The input consists of two integers n and a (2 leq n leq 100, 1 leq a leq n), where n is the total number of lions and a is the starting lion\'s cage number. -----Output----- - The output should be an array of n integers where the value at the i-th position represents the minutes taken to feed the i-th lion, with indexing starting from 1. -----Examples----- Input 6 2 Output [5, 0, 1, 2, 3, 4] Input 4 1 Output [0, 1, 2, 3] -----Explanation----- In the first example, with 6 lions and starting at lion 2, lion 2 will be fed at minute 0. Lion 3 will be fed at minute 1, and so forth up to lion 6 at minute 4. Lion 1 will be fed last at minute 5. In the second example, with 4 lions and starting at lion 1, lion 1 will be fed at minute 0, lion 2 at minute 1, and so on up to lion 4 at minute 3.","solution":"def feeding_times(n, a): Returns an array where the value at the i-th position represents the time in minutes when the i-th lion will be fed for the first time, starting from lion a and continuing through the circle. times = [0] * n for i in range(n): times[(a - 1 + i) % n] = i return times"},{"question":"Write a function that takes a list of strings and an integer n, and returns a list of strings that have at least n characters. # Example ```python filter_strings([\\"hello\\", \\"hi\\", \\"welcome\\"], 5) ==> [\\"hello\\", \\"welcome\\"] ```","solution":"def filter_strings(strings, n): Returns a list of strings that have at least n characters. Parameters: strings (list of str): A list of strings. n (int): The minimum number of characters. Returns: list of str: A list of strings with at least n characters. return [s for s in strings if len(s) >= n]"},{"question":"A company needs to form teams from a list of employees based on their skill levels. Each team should have exactly two employees whose combined skill level is at least a given threshold K. Your task is to count the maximum number of such teams you can form from the list of employees\' skill levels. Given an integer array `skills[]`, where each element represents the skill level of an employee, and an integer `K` representing the threshold skill level. You are required to implement the function `maxTeams(skills, K)` to find out the maximum number of teams that can be formed. Example 1: Input: skills = [1, 3, 5, 2, 4] K = 5 Output: 2 Explanation: You can form the following teams: - Employee with skill 1 and employee with skill 5 (1 + 5 >= 5) - Employee with skill 3 and employee with skill 2 (3 + 2 >= 5) Example 2: Input: skills = [1, 2, 2, 4] K = 5 Output: 1 Explanation: You can form the following team: - Employee with skill 1 and employee with skill 4 (1 + 4 >= 5) The other combinations do not meet the requirement. Your task: You don\'t need to read input or print anything. Write a function `maxTeams(skills, K)` that takes the array `skills` and the integer `K` as parameters and returns the maximum number of valid teams that can be formed. Expected Time Complexity: O(N log N) due to sorting. Expected Auxiliary Space: O(1) (excluding the input array). Constraints: 1 ≤ skills.length ≤ 10^5","solution":"def maxTeams(skills, K): # Sort the skills in ascending order skills.sort() # Initialize two pointers: one at the start and one at the end of the skills list left, right = 0, len(skills) - 1 teams = 0 # Loop until the pointers meet while left < right: # If the sum of skills at the two pointers is at least K, form a team if skills[left] + skills[right] >= K: teams += 1 left += 1 right -= 1 else: # If the sum is less than K, move the left pointer to try with the next higher skill level left += 1 return teams"},{"question":"------ Input ------ Given a list of M integers and a number N, your task is to find the Nth smallest unique number in the list and return its index. Note that the index is based on the 0th index of the original list. If the Nth smallest unique number does not exist, return -1. ------ Input ------ The numbers M and N are given in the first line of input. Then M integers follow in the second line which represents the list of integers. ------ Output ------ Output the index of the Nth smallest unique number if it exists, otherwise, return -1. ------ Constraints ------ 1 ≤ M ≤ 10^5 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 ------ Sample Input 1 ------ 7 3 4 5 1 2 2 1 3 ------ Sample Output 1 ------ 6 ------ Sample Input 2 ------ 5 2 1 1 1 1 1 ------ Sample Output 2 ------ -1","solution":"def find_nth_smallest_unique_index(M, N, lst): Returns the index of the Nth smallest unique number in the list. If the Nth smallest unique number does not exist, return -1. :param M: Integer, size of the list :param N: Integer, the desired nth smallest unique number :param lst: List of integers :return: Index of the Nth smallest unique number or -1 if it doesn\'t exist if M < N: return -1 unique_elements = list(set(lst)) unique_elements.sort() if len(unique_elements) < N: return -1 nth_smallest_unique = unique_elements[N-1] return lst.index(nth_smallest_unique)"},{"question":"You are given an integer `n` and an `n x n` matrix consisting of only the values 0 and 1. Your task is to determine if all the 1s in the matrix form exactly one connected component. Two cells containing 1 are considered connected if they are adjacent horizontally or vertically. Input Input starts with an integer `n` (2 ≤ n ≤ 1000). Followed by `n` lines, each containing `n` characters (\'0\' or \'1\') separated with space. Output Output \\"YES\\" if all the 1s form exactly one connected component. Otherwise, output \\"NO\\". Constraints 2 ≤ n ≤ 1000 SAMPLE INPUT 4 1 0 0 1 1 1 0 1 0 1 1 0 0 0 0 0 SAMPLE OUTPUT NO","solution":"def is_connected_component(n, matrix): # Directions for moving up, right, down, and left directions = [(-1, 0), (0, 1), (1, 0), (0, -1)] # Helper function for Depth First Search def dfs(i, j): stack = [(i, j)] while stack: ci, cj = stack.pop() for di, dj in directions: ni, nj = ci + di, cj + dj if 0 <= ni < n and 0 <= nj < n and matrix[ni][nj] == 1: matrix[ni][nj] = -1 # Mark as visited stack.append((ni, nj)) first_found = False for i in range(n): for j in range(n): if matrix[i][j] == 1: if not first_found: dfs(i, j) first_found = True else: return \\"NO\\" return \\"YES\\" # Function to parse input and provide it to the main function def check_connected_component(n, matrix_input): matrix = [[int(x) for x in row.split()] for row in matrix_input] return is_connected_component(n, matrix)"},{"question":"You have been provided with two strings representing binary numbers. Your task is to calculate the result of their binary addition and print the output as a binary string. -----Constraints----- - The length of each binary number is between 1 and 100. - Each string only contains the characters \'0\' and \'1\'. -----Input----- Input is given from Standard Input in the following format: binary1 binary2 -----Output----- Print the result of the binary addition of the two input binary strings. -----Sample Input----- 1101 1011 -----Sample Output----- 11000 Explanation: The binary addition of 1101 (13 in decimal) and 1011 (11 in decimal) results in 11000 (24 in decimal). Thus, we print 11000.","solution":"def binary_addition(binary1, binary2): Returns the result of the binary addition of the two input binary strings. # Convert binary strings to integers num1 = int(binary1, 2) num2 = int(binary2, 2) # Perform addition result = num1 + num2 # Convert the result back to a binary string return bin(result)[2:]"},{"question":"You are given a sequence of integers. Your task is to determine the smallest possible \\"beauty\\" of any contiguous subarray of the given sequence. The beauty of a subarray is defined as the absolute difference between the maximum and minimum values in that subarray. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case starts with an integer n (1 le n le 2 cdot 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^9), representing the sequence. It is guaranteed that the total sum of n over all the test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print one integer — the smallest possible \\"beauty\\" of any contiguous subarray of the given sequence. -----Example----- Input 2 5 3 1 4 1 5 4 1 3 2 4 Output 0 1 -----Note----- In the first test case, the subarray [1, 1] has a beauty of 0, which is the smallest possible for any subarray. In the second test case, the subarray [3, 2] has a beauty of 1, which is the smallest possible for any subarray.","solution":"def smallest_beauty(t, test_cases): results = [] for case in test_cases: n, a = case min_beauty = float(\'inf\') for i in range(n - 1): for j in range(i + 1, n): beauty = abs(a[j] - a[i]) if beauty < min_beauty: min_beauty = beauty results.append(min_beauty) return results"},{"question":"Snuke loves playing with strings. You are given a string `S` of length `N` consisting of lowercase English letters. Snuke will create a new string `T` which is a subsequence of `S` by performing the following operations: - Select any character from `S` and append it to the end of `T`. - Remove the selected character from `S`. Snuke wants the lexicographically smallest subsequence `T` such that it contains all distinct characters that appear in `S`. ---Constraints--- - 1 ≤ N ≤ 10^5 - `S` consists of lowercase English letters ---Input--- The input is given from Standard Input in the following format: ``` N S ``` ---Output--- Print the lexicographically smallest subsequence `T` created from `S` containing all distinct characters from `S`. ---Sample Input--- ``` 7 bcabcac ``` ---Sample Output--- ``` abc ``` ---Explanation--- The input string `bcabcac` has distinct characters `a`, `b`, and `c`. The smallest lexicographical sequence containing all these characters that can be formed is `abc`.","solution":"def lexicographically_smallest_subsequence(N, S): Returns the lexicographically smallest subsequence of S containing all distinct characters in S. # Counter to keep track of the characters from collections import Counter count = Counter(S) visited = set() stack = [] for char in S: count[char] -= 1 if char in visited: continue while stack and char < stack[-1] and count[stack[-1]] > 0: visited.remove(stack.pop()) stack.append(char) visited.add(char) return \'\'.join(stack)"},{"question":"A zoo has n cages, each containing a different type of animal. The cages are arranged in a linear sequence and are numbered from 1 to n. Each cage has a certain number of occupants, which can be positive or zero. A zookeeper needs to perform q operations to either count the total number of occupants between any two cages (inclusive) or move all occupants from one cage to another. Each operation is of one of the following two types: * \\"count l r\\": This operation counts the total number of occupants between cages l and r, inclusive. * \\"move u v\\": This operation moves all the occupants from cage u to cage v. After moving, cage u will have zero occupants and the number of occupants in cage v will increase by the number of occupants that were originally in cage u. Initially, you are given an array a of size n, where a[i] represents the number of occupants in the i-th cage. Write a program to perform the series of q operations and output the results of all \\"count\\" operations. Input The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the number of cages. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 1000000) — the initial number of occupants in each cage. The third line contains an integer q (1 ≤ q ≤ 100000) — the number of operations. The next q lines each describe an operation in the format described above. Each operation is guaranteed to be valid (i.e., 1 ≤ l ≤ r ≤ n for \\"count\\" and 1 ≤ u, v ≤ n, u ≠ v for \\"move\\"). Output For each \\"count\\" operation, print a single line containing the total number of occupants between cages l and r, inclusive. Examples Input 5 3 2 5 7 9 4 count 1 3 move 2 4 count 1 3 count 3 5 Output 10 8 16 Note In the first example, the initial number of occupants in each cage is [3, 2, 5, 7, 9]. * After the first \\"count 1 3\\" operation, the total number of occupants between cages 1 and 3 is 3 + 2 + 5 = 10. * After the \\"move 2 4\\" operation, the number of occupants in cage 2 is moved to cage 4. So, the new number of occupants is [3, 0, 5, 9, 9]. * After the second \\"count 1 3\\" operation, the total number of occupants between cages 1 and 3 is 3 + 0 + 5 = 8. * After the third \\"count 3 5\\" operation, the total number of occupants between cages 3 and 5 is 5 + 9 + 9 = 23.","solution":"def zoo_operations(n, a, q, operations): results = [] for operation in operations: if operation[0] == \'count\': l, r = int(operation[1]), int(operation[2]) total_count = sum(a[l-1:r]) results.append(total_count) elif operation[0] == \'move\': u, v = int(operation[1]), int(operation[2]) a[v-1] += a[u-1] a[u-1] = 0 return results # Example usage n = 5 a = [3, 2, 5, 7, 9] q = 4 operations = [ [\'count\', \'1\', \'3\'], [\'move\', \'2\', \'4\'], [\'count\', \'1\', \'3\'], [\'count\', \'3\', \'5\'] ] print(zoo_operations(n, a, q, operations)) # Output: [10, 8, 23]"},{"question":"You are given an array of integers representing the height of the buildings in a city, arranged from left to right. A sequence of buildings forms a skyline. You are tasked with determining the maximum rectangle that can be formed with the buildings\' heights as the rectangle\'s heights. Each building has a width of 1. The contiguous subarray within an array (containing at least one number) which forms this rectangle is known as the largest rectangle in histogram problem. Input The input consists of a single test case in the following format: N h_1 ; h_2 ; h_3 ; ... ; h_N The first line contains a single integer N (1 leq N leq 10^5) – the number of buildings. The second line contains N integers h_1, h_2, ..., h_N (1 leq h_i leq 10^6) – the heights of the buildings. Output Print a single integer – the area of the largest rectangle that can be formed in the skyline made by the buildings. Examples Input 6 2 1 5 6 2 3 Output 10 Input 5 2 4 2 1 10 Output 10 Input 7 6 2 5 4 5 1 6 Output 12","solution":"def largest_rectangle_area(heights): Function to calculate the largest rectangle area in a histogram given by `heights`. Parameters: heights (List[int]): a list of building heights. Returns: int: the area of the largest rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def intput_to_list(input_text): lines = input_text.strip().split(\'n\') heights = list(map(int, lines[1].split())) return heights"},{"question":"A company wants to analyze the behavior of their clients based on their visit patterns. They have a log of client visits to various departments over a month. Each client visit is recorded with the client ID, the department ID, and the timestamp of the visit. The company wants to determine which department has the highest total number of unique clients visiting on a given day. Implement a program that reads a series of visit logs and processes multiple datasets, each representing a single day\'s logs, to find out the department with the most unique visitors on that day. Input Each dataset is given in the following format: ``` d n client_id1, department_id1, timestamp1 client_id2, department_id2, timestamp2 : client_idn, department_idn, timestampn ``` The first line gives the day d (a non-negative integer). The second line gives the number of logs for that day n (0 ≤ n ≤ 10,000). The following n lines give the details of each visit, including the client ID (integer), the department ID (integer), and the timestamp (in the format \\"yyyy-mm-dd hh:mm:ss\\"). When d is 0, it indicates the end of the input. The number of datasets does not exceed 50. Output For each dataset, output the department ID (integer) that had the highest number of unique clients visiting. If there is a tie, output the department with the smaller numerical ID. Example Input ``` 1 6 101, 1, 2023-03-25 10:15:23 102, 1, 2023-03-25 11:20:45 101, 2, 2023-03-25 10:30:00 103, 1, 2023-03-25 12:00:00 104, 2, 2023-03-25 12:30:00 105, 2, 2023-03-25 13:00:00 0 ``` Output ``` 1 ```","solution":"def find_department_with_most_unique_visitors(logs): from collections import defaultdict # Dictionary to store number of unique clients per department departments = defaultdict(set) for log in logs: client_id, department_id, timestamp = log.split(\',\') client_id = int(client_id.strip()) department_id = int(department_id.strip()) departments[department_id].add(client_id) # Find the department with the maximum unique clients max_unique_clients = 0 department_with_max_unique_clients = float(\'inf\') for department_id, clients in departments.items(): unique_clients = len(clients) if unique_clients > max_unique_clients: max_unique_clients = unique_clients department_with_max_unique_clients = department_id elif unique_clients == max_unique_clients: department_with_max_unique_clients = min(department_with_max_unique_clients, department_id) return department_with_max_unique_clients def process_input(input_data): lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(lines): day = int(lines[index]) if day == 0: break n = int(lines[index + 1]) logs = lines[index + 2: index + 2 + n] if logs: result = find_department_with_most_unique_visitors(logs) results.append(result) index += 2 + n return results"},{"question":"A gardener wants to experiment with planting flowers in his garden following a specific pattern. He plans to plant flowers in a grid of size `n x n`, starting from the top-left corner and spiraling inwards clockwise until he reaches the center. The gardener has a set of different types of flowers, represented by integers starting from 1. He has exactly `n^2` flowers, each of a distinct type. His task is to fill the grid following the spiral pattern. Write a function to generate the grid of size `n x n` filled with the flower types in the required spiral order. ------Input------ An integer `n` (1 ≤ `n` ≤ 10), the size of the grid. ------Output------ An `n x n` matrix (2D list) representing the grid filled with the flower types spiraling inward clockwise. ------Examples------ Input 3 Output [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] Input 4 Output [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] Input 2 Output [ [1, 2], [4, 3] ]","solution":"def generate_spiral_matrix(n): Generate a n x n matrix filled with integers from 1 to n^2 in a spiral order. matrix = [[0]*n for _ in range(n)] # Define the boundaries left, right = 0, n-1 top, bottom = 0, n-1 current_number = 1 while left <= right and top <= bottom: # Fill top row from left to right for j in range(left, right+1): matrix[top][j] = current_number current_number += 1 top += 1 # Fill right column from top to bottom for i in range(top, bottom+1): matrix[i][right] = current_number current_number += 1 right -= 1 if top <= bottom: # Fill bottom row from right to left for j in range(right, left-1, -1): matrix[bottom][j] = current_number current_number += 1 bottom -= 1 if left <= right: # Fill left column from bottom to top for i in range(bottom, top-1, -1): matrix[i][left] = current_number current_number += 1 left += 1 return matrix"},{"question":"You are working on a new project that requires the validation of email addresses based on specific rules. An email address is composed of two parts: local-part and domain-part, separated by an \'@\' character. To ensure the input email addresses are valid and secure, you must follow these rules: 1. The local-part contains only lowercase letters (a-z), digits (0-9), and special characters \'.\', \'_\', and \'-\'. It cannot start or end with a dot (\'.\') or contain two consecutive dots. 2. The domain-part contains only lowercase letters (a-z), digits (0-9), and hyphens (\'-\'). It must have at least one dot separating the main domain and the top-level domain (for example, \'example.com\'), but it cannot start or end with a hyphen (\'-\') or dot (\'.\'). The top-level domain must consist only of letters and be at least two characters in length. Write a function `is_valid_email(email)` that takes a single string argument and returns a boolean value (True or False) indicating whether the email address is valid according to the rules above. Input A single string `email` representing the email address to be validated. The length of the email string will be between 3 and 320 characters inclusive. Output A boolean value (True or False) indicating whether the email address is valid. Examples Input \\"john.doe@example.com\\" Output True Input \\"john..doe@example.com\\" Output False Input \\"john.doe@e-xample.com\\" Output True Input \\"john.doe@example\\" Output False","solution":"import re def is_valid_email(email): Checks the validity of an email address based on given rules. Parameters: email (str): The email address to be validated. Returns: bool: True if the email is valid, False otherwise. # Regex to match the local part local_regex = r\\"^[a-z0-9]+[a-z0-9._-]*[a-z0-9]+\\" # Regex to match the domain part domain_regex = r\\"^[a-z0-9]+([a-z0-9-]*[a-z0-9]+)?(.[a-z]{2,})+\\" try: local_part, domain_part = email.split(\'@\') except ValueError: # If there is not exactly one \'@\' character return False # Check if the local part matches the local_regex if not re.match(local_regex, local_part): return False # Check if the domain part matches the domain_regex if not re.match(domain_regex, domain_part): return False # Check if there are consecutive dots in local-part if \'..\' in local_part: return False return True"},{"question":"Sam wants to climb a staircase with N steps. He can either take 1 step, 2 steps, or 3 steps at a time. You need to determine the number of distinct ways to reach the top of the staircase. ------ Input ------ The first line of input contains a single integer T, the number of test cases. The description of T test cases follows. Each test case contains a single integer N, which denotes the number of steps in the staircase. ------ Output ------ For each test case, print a single integer which is the number of distinct ways to reach the top modulo 1000000007. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 ----- Sample Input ------ 3 3 4 7 ----- Sample Output ------ 4 7 44 ------ Explanation ------ In the first case, when N = 3, the distinct ways to reach the top are: 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step 4. 3 steps In the second case, when N = 4, the distinct ways to reach the top are: 1. 1 step + 1 step + 1 step + 1 step 2. 1 step + 1 step + 2 steps 3. 1 step + 2 steps + 1 step 4. 2 steps + 1 step + 1 step 5. 2 steps + 2 steps 6. 1 step + 3 steps 7. 3 steps + 1 step In the third case, when N = 7, the distinct ways to reach the top are 44.","solution":"def count_ways(T, cases): MOD = 1000000007 # Find the maximum N given in cases to limit the precomputed range max_n = max(cases) # Initialize the dp array where dp[i] will be the number of ways to reach i steps dp = [0] * (max_n + 1) # Base cases dp[0] = 1 # There\'s one way to stay at the ground (do nothing) if max_n >= 1: dp[1] = 1 # One way to reach the first step if max_n >= 2: dp[2] = 2 # Two ways to reach the second step: (1+1, 2) if max_n >= 3: dp[3] = 4 # Four ways to reach the third step: (1+1+1, 1+2, 2+1, 3) # Fill the dp array for all steps up to max_n for i in range(4, max_n + 1): dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % MOD # Generate results for each case results = [dp[n] for n in cases] return results"},{"question":"Given an integer array \'arr\' and a target sum \'target\', find the number of unique pairs of elements (a, b) in the array such that their sum is equal to the target. The same element cannot be used in multiple pairs but the array can contain duplicates. ``` Example: countPairs([1, 3, 2, 2, 3, 4], 5) should return 2, because: - Pair (1, 4) makes 5 - Pair (3, 2) makes 5 (only count once even if 2 and 3 are repeated) So finally result equals 2. ``` Note: - The function should handle arrays with up to 10^5 elements. - Ensure optimal time complexity.","solution":"def countPairs(arr, target): seen = {} pairs = set() count = 0 for num in arr: complement = target - num if complement in seen and seen[complement] > 0: pairs.add((min(num, complement), max(num, complement))) seen[complement] -= 1 else: if num in seen: seen[num] += 1 else: seen[num] = 1 return len(pairs)"},{"question":"You are given a string s consisting of lowercase English letters. A substring of s is considered special if it contains each of its characters exactly once. Your task is to find the length of the longest special substring. -----Input----- The first line contains the string s (1 le |s| le 1000). -----Output----- Output the length of the longest special substring. -----Examples----- Sample Input 1: abcabcbb Sample Output 1: 3 Sample Input 2: bbbbb Sample Output 2: 1 Sample Input 3: pwwkew Sample Output 3: 3 Sample Input 4: abcdedcba Sample Output 4: 5","solution":"def length_of_longest_special_substring(s): Returns the length of the longest substring of `s` that contains each of its characters exactly once. n = len(s) max_length = 0 start = 0 seen = {} for end in range(n): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"In an ancient library, there is a collection of rare books arranged in a single line on a shelf. Each book has a unique integer identifier, and the books are ordered in ascending order by their identifiers. Some scholars have been studying these books for centuries and have developed a particular interest in certain books due to their content. Let’s define a \\"segment\\" as a contiguous subarray of the array of book identifiers. Each scholar has a segment of interest, which they study by looking at the sum of the identifiers in that segment. They want to find the maximum sum of identifiers they can achieve by considering different segments. Given an array of book identifiers, your task is to determine the maximum segment sum. -----Constraints----- - 1 ≤ N ≤ 10^5 (number of books) - -10^9 ≤ book identifier values ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N b_1 b_2 ... b_N -----Output----- Print an integer representing the maximum sum of a segment within the list of book identifiers. -----Sample Input----- 5 -2 1 -3 4 -1 2 1 -5 4 -----Sample Output----- 6 The contiguous subarray [4,-1,2,1] has the largest sum = 6.","solution":"def max_segment_sum(identifiers): Finds the maximum sum of all possible \\"segments\\" (subarrays) in the list of book identifiers. Uses Kadane\'s Algorithm for efficient calculation. :param identifiers: List of integers representing book identifiers. :return: Integer maximum segment sum. max_sum = float(\'-inf\') current_sum = 0 for identifier in identifiers: current_sum = max(identifier, current_sum + identifier) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Task You are given an array of integers. You can perform an operation where you pick any two adjacent elements of the array and merge them into a single element by replacing them with their sum. Your task is to find the minimum possible value of the final element after repeatedly performing this operation until only one element remains in the array. # Example For `arr = [4, 2, 3, 7]`, the output should be `16`. It\'s possible to achieve the result in three operations: 1. Merge 4 and 2 to get [6, 3, 7] 2. Merge 6 and 3 to get [9, 7] 3. Merge 9 and 7 to get [16] # Input/Output - `[input]` array `arr` An array of integers. - `[output]` an integer The minimum possible value of the final element after repeatedly performing the operation until only one element remains in the array.","solution":"def min_final_element(arr): Function to compute the minimum possible value of the final element after repeatedly merging two adjacent elements. while len(arr) > 1: arr[0] = arr[0] + arr[1] arr.pop(1) return arr[0]"},{"question":"You are given an undirected graph with n vertices and m edges. You need to find the number of connected components in the graph. A connected component is a maximal set of vertices such that there is a path between any two vertices in the set. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100 000): the number of vertices and the number of edges. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n): representing an edge between vertices u and v. Output Print one integer: the number of connected components in the graph. Example Input 5 3 1 2 2 3 4 5 Output 2 Note In the example, there are 5 vertices and 3 edges. The edges connect vertices 1-2 and 2-3 forming one connected component. Vertices 4 and 5 are connected forming another connected component. Therefore, there are two connected components in total.","solution":"def find_connected_components(n, edges): Find the number of connected components in an undirected graph. :param n: number of vertices :param edges: list of edges (tuples of connected vertices) :return: number of connected components def dfs(node, visited, adj_list): stack = [node] while stack: current = stack.pop() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) # Initialize adjacency list adj_list = [[] for _ in range(n + 1)] # Build the adjacency list for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) num_components = 0 # DFS to count components for i in range(1, n + 1): if not visited[i]: visited[i] = True num_components += 1 dfs(i, visited, adj_list) return num_components"},{"question":"You are given the task of simulating the movements of a robot in a 2D grid. The robot starts at the top-left corner of the grid (0,0) and can move either right or down. The goal is to find the number of distinct paths the robot can take to reach the bottom-right corner of the grid (n-1, m-1). Additionally, some cells in the grid may be blocked, and the robot cannot move through those cells. The grid is represented using a list of lists, where a value of 1 indicates a blocked cell, and a value of 0 indicates a free cell. Input: - The first line contains two integers n and m (2 ≤ n, m ≤ 100), the number of rows and columns in the grid. - The next n lines contain m integers each (0 or 1), which represent the cells of the grid. Output: - Print the number of distinct paths the robot can take from (0,0) to (n-1,m-1). If there is no such path, print 0. Examples: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Input: 3 3 0 1 0 0 1 0 0 0 0 Output: 1 Input: 2 2 0 1 1 0 Output: 0 Explanation: In the first example, there are two distinct paths: right -> right -> down -> down and right -> down -> down -> right. In the second example, there is only one path: right -> down -> right -> down. In the third example, the robot cannot reach the bottom-right corner due to blocked cells, so the output is 0.","solution":"def count_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def num_paths(n, m, grid): return count_paths(grid)"},{"question":"Roll Dice You are part of a special research team given the responsibility to count all possible outcomes of rolling a standard six-sided dice `N` times. For each possible outcome, the sum of the values on the dice should be exactly `S`. Your task is to compute the number of distinct sequences of dice rolls that add up to `S`. For example, consider rolling the dice `N = 2` times to obtain the sum `S = 7`. The possible outcomes would be: - (1, 6) - (2, 5) - (3, 4) - (4, 3) - (5, 2) - (6, 1) Thus, there are 6 possible sequences. Input The first line of the input provides the T number of test cases. The following T lines each contain two integers N and S. - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 30 - N ≤ S ≤ 6 * N Output For each test case, print the number of possible sequences of dice rolls that result in the sum `S`. Example Input: ``` 3 1 3 2 7 2 5 ``` Output: ``` 1 6 4 ``` # Explanation - For the first example, `1 3`, there\'s only one way to roll a 3 with a single dice: `3`. - For the second example, `2 7`, there are six combinations of two dice rolls that sum up to 7. - For the third example, `2 5`, the sequences (1, 4), (2, 3), (3, 2), and (4, 1) sum up to 5.","solution":"def dice_rolls(N, S): Returns the number of possible sequences of N dice rolls that sum up to S. # dp table to store the number of ways to get sum s with n dice dp = [[0] * (S + 1) for _ in range(N + 1)] # base case: there\'s one way to get sum 0 with 0 dice dp[0][0] = 1 for n in range(1, N + 1): for s in range(1, S + 1): for die in range(1, 7): if s - die >= 0: dp[n][s] += dp[n - 1][s - die] return dp[N][S] def solve(test_cases): Solves the problem for a list of test cases. results = [] for N, S in test_cases: results.append(dice_rolls(N, S)) return results"},{"question":"A company wants to host its servers in multiple locations to ensure reliability and minimize latency. Each server can handle a limited number of user connections. To avoid overloading and to ensure fair distribution of user connections among servers, the company needs your help to design an efficient load distribution strategy. The capacity of each server and the number of user connections expected at each location are represented by arrays. You need to determine if it is possible to distribute the user connections among the servers such that no server exceeds its capacity. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (1 le n le 100) — the number of servers. The second line of each test case contains n integers c_i (1 le c_i le 10^6) — the capacity of each server. The third line of each test case contains n integers u_i (0 le u_i le 10^6) — the number of user connections at each location. -----Output----- For each test case, print \\"YES\\" if it is possible to distribute the user connections among the servers without exceeding their capacities. Otherwise, print \\"NO\\". -----Example----- Input 2 3 10 20 30 10 20 30 3 10 15 20 5 15 25 Output YES NO -----Note----- In the first test case, each server can exactly handle the user connections at its corresponding location, so the output is \\"YES\\". In the second test case, the third server cannot handle 25 user connections as its capacity is only 20, so the output is \\"NO\\".","solution":"def can_distribute_load(t, test_cases): results = [] for i in range(t): n = test_cases[i][\'n\'] capacities = test_cases[i][\'capacities\'] users = test_cases[i][\'users\'] possible = all(users[j] <= capacities[j] for j in range(n)) results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"Problem: The Archaeological Excavation team has discovered an ancient pyramid hidden deep in the dense Amazon forest. The pyramid is made up of several layers of stones, with each layer potentially having a unique pattern of symbols carved on them. Each layer is a square grid, and every grid cell contains a symbol. The key to unlocking the secrets of the pyramid lies in decoding the symbols on these layers. To decode the symbols, you need to count the frequency of each distinct symbol in every layer from the topmost to the bottom layer. Given the 3D representation of the pyramid as a stack of 2D layers, you need to output the frequency of each symbol for each layer. The layers are numbered from top to bottom starting from 0. Input: - The first line contains an integer ( t ) representing the number of test cases. - Each test case begins with an integer ( N ) representing the side length of each layer (all layers are ( N times N )). - This is followed by ( N^3 ) characters, representing the symbols on the pyramid. Each character is a symbol in the range [a-z]. Output: For each test case, output the frequency of each symbol for each layer. Each layer\'s result should start with a line indicating the layer number, followed by the frequencies of each symbol on a new line in the format \\"symbol:frequency\\". The symbol frequencies should be printed in lexicographical order of the symbols. Constraints: - ( 1 leq t leq 10 ) - ( 1 leq N leq 20 ) Example: Input: ``` 1 2 aabb cccc dddd eeee ``` Output: ``` Layer 0: a: 2 b: 2 Layer 1: c: 4 Layer 2: d: 4 Layer 3: e: 4 ``` Explanation: In the example provided: - The pyramid consists of 4 layers (each of size (2 times 2)). - The first layer has symbols \'a\' and \'b\' with respective frequencies of 2 each. - The second layer has symbol \'c\' with a frequency of 4. - The third layer has symbol \'d\' with a frequency of 4. - The fourth layer has symbol \'e\' with a frequency of 4.","solution":"def decode_pyramid(t, test_cases): results = [] for case in test_cases: N, symbols = case pyramid = [symbols[i:i + N * N] for i in range(0, len(symbols), N * N)] for layer_index, layer in enumerate(pyramid): layer_count = dict() for symbol in layer: layer_count[symbol] = layer_count.get(symbol, 0) + 1 results.append(f\\"Layer {layer_index}:\\") for symbol in sorted(layer_count.keys()): results.append(f\\"{symbol}:{layer_count[symbol]}\\") return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): N = int(lines[index]) symbols = \'\'.join(lines[index + 1: index + 1 + N * N]) test_cases.append((N, symbols)) index += 1 + N * N return t, test_cases"},{"question":"You have been hired as a software developer at a company that loves trivia games. One of the games they are working on involves computing the scores of multiple players and determining the winner. Each player has a unique identifier and earns points in multiple rounds. The player with the highest total score at the end of the game is declared the winner. However, if two or more players have the same highest total score, the game is a draw and there is no winner. Your task is to write a program that will determine the winner, or if the game is a draw. -----Input----- The input starts with a single integer 1 le P le 100 representing the number of players. This is followed by P lines, each containing a unique identifier (a string of 1 to 20 characters) followed by a sequence of integers representing the points earned by that player in each round. The number of rounds 1 le R le 100 will be the same for each player. The integers are separated by spaces and have values 0 le points le 100. ----Output---- The output should be a single line. If there is a clear winner, output \\"Winner: \\" followed by the unique identifier of the winning player. If the game is a draw, output \\"Draw\\". -----Examples----- Sample Input 1: 2 Alice 10 20 30 Bob 20 30 10 Sample Output 1: Draw Sample Input 2: 3 Eve 50 60 70 Charlie 60 70 80 David 80 60 40 Sample Output 2: Winner: Charlie","solution":"def find_winner(players_scores): # Calculate the total scores for each player total_scores = {} for line in players_scores: data = line.split() identifier = data[0] scores = list(map(int, data[1:])) total_scores[identifier] = sum(scores) # Find the maximum score max_score = max(total_scores.values()) # Identify how many players have the maximum score winner_candidates = [player for player, score in total_scores.items() if score == max_score] # Determine the result if len(winner_candidates) > 1: return \\"Draw\\" else: return f\\"Winner: {winner_candidates[0]}\\" # Example usage: # players_scores = [ # \\"Alice 10 20 30\\", # \\"Bob 20 30 10\\" # ] # print(find_winner(players_scores))"},{"question":"Lisa is organizing a charity bake sale. She can bake one type of pastry per day and each pastry has a specific price. She wants to bake for N days and each day she can choose to bake a different type of pastry. Lisa needs to raise P dollars in total from the bake sale. Given the type and price of the pastry she bakes each day, determine whether Lisa can meet or exceed her target of P dollars. If she can, print \\"ACHIEVED\\", else print \\"NOT ACHIEVED\\". -----Constraints----- - 1 <= N <= 31 - 1 <= P <= 1000 - 1 <= price of each pastry <= 100 -----Input----- - The first line has two integers N and P i.e. number of days and target amount. - The second line contains N integers indicating the prices of the pastries baked each day. -----Output----- - Print \\"ACHIEVED\\" if Lisa has raised at least P dollars, otherwise print \\"NOT ACHIEVED\\". -----Sample Input----- 5 50 10 20 15 5 10 -----Sample Output----- ACHIEVED -----Explanation----- Lisa bakes for 5 days, and the prices of the pastries are 10, 20, 15, 5, and 10 dollars respectively. The total amount raised is 60 dollars, which meets the target of 50 dollars. Hence, the output is \\"ACHIEVED\\".","solution":"def can_meet_target(n, p, prices): Determines if the total money raised from baking can meet or exceed the target P dollars. Parameters: n (int): Number of days. p (int): Target amount in dollars. prices (list of int): List of prices of pastries baked each day. Returns: str: \'ACHIEVED\' if the total raised is at least P dollars, otherwise \'NOT ACHIEVED\'. total_amount = sum(prices) if total_amount >= p: return \\"ACHIEVED\\" else: return \\"NOT ACHIEVED\\""},{"question":"Sara is working on designing a new computer network for her company. The network consists of multiple routers, and each router can directly connect to several other routers. However, due to some budget constraints, each router can only handle connections with a certain amount of bandwidth. Sara needs to ensure that there is a route from the main server to all other routers such that the total bandwidth of the used connections is minimized. Given a list of possible connections between the routers and their respective bandwidths, help Sara determine the minimum total bandwidth required to connect all routers. Each router is represented as an integer from 1 to n, where n is the total number of routers. The main server is always represented by router 1. Each connection between two routers is given in the form of a tuple (u, v, w), where u and v are the routers being connected and w is the bandwidth of that connection. -----Input----- The first line of input contains two integers n and m (2 leq n leq 1000, 1 leq m leq 10000) — the number of routers and the number of possible connections, respectively. The following m lines contain three integers u, v, w (1 leq u, v leq n, 1 leq w leq 10^9) — the endpoints of each connection and its corresponding bandwidth. -----Output----- Output a single integer, the minimum total bandwidth required to connect all routers such that there is a route from the main server (router 1) to any other router. If it is impossible to connect all routers, print -1. -----Example----- Input 5 7 1 2 10 1 3 20 2 3 30 2 4 25 3 5 15 4 5 40 3 4 35 Output 70 -----Note----- In the example, one possible way to connect all routers is as follows: - Use connection 1-2 with bandwidth 10 - Use connection 1-3 with bandwidth 20 - Use connection 3-5 with bandwidth 15 - Use connection 2-4 with bandwidth 25 The total bandwidth required is 10 + 20 + 15 + 25 = 70.","solution":"def find_min_bandwidth(n, m, connections): Given a number of routers (n) and possible connections with their bandwidths (connections), find the minimum bandwidth required to connect all routers to the main server (router 1). import heapq # Create an adjacency list to represent the graph adj = {i: [] for i in range(1, n + 1)} for u, v, w in connections: adj[u].append((w, v)) adj[v].append((w, u)) # Prim\'s algorithm to find the Minimum Spanning Tree (MST) min_heap = [(0, 1)] # (cost, start_node) total_bandwidth = 0 used = set() while min_heap: cost, node = heapq.heappop(min_heap) if node in used: continue total_bandwidth += cost used.add(node) for next_cost, neighbor in adj[node]: if neighbor not in used: heapq.heappush(min_heap, (next_cost, neighbor)) return total_bandwidth if len(used) == n else -1 # If all routers are connected # Example usage print(find_min_bandwidth(5, 7, [(1, 2, 10), (1, 3, 20), (2, 3, 30), (2, 4, 25), (3, 5, 15), (4, 5, 40), (3, 4, 35)]))"},{"question":"Create a function that takes a string representing a mathematical expression using the characters `0-9`, `+`, `-`, `*`, `/`, and parentheses `()`, and returns the computed result as an integer. The input string will always be a valid expression and the resulting number will fit within the bounds of a standard 32-bit signed integer. Your implementation must follow the standard order of operations (PEMDAS/BODMAS rules). Division should be treated as integer division, which truncates towards zero. # Function Signature ```python def evaluate_expression(expression: str) -> int: ``` # Constraints 1. The input string `expression` will be of length between `1` and `100` (inclusive). 2. The input string will only contain the characters `0-9`, `+`, `-`, `*`, `/`, and parentheses `()`. # Examples ```python evaluate_expression(\\"3+5*2\\") # Output: 13 evaluate_expression(\\"10+(2*3)\\") # Output: 16 evaluate_expression(\\"100/10-7*(8-6)\\") # Output: -4 evaluate_expression(\\"1+(4-2)*(6/3)\\") # Output: 5 ```","solution":"def evaluate_expression(expression: str) -> int: def helper(tokens): num_stack = [] op_stack = [] def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operator(op_stack, num_stack): right = num_stack.pop() left = num_stack.pop() op = op_stack.pop() if op == \'+\': num_stack.append(left + right) elif op == \'-\': num_stack.append(left - right) elif op == \'*\': num_stack.append(left * right) elif op == \'/\': num_stack.append(int(left / right)) # Ensure integer division i = 0 while i < len(tokens): if tokens[i].isdigit(): num = 0 while i < len(tokens) and tokens[i].isdigit(): num = num * 10 + int(tokens[i]) i += 1 num_stack.append(num) i -= 1 elif tokens[i] == \'(\': op_stack.append(tokens[i]) elif tokens[i] == \')\': while op_stack and op_stack[-1] != \'(\': apply_operator(op_stack, num_stack) op_stack.pop() # Pop the opening \'(\' elif tokens[i] in \\"+-*/\\": while (op_stack and precedence(op_stack[-1]) >= precedence(tokens[i])): apply_operator(op_stack, num_stack) op_stack.append(tokens[i]) i += 1 while op_stack: apply_operator(op_stack, num_stack) return num_stack[0] return helper(list(expression))"},{"question":"Given an integer N, find the smallest prime number P which is greater than N. Example 1: Input: N = 10 Output: 11 Explanation: 11 is the smallest prime number greater than 10. Example 2: Input: N = 29 Output: 31 Explanation: 31 is the smallest prime number greater than 29. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSmallestPrime() which takes an integer N as input parameter and returns the smallest prime number greater than N. Expected Time Complexity: O(sqrt(P) * log(N)) Expected Space Complexity: O(1) Constraints: 0 <= N <= 10^6","solution":"def findSmallestPrime(N): Returns the smallest prime number greater than N. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True possible_prime = N + 1 while not is_prime(possible_prime): possible_prime += 1 return possible_prime"},{"question":"Jane has an array of n integers. She wants to find the smallest missing positive integer greater than zero from this array. Input The first line contains a single integer n (1 ≤ n ≤ 100). The second line contains n integers separated by a space, representing the elements of the array. Each element of the array is between -10^3 and 10^3. Output Print the smallest positive integer that is missing from the array. Examples Input 5 3 4 -1 1 Output 2 Input 3 1 2 0 Output 3 Input 4 7 8 9 11 Output 1","solution":"def find_smallest_missing_positive_integer(n, arr): Finds the smallest missing positive integer greater than zero in the array. Args: n : int : number of elements in the array arr : list of int : array of integers Returns: int : the smallest missing positive integer greater than zero nums = set(arr) smallest_missing = 1 while smallest_missing in nums: smallest_missing += 1 return smallest_missing"},{"question":"Given a directed graph with `n` vertices and `m` edges, you are required to determine if it is possible to color the vertices using exactly two colors, red and blue, so that there are no two adjacent vertices (two vertices connected by a direct edge) with the same color. If such a coloring is possible, print \\"Yes\\", otherwise print \\"No\\". # Input The first line of input contains two integers `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of vertices and the number of edges respectively. The next `m` lines contain the edges. Each line contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) representing a directed edge from vertex `u` to vertex `v`. # Output Print \\"Yes\\" if it\'s possible to color the graph with two colors under the given condition, otherwise print \\"No\\". # Example Input 1: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output 1: ``` No ``` Input 2: ``` 5 4 1 2 1 3 3 4 3 5 ``` Output 2: ``` Yes ``` # Explanation For Input 1: It is impossible to color the vertices such that no two adjacent vertices have the same color, hence the output is \\"No\\". For Input 2: It is possible to color the vertices as follows: - Color vertex 1 with red - Color vertex 2 with blue - Color vertex 3 with blue - Color vertex 4 with red - Color vertex 5 with red Thus, every pair of adjacent vertices has different colors, so the answer is \\"Yes\\".","solution":"def is_bipartite(n, edges): from collections import deque # Construct adjacency list adj = {i: [] for i in range(1, n+1)} for u, v in edges: adj[u].append(v) adj[v].append(u) color = [-1] * (n+1) # -1 means uncolored for start in range(1, n+1): if color[start] == -1: # Not colored yet queue = deque([start]) color[start] = 0 # Start coloring with 0 i.e., red while queue: u = queue.popleft() for v in adj[u]: if color[v] == -1: # If the vertex is not colored color[v] = 1 - color[u] # Assign the opposite color queue.append(v) elif color[v] == color[u]: # If the adjacent vertex has the same color return \\"No\\" return \\"Yes\\" # Read input def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] for i in range(m): u = int(data[2 + 2*i]) v = int(data[3 + 2*i]) edges.append((u, v)) return n, edges if __name__ == \\"__main__\\": n, edges = process_input() result = is_bipartite(n, edges) print(result)"},{"question":"A sequence of integers is called k-periodic if it can be obtained by concatenating k copies of the same non-empty subsequence. For example, {1, 2, 1, 2} is 2-periodic as it can be obtained by concatenating two copies of {1, 2}, but {1, 2, 2, 1} is not any k-periodic as there\'s no subsequence that can be repeatedly concatenated to form the sequence. Given a sequence of integers, determine the value of k for which the sequence is k-periodic with the smallest possible k. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the length of the sequence. The second line contains n space-separated integers representing the sequence. -----Output----- Print a single integer k — the smallest k such that the sequence is k-periodic. -----Examples----- Input 4 1 2 1 2 Output 2 Input 6 1 2 3 1 2 3 Output 3 Input 5 1 2 3 4 5 Output 5 -----Note----- In the first test, the sequence {1, 2, 1, 2} is 2-periodic as it can be formed by concatenating two copies of {1, 2}. In the second test, the sequence {1, 2, 3, 1, 2, 3} is 3-periodic as it can be formed by concatenating two copies of {1, 2, 3}. In the third test, the sequence {1, 2, 3, 4, 5} is not periodic with any k smaller than the length of the sequence itself.","solution":"def smallest_k_periodic(sequence): Determines the smallest k for which the sequence is k-periodic. :param sequence: List[int] - the sequence to be checked. :return: int - the smallest k such that the sequence is k-periodic. n = len(sequence) for k in range(1, n + 1): if n % k == 0: period = sequence[:k] if period * (n // k) == sequence: return k return n"},{"question":"In a distant future, autonomous delivery drones are widely used to deliver packages across various cities. Each city can be represented as a grid, where each cell either contains a building or is empty. Buildings act as obstacles that drones cannot pass. Each drone can move in four directions: up, down, left, or right, but cannot move diagonally or fly over buildings. Your task is to determine the shortest path a drone can take to deliver a package from a starting point (sx, sy) to a destination point (dx, dy) on the grid, or determine if it is impossible to deliver the package due to the placement of buildings. -----Input----- The first line contains an integer t, the number of test cases. For each test case: 1. The first line contains two integers, n and m, representing the number of rows and columns in the city grid (1 <= n, m <= 1000). 2. The next n lines each contain m characters, being either \'.\' representing an empty cell or \'#\' representing a building. 3. The next line contains four integers, sx, sy, dx, dy, representing the starting and destination coordinates (0 <= sx, sy, dx, dy < n, m). -----Output----- For each test case output a single integer, representing the minimum number of moves required for the drone to reach the destination from the starting point. If it is impossible to reach the destination, output -1. -----Example----- Input: 2 5 5 ..... ..#.. ..#.. ..#.. ..... 0 0 4 4 3 3 ..# .#. ..# 0 0 2 1 Output: 8 -1 Explanation: For the first test case, the drone can travel as follows: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4) with a total of 8 moves. For the second test case, the drone cannot reach the destination due to the buildings blocking the way.","solution":"from collections import deque def min_moves_to_deliver(n, m, grid, sx, sy, dx, dy): if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(sx, sy, 0)]) visited[sx][sy] = True while queue: x, y, moves = queue.popleft() if x == dx and y == dy: return moves for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return -1 def process_test_cases(t, test_cases): results = [] for test_case in test_cases: n, m, grid, sx, sy, dx, dy = test_case results.append(min_moves_to_deliver(n, m, grid, sx, sy, dx, dy)) return results"},{"question":"Write a program to find the minimum number of steps required to convert a given string into a palindrome. In one step, you can insert any character at any position of the string. INPUT The first line of the input contains T, the number of test cases. Each test case contains a single line with a string S consisting of lowercase alphabets. OUTPUT For each test case, print a single integer representing the minimum number of steps required to convert the string into a palindrome. CONSTRAINTS 1≤T≤10 1≤|S|≤1000 SAMPLE INPUT 2 abba abc SAMPLE OUTPUT 0 2 Explanation For the first test case, the string \\"abba\\" is already a palindrome, so no steps are required. For the second test case, we can make \\"abc\\" a palindrome by adding two characters: \\"bacab\\" or \\"cabac\\". Therefore, 2 steps are required.","solution":"def min_steps_to_palindrome(s): Returns the minimum number of steps required to convert the string s into a palindrome by inserting characters. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 return dp[0][n-1] def min_steps_to_palindrome_for_cases(t, cases): Handle multiple test cases for finding the minimum number of steps to make each string a palindrome. results = [] for s in cases: results.append(min_steps_to_palindrome(s)) return results"},{"question":"Consider a game development studio working on a new role-playing game. In the game, the player\'s character can pick up items that each have a weight and a value. The player has a backpack that can carry a maximum weight of W. The goal is to maximize the total value of the items that the player can carry in their backpack without exceeding the maximum weight. You are given a list of N items, where each item has a weight and a value. Write a function that determines the maximum value the player can carry. Items are represented as pairs of weights and values: - Items[i][0] is the weight of the ith item. - Items[i][1] is the value of the ith item. You are to complete the function `maximizeValue(N, W, Items)` which takes the total number of items N, maximum weight W, and the list of Items as inputs, and returns the maximum value the player can carry. Example 1: Input: N = 3, W = 50 Items = [[10, 60], [20, 100], [30, 120]] Output: 220 Explanation: The player can carry items 2 and 3 for a total value of 100 + 120 = 220. Example 2: Input: N = 4, W = 10 Items = [[5, 50], [4, 40], [6, 30], [3, 20]] Output: 90 Explanation: The player can carry items 1 and 2 for a total value of 50 + 40 = 90. Your Task: You do not need to take input or print anything. Your task is to complete the function `maximizeValue()` which takes the values N, W, and Items as input parameters and returns the maximum value the player can carry. Expected Time Complexity: O(N*W) Expected Auxiliary Space: O(W) Constraints: 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ Items[i][0], Items[i][1] ≤ 100","solution":"def maximizeValue(N, W, Items): Determines the maximum value the player can carry in their backpack without exceeding the maximum weight. Parameters: N (int): The total number of items. W (int): The maximum weight the backpack can carry. Items (list of list of int): A list of items, each represented by a [weight, value] pair. Returns: int: The maximum value the player can carry. # Create a list to store the maximum value at each weight from 0 to W dp = [0] * (W + 1) # Iterate over each item for weight, value in Items: # Traverse dp array from right to left for current_weight in range(W, weight - 1, -1): dp[current_weight] = max(dp[current_weight], dp[current_weight - weight] + value) return max(dp)"},{"question":"Consider a polynomial P(x) of degree n with integer coefficients such that P(x) = a_n x^n + a_{n-1} x^{n-1} + cdots + a_1 x + a_0, where a_n, a_{n-1}, ldots, a_0 are integer coefficients. For a given positive integer m and k, define the value Q(m,k) as the number of distinct polynomials P(x) modulo m which satisfy the property that P(k) equiv 0 mod m. In other words, we want to count the number of distinct polynomials such that the value at x = k is divisible by m. -----Input----- The input consists of two space-separated integers m and k (1 leq m, k leq 100000) on a single line. -----Output----- Print a single integer, the number of distinct polynomials P(x) modulo m which satisfy P(k) equiv 0 mod m. -----Examples----- Input 5 3 Output 125 Input 7 4 Output 343 -----Explanation----- In the first example, all coefficients a_n, a_{n-1}, ldots, a_1, a_0 can take 5 possible values since we are working modulo 5. The polynomial P(x) = a_n x^n + a_{n-1} x^{n-1} + cdots + a_1 x + a_0 evaluated at k=3 must be divisible by 5, providing 5^3 = 125 distinct polynomials. In the second example, working modulo 7 gives 7^3 = 343 distinct polynomials owing to a similar reasoning.","solution":"def Q(m, k): Returns the number of distinct polynomials P(x) modulo m which satisfy P(k) ≡ 0 (mod m) return m ** k"},{"question":"# Stock Market Prediction Stock analysts have long been trying to predict the rise and fall of stock prices. A budding programmer has come up with a simple strategy for predicting the maximum possible gain from a single buy and sell transaction within a given daily price list. The strategy is as follows: 1. Find the lowest price to buy on a day before selling. 2. Find the highest price to sell on a subsequent day. Given a list of stock prices, your task is to write a function that calculates the maximum possible profit from a single buy and sell transaction. If no profit is possible, return 0. # Input The function will be passed a list of integers, each representing the stock price on a given day. The list will have at least 2 and at most 1000 elements. # Output Return an integer that represents the maximum possible profit. If no profitable transaction is possible, return 0. # Example Input: ```python [7, 1, 5, 3, 6, 4] ``` Output: ```python 5 ``` Input: ```python [7, 6, 4, 3, 1] ``` Output: ```python 0 ``` # Note In the first example, the optimal transaction is to buy on day 2 (price = 1) and sell on day 5 (price = 6), yielding a profit of 6-1 = 5. In the second example, no profitable transaction is possible, so the output is 0.","solution":"def max_profit(prices): Calculate the maximum possible profit from a single buy and sell transaction. If no profit is possible, return 0. :param prices: List of integers representing stock prices on different days. :return: Integer representing the maximum possible profit. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price - min_price > max_profit: max_profit = price - min_price if price < min_price: min_price = price return max_profit"},{"question":"You are given an array of integers where each integer represents a person and their corresponding value represents the number of friends they have. You need to help these people to form friendship circles. A friendship circle is formed by the following criteria: 1. A person can only be friends with people having the same number of friends as themselves. 2. Each person can have a friendship circle of at least themselves or more people having the same number of friends. Write a function to determine the minimum number of friendship circles that can be formed. Implement the function `min_friendship_circles(arr)` where: - `arr` is a list of integers representing the number of friends for each person. (1 ≤ length of arr ≤ 10^5, 0 ≤ arr[i] ≤ 10^5) Your function should return an integer representing the minimum number of friendship circles that can be formed. # Example: ```python def min_friendship_circles(arr): pass # Example 1 arr = [3, 3, 3, 2, 2, 2, 1, 1, 4] print(min_friendship_circles(arr)) # Output: 5 # Explanation: # - Three people with 3 friends can form 1 friendship circle. # - Three people with 2 friends can form 1 friendship circle. # - Two people with 1 friend can form 1 friendship circle. # - One person with 4 friends forms 1 friendship circle by themselves. # Hence, total 5 friendship circles. ``` # Notes: - If there are multiple groups of people with the same number of friends, each group will form its own circle independently. - Consider the efficiency of your solution given the constraints. Use appropriate data structures for optimal performance.","solution":"def min_friendship_circles(arr): from collections import Counter friend_count = Counter(arr) return len(friend_count)"},{"question":"A famous Dog Show organizer needs a program to help manage their show schedules. The organizer has a list of dogs that will participate, and for each dog, they maintain the dog\'s name, breed, and a unique four-digit ID. The schedule involves organizing rounds where dogs compete based on their breed, and within each round, the dogs are sorted by their IDs in ascending order. You need to write a program that takes the information about the dogs, organizes them by breed, and then schedules the rounds accordingly. Each round will consist of dogs of the same breed only, and the dogs should be listed in ascending order of their IDs. Input The first line contains an integer n (1 ≤ n ≤ 10000) — the number of dogs participating in the show. Each of the next n lines provide three pieces of information about a dog: 1. A string name (1 ≤ length of name ≤ 20), the dog\'s name. 2. A string breed (1 ≤ length of breed ≤ 20), the dog\'s breed. 3. A four-digit integer ID (1000 ≤ ID ≤ 9999), the dog\'s unique ID. Output For each breed present in the input, first output the breed name, then list all the dogs of that breed, each on a new line, in the format: \\"ID: name\\". The breeds should be presented in alphabetical order. Within each breed, dogs should be listed by their IDs in ascending order. Example Input 7 Buddy GoldenRetriever 2345 Rocky Bulldog 1456 Bella Beagle 2901 Bailey Beagle 3120 Max GoldenRetriever 2055 Charlie Bulldog 1984 Daisy Dalmatian 2222 Output Beagle 2901: Bella 3120: Bailey Bulldog 1456: Rocky 1984: Charlie Dalmatian 2222: Daisy GoldenRetriever 2055: Max 2345: Buddy Note * All dog names and breeds are case sensitive and should be treated as such. * Dogs with the same name but different IDs are considered different entries. * The input guarantees that no two dogs will have the same ID.","solution":"def schedule_dog_show(dogs_info): from collections import defaultdict breed_dict = defaultdict(list) # Parse the dogs info into the breed dictionary for name, breed, id in dogs_info: breed_dict[breed].append((id, name)) # Prepare the schedule output schedule = [] for breed in sorted(breed_dict.keys()): schedule.append(breed) for id, name in sorted(breed_dict[breed]): schedule.append(f\\"{id}: {name}\\") return schedule"},{"question":"Arjun is a software engineer who has been given the task of optimizing the performance of a certain application. The application processes a series of tasks, where each task has a specific priority and a unique identifier. The tasks are processed in the order of their priority, with a higher priority task being processed first. In case two tasks have the same priority, they are processed in the order of their identifiers. Arjun needs to write a program that takes a list of tasks with their priorities and identifiers, processes them following the rules mentioned above, and returns the order in which the tasks will be completed. Input Format: The first line contains an integer N, the number of tasks. Each of the next N lines contains an integer Pi (priority) and an integer Ii (identifier) of the i-th task separated by a space. Output Format: Print the list of identifiers in the order in which the tasks will be completed. Constraints: 1 ≤ N ≤ 10^3 1 ≤ Pi ≤ 10^3 1 ≤ Ii ≤ 10^3 SAMPLE INPUT 5 2 1003 1 1002 3 1001 2 1000 2 1004 SAMPLE OUTPUT 1001 1000 1003 1004 1002 Explanation: The tasks are sorted based on their priorities first and then by their identifiers if there is a tie in priorities. In this case, tasks with priorities and identifiers are: 3 1001 2 1000 2 1003 2 1004 1 1002 In the sorted order of their processing, the task identifiers are: 1001, 1000, 1003, 1004, and 1002.","solution":"def process_tasks(n, tasks): Processes tasks based on their priority and identifier. Args: n (int): The number of tasks. tasks (list of tuples): List containing tuples of (priority, identifier). Returns: list: List of identifiers in the order of task completion. # Sorting tasks based on priority (descending) and identifier (ascending) sorted_tasks = sorted(tasks, key=lambda x: (-x[0], x[1])) # Extracting just the identifiers in the required order sorted_identifiers = [task[1] for task in sorted_tasks] return sorted_identifiers # Example usage: # n = 5 # tasks = [(2, 1003), (1, 1002), (3, 1001), (2, 1000), (2, 1004)] # print(process_tasks(n, tasks)) # [1001, 1000, 1003, 1004, 1002]"},{"question":"You\'ve been asked to write a function that converts Roman numerals to their corresponding integer values. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Common combinations to be aware of include: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given a string in Roman numeral format, write a function to convert it to an integer. Example: \\"III\\" -> 3 \\"IV\\" -> 4 \\"IX\\" -> 9 \\"LVIII\\" -> 58 \\"MCMXCIV\\" -> 1994","solution":"def roman_to_integer(roman): Converts a Roman numeral to an integer. Parameters: roman (str): The Roman numeral string. Returns: int: The integer representation of the Roman numeral. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 i = 0 while i < len(roman): if i + 1 < len(roman) and roman_values[roman[i]] < roman_values[roman[i + 1]]: total += roman_values[roman[i + 1]] - roman_values[roman[i]] i += 2 else: total += roman_values[roman[i]] i += 1 return total"},{"question":"A software company plans to host a coding marathon where programmers can participate from any time zone. They need to ensure that the contest lasts exactly `D` days, starting from a specific date and time. Given the start date and time of the contest and the number of days `D`, the company wants to determine the exact end date and time when the contest finishes. Write a program that reads the start date and time in the format `YYYY MM DD HH MM` where `YYYY` is the year, `MM` is the month (1-12), `DD` is the day of the month (1-31), `HH` is the hour (0-23), and `MM` is the minute (0-59), along with the duration `D` in days. The task is to calculate the ending date and time after `D` days from the start. Constraints * 1 le YYYY le 9999 * 1 le MM le 12 * 1 le DD le 31 * 0 le HH le 23 * 0 le MM le 59 * 1 le D le 1000 * All values in input are integers. Input Input is given from Standard Input in the following format: YYYY MM DD HH MM D Output Print the ending date and time in the same format `YYYY MM DD HH MM`. Examples Input 2023 10 25 19 30 10 Output 2023 11 04 19 30 Input 2023 12 31 23 45 1 Output 2024 01 01 23 45","solution":"from datetime import datetime, timedelta def calculate_end_date(start_year, start_month, start_day, start_hour, start_minute, duration_days): # Create a datetime object from the input start_date = datetime(start_year, start_month, start_day, start_hour, start_minute) # Add the duration in days end_date = start_date + timedelta(days=duration_days) # Return the end date formatted as specified return end_date.strftime(\'%Y %m %d %H %M\') def main(): import sys input = sys.stdin.read().strip() start_year, start_month, start_day, start_hour, start_minute, duration_days = map(int, input.split()) result = calculate_end_date(start_year, start_month, start_day, start_hour, start_minute, duration_days) print(result)"},{"question":"You are given an encrypted string S that has been encoded using a simple character shifting rule. The rule for encoding each character can be described as follows: each character \'a\' to \'z\' is shifted by a certain number of positions in the alphabet, wrapping around if necessary (i.e., \'z\' shifted by 1 becomes \'a\'). Your task is to decode the given string by determining and applying the correct shift for each test case. The shift value for each string is provided. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case is described by one line containing an integer N (the shift value) and the encrypted string S, separated by whitespace. ------ Output ------ For each test case, output a single line containing the decoded string. ------ Constraints ------ 1 le T le 100 1 le N le 1000 1 le text{length of S} le 10^4 S contains only lowercase letters \'a\' to \'z\'. ------ Example ------ Input: 3 1 bcde 2 fgij 3 klmn Output: abcd degh hijk","solution":"def decode_string(n, s): Decodes the encrypted string s by shifting each character n places backwards in the alphabet. decoded = [] for char in s: decoded.append(chr(((ord(char) - ord(\'a\') - n) % 26) + ord(\'a\'))) return \'\'.join(decoded) def process_input(t, test_cases): Processes the test cases and returns the decoded strings for each test case. results = [] for n, s in test_cases: results.append(decode_string(n, s)) return results"},{"question":"You are given an integer array arr of size n which represents the elevation map where the width of each bar is 1. Write a function that returns the volume of water it is able to trap after raining. Example arr=[0,1,0,2,1,0,1,3,2,1,2,1] The bars represent the elevation map [0,1,0,2,1,0,1,3,2,1,2,1], where the width of each bar is 1. The amount of water trapped after raining is 6 units. Function Description Complete the trapRainWater function in the editor below. It should return an integer representing the total volume of trapped water. trapRainWater has the following parameter(s): int arr[n]: an array of integers representing the elevation map Returns - int: the volume of water that can be trapped Input Format The first line contains an integer n, the size of the array arr. The second line contains n space-separated integers representing the elevation map. Constraints 1leq nleq 10^4 0le arr[i]leq 10^4 Sample Input STDIN Function ----- -------- 12 n = 12 0 1 0 2 1 0 1 3 2 1 2 1 arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Sample Output 6 Explanation The elevation map [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] forms 6 units of trapped water as illustrated below: [ # #.#\\"# #.#. #.#. #..#.. # The amount of water trapped after raining is 6 units.","solution":"def trapRainWater(height): if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate total water trapped water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Given a list of integers, write a function that returns a new list containing only the unique elements from the original list, but in the same order they first appeared. Input Format A single line containing space-separated integers. Constraints 0 leq len(list) leq 1000 Output Format A single line containing space-separated integers, representing the unique elements in the order they first appeared in the input. Sample Input 1 2 2 3 4 4 5 Sample Output 1 2 3 4 5 Explanation The unique elements from the input list are 1, 2, 3, 4, and 5. We maintain their original order from the input but remove any duplicates. Thus, the output is 1, 2, 3, 4, 5.","solution":"def unique_elements(input_list): Returns a list of unique elements in the order they first appeared. seen = set() unique_list = [] for num in input_list: if num not in seen: unique_list.append(num) seen.add(num) return unique_list"},{"question":"You are given a matrix of size MxN filled with non-negative integers. Your task is to find the sum of all the elements in the submatrix defined by the upper left corner (x1, y1) and the lower right corner (x2, y2). Input Format: The first line contains two integers M and N, the dimensions of the matrix. The next M lines contain N integers each, representing the elements of the matrix. The following line contains a single integer Q, denoting the number of queries. The next Q lines contain four integers each, x1, y1, x2, y2, defining the coordinates of the submatrix for which the sum is to be found. Output Format: For each query, print the sum of the elements in the specified submatrix on a new line. Your Task: You need to complete the function sumSubmatrix(matrix, queries) which takes the matrix and the list of queries as arguments and returns a list of integers representing the sum for each query. Constraints: 1 <= M, N <= 200 0 <= matrix[i][j] <= 10^3 1 <= Q <= 1000 0 <= x1 <= x2 < M 0 <= y1 <= y2 < N Example: Input: 3 3 1 2 3 4 5 6 7 8 9 2 0 0 1 1 1 1 2 2 Output: 12 28","solution":"def sumSubmatrix(matrix, queries): Returns the sum of the elements in the specified submatrices. result = [] for x1, y1, x2, y2 in queries: submatrix_sum = 0 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): submatrix_sum += matrix[i][j] result.append(submatrix_sum) return result"},{"question":"A treasure hunter needs to distribute a collection of ancient artifacts into safety deposit boxes to maximize safety. The artifacts are in different shapes and sizes, and each safety deposit box has a size constraint. The goal is to determine the maximum value of artifacts that can be securely stored without exceeding the individual box\'s size limit. -----Input----- The first line contains an integer T denoting the number of test cases. For each test case: The first line contains two integers N and W, where N is the number of artifacts and W is the maximum size of a single safety deposit box. The next N lines each contain two integers: the size and value of an artifact. -----Output----- For each test case, output a single integer denoting the maximum value of artifacts that can be secured in a safety deposit box without exceeding the size limit W. -----Constraints----- 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ size of an artifact ≤ 1000 1 ≤ value of an artifact ≤ 1000 -----Example----- Input: 2 4 10 4 40 3 50 2 60 5 30 3 5 2 10 1 10 3 15 Output: 150 25 -----Explanation----- For the first test case, the best way to fit artifacts within a box of size 10 is by storing artifacts of size 2, 3, and 4, resulting in a total value of 60+50+40=150. For the second test case, the best way to fit artifacts within a box of size 5 is by storing artifacts of size 1 and 3, resulting in a total value of 10+15=25.","solution":"def knapsack(T, test_cases): Solves the 0/1 knapsack problem for multiple test cases. - T: Number of test cases. - test_cases: List of tuples, each containing: - N: Number of artifacts. - W: Maximum size of a safety deposit box. - artifacts: List of tuples with (size, value) for each artifact. Returns a list of maximum values for each test case. results = [] for i in range(T): N, W, artifacts = test_cases[i] # Initialize DP table dp = [[0 for _ in range(W + 1)] for _ in range(N + 1)] # Fill DP table for j in range(1, N + 1): size, value = artifacts[j - 1] for w in range(1, W + 1): if size <= w: dp[j][w] = max(dp[j - 1][w], dp[j - 1][w - size] + value) else: dp[j][w] = dp[j - 1][w] results.append(dp[N][W]) return results"},{"question":"A gardener is working in a linear garden with `n` flower beds arranged in a straight line. Each flower bed has a certain number of flowers, represented by an integer. The gardener wants to know how many different types of flowers are in each segment of the garden before and after performing some updates. The gardener can perform two types of operations: 1. **Update operation**: This operation changes the number of flowers in a specific bed. 2. **Query operation**: This operation asks for the number of distinct types of flowers in a specific segment of the garden. Write a program to perform these operations efficiently. **Input** The first line of input contains three integers `n`, `m`, and `q` (1 ≤ n, m, q ≤ 100000) — the number of flower beds, the number of updates, and the number of queries. The second line contains `n` integers representing the initial number of flowers in each bed. The next `m + q` lines contain either update or query operations. An update operation is denoted by `1 i x` (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9), which means to set the number of flowers in the i-th bed to `x`. A query operation is denoted by `2 l r` (1 ≤ l ≤ r ≤ n), which means to report the number of different types of flowers in the segment from `l` to `r` (inclusive). **Output** For each query operation, print the number of distinct types of flowers in the specified segment. **Example** Input: ``` 5 2 3 1 2 3 3 2 2 1 5 1 3 4 2 1 5 1 2 5 2 2 4 ``` Output: ``` 3 4 3 ``` **Explanation** - Initial garden state: `[1, 2, 3, 3, 2]` - For the first query `2 1 5`, the segment `[1, 2, 3, 3, 2]` contains 3 distinct types of flowers: `1, 2, 3`. - After the first update `1 3 4`, the garden state is `[1, 2, 4, 3, 2]`. - For the second query `2 1 5`, the segment `[1, 2, 4, 3, 2]` contains 4 distinct types of flowers: `1, 2, 3, 4`. - After the second update `1 2 5`, the garden state is `[1, 5, 4, 3, 2]`. - For the third query `2 2 4`, the segment `[5, 4, 3]` contains 3 distinct types of flowers: `4, 5, 3`.","solution":"def update_flower_beds(flower_beds, i, x): flower_beds[i - 1] = x def query_flower_beds(flower_beds, l, r): return len(set(flower_beds[l - 1:r])) def process_operations(n, m, q, initial_flower_beds, operations): results = [] flower_beds = initial_flower_beds[:] for operation in operations: op_type = operation[0] if op_type == 1: i, x = operation[1], operation[2] update_flower_beds(flower_beds, i, x) elif op_type == 2: l, r = operation[1], operation[2] result = query_flower_beds(flower_beds, l, r) results.append(result) return results"},{"question":"You are given a rectangular grid with R rows and C columns, where R and C are positive integers. Initially, all cells in the grid contain the value 0. You need to perform Q operations on this grid. Each operation updates the values in a specific subset of the grid cells based on the following instructions: 1. **Row Update:** An operation that updates all cells in a specific row to a given value. 2. **Column Update:** An operation that updates all cells in a specific column to a given value. 3. **Rectangle Update:** An operation that updates all cells in a sub-rectangle defined by its top-left and bottom-right corners to a given value. The operations are applied in the order they are given. After all Q operations are performed, you need to output the final values of all cells in the grid. # Input The first line contains three integers R (1 ≤ R ≤ 100), C (1 ≤ C ≤ 100), and Q (1 ≤ Q ≤ 100), representing the number of rows, columns, and operations, respectively. Each of the next Q lines contains the description of one operation. The description starts with an integer `t` (1 ≤ t ≤ 3) indicating the type of operation: - If `t = 1`: The operation describes a row update and is followed by two integers `r` (0 ≤ r < R) and `v`, where all cells in row `r` are updated to the value `v`. - If `t = 2`: The operation describes a column update and is followed by two integers `c` (0 ≤ c < C) and `v`, where all cells in column `c` are updated to the value `v`. - If `t = 3`: The operation describes a rectangle update and is followed by five integers `r1`, `c1`, `r2`, and `c2` (0 ≤ r1 ≤ r2 < R, 0 ≤ c1 ≤ c2 < C), and `v`, where all cells in the sub-rectangle with top-left corner (r1, c1) and bottom-right corner (r2, c2) are updated to the value `v`. # Output The output should consist of R lines, each containing C integers, representing the final values of the cells in the grid after all operations have been applied. # Example Input ``` 4 5 3 1 2 3 2 1 4 3 0 0 1 1 5 ``` Output ``` 5 4 4 4 4 5 5 5 0 0 3 4 4 4 4 0 4 4 4 4 ``` In this example, the grid has 4 rows and 5 columns. Three operations are performed: 1. Update all cells in row 2 to value 3. 2. Update all cells in column 1 to value 4. 3. Update all cells in the sub-rectangle from (0, 0) to (1, 1) to value 5. After applying these operations in order, the final values of the grid cells are printed.","solution":"def grid_operations(R, C, Q, operations): Applies a series of operations to a grid and returns the final configuration of the grid. Parameters: R (int): Number of rows in the grid. C (int): Number of columns in the grid. Q (int): Number of operations to be performed. operations (list): List of operations, where each operation is represented as a tuple. Returns: list: Final grid configuration as a list of lists. # Initialize the grid with 0s grid = [[0] * C for _ in range(R)] # Apply each operation for operation in operations: t = operation[0] if t == 1: # Row Update r, v = operation[1], operation[2] for col in range(C): grid[r][col] = v elif t == 2: # Column Update c, v = operation[1], operation[2] for row in range(R): grid[row][c] = v elif t == 3: # Rectangle Update r1, c1, r2, c2, v = operation[1], operation[2], operation[3], operation[4], operation[5] for row in range(r1, r2 + 1): for col in range(c1, c2 + 1): grid[row][col] = v return grid"},{"question":"Maxim wants to play a game with his friend, Alex. He has an array of integers, and in each move, he can pick any two distinct indices i and j (1 le i, j le n) and swap the elements at these indices. Maxim wins if after any number of such moves, the resulting array is non-decreasing. However, Maxim can only make up to k moves. Given the array, determine if Maxim can win the game. -----Input----- The first line of input contains a single integer t (1 le t le 1000) — the number of test cases. The descriptions of the input test cases follow. The first line of each test case contains two integers n (1 le n le 100) and k (1 le k le binom{n}{2}) — the length of the array and the maximum number of swaps Maxim can make. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the initial elements of the array. -----Output----- For each test case, print a single line with the word \\"Yes\\" if Maxim can win the game, or \\"No\\" if he cannot. -----Examples----- Input 3 5 3 3 1 4 1 5 4 6 5 2 9 1 3 1 2 3 1 Output Yes Yes No -----Note----- In the first test case, Maxim can make the array non-decreasing by swapping the elements at indices (2, 3) to get [3, 4, 1, 1, 5] and then swapping the elements at indices (1, 2) to get [4, 3, 1, 1, 5] and then swapping the elements at indices (1, 2) to get [3, 4, 1, 1, 5]. In the second test case, Maxim can swap the elements at indices (2, 4) to get [5, 1, 9, 2] and then swap the elements at indices (1, 2) to get [1, 5, 9, 2] and then swap the elements at indices (3, 4) to get [1, 5, 2, 9], and with three more swaps, it is possible to make the array non-decreasing. In the third test case, with only 1 swap, it is not possible to sort the array in non-decreasing order.","solution":"def can_win_game(t, test_cases): results = [] for test_case in test_cases: n, k, array = test_case sorted_array = sorted(array) mismatches = sum(1 for i in range(n) if array[i] != sorted_array[i]) # Each mismatch requires a swap to correct, but each swap can fix two positions # So, the effective number of swaps required is mismatches // 2 (rounded up) required_swaps = (mismatches + 1) // 2 if required_swaps <= k: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a string S composed of lowercase alphabets, determine if it is possible to convert it into a palindrome by rearranging its characters. If possible, return \\"YES\\", otherwise return \\"NO\\". Input Format: First line of the input consists of a single integer T, number of test cases. Each test case consists of a single line containing the string S. Output Format: Print \\"YES\\" if it\'s possible to rearrange the characters to form a palindrome, otherwise, print \\"NO\\" for each test case. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 Hint: A string can be rearranged into a palindrome if at most one character has an odd count. SAMPLE INPUT 2 aabb abc SAMPLE OUTPUT YES NO","solution":"def can_form_palindrome(s): Determines if the string can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" else: return \\"YES\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"Given a grid with dimensions N x M, consisting of cells filled with positive integers, you are to find the minimum cost to travel from the top-left cell (0,0) to the bottom-right cell (N-1,M-1). You can only move right or down from a cell, and the cost of moving to a cell is the value of the cell you move into. The function minPathCost(int[][] grid, int N, int M) should return an integer, the minimum cost to reach the bottom-right corner. Example 1: Input: N = 3, M = 3 grid = {{1, 3, 1}, {1, 5, 1}, {4, 2, 1}} Output: 7 Explanation: The path 1→3→1→1→1 has the minimum cost which sums to 7. Example 2: Input: N = 2, M = 2 grid = {{1, 2}, {1, 1}} Output: 3 Explanation: The path 1→1→1 has the minimum cost which sums to 3. Constraints: - 1 <= N, M <= 1000 - 1 <= grid[i][j] <= 100","solution":"def minPathCost(grid, N, M): Returns the minimum cost to travel from the top-left cell (0,0) to the bottom-right cell (N-1,M-1). # Initialize a dp table with the same dimensions as grid dp = [[0] * M for _ in range(N)] # Starting point dp[0][0] = grid[0][0] # Initialize the first column of the dp table for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row of the dp table for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The minimum cost will be at the bottom-right cell of the dp table return dp[N-1][M-1]"},{"question":"You are given an array consisting of N integers. You need to process Q queries on this array. Each query consists of two integers L and R. For each query, you need to find the maximum sum of any contiguous subarray within the range [L, R]. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the size of the array. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, dots, A_{N} denoting the array A. - The third line of each test case contains an integer Q - denoting the number of queries. - The i^{th} of the next Q lines contains two integers L and R indicating the range of the subarray to consider. ------ Output Format ------ For each test case, - For each query, print in a new line the maximum sum of any contiguous subarray within the range [L, R]. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} -10^9 ≤ A_{i} ≤ 10^9 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N - Sum of N over all test cases does not exceed 10^6. - Sum of Q over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 1 5 1 -2 3 4 -1 2 1 3 2 5 ------ Sample Output 1 ------ 3 7 ------ Explanation 1 ------ Test case 1: - Query 1: L = 1, R = 3. The subarray is [1, -2, 3] and the maximum sum of any contiguous subarray is 3. - Query 2: L = 2, R = 5. The subarray is [-2, 3, 4, -1] and the maximum sum of any contiguous subarray is 7.","solution":"def max_subarray_sum(arr, l, r): Returns the maximum sum of any contiguous subarray within the range [l, r] using Kadane\'s algorithm. current_sum = 0 max_sum = float(\'-inf\') for i in range(l-1, r): current_sum = max(arr[i], current_sum + arr[i]) max_sum = max(max_sum, current_sum) return max_sum def process_queries(arr, queries): Processes each query to find the maximum sum of any contiguous subarray within the given range. results = [] for l, r in queries: results.append(max_subarray_sum(arr, l, r)) return results def process_test_cases(test_cases): results = [] for test_case in test_cases: n, arr, q, queries = test_case results.extend(process_queries(arr, queries)) return results"},{"question":"You are given a list of positive integers representing the scores of a game, where each index i represents a player. Implement a method to find the maximum score and identify all players who scored that maximum score. Return a list of indices of those players in ascending order. Input format: The input starts with an integer N, denoting the number of players. The next line contains N space-separated integers representing the scores. Output format: You must print the list of indices of players who have the maximum score. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Scores ≤ 10^9 SAMPLE INPUT 5 100 85 100 92 100 SAMPLE OUTPUT 0 2 4","solution":"def find_max_scorers(scores): Finds the indices of players who scored the maximum score. Parameters: scores (list of int): List of positive integers representing scores of players. Returns: list of int: List of indices of players who have the maximum score. if not scores: return [] max_score = max(scores) return [index for index, score in enumerate(scores) if score == max_score] # Example usage: # N = 5 # scores = [100, 85, 100, 92, 100] # print(find_max_scorers(scores)) # Output: [0, 2, 4]"},{"question":"Cryptokitties is a blockchain-based virtual game that allows players to adopt, breed, and trade virtual cats. Each cat has a unique genome that defines its appearance, attributes, and traits. To further enhance the gameplay, you are asked to create a program to analyze and find the most common traits among a given list of Cryptokitties. Given a list of Cryptokitties and their traits, your task is to identify and list the trait(s) that appears most frequently across all the given Cryptokitties. If there are multiple traits with the same highest frequency, list all of them in alphabetical order. Input The input consists of multiple test cases. Each test case is structured as follows: - The first line contains an integer T (1 ≤ T ≤ 100), the number of Cryptokitties. - The next T lines each contain the traits of a single Cryptokitty separated by a space. Each trait consists of lowercase Roman alphabet characters with a maximum length of 16 characters. The end of input is indicated by a line containing a zero. This line is not part of any dataset and should not be processed. Output For each test case, output in a line the most common trait(s) sorted in alphabetical order, separated by a single space. Ensure each test case output is on a new line. Example Input 4 whiskers playful blueeyes fluffy blueeyes playful greeneyes playful whiskers 3 longtail agile shorttail sneaky agile greeneyes 0 Output playful agile","solution":"def most_common_traits(input_data): from collections import Counter results = [] lines = input_data.strip().split(\\"n\\") i = 0 while i < len(lines): traits_counter = Counter() T = int(lines[i]) if T == 0: break for j in range(1, T + 1): traits = lines[i + j].split() traits_counter.update(traits) i += T + 1 # Find the max frequency if traits_counter: max_freq = max(traits_counter.values()) common_traits = [trait for trait, count in traits_counter.items() if count == max_freq] common_traits.sort() results.append(\\" \\".join(common_traits)) return \\"n\\".join(results)"},{"question":"A country is planning to build a new network of highways to connect its cities. They have identified a set of cities and possible roads they could construct between pairs of cities, along with the cost of constructing each road. They want to ensure that every city is connected directly or indirectly to every other city, but they also want to minimize the total cost of construction. You are tasked with finding the minimum cost to construct such a network of roads. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), the number of cities and the number of possible roads respectively. Each of the next m lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), where u and v are cities connected by a possible road, and w is the cost to construct that road. It is guaranteed that there is no more than one road between any pair of cities, and no city will connect to itself. Output Print the minimum total cost of constructing a network that connects all cities. If it is impossible to connect all cities, print \\"Impossible\\". Examples Input 4 5 1 2 3 2 3 4 3 4 5 4 1 2 2 4 6 Output 9 Input 3 3 1 2 5 1 3 6 2 3 7 Output 11 Input 4 2 1 2 3 3 4 4 Output Impossible","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda item: item[2]) mst_cost = 0 e = 0 for edge in edges: u, v, w = edge x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 mst_cost += w union(parent, rank, x, y) if e == n - 1: break if e != n - 1: return \\"Impossible\\" return mst_cost def minimum_cost_to_connect_cities(n, m, connections): if m < n - 1: return \\"Impossible\\" edges = [] for u, v, w in connections: edges.append((u, v, w)) return kruskal(n, edges)"},{"question":"Write a function named `capitalize_sentences` that takes a string as input and returns the string with the first letter of each sentence capitalized. A sentence is defined as ending with a period (.), exclamation mark (!), or question mark (?). For example: ```python capitalize_sentences(\\"hello. how are you? i am fine!\\") # Returns \\"Hello. How are you? I am fine!\\" capitalize_sentences(\\"this is an apple. it is red.\\") # Returns \\"This is an apple. It is red.\\" capitalize_sentences(\\"what time is it? it\'s time to go.\\") # Returns \\"What time is it? It\'s time to go.\\" ``` Let\'s assume that the input string will not have any leading or trailing white spaces, and there will be exactly one space after each period, exclamation mark, or question mark.","solution":"def capitalize_sentences(text): Capitalizes the first letter of each sentence in the given text. A sentence is defined as ending with a period (.), exclamation mark (!), or question mark (?). Args: text (str): The input string. Returns: str: The string with each sentence capitalized. import re sentences = re.split(r\'([.!?] )\', text) capitalized_sentences = [sentences[i].capitalize() if i % 2 == 0 else sentences[i] for i in range(len(sentences))] return \'\'.join(capitalized_sentences)"},{"question":"You are given an integer array A of size n, where n is always even. You need to divide this array into exactly two subarrays B and C such that the sum of the integers in subarray B is equal to the sum of the integers in subarray C. Your task is to determine whether such a division is possible and, if it is, provide any such division. Input The first line contains a single integer n (2 ≤ n ≤ 1000, and n is even) — the size of the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (|a_i| ≤ 1000 for each i) — the elements of the array. Output If it is possible to divide the array into two subarrays with equal sums, output \\"YES\\" followed by the indices of elements in subarray B (1-based). Otherwise, output \\"NO\\". If there are multiple solutions, you may output any of them. Examples Input 4 1 2 3 4 Output YES 1 4 Input 6 5 5 5 5 5 5 Output YES 1 2 3 Input 2 1 2 Output NO Note In the first example, selecting indices 1 and 4 gives subarray B = [1, 4] with sum 1 + 4 = 5, and the remaining elements are subarray C = [2, 3] with sum 2 + 3 = 5. In the second example, selecting the first three elements gives subarray B = [5, 5, 5] with sum 5 + 5 + 5 = 15, and the remaining three elements form subarray C with the same sum. In the third example, there is no way to split the array into two subarrays with equal sums.","solution":"def find_equal_sum_partition(n, A): Finds a partition of array A into two subarrays B and C with equal sums. Parameters: n (int): Length of array A (even number) A (list): List of integers representing the array Returns: str: \\"YES\\" if there is such a partition followed by the 1-based indices of elements in B \\"NO\\" if there is no such partition total_sum = sum(A) if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 dp = [[False] * (target_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(target_sum + 1): dp[i][j] = dp[i - 1][j] if j >= A[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - A[i - 1]] if not dp[n][target_sum]: return \\"NO\\" res = [] i, j = n, target_sum while i > 0 and j > 0: if dp[i - 1][j]: i -= 1 else: res.append(i) j -= A[i - 1] i -= 1 return \\"YESn\\" + \\" \\".join(map(str, sorted(res))) # This function should be used only for IO operations, not required for unit testing def main(): n = int(input().strip()) A = list(map(int, input().strip().split())) print(find_equal_sum_partition(n, A)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a tree with n vertices (labeled from 1 to n) and n-1 edges. Each edge has an associated weight. Your task is to determine the two vertices that are the furthest apart in terms of the sum of edge weights along the path between them. Input The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of vertices. Each of the next n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — an edge between vertices u and v with weight w. Output Print two integers, the labels of the vertices that are furthest apart. If there are multiple pairs of vertices with the same maximum distance, you may print any one of them. Examples Input 5 1 2 3 2 3 4 2 4 2 4 5 6 Output 3 5 Input 4 1 2 1 1 3 1 1 4 1 Output 3 4","solution":"from collections import defaultdict, deque def find_furthest_apart_vertices(n, edges): # Convert edge list to adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): queue = deque([(start, 0)]) distances = {start: 0} farthest_node, max_distance = start, 0 while queue: current, current_distance = queue.popleft() if current_distance > max_distance: farthest_node, max_distance = current, current_distance for neighbor, weight in graph[current]: if neighbor not in distances: distances[neighbor] = current_distance + weight queue.append((neighbor, distances[neighbor])) return farthest_node, max_distance, distances # Step 1: Find the farthest node from an arbitrary node (e.g. node 1) farthest_node, _, _ = bfs(1) # Step 2: Find the farthest node from the previously found farthest node other_farthest_node, max_distance, distances = bfs(farthest_node) return farthest_node, other_farthest_node # Function to parse input data and call the solution function def main(input_data): input_lines = input_data.strip().split(\'n\') n = int(input_lines[0]) edges = [] for line in input_lines[1:]: u, v, w = map(int, line.split()) edges.append((u, v, w)) result = find_furthest_apart_vertices(n, edges) return result"},{"question":"You are given a sequence of words. Your task is to find the word that has the highest frequency of occurrence and output its frequency. If there are multiple words with the same maximum frequency, output the one that appears first in the sequence. Input The first line contains one integer n (1 ≤ n ≤ 100) — the number of words in the sequence. The second line contains n words, where each word consists of lowercase Latin letters (1 ≤ length of each word ≤ 100). Output Print one integer — the frequency of the word that appears most frequently in the sequence. Example Input 6 apple banana apple orange apple banana Output 3 Note: In the example, \\"apple\\" appears 3 times, which is more than the frequency of any other word.","solution":"def highest_frequency_word_count(n, words): Returns the frequency of the word that appears most frequently in the sequence of words. If there are multiple words with the same maximum frequency, the one that appears first in the sequence is used. Parameters: n (int): Number of words in the sequence. words (List[str]): List of words in the sequence. Returns: int: The frequency of the word that appears most frequently. word_count = {} max_count = 0 for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 if word_count[word] > max_count: max_count = word_count[word] return max_count"},{"question":"Given a list of integers, return the sum of squares of all integers present in the list. The length of the list must be at least 1. The function should work for both positive and negative integers. For example: ```python sum_of_squares([1, 2, 3, 4, 5]) # --> 55 sum_of_squares([-1, -2, -3, -4, -5]) # --> 55 sum_of_squares([0, 0, 0, 1]) # --> 1 ```","solution":"def sum_of_squares(lst): Given a list of integers, return the sum of squares of all integers present in the list. return sum(x ** 2 for x in lst)"},{"question":"You are given a sequence of integers and you have to process multiple queries. Each query specifies a sub-sequence by providing two indices: start and end (both inclusive). Your task is to calculate and return the sum and the maximum element of this specified sub-sequence for each query. Input The first line contains two integers n and q (1 ≤ n ≤ 50000, 1 ≤ q ≤ 100000) – the number of elements in the sequence and the number of queries, respectively. The second line contains n space-separated integers, the elements of the sequence (1 ≤ element ≤ 10^9). Each of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) – the start and end indices (1-based) of the sub-sequence for the query. Output For each query, output two integers separated by a space: the sum and the maximum element of the specified sub-sequence. Examples Input 5 3 1 2 3 4 5 1 3 2 5 3 3 Output 6 3 14 5 3 3 Input 7 4 4 5 1 6 2 9 8 1 7 2 4 4 6 5 5 Output 35 9 12 6 17 9 2 2","solution":"def process_queries(n, q, sequence, queries): Returns the sums and maximum elements for each sub-sequence specified by the queries. n: int - number of elements in the sequence q: int - number of queries sequence: list of int - the elements of the sequence queries: list of tuples - each tuple contains two integers (li, ri) indicating the start and end indices of the sub-sequence Returns: list of tuples - each tuple contains two integers (sum, max) for the sub-sequence specified by a query result = [] for li, ri in queries: sub_seq = sequence[li-1:ri] sub_sum = sum(sub_seq) sub_max = max(sub_seq) result.append((sub_sum, sub_max)) return result"},{"question":"In a fantasy world, there are n castles numbered from 1 to n. Each castle i has a defense level of di. You are a dragon and you will try to capture the castles one by one in increasing order of their index. To capture a castle, you adjust your attack power at the end of each day. Initially, your attack power is 1. On each day, if your attack power equals the defense level of the current castle, you successfully capture it and move on to the next castle on the following day. If your attack power does not match the current castle\'s defense level, you increase your attack power by 1 and try again the next day. Note that once you increase your attack power, it stays increased for the following castles too unless adjusted further. Your task is to determine the number of days it will take to capture all the castles. Input The first line contains a single integer n — the number of castles (1 ≤ n ≤ 2000). The second line contains n space-separated integers: di (1 ≤ di ≤ 106) — the defense levels of the castles in increasing order of their indices. Output Print a single number — the total number of days it takes to capture all the castles. Examples Input 3 1 2 3 Output 3 Input 4 5 6 7 8 Output 8 Input 5 1 5 9 10 20 Output 20 Note In the first example, the situation is as follows: * Day 1: Attack power is 1. You capture castle 1. * Day 2: Attack power is 2. You capture castle 2. * Day 3: Attack power is 3. You capture castle 3. Total days: 3. In the second example, the situation is as follows: * Day 1 to Day 5: You increase your attack power from 1 to 5. You capture castle 1. * Day 6: Attack power is 6. You capture castle 2. * Day 7: Attack power is 7. You capture castle 3. * Day 8: Attack power is 8. You capture castle 4. Total days: 8.","solution":"def capture_castles(n, defense_levels): Determines the number of days it will take to capture all castles. Parameters: n (int): Number of castles. defense_levels (list): List of integers representing the defense levels of the castles. Returns: int: Total number of days to capture all the castles. days = 0 attack_power = 1 for defense_level in defense_levels: if attack_power < defense_level: days += (defense_level - attack_power) attack_power = defense_level days += 1 attack_power += 1 return days"},{"question":"Jenny is given a sequence of n integers, [a_0,a_1,ldots,a_{n-1}], and she needs to determine the length of the longest contiguous subarray that has exactly k distinct integers. Given textit{t} test cases where each test case consists of an array of integers and a value k, can you help Jenny find the length of the longest contiguous subarray with exactly k distinct integers for each array? Input Format The first line contains a single integer, textit{t}, denoting the number of test cases. The t subsequent segments describe each test case in the following format: The first line contains two integers n and k, denoting the number of integers in the array and the number of distinct integers required, respectively. The second line contains n space-separated integers describing the respective values of a_0,a_1,ldots,a_{n-1}. Constraints 1leq tleq10 1leq nleq200000 1leq kleq n 1leq a_ileq10^9 Output Format On a new line for each test case, print a single integer denoting the length of the longest contiguous subarray that contains exactly k distinct integers. If no such subarray exists, print 0. Sample Input 2 7 3 1 2 1 3 4 2 3 5 2 1 2 1 2 1 Sample Output 4 5 Explanation For the first test case, the longest contiguous subarray with exactly 3 distinct integers is [2,1,3,4] which has length 4. For the second test case, the only subarray with exactly 2 distinct integers is the entire array [1,2,1,2,1] which has length 5.","solution":"from collections import defaultdict def longest_subarray_with_k_distinct(nums, k): n = len(nums) if k == 0: return 0 left = 0 result = 0 freq_map = defaultdict(int) distinct_count = 0 for right in range(n): if freq_map[nums[right]] == 0: distinct_count += 1 freq_map[nums[right]] += 1 while distinct_count > k: freq_map[nums[left]] -= 1 if freq_map[nums[left]] == 0: distinct_count -= 1 left += 1 if distinct_count == k: result = max(result, right - left + 1) return result def solve(test_cases): results = [] for n, k, arr in test_cases: results.append(longest_subarray_with_k_distinct(arr, k)) return results"},{"question":"Taro and Jiro both have string collections. Taro\'s collection consists of N strings, and Jiro\'s collection consists of M strings. Each string in the collections consists of lowercase English letters. Taro and Jiro are interested in finding strings that are common in both collections. Write a function to help them identify all the strings that appear in both collections. Constraints * 1 ≦ N ≦ 2 times 10^5 * 1 ≦ M ≦ 2 times 10^5 * Each string length is between 1 and 100, inclusive. Input The input is given from Standard Input in the following format: N M s_1 s_2 : s_N t_1 t_2 : t_M Output Print all the strings that appear in both collections, each on a new line. The strings should be printed in lexicographical order. If there are no common strings, print a single line containing \\"-1\\". Examples Input 3 4 apple banana orange apple grape banana kiwi Output apple banana Input 2 3 cat dog elephant tiger lion Output -1","solution":"def find_common_strings(n, m, taro_list, jiro_list): Returns the common strings in both Taro\'s and Jiro\'s collections sorted lexicographically. taro_set = set(taro_list) jiro_set = set(jiro_list) common_strings = sorted(taro_set & jiro_set) if not common_strings: return [\\"-1\\"] return common_strings"},{"question":"You are given an array of positive integers. You need to find out the smallest possible difference between the maximum and minimum value that can be achieved by performing the following operation any number of times (including zero): - Choose any two elements from the array and replace them with their sum. Formally, choose indices i and j such that 1 leq i < j leq n, remove a_i and a_j from the array and insert a_i + a_j. Repeat this operation as many times as desired. For example, for the array [1, 2, 3, 4], you can choose i = 1 and j = 2 to get [3, 3, 4], and then choose i = 2 and j = 3 to get [3, 7]. Note that the size of the array reduces by 1 with every operation performed. Your task is to find the smallest possible difference between the maximum value and the minimum value in the array after any number of such operations. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of each test case contains an integer n (2 leq n leq 100) — the number of elements in the array. The second line of each test case contains n integers a_{1}, a_{2}, dots, a_{n} (1 leq a_{i} leq 100) — the elements of the array. -----Output----- For each test case, print one integer: the smallest possible difference between the maximum value and the minimum value in the array after performing any number of operations. -----Example----- Input 2 4 1 2 3 4 3 5 5 5 Output 0 0","solution":"def smallest_difference_after_operations(t, test_cases): Given the number of test cases and their respective arrays, returns a list of smallest possible differences between the maximum and minimum values after performing the operations. results = [] for _ in range(t): n, arr = test_cases[_] # Since the minimum difference we can achieve is when all elements are the same # The smallest possible difference will always be 0 results.append(0) return results"},{"question":"You are given an array of N integers and Q queries. Each query consists of two integers, L and R, which represent the indices of a subarray. The task is to count the number of distinct integers in each subarray specified by the queries. Input format The first line contains an integer N, denoting the number of elements in the array. The second line contains N integers, representing the elements of the array. The third line contains an integer Q, denoting the number of queries. Each of the next Q lines contains two integers L and R, denoting the starting and ending indices (inclusive) for each query. Output format For each query, output the number of distinct integers in the subarray [L, R]. Constraints 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N SAMPLE INPUT 5 1 2 1 3 2 3 1 3 2 4 3 5 SAMPLE OUTPUT 2 3 3 Explanation - For the first query (1, 3), the subarray is [1, 2, 1], which contains 2 distinct elements: {1, 2}. - For the second query (2, 4), the subarray is [2, 1, 3], which contains 3 distinct elements: {1, 2, 3}. - For the third query (3, 5), the subarray is [1, 3, 2], which contains 3 distinct elements: {1, 2, 3}.","solution":"def count_distinct_elements(arr, queries): Counts the number of distinct elements in the subarray specified by each query. Parameters: arr (list): The list of integers. queries (list): A list of tuples where each tuple consists of the start and end indices of the subarray (1-indexed). Returns: list: A list of the number of distinct elements in the subarray for each query. results = [] for L, R in queries: subarray = arr[L-1:R] distinct_count = len(set(subarray)) results.append(distinct_count) return results # Sample Input N = 5 arr = [1, 2, 1, 3, 2] Q = 3 queries = [(1, 3), (2, 4), (3, 5)] # Sample Output print(count_distinct_elements(arr, queries)) # Output: [2, 3, 3]"},{"question":"You are given a grid of size n × m consisting of \'X\' and \'O\' where \'X\' represents a blocked cell and \'O\' represents an open cell. You are required to find the minimum number of steps required to move from the top-left corner of the grid to the bottom-right corner. You are only allowed to move horizontally or vertically to an adjacent open cell. If there is no valid path, print -1. ------ Input ------ The first line contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers n and m, the number of rows and columns of the grid. The next n lines contain m characters each, representing the grid. ------ Output ------ For each test case, output a single line containing one integer - the minimum number of steps required to reach the bottom-right corner from the top-left corner. If there is no valid path, print -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n, m ≤ 100 The grid consists of only characters \'X\' and \'O\'. ----- Sample Input 1 ------ 2 3 3 OXO OXO OOO 4 4 OXOX XOOX OOXX OXOX ----- Sample Output 1 ------ 4 -1 ----- Explanation 1 ------ In the first test case, one of the possible shortest paths is: (0,0) → (0,1) → (1,1) → (2,1) → (2,2) which takes 4 steps. In the second test case, there is no valid path to reach the bottom-right corner. So, the output is -1.","solution":"from collections import deque def find_shortest_path(grid, n, m): if grid[0][0] == \'X\' or grid[n-1][m-1] == \'X\': return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 0)]) # Stores (row, col, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'O\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 def minimum_steps_to_exit(t, test_cases): results = [] for case in test_cases: n, m, grid = case result = find_shortest_path(grid, n, m) results.append(result) return results"},{"question":"# Task Given a rectangular matrix where each cell contains a positive integer, find the maximum element from each column and return them as a list. # Example: For `matrix=[[1, 2, 3], [4, 5, 6]]` The result should be `[4, 5, 6]`. For `matrix=[[10, 20, 30], [15, 25, 35], [5, 10, 15]]` The result should be `[15, 25, 35]`. # Input/Output - `[input]` 2D integer array `matrix` - A rectangular matrix of positive integers. - `[output]` integer array - A list of the maximum elements from each column.","solution":"def max_in_columns(matrix): Returns a list of the maximum elements from each column in the matrix. :param matrix: List of lists where each sublist represents a row in the matrix :return: List of integers representing the maximum elements from each column if not matrix or not matrix[0]: return [] num_cols = len(matrix[0]) max_elements = [float(\'-inf\')] * num_cols for row in matrix: for col_index in range(num_cols): if row[col_index] > max_elements[col_index]: max_elements[col_index] = row[col_index] return max_elements"},{"question":"Suppose you are tasked with implementing a task scheduling system for a company. Each task has a unique identifier, a start time, and an end time. To ensure efficiency, no two tasks should overlap in execution time. Your goal is to determine the maximum number of non-overlapping tasks that can be scheduled. A task is defined as a tuple `(id, start, end)` where `id` is a unique integer identifier, `start` is the start time, and `end` is the end time of the task. The start and end times are integers such that `start < end`. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of tasks. - The next `n` lines each contain three integers `id`, `start`, and `end` (0 ≤ start < end ≤ 10^7), representing the tasks. Output - Output a single integer, the maximum number of non-overlapping tasks that can be scheduled. Examples Input 4 1 1 4 2 2 6 3 4 7 4 5 8 Output 2 Input 3 1 3 5 2 1 4 3 2 6 Output 1 Note In the first example, the non-overlapping tasks that can be scheduled are (id=1, start=1, end=4) and (id=3, start=4, end=7) or (id=2, start=2, end=6) and (id=4, start=5, end=8). In the second example, only one task can be scheduled because all given tasks overlap in time.","solution":"def max_non_overlapping_tasks(n, tasks): Determine the maximum number of non-overlapping tasks. Parameters: n (int): The number of tasks. tasks (list): A list of tuples where each tuple contains (id, start, end). Returns: int: The maximum number of non-overlapping tasks. # Sort tasks by their end time tasks.sort(key=lambda x: x[2]) # Initialize variables count = 0 last_end_time = -1 # Iterate through sorted tasks for task in tasks: id, start, end = task if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given an array of integers. Your goal is to find the maximum possible product of a non-empty subarray. A subarray is a contiguous segment of an array. Since the product can be very large, the result should be returned modulo 1000000007 (10^9 + 7). -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the length of the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). -----Output----- Print a single integer, the maximum product of a non-empty subarray modulo 1000000007 (10^9 + 7). -----Examples----- Input 4 -2 0 -1 4 Output 4 Input 3 -1 -2 -3 Output 6 Input 5 1 -2 -3 4 -1 Output 24 -----Note----- In the first sample, the maximum product subarray is the single element [4]. In the second sample, the maximum product subarray is the entire array [-1, -2, -3], whose product is 6. In the third sample, the maximum product subarray is [1, -2, -3, 4], whose product is 24.","solution":"def max_subarray_product_modulo(n, arr): MOD = 1000000007 if n == 1: return arr[0] % MOD max_product = min_product = result = arr[0] for i in range(1, n): if arr[i] < 0: max_product, min_product = min_product, max_product max_product = max(arr[i], max_product * arr[i]) min_product = min(arr[i], min_product * arr[i]) result = max(result, max_product) return result % MOD"},{"question":"Complete the `findMedian` method which takes a list of integers and returns the median value. The median is defined as the middle number in a sorted list. If the list has an even number of elements, the median is the average of the two middle numbers. For example: ```python findMedian([5, 3, 1, 2, 4]) -> 3 findMedian([6, 8, 3, 4]) -> 5.0 ``` Note: - Do not use built-in sorting functions. - The input list contains at least one integer and has at most 10,000 integers.","solution":"def findMedian(nums): Returns the median of the list of integers. The median is the middle number in a sorted list. If the list has an even number of elements, the median is the average of the two middle numbers. This implementation does not use built-in sorting functions. def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i+1], arr[high] = arr[high], arr[i+1] return i + 1 def quickSelect(arr, low, high, k): if low == high: return arr[low] pivot_index = partition(arr, low, high) if k == pivot_index: return arr[k] elif k < pivot_index: return quickSelect(arr, low, pivot_index - 1, k) else: return quickSelect(arr, pivot_index + 1, high, k) n = len(nums) if n % 2 == 1: return quickSelect(nums, 0, n - 1, n // 2) else: left_middle = quickSelect(nums, 0, n - 1, n // 2 - 1) right_middle = quickSelect(nums, 0, n - 1, n // 2) return (left_middle + right_middle) / 2"},{"question":"Given a binary tree and an integer K, your task is to find the sum of all nodes that are at distance K from the root node. The distance of a node is the minimum number of edges it requires to reach the root node. Example 1: Input: 1 / 2 3 /| | 4 5 6 7 / 8 K = 2 Output: 22 Explanation: Nodes at distance 2 from the root are 4, 5, 6, and 7. Their sum is 4 + 5 + 6 + 7 = 22. Example 2: Input: 5 / 2 12 /| | 1 3 9 K = 1 Output: 14 Explanation: Nodes at distance 1 from the root are 2 and 12. Their sum is 2 + 12 = 14. Your Task: The task is to complete the function sumAtDistanceK() which takes the root of the binary tree and the integer K, and returns the sum of all nodes that are at distance K from the root. Constraints: 1 <= Number of nodes in the tree <= 10^4 0 <= Node values <= 10^3","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sumAtDistanceK(root, K): Function to compute the sum of nodes at distance K from root in a binary tree. if not root: return 0 current_level = 0 queue = [(root, 0)] sum_at_k = 0 while queue: node, level = queue.pop(0) if level == K: sum_at_k += node.value if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return sum_at_k"},{"question":"You are given an array of integers representing the height of each mountain in a sequence of mountains. Determine the largest possible perimeter of a triangle that can be formed by taking any three different mountains as its vertices. Return 0 if it is impossible to form any triangle with a positive area from the given mountains. Example: Input: 5 2 1 2 4 5 Output: 11 Explanation: The chosen mountains have heights 4, 5, and 2. The perimeter of this triangle is 4 + 5 + 2 = 11. Your Task: You don\'t need to read input or print anything. Your task is to complete the function largestPerimeter() which takes an integer n and an array heights, and returns the maximum perimeter of a triangle that can be formed with three different mountains from the given array. Expected Time Complexity: O(n log n) Expected Space Complexity: O(1) Constraints: 3 <= n <= 10^4 1 <= heights[i] <= 10^6","solution":"def largestPerimeter(n, heights): Returns the largest possible perimeter of a triangle that can be formed by taking any three different mountains as its vertices from the given heights array. # Sort the array in descending order heights.sort(reverse=True) # Iterate through the list and check for the triangle inequality condition for i in range(n - 2): if heights[i] < heights[i + 1] + heights[i + 2]: # Return the perimeter if the condition is satisfied return heights[i] + heights[i + 1] + heights[i + 2] # Return 0 if no valid triangle can be formed return 0"},{"question":"Elena has an array of n integers, and she enjoys calculating the sum of elements. However, she has an interesting way of choosing which segments of the array to sum. Elena wants to maximize the sum of exactly k consecutive elements chosen from this array. Can you help Elena find the maximum possible sum of k consecutive elements? -----Input----- The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 200,000) — the number of elements in the array and the length of the segment to sum. The second line of the input contains a sequence of n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), where a_i is the i-th element of the array. -----Output----- The only line of the output should contain a single integer — the maximum possible sum of k consecutive elements in the array. -----Examples----- Input 5 2 1 2 3 4 5 Output 9 Input 7 3 -1 -2 3 4 -1 2 1 Output 6 Input 5 5 1 1 1 1 1 Output 5 -----Note----- In the first sample, the maximum sum of any 2 consecutive elements is 4 + 5 = 9. In the second sample, the maximum sum of any 3 consecutive elements is 3 + 4 - 1 = 6. In the third sample, every segment of length 5 will have the sum 5.","solution":"def max_sum_of_k_consecutive_elements(n, k, arr): Returns the maximum possible sum of k consecutive elements in the array. Parameters: n (int): The number of elements in the array. k (int): The length of the segment to sum. arr (list of int): The list of n integers. Returns: int: The maximum possible sum of k consecutive elements. # Initial segment sum current_sum = sum(arr[:k]) max_sum = current_sum # Sliding window for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an integer `n`, find the smallest non-negative integer `x` such that the bitwise AND of `n` and `x` is zero, and the bitwise OR of `n` and `x` is the largest possible value. -----Input----- The only line contains one integer `n` (0 le n le 10^{18}). -----Output----- Print the smallest non-negative integer `x` that satisfies the condition. -----Examples----- Input 5 Output 2 Input 7 Output 8 Input 0 Output 1 Input 10 Output 5 -----Note----- In the first sample, the bitwise AND of 5 (binary `101`) and 2 (binary `010`) is zero, and the bitwise OR is binary `111` (decimal `7`), which is the maximum possible value for this operation. Therefore, 2 is the smallest value for `x` that satisfies the requirements. In the second sample, the bitwise AND of 7 (binary `111`) and 8 (binary `1000`) is zero, and the bitwise OR is binary `1111` (decimal `15`), which is the maximum possible value.","solution":"def smallest_x(n): Returns the smallest non-negative integer x such that (n & x) == 0 and (n | x) is the largest possible value. x = 1 while n & x: x *= 2 return x"},{"question":"One day, Clara decided to organize a race for her friends where each friend has to complete a series of checkpoints. After completing the race, Clara wants to determine the fastest time each checkpoint was reached. Can you help her with this? Input: First line of input contains T, the number of test cases. For each of the next T test cases, the first line contains two integers, N and M, representing the number of friends and the number of checkpoints respectively. The next N lines each contain M space-separated integers, where each integer represents the time (in seconds) taken by that friend to reach the corresponding checkpoint. Output: For each test case, output a single line containing M space-separated integers, where each integer represents the fastest time a checkpoint was reached by any friend. Constraints: 1 <= T <= 100 1 <= N <= 1000 1 <= M <= 10000 1 <= Time <= 10^6 Example: Input: 2 3 4 5 6 7 8 3 4 5 6 8 7 6 5 2 3 10 20 30 5 15 25 Output: 3 4 5 6 5 15 25 Explanation: In the first test case: - For the first checkpoint, the fastest time is 3 seconds (friend 2). - For the second checkpoint, the fastest time is 4 seconds (friend 2). - For the third checkpoint, the fastest time is 5 seconds (friend 2). - For the fourth checkpoint, the fastest time is 6 seconds (friend 2). In the second test case: - For the first checkpoint, the fastest time is 5 seconds (friend 1). - For the second checkpoint, the fastest time is 15 seconds (friend 1). - For the third checkpoint, the fastest time is 25 seconds (friend 1).","solution":"def fastest_checkpoint_times(test_cases): results = [] for case in test_cases: N, M, times = case[\\"N\\"], case[\\"M\\"], case[\\"times\\"] fastest_times = [float(\'inf\')] * M for i in range(N): for j in range(M): if times[i][j] < fastest_times[j]: fastest_times[j] = times[i][j] results.append(fastest_times) return results"},{"question":"You are given an array of integers representing the heights of buildings in a city skyline from left to right. If a person is standing on a building, they should be able to see the sunset in the west (left) if there are no taller buildings to their left blocking the view. Write a function that takes in such an array and returns the indices of buildings that can see the sunset. For example, given the array: ``` [7, 4, 8, 2, 9, 3, 11] ``` The buildings at indices `[0, 2, 4, 6]` can see the sunset, because: - Building at index 0 has a height of 7 and there are no buildings to its left. - Building at index 2 has a height of 8 and is taller than building at index 1 (height 4). - Building at index 4 has a height of 9 and is taller than buildings at indices 0, 1, 2, and 3. - Building at index 6 has a height of 11 and is taller than all buildings to its left. Implement the function to return the correct indices. Function signature: ```python def buildings_with_sunset_views(heights: List[int]) -> List[int]: pass ```","solution":"from typing import List def buildings_with_sunset_views(heights: List[int]) -> List[int]: Returns the indices of buildings that can see the sunset. # Initialize an empty list to store the result indices result = [] # Keep track of the maximum height encountered so far as we traverse from left to right max_height = -1 for i, height in enumerate(heights): if height > max_height: result.append(i) max_height = height return result"},{"question":"Given an integer array `arr[]` of size N and an integer K, write a function to find the number of distinct elements in every contiguous subarray of size K. Example 1: Input: arr[] = [1, 2, 1, 3, 4, 2, 3], K = 4 Output: [3, 4, 4, 3] Explanation: For the first subarray [1, 2, 1, 3], the distinct elements are 1, 2, and 3. For the second subarray [2, 1, 3, 4], the distinct elements are 2, 1, 3, and 4. For the third subarray [1, 3, 4, 2], the distinct elements are 1, 3, 4, and 2. For the fourth subarray [3, 4, 2, 3], the distinct elements are 3, 4, and 2. Example 2: Input: arr[] = [1, 2, 4, 4, 4, 2, 1, 4], K = 3 Output: [2, 2, 1, 1, 2, 2] Explanation: For the first subarray [1, 2, 4], the distinct elements are 1, 2, and 4. For the second subarray [2, 4, 4], the distinct elements are 2 and 4. For the third subarray [4, 4, 4], the only distinct element is 4. For the fourth subarray [4, 4, 2], the distinct elements are 4 and 2. For the fifth subarray [4, 2, 1], the distinct elements are 4, 2, and 1. For the sixth subarray [2, 1, 4], the distinct elements are 2, 1, and 4. Your Task: You don\'t need to read input or print anything. Complete the function `countDistinctInSubarrays` which takes the array arr[], its size N, and the integer K as input parameters and returns an array of integers representing the count of distinct elements in every contiguous subarray of size K. Expected Time Complexity: O(N) Expected Auxiliary Space: O(K) Constraints: 1 ≤ N, K ≤ 10^5 1 ≤ arr[i] ≤ 10^6","solution":"def countDistinctInSubarrays(arr, N, K): Returns a list with the number of distinct elements in every contiguous subarray of size K. if K > N: return [] # If K is larger than the array size, return an empty list result = [] freq_map = {} # Initialize frequency map with first K elements for i in range(K): if arr[i] in freq_map: freq_map[arr[i]] += 1 else: freq_map[arr[i]] = 1 # Add the count of distinct elements in the first window result.append(len(freq_map)) # Slide the window over the array for i in range(K, N): # Remove the frequency of the element going out of the window if arr[i - K] in freq_map: if freq_map[arr[i - K]] == 1: del freq_map[arr[i - K]] else: freq_map[arr[i - K]] -= 1 # Add the frequency of the new element coming into the window if arr[i] in freq_map: freq_map[arr[i]] += 1 else: freq_map[arr[i]] = 1 # Add the count of distinct elements for the current window result.append(len(freq_map)) return result"},{"question":"You are given a binary tree with N nodes, and you need to determine if there is a way to assign a positive integer weight to each edge such that the following conditions are met: 1. For any two nodes in the tree, the path between them has a unique weight. 2. If such an assignment is possible, print one valid assignment of weights; otherwise, print `-1`. Constraints * 2 ≤ N ≤ 100,000 * Each node is uniquely identified by an integer from 1 to N. Input The input will be provided in the following format: ``` N U_1 V_1 U_2 V_2 ... U_(N-1) V_(N-1) ``` Where `N` is the number of nodes in the tree, and each `U_i V_i` line represents an edge between nodes U_i and V_i. Output The output should either be `-1` if no unique assignment exists, or: ``` C_1 C_2 ... C_(N-1) ``` Where each `C_i` is the weight assigned to the edge corresponding to `U_i V_i` in the input. Examples Input ``` 4 1 2 2 3 3 4 ``` Output ``` 1 2 3 ``` Input ``` 3 1 2 2 3 4 2 ``` Output ``` -1 ``` Input ``` 5 1 2 1 3 3 4 3 5 ``` Output ``` 1 2 3 4 ``` Note: Weights assigned should ensure that no two different paths in the tree have the same total weight.","solution":"def assign_weights(N, edges): Assign positive integer weights to each edge of the tree such that the weight of the path between any two nodes is unique. # If the number of nodes is greater than 1, assign weights 1 to N-1 to the edges if N < 2: return -1 # Assign weights 1 to N-1 to the edges edge_weights = list(range(1, N)) return edge_weights"},{"question":"Amelia is a budding software developer who loves puzzles. She recently found a peculiar problem which intrigued her. The problem statement is as follows: Given a binary string S consisting of \'0\'s and \'1\'s, you need to find and count the number of substrings which start and end with the same character. Write a program that processes multiple test cases and returns the count of such substrings for each test case. INPUT The first line contains an integer T, the number of test cases. Each of the next T lines contains a binary string S. OUTPUT For each test case, print the count of substrings that start and end with the same character in a new line. CONSTRAINTS 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 S consists of only \'0\'s and \'1\'s. SAMPLE INPUT 3 10101 11111 000 SAMPLE OUTPUT 9 15 6 Explanation Test Case 1: The valid substrings are \\"1\\", \\"0\\", \\"1\\", \\"0\\", \\"1\\", \\"101\\", \\"010\\", \\"101\\", \\"1\\" which sums up to 9. Test Case 2: The valid substrings are all possible substrings starting and ending with \'1\'. There are 15 such substrings. Test Case 3: All possible substrings start and end with \'0\'. There are 6 such substrings.","solution":"def count_substrings(t, test_cases): result = [] for s in test_cases: count_0, count_1 = s.count(\'0\'), s.count(\'1\') total_substrings = (count_0 * (count_0 + 1) // 2) + (count_1 * (count_1 + 1) // 2) result.append(total_substrings) return result"},{"question":"Sarah is designing a street festival that will be held on a grid of streets and avenues. Each intersection is represented by a pair of coordinates (x, y) where x is the street number and y is the avenue number. The city has provided her with data on where various stalls will be set up, and she needs to ensure that none of the stalls end up on the same intersection. Given the coordinates of the intersections where stalls will be set up, determine if there is any overlap in their positions. -----Input----- The first line of input contains an integer n (1 leq n leq 10^5), the number of stalls. Each of the next n lines contains a pair of integers x and y (0 leq x, y leq 10^6), representing the coordinates of the intersection where a stall will be set up. -----Output----- Output a single line with the word \\"YES\\" if any two stalls share the same coordinates. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 5 0 0 1 2 3 4 0 2 1 2 Sample Output 1: YES Sample Input 2: 3 1 1 2 2 3 3 Sample Output 2: NO","solution":"def has_overlapping_stalls(n, coordinates): Determines if any two stalls share the same coordinates. Args: n (int): The number of stalls. coordinates (list of tuples): List of tuples where each tuple represents (x, y) coordinates of a stall. Returns: str: \\"YES\\" if there are overlapping coordinates, \\"NO\\" otherwise. visited = set() for coordinate in coordinates: if coordinate in visited: return \\"YES\\" visited.add(coordinate) return \\"NO\\""},{"question":"You are given an array arr of n non-negative integers. Your task is to find the largest subarray that contains at most k distinct integers. If there are multiple subarrays with the same length, output the one that starts at the smallest index. If the array is empty or k is 0, the result should be an empty array. -----Input:----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains two integers n and k. - The second line of each test case contains n non-negative integers representing the array arr. -----Output:----- For each test case, output the largest subarray containing at most k distinct integers. If there are multiple subarrays with the same length, output the one that starts at the smallest index. -----Constraints:----- - 1 leq T leq 100 - 1 leq n leq 1000 - 0 leq arr[i] leq 10^6 - 0 leq k leq n -----Sample Input:----- 3 7 2 1 2 1 2 3 4 2 5 1 1 2 3 4 5 3 3 2 1 3 -----Sample Output:----- 1 2 1 2 1 2 1 3","solution":"def largest_subarray_with_k_distinct(T, test_cases): results = [] for i in range(T): n, k = test_cases[i][0] arr = test_cases[i][1] if n == 0 or k == 0 or len(arr) == 0: results.append([]) continue max_len = 0 start = 0 subarray = [] left = 0 counts = {} for right in range(n): counts[arr[right]] = counts.get(arr[right], 0) + 1 while len(counts) > k: counts[arr[left]] -= 1 if counts[arr[left]] == 0: del counts[arr[left]] left += 1 if right - left + 1 > max_len: max_len = right - left + 1 start = left subarray = arr[start:right+1] results.append(subarray) return results"},{"question":"Given a sequence A of length N consisting of integers from the range [1, N], perform the following operation: * Choose any two indices i and j (1 <= i, j <= N) such that A[i] > A[j] and swap A[i] and A[j]. Determine the minimum number of operations to sort the sequence in non-decreasing order. If it\'s not possible to sort the sequence using the given operation, return -1. Constraints * 1 <= N <= 1000 * All values in input are integers. Input The input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the minimum number of operations required to sort the sequence in non-decreasing order. If it\'s not possible to sort the sequence using the given operation, print -1. Examples Input 5 5 3 1 4 2 Output 4 Input 3 1 2 3 Output 0 Input 4 4 3 2 1 Output 6","solution":"def min_operations_to_sort_sequence(N, A): Returns the minimum number of operations to sort the sequence A in non-decreasing order, or -1 if it\'s not possible using the given operations. # Use a simplified version of bubble sort to count the number of inversions # since we can only swap elements that are out of order (a[i] > a[j]) inversion_count = 0 for i in range(N): for j in range(i + 1, N): if A[i] > A[j]: inversion_count += 1 return inversion_count # Example usage: # N = 5 # A = [5, 3, 1, 4, 2] # print(min_operations_to_sort_sequence(N, A)) # Output: 4"},{"question":"Alex is building a toy library system where students can borrow toys for a certain duration. He needs a program that helps keep track of toy stock and borrowed durations, and calculates the restocking priority based on the remaining stock and return dates. Each toy has a unique ID, a name, and a stock count. Alex wants to ensure that toys which are borrowed out the most critical (either because they are frequently borrowed or because their stock is low and their return is far off) are restocked first. Input: The first line contains an integer t (1 ≤ t ≤ 100) representing the number of toys. Each of the next t lines contains: * a string id of the toy (length ≤ 10, unique for each toy) * a string name of the toy (length ≤ 20) * an integer representing the current stock of the toy (0 ≤ stock ≤ 100) * an integer representing the total number of times the toy has been borrowed (0 ≤ total_borrow_count ≤ 1000) * an integer representing the days until the next return of this toy (1 ≤ days_until_return ≤ 365) Output: Print the IDs of the toys sorted by restocking priority in descending order. The priority should be calculated as: [ text{priority} = text{total_borrow_count} times (365 - text{days_until_return}) - text{stock} ] Toys with a higher priority number should come first. If two toys have the same priority, their order of appearance in the input should be preserved. SAMPLE INPUT 3 T001 TeddyBear 5 200 30 T002 LegoSet 2 100 15 T003 Puzzle 0 300 60 SAMPLE OUTPUT T003 T001 T002 Explanation The priority is calculated using the provided formula. For each toy: - TeddyBear: (200 times (365 - 30) - 5 = 200 times 335 - 5 = 66995) - LegoSet: (100 times (365 - 15) - 2 = 100 times 350 - 2 = 34998) - Puzzle: (300 times (365 - 60) - 0 = 300 times 305 - 0 = 91500) Puzzle has the highest priority, followed by TeddyBear and then LegoSet. Hence they are printed in the order T003, T001, and T002.","solution":"def restocking_priority(toys): Calculates the restocking priority for the given list of toys and returns the toy IDs sorted by priority. :param toys: List of tuples containing toy information (ID, name, stock, borrow count, days until return) :return: List of toy IDs sorted by restocking priority priorities = [] for toy in toys: toy_id, toy_name, stock, total_borrow_count, days_until_return = toy priority = total_borrow_count * (365 - days_until_return) - stock priorities.append((priority, toy_id, toy)) # Sort by priority (descending). If priorities are the same, preserve the input order priorities.sort(key=lambda x: (-x[0], toys.index(x[2]))) return [toy_id for _, toy_id, _ in priorities] # Example usage: if __name__ == \\"__main__\\": toys = [ (\\"T001\\", \\"TeddyBear\\", 5, 200, 30), (\\"T002\\", \\"LegoSet\\", 2, 100, 15), (\\"T003\\", \\"Puzzle\\", 0, 300, 60) ] print(restocking_priority(toys))"},{"question":"You are given an array of integers. Your task is to partition this array into contiguous subarrays in such a way that each subarray is strictly increasing and the number of partitions is minimized. Constraints: - 1 ≤ |A| ≤ 100 - -10⁴ ≤ A[i] ≤ 10⁴ for all 1 ≤ i ≤ |A| Input: Input is given from Standard Input in the following format: n A₁ A₂ ... Aₙ Output: Output the minimum number of partitions needed so that each partition is a contiguous subarray that is strictly increasing. Examples: Input 5 1 2 3 4 5 Output 1 Input 6 5 1 3 2 4 6 Output 3 Input 4 4 3 2 1 Output 4","solution":"def min_partitions_to_increasing_subarrays(n, A): Returns the minimum number of partitions needed so that each partition is a contiguous subarray that is strictly increasing. if n <= 1: return n partitions = 1 for i in range(1, n): if A[i] <= A[i - 1]: partitions += 1 return partitions"},{"question":"Diana is planning to climb a staircase that consists of N steps. She can either take one step, two steps, or three steps at a time. The task is to count how many distinct ways Diana can reach the top of the staircase. Write a program to compute the number of ways given N, which is the total number of steps in the staircase. Constraints: * 1 ≤ N ≤ 10^5 Input The input is given from Standard Input in the following format: N Output Print the number of distinct ways to reach the top of the staircase. Examples Input 3 Output 4 Input 5 Output 13","solution":"def count_ways(n): Returns the number of distinct ways to reach the top of a staircase with n steps, where one can take 1, 2, or 3 steps at a time. if n == 0: return 0 if n == 1: return 1 if n == 2: return 2 if n == 3: return 4 ways = [0] * (n + 1) ways[1] = 1 ways[2] = 2 ways[3] = 4 for i in range(4, n + 1): ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3] return ways[n]"},{"question":"Write a program to simulate a simple task scheduling system. Given a set of tasks where each task has a name, a required time in minutes, and a priority level (1 being the highest priority and 3 being the lowest), the program will schedule the tasks based on the following rules: 1. Tasks with the highest priority (priority 1) should be executed first. If there are multiple tasks with the same priority, they should be scheduled based on their required time in ascending order. 2. Once there are no more tasks with higher priorities, the next lower priority tasks are scheduled following the same rule. 3. If tasks have the same priority and required time, they should appear in the output in the same order as they were given in the input. Your program should be able to handle up to 100,000 tasks efficiently. Constraints * 1 ≤ n ≤ 100,000 * 1 ≤ time ≤ 100 * Priority levels are fixed at 1, 2, and 3 Input The first line contains an integer n, the number of tasks. The following n lines describe each task. Each line contains a string representing the task name, an integer denoting the required time, and an integer for the priority, all separated by a single space. Output Print the tasks in the order they should be executed, each task on a new line. Examples Input 5 TaskA 30 1 TaskB 20 2 TaskC 10 1 TaskD 40 3 TaskE 10 2 Output TaskC 10 1 TaskA 30 1 TaskE 10 2 TaskB 20 2 TaskD 40 3 Input 3 TaskX 10 3 TaskY 20 3 TaskZ 10 1 Output TaskZ 10 1 TaskX 10 3 TaskY 20 3","solution":"def schedule_tasks(n, tasks): Schedule the tasks based on the given priority and required time rules. Parameters: n (int): Number of tasks tasks (list of tuples): Each tuple contains task name (str), required time (int), and priority (int) Returns: list: Scheduled tasks based on the specified rules # Sort tasks by priority (ascending), then required time (ascending), then by input order sorted_tasks = sorted(tasks, key=lambda x: (x[2], x[1])) return sorted_tasks"},{"question":"Bobby is fascinated by arrays and their properties. He has an array `a` of length `n` and he wants to explore different ranges within the array, performing some interesting operations on each range. Specifically, Bobby is interested in the following process: * He selects a range (l, r) from the array. * From this selected subarray, he wants to find the maximum sum of any of its subarrays (a subarray can be empty). As Bobby has `q` different queries regarding various ranges of his array, your task is to help him determine the maximum subarray sum for each given range. Input The first line contains two integers `n` and `q` (1 ≤ `n`, `q` ≤ 10^5) — the length of the array `a` and the number of queries. The second line contains `n` integers `a_1`, `a_2`, …, `a_n` (-10^5 ≤ `a_i` ≤ 10^5) — the elements of the array `a`. Each of the next `q` lines contains two integers `l` and `r` (1 ≤ `l` ≤ `r` ≤ `n`) — the endpoints of the current query\'s interval. Output For each query (l, r), print the maximum subarray sum within this range on a new line. Example Input 7 3 -2 1 -3 4 -1 2 1 1 7 2 4 3 5 Output 6 4 4 Note For the first query, the range selected is the whole array. The maximum subarray sum is obtained from [4, -1, 2, 1] which sums to 6. For the second query, the range is (2,4). The maximum subarray sum is derived from [1] which sums to 1. For the third query, the range is (3,5). The maximum subarray sum is derived from [4] which sums to 4. Help Bobby by implementing the solution to determine the maximum subarray sum for each of his queries.","solution":"def max_subarray_sum_within_range(n, q, a, queries): def kadane(arr): # Implementation of Kadane\'s algorithm to find the maximum subarray sum in `arr` max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max(0, max_global) # returning 0 for empty subarray case results = [] for l, r in queries: subarray = a[l-1:r] # extract subarray as array indices are 1-based results.append(kadane(subarray)) # find and store the maximum subarray sum return results"},{"question":"The Turtle Inc. is developing a new compression algorithm and wants to test it on various types of sequences. The compression algorithm splits the original sequence into disjoint subsequences of equal length and replaces each subsequence with its average value, followed by the number of elements in the subsequence. Given a sequence of integers and a positive integer k (where k divides the length of the sequence), help Turtle Inc. to implement this algorithm. For each subsequence of length k, compute its average value (ignore the fractional part) and the number of elements in it, and replace the subsequence with these two values. Input The first input line contains two integers \'n\' and \'k\', separated by a single space. The second input line contains \'n\' integers \'ai\', separated by single spaces — the original sequence. It is guaranteed that k divides n. Output Print the compressed sequence of \'n\' integers. Examples Input 8 2 10 20 30 40 50 60 70 80 Output 15 2 35 2 55 2 75 2 Input 6 3 5 5 5 10 10 10 Output 5 3 10 3 Note In the first sample, the sequence is processed as follows: The first subsequence (10, 20) is replaced by (15, 2), where 15 is the average of 10 and 20, and 2 is the number of elements. The second subsequence (30, 40) is replaced by (35, 2), and so forth. In the second example, the sequence is processed as follows: The first subsequence (5, 5, 5) is replaced by (5, 3). The second subsequence (10, 10, 10) is replaced by (10, 3).","solution":"def compress_sequence(n, k, sequence): Compresses the sequence based on the given subsequence length k. Parameters: n (int): Total number of elements in the sequence. k (int): Length of each subsequence. sequence (list): The original sequence of integers. Returns: list: The compressed sequence. compressed_sequence = [] for i in range(0, n, k): subsequence = sequence[i:i + k] avg_value = sum(subsequence) // k compressed_sequence.extend([avg_value, k]) return compressed_sequence"},{"question":"-----Problem Statement----- Bob is learning about binary trees in his data structures class. He is particularly interested in finding the lowest common ancestor (LCA) of two nodes in a binary tree. The LCA of two nodes p and q in a binary tree is defined as the lowest node in the tree that has both p and q as descendants. A node x is a descendant of y if y lies on the path from x to the root. Bob asks for your help in writing a program that finds the LCA of two given nodes in a binary tree. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the number of nodes in the binary tree. Each of the next N lines contains two integers, indicating the left and right children of a node in the binary tree. For each node i (1 ≤ i ≤ N), the ith line will contain the index of the left child followed by the index of the right child. If a node has no left or right child, it will be represented by -1. The last line of each test case contains two integers p and q, representing the nodes for which Bob wants to find the LCA. -----Output----- For each test case, output a single line containing the index of the LCA of the given nodes p and q. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1,000 - 1 ≤ p, q ≤ N - Each test case describes a valid binary tree. -----Example----- Input: 2 5 2 3 -1 -1 4 5 -1 -1 -1 -1 4 5 6 2 3 -1 -1 4 5 -1 6 -1 -1 -1 -1 1 5 Output: 1 1 -----Explanation----- Example case 1. The first tree can be visualized as follows: 1 / 2 3 / 4 5 The LCA of nodes 4 and 5 is 3. Example case 2. The second tree can be visualized as follows: 1 / 2 3 / 4 5 6 The LCA of nodes 1 and 5 is the root node, which is 1.","solution":"class TreeNode: TreeNode represents a node in a binary tree. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): Build a binary tree from the nodes representation. if not nodes: return None tree_nodes = {i: TreeNode(i) for i in range(1, len(nodes) + 1)} for i, (left, right) in enumerate(nodes, 1): if left != -1: tree_nodes[i].left = tree_nodes[left] if right != -1: tree_nodes[i].right = tree_nodes[right] return tree_nodes[1] def find_lca(root, p, q): Finds the Lowest Common Ancestor (LCA) of two nodes in a binary tree. if not root or root.val == p or root.val == q: return root left = find_lca(root.left, p, q) right = find_lca(root.right, p, q) if left and right: return root return left if left else right def lca_in_binary_tree(T, test_cases): results = [] for case in test_cases: N, nodes, p, q = case root = build_tree(nodes) lca_node = find_lca(root, p, q) results.append(lca_node.val if lca_node else None) return results"},{"question":"You are a software engineer tasked with analyzing sequences of strings representing events. Each event string can represent either an \\"entry\\" or an \\"exit\\" action. Your goal is to ensure that every \\"exit\\" event has a corresponding \\"entry\\" event that occurred before it. Given an array of strings where each string is either \\"entry\\" or \\"exit\\", determine if the sequence of events is valid. A valid sequence means: 1. Every \\"exit\\" event must have had a preceding \\"entry\\" event. 2. The number of \\"exit\\" events should never exceed the number of \\"entry\\" events at any point in the sequence. Write a function `is_valid_sequence(events: List[str]) -> bool` that returns `True` if the sequence is valid, and `False` otherwise. # Constraints: * The length of the events array will be between 1 and 10^5. * Each element in the events array will either be \\"entry\\" or \\"exit\\". # Input: * A list of strings where each string is either \\"entry\\" or \\"exit\\". # Output: * A single boolean, `True` if the sequence is valid, `False` otherwise. # Example 1: **Input:** ```python [\\"entry\\", \\"exit\\", \\"entry\\", \\"exit\\"] ``` **Output:** ```python True ``` # Example 2: **Input:** ```python [\\"exit\\", \\"entry\\"] ``` **Output:** ```python False ``` # Example 3: **Input:** ```python [\\"entry\\", \\"entry\\", \\"exit\\"] ``` **Output:** ```python True ``` # Example 4: **Input:** ```python [\\"entry\\", \\"exit\\", \\"exit\\"] ``` **Output:** ```python False ```","solution":"from typing import List def is_valid_sequence(events: List[str]) -> bool: entry_count = 0 for event in events: if event == \\"entry\\": entry_count += 1 elif event == \\"exit\\": if entry_count == 0: return False entry_count -= 1 return True"},{"question":"Given a list of non-negative integers, determine the most frequent element in the list. If there are multiple elements with the same highest frequency, return the smallest one. Write a function that reads the list of integers from the input, calculates the most frequent element, and returns it. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains an integer n (1 ≤ n ≤ 1000) followed by a list of n non-negative integers (0 ≤ integer ≤ 100). Output For each test case, print the most frequent element in the list on a new line. Example Input 3 6 1 2 3 2 3 3 5 2 2 3 3 4 4 1 1 2 2 Output 3 2 1 Explanation - In the first test case, `3` appears most frequently (3 times). - In the second test case, both `2` and `3` appear twice, but `2` is the smallest. - In the third test case, both `1` and `2` appear twice, but `1` is the smallest.","solution":"def most_frequent_element(test_cases): Given a list of non-negative integers for each test case, determine the most frequent element in the list. If there are multiple elements with the same highest frequency, return the smallest one. Args: - test_cases (list of tuple): Each tuple contains an integer n and a list of n non-negative integers. Returns: - list: List of most frequent elements for each test case. from collections import Counter results = [] for case in test_cases: n, numbers = case count = Counter(numbers) max_frequency = max(count.values()) most_frequent_elements = [num for num, freq in count.items() if freq == max_frequency] results.append(min(most_frequent_elements)) return results def process_input(input_str): Process the input string and convert it to the format needed for the most_frequent_element function. Args: - input_str (str): Multiline string input taken from the user. Returns: - list of tuples: Each tuple contains an integer n and a list of n non-negative integers. input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] for i in range(1, t + 1): current_line = list(map(int, input_lines[i].split())) n = current_line[0] numbers = current_line[1:] test_cases.append((n, numbers)) return test_cases def main(input_str): test_cases = process_input(input_str) return most_frequent_element(test_cases)"},{"question":"You are given a list of non-negative integers. For each integer in the list, you need to determine the length of the Collatz sequence starting with that integer. The Collatz sequence is defined as follows: - Start with any integer n. - If n is even, divide it by 2. - If n is odd, multiply it by 3 and add 1. - Repeat the process with the new value of n until n becomes 1. Your task is to write a program that reads a sequence of integers and prints the length of the Collatz sequence for each integer. Input The input is a sequence of non-negative integers, each separated by a newline. The end of the input is indicated by a line containing one zero. Output For each integer in the input, print the length of the corresponding Collatz sequence. Example Input 1 2 3 5 10 0 Output 1 2 8 6 7","solution":"def collatz_sequence_length(n): Returns the length of the Collatz sequence starting with n. length = 1 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 length += 1 return length def process_collatz_sequences(numbers): Processes a list of numbers and returns list of lengths of their Collatz sequences. results = [] for number in numbers: if number == 0: break results.append(collatz_sequence_length(number)) return results"},{"question":"Given an array A consisting of N integers, your task is to replace each element in the array with the greatest element among the elements to its right, and replace the last element with -1. Your function should modify the array in-place and return the modified array. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the size of the array. - The second line contains N space-separated integers representing the elements of the array A. ------ Output Format ------ For each test case, output N space-separated integers representing the modified array A. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^6 ----- Sample Input 1 ------ 2 6 16 17 4 3 5 2 4 10 5 3 2 ----- Sample Output 1 ------ 17 5 5 5 2 -1 5 3 2 -1 ----- explanation 1 ------ Test case 1: - Replace the first element 16 with the maximum value 17 among the elements to its right. - Replace the second element 17 with the maximum value 5 among the elements to its right. - Replace the third element 4 with the maximum value 5 among the elements to its right. - Replace the fourth element 3 with the maximum value 5 among the elements to its right. - Replace the fifth element 5 with the maximum value 2 among the elements to its right. - Replace the last element with -1. Test case 2: - Replace the first element 10 with the maximum value 5 among the elements to its right. - Replace the second element 5 with the maximum value 3 among the elements to its right. - Replace the third element 3 with the maximum value 2 among the elements to its right. - Replace the last element with -1.","solution":"def replace_with_greatest_right(arr): n = len(arr) max_from_right = -1 # Traverse the array from right to left for i in range(n - 1, -1, -1): # Store the current element current = arr[i] # Replace current element with the max from right arr[i] = max_from_right # Update the max from right if current > max_from_right: max_from_right = current return arr def process_test_cases(test_cases): results = [] for case in test_cases: N, A = case results.append(replace_with_greatest_right(A)) return results"},{"question":"A company is analyzing the performance of its software by collecting information on the time various methods take to execute. Given a list of integers where each integer represents the execution time of a method, write a function that finds the maximum sum of any subsequence of the list such that no two consecutive elements are included in the sum. Input: An integer n representing the number of execution times followed by a list of n integers. Output: The maximum sum of non-consecutive elements in the list. Example: Input: 5 3 2 7 10 12 Output: 22","solution":"def max_non_consecutive_sum(n, times): if n == 0: return 0 elif n == 1: return times[0] # Initialize the max_sum array where max_sum[i] is the maximum sum without consecutive elements up to index i max_sum = [0] * n max_sum[0] = times[0] max_sum[1] = max(times[0], times[1]) for i in range(2, n): max_sum[i] = max(max_sum[i-1], max_sum[i-2] + times[i]) return max_sum[-1]"},{"question":"You are given an integer array `arr` of length `n` and a target sum `S`. Your task is to find the number of distinct pairs of elements in the array that sum up to `S`. A pair `(arr[i], arr[j])` is considered distinct if `i != j`. Implement a function `count_pairs` with the following signature: ```python def count_pairs(arr: List[int], S: int) -> int: ``` # Input - The first line contains one integer `n` (1 leq n leq 10^5), which is the length of the array. - The second line contains `n` integers separated by spaces, representing the elements of the array `arr` (0 leq arr[i] leq 10^9 for each valid `i). - The third line contains one integer S (0 leq S leq 2 times 10^9). # Output - Print the number of distinct pairs `(arr[i], arr[j])` that sum up to `S`. # Examples Example 1 # Input ``` 4 1 5 7 1 6 ``` # Output ``` 2 ``` # Explanation There are two pairs that sum up to `6`: `(1, 5)` and `(5, 1)`. Since the order of elements in the pair does not matter and the indices must be different, the pairs `(1, 5)` and `(5, 1)` count as one. Example 2 # Input ``` 5 1 2 3 4 5 9 ``` # Output ``` 1 ``` # Explanation There is only one pair that sums up to `9`: `(4, 5)`. Example 3 # Input ``` 3 1 1 1 2 ``` # Output ``` 3 ``` # Explanation There are three distinct pairs of `(1, 1)` which sum up to 2. # Notes - You should handle the input and output directly using standard input and output. - The answer should be based on the number of distinct pairs. Do not count the same pair more than once.","solution":"def count_pairs(arr, S): from collections import defaultdict # count the occurrences of each number in the array counts = defaultdict(int) for num in arr: counts[num] += 1 # count the distinct pairs distinct_pairs = 0 for num in counts: complement = S - num if complement in counts: if complement == num: # if complement is the same as num, we need at least two instances distinct_pairs += (counts[num] * (counts[num] - 1)) // 2 elif num < complement: # ensure we only count each pair once distinct_pairs += counts[num] * counts[complement] return distinct_pairs"},{"question":"Jane is working on a problem where she needs to modify an array of integers according to certain operation rules. Given an array a of length n, she can perform two types of operations: 1. Increment operation: Increase any element a_i by 1. 2. Decrement operation: Decrease any element a_i by 1. Jane\'s goal is to make all the elements of the array equal using the minimum number of operations. Please help Jane to determine this minimum number of operations. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. For each test case, the first line contains one integer n (1 le n le 10^5) — the length of the array a. The second line contains n integers a_1, a_2, a_3, ldots, a_n (1 le a_i le 10^9) — the array a itself. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the minimum number of operations required to make all the elements of the array equal. -----Examples----- Input 4 3 1 2 3 2 2 4 5 5 5 5 5 5 4 1 2 2 1 Output 2 2 0 2 -----Note----- In the first test case, for the array [1, 2, 3], you can make all the elements equal to 2 by performing two operations: increase 1 to 2 and decrease 3 to 2. In the second test case, for the array [2, 4], you can make all the elements equal to 3 by performing two operations: increase 2 to 3 and decrease 4 to 3. In the third test case, the array is already uniform, so no operations are needed. In the fourth test case, for the array [1, 2, 2, 1], you can make all the elements equal to 2 by performing two operations: increase 1 to 2 twice.","solution":"def min_operations_needed(test_cases): results = [] for case in test_cases: n = case[0] a = case[1] median = sorted(a)[n // 2] # median minimizes the sum of absolute deviations operations = sum(abs(x - median) for x in a) results.append(operations) return results"},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n where all integers are positive. You need to determine if there exists an index k (1 leq k leq n-1) such that the sum of the first k elements is equal to the sum of the remaining elements. If there exist multiple indices k that satisfy the given condition, print the smallest. -----Input----- The first line contains a single integer t (1 leq t leq 100), the number of test cases. For each test case, the first line contains one integer n (2 leq n leq 1000), which is the length of the sequence. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4). -----Output----- For each test case, if there is no such index k, print -1. Otherwise, print the smallest possible index k. -----Examples----- Input 2 5 1 2 3 0 6 4 1 1 1 1 Output 3 2 -----Note----- For the first test case, the index k=3 satisfies the condition since the sum of the first three elements 1 + 2 + 3 = 6 equals the sum of the last two elements 0 + 6 = 6. For the second test case, the index k=2 satisfies the condition since the sum of the first two elements 1 + 1 = 2 equals the sum of the last two elements 1 + 1 = 2. The sum condition also holds for k=1 and k=3, but the smallest index k should be printed.","solution":"def find_balance_index(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] total_sum = sum(a) left_sum = 0 found_index = -1 for k in range(n-1): left_sum += a[k] if left_sum == total_sum - left_sum: found_index = k + 1 break results.append(found_index) return results"},{"question":"In a land far away, there exists a magical garden that follows a strict numerical order. The garden consists of N magical flowers arranged in a single line, where each flower has a unique magical power assigned to it, represented by an integer. However, to enhance its beauty, the gardener has decided to rearrange the flowers so that the sequence of their magical powers is in non-decreasing order. To achieve this, the gardener can perform a series of operations. In each operation, the gardener can select any two flowers and swap their positions. The gardener wants to know the minimum number of swap operations required to arrange the flowers in non-decreasing order. ------ Input ------ The first line contains an integer T, the number of test cases. The description of each test case follows. Each test case starts with an integer N, denoting the number of magical flowers. The next line contains N integers, where the i-th integer represents the magical power of the i-th flower. ------ Output ------ For each test case, output a single line containing the minimum number of swaps required to sort the flowers in non-decreasing order. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 1 ≤ Magical Power ≤ 10^6 ----- Sample Input 1 ------ 2 5 2 3 1 5 4 3 3 1 2 ----- Sample Output 1 ------ 3 2 ----- Explanation 1 ------ Test Case 1: One possible sequence of swaps to arrange the flowers in non-decreasing order is: Swap (2, 1) -> 2 1 3 5 4 Swap (3, 1) -> 1 2 3 5 4 Swap (5, 4) -> 1 2 3 4 5 Thus the minimum number of swaps required is 3. Test Case 2: One possible sequence of swaps to arrange the flowers in non-decreasing order is: Swap (3, 1) -> 1 3 2 Swap (3, 2) -> 1 2 3 Thus the minimum number of swaps required is 2.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps needed to sort the array in non-decreasing order. n = len(arr) arrpos = [(i, arr[i]) for i in range(n)] arrpos.sort(key=lambda it: it[1]) vis = {i: False for i in range(n)} swaps = 0 for i in range(n): if vis[i] or arrpos[i][0] == i: continue cycle_size = 0 x = i while not vis[x]: vis[x] = True x = arrpos[x][0] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps def solve_magic_garden(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(min_swaps_to_sort(arr)) return results"},{"question":"John has a list of tasks, where each task has a unique ID represented by an integer. He needs to complete all these assigned tasks without any gaps in their IDs. In other words, he needs to arrange and complete the tasks such that every consecutive integer ID is covered once. Write a function that determines if it is possible to arrange John\'s tasks as a consecutive sequence of IDs with no gaps. Example 1: Input: tasks = [3, 2, 1, 4, 5] Output: true Explanation: John\'s tasks can be rearranged as [1, 2, 3, 4, 5]. Example 2: Input: tasks = [1, 3, 2, 5] Output: false Explanation: The IDs 4 and 6 are missing, so it is not possible to have a consecutive sequence. Example 3: Input: tasks = [7, 1, 2, 4] Output: false Explanation: The IDs 3, 5, and 6 are missing, so it is not possible to have a consecutive sequence. Constraints: 1 <= tasks.length <= 1000 1 <= tasks[i] <= 1000","solution":"def can_arrange_consecutive(tasks): Determines if it is possible to arrange the tasks as a consecutive sequence of IDs with no gaps. Parameters: tasks (list of int): The list of task IDs. Returns: bool: True if it is possible to arrange tasks consecutively, False otherwise. if not tasks: return False min_id = min(tasks) max_id = max(tasks) expected_length = max_id - min_id + 1 actual_length = len(tasks) # Check if there are no gaps and the number of unique IDs return actual_length == expected_length == len(set(tasks))"},{"question":"Given two non-negative integers num1 and num2 represented as strings, return the sum of num1 and num2, also represented as a string. Example 1: Input: num1 = \\"123\\", num2 = \\"456\\" Output: \\"579\\" Example 2: Input: num1 = \\"999\\", num2 = \\"1\\" Output: \\"1000\\" Note: - The length of both num1 and num2 is less than 110. - Both num1 and num2 contain only digits 0-9. - Both num1 and num2 do not contain any leading zeros, except the number 0 itself. - You must not use any built-in BigInteger library or convert the inputs to integer directly.","solution":"def add_strings(num1, num2): Adds two non-negative integers represented as strings and returns the sum as a string. # Initialize pointers for both numbers and the carry i, j = len(num1) - 1, len(num2) - 1 carry = 0 result = [] # Loop through the digits from the end to the beginning while i >= 0 or j >= 0 or carry: # Get the current digits or 0 if out of range n1 = int(num1[i]) if i >= 0 else 0 n2 = int(num2[j]) if j >= 0 else 0 # Calculate the sum and carry total = n1 + n2 + carry carry = total // 10 result.append(str(total % 10)) # Move to the next digits i -= 1 j -= 1 # Result is built backward, reverse it return \'\'.join(result[::-1])"},{"question":"Write a function named `max_sequence` that takes an integer array `arr`, and returns the maximum sum of a contiguous subarray. If the array is entirely composed of negative numbers or is empty, the result should be 0. For example, given the array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the function should return `6`, which is the sum of the subarray `[4, -1, 2, 1]`. As an added condition, the function should be efficient, with a time complexity of O(n), where n is the length of the array.","solution":"def max_sequence(arr): Returns the maximum sum of a contiguous subarray in the given array. If the array is empty or entirely composed of negative numbers, returns 0. max_sum = 0 current_sum = 0 for num in arr: current_sum = max(0, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are organizing a marathon and need to distribute water bottles to the runners. There are M runners and each runner needs exactly Y liters of water to stay hydrated throughout the marathon. Each water bottle has a capacity of 2 liters. Determine the minimum number of water bottles you need to ensure every runner has enough water. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two integers M and Y, the number of runners and the number of liters each runner needs respectively. ------ Output Format ------ For each test case, output the minimum number of water bottles required. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M, Y ≤ 10 ----- Sample Input 1 ------ 3 2 3 5 4 3 2 ----- Sample Output 1 ------ 3 10 3 ----- Explanation 1 ------ Test case 1: There are 2 runners who need 3 liters each, so total water required is 6 liters. Since each bottle holds 2 liters, a minimum of 3 water bottles are needed. Test case 2: There are 5 runners who need 4 liters each, so total water required is 20 liters. Since each bottle holds 2 liters, a minimum of 10 water bottles are needed. Test case 3: There are 3 runners who need 2 liters each, so total water required is 6 liters. Since each bottle holds 2 liters, a minimum of 3 water bottles are needed.","solution":"def min_water_bottles_required(T, cases): For each test case, computes the minimum number of 2-liter water bottles required to provide Y liters of water to each of M runners. :param T: Number of test cases :param cases: List of tuples (M, Y) for each test case :return: List of minimum number of water bottles required for each test case results = [] for M, Y in cases: total_liters = M * Y bottles_needed = (total_liters + 1) // 2 # Adding 1 ensures rounding up for odd numbers results.append(bottles_needed) return results"},{"question":"You are given a string S consisting of lowercase letters of the English alphabet. In one move, you can choose any substring of S and change all of its characters to a single character of your choice. Determine the minimum number of moves needed to make all characters of the string S the same. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing the string S. ------ Output ------ For each test case, print a single line containing one integer — the minimum number of moves required. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{5} the sum of |S| for all test cases does not exceed 2 cdot 10^{5} ------ Sample Input 1 ------ 2 abac aaaa ------ Sample Output 1 ------ 2 0 ------ explanation 1 ------ Example case 1: One possible way is to change the substring \\"bac\\" to \\"aaa\\" in two moves: first \\"ba\\" to \\"aa\\", then \\"c\\" to \\"a\\". So, the minimum number of moves is 2. Example case 2: The string is already uniform, so no moves are needed.","solution":"def min_moves_to_uniform_string(S): Returns the minimum number of moves needed to make all characters of the string S the same. max_count = max(S.count(char) for char in set(S)) return len(S) - max_count def process_test_cases(T, test_cases): Process multiple test cases. results = [] for S in test_cases: results.append(min_moves_to_uniform_string(S)) return results"},{"question":"You are given a sequence A of length N and a positive integer K. Your task is to determine the number of subarrays of A with exactly K distinct integers. A subarray is a contiguous part of an array, with each element appearing in the same order as in the original array. # Input The first line contains two integers N and K, the length of the sequence and the number of distinct integers to find, respectively. The second line contains N integers representing the sequence A. # Output Output a single integer representing the number of subarrays with exactly K distinct integers. Ensure to include a line break at the end. # Example Input ``` 5 2 1 2 1 2 3 ``` Output ``` 7 ``` # Explanation In the example given, the subarrays of A with exactly 2 distinct integers are: - [1, 2] - [2, 1] - [1, 2] - [2, 1, 2] - [1, 2, 3] - [2, 1, 2] - [1, 2, 3] Hence, the number of these subarrays is 7.","solution":"def subarrays_with_k_distinct(A, K): from collections import defaultdict def at_most_k_distinct(k): count = defaultdict(int) left = 0 result = 0 for right in range(len(A)): if count[A[right]] == 0: k -= 1 count[A[right]] += 1 while k < 0: count[A[left]] -= 1 if count[A[left]] == 0: k += 1 left += 1 result += right - left + 1 return result return at_most_k_distinct(K) - at_most_k_distinct(K - 1) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) A = list(map(int, data[2:])) print(subarrays_with_k_distinct(A, K))"},{"question":"Zara is a robotic researcher developing a robot that navigates a grid. The robot starts at the top left corner of the grid and needs to reach the bottom right corner. The robot can only move right or down at each step. Some cells in the grid contain obstacles which the robot cannot pass. Your task is to determine the number of unique paths from the top left corner to the bottom right corner of the grid, avoiding obstacles. -----Input----- The first line contains two integers, m and n, representing the number of rows and columns in the grid respectively. The next m lines each contain n integers (0 or 1). A cell containing 1 indicates there\'s an obstacle, and a cell containing 0 indicates it\'s free. -----Output----- Output should be an integer, the number of unique paths from the top left to the bottom right corner of the grid. -----Constraints----- 1 ≤ m, n ≤ 100 0 ≤ cell value ≤ 1 There will always be a valid starting point and ending point. -----Examples----- Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Input: 2 2 0 1 0 0 Output: 1 -----Explanation----- In the first example, the robot can take the following paths: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second example, the robot can only take the following path: - Down -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top left to the bottom right in a grid with obstacles. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) # Initialize DP table with 0s. dp = [[0] * n for _ in range(m)] # Starting point dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: # If there\'s an obstacle, no paths go through this cell. dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] # Add paths from the cell above if j > 0: dp[i][j] += dp[i][j-1] # Add paths from the cell to the left return dp[-1][-1]"},{"question":"A troupe of circus animals travels from their home to a show location every day. The path they follow can be visualized as a grid with the home at the top-left corner (0, 0) and the show location at the bottom-right corner (m, n). Each cell in the grid represents a point they need to pass through, and each move from one cell to another in the grid represents either a move right (R), down (D), or diagonally down-right (X). To keep track of their path, the ringmaster records the sequence of moves. Given the recorded sequence, you need to help the ringmaster determine the final coordinates of the troupe at the end of their journey. -----Input----- The first line contains two integers m and n (0 ≤ m, n ≤ 10^3) representing the dimensions of the grid. The second line contains a string S containing the moves (each move is one of \'R\', \'D\', or \'X\') that the troupe follows, where the length of S does not exceed 2 * (m + n). -----Output----- Output two integers representing the final coordinates of the troupe after making all the moves described in the sequence S. -----Examples----- Input 2 2 RRDD Output 2 2 Input 3 3 RDXDRD Output 3 3 Input 1 2 RDR Output 1 2 -----Explanation----- In the first example, starting from (0, 0), the troupe moves right twice and then down twice, ending up at (2, 2). In the second example, the sequence of moves leads the troupe to progressively the bottom-right corner (3, 3). In the third example, despite fewer steps, the troupe reaches the bottom-right corner within the grid constraints. Develop a function that appropriately processes the input and calculates the final coordinates based on the recorded moves.","solution":"def find_final_coordinates(m, n, sequence): Given the dimensions of the grid (m, n) and a sequence of moves, determine the final coordinates. x, y = 0, 0 for move in sequence: if move == \'R\': y += 1 elif move == \'D\': x += 1 elif move == \'X\': x += 1 y += 1 # Ensure we don\'t exceed the grid boundaries x = min(x, m) y = min(y, n) return x, y"},{"question":"Write a function to simulate the rolling of n six-sided dice. The function should return a list of all possible outcomes along with their respective probabilities. Example 1: Input: n = 1 Output: {\'1\': 0.1667, \'2\': 0.1667, \'3\': 0.1667, \'4\': 0.1667, \'5\': 0.1667, \'6\': 0.1667} Explanation: Since there is only one die, each face (1-6) has a probability of 1/6. Example 2: Input: n = 2 Output: {\'2\': 0.0278, \'3\': 0.0556, \'4\': 0.0833, \'5\': 0.1111, \'6\': 0.1389, \'7\': 0.1667, \'8\': 0.1389, \'9\': 0.1111, \'10\': 0.0833, \'11\': 0.0556, \'12\': 0.0278} Explanation: For two dice, each possible outcome (2-12) has a different probability based on the combination of faces. Your Task: You don\'t need to read or print anything. Your task is to complete the function rollDice(n) which takes n as input parameter and returns a dictionary representing all possible outcomes and their probabilities. Expected Time Complexity: O(6^n) Expected Space Complexity: O(6^n) Constraints: 1 <= n <= 5","solution":"from itertools import product from collections import Counter def rollDice(n): Simulate the rolling of n six-sided dice and return a dictionary with all possible outcomes and their respective probabilities. Parameters: n (int): the total number of dice to roll Returns: dict: a dictionary with the sum of the dice roll as keys and their probabilities as values # Generate Cartesian product of dice rolls dice_combinations = product(range(1, 7), repeat=n) # Calculate total number of possible outcomes total_outcomes = 6 ** n # Count the frequency of each possible sum sums_counts = Counter(map(sum, dice_combinations)) # Calculate probabilities for each outcome probabilities = {sum_: count / total_outcomes for sum_, count in sums_counts.items()} return probabilities"},{"question":"Given a grid of size m x n, where some cells are blocked, find the number of distinct paths from the top-left corner to the bottom-right corner of the grid. You can only move right or down. Return the number of ways to reach the destination modulo 10^{9}+7. A cell is blocked if it contains a 1 and open if it contains a 0. Example 1: Input: m = 3, n = 3, grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]] Output: 2 Explanation: The distinct paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: m = 2, n = 2, grid = [[0, 1], [0, 0]] Output: 1 Explanation: The distinct path is: 1. Down -> Right Your Task: You don\'t need to read input or print anything. Your task is to complete the function countPaths() which accepts integers m, n and a 2D list grid as input parameters and returns the number of distinct paths to reach the bottom-right corner. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Constraints: 1 <= m, n <= 100 Each element in the grid is either 0 or 1.","solution":"def countPaths(m, n, grid): MOD = 10**9 + 7 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[m-1][n-1]"},{"question":"You are given a binary string S of length N. Your task is to determine whether it is possible to delete exactly one character from S to make the resulting string not contain any two consecutive \'1\'s. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains a binary string S of length N. ------ Output ------ For each test case, print a single line containing the string \\"YES\\" if it is possible to delete exactly one character to make the resulting string not contain any two consecutive \'1\'s, or \\"NO\\" if it is impossible. ------ Constraints ------ 1 ≤ N ≤ 100 S_i is \'0\' or \'1\' for each valid i the sum of N over all test cases does not exceed 1000 ------ Examples ------ # Example 1 Input: 3 3 110 4 1010 5 11111 Output: YES YES NO # Example 2 Explanation: 1. We can delete the third character from the string \\"110\\" to get \\"11\\", but deleting the second character will result in \\"10\\" (no consecutive \'1\'s). 2. We can delete the third character from the string \\"1010\\" to get \\"100\\". 3. It is not possible to delete one character from \\"11111\\" to make it free of consecutive \'1\'s.","solution":"def can_delete_one_char_to_avoid_consecutive_ones(N, S): Returns \\"YES\\" if it is possible to delete exactly one character from S to avoid two consecutive \'1\'s, otherwise returns \\"NO\\". # if there are no consecutive \'1\'s initially, return \\"YES\\" if \'11\' not in S: return \\"YES\\" # try to remove each character and check if resulting string has \'11\' for i in range(N): new_string = S[:i] + S[i+1:] if \'11\' not in new_string: return \\"YES\\" # if all attempts fail, return \\"NO\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N, S = test_cases[i] result = can_delete_one_char_to_avoid_consecutive_ones(N, S) results.append(result) return results"},{"question":"> In a far away realm, there exists a magical garden that is accessible only through a special gate which opens according to a unique pattern. The garden gate opens every day at a specific time t following this sequence: the first day the gate opens at exactly midnight (00:00), the second day it opens 1 second later (00:00:01), the third day it opens 2 seconds later (00:00:02), and so on. On the n^{th} day, the gate opens n-1 seconds after midnight. You, being a curious student at a magic academy, decided to visit this garden regularly. However, you can only visit the garden once a day when the gate opens and it closes after you enter. Write a program that determines the exact time in text{HH:MM:SS} format the gate will open on the n^{th} day. # Input: - The first line contains an integer T, the number of test cases. - The next T lines each contain a single integer n representing the day you want to determine the gate opening time for. # Output: - For each test case, output a string in the format \\"HH:MM:SS\\" which is the time the gate opens on the n^{th} day. # Constraints: - 1 leq T leq 10^{5} - 1 leq n leq 10^{6} # Sample Input: 4 1 2 3 86400 # Sample Output: 00:00:00 00:00:01 00:00:02 23:59:59 # Explanation: - On the first day (n=1), the gate opens at 00:00:00. - On the second day (n=2), the gate opens at 00:00:01. - On the third day (n=3), the gate opens at 00:00:02. - On the 86400^{th} day (n=86400), the gate opens 86399 seconds (which is one day minus one second) after midnight, which is 23:59:59.","solution":"def gate_opening_time(n): Returns the gate opening time in HH:MM:SS format for the nth day. seconds = n - 1 hours = seconds // 3600 minutes = (seconds % 3600) // 60 seconds = seconds % 3600 % 60 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\" def process_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] for i in range(1, T + 1): n = int(data[i]) results.append(gate_opening_time(n)) for result in results: print(result)"},{"question":"The secrets of the ancient manuscript are hidden deep within cryptic messages that need to be deciphered. Your mission is to help uncover the secrets before the knowledge is lost forever. We have discovered that the key to deciphering the manuscript lies in the unique frequency of each letter in the message. Input: The first line will contain an integer N, representing the number of test cases. The following N lines will contain one word each, representing a part of the manuscript. Output: For each test case, output the summation of the square of the frequency of each letter in the word. Example: Input: 3 manuscript mystery cipher Output: 35 40 50 Explanation: For the word \\"manuscript\\": - \'m\' appears 1 time - \'a\' appears 1 time - \'n\' appears 1 time - \'u\' appears 1 time - \'s\' appears 1 time - \'c\' appears 1 time - \'r\' appears 1 time - \'i\' appears 1 time - \'p\' appears 1 time - \'t\' appears 1 time Frequency of each letter: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 Sum of squares: 1^2 + 1^2 + 1^2 + 1^2 + 1^2 + 1^2 + 1^2 + 1^2 + 1^2 + 1^2 = 10 For the word \\"mystery\\": - \'m\' appears 1 time - \'y\' appears 2 times - \'s\' appears 1 time - \'t\' appears 1 time - \'e\' appears 1 time - \'r\' appears 1 time Frequency of each letter: 1, 2, 1, 1, 1, 1 Sum of squares: 1^2 + 2^2 + 1^2 + 1^2 + 1^2 + 1^2 = 9 For the word \\"cipher\\": - \'c\' appears 1 time - \'i\' appears 1 time - \'p\' appears 1 time - \'h\' appears 1 time - \'e\' appears 1 time - \'r\' appears 1 time Frequency of each letter: 1, 1, 1, 1, 1, 1 Sum of squares: 1^2 + 1^2 + 1^2 + 1^2 + 1^2 + 1^2 = 6","solution":"def letter_frequency_squares(test_cases): For each word in the test cases, calculate and return the sum of the squares of the frequency of each letter in the word. results = [] for word in test_cases: frequency = {} for letter in word: if letter in frequency: frequency[letter] += 1 else: frequency[letter] = 1 sum_squares = sum(count ** 2 for count in frequency.values()) results.append(sum_squares) return results"},{"question":"Write a function that takes a single integer n as input and returns a list of strings representing a number pyramid. The number pyramid should contain ascending numbers starting from 1 at the top peak expanding outwards. Example 1: Input: ``` n = 4 ``` Output: ``` [ \\" 1 \\", \\" 1 2 \\", \\" 1 2 3 \\", \\"1 2 3 4\\" ] ``` Example 2: Input: ``` n = 2 ``` Output: ``` [ \\" 1 \\", \\"1 2\\" ] ``` Constraints: 1 <= n <= 10 Your Task: Complete the function `generatePyramid` which takes an integer `n` as the input and returns a list of strings representing the number pyramid pattern.","solution":"def generatePyramid(n): Generates a number pyramid pattern of height `n`. Args: n (int): The height of the number pyramid. Returns: list: A list of strings representing the number pyramid. pyramid = [] width = 2 * n - 1 for i in range(1, n + 1): row = \\" \\".join(str(num) for num in range(1, i + 1)) centered_row = row.center(width) pyramid.append(centered_row) return pyramid"},{"question":"You are given a sequence of n positive integers: a_1, a_2, dots, a_n. A sequence is called diverse if no integer appears more than once. Calculate the number of permutations of size n such that, after applying a permutation to the sequence a, none of the integers appears at its original position. A permutation p of size n is a sequence p_1, p_2, dots, p_n consisting of n distinct integers from 1 to n (1 le p_i le n). If you apply permutation p to the sequence a, the i-th element of the sequence a moves to the p_i-th position. -----Input----- The first line contains one integer n (1 le n le 10^5). The next line contains n positive integers a_1, a_2, dots, a_n (1 le a_i le n). -----Output----- Print the number of permutations of size n such that no integer appears in its original position. Print the answer modulo 998244353 (a prime number). -----Examples----- Input 3 1 2 3 Output 2 Input 4 4 3 2 1 Output 9 Input 5 1 3 5 2 4 Output 44 -----Note----- In the first test case, there are six permutations of size 3: if p = [1, 2, 3], then a remains [1, 2, 3] — not diverse; if p = [1, 3, 2], then a becomes [1, 3, 2] — not diverse; if p = [3, 2, 1], then a becomes [3, 2, 1] — not diverse; if p = [3, 1, 2], then a becomes [3, 1, 2] — diverse; if p = [2, 1, 3], then a becomes [2, 1, 3] — diverse; if p = [2, 3, 1], then a becomes [2, 3, 1] — diverse.","solution":"def count_diverse_permutations(n, sequence): MOD = 998244353 if n == 1: # No diverse permutations possible for n = 1 return 0 # Derangements formula def derangements(n): if n == 1: return 0 if n == 2: return 1 der = [0] * (n + 1) der[1] = 0 der[2] = 1 for i in range(3, n + 1): der[i] = (i - 1) * (der[i - 1] + der[i - 2]) % MOD return der[n] return derangements(n)"},{"question":"Evelyn is playing a game where she needs to balance a weighted seesaw. The seesaw rests on a pivot at its center, and she can place weights on both ends of the seesaw. The goal is to make both sides of the seesaw balanced. The seesaw has positions numbered from 1 to N on both the left and the right sides. Evelyn can place weights at any position on either side. Given a set of weights and their positions, determine if the seesaw can be balanced. If it can be balanced, output \\"YES\\" and if it cannot, output \\"NO\\". Formally, you have to determine whether the sum of the moments (weight × distance from pivot) on the left side is equal to the sum of the moments on the right side. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers W1, W2, ..., Wn denoting the weights on the left side of the seesaw along with their respective distances from the pivot. - The third line contains N space-separated integers X1, X2, ..., Xn denoting the weights on the right side of the seesaw along with their respective distances from the pivot. -----Output----- For each test case, print a single line containing \\"YES\\" if the seesaw can be balanced, or \\"NO\\" if it cannot. -----Constraints----- - (1 leq N leq 10^5) - (1 leq W_i, X_i leq 10^9) for each valid i - the sum of N over all test cases does not exceed (5 cdot 10^5) -----Example Input----- 3 2 4 5 3 12 4 9 2 6 4 5 6 4 3 9 2 7 3 3 20 10 30 -----Example Output----- YES NO NO -----Explanation----- Example case 1: The sum of moments on the left side is (4 times 1 + 5 times 2 = 14), and the sum of moments on the right side is (3 times 1 + 12 times 2 = 27). The seesaw cannot be balanced, so the output is \\"NO\\". Example case 2: The sum of moments on the left side is (4 times 1 + 9 times 2 = 22), and the sum of moments on the right side is (2 times 1 + 6 times 2 = 14). The seesaw cannot be balanced, so the output is \\"NO\\". Example case 3: The sum of moments on the left side is (5 times 1 + 6 times 2 + 4 times 3 + 3 times 4 = 44), and the sum of moments on the right side is (9 times 1 + 2 times 2 + 7 times 3 + 3 times 4 = 50). The seesaw cannot be balanced, so the output is \\"NO\\".","solution":"def can_balance_seesaw(T, test_cases): results = [] for case in test_cases: N, left_weights, right_weights = case left_moment = sum(w * (i + 1) for i, w in enumerate(left_weights)) right_moment = sum(x * (i + 1) for i, x in enumerate(right_weights)) if left_moment == right_moment: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Chef wants to make sure his kitchen is well-stocked. He has a large string S of length N which represents a sequence of orders. Each character in S is either \'P\' (representing an order for pizza) or \'B\' (representing an order for broccoli). Chef can select a subsequence of orders and change each \'B\' in the selected subsequence to \'P\'. He wants to maximize the number of pizzas in the sequence after making at most one such change. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N. - The second line contains a string S with length N. -----Output----- For each test case, print a single line containing one integer ― the maximum number of pizzas that can be achieved. -----Constraints----- - 1 le T le 1,000 - 1 le N le 10^5 - S contains only characters \'P\' and \'B\' - the sum of N over all test cases does not exceed 10^6 -----Example Input----- 3 5 PPPPP 7 PPBBPPP 12 PBPBPBPBPBPP -----Example Output----- 5 7 8 -----Explanation----- Example case 1: The sequence is already all \'P\', so no modifications are necessary. Example case 2: Chef can change the substring S[3, 4] = \\"BB\\" to \\"PP\\". The maximum number of pizzas is 7. Example case 3: Chef can select any subsequence containing \'B\'s and change them to \'P\'s to maximize the total number of pizzas, achieving a maximum count of 8.","solution":"def max_pizzas(T, cases): results = [] for i in range(T): N, S = cases[i] P_count = S.count(\'P\') B_count = S.count(\'B\') results.append(P_count + B_count) return results"},{"question":"There is a city with N intersections, numbered 1 through N. The i-th of the M roads connects intersections u_i and v_i. There are M courses available for delivery, and each course consists of starting at one intersection and ending at another. Delivery drivers need to know the shortest distance to complete each delivery course using given roads. First, you will be provided with the number of intersections N and roads M, followed by M lines describing each road with intersections u_i and v_i. Then, you will be provided with Q queries, each consisting of a pair of intersections (start and end) indicating a delivery course. Your goal is to determine the shortest distance for each delivery course. Constraints * 2 ≦ N ≦ 3000 * 1 ≦ M ≦ 6000 * 1 ≦ Q ≦ 1000 * 1 ≦ u_i, v_i ≦ N * All roads are bi-directional. Input The input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M Q start_1 end_1 start_2 end_2 : start_Q end_Q Output For each of the Q queries, print the shortest distance from the start intersection to the end intersection. If there is no path between the two intersections, print -1. Examples Input 5 6 1 2 2 3 3 4 4 5 2 4 1 5 3 1 3 2 5 1 6 Output 2 2 -1 Input 4 4 1 2 2 3 3 4 4 1 2 1 4 3 2 Output 1 1","solution":"from collections import deque def shortest_path_bfs(graph, start, end): Returns the shortest path length between start and end using BFS. If no path exists, returns -1. if start == end: return 0 visited = set() queue = deque([(start, 0)]) while queue: node, dist = queue.popleft() if node == end: return dist if node not in visited: visited.add(node) for neighbour in graph[node]: if neighbour not in visited: queue.append((neighbour, dist + 1)) return -1 def delivery_courses(N, M, roads, Q, queries): # Create graph from roads input graph = {i: [] for i in range(1, N+1)} for u, v in roads: graph[u].append(v) graph[v].append(u) results = [] for start, end in queries: results.append(shortest_path_bfs(graph, start, end)) return results"},{"question":"Suzanne loves baked goods and she recently started experimenting with different recipes. She has collected a large number of ingredient combinations over the years. Each combination includes a list of ingredients with their quantities. Being a perfectionist, Suzanne is keen on determining if there are any duplicate ingredient combinations in her collection. Two combinations are considered duplicates if they contain the exact same ingredients in the same quantities, regardless of the order of ingredients. You are given a list of ingredient combinations. Each combination is represented by a list of strings, where each string contains an ingredient name followed by its quantity (e.g., \\"sugar 2\\"). Your task is to count the number of unique combinations in Suzanne\'s collection. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of ingredient combinations. Each of the next n lines contains a combination, represented by a list of ingredients in the format described above. The ingredients within a combination are separated by commas, and there will be no leading or trailing spaces. An ingredient name is a non-empty string of alphabetical characters (a-z, A-Z) and its quantity is a positive integer. Output Print a single integer — the number of unique ingredient combinations in Suzanne\'s collection. Example Input 5 sugar 2,flour 3 flour 3,sugar 2 butter 1,eggs 3 eggs 3,butter 1 milk 2,sugar 1 Output 3 Explanation There are three unique combinations in the collection: 1. {sugar 2, flour 3} 2. {butter 1, eggs 3} 3. {milk 2, sugar 1}","solution":"def count_unique_combinations(n, combinations): Counts the number of unique ingredient combinations. unique_combinations = set() for combination in combinations: # Split each combination into a list of ingredients ingredients = combination.split(\',\') # Sort the ingredients to ensure order doesn\'t matter sorted_ingredients = sorted(ingredients) # Convert the sorted list into a tuple and add to the set unique_combinations.add(tuple(sorted_ingredients)) return len(unique_combinations)"},{"question":"Problem K: Best Route in the City A city consists of an n x m grid of intersections. Each intersection can be considered as a node, and roads between intersections can be considered as edges. You are given the number of rows (n) and columns (m) in the grid. The distance between intersections (edges) is either horizontal or vertical and always has the same distance of 1 unit. There are certain intersections labeled as hazardous and should be avoided. You need to navigate from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). Write a program that determines the shortest path from the top-left corner of the grid to the bottom-right corner without passing through hazardous intersections. If no such path exists, return -1. Intersections are given in the format of a list where each entry contains two integers xi and yi, which represent the coordinates of the hazardous intersection. Hazardous intersections block the path completely and cannot be traversed. Input The input begins with a line containing two integers n and m (1 <= n, m <= 100), the dimensions of the grid. The next line contains an integer h (0 <= h <= 100), the number of hazardous intersections. The following h lines each contain two integers xi and yi (0 <= xi < n, 0 <= yi < m), indicating the positions of hazardous intersections. Output Print the length of the shortest path from (0, 0) to (n-1, m-1) avoiding all hazardous intersections. If there is no such path, print -1. Examples Input 5 5 2 2 2 3 3 Output 8 Input 3 3 1 1 1 Output 4 Input 3 3 9 0 1 0 2 1 0 1 1 1 2 2 0 2 1 2 2 Output -1","solution":"from collections import deque def shortest_path(n, m, hazardous): Finds the shortest path from (0, 0) to (n-1, m-1) while avoiding hazardous intersections. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid hazardous (list of tuples): list of hazardous intersections (xi, yi) Returns: int: length of the shortest path or -1 if no path exists if (0, 0) in hazardous or (n-1, m-1) in hazardous: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 0)]) # queue of (x, y, distance) visited = set(hazardous) visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Monica is organizing a festive event and she wants to create a long garland made up of multiple colorful bulbs. The garland should flash in such a way that no two adjacent bulbs have the same color. She already has N bulbs arranged in a row, each having one of K different colors. Monica needs your help to determine if it\'s possible to decorate the entire garland such that no two adjacent bulbs share the same color. If it is possible, return `YES`, otherwise return `NO`. Write a function `isPossibleGarland(n: int, k: int, bulbs: List[int]) -> str` to solve the problem. In the function, `n` is the number of bulbs, `k` is the number of different colors, and `bulbs` is a list of integers where each integer represents the color of a bulb. Example 1: Input: n = 5 k = 3 bulbs = [1, 2, 1, 3, 2] Output: YES Explanation: The given arrangement already ensures that no two adjacent bulbs share the same color. Example 2: Input: n = 4 k = 2 bulbs = [1, 1, 2, 2] Output: NO Explanation: In the given arrangement, there are two bulbs with color 1 placed consecutively at positions 1 and 2. Similarly, two bulbs with color 2 are placed consecutively at positions 3 and 4. Hence, it\'s not possible to arrange them as required. Your Task: You do not need to read input or print anything. Your task is to complete the function `isPossibleGarland()` which takes the integers `n`, `k`, and the list `bulbs` as inputs and returns a string \\"YES\\" if it\'s possible to arrange the bulbs such that no two adjacent bulbs share the same color, and \\"NO\\" otherwise. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 1 ≤ k ≤ 100 1 ≤ bulbs[i] ≤ k","solution":"from typing import List def isPossibleGarland(n: int, k: int, bulbs: List[int]) -> str: for i in range(1, n): if bulbs[i] == bulbs[i-1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers where each element appears exactly twice, except for one unique element that appears only once. Write a function to find the unique element in the array. Example 1: Input: [2, 3, 5, 4, 5, 3, 2] Output: 4 Example 2: Input: [1, 2, 4, 2, 1] Output: 4 Note: - Your algorithm should have a linear runtime complexity. - Could you implement it without using extra memory?","solution":"def find_unique_element(arr): Finds the element that appears only once in the array. Each other element appears exactly twice. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Andronikos and Photios are playing a game involving random numbers. The rules of the game are as follows: each player selects a continuous subsequence of a given sequence of integers. The player with the highest sum of their selected subsequence wins. If both players get the same sum, the game is declared a draw. Given a sequence of integers, determine the maximum sum that each player can achieve from their respective subsequences. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of elements in the sequence. - The second line contains n integers separated by spaces, representing the sequence. The sequence elements can be positive, negative, or zero (-10^4 ≤ each element ≤ 10^4). Output: - A single integer representing the maximum sum of any continuous subsequence of the sequence. Example: Input: 5 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Explanation: - The maximum sum subsequence is [4, -1, 2, 1] which has a sum of 6. In this game scenario: - Andronikos and Photios would both try to find the maximum sum of a continuous subsequence and compare their results.","solution":"def max_subsequence_sum(n, sequence): Returns the maximum sum of any continuous subsequence of the given sequence. Args: n: int - the number of elements in the sequence (1 ≤ n ≤ 10^5) sequence: list of int - the sequence of n integers (-10^4 ≤ element ≤ 10^4) Returns: int - the maximum sum of any continuous subsequence max_sum = current_sum = sequence[0] for num in sequence[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Bertlandia is a vast country known for its extensive road network connecting all its cities. The country has n cities labeled from 1 to n and m bidirectional roads. Each road connects two distinct cities and has a distinct positive length. Recently, Bertlandia’s government has decided to build a new highway network such that there must be exactly k new highways added and each highway must connect two previously unconnected cities directly. Given the current layout of existing roads and the requirements for the new highways, the government wants to ensure that: 1. The length of each new highway is minimized. 2. The total length of the newly constructed highways should also be as small as possible. Design an algorithm to help the government determine the optimal placement and length of the new highways to meet these requirements. Input The first line contains three integers n, m, and k (1 ≤ n ≤ 500, 0 ≤ m ≤ n(n-1)/2, 1 ≤ k ≤ n-1) — the number of cities, the number of existing roads, and the number of new highways to be added. The next m lines each contain three integers a, b, and l (1 ≤ a, b ≤ n, 1 ≤ l ≤ 10^9, a ≠ b) — indicating a road between cities a and b with length l. Output Output k lines. Each line should contain three integers x, y, and d (1 ≤ x, y ≤ n, 1 ≤ d ≤ 10^9, x ≠ y), denoting that a new highway is built between city x and city y with length d. Examples Input 4 3 2 1 2 5 2 3 7 3 4 8 Output 1 3 10 2 4 12 Input 5 2 3 1 2 1 4 5 2 Output 1 3 3 2 4 4 3 5 6 Note In the first example, after examining the initial road network and positioning the new highways, we find that connecting 1 to 3 with a highway of length 10 and 2 to 4 with a highway of length 12 yields an optimal minimal length while meeting the requirements. In the second example, there are several cities without direct connections. The optimal new highways are determined to connect city 1 to city 3 with a length of 3, city 2 to city 4 with a length of 4, and city 3 to city 5 with a length of 6, which satisfies the requirement for adding exactly 3 new highways with minimal total length.","solution":"import heapq def prim_mst(graph, n): Use Prim\'s algorithm to find the MST of the connected components of the graph. in_mst = [False] * (n + 1) # Priority queue to pick the smallest edge pq = [(0, 1)] # Weight, start from node 1 total_cost = 0 mst_edges = [] while pq: weight, u = heapq.heappop(pq) if in_mst[u]: continue in_mst[u] = True total_cost += weight for v, w in graph[u]: if not in_mst[v]: heapq.heappush(pq, (w, v)) if weight != 0: # Ignore the initial node with weight 0 mst_edges.append((u, v, w)) return mst_edges def find_new_highways(n, m, k, roads): graph = {i: [] for i in range(1, n + 1)} for a, b, l in roads: graph[a].append((b, l)) graph[b].append((a, l)) # Find the minimum spanning tree (MST) using Prim\'s algorithm from the given connected component mst_edges = prim_mst(graph, n) existing_edges_set = set((min(a, b), max(a, b)) for a, b, _ in mst_edges) existing_connected = set((min(a, b), max(a, b)) for a, b, _ in roads) new_highways = [] additional_highways = 0 for i in range(1, n + 1): for j in range(i + 1, n + 1): if (i, j) not in existing_connected and additional_highways < k: # For simplicity, let\'s assign an arbitrary length to these highways # since the problem seems underspecified about how exactly to determine the highway length. length = i + j # This could be any positive length new_highways.append((i, j, length)) additional_highways += 1 if additional_highways == k: break if additional_highways == k: break return new_highways"},{"question":"Implement a function to determine if a list of integers can be transformed into a non-decreasing sequence by modifying at most one element. Constraints * 2 leq len(nums) leq 1000 * -10^9 leq nums[i] leq 10^9 * nums is a list of integers. Input Input is given from Standard Input in the following format: nums Output Output `YES` if the array can be made non-decreasing by modifying at most one element; otherwise, output `NO`. Examples Input [4, 2, 3] Output YES Input [4, 2, 1] Output NO Input [1, 2, 3] Output YES Input [3, 4, 2, 3] Output NO","solution":"def can_be_non_decreasing(nums): Determine if a list of integers can be transformed into a non-decreasing sequence by modifying at most one element. count = 0 # Counter for modifications needed for i in range(1, len(nums)): if nums[i] < nums[i - 1]: count += 1 if count > 1: return \'NO\' if i == 1 or nums[i] >= nums[i - 2]: nums[i - 1] = nums[i] else: nums[i] = nums[i - 1] return \'YES\'"},{"question":"You are given a string S and a non-empty string P. The task is to check if P is a subsequence of S. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Example 1: Input: S = \\"codingassessment\\", P = \\"cat\\" Output: True Explanation: P is a subsequence of S since we can delete the characters \'o\', \'d\', \'i\', \'n\', \'g\', \'a\', \'s\', \'s\', \'e\', \'s\', \'s\', \'m\', \'e\', \'n\', \'t\' from S to get \\"cat\\". Example 2: Input: S = \\"codingassessment\\", P = \\"dog\\" Output: False Explanation: P is not a subsequence of S since we cannot form \\"dog\\" by deleting some or no elements of S without changing the order of the remaining elements. Your Task: The task is to complete the function isSubsequence() that takes S and P as parameters and returns True if P is a subsequence of S, otherwise False. Expected Time Complexity: O(N), where N is the length of string S. Expected Auxiliary Space: O(1). Constraints: 1 ≤ length of S ≤ 10^6 1 ≤ length of P ≤ 10^5","solution":"def isSubsequence(S, P): Function to check if P is a subsequence of S. Parameters: S (str): the string to be checked P (str): the subsequence to verify in S Returns: bool: True if P is a subsequence of S, False otherwise i, j = 0, 0 while i < len(S) and j < len(P): if S[i] == P[j]: j += 1 i += 1 return j == len(P)"},{"question":"# Summing Array Elements You are given an array of integers. Your task is to write a function that calculates the sum of all the elements in the array. **Function Signature:** ```python def sum_elements(arr: List[int]) -> int: pass ``` **Input:** - `arr`: A list of integers (1 ≤ len(arr) ≤ 1000, -1000 ≤ arr[i] ≤ 1000) **Output:** - The function should return the sum of all the integers in the input list. **Example:** ```python print(sum_elements([1, 2, 3, 4])) # Output: 10 print(sum_elements([-1, -2, -3, -4])) # Output: -10 ```","solution":"from typing import List def sum_elements(arr: List[int]) -> int: Returns the sum of all elements in the array. return sum(arr)"},{"question":"Juliette is organizing a holiday gift exchange for her friends. Each friend written their name down on a slip of paper, and Juliette placed all the slips into a hat. The goal is to randomly assign each person someone else to give a gift to, with the constraint that no one can give a gift to themselves. You need to write a program that takes the list of friends\' names and generates a valid gift exchange list where no one is assigned their own name. -----Constraints----- - The number of friends (N) is an integer. - 2 leq N leq 10^5 - Each name is a string of uppercase and lowercase English letters. - All names are unique. -----Input----- Input is given from Standard Input in the following format: N name_1 name_2 ... name_N -----Output----- Print N lines. Each line should contain two space-separated names: name A and name B, where A is assigned to give a gift to B. Ensure that no one is assigned their own name. -----Sample Input----- 4 Alice Bob Charlie Diana -----Sample Output----- Alice Bob Bob Charlie Charlie Diana Diana Alice In this sample, the assignment ensures that no one is giving a gift to themselves. Different valid outputs are possible. For example, another valid output could be: Alice Charlie Charlie Bob Bob Diana Diana Alice","solution":"import random def generate_gift_exchange(names): Generates a valid gift exchange list where no one is assigned their own name. Args: names (list): List of friends\' names. Returns: list of tuples: Each tuple contains two names (giver, receiver). n = len(names) shuffled = names[:] while True: random.shuffle(shuffled) if all(shuffled[i] != names[i] for i in range(n)): break return [(names[i], shuffled[i]) for i in range(n)] # Input handling import sys input = sys.stdin.read def main(): data = input().split() n = int(data[0]) names = data[1:n+1] result = generate_gift_exchange(names) for giver, receiver in result: print(f\\"{giver} {receiver}\\") if __name__ == \\"__main__\\": main()"},{"question":"A coding competition organizes a game where contestants have to find the longest sequence of consecutive integers in an unsorted array. The goal of the task is to complete the function `findLongestConseqSubseq` which returns an integer representing the length of the longest sequence of consecutive numbers in the array. Input: The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. The first line of each test case contains a single integer N denoting the size of the array. The next line contains N space-separated integers representing the elements of the array. Output: For each test case in a new line, print the length of the longest sequence of consecutive integers in the array. Constraints: 1 <= T <= 50 1 <= N <= 1000 1 <= arr[i] <= 10^6 Example: Input: 2 7 2 6 1 9 4 5 3 6 1 9 3 10 4 20 Output: 6 2 Note: The Input/Output format and Example given are used for the system\'s internal purpose and should be used by a user for expected output only. As it is a function problem, a user should not read any input from stdin/console. The task is to complete the function specified and not to write the full code.","solution":"def findLongestConseqSubseq(arr): Returns the length of the longest sequence of consecutive integers in the array. if not arr: return 0 unique_elements = set(arr) longest_sequence_length = 0 for num in unique_elements: if num - 1 not in unique_elements: # Check if this num is the start of a sequence current_num = num current_sequence_length = 1 while current_num + 1 in unique_elements: current_num += 1 current_sequence_length += 1 longest_sequence_length = max(longest_sequence_length, current_sequence_length) return longest_sequence_length def process_test_cases(T, test_cases): results = [] for i in range(T): N, array = test_cases[i] results.append(findLongestConseqSubseq(array)) return results"},{"question":"You are given an array of n integers, and you need to find the maximum length of a contiguous subarray with an equal number of even and odd integers. A contiguous subarray means a subset of elements taken sequentially from the array. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^3) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^3 ≤ a_i ≤ 10^3) — the elements of the array. -----Output----- Print a single integer denoting the maximum length of a contiguous subarray with an equal number of even and odd integers. If there is no such subarray, print 0. -----Examples----- Input 7 1 2 3 4 5 6 7 Output 6 Input 5 2 4 6 8 10 Output 0 -----Note----- In the first sample, the subarray [2, 3, 4, 5, 6, 7] has 3 even and 3 odd integers, making it the longest subarray with an equal number of even and odd integers. In the second sample, there are no odd integers, so it is impossible to have a subarray with an equal number of even and odd integers.","solution":"def max_length_equal_even_odd(n, arr): # Dictionary to store the first occurrence of a specific \'balance\' balance_index_map = {0: -1} max_length = 0 balance = 0 for i in range(n): if arr[i] % 2 == 0: balance += 1 # Increment balance for even numbers else: balance -= 1 # Decrement balance for odd numbers if balance in balance_index_map: max_length = max(max_length, i - balance_index_map[balance]) else: balance_index_map[balance] = i return max_length"},{"question":"In a candy store, different types of candies are placed on shelves. Each type of candy has a unique sweetness level, and the candies are sorted by their sweetness levels in ascending order on the shelves. You are given a list of available candies and a list of customers. Each customer has a specific desired sweetness level. For each customer, you need to find the candy with the closest sweetness level to their desired sweetness, and if there are multiple candies with the same closest sweetness level, return the one with the lower sweetness. # Input The first line of input contains an integer `n` (1 ≤ n ≤ 100), the number of available candies. The second line contains `n` integers representing the sweetness levels of these candies. The third line contains an integer `m` (1 ≤ m ≤ 100), the number of customers. The fourth line contains `m` integers representing the desired sweetness levels of the customers. # Output For each customer, output the sweetness level of the candy that is closest to the customer\'s desired sweetness. If there are multiple such candies, output the sweetness level of the candy with the lower sweetness. # Example Input ``` 5 1 3 5 7 9 3 2 4 8 ``` Output ``` 1 3 7 ``` # Explanation For the first customer with desired sweetness `2`, the closest available sweetness is `1`. For the second customer with desired sweetness `4`, the closest available sweetness is `3`, and for the third customer with desired sweetness `8`, the closest available sweetness is `7`. Note that while `7` and `9` are both 1 unit away from `8`, `7` is chosen because it is lower.","solution":"def closest_candy_sweetness(candies, customers): For each customer, find the closest sweetness level candy. If multiple closest candies exist, return the one with the lesser sweetness. candies.sort() results = [] for desired in customers: closest = candies[0] for candy in candies: if abs(candy - desired) < abs(closest - desired): closest = candy elif abs(candy - desired) == abs(closest - desired): closest = min(closest, candy) results.append(closest) return results"},{"question":"In a faraway land, there is a magical orchard with n unique fruit trees arranged in a straight line. Each tree produces a specific amount of fruit, and the amount can vary from tree to tree. The orchard keeper wants to maximize the total amount of fruit collected during each harvest season. However, due to a unique policy, the keeper can only pick fruits from 3 consecutive trees each day. Given the number of trees and the amount of fruit each tree produces, determine the maximum amount of fruit that can be collected in a single day by choosing 3 consecutive trees. Input The first line contains an integer n (3 ≤ n ≤ 105), the number of trees. The next line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 104), where ai is the amount of fruit produced by the i-th tree. Output Print a single integer, the maximum amount of fruit that can be collected from 3 consecutive trees. Examples Input 5 4 2 3 7 1 Output 12 Input 7 8 1 3 10 2 5 7 Output 17 Input 3 1 1 1 Output 3 Note In the first example, the maximum fruit can be collected from the 3rd, 4th, and 5th trees which produce 3 + 7 + 1 = 11 fruits. In the second example, the maximum fruit can be collected from the 2nd, 3rd, and 4th trees which produce 1 + 3 + 10 = 14 fruits. In the third example, since there are only three trees, the maximum fruit collected is simply the sum of all three trees.","solution":"def max_fruit_from_trees(n, fruits): Returns the maximum amount of fruit that can be collected from 3 consecutive trees. Parameters: n (int): The number of trees. fruits (list of int): The amount of fruit each tree produces. Returns: int: The maximum amount of fruit from 3 consecutive trees. max_fruit = 0 for i in range(n - 2): current_fruit = fruits[i] + fruits[i + 1] + fruits[i + 2] if current_fruit > max_fruit: max_fruit = current_fruit return max_fruit"},{"question":"Antonio loves baking bread. He has been practicing making sourdough bread, which requires a period of fermentation. Antonio wants to track the fermentation status of several loaves of bread he is making. He needs a program that can help him monitor which loaf is ready for the next step in the baking process. Each loaf has a unique identifier and an associated fermentation duration. Antonio wants to input the current time and get a list of the loaves that will be ready for the next step within the nearest hour. -----Input----- The first line contains two integers n and current_time (1 leq n leq 100,000, 0 leq current_time < 1,000,000) — the number of loaves and the current time in seconds since the start of fermentation. The next n lines each contain two integers id_i and duration_i (1 leq id_i leq 1,000,000, 1 leq duration_i leq 500,000) — the unique identifier of the loaf and the fermentation duration in seconds required for that loaf to be ready. -----Output----- Print the list of loaf identifiers that will be ready within the next hour (3600 seconds), sorted by their readiness time in ascending order. If no loaf is ready within the next hour, print an empty line. -----Examples----- Input 3 1800 1 3600 2 4500 3 7200 Output 1 2 Input 4 3000 10 8000 20 10000 30 11000 40 12000 Output -----Note----- In the first example, the current time is 1800 seconds. The loaves with IDs 1 and 2 will be ready in 3600 and 4500 seconds respectively – within the next hour. The loaf with ID 3 will be ready in 7200 seconds, which is not within the next hour. In the second example, no loaves will be ready within the next hour (from 3000 to 6600 seconds), so the output is an empty line.","solution":"def get_ready_loaves(n, current_time, loaves): Returns the list of loaf identifiers that will be ready within the next hour from the current time, sorted by their readiness time. readiness_limit = current_time + 3600 ready_loaves = [] for loaf_id, duration in loaves: if current_time <= duration <= readiness_limit: ready_loaves.append((duration, loaf_id)) ready_loaves.sort() # Sort by readiness time return [loaf_id for _, loaf_id in ready_loaves]"},{"question":"You are given a positive integer array `nums` with length `n`. Your task is to determine the maximum product of two distinct elements in the array. The product of two distinct elements `nums[i]` and `nums[j]` is defined as `(nums[i] - 1) * (nums[j] - 1)` where `i` and `j` are distinct indices. -----Input----- The first line of the input contains one integer n (2 le n le 10^5) — the length of the array `nums`. The second line of the input contains n integers separated by spaces — the elements of the array `nums, where each integer is in the range [1, 10^4]. -----Output----- Print one integer — the maximum product of two distinct elements in the array `nums` after performing the operation (nums[i] - 1) * (nums[j] - 1)`. -----Examples----- Input 4 1 5 4 5 Output 16 Input 3 3 4 5 Output 12 -----Note----- In the first example, the optimal choice of elements is `5` and `5` which gives the product `(5-1)*(5-1) = 16`. In the second example, the optimal choice of elements is `4` and `5` which gives the product `(4-1)*(5-1) = 12`.","solution":"def max_product(nums): Returns the maximum product of two distinct elements in the array nums. first_max = max(nums) nums.remove(first_max) second_max = max(nums) return (first_max - 1) * (second_max - 1)"},{"question":"Given two integers, a and b, compute the sum of all integers from a to b inclusive. If a is greater than b, compute the sum of all integers from b to a instead. # Input The input consists of two lines: - The first line contains an integer a. - The second line contains an integer b. Constraints: - -10^9 ≤ a, b ≤ 10^9 # Output Print a single integer, which is the sum of all integers from the smaller number to the larger number (both inclusive). # Examples Input 1 5 Output 15 Input 10 7 Output 34 Input -3 3 Output 0","solution":"def sum_integers(a, b): Computes the sum of all integers from a to b inclusive. If a is greater than b, computes the sum of all integers from b to a instead. start = min(a, b) end = max(a, b) return (end - start + 1) * (start + end) // 2"},{"question":"You\'ve been given a list of words, where each word consists of lowercase Latin letters. The task is to count how many unique words can be formed by rearranging the letters of each word, including the word itself. A word is considered unique if it has not been seen before as a permutation of any other word in the list. For example, the words \\"abc\\" and \\"cab\\" are not unique because they are permutations of each other. Write a function that takes a list of words and returns the count of unique words formed by permuting the letters in each word. Input The input consists of a single list of words. Each word is a string of lowercase Latin letters. The number of words in the list does not exceed 1000, and each word\'s length does not exceed 1000. Output Print a single integer representing the number of unique words that can be formed. Examples Input [\\"abc\\", \\"bca\\", \\"dac\\", \\"cad\\", \\"xyz\\"] Output 3 Input [\\"abcd\\", \\"dcba\\", \\"bcda\\", \\"abdc\\", \\"efgh\\", \\"hgfe\\", \\"efhg\\"] Output 2 Input [\\"a\\", \\"aa\\", \\"aaa\\", \\"a\\"] Output 3 Input [\\"check\\", \\"chekc\\", \\"kcehc\\", \\"hello\\", \\"elloh\\", \\"world\\"] Output 3 Note In the first example, \\"abc\\", \\"bca\\", and \\"dac\\" are unique as they are different permutations of the strings in the list. Thus, the unique words are \\"abc\\", \\"dac\\", and \\"xyz\\", making the count 3.","solution":"def count_unique_permutations(words): Returns the number of unique words that can be formed by permuting the letters of each word in the list. unique_words_set = set() for word in words: sorted_word = \'\'.join(sorted(word)) unique_words_set.add(sorted_word) return len(unique_words_set)"},{"question":"You are given a string S of length n and a string P of length m. Your task is to determine whether P can be formed by deleting some (possibly zero) characters from S and rearranging the rest of the characters, without changing the order of remaining characters in S. Input Format: - The first line contains an integer t denoting the number of test cases. - Each of the next t pairs of lines contains: - The first line is the string S. - The second line is the string P. Output Format: - For each test case, output \\"YES\\" if the string P can be formed from string S as described, otherwise print \\"NO\\". Constraints: - 1 ≤ t ≤ 10 - 1 ≤ n, m ≤ 10^5 - All characters in S and P are lowercase English letters. SAMPLE INPUT: 3 abcde ace abcde aec abcde acd SAMPLE OUTPUT: YES NO YES Explanation: In the first test case, \\"ace\\" can be formed by deleting \'b\' and \'d\' from \\"abcde\\". In the second test case, \\"aec\\" cannot be formed since the order of characters \'a\', \'e\', and \'c\' in \\"aec\\" does not match the order in \\"abcde\\". In the third test case, \\"acd\\" can be formed by deleting \'b\' and \'e\' from \\"abcde\\".","solution":"def can_form_by_delete_and_rearrange(S, P): Check if string P can be formed by deleting some characters from S and keeping the order of the remaining characters in S. i, j = 0, 0 while i < len(S) and j < len(P): if S[i] == P[j]: j += 1 i += 1 return j == len(P) def process_test_cases(t, test_cases): results = [] for case in test_cases: S, P = case if can_form_by_delete_and_rearrange(S, P): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers and a target integer, implement an algorithm that finds all unique pairs of integers in the list that sum up to the target number. The pairs should be listed in ascending order based on their first elements, and each pair should be represented as a tuple of two elements. Input The input consists of multiple datasets. Each dataset starts with an integer n (1 ≤ n ≤ 50), representing the length of the list, followed by n space-separated integers, and finally the target integer. The values of the integers in the list and the target are all between -1000 and 1000. The end of the input is marked by an integer 0. Output For each dataset, print all unique pairs that sum up to the target integer. Each pair should be printed as a tuple (x, y), where x and y are the integers from the list, and x ≤ y. The pairs must be listed in ascending order based on their first elements. If no such pair exists, print an empty list. Example Input 4 1 2 3 4 5 5 -1 0 1 2 3 2 3 -5 -4 -3 1 0 Output [(1, 4), (2, 3)] [(-1, 3), (0, 2)] [] Explanation For the first dataset, the pairs (1, 4) and (2, 3) sum up to 5. For the second dataset, the pairs (-1, 3) and (0, 2) sum up to 2. For the third dataset, there are no pairs that sum up to 1.","solution":"def find_pairs(datasets): result = [] for data in datasets: n = data[0] if n == 0: break numbers = data[1:-1] target = data[-1] pairs = set() for i in range(n): for j in range(i + 1, n): if numbers[i] + numbers[j] == target: pairs.add((min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))) result.append(sorted(list(pairs))) return result # Example datasets datasets = [ [4, 1, 2, 3, 4, 5], [5, -1, 0, 1, 2, 3, 2], [3, -5, -4, -3, 1], [0] ] print(find_pairs(datasets)) # Example usage"},{"question":"You are given an array of n integers. You wish to rearrange the array in such a way that the sum of absolute differences between each element\'s new value and its old value is minimized. Formally, for the array `a` of length `n`, you need to find an array `b` such that the sum of |a[i] - b[i]| for all \'i\' is minimized, and `b` is a permutation of `a` (it contains exactly the same elements as `a`, just potentially in a different order). Input The first line contains a single integer `n` (1 ≤ n ≤ 105) - the length of the array. The second line contains `n` integers a[1], a[2], ..., a[n] (-106 ≤ a[i] ≤ 106) - the elements of the array. Output Output a single line with `n` integers - the array `b` that minimizes the described sum. If there are multiple solutions, output any. Examples Input 5 1 3 2 3 1 Output 1 1 2 3 3 Input 4 -1 5 2 -2 Output -2 -1 2 5","solution":"def minimize_absolute_differences(n, array): This function returns an array \'b\' such that the sum of absolute differences between each element\'s new value and its old value is minimized, where \'b\' is a permutation of the input array \'array\'. return sorted(array)"},{"question":"You are given a list of integers. Bob wants to sort the array in non-decreasing order, but with a twist: he can only use a special operation that allows him to reverse any contiguous subarray of the list exactly once. Your task is to determine the minimum length of the subarray that Bob needs to reverse so that the whole list becomes sorted in non-decreasing order. ------ Input Format ------ - The first line of input contains a single integer N denoting the number of elements in the list. - The second line contains N space-separated integers denoting the elements of the list. ------ Output Format ------ Output a single integer representing the minimum length of the subarray that needs to be reversed to sort the list. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ text{array elements} ≤ 10^6 ------ Sample Input 1 ------ 5 3 1 2 4 5 ------ Sample Output 1 ------ 3 ----- explanation 1 ------ By reversing the subarray from indices 1 to 3 (1-based index), the array becomes [1, 2, 3, 4, 5], which is sorted. ------ Sample Input 2 ------ 4 4 3 2 1 ------ Sample Output 2 ------ 4 ----- explanation 2 ------ The entire array needs to be reversed to become sorted in non-decreasing order.","solution":"def min_length_to_reverse_for_sort(arr): Determines the minimum length of the subarray that Bob needs to reverse so that the whole list becomes sorted in non-decreasing order. :param arr: List[int] - The list of integers. :return: int - Minimum length of the subarray to reverse to sort the list. n = len(arr) # Find the first and last position where the array is not sorted. left, right = 0, n - 1 while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 if left == n - 1: return 0 # The array is already sorted while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # Find the smallest element in the subarray arr[left:right+1] and the largest element in that subarray min_val = min(arr[left:right + 1]) max_val = max(arr[left:right + 1]) # Extend the left boundary to the right while elements are greater than the minimum value of the subarray while left > 0 and arr[left - 1] > min_val: left -= 1 # Extend the right boundary to the left while elements are smaller than the maximum value of the subarray while right < n - 1 and arr[right + 1] < max_val: right += 1 return right - left + 1"},{"question":"Today, Petya was given a challenging task during his computer science class. He was given an array of n positive integers and told to find the maximum product of any two distinct elements in the array. However, instead of returning the actual product, Petya is asked to return the result of the product modulo 109 + 7. Since the computations might be too cumbersome for Petya, you decided to help him out. Input The first line of the input contains number n (2 ≤ n ≤ 100 000) – the length of the array given to Petya. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106). Output Print a single number – the maximum product of any two distinct elements in the array, calculated modulo 109 + 7. Examples Input 5 1 5 3 4 2 Output 20 Input 4 9 8 7 6 Output 72 Note In the first example, the maximum product is obtained from the numbers 4 and 5: 4 * 5 = 20. In the second example, the maximum product is obtained from the numbers 9 and 8: 9 * 8 = 72.","solution":"def max_product_mod(array): Returns the maximum product of any two distinct elements in the array, modulo 10^9 + 7. MOD = 10**9 + 7 # Find the two largest numbers in the array first_max = second_max = 0 for num in array: if num > first_max: second_max = first_max first_max = num elif num > second_max: second_max = num max_product = (first_max * second_max) % MOD return max_product # Input handling if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) array = list(map(int, data[1:n+1])) # Output the result print(max_product_mod(array))"},{"question":"Little Jhool and big Jhool are now happily in a relationship and they enjoy coding together. Big Jhool loves palindrome strings, and little Jhool wants to impress her by finding palindromes in given strings. A palindrome is a string that reads the same forward and backward. Little Jhool decides to write a program which, given a string, finds the longest contiguous sub-string within it that is a palindrome. Input format: There\'s only one line in the input, it contains the string given by big Jhool. Output format: Print the longest contiguous palindrome substring found in the input string. If there are multiple longest palindromic substrings of the same length, print the first one encountered. Constraints: 1 ≤ Length of input string ≤ 1000 Example: Let\'s say that the input string is: babad, the answer would be \\"bab\\" or \\"aba\\" since both are longest palindromic substrings of length 3. Input: babad Output: bab Input: cbbd Output: bb Explanation: In the first example, both \\"bab\\" and \\"aba\\" are palindromic substrings of length 3, and \\"bab\\" appears first. In the second example, the longest palindromic substring is \\"bb\\".","solution":"def longest_palindromic_substring(s): Finds and returns the longest palindromic substring in the given string s. :param s: The input string :return: The longest palindromic substring n = len(s) if n == 0: return \\"\\" # Initialize the start and end points of the longest palindromic substring start = 0 max_length = 1 # Create a 2D table to store the palindrome checking results table = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes for i in range(n): table[i][i] = True # Check all substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: table[i][i + 1] = True start = i max_length = 2 # Check all substrings of length greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if table[i + 1][j - 1] and s[i] == s[j]: table[i][j] = True if length > max_length: start = i max_length = length # Return the longest palindromic substring return s[start:start + max_length]"},{"question":"In a tech company\'s internal system, there\'s a list of active users, each identified by a unique user ID, and their respective number of completed tasks. The system needs to handle multiple queries to retrieve information about the task distribution among subsets of users efficiently. You are given a list of n users and their respective task counts, followed by q queries. Each query consists of two indices x and y, and for each query, you are required to calculate the average number of completed tasks for users whose indices lie between x and y (both inclusive). Task Given the list of user IDs and their completed task counts, and a set of queries, compute the average number of completed tasks for each queried range. Input The first line of input contains two integers, n and q, denoting the number of users (size of the list) and the number of queries respectively. The second line contains n space-separated integers representing the task counts of each user. The following q lines contain two integers, x and y, representing the leftmost and rightmost indices of the query. Note: The list is 0-indexed. Output For each query, print the average number of completed tasks for the specified range, formatted to two decimal places. Constraints 0 < n, q ≤ 100000 0 ≤ task counts of any user ≤ 1000000000 0 ≤ x, y < n Example Input: 5 3 10 20 30 40 50 0 2 1 3 2 4 Output: 20.00 30.00 40.00 Explanation In the first query, the range includes tasks counts [10, 20, 30], and the average is (10+20+30)/3 = 20.00. In the second query, the range includes tasks counts [20, 30, 40], and the average is (20+30+40)/3 = 30.00. In the third query, the range includes tasks counts [30, 40, 50], and the average is (30+40+50)/3 = 40.00.","solution":"def calculate_averages(n, q, tasks, queries): Calculate the average number of completed tasks for each query range. Args: n: int - number of users/tasks q: int - number of queries tasks: list of int - completed tasks count for each user queries: list of tuple of int - list of (x, y) tuples with query ranges Returns: list of float - list of average tasks for each query range, formatted to two decimal places prefix_sum = [0] * (n + 1) # Compute prefix sum array for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + tasks[i] results = [] for x, y in queries: total_tasks = prefix_sum[y + 1] - prefix_sum[x] average_tasks = total_tasks / (y - x + 1) results.append(format(average_tasks, \\".2f\\")) return results"},{"question":"Mike has been given the task of arranging M students into L classrooms such that each classroom has at least one student and the number of students in each classroom is as balanced as possible. Determine the minimum possible (absolute) difference between the number of students in the classroom with the most students and the classroom with the least students. -----Constraints----- - 1 leq M, L leq 100 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: M L -----Output----- Print the minimum possible (absolute) difference between the number of students in the classroom with the most students and the classroom with the least students. -----Sample Input----- 8 3 -----Sample Output----- 1 If the students are distributed as 2, 3, and 3 among the classrooms, the (absolute) difference between the classroom with the most students and the classroom with the least students is 1.","solution":"def min_difference_students(M, L): Returns the minimum possible (absolute) difference between the number of students in the classroom with the most students and the classroom with the least students. :param M: Total number of students :param L: Total number of classrooms :return: Minimum possible difference if L > M: return 0 # If there are more classrooms than students, some classrooms will be empty base_students_per_class = M // L extra_students = M % L if extra_students == 0: # All classrooms have an equal number of students return 0 else: # We have \'extra_students\' rooms with one more student return 1"},{"question":"A **rotation matrix** is a matrix used to perform a rotation in Euclidean space. For a 2D plane, the rotation of a point ((x, y)) by an angle (theta) around the origin can be represented by multiplying the vector ([x, y]^T) (where (T) indicates a transpose) with the rotation matrix: [ R(theta) = begin{bmatrix} cos(theta) & -sin(theta) sin(theta) & cos(theta) end{bmatrix} ] Given a list of 2D points and a rotation angle, write a function that performs the rotation on all the given points and returns the new coordinates. # Function Signature ```python def rotate_points(points: List[Tuple[float, float]], angle: float) -> List[Tuple[float, float]]: pass ``` # Input - `points`: a list of tuples, where each tuple contains two floating-point numbers representing the (x) and (y) coordinates of a point. You can assume the list is not empty and contains up to (100) points. - `angle`: a floating-point number representing the angle of rotation in degrees. # Output - A list of tuples where each tuple contains the new (x) and (y) coordinates of a point after rotation. # Example ```python points = [(1.0, 0.0), (0.0, 1.0), (-1.0, 0.0), (0.0, -1.0)] angle = 90.0 # Expected Output: # [(0.0, 1.0), (-1.0, 0.0), (0.0, -1.0), (1.0, 0.0)] ``` # Notes - Implement the rotation matrix calculation manually, avoid using built-in libraries for rotation. - Consider floating-point precision in your calculations.","solution":"import math from typing import List, Tuple def rotate_points(points: List[Tuple[float, float]], angle: float) -> List[Tuple[float, float]]: Rotates a list of 2D points by a given angle in degrees around the origin. Parameters: points (List[Tuple[float, float]]): A list of (x, y) coordinates of points. angle (float): The angle of rotation in degrees. Returns: List[Tuple[float, float]]: A list of (x, y) coordinates of the points after rotation. # Convert angle from degrees to radians theta = math.radians(angle) # Calculate the rotation matrix components cos_theta = math.cos(theta) sin_theta = math.sin(theta) # Create a list to store the rotated points rotated_points = [] # Rotate each point for x, y in points: # Apply the rotation matrix x_new = x * cos_theta - y * sin_theta y_new = x * sin_theta + y * cos_theta # Append the new point to the list rotated_points.append((x_new, y_new)) return rotated_points"},{"question":"You are given an integer array `A` of length `N`, and another integer `D`. You need to rotate the array `A` `D` times to the left. After rotating the array, answer `Q` queries, where in each query you are given an index `i` and you have to print the element at index `i` of the rotated array. -----Input----- - The first line of input contains three space-separated integers `N`, `D`, and `Q`. - The second line contains `N` space-separated integers representing the array `A`. - The following `Q` lines describe queries. Each of these lines contains a single integer `i`. -----Output----- For each query, print a single line containing the value at index `i` in the rotated array. -----Constraints----- - 1 le N, Q le 10^5 - 0 le A_i le 10^9 for each i such that 0 le i < N - 0 le D < 10^9 - 0 le i < N -----Example Input----- 5 2 3 1 2 3 4 5 0 2 4 -----Example Output----- 3 5 2","solution":"def rotate_array_and_answer_queries(N, D, Q, A, queries): Rotate the array A left by D positions and answer the given queries. Parameters: N (int): Length of the array A. D (int): Number of left rotations. Q (int): Number of queries. A (list): List of integers representing the array. queries (list): List of query indices. Returns: List of integers representing the answers to the queries. # Normalize D in case it\'s larger than the length of the array D = D % N # Rotate array rotated_array = A[D:] + A[:D] # Answer queries result = [rotated_array[i] for i in queries] return result"},{"question":"In a certain game, a player gains or loses points based on their performance in a level. At the end of the level, the player\'s new score is calculated as follows: - If the player\'s current score is even, the points gained/lost in the level are doubled and added to the current score. - If the player\'s current score is odd, the new score is simply the sum of the current score and the points gained/lost in the level. Given the player\'s current score and the points gained or lost in the level, determine the player\'s new score. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - Each test case consists of two integers S and P: - S - the player\'s current score. - P - the points gained or lost in the level (P can be negative or positive). ------ Output Format ------ For each test case, output a single integer - the player\'s new score. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ S ≤ 10^6 -1000 ≤ P ≤ 1000 ----- Sample Input 1 ------ 3 10 5 15 -6 20 0 ----- Sample Output 1 ------ 20 9 20 ----- Explanation 1 ------ Test case-1: The player\'s current score is 10 (even). The points gained in the level are 5. Doubling the points gives 10, which when added to the current score results in a new score of 20. Test case-2: The player\'s current score is 15 (odd). The points lost in the level are -6. Adding the points to the current score results in a new score of 9. Test case-3: The player\'s current score is 20 (even). The points gained/lost in the level are 0. Doubling 0 remains 0, so the new score remains 20.","solution":"def calculate_new_score(S, P): Calculate the new score based on the player\'s current score (S) and the points gained or lost (P). If S is even, the points P are doubled before being added to S. If S is odd, the points P are simply added to S. Parameters: S (int): The player\'s current score P (int): The points gained or lost Returns: int: The new score if S % 2 == 0: return S + 2 * P else: return S + P def main(input_data): Main function to handle multiple test cases Parameters: input_data (str): Input data containing number of test cases and the test cases themselves Returns: List[int]: A list of results for each test case input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) results = [] for i in range(1, T + 1): S, P = map(int, input_lines[i].split()) results.append(calculate_new_score(S, P)) return results"},{"question":"Given a list of n integers, you are required to find the longest subsequence such that the difference between any two consecutive elements is either 1 or -1. # Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the list. - The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the list. # Output - The output should be a single integer, the length of the longest subsequence with the described property. # Example 1 Input: ``` 6 1 2 3 2 3 4 ``` Output: ``` 6 ``` # Example 2 Input: ``` 5 5 4 3 2 1 ``` Output: ``` 5 ``` # Example 3 Input: ``` 8 7 8 9 5 8 7 6 7 ``` Output: ``` 4 ``` # Note In the first example, the entire list `[1, 2, 3, 2, 3, 4]` is a subsequence where the difference between consecutive elements is either 1 or -1. In the second example, the entire list `[5, 4, 3, 2, 1]` is already a subsequence where the difference between consecutive elements is -1 each time. In the third example, the longest such subsequence is `[5, 6, 7, 8]`.","solution":"def longest_subsequence_with_diff_one(n, arr): if n == 1: return 1 dp = [1] * n for i in range(1, n): if abs(arr[i] - arr[i - 1]) == 1: dp[i] = dp[i - 1] + 1 return max(dp)"},{"question":"Given a string containing only characters \'A\' to \'Z\', return the length of the longest substring where each character in the substring does not appear more than twice. Input Format The first line contains an integer T, the number of test cases. Each of the following T lines contains a string S. Output Format For each test case, print the length of the longest such substring in a new line. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 SAMPLE INPUT 2 AABACDDF AABBCC SAMPLE OUTPUT 7 6 Explanation Case 1: The longest substring is \\"AABACDD\\" where no character appears more than twice. Case 2: The entire string \\"AABBCC\\" itself is the longest one where no character appears more than twice.","solution":"def longest_substring_with_two_repeats(s): Given a string `s` containing only \'A\' to \'Z\', returns the length of the longest substring where each character does not appear more than twice. from collections import defaultdict n = len(s) max_len = 0 left = 0 count = defaultdict(int) for right in range(n): count[s[right]] += 1 # When any character appears more than twice, shrink the window from the left while count[s[right]] > 2: count[s[left]] -= 1 left += 1 # Update the maximum length max_len = max(max_len, right - left + 1) return max_len def process_test_cases(T, test_cases): Given number of test cases T and a list of test case strings `test_cases`, returns a list of results corresponding to the length of the longest substring with the specified property for each test case. results = [] for s in test_cases: results.append(longest_substring_with_two_repeats(s)) return results"},{"question":"Write a program to find if a number M is a prime number. A prime number is a number which has only two distinct divisors, 1 and itself. -----Input:----- - First line will contain the number M, -----Output:----- Print \\"Prime\\" if M is a prime number. Print \\"Not Prime\\" if M is not a prime number. -----Constraints----- - 1 leq M leq 1000000 -----Sample Input:----- 7 -----Sample Output:----- Prime","solution":"def is_prime(M): Determine if M is a prime number. Parameters: M (int): The number to be checked for prime status. Returns: str: \\"Prime\\" if M is a prime number, \\"Not Prime\\" if M is not a prime number. if M < 2: return \\"Not Prime\\" for i in range(2, int(M ** 0.5) + 1): if M % i == 0: return \\"Not Prime\\" return \\"Prime\\""},{"question":"You are managing a library\'s book collection system. The system tracks multiple books represented by unique IDs and their corresponding positions on the shelves. Each book has an ID and a position in the format (shelf_number, position_on_shelf), where shelf_number and position_on_shelf are both integers. Librarians frequently perform the following operations: 1. ADD book_id shelf_number position_on_shelf – Adds a book with the given ID and position to the collection. 2. MOVE book_id new_shelf_number new_position_on_shelf – Moves the specified book to a new position. 3. REMOVE book_id – Removes the book with the given ID from the collection. Your task is to process a series of these operations and maintain the collection accordingly. At the end of operations, you need to print the final state of the library, displaying the ID and position of each book sorted by their IDs in ascending order. -----Input----- The first line of input contains an integer Q (1 leq Q leq 100000), representing the number of operations to be processed. Each of the following Q lines describes an operation in one of the three formats mentioned above. It is guaranteed that: - Any ADD operation will have a book ID that doesn\'t currently exist in the collection. - Any MOVE operation will reference a book ID that exists in the collection. - Any REMOVE operation will reference a book ID that exists in the collection. -----Output----- Output the final state of the library, sorted by book IDs in ascending order. Each line should contain the book ID followed by its final position in the format (shelf_number, position_on_shelf). -----Examples----- Sample Input 1: 5 ADD 101 2 3 ADD 102 1 1 MOVE 101 2 5 REMOVE 102 ADD 103 1 2 Sample Output 1: 101 (2, 5) 103 (1, 2) Sample Input 2: 4 ADD 1 1 1 ADD 2 1 2 MOVE 1 2 1 REMOVE 2 Sample Output 2: 1 (2, 1)","solution":"def manage_library(operations): collection = {} for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": book_id = int(parts[1]) shelf_number = int(parts[2]) position_on_shelf = int(parts[3]) collection[book_id] = (shelf_number, position_on_shelf) elif command == \\"MOVE\\": book_id = int(parts[1]) new_shelf_number = int(parts[2]) new_position_on_shelf = int(parts[3]) if book_id in collection: collection[book_id] = (new_shelf_number, new_position_on_shelf) elif command == \\"REMOVE\\": book_id = int(parts[1]) if book_id in collection: del collection[book_id] sorted_books = sorted(collection.items()) return sorted_books def format_output(sorted_books): result = [] for book_id, position in sorted_books: result.append(f\\"{book_id} {position}\\") return result # Sample function to run the program with input and output def run_library_system(operations): sorted_books = manage_library(operations) return format_output(sorted_books)"},{"question":"The Kingdom of Farland has a complex system of roads connecting its cities. Each road directly connects two different cities and has a toll fee associated with it. The King wants to restructure the road network such that there is a direct road from the capital city to every other city in the kingdom. Additionally, the total cost of the road network should be minimized. You are tasked with finding the minimal cost to achieve this structure. The roads are bidirectional, and you can assume there is always a way to connect the capital to every city either directly or through other cities. Input The first line contains two integers n (2 ≤ n ≤ 1000) — the number of cities, and m (n-1 ≤ m ≤ 10000) — the number of roads. The next m lines describe the roads. Each of these lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) — which means there is a road between cities u and v with a toll fee of w. The capital city is always city 1. Output Output a single integer — the minimal cost required to ensure there is a direct road from the capital city to every other city. Examples Input 4 5 1 2 5 1 3 10 2 3 6 2 4 2 3 4 4 Output 11 Input 3 3 1 2 2 1 3 4 2 3 1 Output 3 Note In the first example, the optimal roads to connect the capital to all other cities are (1-2 with cost 5), (2-4 with cost 2), and (1-3 with cost 4). Therefore, the total minimum cost is 5 + 2 + 4 = 11. In the second example, we can connect (1-2 with cost 2), and (2-3 with cost 1), resulting in a total minimum cost of 2 + 1 = 3.","solution":"def minimal_cost_to_connect_cities(n, m, roads): Returns the minimal cost to ensure there is a direct road from the capital city to every other city. Args: n : int : number of cities m : int : number of roads roads : list of tuple : list containing tuples each with (u, v, w) Returns: int : minimal cost to connect all cities import heapq # Prim\'s algorithm to find the minimum spanning tree (MST) # Start with the capital city (node 1) min_heap = [(0, 1)] # (cost, node) visited = set() min_cost = 0 while min_heap and len(visited) < n: cost, u = heapq.heappop(min_heap) if u not in visited: visited.add(u) min_cost += cost for v, w in road_map[u]: if v not in visited: heapq.heappush(min_heap, (w, v)) return min_cost def construct_road_map(n, roads): from collections import defaultdict road_map = defaultdict(list) for u, v, w in roads: road_map[u].append((v, w)) road_map[v].append((u, w)) return road_map def main(n, m, roads): global road_map road_map = construct_road_map(n, roads) return minimal_cost_to_connect_cities(n, m, roads)"},{"question":"Sophie loves playing with strings. She has two strings and she wants to know the longest common subsequence (LCS) length of the two strings. She is not sure how to find the LCS efficiently and wants your help. Input: The first line of input contains the first string S1. The second line contains the second string S2. Output: Print the length of the longest common subsequence of the two strings. Constraints: 1 ≤ |S1|, |S2| ≤ 1000 S1 and S2 consist of only lowercase English letters. SAMPLE INPUT abcde ace SAMPLE OUTPUT 3","solution":"def longest_common_subsequence(S1, S2): Returns the length of the longest common subsequence of two strings S1 and S2. m, n = len(S1), len(S2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"We define a permutation as an array consisting of n different integers from 1 to n in any order. For example, [2, 3, 1, 5, 4] is a permutation of 5 elements. Given a permutation p_1, p_2, ..., p_n of length n, find the longest subsequence that forms a zigzag pattern. A subsequence is a sequence derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. A subsequence is considered to be a zigzag if its elements alternate between going up and down. Formally, a subsequence is called a zigzag if there exists an integer k such that for each pair of consecutive numbers in the subsequence, one of them is larger than the other. This means that x_1 < x_2 > x_3 < x_4 > x_5... or x_1 > x_2 < x_3 > x_4 < x_5... -----Input----- The first line of the input contains n (1 ≤ n ≤ 10^5) — the length of the permutation. Each of the next n values contains a unique integer p_i (1 ≤ p_i ≤ n), which denote the elements of the permutation. -----Output----- Print the length of the longest zigzag subsequence from the permutation. -----Examples----- Input 6 1 5 4 9 2 8 Output 6 Input 4 1 2 3 4 Output 2","solution":"def longest_zigzag_subsequence_length(arr): Returns the length of the longest zigzag subsequence in an array. n = len(arr) if n == 0: return 0 up = down = 1 for i in range(1, n): if arr[i] > arr[i - 1]: up = down + 1 elif arr[i] < arr[i - 1]: down = up + 1 return max(up, down)"},{"question":"Phoebe has decided to organize a music concert and she wants to arrange the seats for the audience in a specific manner. She has a single row of seats represented as a string. Each seat can either be empty, reserved, or aisle. Reserved seats are denoted by \'R\', empty seats by \'.\', and aisle positions by \'A\'. An aisle increases visibility, so there cannot be more than X continuous empty seats between two reserved seats. Phoebe needs to rearrange the seats such that all the audience can have a better view without exceeding the maximum limit of continuous empty seats. Two rearrangements are allowed: 1. Adjacent reserved and empty seats can be swapped. 2. Continuous blocks of empty seats can be split into different positions by introducing an aisle \'A\' in between them to ensure no more than X continuous empty seats. Given the initial arrangement of the row of seats and the limit X on the maximum number of continuous empty seats, determine if it\'s possible to rearrange the seats to meet the criteria. ------ Input Format ------ - First line contains two integers N (length of the string) and X (maximum number of continuous empty seats allowed). - Second line contains a string of length N consisting of \'.\', \'R\', and \'A\' representing the row of seats. ------ Output Format ------ Print \\"YES\\" if it\'s possible to rearrange the seats as per the criteria, else print \\"NO\\". ------ Constraints ------ 1 ≤ N ≤ 10^{5} 0 ≤ X ≤ N - The string contains only \'.\', \'R\', and \'A\'. ----- Sample Input 1 ------ 10 3 ..R...R.A. ----- Sample Output 1 ------ YES ----- explanation 1 ------ Phoebe can rearrange to \\"..R.A.R.A.\\" which meets the condition, as there are no more than 3 continuous empty seats between reserved seats. ----- Sample Input 2 ------ 7 2 ....R.. ----- Sample Output 2 ------ NO ----- explanation 2 ------ It is not possible to rearrange the seats such that there are no more than 2 continuous empty seats between reserved seats.","solution":"def can_rearrange_seats(n, x, seats): continuous_empty = 0 for seat in seats: if seat == \'.\': continuous_empty += 1 if continuous_empty > x: return \\"NO\\" else: continuous_empty = 0 return \\"YES\\""},{"question":"Create a function that organizes a group of people by their ages and returns a formatted string of the results. The input will be a list of dictionaries, where each dictionary represents a person with the keys `\'name\'` and `\'age\'`. The function should: 1. Sort the list of people in ascending order by age. 2. Return a string where each line contains the name and the age of a person, formatted like this: `\\"name: age\\"`. 3. If there are multiple people with the same age, sort those people alphabetically by name. # Examples ```python input = [ {\\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"name\\": \\"Bob\\", \\"age\\": 25}, {\\"name\\": \\"Charlie\\", \\"age\\": 30}, {\\"name\\": \\"Dora\\", \\"age\\": 25} ] output = Bob: 25 Dora: 25 Alice: 30 Charlie: 30 ``` # Note - The function should handle an empty input list by returning an empty string. - Handle any non-alphanumeric characters in names and ensure the output format is strictly followed. - You can assume that the ages are always valid non-negative integers. Write your function in Python and ensure it adheres to the requirements outlined.","solution":"def organize_by_age(people): Organizes a group of people by their ages, then by name if ages are the same. Args: people (list of dict): A list of dictionaries each representing a person with keys \'name\' and \'age\'. Returns: str: A formatted string of names and ages sorted as specified. if not people: return \\"\\" people_sorted = sorted(people, key=lambda x: (x[\'age\'], x[\'name\'])) result = \\"n\\".join(f\\"{person[\'name\']}: {person[\'age\']}\\" for person in people_sorted) return result"},{"question":"In a sprawling magical forest, there are N mana pools arranged in a row. The mana pools are indexed from 0 to N-1, and each mana pool i has m_i units of mana. A wizard stands at the first mana pool (index 0) with power P. Every second, the wizard can perform one of the following actions: 1. Collect mana from the current mana pool, increasing their power by m_i units (which depletes the mana pool to 0). 2. Move to the next mana pool (i+1) if it exists. The wizard\'s goal is to traverse through the mana pools while collecting enough mana to have at least a total power of T units after consuming the mana in all mana pools. Write a function to determine if it is possible for the wizard to achieve their goal, given the initial power, the minimum required power, and the mana distribution across the pools. **Function Signature:** ```python def can_reach_goal(N: int, P: int, T: int, mana_pools: List[int]) -> str: ``` **Input:** - `N` (2 ≤ N ≤ 10^5): The number of mana pools. - `P` (0 ≤ P ≤ 10^9): The initial power of the wizard. - `T` (0 ≤ T ≤ 10^9): The target power the wizard needs to reach. - `mana_pools` (List[int]) (1 ≤ m_i ≤ 10^9): A list of integers where mana_pools[i] is the amount of mana in the i-th mana pool. **Output:** - Return \\"Possible\\" if the wizard can achieve at least T power by visiting all mana pools in order. Return \\"Impossible\\" otherwise. **Examples:** 1. `can_reach_goal(3, 1, 10, [2, 3, 4])` -> \\"Possible\\" 2. `can_reach_goal(5, 5, 20, [1, 2, 3, 4, 5])` -> \\"Impossible\\" 3. `can_reach_goal(4, 0, 6, [2, 5, 1, 3])` -> \\"Possible\\" **Explanation:** In the first example, the wizard\'s initial power is 1. By visiting all mana pools in order, the wizard collects an additional 2+3+4 = 9 mana, achieving a total power of 10, which meets the target. In the second example, although the wizard collects an additional 1+2+3+4+5 = 15 mana, the total achieved power is only 20, which does not meet the target of 23. Hence, it is \\"Impossible\\". In the third example, the initial power is 0, but the wizard collects an additional 2+5+1+3 = 11 mana, achieving a total power of 11, which meets the target of 6. Hence, it is \\"Possible\\".","solution":"from typing import List def can_reach_goal(N: int, P: int, T: int, mana_pools: List[int]) -> str: total_mana = sum(mana_pools) final_power = P + total_mana if final_power >= T: return \\"Possible\\" else: return \\"Impossible\\""},{"question":"Nina is a software developer working on a sophisticated task management system. The application has a feature that records the history of tasks modifications represented as a list of operations. Each operation is described by two integers: task ID and a priority change value. The system needs to retrieve the priority of a specific task after performing a sequence of operations. Nina needs to ensure that the operations are completed efficiently and correctly to query the final priority of the task of interest. Your goal is to help Nina by writing a function that will process the list of operations and return the final priority of the specified task. Input: - The first line contains an integer T, the number of test cases. - The next T sections, each containing: - The first line has an integer N, the number of operations. - The second line contains an integer task_id, the ID of the task to be queried. - The next N lines each contain two integers t_id and change, representing the task ID and the priority change value for that operation. Output: For each test case, output the final priority of the task with the specified task_id after processing all operations. Initially, the priority of each task is zero. Constraints: 1 ≤ T ≤ 20 1 ≤ N ≤ 100 1 ≤ task_id, t_id ≤ 1000 -100 ≤ change ≤ 100 Sample Input: 2 3 2 1 10 2 5 1 -5 4 3 1 15 3 7 2 -3 3 2 Sample Output: 5 9 Explanation: Case 1: Initial priorities: task_1 = 0, task_2 = 0 Operation sequence: 1. task_1 += 10 -> task_1 = 10 2. task_2 += 5 -> task_2 = 5 3. task_1 -= 5 -> task_1 = 5 Final priority of task_2: 5 Case 2: Initial priorities: task_1 = 0, task_2 = 0, task_3 = 0 Operation sequence: 1. task_1 += 15 -> task_1 = 15 2. task_3 += 7 -> task_3 = 7 3. task_2 -= 3 -> task_2 = -3 4. task_3 += 2 -> task_3 = 9 Final priority of task_3: 9","solution":"def final_priority(T, test_cases): For given test cases, returns the final priority of the specified task after applying all operations. :param T: Number of test cases :param test_cases: List of test cases where each test case contains: - Number of operations - Task ID to be queried - List of operations (task_id, priority change) :return: List of final priorities for the specified task in each test case results = [] for i in range(T): N = test_cases[i][0] task_id_to_query = test_cases[i][1] operations = test_cases[i][2] priority_map = {} for op in operations: t_id, change = op if t_id not in priority_map: priority_map[t_id] = 0 priority_map[t_id] += change final_priority = priority_map.get(task_id_to_query, 0) results.append(final_priority) return results"},{"question":"Your task is to compress a string S composed of lowercase English letters and consisting of a sequence of characters. The string S must be compressed using the following algorithm: Identify contiguous groups of the same character from the string, and then represent each group consecutively with the character followed by the length of the group. For instance, the string \\"aaabbcc\\" would be compressed to \\"a3b2c2\\". If the compressed length is shorter than the original length, return the compressed string. Otherwise, return the original string. Your task is to implement this compression algorithm. -----Input----- The input consists of a single line containing the string S (1 ≤ |S| ≤ 1000), which is the string to be compressed. -----Output----- Print the compressed version of the string S if and only if the compressed string is shorter than the original string. Otherwise, print the original string. -----Examples----- Input aabcccccaaa Output a2b1c5a3 Input abcd Output abcd Input abbbbbccaaadddddd Output a1b5c2a3d6 -----Note----- In the first sample, the compressed string \\"a2b1c5a3\\" is shorter than the original string \\"aabcccccaaa\\", so the output is the compressed string. In the second sample, the original string is already as short as possible, so the output is \\"abcd\\". In the third sample, the compressed string \\"a1b5c2a3d6\\" is more efficient in length compared to the original string \\"abbbbbccaaadddddd\\", so the output is the compressed string.","solution":"def compress_string(s): if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"A local bakery sells cakes with a specific pricing scheme. The price of each cake is a power of 3, i.e., 3^0, 3^1, 3^2, etc. Given a total amount, you need to determine the minimum number of cakes that sum up to that amount. Since the bakery has a variety of cake prices, you can use any combination of cake prices to reach the total amount. Note that each cake can be used as many times as needed to get the exact total. ----- **Input** The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N, representing the total price. ----- **Output** For each test case, print the minimum number of cakes whose total price is exactly N. ----- **Constraints** 1 ≤ T ≤ 5 1 ≤ N ≤ 10^5 There exists combinations of cakes whose total price is exactly N. ----- **Sample Input** 3 13 40 81 ----- **Sample Output** 3 4 1 ----- **Explanations** In the first sample, examples of the cakes whose total price is 13 are the following: 1+1+1+1+1+1+1+1+1+1+1+1+1 = 13 (13 cakes) 1+1+1+1+1+1+1+1+1+1+1+1+3 = 13 (13 cakes) 1+3+9 = 13 (3 cakes) Here the minimum number of cakes is 3. In the last sample, the total is exactly 81, which is already a power of 3 (3^4). Therefore, only one cake is needed to reach the total price. Consider larger examples where cakes need to be combined in various ways to get the exact total desired.","solution":"def min_cakes_to_sum(total): Returns the minimum number of cakes whose total price is exactly equal to a given total. Each cake price is a power of 3: 3^0, 3^1, 3^2, etc. cakes = [] power = 1 while power <= total: cakes.append(power) power *= 3 cakes.reverse() count = 0 for cake in cakes: if total == 0: break if total >= cake: count += total // cake total %= cake return count def process_test_cases(t, cases): results = [] for case in cases: results.append(min_cakes_to_sum(case)) return results"},{"question":"You are given an integer array `A` of size `N`. Your task is to find the smallest positive integer that is missing from the array `A`. An integer is considered missing if it is not present in `A` but all integers smaller than it are present in `A`. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ A[i] ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print the smallest positive integer that is missing from the array `A`. -----Sample Input----- 5 2 3 4 1 6 -----Sample Output----- 5 In this case, the integers 1 through 4 are present in the array, so the smallest missing positive integer is 5.","solution":"def smallest_missing_positive_integer(N, A): Returns the smallest positive integer that is missing from the array A. A = set(A) # Convert list to a set for O(1) look-up times smallest_missing = 1 while smallest_missing in A: smallest_missing += 1 return smallest_missing"},{"question":"In the land of Algorath, they use a special communication system that only allows for palindrome sequences. To enable faster messaging, they\'ve developed an encoding scheme that allows for efficient transmission of non-palindromic messages by inserting the fewest possible characters to make any given string a palindrome. Your task is to create an algorithm that determines the minimum number of characters that need to be inserted to make a given string palindrome. -----Constraints----- - The given string will only contain lowercase English letters. - 1 leq length of the string leq 1000 -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print the minimum number of characters that need to be inserted to make the string a palindrome. -----Sample Input----- abcb -----Sample Output----- 1 In this example, the minimum insertion to make \\"abcb\\" a palindrome is \\"abcba\\", where only one \'a\' is inserted.","solution":"def min_insertions_to_make_palindrome(s: str) -> int: Returns the minimum number of insertions required to make the string s a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Iterate over the table diagonally for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l + 1][r - 1] else: dp[l][r] = 1 + min(dp[l + 1][r], dp[l][r - 1]) return dp[0][n - 1]"},{"question":"You are given a list of non-negative integers, where each integer represents an elevation on a vertical line. Imagine that water is poured over this line and would settle in the troughs between elevations. Your task is to determine the total amount of water that would be trapped between the elevations after the water has settled. -----Input----- The input consists of a single line containing a space-separated list of non-negative integers e_1, e_2, ..., e_n (0 le e_i le 10^5, 1 le n le 10^5) which represent the heights of the elevations. -----Output----- Print one integer res which is the total amount of water trapped between the elevations. -----Example----- Input 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 -----Note----- In the example provided, input elevations form a list [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]. Visualize this as a bar chart where the height of each bar corresponds to the value in the list. After pouring water over the entire bar chart, the total amount of water trapped between the bars is 6 units.","solution":"def trap_water(elevations): Returns the total amount of water that is trapped between the elevations after raining. Assumes the input elevations is a list of non-negative integers. if not elevations: return 0 n = len(elevations) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], elevations[i]) right_max[n - 1] = elevations[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], elevations[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - elevations[i] return water_trapped"},{"question":"Given an array of integers, find the subarray with the maximum sum. Your program should answer for a given number of test cases. Constraints * 1 ≤ number of elements in the array ≤ 100000 * -1000 ≤ element value ≤ 1000 * 1 ≤ number of test cases ≤ 10000 Input In the first line, an integer T denoting the number of test cases is given. In the following lines, each test case consists of: - The first line contains an integer N denoting the number of elements in the array. - The second line contains N space-separated integers representing the array elements. Output For each test case, print an integer representing the maximum sum of any contiguous subarray. Example Input 2 4 1 2 3 4 6 -2 1 -3 4 -1 2 1 -5 4 Output 10 5","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray using Kadane\'s Algorithm. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] nums = test_cases[i][1] results.append(max_subarray_sum(nums)) return results"},{"question":"You are tasked with creating a Python module for handling basic string manipulations. This module will have three functions, and you will also write unittests for each function to ensure correctness. # Functions Description 1. `capitalize_words` function: - This function takes a string as input and returns the string with the first letter of each word capitalized. - If the input is an empty string, return an empty string. - Example: ```python capitalize_words(\\"hello world\\") -> \\"Hello World\\" capitalize_words(\\"\\") -> \\"\\" ``` 2. `remove_vowels` function: - This function takes a string as input and returns the string with all vowels (a, e, i, o, u, A, E, I, O, U) removed. - If the input is an empty string, return an empty string. - Example: ```python remove_vowels(\\"hello\\") -> \\"hll\\" remove_vowels(\\"AEIOU\\") -> \\"\\" ``` 3. `reverse_string` function: - This function takes a string as input and returns the string reversed. - If the input is an empty string, return an empty string. - Example: ```python reverse_string(\\"hello\\") -> \\"olleh\\" reverse_string(\\"\\") -> \\"\\" ``` # Part 1: Implement the functions Implement the three functions described above. # Part 2: Write Unittests Write unittests for each of the three functions. Each function should have **EXACTLY TWO** test cases (no more, no less). Use the `unittest` module to write your tests. Here\'s an example of how a test for the `capitalize_words` function might look: ```python import unittest from string_module import capitalize_words class TestStringManipulations(unittest.TestCase): def test_capitalize_words(self): self.assertEqual(capitalize_words(\\"hello world\\"), \\"Hello World\\") self.assertEqual(capitalize_words(\\"\\"), \\"\\") if __name__ == \'__main__\': unittest.main() ``` Remember that you need to write two test cases for each function to complete this task.","solution":"def capitalize_words(s): Capitalizes the first letter of each word in the string. return \' \'.join(word.capitalize() for word in s.split()) def remove_vowels(s): Removes all vowels (a, e, i, o, u, A, E, I, O, U) from the string. vowels = \\"aeiouAEIOU\\" return \'\'.join(char for char in s if char not in vowels) def reverse_string(s): Reverses the input string. return s[::-1]"},{"question":"Alya is organizing a coding competition, and part of her task is to handle the registration of participants and teams. Each team has a name and a list of participants, and a participant cannot be a member of more than one team. Due to the high volume of registrations, she needs a way to check for duplicates more efficiently. Given a list of team registrations, write a program that identifies teams with duplicate participants and lists them out. Each team is uniquely identified by its name and a list of participants. Input - The first line contains an integer t (1 ≤ t ≤ 100) – the number of test cases. - Each test case begins with an integer n (1 ≤ n ≤ 1000) – the number of teams. - The next n lines describe each team. Each line starts with a string name (1 ≤ name ≤ 32), the name of the team followed by a list of m (1 ≤ m ≤ 100) strings (1 ≤ length of each string ≤ 32), the names of participants. Output - For each test case, output the names of all teams that have any participant in common with another team, each on a new line. - If no teams share any participants, output \\"No duplicates\\". - Print a blank line between the outputs of different test cases. Example Input 2 3 TeamA Alice Bob Charlie TeamB Dave Eve Bob TeamC Frank Alice 2 TeamX A B C TeamY D E F Output TeamA TeamB TeamC No duplicates Explanation In the first test case, TeamA and TeamC both have \\"Alice\\" and TeamA and TeamB both have \\"Bob\\". Thus, all these teams should be listed as having duplicates. TeamX and TeamY in the second test case share no participants, thus the output is \\"No duplicates\\" for that test case.","solution":"def find_duplicate_teams(test_cases): results = [] for case in test_cases: participants_teams = {} duplicate_teams = set() for team in case: team_name = team[0] participants = team[1:] for participant in participants: if participant not in participants_teams: participants_teams[participant] = [] participants_teams[participant].append(team_name) for team_list in participants_teams.values(): if len(team_list) > 1: duplicate_teams.update(team_list) if duplicate_teams: results.append(sorted(duplicate_teams)) else: results.append([\\"No duplicates\\"]) return results def process_input(input_str): input_lines = input_str.strip().split(\'n\') index = 0 test_cases = [] t = int(input_lines[index]) index += 1 for _ in range(t): n = int(input_lines[index]) index += 1 case = [] for _ in range(n): line = input_lines[index].split() case.append(line) index += 1 test_cases.append(case) return test_cases def process_output(results): output_str = \\"\\" for result in results: output_str += \\"n\\".join(result) + \\"nn\\" return output_str.strip() input_str = \'\'\'2 3 TeamA Alice Bob Charlie TeamB Dave Eve Bob TeamC Frank Alice 2 TeamX A B C TeamY D E F\'\'\' test_cases = process_input(input_str) results = find_duplicate_teams(test_cases) output_str = process_output(results) print(output_str)"},{"question":"A new bakery in town sells cupcakes in boxes. Each box contains M cupcakes. A group of L people want to buy cupcakes from this bakery. They will need to buy several full boxes such that the total number of cupcakes purchased is at least L. You need to determine the minimum number of boxes they need to buy so that everyone gets at least 1 cupcake, and calculate how many extra cupcakes there will be after distribution. -----Input:----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers M and L. -----Output:----- For each test case, print two integers on a single line: the minimum number of boxes needed and the number of extra cupcakes remaining after distribution. -----Constraints----- 1<=T<=10 1<=M<=10^5 1<=L<=10^5 -----Sample Input:----- 2 6 10 8 15 -----Sample Output:----- 2 2 2 1 -----EXPLANATION:----- Explanation case 1: Each box contains 6 cupcakes, and there are 10 people. They need at least 2 boxes (2*6=12 cupcakes), and the 2 extra cupcakes will remain. Explanation case 2: Each box contains 8 cupcakes, and there are 15 people. They need at least 2 boxes (2*8=16 cupcakes), and 1 extra cupcake will remain.","solution":"def minimum_boxes_and_extra_cupcakes(T, test_cases): results = [] for M, L in test_cases: boxes_needed = (L + M - 1) // M # This is equivalent to math.ceil(L / M) total_cupcakes = boxes_needed * M extra_cupcakes = total_cupcakes - L results.append((boxes_needed, extra_cupcakes)) return results"},{"question":"Given an array of integers, return the maximum length of a contiguous subarray where the absolute difference between any two elements is less than or equal to 1. For example: ```python [1, 3, 2, 2, 5, 2, 3, 7] ``` In this example, the longest contiguous subarray meeting the criteria would be `[3, 2, 2, 2, 3]`, which has a length of 5. Write a function `find_max_length_subarray(arr: List[int]) -> int` that takes in an array of integers and returns an integer representing the maximum length of such a subarray. # Constraints: - The input array will have at least one element and no more than (10^5) elements. - Each element in the input array will be an integer between (-10^5) and (10^5). # Example: ```python arr = [4, 6, 5, 3, 3, 1] find_max_length_subarray(arr) # Output: 3 ``` In this example, the subarray `[6, 5, 5]` or `[5, 3, 3]` or `[3, 3, 5]` would have a length of 3.","solution":"from typing import List def find_max_length_subarray(arr: List[int]) -> int: if len(arr) == 0: return 0 count = {} max_len = 0 for num in arr: if num not in count: count[num] = 1 else: count[num] += 1 # Check length of subarray with elements num and num+1 current_len = count[num] + count.get(num + 1, 0) max_len = max(max_len, current_len) # Check length of subarray with elements num and num-1 current_len = count[num] + count.get(num - 1, 0) max_len = max(max_len, current_len) return max_len"},{"question":"Suzuki needs help organizing the supplies for his dojo! Every month, Suzuki receives a shipment of supplies that he needs to ensure are stored properly until needed. The supplies come with labels indicating their type and expiration date. Suzuki wants to store the supplies in ascending order of their expiration dates. You will be given a list of supplies, where each supply is represented as a dictionary with keys \\"name\\" for the type of the supply and \\"expiration\\" for the expiration date in the format \\"YYYY-MM-DD\\". Sort this list and return it in ascending order of expiration dates. If two supplies have the same expiration date, they should be sorted by their names in alphabetical order. Here is an example input: ```python supplies = [ {\\"name\\": \\"Rice\\", \\"expiration\\": \\"2023-07-10\\"}, {\\"name\\": \\"Soy Sauce\\", \\"expiration\\": \\"2023-06-15\\"}, {\\"name\\": \\"Tofu\\", \\"expiration\\": \\"2023-05-01\\"}, {\\"name\\": \\"Seaweed\\", \\"expiration\\": \\"2023-05-01\\"} ] ``` Here is an example return from your function: ```python sorted_supplies = [ {\\"name\\": \\"Seaweed\\", \\"expiration\\": \\"2023-05-01\\"}, {\\"name\\": \\"Tofu\\", \\"expiration\\": \\"2023-05-01\\"}, {\\"name\\": \\"Soy Sauce\\", \\"expiration\\": \\"2023-06-15\\"}, {\\"name\\": \\"Rice\\", \\"expiration\\": \\"2023-07-10\\"} ] ``` Ensure your function sorts the supplies based on the described criteria, allowing Suzuki to easily manage and access the dojo supplies.","solution":"def sort_supplies(supplies): Sorts the supplies in ascending order of their expiration dates. If two supplies have the same expiration date, they should be sorted by their names in alphabetical order. :param supplies: List of supplies (each supply is a dict with keys \'name\' and \'expiration\') :return: Sorted list of supplies return sorted(supplies, key=lambda x: (x[\'expiration\'], x[\'name\']))"},{"question":"Write a function ```python longest_consecutive_subsequence(arr) ``` that finds the length of the longest subsequence of consecutive integers in an unsorted array. E.g. ```python longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) == 4 # The longest consecutive subsequence is [1, 2, 3, 4]. longest_consecutive_subsequence([1, 9, 3, 10, 4, 20, 2]) == 4 # The longest consecutive subsequence is [1, 2, 3, 4]. longest_consecutive_subsequence([1, 2, 3, 4, 5]) == 5 # The longest consecutive subsequence is [1, 2, 3, 4, 5]. longest_consecutive_subsequence([10, 5, 20, 6, 2, 8, 9, 7, 1]) == 6 # The longest consecutive subsequence is [5, 6, 7, 8, 9, 10]. ```","solution":"def longest_consecutive_subsequence(arr): Finds the length of the longest subsequence of consecutive integers in an unsorted array. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Farmer Joe wants to build a fence around his rectangular farm field to keep the animals away. Given the dimensions of the field, he needs to buy enough fencing material to surround the entire field. However, the fencing material in his local store is sold in rolls of a fixed length. Write a program to help Farmer Joe determine the minimum number of rolls he needs to buy. # Input The input consists of: - A single integer `T` (1 ≤ T ≤ 100) - the number of test cases. - For each test case: - Two integers `L` and `W` (1 ≤ L, W ≤ 1000) - the length and width of the rectangular field. - An integer `R` (1 ≤ R ≤ 1000) - the length of each roll of fencing material. # Output For each test case, print a single integer, the minimum number of rolls Farmer Joe needs to buy. # Example Input ``` 2 20 30 15 40 50 25 ``` Output ``` 7 8 ``` # Explanation In the first test case: - The perimeter of the field is 2*(20 + 30) = 100. - Since each roll is 15 units long, Farmer Joe needs ceil(100 / 15) = 7 rolls. In the second test case: - The perimeter of the field is 2*(40 + 50) = 180. - Since each roll is 25 units long, Farmer Joe needs ceil(180 / 25) = 8 rolls.","solution":"import math def minimum_rolls_needed(T, test_cases): results = [] for case in test_cases: L, W, R = case perimeter = 2 * (L + W) rolls = math.ceil(perimeter / R) results.append(rolls) return results"},{"question":"Given an array of integers, write a function to return the indices of the two numbers such that they add up to a specific target. The function should return an array containing these indices. You may assume that each input would have exactly one solution, and you may not use the same element twice. Input A tuple containing two elements: 1. An array `nums` of length `n` (2 ≤ n ≤ 10^4) containing integers (-10^9 ≤ nums[i] ≤ 10^9). 2. An integer `target` representing the target sum (-10^9 ≤ target ≤ 10^9). Output A list of two integers representing the indices of the two numbers that add up to the given `target`. Examples Input ([2, 7, 11, 15], 9) Output [0, 1] Input ([3, 2, 4], 6) Output [1, 2]","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list `nums` that add up to `target`. num_map = {} # To store the number and its index for idx, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], idx] num_map[num] = idx return [] # In case there is no solution (although the problem states there is exactly one)"},{"question":"In many video games, especially those involving virtual worlds or simulations, managing character stats is crucial. Suppose you have a role-playing game where each character has a set of attributes, represented by the number of points in Strength, Agility, and Intelligence. These attributes can fluctuate throughout the game depending on various events, such as gaining experience or using special items. Imagine you have a record of events that involve changes to character stats. You need to determine the final status of a character’s attributes after processing these events. You are given the initial points for Strength, Agility, and Intelligence of a character. Subsequently, you receive a list of events where each event modifies one of these attributes by a specific amount. Each event is represented by a tuple (attribute, value) where: - attribute is a string \\"Strength\\", \\"Agility\\", or \\"Intelligence\\". - value is an integer that can be positive (indicating an increase) or negative (indicating a decrease). Write a function to determine the final stats of the character after all events have been processed. Input The first line contains three integers: S, A, I (1 ≤ S, A, I ≤ 1000) representing the initial points in Strength, Agility, and Intelligence, respectively. The second line contains an integer N (1 ≤ N ≤ 100 000) representing the number of events. Each of the next N lines contains a string and an integer: attribute value, indicating the attribute to be modified and the amount of modification. Output Output three integers representing the final points in Strength, Agility, and Intelligence in that order. Example Input 10 15 20 5 Strength 5 Agility -3 Intelligence 10 Strength -2 Agility 7 Output 13 19 30 Explanation Initially, the character has Strength 10, Agility 15, and Intelligence 20. After processing the events: - Strength 10 + 5 - 2 = 13 - Agility 15 - 3 + 7 = 19 - Intelligence 20 + 10 = 30","solution":"def character_stats(S, A, I, events): Given initial points for Strength (S), Agility (A), and Intelligence (I), and a list of events modifying these attributes, return the final points for Strength, Agility, and Intelligence. Parameters: S (int): Initial Strength points A (int): Initial Agility points I (int): Initial Intelligence points events (list of tuples): List of events modifying the attributes Returns: tuple: final points for Strength, Agility, and Intelligence strength = S agility = A intelligence = I for event in events: attribute, value = event if attribute == \\"Strength\\": strength += value elif attribute == \\"Agility\\": agility += value elif attribute == \\"Intelligence\\": intelligence += value return strength, agility, intelligence"},{"question":"You are given a string `s`, which may contain both uppercase and lowercase letters, and a string `t` which contains a list of characters to be searched within `s`. Your task is to find the smallest substring in `s` that contains all the characters in `t` (including multiplicity). If no such substring exists, output an empty string `\\"\\"`. If there are multiple such substrings, return the one which appears first. -----Input----- The first line contains one string `s` (1 le |s| le 10^5) — the string in which the substring is to be found. The second line contains one string `t` (1 le |t| le 100) — the string containing the characters of the substring to be searched for. -----Output----- Print one string — the smallest substring of `s` that contains all the characters in `t`. If no such substring exists, print an empty string `\\"\\"`. -----Examples----- Input ADOBECODEBANC ABC Output BANC Input a aa Output \\"\\" Input abcdebcabc abc Output abc -----Note----- In the first example, \\"BANC\\" is the minimum window in \\"ADOBECODEBANC\\" which contains all the characters \\"A\\", \\"B\\", and \\"C\\". In the second example, it is not possible to form a substring with \\"aa\\" from the single character string \\"a\\". Therefore, the output is an empty string. In the third example, \\"abc\\" is the first smallest substring of \\"abcdebcabc\\" that contains all the characters \\"a\\", \\"b\\", and \\"c\\".","solution":"from collections import Counter, defaultdict def min_window_substr(s, t): if not t or not s: return \\"\\" dict_t = Counter(t) required = len(dict_t) # Filter all the characters from s into a new list along with their index. # The filtering is done so that the sliding window can only iterate over the characters that could be part of the solution. filtered_s = [(i, ch) for i, ch in enumerate(s) if ch in dict_t] l, r = 0, 0 formed = 0 window_counts = defaultdict(int) ans = float(\\"inf\\"), None, None while r < len(filtered_s): char = filtered_s[r][1] window_counts[char] += 1 if window_counts[char] == dict_t[char]: formed += 1 while l <= r and formed == required: char = filtered_s[l][1] end = filtered_s[r][0] start = filtered_s[l][0] if end - start + 1 < ans[0]: ans = (end - start + 1, start, end) window_counts[char] -= 1 if window_counts[char] < dict_t[char]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"Given an m x n matrix where each element is an integer, return all possible paths from the top-left corner to the bottom-right corner. You can only move right or down from any element in the matrix. You should return the paths as a list of strings, where each string represents a sequence of moves (\'R\' for right, \'D\' for down). Example 1: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [\\"RRDD\\", \\"RDRD\\", \\"RDDR\\", \\"DRRD\\", \\"DRDR\\", \\"DDRR\\"] Example 2: Input: matrix = [ [1, 2], [3, 4] ] Output: [\\"RD\\", \\"DR\\"] Example 3: Input: matrix = [ [1] ] Output: [\\"\\"] Constraints: 1 <= m, n <= 10","solution":"def find_all_paths(matrix): def dfs(i, j, path): if i == m-1 and j == n-1: paths.append(path) return if i < m-1: dfs(i+1, j, path + \'D\') if j < n-1: dfs(i, j+1, path + \'R\') m = len(matrix) n = len(matrix[0]) paths = [] dfs(0, 0, \\"\\") return paths"},{"question":"# Number Spiral Diagonals In a spiral of numbers starting from 1 in the center and moving to the right in a clockwise direction, an interesting pattern emerges along the diagonals. For example, an n x n spiral with n = 5 looks like this: ``` 21 22 23 24 25 20 7 8 9 10 19 6 1 2 11 18 5 4 3 12 17 16 15 14 13 ``` Here, the numbers on the diagonals are: 1, 3, 5, 7, 9, 13, 17, 21, 25, 5, 9, 13, 17, and so forth. The sum of the numbers on the diagonals in a 5 by 5 spiral is 101. # Task Write a function `sumDiagonals` (in Python: `sum_diagonals`) that takes an odd integer `n` (where 1 ≤ n < 1001) and returns the sum of the numbers on the diagonals in an `n` by `n` spiral. For example, ```python sumDiagonals(5) => 101 sumDiagonals(3) => 25 sumDiagonals(7) => 261 ``` # Note A brute force solution with nested loops might be inefficient for large values of `n`, so try to devise an efficient algorithm. The provided test cases will include large values of `n`, such as `1001`, which would be impractical to handle with a brute force approach.","solution":"def sum_diagonals(n): if n == 1: return 1 total = 1 current_number = 1 for layer in range(1, n//2 + 1): step = layer * 2 for _ in range(4): current_number += step total += current_number return total"},{"question":"Write a function that takes a string containing sentences and compresses it by shortening each word to its first and last character, with the number of characters in between them. Words that are already 2 characters long or less should remain unchanged. Preserve the punctuation and spaces. For example: \\"Hello, world! This is a test.\\" -> \\"H3o, w3d! T2s is a t2t.\\" If the input is empty, return an empty string.","solution":"def compress_sentence(sentence): def compress_word(word): if len(word) <= 2: return word return f\'{word[0]}{len(word) - 2}{word[-1]}\' # Use list to aggregate results result = [] word = \'\' for char in sentence: if char.isalpha(): word += char else: if word: result.append(compress_word(word)) word = \'\' result.append(char) # Add the last word if there is one if word: result.append(compress_word(word)) return \'\'.join(result)"},{"question":"You are working on a project management tool that needs to track task dependencies. Each task can depend on multiple other tasks, and before a task can be executed, all its dependencies must be completed first. Given a list of tasks and their respective dependencies, you need to determine a possible order to execute tasks such that all dependencies are respected. -----Input----- The first line of the input contains an integer t (1 le t le 10^5 ) — the number of tasks. The following t lines each contain two integers a_i and b_i (1 le a_i, b_i le 10^9), where a_i is the task ID and b_i is the task that a_i depends on. -----Output----- Print a space-separated list of task IDs, in an order that respects their dependencies. If there are multiple valid orders, print any one of them. If no valid order exists, print -1. -----Example----- Input 4 2 1 3 1 4 2 4 3 Output 1 2 3 4 Input 3 2 3 3 1 1 2 Output -1 -----Note----- In the first example, task 2 depends on task 1, task 3 depends on task 1, and task 4 depends on both task 2 and task 3. A valid order is 1, 2, 3, 4, but other valid orders might exist. In the second example, the dependencies form a cycle: task 2 depends on task 3, task 3 depends on task 1, and task 1 depends on task 2. Thus, there is no valid order to complete the tasks.","solution":"from collections import defaultdict, deque def find_task_order(t, dependencies): # Create a graph and in-degree count graph = defaultdict(list) in_degree = defaultdict(int) nodes = set() for a, b in dependencies: graph[b].append(a) in_degree[a] += 1 nodes.add(a) nodes.add(b) # Find all starting points (in-degree 0) zero_in_degree_queue = deque([node for node in nodes if in_degree[node] == 0]) sorted_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() sorted_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) if len(sorted_order) == len(nodes): return sorted_order else: return -1 # Example usage # deps = [(2, 1), (3, 1), (4, 2), (4, 3)] # print(find_task_order(4, deps)) # [1, 2, 3, 4] or any valid order"},{"question":"You are given an integer array `arr` of length `n`. Your task is to find the minimum number of operations required to make the array elements pairwise distinct. In one operation, you can increase or decrease any element of the array by 1. Input Format - The first line contains an integer `T`, the number of test cases. - The next `2*T` lines contain: - An integer `n` denoting the length of the array. - A line of `n` space-separated integers denoting the elements of the array. Output Format For each test case, output a single line with the minimum number of operations required. Constraints - 1 leq T leq 1000 - 1 leq n leq 1000 - -10^9 leq arr[i] leq 10^9 Sample Input 2 3 1 2 2 5 10 10 10 10 10 Sample Output 1 10 Explanation In the first test case, you can increase or decrease the second `2` to make the array `[1, 2, 3]`, resulting in 1 operation. In the second test case, you need to perform 4 operations to make all `10`s distinct, resulting in the array `[10, 11, 12, 13, 14]`.","solution":"def min_operations_to_make_distinct(arr): arr.sort() operations = 0 for i in range(1, len(arr)): if arr[i] <= arr[i - 1]: operations += arr[i - 1] + 1 - arr[i] arr[i] = arr[i - 1] + 1 return operations def solve(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(min_operations_to_make_distinct(arr)) return results"},{"question":"Given an array of integers, your task is to find out if there is a subarray (contiguous elements) that sums to a given target value. Example 1: Input: arr = [1, 2, 3, 7, 5], target = 12 Output: True Explanation: The subarray [3, 7, 2] sums up to 12. Example 2: Input: arr = [1, 2, 3, 4, 5], target = 9 Output: True Explanation: The subarray [2, 3, 4] sums up to 9. Example 3: Input: arr = [1, 2, 3, 4, 5], target = 20 Output: False Explanation: There isn\'t any subarray that sums up to 20. Note: The length of the array is between [1, 10,000]. The value of each element in the array is between [-1000, 1000].","solution":"def subarray_sum(arr, target): Function to determine if a subarray exists that sums to a given target value. :param arr: List of integers :param target: Target sum for the subarray :return: Boolean indicating the existence of such a subarray # Dictionary to store the cumulative sum up to each index cum_sum_dict = {} cum_sum = 0 # Traverse through the array for index, value in enumerate(arr): # Update the cumulative sum cum_sum += value # Check if the cumulative sum equals the target if cum_sum == target: return True # Check if (cum_sum - target) exists in the dictionary if (cum_sum - target) in cum_sum_dict: return True # Store the current cumulative sum in the dictionary cum_sum_dict[cum_sum] = index return False"},{"question":"There is an undirected graph with N vertices and M edges. Each vertex has a value associated with it. The graph is described by M edges and N vertex values. Find the maximum sum of values of vertices in a simple path in this graph (a simple path means a path that does not repeat any vertices). Constraints * 1 leq N leq 10^5 * 1 leq M leq 10^5 * 1 leq vertex values leq 10^9 * The given graph can be disconnected and is not necessarily a tree. Input The input is given from Standard Input in the following format: N M value_1 value_2 ... value_N u_1 v_1 u_2 v_2 : u_M v_M Output Print the maximum sum of values of vertices in a simple path in the graph. Examples Input 4 3 1 2 3 4 1 2 2 3 3 4 Output 10 Input 5 4 10 20 30 25 15 1 2 2 3 3 1 4 5 Output 60","solution":"from collections import defaultdict def max_sum_simple_path(N, M, values, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) max_sum = 0 def dfs(node): visited[node] = True max_single_path = values[node - 1] for neigh in graph[node]: if not visited[neigh]: max_single_path = max(max_single_path, values[node - 1] + dfs(neigh)) visited[node] = False return max_single_path for i in range(1, N + 1): if not visited[i]: max_sum = max(max_sum, dfs(i)) return max_sum # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) values = list(map(int, data[2:N+2])) edges = [] for i in range(N+2, len(data), 2): u = int(data[i]) v = int(data[i+1]) edges.append((u, v)) print(max_sum_simple_path(N, M, values, edges))"},{"question":"In an ancient kingdom, there exist magical squares that are believed to have special properties. A square is considered \\"magical\\" if the sums of the numbers in each row, each column, and both main diagonals are all the same. Assume you have a 3x3 grid filled with integers, and you need to determine if it forms a magical square. Given the grid, create a program that decides if it is a magical square. Input The input consists of three lines, each containing three integers separated by spaces. These integers represent the values of the 3x3 grid, with the first line representing the first row, the second line representing the second row, and the third line representing the third row. Output Print \\"YES\\" if the given 3x3 grid is a magical square, otherwise print \\"NO\\". Example Input 8 1 6 3 5 7 4 9 2 Output YES Input 8 1 6 3 5 7 4 9 3 Output NO Input 4 9 2 3 5 7 8 1 6 Output YES Explanation: In the first and third examples, the sum of the numbers in each row, each column, and both main diagonals equals 15, thus forming a magical square. In the second example, the sums do not match, thus it is not a magical square.","solution":"def is_magical_square(grid): def all_equal(lst): return lst.count(lst[0]) == len(lst) # Calculate row sums row_sums = [sum(row) for row in grid] # Calculate column sums col_sums = [sum([grid[row][col] for row in range(3)]) for col in range(3)] # Calculate the sums of the diagonals diag1_sum = sum([grid[i][i] for i in range(3)]) diag2_sum = sum([grid[i][2-i] for i in range(3)]) # Combine all sums all_sums = row_sums + col_sums + [diag1_sum, diag2_sum] # Check if all sums are equal if all_equal(all_sums): return \\"YES\\" else: return \\"NO\\""},{"question":"Julia has a collection of N interesting books, and each book has a unique number written on its cover. She wants to organize her collection on a single shelf in such a way that her favorite book appears exactly in the middle of the shelf (if N is odd) or one of the two middle positions (if N is even). Julia’s favorite book is represented by the number F. Given an initial arrangement of the books and the position of Julia’s favorite book in that arrangement, determine if it’s possible to rearrange the books such that Julia’s favorite book ends up in the required position as described. Constraints * 1 leq N leq 100 * 1 leq F leq 10^4 * All book numbers and positions are integers. Input ``` The input is given from Standard Input in the following format: N A1 A2 A3 ... AN F ``` where: - N is the number of books. - A1 to AN are the books arranged in the initial order. - F is the number on Julia’s favorite book. Output ``` If it’s possible to rearrange the books to meet Julia\'s requirement, print `Yes`; otherwise, print `No`. ``` Examples Input ``` 5 3 8 1 7 2 7 ``` Output ``` Yes ``` Input ``` 4 2 4 6 8 3 ``` Output ``` No ```","solution":"def can_rearrange_books(N, books, F): if F not in books: return \\"No\\" idx = books.index(F) middle_idx = (N - 1) // 2 if N % 2 == 0: # If N is even, F should be in either middle_idx or middle_idx + 1 positions return \\"Yes\\" # If N is odd, F should be exactly in the middle_idx position return \\"Yes\\" def rearrange_books(N, books, F): if F in books: return \\"Yes\\" return \\"No\\""},{"question":"Charlie is working on a numerical analysis project and needs to compute the \\"balance score\\" for a given list of integers. The balance score of an integer list is defined as the sum of the absolute differences between each consecutive pair of elements in the list. Given a list of n integers a1, a2, ..., an, your task is to compute the balance score of the list. Input The first line contains an integer n (1 ≤ n ≤ 105). The second line contains n integers a[i] (1 ≤ a[i] ≤ 109), separated by spaces — the elements of the list. Output In a single line, print the balance score of the list. Example Input 5 1 3 6 10 15 Output 14 Input 3 7 7 7 Output 0 Note In the first sample, the balance score is calculated as follows: |1 - 3| + |3 - 6| + |6 - 10| + |10 - 15| = 2 + 3 + 4 + 5 = 14 In the second sample, since all elements are the same, the balance score is 0.","solution":"def balance_score(n, a): Returns the balance score of a given list of integers. Parameters: n (int): The number of integers in the list. a (list of int): The list of integers. Returns: int: The balance score of the list. if n < 2: return 0 score = 0 for i in range(1, n): score += abs(a[i] - a[i - 1]) return score"},{"question":"You are given a square matrix of integers `matrix` where the dimensions of the matrix are `n x n` and an integer `k`. Your task is to find the maximum sum of any submatrix of size `k x k` within the given matrix. A submatrix is defined as a contiguous block of cells in the matrix. The sum of a submatrix is the sum of all the integers within that submatrix. Return the maximum sum of any submatrix of size `k x k`. If the size of the matrix is smaller than `k`, return -1. # Examples Example 1: Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], k = 2 Output: 28 Explanation: The 2x2 submatrix with the maximum sum is: [[5, 6], [8, 9]] Its sum is 5 + 6 + 8 + 9 = 28. Example 2: Input: matrix = [[1, -1], [-1, 1]], k = 2 Output: 0 Explanation: The only 2x2 submatrix is the matrix itself: [[1, -1], [-1, 1]] Its sum is 1 + (-1) + (-1) + 1 = 0. Example 3: Input: matrix = [[1]], k = 1 Output: 1 Explanation: The only 1x1 submatrix is the element itself, with sum 1. Example 4: Input: matrix = [[1, 2], [3, 4]], k = 3 Output: -1 Explanation: The size of the matrix is smaller than the requested k=3, so return -1. # Constraints - `1 <= n <= 100` - `1 <= k <= 50` - `-100 <= matrix[i][j] <= 100`","solution":"def max_sum_submatrix(matrix, k): n = len(matrix) # If the size of the matrix is smaller than k, return -1 if k > n: return -1 # Initialize the maximum sum to a very small number max_sum = float(\'-inf\') # Calculate the sums of all k x k submatrices for i in range(n - k + 1): for j in range(n - k + 1): current_sum = 0 for x in range(i, i + k): for y in range(j, j + k): current_sum += matrix[x][y] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Maria operates a shipping company and wants to optimize the loading of cargo containers to maximize the total value of loaded goods. Each cargo container can carry a specific maximum weight, and you have a list of items, each with a specific weight and value. Maria needs a program to help her determine the maximum value of goods that can be loaded into the cargo container without exceeding its weight capacity. You are given the maximum weight the container can carry and a list of items, where each item has a weight and a value. Your task is to find the maximum total value of items that can be added to the container without exceeding the container\'s weight capacity. Input: - The first line of input contains an integer W (1 ≤ W ≤ 10000) representing the maximum weight capacity of the container. - The second line contains an integer N (1 ≤ N ≤ 1000) representing the number of items. - The next N lines each contain two integers wi (1 ≤ wi ≤ 10000) and vi (1 ≤ vi ≤ 10000) representing the weight and value of the i-th item. Output: - Print a single integer representing the maximum total value of items that can be added to the container without exceeding the weight capacity. Example: Input: 50 3 10 60 20 100 30 120 Output: 220 Explanation: - The container has a maximum weight capacity of 50. - There are 3 items with the given weights and values. - The optimal selection of items is to choose the first and second items, which have weights 10 and 20, and values 60 and 100 respectively, for a total value of 160 without exceeding the weight capacity. - Another optimal selection is to choose the second and third items, which have weights 20 and 30, and values 100 and 120 respectively, for a total value of 220 without exceeding the weight capacity. Hence, 220 is the maximum value.","solution":"def knapsack(W, items): Determines the maximum value of items that can be loaded into a container without exceeding the weight capacity. Parameters: W (int): Maximum weight capacity of the container items (list of tuples): List of tuples where each tuple contains (weight, value) of the item Returns: int: Maximum total value of items that can be added to the container N = len(items) dp = [0] * (W + 1) for weight, value in items: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W] def solve_knapsack_problem(W, N, item_list): items = [] for item in item_list: weight, value = map(int, item.split()) items.append((weight, value)) return knapsack(W, items)"},{"question":"In a certain village, there is a unique habit of creating paper lanterns during festivals. Each lantern is made from several pieces of colored paper. The villagers follow a specific pattern: for any given lantern, the amount of paper used for each piece is determined by the equation: [ size_{i, j} = i cdot j ] where ( i ) is the index of the piece along the height and ( j ) is the index along the width. Given the dimensions of the matrix, the villagers want to know how many pieces of exact size can be found within a range. # Input: The first line contains four integers (a), (b), (c), and (d) ((1 le a le b le 1000, 1 le c le d le 1000)), which define the range for the height (a) to (b) and the range for the width (c) to (d). # Output: Print a single integer - the number of pieces of exact size within the given range. # Examples: Example 1 **Input** ``` 1 3 2 4 ``` **Output** ``` 6 ``` Example 2 **Input** ``` 2 5 3 7 ``` **Output** ``` 16 ``` Example 3 **Input** ``` 3 3 3 3 ``` **Output** ``` 1 ``` # Note: In the first example, the pieces of exact size that can be formed are: [size_{1,2}, size_{1,3}, size_{1,4}, size_{2,2}, size_{2,3}, size_{2,4}, size_{3,2}, size_{3,3}, size_{3,4}] This yields 6 unique sizes. In the second example, valid sizes are counted within the ranges leading to 16 such sizes.","solution":"def count_pieces_within_range(a, b, c, d): Given the ranges for height and width, counts the number of valid piece sizes. count = 0 for i in range(a, b + 1): for j in range(c, d + 1): count += 1 return count"},{"question":"Implement a class `MinHeap` that creates a minimum heap data structure supporting the following operations: - `insert(x)`: Inserts an element `x` into the heap. - `extract_min()`: Extracts and returns the smallest element from the heap. If the heap is empty, return -1. The `MinHeap` should be initialized with an empty list to hold the values. Example 1: Input: operations = [\\"insert 3\\", \\"insert 1\\", \\"extract_min\\", \\"insert 2\\", \\"extract_min\\", \\"extract_min\\"] Output: [1, 2, 3] Explanation: - After `insert 3`, heap: [3] - After `insert 1`, heap: [1, 3] - After `extract_min`, the smallest element 1 is extracted. Remaining heap: [3] - After `insert 2`, heap: [2, 3] - After `extract_min`, the smallest element 2 is extracted. Remaining heap: [3] - After `extract_min`, the smallest element 3 is extracted. Heap is now empty. Example 2: Input: operations = [\\"extract_min\\"] Output: [-1] Explanation: - Trying to extract_min from an empty heap returns -1. Your Task: - Complete the class `MinHeap` with methods `insert()` and `extract_min()`. The `insert(x)` method should add an element to the heap, and the `extract_min()` method should remove and return the smallest element. - Elements should be managed to ensure the heap property is maintained after each insertion or extraction. Expected Time Complexity: - `insert()`: O(log n) - `extract_min()`: O(log n) Expected Auxiliary Space: O(n) for heap storage. Constraints: - Multiple `insert` and `extract_min` operations can be performed, up to a total of 10^5 operations. - The inserted values are integers in the range [1, 10^4].","solution":"import heapq class MinHeap: def __init__(self): self.heap = [] def insert(self, x): Insert an element into the heap. heapq.heappush(self.heap, x) def extract_min(self): Extract and return the smallest element from the heap. If the heap is empty, return -1. if self.heap: return heapq.heappop(self.heap) else: return -1"},{"question":"Functional Area Mapping You are tasked with designing a system that maps several functionality components in a tech company to their respective teams. Each functionality component can only belong to one team. There are a fixed number of teams, and some functionality components have dependencies on other components, meaning one component must be assigned to a team which is different from the team of its dependency. Your job is to determine if it is possible to assign all functionality components to teams satisfying the constraints, and if yes, provide one possible assignment. # Input The input consists of multiple test cases. Each test case is described as follows: - The first line contains two integers t and f, where t (1 ≤ t ≤ 100) represents the number of teams and f (1 ≤ f ≤ 100) represents the number of functionality components. - The next f lines contain two integers each, a_i and b_i (1 ≤ a_i, b_i ≤ f and a_i ne b_i), indicating that functionality component a_i has a dependency on functionality component b_i. # Output For each test case: - If it is possible to assign the functionality components to the teams such that no component and its dependency are assigned to the same team, output \\"YES\\" followed by the team assignments. - If it is not possible, output \\"NO\\". # Example Input: ``` 2 3 1 2 2 3 3 1 3 2 1 2 2 1 ``` Output: ``` NO YES 1 2 ``` Explanation: - In the first test case, no valid assignment is possible as there is a cyclic dependency among all three components. - In the second test case, a valid assignment is possible where component 1 is assigned to team 1 and component 2 is assigned to team 3. Design an efficient algorithm to solve this problem considering the constraints.","solution":"from collections import defaultdict, deque def is_bipartite(graph, f): color = [-1] * (f + 1) # Color -1 indicates unvisited nodes for i in range(1, f + 1): if color[i] == -1: # Not yet visited node queue = deque([i]) color[i] = 0 # Start coloring this component with color 0 while queue: u = queue.popleft() for v in graph[u]: if color[v] == -1: # Color with opposite color of current node color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: # Found same color neighbor in a supposed bipartite graph return False, [] return True, color def assign_teams(t, f, dependencies): graph = defaultdict(list) for a, b in dependencies: graph[a].append(b) graph[b].append(a) possible, color = is_bipartite(graph, f) if possible: assignment = [color[i] + 1 for i in range(1, f + 1)] return \\"YES\\", assignment else: return \\"NO\\", [] # Example Usage (wrapped in a function for demonstration) def map_functionalities_to_teams(test_cases): results = [] for t, f, dependencies in test_cases: result, assignment = assign_teams(t, f, dependencies) if result == \\"YES\\": results.append(f\\"YESn{\' \'.join(map(str, assignment))}\\") else: results.append(\\"NO\\") return results"},{"question":"Aliens have now developed a liking for prime numbers encoded in Morse code. They want to know if a Morse code string represents a prime number. Write a program that receives a Morse code string and checks if the decoded number is prime. Use the same Morse code conventions provided: 1 .---- 2 ..--- 3 ...-- 4 ....- 5 ..... 6 -.... 7 --... 8 ---.. 9 ----. 0 ----- Your program should return `True` if the decoded number is prime and `False` otherwise.","solution":"def morse_to_number(morse_code): morse_dict = { \'.----\': \'1\', \'..---\': \'2\', \'...--\': \'3\', \'....-\': \'4\', \'.....\': \'5\', \'-....\': \'6\', \'--...\': \'7\', \'---..\': \'8\', \'----.\': \'9\', \'-----\': \'0\' } if morse_code in morse_dict: return int(morse_dict[morse_code]) return None def is_prime(number): if number <= 1: return False for i in range(2, int(number ** 0.5) + 1): if number % i == 0: return False return True def is_morse_prime(morse_code): number = morse_to_number(morse_code) if number is None: raise ValueError(\\"Invalid Morse code\\") return is_prime(number)"},{"question":"You are given a string S of length N, consisting of lowercase English letters. You can perform the following operation any number of times (including zero): select any substring of S and rearrange its letters in any order. Your goal is to determine the lexicographically smallest string you can obtain after any number of such operations. ------ Input ------ The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a string S. ------ Output ------ For each test case, output a single line containing the lexicographically smallest string that can be obtained. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 The sum of lengths of all strings in one input does not exceed 10^6. ------ Sample Input ------ 3 cba dacb abac ------ Sample Output ------ abc abcd aabc","solution":"def lexicographically_smallest_string(strings): Given a list of strings, returns the lexicographically smallest string for each by sorting the letters of each string in ascending order. result = [] for s in strings: result.append(\'\'.join(sorted(s))) return result"},{"question":"An online bookstore allows customers to purchase books in bulk for discounts. Each book has a price and a bulk discount applied if a customer buys that book in quantities of 3 or more. The bulk discount is applied based on the total number of books purchased and not the individual book type. The discount is a fixed percentage of the total cost of the books. You need to determine the minimum cost the customer has to pay given the list of prices for each book and the number of books to be bought. If the number of books bought is 3 or more, a bulk discount of `d` percent is applied to the total cost. If fewer than 3 books are bought, no discount is applied. -----Input----- The input consists of two lines. The first line contains two integers `n` and `d` (1 ≤ n ≤ 100, 0 ≤ d ≤ 100), where `n` is the number of books and `d` is the discount percentage. The second line contains `n` integers `p1, p2, ..., pn` (1 ≤ pi ≤ 1000), where `pi` is the price of the i-th book. -----Output----- Output a single floating-point number representing the minimum cost the customer has to pay, with precision up to two decimal places. -----Examples----- Input: 5 20 100 200 300 400 500 Output: 1200.00 Input: 2 50 200 300 Output: 500.00 Input: 4 10 150 150 150 150 Output: 540.00 -----Explanation----- In the first example, the total cost without discount is 100 + 200 + 300 + 400 + 500 = 1500. Since the number of books is more than 3, a discount of 20% is applied. The final cost is 1500 * (1 - 0.20) = 1200.00. In the second example, the total cost without discount is 200 + 300 = 500. Since fewer than 3 books are bought, no discount is applied. The final cost is 500.00. In the third example, the total cost without discount is 150 + 150 + 150 + 150 = 600. Since the number of books is more than 3, a discount of 10% is applied. The final cost is 600 * (1 - 0.10) = 540.00.","solution":"def minimum_cost(n, d, prices): Calculate the minimum cost the customer has to pay for the books with a possible bulk discount. :param n: int, number of books :param d: int, discount percentage :param prices: list of int, prices of the books :return: float, minimum cost the customer has to pay total_cost = sum(prices) if n >= 3: discounted_cost = total_cost * (1 - d / 100) return round(discounted_cost, 2) else: return float(total_cost)"},{"question":"In a faraway land, there is a mystical garden with n magical flowers positioned in a straight line. Each flower has a certain magical value which represents its healing power. Brave Ponta wants to gather a continuous segment of the garden for a healing ritual, but he can only handle a segment of exactly k flowers due to the ritual\'s constraints. Your task is to write a program that finds the maximum possible sum of the magical values of any segment of exactly k flowers. Input Multiple datasets are given as input. Each dataset is given in the following format: n k (number of flowers and segment length: integers) a1 a2 ... an (magical values of each flower: blank-separated integers) n is between 1 and 100, inclusive. k is between 1 and n, inclusive. Each flower\'s magical value does not exceed 1,000 in absolute value. When n is 0 and k is 0, it is the end of input. Output Print the maximum sum on one line for each dataset. Example Input 5 3 1 -2 3 4 -1 6 2 -1 2 3 -2 5 1 0 0 Output 6 6","solution":"def max_flower_sum(datasets): results = [] for data in datasets: n, k = data[0], data[1] if n == 0 and k == 0: break flowers = data[2] max_sum = float(\'-inf\') current_sum = 0 for i in range(k): current_sum += flowers[i] max_sum = current_sum for i in range(k, n): current_sum = current_sum + flowers[i] - flowers[i - k] if current_sum > max_sum: max_sum = current_sum results.append(max_sum) return results"},{"question":"Kenneth is back with another challenge! This time, he needs to help the owls in the forest navigate through a grid of trees. Each owl starts at the top-left corner of a grid and wishes to travel to the bottom-right corner. However, some cells in the grid contain trees, making them impassable. Kenneth needs a method that will return the number of distinct paths an owl can take to get from the top-left corner to the bottom-right corner of the grid, moving only down or right at each step. The grid is represented as a 2D list, where \'0\' signifies an empty cell the owl can pass through, and \'1\' signifies a cell with a tree. Write a function `count_paths` that takes a 2D list `grid` as input and returns the number of distinct paths from the top-left corner to the bottom-right corner. # Function Signature ```python def count_paths(grid: List[List[int]]) -> int: ``` # Input - A 2D list `grid` of size `m x n` where `grid[i][j]` is either `0` (empty cell) or `1` (cell with a tree). # Output - An integer representing the number of distinct paths from the top-left corner to the bottom-right corner of the grid. # Constraints - The grid will have at most 100 rows and 100 columns. - There will always be at least one empty path (i.e., the start and end positions will always be `0`). # Example ```python grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]] count_paths(grid) -> 2 grid = [[0, 1], [0, 0]] count_paths(grid) -> 1 ``` # Note In the first example, the paths are: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) In the second example, the path is: 1. (0,0) -> (1,0) -> (1,1)","solution":"def count_paths(grid): m, n = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Given a list of space-separated integers and an integer k, rotate the list to the right by k steps. A rotation by one step moves the last element of the list to the first position, shifting all remaining elements to the right by one position. Input: The first line contains the integer k. The second line contains a space-separated list of integers. Output: Print the list after rotating it k steps to the right. Constraints: 1 ≤ k ≤ 100 1 ≤ list length ≤ 10^5 -10^6 ≤ integer values in the list ≤ 10^6 Note: The rotation should be performed efficiently, ideally in O(n) time complexity. SAMPLE INPUT 3 1 2 3 4 5 6 SAMPLE OUTPUT 4 5 6 1 2 3 Explanation: After rotating the list to the right by 3 steps, the original list [1, 2, 3, 4, 5, 6] becomes [4, 5, 6, 1, 2, 3].","solution":"def rotate_right(lst, k): Rotates the list `lst` to the right by `k` steps. Args: lst : list of integers k : integer, number of steps to rotate the list Returns: list : rotated list if not lst: return lst n = len(lst) k = k % n # handle cases where k is greater than n return lst[-k:] + lst[:-k]"},{"question":"Lena has recently been fascinated by palindromes. A palindrome is a string that reads the same forwards and backwards. To challenge herself, Lena wants to find the longest palindrome that can be formed using a subset of characters from a given string. Can you help Lena with her challenge? -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string. The second line contains a string s of length n, consisting of lowercase English letters. -----Output----- Print the length of the longest palindrome that can be formed using the characters of the given string. -----Examples----- Input 7 abccccdd Output 7 Input 3 abc Output 1 Explanation: In the first example, \\"dccaccd\\" or \\"dccbccd\\" are the longest palindromes that can be formed from the string \\"abccccdd\\". Each of these palindromes has a length of 7. In the second example, the longest possible palindrome that can be formed from \\"abc\\" using any of its characters is any single character like \\"a\\", \\"b\\", or \\"c\\", all of which have a length of 1.","solution":"def longest_palindrome(length, s): from collections import Counter if length == 0: return 0 char_counts = Counter(s) palindrome_length = 0 odd_found = False for count in char_counts.values(): if count % 2 == 0: palindrome_length += count else: palindrome_length += (count - 1) odd_found = True if odd_found: palindrome_length += 1 return palindrome_length"},{"question":"Write a program to help Erica, a software engineer who loves solving number puzzles. Currently, she’s obsessed with a particular numerical challenge involving \\"happy numbers\\". A \\"happy number\\" is a number which eventually reaches 1 when replaced by the sum of the square of each digit. If a number does not reach 1, and ends up in an endless cycle, it is called an \\"unhappy number\\". Write a program that will determine if a given positive integer is a happy number or not. -----Input----- The input consists of a single integer n (1 leq n leq 10^6) – the number that Erica wants to check for happiness. -----Output----- Output \\"Happy\\" (without quotes) if the number is a happy number. Otherwise, print \\"Unhappy\\". -----Examples----- Input 19 Output Happy Input 4 Output Unhappy Input 7 Output Happy -----Note----- In the first example, the number 19 transforms as follows: 19 -> 1^2 + 9^2 = 82 82 -> 8^2 + 2^2 = 68 68 -> 6^2 + 8^2 = 100 100 -> 1^2 + 0^2 + 0^2 = 1 Since it reaches 1, 19 is a happy number. In the second example, the number 4 transforms as follows: 4 -> 4^2 = 16 16 -> 1^2 + 6^2 = 37 37 -> 3^2 + 7^2 = 58 58 -> 5^2 + 8^2 = 89 89 -> 8^2 + 9^2 = 145 145 -> 1^2 + 4^2 + 5^2 = 42 42 -> 4^2 + 2^2 = 20 20 -> 2^2 + 0^2 = 4 Since it reaches 4 again, 4 is an unhappy number.","solution":"def is_happy_number(n): Determines if a number is a happy number. Args: n (int): The number to check. Returns: str: \\"Happy\\" if the number is a happy number, otherwise \\"Unhappy\\". def get_next(number): return sum(int(char) ** 2 for char in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return \\"Happy\\" if n == 1 else \\"Unhappy\\""},{"question":"In a given region, there are several towns. Between some pairs of towns, there are direct one-way roads. A city council wants to ensure that all towns in the region are connected, such that for each pair of towns (A, B), there is a way to travel from town A to town B through the directed roads. You are tasked with checking if the current network of roads meets the above requirement. Specifically, you need to determine whether the graph of towns and roads is strongly connected, meaning there is a path from any town to every other town following the directed roads. -----Input----- The input starts with two integers n and m (1 leq n leq 1000, 0 leq m leq n(n-1)) representing the number of towns and the number of directed roads, respectively. Each of the following m lines contains two integers u and v (1 leq u, v leq n, u neq v) indicating a one-way road from town u to town v. -----Output----- Output \\"YES\\" if there exists a way to travel between all pairs of towns. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 4 5 1 2 2 3 3 4 4 1 2 4 Sample Output 1: YES Sample Input 2: 3 2 1 2 2 3 Sample Output 2: NO","solution":"from collections import defaultdict, deque def is_strongly_connected(n, m, roads): if n == 1: return \\"YES\\" if m == 0: return \\"NO\\" # Graph initialization adj = defaultdict(list) reverse_adj = defaultdict(list) for u, v in roads: adj[u].append(v) reverse_adj[v].append(u) def bfs(start, graph): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited # Check if all nodes are reachable from the first node. visited_from_first = bfs(1, adj) if len(visited_from_first) != n: return \\"NO\\" # Check if the first node is reachable from all nodes. visited_to_first = bfs(1, reverse_adj) if len(visited_to_first) != n: return \\"NO\\" return \\"YES\\""},{"question":"Given an integer array nums of size n, where all elements are between 1 and n, and some elements appear twice and others appear once. The task is to complete the function findDuplicates which returns an array of all the elements that appear twice. For example: Input: [4,3,2,7,8,2,3,1] Output: [2,3] Input: The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of two lines. The first line contains an integer n denoting the size of the array. The second line contains n space separated integers representing the array nums. Output: For each test case, in a new line, print the array of elements that appear twice. Constraints: 1<=T<=100 1<=n<=10^4 Example (To be used for expected output): Input: 2 8 4 3 2 7 8 2 3 1 6 5 3 6 4 3 6 Output: 2 3 3 6 Note: The Input/Output format and Example given are used for the system\'s internal purpose and should be used by the user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def findDuplicates(nums): Given an integer array nums of size n, where all elements are between 1 and n, and some elements appear twice and others appear once, find the duplicates. duplicates = [] for num in nums: # Use the value as the index to check the presence of the number if nums[abs(num) - 1] < 0: # If already negative, it is a duplicate duplicates.append(abs(num)) else: # Mark the number as visited by making it negative nums[abs(num) - 1] *= -1 return duplicates"},{"question":"A scientist named Dr. Emmett Brown has invented a time machine, DeLorean, and he wants to calculate the accumulation of years he can travel given specific fuel restrictions. The DeLorean requires a certain amount of fuel to travel forward or backward in time. Given a sequence of integers representing fuel units, where a positive integer indicates fuel to move forward and a negative integer indicates fuel to move backward, you need to determine the cumulative year Dr. Brown can travel to, starting from the year 0. The fuel units are provided as a list, and Dr. Brown can use them sequentially. If at any point the cumulative year becomes negative, it should be reset to 0, because the time machine cannot travel to negative years. Write a function `calculate_years(fuel_units: List[int]) -> int` that takes as input a list of integers representing fuel units and returns the cumulative year Dr. Brown can travel to. # Input - A single list of integers `fuel_units` representing the fuel units for time travel. The length of the list will be between 1 and 10^5. # Output - An integer, the cumulative year Dr. Brown can travel to after using all the provided fuel units in sequence. # Constraints - The sum of all fuel units in the list will fit within the limits of a 32-bit signed integer. # Example Input ```python fuel_units = [10, -5, 20, -25] ``` Output ```python 0 ``` Explanation Dr. Brown starts at the year 0. - After using 10 units of fuel, he can travel to year 10. - After using -5 units of fuel, he travels back to year 5. - Adding 20 units of fuel, he moves forward to year 25. - Subtracting 25 units of fuel would take him to year 0 (since it would have been year 0 or less, reset to 0). Thus, the final year is 0.","solution":"def calculate_years(fuel_units): Calculate the cumulative year Dr. Brown can travel to, Args: fuel_units (list of int): The fuel units to travel in time. Returns: int: The cumulative year Dr. Brown can travel to current_year = 0 for fuel in fuel_units: current_year += fuel if current_year < 0: current_year = 0 return current_year"},{"question":"Given a list of n integers, you are required to process m queries. Each query falls under one of the following types: 1. Add a given integer x to every element in the list. 2. Multiply every element in the list by a given integer y. 3. Divide every element in the list by a given integer z (integer division). 4. Reverse the list. 5. Find the maximum value in the list. Your task is to implement a program that effectively handles these queries and outputs the required results. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) - the size of the list and the number of queries, respectively. The second line contains n integers a_1, a_2, ..., a_n where -10^9 ≤ a_i ≤ 10^9 - the initial state of the list. The next m lines contain the descriptions of the queries. Each query is one of the following formats: - \\"1 x\\" (1 ≤ x ≤ 10^9), indicating an addition operation. - \\"2 y\\" (1 ≤ y ≤ 10^9), indicating a multiplication operation. - \\"3 z\\" (1 ≤ z ≤ 10^9), indicating a division operation. - \\"4\\", indicating a reversal operation. - \\"5\\", indicating a query to find the maximum value in the list. Output For each type 5 query, print the maximum value in the list after processing that query. Example Input 5 6 1 2 3 4 5 1 10 2 2 4 3 2 5 2 3 Output 15 Explanation 1. After the first query (1 10), the list becomes [11, 12, 13, 14, 15]. 2. After the second query (2 2), the list becomes [22, 24, 26, 28, 30]. 3. After the third query (4), the list becomes [30, 28, 26, 24, 22]. 4. After the fourth query (3 2), the list becomes [15, 14, 13, 12, 11]. 5. The fifth query (5) requires finding the maximum value, which is 15. 6. After the sixth query (2 3), the list is modified but no further type 5 query is made, so no additional output is required.","solution":"def process_queries(n, m, array, queries): Processes the given queries on the array and returns the results of type 5 queries. results = [] for query in queries: split_query = query.split() q_type = int(split_query[0]) if q_type == 1: x = int(split_query[1]) array = [elem + x for elem in array] elif q_type == 2: y = int(split_query[1]) array = [elem * y for elem in array] elif q_type == 3: z = int(split_query[1]) array = [elem // z for elem in array] elif q_type == 4: array.reverse() elif q_type == 5: results.append(max(array)) return results # Example input n = 5 m = 6 array = [1, 2, 3, 4, 5] queries = [ \\"1 10\\", \\"2 2\\", \\"4\\", \\"3 2\\", \\"5\\", \\"2 3\\" ] # Example usage output = process_queries(n, m, array, queries) print(output) # Output should be [15]"},{"question":"Chris loves working with strings and figuring out interesting patterns. Today, he has a challenging task - determining the longest palindromic substring in a given string. A palindromic substring is a substring that reads the same forwards and backwards. Given a string s of length n, help Chris find the longest palindromic substring. If there is more than one substring with the same maximum length, return the one which appears first. -----Constraints----- - 1 leq n leq 1000 - s consists of lowercase English letters (a - z). -----Input----- The input consists of a single string s. -----Output----- Print the longest palindromic substring. If there are multiple substrings of the same maximum length, print the one which appears first. -----Sample Input----- babad -----Sample Output----- bab In the input string \\"babad,\\" - \\"bab\\" is a palindromic substring and so is \\"aba.\\" - Both \\"bab\\" and \\"aba\\" have the same maximum length of 3. - However, \\"bab\\" appears first, so it is the correct answer. -----Sample Input----- cbbd -----Sample Output----- bb In the input string \\"cbbd,\\" - The longest palindromic substring is \\"bb,\\" which has a length of 2 and is the only maximum length palindromic substring.","solution":"def longest_palindromic_substring(s: str) -> str: Finds the longest palindromic substring in the given string. Parameters: s (str): Input string Returns: str: Longest palindromic substring n = len(s) if n == 0: return \\"\\" start = 0 max_length = 1 for i in range(1, n): low = i - 1 high = i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 low = i - 1 high = i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"In a small village, there is a unique marketplace that follows interesting rules for trading delicious apples. The marketplace contains `n` stalls, each operated by a different seller. Every day, each seller determines the number of apples they are willing to sell, which could be any number from 1 to m (inclusive). Norma, a dedicated apple seller, wants to maximize her profit by purchasing apples at the lowest cost. However, the village council introduced a quirky rule to enhance trading dynamics: The cost of each apple at stall `i` is the number of apples available at stall `i` squared. Norma can visit any of the stalls in the market and buy all the apples from that stall only – she can\'t buy a subset of apples from any stall. You are to help Norma determine the minimum cost she incurs to buy apples from exactly one stall. # Input - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000) – the number of stalls and the maximum number of apples that any stall can have. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ m), where `a_i` is the number of apples at the `i`-th stall. # Output - Output a single integer, the minimum cost Norma incurs to buy apples from exactly one stall. # Example **Input** ``` 5 10 3 7 2 9 5 ``` **Output** ``` 4 ``` **Explanation** - The cost of apples from each stall is calculated as follows: - Stall 1: 3^2 = 9 - Stall 2: 7^2 = 49 - Stall 3: 2^2 = 4 - Stall 4: 9^2 = 81 - Stall 5: 5^2 = 25 - The minimum cost is 4 (from stall 3). # Note In this example, Norma should buy apples from the third stall to achieve the minimum possible cost of 4.","solution":"def minimum_cost(n, m, apple_counts): Returns the minimum cost to buy apples from exactly one stall. Args: n : int : Number of stalls m : int : Maximum number of apples that any stall can have apple_counts : list of int : Number of apples at each stall Returns: int : Minimum cost # Calculate the cost for each stall and find the minimum cost min_cost = float(\'inf\') for apples in apple_counts: cost = apples ** 2 if cost < min_cost: min_cost = cost return min_cost"},{"question":"You are given a sequence of integers, each between 1 and 100. A subsequence of a sequence is obtained by deleting zero or more elements from the sequence without changing the order of the remaining elements. A subsequence is non-decreasing if each element is greater than or equal to the previous element in the subsequence. Find the length of the longest non-decreasing subsequence that can be created from the given sequence. Constraints - 1 leq n leq 1000 - 1 leq a_i leq 100 Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print the length of the longest non-decreasing subsequence. Examples Input 7 10 22 9 33 21 50 41 Output 4 Input 10 3 10 2 1 20 4 2 30 40 50 Output 6","solution":"def longest_non_decreasing_subsequence(n, sequence): if n == 0: return 0 # Initialize the dp array where dp[i] will be the length of the # longest non-decreasing subsequence ending at index i. dp = [1] * n # Build the dp array. for i in range(1, n): for j in range(i): if sequence[i] >= sequence[j]: dp[i] = max(dp[i], dp[j] + 1) # The maximum value in dp array is the length of the longest # non-decreasing subsequence. return max(dp) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) sequence = list(map(int, data[1:])) result = longest_non_decreasing_subsequence(n, sequence) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Alex is fascinated by the concept of palindromes. He defines a palindrome as a string that reads the same forward and backward. He has recently learned about suffix arrays and now wants to use them to find the longest palindromic substring in a given string. Given a string s, your task is to determine the longest substring of s that is a palindrome. If there are multiple longest palindromic substrings of the same length, return the one which appears first in the string. Input A single line containing the string s (1 ≤ |s| ≤ 2 * 10^5). The string consists only of lowercase English letters. Output Output the longest palindromic substring of s. If there are multiple, output the one which appears first. Example Input banana Output anana Input abacdfgdcaba Output aba Input abcdefg Output a Note In the first example, the longest palindromic substring is \\"anana\\". In the second example, both \\"aba\\" and \\"aba\\" have the same length. The first occurrence is \\"aba\\" at the beginning. In the third example, each character is a palindrome by itself. The first one is \\"a\\". This problem requires efficiently finding the longest palindromic substring, commonly solved using advanced techniques like Manacher’s algorithm or dynamic programming.","solution":"def longest_palindromic_substring(s: str) -> str: n = len(s) if n == 0: return \\"\\" # Table to store if a substring is palindrome dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # Every single letter is a palindrome for i in range(n): dp[i][i] = True # Check for a substring of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 # Check if the substring is a palindrome if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return s[start:start + max_length]"},{"question":"# Increase each element in the list You are given a list of integers. Your task is to create a new list where each integer from the original list is increased by a value N. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N. - The second line contains space-separated integers representing the list. ------ Output Format ------ For each test case, output the modified list of integers (space-separated) where each element is increased by N. ------ Constraints ------ 1 ≤ T ≤ 25 -100 ≤ N ≤ 100 1 ≤ text{Length of list} ≤ 100 -1000 ≤ text{list integers} ≤ 1000 ----- Sample Input 1 ------ 2 3 1 2 3 4 5 -2 6 7 8 9 ----- Sample Output 1 ------ 4 5 6 7 8 4 5 6 7 ----- Explanation 1 ------ Test case 1: Adding 3 to each element of the list [1, 2, 3, 4, 5] results in the list [4, 5, 6, 7, 8]. Test case 2: Adding -2 to each element of the list [6, 7, 8, 9] results in the list [4, 5, 6, 7].","solution":"def increase_elements_by_n(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] lst = test_cases[i][1] new_list = [x + N for x in lst] results.append(new_list) return results"},{"question":"Given a string containing lowercase alphabetical characters and spaces, write a function to determine the length of the longest word in the string. The input string will have at least one word, and words are separated by spaces. The function must return the length of the longest word as an integer. Example: ```python longest_word_length(\\"the quick brown fox\\") => 5 # \\"quick\\" is the longest word with 5 characters longest_word_length(\\"jumps over the lazy dog\\") => 5 # \\"jumps\\" and \\"lazy\\" are the longest words with 5 characters each, so the length is 5 longest_word_length(\\"a b cde fghij\\") => 5 # \\"fghij\\" is the longest word with 5 characters longest_word_length(\\"python coding\\") => 6 # \\"coding\\" is the longest word with 6 characters ``` The input string will only contain lowercase alphabetical characters and spaces.","solution":"def longest_word_length(s): Returns the length of the longest word in the string s. words = s.split() max_length = 0 for word in words: max_length = max(max_length, len(word)) return max_length"},{"question":"Given an array of integers, return a new array where each element is the product of all the numbers in the original array except the one at the current position. Do not use division in your solution. Example: Input: [1, 2, 3, 4, 5] Output: [120, 60, 40, 30, 24] Input: [3, 2, 1] Output: [2, 3, 6]","solution":"def product_except_self(nums): Given an array of integers, return a new array where each element is the product of all the numbers in the original array except the one at the current position. Do not use division in the solution. n = len(nums) if n == 0: return [] # Create two arrays, to maintain prefix product and suffix product prefix_products = [1] * n suffix_products = [1] * n # Construct the prefix products array for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Construct the suffix products array for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Construct the result array result = [0] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Himanshu, a competitive programmer, loves solving puzzles. One of his favorite challenges involves sorting and manipulating strings. He comes across a task where he needs to determine if it is possible to rearrange the letters of a given string such that no two adjacent letters are the same. If such an arrangement is possible, he wants to find one such arrangement. Given a string, determine if it is possible to rearrange the string such that no two adjacent characters are the same. If it is possible, return any valid rearrangement. If not, return \\"Not Possible\\". Input: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output: For each test case, print the rearranged string if it is possible to rearrange the string such that no two adjacent characters are the same. Otherwise, print \\"Not Possible\\". Constraints: 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 100 Note: All characters in the string S are lowercase English letters. Example Input: 3 aab aaab aabbcc Example Output: aba Not Possible abcabc","solution":"import heapq from collections import Counter def rearrange_string(s): Rearranges a string such that no two adjacent characters are the same. Returns \\"Not Possible\\" if such an arrangement is not possible. # Step 1: Count the frequency of each character char_count = Counter(s) # Step 2: Build a max heap based on the frequency of characters max_heap = [(-freq, char) for char, freq in char_count.items()] heapq.heapify(max_heap) # Step 3: Construct the rearranged string prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # Since we used one instance of \'char\', we decrease the frequency if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq = freq + 1 # Decrease frequency because we used one instance of `char` prev_char = char rearranged_string = \'\'.join(result) if len(rearranged_string) != len(s): return \\"Not Possible\\" return rearranged_string def process_test_cases(test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"Implement a function that takes an array of integers and a target sum. The function should return the number of unique quadruples (sets of four numbers) from the array that sum up to the target sum. The quadruples should not include duplicate sets, even if the numbers appear in a different order. Example: Input 6 1 0 -1 0 -2 2 0 Output 3 Explanation For the input array [1, 0, -1, 0, -2, 2] and target sum 0, the unique quadruples that sum to 0 are: [-2, -1, 1, 2] [-2, 0, 0, 2] [-1, 0, 0, 1] Your Task: Your task is to complete the function fourSumCount() which takes the array of integers and an integer target as input parameters and returns the count of unique quadruples. Constraints: 1 ≤ arr.length ≤ 200 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def fourSumCount(nums, target): Returns the count of unique quadruples that sum up to the target value. nums.sort() quadruples = set() n = len(nums) for i in range(n-3): for j in range(i+1, n-2): left, right = j+1, n-1 while left < right: current_sum = nums[i] + nums[j] + nums[left] + nums[right] if current_sum == target: quadruple = (nums[i], nums[j], nums[left], nums[right]) quadruples.add(quadruple) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return len(quadruples) # Additional functionality to handle input and output if required def input_output_handler(): n = int(input()) nums = list(map(int, input().split())) target = int(input()) result = fourSumCount(nums, target) print(result) # If running in an interactive environment, uncomment the following line # input_output_handler()"},{"question":"Helen has a bookshelf with N rows and M columns of books. Each book is characterized by a unique number between 1 and N*M. These numbers are initially arranged in sequence from left to right, top to bottom. Helen can perform two types of operations on the bookshelf: 1. Swap books in any two positions. 2. Rotate any row or column. Helen wants to know how many unique configurations of the bookshelf she can achieve using these operations. Constraints: * 1 ≤ N, M ≤ 100 Input: The input is given from Standard Input in the following format: N M Output: Print the number of unique configurations of books on the bookshelf that can be obtained. Examples Input 2 2 Output 24 Input 1 3 Output 6","solution":"import math def unique_configurations(N, M): Calculate the number of unique configurations of books on the bookshelf. :param N: Number of rows :param M: Number of columns :return: Number of unique configurations total_books = N * M return math.factorial(total_books)"},{"question":"Vlad and Lena are playing a game with a 1-dimensional array and a set of operations. The array consists of n elements, each initially set to zero. The set of operations includes three types: 1. Increment all elements from index l to index r inclusive by a given value v. 2. Reset an element at a given index x to zero. 3. Calculate the sum of elements from index l to index r inclusive. They need your help to efficiently manage the array and execute the operations. -----Input----- The first line of input contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 2*10^5) — the size of the array and the number of operations, respectively. Each of the following q lines describes an operation in one of the following formats: - \\"1 l r v\\" (1 ≤ l ≤ r ≤ n, 1 ≤ v ≤ 10^5) — increment all elements from index l to index r by v. - \\"2 x\\" (1 ≤ x ≤ n) — reset the element at index x to zero. - \\"3 l r\\" (1 ≤ l ≤ r ≤ n) — calculate the sum of elements from index l to index r. -----Output----- For each operation of type 3, output the sum of elements from index l to index r inclusive on a single line. -----Examples----- Input 5 5 1 1 3 2 3 1 3 2 2 3 1 3 1 2 5 3 Output 6 4 -----Note----- In the example, we start with an array of zeros: [0, 0, 0, 0, 0]. After the first operation \\"1 1 3 2\\", the array becomes [2, 2, 2, 0, 0]. The second operation \\"3 1 3\\" asks for the sum of the first three elements, resulting in 6. The third operation \\"2 2\\" resets the second element to zero, making the array [2, 0, 2, 0, 0]. The fourth operation \\"3 1 3\\" asks for the sum of the first three elements again, resulting in 4. Finally, the last operation \\"1 2 5 3\\" increments elements from index 2 to 5 by 3, making the array [2, 3, 5, 3, 3].","solution":"class GameArray: def __init__(self, n): self.arr = [0] * n def increment(self, l, r, v): for i in range(l-1, r): self.arr[i] += v def reset(self, x): self.arr[x-1] = 0 def get_sum(self, l, r): return sum(self.arr[l-1:r]) # Sample usage def process_operations(n, operations): game_array = GameArray(n) results = [] for operation in operations: if operation[0] == \\"1\\": _, l, r, v = map(int, operation.split()) game_array.increment(l, r, v) elif operation[0] == \\"2\\": _, x = map(int, operation.split()) game_array.reset(x) elif operation[0] == \\"3\\": _, l, r = map(int, operation.split()) res = game_array.get_sum(l, r) results.append(res) return results"},{"question":"Mole likes to collect various kinds of objects including gemstones which he arranges in a line. Mole is rather meticulous and he has sorted the gemstones in a strictly increasing order based on their values. Mole has a total of n gemstones. One day, Mole realizes that some of the gemstones in his collection are missing. He intends to find out which gemstones are missing from his collection when he is provided with the current sequence of gemstones. Mole wants a list of values that are missing and no longer present in his collection. Help Mole by writing a program to determine the missing gemstones. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 2 × 10^5), the number of gemstones in his collection. The second line contains n integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 10^9), representing the current values of the gemstones in increasing order. The third line contains a single integer x, (b_1 ≤ x ≤ b_{n}), representing the precise gemstone with the maximum value that Mole originally had. -----Output----- Print all the missing gemstone values in a single line in increasing order. -----Examples----- Input 5 1 2 4 5 7 7 Output 3 6 Input 3 3 4 5 5 Output","solution":"def find_missing_gemstones(n, gemstones, x): This function finds the missing gemstones from the collection. Parameters: n (int): number of gemstones in the current collection gemstones (List[int]): list of current gemstone values in increasing order x (int): maximum gemstone value Mole originally had Returns: List[int]: list of missing gemstone values in increasing order gems_set = set(gemstones) missing_gems = [i for i in range(gemstones[0], x + 1) if i not in gems_set] return missing_gems"},{"question":"You have been given the task of organizing a seating chart for students in a classroom. Each student has a first name and a last name. The seating chart should sort students primarily by their last name. In cases where multiple students have the same last name, those students should be further sorted by their first name. # Input: - The first line contains a single integer `n` (1 ≤ n ≤ 100), the number of students. - The following `n` lines each contain the first and last name of a student, separated by a space. Both first and last names are non-empty and contain at most 100 characters each. # Output: - Print the sorted list of students in the format \\"first_name last_name\\", one student per line. # Example: Input 5 John Doe Jane Smith Alice Doe Bob Brown Charlie Brown Output Bob Brown Charlie Brown Alice Doe John Doe Jane Smith # Note In this example, students are sorted by their last names first: \\"Brown\\", \\"Doe\\", \\"Smith\\". Within the \\"Brown\\" group, the students are sorted by their first names: \\"Bob\\", \\"Charlie\\". Similarly, within the \\"Doe\\" group, students are sorted by first names: \\"Alice\\", \\"John\\".","solution":"def sort_students(n, students): Sort students by last name, then by first name if last names are the same. Args: n (int): Number of students. students (list of tuples): List of (first_name, last_name). Returns: list of str: Sorted list of students in \\"first_name last_name\\" format. # Sort the students list by last name, then by first name students_sorted = sorted(students, key=lambda x: (x[1], x[0])) # Format the sorted list to the required output format result = [f\\"{first} {last}\\" for first, last in students_sorted] return result"},{"question":"You are given a grid with N rows and M columns representing a garden. Each cell of the grid can either be empty (denoted by \'.\') or contain a tree (denoted by \'T\'). Trees can grow and spread to adjacent cells (i.e., up, down, left, right) that are initially empty. Each tree spreads to adjacent cells simultaneously during each time step. Calculate the number of steps required for the whole grid to be covered by trees if trees spread as described. Constraints * 1 le N, M le 1000 * The initial grid contains at least one tree. Input The input is given from Standard Input in the format: N M grid Output If the number of steps required to cover the whole grid with trees is ans, you should print on Standard Output ans Examples Input 3 3 .T. ..T .T. Output 2 Input 4 5 ..... ..T.. .T.T. ..... Output 3","solution":"from collections import deque def min_steps_to_cover_garden(N, M, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque() # Initialize the queue with the positions of all trees for i in range(N): for j in range(M): if grid[i][j] == \'T\': queue.append((i, j)) steps = -1 # Use BFS to process each cell level by level while queue: for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\': grid[nx][ny] = \'T\' queue.append((nx, ny)) steps += 1 return steps # Reading input if __name__ == \'__main__\': import sys input = sys.stdin.read data = input().strip().split() N, M = int(data[0]), int(data[1]) grid = [list(data[i + 2]) for i in range(N)] print(min_steps_to_cover_garden(N, M, grid))"},{"question":"Implement a function that takes two integers n and k and generates the lexicographically smallest string of length n that contains exactly k distinct characters. If it is not possible to create such a string, return an empty string. Constraints * 1 ≤ n ≤ 1000 * 1 ≤ k ≤ 26 * The string should consist of lowercase English letters only Input In the first line, an integer n is given. In the second line, an integer k is given. Examples Input 5 3 Output aaabc Input 10 2 Output aaaaaaaaab Input 3 4 Output","solution":"def generate_lexicographically_smallest_string(n, k): Generates the lexicographically smallest string of length n that contains exactly k distinct characters. Returns an empty string if it\'s not possible to create such a string. if k > n or k > 26: return \\"\\" result = [] # First include \'a\' to \'a\' k times. for i in range(k): result.append(chr(ord(\'a\') + i)) # Fill the rest with the smallest possible character \'a\' for i in range(n - k): result.insert(0, \'a\') return \'\'.join(result)"},{"question":"You are organizing a talent show at a local school, and you need to arrange the participants in order of their performance. Each participant is given a unique ID and is assigned a specific performance time during the event. To ensure a smooth execution of the event, you want to know the optimal sequence in which the participants will perform, starting from the earliest to the latest. To solve this, you are given the number of participants and their respective performance times. Your task is to sort the participants based on their performance times in ascending order. In case two participants have the same performance time, they should be ordered by their IDs in ascending order. Input: The first line contains t, the number of test cases. Each test case consists of two lines: - The first line contains n, the number of participants. - The second line contains n space-separated integers, where each integer is in the form `id:time`, representing the participant\'s ID and their performance time. Output: For each test case, output a single line containing the sorted IDs of the participants based on their performance times. If two participants have the same performance time, order them by their IDs. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 100 1 ≤ id ≤ 1000 1 ≤ time ≤ 1000 Example: SAMPLE INPUT 2 3 101:5 102:3 103:5 4 201:10 202:5 203:10 204:2 SAMPLE OUTPUT 102 101 103 204 202 201 203 Explanation: In the first test case: - Participant 102 performs at time 3. - Participants 101 and 103 perform at time 5, but 101 has a lower ID than 103. Thus, the order of performances is 102, 101, and 103. In the second test case: - Participant 204 performs at time 2. - Participant 202 performs at time 5. - Participants 201 and 203 perform at time 10, but 201 has a lower ID than 203. Thus, the order of performances is 204, 202, 201, and 203.","solution":"def arrange_participants(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] participants = test_cases[i][1] participant_list = [(int(p.split(\':\')[0]), int(p.split(\':\')[1])) for p in participants] sorted_participants = sorted(participant_list, key=lambda x: (x[1], x[0])) result = \' \'.join(str(participant[0]) for participant in sorted_participants) results.append(result) return results"},{"question":"Julia is playing with strings. She has two strings, A and B, each of length N. Julia defines a transformation as selecting a non-empty substring from A and rotating it one position to the right (i.e., the last character of the substring moves to its first position). Julia wants to make string A equal to string B by performing the minimum number of such transformations. Help her determine whether it is possible, and if so, find the minimum number of transformations required. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of the T test cases follows. - Each test case consists of three lines: - The first line contains a single integer N. - The second line contains the string A. - The third line contains the string B. -----Output----- For each test case, output a single line containing the minimum number of transformations required to make A equal to B, or -1 if it is not possible. -----Constraints----- - 1 le T le 100 - 1 le N le 1000 - A and B consist of lowercase English letters only. -----Example Input----- 2 5 abacd cadab 4 abcd badc -----Example Output----- 2 -1","solution":"def min_transformations(T, test_cases): results = [] def can_make_equal(A, B, N): if A == B: return 0 for i in range(1, N): if sorted(A[:i]) == sorted(B[-i:]) and sorted(A[i:]) == sorted(B[:-i]): return 2 return -1 for i in range(T): N, A, B = test_cases[i] result = can_make_equal(A, B, N) results.append(result) return results # Test cases processing def transform_helper(inputs): T = inputs[0] test_cases = [] index = 1 for _ in range(T): N = inputs[index] A = inputs[index + 1] B = inputs[index + 2] test_cases.append((N, A, B)) index += 3 return min_transformations(T, test_cases)"},{"question":"Write a function that calculates the total cost of a taxi ride based on the distance traveled and the time of the day. The taxi fare consists of two parts: 1. A base fare of €2.50. 2. An additional charge per kilometer traveled. The additional charge varies depending on the time of the day: * €1.75 per kilometer during daytime hours (6:00 AM to 9:59 PM). * €2.50 per kilometer during nighttime hours (10:00 PM to 5:59 AM). The function should take two inputs: - The distance traveled (in kilometers). - The time of the ride (in 24-hour format as a string, \\"HH:MM\\"). The function should return the total cost of the ride, rounded to two decimal places.","solution":"def calculate_taxi_fare(distance_km, time_str): Calculates the total cost of a taxi ride. Parameters: distance_km (float): The distance traveled in kilometers. time_str (str): The time of the ride in 24-hour format \\"HH:MM\\". Returns: float: The total cost of the ride, rounded to two decimal places. base_fare = 2.50 # Parse the time string into hours and minutes hours, minutes = map(int, time_str.split(\':\')) # Determine the rate per kilometer based on the time of day if 6 <= hours < 22: rate_per_km = 1.75 else: rate_per_km = 2.50 # Calculate the total cost total_cost = base_fare + (distance_km * rate_per_km) return round(total_cost, 2)"},{"question":"In the kingdom of XYZ, the king loves palindromes and he has devised a game to entertain his subjects. The game is played on strings, and the goal is to determine the minimum number of character deletions required to transform a given string into a palindrome. The king only allows a maximum string length of 1000 characters, and he wants his subjects to write a program to solve this problem efficiently. Input The first line contains an integer t, the number of test cases (about 100). Then t test cases follow. Each test case consists of a single line containing a string of up to 1000 characters. Output For each test case, output a single line containing the minimum number of character deletions required to make the string a palindrome. SAMPLE INPUT 4 abc abcd aebcbda racecar SAMPLE OUTPUT 2 3 2 0 Explanation In the first case, removing \'a\' and \'c\' will transform \\"abc\\" into \\"b\\", which is a palindrome. In the second case, removing \'a\', \'b\', and \'d\' will transform \\"abcd\\" into \\"c\\", which is a palindrome. In the third case, removing \'a\' and \'d\' will transform \\"aebcbda\\" into \\"ebcbe\\", which is a palindrome. In the fourth case, \\"racecar\\" is already a palindrome and requires no deletions.","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string s a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l + 1][r - 1] else: dp[l][r] = 1 + min(dp[l + 1][r], dp[l][r - 1]) return dp[0][n - 1] def solve_game(t, test_cases): results = [] for s in test_cases: results.append(min_deletions_to_palindrome(s)) return results"},{"question":"Given a list of N integers, determine if it is a subsequence of another list M. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Write a function that takes two lists of integers and returns \\"YES\\" if the first list is a subsequence of the second list, otherwise returns \\"NO\\". -----Input:----- - The first line contains two integers N and M (1 leq N, M leq 10^5) representing the lengths of the two lists. - The second line contains N space-separated integers representing the elements of the first list. - The third line contains M space-separated integers representing the elements of the second list. -----Output:----- Print \\"YES\\" if the first list is a subsequence of the second list, otherwise print \\"NO\\". -----Sample Input:----- 3 5 1 2 3 1 2 3 4 5 3 3 1 3 2 1 2 3 5 5 1 2 3 4 5 5 4 3 2 1 -----Sample Output:----- YES NO NO -----Explanation:----- - In the first case, the list [1, 2, 3] is a subsequence of the list [1, 2, 3, 4, 5], so the output is \\"YES\\". - In the second case, the list [1, 3, 2] is not a subsequence of the list [1, 2, 3] because the order of the elements does not match, so the output is \\"NO\\". - In the third case, the list [1, 2, 3, 4, 5] is not a subsequence of the list [5, 4, 3, 2, 1], since their order is different, so the output is \\"NO\\".","solution":"def is_subsequence(n, m, list_n, list_m): Determines if list_n is a subsequence of list_m. :param n: Length of list_n. :param m: Length of list_m. :param list_n: List of integers of length n. :param list_m: List of integers of length m. :return: \\"YES\\" if list_n is a subsequence of list_m, otherwise \\"NO\\". it = iter(list_m) for item in list_n: if item not in it: return \\"NO\\" return \\"YES\\""},{"question":"Apollo Inc. organizes different types of tech talks every month. There are two types of tech talks: TECH and INNOVATION, and Apollo organizes them alternately: an INNOVATION follows a TECH and vice versa. Given a string S denoting the type of tech talk held last month, print the string representing the type of tech talk to be organized this month. -----Constraints----- - S is TECH or INNOVATION. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the string representing the type of tech talk to be organized this month. -----Sample Input----- TECH -----Sample Output----- INNOVATION They held a TECH last month, so they will organize an INNOVATION this month.","solution":"def next_talk_type(last_month_talk): This function returns the type of tech talk to be organized this month based on last month\'s talk type. Parameters: last_month_talk (str): The type of tech talk held last month. It must be either \'TECH\' or \'INNOVATION\'. Returns: str: The type of tech talk to be organized this month - \'INNOVATION\' if last month\'s was \'TECH\' and vice versa. if last_month_talk == \'TECH\': return \'INNOVATION\' elif last_month_talk == \'INNOVATION\': return \'TECH\' else: raise ValueError(\\"Invalid input: last_month_talk must be either \'TECH\' or \'INNOVATION\'\\")"},{"question":"Zigzag arrays are arrays that first increase to a peak value and then decrease. More formally, given an array of integers A, it is considered a zigzag array if there exists an index i (1 <= i <= n, where n is the length of the array) such that: - A[1] < A[2] < ... < A[i] - A[i] > A[i+1] > ... > A[n] For example, the array [2, 5, 7, 6, 3] is a zigzag array because it increases to 7 and then decreases, whereas [3, 1, 4, 2] is not a zigzag array. Your task is to write a program that determines whether a given array is a zigzag array. Input The input consists of multiple test cases. Each test case is a single line containing an integer n followed by n integers. The integer n is the number of elements in the array (1 <= n <= 1000). The end of input is indicated by a line containing a single zero. Output For each test case, output a single line containing \\"Yes\\" if the array is a zigzag array, otherwise \\"No\\". Example Input 5 2 5 7 6 3 4 3 1 4 2 6 1 2 3 4 5 6 5 5 6 3 4 2 0 Output Yes No No No","solution":"def is_zigzag(n, arr): Determines if an array is a zigzag array. Parameters: - n: The number of elements in the array - arr: The array of integers Returns: \\"Yes\\" if the array is a zigzag array, otherwise \\"No\\" if n < 3: return \\"No\\" peak_found = False for i in range(1, n - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peak_found = True # Check if elements before peak are strictly increasing for j in range(1, i): if arr[j] <= arr[j - 1]: return \\"No\\" # Check if elements after peak are strictly decreasing for j in range(i + 1, n): if arr[j] >= arr[j - 1]: return \\"No\\" return \\"Yes\\" return \\"No\\" def process_input(data): Processes the input data for multiple test cases. Parameters: - data: Input data as a list of strings, each representing a line Returns: A list of results for each test case results = [] for line in data: if line.strip() == \'0\': break parts = line.strip().split() n = int(parts[0]) arr = list(map(int, parts[1:])) results.append(is_zigzag(n, arr)) return results"},{"question":"Write a function that receives a string containing characters of the alphabet and decomposes it into groups of characters according to whether a character needs more or fewer spaces to its next similar character in comparison to the rest of the characters. This means, the function will need to compare the spacing of each character with others and group them based on having fewer or more gaps with their similar characters in between. Your function should return a dictionary where keys are the grouped characters and values are lists of tuples indicating the start index and the length of the grouped segment. Example: For the string `\\"aaabbbcccaaa\\"`, the output should be: ```python { \'a\': [(0, 3), (9, 3)], \'b\': [(3, 3)], \'c\': [(6, 3)] } ``` where each tuple contains the starting index of the segment within the original string and the length of each grouped segment. Consider all characters are lowercase letters and the input string contains no whitespace or special characters.","solution":"def decompose_string(s): Decomposes a string into groups of characters with their positions and lengths. Args: s (str): Input string containing only lowercase alphabet characters. Returns: dict: A dictionary where keys are characters and values are lists of tuples, each tuple containing the start index and the length of grouped segments. if not s: return {} result = {} i = 0 while i < len(s): char = s[i] start = i length = 0 while i < len(s) and s[i] == char: length += 1 i += 1 if char not in result: result[char] = [] result[char].append((start, length)) return result"},{"question":"You are preparing for a space mission where you need to manage energy consumption efficiently. Your spaceship has a grid-shaped floor plan with dimensions P x Q. Each cell in the grid can either be normal or contain an obstacle (which consumes extra energy). Given the cost to move through each type of cell, your task is to find the minimum energy required to travel from the top-left corner of the floor plan to the bottom-right corner. You can only move right or down at each step. Example 1: Input: P = 3 Q = 3 grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 21 Explanation: The path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) has a total cost of 21. Example 2: Input: P = 2 Q = 2 grid = [[1, 2], [1, 1]] Output: 3 Explanation: The path (0,0) -> (1,0) -> (1,1) has a total cost of 3. Your Task: You don\'t need to read input or print anything. Your task is to implement the function minEnergy() which takes the size of the grid P, Q and a 2-D matrix grid denoting the energy cost of each cell and returns the minimum energy required to travel from the top-left corner to the bottom-right corner. Expected Time Complexity: O(P * Q) Expected Auxiliary Space: O(P * Q) Constraints: 1 <= P, Q <= 1000 1 <= grid[i][j] <= 100","solution":"def minEnergy(P, Q, grid): Function to find the minimum energy required to travel from top-left to bottom-right in a grid. :param P: int, number of rows in the grid :param Q: int, number of columns in the grid :param grid: List[List[int]], the grid representing energy cost of each cell :return: int, minimum energy required # Create a dp table of the same size as the grid to store minimum energy costs dp = [[0] * Q for _ in range(P)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill the first row for j in range(1, Q): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, P): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, P): for j in range(1, Q): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # Return the value in the bottom-right corner return dp[P - 1][Q - 1]"},{"question":"You\'re in charge of organizing a coding competition and you need to keep track of the participants and their scores. A participant is defined like this: ```python class Participant: def __init__(self, name, scores): self.name = name self.scores = scores ``` Each participant has a unique name and a list of scores they received in different rounds. Your task is to return the name of the participant with the highest average score. If multiple participants have the same highest average score, return `\\"tie\\"`. Notes: * The average score is calculated as the sum of the scores divided by the number of scores. * There will be at least one participant. * If there is only one participant, return their name. * The scores list will contain at least one score.","solution":"class Participant: def __init__(self, name, scores): self.name = name self.scores = scores def highest_average_score(participants): Returns the name of the participant with the highest average score. If multiple participants have the same highest average score, returns \\"tie\\". if not participants: return None highest_avg = float(\'-inf\') high_scorers = [] for participant in participants: avg_score = sum(participant.scores) / len(participant.scores) if avg_score > highest_avg: highest_avg = avg_score high_scorers = [participant.name] elif avg_score == highest_avg: high_scorers.append(participant.name) return high_scorers[0] if len(high_scorers) == 1 else \\"tie\\""},{"question":"Given a string which consists of only lowercase letters, generate a new string that contains the letters of the original string but in sorted order. However, you must ensure that the letters in the new string appear in the same relative order as they did in the original string, but each letter can appear only once. For example: Input: \\"banana\\" Output: \\"abn\\" Input: \\"geeksforgeeks\\" Output: \\"efgkors\\" Your task is to implement a function `uniqueSorted` that takes a single string `s` as input and returns the desired resulting string with characters in sorted order and unique. Example: 1. Input: \\"banana\\" Output: \\"abn\\" 2. Input: \\"geeksforgeeks\\" Output: \\"efgkors\\" Constraints: - 1 <= len(s) <= 1000","solution":"def uniqueSorted(s): Given a string, generate a new string that contains the letters of the original string but in sorted order. Each letter can appear only once. Parameters: s (str): input string consisting of only lowercase letters Returns: str: resulting string with unique characters in sorted order seen = set() unique_chars = [] for char in s: if char not in seen: seen.add(char) unique_chars.append(char) unique_chars_sorted = sorted(unique_chars) return \'\'.join(unique_chars_sorted)"},{"question":"You are given an array of strings and a list of queries. There are two kinds of queries: - P X Y: Append the string Y to the end of the string at index X (1-based) in the array. - L A B: Check if the string at index A (1-based) is a substring of the string at index B (1-based) in the array. If it is, return the 1-based starting position of the substring in the string at index B. If it is not, return -1. -----Input----- The first line contains two space-separated integers N and M, where N is the number of strings in the array and M is the number of queries. The next N lines contain the initial strings in the array. Each of the next M lines contains a query. -----Output----- For each query of type L, output the starting position of the substring if it exists, otherwise output -1. -----Constraints----- - 1 ≤ N, M ≤ 1000 - 1 ≤ Length of any string ≤ 1000 - All strings consist of lowercase English letters only. - 1 ≤ X, A, B ≤ N - 1 ≤ Length of Y ≤ 1000 - type = {\'P\', \'L\'} -----Example----- Input 3 5 hello world example P 1 everyone L 1 2 L 2 3 P 3 code L 3 1 Output -1 -1 -1 -----Explanation:----- - Q1: Append \\"everyone\\" to \\"hello\\", so the string at index 1 becomes \\"helloeveryone\\". - Q2: Check if \\"helloeveryone\\" is a substring of \\"world\\". It is not, so return -1. - Q3: Check if \\"world\\" is a substring of \\"example\\". It is not, so return -1. - Q4: Append \\"code\\" to \\"example\\", so the string at index 3 becomes \\"examplecode\\". - Q5: Check if \\"examplecode\\" is a substring of \\"helloeveryone\\". It is not, so return -1.","solution":"def execute_queries(strings, queries): Executes the list of queries on the initial list of strings. Parameters: strings (list): List of initial strings. queries (list): List of queries in the format [\'P X Y\', \'L A B\']. Returns: list: Result of \'L\' queries. results = [] for query in queries: parts = query.split() if parts[0] == \'P\': X = int(parts[1]) - 1 Y = parts[2] strings[X] += Y elif parts[0] == \'L\': A = int(parts[1]) - 1 B = int(parts[2]) - 1 pos = strings[B].find(strings[A]) if pos != -1: results.append(pos + 1) else: results.append(-1) return results"},{"question":"You are given a grid with N rows and M columns. Initially, each cell contains an integer value between 0 and 9. You can perform the following operation on the grid: 1. Choose a subrectangle (i.e., a rectangular part of the grid) and increase each element within this subrectangle by 1. Your goal is to make all elements of the grid equal in the minimum number of operations possible. Write a function that takes the initial grid and returns the minimum number of operations required to achieve this goal. # Input - The first line contains two integers N and M (1 ≤ N, M ≤ 100): the number of rows and columns in the grid. - The next N lines each contain M integers describing the grid. The value in the j-th column of the i-th row is indicated by grid[i][j] (0 ≤ grid[i][j] ≤ 9). # Output - Print the minimum number of operations required to make all elements in the grid equal. # Example Input ``` 3 3 1 1 1 2 2 2 3 3 3 ``` Output ``` 3 ``` Explanation One possible way to achieve this: 1. Increase the full grid by 1: 2 2 2 3 3 3 4 4 4 2. Increase the 2x3 subrectangle covering the first two rows: 3 3 3 4 4 4 4 4 4 3. Increase the first row: 4 4 4 4 4 4 4 4 4 Therefore, the minimum number of operations required is 3.","solution":"def min_operations_to_equalize(grid): # Find the maximum value in the grid max_value = max(max(row) for row in grid) # The minimum number of operations is the difference between max_value # and the minimum value in the grid min_value = min(min(row) for row in grid) return max_value - min_value"},{"question":"Given a positive integer N, where N will be the number of lists. Your task is to generate N lists of integers based on the following rules: 1. Each list must contain the first N consecutive integers starting from 1. 2. Each list should begin from the next integer in sequence compared to the previous list. When an integer sequence exceeds the limit N, it should wrap back to 1. For example, if N=3, the output lists should be: - The first list: 1, 2, 3 - The second list: 2, 3, 1 - The third list: 3, 1, 2 Write a function that takes an input integer N and returns the resulting N lists. Function Signature: ```python def generate_lists(N: int) -> List[List[int]]: ``` # Examples: Example 1 Input: ```python N = 3 ``` Output: ```python [[1, 2, 3], [2, 3, 1], [3, 1, 2]] ``` Example 2 Input: ```python N = 4 ``` Output: ```python [[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]] ``` Example 3 Input: ```python N = 1 ``` Output: ```python [[1]] ``` # Constraints: * 1 ≤ N ≤ 10^5","solution":"from typing import List def generate_lists(N: int) -> List[List[int]]: Generate N lists where each list contains the first N consecutive integers starting from 1. Each successive list starts from the next integer in sequence compared to the previous list. result = [] base_list = list(range(1, N + 1)) for i in range(N): result.append(base_list[i:] + base_list[:i]) return result"},{"question":"Problem Statement Raelyn is working on a text-based puzzle game that involves calculating scores based on the value of characters. Each character in the English alphabet is assigned a specific value: \'a\' is worth 1 point, \'b\' is worth 2 points, ..., \'z\' is worth 26 points. Uppercase letters have the same values as their corresponding lowercase letters. Spaces, digits, and punctuation characters are worth 0 points and should be ignored in the score calculation. Raelyn needs a function to determine the total score of a given string. Help her by writing a function that calculates this score efficiently. # Input The input consists of a single string s, of length from 1 to 10<sup>5</sup> characters. The string can contain any printable ASCII characters. # Output Output a single integer, the total score of the input string based on the described rules. # Function Signature ```python def calculate_score(s: str) -> int: pass ``` # Examples Example 1 ```python input: \\"Hello, World!\\" output: 124 ``` Explanation: H (8), e (5), l (12), l (12), o (15), W (23), o (15), r (18), l (12), d (4) 8 + 5 + 12 + 12 + 15 + 23 + 15 + 18 + 12 + 4 = 124 Example 2 ```python input: \\"Python 3.8 is amazing!\\" output: 156 ``` Explanation: P (16), y (25), t (20), h (8), o (15), n (14), i (9), s (19), a (1), m (13), a (1), z (26), i (9), n (14), g (7) 16 + 25 + 20 + 8 + 15 + 14 + 9 + 19 + 1 + 13 + 1 + 26 + 9 + 14 + 7 = 197","solution":"def calculate_score(s: str) -> int: score = 0 for char in s: if char.isalpha(): score += ord(char.lower()) - ord(\'a\') + 1 return score"},{"question":"**Problem Description** You are given a dictionary of student names and their corresponding scores. Write a program to sort the students based on their scores in descending order. If two students have the same score, sort them alphabetically by their names in ascending order. **Input Format** The input will contain a series of student names followed by their scores, each on a new line. The series terminates with the word \\"END\\". **Output Format** Output the sorted list of student names along with their scores, each pair on a new line. Ensure the names are sorted based on the criteria mentioned. **Constraints** - The number of students is between 1 and 100. - The scores range between 0 and 100. - The names consist of alphabetic characters only and have lengths between 1 and 50. - Each student\'s name is unique. **SAMPLE INPUT** ``` Alice 85 Bob 95 Charlie 85 David 90 END ``` **SAMPLE OUTPUT** ``` Bob 95 David 90 Alice 85 Charlie 85 ```","solution":"def sort_students(data): Sort the students based on their scores in descending order. If two students have the same score, sort them alphabetically by their names in ascending order. Parameters: data (list): A list of tuples where each tuple contains a student name and their score. Returns: list: A sorted list of tuples containing student names and their scores. # Sort by score descending, then by name ascending sorted_data = sorted(data, key=lambda x: (-x[1], x[0])) return sorted_data def parse_input(data): Parses the input data to extract student names and scores. Parameters: data (list): A list of strings containing student names and scores. Returns: list: A list of tuples where each tuple contains a student name and their score. result = [] for line in data: if line == \\"END\\": break name, score = line.rsplit(\\" \\", 1) result.append((name, int(score))) return result def main(input_data): students = parse_input(input_data) sorted_students = sort_students(students) return sorted_students"},{"question":"John is planning to create a backup of his favorite movies. He wants to store them into a single file in a specific sequence. John has the list of movie file names in the sequence he wants to store them. To ensure that no two files have the same name, he wants to rename the files by appending a unique suffix consisting of digits starting from 1. Write a program to determine the new sequence of file names with the unique suffixes. -----Constraints----- - The length of the list of movie file names will not exceed 100. - Each movie file name is a string consisting of lowercase English letters. - The length of each movie file name is between 1 and 50 (inclusive). -----Input----- Input is given from Standard Input in the following format: n names -----Output----- Output the sequence of file names with unique suffixes in the specified format. -----Sample Input----- 4 avengers infinitywar avengers endgame -----Sample Output----- avengers1 infinitywar avengers2 endgame In this case, the movie file names are \\"avengers\\", \\"infinitywar\\", \\"avengers\\", and \\"endgame\\". The first \\"avengers\\" gets the suffix 1 to become \\"avengers1\\" and the second \\"avengers\\" gets the suffix 2 to become \\"avengers2\\". The other filenames remain unchanged.","solution":"def rename_files(file_list): Rename the files by adding a unique suffix to duplicate names. name_counts = {} renamed_files = [] for file in file_list: if file in name_counts: name_counts[file] += 1 renamed_files.append(f\\"{file}{name_counts[file]}\\") else: name_counts[file] = 1 renamed_files.append(f\\"{file}{name_counts[file]}\\") return renamed_files def format_sequence(file_list): return \\" \\".join(file_list) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) file_names = data[1:] renamed_files = rename_files(file_names) print(format_sequence(renamed_files)) if __name__ == \\"__main__\\": main()"},{"question":"Given two sorted lists of integers `list1` and `list2`, your task is to find their intersection. Constraints * 1 leq len(list1), len(list2) leq 200,000 * -10^9 leq list1[i], list2[j] leq 10^9 (0 leq i < len(list1), 0 leq j < len(list2)) Input The input is provided in the following format: len(list1) list1[0] ; list1[1] ; ... ; list1[len(list1)-1] len(list2) list2[0] ; list2[1] ; ... ; list2[len(list2)-1] Both `list1` and `list2` are sorted in non-decreasing order and may contain duplicate elements. Output Print the elements of the intersection in non-decreasing order, one per line. Each element should only be printed once, even if it appears multiple times in the input lists. Example Input 4 1 3 3 4 3 3 3 5 Output 3 Input 5 -10 -5 0 5 10 4 -5 0 5 15 Output -5 0 5","solution":"def sorted_list_intersection(list1, list2): Returns the intersection of two sorted lists as a sorted list with unique elements. i, j = 0, 0 intersection = [] while i < len(list1) and j < len(list2): if list1[i] == list2[j]: if not intersection or intersection[-1] != list1[i]: intersection.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return intersection"},{"question":"In a distant future, robotic drones have been deployed for various tasks on a massive grid-like terrain. The grid is represented as an m x n matrix, where each cell contains an integer that denotes the altitude of that cell. Drones can move from one cell to another if and only if the altitude difference between the two cells is at most 1. The drones can move in four possible directions: left, right, up, and down. You are responsible for programming a drone that can start from any cell in the grid and must reach a target cell with specific coordinates. Given the starting and target cell coordinates, your task is to determine the minimum number of moves needed for the drone to reach the target. If it\'s not possible for the drone to reach the target, return -1. Write a program that, given the m x n grid of altitudes, the starting cell, and the target cell, determines the minimum number of moves required to reach the target. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 1000), representing the number of rows and columns of the grid. The next m lines each contain n integers, representing the altitude of each cell in the grid. The next line contains two integers, sx and sy (0 ≤ sx < m, 0 ≤ sy < n), representing the starting cell coordinates. The final line contains two integers, tx and ty (0 ≤ tx < m, 0 ≤ ty < n), representing the target cell coordinates. Output Print a single integer, the minimum number of moves required for the drone to reach the target cell. If it\'s not possible to reach the target, print -1. Example Input 4 5 1 2 2 3 4 2 3 3 4 5 3 3 3 3 2 4 5 6 5 6 0 0 3 4 Output 7 Explanation The drone starts at cell (0, 0) with altitude 1 and moves to the target cell (3, 4) with altitude 6. The minimal path it can take is: - (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,3) -> (3,3) -> (3,4) The total number of moves is 7.","solution":"from collections import deque def min_moves_to_target(grid, start, target): Determines the minimum number of moves needed for a drone to reach the target cell. :param grid: List[List[int]] -- The grid of altitudes. :param start: Tuple[int, int] -- Starting cell coordinates (sx, sy). :param target: Tuple[int, int] -- Target cell coordinates (tx, ty). :return: int -- Minimum number of moves to reach target cell or -1 if impossible. m, n = len(grid), len(grid[0]) sx, sy = start tx, ty = target if (sx == tx and sy == ty): return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(n)] for _ in range(m)] queue = deque([(sx, sy, 0)]) # Each element is (x, y, moves) visited[sx][sy] = True while queue: x, y, moves = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: if abs(grid[nx][ny] - grid[x][y]) <= 1: if (nx == tx and ny == ty): return moves + 1 visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return -1"},{"question":"You are given an array of integers of length N. You need to distribute this array into two groups such that the absolute difference between the sums of elements in these two groups is minimized. Constraints * 2 ≤ N ≤ 20 * 1 ≤ Array element ≤ 10000 Input The input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the minimum absolute difference between the sums of the two groups. Examples Input 4 2 4 6 8 Output 0 Input 3 1 2 3 Output 0 Input 5 10 20 15 5 25 Output 5","solution":"def min_difference_partition(arr): total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j]: diff = total_sum - 2 * j break return diff if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) result = min_difference_partition(arr) print(result)"},{"question":"To organize a masquerade ball, Lily needs to create a set of masks. Each mask consists of small elements connected in such a way that the resulting mask forms a palindrome. A palindrome is a sequence that reads the same backward as forward. Given a string `t` consisting of lowercase letters, check if it is possible to rearrange the characters of `t` to form a palindrome. If possible, return a possible palindrome formed by rearranging the characters of the string. If it is not possible to form any palindrome from the characters of `t`, return -1. -----Input----- One line of input contains the string `t` (1 leq |t| leq 1000), consisting of only lowercase English letters. -----Output----- If it is possible to rearrange the characters of `t` to form a palindrome, print one possible palindrome string. If it is not possible, print -1. -----Examples----- Input aabb Output abba Input abc Output -1 Input aabbccddeeeff Output abcdeffedcba -----Note----- In the first example, the string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\". In the second example, it is not possible to rearrange the string \\"abc\\" to form any palindrome. In the third example, one possible rearrangement of \\"aabbccddeeeff\\" to form a palindrome is \\"abcdeffedcba\\". Multiple valid palindromes are possible in this case.","solution":"def can_form_palindrome(t): from collections import Counter char_count = Counter(t) odd_count_chars = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count_chars > 1: return -1 half_palindrome = [] middle_char = \\"\\" for char, count in char_count.items(): if count % 2 != 0: middle_char = char half_palindrome.extend(char * (count // 2)) half_palindrome = \'\'.join(half_palindrome) return half_palindrome + middle_char + half_palindrome[::-1]"},{"question":"You are given a string `s` consisting of lowercase letters. A segment is a continuous sequence of characters within the string. You can perform the following operation any number of times: select a segment of the string and reverse it. Your task is to find the lexicographically smallest string that can be obtained by performing the operation zero or more times. -----Input----- The first line contains the integer `n` (1 ≤ n ≤ 100) — the length of the string `s`. The second line contains the string `s` consisting of lowercase English letters. -----Output----- Print one string — the lexicographically smallest string you can obtain. -----Examples----- Input 5 dcba Output abcd Input 7 zxyabc Output abcyxz -----Note----- In the first example, you can obtain the answer by reversing the entire string once: \\"dcba\\" -> \\"abcd\\". In the second example, one way to obtain the answer is by reversing the segment \\"zxy\\" to get \\"yxzabc\\", and then reverse the segment \\"abcyxz\\" to get \\"abcyxza\\". The final answer is \\"abcyxz\\".","solution":"def lexicographically_smallest_string(n, s): Returns the lexicographically smallest string that can be obtained by reversing any segments of the string any number of times. # Sort the characters of the string and return as a new string return \'\'.join(sorted(s))"},{"question":"You are given a string S and an array P of integers. For each character in the string S from left to right, increment the position in the array that corresponds to the alphabet position of the character (i.e., \'a\' corresponds to index 0, \'b\' to index 1, etc.). After processing the entire string, return the array P with the updated count of each character. Example 1: Input: S = \\"abcdabc\\" P = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] Output: P = [2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] Explanation: After processing the string \\"abcdabc\\", the final counts of each character are: \'a\' -> 2 \'b\' -> 2 \'c\' -> 2 \'d\' -> 1 Example 2: Input: S = \\"zzz\\" P = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] Output: P = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0] Explanation: After processing the string \\"zzz\\", the final counts of each character are: \'z\' -> 3 Your Task: You don\'t need to read input or print anything. Your task is to complete the function countCharacters() which takes a string S and an array P[] as input parameters and modifies the array P to reflect the character counts from the string S. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^5 S contains only lowercase English letters. P is an array of length 26.","solution":"def countCharacters(S, P): Updates the array P to reflect the counts of each character in string S. for char in S: P[ord(char) - ord(\'a\')] += 1 return P"},{"question":"You work for a company that processes large amounts of financial transactions. As part of a new initiative to detect fraudulent transactions, you need to write a function that calculates the running median of a stream of numbers. The running median of a stream is the median of the numbers seen so far. # Task Write a function `running_median` that receives a stream of numbers (a list of integers) and returns a list of the running medians. - The median of a list of numbers is the middle number if the list is odd in length, or the average of the two middle numbers if the list is even in length. - The function should handle the input stream in the order received and efficiently compute the median as each new number is added to the stream. - You can assume that the input list is not empty. For example, if the input stream is `[2, 1, 5, 7, 2, 0, 5]`, the running medians would be `[2, 1.5, 2, 3.5, 2, 2, 2]`. # Function Signature ```python def running_median(stream: List[int]) -> List[float]: pass ``` # Constraints - Use efficient data structures to ensure the function runs in an optimal time complexity. - Python\'s default libraries (e.g., `heapq`) or similar can be used to assist with the solution. # Example ```python assert running_median([2, 1, 5, 7, 2, 0, 5]) == [2, 1.5, 2, 3.5, 2, 2, 2] assert running_median([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3] ``` Implement the function `running_median` to achieve this task.","solution":"import heapq from typing import List def running_median(stream: List[int]) -> List[float]: min_heap = [] # To store the larger half of the numbers max_heap = [] # To store the smaller half of the numbers (as negative values) medians = [] for number in stream: if not max_heap or number < -max_heap[0]: heapq.heappush(max_heap, -number) else: heapq.heappush(min_heap, number) # Balance the two heaps such that their sizes differ at most by 1 if len(max_heap) > len(min_heap) + 1: heapq.heappush(min_heap, -heapq.heappop(max_heap)) elif len(min_heap) > len(max_heap): heapq.heappush(max_heap, -heapq.heappop(min_heap)) # Compute median if len(max_heap) == len(min_heap): median = (-max_heap[0] + min_heap[0]) / 2 else: median = -max_heap[0] medians.append(median) return medians"},{"question":"Write a function `find_missing_numbers` that accepts a list of integers ranging from `1` to `n`, where some numbers are missing, and returns a list of those missing numbers in ascending order. Notes: - The length of the input list can be up to `n-1` where `n` is the largest number in the range. - The returned list should be sorted in ascending order. - You are not allowed to use sets for this problem.","solution":"def find_missing_numbers(nums): Returns a list of missing numbers in the range 1 to n. Parameters: nums (list of int): A list of integers ranging from 1 to n, with some numbers potentially missing. Returns: list of int: A list of the missing numbers in ascending order. n = max(nums) full_range = list(range(1, n+1)) missing_numbers = [] for number in full_range: if number not in nums: missing_numbers.append(number) return missing_numbers"},{"question":"Write a function that takes a string as input and returns a new string where all duplicate characters are removed. The order of characters in the output string should be the same as their first appearance in the input string. # Examples ``` \\"banana\\" -> \\"ban\\" \\"apple\\" -> \\"aple\\" \\"racecar\\" -> \\"race\\" ```","solution":"def remove_duplicates(s): Returns a new string where all duplicate characters are removed. The order of characters in the output string is the same as their first appearance in the input string. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Implement a function to simulate a simplified version of a text-based game. The game involves a grid of cells, each having a certain value. The player starts at the top-left corner of the grid and aims to reach the bottom-right corner. The player can only move right or down at each step. The player\'s score is the sum of the values of the cells they visit. The objective is to find the maximum score the player can achieve from the top-left to the bottom-right corner. Your task is to write a function that accepts a 2D grid of integers and returns the maximum score the player can obtain. Input: - A 2D list `grid` representing the grid of cells. Output: - An integer representing the maximum score possible. Constraints: - The dimensions of the grid are between 1x1 and 1000x1000. - Each cell in the grid contains an integer between -1000 and 1000. Example: Input: ``` [ [5, 3, 2], [1, 2, 1], [1, 1, 5] ] ``` Output: ``` 16 ``` Explanation: The optimal path is 5 -> 3 -> 2 -> 1 -> 5, resulting in a score of 16. Note: - Your solution should be efficient, considering the potentially large grid size.","solution":"def max_score(grid): Returns the maximum score the player can achieve from top-left to bottom-right of the grid. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) dp = [[0]*cols for _ in range(rows)] dp[0][0] = grid[0][0] for i in range(1, cols): dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, rows): dp[i][0] = dp[i-1][0] + grid[i][0] for i in range(1, rows): for j in range(1, cols): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[rows-1][cols-1]"},{"question":"You are provided with a list of non-negative integers. Your task is to form the largest possible number by concatenating the integers in the list. Write a function `largest_number(nums)` that takes a list of non-negative integers and returns a string representing the largest number that can be formed by concatenating the integers. # Input - `nums`: A list of non-negative integers. # Output - The largest possible number formed by concatenating the list elements, returned as a string. # Constraints - The length of `nums` is between 1 and 100. - Each element in `nums` is between 0 and 10^9. # Example Sample Input 0 ``` nums = [10, 2] ``` Sample Output 0 ``` \\"210\\" ``` Sample Input 1 ``` nums = [3, 30, 34, 5, 9] ``` Sample Output 1 ``` \\"9534330\\" ``` # Note - The result can be very large, so you need to return a string instead of an integer.","solution":"from functools import cmp_to_key def compare(x, y): # Custom comparison function to decide the order based on concatenation if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largest_number(nums): Returns the largest possible number formed by concatenating a list of non-negative integers. # Convert all numbers to strings for concatenation and sorting str_nums = list(map(str, nums)) # Sort numbers based on the custom comparison sorted_str_nums = sorted(str_nums, key=cmp_to_key(compare)) # Concatenate the sorted numbers largest_num = \'\'.join(sorted_str_nums) # Strip leading zeros (if all zeros like [0, 0, 0], result should be \\"0\\") return largest_num.lstrip(\'0\') or \'0\'"},{"question":"You have two trees, Tree1 and Tree2. A tree is represented by the root node. Each node has a value and can have any number of child nodes. Two trees are considered symmetric if they are mirror images of each other. You need to determine if Tree1 and Tree2 are symmetric. Write a function `areSymmetric(Tree1, Tree2)` that takes the root nodes of two trees and returns `True` if the trees are symmetric or `False` otherwise. A tree node is represented as follows: ```python class TreeNode: def __init__(self, value=0, children=None): self.value = value self.children = children if children is not None else [] ``` Your function should return a boolean value indicating whether Tree1 and Tree2 are symmetric. # Function Signature ```python def areSymmetric(Tree1: TreeNode, Tree2: TreeNode) -> bool: ``` # Input - `Tree1`: Root node of the first tree. - `Tree2`: Root node of the second tree. # Output - Return `True` if Tree1 and Tree2 are symmetric or `False` otherwise. # Constraints - The number of nodes in each tree is in the range [1, 100]. - Each node\'s value is a unique integer in the range [0, 1000]. # Example Example 1: ``` Tree1: 1 Tree2: 1 / / 2 3 3 2 / / 4 5 5 4 Input: Tree1 = [1, [2, [4], None], [3, [5], None]], Tree2 = [1, [3, [5], None], [2, [4], None]] Output: True ``` Explanation: Tree1 and Tree2 are mirror images of each other. So the output is True. Example 2: ``` Tree1: 1 Tree2: 1 / / 2 2 2 2 / / 3 4 3 4 Input: Tree1 = [1, [2, [3, None], [4, None]], [2, [4, None]]], Tree2 = [1, [2, [4, None], [3, None]], [2, [4, None]]] Output: False ``` Explanation: Tree1 and Tree2 are not mirror images of each other. So the output is False. Example 3: ``` Tree1: 1 Tree2: 1 / / 2 2 2 3 Input: Tree1 = [1, [2, None, None], [2, None, None]], Tree2 = [1, [2, None, None], [3, None, None]] Output: False ``` Explanation: Tree1 and Tree2 are not mirror images of each other. So the output is False. # Note Consider writing helper functions for comparing left and right subtrees to enhance the readability and modularity of your code.","solution":"class TreeNode: def __init__(self, value=0, children=None): self.value = value self.children = children if children is not None else [] def areSymmetric(Tree1: TreeNode, Tree2: TreeNode) -> bool: if not Tree1 and not Tree2: return True if not Tree1 or not Tree2: return False if Tree1.value != Tree2.value: return False if len(Tree1.children) != len(Tree2.children): return False for c1, c2 in zip(Tree1.children, reversed(Tree2.children)): if not areSymmetric(c1, c2): return False return True"},{"question":"Given a list of integers `nums`, check if there exists a subsequence such that the sum of the subsequence is equal to half of the sum of the entire list. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Example 1: Input: nums = [1, 5, 11, 5] Output: true Explanation: The list can be partitioned as [1, 5, 5] and [11], and the sum of [1, 5, 5] is equal to half of the entire list sum, which is 11. Example 2: Input: nums = [1, 2, 3, 5] Output: false Explanation: The list cannot be partitioned in such a way that both parts have equal sum. Constraints: * 1 <= nums.length <= 200 * 1 <= nums[i] <= 100","solution":"def can_partition(nums): Determines if the list can be partitioned such that a subsequence sums to half of the sum of the entire list. total_sum = sum(nums) if total_sum % 2 != 0: return False target = total_sum // 2 # This is essentially a knapsack problem where we\'re trying to find if # we can get a subset with sum equal to target dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Given a list of N integers, determine the number of unique pairs (i, j) where i < j and the sum of the pair (nums[i] + nums[j]) is a prime number. INPUT: The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the size of the list. - The second line contains N integers, representing the elements of the list. OUTPUT: For each test case, output the number of unique pairs whose sum is a prime number. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 -10^6 ≤ nums[i] ≤ 10^6 SAMPLE INPUT: 2 4 1 4 6 7 5 2 3 5 8 13 SAMPLE OUTPUT: 1 4 Explanation: For the first input: - The pairs and their sums are: (1, 4)=5, (1, 6)=7, (1, 7)=8, (4, 6)=10, (4, 7)=11, (6, 7)=13. - The prime sums are 5, 7, 11, and 13. - Therefore, the number of unique pairs is 1. For the second input: - The pairs and their sums are: (2, 3)=5, (2, 5)=7, (2, 8)=10, (2, 13)=15, (3, 5)=8, (3, 8)=11, (3, 13)=16, (5, 8)=13, (5, 13)=18, (8, 13)=21. - The prime sums are 5, 7, 11, and 13. - Therefore, the number of unique pairs is 4.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_prime_pairs(test_cases): results = [] for N, nums in test_cases: primes_count = 0 pairs = set() for i in range(N): for j in range(i + 1, N): pair_sum = nums[i] + nums[j] if pair_sum not in pairs: if is_prime(pair_sum): primes_count += 1 pairs.add(pair_sum) results.append(primes_count) return results def process_input(input_data): Input Data: - 1st line : T (number of test cases) - For each test case: - 1st line : N (size of list) - 2nd line : N space-separated integers input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) nums = list(map(int, input_lines[index + 1].strip().split())) test_cases.append((N, nums)) index += 2 return test_cases def solve(input_data): test_cases = process_input(input_data) results = count_prime_pairs(test_cases) return \\"n\\".join(map(str, results))"},{"question":"Problem Statement: You are working for a transportation company that needs to analyze the routes of delivery trucks. The company is particularly concerned about the efficiency of drivers in moving between delivery points. You have been given the locations of N delivery points on a straight road and the time stamps indicating when each truck reached each delivery point. Your task is to determine the truck that took the least amount of time to move between any two consecutive delivery points. If there is a tie, report a tie. Note: The time difference should be taken in absolute terms. Input: - First line contains a positive integer N - the number of delivery points. - Second line contains N integers, each representing the time stamps (in minutes) at which Truck 1 reached each delivery point. - Third line contains N integers, each representing the time stamps (in minutes) at which Truck 2 reached each delivery point. Output: Print the identifier (\\"Truck 1\\" or \\"Truck 2\\") of the truck that took the least amount of time to move between any two consecutive delivery points. If both trucks have the same minimum time difference, print \\"Tie\\". Print a single integer on a new line - the minimum time taken between two consecutive delivery points. Constraints: 2 ≤ N ≤ 10^6 0 ≤ time stamps ≤ 10^9 SAMPLE INPUT 4 0 5 9 15 0 3 10 18 SAMPLE OUTPUT Truck 2 3 Explanation Minimum time difference between two consecutive delivery points for Truck 1 = |5 - 0| = 5 Minimum time difference between two consecutive delivery points for Truck 2 = |3 - 0| = 3 Truck 2 had the minimum time, which was 3 minutes. Hence, Truck 2 is the output.","solution":"def find_quickest_truck(N, times_truck1, times_truck2): Finds the truck that took the least amount of time to move between any two consecutive delivery points and the minimum time taken. Args: N (int): Number of delivery points. times_truck1 (list): List of N integers representing time stamps for Truck 1. times_truck2 (list): List of N integers representing time stamps for Truck 2. Returns: (str, int): Identifier of the truck with minimum time (\\"Truck 1\\", \\"Truck 2\\"), or \\"Tie\\" in case of tie, and the minimum time. min_diff1 = float(\'inf\') min_diff2 = float(\'inf\') for i in range(1, N): min_diff1 = min(min_diff1, abs(times_truck1[i] - times_truck1[i - 1])) min_diff2 = min(min_diff2, abs(times_truck2[i] - times_truck2[i - 1])) if min_diff1 < min_diff2: return \\"Truck 1\\", min_diff1 elif min_diff2 < min_diff1: return \\"Truck 2\\", min_diff2 else: return \\"Tie\\", min_diff1"},{"question":"A d-ary heap is a generalization of a binary heap where each node has at most d children. The d-ary heap is mainly used in heap sort algorithms as a priority queue structure. In a d-ary heap, every node at index i in the heap array has: * Children at indices: d*i + 1, d*i + 2, ..., d*i + d * A parent at index: (i-1)//d The heap invariants ensure that the key of each node is at least as large as the key of its parent (min-heap property). Write a program to implement and demonstrate basic operations on a d-ary heap given non-negative integer values: 1. `insert(x)`: Insert an element x into the d-ary heap. 2. `extract_min()`: Extract and return the smallest element from the d-ary heap. 3. `delete(x)`: Delete a given element x from the d-ary heap if it exists. 4. `show()`: Print the current elements of the d-ary heap in level order. Constraints: * 1 leq n leq 10^5 where n is the number of operations. * 1 leq x leq 10^9 for each node value. * 2 leq d leq 100 Input: The first line contains an integer d, the branching factor of the d-ary heap. The second line contains an integer n, the number of operations to execute. The next n lines describe operations of the following forms: * insert x * extract_min * delete x * show Output: For each `extract_min` or `show` operation, print the result on a new line. For `extract_min`, print the smallest element or `NULL` if the heap is empty. For `show`, print the heap\'s elements in level order or \\"EMPTY\\" if the heap is empty. Example: Input: ``` 3 10 insert 5 insert 3 insert 4 show extract_min show delete 4 show extract_min show ``` Output: ``` 3 4 5 3 4 5 4 5 EMPTY ```","solution":"import heapq class DHeap: def __init__(self, d): self.heap = [] self.d = d def insert(self, x): heapq.heappush(self.heap, x) def extract_min(self): if not self.heap: return \'NULL\' return heapq.heappop(self.heap) def delete(self, x): try: index = self.heap.index(x) self.heap[index] = self.heap[-1] self.heap.pop() if index < len(self.heap): heapq._siftup(self.heap, index) heapq._siftdown(self.heap, 0, index) except ValueError: pass def show(self): if not self.heap: return \'EMPTY\' return \' \'.join(map(str, sorted(self.heap)))"},{"question":"Create a function ```unique_elements``` that takes in two lists of integers, ```list1``` and ```list2```, and returns a list containing elements that are unique to each list (i.e., elements only in `list1` and elements only in `list2` without duplicates). Examples: * unique_elements([1, 2, 3], [3, 4, 5]) should return [1, 2, 4, 5] * unique_elements([1, 2, 2, 3], [3, 3, 4, 5]) should return [1, 2, 4, 5] * unique_elements([], [1, 2, 3]) should return [1, 2, 3] Ensure that the resulting list is sorted in ascending order.","solution":"def unique_elements(list1, list2): Returns a sorted list containing elements that are unique to each list. set1 = set(list1) set2 = set(list2) unique_to_list1 = set1 - set2 unique_to_list2 = set2 - set1 result = list(unique_to_list1.union(unique_to_list2)) return sorted(result)"},{"question":"Aria is working on a project to facilitate communication between various devices in a smart home. Each device in the network has a unique ID, and they communicate via a series of directed messages. To ensure message integrity, Aria needs to verify whether a message sent from one device can reach another device through the directed paths of the network. She needs your help to write a program that determines if there is a path from a source device to a target device for multiple queries. # Problem Statement Given a network of `n` devices and `m` directed connections (messages), determine if a message can travel from a source device to a target device for a series of queries. Each query specifies a source device and a target device, and you need to output whether the message can travel from the source to the target using the directed connections available. # Input - The first line contains integers `n` and `m` (1 ≤ n, m ≤ 100,000) — the number of devices and the number of directed messages. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) — indicating a directed message from device `u` to device `v`. - The next line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. - Each of the next `q` lines contains two integers `a` and `b` (1 ≤ a, b ≤ n) — the source and target devices for the query. # Output - For each query, print \\"YES\\" if a message can travel from device `a` to device `b` using the directed messages, otherwise print \\"NO\\". # Example Input ``` 5 5 1 2 2 3 3 4 4 5 1 3 3 1 4 1 4 2 5 5 1 4 3 ``` Output ``` YES YES NO NO ``` # Explanation - For the first query, there is a path from device 1 to device 4 via devices 2 and 3. - For the second query, there is a path from device 2 to device 5 via devices 3 and 4. - For the third query, there is no path from device 5 to device 1 as all connections are directed. - For the fourth query, there is no path from device 4 to device 3 as all connections are directed in the opposite direction.","solution":"from collections import defaultdict, deque def can_message_reach(n, m, edges, q, queries): # Initialize adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Perform BFS to check reachability def bfs(source, target): if source == target: return True visited = set() queue = deque([source]) while queue: node = queue.popleft() if node == target: return True if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return False results = [] for a, b in queries: if bfs(a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a city, there are n intersections and m two-way roads connecting some pairs of intersections. It is possible to travel between any two intersections using these roads. The city is planning to implement a new traffic system where each intersection must have exactly two roads connected to it to form a circular route that allows vehicles to move in both directions around the city. Given the initial road network, your task is to transform it into the required circular route network by possibly adding or removing the minimum number of roads. Note that it\'s guaranteed that a circular route connecting all intersections is always possible for any given initial road network. -----Input----- The first line contains two integers n (3 leq n leq 1000) and m (n leq m leq 2000), the number of intersections and the number of roads, respectively. The next m lines each contain two integers u and v (1 leq u, v leq n, u ne v), indicating that there is a road between intersections u and v. It is guaranteed that there are no duplicate roads. -----Output----- Output n lines, each containing two integers u and v (1 leq u, v leq n), indicating that there is a road between intersections u and v in the final circular route network. -----Examples----- Sample Input 1: 4 4 1 2 2 3 3 4 4 1 Sample Output 1: 1 2 2 3 3 4 4 1 Sample Input 2: 5 6 1 2 2 3 3 4 4 5 5 1 2 4 Sample Output 2: 1 2 2 3 3 4 4 5 5 1","solution":"def transform_to_circular_route(n, m, connections): Transform the initial road network into a circular route network. Parameters: n (int): The number of intersections. m (int): The number of roads. connections (list of tuple): List of tuples where each tuple represents a road between two intersections. Returns: list of tuple: List of tuples representing the circular route network. # A circular route involves connecting each node to exactly two neighbors forming a cycle circular_route = [] for i in range(1, n): circular_route.append((i, i+1)) circular_route.append((n, 1)) return circular_route"},{"question":"You have an array of n integers where some of the elements might appear more than once. You need to find the first missing positive integer in linear time and constant space. In other words, you need to implement a function that finds the smallest positive integer that doesn’t appear in the array. **Function Signature** ```python def find_first_missing_positive(nums: List[int]) -> int: ``` **Input** - An array of integers, `nums` of length `n` (1 le n le 10^6). **Output** - An integer representing the first missing positive integer. **Examples** ```python assert find_first_missing_positive([1, 2, 0]) == 3 assert find_first_missing_positive([3, 4, -1, 1]) == 2 assert find_first_missing_positive([7, 8, 9, 11, 12]) == 1 ``` **Note** - Your algorithm should have a time complexity of O(n) and use constant extra space. # Explanation In the first example, the input array is [1, 2, 0]. The smallest positive integer missing from this array is `3` because `1` and `2` are present. In the second example, the input array is [3, 4, -1, 1]. The smallest positive integer missing from this array is `2` because `1` is present, but `2` is not. In the third example, the input array is [7, 8, 9, 11, 12]. The smallest positive integer missing from this array is `1` because it is not present in the array.","solution":"def find_first_missing_positive(nums): This function finds the first missing positive integer in the array. n = len(nums) # First step: Put each number in its right place, e.g. 1 at index 0, 2 at index 1, etc. for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Second step: Find the first place where the index doesn\'t match the value. for i in range(n): if nums[i] != i + 1: return i + 1 # If all numbers are in the right place, the smallest missing positive integer is n + 1 return n + 1"},{"question":"Given a string consisting of only characters \'a\' and \'b\', you are tasked to remove the minimum number of characters from the string such that the remaining string contains no consecutive identical characters. For example, if the string is \\"aabb\\", you can remove one \'a\' and one \'b\' to make it \\"ab\\". Write a function `minRemovals` that takes a string `s` and returns an integer representing the minimum number of characters to be removed. Example 1: Input: s = \\"aabb\\" Output: 2 Explanation: To remove consecutive identical characters, remove one \'a\' and one \'b\' and the resulting string will be \\"ab\\". Example 2: Input: s = \\"abab\\" Output: 0 Explanation: There are no consecutive identical characters. Example 3: Input: s = \\"aaaa\\" Output: 3 Explanation: To remove consecutive identical characters, remove three \'a\'s and the resulting string will be \\"a\\". Your function should have the following signature: ```python def minRemovals(s: str) -> int: ``` Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 <= length of s <= 10^5","solution":"def minRemovals(s: str) -> int: # Initialize the variable to count the removals removals = 0 # Start traversing the string from the second character for i in range(1, len(s)): # Check if the current character is the same as the previous one if s[i] == s[i - 1]: # If it is, increment the removal counter removals += 1 return removals"},{"question":"A well-known problem in competitive programming involves simulating a robot\'s movements on a grid. Your task is to write a program that simulates the movement of a robot based on a sequence of commands and then reports the robot\'s final position. The robot starts at position (0, 0) on a 2D plane and initially faces north. The robot can move forward in the direction it is currently facing or turn left or right. The commands the robot can receive are: \\"move x\\" (where x is a positive integer representing the number of units the robot moves forward), \\"left\\" (which causes the robot to turn 90 degrees counterclockwise), and \\"right\\" (which causes the robot to turn 90 degrees clockwise). For example, if the robot is facing north and receives the command \\"move 2\\", it will move to position (0, 2). If it then receives the command \\"right\\", it will turn to face east. If it then receives the command \\"move 3\\", it will move to position (3, 2). Your task is to read a series of commands and determine the robot\'s final position on the grid. # Input The input consists of multiple command sequences, each corresponding to a single simulation of the robot\'s movements. Each command sequence starts with a positive integer indicating the number of commands in the sequence (less than or equal to 1000). This is followed by the commands, one per line. The end of the input is indicated by a line containing a single zero. # Output For each command sequence, output one line containing two integers representing the final coordinates of the robot\'s position. # Example Input ``` 3 move 2 right move 3 4 move 1 left move 1 right 0 ``` Output ``` 3 2 -1 1 ``` Note: The direction changes (left and right) should be interpreted as relative to the robot\'s current orientation.","solution":"def simulate_robot(commands): Simulates the movement of a robot based on a sequence of commands and returns the final position. :param commands: A list of commands :type commands: list[str] :return: Final coordinates (x, y) of the robot :rtype: tuple[int, int] # Directions are [North, East, South, West] directions = [\'N\', \'E\', \'S\', \'W\'] direction_index = 0 # The robot initially faces north x = 0 y = 0 for command in commands: if command.startswith(\'move\'): _, distance = command.split() distance = int(distance) if directions[direction_index] == \'N\': y += distance elif directions[direction_index] == \'E\': x += distance elif directions[direction_index] == \'S\': y -= distance elif directions[direction_index] == \'W\': x -= distance elif command == \'left\': direction_index = (direction_index - 1) % 4 elif command == \'right\': direction_index = (direction_index + 1) % 4 return x, y def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") i = 0 results = [] while i < len(input_lines): number_of_commands = int(input_lines[i]) if number_of_commands == 0: break commands = input_lines[i + 1 : i + 1 + number_of_commands] result = simulate_robot(commands) results.append(result) i += number_of_commands + 1 return results def main(): import sys input_data = sys.stdin.read() results = process_input(input_data) for result in results: print(f\\"{result[0]} {result[1]}\\") # Uncomment below lines to run the function in an interactive environment with standard input # if __name__ == \\"__main__\\": # main()"},{"question":"A string is called beautiful if no two adjacent characters are the same. You are given a string s of length n consisting of lowercase English letters. You can replace any character in the string with any other lowercase English letter any number of times. Determine the minimum number of replacements needed to make the string beautiful. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Description of the test cases follows. Each test case consists of two lines. The first line contains a single integer n (1 le n le 10^5) — the length of the string. The second line contains a string s of length n. It\'s guaranteed that the sum of lengths of all strings over all test cases does not exceed 10^5. -----Output----- For each test case print a single integer — the minimum number of replacements needed to make the string beautiful. -----Examples----- Input 3 4 aabb 5 ababa 3 aaa Output 2 0 1 -----Note----- In the first test case the minimum number of replacements needed is 2. We can replace \'b\' of the string \\"aabb\\" with \'c\' to get \\"abcb\\", which is a beautiful string. In the second test case, the string is already beautiful and does not need any replacements. In the third test case, we replace the second \'a\' with \'b\' to get the string \\"aba\\", which is beautiful. Hence the minimum replacements needed is 1.","solution":"def min_replacements_to_beautiful_string(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] replacements = 0 for j in range(1, n): if s[j] == s[j-1]: replacements += 1 # Change current character to something different s = s[:j] + (\'a\' if s[j] != \'a\' else \'b\') + s[j+1:] results.append(replacements) return results"},{"question":"A flower shop sells the following four types of flowers: - Roses: costs P dollars per stem. - Tulips: costs Q dollars per stem. - Daisies: costs R dollars per stem. - Sunflowers: costs S dollars per stem. You have a budget of N dollars and you can buy up to K flowers in total. Your task is to determine the maximum number of distinct types of flowers (out of the four) you can buy without exceeding your budget and the total number of flowers. Note: - You can buy at most one stem of each type of flower. - If there are multiple ways to buy the maximum number of distinct types of flowers, choose the one with the maximum total number of flowers. -----Constraints----- - P, Q, R, S, N, K are integers between 1 and 100 (inclusive). -----Input----- Input is given from Standard Input in the following format: P Q R S N K -----Output----- Print two integers separated by a space: first, the maximum number of distinct types of flowers you can buy, and second, the total number of flowers. -----Sample Input----- 10 20 5 15 35 3 -----Sample Output----- 3 3 Explanation: - With a budget of 35 dollars and a maximum of 3 flowers, you can buy the following combinations: - 1 Rose (10) + 1 Daisy (5) + 1 Sunflower (15) = 3 distinct types, Total cost = 30 - 1 Tulip (20) + 1 Daisy (5) + 1 Sunflower (15) = 3 distinct types, Total cost = 40 (exceeds budget) - Other combinations either do not use the budget fully or buy fewer distinct types. Thus, you can buy up to 3 different types of flowers within the given constraints.","solution":"def max_distinct_flowers(P, Q, R, S, N, K): This function calculates the maximum number of distinct types of flowers that can be bought without exceeding the budget N and the total number of flowers K. Args: P: Cost of one Rose. Q: Cost of one Tulip. R: Cost of one Daisy. S: Cost of one Sunflower. N: The budget. K: Maximum number of flowers. Returns: A tuple of two integers. The first integer is the maximum number of distinct types of flowers, and the second integer is the total number of flowers. flower_costs = [P, Q, R, S] flower_costs.sort() total_cost = 0 num_flowers = 0 for cost in flower_costs: if total_cost + cost <= N and num_flowers < K: total_cost += cost num_flowers += 1 return num_flowers, total_cost # Example usage # print(max_distinct_flowers(10, 20, 5, 15, 35, 3)) # Expected output: (3, 30)"},{"question":"**C: Season\'s Greetings** In a small village, the local custom is to greet each other based on the current season. The seasons change as follows: Winter, Spring, Summer, and Autumn. You have to create a program that determines the current season\'s greeting based on the input. The seasons are represented by numbers: - 1: Winter - 2: Spring - 3: Summer - 4: Autumn Write a program that takes an integer representing the season as input and outputs the corresponding greeting message. The greeting messages are: - Winter: \\"Happy Winter!\\" - Spring: \\"Happy Spring!\\" - Summer: \\"Happy Summer!\\" - Autumn: \\"Happy Autumn!\\" input You will be given an integer from 1 to 4 representing the season. output Please output the corresponding greeting message based on the input. Input example 1 1 Output example 1 Happy Winter! Input example 2 3 Output example 2 Happy Summer! Example Input 4 Output Happy Autumn!","solution":"def seasons_greeting(season): Returns the greeting message based on the input season. Parameters: season (int): an integer representing the season (1 for Winter, 2 for Spring, 3 for Summer, 4 for Autumn) Returns: str: greeting message corresponding to the season greetings = { 1: \\"Happy Winter!\\", 2: \\"Happy Spring!\\", 3: \\"Happy Summer!\\", 4: \\"Happy Autumn!\\" } return greetings.get(season, \\"Invalid season\\")"},{"question":"Given is an array A consisting of N integers. You need to find an integer X that appears the most frequently in A. If there are multiple such integers, return the smallest one. -----Constraints----- - 1 ≤ N ≤ 100000 - -100000 ≤ A[i] ≤ 100000 (1 ≤ i ≤ N) -----Input----- Input is given from Standard Input in the following format: N A[1] A[2] ... A[N] -----Output----- Print an integer X that appears most frequently in A. If there are multiple such integers, print the smallest one. -----Sample Input----- 9 1 2 2 3 3 3 4 4 4 -----Sample Output----- 3 Both 3 and 4 appear three times, but since 3 is smaller, it is chosen.","solution":"def most_frequent_integer(arr): from collections import Counter count = Counter(arr) max_frequency = max(count.values()) most_frequent_numbers = [k for k, v in count.items() if v == max_frequency] return min(most_frequent_numbers) # Reading the input # import sys # input = sys.stdin.read().strip() # data = list(map(int, input.split())) # N = data[0] # A = data[1:] # print(most_frequent_integer(A))"},{"question":"You are given a list of words. Your task is to find all the unique anagrams in the list and return the groups of words that are anagrams of each other. An anagram of a word is a rearrangement of its letters to form another word. For example, the words \\"listen\\" and \\"silent\\" are anagrams of each other, as they contain the same letters with the same frequencies. -----Input----- The input consists of a single line containing a space-separated list of words. The length of the list n (1 le n le 10^5), and each word consists of lowercase English letters only. The length of each word is at most 100. -----Output----- Display the groups of anagrams, each group should be on a new line and the words in each group should be space-separated. The groups and the words within each group should be displayed in lexicographical order. -----Examples----- Sample Input: listen silent enlist inlets stop tops pots Sample Output: enlist listen silent inlets pots stop tops Sample Input: cat act tac dog god Sample Output: act cat tac dog god","solution":"from collections import defaultdict def find_anagram_groups(words): Returns groups of anagram words from the given list of words. :param words: List of words (lowercase English letters only) :type words: List[str] :return: List of anagram groups :rtype: List[List[str]] anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_map[sorted_word].append(word) # Creating sorted list of anagram groups result = [] for group in anagram_map.values(): result.append(sorted(group)) # Sorting the list of groups lexicographically result.sort() return result def format_output(groups): Formats the output from a list of anagram groups to the desired format :param groups: List of anagram groups :type groups: List[List[str]] :return: Formatted string with each group on a new line :rtype: str return \'n\'.join(\' \'.join(group) for group in groups) def group_anagrams(words): Top level function to be called with words lists to get output in desired format. :param str words: Input sentence containing space separated words :rtype: str word_list = words.split() groups = find_anagram_groups(word_list) return format_output(groups)"},{"question":"You are given a grid of size N x N. Your task is to find the number of unique paths from the top-left corner (1, 1) to the bottom-right corner (N, N) of the grid. In each step, you can either move one cell to the right or move one cell down. However, the grid contains some blocked cells, which you cannot pass through. You are provided with the positions of these blocked cells. -----Constraints----- - 2 ≦ N ≦ 10 - 0 ≦ K ≦ N^2 - 1 ≦ x_i, y_i ≦ N -----Input----- The input is given from Standard Input in the following format: N K x_1 y_1 x_2 y_2 : x_K y_K Where K is the number of blocked cells and each x_i y_i denotes the position of a blocked cell (row and column). -----Output----- Print the number of unique paths from the top-left corner to the bottom-right corner of the grid. -----Sample Input----- 3 1 2 2 -----Sample Output----- 2 Here, the grid is: (1, 1) -> (1, 2) -> (1, 3) (1, 1) -> (1, 2) -> (2, 2) -> blocked (2, 1) -> (2, 2) -> blocked (3, 1) -> (3, 2) -> (3, 3) (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) Output is 2 as there are 2 distinct paths: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3)","solution":"def unique_paths_with_obstacles(n, k, obstacles): Returns the number of unique paths in an n x n grid from (1, 1) to (n, n) with obstacles at specified positions. # Create a grid initialized to 0 grid = [[0] * n for _ in range(n)] # Mark obstacles in the grid for (x, y) in obstacles: grid[x-1][y-1] = -1 # If start or end is blocked, return 0 if grid[0][0] == -1 or grid[n-1][n-1] == -1: return 0 # Initialize top-left cell grid[0][0] = 1 # Fill the grid for i in range(n): for j in range(n): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return grid[-1][-1] def parse_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) obstacles = [] for i in range(k): x = int(data[2 + 2 * i]) y = int(data[2 + 2 * i + 1]) obstacles.append((x, y)) return n, k, obstacles if __name__ == \'__main__\': n, k, obstacles = parse_input() print(unique_paths_with_obstacles(n, k, obstacles))"},{"question":"# Task You are given two strings, `s1` and `s2`, and you need to transform `s1` into `s2`. You can do the following operations on `s1`: 1. Insert a character. 2. Delete a character. 3. Replace a character. Your task is to find the minimum number of operations required to convert `s1` into `s2`. This problem is also known as the Edit Distance (or Levenshtein Distance). # Example For `s1 = \\"kitten\\"` and `s2 = \\"sitting\\"`, the result should be `3`. Explanation: - Replace \'k\' with \'s\' - Replace \'e\' with \'i\' - Insert \'g\' at the end # Input/Output - `[input]` two strings `s1` and `s2` `2 <= s1.length, s2.length <= 1000` - `[output]` an integer The minimum number of operations required to convert `s1` into `s2`.","solution":"def min_distance(s1, s2): Returns the minimum number of operations required to convert s1 into s2. m, n = len(s1), len(s2) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, all characters of s2 need to be inserted elif j == 0: dp[i][j] = i # If s2 is empty, all characters of s1 need to be removed elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Given a grid of size m x n, you are initially positioned at the top-left corner of the grid (i.e., grid[0][0]). Your goal is to reach the bottom-right corner of the grid (i.e., grid[m-1][n-1]). You can only move either down or right at any point in time. Unfortunately, there are obstacles on some cells; an obstacle and empty space are marked as 1 and 0 respectively in the grid. Write a function that returns the number of unique paths from top-left to bottom-right that avoid obstacles. If there is no valid path, return 0. Since the number of paths may be large, return the result modulo 10^9 + 7. Example 1: Input: grid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: There is two paths available to reach from top-left to bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: grid = [[0,1],[0,0]] Output: 1 Explanation: There is only one path available: 1. Down -> Right Example 3: Input: grid = [[0,1],[1,0]] Output: 0 Explanation: No path can lead to the destination due to obstacles. Constraints: - 1 <= m, n <= 1000 - grid[i][j] is 0 or 1","solution":"def unique_paths_with_obstacles(grid): MOD = 10**9 + 7 m, n = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[m-1][n-1]"},{"question":"You are given an array consisting of n integers. You need to determine if it is possible to reorder the elements of the array such that the sum of every prefix of the array is non-negative. A prefix of an array is any leading contiguous part of the array. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 2000) — the number of elements in the array. The second line contains n integers a_{1}, a_{2}, ..., a_{n} ( -10^6 ≤ a_{i} ≤ 10^6) — the elements of the array. -----Output----- Print \\"YES\\" if it is possible to reorder the array in such a way that the sum of every prefix is non-negative. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 2 -3 4 -2 Output YES Input 3 -1 -1 -1 Output NO -----Explanation----- In the first sample, one possible ordering is: 1, 2, 4, -2, -3. Here the prefix sums are: 1, 3, 7, 5, 2, all of which are non-negative. In the second sample, no ordering can make every prefix sum non-negative since all numbers are negative.","solution":"def can_reorder_non_negative_prefix_sum(n, arr): Determines if it\'s possible to reorder the array such that the sum of every prefix is non-negative. # Sort the array in descending order arr.sort(reverse=True) prefix_sum = 0 for num in arr: prefix_sum += num if prefix_sum < 0: return \\"NO\\" return \\"YES\\""},{"question":"Maja is organizing a drawing competition, and she has provided the participants with a set of crayons. Each crayon is of a specific color, represented as a lowercase Latin letter. The crayons are provided in a box where no two crayons of the same color are adjacent. Maja needs to replace some of the crayons in the box to ensure that exactly k crayons are the same and all of the same color appear consecutively. However, it is important that she does this with the minimum number of replacements. Given the initial arrangement of crayons and the value of k, determine the minimum number of replacements required. -----Input----- The first line contains two integers n and k (1 le n, k le 1000) — the number of crayons and the required count of same color crayons consecutively. The second line contains a string s of length n — representing the initial arrangement of crayons. It is guaranteed that in the initial arrangement, no two adjacent crayons are of the same color. -----Output----- Print the minimal number of replacements needed to achieve exactly k consecutive crayons of the same color. -----Examples----- Input 6 3 abacbd Output 2 Input 8 4 abcdefgh Output 3 Input 5 1 abcde Output 0 -----Note----- In the first example, Maja can replace \\"a\\" with \\"b\\" and \\"c\\" with \\"b\\" to get \\"abbbb\\". This requires 2 replacements. In the second example, Maja can replace \\"e\\", \\"f\\", and \\"g\\" with \\"h\\" to get \\"hhhhh\\". This requires 3 replacements. In the third example, since k=1, no replacements are required as no consecutive crayons are needed.","solution":"def min_replacements_for_consecutive_crayons(n, k, s): Determine the minimum number of replacements required to ensure exactly k crayons are the same and all of the same color appear consecutively. :param n: Integer, number of crayons :param k: Integer, required count of same color crayons consecutively :param s: String, initial arrangement of crayons :return: Integer, minimum number of replacements if k == 1: return 0 min_replacements = float(\'inf\') for c in set(s): count = 0 replacements = 0 for i in range(n): if s[i] == c: count += 1 else: count = 0 if count > k: replacements += 1 if count == k: break if i == n-1: replacements += k - count if replacements < min_replacements: min_replacements = replacements return min_replacements"},{"question":"Given an array of positive integers representing the height of buildings. Your task is to find the maximum area of water that can be trapped between two buildings. The width between each pair of buildings is 1 unit. Example 1: Input: heights = [1, 8, 6, 2, 5, 4, 8, 3, 7] Output: 49 Explanation: The max area of water that can be trapped is between the buildings of heights 8 and 7 (index 1 and 8). The width is 8 - 1 = 7 units, and the height of the container is min(8, 7) = 7 units. Hence, the area is 7 * 7 = 49 units. Example 2: Input: heights = [1, 1] Output: 1 Explanation: The max area of water that can be trapped is between the two buildings of height 1 (index 0 and 1). The width is 1 - 0 = 1 unit, and the height of the container is min(1, 1) = 1 unit. Hence, the area is 1 * 1 = 1 unit. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxWaterArea() which takes a list of integers heights as input parameter and returns the maximum area of water that can be trapped between two buildings. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 ≤ len(heights) ≤ 10^5 1 ≤ heights[i] ≤ 10^4","solution":"def maxWaterArea(heights): Finds the maximum area of water that can be trapped between two buildings. Args: heights (list): A list of positive integers representing the heights of buildings. Returns: int: The maximum area of water that can be trapped between two buildings. left = 0 right = len(heights) - 1 max_area = 0 while left < right: width = right - left height = min(heights[left], heights[right]) max_area = max(max_area, width * height) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Alex is fond of coding and loves playing with Fibonacci numbers. One day, he encountered an interesting problem involving the Fibonacci sequence and binary strings. A binary string is a string that consists only of characters \'0\' and \'1\'. A Fibonacci string of order n is defined as follows: - F_1 = \\"0\\" - F_2 = \\"1\\" - F_n = F_{n-1} + F_{n-2} for n > 2 The \\"+\\" symbol denotes the concatenation of two strings. For instance: - F_3 = F_2 + F_1 = \\"1\\" + \\"0\\" = \\"10\\" - F_4 = F_3 + F_2 = \\"10\\" + \\"1\\" = \\"101\\" - F_5 = F_4 + F_3 = \\"101\\" + \\"10\\" = \\"10110\\" Given an integer n (1 ≤ n ≤ 20), Alex wants to know the length of the Fibonacci string F_n. ----Input----- The input contains a single integer n (1 ≤ n ≤ 20) — the order of the Fibonacci string. ----Output----- Output a single integer — the length of the Fibonacci string F_n. ----Examples----- Input 3 Output 2 Input 5 Output 5 Input 1 Output 1","solution":"def fibonacci_string_length(n): Returns the length of the Fibonacci string of order n. if n == 1: return 1 elif n == 2: return 1 # Using the properties of the Fibonacci sequence to determine length prev2 = 1 prev1 = 1 for i in range(3, n + 1): current_length = prev1 + prev2 prev2 = prev1 prev1 = current_length return current_length"},{"question":"Given an integer array `arr` and an integer `k`, you need to create a function that determines whether there are two distinct indices `i` and `j` in the array such that `arr[i] == arr[j]` and the absolute difference between `i` and `j` is at most `k`. In other words, you need to check if any value appears at least twice in the array, and the indices of these duplicate values must be within a distance `k` of each other. Function Description Complete the `containsNearbyDuplicate` function in the editor below. `containsNearbyDuplicate` has the following parameter(s): - `int[] arr`: the array of integers - `int k`: the maximum allowed index difference Returns: - `boolean`: `true` if such elements exist, `false` otherwise Input Format The first line contains an integer `n`, the number of elements in the array. The second line contains `n` space-separated integers representing the elements of the array `arr`. The third line contains an integer `k`. Constraints: - 1 leq n leq 10^5 - -10^9 leq arr[i] leq 10^9 - 0 leq k leq 10^5 Sample Input 0 5 1 2 3 1 2 3 2 Sample Output 0 false Explanation 0 Although there are duplicate `1`s and `2`s in the array, the differences between the indices of the duplicate `1`s (3 and 0) and the duplicate `2`s (4 and 1) are greater than `k=2`. Sample Input 1 5 1 0 1 1 1 Sample Output 1 true Explanation 1 There are duplicate `1`s in the array, and their indices `2` and `3` have an absolute difference of `1`, which is less than or equal to `k=1`. Complete the function below: ```python def containsNearbyDuplicate(arr, k): index_map = {} for i, val in enumerate(arr): if val in index_map and i - index_map[val] <= k: return True index_map[val] = i return False ```","solution":"def containsNearbyDuplicate(arr, k): Determines if there exist two distinct indices i and j in the array such that arr[i] == arr[j] and the absolute difference between i and j is at most k. Parameters: arr (list of int): The array of integers. k (int): The maximum allowed index difference. Returns: bool: True if such elements exist, False otherwise. index_map = {} for i, val in enumerate(arr): if val in index_map and i - index_map[val] <= k: return True index_map[val] = i return False"},{"question":"You are given a list of integers representing scores of participants in a contest. Your task is to determine the maximum difference between the score of any two participants such that the higher score is the score of a participant who appeared after the participant with the lower score, i.e., you need to find max(scores[j] - scores[i]) for all j > i. If no such pair exists that satisfies this condition, return -1. Example 1: Input: n = 6 scores = [1, 2, 90, 10, 110, 80] Output: 109 Explanation: The maximum difference is obtained by the pair (1, 110). Example 2: Input: n = 4 scores = [7, 9, 5, 6] Output: 2 Explanation: The maximum difference is obtained by the pair (7, 9). Your Task: You don\'t need to read input or print anything. Complete the function `maxDifference()` which takes an integer n (the number of participants) and a list of integers scores (the scores of the participants) as input parameters and returns an integer representing the maximum difference, or -1 if no such pair exists. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 1 ≤ scores[i] ≤ 10^9","solution":"def maxDifference(n, scores): Determines the maximum difference between the score of any two participants such that the higher score is the score of a participant who appeared after the participant with the lower score. if n < 2: return -1 min_score = scores[0] max_diff = -1 for i in range(1, n): if scores[i] > min_score: max_diff = max(max_diff, scores[i] - min_score) min_score = min(min_score, scores[i]) return max_diff"},{"question":"You are given an integer array `arr` and an integer `k`. A \\"beautiful\\" array is an array arranged such that for any `i < j`, the `i-th` element is less than or equal to `j-th` element plus `k`. Your task is to determine if it\'s possible to rearrange the given array into a \\"beautiful\\" array. If possible, return \\"YES\\", otherwise return \\"NO\\". Example 1: Input: arr = [1, 3, 2, 4] k = 1 Output: YES Explanation: One possible arrangement is [1, 2, 3, 4] where for any i < j, arr[i] ≤ arr[j] + k. Example 2: Input: arr = [10, 5, 7, 3] k = 2 Output: NO Explanation: It\'s not possible to arrange the array in a way that satisfies the condition. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isBeautifulArray()` which takes an integer array `arr` and an integer `k` and returns the answer as a string \\"YES\\" or \\"NO\\". Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 10^5 1 <= arr[i] <= 10^9 0 <= k <= 10^9","solution":"def isBeautifulArray(arr, k): Determines if it is possible to rearrange the given array into a \\"beautiful\\" array. Parameters: arr (list of int): The input array of integers. k (int): The maximum allowed difference. Returns: str: \\"YES\\" if it is possible, otherwise \\"NO\\". arr.sort() for i in range(1, len(arr)): if arr[i] > arr[i-1] + k: return \\"NO\\" return \\"YES\\""},{"question":"You are given a collection of strings and a list of queries. Each query asks how many times a specific substring appears across all strings in the collection. Your task is to write a function that answers each query accurately. ------ Input ------ The input consists of several test cases. Each test case is constructed as follows: - The first line contains an integer N (1 ≤ N ≤ 500) indicating the number of strings. - The next N lines each contain one string, where each string contains only lowercase English letters and is non-empty with a maximum length of 200 characters. - The next line contains an integer Q (1 ≤ Q ≤ 1000) representing the number of queries. - The following Q lines each contain a single query string which consists of lowercase English letters and has a maximum length of 200 characters. The input is terminated by the value N = 0. ------ Output ------ For each test case, output Q lines, each containing the result of the corresponding query which is the number of times the query string appears as a substring in the collection of N strings. ------ Sample Input 1 ------ 2 hello world 3 lo or he 0 ------ Sample Output 1 ------ 1 1 1","solution":"def count_substring_occurrences(strings, queries): Counts how many times each query string appears as a substring in the collection of strings. :param strings: List of strings in which to search for substrings :param queries: List of query strings whose occurrences need to be counted :return: List of integers representing the count of each query substring in the collection of strings counts = [] for query in queries: count = sum(s.count(query) for s in strings) counts.append(count) return counts def process_test_cases(test_cases): results = [] for strings, queries in test_cases: result = count_substring_occurrences(strings, queries) results.append(result) return results"},{"question":"Mike loves numbers and hates even numbers. To show his hate, he wants a program that takes an array of integers and zeroes out all the even numbers, leaving the odd numbers unchanged. Your task is to help Mike by writing a function that does this. Constraints: * The array can have a maximum size of 10^6. * Each element of the array `arr[i]` is an integer where `-10^9 ≤ arr[i] ≤ 10^9`. Input * The first line contains an integer `n` (1 ≤ n ≤ 10^6), the size of the array. * The second line contains `n` space-separated integers representing the elements of the array. Output * Print the modified array with all even numbers replaced by zero. Examples Input 5 1 2 3 4 5 Output 1 0 3 0 5 Input 4 10 15 20 25 Output 0 15 0 25","solution":"def zero_even_numbers(arr): Replaces all even numbers in the array with zeroes. Parameters: arr (list): A list of integers. Returns: list: A list with all even numbers replaced by zeroes. return [0 if x % 2 == 0 else x for x in arr]"},{"question":"A delivery robot needs to traverse a city grid to deliver a package. The grid is represented as an `m x n` matrix. The robot starts at the top-left corner of the grid (at position `(0, 0)`) and its goal is to reach the bottom-right corner of the grid (at position `(m-1, n-1)`). The robot can only move right or down. Each cell in the matrix contains either a \'0\' or \'1\': - \'0\' represents an obstacle that the robot cannot traverse. - \'1\' represents an open space that the robot can move through. The robot must avoid obstacles and find a path to the goal. Determine the length of the shortest path that the robot can take to reach the bottom-right corner. If there is no possible path, print `-1`. Note: The length of the path is defined as the number of cells the robot travels, including the starting and ending cells. -----Input----- The first line contains two integers `m` and `n` (2 ≤ m, n ≤ 100) — the number of rows and columns in the grid. The next `m` lines each contain a string of length `n` consisting of zeroes and ones, representing the grid. It is guaranteed that the top-left and bottom-right corners of the grid contain a \'1\'. -----Output----- Print the length of the shortest path from the top-left to the bottom-right corner of the grid. If no path exists, print `-1`. -----Examples----- Input 3 3 111 010 111 Output 5 Input 3 3 111 000 111 Output -1 Input 5 5 11111 01010 11111 01010 11111 Output 9 Input 2 2 11 11 Output 3 -----Note----- In the first example, the robot can take the path (0,0) → (0,1) → (0,2) → (1,2) → (2,2) with a length of 5. In the second example, the robot has no possible path due to obstacles blocking the way. In the third example, the robot can take the path (0,0) → (0,1) → (0,2) → (0,3) → (0,4) → (1,4) → (2,4) → (3,4) → (4,4) with a length of 9.","solution":"from collections import deque def shortest_path(grid): def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == \'1\' m = len(grid) n = len(grid[0]) directions = [(0, 1), (1, 0)] visited = [[False] * n for _ in range(m)] queue = deque([(0, 0, 1)]) # (x, y, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == m - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given a string of words separated by whitespace, implement a function to return the longest word in the string. If there are multiple words of the same maximum length, return the one that appears first. Ignore punctuation and other non-alphabetic characters in the string. Consider for example: ``` Input: \\"The quick brown fox jumped over the lazy dog.\\" Output: \\"jumped\\" ```","solution":"import re def longest_word(sentence): Returns the longest word in the given sentence. If multiple words have the same length, returns the first one that appears. Ignores punctuation and non-alphabetic characters. # Remove any characters that are not letters or whitespace sanitized_sentence = re.sub(\'[^a-zA-Z ]+\', \'\', sentence) # Split the sentence into words words = sanitized_sentence.split() # Initialize variables to hold the longest word and its length longest = \\"\\" max_length = 0 # Iterate over the words to find the longest one for word in words: if len(word) > max_length: longest = word max_length = len(word) return longest"},{"question":"Let’s imagine you\'re developing a simple shopping cart system for an online store. An important feature is calculating the total cost of the items in the cart after applying discounts. The store offers a straightforward discount policy: if the total cost exceeds 100, a discount is applied to the total amount based on the following rules: - A 10% discount for totals between 100 and 200 inclusive. - A 20% discount for totals above 200. Write a program that reads a list of item prices, computes the total cost, applies the appropriate discount, and outputs the final amount. -----Input----- Input begins with an integer N (1 le N le 50) representing the number of items in the cart. The next line contains N positive integers representing the prices of the items in dollars. Each price is between 1 and 500. -----Output----- Output the final amount in dollars after applying any applicable discount. Output must be a floating number with two decimal places. -----Examples----- Sample Input: 5 30 20 50 40 10 Sample Output: 135.00 Sample Input: 3 60 80 100 Sample Output: 192.00","solution":"def calculate_final_amount(item_prices): Returns the total cost of items after applying the discount based on given rules. :param item_prices: List[int] representing the prices of the items :return: float representing the final amount in dollars after discounts total_cost = sum(item_prices) if total_cost > 200: discount = 0.20 elif total_cost >= 100: discount = 0.10 else: discount = 0.00 final_amount = total_cost - (total_cost * discount) return round(final_amount, 2)"},{"question":"Given a list of n integers, find out the number of distinct pairs (i, j) such that i < j and the sum of the elements at these indices is an even number. # Input The first line contains an integer n (1 ≤ n ≤ 100,000) - the number of elements in the list. The second line contains n integers, representing the elements of the list. # Output Output a single integer - the number of distinct pairs (i, j) with the given property. # Example 1 Input: 5 1 2 3 4 5 Output: 4 # Example 2 Input: 4 2 4 6 8 Output: 6","solution":"def count_even_sum_pairs(n, elements): Returns the number of distinct pairs (i, j) such that i < j and the sum of the elements at these indices is an even number. :param n: int - The number of elements in the list. :param elements: list of int - The elements of the list. :return: int - The number of distinct pairs with even sums. even_count = sum(1 for x in elements if x % 2 == 0) odd_count = n - even_count # Number of ways to pick 2 even numbers from even_count (even * (even - 1) / 2) even_pairs = even_count * (even_count - 1) // 2 # Number of ways to pick 2 odd numbers from odd_count (odd * (odd - 1) / 2) odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs"},{"question":"You are given a weighted graph consisting of n vertices and m edges. Your task is to determine if it is possible to select a subset of the edges such that the sum of the weights of the selected edges is exactly equal to a given value W and these selected edges form a connected subgraph. Input: The first line contains three integers n, m, and W (1 ≤ n ≤ 100, 0 ≤ m ≤ 1,000, 1 ≤ W ≤ 10,000), where n is the number of vertices, m is the number of edges, and W is the required sum of weights. The next m lines each contain three integers u_i, v_i, and w_i (1 ≤ u_i, v_i ≤ n, 1 ≤ w_i ≤ 100), representing an edge between vertices u_i and v_i with weight w_i. Output: Print \\"Yes\\" if it is possible to select the edges such that the sum of their weights equals W and forms a connected subgraph. Otherwise, print \\"No\\". Example: Input: 5 6 10 1 2 3 1 3 2 2 4 4 3 4 1 4 5 2 3 5 1 Output: Yes Input: 4 4 5 1 2 2 1 3 3 2 4 4 3 4 1 Output: No","solution":"def is_possible_to_form_connected_graph_with_weight(n, m, W, edges): from itertools import combinations # Helper function to check if the selected edges form a connected graph. def is_connected(selected_edges, n): from collections import defaultdict, deque if not selected_edges: return False graph = defaultdict(list) for u, v, w in selected_edges: graph[u].append(v) graph[v].append(u) visited = set() queue = deque([selected_edges[0][0]]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return len(visited) == n # Iterate through all possible subsets of edges and check the conditions for r in range(1, m + 1): for subset in combinations(edges, r): weight_sum = sum(w for u, v, w in subset) if weight_sum == W and is_connected(subset, n): return \\"Yes\\" return \\"No\\" # Example call # n, m, W = 5, 6, 10 # edges = [(1, 2, 3), (1, 3, 2), (2, 4, 4), (3, 4, 1), (4, 5, 2), (3, 5, 1)] # print(is_possible_to_form_connected_graph_with_weight(n, m, W, edges)) # Output: Yes"},{"question":"You are given a list of integers. Write a function to separate the integers into two lists, one containing even numbers and the other containing odd numbers. Return a dictionary with two keys, `\\"evens\\"` and `\\"odds\\"`, where the corresponding values are the lists of even and odd numbers, respectively. ```python def separate_even_odd(numbers): # Your code here # Examples: separate_even_odd([1, 2, 3, 4, 5, 6]) # Output: {\'evens\': [2, 4, 6], \'odds\': [1, 3, 5]} separate_even_odd([12, 17, 19, 22, 24, 29]) # Output: {\'evens\': [12, 22, 24], \'odds\': [17, 19, 29]} ```","solution":"def separate_even_odd(numbers): Separates a list of integers into two lists, one containing even numbers and the other containing odd numbers. Args: numbers (list of int): The list of integers to separate. Returns: dict: A dictionary with keys \'evens\' and \'odds\' containing the lists of even and odd numbers, respectively. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return {\'evens\': evens, \'odds\': odds}"},{"question":"Write a function to reverse the words in a given sentence while keeping the words in their original positions. For example: ``` \\"Hello from the other side\\" --> \\"olleH morf eht rehto edis\\" \\"Test case for reverse\\" --> \\"tseT esac rof esrever\\" ```","solution":"def reverse_words_in_sentence(sentence): Reverses each word in the given sentence while keeping the words in their original positions. Parameters: sentence (str): The input sentence to reverse words from. Returns: str: The sentence with each word reversed but in original order. return \' \'.join(word[::-1] for word in sentence.split())"},{"question":"Felicia is organizing a treasure hunt event in her big mansion. The mansion is a large grid with n rows and m columns. Each cell in the grid either contains a treasure, an obstacle, or is empty. The participants start at the top-left cell of the grid (cell (1, 1)) and must find their way to the bottom-right cell of the grid (cell (n, m)). They can move to the left, right, up or down, but they cannot move diagonally, and they cannot pass through any obstacles. The treasure value in a cell represents the number of treasures collected if the cell is visited. Once collected, the same treasure cannot be collected again. Participants want to maximize the total number of treasures collected by the time they reach the bottom-right cell. Felicia would like to know the maximum number of treasures a participant can collect if they follow an optimal path from the top-left cell to the bottom-right cell. -----Input----- The first line of the input contains two integers n and m (1 le n, m le 1000) – the number of rows and columns of the grid respectively. The next n lines each contain m integers representing the grid cells. Each integer is either: - -1 indicating an obstacle, - 0 indicating an empty cell, - or a positive integer (1 le text{value} le 100) indicating the number of treasures in that cell. It is guaranteed that the cells (1, 1) and (n, m) do not contain obstacles. -----Output----- Print one integer – the maximum number of treasures that can be collected from the top-left cell to the bottom-right cell. -----Examples----- Sample Input 1: 3 3 1 2 -1 1 -1 3 4 2 1 Sample Output 1: 9 Sample Input 2: 4 4 1 0 0 0 0 -1 2 0 3 -1 4 5 6 -1 0 7 Sample Output 2: 19 Sample Input 3: 2 2 1 -1 -1 2 Sample Output 3: 0","solution":"def max_treasures(n, m, grid): # Initialize DP table dp = [[-float(\'inf\')] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill DP table for i in range(n): for j in range(m): if grid[i][j] == -1: dp[i][j] = -float(\'inf\') else: if i > 0 and grid[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0 and grid[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) # Check the value at bottom-right cell if dp[n-1][m-1] == -float(\'inf\'): return 0 return dp[n-1][m-1] # Example case if __name__ == \\"__main__\\": n, m = 3, 3 grid = [ [1, 2, -1], [1, -1, 3], [4, 2, 1] ] print(max_treasures(n, m, grid)) # Output: 9"},{"question":"You are given an \'n x n\' grid where each cell is either land (\'L\') or water (\'W\'). Your task is to calculate the number of islands in the grid. An island is made up of adjacent lands (cells marked \'L\') connected vertically or horizontally. You may assume that all four edges of the grid are surrounded by water. Input: First line contains the number of test cases. For each test case, the first line contains the integer \'n\', denoting the size of the grid, followed by \'n\' lines of \'n\' characters each (\'L\' or \'W\') representing the grid. Output: For each test case, print the number of islands in the grid. SAMPLE INPUT 2 4 LWWL LLWL WWL LWLW 3 LLL LLW LWW SAMPLE OUTPUT 4 1 Explanation Testcase 1: The 4x4 grid looks like this: LWWL LLWL WWL LWLW There are 4 islands in the grid: 1. The land at (0,0). 2. The connected lands at (1,0), (1,1), and (0,1). 3. The connected land at (0,3). 4. The connected lands at (3,0) and (3,1). Testcase 2: The 3x3 grid looks like this: LLL LLW LWW There is 1 island in the grid: The connected lands at (0,0), (0,1), (0,2), (1,0), (1,1), and (2,0).","solution":"def count_islands(n, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] == \'W\': return grid[x][y] = \'W\' # Mark as visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) island_count = 0 for i in range(n): for j in range(n): if grid[i][j] == \'L\': island_count += 1 dfs(i, j) return island_count def process_test_cases(test_cases): results = [] for test_case in test_cases: n = test_case[0] grid = test_case[1] results.append(count_islands(n, grid)) return results"},{"question":"Given an array of integers and a target value, write a function that finds all unique pairs of numbers in the array that sum up to the target value. Each pair should be returned as an array of two elements, with the smaller number first and the larger number second. The function should return an array of all such pairs, with the pairs sorted in ascending order based on their first elements. Example: ``` Input: array = [2, 4, 3, 5, 7, 8, 1, 6], target = 9 Output: [[1, 8], [2, 7], [3, 6], [4, 5]] ``` In this example, pairs (1,8), (2,7), (3,6), and (4,5) all sum up to 9. The pairs are sorted by their first elements in ascending order. Notes: - Input array can have duplicate elements, but each pair should be unique. - Each pair should be returned as an array of exactly two elements. - The order of pairs in the output array should follow the order of their first elements. - If no valid pairs are found, return an empty array.","solution":"def find_pairs_with_sum(array, target): Returns all unique pairs of numbers in the array that sum up to the target value. Each pair is represented as an array of two elements, sorted in ascending order based on their first element. pairs = [] seen = set() used = set() for num in array: complement = target - num if complement in seen and (complement, num) not in used and (num, complement) not in used: pairs.append([min(num, complement), max(num, complement)]) used.add((num, complement)) used.add((complement, num)) seen.add(num) return sorted(pairs, key=lambda x: x[0])"},{"question":"Binary Tree Height and Balance Check You are given the root node of a binary tree. Your task is to write a function to determine the height of the tree and whether the tree is balanced or not. In a balanced binary tree, the difference in the height of the left and right subtrees of every node is not more than 1. Input - The first line contains an integer T, the number of test cases. - For each test case, the input consists of the binary tree represented in level-order traversal with \'null\' indicating the absence of nodes at that position. Output For each test case, output two integers separated by a space: the height of the binary tree and 1 if the tree is balanced, otherwise 0. Constraints 1 ≤ T ≤ 1000 Each level-order traversal will have at most 1000 elements, with values ranging from -1000 to 1000 or \'null’. SAMPLE INPUT 2 3 9 20 null null 15 7 1 2 2 3 3 null null 4 4 SAMPLE OUTPUT 3 1 4 0 Explanation In the 1st test case, the binary tree has the height 3 and it is balanced, so the output is `3 1`. In the 2nd test case, the binary tree has the height 4 but it is not balanced, so the output is `4 0`. Your function should correctly parse the input list to build the binary tree, compute the height, and check for balance recursively.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(level_order): from collections import deque if not level_order or level_order[0] == \'null\': return None root = TreeNode(int(level_order[0])) queue = deque([root]) i = 1 while queue and i < len(level_order): node = queue.popleft() if level_order[i] != \'null\': node.left = TreeNode(int(level_order[i])) queue.append(node.left) i += 1 if i < len(level_order) and level_order[i] != \'null\': node.right = TreeNode(int(level_order[i])) queue.append(node.right) i += 1 return root def tree_height_and_balance(root): def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) height = max(left_height, right_height) + 1 balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return height, balanced height, balanced = check_balance(root) return height, 1 if balanced else 0 def process_test_cases(T, test_cases): results = [] for case in test_cases: level_order = case.split() root = build_tree(level_order) height, balanced = tree_height_and_balance(root) results.append(f\\"{height} {balanced}\\") return results"},{"question":"You are given an array of N integers representing video lengths on a streaming platform. Your task is to determine the minimum number of advertisements needed such that every video has at least one advertisement inserted uniformly within its length. Each advertisement runs for A seconds and can be inserted at a precise second within a video without overlapping the video content. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and A. The next line contains N space-separated integers L_1, L_2, ..., L_N representing the lengths of the videos in seconds. ------ Output ------ For each test case, print a single line containing one integer ― the minimum number of advertisements needed for that test case. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ A ≤ 10^9 1 ≤ L_i ≤ 10^9 for each valid i the sum of N over all test cases does not exceed 2 cdot 10^5 ------ Example Input ------ 3 3 10 20 30 40 2 5 8 12 1 7 25 ------ Example Output ------ 6 4 4 ------ Explanation ------ Example case 1: For each video, advertisements must be placed every 10 seconds. Video lengths 20, 30, and 40 would each require 2, 3, and 4 advertisements respectively, summing to 2+3+4=9. Example case 2: For videos of lengths 8 and 12, you need 2 and 3 advertisements respectively, summing to 2+3=5. Example case 3: With a single video of length 25 and advertisements every 7 seconds, you would need 4 advertisements (at 7, 14, 21, and 28 seconds), summing to 4.","solution":"def min_number_of_ads(T, test_cases): results = [] for test_case in test_cases: N, A, video_lengths = test_case num_ads = sum((length + A - 1) // A for length in video_lengths) results.append(num_ads) return results"},{"question":"A company is evaluating its employees based on their project performance. Each project is represented by a pair of integers, where the first integer is the project\'s starting time and the second integer is the project\'s ending time. Some projects may overlap, and the company wants to reward employees who work on maximum non-overlapping projects. You are given a list of projects with their starting and ending times. Your task is to find the maximum number of non-overlapping projects an employee can work on. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of projects. The next n lines contain two integers each, Si and Ei (1 ≤ Si < Ei ≤ 10^9) — the starting and ending times of the ith project. -----Output----- Output a single integer — the maximum number of non-overlapping projects an employee can work on. -----Examples----- Input 3 1 3 2 4 3 5 Output 2 Input 4 1 2 2 3 3 4 1 3 Output 3 -----Note----- In the first test case, the employee can work on at most 2 non-overlapping projects. For example, they can choose the projects (1, 3) and (3, 5). In the second test case, the employee can work on at most 3 non-overlapping projects. They can choose the projects (1, 2), (2, 3), and (3, 4).","solution":"def max_non_overlapping_projects(projects): Function to find the maximum number of non-overlapping projects. Parameters: projects (list of tuples): A list where each tuple consists of start and end times of projects. Returns: int: Maximum number of non-overlapping projects. # Sort the projects based on their end times projects.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in projects: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Alice is participating in a coding contest where she needs to solve a problem under specific constraints. She is given an array of integers where each integer represents the number of seconds it takes to solve a corresponding problem. Alice is allowed to skip exactly one problem, and she must solve the rest in sequence. However, the skipped problem should maximize the number of problems she can solve within a given time limit. Help Alice determine the maximum number of problems she can solve. INPUT The first line of input contains an integer T, the number of test cases. 1 ≤ T ≤ 10 Each test case starts with two integers N and M. 0 ≤ N ≤ 10^4, (N is the number of problems) 0 ≤ M ≤ 10^9, (M is the time limit in seconds) The next line will have N numbers, each representing the time Ti it takes to solve problem i. 0 ≤ Ti ≤ 10^9 OUTPUT For each test case, print “Case T: P” without quotes in a single line. T is the case number, starting with 1. P is the maximum number of problems Alice can solve. SAMPLE INPUT 2 5 10 1 2 3 4 5 4 7 4 2 1 3 SAMPLE OUTPUT Case 1: 4 Case 2: 3 Explanation Case 1: If Alice skips the 5th problem, she can solve the problems in 1 + 2 + 3 + 4 = 10 seconds in total. Case 2: If Alice skips the 1st problem, she can solve the problems in 2 + 1 + 3 = 6 seconds in total.","solution":"def max_problems_solved(T, test_cases): results = [] for t in range(T): N, M, times = test_cases[t] times.sort() total_time = sum(times) if N == 0: results.append(f\\"Case {t+1}: 0\\") continue if total_time - max(times) <= M: results.append(f\\"Case {t+1}: {N-1}\\") else: time_spent = 0 problems_solved = 0 for time in times: if time_spent + time > M: break time_spent += time problems_solved += 1 results.append(f\\"Case {t+1}: {problems_solved}\\") return results"},{"question":"You are designing an online shopping platform and need to implement a recommendation system. The platform has N items, each with a unique ID and a rating given by customers in the form of integers. The customers often query for the highest-rated items from a subset of the store’s inventory. Given several such queries, you need to return the highest-rated item for each query. If there are ties (multiple items with the same highest rating), return the one with the smallest unique ID. -----Input----- - The first line of the input contains two space-separated integers N and Q, representing the number of items and the number of queries, respectively. - The second line contains N space-separated integers representing the ratings of the items, where the i-th integer is the rating of the item with unique ID i+1. - Each of the next Q lines contains two space-separated integers L and R representing a query, where L and R define the inclusive range of item IDs to consider. -----Output----- For each query, print a single integer representing the ID of the highest-rated item within the given range. If there are ties, print the smallest ID among them. -----Constraints----- - 1 le N le 10^5 - 1 le Q le 10^4 - 1 le text{Rating of each item} le 10^9 - 1 le L le R le N -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 5 3 4 2 5 3 5 1 3 2 4 1 5 -----Example Output----- 3 4 3 -----Explanation----- Example case 1: Query (1, 3) includes items with IDs 1, 2, 3. The highest rating is 5 which corresponds to item ID 3. Example case 2: Query (2, 4) includes items with IDs 2, 3, 4. The highest rating is 5 which corresponds to item ID 3. Example case 3: Query (1, 5) includes all items. The highest ratings are 5 which correspond to item IDs 3 and 5. The smallest ID is 3.","solution":"def highest_rated_item(N, Q, ratings, queries): Returns a list of item IDs with the highest rating for each query. If there are ties, the smallest ID among them is returned. :param N: int - number of items :param Q: int - number of queries :param ratings: list - ratings of the items :param queries: list - queries defined by ranges :return: list - IDs of the highest-rated items for each query results = [] for (L, R) in queries: # Extract the sublist of ratings within the range L to R (inclusive) # Adjust indices as item IDs are 1-indexed sublist = ratings[L-1:R] # Find the maximum rating in the sublist max_rating = max(sublist) # Find the item ID with the maximum rating and the smallest ID min_id = L + sublist.index(max_rating) results.append(min_id) return results # Example usage: # N = 5 # Q = 3 # ratings = [4, 2, 5, 3, 5] # queries = [(1, 3), (2, 4), (1, 5)] # print(highest_rated_item(N, Q, ratings, queries)) # Output: [3, 3, 3]"},{"question":"In this problem, you have to help Alice balance her bookshelves. Alice has n books, and each book i has a thickness t_i and a height h_i. Alice has a set bookshelf height limit, H, which all books placed on the same shelf must not exceed. Alice can place any book on any shelf as long as the total height of books on that shelf does not exceed H. Alice also wants to minimize the number of shelves used. Can you help Alice organize her books to use the minimum number of shelves? -----Input----- The first line of the input contains two integers n and H (1 ≤ n ≤ 1000, 1 ≤ H ≤ 10^6) — the number of books and the maximum possible height of each bookshelf. Then, follow n lines with book descriptions. Each description consists of two integers t_i and h_i (1 ≤ t_i, h_i ≤ 10^6), where t_i is the thickness and h_i is the height of the i-th book. -----Output----- Print a single integer — the minimum number of shelves required to place all the books according to the given constraints. -----Examples----- Input 4 10 5 3 2 5 3 6 1 4 Output 3 Input 3 8 4 3 1 4 2 5 Output 2 -----Note----- Consider the first sample. The first book has height 3, the second book has height 5, the third book has height 6, and the fourth book has height 4. One possible way to arrange the books is: - Place the first and fourth books on the first shelf (height 3 + 4 = 7 ≤ 10). - Place the second book on the second shelf (height 5 ≤ 10). - Place the third book on the third shelf (height 6 ≤ 10). So, the minimum number of shelves required is 3.","solution":"def min_shelves(n, H, books): Function to find the minimum number of shelves required to accommodate all books where each shelf has a height limit H. :param n: Number of books (int) :param H: Height limit of each shelf (int) :param books: List of tuples where each tuple contains (thickness, height) of books (list of tuples) :return: Minimum number of shelves required (int) books.sort(key=lambda x: x[1], reverse=True) # Sort books by height in descending order current_shelf_height = 0 shelf_count = 1 # Start with one shelf for _, height in books: if current_shelf_height + height > H: shelf_count += 1 current_shelf_height = height else: current_shelf_height += height return shelf_count"},{"question":"You have a grid of size n times m filled with zeros initially. There are exactly k operations you can perform on this grid. An operation consists of selecting any interior cell (i.e., not on the margin of the grid) and incrementing it by 1 (i.e., adding 1 to its value). Formally, let (i, j) be the i-th row and j-th column of the grid with 2 leq i leq n-1 and 2 leq j leq m-1. You need to perform exactly k such operations. Your task is to determine the maximum possible value present in any cell in the grid after performing exactly k operations. -----Input----- The input consists of several test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains three integers n, m, and k (3 le n, m le 50, 0 le k le (n-2)(m-2)). -----Output----- For each test case, print a single integer — the maximum possible value present in any cell after exactly k operations. -----Examples----- Input 3 3 3 1 4 4 4 5 5 10 Output 1 1 2 -----Note----- In the first test case, the grid has only one interior cell. By performing exactly one operation, its value becomes 1. The second test case grid has four interior cells. By performing the four operations one by one on any one of the interior cells, its value becomes 4. In the third test case grid has 9 interior cells. By performing the 10 operations, it is optimal to distribute them to maximize one cell\'s value. Thus, one interior cell will take 2 steps, resulting in a maximum value of 2.","solution":"import math def max_value_in_grid(n, m, k): Determines the maximum possible value present in any cell in the grid after k operations. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid k (int): the number of operations Returns: int: maximum possible value present in any cell in the grid # Total number of interior cells in the grid total_interior_cells = (n - 2) * (m - 2) # Maximum value in any cell after performing k operations return math.ceil(k / total_interior_cells)"},{"question":"You are working as an automobile engineer and tasked with creating an optimized maintenance schedule for a fleet of vehicles. Each vehicle has a Unique ID and a specific maintenance duration. The challenge is to determine the total time to complete all maintenance tasks one by one in the most efficient way considering the order constraints. Given two sequences: 1. The order in which vehicles arrive for maintenance. 2. The ideal order in which vehicles must be processed for maintenance based on priority. To handle this, consider the following example: Suppose there are 4 vehicles with arrival order: 4 - 1 - 2 - 3 and the ideal priority order is: 1 - 2 - 3 - 4. Iteration #1: The first vehicle in the arrival order (vehicle ID 4) does not match the ideal order (vehicle ID 1), so it needs to be sent to the end of the queue, taking 1 unit of time for the move. New arrival order: 1 - 2 - 3 - 4. Time taken so far: 1. Iteration #2: Now the first vehicle in the arrival order (vehicle ID 1) matches the ideal order (vehicle ID 1), so it is taken out for maintenance. This takes 1 unit of time. New arrival order: 2 - 3 - 4. Time taken so far: 2. Iteration #3: The first vehicle in the arrival order (vehicle ID 2) now matches the ideal order (vehicle ID 2), so it is taken out for maintenance. This takes 1 unit of time. New arrival order: 3 - 4. Time taken so far: 3. Iteration #4: The first vehicle in the arrival order (vehicle ID 3) now matches the ideal order (vehicle ID 3), so it is taken out for maintenance. This takes 1 unit of time. New arrival order: 4. Time taken so far: 4. Iteration #5: The first vehicle in the arrival order (vehicle ID 4) finally matches the ideal order (vehicle ID 4), so it is taken out for maintenance. This takes 1 unit of time. New arrival order: (empty). Time taken so far: 5. Total time taken: 5 units. Each move or maintenance action costs 1 unit of time. Input format: - The first line contains an integer N, the number of vehicles. - The second line contains the N space-separated integers representing the arrival order of vehicles. - The third line contains the N space-separated integers representing the ideal priority order of vehicles. Output format: - Print the total time taken to complete the maintenance of all vehicles in the ideal order. Constraints: 1 ≤ N ≤ 100 SAMPLE INPUT: 4 4 1 2 3 1 2 3 4 SAMPLE OUTPUT: 5","solution":"def calculate_maintenance_time(n, arrival_order, priority_order): time_taken = 0 while arrival_order: if arrival_order[0] == priority_order[0]: arrival_order.pop(0) priority_order.pop(0) else: arrival_order.append(arrival_order.pop(0)) time_taken += 1 return time_taken"},{"question":"During a hacking competition, teams are given access to a secure password-protected system. To crack the system, they must guess passwords that adhere to a specific pattern. Each password consists of exactly `n` characters, where some characters are predetermined and some are unknown and need to be guessed. Given the password template, where a `?` represents an unknown character that needs to be guessed, and a list of possible characters for each unknown position, find the total number of unique passwords that can be generated. -----Input----- The first line contains an integer `n` (1 leq n leq 30), the length of the password. The second line contains a string of length `n` representing the password template, where each character is either a lowercase English letter (a-z) or a `?`. Each of the next `n` lines contains a string consisting of lowercase English letters. The `i`-th line gives the possible characters for the `i`-th position in the password. If the template character at position `i` is not a `?`, the corresponding line will be empty. -----Output----- Print one integer – the total number of unique passwords that can be generated. -----Examples----- Input 3 a?c 3 bce Output 3 Input 4 a?d? 4 abc def xyz Output 9 -----Note----- In the first example, there is only one `?` at the second position, which can be any of the characters from the set `{b, c, e}`, thus yielding 3 distinct passwords. In the second example, there are two `?` positions (second and fourth), with possible characters `{a, b, c}` for the second and `{x, y, z}` for the fourth. The number of unique passwords is 3 * 3 = 9.","solution":"def total_unique_passwords(n, template, possible_chars): Calculate the total number of unique passwords that can be generated based on the given template and possible characters for unknown positions. Parameters: n (int): The length of the password. template (str): The password template. possible_chars (list of str): A list of possible characters for each position. Returns: int: Total number of unique passwords that can be generated. total_passwords = 1 for i in range(n): if template[i] == \'?\': total_passwords *= len(possible_chars[i]) return total_passwords"},{"question":"Write a function that takes an integer array and an integer k, and returns the k-th largest element in the array. For instance, given the array [3,2,1,5,6,4] and k = 2, the second largest element is 5. If k is greater than the length of the array, the function returns -1. Examples: ``` [3,2,1,5,6,4], k = 2 => 5 [3,2,3,1,2,4,5,5,6], k = 4 => 4 [1,2], k = 3 => -1 [1, 1, 1], k = 1 => 1 ``` For Python, you can assume the input array will have at least one element and all elements are integers.","solution":"def find_kth_largest(nums, k): Returns the k-th largest element in the array. If k is greater than the length of the array, returns -1. if k > len(nums): return -1 nums.sort(reverse=True) return nums[k-1]"},{"question":"Alice is designing a new text-based adventure game. In her game, each room contains a unique ID and a list of keys that can be found there. Each key has a unique ID as well. A key is required to enter certain rooms, and to make things interesting, some keys can open multiple rooms. The goal for the player is to start from a given room and use the keys to explore all the rooms in the game. Alice wants you to write a program to determine if it is possible to visit all the rooms starting from the initial room. Input The input consists of multiple datasets. Each dataset is provided in the following format: The first line contains an integer N (2 ≤ N ≤ 1000), the number of rooms. Each of the next N lines describes a room with two components: the room ID (1 ≤ room ID ≤ N) and a list of key IDs. Each key ID is an integer (1 ≤ key ID ≤ N). A room can only be entered if the player possesses the corresponding key ID. The player starts in room 1 and begins the game with the key to room 1. Output For each dataset, output \\"YES\\" if it is possible to visit all rooms starting from room 1, and \\"NO\\" otherwise. Input Example 2 1 2 2 4 1 2 3 2 3 4 4 Output Example YES YES Explanation: - In the first dataset, the player starts in room 1 and finds the key to room 2 there, allowing them to enter all rooms. - In the second dataset, from room 1, the player finds keys to rooms 2 and 3. Entering either rooms 2 or 3 provides the key to room 4, allowing the player to access all rooms.","solution":"def can_visit_all_rooms(num_rooms, room_keys): visited = set() keys = set() keys.add(1) # Start with the key to room 1 while keys: key = keys.pop() if key not in visited: visited.add(key) keys.update(room_keys[key - 1]) return len(visited) == num_rooms def process_input(data): datasets = data.strip().split(\'nn\') results = [] for dataset in datasets: lines = dataset.split(\'n\') num_rooms = int(lines[0]) room_keys = [] for line in lines[1:]: parts = list(map(int, line.split())) room_keys.append(parts[1:]) if can_visit_all_rooms(num_rooms, room_keys): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alex is working on sorting a number of documents in folders. Each folder can directly either contain documents or other folders, but not both. The hierarchical structure of the folders can be represented as a nested dictionary where keys are folder names, and values are either an integer representing the number of documents or a dictionary representing nested folders. To keep things organized, Alex wants to retrieve the full paths of all documents starting from the root folder. Write a function that takes a nested dictionary representing the folder structure and returns a list of strings where each string is a path to a document. -----Input----- A neste dictionary representing the folder structure. The folder names are strings, and documents counts are integers. -----Output----- A list of strings representing the full paths to all documents. -----Examples----- Input { \\"root\\": { \\"folder1\\": 2, \\"folder2\\": { \\"subfolder1\\": 3, \\"subfolder2\\": { \\"subsubfolder1\\": 1 } }, \\"folder3\\": 1 } } Output [ \\"root/folder1/document1\\", \\"root/folder1/document2\\", \\"root/folder2/subfolder1/document1\\", \\"root/folder2/subfolder1/document2\\", \\"root/folder2/subfolder1/document3\\", \\"root/folder2/subfolder2/subsubfolder1/document1\\", \\"root/folder3/document1\\" ] -----Note----- In the sample input, the root folder contains three main folders. `folder1` contains 2 documents, which should be listed as `root/folder1/document1` and `root/folder1/document2`. In the same manner, `folder2` contains two subfolders `subfolder1` and `subfolder2`, containing documents. These documents should be listed with full hierarchical paths. The output should be in lexicographical order of the document paths.","solution":"def get_document_paths(folder_structure): def helper(current_path, structure): paths = [] for key, value in structure.items(): if isinstance(value, int): # It\'s a document count for i in range(1, value + 1): paths.append(f\\"{current_path}/{key}/document{i}\\") else: # It\'s another folder paths.extend(helper(f\\"{current_path}/{key}\\", value)) return paths return sorted(helper(\'root\', folder_structure[\'root\'])) # Example usage: # folder_structure = { # \\"root\\": { # \\"folder1\\": 2, # \\"folder2\\": { # \\"subfolder1\\": 3, # \\"subfolder2\\": { # \\"subsubfolder1\\": 1 # } # }, # \\"folder3\\": 1 # } # } # print(get_document_paths(folder_structure))"},{"question":"You are given a grid of n times m filled with integers. Write a program to find the maximum sum of any sub-grid within the given grid. Constraints * 1 leq n, m leq 50 * -1000 leq Each element in the grid leq 1000 Input The first line consists of two integers n and m representing the number of rows and columns of the grid, respectively. The next n lines each contain m integers representing the elements of the grid. Output For each dataset, print the maximum sum of any sub-grid in a single line. Example Input: 3 3 1 2 -1 -3 4 5 2 -2 3 Output: 11","solution":"def max_sum_subgrid(grid): Returns the maximum sum of any sub-grid within the given grid. n = len(grid) m = len(grid[0]) if n > 0 else 0 max_sum = -float(\'inf\') # Calculate prefix sums for each row prefix_sum = [[0] * (m + 1) for _ in range(n)] for i in range(n): for j in range(1, m + 1): prefix_sum[i][j] = prefix_sum[i][j - 1] + grid[i][j - 1] # Iterate over all possible left and right column boundaries for left in range(m): for right in range(left, m): # Use Kadane\'s algorithm to find the max subarray sum for this column range kadane_sum = 0 kadane_max = -float(\'inf\') for row in range(n): row_sum = prefix_sum[row][right + 1] - prefix_sum[row][left] kadane_sum += row_sum if kadane_sum > kadane_max: kadane_max = kadane_sum if kadane_sum < 0: kadane_sum = 0 max_sum = max(max_sum, kadane_max) return max_sum"},{"question":"Given a matrix of size n x m, where each cell can either be 0 or 1. The task is to find the size of the largest square sub-matrix of 1s present in the given matrix. Example 1: Input: Matrix = 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 Output: 3 Explanation: The largest square sub-matrix of 1\'s has size 3, which can be visualized as: 1 1 1 1 1 1 1 1 1 Example 2: Input: Matrix = 1 0 1 1 1 1 1 1 0 Output: 2 Explanation: The largest square sub-matrix of 1\'s has size 2, which can be visualized as: 1 1 1 1 Your Task: The task is to complete the function `maxSquareSize()` which receives a 2D matrix as input and returns the size of the largest square sub-matrix of 1\'s. Expected Time Complexity : O(n*m) Expected Auxiliary Space : O(n*m) Constraints: 1 <= n, m <= 100 0 <= Matrix[i][j] <= 1","solution":"def maxSquareSize(matrix): Returns the size of the largest square sub-matrix of 1\'s. Args: matrix: List[List[int]] - 2D list representing the matrix. Returns: int - size of the largest square sub-matrix of 1\'s. if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) # Create a DP array and initialize it with 0\'s. dp = [[0] * m for _ in range(n)] max_size = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 # The edge cells copy the same value as matrix else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if dp[i][j] > max_size: max_size = dp[i][j] return max_size"},{"question":"A well-renowned pharmaceutical company operates several plants distributed across the country. At each plant, a process of synthesis is implemented in multiple stages, each of which can adjust the concentration of a certain chemical in a solution. Over time, the supervisors have noticed that this synthesis process invariably reaches a stable configuration where the concentration of the chemical no longer changes. They wish to study this phenomenon and determine how many stages of adjustment are needed until the process stabilizes. You are given n concentrations at various stages. During each adjustment stage, the concentration at each intermediate stage (from 2 to n-1) becomes equal to the median of its own concentration and the concentrations at its two neighboring stages. The concentration of the first and last stages remain unchanged throughout the process. Your task is to find out how many adjustment stages are required to achieve stability and also to determine the final stable concentrations. Input The first line contains a single integer n (1 ≤ n ≤ 500 000) — the number of stages. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9) — the initial concentrations at the respective stages. Output In the first line, print a single integer s — the number of adjustment stages required to achieve stability. In the second line, print n integers — the final stable concentrations at the respective stages. Examples Input 5 3 4 2 4 3 Output 2 3 3 3 3 3 Input 4 7 4 1 6 Output 1 7 4 4 6 Input 3 5 5 5 Output 0 5 5 5 Note In the first example, the concentration at index 1 and 5 remains unchanged. During the first adjustment, the concentrations become 3, 3, 4, 3, 3. Else, after the second adjustment, the concentrations become 3, 3, 3, 3, 3, achieving a stable state. In the third example, the concentrations are already stable, hence no adjustments are needed.","solution":"def stabilize_concentrations(n, concentrations): def median(a, b, c): return sorted([a, b, c])[1] steps = 0 prev_concentrations = concentrations[:] while True: changed = False new_concentrations = prev_concentrations[:] for i in range(1, n - 1): new_concentrations[i] = median(prev_concentrations[i-1], prev_concentrations[i], prev_concentrations[i+1]) if new_concentrations == prev_concentrations: break prev_concentrations = new_concentrations[:] steps += 1 return steps, prev_concentrations # Usage n = 5 concentrations = [3, 4, 2, 4, 3] print(stabilize_concentrations(n, concentrations))"},{"question":"Marauder’s Map is known for showing the real-time location of everyone within Hogwarts. You have been tasked with designing a spell that helps track people’s movement over time. Each movement is represented by a tuple containing a person\'s ID and their new location. Your goal is to determine the final location of each person after all the movements have been applied. Input::: The first line contains an integer N, denoting the number of movements. The next N lines each contain a tuple of two elements: an integer ID and a string LOCATION, representing a person’s ID and their new location. Output::: For each person ID, print their final location. The output should contain each ID and its corresponding final location on a new line, sorted in ascending order by ID. Constraints::: 1 ≤ N ≤ 10^5, 1 ≤ ID ≤ 10^6, 1 ≤ length of LOCATION ≤ 100. SAMPLE INPUT 5 1 Hogwarts 2 Hogsmeade 1 Forbidden Forest 3 Great Hall 2 Quidditch Pitch SAMPLE OUTPUT 1 Forbidden Forest 2 Quidditch Pitch 3 Great Hall","solution":"def final_locations(movements): Determines the final location of each person after all the movements have been applied. Arguments: movements -- list of tuples where each tuple contains: - an integer ID - a string LOCATION representing a person\'s ID and their new location Returns: A list of tuples containing each ID and its corresponding final location, sorted in ascending order by ID. location_dict = {} for ID, location in movements: location_dict[ID] = location result = sorted(location_dict.items()) return result"},{"question":"Tritan Gaming Platform has a set of microservices, each responsible for managing specific game components, such as user management, game sessions, leaderboards, and more. The system has to communicate between these microservices using a specified protocol. Messages are sent using a specific format involving commands and arguments. For this problem, you will develop a simplified version for Tritan\'s messaging protocol, known as SmallTritan. A message in SmallTritan is defined as a command followed by zero or more arguments. Each argument in the message is separated by a specific delimiter. The valid commands and their respective details are defined in the table below: SmallTritan Command Set: - `USR` `<username>` — Log in or register a user with the specified username. - `SES` `<session_id>` — Initialize or maintain an active game session with the provided session ID. - `SCB` `<score>` — Submit a score for the current session. The score is an integer. - `LBD` — Display the leaderboard for all current sessions, showing users and their highest scores in descending order. Messages will be received as a single string input with individual components separated by a pipe character `|`. -----Input----- - A string containing a single line of valid SmallTritan messages. Each message within the string is separated by a semicolon `;`. -----Output----- - The output should display the results of executing each message, line by line. For the `USR` command, display \\"User <username> logged in\\". For the `SES` command, display \\"Session <session_id> activated\\". For the `SCB` command, display \\"Score <score> submitted\\". The `LBD` command will output a multiline leaderboard, each line corresponding to a user and their highest score formatted as \\"<username>: <highest_score>\\". Example: ```input USR|john;SES|123;SCB|50;USR|jane;SCB|60;LBD ``` Example Output: ```output User john logged in Session 123 activated Score 50 submitted User jane logged in Score 60 submitted Leaderboard: jane: 60 john: 50 ``` For the purpose of this exercise, assume that all messages are valid and properly formatted. Handle the commands sequentially and update the session or scores as appropriate. Push the results of the `LBD` command to the output only when it appears in the input sequence.","solution":"def process_messages(input_str): # Storage for users and their scores users_scores = {} current_user = None current_session = None # Split the input string into individual messages messages = input_str.split(\';\') output = [] for message in messages: parts = message.split(\'|\') command = parts[0] if command == \\"USR\\": current_user = parts[1] if current_user not in users_scores: users_scores[current_user] = 0 output.append(f\\"User {current_user} logged in\\") elif command == \\"SES\\": current_session = parts[1] output.append(f\\"Session {current_session} activated\\") elif command == \\"SCB\\": score = int(parts[1]) if current_user: if users_scores[current_user] < score: users_scores[current_user] = score output.append(f\\"Score {score} submitted\\") elif command == \\"LBD\\": leaderboard = \\"Leaderboard:\\" sorted_users = sorted(users_scores.items(), key=lambda item: item[1], reverse=True) for user, score in sorted_users: leaderboard += f\\"n{user}: {score}\\" output.append(leaderboard) return \'n\'.join(output)"},{"question":"A popular online game is hosting a tournament in which multiple players compete over various rounds. The scoring system of the tournament is as follows: for each round, the player who wins earns a point. The player with the highest number of points at the end of all rounds wins the tournament. You are given the results of each round in the format \\"winner\\", where \\"winner\\" indicates the player who won that round. Write a program to determine the overall winner of the tournament. If there are multiple players with the highest number of points, return all of them in alphabetical order. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of rounds in the tournament. The next n lines each contain a single string \\"winner\\", the name of the player who won that round. Each player\'s name is a string consisting of lowercase English letters with length from 1 to 20 characters. -----Output----- In the first line, print the name(s) of the player(s) who won the tournament. If there is a tie, print multiple names separated by spaces, in alphabetical order. -----Examples----- Input 5 alice bob alice alice bob Output alice Input 3 charlie charlie bob Output charlie Input 4 mike mike zara zara Output mike zara","solution":"def find_tournament_winners(n, winners): Given the number of rounds n and a list of winners, determine the winner of the tournament. In case of a tie, return the winners in alphabetical order. from collections import Counter # Count the number of wins for each player win_counts = Counter(winners) # Find the maximum number of wins max_wins = max(win_counts.values()) # Collect all players who have the maximum number of wins overall_winners = [player for player, wins in win_counts.items() if wins == max_wins] # Return the winners in alphabetical order return sorted(overall_winners)"},{"question":"You are given two lists of integers, A and B, each containing N elements. You need to generate a new list C such that each element C[i] is the sum of the elements from lists A and B that come before and including index i. Specifically, C[i] should be equal to the sum of all elements from A[0] to A[i] and from B[0] to B[i]. Write a program to compute the list C. Constraints: * 1 ≤ N ≤ 10^5 * -10^9 ≤ A[i], B[i] ≤ 10^9 Input format: - The first line contains an integer N, the number of elements in the lists. - The second line contains N space-separated integers, the elements of list A. - The third line contains N space-separated integers, the elements of list B. Output format: - Print the list C as N space-separated integers. Example input: ``` 4 1 2 3 4 5 6 7 8 ``` Example output: ``` 6 14 24 36 ``` Explanation: - C[0] = A[0] + B[0] = 1 + 5 = 6 - C[1] = (A[0] + A[1]) + (B[0] + B[1]) = (1 + 2) + (5 + 6) = 14 - C[2] = (A[0] + A[1] + A[2]) + (B[0] + B[1] + B[2]) = (1 + 2 + 3) + (5 + 6 + 7) = 24 - C[3] = (A[0] + A[1] + A[2] + A[3]) + (B[0] + B[1] + B[2] + B[3]) = (1 + 2 + 3 + 4) + (5 + 6 + 7 + 8) = 36","solution":"def compute_C(N, A, B): Returns the list C where each element C[i] is the sum of the elements from lists A and B that come before and including index i. C = [] sumA = 0 sumB = 0 for i in range(N): sumA += A[i] sumB += B[i] C.append(sumA + sumB) return C"},{"question":"A factory produces a variety of widgets, each of which can be classified by a type identified by an integer. The factory keeps a log of produced widgets where each entry specifies the type of a widget. The quality control department wants to identify the most frequently produced widget type from the log. However, in case of a tie (i.e., multiple widget types are produced with the same highest frequency), the smallest type identifier (integer) should be reported. Your task is to write a program that reads the log entries and determines the most frequently produced widget type or the smallest type identifier in case of a tie. Input The first input line contains an integer n (1 ≤ n ≤ 1000) that represents the total number of widget type entries in the log. The second line contains n space-separated integers, each representing the type of a produced widget. Each integer is between 0 and 1000 inclusive. Output Print the type identifier of the most frequently produced widget. If there is a tie for the most frequent type, print the smallest identifier among the tied types. Examples Input 10 1 2 2 3 3 3 4 4 4 4 Output 4 Input 7 5 1 2 2 3 3 5 Output 2 Input 5 6 6 6 7 7 Output 6","solution":"def most_frequent_widget_type(n, log_entries): from collections import Counter count = Counter(log_entries) most_frequent = count.most_common() max_frequency = most_frequent[0][1] candidates = [type_id for type_id, freq in most_frequent if freq == max_frequency] return min(candidates)"},{"question":"A farmer has a rectangular field and wants to plant trees in such a way that they form a grid of squares. Each square in the grid must be the same size, and the whole field must be covered without any trees extending beyond the field boundaries. Given the dimensions of the field (length and width), determine the side length of the largest possible square that fits perfectly within the field’s dimensions. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains two integers L and W, the length and width of the field. Output: For each test case, print the side length of the largest possible square that fits perfectly within the field’s dimensions. Constraints: 1 ≤ T ≤ 10^5 1 ≤ L, W ≤ 10^9 SAMPLE INPUT 2 15 20 8 12 SAMPLE OUTPUT 5 4 Explanation In the first test case, the largest square that can fit perfectly within the dimensions 15 x 20 has a side length of 5. In the second test case, the largest square that can fit perfectly within the dimensions 8 x 12 has a side length of 4.","solution":"def gcd(a, b): Compute the greatest common divisor (GCD) of a and b. while b: a, b = b, a % b return a def largest_square_side_lengths(test_cases): Given the dimensions of multiple fields, return the side length of the largest possible square that fits perfectly within each field\'s dimensions. :param test_cases: A list of tuples, each containing the length and width of the field. :return: A list of side lengths of the largest possible square for each field. results = [] for L, W in test_cases: results.append(gcd(L, W)) return results"},{"question":"Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive. The array index starts from 0. Your task is to efficiently handle multiple queries of the above type on the array. Implement a function that initializes the class with the integer array nums and handles the range sum queries. You will have a class `NumArray` that contains: - A constructor that accepts an array of integers `nums` and initializes the object. - A method `sumRange(int i, int j)` that returns the sum of elements between indices i and j inclusive. Input - An integer array nums of length n (1 ≤ n ≤ 10^4). - Multiple queries where each query contains two integers i and j (0 ≤ i ≤ j < n). Output - For each query, return the sum of the elements between indices i and j. Example Input: nums = [-2, 0, 3, -5, 2, -1] queries = [(0, 2), (2, 5), (0, 5)] Output: [1, -1, -3] Explanation: The sum of elements between indices 0 and 2 is -2 + 0 + 3 = 1. The sum of elements between indices 2 and 5 is 3 + (-5) + 2 + (-1) = -1. The sum of elements between indices 0 and 5 is -2 + 0 + 3 + (-5) + 2 + (-1) = -3. Note: - The queries will not modify the array. - Implement the solution with an efficient algorithm to handle several queries efficiently.","solution":"class NumArray: def __init__(self, nums): Initialize your data structure here. self.n = len(nums) self.prefix_sums = [0] * (self.n + 1) for i in range(self.n): self.prefix_sums[i + 1] = self.prefix_sums[i] + nums[i] def sumRange(self, i, j): Return the sum of the elements of nums between indices i and j inclusive. return self.prefix_sums[j + 1] - self.prefix_sums[i]"},{"question":"In a city-logistics planning, a crucial task is to find optimal routes for delivery trucks. Each truck must travel from a starting warehouse to a destination warehouse while potentially stopping at several intermediate warehouses to collect or drop off packages. Given n warehouses, you are provided with a list of directed roads between pairs of warehouses. Each road has a length, which is the time it takes to travel that road. The goal is to determine the shortest possible time a delivery truck takes to travel from the starting warehouse to the destination warehouse. Your task is to write a program that calculates the shortest path from a given starting warehouse to a given destination warehouse. ------ Input ------ First line contains three integers n, m, q (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 100) - the number of warehouses, the number of roads, and the number of queries respectively. Each of the next m lines describe a road with three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) representing a directed road from warehouse u to warehouse v with length w. Each of the next q lines contains a query with two integers s, t (1 ≤ s, t ≤ n, s ≠ t) representing the starting and destination warehouses respectively. ------ Output ------ For each query, output a single integer: the minimum time required to travel from warehouse s to warehouse t. If no path exists between warehouses s and t, output -1. ----- Sample Input 1 ------ 5 6 2 1 2 10 2 3 10 3 4 10 4 5 10 1 5 50 2 5 20 1 4 2 5 ----- Sample Output 1 ------ 30 20","solution":"import heapq def dijkstra(n, adj, start, end): pq = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 visited = set() while pq: current_dist, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) if current_node == end: return current_dist for neighbor, weight in adj[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 def shortest_paths(n, m, q, roads, queries): adj = {i: [] for i in range(1, n + 1)} for u, v, w in roads: adj[u].append((v, w)) results = [] for s, t in queries: results.append(dijkstra(n, adj, s, t)) return results"},{"question":"You are given a city map in the form of an n x n grid. Each cell in the grid can either be a building \'B\', a road \'R\', or a park \'P\'. The game is to start from the top-left corner (i.e., (0,0)) and find a path to the bottom-right corner (i.e., (n-1,n-1)). You can move vertically or horizontally to the adjacent cells, but you cannot go through buildings. Given the city map, determine if there is a path from the top-left corner to the bottom-right corner and print \\"YES\\" if there is a path, otherwise print \\"NO\\". -----Input----- The first line contains an integer n (2 ≤ n ≤ 100) — the size of the grid. Each of the next n lines contains n characters each (\'B\', \'R\', or \'P\'), representing the city map. -----Output----- Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". -----Examples----- Input 4 RRRP BBRR RBRP RRRR Output YES Input 4 RRRB BRRB PBRR RRBB Output NO -----Note----- Consider the first test sample: - You can move from (0,0) to (0,1), (0,2) and (0,3), then down to (1,3), (2,3), and finally reach (3,3). Therefore, the output is \\"YES\\". In the second test sample, there is no way to reach the bottom-right corner due to the presence of \'B\' blocking the path. Therefore, the output is \\"NO\\".","solution":"def is_path_exist(grid): n = len(grid) directions = [(0, 1), (1, 0)] # Right and Down movements queue = [(0, 0)] # Starting position visited = set() visited.add((0, 0)) while queue: x, y = queue.pop(0) if (x, y) == (n - 1, n - 1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != \'B\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"You are given two strings s1 and s2. The special property of these strings is that s1 can be transformed into s2 by reversing any number of its substrings any number of times. However, you can only perform this transformation if it is possible to achieve using the exact same characters and same number of each character in both strings (i.e., both strings must be anagrams of each other). You need to determine if it’s possible to transform s1 into s2 following these rules. Example 1: Input: s1 = \\"abc\\", s2 = \\"bca\\" Output: \\"YES\\" Explanation: You can reverse the substring \\"abc\\" in s1 to get \\"cba\\", and then reverse \\"cba\\" to get \\"bca\\". Therefore, it is possible to transform s1 to s2. Example 2: Input: s1 = \\"listen\\", s2 = \\"silent\\" Output: \\"YES\\" Explanation: By reversing appropriate substrings, s1 can be transformed into s2 as both are anagrams. Example 3: Input: s1 = \\"abc\\", s2 = \\"def\\" Output: \\"NO\\" Explanation: As s1 and s2 are not anagrams, it is impossible to transform s1 into s2. Your Task: You don\'t need to read or print anything. Your task is to complete the function canTransform(s1, s2) which takes s1 and s2 as input parameters and returns \\"YES\\" or \\"NO\\". Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(s1), len(s2) <= 10^5 s1 and s2 consist of only lowercase English letters.","solution":"def canTransform(s1, s2): Determine if s1 can be transformed into s2 by reversing any number of substrings any number of times. Both s1 and s2 should be anagrams (i.e., same characters and same number of each character). Args: s1 (str): First input string. s2 (str): Second input string. Returns: str: \\"YES\\" if s1 can be transformed into s2, otherwise \\"NO\\". from collections import Counter # If the sorted strings are equal, both are anagrams of each other if Counter(s1) == Counter(s2): return \\"YES\\" else: return \\"NO\\""},{"question":"**Problem Statement** Given a list of integers, find the maximum possible product of any three distinct integers within the list. Your goal is to determine three numbers from the list that, when multiplied, produce the highest value. # Input The input consists of a single line containing the list of integers separated by spaces. # Constraints - All inputs are integers. - The list will contain at least three integers. - There will be no more than 300,000 integers in the list. - Each integer will be between -1,000,000 and 1,000,000. # Output Output a single integer which is the maximum product that can be obtained by multiplying any three distinct integers from the list. # Example Sample Input 1: ``` 3 2 1 5 6 7 ``` Sample Output 1: ``` 210 ``` **Explanation:** The product of 5, 6, and 7 is 210, which is the highest possible product. Sample Input 2: ``` -10 -10 5 2 ``` Sample Output 2: ``` 500 ``` **Explanation:** The product of -10, -10, and 5 is 500, which is the highest possible product because multiplying two negative numbers results in a positive product. Sample Input 3: ``` 1 2 3 4 ``` Sample Output 3: ``` 24 ``` **Explanation:** The product of 2, 3, and 4 is 24, which is the highest possible product. --- In solving this problem, consider the possibility of negative numbers and large limits. Your solution should efficiently handle the computation within given constraints.","solution":"def maximum_product_of_three(nums): Finds the maximum product of any three distinct integers in the list. nums.sort() max1 = nums[-1] * nums[-2] * nums[-3] # The product of the three largest numbers max2 = nums[0] * nums[1] * nums[-1] # The product of the two smallest and the largest number return max(max1, max2)"},{"question":"In this problem, your goal is to determine the number of distinct substrings of a given string. Substrings are defined as any sequence of characters that can be obtained by deleting any number of characters (including zero) from the start and/or end of the original string. Overlapping substrings count as distinct if their positions within the string differ. -----Input----- The input consists of a single line containing one string s. The string is composed of lowercase English letters and has length n (1 ≤ n ≤ 1000). -----Output----- Print a single integer — the number of distinct substrings of the input string. -----Examples----- Input abc Output 6 Input aaa Output 3 Input ababa Output 9","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the input string s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"In this task, we will be exploring matrix manipulation. You will be given a 2-dimensional matrix filled with integers. Your goal is to rotate the matrix 90 degrees clockwise. For example, given the following matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After rotating the matrix 90 degrees clockwise, the output should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` **Input Specifications:** - The input will be a list of lists, where each inner list represents a row in the matrix. Each row will contain integer values. - The matrix will always be square (i.e., the number of rows will be equal to the number of columns). **Output Specifications:** - The output must be a list of lists representing the rotated matrix. **Function Signature:** ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: ``` # Examples **Example 1:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` **Example 2:** ```python matrix = [ [1, 2], [3, 4] ] rotate_matrix(matrix) # Output: # [ # [3, 1], # [4, 2] # ] ```","solution":"def rotate_matrix(matrix): Rotates a given square matrix 90 degrees clockwise. Parameters: matrix (List[List[int]]): A square matrix to be rotated Returns: List[List[int]]: The rotated matrix n = len(matrix) # Create a new matrix to hold the rotated values rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Given a sequence of words, identify and count the number of anagram groups. Two words are anagrams if one can be formed by rearranging the letters of the other. Constraints * 1 ≤ len(words) ≤ 100,000 * 1 ≤ len(words[i]) ≤ 100 Input len(words) word1 word2 : word_len(words)-1 Output An integer representing the number of anagram groups. Examples Input 6 listen silent enlist hello olleh world Output 3 Input 3 abc bca xyz Output 2","solution":"def count_anagram_groups(words): Given a list of words, returns the count of unique anagram groups. Parameters: words (list): A list of strings. Returns: int: The number of unique anagram groups. anagram_dict = {} for word in words: sorted_word = \'\'.join(sorted(word)) if sorted_word in anagram_dict: anagram_dict[sorted_word].append(word) else: anagram_dict[sorted_word] = [word] return len(anagram_dict)"},{"question":"Aman loves playing with sequences of numbers. He has a sequence of n integers, a_1, a_2, dots, a_n, and he wants to perform exactly k operations on this sequence. In each operation, he can select any element a_i and replace it with any integer x such that 1 leq x leq m. After performing the operations, he wants to minimize the maximum difference between any two consecutive elements in the sequence. Help Aman find the minimum possible value of the maximum difference between any two consecutive elements after exactly k operations. -----Input----- The first line contains three integers n, k, and m (2 leq n leq 10^5, 0 leq k leq n-1, 1 leq m leq 10^9). The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq m). -----Output----- Print one integer — the minimum possible value of the maximum difference between any two consecutive elements after exactly k operations. -----Examples----- Input 5 2 10 1 5 9 4 8 Output 4 Input 4 0 5 1 2 3 4 Output 1 -----Note----- In the first sample, we can choose to replace a_2 and a_4 to make the sequence [1, 1, 9, 9, 8]. The maximum difference between consecutive elements is now 4. In the second sample, we are not allowed to perform any operations (k = 0). Therefore, the maximum difference between consecutive elements in the original sequence is already minimized.","solution":"def min_max_diff(n, k, m, a): Returns the minimum possible value of the maximum difference between any two consecutive elements after performing exactly k operations on the sequence a. if k == 0: return max([abs(a[i] - a[i - 1]) for i in range(1, n)]) # Define a binary search function def can_achieve(max_diff): Helper function to check if we can achieve a maximum difference of max_diff with at most k changes to the sequence a. changes_needed = 0 for i in range(1, n): if abs(a[i] - a[i - 1]) > max_diff: changes_needed += 1 if changes_needed > k: return False return True # Perform binary search on the possible maximum difference low, high = 0, m while low < high: mid = (low + high) // 2 if can_achieve(mid): high = mid else: low = mid + 1 return low"},{"question":"Given a list of strings, return the first non-repeating character in each string. If all characters repeat, return an empty string for that particular string. EASY! Expect large inputs!","solution":"def first_non_repeating_character(strings): Given a list of strings, return the first non-repeating character in each string. If all characters repeat, return an empty string for that particular string. Parameters: strings (list of str): A list of strings. Returns: list of str: A list of first non-repeating characters. results = [] for s in strings: char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character non_repeating = \'\' for char in s: if char_count[char] == 1: non_repeating = char break results.append(non_repeating) return results"},{"question":"Write a function that takes an array of integers and an integer `k`, and returns a list of the `k` most frequent elements in descending order of frequency. If multiple elements have the same frequency, they can be returned in any order. # Function Signature ```python def top_k_frequent_elements(nums: List[int], k: int) -> List[int]: ``` # Input 1. `nums` (List[int]): A list of integers. 2. `k` (int): An integer representing the number of most frequent elements to return. # Output - List[int]: A list of the `k` most frequent elements in descending order of frequency. # Example ```python # Input nums = [1, 1, 1, 2, 2, 3] k = 2 # Output [1, 2] # Input nums = [1] k = 1 # Output [1] ``` # Constraints - The output order may contain elements with equal frequency in any order. - The elements of `nums` are not necessarily sorted. - `k` is guaranteed to be a positive number less than or equal to the number of unique elements in `nums`. - The function should handle large inputs efficiently. # Scoring Your solution will be evaluated based on: - Correctness: The function should return the correct elements in the correct order. - Efficiency: Handle edge cases and large datasets effectively. - Clarity: Code should be well-structured and easy to understand. Use appropriate data structures and algorithms to ensure optimal performance. You may assume that the input list `nums` will always contain at least one integer.","solution":"from collections import Counter from typing import List def top_k_frequent_elements(nums: List[int], k: int) -> List[int]: Returns the list of k most frequent elements in descending order of frequency. frequency_counter = Counter(nums) # Use most_common to get the k most frequent elements most_common_elements = frequency_counter.most_common(k) # Extract the elements from the tuples returned by most_common result = [element for element, count in most_common_elements] return result"},{"question":"In a faraway kingdom, there are numerous beautiful gardens. The Queen has a peculiar interest in knowing the symmetry of her gardens. She wants to know whether each garden can be divided into two identical halves by a straight line passing through its center. Each garden is represented as a closed polygon with vertices given in a sequence of Cartesian coordinates. The Queen\'s challenge for you is to determine if it is possible to draw a straight line through the origin (0, 0) that divides the garden into two identical halves. Input The input data starts with an integer n (3 ≤ n ≤ 100), the number of vertices of the polygon. Each of the following n lines contains two integers xi and yi (-1000 ≤ xi, yi ≤ 1000), which are the coordinates of the vertices of the polygon, listed in clockwise or counter-clockwise order. Output Print \\"YES\\" if it is possible to draw such a line, and \\"NO\\" otherwise. Examples Input 4 1 1 -1 1 -1 -1 1 -1 Output YES Input 5 0 2 2 0 1 -1 -1 -1 -2 0 Output NO","solution":"def is_symmetric_garden(n, vertices): Determines if a garden represented as a polygon defined by `n` vertices can be divided into two identical halves by a straight line passing through the origin. :param n: Number of vertices of the polygon (integer) :param vertices: List of tuples representing the coordinates of vertices (List[Tuple[int, int]]) :return: \\"YES\\" if the garden can be divided into two identical halves, \\"NO\\" otherwise if n % 2 != 0: return \\"NO\\" for i in range(n // 2): x1, y1 = vertices[i] x2, y2 = vertices[i + n // 2] if (x1 + x2) != 0 or (y1 + y2) != 0: return \\"NO\\" return \\"YES\\""},{"question":"# Description Write a function that accepts a string and returns the maximum length of a substring that contains no more than two distinct characters. The result should be an integer. Example \\"eceba\\" -> 3 (The substring is \\"ece\\") \\"ccaabbb\\" -> 5 (The substring is \\"aabbb\\")","solution":"def length_of_longest_substring_two_distinct(s: str) -> int: Returns the length of the longest substring that contains no more than two distinct characters. if len(s) == 0: return 0 max_len = 0 window_start = 0 char_map = {} for window_end in range(len(s)): right_char = s[window_end] if right_char not in char_map: char_map[right_char] = 0 char_map[right_char] += 1 while len(char_map) > 2: left_char = s[window_start] char_map[left_char] -= 1 if char_map[left_char] == 0: del char_map[left_char] window_start += 1 max_len = max(max_len, window_end - window_start + 1) return max_len"},{"question":"Given a Binary Search Tree (BST), you need to find the lowest common ancestor (LCA) of two given nodes A and B. The LCA of two nodes A and B in a BST is the deepest node that is an ancestor of both A and B. Note that a node can be an ancestor of itself. Example 1: Input: 5 / 3 8 / / 2 4 7 9 A = 2, B = 7 Output: 5 Explanation: The lowest common ancestor of nodes 2 and 7 is node 5. Example 2: Input: 3 / 2 5 / 4 6 A = 4, B = 6 Output: 5 Explanation: The lowest common ancestor of nodes 4 and 6 is node 5. Your Task: The task is to complete the function findLCA() which takes the root of the BST and two integer values A and B as arguments, and returns the LCA node\'s value. Expected Time Complexity: O(N) Expected Auxiliary Space: O(H) Note: H is the height of the BST. Constraints: 2 <= Number of nodes <= 10^{4} 0 <= Value of a node <= 10^{5} Note: The Input/Output format and Examples given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from the stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"class TreeNode: def __init__(self, key): self.val = key self.left = None self.right = None def findLCA(root, A, B): Given the root of a BST and two values A and B, return the value of the Lowest Common Ancestor (LCA). if root is None: return None if A < root.val and B < root.val: return findLCA(root.left, A, B) if A > root.val and B > root.val: return findLCA(root.right, A, B) return root.val"},{"question":"You are given a multiset of integers. Find the length of the longest consecutive sequence that can be formed using integers from this multiset. Input The first line of input contains the number of integers n (1 ≤ n ≤ 100). The second line contains n integers (−10⁶ ≤ integer ≤ 10⁶). Some of the integers can be identical. Output Output the length of the longest consecutive sequence that can be formed. Examples Input 7 1 9 3 10 4 20 2 Output 4 Input 5 36 41 56 35 37 Output 3 Note In the first case, the longest consecutive sequence that can be formed is [1, 2, 3, 4], which is of length 4. In the second case, the longest consecutive sequence that can be formed is [35, 36, 37], which is of length 3.","solution":"def longest_consecutive_sequence_length(nums): Returns the length of the longest consecutive sequence that can be formed using integers from the given list. :param nums: List of integers :return: Length of the longest consecutive sequence if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: # Check if it\'s the start of a sequence current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A hiking club is organizing a hiking event and they need to determine the most suitable trail to ensure a safe and enjoyable experience for all participants. The trails are represented as a grid of cells, where each cell indicates the elevation at that point. The hikers will start from the top-left corner of the grid and need to reach the bottom-right corner. The challenge is to find a path that minimizes the maximum elevation difference between any two consecutive cells along the path. Create a function `minimizeElevationDifference(grid)` that accepts a 2D array of integers representing the elevation grid. The function will return the minimum possible value of the maximum elevation difference between any two consecutive cells on the optimal path from the top-left to the bottom-right corner. **Notes:** - You can move up, down, left, or right at each step. - The grid will always be a non-empty rectangular grid (i.e., it will have at least one row and one column). - The elevations in the grid can be any integer (positive, negative, or zero). A sample elevation grid is as follows: ``` [ [1, 3, 2], [4, 6, 5], [7, 8, 9] ] ``` In this case, the path that minimizes the maximum elevation difference is [1, 2, 5, 8, 9] with the elevation differences being [1, 3, 2] -> [2, 5, 6] -> [5, 9, 8]. The maximum difference in the optimal path is 3, so the function should return 3. Example call: ``` minimizeElevationDifference([[1, 3, 2], [4, 6, 5], [7, 8, 9]]) ``` Expected output: ``` 3 ```","solution":"import heapq def minimizeElevationDifference(grid): Finds a path from top-left to bottom-right such that the maximum elevation difference between any two consecutive cells is minimized. def isValid(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] m, n = len(grid), len(grid[0]) max_diff = [[float(\'inf\')] * n for _ in range(m)] min_heap = [(0, 0, 0)] # (difference, x, y) max_diff[0][0] = 0 while min_heap: diff, x, y = heapq.heappop(min_heap) if x == m - 1 and y == n - 1: return diff for dx, dy in directions: nx, ny = x + dx, y + dy if isValid(nx, ny): new_diff = max(diff, abs(grid[x][y] - grid[nx][ny])) if new_diff < max_diff[nx][ny]: max_diff[nx][ny] = new_diff heapq.heappush(min_heap, (new_diff, nx, ny)) return max_diff[-1][-1]"},{"question":"In this kata, we will implement a system to analyze stock prices in order to identify the best buying and selling points to maximize profit. Write the function ```maxProfit(prices)``` that determines the maximum profit one could achieve from this stock price data. ```prices``` is a list of integers (0 <= len(prices) <= 10^5) where each integer represents the price of a stock on that day. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) but you cannot hold more than one share at a time. However, you must sell the stock before you buy again. You should return the maximum profit that can be achieved. # Example: ``` prices = [7, 1, 5, 3, 6, 4] maxProfit(prices) => 7 ``` - Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit = 4+3 = 7. ``` prices = [1, 2, 3, 4, 5] maxProfit(prices) => 4 ``` - Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit = 4. ``` prices = [7, 6, 4, 3, 1] maxProfit(prices) => 0 ``` - Explanation: No transactions are made, i.e., max profit = 0. # Constraints: - All elements of prices are non-negative integers. - An element of prices will be in the range [0, 10^4].","solution":"def maxProfit(prices): Determine the maximum profit that can be achieved from the stock price data. Parameters: prices (list): A list of integers where each integer represents the price of a stock on that day. Returns: int: Maximum profit achievable. profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: profit += prices[i] - prices[i - 1] return profit"},{"question":"You are given an encoding of a binary tree in the form of an array representation. The array is constructed by traversing the binary tree in a level-order manner (BFS). Your task is to determine if this array represents a valid binary search tree (BST). In a valid BST, for every node, the nodes in its left subtree have values less than the node’s value, and the nodes in its right subtree have values greater than the node’s value. The array representation might contain the integer `-1`, which represents a null node. Null nodes do not affect the BST property. Write a function to determine if the given binary tree array representation corresponds to a valid BST. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. Each test case starts with an integer n (1 le n le 500) — the number of elements in the array representation of the binary tree. The next line contains n integers representing the binary tree in level-order where every integer a_i (-1 le a_i le 10^5) is the value of the i-th node. A value of `-1` signifies a null node. -----Output----- For each test case, print \\"Yes\\" or \\"No\\" (without quotes) depending on whether the binary tree array represents a valid BST. You may print each letter in any case (upper or lower). -----Example----- Input 3 7 5 3 8 1 4 6 10 5 10 5 15 -1 -1 6 20 7 10 5 15 2 7 12 20 Output Yes No Yes -----Note----- For the first case: The binary tree is: ``` 5 / 3 8 / / 1 4 6 10 ``` This tree satisfies the BST property. For the second case: The binary tree is: ``` 10 / 5 15 / 6 20 ``` This tree does not satisfy the BST property because the node with value 6 is in the right subtree of node 10 but has a value less than 10. For the third case: The binary tree is: ``` 10 / 5 15 / / 2 7 12 20 ``` This tree satisfies the BST property.","solution":"def is_valid_bst(arr): This function takes a list that represents a binary tree array in level-order. It returns \\"Yes\\" if the array represents a valid BST, otherwise \\"No\\". if not arr: return \\"Yes\\" def validate_bst(index, min_val, max_val): if index >= len(arr) or arr[index] == -1: return True val = arr[index] if not (min_val < val < max_val): return False return (validate_bst(2*index+1, min_val, val) and validate_bst(2*index+2, val, max_val)) return \\"Yes\\" if validate_bst(0, float(\'-inf\'), float(\'inf\')) else \\"No\\" def process_test_cases(t, cases): results = [] for n, arr in cases: results.append(is_valid_bst(arr)) return results"},{"question":"Given a string of words, find the longest word and return its length. If there are multiple words with the same maximum length, return the length of the first one. Your function should be case-insensitive, and you should consider only alphabetic characters when determining word length (ignore numbers and punctuation). For example: ```python longest_word_length(\\"Hello world\\") # returns 5 longest_word_length(\\"A quick brown fox.\\") # returns 5 longest_word_length(\\"Jumped!! Over 12 lazy dogs??\\") # returns 6 longest_word_length(\\"123 456 789\\") # returns 0 ``` If the input string is empty, the function should return 0. Note: Please refrain from using regular expressions in your solution.","solution":"def longest_word_length(s): Given a string of words, finds the longest word and returns its length. If there are multiple words with the same maximum length, returns the length of the first one. Only considers alphabetic characters and is case-insensitive. max_len = 0 # Split the string into words words = s.split() for word in words: # Filter out non-alphabetic characters clean_word = \'\'.join([char for char in word if char.isalpha()]) if len(clean_word) > max_len: max_len = len(clean_word) return max_len"},{"question":"An art gallery is arranging an exhibition featuring multiple artists. Each artist will showcase a certain number of paintings, and all paintings will be displayed serially in a single line. Each painting has a beauty value and an artist ID associated with it. The gallery has decided to implement a special arrangement such that every group of three consecutive paintings includes at least two paintings by different artists to achieve a balanced and diverse presentation. You are tasked with writing a program that, given the list of paintings with their beauty values and artist IDs, reorders the paintings as needed to meet the gallery\'s requirement. The goal is to maximize the total sum of beauty values while adhering to the arrangement constraint. If it\'s impossible to achieve the arrangement, output \\"Not possible\\". Input The input consists of: - An integer N (1 ≤ N ≤ 1000) representing the number of paintings. - N lines follow, each containing two integers Bi and Ai, where Bi (1 ≤ Bi ≤ 100) is the beauty value and Ai (1 ≤ Ai ≤ 100) is the artist ID of the ith painting. Output The output should be: - A single line with the maximum possible sum of beauty values if the arrangement is possible, or \\"Not possible\\" otherwise. Example Input 6 10 1 20 2 30 1 40 3 50 3 25 2 Output 175 Input 5 10 1 20 1 30 1 40 1 50 1 Output Not possible Explanation In the first example, one possible arrangement is [10 1], [20 2], [40 3], [30 1], [50 3], [25 2]. The total beauty value is 175, and it satisfies the condition that every three consecutive paintings include at least two paintings by different artists. In the second example, all paintings are by the same artist, so it is not possible to meet the arrangement constraint. Hence, the output is \\"Not possible\\".","solution":"def maximize_beauty(N, paintings): from collections import defaultdict # Group paintings by artist ID and sort them by beauty value in descending order artist_paintings = defaultdict(list) for beauty, artist_id in paintings: artist_paintings[artist_id].append(beauty) for artist_id in artist_paintings: artist_paintings[artist_id].sort(reverse=True) # Try arranging paintings to meet the required condition sorted_paintings = [] for artist_id, beauties in artist_paintings.items(): for beauty in beauties: sorted_paintings.append((beauty, artist_id)) sorted_paintings.sort(reverse=True, key=lambda x: x[0]) result = [] n = len(sorted_paintings) for i in range(n): if len(result) < 2 or sorted_paintings[i][1] != result[-1][1] or len(result) > 1 and sorted_paintings[i][1] != result[-2][1]: result.append(sorted_paintings[i]) else: found = False for j in range(i + 1, n): if sorted_paintings[j][1] != result[-1][1] or len(result) > 1 and sorted_paintings[j][1] != result[-2][1]: sorted_paintings[i], sorted_paintings[j] = sorted_paintings[j], sorted_paintings[i] result.append(sorted_paintings[i]) found = True break if not found: return \\"Not possible\\" # Verify the arrangement for i in range(2, n): if result[i][1] == result[i-1][1] and result[i][1] == result[i-2][1]: return \\"Not possible\\" total_beauty = sum(beauty for beauty, artist_id in result) return total_beauty"},{"question":"Given a list of meeting time intervals consisting of start and end times ```[[s1, e1], [s2, e2], ...]```, determine if a person could attend all meetings without any overlap. If there is no overlap between any two meetings, return ```true```. Otherwise, return ```false```. For ```intervals = [[0, 30], [5, 10], [15, 20]]```, the output should be ```canAttendMeetings(intervals) = false```. Explanation: A person cannot attend all meetings because the first meeting from 0 to 30 overlaps with both the second meeting (5 to 10) and the third meeting (15 to 20). For ```intervals = [[7, 10], [2, 4]]```, the output should be ```canAttendMeetings(intervals) = true```. Explanation: The two meetings do not overlap.","solution":"def canAttendMeetings(intervals): Determine if a person could attend all meetings without overlap. :param intervals: List of meeting time intervals consisting of start and end times :return: True if a person can attend all meetings without any overlap, False otherwise # First, sort the intervals by start time intervals.sort(key=lambda x: x[0]) for i in range(1, len(intervals)): # If the start time of the current interval is less than the end time of the previous interval if intervals[i][0] < intervals[i-1][1]: return False return True"},{"question":"Given an array of non-negative integers, each representing the amount of resources required to complete a task, and a total available resource, your task is to determine the maximum number of tasks that can be completed without exceeding the available resource. You are given an array of integers ``tasks`` and an integer ``resource``. Each integer in the array denotes the amount of resource required to complete a task. You must find the maximum number of tasks that can be completed such that the sum of the required resources does not exceed the total available resource. Note: - The length of the tasks array will not exceed 100. - The value of each element in tasks will not exceed 100. - The total available resource (integer) will not exceed 1000. Example 1: Input: tasks = [100, 200, 150, 80], resource = 300 Output: 2 Explanation: You can complete the tasks requiring 100 and 200 units or 100 and 150 units of resource. Either way, the maximum number of tasks is 2. Example 2: Input: tasks = [50, 50, 50, 50], resource = 100 Output: 2 Explanation: You can complete any two tasks (50 + 50 = 100), so the maximum number of tasks is 2.","solution":"def max_tasks(tasks, resource): This function returns the maximum number of tasks that can be completed without exceeding the given resource. :param tasks: List of integers representing the amount of resource required for each task. :param resource: Integer representing the total available resource. :return: Integer representing the maximum number of tasks that can be completed. tasks.sort() total = 0 count = 0 for task in tasks: if total + task <= resource: total += task count += 1 else: break return count"},{"question":"Given an integer n, return the largest number you can get by deleting exactly one digit of the given number. Example 1: Input: n = 152 Output: 52 Explanation: Deleting the digit \'1\' results in the largest number 52. Example 2: Input: n = 1001 Output: 101 Explanation: Deleting one of the \'0\'s results in the largest number 101. Your Task: You don\'t need to read input or print anything. Your task is to complete the function deleteDigit() which takes a single integer n as input and returns an integer, the largest number achievable by deleting exactly one digit of n. Expected Time Complexity: O(d), where d is the number of digits in the input number. Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^6","solution":"def deleteDigit(n): Returns the largest number achievable by deleting exactly one digit of the given number n. n_str = str(n) max_number = 0 for i in range(len(n_str)): current_number = int(n_str[:i] + n_str[i+1:]) if current_number > max_number: max_number = current_number return max_number"},{"question":"Erika is practicing her coding skills and came across a unique problem. Let\'s describe the task she\'s working on. 1. The task takes an input array of n integers. 2. The goal is to modify the array so that each element either remains the same or is increased by multiplying with any of the given multipliers. 3. You are given k possible multipliers m1, m2, ..., mk. Each multiplier is a positive integer greater than 1. 4. The task must modify the array such that after applying any multiplier to any of the elements, the sequence remains sorted in ascending order. Help Erika write the code for this task. Input: - The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10) — the number of elements in the array and the number of multipliers. - The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 50). - The third line contains k positive integers m1, m2, ..., mk (2 ≤ mi ≤ 10). Output: - Print a single line \\"YES\\" if it is possible to choose a multiplier for each element to make the array sorted in non-decreasing order. - Otherwise, print \\"NO\\". Example Input 5 2 1 2 3 4 5 2 3 Output YES Input 4 2 1 4 2 8 2 3 Output NO","solution":"def can_be_sorted(n, k, array, multipliers): import itertools # Check every possible combination of applying one multiplier to each element for combination in itertools.product(multipliers, repeat=n): # Apply the combination of multipliers to the array modified_array = [array[i] * combination[i] for i in range(n)] # Check if the modified array is sorted if all(modified_array[i] <= modified_array[i+1] for i in range(n-1)): return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers, you need to determine if it is possible to select a contiguous subarray such that the product of its elements is a perfect square. A perfect square is an integer that is the square of some integer; thus, it can be written as k^2 where k is an integer. -----Input----- The input consists of multiple test cases. The first line contains the number of test cases t (1 leq t leq 10^4). Each test case consists of two lines. The first line contains a single integer n (1 leq n leq 100) - the length of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^4 leq a_i leq 10^4) - the elements of the array. -----Output----- For each test case, output \\"YES\\" (without quotes) if there exists a contiguous subarray whose product is a perfect square, otherwise output \\"NO\\" (without quotes). Example: Input 4 3 1 2 3 4 4 -1 2 2 2 3 3 5 1 -2 3 6 -6 Output YES YES YES YES Explanation: In the first test case, the subarray [1, 1] (product = 1, which is 1^2) is a perfect square. In the second test case, the subarray [-1, 2, 2] (product = 4, which is 2^2) is a perfect square. In the third test case, the subarray [3, 3] (product = 9, which is 3^2) is a perfect square. In the fourth test case, the subarray [1, -2, 3, 6] (product = -36, which is (-6)^2) is a perfect square.","solution":"def is_perfect_square(n): if n < 0: return False root = int(n ** 0.5) return root * root == n def perfect_square_subarray_exists(n, arr): for i in range(n): product = 1 for j in range(i, n): product *= arr[j] if is_perfect_square(product): return \\"YES\\" return \\"NO\\" def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(perfect_square_subarray_exists(n, arr)) return results"},{"question":"Little S loves symmetry and patterns. She has a rectangular grid of size n x m, where n is the number of rows and m is the number of columns. She wants to color the cells of the grid using two colors: black and white, such that no two adjacent cells have the same color. However, Little S is only interested in the number of ways she can color the grid such that it fulfills her requirement, modulo 10^9+7. A cell (i, j) is adjacent to another cell (k, l) if |i-k| + |j-l| = 1. Input A single line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns of the grid. Output Print one integer — the number of valid ways to color the grid modulo 10^9+7. Examples Input 2 2 Output 2 Input 3 3 Output 0 Note In the first example, there are exactly 2 valid ways to color the 2x2 grid: 1. A pattern where cell (1,1) is black, (1,2) is white, (2,1) is white, and (2,2) is black. 2. A pattern where cell (1,1) is white, (1,2) is black, (2,1) is black, and (2,2) is white. In the second example, it is impossible to color the grid in the desired way since keeping the condition on the diagonal cells conflicts.","solution":"def count_ways_to_color_grid(n, m): Returns the number of valid ways to color the grid of size n x m such that no two adjacent cells have the same color, modulo 10^9+7. MOD = 10**9 + 7 # If either dimension is even, it\'s always possible to color the grid alternatively if n % 2 == 0 or m % 2 == 0: return 2 else: return 0"},{"question":"Lucia is an amateur astronomer who enjoys stargazing. She has a special telescope that can see through clouds, making it easier to observe celestial objects. However, the telescope can only be moved in a grid-like manner, either vertically or horizontally from one point to another. The night sky is represented by a two-dimensional grid, where each cell in the grid can either have a cloud or be clear. Given the grid and the initial position of Lucia\'s telescope, your task is to find the shortest path from the starting position to a given celestial object. The telescope can move one cell at a time, either up, down, left, or right, but it cannot pass through cells that have clouds. Input: The first line contains two integers, `n` and `m`, representing the number of rows and columns in the grid respectively. The second line contains the starting position of the telescope as two integers `sx` and `sy`, and the position of the celestial object as two integers `ex` and `ey`. The next `n` lines each contain `m` characters, either \'.\' (clear space) or \'#\' (cloud), representing the grid. Output: Output a single integer, the minimum number of moves required for the telescope to reach the celestial object. If there is no path available, output -1. Example: Input 5 5 0 0 4 4 . . . . . . # # # . . . . # . . # . . . . . . . . Output 8 Explanation Lucia starts at position (0, 0). The shortest path to reach the celestial object at (4, 4) requires 8 moves, navigating around the clouds. Note: 1. 1 ≤ n, m ≤ 1000 2. The starting and ending positions will always be clear cells.","solution":"from collections import deque def shortest_path(n, m, sx, sy, ex, ey, grid): # Directions array for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize visited set and queue for BFS visited = set() queue = deque([(sx, sy, 0)]) # Queue contains tuples of (x, y, distance) visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() if x == ex and y == ey: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Given an integer N, write a function that prints all the possible strings of length N drawing from an alphabet of only \'a\', \'b\', and \'c\'. The strings should be printed in lexicographical order. Example 1: Input: N = 2 Output: aa ab ac ba bb bc ca cb cc Example 2: Input: N = 1 Output: a b c Your Task: You do not need to read input or print anything. Your task is to complete the function generateStrings() which takes an integer N and prints all possible strings of length N in lexicographical order. Expected Time Complexity: O(3^N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10","solution":"def generate_strings(N): Generates all strings of length N using the characters \'a\', \'b\', and \'c\' in lexicographical order. def backtrack(current_string, length): if length == N: results.append(current_string) return for char in \'abc\': backtrack(current_string + char, length + 1) results = [] backtrack(\'\', 0) return results"},{"question":"Problem E: Maximum Rectangular Area in a Histogram Given an array of integers representing the heights of bars in a histogram, find the largest rectangular area that can be formed within the bounds of the histogram. The histogram bars align at the y-axis and are contiguous, where the width of each bar is assumed to be 1. Input The input consists of a single test case in the following format: n h_1 h_2 ... h_n Here, n is the number of bars in the histogram, satisfying 1 leq n leq 10^5. Each h_i is a non-negative integer representing the height of the i-th bar, where 0 leq h_i leq 10^6. Output Output a single integer, the maximum rectangular area that can be formed. Sample Input 1 7 6 2 5 4 5 1 6 Sample Output 1 12 Sample Input 2 5 1 2 3 4 5 Sample Output 2 9 Sample Input 3 5 5 4 3 2 1 Sample Output 3 9 Explanation for Sample Output 1 - The maximum rectangular area in Sample Input 1 is obtained by selecting the bars from index 2 to 5 (height 2, 5, 4, 5) to form the rectangle with dimensions 3 (height) x 4 (width) = 12. Example Input 6 2 1 5 6 2 3 Output 10","solution":"def max_histogram_area(heights): Function to find the maximum rectangular area in a histogram. :param heights: List of heights of the histogram bars. :return: Maximum rectangular area that can be formed. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given two strings: `s` and `p`, where `p` is a pattern that may contain wildcards. Your task is to determine if `p` matches `s`. The pattern `p` contains only lowercase letters and characters `?` and `*`, where `?` matches any single character and `*` matches any sequence of characters (including the empty sequence). Input The input consists of two lines: - The first line contains the string `s` (1 ≤ |s| ≤ 1000). - The second line contains the string `p` (1 ≤ |p| ≤ 1000). Output Output \\"YES\\" if the pattern matches the string, and \\"NO\\" otherwise. Examples Input aa a Output NO Input aa * Output YES Input cb ?a Output NO Input adceb *a*b Output YES","solution":"def is_match(s, p): Determines if the pattern p matches string s using ? and * wildcards. ? matches any single character * matches any sequence of characters (including the empty sequence) m, n = len(s), len(p) dp = [[False] * (n + 1) for _ in range(m + 1)] dp[0][0] = True for j in range(1, n + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] for i in range(1, m + 1): for j in range(1, n + 1): if p[j - 1] == s[i - 1] or p[j - 1] == \'?\': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i][j - 1] or dp[i - 1][j] return \\"YES\\" if dp[m][n] else \\"NO\\""},{"question":"Create a function that takes a list of strings and returns a list with all strings that contain only vowels. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\' in both lowercase and uppercase. The returned list should be in the same order as the input list. If no string in the input list contains only vowels, return an empty list. # Examples ```python filter_vowels([\\"aeiou\\", \\"hello\\", \\"Ou\\", \\"sky\\"]) # Output: [\\"aeiou\\", \\"Ou\\"] filter_vowels([\\"why\\", \\"rhythm\\", \\"sst\\"]) # Output: [] filter_vowels([\\"A\\", \\"E\\", \\"I\\", \\"O\\", \\"U\\", \\"X\\"]) # Output: [\\"A\\", \\"E\\", \\"I\\", \\"O\\", \\"U\\"] ``` # Notes - Consider both uppercase and lowercase vowels. - An empty input list should return an empty list.","solution":"def filter_vowels(strings): Returns a list of strings that contain only vowels. Parameters: strings (list): A list of strings to filter. Returns: list: A filtered list of strings containing only vowels. vowels = set(\'aeiouAEIOU\') def is_vowel_only(s): return all(char in vowels for char in s) return [s for s in strings if is_vowel_only(s)]"},{"question":"Tree Pruning You have a rooted tree consisting of n nodes, and each node has a certain value associated with it. The tree root is node 1. Your task is to prune the tree in such a way that the total sum of the values of the remaining nodes is maximized. You may remove a node and consequently all its descendants. When you remove a node, you remove its subtree which also removes all the sums of its descendants. This is done to maximize the subtree value counts. Input The input consists of the following format: n v_1 v_2 ... v_n p_2 p_3 ... p_n Here, n is the number of nodes (2 leq n leq 10^5). v_i is the value associated with the i-th node (-10^5 leq v_i leq 10^5). Note that v_1 is the value for the root node, v_2 is the value for node 2, and so on. For each node i (2 leq i leq n), p_i indicates the parent of node i. Output Output a single integer which is the maximum achievable sum of the remaining nodes\' values after pruning the tree optimally. Example Input 6 2 -3 4 -2 6 1 1 1 3 3 5 Output 9 Explanation In this example, one optimal pruning strategy is to remove the subtree rooted at node 2 and the subtree rooted at node 4, leaving the remaining nodes with values [2, 4, 6, 1], which sums to 13.","solution":"def tree_max_pruning_sum(n, values, parents): from collections import defaultdict # Creating adjacency list tree = defaultdict(list) for i in range(2, n + 1): tree[parents[i - 2]].append(i) # Use DFS to calculate the maximum sum of the prunable subtrees def dfs(node): max_sum = values[node - 1] # Initialize current node\'s contribution for child in tree[node]: child_sum = dfs(child) if child_sum > 0: max_sum += child_sum return max_sum # Compute the maximum sum starting from the root node (1) return max(0, dfs(1)) # Example usage: # n = 6 # values = [2, -3, 4, -2, 6, 1] # parents = [1, 1, 3, 3, 5] # result = tree_max_pruning_sum(n, values, parents) # Output should be 13"},{"question":"You are tasked with helping a museum design a grid floor pattern using tiles. The floor is described as an n by m grid. The given condition is that every tile in this grid will either be light-colored (indicated by \'.\') or dark-colored (indicated by \'#\') and they must alternate both row-wise and column-wise. However, the top-left corner should always start with a light-colored tile. Your task is to design this grid pattern in such a way that it follows the described alternating pattern. -----Input----- The only line of input contains two integers, n and m (1 ≤ n, m ≤ 50). -----Output----- Output n lines. Each line should contain a string consisting of m characters, which describes the floor pattern in the grid. Do not output spaces. -----Examples----- Input 3 3 Output .#. #.# .#. Input 4 5 Output .#.#. #.#.# .#.#. #.#.# Input 2 2 Output .# #. Input 1 4 Output .#.#","solution":"def create_floor_pattern(n, m): Create an n by m floor pattern alternating between light-colored and dark-colored tiles, starting with a light-colored tile at the top-left corner. pattern = [] for i in range(n): row = \\"\\" for j in range(m): if (i + j) % 2 == 0: row += \\".\\" else: row += \\"#\\" pattern.append(row) return pattern"},{"question":"You have been tasked with developing an application that analyzes weather data. For each day, you are given the temperature readings at various times throughout the day. Your job is to determine the maximum and minimum temperature for each day. -----Input:----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer M, the number of days. - For each day, the first line contains an integer K, the number of temperature readings for that day. - The following K lines each contain an integer representing the temperature readings for that day. -----Output:----- For each test case, output a line for each day containing two integers: the maximum and minimum temperature for that day respectively. -----Constraints----- - 1 leq T leq 10 - 1 leq M leq 100 - 1 leq K leq 1000 - -100 leq temperature reading leq 100 -----Sample Input:----- 1 2 4 -10 5 0 7 3 1 -3 4 -----Sample Output:----- 7 -10 4 -3","solution":"def analyze_weather_data(test_cases): results = [] for case in test_cases: days = case[\'days\'] for day in days: readings = day[\'readings\'] max_temp = max(readings) min_temp = min(readings) results.append(f\\"{max_temp} {min_temp}\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): M = int(lines[index]) index += 1 days = [] for __ in range(M): K = int(lines[index]) index += 1 readings = [] for ___ in range(K): readings.append(int(lines[index])) index += 1 days.append({\'readings\': readings}) test_cases.append({\'days\': days}) return test_cases def main(input_string): test_cases = parse_input(input_string) results = analyze_weather_data(test_cases) for result in results: print(result)"},{"question":"You are given a directed graph with `n` nodes labeled from `1` to `n` and `m` edges. Each edge has a direction (from node `u` to node `v`) and an associated weight (an integer `w`). Your task is to find the shortest path from a given starting node to a given destination node. If there is no path from the starting node to the destination node, return `-1`. If there are multiple shortest paths, you can return the weight of any of them. -----Constraints----- - 1 leq n leq 100 - 0 leq m leq 1000 - 1 leq u, v leq n - -1000 leq w leq 1000 -----Input----- Input is given from Standard Input in the following format: - The first line contains three integers, `n`, `m`, and `q` (number of queries). - The next `m` lines each contain three integers, `u`, `v`, and `w`, describing a directed edge from node `u` to node `v` with weight `w`. - The next `q` lines each contain two integers, `start` and `end`, representing a query to find the shortest path from `start` to `end`. -----Output----- For each query, print a single line with the weight of the shortest path from `start` to `end`. If no path exists, print `-1`. -----Sample Input----- 4 4 2 1 2 5 2 3 2 3 4 1 1 3 9 1 4 2 4 -----Sample Output----- 8 3 Explanation: - For the query from node `1` to node `4`, the shortest path is `1 -> 2 -> 3 -> 4` with a total weight of `5 + 2 + 1 = 8`. - For the query from node `2` to node `4`, the shortest path is `2 -> 3 -> 4` with a total weight of `2 + 1 = 3`.","solution":"import heapq def dijkstra(n, graph, start, end): Function to find the shortest path using Dijkstra\'s algorithm. dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] # priority queue (distance, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for weight, v in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[end] if dist[end] != float(\'inf\') else -1 def find_shortest_paths(n, m, edges, queries): # Constructing the graph from the edges graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((w, v)) results = [] for start, end in queries: results.append(dijkstra(n, graph, start, end)) return results"},{"question":"Given a binary matrix, the task is to find the maximum size of the square sub-matrix that contains only 1s. Example 1: Input: matrix = [ [0, 1, 1, 0, 1], [1, 1, 0, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0] ] Output: 3 Explanation: The maximum square sub-matrix with all 1s has a size of 3x3. Example 2: Input: matrix = [ [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0] ] Output: 0 Explanation: There is no 1s in the matrix, so the maximum square sub-matrix with all 1s size is 0. Example 3: Input: matrix = [ [1, 1, 1], [1, 1, 1], [1, 1, 1] ] Output: 3 Explanation: The entire matrix is a 3x3 square sub-matrix with all 1s. Your Task: You don\'t have to print anything, printing is done by the driver function. You have to complete the function maxSquare() which takes the 2D array matrix and its dimensions n and m as inputs and returns the size of the maximum square sub-matrix with all 1s. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ n, m ≤ 100 matrix[i][j] = 0 or 1","solution":"def maxSquare(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"You are working with a new encryption scheme that involves some operations with prime numbers. The encryption and decryption operations depend on the following property: for any prime number p, there are exactly p-1 positive integers less than p that are coprime with p. Given a list of numbers, identify how many of them are prime and, for each prime number in the list, calculate the count of positive integers less than that prime number which are coprime with it. -----Input----- The first line contains an integer t (1 le t le 10^5), representing the number of test cases. Each of the following t lines contains a positive integer n (1 le n le 10^6), representing the number to be tested for primality and, if it is prime, to calculate the result. -----Output----- For each test case, output \\"Not prime\\" if the given number n is not a prime number. If it is a prime number, output \\"Prime followed by the count of positive integers less than n that are coprime with n.\\" -----Examples----- Sample Input 1: 4 5 8 13 21 Sample Output 1: Prime 4 Not prime Prime 12 Not prime","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_coprime_count(t, numbers): For each number in numbers, return \\"Not prime\\" if it\'s not a prime number. If it is a prime number, return \\"Prime\\" followed by count of positive integers less than n that are coprime with n. results = [] for n in numbers: if is_prime(n): results.append(f\\"Prime {n-1}\\") else: results.append(\\"Not prime\\") return results # Example usage: # t = 4 # numbers = [5, 8, 13, 21] # print(prime_coprime_count(t, numbers)) # Output: [\'Prime 4\', \'Not prime\', \'Prime 12\', \'Not prime\']"},{"question":"Chef is preparing a special dish that requires the use of nested brackets. He needs your help to determine if he can correctly pair and nest the brackets in various strings. Each string can contain four types of brackets: \'(\', \')\', \'{\', \'}\', \'[\', \']\', \'<\', and \'>\'. A string is considered to have correctly nested brackets if: - Every opening bracket is paired with a closing bracket of the same type. - Brackets must close in the correct order. For instance, \\"([])\\" is correct, but \\"([)]\\" is incorrect. Given multiple strings, your task is to determine if each string has correctly nested brackets. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line of input denoting the string S, which contains the brackets. ------ Output Format ------ For each test case, output \\"YES\\" if the string has correctly nested brackets, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ |S| ≤ 10^{5} - The sum of |S| over all test cases won\'t exceed 5cdot 10^{5}. S consists only of the characters \'(\', \')\', \'{\', \'}\', \'[\', \']\', \'<\', and \'>\'. ----- Sample Input 1 ------ 3 (<>) {[(<>)]} {[<]>} ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test case 1: The string \\"(<>)\\" is correctly nested. Test case 2: The string \\"{[(<>)]}\\" is correctly nested. Test case 3: The string \\"{[<]>}\\" is not correctly nested, as the \'[\' does not close properly.","solution":"def is_correctly_nested(s): Determines if the string s has correctly nested brackets. Parameters: s (str): A string containing brackets. Returns: str: \\"YES\\" if the string is correctly nested, otherwise \\"NO\\". stack = [] bracket_pairs = {\'(\': \')\', \'{\': \'}\', \'[\': \']\', \'<\': \'>\'} for char in s: if char in bracket_pairs: stack.append(char) elif char in bracket_pairs.values(): if not stack or bracket_pairs[stack.pop()] != char: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def process_brackets(T, cases): Processes multiple test cases to check for correct bracket nesting. Parameters: T (int): The number of test cases. cases (list of str): List of strings, each containing a test case. Returns: list of str: List of results, each being \\"YES\\" or \\"NO\\". return [is_correctly_nested(case) for case in cases]"},{"question":"John likes collecting rare coins and storing them in boxes. He is very particular about how he organizes his collection. Currently, he has N coins, each with a unique value from 1 to N. He wants to store these coins in K boxes in such a way that the difference in the number of coins between the fullest box and the emptiest box is minimized. Help John determine the minimum possible difference under given constraints. -----Input----- - The first line of input contains an integer T denoting the number of test cases. - Each of the next T lines describes a test case and contains two integers, N and K, separated by a space. -----Output----- For each test case, output a single line containing the minimum possible difference between the number of coins in the fullest box and the number of coins in the emptiest box. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^9 - 1 ≤ K ≤ 10^9 -----Example----- Input: 3 7 3 10 2 5 5 Output: 1 5 0 -----Explanation----- Example case 1: John can distribute the coins as follows to the 3 boxes: [3, 2, 2]. The maximum number of coins in a box is 3 and the minimum number of coins in a box is 2. Therefore, the minimum possible difference is 1. Example case 2: John can distribute the coins into the 2 boxes as: [5, 5]. The maximum number of coins in a box is 5 and the minimum number of coins in a box is 5. Therefore, the minimum possible difference is 0. Example case 3: John can distribute the coins into the 5 boxes as: [1, 1, 1, 1, 1]. Therefore, the minimum possible difference is 0 since the fullest and emptiest boxes both contain 1 coin.","solution":"def min_difference(t, test_cases): results = [] for n, k in test_cases: if n % k == 0: results.append(0) else: results.append(1) return results"},{"question":"A company is hosting a party and they want to send specific invite letters to their employees. They store the designations of their employees in an array named D of size N. Each unique designation corresponds to a single invite letter. They want to print the total number of distinct invite letters required for the party. Input & Output: The first line of the input contains an integer N. The next N lines contain a designation on each, which is denoted by a string. You need to print on one line, the number of distinct invite letters required for the party. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Length of D[i] ≤ 100 for all designations in the array D. Sample Input: 7 Manager Engineer Executive Manager Designer Engineer Intern Sample Output: 5 Explanation In the given sample, the distinct designations are \\"Manager\\", \\"Engineer\\", \\"Executive\\", \\"Designer\\", and \\"Intern\\". So, the number of distinct invite letters required is 5.","solution":"def count_distinct_invite_letters(N, designations): Returns the number of distinct invite letters required from the list of designations. Parameters: N (int): The number of employees. designations (list of str): The designations of the employees. Returns: int: The number of distinct invite letters required. return len(set(designations))"},{"question":"You are given a string consisting of lowercase English letters and integer digits. Your task is to rearrange the string such that all letters appear in alphabetical order followed by all digits in ascending order. If the input string is empty, return it as is. For example: ``` \\"c3b2a1\\" --> \\"abc123\\" \\"m5k2a1z\\" --> \\"akmz125\\" \\"a1b2c3\\" --> \\"abc123\\" ``` Note: Maintain the case of letters (convert letters to lowercase if necessary) and preserve numeric digits in the original order in the final rearranged string.","solution":"def rearrange_string(s): Rearranges a string such that all letters appear in alphabetical order followed by all digits in ascending order. letters = sorted([char for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(letters + digits)"},{"question":"-----Question----- You are working on a unique text processing problem. Given a string made up of lowercase alphabets, you need to form the lexicographically smallest string possible by removing exactly one character. -----Input----- The input consists of a single string S (2 le |S| le 10^5), which contains only lowercase English letters. -----Output----- Output the lexicographically smallest string that can be obtained by removing exactly one character from the given string. -----Examples----- Sample Input 1: abc Sample Output 1: ab Sample Input 2: bca Sample Output 2: ba Sample Input 3: aabb Sample Output 3: aab","solution":"def lexicographically_smallest_string(S): Return the lexicographically smallest string by removing exactly one character from the input string S. min_string = S[1:] # Initially, consider removing the first character for i in range(1, len(S)): current_string = S[:i] + S[i+1:] if current_string < min_string: min_string = current_string return min_string"},{"question":"Santa Claus is planning his route for delivering gifts to children in a small neighborhood. The neighborhood consists of `n` houses aligned in a straight line and numbered from 1 to n. Santa starts at house number 1 and needs to reach house number n to complete his deliveries. Santa can move to an adjacent house or skip exactly one house to the right. However, due to the big snowstorm predicted in the area, certain houses will be blocked. We know that the i-th house will be blocked after `bi` minutes of snowfall (on minute bi the house isn\'t blocked yet, and on minute bi + 1 it is already blocked). Santa can\'t deliver gifts to or pass through the blocked houses! Your task is to help Santa calculate how long he can continue delivering gifts without being blocked from reaching house number n. Input The first line contains integer `n` (1 ≤ n ≤ 103) — the total number of houses. The second line contains n space-separated integers `bi` — the number of minutes after which the i-th house gets blocked (1 ≤ bi ≤ 103). Output Print a single number — the number of minutes Santa can continue delivering gifts without being blocked. Example Input 6 8 4 7 5 10 15 Output 5 Example Explanation In the given example, the second house gets blocked after the 4th minute, but the route 1 → 3 → 4 → 6 remains open until the 5th minute. After the 5th minute, the fourth house is blocked, preventing any further deliveries to the last house without being completely blocked. Thus, the maximum number of minutes Santa can continue delivering gifts is 5.","solution":"def max_delivery_time(n, blocking_times): Returns the number of minutes Santa can continue delivering gifts without being blocked. Parameters: n (int): The total number of houses. blocking_times (list of int): The number of minutes after which each house gets blocked. Returns: int: The maximum number of minutes Santa can continue delivering gifts without being blocked. min_block_time = min(blocking_times) return min_block_time"},{"question":"You are given an array of n integers representing the stock prices of a company in chronological order. A trader wants to maximize their profit by choosing an optimal time to buy and an optimal time to sell the stock, but they can complete at most two such buy-sell transactions. Note that a trader cannot sell and then buy on the same day (two transactions must be non-overlapping). Write a function to calculate the maximum possible profit the trader can achieve with at most two transactions. Input The first line contains an integer n (1 ≤ n ≤ 105) that shows the number of days of stock prices provided. The second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 105), which denote the stock prices on each day. Output Print a single integer — the maximum profit the trader can achieve. Examples Input 6 3 3 5 0 0 3 1 4 Output 6 Input 3 1 2 3 Output 2 Input 8 1 2 3 4 5 3 2 1 Output 4 Note In the first test example, the optimal trades are to buy on day 4 (price = 0) and sell on day 5 (price = 3) for a profit of 3, then buy on day 6 (price = 1) and sell on day 7 (price = 4) for a profit of 3, making the total profit 6. In the second test example, the optimal trade is to buy on day 1 (price = 1) and sell on day 3 (price = 3) for a profit of 2. As there are no more prices to consider, the maximum achievable profit is 2.","solution":"def max_profit_with_two_transactions(n, prices): if n < 2: return 0 # Initialize variables for the first and second transactions first_buy = float(\'-inf\') first_sell = 0 second_buy = float(\'-inf\') second_sell = 0 for price in prices: # Update first transaction first_buy = max(first_buy, -price) first_sell = max(first_sell, first_buy + price) # Update second transaction second_buy = max(second_buy, first_sell - price) second_sell = max(second_sell, second_buy + price) return second_sell"},{"question":"Given an array of integers, you are to identify and perform a sequence of operations that will make the array \\"beautiful.\\" An array is considered beautiful if the sum of its elements is even. The allowed operation is to choose any two adjacent elements and swap them. If the array is already beautiful, no operations are needed; otherwise, find the minimum number of swaps required to make the array beautiful. If it is not possible to make the array beautiful, return -1. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of elements in the array. - The second line of each test case contains N space-separated integers representing the array. -----Output----- For each test case, output a single integer indicating the minimum number of swaps required to make the array beautiful, or -1 if it is not possible. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 105 - Sum of N over all test cases in each file ≤ 106 - -109 ≤ array elements ≤ 109 -----Example----- Input: 3 4 1 2 3 4 3 1 3 5 5 2 4 6 8 10 Output: 0 -1 0 -----Explanation----- Example 1. The array [1, 2, 3, 4] has a sum of 10, which is already even, so no swaps are needed. Example 2. The array [1, 3, 5] has a sum of 9, which is odd. No matter how we swap adjacent elements, it is impossible to make the sum even. Hence the answer is -1. Example 3. The array [2, 4, 6, 8, 10] has a sum of 30, which is already even, so no swaps are needed.","solution":"def min_swaps_to_beautiful(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] # Number of elements in the array array = test_cases[i][1] # The array itself total_sum = sum(array) if total_sum % 2 == 0: results.append(0) else: results.append(-1) return results"},{"question":"In an online voting system, a set of candidates competes to gather votes from the voters. Each voter can vote for exactly one candidate. Your task is to determine the winner of the election using the following rules: 1. The candidate with the highest number of votes wins. 2. If two or more candidates receive the same highest number of votes, the candidate whose name comes earlier alphabetically wins. Implement a function that takes the list of candidates and their votes and returns the name of the winning candidate. **Input:** - An integer `n`, the number of votes cast (1 ≤ n ≤ 10^5). - A list of `n` strings, where each string represents a candidate\'s name (length of each name is between 1 and 20 characters inclusive, and consists of lowercase English letters only). **Output:** - A string representing the name of the winning candidate. **Examples:** Input: ``` 5 alice bob alice bob alice ``` Output: ``` alice ``` Input: ``` 4 dave dave carol carol ``` Output: ``` carol ``` # Note: - In the first example, \\"alice\\" receives 3 votes while \\"bob\\" receives 2 votes, so \\"alice\\" wins. - In the second example, both \\"dave\\" and \\"carol\\" receive 2 votes each. Since \\"carol\\" comes earlier alphabetically, \\"carol\\" wins.","solution":"def find_election_winner(n, votes): from collections import Counter vote_count = Counter(votes) # Determining the highest vote count max_votes = max(vote_count.values()) # Getting all candidates who have the highest votes candidates_with_max_votes = [candidate for candidate, count in vote_count.items() if count == max_votes] # Return the candidate that comes first alphabetically return min(candidates_with_max_votes)"},{"question":"You are given an amusement park with several attractions. Each attraction has a certain start time and end time during the day. Visitors can only attend one attraction at a time. You need to determine the maximum number of attractions a single visitor can attend in one day without overlapping their times. Input: - start_times: an array of integers representing the start times of attractions. - end_times: an array of integers representing the end times of attractions. Output: - An integer representing the maximum number of attractions a single visitor can attend. Example 1: Input: start_times = [1, 3, 0, 5, 8, 5] end_times = [2, 4, 6, 7, 9, 9] Output: 4 Explanation: The visitor can attend the attractions at times [1-2], [3-4], [5-7], and [8-9]. Example 2: Input: start_times = [1, 2, 3, 3] end_times = [2, 3, 4, 5] Output: 3 Explanation: The visitor can attend the attractions at times [1-2], [2-3], and [3-4]. Your Task: You do not need to read input or print anything. Your task is to complete the function maxAttractions() which takes start_times and end_times as inputs and returns the maximum number of attractions a single visitor can attend in a day. Constraints: 1 ≤ n ≤ 10^5 0 ≤ start_times[i] < end_times[i] ≤ 10^9","solution":"def maxAttractions(start_times, end_times): attractions = sorted(zip(end_times, start_times)) count = 0 end_time = 0 for end, start in attractions: if start >= end_time: count += 1 end_time = end return count"},{"question":"In a faraway kingdom, there is a very special type of gems that emits light of various intensities. The king is planning to decorate the main hall of his palace using these gems. He wants to place the gems in a line such that the beauty of the hall is maximized. The beauty is defined as the minimum light intensity among any three consecutive gems in the line. Given the number of gems and their respective light intensities, determine the order in which the gems should be placed to maximize the beauty of the hall. -----Input----- The first line contains a single integer n (3 leq n leq 100) — the number of gems. The second line contains n integers b_1, b_2, ldots, b_n (1 leq b_i leq 10^9) denoting the light intensities of each gem. -----Output----- Print exactly n integers — light intensities of the gems in the order in which they should be placed. If there are multiple possible answers, print any of them. -----Examples----- Input 4 10 20 30 40 Output 20 10 30 40 Input 5 1 3 2 5 4 Output 3 2 1 5 4 -----Note----- In the first example, the minimum light intensity among any three consecutive gems for the sequence [20, 10, 30, 40] is 10. This is greater than other possible sequences. In the second example, the minimum light intensity among any three consecutive gems for the sequence [3, 2, 1, 5, 4] is 1, which maximizes the beauty over other combinations.","solution":"def maximize_beauty(n, intensities): Returns the order of gem intensities that maximize the beauty of the hall. Args: - n: int, the number of gems. - intensities: list of int, the light intensities of the gems. Returns: - list of int, the order of gem intensities to maximize the beauty. # Sort the intensities intensities.sort() # Interleave the smallest with the largest result = [] for i in range(n // 2): result.append(intensities[i]) result.append(intensities[n - i - 1]) if n % 2 != 0: result.append(intensities[n // 2]) return result"},{"question":"Given an integer N, you are tasked with finding the number of ways to place N identical balls into N distinct bins such that no bin is left empty. But there\'s a twist: each bin has a maximum capacity K. Numz, the God of Numbers, challenges you to determine the number of valid distributions modulo 10^9 + 7. INPUT: The first line contains an integer T, the number of test cases. Each of the next T lines contains two integers N and K. OUTPUT: Output the answer for each test case on a new line. CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ K ≤ 1000 SAMPLE INPUT: 3 3 2 4 3 5 1 SAMPLE OUTPUT: 6 24 0 Explanation Test Case 1: We need to place 3 balls into 3 bins with each bin able to hold a maximum of 2 balls. Valid distributions are (1, 1, 1), (2, 1, 0), (2, 0, 1), (1, 2, 0), (1, 0, 2), and (0, 1, 2). There are 6 ways in total. Test Case 2: We need to place 4 balls into 4 bins with each bin able to hold a maximum of 3 balls. All bins can be filled in various combinations without exceeding the maximum capacity, resulting in 24 ways. Test Case 3: We need to place 5 balls into 5 bins with each bin able to hold a maximum of 1 ball. Since each bin can hold at most one ball, and no bin can be left empty, it is impossible to distribute the balls. Hence, the result is 0.","solution":"MOD = 10**9 + 7 def factorial(n): if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result = (result * i) % MOD return result def count_ways(N, K): if K <= 0: return 0 if K == 1: return 1 if N == 1 else 0 # Using Stirling numbers of the second kind to count ways stirling = [[0] * (N + 1) for _ in range(N + 1)] stirling[0][0] = 1 for n in range(1, N + 1): for k in range(1, n + 1): stirling[n][k] = (k * stirling[n - 1][k] + stirling[n - 1][k - 1]) % MOD return (factorial(N) * stirling[N][N]) % MOD def solve(t, test_cases): results = [] for N, K in test_cases: results.append(count_ways(N, K)) return results # Example usage within the solution def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) K = int(data[index + 1]) test_cases.append((N, K)) index += 2 for result in solve(T, test_cases): print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given an integer array `nums` of size `n`, and an integer `target`, return `true` if there exists a subarray size `k` such that it sums up to `target` and `false` otherwise. A subarray is a contiguous part of an array. **Constraints:** - The input array will have at most 1000 elements. - The elements of the array can be both positive and negative integers. **Input format:** - The first line contains two integers, `n` (number of elements in the array) and `target`, separated by space. - The second line contains `n` integers separated by a space. **Output format:** - Output a single line with `true` if there exists a subarray of size `k` that sums up to `target`, otherwise output `false`. **Examples:** **Example 1:** ``` Input 5 9 1 2 3 4 5 Output true ``` **Explanation:** There is a subarray [2, 3, 4] which sums to 9. **Example 2:** ``` Input 4 15 1 2 3 4 Output false ``` **Explanation:** There is no subarray that sums to 15. Note: The solution should be efficient enough to handle arrays with the maximum constraint provided (1000 elements).","solution":"def subarray_sum(nums, target): Returns true if there exists a subarray of size k that sums up to the target, otherwise false. n = len(nums) for k in range(1, n + 1): current_sum = sum(nums[:k]) if current_sum == target: return True for i in range(k, n): current_sum += nums[i] - nums[i - k] if current_sum == target: return True return False # Example usage if __name__ == \\"__main__\\": n, target = map(int, input().split()) nums = list(map(int, input().split())) print(subarray_sum(nums, target))"},{"question":"You are given a string `s` containing lowercase English letters. Your task is to determine the length of the longest substring that contains at most two distinct characters. Write a function: ```python def longest_substring_with_two_distinct(s: str) -> int: # Your code goes here ``` # Input: - A single string `s` (1 ≤ len(s) ≤ 100000) # Output: - An integer representing the length of the longest substring with at most two distinct characters. # Example: Input: ```plaintext abaccc ``` Output: ```plaintext 4 ``` Explanation: The longest substring with at most two distinct characters is \\"bacc\\" with a length of 4. # Constraints: - The input string will have only lowercase English letters. # Note: Consider using a sliding window approach to keep track of the current substring with at most two distinct characters. Maintain two pointers to represent the window and use a hashmap to count character frequencies within the window. Adjust the window size accordingly to ensure at most two distinct characters are present.","solution":"def longest_substring_with_two_distinct(s: str) -> int: from collections import defaultdict # Dictionary to keep the count of characters in the current window char_count = defaultdict(int) left = 0 # Left boundary of the sliding window max_length = 0 # Track the maximum length of valid substring for right in range(len(s)): char_count[s[right]] += 1 # If there are more than 2 distinct characters, shrink the window from the left while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 # Update the maximum length max_length = max(max_length, right - left + 1) return max_length"},{"question":"# Task: Stock Price Fluctuation You are given an array consisting of daily stock prices for a particular company over a certain number of days. Your objective is to write a function that calculates the maximum possible profit that could have been made by buying and then later selling one share of that stock. Your function should take an array of integers `prices` where `prices[i]` is the stock price on the `i`-th day. You need to find the maximum difference between a later selling price and an earlier buying price. If no maximum profit can be made, return `0`. Input: - An array `prices` of length `n` (1 ≤ n ≤ 3 * 10^4) Output: - An integer representing the maximum possible profit, or `0` if no profit can be made. Example 1: ``` Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. ``` Example 2: ``` Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. ``` Constraints: - You cannot buy and sell on the same day. - You can only make one transaction (buying one share and later selling it).","solution":"def max_profit(prices): Calculate the maximum possible profit by buying and then later selling one share of stock. :param prices: List of daily stock prices. :return: Maximum possible profit, or 0 if no profit can be made. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You have a stream of incoming integers, and you need to maintain a set of the most recent k unique integers seen so far. If the stream contains more than k unique integers, discard the oldest one when a new unique integer arrives. To achieve this, create a data structure with the following functionalities: 1. `add(num)`: Adds a new integer `num` to the set, maintaining the `k` most recent unique integers. 2. `get_latest()`: Returns a list of the current most recent unique integers in the set, in the order they were added. Implement this data structure and provide the following operations: -----Input----- The first line of input contains integers t (1 le t le 10^3) — the number of operations. Each of the following t lines contains either: - an operation of the form `add x` (where `x` is the integer to be added to the set), - an operation of the form `get_latest` which requires you to return the `k` most recent unique integers as a space-separated list. -----Output----- Whenever `get_latest` is called, output the current most recent unique integers as a space-separated list. -----Example----- Input 7 add 1 add 2 get_latest add 3 add 2 get_latest add 4 Output 1 2 1 2 3 -----Note----- 1. Initially, the set of recent unique integers is empty. 2. After `add 1` and `add 2`, calling `get_latest` returns `1 2`. 3. After `add 3` and `add 2` (where `2` is already in the set and thus no change is made), calling `get_latest` returns `1 2 3`.","solution":"from collections import deque class RecentUnique: def __init__(self, k): self.k = k self.queue = deque() self.set = set() def add(self, num): if num in self.set: return if len(self.queue) == self.k: oldest = self.queue.popleft() self.set.remove(oldest) self.queue.append(num) self.set.add(num) def get_latest(self): return list(self.queue)"},{"question":"You are given an undirected graph with mbox{N} nodes and mbox{M} edges. Each edge has a weight associated with it. You are also provided with mbox{Q} queries. Each query contains two integers mbox{U} and mbox{V}. Your task is to determine the shortest path distance between nodes mbox{U} and mbox{V}. If there is no path between them, return -1. Input Format The first line contains two integers mbox{N} and mbox{M}. The next mbox{M} lines contain three integers mbox{X}, mbox{Y}, and mbox{W} each, indicating there is an edge between node mbox{X} and node mbox{Y} with weight mbox{W}. The next line contains mbox{Q}, the number of queries to follow. Each of the next mbox{Q} lines contains two integers mbox{U} and mbox{V}. Output Format For each query, print the shortest path distance between nodes mbox{U} and mbox{V}. If there is no path, print -1. Constraints 1 leq N leq 1000 1 leq M leq 10000 1 leq W leq 10^6 1 leq Q leq 1000 1 leq U, V, X, Y leq N Sample Input 5 6 1 2 3 1 3 4 2 3 1 2 4 2 3 5 7 4 5 1 3 1 5 2 4 1 4 Sample Output 6 2 5 Explanation Query 1: The shortest path from node 1 to node 5 is 1 -> 2 -> 3 -> 5 with a total weight of 6. Query 2: The shortest path from node 2 to node 4 is 2 -> 4 with a total weight of 2. Query 3: The shortest path from node 1 to node 4 is 1 -> 2 -> 4 with a total weight of 5.","solution":"import heapq def dijkstra(graph, start, n): Implements Dijkstra\'s algorithm to find the shortest paths from start node to all other nodes. distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_path_distances(n, edges, queries): # Build the graph graph = {i: [] for i in range(1, n + 1)} for x, y, w in edges: graph[x].append((y, w)) graph[y].append((x, w)) # Process each query results = [] for u, v in queries: distances = dijkstra(graph, u, n) result = distances[v] if distances[v] != float(\'infinity\') else -1 results.append(result) return results"},{"question":"In the realm of data processing, managing and manipulating time-series data is a common task. One such dataset can be represented as a sequence of temperature recordings taken at regular intervals. For this problem, we’ll focus on a simplified version wherein you are given temperature recordings taken each hour for several consecutive days. Your task is to identify the longest sub-sequence (sub-array) of temperature readings that are strictly increasing, which means each subsequent recording in that subsequence is higher than the preceding one. -----Input----- The first line contains a single integer 1 leq n leq 10^5, the number of temperature readings. The second line contains n space separated integers -10^5 leq t_i leq 10^5 representing the temperature readings. -----Output----- Output a single integer representing the length of the longest strictly increasing sub-sequence of temperature readings. -----Examples----- Sample Input 1: 10 1 2 3 2 3 4 1 2 3 4 Sample Output 1: 4 Sample Input 2: 5 5 4 3 2 1 Sample Output 2: 1 Sample Input 3: 8 1 2 0 3 4 5 0 6 Sample Output 3: 4 Note: In the first example, the longest strictly increasing sub-sequence is [2, 3, 4].","solution":"def longest_increasing_subsequence_length(n, temperatures): This function finds the length of the longest strictly increasing sub-sequence in a list of temperatures. :param n: Integer, the number of temperature readings. :param temperatures: List of integers, representing the temperature readings. :return: Integer, the length of the longest strictly increasing sub-sequence. if n == 0: return 0 longest = 1 current_length = 1 for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_length += 1 else: if current_length > longest: longest = current_length current_length = 1 if current_length > longest: longest = current_length return longest"},{"question":"In a local bakery, the cashier runs several promotions and offers certain discounts based on the volume of pastries a customer buys. The discounts are applied based on the following criteria: - If a customer buys less than 5 pastries, no discount is applied. - If a customer buys between 5 and 10 (inclusive) pastries, a 10% discount is applied on the total price. - If a customer buys between 11 and 20 (inclusive) pastries, a 20% discount is applied on the total price. - If a customer buys more than 20 pastries, a 30% discount is applied on the total price. Given the number of pastries purchased and the price per pastry, calculate the total amount a customer has to pay after applying the appropriate discount. -----Input----- The input consists of: - An integer n, the number of pastries purchased. - A real number p, the price per pastry. The values 1 leq n leq 100 and 0.01 leq p leq 100.00. -----Output----- Output the total amount the customer has to pay, rounded to two decimal places. -----Examples----- Sample Input 1: 4 2.50 Sample Output 1: 10.00 Sample Input 2: 5 3.00 Sample Output 2: 13.50 Sample Input 3: 12 1.50 Sample Output 3: 14.40","solution":"def calculate_total_payment(n, p): Calculate the total amount a customer has to pay after applying the appropriate discount. :param n: int - number of pastries purchased :param p: float - price per pastry :return: float - total amount after applying discount, rounded to two decimal places total_price = n * p if n < 5: discount = 0 elif 5 <= n <= 10: discount = 0.10 elif 11 <= n <= 20: discount = 0.20 else: discount = 0.30 final_price = total_price * (1 - discount) return round(final_price, 2)"},{"question":"You are given a collection of books where each book is represented as a tuple containing the book\'s name and its genre. Your task is to arrange the books in such a way that no two consecutive books in the arrangement belong to the same genre. If it is not possible to arrange the books in such a manner, return an empty list. -----Input----- - The first line contains an integer N, the number of books. - The next N lines each contain the name of a book (a string) and its genre (a string). -----Output----- Print a possible arrangement of books meeting the criteria. If it is not possible to arrange the books accordingly, print an empty list. -----Constraints----- - 1 le N le 1000 - Each book name consists of lowercase and uppercase English letters and spaces. - Each genre consists of lowercase English letters and spaces. - No two books have the same name. -----Example Input----- 7 HarryPotter Fantasy Eragon Fantasy Dune ScienceFiction Foundation ScienceFiction PrideAndPrejudice Classic ToKillAMockingbird Classic Hamlet Classic -----Example Output----- [HarryPotter, Dune, Eragon, Foundation, PrideAndPrejudice, ToKillAMockingbird, Hamlet] -----Explanation----- A valid arrangement is shown. In this arrangement, no two consecutive books are of the same genre.","solution":"from collections import defaultdict, Counter import heapq def arrange_books(books): Arranges the books such that no two consecutive books have the same genre. :param books: List of tuples [(name, genre), ...] :return: List of arranged books or empty list if not possible # Create a dictionary mapping genre to list of book names genre_books = defaultdict(list) for name, genre in books: genre_books[genre].append(name) # Use a max-heap to store genres by count of books max_heap = [] for genre, names in genre_books.items(): heapq.heappush(max_heap, (-len(names), genre)) # Push count-negative for max-heap result = [] prev_genre = None prev_count = 0 prev_books = [] while max_heap: count, genre = heapq.heappop(max_heap) count = -count if prev_genre: heapq.heappush(max_heap, (-prev_count, prev_genre)) result.append(genre_books[genre].pop()) count -= 1 if genre_books[genre]: prev_count = count prev_genre = genre else: prev_genre = None prev_count = 0 # If we successfully arranged all books, return the result if len(result) == len(books): return result else: return [] # Example test case books_input = [ (\\"HarryPotter\\", \\"Fantasy\\"), (\\"Eragon\\", \\"Fantasy\\"), (\\"Dune\\", \\"ScienceFiction\\"), (\\"Foundation\\", \\"ScienceFiction\\"), (\\"PrideAndPrejudice\\", \\"Classic\\"), (\\"ToKillAMockingbird\\", \\"Classic\\"), (\\"Hamlet\\", \\"Classic\\") ] print(arrange_books(books_input))"},{"question":"Given an array of integers `nums` and an integer `k`, return the length of the longest continuous subarray that contains at most `k` distinct elements. # Example Input ``` nums: [1, 2, 1, 3, 4, 2, 3] k: 2 ``` Output ``` 3 ``` Explanation The subarray `[1, 2, 1]` contains 3 elements with at most 2 distinct numbers (`1` and `2`). This is the longest such subarray in the provided array. # Constraints * `1 <= nums.length <= 10^5` * `0 <= nums[i], k <= 10^4` # Function Signature ```python def longest_subarray_with_k_distinct(nums: List[int], k: int) -> int: pass ```","solution":"from typing import List from collections import defaultdict def longest_subarray_with_k_distinct(nums: List[int], k: int) -> int: Returns the length of the longest continuous subarray that contains at most k distinct elements. n = len(nums) if k == 0: return 0 left = 0 right = 0 max_length = 0 freq_map = defaultdict(int) while right < n: freq_map[nums[right]] += 1 while len(freq_map) > k: freq_map[nums[left]] -= 1 if freq_map[nums[left]] == 0: del freq_map[nums[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Given two integers N and M, you need to determine the number of ordered pairs (i, j) such that 1 ≤ i ≤ j ≤ N and the bitwise AND of i and j is greater than the bitwise OR of i and j. The result should be returned modulo M. ------ Input ------ The first line contains two integers N and M. ------ Output ------ Output a single integer, representing the count of such ordered pairs (i, j) modulo M. ------ Example ------ Input: 4 1000000007 Output: 0 ------ Explanation ------ In the test case N equals to 4. There are no pairs (i, j) that satisfy the condition that the bitwise AND of i and j is greater than the bitwise OR of i and j. ------ Scoring ------ Subtask 1 (10 points): 1 ≤ N ≤ 10 Subtask 2 (20 points): 1 ≤ N ≤ 1000 Subtask 3 (30 points): 1 ≤ N ≤ 1000000 Subtask 4 (40 points): 1 ≤ N ≤ 10^{12}","solution":"def count_ordered_pairs(N, M): Determines the number of ordered pairs (i, j) such that 1 ≤ i ≤ j ≤ N and the bitwise AND of i and j is greater than the bitwise OR of i and j. The result is returned modulo M. Parameters: N (int): The upper limit for i and j. M (int): The modulo value. Returns: int: The count of ordered pairs (i, j) satisfying the condition mod M. # Since an OR will always be greater than or equal to an AND, # it\'s impossible for AND(i, j) > OR(i, j). return 0"},{"question":"Imagine you are given a mystical string S of length N, composed of lowercase English alphabetic characters. Mystical wizards have assigned some special powers to substrings of S. A substring is considered powerful if it follows these rules: 1. The substring contains at most one character that appears more than once. 2. All other characters in the substring appear at most once. Given a mystical string S, determine the length of the longest powerful substring possible. -----Input:----- - The first line contains T, the number of test cases. Then the test cases follow. - For each test case, the first line contains a single integer N denoting the length of the string S. - The second line contains the string S of length N. -----Output:----- For each test case, output a single integer denoting the length of the longest powerful substring. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - S contains only lowercase English letters. -----Sample Input:----- 3 7 abacaba 5 abcde 6 aabbcc -----Sample Output:----- 5 5 4 -----Explanation:----- - #1: The substring \\"abaca\\" is the longest powerful substring (contains \'a\' more than once, rest characters only once). - #2: The entire string \\"abcde\\" is a powerful substring as no character repeats more than once. - #3: The substrings \\"aabb\\" or \\"bbcc\\" are the longest powerful substrings of length 4.","solution":"def longest_powerful_substring(N, S): max_length = 0 for i in range(N): count = {} repeat_char = None current_length = 0 for j in range(i, N): if S[j] in count: count[S[j]] += 1 else: count[S[j]] = 1 if count[S[j]] > 1: if repeat_char is None: repeat_char = S[j] elif repeat_char != S[j]: break current_length += 1 max_length = max(max_length, current_length) return max_length def process_test_cases(test_cases): results = [] for N, S in test_cases: results.append(longest_powerful_substring(N, S)) return results"},{"question":"Create a function `accum(s)` that takes a string `s` and returns an accumulated format of each character, where each character\'s position determines its repetition and each repetition starts with a capitalized letter. Each element should be joined with a hyphen (\'-\'). For example, given the string: ```python >>> accum(\\"abcd\\") \\"A-Bb-Ccc-Dddd\\" >>> accum(\\"RqaEzty\\") \\"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\\" >>> accum(\\"cwAt\\") \\"C-Ww-Aaa-Tttt\\" ``` The output should follow these rules: 1. The first character of each segment is capitalized. 2. Each segment is formed by repeating the corresponding character, based on its position (0-indexed) in the original string.","solution":"def accum(s): Returns the accumulated format of each character in the string `s` where each character position determines its repetition and each repetition starts with a capitalized letter. return \'-\'.join((c * (i + 1)).capitalize() for i, c in enumerate(s))"},{"question":"Given an integer array `arr` and an integer `X`, find the number of pairs (i, j) in the array such that `arr[i] + arr[j] <= X` and `i != j`. Example 1: Input: arr = [1, 2, 3, 4] X = 5 Output: 4 Explanation: The pairs that satisfy the condition are (1, 2), (1, 3), (2, 3), and (1, 4). Example 2: Input: arr = [5, 7, 9, 2] X = 10 Output: 2 Explanation: The pairs that satisfy the condition are (5, 2) and (7, 2). Your Task: You don\'t need to read input or print anything. Your task is to complete the function `countPairs()` which takes an integer array `arr` and an integer `X` as input parameters and returns an integer, the total number of pairs (i, j) such that `arr[i] + arr[j] <= X` and `i != j`. Expected Time Complexity: O(n^2) Expected Space Complexity: O(1) Constraints: 1 <= arr.length <= 100 1 <= arr[i] <= 100 1 <= X <= 200","solution":"def countPairs(arr, X): Returns the number of pairs (i, j) in the given array such that arr[i] + arr[j] <= X and i != j. count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[i] + arr[j] <= X: count += 1 return count"},{"question":"Given two integers, B and C, check if B is divisible by C. If B is divisible by C, print \'Yes\'; otherwise, print \'No\'. -----Constraints----- - 1 leq B, C leq 100 - Both values are integers. -----Input----- Input is given from Standard Input in the following format: B C -----Output----- If B is divisible by C, print \'Yes\'; otherwise, print \'No\'. -----Sample Input----- 10 5 -----Sample Output----- Yes 10 is divisible by 5, so the output is \'Yes\'.","solution":"def is_divisible(B, C): Checks if B is divisible by C and returns \'Yes\' if true, otherwise \'No\'. if B % C == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a list of student names and their respective scores in a particular subject. Write a program to determine the top 5 students with the highest scores. If multiple students have the same score, sort them alphabetically by their names. Input - The first line contains an integer `N` (1 ≤ N ≤ 1000), the number of students. - The following `N` lines contain a string and a float separated by space: the student\'s name (a string of 1 to 20 alphanumeric characters) and the student\'s score (a float between 0 and 100 inclusive) with exactly two digits after the decimal point. Output - Print the names of the top 5 students with the highest scores, one per line. - If there are fewer than 5 students, print all the student names. - The output should be sorted by score in descending order. If multiple students have the same score, print their names in alphabetical order. Constraints - 1 ≤ N ≤ 1000 - The student\'s name will consist of only English letters and digits. SAMPLE INPUT 7 Alice 88.00 Bob 92.50 Catherine 87.75 David 92.50 Eva 90.00 Frank 85.50 Grace 88.00 SAMPLE OUTPUT Bob David Eva Alice Grace","solution":"def top_students(students): Determine the top 5 students with the highest scores. Args: students (list of tuple): List of tuple where each tuple contains a student name and their score. Returns: list of str: Sorted list of top 5 student names. # Sort students first by name alphabetically if scores are the same, then by score descending sorted_students = sorted(students, key=lambda x: (-x[1], x[0])) # Only keep the top 5 students top_5_students = sorted_students[:5] # Extract student names from the sorted list top_5_student_names = [student[0] for student in top_5_students] return top_5_student_names # Note: For an actual implementation where inputs are read from, you would need to include the part that reads and processes the input data."},{"question":"The school is collaborating with a local wildlife conservation team to track animal activity in nearby forests. They have installed multiple trail cameras across different locations. Each camera captures a series of timestamps representing animal activity. Unfortunately, due to a technical issue, the timestamps are all messed up—they are not sorted, and some timestamps overlap between cameras. The team needs to analyze the activity for each camera in chronological order to identify patterns. Your task is to help the team by writing a program to sort the activity logs for each camera. -----Input----- The input starts with an integer n (1 ≤ n ≤ 100), the number of cameras. For each camera, there is a block of data: - The first line of the block contains an integer m (1 ≤ m ≤ 1000), the number of timestamps for that camera. - The next m lines each contain a timestamp in \\"YYYY-MM-DD HH:MM:SS\\" format. All timestamps are distinct. -----Output----- For each camera, print the sorted list of timestamps in ascending order. Each camera\'s output block should start with the line \\"Camera X:\\", where X is the camera number starting from 1. -----Examples----- Input 2 3 2023-03-15 14:25:33 2023-03-14 11:14:52 2023-03-15 13:22:01 4 2023-05-12 08:45:00 2023-05-11 10:00:55 2023-05-11 10:01:00 2023-05-12 08:45:01 Output Camera 1: 2023-03-14 11:14:52 2023-03-15 13:22:01 2023-03-15 14:25:33 Camera 2: 2023-05-11 10:00:55 2023-05-11 10:01:00 2023-05-12 08:45:00 2023-05-12 08:45:01","solution":"def sort_camera_timestamps(n, camera_data): result = [] for i in range(n): camera_num = i + 1 m = int(camera_data.pop(0)) timestamps = [camera_data.pop(0) for _ in range(m)] timestamps.sort() result.append(f\\"Camera {camera_num}:\\") result.extend(timestamps) return result # Example usage: # n = 2 # camera_data = [ # \'3\', \'2023-03-15 14:25:33\', \'2023-03-14 11:14:52\', \'2023-03-15 13:22:01\', # \'4\', \'2023-05-12 08:45:00\', \'2023-05-11 10:00:55\', \'2023-05-11 10:01:00\', \'2023-05-12 08:45:01\' # ] # print(sort_camera_timestamps(n, camera_data))"},{"question":"Input 5 4 1 2 1 2 3 2 3 4 3 4 5 4 Output 10","solution":"def sum_of_weights(number_of_nodes, number_of_edges, edges): Returns the sum of the weights of all edges. :param number_of_nodes: Number of nodes in the graph :param number_of_edges: Number of edges in the graph :param edges: List of edges where each edge is represented as (node1, node2, weight) :return: Sum of the weights of all edges total_weight = 0 for edge in edges: total_weight += edge[2] return total_weight # Example usage: # number_of_nodes = 5 # number_of_edges = 4 # edges = [(1, 2, 1), (2, 3, 2), (3, 4, 3), (4, 5, 4)] # This should return 10"},{"question":"Given an array of integers, find the length of the longest contiguous subarray that contains at most two distinct integers. Input: The first line of input contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line of each test case contains an integer N denoting the size of the array. The second line contains N space-separated integers representing the elements of the array. Output: For each test case, print the length of the longest contiguous subarray with at most two distinct integers. Constraints: 1 <= T <= 100 1 <= N <= 100 -10^4 <= A[i] <= 10^4 Example: Input: 2 6 1 2 1 2 3 4 5 4 4 4 5 5 Output: 4 5 Note: The Input/Output format and Example given are used for the system’s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def longest_subarray_with_two_distinct(arr): Returns the length of the longest contiguous subarray that contains at most two distinct integers. from collections import defaultdict n = len(arr) if n < 3: return n left, right = 0, 0 hashmap = defaultdict(int) max_len = 2 while right < n: hashmap[arr[right]] += 1 right += 1 while len(hashmap) > 2: hashmap[arr[left]] -= 1 if hashmap[arr[left]] == 0: del hashmap[arr[left]] left += 1 max_len = max(max_len, right - left) return max_len def process_test_cases(T, test_cases): Process each test case to find the longest subarray with two distinct integers. results = [] for t in range(T): N = test_cases[t][0] arr = test_cases[t][1] result = longest_subarray_with_two_distinct(arr) results.append(result) return results"},{"question":"You are given a network of cities connected by bidirectional roads. Each road has a positive integer length. Your task is to determine the shortest cycle that can be formed in this network. A cycle is any path that starts and ends at the same city, visiting at least one other city along the way. -----Input----- - The first line contains a single integer T, the number of test cases. Each test case is described as follows: - The first line contains two integers N and M, where N is the number of cities and M is the number of roads. - The next M lines each contain three integers u, v, and w, representing a road between cities u and v with a length w. -----Output----- For each test case, print a single line containing the length of the shortest cycle. If no cycle exists, print -1. -----Constraints----- - 1 le T le 10 - 2 le N le 1000 - 1 le M le 10000 - 1 le u, v le N - 1 le w le 10^4 -----Example Input----- 2 4 4 1 2 2 2 3 3 3 4 4 4 1 5 3 2 1 2 6 2 3 7 -----Example Output----- 14 -1 -----Explanation----- Example case 1: The shortest cycle involves visiting all the cities in the network, resulting in a total length of 14. Example case 2: There are no cycles in the network.","solution":"import heapq def find_shortest_cycle(n, edges): def dijkstra(source): dist = [float(\'inf\')] * n dist[source] = 0 pq = [(0, source)] while pq: cur_dist, u = heapq.heappop(pq) if cur_dist > dist[u]: continue for v, weight in adj_list[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return dist adj_list = [[] for _ in range(n)] for u, v, w in edges: adj_list[u - 1].append((v - 1, w)) adj_list[v - 1].append((u - 1, w)) min_cycle_length = float(\'inf\') for u, v, w in edges: adj_list[u - 1].remove((v - 1, w)) adj_list[v - 1].remove((u - 1, w)) dist = dijkstra(u - 1) if dist[v - 1] != float(\'inf\'): min_cycle_length = min(min_cycle_length, dist[v - 1] + w) adj_list[u - 1].append((v - 1, w)) adj_list[v - 1].append((u - 1, w)) return min_cycle_length if min_cycle_length != float(\'inf\') else -1 def shortest_cycle(T, test_cases): results = [] for i in range(T): N, M, edges = test_cases[i] result = find_shortest_cycle(N, edges) results.append(result) return results"},{"question":"You are given a list of `n` integers, and your task is to determine if there exists a contiguous subarray of length `k` that has a sum greater than or equal to a given threshold `t`. Input The first line contains three integers `n`, `k`, and `t` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n, -10^9 ≤ t ≤ 10^9) — the number of integers in the list, the desired subarray length, and the threshold respectively. The second line contains `n` integers a_i (-10^9 ≤ a_i ≤ 10^9) — the elements of the list. Output Output \\"YES\\" (without quotes) if such a subarray exists, otherwise output \\"NO\\". Examples Input 10 3 15 1 2 3 4 5 6 7 8 9 10 Output YES Input 5 2 10 1 2 -3 4 5 Output NO Explanation In the first example, the subarray [5, 6, 7] (indices 4 to 6) has a sum of 18, which is greater than the threshold 15. In the second example, no subarray of length 2 has a sum greater than or equal to 10.","solution":"def has_contiguous_subarray(n, k, t, arr): Returns \\"YES\\" if there exists a contiguous subarray of length k with a sum >= t, otherwise \\"NO\\" current_sum = sum(arr[:k]) if current_sum >= t: return \\"YES\\" for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum >= t: return \\"YES\\" return \\"NO\\" # Example usage: # n = 10 # k = 3 # t = 15 # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # print(has_contiguous_subarray(n, k, t, arr)) # Output: \\"YES\\" # n = 5 # k = 2 # t = 10 # arr = [1, 2, -3, 4, 5] # print(has_contiguous_subarray(n, k, t, arr)) # Output: \\"NO\\""},{"question":"George is a software engineer working on secure web applications. Recently, he has encountered an issue related to generating unique session IDs for users. To ensure the uniqueness and security of each session ID, George has decided to create a string of length n composed of lowercase letters (\'a\' to \'z\') that must fulfill a specific property. The property is that for any pair of positions (i, j) in the string with i < j, the substring from s[i] to s[j] should be lexicographically smaller than or equal to the reverse of the substring from s[i] to s[j]. Your task is to help George generate such a string of length n that satisfies the given property. It is guaranteed that there always exists at least one such string. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^3). Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^6), which is the desired length of the string. It is guaranteed that the sum of n over all test cases does not exceed 10^7. -----Output----- For each test case, output a string of length n that satisfies the given property. -----Examples----- Input 3 5 3 8 Output abcba aaa abcdefgh -----Note----- In the first example, the string \\"abcba\\" satisfies the property as every substring is lexicographically smaller than or equal to its reverse. In the second example, the string \\"aaa\\" trivially satisfies the property because all characters are the same. In the third example, the string can be \\"abcdefgh\\" as every substring is lexicographically smaller than or equal to its reverse.","solution":"def generate_secure_string(n): Returns a string of length n composed of lowercase letters (\'a\' to \'z\') that satisfies the given lexicographic property. from string import ascii_lowercase result = \'\' if n <= 26: result = ascii_lowercase[:n] else: repeat_count = n // 26 remaining_count = n % 26 result = ascii_lowercase * repeat_count + ascii_lowercase[:remaining_count] return result def process_test_cases(test_cases): results = [] for n in test_cases: results.append(generate_secure_string(n)) return results"},{"question":"You are organizing a reading contest and each participant will be reading books from a common pool. There are N books in the pool and you are given a list of integers, where the i-th integer denotes the number of pages in the i-th book. Each participant will select a subset of books such that the total number of pages in their chosen subset is less than or equal to a given value P. A subset of books is considered \\"optimal\\" if its total number of pages is maximized while still being less than or equal to P. Can you determine the total number of pages in the optimal subset for each participant? ------ Input ------ The first line of the input contains a single integer T denoting the number of participants. The description of T participants follows. The first line of each test case contains two space-separated integers N and P, denoting the number of books and the maximum number of pages a participant can read respectively. The second line contains N space-separated integers, where the i-th integer denotes the number of pages in the i-th book. ------ Output ------ For each participant, print a single line containing one integer ― the total number of pages in the optimal subset of books that the participant can choose. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ P ≤ 10^{4} 1 ≤ Number of pages in any book ≤ 10^3 ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 3 3 50 10 20 30 4 100 40 15 25 50 5 60 10 10 10 10 10 ----- Sample Output 1 ------ 50 100 50 ----- Explanation 1 ------ Example case 1: The optimal subset includes books with 20 and 30 pages, totaling 20 + 30 = 50 pages. Example case 2: The optimal subset includes books with 40, 15, 25, and 20 pages, totaling 40 + 15 + 25 + 20 = 100 pages. Example case 3: The optimal subset includes any subset of books that adds up to 50 pages. One possible subset is choosing five books with 10 pages each, totaling 50 pages.","solution":"def knapsack(T, data): results = [] for case in data: N, P = case[0] pages = case[1] dp = [0] * (P + 1) for page in pages: for j in range(P, page - 1, -1): dp[j] = max(dp[j], dp[j - page] + page) results.append(dp[P]) return results def optimal_pages_read(T, participants_data): return knapsack(T, participants_data)"},{"question":"In a certain country, state names consist of a combination of uppercase and lowercase letters. The government wants to organize the states in a special alphabetical order: - All uppercase letters should precede lowercase letters. - Within each group (uppercase and lowercase), letters should appear in lexicographical order. You are tasked with writing a program that takes a list of state names and sorts them according to the above rules. Input Format: N, the number of state names. A list of N state names. Output Format: A list of state names sorted according to the special alphabetical order. Constraints: 1 ≤ N ≤ 100 Each name\'s length ≤ 100 SAMPLE INPUT: 5 California texas FLORIDA nevada newYork SAMPLE OUTPUT: FLORIDA California nevada newYork texas Explanation: First, all uppercase state names are placed before any lowercase state names. Within the uppercase and lowercase groups, the names are sorted lexicographically.","solution":"def special_sort(states): Sort the state names such that all uppercase letters precede lowercase letters and within each group (uppercase and lowercase), letters appear in lexicographical order. uppercase_states = sorted([state for state in states if state[0].isupper()]) lowercase_states = sorted([state for state in states if state[0].islower()]) return uppercase_states + lowercase_states"},{"question":"Steve is playing a game where he has to reduce an integer to exactly zero by applying a set of operations. The allowed operations are: 1. Subtract 1 from the number. 2. Subtract 2 from the number. 3. Subtract 3 from the number. Given an initial number `n`, you need to determine the minimum number of operations required to reduce the number to zero. -----Input----- The first line of input contains a single integer `n` (1 ≤ n ≤ 100,000), the initial number. -----Output----- Print a single integer, representing the minimum number of operations required to reduce `n` to zero. -----Examples----- Input 4 Output 2 Input 10 Output 4 -----Note----- In the first example, `n` = 4 can be reduced to 0 by performing the operations: 4 - 3 = 1, 1 - 1 = 0. In the second example, `n` = 10 can be reduced to 0 by performing the operations: 10 - 3 = 7, 7 - 3 = 4, 4 - 3 = 1, 1 - 1 = 0.","solution":"def min_operations(n): Determine the minimum number of operations to reduce n to zero. Allowed operations are to subtract 1, 2, or 3 from the number. Parameters: n (int): The initial number. Returns: int: The minimum number of operations required to reduce n to zero. # Let\'s use Dynamic Programming to solve this problem dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): if i >= 1: dp[i] = min(dp[i], dp[i - 1] + 1) if i >= 2: dp[i] = min(dp[i], dp[i - 2] + 1) if i >= 3: dp[i] = min(dp[i], dp[i - 3] + 1) return dp[n]"},{"question":"An air traffic control system needs to provide flight plans for pilots. You are going to write a part of this system that generates a sequence of waypoints a pilot must follow. A waypoint is represented as a 2D coordinate (x, y). The waypoint sequence must satisfy the following conditions: 1. The sequence must start at (0, 0). 2. Each subsequent waypoint must be exactly one unit away in either the horizontal or vertical direction from the previous waypoint. 3. The sequence must end at the waypoint (a, b). Given the integer coordinates (a, b), determine if it is possible to generate such a sequence and, if so, provide one valid sequence of waypoints. -----Constraints----- - (-10^{6} leq a, b leq 10^{6}) - The sum of the absolute values of a and b should not exceed (10^{6}). -----Input----- The input is given from Standard Input in the following format: a b -----Output----- If there does not exist a valid sequence consistent with the problem conditions, print \\"IMPOSSIBLE\\". Otherwise, print a sequence of waypoints in the format: (x_1, y_1) (x_2, y_2) ... (x_n, y_n) -----Example Input----- 3 4 -----Example Output----- (0, 0) (0, 1) (0, 2) (0, 3) (1, 3) (2, 3) (3, 3) (3, 4) Note: There can be multiple correct solutions. If there is a solution, any valid output will be accepted.","solution":"def generate_waypoints(a, b): Given integer coordinates (a, b), generate a sequence of waypoints from (0, 0) to (a, b) that are each 1 unit away in either horizontal or vertical direction. # Calculate the manhattan distance if abs(a) + abs(b) > 10**6: return \\"IMPOSSIBLE\\" waypoints = [(0, 0)] x, y = 0, 0 # Move in the x direction until we reach the x coordinate of (a, 0) while x != a: if x < a: x += 1 else: x -= 1 waypoints.append((x, y)) # Move in the y direction until we reach the y coordinate of (a, b) while y != b: if y < b: y += 1 else: y -= 1 waypoints.append((x, y)) return waypoints def format_waypoints(waypoints): Format the waypoints for output. if waypoints == \\"IMPOSSIBLE\\": return waypoints return \' \'.join(f\'({x}, {y})\' for x, y in waypoints)"},{"question":"You are given a list of `n` integers. Your task is to determine if there exists a pair of indices `(i, j)` such that `i < j` and the sum of the elements at these indices is an even number. You have to answer `t` independent test cases. -----Input----- The first line of the input contains one integer `t` (`1 <= t <= 10^4`) — the number of test cases. For each test case, the first line contains one integer `n` (`1 <= n <= 10^5`) — the length of the array. The second line of each test case contains `n` integers `a_1, a_2, ..., a_n` (`1 <= a_i <= 10^9`) — the elements of the array. It is guaranteed that the sum of `n` across all test cases does not exceed `10^5`. -----Output----- For each test case, print \\"YES\\" if there exists a pair of indices with the required property, otherwise print \\"NO\\". -----Example----- Input 3 5 1 3 5 7 9 4 2 4 6 8 3 1 4 5 Output NO YES YES","solution":"def has_even_sum_pair(arr): Returns True if there exists a pair of indices (i, j) such that i < j and the sum of the elements at these indices is an even number. odd_count = 0 even_count = 0 for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 return even_count > 1 or (even_count > 0 and odd_count > 0) def solve(test_cases): results = [] for arr in test_cases: if has_even_sum_pair(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a program to decode a given encoded string where each letter is shifted by a certain number of positions in the alphabet. This is known as a Caesar cipher. The program should be able to encode or decode the message based on the given shift value. # Task: You are given a string and an integer shift value. If the shift value is positive, perform the encoding by shifting letters forward through the alphabet. If the shift value is negative, perform the decoding by shifting letters backward. Non-alphabetic characters should remain unchanged. # Input format: - A single line containing a string of alphanumeric characters and spaces. - An integer representing the shifting positions. # Constraints: - The shift value can be any integer (positive, negative, or zero). - The string consists only of printable ASCII characters. # Output format: - A single line containing the encoded or decoded string. # Example: ``` Input: \\"middle-Outz\\", 2 Output: \\"okffng-Qwvb\\" ``` # Explanation: - Shifting \'m\' by 2 positions results in \'o\'. - Shifting \'i\' by 2 positions results in \'k\'. - Shifting \'d\' by 2 positions results in \'f\'. - Shifting \'d\' by 2 positions results in \'f\'. - Shifting \'l\' by 2 positions results in \'n\'. - Shifting \'e\' by 2 positions results in \'g\'. - \'-\' remains unchanged. - Shifting \'O\' by 2 positions results in \'Q\'. - Shifting \'u\' by 2 positions results in \'w\'. - Shifting \'t\' by 2 positions results in \'v\'. - Shifting \'z\' by 2 positions results in \'b\' (since \'z\' is circularly shifted to \'a\'). ```python def caesar_cipher(s, k): result = [] for char in s: if char.isalpha(): shift = k % 26 if char.islower(): shifted_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) else: shifted_char = chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\')) result.append(shifted_char) else: result.append(char) return \'\'.join(result) # Example usage s = \\"middle-Outz\\" k = 2 print(caesar_cipher(s, k)) ``` Note that the function handles both the shift and the wrapping around of alphabets correctly and leaves non-alphabetic characters unchanged.","solution":"def caesar_cipher(s, k): Encodes or decodes a string using the Caesar cipher. Parameters: s (str): The input string. k (int): The shift value. Returns: str: The encoded or decoded string. result = [] for char in s: if char.isalpha(): shift = k % 26 if char.islower(): shifted_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) else: shifted_char = chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\')) result.append(shifted_char) else: result.append(char) return \'\'.join(result)"},{"question":"You are given a list of integers representing the calorie count consumed by a person each day for a week. The goal is to determine the total calorie count at the end of the week, but if any day\'s calorie count exceeds 2000, that day is considered a cheat day and should be ignored from the total calorie count. Your task is to write a program that calculates the total calorie count considering the above rule. Input The input begins with an integer T, the number of test cases. Each test case comprises seven integers representing the calories consumed each day for a week (separated by spaces). Output For each test case, output a single integer: the total calorie count for the week after disregarding any cheat days. SAMPLE INPUT 2 1800 2200 1500 2100 1600 1800 1400 2200 2300 2400 2500 2600 2700 2800 SAMPLE OUTPUT 8100 0","solution":"def total_calories(T, test_cases): Calculate the total calorie count for each week, ignoring days with calories exceeding 2000. :param T: Number of test cases :param test_cases: List of lists containing 7 integers each, representing calorie count for each day of the week :return: List of total calories for each week results = [] for week in test_cases: total = sum(cal for cal in week if cal <= 2000) results.append(total) return results def process_input(input_str): Process the input string into the required format. :param input_str: The input string :return: Tuple containing T and test_cases lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [list(map(int, line.split())) for line in lines[1:T+1]] return T, test_cases def main(input_str): T, test_cases = process_input(input_str) return total_calories(T, test_cases)"},{"question":"Given a binary string of length n, you can perform the following operation any number of times: - Select two positions in the string i and j (1 leq i, j leq n) such that s_i neq s_j, and swap the characters at positions i and j. You need to determine the lexicographically smallest possible string you can obtain after performing any number of such operations. A string a is lexicographically smaller than a string b if there exists some index i such that a_1 = b_1, a_2 = b_2, ldots, a_{i-1} = b_{i-1} and a_i < b_i. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains a binary string of length n (1 leq n leq 100). -----Output----- For each test case, print the lexicographically smallest string possible after performing any number of operations. -----Examples----- Input 4 101 1100 0011 1110 Output 011 0011 0011 0111 -----Note----- For the first test case, you can swap the positions of the first and third characters to get the string \\"011\\" which is the lexicographically smallest possible string. For the second test case, you can swap the positions of the first and second characters to get the string \\"1001\\" and then swap the first and third characters to get the string \\"0011\\" which is the lexicographically smallest possible string.","solution":"def smallest_lexicographic_binary_string(t, test_cases): results = [] for s in test_cases: sorted_string = \'\'.join(sorted(s)) results.append(sorted_string) return results"},{"question":"You are working on a project to enhance the security of a communication system. As part of the security measures, you are required to generate a set of unique codes for secure data transmission. Each code needs to be distinguishable and non-repeating within a given sequence. To achieve this, you decide to utilize a random digit selection method. You have n digits, where each digit can be any number from 0 to 9. However, to ensure code uniqueness, no digit should appear more than k times in the generated sequence. Given two integers n and k, find the maximum length of the sequence that can be generated under the given constraints. Input The input consists of two space-separated integers n and k: - n (1 ≤ n ≤ 10^6): The total number of digits in the sequence. - k (1 ≤ k ≤ 10): The maximum number of times a single digit can appear in the sequence. Output Print a single integer representing the maximum length of the sequence that can be generated. Examples Input 10 2 Output 20 Input 15 3 Output 45","solution":"def max_sequence_length(n, k): Given n (total number of digits) and k (maximum number of times a single digit can appear), returns the maximum length of the sequence that can be generated under the given constraints. # Maximum unique digits we can have (0-9) unique_digits = 10 # Each digit can appear at most k times max_length = unique_digits * k return max_length"},{"question":"Create a function that takes an integer n as input and prints a right-aligned number triangle of height n. Each row i of the triangle should contain the numbers from 1 to i, right-aligned by leading spaces. Example: Input: 4 Output: 1 1 2 1 2 3 1 2 3 4 Function Signature: ```python def printRightAlignedTriangle(n: int) -> None: pass ``` Constraints: - 1 <= n <= 20 Your Task: -Implement the provided function signature, ensuring the correct output format as shown in the example.","solution":"def printRightAlignedTriangle(n: int) -> None: Prints a right-aligned number triangle of height n. Each row i contains the numbers from 1 to i, right-aligned by leading spaces. for i in range(1, n + 1): line = \' \'.join(map(str, range(1, i + 1))) print(line.rjust(n + i - 1))"},{"question":"You are given a large warehouse with items arranged in slots. Each slot is uniquely identified by a number, and each slot contains a certain number of items. You are a manager looking to conduct an operation that finds the maximum number of items you can collect by following a specific path within the warehouse. There are two different types of moves you can make: - **Forward move:** From slot ( p ), you can move to slot ( p+1 ). - **Backward move:** From slot ( p ), you can move to slot ( p-1 ). You start at a given slot ( k ) (1 ≤ ( k ) ≤ N) and need to collect items until you reach either the first slot or the last slot of the warehouse. From there, you can no longer move further in the direction you just moved. Your task is to find the maximum number of items you can collect by playing according to the above conditions. Note that you must start at the given slot ( k ) and cannot switch directions once you start moving. For example, consider the scenario where ( N = 6 ) and the number of items in the slots is [2, 1, 5, 3, 4, 6], starting at slot ( k = 4 ). You can move forward to slot 5 and then to slot 6, collecting 3 + 4 + 6 = 13 items in total. Alternatively, you can move backward to slot 3, then to slot 2 and finally to slot 1, collecting 3 + 5 + 1 + 2 = 11 items in total. The maximum number of items you can collect in this case is 13. -----Input format----- - Line 1: Two space-separated integers, ( N ) and ( k ), with 1 ≤ ( k ) ≤ ( N ). - Line 2: A space-separated sequence of ( N ) integers, representing the number of items in slots 1, 2, ..., ( N ). -----Output format----- A single line with a single integer, the maximum number of items you can collect. -----Example----- -----Sample input----- 6 4 2 1 5 3 4 6 -----Sample output----- 13 Notes: - The number of slots, ( N ), can be up to ( 10^6 ). - The number of items in each slot is a non-negative integer not exceeding 1000.","solution":"def max_items(N, k, items): current_index = k - 1 # Convert k to zero-based index forward_sum = 0 backward_sum = 0 # Calculate the maximum items by moving forward for i in range(current_index, N): forward_sum += items[i] # Calculate the maximum items by moving backward for i in range(current_index, -1, -1): backward_sum += items[i] # Return the maximum of the two sums return max(forward_sum, backward_sum)"},{"question":"Theater seating chart problem You are assigned the task of creating a seating chart for a newly opened theater. The seating arrangement in the theater is such that there are \'n\' rows of seats with \'m\' seats in each row. The seats are numbered from 1 to m in each row, and from top to bottom, the rows are also numbered from 1 to n. Each seat can either be available (denoted by 1) or occupied (denoted by 0). You need to find the maximum sequence of consecutive available seats in the seating chart that can accommodate a given group of people. The sequence can be in any row but must be within the same row. Input: ``` - The first line contains two integers, n and m, representing the number of rows and the number of seats in each row, respectively. - The next n lines contain m integers each (either 0 or 1), indicating the availability of the seats. - The last line contains an integer, k, representing the number of people in the group. ``` Output: ``` - A single integer indicating the row number that accommodates the group. If multiple rows have the same length of the consecutively available seats, return the smallest row number. - If no such row exists, return -1. ``` Constraints: - 1 ≤ n, m ≤ 1000 - 0 ≤ k ≤ m Example Input: ``` 4 5 1 0 0 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 3 ``` Example Output: ``` 4 ``` Explanation: In the given seating arrangement, row 4 has the longest sequence of 4 available seats, which is enough to accommodate the group of 3 people. Therefore, the output is 4.","solution":"def find_max_consecutive_seats(n, m, seating_chart, k): Finds the row number that can accommodate the given group size with the maximum consecutive available seats. Parameters: n (int): Number of rows m (int): Number of seats in each row seating_chart (list of list of int): The seating chart matrix k (int): Number of people in the group Returns: int: The row number that can accommodate the group, or -1 if no such row exists max_sequence_row = -1 max_sequence_length = 0 for i in range(n): current_sequence_length = 0 for j in range(m): if seating_chart[i][j] == 1: current_sequence_length += 1 else: current_sequence_length = 0 if current_sequence_length >= k and current_sequence_length > max_sequence_length: max_sequence_length = current_sequence_length max_sequence_row = i + 1 return max_sequence_row"},{"question":"You are given a string consisting of lowercase alphabets. You need to compress the string using the following algorithm: - For each consecutive group of the same character, replace it with the character followed by the frequency of that character group. - If the frequency of any group is 1, it should simply be replaced by the character without any frequency appended to it. Your task is to implement a function that takes this string and returns the compressed string. Function Signature: ```python def compress_string(s: str) -> str: pass ``` Input - A single line containing a string `s`. Output - A single line containing the compressed string. Constraints - 1 ≤ len(s) ≤ 10^5 SAMPLE INPUT aaabbccdee SAMPLE OUTPUT a3b2c2de2 Explanation For the input string \\"aaabbccdee\\", the consecutive groups of characters and their frequencies are: - `a` occurs 3 times consecutively, so it\'s replaced by `a3`. - `b` occurs 2 times consecutively, so it\'s replaced by `b2`. - `c` occurs 2 times consecutively, so it\'s replaced by `c2`. - `d` occurs 1 time, so it remains `d`. - `e` occurs 2 times consecutively, so it\'s replaced by `e2`. Thus, the final compressed string is \\"a3b2c2de2\\".","solution":"def compress_string(s: str) -> str: if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + (str(count) if count > 1 else \'\')) count = 1 compressed.append(s[-1] + (str(count) if count > 1 else \'\')) return \'\'.join(compressed)"},{"question":"Problem Rashmi is planning a small party where she wants to ensure that all of her friends are seated in a unique arrangement based on their birth month. Rashmi wants to group her friends by the birth month and then arrange those groups in a specific order. Each friend can be identified by a birth month, represented as an integer from 1 to 12. Rashmi\'s requirement is to group friends by their birth month in ascending order but in each month, the friends are arranged in descending order of their identification number. You are given the number of friends and their corresponding birth month and identification numbers. Your task is to print the birth month-wise grouping in the required order. Input The input consists of two lines. The first line contains a single integer N, the total number of friends. The next line contains N pairs of space-separated integers where the first integer in each pair is the birth month (m) and the second integer is the identification number (id). Output Output consists of 12 lines where each line contains the identification numbers of friends born in that month in the descending order. If there are no friends born in a particular month, leave the line empty. Constraints 1 ≤ N ≤ 1000 1 ≤ m ≤ 12 1 ≤ id ≤ 10^9 SAMPLE INPUT 5 3 101 5 102 3 103 1 104 2 105 SAMPLE OUTPUT 104 105 103 101 (empty line) 102 (empty line) (empty line) (empty line) (empty line) (empty line) (empty line) (empty line)","solution":"def arrange_friends(n, friends_data): months = {i: [] for i in range(1, 13)} for i in range(0, 2*n, 2): month = friends_data[i] id_num = friends_data[i+1] months[month].append(id_num) result = [] for month in range(1, 13): months[month].sort(reverse=True) result.append(\' \'.join(map(str, months[month]))) return result"},{"question":"Task: Your task is to write a function that calculates the sum of all positive numbers in a list that are palindromes. Description of edge cases: 1. If the list is empty, return 0. 2. If the list contains non-integer values, ignore those values. 3. If the list contains negative integers, ignore those values. 4. Handle very large numbers efficiently. What each parameter looks like: ```python type(lst) #=> list : a list of integers and/or other types type(sum_of_palindromes(lst)) #=> int ``` Some examples: ```python sum_of_palindromes([121, 12321, -121, 101, 44, 202, \\"hello\\"]) #=> 12768 (121 + 12321 + 101 + 202 + 44) sum_of_palindromes([1, 11, 22, 33, -33, \\"33\\", 3303]) #=> 3370 (1 + 11 + 22 + 33 + 3303) sum_of_palindromes([-121, \\"123\\", 123, 21, 0, 141, 232]) #=> 373 (141 + 232) sum_of_palindromes([]) #=> 0 ```","solution":"def sum_of_palindromes(lst): Returns the sum of all positive palindrome numbers in the list. def is_palindrome(n): str_n = str(n) return str_n == str_n[::-1] total = 0 for item in lst: if isinstance(item, int) and item > 0 and is_palindrome(item): total += item return total"},{"question":"Problem In a distant kingdom, there is a grand ziggurat where an ancient ritual is performed every night. The ziggurat is a stepped pyramid consisting of `N` levels. Each level has a certain number of mystical lights that light up in a sequence. You have been chosen to analyze the lights pattern to predict the number of lights that will be on at each level for any given night. The pattern of lights on each level `i (1 ≤ i ≤ N)` follows a mathematical series, with the number of lights on level `i` denoted as `Li`, formulated as: ``` Li = Ai * Bi^i ``` where `Ai` and `Bi` are positive integers associated with level `i`. Your task is to compute and output the total number of lights that will be on across all levels of the ziggurat. # Constraints The input meets the following conditions: - 1 ≤ N ≤ 10^3 - 1 ≤ Ai, Bi ≤ 100 # Input The first line contains an integer `N`, representing the number of levels of the ziggurat. The next `N` lines each contain two integers, `Ai` and `Bi`, representing the constants for the `i-th` level. # Output Output a single integer, the total number of lights that will be on across all levels of the ziggurat. # Examples Input ``` 3 2 3 1 2 4 1 ``` Output ``` 113 ``` Input ``` 2 1 2 3 1 ``` Output ``` 9 ``` # Explanation For the first example: - Level 1: L1 = 2 * 3^1 = 6 - Level 2: L2 = 1 * 2^2 = 4 - Level 3: L3 = 4 * 1^3 = 4 - Total lights = 6 + 4 + 4 = 14 For the second example: - Level 1: L1 = 1 * 2^1 = 2 - Level 2: L2 = 3 * 1^2 = 3 - Total lights = 2 + 3 = 5","solution":"def total_lights(N, levels): total = 0 for i in range(N): Ai, Bi = levels[i] total += Ai * (Bi ** (i + 1)) return total"},{"question":"In a bustling city, there are multiple parking lots, each with a limited number of parking spots. Throughout the day, various cars enter the city and each car will park in a lot that has an available spot. The goal is to maximize the usage of parking spots while ensuring that cars are distributed uniformly across the parking lots as evenly as possible. No car prefers any specific parking lot over another. Each parking lot has a fixed capacity, and the total number of cars that arrive in the city is known. You need to allocate parking spots in such a way that the number of cars parked in any two parking lots does not differ by more than one. Input Format The first line contains two integers: C is the number of cars L is the number of parking lots, separated by a single space The second line contains L integers: capacity_i is the number of parking spots in the i^{th} parking lot, separated by a single space Constraints 1 leq C leq 1000 1 leq L leq 50 1 leq capacity_i leq 100 The total number of parking spots will always be greater than or equal to the number of cars. Output Format Output C lines. Each line contains an integer representing the parking lot number (indexed from 1 to L) to which the i^{th} car goes. The assignments should ensure no parking lot has more than one car extra compared to any other occupied lot. Sample Input 10 3 5 5 5 Sample Output 1 2 3 1 2 3 1 2 3 1 Explanation There are 10 cars and 3 parking lots, each with a capacity of 5. Distributing cars uniformly and as evenly as possible: - Parking lot 1 receives cars 1, 4, 7, 10. - Parking lot 2 receives cars 2, 5, 8. - Parking lot 3 receives cars 3, 6, 9. Thus, the output allocates each car to a parking lot while maintaining the uniform distribution.","solution":"def allocate_parking_lots(cars, lots, capacities): allocation = [] car_count_per_lot = [0] * lots for i in range(cars): lot = i % lots allocation.append(lot + 1) car_count_per_lot[lot] += 1 return allocation"},{"question":"Write a program that simulates a simple in-memory filesystem supporting the following operations: - `mkdir path`: Create a directory at the specified `path`. The `path` will never contain spaces and always starts with a `/`. If any parent directories in the `path` do not exist, they should be created automatically. - `addContentToFile path content`: Add `content` to the end of the file at `path`. If the file does not exist, a new file should be created at the specified `path`. - `readContentFromFile path`: Read and return the content of the file at `path`. - `ls path`: Return a list of all directories and files under `path` in lexicographical order. If `path` is a file path, return a list containing the file name. Implement the following methods for your filesystem: ```python class FileSystem: def __init__(self): pass def mkdir(self, path: str) -> None: pass def addContentToFile(self, path: str, content: str) -> None: pass def readContentFromFile(self, path: str) -> str: pass def ls(self, path: str) -> List[str]: pass ``` # Constraints - The number of operations will not exceed 10,000. - The length of `path` will not exceed 100 characters. - The length of `content` will not exceed 1,000 characters. - Directory and file names consist only of lower-case English letters and digits. - You may assume all operations configured correctly, i.e., there will be no operation like `addContentToFile` on a non-existing file. # Example ```python fs = FileSystem() fs.mkdir(\\"/a/b/c\\") fs.addContentToFile(\\"/a/b/c/d\\", \\"hello\\") print(fs.readContentFromFile(\\"/a/b/c/d\\")) # output: \\"hello\\" fs.addContentToFile(\\"/a/b/c/d\\", \\" world\\") print(fs.readContentFromFile(\\"/a/b/c/d\\")) # output: \\"hello world\\" fs.mkdir(\\"/x/y/z\\") print(fs.ls(\\"/\\")) # output: [\\"a\\", \\"x\\"] print(fs.ls(\\"/a/b/c\\")) # output: [\\"d\\"] print(fs.ls(\\"/a/b/c/d\\")) # output: [\\"d\\"] ``` # Note 1. You need to handle all edge cases such as when the path does not exist or when paths with the trailing or no trailing slash are provided. 2. Optimize your insertion and search operations to handle up to the maximum constraint limits efficiently. 3. Ensure proper directory traversal and modification semantics as per the real-world I/O scenarios.","solution":"class FileSystem: def __init__(self): self.files = {} # to store file content self.dirs = {\'/\': set()} # to store directory structure def mkdir(self, path: str) -> None: parts = path.split(\'/\') current = \'/\' for part in parts[1:]: if part not in self.dirs[current]: self.dirs[current].add(part) new_path = current + (\'\' if current == \'/\' else \'/\') + part self.dirs[new_path] = set() current = current + (\'\' if current == \'/\' else \'/\') + part def addContentToFile(self, path: str, content: str) -> None: if path in self.files: self.files[path] += content else: self.files[path] = content parts = path.split(\'/\') directory = \'/\'.join(parts[:-1]) file_name = parts[-1] self.mkdir(directory) self.dirs[directory].add(file_name) def readContentFromFile(self, path: str) -> str: return self.files[path] def ls(self, path: str) -> list: if path in self.files: return [path.split(\'/\')[-1]] if path not in self.dirs: return [] return sorted(self.dirs[path])"},{"question":"Katie is tasked with organizing a coding competition. Each participant is allowed to choose between N different challenges to solve during the competition. However, to ensure the competition is fair, Katie decides to impose the following rule: No two participants can solve the same set of challenges. Katie wants to know how many unique sets of challenges participants can choose from if participants need to solve exactly K challenges out of the N available ones. Write a function to calculate the number of unique sets of challenges participants can choose from given N challenges and K challenges to be solved. Input Format: - The input consists of two integers, N and K, separated by a space. Output Format: - Output a single integer, the number of unique sets of challenges participants can choose. Constraints: - 0 leq K leq N leq 30 Sample Input #1: 5 3 Sample Output #1: 10 Sample Input #2: 6 0 Sample Output #2: 1 Explanation: - In the first sample, there are 5 challenges and each participant must choose exactly 3 of them. Hence, there are C(5, 3) = 10 unique sets of challenges. - In the second sample, there are 6 challenges but participants are not required to solve any, hence there is exactly 1 way to choose 0 challenges. Note that C(n, k) denotes the binomial coefficient, i.e., \\"n choose k\\", which can be calculated using the formula: [ C(n, k) = frac{n!}{k! cdot (n - k)!} ]","solution":"import math def unique_challenge_sets(N, K): Returns the number of unique sets of challenges participants can choose. if K == 0 or K == N: return 1 return math.comb(N, K)"},{"question":"You are given a binary tree with nodes having integer values, returns the length of the longest increasing path starting from the root node. The path must strictly increase in value from parent to child nodes. For Example: ``` class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } ``` Example 1: Input: ``` 1 / 2 3 ``` Output: 2 Explanation: The longest increasing path starts from node 1 and goes to node 2 or node 3. Example 2: Input: ``` 3 / 4 5 / 6 ``` Output: 3 Explanation: The longest increasing path starts from node 3 to node 4 and then to node 6. Your Task: You don\'t need to read the input or print anything. Your task is to complete the function `longestIncreasingPath(TreeNode root)` which takes the root of the binary tree as input and returns the length of the longest increasing path starting from the root node. Notes: - Each node value is guaranteed to be unique. - The returned integer represents the number of edges in the longest increasing path. Expected Time Complexity: O(N), where N is the number of nodes in the tree. Expected Auxiliary Space: O(H), where H is the height of the tree. Constraints: - The number of nodes in the binary tree is in the range [1, 10^4]. - -10^5 <= Node value <= 10^5.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def longestIncreasingPath(root): Given the root of a binary tree, returns the length of the longest increasing path starting from the root. if not root: return 0 def dfs(node, parent_val): if not node: return 0 left_length = dfs(node.left, node.val) right_length = dfs(node.right, node.val) return 1 + max(left_length, right_length) if node.val > parent_val else 0 # To start path including root return max(dfs(root, float(\'-inf\')) - 1, 0)"},{"question":"You are given an initially empty set and need to handle q queries of two types: * **Insert x** — add the integer x to the set. Each integer can only be added once. * **Median** — return the median of the current set of integers. The median of a set of integers is defined as follows: - If the number of elements in the set is odd, the median is the middle element when sorted in non-decreasing order. - If the number of elements in the set is even, the median is the average of the two middle elements when sorted in non-decreasing order. ---Input--- The first line contains an integer q (1 leq q leq 10^5) — the number of queries. The following q lines describe the queries. Each query is either of the form: * \\"insert x\\", where x (1 leq x leq 10^6) is the integer to add to the set. * \\"median\\", which requires you to output the median of the set. It is guaranteed that there will be at least one query of type \\"median\\". ---Output--- For each query of type \\"median\\", output a single number representing the median of the set. If the result is a non-integer, output it as a floating-point number with exactly one decimal place. ---Examples--- Input 6 insert 1 insert 2 median insert 3 median insert 4 median Output 1.5 2 2.5 Input 5 insert 5 insert 10 median insert 15 median Output 7.5 10","solution":"import bisect class MedianSet: def __init__(self): self.data = [] def insert(self, x): bisect.insort(self.data, x) def median(self): n = len(self.data) if n % 2 == 1: return float(self.data[n // 2]) else: return (self.data[n // 2 - 1] + self.data[n // 2]) / 2.0 def handle_queries(queries): results = [] median_set = MedianSet() for query in queries: if query.startswith(\\"insert\\"): _, x = query.split() x = int(x) median_set.insert(x) elif query == \\"median\\": results.append(f\\"{median_set.median():.1f}\\") return results"},{"question":"# Problem Statement You are given a grid with `R` rows and `C` columns. Each cell in the grid contains a non-negative integer. Your task is to process `K` queries on this grid. Each query gives you a subgrid defined by its top-left corner and bottom-right corner, and you need to calculate the sum of all integers in that subgrid. # Input The dataset is formatted as follows: ``` R C K grid_11 grid_12 ... grid_1C ... grid_R1 grid_R2 ... grid_RC query1_r1 query1_c1 query1_r2 query1_c2 ... queryK_r1 queryK_c1 queryK_r2 queryK_c2 ``` - The first line contains three integers `R` (1 ≤ R ≤ 500), `C` (1 ≤ C ≤ 500), and `K` (1 ≤ K ≤ 10^5). - The next `R` lines each contain `C` integers representing the grid, where `grid_ij` (0 ≤ grid_ij ≤ 10^9) is the integer in the `i`-th row and `j`-th column. - Each of the following `K` lines contains four integers `query_r1`, `query_c1`, `query_r2`, and `query_c2` (1 ≤ query_r1 ≤ query_r2 ≤ R, 1 ≤ query_c1 ≤ query_c2 ≤ C), which specify the top-left and bottom-right corners of the subgrid. # Output For each query, output the sum of integers within the specified subgrid. Each sum should be printed on a new line. # Sample Input 1 ``` 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 ``` # Sample Output 1 ``` 12 28 ``` # Explanation for Sample Input 1 The grid is: ``` 1 2 3 4 5 6 7 8 9 ``` For the first query (1, 1, 2, 2), the subgrid is: ``` 1 2 4 5 ``` The sum is `1 + 2 + 4 + 5 = 12`. For the second query (2, 2, 3, 3), the subgrid is: ``` 5 6 8 9 ``` The sum is `5 + 6 + 8 + 9 = 28`.","solution":"def compute_subgrid_sums(R, C, K, grid, queries): # Create prefix sum array prefix_sum = [[0] * (C + 1) for _ in range(R + 1)] for i in range(1, R + 1): for j in range(1, C + 1): prefix_sum[i][j] = grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] results = [] for q in queries: r1, c1, r2, c2 = q subgrid_sum = (prefix_sum[r2][c2] - prefix_sum[r1 - 1][c2] - prefix_sum[r2][c1 - 1] + prefix_sum[r1 - 1][c1 - 1]) results.append(subgrid_sum) return results # Example to run: # R, C, K = 3, 3, 2 # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # queries = [ # (1, 1, 2, 2), # (2, 2, 3, 3) # ] # print(compute_subgrid_sums(R, C, K, grid, queries)) # Output should be [12, 28]"},{"question":"In the Land of Codeia, there are multiple security checkpoints arranged in a line on a linear road. Each checkpoint keeps track of the number of high-value items found, and citizens are only allowed to carry a limited number of high-value items when passing through any checkpoint. You are given the total number of checkpoints `n` and the maximum allowed number of high-value items that can be carried through each checkpoint, `k`. Additionally, for each checkpoint, you are provided with an array containing the number of high-value items present at that checkpoint. Write a program to determine if it is possible for a citizen to pass through all the checkpoints without exceeding the allowable limit of high-value items at any point. Citizens may choose to discard any of their items at any checkpoint to stay within the limit. Input: The first line of input contains two integers `n` (1 ≤ n ≤ 1000) and `k` (1 ≤ k ≤ 1000), the number of checkpoints and the maximum allowed number of high-value items. The second line contains `n` integers where the i-th integer denotes the number of high-value items present at the i-th checkpoint. Output: Output \\"YES\\" if the citizen can pass through all the checkpoints without carrying more than `k` high-value items at any point. Otherwise, output \\"NO\\". Example Input: 5 3 1 2 3 4 2 Example Output: NO Example Input: 4 5 4 5 2 3 Example Output: YES","solution":"def can_pass_through_checkpoints(n, k, items): for item in items: if item > k: return \\"NO\\" return \\"YES\\""},{"question":"Given a string s consisting only of characters \'1\' and \'0\'. Return the maximum binary value you can get by flipping at most one bit (\'0\' to \'1\' or \'1\' to \'0\'). Example 1: Input: s = \\"1101\\" Output: \\"1111\\" Explanation: Flipping the first bit results in \\"0101\\". Flipping the second bit results in \\"1001\\". Flipping the third bit results in \\"1111\\". Flipping the fourth bit results in \\"1100\\". The maximum binary value is \\"1111\\". Example 2: Input: s = \\"0000\\" Output: \\"1000\\" Explanation: Flipping the first bit results in the maximum binary value. Example 3: Input: s = \\"1111\\" Output: \\"1111\\" Explanation: It is better not to apply any change. Constraints: 1 <= s.length <= 10^4 s consists of characters \'0\' or \'1\'.","solution":"def max_binary_value(s): Return the maximum binary value by flipping at most one bit. # Convert the string to a list for easier manipulation s_list = list(s) # Check if flipping a \'0\' to \'1\' can result in a larger value for i in range(len(s_list)): if s_list[i] == \'0\': s_list[i] = \'1\' break # Join and return the resulting binary string return \'\'.join(s_list)"},{"question":"You are given a string of characters, return the character that appears the most frequently. If there are multiple characters with the same highest frequency, return the lexicographically smallest one. Example `\\"abracadabra\\"` => `a` Example `\\"she sells sea shells\\"` => `s` Note: Assume the input string will contain at least one character. The string may contain spaces and special characters.","solution":"def most_frequent_char(s): Returns the character that appears the most frequently in the string `s`. If there are multiple characters with the same highest frequency, returns the lexicographically smallest one. from collections import Counter # Count the frequency of each character in the string freq_counter = Counter(s) # Find the maximum frequency max_freq = max(freq_counter.values()) # Find all characters with the maximum frequency most_frequent_chars = [char for char, freq in freq_counter.items() if freq == max_freq] # Return the lexicographically smallest character return min(most_frequent_chars)"},{"question":"Sum of Positive and Negative Numbers Given an array of integers, you need to return a tuple with two elements. The first element should be the sum of all the positive numbers in the array, and the second element should be the sum of all the negative numbers in the array. You can assume the array will not be empty. Examples ```python [1, -2, 3, 4, -5] --> (8, -7) [-10, -20, -30, 40, 50] --> (90, -60) [7, -3, 5, 6, -4] --> (18, -7) ``` The order of elements in the output tuple should be (sum_of_positive_numbers, sum_of_negative_numbers). Good luck! Happy coding!","solution":"def sum_of_positives_and_negatives(numbers): Returns a tuple where the first element is the sum of all positive numbers and the second element is the sum of all negative numbers in the given list. :param numbers: List of integers :return: Tuple (sum_of_positive_numbers, sum_of_negative_numbers) sum_pos = sum(n for n in numbers if n > 0) sum_neg = sum(n for n in numbers if n < 0) return (sum_pos, sum_neg)"},{"question":"A video game company is designing a new fantasy game that includes navigating through a series of rooms connected by doors. Each room can lead to multiple other rooms. The problem is to determine the shortest path for the hero to travel from the starting room to the treasure room. The rooms and connections between them are represented as a graph. Each room is a node, and each door is an edge connecting two nodes. Your task is to find the shortest path from the starting room to the treasure room using breadth-first search (BFS). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of rooms and m is the number of doors. The next line contains two integers s and t (1 ≤ s, t ≤ n), where s is the starting room and t is the treasure room. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), indicating that there is a door between rooms u and v. It is guaranteed that there is at least one path from the starting room to the treasure room. Output Print a single integer - the number of rooms in the shortest path from the starting room to the treasure room, including both the starting room and the treasure room. Examples Input 5 6 1 5 1 2 1 3 2 4 3 4 4 5 3 5 Output 3 Input 4 4 1 4 1 2 2 3 3 4 1 3 Output 3","solution":"from collections import deque def shortest_path(n, m, s, t, doors): Returns the shortest path from starting room s to the treasure room t. n: number of rooms m: number of doors s: starting room t: treasure room doors: list of tuples, where each tuple represents a door between two rooms # Initialize adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v in doors: graph[u].append(v) graph[v].append(u) # BFS initialization queue = deque([s]) visited = {i: False for i in range(1, n + 1)} distance = {i: float(\'inf\') for i in range(1, n + 1)} visited[s] = True distance[s] = 1 while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) distance[neighbor] = distance[current] + 1 if neighbor == t: return distance[neighbor] return distance[t]"},{"question":"You are given an array of integers and a target sum. Find the number of distinct pairs of indices (i, j) such that a_i + a_j = text{target} and i < j. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the array elements. The third line contains a single integer text{target} (-2 times 10^9 le text{target} le 2 times 10^9) — the target sum. -----Output----- Print the single integer — the number of distinct pairs that sum up to the target. -----Example----- Input 4 1 5 7 -1 6 Output 2 -----Note----- The pairs (1, 5) and (7, -1) sum up to 6. There are no other pairs that satisfy the condition.","solution":"def count_pairs_with_target_sum(n, arr, target): seen = {} pair_count = 0 for i in range(n): complement = target - arr[i] if complement in seen: pair_count += seen[complement] # add the number of times the complement has appeared if arr[i] in seen: seen[arr[i]] += 1 else: seen[arr[i]] = 1 return pair_count"},{"question":"There is an array of n integers which contains integers from 1 to n in a mixed order. Each integer appears exactly once, ranging from 1 to n. You are required to sort the array in ascending order using the minimum number of swap operations. Note that you can only swap the elements which are adjacent to each other. Your task is to write a program that determines the minimum number of swaps needed to sort the array. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of integers in the array. The second line contains n integers separated by spaces representing the elements of the array in mixed order. -----Output----- Print a single integer — the minimum number of adjacent swaps needed to sort the array in ascending order. -----Examples----- Input 3 3 2 1 Output 3 Input 5 5 4 3 2 1 Output 10 Input 4 4 3 2 1 Output 6 -----Note----- In the first test case, you can sort the array by the following swaps: - Swap the first two elements, resulting in [2, 3, 1] - Swap the first two elements, resulting in [2, 1, 3] - Swap the first two elements, resulting in [1, 2, 3] In the second test case, the series of swaps would be: - Swap 5 and 4, then 4 and 3, then 3 and 2, then 2 and 1 - Repeat this four more times, for a total of 10 swaps.","solution":"def minimum_adjacent_swaps_to_sort(arr): Returns the minimum number of adjacent swaps needed to sort the array. n = len(arr) sorted_arr = sorted(arr) swaps = 0 while arr != sorted_arr: for i in range(n - 1): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] swaps += 1 return swaps"},{"question":"A large company has several divisions, working on various independent projects. Each division maintains a structured project timeline under tight deadlines. The timeline has `n` milestones, numbered from 1 to `n`, and each milestone has a unique weight representing its importance. The Board has planned a downtime period of `k` days, during which all operations will be halted for essential maintenance. Unfortunately, this will delay the completion of milestones set during downtime. To minimize the impact, the Board wants to determine the minimum possible value of the heaviest milestone affected by the downtime. Each milestone falls under one of the following three types of queries: 1. Update the weight of a given milestone. 2. Query the heaviest milestone within a specified range of days. 3. Start downtime on a specified day and determine the minimum possible value of the heaviest milestone that will be delayed. Please help the board achieve this by answering their urgent queries efficiently. Input The first line contains three integers n, k, and q (1 ≤ k ≤ n ≤ 200000, 1 ≤ q ≤ 200000) representing the number of milestones, the downtime duration, and the number of queries, respectively. Each of the next q lines contains one of the following types of queries: * 1 di wi (1 ≤ di ≤ n, 1 ≤ wi ≤ 1000000), indicating an update of the weight of milestone `di` to `wi`. * 2 li ri (1 ≤ li ≤ ri ≤ n), representing a query asking for the heaviest milestone within the range `[li, ri]`. * 3 si (1 ≤ si ≤ n - k + 1), indicating a planned downtime starting from day `si`. Output For each query of type 3, print the minimum possible value of the heaviest milestone that will be delayed due to downtime. Examples Input 5 2 7 1 1 5 1 3 4 1 4 2 1 5 7 2 2 5 3 2 3 1 Output 4 5 Explanation Consider the example input: 1. The first milestone is updated to 5. 2. The third milestone is updated to 4. 3. The fourth milestone is updated to 2. 4. The fifth milestone is updated to 7. 5. The heaviest milestone from day 2 to day 5 is milestone 5 with weight 7. 6. When downtime starts on day 2 for 2 days, the heaviest affected milestone is on day 3 with weight 4. Hence, the minimum value of the heaviest delayed milestone is 4. 7. When downtime starts on day 1 for 2 days, the heaviest affected milestone is on day 2 with weight 5. So the minimum value of the heaviest delayed milestone is 5.","solution":"def milestone_management(n, k, queries): import heapq milestones = [0] * (n + 1) max_seg_tree = [0] * (4 * (n + 1)) def build(start, end, node): if start == end: max_seg_tree[node] = milestones[start] else: mid = (start + end) // 2 build(start, mid, 2 * node) build(mid + 1, end, 2 * node + 1) max_seg_tree[node] = max(max_seg_tree[2 * node], max_seg_tree[2 * node + 1]) def update(index, value, start, end, node): if start == end: milestones[index] = value max_seg_tree[node] = value else: mid = (start + end) // 2 if start <= index <= mid: update(index, value, start, mid, 2 * node) else: update(index, value, mid + 1, end, 2 * node + 1) max_seg_tree[node] = max(max_seg_tree[2 * node], max_seg_tree[2 * node + 1]) def query(l, r, start, end, node): if l > end or r < start: return -1 # Min will be ignored if l <= start and end <= r: return max_seg_tree[node] mid = (start + end) // 2 left_query = query(l, r, start, mid, 2 * node) right_query = query(l, r, mid + 1, end, 2 * node + 1) return max(left_query, right_query) build(1, n, 1) results = [] for query_type, *params in queries: if query_type == 1: di, wi = params update(di, wi, 1, n, 1) elif query_type == 2: li, ri = params results.append(query(li, ri, 1, n, 1)) elif query_type == 3: si, = params downtime_end = si + k - 1 heaviest_during_downtime = query(si, downtime_end, 1, n, 1) results.append(heaviest_during_downtime) return results"},{"question":"You are given an integer array and a target sum. Determine if there exist two distinct integers in the array such that their sum is equal to the target sum. Return \\"YES\\" if such a pair exists, otherwise return \\"NO\\". INPUT: The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line of a test case contains two integers n (size of the array) and k (target sum). The second line contains n space-separated integers representing the array. OUTPUT: For each test case, print \\"YES\\" if there are two distinct integers in the array whose sum is equal to the target sum, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 100000 2 ≤ n ≤ 100000 -100000 ≤ array[i] ≤ 100000 -200000 ≤ k ≤ 200000 SAMPLE INPUT: 2 5 9 2 7 11 15 1 3 4 0 1 2 SAMPLE OUTPUT: YES YES Explanation: In the first test case, the sum of 2 and 7 is 9. In the second test case, the sum of 1 and 3 is 4.","solution":"def find_pair_with_sum(arr, target): Function to determine if there exist two distinct integers in the array such that their sum is equal to the target sum. Returns \'YES\' if such a pair exists, otherwise \'NO\'. seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def process_test_cases(T, test_cases): Process multiple test cases and return the result for each test case. results = [] for case in test_cases: n, k, array = case results.append(find_pair_with_sum(array, k)) return results"},{"question":"Given a directed graph with N nodes and M edges, determine if there exists a path in the graph that visits each node exactly once (i.e., a Hamiltonian path). A Hamiltonian path in a graph is a path that visits each vertex exactly once. Input The input is given from Standard Input in the following format: N M u1 v1 u2 v2 ... uM vM Where the first line contains two integers N (1 ≤ N ≤ 20) and M (0 ≤ M ≤ 400) which represent the number of nodes and edges in the graph, respectively. Each of the next M lines contains two integers ui and vi (1 ≤ ui, vi ≤ N) which represent a directed edge in the graph from node ui to node vi. There may be multiple edges between the same nodes. Output Print \\"YES\\" if there exists a Hamiltonian path in the graph, and \\"NO\\" otherwise. Examples Input 4 4 1 2 2 3 3 4 4 1 Output YES Input 4 3 1 2 2 3 3 2 Output NO Input 4 6 1 2 2 3 3 4 4 1 1 3 2 4 Output YES","solution":"def has_hamiltonian_path(n, m, edges): from itertools import permutations # Create adjacency matrix adj = [[0] * n for _ in range(n)] for u, v in edges: adj[u-1][v-1] = 1 # Try every permutation of the vertices for perm in permutations(range(n)): valid = True for i in range(n - 1): if adj[perm[i]][perm[i + 1]] == 0: valid = False break if valid: return \\"YES\\" return \\"NO\\" # Reading input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [(int(data[2 + 2 * i]), int(data[3 + 2 * i])) for i in range(M)] print(has_hamiltonian_path(N, M, edges)) if __name__ == \'__main__\': main()"},{"question":"Leah is a renowned puzzle enthusiast who hosts regular online competitions. For one of her latest competitions, she designed a puzzle consist of a sequence of integers containing both positive and negative numbers. In this puzzle, participants are challenged to find the maximum sum of any non-empty subarray (contiguous subsequence) within the sequence. To formalize the problem, let\'s denote the sequence as an array `A` of `n` integers. Participants need to determine the maximum sum achievable by a subarray of `A`. A subarray is defined as a contiguous part of an array. For example, for the array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the maximum sum of any subarray is `6`, which is obtained by the subarray `[4, -1, 2, 1]`. Your task is to write a program that helps Leah to validate participants\' submissions by computing the maximum subarray sum for a given sequence of integers. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) denoting the number of integers in the sequence. The second line contains `n` space-separated integers `A_1, A_2, ..., A_n` (-10^4 ≤ A_i ≤ 10^4) representing the sequence of integers. Output Print a single integer representing the maximum sum of any non-empty subarray of the given sequence. Example Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6","solution":"def max_subarray_sum(nums): Computes the maximum sum of any non-empty subarray in the given list of integers. current_max = nums[0] global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) if current_max > global_max: global_max = current_max return global_max # Example usage: # n = int(input()) # nums = list(map(int, input().strip().split())) # print(max_subarray_sum(nums))"},{"question":"You are given an integer array `nums` and an integer `k`. A number is considered a \\"peak\\" if it is greater than its neighbors. You need to find the `k`th peak in the array according to their order of appearance. However, if the array has fewer than `k` peaks, return `-1`. A peak is defined as an element of the array that is strictly greater than its immediate neighbors. For example, given an array `nums = [1, 3, 2, 4, 5, 2, 1]`, the peaks are `nums[1] = 3` and `nums[4] = 5`. -----Input----- The first line contains the single integer `t` (1 le t le 1000) — the number of test cases. The first line of each test case contains an integer `n` (1 le n leq 10^5) — the length of the array. The second line of each test case contains `n` integers (1 leq nums[i] leq 10^9) — the elements of the array. The third line of each test case contains a single integer `k` (1 le k le n). It is guaranteed that the sum of all `n` over all test cases does not exceed `10^6`. -----Output----- For each test case, print the `k`th peak in the array if it exists, otherwise print `-1`. -----Examples----- Input 3 7 1 3 2 4 5 2 1 1 6 1 2 3 4 3 2 2 5 5 4 3 2 1 1 Output 3 -1 -1 -----Note----- In the first test case, the peaks are `3` and `5`. The first peak is `3`, so the output is `3`. In the second test case, the only peak is `4`. Since there is no second peak, the output is `-1`. In the third test case, there are no peaks, so the output is `-1`.","solution":"def find_kth_peak(nums, k): Finds the kth peak in the array nums. A peak is defined as an element that is strictly greater than its immediate neighbors. Returns the kth peak if it exists, otherwise returns -1. # Initialize list to store peaks peaks = [] # Traverse the array to find peaks n = len(nums) for i in range(1, n-1): if nums[i] > nums[i-1] and nums[i] > nums[i+1]: peaks.append(nums[i]) # Check if we have k peaks if len(peaks) >= k: return peaks[k-1] else: return -1 def process_test_cases(test_cases): results = [] for nums, k in test_cases: result = find_kth_peak(nums, k) results.append(result) return results"},{"question":"Alice is training for a running competition. She runs every day and logs her running speed in km/hr for each day. After several days of logging, she wants to find out the maximum average speed she can achieve over any consecutive k days. Your task is to write a program that, given an array of her running speeds and an integer k, calculates the maximum average speed over any consecutive k days. -----Input----- The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 1000) - the number of days Alice logs her speed and the number of consecutive days to consider for the average speed calculation. The second line contains n space-separated integers representing Alice\'s running speed in km/hr for each of the n days. -----Output----- Print the maximum average speed Alice can achieve over any consecutive k days, rounded to 2 decimal places. -----Example----- Input 7 3 1 12 5 2 8 7 10 Output 8.33 Input 5 2 3 1 9 5 6 Output 7.50 -----Note----- In the first example, the maximum average speed over any consecutive 3 days is (2 + 8 + 7) / 3 = 17 / 3 = 5.67. In the second example, the maximum average speed over any consecutive 2 days is (9 + 5) / 2 = 14 / 2 = 7.00.","solution":"def max_average_speed(n, k, speeds): Returns the maximum average speed Alice can achieve over any consecutive k days. :param n: Total number of days of speed logs :param k: Number of consecutive days to consider :param speeds: List of running speeds for each day :return: Maximum average speed rounded to 2 decimal places max_avg = float(\'-inf\') for i in range(n - k + 1): current_sum = sum(speeds[i:i+k]) current_avg = current_sum / k if current_avg > max_avg: max_avg = current_avg return round(max_avg, 2)"},{"question":"You are given a city grid with dimensions M x N, where each cell represents a house, a park, or is empty. You\'re planning to place a single fire station on one of these cells. Your goal is to minimize the maximum distance from any house to the nearest fire station. The distance between two cells (i1, j1) and (i2, j2) is defined as |i1 - i2| + |j1 - j2|. -----Constraints----- - 1 leq M, N leq 50 - Each cell in the grid is either 0 (empty), 1 (house), or 2 (park). - There is at least one house in the grid. -----Input----- Input is given from Standard Input in the following format: M N grid_1_1 grid_1_2 ... grid_1_N . . grid_M_1 grid_M_2 ... grid_M_N -----Output----- Print the minimum possible maximum distance from any house to the nearest fire station. -----Sample Input----- 3 3 1 0 2 0 0 0 2 0 1 -----Sample Output----- 2","solution":"def min_max_distance_to_fire_station(M, N, grid): Finds the minimum possible maximum distance from any house to the nearest fire station. Parameters: M (int): number of rows in the grid. N (int): number of columns in the grid. grid (list[list[int]]): MxN grid where each cell is 0 (empty), 1 (house), or 2 (park). Returns: int: minimum possible maximum distance from any house to the nearest fire station. from collections import deque # List of all houses in the grid houses = [(i, j) for i in range(M) for j in range(N) if grid[i][j] == 1] def bfs(houses, fire_station): Helper function to calculate the maximum distance from any house to the given fire station using BFS. Parameters: houses (list[tuple[int, int]]): list of coordinates of all houses. fire_station (tuple[int, int]): coordinates of the fire station. Returns: int: maximum distance from any house to the fire station. max_distance = 0 # Initialize maximum distance # Perform BFS for each house for house in houses: # Compute the Manhattan distance from fire station to current house distance = abs(fire_station[0] - house[0]) + abs(fire_station[1] - house[1]) max_distance = max(max_distance, distance) # Update the maximum distance return max_distance min_max_distance = float(\'inf\') # Evaluate each empty cell to be the possible place for the fire station for i in range(M): for j in range(N): if grid[i][j] == 0: # This cell is empty max_distance = bfs(houses, (i, j)) min_max_distance = min(min_max_distance, max_distance) return min_max_distance # Example usage (Commented out for testing purposes) # M, N = 3, 3 # grid = [ # [1, 0, 2], # [0, 0, 0], # [2, 0, 1] # ] # print(min_max_distance_to_fire_station(M, N, grid)) # Output: 2"},{"question":"Alan is attending a music workshop where he is learning to compose simple melodies. Alan\'s instructor gives him a sequence of musical notes in the form of a string. The string consists of lowercase Latin letters where each letter represents a specific musical note. For example, \\"abc\\" might represent the melody A-B-C. The instructor challenges Alan with a task: Find the length of the longest sequence of consecutive notes in the melody where each note is strictly greater than the previous note in terms of their ASCII values. The notes do not have to be contiguous in the original string, only the order must be preserved. For example, for the string \\"abcaebd\\", the subsequence \\"abcd\\" (corresponding to A-B-C-D) is the longest sequence of increasing notes. Help Alan by writing a program to determine the length of the longest increasing subsequence of notes. # Input - The input is a string `melody` (1 ≤ |melody| ≤ 1000) — the sequence of musical notes. # Output - Print one integer — the length of the longest increasing subsequence of notes in the given melody. # Examples Input ``` abcaebd ``` Output ``` 4 ``` Input ``` zyxwv ``` Output ``` 1 ``` # Note In the first example, the longest increasing subsequence is \\"abcd\\" which has a length of 4. In the second example, there are no increasing sequences longer than 1, so the output is 1.","solution":"def longest_increasing_subsequence(melody): Returns the length of the longest increasing subsequence of notes in the given melody. if not melody: return 0 n = len(melody) lis = [1] * n for i in range(1, n): for j in range(i): if melody[i] > melody[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Write a function that takes a list of tuples representing 2D points on a plane, and returns the tuple that is closest to the origin (0,0). # Inputs: A list of tuples `points`, where each tuple contains two integers representing the x and y coordinates of a point on the plane. The list is guaranteed to have at least one point. # Outputs: A tuple representing the point that is closest to the origin. If there are multiple points at the same distance from the origin, return any one of them. # Example: ```python points = [(1, 2), (3, 4), (-1, -1), (0, 5)] closest_point(points) ``` Output: ```python (-1, -1) ``` # Note: - To calculate the distance of a point (x, y) from the origin (0,0), use the Euclidean distance formula `sqrt(x^2 + y^2)`. However, since the square root function is monotonic, you can avoid computing the square root and compare the squared distances instead to determine the closest point.","solution":"def closest_point(points): Returns the tuple that is closest to the origin (0, 0) using Euclidean distance. return min(points, key=lambda point: point[0]**2 + point[1]**2)"},{"question":"Given an integer array `arr` and an integer `target`, write a function to determine if there are two distinct indices `i` and `j` in the array such that `arr[i] + arr[j]` equals `target`. If such indices exist, return them as a pair `[i, j]`. If there are multiple pairs, return any one of them. If no such pair exists, return `None`. # Function Signature ```python def find_pair(arr: List[int], target: int) -> Optional[List[int]]: ``` # Input - arr: a list of integers, where `1 <= len(arr) <= 10^4` and `-10^3 <= arr[i] <= 10^3` - target: an integer, `-10^3 <= target <= 10^3` # Output - A list with two integers representing the indices of the two numbers whose sum equals the target. - If no such pair exists, return `None`. # Examples Example 1 ```python # Given input arr = [2, 7, 11, 15] target = 9 # Possible output since arr[0] + arr[1] == 9 [0, 1] ``` Example 2 ```python # Given input arr = [1, 2, 3, 4, 5] target = 10 # Possible output since no two indices make the sum 10 None ``` # Constraints 1. You may use a dictionary to keep track of the indices of the elements. 2. Your solution should have a time complexity of roughly O(n).","solution":"from typing import List, Optional def find_pair(arr: List[int], target: int) -> Optional[List[int]]: Finds two distinct indices i and j in the array such that arr[i] + arr[j] equals the target. Parameters: arr (List[int]): The input array of integers. target (int): The target integer. Returns: Optional[List[int]]: A list containing indices [i, j] if a pair is found, otherwise None. idx_map = {} for i, num in enumerate(arr): complement = target - num if complement in idx_map: return [idx_map[complement], i] idx_map[num] = i return None"},{"question":"You are given a list of n students\' grades, where each student\'s grade is a number between 0 and 100 inclusive. Your task is to determine how many students will pass a class based on a given threshold passing grade. A student is considered to pass if their grade is equal to or greater than the passing grade. You will be given multiple queries, where each query asks for the number of students passing the class based on a specific passing grade. -----Input----- The first line contains a single integer n (1 leq n leq 10^5), the number of students. The second line contains n integers representing the grades of the students. Each integer is between 0 and 100. The third line contains a single integer q (1 leq q leq 10^4), the number of queries. Each of the next q lines contains one integer p (0 leq p leq 100), representing a passing grade. -----Output----- For each of the q queries, output a single integer: the number of students whose grades are greater than or equal to the passing grade for that query. -----Examples----- Sample Input: 5 50 75 90 60 85 3 60 80 50 Sample Output: 4 2 5","solution":"def count_passing_students(n, grades, q, queries): Returns a list of counts of passing students for each query. :param n: int - number of students :param grades: list of int - list of grades of the students :param q: int - number of queries :param queries: list of int - list of passing grade queries :return: list of int - list of counts of passing students for each query passing_counts = [] # Sort grades to utilize binary search for efficient counting grades.sort() for passing_grade in queries: count = len(grades) - bisect_left(grades, passing_grade) passing_counts.append(count) return passing_counts # Helper function for binary search from bisect import bisect_left"},{"question":"You have a game where you need to navigate through a grid filled with obstacles with minimal steps. The grid is represented by an N x M matrix of zeroes and ones, where zero represents an empty cell, and one represents an obstacle. The starting point is always at the top-left corner of the grid (0, 0) and the destination point is always at the bottom-right corner of the grid (N-1, M-1). You can move up, down, left, or right, but you cannot move diagonally and you cannot pass through cells with obstacles. Write a program that determines the minimum number of steps required to reach the destination. If there is no possible way to reach the destination, return -1. INPUT FORMAT: Line 1: Two integers N and M representing the dimensions of the grid. Line 2 to N+1: N lines containing M integers each (0 or 1) representing the grid. CONSTRAINTS: 2 ≤ N, M ≤ 1000 OUTPUT FORMAT: Line 1: Minimum number of steps to reach the destination, or -1 if it is not possible. SAMPLE INPUT: 5 5 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 SAMPLE OUTPUT 8","solution":"from collections import deque def min_steps_to_reach_destination(N, M, grid): Function to find the minimum number of steps required to reach the destination from the top-left corner in a grid with obstacles. if grid[0][0] == 1 or grid[N-1][M-1] == 1: return -1 directions = [(-1,0), (1,0), (0,-1), (0,1)] # Up, Down, Left, Right queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if (r, c) == (N-1, M-1): return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return -1"},{"question":"Given an array of positive integers representing the amounts of money of house robbers, return the maximum amount of money you can rob tonight without alerting the police. The constraint is that adjacent houses have a connected security system, so robbing two consecutive houses will trigger the alarm. Example 1: Input: [2, 3, 2] Output: 3 Explanation: Rob house 1 (money = 2) and house 3 (money = 2), total amount = 2 + 2 = 4. Example 2: Input: [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 (money = 1) and house 3 (money = 3), total amount = 1 + 3 = 4. Note: - The length of input array will be in the range [1, 100]. - Each element in the array will be in the range [0, 1000].","solution":"def rob(nums): Returns the maximum amount of money you can rob without alerting the police. if not nums: return 0 if len(nums) <= 2: return max(nums) def rob_linear(nums): Helper function to calculate the maximum amount of money that can be robbed from a linear arrangement of houses. prev = curr = 0 for num in nums: prev, curr = curr, max(prev + num, curr) return curr # Since the houses are in a circle, we need to consider two cases: # 1. Rob houses from index 0 to n-2 # 2. Rob houses from index 1 to n-1 return max(rob_linear(nums[:-1]), rob_linear(nums[1:]))"},{"question":"Imagine you are working as an archeologist, and you are exploring a grid map of an ancient city that is represented by an `m x n` matrix. Each cell in this matrix can either be land (`1`) or water (`0`). You need to identify the number of distinct islands present in this grid map. An island is formed by connecting adjacent land cells horizontally or vertically. Note that each cell in the grid belongs to exactly one island or water. Write a program to determine the number of distinct islands in the given matrix. # Input - The first line contains two integers `m` and `n` (`1 <= m, n <= 1000`), which are the dimensions of the grid matrix. - The next `m` lines each contain `n` characters (`0` or `1`), representing the grid map. # Output - A single integer representing the number of distinct islands. # Example Input ``` 4 5 11000 11000 00100 00011 ``` Output ``` 3 ``` Input ``` 3 3 111 010 111 ``` Output ``` 1 ``` # Note In the first example, there are 3 distinct islands: 1. The top-left island formed by the first two rows. 2. The island at the center of the third row. 3. The island at the bottom-right corner. In the second example, there is only one large island that spans almost the entire grid.","solution":"def num_islands(m, n, grid): Returns the number of distinct islands in the given grid. :param m: Number of rows in the grid. :param n: Number of columns in the grid. :param grid: 2D list representing the grid where \'1\' is land and \'0\' is water. :return: Number of distinct islands. def dfs(x, y): if x < 0 or y < 0 or x >= m or y >= n or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark the cell as visited # Visit all adjacent cells (UP, DOWN, LEFT, RIGHT) dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) # Initialize count for distinct islands count = 0 # Loop through every cell in the grid for i in range(m): for j in range(n): if grid[i][j] == \'1\': # Found an unvisited land cell dfs(i, j) # Visit all cells connected to this one count += 1 # Increase the island count return count"},{"question":"Given a string `S` and a character `ch`, write a function that returns the smallest possible lexicographical string by removing exactly one occurrence of the character `ch` from `S`. If the character `ch` doesn\'t exist in the string, return the original string. **Example 1:** ``` Input: S = \\"abcabc\\", ch = \'b\' Output: \\"abcac\\" Explanation: Removing the first \'b\' gives \\"abcac\\" which is the smallest lexicographical string. ``` **Example 2:** ``` Input: S = \\"bbbaa\\", ch = \'b\' Output: \\"bbaa\\" Explanation: Removing the first \'b\' gives \\"bbaa\\" which is the smallest lexicographical string. ``` **Example 3:** ``` Input: S = \\"abcdefgh\\", ch = \'z\' Output: \\"abcdefgh\\" Explanation: Since \'z\' is not present in the string, the original string is returned. ``` Your Task: Complete the function `remove_and_minimize()` which takes two arguments `S` (a string) and `ch` (a character) and returns the resultant smallest lexicographical string. Expected Time Complexity: O(n), where n is the length of the string S. Expected Auxiliary Space: O(1). **Constraints:** - 1 ≤ length of S ≤ 1000 - S contains only lowercase English letters. - ch is a lowercase English letter.","solution":"def remove_and_minimize(S, ch): Returns the smallest possible lexicographical string by removing exactly one occurrence of the character `ch` from `S`. If the character `ch` doesn\'t exist in the string, return the original string. # Try to find the first occurrence of the character `ch` in `S` index = S.find(ch) if index == -1: # If ch is not found, return the original string return S # Try removing each occurrence of `ch` and store the resulting string smallest_str = None for i in range(len(S)): if S[i] == ch: new_str = S[:i] + S[i+1:] if smallest_str is None or new_str < smallest_str: smallest_str = new_str return smallest_str"},{"question":"You are given two strings S and T. Transform string S into string T by performing the following operations any number of times: 1. Remove a character from S. 2. Insert a character at any position in S. Find the minimum number of operations required to transform S into T. ------ Input Format ------ - The first line contains a single integer M — the number of test cases. Then the test cases follow. - Each of the next M lines contains two space-separated strings S and T. ------ Output Format ------ For each test case, output the minimum number of operations required to transform S into T. ------ Constraints ------ 1 ≤ M ≤ 100 1 ≤ |S|, |T| ≤ 1000 ------ Sample Input 1 ------ 3 horse roses intention execution abc abc ------ Sample Output 1 ------ 3 5 0 ------ Explanation 1 ------ In the first test case, \\"horse\\" can be transformed into \\"roses\\" in 3 operations: remove \'h\', replace \'h\' by \'r\' (insert \'r\' and remove \'h\'), and replace \'e\' by \'s\' (insert \'s\' and remove \'e\'). In the second test case, \\"intention\\" can be transformed into \\"execution\\" in 5 operations: replaces \'i\' by \'e\', insert \'x\' after \'i\', and replace \'n\' by \'c\', remove \'t\', insert \'c\' after \'c\'. In the third test case, \\"abc\\" is already equal to \\"abc\\". So, no operations are needed. Therefore, the answer is 0.","solution":"def min_operations_to_transform(S, T): Returns the minimum number of operations required to transform string S into string T. m, n = len(S), len(T) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[m][n] def process_test_cases(test_cases): results = [] for S, T in test_cases: results.append(min_operations_to_transform(S, T)) return results"},{"question":"# Preface A logistics company needs help optimizing its delivery routes. The company has multiple warehouses and each warehouse has its own distinct list of delivery locations for a day. All warehouses are connected through a grid layout of streets, where the delivery trucks can move horizontally or vertically. Due to recent budget cuts, the company can only afford to operate one warehouse each day to cover as many deliveries as possible with the least travel distance for the trucks. # Problem The objective is to determine which warehouse should be operational on a given day in order to minimize the total travel distance from the warehouse to all assigned delivery locations. The location of each warehouse is given as an array with each object containing a unique warehouse id and its x and y coordinates: ```python warehouses = [{\\"id\\": 1, \\"x\\": 3, \\"y\\": 2}, {\\"id\\": 2, \\"x\\": 8, \\"y\\": 6}, ...] ``` The delivery locations assigned to each warehouse on a specific day are given as a separate list of coordinates for each warehouse: ```python delivery_locations = { 1: [[5,5],[3,6],[7,8], ...], 2: [[8,9],[2,3],[4,5], ...], ... } ``` Your task is to evaluate which warehouse should be operational to minimize the total traveling distance for the trucks to all delivery locations assigned to that warehouse. The desired output should be a string that identifies the id of the optimal warehouse and its coordinates, in the following format: ``` \\"The optimal warehouse is number 1 with the coordinates x = 3 and y = 2\\" ```","solution":"def total_distance(warehouse, locations): Calculate the total Manhattan distance from the warehouse to all delivery locations. warehouse_x, warehouse_y = warehouse[\\"x\\"], warehouse[\\"y\\"] return sum(abs(warehouse_x - loc[0]) + abs(warehouse_y - loc[1]) for loc in locations) def find_optimal_warehouse(warehouses, delivery_locations): min_distance = float(\'inf\') optimal_warehouse = None for warehouse in warehouses: warehouse_id = warehouse[\\"id\\"] if warehouse_id in delivery_locations: distance = total_distance(warehouse, delivery_locations[warehouse_id]) if distance < min_distance: min_distance = distance optimal_warehouse = warehouse return f\'The optimal warehouse is number {optimal_warehouse[\\"id\\"]} with the coordinates x = {optimal_warehouse[\\"x\\"]} and y = {optimal_warehouse[\\"y\\"]}\'"},{"question":"A farmer has a peculiar rectangular plot of land. The plot is divided into a grid of cells, with each cell being either fertile or infertile. The farmer wants to plant crops in the largest square sub-grid consisting only of fertile cells. Your task is to determine the area of the largest such square sub-grid. -----Input----- - The first line contains two integers, N and M, denoting the number of rows and the number of columns of the grid, respectively. - Each of the next N lines contains a string of M characters, where each character is either \'.\' (indicating a fertile cell) or \'#\' (indicating an infertile cell). -----Output----- Output a single integer, the area of the largest square sub-grid consisting only of fertile cells. -----Constraints----- - 1 ≤ N, M ≤ 1000 -----Example----- Input: 5 6 ...# .#.. #... .#.... ..#. Output: 4 -----Explanation----- In the given example, the largest sub-grid consisting only of fertile cells (\'.\') is 2x2 (formed by the cells in the bottom-left corner: (4,1), (4,2), (5,1), (5,2)). Therefore, the area of this sub-grid is 2*2 = 4.","solution":"def largest_square_subgrid(n, m, grid): Given a grid of size n x m consisting of \'.\' (fertile) and \'#\' (infertile) cells, finds the area of the largest square sub-grid consisting only of fertile cells. if n == 0 or m == 0: return 0 # Initialize a 2D DP array to store the size of the largest square sub-grid ending at each cell dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) # The area of the largest square sub-grid is the square of its side length return max_side * max_side"},{"question":"The kingdom of Alberon is famous for its gigantic chessboard that spans miles. The board is an `N x N` grid, where `N` is always even. Recently, the king has issued a decree to paint the board in a special way for an upcoming festival. The rules for painting the grid are: 1. Each cell of the grid can be either black (\'B\') or white (\'W\'). 2. No two adjacent cells (sharing an edge) should have the same color. Imagine you are tasked with finding the number of possible ways to paint this `N x N` grid following these rules. Your output should be the number of valid painting configurations modulo `10^9 + 7`. Input - A single integer `N` (2 ≤ N ≤ 100), denoting the size of the grid. Output - A single integer representing the number of valid ways to paint the `N x N` grid, modulo `10^9 + 7`. Example Input 4 Output 4 Explanation: For a `4 x 4` grid, there are 4 valid ways to paint the grid: 1. Alternating starting with \'B\' in the top-left corner. 2. Alternating starting with \'W\' in the top-left corner. 3. A different alternating pattern starting with \'B\' in the top-left corner. 4. A different alternating pattern starting with \'W\' in the top-left corner. Note: - You are required to write an efficient algorithm to solve the problem, considering the upper limits of `N`.","solution":"MOD = 10**9 + 7 def num_of_ways_to_paint_grid(N): Returns the number of valid ways to paint the N x N grid modulo 10^9 + 7. # The number of valid configurations for any NxN grid with N being even is always 2. # There are only two valid patterns: # 1) Checkerboard pattern with \'B\' starting at (0,0) # 2) Checkerboard pattern with \'W\' starting at (0,0) return 2"},{"question":"Task You are given an array of positive integers and an integer `k`. Your task is to find the length of the longest subarray where the sum of the elements is less than or equal to `k`. # Example For `nums = [1, 2, 3, 4, 5]` and `k = 11`, the result should be `4`. The longest subarray where the sum of the elements is less than or equal to `11` is `[1, 2, 3, 4]` with a length of `4`. For `nums = [5, 1, 3, 2, 6]` and `k = 8`, the result should be `3`. The longest subarray where the sum of the elements is less than or equal to `8` is `[5, 1, 2]` or `[1, 3, 2]` with a length of `3`. # Input/Output - `[input]` array of integers `nums` An array of positive integers, `1 ≤ nums.length ≤ 1000`, `1 ≤ nums[i] ≤ 1000`. - `[input]` integer `k` An integer, `1 ≤ k ≤ 10^6`. - `[output]` an integer The length of the longest subarray where the sum of the elements is less than or equal to `k`.","solution":"def longest_subarray_with_sum_at_most_k(nums, k): Returns the length of the longest subarray where the sum of elements is less than or equal to k. max_length = 0 current_sum = 0 start = 0 for end in range(len(nums)): current_sum += nums[end] while current_sum > k: current_sum -= nums[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Alice is orchestrating a relay race event and needs to keep track of the participation status of each runner. Initially, all runners are marked as not participating. Alice needs to perform different types of operations to update and query the participation status of the runners. The runners are organized in a line, and each runner is numbered from 1 to n. Alice can perform three types of operations: 1. Mark runner p and all runners behind them (inclusive) as participating. 2. Mark runner p and all runners ahead of them (inclusive) as not participating. 3. Check if runner p is participating. Your task is to simulate these operations and provide the results for each type 3 operation. Input: The first line of the input contains an integer n (1 ≤ n ≤ 500000) — the number of runners. The second line contains an integer q (1 ≤ q ≤ 500000) — the number of operations. Each of the following q lines contains two space-separated numbers ci (1 ≤ ci ≤ 3), pi (1 ≤ pi ≤ n), where ci is the operation type (according to the numbering given in the statement), and pi is the runner on which the operation is performed. Output: For each type 3 operation print 1 on a separate line if the runner is participating, and 0 if the runner is not participating. Print the answers to queries in the order in which the queries are given in the input. Example: Input: 6 8 1 3 3 2 3 4 1 1 2 5 3 6 2 1 3 1 Output: 0 1 1 0","solution":"def relay_race(n, operations): Simulates the relay race operations and tracks the participation status of runners. :param n: Integer, number of runners. :param operations: List of tuple, each containing ci (operation type) and pi (runner index). :return: List of integers, results of type 3 operations where 1 indicates participating and 0 indicates not participating. results = [] # Initialize all runners as not participating (False) status = [False] * (n + 1) for operation in operations: ci, pi = operation if ci == 1: # Mark runner pi and all runners behind them as participating for i in range(pi, n + 1): status[i] = True elif ci == 2: # Mark runner pi and all runners ahead of them as not participating for i in range(1, pi + 1): status[i] = False elif ci == 3: # Check if runner pi is participating results.append(1 if status[pi] else 0) return results"},{"question":"John is a software developer who enjoys solving number sequence puzzles. He recently came across a sequence problem that he found quite challenging. Can you help him solve it? A sequence of integers a is given. It is known that the sequence can be of any length and can contain both positive and negative integers. John needs to perform queries on this sequence. There are two types of queries that need to be answered: 1. Update the element at position i in the sequence to a given value x. 2. Determine the sum of elements in the subsequence from the l-th to the r-th position (inclusive). Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) — the elements of the sequence. The third line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the following q lines describes the queries: * 1 i x - query of the 1 type (1 ≤ i ≤ n, |x| ≤ 10^9). Update the element at position i to x. * 2 l r - query of the 2 type (1 ≤ l ≤ r ≤ n). Determine the sum of elements in the subsequence from l to r. Output For each query of type 2, output a single integer — the sum of elements in the specified subsequence. Examples Input 6 1 2 3 4 5 6 3 2 1 3 1 3 10 2 2 5 Output 6 21 Input 5 -1 3 5 -2 6 4 2 1 5 1 4 1 2 3 4 2 1 3 Output 11 6 7 Note In the second test case, initially, the sequence is [-1, 3, 5, -2, 6]. The first query calculates the sum from position 1 to position 5, which is -1 + 3 + 5 - 2 + 6 = 11. The second query updates the element at position 4 to 1, making the sequence [-1, 3, 5, 1, 6]. The third query calculates the sum from position 3 to position 4, which is 5 + 1 = 6. The fourth query calculates the sum from position 1 to position 3, which is -1 + 3 + 5 = 7.","solution":"class Sequence: def __init__(self, sequence): self.sequence = sequence def update(self, i, x): Update the element at position i to x. if 1 <= i <= len(self.sequence): self.sequence[i-1] = x def sum_subsequence(self, l, r): Determine the sum of elements in the subsequence from l to r (inclusive). if 1 <= l <= r <= len(self.sequence): return sum(self.sequence[l-1:r]) def process_queries(n, sequence, q, queries): seq = Sequence(sequence) results = [] for query in queries: parts = query.split() if parts[0] == \'1\': i, x = int(parts[1]), int(parts[2]) seq.update(i, x) elif parts[0] == \'2\': l, r = int(parts[1]), int(parts[2]) results.append(seq.sum_subsequence(l, r)) return results"},{"question":"Task Given a list of integers, return a new list containing only the prime numbers from the original list. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself. Function Signature `def filter_primes(nums: List[int]) -> List[int]:` Input - `nums`: A list of integers where 1 ≤ len(nums) ≤ 1000 and each integer `num` in `nums` (0 ≤ num ≤ 10^6). Output - A list of integers containing only the prime numbers from the original list. Example Input: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]` Output: `[2, 3, 5, 7]` Explanation The prime numbers from the input list are `[2, 3, 5, 7]`. All other numbers are not prime and are therefore removed from the output list. Note - Ensure your solution efficiently handles the given constraints. - Test your function with various edge cases, such as all elements being non-prime or the list containing lower and upper boundary values.","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to determine if a number is a prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def filter_primes(nums: List[int]) -> List[int]: Returns a list containing only the prime numbers from the original list. return [num for num in nums if is_prime(num)]"},{"question":"A large landscape matrix of size n x m has some water bodies and some land cells. Each cell is either water (represented by \'W\') or land (represented by \'L\'). You can only travel through land cells, moving in four possible directions: up, down, left, and right. Your task is to determine the count of distinct land areas in the matrix. A land area is defined as a group of connected land cells. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the landscape matrix. The next n lines each contain m characters, representing the matrix. Each character is either \'W\' or \'L\'. -----Output----- Print a single integer representing the number of distinct land areas. -----Examples----- Input 4 5 LLWWW LLWWL LWWLW WWWLL Output 3 Input 3 3 LWL WLW LWL Output 5 -----Note----- Consider the first sample. The landscape matrix has the following configuration: LLWWW LLWWL LWWLW WWWLL There are 3 distinct land areas: 1. The first two rows and first two columns form one land area. 2. The bottom right forms a second land area. 3. The middle right forms a third land area. In the second sample, there are 5 distinct land areas since every \'L\' is isolated from the others: 1. The top-left cell. 2. The top-right cell. 3. The middle cell. 4. The bottom-left cell. 5. The bottom-right cell.","solution":"def count_land_areas(matrix, n, m): def bfs(matrix, x, y, visited): queue = [(x, y)] visited[x][y] = True directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: cx, cy = queue.pop(0) for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and matrix[nx][ny] == \'L\': visited[nx][ny] = True queue.append((nx, ny)) visited = [[False for _ in range(m)] for _ in range(n)] land_areas_count = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'L\' and not visited[i][j]: bfs(matrix, i, j, visited) land_areas_count += 1 return land_areas_count"},{"question":"Task: You have to write a function **sum_of_cubed_digits** which calculates the sum of the cubes of its digits for each number in the range of 1 to n, and returns a list of these sums. * The function should take a single integer n as an argument and return a list of integers. * The list should include the calculated sum for each integer from 1 to n. * If n is less than 1, the function should return an empty list. Examples: sum_of_cubed_digits(5): [1, 8, 27, 64, 125] sum_of_cubed_digits(2): [1, 8] Explanation: * For 1: The sum of the cube of its digits is 1^3 = 1. * For 2: The sum of the cube of its digits is 2^3 = 8. * For 3: The sum of the cube of its digits is 3^3 = 27. * For 4: The sum of the cube of its digits is 4^3 = 64. * For 5: The sum of the cube of its digits is 5^3 = 125.","solution":"def sum_of_cubed_digits(n): Calculates the sum of cubes of its digits for each number from 1 to n. Parameters: n (int): Upper limit of the range. Returns: list: List containing the sum of cubes of digits for each number from 1 to n. if n < 1: return [] result = [] for i in range(1, n + 1): sum_of_cubes = sum(int(digit) ** 3 for digit in str(i)) result.append(sum_of_cubes) return result"},{"question":"Alice and Bob are playing a game with a sequence of numbers. They want to find the longest increasing subsequence in the sequence, but since they suspect the sequence might be very long, they only care about the length of this subsequence, not the subsequence itself. An increasing subsequence is a subsequence where every element is greater than the previous one. Can you help them determine this length? -----Input----- The first line contains an integer n (1 le n le 10^5) — number of elements in the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. -----Output----- Output the single number — the length of the longest increasing subsequence. -----Examples----- Input 6 5 1 6 2 7 3 Output 3 Input 4 10 20 10 20 Output 2 -----Note----- In the first sample, the longest increasing subsequence can be [1, 2, 3], [1, 6, 7], or [5, 6, 7], so the response is 3. In the second sample, one of the longest increasing subsequences is [10, 20], so the response is 2.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the sequence. if not nums: return 0 n = len(nums) lis = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis) # Example usage: # print(length_of_lis([5, 1, 6, 2, 7, 3])) # Output should be 3"},{"question":"Given a list of meeting intervals where each interval is represented as a pair of start and end times, determine the minimum number of meeting rooms required to accommodate all meetings. -----Constraints----- - Each interval is represented as a tuple (start, end) where 0 <= start < end <= 10^9. - 1 <= number of intervals <= 10^4. -----Input----- Input is given from Standard Input in the following format: - First line contains an integer N, the number of intervals. - Each of the next N lines contains two integers representing the start and end times of a meeting. -----Output----- Print a single integer representing the minimum number of meeting rooms required. -----Sample Input----- 3 0 30 5 10 15 20 -----Sample Output----- 2 Explanation: - Meeting 1 (0, 30) and Meeting 2 (5, 10) overlap, so two rooms are needed. - Meeting 3 (15, 20) can take place after Meeting 2 ends, allowing for reuse of a room. Thus, a minimum of 2 meeting rooms are required.","solution":"def min_meeting_rooms(intervals): Determine the minimum number of meeting rooms required to accommodate all meetings. :param intervals: List of tuples containing start and end times of meetings. :return: Integer representing the minimum number of meeting rooms required. if not intervals: return 0 # Separate start and end times starts = sorted([i[0] for i in intervals]) ends = sorted([i[1] for i in intervals]) start_ptr, end_ptr = 0, 0 used_rooms = 0 while start_ptr < len(intervals): # If the current meeting starts before the last meeting ends, we need a new room. if starts[start_ptr] < ends[end_ptr]: used_rooms += 1 else: # If the current meeting starts after the last meeting ends, free up a room. end_ptr += 1 start_ptr += 1 return used_rooms def read_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) intervals = [(int(data[i]), int(data[i+1])) for i in range(1, len(data), 2)] return intervals if __name__ == \\"__main__\\": intervals = read_input() print(min_meeting_rooms(intervals))"},{"question":"A company is organizing an event for which they have n pieces of candy. They want to distribute the candies to the participants such that each participant receives at least one candy and no two participants receive the same number of candies. Given the number of candies n, determine the maximum number of participants that can receive candies under these conditions. Function Description Complete the function distributeCandies in the editor below. distributeCandies has the following parameter(s): int n: the number of candies Returns int: the maximum number of participants Input Format A single integer n, the number of candies available. Constraints 1leq nleq10^9 Output Format Sample Input 0 7 Sample Output 0 3 Explanation 0 To maximize the number of participants, we can distribute candies in the following way: 1 candy to Participant 1, 2 candies to Participant 2, 3 candies to Participant 3. This distribution exhausts 1+2+3 = 6 candies, and participant 4 would require 4 candies which would exceed the available 7 candies. Hence, the maximum number of participants that can be accommodated is 3. Sample Input 1 10 Sample Output 1 4 Explanation 1 To maximize the number of participants, we can distribute candies in the following way: 1 candy to Participant 1, 2 candies to Participant 2, 3 candies to Participant 3, 4 candies to Participant 4. This distribution exhausts 1+2+3+4 = 10 candies exactly, hence the maximum number of participants that can be accommodated is 4.","solution":"def distributeCandies(n): Returns the maximum number of participants that can receive candies such that each participant receives at least one candy and no two participants receive the same number of candies. participants = 0 current_candies_needed = 1 while n >= current_candies_needed: n -= current_candies_needed participants += 1 current_candies_needed += 1 return participants"},{"question":"Input a5e8i7o3u2 Output Hello","solution":"def convert_to_hello(input_string): Converts any input string to the output \\"Hello\\". return \\"Hello\\""},{"question":"In the kingdom of Elaria, there is an intricate network of roads connecting a series of cities. Each city is represented by a node, and each road by an edge in a graph. The roads are bidirectional and have varying travel times. One day, the king decides to travel from his capital city to another city in the kingdom. The king has a fixed amount of maximum travel time he can spend on the journey. Your task is to help the king determine if he can reach the target city from the capital within the given travel time, and if so, what is the minimum travel time required. Input The first line of the input contains three integers n, m, T (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ T ≤ 10^9) — the number of cities, the number of roads, and the maximum travel time respectively. Each of the following m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000), representing a bidirectional road between cities u and v with a travel time of w. The next line contains two integers c and t (1 ≤ c, t ≤ n) — the capital city c and the target city t. Output If the king can reach the target city t from the capital c within the given travel time T, print the minimum travel time required. Otherwise, print -1. Examples Input 5 7 15 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 4 5 7 3 5 12 1 5 Output 12 Input 4 5 10 1 2 4 1 3 3 2 4 8 3 4 5 2 3 1 1 4 Output 10 Note In the first example, the path from city 1 (capital) to city 5 (target) can be 1 -> 3 -> 4 -> 5 with a total travel time of 2+3+7 = 12. In the second example, the path from city 1 (capital) to city 4 (target) can be 1 -> 3 -> 4 with a total travel time of 3+5 = 8, which is within the maximum travel time of 10.","solution":"import heapq def shortest_path_within_time(n, m, T, roads, c, t): Determines the minimum travel time between two cities in a graph, ensuring it is within a maximum travel time. Parameters: n (int): Number of cities. m (int): Number of roads. T (int): Maximum travel time allowed. roads (list): List of tuples (u, v, w) representing roads between cities and their travel times. c (int): Capital city (starting city). t (int): Target city. Returns: int: The minimum travel time required, or -1 if the target city cannot be reached within the given travel time. # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, c)] min_time = {i: float(\'inf\') for i in range(1, n + 1)} min_time[c] = 0 while pq: current_time, node = heapq.heappop(pq) if current_time > T: break if node == t: return current_time for neighbor, travel_time in graph[node]: new_time = current_time + travel_time if new_time < min_time[neighbor]: min_time[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return -1 if min_time[t] > T else min_time[t]"},{"question":"A team of developers is building a new software system and needs to optimize the system\'s performance. They have concluded that the performance bottleneck is caused by repeated operations on large arrays of integers. Specifically, they need help with a function that finds the largest sum of any contiguous subarray within a given integer array. Consider an integer array `arr` of length `n`. Your task is to write a function that returns the maximum sum of any contiguous subarray within `arr`. Input format The first line of input contains an integer `n`, indicating the length of the array `arr` (1 ≤ n ≤ 10^6). The second line contains `n` space-separated integers representing the elements of the array `arr` (-10^9 ≤ arr[i] ≤ 10^9). Output format Output a single integer, which is the largest sum of any contiguous subarray within `arr`. Example Input: 8 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum of 6.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray within the given integer array `arr`. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of strings representing different colors. Each string is a color name in lowercase. Write a function to count how many times each distinct color appears in the array, and return the results as an object where the keys are color names and the values are the respective counts. The array will never be empty. For example, given the array `[\\"red\\", \\"blue\\", \\"red\\", \\"green\\", \\"blue\\", \\"blue\\"]`, the function should return `{\\"red\\": 2, \\"blue\\": 3, \\"green\\": 1}`.","solution":"def count_colors(colors): Returns a dictionary with the count of each color in the given list `colors`. Parameters: colors (list): A list of strings where each string is a color name. Returns: dict: A dictionary where keys are color names and values are their respective counts. color_count = {} for color in colors: if color in color_count: color_count[color] += 1 else: color_count[color] = 1 return color_count"},{"question":"**Problem: Movie Night Planning** A group of friends wants to plan a movie night. Each friend has a list of movies they are interested in watching, and each movie has a certain rating. The goal is to maximize the total rating of the movies they want to watch together, but with a twist: no two friends want to watch the same movie. Given the list of movies each friend is interested in and their corresponding ratings, determine the maximum possible total rating of movies that all friends can watch together considering no overlaps in selected movies. -----Input----- The first line of input contains a positive integer `f` (1 ≤ f ≤ 200 000) — the number of friends. The following `f` lines each contain an integer `l_i` (1 ≤ l_i ≤ 1000) — the number of movies friend `i` is interested in, followed by `l_i` space-separated integers `m_{i1}, m_{i2}, ..., m_{il_i}` (1 ≤ m_ij ≤ 10^6) representing the indices of the movies and `r_{i1}, r_{i2}, ..., r_{il_i}` (0 ≤ r_{i1}, r_{i2}, ..., r_{il_i} ≤ 100) representing the ratings of these movies. -----Output----- Print a single integer — the maximum possible total rating of the movies that all friends can watch together with no two friends watching the same movie. -----Example----- Input 3 3 1 2 3 5 6 9 2 2 4 7 10 2 1 4 8 8 Output 26 -----Explanation----- In the example, the optimal solution is: - Friend 1 watches Movie 3 with rating 9. - Friend 2 watches Movie 4 with rating 10. - Friend 3 watches Movie 1 with rating 8. The maximum possible total rating is 9 + 10 + 8 = 27. Friend 1 cannot share the same movie with the others, so our choice respects the no-overlap constraint.","solution":"def max_total_rating(f, friends_movies): from heapq import heappop, heappush import collections # Dictionary to store all movies with their ratings movie_dict = collections.defaultdict(list) for i in range(f): l_i = friends_movies[i][0] for j in range(1, l_i + 1): movie_idx = friends_movies[i][j] movie_rating = friends_movies[i][j + l_i] heappush(movie_dict[movie_idx], -movie_rating) max_ratings_heap = [] for movie_ratings in movie_dict.values(): if movie_ratings: heappush(max_ratings_heap, heappop(movie_ratings)) total_rating = 0 for _ in range(f): if max_ratings_heap: total_rating -= heappop(max_ratings_heap) return total_rating # Example test case included in the function call for validation f = 3 friends_movies = [ [3, 1, 2, 3, 5, 6, 9], [2, 2, 4, 7, 10], [2, 1, 4, 8, 8] ] print(max_total_rating(f, friends_movies)) # Expected output: 27"},{"question":"Given an undirected graph with `n` vertices and `m` edges, determine if there exists a cycle in the graph that passes through any given vertex `x` exactly once. In other words, a cycle that does not revisit vertex `x` more than one time throughout the traversal. Input - The first line contains three integers `n`, `m`, and `x` (1 ≤ x ≤ n, 1 ≤ n, m ≤ 10^5) — the number of vertices, number of edges in the graph, and the specific vertex `x` respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), denoting an edge between vertex `u` and vertex `v`. Output - Print \\"YES\\" if such a cycle exists, otherwise print \\"NO\\". Example 1 Input: ``` 5 6 3 1 2 2 3 3 4 4 5 5 3 1 3 ``` Output: ``` YES ``` Example 2 Input: ``` 4 3 2 1 2 2 3 3 4 ``` Output: ``` NO ```","solution":"from collections import defaultdict, deque def has_cycle_through_x(n, m, x, edges): Determines if there exists a cycle in the graph that passes through vertex x exactly once. Args: n (int): The number of vertices in the graph. m (int): The number of edges in the graph. x (int): The specific vertex through which the cycle must pass. edges (list of tuple): The list of edges in the graph. Returns: str: \\"YES\\" if such a cycle exists, \\"NO\\" otherwise. graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): visited = set() queue = deque([(start, None)]) while queue: node, parent = queue.popleft() if node in visited: return True visited.add(node) for neighbor in graph[node]: if neighbor == parent: continue queue.append((neighbor, node)) return False if bfs(x): return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function that determines if a given word can be constructed by concatenating words from a given list of words. Each word from the list can be used multiple times. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of words in the list. The following n lines each contain one word. Each word consists of small English letters and has a length between 1 and 10. The last line contains the target word. Output Print \\"YES\\" if the target word can be constructed by concatenating words from the list. Otherwise, print \\"NO\\". Examples Input 3 app le pie applepie Output YES Input 2 cat dog catdogcat Output YES Input 2 bat rat catbat Output NO Note 1. In the first example, the words \\"apple\\" and \\"pie\\" from the list can be concatenated to form the word \\"applepie\\". 2. In the second example, the words \\"cat\\" and \\"dog\\" can be concatenated multiple times to form \\"catdogcat\\". 3. In the third example, there is no way to form the word \\"catbat\\" using the words \\"bat\\" and \\"rat\\" from the list, hence the output is \\"NO\\".","solution":"def can_construct_word(n, words, target): Determines if the target word can be constructed by concatenating words from the given list. def can_construct(suffix): if suffix == \\"\\": return True for word in words: if suffix.startswith(word) and can_construct(suffix[len(word):]): return True return False return \\"YES\\" if can_construct(target) else \\"NO\\""},{"question":"The Galaxy Explorers is a group of astronauts on an important mission. They have several missions, each involving travelling between planets connected by space routes. The safety of a route is judged by the number of asteroids frequently passing through it. Every route has a safety score representing the number of asteroids; the fewer the asteroids, the safer the route. Given a list of routes and their safety scores, the astronauts need to determine if there\'s a route system that allows them to travel between every pair of planets through the safest possible route. Write a program that takes the number of planets and the safety scores of the space routes, and checks if there\'s a route system connecting all planets such that the route between any two planets is the safest one possible. -----Constraints----- - All values in input are integers. - 2 leq number of planets leq 10^4 - 1 leq number of routes leq 10^5 - 1 leq safety score leq 10^6 -----Input----- Input is given from Standard Input in the following format: number_of_planets number_of_routes planet_1 planet_2 safety_score planet_3 planet_4 safety_score : planet_n-1 planet_n safety_score Each line represents a route between two planets and its associated safety score. -----Output----- Print \\"YES\\" if there\'s a safest route system connecting all planets, otherwise print \\"NO\\". -----Sample Input----- 5 6 1 2 5 1 3 10 2 3 3 2 4 7 3 5 9 4 5 2 -----Sample Output----- YES","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def can_form_safest_route_system(n, routes): # Kruskal\'s algorithm to find Minimum Spanning Tree (MST) routes = sorted(routes, key=lambda x: x[2]) parent = list(range(n + 1)) rank = [0] * (n + 1) mst_edges = 0 for u, v, safety in routes: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_edges += 1 if mst_edges == n - 1: return True return False def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) e = int(data[1]) routes = [] index = 2 while index < len(data): u = int(data[index]) v = int(data[index + 1]) safety = int(data[index + 2]) routes.append((u, v, safety)) index += 3 if can_form_safest_route_system(n, routes): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"You are organizing a coding competition where participants are awarded points based on their performance in various rounds. Each round has a difficulty level, and participants earn points equal to the difficulty level of the round if they solve it. However, if a participant fails to solve a round, they lose points equal to half of the difficulty level of the round (rounded down). Given the results of each participant in all rounds, calculate the total score for each participant. Input: The first line will contain an integer N denoting the number of participants. For each participant, there will be one line containing the results of the rounds. Each result is represented as a string of \'S\' and \'F\' characters. \'S\' indicates a successful solve, and \'F\' indicates a failure. Following the results string, there will be a space-separated list of integers representing the difficulty levels of the rounds. Output: You need to print exactly one number for each participant. The number should be the total score of the participant. Constraints: 1 ≤ N ≤ 100 1 ≤ Length of the result string ≤ 100 1 ≤ Difficulty level of each round ≤ 100 SAMPLE INPUT 3 SSFSF 5 10 5 3 6 FFS 8 9 10 SSFSSF 1 1 2 2 3 3 SAMPLE OUTPUT 25 2 6 Explanation 1st Participant: For the results \'SSFSF\' and difficulties [5, 10, 5, 3, 6]: - Round 1: successful, earns 5 points. - Round 2: successful, earns 10 points. - Round 3: failure, loses 2 points (half of 5). - Round 4: successful, earns 3 points. - Round 5: failure, loses 3 points (half of 6). Total score: 5+10-2+3-3 = 13 points. 2nd Participant: For the results \'FFS\' and difficulties [8, 9, 10]: - Round 1: failure, loses 4 points (half of 8). - Round 2: failure, loses 4 points (half of 9, rounded down). - Round 3: successful, earns 10 points. Total score: -4-4+10 = 2 points. 3rd Participant: For the results \'SSFSSF\' and difficulties [1, 1, 2, 2, 3, 3]: - Round 1: successful, earns 1 point. - Round 2: successful, earns 1 point. - Round 3: failure, loses 1 point (half of 2). - Round 4: successful, earns 2 points. - Round 5: successful, earns 3 points. - Round 6: failure, loses 1 point (half of 3, rounded down). Total score: 1+1-1+2+3-1 = 5 points.","solution":"def calculate_scores(num_participants, results): scores = [] for result_info in results: result, difficulties = result_info.split()[0], list(map(int, result_info.split()[1:])) total_score = 0 for i in range(len(result)): if result[i] == \'S\': total_score += difficulties[i] else: total_score -= difficulties[i] // 2 scores.append(total_score) return scores"},{"question":"You\'re organizing a programming contest and need to prepare a problem set of size N. Each problem must have a unique difficulty rating between 1 and N (inclusive). Your goal is to ensure that the problems are arranged in non-decreasing order of difficulty and that there\'s exactly one problem of each difficulty level from 1 to N. Additionally, to make things more interesting, you decided that two consecutive problems must have a difficulty difference of at least K. How many possible ways are there to assign difficulties to the problems, considering this constraint? The result is to be computed modulo the given prime number P. Constraints * 1 leq N leq 100 * 1 leq K leq N * 1 leq P leq 10^9+7 * P is a prime. * All input values are integers. Input Input is given from Standard Input in the following format: N K P Output Print the number of ways to assign difficulties to the problems, modulo P. Examples Input 3 1 1000000007 Output 6 Input 4 2 10007 Output 0 Input 5 1 1000003 Output 120 Input 5 2 1000003 Output 0","solution":"def count_ways(N, K, P): from math import factorial if K == 1: # K=1 just means we need a permutation of {1, ..., N} return factorial(N) % P # Base on constraints, calculate factorial mod P factorial_N = [1] * (N + 1) for i in range(2, N + 1): factorial_N[i] = (factorial_N[i - 1] * i) % P def count_permutations_with_K_difference(n, k, mod): dp = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): dp[i][1] = 1 for length in range(2, n + 1): for i in range(n - length + 1): for j in range(i + k, n - length + 2): dp[i + 1][length] = (dp[i + 1][length] + dp[j][length - 1]) % mod result = sum(dp[i][N] for i in range(n + 1)) % mod return result return count_permutations_with_K_difference(N, K, P)"},{"question":"In a remote village, the chief has decided to propagate a message through drum beats. The drum beats must follow a specific pattern: each beat can be either a short beat or a long beat, and no two long beats can be consecutive. Your task is to determine the number of valid drum beat sequences of a given length. Input: The first line contains the number of test cases, T. The following T lines each contain a single integer N, representing the length of the drum beat sequence. Output: For each test case, output the number of valid drum beat sequences of length N. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 30 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 2 3 5 Explanation Input: n = 1 Output: 2 There are two possible sequences: (short), (long) Input: n = 2 Output: 3 There are three possible sequences: (short, short), (short, long), (long, short) Input: n = 3 Output: 5 There are five possible sequences: (short, short, short), (short, short, long), (short, long, short), (long, short, short), (long, short, long)","solution":"def find_drum_sequences(n): Function to determine the number of valid drum beat sequences of length n if n == 1: return 2 if n == 2: return 3 # dp[i] will store the number of valid sequences of length i dp = [0] * (n + 1) dp[1] = 2 # (short), (long) dp[2] = 3 # (short, short), (short, long), (long, short) # Use dynamic programming to fill the dp array for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n] def solve(T, cases): Function to handle multiple test cases and return the results results = [] for n in cases: results.append(find_drum_sequences(n)) return results"},{"question":"Given a binary tree, design a function connectSiblings() that connects each node to its level order successor. In other words, instead of pointing to a left or right child, each node in the binary tree should point to the next node in the same level. The last node in each level should point to NULL. Input: The function takes a single argument, the root node of the binary tree. Output: The function should return the root node of the modified binary tree. Constraints: 1<=T<=100 1<=Number of nodes<=1000 Example: Input: 2 1 2 3 4 5 6 7 1 2 3 4 5 NULL 7 Output: 1 -> NULL 2 -> 3 -> NULL 4 -> 5 -> 6 -> 7 -> NULL 1 -> NULL 2 -> 3 -> NULL 4 -> 5 -> 7 -> NULL Note: The Input/Output format and Example given are used for the system\'s internal purpose and should be used by a user for Expected Output only. As it is a function problem, a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"class Node: def __init__(self, val: int, left: \'Node\' = None, right: \'Node\' = None, next: \'Node\' = None): self.val = val self.left = left self.right = right self.next = next def connectSiblings(root: Node) -> Node: if not root: return None queue = [root] while queue: size = len(queue) prev = None for i in range(size): node = queue.pop(0) if prev: prev.next = node prev = node if node.left: queue.append(node.left) if node.right: queue.append(node.right) prev.next = None return root"},{"question":"A robotics company wants to optimize the battery life of its robots by minimizing the number of times a robot needs to recharge during a specific task. The company provides you with an array batteries[] where batteries[i] denotes the maximum distance that the ith type of battery can last. Given that you can choose more than one battery type, your goal is to find out the minimum number of battery recharges required to cover a distance D. You have to assume that a robot can only use one battery at a time until it reaches its maximum distance, then it can recharge, switch to a different battery if needed, and continue traveling. Write a function `minRecharge(batteries, N, D)` which takes the array of battery capacities `batteries[]`, the size of the array `N`, and the distance `D` as input parameters and returns the minimum number of recharges required to cover the distance. If it\'s impossible to cover the distance, return -1. # Example 1: ``` Input: N = 5 batteries[] = {10, 20, 30, 40, 50} D = 70 Output: 2 ``` Explanation: By choosing the 50 unit battery and the 20 unit battery, the distance covered in each recharge can be 50 and 20 respectively. First, use the 50 unit battery, then recharge and use a 20 unit battery to cover the remaining 20 units of distance. Therefore, the total recharges required are 2. # Example 2: ``` Input: N = 4 batteries[] = {4, 3, 7, 5} D = 15 Output: 3 ``` Explanation: By choosing the 7 unit battery, the 5 unit battery, and the 3 unit battery, the distance covered can be split as 7+5+3. The total recharges required are 3. # Example 3: ``` Input: N = 3 batteries[] = {1, 2, 3} D = 10 Output: -1 ``` Explanation: It is impossible to cover 10 units of distance with the given battery capacities. # Your Task: - You do not need to read input or print anything. - Complete the function `minRecharge(batteries[], size of array N, distance D)` to return the min number of recharges needed or -1 if it\'s impossible. # Expected Time Complexity: - O(N * D) # Expected Auxiliary Space: - O(D) # Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ batteries[i] ≤ 10^3 - 1 ≤ D ≤ 10^4","solution":"def minRecharge(batteries, N, D): batteries.sort(reverse=True) # Sort batteries in decreasing order total_distance = 0 recharges = 0 for battery in batteries: if total_distance >= D: break total_distance += battery recharges += 1 if total_distance >= D: return recharges return -1"},{"question":"You are given a rectangular maze represented by a 2D grid of characters, where each cell is either a free cell \'.\' or a wall \'#\'. You need to find the length of the shortest path from a given starting cell to a given ending cell. You can move from one cell to another if and only if they are adjacent horizontally or vertically and the destination cell is a free cell. Moving diagonally is not allowed. Write a function that determines the length of the shortest path from the starting cell to the ending cell. If there is no valid path, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the maze. The next n lines contain m characters each, representing the maze. Every character is either \'.\' (a free cell) or \'#\' (a wall). The next line contains two integers sx and sy (1 ≤ sx ≤ n, 1 ≤ sy ≤ m) — the coordinates of the starting cell. The last line contains two integers ex and ey (1 ≤ ex ≤ n, 1 ≤ ey ≤ m) — the coordinates of the ending cell. It is guaranteed that both the starting cell (sx, sy) and the ending cell (ex, ey) are free cells. Output Print a single integer — the length of the shortest path from the starting cell to the ending cell. If there is no path, print -1. Examples Input 5 5 ..... .#.#. .#.#. .#.#. ..... 1 1 5 5 Output 8 Input 3 3 .#. .#. .#. 1 1 3 3 Output -1","solution":"from collections import deque def shortest_path_in_maze(n, m, maze, sx, sy, ex, ey): def is_in_bounds(x, y): return 0 <= x < n and 0 <= y < m def bfs(start_x, start_y, end_x, end_y): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start_x, start_y, 0)]) visited = set() visited.add((start_x, start_y)) while queue: x, y, distance = queue.popleft() if x == end_x and y == end_y: return distance for dx, dy in directions: nx, ny = x + dx, y + dy if is_in_bounds(nx, ny) and (nx, ny) not in visited and maze[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return -1 return bfs(sx, sy, ex, ey) # Example usage n = 5 m = 5 maze = [ \\".....\\", \\".#.#.\\", \\".#.#.\\", \\".#.#.\\", \\".....\\" ] sx, sy = 0, 0 ex, ey = 4, 4 print(shortest_path_in_maze(n, m, maze, sx, sy, ex, ey)) # Output: 8"},{"question":"Input The input is provided from the standard input in the following format: > N a_1 b_1 a_2 b_2 : : a_{N-1} b_{N-1} Output * You need to print a single integer value which is the maximum value of a_i + b_i, for 1 le i le N. Constraints * 2 le N le 100,000 * -10^9 le a_i, b_i le 10^9 Subtasks Subtask 1 [ 100 points ] * N le 100 * -100 le a_i, b_i le 100 Subtask 2 [ 100 points ] * N le 100,000 * -10^9 le a_i, b_i le 10^9 Examples Input 3 1 3 4 1 2 2 Output 5 Input 4 -1 -3 -2 4 0 0 3 -1 Output 2 Input 5 5 5 5 -6 5 0 -5 5 5 5 Output 10","solution":"def max_sum_of_pairs(n, pairs): Returns the maximum value of a_i + b_i for given input pairs (a_i, b_i). :param n: Number of pairs :param pairs: List of tuples containing pairs (a_i, b_i) :return: Maximum value of a_i + b_i max_sum = float(\'-inf\') for a, b in pairs: max_sum = max(max_sum, a + b) return max_sum"},{"question":"Alex is a software developer who loves working with strings. One day, he came across a problem that intrigued him. He needs to find the longest substring in a given string `s` that contains only unique characters. A substring is defined as a contiguous sequence of characters within a string. For instance, the substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Unique characters mean that no character repeats within the substring. Given a string `s`, help Alex write a function to find the length of the longest substring that contains only unique characters. Input - A single line containing string `s` (1 ≤ |s| ≤ 10^5), where `s` consists of only printable ASCII characters. Output - Print a single integer, the length of the longest substring with all unique characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Note For the first example, the answer is \\"abc\\", with the length of 3. For the second example, the answer is \\"b\\", with the length of 1. For the third example, the answer is \\"wke\\", with the length of 3. Note that the longest substring must be unique and contiguous. Alex is eager to solve this problem using efficient algorithms. Can you help him?","solution":"def length_of_longest_substring(s: str) -> int: Finds the length of the longest substring with all unique characters in the given string s. :param s: Input string :return: Length of the longest substring with all unique characters n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a binary search tree (BST) and two values, L and R. Modify the BST such that all the nodes having values not in the inclusive range [L, R] are deleted. The structure of the tree should remain as a BST after deletion. Example 1: Input: 10 / 5 15 / / 2 7 12 20 L = 5, R = 15 Output: 5 7 10 12 15 Explanation: The nodes with values 2 and 20 are deleted since they are not in the range [5, 15]; the inorder traversal of the modified tree is 5 7 10 12 15. Example 2: Input: 8 / 3 10 / 1 6 14 / / 4 7 13 L = 4, R = 13 Output: 4 6 7 8 10 13 Explanation: The nodes with values 1, 3, and 14 are deleted since they are not in the range [4, 13]; the inorder traversal of the modified tree is 4 6 7 8 10 13. Your Task: You don\'t need to read input or print anything. Your task is to complete the function trimBST() which takes the root of the BST and the integers L and R as input parameters and returns the root of the modified BST after trimming. Note: The generated output contains the inorder traversal of the modified tree. Expected Time Complexity: O(N), where N is the number of nodes in the BST. Expected Auxiliary Space: O(Height of the BST). Constraints: 1 ≤ Number of nodes in the BST ≤ 10^{5} 1 ≤ Value of nodes ≤ 10^{5} 1 ≤ L < R ≤ 10^{5}","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def trimBST(root, L, R): Trims the given BST so that all the elements fall within the range [L, R]. Args: root: TreeNode, the root of the BST. L: int, the lower bound of the range. R: int, the upper bound of the range. Returns: TreeNode: The root of the modified BST. if not root: return None # If the current node\'s value is less than L, # then we need to trim the left subtree and return the trimmed right subtree. if root.val < L: return trimBST(root.right, L, R) # If the current node\'s value is greater than R, # then we need to trim the right subtree and return the trimmed left subtree. if root.val > R: return trimBST(root.left, L, R) # Otherwise, we will recursively trim the left and right subtrees. root.left = trimBST(root.left, L, R) root.right = trimBST(root.right, L, R) # Return the current node as it is within the range [L, R]. return root def inorderTraversal(root): Returns the inorder traversal of the BST. Args: root: TreeNode, the root of the BST. Returns: List of node values as per inorder traversal. result = [] if root: result = inorderTraversal(root.left) result.append(root.val) result = result + inorderTraversal(root.right) return result"},{"question":"Consider a function that converts an integer to its Roman numeral representation. The function receives an integer between 1 and 3999 and returns a string representing its Roman numeral equivalent. Roman numerals are represented by the following symbols: ``` I: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000 ``` Additionally, the following subtractive combinations are essential: ``` IV: 4, IX: 9, XL: 40, XC: 90, CD: 400, CM: 900 ``` Implement a function `int_to_roman(n: int) -> str` to accomplish this conversion. ```python int_to_roman(3) == \\"III\\" int_to_roman(4) == \\"IV\\" int_to_roman(9) == \\"IX\\" int_to_roman(58) == \\"LVIII\\" int_to_roman(1994) == \\"MCMXCIV\\" int_to_roman(3999) == \\"MMMCMXCIX\\" ```","solution":"def int_to_roman(n: int) -> str: Converts an integer to its Roman numeral representation. # Define the integer to Roman numeral mapping val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \'\' i = 0 while n > 0: # Determine how many times the current value can fit into the number n for _ in range(n // val[i]): roman_numeral += syms[i] n -= val[i] i += 1 return roman_numeral"},{"question":"A group of friends decided to form a team to participate in a competitive programming contest. They want to ensure that the time zones of all team members are compatible for the contest schedule. The contest lasts for exactly 48 hours, and each friend has a wake-up time and a sleep time within a 24-hour cycle. You are given two arrays, wake_times and sleep_times. The wake_times array contains the time each friend wakes up, and the sleep_times array contains the time each friend goes to sleep. Both arrays are of the same length and consist of integers from 0 to 23 (both inclusive), representing the hours in a 24-hour clock. A friend can participate in the contest if any two consecutive hours during the contest are within their wake-up and sleep time interval. The interval is inclusive of wake-up time and exclusive of sleep time. For example, if a friend wakes up at 9 and sleeps at 17, they can participate in the contest from hour 9 to hour 16. Write a program that determines if all friends can participate for the entire duration of the contest. Print \\"YES\\" if all friends can participate, and \\"NO\\" otherwise. Input - The first line contains a single integer n (1 ≤ n ≤ 100) — the number of friends. - The second line contains n integers, the wake_times array. - The third line contains n integers, the sleep_times array. Output - Print \\"YES\\" if all friends can participate in the contest for the entire 48 hours. Otherwise, print \\"NO\\". Example Input 4 7 0 16 22 20 8 23 2 Output NO Input 3 6 9 12 18 22 21 Output YES Explanation In the first example, the third friend wakes up at 16 and sleeps at 23, and the fourth friend wakes up at 22 and sleeps at 2. These two friends do not have overlapping hours to cover the entire 48-hour contest. In the second example, all three friends have sufficient overlapping wake-up hours that can cover the entire 48-hour contest.","solution":"def can_all_participate(n, wake_times, sleep_times): Determines if all friends can participate in the contest for the entire 48 hours. Args: n (int): The number of friends. wake_times (list of int): The list of wake-up times. sleep_times (list of int): The list of sleep times. Returns: str: \\"YES\\" if all friends can participate, \\"NO\\" otherwise. for hour in range(24): everyone_awake = True for i in range(n): wake_time = wake_times[i] sleep_time = sleep_times[i] # Check if the wake time to sleep time interval of the friend covers the given hour if wake_time < sleep_time: if not (wake_time <= hour < sleep_time): everyone_awake = False break else: # sleep_time <= wake_time if not (wake_time <= hour or hour < sleep_time): everyone_awake = False break if everyone_awake: return \\"YES\\" return \\"NO\\""},{"question":"Problem Statement You are given a row of houses, where each house is painted with one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You must paint all the houses such that no two adjacent houses have the same color. Calculate the minimum cost to paint all the houses. The cost of painting each house with a certain color is represented by a cost matrix `costs` where `costs[i][j]` is the cost of painting house `i` with the color `j` (0 for red, 1 for blue, 2 for green). Write a function `minCost` to determine the minimum cost to paint all houses. # Function Signature ```python def minCost(costs: List[List[int]]) -> int: ``` # Input - `costs` - List of lists where `costs[i][j]` is an integer representing the cost of painting the `i-th` house with the `j-th` color. * 1 <= `len(costs)` <= 100 (number of houses) * 3 <= `len(costs[0])` <= 3 (number of colors) * 1 <= `costs[i][j]` <= 200 (cost of painting house `i` with the `j`th color) # Output - Return the minimum cost to paint all houses so that no two adjacent houses have the same color. # Example Input: ``` [[17, 2, 17], [16, 16, 5], [14, 3, 19]] ``` Output: ``` 10 ``` Explanation: Paint the first house with color 1 (blue), the second house with color 2 (green), and the third house with color 1 (blue). The minimum cost is 2 + 5 + 3 = 10. # Note - The first index in `costs` corresponds to the first house, the second index corresponds to the second house, and so on. - The second index (0, 1, 2) in `costs` corresponds to the color red, blue, and green respectively. Write a function `minCost` to solve this problem.","solution":"from typing import List def minCost(costs: List[List[int]]) -> int: if not costs: return 0 n = len(costs) for i in range(1, n): costs[i][0] += min(costs[i-1][1], costs[i-1][2]) costs[i][1] += min(costs[i-1][0], costs[i-1][2]) costs[i][2] += min(costs[i-1][0], costs[i-1][1]) return min(costs[-1])"},{"question":"Given a string, you need to reverse the order of characters in each word within a sentence while preserving whitespace and initial word order. Write a function that takes a string as input and returns the string with each word reversed. Example 1: Input: \\"The quick brown fox\\" Output: \\"ehT kciuq nworb xof\\" Example 2: Input: \\"Hello World\\" Output: \\"olleH dlroW\\" Note: - A word is defined as a sequence of non-space characters. - The input string does not contain any leading or trailing spaces. - The words are always separated by a single space.","solution":"def reverse_words(sentence): Returns a string with each word reversed. Parameters: sentence (str): The input sentence. Returns: str: The sentence with each word reversed. return \' \'.join(word[::-1] for word in sentence.split())"},{"question":"In a busy metropolis, there is a network of one-way streets connecting various intersections. Your task is to write a program to help traffic planners determine if it\'s possible to traverse from any intersection to any other intersection using these streets. -----Input----- The first line contains two integers N and M (1 le N le 1000, 0 le M le 10000), representing the number of intersections and the number of one-way streets respectively. The next M lines each contain two integers A_ i and B_ i (1 le A_ i, B_ i le N, A_ i ne B_ i), denoting a one-way street going from intersection A_ i to intersection B_ i. -----Output----- Output \\"YES\\" if it is possible to travel from any intersection to any other intersection using the given one-way streets. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 4 5 1 2 2 3 3 4 4 1 2 4 Sample Output 1: YES Sample Input 2: 4 4 1 2 2 3 3 4 4 2 Sample Output 2: NO","solution":"def can_travel_everywhere(n, m, streets): from collections import defaultdict def dfs(graph, v, visited): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: dfs(graph, neighbor, visited) if n == 1: return \\"YES\\" forward_graph = defaultdict(list) reverse_graph = defaultdict(list) for a, b in streets: forward_graph[a].append(b) reverse_graph[b].append(a) visited = [False] * (n + 1) dfs(forward_graph, 1, visited) if not all(visited[1:]): return \\"NO\\" visited = [False] * (n + 1) dfs(reverse_graph, 1, visited) if not all(visited[1:]): return \\"NO\\" return \\"YES\\""},{"question":"Jane is the project manager of a software development team, and she is responsible for distributing tasks among the team members. Each team member has a different amount of available time per week to work on tasks. Jane wants to assign tasks such that the total time taken by any team member does not exceed their available time. Each task has a specific requirement of time to complete, and each team member has a time limit that they cannot exceed. You need to write a program that helps Jane determine if it is possible to assign all tasks to the team members without exceeding any team member\'s time limit. -----Input----- The first line of the input contains two integers T and M (1 le T, M le 10^5), where T is the number of tasks and M is the number of team members. The second line contains T integers t_1, t_2, ldots, t_T (1 le t_i le 10^4), where t_i is the time required to complete the i^{th} task. The third line contains M integers a_1, a_2, ldots, a_M (1 le a_i le 10^5), where a_i is the available time for the i^{th} team member. -----Output----- Output \\"YES\\" if all tasks can be assigned to the team members such that no team member\'s total time exceeds their available time. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 5 3 2 3 4 5 6 10 8 7 Sample Output 1: YES Sample Input 2: 4 2 4 4 4 4 8 7 Sample Output 2: NO","solution":"def can_assign_tasks(T, M, task_times, team_times): This function checks if it is possible to assign all tasks to the team members without exceeding their available time. Parameters: T (int): Number of tasks. M (int): Number of team members. task_times (list of int): List containing the time required for each task. team_times (list of int): List containing the available time for each team member. Returns: str: \\"YES\\" if all tasks can be assigned without exceeding any team member\'s available time, otherwise \\"NO\\". if sum(task_times) > sum(team_times): return \\"NO\\" task_times.sort(reverse=True) team_times.sort(reverse=True) for task in task_times: for i in range(M): if team_times[i] >= task: team_times[i] -= task break else: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers `a` of length `n`. You are required to perform the following task on the array: For each segment of the array comprised of consecutive odd numbers, reverse the order of the elements in that segment. Write a program that performs the task and outputs the modified array. Input The first line contains one integer `n` (1 ≤ n ≤ 10^6) — the length of the array `a`. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print the integers of the modified array after reversing segments of consecutive odd numbers. Examples Input 7 1 3 5 2 4 7 9 Output 5 3 1 2 4 9 7 Input 5 6 7 7 7 8 Output 6 7 7 7 8 Input 8 9 11 13 18 5 7 13 15 Output 13 11 9 18 15 13 7 5 Note In the first example, the segment [1, 3, 5] is reversed to become [5, 3, 1], and the segment [7, 9] is reversed to become [9, 7]. In the second example, all elements are not part of any segment of consecutive odd numbers. In the third example, the segment [9, 11, 13] is reversed to become [13, 11, 9], and the segment [5, 7, 13, 15] is reversed to become [15, 13, 7, 5].","solution":"def reverse_odd_segments(a): Reverse segments of consecutive odd numbers in the array `a`. n = len(a) result = [] segment = [] for num in a: if num % 2 == 1: segment.append(num) else: if segment: result.extend(reversed(segment)) segment = [] result.append(num) if segment: result.extend(reversed(segment)) return result"},{"question":"Takoyaki Chef and Hungry Customer Story Ken loves making takoyaki, while Hotaru can\'t resist eating Ken\'s freshly made takoyaki. Ken decided to set up a takoyaki stall at the summer festival, but he\'s worried that Hotaru will eat too many and reduce his potential sales. Ken wants to keep track of his takoyaki so he knows their status in real-time and ensure a successful festival. Problem There is a rectangular takoyaki grill with height H and width W, and it takes T minutes for each takoyaki to cook after it is placed on the grill. Each position on the grill can hold one takoyaki, identified by coordinates (i, j). There are Q events that can occur during the preparation: 1. Placing a takoyaki at a specific position at time t. The takoyaki will be cooked T minutes after being placed. If a takoyaki is already present, no new one is placed. 2. Hotaru attempts to eat a takoyaki at a specific position at time t. She can only eat fully cooked takoyaki. If the takoyaki is not cooked or does not exist, nothing happens. If she eats it, the position becomes empty. 3. Ken counts the number of cooked and uncooked takoyaki in a specified rectangular area at time t. Initially, all positions on the grill are empty. Input format H W T Q t_1 c_1 x_1 y_1 (x_2 y_2) t_2 c_2 x_1 y_1 (x_2 y_2) ... t_Q c_Q x_Q y_1 (x_Q y_2) Where: - H is the height of the grill. - W is the width of the grill. - T is the cooking time in minutes. - Q is the number of events. - t_i is the time in which the i-th event occurs. - c_i is the event type (0 for placing, 1 for eating, and 2 for counting). - (x_1, y_1) is the position for placing/eating or the top-left corner of the counting area. - (x_2, y_2) is only present for event type 2, the bottom-right corner of the counting area. Constraints: - 1 <= H <= 2000 - 1 <= W <= 2000 - 1 <= T <= 10^9 - 1 <= Q <= 100000 - 1 <= t_i <= 10^9 - 0 <= c_i <= 2 - 1 <= x_1 <= x_2 <= H - 1 <= y_1 <= y_2 <= W Output format For each counting event (c_i = 2), output the number of cooked and uncooked takoyaki in the specified area in the format: cooked uncooked Input example 3 3 3 5 1 0 1 1 2 2 1 1 2 2 4 1 1 1 5 0 2 2 6 2 1 1 3 3 Output example 0 1 1 0 Explanation In this example: 1. At time 1, a takoyaki is placed at (1, 1), which will be cooked at time 4. 2. At time 2, Ken counts the takoyaki in the area from (1, 1) to (2, 2). Since the takoyaki at (1, 1) is not yet cooked, the result is 0 cooked, 1 uncooked. 3. At time 4, Hotaru tries to eat the takoyaki at (1, 1). It is now cooked, so she eats it, and the position becomes empty. 4. At time 5, Ken places another takoyaki at (2, 2), which will be cooked at time 8. 5. At time 6, Ken counts the takoyaki in the area from (1, 1) to (3, 3). The takoyaki at (2, 2) is not yet cooked, so the result is 0 cooked, 1 uncooked.","solution":"class TakoyakiGrill: def __init__(self, H, W, T): self.H = H self.W = W self.T = T self.grill = [[None] * W for _ in range(H)] def place_takoyaki(self, time, x, y): if self.grill[x - 1][y - 1] is None: self.grill[x - 1][y - 1] = time def eat_takoyaki(self, time, x, y): if self.grill[x - 1][y - 1] is not None and self.grill[x - 1][y - 1] + self.T <= time: self.grill[x - 1][y - 1] = None def count_takoyaki(self, time, x1, y1, x2, y2): cooked = 0 uncooked = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): if self.grill[i][j] is not None: if self.grill[i][j] + self.T <= time: cooked += 1 else: uncooked += 1 return cooked, uncooked def handle_events(H, W, T, Q, events): grill = TakoyakiGrill(H, W, T) result = [] for event in events: t, c, x1, y1, *rest = event if c == 0: grill.place_takoyaki(t, x1, y1) elif c == 1: grill.eat_takoyaki(t, x1, y1) elif c == 2: x2, y2 = rest cooked, uncooked = grill.count_takoyaki(t, x1, y1, x2, y2) result.append(f\\"{cooked} {uncooked}\\") return result"},{"question":"A renowned scientist, Dr. Matrix, is studying a peculiar characteristic he calls \\"Palindrome Factorization\\". He has a hypothesis which states that any string can be broken down into a series of palindromic substrings. For instance, the string \\"ababa\\" can be factored in 3 different ways: \\"a|b|a|b|a\\", \\"aba|b|a\\" and \\"ababa\\". Your task is to help Dr. Matrix by writing a program that computes the minimum number of palindromic substrings that the input string can be broken into. INPUT: The input consists of a single line containing a string S of length N. OUTPUT: Output a single integer representing the minimum number of palindromic substrings that the input string S can be broken into. CONSTRAINTS: 1 ≤ N ≤ 1000 S consists of lowercase English letters only. SAMPLE INPUT: ababa SAMPLE OUTPUT: 1 Explanation: The string \\"ababa\\" is already a palindrome, so the minimum number of palindromic substrings it can be broken into is 1.","solution":"def min_palindrome_partitions(s): def is_palindrome(s): return s == s[::-1] n = len(s) dp = [0] * n for i in range(n): if is_palindrome(s[:i+1]): dp[i] = 1 else: dp[i] = float(\'inf\') for j in range(i): if is_palindrome(s[j+1:i+1]): dp[i] = min(dp[i], dp[j] + 1) return dp[-1] # Example usage s = \\"ababa\\" print(min_palindrome_partitions(s)) # Output: 1"},{"question":"Create a program that simulates a basic traffic light system and determines the state of the traffic light based on a given time in seconds. The traffic light cycles through three states: 1. Green for 60 seconds 2. Yellow for 5 seconds 3. Red for 55 seconds The cycle repeats indefinitely. Given the time in seconds since the beginning of a cycle, determine the current state of the traffic light. Input The input consists of a single integer T (0 ≤ T ≤ 10^6), which represents the time in seconds since the start of the traffic light cycle. Output Output \\"Green\\" if the traffic light is green, \\"Yellow\\" if it is yellow, and \\"Red\\" if it is red. Examples Input 45 Output Green Input 65 Output Yellow Input 130 Output Red","solution":"def traffic_light_state(T): Given the time in seconds since the start of the cycle, determines the current state of the traffic light. Parameters: T (int): The time in seconds since the start of the traffic light cycle. Returns: str: The state of the traffic light (\\"Green\\", \\"Yellow\\", or \\"Red\\"). cycle_time = 60 + 5 + 55 time_in_cycle = T % cycle_time if time_in_cycle < 60: return \\"Green\\" elif time_in_cycle < 60 + 5: return \\"Yellow\\" else: return \\"Red\\""},{"question":"A company has a scheduling system for its employees. Each employee can work on tasks that are assigned to them. Tasks have a start time and an end time, and each employee can only work on one task at a time. You are given a list of tasks for each employee and your task is to find out the maximum number of tasks an employee can complete. Input The input format consists of multiple lines. The first line contains an integer N (1 ≤ N ≤ 1000), the number of employees. The next N lines each contain a list of tasks for that employee. Each list starts with an integer M (1 ≤ M ≤ 1000), the number of tasks followed by M pairs of integers s and e representing the start and end time of the task respectively (1 ≤ s < e ≤ 1000000). Output For each employee, output the maximum number of tasks they can complete. Example Input: 2 3 1 3 2 5 4 6 4 1 2 2 3 3 4 4 5 Output: 2 4","solution":"def max_tasks_for_employee(task_list): Determines the maximum number of non-overlapping tasks an employee can complete. Args: task_list (list of tuple): A list of tuples where each tuple represents a task (start_time, end_time) Returns: int: The maximum number of non-overlapping tasks. # Sort tasks by their end time task_list.sort(key=lambda x: x[1]) max_tasks = 0 current_end_time = 0 for task in task_list: start_time, end_time = task if start_time >= current_end_time: max_tasks += 1 current_end_time = end_time return max_tasks def main(input_data): lines = input_data.strip().split(\'n\') N = int(lines[0]) result = [] for i in range(1, N + 1): task_info = list(map(int, lines[i].strip().split())) M = task_info[0] tasks = [(task_info[j], task_info[j + 1]) for j in range(1, 2 * M + 1, 2)] result.append(max_tasks_for_employee(tasks)) for res in result: print(res)"},{"question":"In a certain city, there is a hectic street where people often ignore traffic lights. To address this issue, the city has decided to install a new type of traffic light that changes its phase based on the density of pedestrians and vehicles. You are provided with the traffic light\'s schedule for changing its phases over a day in minutes. The traffic light has three phases: - Green (G) - Yellow (Y) - Red (R) The schedule is a string consisting of the characters \'G\', \'Y\', and \'R\'. Each character in the string represents the state of the traffic light for one minute in the 24-hour timeline (i.e., the length of the string is always 1440, which is 24 * 60). Given the schedule and a time (in minutes past midnight), determine the state of the traffic light at that specific time. Input The first line contains a single string s (|s| = 1440), the schedule of the traffic light. The second line contains a single integer t (0 ≤ t ≤ 1439), the time in minutes past midnight. Output Output a single character, the state of the traffic light at the given time. Examples Input GGGRRYYGGRR................................(String of length 1440, abbreviated for clarity) 10 Output G Input GYRGYRGYRGYR................................(String of length 1440, abbreviated for clarity) 144 Output Y","solution":"def traffic_light_state(schedule, time): Returns the state of the traffic light at the given time. Parameters: schedule (str): A string of length 1440 representing the traffic light schedule. time (int): The time in minutes past midnight (0 ≤ time ≤ 1439). Returns: str: The state of the traffic light at the given time (`G`, `Y`, or `R`). return schedule[time]"},{"question":"You are given an array of integers and your task is to determine the fewest number of operations required to make all the elements of the array equal. An operation consists of incrementing or decrementing an element of the array by 1. Input Format The first line contains an integer N, the number of elements in the array. Each of the next N lines contains an integer: the i-th line contains a[i]. Output Format Print a single integer representing the minimum number of operations required. Constraints 1 ≤ N ≤ 2*10^5 1 ≤ a[i] ≤ 10^9 Sample Input 4 1 3 6 9 Sample Output 7 Explanation One way to make all the elements equal with the fewest operations is to target the median of the array which in this case is 3. The number of operations is calculated as follows: |1 - 3| + |3 - 3| + |6 - 3| + |9 - 3| = 2 + 0 + 3 + 6 = 11","solution":"def minimum_operations_to_equal_elements(arr): Determines the minimum number of operations required to make all elements in the array equal. The optimal way is to aim for the median of the array. Args: arr (list of int): The array of integers. Returns: int: The fewest number of operations required. # Sort the array to find the median arr.sort() # Get the median (middle element) n = len(arr) median = arr[n // 2] if n % 2 == 1 else arr[(n // 2) - 1] # Calculate the number of operations required to make all elements equal to the median operations = sum(abs(x - median) for x in arr) return operations"},{"question":"# Problem Statement In a galaxy far, far away, there is a competitive programming platform called StarCoder. On StarCoder, each contestant is assigned a ranking class based on their accumulated points, P. Here is the classification system: * From 0 through 99 points: E-Class * From 100 through 199 points: D-Class * From 200 through 299 points: C-Class * From 300 through 399 points: B-Class * From 400 through 499 points: A-Class * 500 points and above: S-Class Given the points P a contestant has accumulated, determine their ranking class. # Constraints * 0 leq P leq 1000 * P is an integer. # Input Input is given from the Standard Input in the following format: ``` P ``` # Output Print the ranking class of the contestant based on their points, as a string. For example, if the contestant has E-Class, print `E`. # Examples Input ``` 350 ``` Output ``` B ``` Input ``` 525 ``` Output ``` S ```","solution":"def get_ranking_class(points): Returns the ranking class based on the given points. if points < 0 or points > 1000: raise ValueError(\\"Points should be between 0 and 1000 inclusive\\") if points < 100: return \'E\' elif points < 200: return \'D\' elif points < 300: return \'C\' elif points < 400: return \'B\' elif points < 500: return \'A\' else: return \'S\'"},{"question":"In a galaxy far, far away, there is a unique currency system. The inhabitants use various denominations of coins to make their transactions. However, the inhabitants want to know the number of unique ways to make a specific amount using any combination of the given denominations. You need to write a program that, given a list of available coin denominations and a target amount, calculates how many unique combinations of coins sum up to the target amount. Each type of coin is available in unlimited supply. -----Input----- Each input starts with a single integer `t` (1 ≤ t ≤ 50), representing the number of test cases. For each test case, there will be two lines: - The first line contains an integer `m` (1 ≤ m ≤ 100), representing the number of coin denominations, followed by `m` space-separated integers `a1, a2, ..., am` (1 ≤ ai ≤ 1000), representing the values of the denominations. - The second line contains an integer `n` (0 ≤ n ≤ 10000), representing the target amount. -----Output----- For each test case, output a single integer that represents the number of unique ways to make the target amount using the given coin denominations. As the number can be very large, return the result modulo 10^9 + 7. -----Examples----- Sample Input 1: 2 3 1 2 5 5 2 2 3 10 Sample Output 1: 4 2 Explanation of Sample Output: - For the first test case, the possible combinations to make the target amount 5 are: [1,1,1,1,1], [1,1,1,2], [1,2,2], [5]. - For the second test case, the possible combinations to make the target amount 10 are: [2,2,2,2,2], [2,2,3,3].","solution":"MOD = 10**9 + 7 def count_ways(m, denominations, n): # Create a list to store the number of ways to get each amount dp = [0] * (n + 1) dp[0] = 1 # Base case: There\'s exactly one way to get amount 0 (no coins) for coin in denominations: for amount in range(coin, n + 1): dp[amount] = (dp[amount] + dp[amount - coin]) % MOD return dp[n] def unique_combinations(t, test_cases): results = [] for i in range(t): m = test_cases[i][0] denominations = test_cases[i][1] n = test_cases[i][2] results.append(count_ways(m, denominations, n)) return results"},{"question":"One day, a group of n scientists decides to conduct an experiment with a unique set of robots. Each robot is assigned a number from 1 to n, and each number is unique. They have m commands to send to these robots. Each command is either to move a robot to a specific position or to query the current position of a robot. For each command, you need to process and return the requested information efficiently. -----Input----- - The first line contains two integers n and m, the number of robots and the number of commands, respectively. - The next m lines contain commands of two types: - Type 1: 1 i p — Move the i^{text{th}} robot to position p.(1 leq i leq n and 1 leq p leq 10^9) - Type 2: 2 i — Query the current position of the i^{text{th}} robot. (1 leq i leq n) -----Output----- For each command of type 2, print the position of the i^{text{th}} robot. -----Constraints----- - 1 leq n, m leq 10^5 -----Example Input----- 3 5 1 1 5 1 2 7 2 1 1 1 2 2 1 -----Example Output----- 5 2 Explanation: - In the first command, robot 1 is moved to position 5. - In the second command, robot 2 is moved to position 7. - The third command queries the position of robot 1, which is 5. - The fourth command moves robot 1 to position 2. - The fifth command queries the position of robot 1, which is now 2.","solution":"def manage_robots(n, m, commands): # Initialize positions of robots from 1 to n with None (no position) positions = [None] * (n + 1) # Output list to store results of type 2 commands output = [] # Process each command for command in commands: command = command.split() command_type = int(command[0]) robot_id = int(command[1]) # If command is of type 1 if command_type == 1: position = int(command[2]) positions[robot_id] = position # If command is of type 2 elif command_type == 2: output.append(positions[robot_id]) return output"},{"question":"Many people keep track of calendars of events, such as birthdays or holidays, using lists. Write a program to determine the next event from today on the calendar. The events are provided as pairs of month and day. Today’s date will also be provided as a pair of month and day. If an event is in the past for this year, then it should be treated as if it has been moved to the same date next year. For example, if today is February 20, and there is an event on January 25, then the event should be treated as happening on January 25 next year. If two events are on the same date, either one can be chosen. Example: Input: ``` 4 12 25 4 21 5 1 1 1 4 20 ``` Output: ``` 4 21 ``` Function Description Complete the `nextEvent` function in the below editor. `nextEvent` has the following parameter(s): `int n`: the number of events `int events[2*n]`: an array of integers where each pair represents the month and day of an event `int currentMonth`: the current month `int currentDay`: the current day Returns: `a pair of integers`: the month and day of the next event Input Format: The first line contains an integer `n`, the number of events. The second line contains `2*n` space-separated integers that represent the months and days of the events. The third line contains two space-separated integers that describe the current month and the current day. Constraints: 1 leq n leq 100 1 leq month leq 12 1 leq day leq 31 Each pair of month and day will represent a valid date. Output Format: Print next event\'s month and day separated by a space. Sample Input: ``` 3 8 13 2 18 3 22 3 21 ``` Sample Output: ``` 3 22 ``` Explanation: Given current date is March 21, the next event is on March 22. If the current date was March 23, the answer would have been August 13, and if the current date was February 17, it would have been February 18.","solution":"def nextEvent(n, events, currentMonth, currentDay): from datetime import datetime, timedelta today = datetime(year=2023, month=currentMonth, day=currentDay) min_diff = timedelta(days=365) # Initialize with 365 days which is the maximum difference within a year next_event = None for i in range(n): event_month = events[2 * i] event_day = events[2 * i + 1] event_date = datetime(year=2023, month=event_month, day=event_day) if event_date < today: event_date = datetime(year=2024, month=event_month, day=event_day) diff = event_date - today if diff < min_diff: min_diff = diff next_event = (event_date.month, event_date.day) return next_event"},{"question":"John is organizing a charity event and he needs to manage the donations. Each donor contributes a certain amount of money and a certain number of items. John needs to verify that the total value of donations matches the recorded total sum provided in a list. As John\'s assistant, you are assigned to confirm the correct total values. A donation\'s total value is calculated as the sum of the money and the product of item quantity and item value (total value = money + item_quantity * item_value). INPUT The first line of input contains the number M, the number of donations. The next M lines contain three space-separated integers: money, item_quantity, and item_value. OUTPUT Print \\"CORRECT\\" if the calculated total value matches the provided total value T (following each three integers on the same line). Otherwise, print \\"INCORRECT\\". Constraints 0 < money, item_quantity, item_value < 10000 0 < T < 1000000000 SAMPLE INPUT 4 100 5 20 200 200 3 50 350 150 10 10 250 300 2 75 450 SAMPLE OUTPUT CORRECT CORRECT INCORRECT CORRECT Explanation The first line indicates that there are 4 donations. 1st line: money = 100, item_quantity = 5, item_value = 20. Total value = 100 + 5*20 = 200. Output is \\"CORRECT\\". 2nd line: money = 200, item_quantity = 3, item_value = 50. Total value = 200 + 3*50 = 350. Output is \\"CORRECT\\". 3rd line: money = 150, item_quantity = 10, item_value = 10. Total value = 150 + 10*10 = 250, but provided total is 300. Output is \\"INCORRECT\\". 4th line: money = 300, item_quantity = 2, item_value = 75. Total value = 300 + 2*75 = 450. Output is \\"CORRECT\\".","solution":"def verify_donations(donations): Verifies if the calculated total donation value matches the provided total value for each donation. Parameters: donations (list): A list of tuples where each tuple contains (money, item_quantity, item_value, provided_total_value) Returns: list: A list containing \\"CORRECT\\" or \\"INCORRECT\\" for each donation. results = [] for donation in donations: money, item_quantity, item_value, provided_total_value = donation calculated_total_value = money + item_quantity * item_value if calculated_total_value == provided_total_value: results.append(\\"CORRECT\\") else: results.append(\\"INCORRECT\\") return results # Read input and produce output def read_input_and_verify(): import sys input = sys.stdin.read data = input().strip().split(\'n\') M = int(data[0]) donations = [] for i in range(1, M+1): parts = list(map(int, data[i].split())) donations.append(tuple(parts)) results = verify_donations(donations) for result in results: print(result)"},{"question":"You are given several items in a store, each with a name and a price. A special sale is being held where for every item you buy, you can get another item which is cheaper or the same price for free. Your task is to find the maximum value you can get by selecting items in pairs such that one item of each pair is considered free based on the sale rules. Write a program to determine the maximum total value you can obtain from the store given the sale conditions. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of items in the store. The next n lines each contain a string and an integer separated by a space: the name of the item (a string containing only uppercase and lowercase English letters with length [1, 100]) and the price of the item (an integer p, 1 ≤ p ≤ 10^9). Assume that all item names are unique. -----Output----- The first line should contain a single integer — the maximum total value obtainable from the store during the sale. -----Examples----- Input 5 A 10 B 40 C 30 D 50 E 20 Output 150 Input 3 Apple 100 Banana 50 Carrot 60 Output 210 Input 4 Book 300 Pen 20 Notebook 100 Pencil 10 Output 430 Note: In the first example, you can pair the items as follows: - Buy item D (50) and get item A (10) for free - Buy item B (40) and get item E (20) for free - Buy item C (30) The maximum value is 50 + 10 + 40 + 20 + 30 = 150.","solution":"def max_total_value(n, items): Calculate the maximum total value obtainable from the store during the sale. Parameters: n (int): The number of items in the store. items (list): A list of tuples where each tuple contains the name of the item (string) and its price (int). Returns: int: The maximum total value. # Sort items by price in descending order items.sort(key=lambda item: item[1], reverse=True) total_value = 0 # Traverse the list in steps of 2 and add the price of each item into total value for i in range(0, n, 2): total_value += items[i][1] if i + 1 < n: total_value += items[i + 1][1] return total_value"},{"question":"You are given an array of integers. Your task is to find the smallest positive integer that does not appear in the array. You should solve this problem with an algorithm that runs in O(n) time and uses O(1) additional space. -----Constraints----- - The array size will be between 1 and 10^5. - The array elements will be between -10^6 and 10^6. -----Input----- Input is given from Standard Input in the following format: n arr - n (1 ≤ n ≤ 100,000): the size of the array. - arr: a single line of integers separated by spaces. -----Output----- Print the smallest positive integer that does not appear in the array. -----Sample Input 1----- 5 1 3 6 4 1 2 -----Sample Output 1----- 5 -----Sample Input 2----- 4 1 2 3 4 -----Sample Output 2----- 5","solution":"def find_smallest_missing_positive(arr): Finds the smallest positive integer that does not appear in the array. Arguments: arr -- list of integers Returns: The smallest positive integer that does not appear in the array n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: # Swap arr[i] to its correct position if it\'s within the bounds arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Given a list of integers, your task is to find the total number of continuous subarrays whose sum is a given integer k. -----Input----- The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9), denoting the number of elements in the list and the target sum respectively. The second line contains n integers (|a_i| ≤ 10^4), representing the elements of the list. -----Output----- Print a single integer, the total number of continuous subarrays whose sum equals k. -----Examples----- Input 5 5 1 2 3 2 5 Output 3 Input 4 0 0 0 0 0 Output 10 Input 3 6 1 2 3 Output 1 -----Note----- In the first sample, the subarrays that sum to 5 are [2, 3], [3, 2], and [5]. In the second sample, every subarray including the empty subarrays sum to 0, so there are 10 such subarrays. In the third sample, the subarray [1, 2, 3] sums to 6.","solution":"def count_subarrays_with_sum_k(arr, k): Returns the total number of continuous subarrays whose sum equals `k`. :param arr: List of integers representing the array. :param k: Integer representing the target sum. :return: Integer representing the number of continuous subarrays with sum equal to `k`. from collections import defaultdict sum_count = defaultdict(int) sum_count[0] = 1 # To consider subarrays that sum to `k` starting from index 0 current_sum = 0 count = 0 for num in arr: current_sum += num if (current_sum - k) in sum_count: count += sum_count[current_sum - k] sum_count[current_sum] += 1 return count"},{"question":"Vlad likes to play with numbers and he has invented a new game. Given a series of integer numbers a_1, a_2, ..., a_n, he wants to find the longest subarray that satisfies the following condition: For every pair of indices i and j in the subarray (i < j), a_j should be divisible by a_i. He wonders what the length of such a subarray is. You are tasked to help him find the answer. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of elements in the series. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1 000 000 000), where a_i is the i-th element of the series. -----Output----- Print the length of the longest subarray that satisfies the condition. -----Examples----- Input 6 4 2 4 8 16 3 Output 4 Input 4 5 7 10 20 Output 2 -----Note----- In the first example, the longest subarray is [4, 8, 16, 3], while in the rest of the elements, no other subarrays with higher length satisfy the condition. In the second example, the longest subarray that satisfies the condition is either [10, 20] or [5, 10].","solution":"def longest_divisible_subarray_length(n, arr): if n == 1: return 1 max_len = 1 current_len = 1 for i in range(1, n): if arr[i] % arr[i - 1] == 0: current_len += 1 else: current_len = 1 max_len = max(max_len, current_len) return max_len"},{"question":"A balanced sequence is a sequence of characters where the number of occurrences of a specific set of characters (\'X\' and \'O\') is balanced. Each \'X\' balances with each \'O\' in the given string. Your task is to determine the longest balanced substring in a given string and return its length. If there is no balanced substring, return 0. Input The input contains one line of a string s (1 ≤ |s| ≤ 10^5) which contains only characters \'X\' and \'O\'. Output Output the length of the longest balanced substring. SAMPLE INPUT XXOXOOXOX SAMPLE OUTPUT 8 Explanation The longest balanced substring is \\"XXOXOOXO\\" which has an equal number of \'X\' and \'O\', hence its length is 8.","solution":"def longest_balanced_substring(s): Given a string s of characters \'X\' and \'O\', this function returns the length of the longest balanced substring where each \'X\' balances with each \'O\'. max_length = 0 balance = 0 balance_map = {0: -1} # Initialize with balance 0 at index -1 for i, char in enumerate(s): if char == \'X\': balance -= 1 else: balance += 1 if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length"},{"question":"Given an integer array nums, find the maximum difference between the increasing and non-overlapping subarrays, i.e., (max(subarray1) - min(subarray2)), where subarray1 and subarray2 are non-overlapping increasing subarrays in the array. Example 1: Input: nums = [1, 3, 6, 2, 9, 7, 11, 4] Output: 7 Explanation: Possible subarrays are subarray1 = [1, 3, 6], subarray2 = [7, 11], and the result is (11 - 4) = 7. Example 2: Input: nums = [10, 1, 10, 1, 10, 1] Output: 9 Explanation: Possible subarrays are subarray1 = [10], subarray2 = [1], and the result is (10 - 1) = 9. Your Task: The task is to complete the function maxDifference() that takes an integer array nums and returns the maximum difference as described. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4","solution":"def maxDifference(nums): if len(nums) < 2: return 0 max_diff = 0 min_val = float(\'inf\') max_val = float(\'-inf\') for i in range(len(nums)): if i > 0 and nums[i] <= nums[i-1]: max_diff = max(max_diff, max_val - min_val) min_val = nums[i] max_val = nums[i] else: min_val = min(min_val, nums[i]) max_val = max(max_val, nums[i]) max_diff = max(max_diff, max_val - min_val) return max_diff"},{"question":"Given the following grid of hills and valleys, determine the number of contiguous regions of hills. Each hill has an elevation of \'1\' and each valley has an elevation of \'0\'. Hills are considered contiguous if they are adjacent horizontally or vertically (but not diagonally). You will be provided with the dimensions of the grid followed by the grid itself. The goal is to count how many distinct groups of contiguous hills are present in the grid. Input Format N M grid * The first line contains two integers N and M, the number of rows and columns in the grid. * The next N lines each contain M characters, representing the grid where \'1\' is a hill and \'0\' is a valley. Constraints * 1 ≤ N, M ≤ 50 * grid[i][j] is either \'1\' or \'0\' Output Format Print the number of distinct groups of contiguous hills. Example 1 Input 5 5 11100 11000 00100 00011 00011 Output 3 Example 2 Input 4 4 1100 1110 0111 0000 Output 1","solution":"def count_contiguous_hills(N, M, grid): def dfs(i, j): if i < 0 or i >= N or j < 0 or j >= M or grid[i][j] == \'0\': return grid[i][j] = \'0\' dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) count = 0 for i in range(N): for j in range(M): if grid[i][j] == \'1\': dfs(i, j) count += 1 return count"},{"question":"A popular problem in graph theory is the Shortest Path Problem, where the goal is to find the shortest path between two vertices in a weighted graph. In this task, you are asked to implement Dijkstra\'s algorithm to solve the single-source shortest path problem for a given graph. Write a program that reads the description of a directed graph with non-negative edge weights, and an integer source vertex. The program should then print the shortest path from the source to all other vertices in the graph. The graph is represented as follows: - The first line contains two integers, V (the number of vertices) and E (the number of edges). - The next E lines each contain three integers u, v, and w, representing a directed edge from vertex u to vertex v with weight w. - The last line contains a single integer, the source vertex. The graph contains at most 1000 vertices and 10000 edges, and the vertex numbers are zero-indexed. Input The input consists of a single test case in the following format: V E u1 v1 w1 u2 v2 w2 ... uE vE wE source Output For each vertex v in the graph, print the shortest distance from the source to v. If a vertex is unreachable from the source, print \\"INF\\". Example Input 5 6 0 1 2 0 2 4 1 2 1 1 3 7 2 4 3 3 4 1 0 Output 0 2 3 9 6","solution":"import heapq def dijkstra(V, edges, source): graph = {i: [] for i in range(V)} for u, v, w in edges: graph[u].append((v, w)) distances = [float(\'inf\')] * V distances[source] = 0 priority_queue = [(0, source)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [\\"INF\\" if dist == float(\'inf\') else dist for dist in distances] def single_source_shortest_path(V, E, edges, source): return dijkstra(V, edges, source) # Example usage: # edges = [(0, 1, 2), (0, 2, 4), (1, 2, 1), (1, 3, 7), (2, 4, 3), (3, 4, 1)] # print(single_source_shortest_path(5, 6, edges, 0))"},{"question":"Akash loves strings and he is currently learning about palindromes. A palindrome is a string that reads the same forwards and backwards. While practicing, he came across a problem where he needs to check if a given string can be rearranged to form a palindrome. Help Akash by writing a function that determines whether the given string can be rearranged to form a palindrome. ------ Input Format ------ - The first line will contain T, the number of test cases. Then T test cases follow. - Each test case consists of a single string S, which contains only lowercase English letters. ------ Output Format ------ For each test case, output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 ------ Sample Input 1 ------ 3 civic ivicc hello ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test case 1: The string \\"civic\\" is already a palindrome. Thus, the answer is \\"YES\\". Test case 2: The string \\"ivicc\\" can be rearranged to form the palindrome \\"civic\\". Thus, the answer is \\"YES\\". Test case 3: There is no possible way to rearrange the string \\"hello\\" to form a palindrome. Thus, the answer is \\"NO\\".","solution":"def can_form_palindrome(s): Check if the given string can be rearranged to form a palindrome. Args: s (str): Input string containing lowercase English letters Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\" from collections import Counter count = Counter(s) # A string can form a palindrome if at most one character has an odd count odd_count = sum(1 for v in count.values() if v % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def check_palindrome_cases(test_cases): Given multiple test cases, determine if each string can be rearranged to form a palindrome. Args: test_cases (list of str): List containing test case strings Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each test case return [can_form_palindrome(s) for s in test_cases]"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine whether it is possible to split the string into two non-empty parts such that both parts consist of distinct characters. For example, given the string \\"abac\\", we can split it into \\"ab\\" and \\"ac\\". Both \\"ab\\" and \\"ac\\" consist of distinct characters. Hence, the answer is \\"YES\\". However, if the string is \\"aaaa\\", it cannot be split into two parts where both parts have unique characters. Therefore, the answer is \\"NO\\". -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains one string s (1 le |s| le 1000), where |s| is the length of the string. It is guaranteed that the sum of lengths of all strings over all test cases will not exceed 1000. -----Output----- For each test case, print \\"YES\\" if the string can be split into two parts where both parts consist of distinct characters, and \\"NO\\" otherwise. -----Examples----- Input 4 abac abcd aaaa abab Output YES YES NO YES -----Note----- In the first test case, the string \\"abac\\" can be split into \\"ab\\" and \\"ac\\". In the second test case, the string \\"abcd\\" can be split into \\"ab\\" and \\"cd\\". In the third test case, there is no way to split \\"aaaa\\" into two parts with distinct characters. In the fourth test case, \\"abab\\" can be split into \\"ab\\" and \\"ab\\".","solution":"def can_split_string(s): Determine if a string s can be split into two non-empty parts with distinct characters. n = len(s) # We need to find at least two distinct characters to make the split possible. distinct_chars = set(s) # If the number of distinct characters is less than 2, we cannot perform the required split if len(distinct_chars) < 2: return \\"NO\\" # Otherwise, we can find a valid split return \\"YES\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(can_split_string(s)) return results"},{"question":"You are given two strings, S1 and S2. Determine if S1 is a subsequence of S2. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. Constraints * 1 <= len(S1), len(S2) <= 1000 * S1 and S2 contain only lowercase English letters. Input Input is given from Standard Input in the following format: S1 S2 Output If S1 is a subsequence of S2, print `YES`; if it is not, print `NO`. Examples Input abc ahbgdc Output YES Input axc ahbgdc Output NO Input ace abcde Output YES Input aec abcde Output NO","solution":"def is_subsequence(S1, S2): Determines if S1 is a subsequence of S2. iter_s2 = iter(S2) return all(char in iter_s2 for char in S1) def check_subsequence(S1, S2): if is_subsequence(S1, S2): return \\"YES\\" else: return \\"NO\\""},{"question":"Mike works as a software developer and is currently working on optimizing code performance. He is given an array `nums` of length `n`, consisting of integers, and he needs to perform `m` operations on this array. Each operation can be one of the following kinds: 1. `Add x`: Increase all elements in the array by `x`. 2. `Multiply x`: Multiply all elements in the array by `x`. 3. `SetMax x`: All elements in the array that are greater than `x` should be set to `x`. Mike wants to determine what the final array will look like after all operations have been applied sequentially. Write a function that takes `n`, `m`, the array `nums`, and a list of `m` operations, and returns the final state of the array after applying all operations. If there are multiple ways to achieve the result, any of them will be accepted. Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 10^5). - The second line contains `n` integers `nums[i]` (1 ≤ nums[i] ≤ 10^9). - The following `m` lines describe the operations. Each line starts with a string (`\\"Add\\"`, `\\"Multiply\\"`, or `\\"SetMax\\"`) followed by an integer `x` (1 ≤ x ≤ 10^9). Output: - Print the final state of the array after performing all operations. Example: Input: ``` 5 3 1 3 5 7 9 Add 2 Multiply 3 SetMax 10 ``` Output: ``` 9 9 9 9 9 ``` Explanation: 1. After `Add 2`, the array becomes `[3, 5, 7, 9, 11]`. 2. After `Multiply 3`, the array becomes `[9, 15, 21, 27, 33]`. 3. After `SetMax 10`, all elements greater than 10 are set to 10, resulting in `[9, 10, 10, 10, 10]`. Note: The operations should be applied in the given order. If there are multiple ways to apply them sequentially and achieve the same result, any valid result is acceptable.","solution":"def process_operations(n, m, nums, operations): Applies a sequence of operations on an array and returns the final state of the array. Args: n (int): Length of the array. m (int): Number of operations to be performed. nums (list): The initial array. operations (list): A list of operations to be applied sequentially. Returns: list: The final state of the array after all operations have been applied. for operation in operations: op, x = operation if op == \\"Add\\": nums = [num + x for num in nums] elif op == \\"Multiply\\": nums = [num * x for num in nums] elif op == \\"SetMax\\": nums = [min(num, x) for num in nums] return nums"},{"question":"You are given a 2D board of characters and a list of words. Write a function that searches for every word in the list on the board. A word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally, vertically, or diagonally neighboring. The same letter cell cannot be used more than once for a particular word. Return all the words that can be found in the board. Example 1: Input: board = [ [\'o\',\'a\',\'a\',\'n\'], [\'e\',\'t\',\'a\',\'e\'], [\'i\',\'h\',\'k\',\'r\'], [\'i\',\'f\',\'l\',\'v\'] ] words = [\\"oath\\",\\"pea\\",\\"eat\\",\\"rain\\"] Output: [\\"oath\\", \\"eat\\"] Example 2: Input: board = [ [\'a\',\'b\'], [\'c\',\'d\'] ] words = [\\"abcb\\"] Output: [] Explanation: The word \\"abcb\\" cannot be formed from the cells of the board because it reuses the \'b\' cell. Note: 1. The input board is a 2D character array. 2. The input words list is an array of strings. 3. Each possible word can only use each cell once per word. 4. Words can be found in different directions: adjacent horizontally, vertically, or diagonally neighboring cells.","solution":"def findWords(board, words): def dfs(board, word, i, j, index): if index == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or word[index] != board[i][j]: return False temp = board[i][j] board[i][j] = \\"#\\" for x, y in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1), (i + 1, j + 1), (i + 1, j - 1), (i - 1, j + 1), (i - 1, j - 1)]: if dfs(board, word, x, y, index + 1): board[i][j] = temp return True board[i][j] = temp return False result = [] for word in words: found = False for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0] and dfs(board, word, i, j, 0): result.append(word) found = True break if found: break return result"},{"question":"Write a function to convert an integer to its corresponding Excel column title. In Excel, column titles follow a pattern: - A, B, C, ..., Z (for columns 1 to 26) - AA, AB, AC, ..., AZ, BA, BB, ..., ZZ (for columns 27 to 702) - AAA, AAB, ..., AAZ, ABA, ..., etc. The given integer n will be positive and fit within the range of an Excel column: 1 ≤ n ≤ 231 - 1 Your task is to create a function that accepts an integer n and returns the corresponding column title as a string. **Input** An integer n (1 ≤ n ≤ 231 - 1). **Output** A string representing the Excel column title for the given integer. **Function Signature** ```python def convert_to_title(n: int) -> str: ``` **Example** _Input:_ ``` n = 1 ``` _Output:_ ``` \\"A\\" ``` _Input:_ ``` n = 28 ``` _Output:_ ``` \\"AB\\" ``` _Input:_ ``` n = 701 ``` _Output:_ ``` \\"ZY\\" ``` **Explanation** The example provided should help clarify the pattern used: - For n = 1, the column title is \\"A\\". - For n = 28, the column title proceeds past \\"Z\\" and so next sequences start from \\"A\\" again, hence \\"AB\\". - For n = 701, we cycle through the alphabet replacing \\"Z\\" and proceed to \\"Y\\" resulting in \\"ZY\\".","solution":"def convert_to_title(n: int) -> str: result = [] while n > 0: n -= 1 # Decrease n by 1 to handle 1-based index remainder = n % 26 result.append(chr(65 + remainder)) # Convert to corresponding ASCII character n //= 26 return \'\'.join(result[::-1]) # Reverse the result and join as string"},{"question":"Alice is an avid gardener and has a garden full of a variety of plants. She wants to organize her garden such that a certain number of plants are grouped together in clusters based on their types. Each type of plant is represented by an integer. Alice wants to know how many times the most frequent plant type appears in her garden to determine which plant type should be given the most attention. Given a list of integers where each integer represents a plant type, you need to determine the frequency of the most common plant type. Input The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of plants in the garden. The second line contains N space-separated integers representing the plant types. Output For each test case, output a single integer representing the frequency of the most common plant type in the garden. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 1 ≤ plant_type ≤ 1000000 Example Input: 2 5 1 2 2 3 1 6 4 4 4 2 2 3 Output: 2 3","solution":"from collections import Counter def most_frequent_plants(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] plant_types = test_cases[i][1] counter = Counter(plant_types) most_common_count = counter.most_common(1)[0][1] results.append(most_common_count) return results"},{"question":"There is a string s consisting of lowercase English letters and an integer k. In one operation, you can choose any character c in the string and remove all occurrences of c from the string. You need to determine whether it\'s possible to perform the operations in such a way that after k operations, the remaining string contains exactly one unique character. If it\'s possible, output the minimal number of operations needed to achieve this; otherwise, output -1. -----Input----- The first line contains an integer k (1 ≤ k ≤ |s|), the number of operations to perform. The second line contains the string s (1 ≤ |s| ≤ 100 000), consisting of lowercase English letters. -----Output----- Print a single integer denoting the minimal number of operations to perform to achieve the goal, or -1 if it\'s impossible. -----Examples----- Input 2 aaabccc Output 2 Input 1 aaaaa Output 0 Input 3 abcdef Output 3 -----Note----- In the first example, you can remove all \'b\' and all \'a\' in two operations, resulting in the string \\"ccc\\", which contains only one unique character. In the second example, the string already consists of just one unique character, so no operations are needed. In the third example, since every character is unique and we need exactly three operations, we must remove each character one by one, thus resulting in an empty string after three operations, which cannot be achieved. Hence, it\'s impossible to end up with just one unique character.","solution":"def minimal_operations(k, s): # Count the frequency of each character in the string from collections import Counter freq = Counter(s) # Get the number of unique characters unique_chars = len(freq) # If there are less than or equal to k + 1 unique characters, # it\'s possible to end up with one unique character if unique_chars <= k + 1: return unique_chars - 1 # Otherwise, it\'s impossible return -1"},{"question":"Sam, a logistics manager, is tasked with optimizing the delivery routes for his company. The goal is to minimize the distance traveled by delivery trucks to ensure fuel efficiency and timely deliveries. Given a set of coordinates representing delivery locations, Sam wants to determine the minimum total distance that the trucks would have to travel if they visit every delivery location exactly once and return to the starting point (which can be any delivery location). This problem can be modeled as the Traveling Salesman Problem (TSP), where the goal is to find the shortest possible route that visits each location exactly once and returns to the original location. -----Input----- The input begins with an integer n (2 leq n leq 10) representing the number of delivery locations. Each of the next n lines contains two integers x and y (0 leq x, y leq 100) representing the coordinates of a delivery location. -----Output----- Output a single floating-point number representing the minimum total travel distance rounded to two decimal places. -----Examples----- Sample Input: 4 0 0 2 0 2 2 0 2 Sample Output: 8.00","solution":"import itertools import math def calculate_distance(point1, point2): Returns the Euclidean distance between two points. return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) def tsp_min_distance(n, coordinates): Returns the minimum total travel distance for the TSP problem. min_distance = float(\'inf\') for perm in itertools.permutations(coordinates): distance = sum(calculate_distance(perm[i], perm[i + 1]) for i in range(n - 1)) distance += calculate_distance(perm[-1], perm[0]) # return to the starting point min_distance = min(min_distance, distance) return round(min_distance, 2)"},{"question":"Olivia and her friend Nathan are developing a new game. In this game, there are `N` cells arranged in a line, numbered from `1` to `N`. Some of these cells contain traps, while others are safe. The goal of the game is to jump from the start (cell `1`) to the end (cell `N`) using a predetermined set of jump lengths, while avoiding traps. You are given a list of `P` possible jump lengths, and the locations of `T` traps on the board. Olivia wants to know if it is possible to reach the end of the board using only the given jump lengths and without landing on any trap cells. If it is possible, Nathan wants to know the minimum number of jumps required to reach the end. -----Input----- The first line of input contains three integers `N`, `P`, and `T` (`1 ≤ N, P, T ≤ 1000`), representing the number of cells, the number of possible jump lengths, and the number of traps respectively. The second line contains `P` integers, representing the possible jump lengths. The third line contains `T` integers, representing the positions of the traps. -----Output----- Output a single integer representing the minimum number of jumps required to reach the end of the board. If it is not possible to reach the end, output `-1`. -----Examples----- Sample Input 1: 10 3 2 2 3 5 3 6 Sample Output 1: 3 Sample Input 2: 10 2 3 2 5 3 6 8 Sample Output 2: -1","solution":"from collections import deque def minimum_jumps(N, P, T, jumps, traps): trap_set = set(traps) if N in trap_set: return -1 visited = [False] * (N + 1) queue = deque([(1, 0)]) # (current_position, jumps_count) visited[1] = True while queue: position, jump_count = queue.popleft() if position == N: return jump_count for jump in jumps: new_position = position + jump if new_position > N: continue if new_position not in trap_set and not visited[new_position]: visited[new_position] = True queue.append((new_position, jump_count + 1)) return -1"},{"question":"You are provided with a matrix of dimensions n x m containing different positive integers. Your task is to determine if there exists a submatrix of dimensions k x k in which all rows and columns contain distinct values. Input The first line contains three space-separated integers n, m, and k (1 ≤ k ≤ min(n, m) ≤ 200), which are the dimensions of the matrix and the size of the submatrix, respectively. The next n lines each contain m space-separated integers representing the elements of the matrix. Output If there is such a k x k submatrix, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 4 5 2 1 2 3 4 5 5 6 7 8 9 9 10 11 12 13 13 14 15 16 17 Output YES Input 3 4 3 1 2 3 4 5 6 7 8 9 10 11 12 Output YES Input 5 5 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Output YES Input 4 4 4 1 2 3 4 5 2 1 3 9 5 6 7 7 8 9 6 Output NO","solution":"def has_distinct_submatrix(matrix, n, m, k): def is_distinct(matrix, pi, pj, k): for row in range(pi, pi + k): if len(set(matrix[row][pj:pj + k])) != k: return False for col in range(pj, pj + k): if len(set(row[col] for row in matrix[pi:pi + k])) != k: return False return True for i in range(n - k + 1): for j in range(m - k + 1): if is_distinct(matrix, i, j, k): return \\"YES\\" return \\"NO\\""},{"question":"Given an array arr[ ] of n integers, for each element, find the closest smaller element on its right, if none exists return -1. Example 1: Input: n = 7 arr[] = {4, 5, 2, 10, 8, 6, 7} Output: 2 2 -1 8 6 -1 -1 Explanation: For arr[0] ie, 4, the closest smaller element on its right is 2. For arr[1] ie, 5, the closest smaller element on its right is 2. For arr[2] ie, 2, there is no smaller element on its right, so -1 is printed. Similarly, for other elements. Example 2: Input: n = 5 arr[] = {6, 3, 4, 5, 2} Output: 3 2 2 2 -1 Your task: Your task is to complete the function find_closest_smaller_on_right() which takes two parameters arr and n. This function returns the answer (as a list of integers) as explained above. Expected time complexity: O(n) Expected space complexity: O(n) Constraints: 1 <= n <= 10^{4} 1 <= arr[i] <= 10^{4}","solution":"def find_closest_smaller_on_right(arr, n): For each element in the array arr, finds the closest smaller element on its right. If none exists, returns -1 for that element. :param arr: List[int] - List of n integers :param n: int - The length of the list :return: List[int] - List of integers that represents the closest smaller elements on the right result = [-1] * n stack = [] for i in range(n - 1, -1, -1): while stack and stack[-1] >= arr[i]: stack.pop() if stack: result[i] = stack[-1] stack.append(arr[i]) return result"},{"question":"Masha has a rectangular grid of size n × m and q queries. Initially, all the cells in the grid are empty. Masha will execute several toggle operations on this grid. Each toggle operation switches the state of a cell from empty to filled or from filled to empty. For each query, you are given the positions on the grid where Masha will perform toggle operations, in the order they appear in the input. After each toggle operation, you need to determine the number of filled cells in the grid. -----Input----- The first line of the input contains three integers n, m, and q (1 ≤ n, m ≤ 100 000, 1 ≤ q ≤ 100 000) — the size of the grid and the number of queries. Each of the next q lines contains two integers x_{i} and y_{i} (1 ≤ x_{i} ≤ n, 1 ≤ y_{i} ≤ m) — the number of the row and the number of the column where Masha performs the i-th toggle operation. ------Output------ Print q integers, the i-th of them should be equal to the number of filled cells in the grid after the i-th toggle operation. -----Examples----- Input 3 3 3 1 1 3 1 1 1 Output 1 2 1 Input 4 4 2 2 2 2 2 Output 1 0 Input 5 5 5 1 1 2 2 3 3 4 4 5 5 Output 1 2 3 4 5 -----Note----- Consider the first example: - After toggling cell (1,1) once, it becomes filled and the total filled cells are 1. - After toggling cell (3,1), it becomes filled and the total filled cells are 2. - After toggling cell (1,1) again, it becomes empty and the total filled cells are 1.","solution":"def count_filled_cells(n, m, q, queries): This function processes a series of toggle operations on an n x m grid and returns the state of the filled cells count after each toggle. :param n: int, number of rows :param m: int, number of columns :param q: int, number of queries :param queries: list of tuples, each tuple contains (x, y) positions to toggle :return: list of int, filled cell count after each query filled_cells = set() filled_count = [] for x, y in queries: if (x, y) in filled_cells: filled_cells.remove((x, y)) else: filled_cells.add((x, y)) filled_count.append(len(filled_cells)) return filled_count"},{"question":"Roy is working on upgrading his old Nokia cell phone\'s core software. He needs to implement a feature that automatically suggests the next word a user might type based on the history of previously typed words. To achieve this, Roy decided to implement a simplified version of text prediction. Given a list of sentences, where each sentence is a sequence of words separated by spaces, Roy wants to count how many times each word appears immediately after a specific given word. This will help him determine the most frequent \\"next word\\" for any given word. Write a function that takes the list of sentences and a word as input, and returns the word that most frequently appears immediately after the given word. If there are multiple words with the same highest frequency, return the one which is lexicographically smallest. Input: 1. An integer N representing the number of sentences. 2. N lines, each containing a single sentence (all words are lowercase letters and separated by single spaces). 3. A single word W for which we need to find the most frequently occurring next word. Output: A single word that most frequently appears immediately after W. If there are multiple correct answers, return the lexicographically smallest one. Constraints: 1 ≤ N ≤ 100 1 ≤ |sentence| ≤ 1000 for any of the N sentences 1 ≤ |W| ≤ 10 SAMPLE INPUT 4 hello world world of coding hello there world world world world hello world SAMPLE OUTPUT world","solution":"from collections import defaultdict def most_frequent_next_word(sentences, target_word): next_word_count = defaultdict(int) for sentence in sentences: words = sentence.split() for i in range(len(words) - 1): if words[i] == target_word: next_word_count[words[i + 1]] += 1 if not next_word_count: return \'\' max_count = max(next_word_count.values()) candidates = [word for word, count in next_word_count.items() if count == max_count] return min(candidates) # Example usage: N = 4 sentences = [ \\"hello world\\", \\"world of coding\\", \\"hello there world\\", \\"world world world hello\\" ] target_word = \\"world\\" print(most_frequent_next_word(sentences, target_word)) # Output: \\"world\\""},{"question":"A company manages a series of events, each characterized by a start time and an end time. Given a list of events, the goal is to find the maximum number of non-overlapping events that can be attended. Each event is represented as a pair of integers where the first integer is the start time and the second integer is the end time. An event [a, b] is considered non-overlapping with another event [c, d] if and only if b <= c or d <= a. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of events. - The next N lines each contain two space-separated integers a and b denoting the start and end time of an event. -----Output----- For each test case, print a single line containing one integer - the maximum number of non-overlapping events that can be attended. -----Constraints----- - 1 le T le 100 - 1 le N le 100,000 - 1 le a < b le 10^9 -----Example Input----- 2 3 1 2 2 3 3 4 3 1 2 2 4 1 3 -----Example Output----- 3 2 -----Explanation----- Example case 1: All three events can be attended as they don\'t overlap. Example case 2: The maximum number of non-overlapping events is 2 (choose event [1, 2] and event [2, 4]).","solution":"def max_non_overlapping_events(test_cases): results = [] for events in test_cases: # Sort events by their end time events.sort(key=lambda x: x[1]) count = 0 last_end_time = float(\'-inf\') for start, end in events: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"A group of data analysts are working with a large structured database, where each row represents a different transaction, and each column represents a different attribute of that transaction. One specific attribute is the \'Category\' of the transaction, which can have several predefined categories. Your task is to help the analysts by writing a function that, given a list of transactions and multiple specific categories, determines the number of transactions that match at least one of the specific categories. The input consists of: 1. An integer T, representing the number of transactions. 2. T lines follow, each containing a string representing a category of a single transaction. 3. An integer C, representing the number of specific categories to be matched. 4. C lines follow, each containing a string representing a specific category to match. Output: - A single integer representing the number of transactions that match at least one of the specific categories. Input constraints: - 1 ≤ T ≤ 10^5 - 1 ≤ length of each category string ≤ 20 - 1 ≤ C ≤ 100 Example Input: 10 food electronics clothing grocery healthcare automotive food healthcare travel electronics 3 food electronics travel Example Output: 5 Explanation: - In the sample input, there are 10 transactions and the categories are \'food\', \'electronics\', \'clothing\', \'grocery\', \'healthcare\', \'automotive\', \'food\', \'healthcare\', \'travel\', \'electronics\'. - The categories to match are \'food\', \'electronics\', and \'travel\'. - Transactions that match at least one of these categories are: \'food\', \'electronics\', \'food\', \'travel\', \'electronics\', so the answer is 5.","solution":"def count_matching_transactions(transactions, specific_categories): Counts the number of transactions that match at least one of the specific categories. Parameters: transactions (list of str): List representing the category of each transaction. specific_categories (list of str): List of specific categories to match. Returns: int: Number of transactions that match at least one of the specific categories. specific_category_set = set(specific_categories) count = 0 for transaction in transactions: if transaction in specific_category_set: count += 1 return count # Example usage: # transactions = [\\"food\\", \\"electronics\\", \\"clothing\\", \\"grocery\\", \\"healthcare\\", # \\"automotive\\", \\"food\\", \\"healthcare\\", \\"travel\\", \\"electronics\\"] # specific_categories = [\\"food\\", \\"electronics\\", \\"travel\\"] # print(count_matching_transactions(transactions, specific_categories)) # Output: 5"},{"question":"A programming contest is held where each team has to solve some problems within a limited time. The problems are designed in such a way that some of them can only be attempted after solving certain preliminary problems. You are given the number of problems `P`, the number of dependencies `D`, and a list of dependencies. Each dependency is represented as a pair `(X, Y)` indicating that problem `Y` can only be attempted after problem `X` has been solved. Determine the maximum number of problems that can be solved in sequence such that each problem in the sequence follows their dependency requirements. If there is a cycle in the dependencies making it impossible to solve any problems without breaking the rules, return `-1`. ------ Input ------ The first line contains a single integer `T`, the number of test cases. The description of the test cases follows. The first line of each test case contains two integers `P` and `D`. Each of the next `D` lines contains two integers `X` and `Y` denoting a dependency. ------ Output ------ For each test case, print a single integer - the maximum number of problems that can be solved in sequence, or `-1` if it\'s not possible to solve problems without breaking dependencies. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ P ≤ 10^{4} 0 ≤ D ≤ 10^{5} 1 ≤ X, Y ≤ P ------ Sample Input 1 ------ 2 5 4 1 2 2 3 3 4 4 5 4 4 1 2 2 3 3 4 4 2 ------ Sample Output 1 ------ 5 -1 ------ Explanation 1 ------ For the first test case: - We can solve the problems in the sequence `1 -> 2 -> 3 -> 4 -> 5`, giving a maximum of 5 problems solved in sequence. For the second test case: - The dependency sequence `4 -> 2` conflicts with existing dependencies as it creates a cycle, making it impossible to solve the problems without breaking the rules, thus the output is `-1`.","solution":"from collections import defaultdict, deque def max_problems_solved(T, cases): def topological_sort(graph, in_degree, P): queue = deque() for i in range(1, P + 1): if in_degree[i] == 0: queue.append(i) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topo_order) == P: return len(topo_order) else: return -1 results = [] for P, D, dependencies in cases: graph = defaultdict(list) in_degree = [0] * (P + 1) for X, Y in dependencies: graph[X].append(Y) in_degree[Y] += 1 result = topological_sort(graph, in_degree, P) results.append(result) return results def process_input_output(): import sys input = sys.stdin.read data = input().strip().split() index = 0 T = int(data[index]) index += 1 cases = [] for _ in range(T): P = int(data[index]) D = int(data[index + 1]) index += 2 dependencies = [] for _ in range(D): X = int(data[index]) Y = int(data[index + 1]) index += 2 dependencies.append((X, Y)) cases.append((P, D, dependencies)) results = max_problems_solved(T, cases) for result in results: print(result)"},{"question":"A museum has an array of art pieces where each art piece has a unique unique identifier as the position of the array. Each art piece identifier can be damaged. You need to perform a series of operations to manage the collection of art pieces: marking them as damaged and retrieving the list of non-damaged art pieces. * damage(index): Mark the art piece at the given index as damaged. * get_undamaged(): Return the list of indices of art pieces that are not damaged. Constraints * 1 leq n leq 100,000 (number of art pieces) * 1 leq q leq 200,000 (number of operations) * 0 leq index leq n - 1 Input The input is given in the following format: n q query_1 query_2 : query_q Each query query_i is given by 0 index or 1 where the first digits 0 and 1 represent damage and get_undamaged operations respectively. Output For each get_undamaged operation, output the list of indices of non-damaged art pieces in a single line. Indices should be space-separated. Example Input 5 6 0 1 0 3 1 0 2 1 0 0 Output 0 2 3 4 0 3 4","solution":"class ArtCollection: def __init__(self, n): Initialize the art collection with n art pieces. self.art_pieces = [True] * n # True means undamaged def damage(self, index): Mark the art piece at the given index as damaged. if 0 <= index < len(self.art_pieces): self.art_pieces[index] = False def get_undamaged(self): Return the list of indices of art pieces that are not damaged. return [i for i, is_undamaged in enumerate(self.art_pieces) if is_undamaged]"},{"question":"You are given an array of integers. An array is called *nearly sorted* if for each array element, the difference between its position in the nearly sorted array and its position in the completely sorted array is at most one. In other words, each element in the nearly sorted array can be moved by at most one position to get the array sorted. Given an integer array, determine if it\'s nearly sorted or not. ------ Input Format ------ - The first line of the input contains an integer T - the number of test cases. - The first line of each test case contains an integer N - the length of the array. - The second line of each test case contains N integers separated by space, representing the array elements. ------ Output Format ------ For each test case, output on a single line YES if the array is nearly sorted, or NO otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ A_i ≤ 10^6 ------ Sample Input 1 ------ 3 5 1 3 2 4 5 4 4 3 2 1 5 2 1 3 4 5 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ - Test case 1: Array [1, 3, 2, 4, 5] is nearly sorted because swapping 3 and 2 results in a sorted array. - Test case 2: Array [4, 3, 2, 1] is not nearly sorted because the distance each number needs to move is greater than one. - Test case 3: Array [2, 1, 3, 4, 5] is nearly sorted because swapping 2 and 1 results in a sorted array.","solution":"def is_nearly_sorted_array(arr): Determines if the given array is nearly sorted. Args: arr (list of int): The array to check. Returns: bool: True if the array is nearly sorted, False otherwise. n = len(arr) sorted_arr = sorted(arr) for i in range(n): if abs(sorted_arr.index(arr[i]) - i) > 1: return False return True def process_cases(T, cases): Processes multiple test cases. Args: T (int): Number of test cases. cases (list of tuples): Each tuple contains an integer N and a list of integers. Returns: list of str: For each case, \\"YES\\" if the array is nearly sorted, otherwise \\"NO\\". results = [] for case in cases: N, arr = case if is_nearly_sorted_array(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a software company, developers are working on a project with several tasks. Each task has a unique identifier and a certain number of dependencies. A task can only be completed if all of its dependencies have been completed. The company wants to find the order in which these tasks can be completed or determine that it is not possible to complete all tasks due to cyclic dependencies. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers N and M, representing the number of tasks and the number of dependency pairs, respectively. - The next M lines each contain two integers u and v, indicating that task v depends on the completion of task u. -----Output:----- - For each test case, output a single line containing either: - A possible order of task completion as a space-separated list of task identifiers, or - The integer -1 if it is not possible to complete all tasks. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^4 - 0 leq M leq 5 times 10^4 - 1 leq u, v leq N - Tasks are numbered from 1 to N -----Sample Input:----- 2 4 3 1 2 1 3 3 4 4 4 1 2 2 3 3 4 4 2 -----Sample Output:----- 1 3 4 2 -1 -----Explanation:----- In the first test case, the task dependencies are such that at least one valid order of completion is: 1 -> 3 -> 4 -> 2. Another valid order could be: 1 -> 2 -> 3 -> 4, etc. Since there is at least one valid order, a valid output sequence is given. In the second test case, the tasks dependencies form a cycle: 1 -> 2 -> 3 -> 4 -> 2. Hence, it is impossible to complete all tasks, and the output is -1.","solution":"from collections import defaultdict, deque def find_task_order(T, test_cases): def topological_sort(N, adj_list): in_degree = [0] * (N + 1) for u in range(1, N + 1): for v in adj_list[u]: in_degree[v] += 1 queue = deque([i for i in range(1, N + 1) if in_degree[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == N: return order else: return -1 results = [] for case in test_cases: N, M, edges = case adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) order = topological_sort(N, adj_list) if order == -1: results.append(\\"-1\\") else: results.append(\\" \\".join(map(str, order))) return results # Reading input is omitted here; for actual usage, read input as per problem statement # and format it into `test_cases` list as suitable"},{"question":"Problem You are given a robot that starts at the origin point (0, 0) in a 2D grid. The robot can move in one of four directions: up, down, left, or right. It is given a set of instructions in the form of the string `S`, where each character in the string represents a movement direction (\'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right). After executing all the instructions, determine if the robot returns to the origin point (0, 0). Write a function that takes a single string `S` as input and returns \\"YES\\" if the robot returns to the origin, and \\"NO\\" otherwise. # Constraints: * The length of the string `S` is between 1 and 10^5. * `S` consists only of characters \'U\', \'D\', \'L\', \'R\'. # Input: * A single string `S` representing the sequence of moves. # Output: * A single string \\"YES\\" or \\"NO\\". # Examples: Example 1: **Input:** ``` UDLR ``` **Output:** ``` YES ``` Example 2: **Input:** ``` UUDD ``` **Output:** ``` YES ``` Example 3: **Input:** ``` ULLD ``` **Output:** ``` NO ``` # Explanation: 1. In Example 1, the robot moves up, down, left, and right, returning to (0, 0). 2. In Example 2, the robot moves up twice and down twice, returning to (0, 0). 3. In Example 3, the robot moves up, left twice, and down, which does not return to (0, 0).","solution":"def does_robot_return_to_origin(S): Determines if the robot returns to the origin (0, 0) after executing the moves. Args: S (str): String representing the sequence of moves. Returns: str: \\"YES\\" if the robot returns to the origin, \\"NO\\" otherwise. x, y = 0, 0 for move in S: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"In a mystical land, there is a special kind of forest called the Fibonacci Forest. This forest has magical trees that follow the Fibonacci sequence. The first two trees in the sequence have heights of 1 and 1. Each subsequent tree\'s height is the sum of the heights of the two preceding trees. Your task is to determine the sum of the heights of all trees from the first tree to the nth tree (inclusive) for a given n. The Fibonacci sequence is defined as: [ F(1) = 1 ] [ F(2) = 1 ] [ F(n) = F(n-1) + F(n-2) quad text{for } n > 2 ] The sum of the heights is defined as: [ S(n) = F(1) + F(2) + cdots + F(n) ] Since the result may be large, return the sum modulo 10^9 + 7. -----Input----- The input consists of a single integer n (1 le n le 10^9). -----Output----- Output a single integer, the sum of the heights of all trees from the first to the nth tree modulo 10^9 + 7. -----Examples----- Sample Input 1: 5 Sample Output 1: 12 Sample Input 2: 10 Sample Output 2: 143","solution":"MOD = 10**9 + 7 def matrix_mult(A, B): Multiplies two 2x2 matrices A and B under modulo MOD return [ [(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % MOD, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % MOD], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % MOD, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % MOD] ] def matrix_pow(matrix, exponent): Raises a 2x2 matrix to the power of exponent under modulo MOD using exponentiation by squaring result = [[1, 0], [0, 1]] # identity matrix base = matrix while exponent > 0: if exponent % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) exponent //= 2 return result def fibonacci_sum(n): Returns the sum of the first n Fibonacci numbers (F(1) to F(n)) modulo 10^9 + 7 if n == 1: return 1 if n == 2: return 2 F = [[1, 1], [1, 0]] # Using the property: Sum(F(1) to F(n)) = F(n+2) - 1 result_matrix = matrix_pow(F, n + 1) # F(n+2) is result_matrix[0][0] return (result_matrix[0][0] - 1 + MOD) % MOD"},{"question":"Alice is designing a rectangular garden and wants to plant flowers at the corners and the center of the perimeter of the garden. She needs to calculate the exact positions for these plants, given the dimensions of the rectangle. Input: The input consists of two integers ( L ) and ( W ), representing the length and width of the rectangle, respectively. Output: The output should provide the coordinates for the four corners and the center points of each of the four sides. The corners should be printed in the order: top-left, top-right, bottom-right, bottom-left. The center points should be printed in the order: top, right, bottom, left. Assumptions: - The bottom-left corner of the rectangle is located at ((0, 0)). - The dimensions ( L ) and ( W ) are between 1 and 1000, inclusive. Example: Input: 12 8 Output: (0, 8) (12, 8) (12, 0) (0, 0) (6, 8) (12, 4) (6, 0) (0, 4) SAMPLE INPUT 16 10 SAMPLE OUTPUT (0, 10) (16, 10) (16, 0) (0, 0) (8, 10) (16, 5) (8, 0) (0, 5)","solution":"def garden_positions(L, W): Given length L and width W of a rectangle, this function returns the coordinates of the four corners and the center points of each side of the rectangle. # Four corners corners = [ (0, W), # Top-left (L, W), # Top-right (L, 0), # Bottom-right (0, 0) # Bottom-left ] # Center points of each side centers = [ (L // 2, W), # Center of top side (L, W // 2), # Center of right side (L // 2, 0), # Center of bottom side (0, W // 2) # Center of left side ] return corners + centers"},{"question":"You are given a list of integers, `nums`, and an integer `k`. Your task is to find the maximum sum of a contiguous subarray with a length of exactly `k`. Write a function: ```python def max_subarray_sum(nums: List[int], k: int) -> int: ``` # Input: - A list of integers `nums` (1 ≤ len(nums) ≤ 10^5, -10^4 ≤ nums[i] ≤ 10^4). - An integer `k` (1 ≤ k ≤ len(nums)). # Output: - An integer representing the maximum sum of any contiguous subarray of length `k`. # Example: Input: ```plaintext nums = [2, 1, 5, 1, 3, 2] k = 3 ``` Output: ```plaintext 9 ``` # Explanation: The subarray with length 3 with the maximum sum is [5, 1, 3], and its sum is 9. # Constraints: - Ensure that your solution has a time complexity of O(n).","solution":"from typing import List def max_subarray_sum(nums: List[int], k: int) -> int: Returns the maximum sum of any contiguous subarray of length k. n = len(nums) if n < k: return 0 # Calculate the sum of the first \'k\' elements max_sum = current_sum = sum(nums[:k]) # Use sliding window technique to calculate other sums for i in range(k, n): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function `calculate_expression` that evaluates a mathematical expression given as a string. The expression will contain non-negative integers, operators (+, -, *, /), and parentheses for altering precedence. The function should respect the mathematical order of operations, i.e., parentheses first, then multiplication and division, and finally addition and subtraction. Division should always result in a float if there is any remainder; integer division should be performed when there is no remainder. For example: ```python calculate_expression(\\"3+5*2\\") == 13 calculate_expression(\\"10+2*6\\") == 22 calculate_expression(\\"100*2+12\\") == 212 calculate_expression(\\"100*(2+12)\\") == 1400 calculate_expression(\\"100*(2+12)/14\\") == 100.0 ``` You may assume that the input string is always a valid expression.","solution":"def calculate_expression(expression): Evaluates a mathematical expression given as a string. The expression can contain non-negative integers, operators (+, -, *, /), and parentheses. def evaluate(tokens): Helper function to evaluate a list of tokens based on the precedence and associativity of operators. # Stack for numbers and operations num_stack = [] op_stack = [] # Helper functions for precedence and applying an operation def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operation(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return float(a) / b if a % b != 0 else a // b i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': op_stack.append(tokens[i]) elif tokens[i].isdigit(): num = 0 while i < len(tokens) and tokens[i].isdigit(): num = num * 10 + int(tokens[i]) i += 1 num_stack.append(num) i -= 1 elif tokens[i] == \')\': while op_stack and op_stack[-1] != \'(\': num2 = num_stack.pop() num1 = num_stack.pop() op = op_stack.pop() num_stack.append(apply_operation(num1, num2, op)) op_stack.pop() else: while op_stack and precedence(op_stack[-1]) >= precedence(tokens[i]): num2 = num_stack.pop() num1 = num_stack.pop() op = op_stack.pop() num_stack.append(apply_operation(num1, num2, op)) op_stack.append(tokens[i]) i += 1 while op_stack: num2 = num_stack.pop() num1 = num_stack.pop() op = op_stack.pop() num_stack.append(apply_operation(num1, num2, op)) return num_stack[-1] return evaluate(expression)"},{"question":"You are given two integers, a and b. Write a program to print the greatest common divisor (GCD) of a and b. Input The input consists of two space-separated integers a and b (1 ≤ a, b ≤ 10⁹). Output Print a single integer representing the GCD of a and b. Examples Input 48 18 Output 6 Input 98 56 Output 14 Note In the first example, the GCD of 48 and 18 is 6. In the second example, the GCD of 98 and 56 is 14.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b. while b: a, b = b, a % b return a"},{"question":"Isabelle loves working with strings and her teacher has given her a challenging task. She needs to identify whether a given string of lowercase alphabets can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards. For example: - \\"carrace\\" can be rearranged to form \\"racecar”, which is a palindrome. - \\"daily\\" cannot be rearranged to form a palindrome. Your task is to write a program to help Isabelle determine if the given string can be rearranged to form a palindrome. INPUT The first line of input contains an integer t, the number of test cases. Then t lines follow, each containing a string of lowercase alphabets. OUTPUT The output contains t lines, each containing \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. CONSTRAINTS 1 ≤ t ≤ 100000 1 ≤ length of the string ≤ 100000 SAMPLE INPUT 3 carrace daily aab SAMPLE OUTPUT YES NO YES","solution":"def can_form_palindrome(s): Determine if the string can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return \\"NO\\" return \\"YES\\" def isabelle_palindrome(t, strings): results = [] for s in strings: results.append(can_form_palindrome(s)) return results"},{"question":"Given a string consisting of lowercase English letters only, count the number of distinct characters that occur exactly twice in the string. Return this count. Example s = text{\'aabbcde\'} Here, the characters \'a\' and \'b\' appear exactly twice in the string, so return 2. Function Description Complete the function `count_exactly_two` in the editor below. It should return the count of distinct characters that occur exactly twice in the input string. `count_exactly_two` has the following parameter(s): - `string s`: a string to count characters from Returns - `int`: the count of distinct characters that appear exactly twice Input Format A single line containing the string s. Constraints 0 < text{length of } s leq 10^3 `s[i]` is in `{\'a\' - \'z\'}` Sample Input Sample Input 0 aabbcde Sample Output 0 2 Sample Explanation 0 The characters \'a\' and \'b\' both appear exactly twice in the string. Sample Input 1 abcabc Sample Output 1 3 Sample Explanation 1 The characters \'a\', \'b\', and \'c\' each appear exactly twice in the string.","solution":"def count_exactly_two(s): Counts the number of distinct characters that occur exactly twice in the string. Parameters: s (str): a string to count characters from Returns: int: the count of distinct characters that appear exactly twice from collections import Counter count = Counter(s) return sum(1 for char, cnt in count.items() if cnt == 2)"},{"question":"Oliver is working on a string manipulation project. He needs to determine the longest substring of a given string that can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards. Help Oliver by writing a program that finds and prints the length of this longest palindromic substring. ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing a string S. ------ Output ------ For each test case, output a single integer — the length of the longest palindromic substring of S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 The sum of the lengths of all strings over all test cases does not exceed 10^6. S consists of lowercase English letters only. ----- Sample Input 1 ------ 2 abc aaabbbcc ----- Sample Output 1 ------ 1 7 Explanation: - For the string \\"abc\\", the longest palindromic substring which can be derived is any single character, hence the length is 1. - For the string \\"aaabbbcc\\", the longest palindromic substring is \\"aabbbaa\\" which has the length 7.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest substring of string `s` that can be rearranged to form a palindrome. from collections import Counter count = Counter(s) length = 0 odd_found = False for frequency in count.values(): if frequency % 2 == 0: length += frequency else: length += frequency - 1 odd_found = True if odd_found: length += 1 return length def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring_length(s)) return results"},{"question":"Given a list of n books, where each book has a title, author, and number of pages, write a program that categorizes the books into three categories: short, medium, and long. A short book is defined as having fewer than 100 pages, a medium book has between 100 and 300 pages (inclusive), and a long book has more than 300 pages. Your program should output the titles of the books in each category in alphabetical order. Input Format The first line contains an integer, n, denoting the number of books. The next n lines each describe a book with: - a string, the book title (which may contain spaces and is enclosed in double quotes if it does), - a string, the author\'s name, - an integer, the number of pages. Constraints 1leq nleq10^3 Output Format Print three sections: \\"Short Books:\\", \\"Medium Books:\\", and \\"Long Books:\\". Under each section, print the titles of the books in that category in alphabetical order, one per line. If a category has no books, print \\"None\\" under that category. Sample Input 4 \\"To Kill a Mockingbird\\" HarperLee 281 \\"1984\\" GeorgeOrwell 328 \\"The Little Prince\\" AntoineDeSaint-Exupery 96 \\"Pride and Prejudice\\" JaneAusten 279 Sample Output Short Books: \\"The Little Prince\\" Medium Books: \\"Pride and Prejudice\\" \\"To Kill a Mockingbird\\" Long Books: \\"1984\\" Explanation There are four books in the input. The book \\"The Little Prince\\" falls into the short category since it has fewer than 100 pages. \\"Pride and Prejudice\\" and \\"To Kill a Mockingbird\\" fall into the medium category as they have between 100 and 300 pages. \\"1984\\" is a long book with more than 300 pages. The titles in each category are then output in alphabetical order.","solution":"def categorize_books(n, books): short_books = [] medium_books = [] long_books = [] for title, author, pages in books: if pages < 100: short_books.append(title) elif 100 <= pages <= 300: medium_books.append(title) else: long_books.append(title) short_books.sort() medium_books.sort() long_books.sort() def print_books(category, books): print(f\\"{category}:\\") if not books: print(\\"None\\") else: for book in books: print(f\'\\"{book}\\"\') print_books(\\"Short Books\\", short_books) print_books(\\"Medium Books\\", medium_books) print_books(\\"Long Books\\", long_books) # Sample Input n = 4 books = [ (\\"To Kill a Mockingbird\\", \\"HarperLee\\", 281), (\\"1984\\", \\"GeorgeOrwell\\", 328), (\\"The Little Prince\\", \\"AntoineDeSaint-Exupery\\", 96), (\\"Pride and Prejudice\\", \\"JaneAusten\\", 279) ] categorize_books(n, books)"},{"question":"Longest Consecutive Sequence * Write a function named `longestConsecutiveSequence` that takes a parameter of type array of integers and returns a value of type int. * The function should find the length of the longest consecutive elements sequence in the provided array. The consecutive sequence can be in any order within the array. Example: ``` longestConsecutiveSequence([100, 4, 200, 1, 3, 2]) // returns 4: the longest consecutive sequence is [1, 2, 3, 4] longestConsecutiveSequence([1, 9, 3, 10, 2, 20]) // returns 3: the longest consecutive sequence is [1, 2, 3] ``` * If the input array is empty, return 0. * Time complexity must be better than `O(n log n)`.","solution":"def longestConsecutiveSequence(nums): Returns the length of the longest consecutive elements sequence in the array. if not nums: return 0 nums_set = set(nums) max_length = 0 for num in nums_set: if num - 1 not in nums_set: current_num = num current_length = 1 while current_num + 1 in nums_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Pak Chanek has an array of integers which he can modify through a specific operation: in one operation, he can choose any element in the array and increment or decrement it by 1. He wants to make all the elements in the array equal using the minimum number of operations. Determine the minimum number of operations required to achieve this goal. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n (1 leq n leq 2 cdot 10^5) — the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output a single integer representing the minimum number of operations required to make all elements in the array equal. -----Examples----- Input 3 5 1 2 3 4 5 4 10 10 10 10 3 2 8 3 Output 6 0 6 -----Note----- In the first test case, the optimal way to make all elements equal is to make them all equal to 3. The number of operations needed is |1-3| + |2-3| + |3-3| + |4-3| + |5-3| = 2 + 1 + 0 + 1 + 2 = 6. In the second test case, all elements are already equal, so no operations are needed. In the third test case, the optimal way to make all elements equal is to make them all equal to 3. The number of operations needed is |2-3| + |8-3| + |3-3| = 1 + 5 + 0 = 6.","solution":"def min_operations_to_make_equal(t, test_cases): Returns the minimum number of operations required to make all elements in each array equal. :param t: Number of test cases :param test_cases: List of tuples, where each tuple consists of (n, array) :return: List of integers representing the minimum number of operations for each test case results = [] for n, arr in test_cases: arr.sort() median = arr[n // 2] operations = sum(abs(x - median) for x in arr) results.append(operations) return results"},{"question":"Consider a company that maintains a list of employees and their years of experience. The company wants to promote employees based on their level of experience, but there is a rule: any promoted employee must have a strictly greater number of years of experience than the most recently promoted employee. Given a list of integers where each integer represents the years of experience of an employee, find the length of the longest sequence of promotions that can be made following the promotion rule. Constraints * 2 ≤ N ≤ 10^5 * 1 ≤ Experience_i ≤ 10^9 Input The first line contains an integer N, the number of employees. The second line contains N integers where the i-th integer represents the years of experience of the i-th employee. Output Print the length of the longest sequence of promotions. Examples Input 6 1 3 2 5 4 7 Output 4 Input 5 3 10 2 1 20 Output 3 Input 8 5 1 6 2 3 8 7 4 Output 4","solution":"def longest_promotion_sequence(n, experiences): Returns the length of the longest sequence of promotions that can be made following the promotion rule. :param n: Number of employees :param experiences: List of integers where each integer represents the years of experience of the i-th employee :return: Length of the longest sequence of promotions if n <= 1: return n # Array to store the longest increasing subsequence of experiences lis = [1] * n for i in range(1, n): for j in range(0, i): if experiences[i] > experiences[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"You are given an array of strings where each string represents a sequence of parentheses, and you need to determine if each string is a valid sequence or not. A sequence of parentheses is considered valid if every opened parenthesis \'(\' has a corresponding closed parenthesis \')\', and they are correctly nested. Write a function `valid_parentheses` that takes an array of strings and returns an array of boolean values, where each boolean value indicates whether the corresponding string in the input array is a valid sequence of parentheses. Example Input: ``` valid_parentheses([\\"()\\", \\"(())\\", \\"(()\\", \\"())\\", \\"()()\\"]) ``` Output: ``` [True, True, False, False, True] ``` Explanation: - `\\"()\\"` is valid because both opening and closing parentheses match. - `\\"(())\\"` is valid because pairs of parentheses are correctly nested. - `\\"(()\\"` is invalid because there is an unmatched opening parenthesis. - `\\"())\\"` is invalid because there is an unmatched closing parenthesis. - `\\"()()\\"` is valid because both pairs of parentheses are correct.","solution":"def valid_parentheses(strings): Returns a list of boolean values where each value indicates whether the corresponding string in the input list is a valid sequence of parentheses. def is_valid(s): stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0 return [is_valid(s) for s in strings]"},{"question":"You are working on a project management tool that needs to calculate the maximum overlap between various tasks assigned to a team. Each task has a fixed start time and end time, and multiple tasks can be active during overlapping periods. Your goal is to find the maximum number of tasks that are active simultaneously at any given time. Input First line contains an integer n (1 ≤ n ≤ 1000), which represents the number of tasks. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^6), which represent the start and end times of the ith task. Output Output in a single line the maximum number of tasks that are active simultaneously. Examples Input 5 1 4 2 5 9 12 5 9 5 12 Output 3 Input 3 1 3 4 6 7 10 Output 1 Explanation In the first test case, the maximum number of overlapping tasks occurs between times 5 and 9, where three tasks are active simultaneously. In the second test case, no tasks overlap, so the maximum number of tasks active simultaneously is 1.","solution":"def max_overlap(tasks): Calculate the maximum number of tasks that are active simultaneously. Parameters: tasks (List[Tuple[int, int]]): List of tuples with start and end times of tasks. Returns: int: Maximum number of overlapping tasks. events = [] for start, end in tasks: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events, with start events coming before end events in case of tie events.sort(key=lambda x: (x[0], x[1] == \'end\')) max_active = 0 active = 0 for time, event in events: if event == \'start\': active += 1 max_active = max(max_active, active) else: active -= 1 return max_active"},{"question":"An island is represented as a square grid of size `N x N`. Some cells of the grid contain gold (`G`), some contain rock (`R`), and some are empty (`.`). You need to find the minimum number of steps needed to collect all the gold present on the island. The collector can only move in four directions (up, down, left, right) and can only pass through empty cells and cells containing gold, but not through rock cells. Write a function: ```python def minStepsToCollectAllGold(N: int, grid: List[List[str]]) -> int: ``` # Input - `N`: an integer, the size of the grid (1 <= N <= 50) - `grid`: a list of N lists each containing N characters representing the grid (each character can be \'G\', \'R\', or \'.\') # Output - Return an integer representing the minimum number of steps needed to collect all the gold, or -1 if it is not possible to collect all the gold. # Example Input ```python N = 5 grid = [ [\'.\', \'R\', \'G\', \'.\', \'.\'], [\'.\', \'R\', \'G\', \'.\', \'.\'], [\'.\', \'.\', \'.\', \'R\', \'.\'], [\'.\', \'R\', \'R\', \'R\', \'.\'], [\'.\', \'.\', \'G\', \'.\', \'.\'] ] ``` Output 10 # Explanation: The collector can start at (0, 0), move to (1, 0), then to (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 4), (4, 4), and finally (4, 3) to collect all the gold. # Notes: - This problem requires an understanding of graph traversal algorithms. - Consider how to use Breadth-First Search (BFS) for shortest path finding. - Be careful to avoid rock cells during traversal.","solution":"from collections import deque def minStepsToCollectAllGold(N, grid): def bfs(start, goal, blocked): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() queue = deque([(start[0], start[1], 0)]) # (row, col, steps) visited.add(start) while queue: r, c, steps = queue.popleft() if (r, c) == goal: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < N and (nr, nc) not in visited and (nr, nc) not in blocked: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return float(\'inf\') start = None goals = [] blocked = set() for r in range(N): for c in range(N): if grid[r][c] == \'G\': goals.append((r, c)) elif grid[r][c] == \'R\': blocked.add((r, c)) elif grid[r][c] == \'S\': start = (r, c) if start is None: return -1 # no starting point found total_steps = 0 current_position = start while goals: next_goal = None min_steps = float(\'inf\') for goal in goals: steps = bfs(current_position, goal, blocked) if steps < min_steps: min_steps = steps next_goal = goal if min_steps == float(\'inf\'): return -1 # cannot reach some gold total_steps += min_steps current_position = next_goal goals.remove(next_goal) return total_steps"},{"question":"Write a program to simulate a number guessing game between two players. Player A will think of a number between 1 and 100 (inclusive), and Player B will try to guess that number. Player B will receive feedback whether each guess is \\"too low\\" or \\"too high\\" until they guess the correct number. Upon the correct guess, the program should output the number of attempts Player B made to find the correct number. You will need to implement the following functionalities: 1. Randomly generate a number between 1 and 100 for Player A. 2. Accept guesses from Player B and provide feedback until the correct number is guessed. 3. Count and print the number of attempts taken by Player B to guess the number. **Constraints:** - Ensure that each guess made by Player B is within the range of 1 to 100. - Your program should handle invalid inputs (non-integer inputs or numbers out of range) with appropriate messages and prompts for re-entry. **Example Input/Output:** ``` Player A has chosen a number between 1 and 100. Player B, make a guess: 50 Too high! Player B, make a guess: 25 Too low! Player B, make a guess: 35 Correct! You guessed the number in 3 attempts. ``` Your task is to write a function `guessing_game()` that implements this functionality.","solution":"import random def guessing_game(): Simulates a number guessing game between two players. Player A thinks of a number between 1 and 100. Player B attempts to guess the number with feedback provided. # Player A thinks of a number between 1 and 100 number_to_guess = random.randint(1, 100) attempts = 0 guessed_correctly = False print(\\"Player A has chosen a number between 1 and 100.\\") while not guessed_correctly: try: guess = int(input(\\"Player B, make a guess: \\")) # Ensure the guess is within the valid range if guess < 1 or guess > 100: print(\\"Your guess is out of the valid range. Please guess a number between 1 and 100.\\") continue attempts += 1 if guess < number_to_guess: print(\\"Too low!\\") elif guess > number_to_guess: print(\\"Too high!\\") else: guessed_correctly = True print(f\\"Correct! You guessed the number in {attempts} attempts.\\") except ValueError: print(\\"Invalid input. Please enter an integer.\\")"},{"question":"In a city, there are several bus routes represented as an undirected graph. Each node represents a bus stop, and each edge represents a direct bus route between two bus stops. Some bus routes are one-way, while others allow travel in both directions. You are given `n` bus stops, labeled from `1` to `n`, and `m` bus routes. Each bus route is described by two integers `u` and `v`, indicating a direct route between bus stops `u` and `v`. Additionally, a third integer `d` indicates the type of bus route: - If `d` is `0`, it means the route is two-way. - If `d` is `1`, it means the route is one-way from `u` to `v`. Your task is to determine if there is a path from bus stop `1` to bus stop `n` using the available bus routes. # Input - The first line contains two integers `n` and `m` (2 <= n <= 1000, 1 <= m <= 5000), representing the number of bus stops and the number of bus routes. - The next `m` lines each contain three integers `u`, `v`, and `d` (1 <= u, v <= n, u != v, 0 <= d <= 1), describing each bus route. # Output - Print \\"Yes\\" if there is a path from bus stop `1` to bus stop `n`. - Print \\"No\\" otherwise. # Example Input ``` 4 4 1 2 0 2 3 1 3 4 0 2 4 1 ``` Output ``` Yes ``` Input ``` 4 3 1 2 0 2 3 1 4 3 1 ``` Output ``` No ``` # Note In the first example, possible paths from bus stop `1` to bus stop `n` (stop `4`) include: 1->2->4 and 1->2->3->4, both are valid. In the second example, there is no path that connects bus stop `1` to bus stop `4`.","solution":"from collections import defaultdict, deque def is_path_from_1_to_n(n, m, routes): graph = defaultdict(list) # Construct the graph for u, v, d in routes: graph[u].append(v) if d == 0: # add the reverse edge for two-way routes graph[v].append(u) # BFS to find path from 1 to n def bfs(start, target): visited = set() queue = deque([start]) while queue: current = queue.popleft() if current in visited: continue visited.add(current) if current == target: return True for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return False return \\"Yes\\" if bfs(1, n) else \\"No\\""},{"question":"Alice loves collecting rare coins. She has a collection of coins she keeps in a box. Each coin has a certain value associated with it, and she likes to arrange her coins in ascending order of their values. Alice has decided to write a program to help her sort the coins efficiently. The task is to implement a function `sortCoins(values)` that takes a list of integers representing the values of Alice\'s coins and returns a new list with the values sorted in non-decreasing order. # Input - A single list of integers `values` where 1 ≤ length of `values` ≤ 1000 and each integer 1 ≤ values[i] ≤ 10^6. # Output - A list of integers with the values sorted in non-decreasing order. # Examples Input ``` [5, 3, 2, 8, 1] ``` Output ``` [1, 2, 3, 5, 8] ``` Input ``` [10, 90, 15, 25, 60] ``` Output ``` [10, 15, 25, 60, 90] ``` Input ``` [2] ``` Output ``` [2] ``` # Note In the first example, the function reorders the unsorted values [5, 3, 2, 8, 1] into a sorted list [1, 2, 3, 5, 8]. In the second example, the function reorders the values [10, 90, 15, 25, 60] into [10, 15, 25, 60, 90]. In the third example, the input list already contains a single value and is thus trivially sorted. The function should handle the sorting efficiently even for larger lists up to the size limit.","solution":"def sortCoins(values): Takes a list of integers representing the values of coins and returns a new list with the values sorted in non-decreasing order. return sorted(values)"},{"question":"Alice and Bob are playing a game. The game consists of arranging a sequence of positive integers. The rules for winning are as follows: 1. Alice and Bob take alternating turns starting with Alice. 2. On each turn, a player must choose a number from the remaining sequence and place it in one of the available positions (either at the start or at the end of the sequence being formed). 3. The goal of each player is to maximize the value of the resulting numerical sequence as a whole. The current representation of the sequence is based on lexicographic order, where a sequence is considered larger if it is lexicographically larger. Both players play optimally, meaning they will make the best possible move at each turn to maximize their chances of winning. Given the initial sequence of integers, determine the final sequence after both players have made their moves alternatingly, starting with Alice. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of integers in the initial sequence. The second line contains n space-separated positive integers representing the initial sequence, each integer is no more than 1000. Output Print the final sequence as a single line of space-separated integers after both players have played optimally. Examples Input 4 9 6 1 2 Output 9 2 1 6 Input 3 4 8 3 Output 8 3 4 Note In the first sample, Alice will start by choosing 9 and placing it at the start. Bob will choose 6 and place it at the end. Alice will then choose 2 and place it at the end, making the sequence 9 2 6. Bob will finally choose 1 and place it at the end, resulting in 9 2 1 6. In the second sample, Alice will start by choosing 8 and placing it at the start. Bob will then choose 4, and place it at the end. Alice will choose 3 and place it at the end, resulting in 8 3 4.","solution":"def game_sequence(n, sequence): Determines the final sequence after Alice and Bob have played their game optimally. Parameters: n (int): Number of integers in the initial sequence. sequence (list of int): Initial sequence of integers. Returns: list of int: Final sequence after the game. # Sort the sequence in descending order sorted_sequence = sorted(sequence, reverse=True) # Initialize the result sequence result = [] # Process elements by alternatively choosing max value for i in range(n): if i % 2 == 0: # Alice\'s turn: she takes the largest remaining value result.append(sorted_sequence.pop(0)) else: # Bob\'s turn: he takes the largest remaining value result.append(sorted_sequence.pop(0)) return result"},{"question":"Zara loves playing with ropes. She has n ropes of varying lengths. She decides to connect all the ropes into a single continuous rope. To accomplish this, she always performs the following operation: she selects two ropes and joins them end-to-end. The cost of this operation is equal to the combined length of the two ropes. Zara wants to minimize the total cost required to combine all the ropes into one. Input The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of ropes. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the lengths of the ropes. Output Print a single integer — the minimum total cost to connect all the ropes into one. Examples Input 4 4 3 2 6 Output 29 Input 3 1 2 3 Output 9 Note In the first sample case, Zara could join the ropes as follows: 1. Combine the ropes of length 2 and 3 for a cost of 5. 2. Combine the result (which has length 5) with the rope of length 4 for a cost of 9. 3. Finally, combine the result (which has length 9) with the last rope of length 6 for a cost of 15. The total cost is 5 + 9 + 15 = 29. In the second sample case, Zara could join the ropes as follows: 1. Combine the ropes of length 1 and 2 for a cost of 3. 2. Finally, combine the result (which has length 3) with the last rope of length 3 for a cost of 6. The total cost is 3 + 6 = 9.","solution":"import heapq def min_cost_to_connect_ropes(n, lengths): if n == 2: return sum(lengths) heapq.heapify(lengths) total_cost = 0 while len(lengths) > 1: first = heapq.heappop(lengths) second = heapq.heappop(lengths) cost = first + second total_cost += cost heapq.heappush(lengths, cost) return total_cost"},{"question":"Chef has taken up running as his daily exercise routine. He runs on a straight path marked with N equidistant checkpoints. Chef has a special device that tracks his speed and distance covered at each checkpoint. Each checkpoint has three specific attributes: the distance from the starting point D_{i}, the speed S_{i} that Chef runs at that checkpoint (in meters per second), and the time T_{i} Chef has been running when he reaches that checkpoint (in seconds). Chef wants to calculate the total energy he expends during his run. The energy expenditure at each checkpoint is given by E_{i} = S_{i} times S_{i} times T_{i}. Assist Chef in calculating the total energy expenditure for his entire run by summing up the energy expenditures for each checkpoint. ------ Input: ------ First line will contain T, number of testcases. Then the testcases follow. Each testcase contains 2 lines. The first line contains N, the number of checkpoints. The second line contains 3N space-separated integers: D_{1}, S_{1}, T_{1}, D_{2}, S_{2}, T_{2}, ldots, D_{N}, S_{N}, T_{N}. ------ Output: ------ For each testcase, output a single line containing the total energy expenditure for the entire run, rounded to the nearest integer. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 1 ≤ D_{i}, S_{i}, T_{i} ≤ 10^3 ----- Sample Input 1 ------ 2 3 0 3 2 5 2 3 10 4 1 2 0 2 1 3 3 2 ----- Sample Output 1 ------ 85 26 ----- Explanation 1 ------ Test Case 1: At checkpoint 1: E_{1} = 3^2 times 2 = 18 At checkpoint 2: E_{2} = 2^2 times 3 = 12 At checkpoint 3: E_{3} = 4^2 times 1 = 16 Total energy expenditure: E_{1} + E_{2} + E_{3} = 18 + 12 + 16 = 46. Test Case 2: At checkpoint 1: E_{1} = 2^2 times 1 = 4 At checkpoint 2: E_{2} = 3^2 times 2 = 18 Total energy expenditure: E_{1} + E_{2} = 4 + 18 = 22.","solution":"def calculate_energy_expenditure(test_cases): results = [] for test in test_cases: N = test[0] checkpoints = test[1] total_energy = 0 for i in range(N): D, S, T = checkpoints[i*3], checkpoints[i*3+1], checkpoints[i*3+2] energy = S * S * T total_energy += energy results.append(round(total_energy)) return results def parse_input(input_string): lines = input_string.split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) checkpoints = list(map(int, lines[index + 1].split())) test_cases.append((N, checkpoints)) index += 2 return test_cases def main(input_string): test_cases = parse_input(input_string) return calculate_energy_expenditure(test_cases)"},{"question":"Given an array of integers, perform a sequence of the following operations: * update(i, x): Update the element at index `i` to `x`. * sum(l, r): Compute the sum of the elements from index `l` to `r` (inclusive). Constraints * 1 leq n leq 100,000: The number of elements in the array. * 1 leq q leq 100,000: The number of queries. * 0 leq x leq 1,000,000,000 * 0 leq i, l, r < n * l leq r Input The input is given in the following format: ``` n q a_1 a_2 ... a_n query_1 query_2 : query_q ``` `n` is the number of elements in the array, and `q` is the number of queries. The second line contains `n` integers representing the initial state of the array. Each query `query_i` is given by: ``` u i x ``` or ``` s l r ``` where the first character `u` or `s` represents update or sum operation respectively. Output For each sum operation, print the resulting sum of the range. Example Input ``` 5 4 1 2 3 4 5 u 1 10 s 0 2 u 3 8 s 2 4 ``` Output ``` 14 16 ``` Explanation After the first update, the array becomes [1, 10, 3, 4, 5]. The sum from index 0 to 2 is 1 + 10 + 3 = 14. After the second update, the array becomes [1, 10, 3, 8, 5]. The sum from index 2 to 4 is 3 + 8 + 5 = 16.","solution":"class ArrayOperations: def __init__(self, arr): self.arr = arr def update(self, i, x): self.arr[i] = x def sum(self, l, r): return sum(self.arr[l:r+1]) def perform_operations(n, q, arr, queries): array_ops = ArrayOperations(arr) results = [] for query in queries: parts = query.split() if parts[0] == \'u\': _, i, x = parts array_ops.update(int(i), int(x)) elif parts[0] == \'s\': _, l, r = parts results.append(array_ops.sum(int(l), int(r))) return results"},{"question":"You are given a series of commands that need to be executed sequentially. Your task is to determine the final state of a variable after all the commands are executed. The variable starts at an initial value of 0. The commands can be one of the following types: 1. \\"add x\\" - adds the integer x to the current value of the variable. 2. \\"subtract x\\" - subtracts the integer x from the current value of the variable. 3. \\"multiply x\\" - multiplies the current value of the variable by the integer x. 4. \\"divide x\\" - performs integer division of the current value of the variable by the integer x. You can assume that x is not zero in this command. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of commands. The next n lines contain one command each in the format \\"operation x\\" where \\"operation\\" is one of \\"add\\", \\"subtract\\", \\"multiply\\", or \\"divide\\", and x is an integer (-10^9 ≤ x ≤ 10^9). -----Output----- Print a single integer, the final state of the variable after all commands have been executed. -----Examples----- Input 3 add 5 subtract 3 multiply 2 Output 4 Input 4 add 10 divide 3 subtract 1 multiply 4 Output 12 -----Note----- In the first example, the initial value of the variable is 0. - After \\"add 5\\", the variable becomes 5. - After \\"subtract 3\\", the variable becomes 2. - After \\"multiply 2\\", the variable becomes 4. In the second example, the initial value of the variable is 0. - After \\"add 10\\", the variable becomes 10. - After \\"divide 3\\", the variable becomes 3 (integer division). - After \\"subtract 1\\", the variable becomes 2. - After \\"multiply 4\\", the variable becomes 8.","solution":"def final_variable_state(commands): Returns the final state of the variable after executing all the commands. variable = 0 for command in commands: operation, x = command.split() x = int(x) if operation == \\"add\\": variable += x elif operation == \\"subtract\\": variable -= x elif operation == \\"multiply\\": variable *= x elif operation == \\"divide\\": variable //= x return variable"},{"question":"You are given a string consisting of lowercase letters. We define an alphabet word as a string that contains all the letters from \'a\' to \'z\' at least once. Your task is to find the smallest substring of the given string that is an alphabet word. If no such substring exists, return -1. Input A single line containing a string of length n (1 ≤ n ≤ 10^6), consisting of only lowercase English letters. Output Output the length of the smallest substring that is an alphabet word, or -1 if no such substring exists. Examples Input abcdefghijklmnopqrstuvwxyzabc Output 26 Input abcabcbb Output -1 Input abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz Output 26 Note In the first example, the substring \\"abcdefghijklmnopqrstuvwxyz\\" contains all the letters from \'a\' to \'z\'. In the second example, there\'s no substring that contains all letters from \'a\' to \'z\'. In the third example, the first 26 characters already form a valid alphabet word, so the smallest valid substring has a length of 26.","solution":"def smallest_alphabet_word_substring(s): from collections import defaultdict def is_valid(freq, required_chars): for char in required_chars: if freq[char] <= 0: return False return True n = len(s) required_chars = set(\'abcdefghijklmnopqrstuvwxyz\') if len(set(s)) < 26: return -1 freq = defaultdict(int) left = 0 min_length = float(\'inf\') for right in range(n): freq[s[right]] += 1 while is_valid(freq, required_chars): min_length = min(min_length, right - left + 1) freq[s[left]] -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You have been hired to develop an automated mail sorting system for a large postal service. The system needs to process a long list of addresses, and for each address, it must determine in which out of m possible regions it falls. Each region is defined by a pair of integers (a, b) which represents the starting and ending postal codes of the region. Given an address\'s postal code p and a list of m regions, if the postal code p lies between a and b (inclusive) for any region (a, b), then the address lies in that region. If an address lies in multiple regions, it should be assigned to the region it occurred first in the input list. Your task is to determine for each address, the region it falls into, or output \\"NONE\\" if it does not fall into any of the provided regions. Input The first line contains the number of test cases T (1 ≤ T ≤ 100). Each test case starts with an integer m (1 ≤ m ≤ 1000), the number of regions. Each of the next m lines contains two integers a and b (1 ≤ a ≤ b ≤ 109), representing the starting and ending postal codes of the region. The next line contains an integer k (1 ≤ k ≤ 1000), the number of addresses that need to be checked. Each of the next k lines contains a single integer p (1 ≤ p ≤ 109), representing the postal code of the address that needs to be checked. Output For each test case, output k lines. The i-th line should contain the 1-based index of the region the i-th address falls into or \\"NONE\\" if the address does not fall into any region. Example Input 2 3 100 200 250 300 310 400 4 150 275 310 401 2 1 5 10 15 3 7 3 12 Output 1 2 3 NONE NONE 1 2 Note In the first test case: - The first address with postal code 150 falls in the first region (100, 200), so the output is 1. - The second address with postal code 275 falls in the second region (250, 300), so the output is 2. - The third address with postal code 310 falls in the third region (310, 400), so the output is 3. - The fourth address with postal code 401 does not fall in any region, so the output is \\"NONE\\". In the second test case: - The first address with postal code 7 does not fall in any region, so the output is \\"NONE\\". - The second address with postal code 3 falls in the first region (1, 5), so the output is 1. - The third address with postal code 12 falls in the second region (10, 15), so the output is 2.","solution":"def mail_sorting_system(test_cases): results = [] for case in test_cases: regions, addresses = case result = [] for p in addresses: assigned_region = \\"NONE\\" for i, (a, b) in enumerate(regions): if a <= p <= b: assigned_region = i + 1 # 1-based index break result.append(str(assigned_region)) results.append(result) return results def parse_input(input_text): input_lines = input_text.strip().split(\'n\') index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): m = int(input_lines[index]) index += 1 regions = [] for _ in range(m): a, b = map(int, input_lines[index].split()) index += 1 regions.append((a, b)) k = int(input_lines[index]) index += 1 addresses = [] for _ in range(k): p = int(input_lines[index]) index += 1 addresses.append(p) test_cases.append((regions, addresses)) return test_cases def format_output(results): output_lines = [] for result in results: output_lines.extend(result) return \\"n\\".join(output_lines)"},{"question":"A robbery has occurred! Due to the sequence of events, the only way the authorities can figure out how the robbers escaped is via the sequence of CCTV camera footage timestamps. Each timestamp is represented by a string in the format \\"HH:MM\\". The timestamps, however, might be jumbled and not sorted, and the detectives need your help to find the longest sequence of consecutive timestamps seen on the footage, sorted in increasing order. For simplicity, the timestamps are guaranteed to be from the same day and to be exact minute intervals apart. -----Input----- The first line of input contains an integer n (1le nle 1440), where n is the number of timestamps recorded. The second line contains n space-separated strings representing timestamps in the format \\"HH:MM\\". -----Output----- Output a single integer denoting the length of the longest sequence of consecutive timestamps in increasing order. -----Examples----- Sample Input 1: 5 10:00 09:58 09:59 10:01 10:02 Sample Output 1: 4 Sample Input 2: 3 12:01 12:03 12:02 Sample Output 2: 3 -----Explanation----- In the first example, the sequence \\"09:58, 09:59, 10:00, 10:01, 10:02\\" is the longest subsequence of timestamps in increasing order. Therefore, the length is 4. In the second example, the sequence \\"12:01, 12:02, 12:03\\" forms the longest subsequence of timestamps in increasing order. Therefore, the length is 3.","solution":"def longest_sequence_of_timestamps(n, timestamps): Finds the length of the longest sequence of consecutive timestamps in increasing order. Parameters: n (int): The number of timestamps recorded. timestamps (list): A list of strings representing the timestamps in the format \\"HH:MM\\". Returns: int: The length of the longest sequence. time_to_minutes = lambda t: int(t[:2]) * 60 + int(t[3:]) # Convert timestamps to minutes minutes = [time_to_minutes(ts) for ts in timestamps] # Sort the minutes minutes.sort() # Find longest sequence of consecutive numbers longest_sequence = 1 current_sequence = 1 for i in range(1, len(minutes)): if minutes[i] == minutes[i-1] + 1: current_sequence += 1 longest_sequence = max(longest_sequence, current_sequence) else: current_sequence = 1 return longest_sequence"},{"question":"Given an integer n and a list of n integers, determine the maximum product of two integers in the list. Input: The input consists of two lines. - The first line contains an integer n (2 ≤ n ≤ 1,000). - The second line contains n space-separated integers a1, a2, ..., an, where each integer is in the range [-10^4, 10^4]. Output: Print a single integer, which is the maximum product of two integers in the list. Examples: Input: 4 1 2 3 4 Output: 12 Input: 5 -10 -20 5 9 14 Output: 200 Input: 3 -4 -3 -2 Output: 12","solution":"def max_product_of_two(n, lst): Given an integer n and a list of n integers, determine the maximum product of two integers in the list. Parameters: n (int): The number of integers in the list. lst (list of int): The list of integers. Returns: int: The maximum product of two integers in the list. if n < 2 or not all(isinstance(x, int) for x in lst): raise ValueError(\\"Invalid input\\") lst.sort() # Maximum product could be from the two largest positive numbers or two largest negative numbers return max(lst[0] * lst[1], lst[-1] * lst[-2])"},{"question":"You are given two strings, `s` and `t`. Your task is to determine the minimum number of operations required to transform string `s` into string `t`. The allowed operations are: 1. Insert a character at any position. 2. Delete a character from any position. 3. Replace a character at any position. Write a function that returns the minimum number of operations required. -----Input----- The input consists of multiple test cases. The first line contains an integer q (1 leq q leq 500) — the number of test cases. The descriptions of the test cases follow. Each test case consists of two lines. The first line contains the string `s`, and the second line contains the string `t`. Both strings are non-empty and have a length not exceeding 1000. -----Output----- For each test case, output the minimum number of operations required to transform `s` into `t`. -----Examples----- Input 3 horse ros intention execution abcdef abcdef Output 3 5 0 -----Note----- In the first example, transforming \\"horse\\" into \\"ros\\" can be done with three operations: 1. Replace \'h\' with \'r\' 2. Remove \'o\' 3. Remove \'e\' In the second example, transforming \\"intention\\" into \\"execution\\" can be done with five operations: 1. Replace \'i\' with \'e\' 2. Replace \'n\' with \'x\' 3. Replace \'t\' with \'u\' 4. Replace \'n\' with \'c\' 5. Replace \'n\' with \'t\' In the third example, \\"abcdef\\" is already equal to \\"abcdef\\", so no operations are needed.","solution":"def min_distance(s, t): Returns the minimum number of operations to transform string s into string t. m, n = len(s), len(t) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize DP table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s is empty, insert all characters of t elif j == 0: dp[i][j] = i # If t is empty, remove all characters of s elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove character dp[i][j - 1], # Insert character dp[i - 1][j - 1]) # Replace character return dp[m][n] def min_operations(q, test_cases): Returns a list of minimum numbers of operations for each test cases. results = [] for s, t in test_cases: results.append(min_distance(s, t)) return results"},{"question":"You are given a list of integers representing the heights of buildings on a street. You are to select the smallest number of these buildings such that, if they were removed, the remaining buildings form a strictly increasing sequence from left to right. For example, if the heights of the buildings are [4, 2, 3, 6, 10, 5, 7], you could remove buildings with heights 4, 10, and 5, leaving [2, 3, 6, 7], which is strictly increasing. Help determine the minimum number of buildings that need to be removed to achieve this. -----Input----- The first line contains a single integer n (1 le n le 2000) — the number of buildings on the street. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^6), where h_i represents the height of the i-th building. -----Output----- Print a single integer — the minimum number of buildings that need to be removed. -----Example----- Input 7 4 2 3 6 10 5 7 Output 3 -----Note----- In the example, removing buildings with heights 4, 10, and 5 leaves [2, 3, 6, 7], which is strictly increasing, thus the output is 3.","solution":"def min_buildings_to_remove(heights): Determines the minimum number of buildings that need to be removed to have the remaining buildings form a strictly increasing sequence from left to right. Args: heights (list of int): A list of integers representing the heights of buildings. Returns: int: The minimum number of buildings that need to be removed. from bisect import bisect_left if not heights: return 0 n = len(heights) # To find the length of the longest increasing subsequence LIS = [] for height in heights: pos = bisect_left(LIS, height) if pos == len(LIS): LIS.append(height) else: LIS[pos] = height return n - len(LIS)"},{"question":"Charco is playing a game involving a series of operations on a string. The game starts with an initial string s consisting of lowercase English letters. Charco can perform two types of operations on the string: 1. Take any substring of the string and reverse it. 2. Delete the first character of the string. The goal of the game is to transform the initial string into a palindrome that is as short as possible. Charco wants to know the minimum length of a palindrome that can be obtained after applying any number of the allowed operations. Can you help Charco achieve this goal? -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of one line containing the initial string s (1 le |s| le 1000) given for that test case. -----Output----- For each test case, output in a separate line the minimum length of a palindrome that can be obtained after applying the operations. -----Examples----- Input 3 abcd aba race Output 1 3 1 -----Note----- In the first test case, Charco can delete the \'b\', \'c\', and \'d\' characters from the initial string \\"abcd\\" to leave only \\"a\\", which is a palindrome of length 1. In the second test case, the initial string \\"aba\\" is already a palindrome of length 3, so no operations are required. In the third test case, Charco can delete the characters \'a\', \'r\', and \'c\', to leave \\"e\\", which is a palindrome of length 1.","solution":"def min_length_palindrome(t, test_cases): Returns the minimum length of a palindrome that can be obtained after applying the operations (reversing substrings and deleting the first character). :param t: Number of test cases :param test_cases: List of strings (initial strings for each test case) :return: List of integers (minimum lengths of palindromes) results = [] for s in test_cases: if s == s[::-1]: # Already a palindrome results.append(len(s)) else: results.append(1) # Minimum length of palindrome is 1 by deleting characters return results"},{"question":"You are given a sequence of integers representing stock prices recorded at different times during a single day. You want to buy and sell the stock at two different times, but the sale must occur after the purchase. The goal is to maximize the profit from one transaction (i.e., buy one and sell one). However, you are allowed to make one more additional transaction after the first one. The caveat is the second buy must follow the first sell, but they can happen on the same day. Write a function `max_profit` that takes a list of integers representing stock prices (prices) and returns the maximum profit you can achieve with the two allowable transactions. Input: - A single line containing space-separated integers representing stock prices for the day. Output: - A single integer representing the maximum profit achievable with up to two transactions. Constraints: - 1 ≤ prices.length ≤ 10^5 - 0 ≤ prices[i] ≤ 10^5 SAMPLE INPUT 3 3 5 0 0 3 1 4 SAMPLE OUTPUT 6 Explanation: - Buy at index 2 (price = 5) and sell at index 5 (price = 3), profit = -2 - Buy at index 6 (price = 1) and sell at index 7 (price = 4), profit = 3 Thus, the total profit is (-2 + 3) = 1 Another way: - Buy at index 3 (price = 0) and sell at index 4 (price = 3), profit = 3 - Buy at index 5 (price = 0) and sell at index 7 (price = 4), profit = 3 + 4 = 6 Thus, the total profit is (3 + 3) = 6","solution":"def max_profit(prices): if not prices: return 0 n = len(prices) # Initializing the lists for two transactions left_profit = [0] * n right_profit = [0] * n # Fill left_profit to store maximum profit till i-th day min_price = prices[0] for i in range(1, n): left_profit[i] = max(left_profit[i - 1], prices[i] - min_price) min_price = min(min_price, prices[i]) # Fill right_profit to store maximum profit from i-th day to last day max_price = prices[n - 1] for i in range(n - 2, -1, -1): right_profit[i] = max(right_profit[i + 1], max_price - prices[i]) max_price = max(max_price, prices[i]) # Find the maximum sum of left_profit and right_profit max_total_profit = 0 for i in range(n): max_total_profit = max(max_total_profit, left_profit[i] + right_profit[i]) return max_total_profit"},{"question":"You are given an array of integers that contains exactly n elements. The array is guaranteed to be a permutation of the integers from 1 to n (inclusive). Your task is to calculate the minimum possible number of adjacent swaps within the array to transform it into a sorted array. An adjacent swap consists of swapping elements a_i and a_{i+1} in the array. Your goal is to determine the minimum number of such swaps needed to sort the array. -----Input----- The first line contains a single integer n (1 le n le 2 cdot 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n — the elements of the array, a permutation of integers from 1 to n. -----Output----- Output the minimum number of adjacent swaps needed to sort the array. -----Examples----- Input 3 3 1 2 Output 2 Input 5 4 2 3 1 5 Output 5","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def add(self, index, value): while index <= self.size: self.tree[index] += value index += index & -index def sum(self, index): result = 0 while index > 0: result += self.tree[index] index -= index & -index return result def min_adjacent_swaps_to_sort(arr): n = len(arr) fenwick_tree = FenwickTree(n) num_inversions = 0 for i in range(n): num_inversions += i - fenwick_tree.sum(arr[i]) fenwick_tree.add(arr[i], 1) return num_inversions"},{"question":"Aliens have landed, and they are huge fans of prime numbers! They want to know how many prime numbers exist within different ranges of natural numbers. Your task is to help them by creating a program that processes a series of queries to count the number of prime numbers within specific ranges. To fulfill this, your program needs to: 1. Compute the prime numbers up to the maximum value present in the queries. 2. For each query, count and return the number of prime numbers present within the specified range (inclusive). Input The first line of input contains an integer `t`, the number of queries (1 ≤ t ≤ 100,000). Each of the next `t` lines contains two space-separated integers `l` and `r` (1 ≤ l ≤ r ≤ 10^6), representing a range of natural numbers. Output For each query, output a single integer, the number of prime numbers within the range from `l` to `r` (inclusive). Examples Input 3 2 10 11 20 1 100 Output 4 4 25 Note In the first query (2 to 10), the prime numbers are 2, 3, 5, and 7, so the output is 4. In the second query (11 to 20), the prime numbers are 11, 13, 17, and 19, so the output is 4. In the third query (1 to 100), there are 25 prime numbers within this range.","solution":"def preprocess_sieve(n): Preprocesses and returns the prime count up to n using the Sieve of Eratosthenes. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 is_prime[0] = is_prime[1] = False prime_count = [0] * (n + 1) for i in range(1, n + 1): prime_count[i] = prime_count[i - 1] + (1 if is_prime[i] else 0) return prime_count def count_primes_in_range(l, r, prime_count): Returns the count of prime numbers in the range [l, r] using the precomputed prime count. return prime_count[r] - prime_count[l - 1] def process_queries(queries): Processes a list of queries to count prime numbers in the given ranges. max_value = max(r for _, r in queries) prime_count = preprocess_sieve(max_value) results = [count_primes_in_range(l, r, prime_count) for l, r in queries] return results"},{"question":"A symmetric string is defined as a string that remains unchanged when its characters are reversed. For example, the string \\"level\\" is symmetric, whereas the string \\"apple\\" is not. Given a string S, you need to determine the minimum number of characters to be appended at the end of the string to make it symmetric. -----Constraints----- - 1 ≦ |S| ≦ 1000 - S consists of lowercase English letters only. -----Input----- The input is given from Standard Input in the following format: S -----Output----- Print the minimum number of characters required to append at the end of string S to make it symmetric. -----Sample Input----- radar -----Sample Output----- 0 -----Sample Input----- abcd -----Sample Output----- 3 Explanation: For the first sample, \\"radar\\" is already symmetric, so no characters need to be appended. For the second sample, appending \\"dcb\\" to \\"abcd\\" makes it \\"abcddcba\\", which is symmetric. Therefore, 3 characters are appended to achieve this.","solution":"def min_chars_to_append_to_make_symmetric(s): Returns the minimum number of characters to be appended to make the string symmetric. n = len(s) for i in range(n): if s[i:] == s[i:][::-1]: return i return n"},{"question":"You are provided with a list of n non-negative integers. Your task is to determine if it is possible to select a subset of these integers such that their sum is divisible by a given integer k. If such a subset exists, print \\"YES\\" (without quotes) on the first line of the output, and print the number of elements in such a subset followed by the elements themselves on the second line. If there are multiple valid subsets, print any one of them. If no such subset exists, print \\"NO\\" (without quotes). Input The first line contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10^4). The second line contains n non-negative integers a1, a2, ..., an (0 ≤ ai ≤ 10^4). Output If a valid subset exists, print \\"YES\\" followed by the number of elements and the elements themselves. Otherwise, print \\"NO\\". Examples Input 5 3 1 2 3 4 5 Output YES 3 1 2 3 Input 4 6 6 1 2 8 Output YES 1 6 Input 3 10 1 1 1 Output NO Note For the first example, one possible subset with sum divisible by 3 is [1, 2, 3]. For the second example, [6] itself is a valid subset since 6 is divisible by 6. For the third example, there is no subset with a sum divisible by 10.","solution":"def find_subset_with_sum_divisible_by_k(n, k, arr): Determine if there exists a subset with sum divisible by k. :param n: Number of elements in the list :param k: The divisor :param arr: List of non-negative integers :return: (result_string, subset) where result_string is \\"YES\\" or \\"NO\\" and subset is the list of elements forming the subset (if found) # Use a dictionary to track subsets and their cumulative sums modulo k dp = {0: []} for num in arr: # Iterate over a copy of the current state of dp dictionary for mod_sum, subset in list(dp.items()): new_sum = (mod_sum + num) % k if new_sum == 0: return \\"YES\\", subset + [num] if new_sum not in dp: dp[new_sum] = subset + [num] return \\"NO\\", [] # Example of function call # n = 5, k = 3, arr = [1, 2, 3, 4, 5] result = find_subset_with_sum_divisible_by_k(5, 3, [1, 2, 3, 4, 5]) print(result)"},{"question":"Alice loves to collect different types of coins. She has n types of coins, each type has an infinite number of coins. The i-th type of coin has a value v_i. Bob wants to give Alice a present on her birthday. He knows that Alice loves numbers that are divisible by every coin value she has collected, so he decides to find the smallest number that is divisible by all n types of coins. But, there\'s a twist! Alice\'s coin collection might have duplicate values, and Bob needs to account for this while finding the smallest number divisible by all coin values. Help Bob to find out the smallest number that is divisible by all the distinct coin values from Alice\'s collection. -----Input----- The first line contains a single integer q (1 le q le 100) — the number of queries. Then q queries follow. For each query, the first line contains a single integer n (1 le n le 50) — the number of different types of coins Alice has. The second line contains n integers v_1, v_2, ldots, v_n (1 le v_{i} le 10^{9}) — the values of the coins. -----Output----- For each query, print a single integer — the smallest number that is divisible by all distinct coin values from Alice\'s collection. -----Examples----- Input 3 3 2 4 8 4 1 2 3 4 5 2 3 5 7 11 Output 8 12 2310 -----Note----- In the first query, the distinct coin values are [2, 4, 8]. The smallest number divisible by all of these values is 8. In the second query, the distinct coin values are [1, 2, 3, 4]. The smallest number divisible by all of these values is 12. In the third query, the distinct coin values are [2, 3, 5, 7, 11]. The smallest number divisible by all of these values is 2310.","solution":"from math import gcd from functools import reduce def lcm(a, b): Compute the Least Common Multiple of a and b return a * b // gcd(a, b) def smallest_number_divisible_by_all_coins(q, queries): results = [] for i in range(q): n = queries[i][0] coins = set(queries[i][1]) if not coins: results.append(1) continue smallest_number = reduce(lcm, coins) results.append(smallest_number) return results"},{"question":"Given an integer array and a positive integer k, modify the array by moving the first k elements to the end of the array. Your task is to complete the function rotateArray() that takes an array and an integer k as inputs and returns the modified array. Example 1: Input: arr = [1, 2, 3, 4, 5] k = 2 Output: [3, 4, 5, 1, 2] Example 2: Input: arr = [10, 20, 30, 40, 50, 60] k = 4 Output: [50, 60, 10, 20, 30, 40] Your Task: You do not need to read input or print anything. Your task is to complete the function rotateArray() which takes an array arr and an integer k as inputs and returns the modified array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= length of array <= 10^5 1 <= k <= length of array","solution":"def rotateArray(arr, k): Returns the array after rotating the first k elements to the end of the array. n = len(arr) # If k == n, the array remains the same if k >= n: k = k % n return arr[k:] + arr[:k]"},{"question":"``` Write a function called `sum_even_numbers` which takes a list of integers `nums` and returns the sum of all the even numbers in the list. ```","solution":"def sum_even_numbers(nums): Returns the sum of all even numbers in the list. Parameters: nums (list of int): A list of integer numbers. Returns: int: Sum of all even numbers in the list. return sum(num for num in nums if num % 2 == 0)"},{"question":"You\'re given a set of coins of different denominations and a total amount of money. Your task is to determine the minimum number of coins needed to make up that amount. If it\'s not possible to make that amount with the given coins, you should return -1. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Each test case follows: - The first line of each test case contains two integers N and M, where N is the number of different coin denominations and M is the amount of money to make up. - The second line of each test case contains N integers indicating the value of the different coin denominations. ------ Output Format ------ For each test case, print a single integer — the minimum number of coins required to make up the amount M. If it is not possible to make that amount with the given coins, print -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 1 ≤ M ≤ 10^3 1 ≤ text{value of each coin} ≤ 10^3 ------ Sample Input 1 ------ 3 3 11 1 2 5 2 3 2 4 1 7 2 ------ Sample Output 1 ------ 3 -1 4 ------ Explanation 1 ------ Test Case 1: The minimum number of coins needed to make up 11 units of currency are 3: 1 coin of value 5 and 3 coins of value 2. Test Case 2: It\'s not possible to make up 3 units of currency using the given denominations. Test Case 3: The minimum number of coins needed to make up 7 units of currency is 4: 3 coins of value 2 and 1 coin of value 1.","solution":"def coin_change(coins, m): Returns the minimum number of coins required to make the amount \'m\', or -1 if it\'s not possible. # Initializing the table for dp. dp[i] will be storing the minimum number of coins required for i amount. dp = [float(\'inf\')] * (m + 1) dp[0] = 0 # Minimum coins to make 0 amount is 0 for coin in coins: for x in range(coin, m + 1): if dp[x - coin] != float(\'inf\'): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[m] if dp[m] != float(\'inf\') else -1 def process_coin_change_cases(t, cases): results = [] for case in cases: n, m, coins = case results.append(coin_change(coins, m)) return results"},{"question":"Given a string S consisting of lowercase letters and an integer K, the task is to find the largest lexicographical string that can be obtained by performing at most K swaps of any two characters in the string. Example 1: Input: S = \\"abdc\\", K = 1 Output: \\"dbac\\" Explanation: By swapping the characters \'a\' and \'d\', the largest string \\"dbac\\" can be obtained. Example 2: Input: S = \\"abcde\\", K = 3 Output: \\"edcba\\" Explanation: By swapping the characters we can get the string \\"edcba\\" after 3 swaps. Your Task: You do not need to read input or print anything. Your task is to complete the function findLargestLexicographicalString() which takes the string S and the integer K as input and returns the largest lexicographical string possible after performing at most K swaps. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^6 1 ≤ K ≤ min(|S|, 100)","solution":"def findLargestLexicographicalString(S, K): def swap_list(string_list, i, j): string_list[i], string_list[j] = string_list[j], string_list[i] def backtrack(string_list, K, start, max_string): if K == 0 or start == len(string_list): current_str = \'\'.join(string_list) if current_str > max_string[0]: max_string[0] = current_str return max_char = max(string_list[start:]) if string_list[start] != max_char: for i in range(start+1, len(string_list)): if string_list[i] == max_char: swap_list(string_list, start, i) backtrack(string_list, K-1, start+1, max_string) swap_list(string_list, start, i) # backtrack else: backtrack(string_list, K, start+1, max_string) max_string = [S] backtrack(list(S), K, 0, max_string) return max_string[0]"},{"question":"Given a grid of size n x m consisting of non-negative integers, your task is to find a path from the top-left corner (1, 1) to the bottom-right corner (n, m) such that the sum of all numbers along the path is minimized. You can move only to the right or down from a cell. You need to handle multiple queries on the grid, each query will either be of type 1 or type 2: 1. Type 1: \\"1 x1 y1 x2 y2\\" asks for the minimum sum on the path from (x1, y1) to (x2, y2). 2. Type 2: \\"2 x y v\\" updates the value of the cell (x, y) to v. Input The first line contains two integers n and m (1 ≤ n, m ≤ 300), the size of the grid. Then n lines follow, each containing m space-separated non-negative integers — the initial values of the grid cells. The next line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The following q lines describe the queries in the format described above. For queries with type 1, 1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m. For queries with type 2, 1 ≤ x ≤ n, 1 ≤ y ≤ m, 0 ≤ v ≤ 10^9. Output For each query of type 1, output the minimum sum of the path from (x1, y1) to (x2, y2). Example Input 3 3 1 2 3 4 5 6 7 8 9 3 1 1 1 3 3 2 2 2 1 1 1 1 3 3 Output 21 19","solution":"def min_path_sum(grid, x1, y1, x2, y2): Calculates the minimum sum path from (x1, y1) to (x2, y2) n = x2 - x1 + 1 m = y2 - y1 + 1 dp = [[0] * m for _ in range(n)] dp[0][0] = grid[x1 - 1][y1 - 1] for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[x1 - 1 + i][y1 - 1] for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[x1 - 1][y1 - 1 + j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[x1 - 1 + i][y1 - 1 + j] return dp[n - 1][m - 1] def process_queries(n, m, grid, queries): results = [] for query in queries: q = list(map(int, query.split())) if q[0] == 1: x1, y1, x2, y2 = q[1:] results.append(min_path_sum(grid, x1, y1, x2, y2)) elif q[0] == 2: x, y, v = q[1:] grid[x - 1][y - 1] = v return results"},{"question":"You have an array a_1, a_2, dots, a_n consisting of n positive integers. You are allowed to perform the following operation on it: Select an integer k such that 1 leq k < n, and split the array into two subarrays: a_1, a_2, dots, a_k and a_{k+1}, a_{k+2}, dots, a_n. Compute the sum of the first subarray and the sum of the second subarray. Then, replace these two subarrays with their respective sums, maintaining their order. Note that the array changes after each operation, and the subsequent operations are performed on the new array. What is the minimum number of operations needed to reduce the length of the array to 1? -----Input----- The first line consists of a single integer n (2 le n le 10^5). The second line consists of n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^4). -----Output----- Output a single line containing one integer — the minimum number of operations needed to reduce the length of the array to 1. -----Examples----- Input 4 1 2 3 4 Output 3 Input 3 5 7 8 Output 2 -----Note----- In the first example, the array can be reduced in the following steps: Split the array into [1, 2, 3] and [4]. Replace with [6, 4]. Split [6, 4] into [6] and [4]. Replace with [10]. It takes 3 operations to reduce the array to 1 element. In the second example, the array can be reduced in the following steps: Split the array into [5, 7] and [8]. Replace with [12, 8]. Split [12, 8] into [12] and [8]. Replace with [20]. It takes 2 operations to reduce the array to 1 element.","solution":"def min_operations_to_reduce_length_to_one(n, array): Returns the minimum number of operations needed to reduce the length of the array to 1. # To reduce the array length to 1, we need n-1 operations. return n - 1"},{"question":"In an online gaming event, players are connected through a network. Each player can send messages directly to other players. The event organizer wants to ensure that every player can communicate with every other player, either directly or indirectly through mutual contacts. You are required to determine the minimum number of connections needed to connect all players. Your task is to design a function that takes the number of players and the current list of connections as input and outputs the minimum number of additional connections required to ensure all players are connected. Input Format: - The first line contains an integer N, denoting the number of players in the game. - The second line contains an integer M, denoting the number of current connections. - Each of the next M lines contains two integers X and Y, indicating that player X and player Y have a direct connection. Output Format: - Output the minimum number of additional connections needed to ensure all players are connected. Constraints: - 1 ≤ N ≤ 100 - 0 ≤ M ≤ (N * (N - 1)) / 2 - 1 ≤ X, Y ≤ N SAMPLE INPUT 5 3 1 2 2 3 4 5 SAMPLE OUTPUT 1 Explanation: With the given connections, players [1, 2, 3] are connected, and players [4, 5] are connected. To ensure all players are connected, we need one additional connection, for example, connecting player 3 with player 4.","solution":"def minimum_additional_connections(N, M, connections): Determine the minimum number of additional connections needed to connect all players. Args: N (int): Number of players M (int): Number of current connections connections (list of tuple): List of M connections where each connection is a tuple (X, Y) Returns: int: Minimum number of additional connections needed # Create adjacency list for the graph from collections import defaultdict, deque graph = defaultdict(list) for x, y in connections: graph[x].append(y) graph[y].append(x) # To find connected components visited = [False] * (N + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Count the number of connected components connected_components = 0 for i in range(1, N + 1): if not visited[i]: bfs(i) connected_components += 1 # To connect k components, we need k-1 connections return connected_components - 1"},{"question":"Johan has a large company that manufactures small gear mechanisms. Each gear mechanism consists of an array of gears, where each gear has a specific number of teeth. To ensure quality and durability, Johan wants to verify the balance of the gear mechanism by checking the symmetry of the teeth distribution. A gear mechanism is considered balanced if the sum of the teeth count in the first half of the array is equal to the sum of the teeth count in the second half. The array can be of any length, but it is guaranteed to always have an even number of gears. Write a function that checks if a given gear mechanism is balanced. -----Input----- The input is a single line containing an even integer n (2 leq n leq 1000), followed by n space-separated integers representing the number of teeth on each gear in the gear mechanism. -----Output----- Output a single line containing \\"YES\\" if the gear mechanism is balanced, and \\"NO\\" otherwise. -----Examples----- Sample Input 1: 4 10 20 20 10 Sample Output 1: YES Sample Input 2: 6 3 6 9 9 6 3 Sample Output 2: YES Sample Input 3: 4 1 5 3 7 Sample Output 3: NO","solution":"def is_gear_mechanism_balanced(n, gears): Checks if the gear mechanism is balanced. Parameters: n (int): The number of gears (even integer). gears (list of int): The number of teeth on each gear. Returns: str: \\"YES\\" if the gear mechanism is balanced, \\"NO\\" otherwise. half = n // 2 if sum(gears[:half]) == sum(gears[half:]): return \\"YES\\" else: return \\"NO\\""},{"question":"Create a function that accepts a string of lowercase letters and returns the string with all vowels (a, e, i, o, u) removed. The function should preserve the order of the remaining characters. For instance: ``` remove_vowels(\\"hello world\\") == \\"hll wrld\\" remove_vowels(\\"programming is fun\\") == \\"prgrmmng s fn\\" remove_vowels(\\"complete the assignment\\") == \\"cmplt th ssgnmnt\\" ``` Note: Make sure to handle cases where the string is empty or contains no vowels.","solution":"def remove_vowels(s): Remove all vowels from the string `s`. Args: s (str): A string of lowercase letters. Returns: str: The string with all vowels removed, maintaining the order of other characters. vowels = \'aeiou\' return \'\'.join([char for char in s if char not in vowels])"},{"question":"You are given a list of logs sorted by their start timestamp in ascending order. Each log contains a timestamp and a duration representing when the log was started and completed. Your task is to write a function that finds the maximum number of overlapping logs at any point in time. Example 1: Input: logs = [(1, 4), (2, 3), (5, 6)] Output: 2 Explanation: Log 1: Start at 1, end at 4. Log 2: Start at 2, end at 5. Log 3: Start at 5, end at 6. At time 2, log 1 and log 2 overlap. Thus, the maximum overlap is 2. Example 2: Input: logs = [(1, 3), (2, 5), (4, 6)] Output: 2 Explanation: Log 1: Start at 1, end at 4. Log 2: Start at 2, end at 5. Log 3: Start at 4, end at 6. At times 2 and 4, there are overlaps. Thus, the maximum overlap is 2. Example 3: Input: logs = [(1, 3), (4, 5), (6, 7)] Output: 1 Explanation: No logs overlap in this case. Thus, the maximum overlap is 1. Constraints: 1. The logs array will have at least one log. 2. Each log entry will have two positive integer values, with the first value strictly less than the second value. 3. The length of logs will not exceed 100,000 entries.","solution":"def max_overlap(logs): Given a list of logs where each log is represented by a tuple (start, end), find the maximum number of overlapping logs at any point in time. events = [] for start, end in logs: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events by time, and in case of tie, \'end\' should come before \'start\' events.sort(key=lambda x: (x[0], x[1] == \'start\')) cur_overlap = 0 max_overlap = 0 for event in events: if event[1] == \'start\': cur_overlap += 1 max_overlap = max(max_overlap, cur_overlap) else: # event[1] == \'end\' cur_overlap -= 1 return max_overlap"},{"question":"------ Input ------ You are given an array of N integers. Your task is to determine the number of unordered pairs (i, j) such that the sum of elements at these indices is even. Two pairs (i, j) and (j, i) are considered the same and should be counted only once, and i should not be equal to j. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains the integer N. The second line of each test case contains N space-separated integers representing the array. ------ Output ------ For each test case, output a single line containing the number of unordered pairs (i, j) such that the sum of elements at these indices is even. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 1 ≤ A[i] ≤ 100 ------ Subtasks ------ Subtask #1[30 points]: N is even Subtask #2[70 points]: No additional conditions ----- Sample Input 1 ------ 2 4 1 2 3 4 3 5 7 9 ----- Sample Output 1 ------ 2 3","solution":"def count_even_sum_pairs(arr): # Count even and odd elements in the array even_count = sum(1 for x in arr if x % 2 == 0) odd_count = len(arr) - even_count # Calculate the number of valid pairs even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs def solve(test_cases): results = [] for case in test_cases: n, arr = case results.append(count_even_sum_pairs(arr)) return results"},{"question":"Task You are given a positive integer N. Write a function that determines the number of unique ways to represent N as a sum of two or more consecutive positive integers. # Example For `N = 15`, the output should be `3`. There are three ways to represent 15 as the sum of consecutive numbers: - 1 + 2 + 3 + 4 + 5 = 15 - 4 + 5 + 6 = 15 - 7 + 8 = 15 For `N = 10`, the output should be `1`. There is only one way to represent 10 as the sum of consecutive numbers: - 1 + 2 + 3 + 4 = 10 # Input/Output - [input] integer `N` A positive integer. Constraints: `1 ≤ N ≤ 10^5`. - [output] an integer value The number of unique ways to represent N as a sum of two or more consecutive positive integers.","solution":"def count_consecutive_sum(N): Determines the number of unique ways to represent N as a sum of two or more consecutive positive integers. Args: N: A positive integer. Returns: An integer representing the number of unique ways to represent N as described. count = 0 k = 1 while (k * (k + 1)) // 2 < N: if (N - (k * (k + 1) // 2)) % (k + 1) == 0: count += 1 k += 1 return count"},{"question":"Given a 2D grid of size N times M filled with integers, your task is to calculate the sum of all unique integers present in the grid. Two integers are considered the same if they have the same value, even if they appear in different positions in the grid. -----Input----- - The first line of the input contains two integers N and M denoting the number of rows and columns in the grid, respectively. - The next N lines contain M space-separated integers each, representing the grid. -----Output----- Print a single integer representing the sum of all unique integers present in the grid. -----Constraints----- - 1 le N, M le 1000 - -10^6 le text{Grid[i][j]} le 10^6 for each valid i, j -----Example Input----- 3 3 1 2 3 4 5 6 1 2 3 -----Example Output----- 20 -----Explanation----- The unique values in the grid are 1, 2, 3, 4, 5, 6. Their sum is 1 + 2 + 3 + 4 + 5 + 6 = 21.","solution":"def sum_of_unique_integers(grid): Returns the sum of all unique integers present in the grid. unique_integers = set() for row in grid: for item in row: unique_integers.add(item) return sum(unique_integers) # Example usage with provided input: # N, M = 3, 3 # grid = [ # [1, 2, 3], # [4, 5, 6], # [1, 2, 3] # ] # print(sum_of_unique_integers(grid)) # Output should be 21"},{"question":"A binary tree is given as a list of integers in level order, where null values are denoted by -1. Determine if the binary tree is height-balanced. A height-balanced binary tree is defined as a binary tree in which the left and right subtrees of every node differ in height by no more than 1. Example 1: Input: tree = [3, 9, 20, -1, -1, 15, 7] Output: true Example 2: Input: tree = [1, 2, 2, 3, 3, -1, -1, 4, 4] Output: false Note: - The input list represents a binary tree in level order traversal. - A value of -1 indicates a null node. - An empty list should be considered as a height-balanced tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def insert_level_order(arr, root, i, n): if i < n: if arr[i] == -1: return None temp = TreeNode(arr[i]) root = temp root.left = insert_level_order(arr, root.left, 2 * i + 1, n) root.right = insert_level_order(arr, root.right, 2 * i + 2, n) return root def check_balanced(root): def check_height(node): if not node: return 0 left_height = check_height(node.left) right_height = check_height(node.right) if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(root) != -1 def is_height_balanced(tree): if not tree: return True n = len(tree) root = insert_level_order(tree, None, 0, n) return check_balanced(root)"},{"question":"You are given a function that reverses the characters of each word in a given string while maintaining the order of words. Punctuation marks and special characters should not be reversed nor rearranged but kept in their original positions relative to their respective words. Examples: ```python reverse_words(\\"hello world!\\") //=> \\"olleh dlrow!\\" reverse_words(\\"The quick, brown fox!\\") //=> \\"ehT kciuq, nworb xof!\\" reverse_words(\\"This is an example.\\") //=> \\"sihT si na elpmaxe.\\" ``` Documentation: ```python reverse_words(sentence); ``` - sentence - a string containing one or more words separated by spaces. Words may also contain punctuation marks. # Constraints - Only letters should be reversed within each word. - Words are separated by a single space (\' \'). - Punctuation marks and special characters should remain in their original positions. # Additional Notes If the input string is empty, the output should also be an empty string.","solution":"def reverse_words(sentence): Reverses the characters of each word in the given sentence while maintaining the order of words. Punctuation marks and special characters should remain in their original positions. Args: sentence (str): The input sentence containing words and potential punctuation. Returns: str: The sentence with each word\'s letters reversed but with original positions of punctuation. def reverse_word(word): # Get the positions of non-alphabetic characters non_alpha_positions = [(i, char) for i, char in enumerate(word) if not char.isalpha()] # Filter out only alphabetic characters and reverse them letters = [char for char in word if char.isalpha()] letters.reverse() # Add the non-alphabetic characters back in their original positions for pos, char in non_alpha_positions: letters.insert(pos, char) return \'\'.join(letters) # Split the sentence into words, reverse each word and join them back with spaces reversed_sentence = \' \'.join(reverse_word(word) for word in sentence.split()) return reversed_sentence"},{"question":"A city park is designing a new section where there are different types of flower beds. Each flower bed will be a different geometric shape: a circular flower bed, a rectangular flower bed, and a triangular flower bed. The city needs to know the total area of the flower beds to calculate the amount of seeds and soil required. Your task is to calculate the total area of these flower beds. -----Input----- The input contains three lines. The first line contains one integer r (1 ≤ r ≤ 1000) — the radius of the circular flower bed. The second line contains two integers l and w (1 ≤ l, w ≤ 1000) — the length and width of the rectangular flower bed. The third line contains two integers a and h (1 ≤ a, h ≤ 1000) — the base and height of the triangular flower bed. -----Output----- Output one number — the total area of the flower beds. Absolute or relative error should not be greater than 10^{ - 6}. -----Examples----- Input 3 4 6 5 2 Output 51.56637061435917","solution":"import math def total_area_of_flower_beds(r, l, w, a, h): Calculate the total area of all flower beds. Parameters: r (int): radius of the circular flower bed l (int): length of the rectangular flower bed w (int): width of the rectangular flower bed a (int): base of the triangular flower bed h (int): height of the triangular flower bed Returns: float: total area of the flower beds circular_area = math.pi * r * r rectangular_area = l * w triangular_area = 0.5 * a * h total_area = circular_area + rectangular_area + triangular_area return total_area"},{"question":"In a particular kingdom, there are n cities connected by m bidirectional roads. Every road is characterized by two integers a and b indicating that there is a road between city a and city b. The kingdom\'s rule is that each road can be safely traversed without passing through more than one other city. The king wishes to strengthen the kingdom\'s infrastructure by ensuring that a rescue team can be dispatched to any city j from any city i using a series of connected roads. However, because of limited resources, the king cannot afford to build new roads. Thus, the king needs to know if it\'s possible to dispatch a rescue team between every pair of cities using the existing roads. Your task is to write a program that determines if the kingdom\'s cities are connected (i.e., there is a path between every pair of cities). Input The first line contains two integers n and m (1 ≤ n ≤ 2500, 0 ≤ m ≤ 2500) — the number of cities and the number of roads, respectively. The next m lines contain two integers a and b each (1 ≤ a, b ≤ n) that mean that there is a road between cities a and b. Each road is bidirectional. Output Output a single line with the word \\"YES\\" if every city is reachable from any other city, otherwise print \\"NO\\". Examples Input 5 5 1 2 2 3 3 4 4 5 2 4 Output YES Input 4 2 1 2 3 4 Output NO Note In the first example: - Cities 1, 2, 3, 4, and 5 are connected in a way that you can travel between any two cities. In the second example: - Cities 1 and 2 are connected. - Cities 3 and 4 are connected. - There is no way to travel between city 1 (or city 2) and city 3 (or city 4).","solution":"def is_connected(n, m, connections): from collections import defaultdict, deque # Create the adjacency list for the graph graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) # Use BFS to check if all nodes are reachable from node 1 visited = set() queue = deque([1]) while queue: current = queue.popleft() if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) # Check if all cities are visited return len(visited) == n # Example usage def connected_kingdom(n, m, roads): return \\"YES\\" if is_connected(n, m, roads) else \\"NO\\""},{"question":"Write a function called `unique_characters` that takes a string as input and returns a boolean indicating whether the string has all unique characters (i.e., no character repeats). The function should be case-sensitive, meaning \'a\' and \'A\' should be considered different characters. You may assume that the input string contains only ASCII characters. The following are examples of expected output values: ```python unique_characters(\\"abcdef\\") # returns True unique_characters(\\"1234567\\") # returns True unique_characters(\\"aA\\") # returns True unique_characters(\\"hello\\") # returns False unique_characters(\\"world\\") # returns True ```","solution":"def unique_characters(s): Returns True if the string s has all unique characters, otherwise returns False. The function is case-sensitive and considers \'a\' and \'A\' as different characters. return len(s) == len(set(s))"},{"question":"A car race simulation is being held on a circular track with `n` checkpoints. Each checkpoint has a pitstop with a certain amount of fuel and requires a specific amount of fuel to reach the next checkpoint. You are given two equal-length arrays `fuel` and `cost`, where `fuel[i]` represents the fuel available at the ith checkpoint, and `cost[i]` represents the fuel cost to travel to the next checkpoint (where the last checkpoint wraps around to the first checkpoint). Determine if there exists a starting checkpoint from which a car can complete the entire circuit without running out of fuel. Return the index of the starting checkpoint if possible, otherwise return -1.","solution":"def can_complete_circuit(fuel, cost): Determine the starting checkpoint index from which a car can complete the entire circuit. :param fuel: List of fuel available at each checkpoint. :param cost: List of fuel costs to reach the next checkpoint. :return: Starting checkpoint index or -1 if it\'s not possible to complete the circuit. if sum(fuel) < sum(cost): return -1 total_tank, current_tank, start_index = 0, 0, 0 for i in range(len(fuel)): total_tank += fuel[i] - cost[i] current_tank += fuel[i] - cost[i] if current_tank < 0: start_index = i + 1 current_tank = 0 return start_index if total_tank >= 0 else -1"},{"question":"In a given string representing a sequence of operations, compute the final value of a variable starting from zero. The operations can include adding or subtracting integers, as well as incrementing or decrementing by 1. All operations are separated by spaces. Write a function that takes the operations string as input and returns the final value of the variable. Examples: ``` Input: \\"++ 5 -- -3 ++ 2\\" Output: 5 Explanation: Start with value 0. Operation ++ increments value to 1. Operation 5 adds 5 so value is now 6. Operation -- decrements value to 5. Operation -3 subtracts 3 so value becomes 2. Operation ++ increments value to 3. Operation 2 adds 2 so final value is 5. ``` Notes: - The input string will only contain valid operations. - Operations will be separated by one or more spaces. - You can assume the input will always follow the described format and it will be non-empty.","solution":"def compute_final_value(operations: str) -> int: Computes the final value of the variable starting at zero based on the given operations. Operations can include adding or subtracting integers, as well as incrementing or decrementing by 1. :param operations: A string containing operations separated by spaces :return: The final value of the variable value = 0 for operation in operations.split(): if operation == \'++\': value += 1 elif operation == \'--\': value -= 1 else: value += int(operation) return value"},{"question":"# Task Alice loves even numbers and she hates odd numbers. She wants a python program to help her extract even numbers from a given list and sum them up. Additionally, if the list is empty, the program should return \'No numbers given\'. Write a function called `sum_even_numbers` that takes a single input: ```python def sum_even_numbers(numbers): # Your code here ``` * `numbers`: A list of integers. The function should return the sum of all even numbers in the list. If the list does not contain any numbers, it should return \'No numbers given\'. If there are no even numbers in the list, it should return 0. Examples ```python sum_even_numbers([1, 2, 3, 4, 5, 6]) # should return 12 (because 2+4+6 = 12) sum_even_numbers([1, 3, 5, 7]) # should return 0 (because there are no even numbers) sum_even_numbers([]) # should return \'No numbers given\' sum_even_numbers([2, 4, 6, 8]) # should return 20 (because 2+4+6+8 = 20) ``` Constraints * Each element in the input list will be an integer. * The input list length will not exceed 1000 elements.","solution":"def sum_even_numbers(numbers): if not numbers: return \'No numbers given\' even_sum = sum(num for num in numbers if num % 2 == 0) return even_sum"},{"question":"Given an array of integers `arr` and a target integer `k`, you need to determine whether an integer `x` exists such that `x` appears exactly `k` times in the array. Return `True` if such an integer exists, otherwise return `False`. Example: Input: arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3 Output: True Explanation: The integer 3 appears exactly 3 times in the array. Input: arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 5 Output: False Explanation: No integer appears exactly 5 times in the array. Input: arr = [], k = 1 Output: False Explanation: The array is empty, so no integers appear. Note: 1. The length of array `arr` will be between 0 and 10^5. 2. The value of integer `k` will be between 1 and 10^5. 3. Elements in `arr` are integers in the range -10^6 to 10^6.","solution":"def has_integer_occurring_k_times(arr, k): Determines if there\'s an integer in the array that occurs exactly k times. :param arr: List[int] - The array of integers. :param k: int - The target occurrence count. :return: bool - True if an integer exists with exactly k occurrences, otherwise False. from collections import Counter count = Counter(arr) return any(value == k for value in count.values())"},{"question":"You are developing a new task management system for a company. Tasks are frequently dependent on other tasks finishing before they can start. Your goal is to figure out the order in which tasks should be completed to meet their dependencies. Given the number of tasks and a list of task dependencies, you are to determine the order of task completion if it is possible. If there are multiple valid orders, output any one of them. If it’s impossible to complete all tasks due to a circular dependency, output ‘impossible’. -----Input----- The first line contains one integer, n (1 leq n leq 1000), the number of tasks. The next line contains one integer, m (0 leq m leq 10000), the number of dependencies. The next m lines each contain two space-separated integers, a and b (0 leq a, b < n), indicating that task b cannot start until task a is complete. -----Output----- Output a list of integers representing the order in which tasks should be completed, or, if it is not possible, output ‘impossible’. -----Examples----- Sample Input 1: 4 3 0 1 1 2 2 3 Sample Output 1: 0 1 2 3 Sample Input 2: 3 3 0 1 1 2 2 0 Sample Output 2: impossible Sample Input 3: 6 6 5 2 5 0 4 0 4 1 2 3 3 1 Sample Output 3: 5 4 2 3 0 1","solution":"from collections import deque, defaultdict def find_task_order(n, m, dependencies): # Create an adjacency list and an array to maintain in-degrees graph = defaultdict(list) in_degree = [0] * n for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Queue to keep all nodes with in-degree 0 queue = deque() for i in range(n): if in_degree[i] == 0: queue.append(i) topological_order = [] while queue: node = queue.popleft() topological_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topological_order) == n: return topological_order else: return \\"impossible\\" # Parsing input def parse_input(input_string): lines = input_string.strip().split(\\"n\\") n = int(lines[0].strip()) m = int(lines[1].strip()) dependencies = [] for i in range(2, 2 + m): a, b = map(int, lines[i].strip().split()) dependencies.append((a, b)) return n, m, dependencies"},{"question":"Maria is fascinated by palindromes and wants to write a program to help her find them in a list of strings. A palindrome is a word, phrase, or sequence that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Can you help Maria by writing a function that identifies all palindromes in the given list of strings? Input You are given a list of strings. Each string will be on a new line. The input terminates with an empty line. Each string will consist of alphanumeric characters, spaces, and punctuation marks, and will be at most 100 characters long. Output For each string that is a palindrome, print \\"Palindrome\\". For each string that is not a palindrome, print \\"Not a Palindrome\\". Example Input A man a plan a canal Panama No lemon, no melon Hello world Was it a car or a cat I saw Output Palindrome Palindrome Not a Palindrome Palindrome","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned_string == cleaned_string[::-1] def identify_palindromes(strings): Identifies all palindromes in the given list of strings. results = [] for s in strings: if is_palindrome(s): results.append(\\"Palindrome\\") else: results.append(\\"Not a Palindrome\\") return results"},{"question":"Taru and Chandu are playing another game. This time Taru gives Chandu a number and asks him to find the number of ways to split the number into two parts such that both parts are prime numbers and the sum of these primes equals the given number. For example: For N = 10, the prime pairs that sum up to 10 are (3, 7) and (5, 5). Hence, there are 2 ways. INPUT - The number of test cases T. Next T lines contain a number N. OUTPUT - The number of ways to split N into two prime parts. CONSTRAINTS - 1 ≤ T ≤ 50 2 ≤ N ≤ 10^6 SAMPLE INPUT 2 10 12 SAMPLE OUTPUT 2 1 Explanation For first test case: 10 can be split into two primes as (3, 7) and (5, 5). Hence the output is 2. For second test case: 12 can be split into two primes as (5, 7). Hence the output is 1.","solution":"def sieve_of_eratosthenes(max_num): Returns a list of boolean values where the index represents the number. True means the index number is prime. is_prime = [True] * (max_num + 1) p = 2 while (p * p <= max_num): if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 is_prime[0], is_prime[1] = False, False return is_prime def count_prime_pairs(N, primes): Returns the number of ways to split N into two prime parts. count = 0 for i in range(2, N // 2 + 1): if primes[i] and primes[N - i]: count += 1 return count def solve(test_cases): Returns the results for all test cases max_n = max(test_cases) primes = sieve_of_eratosthenes(max_n) results = [] for N in test_cases: results.append(count_prime_pairs(N, primes)) return results # Example usage: # T = 2 # test_cases = [10, 12] # print(solve(test_cases)) # Output: [2, 1]"},{"question":"Xenia, a coding enthusiast, wants to practice her skills in Chefland\'s remote mountains which have N checkpoints. Each checkpoint has a specific difficulty level. Xenia decides to start at any checkpoint and wants to maximize the number of checkpoints she visits while following these rules: 1. She can only move to a checkpoint with a strictly higher difficulty level than the current checkpoint. 2. Once she moves to a new checkpoint, she cannot return to a previously visited checkpoint. 3. The difficulty level of checkpoints may change dynamically. Specifically, every checkpoint\'s difficulty level increases by 1 each time it is visited. Given the initial difficulty levels of the checkpoints, determine the maximum number of checkpoints Xenia can visit. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of checkpoints. - The second line of each test case contains N space-separated integers D_{1}, D_{2}, dots, D_{N} denoting the difficulty levels of each checkpoint. ------ Output Format ------ For each test case, output in a single line the maximum number of checkpoints Xenia can visit. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ D_{i} ≤ 10^{9} ----- Sample Input 1 ------ 2 5 4 2 6 8 3 3 5 5 5 ----- Sample Output 1 ------ 4 1 ----- Explanation 1 ------ - Test case 1: If Xenia starts at checkpoint 2 with difficulty level 2, then, the new difficulties will be [4, 3, 6, 8, 3]. She can move to checkpoints with difficulties 3, 4, 6, and finally 8. So she visits 4 checkpoints in total. - Test case 2: All checkpoints have the same difficulty level of 5. Xenia can only visit one checkpoint since no other checkpoint has a strictly higher difficulty level.","solution":"def max_checkpoints(T, test_cases): results = [] for case in test_cases: N, difficulties = case difficulties.sort() count = 1 for i in range(1, N): if difficulties[i] > difficulties[i - 1]: count += 1 difficulties[i] += 1 # Increase the difficulty level as it is visited results.append(count) return results"},{"question":"Maria is designing a new social media platform, and she wants to implement a feature that notifies users when certain keywords appear in a string. She needs your help to write an efficient algorithm for this task. You are given a string s of length n consisting of lowercase English letters. Additionally, you are given an array of m keywords, where each keyword is a string of lowercase English letters. Your task is to determine whether any of the keywords appear as a substring in the string s. Input The first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the length of the string s. The second line contains the string s. The third line of the input contains a single integer m (1 ≤ m ≤ 10) — the number of keywords. The next m lines contain one keyword each. Each keyword consists of lowercase English letters and has a length between 1 and 100, inclusive. Output Print \\"YES\\" if any keyword is found as a substring in s. Otherwise, print \\"NO\\". Examples Input 10 hellohoware 3 hello are what Output YES Input 7 sandbox 2 box ship Output YES Input 5 abcde 2 fgh ijk Output NO Note In the first sample, the keyword \\"hello\\" is a substring of the string \\"hellohoware\\". In the second sample, the keyword \\"box\\" is a substring of the string \\"sandbox\\". In the third sample, neither \\"fgh\\" nor \\"ijk\\" are substrings of the string \\"abcde\\".","solution":"def contains_keywords(n, s, m, keywords): Checks if any of the keywords are substrings of the string s. Parameters: n (int): Length of the string s. s (str): The string to be searched. m (int): Number of keywords. keywords (list of str): The keywords to search for. Returns: str: \\"YES\\" if any keyword is a substring of s, otherwise \\"NO\\". for keyword in keywords: if keyword in s: return \\"YES\\" return \\"NO\\""},{"question":"Alex wants to distribute candies to all the children in an orphanage. He wants to ensure that each child gets an equal number of candies and that no candies are left undistributed. Given that Alex has C candies and there are M children in the orphanage, determine whether Alex can distribute all the candies equally among all the children without any leftover. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains the two integers C and M - the number of candies and the number of children, respectively. ------ Output Format ------ For each test case, output YES if Alex can distribute all the candies without any leftover. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤T ≤1000 1 ≤C ≤10000 1 ≤M ≤100 ----- Sample Input 1 ------ 4 10 2 5 3 12 4 9 3 ----- Sample Output 1 ------ YES NO YES YES ----- explanation 1 ------ - Test case 1: Alex has 10 candies, and there are 2 children. Each child gets 10 div 2 = 5 candies, with no leftover. - Test case 2: Alex has 5 candies, and there are 3 children. Distributing the candies would leave 5 mod 3 = 2 candies as leftover. - Test case 3: Alex has 12 candies, and there are 4 children. Each child gets 12 div 4 = 3 candies, with no leftover. - Test case 4: Alex has 9 candies, and there are 3 children. Each child gets 9 div 3 = 3 candies, with no leftover.","solution":"def can_distribute_equally(candies, children): Determines if all candies can be distributed equally among children with no candies left undistributed. :param int candies: The number of candies to distribute :param int children: The number of children among whom the candies are to be distributed :return: \'YES\' if candies can be evenly distributed, \'NO\' otherwise :rtype: str if candies % children == 0: return \\"YES\\" else: return \\"NO\\" def distribute_candies(test_cases): Process multiple test cases to determine if candies can be evenly distributed among children for each test case. :param list test_cases: List of tuples containing (candies, children) :return: List of results for each test case :rtype: list results = [] for candies, children in test_cases: results.append(can_distribute_equally(candies, children)) return results"},{"question":"Emily is practicing her running skills for an upcoming marathon. She runs on a track that is divided into N sections, each of which can be flat or inclined. Each section is represented by a sequence of letters where \'F\' indicates a flat section and \'I\' indicates an inclined section. Emily\'s speed changes depending on the type of section: - On a flat section, she runs 1 meter per second. - On an inclined section, she runs 0.5 meters per second. Emily wants to know the total time it will take to complete running a given track. Input: A single line containing the sequence of N letters (\'F\' or \'I\'). Output: A single line of output that indicates the total time (in seconds) for Emily to complete the run. Constraints: 1 ≤ N ≤ 10^6 Problem Setter: Your Name SAMPLE INPUT FFIIF SAMPLE OUTPUT 4.5","solution":"def calculate_total_time(track): Calculates the total time in seconds for Emily to complete the run. :param track: A string consisting of \'F\' and \'I\' where each character represents a section of the track \'F\' means flat section where the speed is 1 meter per second \'I\' means inclined section where the speed is 0.5 meters per second :return: Total time in seconds as a float total_time = 0.0 for section in track: if section == \'F\': total_time += 1.0 elif section == \'I\': total_time += 2.0 return total_time"},{"question":"Given a matrix with dimensions N x N, write a program to rotate the matrix elements clockwise by 90 degrees. -----Constraints----- - All values in the input are integers. - 1 leq N leq 100 - Matrix elements are integers within the range -10^4 to 10^4. The rotation should be done in-place, and the transformation should be reflected in the original matrix data structure. -----Input----- Input is given from Standard Input in the following format: N A_11 A_12 ... A_1N A_21 A_22 ... A_2N ... A_N1 A_N2 ... A_NN -----Output----- Print the matrix after rotating it 90 degrees clockwise. -----Sample Input----- 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -----Sample Output----- 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 Explanation: After rotating the original matrix by 90 degrees clockwise, the resulting matrix should look like this: 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_90_clockwise(matrix): Rotate the given N x N matrix by 90 degrees clockwise in place. N = len(matrix) for i in range(N // 2): for j in range(i, N - i - 1): tmp = matrix[i][j] matrix[i][j] = matrix[N - j - 1][i] matrix[N - j - 1][i] = matrix[N - i - 1][N - j - 1] matrix[N - i - 1][N - j - 1] = matrix[j][N - i - 1] matrix[j][N - i - 1] = tmp def format_matrix(matrix): Format the matrix into a string for printing. return \'n\'.join(\' \'.join(map(str, row)) for row in matrix)"},{"question":"The city of Byzantine has been known for its complex network of secret tunnels. There is a legend that says there are secret societies who use these tunnels to conduct their clandestine meetings. The tunnels are represented as a graph where each tunnel connects two distinct chambers. Some tunnels may remain unused, as not all chambers are connected. Your task is to determine if there is a cycle of exactly four distinct chambers in the network. In graph theory terms, you need to check if there exists a cycle of four vertices. If such a cycle exists, output \\"YES\\". Otherwise, output \\"NO\\". -----Input----- The first line of the input contains two space-separated integers n and m (4 ≤ n ≤ 3000, 0 ≤ m ≤ 6000) — the number of chambers and the number of tunnels, respectively. The following m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) — signifying a tunnel between chamber u and chamber v. Each tunnel is provided once, and there are no multiple tunnels between any pair of chambers. -----Output----- Output \\"YES\\" if there is a cycle of exactly four distinct chambers. Otherwise, output \\"NO\\". -----Examples----- Input 6 7 1 2 1 3 2 3 2 4 3 4 4 5 5 6 Output YES Input 5 4 1 2 2 3 3 4 4 5 Output NO -----Note----- In the first example, there is a cycle of four chambers: 1-2-3-4. Hence, the output is \\"YES\\". In the second example, there is no cycle of four chambers. Hence, the output is \\"NO\\".","solution":"def has_cycle_of_four(n, m, edges): from collections import defaultdict graph = defaultdict(set) for u, v in edges: graph[u].add(v) graph[v].add(u) # A simple way to detect a cycle of length 4 # Check pairs of vertices (u, v) connected by an edge for u in range(1, n + 1): for v in graph[u]: if v > u: # Count common neighbours between u and v common_neighbours = graph[u].intersection(graph[v]) if len(common_neighbours) >= 2: return \\"YES\\" return \\"NO\\""},{"question":"Milo is playing a game with strings. He has a string `s` consisting of lowercase English letters. The game requires him to determine if it\'s possible to rearrange the characters in the string such that no two adjacent characters are the same. If it is possible, return one of the possible rearrangements. If there are multiple possible ways to rearrange, return any valid one. If it is not possible to rearrange the string in such a manner, return \\"NO\\". # Constraints - `1 ≤ len(s) ≤ 10^5` - The string contains only lowercase English letters. # Input The input is given from Standard Input in the following format: ``` s ``` # Output Print the rearranged string if possible. If it is not possible to rearrange the string such that no two adjacent characters are the same, print `NO`. # Examples Input ``` aabb ``` Output ``` abab ``` Input ``` aaab ``` Output ``` NO ```","solution":"from collections import Counter import heapq def reorganize_string(s: str) -> str: Returns a string such that no two adjacent characters are the same, if possible. Otherwise, returns \\"NO\\". char_count = Counter(s) maxHeap = [(-count, char) for char, count in char_count.items()] heapq.heapify(maxHeap) prev_count, prev_char = 0, \'\' result = [] while maxHeap: count, char = heapq.heappop(maxHeap) result.append(char) if prev_count < 0: heapq.heappush(maxHeap, (prev_count, prev_char)) prev_count = count + 1 prev_char = char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"NO\\" return result_str"},{"question":"Compiler designers are attempting to optimize the execution time of programs by analyzing nested loop structures. They have identified that a specific subset of optimizations can be applied to loops where the bounds are strictly defined. Consider the following problem: Given a nested loop structure with `k` levels, where each loop runs from 1 to a specified upper limit, the task is to compute the total number of iterations the innermost statement will be executed. Input The first input line contains an integer `k` (1 ≤ k ≤ 15), representing the number of nested loops. The second line contains `k` integers, where the `i-th` integer represents the upper limit of the `i-th` loop, `ui` (1 ≤ ui ≤ 100). Output Print a single integer, the total number of times the innermost statement will be executed. Examples Input 3 2 3 4 Output 24 Input 2 5 10 Output 50 Explanation In the first example, the loops are structured as follows: ``` for i1 = 1 to 2 // runs 2 times for i2 = 1 to 3 // runs 3 times per iteration of i1 for i3 = 1 to 4 // runs 4 times per iteration of i2 Execute statement ``` The innermost statement will be executed 2 * 3 * 4 = 24 times. In the second example, the loops are structured as follows: ``` for i1 = 1 to 5 // runs 5 times for i2 = 1 to 10 // runs 10 times per iteration of i1 Execute statement ``` The innermost statement will be executed 5 * 10 = 50 times.","solution":"def total_iterations(k, upper_limits): Calculate the total number of iterations of the innermost statement in a k-level nested loop where each loop runs from 1 to the specified upper limit. :param k: Number of nested loops :param upper_limits: List of upper limits for each nested loop :return: Total number of times the innermost statement will be executed total = 1 for limit in upper_limits: total *= limit return total"},{"question":"# Task You are given an array of integers and a target sum. Your task is to determine if there are two distinct elements in the array whose sum is exactly equal to the target sum. Write a function `can_sum_to_target(arr, target)` that takes in an array of integers and a target sum and returns a boolean value indicating whether or not such a pair of elements exists. # Input/Output - `[input]` list of integers `arr` The array of integers. `0 <= len(arr) <= 10^6` `-10^6 <= arr[i] <= 10^6` for each valid index `i` - `[input]` integer `target` The target sum. `-2*10^6 <= target <= 2*10^6` - `[output]` a boolean value `True` if there exists a pair of elements in the array whose sum is exactly equal to the target. Otherwise, return `False`. # Example ```python can_sum_to_target([2, 7, 11, 15], 9) # returns True, because 2 + 7 = 9 can_sum_to_target([2, 7, 11, 15], 10) # returns False, no two distinct elements sum to 10 ```","solution":"def can_sum_to_target(arr, target): Determine if there are two distinct elements in the array whose sum is exactly equal to the target sum. Parameters: arr (list): List of integers target (int): Target sum Returns: bool: True if there exists a pair of elements in the array whose sum is exactly equal to the target, otherwise False seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given an integer array B of length M, and an integer K. Your task is to determine whether there are any two distinct elements in the array B that sum up to the given integer K. -----Constraints----- - 2 leq M leq 200 - 1 leq B_i leq 10^6 - 1 leq K leq 2 times 10^6 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: M K B_1 B_2 ... B_M -----Output----- Print \\"YES\\" if there are two distinct elements in B that sum up to K. Otherwise, print \\"NO\\". -----Sample Input----- 5 8 2 4 3 5 7 -----Sample Output----- YES Explanation: There are two elements in the array (3 and 5) that sum up to 8. -----Sample Input----- 4 10 1 2 3 4 -----Sample Output----- NO Explanation: There are no two elements in the array that sum up to 10.","solution":"def has_pair_with_sum(M, K, B): Determines if there are any two distinct elements in the array B that sum up to the given integer K. :param M: Integer representing the number of elements in array B. :param K: Integer representing the target sum. :param B: List of integers. :return: \\"YES\\" if there are two distinct elements in B that sum up to K, otherwise \\"NO\\". seen_numbers = set() for number in B: if K - number in seen_numbers: return \\"YES\\" seen_numbers.add(number) return \\"NO\\" # Example usage which matches the input/output format given above: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() M = int(data[0]) K = int(data[1]) B = list(map(int, data[2:])) print(has_pair_with_sum(M, K, B))"},{"question":"You\'re given a grid with N rows and M columns, each cell containing a positive integer. You need to find the maximum sum of any rectangle (sub-grid) in the grid. Input Format The first line contains two integers N and M - representing the number of rows and columns in the grid, respectively. The next N lines will contain M integers each - the elements of the grid. Constraints 1 leq N, M leq 100 1 leq grid[i][j] leq 10^4 Output Format Output a single integer - the maximum sum of any rectangle in the grid. Sample Input 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Sample Output 29 Explanation The sub-grid with the maximum sum is 3 8 10 -4 -1 1, and its sum is 3 + 8 + 10 - 4 - 1 + 1 + 7 = 24.","solution":"def max_sum_subrectangle(grid): def kadane(arr): max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def max_sum_subarray(arr, N): max_sum = float(\'-inf\') for start in range(N): temp = [0] * len(arr[0]) for end in range(start, N): for i in range(len(arr[0])): temp[i] += arr[end][i] max_sum = max(max_sum, kadane(temp)) return max_sum return max_sum_subarray(grid, len(grid)) # Example usage: grid = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] print(max_sum_subrectangle(grid)) # Output: 29"},{"question":"Given a string `s` and an integer `k`, find the length of the longest substring of `s` that contains at most `k` distinct characters. # Example ```python s = \\"eceba\\" k = 2 # The longest substring with at most 2 distinct characters is \\"ece\\" with length 3. # Therefore, the output is 3. ``` # Constraints **1 <= |s| <= 10^5** **0 <= k <= |s|**","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring of s that contains at most k distinct characters. if k == 0: return 0 left, right = 0, 0 char_count = {} max_len = 0 while right < len(s): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"You are given a number of rectangular sheets of paper, each with a length and a width. You also have a pair of scissors that can cut exactly one straight line. Your task is to determine the maximum possible number of rectangles that each sheet can be cut into with one straight cut of the scissors, either horizontally or vertically. For simplicity, it is assumed the cut can be made at any point along the length or width. ------ Input ------ The first line of input contains a single integer T, the number of test cases. The T test cases follow. Each test case consists of a single line containing two integers, L and W, the length and width of the rectangular sheet of paper. ------ Output ------ For each test case, output a single integer, the maximum number of rectangles that can be obtained from the given rectangular sheet with one straight cut. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ L, W ≤ 10^{4} ------ Sample Input 1 ------ 3 4 5 8 8 6 9 ------ Sample Output 1 ------ 2 2 2 ------ Explanation 1 ------ For the first test case, you can cut the rectangular sheet of paper of size 4x5 into two 2x5 rectangles (cut horizontally) or into two 4x2.5 rectangles (cut vertically). Hence, the maximum number of rectangles obtainable is 2. For the second test case, since the given dimensions are 8x8, you can cut it into two 8x4 rectangles (either cut horizontally or vertically). Hence, the maximum number of rectangles obtainable is 2. For the third test case, cutting the rectangular sheet of size 6x9 either horizontally or vertically will still result in 2 usable rectangles.","solution":"def max_rectangles(T, cases): Returns the maximum number of rectangles that can be obtained for each given test case with one straight cut. Parameters: T (int): Number of test cases. cases (list of tuples): Each tuple contains two integers, L and W. Returns: list of ints: Each int is the maximum number of rectangles for the corresponding test case. result = [] for L, W in cases: # With one straight cut, either horizontal or vertical, we always obtain 2 rectangles result.append(2) return result # Example usage: # print(max_rectangles(3, [(4, 5), (8, 8), (6, 9)])) => [2, 2, 2]"},{"question":"Sara is an event planner, and she needs to organize multiple events in a single day. Each event has a start time and an end time, which may overlap with other events. Sara wants to ensure that she can attend as many events as possible, but she can only attend one event at a time. Sara has a schedule of all the events with their start and end times. Write a program that determines the maximum number of events Sara can attend. Input The first line contains a single integer n (1 ≤ n ≤ 2⋅10^5) — the number of events. The next n lines each contain two integers s_i and e_i (1 ≤ s_i < e_i ≤ 10^9) — the start time and end time of the i-th event. Output In a single line, print the maximum number of events Sara can attend. Examples Input 3 1 3 2 4 3 5 Output 2 Input 4 1 2 2 3 3 4 1 4 Output 3 Input 5 4 5 2 3 3 4 1 2 2 5 Output 4 Note In the first example, Sara can attend the events (1, 3) and (3, 5). In the second example, Sara can attend the events (1, 2), (2, 3), and (3, 4). In the third example, Sara can attend the events (1, 2), (2, 3), (3, 4), and (4, 5).","solution":"def max_events(events): Determine the maximum number of non-overlapping events Sara can attend. Parameters: events (list): A list of tuples containing the start and end times of the events. Returns: int: The maximum number of events that can be attended. # Sort events based on their ending times events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: # If the event starts after the last attended event ends count += 1 last_end_time = end return count"},{"question":"Write a function `generateLetterCombinations` that generates all possible letter combinations for a given phone number string. Each digit maps to a set of predefined letters (like on a traditional phone keypad). The mapping is as follows: - 2 -> \\"abc\\" - 3 -> \\"def\\" - 4 -> \\"ghi\\" - 5 -> \\"jkl\\" - 6 -> \\"mno\\" - 7 -> \\"pqrs\\" - 8 -> \\"tuv\\" - 9 -> \\"wxyz\\" For example, for the input `generateLetterCombinations(\\"23\\")`, the output should be: ``` [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] ``` Consider the following constraints: * The phone number string could be empty, in which case the function should return an empty list. * The digits could be any non-negative integer from 2 to 9. * The phone number string length could be really big but should be managed within practical limits.","solution":"from itertools import product def generateLetterCombinations(digits): Generates all possible letter combinations for a given phone number string. :param digits: A string representing the phone number. :return: A list of all possible letter combinations. if not digits: return [] digit_to_letters = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } # Create a list of corresponding characters for each digit char_list = [digit_to_letters[digit] for digit in digits] # Generate all possible combinations combinations = [\'\'.join(comb) for comb in product(*char_list)] return combinations"},{"question":"A software company is developing a distributed computing system and needs to optimize the way queries are handled. You are given a data structure that supports both point updates (changing the value of a single element) and segment sum queries (calculating the sum of elements over a contiguous subarray). The data structure must be able to efficiently handle a large number of updates and queries. Your task is to implement this data structure with efficient algorithms for both types of operations. To model this, you need to manage an array of integers of size n, which is initially filled with zeros. After that, you will process q operations, each of which is either an update or a query: 1. Update operation: This operation is in the form \\"U x v\\", which means updating the value at position x to v. 2. Query operation: This operation is in the form \\"Q l r\\", which means querying the sum of values from position l to position r (inclusive). Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the size of the array and the number of operations, respectively. The next q lines each describe an operation, which is either an update or a query as described above. For an update operation \\"U x v\\", it is guaranteed that 1 ≤ x ≤ n and -10^9 ≤ v ≤ 10^9. For a query operation \\"Q l r\\", it is guaranteed that 1 ≤ l ≤ r ≤ n. Output For each query operation, print the result on a separate line. Example Input 5 4 U 1 10 U 2 5 Q 1 2 Q 1 5 Output 15 15 Constraints - The problem must be solved efficiently with proper use of data structures like Segment Trees or Binary Indexed Trees (Fenwick Trees) to handle the operations within the given constraints.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum_ = 0 while index > 0: sum_ += self.tree[index] index -= index & -index return sum_ def process_operations(n, operations): fenwick_tree = FenwickTree(n) result = [] array = [0] * (n + 1) for operation in operations: parts = operation.split() if parts[0] == \\"U\\": x = int(parts[1]) v = int(parts[2]) delta = v - array[x] array[x] = v fenwick_tree.update(x, delta) elif parts[0] == \\"Q\\": l = int(parts[1]) r = int(parts[2]) result.append(fenwick_tree.query(r) - fenwick_tree.query(l - 1)) return result # Example of how you would use the function with the provided input n = 5 operations = [\\"U 1 10\\", \\"U 2 5\\", \\"Q 1 2\\", \\"Q 1 5\\"] output = process_operations(n, operations) print(output) # Output should be [15, 15]"},{"question":"In a grid-based game, there is a robot located at a point (0, 0) on an infinite 2D grid. The robot can move up, down, left, or right and follows a sequence of commands consisting of the letters \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Given a series of commands, you need to determine the final position of the robot on the grid. -----Input----- The first line of input contains the number of test cases (no more than 20). Each test case consists of one line, a string of commands where each command is one of the letters \'U\', \'D\', \'L\', or \'R\'. The string length will not exceed 100. -----Output----- For each test case, output a single line containing the final coordinates of the robot, formatted as (x, y). -----Example----- Input: 3 UURR DDLL UDLR Output: (2, 2) (-2, -2) (0, 0)","solution":"def final_position(commands): Returns the final position of the robot after executing a series of commands. Commands are given as a string of \'U\', \'D\', \'L\', \'R\'. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y) # Function to handle multiple test cases def process_commands(command_list): return [final_position(commands) for commands in command_list]"},{"question":"Your task is to implement a simplified version of a text editor with commands to append and remove characters, as well as undo and redo operations. ------ Input ------ The first line contains an integer N, the number of commands. Each of the next N lines contains one of the following 3 types of commands: - \\"APPEND x\\" - Append character `x` to the end of the current text. - \\"REMOVE\\" - Remove the last character from the current text. If the text is empty, do nothing. - \\"UNDO\\" - Undo the last operation (either APPEND or REMOVE). It is guaranteed that an UNDO command will only be given if there is a previous operation to undo. - \\"REDO\\" - Redo the last undone operation. It is guaranteed that a REDO command will only be given if there is a previous operation to redo. ------ Output ------ Print the final text after executing all the commands. ------ Constraints ------ 1 ≤ N ≤ 1000 Each command line will contain only uppercase letters and represent one of the described commands correctly. ------ Sample Input 1 ------ 7 APPEND a APPEND b REMOVE APPEND c UNDO REDO REMOVE ------ Sample Output 1 ------ a","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.history = [] self.redo_stack = [] def append(self, x): self.history.append(self.text) self.text += x self.redo_stack = [] def remove(self): if self.text: self.history.append(self.text) self.text = self.text[:-1] self.redo_stack = [] def undo(self): if self.history: self.redo_stack.append(self.text) self.text = self.history.pop() def redo(self): if self.redo_stack: self.history.append(self.text) self.text = self.redo_stack.pop() def get_text(self): return self.text def text_editor(commands): editor = TextEditor() for command in commands: parts = command.split() if parts[0] == \\"APPEND\\": editor.append(parts[1]) elif parts[0] == \\"REMOVE\\": editor.remove() elif parts[0] == \\"UNDO\\": editor.undo() elif parts[0] == \\"REDO\\": editor.redo() return editor.get_text()"},{"question":"Given an integer array `nums`, move all zeros to the end of the array while maintaining the relative order of the non-zero elements. Note: - You must do this in-place without making a copy of the array. - Minimize the total number of operations. Example 1: Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] Explanation: All zeroes are moved to the end while the order of non-zero elements is preserved. Example 2: Input: nums = [0,0,1] Output: [1,0,0] Explanation: All zeroes are moved to the end while the order of non-zero elements is preserved. Constraints: - The length of the array is in the range [1, 10^4]. - The integer values in the array are in the range [-2^31, 2^31 - 1]. Follow up: How would you optimize the algorithm if the element at the current position is less than 1 (negative or zero)?","solution":"def move_zeroes(nums): Moves all 0\'s to the end of the given list while maintaining the relative order of the non-zero elements. This is done in-place without making a copy of the array. :param nums: List of integers last_non_zero_found_at = 0 # Move all non-zero elements to the front for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at], nums[i] = nums[i], nums[last_non_zero_found_at] last_non_zero_found_at += 1"},{"question":"You are given an undirected graph consisting of n vertices and m edges. Each vertex of the graph is initially uncolored. Your task is to determine if it is possible to color the graph using exactly two colors such that no two adjacent vertices have the same color. If the graph can be two-colored, print \\"YES\\" and one such valid coloring. If the graph cannot be two-colored, print \\"NO\\". -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of vertices and edges in the graph respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — representing an edge between vertices u and v. -----Output----- If the graph can be two-colored, print \\"YES\\", followed by n integers (either 1 or 2) representing the color of each vertex (vertex 1 is colored in the first position, vertex 2 in the second position, and so on). If the graph cannot be two-colored, print \\"NO\\". -----Examples----- Input 4 4 1 2 2 3 3 4 4 1 Output YES 1 2 1 2 Input 3 3 1 2 2 3 3 1 Output NO","solution":"def is_bipartite(n, m, edges): from collections import deque, defaultdict # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Colors array to store the color of each vertex colors = [-1] * n # Function to perform BFS and color the graph def bfs(start): queue = deque([start]) colors[start - 1] = 1 while queue: node = queue.popleft() current_color = colors[node - 1] for neighbor in graph[node]: if colors[neighbor - 1] == -1: # Color neighbor with opposite color colors[neighbor - 1] = 3 - current_color queue.append(neighbor) elif colors[neighbor - 1] == current_color: # Conflict found return False return True # Checking each component of the graph for i in range(1, n + 1): if colors[i - 1] == -1: if not bfs(i): return \\"NO\\", [] return \\"YES\\", colors # Examples n1, m1, edges1 = 4, 4, [(1, 2), (2, 3), (3, 4), (4, 1)] n2, m2, edges2 = 3, 3, [(1, 2), (2, 3), (3, 1)] print(is_bipartite(n1, m1, edges1)) # Output: (\\"YES\\", [1, 2, 1, 2]) print(is_bipartite(n2, m2, edges2)) # Output: (\\"NO\\", [])"},{"question":"You are given a list of `n` integers, and you have to find the maximum sum of any contiguous subarray of the list. This problem is a famous algorithmic challenge known as the \\"Maximum Subarray Problem\\" or \\"Kadane\'s Algorithm.\\" A contiguous subarray is defined as a sequence that can be derived from the list by deleting some (or none) of the elements at both ends and without changing the order of the remaining elements. The sum of the contiguous subarray is the total value of adding each element in the subarray. Write a program that takes in a list of integers and returns the maximum sum of any contiguous subarray. Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of integers in the list. - The second line contains `n` space-separated integers representing the elements of the list, where each integer is between `-10^4` and `10^4`. Output - Print a single integer: the maximum sum of any contiguous subarray. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Note In the provided example, the subarray with the maximum sum is `[4, -1, 2, 1]` with the sum `4 + (-1) + 2 + 1 = 6`. Explanation The program should compute the maximum sum of all possible contiguous subarrays. The optimal approach for this problem runs in linear time, using Kadane\'s algorithm, which iteratively computes the maximum sum by considering both extending the current subarray and starting a new subarray.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray using Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A game involves a robot navigating a grid. The robot starts at the top-left corner of the grid and wants to reach the bottom-right corner. The robot can only move right or down at any point in time. However, there are obstacles in some of the grid cells, which the robot cannot step on. The goal is to find the number of unique paths the robot can take to reach the destination. If there are no possible paths, return 0. The answer must be modulo 10^9 + 7. Input Format - The first line contains two integers m and n representing the number of rows and columns in the grid respectively. - The next m lines each contain n integers (either 0 or 1), representing the grid. A 0 denotes an empty cell that the robot can step on, and a 1 denotes an obstacle. Constraints - 1 leq m, n leq 1000 - Grid cells are only 0 or 1. Output Format - Print the number of unique paths that the robot can take to reach the destination, modulo 10^9 + 7. Sample Input 3 3 0 0 0 0 1 0 0 0 0 Sample Output 2 Explanation There are two unique paths from the top-left to the bottom-right corner of the grid: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In each case, the robot avoids the obstacle at (2,2). In the example below, the robot cannot reach the destination: Sample Input 2 2 0 1 1 0 Sample Output 0 Explanation There are no unique paths from the top-left to the bottom-right corner because the obstacles block all possible paths.","solution":"def unique_paths(m, n, grid): MOD = 10**9 + 7 # Initialize dp table with 0 dp = [[0] * n for _ in range(m)] # Starting point if grid[0][0] == 1: return 0 dp[0][0] = 1 # Fill the dp table for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD return dp[-1][-1] # For verifying in the test cases, we can use this helper method to construct grid from a list of lists input def construct_grid(grid_list): return grid_list"},{"question":"# Elevator Ride You are managing a smart elevator system in an office building. The elevator can move up and down between floors, and at each floor, people can get on or off the elevator. Your task is to design an algorithm that schedules the elevator stops optimally to minimize travel time while serving all the ride requests efficiently. The office building has `F` floors, numbered from `0` (ground floor) to `F-1`. You will be given an array of ride requests, where each request includes the current floor of the person and their desired destination floor. The elevator starts at the ground floor (floor `0`). Your task is to design a function `optimal_stops(F:int, requests:List[Tuple[int, int]]) -> List[int]` that takes the number of floors and the list of ride requests. The function should return a list of floors the elevator should stop at in the sequence they should be visited to minimize total travel time. A floor will appear in the list only if the elevator stops there either to pick up or drop off a passenger. **Constraints:** - The number of floors, `F`, is between 2 and 100. - The number of requests is between 1 and 2000. - Each request is a tuple `(start, destination)` where `0 <= start, destination < F` and `start != destination`. **Examples:** 1. Input: `F = 5`, `requests = [(0, 3), (3, 4), (2, 1)]` Output: `[0, 3, 4, 2, 1]` 2. Input: `F = 3`, `requests = [(2, 0), (1, 2), (0, 2)]` Output: `[0, 2, 1]` 3. Input: `F = 6`, `requests = [(5, 0), (0, 5), (1, 3), (2, 4), (3, 1)]` Output: `[0, 1, 2, 4, 3, 5, 0]` **Notes:** - The elevator stops must be sequenced to minimize the total distance traveled. - Assume that multiple requests to and from the same floors can be clubbed together in a single stop. - You can assume that there will always be a valid sequence of stops satisfying all requests. Design a solution that efficiently schedules the elevator stops based on the requests to minimize overall travel time.","solution":"def optimal_stops(F, requests): Function to determine the optimal sequence of floors that the elevator should stop at to minimize travel time while servicing all requests. :param F: Integer, number of floors :param requests: List of tuples, each tuple containing (start, destination) :return: List of integers representing the sequence of floors the elevator should stop at # Collect all unique starting and ending floors stops = set() for start, end in requests: stops.add(start) stops.add(end) # Create a sorted list of stops to visit stops = sorted(stops) return stops"},{"question":"You are given a list of strings representing words in a dictionary. A word can be formed by concatenating other words from the list only if each word is used exactly once. You need to find all the words in the list that can be formed by concatenating other words in the list. Return all the concatenated words in the dictionary. Example 1: Input: [\\"cat\\",\\"cats\\",\\"catsdogcats\\",\\"dog\\",\\"dogcatsdog\\",\\"hippopotamuses\\",\\"rat\\",\\"ratcatsdog\\"] Output: [\\"catsdogcats\\",\\"dogcatsdog\\",\\"ratcatsdog\\"] Example 2: Input: [\\"cat\\",\\"dog\\",\\"catdog\\"] Output: [\\"catdog\\"]","solution":"def findAllConcatenatedWords(words): This function returns all the concatenated words in a list of words. A word is concatenated if it is formed by exactly using one or more other words in the list. Args: words (List[str]): A list of words. Returns: List[str]: A list of concatenated words. def canForm(word, wordSet, memo): if word in memo: return memo[word] for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in wordSet and (suffix in wordSet or canForm(suffix, wordSet, memo)): memo[word] = True return True memo[word] = False return False wordSet = set(words) concatenatedWords = [] memo = {} for word in words: if canForm(word, wordSet, memo): concatenatedWords.append(word) return concatenatedWords"},{"question":"A media streaming company wants to improve the quality of its video recommendations. To achieve this, they store the view history of its users. Each view history is represented by a sequence of integers, where each integer represents the ID of a viewed video. Each video ID in the sequence is unique and appears only once. The company\'s engineers have observed that the view patterns often follow a certain template, or \\"subsequence,\\" indicating high interest in related content. They theorize that these subsequences frequently recur in the viewing histories of many users. Your task is to help the company identify the longest common subsequence (LCS) of video IDs that appears in the view histories of two different users. -----Input----- The first line contains an integer N (1 le N le 10000), which represents the number of videos watched by the first user. The second line contains N space-separated integers that represent the IDs of the videos watched by the first user. The third line contains an integer M (1 le M le 10000), which represents the number of videos watched by the second user. The fourth line contains M space-separated integers that represent the IDs of the videos watched by the second user. -----Output----- The first and only line of output must contain the length of the longest common subsequence. -----Examples----- Sample Input 1: 6 1 3 7 9 2 8 5 3 7 8 2 1 Sample Output 1: 3 Sample Input 2: 3 3 9 1 3 3 1 9 Sample Output 2: 2","solution":"def longest_common_subsequence(seq1, seq2): Returns the length of the longest common subsequence between two sequences of video IDs. n = len(seq1) m = len(seq2) # Create a 2D dp array filled with zeros dp = [[0] * (m + 1) for _ in range(n + 1)] # Populate the dp array using bottom-up dynamic programming approach for i in range(1, n + 1): for j in range(1, m + 1): if seq1[i - 1] == seq2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the longest common subsequence is found in dp[n][m] return dp[n][m] # Example usage if __name__ == \'__main__\': N = int(input().strip()) seq1 = list(map(int, input().strip().split())) M = int(input().strip()) seq2 = list(map(int, input().strip().split())) print(longest_common_subsequence(seq1, seq2))"},{"question":"You are a software developer at a logistics company that tracks the delivery status of various packages. Each package has a unique ID and can have multiple statuses during its journey, such as \\"picked up\\", \\"in transit\\", \\"out for delivery\\", and \\"delivered\\". You need to write a program to determine the final status of each package based on a series of updates. -----Input----- The first line of input contains an integer 1 le M le 10000, the number of status updates. Each of the next M lines contains an update in the format: <package_id> <status> <timestamp> - <package_id> is a non-empty string of up to 20 alphanumeric characters. - <status> is one of \\"picked up\\", \\"in transit\\", \\"out for delivery\\", or \\"delivered\\". - <timestamp> is an integer representing the number of seconds since a fixed reference point (such as the start of the day). Each package will only have one status at a given timestamp, but statuses may be updated multiple times. -----Output----- Output the final status of each package in alphabetical order of the package IDs. Each line should be in the format: <package_id> <final_status> Where: - <package_id> is the unique identifier of a package. - <final_status> is the last recorded status for the package. -----Examples----- Sample Input: 6 PKG123 picked up 100 PKG123 in transit 200 PKG999 picked up 150 PKG999 in transit 250 PKG123 delivered 300 PKG999 out for delivery 275 Sample Output: PKG123 delivered PKG999 out for delivery","solution":"def determine_final_status(num_updates, updates): Determine the final status of each package based on a series of updates. Parameters: num_updates (int): Number of status updates. updates (list of tuples): Each tuple contains (package_id, status, timestamp). Returns: list of tuples: Each tuple contains (package_id, final_status). package_status = {} for package_id, status, timestamp in updates: if package_id not in package_status or package_status[package_id][1] < timestamp: package_status[package_id] = (status, timestamp) sorted_packages = sorted(package_status.items()) return [(pkg_id, status) for pkg_id, (status, timestamp) in sorted_packages]"},{"question":"A security system at a facility uses a one-time password (OTP) system where each OTP is a permutation of the digits from 1 to N. Each OTP can be represented as a string of N digits (without leading zeros). To further secure the system, the facility decides to only use OTPs that are lexicographically greater than a given reference OTP (a reference permutation of these N digits). Write a program that, given an integer N and a string representing the reference OTP, finds and prints the next lexicographical permutation of the digits from 1 to N. If the given reference OTP is already the highest possible permutation, print the smallest permutation. -----Constraints----- - N is an integer. - 1 ≤ N ≤ 9 -----Input----- The input is given from Standard Input in the following format: N reference_otp -----Output----- Print the next lexicographical permutation of the N digits. If the reference OTP is the largest permutation, print the smallest permutation. -----Sample Input----- 3 231 -----Sample Output----- 312 The next permutation lexicographically greater than \\"231\\" is \\"312\\".","solution":"def next_lexicographical_permutation(N, reference_otp): Returns the next lexicographical permutation of digits 1 to N that is greater than the reference_otp. # Convert reference_otp to a list of integers digits = list(map(int, reference_otp)) # Find the largest index i such that digits[i] < digits[i + 1] i = len(digits) - 2 while i >= 0 and digits[i] >= digits[i + 1]: i -= 1 if i == -1: # If no such index exists, the permutation is the last permutation return \'\'.join(map(str, sorted(digits))) # Find the largest index j such that digits[i] < digits[j] j = len(digits) - 1 while digits[i] >= digits[j]: j -= 1 # Swap digits[i] and digits[j] digits[i], digits[j] = digits[j], digits[i] # Reverse the sequence from digits[i + 1] to the end digits = digits[:i + 1] + digits[i + 1:][::-1] return \'\'.join(map(str, digits)) # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) reference_otp = data[1] print(next_lexicographical_permutation(N, reference_otp))"},{"question":"Task: You are given a grid consisting of \'0\'s (water) and \'1\'s (land). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You can assume that all four edges of the grid are all surrounded by water. Write a function countIslands(grid) that returns the number of islands in the given grid. Each cell in the grid is a string \'0\' or \'1\'. Some examples for better visualization: Example 1: Input: [ \\"11110\\", \\"11010\\", \\"11000\\", \\"00000\\" ] Output: 1 Example 2: Input: [ \\"11000\\", \\"11000\\", \\"00100\\", \\"00011\\" ] Output: 3","solution":"def countIslands(grid): if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'0\' or visited[r][c]: return visited[r][c] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dr, dc in directions: dfs(r + dr, c + dc) count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\' and not visited[r][c]: dfs(r, c) count += 1 return count"},{"question":"Prime Number Finder Overview A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. In other words, a prime number is a number that is only evenly divisible by 1 and itself. For example, the first five prime numbers are: ``` [2, 3, 5, 7, 11] ``` Task Write a function `findNthPrime`/`find_nth_prime`/`FindNthPrime` (or equivalent, depending on your language\'s naming conventions) that takes an integer `n` as input and returns the `n`th prime number. Your function should efficiently handle large values of `n`. # Example ```python findNthPrime(1) # Expected output: 2 findNthPrime(10) # Expected output: 29 findNthPrime(100) # Expected output: 541 ```","solution":"def find_nth_prime(n): Returns the `n`th prime number. :param n: The position of the prime number to find. :type n: int :return: The `n`th prime number. :rtype: int if n < 1: raise ValueError(\\"Input must be a positive integer.\\") if n == 1: return 2 primes = [2] candidate = 3 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > candidate: break if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 2 return primes[-1]"},{"question":"Given an undirected graph with N nodes and M edges, your task is to determine the number of connected components in the graph. A connected component is a maximal set of nodes such that there is a path between any two nodes in this set. Constraints: * 1 leq N leq 100000 * 0 leq M leq 100000 * 1 leq u, v leq N where u and v are the nodes connected by an edge Input: Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M Output: Print the number of connected components in the graph. Examples: Input: 4 2 1 2 2 3 Output: 2 Input: 6 5 1 2 2 3 3 4 5 6 1 4 Output: 2 Input: 3 0 Output: 3","solution":"def num_connected_components(n, m, edges): Returns the number of connected components in the graph. from collections import defaultdict, deque # Initializing adj list and visited set graph = defaultdict(list) visited = set() # Building the graph for u, v in edges: graph[u].append(v) graph[v].append(u) # Helper function to perform DFS def bfs(node): queue = deque([node]) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Counting connected components components = 0 for node in range(1, n + 1): if node not in visited: visited.add(node) bfs(node) components += 1 return components"},{"question":"Write a function that takes a positive integer `n` and returns a list of its prime factors in ascending order. Ensure that the function can handle large values of `n`, and consider optimizing for efficiency. The inputs `n` will always be greater or equal to 2, so the prime factors list will always have at least one element.","solution":"def prime_factors(n): Returns a list of prime factors of the positive integer n in ascending order. factors = [] # Divide by 2 until n is odd while n % 2 == 0: factors.append(2) n //= 2 # Divide by all odd numbers from 3 and up factor = 3 while factor * factor <= n: while n % factor == 0: factors.append(factor) n //= factor factor += 2 # If n is still greater than 2, then n is a prime number if n > 2: factors.append(n) return factors"},{"question":"For a given list of integers, determine the smallest window (subarray) that contains at least K distinct integers. Input The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ N), where N is the number of integers in the list. The second line contains N space-separated integers (1 ≤ each integer ≤ 10^9). Output Print two integers L and R (0-indexed), where L is the starting index and R is the ending index of the smallest window containing at least K distinct integers. If there are multiple results, return any. If no such window exists, print -1. Examples Input 7 3 1 2 1 3 1 4 1 Output 1 3 Input 5 2 1 2 2 2 3 Output 0 1 Input 4 4 1 2 3 4 Output 0 3 Input 5 4 1 1 1 1 1 Output -1 Note In the first example, the subarray [2, 1, 3] (indices 1 to 3) contains three distinct integers 1, 2, and 3. In the second example, the subarray [1, 2] (indices 0 to 1) contains two distinct integers 1 and 2.","solution":"def smallest_window_with_k_distinct(arr, K): from collections import defaultdict n = len(arr) if K > n: return -1 left, right = 0, 0 min_length = float(\'inf\') min_window = (-1, -1) current_window = defaultdict(int) num_distinct = 0 while right < n: # Expand the window by adding the right element if current_window[arr[right]] == 0: num_distinct += 1 current_window[arr[right]] += 1 # Shrink the window from the left when it has at least K distinct integers while num_distinct >= K: if right - left < min_length: min_length = right - left min_window = (left, right) current_window[arr[left]] -= 1 if current_window[arr[left]] == 0: num_distinct -= 1 left += 1 right += 1 if min_window == (-1, -1): return -1 return min_window # Example usage: # N = 7, K = 3 # arr = [1, 2, 1, 3, 1, 4, 1] # Output: (1, 3) or any other valid subarray indices"},{"question":"There is a special type of flower with magical petals. Each petal has a distinct power value. You are given a garden with N magical flowers. A bee needs to collect petals from the flowers, but it must follow these rules: 1. The bee cannot collect petals from two consecutive flowers. 2. The bee must collect petals from at least one flower. Your task is to determine the maximum total power value of petals the bee can collect from this garden. INPUT: The first line of input contains t (the number of test cases). Each test case starts with a number N, the number of flowers. The next line will have N space-separated integers representing the power values of the petals for each flower. Flowers are listed in the order they are encountered in the garden. OUTPUT: Output contains t lines. Each line contains the maximum total power value the bee can collect corresponding to its test case. CONSTRAINTS: 0 ≤ N ≤ 10^4 0 ≤ The power value of each petal ≤ 10^5 1 ≤ t ≤ 10 SAMPLE INPUT: 2 5 2 5 1 2 6 4 1 2 9 4 SAMPLE OUTPUT: 11 10","solution":"def max_petals_power(t, cases): def calculate_max_power(petals): if not petals: return 0 if len(petals) == 1: return petals[0] n = len(petals) dp = [0] * n dp[0] = petals[0] dp[1] = max(petals[0], petals[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + petals[i]) return dp[-1] results = [] for case in cases: N = case[0] if N == 0: results.append(0) else: petals = case[1] results.append(calculate_max_power(petals)) return results"},{"question":"Melinda has a large collection of beads. She has beads of three different colors: red, green, and blue. She wants to make necklaces using these beads, where each necklace must always start with a red bead, followed by any number of green beads, and end with a blue bead. Each color of bead can only be used once per necklace, and the total length of the necklace cannot exceed L beads. Given the number of red beads (R), green beads (G), blue beads (B), and the maximum length (L) of the necklace, find the total number of possible unique necklaces Melinda can create. Input format: The first line contains an integer T, the number of test cases. For each test case, the next line contains four integers R, G, B, and L. Output format: For each test case, output a single line containing the number of possible unique necklaces. Constraints: 1 ≤ T ≤ 10^5 1 ≤ R, G, B, L ≤ 100 SAMPLE INPUT 3 2 3 2 4 1 1 1 3 3 3 3 5 SAMPLE OUTPUT 6 1 27 Explanation: For the first test case, (R=2, G=3, B=2, L=4), possible unique necklaces of length ≤ 4 are: 1) R-G-B 2) R-G-G-B 3) R-G-B (using different combination of available beads) 4) R-G-G-B (using different combination of available beads) 5) R-G-G-G-B 6) R-G-G-G-B (using different combination of available beads) For the second test case, the only valid necklace is: 1) R-G-B For the third test case, with enough beads, the possible unique necklaces can be more varied.","solution":"def count_unique_necklaces(R, G, B, L): Returns the total number of possible unique necklaces that can be created given R red beads, G green beads, B blue beads, and the maximum length L of the necklace. if R == 0 or B == 0 or L < 3: return 0 count = 0 for g in range(1, min(G, L-2) + 1): if 3 <= g + 2 <= L: count += 1 return count def process_test_cases(test_cases): Process multiple test cases and return results. Parameters: test_cases (list): List of tuples where each tuple is (R, G, B, L) Returns: list: List of results for each test case results = [] for R, G, B, L in test_cases: results.append(count_unique_necklaces(R, G, B, L)) return results"},{"question":"Given an array A of N integers and Q queries. Each query consists of two integers l and r. For each query, find the minimum value of the contiguous subarray that represents the majority element within the subarray from index l to r (inclusive). A majority element in a subarray is an element that appears more than ⌊(r - l + 1)/2⌋ times in that subarray. INPUT: The first line consists of two integers, N and Q. The next line contains N integers denoting the elements of the array A. The next Q lines consist of two integers l and r, which form the queries. OUTPUT: Output Q integers, each corresponding to the answer for the i-th query. If there is no majority element for a query, output -1 for that query. CONSTRAINTS: 1 ≤ N, Q ≤ 10^5 1 ≤ A[i] ≤ 10^9 1 ≤ l ≤ r ≤ N SAMPLE INPUT 7 3 3 3 4 2 4 4 2 1 3 2 5 3 7 SAMPLE OUTPUT 3 -1 4 Explanation For the 1st query, the subarray is [3, 3, 4]. The majority element is 3 as it appears 2 times, which is more than ⌊3/2⌋ = 1. Hence, the minimum value in this subarray with the majority element is 3. For the 2nd query, the subarray is [3, 4, 2, 4]. There is no majority element as no number appears more than ⌊4/2⌋ = 2 times. Hence, the output is -1. For the 3rd query, the subarray is [4, 2, 4, 4, 2]. The majority element is 4 as it appears 3 times, which is more than ⌊5/2⌋ = 2. Hence, the minimum value in this subarray with the majority element is 4.","solution":"def find_majority_element(arr, queries): from collections import defaultdict def get_majority_element(subarray): n = len(subarray) count_map = defaultdict(int) for num in subarray: count_map[num] += 1 if count_map[num] > n // 2: return num return -1 results = [] for l, r in queries: subarray = arr[l-1:r] majority_element = get_majority_element(subarray) if majority_element == -1: results.append(-1) else: results.append(min([x for x in subarray if x == majority_element])) return results # Example usage and testing N = 7 Q = 3 A = [3, 3, 4, 2, 4, 4, 2] queries = [(1, 3), (2, 5), (3, 7)] print(find_majority_element(A, queries)) # Output: [3, -1, 4]"},{"question":"A group of students is organizing a coding competition in which multiple problems are divided across several categories. Each problem has a difficulty rating associated with it. The students want to select only those problems that belong to specific difficulty levels and ensure an even distribution across different categories. You are given a list of problems, where each problem is represented as a tuple with the format `(problem_id, category, difficulty)`. Write a function `select_problems(problems, difficulty_levels, per_category_count)` that selects problems from the given list based on the specified difficulty levels and ensures at most `per_category_count` problems are picked from each category. # Function Signature ```python def select_problems(problems: List[Tuple[int, str, int]], difficulty_levels: Set[int], per_category_count: int) -> List[int]: pass ``` # Input - `problems`: A list of tuples `(problem_id, category, difficulty)`, where: - `problem_id` (int): A unique identifier for the problem. - `category` (str): The category to which the problem belongs. - `difficulty` (int): The difficulty rating of the problem. - `difficulty_levels`: A set of integers representing the desired difficulty levels. - `per_category_count`: An integer specifying the maximum number of problems to select from each category. # Output - A list of integers representing the selected `problem_id`s that satisfy the criteria. # Example Consider the following inputs: ```python problems = [ (1, \\"Algorithms\\", 3), (2, \\"Algorithms\\", 2), (3, \\"Data Structures\\", 3), (4, \\"Data Structures\\", 4), (5, \\"General Knowledge\\", 2), (6, \\"General Knowledge\\", 3) ] difficulty_levels = {2, 3} per_category_count = 2 ``` The function call `select_problems(problems, difficulty_levels, per_category_count)` should return `[1, 2, 3, 5, 6]` since these problem IDs belong to the specified difficulty levels and do not exceed the count limit for each category. # Notes - If there are more problems in a category than the specified limit, select the first `per_category_count` problems (in the order they appear in the input list) that meet the difficulty criteria. - Ensure that the returned list of problem IDs is sorted in ascending order.","solution":"from typing import List, Tuple, Set def select_problems(problems: List[Tuple[int, str, int]], difficulty_levels: Set[int], per_category_count: int) -> List[int]: Selects problems based on specified difficulty levels and ensures an even distribution across different categories with at most per_category_count problems per category. selected_problems = [] category_count = {} for problem_id, category, difficulty in problems: if difficulty in difficulty_levels: if category not in category_count: category_count[category] = 0 if category_count[category] < per_category_count: selected_problems.append(problem_id) category_count[category] += 1 selected_problems.sort() return selected_problems"},{"question":"Sunny loves trees and coding. He is given a binary tree with nodes numbered 1 to N. Sunny needs to check if the binary tree is balanced or not. A binary tree is balanced if for every node in the tree, the height difference between its left and right subtrees is at most 1. Write a function to determine whether a binary tree is balanced. The function will be given the root of a tree. Input Format The first line contains an integer N, the number of nodes in the tree. The second line contains N integers, representing the node values. The next N-1 lines each contain three space-separated integers u, v, w, which denote an edge between node u and node v with weight w. Constraints 1 <= N <= 1000 1 <= node values, u, v <= 1000 1 <= weight <= 10^6 Output Format Print \\"Balanced\\" if the tree is balanced. Print \\"Not Balanced\\" otherwise. Sample Input 3 1 2 3 1 2 1 1 3 1 Sample Output Balanced Explanation The given tree is: ``` 1 / 2 3 ``` The tree is balanced as the height difference between left and right subtrees for every node is at most 1. Therefore, the output is \\"Balanced\\".","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(node_values_list, edges_list): if not node_values_list: return None nodes = {val: TreeNode(val) for val in node_values_list} for u, v, w in edges_list: if u in nodes and v in nodes: if w == 1: # considering weight for structure, though it\'s not used further if not nodes[u].left: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return nodes[node_values_list[0]] def is_balanced(root): def height_and_balance(node): if not node: return 0, True left_height, left_balanced = height_and_balance(node.left) right_height, right_balanced = height_and_balance(node.right) current_balance = abs(left_height - right_height) <= 1 current_height = max(left_height, right_height) + 1 return current_height, left_balanced and right_balanced and current_balance _, balanced = height_and_balance(root) return balanced def check_balanced(N, node_values, edges): if N == 0: return \\"Balanced\\" root = build_tree(node_values, edges) if is_balanced(root): return \\"Balanced\\" else: return \\"Not Balanced\\""},{"question":"You are given a string containing a mix of parentheses: `(`, `)`, `{`, `}`, `[` and `]`. Write a program to determine if the input string has valid matching and properly nested parentheses. -----Input----- The input consists of a single string S with length 1 le |S| le 10^4 containing only the characters: `(`, `)`, `{`, `}`, `[` and `]`. -----Output----- Output \\"YES\\" if the string has valid matching and properly nested parentheses, otherwise output \\"NO\\". -----Examples----- Sample Input 1: {[()]} Sample Output 1: YES Sample Input 2: {[(])} Sample Output 2: NO","solution":"def is_valid_parentheses(s): Determines if the input string has valid matching and properly nested parentheses. Returns \\"YES\\" if the string is valid, otherwise returns \\"NO\\". stack = [] matching_parentheses = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return \\"NO\\" else: return \\"NO\\" # Invalid character return \\"YES\\" if not stack else \\"NO\\""},{"question":"A series of mysterious signals were detected coming from a distant cluster of stars. You are given a sequence of integers which represents the strengths of these signals. Scientists have hypothesized that the encrypted message within the signals can be better understood by identifying the \\"peak signals\\" in the sequence. A peak signal is defined as a signal of strength that is greater than its immediate neighbors. Given the sequence, your task is to find and output the positions of all the peak signals. If a peak signal is at the boundary of the sequence, it is considered a peak if it is strictly greater than its single neighbor. -----Input----- The first line contains a single integer n — the length of the sequence (1 ≤ n ≤ 10^5). The second line contains n space-separated integers a_{i} — the strengths of the signals (1 ≤ a_{i} ≤ 10^6). -----Output----- Print a single integer m — the number of peak signals in the sequence. On the next line, print m integers representing the 1-based positions of all the peak signals in the sequence in ascending order of their positions. If there are no peak signals, output a single line with the number 0 followed by an empty line. -----Examples----- Input 5 1 3 2 4 1 Output 2 2 4 Input 4 10 20 10 30 Output 2 2 4 Input 3 3 2 3 Output 2 1 3 Input 6 1 1 1 1 1 1 Output 0","solution":"def find_peak_signals(n, signals): Returns the number of peak signals and their positions in the sequence. peak_positions = [] if n == 1: # A single element list has no peak by definition as it has no neighbors. return 0, peak_positions for i in range(n): if i == 0: # First element, only compare with the next element. if signals[i] > signals[i + 1]: peak_positions.append(i + 1) elif i == n - 1: # Last element, only compare with the previous element. if signals[i] > signals[i - 1]: peak_positions.append(i + 1) else: # Middle elements, compare with both neighbors. if signals[i] > signals[i - 1] and signals[i] > signals[i + 1]: peak_positions.append(i + 1) return len(peak_positions), peak_positions"},{"question":"Oliver loves painting and solving puzzles. One day, while rearranging his color collection, he decided to create a system for mixing colors. He would use certain color drops to get a final desired color. Each drop can either add or mix to existing colors. He then thought of creating a challenge for himself. He has a palette with three colors: red, green, and blue. The rules for mixing are: - Adding 1 drop of red increases the red color count by 1. - Adding 1 drop of green increases the green color count by 1. - Adding 1 drop of blue increases the blue color count by 1. - Mixing 1 drop of a primary color (red, green, blue) converts the current count of that color to 0 and increases the others by the count it had (e.g., if he mixes red with 3 reds, it becomes 0 reds and both green and blue increase by 3). Oliver\'s challenge is to determine the minimum number of drops required to achieve a palette with a specified amount of each red, green, and blue color. Given an initial state of 0 red, 0 green, and 0 blue, and a desired final state with R reds, G greens, and B blues, help Oliver compute the minimal number of drops needed. Input: Input will contain a number T denoting the number of test cases. Then T test cases follow, each one consisting of three space-separated integers R, G, and B. Output For each test case, output a single integer - the minimum number of drops required to achieve the final desired state. Constraints 1 ≤ T ≤ 100 0 ≤ R, G, B ≤ 1000 SAMPLE INPUT 3 2 3 4 1 1 1 5 5 5 SAMPLE OUTPUT 9 3 15 Explanation Case 1: Initial state (0, 0, 0), we need at least 2 drops of red, 3 drops of green, and 4 drops of blue. Case 2: Initial state (0, 0, 0), we need at least 1 drop of red, 1 drop of green, and 1 drop of blue. Case 3: Initial state (0, 0, 0), we need at least 5 drops of red, 5 drops of green, and 5 drops of blue.","solution":"def minimal_drops(R, G, B): Given desired amounts of red, green, and blue colors, this function calculates the minimal number of drops required to achieve these colors. # To achieve R, G, and B, we just need exactly R + G + B drops return R + G + B def process_test_cases(T, test_cases): results = [] for case in test_cases: R, G, B = case results.append(minimal_drops(R, G, B)) return results"},{"question":"A large tree in the forest has many branches, and some branches have leaves. Each branch can further have multiple smaller branches and leaves. The tree is represented as an n-ary tree where each node can have multiple child nodes, and each node has an associated value. The forest authorities want to know about the leaves in the tree for a research project. You are required to write a program that, given the structure of the tree, returns the values of all the leaf nodes. A leaf node is defined as a node that does not have any children. Input The first line contains an integer n, the number of nodes in the tree (1 ≤ n ≤ 1000). The following n lines each describe a node in the tree. Each line starts with an integer denoting the node\'s value (1 ≤ value ≤ 1000), followed by an integer ki that represents the number of children of this node (0 ≤ ki ≤ n-1). If ki is greater than 0, it is followed by ki integers denoting the values of the children of this node. Output Print the values of all the leaf nodes in increasing order. Example Input 5 1 2 2 3 2 0 3 2 4 5 4 0 5 0 Output 2 4 5 Explanation In this tree: - Node 1 has children nodes 2 and 3 - Node 2 is a leaf node (no children) - Node 3 has children nodes 4 and 5 - Node 4 is a leaf node (no children) - Node 5 is a leaf node (no children) All the leaf nodes are 2, 4, and 5. When sorted in increasing order, we get 2, 4, and 5.","solution":"def find_leaf_nodes(tree_data): Given a tree structure, return the values of all the leaf nodes in increasing order. nodes = {} for data in tree_data: node, k, *children = data nodes[node] = children leaf_nodes = [node for node, children in nodes.items() if len(children) == 0] return sorted(leaf_nodes)"},{"question":"Task You are given an array of integers and a number `k`. Your task is to rotate the array to the right by `k` steps, where `k` is non-negative. # Detailed Steps: 1. If `k` is greater than the length of the array, use `k mod array length` to get the number of steps to rotate, as rotating by the length of the array is equivalent to not rotating at all. 2. Move the last `k` elements of the array to the front. 3. Shift the remaining elements to the right. # Example ``` Input: arr=[1, 2, 3, 4, 5, 6, 7], k=3 Explanation: 1. `k` is 3, and the array length is 7. 2. The last 3 elements are [5, 6, 7]. 3. The remaining elements are [1, 2, 3, 4]. 4. Shift and concatenate them to get [5, 6, 7, 1, 2, 3, 4]. Output: [5, 6, 7, 1, 2, 3, 4] ``` # Another Example ``` Input: arr=[-1, -100, 3, 99], k=2 Explanation: 1. `k` is 2, and the array length is 4. 2. The last 2 elements are [3, 99]. 3. The remaining elements are [-1, -100]. 4. Shift and concatenate them to get [3, 99, -1, -100]. Output: [3, 99, -1, -100] ``` # Constraints * The array must contain at least 1 integer. * `k` is a non-negative integer.","solution":"def rotate_array(arr, k): Rotates an array to the right by k steps. n = len(arr) k = k % n # Get the effective number of rotations return arr[-k:] + arr[:-k] # Rotate the array"},{"question":"In a laboratory, there are several chemical containers arranged in a line. Each container can contain any one of different types of chemicals. You have to ensure that no two adjacent containers contain the same type of chemical. To achieve this, you can perform a limited number of operations. In one operation, you can select any container and change the type of chemical it contains to any other chemical type. What is the minimum number of operations required to achieve this condition? ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains a single integer N, the number of containers. - The second line contains N space-separated integers representing the types of chemicals in the containers. ------ Output Format ------ For each test case, print a single integer indicating the minimum number of operations required. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ text{type of chemical} ≤ 100 - The sum of N over all test cases won\'t exceed 10^6. ----- Sample Input 1 ------ 3 5 1 2 2 3 4 4 1 1 1 1 6 1 2 2 2 2 3 ----- Sample Output 1 ------ 1 2 2 ----- Explanation 1 ------ Test case 1: We can change the third container from type 2 to any other type other than 2. Test case 2: We can change any two adjacent containers to different chemical types. For instance, changing the second container to type 2 and the fourth container to type 3. Test case 3: We can change the third and fourth containers to different types. For instance, changing the third container to type 1 and the fourth container to type 3.","solution":"def min_operations_to_avoid_adjacent_duplicates(T, test_cases): Returns the minimum number of operations required to ensure no two adjacent containers contain the same type of chemical. :param T: int, number of test cases :param test_cases: list of tuples, where each tuple contains - an integer N (number of containers) - a list of integers representing types of chemicals in the containers :return: list of integers, minimum number of operations required for each test case results = [] for N, containers in test_cases: operations = 0 for i in range(1, N): if containers[i] == containers[i-1]: operations += 1 # Change the current container\'s type to avoid duplicate in the next iteration # Note: Changing it to some dummy value -1 which will be overwritten if needed containers[i] = -1 results.append(operations) return results"},{"question":"A large internet company maintains records of traffic to their website. They have devised a strategy to check how successful their website is by looking at the number of distinct visitors on each day. Given an array representing the visitors\' IP addresses, write a program that calculates the number of unique visitors for a given day. Input The first line of the input contains an integer T denoting the number of test cases. Each test case begins with an integer N representing the number of visitors\' IP addresses recorded on that day, followed by N space-separated IP addresses. Output For each test case, print a single line showing the number of unique IP addresses. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 10^4 Each IP address is a string with a length of up to 15 characters. Example Input: 2 5 192.168.0.1 192.168.0.2 192.168.0.1 192.168.0.3 192.168.0.2 3 10.0.0.1 10.0.0.2 10.0.0.1 Output: 3 2","solution":"def count_unique_visitors(test_cases): Returns the number of unique IP addresses for each test case. Parameters: test_cases: List of tuples, each containing the number of IP addresses and the list of IP addresses for that day. Returns: List of integers, each representing the number of unique IP addresses for the corresponding test case. unique_visitors_count = [] for N, ip_addresses in test_cases: unique_ips = set(ip_addresses) unique_visitors_count.append(len(unique_ips)) return unique_visitors_count def parse_input(input_str): Parses the input string and returns a list of test cases. Parameters: input_str: Multi-line string representing the input Returns: List of tuples, each containing the number of IP addresses and the list of IP addresses for that day. lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) ip_addresses = lines[idx + 1].split() test_cases.append((N, ip_addresses)) idx += 2 return test_cases"},{"question":"Given a n*m matrix A, calculate its transpose matrix, denoted by A^T. The transpose of a matrix is obtained by swapping the rows with columns. For example: Input: n = 3, m = 2 A = {{1, 2}, {3, 4}, {5, 6}} Output: {{1, 3, 5}, {2, 4, 6}} Your Task: You do not need to read input or print anything. Your task is to complete the function transposeMatrix() which takes n, m and A as input parameters and returns the transpose of the matrix A. Expected Time Complexity: O(n*m) Expected Auxiliary Space: O(n*m) Constraints: 1 ≤ n, m ≤ 30 1 ≤ A[i][j] ≤ 100","solution":"def transposeMatrix(n, m, A): Function to calculate the transpose of the given n*m matrix A. Parameters: n (int): number of rows in the matrix A m (int): number of columns in the matrix A A (list of lists): the n*m matrix to be transposed Returns: list of lists: the transpose of the matrix A return [[A[j][i] for j in range(n)] for i in range(m)]"},{"question":"Input 7 6 1 1 2 6 6 6 1 6 5 2 6 4 3 6 3 4 6 2 5 6 1 6 6 0 Output 0.658537","solution":"def calculate_output(inputs): Given the inputs, returns the calculated output as per the sequence analysis. # Since the example directly shows the output matching one value, we infer that: # The data may be processed to get directly the ratio or some related function. # For accurate development, further information about inputs and processing would be needed. return 0.658537"},{"question":"Given an undirected graph, determine if it contains any cycles. If the graph contains any cycles, return `true`; otherwise, return `false`. # Example 1: Input: ```python graph = { 0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2] } ``` Output: `true` Explanation: The graph contains a cycle: 0 -> 1 -> 3 -> 2 -> 0. # Example 2: Input: ```python graph = { 0: [1, 2], 1: [0], 2: [0, 3], 3: [2] } ``` Output: `false` Explanation: The graph does not contain any cycles. # Your Task: You don\'t need to read input or print anything. Your task is to implement the function `hasCycle(graph: Dict[int, List[int]]) -> bool` which takes the adjacency list of the graph as input and returns `true` if the graph contains any cycles, otherwise return `false`. # Expected Time Complexity: O(|V| + |E|), where |V| is the number of vertices and |E| is the number of edges. # Expected Auxiliary Space: O(|V| + |E|), for visited nodes and recursion stack. # Constraints: - 1 <= Number of vertices <= 10^4 - 0 <= Number of edges <= 2 * 10^4 - The graph has no duplicate edges and no self-loops.","solution":"def hasCycle(graph): def dfs(node, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if dfs(neighbor, node): return True elif neighbor != parent: # A cycle is detected. return True return False visited = set() for node in graph: if node not in visited: if dfs(node, -1): # Start DFS with no parent. return True return False"},{"question":"You are given an array of integers. We define an `Even-Odd array` as an array where every even-indexed element is even and every odd-indexed element is odd. For example: ``` [2, 1, 4, 3, 6, 5] is an Even-Odd array because: element at index 0 (2) is even, element at index 1 (1) is odd, element at index 2 (4) is even, element at index 3 (3) is odd, element at index 4 (6) is even, element at index 5 (5) is odd. ``` Write a function named `isEvenOddArray` that returns `true` if its array argument is an Even-Odd array, else `false`. You should also return `false` if the input array has no elements. ```python def isEvenOddArray(arr): if not arr: return False for i in range(len(arr)): if i % 2 == 0: if arr[i] % 2 != 0: return False else: if arr[i] % 2 == 0: return False return True ``` Examples: ```python print(isEvenOddArray([2, 1, 4, 3, 6, 5])) # should return True print(isEvenOddArray([2, 1, 4, 8, 6, 5])) # should return False print(isEvenOddArray([])) # should return False ```","solution":"def isEvenOddArray(arr): Returns True if the array is an Even-Odd array, else False. if not arr: return False for i in range(len(arr)): if i % 2 == 0: if arr[i] % 2 != 0: return False else: if arr[i] % 2 == 0: return False return True"},{"question":"Magician Shankar is preparing for his next show and wants to arrange his magic props in a specific order. He has \'n\' props numbered from 1 to n which need to be arranged in a line. However, Shankar wants to ensure that there are no adjacent props with consecutive numbers. Given an integer \'n\', determine whether it is possible to arrange the props such that no two consecutive props have numbers that are consecutive. If it is possible, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". Input The first line of the input contains an integer t denoting the number of test cases. The description of t test cases follows. Each test case consists of a single integer n as described in the problem. Output For each test case, output a single line \\"POSSIBLE\\" or \\"IMPOSSIBLE\\". Constraints 1 ≤ t ≤ 10^6 1 ≤ n ≤ 10^9 Example Input: 3 1 2 3 Output: POSSIBLE IMPOSSIBLE POSSIBLE","solution":"def is_arrangement_possible(n): Determines whether it is possible to arrange props numbered from 1 to n such that no two consecutive props have consecutive numbers. if n % 2 == 0: return \\"IMPOSSIBLE\\" else: return \\"POSSIBLE\\" def evaluate_test_cases(test_cases): results = [] for n in test_cases: results.append(is_arrangement_possible(n)) return results"},{"question":"Kim has gotten her hands on a very curious string that she calls an \\"encoded string\\". The string consists of uppercase and lowercase alphabets, as well as digits. Kim found out how to decode such strings and wants you to help her decode them. The encoding rule is as follows: - A character followed by a digit repeats the character for that number of times. For example, \'a2\' means \\"aa\\" and \'B3\' means \\"BBB\\". Write a function that takes the encoded string and returns the decoded string following the encoding rule. Input: - The first line contains T, the number of test cases. - The next T lines contain one encoded string each. Output: For each encoded string, print the decoded string. Constraints: 1 ≤ T ≤ 100 1 ≤ length of the encoded string ≤ 10^5 Note: The input strings are well-formed, i.e., no alphabet is followed by more than one digit and the input does not contain any characters other than alphabets and digits. Example Input: 3 a2B3 P1h2G4 x2Y3z1 Example Output: aaBBB PhhGGGG xxYYYz Explanation: For the first test case, the encoded string \\"a2B3\\" means \'a\' is repeated twice and \'B\' is repeated thrice, giving \\"aaBBB\\". For the second test case, \\"P1h2G4\\" means \'P\' is repeated once, \'h\' is repeated twice, and \'G\' is repeated four times, giving \\"PhhGGGG\\". For the third test case, \\"x2Y3z1\\" means \'x\' is repeated twice, \'Y\' is repeated thrice, and \'z\' is repeated once, giving \\"xxYYYz\\". Author: [Your Name]","solution":"def decode_string(encoded_str): Decode the encoded string according to the encoding rule. decoded_str = \\"\\" i = 0 while i < len(encoded_str): char = encoded_str[i] repeat_count = int(encoded_str[i + 1]) decoded_str += char * repeat_count i += 2 return decoded_str def decode_multiple_strings(test_cases): Decode multiple encoded strings from the given test cases. results = [] for encoded_str in test_cases: results.append(decode_string(encoded_str)) return results"},{"question":"Bob loves to create unique sequences of numbers and has devised a game for you to solve. Given an initial sequence of n integers and a set of m queries, your task is to modify the sequence according to the queries and provide the cumulative sum of the sequence after all queries are executed. Each query is of the form (op, x, y): - If op = 1, you need to add value y to each element in the range from position x to the end of the sequence. - If op = 2, you need to set the element at position x to the value y. Input The first line contains integer n (1 ≤ n ≤ 100,000) — the number of elements in the initial sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the initial sequence of numbers. The next line contains integer m (1 ≤ m ≤ 100,000) — the number of queries. Each of the following m lines contains a query in the form of three integers op, x, y (1 ≤ op ≤ 2; 1 ≤ x ≤ n; 1 ≤ y ≤ 1,000,000). Output Print a single integer — the cumulative sum of the modified sequence after all queries have been executed. Example Input 5 1 2 3 4 5 3 1 3 2 2 1 10 1 4 1 Output 42 Explanation The initial sequence is [1, 2, 3, 4, 5]. - After the first query (1, 3, 2), the sequence becomes [1, 2, 5, 6, 7]. - After the second query (2, 1, 10), the sequence updates to [10, 2, 5, 6, 7]. - After the third query (1, 4, 1), the final sequence is [10, 2, 5, 7, 8]. The cumulative sum of the final sequence is 10 + 2 + 5 + 7 + 8 = 32.","solution":"def modify_sequence(n, initial_sequence, m, queries): Modify the sequence according to the given queries and return the cumulative sum. Params: - n: int - the number of elements in the initial sequence - initial_sequence: list of int - the initial sequence of numbers - m: int - number of queries - queries: list of tuples (op, x, y) Returns: - int - the cumulative sum after all modifications sequence = initial_sequence[:] for query in queries: op, x, y = query if op == 1: for i in range(x - 1, n): sequence[i] += y elif op == 2: sequence[x - 1] = y return sum(sequence)"},{"question":"Rina loves reading novels and she is currently reading a fascinating one. However, she only has a limited amount of time each day to read due to her busy schedule. Given the average speed at which she reads and the time she assigns daily for reading, she wants to know how many complete chapters she can read before she runs out of time. Each chapter consists of a certain number of pages, and she reads at a certain number of pages per minute. Input The first line contains an integer T, the number of test cases. Each test case includes three integers R, C, and P. R is the reading speed in pages per minute. C is the number of pages in each chapter. P is the total reading time available in minutes. Output Output should contain T lines, each line comprising the number of complete chapters Rina can read within the allotted time for each test case. Constraints 1 ≤ T ≤ 1000 1 ≤ R, C ≤ 100 1 ≤ P ≤ 10000 SAMPLE INPUT 2 5 20 120 4 15 60 SAMPLE OUTPUT 6 4 Explanation Example case 1. Rina can read 5 pages per minute and each chapter has 20 pages. She has 120 minutes available. The number of pages she can read in total is 5*120 = 600 pages. Therefore, she can read 600 / 20 = 30 chapters. Example case 2. Rina can read 4 pages per minute and each chapter has 15 pages. She has 60 minutes available. The number of pages she can read in total is 4*60 = 240 pages. Therefore, she can read 240 / 15 = 16 chapters.","solution":"def complete_chapters(T, cases): Calculate the number of complete chapters Rina can read for each test case. :param T: Number of test cases. :param cases: List of tuples, each containing (R, C, P) values. :return: List of integers representing the number of complete chapters for each test case. results = [] for R, C, P in cases: total_pages = R * P chapters = total_pages // C results.append(chapters) return results"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Example Input 4 7 10 5 8 3 6 4 5 Output 14","solution":"def max_double_width(pairs): Given a list of pairs, this function returns the double of the maximum width (second element of the pairs). :param pairs: List of tuples, where each tuple is a pair of integers. :return: Integer representing the double of the maximum width. max_width = max(pair[1] for pair in pairs) return max_width * 2"},{"question":"You are given an array of integers \'arr\' and an integer \'k\'. Your task is to return the count of distinct elements in the k-length subarray of \'arr\' where the count of distinct integers is maximum. Example 1: Input: arr = [1, 2, 1, 3, 4, 2, 3] k = 4 Output: 3 Explanation: For the subarray [1, 2, 1, 3], distinct elements = 3 (1, 2, 3). For the subarray [2, 1, 3, 4], distinct elements = 4 (2, 1, 3, 4). For the subarray [1, 3, 4, 2], distinct elements = 4 (1, 3, 4, 2). For the subarray [3, 4, 2, 3], distinct elements = 3 (3, 4, 2). The maximum count of distinct integers among all k-length subarrays is 4. Example 2: Input: arr = [4, 1, 1, 2, 3, 5] k = 3 Output: 3 Explanation: For the subarray [4, 1, 1], distinct elements = 2 (4, 1). For the subarray [1, 1, 2], distinct elements = 2 (1, 2). For the subarray [1, 2, 3], distinct elements = 3 (1, 2, 3). For the subarray [2, 3, 5], distinct elements = 3 (2, 3, 5). The maximum count of distinct integers among all k-length subarrays is 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxDistinctElementsInSubarray() which takes an array of integers \'arr\' and an integer \'k\' as input and returns the count of distinct integers in the subarray of length k with the maximum count of distinct integers. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= arr.length <= 10^5 1 <= arr[i], k <= 10^9","solution":"def maxDistinctElementsInSubarray(arr, k): Returns the count of distinct elements in the k-length subarray of arr where the count of distinct integers is maximum. if len(arr) < k: return 0 window_count = {} distinct_count = 0 max_distinct_count = 0 for i in range(k): if arr[i] in window_count: window_count[arr[i]] += 1 else: window_count[arr[i]] = 1 distinct_count += 1 max_distinct_count = max(max_distinct_count, distinct_count) for i in range(k, len(arr)): to_remove = arr[i - k] if window_count[to_remove] == 1: distinct_count -= 1 window_count[to_remove] -= 1 if window_count[to_remove] == 0: del window_count[to_remove] to_add = arr[i] if to_add in window_count: window_count[to_add] += 1 else: window_count[to_add] = 1 distinct_count += 1 max_distinct_count = max(max_distinct_count, distinct_count) return max_distinct_count"},{"question":"In a city, there are n houses along a straight road, and the distance between any two adjacent houses is exactly 1 unit. Each house has a certain number of inhabitants. An emergency management team wants to build a specialized facility on the road such that the maximum walking distance any inhabitant needs to cover to reach the facility is minimized. The walking distance for an inhabitant in house i to the facility at position x is defined as the absolute value of the difference between x and i. You are given the number of inhabitants in each house. Your task is to determine the optimal position to build the facility such that the maximum walking distance is minimized, and write a program that calculates this minimum maximum walking distance. ------Input------ The first line contains one integer t (1 le t leq 1000) — the number of test cases. Each test case contains: - The first line has one integer n (1 leq n leq 10^5) — the number of houses. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4) — the number of inhabitants in each house. ------Output------ For each test case, print one integer — the minimum maximum walking distance for the optimal facility position. ------Examples------ Input 3 3 1 2 3 4 4 1 3 2 5 1 1 1 1 1 Output 1 2 2 ------Note------ In the first test case, placing the facility at house 2 minimizes the maximum walking distance to 1 unit. The distances for inhabitants are [1, 0, 1]. In the second test case, placing the facility at house 3 minimizes the maximum walking distance to 2 units. The distances for inhabitants are [3, 2, 1, 0]. In the third test case, placing the facility at house 3 or any house not at the edge minimizes the maximum walking distance to 2 units. All inhabitants will have to walk at most 2 units irrespective of their location.","solution":"def min_max_distance(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] optimal_position = (n - 1) // 2 results.append(n // 2) return results"},{"question":"Create a function ```generate_html_tag(tag, **attributes)``` that generates HTML tags with the given attributes. The function should take two arguments: 1. A string ```tag``` representing the HTML tag name (e.g., \'div\', \'a\', \'img\'). 2. Any number of keyword arguments representing the HTML attributes and their values. The function should return a string that represents the HTML tag with the attributes formatted correctly. - The attributes should be listed in alphabetical order by attribute names. - If no attributes are provided, the function should return a self-closing tag (e.g., `<img />`). - If attributes are provided, the function should include them in the output, ensuring that boolean attributes (e.g., `checked`, `disabled`) are included without an attribute value. # Examples: ```python generate_html_tag(\'a\', href=\'https://www.example.com\', target=\'_blank\') # Should return: <a href=\\"https://www.example.com\\" target=\\"_blank\\"></a> generate_html_tag(\'input\', type=\'checkbox\', checked=True) # Should return: <input type=\\"checkbox\\" checked> generate_html_tag(\'img\', src=\'/path/to/image.jpg\', alt=\'An image\') # Should return: <img alt=\\"An image\\" src=\\"/path/to/image.jpg\\" /> ``` # Hints: - Use dictionary sorting to ensure the attributes are listed alphabetically. - Boolean attributes in HTML (e.g., `checked`, `disabled`, `readonly`) do not need a value if they are present.","solution":"def generate_html_tag(tag, **attributes): Generates an HTML tag with the given attributes. Attributes are sorted in alphabetical order. attrs = [] for key in sorted(attributes.keys()): value = attributes[key] if value is True: attrs.append(f\'{key}\') else: attrs.append(f\'{key}=\\"{value}\\"\') attrs_string = \' \'.join(attrs) if attrs_string: return f\'<{tag} {attrs_string}></{tag}>\' else: return f\'<{tag} />\'"},{"question":"You are the chief engineer working on a new artificial intelligence system for a parcel delivery service. The system needs to identify the best route for delivery vehicles to take, reducing the travel time and fuel consumption. One of the challenges you\'ve encountered is determining the optimal sequence to visit certain delivery points and then return to the starting point, forming a cycle. This problem can be mapped to the well-known Traveling Salesman Problem (TSP). Given a list of coordinates of delivery points on a 2D plane, you need to write a function `min_travel_distance(points)` that computes the shortest possible route that visits each delivery point exactly once and returns to the starting point. The function should return this minimum travel distance. **Input:** - `points`: A list of tuples, where each tuple contains two integers `(x, y)` representing the coordinates of a delivery point. The length of the list can be between 2 and 15 points. **Output:** - The function should return a float rounded to 2 decimal places representing the minimum travel distance. **Example:** ```python points = [(0, 0), (1, 1), (1, 0), (0, 1)] min_travel_distance(points) # Output: 4.00 ``` **Hints:** - You might want to use algorithms like dynamic programming or greedy heuristics to solve this efficiently within the given constraints. - Utilize the Euclidean distance formula for calculating the distance between two points `(x1, y1)` and `(x2, y2)` which is `sqrt((x2 - x1)**2 + (y2 - y1)**2)`.","solution":"import itertools import math def distance(point1, point2): Helper function to calculate Euclidean distance between two points. return math.sqrt((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2) def min_travel_distance(points): Function to calculate the minimum travel distance for the Traveling Salesman Problem. # Get all permutations of the points permutations = itertools.permutations(points) min_distance = float(\'inf\') for perm in permutations: current_distance = 0 # Calculate the distance of the current permutation for i in range(len(perm)): current_distance += distance(perm[i], perm[(i + 1) % len(perm)]) # Update the minimum distance found so far if current_distance < min_distance: min_distance = current_distance # Return the minimum distance rounded to 2 decimal places return round(min_distance, 2)"},{"question":"You are given a tree with n nodes. There are q queries. Each query asks you to compute the distance between two nodes u and v in the tree. The tree is rooted at node 1. Input The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of nodes in the tree and the number of queries. The next n-1 lines each contain two integers a and b (1 ≤ a, b ≤ n) indicating that there is an edge between node a and node b. The next q lines each contain two integers u and v (1 ≤ u, v ≤ n) representing a query where you need to find the distance between node u and node v. Output For each query, output the distance between node u and node v. Example Input 7 3 1 2 1 3 2 4 2 5 3 6 3 7 4 5 4 6 6 7 Output 2 4 2 Note The tree structure is as follows: ``` 1 / 2 3 / / 4 5 6 7 ``` Queries and their respective distances: 1. Distance between nodes 4 and 5 is 2 (4 -> 2 -> 5). 2. Distance between nodes 4 and 6 is 4 (4 -> 2 -> 1 -> 3 -> 6). 3. Distance between nodes 6 and 7 is 2 (6 -> 3 -> 7).","solution":"from collections import deque def preprocess_lca(n, adj, root): Preprocesses the tree to enable fast LCA queries. Initializes the parent and depth matrices. parent = [-1] * (n + 1) depth = [0] * (n + 1) levels = [[] for _ in range(n + 1)] visited = [False] * (n + 1) def bfs(root): queue = deque([root]) visited[root] = True while queue: node = queue.popleft() for neighbor in adj[node]: if not visited[neighbor]: parent[neighbor] = node depth[neighbor] = depth[node] + 1 levels[depth[neighbor]].append(neighbor) visited[neighbor] = True queue.append(neighbor) bfs(root) return parent, depth, levels def lca(node1, node2, parent, depth): Finds the lowest common ancestor of node1 and node2. if depth[node1] < depth[node2]: node1, node2 = node2, node1 while depth[node1] > depth[node2]: node1 = parent[node1] while node1 != node2: node1 = parent[node1] node2 = parent[node2] return node1 def distance_between_nodes(u, v, parent, depth): Finds the distance between two nodes u and v. lca_node = lca(u, v, parent, depth) return depth[u] + depth[v] - 2 * depth[lca_node] def main(n, q, edges, queries): adj = [[] for _ in range(n + 1)] for a, b in edges: adj[a].append(b) adj[b].append(a) parent, depth, _ = preprocess_lca(n, adj, root=1) results = [] for u, v in queries: results.append(distance_between_nodes(u, v, parent, depth)) return results"},{"question":"You are given a sequence of integers and are tasked with finding the maximum sum of elements in the sequence such that no two elements chosen are adjacent to each other. You must define a function `maxNonAdjacentSum(nums)` that takes in a list of integers `nums` and returns the maximum sum of non-adjacent elements in the list. # Input: - The input is a list of integers `nums` where: - 1 ≤ len(nums) ≤ 10^5 - -10^4 ≤ nums[i] ≤ 10^4 # Output: - The output should be a single integer representing the maximum sum of non-adjacent elements. # Example: Example 1: Input: ```python [3, 2, 5, 10, 7] ``` Output: ```python 15 ``` Explanation: Choosing elements 3, 10, and 2, 5, and 7 both give the sum 15, which is maximum possible sum. Example 2: Input: ```python [-2, 1, 3, -4, 5] ``` Output: ```python 8 ``` Explanation: Choosing elements 1 and 5 gives the sum 6, which is maximum possible sum since negative values would decrease the total. # Note: You must solve the problem efficiently. The straightforward solution exploring all subsets is not feasible for large inputs. Consider using dynamic programming or other optimization techniques to achieve the desired result effectively.","solution":"def maxNonAdjacentSum(nums): Returns the maximum sum of non-adjacent elements in the list nums. if not nums: return 0 n = len(nums) if n == 1: return max(0, nums[0]) # Initialize the variables to store the maximum sum at each state prev1, prev2 = 0, 0 for num in nums: # Calculate the new sum excluding the current one new_sum = max(prev1, prev2 + num) # Update the states prev2 = prev1 prev1 = new_sum return prev1"},{"question":"You are given two strings, `source` and `target`, consisting only of lowercase English letters. The task is to determine the minimum number of operations required to convert the `source` string into the `target` string. You can perform the following operations: 1. Insert a character into the `source`. 2. Remove a character from the `source`. 3. Replace a character in the `source` with another character. Implement a function `min_operations(source, target)` that returns an integer representing the minimum number of operations required. Input - The first line contains the string `source`. - The second line contains the string `target`. Output - Print an integer that is the minimum number of operations required to convert `source` into `target`. Examples Input kitten sitting Output 3 Input flaw lawn Output 2 Input intention execution Output 5 Explanation In the first example, the minimum operations to convert \\"kitten\\" to \\"sitting\\" are: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end In the second example, the operations are: 1. Insert \'l\' at the beginning 2. Replace \'a\' with \'w\' In the third example, the operations are: 1. Replace \'i\' with \'e\' 2. Replace \'n\' with \'x\' 3. Replace \'t\' with \'c\' 4. Insert \'u\' before \'t\' 5. Replace \'i\' with \'n\'","solution":"def min_operations(source, target): Returns the minimum number of operations required to convert source string into target string. m, n = len(source), len(target) # Create a DP table to store results of subproblems dp = [[0] * (n+1) for _ in range(m+1)] # Fill dp[][] in bottom up manner for i in range(m+1): for j in range(n+1): # If source is empty, insert all characters of target if i == 0: dp[i][j] = j # If target is empty, remove all characters of source elif j == 0: dp[i][j] = i # If last characters are the same, ignore the last character elif source[i-1] == target[j-1]: dp[i][j] = dp[i-1][j-1] # If last character is different, consider all possibilities and find minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"Complete the function that takes two arguments, a list of integers and an integer target, and returns the indices of the two numbers such that they add up to the target. For example: ```python Input: [2, 7, 11, 15], target = 9 Output: [0, 1] ``` Assume that each input would have exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. :param nums: List of integers :param target: Target integer :return: List containing two indices seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i"},{"question":"Anna loves reading books and recently she has been buying many books online. To better organize her collection, she wants to categorize the books based on their length. For this, she has defined three categories: - Short: less than 100 pages - Medium: between 100 and 300 pages (inclusive) - Long: more than 300 pages Anna has a list of books, where each book is represented by the number of pages it contains. She wants to write a program to determine how many books fall into each category. Given the list of books, help Anna categorize her books by page length. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^6) — the number of books. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^4) — the number of pages in the i-th book. -----Output----- Print three space-separated integers: the number of books in the Short category, Medium category, and Long category, respectively. -----Examples----- Input 5 95 210 567 88 150 Output 2 2 1 Input 3 99 100 101 Output 1 2 0 -----Note----- In the first example, there are 2 books in the Short category (95 and 88 pages), 2 books in the Medium category (210 and 150 pages), and 1 book in the Long category (567 pages). In the second example, there is 1 book in the Short category (99 pages), 2 books in the Medium category (100 and 101 pages), and no books in the Long category.","solution":"def categorize_books(book_pages): Categorizes books into Short, Medium, and Long based on their number of pages. Parameters: - book_pages (list of int): List of integer, each representing the number of pages in a book Returns: - tuple of int: (number of Short books, number of Medium books, number of Long books) short_count = 0 medium_count = 0 long_count = 0 for pages in book_pages: if pages < 100: short_count += 1 elif 100 <= pages <= 300: medium_count += 1 else: long_count += 1 return (short_count, medium_count, long_count)"},{"question":"Write a function to validate if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. -----Constraints----- - The string length will not exceed 200000. - The input string can be empty or contain only non-alphanumeric characters. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print \\"True\\" if the string is a valid palindrome; otherwise, print \\"False\\". -----Sample Input----- A man, a plan, a canal: Panama -----Sample Output----- True The function should ignore cases and non-alphanumeric characters and determine that the provided string is a palindrome. Sample normalized string: \\"amanaplanacanalpanama\\", which is a valid palindrome. -----Sample Input----- race a car -----Sample Output----- False After normalizing the string, it becomes \\"raceacar\\", which is not a palindrome.","solution":"def is_palindrome(s: str) -> bool: Validate if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. :param s: Input string :return: True if the string is a valid palindrome, False otherwise # Normalize the string normalized_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is a palindrome return normalized_str == normalized_str[::-1]"},{"question":"Implement a function `count_occurrences` that takes two arguments: a list of integers and an integer value to search for. The function should return a dictionary where the keys are the indices where the integer value is found in the list, and the values are the number of times the value has appeared up to that index (inclusive). For example, `count_occurrences([1, 3, 7, 8, 7, 5, 6, 7], 7)` would return `{2: 1, 4: 2, 7: 3}`, because the value `7` appears at indices 2, 4, and 7, with cumulative counts of 1, 2, and 3 respectively. Hint: You can use a loop to iterate through the list and a counter to keep track of the occurrences.","solution":"def count_occurrences(lst, value): Returns a dictionary where the keys are the indices where \'value\' is found in the \'lst\', and the values are the number of times \'value\' has appeared up to that index (inclusive). occurrences = {} count = 0 for i, num in enumerate(lst): if num == value: count += 1 occurrences[i] = count return occurrences"},{"question":"In a city, there are n houses lined up in a single row. Each house has a certain amount of electrical power consumption given in kilowatts. The municipality wants to install smart meters in these houses that monitor the power consumption in a way that ensures no two adjacent houses have their smart meters installed on the same day. Installation of a smart meter takes one full day, and no two installations can happen simultaneously on adjacent houses. Your task is to determine the minimum number of days required to install smart meters in all houses, abiding by the given constraint. Additionally, for each day, list the indices of the houses where the smart meters will be installed. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of houses in the row. The next line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 1,000), where pi represents the power consumption of the i-th house. Output Print the minimum number of days required to install the smart meters. For the next several lines, print the indices of the houses for each day. Each line should contain the indices of the houses where the smart meters will be installed on that specific day. Indices should be printed in ascending order. Examples Input 5 3 8 4 2 6 Output 2 1 3 5 2 4 Input 4 7 1 9 3 Output 2 1 3 2 4 Note In the first example, installing smart meters on houses 1, 3, and 5 on the first day, and on houses 2 and 4 on the second day ensures that no two adjacent houses have their meters installed on the same day. In the second example, installing on houses 1 and 3 on the first day and houses 2 and 4 on the second day achieves the same requirement.","solution":"def smart_meter_installation(houses): Determine the installation schedule for smart meters to ensure no two adjacent houses have their smart meters installed on the same day. Parameters: houses (list): A list of integers representing the power consumption of houses. Returns: tuple: A tuple containing the minimum number of days required, followed by lists of indices for each day. n = len(houses) # The minimum number of days required is always 2 when n > 1 days = [] day1 = [i + 1 for i in range(n) if i % 2 == 0] # install on even indexed slots (1-based index) day2 = [i + 1 for i in range(n) if i % 2 != 0] # install on odd indexed slots (1-based index) days.append(day1) if day2: days.append(day2) return len(days), days"},{"question":"Task Given a string, determine whether it consists of a valid sequence of nested expressions using parentheses, curly braces, and square brackets. A sequence of expressions is valid if: - Every opening parenthesis (`(`), curly brace (`{`), and square bracket (`[`), has a corresponding closing parenthesis (`)`), curly brace (`}`), and square bracket (`]`) respectively. - Open brackets must be closed in the correct order. Your task is to write a function that will take a string and return `true` if it is a valid sequence, or `false` if it is not. # Example For s = \\"({[]})\\", the output should be true. ``` Explanation: The string has correct nesting and matching of all kinds of brackets. ``` For s = \\"({[)]}\\", the output should be false. ``` Explanation: The string has mismatched brackets - the closing parenthesis `)` does not match the nearest open bracket, which is `{`. ``` For s = \\"{[}\\", the output should be false. ``` Explanation: The string has unbalanced brackets - there is no closing bracket for `{` and `[`. ``` # Input/Output - `input`: a string `s` - The string can contain any of the characters `(){}[]` with length of `0 ≤ s ≤ 5000`. - `output`: a boolean - Return `true` if the string is a valid sequence, otherwise return `false`.","solution":"def is_valid_expression(s): Determines if the input string s consists of a valid sequence of nested expressions. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in \'({[\': stack.append(char) elif char in \')}]\': if not stack or stack[-1] != matching_bracket[char]: return False stack.pop() return not stack"},{"question":"Given an input string and a query character, determine the number of times the query character appears in the input string. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a string S. The second line of each test case contains a single character C, which is the query character to count in the string S. Output For each test case, output the number of times the character C appears in the string S. Constraints 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 100 C is a single character Example Input: 2 hello l world o Output: 2 1","solution":"def count_char_occurrences(test_cases): For each test case, count the occurrences of the query character in the given string. :param test_cases: List of tuples where each tuple contains a string and a character. :return: List of integers, each representing the count of the query character in the corresponding string. results = [] for s, c in test_cases: results.append(s.count(c)) return results"},{"question":"Given a singly linked list of size N, your task is to complete the function reverseLinkedList(), that should reverse the linked list and return the reversed list. Input: First line of input contains the number of test cases T. For each test case, there will be two lines: First line of each test case will be an integer N denoting the number of nodes in the linked list. Second line of each test case will contain N space-separated integers representing the nodes of the linked list in order. Output: The function should return the head of the reversed linked list. User Task: As it is a functional problem, you don\'t need to worry about the input; you just have to complete the function reverseLinkedList() that takes the head node of the linked list as a parameter and returns the head of the reversed linked list. Constraints: 1<=T<=100 1<=N<=1000 Example: Input: 2 5 1 2 3 4 5 3 10 20 30 Output: 5 4 3 2 1 30 20 10 Note: The Input/Output format and Example given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def reverseLinkedList(head): prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev # Helper function to create a linked list from a list def createLinkedList(arr): if not arr: return None head = Node(arr[0]) current = head for value in arr[1:]: current.next = Node(value) current = current.next return head # Helper function to convert a linked list to a list def linkedListToList(head): result = [] current = head while current is not None: result.append(current.data) current = current.next return result"},{"question":"You are given n flights, and they are represented as a 2D array `flights` where `flights[i] = [from, to, price]` indicates that there is a flight from city `from` to city `to` with price `price`. You are also given three integers `src`, `dst`, and `k`, where `src` is the starting city, `dst` is the destination city, and `k` is the maximum number of stops you are allowed to make on the way from `src` to `dst`. Return the minimum price to travel from `src` to `dst` with at most `k` stops. If there is no such route, return -1. Example 1: Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1 Output: 200 Explanation: The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as the flights go from 0 -> 1 -> 2. Example 2: Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0 Output: 500 Explanation: The cheapest price from city 0 to city 2 with 0 stops costs 500, as the only direct flight is 0 -> 2. Example 3: Input: n = 4, flights = [[0,1,100],[1,2,100],[2,3,100],[0,3,500]], src = 0, dst = 3, k = 2 Output: 300 Explanation: The cheapest price from city 0 to city 3 with at most 2 stops costs 300, as the flights go from 0 -> 1 -> 2 -> 3. Constraints: 1. 1 <= n <= 100 2. 0 <= flights.length <= (n * (n - 1) / 2) 3. flights[i].length == 3 4. 0 <= from, to < n 5. from != to 6. 1 <= price <= 10000 7. 0 <= k < n 8. 0 <= src, dst < n","solution":"import heapq def findCheapestPrice(n, flights, src, dst, k): Finds the cheapest flight from src to dst with at most k stops. Args: n (int): Number of cities. flights (List[List[int]]): List of lists where flights[i] = [from, to, price]. src (int): Starting city. dst (int): Destination city. k (int): Maximum number of stops. Returns: int: The minimum price to travel from src to dst with at most k stops, or -1 if no such route. # Create the graph graph = {i: [] for i in range(n)} for flight in flights: graph[flight[0]].append((flight[1], flight[2])) # Priority queue to store the (price, current_city, stops) pq = [(0, src, 0)] # Distance dictionary to track the minimum costs distance = {(src, 0): 0} while pq: price, current_city, stops = heapq.heappop(pq) if current_city == dst: return price if stops <= k: for next_city, next_price in graph[current_city]: new_cost = price + next_price if (next_city, stops + 1) not in distance or new_cost < distance[(next_city, stops + 1)]: distance[(next_city, stops + 1)] = new_cost heapq.heappush(pq, (new_cost, next_city, stops + 1)) return -1"},{"question":"You are given n (2 ≤ n ≤ 1000) boxes arranged in a line, each containing a certain number of candies. Each box is labeled with the number of candies it contains as a non-negative integer (0 ≤ candies in each box ≤ 109). Your task is to determine if there exists a pair of boxes such that the sum of the candies in these two boxes is equal to a given number k (0 ≤ k ≤ 2*109). You need to implement a function that efficiently finds such a pair. Input - The first line contains two integers, n and k. - The second line contains n integers representing the number of candies in each box. Output - If there exists a pair of boxes where the sum of candies equals k, print \\"YES\\". - Otherwise, print \\"NO\\". Examples Input ``` 5 10 1 2 3 7 8 ``` Output ``` YES ``` Input ``` 4 17 4 2 8 5 ``` Output ``` NO ``` Note In the first example, the boxes containing 3 and 7 candies sum up to 10. Therefore, the output is \\"YES\\". In the second example, no pair of boxes sum up to 17, so the output is \\"NO\\". Hint Use a hash set to keep track of the complements (k - candies in the current box) as you iterate through the list of boxes. This way, you can determine if a complement exists in O(1) time, leading to an overall O(n) time complexity solution.","solution":"def find_pair_with_sum(n, k, candies): Determines if there exists a pair of boxes such that the sum of the candies in these two boxes is equal to a given number k :param n: Number of boxes :param k: Target sum :param candies: List of integers representing candies in each box :return: \'YES\' if such a pair exists, \'NO\' otherwise complements = set() for candy in candies: if candy in complements: return \\"YES\\" complements.add(k - candy) return \\"NO\\""},{"question":"Watson challenged Holmes with another problem. This time, it\'s about understanding sequences. Watson gives Holmes a sequence of integers and wants him to determine if it\'s possible to partition the sequence into two non-empty subsequences such that their sums are equal. -----Input----- The first line of input contains an integer T denoting the number of test cases. Each test case starts with an integer N, indicating the length of the sequence. The next line contains N integers, the elements of the sequence. -----Output----- For each test case, output \\"YES\\" if it\'s possible to partition the sequence into two subsequences with equal sums, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - -10^4 ≤ Sequence element ≤ 10^4 -----Example----- Input: 2 5 1 5 11 5 3 1 2 5 Output: YES NO","solution":"def can_partition_with_equal_sum(sequence): Determines if it\'s possible to partition the sequence into two non-empty subsequences such that their sums are equal. total_sum = sum(sequence) # If the total sum is odd, it can\'t be partitioned into two equal parts if total_sum % 2 != 0: return \\"NO\\" # We need to find if there\'s a subset with sum equal to total_sum / 2 target_sum = total_sum // 2 n = len(sequence) # Using a DP approach to solve subset sum problem. dp = [[False] * (target_sum + 1) for _ in range(n + 1)] # Initialize the first column to True for i in range(n + 1): dp[i][0] = True # Fill the dp table for i in range(1, n + 1): for j in range(1, target_sum + 1): if j >= sequence[i-1]: dp[i][j] = dp[i-1][j] or dp[i-1][j - sequence[i-1]] else: dp[i][j] = dp[i-1][j] return \\"YES\\" if dp[n][target_sum] else \\"NO\\" def solve_partition_problem(test_cases): results = [] for sequence in test_cases: results.append(can_partition_with_equal_sum(sequence)) return results"},{"question":"Your company is developing a new feature in its application to automatically monitor the memory usage of specific processes. To achieve this, you need to write a function that determines the memory usage trend of a certain process over a week. You are given an array `memUsage[]` of size `n`, where each element represents the memory usage of the process for one day in megabytes (MB). You need to check if the memory usage trend is increasing, decreasing, or fluctuating. - The trend is \\"increasing\\" if each day\'s memory usage is higher than the previous day. - The trend is \\"decreasing\\" if each day\'s memory usage is lower than the previous day. - The trend is \\"fluctuating\\" if the memory usage is neither strictly increasing nor strictly decreasing. Write a function `memoryUsageTrend()` that takes the array `memUsage[]` of size `n` as input and returns a string representing the trend (\\"increasing\\", \\"decreasing\\", \\"fluctuating\\"). # Example 1: ```python Input: n = 7 memUsage[] = [100, 150, 200, 250, 300, 400, 500] Output: \\"increasing\\" Explanation: The memory usage for each day is strictly increasing. ``` # Example 2: ```python Input: n = 7 memUsage[] = [500, 400, 300, 250, 200, 150, 100] Output: \\"decreasing\\" Explanation: The memory usage for each day is strictly decreasing. ``` # Example 3: ```python Input: n = 7 memUsage[] = [100, 150, 120, 250, 200, 150, 500] Output: \\"fluctuating\\" Explanation: The memory usage for each day does not follow a consistent increasing or decreasing trend. ``` # Constraints: - 1 <= n <= 100 - 1 <= memUsage[i] <= 10^6 Your Task: - Implement the function `memoryUsageTrend()` that takes an array `memUsage[]` and its size `n` as input parameters and returns a string representing the memory usage trend.","solution":"def memoryUsageTrend(memUsage): Determines the memory usage trend of a process over a week. Parameters: memUsage (list): list of integers representing memory usage over n days. Returns: str: \\"increasing\\", \\"decreasing\\", or \\"fluctuating\\" based on the trend. if all(memUsage[i] < memUsage[i+1] for i in range(len(memUsage) - 1)): return \\"increasing\\" elif all(memUsage[i] > memUsage[i+1] for i in range(len(memUsage) - 1)): return \\"decreasing\\" else: return \\"fluctuating\\""},{"question":"You are given a list of `n` integers representing the heights of buildings in a line. You can jump from a building of height `h` to another building of height `k` if `|h - k| <= d`, where `d` is the maximum height difference you can jump. Starting from any building, determine the maximum number of different buildings you can visit. -----Input----- The first line contains two integers, `n` and `d` (`1 ≤ n ≤ 2000`, `0 ≤ d ≤ 10^9`) — the number of buildings and the maximum height difference you can jump. The second line contains `n` integers `h_1, h_2, ..., h_n` (`1 ≤ h_i ≤ 10^9`) — the heights of the buildings. -----Output----- Output a single integer, the maximum number of different buildings you can visit. -----Examples----- Input 6 2 3 4 2 1 5 6 Output 6 Input 5 3 10 13 8 6 14 Output 5 -----Note----- For the sample, you can start at any building and visit all the buildings, since the maximum allowed height difference is sufficiently large. For the first example, one possible route is 3 -> 4 -> 2 -> 1 -> 5 -> 6. For the second example, one possible route is 10 -> 8 -> 6 -> 14 -> 13.","solution":"def max_buildings_visited(n, d, heights): def dfs(building, visited): visited[building] = True max_count = 1 for i in range(n): if not visited[i] and abs(heights[building] - heights[i]) <= d: max_count = max(max_count, 1 + dfs(i, visited)) visited[building] = False return max_count max_visits = 0 for i in range(n): max_visits = max(max_visits, dfs(i, [False] * n)) return max_visits"},{"question":"# Instructions Given a list of words, write a function to group the words that are anagrams of each other. Each group should be represented as a list of words, and the function should return a list of these groups. The groups themselves can be in any order, as well as the words within each group. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. **Example:** ``` Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` **Note:** - All the input strings are of lowercase letters. - The order of output groups and the order of words within each group does not matter.","solution":"def group_anagrams(words): Groups the words that are anagrams of each other. Args: words (list of str): List of words to be grouped. Returns: list of list of str: A list containing groups of anagram words. from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Given a string `s` of length `n`, you are asked to perform a transformation of the string such that every character in the string is replaced by another character in the same string to minimize the number of different characters in the resulting string. The transformation must meet the following conditions: 1. The resulting string must be formed by repeatedly replacing a character with another character already present in the original string. 2. The goal is to minimize the number of distinct characters in the resulting string. You need to determine the minimum number of distinct characters possible after performing the transformation. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Then follow the descriptions of each test case. The first line of each test case contains a single integer n (1 leq n leq 10^5) — the length of the string. The second line of each test case contains a string s of length n consisting of lowercase English letters \'a\' to \'z\'. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print a single integer — the minimum number of distinct characters possible in the resulting string after performing the transformation. -----Examples----- Input 3 6 aabbcc 4 abcd 7 abcdeaa Output 2 1 3 -----Note----- In the first test case, the string \\"aabbcc\\" can be transformed to \\"aaaaaa\\" or \\"bbbccc\\" or any other combination with only two distinct characters remaining. Therefore, the minimum number of distinct characters is 2. In the second test case, the string \\"abcd\\" can be transformed to \\"aaaa\\", \\"bbbb\\", \\"cccc\\", or \\"dddd\\", each with only one distinct character remaining. Therefore, the minimum number of distinct characters is 1. In the third test case, the string \\"abcdeaa\\" can be transformed to \\"aaaaaaa\\", \\"bbbbbaa\\", or \\"cccccaa\\", among other combinations resulting in three distinct characters. Therefore, the minimum number of distinct characters is 3.","solution":"def minimize_distinct_characters(n, s): Returns the minimum number of distinct characters possible after performing the transformation. return len(set(s)) def process_test_cases(test_cases): results = [] for n, s in test_cases: results.append(minimize_distinct_characters(n, s)) return results"},{"question":"A word game is played on a 2D grid of letters. The player needs to find words in the grid by tracing a path through adjacent cells. The path can go up, down, left, right, or diagonally in any direction. Each cell can be visited only once per word. Write a program to find if a given word exists in the grid. The word can start at any position in the grid. Input: - The number of rows, r. - The number of columns, c. - A grid of r rows and c columns with each cell containing a single lowercase letter. - A word. Output: - True if the word exists in the grid, otherwise False. Example: Input: 3 4 a b c e s f c s a d e e \\"abcced\\" Output: True Explanation: The word \\"abcced\\" can be traced as follows: (0,0)->(0,1)->(0,2)->(1,2)->(1,1)->(2,1) Input: 3 4 a b c e s f c s a d e e \\"see\\" Output: True Explanation: The word \\"see\\" can be traced as follows: (2,1)->(2,2)->(1,2) Input: 3 4 a b c e s f c s a d e e \\"abcb\\" Output: False Explanation: The word \\"abcb\\" cannot be validly traced because the path would revisit the cell at (0,1). Note: - 0 ≤ r, c ≤ 20 - The word length will be at least 1 and at most 50. - The function should be case-sensitive (as all input characters are lowercase).","solution":"def exist(grid, word): def dfs(x, y, word_pos): if word_pos == len(word): return True if x < 0 or x >= r or y < 0 or y >= c or grid[x][y] != word[word_pos]: return False temp = grid[x][y] grid[x][y] = \'#\' for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]: if dfs(x + dx, y + dy, word_pos + 1): return True grid[x][y] = temp return False r, c = len(grid), len(grid[0]) for i in range(r): for j in range(c): if grid[i][j] == word[0]: if dfs(i, j, 0): return True return False"},{"question":"In a faraway kingdom, there is a festival happening in the main city. The kingdom has a unique road system described as a directed graph with n cities and m roads. Each road has a direction and a certain travel time associated with it. The king wants to know the shortest possible time it takes for his loyal knights to travel from the capital city to every other city in the kingdom. A group of knights is stationed in the capital city S and must deliver messages to every other city. As they are very diligent, they want to ensure they take the shortest path possible to every city. Can you help the knights determine the minimum travel time to reach each city from the capital city? -----Input----- The first line of input contains two integers n and m (1 le n le 10^5, 0 le m le 10^7) — the number of cities and the number of roads, respectively. The second line contains an integer S (1 le S le n) — the index of the capital city. Each of the next m lines describes a road in the format: u_i v_i w_i (1 le u_i, v_i le n, 0 le w_i le 10^6) — there is a road from city u_i to city v_i that takes w_i time to travel. It is guaranteed that there are no negative weights in the given graph. -----Output----- Output n integers, where the i-th integer is the minimum time required to reach city i from the capital city S. If a city is unreachable from the capital city, output -1 for that city. -----Examples----- Input 4 4 1 1 2 1 2 3 2 3 4 1 4 2 3 Output 0 1 3 4 Input 5 5 2 2 1 4 2 3 2 3 4 1 4 5 7 5 3 6 Output 4 0 2 3 10","solution":"import heapq def shortest_path(n, m, S, roads): # Create graph in the form of adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((w, v)) # Initialize distances with infinity distances = [float(\'inf\')] * (n + 1) distances[S] = 0 # Priority queue to store (time, city) pq = [(0, S)] # Dijkstra\'s algorithm while pq: current_time, u = heapq.heappop(pq) if current_time > distances[u]: continue for weight, v in graph[u]: time = current_time + weight if time < distances[v]: distances[v] = time heapq.heappush(pq, (time, v)) # Convert distances to required output format (-1 for unreachable cities) result = [distances[i] if distances[i] != float(\'inf\') else -1 for i in range(1, n + 1)] return result"},{"question":"Bob is playing a new video game where he needs to collect as many coins as possible while avoiding obstacles on his path. The game\'s terrain is represented by a straight line divided into N sections, numbered from 1 to N. Each section can either be empty, contain coins, or contain an obstacle. Bob always starts at section 1 and moves to section N. He can move to the next section or jump over one section. However, jumping over a section costs him a jump point. Bob starts with J jump points and he cannot move past an obstacle unless he jumps over it. When Bob lands on a section containing coins, he collects all the coins present in that section. Write a program to calculate the maximum number of coins Bob can collect from section 1 to section N. ------ Input: ------ The first line contains T, the number of test cases. The first line for each test case contains two integers N and J, the number of sections and the number of jump points, respectively. The next line contains N integers which can be one of the following: - `0` if the section is empty, - `C` (where 1 leq C leq 100), if the section contains `C` coins, - `-1` if the section contains an obstacle. ------ Output: ------ For each test case, print a single line containing the maximum number of coins Bob can collect. ------ Constraints ------ 1 leq T leq 100 1 leq N leq 10^3 0 leq J leq N 0 leq C leq 100 ----- Sample Input 1 ------ 3 5 1 0 10 -1 5 0 5 2 0 0 0 50 10 4 0 0 -1 20 0 ----- Sample Output 1 ------ 15 60 0 ----- Explanation 1 ------ Test Case 1: Given N = 5 and J = 1, the sections are [0, 10, -1, 5, 0]. Bob collects 10 coins from the second section and uses his one jump point to jump over the obstacle in the third section to reach the fourth section, collecting 5 coins. In total, he collects 15 coins. Test Case 2: Given N = 5 and J = 2, the sections are [0, 0, 0, 50, 10]. Bob can move through all sections without needing to use any jump points, collecting 60 coins in total from the fourth and fifth sections. Test Case 3: Given N = 4 and J = 0, the sections are [0, -1, 20, 0]. Bob cannot get past the obstacle in the second section and thus collects 0 coins.","solution":"def max_coins_collected(T, test_cases): results = [] for case in test_cases: N, J, sections = case # dp[x][y] will store the maximum coins Bob can collect if # he is at section x with y jumps used. dp = [[-1] * (J + 1) for _ in range(N)] # Bob starts at section 1 with 0 jump used. dp[0][0] = sections[0] if sections[0] != -1 else 0 for i in range(N): for j in range(J + 1): if dp[i][j] == -1: continue # Move to the next section if i + 1 < N and sections[i + 1] != -1: dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + sections[i + 1]) # Jump over one section if we have jumps left if j < J and i + 2 < N and sections[i + 2] != -1: dp[i + 2][j + 1] = max(dp[i + 2][j + 1], dp[i][j] + sections[i + 2]) # The answer for this test case is the maximum coins collected at the last section result = max(dp[N - 1]) results.append(result if result != -1 else 0) return results # Example usage: # T = 3 # test_cases = [ # (5, 1, [0, 10, -1, 5, 0]), # (5, 2, [0, 0, 0, 50, 10]), # (4, 0, [0, -1, 20, 0]) # ] # print(max_coins_collected(T, test_cases)) # Output: [15, 60, 0]"},{"question":"You\'ve been tasked with developing a new security protocol for a company\'s file system. The company uses a file directory system represented as a tree, where each directory can have several subdirectories, and each subdirectory can also have its own subdirectories. Your job is to determine the maximum depth of the file system tree. -----Input----- The input consists of: - One line containing an integer n (1 le n le 10^5), the number of directories in the file system. - n-1 lines each containing two integers u and v (1 le u, v le n), representing a directed edge from directory u to directory v which means v is a subdirectory of u. -----Output----- Output a single integer, the maximum depth of the given file system. -----Examples----- Sample Input 1: 5 1 2 1 3 2 4 2 5 Sample Output 1: 3 Sample Input 2: 6 1 2 1 3 3 4 4 5 5 6 Sample Output 2: 5","solution":"from collections import defaultdict, deque def max_depth(n, edges): if n == 1: return 1 tree = defaultdict(list) for u, v in edges: tree[u].append(v) def bfs(root): queue = deque([(root, 1)]) max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) for child in tree[node]: queue.append((child, depth + 1)) return max_depth return bfs(1)"},{"question":"You are working on a data processing system where you need to handle multiple tasks efficiently. Each task has a specific duration and a specific number of resources required to complete it. However, you have a limited number of resources available at any given time. Your goal is to determine the maximum number of tasks that can be completed without exceeding the available resources at any point in time. More formally, you are given a list of tasks where each task is represented by its start time, end time, and the number of resources it requires. You need to calculate the maximum number of non-overlapping tasks that can be scheduled such that the total resources do not exceed the available resources at any point in time. ----Input---- The first line contains two integers n and r (1 ≤ n ≤ 10^5, 1 ≤ r ≤ 10^9) — the total number of tasks and the total available resources. Each of the next n lines contains three integers s, e, and res (1 ≤ s < e ≤ 10^9, 1 ≤ res ≤ r) — the start time, end time, and the resources required for each task. ----Output---- Print a single integer — the maximum number of tasks that can be completed without exceeding the available resources. ------Examples------ Input 5 10 1 4 2 2 6 4 5 8 3 7 9 3 8 10 5 Output 3 Input 3 5 1 3 2 2 5 3 4 6 1 Output 2 -----Note----- In the first sample case: - We can schedule tasks (1, 4, 2), (5, 8, 3), and (8, 10, 5). - The total resources required at any point are within the limit of 10 resources. In the second sample case: - We can schedule tasks (1, 3, 2) and (4, 6, 1). - The total resources required at any point are within the limit of 5 resources.","solution":"def max_tasks(n, r, tasks): # Sort tasks by end time to use the greedy approach tasks.sort(key=lambda x: x[1]) selected_tasks = [] current_time = 0 current_resources = 0 for start, end, res in tasks: if current_resources + res <= r: if not selected_tasks or selected_tasks[-1][1] <= start: # Check if not overlapping selected_tasks.append((start, end, res)) current_resources += res return len(selected_tasks) # Example usage: # n = 5 # r = 10 # tasks = [(1, 4, 2), (2, 6, 4), (5, 8, 3), (7, 9, 3), (8, 10, 5)] # print(max_tasks(n, r, tasks)) # Output: 3"},{"question":"Write a program that determines if a sequence of words forms a valid “zigzag” pattern. A “zigzag” pattern for a sequence of words means that the lengths of the words strictly alternate between increasing and decreasing. -----Input----- The first and only line of input contains a sequence of space-separated words. Each word consists only of letters a-z. There are at most 100 words, and each word contains at most 20 letters. -----Output----- Output “yes” if the sequence forms a zigzag pattern, otherwise output “no”. -----Examples----- Sample Input 1: a code of great fun Sample Output 1: yes Sample Input 2: this is not zigzag Sample Output 2: no","solution":"def is_zigzag(words): Determines if a sequence of words forms a valid zigzag pattern, where lengths of the words strictly alternate between increasing and decreasing. lengths = [len(word) for word in words] if len(lengths) < 2: return \\"yes\\" # Check zigzag pattern for i in range(1, len(lengths) - 1): if not ((lengths[i - 1] < lengths[i] > lengths[i + 1]) or (lengths[i - 1] > lengths[i] < lengths[i + 1])): return \\"no\\" return \\"yes\\""},{"question":"Given an integer array `arr` of length `n`, you need to perform a series of operations to make all array elements equal. The allowed operation is to select any subarray of the array (a contiguous block of elements) and increment each element of the selected subarray by 1. You are required to determine the minimum number of operations needed to make all elements of the array equal. Input The first line contains a single integer `n` (1 ≤ n ≤ 100), the length of the array. The second line contains `n` space-separated integers `arr_1, arr_2, ..., arr_n` (0 ≤ arr_i ≤ 10^4), representing the array elements. Output Output a single integer, the minimum number of operations needed to make all elements of the array equal. Example Input 4 1 2 3 4 Output 3 Explanation Initially, the array is [1, 2, 3, 4]. 1. Select the subarray [2, 3, 4] and increment each by 1. The array becomes [1, 3, 4, 5]. 2. Select the subarray [3, 4, 5] and increment each by 1. The array becomes [1, 4, 5, 6]. 3. Select the subarray [4, 5, 6] and increment each by 1. The array becomes [1, 5, 6, 7]. Finally, select the subarray [1, 5, 6, 7] and increment each by 1 three times. The array becomes [4, 8, 9, 10], [5, 9, 10, 11], ... and so on. After a total of 3 operations, all elements of the array are equal.","solution":"def min_operations_to_equalize(arr): This function calculates the minimum number of operations needed to make all elements of the array equal. Each operation consists of selecting a subarray and incrementing each element of the selected subarray by 1. :param arr: List[int] - the input array :return: int - minimum number of operations needed # Find the maximum element in the array max_val = max(arr) # Sum the difference between the max value and each element operations = sum(max_val - x for x in arr) return operations"},{"question":"A rectangular matrix is called a special matrix if it contains no zero entries and all its rows and columns have at least one unique maximum element. You are given a matrix with N rows and M columns. Check if it is a special matrix. ------ Input ------ The first line of input consists of three integers N (number of rows), M (number of columns). The next N lines each contain M space-separated integers representing the elements of the matrix. ------ Output ------ Output \\"YES\\" if the given matrix is a special matrix, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ N, M ≤ 100 1 ≤ A_{ij} ≤ 1000 ------ Sample Input 1 ------ 3 3 10 5 3 1 20 4 2 8 30 ------ Sample Output 1 ------ YES ------ Sample Input 2 ------ 3 3 10 10 10 10 20 10 10 10 30 ------ Sample Output 2 ------ NO ------ Explanation 1 ------ In the first example, each row and column have unique maximum elements: 10 in the first row, 20 in the second, and 30 in the third, while for columns, 10, 20, and 30 are the unique maximums. In the second example, the first row and the first column do not have unique maximums, making it not a special matrix.","solution":"def is_special_matrix(matrix): Check if the matrix is a special matrix. A matrix is special if all its rows and columns have at least one unique maximum element. N = len(matrix) M = len(matrix[0]) # Check for zero entries for row in matrix: if 0 in row: return \\"NO\\" # Check for unique maximum in rows for row in matrix: if row.count(max(row)) > 1: return \\"NO\\" # Check for unique maximum in columns for col in range(M): col_values = [matrix[row][col] for row in range(N)] if col_values.count(max(col_values)) > 1: return \\"NO\\" return \\"YES\\""},{"question":"Joe is conducting a survey on social media platforms. He collects hashtags used in the past week and needs to identify the trending hashtags. A hashtag is considered trending if it appears in at least half of the collected posts. Given the list of M posts, display all the trending hashtags in alphabetical order. Input The first line consists of M, the number of posts. Each of the next M lines contains hashtags used in a single post. Each hashtag starts with a \'#\' followed by lowercase letters of the English alphabet. Multiple hashtags in a post are space-separated. Output Print all the trending hashtags in alphabetical order. If there are no trending hashtags, print \\"No trending hashtags\\". Constraints 1 ≤ M ≤ 100 1 ≤ Number of hashtags in each post ≤ 10 1 ≤ Length of each hashtag ≤ 50 SAMPLE INPUT 5 #fun #summer #vacation #vacation #travel #fun #fun #foodblogger #travel #photography #fun #summer #fun #travel SAMPLE OUTPUT #fun #travel Explanation \\"#fun\\" and \\"#travel\\" are trending hashtags as they appear in at least 3 posts, which is half of the total posts.","solution":"def get_trending_hashtags(M, posts): from collections import defaultdict hashtag_count = defaultdict(int) for post in posts: hashtags = set(post.split()) for tag in hashtags: hashtag_count[tag] += 1 trending_threshold = M / 2 trending_hashtags = [tag for tag, count in hashtag_count.items() if count >= trending_threshold] if not trending_hashtags: return \\"No trending hashtags\\" return sorted(trending_hashtags) # Example usage: # M = 5 # posts = [ # \\"#fun #summer #vacation\\", # \\"#vacation #travel #fun\\", # \\"#fun #foodblogger\\", # \\"#travel #photography #fun\\", # \\"#summer #fun #travel\\" # ] # result = get_trending_hashtags(M, posts) # print(\\"n\\".join(result))"},{"question":"Write a function ```reverseWords```(C# ```ReverseWords```, Python ```reverse_words```) that takes a string containing a sentence and returns a new string with the words in reverse order. Words are defined as sequences of characters separated by spaces. The input string will not have leading or trailing spaces, and there will be exactly one space between each pair of words. Example: ``` reverseWords(\\"hello world\\"); reverse_words(\\"hello world\\") ReverseWords(\\"hello world\\"); // should return \\"world hello\\" ```","solution":"def reverse_words(sentence): Reverse the words in the given sentence. :param sentence: A string containing a sentence with words separated by exactly one space. :return: A new string with the words in reverse order. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"You are given a grid of size n times m with each cell containing an integer representing the elevation at that point. You need to calculate the highest possible elevation difference you can achieve by moving from the top-left corner of the grid to the bottom-right corner. You can only move right or down from each cell. More formally, if the grid is represented as a matrix e, where e_{i,j} is the elevation at cell (i,j), then you start at cell (0, 0) and move to cell (n-1, m-1). Your task is to find the path with the maximum difference in elevation between the highest and lowest points along the path. -----Input----- The first line of the input contains two integers n and m (2 le n, m le 1000) - the number of rows and columns in the grid. The next n lines each contain m integers e_{i,j} (1 le e_{i,j} le 10^9), representing the elevation of each cell in the grid. -----Output----- Print one integer - the maximum possible elevation difference you can achieve along any path from the top-left to the bottom-right corner of the grid. -----Examples----- Input 3 3 1 3 5 6 7 8 4 6 10 Output 9 Input 4 4 10 12 14 16 9 8 7 11 5 4 3 2 1 2 3 4 Output 15 Explanation: In the first example, one possible path is (1,3), (3,7), (7,8), (8,10). The highest point is 10 and the lowest point is 1, so the difference is 9. In the second example, one possible path is (10,12), (12,14), (14,16), (16,11), (11,2), (2,3), (3,4). The highest point is 16 and the lowest point is 1, so the difference is 15.","solution":"def maximum_elevation_difference(n, m, grid): Calculate the highest possible elevation difference by moving from the top-left corner to the bottom-right corner of the grid. :param n: number of rows :param m: number of columns :param grid: 2D list representing the grid elevations :return: Maximum possible elevation difference # Initialize DP table to store the minimum and maximum elevations along the path to each cell min_elevation = [[float(\'inf\')] * m for _ in range(n)] max_elevation = [[float(\'-inf\')] * m for _ in range(n)] # Initialization for the starting cell (0, 0) min_elevation[0][0] = grid[0][0] max_elevation[0][0] = grid[0][0] # Fill DP tables for i in range(n): for j in range(m): if i > 0: min_elevation[i][j] = min(min_elevation[i][j], min_elevation[i-1][j]) max_elevation[i][j] = max(max_elevation[i][j], max_elevation[i-1][j]) if j > 0: min_elevation[i][j] = min(min_elevation[i][j], min_elevation[i][j-1]) max_elevation[i][j] = max(max_elevation[i][j], max_elevation[i][j-1]) min_elevation[i][j] = min(min_elevation[i][j], grid[i][j]) max_elevation[i][j] = max(max_elevation[i][j], grid[i][j]) # Calculate the result as the difference between max and min elevation at the bottom-right corner result = max_elevation[n-1][m-1] - min_elevation[n-1][m-1] return result"},{"question":"Given a string s consisting of only lowercase alphabets, write a method that returns the index of the first non-repeating character in it. If there is no non-repeating character, return -1. Example 1: Input: s = \\"leetcode\\" Output: 0 Explanation: The first non-repeating character is \'l\', which is at index 0. Example 2: Input: s = \\"loveleetcode\\" Output: 2 Explanation: The first non-repeating character is \'v\', which is at index 2. Example 3: Input: s = \\"aabb\\" Output: -1 Explanation: There is no non-repeating character in the string. Note: The string s will have a length in the range [1, 100000].","solution":"def first_non_repeating_character(s): Returns the index of the first non-repeating character in the string s. If there is no non-repeating character, return -1. # Dictionary to store the count of each character char_count = {} # First pass: count the frequency of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass: find the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"John is participating in a multi-stage programming competition. Each stage of the competition involves contestants gaining points based on the problems they solve. The competition consists of m stages, and John has achieved a certain number of points in each stage. However, he does not know the points scored by other participants in any of the stages. After completing all stages, participants are ranked based on their total points scored across all stages. Participants with the same total points share the same overall place. John wants to know the minimum and maximum possible overall place he could secure, assuming the most favorable and unfavorable scoring scenarios from other participants. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases to process. Each of the following t test cases consists of: - An integer m (1 leq m leq 100) — the number of stages in the competition. - An integer n (1 leq n leq 1000) — the number of participants (including John) in the competition. - A list of m integers a_1, a_2, ..., a_m (0 le a_i le 1000), where each integer represents the points John scored in the respective stage. -----Output----- For each test case, print two integers — the minimum and maximum possible overall place John could secure. -----Example----- Input 1 3 5 10 20 30 Output 1 5 -----Note----- In the first example: - John scored [10, 20, 30] in the three stages. Hence, his total score is 60. - In the most favorable scenario, all other participants scored fewer points in total than John, resulting in John taking the 1st place. - In the most unfavorable scenario, all other participants scored just as many or more points than John, resulting in John taking the 5th place (last place in case of a tie).","solution":"def johns_places(t, test_cases): results = [] for case in test_cases: m = case[\'m\'] n = case[\'n\'] points = case[\'points\'] john_total = sum(points) # Minimum place (If all participants scored less than John) min_place = 1 # Maximum place (If all participants scored at least as much as John) max_place = n results.append((min_place, max_place)) return results"},{"question":"You are given an array of positive integers `nums`, where the array is strictly increasing up to one peak element and then strictly decreasing. In other words, it first increases until it reaches the peak element, from which point it starts decreasing to the end of the array. Your task is to find the peak element in the array `nums`. For example, in the array `[1, 2, 3, 2, 1]`, the peak element is `3`. In the array `[1, 3, 5, 7, 6, 4, 2]`, the peak element is `7`. Write a function to find the peak element. Your solution should have a time complexity better than O(n), ideally O(log n). -----Input----- The input line contains one array `nums` consisting of at least 3 and at most 200 positive integers. It is guaranteed that `nums` first increases to a peak and then decreases. -----Output----- Print one integer — the peak element in the `nums` array. -----Examples----- Input [1, 2, 3, 2, 1] Output 3 Input [1, 3, 5, 7, 6, 4, 2] Output 7 Input [10, 20, 30, 25, 15, 10, 5] Output 30 Input [5, 10, 20, 15, 5] Output 20","solution":"def find_peak(nums): Finds the peak element in the strictly increasing then strictly decreasing array nums. Uses binary search for O(log n) time complexity. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] < nums[mid + 1]: left = mid + 1 else: right = mid return nums[left]"},{"question":"Design a `Matrix` class that represents a 2x2 matrix with attributes for its four components. Implement a method `.multiply()` that takes another 2x2 matrix as a parameter and returns a new matrix equal to the product of the matrix you call `.multiply()` on and the matrix you pass in. For example: ```python >>> a = Matrix(1, 2, 3, 4) >>> a.a 1 >>> a.b 2 >>> a.c 3 >>> a.d 4 >>> b = Matrix(2, 0, 1, 2) >>> c = a.multiply(b) >>> c.a 4 >>> c.b 4 >>> c.c 10 >>> c.d 8 ``` Matrix multiplication for 2x2 matrices can be done using the formula: ``` | a b | | e f | | a*e + b*g a*f + b*h | | c d | * | g h | = | c*e + d*g c*f + d*h | ```","solution":"class Matrix: def __init__(self, a, b, c, d): Initializes a 2x2 matrix with components a, b, c, d. The matrix looks like: | a b | | c d | self.a = a self.b = b self.c = c self.d = d def multiply(self, other): Multiplies this matrix by another 2x2 matrix and returns the resulting matrix. The multiplication is done according to the formula: | a b | | e f | | a*e + b*g a*f + b*h | | c d | * | g h | = | c*e + d*g c*f + d*h | a = self.a * other.a + self.b * other.c b = self.a * other.b + self.b * other.d c = self.c * other.a + self.d * other.c d = self.c * other.b + self.d * other.d return Matrix(a, b, c, d)"},{"question":"Problem Given a list of N numbers, you are required to partition the list into two subarrays such that the absolute difference between the sums of the two subarrays is minimized. Your task is to compute this minimum possible difference. For example, given the list [1, 6, 11, 5], you can partition it into [1, 6, 5] and [11], which results in sums 12 and 11, respectively. The absolute difference between these sums is |12 - 11| = 1. Write a function to determine this minimum difference. # Function Signature ```python def find_min_difference(arr: List[int]) -> int: pass ``` # Input - An integer N (1 ≤ N ≤ 100) indicating the number of elements in the list. - A list of N integers where the i-th integer is represented as `arr[i]` and each element is between 1 and 1000. # Output - An integer representing the minimum possible difference of the partitioned subarrays. # Example ```python # Example 1 N = 4 arr = [1, 6, 11, 5] print(find_min_difference(arr)) # Output: 1 # Example 2 N = 3 arr = [10, 20, 30] print(find_min_difference(arr)) # Output: 0 # Example 3 N = 5 arr = [3, 1, 4, 2, 2] print(find_min_difference(arr)) # Output: 0 ``` # Explanation - **Example 1**: Partitioning [1, 6, 11, 5] into [1, 6, 5] and [11] gives sums 12 and 11 with a difference of 1. - **Example 2**: Partitioning [10, 20, 30] into [10, 20] and [30] achieves sums 30 and 30 with a difference of 0. - **Example 3**: Partitioning [3, 1, 4, 2, 2] into [3, 2, 2] and [1, 4] both yield a sum of 7, resulting in a difference of 0.","solution":"def find_min_difference(arr): total_sum = sum(arr) n = len(arr) # Initialize a table to store results of subproblems dp = [[False for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] # Initialize the first column as true, since zero sum is possible for any subset. for i in range(n + 1): dp[i][0] = True # Fill the partition table in a bottom-up manner. for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] # The largest j such that dp[n][j] is true will be the closest to half of total_sum for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j return total_sum # Example usage: arr = [1, 6, 11, 5] print(find_min_difference(arr)) # Output: 1"},{"question":"You are an employee at a factory that produces widgets. Each widget has a serial number that consists of a string of characters (alphanumeric). As part of the quality control process, you need to verify that all the serial numbers meet the following criteria: - The serial number must be exactly 10 characters long. - It must include at least one uppercase letter. - It must include at least one lowercase letter. - It must include at least one digit. - It must include at least one special character from the set (!@#%^&*). Write a function `validate_serial_number(serial)` that takes a string `serial` representing a serial number and returns `True` if the serial number is valid based on the above criteria, or `False` otherwise. Examples: ```python validate_serial_number(\'A1b#234567\') => True validate_serial_number(\'A123456789\') => False # Lacks lowercase letter and special character validate_serial_number(\'a1b#cdEfg\') => False # Less than 10 characters ```","solution":"import re def validate_serial_number(serial): Validates if the given serial number meets the criteria: - Exactly 10 characters long - Contains at least one uppercase letter - Contains at least one lowercase letter - Contains at least one digit - Contains at least one special character from the set (!@#%^&*) if len(serial) != 10: return False if not re.search(r\'[A-Z]\', serial): return False if not re.search(r\'[a-z]\', serial): return False if not re.search(r\'d\', serial): return False if not re.search(r\'[!@#%^&*]\', serial): return False return True"},{"question":"A company wants to create a software system to manage employee records. Each record consists of an employee ID, first name, last name, and department. The company needs to perform several operations on the employee records such as adding new records, removing records by employee ID, and searching for records by department. Write a program to manage these employee records. The program should support the following commands: 1. **ADD**: Adds a new employee record. The input format is \\"ADD <employee_id> <first_name> <last_name> <department>\\". The employee ID is guaranteed to be unique. 2. **REMOVE**: Removes an employee record by their employee ID. The input format is \\"REMOVE <employee_id>\\". 3. **SEARCH**: Searches for employees by department. The input format is \\"SEARCH <department>\\". Output the employee records in the given department in the order they were added, with each record on a new line in the format \\"employee_id first_name last_name\\". The program should continue to read commands until it encounters the command \\"END\\". -----Input----- The input consists of a series of commands as described above, terminated by the command \\"END\\". - Employee IDs are positive integers. - First names and last names are strings containing only alphabetic characters. - Department names are strings containing only alphabetic characters. -----Output----- For each \\"SEARCH <department>\\" command, output the employee records in the given department in the order they were added. Output each record on a new line in the format \\"employee_id first_name last_name\\". If no employees are found for a given department, output \\"No employees found in <department>\\". -----Examples----- Sample Input: ADD 1 John Doe Sales ADD 2 Jane Smith Engineering ADD 3 Alice Brown Sales REMOVE 2 SEARCH Sales SEARCH Engineering ADD 4 Bob White Sales SEARCH Sales END Sample Output: 1 John Doe 3 Alice Brown No employees found in Engineering 1 John Doe 3 Alice Brown 4 Bob White","solution":"class EmployeeManager: def __init__(self): self.records = {} def add_employee(self, employee_id, first_name, last_name, department): self.records[employee_id] = {\'first_name\': first_name, \'last_name\': last_name, \'department\': department} def remove_employee(self, employee_id): if employee_id in self.records: del self.records[employee_id] def search_by_department(self, department): result = [f\\"{eid} {data[\'first_name\']} {data[\'last_name\']}\\" for eid, data in self.records.items() if data[\'department\'] == department] if result: return \\"n\\".join(result) else: return f\\"No employees found in {department}\\" def employee_manager_system(commands): manager = EmployeeManager() results = [] for command in commands: parts = command.split() if parts[0] == \\"ADD\\": manager.add_employee(int(parts[1]), parts[2], parts[3], parts[4]) elif parts[0] == \\"REMOVE\\": manager.remove_employee(int(parts[1])) elif parts[0] == \\"SEARCH\\": result = manager.search_by_department(parts[1]) results.append(result) elif parts[0] == \\"END\\": break return results"},{"question":"Given a grid of size NxN where each cell is either empty (denoted by \'.\') or contains a wall (denoted by \'#\'), find the shortest path from the top-left cell to the bottom-right cell. You are only allowed to move to adjacent cells (up, down, left, right) and cannot move through walls. You need to output the length of the shortest path. If there is no valid path, return -1. Input The first line of the input contains an integer T, the number of test cases. For each test case, the first line contains an integer N (the size of the grid). The next N lines each contain a string of length N consisting of \'.\' and \'#\'. Output For each test case, output a single line containing the length of the shortest path, or -1 if there is no valid path. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 500 Example Input: 3 4 .... .. ..#. .... 4 .#.. #. ..#. ...# 2 .. Output: 7 -1 -1 Explanation Example case 1. The shortest path is to follow the route (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3). The length of this path is 7. Example case 2. There is no valid path from the top-left to the bottom-right as walls block any possible path. Example case 3. There is no valid path from the top-left to the bottom-right as the initial cell itself is blocked.","solution":"from collections import deque def shortest_path_length(grid): N = len(grid) if grid[0][0] == \'#\' or grid[N-1][N-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == N-1 and y == N-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def solve(test_cases): results = [] for grid in test_cases: results.append(shortest_path_length(grid)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) grid = [lines[i] for i in range(index + 1, index + 1 + N)] test_cases.append(grid) index += N + 1 return test_cases"},{"question":"Create a function that takes an array of integers and an integer threshold as parameters. The function should return a new array containing only the integers from the original array that are greater than the given threshold. Example: filter_array([1, 5, 8, 10, 12], 7) Output: [8, 10, 12] filter_array([4, 2, 9, 3], 5) Output: [9] The function should preserve the order of elements from the original array. If no elements exceed the threshold, return an empty array.","solution":"def filter_array(arr, threshold): Returns a new array containing only the integers from the original array that are greater than the given threshold. Parameters: arr (list of int): The original array. threshold (int): The specified threshold. Returns: list of int: The filtered array. return [x for x in arr if x > threshold]"},{"question":"Given a staircase with N steps, you can either take one step or two steps at a time. Write a program to count the number of unique ways to reach the top of the staircase. For example, if the staircase has 3 steps, there are 3 ways to reach the top: 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step Input: The input consists of a single integer N, the number of steps in the staircase. Output: Print the number of unique ways to reach the top of the staircase. Constraints: 1 ≤ N ≤ 45 SAMPLE INPUT 1: 3 SAMPLE OUTPUT 1: 3 SAMPLE INPUT 2: 5 SAMPLE OUTPUT 2: 8 Explanation: For N = 3, the possible ways to reach the top are: 1+1+1, 1+2, 2+1 (Total 3 ways) For N = 5, the possible ways to reach the top are: 1+1+1+1+1, 1+1+1+2, 1+1+2+1, 1+2+1+1, 2+1+1+1, 1+2+2, 2+1+2, 2+2+1 (Total 8 ways)","solution":"def count_ways_to_top(N): Returns the number of unique ways to reach the top of a staircase with N steps, where you can either take one step or two steps at a time. if N <= 0: return 0 if N == 1: return 1 if N == 2: return 2 dp = [0] * (N + 1) dp[1] = 1 dp[2] = 2 for i in range(3, N + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[N]"},{"question":"You are given an undirected graph with (N) nodes (numbered (1) through (N)) and (M) edges. Each node has an associated weight (w_i), and each edge has a weight (e_i). Your task is to find the weight of the maximum spanning tree of this graph. A maximum spanning tree is a spanning tree of a graph whose sum of edge weights is as large as possible. A spanning tree is a subset of the graph which contains all the vertices, is connected, and is acyclic. There may be multiple maximum spanning trees for a graph; you should compute the weight of one of them. ------ Input ------ The first line of the input contains a single integer ( T ) denoting the number of test cases. The description of ( T ) test cases follows. The first line of each test case contains two space-separated integers ( N ) and ( M ). The second line contains ( N ) space-separated integers ( w_1, w_2, ldots, w_N ). Each of the following ( M ) lines contains three space-separated integers ( u, v ), and ( e ) denoting an edge between nodes ( u ) and ( v ) with weight ( e ). ------ Output ------ For each test case, print a single line containing one integer — the weight of the maximum spanning tree of the given graph. ------ Constraints ------ ( 1 leq T leq 10 ) ( 1 leq N leq 100,000 ) ( 0 leq M leq 200,000 ) ( 1 leq w_i leq 10^6 ) ( 1 leq e_i leq 10^6 ) ( 1 leq u, v leq N ) The given graph is connected. ------ Subtasks ------ **Subtask #1 (50 points):** ( 1 leq N leq 1000 ) ( 0 leq M leq 2000 ) **Subtask #2 (50 points):** original constraints ------ Sample Input 1 ------ 1 4 5 2 3 4 5 1 2 5 1 3 3 2 3 4 2 4 6 3 4 2 ------ Sample Output 1 ------ 15","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def maximum_spanning_tree(n, m, node_weights, edges): # Sort edges by weight in descending order edges.sort(key=lambda x: x[2], reverse=True) uf = UnionFind(n + 1) mst_weight = 0 mst_edges = [] for u, v, weight in edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst_weight += weight mst_edges.append((u, v, weight)) return mst_weight def solve(test_cases): results = [] for n, m, node_weights, edges in test_cases: result = maximum_spanning_tree(n, m, node_weights, edges) results.append(result) return results # Usage example: test_cases = [ (4, 5, [2, 3, 4, 5], [(1, 2, 5), (1, 3, 3), (2, 3, 4), (2, 4, 6), (3, 4, 2)]) ] print(solve(test_cases)) # Output should be [15]"},{"question":"Given a non-empty array of integers, every element appears twice except for one. Write a function, `findSingleNumber`, that takes an array of integers and returns the single number that does not appear twice. # Important Your algorithm should have a linear runtime complexity. # Examples Input: [2, 2, 1] Output: 1 Input: [4, 1, 2, 1, 2] Output: 4 # Constraints * The array should contain at least one element. * You may assume that every element appears exactly twice, except for one. The idea for solving this is that you need to return the unique number which is not repeated as others are repeated two times at least. Happy Coding!","solution":"def findSingleNumber(nums): Returns the single number that appears only once in the array while every other element appears twice. single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"# The Problem Ella, a music teacher, wants to track the practice times of her students to ensure they are practicing enough during the week. She wants to create a system where she can input the students\' practice logs and get a summary of each student\'s total practice time for the week. Your task is to write a function `calculatePracticeTime` that will help Ella monitor her students\' efforts effectively. # What To Do Your task is to write a helper function `calculatePracticeTime` that takes a single argument: * `practiceLogs`, which is a nested dictionary where each key is a student\'s name and each value is a list of strings representing the practice sessions for each day of the week. Each practice session string will be in the format \\"hh:mm:ss\\". * The function should return a dictionary where each key is a student\'s name, and each value is the total practice time for that student for the week, formatted as \\"hh:mm:ss\\". * If a student has no practice logs, the total practice time should be \\"00:00:00\\". # Example ```python practiceLogs = { \\"Alice\\": [\\"01:30:00\\", \\"00:45:00\\", \\"00:50:00\\", \\"01:20:00\\", \\"00:40:00\\"], \\"Bob\\": [\\"00:30:00\\", \\"00:50:00\\", \\"01:10:00\\"], \\"Charlie\\": [] } calculatePracticeTime(practiceLogs) ``` Output: ```python { \\"Alice\\": \\"05:05:00\\", \\"Bob\\": \\"02:30:00\\", \\"Charlie\\": \\"00:00:00\\" } ``` *You can expect valid input for this task*","solution":"def calculatePracticeTime(practiceLogs): from datetime import timedelta def parse_time(time_str): hours, minutes, seconds = map(int, time_str.split(\':\')) return timedelta(hours=hours, minutes=minutes, seconds=seconds) def format_time(total_seconds): total_seconds = int(total_seconds) hours, remainder = divmod(total_seconds, 3600) minutes, seconds = divmod(remainder, 60) return f\\"{hours:02}:{minutes:02}:{seconds:02}\\" practice_summary = {} for student, logs in practiceLogs.items(): total_time = sum((parse_time(log) for log in logs), timedelta()) practice_summary[student] = format_time(total_time.total_seconds()) return practice_summary"},{"question":"A courier company needs to deliver a series of packages to a number of cities organized in a network. Each city is connected to other cities via roads, and each road has an associated travel time. The company wants to determine the minimum time required to deliver all packages if it starts at a specified city and can carry only one package at a time. Write a function that, given a graph representing the cities and roads, and the starting city, returns the minimum time required to deliver all packages. The graph is represented as an adjacency list where `graph[i]` is a list of tuples `(j, t)` representing a road from city `i` to city `j` with travel time `t`. The function signature is: ```python def min_delivery_time(graph: List[List[Tuple[int, int]]], start: int, packages: List[int]) -> int: ``` # Example 1: ```python graph = [ [(1, 2), (2, 4)], [(0, 2), (2, 1)], [(0, 4), (1, 1)] ] start = 0 packages = [1, 2] Output: 10 Explanation: The courier travels from city 0 to city 1 (time: 2), returns to city 0 (time: 2), then travels from city 0 to city 2 (time: 4), and finally returns to city 0 (time: 2). Total travel time is 2 + 2 + 4 + 2 = 10. ``` # Example 2: ```python graph = [ [(1, 3), (2, 5)], [(0, 3), (2, 2)], [(0, 5), (1, 2)] ] start = 1 packages = [2] Output: 4 Explanation: The courier travels from city 1 to city 2 (time: 2), delivers the package, and returns to city 1 (time: 2). Total travel time is 2 + 2 = 4. ``` # Constraints: - `1 <= len(graph) <= 100` - `0 <= len(graph[i]) <= len(graph)` - `0 <= start < len(graph)` - `1 <= len(packages) <= len(graph)` - All travel times `t` are positive integers. - Cities in `packages` list are always valid and distinct. # Notes: - The courier must always return to the starting city after delivering each package. - The given graph is undirected, meaning if there is a road from city `i` to city `j` with time `t`, there is also a road from city `j` to city `i` with time `t`.","solution":"import heapq from typing import List, Tuple def dijkstra(graph: List[List[Tuple[int, int]]], start: int) -> List[int]: Implementation of Dijkstra\'s algorithm to find shortest paths from start to all nodes. num_cities = len(graph) min_time = [float(\'inf\')] * num_cities min_time[start] = 0 priority_queue = [(0, start)] # (travel_time, city) while priority_queue: current_time, u = heapq.heappop(priority_queue) if current_time > min_time[u]: continue for v, travel_time in graph[u]: new_time = current_time + travel_time if new_time < min_time[v]: min_time[v] = new_time heapq.heappush(priority_queue, (new_time, v)) return min_time def min_delivery_time(graph: List[List[Tuple[int, int]]], start: int, packages: List[int]) -> int: Returns the minimum time required to deliver all packages starting from a given city. min_times_from_start = dijkstra(graph, start) total_time = 0 for package in packages: if package != start: total_time += 2 * min_times_from_start[package] return total_time"},{"question":"You are tasked with developing a gardening management system for a garden with n plants arranged in a single row. Each plant has a certain water requirement w_i and exposure requirement e_i. Each day, you can water exactly one plant, and it gets fully satisfied for that day. The special feature of this garden is that watering a plant also increases the exposure of all its neighbors by the same amount of water given to the watered plant. For example, when plant i receives w_i units of water, plants (i-1) and (i+1) receive w_i units of exposure. Given the predefined water requirements and exposure requirements of each plant, your task is to determine the minimum number of days required to ensure that the daily water requirements of all plants are met. -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the number of plants in the row. The second line contains n integers w_1, w_2, dots, w_n (1 le w_i le 10^4) — the water requirements of the plants. The third line contains n integers e_1, e_2, dots, e_n (0 le e_i le 10^4), where e_i is the exposure requirement for plant i. It is guaranteed that the sum of n across all test cases does not exceed 10^6. -----Output----- For each test case, print one integer — the minimum number of days required to satisfy all plants’ water and exposure requirements. -----Examples----- Input 2 3 4 3 5 2 6 2 4 7 1 9 4 3 8 1 4 Output 3 4 -----Note----- In the first test case, you can water the plants in the order: Plant 2 (exposure sufficient for plants 1 and 3), Plant 1, and Plant 3. This satisfies all requirements in 3 days. In the second test case, you can water the plants in the order: Plant 3 (exposure sufficient for plants 2 and 4), Plant 1, Plant 4, and Plant 2. This satisfies all requirements in 4 days.","solution":"def min_days_to_satisfy_plants(t, cases): results = [] for case in cases: n = case[0] w = case[1] e = case[2] days = 0 for i in range(n): # Each plant needs water at least one day to meet its own requirement. days += 1 results.append(days) return results"},{"question":"Alice is developing an application that tracks the moving average of stock prices. Each time a new price is added, the application should return the average of the last `N` prices. If there are fewer than `N` prices so far, it should return the average of all the prices available. Your task is to implement this functionality. Input: - The first line contains an integer `N`, representing the number of latest prices to consider for the moving average. - The second line contains an integer `M`, representing the number of upcoming price entries. - The next `M` lines contain one integer each, representing the consecutive stock prices. Output: - For each price entry, after adding it to the set of tracked prices, print the current moving average of the last `N` prices (or fewer if there are less than `N` prices so far). Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 1000 - 1 ≤ price ≤ 10000 SAMPLE INPUT 3 5 10 20 30 40 50 SAMPLE OUTPUT 10.0 15.0 20.0 30.0 40.0 Explanation: - After the first price (10), the average is 10.0. - After adding the second price (20), the average of 10 and 20 is 15.0. - After adding the third price (30), the average of 10, 20, and 30 is 20.0. - After adding the fourth price (40), the average of the latest three prices (20, 30, 40) is 30.0. - After adding the fifth price (50), the average of the latest three prices (30, 40, 50) is 40.0.","solution":"def moving_average(N, M, prices): Calculates and prints the moving average of the last N prices :param N: int, the number of latest prices to consider :param M: int, the number of upcoming price entries :param prices: list of int, the consecutive stock prices recent_prices = [] for price in prices: if len(recent_prices) >= N: recent_prices.pop(0) recent_prices.append(price) average = sum(recent_prices) / len(recent_prices) print(f\\"{average:.1f}\\") # Example usage: N = 3 M = 5 prices = [10, 20, 30, 40, 50] moving_average(N, M, prices)"},{"question":"You have been given `n` integers numbered from 1 to `n`. Your task is to answer `Q` queries, where each query is described by two integers `L` and `R`. For each query, you need to find the maximum integer in the subarray starting at `L` and ending at `R`. Input: First line of input contains a single integer `n` denoting the number of integers. The next line contains `n` integers separated by spaces. The next line contains a single integer `Q` denoting the number of queries. Each of the next `Q` lines contains two integers `L` and `R` describing a query. Output: For each query, print the maximum integer in the subarray starting at `L` and ending at `R`. Constraints: 1 <= n <= 10000 1 <= integers[i] <= 100000 1 <= Q <= 5000 1 <= L <= R <= n Sample Input: 5 1 3 2 5 4 3 1 3 2 4 1 5 Sample Output: 3 5 5 Explanation: - For the first query, the subarray is [1, 3, 2], and the maximum is 3. - For the second query, the subarray is [3, 2, 5], and the maximum is 5. - For the third query, the subarray is [1, 3, 2, 5, 4], and the maximum is 5.","solution":"def find_max_in_subarray(arr, queries): Finds the maximum values in subarrays defined by the queries. Parameters: arr (list of int): List of integers. queries (list of tuple): List of queries, each defined by two integers L and R. Returns: list of int: List of maximum values for each query. results = [] for L, R in queries: results.append(max(arr[L-1:R])) return results"},{"question":"You are given an array of N integers. Your task is to find two indices i and j such that 1 ≤ i < j ≤ N and the product of A[i] and A[j] is maximum. If there are multiple pairs with the same maximum product, return the pair with the smallest i. If there are still multiple pairs, return the pair with the smallest j. Constraints * 2 leq N leq 10^5 * -10^5 leq A[i] leq 10^5 Input Input is given from Standard Input in the following format: N A_1 A_2 ldots A_N Output Print two integers i and j such that 1 ≤ i < j ≤ N and the product A[i] * A[j] is maximum. Examples Input 5 1 5 4 3 2 Output 2 3 Input 5 -4 -3 -2 -1 0 Output 1 2","solution":"def max_product_indices(A): Returns the indices (1-based) of two elements i and j such that their product is maximum. N = len(A) if N < 2: return None max_product = float(\'-inf\') best_pair = (0, 0) for i in range(N): for j in range(i + 1, N): product = A[i] * A[j] if product > max_product or (product == max_product and (i < best_pair[0] or (i == best_pair[0] and j < best_pair[1]))): max_product = product best_pair = (i, j) return best_pair[0] + 1, best_pair[1] + 1 # Example usage # N = int(input()) # A = list(map(int, input().split())) # print(*max_product_indices(A))"},{"question":"Given a sequence of integers, we define a \\"peak\\" element as one that is strictly greater than both its neighbors. Your task is to identify all the \\"peak\\" elements from the sequence. Input The first line contains an integer N, the number of elements in the sequence. The second line contains N space-separated integers representing the sequence. The first and last elements in the sequence do not have both neighbors, and can therefore not be considered as peaks. Output Print the peak elements in the order they appear in the sequence, separated by single spaces. Constraints 2 ≤ N ≤ 1000 1 ≤ Sequence[i] ≤ 10^6 SAMPLE INPUT 8 2 3 4 1 5 6 4 7 SAMPLE OUTPUT 4 6","solution":"def find_peak_elements(sequence): This function takes a sequence of integers and returns a list containing the peak elements. A peak element is strictly greater than both its neighbors. n = len(sequence) peaks = [] for i in range(1, n-1): if sequence[i] > sequence[i-1] and sequence[i] > sequence[i+1]: peaks.append(sequence[i]) return peaks # Parsing the input format for sequence from the problem statement def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) sequence = list(map(int, lines[1].split())) return n, sequence # Function to handle the input and output for the problem from a string perspective def main(input_str): n, sequence = parse_input(input_str) peaks = find_peak_elements(sequence) return \' \'.join(map(str, peaks))"},{"question":"Karen has a list of integer pairs representing ranges, and she wants to find all the common ranges of integers that appear in every given range. Each range is inclusive of its start and end values. Write a program to determine the range that appears in all given ranges or state if no such range exists. Constraints: 1 ≤ M ≤ 10^4 1 ≤ L ≤ R ≤ 10^9 Input: The first line contains an integer M, the number of ranges. The following M lines each contain two integers L and R representing the lower and upper bounds of a range. Output: If there is a common range, output the lower and upper bounds of that range (inclusive). If no common range exists, output \\"No common range\\". SAMPLE INPUT 3 1 5 2 6 3 4 SAMPLE OUTPUT 3 4","solution":"def find_common_range(ranges): Find the common range in a list of given ranges. Parameters: ranges (list): A list of tuples where each tuple is (L, R) representing a range. Returns: tuple: The (L, R) bounds of the common range, or None if there is no common range. if not ranges: return \\"No common range\\" common_start = max(range[0] for range in ranges) common_end = min(range[1] for range in ranges) if common_start <= common_end: return common_start, common_end else: return \\"No common range\\" # Example usage: # M = 3 # ranges = [(1, 5), (2, 6), (3, 4)] # print(find_common_range(ranges)) # Output: (3, 4)"},{"question":"In a magical kingdom, there lies a long narrow valley that can be represented as a one-dimensional array of length n. Each position in the array represents a segment of the valley that can either have a treasure, an obstacle, or be empty. A treasure hunt starts at the leftmost segment of the valley and the treasure hunter can only move to the right. The goal is to collect all the treasures in the valley, but the hunter can\'t move past an obstacle. The hunter can only jump over one obstacle during the entire journey, and cannot jump over more than one obstacle consecutively. You need to determine the maximum number of treasures the hunter can collect if he starts from the leftmost segment and is allowed to jump over one obstacle. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the valley. The second line contains a string of length n consisting of characters \'T\', \'O\', or \'.\', where \'T\' indicates a segment containing a treasure, \'O\' indicates a segment with an obstacle, and \'.\' indicates an empty segment. Output Print the maximum number of treasures the hunter can collect. Examples Input 7 T..O.TT Output 3 Input 5 T.T.O Output 2 Input 6 T.O.TO Output 2 Note In the first example, the hunter can move like this: collect the treasure at position 1, jump to position 5, then move to position 6 and 7 to collect total 3 treasures. In the second example, the hunter can collect the treasures at positions 1 and 3, but cannot move past the obstacle at position 5. In the third example, the hunter collects the treasure at position 1, jumps over the obstacle at position 3 to collect the treasure at position 5, ending up with total 2 treasures.","solution":"def max_treasures(n, valley): max_treasures_collected = 0 treasures_before_obstacle = 0 treasures_after_jump = 0 jump_used = False i = 0 while i < n: if valley[i] == \'T\': if jump_used: treasures_after_jump += 1 else: treasures_before_obstacle += 1 elif valley[i] == \'O\': if jump_used: break jump_used = True i += 1 # Skip the obstacle treasures_after_jump = 0 # Reset treasures count after jump continue max_treasures_collected = max(max_treasures_collected, treasures_before_obstacle + treasures_after_jump) i += 1 return max_treasures_collected"},{"question":"You are given a rectangular grid having N rows and M columns. Some of the cells of this grid are blocked, and others are open. You can move from an open cell to any of the four neighboring cells (up, down, left, right) that are also open. Given the grid, determine the number of discrete regions of contiguous open cells. Two cells are considered part of the same region if there is a path of open cells connecting them. ------ Input ------ The first line contains two integers N and M, the number of rows and columns in the grid respectively. The next N lines each contain a string of length M consisting of characters ‘.’ and ‘#’ where ‘.’ represents an open cell and ‘#’ represents a blocked cell. ------ Output ------ Output a single integer representing the number of discrete regions of contiguous open cells. ------ Constraints ------ 1 ≤ N, M ≤ 1000 ------ Sample Input 1 ------ 5 6 ...# #... ...# #..# #... ------ Sample Output 1 ------ 5","solution":"def count_regions(grid): Given a grid of open (.) and blocked (#) cells, determine the number of discrete regions of contiguous open cells. :param grid: List of strings representing the grid (N rows by M columns) :return: Number of discrete regions of contiguous open cells def dfs(x, y): # Depth-first search to mark all cells in the current region stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < N and 0 <= cy < M and not visited[cx][cy] and grid[cx][cy] == \'.\': visited[cx][cy] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: stack.append((cx + dx, cy + dy)) N = len(grid) M = len(grid[0]) visited = [[False] * M for _ in range(N)] region_count = 0 for i in range(N): for j in range(M): if grid[i][j] == \'.\' and not visited[i][j]: dfs(i, j) region_count += 1 return region_count # Example usage if __name__ == \\"__main__\\": grid = [ \\"...#\\", \\"#...\\", \\"...#\\", \\"#..#\\", \\"#...\\" ] print(count_regions(grid)) # Output: 5"},{"question":"# Problem: Fair Candy Distribution Alice and Bob are siblings who love candies. They have a bag of candies with different weights and they want to split them evenly between the two of them, but there\'s a twist: they both want the total weight of the candies they receive to be an even number. Write a program that determines whether it is possible to divide the candies so that: 1. Each gets at least one candy. 2. The total weight each receives is an even number. Given an array of integers `candies` where each integer represents the weight of a candy, determine if it is possible to split the candies according to the above conditions or not. Input - An integer array `candies` of length `n` (1 ≤ n ≤ 50), where each element is an integer representing the weight of a candy (1 ≤ weight ≤ 100). Output - Output \\"YES\\" if it is possible to split the candies as described, otherwise output \\"NO\\". Example **Input:** ``` candies = [1, 3, 5, 7] ``` **Output:** ``` NO ``` **Explanation:** It is impossible to split the candies such that the total weight each receives is an even number. **Input:** ``` candies = [2, 4, 6, 8] ``` **Output:** ``` YES ``` **Explanation:** One way to split the candies is: Alice gets [2, 4] and Bob gets [6, 8]. Both groups have the total weight of 6 and 14 respectively, which are even numbers.","solution":"def fair_candy_distribution(candies): This function determines if it is possible to divide candies such that each gets at least one candy and the total weight each receives is an even number. :param candies: List[int] :return: str (\\"YES\\" or \\"NO\\") even_count = sum(1 for candy in candies if candy % 2 == 0) odd_count = len(candies) - even_count # We can split the candies evenly if there are at least one even number of each if len(candies) < 2: return \\"NO\\" if even_count > 0 and odd_count > 0: return \\"YES\\" if even_count > 1 and odd_count == 0: return \\"YES\\" return \\"NO\\""},{"question":"Nina and Peter are working on a coding challenge that involves palindromic substrings. They are given a string, and their task is to find the longest substring that is a palindrome. Nina believes the best way to solve the problem is using dynamic programming, while Peter insists that a more efficient approach can be found. Help them resolve the debate by writing a program that finds the longest palindromic substring in a given string. Input Format: The first line contains an integer t, denoting the number of test cases. The next t lines contain a string s. Output Format: For each test case, print the longest palindromic substring. If there are multiple results, print any one of them. Constraints: 1 ≤ t ≤ 100 1 ≤ length(s) ≤ 1000 SAMPLE INPUT 2 babad cbbd SAMPLE OUTPUT bab bb Explanation In the first test case, \\"bab\\" is a palindrome and the longest palindromic substring. Note that \\"aba\\" could also be the output as it is of the same length. In the second test case, \\"bb\\" is the longest palindromic substring. Write a program to solve the problem by finding the longest palindromic substring for each test case.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" # initializing a DP table, dp[i][j] will be True if substring s[i:j+1] is a palindrome dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # All substrings of length 1 are palindromic for i in range(n): dp[i][i] = True # Check for sub-strings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return s[start:start + max_length] def find_longest_palindromic_substrings(t, cases): results = [] for s in cases: results.append(longest_palindromic_substring(s)) return results"},{"question":"Given an array of integers and a threshold, you need to count the number of continuous, non-overlapping subarrays of length exactly `m` where the sum of the elements in each subarray does not exceed the given threshold. Example: Input: nums = [4, 5, 6, 1, 2], m = 2, threshold = 6 Output: 1 Explanation: - For subarray [4, 5], the sum is 9 which exceeds the threshold. - For subarray [5, 6], the sum is 11 which exceeds the threshold. - For subarray [6, 1], the sum is 7 which exceeds the threshold. - For subarray [1, 2], the sum is 3 which does not exceed the threshold, so the count is 1. Restrictions: - The array consists of integers. - Length of the given array will be in the range [1, 10000]. - Threshold and array elements are non-negative integers, while m will be an integer between 1 and the length of the array.","solution":"def count_subarrays(nums, m, threshold): Counts the number of continuous, non-overlapping subarrays of length exactly m where the sum of the elements in each subarray does not exceed the given threshold. count = 0 for i in range(len(nums) - m + 1): if sum(nums[i:i + m]) <= threshold: count += 1 return count"},{"question":"Mark loves playing with numbers. Recently, he came across an interesting sequence and wants to share it with you. The sequence is generated using the following rules: 1. Start with an integer 1. 2. If the current number is even, divide it by 2. 3. If the current number is odd, multiply it by 3 and add 1. The sequence ends when the number becomes 1 again. For example, starting with 5, the sequence is 5, 16, 8, 4, 2, 1. Mark is curious about the length of the sequence it takes for different starting numbers to reach 1. Can you help him find out? Write a program that, given an integer n, calculates the length of the sequence that ends with 1. Input The input consists of a single integer n. Output Output a single integer which indicates the length of the sequence starting from n and ending at 1. Constraints 1 ≤ n ≤ 10^6 Example Input: 7 Output: 17 Explanation Starting with 7, the sequence is 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1. This sequence contains 17 numbers. Since the output must be an integer, the program prints 17.","solution":"def sequence_length(n): Calculates the length of the sequence starting from n and ending at 1. The rules for the sequence are: - If the current number is even, divide it by 2. - If the current number is odd, multiply it by 3 and add 1. length = 1 while n != 1: if n % 2 == 0: n //= 2 else: n = 3 * n + 1 length += 1 return length"},{"question":"Karl is an avid video game player, and one of his favorite games involves collecting coins in different stages. Each stage has a certain number of coins that Karl can collect. Karl wants to keep track of the total number of coins he collects in a sequence of stages and also find the highest amount of coins he can collect in a single stage within that sequence. For the ith stage (1 ≤ i ≤ N), Karl has collected some non-negative integer coins C[i]. Now he wants to analyze the total coins collected and the maximum coins in various periods of his gameplay. An arbitrary period, defined by two positive integers L and R, begins at Karl\'s Lth stage and ends at the Rth. ----Input---- The first line contains one integer N — the number of stages Karl has played. The second line contains N integers — list C of Karl\'s collected coins. The third line contains one integer M — the number of periods Karl is interested in analyzing. Each of the following M lines contains two integers L and R describing each period. ----Output---- For each query, output two integers — the total coins collected and the maximum coins in a single stage for the corresponding period. ----Constraints---- - 1 ≤ N, M ≤ 5*10^4 - 0 ≤ C[i] ≤ 10^6 ----Subtasks---- - Subtask 1 (20 points): 1 ≤ N, M ≤ 200, time limit = 2 sec - Subtask 2 (30 points): 1 ≤ N, M ≤ 10 000, time limit = 2 sec - Subtask 3 (25 points): 0 ≤ C[i] ≤ 100, time limit = 5 sec - Subtask 4 (25 points): no additional constraints, time limit = 5 sec ----Example---- Input: 6 10 20 30 40 50 60 3 1 3 2 5 3 6 Output: 60 30 140 50 180 60 Explanation: The first query: stages 1 to 3 have coin counts (10, 20, 30), total coins collected = 10 + 20 + 30 = 60, maximum coins in a single stage = 30. The second query: stages 2 to 5 have coin counts (20, 30, 40, 50), total coins collected = 20 + 30 + 40 + 50 = 140, maximum coins in a single stage = 50. The third query: stages 3 to 6 have coin counts (30, 40, 50, 60), total coins collected = 30 + 40 + 50 + 60 = 180, maximum coins in a single stage = 60.","solution":"def analyze_gameplay(N, C, periods): Analyzes the total coins collected and the maximum coins in a single stage for given periods in Karl\'s gameplay. :param N: Integer, number of stages Karl has played :param C: List of integers, coins collected at each stage :param periods: List of tuples, each tuple contains integers L and R representing the periods to analyze :return: List of tuples, each tuple contains total coins collected and the maximum coins in a single stage for the corresponding period results = [] for L, R in periods: total_coins = sum(C[L-1:R]) max_coins = max(C[L-1:R]) results.append((total_coins, max_coins)) return results"},{"question":"Given an array of positive integers `arr[]`, modify the array in such a way that after modification, each element becomes a product of all other elements in the array except itself. You are not allowed to use the division operation. Implement a function `modifiedArray()` that completes this operation and returns the modified array. Example 1: Input: arr[] = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: Product of all elements in the array except `arr[0]` is 2*3*4 = 24 Product of all elements in the array except `arr[1]` is 1*3*4 = 12 Product of all elements in the array except `arr[2]` is 1*2*4 = 8 Product of all elements in the array except `arr[3]` is 1*2*3 = 6 Example 2: Input: arr[] = [2, 3, 4, 5] Output: [60, 40, 30, 24] Explanation: Product of all elements in the array except `arr[0]` is 3*4*5 = 60 Product of all elements in the array except `arr[1]` is 2*4*5 = 40 Product of all elements in the array except `arr[2]` is 2*3*5 = 30 Product of all elements in the array except `arr[3]` is 2*3*4 = 24 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `modifiedArray()` which takes the array `arr` as input and returns the modified array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^5","solution":"def modifiedArray(arr): n = len(arr) # Initialize two arrays to keep track of prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i-1] * arr[i-1] # Calculate suffix products for i in range(n-2, -1, -1): suffix_products[i] = suffix_products[i+1] * arr[i+1] # Multiply prefix and suffix products to get the result result = [1] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Given a string of at least 1 and at most 100 characters (uppercase English letters), output the string with an alternating underline and an overline pattern. Each character is underlined if it\'s in an even position (0-based index) and overlined if it\'s in an odd position. Both patterns extend horizontally by exactly one line for readability. For underlined characters, represent the underline with a dash directly below the character. For overlined characters, represent the overline with a dash directly above the character. Assume the following characters for representation: - Character with underline: ``` X - ``` - Character with overline: ``` - X ``` ---Input--- The first and only line of input will contain at least 1 and at most 100 uppercase English letters. ---Output--- Output the word written using alternating underline and overline on 2 lines. ---Examples--- Sample Input 1: CAT Sample Output 1: C A T - - - Sample Input 2: HELLO Sample Output 2: H - L O - E - L -","solution":"def alternating_underline_overline(s): Takes a string of uppercase English letters and returns it in an alternating underline and overline pattern. n = len(s) underline_line = [] overline_line = [] for i in range(n): if i % 2 == 0: underline_line.append(s[i]) overline_line.append(\'-\') else: underline_line.append(\'-\') overline_line.append(s[i]) return f\\"{\'\'.join(underline_line)}n{\'\'.join(overline_line)}\\""},{"question":"You are given an array of integers A of length N. Your task is to find and output another array B of the same length such that for each element in B: B[i] = A[i] * C - 1 where C is the product of all the non-zero elements of A. If any element of A is zero, C should be considered as 1 for that element. In case all elements in A are zero, print an array of all -1s. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N — the size of the array A. - The second line contains N space-separated integers representing the elements of the array A. ------ Output Format ------ For each test case, output on a new line, N space-separated integers denoting the required array B. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^{5} |A[i]| ≤ 10^{3} The sum of N over all test cases will not exceed 10^{6}. ----- Sample Input 1 ------ 3 4 2 3 0 5 3 0 0 0 5 -1 4 0 -3 2 ----- Sample Output 1 ------ 3 5 -1 9 -1 -1 -1 -1 7 -1 -7 1 ----- Explanation 1 ------ Test case 1: Array A = [2, 3, 0, 5] Product C of all non-zero elements = 2 * 3 * 5 = 30 B[0] = 2 * 30 - 1 = 59 B[1] = 3 * 30 - 1 = 89 B[2] = 0 * 1 - 1 = -1 B[3] = 5 * 30 - 1 = 149 Resulting array B = [59, 89, -1, 149] Test case 2: Array A = [0, 0, 0] All elements are zero, so print array of all -1s: [-1, -1, -1] Test case 3: Array A = [-1, 4, 0, -3, 2] Product C of all non-zero elements = -1 * 4 * -3 * 2 = 24 B[0] = -1 * 24 - 1 = -25 B[1] = 4 * 24 - 1 = 95 B[2] = 0 * 1 - 1 = -1 B[3] = -3 * 24 - 1 = -73 B[4] = 2 * 24 - 1 = 47 Resulting array B = [-25, 95, -1, -73, 47]","solution":"def compute_b_array(test_cases): results = [] for case in test_cases: N, A = case C = 1 zero_count = 0 for num in A: if num != 0: C *= num else: zero_count += 1 if zero_count == len(A): results.append([-1] * N) else: B = [] for num in A: if num == 0: B.append(-1) else: B.append(num * C - 1) results.append(B) return results"},{"question":"A financial portfolio is a collection of investments held by an institution or a private individual. It can include stocks, bonds, commodities, currencies, and other financial instruments. In this problem, you will analyze and evaluate the performance of a financial portfolio based on a specified set of criteria. The financial portfolio consists of multiple assets, each with a given return rate over a period. The return rate can be positive (profit) or negative (loss). The portfolio is evaluated against a benchmark return rate, and the results should indicate whether the portfolio outperforms, underperforms, or matches the benchmark. Input The input consists of multiple datasets. The first line of each dataset contains a single integer `n` (1 ≤ n ≤ 100), representing the number of assets in the portfolio. This is followed by `n` lines, each containing the name of the asset (composed of uppercase and lowercase letters, and not exceeding 20 characters) and its return rate (a floating-point number, which can be positive or negative, with up to 2 decimal places). The last line of each dataset contains the benchmark return rate (a floating-point number, which can also be positive or negative, with up to 2 decimal places). The end of the input is indicated by a line containing a single zero. Output For each dataset, output a single line indicating whether the portfolio \\"outperforms\\", \\"underperforms\\", or \\"matches\\" the benchmark return rate. A portfolio matches the benchmark if its average return rate is exactly equal to the benchmark return rate (considering floating-point precision up to 2 decimal places). Example Input 3 StockA 5.00 StockB 7.50 StockC 3.00 5.00 2 BondA 2.00 BondB -1.50 0.50 4 CommodityA -3.00 CommodityB -2.80 CommodityC -2.90 CommodityD -3.10 -2.95 0 Output outperforms underperforms matches","solution":"def evaluate_portfolio(portfolios): results = [] for portfolio in portfolios: assets = portfolio[\'assets\'] benchmark = portfolio[\'benchmark\'] total_return = sum(rate for name, rate in assets) avg_return = total_return / len(assets) if round(avg_return, 2) > round(benchmark, 2): results.append(\\"outperforms\\") elif round(avg_return, 2) < round(benchmark, 2): results.append(\\"underperforms\\") else: results.append(\\"matches\\") return results"},{"question":"Luke loves to play a card game called DeckMaster. In DeckMaster, each card has a value and a suit. There are four suits: Hearts, Diamonds, Clubs, and Spades. Luke has a deck of n cards and he can perform the following operations: * add card vi si — Add a card with value vi and suit si to the deck. If the card already exists in the deck, do nothing. * remove vi si — Remove a card with value vi and suit si from the deck if it is present. * query highest — Output the highest value card from the deck. If there are multiple cards with the same highest value, output the one that appears first alphabetically by suit. Output \\"Empty\\" if the deck is empty. * query lowest — Output the lowest value card from the deck. If there are multiple cards with the same lowest value, output the one that appears first alphabetically by suit. Output \\"Empty\\" if the deck is empty. Initially, Luke\'s deck is empty. You are to process a series of operations and provide the required output for each query operation. Input The first line consists of a single integer q (1 ≤ q ≤ 105) — the number of operations. The following q lines describe the operations. The i-th line consists of the operation that Luke has done on the i-th day. Each operation line begins with the operation name, followed by the necessary parameters depending on the operation type. The card values vi are integers (1 ≤ vi ≤ 109) and suits si are one of the four strings: \\"Hearts\\", \\"Diamonds\\", \\"Clubs\\", \\"Spades\\". Output For each \\"query highest\\" or \\"query lowest\\" operation, output the required result. Example Input 8 add 10 Hearts add 5 Spades add 7 Diamonds query highest query lowest remove 10 Hearts query highest query lowest Output 10 Hearts 5 Spades 7 Diamonds 5 Spades","solution":"class DeckMaster: def __init__(self): self.deck = set() def add(self, value, suit): self.deck.add((value, suit)) def remove(self, value, suit): self.deck.discard((value, suit)) def query_highest(self): if not self.deck: return \\"Empty\\" highest_card = max(self.deck, key=lambda x: (x[0], -ord(x[1][0]))) return f\\"{highest_card[0]} {highest_card[1]}\\" def query_lowest(self): if not self.deck: return \\"Empty\\" lowest_card = min(self.deck, key=lambda x: (x[0], ord(x[1][0]))) return f\\"{lowest_card[0]} {lowest_card[1]}\\" def process_operations(operations): dm = DeckMaster() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": dm.add(int(parts[1]), parts[2]) elif parts[0] == \\"remove\\": dm.remove(int(parts[1]), parts[2]) elif parts[0] == \\"query\\": if parts[1] == \\"highest\\": results.append(dm.query_highest()) elif parts[1] == \\"lowest\\": results.append(dm.query_lowest()) return results"},{"question":"Up to six faces of a custom die are numbered, and the die can only roll these values. Your task is to determine if it is possible to construct a specific sum using a single roll from multiple of these custom dice. Input: - The first line contains a list of integers representing the faces of all available custom dice. Each die face value is an integer (1 ≤ value ≤ 1000). - The second line contains a single integer sum that you need to check if it can be obtained using a combination of rolls from multiple custom dice (1 ≤ sum ≤ 10000). Output: - Output \\"YES\\" if the sum can be constructed using a single roll from several of these dice, otherwise output \\"NO\\". Example: Input: ``` [1, 2, 3, 5, 7] 12 ``` Output: ``` YES ``` Explanation: - You can construct 12 by using 5+7 or 3+3+3+3 or other combinations considering each face value can be used multiple times. Note: - Each die can be rolled any number of times. - You can use one face multiple times from one die or use different faces from multiple dice. - Your solution should be efficient to handle large inputs within a reasonable time frame.","solution":"def can_construct_sum(dice_faces, target_sum): - dice_faces: list of integers representing the faces of available custom dice. - target_sum: integer sum that we want to check if it can be obtained. Returns \\"YES\\" if the target sum can be constructed using any combination of the dice faces, \\"NO\\" otherwise. # Create a dp array to keep track of sums we can form with the custom dice faces dp = [False] * (target_sum + 1) dp[0] = True for face in dice_faces: for j in range(face, target_sum + 1): if dp[j - face]: dp[j] = True return \\"YES\\" if dp[target_sum] else \\"NO\\""},{"question":"Sort strings in a given list based on their length and return the sorted list. Python: sort_by_length([\'apple\', \'banana\', \'kiwi\', \'fig\', \'strawberry\', \'date\']) = [\'fig\', \'kiwi\', \'date\', \'apple\', \'banana\', \'strawberry\'] Ensure to handle strings of different lengths correctly.","solution":"def sort_by_length(strings): Sorts the strings in the list based on their length and returns the sorted list. Args: strings (list of str): The list of strings to be sorted. Returns: list of str: The sorted list of strings based on their lengths. return sorted(strings, key=len)"},{"question":"Sam loves prime numbers and is working on a problem that involves finding prime factors. Given an integer `M`, Sam needs to determine the largest prime factor of `M`. Your task is to write a function that calculates and prints the largest prime factor of `M`. Note: Prime factors of a number are the prime numbers that divide the number exactly without leaving a remainder. INPUT The first and only line of the input contains an integer M. OUTPUT The output should be a single integer, the largest prime factor of the given number M. CONSTRAINTS 2 ≤ M ≤ 10^12 SAMPLE INPUT 13195 SAMPLE OUTPUT 29","solution":"def largest_prime_factor(M): Returns the largest prime factor of the given integer M. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True max_prime = -1 # Removing all 2\'s from M while M % 2 == 0: max_prime = 2 M //= 2 # M must be odd at this point so we can check for odd factors factor = 3 while factor * factor <= M: while M % factor == 0: max_prime = factor M //= factor factor += 2 # This condition is to check if M is a prime number greater than 2 if M > 2: max_prime = M return max_prime"},{"question":"Alice is organizing a music festival with N stages, numbered from 1 to N, placed in a line. Each stage has an artist performing, and the performance type can be categorized into one of M genres, numbered from 1 to M. Alice wants to allocate security guards such that they can watch over a contiguous segment of stages, and she must ensure that the segment watched by the guards contains performances from every genre at least once. Given the lineup of the stages and the genre of each performance, find the minimum length of such a contiguous segment that covers all genres. If it\'s impossible to find such a segment, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M. - The second line contains N space-separated integers G_1, G_2, ldots, G_N representing the genres of performances on the stages. -----Output----- For each test case, print a single line containing one integer ― the minimum length of a contiguous segment that covers all genres, or -1 if no such segment exists. -----Constraints----- - 1 le T le 1,000 - 1 le N le 100,000 - 1 le M le 100 - 1 le G_i le M for each valid i - the sum of N over all test cases does not exceed 1,000,000 -----Subtasks----- Subtask #1 (50 points): - N le 1,000 - M le 10 - the sum of N over all test cases does not exceed 10,000 Subtask #2 (50 points): original constraints -----Example Input----- 2 8 3 1 2 2 3 1 1 3 2 5 4 1 2 1 2 1 -----Example Output----- 3 -1","solution":"from collections import defaultdict def min_length_of_segment_covering_all_genres(T, testcases): results = [] for test in testcases: N, M, genres = test genre_count = defaultdict(int) unique_genres = 0 # To keep track of how many unique genres we currently have in the window min_length = float(\'inf\') left = 0 for right in range(N): if genre_count[genres[right]] == 0: unique_genres += 1 genre_count[genres[right]] += 1 while unique_genres == M: min_length = min(min_length, right - left + 1) genre_count[genres[left]] -= 1 if genre_count[genres[left]] == 0: unique_genres -= 1 left += 1 results.append(min_length if min_length != float(\'inf\') else -1) return results # Example of how to use the function: testcases = [ (8, 3, [1, 2, 2, 3, 1, 1, 3, 2]), (5, 4, [1, 2, 1, 2, 1]) ] print(min_length_of_segment_covering_all_genres(len(testcases), testcases))"},{"question":"Given an array of integers, your task is to find the length of the longest subarray that forms a contiguous sequence of integers when sorted. Example 1: Input: [10, 12, 11] Output: 3 Explanation: The whole array [10, 12, 11] forms a contiguous sequence of integers when sorted ([10, 11, 12]). Example 2: Input: [14, 12, 11, 20] Output: 2 Explanation: The subarray [12, 11] forms a contiguous sequence of integers when sorted ([11, 12]). Note: The input array length won\'t exceed 1000.","solution":"def length_of_longest_contiguous_subarray(arr): Returns the length of the longest subarray that forms a contiguous sequence of integers when sorted. n = len(arr) max_len = 1 for i in range(n): min_val = arr[i] max_val = arr[i] for j in range(i + 1, n): min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) if max_val - min_val == j - i: max_len = max(max_len, j - i + 1) return max_len"},{"question":"A new coding assessment question matching the provided style, complexity, and scope: There is a grid with `n` rows and `m` columns. You are given the current state of the grid where each cell can either be empty (denoted by 0) or contain an obstacle (denoted by 1). You need to find the number of distinct paths from the top-left corner of the grid to the bottom-right corner, such that you can only move down or right at any point in time, and cannot move through a cell containing an obstacle. Example 1: Input: n = 3, m = 3 grid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: There are two paths from top-left to bottom-right: (1) Right -> Right -> Down -> Down (2) Down -> Down -> Right -> Right Example 2: Input: n = 2, m = 2 grid = [[0,1],[0,0]] Output: 1 Explanation: There is only one path from top-left to bottom-right: (1) Down -> Right Your Task: You do not need to read input or print anything. Your task is to implement the function `uniquePathsWithObstacles()` which takes the grid, integer n, and integer m as input and returns the number of distinct paths from the top-left corner to the bottom-right corner. Expected Time Complexity: O(n*m) Expected Space Complexity: O(n*m) Constraint: 1 <= n, m <= 100 grid[i][j] is 0 or 1","solution":"def uniquePathsWithObstacles(grid, n, m): Function to find the number of unique paths from top-left to bottom-right avoiding obstacles on the grid. Parameters: grid (List[List[int]]): 2D list representing the grid with obstacles n (int): number of rows m (int): number of columns Returns: int: number of unique paths if not grid or grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Starting point for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"John is learning about numbers and their properties. He is particularly interested in numbers that are perfect squares. A number is a perfect square if it is the square of an integer. For example, 1, 4, 9, and 16 are perfect squares because they are 1^2, 2^2, 3^2, and 4^2 respectively. Given a list of non-negative integers, help John determine the number of perfect squares in the list. Input The first line contains an integer T, the number of test cases. The following lines contain T test cases, each containing a sequence of space-separated non-negative integers. Output For each test case, print the number of perfect squares in the sequence, each on a new line. Constraints 1 ≤ T ≤ 10 1 ≤ |sequence| ≤ 50, where |sequence| is the length of the sequence. Example Input: 3 0 1 2 3 4 5 6 9 10 11 15 16 20 25 2 3 5 7 8 10 Output: 3 3 0 Explanation In the first test case, the perfect squares are 0, 1, and 4. In the second test case, the perfect squares are 9, 16, and 25. In the third test case, there are no perfect squares.","solution":"import math def count_perfect_squares(test_cases): results = [] for sequence in test_cases: count = 0 for number in sequence: sqrt = int(math.sqrt(number)) if sqrt * sqrt == number: count += 1 results.append(count) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] for i in range(1, T + 1): test_cases.append(list(map(int, lines[i].split()))) return test_cases"},{"question":"Emma works for a delivery company that uses a system with directional transporters to move parcels from one location to another. Each transporter can either send a parcel from location i to location j or vice versa. Due to the nature of the delivery system, Emma needs to ensure that every parcel can be delivered to its destination by checking if all locations are reachable from any starting point. Emma needs your help to determine if all locations are strongly connected. A system is strongly connected if there is a path from any location to any other location, using the available transporters. Given the number of locations and the list of directional transporters between them, you should determine if the system is strongly connected. # Input - The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 100000) — the number of locations and the number of directional transporters, respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — indicating there is a transporter from location `u` to location `v`. # Output Return \\"YES\\" if the system of locations and transporters is strongly connected, otherwise return \\"NO\\". # Examples Example 1: # Input: ``` 4 5 1 2 2 3 3 4 4 2 4 1 ``` # Output: ``` YES ``` Example 2: # Input: ``` 4 3 1 2 2 3 3 1 ``` # Output: ``` NO ``` # Explanation In Example 1, there exists a path between any pair of locations, making the system strongly connected. In Example 2, for instance, there is no way to reach location 4 from locations 1, 2, or 3, hence the system is not strongly connected.","solution":"from collections import defaultdict, deque def is_strongly_connected(n, m, transporters): def bfs(start, graph): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(graph[node]) return visited if n == 1: return \\"YES\\" # Build the graph and its reverse graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in transporters: graph[u].append(v) reverse_graph[v].append(u) # Perform BFS from first node using the graph and its reverse visited_from_start = bfs(1, graph) visited_reverse_from_start = bfs(1, reverse_graph) # Verify if all nodes are visited in both traversals if len(visited_from_start) == n and len(visited_reverse_from_start) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"# Task A car rental service wants to implement a feature that will suggest optimal rental durations for customers based on their past rental patterns. The objective is to develop a recommendation algorithm that suggests the three most frequent rental durations from the past data. You are provided with a list of rental durations (in days), and you need to determine the top three most common durations. If there is a tie, choose the smaller duration. You need to write a function `top_three_rentals(rentals)` that receives a list of integers representing rental durations and returns a list of the top three most frequent rental durations. If there are fewer than three unique durations, the function should return as many as are available, sorted in descending order of frequency and ascending order of duration in case of ties. # Example ```python top_three_rentals([3, 3, 3, 1, 2, 2, 4]) == [3, 2, 1] top_three_rentals([5, 5, 5, 5, 2, 2, 2, 3, 3, 1]) == [5, 2, 3] top_three_rentals([1, 5, 1, 5, 1, 5]) == [1, 5] ``` # Input - `rentals`: a list of integers representing rental durations (1 ≤ len(rentals) ≤ 1000, 1 ≤ rental duration ≤ 365). # Output A list of up to three integers representing the most common rental durations in descending order of frequency.","solution":"def top_three_rentals(rentals): Returns the three most frequent rental durations from the given list. Ties are resolved by smaller durations having higher priority. from collections import Counter # Count the frequency of each rental duration rental_count = Counter(rentals) # Sort durations based on frequency (descending) and then duration (ascending) sorted_rentals = sorted(rental_count.items(), key=lambda item: (-item[1], item[0])) # Extract the top three durations top_durations = [item[0] for item in sorted_rentals[:3]] return top_durations"},{"question":"Kira loves strings and sequences. She is particularly interested in palindromes, which are strings that read the same backward as forward. Recently, she came across a problem where she needs to find out the number of different palindromic substrings in a given string, including single-character palindromes. Help her with this task. A substring is defined as a contiguous sequence of characters within a string. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the string. The second line contains a string of length n consisting of lowercase English letters. -----Output----- Print a single integer — the number of different palindromic substrings in the given string. -----Examples----- Input 5 ababa Output 9 Input 4 aaaa Output 10 -----Note----- In the first sample, the palindromic substrings are: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", \\"ababa\\". Note that each individual \\"a\\" and \\"b\\" is considered separately as a palindromic substring. In the second sample, the palindromic substrings are: \\"a\\", \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aaa\\", \\"aaa\\", \\"aaaa\\". Each occurrence of \\"a\\" and \\"aa\\" is counted separately.","solution":"def count_palindromic_substrings(s): Returns the number of different palindromic substrings in the given string. n = len(s) count = 0 # Function to expand around center and count palindromes def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 # Count odd length palindromes (center is at each character) for i in range(n): expand_around_center(i, i) # Count even length palindromes (center is between each pair of characters) for i in range(n - 1): expand_around_center(i, i + 1) return count"},{"question":"Write a program to find the number of distinct ways to climb a staircase with `n` steps, where at each step you can either climb 1, 2, or 3 steps. # Input: The input consists of multiple datasets. Each dataset contains a single integer `n` on one line, representing the total number of steps in the staircase. The value of `n` will be between 1 and 50 (inclusive). The end of the input is indicated by a line containing a single zero. # Output: For each dataset, output a single integer on a new line representing the number of distinct ways to climb the staircase. # Example: Input: ``` 5 4 7 0 ``` Output: ``` 13 7 44 ```","solution":"def count_ways_to_climb(n): Calculate the number of distinct ways to climb a staircase with `n` steps, where at each step you can either climb 1, 2, or 3 steps. if n == 0: return 0 elif n == 1: return 1 elif n == 2: return 2 elif n == 3: return 4 ways = [0] * (n+1) ways[0], ways[1], ways[2], ways[3] = 1, 1, 2, 4 for i in range(4, n+1): ways[i] = ways[i-1] + ways[i-2] + ways[i-3] return ways[n] def process_input(input_data): result = [] data = input_data.strip().split() for num in data: n = int(num) if n == 0: break result.append(count_ways_to_climb(n)) return result"},{"question":"Given a string S consisting of lowercase alphabets. The task is to count the number of vowels and consonants in the string. Example: Input: S = \\"hello\\" Output: 2 3 Explanation: There are 2 vowels (e, o) and 3 consonants (h, l, l) Your Task: Your task is to complete the function countVowelsConsonants() which should print number of vowels and number of consonants in a single line separated by space. Print a newline at the end of output. Constraints: 1 <= |S| <= 10^6 S consists only of lowercase alphabets.","solution":"def countVowelsConsonants(S): Given a string S consisting of lowercase alphabets, this function prints the count of vowels and consonants separated by a space. vowels = \'aeiou\' vowel_count = 0 consonant_count = 0 for char in S: if char in vowels: vowel_count += 1 else: consonant_count += 1 print(f\\"{vowel_count} {consonant_count}\\")"},{"question":"Kevin loves playing a game where he places a number of stones in a line and can remove exactly one stone at a time from either end of the line. He continues to remove stones until no stones are left. Kevin finds the game more interesting when he records the sequence of removed stones. Write a program to generate all possible sequences of the removed stones for a given initial number of stones. The sequences should list the stones in the order they were removed, and each sequence should be represented as a list of integers. **Input** A sequence of multiple datasets is given as input. For each dataset, an integer n (1 ≤ n ≤ 10) representing the number of stones is given on one line. The end of the input is indicated by a single line of zeros. **Output** For each dataset, output all possible sequences in lexicographical order. Each sequence should be on a new line. After printing all sequences for a dataset, print a blank line to separate the sequences of different datasets. **Example** Input 1 2 0 Output 1 1 2 2 1","solution":"from itertools import permutations def generate_sequences(n): Generates all possible sequences of removed stones for a given number of stones n. stones = list(range(1, n + 1)) perms = permutations(stones) unique_perms = sorted(set(perms)) return unique_perms def process_input(inputs): Processes the input list and prints the sequences for each number of stones. results = [] for n in inputs: if n == 0: break sequences = generate_sequences(n) for seq in sequences: results.append(\' \'.join(map(str, seq))) results.append(\'\') return results def main(input_data): inputs = list(map(int, input_data.split())) results = process_input(inputs) return \'n\'.join(results).strip()"},{"question":"You are given a string S consisting of lowercase Latin letters. You have to determine the minimum number of characters you need to remove from the string so that no two adjacent characters are the same. Input The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Next t lines each contain a string S (1 ≤ |S| ≤ 100) — the input strings for each test case. Output For each test case, print the minimum number of removals needed for the corresponding string on a new line. Examples Input 3 aab aaa abcde Output 1 2 0 Explanation In the first example, we can remove one \'a\' from \\"aab\\" to make it \\"ab\\" which satisfies the condition. In the second example, we can remove two \'a\'s from \\"aaa\\" to make it \\"a\\" which satisfies the condition. In the third example, \\"abcde\\" already has no two adjacent characters the same, so no removals are needed.","solution":"def min_removals_to_no_adjacent(s): Returns the minimum number of characters to remove for no two adjacent characters to be the same. count = 0 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 return count def process_test_cases(test_cases): results = [] for s in test_cases: result = min_removals_to_no_adjacent(s) results.append(result) return results"},{"question":"Given a grid of size N times M, a robot is positioned at the top-left corner (1, 1). The robot can move down, right, or diagonally down-right. Your task is to count the number of distinct paths that the robot can take to reach the bottom-right corner (N, M). Since the number of paths can be very large, you need to return the result modulo 1,000,000,007 (10^9 + 7). ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M. ------ Output ------ For each test case, print a single line containing the number of distinct paths modulo 1,000,000,007. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1000 ------ Sample Input 1 ------ 2 2 2 3 3 ------ Sample Output 1 ------ 3 13 ------ Explanation ------ In the first test case, the grid looks like this: ``` (1,1) → (1,2) ↓ ↘ (2,1) → (2,2) ``` The robot can take 3 distinct paths from (1,1) to (2,2): 1. Right, Down 2. Down, Right 3. Diagonal In the second test case, the grid looks like this: ``` (1,1) → (1,2) → (1,3) ↓ ↘ ↓ (2,1) → (2,2) → (2,3) ↓ ↘ ↓ (3,1) → (3,2) → (3,3) ``` There are 13 distinct paths from (1,1) to (3,3).","solution":"MOD = 1000000007 def count_paths(N, M): # Create a 2D dp array dp = [[0 for _ in range(M+1)] for _ in range(N+1)] # Starting point dp[1][1] = 1 # Fill the dp array for i in range(1, N + 1): for j in range(1, M + 1): if i == 1 and j == 1: continue dp[i][j] = (dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]) % MOD return dp[N][M] def robot_paths(test_cases): result = [] for N, M in test_cases: result.append(count_paths(N, M)) return result"},{"question":"Given an array of N integers, an array is said to be balanced if and only if the sum of the element values in its left half is equal to the sum in its right half. If N is odd, the middle element belongs to both halves. You are given a positive integer N. Construct an array A of length N that satisfies the following conditions: 1. The array is balanced. 2. All elements in the array A are distinct integers between 1 and 2N (both inclusive). If there are multiple such arrays, you can print any of them. Ensure that for all inputs satisfying the given constraints, there is always a valid solution. ------ Input Format ------ - The first line contains an integer T, the number of testcases. The description of the T testcases follow. - Each testcase consists of a single line with an integer N. ------ Output Format ------ - For each testcase, print N space-separated integers, the elements of the constructed array. - If there are multiple outputs, you can print any of them. - The output will be considered correct only if the array is balanced and all elements are distinct integers between 1 and 2N. ------ Constraints ------ 1 ≤ T ≤ 10^4 2 ≤ N ≤ 10^5 The sum of all N over all testcases does not exceed 3 cdot 10^5. ------ Sample Input 1 ------ 3 4 5 6 ------ Sample Output 1 ------ 2 3 1 4 1 2 3 5 4 3 6 1 2 4 5 ------ Explanation 1 ------ Test Case 1: N = 4. The array {2, 3, 1, 4} is balanced because 2 + 3 = 5 and 1 + 4 = 5. Test Case 2: N = 5. The array {1, 2, 3, 5, 4} is balanced because 1 + 2 + 3 = 6 and 5 + 4 = 9, including the middle element as part of both halves. Test Case 3: N = 6. The array {3, 6, 1, 2, 4, 5} is balanced because 3 + 6 + 1 = 10 and 2 + 4 + 5 = 11, ensuring an equal distribution.","solution":"def construct_balanced_array(N): Construct an array of length N that is balanced and contains distinct integers between 1 and 2N. if N % 2 == 0: # For even N, we can use the first N/2 even numbers and the first N/2 odd numbers half = N // 2 left_half = [i for i in range(1, 2 * N, 2)][:half] right_half = [i for i in range(2, 2 * N + 1, 2)][:half] else: # For odd N, we include the middle element in both halves half = N // 2 left_half = [i for i in range(1, 2 * N, 2)][:half + 1] right_half = [i for i in range(2, 2 * N + 1, 2)][:half] return left_half + right_half def solve(T, cases): results = [] for N in cases: result = construct_balanced_array(N) results.append(result) return results"},{"question":"Given a number N. The task is to check if it is an Armstrong number. An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. Example 1: Input: N = 153 Output: 1 Explanation: 153 is an Armstrong number since 1^3 + 5^3 + 3^3 = 153. Example 2: Input: N = 123 Output: 0 Explanation: 123 is not an Armstrong number since 1^3 + 2^3 + 3^3 = 36, which is not equal to 123. Your Task: The task is to complete the function isArmstrong() that takes n as a parameter and returns 1 if the number is an Armstrong number else returns 0. Expected Time Complexity: O(1). Expected Auxiliary Space: O(1). Constraints: 100 <= N <= 999","solution":"def isArmstrong(N): Returns 1 if the given number N is an Armstrong number, otherwise returns 0. digits = [int(d) for d in str(N)] sum_of_cubes = sum(d ** 3 for d in digits) return 1 if sum_of_cubes == N else 0"},{"question":"Given two arrays of integers `arr1` and `arr2`, determine if `arr1` is a subarray of `arr2` or not. A `subarray` is a contiguous portion of an array. Therefore, for `arr1` to be a subarray of `arr2`, all elements of `arr1` must appear in `arr2` consecutively and in the same order. For example, [2, 3] is a subarray of [1, 2, 3, 4], but [2, 4] is not. -----Input----- Each test case will consist of exactly two lines. The first line will contain the first array of integers `arr1`, with elements separated by spaces. The length of `arr1` will be between 1 and 100 inclusive. The second line will contain the second array of integers `arr2`, with elements separated by spaces. The length of `arr2` will be between 1 and 10,000 inclusive. -----Output----- Output a single string: \\"Yes\\" if `arr1` is a subarray of `arr2`, and \\"No\\" otherwise. -----Examples----- Sample Input 1: 2 3 1 2 3 4 Sample Output 1: Yes Sample Input 2: 2 4 1 2 3 4 Sample Output 2: No Sample Input 3: 3 4 1 2 3 4 5 6 Sample Output 3: Yes","solution":"def is_subarray(arr1, arr2): Determine if arr1 is a subarray of arr2. Args: arr1: List[int] - List of integers (subarray). arr2: List[int] - List of integers (main array). Returns: str: \\"Yes\\" if arr1 is a subarray of arr2, otherwise \\"No\\". n1 = len(arr1) n2 = len(arr2) if n1 > n2: return \\"No\\" for i in range(n2 - n1 + 1): if arr2[i:i+n1] == arr1: return \\"Yes\\" return \\"No\\""},{"question":"In a competitive programming problem, you are given a list of integers and are required to determine if it is possible to rearrange the list such that every adjacent pair of integers has a greatest common divisor greater than 1. If it is possible, print \\"YES\\", otherwise print \\"NO\\". -----Constraints----- - All values in input are integers. - 2 leq N leq 10^5 - 1 leq A_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 dots A_N -----Output----- Print \\"YES\\" if it is possible to rearrange the list to meet the condition, otherwise print \\"NO\\". -----Sample Input----- 4 4 6 3 9 -----Sample Output----- YES Explanation: One possible valid rearrangement is [4, 6, 9, 3]. Here, gcd(4, 6) > 1, gcd(6, 9) > 1, and gcd(9, 3) > 1.","solution":"import math from collections import Counter def can_rearrange_with_gcd_condition(n, arr): def sieve(n): primes = [] is_prime = [True] * (n+1) for p in range(2, n+1): if is_prime[p]: primes.append(p) for i in range(p * p, n+1, p): is_prime[i] = False return primes def get_divisors(x): divisors = set() for prime in primes: if prime * prime > x: break if x % prime == 0: while x % prime == 0: x //= prime divisors.add(prime) if x > 1: divisors.add(x) return divisors primes = sieve(int(math.sqrt(max(arr))) + 1) prime_count = Counter() for num in arr: divisors = get_divisors(num) for divisor in divisors: prime_count[divisor] += 1 for count in prime_count.values(): if count >= 2: return \\"YES\\" return \\"NO\\""},{"question":"Implement a function to merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists. Example 1: Input: List1: 1->2->4 List2: 1->3->4 Output: 1->1->2->3->4->4 Explanation: Merging two sorted lists produces a combined sorted list, where elements are arranged in ascending order. Example 2: Input: List1: 2->6->8 List2: 1->3->7 Output: 1->2->3->6->7->8 Explanation: Merging two sorted linked lists as per ascending order results in the output list. Your Task: Since this is a function problem, you don\'t need to take any input. Just complete the provided function `mergeTwoLists(l1, l2)`. The function should merge the two sorted linked lists and return the head of the new sorted linked list. Expected Time Complexity: O(N + M), where N and M are the number of nodes in the two linked lists. Expected Auxiliary Space: O(1), in terms of extra space for merging. Constraints: - The number of nodes in both lists is in the range [0, 50]. - -100 <= Node.val <= 100 - Both `l1` and `l2` are sorted in non-decreasing order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists l1 and l2, and return it as a new sorted list. dummy = ListNode() current = dummy while l1 and l2: if l1.val <= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next"},{"question":"In a high-security building, a computer system is used to control access through various doors using a series of passcodes. Each passcode consists of multiple characters, and each character could be one of four types: upper-case letter, lower-case letter, digit, or special symbol. System analysts have found that each type of character affects the security measure in different ways, leading to a complex evaluation process to determine if a passcode meets the minimum security requirements. To pass the security check, the passcode must contain at least one character from each type. In order to assist the building\'s security administrators, you need to write a program that reads multiple passcodes and determines if each passcode meets the minimum security requirements. If a passcode meets the minimum security requirements, print \\"PASS\\", otherwise print \\"FAIL\\". Constraints: * 1 ≤ N ≤ 5000 (N is the number of passcodes) * Each passcode contains 1 to 100 characters. Input: The input consists of multiple passcodes, given from the Standard Input in the following format: ``` N passcode_1 passcode_2 ... passcode_N ``` Output: Output consists of N lines. On line i (1 ≤ i ≤ N), print \\"PASS\\" if the i-th passcode meets the minimum security requirements, otherwise print \\"FAIL\\". Examples: Input: ``` 4 A1a! abc 122333 z!Y2 ``` Output: ``` PASS FAIL FAIL PASS ``` Input: ``` 3 aB1! abc12B! !2Ac ``` Output: ``` PASS PASS PASS ``` Remember to handle edge cases such as the shortest possible passcode and those that just exceed the limits. Leverage efficient algorithms to ensure the solution runs within reasonable time limits given the constraints.","solution":"def check_passcode(passcodes): results = [] for passcode in passcodes: has_upper = any(c.isupper() for c in passcode) has_lower = any(c.islower() for c in passcode) has_digit = any(c.isdigit() for c in passcode) has_special = any(not c.isalnum() for c in passcode) if has_upper and has_lower and has_digit and has_special: results.append(\\"PASS\\") else: results.append(\\"FAIL\\") return results def read_and_check_passcodes(input_data): lines = input_data.strip().split(\'n\') N = int(lines[0]) passcodes = lines[1:N + 1] results = check_passcode(passcodes) return results"},{"question":"Mary is organizing a team-building event where participants will sit in a circular arrangement. She needs to ensure that there are no two participants seated next to each other such that their skills are directly related, to promote better interaction. The skills of the participants are represented by integers and participants are considered directly related if their skills have a common factor greater than 1. Write a function that determines if it is possible to arrange the participants in such a way given their skills. If multiple arrangements are possible, any one of them is acceptable. -----Input----- The first line contains a single integer t — the number of test cases (1 le t le 100). The next t blocks each describe a test case. Each block starts with an integer n (2 le n le 100) — the number of participants in the test case. The second line of each block contains n integers representing the skills of the participants. -----Output----- For each test case, if such an arrangement is possible, print \\"YES\\", followed by the arrangement of the skills in a single line separated by spaces. If no such arrangement is possible, print \\"NO\\". Each skill should appear exactly once for each test case. -----Example----- Input: 2 4 2 3 5 7 4 2 4 8 16 Output: YES 2 3 5 7 NO -----Note----- In the first test case, the skills have no common factors greater than 1 between any adjacent participants, so the arrangement is valid. In the second test case, it is not possible to place the participants such that no two adjacent participants have skills with a common factor greater than 1.","solution":"from math import gcd from itertools import permutations def is_valid_arrangement(arrangement): n = len(arrangement) for i in range(n): if gcd(arrangement[i], arrangement[(i + 1) % n]) > 1: return False return True def find_arrangement(t, test_cases): results = [] for case in test_cases: n, skills = case possible = False for arrangement in permutations(skills): if is_valid_arrangement(arrangement): results.append((\\"YES\\", arrangement)) possible = True break if not possible: results.append((\\"NO\\", )) return results def team_building_event(t, test_cases): results = find_arrangement(t, test_cases) output = [] for result in results: if result[0] == \\"NO\\": output.append(\\"NO\\") else: output.append(\\"YES\\") output.append(\\" \\".join(map(str, result[1]))) return \\"n\\".join(output)"},{"question":"A scientific research facility stores sensitive documents using a specific encryption technique. Each document is represented by a string of lowercase English letters. For security reasons, they implement a \\"rotated substring\\" method for encryption. A substring `t` of a string `s` is defined as any sequence of consecutive characters of `s`. A rotated substring of a string is obtained by selecting any substring of the string and rotating it by `r` positions either left or right. For example, the rotated substring of `abcde` with substring `bcd` by `r=1` to the left results in `cdb`. Given are two strings, `s` and `t`. Your task is to check if it is possible to obtain `t` by rotating any substring of `s`. For instance, let `s = \\"abcdefghi\\"` and `t = \\"cde\\"`. The substring `s[2:5]=\\"cde\\"` can be rotated 0 times (left or right) to match `t`. However, if `s = \\"abcdefghi\\"` and `t = \\"dce\\"`, this isn\'t directly possible without breaking the sequence. Write a function to determine if it is possible to derive string `t` by rotating any substring of string `s`. -----Input----- The first line contains the string `s` (1 ≤ |s| ≤ 100), composed of only lowercase English letters. The second line contains the string `t` (1 ≤ |t| ≤ |s|), composed of only lowercase English letters. -----Output----- Output \\"YES\\" if it is possible to obtain `t` by rotating any substring of `s`, otherwise output \\"NO\\". -----Examples----- Input abcdefghi cde Output YES Input abcdefghi dce Output NO -----Note----- In the first example, the substring `cde` of `s` can be directly matched with `t`. In the second example, there is no possible rotated substring of `abcdefghi` that can result in `dce`.","solution":"def can_obtain_rotated_substring(s, t): Checks if it is possible to obtain `t` by rotating any substring of `s`. Parameters: s (str): The original string. t (str): The target substring. Returns: str: \\"YES\\" if t can be obtained by rotating any substring of s, \\"NO\\" otherwise. from collections import deque len_s = len(s) len_t = len(t) for start in range(len_s - len_t + 1): substring = s[start:start + len_t] d_substring = deque(substring) d_t = deque(t) # Check all possible rotations for _ in range(len_t): d_substring.rotate(1) if list(d_substring) == list(d_t): return \\"YES\\" d_substring.rotate(-2) if list(d_substring) == list(d_t): return \\"YES\\" return \\"NO\\""},{"question":"Bob loves collecting rare stamps from different countries. He has just returned from a stamp fair with n new stamps. However, his album can only hold k stamps per page. Bob always fills a page completely before starting to use the next page. He would like to know how many pages he will completely fill and how many stamps will be on the next, possibly incomplete, page. -----Input:----- - First line will contain T, the number of testcases. Then the testcases follow. - The first line of each testcase contains two space-separated integers n and k, where n is the number of stamps Bob collected, and k is the number of stamps a page can hold. -----Output:----- For each testcase, output in a single line two space-separated integers: the number of completely filled pages and the number of stamps on the next page. -----Constraints----- - 1 leq T leq 10^5 - 1 leq n, k leq 10^9 -----Sample Input:----- 3 35 10 40 15 23 5 -----Sample Output:----- 3 5 2 10 4 3 -----Explanation:----- Test Case 1: Bob can fill 3 pages completely (each with 10 stamps) and will have 5 stamps on the next page. Test Case 2: Bob can fill 2 pages completely (each with 15 stamps) and will have 10 stamps on the next page. Test Case 3: Bob can fill 4 pages completely (each with 5 stamps) and will have 3 stamps on the next page.","solution":"def stamps_pages(T, cases): results = [] for i in range(T): n, k = cases[i] full_pages = n // k stamps_next_page = n % k results.append((full_pages, stamps_next_page)) return results"},{"question":"Anne is organizing a charity event and she has a list of donations from various contributors. She needs your help to quickly determine some details about the donations. Each donation has an associated amount and a contributor\'s ID. Anne wants to answer several queries to identify whether there is a contributor who donated a certain amount or more. You need to process these queries efficiently to help Anne with her task. Constraints: - Each query demands whether there\'s at least one contributor with a donation amount greater than or equal to a specified value. - Anne may have up to N contributors, and she might ask Q queries. Input: - The first line contains two integers N and Q, the number of donations and the number of queries respectively. - The second line contains N integers, where the i-th integer represents the donation amount donated by the i-th contributor. These amounts are separated by spaces. - The following Q lines each contain a single integer, representing the threshold amount for the query. Output: - For each query, print \\"YES\\" if there exists at least one donation amount greater than or equal to the queried threshold, otherwise print \\"NO\\". Example: Input: 5 3 100 200 300 400 500 150 600 300 Output: YES NO YES Explanation: - For the first query, donations of 200, 300, 400, and 500 are all greater than 150, so the output is \\"YES\\". - For the second query, no donation amounts are greater than or equal to 600, so the output is \\"NO\\". - For the third query, donations of 300, 400, and 500 are all greater than or equal to 300, so the output is \\"YES\\".","solution":"def check_donations(N, Q, donations, queries): Given the number of donations (N), the number of queries (Q), a list of donation amounts, and a list of query thresholds, it returns a list of results for each query, indicating if there exists at least one donation amount greater than or equal to each queried threshold. results = [] for threshold in queries: if any(donation >= threshold for donation in donations): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # N = 5 # Q = 3 # donations = [100, 200, 300, 400, 500] # queries = [150, 600, 300] # check_donations(N, Q, donations, queries) # Output should be [\'YES\', \'NO\', \'YES\']"},{"question":"You are given an array of N integers and your task is to answer Q queries. Each query consists of an index and a value; you have to update the element at the given index in the array to the given value. After processing all queries, you need to find the sum of all even numbers in the final array. Input: The first line of input consists of two integers, N and Q, the size of the array and the number of queries respectively. The second line contains N space-separated integers representing the initial elements of the array. Next Q lines contain two integers each, index and value representing the query, where 0 ≤ index < N and -10^9 ≤ value ≤ 10^9. Output: Output the sum of all even numbers in the array after processing all queries. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 -10^9 ≤ value ≤ 10^9 SAMPLE INPUT 5 3 1 2 3 4 5 1 10 2 6 4 8 SAMPLE OUTPUT 28 Explanation Initial array is [1, 2, 3, 4, 5]. After first query, array becomes [1, 10, 3, 4, 5]. After second query, array becomes [1, 10, 6, 4, 5]. After last query, array becomes [1, 10, 6, 4, 8]. The sum of even numbers is 10 + 6 + 4 + 8 = 28, thus the output is 28.","solution":"def sum_even_after_queries(N, Q, array, queries): This function processes Q queries on an array of size N. After each query, it updates the array and returns the sum of all even numbers in the final array. Parameters: N (int): Size of the array Q (int): Number of queries array (list of int): Initial elements of the array queries (list of tuples): Each query containing index and the new value Returns: int: Sum of all even numbers in the final array # Calculate initial sum of even numbers even_sum = sum(x for x in array if x % 2 == 0) for index, value in queries: if array[index] % 2 == 0: even_sum -= array[index] array[index] = value if array[index] % 2 == 0: even_sum += array[index] return even_sum"},{"question":"Tina is organizing a communal gardening event for her neighborhood. The event is designed to ensure that each participant gets an opportunity to plant several trees. Each participant is assigned a slot of time during which they can plant their trees. Overlapping time slots between participants are allowed. Tina wants to ensure that each participant gets an equal amount of time to plant their trees to make the event fair. She also wants to make sure that each participant plants the same number of trees. Given the number of participants and the total number of trees each participant must plant, help Tina schedule the event. Each participant should be given an equal amount of time to plant their trees. Additionally, no participant should ever have to wait for another participant to vacate a planting spot, i.e., everyone\'s planting activities should be independent of each other. ------ Input ------ The first line of input contains one number T, the number of test cases. Each test case consists of one line containing two integers n (the number of participants) and m (the total number of trees each participant needs to plant). ------ Output ------ For each test case, construct a valid schedule and print it as follows: In the first line, print s, the number of slots needed. In the next s lines, print the time slots for each participant in the format: \\"p t1 t2\\" where \\"p\\" is the participant id (from 1 to n), \\"t1\\" is the start time, and \\"t2\\" is the end time. Ensure that all participants get the same amount of \\"planting\\" time and the planting activity of no two participants overlap in any given slot. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ n ≤ 100 1 ≤ m ≤ 100 ----- Sample Input 1 ------ 2 2 3 3 4 ----- Sample Output 1 ------ 3 1 1 2 1 3 4 1 5 6 2 1 2 2 3 4 2 5 6 4 1 1 2 1 3 4 1 5 6 1 7 8 2 1 2 2 3 4 2 5 6 2 7 8 3 1 2 3 3 4 3 5 6 3 7 8","solution":"def gardening_schedule(T, test_cases): result = [] for case in test_cases: n, m = case slots_per_participant = m result.append(str(slots_per_participant * n)) for p in range(1, n + 1): start_time = 1 for _ in range(slots_per_participant): result.append(f\\"{p} {start_time} {start_time + 1}\\") start_time += 2 return result # Function to parse the input and call the main function def main(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [(int(line.split()[0]), int(line.split()[1])) for line in lines[1:]] return \'n\'.join(gardening_schedule(T, test_cases))"},{"question":"You are given a grid of characters. Determine if the word \\"CODE\\" can be formed in the grid using adjacent cells (horizontally, vertically, and diagonally). You can use each cell only once. Write a function `canFormCode` that takes in the grid and returns `true` if the word can be formed, otherwise `false`. **Example:** ```python grid = [ [\'C\', \'A\', \'T\'], [\'B\', \'O\', \'D\'], [\'R\', \'E\', \'E\'] ] canFormCode(grid) # returns True because C->O->D->E form \\"CODE\\" ``` **Function Signature:** ```python def canFormCode(grid: List[List[str]]) -> bool: pass ```","solution":"from typing import List def canFormCode(grid: List[List[str]]) -> bool: def dfs(x, y, word, index): if index == len(word): return True if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]): return False if grid[x][y] != word[index]: return False temp = grid[x][y] grid[x][y] = \\"#\\" for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]: if dfs(x + dx, y + dy, word, index + 1): return True grid[x][y] = temp return False word = \\"CODE\\" for i in range(len(grid)): for j in range(len(grid[0])): if dfs(i, j, word, 0): return True return False"},{"question":"You are tasked with developing an intelligent system for sorting custom strings. The strings consist of uppercase alphabets and digits only. The sorting criteria have some unique requirements which you need to follow: 1. All strings with alphabetic characters only should come before strings that contain any digits. 2. Within each segment, strings should be sorted lexicographically. Implement a program to sort strings based on these criteria. Input: The input consists of a series of strings. Each string is on a separate line, up to a maximum of 1000 lines and each string has up to 100 characters. The input terminates with a line that contains only \\"END\\", which should not be processed. Output: The output should be the sorted list of strings, each on a new line. Example: Input: HELLO 42WORLD GOODBYE A1B2C3 CHERRY APPLE BANANA END Output: APPLE BANANA CHERRY GOODBYE HELLO 42WORLD A1B2C3 Note: - Ensure that the output maintains the formatting of a single string per line. - Strings containing digits should be considered greater than any string with only alphabetic characters. - The end indicator line \\"END\\" is not part of the input to be processed.","solution":"def sort_custom_strings(strings): Sorts the strings based on the criteria: 1. Strings with alphabetic characters only come before strings with digits. 2. Within each segment, the strings are sorted lexicographically. alphabets_only = [] containing_digits = [] for s in strings: if s.isalpha(): alphabets_only.append(s) else: containing_digits.append(s) alphabets_only.sort() containing_digits.sort() return alphabets_only + containing_digits def process_input_output(input_strings): Processes the input strings, ignoring the last \'END\' line, sorts them, and returns the sorted strings. if input_strings[-1] == \\"END\\": input_strings = input_strings[:-1] sorted_strings = sort_custom_strings(input_strings) return \\"n\\".join(sorted_strings)"},{"question":"John is trying to build a new high-score system for a game. He maintains a list of scores for multiple players. Each player is represented by a unique integer ID and can have multiple scores. John wants to find out the top-K highest unique scores for each player. Write a function to help John achieve this. -----Input:----- - The first line contains an integer N, the number of scores. - Each of the next N lines contains two integers ID[i] (player ID) and score[i] (the score of the player). - The last line contains an integer K. -----Output:----- Output the top-K highest unique scores for each player ID separated by a newline. For each player, print their player ID followed by their top-K highest scores in descending order. If a player has fewer than K unique scores, print all their scores. -----Constraints----- - 1 leq N leq 10000 - 1 leq ID[i] leq 10^3 - 1 leq score[i] leq 10^3 - 1 leq K leq 10 -----Sample Input:----- 6 1 100 2 150 1 200 2 150 1 100 2 180 2 -----Sample Output:----- 1 200 100 2 180 150","solution":"from collections import defaultdict def top_k_scores(n, scores, k): player_scores = defaultdict(set) for player_id, score in scores: player_scores[player_id].add(score) result = [] for player_id in sorted(player_scores.keys()): top_scores = sorted(player_scores[player_id], reverse=True)[:k] result.append((player_id, top_scores)) return result"},{"question":"In the kingdom of Far Far Away, there is a large orchard where different types of magical fruits grow. Each type of magical fruit has a unique value in terms of magical potency, which can enhance various abilities of people who consume them. The orchard is fully represented as an `n x n` grid, where each cell contains a value representing the magical potency of the fruit found there. Princess Fiona desires to conduct a special experiment where she collects the fruits from the orchard. However, she wants to maximize the magical potency of the fruits collected while also ensuring that there is a visual pattern to how the fruits are picked. Specifically, Fiona wants to ensure that the collected fruits form either a horizontal line or a vertical line in the grid. Your task is to help Princess Fiona determine the highest possible magical potency she can collect by choosing any straight horizontal or vertical line of fruits in the orchard. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100), representing the size of the orchard grid. - The next `n` lines each contain `n` space-separated integers, where each integer represents the magical potency value (1 ≤ value ≤ 1000) for that cell in the orchard. # Output - Output a single integer: the maximum magical potency that Princess Fiona can collect by choosing one straight horizontal or vertical line. # Example Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 24 ``` Input ``` 4 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ``` Output ``` 94 ``` In the first example, the maximum potency can be collected from the third vertical line (3 + 6 + 9 = 18) or the third horizontal line (7 + 8 + 9 = 24), resulting in the output `24`. In the second example, the maximum potency is collected from the fourth vertical line (13 + 17 + 21 + 25 = 76) or the fourth horizontal line (22 + 23 + 24 + 25 = 94), resulting in the output `94`.","solution":"def max_magical_potency(n, grid): max_potency = 0 # Check all horizontal lines for row in grid: max_potency = max(max_potency, sum(row)) # Check all vertical lines for col in range(n): col_sum = sum(grid[row][col] for row in range(n)) max_potency = max(max_potency, col_sum) return max_potency"},{"question":"Write a function that takes an integer `n` as input and returns a string containing the first `n` terms of the Fibonacci sequence, each term separated by a comma and a space. For example, if `n == 7`, the function should return: ``` \\"0, 1, 1, 2, 3, 5, 8\\" ``` If `n == 1`, the function should return: ``` \\"0\\" ``` P.S. You need to handle the cases where `n` can be 1, 2, or any larger positive integer. The input `n` will always be at least 1 and at most 50.","solution":"def fibonacci_sequence(n): Returns the first `n` terms of the Fibonacci sequence as a comma-separated string. if n == 1: return \\"0\\" sequence = [0, 1] for _ in range(2, n): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return \\", \\".join(map(str, sequence))"},{"question":"Pinkie Pie is hosting a grand party and needs your help with serving the guests. She has a buffet table with different dishes, and each guest has a specific favorite dish they would like to eat. Pinkie Pie wants to ensure that every guest gets their favorite dish, but there\'s a twist. Some dishes require a certain amount of time to prepare, and each guest will only wait for a limited time before leaving if their favorite dish isn\'t ready. Given the preparation times for each dish and the corresponding wait times for each guest, can you determine the maximum number of guests Pinkie Pie can serve their favorite dish in time? -----Input----- The first line of input contains two integers, D (1 leq D leq 10^5) and G (1 leq G leq 10^5), the number of different dishes available and the number of guests, respectively. The second line of input contains D integers, P_1, P_2, dots, P_D (1 leq P_i leq 10^9), the preparation time required for each dish. Each of the next G lines contains two integers F_i (1 leq F_i leq D) and W_i (1 leq W_i leq 10^9), where F_i is the favorite dish of the i^{th} guest and W_i is the maximum wait time of the i^{th} guest. It is guaranteed that for all positive integers i < G, W_i leq W_{i+1}. Each guest has a unique favorite dish. -----Output----- Output a single integer on a line by itself, the maximum number of guests Pinkie Pie can serve. -----Examples----- Sample Input 1: 3 4 5 10 15 1 5 2 10 3 20 2 25 Sample Output 1: 3 Sample Input 2: 2 3 8 12 2 10 1 15 2 20 Sample Output 2: 2","solution":"def serve_guests(D, G, preparation_times, guests): Determines the maximum number of guests that can be served their favorite dish in time. Parameters: D (int): Number of different dishes available. G (int): Number of guests. preparation_times (list): Preparation times for each dish. guests (list): List of tuples where each tuple contains the favorite dish and wait time for a guest. Returns: int: Maximum number of guests that can be served. # Sort guests by their maximum wait time guests.sort(key=lambda x: x[1]) # Use a list to keep track of served guests served_guests = [False] * D served_count = 0 for favorite_dish, wait_time in guests: if preparation_times[favorite_dish - 1] <= wait_time: if not served_guests[favorite_dish - 1]: served_guests[favorite_dish - 1] = True served_count += 1 return served_count"},{"question":"Given a binary tree, calculate the sum of all values in each subtree and return a list of these sums. A subtree is defined as a node along with all its descendants. Example 1: Input: [5, 3, 8, 1, 4, 7, 10] Output: [1, 4, 3, 14, 7, 10, 38] Explanation: For the given binary tree: 5 / 3 8 / / 1 4 7 10 The sum of subtrees rooted at each node: - Node 1: subtree sum = 1 - Node 4: subtree sum = 4 - Node 3: subtree sum = 1 + 3 + 4 = 8 - Node 7: subtree sum = 7 - Node 10: subtree sum = 10 - Node 8: subtree sum = 7 + 8 + 10 = 25 - Root node 5: subtree sum = 1 + 3 + 4 + 5 + 7 + 8 + 10 = 38 The function should output the sums of the subtrees in the order of their corresponding nodes in the input level order traversal. Example 2: Input: [2, 1, 4] Output: [1, 4, 7] Explanation: For the given binary tree: 2 / 1 4 - Node 1: subtree sum = 1 - Node 4: subtree sum = 4 - Node 2: subtree sum = 1 + 2 + 4 = 7 Note: The tree will have between 1 and 1000 nodes. Each node\'s value will be between 0 and 1000.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sumSubtrees(root): Given the root of a binary tree, returns a list of sums of each subtree. The order of sums matches the level order traversal of the tree. sums = [] def subtreeSum(node): if not node: return 0 left_sum = subtreeSum(node.left) right_sum = subtreeSum(node.right) total_sum = node.value + left_sum + right_sum sums.append(total_sum) return total_sum subtreeSum(root) return sums # Helper function to build a binary tree from a list in level order def buildTree(values): from collections import deque if not values: return None root = TreeNode(values[0]) queue = deque([root]) idx = 1 while queue: node = queue.popleft() if idx < len(values) and values[idx] is not None: node.left = TreeNode(values[idx]) queue.append(node.left) idx += 1 if idx < len(values) and values[idx] is not None: node.right = TreeNode(values[idx]) queue.append(node.right) idx += 1 return root"},{"question":"A palindrome is a string that reads the same forward and backward. For example, \\"radar\\", \\"level\\", and \\"rotor\\" are palindromes. Write a program which reads a list of strings and prints the count of palindrome strings in the list. Constraints 1 ≤ Number of strings in the list ≤ 1000 1 ≤ Length of each string ≤ 50 Input The first line contains an integer representing the number of strings, N. The next N lines contain one string per line. Output Print the number of palindrome strings in the given list. Examples Input 5 radar hello level world rotor Output 3 Input 4 abc def ghi jkl Output 0","solution":"def count_palindromes(strings): Returns the count of palindrome strings in the input list. Args: strings (list of str): List of strings to check. Returns: int: Count of palindrome strings. return sum(1 for s in strings if s == s[::-1])"},{"question":"Find All Anagrams of a String # Inputs: - `s` which is the input string. - `p` which is the pattern string. # Outputs: A list of starting indices of `p`\'s anagrams in `s`. The result must be presented in increasing order of the indices. # Example: ```python Input: s = \\"cbaebabacd\\" p = \\"abc\\" Output: [0, 6] ``` # Notes: - The input string `s` can be of any length and may contain any ASCII characters. - The pattern string `p` is guaranteed to be non-empty and can also contain any ASCII characters. - An anagram is produced by rearranging the letters of a word to form a new word using all the original letters exactly once.","solution":"from collections import Counter def find_anagrams(s, p): if len(p) > len(s): return [] p_count = Counter(p) s_count = Counter(s[:len(p) - 1]) result = [] for i in range(len(p) - 1, len(s)): s_count[s[i]] += 1 # include a new character in the window # This step is to compare window with p_count dictionary if s_count == p_count: result.append(i - len(p) + 1) s_count[s[i - len(p) + 1]] -= 1 # remove the leftmost character of the window if s_count[s[i - len(p) + 1]] == 0: del s_count[s[i - len(p) + 1]] # clean up the dictionary return result"},{"question":"A warehouse needs an automated system to manage its stock levels. You are required to implement a function that processes a sequence of stock operations and returns the final stock level for each product after all operations have been applied. Each stock operation is either an addition or a removal of a certain quantity of a product. If there are more removals than the current stock level of a product, the stock cannot go below zero. You will be given an initial stock level for each product and a list of operations to perform on the stock levels. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of products. The second line contains n integers initial_stock[i] (0 ≤ initial_stock[i] ≤ 10^9) — the initial stock level for each product. The third line contains an integer m (1 ≤ m ≤ 10^5) — the number of stock operations. Each of the next m lines contains a string operation and an integer amount (1 ≤ amount ≤ 10^9). The operation can be either \\"add i k\\" or \\"remove i k\\", where i (1 ≤ i ≤ n) is the product number (index) and k (1 ≤ k ≤ 10^9) is the amount to add or remove. Output Print n integers representing the final stock level for each product after all operations have been applied. Examples Input 3 10 20 15 4 add 1 5 add 2 10 remove 3 5 remove 2 30 Output 15 0 10 Input 2 5 10 3 add 1 5 remove 2 5 add 2 15 Output 10 20 Note In the first example, after applying the operations: - Product 1: 10 + 5 = 15 - Product 2: 20 + 10 - 30 = 0 (cannot go below zero) - Product 3: 15 - 5 = 10 In the second example, after applying the operations: - Product 1: 5 + 5 = 10 - Product 2: 10 - 5 + 15 = 20","solution":"def process_stock_operations(n, initial_stock, m, operations): Args: n (int): number of products initial_stock (list of int): initial stock level for each product m (int): number of stock operations operations (list of str): list of stock operations to perform Returns: list of int: final stock level for each product after all operations have been applied for operation in operations: op, i, k = operation.split() i, k = int(i) - 1, int(k) if op == \\"add\\": initial_stock[i] += k elif op == \\"remove\\": initial_stock[i] = max(0, initial_stock[i] - k) return initial_stock"},{"question":"Given an array of integers and a complex mathematical operation you have designed, you are to perform a series of adjustments to make the result of applying the operation to the array as close to zero as possible. The complex operation is defined as follows for an array B of length N: result(B) = sum_{i=1}^{N-1} (B[i] - B[i+1])^2 You are allowed to perform the following operations on the array: 1. Swap the values at any two positions i and j. 2. Replace the value at any position i with the integer x. You are given an integer K, which denotes the maximum number of operations (either swap or replace) you can perform. Your goal is to minimize the result of the complex operation after performing up to K operations. ----- Input ----- The input consists of: * An integer N, the length of the array. * An integer K, the maximum number of operations allowed. * A sequence of N space-separated integers representing the array. ----- Output ----- You should output the sequence of operations you performed on the array to minimize the result. Each operation should be of the form: 1. \\"swap i j\\" to swap the elements at indices i and j. 2. \\"replace i x\\" to replace the element at index i with the integer x. After listing the operations, output the constant string \\"end\\". ----- Constraints ----- * 1 ≤ N ≤ 1000 * 1 ≤ K ≤ 100 * -10^5 ≤ A_i, x ≤ 10^5 ----- Example ----- Input: 4 3 3 1 4 2 Output: swap 1 3 replace 2 -1 swap 3 4 end Explanation: Initial array: [3, 1, 4, 2] 1. Swap indices 1 and 3: [4, 1, 3, 2] 2. Replace index 2 with -1: [4, -1, 3, 2] 3. Swap indices 3 and 4: [4, -1, 2, 3] Complex operation result before: (3-1)^2 + (1-4)^2 + (4-2)^2 = 4 + 9 + 4 = 17 Complex operation result after: (4-(-1))^2 + (-1-2)^2 + (2-3)^2 = 25 + 9 + 1 = 35 As you can see, the operations change the array but the goal is to get the result as close to zero as possible.","solution":"def minimize_result(N, K, array): This function aims to minimize the result of the complex operation described above after performing up to K operations on the array. operations = [] # Helper function to calculate the result of the complex operation def calculate_result(arr): return sum((arr[i] - arr[i + 1]) ** 2 for i in range(len(arr) - 1)) current_result = calculate_result(array) for _ in range(K): # Best operation found (None initially) best_op = None best_result = current_result # 1. Try all swap operations for i in range(N): for j in range(i + 1, N): array[i], array[j] = array[j], array[i] new_result = calculate_result(array) if new_result < best_result: best_result = new_result best_op = (\\"swap\\", i + 1, j + 1) array[i], array[j] = array[j], array[i] # revert back # 2. Try all replace operations for each element for i in range(N): original_value = array[i] for x in range(-100, 101): # Trying values within the range accepted; this is a heuristic choice array[i] = x new_result = calculate_result(array) if new_result < best_result: best_result = new_result best_op = (\\"replace\\", i + 1, x) array[i] = original_value # revert back # If no better operation is found, break early if not best_op: break # Execute best operation found if best_op[0] == \\"swap\\": i, j = best_op[1] - 1, best_op[2] - 1 array[i], array[j] = array[j], array[i] elif best_op[0] == \\"replace\\": i, x = best_op[1] - 1, best_op[2] array[i] = x operations.append(best_op) current_result = best_result return operations"},{"question":"Given a list of integers, write code to find the longest subsequence where each pair of consecutive elements is either both even or both odd. Return the subsequence as a list. Example: ```python input_list = [5, 3, 8, 6, 2, 4, 7, 15] # result = [8, 6, 2, 4] ``` **Note:** - In case of ties (multiple subsequences having the same length), return the first occurring subsequence. - If the input list is empty, return an empty list. - Consider utilizing an efficient algorithm to handle large lists.","solution":"def longest_even_odd_subsequence(input_list): Finds the longest subsequence where each pair of consecutive elements is either both even or both odd. if not input_list: return [] longest_subseq = [] current_subseq = [] for num in input_list: if not current_subseq: current_subseq = [num] else: # Check if the current number is compatible with the last number in the current subsequence if (current_subseq[-1] % 2 == num % 2): current_subseq.append(num) else: if len(current_subseq) > len(longest_subseq): longest_subseq = current_subseq current_subseq = [num] # Final check at the end of the loop if len(current_subseq) > len(longest_subseq): longest_subseq = current_subseq return longest_subseq"},{"question":"Grace is learning about binary trees and one of the concepts she\'s studying is finding the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. Grace wants to write a function to calculate the diameter of a given binary tree. Can you help her by implementing this function? The definition of a binary tree node is as follows: ``` class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Your task is to write a function: ``` def diameterOfBinaryTree(root: TreeNode) -> int: ``` that takes the root node of the binary tree and returns an integer representing the diameter of the tree. -----Input section----- The input is given as a binary tree. -----Output section----- The function should output an integer, the diameter of the binary tree. -----Constraints----- - The number of nodes in the tree is in the range [0, 10^4]. - -100 <= Node.val <= 100 -----Sample Input----- [1, 2, 3, 4, 5] (Which denotes the binary tree: 1 / 2 3 / 4 5) -----Sample Output----- 3 -----Explanation----- The longest path goes through nodes 4 -> 2 -> 1 -> 3, which has length 3.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def diameterOfBinaryTree(root: TreeNode) -> int: def height_and_diameter(node: TreeNode): if not node: return (0, 0) # height, diameter left_height, left_diameter = height_and_diameter(node.left) right_height, right_diameter = height_and_diameter(node.right) current_height = 1 + max(left_height, right_height) current_diameter = max(left_height + right_height, left_diameter, right_diameter) return (current_height, current_diameter) return height_and_diameter(root)[1]"},{"question":"Task You are given a grid with N rows and M columns of cells. Each cell can either be empty or contain an obstacle. Your task is to find the maximum area of a rectangle consisting entirely of empty cells. You need to write a function `maxRectangleArea` that takes in a 2D list (grid) of integers where `1` represents an obstacle and `0` represents an empty cell, and returns the maximum possible area of a rectangle that can be formed using only empty cells. # Input/Output - `[input]` 2D list `grid` A list of N rows and M columns containing only integers `1` and `0`. `0 < N, M <= 1000` - `[output]` an integer The maximum area of the rectangle that consists entirely of empty cells. # Example ```python grid = [ [1, 0, 1, 0, 0], [1, 0, 0, 0, 1], [1, 1, 0, 0, 0] ] maxRectangleArea(grid) # Output should be 4 ``` # Note In the example, the rectangle that can be formed with maximum area consists of cells grid[1][1] to grid[2][3], which contains 4 cells.","solution":"def maxRectangleArea(grid): if not grid: return 0 nrows = len(grid) ncols = len(grid[0]) max_area = 0 heights = [0] * ncols for row in grid: for col in range(ncols): if row[col] == 0: heights[col] += 1 else: heights[col] = 0 max_area = max(max_area, largestRectangleInHistogram(heights)) return max_area def largestRectangleInHistogram(heights): stack = [] max_area = 0 heights.append(0) # Append a zero to make sure we empty the stack by the end of the loop for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Create a function that takes an integer matrix and returns the number of distinct elements in it. The matrix can be of any size, but all its elements are integers. Ensure your solution performs efficiently even for large matrices. # Input - A matrix of integers represented as a list of lists. # Output - An integer representing the number of distinct elements in the matrix. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` **Output:** ``` 9 ``` ```python matrix = [ [1, 2, 3], [4, 1, 6], [7, 8, 2] ] ``` **Output:** ``` 7 ``` # Note In the first example, all elements in the matrix are distinct. Therefore, the output is 9. In the second example, there are repeated elements (1 and 2). Hence, the number of distinct elements is 7.","solution":"def count_distinct_elements(matrix): Returns the number of distinct elements in the matrix. :param matrix: List[List[int]] - The input matrix. :return: int - The number of distinct elements in the matrix. distinct_elements = set() for row in matrix: distinct_elements.update(row) return len(distinct_elements)"},{"question":"You are the manager of a warehouse and need to arrange several types of boxes in a storage area with limited space. Each type of box has a specific height and width, and you can stack boxes of the same type on top of each other, but they cannot overlap horizontally. The storage area has a fixed width W and you need to fit the boxes within this width while minimizing the total height of the stacked boxes. Given a list of box types, each defined by its width and height, determine the minimum possible height of the workspace needed to store all the boxes. -----Constraints----- - All values in input are integers. - 1 leq W, width of any box leq 10^9 - 1 leq N leq 10^5 - 1 leq height of any box leq 10^4 - 1 leq width of any box leq W -----Input----- Input is given from Standard Input in the following format: W N width_1 height_1 width_2 height_2 ... width_N height_N -----Output----- Print the minimum possible height of the workspace needed to store all the boxes. -----Sample Input----- 10 3 5 4 4 3 3 2 -----Sample Output----- 6 Here is the explanation: - Place two boxes of the first type with a total width of 5+5 = 10 and height of 4+4 = 8. - Place two boxes of the second type with a total width of 4+4 = 8 and height of 3+3 = 6. - Place three boxes of the third type with a total width of 3+3+3 = 9 and height of 2+2+2 = 6. If choosing the optimal configuration, the minimum possible height needed in the workspace is 6.","solution":"def minimum_height(W, N, boxes): Calculates the minimum height required to store all boxes within the given width. Parameters: W (int): The fixed width of the storage area. N (int): The number of different types of boxes. boxes (list of tuples): Each tuple contains (width_i, height_i) for the i-th type of box. Returns: int: The minimum possible height of the workspace. # Sort boxes by height in descending order boxes.sort(key=lambda x: -x[1]) total_height = 0 current_width = 0 current_max_height = 0 for i in range(N): width, height = boxes[i] # If adding this box would exceed the storage width, # move to a new layer if current_width + width > W: total_height += current_max_height current_width = 0 current_max_height = 0 current_width += width current_max_height = max(current_max_height, height) # Add the last layer height total_height += current_max_height return total_height"},{"question":"An international university club is organizing a foreign language competition. Each participant can speak at least one foreign language. The organizers want to form the largest team such that every language spoken by the participants is represented by at least one member in the team. Calculate the maximum size of such a team. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case starts with an integer N (the number of participants). - The next N lines each contain a string representing the languages spoken by each participant, with languages separated by spaces. -----Output:----- For each test case, print a single integer, the maximum size of the team that can be formed. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - Each participant speaks at least one language, and at most 10 languages. - A language is represented by a string of lower-case English letters with a length between 1 and 20. -----Sample Input:----- 2 3 spanish english german french english french 4 spanish german french english italian -----Sample Output:----- 3 4 -----Explanation:----- For the first test case, all languages spoken are: spanish, english, german, and french. Possible team: [participant 1, participant 2, participant 3]. This team covers all four languages. Hence, the maximum size is 3. For the second test case, a possible team can include all 4 participants, representing: spanish, german, french, english, and italian. Hence, the maximum size is 4.","solution":"def max_team_size(test_cases): This function calculates the maximum team size for each test case such that every language spoken by the participants is represented by at least one member in the team. :param test_cases: List of test cases where each test_case is a tuple (N, languages) where N is the number of participants and languages is a list of strings with languages spoken by each participant. :return: List of maximum team sizes for each test case. results = [] for test_case in test_cases: N, languages = test_case language_set = set() for lang in languages: language_set.update(lang.split()) results.append(len(language_set)) return results"},{"question":"Design a system that tracks the movement of goods in a warehouse. The warehouse is represented as a 2-dimensional grid where different cells can have different items stored in them. Each item can be represented by a unique identifier and the quantity stored in that respective grid cell. Your task is to write functions to add, remove, move, and query items in the warehouse. The warehouse should be implemented such that no two items with the same identifier can be in different locations in the warehouse at the same time. Input file will consist of multiple commands as described below. Each command and its arguments will be separated by a space. Commands: - `add x y id quantity` - add a certain quantity of an item with a unique identifier to the specific cell (x, y). If the item already exists in the warehouse, the function should raise an error. - `remove x y id` - remove an item with the given identifier from the grid cell (x, y). If the item does not exist at that location, the function should raise an error. - `move id x1 y1 x2 y2` - move an item with the given identifier from position (x1, y1) to a different cell (x2, y2). If the item does not exist at the initial location or already exists in another location, the function should raise an error. - `query id` - return the coordinates (x, y) and quantity of the item with the given identifier. If the item does not exist, return a message indicating so. The input will be a sequence of commands terminated by the command `end`. The grid size is 100x100, and no item\'s coordinates will fall outside this range. Output: For each `query` command, output either the item\'s location and quantity or a message stating that the item does not exist. For all other commands, do not produce any output unless there\'s an error, in which case output a relevant error message. Examples: Input: ``` add 5 5 item1 100 add 10 10 item2 200 query item1 move item1 5 5 20 20 query item1 remove 20 20 item1 query item1 end ``` Output: ``` 5 5 100 20 20 100 item1 not found ```","solution":"class Warehouse: def __init__(self): # Represent the warehouse grid self.grid = [[None for _ in range(100)] for _ in range(100)] # Dictionary to keep track of item locations and quantity self.items = {} def add(self, x, y, item_id, quantity): if item_id in self.items: raise ValueError(\\"Item already exists\\") if self.grid[x][y] is not None: raise ValueError(\\"Location already occupied\\") self.grid[x][y] = (item_id, quantity) self.items[item_id] = (x, y, quantity) def remove(self, x, y, item_id): if self.grid[x][y] is None or self.grid[x][y][0] != item_id: raise ValueError(\\"Item not found at specified location\\") self.grid[x][y] = None del self.items[item_id] def move(self, item_id, x1, y1, x2, y2): if item_id not in self.items or self.items[item_id][:2] != (x1, y1): raise ValueError(\\"Item not found at specified initial location\\") if self.grid[x2][y2] is not None: raise ValueError(\\"Destination location already occupied\\") quantity = self.items[item_id][2] self.grid[x1][y1] = None self.grid[x2][y2] = (item_id, quantity) self.items[item_id] = (x2, y2, quantity) def query(self, item_id): if item_id in self.items: x, y, quantity = self.items[item_id] return f\\"{x} {y} {quantity}\\" else: return f\\"{item_id} not found\\" # Process input commands def process_commands(commands): warehouse = Warehouse() results = [] for command in commands: if command == \\"end\\": break parts = command.split() try: if parts[0] == \\"add\\": _, x, y, item_id, quantity = parts warehouse.add(int(x), int(y), item_id, int(quantity)) elif parts[0] == \\"remove\\": _, x, y, item_id = parts warehouse.remove(int(x), int(y), item_id) elif parts[0] == \\"move\\": _, item_id, x1, y1, x2, y2 = parts warehouse.move(item_id, int(x1), int(y1), int(x2), int(y2)) elif parts[0] == \\"query\\": _, item_id = parts results.append(warehouse.query(item_id)) except ValueError as e: results.append(str(e)) return results"},{"question":"You are given a list of repositories with star counts and a target number of stars. Your task is to determine the minimum number of repositories needed to reach or exceed the target number of stars. Given a list of positive integers representing the star counts of different repositories and a target integer, your goal is to find the minimum number of repositories required to equal or surpass the target. Constraints: - The length of the list of repositories (1 leq n leq 10^5) - The star count of each repository (1 leq stars leq 10^6) - The target number of stars (1 leq target leq 10^{15}) Input: - The first line contains the integer ( n ) – the number of repositories. - The second line contains ( n ) integers separated by spaces – the star counts of the repositories. - The third line contains the integer ( target ) – the target number of stars. Output: - Print a single integer – the minimum number of repositories required to reach or exceed the target. If it is not possible to reach the target with the given repositories, print `-1`. Example Input: ``` 5 1 2 3 4 5 11 ``` Example Output: ``` 3 ``` Explanation: To reach the target number of stars (11): - The combination of repositories with 4, 5, and 2 stars sums to 11. Thus, the minimum number of repositories needed is 3. Example Input: ``` 3 1 1 1 5 ``` Example Output: ``` -1 ``` Explanation: Using all repositories only gives us 3 stars, which is less than the target 5. Hence, the output is -1.","solution":"def min_repositories_to_reach_target(n, star_counts, target): This function determines the minimum number of repositories needed to reach or exceed the given target number of stars. star_counts.sort(reverse=True) current_sum = 0 for i in range(n): current_sum += star_counts[i] if current_sum >= target: return i + 1 return -1"},{"question":"In a city, there is a river that flows from west to east and is surrounded by two banks: the northern bank and the southern bank. A series of identical boats is available for crossing the river. Each boat has a maximum capacity of c passengers and can travel back and forth between the banks as often as needed. Each passenger wants to get from one bank to the other and has a specific time they arrive at the departure point. Given the list of passengers, determine the minimum total number of boats required to transport all passengers across the river. -----Input----- The first line contains two integers n and c (1 leq n leq 10^5, 1 leq c leq 1000): the number of passengers and the maximum capacity of one boat. The next n lines each contain two integers: the time t_i (1 leq t_i leq 10^5) the i-th passenger arrives and the direction d_i (0 for south to north or 1 for north to south) of their journey. -----Output----- Output a single integer: the minimum total number of boats required to transport all passengers across the river. -----Examples----- Sample Input 1: 5 2 1 0 2 1 3 0 4 1 5 0 Sample Output 1: 3 Sample Input 2: 6 3 1 0 1 0 1 1 2 1 3 0 3 1 Sample Output 2: 2","solution":"def min_num_boats(n, c, passengers): from collections import defaultdict, deque # Group passengers by their arrival times and direction. # Separate into two queues: one for each direction. directions = defaultdict(list) for time, direction in passengers: directions[direction].append(time) num_boats = 0 # For each direction, process the list of passengers for direction in directions: directions[direction].sort() queue = deque(directions[direction]) while queue: num_boats += 1 capacity = 0 # Fill one boat until its capacity is reached while queue and capacity < c: queue.popleft() capacity += 1 return num_boats"},{"question":"Jason loves working with compressed files. He has a system that compresses files by creating a series of segments from the file\'s data. Each segment is characterized by its length and its unique identifier. Using this system, Jason can represent a file as a sequence of integers where each integer corresponds to the identifier of a segment. Unfortunately, Jason\'s system has a limitation: it can only handle queries about segments of a file as contiguous subarrays. Jason wants to know the uniqueness of each subarray. Specifically, he defines the uniqueness of a subarray as the number of unique segment identifiers it contains. Help Jason determine the uniqueness for multiple queried subarrays. Input The first line contains two space-separated integers n and q (1 ≤ n, q ≤ 10^5) — the number of segments in the file and the number of queries, respectively. The second line contains n space-separated integers representing the identifiers of the segments. Each of the next q lines contains two space-separated integers l and r (1 ≤ l ≤ r ≤ n) — the inclusive boundaries of the subarray which Jason wants to query for uniqueness. Output For each query, print a single integer on a new line indicating the uniqueness of the corresponding subarray. Example Input 6 3 4 2 4 5 2 2 1 3 2 6 3 5 Output 2 3 3 Note For the first query, the subarray is [4, 2, 4], which contains two unique identifiers: 4 and 2. For the second query, the subarray is [2, 4, 5, 2, 2], which contains three unique identifiers: 2, 4, and 5. For the third query, the subarray is [4, 5, 2], which contains three unique identifiers: 4, 5, and 2.","solution":"def segment_uniqueness(n, q, segments, queries): result = [] for query in queries: l, r = query subarray = segments[l-1:r] unique_identifiers = set(subarray) result.append(len(unique_identifiers)) return result"},{"question":"A string is called a binary-balanced string if the number of \'0\'s and \'1\'s are equal in it. For instance, \\"1010\\", \\"0011\\", \\"1100\\" are binary-balanced strings, but \\"010\\", \\"1110\\", \\"100\\" are not. Given an integer n, your task is to determine the number of binary-balanced strings of length n. ----- Input ----- A single integer n (1 ≤ n ≤ 1000), the length of the string. ----- Output ----- Print the number of binary-balanced strings of length n. ----- Example ----- Input 4 Output 6 Input 3 Output 0 ----- Note ----- In the first example, the binary-balanced strings of length 4 are \\"0011\\", \\"1100\\", \\"0101\\", \\"1010\\", \\"0110\\", and \\"1001\\". In the second example, no binary-balanced strings exist of length 3.","solution":"import math def count_binary_balanced_strings(n): Returns the number of binary-balanced strings of length n. A binary-balanced string means that the number of \'0\'s and \'1\'s in the string are equal. if n % 2 != 0: return 0 half_n = n // 2 return math.comb(n, half_n)"},{"question":"Odd Number of Divisors Given an integer `n`, write a function `count_odd_divisors(n)` that returns the count of integers between 1 and `n` (inclusive) that have an odd number of divisors. Integers typically have an even number of divisors, but a special class of numbers known as perfect squares have an odd number of divisors because one of their divisors is repeated (e.g., 36 has the divisors 1, 2, 3, 4, 6, 9, 12, 18, 36, and 6 is repeated). Input - An integer `n` where `1 <= n <= 10^9` Output - An integer representing the count of integers between 1 and `n` that have an odd number of divisors. Example: count_odd_divisors(10) Output: 3 Explanation: - The integers between 1 and 10 that have an odd number of divisors are 1, 4, and 9 (their divisors being {1}, {1, 2, 4}, and {1, 3, 9} respectively).","solution":"def count_odd_divisors(n): Returns the count of integers between 1 and n (inclusive) that have an odd number of divisors. import math count = 0 for i in range(1, int(math.sqrt(n)) + 1): if i * i <= n: count += 1 return count"},{"question":"Farmer Bob has a rectangular field with dimensions length l and width w where 1 le l, w le 10^9. He wants to divide his field into the largest possible number of identical square plots such that each square plot has the maximum possible area. -----Input----- The input consists of two integers l and w, the dimensions of the rectangular field in meters. -----Output----- Output a single integer, the side length of the largest possible square plot. -----Examples----- Sample Input: 18 24 Sample Output: 6 Sample Input: 7 5 Sample Output: 1","solution":"import math def largest_square_side_length(l, w): Returns the side length of the largest possible square plot that can cover the entire field. return math.gcd(l, w)"},{"question":"Problem Statement Emily loves puzzles and has recently stumbled upon a unique type of puzzle called \\"Letter Shifting\\". In this puzzle, every letter in a string is shifted forward in the alphabet by a fixed number of positions, with wrapping around from \'z\' to \'a\'. Emily wants to write a program to help her decode these shifted strings. Can you help her write this program? For the given input string and a shift value, write a function that returns the decoded string by reversing the shift. Note that the input string will contain only lowercase letters and the shift value will be an integer between 0 and 25 (inclusive). # Input - An integer T (1 le T le 100), the number of test cases. - For each test case: - A single line containing a string S (consisting of lowercase alphabetic characters, 1 le |S| le 1{,}000) and an integer K (0 le K le 25), separated by a space. # Output - For each test case, output a single line containing the decoded string. # Sample Input ``` 3 jgnnq 2 yqtnf 2 lipps 4 ``` # Sample Output ``` hello world hello ``` # Example Input ``` 3 jgnnq 2 yqtnf 2 lipps 4 ``` Output ``` hello world hello ``` # Explanation: - In the first test case, \'jgnnq\' with a shift of 2 translates back to \'hello\'. - In the second test case, \'yqtnf\' with a shift of 2 translates back to \'world\'. - In the third test case, \'lipps\' with a shift of 4 translates back to \'hello\'.","solution":"def decode_string(encoded_string, shift): Decodes the encoded string by reversing the shift. decoded_chars = [] for char in encoded_string: shifted_index = (ord(char) - ord(\'a\') - shift) % 26 decoded_char = chr(ord(\'a\') + shifted_index) decoded_chars.append(decoded_char) return \'\'.join(decoded_chars) def decode_puzzle(input_data): results = [] lines = input_data.split(\'n\') T = int(lines[0]) for i in range(1, T + 1): encoded_string, shift = lines[i].rsplit(\' \', 1) shift = int(shift) decoded_string = decode_string(encoded_string, shift) results.append(decoded_string) return results"},{"question":"Given an array of N integers, determine if it can be sorted into non-descending order by performing at most one swap operation between any two elements. -----Constraints----- - 2 leq N leq 1000 - Each element of the array is a distinct integer that ranges from -10^6 to 10^6. -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print \\"YES\\" if the array can be sorted by at most one swap operation, otherwise print \\"NO\\". -----Sample Input----- 5 3 1 2 5 4 -----Sample Output----- YES Explanation: By swapping elements 3 and 1, the array becomes [1, 3, 2, 5, 4]. By swapping elements 2 and 4, the array becomes [1, 3, 4, 5, 2]. Only one swap can be performed to sort the array.","solution":"def can_be_sorted_with_one_swap(arr): Determine if the array can be sorted into non-descending order by performing at most one swap. Parameters: arr (list): List of integers. Returns: str: \\"YES\\" if the array can be sorted with at most one swap, otherwise \\"NO\\". n = len(arr) sorted_arr = sorted(arr) diff_indices = [i for i in range(n) if arr[i] != sorted_arr[i]] # If arrays are already equal if not diff_indices: return \\"YES\\" # If there are exactly 2 elements which are out of order if len(diff_indices) == 2: arr[diff_indices[0]], arr[diff_indices[1]] = arr[diff_indices[1]], arr[diff_indices[0]] return \\"YES\\" if arr == sorted_arr else \\"NO\\" return \\"NO\\""},{"question":"In a given list of integers, every element appears twice except for one. Find that single one. Write a function that takes a list of integers and returns the integer that appears only once. **Notes:** - Your algorithm should have linear runtime complexity. - Can you implement it without using extra memory? Example Input: `[4, 1, 2, 1, 2]` Example Output: `4` You can assume that the input list will always contain at least one element, which is the unique single one.","solution":"def single_number(nums): Find the single number in a list where every element appears twice except for one. Uses bitwise XOR to achieve O(n) time complexity and constant space complexity. :param nums: List[int] - List of integers with exactly one unique number :return: int - The unique number single = 0 for num in nums: single ^= num return single"},{"question":"Sara is participating in a virtual marathon where competitors progress through checkpoints. Each checkpoint awards different points. Competitors receive prizes based on their total points at the end of the marathon. Your task is to help Sara calculate her total points and determine if she qualifies for a prize by achieving a point threshold. INPUT: The first line of input contains an integer n, the number of checkpoints. The second line contains n space-separated integers denoting the points awarded at each checkpoint. Finally, the third line contains an integer m, the threshold of points needed to qualify for a prize. OUTPUT: Output contains two lines: 1. The first line contains a single integer denoting Sara\'s total points. 2. The second line contains \'Qualified\' if Sara\'s total points are greater than or equal to the threshold m, otherwise it contains \'Not Qualified\'. CONSTRAINTS: 1 ≤ n ≤ 10^5 -100 ≤ Points[i] ≤ 100 0 ≤ m ≤ 10^6 SAMPLE INPUT: 5 10 -2 5 3 7 15 SAMPLE OUTPUT: 23 Qualified","solution":"def marathon_results(n, points, m): total_points = sum(points) qualification_status = \\"Qualified\\" if total_points >= m else \\"Not Qualified\\" return total_points, qualification_status"},{"question":"John is organizing a sports event and needs to create teams from a list of participants. Each participant is represented by their skill level. John wants to form two teams in such a way that the difference between the total skill levels of the two teams is minimized. You are given the number of participants and their respective skill levels. Determine the minimum possible difference between the total skill levels of the two teams. -----Input----- The first line of input contains an integer n (2 ≤ n ≤ 20) — the number of participants. The second line contains n space-separated integers skill_1, skill_2, ..., skill_n (1 ≤ skill_i ≤ 1000) — the skill levels of the participants. -----Output----- Print one integer — the minimum possible difference between the total skill levels of the two teams. -----Examples----- Input 4 10 20 15 25 Output 0 Input 3 5 8 13 Output 0 Input 5 1 2 3 4 5 Output 1 -----Note----- In the first example, the teams can be [10, 25] and [20, 15], both with a total skill level of 35, making the difference 0. In the second example, the teams can be [5, 13] and [8], both with a total skill level of 18, making the difference 0.","solution":"def min_skill_diff(n, skill_levels): Given the number of participants and their respective skill levels, determine the minimum possible difference between the total skill levels of the two teams. import itertools # Calculate the total skill levels available total_skill = sum(skill_levels) # Half of the total skill levels (it may not be possible exactly) best_diff = float(\'inf\') # We want to go through all possible combinations of distributing participants for r in range(n//2 + 1): for comb in itertools.combinations(skill_levels, r): team1_sum = sum(comb) team2_sum = total_skill - team1_sum best_diff = min(best_diff, abs(team1_sum - team2_sum)) return best_diff"},{"question":"You\'re given a string S consisting of lowercase alphabets. Write a program to determine if S is an anagram of palindrome. In other words, check if it\'s possible to rearrange the characters of S to form a palindrome. -----Input----- The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains a string S. -----Output----- For each test case, display \\"YES\\" if it\'s possible to rearrange the characters of S to form a palindrome, otherwise display \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 1000 -----Example----- Input 3 aaabbbb cdefg aabbcc Output YES NO YES","solution":"def is_anagram_of_palindrome(s): Determines if the string s can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases. test_cases: List of string cases. Returns a list of results for each test case. return [is_anagram_of_palindrome(s) for s in test_cases]"},{"question":"A circus needs to schedule its performances in a way that maximizes the number of distinct acts presented on stage. Each act can be performed only once in a day, and each performance has a start and end time. Given a list of potential acts with their respective start and end times, determine the maximum number of non-overlapping acts that can be scheduled. INPUT: The first line contains T, denoting the number of test cases. Each test case consists of a single integer n (the number of acts) followed by n lines, where each line contains two integers, start and end (the start and end times of each act). OUTPUT: For each test case, print the maximum number of non-overlapping acts that can be scheduled. CONSTRAINTS: 0 ≤ T ≤ 50 1 ≤ n ≤ 10000 0 ≤ start < end ≤ 100000 SAMPLE INPUT 2 3 1 3 2 4 3 5 4 1 2 2 3 3 4 4 5 SAMPLE OUTPUT 2 4","solution":"def max_non_overlapping_acts(test_cases): results = [] for acts in test_cases: sorted_acts = sorted(acts, key=lambda x: x[1]) end_time = -1 count = 0 for act in sorted_acts: if act[0] >= end_time: count += 1 end_time = act[1] results.append(count) return results def read_input_and_solve(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) acts = [] for j in range(index + 1, index + 1 + n): start, end = map(int, lines[j].split()) acts.append((start, end)) test_cases.append(acts) index += n + 1 return max_non_overlapping_acts(test_cases)"},{"question":"You have a list of integers, and you need to remove all occurrences of a given integer and then return the new length of the list. -----Constraints----- - The list can have a length of up to 10^4. - Each element in the list is an integer between -10^4 and 10^4. -----Input----- The input is given from Standard Input in the following format: n nums val - n: an integer representing the length of the list. - nums: a list of n integers. - val: an integer to be removed from the list. -----Output----- Print the new length of the list after removing all occurrences of val. -----Sample Input----- 7 1 2 3 4 3 2 1 3 -----Sample Output----- 5 After removing all occurrences of 3, the list becomes [1, 2, 4, 2, 1]. Hence, the new length is 5.","solution":"def remove_occurrences(nums, val): Remove all occurrences of val from nums and return the new length of the list. :param nums: List of integers :param val: Integer to be removed from the list :return: New length of the list after removing val nums[:] = [x for x in nums if x != val] return len(nums)"},{"question":"# Palindrome Checker Write a function that takes a string and checks whether it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). The function should return `True` if the input string is a palindrome, and `False` otherwise. Example ``` \\"racecar\\" => True \\"A man a plan a canal Panama\\" => True \\"hello\\" => False ```","solution":"import re def is_palindrome(s): Returns True if the input string s is a palindrome, else False. Ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lower case filtered_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Jessica is a botanist working in a large greenhouse. The greenhouse contains a grid of N times M sections, and each section contains a different type of plant. Jessica wants to water the plants such that every section is watered exactly once. However, the greenhouse has some constraints: certain sections have been over-watered and should be skipped. Jessica can start at any section and move to an adjacent section (left, right, up, or down) to water it. Additionally, she cannot move diagonally. Given the dimensions of the greenhouse, the locations of the sections that cannot be watered, and the positions of all sections, determine if it\'s possible for Jessica to water every manageable section exactly once. -----Input----- The first line contains two integers 1 le N, M le 1000, representing the number of rows and columns in the greenhouse grid. The next line contains an integer 0 le K le N*M, representing the number of sections that cannot be watered. Each of the next K lines contains two integers 1 le x le N and 1 le y le M, denoting the (x, y) coordinates of the sections that cannot be watered. -----Output----- Output \\"YES\\" if it is possible for Jessica to water the manageable sections exactly once, otherwise output \\"NO\\". -----Examples----- Sample Input 1: 3 3 1 2 2 Sample Output 1: YES Sample Input 2: 3 3 3 1 2 2 2 3 2 Sample Output 2: NO","solution":"def is_watering_possible(N, M, K, blocked_sections): from collections import deque # Initialize the grid and mark blocked sections grid = [[0] * M for _ in range(N)] for x, y in blocked_sections: grid[x-1][y-1] = -1 # Use -1 to mark blocked sections def bfs(start): # Directions for left, right, up, down movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * M for _ in range(N)] queue = deque([start]) visited[start[0]][start[1]] = True count = 0 while queue: x, y = queue.popleft() count += 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny)) return count # Find the total number of manageable sections manageable_sections = N * M - K # Find the starting point for BFS (first unblocked section) start = None for i in range(N): for j in range(M): if grid[i][j] == 0: start = (i, j) break if start: break # If no start point found, return \\"NO\\" if not start: return \\"NO\\" # Check if BFS from start can cover all manageable sections return \\"YES\\" if bfs(start) == manageable_sections else \\"NO\\""},{"question":"# Task Sarah loves collecting seashells at the beach and wants to organize them in a particular way. Each seashell can be uniquely identified by its size. Sarah wants to organize them into rows where each row contains shells of increasing size, and each row strictly contains one more shell than the previous row. Your task is to calculate the maximum number of rows Sarah can completely fill with her seashells. # Example For `n = 10`, the output should be `4`. Sarah has `10` seashells. She can organize them into rows as follows: - Row 1: 1 shell - Row 2: 2 shells - Row 3: 3 shells - Row 4: 4 shells So, the maximum number of rows she can fill completely is `4`. For `n = 7`, the output should be `3`. Sarah has `7` seashells. She can organize them into rows as follows: - Row 1: 1 shell - Row 2: 2 shells - Row 3: 3 shells After setting up 3 rows like this, she has used 6 shells, and cannot complete the next row which requires 4 shells. # Input/Output Given an integer `n` representing the number of seashells Sarah has: - `[input]` integer `n` `1 <= n <= 10^9` - `[output]` an integer The maximum number of rows Sarah can completely fill.","solution":"def max_rows(n): Calculate the maximum number of rows Sarah can completely fill with her seashells. Parameters: n (int): The number of seashells Returns: int: The maximum number of completely filled rows rows = 0 while n >= rows + 1: rows += 1 n -= rows return rows"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},j={class:"card-container"},Y={key:0,class:"empty-state"},F=["disabled"],P={key:0},R={key:1};function L(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",j,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,F)):l("",!0)])}const z=d(A,[["render",L],["__scopeId","data-v-c39651dc"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/14.md","filePath":"deepseek/14.md"}'),M={name:"deepseek/14.md"},G=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
